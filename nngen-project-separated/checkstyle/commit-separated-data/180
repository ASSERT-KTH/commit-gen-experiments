BLEU SCORE: 0.0859076483566362

TEST MSG: config : bump sevntu to 1 . 32 . 0 and checkstyle in senvtu to 8 . 12
GENERATED MSG: config : bump checkstyle version

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index e09f01f . . 50a2cf2 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 208 , 9 + 208 , 9 @ @ <nl> < powermock . version > 2 . 0 . 0 - beta . 5 < / powermock . version > <nl> < saxon . version > 9 . 8 . 0 - 14 < / saxon . version > <nl> < maven . checkstyle . plugin . version > 3 . 0 . 0 < / maven . checkstyle . plugin . version > <nl> - < maven . sevntu . checkstyle . plugin . version > 1 . 31 . 0 < / maven . sevntu . checkstyle . plugin . version > <nl> + < maven . sevntu . checkstyle . plugin . version > 1 . 32 . 0 < / maven . sevntu . checkstyle . plugin . version > <nl> < maven . sevntu - checkstyle - check . checkstyle . version > <nl> - 8 . 11 <nl> + 8 . 12 <nl> < / maven . sevntu - checkstyle - check . checkstyle . version > <nl> < maven . versions . plugin . version > 2 . 5 < / maven . versions . plugin . version > <nl> < java . version > 1 . 8 < / java . version >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / TypecastParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / TypecastParenPadCheckTest . java <nl> index 6288d69 . . 8f09b31 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / TypecastParenPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / TypecastParenPadCheckTest . java <nl> @ @ - 40 , 7 + 40 , 9 @ @ public class TypecastParenPadCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " whitespace " + File . separator + filename ) ; <nl> + + " whitespace " + File . separator <nl> + + " typecastparenpad " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 52 , 7 + 54 , 7 @ @ public class TypecastParenPadCheckTest <nl> " 89 : 14 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " ( " ) , <nl> " 89 : 21 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " ) " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypecastParenPadWhitespace . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 71 , 7 + 73 , 7 @ @ public class TypecastParenPadCheckTest <nl> " 241 : 18 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " ( " ) , <nl> " 241 : 21 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " ) " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypecastParenPadWhitespace . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 80 , 7 + 82 , 7 @ @ public class TypecastParenPadCheckTest <nl> createCheckConfig ( TypecastParenPadCheck . class ) ; <nl> checkConfig . addAttribute ( " option " , PadOption . SPACE . toString ( ) ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputWhitespaceAround . java " ) , <nl> + verify ( checkConfig , getPath ( " InputTypecastParenPadWhitespaceAround . java " ) , <nl> expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespace . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespace . java <nl> new file mode 100644 <nl> index 0000000 . . 2519195 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespace . java <nl> @ @ - 0 , 0 + 1 , 289 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl <nl> + . tools . <nl> + checkstyle . checks . whitespace . typecastparenpad ; <nl> + <nl> + / * * <nl> + * Class for testing whitespace issues . <nl> + * error missing author tag <nl> + * * / <nl> + class InputTypecastParenPadWhitespace <nl> + { <nl> + / * * ignore assignment * * / <nl> + private int mVar1 = 1 ; <nl> + / * * ignore assignment * * / <nl> + private int mVar2 = 1 ; <nl> + / * * Should be ok * * / <nl> + private int mVar3 = 1 ; <nl> + <nl> + / * * method * * / <nl> + void method1 ( ) <nl> + { <nl> + final int a = 1 ; <nl> + int b = 1 ; / / Ignore 1 <nl> + b = 1 ; / / Ignore 1 <nl> + b + = 1 ; / / Ignore 1 <nl> + b - = - 1 + ( + b ) ; / / Ignore 2 <nl> + b = b + + + b - - ; / / Ignore 1 <nl> + b = + + b - - - b ; / / Ignore 1 <nl> + } <nl> + <nl> + / * * method * * / <nl> + void method2 ( ) <nl> + { <nl> + synchronized ( this ) { <nl> + } <nl> + try { <nl> + } <nl> + catch ( RuntimeException e ) { <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + skip blank lines between comment and code , <nl> + should be ok <nl> + * * / <nl> + <nl> + <nl> + private int mVar4 = 1 ; <nl> + <nl> + <nl> + / * * test WS after void return * / <nl> + private void fastExit ( ) <nl> + { <nl> + boolean complicatedStuffNeeded = true ; <nl> + if ( ! complicatedStuffNeeded ) <nl> + { <nl> + return ; / / should not complain about missing WS after return <nl> + } <nl> + else <nl> + { <nl> + / / do complicated stuff <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * test WS after non void return <nl> + @ return 2 <nl> + * / <nl> + private int nonVoid ( ) <nl> + { <nl> + if ( true ) <nl> + { <nl> + return ( 2 ) ; / / should complain about missing WS after return <nl> + } <nl> + else <nl> + { <nl> + return 2 ; / / this is ok <nl> + } <nl> + } <nl> + <nl> + / * * test casts * * / <nl> + private void testCasts ( ) <nl> + { <nl> + Object o = ( Object ) new Object ( ) ; / / ok <nl> + o = ( Object ) o ; / / error <nl> + o = ( Object ) o ; / / ok <nl> + o = ( Object ) <nl> + o ; / / ok <nl> + } <nl> + <nl> + / * * test questions * * / <nl> + private void testQuestions ( ) <nl> + { <nl> + boolean b = ( 1 = = 2 ) ? true : false ; <nl> + b = ( 1 = = 2 ) ? false : true ; <nl> + } <nl> + <nl> + / * * star test * * / <nl> + private void starTest ( ) <nl> + { <nl> + int x = 2 * 3 * 4 ; <nl> + } <nl> + <nl> + / * * boolean test * * / <nl> + private void boolTest ( ) <nl> + { <nl> + boolean a = true ; <nl> + boolean x = ! a ; <nl> + int z = ~ 1 + ~ 2 ; <nl> + } <nl> + <nl> + / * * division test * * / <nl> + private void divTest ( ) <nl> + { <nl> + int a = 4 % 2 ; <nl> + int b = 4 % 2 ; <nl> + int c = 4 % 2 ; <nl> + int d = 4 % 2 ; <nl> + int e = 4 / 2 ; <nl> + int f = 4 / 2 ; <nl> + int g = 4 / 2 ; <nl> + int h = 4 / 2 ; <nl> + } <nl> + <nl> + / * * @ return dot test * * / <nl> + private java . lang . String dotTest ( ) <nl> + { <nl> + Object o = new java . lang . Object ( ) ; <nl> + o . <nl> + toString ( ) ; <nl> + o <nl> + . toString ( ) ; <nl> + o . toString ( ) ; <nl> + return o . toString ( ) ; <nl> + } <nl> + <nl> + / * * assert statement test * / <nl> + public void assertTest ( ) <nl> + { <nl> + / / OK <nl> + assert true ; <nl> + <nl> + / / OK <nl> + assert true : " Whups " ; <nl> + <nl> + / / evil colons , should be OK <nl> + assert " OK " . equals ( null ) ? false : true : " Whups " ; <nl> + <nl> + / / missing WS around assert <nl> + assert ( true ) ; <nl> + <nl> + / / missing WS around colon <nl> + assert true : " Whups " ; <nl> + } <nl> + <nl> + / * * another check * / <nl> + void donBradman ( Runnable aRun ) <nl> + { <nl> + donBradman ( new Runnable ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } ) ; <nl> + <nl> + final Runnable r = new Runnable ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + / * * rfe 521323 , detect whitespace before ' ; ' * / <nl> + void rfe521323 ( ) <nl> + { <nl> + doStuff ( ) ; <nl> + / / ^ whitespace <nl> + for ( int i = 0 ; i < 5 ; i + + ) { <nl> + / / ^ whitespace <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * bug 806243 ( NoWhitespaceBeforeCheck error for anonymous inner class ) * / <nl> + private int i ; <nl> + / / ^ whitespace <nl> + private int i1 , i2 , i3 ; <nl> + / / ^ whitespace <nl> + private int i4 , i5 , i6 ; <nl> + <nl> + / * * bug 806243 ( NoWhitespaceBeforeCheck error for anonymous inner class ) * / <nl> + void bug806243 ( ) <nl> + { <nl> + Object o = new InputTypecastParenPadWhitespace ( ) { <nl> + private int j ; <nl> + / / ^ whitespace <nl> + } ; <nl> + } <nl> + <nl> + void doStuff ( ) { <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Bug 806242 ( NoWhitespaceBeforeCheck error with an interface ) . <nl> + * @ author o _ sukhodolsky <nl> + * @ version 1 . 0 <nl> + * / <nl> + interface IFoo _ TypecastParenPad <nl> + { <nl> + void foo ( ) ; <nl> + / / ^ whitespace <nl> + } <nl> + <nl> + / * * <nl> + * Avoid Whitespace errors in for loop . <nl> + * @ author lkuehne <nl> + * @ version 1 . 0 <nl> + * / <nl> + class SpecialCasesInForLoop _ TypecastParenPad <nl> + { <nl> + void forIterator ( ) <nl> + { <nl> + / / avoid conflict between WhiteSpaceAfter ' ; ' and ParenPad ( nospace ) <nl> + for ( int i = 0 ; i + + < 5 ; ) { <nl> + 	 / / ^ no whitespace <nl> + 	 } <nl> + <nl> + / / bug 895072 <nl> + 	 / / avoid confilct between ParenPad ( space ) and NoWhiteSpace before ' ; ' <nl> + 	 int i = 0 ; <nl> + 	 for ( ; i < 5 ; i + + ) { <nl> + 	 / / ^ whitespace <nl> + 	 } <nl> + for ( int anInt : getSomeInts ( ) ) { <nl> + / / Should be ignored <nl> + } <nl> + } <nl> + <nl> + int [ ] getSomeInts ( ) { <nl> + int i = ( int ) ( 2 / 3 ) ; <nl> + return null ; <nl> + } <nl> + <nl> + public void myMethod ( ) { <nl> + new Thread ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } . start ( ) ; <nl> + } <nl> + <nl> + public void foo ( java . util . List < ? extends String [ ] > bar , Comparable < ? super Object [ ] > baz ) { } <nl> + <nl> + public void mySuperMethod ( ) { <nl> + Runnable [ ] runs = new Runnable [ ] { new Runnable ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } , <nl> + new Runnable ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } } ; <nl> + runs [ 0 ] <nl> + . <nl> + run ( ) <nl> + ; <nl> + } <nl> + <nl> + public void testNullSemi ( ) { <nl> + return ; <nl> + } <nl> + <nl> + public void register ( Object obj ) { } <nl> + <nl> + public void doSomething ( String args [ ] ) { <nl> + register ( boolean [ ] . class ) ; <nl> + register ( args ) ; <nl> + } <nl> + <nl> + public void parentheses ( ) { <nl> + testNullSemi <nl> + ( <nl> + ) <nl> + ; <nl> + } <nl> + <nl> + public static void testNoWhitespaceBeforeEllipses ( String . . . args ) { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespaceAround . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespaceAround . java <nl> new file mode 100644 <nl> index 0000000 . . 16b4f2d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespaceAround . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . typecastparenpad ; <nl> + <nl> + @ SuppressWarnings ( { " this " , " that " } ) <nl> + class InputTypecastParenPadWhitespaceAround <nl> + { <nl> + protected InputTypecastParenPadWhitespaceAround ( int i ) <nl> + { <nl> + this ( ) ; / / whitespace <nl> + toString ( ) ; <nl> + } <nl> + protected InputTypecastParenPadWhitespaceAround ( ) <nl> + { <nl> + super ( ) ; <nl> + } <nl> + <nl> + public void enhancedFor ( ) <nl> + { <nl> + int [ ] i = new int [ 2 ] ; <nl> + for ( int j : i ) { <nl> + System . identityHashCode ( j ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ interface CronExpression _ TypecastParenPad { <nl> + 	 Class < ? > [ ] groups ( ) default { } ; <nl> + } <nl> + <nl> + @ interface CronExpression1 _ TypecastParenPad { <nl> + 	 Class < ? > [ ] groups ( ) default { } ; / / extra space <nl> + }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index e09f01f . . 50a2cf2 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 208 , 9 + 208 , 9 @ @ 
 < powermock . version > 2 . 0 . 0 - beta . 5 < / powermock . version > 
 < saxon . version > 9 . 8 . 0 - 14 < / saxon . version > 
 < maven . checkstyle . plugin . version > 3 . 0 . 0 < / maven . checkstyle . plugin . version > 
 - < maven . sevntu . checkstyle . plugin . version > 1 . 31 . 0 < / maven . sevntu . checkstyle . plugin . version > 
 + < maven . sevntu . checkstyle . plugin . version > 1 . 32 . 0 < / maven . sevntu . checkstyle . plugin . version > 
 < maven . sevntu - checkstyle - check . checkstyle . version > 
 - 8 . 11 
 + 8 . 12 
 < / maven . sevntu - checkstyle - check . checkstyle . version > 
 < maven . versions . plugin . version > 2 . 5 < / maven . versions . plugin . version > 
 < java . version > 1 . 8 < / java . version >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / TypecastParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / TypecastParenPadCheckTest . java 
 index 6288d69 . . 8f09b31 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / TypecastParenPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / TypecastParenPadCheckTest . java 
 @ @ - 40 , 7 + 40 , 9 @ @ public class TypecastParenPadCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " whitespace " + File . separator + filename ) ; 
 + + " whitespace " + File . separator 
 + + " typecastparenpad " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 52 , 7 + 54 , 7 @ @ public class TypecastParenPadCheckTest 
 " 89 : 14 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " ( " ) , 
 " 89 : 21 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " ) " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypecastParenPadWhitespace . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 71 , 7 + 73 , 7 @ @ public class TypecastParenPadCheckTest 
 " 241 : 18 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " ( " ) , 
 " 241 : 21 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " ) " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypecastParenPadWhitespace . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 80 , 7 + 82 , 7 @ @ public class TypecastParenPadCheckTest 
 createCheckConfig ( TypecastParenPadCheck . class ) ; 
 checkConfig . addAttribute ( " option " , PadOption . SPACE . toString ( ) ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputWhitespaceAround . java " ) , 
 + verify ( checkConfig , getPath ( " InputTypecastParenPadWhitespaceAround . java " ) , 
 expected ) ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespace . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespace . java 
 new file mode 100644 
 index 0000000 . . 2519195 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespace . java 
 @ @ - 0 , 0 + 1 , 289 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl 
 + . tools . 
 + checkstyle . checks . whitespace . typecastparenpad ; 
 + 
 + / * * 
 + * Class for testing whitespace issues . 
 + * error missing author tag 
 + * * / 
 + class InputTypecastParenPadWhitespace 
 + { 
 + / * * ignore assignment * * / 
 + private int mVar1 = 1 ; 
 + / * * ignore assignment * * / 
 + private int mVar2 = 1 ; 
 + / * * Should be ok * * / 
 + private int mVar3 = 1 ; 
 + 
 + / * * method * * / 
 + void method1 ( ) 
 + { 
 + final int a = 1 ; 
 + int b = 1 ; / / Ignore 1 
 + b = 1 ; / / Ignore 1 
 + b + = 1 ; / / Ignore 1 
 + b - = - 1 + ( + b ) ; / / Ignore 2 
 + b = b + + + b - - ; / / Ignore 1 
 + b = + + b - - - b ; / / Ignore 1 
 + } 
 + 
 + / * * method * * / 
 + void method2 ( ) 
 + { 
 + synchronized ( this ) { 
 + } 
 + try { 
 + } 
 + catch ( RuntimeException e ) { 
 + } 
 + } 
 + 
 + / * * 
 + skip blank lines between comment and code , 
 + should be ok 
 + * * / 
 + 
 + 
 + private int mVar4 = 1 ; 
 + 
 + 
 + / * * test WS after void return * / 
 + private void fastExit ( ) 
 + { 
 + boolean complicatedStuffNeeded = true ; 
 + if ( ! complicatedStuffNeeded ) 
 + { 
 + return ; / / should not complain about missing WS after return 
 + } 
 + else 
 + { 
 + / / do complicated stuff 
 + } 
 + } 
 + 
 + 
 + / * * test WS after non void return 
 + @ return 2 
 + * / 
 + private int nonVoid ( ) 
 + { 
 + if ( true ) 
 + { 
 + return ( 2 ) ; / / should complain about missing WS after return 
 + } 
 + else 
 + { 
 + return 2 ; / / this is ok 
 + } 
 + } 
 + 
 + / * * test casts * * / 
 + private void testCasts ( ) 
 + { 
 + Object o = ( Object ) new Object ( ) ; / / ok 
 + o = ( Object ) o ; / / error 
 + o = ( Object ) o ; / / ok 
 + o = ( Object ) 
 + o ; / / ok 
 + } 
 + 
 + / * * test questions * * / 
 + private void testQuestions ( ) 
 + { 
 + boolean b = ( 1 = = 2 ) ? true : false ; 
 + b = ( 1 = = 2 ) ? false : true ; 
 + } 
 + 
 + / * * star test * * / 
 + private void starTest ( ) 
 + { 
 + int x = 2 * 3 * 4 ; 
 + } 
 + 
 + / * * boolean test * * / 
 + private void boolTest ( ) 
 + { 
 + boolean a = true ; 
 + boolean x = ! a ; 
 + int z = ~ 1 + ~ 2 ; 
 + } 
 + 
 + / * * division test * * / 
 + private void divTest ( ) 
 + { 
 + int a = 4 % 2 ; 
 + int b = 4 % 2 ; 
 + int c = 4 % 2 ; 
 + int d = 4 % 2 ; 
 + int e = 4 / 2 ; 
 + int f = 4 / 2 ; 
 + int g = 4 / 2 ; 
 + int h = 4 / 2 ; 
 + } 
 + 
 + / * * @ return dot test * * / 
 + private java . lang . String dotTest ( ) 
 + { 
 + Object o = new java . lang . Object ( ) ; 
 + o . 
 + toString ( ) ; 
 + o 
 + . toString ( ) ; 
 + o . toString ( ) ; 
 + return o . toString ( ) ; 
 + } 
 + 
 + / * * assert statement test * / 
 + public void assertTest ( ) 
 + { 
 + / / OK 
 + assert true ; 
 + 
 + / / OK 
 + assert true : " Whups " ; 
 + 
 + / / evil colons , should be OK 
 + assert " OK " . equals ( null ) ? false : true : " Whups " ; 
 + 
 + / / missing WS around assert 
 + assert ( true ) ; 
 + 
 + / / missing WS around colon 
 + assert true : " Whups " ; 
 + } 
 + 
 + / * * another check * / 
 + void donBradman ( Runnable aRun ) 
 + { 
 + donBradman ( new Runnable ( ) { 
 + public void run ( ) { 
 + } 
 + } ) ; 
 + 
 + final Runnable r = new Runnable ( ) { 
 + public void run ( ) { 
 + } 
 + } ; 
 + } 
 + 
 + / * * rfe 521323 , detect whitespace before ' ; ' * / 
 + void rfe521323 ( ) 
 + { 
 + doStuff ( ) ; 
 + / / ^ whitespace 
 + for ( int i = 0 ; i < 5 ; i + + ) { 
 + / / ^ whitespace 
 + } 
 + } 
 + 
 + 
 + / * * bug 806243 ( NoWhitespaceBeforeCheck error for anonymous inner class ) * / 
 + private int i ; 
 + / / ^ whitespace 
 + private int i1 , i2 , i3 ; 
 + / / ^ whitespace 
 + private int i4 , i5 , i6 ; 
 + 
 + / * * bug 806243 ( NoWhitespaceBeforeCheck error for anonymous inner class ) * / 
 + void bug806243 ( ) 
 + { 
 + Object o = new InputTypecastParenPadWhitespace ( ) { 
 + private int j ; 
 + / / ^ whitespace 
 + } ; 
 + } 
 + 
 + void doStuff ( ) { 
 + } 
 + } 
 + 
 + / * * 
 + * Bug 806242 ( NoWhitespaceBeforeCheck error with an interface ) . 
 + * @ author o _ sukhodolsky 
 + * @ version 1 . 0 
 + * / 
 + interface IFoo _ TypecastParenPad 
 + { 
 + void foo ( ) ; 
 + / / ^ whitespace 
 + } 
 + 
 + / * * 
 + * Avoid Whitespace errors in for loop . 
 + * @ author lkuehne 
 + * @ version 1 . 0 
 + * / 
 + class SpecialCasesInForLoop _ TypecastParenPad 
 + { 
 + void forIterator ( ) 
 + { 
 + / / avoid conflict between WhiteSpaceAfter ' ; ' and ParenPad ( nospace ) 
 + for ( int i = 0 ; i + + < 5 ; ) { 
 + 	 / / ^ no whitespace 
 + 	 } 
 + 
 + / / bug 895072 
 + 	 / / avoid confilct between ParenPad ( space ) and NoWhiteSpace before ' ; ' 
 + 	 int i = 0 ; 
 + 	 for ( ; i < 5 ; i + + ) { 
 + 	 / / ^ whitespace 
 + 	 } 
 + for ( int anInt : getSomeInts ( ) ) { 
 + / / Should be ignored 
 + } 
 + } 
 + 
 + int [ ] getSomeInts ( ) { 
 + int i = ( int ) ( 2 / 3 ) ; 
 + return null ; 
 + } 
 + 
 + public void myMethod ( ) { 
 + new Thread ( ) { 
 + public void run ( ) { 
 + } 
 + } . start ( ) ; 
 + } 
 + 
 + public void foo ( java . util . List < ? extends String [ ] > bar , Comparable < ? super Object [ ] > baz ) { } 
 + 
 + public void mySuperMethod ( ) { 
 + Runnable [ ] runs = new Runnable [ ] { new Runnable ( ) { 
 + public void run ( ) { 
 + } 
 + } , 
 + new Runnable ( ) { 
 + public void run ( ) { 
 + } 
 + } } ; 
 + runs [ 0 ] 
 + . 
 + run ( ) 
 + ; 
 + } 
 + 
 + public void testNullSemi ( ) { 
 + return ; 
 + } 
 + 
 + public void register ( Object obj ) { } 
 + 
 + public void doSomething ( String args [ ] ) { 
 + register ( boolean [ ] . class ) ; 
 + register ( args ) ; 
 + } 
 + 
 + public void parentheses ( ) { 
 + testNullSemi 
 + ( 
 + ) 
 + ; 
 + } 
 + 
 + public static void testNoWhitespaceBeforeEllipses ( String . . . args ) { 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespaceAround . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespaceAround . java 
 new file mode 100644 
 index 0000000 . . 16b4f2d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / typecastparenpad / InputTypecastParenPadWhitespaceAround . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . typecastparenpad ; 
 + 
 + @ SuppressWarnings ( { " this " , " that " } ) 
 + class InputTypecastParenPadWhitespaceAround 
 + { 
 + protected InputTypecastParenPadWhitespaceAround ( int i ) 
 + { 
 + this ( ) ; / / whitespace 
 + toString ( ) ; 
 + } 
 + protected InputTypecastParenPadWhitespaceAround ( ) 
 + { 
 + super ( ) ; 
 + } 
 + 
 + public void enhancedFor ( ) 
 + { 
 + int [ ] i = new int [ 2 ] ; 
 + for ( int j : i ) { 
 + System . identityHashCode ( j ) ; 
 + } 
 + } 
 + } 
 + 
 + @ interface CronExpression _ TypecastParenPad { 
 + 	 Class < ? > [ ] groups ( ) default { } ; 
 + } 
 + 
 + @ interface CronExpression1 _ TypecastParenPad { 
 + 	 Class < ? > [ ] groups ( ) default { } ; / / extra space 
 + }
