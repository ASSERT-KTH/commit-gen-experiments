BLEU SCORE: 0.026279617104084448

TEST MSG: Issue # 2640 : Change abbreviationAsWordInName error message to contains name that violates a format
GENERATED MSG: AbbreviationAsWordInName . # 212

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java <nl> index fe7317f . . 9c65287 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java <nl> @ @ - 43 , 18 + 43 , 17 @ @ public class AbbreviationAsWordInNameTest extends BaseCheckTestSupport { <nl> public void abbreviationAsWordInNameTest ( ) throws Exception { <nl> <nl> final int maxCapitalCount = 1 ; <nl> - final String msg = getCheckMessage ( clazz , MSG _ KEY , maxCapitalCount ) ; <nl> <nl> final String [ ] expected = { <nl> - " 50 : " + msg , <nl> - " 52 : " + msg , <nl> - " 54 : " + msg , <nl> - " 58 : " + msg , <nl> - " 60 : " + msg , <nl> - " 62 : " + msg , <nl> - " 67 : " + msg , <nl> - " 69 : " + msg , <nl> - " 71 : " + msg , <nl> + " 50 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , <nl> + " 52 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , <nl> + " 54 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , <nl> + " 58 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , <nl> + " 60 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , <nl> + " 62 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , <nl> + " 67 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , <nl> + " 69 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , <nl> + " 71 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , <nl> } ; <nl> <nl> final String filePath = getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) ; <nl> @ @ - 63 , 4 + 62 , 8 @ @ public class AbbreviationAsWordInNameTest extends BaseCheckTestSupport { <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> + <nl> + private String getWarningMessage ( String typeName , int expectedCapitalCount ) { <nl> + return getCheckMessage ( clazz , MSG _ KEY , typeName , expectedCapitalCount ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> index d2f65f1 . . 80e4138 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> @ @ - 208 , 7 + 208 , 7 @ @ public class AbbreviationAsWordInNameCheck extends Check { <nl> <nl> final String abbr = getDisallowedAbbreviation ( typeName ) ; <nl> if ( abbr ! = null ) { <nl> - log ( nameAst . getLineNo ( ) , MSG _ KEY , allowedAbbreviationLength ) ; <nl> + log ( nameAst . getLineNo ( ) , MSG _ KEY , typeName , allowedAbbreviationLength ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages . properties <nl> index fe363cf . . b62c859 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages . properties <nl> @ @ - 3 , 4 + 3 , 4 @ @ illegal . abstract . class . name = Name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . <nl> method . name . equals . class . name = Method Name ' ' { 0 } ' ' must not equal the enclosing class name . <nl> no . abstract . class . modifier = Class ' ' { 0 } ' ' must be declared as ' ' abstract ' ' . <nl> <nl> - abbreviation . as . word = Abbreviation in name must contain no more than ' ' { 0 } ' ' capital letters . <nl> + abbreviation . as . word = Abbreviation in name ' ' { 0 } ' ' must contain no more than ' ' { 1 } ' ' capital letters . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ de . properties <nl> index f4b21f5 . . 5dd04eb 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ de . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ de . properties <nl> @ @ - 3 , 4 + 3 , 4 @ @ illegal . abstract . class . name = Klassenname ' ' { 0 } ' ' entspricht nicht dem Muster ' ' { 1 <nl> method . name . equals . class . name = Methodenname ' ' { 0 } ' ' darf nicht der gleiche sein wie der Name der Klasse . <nl> no . abstract . class . modifier = Die Klasse ' ' { 0 } ' ' muss ' ' abstract ' ' deklariert werden . <nl> <nl> - abbreviation . as . word = Die Abk ü rzung in diesem Bezeichner darf h ö chstens aus ' ' { 0 } ' ' Gro ß buchstaben bestehen . <nl> + abbreviation . as . word = Die Abk ü rzung in diesem Bezeichner ' ' { 0 } ' ' darf h ö chstens aus ' ' { 1 } ' ' Gro ß buchstaben bestehen . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ es . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ es . properties <nl> index 43dcd7a . . 8631669 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ es . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ es . properties <nl> @ @ - 2 , 4 + 2 , 4 @ @ name . invalidPattern = El nombre ' ' { 0 } ' ' debe coincidir con el patr ó n ' ' { 1 } ' ' . <nl> illegal . abstract . class . name = El nombre ' ' { 0 } ' ' debe coincidir con el patr ó n ' ' { 1 } ' ' . <nl> method . name . equals . class . name = Nombre de m é todo ' ' { 0 } ' ' no debe ser igual al nombre de clase envolvente . <nl> no . abstract . class . modifier = Clase ' ' { 0 } ' ' se debe declarar como ' ' abstracta ' ' . <nl> - abbreviation . as . word = Abreviatura en nombre debe contener no m á s de ' ' { 0 } ' ' may ú sculas . <nl> + abbreviation . as . word = Abreviatura en nombre ' ' { 0 } ' ' debe contener no m á s de ' ' { 1 } ' ' may ú sculas . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fi . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fi . properties <nl> index 7dd9e66 . . 5e36159 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fi . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fi . properties <nl> @ @ - 2 , 4 + 2 , 4 @ @ name . invalidPattern = Nimen ' ' { 0 } ' ' pit ä ä olla mallin ' ' { 1 } ' ' mukainen . <nl> illegal . abstract . class . name = Nimen ' ' { 0 } ' ' pit ä ä olla mallin ' ' { 1 } ' ' mukainen . <nl> method . name . equals . class . name = Tavan nimi ' ' { 0 } ' ' ei saa yht ä sulkevan luokan nimi . <nl> no . abstract . class . modifier = Luokka ' ' { 0 } ' ' on ilmoitettu olevan ' ' abstrakti ' ' . <nl> - abbreviation . as . word = Lyhennys nimi saa olla enint ä ä n ' ' { 0 } ' ' isoilla kirjaimilla . <nl> + abbreviation . as . word = Lyhennys nimi saa olla ' ' { 0 } ' ' enint ä ä n ' ' { 1 } ' ' isoilla kirjaimilla . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fr . properties <nl> index 882b2d4 . . 55e253e 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fr . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fr . properties <nl> @ @ - 2 , 4 + 2 , 4 @ @ name . invalidPattern = Le nom ' ' { 0 } ' ' n ' ' est pas conforme à l ' ' expression ' ' { 1 } ' ' . <nl> illegal . abstract . class . name = Le nom de la classe abstraite ' ' { 0 } ' ' n ' ' est pas conforme à l ' ' expression ' ' { 1 } ' ' . <nl> method . name . equals . class . name = Nom de la m é thode ' ' { 0 } ' ' ne doit pas ê tre é gal au nom de la classe englobante . <nl> no . abstract . class . modifier = Classe ' ' { 0 } ' ' doit ê tre d é clar é e comme ' ' abstrait ' ' . <nl> - abbreviation . as . word = Abr é viation de nom ne doit pas contenir plus de ' ' { 0 } ' ' lettres majuscules . <nl> + abbreviation . as . word = Abr é viation de nom ' ' { 0 } ' ' ne doit pas contenir plus de ' ' { 1 } ' ' lettres majuscules . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ ja . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ ja . properties <nl> index 3cd2f5b . . 94fbcf6 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ ja . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ ja . properties <nl> @ @ - 2 , 4 + 2 , 4 @ @ name . invalidPattern = 名 前 ' ' { 0 } ' ' は パ タ ー ン ' ' { 1 } ' ' に 一 致 し な け れ <nl> illegal . abstract . class . name = 名 前 ' ' { 0 } ' ' は パ タ ー ン ' ' { 1 } ' ' に 一 致 し な け れ ば な り ま せ ん 。 <nl> method . name . equals . class . name = メ ソ ッ ド 名 は ' ' { 0 } ' ' エ ン ク ロ ー ジ ン グ ク ラ ス 名 と 同 じ に は な り ま せ ん 。 <nl> no . abstract . class . modifier = ク ラ ス ' ' { 0 } ' ' ' ' 抽 象 ' ' と し て 宣 言 す る 必 要 が あ り ま す 。 <nl> - abbreviation . as . word = 名 前 に 略 語 は 以 下 に す る 必 要 が あ り ま す ' ' { 0 } ' ' 大 文 字 を 。 <nl> + abbreviation . as . word = 名 前 に 略 語 は ' ' { 0 } ' ' 以 下 に す る 必 要 が あ り ま す ' ' { 1 } ' ' 大 文 字 を 。 <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ pt . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ pt . properties <nl> index 52684d5 . . 11d9960 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ pt . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ pt . properties <nl> @ @ - 2 , 4 + 2 , 4 @ @ illegal . abstract . class . name = Nome ' ' { 0 } ' ' deve condizer com o padr ã o ' ' { 1 } ' ' . <nl> name . invalidPattern = Nome ' ' { 0 } ' ' deve condizer com o padr ã o ' ' { 1 } ' ' . <nl> method . name . equals . class . name = Nome do m é todo ' ' { 0 } ' ' n ã o deve ser igual ao nome da classe delimitador . <nl> no . abstract . class . modifier = Class ' ' { 0 } ' ' deve ser declarado como ' ' abstrato ' ' . <nl> - abbreviation . as . word = Sigla em nome deve conter n ã o mais do que ' ' { 0 } ' ' letras mai ú sculas . <nl> + abbreviation . as . word = Sigla em nome ' ' { 0 } ' ' deve conter n ã o mais do que ' ' { 1 } ' ' letras mai ú sculas . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ tr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ tr . properties <nl> index abd63b9 . . 0081cb3 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ tr . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ tr . properties <nl> @ @ - 8 , 4 + 8 , 4 @ @ name . invalidPattern = ' ' { 0 } ' ' ismi , ş u kal ı pta olmal ı : ' ' { 1 } ' ' . <nl> <nl> no . abstract . class . modifier = ' ' { 0 } ' ' s ı n ı f ı ' ' abstract ' ' olarak tan ı mlanmal ı . <nl> <nl> - abbreviation . as . word = Ad ı k ı saltmas ı ' ' { 0 } ' ' b ü y ü k harflerle fazla i ç ermelidir . <nl> + abbreviation . as . word = ' ' { 0 } ' ' Ad ı k ı saltmas ı ' ' { 1 } ' ' b ü y ü k harflerle fazla i ç ermelidir . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> index c75c8c4 . . 2847ed7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> @ @ - 31 , 8 + 31 , 6 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> - / * * Warning message . * / <nl> - private String warningMessage ; <nl> <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> @ @ - 46 , 17 + 44 , 16 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> final int expectedCapitalCount = 3 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviations " , " III " ) ; <nl> checkConfig . addAttribute ( " tokens " , " CLASS _ DEF " ) ; <nl> checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 9 : " + warningMessage , <nl> - " 12 : " + warningMessage , <nl> - " 32 : " + warningMessage , <nl> - " 37 : " + warningMessage , <nl> + " 9 : " + getWarningMessage ( " FactoryWithBADNAme " , expectedCapitalCount ) , <nl> + " 12 : " + getWarningMessage ( " AbstractCLASSName " , expectedCapitalCount ) , <nl> + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> @ @ - 66 , 7 + 63 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> public void testTypeNamesForFourPermittedCapitalLetters ( ) throws Exception { <nl> <nl> final int expectedCapitalCount = 4 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; <nl> @ @ - 75 , 7 + 71 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 32 : " + warningMessage , <nl> + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> @ @ - 85 , 7 + 81 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> public void testTypeNamesForFivePermittedCapitalLetters ( ) throws Exception { <nl> <nl> final int expectedCapitalCount = 5 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; <nl> @ @ - 93 , 8 + 88 , 8 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " tokens " , " CLASS _ DEF " ) ; <nl> checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 32 : " + warningMessage , <nl> - " 37 : " + warningMessage , <nl> + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> @ @ - 104 , 7 + 99 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> public void testTypeAndVariablesAndMethodNames ( ) throws Exception { <nl> <nl> final int expectedCapitalCount = 5 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; <nl> @ @ - 116 , 12 + 110 , 12 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 32 : " + warningMessage , <nl> - " 37 : " + warningMessage , <nl> - " 38 : " + warningMessage , <nl> - " 39 : " + warningMessage , <nl> - " 40 : " + warningMessage , <nl> - " 58 : " + warningMessage , <nl> + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , <nl> + " 39 : " + getWarningMessage ( " marazmaticVARIABLEName " , expectedCapitalCount ) , <nl> + " 40 : " + getWarningMessage ( " MARAZMATICVariableName " , expectedCapitalCount ) , <nl> + " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> @ @ - 131 , 7 + 125 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> public void testTypeAndVariablesAndMethodNamesWithNoIgnores ( ) throws Exception { <nl> <nl> final int expectedCapitalCount = 5 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; <nl> @ @ - 145 , 13 + 138 , 13 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 32 : " + warningMessage , <nl> - " 37 : " + warningMessage , <nl> - " 38 : " + warningMessage , <nl> - " 66 : " + warningMessage , <nl> - " 72 : " + warningMessage , <nl> - " 78 : " + warningMessage , <nl> - " 84 : " + warningMessage , <nl> + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , <nl> + " 66 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , <nl> + " 72 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , <nl> + " 78 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , <nl> + " 84 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> @ @ - 161 , 7 + 154 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> public void testTypeAndVariablesAndMethodNamesWithIgnores ( ) throws Exception { <nl> <nl> final int expectedCapitalCount = 5 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; <nl> @ @ - 175 , 9 + 167 , 9 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 32 : " + warningMessage , <nl> - " 37 : " + warningMessage , <nl> - " 38 : " + warningMessage , <nl> + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> @ @ - 187 , 7 + 179 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> public void testTypeAndVariablesAndMethodNamesWithIgnoresFinal ( ) throws Exception { <nl> <nl> final int expectedCapitalCount = 4 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; <nl> @ @ - 201 , 12 + 192 , 13 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 12 : " + warningMessage , <nl> - " 32 : " + warningMessage , <nl> - " 37 : " + warningMessage , <nl> - " 38 : " + warningMessage , <nl> - " 58 : " + warningMessage , / / not in ignore list <nl> - " 60 : " + warningMessage , / / no ignore for static <nl> + " 12 : " + getWarningMessage ( " AbstractCLASSName " , expectedCapitalCount ) , <nl> + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , <nl> + " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , / / not in ignore list <nl> + " 60 : " <nl> + + getWarningMessage ( " s2erialNUMBER " , expectedCapitalCount ) , / / no ignore for static <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> @ @ - 216 , 7 + 208 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> public void testTypeAndVariablesAndMethodNamesWithIgnoresStatic ( ) throws Exception { <nl> <nl> final int expectedCapitalCount = 5 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; <nl> @ @ - 230 , 11 + 221 , 12 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 32 : " + warningMessage , <nl> - " 37 : " + warningMessage , <nl> - " 38 : " + warningMessage , <nl> - " 58 : " + warningMessage , / / not in ignore list <nl> - " 59 : " + warningMessage , / / no ignore for final <nl> + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , <nl> + " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , / / not in ignore list <nl> + " 59 : " <nl> + + getWarningMessage ( " s1erialNUMBER " , expectedCapitalCount ) , / / no ignore for final <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> @ @ - 247 , 14 + 239 , 13 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> final int expectedCapitalCount = 3 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviations " , " " ) ; <nl> checkConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF " ) ; <nl> checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 22 : " + warningMessage , <nl> + " 22 : " + getWarningMessage ( " oveRRRRRrriddenMethod " , expectedCapitalCount ) , <nl> } ; <nl> <nl> verify ( checkConfig , <nl> @ @ - 266 , 7 + 257 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> final int expectedCapitalCount = 0 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , <nl> String . valueOf ( expectedCapitalCount ) ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviations " , " " ) ; <nl> @ @ - 277 , 31 + 267 , 31 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> + " ANNOTATION _ DEF , ANNOTATION _ FIELD _ DEF , ENUM _ CONSTANT _ DEF , " <nl> + " PARAMETER _ DEF , VARIABLE _ DEF , METHOD _ DEF " ) ; <nl> final String [ ] expected = { <nl> - " 3 : " + warningMessage , <nl> - " 6 : " + warningMessage , <nl> - " 9 : " + warningMessage , <nl> - " 12 : " + warningMessage , <nl> - " 32 : " + warningMessage , <nl> - " 37 : " + warningMessage , <nl> - " 38 : " + warningMessage , <nl> - " 39 : " + warningMessage , <nl> - " 40 : " + warningMessage , <nl> - " 46 : " + warningMessage , <nl> - " 47 : " + warningMessage , <nl> - " 48 : " + warningMessage , <nl> - " 49 : " + warningMessage , <nl> - " 57 : " + warningMessage , <nl> - " 58 : " + warningMessage , <nl> - " 59 : " + warningMessage , <nl> - " 60 : " + warningMessage , <nl> - " 61 : " + warningMessage , <nl> - " 66 : " + warningMessage , <nl> - " 72 : " + warningMessage , <nl> - " 78 : " + warningMessage , <nl> - " 84 : " + warningMessage , <nl> - " 88 : " + warningMessage , <nl> - " 90 : " + warningMessage , <nl> - " 98 : " + warningMessage , <nl> + " 3 : " + getWarningMessage ( " IIIInputAbstractClassName " , expectedCapitalCount ) , <nl> + " 6 : " + getWarningMessage ( " NonAAAAbstractClassName " , expectedCapitalCount ) , <nl> + " 9 : " + getWarningMessage ( " FactoryWithBADNAme " , expectedCapitalCount ) , <nl> + " 12 : " + getWarningMessage ( " AbstractCLASSName " , expectedCapitalCount ) , <nl> + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , <nl> + " 39 : " + getWarningMessage ( " marazmaticVARIABLEName " , expectedCapitalCount ) , <nl> + " 40 : " + getWarningMessage ( " MARAZMATICVariableName " , expectedCapitalCount ) , <nl> + " 46 : " + getWarningMessage ( " RIGHT " , expectedCapitalCount ) , <nl> + " 47 : " + getWarningMessage ( " LEFT " , expectedCapitalCount ) , <nl> + " 48 : " + getWarningMessage ( " UP " , expectedCapitalCount ) , <nl> + " 49 : " + getWarningMessage ( " DOWN " , expectedCapitalCount ) , <nl> + " 57 : " + getWarningMessage ( " NonAAAAbstractClassName2 " , expectedCapitalCount ) , <nl> + " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , <nl> + " 59 : " + getWarningMessage ( " s1erialNUMBER " , expectedCapitalCount ) , <nl> + " 60 : " + getWarningMessage ( " s2erialNUMBER " , expectedCapitalCount ) , <nl> + " 61 : " + getWarningMessage ( " s3erialNUMBER " , expectedCapitalCount ) , <nl> + " 66 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , <nl> + " 72 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , <nl> + " 78 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , <nl> + " 84 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , <nl> + " 88 : " + getWarningMessage ( " FIleNameFormatException " , expectedCapitalCount ) , <nl> + " 90 : " + getWarningMessage ( " serialVersionUID " , expectedCapitalCount ) , <nl> + " 98 : " + getWarningMessage ( " userID " , expectedCapitalCount ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> @ @ - 313 , 7 + 303 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> final int expectedCapitalCount = 1 ; <nl> - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; <nl> checkConfig . addAttribute ( " ignoreFinal " , " false " ) ; <nl> checkConfig . addAttribute ( " allowedAbbreviations " , null ) ; <nl> @ @ - 322 , 4 + 311 , 8 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> <nl> verify ( checkConfig , getPath ( " InputAbstractMultisetSetCount . java " ) , expected ) ; <nl> } <nl> + <nl> + private String getWarningMessage ( String typeName , int expectedCapitalCount ) { <nl> + return getCheckMessage ( MSG _ KEY , typeName , expectedCapitalCount ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / Utils . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / Utils . java <nl> index 227ab10 . . feeeb95 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / Utils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / Utils . java <nl> @ @ - 202 , 6 + 202 , 7 @ @ public final class Utils <nl> lnr = new LineNumberReader ( new InputStreamReader ( fr , aCharsetName ) ) ; <nl> } <nl> catch ( final UnsupportedEncodingException ex ) { <nl> + fr . close ( ) ; <nl> final String message = " unsupported charset : " + ex . getMessage ( ) ; <nl> throw new UnsupportedEncodingException ( message ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java <nl> index 133bdb2 . . 482e0eb 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java <nl> @ @ - 18 , 8 + 18 , 6 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTags ; <nl> - <nl> import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 30 , 6 + 28 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; <nl> import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocUtils ; <nl> + <nl> + import java . util . HashSet ; <nl> + import java . util . List ; <nl> import java . util . Set ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> @ @ - 51 , 15 + 52 , 25 @ @ import java . util . regex . Pattern ; <nl> * / <nl> public class UnusedImportsCheck extends Check <nl> { <nl> - / * * flag to indicate when time to start collecting references * / <nl> + / * * regex to match class names . * / <nl> + private static final Pattern CLASS _ NAME = Pattern . compile ( <nl> + " ( ( : ? [ \ \ p { L } _ $ ] [ \ \ p { L } \ \ p { N } _ $ ] * \ \ . ) * [ \ \ p { L } _ $ ] [ \ \ p { L } \ \ p { N } _ $ ] * ) " ) ; <nl> + / * * regex to match the first class name . * / <nl> + private static final Pattern FIRST _ CLASS _ NAME = Pattern . compile ( <nl> + " ^ " + CLASS _ NAME ) ; <nl> + / * * regex to match argument names . * / <nl> + private static final Pattern ARGUMENT _ NAME = Pattern . compile ( <nl> + " [ ( , ] \ \ s * " + CLASS _ NAME . pattern ( ) ) ; <nl> + <nl> + / * * flag to indicate when time to start collecting references . * / <nl> private boolean mCollect ; <nl> / * * flag whether to process Javadoc comments . * / <nl> private boolean mProcessJavadoc ; <nl> <nl> - / * * set of the imports * / <nl> + / * * set of the imports . * / <nl> private final Set < FullIdent > mImports = Sets . newHashSet ( ) ; <nl> <nl> - / * * set of references - possibly to imports or other things * / <nl> + / * * set of references - possibly to imports or other things . * / <nl> private final Set < String > mReferenced = Sets . newHashSet ( ) ; <nl> <nl> / * * Default constructor . * / <nl> @ @ - 195 , 21 + 206 , 83 @ @ public class UnusedImportsCheck extends Check <nl> final int lineNo = aAST . getLineNo ( ) ; <nl> final TextBlock cmt = contents . getJavadocBefore ( lineNo ) ; <nl> if ( cmt ! = null ) { <nl> - final JavadocTags tags = JavadocUtils . getJavadocTags ( cmt , <nl> - JavadocUtils . JavadocTagType . ALL ) ; <nl> - for ( final JavadocTag tag : tags . getValidTags ( ) ) { <nl> - if ( tag . canReferenceImports ( ) ) { <nl> - String identifier = tag . getArg1 ( ) ; <nl> - / / Trim off method or link text <nl> - final Pattern pattern = <nl> - Utils . getPattern ( " ( . + ? ) ( ? : \ \ s + | # | \ \ $ ) . * " ) ; <nl> - final Matcher matcher = pattern . matcher ( identifier ) ; <nl> - if ( matcher . find ( ) ) { <nl> - identifier = matcher . group ( 1 ) ; <nl> - } <nl> - mReferenced . add ( identifier ) ; <nl> - } <nl> + mReferenced . addAll ( processJavadoc ( cmt ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Process a javadoc { @ link TextBlock } and return the set of classes <nl> + * referenced within . <nl> + * @ param aCmt The javadoc block to parse <nl> + * @ return a set of classes referenced in the javadoc block <nl> + * / <nl> + private Set < String > processJavadoc ( TextBlock aCmt ) <nl> + { <nl> + final Set < String > references = new HashSet < String > ( ) ; <nl> + / / process all the @ link type tags <nl> + / / INLINEs inside BLOCKs get hidden when using ALL <nl> + for ( final JavadocTag tag <nl> + : getValidTags ( aCmt , JavadocUtils . JavadocTagType . INLINE ) ) <nl> + { <nl> + if ( tag . canReferenceImports ( ) ) { <nl> + references . addAll ( processJavadocTag ( tag ) ) ; <nl> + } <nl> + } <nl> + / / process all the @ throws type tags <nl> + for ( final JavadocTag tag <nl> + : getValidTags ( aCmt , JavadocUtils . JavadocTagType . BLOCK ) ) <nl> + { <nl> + if ( tag . canReferenceImports ( ) ) { <nl> + references . addAll ( <nl> + matchPattern ( tag . getArg1 ( ) , FIRST _ CLASS _ NAME ) ) ; <nl> } <nl> } <nl> + return references ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the list of valid tags found in a javadoc { @ link TextBlock } <nl> + * @ param aCmt The javadoc block to parse <nl> + * @ param aTagType The type of tags we ' re interested in <nl> + * @ return the list of tags <nl> + * / <nl> + private List < JavadocTag > getValidTags ( TextBlock aCmt , <nl> + JavadocUtils . JavadocTagType aTagType ) <nl> + { <nl> + return JavadocUtils . getJavadocTags ( aCmt , aTagType ) . getValidTags ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns a list of references found in a javadoc { @ link JavadocTag } <nl> + * @ param aTag The javadoc tag to parse <nl> + * @ return A list of references found in this tag <nl> + * / <nl> + private Set < String > processJavadocTag ( JavadocTag aTag ) <nl> + { <nl> + final Set < String > references = new HashSet < String > ( ) ; <nl> + final String identifier = aTag . getArg1 ( ) . trim ( ) ; <nl> + for ( Pattern pattern : new Pattern [ ] <nl> + { FIRST _ CLASS _ NAME , ARGUMENT _ NAME } ) <nl> + { <nl> + references . addAll ( matchPattern ( identifier , pattern ) ) ; <nl> + } <nl> + return references ; <nl> + } <nl> + <nl> + / * * <nl> + * Extracts a list of texts matching a { @ link Pattern } from a <nl> + * { @ link String } . <nl> + * @ param aIdentifier The String to match the pattern against <nl> + * @ param aPattern The Pattern used to extract the texts <nl> + * @ return A list of texts which matched the pattern <nl> + * / <nl> + private Set < String > matchPattern ( String aIdentifier , Pattern aPattern ) <nl> + { <nl> + final Set < String > references = new HashSet < String > ( ) ; <nl> + final Matcher matcher = aPattern . matcher ( aIdentifier ) ; <nl> + while ( matcher . find ( ) ) { <nl> + references . add ( matcher . group ( 1 ) ) ; <nl> + } <nl> + return references ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java <nl> index 6cd125c . . 25bbc2b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java <nl> @ @ - 45 , 6 + 45 , 15 @ @ public class UnusedImportsCheckTest extends BaseCheckTestSupport <nl> " 33 : 8 : Unused import - java . util . Date . " , <nl> " 34 : 8 : Unused import - java . util . Calendar . " , <nl> " 35 : 8 : Unused import - java . util . BitSet . " , <nl> + " 37 : 8 : Unused import - com . test . TestClass1 . " , <nl> + " 38 : 8 : Unused import - com . test . TestClass2 . " , <nl> + " 39 : 8 : Unused import - com . test . TestClass3 . " , <nl> + " 40 : 8 : Unused import - com . test . TestClass4 . " , <nl> + " 41 : 8 : Unused import - com . test . TestClass5 . " , <nl> + " 42 : 8 : Unused import - com . test . TestClass6 . " , <nl> + " 43 : 8 : Unused import - com . test . TestClass7 . " , <nl> + " 44 : 8 : Unused import - com . test . TestClass8 . " , <nl> + " 45 : 8 : Unused import - com . test . TestClass9 . " , <nl> } ; <nl> verify ( checkConfig , getPath ( " imports " + File . separator <nl> + " InputImport . java " ) , expected ) ; <nl> @ @ - 66 , 6 + 75 , 7 @ @ public class UnusedImportsCheckTest extends BaseCheckTestSupport <nl> " 27 : 15 : Unused import - java . io . File . createTempFile . " , <nl> / / " 29 : 8 : Unused import - java . awt . Component . " , / / Should be detected <nl> " 32 : 8 : Unused import - java . awt . Label . " , <nl> + " 45 : 8 : Unused import - com . test . TestClass9 . " , <nl> } ; <nl> verify ( checkConfig , getPath ( " imports " + File . separator <nl> + " InputImport . java " ) , expected ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImport . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImport . java <nl> index a87a8a3 . . 0988431 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImport . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImport . java <nl> @ @ - 34 , 6 + 34 , 16 @ @ import java . util . Date ; <nl> import java . util . Calendar ; <nl> import java . util . BitSet ; <nl> <nl> + import com . test . TestClass1 ; <nl> + import com . test . TestClass2 ; <nl> + import com . test . TestClass3 ; <nl> + import com . test . TestClass4 ; <nl> + import com . test . TestClass5 ; <nl> + import com . test . TestClass6 ; <nl> + import com . test . TestClass7 ; <nl> + import com . test . TestClass8 ; <nl> + import com . test . TestClass9 ; <nl> + <nl> / * * <nl> * Test case for imports <nl> * Here ' s an import used only by javadoc : { @ link Date } . <nl> @ @ - 87 , 4 + 97 , 14 @ @ class InputImport <nl> * @ exception HeadlessException if no graphis environment can be found . <nl> * / <nl> public void render ( ) { } <nl> + <nl> + / * * <nl> + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . <nl> + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . <nl> + * <nl> + * @ param param1 with a link { @ link TestClass6 } <nl> + * @ throws TestClass7 when broken <nl> + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } <nl> + * / <nl> + public void aMethodWithManyLinks ( ) { } <nl> }

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java 
 index fe7317f . . 9c65287 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java 
 @ @ - 43 , 18 + 43 , 17 @ @ public class AbbreviationAsWordInNameTest extends BaseCheckTestSupport { 
 public void abbreviationAsWordInNameTest ( ) throws Exception { 
 
 final int maxCapitalCount = 1 ; 
 - final String msg = getCheckMessage ( clazz , MSG _ KEY , maxCapitalCount ) ; 
 
 final String [ ] expected = { 
 - " 50 : " + msg , 
 - " 52 : " + msg , 
 - " 54 : " + msg , 
 - " 58 : " + msg , 
 - " 60 : " + msg , 
 - " 62 : " + msg , 
 - " 67 : " + msg , 
 - " 69 : " + msg , 
 - " 71 : " + msg , 
 + " 50 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , 
 + " 52 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , 
 + " 54 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , 
 + " 58 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , 
 + " 60 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , 
 + " 62 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , 
 + " 67 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , 
 + " 69 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , 
 + " 71 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , 
 } ; 
 
 final String filePath = getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) ; 
 @ @ - 63 , 4 + 62 , 8 @ @ public class AbbreviationAsWordInNameTest extends BaseCheckTestSupport { 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 + 
 + private String getWarningMessage ( String typeName , int expectedCapitalCount ) { 
 + return getCheckMessage ( clazz , MSG _ KEY , typeName , expectedCapitalCount ) ; 
 + } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 index d2f65f1 . . 80e4138 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 @ @ - 208 , 7 + 208 , 7 @ @ public class AbbreviationAsWordInNameCheck extends Check { 
 
 final String abbr = getDisallowedAbbreviation ( typeName ) ; 
 if ( abbr ! = null ) { 
 - log ( nameAst . getLineNo ( ) , MSG _ KEY , allowedAbbreviationLength ) ; 
 + log ( nameAst . getLineNo ( ) , MSG _ KEY , typeName , allowedAbbreviationLength ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages . properties 
 index fe363cf . . b62c859 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages . properties 
 @ @ - 3 , 4 + 3 , 4 @ @ illegal . abstract . class . name = Name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . 
 method . name . equals . class . name = Method Name ' ' { 0 } ' ' must not equal the enclosing class name . 
 no . abstract . class . modifier = Class ' ' { 0 } ' ' must be declared as ' ' abstract ' ' . 
 
 - abbreviation . as . word = Abbreviation in name must contain no more than ' ' { 0 } ' ' capital letters . 
 + abbreviation . as . word = Abbreviation in name ' ' { 0 } ' ' must contain no more than ' ' { 1 } ' ' capital letters . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ de . properties 
 index f4b21f5 . . 5dd04eb 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ de . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ de . properties 
 @ @ - 3 , 4 + 3 , 4 @ @ illegal . abstract . class . name = Klassenname ' ' { 0 } ' ' entspricht nicht dem Muster ' ' { 1 
 method . name . equals . class . name = Methodenname ' ' { 0 } ' ' darf nicht der gleiche sein wie der Name der Klasse . 
 no . abstract . class . modifier = Die Klasse ' ' { 0 } ' ' muss ' ' abstract ' ' deklariert werden . 
 
 - abbreviation . as . word = Die Abk ü rzung in diesem Bezeichner darf h ö chstens aus ' ' { 0 } ' ' Gro ß buchstaben bestehen . 
 + abbreviation . as . word = Die Abk ü rzung in diesem Bezeichner ' ' { 0 } ' ' darf h ö chstens aus ' ' { 1 } ' ' Gro ß buchstaben bestehen . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ es . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ es . properties 
 index 43dcd7a . . 8631669 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ es . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ es . properties 
 @ @ - 2 , 4 + 2 , 4 @ @ name . invalidPattern = El nombre ' ' { 0 } ' ' debe coincidir con el patr ó n ' ' { 1 } ' ' . 
 illegal . abstract . class . name = El nombre ' ' { 0 } ' ' debe coincidir con el patr ó n ' ' { 1 } ' ' . 
 method . name . equals . class . name = Nombre de m é todo ' ' { 0 } ' ' no debe ser igual al nombre de clase envolvente . 
 no . abstract . class . modifier = Clase ' ' { 0 } ' ' se debe declarar como ' ' abstracta ' ' . 
 - abbreviation . as . word = Abreviatura en nombre debe contener no m á s de ' ' { 0 } ' ' may ú sculas . 
 + abbreviation . as . word = Abreviatura en nombre ' ' { 0 } ' ' debe contener no m á s de ' ' { 1 } ' ' may ú sculas . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fi . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fi . properties 
 index 7dd9e66 . . 5e36159 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fi . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fi . properties 
 @ @ - 2 , 4 + 2 , 4 @ @ name . invalidPattern = Nimen ' ' { 0 } ' ' pit ä ä olla mallin ' ' { 1 } ' ' mukainen . 
 illegal . abstract . class . name = Nimen ' ' { 0 } ' ' pit ä ä olla mallin ' ' { 1 } ' ' mukainen . 
 method . name . equals . class . name = Tavan nimi ' ' { 0 } ' ' ei saa yht ä sulkevan luokan nimi . 
 no . abstract . class . modifier = Luokka ' ' { 0 } ' ' on ilmoitettu olevan ' ' abstrakti ' ' . 
 - abbreviation . as . word = Lyhennys nimi saa olla enint ä ä n ' ' { 0 } ' ' isoilla kirjaimilla . 
 + abbreviation . as . word = Lyhennys nimi saa olla ' ' { 0 } ' ' enint ä ä n ' ' { 1 } ' ' isoilla kirjaimilla . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fr . properties 
 index 882b2d4 . . 55e253e 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fr . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ fr . properties 
 @ @ - 2 , 4 + 2 , 4 @ @ name . invalidPattern = Le nom ' ' { 0 } ' ' n ' ' est pas conforme à l ' ' expression ' ' { 1 } ' ' . 
 illegal . abstract . class . name = Le nom de la classe abstraite ' ' { 0 } ' ' n ' ' est pas conforme à l ' ' expression ' ' { 1 } ' ' . 
 method . name . equals . class . name = Nom de la m é thode ' ' { 0 } ' ' ne doit pas ê tre é gal au nom de la classe englobante . 
 no . abstract . class . modifier = Classe ' ' { 0 } ' ' doit ê tre d é clar é e comme ' ' abstrait ' ' . 
 - abbreviation . as . word = Abr é viation de nom ne doit pas contenir plus de ' ' { 0 } ' ' lettres majuscules . 
 + abbreviation . as . word = Abr é viation de nom ' ' { 0 } ' ' ne doit pas contenir plus de ' ' { 1 } ' ' lettres majuscules . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ ja . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ ja . properties 
 index 3cd2f5b . . 94fbcf6 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ ja . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ ja . properties 
 @ @ - 2 , 4 + 2 , 4 @ @ name . invalidPattern = 名 前 ' ' { 0 } ' ' は パ タ ー ン ' ' { 1 } ' ' に 一 致 し な け れ 
 illegal . abstract . class . name = 名 前 ' ' { 0 } ' ' は パ タ ー ン ' ' { 1 } ' ' に 一 致 し な け れ ば な り ま せ ん 。 
 method . name . equals . class . name = メ ソ ッ ド 名 は ' ' { 0 } ' ' エ ン ク ロ ー ジ ン グ ク ラ ス 名 と 同 じ に は な り ま せ ん 。 
 no . abstract . class . modifier = ク ラ ス ' ' { 0 } ' ' ' ' 抽 象 ' ' と し て 宣 言 す る 必 要 が あ り ま す 。 
 - abbreviation . as . word = 名 前 に 略 語 は 以 下 に す る 必 要 が あ り ま す ' ' { 0 } ' ' 大 文 字 を 。 
 + abbreviation . as . word = 名 前 に 略 語 は ' ' { 0 } ' ' 以 下 に す る 必 要 が あ り ま す ' ' { 1 } ' ' 大 文 字 を 。 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ pt . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ pt . properties 
 index 52684d5 . . 11d9960 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ pt . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ pt . properties 
 @ @ - 2 , 4 + 2 , 4 @ @ illegal . abstract . class . name = Nome ' ' { 0 } ' ' deve condizer com o padr ã o ' ' { 1 } ' ' . 
 name . invalidPattern = Nome ' ' { 0 } ' ' deve condizer com o padr ã o ' ' { 1 } ' ' . 
 method . name . equals . class . name = Nome do m é todo ' ' { 0 } ' ' n ã o deve ser igual ao nome da classe delimitador . 
 no . abstract . class . modifier = Class ' ' { 0 } ' ' deve ser declarado como ' ' abstrato ' ' . 
 - abbreviation . as . word = Sigla em nome deve conter n ã o mais do que ' ' { 0 } ' ' letras mai ú sculas . 
 + abbreviation . as . word = Sigla em nome ' ' { 0 } ' ' deve conter n ã o mais do que ' ' { 1 } ' ' letras mai ú sculas . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ tr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ tr . properties 
 index abd63b9 . . 0081cb3 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ tr . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / naming / messages _ tr . properties 
 @ @ - 8 , 4 + 8 , 4 @ @ name . invalidPattern = ' ' { 0 } ' ' ismi , ş u kal ı pta olmal ı : ' ' { 1 } ' ' . 
 
 no . abstract . class . modifier = ' ' { 0 } ' ' s ı n ı f ı ' ' abstract ' ' olarak tan ı mlanmal ı . 
 
 - abbreviation . as . word = Ad ı k ı saltmas ı ' ' { 0 } ' ' b ü y ü k harflerle fazla i ç ermelidir . 
 + abbreviation . as . word = ' ' { 0 } ' ' Ad ı k ı saltmas ı ' ' { 1 } ' ' b ü y ü k harflerle fazla i ç ermelidir . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 index c75c8c4 . . 2847ed7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 @ @ - 31 , 8 + 31 , 6 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 - / * * Warning message . * / 
 - private String warningMessage ; 
 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 @ @ - 46 , 17 + 44 , 16 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 final int expectedCapitalCount = 3 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; 
 checkConfig . addAttribute ( " allowedAbbreviations " , " III " ) ; 
 checkConfig . addAttribute ( " tokens " , " CLASS _ DEF " ) ; 
 checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 
 final String [ ] expected = { 
 - " 9 : " + warningMessage , 
 - " 12 : " + warningMessage , 
 - " 32 : " + warningMessage , 
 - " 37 : " + warningMessage , 
 + " 9 : " + getWarningMessage ( " FactoryWithBADNAme " , expectedCapitalCount ) , 
 + " 12 : " + getWarningMessage ( " AbstractCLASSName " , expectedCapitalCount ) , 
 + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 @ @ - 66 , 7 + 63 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 public void testTypeNamesForFourPermittedCapitalLetters ( ) throws Exception { 
 
 final int expectedCapitalCount = 4 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; 
 @ @ - 75 , 7 + 71 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 
 final String [ ] expected = { 
 - " 32 : " + warningMessage , 
 + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 @ @ - 85 , 7 + 81 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 public void testTypeNamesForFivePermittedCapitalLetters ( ) throws Exception { 
 
 final int expectedCapitalCount = 5 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; 
 @ @ - 93 , 8 + 88 , 8 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " tokens " , " CLASS _ DEF " ) ; 
 checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 final String [ ] expected = { 
 - " 32 : " + warningMessage , 
 - " 37 : " + warningMessage , 
 + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 @ @ - 104 , 7 + 99 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 public void testTypeAndVariablesAndMethodNames ( ) throws Exception { 
 
 final int expectedCapitalCount = 5 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; 
 @ @ - 116 , 12 + 110 , 12 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 
 final String [ ] expected = { 
 - " 32 : " + warningMessage , 
 - " 37 : " + warningMessage , 
 - " 38 : " + warningMessage , 
 - " 39 : " + warningMessage , 
 - " 40 : " + warningMessage , 
 - " 58 : " + warningMessage , 
 + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , 
 + " 39 : " + getWarningMessage ( " marazmaticVARIABLEName " , expectedCapitalCount ) , 
 + " 40 : " + getWarningMessage ( " MARAZMATICVariableName " , expectedCapitalCount ) , 
 + " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 @ @ - 131 , 7 + 125 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 public void testTypeAndVariablesAndMethodNamesWithNoIgnores ( ) throws Exception { 
 
 final int expectedCapitalCount = 5 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; 
 @ @ - 145 , 13 + 138 , 13 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 
 final String [ ] expected = { 
 - " 32 : " + warningMessage , 
 - " 37 : " + warningMessage , 
 - " 38 : " + warningMessage , 
 - " 66 : " + warningMessage , 
 - " 72 : " + warningMessage , 
 - " 78 : " + warningMessage , 
 - " 84 : " + warningMessage , 
 + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , 
 + " 66 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , 
 + " 72 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , 
 + " 78 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , 
 + " 84 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 @ @ - 161 , 7 + 154 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 public void testTypeAndVariablesAndMethodNamesWithIgnores ( ) throws Exception { 
 
 final int expectedCapitalCount = 5 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; 
 @ @ - 175 , 9 + 167 , 9 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 
 final String [ ] expected = { 
 - " 32 : " + warningMessage , 
 - " 37 : " + warningMessage , 
 - " 38 : " + warningMessage , 
 + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 @ @ - 187 , 7 + 179 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 public void testTypeAndVariablesAndMethodNamesWithIgnoresFinal ( ) throws Exception { 
 
 final int expectedCapitalCount = 4 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; 
 @ @ - 201 , 12 + 192 , 13 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 
 final String [ ] expected = { 
 - " 12 : " + warningMessage , 
 - " 32 : " + warningMessage , 
 - " 37 : " + warningMessage , 
 - " 38 : " + warningMessage , 
 - " 58 : " + warningMessage , / / not in ignore list 
 - " 60 : " + warningMessage , / / no ignore for static 
 + " 12 : " + getWarningMessage ( " AbstractCLASSName " , expectedCapitalCount ) , 
 + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , 
 + " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , / / not in ignore list 
 + " 60 : " 
 + + getWarningMessage ( " s2erialNUMBER " , expectedCapitalCount ) , / / no ignore for static 
 } ; 
 
 verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 @ @ - 216 , 7 + 208 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 public void testTypeAndVariablesAndMethodNamesWithIgnoresStatic ( ) throws Exception { 
 
 final int expectedCapitalCount = 5 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; 
 @ @ - 230 , 11 + 221 , 12 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 
 final String [ ] expected = { 
 - " 32 : " + warningMessage , 
 - " 37 : " + warningMessage , 
 - " 38 : " + warningMessage , 
 - " 58 : " + warningMessage , / / not in ignore list 
 - " 59 : " + warningMessage , / / no ignore for final 
 + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , 
 + " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , / / not in ignore list 
 + " 59 : " 
 + + getWarningMessage ( " s1erialNUMBER " , expectedCapitalCount ) , / / no ignore for final 
 } ; 
 
 verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 @ @ - 247 , 14 + 239 , 13 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 final int expectedCapitalCount = 3 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; 
 checkConfig . addAttribute ( " allowedAbbreviations " , " " ) ; 
 checkConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF " ) ; 
 checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 
 final String [ ] expected = { 
 - " 22 : " + warningMessage , 
 + " 22 : " + getWarningMessage ( " oveRRRRRrriddenMethod " , expectedCapitalCount ) , 
 } ; 
 
 verify ( checkConfig , 
 @ @ - 266 , 7 + 257 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 final int expectedCapitalCount = 0 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , 
 String . valueOf ( expectedCapitalCount ) ) ; 
 checkConfig . addAttribute ( " allowedAbbreviations " , " " ) ; 
 @ @ - 277 , 31 + 267 , 31 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 + " ANNOTATION _ DEF , ANNOTATION _ FIELD _ DEF , ENUM _ CONSTANT _ DEF , " 
 + " PARAMETER _ DEF , VARIABLE _ DEF , METHOD _ DEF " ) ; 
 final String [ ] expected = { 
 - " 3 : " + warningMessage , 
 - " 6 : " + warningMessage , 
 - " 9 : " + warningMessage , 
 - " 12 : " + warningMessage , 
 - " 32 : " + warningMessage , 
 - " 37 : " + warningMessage , 
 - " 38 : " + warningMessage , 
 - " 39 : " + warningMessage , 
 - " 40 : " + warningMessage , 
 - " 46 : " + warningMessage , 
 - " 47 : " + warningMessage , 
 - " 48 : " + warningMessage , 
 - " 49 : " + warningMessage , 
 - " 57 : " + warningMessage , 
 - " 58 : " + warningMessage , 
 - " 59 : " + warningMessage , 
 - " 60 : " + warningMessage , 
 - " 61 : " + warningMessage , 
 - " 66 : " + warningMessage , 
 - " 72 : " + warningMessage , 
 - " 78 : " + warningMessage , 
 - " 84 : " + warningMessage , 
 - " 88 : " + warningMessage , 
 - " 90 : " + warningMessage , 
 - " 98 : " + warningMessage , 
 + " 3 : " + getWarningMessage ( " IIIInputAbstractClassName " , expectedCapitalCount ) , 
 + " 6 : " + getWarningMessage ( " NonAAAAbstractClassName " , expectedCapitalCount ) , 
 + " 9 : " + getWarningMessage ( " FactoryWithBADNAme " , expectedCapitalCount ) , 
 + " 12 : " + getWarningMessage ( " AbstractCLASSName " , expectedCapitalCount ) , 
 + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , 
 + " 39 : " + getWarningMessage ( " marazmaticVARIABLEName " , expectedCapitalCount ) , 
 + " 40 : " + getWarningMessage ( " MARAZMATICVariableName " , expectedCapitalCount ) , 
 + " 46 : " + getWarningMessage ( " RIGHT " , expectedCapitalCount ) , 
 + " 47 : " + getWarningMessage ( " LEFT " , expectedCapitalCount ) , 
 + " 48 : " + getWarningMessage ( " UP " , expectedCapitalCount ) , 
 + " 49 : " + getWarningMessage ( " DOWN " , expectedCapitalCount ) , 
 + " 57 : " + getWarningMessage ( " NonAAAAbstractClassName2 " , expectedCapitalCount ) , 
 + " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , 
 + " 59 : " + getWarningMessage ( " s1erialNUMBER " , expectedCapitalCount ) , 
 + " 60 : " + getWarningMessage ( " s2erialNUMBER " , expectedCapitalCount ) , 
 + " 61 : " + getWarningMessage ( " s3erialNUMBER " , expectedCapitalCount ) , 
 + " 66 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , 
 + " 72 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , 
 + " 78 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , 
 + " 84 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , 
 + " 88 : " + getWarningMessage ( " FIleNameFormatException " , expectedCapitalCount ) , 
 + " 90 : " + getWarningMessage ( " serialVersionUID " , expectedCapitalCount ) , 
 + " 98 : " + getWarningMessage ( " userID " , expectedCapitalCount ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 @ @ - 313 , 7 + 303 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 final int expectedCapitalCount = 1 ; 
 - warningMessage = getCheckMessage ( MSG _ KEY , expectedCapitalCount ) ; 
 checkConfig . addAttribute ( " allowedAbbreviationLength " , String . valueOf ( expectedCapitalCount ) ) ; 
 checkConfig . addAttribute ( " ignoreFinal " , " false " ) ; 
 checkConfig . addAttribute ( " allowedAbbreviations " , null ) ; 
 @ @ - 322 , 4 + 311 , 8 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 
 verify ( checkConfig , getPath ( " InputAbstractMultisetSetCount . java " ) , expected ) ; 
 } 
 + 
 + private String getWarningMessage ( String typeName , int expectedCapitalCount ) { 
 + return getCheckMessage ( MSG _ KEY , typeName , expectedCapitalCount ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / Utils . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / Utils . java 
 index 227ab10 . . feeeb95 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / Utils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / Utils . java 
 @ @ - 202 , 6 + 202 , 7 @ @ public final class Utils 
 lnr = new LineNumberReader ( new InputStreamReader ( fr , aCharsetName ) ) ; 
 } 
 catch ( final UnsupportedEncodingException ex ) { 
 + fr . close ( ) ; 
 final String message = " unsupported charset : " + ex . getMessage ( ) ; 
 throw new UnsupportedEncodingException ( message ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java 
 index 133bdb2 . . 482e0eb 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java 
 @ @ - 18 , 8 + 18 , 6 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks . imports ; 
 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTags ; 
 - 
 import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 30 , 6 + 28 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . Utils ; 
 import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; 
 import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocUtils ; 
 + 
 + import java . util . HashSet ; 
 + import java . util . List ; 
 import java . util . Set ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 @ @ - 51 , 15 + 52 , 25 @ @ import java . util . regex . Pattern ; 
 * / 
 public class UnusedImportsCheck extends Check 
 { 
 - / * * flag to indicate when time to start collecting references * / 
 + / * * regex to match class names . * / 
 + private static final Pattern CLASS _ NAME = Pattern . compile ( 
 + " ( ( : ? [ \ \ p { L } _ $ ] [ \ \ p { L } \ \ p { N } _ $ ] * \ \ . ) * [ \ \ p { L } _ $ ] [ \ \ p { L } \ \ p { N } _ $ ] * ) " ) ; 
 + / * * regex to match the first class name . * / 
 + private static final Pattern FIRST _ CLASS _ NAME = Pattern . compile ( 
 + " ^ " + CLASS _ NAME ) ; 
 + / * * regex to match argument names . * / 
 + private static final Pattern ARGUMENT _ NAME = Pattern . compile ( 
 + " [ ( , ] \ \ s * " + CLASS _ NAME . pattern ( ) ) ; 
 + 
 + / * * flag to indicate when time to start collecting references . * / 
 private boolean mCollect ; 
 / * * flag whether to process Javadoc comments . * / 
 private boolean mProcessJavadoc ; 
 
 - / * * set of the imports * / 
 + / * * set of the imports . * / 
 private final Set < FullIdent > mImports = Sets . newHashSet ( ) ; 
 
 - / * * set of references - possibly to imports or other things * / 
 + / * * set of references - possibly to imports or other things . * / 
 private final Set < String > mReferenced = Sets . newHashSet ( ) ; 
 
 / * * Default constructor . * / 
 @ @ - 195 , 21 + 206 , 83 @ @ public class UnusedImportsCheck extends Check 
 final int lineNo = aAST . getLineNo ( ) ; 
 final TextBlock cmt = contents . getJavadocBefore ( lineNo ) ; 
 if ( cmt ! = null ) { 
 - final JavadocTags tags = JavadocUtils . getJavadocTags ( cmt , 
 - JavadocUtils . JavadocTagType . ALL ) ; 
 - for ( final JavadocTag tag : tags . getValidTags ( ) ) { 
 - if ( tag . canReferenceImports ( ) ) { 
 - String identifier = tag . getArg1 ( ) ; 
 - / / Trim off method or link text 
 - final Pattern pattern = 
 - Utils . getPattern ( " ( . + ? ) ( ? : \ \ s + | # | \ \ $ ) . * " ) ; 
 - final Matcher matcher = pattern . matcher ( identifier ) ; 
 - if ( matcher . find ( ) ) { 
 - identifier = matcher . group ( 1 ) ; 
 - } 
 - mReferenced . add ( identifier ) ; 
 - } 
 + mReferenced . addAll ( processJavadoc ( cmt ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Process a javadoc { @ link TextBlock } and return the set of classes 
 + * referenced within . 
 + * @ param aCmt The javadoc block to parse 
 + * @ return a set of classes referenced in the javadoc block 
 + * / 
 + private Set < String > processJavadoc ( TextBlock aCmt ) 
 + { 
 + final Set < String > references = new HashSet < String > ( ) ; 
 + / / process all the @ link type tags 
 + / / INLINEs inside BLOCKs get hidden when using ALL 
 + for ( final JavadocTag tag 
 + : getValidTags ( aCmt , JavadocUtils . JavadocTagType . INLINE ) ) 
 + { 
 + if ( tag . canReferenceImports ( ) ) { 
 + references . addAll ( processJavadocTag ( tag ) ) ; 
 + } 
 + } 
 + / / process all the @ throws type tags 
 + for ( final JavadocTag tag 
 + : getValidTags ( aCmt , JavadocUtils . JavadocTagType . BLOCK ) ) 
 + { 
 + if ( tag . canReferenceImports ( ) ) { 
 + references . addAll ( 
 + matchPattern ( tag . getArg1 ( ) , FIRST _ CLASS _ NAME ) ) ; 
 } 
 } 
 + return references ; 
 + } 
 + 
 + / * * 
 + * Returns the list of valid tags found in a javadoc { @ link TextBlock } 
 + * @ param aCmt The javadoc block to parse 
 + * @ param aTagType The type of tags we ' re interested in 
 + * @ return the list of tags 
 + * / 
 + private List < JavadocTag > getValidTags ( TextBlock aCmt , 
 + JavadocUtils . JavadocTagType aTagType ) 
 + { 
 + return JavadocUtils . getJavadocTags ( aCmt , aTagType ) . getValidTags ( ) ; 
 + } 
 + 
 + / * * 
 + * Returns a list of references found in a javadoc { @ link JavadocTag } 
 + * @ param aTag The javadoc tag to parse 
 + * @ return A list of references found in this tag 
 + * / 
 + private Set < String > processJavadocTag ( JavadocTag aTag ) 
 + { 
 + final Set < String > references = new HashSet < String > ( ) ; 
 + final String identifier = aTag . getArg1 ( ) . trim ( ) ; 
 + for ( Pattern pattern : new Pattern [ ] 
 + { FIRST _ CLASS _ NAME , ARGUMENT _ NAME } ) 
 + { 
 + references . addAll ( matchPattern ( identifier , pattern ) ) ; 
 + } 
 + return references ; 
 + } 
 + 
 + / * * 
 + * Extracts a list of texts matching a { @ link Pattern } from a 
 + * { @ link String } . 
 + * @ param aIdentifier The String to match the pattern against 
 + * @ param aPattern The Pattern used to extract the texts 
 + * @ return A list of texts which matched the pattern 
 + * / 
 + private Set < String > matchPattern ( String aIdentifier , Pattern aPattern ) 
 + { 
 + final Set < String > references = new HashSet < String > ( ) ; 
 + final Matcher matcher = aPattern . matcher ( aIdentifier ) ; 
 + while ( matcher . find ( ) ) { 
 + references . add ( matcher . group ( 1 ) ) ; 
 + } 
 + return references ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java 
 index 6cd125c . . 25bbc2b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java 
 @ @ - 45 , 6 + 45 , 15 @ @ public class UnusedImportsCheckTest extends BaseCheckTestSupport 
 " 33 : 8 : Unused import - java . util . Date . " , 
 " 34 : 8 : Unused import - java . util . Calendar . " , 
 " 35 : 8 : Unused import - java . util . BitSet . " , 
 + " 37 : 8 : Unused import - com . test . TestClass1 . " , 
 + " 38 : 8 : Unused import - com . test . TestClass2 . " , 
 + " 39 : 8 : Unused import - com . test . TestClass3 . " , 
 + " 40 : 8 : Unused import - com . test . TestClass4 . " , 
 + " 41 : 8 : Unused import - com . test . TestClass5 . " , 
 + " 42 : 8 : Unused import - com . test . TestClass6 . " , 
 + " 43 : 8 : Unused import - com . test . TestClass7 . " , 
 + " 44 : 8 : Unused import - com . test . TestClass8 . " , 
 + " 45 : 8 : Unused import - com . test . TestClass9 . " , 
 } ; 
 verify ( checkConfig , getPath ( " imports " + File . separator 
 + " InputImport . java " ) , expected ) ; 
 @ @ - 66 , 6 + 75 , 7 @ @ public class UnusedImportsCheckTest extends BaseCheckTestSupport 
 " 27 : 15 : Unused import - java . io . File . createTempFile . " , 
 / / " 29 : 8 : Unused import - java . awt . Component . " , / / Should be detected 
 " 32 : 8 : Unused import - java . awt . Label . " , 
 + " 45 : 8 : Unused import - com . test . TestClass9 . " , 
 } ; 
 verify ( checkConfig , getPath ( " imports " + File . separator 
 + " InputImport . java " ) , expected ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImport . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImport . java 
 index a87a8a3 . . 0988431 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImport . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImport . java 
 @ @ - 34 , 6 + 34 , 16 @ @ import java . util . Date ; 
 import java . util . Calendar ; 
 import java . util . BitSet ; 
 
 + import com . test . TestClass1 ; 
 + import com . test . TestClass2 ; 
 + import com . test . TestClass3 ; 
 + import com . test . TestClass4 ; 
 + import com . test . TestClass5 ; 
 + import com . test . TestClass6 ; 
 + import com . test . TestClass7 ; 
 + import com . test . TestClass8 ; 
 + import com . test . TestClass9 ; 
 + 
 / * * 
 * Test case for imports 
 * Here ' s an import used only by javadoc : { @ link Date } . 
 @ @ - 87 , 4 + 97 , 14 @ @ class InputImport 
 * @ exception HeadlessException if no graphis environment can be found . 
 * / 
 public void render ( ) { } 
 + 
 + / * * 
 + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . 
 + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . 
 + * 
 + * @ param param1 with a link { @ link TestClass6 } 
 + * @ throws TestClass7 when broken 
 + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } 
 + * / 
 + public void aMethodWithManyLinks ( ) { } 
 }
