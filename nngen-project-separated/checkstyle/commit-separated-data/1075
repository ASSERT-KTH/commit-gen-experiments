BLEU SCORE: 0.015445276590783498

TEST MSG: Issue # 3102 : Fix DesignForExtension violations on Checkstyle ' s source code
GENERATED MSG: Introduced MessageDispatcher interface so

TEST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 226add9 . . 9f6d728 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 157 , 11 + 157 , 7 @ @ <nl> <nl> < ! - - Class Design - - > <nl> < module name = " DesignForExtension " > <nl> - < ! - - <nl> - We should postpone DesignForExtension Check enforcement till next major release <nl> - as it will seriously brake backward compatibility with existing usage of our library <nl> - - - > <nl> - < property name = " severity " value = " ignore " / > <nl> + < property name = " ignoredAnnotations " value = " Override , Test , Before , After , BeforeClass , AfterClass " / > <nl> < / module > <nl> < module name = " FinalClass " / > <nl> < module name = " HideUtilityClassConstructor " / > <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index 177dc1e . . 908a2d5 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 61 , 6 + 61 , 13 @ @ public class BaseCheckTestSupport { <nl> <nl> protected final ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; <nl> <nl> + / * * <nl> + * Returns { @ link Configuration } based on Google ' s checks xml - configuration ( google _ checks . xml ) . <nl> + * This implementation uses { @ link ConfigurationLoader } in order to load configuration <nl> + * from xml - file . <nl> + * @ return { @ link Configuration } based on Google ' s checks xml - configuration ( google _ checks . xml ) . <nl> + * @ throws CheckstyleException if exception occurs during configuration loading . <nl> + * / <nl> protected static Configuration getConfiguration ( ) throws CheckstyleException { <nl> if ( configuration = = null ) { <nl> configuration = ConfigurationLoader . loadConfiguration ( XML _ NAME , new PropertiesExpander ( <nl> @ @ - 70 , 10 + 77 , 21 @ @ public class BaseCheckTestSupport { <nl> return configuration ; <nl> } <nl> <nl> + / * * <nl> + * Creates { @ link DefaultConfiguration } instance for the given check class . <nl> + * @ param clazz check class . <nl> + * @ return { @ link DefaultConfiguration } instance . <nl> + * / <nl> protected static DefaultConfiguration createCheckConfig ( Class < ? > clazz ) { <nl> return new DefaultConfiguration ( clazz . getName ( ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Creates { @ link Checker } instance based on specified { @ link Configuration } . <nl> + * @ param checkConfig { @ link Configuration } instance . <nl> + * @ return { @ link Checker } instance . <nl> + * @ throws CheckstyleException if an exception occurs during checker configuration . <nl> + * / <nl> protected Checker createChecker ( Configuration checkConfig ) <nl> throws Exception { <nl> final DefaultConfiguration dc = createCheckerConfig ( checkConfig ) ; <nl> @ @ - 89 , 6 + 107 , 12 @ @ public class BaseCheckTestSupport { <nl> return checker ; <nl> } <nl> <nl> + / * * <nl> + * Creates { @ link DefaultConfiguration } or the { @ link Checker } . <nl> + * based on the given { @ link Configuration } . <nl> + * @ param config { @ link Configuration } instance . <nl> + * @ return { @ link DefaultConfiguration } for the { @ link Checker } . <nl> + * / <nl> protected DefaultConfiguration createCheckerConfig ( Configuration config ) { <nl> final DefaultConfiguration dc = <nl> new DefaultConfiguration ( " configuration " ) ; <nl> @ @ - 100 , 11 + 124 , 32 @ @ public class BaseCheckTestSupport { <nl> return dc ; <nl> } <nl> <nl> + / * * <nl> + * Returns canonical path for the file with the given file name . <nl> + * The path is formed based on the specific root location . <nl> + * This implementation uses ' src / it / resources / com / google / checkstyle / test / ' as a root location . <nl> + * @ param fileName file name . <nl> + * @ return canonical path for the the file with the given file name . <nl> + * @ throws IOException if I / O exception occurs while forming the path . <nl> + * / <nl> protected String getPath ( String fileName ) throws IOException { <nl> return new File ( " src / it / resources / com / google / checkstyle / test / " + fileName ) <nl> . getCanonicalPath ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Performs verification of the file with given file name . Uses specified configuration . <nl> + * Expected messages are represented by the array of strings , warning line numbers are <nl> + * represented by the array of integers . <nl> + * This implementation uses overloaded <nl> + * { @ link BaseCheckTestSupport # verify ( Checker , File [ ] , String , String [ ] , Integer . . . ) } method <nl> + * inside . <nl> + * @ param config configuration . <nl> + * @ param fileName file name to verify . <nl> + * @ param expected an array of expected messages . <nl> + * @ param warnsExpected an array of expected warning numbers . <nl> + * @ throws Exception if exception occurs during verification process . <nl> + * / <nl> protected void verify ( Configuration config , String fileName , String [ ] expected , <nl> Integer . . . warnsExpected ) throws Exception { <nl> verify ( createChecker ( config ) , <nl> @ @ - 112 , 6 + 157 , 15 @ @ public class BaseCheckTestSupport { <nl> fileName , expected , warnsExpected ) ; <nl> } <nl> <nl> + / * * <nl> + * Performs verification of files . Uses provided { @ link Checker } instance . <nl> + * @ param checker { @ link Checker } instance . <nl> + * @ param processedFiles files to process . <nl> + * @ param messageFileName message file name . <nl> + * @ param expected an array of expected messages . <nl> + * @ param warnsExpected an array of expected warning line numbers . <nl> + * @ throws Exception if exception occurs during verification process . <nl> + * / <nl> protected void verify ( Checker checker , <nl> File [ ] processedFiles , <nl> String messageFileName , <nl> @ @ - 192 , 6 + 246 , 13 @ @ public class BaseCheckTestSupport { <nl> return null ; <nl> } <nl> <nl> + / * * <nl> + * Returns { @ link Configuration } instance for the given check name . <nl> + * This implementation uses { @ link BaseCheckTestSupport # getConfiguration ( ) } method inside . <nl> + * @ param checkName check name . <nl> + * @ return { @ link Configuration } instance for the given check name . <nl> + * @ throws CheckstyleException if exception occurs during configuration loading . <nl> + * / <nl> protected static Configuration getCheckConfig ( String checkName ) throws CheckstyleException { <nl> Configuration result = null ; <nl> for ( Configuration currentConfig : getConfiguration ( ) . getChildren ( ) ) { <nl> @ @ - 219 , 6 + 280 , 13 @ @ public class BaseCheckTestSupport { <nl> return path ; <nl> } <nl> <nl> + / * * <nl> + * Returns an array of integers which represents the warning line numbers in the file <nl> + * with the given file name . <nl> + * @ param fileName file name . <nl> + * @ return an array of integers which represents the warning line numbers . <nl> + * @ throws IOException if I / O exception occurs while reading the file . <nl> + * / <nl> protected Integer [ ] getLinesWithWarn ( String fileName ) throws IOException { <nl> final List < Integer > result = new ArrayList < > ( ) ; <nl> try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java <nl> index da574ae . . 14f85e6 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ public class PackageNameTest extends BaseCheckTestSupport { <nl> private static Configuration checkConfig ; <nl> private static String format ; <nl> <nl> - protected String getPath ( String packageName , String fileName ) throws IOException { <nl> + private String getPath ( String packageName , String fileName ) throws IOException { <nl> return getPath ( " chapter5naming " + File . separator + " rule521 " + packageName <nl> + File . separator + fileName ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> index 612b809 . . 6565747 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> @ @ - 54 , 6 + 54 , 12 @ @ public class BaseCheckTestSupport { <nl> return new DefaultConfiguration ( clazz . getName ( ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Creates { @ link Checker } instance based on the given { @ link Configuration } instance . <nl> + * @ param checkConfig { @ link Configuration } instance . <nl> + * @ return { @ link Checker } instance based on the given { @ link Configuration } instance . <nl> + * @ throws Exception if an exception occurs during checker configuration . <nl> + * / <nl> public Checker createChecker ( Configuration checkConfig ) <nl> throws Exception { <nl> final DefaultConfiguration dc = createCheckerConfig ( checkConfig ) ; <nl> @ @ - 69 , 6 + 75 , 13 @ @ public class BaseCheckTestSupport { <nl> return checker ; <nl> } <nl> <nl> + / * * <nl> + * Creates { @ link DefaultConfiguration } for the { @ link Checker } <nl> + * based on the given { @ link Configuration } instance . <nl> + * @ param config { @ link Configuration } instance . <nl> + * @ return { @ link DefaultConfiguration } for the { @ link Checker } <nl> + * based on the given { @ link Configuration } instance . <nl> + * / <nl> protected DefaultConfiguration createCheckerConfig ( Configuration config ) { <nl> final DefaultConfiguration dc = <nl> new DefaultConfiguration ( " configuration " ) ; <nl> @ @ - 80 , 31 + 93 , 81 @ @ public class BaseCheckTestSupport { <nl> return dc ; <nl> } <nl> <nl> + / * * <nl> + * Returns canonical path for the file with the given file name . <nl> + * The path is formed base on the root location . <nl> + * This implementation uses ' src / test / resources / com / puppycrawl / tools / checkstyle / ' <nl> + * as a root location . <nl> + * @ param filename file name . <nl> + * @ return canonical path for the file name . <nl> + * @ throws IOException if I / O exception occurs while forming the path . <nl> + * / <nl> protected String getPath ( String filename ) throws IOException { <nl> return new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ) <nl> . getCanonicalPath ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Returns URI - representation of the path for the given file name . <nl> + * The path is formed base on the root location . <nl> + * This implementation uses ' src / test / resources / com / puppycrawl / tools / checkstyle / ' <nl> + * as a root location . <nl> + * @ param filename file name . <nl> + * @ return URI - representation of the path for the file with the given file name . <nl> + * / <nl> protected String getUriString ( String filename ) { <nl> return new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ) . toURI ( ) <nl> . toString ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Returns canonical path for the file with the given file name . <nl> + * The path is formed base on the sources location . <nl> + * This implementation uses ' src / test / java / com / puppycrawl / tools / checkstyle / ' <nl> + * as a src location . <nl> + * @ param filename file name . <nl> + * @ return canonical path for the file with the given file name . <nl> + * @ throws IOException if I / O exception occurs while forming the path . <nl> + * / <nl> protected static String getSrcPath ( String filename ) throws IOException { <nl> return new File ( " src / test / java / com / puppycrawl / tools / checkstyle / " + filename ) <nl> . getCanonicalPath ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Returns canonical path for the file with the given file name . <nl> + * The path is formed base on the non - compilable resources location . <nl> + * This implementation uses ' src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / ' <nl> + * as a non - compilable resource location . <nl> + * @ param filename file name . <nl> + * @ return canonical path for the file with the given file name . <nl> + * @ throws IOException if I / O exception occurs while forming the path . <nl> + * / <nl> protected String getNonCompilablePath ( String filename ) throws IOException { <nl> return new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " <nl> + filename ) . getCanonicalPath ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Performs verification of the given text ast tree representation . <nl> + * This implementation uses { @ link BaseCheckTestSupport # verifyAst ( String , String , boolean ) } <nl> + * method inside . <nl> + * @ param expectedTextPrintFileName expected text ast tree representation . <nl> + * @ param actualJavaFileName actual text ast tree representation . <nl> + * @ throws Exception if exception occurs during verification . <nl> + * / <nl> protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName ) <nl> throws Exception { <nl> verifyAst ( expectedTextPrintFileName , actualJavaFileName , false ) ; <nl> } <nl> <nl> + / * * <nl> + * Performs verification of the given text ast tree representation . <nl> + * @ param expectedTextPrintFileName expected text ast tree representation . <nl> + * @ param actualJavaFileName actual text ast tree representation . <nl> + * @ param withComments whether to perform verification of comment nodes in tree . <nl> + * @ throws Exception if exception occurs during verification . <nl> + * / <nl> protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName , <nl> boolean withComments ) throws Exception { <nl> final String expectedContents = new String ( Files . readAllBytes ( <nl> @ @ - 117 , 16 + 180 , 49 @ @ public class BaseCheckTestSupport { <nl> actualContents ) ; <nl> } <nl> <nl> + / * * <nl> + * Performs verification of the file with the given file name . Uses specified configuration . <nl> + * Expected messages are represented by the array of strings . <nl> + * This implementation uses overloaded <nl> + * { @ link BaseCheckTestSupport # verify ( Checker , File [ ] , String , String . . . ) } method inside . <nl> + * @ param aConfig configuration . <nl> + * @ param fileName file name to verify . <nl> + * @ param expected an array of expected messages . <nl> + * @ throws Exception if exception occurs during verification process . <nl> + * / <nl> protected void verify ( Configuration aConfig , String fileName , String . . . expected ) <nl> throws Exception { <nl> verify ( createChecker ( aConfig ) , fileName , fileName , expected ) ; <nl> } <nl> <nl> + / * * <nl> + * Performs verification of the file with the given file name . <nl> + * Uses provided { @ link Checker } instance . <nl> + * Expected messages are represented by the array of strings . <nl> + * This implementation uses overloaded <nl> + * { @ link BaseCheckTestSupport # verify ( Checker , String , String , String . . . ) } method inside . <nl> + * @ param checker { @ link Checker } instance . <nl> + * @ param fileName file name to verify . <nl> + * @ param expected an array of expected messages . <nl> + * @ throws Exception if exception occurs during verification process . <nl> + * / <nl> protected void verify ( Checker checker , String fileName , String . . . expected ) <nl> throws Exception { <nl> verify ( checker , fileName , fileName , expected ) ; <nl> } <nl> <nl> + / * * <nl> + * Performs verification of the file with the given file name . <nl> + * Uses provided { @ link Checker } instance . <nl> + * Expected messages are represented by the array of strings . <nl> + * This implementation uses overloaded <nl> + * { @ link BaseCheckTestSupport # verify ( Checker , File [ ] , String , String . . . ) } method inside . <nl> + * @ param checker { @ link Checker } instance . <nl> + * @ param processedFilename file name to verify . <nl> + * @ param messageFileName message file name . <nl> + * @ param expected an array of expected messages . <nl> + * @ throws Exception if exception occurs during verification process . <nl> + * / <nl> protected void verify ( Checker checker , <nl> String processedFilename , <nl> String messageFileName , <nl> @ @ - 173 , 6 + 269 , 13 @ @ public class BaseCheckTestSupport { <nl> checker . destroy ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Performs verification of the given files . <nl> + * @ param checker { @ link Checker } instance <nl> + * @ param processedFiles files to process . <nl> + * @ param expectedViolations a map of expected violations per files . <nl> + * @ throws Exception if exception occurs during verification process . <nl> + * / <nl> protected void verify ( Checker checker , <nl> File [ ] processedFiles , <nl> Map < String , List < String > > expectedViolations ) <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> index 0d21f98 . . d27dc1a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> + " header " + File . separator + filename ) ; <nl> } <nl> <nl> - protected String getConfigPath ( String filename ) throws IOException { <nl> + private String getConfigPath ( String filename ) throws IOException { <nl> return super . getPath ( " configs " + File . separator + filename ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> index 4e081c2 . . bcb03a5 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> @ @ - 334 , 7 + 334 , 7 @ @ public class CheckStyleTask <nl> } <nl> <nl> / / Process the files <nl> - final String [ ] files = scanFileSets ( ) ; <nl> + final File [ ] files = scanFileSets ( ) ; <nl> final int numErrs = c . process ( files ) ; <nl> <nl> / / Handle the return status <nl> @ @ - 424 , 14 + 424 , 14 @ @ public class CheckStyleTask <nl> * returns the list of files ( full path name ) to process . <nl> * @ return the list of files included via the filesets . <nl> * / <nl> - protected String [ ] scanFileSets ( ) <nl> + protected File [ ] scanFileSets ( ) <nl> { <nl> final ArrayList list = new ArrayList ( ) ; <nl> if ( mFileName ! = null ) { <nl> / / oops we ' ve got an additional one to process , don ' t <nl> / / forget it . No sweat , it ' s fully resolved via the setter . <nl> log ( " Adding standalone file for audit " , Project . MSG _ VERBOSE ) ; <nl> - list . add ( mFileName ) ; <nl> + list . add ( new File ( mFileName ) ) ; <nl> } <nl> for ( int i = 0 ; i < mFileSets . size ( ) ; i + + ) { <nl> final FileSet fs = ( FileSet ) mFileSets . get ( i ) ; <nl> @ @ - 446 , 11 + 446 , 11 @ @ public class CheckStyleTask <nl> for ( int j = 0 ; j < names . length ; j + + ) { <nl> final String pathname = <nl> ds . getBasedir ( ) + File . separator + names [ j ] ; <nl> - list . add ( pathname ) ; <nl> + list . add ( new File ( pathname ) ) ; <nl> } <nl> } <nl> <nl> - return ( String [ ] ) list . toArray ( new String [ 0 ] ) ; <nl> + return ( File [ ] ) list . toArray ( new File [ 0 ] ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 63bbc37 . . 8079e57 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 165 , 7 + 165 , 7 @ @ public class Checker <nl> * @ return the total number of errors found <nl> * @ see # destroy ( ) <nl> * / <nl> - public int process ( String [ ] aFiles ) <nl> + public int process ( File [ ] aFiles ) <nl> { <nl> int total = 0 ; <nl> fireAuditStarted ( ) ; <nl> @ @ - 179 , 34 + 179 , 34 @ @ public class Checker <nl> / * * <nl> * Processes a specified file and prints out all errors found . <nl> * @ return the number of errors found <nl> - * @ param aFileName the name of the file to process <nl> + * @ param aFile the file to process <nl> * * / <nl> - private int process ( String aFileName ) <nl> + private int process ( File aFile ) <nl> { <nl> / / check if already checked and passed the file <nl> - final File f = new File ( aFileName ) ; <nl> - final long timestamp = f . lastModified ( ) ; <nl> - if ( mCache . alreadyChecked ( aFileName , timestamp ) ) { <nl> + final String fileName = aFile . getPath ( ) ; <nl> + final long timestamp = aFile . lastModified ( ) ; <nl> + if ( mCache . alreadyChecked ( fileName , timestamp ) ) { <nl> return 0 ; <nl> } <nl> <nl> / / Create a stripped down version <nl> final String stripped ; <nl> final String basedir = mConfig . getBasedir ( ) ; <nl> - if ( ( basedir = = null ) | | ! aFileName . startsWith ( basedir ) ) { <nl> - stripped = aFileName ; <nl> + if ( ( basedir = = null ) | | ! fileName . startsWith ( basedir ) ) { <nl> + stripped = fileName ; <nl> } <nl> else { <nl> / / making the assumption that there is text after basedir <nl> final int skipSep = basedir . endsWith ( File . separator ) ? 0 : 1 ; <nl> - stripped = aFileName . substring ( basedir . length ( ) + skipSep ) ; <nl> + stripped = fileName . substring ( basedir . length ( ) + skipSep ) ; <nl> } <nl> <nl> mMessages . reset ( ) ; <nl> try { <nl> fireFileStarted ( stripped ) ; <nl> - final String [ ] lines = Utils . getLines ( aFileName ) ; <nl> - final FileContents contents = new FileContents ( aFileName , lines ) ; <nl> + final String [ ] lines = Utils . getLines ( fileName ) ; <nl> + final FileContents contents = new FileContents ( fileName , lines ) ; <nl> final DetailAST rootAST = parse ( contents ) ; <nl> mWalker . walk ( rootAST , contents , mConfig . getClassLoader ( ) ) ; <nl> } <nl> @ @ - 232 , 7 + 232 , 7 @ @ public class Checker <nl> } <nl> <nl> if ( mMessages . size ( ) = = 0 ) { <nl> - mCache . checkedOk ( aFileName , timestamp ) ; <nl> + mCache . checkedOk ( fileName , timestamp ) ; <nl> } <nl> else { <nl> fireErrors ( stripped , mMessages . getMessages ( ) ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> index 939162d . . 01c6045 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 24 , 9 + 24 , 9 @ @ import java . io . FileNotFoundException ; <nl> import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . OutputStream ; <nl> - import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . Properties ; <nl> + import java . util . LinkedList ; <nl> <nl> import org . apache . commons . cli . CommandLine ; <nl> import org . apache . commons . cli . CommandLineParser ; <nl> @ @ - 146 , 7 + 146 , 7 @ @ public final class Main <nl> } <nl> <nl> / / Get all the Java files <nl> - final List files = new ArrayList ( ) ; <nl> + final List files = new LinkedList ( ) ; <nl> if ( line . hasOption ( " r " ) ) { <nl> final String [ ] values = line . getOptionValues ( " r " ) ; <nl> for ( int i = 0 ; i < values . length ; i + + ) { <nl> @ @ - 156 , 7 + 156 , 7 @ @ public final class Main <nl> <nl> final String [ ] remainingArgs = line . getArgs ( ) ; <nl> for ( int i = 0 ; i < remainingArgs . length ; i + + ) { <nl> - files . add ( remainingArgs [ i ] ) ; <nl> + files . add ( new File ( remainingArgs [ i ] ) ) ; <nl> } <nl> <nl> if ( files . isEmpty ( ) ) { <nl> @ @ - 191 , 8 + 191 , 9 @ @ public final class Main <nl> System . exit ( 1 ) ; <nl> } <nl> <nl> - final int numErrs = <nl> - c . process ( ( String [ ] ) files . toArray ( new String [ files . size ( ) ] ) ) ; <nl> + final File [ ] processedFiles = new File [ files . size ( ) ] ; <nl> + files . toArray ( processedFiles ) ; <nl> + final int numErrs = c . process ( processedFiles ) ; <nl> c . destroy ( ) ; <nl> System . exit ( numErrs ) ; <nl> } <nl> @ @ - 227 , 7 + 228 , 7 @ @ public final class Main <nl> } <nl> } <nl> else if ( aNode . isFile ( ) & & aNode . getPath ( ) . endsWith ( " . java " ) ) { <nl> - aFiles . add ( aNode . getPath ( ) ) ; <nl> + aFiles . add ( aNode ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java b / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java <nl> index 6a41c8b . . 5c5f6e9 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java <nl> @ @ - 54 , 7 + 54 , 7 @ @ public abstract class BaseCheckTestCase <nl> throws Exception <nl> { <nl> mStream . flush ( ) ; <nl> - final int errs = aC . process ( new String [ ] { aFilename } ) ; <nl> + final int errs = aC . process ( new File [ ] { new File ( aFilename ) } ) ; <nl> <nl> / / process each of the lines <nl> final ByteArrayInputStream bais =

TEST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 226add9 . . 9f6d728 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 157 , 11 + 157 , 7 @ @ 
 
 < ! - - Class Design - - > 
 < module name = " DesignForExtension " > 
 - < ! - - 
 - We should postpone DesignForExtension Check enforcement till next major release 
 - as it will seriously brake backward compatibility with existing usage of our library 
 - - - > 
 - < property name = " severity " value = " ignore " / > 
 + < property name = " ignoredAnnotations " value = " Override , Test , Before , After , BeforeClass , AfterClass " / > 
 < / module > 
 < module name = " FinalClass " / > 
 < module name = " HideUtilityClassConstructor " / > 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index 177dc1e . . 908a2d5 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 61 , 6 + 61 , 13 @ @ public class BaseCheckTestSupport { 
 
 protected final ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; 
 
 + / * * 
 + * Returns { @ link Configuration } based on Google ' s checks xml - configuration ( google _ checks . xml ) . 
 + * This implementation uses { @ link ConfigurationLoader } in order to load configuration 
 + * from xml - file . 
 + * @ return { @ link Configuration } based on Google ' s checks xml - configuration ( google _ checks . xml ) . 
 + * @ throws CheckstyleException if exception occurs during configuration loading . 
 + * / 
 protected static Configuration getConfiguration ( ) throws CheckstyleException { 
 if ( configuration = = null ) { 
 configuration = ConfigurationLoader . loadConfiguration ( XML _ NAME , new PropertiesExpander ( 
 @ @ - 70 , 10 + 77 , 21 @ @ public class BaseCheckTestSupport { 
 return configuration ; 
 } 
 
 + / * * 
 + * Creates { @ link DefaultConfiguration } instance for the given check class . 
 + * @ param clazz check class . 
 + * @ return { @ link DefaultConfiguration } instance . 
 + * / 
 protected static DefaultConfiguration createCheckConfig ( Class < ? > clazz ) { 
 return new DefaultConfiguration ( clazz . getName ( ) ) ; 
 } 
 
 + / * * 
 + * Creates { @ link Checker } instance based on specified { @ link Configuration } . 
 + * @ param checkConfig { @ link Configuration } instance . 
 + * @ return { @ link Checker } instance . 
 + * @ throws CheckstyleException if an exception occurs during checker configuration . 
 + * / 
 protected Checker createChecker ( Configuration checkConfig ) 
 throws Exception { 
 final DefaultConfiguration dc = createCheckerConfig ( checkConfig ) ; 
 @ @ - 89 , 6 + 107 , 12 @ @ public class BaseCheckTestSupport { 
 return checker ; 
 } 
 
 + / * * 
 + * Creates { @ link DefaultConfiguration } or the { @ link Checker } . 
 + * based on the given { @ link Configuration } . 
 + * @ param config { @ link Configuration } instance . 
 + * @ return { @ link DefaultConfiguration } for the { @ link Checker } . 
 + * / 
 protected DefaultConfiguration createCheckerConfig ( Configuration config ) { 
 final DefaultConfiguration dc = 
 new DefaultConfiguration ( " configuration " ) ; 
 @ @ - 100 , 11 + 124 , 32 @ @ public class BaseCheckTestSupport { 
 return dc ; 
 } 
 
 + / * * 
 + * Returns canonical path for the file with the given file name . 
 + * The path is formed based on the specific root location . 
 + * This implementation uses ' src / it / resources / com / google / checkstyle / test / ' as a root location . 
 + * @ param fileName file name . 
 + * @ return canonical path for the the file with the given file name . 
 + * @ throws IOException if I / O exception occurs while forming the path . 
 + * / 
 protected String getPath ( String fileName ) throws IOException { 
 return new File ( " src / it / resources / com / google / checkstyle / test / " + fileName ) 
 . getCanonicalPath ( ) ; 
 } 
 
 + / * * 
 + * Performs verification of the file with given file name . Uses specified configuration . 
 + * Expected messages are represented by the array of strings , warning line numbers are 
 + * represented by the array of integers . 
 + * This implementation uses overloaded 
 + * { @ link BaseCheckTestSupport # verify ( Checker , File [ ] , String , String [ ] , Integer . . . ) } method 
 + * inside . 
 + * @ param config configuration . 
 + * @ param fileName file name to verify . 
 + * @ param expected an array of expected messages . 
 + * @ param warnsExpected an array of expected warning numbers . 
 + * @ throws Exception if exception occurs during verification process . 
 + * / 
 protected void verify ( Configuration config , String fileName , String [ ] expected , 
 Integer . . . warnsExpected ) throws Exception { 
 verify ( createChecker ( config ) , 
 @ @ - 112 , 6 + 157 , 15 @ @ public class BaseCheckTestSupport { 
 fileName , expected , warnsExpected ) ; 
 } 
 
 + / * * 
 + * Performs verification of files . Uses provided { @ link Checker } instance . 
 + * @ param checker { @ link Checker } instance . 
 + * @ param processedFiles files to process . 
 + * @ param messageFileName message file name . 
 + * @ param expected an array of expected messages . 
 + * @ param warnsExpected an array of expected warning line numbers . 
 + * @ throws Exception if exception occurs during verification process . 
 + * / 
 protected void verify ( Checker checker , 
 File [ ] processedFiles , 
 String messageFileName , 
 @ @ - 192 , 6 + 246 , 13 @ @ public class BaseCheckTestSupport { 
 return null ; 
 } 
 
 + / * * 
 + * Returns { @ link Configuration } instance for the given check name . 
 + * This implementation uses { @ link BaseCheckTestSupport # getConfiguration ( ) } method inside . 
 + * @ param checkName check name . 
 + * @ return { @ link Configuration } instance for the given check name . 
 + * @ throws CheckstyleException if exception occurs during configuration loading . 
 + * / 
 protected static Configuration getCheckConfig ( String checkName ) throws CheckstyleException { 
 Configuration result = null ; 
 for ( Configuration currentConfig : getConfiguration ( ) . getChildren ( ) ) { 
 @ @ - 219 , 6 + 280 , 13 @ @ public class BaseCheckTestSupport { 
 return path ; 
 } 
 
 + / * * 
 + * Returns an array of integers which represents the warning line numbers in the file 
 + * with the given file name . 
 + * @ param fileName file name . 
 + * @ return an array of integers which represents the warning line numbers . 
 + * @ throws IOException if I / O exception occurs while reading the file . 
 + * / 
 protected Integer [ ] getLinesWithWarn ( String fileName ) throws IOException { 
 final List < Integer > result = new ArrayList < > ( ) ; 
 try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java 
 index da574ae . . 14f85e6 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java 
 @ @ - 36 , 7 + 36 , 7 @ @ public class PackageNameTest extends BaseCheckTestSupport { 
 private static Configuration checkConfig ; 
 private static String format ; 
 
 - protected String getPath ( String packageName , String fileName ) throws IOException { 
 + private String getPath ( String packageName , String fileName ) throws IOException { 
 return getPath ( " chapter5naming " + File . separator + " rule521 " + packageName 
 + File . separator + fileName ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 index 612b809 . . 6565747 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 @ @ - 54 , 6 + 54 , 12 @ @ public class BaseCheckTestSupport { 
 return new DefaultConfiguration ( clazz . getName ( ) ) ; 
 } 
 
 + / * * 
 + * Creates { @ link Checker } instance based on the given { @ link Configuration } instance . 
 + * @ param checkConfig { @ link Configuration } instance . 
 + * @ return { @ link Checker } instance based on the given { @ link Configuration } instance . 
 + * @ throws Exception if an exception occurs during checker configuration . 
 + * / 
 public Checker createChecker ( Configuration checkConfig ) 
 throws Exception { 
 final DefaultConfiguration dc = createCheckerConfig ( checkConfig ) ; 
 @ @ - 69 , 6 + 75 , 13 @ @ public class BaseCheckTestSupport { 
 return checker ; 
 } 
 
 + / * * 
 + * Creates { @ link DefaultConfiguration } for the { @ link Checker } 
 + * based on the given { @ link Configuration } instance . 
 + * @ param config { @ link Configuration } instance . 
 + * @ return { @ link DefaultConfiguration } for the { @ link Checker } 
 + * based on the given { @ link Configuration } instance . 
 + * / 
 protected DefaultConfiguration createCheckerConfig ( Configuration config ) { 
 final DefaultConfiguration dc = 
 new DefaultConfiguration ( " configuration " ) ; 
 @ @ - 80 , 31 + 93 , 81 @ @ public class BaseCheckTestSupport { 
 return dc ; 
 } 
 
 + / * * 
 + * Returns canonical path for the file with the given file name . 
 + * The path is formed base on the root location . 
 + * This implementation uses ' src / test / resources / com / puppycrawl / tools / checkstyle / ' 
 + * as a root location . 
 + * @ param filename file name . 
 + * @ return canonical path for the file name . 
 + * @ throws IOException if I / O exception occurs while forming the path . 
 + * / 
 protected String getPath ( String filename ) throws IOException { 
 return new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ) 
 . getCanonicalPath ( ) ; 
 } 
 
 + / * * 
 + * Returns URI - representation of the path for the given file name . 
 + * The path is formed base on the root location . 
 + * This implementation uses ' src / test / resources / com / puppycrawl / tools / checkstyle / ' 
 + * as a root location . 
 + * @ param filename file name . 
 + * @ return URI - representation of the path for the file with the given file name . 
 + * / 
 protected String getUriString ( String filename ) { 
 return new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ) . toURI ( ) 
 . toString ( ) ; 
 } 
 
 + / * * 
 + * Returns canonical path for the file with the given file name . 
 + * The path is formed base on the sources location . 
 + * This implementation uses ' src / test / java / com / puppycrawl / tools / checkstyle / ' 
 + * as a src location . 
 + * @ param filename file name . 
 + * @ return canonical path for the file with the given file name . 
 + * @ throws IOException if I / O exception occurs while forming the path . 
 + * / 
 protected static String getSrcPath ( String filename ) throws IOException { 
 return new File ( " src / test / java / com / puppycrawl / tools / checkstyle / " + filename ) 
 . getCanonicalPath ( ) ; 
 } 
 
 + / * * 
 + * Returns canonical path for the file with the given file name . 
 + * The path is formed base on the non - compilable resources location . 
 + * This implementation uses ' src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / ' 
 + * as a non - compilable resource location . 
 + * @ param filename file name . 
 + * @ return canonical path for the file with the given file name . 
 + * @ throws IOException if I / O exception occurs while forming the path . 
 + * / 
 protected String getNonCompilablePath ( String filename ) throws IOException { 
 return new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " 
 + filename ) . getCanonicalPath ( ) ; 
 } 
 
 + / * * 
 + * Performs verification of the given text ast tree representation . 
 + * This implementation uses { @ link BaseCheckTestSupport # verifyAst ( String , String , boolean ) } 
 + * method inside . 
 + * @ param expectedTextPrintFileName expected text ast tree representation . 
 + * @ param actualJavaFileName actual text ast tree representation . 
 + * @ throws Exception if exception occurs during verification . 
 + * / 
 protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName ) 
 throws Exception { 
 verifyAst ( expectedTextPrintFileName , actualJavaFileName , false ) ; 
 } 
 
 + / * * 
 + * Performs verification of the given text ast tree representation . 
 + * @ param expectedTextPrintFileName expected text ast tree representation . 
 + * @ param actualJavaFileName actual text ast tree representation . 
 + * @ param withComments whether to perform verification of comment nodes in tree . 
 + * @ throws Exception if exception occurs during verification . 
 + * / 
 protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName , 
 boolean withComments ) throws Exception { 
 final String expectedContents = new String ( Files . readAllBytes ( 
 @ @ - 117 , 16 + 180 , 49 @ @ public class BaseCheckTestSupport { 
 actualContents ) ; 
 } 
 
 + / * * 
 + * Performs verification of the file with the given file name . Uses specified configuration . 
 + * Expected messages are represented by the array of strings . 
 + * This implementation uses overloaded 
 + * { @ link BaseCheckTestSupport # verify ( Checker , File [ ] , String , String . . . ) } method inside . 
 + * @ param aConfig configuration . 
 + * @ param fileName file name to verify . 
 + * @ param expected an array of expected messages . 
 + * @ throws Exception if exception occurs during verification process . 
 + * / 
 protected void verify ( Configuration aConfig , String fileName , String . . . expected ) 
 throws Exception { 
 verify ( createChecker ( aConfig ) , fileName , fileName , expected ) ; 
 } 
 
 + / * * 
 + * Performs verification of the file with the given file name . 
 + * Uses provided { @ link Checker } instance . 
 + * Expected messages are represented by the array of strings . 
 + * This implementation uses overloaded 
 + * { @ link BaseCheckTestSupport # verify ( Checker , String , String , String . . . ) } method inside . 
 + * @ param checker { @ link Checker } instance . 
 + * @ param fileName file name to verify . 
 + * @ param expected an array of expected messages . 
 + * @ throws Exception if exception occurs during verification process . 
 + * / 
 protected void verify ( Checker checker , String fileName , String . . . expected ) 
 throws Exception { 
 verify ( checker , fileName , fileName , expected ) ; 
 } 
 
 + / * * 
 + * Performs verification of the file with the given file name . 
 + * Uses provided { @ link Checker } instance . 
 + * Expected messages are represented by the array of strings . 
 + * This implementation uses overloaded 
 + * { @ link BaseCheckTestSupport # verify ( Checker , File [ ] , String , String . . . ) } method inside . 
 + * @ param checker { @ link Checker } instance . 
 + * @ param processedFilename file name to verify . 
 + * @ param messageFileName message file name . 
 + * @ param expected an array of expected messages . 
 + * @ throws Exception if exception occurs during verification process . 
 + * / 
 protected void verify ( Checker checker , 
 String processedFilename , 
 String messageFileName , 
 @ @ - 173 , 6 + 269 , 13 @ @ public class BaseCheckTestSupport { 
 checker . destroy ( ) ; 
 } 
 
 + / * * 
 + * Performs verification of the given files . 
 + * @ param checker { @ link Checker } instance 
 + * @ param processedFiles files to process . 
 + * @ param expectedViolations a map of expected violations per files . 
 + * @ throws Exception if exception occurs during verification process . 
 + * / 
 protected void verify ( Checker checker , 
 File [ ] processedFiles , 
 Map < String , List < String > > expectedViolations ) 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 index 0d21f98 . . d27dc1a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { 
 + " header " + File . separator + filename ) ; 
 } 
 
 - protected String getConfigPath ( String filename ) throws IOException { 
 + private String getConfigPath ( String filename ) throws IOException { 
 return super . getPath ( " configs " + File . separator + filename ) ; 
 } 


NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 index 4e081c2 . . bcb03a5 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 @ @ - 334 , 7 + 334 , 7 @ @ public class CheckStyleTask 
 } 
 
 / / Process the files 
 - final String [ ] files = scanFileSets ( ) ; 
 + final File [ ] files = scanFileSets ( ) ; 
 final int numErrs = c . process ( files ) ; 
 
 / / Handle the return status 
 @ @ - 424 , 14 + 424 , 14 @ @ public class CheckStyleTask 
 * returns the list of files ( full path name ) to process . 
 * @ return the list of files included via the filesets . 
 * / 
 - protected String [ ] scanFileSets ( ) 
 + protected File [ ] scanFileSets ( ) 
 { 
 final ArrayList list = new ArrayList ( ) ; 
 if ( mFileName ! = null ) { 
 / / oops we ' ve got an additional one to process , don ' t 
 / / forget it . No sweat , it ' s fully resolved via the setter . 
 log ( " Adding standalone file for audit " , Project . MSG _ VERBOSE ) ; 
 - list . add ( mFileName ) ; 
 + list . add ( new File ( mFileName ) ) ; 
 } 
 for ( int i = 0 ; i < mFileSets . size ( ) ; i + + ) { 
 final FileSet fs = ( FileSet ) mFileSets . get ( i ) ; 
 @ @ - 446 , 11 + 446 , 11 @ @ public class CheckStyleTask 
 for ( int j = 0 ; j < names . length ; j + + ) { 
 final String pathname = 
 ds . getBasedir ( ) + File . separator + names [ j ] ; 
 - list . add ( pathname ) ; 
 + list . add ( new File ( pathname ) ) ; 
 } 
 } 
 
 - return ( String [ ] ) list . toArray ( new String [ 0 ] ) ; 
 + return ( File [ ] ) list . toArray ( new File [ 0 ] ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 index 63bbc37 . . 8079e57 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 165 , 7 + 165 , 7 @ @ public class Checker 
 * @ return the total number of errors found 
 * @ see # destroy ( ) 
 * / 
 - public int process ( String [ ] aFiles ) 
 + public int process ( File [ ] aFiles ) 
 { 
 int total = 0 ; 
 fireAuditStarted ( ) ; 
 @ @ - 179 , 34 + 179 , 34 @ @ public class Checker 
 / * * 
 * Processes a specified file and prints out all errors found . 
 * @ return the number of errors found 
 - * @ param aFileName the name of the file to process 
 + * @ param aFile the file to process 
 * * / 
 - private int process ( String aFileName ) 
 + private int process ( File aFile ) 
 { 
 / / check if already checked and passed the file 
 - final File f = new File ( aFileName ) ; 
 - final long timestamp = f . lastModified ( ) ; 
 - if ( mCache . alreadyChecked ( aFileName , timestamp ) ) { 
 + final String fileName = aFile . getPath ( ) ; 
 + final long timestamp = aFile . lastModified ( ) ; 
 + if ( mCache . alreadyChecked ( fileName , timestamp ) ) { 
 return 0 ; 
 } 
 
 / / Create a stripped down version 
 final String stripped ; 
 final String basedir = mConfig . getBasedir ( ) ; 
 - if ( ( basedir = = null ) | | ! aFileName . startsWith ( basedir ) ) { 
 - stripped = aFileName ; 
 + if ( ( basedir = = null ) | | ! fileName . startsWith ( basedir ) ) { 
 + stripped = fileName ; 
 } 
 else { 
 / / making the assumption that there is text after basedir 
 final int skipSep = basedir . endsWith ( File . separator ) ? 0 : 1 ; 
 - stripped = aFileName . substring ( basedir . length ( ) + skipSep ) ; 
 + stripped = fileName . substring ( basedir . length ( ) + skipSep ) ; 
 } 
 
 mMessages . reset ( ) ; 
 try { 
 fireFileStarted ( stripped ) ; 
 - final String [ ] lines = Utils . getLines ( aFileName ) ; 
 - final FileContents contents = new FileContents ( aFileName , lines ) ; 
 + final String [ ] lines = Utils . getLines ( fileName ) ; 
 + final FileContents contents = new FileContents ( fileName , lines ) ; 
 final DetailAST rootAST = parse ( contents ) ; 
 mWalker . walk ( rootAST , contents , mConfig . getClassLoader ( ) ) ; 
 } 
 @ @ - 232 , 7 + 232 , 7 @ @ public class Checker 
 } 
 
 if ( mMessages . size ( ) = = 0 ) { 
 - mCache . checkedOk ( aFileName , timestamp ) ; 
 + mCache . checkedOk ( fileName , timestamp ) ; 
 } 
 else { 
 fireErrors ( stripped , mMessages . getMessages ( ) ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 index 939162d . . 01c6045 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 24 , 9 + 24 , 9 @ @ import java . io . FileNotFoundException ; 
 import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 import java . io . OutputStream ; 
 - import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . Properties ; 
 + import java . util . LinkedList ; 
 
 import org . apache . commons . cli . CommandLine ; 
 import org . apache . commons . cli . CommandLineParser ; 
 @ @ - 146 , 7 + 146 , 7 @ @ public final class Main 
 } 
 
 / / Get all the Java files 
 - final List files = new ArrayList ( ) ; 
 + final List files = new LinkedList ( ) ; 
 if ( line . hasOption ( " r " ) ) { 
 final String [ ] values = line . getOptionValues ( " r " ) ; 
 for ( int i = 0 ; i < values . length ; i + + ) { 
 @ @ - 156 , 7 + 156 , 7 @ @ public final class Main 
 
 final String [ ] remainingArgs = line . getArgs ( ) ; 
 for ( int i = 0 ; i < remainingArgs . length ; i + + ) { 
 - files . add ( remainingArgs [ i ] ) ; 
 + files . add ( new File ( remainingArgs [ i ] ) ) ; 
 } 
 
 if ( files . isEmpty ( ) ) { 
 @ @ - 191 , 8 + 191 , 9 @ @ public final class Main 
 System . exit ( 1 ) ; 
 } 
 
 - final int numErrs = 
 - c . process ( ( String [ ] ) files . toArray ( new String [ files . size ( ) ] ) ) ; 
 + final File [ ] processedFiles = new File [ files . size ( ) ] ; 
 + files . toArray ( processedFiles ) ; 
 + final int numErrs = c . process ( processedFiles ) ; 
 c . destroy ( ) ; 
 System . exit ( numErrs ) ; 
 } 
 @ @ - 227 , 7 + 228 , 7 @ @ public final class Main 
 } 
 } 
 else if ( aNode . isFile ( ) & & aNode . getPath ( ) . endsWith ( " . java " ) ) { 
 - aFiles . add ( aNode . getPath ( ) ) ; 
 + aFiles . add ( aNode ) ; 
 } 
 } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java b / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java 
 index 6a41c8b . . 5c5f6e9 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java 
 @ @ - 54 , 7 + 54 , 7 @ @ public abstract class BaseCheckTestCase 
 throws Exception 
 { 
 mStream . flush ( ) ; 
 - final int errs = aC . process ( new String [ ] { aFilename } ) ; 
 + final int errs = aC . process ( new File [ ] { new File ( aFilename ) } ) ; 
 
 / / process each of the lines 
 final ByteArrayInputStream bais =
