BLEU SCORE: 0.20164945583740668

TEST MSG: Issue # 4581 : Reorganize token methods in GenericWhitespaceCheck
GENERATED MSG: Pull # 2671 : Reorganize token sets in UncommentedMain

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> index 79c031f . . 0725818 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> @ @ - 104 , 17 + 104 , 17 @ @ public class GenericWhitespaceCheck extends AbstractCheck { <nl> <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> - return getAcceptableTokens ( ) ; <nl> + return getRequiredTokens ( ) ; <nl> } <nl> <nl> @ Override <nl> public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . GENERIC _ START , TokenTypes . GENERIC _ END } ; <nl> + return getRequiredTokens ( ) ; <nl> } <nl> <nl> @ Override <nl> public int [ ] getRequiredTokens ( ) { <nl> - return getAcceptableTokens ( ) ; <nl> + return new int [ ] { TokenTypes . GENERIC _ START , TokenTypes . GENERIC _ END } ; <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheck . java <nl> index 2d517b9 . . 69d2a80 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheck . java <nl> @ @ - 19 , 9 + 19 , 13 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> + import org . apache . commons . beanutils . ConversionException ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 47 , 7 + 51 , 7 @ @ for ( <nl> * @ author lkuehne <nl> * / <nl> public class EmptyForInitializerPadCheck <nl> - extends AbstractOptionCheck < PadOption > { <nl> + extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 61 , 11 + 65 , 24 @ @ public class EmptyForInitializerPadCheck <nl> * / <nl> public static final String MSG _ NOT _ PRECEDED = " ws . notPreceded " ; <nl> <nl> + / * * Semicolon literal . * / <nl> + private static final String SEMICOLON = " ; " ; <nl> + <nl> + / * * The policy to enforce . * / <nl> + private PadOption option = PadOption . NOSPACE ; <nl> + <nl> / * * <nl> - * Sets the paren pad option to nospace . <nl> + * Set the option to enforce . <nl> + * @ param optionStr string to decode option from <nl> + * @ throws ConversionException if unable to decode <nl> * / <nl> - public EmptyForInitializerPadCheck ( ) { <nl> - super ( PadOption . NOSPACE , PadOption . class ) ; <nl> + public void setOption ( String optionStr ) { <nl> + try { <nl> + option = PadOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> + } <nl> + catch ( IllegalArgumentException iae ) { <nl> + throw new ConversionException ( " unable to parse " + optionStr , iae ) ; <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 93 , 7 + 110 , 6 @ @ public class EmptyForInitializerPadCheck <nl> final int before = semi . getColumnNo ( ) - 1 ; <nl> / / don ' t check if semi at beginning of line <nl> if ( ! CommonUtils . hasWhitespaceBefore ( before , line ) ) { <nl> - final PadOption option = getAbstractOption ( ) ; <nl> if ( option = = PadOption . NOSPACE <nl> & & Character . isWhitespace ( line . charAt ( before ) ) ) { <nl> log ( semi . getLineNo ( ) , before , MSG _ PRECEDED , SEMICOLON ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java <nl> index 324dc14 . . 4ecdfa8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java <nl> @ @ - 27 , 11 + 27 , 13 @ @ import static org . junit . Assert . assertEquals ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class EmptyForInitializerPadCheckTest <nl> @ @ - 103 , 4 + 105 , 12 @ @ public class EmptyForInitializerPadCheckTest <nl> final WrapOption option = WrapOption . valueOf ( " EOL " ) ; <nl> assertEquals ( WrapOption . EOL , option ) ; <nl> } <nl> + <nl> + @ Test ( expected = CheckstyleException . class ) <nl> + public void testInvalidOption ( ) throws Exception { <nl> + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputForWhitespace . java " ) , expected ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 index 79c031f . . 0725818 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 @ @ - 104 , 17 + 104 , 17 @ @ public class GenericWhitespaceCheck extends AbstractCheck { 
 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 - return getAcceptableTokens ( ) ; 
 + return getRequiredTokens ( ) ; 
 } 
 
 @ Override 
 public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . GENERIC _ START , TokenTypes . GENERIC _ END } ; 
 + return getRequiredTokens ( ) ; 
 } 
 
 @ Override 
 public int [ ] getRequiredTokens ( ) { 
 - return getAcceptableTokens ( ) ; 
 + return new int [ ] { TokenTypes . GENERIC _ START , TokenTypes . GENERIC _ END } ; 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheck . java 
 index 2d517b9 . . 69d2a80 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheck . java 
 @ @ - 19 , 9 + 19 , 13 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 + import java . util . Locale ; 
 + 
 + import org . apache . commons . beanutils . ConversionException ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 47 , 7 + 51 , 7 @ @ for ( 
 * @ author lkuehne 
 * / 
 public class EmptyForInitializerPadCheck 
 - extends AbstractOptionCheck < PadOption > { 
 + extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 61 , 11 + 65 , 24 @ @ public class EmptyForInitializerPadCheck 
 * / 
 public static final String MSG _ NOT _ PRECEDED = " ws . notPreceded " ; 
 
 + / * * Semicolon literal . * / 
 + private static final String SEMICOLON = " ; " ; 
 + 
 + / * * The policy to enforce . * / 
 + private PadOption option = PadOption . NOSPACE ; 
 + 
 / * * 
 - * Sets the paren pad option to nospace . 
 + * Set the option to enforce . 
 + * @ param optionStr string to decode option from 
 + * @ throws ConversionException if unable to decode 
 * / 
 - public EmptyForInitializerPadCheck ( ) { 
 - super ( PadOption . NOSPACE , PadOption . class ) ; 
 + public void setOption ( String optionStr ) { 
 + try { 
 + option = PadOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 + } 
 + catch ( IllegalArgumentException iae ) { 
 + throw new ConversionException ( " unable to parse " + optionStr , iae ) ; 
 + } 
 } 
 
 @ Override 
 @ @ - 93 , 7 + 110 , 6 @ @ public class EmptyForInitializerPadCheck 
 final int before = semi . getColumnNo ( ) - 1 ; 
 / / don ' t check if semi at beginning of line 
 if ( ! CommonUtils . hasWhitespaceBefore ( before , line ) ) { 
 - final PadOption option = getAbstractOption ( ) ; 
 if ( option = = PadOption . NOSPACE 
 & & Character . isWhitespace ( line . charAt ( before ) ) ) { 
 log ( semi . getLineNo ( ) , before , MSG _ PRECEDED , SEMICOLON ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java 
 index 324dc14 . . 4ecdfa8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java 
 @ @ - 27 , 11 + 27 , 13 @ @ import static org . junit . Assert . assertEquals ; 
 import java . io . File ; 
 import java . io . IOException ; 
 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class EmptyForInitializerPadCheckTest 
 @ @ - 103 , 4 + 105 , 12 @ @ public class EmptyForInitializerPadCheckTest 
 final WrapOption option = WrapOption . valueOf ( " EOL " ) ; 
 assertEquals ( WrapOption . EOL , option ) ; 
 } 
 + 
 + @ Test ( expected = CheckstyleException . class ) 
 + public void testInvalidOption ( ) throws Exception { 
 + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputForWhitespace . java " ) , expected ) ; 
 + } 
 }
