BLEU SCORE: 0.0367352656298894

TEST MSG: Pull # 4328 : moved variables inside if blocks to reduce execution time
GENERATED MSG: Decrease scope of variables . # 1538

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector . java <nl> index 3a32bae . . 2e25ec8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector . java <nl> @ @ - 120 , 8 + 120 , 8 @ @ public abstract class AbstractDeclarationCollector extends AbstractCheck { <nl> frameStack . addFirst ( new BlockFrame ( frame ) ) ; <nl> break ; <nl> case TokenTypes . METHOD _ DEF : <nl> - final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> if ( frame instanceof ClassFrame ) { <nl> + final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> final DetailAST mods = <nl> ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index 94c3f03 . . 1576af7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 317 , 8 + 317 , 6 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { <nl> child ! = null ; <nl> child = child . getNextSibling ( ) ) { <nl> if ( child . getType ( ) = = TokenTypes . TYPE _ PARAMETER ) { <nl> - final String alias = <nl> - child . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> final DetailAST bounds = <nl> child . findFirstToken ( TokenTypes . TYPE _ UPPER _ BOUNDS ) ; <nl> if ( bounds ! = null ) { <nl> @ @ - 326 , 6 + 324 , 8 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { <nl> FullIdent . createFullIdentBelow ( bounds ) ; <nl> final AbstractClassInfo classInfo = <nl> createClassInfo ( new Token ( name ) , currentClassName ) ; <nl> + final String alias = <nl> + child . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> paramsMap . put ( alias , classInfo ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java <nl> index f31ec64 . . 8d9f3fe 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java <nl> @ @ - 85 , 7 + 85 , 6 @ @ public class OuterTypeFilenameCheck extends AbstractCheck { <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> - final String outerTypeName = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> if ( seenFirstToken ) { <nl> final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> if ( modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null <nl> @ @ - 94 , 6 + 93 , 7 @ @ public class OuterTypeFilenameCheck extends AbstractCheck { <nl> } <nl> } <nl> else { <nl> + final String outerTypeName = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> <nl> if ( fileName . equals ( outerTypeName ) ) { <nl> validFirst = true ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> index d80bb2c . . 6dd2c57 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> @ @ - 404 , 9 + 404 , 6 @ @ public final class AnnotationUseStyleCheck extends AbstractCheck { <nl> final int valuePairCount = <nl> annotation . getChildCount ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> <nl> - final DetailAST valuePair = <nl> - annotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> - <nl> / / in compact style with one value <nl> if ( arrayInit ! = null <nl> & & arrayInit . getChildCount ( TokenTypes . EXPR ) = = 1 ) { <nl> @ @ - 415 , 6 + 412 , 8 @ @ public final class AnnotationUseStyleCheck extends AbstractCheck { <nl> } <nl> / / in expanded style with one value and the correct element name <nl> else if ( valuePairCount = = 1 ) { <nl> + final DetailAST valuePair = <nl> + annotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> final DetailAST nestedArrayInit = <nl> valuePair . findFirstToken ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> index 0a11db5 . . b2ddca5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> @ @ - 385 , 7 + 385 , 6 @ @ public class NeedBracesCheck extends AbstractCheck { <nl> * / <nl> private static boolean isSingleLineIf ( DetailAST literalIf ) { <nl> boolean result = false ; <nl> - final DetailAST ifCondition = literalIf . findFirstToken ( TokenTypes . EXPR ) ; <nl> if ( literalIf . getParent ( ) . getType ( ) = = TokenTypes . SLIST ) { <nl> final DetailAST literalIfLastChild = literalIf . getLastChild ( ) ; <nl> final DetailAST block ; <nl> @ @ - 395 , 6 + 394 , 7 @ @ public class NeedBracesCheck extends AbstractCheck { <nl> else { <nl> block = literalIfLastChild ; <nl> } <nl> + final DetailAST ifCondition = literalIf . findFirstToken ( TokenTypes . EXPR ) ; <nl> result = ifCondition . getLineNo ( ) = = block . getLineNo ( ) ; <nl> } <nl> return result ; <nl> @ @ - 441 , 8 + 441 , 8 @ @ public class NeedBracesCheck extends AbstractCheck { <nl> final DetailAST block = slist . getFirstChild ( ) ; <nl> if ( block . getType ( ) ! = TokenTypes . SLIST ) { <nl> final DetailAST caseBreak = slist . findFirstToken ( TokenTypes . LITERAL _ BREAK ) ; <nl> - final boolean atOneLine = literalCase . getLineNo ( ) = = block . getLineNo ( ) ; <nl> if ( caseBreak ! = null ) { <nl> + final boolean atOneLine = literalCase . getLineNo ( ) = = block . getLineNo ( ) ; <nl> result = atOneLine & & block . getLineNo ( ) = = caseBreak . getLineNo ( ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> index a1cc6b2 . . 02f3ff7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> @ @ - 203 , 10 + 203 , 10 @ @ public class IllegalInstantiationCheck <nl> / / ast ! = " new Boolean [ ] " <nl> final FullIdent typeIdent = FullIdent . createFullIdent ( typeNameAst ) ; <nl> final String typeName = typeIdent . getText ( ) ; <nl> - final int lineNo = newTokenAst . getLineNo ( ) ; <nl> - final int colNo = newTokenAst . getColumnNo ( ) ; <nl> final String fqClassName = getIllegalInstantiation ( typeName ) ; <nl> if ( fqClassName ! = null ) { <nl> + final int lineNo = newTokenAst . getLineNo ( ) ; <nl> + final int colNo = newTokenAst . getColumnNo ( ) ; <nl> log ( lineNo , colNo , MSG _ KEY , fqClassName ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> index e73cc6f . . 238ce48 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> @ @ - 109 , 9 + 109 , 9 @ @ public final class IllegalThrowsCheck extends AbstractCheck { <nl> @ Override <nl> public void visitToken ( DetailAST detailAST ) { <nl> final DetailAST methodDef = detailAST . getParent ( ) ; <nl> - DetailAST token = detailAST . getFirstChild ( ) ; <nl> / / Check if the method with the given name should be ignored . <nl> if ( ! isIgnorableMethod ( methodDef ) ) { <nl> + DetailAST token = detailAST . getFirstChild ( ) ; <nl> while ( token ! = null ) { <nl> if ( token . getType ( ) ! = TokenTypes . COMMA ) { <nl> final FullIdent ident = FullIdent . createFullIdent ( token ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index 201d19a . . 4b6fca1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 259 , 7 + 259 , 6 @ @ public class ImportOrderCheck <nl> <nl> for ( int i = 0 ; i < packageGroups . length ; i + + ) { <nl> String pkg = packageGroups [ i ] ; <nl> - final StringBuilder pkgBuilder = new StringBuilder ( pkg ) ; <nl> final Pattern grp ; <nl> <nl> / / if the pkg name is the wildcard , make it match zero chars <nl> @ @ - 276 , 6 + 275 , 7 @ @ public class ImportOrderCheck <nl> grp = Pattern . compile ( pkg ) ; <nl> } <nl> else { <nl> + final StringBuilder pkgBuilder = new StringBuilder ( pkg ) ; <nl> if ( ! CommonUtils . endsWithChar ( pkg , ' . ' ) ) { <nl> pkgBuilder . append ( ' . ' ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index 4fc35fa . . f7d8130 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 545 , 13 + 545 , 13 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck { <nl> * @ return the scope of the method / constructor <nl> * / <nl> private static Scope calculateScope ( final DetailAST ast ) { <nl> - final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> final Scope scope ; <nl> <nl> if ( ScopeUtils . isInInterfaceOrAnnotationBlock ( ast ) ) { <nl> scope = Scope . PUBLIC ; <nl> } <nl> else { <nl> + final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> scope = ScopeUtils . getScopeFromMods ( mods ) ; <nl> } <nl> return scope ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> index 4493f75 . . e7a12a3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> @ @ - 223 , 15 + 223 , 14 @ @ public class JavadocTypeCheck <nl> * @ return whether we should check a given node . <nl> * / <nl> private boolean shouldCheck ( final DetailAST ast ) { <nl> - final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final Scope declaredScope = ScopeUtils . getScopeFromMods ( mods ) ; <nl> final Scope customScope ; <nl> <nl> if ( ScopeUtils . isInInterfaceOrAnnotationBlock ( ast ) ) { <nl> customScope = Scope . PUBLIC ; <nl> } <nl> else { <nl> - customScope = declaredScope ; <nl> + final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + customScope = ScopeUtils . getScopeFromMods ( mods ) ; <nl> } <nl> final Scope surroundingScope = ScopeUtils . getSurroundingScope ( ast ) ; <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java <nl> index 9fab18f . . 63e51eb 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java <nl> @ @ - 95 , 9 + 95 , 9 @ @ class MultilineDetector { <nl> boolean foundMatch = matcher . find ( ) ; <nl> <nl> while ( foundMatch ) { <nl> - final LineColumn start = text . lineColumn ( matcher . start ( ) ) ; <nl> currentMatches + + ; <nl> if ( currentMatches > options . getMaximum ( ) ) { <nl> + final LineColumn start = text . lineColumn ( matcher . start ( ) ) ; <nl> if ( options . getMessage ( ) . isEmpty ( ) ) { <nl> options . getReporter ( ) . log ( start . getLine ( ) , <nl> MSG _ REGEXP _ EXCEEDED , matcher . pattern ( ) . toString ( ) ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java <nl> index db17f9f . . 52f9db2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java <nl> @ @ - 247 , 12 + 247 , 12 @ @ public class RegexpCheck extends AbstractCheck { <nl> else { <nl> end = text . lineColumn ( matcher . end ( ) - 1 ) ; <nl> } <nl> - final int startColumn = start . getColumn ( ) ; <nl> - final int endLine = end . getLine ( ) ; <nl> - final int endColumn = end . getColumn ( ) ; <nl> boolean ignore = false ; <nl> if ( ignoreComments ) { <nl> final FileContents theFileContents = getFileContents ( ) ; <nl> + final int startColumn = start . getColumn ( ) ; <nl> + final int endLine = end . getLine ( ) ; <nl> + final int endColumn = end . getColumn ( ) ; <nl> ignore = theFileContents . hasIntersectionWithComment ( startLine , <nl> startColumn , endLine , endColumn ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> index 336b309 . . a5ad7a3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> @ @ - 107 , 9 + 107 , 9 @ @ public abstract class AbstractParenPadCheck <nl> * @ param ast the token representing a right parentheses <nl> * / <nl> protected void processRight ( DetailAST ast ) { <nl> - final String line = getLines ( ) [ ast . getLineNo ( ) - 1 ] ; <nl> final int before = ast . getColumnNo ( ) - 1 ; <nl> if ( before > = 0 ) { <nl> + final String line = getLines ( ) [ ast . getLineNo ( ) - 1 ] ; <nl> if ( option = = PadOption . NOSPACE <nl> & & Character . isWhitespace ( line . charAt ( before ) ) <nl> & & ! CommonUtils . hasWhitespaceBefore ( before , line ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> index b447baa . . 5a9d93f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> @ @ - 394 , 10 + 394 , 10 @ @ public final class JavadocUtils { <nl> * / <nl> public static DetailNode getPreviousSibling ( DetailNode node ) { <nl> DetailNode previousSibling = null ; <nl> - final DetailNode parent = node . getParent ( ) ; <nl> final int previousSiblingIndex = node . getIndex ( ) - 1 ; <nl> - final DetailNode [ ] children = parent . getChildren ( ) ; <nl> if ( previousSiblingIndex > = 0 ) { <nl> + final DetailNode parent = node . getParent ( ) ; <nl> + final DetailNode [ ] children = parent . getChildren ( ) ; <nl> previousSibling = children [ previousSiblingIndex ] ; <nl> } <nl> return previousSibling ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java <nl> index 4a59318 . . 8a4b148 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java <nl> @ @ - 521 , 8 + 521 , 6 @ @ public class XdocsPagesTest { <nl> <nl> final String actualTypeName = columns . get ( 2 ) . getTextContent ( ) . replace ( " \ n " , " " ) <nl> . replace ( " \ r " , " " ) . replaceAll ( " + " , " " ) . trim ( ) ; <nl> - final String actualValue = columns . get ( 3 ) . getTextContent ( ) . replace ( " \ n " , " " ) <nl> - . replace ( " \ r " , " " ) . replaceAll ( " + " , " " ) . trim ( ) ; <nl> <nl> Assert . assertFalse ( fileName + " section ' " + sectionName <nl> + " ' should have a type for " + propertyName , actualTypeName . isEmpty ( ) ) ; <nl> @ @ - 532 , 14 + 530 , 19 @ @ public class XdocsPagesTest { <nl> final Class < ? > clss = descriptor . getPropertyType ( ) ; <nl> final String expectedTypeName = <nl> getModulePropertyExpectedTypeName ( clss , instance , propertyName ) ; <nl> - final String expectedValue = getModulePropertyExpectedValue ( clss , instance , <nl> - propertyName ) ; <nl> <nl> if ( expectedTypeName ! = null ) { <nl> + final String expectedValue = getModulePropertyExpectedValue ( clss , instance , <nl> + propertyName ) ; <nl> + <nl> Assert . assertEquals ( fileName + " section ' " + sectionName <nl> + " ' should have the type for " + propertyName , expectedTypeName , <nl> actualTypeName ) ; <nl> + <nl> if ( expectedValue ! = null ) { <nl> + final String actualValue = columns . get ( 3 ) . getTextContent ( ) . replace ( " \ n " , " " ) <nl> + . replace ( " \ r " , " " ) . replaceAll ( " + " , " " ) . trim ( ) ; <nl> + <nl> Assert . assertEquals ( fileName + " section ' " + sectionName <nl> + " ' should have the value for " + propertyName , expectedValue , <nl> actualValue ) ;
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 48122c7 . . 47114dc 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1126 , 7 + 1126 , 6 @ @ <nl> < regex > < pattern > . * . checks . regexp . CommentSuppressor < / pattern > < branchRate > 75 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . regexp . DetectorOptions < / pattern > < branchRate > 100 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . regexp . MultilineDetector < / pattern > < branchRate > 58 < / branchRate > < lineRate > 87 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . regexp . RegexpMultilineCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 76 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . regexp . SinglelineDetector < / pattern > < branchRate > 93 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> <nl> < regex > < pattern > . * . filters . SuppressionCommentFilter < / pattern > < branchRate > 83 < / branchRate > < lineRate > 93 < / lineRate > < / regex > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> index 8368a57 . . 33b05ed 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . EMPTY ; <nl> import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . REGEXP _ EXCEEDED ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . REGEXP _ MINIMUM ; <nl> import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . STACKOVERFLOW ; <nl> <nl> import java . io . File ; <nl> @ @ - 104 , 6 + 105 , 7 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { <nl> public void testCarriageReturn ( ) throws Exception { <nl> final String illegal = " \ \ r " ; <nl> checkConfig . addAttribute ( " format " , illegal ) ; <nl> + checkConfig . addAttribute ( " maximum " , " 0 " ) ; <nl> final String [ ] expected = { <nl> " 1 : " + getCheckMessage ( REGEXP _ EXCEEDED , illegal ) , <nl> " 3 : " + getCheckMessage ( REGEXP _ EXCEEDED , illegal ) , <nl> @ @ - 146 , 7 + 148 , 22 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { <nl> verify ( checkConfig , file . getPath ( ) , expected ) ; <nl> } <nl> <nl> - private CharSequence makeLargeXYString ( ) { <nl> + @ Test <nl> + public void testMinimum ( ) throws Exception { <nl> + final String illegal = " \ \ r " ; <nl> + checkConfig . addAttribute ( " format " , illegal ) ; <nl> + checkConfig . addAttribute ( " minimum " , " 5 " ) ; <nl> + final String [ ] expected = { <nl> + " 0 : " + getCheckMessage ( REGEXP _ MINIMUM , " 5 " , illegal ) , <nl> + } ; <nl> + <nl> + final File file = temporaryFolder . newFile ( ) ; <nl> + Files . write ( " " , file , Charsets . UTF _ 8 ) ; <nl> + <nl> + verify ( checkConfig , file . getPath ( ) , expected ) ; <nl> + } <nl> + <nl> + private static CharSequence makeLargeXYString ( ) { <nl> / / now needs 10 ' 000 or 100 ' 000 , as just 1000 is no longer enough today to provoke the StackOverflowError <nl> final int size = 100000 ; <nl> StringBuffer largeString = new StringBuffer ( size ) ;

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector . java 
 index 3a32bae . . 2e25ec8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector . java 
 @ @ - 120 , 8 + 120 , 8 @ @ public abstract class AbstractDeclarationCollector extends AbstractCheck { 
 frameStack . addFirst ( new BlockFrame ( frame ) ) ; 
 break ; 
 case TokenTypes . METHOD _ DEF : 
 - final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 if ( frame instanceof ClassFrame ) { 
 + final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 final DetailAST mods = 
 ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index 94c3f03 . . 1576af7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 317 , 8 + 317 , 6 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { 
 child ! = null ; 
 child = child . getNextSibling ( ) ) { 
 if ( child . getType ( ) = = TokenTypes . TYPE _ PARAMETER ) { 
 - final String alias = 
 - child . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 final DetailAST bounds = 
 child . findFirstToken ( TokenTypes . TYPE _ UPPER _ BOUNDS ) ; 
 if ( bounds ! = null ) { 
 @ @ - 326 , 6 + 324 , 8 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { 
 FullIdent . createFullIdentBelow ( bounds ) ; 
 final AbstractClassInfo classInfo = 
 createClassInfo ( new Token ( name ) , currentClassName ) ; 
 + final String alias = 
 + child . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 paramsMap . put ( alias , classInfo ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java 
 index f31ec64 . . 8d9f3fe 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java 
 @ @ - 85 , 7 + 85 , 6 @ @ public class OuterTypeFilenameCheck extends AbstractCheck { 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 - final String outerTypeName = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 if ( seenFirstToken ) { 
 final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 if ( modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null 
 @ @ - 94 , 6 + 93 , 7 @ @ public class OuterTypeFilenameCheck extends AbstractCheck { 
 } 
 } 
 else { 
 + final String outerTypeName = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 
 if ( fileName . equals ( outerTypeName ) ) { 
 validFirst = true ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 index d80bb2c . . 6dd2c57 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 @ @ - 404 , 9 + 404 , 6 @ @ public final class AnnotationUseStyleCheck extends AbstractCheck { 
 final int valuePairCount = 
 annotation . getChildCount ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 
 - final DetailAST valuePair = 
 - annotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 - 
 / / in compact style with one value 
 if ( arrayInit ! = null 
 & & arrayInit . getChildCount ( TokenTypes . EXPR ) = = 1 ) { 
 @ @ - 415 , 6 + 412 , 8 @ @ public final class AnnotationUseStyleCheck extends AbstractCheck { 
 } 
 / / in expanded style with one value and the correct element name 
 else if ( valuePairCount = = 1 ) { 
 + final DetailAST valuePair = 
 + annotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 final DetailAST nestedArrayInit = 
 valuePair . findFirstToken ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 index 0a11db5 . . b2ddca5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 @ @ - 385 , 7 + 385 , 6 @ @ public class NeedBracesCheck extends AbstractCheck { 
 * / 
 private static boolean isSingleLineIf ( DetailAST literalIf ) { 
 boolean result = false ; 
 - final DetailAST ifCondition = literalIf . findFirstToken ( TokenTypes . EXPR ) ; 
 if ( literalIf . getParent ( ) . getType ( ) = = TokenTypes . SLIST ) { 
 final DetailAST literalIfLastChild = literalIf . getLastChild ( ) ; 
 final DetailAST block ; 
 @ @ - 395 , 6 + 394 , 7 @ @ public class NeedBracesCheck extends AbstractCheck { 
 else { 
 block = literalIfLastChild ; 
 } 
 + final DetailAST ifCondition = literalIf . findFirstToken ( TokenTypes . EXPR ) ; 
 result = ifCondition . getLineNo ( ) = = block . getLineNo ( ) ; 
 } 
 return result ; 
 @ @ - 441 , 8 + 441 , 8 @ @ public class NeedBracesCheck extends AbstractCheck { 
 final DetailAST block = slist . getFirstChild ( ) ; 
 if ( block . getType ( ) ! = TokenTypes . SLIST ) { 
 final DetailAST caseBreak = slist . findFirstToken ( TokenTypes . LITERAL _ BREAK ) ; 
 - final boolean atOneLine = literalCase . getLineNo ( ) = = block . getLineNo ( ) ; 
 if ( caseBreak ! = null ) { 
 + final boolean atOneLine = literalCase . getLineNo ( ) = = block . getLineNo ( ) ; 
 result = atOneLine & & block . getLineNo ( ) = = caseBreak . getLineNo ( ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 index a1cc6b2 . . 02f3ff7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 @ @ - 203 , 10 + 203 , 10 @ @ public class IllegalInstantiationCheck 
 / / ast ! = " new Boolean [ ] " 
 final FullIdent typeIdent = FullIdent . createFullIdent ( typeNameAst ) ; 
 final String typeName = typeIdent . getText ( ) ; 
 - final int lineNo = newTokenAst . getLineNo ( ) ; 
 - final int colNo = newTokenAst . getColumnNo ( ) ; 
 final String fqClassName = getIllegalInstantiation ( typeName ) ; 
 if ( fqClassName ! = null ) { 
 + final int lineNo = newTokenAst . getLineNo ( ) ; 
 + final int colNo = newTokenAst . getColumnNo ( ) ; 
 log ( lineNo , colNo , MSG _ KEY , fqClassName ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 index e73cc6f . . 238ce48 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 @ @ - 109 , 9 + 109 , 9 @ @ public final class IllegalThrowsCheck extends AbstractCheck { 
 @ Override 
 public void visitToken ( DetailAST detailAST ) { 
 final DetailAST methodDef = detailAST . getParent ( ) ; 
 - DetailAST token = detailAST . getFirstChild ( ) ; 
 / / Check if the method with the given name should be ignored . 
 if ( ! isIgnorableMethod ( methodDef ) ) { 
 + DetailAST token = detailAST . getFirstChild ( ) ; 
 while ( token ! = null ) { 
 if ( token . getType ( ) ! = TokenTypes . COMMA ) { 
 final FullIdent ident = FullIdent . createFullIdent ( token ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index 201d19a . . 4b6fca1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 259 , 7 + 259 , 6 @ @ public class ImportOrderCheck 
 
 for ( int i = 0 ; i < packageGroups . length ; i + + ) { 
 String pkg = packageGroups [ i ] ; 
 - final StringBuilder pkgBuilder = new StringBuilder ( pkg ) ; 
 final Pattern grp ; 
 
 / / if the pkg name is the wildcard , make it match zero chars 
 @ @ - 276 , 6 + 275 , 7 @ @ public class ImportOrderCheck 
 grp = Pattern . compile ( pkg ) ; 
 } 
 else { 
 + final StringBuilder pkgBuilder = new StringBuilder ( pkg ) ; 
 if ( ! CommonUtils . endsWithChar ( pkg , ' . ' ) ) { 
 pkgBuilder . append ( ' . ' ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index 4fc35fa . . f7d8130 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 545 , 13 + 545 , 13 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck { 
 * @ return the scope of the method / constructor 
 * / 
 private static Scope calculateScope ( final DetailAST ast ) { 
 - final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 final Scope scope ; 
 
 if ( ScopeUtils . isInInterfaceOrAnnotationBlock ( ast ) ) { 
 scope = Scope . PUBLIC ; 
 } 
 else { 
 + final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 scope = ScopeUtils . getScopeFromMods ( mods ) ; 
 } 
 return scope ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 index 4493f75 . . e7a12a3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 @ @ - 223 , 15 + 223 , 14 @ @ public class JavadocTypeCheck 
 * @ return whether we should check a given node . 
 * / 
 private boolean shouldCheck ( final DetailAST ast ) { 
 - final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final Scope declaredScope = ScopeUtils . getScopeFromMods ( mods ) ; 
 final Scope customScope ; 
 
 if ( ScopeUtils . isInInterfaceOrAnnotationBlock ( ast ) ) { 
 customScope = Scope . PUBLIC ; 
 } 
 else { 
 - customScope = declaredScope ; 
 + final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + customScope = ScopeUtils . getScopeFromMods ( mods ) ; 
 } 
 final Scope surroundingScope = ScopeUtils . getSurroundingScope ( ast ) ; 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java 
 index 9fab18f . . 63e51eb 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java 
 @ @ - 95 , 9 + 95 , 9 @ @ class MultilineDetector { 
 boolean foundMatch = matcher . find ( ) ; 
 
 while ( foundMatch ) { 
 - final LineColumn start = text . lineColumn ( matcher . start ( ) ) ; 
 currentMatches + + ; 
 if ( currentMatches > options . getMaximum ( ) ) { 
 + final LineColumn start = text . lineColumn ( matcher . start ( ) ) ; 
 if ( options . getMessage ( ) . isEmpty ( ) ) { 
 options . getReporter ( ) . log ( start . getLine ( ) , 
 MSG _ REGEXP _ EXCEEDED , matcher . pattern ( ) . toString ( ) ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java 
 index db17f9f . . 52f9db2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java 
 @ @ - 247 , 12 + 247 , 12 @ @ public class RegexpCheck extends AbstractCheck { 
 else { 
 end = text . lineColumn ( matcher . end ( ) - 1 ) ; 
 } 
 - final int startColumn = start . getColumn ( ) ; 
 - final int endLine = end . getLine ( ) ; 
 - final int endColumn = end . getColumn ( ) ; 
 boolean ignore = false ; 
 if ( ignoreComments ) { 
 final FileContents theFileContents = getFileContents ( ) ; 
 + final int startColumn = start . getColumn ( ) ; 
 + final int endLine = end . getLine ( ) ; 
 + final int endColumn = end . getColumn ( ) ; 
 ignore = theFileContents . hasIntersectionWithComment ( startLine , 
 startColumn , endLine , endColumn ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 index 336b309 . . a5ad7a3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 @ @ - 107 , 9 + 107 , 9 @ @ public abstract class AbstractParenPadCheck 
 * @ param ast the token representing a right parentheses 
 * / 
 protected void processRight ( DetailAST ast ) { 
 - final String line = getLines ( ) [ ast . getLineNo ( ) - 1 ] ; 
 final int before = ast . getColumnNo ( ) - 1 ; 
 if ( before > = 0 ) { 
 + final String line = getLines ( ) [ ast . getLineNo ( ) - 1 ] ; 
 if ( option = = PadOption . NOSPACE 
 & & Character . isWhitespace ( line . charAt ( before ) ) 
 & & ! CommonUtils . hasWhitespaceBefore ( before , line ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 index b447baa . . 5a9d93f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 @ @ - 394 , 10 + 394 , 10 @ @ public final class JavadocUtils { 
 * / 
 public static DetailNode getPreviousSibling ( DetailNode node ) { 
 DetailNode previousSibling = null ; 
 - final DetailNode parent = node . getParent ( ) ; 
 final int previousSiblingIndex = node . getIndex ( ) - 1 ; 
 - final DetailNode [ ] children = parent . getChildren ( ) ; 
 if ( previousSiblingIndex > = 0 ) { 
 + final DetailNode parent = node . getParent ( ) ; 
 + final DetailNode [ ] children = parent . getChildren ( ) ; 
 previousSibling = children [ previousSiblingIndex ] ; 
 } 
 return previousSibling ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java 
 index 4a59318 . . 8a4b148 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java 
 @ @ - 521 , 8 + 521 , 6 @ @ public class XdocsPagesTest { 
 
 final String actualTypeName = columns . get ( 2 ) . getTextContent ( ) . replace ( " \ n " , " " ) 
 . replace ( " \ r " , " " ) . replaceAll ( " + " , " " ) . trim ( ) ; 
 - final String actualValue = columns . get ( 3 ) . getTextContent ( ) . replace ( " \ n " , " " ) 
 - . replace ( " \ r " , " " ) . replaceAll ( " + " , " " ) . trim ( ) ; 
 
 Assert . assertFalse ( fileName + " section ' " + sectionName 
 + " ' should have a type for " + propertyName , actualTypeName . isEmpty ( ) ) ; 
 @ @ - 532 , 14 + 530 , 19 @ @ public class XdocsPagesTest { 
 final Class < ? > clss = descriptor . getPropertyType ( ) ; 
 final String expectedTypeName = 
 getModulePropertyExpectedTypeName ( clss , instance , propertyName ) ; 
 - final String expectedValue = getModulePropertyExpectedValue ( clss , instance , 
 - propertyName ) ; 
 
 if ( expectedTypeName ! = null ) { 
 + final String expectedValue = getModulePropertyExpectedValue ( clss , instance , 
 + propertyName ) ; 
 + 
 Assert . assertEquals ( fileName + " section ' " + sectionName 
 + " ' should have the type for " + propertyName , expectedTypeName , 
 actualTypeName ) ; 
 + 
 if ( expectedValue ! = null ) { 
 + final String actualValue = columns . get ( 3 ) . getTextContent ( ) . replace ( " \ n " , " " ) 
 + . replace ( " \ r " , " " ) . replaceAll ( " + " , " " ) . trim ( ) ; 
 + 
 Assert . assertEquals ( fileName + " section ' " + sectionName 
 + " ' should have the value for " + propertyName , expectedValue , 
 actualValue ) ;

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 48122c7 . . 47114dc 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1126 , 7 + 1126 , 6 @ @ 
 < regex > < pattern > . * . checks . regexp . CommentSuppressor < / pattern > < branchRate > 75 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . regexp . DetectorOptions < / pattern > < branchRate > 100 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . regexp . MultilineDetector < / pattern > < branchRate > 58 < / branchRate > < lineRate > 87 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . regexp . RegexpMultilineCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 76 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . regexp . SinglelineDetector < / pattern > < branchRate > 93 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 
 < regex > < pattern > . * . filters . SuppressionCommentFilter < / pattern > < branchRate > 83 < / branchRate > < lineRate > 93 < / lineRate > < / regex > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 index 8368a57 . . 33b05ed 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . EMPTY ; 
 import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . REGEXP _ EXCEEDED ; 
 + import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . REGEXP _ MINIMUM ; 
 import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . STACKOVERFLOW ; 
 
 import java . io . File ; 
 @ @ - 104 , 6 + 105 , 7 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { 
 public void testCarriageReturn ( ) throws Exception { 
 final String illegal = " \ \ r " ; 
 checkConfig . addAttribute ( " format " , illegal ) ; 
 + checkConfig . addAttribute ( " maximum " , " 0 " ) ; 
 final String [ ] expected = { 
 " 1 : " + getCheckMessage ( REGEXP _ EXCEEDED , illegal ) , 
 " 3 : " + getCheckMessage ( REGEXP _ EXCEEDED , illegal ) , 
 @ @ - 146 , 7 + 148 , 22 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { 
 verify ( checkConfig , file . getPath ( ) , expected ) ; 
 } 
 
 - private CharSequence makeLargeXYString ( ) { 
 + @ Test 
 + public void testMinimum ( ) throws Exception { 
 + final String illegal = " \ \ r " ; 
 + checkConfig . addAttribute ( " format " , illegal ) ; 
 + checkConfig . addAttribute ( " minimum " , " 5 " ) ; 
 + final String [ ] expected = { 
 + " 0 : " + getCheckMessage ( REGEXP _ MINIMUM , " 5 " , illegal ) , 
 + } ; 
 + 
 + final File file = temporaryFolder . newFile ( ) ; 
 + Files . write ( " " , file , Charsets . UTF _ 8 ) ; 
 + 
 + verify ( checkConfig , file . getPath ( ) , expected ) ; 
 + } 
 + 
 + private static CharSequence makeLargeXYString ( ) { 
 / / now needs 10 ' 000 or 100 ' 000 , as just 1000 is no longer enough today to provoke the StackOverflowError 
 final int size = 100000 ; 
 StringBuffer largeString = new StringBuffer ( size ) ;
