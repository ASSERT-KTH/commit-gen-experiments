BLEU SCORE: 0.08125165710854508

TEST MSG: Issue # 4727 : fixed FinalLocalVariable scanning anonymous classes
GENERATED MSG: Issue # 3617 : make FinalLocalVariable not check multi - catch vars

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index 4135916 . . 1959c7d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 210 , 7 + 210 , 8 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> break ; <nl> case TokenTypes . VARIABLE _ DEF : <nl> if ( ast . getParent ( ) . getType ( ) ! = TokenTypes . OBJBLOCK <nl> - & & ! ast . branchContains ( TokenTypes . FINAL ) <nl> + & & ast . findFirstToken ( TokenTypes . MODIFIERS ) <nl> + . findFirstToken ( TokenTypes . FINAL ) = = null <nl> & & ! isVariableInForInit ( ast ) <nl> & & shouldCheckEnhancedForLoopVariable ( ast ) ) { <nl> insertVariable ( ast ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> index 4c5c388 . . 8c67593 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> @ @ - 254 , 4 + 254 , 13 @ @ public class FinalLocalVariableCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputFinalLocalVariableBreak . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testAnonymousClass ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( FinalLocalVariableCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 5 : 16 : " + getCheckMessage ( MSG _ KEY , " testSupport " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputFinalLocalVariableAnonymousClass . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableAnonymousClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableAnonymousClass . java <nl> new file mode 100644 <nl> index 0000000 . . 6717763 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableAnonymousClass . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . finallocalvariable ; <nl> + <nl> + public class InputFinalLocalVariableAnonymousClass { <nl> + public void test ( ) { <nl> + Object testSupport = new Object ( ) { <nl> + @ Override <nl> + public String toString ( ) { <nl> + final String dc = new String ( ) ; <nl> + return dc ; <nl> + } <nl> + } ; <nl> + testSupport . toString ( ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java <nl> index 632f501 . . bc45ec5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java <nl> @ @ - 193 , 7 + 193 , 7 @ @ public final class ScopeUtils { <nl> <nl> / * * <nl> * Returns whether the scope of a node is restricted to a code block . <nl> - * A code block is a method or constructor body , or a initializer block . <nl> + * A code block is a method or constructor body , an initializer block , or lambda body . <nl> * <nl> * @ param node the node to check <nl> * @ return a { @ code boolean } value <nl> @ @ - 207 , 9 + 207 , 10 @ @ public final class ScopeUtils { <nl> token = token . getParent ( ) ) { <nl> final int type = token . getType ( ) ; <nl> if ( type = = TokenTypes . METHOD _ DEF <nl> - | | type = = TokenTypes . CTOR _ DEF <nl> - | | type = = TokenTypes . INSTANCE _ INIT <nl> - | | type = = TokenTypes . STATIC _ INIT ) { <nl> + | | type = = TokenTypes . CTOR _ DEF <nl> + | | type = = TokenTypes . INSTANCE _ INIT <nl> + | | type = = TokenTypes . STATIC _ INIT <nl> + | | type = = TokenTypes . LAMBDA ) { <nl> returnValue = true ; <nl> break ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocVariableCheckTest . java <nl> index 707db24 . . e90ed73 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocVariableCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocVariableCheckTest . java <nl> @ @ - 338 , 4 + 338 , 13 @ @ public class JavadocVariableCheckTest <nl> getPath ( " InputNoJavadoc . java " ) , <nl> expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testLambdaLocalVariablesDoNotNeedJavadoc ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( JavadocVariableCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputNoJavadocNeededInLambda . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNoJavadocNeededInLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNoJavadocNeededInLambda . java <nl> new file mode 100644 <nl> index 0000000 . . 1148af3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNoJavadocNeededInLambda . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> + <nl> + import java . util . function . Function ; <nl> + <nl> + public class InputNoJavadocNeededInLambda { <nl> + private static final Function < String , String > FUNCTION1 = ( String it ) - > { <nl> + String stuff = it ; <nl> + return stuff + it ; <nl> + } ; <nl> + <nl> + / * * * / <nl> + private static final Function < String , String > FUNCTION2 = ( String it ) - > { <nl> + String stuff = it ; <nl> + return stuff + it ; <nl> + } ; <nl> + <nl> + / * * Runnable . * / <nl> + private Runnable r = ( ) - > { <nl> + String str = " Hello world " ; <nl> + } ; <nl> + }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index 4135916 . . 1959c7d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 210 , 7 + 210 , 8 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 break ; 
 case TokenTypes . VARIABLE _ DEF : 
 if ( ast . getParent ( ) . getType ( ) ! = TokenTypes . OBJBLOCK 
 - & & ! ast . branchContains ( TokenTypes . FINAL ) 
 + & & ast . findFirstToken ( TokenTypes . MODIFIERS ) 
 + . findFirstToken ( TokenTypes . FINAL ) = = null 
 & & ! isVariableInForInit ( ast ) 
 & & shouldCheckEnhancedForLoopVariable ( ast ) ) { 
 insertVariable ( ast ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 index 4c5c388 . . 8c67593 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 @ @ - 254 , 4 + 254 , 13 @ @ public class FinalLocalVariableCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputFinalLocalVariableBreak . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testAnonymousClass ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( FinalLocalVariableCheck . class ) ; 
 + final String [ ] expected = { 
 + " 5 : 16 : " + getCheckMessage ( MSG _ KEY , " testSupport " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputFinalLocalVariableAnonymousClass . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableAnonymousClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableAnonymousClass . java 
 new file mode 100644 
 index 0000000 . . 6717763 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableAnonymousClass . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . finallocalvariable ; 
 + 
 + public class InputFinalLocalVariableAnonymousClass { 
 + public void test ( ) { 
 + Object testSupport = new Object ( ) { 
 + @ Override 
 + public String toString ( ) { 
 + final String dc = new String ( ) ; 
 + return dc ; 
 + } 
 + } ; 
 + testSupport . toString ( ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java 
 index 632f501 . . bc45ec5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java 
 @ @ - 193 , 7 + 193 , 7 @ @ public final class ScopeUtils { 
 
 / * * 
 * Returns whether the scope of a node is restricted to a code block . 
 - * A code block is a method or constructor body , or a initializer block . 
 + * A code block is a method or constructor body , an initializer block , or lambda body . 
 * 
 * @ param node the node to check 
 * @ return a { @ code boolean } value 
 @ @ - 207 , 9 + 207 , 10 @ @ public final class ScopeUtils { 
 token = token . getParent ( ) ) { 
 final int type = token . getType ( ) ; 
 if ( type = = TokenTypes . METHOD _ DEF 
 - | | type = = TokenTypes . CTOR _ DEF 
 - | | type = = TokenTypes . INSTANCE _ INIT 
 - | | type = = TokenTypes . STATIC _ INIT ) { 
 + | | type = = TokenTypes . CTOR _ DEF 
 + | | type = = TokenTypes . INSTANCE _ INIT 
 + | | type = = TokenTypes . STATIC _ INIT 
 + | | type = = TokenTypes . LAMBDA ) { 
 returnValue = true ; 
 break ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocVariableCheckTest . java 
 index 707db24 . . e90ed73 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocVariableCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocVariableCheckTest . java 
 @ @ - 338 , 4 + 338 , 13 @ @ public class JavadocVariableCheckTest 
 getPath ( " InputNoJavadoc . java " ) , 
 expected ) ; 
 } 
 + 
 + @ Test 
 + public void testLambdaLocalVariablesDoNotNeedJavadoc ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( JavadocVariableCheck . class ) ; 
 + final String [ ] expected = { 
 + " 6 : 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputNoJavadocNeededInLambda . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNoJavadocNeededInLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNoJavadocNeededInLambda . java 
 new file mode 100644 
 index 0000000 . . 1148af3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNoJavadocNeededInLambda . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 + 
 + import java . util . function . Function ; 
 + 
 + public class InputNoJavadocNeededInLambda { 
 + private static final Function < String , String > FUNCTION1 = ( String it ) - > { 
 + String stuff = it ; 
 + return stuff + it ; 
 + } ; 
 + 
 + / * * * / 
 + private static final Function < String , String > FUNCTION2 = ( String it ) - > { 
 + String stuff = it ; 
 + return stuff + it ; 
 + } ; 
 + 
 + / * * Runnable . * / 
 + private Runnable r = ( ) - > { 
 + String str = " Hello world " ; 
 + } ; 
 + }
