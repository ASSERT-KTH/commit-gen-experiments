BLEU SCORE: 0.03089055318156698

TEST MSG: config : NPE become forbitten by IllegalCatchCheck in checkstyle _ checks . xml
GENERATED MSG: Issue # 2647 : Suppress UncommentedMain violations on CS

TEST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index f9b4051 . . c153ada 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 196 , 7 + 196 , 9 @ @ <nl> < property name = " ignoreSetter " value = " true " / > <nl> < property name = " setterCanReturnItsClass " value = " true " / > <nl> < / module > <nl> - < module name = " IllegalCatch " / > <nl> + < module name = " IllegalCatch " > <nl> + < property name = " illegalClassNames " value = " java . lang . Exception , java . lang . Throwable , java . lang . RuntimeException , java . lang . NullPointerException " / > <nl> + < / module > <nl> < module name = " IllegalInstantiation " / > <nl> < module name = " IllegalThrows " / > <nl> < module name = " IllegalToken " / >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java <nl> index 1aceebc . . e7c5e58 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java <nl> @ @ - 40 , 22 + 40 , 6 @ @ public class ClassTypeParameterNameCheckTest <nl> } <nl> <nl> @ Test <nl> - public void testGetInterfaceRequiredTokens ( ) { <nl> - final InterfaceTypeParameterNameCheck checkObj = <nl> - new InterfaceTypeParameterNameCheck ( ) ; <nl> - final int [ ] expected = { TokenTypes . TYPE _ PARAMETER } ; <nl> - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testGetMethodRequiredTokens ( ) { <nl> - final MethodTypeParameterNameCheck checkObj = <nl> - new MethodTypeParameterNameCheck ( ) ; <nl> - final int [ ] expected = { TokenTypes . TYPE _ PARAMETER } ; <nl> - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testGetClassRequiredTokens ( ) { <nl> final ClassTypeParameterNameCheck checkObj = <nl> new ClassTypeParameterNameCheck ( ) ; <nl> @ @ - 80 , 38 + 64 , 6 @ @ public class ClassTypeParameterNameCheckTest <nl> } <nl> <nl> @ Test <nl> - public void testMethodDefault ( ) <nl> - throws Exception { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( MethodTypeParameterNameCheck . class ) ; <nl> - <nl> - final String pattern = " ^ [ A - Z ] $ " ; <nl> - <nl> - final String [ ] expected = { <nl> - " 7 : 13 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " TT " , pattern ) , <nl> - " 9 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e _ e " , pattern ) , <nl> - " 19 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Tfo $ o2T " , pattern ) , <nl> - " 23 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , <nl> - " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , <nl> - } ; <nl> - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testInterfaceDefault ( ) <nl> - throws Exception { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( InterfaceTypeParameterNameCheck . class ) ; <nl> - <nl> - final String pattern = " ^ [ A - Z ] $ " ; <nl> - <nl> - final String [ ] expected = { <nl> - " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , <nl> - } ; <nl> - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testClassFooName ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 128 , 43 + 80 , 6 @ @ public class ClassTypeParameterNameCheckTest <nl> } <nl> <nl> @ Test <nl> - public void testMethodFooName ( ) <nl> - throws Exception { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( MethodTypeParameterNameCheck . class ) ; <nl> - checkConfig . addAttribute ( " format " , " ^ foo $ " ) ; <nl> - <nl> - final String pattern = " ^ foo $ " ; <nl> - <nl> - final String [ ] expected = { <nl> - " 7 : 13 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " TT " , pattern ) , <nl> - " 9 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e _ e " , pattern ) , <nl> - " 19 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Tfo $ o2T " , pattern ) , <nl> - " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , <nl> - " 35 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " E " , pattern ) , <nl> - " 37 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , <nl> - / / " 40 : 14 : Name ' EE ' must match pattern ' ^ foo $ ' . " , <nl> - } ; <nl> - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testInterfaceFooName ( ) <nl> - throws Exception { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( InterfaceTypeParameterNameCheck . class ) ; <nl> - checkConfig . addAttribute ( " format " , " ^ foo $ " ) ; <nl> - <nl> - final String pattern = " ^ foo $ " ; <nl> - <nl> - final String [ ] expected = { <nl> - " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , <nl> - " 52 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , <nl> - } ; <nl> - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testGetAcceptableTokens ( ) { <nl> final ClassTypeParameterNameCheck typeParameterNameCheckObj = <nl> new ClassTypeParameterNameCheck ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . 89de3cf <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheckTest . java <nl> @ @ - 0 , 0 + 1 , 79 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MSG _ INVALID _ PATTERN ; <nl> + import static org . junit . Assert . assertArrayEquals ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + public class InterfaceTypeParameterNameCheckTest <nl> + extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " naming " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetInterfaceRequiredTokens ( ) { <nl> + final InterfaceTypeParameterNameCheck checkObj = <nl> + new InterfaceTypeParameterNameCheck ( ) ; <nl> + final int [ ] expected = { TokenTypes . TYPE _ PARAMETER } ; <nl> + assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testInterfaceDefault ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( InterfaceTypeParameterNameCheck . class ) ; <nl> + <nl> + final String pattern = " ^ [ A - Z ] $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testInterfaceFooName ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( InterfaceTypeParameterNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " ^ foo $ " ) ; <nl> + <nl> + final String pattern = " ^ foo $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , <nl> + " 52 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . 94af1fb <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java <nl> @ @ - 0 , 0 + 1 , 88 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MSG _ INVALID _ PATTERN ; <nl> + import static org . junit . Assert . assertArrayEquals ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + public class MethodTypeParameterNameCheckTest <nl> + extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " naming " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetMethodRequiredTokens ( ) { <nl> + final MethodTypeParameterNameCheck checkObj = <nl> + new MethodTypeParameterNameCheck ( ) ; <nl> + final int [ ] expected = { TokenTypes . TYPE _ PARAMETER } ; <nl> + assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMethodDefault ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MethodTypeParameterNameCheck . class ) ; <nl> + <nl> + final String pattern = " ^ [ A - Z ] $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 7 : 13 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " TT " , pattern ) , <nl> + " 9 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e _ e " , pattern ) , <nl> + " 19 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Tfo $ o2T " , pattern ) , <nl> + " 23 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , <nl> + " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMethodFooName ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MethodTypeParameterNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " ^ foo $ " ) ; <nl> + <nl> + final String pattern = " ^ foo $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 7 : 13 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " TT " , pattern ) , <nl> + " 9 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e _ e " , pattern ) , <nl> + " 19 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Tfo $ o2T " , pattern ) , <nl> + " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , <nl> + " 35 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " E " , pattern ) , <nl> + " 37 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , <nl> + / / " 40 : 14 : Name ' EE ' must match pattern ' ^ foo $ ' . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index f9b4051 . . c153ada 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 196 , 7 + 196 , 9 @ @ 
 < property name = " ignoreSetter " value = " true " / > 
 < property name = " setterCanReturnItsClass " value = " true " / > 
 < / module > 
 - < module name = " IllegalCatch " / > 
 + < module name = " IllegalCatch " > 
 + < property name = " illegalClassNames " value = " java . lang . Exception , java . lang . Throwable , java . lang . RuntimeException , java . lang . NullPointerException " / > 
 + < / module > 
 < module name = " IllegalInstantiation " / > 
 < module name = " IllegalThrows " / > 
 < module name = " IllegalToken " / >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java 
 index 1aceebc . . e7c5e58 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java 
 @ @ - 40 , 22 + 40 , 6 @ @ public class ClassTypeParameterNameCheckTest 
 } 
 
 @ Test 
 - public void testGetInterfaceRequiredTokens ( ) { 
 - final InterfaceTypeParameterNameCheck checkObj = 
 - new InterfaceTypeParameterNameCheck ( ) ; 
 - final int [ ] expected = { TokenTypes . TYPE _ PARAMETER } ; 
 - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testGetMethodRequiredTokens ( ) { 
 - final MethodTypeParameterNameCheck checkObj = 
 - new MethodTypeParameterNameCheck ( ) ; 
 - final int [ ] expected = { TokenTypes . TYPE _ PARAMETER } ; 
 - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; 
 - } 
 - 
 - @ Test 
 public void testGetClassRequiredTokens ( ) { 
 final ClassTypeParameterNameCheck checkObj = 
 new ClassTypeParameterNameCheck ( ) ; 
 @ @ - 80 , 38 + 64 , 6 @ @ public class ClassTypeParameterNameCheckTest 
 } 
 
 @ Test 
 - public void testMethodDefault ( ) 
 - throws Exception { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( MethodTypeParameterNameCheck . class ) ; 
 - 
 - final String pattern = " ^ [ A - Z ] $ " ; 
 - 
 - final String [ ] expected = { 
 - " 7 : 13 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " TT " , pattern ) , 
 - " 9 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e _ e " , pattern ) , 
 - " 19 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Tfo $ o2T " , pattern ) , 
 - " 23 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , 
 - " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , 
 - } ; 
 - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 - } 
 - 
 - @ Test 
 - public void testInterfaceDefault ( ) 
 - throws Exception { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( InterfaceTypeParameterNameCheck . class ) ; 
 - 
 - final String pattern = " ^ [ A - Z ] $ " ; 
 - 
 - final String [ ] expected = { 
 - " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , 
 - } ; 
 - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 - } 
 - 
 - @ Test 
 public void testClassFooName ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 128 , 43 + 80 , 6 @ @ public class ClassTypeParameterNameCheckTest 
 } 
 
 @ Test 
 - public void testMethodFooName ( ) 
 - throws Exception { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( MethodTypeParameterNameCheck . class ) ; 
 - checkConfig . addAttribute ( " format " , " ^ foo $ " ) ; 
 - 
 - final String pattern = " ^ foo $ " ; 
 - 
 - final String [ ] expected = { 
 - " 7 : 13 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " TT " , pattern ) , 
 - " 9 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e _ e " , pattern ) , 
 - " 19 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Tfo $ o2T " , pattern ) , 
 - " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , 
 - " 35 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " E " , pattern ) , 
 - " 37 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , 
 - / / " 40 : 14 : Name ' EE ' must match pattern ' ^ foo $ ' . " , 
 - } ; 
 - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 - } 
 - 
 - @ Test 
 - public void testInterfaceFooName ( ) 
 - throws Exception { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( InterfaceTypeParameterNameCheck . class ) ; 
 - checkConfig . addAttribute ( " format " , " ^ foo $ " ) ; 
 - 
 - final String pattern = " ^ foo $ " ; 
 - 
 - final String [ ] expected = { 
 - " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , 
 - " 52 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , 
 - } ; 
 - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 - } 
 - 
 - @ Test 
 public void testGetAcceptableTokens ( ) { 
 final ClassTypeParameterNameCheck typeParameterNameCheckObj = 
 new ClassTypeParameterNameCheck ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheckTest . java 
 new file mode 100644 
 index 0000000 . . 89de3cf 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheckTest . java 
 @ @ - 0 , 0 + 1 , 79 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MSG _ INVALID _ PATTERN ; 
 + import static org . junit . Assert . assertArrayEquals ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + public class InterfaceTypeParameterNameCheckTest 
 + extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " naming " + File . separator + filename ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetInterfaceRequiredTokens ( ) { 
 + final InterfaceTypeParameterNameCheck checkObj = 
 + new InterfaceTypeParameterNameCheck ( ) ; 
 + final int [ ] expected = { TokenTypes . TYPE _ PARAMETER } ; 
 + assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testInterfaceDefault ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( InterfaceTypeParameterNameCheck . class ) ; 
 + 
 + final String pattern = " ^ [ A - Z ] $ " ; 
 + 
 + final String [ ] expected = { 
 + " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testInterfaceFooName ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( InterfaceTypeParameterNameCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " ^ foo $ " ) ; 
 + 
 + final String pattern = " ^ foo $ " ; 
 + 
 + final String [ ] expected = { 
 + " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , 
 + " 52 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java 
 new file mode 100644 
 index 0000000 . . 94af1fb 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java 
 @ @ - 0 , 0 + 1 , 88 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MSG _ INVALID _ PATTERN ; 
 + import static org . junit . Assert . assertArrayEquals ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + public class MethodTypeParameterNameCheckTest 
 + extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " naming " + File . separator + filename ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetMethodRequiredTokens ( ) { 
 + final MethodTypeParameterNameCheck checkObj = 
 + new MethodTypeParameterNameCheck ( ) ; 
 + final int [ ] expected = { TokenTypes . TYPE _ PARAMETER } ; 
 + assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testMethodDefault ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MethodTypeParameterNameCheck . class ) ; 
 + 
 + final String pattern = " ^ [ A - Z ] $ " ; 
 + 
 + final String [ ] expected = { 
 + " 7 : 13 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " TT " , pattern ) , 
 + " 9 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e _ e " , pattern ) , 
 + " 19 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Tfo $ o2T " , pattern ) , 
 + " 23 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , 
 + " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testMethodFooName ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MethodTypeParameterNameCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " ^ foo $ " ) ; 
 + 
 + final String pattern = " ^ foo $ " ; 
 + 
 + final String [ ] expected = { 
 + " 7 : 13 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " TT " , pattern ) , 
 + " 9 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e _ e " , pattern ) , 
 + " 19 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Tfo $ o2T " , pattern ) , 
 + " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , 
 + " 35 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " E " , pattern ) , 
 + " 37 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , 
 + / / " 40 : 14 : Name ' EE ' must match pattern ' ^ foo $ ' . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 + } 
 + }
