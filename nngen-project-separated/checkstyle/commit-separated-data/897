BLEU SCORE: 0.04885299005952269

TEST MSG: Issue # 4055 : Perform refactoring of AnnotationLocationCheck to increase code readability
GENERATED MSG: Issue # 3117 : Add ability to differentiate annotation placement in foreach , for loops , parameter definition

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> index 2c02eea . . b036479 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> @ @ - 31 , 12 + 31 , 12 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * on separate line from target element . <nl> * < p > <nl> * Attention : Annotations among modifiers are ignored ( looks like false - negative ) <nl> - * as there might be a problem with annotations for return types <nl> + * as there might be a problem with annotations for return types . <nl> * < / p > <nl> * < pre > public @ Nullable Long getStartTimeOrNull ( ) { . . . } < / pre > . <nl> * < p > <nl> * Such annotations are better to keep close to type . <nl> - * Due to limitations Checkstyle can not examin target of annotation . <nl> + * Due to limitations , Checkstyle can not examine the target of an annotation . <nl> * < / p > <nl> * <nl> * < p > <nl> @ @ - 50 , 21 + 50 , 21 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < / pre > <nl> * <nl> * < p > <nl> - * Check have following options : <nl> + * The check has the following options : <nl> * < / p > <nl> * < ul > <nl> * < li > allowSamelineMultipleAnnotations - to allow annotation to be located on <nl> - * the same line as target element . Default value is false . <nl> + * the same line as the target element . Default value is false . <nl> * < / li > <nl> * <nl> * < li > <nl> * allowSamelineSingleParameterlessAnnotation - to allow single parameterless <nl> - * annotation to be located on the same line as target element . Default value is false . <nl> + * annotation to be located on the same line as the target element . Default value is false . <nl> * < / li > <nl> * <nl> * < li > <nl> * allowSamelineParameterizedAnnotation - to allow parameterized annotation <nl> - * to be located on the same line as target element . Default value is false . <nl> + * to be located on the same line as the target element . Default value is false . <nl> * < / li > <nl> * < / ul > <nl> * < br > <nl> @ @ - 75 , 7 + 75 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * & # 64 ; Override public int hashCode ( ) { . . . } <nl> * < / pre > <nl> * <nl> - * < p > Use following configuration : <nl> + * < p > Use the following configuration : <nl> * < pre > <nl> * & lt ; module name = & quot ; AnnotationLocation & quot ; & gt ; <nl> * & lt ; property name = & quot ; allowSamelineMultipleAnnotations & quot ; value = & quot ; false & quot ; / & gt ; <nl> @ @ - 93 , 7 + 93 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * & # 64 ; SuppressWarnings ( " deprecation " ) & # 64 ; Mock DataLoader loader ; <nl> * < / pre > <nl> * <nl> - * < p > Use following configuration : <nl> + * < p > Use the following configuration : <nl> * < pre > <nl> * & lt ; module name = & quot ; AnnotationLocation & quot ; & gt ; <nl> * & lt ; property name = & quot ; allowSamelineMultipleAnnotations & quot ; value = & quot ; true & quot ; / & gt ; <nl> @ @ - 111 , 7 + 111 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * & # 64 ; Partial & # 64 ; Mock DataLoader loader ; <nl> * < / pre > <nl> * <nl> - * < p > Use following configuration : <nl> + * < p > Use the following configuration : <nl> * < pre > <nl> * & lt ; module name = & quot ; AnnotationLocation & quot ; & gt ; <nl> * & lt ; property name = & quot ; allowSamelineMultipleAnnotations & quot ; value = & quot ; true & quot ; / & gt ; <nl> @ @ - 263 , 34 + 263 , 39 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> final DetailAST modifiersNode = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> <nl> if ( hasAnnotations ( modifiersNode ) ) { <nl> - checkAnnotations ( modifiersNode , getAnnotationLevel ( modifiersNode ) ) ; <nl> + checkAnnotations ( modifiersNode , getExpectedAnnotationIndentation ( modifiersNode ) ) ; <nl> } <nl> } <nl> <nl> / * * <nl> - * Some javadoc . <nl> - * @ param modifierNode Some javadoc . <nl> - * @ return Some javadoc . <nl> + * Checks whether a given modifier node has an annotation . <nl> + * @ param modifierNode modifier node . <nl> + * @ return true if the given modifier node has the annotation . <nl> * / <nl> private static boolean hasAnnotations ( DetailAST modifierNode ) { <nl> - return modifierNode ! = null & & modifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; <nl> + return modifierNode ! = null <nl> + & & modifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; <nl> } <nl> <nl> / * * <nl> - * Some javadoc . <nl> - * @ param modifierNode Some javadoc . <nl> - * @ return Some javadoc . <nl> + * Returns an expected annotation indentation . <nl> + * The expected indentation should be the same as the indentation of the node <nl> + * which is the parent of the target modifier node . <nl> + * @ param modifierNode modifier node . <nl> + * @ return the annotation indentation . <nl> * / <nl> - private static int getAnnotationLevel ( DetailAST modifierNode ) { <nl> + private static int getExpectedAnnotationIndentation ( DetailAST modifierNode ) { <nl> return modifierNode . getParent ( ) . getColumnNo ( ) ; <nl> } <nl> <nl> / * * <nl> - * Some javadoc . <nl> - * @ param modifierNode Some javadoc . <nl> - * @ param correctLevel Some javadoc . <nl> + * Checks annotations positions in code : <nl> + * 1 ) Checks whether the annotations locations are correct . <nl> + * 2 ) Checks whether the annotations have the valid indentation level . <nl> + * @ param modifierNode modifiers node . <nl> + * @ param correctIndentation correct indentation of the annotation . <nl> * / <nl> - private void checkAnnotations ( DetailAST modifierNode , int correctLevel ) { <nl> + private void checkAnnotations ( DetailAST modifierNode , int correctIndentation ) { <nl> DetailAST annotation = modifierNode . getFirstChild ( ) ; <nl> <nl> while ( annotation ! = null & & annotation . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> @ @ - 300 , 27 + 305 , 27 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> log ( annotation . getLineNo ( ) , <nl> MSG _ KEY _ ANNOTATION _ LOCATION _ ALONE , getAnnotationName ( annotation ) ) ; <nl> } <nl> - else if ( annotation . getColumnNo ( ) ! = correctLevel & & ! hasNodeBefore ( annotation ) ) { <nl> + else if ( annotation . getColumnNo ( ) ! = correctIndentation & & ! hasNodeBefore ( annotation ) ) { <nl> log ( annotation . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ LOCATION , <nl> - getAnnotationName ( annotation ) , annotation . getColumnNo ( ) , correctLevel ) ; <nl> + getAnnotationName ( annotation ) , annotation . getColumnNo ( ) , correctIndentation ) ; <nl> } <nl> annotation = annotation . getNextSibling ( ) ; <nl> } <nl> } <nl> <nl> / * * <nl> - * Some javadoc . <nl> - * @ param annotation Some javadoc . <nl> - * @ return Some javadoc . <nl> + * Checks whether an annotation has parameters . <nl> + * @ param annotation annotation node . <nl> + * @ return true if the annotation has parameters . <nl> * / <nl> private static boolean isParameterized ( DetailAST annotation ) { <nl> return annotation . findFirstToken ( TokenTypes . EXPR ) ! = null ; <nl> } <nl> <nl> / * * <nl> - * Some javadoc . <nl> - * @ param annotation Some javadoc . <nl> - * @ return Some javadoc . <nl> + * Returns the name of the given annotation . <nl> + * @ param annotation annotation node . <nl> + * @ return annotation name . <nl> * / <nl> private static String getAnnotationName ( DetailAST annotation ) { <nl> DetailAST identNode = annotation . findFirstToken ( TokenTypes . IDENT ) ; <nl> @ @ - 331 , 10 + 336 , 19 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Some javadoc . <nl> - * @ param annotation Some javadoc . <nl> - * @ param hasParams Some javadoc . <nl> - * @ return Some javadoc . <nl> + * Checks whether an annotation has a correct location . <nl> + * Annotation location is considered correct <nl> + * if { @ link AnnotationLocationCheck # allowSamelineMultipleAnnotations } is set to true . <nl> + * The method also : <nl> + * 1 ) checks parameterized annotation location considering <nl> + * the value of { @ link AnnotationLocationCheck # allowSamelineParameterizedAnnotation } ; <nl> + * 2 ) checks parameterless annotation location considering <nl> + * the value of { @ link AnnotationLocationCheck # allowSamelineSingleParameterlessAnnotation } ; <nl> + * 3 ) checks annotation location considering the elements <nl> + * of { @ link AnnotationLocationCheck # SINGLELINE _ ANNOTATION _ PARENTS } ; <nl> + * @ param annotation annotation node . <nl> + * @ param hasParams whether an annotation has parameters . <nl> + * @ return true if the annotation has a correct location . <nl> * / <nl> private boolean isCorrectLocation ( DetailAST annotation , boolean hasParams ) { <nl> final boolean allowingCondition ; <nl> @ @ - 352 , 9 + 366 , 9 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Some javadoc . <nl> - * @ param annotation Some javadoc . <nl> - * @ return Some javadoc . <nl> + * Checks whether an annotation node has any node before on the same line . <nl> + * @ param annotation annotation node . <nl> + * @ return true if an annotation node has any node before on the same line . <nl> * / <nl> private static boolean hasNodeBefore ( DetailAST annotation ) { <nl> final int annotationLineNo = annotation . getLineNo ( ) ; <nl> @ @ - 364 , 18 + 378 , 18 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Some javadoc . <nl> - * @ param annotation Some javadoc . <nl> - * @ return Some javadoc . <nl> + * Checks whether an annotation node has any node before or after on the same line . <nl> + * @ param annotation annotation node . <nl> + * @ return true if an annotation node has any node before or after on the same line . <nl> * / <nl> private static boolean hasNodeBeside ( DetailAST annotation ) { <nl> return hasNodeBefore ( annotation ) | | hasNodeAfter ( annotation ) ; <nl> } <nl> <nl> / * * <nl> - * Some javadoc . <nl> - * @ param annotation Some javadoc . <nl> - * @ return Some javadoc . <nl> + * Checks whether an annotation node has any node after on the same line . <nl> + * @ param annotation annotation node . <nl> + * @ return true if an annotation node has any node after on the same line . <nl> * / <nl> private static boolean hasNodeAfter ( DetailAST annotation ) { <nl> final int annotationLineNo = annotation . getLineNo ( ) ;
NEAREST DIFF (one line): diff - - git a / release . sh b / release . sh <nl> index ff03fe8 . . 5aab303 100755 <nl> - - - a / release . sh <nl> + + + b / release . sh <nl> @ @ - 1 , 14 + 1 , 15 @ @ <nl> # ! / usr / bin / bash <nl> set - e <nl> <nl> + # Make sure you prepared your PC for automative deployment <nl> # https : / / github . com / checkstyle / checkstyle / wiki / How - to - make - a - release <nl> <nl> SF _ USER = romanivanov <nl> - RELEASE = 6 . 19 <nl> + RELEASE = $ ( xmlstarlet sel - N pom = http : / / maven . apache . org / POM / 4 . 0 . 0 - t - m pom : project - v pom : version pom . xml | sed " s / - SNAPSHOT / / " ) <nl> PREV _ RELEASE = $ ( git describe $ ( git rev - list - - tags - - max - count = 1 ) | sed " s / checkstyle - / / " ) <nl> <nl> - echo " PREVIOUS RELESE version : " $ PREV _ RELEASE <nl> - echo " RELESE version : " $ RELEASE <nl> + echo " PREVIOUS RELEASE version : " $ PREV _ RELEASE <nl> + echo " RELEASE version : " $ RELEASE <nl> <nl> # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <nl> echo " Please provide password for $ SF _ USER , checkstyle @ shell . sourceforge . net "

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 index 2c02eea . . b036479 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 @ @ - 31 , 12 + 31 , 12 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * on separate line from target element . 
 * < p > 
 * Attention : Annotations among modifiers are ignored ( looks like false - negative ) 
 - * as there might be a problem with annotations for return types 
 + * as there might be a problem with annotations for return types . 
 * < / p > 
 * < pre > public @ Nullable Long getStartTimeOrNull ( ) { . . . } < / pre > . 
 * < p > 
 * Such annotations are better to keep close to type . 
 - * Due to limitations Checkstyle can not examin target of annotation . 
 + * Due to limitations , Checkstyle can not examine the target of an annotation . 
 * < / p > 
 * 
 * < p > 
 @ @ - 50 , 21 + 50 , 21 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < / pre > 
 * 
 * < p > 
 - * Check have following options : 
 + * The check has the following options : 
 * < / p > 
 * < ul > 
 * < li > allowSamelineMultipleAnnotations - to allow annotation to be located on 
 - * the same line as target element . Default value is false . 
 + * the same line as the target element . Default value is false . 
 * < / li > 
 * 
 * < li > 
 * allowSamelineSingleParameterlessAnnotation - to allow single parameterless 
 - * annotation to be located on the same line as target element . Default value is false . 
 + * annotation to be located on the same line as the target element . Default value is false . 
 * < / li > 
 * 
 * < li > 
 * allowSamelineParameterizedAnnotation - to allow parameterized annotation 
 - * to be located on the same line as target element . Default value is false . 
 + * to be located on the same line as the target element . Default value is false . 
 * < / li > 
 * < / ul > 
 * < br > 
 @ @ - 75 , 7 + 75 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * & # 64 ; Override public int hashCode ( ) { . . . } 
 * < / pre > 
 * 
 - * < p > Use following configuration : 
 + * < p > Use the following configuration : 
 * < pre > 
 * & lt ; module name = & quot ; AnnotationLocation & quot ; & gt ; 
 * & lt ; property name = & quot ; allowSamelineMultipleAnnotations & quot ; value = & quot ; false & quot ; / & gt ; 
 @ @ - 93 , 7 + 93 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * & # 64 ; SuppressWarnings ( " deprecation " ) & # 64 ; Mock DataLoader loader ; 
 * < / pre > 
 * 
 - * < p > Use following configuration : 
 + * < p > Use the following configuration : 
 * < pre > 
 * & lt ; module name = & quot ; AnnotationLocation & quot ; & gt ; 
 * & lt ; property name = & quot ; allowSamelineMultipleAnnotations & quot ; value = & quot ; true & quot ; / & gt ; 
 @ @ - 111 , 7 + 111 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * & # 64 ; Partial & # 64 ; Mock DataLoader loader ; 
 * < / pre > 
 * 
 - * < p > Use following configuration : 
 + * < p > Use the following configuration : 
 * < pre > 
 * & lt ; module name = & quot ; AnnotationLocation & quot ; & gt ; 
 * & lt ; property name = & quot ; allowSamelineMultipleAnnotations & quot ; value = & quot ; true & quot ; / & gt ; 
 @ @ - 263 , 34 + 263 , 39 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 final DetailAST modifiersNode = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 
 if ( hasAnnotations ( modifiersNode ) ) { 
 - checkAnnotations ( modifiersNode , getAnnotationLevel ( modifiersNode ) ) ; 
 + checkAnnotations ( modifiersNode , getExpectedAnnotationIndentation ( modifiersNode ) ) ; 
 } 
 } 
 
 / * * 
 - * Some javadoc . 
 - * @ param modifierNode Some javadoc . 
 - * @ return Some javadoc . 
 + * Checks whether a given modifier node has an annotation . 
 + * @ param modifierNode modifier node . 
 + * @ return true if the given modifier node has the annotation . 
 * / 
 private static boolean hasAnnotations ( DetailAST modifierNode ) { 
 - return modifierNode ! = null & & modifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; 
 + return modifierNode ! = null 
 + & & modifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; 
 } 
 
 / * * 
 - * Some javadoc . 
 - * @ param modifierNode Some javadoc . 
 - * @ return Some javadoc . 
 + * Returns an expected annotation indentation . 
 + * The expected indentation should be the same as the indentation of the node 
 + * which is the parent of the target modifier node . 
 + * @ param modifierNode modifier node . 
 + * @ return the annotation indentation . 
 * / 
 - private static int getAnnotationLevel ( DetailAST modifierNode ) { 
 + private static int getExpectedAnnotationIndentation ( DetailAST modifierNode ) { 
 return modifierNode . getParent ( ) . getColumnNo ( ) ; 
 } 
 
 / * * 
 - * Some javadoc . 
 - * @ param modifierNode Some javadoc . 
 - * @ param correctLevel Some javadoc . 
 + * Checks annotations positions in code : 
 + * 1 ) Checks whether the annotations locations are correct . 
 + * 2 ) Checks whether the annotations have the valid indentation level . 
 + * @ param modifierNode modifiers node . 
 + * @ param correctIndentation correct indentation of the annotation . 
 * / 
 - private void checkAnnotations ( DetailAST modifierNode , int correctLevel ) { 
 + private void checkAnnotations ( DetailAST modifierNode , int correctIndentation ) { 
 DetailAST annotation = modifierNode . getFirstChild ( ) ; 
 
 while ( annotation ! = null & & annotation . getType ( ) = = TokenTypes . ANNOTATION ) { 
 @ @ - 300 , 27 + 305 , 27 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 log ( annotation . getLineNo ( ) , 
 MSG _ KEY _ ANNOTATION _ LOCATION _ ALONE , getAnnotationName ( annotation ) ) ; 
 } 
 - else if ( annotation . getColumnNo ( ) ! = correctLevel & & ! hasNodeBefore ( annotation ) ) { 
 + else if ( annotation . getColumnNo ( ) ! = correctIndentation & & ! hasNodeBefore ( annotation ) ) { 
 log ( annotation . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ LOCATION , 
 - getAnnotationName ( annotation ) , annotation . getColumnNo ( ) , correctLevel ) ; 
 + getAnnotationName ( annotation ) , annotation . getColumnNo ( ) , correctIndentation ) ; 
 } 
 annotation = annotation . getNextSibling ( ) ; 
 } 
 } 
 
 / * * 
 - * Some javadoc . 
 - * @ param annotation Some javadoc . 
 - * @ return Some javadoc . 
 + * Checks whether an annotation has parameters . 
 + * @ param annotation annotation node . 
 + * @ return true if the annotation has parameters . 
 * / 
 private static boolean isParameterized ( DetailAST annotation ) { 
 return annotation . findFirstToken ( TokenTypes . EXPR ) ! = null ; 
 } 
 
 / * * 
 - * Some javadoc . 
 - * @ param annotation Some javadoc . 
 - * @ return Some javadoc . 
 + * Returns the name of the given annotation . 
 + * @ param annotation annotation node . 
 + * @ return annotation name . 
 * / 
 private static String getAnnotationName ( DetailAST annotation ) { 
 DetailAST identNode = annotation . findFirstToken ( TokenTypes . IDENT ) ; 
 @ @ - 331 , 10 + 336 , 19 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Some javadoc . 
 - * @ param annotation Some javadoc . 
 - * @ param hasParams Some javadoc . 
 - * @ return Some javadoc . 
 + * Checks whether an annotation has a correct location . 
 + * Annotation location is considered correct 
 + * if { @ link AnnotationLocationCheck # allowSamelineMultipleAnnotations } is set to true . 
 + * The method also : 
 + * 1 ) checks parameterized annotation location considering 
 + * the value of { @ link AnnotationLocationCheck # allowSamelineParameterizedAnnotation } ; 
 + * 2 ) checks parameterless annotation location considering 
 + * the value of { @ link AnnotationLocationCheck # allowSamelineSingleParameterlessAnnotation } ; 
 + * 3 ) checks annotation location considering the elements 
 + * of { @ link AnnotationLocationCheck # SINGLELINE _ ANNOTATION _ PARENTS } ; 
 + * @ param annotation annotation node . 
 + * @ param hasParams whether an annotation has parameters . 
 + * @ return true if the annotation has a correct location . 
 * / 
 private boolean isCorrectLocation ( DetailAST annotation , boolean hasParams ) { 
 final boolean allowingCondition ; 
 @ @ - 352 , 9 + 366 , 9 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Some javadoc . 
 - * @ param annotation Some javadoc . 
 - * @ return Some javadoc . 
 + * Checks whether an annotation node has any node before on the same line . 
 + * @ param annotation annotation node . 
 + * @ return true if an annotation node has any node before on the same line . 
 * / 
 private static boolean hasNodeBefore ( DetailAST annotation ) { 
 final int annotationLineNo = annotation . getLineNo ( ) ; 
 @ @ - 364 , 18 + 378 , 18 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Some javadoc . 
 - * @ param annotation Some javadoc . 
 - * @ return Some javadoc . 
 + * Checks whether an annotation node has any node before or after on the same line . 
 + * @ param annotation annotation node . 
 + * @ return true if an annotation node has any node before or after on the same line . 
 * / 
 private static boolean hasNodeBeside ( DetailAST annotation ) { 
 return hasNodeBefore ( annotation ) | | hasNodeAfter ( annotation ) ; 
 } 
 
 / * * 
 - * Some javadoc . 
 - * @ param annotation Some javadoc . 
 - * @ return Some javadoc . 
 + * Checks whether an annotation node has any node after on the same line . 
 + * @ param annotation annotation node . 
 + * @ return true if an annotation node has any node after on the same line . 
 * / 
 private static boolean hasNodeAfter ( DetailAST annotation ) { 
 final int annotationLineNo = annotation . getLineNo ( ) ;

NEAREST DIFF:
diff - - git a / release . sh b / release . sh 
 index ff03fe8 . . 5aab303 100755 
 - - - a / release . sh 
 + + + b / release . sh 
 @ @ - 1 , 14 + 1 , 15 @ @ 
 # ! / usr / bin / bash 
 set - e 
 
 + # Make sure you prepared your PC for automative deployment 
 # https : / / github . com / checkstyle / checkstyle / wiki / How - to - make - a - release 
 
 SF _ USER = romanivanov 
 - RELEASE = 6 . 19 
 + RELEASE = $ ( xmlstarlet sel - N pom = http : / / maven . apache . org / POM / 4 . 0 . 0 - t - m pom : project - v pom : version pom . xml | sed " s / - SNAPSHOT / / " ) 
 PREV _ RELEASE = $ ( git describe $ ( git rev - list - - tags - - max - count = 1 ) | sed " s / checkstyle - / / " ) 
 
 - echo " PREVIOUS RELESE version : " $ PREV _ RELEASE 
 - echo " RELESE version : " $ RELEASE 
 + echo " PREVIOUS RELEASE version : " $ PREV _ RELEASE 
 + echo " RELEASE version : " $ RELEASE 
 
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 echo " Please provide password for $ SF _ USER , checkstyle @ shell . sourceforge . net "
