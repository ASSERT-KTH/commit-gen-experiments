BLEU SCORE: 0.5093498412990677

TEST MSG: config : bump slf4j - simple version to 1 . 7 . 24
GENERATED MSG: minor : slf4j - simple version bump to 1 . 7 . 14

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index de91f26 . . bb58869 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 307 , 7 + 307 , 7 @ @ <nl> < dependency > <nl> < groupId > org . slf4j < / groupId > <nl> < artifactId > slf4j - simple < / artifactId > <nl> - < version > 1 . 7 . 23 < / version > <nl> + < version > 1 . 7 . 24 < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / CheckstyleFrameModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / CheckstyleFrameModel . java <nl> deleted file mode 100644 <nl> index a85c003 . . 0000000 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / CheckstyleFrameModel . java <nl> + + + / dev / null <nl> @ @ - 1 , 113 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . gui ; <nl> - <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> - import java . util . ArrayList ; <nl> - import java . util . List ; <nl> - <nl> - import antlr . ANTLRException ; <nl> - <nl> - import com . google . common . collect . ImmutableList ; <nl> - import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> - import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> - <nl> - / * * <nl> - * Model for checkstyle frame . <nl> - * @ author Vladislav Lisetskiy <nl> - * / <nl> - public class CheckstyleFrameModel { <nl> - <nl> - / * * Lines to position map . * / <nl> - private final List < Integer > linesToPosition = new ArrayList < > ( ) ; <nl> - <nl> - / * * The file which is being parsed . * / <nl> - private File currentFile ; <nl> - <nl> - / * * <nl> - * Parse a file and return the parse tree . <nl> - * @ param file the file to parse . <nl> - * @ return the root node of the parse tree . <nl> - * @ throws IOException if the file could not be read . <nl> - * @ throws ANTLRException if the file is not a Java source . <nl> - * / <nl> - public DetailAST parseFile ( File file ) throws IOException , ANTLRException { <nl> - currentFile = file ; <nl> - final FileText text = getFileText ( file ) ; <nl> - final FileContents contents = new FileContents ( text ) ; <nl> - return TreeWalker . parse ( contents ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Get FileText from a file . <nl> - * @ param file the file to get the FileText from . <nl> - * @ return the FileText . <nl> - * @ throws IOException if the file could not be read . <nl> - * / <nl> - public FileText getFileText ( File file ) throws IOException { <nl> - return new FileText ( file . getAbsoluteFile ( ) , <nl> - System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Get the directory of the last loaded file . <nl> - * @ return directory of the last loaded file . <nl> - * / <nl> - public File getLastDirectory ( ) { <nl> - File lastDirectory = null ; <nl> - if ( currentFile ! = null ) { <nl> - lastDirectory = new File ( currentFile . getParent ( ) ) ; <nl> - } <nl> - return lastDirectory ; <nl> - } <nl> - <nl> - / * * <nl> - * Get current file . <nl> - * @ return current file . <nl> - * / <nl> - public File getCurrentFile ( ) { <nl> - return currentFile ; <nl> - } <nl> - <nl> - / * * <nl> - * Get lines to position map . <nl> - * @ return lines to position map . <nl> - * / <nl> - public List < Integer > getLinesToPosition ( ) { <nl> - return ImmutableList . copyOf ( linesToPosition ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Add a new value into lines to position map . <nl> - * @ param value Value to be added into position map . <nl> - * / <nl> - public void addLineToPosition ( int value ) { <nl> - linesToPosition . add ( value ) ; <nl> - } <nl> - <nl> - / * * Clear lines to position map . * / <nl> - public void clearLinesToPosition ( ) { <nl> - linesToPosition . clear ( ) ; <nl> - } <nl> - <nl> - } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrame . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrame . java <nl> index fc8e67e . . a3115d1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrame . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrame . java <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class MainFrame extends JFrame { <nl> <nl> private static final long serialVersionUID = 7970053543351871890L ; <nl> / * * Checkstyle frame model . * / <nl> - private final transient CheckstyleFrameModel model = new CheckstyleFrameModel ( ) ; <nl> + private final transient MainFrameModel model = new MainFrameModel ( ) ; <nl> / * * Reload action . * / <nl> private final ReloadAction reloadAction = new ReloadAction ( ) ; <nl> / * * Parse tree model . * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModel . java <nl> new file mode 100644 <nl> index 0000000 . . d6240c5 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModel . java <nl> @ @ - 0 , 0 + 1 , 113 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . gui ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + import antlr . ANTLRException ; <nl> + <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> + <nl> + / * * <nl> + * Model for checkstyle frame . <nl> + * @ author Vladislav Lisetskiy <nl> + * / <nl> + public class MainFrameModel { <nl> + <nl> + / * * Lines to position map . * / <nl> + private final List < Integer > linesToPosition = new ArrayList < > ( ) ; <nl> + <nl> + / * * The file which is being parsed . * / <nl> + private File currentFile ; <nl> + <nl> + / * * <nl> + * Parse a file and return the parse tree . <nl> + * @ param file the file to parse . <nl> + * @ return the root node of the parse tree . <nl> + * @ throws IOException if the file could not be read . <nl> + * @ throws ANTLRException if the file is not a Java source . <nl> + * / <nl> + public DetailAST parseFile ( File file ) throws IOException , ANTLRException { <nl> + currentFile = file ; <nl> + final FileText text = getFileText ( file ) ; <nl> + final FileContents contents = new FileContents ( text ) ; <nl> + return TreeWalker . parse ( contents ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get FileText from a file . <nl> + * @ param file the file to get the FileText from . <nl> + * @ return the FileText . <nl> + * @ throws IOException if the file could not be read . <nl> + * / <nl> + public FileText getFileText ( File file ) throws IOException { <nl> + return new FileText ( file . getAbsoluteFile ( ) , <nl> + System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the directory of the last loaded file . <nl> + * @ return directory of the last loaded file . <nl> + * / <nl> + public File getLastDirectory ( ) { <nl> + File lastDirectory = null ; <nl> + if ( currentFile ! = null ) { <nl> + lastDirectory = new File ( currentFile . getParent ( ) ) ; <nl> + } <nl> + return lastDirectory ; <nl> + } <nl> + <nl> + / * * <nl> + * Get current file . <nl> + * @ return current file . <nl> + * / <nl> + public File getCurrentFile ( ) { <nl> + return currentFile ; <nl> + } <nl> + <nl> + / * * <nl> + * Get lines to position map . <nl> + * @ return lines to position map . <nl> + * / <nl> + public List < Integer > getLinesToPosition ( ) { <nl> + return ImmutableList . copyOf ( linesToPosition ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Add a new value into lines to position map . <nl> + * @ param value Value to be added into position map . <nl> + * / <nl> + public void addLineToPosition ( int value ) { <nl> + linesToPosition . add ( value ) ; <nl> + } <nl> + <nl> + / * * Clear lines to position map . * / <nl> + public void clearLinesToPosition ( ) { <nl> + linesToPosition . clear ( ) ; <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index de91f26 . . bb58869 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 307 , 7 + 307 , 7 @ @ 
 < dependency > 
 < groupId > org . slf4j < / groupId > 
 < artifactId > slf4j - simple < / artifactId > 
 - < version > 1 . 7 . 23 < / version > 
 + < version > 1 . 7 . 24 < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / CheckstyleFrameModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / CheckstyleFrameModel . java 
 deleted file mode 100644 
 index a85c003 . . 0000000 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / CheckstyleFrameModel . java 
 + + + / dev / null 
 @ @ - 1 , 113 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . gui ; 
 - 
 - import java . io . File ; 
 - import java . io . IOException ; 
 - import java . util . ArrayList ; 
 - import java . util . List ; 
 - 
 - import antlr . ANTLRException ; 
 - 
 - import com . google . common . collect . ImmutableList ; 
 - import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 - import com . puppycrawl . tools . checkstyle . api . FileText ; 
 - 
 - / * * 
 - * Model for checkstyle frame . 
 - * @ author Vladislav Lisetskiy 
 - * / 
 - public class CheckstyleFrameModel { 
 - 
 - / * * Lines to position map . * / 
 - private final List < Integer > linesToPosition = new ArrayList < > ( ) ; 
 - 
 - / * * The file which is being parsed . * / 
 - private File currentFile ; 
 - 
 - / * * 
 - * Parse a file and return the parse tree . 
 - * @ param file the file to parse . 
 - * @ return the root node of the parse tree . 
 - * @ throws IOException if the file could not be read . 
 - * @ throws ANTLRException if the file is not a Java source . 
 - * / 
 - public DetailAST parseFile ( File file ) throws IOException , ANTLRException { 
 - currentFile = file ; 
 - final FileText text = getFileText ( file ) ; 
 - final FileContents contents = new FileContents ( text ) ; 
 - return TreeWalker . parse ( contents ) ; 
 - } 
 - 
 - / * * 
 - * Get FileText from a file . 
 - * @ param file the file to get the FileText from . 
 - * @ return the FileText . 
 - * @ throws IOException if the file could not be read . 
 - * / 
 - public FileText getFileText ( File file ) throws IOException { 
 - return new FileText ( file . getAbsoluteFile ( ) , 
 - System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; 
 - } 
 - 
 - / * * 
 - * Get the directory of the last loaded file . 
 - * @ return directory of the last loaded file . 
 - * / 
 - public File getLastDirectory ( ) { 
 - File lastDirectory = null ; 
 - if ( currentFile ! = null ) { 
 - lastDirectory = new File ( currentFile . getParent ( ) ) ; 
 - } 
 - return lastDirectory ; 
 - } 
 - 
 - / * * 
 - * Get current file . 
 - * @ return current file . 
 - * / 
 - public File getCurrentFile ( ) { 
 - return currentFile ; 
 - } 
 - 
 - / * * 
 - * Get lines to position map . 
 - * @ return lines to position map . 
 - * / 
 - public List < Integer > getLinesToPosition ( ) { 
 - return ImmutableList . copyOf ( linesToPosition ) ; 
 - } 
 - 
 - / * * 
 - * Add a new value into lines to position map . 
 - * @ param value Value to be added into position map . 
 - * / 
 - public void addLineToPosition ( int value ) { 
 - linesToPosition . add ( value ) ; 
 - } 
 - 
 - / * * Clear lines to position map . * / 
 - public void clearLinesToPosition ( ) { 
 - linesToPosition . clear ( ) ; 
 - } 
 - 
 - } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrame . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrame . java 
 index fc8e67e . . a3115d1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrame . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrame . java 
 @ @ - 52 , 7 + 52 , 7 @ @ public class MainFrame extends JFrame { 
 
 private static final long serialVersionUID = 7970053543351871890L ; 
 / * * Checkstyle frame model . * / 
 - private final transient CheckstyleFrameModel model = new CheckstyleFrameModel ( ) ; 
 + private final transient MainFrameModel model = new MainFrameModel ( ) ; 
 / * * Reload action . * / 
 private final ReloadAction reloadAction = new ReloadAction ( ) ; 
 / * * Parse tree model . * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModel . java 
 new file mode 100644 
 index 0000000 . . d6240c5 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModel . java 
 @ @ - 0 , 0 + 1 , 113 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . gui ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import antlr . ANTLRException ; 
 + 
 + import com . google . common . collect . ImmutableList ; 
 + import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 + 
 + / * * 
 + * Model for checkstyle frame . 
 + * @ author Vladislav Lisetskiy 
 + * / 
 + public class MainFrameModel { 
 + 
 + / * * Lines to position map . * / 
 + private final List < Integer > linesToPosition = new ArrayList < > ( ) ; 
 + 
 + / * * The file which is being parsed . * / 
 + private File currentFile ; 
 + 
 + / * * 
 + * Parse a file and return the parse tree . 
 + * @ param file the file to parse . 
 + * @ return the root node of the parse tree . 
 + * @ throws IOException if the file could not be read . 
 + * @ throws ANTLRException if the file is not a Java source . 
 + * / 
 + public DetailAST parseFile ( File file ) throws IOException , ANTLRException { 
 + currentFile = file ; 
 + final FileText text = getFileText ( file ) ; 
 + final FileContents contents = new FileContents ( text ) ; 
 + return TreeWalker . parse ( contents ) ; 
 + } 
 + 
 + / * * 
 + * Get FileText from a file . 
 + * @ param file the file to get the FileText from . 
 + * @ return the FileText . 
 + * @ throws IOException if the file could not be read . 
 + * / 
 + public FileText getFileText ( File file ) throws IOException { 
 + return new FileText ( file . getAbsoluteFile ( ) , 
 + System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; 
 + } 
 + 
 + / * * 
 + * Get the directory of the last loaded file . 
 + * @ return directory of the last loaded file . 
 + * / 
 + public File getLastDirectory ( ) { 
 + File lastDirectory = null ; 
 + if ( currentFile ! = null ) { 
 + lastDirectory = new File ( currentFile . getParent ( ) ) ; 
 + } 
 + return lastDirectory ; 
 + } 
 + 
 + / * * 
 + * Get current file . 
 + * @ return current file . 
 + * / 
 + public File getCurrentFile ( ) { 
 + return currentFile ; 
 + } 
 + 
 + / * * 
 + * Get lines to position map . 
 + * @ return lines to position map . 
 + * / 
 + public List < Integer > getLinesToPosition ( ) { 
 + return ImmutableList . copyOf ( linesToPosition ) ; 
 + } 
 + 
 + / * * 
 + * Add a new value into lines to position map . 
 + * @ param value Value to be added into position map . 
 + * / 
 + public void addLineToPosition ( int value ) { 
 + linesToPosition . add ( value ) ; 
 + } 
 + 
 + / * * Clear lines to position map . * / 
 + public void clearLinesToPosition ( ) { 
 + linesToPosition . clear ( ) ; 
 + } 
 + 
 + }
