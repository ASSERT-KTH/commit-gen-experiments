BLEU SCORE: 0.05417921591708778

TEST MSG: Issue # 5595 : 100 % coverage for PackageObjectFactory
GENERATED MSG: Issue # 4885 : fixed list of packages when module can ' t be found

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> index d1bed66 . . f62a06a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> @ @ - 190 , 6 + 190 , 31 @ @ public class PackageObjectFactoryTest { <nl> } <nl> <nl> @ Test <nl> + public void testCreateStandardModuleObjectFromMap ( ) throws Exception { <nl> + final String moduleName = " TreeWalker " ; <nl> + final String packageName = BASE _ PACKAGE + " . packageobjectfactory . bar " ; <nl> + final String fullName = BASE _ PACKAGE + PACKAGE _ SEPARATOR + moduleName ; <nl> + final ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> + final PackageObjectFactory objectFactory = <nl> + new PackageObjectFactory ( packageName , classLoader ) ; <nl> + final Object instance = objectFactory . createModule ( moduleName ) ; <nl> + assertEquals ( " Invalid canonical name " , fullName , instance . getClass ( ) . getCanonicalName ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCreateStandardCheckModuleObjectFromMap ( ) throws Exception { <nl> + final String moduleName = " TypeName " ; <nl> + final String packageName = BASE _ PACKAGE + " . packageobjectfactory . bar " ; <nl> + final String fullName = BASE _ PACKAGE + PACKAGE _ SEPARATOR + " checks " + PACKAGE _ SEPARATOR <nl> + + " naming " + PACKAGE _ SEPARATOR + moduleName + CHECK _ SUFFIX ; <nl> + final ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> + final PackageObjectFactory objectFactory = <nl> + new PackageObjectFactory ( packageName , classLoader ) ; <nl> + final Object instance = objectFactory . createModule ( moduleName ) ; <nl> + assertEquals ( " Invalid canonical name " , fullName , instance . getClass ( ) . getCanonicalName ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCreateObjectFromFullModuleNamesWithAmbiguousException ( ) { <nl> final String barPackage = BASE _ PACKAGE + " . packageobjectfactory . bar " ; <nl> final String fooPackage = BASE _ PACKAGE + " . packageobjectfactory . foo " ;
NEAREST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 84048af . . 42b71aa 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 213 , 7 + 213 , 7 @ @ <nl> < inspection _ tool class = " CStyleArrayDeclaration " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CachedNumberConstructorCall " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CallToNativeMethodWhileLocked " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " CallToSimpleGetterInClass " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> + < inspection _ tool class = " CallToSimpleGetterInClass " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < option name = " ignoreGetterCallsOnOtherObjects " value = " false " / > <nl> < option name = " onlyReportPrivateGetter " value = " false " / > <nl> < / inspection _ tool > <nl> @ @ - 1416 , 7 + 1416 , 7 @ @ <nl> < inspection _ tool class = " MinMaxValuesInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " MismatchedArrayReadWrite " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " MismatchedCollectionQueryUpdate " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> - < scope name = " Tests " level = " WARNING " enabled = " false " > <nl> + < scope name = " Tests " level = " WARNING " enabled = " true " > <nl> < option name = " queryNames " > <nl> < value / > <nl> < / option > <nl> @ @ - 1571 , 6 + 1571 , 7 @ @ <nl> < inspection _ tool class = " NotifyWithoutCorrespondingWait " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " NullArgumentToVariableArgMethod " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " NullThrown " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> + < ! - - we are not ready to use extra dependency com . google . code . findbugs : jsr305 in our API - - > <nl> < inspection _ tool class = " NullableProblems " enabled = " false " level = " WARNING " enabled _ by _ default = " false " > <nl> < option name = " REPORT _ NULLABLE _ METHOD _ OVERRIDES _ NOTNULL " value = " true " / > <nl> < option name = " REPORT _ NOT _ ANNOTATED _ METHOD _ OVERRIDES _ NOTNULL " value = " true " / > <nl> @ @ - 2102 , 6 + 2103 , 12 @ @ <nl> < option value = " CheckedExceptionClass " / > <nl> < option value = " StaticVariableMayNotBeInitialized " / > <nl> < option value = " StaticVariableUsedBeforeInitialization " / > <nl> + < ! - - till # 4734 - - > <nl> + < option value = " NonFinalFieldReferenceInEquals " / > <nl> + < ! - - till # 4734 - - > <nl> + < option value = " NonFinalFieldReferencedInHashCode " / > <nl> + < ! - - FileContentsHolder # getContence ( ) getter is deprecated - - > <nl> + < option value = " CallToSimpleGetterFromWithinClass " / > <nl> < / list > <nl> < / option > <nl> < / inspection _ tool > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ThreadModeSettings . java b / src / main / java / com / puppycrawl / tools / checkstyle / ThreadModeSettings . java <nl> index a401267 . . dac67c0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ThreadModeSettings . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ThreadModeSettings . java <nl> @ @ - 83 , 15 + 83 , 15 @ @ public class ThreadModeSettings implements Serializable { <nl> * @ return resolved module name . <nl> * / <nl> public final String resolveName ( String name ) { <nl> - if ( CHECKER _ MODULE _ NAME . equals ( name ) <nl> - & & getCheckerThreadsNumber ( ) > 1 ) { <nl> - throw new IllegalArgumentException ( <nl> - " Multi thread mode for Checker module is not implemented " ) ; <nl> - } <nl> - if ( TREE _ WALKER _ MODULE _ NAME . equals ( name ) <nl> - & & getTreeWalkerThreadsNumber ( ) > 1 ) { <nl> - throw new IllegalArgumentException ( <nl> - " Multi thread mode for TreeWalker module is not implemented " ) ; <nl> + if ( checkerThreadsNumber > 1 ) { <nl> + if ( CHECKER _ MODULE _ NAME . equals ( name ) ) { <nl> + throw new IllegalArgumentException ( <nl> + " Multi thread mode for Checker module is not implemented " ) ; <nl> + } <nl> + if ( TREE _ WALKER _ MODULE _ NAME . equals ( name ) ) { <nl> + throw new IllegalArgumentException ( <nl> + " Multi thread mode for TreeWalker module is not implemented " ) ; <nl> + } <nl> } <nl> <nl> return name ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> index 0f77800 . . 54541f0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> @ @ - 171 , 6 + 171 , 6 @ @ public abstract class AbstractFileSetCheck <nl> protected final void fireErrors ( String fileName ) { <nl> final SortedSet < LocalizedMessage > errors = new TreeSet < > ( messageCollector ) ; <nl> messageCollector . clear ( ) ; <nl> - getMessageDispatcher ( ) . fireErrors ( fileName , errors ) ; <nl> + messageDispatcher . fireErrors ( fileName , errors ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> index 91766f3 . . ea61718 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> @ @ - 271 , 7 + 271 , 7 @ @ public class AutomaticBean <nl> throws CheckstyleException { <nl> if ( childConf ! = null ) { <nl> throw new CheckstyleException ( childConf . getName ( ) + " is not allowed as a child in " <nl> - + getConfiguration ( ) . getName ( ) + " . Please review ' Parent Module ' section " <nl> + + configuration . getName ( ) + " . Please review ' Parent Module ' section " <nl> + " for this Check in web documentation if Check is standard . " ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> index 6fb4b99 . . c8ae67d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> @ @ - 421 , 10 + 421 , 10 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { <nl> * child count for the current DetailAST instance . <nl> * / <nl> private void clearBranchTokenTypes ( ) { <nl> - DetailAST prevParent = getParent ( ) ; <nl> + DetailAST prevParent = parent ; <nl> while ( prevParent ! = null ) { <nl> prevParent . branchTokenTypes = null ; <nl> - prevParent = prevParent . getParent ( ) ; <nl> + prevParent = prevParent . parent ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FileContentsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FileContentsHolder . java <nl> index 059ac5d . . ed33e7d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FileContentsHolder . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FileContentsHolder . java <nl> @ @ - 48 , 6 + 48 , 7 @ @ public class FileContentsHolder extends AbstractCheck { <nl> * Returns content of current file . <nl> * @ return the current file contents . <nl> * @ deprecated use getCurrentFileContents ( ) instead . <nl> + * @ noinspection CallToSimpleGetterFromWithinClass <nl> * / <nl> @ Deprecated <nl> public static FileContents getContents ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 7c1dbef . . deb0cc9 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 314 , 8 + 314 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> / / create file that should throw exception <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final FileText fileText = new FileText ( file , new ArrayList < > ( ) ) ; <nl> - final List < String > lines = new ArrayList < > ( ) ; <nl> - lines . add ( " class a % $ # { } " ) ; <nl> <nl> treeWalker . processFiltered ( file , fileText ) ; <nl> final Collection < Checks > checks = <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> index 386df36 . . 8700002 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> @ @ - 27 , 9 + 27 , 6 @ @ import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> - import java . util . HashMap ; <nl> - import java . util . Map ; <nl> - <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 47 , 8 + 44 , 6 @ @ public class GenericWhitespaceCheckTest <nl> @ Before <nl> public void setUp ( ) { <nl> checkConfig = createCheckConfig ( GenericWhitespaceCheck . class ) ; <nl> - final Map < Class < ? > , Integer > x = new HashMap < > ( ) ; <nl> - x . entrySet ( ) . forEach ( Map . Entry : : getValue ) ; <nl> } <nl> <nl> @ Override

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 index d1bed66 . . f62a06a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 @ @ - 190 , 6 + 190 , 31 @ @ public class PackageObjectFactoryTest { 
 } 
 
 @ Test 
 + public void testCreateStandardModuleObjectFromMap ( ) throws Exception { 
 + final String moduleName = " TreeWalker " ; 
 + final String packageName = BASE _ PACKAGE + " . packageobjectfactory . bar " ; 
 + final String fullName = BASE _ PACKAGE + PACKAGE _ SEPARATOR + moduleName ; 
 + final ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 + final PackageObjectFactory objectFactory = 
 + new PackageObjectFactory ( packageName , classLoader ) ; 
 + final Object instance = objectFactory . createModule ( moduleName ) ; 
 + assertEquals ( " Invalid canonical name " , fullName , instance . getClass ( ) . getCanonicalName ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testCreateStandardCheckModuleObjectFromMap ( ) throws Exception { 
 + final String moduleName = " TypeName " ; 
 + final String packageName = BASE _ PACKAGE + " . packageobjectfactory . bar " ; 
 + final String fullName = BASE _ PACKAGE + PACKAGE _ SEPARATOR + " checks " + PACKAGE _ SEPARATOR 
 + + " naming " + PACKAGE _ SEPARATOR + moduleName + CHECK _ SUFFIX ; 
 + final ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 + final PackageObjectFactory objectFactory = 
 + new PackageObjectFactory ( packageName , classLoader ) ; 
 + final Object instance = objectFactory . createModule ( moduleName ) ; 
 + assertEquals ( " Invalid canonical name " , fullName , instance . getClass ( ) . getCanonicalName ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testCreateObjectFromFullModuleNamesWithAmbiguousException ( ) { 
 final String barPackage = BASE _ PACKAGE + " . packageobjectfactory . bar " ; 
 final String fooPackage = BASE _ PACKAGE + " . packageobjectfactory . foo " ;

NEAREST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 84048af . . 42b71aa 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 213 , 7 + 213 , 7 @ @ 
 < inspection _ tool class = " CStyleArrayDeclaration " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CachedNumberConstructorCall " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CallToNativeMethodWhileLocked " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " CallToSimpleGetterInClass " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 + < inspection _ tool class = " CallToSimpleGetterInClass " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < option name = " ignoreGetterCallsOnOtherObjects " value = " false " / > 
 < option name = " onlyReportPrivateGetter " value = " false " / > 
 < / inspection _ tool > 
 @ @ - 1416 , 7 + 1416 , 7 @ @ 
 < inspection _ tool class = " MinMaxValuesInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " MismatchedArrayReadWrite " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " MismatchedCollectionQueryUpdate " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 - < scope name = " Tests " level = " WARNING " enabled = " false " > 
 + < scope name = " Tests " level = " WARNING " enabled = " true " > 
 < option name = " queryNames " > 
 < value / > 
 < / option > 
 @ @ - 1571 , 6 + 1571 , 7 @ @ 
 < inspection _ tool class = " NotifyWithoutCorrespondingWait " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " NullArgumentToVariableArgMethod " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " NullThrown " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 + < ! - - we are not ready to use extra dependency com . google . code . findbugs : jsr305 in our API - - > 
 < inspection _ tool class = " NullableProblems " enabled = " false " level = " WARNING " enabled _ by _ default = " false " > 
 < option name = " REPORT _ NULLABLE _ METHOD _ OVERRIDES _ NOTNULL " value = " true " / > 
 < option name = " REPORT _ NOT _ ANNOTATED _ METHOD _ OVERRIDES _ NOTNULL " value = " true " / > 
 @ @ - 2102 , 6 + 2103 , 12 @ @ 
 < option value = " CheckedExceptionClass " / > 
 < option value = " StaticVariableMayNotBeInitialized " / > 
 < option value = " StaticVariableUsedBeforeInitialization " / > 
 + < ! - - till # 4734 - - > 
 + < option value = " NonFinalFieldReferenceInEquals " / > 
 + < ! - - till # 4734 - - > 
 + < option value = " NonFinalFieldReferencedInHashCode " / > 
 + < ! - - FileContentsHolder # getContence ( ) getter is deprecated - - > 
 + < option value = " CallToSimpleGetterFromWithinClass " / > 
 < / list > 
 < / option > 
 < / inspection _ tool > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ThreadModeSettings . java b / src / main / java / com / puppycrawl / tools / checkstyle / ThreadModeSettings . java 
 index a401267 . . dac67c0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ThreadModeSettings . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ThreadModeSettings . java 
 @ @ - 83 , 15 + 83 , 15 @ @ public class ThreadModeSettings implements Serializable { 
 * @ return resolved module name . 
 * / 
 public final String resolveName ( String name ) { 
 - if ( CHECKER _ MODULE _ NAME . equals ( name ) 
 - & & getCheckerThreadsNumber ( ) > 1 ) { 
 - throw new IllegalArgumentException ( 
 - " Multi thread mode for Checker module is not implemented " ) ; 
 - } 
 - if ( TREE _ WALKER _ MODULE _ NAME . equals ( name ) 
 - & & getTreeWalkerThreadsNumber ( ) > 1 ) { 
 - throw new IllegalArgumentException ( 
 - " Multi thread mode for TreeWalker module is not implemented " ) ; 
 + if ( checkerThreadsNumber > 1 ) { 
 + if ( CHECKER _ MODULE _ NAME . equals ( name ) ) { 
 + throw new IllegalArgumentException ( 
 + " Multi thread mode for Checker module is not implemented " ) ; 
 + } 
 + if ( TREE _ WALKER _ MODULE _ NAME . equals ( name ) ) { 
 + throw new IllegalArgumentException ( 
 + " Multi thread mode for TreeWalker module is not implemented " ) ; 
 + } 
 } 
 
 return name ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 index 0f77800 . . 54541f0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 @ @ - 171 , 6 + 171 , 6 @ @ public abstract class AbstractFileSetCheck 
 protected final void fireErrors ( String fileName ) { 
 final SortedSet < LocalizedMessage > errors = new TreeSet < > ( messageCollector ) ; 
 messageCollector . clear ( ) ; 
 - getMessageDispatcher ( ) . fireErrors ( fileName , errors ) ; 
 + messageDispatcher . fireErrors ( fileName , errors ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 index 91766f3 . . ea61718 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 @ @ - 271 , 7 + 271 , 7 @ @ public class AutomaticBean 
 throws CheckstyleException { 
 if ( childConf ! = null ) { 
 throw new CheckstyleException ( childConf . getName ( ) + " is not allowed as a child in " 
 - + getConfiguration ( ) . getName ( ) + " . Please review ' Parent Module ' section " 
 + + configuration . getName ( ) + " . Please review ' Parent Module ' section " 
 + " for this Check in web documentation if Check is standard . " ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 index 6fb4b99 . . c8ae67d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 @ @ - 421 , 10 + 421 , 10 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { 
 * child count for the current DetailAST instance . 
 * / 
 private void clearBranchTokenTypes ( ) { 
 - DetailAST prevParent = getParent ( ) ; 
 + DetailAST prevParent = parent ; 
 while ( prevParent ! = null ) { 
 prevParent . branchTokenTypes = null ; 
 - prevParent = prevParent . getParent ( ) ; 
 + prevParent = prevParent . parent ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FileContentsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FileContentsHolder . java 
 index 059ac5d . . ed33e7d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FileContentsHolder . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FileContentsHolder . java 
 @ @ - 48 , 6 + 48 , 7 @ @ public class FileContentsHolder extends AbstractCheck { 
 * Returns content of current file . 
 * @ return the current file contents . 
 * @ deprecated use getCurrentFileContents ( ) instead . 
 + * @ noinspection CallToSimpleGetterFromWithinClass 
 * / 
 @ Deprecated 
 public static FileContents getContents ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 7c1dbef . . deb0cc9 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 314 , 8 + 314 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 / / create file that should throw exception 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final FileText fileText = new FileText ( file , new ArrayList < > ( ) ) ; 
 - final List < String > lines = new ArrayList < > ( ) ; 
 - lines . add ( " class a % $ # { } " ) ; 
 
 treeWalker . processFiltered ( file , fileText ) ; 
 final Collection < Checks > checks = 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 index 386df36 . . 8700002 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 @ @ - 27 , 9 + 27 , 6 @ @ import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 
 - import java . util . HashMap ; 
 - import java . util . Map ; 
 - 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 @ @ - 47 , 8 + 44 , 6 @ @ public class GenericWhitespaceCheckTest 
 @ Before 
 public void setUp ( ) { 
 checkConfig = createCheckConfig ( GenericWhitespaceCheck . class ) ; 
 - final Map < Class < ? > , Integer > x = new HashMap < > ( ) ; 
 - x . entrySet ( ) . forEach ( Map . Entry : : getValue ) ; 
 } 
 
 @ Override
