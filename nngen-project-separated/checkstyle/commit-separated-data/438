BLEU SCORE: 0.06285596338261261

TEST MSG: Issue # 5057 : fixed xml violations / exceptions with file started / finished
GENERATED MSG: Issue # 4607 : Added moduleId to violation messages

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> index 86587bf . . 10037c5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> @ @ - 121 , 8 + 121 , 6 @ @ public class XMLLogger <nl> <nl> @ Override <nl> public void auditFinished ( AuditEvent event ) { <nl> - fileMessages . forEach ( this : : writeFileMessages ) ; <nl> - <nl> writer . println ( " < / checkstyle > " ) ; <nl> if ( closeStream ) { <nl> writer . close ( ) ; <nl> @ @ - 186 , 14 + 184 , 13 @ @ public class XMLLogger <nl> public void addError ( AuditEvent event ) { <nl> if ( event . getSeverityLevel ( ) ! = SeverityLevel . IGNORE ) { <nl> final String fileName = event . getFileName ( ) ; <nl> - if ( fileName = = null ) { <nl> + if ( fileName = = null | | ! fileMessages . containsKey ( fileName ) ) { <nl> synchronized ( writerLock ) { <nl> writeFileError ( event ) ; <nl> } <nl> } <nl> else { <nl> - final FileMessages messages = fileMessages . computeIfAbsent ( <nl> - fileName , name - > new FileMessages ( ) ) ; <nl> + final FileMessages messages = fileMessages . get ( fileName ) ; <nl> messages . addError ( event ) ; <nl> } <nl> } <nl> @ @ - 227 , 14 + 224 , 13 @ @ public class XMLLogger <nl> @ Override <nl> public void addException ( AuditEvent event , Throwable throwable ) { <nl> final String fileName = event . getFileName ( ) ; <nl> - if ( fileName = = null ) { <nl> + if ( fileName = = null | | ! fileMessages . containsKey ( fileName ) ) { <nl> synchronized ( writerLock ) { <nl> writeException ( throwable ) ; <nl> } <nl> } <nl> else { <nl> - final FileMessages messages = fileMessages . computeIfAbsent ( <nl> - fileName , name - > new FileMessages ( ) ) ; <nl> + final FileMessages messages = fileMessages . get ( fileName ) ; <nl> messages . addException ( throwable ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> index c52d109 . . 76601ae 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ import com . puppycrawl . tools . checkstyle . Definitions ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> + import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 325 , 8 + 326 , 11 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> * @ param fileName file name . <nl> * / <nl> private void logMissingTranslation ( String filePath , String fileName ) { <nl> + final MessageDispatcher dispatcher = getMessageDispatcher ( ) ; <nl> + dispatcher . fireFileStarted ( filePath ) ; <nl> log ( 0 , MSG _ KEY _ MISSING _ TRANSLATION _ FILE , fileName ) ; <nl> fireErrors ( filePath ) ; <nl> + dispatcher . fireFileFinished ( filePath ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 453 , 6 + 457 , 9 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> private void checkFilesForConsistencyRegardingTheirKeys ( SetMultimap < File , String > fileKeys , <nl> Set < String > keysThatMustExist ) { <nl> for ( File currentFile : fileKeys . keySet ( ) ) { <nl> + final MessageDispatcher dispatcher = getMessageDispatcher ( ) ; <nl> + final String path = currentFile . getPath ( ) ; <nl> + dispatcher . fireFileStarted ( path ) ; <nl> final Set < String > currentFileKeys = fileKeys . get ( currentFile ) ; <nl> final Set < String > missingKeys = keysThatMustExist . stream ( ) <nl> . filter ( e - > ! currentFileKeys . contains ( e ) ) . collect ( Collectors . toSet ( ) ) ; <nl> @ @ - 461 , 9 + 468 , 8 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> log ( 0 , MSG _ KEY , key ) ; <nl> } <nl> } <nl> - final String path = currentFile . getPath ( ) ; <nl> fireErrors ( path ) ; <nl> - getMessageDispatcher ( ) . fireFileFinished ( path ) ; <nl> + dispatcher . fireFileFinished ( path ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractXmlTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractXmlTestSupport . java <nl> index 75973d2 . . 9387ec2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractXmlTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractXmlTestSupport . java <nl> @ @ - 117 , 17 + 117 , 19 @ @ public abstract class AbstractXmlTestSupport extends AbstractModuleTestSupport { <nl> private static void verifyXmlNode ( Node expected , Node actual , String path , <nl> BiPredicate < Node , Node > ordered ) { <nl> if ( expected = = null ) { <nl> - Assert . assertNull ( " no node should exist : " + path , actual ) ; <nl> + if ( actual ! = null ) { <nl> + Assert . fail ( " no node should exist : " + path + actual . getNodeName ( ) + " / " ) ; <nl> + } <nl> } <nl> else { <nl> - Assert . assertNotNull ( " node should exist : " + path , actual ) ; <nl> - Assert . assertEquals ( " node should have same name : " + path , expected . getNodeName ( ) , <nl> + final String newPath = path + expected . getNodeName ( ) + " / " ; <nl> + <nl> + Assert . assertNotNull ( " node should exist : " + newPath , actual ) ; <nl> + Assert . assertEquals ( " node should have same name : " + newPath , expected . getNodeName ( ) , <nl> actual . getNodeName ( ) ) ; <nl> - Assert . assertEquals ( " node should have same type : " + path , expected . getNodeType ( ) , <nl> + Assert . assertEquals ( " node should have same type : " + newPath , expected . getNodeType ( ) , <nl> actual . getNodeType ( ) ) ; <nl> <nl> - final String newPath = path + expected . getNodeName ( ) + " / " ; <nl> - <nl> verifyXmlAttributes ( expected . getAttributes ( ) , actual . getAttributes ( ) , newPath ) ; <nl> <nl> verifyXmlNodes ( expected , actual , newPath , ordered ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> index 5d3a7ff . . cfb1435 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> @ @ - 146 , 6 + 146 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> logger . auditStarted ( null ) ; <nl> final AuditEvent ev = new AuditEvent ( this , " Test . java " ) ; <nl> logger . fileStarted ( ev ) ; <nl> + logger . fileFinished ( ev ) ; <nl> logger . auditFinished ( null ) ; <nl> verifyXml ( getPath ( " ExpectedXMLLogger . xml " ) , outStream ) ; <nl> } <nl> @ @ - 170 , 7 + 171 , 9 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> " messages . properties " , " key " , null , SeverityLevel . ERROR , null , <nl> getClass ( ) , null ) ; <nl> final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; <nl> + logger . fileStarted ( ev ) ; <nl> logger . addError ( ev ) ; <nl> + logger . fileFinished ( ev ) ; <nl> logger . auditFinished ( null ) ; <nl> verifyXml ( getPath ( " ExpectedXMLLoggerError . xml " ) , outStream , message . getMessage ( ) ) ; <nl> } <nl> @ @ - 213 , 7 + 216 , 9 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> " messages . properties " , " key " , null , SeverityLevel . ERROR , null , <nl> getClass ( ) , null ) ; <nl> final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; <nl> + logger . fileStarted ( ev ) ; <nl> logger . addError ( ev ) ; <nl> + logger . fileFinished ( ev ) ; <nl> logger . auditFinished ( null ) ; <nl> verifyXml ( getPath ( " ExpectedXMLLoggerErrorZeroColumn . xml " ) , outStream , <nl> message . getMessage ( ) ) ; <nl> @ @ - 278 , 8 + 283 , 9 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; <nl> logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; <nl> <nl> + logger . fileFinished ( ev ) ; <nl> logger . auditFinished ( null ) ; <nl> - verifyXml ( getPath ( " ExpectedXMLLoggerException . xml " ) , outStream ) ; <nl> + verifyXml ( getPath ( " ExpectedXMLLoggerException2 . xml " ) , outStream ) ; <nl> assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; <nl> } <nl> <nl> @ @ - 296 , 7 + 302 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> final AuditEvent fileFinishedEvent = new AuditEvent ( this , " Test . java " ) ; <nl> logger . fileFinished ( fileFinishedEvent ) ; <nl> logger . auditFinished ( null ) ; <nl> - verifyXml ( getPath ( " ExpectedXMLLoggerException . xml " ) , outStream ) ; <nl> + verifyXml ( getPath ( " ExpectedXMLLoggerException3 . xml " ) , outStream ) ; <nl> assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; <nl> } <nl> <nl> @ @ - 315 , 7 + 321 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> final AuditEvent fileFinishedEvent = new AuditEvent ( this , " Test . java " ) ; <nl> logger . fileFinished ( fileFinishedEvent ) ; <nl> logger . auditFinished ( null ) ; <nl> - verifyXml ( getPath ( " ExpectedXMLLoggerException . xml " ) , outStream ) ; <nl> + verifyXml ( getPath ( " ExpectedXMLLoggerException2 . xml " ) , outStream ) ; <nl> assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; <nl> } <nl> <nl> @ @ - 333 , 6 + 339 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> final AuditEvent errorEvent = new AuditEvent ( this , " Test . java " , message ) ; <nl> logger . addError ( errorEvent ) ; <nl> <nl> + logger . fileFinished ( errorEvent ) ; <nl> logger . auditFinished ( null ) ; <nl> verifyXml ( getPath ( " ExpectedXMLLoggerError . xml " ) , outStream , message . getMessage ( ) ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerErrorModuleId . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerErrorModuleId . xml <nl> index dc78a6d . . cd3bec8 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerErrorModuleId . xml <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerErrorModuleId . xml <nl> @ @ - 1 , 6 + 1 , 4 @ @ <nl> < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> < checkstyle version = " " > <nl> - < file name = " Test . java " > <nl> < error line = " 1 " column = " 1 " severity = " error " message = " $ 0 " source = " module " / > <nl> - < / file > <nl> < / checkstyle > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException . xml <nl> index 9f125a0 . . 0a5b431 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException . xml <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException . xml <nl> @ @ - 1 , 6 + 1 , 4 @ @ <nl> < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> < checkstyle version = " " > <nl> - < file name = " Test . java " > <nl> & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; & # 10 ; & lt ; / exception & gt ; & # 10 ; <nl> - < / file > <nl> < / checkstyle > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException2 . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException2 . xml <nl> new file mode 100644 <nl> index 0000000 . . 9f125a0 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException2 . xml <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < checkstyle version = " " > <nl> + < file name = " Test . java " > <nl> + & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; & # 10 ; & lt ; / exception & gt ; & # 10 ; <nl> + < / file > <nl> + < / checkstyle > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException3 . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException3 . xml <nl> new file mode 100644 <nl> index 0000000 . . a28d515 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException3 . xml <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < checkstyle version = " " > <nl> + & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; & # 10 ; & lt ; / exception & gt ; & # 10 ; <nl> + < file name = " Test . java " > <nl> + < / file > <nl> + < / checkstyle >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 6daece9 . . feef8b2 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1660 , 7 + 1660 , 7 @ @ <nl> < param > com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheckTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . annotation . SuppressWarningsCheckTest < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 99 < / mutationThreshold > <nl> + < mutationThreshold > 100 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> index 6034153 . . c9b6f18 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> @ @ - 242 , 7 + 242 , 7 @ @ public final class MissingDeprecatedCheck extends AbstractCheck { <nl> <nl> boolean found = false ; <nl> int reindex = index + 1 ; <nl> - while ( reindex < lines . length ) { <nl> + while ( reindex < = lines . length - 1 ) { <nl> final Matcher multilineCont = MATCH _ DEPRECATED _ MULTILINE _ CONT . matcher ( lines [ reindex ] ) ; <nl> <nl> if ( multilineCont . find ( ) ) {

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 index 86587bf . . 10037c5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 @ @ - 121 , 8 + 121 , 6 @ @ public class XMLLogger 
 
 @ Override 
 public void auditFinished ( AuditEvent event ) { 
 - fileMessages . forEach ( this : : writeFileMessages ) ; 
 - 
 writer . println ( " < / checkstyle > " ) ; 
 if ( closeStream ) { 
 writer . close ( ) ; 
 @ @ - 186 , 14 + 184 , 13 @ @ public class XMLLogger 
 public void addError ( AuditEvent event ) { 
 if ( event . getSeverityLevel ( ) ! = SeverityLevel . IGNORE ) { 
 final String fileName = event . getFileName ( ) ; 
 - if ( fileName = = null ) { 
 + if ( fileName = = null | | ! fileMessages . containsKey ( fileName ) ) { 
 synchronized ( writerLock ) { 
 writeFileError ( event ) ; 
 } 
 } 
 else { 
 - final FileMessages messages = fileMessages . computeIfAbsent ( 
 - fileName , name - > new FileMessages ( ) ) ; 
 + final FileMessages messages = fileMessages . get ( fileName ) ; 
 messages . addError ( event ) ; 
 } 
 } 
 @ @ - 227 , 14 + 224 , 13 @ @ public class XMLLogger 
 @ Override 
 public void addException ( AuditEvent event , Throwable throwable ) { 
 final String fileName = event . getFileName ( ) ; 
 - if ( fileName = = null ) { 
 + if ( fileName = = null | | ! fileMessages . containsKey ( fileName ) ) { 
 synchronized ( writerLock ) { 
 writeException ( throwable ) ; 
 } 
 } 
 else { 
 - final FileMessages messages = fileMessages . computeIfAbsent ( 
 - fileName , name - > new FileMessages ( ) ) ; 
 + final FileMessages messages = fileMessages . get ( fileName ) ; 
 messages . addException ( throwable ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 index c52d109 . . 76601ae 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 @ @ - 47 , 6 + 47 , 7 @ @ import com . puppycrawl . tools . checkstyle . Definitions ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 + import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 325 , 8 + 326 , 11 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 * @ param fileName file name . 
 * / 
 private void logMissingTranslation ( String filePath , String fileName ) { 
 + final MessageDispatcher dispatcher = getMessageDispatcher ( ) ; 
 + dispatcher . fireFileStarted ( filePath ) ; 
 log ( 0 , MSG _ KEY _ MISSING _ TRANSLATION _ FILE , fileName ) ; 
 fireErrors ( filePath ) ; 
 + dispatcher . fireFileFinished ( filePath ) ; 
 } 
 
 / * * 
 @ @ - 453 , 6 + 457 , 9 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 private void checkFilesForConsistencyRegardingTheirKeys ( SetMultimap < File , String > fileKeys , 
 Set < String > keysThatMustExist ) { 
 for ( File currentFile : fileKeys . keySet ( ) ) { 
 + final MessageDispatcher dispatcher = getMessageDispatcher ( ) ; 
 + final String path = currentFile . getPath ( ) ; 
 + dispatcher . fireFileStarted ( path ) ; 
 final Set < String > currentFileKeys = fileKeys . get ( currentFile ) ; 
 final Set < String > missingKeys = keysThatMustExist . stream ( ) 
 . filter ( e - > ! currentFileKeys . contains ( e ) ) . collect ( Collectors . toSet ( ) ) ; 
 @ @ - 461 , 9 + 468 , 8 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 log ( 0 , MSG _ KEY , key ) ; 
 } 
 } 
 - final String path = currentFile . getPath ( ) ; 
 fireErrors ( path ) ; 
 - getMessageDispatcher ( ) . fireFileFinished ( path ) ; 
 + dispatcher . fireFileFinished ( path ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractXmlTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractXmlTestSupport . java 
 index 75973d2 . . 9387ec2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractXmlTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractXmlTestSupport . java 
 @ @ - 117 , 17 + 117 , 19 @ @ public abstract class AbstractXmlTestSupport extends AbstractModuleTestSupport { 
 private static void verifyXmlNode ( Node expected , Node actual , String path , 
 BiPredicate < Node , Node > ordered ) { 
 if ( expected = = null ) { 
 - Assert . assertNull ( " no node should exist : " + path , actual ) ; 
 + if ( actual ! = null ) { 
 + Assert . fail ( " no node should exist : " + path + actual . getNodeName ( ) + " / " ) ; 
 + } 
 } 
 else { 
 - Assert . assertNotNull ( " node should exist : " + path , actual ) ; 
 - Assert . assertEquals ( " node should have same name : " + path , expected . getNodeName ( ) , 
 + final String newPath = path + expected . getNodeName ( ) + " / " ; 
 + 
 + Assert . assertNotNull ( " node should exist : " + newPath , actual ) ; 
 + Assert . assertEquals ( " node should have same name : " + newPath , expected . getNodeName ( ) , 
 actual . getNodeName ( ) ) ; 
 - Assert . assertEquals ( " node should have same type : " + path , expected . getNodeType ( ) , 
 + Assert . assertEquals ( " node should have same type : " + newPath , expected . getNodeType ( ) , 
 actual . getNodeType ( ) ) ; 
 
 - final String newPath = path + expected . getNodeName ( ) + " / " ; 
 - 
 verifyXmlAttributes ( expected . getAttributes ( ) , actual . getAttributes ( ) , newPath ) ; 
 
 verifyXmlNodes ( expected , actual , newPath , ordered ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 index 5d3a7ff . . cfb1435 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 @ @ - 146 , 6 + 146 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { 
 logger . auditStarted ( null ) ; 
 final AuditEvent ev = new AuditEvent ( this , " Test . java " ) ; 
 logger . fileStarted ( ev ) ; 
 + logger . fileFinished ( ev ) ; 
 logger . auditFinished ( null ) ; 
 verifyXml ( getPath ( " ExpectedXMLLogger . xml " ) , outStream ) ; 
 } 
 @ @ - 170 , 7 + 171 , 9 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { 
 " messages . properties " , " key " , null , SeverityLevel . ERROR , null , 
 getClass ( ) , null ) ; 
 final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; 
 + logger . fileStarted ( ev ) ; 
 logger . addError ( ev ) ; 
 + logger . fileFinished ( ev ) ; 
 logger . auditFinished ( null ) ; 
 verifyXml ( getPath ( " ExpectedXMLLoggerError . xml " ) , outStream , message . getMessage ( ) ) ; 
 } 
 @ @ - 213 , 7 + 216 , 9 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { 
 " messages . properties " , " key " , null , SeverityLevel . ERROR , null , 
 getClass ( ) , null ) ; 
 final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; 
 + logger . fileStarted ( ev ) ; 
 logger . addError ( ev ) ; 
 + logger . fileFinished ( ev ) ; 
 logger . auditFinished ( null ) ; 
 verifyXml ( getPath ( " ExpectedXMLLoggerErrorZeroColumn . xml " ) , outStream , 
 message . getMessage ( ) ) ; 
 @ @ - 278 , 8 + 283 , 9 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { 
 final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; 
 logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; 
 
 + logger . fileFinished ( ev ) ; 
 logger . auditFinished ( null ) ; 
 - verifyXml ( getPath ( " ExpectedXMLLoggerException . xml " ) , outStream ) ; 
 + verifyXml ( getPath ( " ExpectedXMLLoggerException2 . xml " ) , outStream ) ; 
 assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; 
 } 
 
 @ @ - 296 , 7 + 302 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { 
 final AuditEvent fileFinishedEvent = new AuditEvent ( this , " Test . java " ) ; 
 logger . fileFinished ( fileFinishedEvent ) ; 
 logger . auditFinished ( null ) ; 
 - verifyXml ( getPath ( " ExpectedXMLLoggerException . xml " ) , outStream ) ; 
 + verifyXml ( getPath ( " ExpectedXMLLoggerException3 . xml " ) , outStream ) ; 
 assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; 
 } 
 
 @ @ - 315 , 7 + 321 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { 
 final AuditEvent fileFinishedEvent = new AuditEvent ( this , " Test . java " ) ; 
 logger . fileFinished ( fileFinishedEvent ) ; 
 logger . auditFinished ( null ) ; 
 - verifyXml ( getPath ( " ExpectedXMLLoggerException . xml " ) , outStream ) ; 
 + verifyXml ( getPath ( " ExpectedXMLLoggerException2 . xml " ) , outStream ) ; 
 assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; 
 } 
 
 @ @ - 333 , 6 + 339 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { 
 final AuditEvent errorEvent = new AuditEvent ( this , " Test . java " , message ) ; 
 logger . addError ( errorEvent ) ; 
 
 + logger . fileFinished ( errorEvent ) ; 
 logger . auditFinished ( null ) ; 
 verifyXml ( getPath ( " ExpectedXMLLoggerError . xml " ) , outStream , message . getMessage ( ) ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerErrorModuleId . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerErrorModuleId . xml 
 index dc78a6d . . cd3bec8 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerErrorModuleId . xml 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerErrorModuleId . xml 
 @ @ - 1 , 6 + 1 , 4 @ @ 
 < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 < checkstyle version = " " > 
 - < file name = " Test . java " > 
 < error line = " 1 " column = " 1 " severity = " error " message = " $ 0 " source = " module " / > 
 - < / file > 
 < / checkstyle > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException . xml 
 index 9f125a0 . . 0a5b431 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException . xml 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException . xml 
 @ @ - 1 , 6 + 1 , 4 @ @ 
 < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 < checkstyle version = " " > 
 - < file name = " Test . java " > 
 & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; & # 10 ; & lt ; / exception & gt ; & # 10 ; 
 - < / file > 
 < / checkstyle > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException2 . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException2 . xml 
 new file mode 100644 
 index 0000000 . . 9f125a0 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException2 . xml 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < checkstyle version = " " > 
 + < file name = " Test . java " > 
 + & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; & # 10 ; & lt ; / exception & gt ; & # 10 ; 
 + < / file > 
 + < / checkstyle > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException3 . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException3 . xml 
 new file mode 100644 
 index 0000000 . . a28d515 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / xmllogger / ExpectedXMLLoggerException3 . xml 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < checkstyle version = " " > 
 + & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; & # 10 ; & lt ; / exception & gt ; & # 10 ; 
 + < file name = " Test . java " > 
 + < / file > 
 + < / checkstyle >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 6daece9 . . feef8b2 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1660 , 7 + 1660 , 7 @ @ 
 < param > com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheckTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . annotation . SuppressWarningsCheckTest < / param > 
 < / targetTests > 
 - < mutationThreshold > 99 < / mutationThreshold > 
 + < mutationThreshold > 100 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 index 6034153 . . c9b6f18 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 @ @ - 242 , 7 + 242 , 7 @ @ public final class MissingDeprecatedCheck extends AbstractCheck { 
 
 boolean found = false ; 
 int reindex = index + 1 ; 
 - while ( reindex < lines . length ) { 
 + while ( reindex < = lines . length - 1 ) { 
 final Matcher multilineCont = MATCH _ DEPRECATED _ MULTILINE _ CONT . matcher ( lines [ reindex ] ) ; 
 
 if ( multilineCont . find ( ) ) {
