BLEU SCORE: 0.033864985683445356

TEST MSG: Issue # 2836 : added UT for testing check ' s messages
GENERATED MSG: added TreeViewer to help with development .

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index 48b5b2d . . 9a6246a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . internal ; <nl> <nl> + import java . lang . reflect . Field ; <nl> + import java . lang . reflect . Modifier ; <nl> import java . util . Arrays ; <nl> import java . util . HashSet ; <nl> import java . util . Locale ; <nl> @ @ - 163 , 6 + 165 , 43 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void testAllCheckstyleModulesHaveMessage ( ) throws Exception { <nl> + for ( Class < ? > module : CheckUtil . getCheckstyleChecks ( ) ) { <nl> + Assert . assertFalse ( module . getSimpleName ( ) <nl> + + " should have atleast one ' MSG _ * ' field for error messages " , CheckUtil <nl> + . getCheckMessages ( module ) . isEmpty ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testAllCheckstyleMessages ( ) throws Exception { <nl> + for ( Class < ? > module : CheckUtil . getCheckstyleChecks ( ) ) { <nl> + for ( Field message : CheckUtil . getCheckMessages ( module ) ) { <nl> + Assert . assertEquals ( module . getSimpleName ( ) + " . " + message . getName ( ) <nl> + + " should be ' public static final ' " , Modifier . PUBLIC | Modifier . STATIC <nl> + | Modifier . FINAL , message . getModifiers ( ) ) ; <nl> + <nl> + / / below is required for package / private classes <nl> + if ( ! message . isAccessible ( ) ) { <nl> + message . setAccessible ( true ) ; <nl> + } <nl> + <nl> + final String result = CheckUtil . getCheckMessage ( module , message . get ( null ) <nl> + . toString ( ) ) ; <nl> + <nl> + Assert . assertNotNull ( module . getSimpleName ( ) + " should have text for the message ' " <nl> + + message . getName ( ) + " ' " , result ) ; <nl> + Assert . assertFalse ( <nl> + module . getSimpleName ( ) + " should have non - empty text for the message ' " <nl> + + message . getName ( ) + " ' " , result . trim ( ) . isEmpty ( ) ) ; <nl> + Assert . assertFalse ( module . getSimpleName ( ) <nl> + + " should have non - TODO text for the message ' " + message . getName ( ) + " ' " , <nl> + result . trim ( ) . startsWith ( " TODO " ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Checks that an array is a subset of other array . <nl> * @ param array to check whether it is a subset . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> index c7ae422 . . e0f688b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> @ @ - 21 , 9 + 21 , 13 @ @ package com . puppycrawl . tools . checkstyle . internal ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . lang . reflect . Field ; <nl> import java . lang . reflect . Modifier ; <nl> + import java . text . MessageFormat ; <nl> import java . util . Arrays ; <nl> import java . util . HashSet ; <nl> + import java . util . Locale ; <nl> + import java . util . Properties ; <nl> import java . util . Set ; <nl> <nl> import javax . xml . parsers . DocumentBuilder ; <nl> @ @ - 38 , 6 + 42 , 9 @ @ import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . reflect . ClassPath ; <nl> import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; <nl> import com . puppycrawl . tools . checkstyle . api . Filter ; <nl> + import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpMultilineCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpSinglelineCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpSinglelineJavaCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> public final class CheckUtil { <nl> @ @ - 203 , 6 + 210 , 65 @ @ public final class CheckUtil { <nl> & & className . endsWith ( " Filter " ) ; <nl> } <nl> <nl> + / * * <nl> + * Get ' s the check ' s messages . <nl> + * @ param module class to examine . <nl> + * @ return a set of checkstyle ' s module message fields . <nl> + * @ throws ClassNotFoundException if the attempt to read a protected class fails . <nl> + * / <nl> + public static Set < Field > getCheckMessages ( Class < ? > module ) throws ClassNotFoundException { <nl> + final Set < Field > checkstyleMessages = new HashSet < > ( ) ; <nl> + <nl> + / / get all fields from current class <nl> + final Field [ ] fields = module . getDeclaredFields ( ) ; <nl> + <nl> + for ( Field field : fields ) { <nl> + if ( field . getName ( ) . startsWith ( " MSG _ " ) ) { <nl> + checkstyleMessages . add ( field ) ; <nl> + } <nl> + } <nl> + <nl> + / / deep scan class through hierarchy <nl> + final Class < ? > superModule = module . getSuperclass ( ) ; <nl> + <nl> + if ( superModule ! = null ) { <nl> + checkstyleMessages . addAll ( getCheckMessages ( superModule ) ) ; <nl> + } <nl> + <nl> + / / special cases that require additional classes <nl> + if ( module = = RegexpMultilineCheck . class ) { <nl> + checkstyleMessages . addAll ( getCheckMessages ( Class <nl> + . forName ( " com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector " ) ) ) ; <nl> + } <nl> + else if ( module = = RegexpSinglelineCheck . class <nl> + | | module = = RegexpSinglelineJavaCheck . class ) { <nl> + checkstyleMessages . addAll ( getCheckMessages ( Class <nl> + . forName ( " com . puppycrawl . tools . checkstyle . checks . regexp . SinglelineDetector " ) ) ) ; <nl> + } <nl> + <nl> + return checkstyleMessages ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets the check message ' as is ' from appropriate ' messages . properties ' <nl> + * file . <nl> + * <nl> + * @ param messageKey the key of message in ' messages . properties ' file . <nl> + * @ param arguments the arguments of message in ' messages . properties ' file . <nl> + * @ return the check ' s formatted message . <nl> + * / <nl> + public static String getCheckMessage ( Class < ? > module , String messageKey , Object . . . arguments ) { <nl> + final Properties pr = new Properties ( ) ; <nl> + try { <nl> + pr . load ( module . getResourceAsStream ( " messages . properties " ) ) ; <nl> + } <nl> + catch ( IOException ex ) { <nl> + return null ; <nl> + } <nl> + final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , Locale . ROOT ) ; <nl> + return formatter . format ( arguments ) ; <nl> + } <nl> + <nl> public static String getTokenText ( int [ ] tokens , int . . . subtractions ) { <nl> if ( Arrays . equals ( tokens , TokenUtils . getAllTokenIds ( ) ) & & subtractions . length = = 0 ) { <nl> return " TokenTypes . " ;
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java <nl> index 15d8f6f . . ef49a07 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java <nl> @ @ - 229 , 9 + 229 , 6 @ @ class Verifier <nl> * * / <nl> void verifyMethod ( MethodSignature aSig ) <nl> { <nl> - / / Always check that the order of modifiers follows the JLS suggestion <nl> - checkModOrder ( aSig . getModSet ( ) ) ; <nl> - <nl> / / Check for to many parameters <nl> if ( aSig . getParams ( ) . size ( ) > mConfig . getMaxParameters ( ) ) { <nl> mMessages . add ( aSig . getFirstLineNo ( ) , <nl> @ @ - 287 , 9 + 284 , 6 @ @ class Verifier <nl> * * / <nl> void verifyType ( MyModifierSet aMods , MyCommonAST aType ) <nl> { <nl> - / / Always check that the order of modifiers follows the JLS suggestion <nl> - checkModOrder ( aMods ) ; <nl> - <nl> / / <nl> / / Only Javadoc testing below <nl> / / <nl> @ @ - 349 , 9 + 343 , 6 @ @ class Verifier <nl> final Scope variableScope = <nl> inInterfaceBlock ( ) ? Scope . PUBLIC : declaredScope ; <nl> <nl> - / / Always check that the order of modifiers follows the JLS suggestion <nl> - checkModOrder ( mods ) ; <nl> - <nl> if ( inCheckScope ( variableScope ) <nl> & & ( getJavadocBefore ( aVar . getStartLineNo ( ) - 1 ) = = null ) ) <nl> { <nl> @ @ - 1339 , 21 + 1330 , 6 @ @ class Verifier <nl> <nl> <nl> / * * <nl> - * checks if the order of modifiers follows the suggestions <nl> - * in the JLS and logs an error message accordingly . <nl> - * <nl> - * @ param aModSet the set of modifiers <nl> - * / <nl> - private void checkModOrder ( MyModifierSet aModSet ) <nl> - { <nl> - final MyCommonAST error = aModSet . checkOrderSuggestedByJLS ( ) ; <nl> - if ( error ! = null ) { <nl> - mMessages . add ( error . getLineNo ( ) , error . getColumnNo ( ) , <nl> - " mod . order " , error . getText ( ) ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> * @ return the class name from a fully qualified name <nl> * @ param aType the fully qualified name <nl> * / <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ModifierCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ModifierCheck . java <nl> index 6360184 . . 7ebed25 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ModifierCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ModifierCheck . java <nl> @ @ - 61 , 7 + 61 , 8 @ @ public class ModifierCheck <nl> if ( ! mods . isEmpty ( ) ) { <nl> final DetailAST error = checkOrderSuggestedByJLS ( mods ) ; <nl> if ( error ! = null ) { <nl> - log ( error . getLineNo ( ) , " OUT OF ORDER " + error . getText ( ) ) ; <nl> + log ( error . getLineNo ( ) , error . getColumnNo ( ) , <nl> + " mod . order " , error . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 7211c59 . . 2975781 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 512 , 20 + 512 , 6 @ @ public class CheckerTest <nl> verify ( c , filepath , expected ) ; <nl> } <nl> <nl> - public void testModifierChecks ( ) <nl> - throws Exception <nl> - { <nl> - final Checker c = createChecker ( ) ; <nl> - final String filepath = getPath ( " InputModifier . java " ) ; <nl> - assertNotNull ( c ) ; <nl> - final String [ ] expected = { <nl> - filepath + " : 14 : 10 : ' final ' modifier out of order with the JLS suggestions . " , <nl> - filepath + " : 18 : 12 : ' private ' modifier out of order with the JLS suggestions . " , <nl> - filepath + " : 24 : 14 : ' private ' modifier out of order with the JLS suggestions . " , <nl> - } ; <nl> - verify ( c , filepath , expected ) ; <nl> - } <nl> - <nl> public void testStrictJavadoc ( ) <nl> throws Exception <nl> { <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / ModifierCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / ModifierCheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . 6cecc5d <nl> - - - / dev / null <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / ModifierCheckTest . java <nl> @ @ - 0 , 0 + 1 , 28 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . ModifierCheck ; <nl> + <nl> + public class ModifierCheckTest <nl> + extends BaseCheckTestCase <nl> + { <nl> + public ModifierCheckTest ( String aName ) <nl> + { <nl> + super ( aName ) ; <nl> + } <nl> + <nl> + public void testIt ( ) throws Exception <nl> + { <nl> + final CheckConfiguration checkConfig = new CheckConfiguration ( ) ; <nl> + checkConfig . setClassname ( ModifierCheck . class . getName ( ) ) ; <nl> + final Checker c = createChecker ( checkConfig ) ; <nl> + final String filepath = getPath ( " InputModifier . java " ) ; <nl> + assertNotNull ( c ) ; <nl> + final String [ ] expected = { <nl> + " 14 : 10 : ' final ' modifier out of order with the JLS suggestions . " , <nl> + " 18 : 12 : ' private ' modifier out of order with the JLS suggestions . " , <nl> + " 24 : 14 : ' private ' modifier out of order with the JLS suggestions . " , <nl> + } ; <nl> + verify ( c , filepath , expected ) ; <nl> + <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index 48b5b2d . . 9a6246a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package com . puppycrawl . tools . checkstyle . internal ; 
 
 + import java . lang . reflect . Field ; 
 + import java . lang . reflect . Modifier ; 
 import java . util . Arrays ; 
 import java . util . HashSet ; 
 import java . util . Locale ; 
 @ @ - 163 , 6 + 165 , 43 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 } 
 } 
 
 + @ Test 
 + public void testAllCheckstyleModulesHaveMessage ( ) throws Exception { 
 + for ( Class < ? > module : CheckUtil . getCheckstyleChecks ( ) ) { 
 + Assert . assertFalse ( module . getSimpleName ( ) 
 + + " should have atleast one ' MSG _ * ' field for error messages " , CheckUtil 
 + . getCheckMessages ( module ) . isEmpty ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testAllCheckstyleMessages ( ) throws Exception { 
 + for ( Class < ? > module : CheckUtil . getCheckstyleChecks ( ) ) { 
 + for ( Field message : CheckUtil . getCheckMessages ( module ) ) { 
 + Assert . assertEquals ( module . getSimpleName ( ) + " . " + message . getName ( ) 
 + + " should be ' public static final ' " , Modifier . PUBLIC | Modifier . STATIC 
 + | Modifier . FINAL , message . getModifiers ( ) ) ; 
 + 
 + / / below is required for package / private classes 
 + if ( ! message . isAccessible ( ) ) { 
 + message . setAccessible ( true ) ; 
 + } 
 + 
 + final String result = CheckUtil . getCheckMessage ( module , message . get ( null ) 
 + . toString ( ) ) ; 
 + 
 + Assert . assertNotNull ( module . getSimpleName ( ) + " should have text for the message ' " 
 + + message . getName ( ) + " ' " , result ) ; 
 + Assert . assertFalse ( 
 + module . getSimpleName ( ) + " should have non - empty text for the message ' " 
 + + message . getName ( ) + " ' " , result . trim ( ) . isEmpty ( ) ) ; 
 + Assert . assertFalse ( module . getSimpleName ( ) 
 + + " should have non - TODO text for the message ' " + message . getName ( ) + " ' " , 
 + result . trim ( ) . startsWith ( " TODO " ) ) ; 
 + } 
 + } 
 + } 
 + 
 / * * 
 * Checks that an array is a subset of other array . 
 * @ param array to check whether it is a subset . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 index c7ae422 . . e0f688b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 @ @ - 21 , 9 + 21 , 13 @ @ package com . puppycrawl . tools . checkstyle . internal ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . lang . reflect . Field ; 
 import java . lang . reflect . Modifier ; 
 + import java . text . MessageFormat ; 
 import java . util . Arrays ; 
 import java . util . HashSet ; 
 + import java . util . Locale ; 
 + import java . util . Properties ; 
 import java . util . Set ; 
 
 import javax . xml . parsers . DocumentBuilder ; 
 @ @ - 38 , 6 + 42 , 9 @ @ import com . google . common . collect . ImmutableSet ; 
 import com . google . common . reflect . ClassPath ; 
 import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; 
 import com . puppycrawl . tools . checkstyle . api . Filter ; 
 + import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpMultilineCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpSinglelineCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpSinglelineJavaCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 public final class CheckUtil { 
 @ @ - 203 , 6 + 210 , 65 @ @ public final class CheckUtil { 
 & & className . endsWith ( " Filter " ) ; 
 } 
 
 + / * * 
 + * Get ' s the check ' s messages . 
 + * @ param module class to examine . 
 + * @ return a set of checkstyle ' s module message fields . 
 + * @ throws ClassNotFoundException if the attempt to read a protected class fails . 
 + * / 
 + public static Set < Field > getCheckMessages ( Class < ? > module ) throws ClassNotFoundException { 
 + final Set < Field > checkstyleMessages = new HashSet < > ( ) ; 
 + 
 + / / get all fields from current class 
 + final Field [ ] fields = module . getDeclaredFields ( ) ; 
 + 
 + for ( Field field : fields ) { 
 + if ( field . getName ( ) . startsWith ( " MSG _ " ) ) { 
 + checkstyleMessages . add ( field ) ; 
 + } 
 + } 
 + 
 + / / deep scan class through hierarchy 
 + final Class < ? > superModule = module . getSuperclass ( ) ; 
 + 
 + if ( superModule ! = null ) { 
 + checkstyleMessages . addAll ( getCheckMessages ( superModule ) ) ; 
 + } 
 + 
 + / / special cases that require additional classes 
 + if ( module = = RegexpMultilineCheck . class ) { 
 + checkstyleMessages . addAll ( getCheckMessages ( Class 
 + . forName ( " com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector " ) ) ) ; 
 + } 
 + else if ( module = = RegexpSinglelineCheck . class 
 + | | module = = RegexpSinglelineJavaCheck . class ) { 
 + checkstyleMessages . addAll ( getCheckMessages ( Class 
 + . forName ( " com . puppycrawl . tools . checkstyle . checks . regexp . SinglelineDetector " ) ) ) ; 
 + } 
 + 
 + return checkstyleMessages ; 
 + } 
 + 
 + / * * 
 + * Gets the check message ' as is ' from appropriate ' messages . properties ' 
 + * file . 
 + * 
 + * @ param messageKey the key of message in ' messages . properties ' file . 
 + * @ param arguments the arguments of message in ' messages . properties ' file . 
 + * @ return the check ' s formatted message . 
 + * / 
 + public static String getCheckMessage ( Class < ? > module , String messageKey , Object . . . arguments ) { 
 + final Properties pr = new Properties ( ) ; 
 + try { 
 + pr . load ( module . getResourceAsStream ( " messages . properties " ) ) ; 
 + } 
 + catch ( IOException ex ) { 
 + return null ; 
 + } 
 + final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , Locale . ROOT ) ; 
 + return formatter . format ( arguments ) ; 
 + } 
 + 
 public static String getTokenText ( int [ ] tokens , int . . . subtractions ) { 
 if ( Arrays . equals ( tokens , TokenUtils . getAllTokenIds ( ) ) & & subtractions . length = = 0 ) { 
 return " TokenTypes . " ;

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java 
 index 15d8f6f . . ef49a07 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java 
 @ @ - 229 , 9 + 229 , 6 @ @ class Verifier 
 * * / 
 void verifyMethod ( MethodSignature aSig ) 
 { 
 - / / Always check that the order of modifiers follows the JLS suggestion 
 - checkModOrder ( aSig . getModSet ( ) ) ; 
 - 
 / / Check for to many parameters 
 if ( aSig . getParams ( ) . size ( ) > mConfig . getMaxParameters ( ) ) { 
 mMessages . add ( aSig . getFirstLineNo ( ) , 
 @ @ - 287 , 9 + 284 , 6 @ @ class Verifier 
 * * / 
 void verifyType ( MyModifierSet aMods , MyCommonAST aType ) 
 { 
 - / / Always check that the order of modifiers follows the JLS suggestion 
 - checkModOrder ( aMods ) ; 
 - 
 / / 
 / / Only Javadoc testing below 
 / / 
 @ @ - 349 , 9 + 343 , 6 @ @ class Verifier 
 final Scope variableScope = 
 inInterfaceBlock ( ) ? Scope . PUBLIC : declaredScope ; 
 
 - / / Always check that the order of modifiers follows the JLS suggestion 
 - checkModOrder ( mods ) ; 
 - 
 if ( inCheckScope ( variableScope ) 
 & & ( getJavadocBefore ( aVar . getStartLineNo ( ) - 1 ) = = null ) ) 
 { 
 @ @ - 1339 , 21 + 1330 , 6 @ @ class Verifier 
 
 
 / * * 
 - * checks if the order of modifiers follows the suggestions 
 - * in the JLS and logs an error message accordingly . 
 - * 
 - * @ param aModSet the set of modifiers 
 - * / 
 - private void checkModOrder ( MyModifierSet aModSet ) 
 - { 
 - final MyCommonAST error = aModSet . checkOrderSuggestedByJLS ( ) ; 
 - if ( error ! = null ) { 
 - mMessages . add ( error . getLineNo ( ) , error . getColumnNo ( ) , 
 - " mod . order " , error . getText ( ) ) ; 
 - } 
 - } 
 - 
 - / * * 
 * @ return the class name from a fully qualified name 
 * @ param aType the fully qualified name 
 * / 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ModifierCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ModifierCheck . java 
 index 6360184 . . 7ebed25 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ModifierCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ModifierCheck . java 
 @ @ - 61 , 7 + 61 , 8 @ @ public class ModifierCheck 
 if ( ! mods . isEmpty ( ) ) { 
 final DetailAST error = checkOrderSuggestedByJLS ( mods ) ; 
 if ( error ! = null ) { 
 - log ( error . getLineNo ( ) , " OUT OF ORDER " + error . getText ( ) ) ; 
 + log ( error . getLineNo ( ) , error . getColumnNo ( ) , 
 + " mod . order " , error . getText ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 7211c59 . . 2975781 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 512 , 20 + 512 , 6 @ @ public class CheckerTest 
 verify ( c , filepath , expected ) ; 
 } 
 
 - public void testModifierChecks ( ) 
 - throws Exception 
 - { 
 - final Checker c = createChecker ( ) ; 
 - final String filepath = getPath ( " InputModifier . java " ) ; 
 - assertNotNull ( c ) ; 
 - final String [ ] expected = { 
 - filepath + " : 14 : 10 : ' final ' modifier out of order with the JLS suggestions . " , 
 - filepath + " : 18 : 12 : ' private ' modifier out of order with the JLS suggestions . " , 
 - filepath + " : 24 : 14 : ' private ' modifier out of order with the JLS suggestions . " , 
 - } ; 
 - verify ( c , filepath , expected ) ; 
 - } 
 - 
 public void testStrictJavadoc ( ) 
 throws Exception 
 { 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / ModifierCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / ModifierCheckTest . java 
 new file mode 100644 
 index 0000000 . . 6cecc5d 
 - - - / dev / null 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / ModifierCheckTest . java 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . ModifierCheck ; 
 + 
 + public class ModifierCheckTest 
 + extends BaseCheckTestCase 
 + { 
 + public ModifierCheckTest ( String aName ) 
 + { 
 + super ( aName ) ; 
 + } 
 + 
 + public void testIt ( ) throws Exception 
 + { 
 + final CheckConfiguration checkConfig = new CheckConfiguration ( ) ; 
 + checkConfig . setClassname ( ModifierCheck . class . getName ( ) ) ; 
 + final Checker c = createChecker ( checkConfig ) ; 
 + final String filepath = getPath ( " InputModifier . java " ) ; 
 + assertNotNull ( c ) ; 
 + final String [ ] expected = { 
 + " 14 : 10 : ' final ' modifier out of order with the JLS suggestions . " , 
 + " 18 : 12 : ' private ' modifier out of order with the JLS suggestions . " , 
 + " 24 : 14 : ' private ' modifier out of order with the JLS suggestions . " , 
 + } ; 
 + verify ( c , filepath , expected ) ; 
 + 
 + } 
 + }
