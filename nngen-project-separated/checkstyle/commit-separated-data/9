BLEU SCORE: 0.037954847898457066

TEST MSG: Issue # 6540 : correct false positive AnnotationUseStyle
GENERATED MSG: Fix exception in SuppressWarnings check on complex annotations . # 1201

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> index f4d1ba5 . . 2a081aa 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> @ @ - 513 , 17 + 513 , 13 @ @ public final class AnnotationUseStyleCheck extends AbstractCheck { <nl> private void checkCheckClosingParens ( final DetailAST ast ) { <nl> if ( closingParens ! = ClosingParens . IGNORE ) { <nl> final DetailAST paren = ast . getLastChild ( ) ; <nl> - final boolean parenExists = paren . getType ( ) = = TokenTypes . RPAREN ; <nl> <nl> if ( closingParens = = ClosingParens . ALWAYS ) { <nl> - if ( ! parenExists ) { <nl> + if ( paren . getType ( ) ! = TokenTypes . RPAREN ) { <nl> log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ MISSING ) ; <nl> } <nl> } <nl> - else if ( parenExists <nl> - & & ! ast . branchContains ( TokenTypes . EXPR ) <nl> - & & ! ast . branchContains ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) <nl> - & & ! ast . branchContains ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ) { <nl> + else if ( paren . getPreviousSibling ( ) . getType ( ) = = TokenTypes . LPAREN ) { <nl> log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java <nl> index 8365254 . . aaf5b0f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java <nl> @ @ - 90 , 7 + 90 , 6 @ @ public class AnnotationUseStyleCheckTest extends AbstractModuleTestSupport { <nl> " 41 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ INCORRECT _ STYLE , " COMPACT _ NO _ ARRAY " ) , <nl> " 43 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ INCORRECT _ STYLE , " COMPACT _ NO _ ARRAY " ) , <nl> " 47 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ INCORRECT _ STYLE , " COMPACT _ NO _ ARRAY " ) , <nl> - " 71 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , <nl> " 75 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , <nl> " 77 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , <nl> } ; <nl> @ @ - 131 , 7 + 130 , 6 @ @ public class AnnotationUseStyleCheckTest extends AbstractModuleTestSupport { <nl> " 13 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , <nl> " 30 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , <nl> " 33 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , <nl> - " 71 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , <nl> " 75 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , <nl> " 77 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , <nl> } ;
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> index bf40559 . . d600f62 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> @ @ - 301 , 30 + 301 , 38 @ @ public class AbbreviationAsWordInNameCheck extends Check { <nl> if ( abbrStarted ) { <nl> abbrStarted = false ; <nl> <nl> - / / - 1 as a first capital is usually beginning of next word <nl> final int endIndex = index - 1 ; <nl> - final int abbrLength = endIndex - beginIndex ; <nl> - if ( abbrLength > allowedAbbreviationLength ) { <nl> - result = str . substring ( beginIndex , endIndex ) ; <nl> - if ( ! allowedAbbreviations . contains ( result ) ) { <nl> - break ; <nl> - } <nl> - else { <nl> - result = null ; <nl> - } <nl> + / / - 1 as a first capital is usually beginning of next word <nl> + result = getAbbreviationIfIllegal ( str , beginIndex , endIndex ) ; <nl> + if ( result ! = null ) { <nl> + break ; <nl> } <nl> beginIndex = - 1 ; <nl> } <nl> } <nl> } <nl> - if ( abbrStarted ) { <nl> + / / if abbreviation at the end of name and it is not single character ( example : scaleX ) <nl> + if ( abbrStarted & & beginIndex ! = str . length ( ) - 1 ) { <nl> final int endIndex = str . length ( ) ; <nl> - final int abbrLength = endIndex - beginIndex ; <nl> - if ( abbrLength > 1 & & abbrLength > allowedAbbreviationLength ) { <nl> - result = str . substring ( beginIndex , endIndex ) ; <nl> - if ( allowedAbbreviations . contains ( result ) ) { <nl> - result = null ; <nl> - } <nl> + result = getAbbreviationIfIllegal ( str , beginIndex , endIndex ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * get Abbreviation if it is illegal <nl> + * @ param str name <nl> + * @ param beginIndex begin index <nl> + * @ param endIndex end index <nl> + * @ return true is abbreviation is bigger that requierd and not in ignore list <nl> + * / <nl> + private String getAbbreviationIfIllegal ( String str , int beginIndex , int endIndex ) { <nl> + String result = null ; <nl> + final int abbrLength = endIndex - beginIndex ; <nl> + if ( abbrLength > allowedAbbreviationLength ) { <nl> + final String abbr = str . substring ( beginIndex , endIndex ) ; <nl> + if ( ! allowedAbbreviations . contains ( abbr ) ) { <nl> + result = abbr ; <nl> } <nl> } <nl> return result ;

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 index f4d1ba5 . . 2a081aa 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 @ @ - 513 , 17 + 513 , 13 @ @ public final class AnnotationUseStyleCheck extends AbstractCheck { 
 private void checkCheckClosingParens ( final DetailAST ast ) { 
 if ( closingParens ! = ClosingParens . IGNORE ) { 
 final DetailAST paren = ast . getLastChild ( ) ; 
 - final boolean parenExists = paren . getType ( ) = = TokenTypes . RPAREN ; 
 
 if ( closingParens = = ClosingParens . ALWAYS ) { 
 - if ( ! parenExists ) { 
 + if ( paren . getType ( ) ! = TokenTypes . RPAREN ) { 
 log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ MISSING ) ; 
 } 
 } 
 - else if ( parenExists 
 - & & ! ast . branchContains ( TokenTypes . EXPR ) 
 - & & ! ast . branchContains ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) 
 - & & ! ast . branchContains ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ) { 
 + else if ( paren . getPreviousSibling ( ) . getType ( ) = = TokenTypes . LPAREN ) { 
 log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java 
 index 8365254 . . aaf5b0f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java 
 @ @ - 90 , 7 + 90 , 6 @ @ public class AnnotationUseStyleCheckTest extends AbstractModuleTestSupport { 
 " 41 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ INCORRECT _ STYLE , " COMPACT _ NO _ ARRAY " ) , 
 " 43 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ INCORRECT _ STYLE , " COMPACT _ NO _ ARRAY " ) , 
 " 47 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ INCORRECT _ STYLE , " COMPACT _ NO _ ARRAY " ) , 
 - " 71 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , 
 " 75 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , 
 " 77 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , 
 } ; 
 @ @ - 131 , 7 + 130 , 6 @ @ public class AnnotationUseStyleCheckTest extends AbstractModuleTestSupport { 
 " 13 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , 
 " 30 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , 
 " 33 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , 
 - " 71 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , 
 " 75 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , 
 " 77 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) , 
 } ;

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 index bf40559 . . d600f62 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 @ @ - 301 , 30 + 301 , 38 @ @ public class AbbreviationAsWordInNameCheck extends Check { 
 if ( abbrStarted ) { 
 abbrStarted = false ; 
 
 - / / - 1 as a first capital is usually beginning of next word 
 final int endIndex = index - 1 ; 
 - final int abbrLength = endIndex - beginIndex ; 
 - if ( abbrLength > allowedAbbreviationLength ) { 
 - result = str . substring ( beginIndex , endIndex ) ; 
 - if ( ! allowedAbbreviations . contains ( result ) ) { 
 - break ; 
 - } 
 - else { 
 - result = null ; 
 - } 
 + / / - 1 as a first capital is usually beginning of next word 
 + result = getAbbreviationIfIllegal ( str , beginIndex , endIndex ) ; 
 + if ( result ! = null ) { 
 + break ; 
 } 
 beginIndex = - 1 ; 
 } 
 } 
 } 
 - if ( abbrStarted ) { 
 + / / if abbreviation at the end of name and it is not single character ( example : scaleX ) 
 + if ( abbrStarted & & beginIndex ! = str . length ( ) - 1 ) { 
 final int endIndex = str . length ( ) ; 
 - final int abbrLength = endIndex - beginIndex ; 
 - if ( abbrLength > 1 & & abbrLength > allowedAbbreviationLength ) { 
 - result = str . substring ( beginIndex , endIndex ) ; 
 - if ( allowedAbbreviations . contains ( result ) ) { 
 - result = null ; 
 - } 
 + result = getAbbreviationIfIllegal ( str , beginIndex , endIndex ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 + * get Abbreviation if it is illegal 
 + * @ param str name 
 + * @ param beginIndex begin index 
 + * @ param endIndex end index 
 + * @ return true is abbreviation is bigger that requierd and not in ignore list 
 + * / 
 + private String getAbbreviationIfIllegal ( String str , int beginIndex , int endIndex ) { 
 + String result = null ; 
 + final int abbrLength = endIndex - beginIndex ; 
 + if ( abbrLength > allowedAbbreviationLength ) { 
 + final String abbr = str . substring ( beginIndex , endIndex ) ; 
 + if ( ! allowedAbbreviations . contains ( abbr ) ) { 
 + result = abbr ; 
 } 
 } 
 return result ;
