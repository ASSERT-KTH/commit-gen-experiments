BLEU SCORE: 0.4111336169005197

TEST MSG: minor : add comment to shell file
GENERATED MSG: minor : add comment

TEST DIFF (one line): diff - - git a / . ci / run - link - check - plugin . sh b / . ci / run - link - check - plugin . sh <nl> index 0090d36 . . 038272a 100755 <nl> - - - a / . ci / run - link - check - plugin . sh <nl> + + + b / . ci / run - link - check - plugin . sh <nl> @ @ - 1 , 5 + 1 , 8 @ @ <nl> # ! / bin / bash <nl> <nl> + # This script is used at https : / / app . codeship . com / projects / 124310 <nl> + # Run " firefox target / site / linkcheck . html " after completion to review html report <nl> + <nl> set - e <nl> <nl> uname - a
NEAREST DIFF (one line): diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / indentation / messages _ tr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / indentation / messages _ tr . properties <nl> index a4b46b7 . . 674b3cb 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / indentation / messages _ tr . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / indentation / messages _ tr . properties <nl> @ @ - 2 , 7 + 2 , 7 @ @ <nl> <nl> indentation . child . error = { 0 } ifadesi do ğ ru hizalanmam ı ş . Bulundu ğ u s ü tun { 1 } , olmas ı gereken s ü tun { 2 } . <nl> indentation . error = { 0 } ifadesi do ğ ru hizalanmam ı ş . Bulundu ğ u s ü tun { 1 } , olmas ı gereken s ü tun { 2 } . <nl> - indentation . error . multi = ' ' { 0 } ' ' yanl ı ş girinti d ü zeyine sahip ' { 1 } , beklenen d ü zeyde a ş a ğ ı dakilerden biri olmal ı d ı r : { 2 } . <nl> + indentation . error . multi = ' ' { 0 } ' ' yanl ı ş girinti d ü zeyine sahip { 1 } , beklenen d ü zeyde a ş a ğ ı dakilerden biri olmal ı d ı r : { 2 } . <nl> indentation . child . error . multi = ' ' { 0 } ' ' ç ocuk yanl ı ş girinti d ü zeyi { 1 } , beklenen d ü zeyde a ş a ğ ı dakilerden biri olmal ı d ı r var : { 2 } . <nl> comments . indentation . single = Yorum beklenen yanl ı ş girinti d ü zeyi { 1 } , { 2 } , girinti olmal ı d ı r hatt ı yla ayn ı seviyede sahip { 0 } . <nl> comments . indentation . block = Blok Yorum beklenen yanl ı ş girinti d ü zeyi { 1 } , { 2 } , girinti olmal ı d ı r hatt ı yla ayn ı seviyede sahip { 0 } . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> index 80dbb23 . . 598f06e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> @ @ - 369 , 7 + 369 , 7 @ @ public class BaseCheckTestSupport { <nl> * @ param messageKey the key of message in ' messages . properties ' file . <nl> * @ param arguments the arguments of message in ' messages . properties ' file . <nl> * / <nl> - protected String getCheckMessage ( <nl> + protected static String getCheckMessage ( <nl> Class < ? > clazz , String messageKey , Object . . . arguments ) { <nl> return internalGetCheckMessage ( getMessageBundle ( clazz . getName ( ) ) , messageKey , arguments ) ; <nl> } <nl> @ @ - 382 , 7 + 382 , 7 @ @ public class BaseCheckTestSupport { <nl> * @ param messageKey the key of message in ' messages . properties ' file . <nl> * @ param arguments the arguments of message in ' messages . properties ' file . <nl> * / <nl> - protected String internalGetCheckMessage ( <nl> + private static String internalGetCheckMessage ( <nl> String messageBundle , String messageKey , Object . . . arguments ) { <nl> final ResourceBundle resourceBundle = ResourceBundle . getBundle ( <nl> messageBundle , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 34838f0 . . 3bc7437 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 34 , 12 + 34 , 10 @ @ import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . nio . charset . StandardCharsets ; <nl> - import java . text . MessageFormat ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> - import java . util . ResourceBundle ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> @ @ - 51 , 7 + 49 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> - import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 163 , 9 + 160 , 6 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> final IndentComment . . . linesWithWarn ) throws Exception { <nl> final Checker checker = createChecker ( config ) ; <nl> checker . addListener ( new IndentAudit ( linesWithWarn ) ) ; <nl> - checker . setLocaleCountry ( Locale . ROOT . getCountry ( ) ) ; <nl> - checker . setLocaleLanguage ( Locale . ROOT . getLanguage ( ) ) ; <nl> - checker . finishLocalSetup ( ) ; <nl> verify ( checker , new File [ ] { new File ( filePath ) } , filePath , expected ) ; <nl> } <nl> <nl> @ @ - 791 , 12 + 785 , 8 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> " 112 : " + getCheckMessage ( MSG _ ERROR _ MULTI , " array initialization rcurly " , 6 , " 8 , 12 " ) , <nl> } ; <nl> <nl> - final Checker checker = createChecker ( checkConfig ) ; <nl> - checker . setLocaleCountry ( Locale . ROOT . getCountry ( ) ) ; <nl> - checker . setLocaleLanguage ( Locale . ROOT . getLanguage ( ) ) ; <nl> - checker . finishLocalSetup ( ) ; <nl> / / Test input for this test case is not checked due to issue # 693 . <nl> - verify ( checker , fileName , expected ) ; <nl> + verify ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1747 , 17 + 1737 , 37 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> - @ Override <nl> - protected String internalGetCheckMessage ( <nl> - String messageBundle , String messageKey , Object . . . arguments ) { <nl> - final ResourceBundle resourceBundle = ResourceBundle . getBundle ( <nl> - messageBundle , <nl> - Locale . ROOT , <nl> - Thread . currentThread ( ) . getContextClassLoader ( ) , <nl> - new LocalizedMessage . Utf8Control ( ) ) ; <nl> - final String pattern = resourceBundle . getString ( messageKey ) ; <nl> - final MessageFormat formatter = new MessageFormat ( pattern , Locale . ROOT ) ; <nl> - return formatter . format ( arguments ) ; <nl> + / * * <nl> + * Verifies that the arguments of { @ link IndentationCheck # MSG _ ERROR } , <nl> + * { @ link IndentationCheck # MSG _ CHILD _ ERROR } , { @ link IndentationCheck # MSG _ CHILD _ ERROR _ MULTI } , <nl> + * { @ link IndentationCheck # MSG _ CHILD _ ERROR _ MULTI } are in appropriate order . <nl> + * <nl> + * In other tests , the argument 0 and text before it are chopped off and only the rest of <nl> + * messages are verified . Therefore , the argument 0 is required to be the first argument in <nl> + * the messages above . If we update the messages in the future , it is required to keep the <nl> + * arguments in appropriate order to ensure other tests will work . <nl> + * <nl> + * @ see IndentComment # getExpectedMessagePostfix ( String ) <nl> + * / <nl> + @ Test <nl> + public void testArgumentOrderOfErrorMessages ( ) { <nl> + final String [ ] arguments = { " # # 0 # # " , " # # 1 # # " , " # # 2 # # " } ; <nl> + final String [ ] messages = { <nl> + getCheckMessage ( MSG _ ERROR , ( Object [ ] ) arguments ) , <nl> + getCheckMessage ( MSG _ CHILD _ ERROR , ( Object [ ] ) arguments ) , <nl> + getCheckMessage ( MSG _ ERROR _ MULTI , ( Object [ ] ) arguments ) , <nl> + getCheckMessage ( MSG _ CHILD _ ERROR _ MULTI , ( Object [ ] ) arguments ) , <nl> + } ; <nl> + final boolean isInOrder = Arrays . stream ( messages ) . allMatch ( msg - > { <nl> + final int indexOfArgumentZero = msg . indexOf ( arguments [ 0 ] ) ; <nl> + return Arrays . stream ( arguments ) . mapToInt ( msg : : indexOf ) <nl> + . allMatch ( index - > index > = indexOfArgumentZero ) ; <nl> + } ) ; <nl> + assertTrue ( <nl> + " the argument 0 of error messages ( indentation . error , indentation . child . error , " <nl> + + " indentation . error . multi , indentation . child . error . multi ) " <nl> + + " is required to be the first argument of them " , <nl> + isInOrder ) ; <nl> } <nl> <nl> private static final class IndentAudit implements AuditListener { <nl> @ @ - 1801 , 12 + 1811 , 15 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> final IndentComment comment = comments [ position ] ; <nl> position + + ; <nl> <nl> - assertTrue ( <nl> - " input expected warning # " + position + " at line " + comment . getLineNumber ( ) <nl> - + " to report ' " + comment . getExpectedMessage ( ) + " ' but got instead : " <nl> - + line + " : " + message , <nl> - line = = comment . getLineNumber ( ) <nl> - & & message . endsWith ( comment . getExpectedMessage ( ) ) ) ; <nl> + final String possibleExceptedMessages = Arrays . stream ( comment . getExpectedMessages ( ) ) <nl> + . reduce ( " " , ( cur , next ) - > cur + " \ " " + next + " \ " , " ) ; <nl> + final String assertMessage = String . format ( <nl> + Locale . ROOT , <nl> + " input expected warning # % d at line % d to report one of the following : % s " <nl> + + " but got instead : % d : % s " , <nl> + position , comment . getLineNumber ( ) , possibleExceptedMessages , line , message ) ; <nl> + assertTrue ( assertMessage , line = = comment . getLineNumber ( ) <nl> + & & Arrays . stream ( comment . getExpectedMessages ( ) ) . anyMatch ( message : : endsWith ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 1816 , 6 + 1829 , 8 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> private static final class IndentComment { <nl> + / * * Used to locate the index of argument zero of error messages . * / <nl> + private static final String FAKE _ ARGUMENT _ ZERO = " # # 0 # # " ; <nl> private final int lineNumber ; <nl> private final int indent ; <nl> / * * Used for when violations report nodes not first on the line . * / <nl> @ @ - 1838 , 15 + 1853 , 28 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> warning = match . group ( 5 ) ! = null ; <nl> } <nl> <nl> - public String getExpectedMessage ( ) { <nl> + public String [ ] getExpectedMessages ( ) { <nl> + final String [ ] expectedMessages ; <nl> if ( expectedWarning . contains ( " , " ) ) { <nl> - return " incorrect indentation level " + ( indent + indentOffset ) <nl> - + " , expected level should be one of the following : " + expectedWarning <nl> - + " . " ; <nl> + expectedMessages = new String [ ] { <nl> + getExpectedMessagePostfix ( MSG _ ERROR _ MULTI ) , <nl> + getExpectedMessagePostfix ( MSG _ CHILD _ ERROR _ MULTI ) , <nl> + } ; <nl> + } else { <nl> + expectedMessages = new String [ ] { <nl> + getExpectedMessagePostfix ( MSG _ ERROR ) , <nl> + getExpectedMessagePostfix ( MSG _ CHILD _ ERROR ) , <nl> + } ; <nl> } <nl> + return expectedMessages ; <nl> + } <nl> <nl> - return " incorrect indentation level " + ( indent + indentOffset ) <nl> - + " , expected level should be " + expectedWarning + " . " ; <nl> + private String getExpectedMessagePostfix ( final String messageKey ) { <nl> + final String msg = getCheckMessage ( IndentationCheck . class , messageKey , <nl> + FAKE _ ARGUMENT _ ZERO , indent + indentOffset , expectedWarning ) ; <nl> + final int indexOfMsgPostfix = msg . indexOf ( FAKE _ ARGUMENT _ ZERO ) <nl> + + FAKE _ ARGUMENT _ ZERO . length ( ) ; <nl> + return msg . substring ( indexOfMsgPostfix ) ; <nl> } <nl> <nl> public int getLineNumber ( ) {

TEST DIFF:
diff - - git a / . ci / run - link - check - plugin . sh b / . ci / run - link - check - plugin . sh 
 index 0090d36 . . 038272a 100755 
 - - - a / . ci / run - link - check - plugin . sh 
 + + + b / . ci / run - link - check - plugin . sh 
 @ @ - 1 , 5 + 1 , 8 @ @ 
 # ! / bin / bash 
 
 + # This script is used at https : / / app . codeship . com / projects / 124310 
 + # Run " firefox target / site / linkcheck . html " after completion to review html report 
 + 
 set - e 
 
 uname - a

NEAREST DIFF:
diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / indentation / messages _ tr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / indentation / messages _ tr . properties 
 index a4b46b7 . . 674b3cb 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / indentation / messages _ tr . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / indentation / messages _ tr . properties 
 @ @ - 2 , 7 + 2 , 7 @ @ 
 
 indentation . child . error = { 0 } ifadesi do ğ ru hizalanmam ı ş . Bulundu ğ u s ü tun { 1 } , olmas ı gereken s ü tun { 2 } . 
 indentation . error = { 0 } ifadesi do ğ ru hizalanmam ı ş . Bulundu ğ u s ü tun { 1 } , olmas ı gereken s ü tun { 2 } . 
 - indentation . error . multi = ' ' { 0 } ' ' yanl ı ş girinti d ü zeyine sahip ' { 1 } , beklenen d ü zeyde a ş a ğ ı dakilerden biri olmal ı d ı r : { 2 } . 
 + indentation . error . multi = ' ' { 0 } ' ' yanl ı ş girinti d ü zeyine sahip { 1 } , beklenen d ü zeyde a ş a ğ ı dakilerden biri olmal ı d ı r : { 2 } . 
 indentation . child . error . multi = ' ' { 0 } ' ' ç ocuk yanl ı ş girinti d ü zeyi { 1 } , beklenen d ü zeyde a ş a ğ ı dakilerden biri olmal ı d ı r var : { 2 } . 
 comments . indentation . single = Yorum beklenen yanl ı ş girinti d ü zeyi { 1 } , { 2 } , girinti olmal ı d ı r hatt ı yla ayn ı seviyede sahip { 0 } . 
 comments . indentation . block = Blok Yorum beklenen yanl ı ş girinti d ü zeyi { 1 } , { 2 } , girinti olmal ı d ı r hatt ı yla ayn ı seviyede sahip { 0 } . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 index 80dbb23 . . 598f06e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 @ @ - 369 , 7 + 369 , 7 @ @ public class BaseCheckTestSupport { 
 * @ param messageKey the key of message in ' messages . properties ' file . 
 * @ param arguments the arguments of message in ' messages . properties ' file . 
 * / 
 - protected String getCheckMessage ( 
 + protected static String getCheckMessage ( 
 Class < ? > clazz , String messageKey , Object . . . arguments ) { 
 return internalGetCheckMessage ( getMessageBundle ( clazz . getName ( ) ) , messageKey , arguments ) ; 
 } 
 @ @ - 382 , 7 + 382 , 7 @ @ public class BaseCheckTestSupport { 
 * @ param messageKey the key of message in ' messages . properties ' file . 
 * @ param arguments the arguments of message in ' messages . properties ' file . 
 * / 
 - protected String internalGetCheckMessage ( 
 + private static String internalGetCheckMessage ( 
 String messageBundle , String messageKey , Object . . . arguments ) { 
 final ResourceBundle resourceBundle = ResourceBundle . getBundle ( 
 messageBundle , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 34838f0 . . 3bc7437 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 34 , 12 + 34 , 10 @ @ import java . io . FileInputStream ; 
 import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . nio . charset . StandardCharsets ; 
 - import java . text . MessageFormat ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . Locale ; 
 - import java . util . ResourceBundle ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 @ @ - 51 , 7 + 49 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 - import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 163 , 9 + 160 , 6 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 final IndentComment . . . linesWithWarn ) throws Exception { 
 final Checker checker = createChecker ( config ) ; 
 checker . addListener ( new IndentAudit ( linesWithWarn ) ) ; 
 - checker . setLocaleCountry ( Locale . ROOT . getCountry ( ) ) ; 
 - checker . setLocaleLanguage ( Locale . ROOT . getLanguage ( ) ) ; 
 - checker . finishLocalSetup ( ) ; 
 verify ( checker , new File [ ] { new File ( filePath ) } , filePath , expected ) ; 
 } 
 
 @ @ - 791 , 12 + 785 , 8 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 " 112 : " + getCheckMessage ( MSG _ ERROR _ MULTI , " array initialization rcurly " , 6 , " 8 , 12 " ) , 
 } ; 
 
 - final Checker checker = createChecker ( checkConfig ) ; 
 - checker . setLocaleCountry ( Locale . ROOT . getCountry ( ) ) ; 
 - checker . setLocaleLanguage ( Locale . ROOT . getLanguage ( ) ) ; 
 - checker . finishLocalSetup ( ) ; 
 / / Test input for this test case is not checked due to issue # 693 . 
 - verify ( checker , fileName , expected ) ; 
 + verify ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 1747 , 17 + 1737 , 37 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 - @ Override 
 - protected String internalGetCheckMessage ( 
 - String messageBundle , String messageKey , Object . . . arguments ) { 
 - final ResourceBundle resourceBundle = ResourceBundle . getBundle ( 
 - messageBundle , 
 - Locale . ROOT , 
 - Thread . currentThread ( ) . getContextClassLoader ( ) , 
 - new LocalizedMessage . Utf8Control ( ) ) ; 
 - final String pattern = resourceBundle . getString ( messageKey ) ; 
 - final MessageFormat formatter = new MessageFormat ( pattern , Locale . ROOT ) ; 
 - return formatter . format ( arguments ) ; 
 + / * * 
 + * Verifies that the arguments of { @ link IndentationCheck # MSG _ ERROR } , 
 + * { @ link IndentationCheck # MSG _ CHILD _ ERROR } , { @ link IndentationCheck # MSG _ CHILD _ ERROR _ MULTI } , 
 + * { @ link IndentationCheck # MSG _ CHILD _ ERROR _ MULTI } are in appropriate order . 
 + * 
 + * In other tests , the argument 0 and text before it are chopped off and only the rest of 
 + * messages are verified . Therefore , the argument 0 is required to be the first argument in 
 + * the messages above . If we update the messages in the future , it is required to keep the 
 + * arguments in appropriate order to ensure other tests will work . 
 + * 
 + * @ see IndentComment # getExpectedMessagePostfix ( String ) 
 + * / 
 + @ Test 
 + public void testArgumentOrderOfErrorMessages ( ) { 
 + final String [ ] arguments = { " # # 0 # # " , " # # 1 # # " , " # # 2 # # " } ; 
 + final String [ ] messages = { 
 + getCheckMessage ( MSG _ ERROR , ( Object [ ] ) arguments ) , 
 + getCheckMessage ( MSG _ CHILD _ ERROR , ( Object [ ] ) arguments ) , 
 + getCheckMessage ( MSG _ ERROR _ MULTI , ( Object [ ] ) arguments ) , 
 + getCheckMessage ( MSG _ CHILD _ ERROR _ MULTI , ( Object [ ] ) arguments ) , 
 + } ; 
 + final boolean isInOrder = Arrays . stream ( messages ) . allMatch ( msg - > { 
 + final int indexOfArgumentZero = msg . indexOf ( arguments [ 0 ] ) ; 
 + return Arrays . stream ( arguments ) . mapToInt ( msg : : indexOf ) 
 + . allMatch ( index - > index > = indexOfArgumentZero ) ; 
 + } ) ; 
 + assertTrue ( 
 + " the argument 0 of error messages ( indentation . error , indentation . child . error , " 
 + + " indentation . error . multi , indentation . child . error . multi ) " 
 + + " is required to be the first argument of them " , 
 + isInOrder ) ; 
 } 
 
 private static final class IndentAudit implements AuditListener { 
 @ @ - 1801 , 12 + 1811 , 15 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 final IndentComment comment = comments [ position ] ; 
 position + + ; 
 
 - assertTrue ( 
 - " input expected warning # " + position + " at line " + comment . getLineNumber ( ) 
 - + " to report ' " + comment . getExpectedMessage ( ) + " ' but got instead : " 
 - + line + " : " + message , 
 - line = = comment . getLineNumber ( ) 
 - & & message . endsWith ( comment . getExpectedMessage ( ) ) ) ; 
 + final String possibleExceptedMessages = Arrays . stream ( comment . getExpectedMessages ( ) ) 
 + . reduce ( " " , ( cur , next ) - > cur + " \ " " + next + " \ " , " ) ; 
 + final String assertMessage = String . format ( 
 + Locale . ROOT , 
 + " input expected warning # % d at line % d to report one of the following : % s " 
 + + " but got instead : % d : % s " , 
 + position , comment . getLineNumber ( ) , possibleExceptedMessages , line , message ) ; 
 + assertTrue ( assertMessage , line = = comment . getLineNumber ( ) 
 + & & Arrays . stream ( comment . getExpectedMessages ( ) ) . anyMatch ( message : : endsWith ) ) ; 
 } 
 
 @ Override 
 @ @ - 1816 , 6 + 1829 , 8 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 } 
 
 private static final class IndentComment { 
 + / * * Used to locate the index of argument zero of error messages . * / 
 + private static final String FAKE _ ARGUMENT _ ZERO = " # # 0 # # " ; 
 private final int lineNumber ; 
 private final int indent ; 
 / * * Used for when violations report nodes not first on the line . * / 
 @ @ - 1838 , 15 + 1853 , 28 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 warning = match . group ( 5 ) ! = null ; 
 } 
 
 - public String getExpectedMessage ( ) { 
 + public String [ ] getExpectedMessages ( ) { 
 + final String [ ] expectedMessages ; 
 if ( expectedWarning . contains ( " , " ) ) { 
 - return " incorrect indentation level " + ( indent + indentOffset ) 
 - + " , expected level should be one of the following : " + expectedWarning 
 - + " . " ; 
 + expectedMessages = new String [ ] { 
 + getExpectedMessagePostfix ( MSG _ ERROR _ MULTI ) , 
 + getExpectedMessagePostfix ( MSG _ CHILD _ ERROR _ MULTI ) , 
 + } ; 
 + } else { 
 + expectedMessages = new String [ ] { 
 + getExpectedMessagePostfix ( MSG _ ERROR ) , 
 + getExpectedMessagePostfix ( MSG _ CHILD _ ERROR ) , 
 + } ; 
 } 
 + return expectedMessages ; 
 + } 
 
 - return " incorrect indentation level " + ( indent + indentOffset ) 
 - + " , expected level should be " + expectedWarning + " . " ; 
 + private String getExpectedMessagePostfix ( final String messageKey ) { 
 + final String msg = getCheckMessage ( IndentationCheck . class , messageKey , 
 + FAKE _ ARGUMENT _ ZERO , indent + indentOffset , expectedWarning ) ; 
 + final int indexOfMsgPostfix = msg . indexOf ( FAKE _ ARGUMENT _ ZERO ) 
 + + FAKE _ ARGUMENT _ ZERO . length ( ) ; 
 + return msg . substring ( indexOfMsgPostfix ) ; 
 } 
 
 public int getLineNumber ( ) {
