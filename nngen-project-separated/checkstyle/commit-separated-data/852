BLEU SCORE: 0.2493651438887133

TEST MSG: Issue # 3546 : Add lambda in RightCurlyCheck
GENERATED MSG: Revert " Issue # 3546 : add lambda in a rightcurlycheck "

TEST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index ba7e33c . . fd27583 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 68 , 6 + 68 , 8 @ @ <nl> < properties > <nl> < ! - - JavadocMethodCheck is deprecated class , till it is redone to use JavadocAst - - > <nl> < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocMethodCheck ' ] " / > <nl> + < ! - - getDetails ( ) method is a huge SWITCH , it has to be monolithic - - > <nl> + < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' getDetails ' and . . / . . / . . [ @ Image = ' RightCurlyCheck ' ] ] " / > <nl> < / properties > <nl> < / rule > <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> index e91df50 . . 11247c7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * { @ link TokenTypes # LITERAL _ DO LITERAL _ DO } . <nl> * { @ link TokenTypes # STATIC _ INIT STATIC _ INIT } . <nl> * { @ link TokenTypes # INSTANCE _ INIT INSTANCE _ INIT } . <nl> + * { @ link TokenTypes # LAMBDA LAMBDA } . <nl> * < / p > <nl> * < p > <nl> * < b > shouldStartLine < / b > - does the check need to check <nl> @ @ - 160 , 6 + 161 , 7 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> TokenTypes . LITERAL _ DO , <nl> TokenTypes . STATIC _ INIT , <nl> TokenTypes . INSTANCE _ INIT , <nl> + TokenTypes . LAMBDA , <nl> } ; <nl> } <nl> <nl> @ @ - 321 , 10 + 323 , 10 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> * Collects validation details . <nl> * @ param ast detail ast . <nl> * @ return object that contain all details to make a validation . <nl> + * @ noinspection SwitchStatementDensity <nl> * / <nl> - / / - @ cs [ JavaNCSS ] getDetails ( ) method is a huge SWITCH , it has to be monolithic <nl> - / / - @ cs [ ExecutableStatementCount ] getDetails ( ) method is a huge SWITCH , it has to be monolithic <nl> - / / - @ cs [ NPathComplexity ] getDetails ( ) method is a huge SWITCH , it has to be monolithic <nl> + / / - @ cs [ JavaNCSS | ExecutableStatementCount | CyclomaticComplexity | NPathComplexity ] getDetails ( ) <nl> + / / method is a huge SWITCH , it has to be monolithic <nl> private static Details getDetails ( DetailAST ast ) { <nl> / / Attempt to locate the tokens to do the check <nl> boolean shouldCheckLastRcurly = false ; <nl> @ @ - 400 , 6 + 402 , 18 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> rcurly = lcurly . getLastChild ( ) ; <nl> } <nl> break ; <nl> + case TokenTypes . LAMBDA : <nl> + lcurly = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> + nextToken = getNextToken ( ast ) ; <nl> + if ( nextToken . getType ( ) ! = TokenTypes . RPAREN <nl> + & & nextToken . getType ( ) ! = TokenTypes . COMMA ) { <nl> + shouldCheckLastRcurly = true ; <nl> + nextToken = getNextToken ( nextToken ) ; <nl> + } <nl> + if ( lcurly ! = null ) { <nl> + rcurly = lcurly . getLastChild ( ) ; <nl> + } <nl> + break ; <nl> default : <nl> / / ATTENTION ! We have default here , but we expect case TokenTypes . METHOD _ DEF , <nl> / / TokenTypes . LITERAL _ FOR , TokenTypes . LITERAL _ WHILE only . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> index ed8a9ca . . 81085f1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> @ @ - 360 , 4 + 360 , 48 @ @ public class RightCurlyCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputRightCurlySingelineIfBlocks . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testRightCurlyIsAloneLambda ( ) throws Exception { <nl> + checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; <nl> + checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; <nl> + final String [ ] expected = { <nl> + " 14 : 74 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 74 ) , <nl> + " 17 : 49 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 49 ) , <nl> + " 35 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + " 45 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputRightCurlyAloneLambda . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRightCurlyIsAloneOrSinglelineLambda ( ) throws Exception { <nl> + checkConfig . addAttribute ( " option " , <nl> + RightCurlyOption . ALONE _ OR _ SINGLELINE . toString ( ) ) ; <nl> + checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; <nl> + final String [ ] expected = { <nl> + " 17 : 49 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 49 ) , <nl> + " 35 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + " 45 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> + " 47 : 58 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 58 ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getPath ( " InputRightCurlyAloneOrSinglelineLambda . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRightCurlyIsSameLambda ( ) throws Exception { <nl> + checkConfig . addAttribute ( " option " , RightCurlyOption . SAME . toString ( ) ) ; <nl> + checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; <nl> + final String [ ] expected = { <nl> + " 17 : 49 : " + getCheckMessage ( MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 49 ) , <nl> + " 35 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + " 40 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ SAME , " } " , 13 ) , <nl> + " 53 : 30 : " + getCheckMessage ( MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 30 ) , <nl> + " 68 : 20 : " + getCheckMessage ( MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 20 ) , <nl> + " 73 : 20 : " + getCheckMessage ( MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 20 ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getPath ( " InputRightCurlySameLambda . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index 3738076 . . 2d485bd 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 159 , 6 + 159 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> " ARRAY _ INIT " , <nl> / / these are covered by GenericWhitespaceCheck <nl> " WILDCARD _ TYPE " , " GENERIC _ END " , " GENERIC _ START " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " RightCurly " , Stream . of ( <nl> + / / Until https : / / github . com / checkstyle / checkstyle / issues / 4177 <nl> + " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> <nl> / / google <nl> GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " AnnotationLocation " , Stream . of ( <nl> @ @ - 216 , 6 + 219 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> / / state of the configuration when test was made until <nl> / / https : / / github . com / checkstyle / checkstyle / issues / 4122 <nl> " COLON " , " TYPE _ EXTENSION _ AND " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " RightCurly " , Stream . of ( <nl> + / / Until https : / / github . com / checkstyle / checkstyle / issues / 4178 <nl> + " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneLambda . java <nl> new file mode 100644 <nl> index 0000000 . . bc76452 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneLambda . java <nl> @ @ - 0 , 0 + 1 , 47 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . Stream ; <nl> + <nl> + public class InputRightCurlyAloneLambda { <nl> + <nl> + static Runnable r1 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly one ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable r2 = ( ) - > String . valueOf ( " Test rightCurly two ! " ) ; <nl> + <nl> + static Runnable r3 = ( ) - > { String . valueOf ( " Test rightCurly three ! " ) ; } ; / / violation <nl> + <nl> + static Runnable r4 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly four ! " ) ; } ; / / violation <nl> + <nl> + static Runnable r5 = ( ) - > <nl> + { <nl> + String . valueOf ( " Test rightCurly five ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable r6 = ( ) - > { } ; <nl> + <nl> + static Runnable r7 = ( ) - > { <nl> + } ; <nl> + <nl> + static Runnable r8 = ( ) - > <nl> + { <nl> + } ; <nl> + <nl> + static Runnable r9 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly nine ! " ) ; <nl> + } ; int i ; / / violation <nl> + <nl> + void foo1 ( ) { <nl> + Stream . of ( " Hello " ) . filter ( s - > { <nl> + return s ! = null ; <nl> + } <nl> + ) . collect ( Collectors . toList ( ) ) ; <nl> + <nl> + Stream . of ( " Hello " ) . filter ( s - > { <nl> + return s ! = null ; <nl> + } ) . collect ( Collectors . toList ( ) ) ; / / violation <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneOrSinglelineLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneOrSinglelineLambda . java <nl> new file mode 100644 <nl> index 0000000 . . 9c4a300 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneOrSinglelineLambda . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . Stream ; <nl> + <nl> + public class InputRightCurlyAloneOrSinglelineLambda { <nl> + <nl> + static Runnable r1 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly one ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable r2 = ( ) - > String . valueOf ( " Test rightCurly two ! " ) ; <nl> + <nl> + static Runnable r3 = ( ) - > { String . valueOf ( " Test rightCurly three ! " ) ; } ; <nl> + <nl> + static Runnable r4 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly four ! " ) ; } ; / / violation <nl> + <nl> + static Runnable r5 = ( ) - > <nl> + { <nl> + String . valueOf ( " Test rightCurly five ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable r6 = ( ) - > { } ; <nl> + <nl> + static Runnable r7 = ( ) - > { <nl> + } ; <nl> + <nl> + static Runnable r8 = ( ) - > <nl> + { <nl> + } ; <nl> + <nl> + static Runnable r9 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly nine ! " ) ; <nl> + } ; int i ; / / violation <nl> + <nl> + void foo1 ( ) { <nl> + Stream . of ( " Hello " ) . filter ( s - > { <nl> + return s ! = null ; <nl> + } <nl> + ) . collect ( Collectors . toList ( ) ) ; <nl> + <nl> + Stream . of ( " Hello " ) . filter ( s - > { <nl> + return s ! = null ; <nl> + } ) . collect ( Collectors . toList ( ) ) ; / / violation <nl> + <nl> + Stream . of ( " Hello " ) . filter ( s - > { return s ! = null ; } ) . collect ( Collectors . toList ( ) ) ; / / violation <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlySameLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlySameLambda . java <nl> new file mode 100644 <nl> index 0000000 . . 2165563 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlySameLambda . java <nl> @ @ - 0 , 0 + 1 , 78 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . Stream ; <nl> + <nl> + public class InputRightCurlySameLambda { <nl> + <nl> + static Runnable r1 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly one ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable r2 = ( ) - > String . valueOf ( " Test rightCurly two ! " ) ; <nl> + <nl> + static Runnable r3 = ( ) - > { String . valueOf ( " Test rightCurly three ! " ) ; } ; <nl> + <nl> + static Runnable r4 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly four ! " ) ; } ; / / violation <nl> + <nl> + static Runnable r5 = ( ) - > <nl> + { <nl> + String . valueOf ( " Test rightCurly five ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable r6 = ( ) - > { } ; <nl> + <nl> + static Runnable r7 = ( ) - > { <nl> + } ; <nl> + <nl> + static Runnable r8 = ( ) - > <nl> + { <nl> + } ; <nl> + <nl> + static Runnable r9 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly nine ! " ) ; <nl> + } ; int i ; / / violation <nl> + <nl> + void foo1 ( ) { <nl> + Stream . of ( " Hello " ) . filter ( s - > { <nl> + return s ! = null ; <nl> + } / / violation <nl> + ) . collect ( Collectors . toList ( ) ) ; <nl> + <nl> + Stream . of ( " Hello " ) . filter ( s - > { <nl> + return s ! = null ; <nl> + } ) . collect ( Collectors . toList ( ) ) ; <nl> + <nl> + Stream . of ( " Hello " ) . filter ( s - > { return s ! = null ; } ) <nl> + . collect ( Collectors . toList ( ) ) ; <nl> + <nl> + Stream . of ( " Hello " ) . filter ( s - > { return s ! = null ; } ) . collect ( Collectors . toList ( ) ) ; <nl> + <nl> + Stream . of ( " Hello " ) . filter ( s - > { <nl> + return s ! = null ; } ) . collect ( Collectors . toList ( ) ) ; / / violation <nl> + <nl> + bar ( ( ) - > { return ; } , ( ) - > { return ; } ) ; <nl> + <nl> + bar ( ( ) - > { <nl> + return ; <nl> + } , ( ) - > { return ; } ) ; <nl> + <nl> + bar ( ( ) - > { <nl> + return ; <nl> + } , ( ) - > { <nl> + return ; <nl> + } ) ; <nl> + <nl> + bar ( ( ) - > { <nl> + return ; } , ( ) - > { return ; } ) ; / / violation <nl> + <nl> + bar ( ( ) - > { <nl> + return ; <nl> + } , ( ) - > { <nl> + return ; } ) ; / / violation <nl> + <nl> + } <nl> + <nl> + void bar ( Runnable r1 , Runnable r2 ) { } <nl> + } <nl> diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml <nl> index 4f157e5 . . 51c8d33 100644 <nl> - - - a / src / xdocs / config _ blocks . xml <nl> + + + b / src / xdocs / config _ blocks . xml <nl> @ @ - 799 , 7 + 799 , 9 @ @ for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK <nl> < a <nl> href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ INIT " > STATIC _ INIT < / a > , <nl> < a <nl> - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INSTANCE _ INIT " > INSTANCE _ INIT < / a > . < / td > <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INSTANCE _ INIT " > INSTANCE _ INIT < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > LAMBDA < / a > . < / td > <nl> <nl> < td > < a <nl> href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ TRY " > LITERAL _ TRY < / a > ,
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index 478d15d . . c70b8d0 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 260 , 8 + 260 , 7 @ @ public class BaseCheckTestSupport { <nl> result = configs . get ( 0 ) ; <nl> } <nl> else { <nl> - result = configs . get ( 0 ) ; <nl> - / / throw new IllegalStateException ( " multiple instances of the same Check are detected " ) ; <nl> + throw new IllegalStateException ( " multiple instances of the same Check are detected " ) ; <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> index 16b3d91 . . f0dac8e 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class RightCurlyTest extends BaseCheckTestSupport { <nl> " 79 : 27 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 27 ) , <nl> } ; <nl> <nl> - final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; <nl> + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlySame " ) ; <nl> final String filePath = getPath ( " InputRightCurlyOther . java " ) ; <nl> <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> @ @ - 61 , 7 + 61 , 7 @ @ public class RightCurlyTest extends BaseCheckTestSupport { <nl> public void rightCurlyTestSame ( ) throws Exception { <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; <nl> + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlySame " ) ; <nl> final String filePath = getPath ( " InputRightCurlySame . java " ) ; <nl> <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> @ @ - 76 , 7 + 76 , 7 @ @ public class RightCurlyTest extends BaseCheckTestSupport { <nl> " 83 : 9 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 9 ) , <nl> } ; <nl> <nl> - final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; <nl> + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlySame " ) ; <nl> final String filePath = getPath ( " InputRightCurlyDoWhile . java " ) ; <nl> <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / SeparatorWrapTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / SeparatorWrapTest . java <nl> index b82e401 . . 1294efc 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / SeparatorWrapTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / SeparatorWrapTest . java <nl> @ @ - 37 , 16 + 37 , 30 @ @ public class SeparatorWrapTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void separatorWrapTest ( ) throws Exception { <nl> + public void separatorWrapDotTest ( ) throws Exception { <nl> <nl> final String [ ] expected = { <nl> " 28 : 30 : " + getCheckMessage ( SeparatorWrapCheck . class , " line . new " , " . " ) , <nl> } ; <nl> <nl> - final Configuration checkConfig = getCheckConfig ( " SeparatorWrap " ) ; <nl> + final Configuration checkConfig = getCheckConfig ( " SeparatorWrap " , " SeparatorWrapDot " ) ; <nl> final String filePath = getPath ( " InputSeparatorWrap . java " ) ; <nl> <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void separatorWrapCommaTest ( ) throws Exception { <nl> + <nl> + final String [ ] expected = { <nl> + " 31 : 17 : " + getCheckMessage ( SeparatorWrapCheck . class , " line . previous " , " , " ) , <nl> + } ; <nl> + <nl> + final Configuration checkConfig = getCheckConfig ( " SeparatorWrap " , " SeparatorWrapComma " ) ; <nl> + final String filePath = getPath ( " InputSeparatorWrapComma . java " ) ; <nl> + <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule485annotations / AnnotationLocationTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule485annotations / AnnotationLocationTest . java <nl> index f7b2a75 . . 4fcec4b 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule485annotations / AnnotationLocationTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule485annotations / AnnotationLocationTest . java <nl> @ @ - 41 , 7 + 41 , 8 @ @ public class AnnotationLocationTest extends BaseCheckTestSupport { <nl> <nl> final Class < AnnotationLocationCheck > clazz = AnnotationLocationCheck . class ; <nl> getCheckMessage ( clazz , " annotation . location . alone " ) ; <nl> - final Configuration checkConfig = getCheckConfig ( " AnnotationLocation " ) ; <nl> + final Configuration checkConfig = getCheckConfig ( " AnnotationLocation " , <nl> + " AnnotationLocationMostCases " ) ; <nl> <nl> final String msgLocationAlone = " annotation . location . alone " ; <nl> final String msgLocation = " annotation . location " ; <nl> @ @ - 64 , 4 + 65 , 24 @ @ public class AnnotationLocationTest extends BaseCheckTestSupport { <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void annotationTestVariables ( ) throws Exception { <nl> + <nl> + final Class < AnnotationLocationCheck > clazz = AnnotationLocationCheck . class ; <nl> + getCheckMessage ( clazz , " annotation . location . alone " ) ; <nl> + final Configuration checkConfig = getCheckConfig ( " AnnotationLocation " , <nl> + " AnnotationLocationVariables " ) ; <nl> + <nl> + final String msgLocationAlone = " annotation . location . alone " ; <nl> + final String msgLocation = " annotation . location " ; <nl> + final String [ ] expected = { <nl> + " 63 : " + getCheckMessage ( clazz , msgLocation , " MyAnnotation2 " , " 7 " , " 4 " ) , <nl> + } ; <nl> + <nl> + final String filePath = getPath ( " InputAnnotationLocationVariables . java " ) ; <nl> + <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / InputSeparatorWrapComma . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / InputSeparatorWrapComma . java <nl> new file mode 100644 <nl> index 0000000 . . 3d6677a <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / InputSeparatorWrapComma . java <nl> @ @ - 0 , 0 + 1 , 45 @ @ <nl> + package com . google . checkstyle . test . chapter4formatting . rule451wheretobreak ; <nl> + <nl> + public class InputSeparatorWrapComma { <nl> + public void goodCase ( ) <nl> + { <nl> + int i = 0 ; <nl> + String s = " ffffooooString " ; <nl> + s <nl> + . isEmpty ( ) ; / / ok <nl> + s . isEmpty ( ) ; <nl> + <nl> + foo ( i , <nl> + s ) ; / / ok <nl> + } <nl> + public static void foo ( int i , String s ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + <nl> + class badCaseComma { <nl> + <nl> + public void goodCase ( int . . . aFoo ) <nl> + { <nl> + int i = 0 ; <nl> + <nl> + String s = " ffffooooString " ; <nl> + boolean b = s . <nl> + isEmpty ( ) ; <nl> + foo ( i <nl> + , s ) ; / / warn <nl> + int [ ] j ; <nl> + } <nl> + public static String foo ( int i , String s ) <nl> + { <nl> + String maxLength = " 123 " ; <nl> + int truncationLength = 1 ; <nl> + CharSequence seq = null ; <nl> + Object truncationIndicator = null ; <nl> + return new StringBuilder ( maxLength ) <nl> + . append ( seq , 0 , truncationLength ) <nl> + . append ( truncationIndicator ) <nl> + . toString ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocation . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocation . java <nl> index 78cfb82 . . acd1750 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocation . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocation . java <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> package com . google . checkstyle . test . chapter4formatting . rule485annotations ; <nl> <nl> @ MyAnnotation2 @ MyAnnotation1 / / warn <nl> - class InputCorrectAnnotationIndentation <nl> + class InputAnnotationLocation <nl> { <nl> <nl> @ MyAnnotation2 @ MyAnnotation1 <nl> @ @ - 18 , 7 + 18 , 7 @ @ class InputCorrectAnnotationIndentation <nl> <nl> @ MyAnnotation2 <nl> @ MyAnnotation1 / / warn <nl> - public InputCorrectAnnotationIndentation ( ) { } <nl> + public InputAnnotationLocation ( ) { } <nl> <nl> @ MyAnnotationWithParam ( " foo " ) <nl> @ MyAnnotation2 void foo1 ( ) { } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocationVariables . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocationVariables . java <nl> new file mode 100644 <nl> index 0000000 . . 1175b7d <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocationVariables . java <nl> @ @ - 0 , 0 + 1 , 103 @ @ <nl> + package com . google . checkstyle . test . chapter4formatting . rule485annotations ; <nl> + <nl> + @ MyAnnotation2 @ MyAnnotation1 / / ok - in variables config <nl> + class InputAnnotationLocationVariables <nl> + { <nl> + <nl> + @ MyAnnotation2 @ MyAnnotation1 <nl> + public int a ; <nl> + <nl> + @ MyAnnotation1 public int b ; <nl> + <nl> + @ MyAnnotation2 <nl> + @ MyAnnotation1 <nl> + public int c ; <nl> + <nl> + @ MyAnnotation1 <nl> + public int d ; <nl> + <nl> + @ MyAnnotation2 <nl> + @ MyAnnotation1 / / ok - in variables config <nl> + public InputAnnotationLocationVariables ( ) { } <nl> + <nl> + @ MyAnnotationWithParam ( " foo " ) <nl> + @ MyAnnotation2 void foo1 ( ) { } <nl> + <nl> + @ MyAnnotation1 <nl> + @ MyAnnotation2 / / ok - in variables config <nl> + void foo2 ( ) { } <nl> + <nl> + @ MyAnnotation1 <nl> + @ MyAnnotation2 / / ok - in variables config <nl> + @ MyAnnotation3 / / ok - in variables configwarn <nl> + @ MyAnnotation4 / / ok - in variables config <nl> + class InnerClass <nl> + { <nl> + @ MyAnnotation2 @ MyAnnotation1 <nl> + public int a ; <nl> + <nl> + @ MyAnnotation1 public int b ; <nl> + <nl> + @ MyAnnotation2 <nl> + @ MyAnnotation1 <nl> + public int c ; <nl> + <nl> + @ MyAnnotation1 <nl> + public int d ; <nl> + <nl> + @ MyAnnotation2 <nl> + @ MyAnnotation1 public InnerClass ( ) <nl> + { <nl> + / / TODO Auto - generated constructor stub <nl> + } <nl> + @ MyAnnotation1 <nl> + @ MyAnnotation2 / / ok - in variables config <nl> + void foo1 ( ) { } <nl> + <nl> + @ MyAnnotation1 <nl> + @ MyAnnotation2 / / ok - in variables config <nl> + void foo2 ( ) { } <nl> + } <nl> + <nl> + @ MyAnnotation1 <nl> + @ MyAnnotation2 / / warn <nl> + InnerClass anon = new InnerClass ( ) <nl> + { <nl> + @ MyAnnotation2 @ MyAnnotation1 public int a ; <nl> + <nl> + @ MyAnnotation1 public int b ; <nl> + <nl> + @ MyAnnotation2 <nl> + @ MyAnnotation1 <nl> + public int c ; <nl> + <nl> + @ MyAnnotation1 <nl> + public int d ; <nl> + <nl> + @ MyAnnotation1 <nl> + @ MyAnnotation2 void foo1 ( ) { } / / ok - in variables config <nl> + <nl> + @ MyAnnotation1 <nl> + @ MyAnnotation2 / / ok - in variables config <nl> + void foo2 ( ) { } <nl> + <nl> + @ MyAnnotation1 void foo42 ( ) { } <nl> + } ; <nl> + <nl> + } <nl> + <nl> + @ MyAnnotation1 <nl> + @ MyAnnotation2 / / ok - in variables config <nl> + class FooVariables { } <nl> + <nl> + @ interface MyAnnotationVariables1 { } <nl> + <nl> + @ interface MyAnnotationVariables2 { } <nl> + <nl> + @ interface MyAnnotationVariables3 { } <nl> + <nl> + @ interface MyAnnotationVariables4 { } <nl> + <nl> + @ interface MyAnnotationWithParamVariables { <nl> + <nl> + 	 String value ( ) ; }

TEST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index ba7e33c . . fd27583 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 68 , 6 + 68 , 8 @ @ 
 < properties > 
 < ! - - JavadocMethodCheck is deprecated class , till it is redone to use JavadocAst - - > 
 < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocMethodCheck ' ] " / > 
 + < ! - - getDetails ( ) method is a huge SWITCH , it has to be monolithic - - > 
 + < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' getDetails ' and . . / . . / . . [ @ Image = ' RightCurlyCheck ' ] ] " / > 
 < / properties > 
 < / rule > 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 index e91df50 . . 11247c7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 @ @ - 50 , 6 + 50 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * { @ link TokenTypes # LITERAL _ DO LITERAL _ DO } . 
 * { @ link TokenTypes # STATIC _ INIT STATIC _ INIT } . 
 * { @ link TokenTypes # INSTANCE _ INIT INSTANCE _ INIT } . 
 + * { @ link TokenTypes # LAMBDA LAMBDA } . 
 * < / p > 
 * < p > 
 * < b > shouldStartLine < / b > - does the check need to check 
 @ @ - 160 , 6 + 161 , 7 @ @ public class RightCurlyCheck extends AbstractCheck { 
 TokenTypes . LITERAL _ DO , 
 TokenTypes . STATIC _ INIT , 
 TokenTypes . INSTANCE _ INIT , 
 + TokenTypes . LAMBDA , 
 } ; 
 } 
 
 @ @ - 321 , 10 + 323 , 10 @ @ public class RightCurlyCheck extends AbstractCheck { 
 * Collects validation details . 
 * @ param ast detail ast . 
 * @ return object that contain all details to make a validation . 
 + * @ noinspection SwitchStatementDensity 
 * / 
 - / / - @ cs [ JavaNCSS ] getDetails ( ) method is a huge SWITCH , it has to be monolithic 
 - / / - @ cs [ ExecutableStatementCount ] getDetails ( ) method is a huge SWITCH , it has to be monolithic 
 - / / - @ cs [ NPathComplexity ] getDetails ( ) method is a huge SWITCH , it has to be monolithic 
 + / / - @ cs [ JavaNCSS | ExecutableStatementCount | CyclomaticComplexity | NPathComplexity ] getDetails ( ) 
 + / / method is a huge SWITCH , it has to be monolithic 
 private static Details getDetails ( DetailAST ast ) { 
 / / Attempt to locate the tokens to do the check 
 boolean shouldCheckLastRcurly = false ; 
 @ @ - 400 , 6 + 402 , 18 @ @ public class RightCurlyCheck extends AbstractCheck { 
 rcurly = lcurly . getLastChild ( ) ; 
 } 
 break ; 
 + case TokenTypes . LAMBDA : 
 + lcurly = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 + nextToken = getNextToken ( ast ) ; 
 + if ( nextToken . getType ( ) ! = TokenTypes . RPAREN 
 + & & nextToken . getType ( ) ! = TokenTypes . COMMA ) { 
 + shouldCheckLastRcurly = true ; 
 + nextToken = getNextToken ( nextToken ) ; 
 + } 
 + if ( lcurly ! = null ) { 
 + rcurly = lcurly . getLastChild ( ) ; 
 + } 
 + break ; 
 default : 
 / / ATTENTION ! We have default here , but we expect case TokenTypes . METHOD _ DEF , 
 / / TokenTypes . LITERAL _ FOR , TokenTypes . LITERAL _ WHILE only . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 index ed8a9ca . . 81085f1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 @ @ - 360 , 4 + 360 , 48 @ @ public class RightCurlyCheckTest extends BaseCheckTestSupport { 
 } ; 
 verify ( checkConfig , getPath ( " InputRightCurlySingelineIfBlocks . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testRightCurlyIsAloneLambda ( ) throws Exception { 
 + checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; 
 + checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; 
 + final String [ ] expected = { 
 + " 14 : 74 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 74 ) , 
 + " 17 : 49 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 49 ) , 
 + " 35 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + " 45 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputRightCurlyAloneLambda . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testRightCurlyIsAloneOrSinglelineLambda ( ) throws Exception { 
 + checkConfig . addAttribute ( " option " , 
 + RightCurlyOption . ALONE _ OR _ SINGLELINE . toString ( ) ) ; 
 + checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; 
 + final String [ ] expected = { 
 + " 17 : 49 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 49 ) , 
 + " 35 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + " 45 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 + " 47 : 58 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 58 ) , 
 + } ; 
 + verify ( checkConfig , 
 + getPath ( " InputRightCurlyAloneOrSinglelineLambda . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testRightCurlyIsSameLambda ( ) throws Exception { 
 + checkConfig . addAttribute ( " option " , RightCurlyOption . SAME . toString ( ) ) ; 
 + checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; 
 + final String [ ] expected = { 
 + " 17 : 49 : " + getCheckMessage ( MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 49 ) , 
 + " 35 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + " 40 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ SAME , " } " , 13 ) , 
 + " 53 : 30 : " + getCheckMessage ( MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 30 ) , 
 + " 68 : 20 : " + getCheckMessage ( MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 20 ) , 
 + " 73 : 20 : " + getCheckMessage ( MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 20 ) , 
 + } ; 
 + verify ( checkConfig , 
 + getPath ( " InputRightCurlySameLambda . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index 3738076 . . 2d485bd 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 159 , 6 + 159 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 " ARRAY _ INIT " , 
 / / these are covered by GenericWhitespaceCheck 
 " WILDCARD _ TYPE " , " GENERIC _ END " , " GENERIC _ START " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " RightCurly " , Stream . of ( 
 + / / Until https : / / github . com / checkstyle / checkstyle / issues / 4177 
 + " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; 
 
 / / google 
 GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " AnnotationLocation " , Stream . of ( 
 @ @ - 216 , 6 + 219 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 / / state of the configuration when test was made until 
 / / https : / / github . com / checkstyle / checkstyle / issues / 4122 
 " COLON " , " TYPE _ EXTENSION _ AND " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " RightCurly " , Stream . of ( 
 + / / Until https : / / github . com / checkstyle / checkstyle / issues / 4178 
 + " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneLambda . java 
 new file mode 100644 
 index 0000000 . . bc76452 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneLambda . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . Stream ; 
 + 
 + public class InputRightCurlyAloneLambda { 
 + 
 + static Runnable r1 = ( ) - > { 
 + String . valueOf ( " Test rightCurly one ! " ) ; 
 + } ; 
 + 
 + static Runnable r2 = ( ) - > String . valueOf ( " Test rightCurly two ! " ) ; 
 + 
 + static Runnable r3 = ( ) - > { String . valueOf ( " Test rightCurly three ! " ) ; } ; / / violation 
 + 
 + static Runnable r4 = ( ) - > { 
 + String . valueOf ( " Test rightCurly four ! " ) ; } ; / / violation 
 + 
 + static Runnable r5 = ( ) - > 
 + { 
 + String . valueOf ( " Test rightCurly five ! " ) ; 
 + } ; 
 + 
 + static Runnable r6 = ( ) - > { } ; 
 + 
 + static Runnable r7 = ( ) - > { 
 + } ; 
 + 
 + static Runnable r8 = ( ) - > 
 + { 
 + } ; 
 + 
 + static Runnable r9 = ( ) - > { 
 + String . valueOf ( " Test rightCurly nine ! " ) ; 
 + } ; int i ; / / violation 
 + 
 + void foo1 ( ) { 
 + Stream . of ( " Hello " ) . filter ( s - > { 
 + return s ! = null ; 
 + } 
 + ) . collect ( Collectors . toList ( ) ) ; 
 + 
 + Stream . of ( " Hello " ) . filter ( s - > { 
 + return s ! = null ; 
 + } ) . collect ( Collectors . toList ( ) ) ; / / violation 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneOrSinglelineLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneOrSinglelineLambda . java 
 new file mode 100644 
 index 0000000 . . 9c4a300 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneOrSinglelineLambda . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . Stream ; 
 + 
 + public class InputRightCurlyAloneOrSinglelineLambda { 
 + 
 + static Runnable r1 = ( ) - > { 
 + String . valueOf ( " Test rightCurly one ! " ) ; 
 + } ; 
 + 
 + static Runnable r2 = ( ) - > String . valueOf ( " Test rightCurly two ! " ) ; 
 + 
 + static Runnable r3 = ( ) - > { String . valueOf ( " Test rightCurly three ! " ) ; } ; 
 + 
 + static Runnable r4 = ( ) - > { 
 + String . valueOf ( " Test rightCurly four ! " ) ; } ; / / violation 
 + 
 + static Runnable r5 = ( ) - > 
 + { 
 + String . valueOf ( " Test rightCurly five ! " ) ; 
 + } ; 
 + 
 + static Runnable r6 = ( ) - > { } ; 
 + 
 + static Runnable r7 = ( ) - > { 
 + } ; 
 + 
 + static Runnable r8 = ( ) - > 
 + { 
 + } ; 
 + 
 + static Runnable r9 = ( ) - > { 
 + String . valueOf ( " Test rightCurly nine ! " ) ; 
 + } ; int i ; / / violation 
 + 
 + void foo1 ( ) { 
 + Stream . of ( " Hello " ) . filter ( s - > { 
 + return s ! = null ; 
 + } 
 + ) . collect ( Collectors . toList ( ) ) ; 
 + 
 + Stream . of ( " Hello " ) . filter ( s - > { 
 + return s ! = null ; 
 + } ) . collect ( Collectors . toList ( ) ) ; / / violation 
 + 
 + Stream . of ( " Hello " ) . filter ( s - > { return s ! = null ; } ) . collect ( Collectors . toList ( ) ) ; / / violation 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlySameLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlySameLambda . java 
 new file mode 100644 
 index 0000000 . . 2165563 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlySameLambda . java 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . Stream ; 
 + 
 + public class InputRightCurlySameLambda { 
 + 
 + static Runnable r1 = ( ) - > { 
 + String . valueOf ( " Test rightCurly one ! " ) ; 
 + } ; 
 + 
 + static Runnable r2 = ( ) - > String . valueOf ( " Test rightCurly two ! " ) ; 
 + 
 + static Runnable r3 = ( ) - > { String . valueOf ( " Test rightCurly three ! " ) ; } ; 
 + 
 + static Runnable r4 = ( ) - > { 
 + String . valueOf ( " Test rightCurly four ! " ) ; } ; / / violation 
 + 
 + static Runnable r5 = ( ) - > 
 + { 
 + String . valueOf ( " Test rightCurly five ! " ) ; 
 + } ; 
 + 
 + static Runnable r6 = ( ) - > { } ; 
 + 
 + static Runnable r7 = ( ) - > { 
 + } ; 
 + 
 + static Runnable r8 = ( ) - > 
 + { 
 + } ; 
 + 
 + static Runnable r9 = ( ) - > { 
 + String . valueOf ( " Test rightCurly nine ! " ) ; 
 + } ; int i ; / / violation 
 + 
 + void foo1 ( ) { 
 + Stream . of ( " Hello " ) . filter ( s - > { 
 + return s ! = null ; 
 + } / / violation 
 + ) . collect ( Collectors . toList ( ) ) ; 
 + 
 + Stream . of ( " Hello " ) . filter ( s - > { 
 + return s ! = null ; 
 + } ) . collect ( Collectors . toList ( ) ) ; 
 + 
 + Stream . of ( " Hello " ) . filter ( s - > { return s ! = null ; } ) 
 + . collect ( Collectors . toList ( ) ) ; 
 + 
 + Stream . of ( " Hello " ) . filter ( s - > { return s ! = null ; } ) . collect ( Collectors . toList ( ) ) ; 
 + 
 + Stream . of ( " Hello " ) . filter ( s - > { 
 + return s ! = null ; } ) . collect ( Collectors . toList ( ) ) ; / / violation 
 + 
 + bar ( ( ) - > { return ; } , ( ) - > { return ; } ) ; 
 + 
 + bar ( ( ) - > { 
 + return ; 
 + } , ( ) - > { return ; } ) ; 
 + 
 + bar ( ( ) - > { 
 + return ; 
 + } , ( ) - > { 
 + return ; 
 + } ) ; 
 + 
 + bar ( ( ) - > { 
 + return ; } , ( ) - > { return ; } ) ; / / violation 
 + 
 + bar ( ( ) - > { 
 + return ; 
 + } , ( ) - > { 
 + return ; } ) ; / / violation 
 + 
 + } 
 + 
 + void bar ( Runnable r1 , Runnable r2 ) { } 
 + } 
 diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml 
 index 4f157e5 . . 51c8d33 100644 
 - - - a / src / xdocs / config _ blocks . xml 
 + + + b / src / xdocs / config _ blocks . xml 
 @ @ - 799 , 7 + 799 , 9 @ @ for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK 
 < a 
 href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ INIT " > STATIC _ INIT < / a > , 
 < a 
 - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INSTANCE _ INIT " > INSTANCE _ INIT < / a > . < / td > 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INSTANCE _ INIT " > INSTANCE _ INIT < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > LAMBDA < / a > . < / td > 
 
 < td > < a 
 href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ TRY " > LITERAL _ TRY < / a > ,

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index 478d15d . . c70b8d0 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 260 , 8 + 260 , 7 @ @ public class BaseCheckTestSupport { 
 result = configs . get ( 0 ) ; 
 } 
 else { 
 - result = configs . get ( 0 ) ; 
 - / / throw new IllegalStateException ( " multiple instances of the same Check are detected " ) ; 
 + throw new IllegalStateException ( " multiple instances of the same Check are detected " ) ; 
 } 
 return result ; 
 } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 index 16b3d91 . . f0dac8e 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public class RightCurlyTest extends BaseCheckTestSupport { 
 " 79 : 27 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 27 ) , 
 } ; 
 
 - final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; 
 + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlySame " ) ; 
 final String filePath = getPath ( " InputRightCurlyOther . java " ) ; 
 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 @ @ - 61 , 7 + 61 , 7 @ @ public class RightCurlyTest extends BaseCheckTestSupport { 
 public void rightCurlyTestSame ( ) throws Exception { 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 - final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; 
 + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlySame " ) ; 
 final String filePath = getPath ( " InputRightCurlySame . java " ) ; 
 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 @ @ - 76 , 7 + 76 , 7 @ @ public class RightCurlyTest extends BaseCheckTestSupport { 
 " 83 : 9 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 9 ) , 
 } ; 
 
 - final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; 
 + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlySame " ) ; 
 final String filePath = getPath ( " InputRightCurlyDoWhile . java " ) ; 
 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / SeparatorWrapTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / SeparatorWrapTest . java 
 index b82e401 . . 1294efc 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / SeparatorWrapTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / SeparatorWrapTest . java 
 @ @ - 37 , 16 + 37 , 30 @ @ public class SeparatorWrapTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void separatorWrapTest ( ) throws Exception { 
 + public void separatorWrapDotTest ( ) throws Exception { 
 
 final String [ ] expected = { 
 " 28 : 30 : " + getCheckMessage ( SeparatorWrapCheck . class , " line . new " , " . " ) , 
 } ; 
 
 - final Configuration checkConfig = getCheckConfig ( " SeparatorWrap " ) ; 
 + final Configuration checkConfig = getCheckConfig ( " SeparatorWrap " , " SeparatorWrapDot " ) ; 
 final String filePath = getPath ( " InputSeparatorWrap . java " ) ; 
 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 + 
 + @ Test 
 + public void separatorWrapCommaTest ( ) throws Exception { 
 + 
 + final String [ ] expected = { 
 + " 31 : 17 : " + getCheckMessage ( SeparatorWrapCheck . class , " line . previous " , " , " ) , 
 + } ; 
 + 
 + final Configuration checkConfig = getCheckConfig ( " SeparatorWrap " , " SeparatorWrapComma " ) ; 
 + final String filePath = getPath ( " InputSeparatorWrapComma . java " ) ; 
 + 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule485annotations / AnnotationLocationTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule485annotations / AnnotationLocationTest . java 
 index f7b2a75 . . 4fcec4b 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule485annotations / AnnotationLocationTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule485annotations / AnnotationLocationTest . java 
 @ @ - 41 , 7 + 41 , 8 @ @ public class AnnotationLocationTest extends BaseCheckTestSupport { 
 
 final Class < AnnotationLocationCheck > clazz = AnnotationLocationCheck . class ; 
 getCheckMessage ( clazz , " annotation . location . alone " ) ; 
 - final Configuration checkConfig = getCheckConfig ( " AnnotationLocation " ) ; 
 + final Configuration checkConfig = getCheckConfig ( " AnnotationLocation " , 
 + " AnnotationLocationMostCases " ) ; 
 
 final String msgLocationAlone = " annotation . location . alone " ; 
 final String msgLocation = " annotation . location " ; 
 @ @ - 64 , 4 + 65 , 24 @ @ public class AnnotationLocationTest extends BaseCheckTestSupport { 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 + 
 + @ Test 
 + public void annotationTestVariables ( ) throws Exception { 
 + 
 + final Class < AnnotationLocationCheck > clazz = AnnotationLocationCheck . class ; 
 + getCheckMessage ( clazz , " annotation . location . alone " ) ; 
 + final Configuration checkConfig = getCheckConfig ( " AnnotationLocation " , 
 + " AnnotationLocationVariables " ) ; 
 + 
 + final String msgLocationAlone = " annotation . location . alone " ; 
 + final String msgLocation = " annotation . location " ; 
 + final String [ ] expected = { 
 + " 63 : " + getCheckMessage ( clazz , msgLocation , " MyAnnotation2 " , " 7 " , " 4 " ) , 
 + } ; 
 + 
 + final String filePath = getPath ( " InputAnnotationLocationVariables . java " ) ; 
 + 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / InputSeparatorWrapComma . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / InputSeparatorWrapComma . java 
 new file mode 100644 
 index 0000000 . . 3d6677a 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule451wheretobreak / InputSeparatorWrapComma . java 
 @ @ - 0 , 0 + 1 , 45 @ @ 
 + package com . google . checkstyle . test . chapter4formatting . rule451wheretobreak ; 
 + 
 + public class InputSeparatorWrapComma { 
 + public void goodCase ( ) 
 + { 
 + int i = 0 ; 
 + String s = " ffffooooString " ; 
 + s 
 + . isEmpty ( ) ; / / ok 
 + s . isEmpty ( ) ; 
 + 
 + foo ( i , 
 + s ) ; / / ok 
 + } 
 + public static void foo ( int i , String s ) 
 + { 
 + 
 + } 
 + } 
 + 
 + class badCaseComma { 
 + 
 + public void goodCase ( int . . . aFoo ) 
 + { 
 + int i = 0 ; 
 + 
 + String s = " ffffooooString " ; 
 + boolean b = s . 
 + isEmpty ( ) ; 
 + foo ( i 
 + , s ) ; / / warn 
 + int [ ] j ; 
 + } 
 + public static String foo ( int i , String s ) 
 + { 
 + String maxLength = " 123 " ; 
 + int truncationLength = 1 ; 
 + CharSequence seq = null ; 
 + Object truncationIndicator = null ; 
 + return new StringBuilder ( maxLength ) 
 + . append ( seq , 0 , truncationLength ) 
 + . append ( truncationIndicator ) 
 + . toString ( ) ; 
 + } 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocation . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocation . java 
 index 78cfb82 . . acd1750 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocation . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocation . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package com . google . checkstyle . test . chapter4formatting . rule485annotations ; 
 
 @ MyAnnotation2 @ MyAnnotation1 / / warn 
 - class InputCorrectAnnotationIndentation 
 + class InputAnnotationLocation 
 { 
 
 @ MyAnnotation2 @ MyAnnotation1 
 @ @ - 18 , 7 + 18 , 7 @ @ class InputCorrectAnnotationIndentation 
 
 @ MyAnnotation2 
 @ MyAnnotation1 / / warn 
 - public InputCorrectAnnotationIndentation ( ) { } 
 + public InputAnnotationLocation ( ) { } 
 
 @ MyAnnotationWithParam ( " foo " ) 
 @ MyAnnotation2 void foo1 ( ) { } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocationVariables . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocationVariables . java 
 new file mode 100644 
 index 0000000 . . 1175b7d 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule485annotations / InputAnnotationLocationVariables . java 
 @ @ - 0 , 0 + 1 , 103 @ @ 
 + package com . google . checkstyle . test . chapter4formatting . rule485annotations ; 
 + 
 + @ MyAnnotation2 @ MyAnnotation1 / / ok - in variables config 
 + class InputAnnotationLocationVariables 
 + { 
 + 
 + @ MyAnnotation2 @ MyAnnotation1 
 + public int a ; 
 + 
 + @ MyAnnotation1 public int b ; 
 + 
 + @ MyAnnotation2 
 + @ MyAnnotation1 
 + public int c ; 
 + 
 + @ MyAnnotation1 
 + public int d ; 
 + 
 + @ MyAnnotation2 
 + @ MyAnnotation1 / / ok - in variables config 
 + public InputAnnotationLocationVariables ( ) { } 
 + 
 + @ MyAnnotationWithParam ( " foo " ) 
 + @ MyAnnotation2 void foo1 ( ) { } 
 + 
 + @ MyAnnotation1 
 + @ MyAnnotation2 / / ok - in variables config 
 + void foo2 ( ) { } 
 + 
 + @ MyAnnotation1 
 + @ MyAnnotation2 / / ok - in variables config 
 + @ MyAnnotation3 / / ok - in variables configwarn 
 + @ MyAnnotation4 / / ok - in variables config 
 + class InnerClass 
 + { 
 + @ MyAnnotation2 @ MyAnnotation1 
 + public int a ; 
 + 
 + @ MyAnnotation1 public int b ; 
 + 
 + @ MyAnnotation2 
 + @ MyAnnotation1 
 + public int c ; 
 + 
 + @ MyAnnotation1 
 + public int d ; 
 + 
 + @ MyAnnotation2 
 + @ MyAnnotation1 public InnerClass ( ) 
 + { 
 + / / TODO Auto - generated constructor stub 
 + } 
 + @ MyAnnotation1 
 + @ MyAnnotation2 / / ok - in variables config 
 + void foo1 ( ) { } 
 + 
 + @ MyAnnotation1 
 + @ MyAnnotation2 / / ok - in variables config 
 + void foo2 ( ) { } 
 + } 
 + 
 + @ MyAnnotation1 
 + @ MyAnnotation2 / / warn 
 + InnerClass anon = new InnerClass ( ) 
 + { 
 + @ MyAnnotation2 @ MyAnnotation1 public int a ; 
 + 
 + @ MyAnnotation1 public int b ; 
 + 
 + @ MyAnnotation2 
 + @ MyAnnotation1 
 + public int c ; 
 + 
 + @ MyAnnotation1 
 + public int d ; 
 + 
 + @ MyAnnotation1 
 + @ MyAnnotation2 void foo1 ( ) { } / / ok - in variables config 
 + 
 + @ MyAnnotation1 
 + @ MyAnnotation2 / / ok - in variables config 
 + void foo2 ( ) { } 
 + 
 + @ MyAnnotation1 void foo42 ( ) { } 
 + } ; 
 + 
 + } 
 + 
 + @ MyAnnotation1 
 + @ MyAnnotation2 / / ok - in variables config 
 + class FooVariables { } 
 + 
 + @ interface MyAnnotationVariables1 { } 
 + 
 + @ interface MyAnnotationVariables2 { } 
 + 
 + @ interface MyAnnotationVariables3 { } 
 + 
 + @ interface MyAnnotationVariables4 { } 
 + 
 + @ interface MyAnnotationWithParamVariables { 
 + 
 + 	 String value ( ) ; }
