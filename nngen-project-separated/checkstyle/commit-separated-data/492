BLEU SCORE: 0.02735488212061132

TEST MSG: Issue # 5264 : clear filesets on checker destroy
GENERATED MSG: Provided UT for all checks to test with default configuration , issue # 655

TEST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 5b13c02 . . c35ca45 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 333 , 7 + 333 , 7 @ @ isolated classes and we cannot put them to separate package as it will affect us <nl> < / inspection _ tool > <nl> < inspection _ tool class = " ClassWithOnlyPrivateConstructors " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ClassWithTooManyDependencies " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> - < option name = " limit " value = " 36 " / > <nl> + < option name = " limit " value = " 37 " / > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " ClassWithTooManyDependents " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < option name = " limit " value = " 300 " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index ca8c4fd . . 80cff62 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 172 , 6 + 172 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod <nl> @ Override <nl> public void destroy ( ) { <nl> listeners . clear ( ) ; <nl> + fileSetChecks . clear ( ) ; <nl> beforeExecutionFileFilters . clear ( ) ; <nl> filters . clear ( ) ; <nl> if ( cache ! = null ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 8fed3a1 . . 2a0894d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 87 , 6 + 87 , 7 @ @ import com . puppycrawl . tools . checkstyle . filters . SuppressionFilter ; <nl> import com . puppycrawl . tools . checkstyle . internal . testmodules . DebugAuditAdapter ; <nl> import com . puppycrawl . tools . checkstyle . internal . testmodules . DebugFilter ; <nl> import com . puppycrawl . tools . checkstyle . internal . testmodules . TestBeforeExecutionFileFilter ; <nl> + import com . puppycrawl . tools . checkstyle . internal . testmodules . TestFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . internal . utils . CloseAndFlushTestByteArrayOutputStream ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 119 , 21 + 120 , 24 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> final Checker checker = new Checker ( ) ; <nl> final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; <nl> checker . addListener ( auditAdapter ) ; <nl> + final TestFileSetCheck fileSet = new TestFileSetCheck ( ) ; <nl> + checker . addFileSetCheck ( fileSet ) ; <nl> final DebugFilter filter = new DebugFilter ( ) ; <nl> checker . addFilter ( filter ) ; <nl> final TestBeforeExecutionFileFilter fileFilter = new TestBeforeExecutionFileFilter ( ) ; <nl> checker . addBeforeExecutionFileFilter ( fileFilter ) ; <nl> <nl> - / / should remove al listeners and filters <nl> + / / should remove all listeners , file sets , and filters <nl> checker . destroy ( ) ; <nl> <nl> - checker . process ( Collections . singletonList ( new File ( " Some File Name " ) ) ) ; <nl> + checker . process ( Collections . singletonList ( temporaryFolder . newFile ( ) ) ) ; <nl> final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; <nl> messages . add ( new LocalizedMessage ( 0 , 0 , " a Bundle " , " message . key " , <nl> new Object [ ] { " arg " } , null , getClass ( ) , null ) ) ; <nl> checker . fireErrors ( " Some File Name " , messages ) ; <nl> <nl> assertFalse ( " Checker . destroy ( ) doesn ' t remove listeners . " , auditAdapter . wasCalled ( ) ) ; <nl> + assertFalse ( " Checker . destroy ( ) doesn ' t remove file sets . " , fileSet . wasCalled ( ) ) ; <nl> assertFalse ( " Checker . destroy ( ) doesn ' t remove filters . " , filter . wasCalled ( ) ) ; <nl> assertFalse ( " Checker . destroy ( ) doesn ' t remove file filters . " , fileFilter . wasCalled ( ) ) ; <nl> } <nl> @ @ - 784 , 6 + 788 , 9 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> + secondExternalResourceLocation ; <nl> check . setSecondExternalResourceLocation ( secondExternalResourceLocation ) ; <nl> <nl> + checker . addFileSetCheck ( check ) ; <nl> + checker . configure ( checkerConfig ) ; <nl> + <nl> verify ( checker , pathToEmptyFile , expected ) ; <nl> final Properties cacheAfterSecondRun = new Properties ( ) ; <nl> cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / TestFileSetCheck . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / TestFileSetCheck . java <nl> new file mode 100644 <nl> index 0000000 . . f5ea98b <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / TestFileSetCheck . java <nl> @ @ - 0 , 0 + 1 , 53 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . internal . testmodules ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> + <nl> + / * * <nl> + * @ noinspection ClassOnlyUsedInOnePackage <nl> + * / <nl> + public class TestFileSetCheck extends AbstractFileSetCheck { <nl> + private boolean called ; <nl> + <nl> + @ Override <nl> + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { <nl> + called = true ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if { @ link # processFiltered ( File , FileText ) } was called . <nl> + * @ return { @ code true } if it was called . <nl> + * / <nl> + public boolean wasCalled ( ) { <nl> + return called ; <nl> + } <nl> + <nl> + / * * <nl> + * Resets the check for testing . <nl> + * / <nl> + public void resetCheck ( ) { <nl> + called = false ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / CheckUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / CheckUtil . java <nl> index 6b969e7 . . be08981 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / CheckUtil . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / CheckUtil . java <nl> @ @ - 169 , 7 + 169 , 8 @ @ public final class CheckUtil { <nl> return classPath . getTopLevelClassesRecursive ( packageName ) . stream ( ) <nl> . map ( ClassPath . ClassInfo : : load ) <nl> . filter ( ModuleReflectionUtils : : isCheckstyleModule ) <nl> - . filter ( cls - > ! cls . getName ( ) . endsWith ( " Stub " ) ) <nl> + . filter ( cls - > ! cls . getCanonicalName ( ) <nl> + . startsWith ( " com . puppycrawl . tools . checkstyle . internal . testmodules " ) ) <nl> . filter ( cls - > ! cls . getCanonicalName ( ) <nl> . startsWith ( " com . puppycrawl . tools . checkstyle . packageobjectfactory " ) ) <nl> . collect ( Collectors . toSet ( ) ) ;
NEAREST DIFF (one line): diff - - git a / src / site / resources / js / anchors . js b / src / site / resources / js / anchors . js <nl> index 59c150a . . a6e9e75 100644 <nl> - - - a / src / site / resources / js / anchors . js <nl> + + + b / src / site / resources / js / anchors . js <nl> @ @ - 6 , 7 + 6 , 7 @ @ function main ( ) { <nl> var url = window . location . href ; <nl> var anchors = document . getElementsByTagName ( ' h2 ' ) ; <nl> var mass = [ ] ; <nl> - for ( var i = 0 ; i < anchors . length ; i + + ) { <nl> + for ( var i = 0 ; i < anchors . length ; i + + ) { <nl> mass . push ( anchors [ i ] . childNodes [ 0 ] . name ) ; <nl> } <nl> var links = [ ] ;

TEST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 5b13c02 . . c35ca45 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 333 , 7 + 333 , 7 @ @ isolated classes and we cannot put them to separate package as it will affect us 
 < / inspection _ tool > 
 < inspection _ tool class = " ClassWithOnlyPrivateConstructors " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ClassWithTooManyDependencies " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 - < option name = " limit " value = " 36 " / > 
 + < option name = " limit " value = " 37 " / > 
 < / inspection _ tool > 
 < inspection _ tool class = " ClassWithTooManyDependents " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < option name = " limit " value = " 300 " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index ca8c4fd . . 80cff62 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 172 , 6 + 172 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod 
 @ Override 
 public void destroy ( ) { 
 listeners . clear ( ) ; 
 + fileSetChecks . clear ( ) ; 
 beforeExecutionFileFilters . clear ( ) ; 
 filters . clear ( ) ; 
 if ( cache ! = null ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 8fed3a1 . . 2a0894d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 87 , 6 + 87 , 7 @ @ import com . puppycrawl . tools . checkstyle . filters . SuppressionFilter ; 
 import com . puppycrawl . tools . checkstyle . internal . testmodules . DebugAuditAdapter ; 
 import com . puppycrawl . tools . checkstyle . internal . testmodules . DebugFilter ; 
 import com . puppycrawl . tools . checkstyle . internal . testmodules . TestBeforeExecutionFileFilter ; 
 + import com . puppycrawl . tools . checkstyle . internal . testmodules . TestFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . internal . utils . CloseAndFlushTestByteArrayOutputStream ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 119 , 21 + 120 , 24 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 final Checker checker = new Checker ( ) ; 
 final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; 
 checker . addListener ( auditAdapter ) ; 
 + final TestFileSetCheck fileSet = new TestFileSetCheck ( ) ; 
 + checker . addFileSetCheck ( fileSet ) ; 
 final DebugFilter filter = new DebugFilter ( ) ; 
 checker . addFilter ( filter ) ; 
 final TestBeforeExecutionFileFilter fileFilter = new TestBeforeExecutionFileFilter ( ) ; 
 checker . addBeforeExecutionFileFilter ( fileFilter ) ; 
 
 - / / should remove al listeners and filters 
 + / / should remove all listeners , file sets , and filters 
 checker . destroy ( ) ; 
 
 - checker . process ( Collections . singletonList ( new File ( " Some File Name " ) ) ) ; 
 + checker . process ( Collections . singletonList ( temporaryFolder . newFile ( ) ) ) ; 
 final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; 
 messages . add ( new LocalizedMessage ( 0 , 0 , " a Bundle " , " message . key " , 
 new Object [ ] { " arg " } , null , getClass ( ) , null ) ) ; 
 checker . fireErrors ( " Some File Name " , messages ) ; 
 
 assertFalse ( " Checker . destroy ( ) doesn ' t remove listeners . " , auditAdapter . wasCalled ( ) ) ; 
 + assertFalse ( " Checker . destroy ( ) doesn ' t remove file sets . " , fileSet . wasCalled ( ) ) ; 
 assertFalse ( " Checker . destroy ( ) doesn ' t remove filters . " , filter . wasCalled ( ) ) ; 
 assertFalse ( " Checker . destroy ( ) doesn ' t remove file filters . " , fileFilter . wasCalled ( ) ) ; 
 } 
 @ @ - 784 , 6 + 788 , 9 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 + secondExternalResourceLocation ; 
 check . setSecondExternalResourceLocation ( secondExternalResourceLocation ) ; 
 
 + checker . addFileSetCheck ( check ) ; 
 + checker . configure ( checkerConfig ) ; 
 + 
 verify ( checker , pathToEmptyFile , expected ) ; 
 final Properties cacheAfterSecondRun = new Properties ( ) ; 
 cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / TestFileSetCheck . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / TestFileSetCheck . java 
 new file mode 100644 
 index 0000000 . . f5ea98b 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / TestFileSetCheck . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . internal . testmodules ; 
 + 
 + import java . io . File ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 + 
 + / * * 
 + * @ noinspection ClassOnlyUsedInOnePackage 
 + * / 
 + public class TestFileSetCheck extends AbstractFileSetCheck { 
 + private boolean called ; 
 + 
 + @ Override 
 + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { 
 + called = true ; 
 + } 
 + 
 + / * * 
 + * Checks if { @ link # processFiltered ( File , FileText ) } was called . 
 + * @ return { @ code true } if it was called . 
 + * / 
 + public boolean wasCalled ( ) { 
 + return called ; 
 + } 
 + 
 + / * * 
 + * Resets the check for testing . 
 + * / 
 + public void resetCheck ( ) { 
 + called = false ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / CheckUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / CheckUtil . java 
 index 6b969e7 . . be08981 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / CheckUtil . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / CheckUtil . java 
 @ @ - 169 , 7 + 169 , 8 @ @ public final class CheckUtil { 
 return classPath . getTopLevelClassesRecursive ( packageName ) . stream ( ) 
 . map ( ClassPath . ClassInfo : : load ) 
 . filter ( ModuleReflectionUtils : : isCheckstyleModule ) 
 - . filter ( cls - > ! cls . getName ( ) . endsWith ( " Stub " ) ) 
 + . filter ( cls - > ! cls . getCanonicalName ( ) 
 + . startsWith ( " com . puppycrawl . tools . checkstyle . internal . testmodules " ) ) 
 . filter ( cls - > ! cls . getCanonicalName ( ) 
 . startsWith ( " com . puppycrawl . tools . checkstyle . packageobjectfactory " ) ) 
 . collect ( Collectors . toSet ( ) ) ;

NEAREST DIFF:
diff - - git a / src / site / resources / js / anchors . js b / src / site / resources / js / anchors . js 
 index 59c150a . . a6e9e75 100644 
 - - - a / src / site / resources / js / anchors . js 
 + + + b / src / site / resources / js / anchors . js 
 @ @ - 6 , 7 + 6 , 7 @ @ function main ( ) { 
 var url = window . location . href ; 
 var anchors = document . getElementsByTagName ( ' h2 ' ) ; 
 var mass = [ ] ; 
 - for ( var i = 0 ; i < anchors . length ; i + + ) { 
 + for ( var i = 0 ; i < anchors . length ; i + + ) { 
 mass . push ( anchors [ i ] . childNodes [ 0 ] . name ) ; 
 } 
 var links = [ ] ;
