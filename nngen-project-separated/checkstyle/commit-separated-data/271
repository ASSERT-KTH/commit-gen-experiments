BLEU SCORE: 0.04027248192421852

TEST MSG: Issue # 5831 : print cache sizes to keep them under control
GENERATED MSG: Revert " appveyor skip verify to let it cache maven repo "

TEST DIFF (one line): diff - - git a / appveyor . yml b / appveyor . yml <nl> index b13e656 . . bc8a939 100644 <nl> - - - a / appveyor . yml <nl> + + + b / appveyor . yml <nl> @ @ - 105 , 3 + 105 , 6 @ @ build _ script : <nl> - ps : get - content appveyor . cmd <nl> # We need to use cmd there as ps1 is failing each time error output appear from any command line <nl> - appveyor . cmd <nl> + - ps : echo " Size of caches ( bytes ) : " <nl> + - ps : Get - ChildItem - Recurse ' C : \ maven \ apache - maven - 3 . 2 . 5 ' | Measure - Object - Property Length - Sum <nl> + - ps : Get - ChildItem - Recurse ' C : \ Users \ appveyor \ . m2 ' | Measure - Object - Property Length - Sum
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> index d29c6f3 . . 4b0feec 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> @ @ - 22 , 33 + 22 , 32 @ @ public class OneStatementPerLineTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void oneStatmentTest ( ) throws Exception { <nl> + public void oneStatementTest ( ) throws Exception { <nl> <nl> String msg = getCheckMessage ( OneStatementPerLineCheck . class , " multiple . statements . line " ) ; <nl> <nl> final String [ ] expected = { <nl> " 6 : 59 : " + msg , <nl> - " 58 : 21 : " + msg , <nl> - " 60 : 21 : " + msg , <nl> - " 62 : 42 : " + msg , <nl> - " 65 : 25 : " + msg , <nl> - " 66 : 35 : " + msg , <nl> - " 76 : 14 : " + msg , <nl> - " 103 : 25 : " + msg , <nl> - " 105 : 25 : " + msg , <nl> - " 107 : 46 : " + msg , <nl> - " 110 : 29 : " + msg , <nl> - " 111 : 39 : " + msg , <nl> - " 119 : 15 : " + msg , <nl> - " 131 : 23 : " + msg , <nl> - " 146 : 59 : " + msg , <nl> - " 155 : 4 : " + msg , <nl> - " 186 : 19 : " + msg , <nl> - " 204 : 15 : " + msg , <nl> - " 212 : 15 : " + msg , <nl> - " 224 : 6 : " + msg , <nl> - " 233 : 22 : " + msg , <nl> - " 323 : 39 : " + msg , <nl> + " 50 : 21 : " + msg , <nl> + " 52 : 21 : " + msg , <nl> + " 54 : 42 : " + msg , <nl> + " 57 : 25 : " + msg , <nl> + " 58 : 35 : " + msg , <nl> + " 68 : 14 : " + msg , <nl> + " 95 : 25 : " + msg , <nl> + " 97 : 25 : " + msg , <nl> + " 99 : 46 : " + msg , <nl> + " 102 : 29 : " + msg , <nl> + " 103 : 39 : " + msg , <nl> + " 111 : 15 : " + msg , <nl> + " 123 : 23 : " + msg , <nl> + " 138 : 59 : " + msg , <nl> + " 170 : 19 : " + msg , <nl> + " 188 : 15 : " + msg , <nl> + " 196 : 15 : " + msg , <nl> + " 208 : 6 : " + msg , <nl> + " 217 : 22 : " + msg , <nl> + " 307 : 39 : " + msg , <nl> } ; <nl> <nl> Configuration checkConfig = builder . getCheckConfig ( " OneStatementPerLine " ) ; <nl> @ @ - 57 , 4 + 56 , 22 @ @ public class OneStatementPerLineTest extends BaseCheckTestSupport { <nl> Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void oneStatementNonCompilableInputTest ( ) throws Exception { <nl> + <nl> + String msg = getCheckMessage ( OneStatementPerLineCheck . class , " multiple . statements . line " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 24 : 6 : " + msg , <nl> + } ; <nl> + <nl> + Configuration checkConfig = builder . getCheckConfig ( " OneStatementPerLine " ) ; <nl> + String filePath = new File ( " src / test / resources - noncompilable / " <nl> + + " com / puppycrawl / tools / checkstyle / coding / " <nl> + + " InputOneStatementPerLineCheck . java " ) . getCanonicalPath ( ) ; <nl> + <nl> + Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineInput . java <nl> index 0029acd . . 9d3715f 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineInput . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineInput . java <nl> @ @ - 5 , 14 + 5 , 6 @ @ package com . google . checkstyle . test . chapter4formatting . rule43onestatement ; <nl> * / <nl> import java . io . EOFException ; import java . io . BufferedReader ; / / warn <nl> <nl> - / * * <nl> - * Two import statements and one ' empty ' statement <nl> - * which are not on the same line are legal . <nl> - * / <nl> - import java . lang . annotation . Annotation ; <nl> - ; <nl> - import java . lang . String ; <nl> - <nl> public class OneStatementPerLineInput { <nl> <nl> / * * <nl> @ @ - 147 , 14 + 139 , 6 @ @ public class OneStatementPerLineInput { <nl> } <nl> <nl> / * * <nl> - * According to java language specifications , <nl> - * statements end with ' ; ' . That is why ' ; ; ' <nl> - * may be considered as two empty statements on the same line <nl> - * and rises violation . <nl> - * / <nl> - ; ; / / warn <nl> - <nl> - / * * <nl> * One multiline assignment ( declaration ) statement <nl> * is legal . <nl> * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> index 4434755 . . df0ea4f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> @ @ - 27 , 19 + 27 , 20 @ @ import org . junit . Test ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> + import java . io . File ; <nl> + <nl> public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testMultiCaseClass ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( OneStatementPerLineCheck . class ) ; <nl> final String [ ] expected = { <nl> " 24 : 59 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 112 : 21 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 139 : 14 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 165 : 15 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 177 : 23 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 197 : 19 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 200 : 59 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 209 : 4 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 104 : 21 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 131 : 14 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 157 : 15 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 169 : 23 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 189 : 19 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 192 : 59 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> <nl> verify ( checkConfig , <nl> @ @ - 71 , 4 + 72 , 17 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> getPath ( " checks / coding / OneStatementPerLineCheckInput2 . java " ) , <nl> expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void oneStatementNonCompilableInputTest ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( OneStatementPerLineCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 24 : 6 : " + getCheckMessage ( MSG _ KEY ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , new File ( " src / test / resources - noncompilable / " <nl> + + " com / puppycrawl / tools / checkstyle / coding / " <nl> + + " InputOneStatementPerLineCheck . java " ) . getCanonicalPath ( ) , <nl> + expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 7cbc495 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + / * * <nl> + * This file contains test inputs for OneStatementPerLineCheckInput <nl> + * which cause compilation problem in Eclipse 4 . 2 . 2 but still <nl> + * must be tested . <nl> + * / <nl> + <nl> + / * * <nl> + * Two import statements and one ' empty ' statement <nl> + * which are not on the same line are legal . <nl> + * / <nl> + import java . lang . annotation . Annotation ; <nl> + ; <nl> + import java . lang . String ; <nl> + <nl> + public class OneStatementPerLineCheckInput { <nl> + / * * <nl> + * According to java language specifications , <nl> + * statements end with ' ; ' . That is why ' ; ; ' <nl> + * may be considered as two empty statements on the same line <nl> + * and rises violation . <nl> + * / <nl> + ; ; / / warn <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckInput . java <nl> index f203389 . . a7b74f5 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckInput . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckInput . java <nl> @ @ - 24 , 14 + 24 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import java . io . EOFException ; import java . io . BufferedReader ; <nl> <nl> / * * <nl> - * Two import statements and one ' empty ' statement <nl> - * which are not on the same line are legal . <nl> - * / <nl> - import java . lang . annotation . Annotation ; <nl> - ; <nl> - import java . lang . String ; <nl> - <nl> - / * * <nl> * This Class contains no logic , but serves as test - input for the unit tests for the <nl> * < code > OneStatementPerLineCheck < / code > - checkstyle enhancement . <nl> * @ author Alexander Jesse <nl> @ @ - 201 , 14 + 193 , 6 @ @ public class OneStatementPerLineCheckInput { <nl> } <nl> <nl> / * * <nl> - * According to java language specifications , <nl> - * statements end with ' ; ' . That is why ' ; ; ' <nl> - * may be considered as two empty statements on the same line <nl> - * and rises violation . <nl> - * / <nl> - ; ; <nl> - <nl> - / * * <nl> * This method contains break , while - loop <nl> * and for - loop statements . <nl> * /

TEST DIFF:
diff - - git a / appveyor . yml b / appveyor . yml 
 index b13e656 . . bc8a939 100644 
 - - - a / appveyor . yml 
 + + + b / appveyor . yml 
 @ @ - 105 , 3 + 105 , 6 @ @ build _ script : 
 - ps : get - content appveyor . cmd 
 # We need to use cmd there as ps1 is failing each time error output appear from any command line 
 - appveyor . cmd 
 + - ps : echo " Size of caches ( bytes ) : " 
 + - ps : Get - ChildItem - Recurse ' C : \ maven \ apache - maven - 3 . 2 . 5 ' | Measure - Object - Property Length - Sum 
 + - ps : Get - ChildItem - Recurse ' C : \ Users \ appveyor \ . m2 ' | Measure - Object - Property Length - Sum

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 index d29c6f3 . . 4b0feec 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 @ @ - 22 , 33 + 22 , 32 @ @ public class OneStatementPerLineTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void oneStatmentTest ( ) throws Exception { 
 + public void oneStatementTest ( ) throws Exception { 
 
 String msg = getCheckMessage ( OneStatementPerLineCheck . class , " multiple . statements . line " ) ; 
 
 final String [ ] expected = { 
 " 6 : 59 : " + msg , 
 - " 58 : 21 : " + msg , 
 - " 60 : 21 : " + msg , 
 - " 62 : 42 : " + msg , 
 - " 65 : 25 : " + msg , 
 - " 66 : 35 : " + msg , 
 - " 76 : 14 : " + msg , 
 - " 103 : 25 : " + msg , 
 - " 105 : 25 : " + msg , 
 - " 107 : 46 : " + msg , 
 - " 110 : 29 : " + msg , 
 - " 111 : 39 : " + msg , 
 - " 119 : 15 : " + msg , 
 - " 131 : 23 : " + msg , 
 - " 146 : 59 : " + msg , 
 - " 155 : 4 : " + msg , 
 - " 186 : 19 : " + msg , 
 - " 204 : 15 : " + msg , 
 - " 212 : 15 : " + msg , 
 - " 224 : 6 : " + msg , 
 - " 233 : 22 : " + msg , 
 - " 323 : 39 : " + msg , 
 + " 50 : 21 : " + msg , 
 + " 52 : 21 : " + msg , 
 + " 54 : 42 : " + msg , 
 + " 57 : 25 : " + msg , 
 + " 58 : 35 : " + msg , 
 + " 68 : 14 : " + msg , 
 + " 95 : 25 : " + msg , 
 + " 97 : 25 : " + msg , 
 + " 99 : 46 : " + msg , 
 + " 102 : 29 : " + msg , 
 + " 103 : 39 : " + msg , 
 + " 111 : 15 : " + msg , 
 + " 123 : 23 : " + msg , 
 + " 138 : 59 : " + msg , 
 + " 170 : 19 : " + msg , 
 + " 188 : 15 : " + msg , 
 + " 196 : 15 : " + msg , 
 + " 208 : 6 : " + msg , 
 + " 217 : 22 : " + msg , 
 + " 307 : 39 : " + msg , 
 } ; 
 
 Configuration checkConfig = builder . getCheckConfig ( " OneStatementPerLine " ) ; 
 @ @ - 57 , 4 + 56 , 22 @ @ public class OneStatementPerLineTest extends BaseCheckTestSupport { 
 Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 + 
 + @ Test 
 + public void oneStatementNonCompilableInputTest ( ) throws Exception { 
 + 
 + String msg = getCheckMessage ( OneStatementPerLineCheck . class , " multiple . statements . line " ) ; 
 + 
 + final String [ ] expected = { 
 + " 24 : 6 : " + msg , 
 + } ; 
 + 
 + Configuration checkConfig = builder . getCheckConfig ( " OneStatementPerLine " ) ; 
 + String filePath = new File ( " src / test / resources - noncompilable / " 
 + + " com / puppycrawl / tools / checkstyle / coding / " 
 + + " InputOneStatementPerLineCheck . java " ) . getCanonicalPath ( ) ; 
 + 
 + Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineInput . java 
 index 0029acd . . 9d3715f 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineInput . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineInput . java 
 @ @ - 5 , 14 + 5 , 6 @ @ package com . google . checkstyle . test . chapter4formatting . rule43onestatement ; 
 * / 
 import java . io . EOFException ; import java . io . BufferedReader ; / / warn 
 
 - / * * 
 - * Two import statements and one ' empty ' statement 
 - * which are not on the same line are legal . 
 - * / 
 - import java . lang . annotation . Annotation ; 
 - ; 
 - import java . lang . String ; 
 - 
 public class OneStatementPerLineInput { 
 
 / * * 
 @ @ - 147 , 14 + 139 , 6 @ @ public class OneStatementPerLineInput { 
 } 
 
 / * * 
 - * According to java language specifications , 
 - * statements end with ' ; ' . That is why ' ; ; ' 
 - * may be considered as two empty statements on the same line 
 - * and rises violation . 
 - * / 
 - ; ; / / warn 
 - 
 - / * * 
 * One multiline assignment ( declaration ) statement 
 * is legal . 
 * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 index 4434755 . . df0ea4f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 @ @ - 27 , 19 + 27 , 20 @ @ import org . junit . Test ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 + import java . io . File ; 
 + 
 public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 @ Test 
 public void testMultiCaseClass ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( OneStatementPerLineCheck . class ) ; 
 final String [ ] expected = { 
 " 24 : 59 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 112 : 21 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 139 : 14 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 165 : 15 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 177 : 23 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 197 : 19 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 200 : 59 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 209 : 4 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 104 : 21 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 131 : 14 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 157 : 15 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 169 : 23 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 189 : 19 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 192 : 59 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 
 verify ( checkConfig , 
 @ @ - 71 , 4 + 72 , 17 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 getPath ( " checks / coding / OneStatementPerLineCheckInput2 . java " ) , 
 expected ) ; 
 } 
 + 
 + @ Test 
 + public void oneStatementNonCompilableInputTest ( ) throws Exception { 
 + DefaultConfiguration checkConfig = createCheckConfig ( OneStatementPerLineCheck . class ) ; 
 + final String [ ] expected = { 
 + " 24 : 6 : " + getCheckMessage ( MSG _ KEY ) , 
 + } ; 
 + 
 + verify ( checkConfig , new File ( " src / test / resources - noncompilable / " 
 + + " com / puppycrawl / tools / checkstyle / coding / " 
 + + " InputOneStatementPerLineCheck . java " ) . getCanonicalPath ( ) , 
 + expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java 
 new file mode 100644 
 index 0000000 . . 7cbc495 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + / * * 
 + * This file contains test inputs for OneStatementPerLineCheckInput 
 + * which cause compilation problem in Eclipse 4 . 2 . 2 but still 
 + * must be tested . 
 + * / 
 + 
 + / * * 
 + * Two import statements and one ' empty ' statement 
 + * which are not on the same line are legal . 
 + * / 
 + import java . lang . annotation . Annotation ; 
 + ; 
 + import java . lang . String ; 
 + 
 + public class OneStatementPerLineCheckInput { 
 + / * * 
 + * According to java language specifications , 
 + * statements end with ' ; ' . That is why ' ; ; ' 
 + * may be considered as two empty statements on the same line 
 + * and rises violation . 
 + * / 
 + ; ; / / warn 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckInput . java 
 index f203389 . . a7b74f5 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckInput . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckInput . java 
 @ @ - 24 , 14 + 24 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import java . io . EOFException ; import java . io . BufferedReader ; 
 
 / * * 
 - * Two import statements and one ' empty ' statement 
 - * which are not on the same line are legal . 
 - * / 
 - import java . lang . annotation . Annotation ; 
 - ; 
 - import java . lang . String ; 
 - 
 - / * * 
 * This Class contains no logic , but serves as test - input for the unit tests for the 
 * < code > OneStatementPerLineCheck < / code > - checkstyle enhancement . 
 * @ author Alexander Jesse 
 @ @ - 201 , 14 + 193 , 6 @ @ public class OneStatementPerLineCheckInput { 
 } 
 
 / * * 
 - * According to java language specifications , 
 - * statements end with ' ; ' . That is why ' ; ; ' 
 - * may be considered as two empty statements on the same line 
 - * and rises violation . 
 - * / 
 - ; ; 
 - 
 - / * * 
 * This method contains break , while - loop 
 * and for - loop statements . 
 * /
