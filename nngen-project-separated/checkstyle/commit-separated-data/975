BLEU SCORE: 0.06315134024688128

TEST MSG: Issue # 3530 : allowed ant to override and swap checker
GENERATED MSG: Issue # 2109 : CLI should print a file name where exception is happen

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> index 7544928 . . 1aad917 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> @ @ - 46 , 13 + 46 , 15 @ @ import org . apache . tools . ant . types . Reference ; <nl> import com . google . common . io . Closeables ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . ConfigurationLoader ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultContext ; <nl> import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> + import com . puppycrawl . tools . checkstyle . ModuleFactory ; <nl> + import com . puppycrawl . tools . checkstyle . PackageObjectFactory ; <nl> import com . puppycrawl . tools . checkstyle . PropertiesExpander ; <nl> import com . puppycrawl . tools . checkstyle . XMLLogger ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . api . RootModule ; <nl> import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; <nl> import com . puppycrawl . tools . checkstyle . api . SeverityLevelCounter ; <nl> <nl> @ @ - 262 , 7 + 264 , 7 @ @ public class CheckstyleAntTask extends Task { <nl> } <nl> <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Setters for Checker configuration attributes <nl> + / / Setters for Root Module ' s configuration attributes <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> <nl> / * * <nl> @ @ - 316 , 45 + 318 , 45 @ @ public class CheckstyleAntTask extends Task { <nl> * @ param checkstyleVersion Checkstyle compile version . <nl> * / <nl> private void realExecute ( String checkstyleVersion ) { <nl> - / / Create the checker <nl> - Checker checker = null ; <nl> + / / Create the root module <nl> + RootModule rootModule = null ; <nl> try { <nl> - checker = createChecker ( ) ; <nl> + rootModule = createRootModule ( ) ; <nl> <nl> / / setup the listeners <nl> final AuditListener [ ] listeners = getListeners ( ) ; <nl> for ( AuditListener element : listeners ) { <nl> - checker . addListener ( element ) ; <nl> + rootModule . addListener ( element ) ; <nl> } <nl> final SeverityLevelCounter warningCounter = <nl> new SeverityLevelCounter ( SeverityLevel . WARNING ) ; <nl> - checker . addListener ( warningCounter ) ; <nl> + rootModule . addListener ( warningCounter ) ; <nl> <nl> - processFiles ( checker , warningCounter , checkstyleVersion ) ; <nl> + processFiles ( rootModule , warningCounter , checkstyleVersion ) ; <nl> } <nl> finally { <nl> - destroyChecker ( checker ) ; <nl> + destroyRootModule ( rootModule ) ; <nl> } <nl> } <nl> <nl> / * * <nl> - * Destroy Checker . This method exists only due to bug in cobertura library <nl> + * Destroy root module . This method exists only due to bug in cobertura library <nl> * https : / / github . com / cobertura / cobertura / issues / 170 <nl> - * @ param checker Checker that was used to process files <nl> + * @ param rootModule Root module that was used to process files <nl> * / <nl> - private static void destroyChecker ( Checker checker ) { <nl> - if ( checker ! = null ) { <nl> - checker . destroy ( ) ; <nl> + private static void destroyRootModule ( RootModule rootModule ) { <nl> + if ( rootModule ! = null ) { <nl> + rootModule . destroy ( ) ; <nl> } <nl> } <nl> <nl> / * * <nl> - * Scans and processes files by means given checker . <nl> - * @ param checker Checker to process files <nl> - * @ param warningCounter Checker ' s counter of warnings <nl> + * Scans and processes files by means given root module . <nl> + * @ param rootModule Root module to process files <nl> + * @ param warningCounter Root Module ' s counter of warnings <nl> * @ param checkstyleVersion Checkstyle compile version <nl> * / <nl> - private void processFiles ( Checker checker , final SeverityLevelCounter warningCounter , <nl> + private void processFiles ( RootModule rootModule , final SeverityLevelCounter warningCounter , <nl> final String checkstyleVersion ) { <nl> final long startTime = System . currentTimeMillis ( ) ; <nl> final List < File > files = scanFileSets ( ) ; <nl> @ @ - 370 , 7 + 372 , 7 @ @ public class CheckstyleAntTask extends Task { <nl> <nl> try { <nl> final long processingStartTime = System . currentTimeMillis ( ) ; <nl> - numErrs = checker . process ( files ) ; <nl> + numErrs = rootModule . process ( files ) ; <nl> final long processingEndTime = System . currentTimeMillis ( ) ; <nl> log ( " To process the files took " + ( processingEndTime - processingStartTime ) <nl> + TIME _ SUFFIX , Project . MSG _ VERBOSE ) ; <nl> @ @ - 397 , 11 + 399 , 11 @ @ public class CheckstyleAntTask extends Task { <nl> } <nl> <nl> / * * <nl> - * Creates new instance of { @ code Checker } . <nl> - * @ return new instance of { @ code Checker } <nl> + * Creates new instance of the root module . <nl> + * @ return new instance of the root module <nl> * / <nl> - private Checker createChecker ( ) { <nl> - final Checker checker ; <nl> + private RootModule createRootModule ( ) { <nl> + final RootModule rootModule ; <nl> try { <nl> final Properties props = createOverridingProperties ( ) ; <nl> final Configuration config = <nl> @ @ - 410 , 24 + 412 , 29 @ @ public class CheckstyleAntTask extends Task { <nl> new PropertiesExpander ( props ) , <nl> omitIgnoredModules ) ; <nl> <nl> - final DefaultContext context = new DefaultContext ( ) ; <nl> - final ClassLoader loader = new AntClassLoader ( getProject ( ) , <nl> - classpath ) ; <nl> - context . add ( " classloader " , loader ) ; <nl> - <nl> final ClassLoader moduleClassLoader = <nl> Checker . class . getClassLoader ( ) ; <nl> - context . add ( " moduleClassLoader " , moduleClassLoader ) ; <nl> <nl> - checker = new Checker ( ) ; <nl> - checker . contextualize ( context ) ; <nl> - checker . configure ( config ) ; <nl> + final ModuleFactory factory = new PackageObjectFactory ( <nl> + Checker . class . getPackage ( ) . getName ( ) + " . " , moduleClassLoader ) ; <nl> + <nl> + rootModule = ( RootModule ) factory . createModule ( config . getName ( ) ) ; <nl> + rootModule . setModuleClassLoader ( moduleClassLoader ) ; <nl> + <nl> + if ( rootModule instanceof Checker ) { <nl> + final ClassLoader loader = new AntClassLoader ( getProject ( ) , <nl> + classpath ) ; <nl> + <nl> + ( ( Checker ) rootModule ) . setClassLoader ( loader ) ; <nl> + } <nl> + <nl> + rootModule . configure ( config ) ; <nl> } <nl> catch ( final CheckstyleException ex ) { <nl> - throw new BuildException ( String . format ( Locale . ROOT , " Unable to create a Checker : " <nl> + throw new BuildException ( String . format ( Locale . ROOT , " Unable to create Root Module : " <nl> + " configLocation { % s } , classpath { % s } . " , configLocation , classpath ) , ex ) ; <nl> } <nl> - return checker ; <nl> + return rootModule ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 5a21726 . . 74cb890 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 802 , 6 + 802 , 8 @ @ public class MainTest { <nl> <nl> @ Test <nl> public void testCustomRootModule ( ) throws Exception { <nl> + TestRootModuleChecker . reset ( ) ; <nl> + <nl> exit . checkAssertionAfterwards ( ( ) - > { <nl> assertEquals ( " " , systemOut . getLog ( ) ) ; <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java <nl> index ec25e2e . . 2f5ac0d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java <nl> @ @ - 59 , 4 + 59 , 8 @ @ public class TestRootModuleChecker implements RootModule { <nl> public static boolean isProcessed ( ) { <nl> return processed ; <nl> } <nl> + <nl> + public static void reset ( ) { <nl> + processed = false ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> index 90fb8a6 . . 00b3a2a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ import org . powermock . api . mockito . PowerMockito ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> + import com . puppycrawl . tools . checkstyle . TestRootModuleChecker ; <nl> import com . puppycrawl . tools . checkstyle . XMLLogger ; <nl> <nl> public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> @ @ - 49 , 12 + 50 , 17 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> private static final String FLAWLESS _ INPUT = " ant / InputCheckstyleAntTaskFlawless . java " ; <nl> private static final String VIOLATED _ INPUT = " ant / InputCheckstyleAntTaskError . java " ; <nl> private static final String CONFIG _ FILE = " ant / ant _ task _ test _ checks . xml " ; <nl> + private static final String CUSTOM _ ROOT _ CONFIG _ FILE = " config - custom - root - module . xml " ; <nl> private static final String NOT _ EXISTING _ FILE = " target / not _ existing . xml " ; <nl> private static final String FAILURE _ PROPERTY _ VALUE = " myValue " ; <nl> <nl> private CheckstyleAntTask getCheckstyleAntTask ( ) throws IOException { <nl> + return getCheckstyleAntTask ( CONFIG _ FILE ) ; <nl> + } <nl> + <nl> + private CheckstyleAntTask getCheckstyleAntTask ( String configFile ) throws IOException { <nl> final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> - antTask . setConfig ( new File ( getPath ( CONFIG _ FILE ) ) ) ; <nl> + antTask . setConfig ( new File ( getPath ( configFile ) ) ) ; <nl> antTask . setProject ( new Project ( ) ) ; <nl> return antTask ; <nl> } <nl> @ @ - 67 , 6 + 73 , 17 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public final void testCustomRootModule ( ) throws IOException { <nl> + TestRootModuleChecker . reset ( ) ; <nl> + <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( CUSTOM _ ROOT _ CONFIG _ FILE ) ; <nl> + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + antTask . execute ( ) ; <nl> + <nl> + assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public final void testFileSet ( ) throws IOException { <nl> final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> final FileSet examinationFileSet = new FileSet ( ) ; <nl> @ @ - 100 , 7 + 117 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create a Checker : configLocation " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 115 , 7 + 132 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create a Checker : configLocation " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> index dae6cd4 . . 348d5d0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> public void testAllChecksWithDefaultConfiguration ( ) throws Exception { <nl> <nl> final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; <nl> - final String inputFilePath = " src / test / resources - noncompilable / " <nl> - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; <nl> + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> for ( Class < ? > check : checkstyleChecks ) { <nl> @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> / / Checks which have Check as a parent . <nl> if ( check . equals ( ImportControlCheck . class ) ) { <nl> / / ImportControlCheck must have the import control configuration file to avoid violation . <nl> - checkConfig . addAttribute ( " file " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; <nl> + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; <nl> } <nl> checker = createChecker ( checkConfig ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index cfa3873 . . c30edb7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> * @ author lkuehne <nl> * / <nl> public class ConfigurationLoaderTest { <nl> + private static String getConfigPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; <nl> + } <nl> <nl> private static Configuration loadConfiguration ( String name ) <nl> throws CheckstyleException { <nl> @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> private static Configuration loadConfiguration ( <nl> String name , Properties props ) throws CheckstyleException { <nl> - final String fName = <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; <nl> + final String fName = getConfigPath ( name ) ; <nl> <nl> return ConfigurationLoader . loadConfiguration ( <nl> fName , new PropertiesExpander ( props ) ) ; <nl> @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> / / load config that ' s only found in the classpath <nl> final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; <nl> + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; <nl> <nl> / / verify the root , and property substitution <nl> final Properties attributes = new Properties ( ) ; <nl> @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { <nl> final Properties props = new Properties ( ) ; <nl> props . setProperty ( " checkstyle . basedir " , " basedir " ) ; <nl> <nl> - final File file = new File ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; <nl> + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; <nl> @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( <nl> - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , <nl> + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ checker _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { <nl> @ SuppressWarnings ( " deprecation " ) <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - new FileInputStream ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) , <nl> + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 806a1c1 . . 3b7bf29 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { <nl> @ Rule <nl> public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; <nl> <nl> + private static String getPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; <nl> + } <nl> + <nl> + private static String getFilePath ( String filename ) throws IOException { <nl> + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { <nl> assertUtilsClassHasPrivateConstructor ( Main . class ) ; <nl> @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> final ResourceBundle compilationProperties = <nl> ResourceBundle . getBundle ( " checkstylecompilation " ) ; <nl> String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; <nl> @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : " <nl> + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : error : " <nl> + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " config - classname2 - error . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> + " - p " , getPath ( " mycheckstyle . properties " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> " - p " , " nonexisting . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - Incorrect . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { <nl> <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; <nl> @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; <nl> + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , <nl> + getPath ( " checks / metrics " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> new file mode 100644 <nl> index 0000000 . . 3bdfcad <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE import - control PUBLIC <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " <nl> + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > <nl> + <nl> + < import - control pkg = " com " > <nl> + < allow class = " some . class " / > <nl> + < disallow class = " another . class " local - only = " true " / > <nl> + < allow pkg = " some . pkg " / > <nl> + < disallow pkg = " another . pkg " local - only = " true " / > <nl> + < disallow pkg = " and . another . pkg " exact - match = " true " / > <nl> + < subpackage name = " puppycrawl " > <nl> + < disallow pkg = " some . pkg " / > <nl> + < disallow class = " some . class " / > <nl> + < / subpackage > <nl> + < / import - control > <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 index 7544928 . . 1aad917 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 @ @ - 46 , 13 + 46 , 15 @ @ import org . apache . tools . ant . types . Reference ; 
 import com . google . common . io . Closeables ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . ConfigurationLoader ; 
 - import com . puppycrawl . tools . checkstyle . DefaultContext ; 
 import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 + import com . puppycrawl . tools . checkstyle . ModuleFactory ; 
 + import com . puppycrawl . tools . checkstyle . PackageObjectFactory ; 
 import com . puppycrawl . tools . checkstyle . PropertiesExpander ; 
 import com . puppycrawl . tools . checkstyle . XMLLogger ; 
 import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . api . RootModule ; 
 import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; 
 import com . puppycrawl . tools . checkstyle . api . SeverityLevelCounter ; 
 
 @ @ - 262 , 7 + 264 , 7 @ @ public class CheckstyleAntTask extends Task { 
 } 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Setters for Checker configuration attributes 
 + / / Setters for Root Module ' s configuration attributes 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 / * * 
 @ @ - 316 , 45 + 318 , 45 @ @ public class CheckstyleAntTask extends Task { 
 * @ param checkstyleVersion Checkstyle compile version . 
 * / 
 private void realExecute ( String checkstyleVersion ) { 
 - / / Create the checker 
 - Checker checker = null ; 
 + / / Create the root module 
 + RootModule rootModule = null ; 
 try { 
 - checker = createChecker ( ) ; 
 + rootModule = createRootModule ( ) ; 
 
 / / setup the listeners 
 final AuditListener [ ] listeners = getListeners ( ) ; 
 for ( AuditListener element : listeners ) { 
 - checker . addListener ( element ) ; 
 + rootModule . addListener ( element ) ; 
 } 
 final SeverityLevelCounter warningCounter = 
 new SeverityLevelCounter ( SeverityLevel . WARNING ) ; 
 - checker . addListener ( warningCounter ) ; 
 + rootModule . addListener ( warningCounter ) ; 
 
 - processFiles ( checker , warningCounter , checkstyleVersion ) ; 
 + processFiles ( rootModule , warningCounter , checkstyleVersion ) ; 
 } 
 finally { 
 - destroyChecker ( checker ) ; 
 + destroyRootModule ( rootModule ) ; 
 } 
 } 
 
 / * * 
 - * Destroy Checker . This method exists only due to bug in cobertura library 
 + * Destroy root module . This method exists only due to bug in cobertura library 
 * https : / / github . com / cobertura / cobertura / issues / 170 
 - * @ param checker Checker that was used to process files 
 + * @ param rootModule Root module that was used to process files 
 * / 
 - private static void destroyChecker ( Checker checker ) { 
 - if ( checker ! = null ) { 
 - checker . destroy ( ) ; 
 + private static void destroyRootModule ( RootModule rootModule ) { 
 + if ( rootModule ! = null ) { 
 + rootModule . destroy ( ) ; 
 } 
 } 
 
 / * * 
 - * Scans and processes files by means given checker . 
 - * @ param checker Checker to process files 
 - * @ param warningCounter Checker ' s counter of warnings 
 + * Scans and processes files by means given root module . 
 + * @ param rootModule Root module to process files 
 + * @ param warningCounter Root Module ' s counter of warnings 
 * @ param checkstyleVersion Checkstyle compile version 
 * / 
 - private void processFiles ( Checker checker , final SeverityLevelCounter warningCounter , 
 + private void processFiles ( RootModule rootModule , final SeverityLevelCounter warningCounter , 
 final String checkstyleVersion ) { 
 final long startTime = System . currentTimeMillis ( ) ; 
 final List < File > files = scanFileSets ( ) ; 
 @ @ - 370 , 7 + 372 , 7 @ @ public class CheckstyleAntTask extends Task { 
 
 try { 
 final long processingStartTime = System . currentTimeMillis ( ) ; 
 - numErrs = checker . process ( files ) ; 
 + numErrs = rootModule . process ( files ) ; 
 final long processingEndTime = System . currentTimeMillis ( ) ; 
 log ( " To process the files took " + ( processingEndTime - processingStartTime ) 
 + TIME _ SUFFIX , Project . MSG _ VERBOSE ) ; 
 @ @ - 397 , 11 + 399 , 11 @ @ public class CheckstyleAntTask extends Task { 
 } 
 
 / * * 
 - * Creates new instance of { @ code Checker } . 
 - * @ return new instance of { @ code Checker } 
 + * Creates new instance of the root module . 
 + * @ return new instance of the root module 
 * / 
 - private Checker createChecker ( ) { 
 - final Checker checker ; 
 + private RootModule createRootModule ( ) { 
 + final RootModule rootModule ; 
 try { 
 final Properties props = createOverridingProperties ( ) ; 
 final Configuration config = 
 @ @ - 410 , 24 + 412 , 29 @ @ public class CheckstyleAntTask extends Task { 
 new PropertiesExpander ( props ) , 
 omitIgnoredModules ) ; 
 
 - final DefaultContext context = new DefaultContext ( ) ; 
 - final ClassLoader loader = new AntClassLoader ( getProject ( ) , 
 - classpath ) ; 
 - context . add ( " classloader " , loader ) ; 
 - 
 final ClassLoader moduleClassLoader = 
 Checker . class . getClassLoader ( ) ; 
 - context . add ( " moduleClassLoader " , moduleClassLoader ) ; 
 
 - checker = new Checker ( ) ; 
 - checker . contextualize ( context ) ; 
 - checker . configure ( config ) ; 
 + final ModuleFactory factory = new PackageObjectFactory ( 
 + Checker . class . getPackage ( ) . getName ( ) + " . " , moduleClassLoader ) ; 
 + 
 + rootModule = ( RootModule ) factory . createModule ( config . getName ( ) ) ; 
 + rootModule . setModuleClassLoader ( moduleClassLoader ) ; 
 + 
 + if ( rootModule instanceof Checker ) { 
 + final ClassLoader loader = new AntClassLoader ( getProject ( ) , 
 + classpath ) ; 
 + 
 + ( ( Checker ) rootModule ) . setClassLoader ( loader ) ; 
 + } 
 + 
 + rootModule . configure ( config ) ; 
 } 
 catch ( final CheckstyleException ex ) { 
 - throw new BuildException ( String . format ( Locale . ROOT , " Unable to create a Checker : " 
 + throw new BuildException ( String . format ( Locale . ROOT , " Unable to create Root Module : " 
 + " configLocation { % s } , classpath { % s } . " , configLocation , classpath ) , ex ) ; 
 } 
 - return checker ; 
 + return rootModule ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 5a21726 . . 74cb890 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 802 , 6 + 802 , 8 @ @ public class MainTest { 
 
 @ Test 
 public void testCustomRootModule ( ) throws Exception { 
 + TestRootModuleChecker . reset ( ) ; 
 + 
 exit . checkAssertionAfterwards ( ( ) - > { 
 assertEquals ( " " , systemOut . getLog ( ) ) ; 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java 
 index ec25e2e . . 2f5ac0d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java 
 @ @ - 59 , 4 + 59 , 8 @ @ public class TestRootModuleChecker implements RootModule { 
 public static boolean isProcessed ( ) { 
 return processed ; 
 } 
 + 
 + public static void reset ( ) { 
 + processed = false ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 index 90fb8a6 . . 00b3a2a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 @ @ - 42 , 6 + 42 , 7 @ @ import org . powermock . api . mockito . PowerMockito ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 + import com . puppycrawl . tools . checkstyle . TestRootModuleChecker ; 
 import com . puppycrawl . tools . checkstyle . XMLLogger ; 
 
 public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 @ @ - 49 , 12 + 50 , 17 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 private static final String FLAWLESS _ INPUT = " ant / InputCheckstyleAntTaskFlawless . java " ; 
 private static final String VIOLATED _ INPUT = " ant / InputCheckstyleAntTaskError . java " ; 
 private static final String CONFIG _ FILE = " ant / ant _ task _ test _ checks . xml " ; 
 + private static final String CUSTOM _ ROOT _ CONFIG _ FILE = " config - custom - root - module . xml " ; 
 private static final String NOT _ EXISTING _ FILE = " target / not _ existing . xml " ; 
 private static final String FAILURE _ PROPERTY _ VALUE = " myValue " ; 
 
 private CheckstyleAntTask getCheckstyleAntTask ( ) throws IOException { 
 + return getCheckstyleAntTask ( CONFIG _ FILE ) ; 
 + } 
 + 
 + private CheckstyleAntTask getCheckstyleAntTask ( String configFile ) throws IOException { 
 final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 - antTask . setConfig ( new File ( getPath ( CONFIG _ FILE ) ) ) ; 
 + antTask . setConfig ( new File ( getPath ( configFile ) ) ) ; 
 antTask . setProject ( new Project ( ) ) ; 
 return antTask ; 
 } 
 @ @ - 67 , 6 + 73 , 17 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public final void testCustomRootModule ( ) throws IOException { 
 + TestRootModuleChecker . reset ( ) ; 
 + 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( CUSTOM _ ROOT _ CONFIG _ FILE ) ; 
 + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + antTask . execute ( ) ; 
 + 
 + assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; 
 + } 
 + 
 + @ Test 
 public final void testFileSet ( ) throws IOException { 
 final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 final FileSet examinationFileSet = new FileSet ( ) ; 
 @ @ - 100 , 7 + 117 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create a Checker : configLocation " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; 
 } 
 } 
 
 @ @ - 115 , 7 + 132 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create a Checker : configLocation " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 index dae6cd4 . . 348d5d0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 public void testAllChecksWithDefaultConfiguration ( ) throws Exception { 
 
 final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; 
 - final String inputFilePath = " src / test / resources - noncompilable / " 
 - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; 
 + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 for ( Class < ? > check : checkstyleChecks ) { 
 @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 / / Checks which have Check as a parent . 
 if ( check . equals ( ImportControlCheck . class ) ) { 
 / / ImportControlCheck must have the import control configuration file to avoid violation . 
 - checkConfig . addAttribute ( " file " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; 
 + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; 
 } 
 checker = createChecker ( checkConfig ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index cfa3873 . . c30edb7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 * @ author lkuehne 
 * / 
 public class ConfigurationLoaderTest { 
 + private static String getConfigPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; 
 + } 
 
 private static Configuration loadConfiguration ( String name ) 
 throws CheckstyleException { 
 @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { 
 
 private static Configuration loadConfiguration ( 
 String name , Properties props ) throws CheckstyleException { 
 - final String fName = 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; 
 + final String fName = getConfigPath ( name ) ; 
 
 return ConfigurationLoader . loadConfiguration ( 
 fName , new PropertiesExpander ( props ) ) ; 
 @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { 
 
 / / load config that ' s only found in the classpath 
 final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; 
 + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; 
 
 / / verify the root , and property substitution 
 final Properties attributes = new Properties ( ) ; 
 @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { 
 final Properties props = new Properties ( ) ; 
 props . setProperty ( " checkstyle . basedir " , " basedir " ) ; 
 
 - final File file = new File ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; 
 + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; 
 @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " , 
 + getConfigPath ( " config _ with _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( 
 - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , 
 + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ checker _ ignore . xml " , 
 + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { 
 @ SuppressWarnings ( " deprecation " ) 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - new FileInputStream ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) , 
 + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 806a1c1 . . 3b7bf29 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { 
 @ Rule 
 public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; 
 
 + private static String getPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; 
 + } 
 + 
 + private static String getFilePath ( String filename ) throws IOException { 
 + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; 
 + } 
 + 
 @ Test 
 public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { 
 assertUtilsClassHasPrivateConstructor ( Main . class ) ; 
 @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 final ResourceBundle compilationProperties = 
 ResourceBundle . getBundle ( " checkstylecompilation " ) ; 
 String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; 
 @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : " 
 + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : error : " 
 + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " config - classname2 - error . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 + " - p " , getPath ( " mycheckstyle . properties " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 " - p " , " nonexisting . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - Incorrect . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { 
 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; 
 StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; 
 @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; 
 + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , 
 + getPath ( " checks / metrics " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 new file mode 100644 
 index 0000000 . . 3bdfcad 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE import - control PUBLIC 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " 
 + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > 
 + 
 + < import - control pkg = " com " > 
 + < allow class = " some . class " / > 
 + < disallow class = " another . class " local - only = " true " / > 
 + < allow pkg = " some . pkg " / > 
 + < disallow pkg = " another . pkg " local - only = " true " / > 
 + < disallow pkg = " and . another . pkg " exact - match = " true " / > 
 + < subpackage name = " puppycrawl " > 
 + < disallow pkg = " some . pkg " / > 
 + < disallow class = " some . class " / > 
 + < / subpackage > 
 + < / import - control > 
 \ No newline at end of file
