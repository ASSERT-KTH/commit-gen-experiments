BLEU SCORE: 0.0688037070798893

TEST MSG: Issue # 3650 : Expand missing testing for PropertyCacheFile tests
GENERATED MSG: 100 % UTs coverage for PropertyCacheFile . Refactoring of PropertyCacheFile . # 1294

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 78e8799 . . a38973d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import java . io . IOError ; <nl> import java . io . IOException ; <nl> import java . io . UnsupportedEncodingException ; <nl> import java . lang . reflect . Method ; <nl> + import java . nio . file . Files ; <nl> import java . util . ArrayList ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> @ @ - 398 , 7 + 399 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testDestroyCacheWithWrongFileNameLength ( ) throws Exception { <nl> + public void testDestroyCheckerWithWrongCacheFileNameLength ( ) throws Exception { <nl> final Checker checker = new Checker ( ) ; <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> @ @ - 417 , 8 + 418 , 14 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> <nl> + / * * <nl> + * It is OK to have long test method name here as it describes the test purpose . <nl> + * @ noinspection InstanceMethodNamingConvention <nl> + * / <nl> @ Test <nl> - public void testCacheFile ( ) throws Exception { <nl> + public void testCacheAndCheckWhichDoesNotImplementExternalResourceHolderInterface ( ) <nl> + throws Exception { <nl> + assertFalse ( ExternalResourceHolder . class . isAssignableFrom ( HiddenFieldCheck . class ) ) ; <nl> final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> <nl> final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> @ @ - 427 , 35 + 434 , 9 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyleConfig " ) ; <nl> checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> checkerConfig . addChild ( treeWalkerConfig ) ; <nl> - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> - <nl> - final Checker checker = new Checker ( ) ; <nl> - final Locale locale = Locale . ROOT ; <nl> - checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> - <nl> - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - <nl> - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> - / / one more time to reuse cache <nl> - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testCacheFileChangeInConfig ( ) throws Exception { <nl> - final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> <nl> - final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> - treeWalkerConfig . addChild ( checkConfig ) ; <nl> - <nl> - final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; <nl> - checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> - checkerConfig . addChild ( treeWalkerConfig ) ; <nl> - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + final File cacheFile = temporaryFolder . newFile ( ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , cacheFile . getPath ( ) ) ; <nl> <nl> final Checker checker = new Checker ( ) ; <nl> final Locale locale = Locale . ROOT ; <nl> @ @ - 465 , 26 + 446 , 19 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> checker . configure ( checkerConfig ) ; <nl> checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> <nl> - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> + final File tmpFile = temporaryFolder . newFile ( " file . java " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; <nl> + final Properties cacheAfterFirstRun = new Properties ( ) ; <nl> + cacheAfterFirstRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> <nl> - / / update Checker config <nl> - checker . destroy ( ) ; <nl> - checker . configure ( checkerConfig ) ; <nl> - <nl> - final Checker otherChecker = new Checker ( ) ; <nl> - otherChecker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> - otherChecker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> - otherChecker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - otherChecker . configure ( checkerConfig ) ; <nl> - otherChecker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> - / / here is diff with previous checker <nl> - checkerConfig . addAttribute ( " fileExtensions " , " java , javax " ) ; <nl> + / / one more time to reuse cache <nl> + verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; <nl> + final Properties cacheAfterSecondRun = new Properties ( ) ; <nl> + cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> <nl> - / / one more time on updated config <nl> - verify ( otherChecker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + assertEquals ( cacheAfterFirstRun , cacheAfterSecondRun ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 494 , 12 + 468 , 30 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . setModuleFactory ( factory ) ; <nl> checker . configure ( createCheckConfig ( TranslationCheck . class ) ) ; <nl> - checker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + <nl> + final File cacheFile = temporaryFolder . newFile ( ) ; <nl> + checker . setCacheFile ( cacheFile . getPath ( ) ) ; <nl> + <nl> checker . setupChild ( createCheckConfig ( TranslationCheck . class ) ) ; <nl> - final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> - final List < File > files = new ArrayList < > ( ) ; <nl> - files . add ( file ) ; <nl> + final File tmpFile = temporaryFolder . newFile ( " file . java " ) ; <nl> + final List < File > files = new ArrayList < > ( 1 ) ; <nl> + files . add ( tmpFile ) ; <nl> checker . process ( files ) ; <nl> + <nl> + / / invoke destroy to persist cache <nl> + checker . destroy ( ) ; <nl> + <nl> + final Properties cache = new Properties ( ) ; <nl> + cache . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> + <nl> + / / There should 2 objects in cache : processed file ( file . java ) and checker configuration . <nl> + final int expectedNumberOfObjectsInCache = 2 ; <nl> + assertEquals ( expectedNumberOfObjectsInCache , cache . size ( ) ) ; <nl> + <nl> + final String expectedConfigHash = " 68EE3C3B4593FD8D86159C670C504542E20C6FA0 " ; <nl> + assertEquals ( expectedConfigHash , cache . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> + <nl> + assertNotNull ( cache . getProperty ( tmpFile . getPath ( ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 512 , 51 + 504 , 47 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " myConfig " ) ; <nl> checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> checkerConfig . addChild ( treeWalkerConfig ) ; <nl> - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + final File cacheFile = temporaryFolder . newFile ( ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , cacheFile . getPath ( ) ) ; <nl> <nl> final Checker checker = new Checker ( ) ; <nl> - final Locale locale = Locale . ROOT ; <nl> - checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( checkerConfig ) ; <nl> checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> <nl> - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - <nl> - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> checker . clearCache ( ) ; <nl> - / / one more time , but file that should be audited is not in cache <nl> - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testClearNonexistentCache ( ) throws Exception { <nl> - final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> + / / invoke destroy to persist cache <nl> + checker . destroy ( ) ; <nl> <nl> - final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> - treeWalkerConfig . addChild ( checkConfig ) ; <nl> + final Properties cacheAfterClear = new Properties ( ) ; <nl> + cacheAfterClear . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> <nl> - final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " simpleConfig " ) ; <nl> - checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> - checkerConfig . addChild ( treeWalkerConfig ) ; <nl> - <nl> - final Checker checker = new Checker ( ) ; <nl> - final Locale locale = Locale . ROOT ; <nl> - checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> + assertEquals ( 1 , cacheAfterClear . size ( ) ) ; <nl> + assertNotNull ( cacheAfterClear . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> <nl> final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> + / / file that should be audited is not in cache <nl> verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + final Properties cacheAfterSecondRun = new Properties ( ) ; <nl> + cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> + <nl> + assertNotNull ( cacheAfterSecondRun . getProperty ( pathToEmptyFile ) ) ; <nl> + assertEquals ( <nl> + cacheAfterClear . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , <nl> + cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) <nl> + ) ; <nl> + final int expectedNumberOfObjectsInCacheAfterSecondRun = 2 ; <nl> + assertEquals ( expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testClearCacheWhenCacheFileIsNotSet ( ) { <nl> + / / The idea of the test is to check that when cache file is not set , <nl> + / / the invokation of clearCache method does not throw an exception . <nl> + final Checker checker = new Checker ( ) ; <nl> checker . clearCache ( ) ; <nl> - / / one more time , but cache does not exist <nl> - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 587 , 68 + 575 , 20 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> <nl> + / * * <nl> + * It is OK to have long test method name here as it describes the test purpose . <nl> + * @ noinspection InstanceMethodNamingConvention <nl> + * / <nl> @ Test <nl> - public void testExternalConfigurationResourceDoesNotExist ( ) throws Exception { <nl> - final Checker mockChecker = createMockCheckerWithCacheForModule ( DummyFileSetCheck . class ) ; <nl> - <nl> - final String pathToEmptyFile = temporaryFolder . newFile ( " EmptyFile . java " ) . getPath ( ) ; <nl> - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - <nl> - / / We invoke ' verify ' twice to invalidate cache <nl> - / / and have two identical exceptions which happen on the same line between runs <nl> - final int numberOfRuns = 2 ; <nl> - for ( int i = 0 ; i < numberOfRuns ; i + + ) { <nl> - verify ( mockChecker , pathToEmptyFile , expected ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testInvalidateCacheDueToDifferentExceptionsBetweenRuns ( ) throws Exception { <nl> - final Checker mockChecker = createMockCheckerWithCacheForModule ( DummyFileSetCheck . class ) ; <nl> - <nl> - final String pathToEmptyFile = temporaryFolder . newFile ( " TestFile . java " ) . getPath ( ) ; <nl> - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - <nl> - verify ( mockChecker , pathToEmptyFile , expected ) ; <nl> - / / Once again to invalidate cache because in the second run exception will happen <nl> - / / on different line <nl> - verify ( mockChecker , pathToEmptyFile , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testMultipleConfigs ( ) throws Exception { <nl> - final DefaultConfiguration headerCheckConfig = <nl> - createCheckConfig ( MockMissingExternalResourcesFileSetCheck . class ) ; <nl> - <nl> - final DefaultConfiguration dummyFileSetCheckConfig = <nl> - createCheckConfig ( DummyFileSetCheck . class ) ; <nl> - <nl> - final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyle _ checks " ) ; <nl> - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> - checkerConfig . addChild ( headerCheckConfig ) ; <nl> - checkerConfig . addChild ( dummyFileSetCheckConfig ) ; <nl> - <nl> - final Checker checker = new Checker ( ) ; <nl> - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> - <nl> - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - <nl> - verify ( checker , pathToEmptyFile , expected ) ; <nl> - / / Once again to invalidate cache because in the second run IOException will happen <nl> - / / on different line for DummyFileSetCheck and it will change the content <nl> - verify ( checker , pathToEmptyFile , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testFilterWhichDoesNotImplementExternalResourceHolderInterface ( ) throws Exception { <nl> + public void testCacheAndFilterWhichDoesNotImplementExternalResourceHolderInterface ( ) <nl> + throws Exception { <nl> + assertFalse ( ExternalResourceHolder . class . isAssignableFrom ( DummyFilter . class ) ) ; <nl> final DefaultConfiguration filterConfig = createCheckConfig ( DummyFilter . class ) ; <nl> <nl> final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyle _ checks " ) ; <nl> checkerConfig . addChild ( filterConfig ) ; <nl> - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + final File cacheFile = temporaryFolder . newFile ( ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , cacheFile . getPath ( ) ) ; <nl> <nl> final Checker checker = new Checker ( ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> @ @ - 657 , 13 + 597 , 36 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> + <nl> verify ( checker , pathToEmptyFile , expected ) ; <nl> + final Properties cacheAfterFirstRun = new Properties ( ) ; <nl> + cacheAfterFirstRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> + <nl> / / One more time to use cache . <nl> verify ( checker , pathToEmptyFile , expected ) ; <nl> - } <nl> - <nl> + final Properties cacheAfterSecondRun = new Properties ( ) ; <nl> + cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> + <nl> + assertEquals ( <nl> + cacheAfterFirstRun . getProperty ( pathToEmptyFile ) , <nl> + cacheAfterSecondRun . getProperty ( pathToEmptyFile ) <nl> + ) ; <nl> + assertEquals ( <nl> + cacheAfterFirstRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , <nl> + cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) <nl> + ) ; <nl> + final int expectedNumberOfObjectsInCache = 2 ; <nl> + assertEquals ( expectedNumberOfObjectsInCache , cacheAfterFirstRun . size ( ) ) ; <nl> + assertEquals ( expectedNumberOfObjectsInCache , cacheAfterSecondRun . size ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * It is OK to have long test method name here as it describes the test purpose . <nl> + * @ noinspection InstanceMethodNamingConvention <nl> + * / <nl> @ Test <nl> - public void testCheckAddsNewResourceLocationButKeepsSameCheckerInstance ( ) throws Exception { <nl> + public void testCacheAndCheckWhichAddsNewResourceLocationButKeepsSameCheckerInstance ( ) <nl> + throws Exception { <nl> <nl> / / Use case ( https : / / github . com / checkstyle / checkstyle / pull / 3092 # issuecomment - 218162436 ) : <nl> / / Imagine that cache exists in a file . New version of Checkstyle appear . <nl> @ @ - 672 , 11 + 635 , 13 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> / / Cache should not be reused . <nl> <nl> final DynamicalResourceHolderCheck check = new DynamicalResourceHolderCheck ( ) ; <nl> - check . setFirstExternalResourceLocation ( getPath ( " checks " + File . separator <nl> - + " imports " + File . separator + " import - control _ one . xml " ) ) ; <nl> + final String firstExternalResourceLocation = getPath ( " checks " + File . separator <nl> + + " imports " + File . separator + " import - control _ one . xml " ) ; <nl> + check . setFirstExternalResourceLocation ( firstExternalResourceLocation ) ; <nl> <nl> final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyle _ checks " ) ; <nl> - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + final File cacheFile = temporaryFolder . newFile ( ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , cacheFile . getPath ( ) ) ; <nl> <nl> final Checker checker = new Checker ( ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> @ @ - 688 , 12 + 653 , 36 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> verify ( checker , pathToEmptyFile , expected ) ; <nl> + final Properties cacheAfterFirstRun = new Properties ( ) ; <nl> + cacheAfterFirstRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> + <nl> + final int expectedNumberOfObjectsInCacheAfterFirstRun = 3 ; <nl> + assertEquals ( expectedNumberOfObjectsInCacheAfterFirstRun , cacheAfterFirstRun . size ( ) ) ; <nl> <nl> / / Change a list of external resources which are used by the check <nl> - check . setSecondExternalResourceLocation ( " checks " + File . separator <nl> - + " imports " + File . separator + " import - control _ one - re . xml " ) ; <nl> + final String secondExternalResourceLocation = " checks " + File . separator <nl> + + " imports " + File . separator + " import - control _ one - re . xml " ; <nl> + check . setSecondExternalResourceLocation ( secondExternalResourceLocation ) ; <nl> <nl> verify ( checker , pathToEmptyFile , expected ) ; <nl> + final Properties cacheAfterSecondRun = new Properties ( ) ; <nl> + cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> + <nl> + assertEquals ( <nl> + cacheAfterFirstRun . getProperty ( pathToEmptyFile ) , <nl> + cacheAfterSecondRun . getProperty ( pathToEmptyFile ) <nl> + ) ; <nl> + assertEquals ( <nl> + cacheAfterFirstRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , <nl> + cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) <nl> + ) ; <nl> + assertEquals ( <nl> + cacheAfterFirstRun . getProperty ( firstExternalResourceLocation ) , <nl> + cacheAfterSecondRun . getProperty ( firstExternalResourceLocation ) <nl> + ) ; <nl> + final int expectedNumberOfObjectsInCacheAfterSecondRun = 4 ; <nl> + assertEquals ( expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; <nl> + assertNotNull ( cacheAfterSecondRun . getProperty ( secondExternalResourceLocation ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 779 , 22 + 768 , 6 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> verify ( checker , filePath , filePath , expected ) ; <nl> } <nl> <nl> - private Checker createMockCheckerWithCacheForModule ( <nl> - Class < ? extends ExternalResourceHolder > mockClass ) throws IOException , CheckstyleException { <nl> - <nl> - final DefaultConfiguration mockConfig = createCheckConfig ( mockClass ) ; <nl> - <nl> - final DefaultConfiguration defaultConfig = new DefaultConfiguration ( " defaultConfiguration " ) ; <nl> - defaultConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> - defaultConfig . addChild ( mockConfig ) ; <nl> - <nl> - final Checker checker = new Checker ( ) ; <nl> - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> - checker . configure ( defaultConfig ) ; <nl> - return checker ; <nl> - } <nl> - <nl> private static class DummyFilter implements Filter { <nl> <nl> @ Override <nl> @ @ - 803 , 20 + 776 , 6 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> <nl> - private static class DummyFileSetCheck extends AbstractFileSetCheck <nl> - implements ExternalResourceHolder { <nl> - <nl> - @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { } <nl> - <nl> - @ Override <nl> - public Set < String > getExternalResourceLocations ( ) { <nl> - final Set < String > externalResourceLocation = new HashSet < > ( 1 ) ; <nl> - externalResourceLocation . add ( " non _ existing _ external _ resource . xml " ) ; <nl> - return externalResourceLocation ; <nl> - } <nl> - } <nl> - <nl> private static class DummyFileSetViolationCheck extends AbstractFileSetCheck <nl> implements ExternalResourceHolder { <nl> <nl> @ @ - 833 , 20 + 792 , 6 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> <nl> - private static class MockMissingExternalResourcesFileSetCheck extends AbstractFileSetCheck <nl> - implements ExternalResourceHolder { <nl> - <nl> - @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { } <nl> - <nl> - @ Override <nl> - public Set < String > getExternalResourceLocations ( ) { <nl> - final Set < String > externalResourceLocation = new HashSet < > ( 1 ) ; <nl> - externalResourceLocation . add ( " missing _ external _ resource . xml " ) ; <nl> - return externalResourceLocation ; <nl> - } <nl> - } <nl> - <nl> private static class DynamicalResourceHolderCheck extends AbstractFileSetCheck <nl> implements ExternalResourceHolder { <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> index 2d539d3 . . 55d9865 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 40 , 6 + 41 , 7 @ @ import java . security . MessageDigest ; <nl> import java . security . NoSuchAlgorithmException ; <nl> import java . util . HashSet ; <nl> import java . util . Locale ; <nl> + import java . util . Properties ; <nl> import java . util . Set ; <nl> <nl> import org . junit . Rule ; <nl> @ @ - 50 , 10 + 52 , 12 @ @ import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ RunWith ( PowerMockRunner . class ) <nl> - @ PrepareForTest ( { PropertyCacheFile . class , PropertyCacheFileTest . class , ByteStreams . class } ) <nl> + @ PrepareForTest ( { PropertyCacheFile . class , ByteStreams . class , CommonUtils . class } ) <nl> public class PropertyCacheFileTest { <nl> <nl> @ Rule <nl> @ @ - 214 , 4 + 218 , 140 @ @ public class PropertyCacheFileTest { <nl> assertEquals ( " Unable to calculate hashcode . " , ex . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testPutNonExsistingExternalResourceSameExceptionBetweenRuns ( ) throws Exception { <nl> + final File cacheFile = temporaryFolder . newFile ( ) ; <nl> + <nl> + / / We mock getUriByFilename method of CommonUtils to garantee that it will <nl> + / / throw CheckstyleException with the specific content . <nl> + mockStatic ( CommonUtils . class ) ; <nl> + final CheckstyleException mockException = <nl> + new CheckstyleException ( " Cannot get URL for cache file " + cacheFile . getAbsolutePath ( ) ) ; <nl> + when ( CommonUtils . getUriByFilename ( any ( String . class ) ) ) <nl> + . thenThrow ( mockException ) ; <nl> + <nl> + / / We invoke ' putExternalResources ' twice to invalidate cache <nl> + / / and have two identical exceptions whith the equal content <nl> + final int numberOfRuns = 2 ; <nl> + final String [ ] configHashes = new String [ numberOfRuns ] ; <nl> + final String [ ] externalResourceHashes = new String [ numberOfRuns ] ; <nl> + for ( int i = 0 ; i < numberOfRuns ; i + + ) { <nl> + final Configuration config = new DefaultConfiguration ( " myConfig " ) ; <nl> + final PropertyCacheFile cache = new PropertyCacheFile ( config , cacheFile . getPath ( ) ) ; <nl> + cache . load ( ) ; <nl> + <nl> + configHashes [ i ] = cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ; <nl> + assertNotNull ( configHashes [ i ] ) ; <nl> + <nl> + final Set < String > nonExistingExternalResources = new HashSet < > ( ) ; <nl> + final String externalResourceFileName = " non _ existing _ file . xml " ; <nl> + nonExistingExternalResources . add ( externalResourceFileName ) ; <nl> + cache . putExternalResources ( nonExistingExternalResources ) ; <nl> + <nl> + externalResourceHashes [ i ] = cache . get ( externalResourceFileName ) ; <nl> + assertNotNull ( externalResourceHashes [ i ] ) ; <nl> + <nl> + cache . persist ( ) ; <nl> + <nl> + final Properties cacheDetails = new Properties ( ) ; <nl> + cacheDetails . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> + <nl> + final int expectedNumberOfObjectsInCacheFile = 2 ; <nl> + assertEquals ( expectedNumberOfObjectsInCacheFile , cacheDetails . size ( ) ) ; <nl> + } <nl> + <nl> + assertEquals ( configHashes [ 0 ] , configHashes [ 1 ] ) ; <nl> + assertEquals ( externalResourceHashes [ 0 ] , externalResourceHashes [ 1 ] ) ; <nl> + } <nl> + <nl> + / * * <nl> + * It is OK to have long test method name here as it describes the test purpose . <nl> + * @ noinspection InstanceMethodNamingConvention <nl> + * / <nl> + @ Test <nl> + public void testPutNonExsistingExternalResourceDifferentExceptionsBetweenRuns ( ) <nl> + throws Exception { <nl> + <nl> + final File cacheFile = temporaryFolder . newFile ( ) ; <nl> + <nl> + / / We invoke ' putExternalResources ' twice to invalidate cache <nl> + / / and have two different exceptions with different content . <nl> + final int numberOfRuns = 2 ; <nl> + final String [ ] configHashes = new String [ numberOfRuns ] ; <nl> + final String [ ] externalResourceHashes = new String [ numberOfRuns ] ; <nl> + for ( int i = 0 ; i < numberOfRuns ; i + + ) { <nl> + final Configuration config = new DefaultConfiguration ( " myConfig " ) ; <nl> + final PropertyCacheFile cache = new PropertyCacheFile ( config , cacheFile . getPath ( ) ) ; <nl> + <nl> + / / We mock getUriByFilename method of CommonUtils to garantee that it will <nl> + / / throw CheckstyleException with the specific content . <nl> + mockStatic ( CommonUtils . class ) ; <nl> + final CheckstyleException mockException = new CheckstyleException ( " Exception # " + i ) ; <nl> + when ( CommonUtils . getUriByFilename ( any ( String . class ) ) ) <nl> + . thenThrow ( mockException ) ; <nl> + <nl> + cache . load ( ) ; <nl> + <nl> + configHashes [ i ] = cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ; <nl> + assertNotNull ( configHashes [ i ] ) ; <nl> + <nl> + final Set < String > nonExistingExternalResources = new HashSet < > ( ) ; <nl> + final String externalResourceFileName = " non _ existing _ file . xml " ; <nl> + nonExistingExternalResources . add ( externalResourceFileName ) ; <nl> + cache . putExternalResources ( nonExistingExternalResources ) ; <nl> + <nl> + externalResourceHashes [ i ] = cache . get ( externalResourceFileName ) ; <nl> + assertNotNull ( externalResourceHashes [ i ] ) ; <nl> + <nl> + cache . persist ( ) ; <nl> + <nl> + final Properties cacheDetails = new Properties ( ) ; <nl> + cacheDetails . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> + <nl> + final int expectedNumberOfObjectsInCacheFile = 2 ; <nl> + assertEquals ( expectedNumberOfObjectsInCacheFile , cacheDetails . size ( ) ) ; <nl> + } <nl> + <nl> + assertEquals ( configHashes [ 0 ] , configHashes [ 1 ] ) ; <nl> + assertNotEquals ( externalResourceHashes [ 0 ] , externalResourceHashes [ 1 ] ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testChangeInConfig ( ) throws Exception { <nl> + final DefaultConfiguration config = new DefaultConfiguration ( " myConfig " ) ; <nl> + config . addAttribute ( " attr " , " value " ) ; <nl> + <nl> + final File cacheFile = temporaryFolder . newFile ( ) ; <nl> + final PropertyCacheFile cache = new PropertyCacheFile ( config , cacheFile . getPath ( ) ) ; <nl> + cache . load ( ) ; <nl> + <nl> + final String expectedInitialConfigHash = " EEF15651C2D79B29968835FC729E788938CAFE3B " ; <nl> + final String actualInitialConfigHash = cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ; <nl> + assertEquals ( expectedInitialConfigHash , actualInitialConfigHash ) ; <nl> + <nl> + cache . persist ( ) ; <nl> + <nl> + final Properties details = new Properties ( ) ; <nl> + details . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> + assertEquals ( 1 , details . size ( ) ) ; <nl> + <nl> + / / change in config <nl> + config . addAttribute ( " newAttr " , " newValue " ) ; <nl> + <nl> + final PropertyCacheFile cacheAfterChangeInConfig = <nl> + new PropertyCacheFile ( config , cacheFile . getPath ( ) ) ; <nl> + cacheAfterChangeInConfig . load ( ) ; <nl> + <nl> + final String expectedConfigHashAfterChange = " 0FFFF89F6636EE8AEB904681F594B0F05E1FF795 " ; <nl> + final String actualConfigHashAfterChange = <nl> + cacheAfterChangeInConfig . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ; <nl> + assertEquals ( expectedConfigHashAfterChange , actualConfigHashAfterChange ) ; <nl> + <nl> + cacheAfterChangeInConfig . persist ( ) ; <nl> + <nl> + final Properties detailsAfterChangeInConfig = new Properties ( ) ; <nl> + detailsAfterChangeInConfig . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> + assertEquals ( 1 , detailsAfterChangeInConfig . size ( ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 2569688 . . 2dab005 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1085 , 7 + 1085 , 6 @ @ <nl> < regex > < pattern > . * . PropertyCacheFile < / pattern > < branchRate > 22 < / branchRate > < lineRate > 19 < / lineRate > < / regex > <nl> < regex > < pattern > . * . TreeWalker < / pattern > < branchRate > 94 < / branchRate > < lineRate > 92 < / lineRate > < / regex > <nl> <nl> - < regex > < pattern > . * . api . AbstractLoader < / pattern > < branchRate > 75 < / branchRate > < lineRate > 88 < / lineRate > < / regex > <nl> < regex > < pattern > . * . api . AuditEvent < / pattern > < branchRate > 100 < / branchRate > < lineRate > 93 < / lineRate > < / regex > <nl> < regex > < pattern > . * . api . AutomaticBean < / pattern > < branchRate > 90 < / branchRate > < lineRate > 82 < / lineRate > < / regex > <nl> < regex > < pattern > . * . api . AutomaticBean \ $ . * < / pattern > < branchRate > 75 < / branchRate > < lineRate > 90 < / lineRate > < / regex > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> index fd32e47 . . 2dec7ae 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> @ @ - 106 , 21 + 106 , 13 @ @ public abstract class AbstractLoader <nl> this . getClass ( ) . getClassLoader ( ) ; <nl> final InputStream dtdIS = <nl> loader . getResourceAsStream ( dtdResourceName ) ; <nl> - if ( dtdIS = = null ) { <nl> - throw new SAXException ( <nl> - " Unable to load internal dtd " + dtdResourceName ) ; <nl> - } <nl> + <nl> return new InputSource ( dtdIS ) ; <nl> } <nl> return super . resolveEntity ( publicId , systemId ) ; <nl> } <nl> <nl> @ Override <nl> - public void warning ( SAXParseException ex ) throws SAXException { <nl> - throw ex ; <nl> - } <nl> - <nl> - @ Override <nl> public void error ( SAXParseException ex ) throws SAXException { <nl> throw ex ; <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 78e8799 . . a38973d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import java . io . IOError ; 
 import java . io . IOException ; 
 import java . io . UnsupportedEncodingException ; 
 import java . lang . reflect . Method ; 
 + import java . nio . file . Files ; 
 import java . util . ArrayList ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 @ @ - 398 , 7 + 399 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testDestroyCacheWithWrongFileNameLength ( ) throws Exception { 
 + public void testDestroyCheckerWithWrongCacheFileNameLength ( ) throws Exception { 
 final Checker checker = new Checker ( ) ; 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 @ @ - 417 , 8 + 418 , 14 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 } 
 
 + / * * 
 + * It is OK to have long test method name here as it describes the test purpose . 
 + * @ noinspection InstanceMethodNamingConvention 
 + * / 
 @ Test 
 - public void testCacheFile ( ) throws Exception { 
 + public void testCacheAndCheckWhichDoesNotImplementExternalResourceHolderInterface ( ) 
 + throws Exception { 
 + assertFalse ( ExternalResourceHolder . class . isAssignableFrom ( HiddenFieldCheck . class ) ) ; 
 final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 
 final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 @ @ - 427 , 35 + 434 , 9 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyleConfig " ) ; 
 checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 checkerConfig . addChild ( treeWalkerConfig ) ; 
 - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 - 
 - final Checker checker = new Checker ( ) ; 
 - final Locale locale = Locale . ROOT ; 
 - checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 - 
 - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - 
 - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 - / / one more time to reuse cache 
 - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 - } 
 - 
 - @ Test 
 - public void testCacheFileChangeInConfig ( ) throws Exception { 
 - final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 
 - final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 - treeWalkerConfig . addChild ( checkConfig ) ; 
 - 
 - final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; 
 - checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 - checkerConfig . addChild ( treeWalkerConfig ) ; 
 - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + final File cacheFile = temporaryFolder . newFile ( ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , cacheFile . getPath ( ) ) ; 
 
 final Checker checker = new Checker ( ) ; 
 final Locale locale = Locale . ROOT ; 
 @ @ - 465 , 26 + 446 , 19 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 checker . configure ( checkerConfig ) ; 
 checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 
 - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 + final File tmpFile = temporaryFolder . newFile ( " file . java " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; 
 + final Properties cacheAfterFirstRun = new Properties ( ) ; 
 + cacheAfterFirstRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 
 - / / update Checker config 
 - checker . destroy ( ) ; 
 - checker . configure ( checkerConfig ) ; 
 - 
 - final Checker otherChecker = new Checker ( ) ; 
 - otherChecker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 - otherChecker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 - otherChecker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - otherChecker . configure ( checkerConfig ) ; 
 - otherChecker . addListener ( new BriefUtLogger ( stream ) ) ; 
 - / / here is diff with previous checker 
 - checkerConfig . addAttribute ( " fileExtensions " , " java , javax " ) ; 
 + / / one more time to reuse cache 
 + verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; 
 + final Properties cacheAfterSecondRun = new Properties ( ) ; 
 + cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 
 - / / one more time on updated config 
 - verify ( otherChecker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + assertEquals ( cacheAfterFirstRun , cacheAfterSecondRun ) ; 
 } 
 
 @ Test 
 @ @ - 494 , 12 + 468 , 30 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . setModuleFactory ( factory ) ; 
 checker . configure ( createCheckConfig ( TranslationCheck . class ) ) ; 
 - checker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + 
 + final File cacheFile = temporaryFolder . newFile ( ) ; 
 + checker . setCacheFile ( cacheFile . getPath ( ) ) ; 
 + 
 checker . setupChild ( createCheckConfig ( TranslationCheck . class ) ) ; 
 - final File file = temporaryFolder . newFile ( " file . java " ) ; 
 - final List < File > files = new ArrayList < > ( ) ; 
 - files . add ( file ) ; 
 + final File tmpFile = temporaryFolder . newFile ( " file . java " ) ; 
 + final List < File > files = new ArrayList < > ( 1 ) ; 
 + files . add ( tmpFile ) ; 
 checker . process ( files ) ; 
 + 
 + / / invoke destroy to persist cache 
 + checker . destroy ( ) ; 
 + 
 + final Properties cache = new Properties ( ) ; 
 + cache . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 + 
 + / / There should 2 objects in cache : processed file ( file . java ) and checker configuration . 
 + final int expectedNumberOfObjectsInCache = 2 ; 
 + assertEquals ( expectedNumberOfObjectsInCache , cache . size ( ) ) ; 
 + 
 + final String expectedConfigHash = " 68EE3C3B4593FD8D86159C670C504542E20C6FA0 " ; 
 + assertEquals ( expectedConfigHash , cache . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 + 
 + assertNotNull ( cache . getProperty ( tmpFile . getPath ( ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 512 , 51 + 504 , 47 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " myConfig " ) ; 
 checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 checkerConfig . addChild ( treeWalkerConfig ) ; 
 - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + final File cacheFile = temporaryFolder . newFile ( ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , cacheFile . getPath ( ) ) ; 
 
 final Checker checker = new Checker ( ) ; 
 - final Locale locale = Locale . ROOT ; 
 - checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( checkerConfig ) ; 
 checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 
 - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - 
 - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 checker . clearCache ( ) ; 
 - / / one more time , but file that should be audited is not in cache 
 - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 - } 
 - 
 - @ Test 
 - public void testClearNonexistentCache ( ) throws Exception { 
 - final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 + / / invoke destroy to persist cache 
 + checker . destroy ( ) ; 
 
 - final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 - treeWalkerConfig . addChild ( checkConfig ) ; 
 + final Properties cacheAfterClear = new Properties ( ) ; 
 + cacheAfterClear . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 
 - final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " simpleConfig " ) ; 
 - checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 - checkerConfig . addChild ( treeWalkerConfig ) ; 
 - 
 - final Checker checker = new Checker ( ) ; 
 - final Locale locale = Locale . ROOT ; 
 - checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 + assertEquals ( 1 , cacheAfterClear . size ( ) ) ; 
 + assertNotNull ( cacheAfterClear . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 
 final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 + / / file that should be audited is not in cache 
 verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + final Properties cacheAfterSecondRun = new Properties ( ) ; 
 + cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 + 
 + assertNotNull ( cacheAfterSecondRun . getProperty ( pathToEmptyFile ) ) ; 
 + assertEquals ( 
 + cacheAfterClear . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , 
 + cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) 
 + ) ; 
 + final int expectedNumberOfObjectsInCacheAfterSecondRun = 2 ; 
 + assertEquals ( expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testClearCacheWhenCacheFileIsNotSet ( ) { 
 + / / The idea of the test is to check that when cache file is not set , 
 + / / the invokation of clearCache method does not throw an exception . 
 + final Checker checker = new Checker ( ) ; 
 checker . clearCache ( ) ; 
 - / / one more time , but cache does not exist 
 - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 } 
 
 @ Test 
 @ @ - 587 , 68 + 575 , 20 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 } 
 
 + / * * 
 + * It is OK to have long test method name here as it describes the test purpose . 
 + * @ noinspection InstanceMethodNamingConvention 
 + * / 
 @ Test 
 - public void testExternalConfigurationResourceDoesNotExist ( ) throws Exception { 
 - final Checker mockChecker = createMockCheckerWithCacheForModule ( DummyFileSetCheck . class ) ; 
 - 
 - final String pathToEmptyFile = temporaryFolder . newFile ( " EmptyFile . java " ) . getPath ( ) ; 
 - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - 
 - / / We invoke ' verify ' twice to invalidate cache 
 - / / and have two identical exceptions which happen on the same line between runs 
 - final int numberOfRuns = 2 ; 
 - for ( int i = 0 ; i < numberOfRuns ; i + + ) { 
 - verify ( mockChecker , pathToEmptyFile , expected ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void testInvalidateCacheDueToDifferentExceptionsBetweenRuns ( ) throws Exception { 
 - final Checker mockChecker = createMockCheckerWithCacheForModule ( DummyFileSetCheck . class ) ; 
 - 
 - final String pathToEmptyFile = temporaryFolder . newFile ( " TestFile . java " ) . getPath ( ) ; 
 - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - 
 - verify ( mockChecker , pathToEmptyFile , expected ) ; 
 - / / Once again to invalidate cache because in the second run exception will happen 
 - / / on different line 
 - verify ( mockChecker , pathToEmptyFile , expected ) ; 
 - } 
 - 
 - @ Test 
 - public void testMultipleConfigs ( ) throws Exception { 
 - final DefaultConfiguration headerCheckConfig = 
 - createCheckConfig ( MockMissingExternalResourcesFileSetCheck . class ) ; 
 - 
 - final DefaultConfiguration dummyFileSetCheckConfig = 
 - createCheckConfig ( DummyFileSetCheck . class ) ; 
 - 
 - final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyle _ checks " ) ; 
 - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 - checkerConfig . addChild ( headerCheckConfig ) ; 
 - checkerConfig . addChild ( dummyFileSetCheckConfig ) ; 
 - 
 - final Checker checker = new Checker ( ) ; 
 - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 - 
 - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - 
 - verify ( checker , pathToEmptyFile , expected ) ; 
 - / / Once again to invalidate cache because in the second run IOException will happen 
 - / / on different line for DummyFileSetCheck and it will change the content 
 - verify ( checker , pathToEmptyFile , expected ) ; 
 - } 
 - 
 - @ Test 
 - public void testFilterWhichDoesNotImplementExternalResourceHolderInterface ( ) throws Exception { 
 + public void testCacheAndFilterWhichDoesNotImplementExternalResourceHolderInterface ( ) 
 + throws Exception { 
 + assertFalse ( ExternalResourceHolder . class . isAssignableFrom ( DummyFilter . class ) ) ; 
 final DefaultConfiguration filterConfig = createCheckConfig ( DummyFilter . class ) ; 
 
 final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyle _ checks " ) ; 
 checkerConfig . addChild ( filterConfig ) ; 
 - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + final File cacheFile = temporaryFolder . newFile ( ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , cacheFile . getPath ( ) ) ; 
 
 final Checker checker = new Checker ( ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 @ @ - 657 , 13 + 597 , 36 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 + 
 verify ( checker , pathToEmptyFile , expected ) ; 
 + final Properties cacheAfterFirstRun = new Properties ( ) ; 
 + cacheAfterFirstRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 + 
 / / One more time to use cache . 
 verify ( checker , pathToEmptyFile , expected ) ; 
 - } 
 - 
 + final Properties cacheAfterSecondRun = new Properties ( ) ; 
 + cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 + 
 + assertEquals ( 
 + cacheAfterFirstRun . getProperty ( pathToEmptyFile ) , 
 + cacheAfterSecondRun . getProperty ( pathToEmptyFile ) 
 + ) ; 
 + assertEquals ( 
 + cacheAfterFirstRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , 
 + cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) 
 + ) ; 
 + final int expectedNumberOfObjectsInCache = 2 ; 
 + assertEquals ( expectedNumberOfObjectsInCache , cacheAfterFirstRun . size ( ) ) ; 
 + assertEquals ( expectedNumberOfObjectsInCache , cacheAfterSecondRun . size ( ) ) ; 
 + } 
 + 
 + / * * 
 + * It is OK to have long test method name here as it describes the test purpose . 
 + * @ noinspection InstanceMethodNamingConvention 
 + * / 
 @ Test 
 - public void testCheckAddsNewResourceLocationButKeepsSameCheckerInstance ( ) throws Exception { 
 + public void testCacheAndCheckWhichAddsNewResourceLocationButKeepsSameCheckerInstance ( ) 
 + throws Exception { 
 
 / / Use case ( https : / / github . com / checkstyle / checkstyle / pull / 3092 # issuecomment - 218162436 ) : 
 / / Imagine that cache exists in a file . New version of Checkstyle appear . 
 @ @ - 672 , 11 + 635 , 13 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 / / Cache should not be reused . 
 
 final DynamicalResourceHolderCheck check = new DynamicalResourceHolderCheck ( ) ; 
 - check . setFirstExternalResourceLocation ( getPath ( " checks " + File . separator 
 - + " imports " + File . separator + " import - control _ one . xml " ) ) ; 
 + final String firstExternalResourceLocation = getPath ( " checks " + File . separator 
 + + " imports " + File . separator + " import - control _ one . xml " ) ; 
 + check . setFirstExternalResourceLocation ( firstExternalResourceLocation ) ; 
 
 final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyle _ checks " ) ; 
 - checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + final File cacheFile = temporaryFolder . newFile ( ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , cacheFile . getPath ( ) ) ; 
 
 final Checker checker = new Checker ( ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 @ @ - 688 , 12 + 653 , 36 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 verify ( checker , pathToEmptyFile , expected ) ; 
 + final Properties cacheAfterFirstRun = new Properties ( ) ; 
 + cacheAfterFirstRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 + 
 + final int expectedNumberOfObjectsInCacheAfterFirstRun = 3 ; 
 + assertEquals ( expectedNumberOfObjectsInCacheAfterFirstRun , cacheAfterFirstRun . size ( ) ) ; 
 
 / / Change a list of external resources which are used by the check 
 - check . setSecondExternalResourceLocation ( " checks " + File . separator 
 - + " imports " + File . separator + " import - control _ one - re . xml " ) ; 
 + final String secondExternalResourceLocation = " checks " + File . separator 
 + + " imports " + File . separator + " import - control _ one - re . xml " ; 
 + check . setSecondExternalResourceLocation ( secondExternalResourceLocation ) ; 
 
 verify ( checker , pathToEmptyFile , expected ) ; 
 + final Properties cacheAfterSecondRun = new Properties ( ) ; 
 + cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 + 
 + assertEquals ( 
 + cacheAfterFirstRun . getProperty ( pathToEmptyFile ) , 
 + cacheAfterSecondRun . getProperty ( pathToEmptyFile ) 
 + ) ; 
 + assertEquals ( 
 + cacheAfterFirstRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , 
 + cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) 
 + ) ; 
 + assertEquals ( 
 + cacheAfterFirstRun . getProperty ( firstExternalResourceLocation ) , 
 + cacheAfterSecondRun . getProperty ( firstExternalResourceLocation ) 
 + ) ; 
 + final int expectedNumberOfObjectsInCacheAfterSecondRun = 4 ; 
 + assertEquals ( expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; 
 + assertNotNull ( cacheAfterSecondRun . getProperty ( secondExternalResourceLocation ) ) ; 
 } 
 
 @ Test 
 @ @ - 779 , 22 + 768 , 6 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 verify ( checker , filePath , filePath , expected ) ; 
 } 
 
 - private Checker createMockCheckerWithCacheForModule ( 
 - Class < ? extends ExternalResourceHolder > mockClass ) throws IOException , CheckstyleException { 
 - 
 - final DefaultConfiguration mockConfig = createCheckConfig ( mockClass ) ; 
 - 
 - final DefaultConfiguration defaultConfig = new DefaultConfiguration ( " defaultConfiguration " ) ; 
 - defaultConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 - defaultConfig . addChild ( mockConfig ) ; 
 - 
 - final Checker checker = new Checker ( ) ; 
 - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 - checker . configure ( defaultConfig ) ; 
 - return checker ; 
 - } 
 - 
 private static class DummyFilter implements Filter { 
 
 @ Override 
 @ @ - 803 , 20 + 776 , 6 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 } 
 
 - private static class DummyFileSetCheck extends AbstractFileSetCheck 
 - implements ExternalResourceHolder { 
 - 
 - @ Override 
 - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { } 
 - 
 - @ Override 
 - public Set < String > getExternalResourceLocations ( ) { 
 - final Set < String > externalResourceLocation = new HashSet < > ( 1 ) ; 
 - externalResourceLocation . add ( " non _ existing _ external _ resource . xml " ) ; 
 - return externalResourceLocation ; 
 - } 
 - } 
 - 
 private static class DummyFileSetViolationCheck extends AbstractFileSetCheck 
 implements ExternalResourceHolder { 
 
 @ @ - 833 , 20 + 792 , 6 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 } 
 
 - private static class MockMissingExternalResourcesFileSetCheck extends AbstractFileSetCheck 
 - implements ExternalResourceHolder { 
 - 
 - @ Override 
 - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { } 
 - 
 - @ Override 
 - public Set < String > getExternalResourceLocations ( ) { 
 - final Set < String > externalResourceLocation = new HashSet < > ( 1 ) ; 
 - externalResourceLocation . add ( " missing _ external _ resource . xml " ) ; 
 - return externalResourceLocation ; 
 - } 
 - } 
 - 
 private static class DynamicalResourceHolderCheck extends AbstractFileSetCheck 
 implements ExternalResourceHolder { 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 index 2d539d3 . . 55d9865 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 @ @ - 40 , 6 + 41 , 7 @ @ import java . security . MessageDigest ; 
 import java . security . NoSuchAlgorithmException ; 
 import java . util . HashSet ; 
 import java . util . Locale ; 
 + import java . util . Properties ; 
 import java . util . Set ; 
 
 import org . junit . Rule ; 
 @ @ - 50 , 10 + 52 , 12 @ @ import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 import com . google . common . io . ByteStreams ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ RunWith ( PowerMockRunner . class ) 
 - @ PrepareForTest ( { PropertyCacheFile . class , PropertyCacheFileTest . class , ByteStreams . class } ) 
 + @ PrepareForTest ( { PropertyCacheFile . class , ByteStreams . class , CommonUtils . class } ) 
 public class PropertyCacheFileTest { 
 
 @ Rule 
 @ @ - 214 , 4 + 218 , 140 @ @ public class PropertyCacheFileTest { 
 assertEquals ( " Unable to calculate hashcode . " , ex . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testPutNonExsistingExternalResourceSameExceptionBetweenRuns ( ) throws Exception { 
 + final File cacheFile = temporaryFolder . newFile ( ) ; 
 + 
 + / / We mock getUriByFilename method of CommonUtils to garantee that it will 
 + / / throw CheckstyleException with the specific content . 
 + mockStatic ( CommonUtils . class ) ; 
 + final CheckstyleException mockException = 
 + new CheckstyleException ( " Cannot get URL for cache file " + cacheFile . getAbsolutePath ( ) ) ; 
 + when ( CommonUtils . getUriByFilename ( any ( String . class ) ) ) 
 + . thenThrow ( mockException ) ; 
 + 
 + / / We invoke ' putExternalResources ' twice to invalidate cache 
 + / / and have two identical exceptions whith the equal content 
 + final int numberOfRuns = 2 ; 
 + final String [ ] configHashes = new String [ numberOfRuns ] ; 
 + final String [ ] externalResourceHashes = new String [ numberOfRuns ] ; 
 + for ( int i = 0 ; i < numberOfRuns ; i + + ) { 
 + final Configuration config = new DefaultConfiguration ( " myConfig " ) ; 
 + final PropertyCacheFile cache = new PropertyCacheFile ( config , cacheFile . getPath ( ) ) ; 
 + cache . load ( ) ; 
 + 
 + configHashes [ i ] = cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ; 
 + assertNotNull ( configHashes [ i ] ) ; 
 + 
 + final Set < String > nonExistingExternalResources = new HashSet < > ( ) ; 
 + final String externalResourceFileName = " non _ existing _ file . xml " ; 
 + nonExistingExternalResources . add ( externalResourceFileName ) ; 
 + cache . putExternalResources ( nonExistingExternalResources ) ; 
 + 
 + externalResourceHashes [ i ] = cache . get ( externalResourceFileName ) ; 
 + assertNotNull ( externalResourceHashes [ i ] ) ; 
 + 
 + cache . persist ( ) ; 
 + 
 + final Properties cacheDetails = new Properties ( ) ; 
 + cacheDetails . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 + 
 + final int expectedNumberOfObjectsInCacheFile = 2 ; 
 + assertEquals ( expectedNumberOfObjectsInCacheFile , cacheDetails . size ( ) ) ; 
 + } 
 + 
 + assertEquals ( configHashes [ 0 ] , configHashes [ 1 ] ) ; 
 + assertEquals ( externalResourceHashes [ 0 ] , externalResourceHashes [ 1 ] ) ; 
 + } 
 + 
 + / * * 
 + * It is OK to have long test method name here as it describes the test purpose . 
 + * @ noinspection InstanceMethodNamingConvention 
 + * / 
 + @ Test 
 + public void testPutNonExsistingExternalResourceDifferentExceptionsBetweenRuns ( ) 
 + throws Exception { 
 + 
 + final File cacheFile = temporaryFolder . newFile ( ) ; 
 + 
 + / / We invoke ' putExternalResources ' twice to invalidate cache 
 + / / and have two different exceptions with different content . 
 + final int numberOfRuns = 2 ; 
 + final String [ ] configHashes = new String [ numberOfRuns ] ; 
 + final String [ ] externalResourceHashes = new String [ numberOfRuns ] ; 
 + for ( int i = 0 ; i < numberOfRuns ; i + + ) { 
 + final Configuration config = new DefaultConfiguration ( " myConfig " ) ; 
 + final PropertyCacheFile cache = new PropertyCacheFile ( config , cacheFile . getPath ( ) ) ; 
 + 
 + / / We mock getUriByFilename method of CommonUtils to garantee that it will 
 + / / throw CheckstyleException with the specific content . 
 + mockStatic ( CommonUtils . class ) ; 
 + final CheckstyleException mockException = new CheckstyleException ( " Exception # " + i ) ; 
 + when ( CommonUtils . getUriByFilename ( any ( String . class ) ) ) 
 + . thenThrow ( mockException ) ; 
 + 
 + cache . load ( ) ; 
 + 
 + configHashes [ i ] = cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ; 
 + assertNotNull ( configHashes [ i ] ) ; 
 + 
 + final Set < String > nonExistingExternalResources = new HashSet < > ( ) ; 
 + final String externalResourceFileName = " non _ existing _ file . xml " ; 
 + nonExistingExternalResources . add ( externalResourceFileName ) ; 
 + cache . putExternalResources ( nonExistingExternalResources ) ; 
 + 
 + externalResourceHashes [ i ] = cache . get ( externalResourceFileName ) ; 
 + assertNotNull ( externalResourceHashes [ i ] ) ; 
 + 
 + cache . persist ( ) ; 
 + 
 + final Properties cacheDetails = new Properties ( ) ; 
 + cacheDetails . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 + 
 + final int expectedNumberOfObjectsInCacheFile = 2 ; 
 + assertEquals ( expectedNumberOfObjectsInCacheFile , cacheDetails . size ( ) ) ; 
 + } 
 + 
 + assertEquals ( configHashes [ 0 ] , configHashes [ 1 ] ) ; 
 + assertNotEquals ( externalResourceHashes [ 0 ] , externalResourceHashes [ 1 ] ) ; 
 + } 
 + 
 + @ Test 
 + public void testChangeInConfig ( ) throws Exception { 
 + final DefaultConfiguration config = new DefaultConfiguration ( " myConfig " ) ; 
 + config . addAttribute ( " attr " , " value " ) ; 
 + 
 + final File cacheFile = temporaryFolder . newFile ( ) ; 
 + final PropertyCacheFile cache = new PropertyCacheFile ( config , cacheFile . getPath ( ) ) ; 
 + cache . load ( ) ; 
 + 
 + final String expectedInitialConfigHash = " EEF15651C2D79B29968835FC729E788938CAFE3B " ; 
 + final String actualInitialConfigHash = cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ; 
 + assertEquals ( expectedInitialConfigHash , actualInitialConfigHash ) ; 
 + 
 + cache . persist ( ) ; 
 + 
 + final Properties details = new Properties ( ) ; 
 + details . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 + assertEquals ( 1 , details . size ( ) ) ; 
 + 
 + / / change in config 
 + config . addAttribute ( " newAttr " , " newValue " ) ; 
 + 
 + final PropertyCacheFile cacheAfterChangeInConfig = 
 + new PropertyCacheFile ( config , cacheFile . getPath ( ) ) ; 
 + cacheAfterChangeInConfig . load ( ) ; 
 + 
 + final String expectedConfigHashAfterChange = " 0FFFF89F6636EE8AEB904681F594B0F05E1FF795 " ; 
 + final String actualConfigHashAfterChange = 
 + cacheAfterChangeInConfig . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ; 
 + assertEquals ( expectedConfigHashAfterChange , actualConfigHashAfterChange ) ; 
 + 
 + cacheAfterChangeInConfig . persist ( ) ; 
 + 
 + final Properties detailsAfterChangeInConfig = new Properties ( ) ; 
 + detailsAfterChangeInConfig . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 + assertEquals ( 1 , detailsAfterChangeInConfig . size ( ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 2569688 . . 2dab005 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1085 , 7 + 1085 , 6 @ @ 
 < regex > < pattern > . * . PropertyCacheFile < / pattern > < branchRate > 22 < / branchRate > < lineRate > 19 < / lineRate > < / regex > 
 < regex > < pattern > . * . TreeWalker < / pattern > < branchRate > 94 < / branchRate > < lineRate > 92 < / lineRate > < / regex > 
 
 - < regex > < pattern > . * . api . AbstractLoader < / pattern > < branchRate > 75 < / branchRate > < lineRate > 88 < / lineRate > < / regex > 
 < regex > < pattern > . * . api . AuditEvent < / pattern > < branchRate > 100 < / branchRate > < lineRate > 93 < / lineRate > < / regex > 
 < regex > < pattern > . * . api . AutomaticBean < / pattern > < branchRate > 90 < / branchRate > < lineRate > 82 < / lineRate > < / regex > 
 < regex > < pattern > . * . api . AutomaticBean \ $ . * < / pattern > < branchRate > 75 < / branchRate > < lineRate > 90 < / lineRate > < / regex > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 index fd32e47 . . 2dec7ae 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 @ @ - 106 , 21 + 106 , 13 @ @ public abstract class AbstractLoader 
 this . getClass ( ) . getClassLoader ( ) ; 
 final InputStream dtdIS = 
 loader . getResourceAsStream ( dtdResourceName ) ; 
 - if ( dtdIS = = null ) { 
 - throw new SAXException ( 
 - " Unable to load internal dtd " + dtdResourceName ) ; 
 - } 
 + 
 return new InputSource ( dtdIS ) ; 
 } 
 return super . resolveEntity ( publicId , systemId ) ; 
 } 
 
 @ Override 
 - public void warning ( SAXParseException ex ) throws SAXException { 
 - throw ex ; 
 - } 
 - 
 - @ Override 
 public void error ( SAXParseException ex ) throws SAXException { 
 throw ex ; 
 }
