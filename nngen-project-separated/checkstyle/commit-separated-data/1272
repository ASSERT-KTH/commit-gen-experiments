BLEU SCORE: 0.7016879391277371

TEST MSG: Issue # 2973 : removed unused VOCAB from java . g
GENERATED MSG: Issue # 2973 : removed unused annotations from java . g

TEST DIFF (one line): diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> index ba31d1b . . 494b128 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> @ @ - 1867 , 14 + 1867 , 6 @ @ BINARY _ DIGIT <nl> : ( ' 0 ' | ' 1 ' ) <nl> ; <nl> <nl> - <nl> - / / a dummy rule to force vocabulary to be all characters ( except special <nl> - / / ones that ANTLR uses internally ( 0 to 2 ) <nl> - protected <nl> - VOCAB <nl> - : ' \ 3 ' . . ' \ 377 ' <nl> - ; <nl> - <nl> protected ID _ START : <nl> ' _ ' | ' $ ' | <nl> (
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> index 8864230 . . 9040b71 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> @ @ - 245 , 11 + 245 , 26 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> * @ param ast ast of Modifiers . <nl> * / <nl> private void processModifiers ( DetailAST ast ) { <nl> - <nl> final ScopeState state = scopeStates . peek ( ) ; <nl> - if ( ast . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null ) { <nl> + final boolean isStateValid = processModifiersState ( ast , state ) ; <nl> + processModifiersSubState ( ast , state , isStateValid ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Process if given modifiers are appropriate in given state <nl> + * ( { @ code STATE _ STATIC _ VARIABLE _ DEF } , { @ code STATE _ INSTANCE _ VARIABLE _ DEF } , <nl> + * ( { @ code STATE _ CTOR _ DEF } , { @ code STATE _ METHOD _ DEF } ) , if it is <nl> + * it updates states where appropriate or logs violation . <nl> + * @ param modifierAst modifiers to process <nl> + * @ param state current state <nl> + * @ return true if modifierAst is valid in given state , false otherwise <nl> + * / <nl> + private boolean processModifiersState ( DetailAST modifierAst , ScopeState state ) { <nl> + boolean isStateValid = true ; <nl> + if ( modifierAst . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null ) { <nl> if ( state . currentScopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) { <nl> - log ( ast , MSG _ INSTANCE ) ; <nl> + isStateValid = false ; <nl> + log ( modifierAst , MSG _ INSTANCE ) ; <nl> } <nl> else if ( state . currentScopeState = = STATE _ STATIC _ VARIABLE _ DEF ) { <nl> state . declarationAccess = Scope . PUBLIC ; <nl> @ @ - 260 , 19 + 275 , 33 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> if ( state . currentScopeState > STATE _ STATIC _ VARIABLE _ DEF ) { <nl> if ( ! ignoreModifiers <nl> | | state . currentScopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) { <nl> - log ( ast , MSG _ STATIC ) ; <nl> + isStateValid = false ; <nl> + log ( modifierAst , MSG _ STATIC ) ; <nl> } <nl> } <nl> else { <nl> state . currentScopeState = STATE _ STATIC _ VARIABLE _ DEF ; <nl> } <nl> } <nl> + return isStateValid ; <nl> + } <nl> <nl> - final Scope access = ScopeUtils . getScopeFromMods ( ast ) ; <nl> + / * * <nl> + * Checks if given modifiers are valid in substate of given <nl> + * state ( { @ code Scope } ) , if it is it updates substate or else it <nl> + * logs violation . <nl> + * @ param modifiersAst modifiers to process <nl> + * @ param state curent state <nl> + * @ param isStateValid is main state for given modifiers is valid <nl> + * / <nl> + private void processModifiersSubState ( DetailAST modifiersAst , ScopeState state , <nl> + boolean isStateValid ) { <nl> + final Scope access = ScopeUtils . getScopeFromMods ( modifiersAst ) ; <nl> if ( state . declarationAccess . compareTo ( access ) > 0 ) { <nl> - if ( ! ignoreModifiers <nl> - & & ! isForwardReference ( ast . getParent ( ) ) ) { <nl> - log ( ast , MSG _ ACCESS ) ; <nl> + if ( isStateValid <nl> + & & ! ignoreModifiers <nl> + & & ! isForwardReference ( modifiersAst . getParent ( ) ) ) { <nl> + log ( modifiersAst , MSG _ ACCESS ) ; <nl> } <nl> } <nl> else { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> index ee9d29c . . 4922a42 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> @ @ - 54 , 25 + 54 , 20 @ @ public class DeclarationOrderCheckTest <nl> " 18 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 21 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 27 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 27 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 34 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 45 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 45 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 54 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> " 80 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> <nl> " 92 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 100 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 100 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 106 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 111 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 116 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 119 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 125 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 125 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 132 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 143 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 143 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 152 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> @ @ - 112 , 24 + 107 , 19 @ @ public class DeclarationOrderCheckTest <nl> " 18 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 21 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 27 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 27 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 34 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 45 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 45 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 80 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> <nl> " 92 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 100 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 100 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 106 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 111 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 116 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 119 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 125 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 125 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 132 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 143 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 143 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> } ; <nl> @ @ - 184 , 8 + 174 , 18 @ @ public class DeclarationOrderCheckTest <nl> " 17 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 23 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 41 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 41 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputDeclarationOrderForwardReference . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testAvoidDuplicatesForStaticFinalFields ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( DeclarationOrderCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getPath ( " InputDeclarationOrderAvoidDuplicatesInStaticFinalFields . java " ) , <nl> + expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderAvoidDuplicatesInStaticFinalFields . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderAvoidDuplicatesInStaticFinalFields . java <nl> new file mode 100644 <nl> index 0000000 . . a7a7d7a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderAvoidDuplicatesInStaticFinalFields . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + public class InputDeclarationOrderAvoidDuplicatesInStaticFinalFields <nl> + { <nl> + private boolean allowInSwitchCase ; <nl> + public static final String MSG _ KEY _ BLOCK _ NESTED = " block . nested " ; / / static after final <nl> + / / public after private <nl> + }

TEST DIFF:
diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 index ba31d1b . . 494b128 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 @ @ - 1867 , 14 + 1867 , 6 @ @ BINARY _ DIGIT 
 : ( ' 0 ' | ' 1 ' ) 
 ; 
 
 - 
 - / / a dummy rule to force vocabulary to be all characters ( except special 
 - / / ones that ANTLR uses internally ( 0 to 2 ) 
 - protected 
 - VOCAB 
 - : ' \ 3 ' . . ' \ 377 ' 
 - ; 
 - 
 protected ID _ START : 
 ' _ ' | ' $ ' | 
 (

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 index 8864230 . . 9040b71 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 @ @ - 245 , 11 + 245 , 26 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 * @ param ast ast of Modifiers . 
 * / 
 private void processModifiers ( DetailAST ast ) { 
 - 
 final ScopeState state = scopeStates . peek ( ) ; 
 - if ( ast . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null ) { 
 + final boolean isStateValid = processModifiersState ( ast , state ) ; 
 + processModifiersSubState ( ast , state , isStateValid ) ; 
 + } 
 + 
 + / * * 
 + * Process if given modifiers are appropriate in given state 
 + * ( { @ code STATE _ STATIC _ VARIABLE _ DEF } , { @ code STATE _ INSTANCE _ VARIABLE _ DEF } , 
 + * ( { @ code STATE _ CTOR _ DEF } , { @ code STATE _ METHOD _ DEF } ) , if it is 
 + * it updates states where appropriate or logs violation . 
 + * @ param modifierAst modifiers to process 
 + * @ param state current state 
 + * @ return true if modifierAst is valid in given state , false otherwise 
 + * / 
 + private boolean processModifiersState ( DetailAST modifierAst , ScopeState state ) { 
 + boolean isStateValid = true ; 
 + if ( modifierAst . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null ) { 
 if ( state . currentScopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) { 
 - log ( ast , MSG _ INSTANCE ) ; 
 + isStateValid = false ; 
 + log ( modifierAst , MSG _ INSTANCE ) ; 
 } 
 else if ( state . currentScopeState = = STATE _ STATIC _ VARIABLE _ DEF ) { 
 state . declarationAccess = Scope . PUBLIC ; 
 @ @ - 260 , 19 + 275 , 33 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 if ( state . currentScopeState > STATE _ STATIC _ VARIABLE _ DEF ) { 
 if ( ! ignoreModifiers 
 | | state . currentScopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) { 
 - log ( ast , MSG _ STATIC ) ; 
 + isStateValid = false ; 
 + log ( modifierAst , MSG _ STATIC ) ; 
 } 
 } 
 else { 
 state . currentScopeState = STATE _ STATIC _ VARIABLE _ DEF ; 
 } 
 } 
 + return isStateValid ; 
 + } 
 
 - final Scope access = ScopeUtils . getScopeFromMods ( ast ) ; 
 + / * * 
 + * Checks if given modifiers are valid in substate of given 
 + * state ( { @ code Scope } ) , if it is it updates substate or else it 
 + * logs violation . 
 + * @ param modifiersAst modifiers to process 
 + * @ param state curent state 
 + * @ param isStateValid is main state for given modifiers is valid 
 + * / 
 + private void processModifiersSubState ( DetailAST modifiersAst , ScopeState state , 
 + boolean isStateValid ) { 
 + final Scope access = ScopeUtils . getScopeFromMods ( modifiersAst ) ; 
 if ( state . declarationAccess . compareTo ( access ) > 0 ) { 
 - if ( ! ignoreModifiers 
 - & & ! isForwardReference ( ast . getParent ( ) ) ) { 
 - log ( ast , MSG _ ACCESS ) ; 
 + if ( isStateValid 
 + & & ! ignoreModifiers 
 + & & ! isForwardReference ( modifiersAst . getParent ( ) ) ) { 
 + log ( modifiersAst , MSG _ ACCESS ) ; 
 } 
 } 
 else { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 index ee9d29c . . 4922a42 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 @ @ - 54 , 25 + 54 , 20 @ @ public class DeclarationOrderCheckTest 
 " 18 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 21 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 27 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 27 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 34 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 45 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 45 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 54 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 " 80 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 
 " 92 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 100 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 100 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 106 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 111 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 116 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 119 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 125 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 125 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 132 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 143 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 143 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 152 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 @ @ - 112 , 24 + 107 , 19 @ @ public class DeclarationOrderCheckTest 
 " 18 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 21 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 27 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 27 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 34 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 45 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 45 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 80 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 
 " 92 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 100 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 100 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 106 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 111 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 116 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 119 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 125 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 125 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 132 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 143 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 143 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 } ; 
 @ @ - 184 , 8 + 174 , 18 @ @ public class DeclarationOrderCheckTest 
 " 17 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 23 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 41 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 41 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputDeclarationOrderForwardReference . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testAvoidDuplicatesForStaticFinalFields ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( DeclarationOrderCheck . class ) ; 
 + final String [ ] expected = { 
 + " 6 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 + } ; 
 + verify ( checkConfig , 
 + getPath ( " InputDeclarationOrderAvoidDuplicatesInStaticFinalFields . java " ) , 
 + expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderAvoidDuplicatesInStaticFinalFields . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderAvoidDuplicatesInStaticFinalFields . java 
 new file mode 100644 
 index 0000000 . . a7a7d7a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderAvoidDuplicatesInStaticFinalFields . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + public class InputDeclarationOrderAvoidDuplicatesInStaticFinalFields 
 + { 
 + private boolean allowInSwitchCase ; 
 + public static final String MSG _ KEY _ BLOCK _ NESTED = " block . nested " ; / / static after final 
 + / / public after private 
 + }
