BLEU SCORE: 0.8931539818068694

TEST MSG: Issue # 5832 : Add javadoc and xdoc Example for LocalFinalVariableName
GENERATED MSG: Issue # 5832 : Add javadoc and xdoc Example for ConstantName

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java <nl> index 9611edb . . baf7b26 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java <nl> @ @ - 57 , 7 + 57 , 46 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; <nl> * & lt ; property name = " format " value = " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> - * <nl> + * < p > Code Example : < / p > <nl> + * < pre > <nl> + * class MyClass { <nl> + * void MyMethod ( ) { <nl> + * try { <nl> + * final int VAR1 = 5 ; / / OK <nl> + * final int var1 = 10 ; / / violation , name ' var1 ' must match pattern " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " <nl> + * } catch ( Exception ex ) { <nl> + * final int VAR2 = 15 ; / / OK <nl> + * final int var2 = 20 ; / / violation , name ' var2 ' must match pattern " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " <nl> + * } <nl> + * } <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * An example of how to configure the check for names of local final parameters and <nl> + * resources in try statements ( without checks on variables ) : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; LocalFinalVariableName & quot ; & gt ; <nl> + * & lt ; property name = " format " value = " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " / & gt ; <nl> + * & lt ; property name = " tokens " value = " PARAMETER _ DEF , RESOURCE " & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > Code Example : < / p > <nl> + * < pre > <nl> + * class MyClass { <nl> + * void MyMethod ( ) { <nl> + * try ( Scanner scanner = new Scanner ( ) ) { / / violation , name ' scanner ' must <nl> + * / / match pattern ' ^ [ A - Z ] [ A - Z0 - 9 ] * $ ' <nl> + * final int VAR1 = 5 ; / / OK <nl> + * final int var1 = 10 ; / / OK <nl> + * } catch ( final Exception ex ) { / / violation , name ' ex ' <nl> + * / / must match pattern ' ^ [ A - Z ] [ A - Z0 - 9 ] * $ ' <nl> + * final int VAR2 = 15 ; / / OK <nl> + * final int var2 = 20 ; / / OK <nl> + * } <nl> + * } <nl> + * } <nl> + * < / pre > <nl> * @ since 3 . 0 <nl> * / <nl> public class LocalFinalVariableNameCheck <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index 33b914e . . c84bce3 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 980 , 6 + 980 , 46 @ @ public class TestClass { <nl> & lt ; property name = " format " value = " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + < p > Code Example : < / p > <nl> + < pre > <nl> + class MyClass { <nl> + void MyMethod ( ) { <nl> + try { <nl> + final int VAR1 = 5 ; / / OK <nl> + final int var1 = 10 ; / / violation , name ' var1 ' must match pattern " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " <nl> + } catch ( Exception ex ) { <nl> + final int VAR2 = 15 ; / / OK <nl> + final int var2 = 20 ; / / violation , name ' var2 ' must match pattern " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " <nl> + } <nl> + } <nl> + } <nl> + < / pre > <nl> + < p > <nl> + An example of how to configure the check for names of local final parameters and <nl> + resources in try statements ( without checks on variables ) : <nl> + < / p > <nl> + < pre > <nl> + & lt ; module name = & quot ; LocalFinalVariableName & quot ; & gt ; <nl> + & lt ; property name = " format " value = " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " / & gt ; <nl> + & lt ; property name = " tokens " value = " PARAMETER _ DEF , RESOURCE " & gt ; <nl> + & lt ; / module & gt ; <nl> + < / pre > <nl> + < p > Code Example : < / p > <nl> + < pre > <nl> + class MyClass { <nl> + void MyMethod ( ) { <nl> + try ( Scanner scanner = new Scanner ( ) ) { / / violation , name ' scanner ' must <nl> + / / match pattern ' ^ [ A - Z ] [ A - Z0 - 9 ] * $ ' <nl> + final int VAR1 = 5 ; / / OK <nl> + final int var1 = 10 ; / / OK <nl> + } catch ( final Exception ex ) { / / violation , name ' ex ' <nl> + / / must match pattern ' ^ [ A - Z ] [ A - Z0 - 9 ] * $ ' <nl> + final int VAR2 = 15 ; / / OK <nl> + final int var2 = 20 ; / / OK <nl> + } <nl> + } <nl> + } <nl> + < / pre > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " id = " LocalFinalVariableName _ Example _ of _ Usage " >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 959e81f . . 60ebe82 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2390 , 6 + 2390 , 7 @ @ <nl> < mutator > INVERT _ NEGS < / mutator > <nl> < mutator > MATH < / mutator > <nl> < mutator > NEGATE _ CONDITIONALS < / mutator > <nl> + < mutator > REMOVE _ CONDITIONALS < / mutator > <nl> < mutator > RETURN _ VALS < / mutator > <nl> < mutator > TRUE _ RETURNS < / mutator > <nl> < mutator > VOID _ METHOD _ CALLS < / mutator > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> index 297f687 . . 3c08789 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> @ @ - 105 , 7 + 105 , 7 @ @ public class ParameterNumberCheckTest <nl> } <nl> <nl> @ Test <nl> - public void shouldIgnoreMethodsWithOverrideAnnotation ( ) <nl> + public void testIgnoreOverriddenMethods ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( ParameterNumberCheck . class ) ; <nl> @ @ - 117 , 4 + 117 , 18 @ @ public class ParameterNumberCheckTest <nl> verify ( checkConfig , getPath ( " InputParameterNumber . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testIgnoreOverriddenMethodsFalse ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( ParameterNumberCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 10 : " + getCheckMessage ( MSG _ KEY , 7 , 8 ) , <nl> + " 11 : 10 : " + getCheckMessage ( MSG _ KEY , 7 , 8 ) , <nl> + " 19 : 10 : " + getCheckMessage ( MSG _ KEY , 7 , 8 ) , <nl> + " 24 : 10 : " + getCheckMessage ( MSG _ KEY , 7 , 8 ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputParameterNumber . java " ) , expected ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java <nl> index d637940 . . 37343e3 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java <nl> @ @ - 86 , 4 + 86 , 8 @ @ public class InputExecutableStatementCount { <nl> <nl> / * * Empty constructor * / <nl> public InputExecutableStatementCount ( String someString ) { } <nl> + <nl> + static Runnable r1 = ( ) - > { <nl> + String . valueOf ( " Hello world one ! " ) ; <nl> + } ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java 
 index 9611edb . . baf7b26 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java 
 @ @ - 57 , 7 + 57 , 46 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; 
 * & lt ; property name = " format " value = " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 - * 
 + * < p > Code Example : < / p > 
 + * < pre > 
 + * class MyClass { 
 + * void MyMethod ( ) { 
 + * try { 
 + * final int VAR1 = 5 ; / / OK 
 + * final int var1 = 10 ; / / violation , name ' var1 ' must match pattern " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " 
 + * } catch ( Exception ex ) { 
 + * final int VAR2 = 15 ; / / OK 
 + * final int var2 = 20 ; / / violation , name ' var2 ' must match pattern " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " 
 + * } 
 + * } 
 + * } 
 + * < / pre > 
 + * < p > 
 + * An example of how to configure the check for names of local final parameters and 
 + * resources in try statements ( without checks on variables ) : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; LocalFinalVariableName & quot ; & gt ; 
 + * & lt ; property name = " format " value = " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " / & gt ; 
 + * & lt ; property name = " tokens " value = " PARAMETER _ DEF , RESOURCE " & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > Code Example : < / p > 
 + * < pre > 
 + * class MyClass { 
 + * void MyMethod ( ) { 
 + * try ( Scanner scanner = new Scanner ( ) ) { / / violation , name ' scanner ' must 
 + * / / match pattern ' ^ [ A - Z ] [ A - Z0 - 9 ] * $ ' 
 + * final int VAR1 = 5 ; / / OK 
 + * final int var1 = 10 ; / / OK 
 + * } catch ( final Exception ex ) { / / violation , name ' ex ' 
 + * / / must match pattern ' ^ [ A - Z ] [ A - Z0 - 9 ] * $ ' 
 + * final int VAR2 = 15 ; / / OK 
 + * final int var2 = 20 ; / / OK 
 + * } 
 + * } 
 + * } 
 + * < / pre > 
 * @ since 3 . 0 
 * / 
 public class LocalFinalVariableNameCheck 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index 33b914e . . c84bce3 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 980 , 6 + 980 , 46 @ @ public class TestClass { 
 & lt ; property name = " format " value = " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + < p > Code Example : < / p > 
 + < pre > 
 + class MyClass { 
 + void MyMethod ( ) { 
 + try { 
 + final int VAR1 = 5 ; / / OK 
 + final int var1 = 10 ; / / violation , name ' var1 ' must match pattern " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " 
 + } catch ( Exception ex ) { 
 + final int VAR2 = 15 ; / / OK 
 + final int var2 = 20 ; / / violation , name ' var2 ' must match pattern " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " 
 + } 
 + } 
 + } 
 + < / pre > 
 + < p > 
 + An example of how to configure the check for names of local final parameters and 
 + resources in try statements ( without checks on variables ) : 
 + < / p > 
 + < pre > 
 + & lt ; module name = & quot ; LocalFinalVariableName & quot ; & gt ; 
 + & lt ; property name = " format " value = " ^ [ A - Z ] [ A - Z0 - 9 ] * $ " / & gt ; 
 + & lt ; property name = " tokens " value = " PARAMETER _ DEF , RESOURCE " & gt ; 
 + & lt ; / module & gt ; 
 + < / pre > 
 + < p > Code Example : < / p > 
 + < pre > 
 + class MyClass { 
 + void MyMethod ( ) { 
 + try ( Scanner scanner = new Scanner ( ) ) { / / violation , name ' scanner ' must 
 + / / match pattern ' ^ [ A - Z ] [ A - Z0 - 9 ] * $ ' 
 + final int VAR1 = 5 ; / / OK 
 + final int var1 = 10 ; / / OK 
 + } catch ( final Exception ex ) { / / violation , name ' ex ' 
 + / / must match pattern ' ^ [ A - Z ] [ A - Z0 - 9 ] * $ ' 
 + final int VAR2 = 15 ; / / OK 
 + final int var2 = 20 ; / / OK 
 + } 
 + } 
 + } 
 + < / pre > 
 < / subsection > 
 
 < subsection name = " Example of Usage " id = " LocalFinalVariableName _ Example _ of _ Usage " >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 959e81f . . 60ebe82 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2390 , 6 + 2390 , 7 @ @ 
 < mutator > INVERT _ NEGS < / mutator > 
 < mutator > MATH < / mutator > 
 < mutator > NEGATE _ CONDITIONALS < / mutator > 
 + < mutator > REMOVE _ CONDITIONALS < / mutator > 
 < mutator > RETURN _ VALS < / mutator > 
 < mutator > TRUE _ RETURNS < / mutator > 
 < mutator > VOID _ METHOD _ CALLS < / mutator > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 index 297f687 . . 3c08789 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 @ @ - 105 , 7 + 105 , 7 @ @ public class ParameterNumberCheckTest 
 } 
 
 @ Test 
 - public void shouldIgnoreMethodsWithOverrideAnnotation ( ) 
 + public void testIgnoreOverriddenMethods ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( ParameterNumberCheck . class ) ; 
 @ @ - 117 , 4 + 117 , 18 @ @ public class ParameterNumberCheckTest 
 verify ( checkConfig , getPath ( " InputParameterNumber . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testIgnoreOverriddenMethodsFalse ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( ParameterNumberCheck . class ) ; 
 + final String [ ] expected = { 
 + " 6 : 10 : " + getCheckMessage ( MSG _ KEY , 7 , 8 ) , 
 + " 11 : 10 : " + getCheckMessage ( MSG _ KEY , 7 , 8 ) , 
 + " 19 : 10 : " + getCheckMessage ( MSG _ KEY , 7 , 8 ) , 
 + " 24 : 10 : " + getCheckMessage ( MSG _ KEY , 7 , 8 ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputParameterNumber . java " ) , expected ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java 
 index d637940 . . 37343e3 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java 
 @ @ - 86 , 4 + 86 , 8 @ @ public class InputExecutableStatementCount { 
 
 / * * Empty constructor * / 
 public InputExecutableStatementCount ( String someString ) { } 
 + 
 + static Runnable r1 = ( ) - > { 
 + String . valueOf ( " Hello world one ! " ) ; 
 + } ; 
 }
