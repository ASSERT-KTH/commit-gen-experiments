BLEU SCORE: 0.0561448414888736

TEST MSG: Issue # 3166 : fix CommentsIndentation Check incorrect work with subsequent comments
GENERATED MSG: Issue # 3220 : CommentsIndentation : allow upper comments for following block at multi - block structures

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java <nl> index 77a0ec4 . . 930e76e 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java <nl> @ @ - 133 , 9 + 133 , 9 @ @ public class CommentsIndentationTest extends BaseCheckTestSupport { <nl> " 200 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> " 199 , 201 " , 4 , " 12 , 12 " ) , <nl> " 203 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> - 204 , 22 , 20 ) , <nl> + " 202 , 206 " , 22 , " 16 , 12 " ) , <nl> " 204 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> - 205 , 20 , 17 ) , <nl> + " 202 , 206 " , 20 , " 16 , 12 " ) , <nl> " 205 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> " 202 , 206 " , 17 , " 16 , 12 " ) , <nl> " 229 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> @ @ - 154 , 7 + 154 , 7 @ @ public class CommentsIndentationTest extends BaseCheckTestSupport { <nl> public void testCommentIsInsideEmptyBlock ( ) throws Exception { <nl> final String [ ] expected = { <nl> " 9 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> - 10 , 19 , 23 ) , <nl> + 12 , 19 , 31 ) , <nl> " 10 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , <nl> 12 , 23 , 31 ) , <nl> " 33 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> @ @ - 185 , 13 + 185 , 13 @ @ public class CommentsIndentationTest extends BaseCheckTestSupport { <nl> " 28 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , <nl> 31 , 16 , 12 ) , <nl> " 50 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> - 51 , 27 , 23 ) , <nl> + 53 , 27 , 36 ) , <nl> " 51 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , <nl> 53 , 23 , 36 ) , <nl> " 90 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> 91 , 14 , 8 ) , <nl> " 98 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> - 99 , 13 , 8 ) , <nl> + 100 , 13 , 8 ) , <nl> " 108 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> 109 , 33 , 8 ) , <nl> } ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> index adeae49 . . d2fa51e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> @ @ - 132 , 7 + 132 , 7 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> * / <nl> private void visitComment ( DetailAST comment ) { <nl> final DetailAST prevStmt = getPreviousStatement ( comment ) ; <nl> - final DetailAST nextStmt = comment . getNextSibling ( ) ; <nl> + final DetailAST nextStmt = getNextStmt ( comment ) ; <nl> <nl> if ( ! isTrailingComment ( comment ) ) { <nl> if ( isInEmptyCaseBlock ( prevStmt , nextStmt ) ) { <nl> @ @ - 155 , 6 + 155 , 21 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Returns the next statement of a comment . <nl> + * @ param comment comment . <nl> + * @ return the next statement of a comment . <nl> + * / <nl> + private static DetailAST getNextStmt ( DetailAST comment ) { <nl> + DetailAST nextStmt = comment . getNextSibling ( ) ; <nl> + while ( nextStmt ! = null <nl> + & & isComment ( nextStmt ) <nl> + & & comment . getColumnNo ( ) ! = nextStmt . getColumnNo ( ) ) { <nl> + nextStmt = nextStmt . getNextSibling ( ) ; <nl> + } <nl> + return nextStmt ; <nl> + } <nl> + <nl> + / * * <nl> * Returns the previous statement of a comment . <nl> * @ param comment comment . <nl> * @ return the previous statement of a comment . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> index 7ecbf57 . . fb84af7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> @ @ - 96 , 6 + 96 , 7 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { <nl> " 546 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 542 , 4 , 8 ) , <nl> " 551 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 550 , 12 , 8 ) , <nl> " 557 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 555 , 0 , 8 ) , <nl> + " 562 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 561 , 0 , 8 ) , <nl> } ; <nl> final String testInputFile = " InputCommentsIndentationCommentIsAtTheEndOfBlock . java " ; <nl> verify ( checkConfig , getPath ( testInputFile ) , expected ) ; <nl> @ @ - 119 , 8 + 120 , 8 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { <nl> " 138 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 139 , 4 , 8 ) , <nl> " 157 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 156 , 158 " , 18 , " 16 , 12 " ) , <nl> " 200 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 199 , 201 " , 4 , " 12 , 12 " ) , <nl> - " 203 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 204 , 22 , 20 ) , <nl> - " 204 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 205 , 20 , 17 ) , <nl> + " 203 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 202 , 206 " , 22 , " 16 , 12 " ) , <nl> + " 204 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 202 , 206 " , 20 , " 16 , 12 " ) , <nl> " 205 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 202 , 206 " , 17 , " 16 , 12 " ) , <nl> " 229 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 228 , 230 " , 6 , " 12 , 12 " ) , <nl> " 276 : " + getCheckMessage ( MSG _ KEY _ BLOCK , " 275 , 279 " , 11 , " 16 , 12 " ) , <nl> @ @ - 135 , 7 + 136 , 7 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( CommentsIndentationCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 9 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 10 , 19 , 23 ) , <nl> + " 9 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 12 , 19 , 31 ) , <nl> " 10 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 12 , 23 , 31 ) , <nl> " 33 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 34 , 0 , 8 ) , <nl> " 57 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 58 , 0 , 8 ) , <nl> @ @ - 156 , 10 + 157 , 10 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { <nl> " 23 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 24 , 16 , 12 ) , <nl> " 25 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 27 , 16 , 12 ) , <nl> " 28 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 31 , 16 , 12 ) , <nl> - " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 51 , 27 , 23 ) , <nl> + " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 53 , 27 , 36 ) , <nl> " 51 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 53 , 23 , 36 ) , <nl> " 90 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 91 , 14 , 8 ) , <nl> - " 98 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 99 , 13 , 8 ) , <nl> + " 98 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 100 , 13 , 8 ) , <nl> " 108 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 109 , 33 , 8 ) , <nl> " 130 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 131 , 12 , 8 ) , <nl> " 135 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 136 , 4 , 8 ) , <nl> @ @ - 185 , 9 + 186 , 9 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " tokens " , " SINGLE _ LINE _ COMMENT " ) ; <nl> final String [ ] expected = { <nl> " 13 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 14 , 14 , 12 ) , <nl> - " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 51 , 27 , 23 ) , <nl> + " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 53 , 27 , 36 ) , <nl> " 90 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 91 , 14 , 8 ) , <nl> - " 98 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 99 , 13 , 8 ) , <nl> + " 98 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 100 , 13 , 8 ) , <nl> " 108 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 109 , 33 , 8 ) , <nl> } ; <nl> final String testInputFile = " InputCommentsIndentationSurroundingCode . java " ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> index 1701232 . . 94c0a56 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> @ @ - 557 , 6 + 557 , 12 @ @ public class InputCommentsIndentationCommentIsAtTheEndOfBlock { <nl> / / comment <nl> } <nl> <nl> + void foo75 ( ) { <nl> + getClass ( ) ; <nl> + / / comment <nl> + / / comment <nl> + } <nl> + <nl> / / We almost reached the end of the class here . <nl> } <nl> / / The END of the class .
NEAREST DIFF (one line): diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm <nl> index 41f6b84 . . 5a345ed 100644 <nl> - - - a / src / xdocs / writingjavadocchecks . xml . vm <nl> + + + b / src / xdocs / writingjavadocchecks . xml . vm <nl> @ @ - 51 , 9 + 51 , 9 @ @ public class MyClass { <nl> < p > <nl> Javadoc by specification could contain any HTML tags that let user generate content he needs . <nl> Checkstyle can not parse something that looks like an HTML , so limitation appear . <nl> - The comment should be written in XHTML to be correctly processed by Checkstyle . This means that every HTML tag should have matching closed HTML tag or it is self - closed one ( singlton tag ) . <nl> + The comment should be written in XHTML to build nested AST Tree that most Checks expect . This means that every HTML tag should have matching closed HTML tag or it is self - closed tag ( singleton tag ) . <nl> The only exceptions are HTML 4 tags that don ' t require closing tag and HTML 4 singleton tags , so , Checkstyle won ' t show error about missing closing tag , however , it leads to broken XHTML structure and to <nl> - not - nested content of the HTML tags in Abstract Syntax Tree of the Javadoc comment . More details about HTML at < a href = " # HTML _ Code _ In _ Javadoc _ Comments " > HTML Code In Javadoc Comments < / a > section . <nl> + not - nested content of the HTML tags in Abstract Syntax Tree of the Javadoc comment . For More details about HTML in AST read < a href = " # HTML _ Code _ In _ Javadoc _ Comments " > HTML Code In Javadoc Comments < / a > section . <nl> < / p > <nl> < p > <nl> Javadoc grammar requires XHTML , but it can also parse some parts of HTML code ( like some unclosed tags ) . If HTML tags are not closed Javadoc grammar cannot determine content of these tags , <nl> @ @ - 219 , 7 + 219 , 7 @ @ JAVADOC - > * My < b > class < / b > . \ r \ n * @ see AbstractClass < EOF > [ 0 : 0 ] <nl> < / section > <nl> <nl> < section name = " Access Java AST from Javadoc Check " > <nl> - As you alreasy know Javadoc parse tree is result of parsing block comment . There is a method to get the original block comment from Javadoc Check . <nl> + As you already know Javadoc parse tree is result of parsing block comment . There is a method to get the original block comment from Javadoc Check . <nl> You may need this block comment to check its position or something else in java < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / DetailAST . html " > DetailAST < / a > tree . <nl> < p > <nl> For example , to write a JavadocCheck that verifies @ param tags in Javadoc comment of a method definition , you also need all method ' s parameter names . To get method definition AST you should access java < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / DetailAST . html " > DetailAST < / a > tree from javadoc Check . For this purpose use < a href = " apidocs / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . html # getBlockCommentAst - - " > getBlockCommentAst ( ) < / a > method that returns < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / DetailAST . html " > DetailAST < / a > node . <nl> @ @ - 264 , 17 + 264 , 17 @ @ class MyCheck extends AbstractJavadocCheck { <nl> HTML 4 is picked just to have a list of tags that don ' t require closing tag and a list of singleton tags that don ' t need closing tag at all . <nl> < / p > <nl> < p > <nl> - Tags that don ' t require closing tag : & lt ; P & gt ; , & lt ; LI & gt ; , & lt ; TR & gt ; , & lt ; TD & gt ; , & lt ; TH & gt ; , & lt ; BODY & gt ; , & lt ; COLGROUP & gt ; , & lt ; DD & gt ; , <nl> + Tags that don ' t require closing tag : & lt ; P & gt ; , & lt ; LI & gt ; , & lt ; TR & gt ; , & lt ; TD & gt ; , & lt ; TH & gt ; , & lt ; BODY & gt ; , & lt ; COLGROUP & gt ; , & lt ; DD & gt ; , <nl> & lt ; DT & gt ; , & lt ; HEAD & gt ; , & lt ; HTML & gt ; , & lt ; OPTION & gt ; , & lt ; TBODY & gt ; , & lt ; THEAD & gt ; , & lt ; TFOOT & gt ; . <nl> < / p > <nl> < p > <nl> - Singleton tags that don ' t need closing tag : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , <nl> + Singleton tags that don ' t need closing tag : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , <nl> & lt ; HR & gt ; , & lt ; IMG & gt ; , & lt ; INPUT & gt ; , & lt ; ISINDEX & gt ; , & lt ; LINK & gt ; , & lt ; META & gt ; , & lt ; PARAM & gt ; . <nl> < / p > <nl> < p > <nl> If Checkstyle meets unknown tag ( for example HTML5 tag ) <nl> it doesn ' t fail and parses this tag as < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # HTML _ TAG " > HTML _ TAG < / a > Javadoc token type . <nl> - Just follow XHTML rules to make Checkstyle javadoc parser happy , even though tags are unknown . <nl> + Just follow XHTML rules to make Checkstyle javadoc parser make nested AST , even though tags are unknown . <nl> <nl> < source > < ! [ CDATA [ <nl> < audio > < source src = " horse . ogg " type = " audio / ogg " / > < / audio >

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java 
 index 77a0ec4 . . 930e76e 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java 
 @ @ - 133 , 9 + 133 , 9 @ @ public class CommentsIndentationTest extends BaseCheckTestSupport { 
 " 200 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 " 199 , 201 " , 4 , " 12 , 12 " ) , 
 " 203 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 - 204 , 22 , 20 ) , 
 + " 202 , 206 " , 22 , " 16 , 12 " ) , 
 " 204 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 - 205 , 20 , 17 ) , 
 + " 202 , 206 " , 20 , " 16 , 12 " ) , 
 " 205 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 " 202 , 206 " , 17 , " 16 , 12 " ) , 
 " 229 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 @ @ - 154 , 7 + 154 , 7 @ @ public class CommentsIndentationTest extends BaseCheckTestSupport { 
 public void testCommentIsInsideEmptyBlock ( ) throws Exception { 
 final String [ ] expected = { 
 " 9 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 - 10 , 19 , 23 ) , 
 + 12 , 19 , 31 ) , 
 " 10 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , 
 12 , 23 , 31 ) , 
 " 33 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 @ @ - 185 , 13 + 185 , 13 @ @ public class CommentsIndentationTest extends BaseCheckTestSupport { 
 " 28 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , 
 31 , 16 , 12 ) , 
 " 50 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 - 51 , 27 , 23 ) , 
 + 53 , 27 , 36 ) , 
 " 51 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , 
 53 , 23 , 36 ) , 
 " 90 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 91 , 14 , 8 ) , 
 " 98 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 - 99 , 13 , 8 ) , 
 + 100 , 13 , 8 ) , 
 " 108 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 109 , 33 , 8 ) , 
 } ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 index adeae49 . . d2fa51e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 @ @ - 132 , 7 + 132 , 7 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 * / 
 private void visitComment ( DetailAST comment ) { 
 final DetailAST prevStmt = getPreviousStatement ( comment ) ; 
 - final DetailAST nextStmt = comment . getNextSibling ( ) ; 
 + final DetailAST nextStmt = getNextStmt ( comment ) ; 
 
 if ( ! isTrailingComment ( comment ) ) { 
 if ( isInEmptyCaseBlock ( prevStmt , nextStmt ) ) { 
 @ @ - 155 , 6 + 155 , 21 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Returns the next statement of a comment . 
 + * @ param comment comment . 
 + * @ return the next statement of a comment . 
 + * / 
 + private static DetailAST getNextStmt ( DetailAST comment ) { 
 + DetailAST nextStmt = comment . getNextSibling ( ) ; 
 + while ( nextStmt ! = null 
 + & & isComment ( nextStmt ) 
 + & & comment . getColumnNo ( ) ! = nextStmt . getColumnNo ( ) ) { 
 + nextStmt = nextStmt . getNextSibling ( ) ; 
 + } 
 + return nextStmt ; 
 + } 
 + 
 + / * * 
 * Returns the previous statement of a comment . 
 * @ param comment comment . 
 * @ return the previous statement of a comment . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 index 7ecbf57 . . fb84af7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 @ @ - 96 , 6 + 96 , 7 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { 
 " 546 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 542 , 4 , 8 ) , 
 " 551 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 550 , 12 , 8 ) , 
 " 557 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 555 , 0 , 8 ) , 
 + " 562 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 561 , 0 , 8 ) , 
 } ; 
 final String testInputFile = " InputCommentsIndentationCommentIsAtTheEndOfBlock . java " ; 
 verify ( checkConfig , getPath ( testInputFile ) , expected ) ; 
 @ @ - 119 , 8 + 120 , 8 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { 
 " 138 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 139 , 4 , 8 ) , 
 " 157 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 156 , 158 " , 18 , " 16 , 12 " ) , 
 " 200 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 199 , 201 " , 4 , " 12 , 12 " ) , 
 - " 203 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 204 , 22 , 20 ) , 
 - " 204 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 205 , 20 , 17 ) , 
 + " 203 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 202 , 206 " , 22 , " 16 , 12 " ) , 
 + " 204 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 202 , 206 " , 20 , " 16 , 12 " ) , 
 " 205 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 202 , 206 " , 17 , " 16 , 12 " ) , 
 " 229 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 228 , 230 " , 6 , " 12 , 12 " ) , 
 " 276 : " + getCheckMessage ( MSG _ KEY _ BLOCK , " 275 , 279 " , 11 , " 16 , 12 " ) , 
 @ @ - 135 , 7 + 136 , 7 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( CommentsIndentationCheck . class ) ; 
 final String [ ] expected = { 
 - " 9 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 10 , 19 , 23 ) , 
 + " 9 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 12 , 19 , 31 ) , 
 " 10 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 12 , 23 , 31 ) , 
 " 33 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 34 , 0 , 8 ) , 
 " 57 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 58 , 0 , 8 ) , 
 @ @ - 156 , 10 + 157 , 10 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { 
 " 23 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 24 , 16 , 12 ) , 
 " 25 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 27 , 16 , 12 ) , 
 " 28 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 31 , 16 , 12 ) , 
 - " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 51 , 27 , 23 ) , 
 + " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 53 , 27 , 36 ) , 
 " 51 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 53 , 23 , 36 ) , 
 " 90 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 91 , 14 , 8 ) , 
 - " 98 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 99 , 13 , 8 ) , 
 + " 98 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 100 , 13 , 8 ) , 
 " 108 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 109 , 33 , 8 ) , 
 " 130 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 131 , 12 , 8 ) , 
 " 135 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 136 , 4 , 8 ) , 
 @ @ - 185 , 9 + 186 , 9 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " tokens " , " SINGLE _ LINE _ COMMENT " ) ; 
 final String [ ] expected = { 
 " 13 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 14 , 14 , 12 ) , 
 - " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 51 , 27 , 23 ) , 
 + " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 53 , 27 , 36 ) , 
 " 90 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 91 , 14 , 8 ) , 
 - " 98 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 99 , 13 , 8 ) , 
 + " 98 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 100 , 13 , 8 ) , 
 " 108 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 109 , 33 , 8 ) , 
 } ; 
 final String testInputFile = " InputCommentsIndentationSurroundingCode . java " ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 index 1701232 . . 94c0a56 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 @ @ - 557 , 6 + 557 , 12 @ @ public class InputCommentsIndentationCommentIsAtTheEndOfBlock { 
 / / comment 
 } 
 
 + void foo75 ( ) { 
 + getClass ( ) ; 
 + / / comment 
 + / / comment 
 + } 
 + 
 / / We almost reached the end of the class here . 
 } 
 / / The END of the class .

NEAREST DIFF:
diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm 
 index 41f6b84 . . 5a345ed 100644 
 - - - a / src / xdocs / writingjavadocchecks . xml . vm 
 + + + b / src / xdocs / writingjavadocchecks . xml . vm 
 @ @ - 51 , 9 + 51 , 9 @ @ public class MyClass { 
 < p > 
 Javadoc by specification could contain any HTML tags that let user generate content he needs . 
 Checkstyle can not parse something that looks like an HTML , so limitation appear . 
 - The comment should be written in XHTML to be correctly processed by Checkstyle . This means that every HTML tag should have matching closed HTML tag or it is self - closed one ( singlton tag ) . 
 + The comment should be written in XHTML to build nested AST Tree that most Checks expect . This means that every HTML tag should have matching closed HTML tag or it is self - closed tag ( singleton tag ) . 
 The only exceptions are HTML 4 tags that don ' t require closing tag and HTML 4 singleton tags , so , Checkstyle won ' t show error about missing closing tag , however , it leads to broken XHTML structure and to 
 - not - nested content of the HTML tags in Abstract Syntax Tree of the Javadoc comment . More details about HTML at < a href = " # HTML _ Code _ In _ Javadoc _ Comments " > HTML Code In Javadoc Comments < / a > section . 
 + not - nested content of the HTML tags in Abstract Syntax Tree of the Javadoc comment . For More details about HTML in AST read < a href = " # HTML _ Code _ In _ Javadoc _ Comments " > HTML Code In Javadoc Comments < / a > section . 
 < / p > 
 < p > 
 Javadoc grammar requires XHTML , but it can also parse some parts of HTML code ( like some unclosed tags ) . If HTML tags are not closed Javadoc grammar cannot determine content of these tags , 
 @ @ - 219 , 7 + 219 , 7 @ @ JAVADOC - > * My < b > class < / b > . \ r \ n * @ see AbstractClass < EOF > [ 0 : 0 ] 
 < / section > 
 
 < section name = " Access Java AST from Javadoc Check " > 
 - As you alreasy know Javadoc parse tree is result of parsing block comment . There is a method to get the original block comment from Javadoc Check . 
 + As you already know Javadoc parse tree is result of parsing block comment . There is a method to get the original block comment from Javadoc Check . 
 You may need this block comment to check its position or something else in java < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / DetailAST . html " > DetailAST < / a > tree . 
 < p > 
 For example , to write a JavadocCheck that verifies @ param tags in Javadoc comment of a method definition , you also need all method ' s parameter names . To get method definition AST you should access java < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / DetailAST . html " > DetailAST < / a > tree from javadoc Check . For this purpose use < a href = " apidocs / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . html # getBlockCommentAst - - " > getBlockCommentAst ( ) < / a > method that returns < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / DetailAST . html " > DetailAST < / a > node . 
 @ @ - 264 , 17 + 264 , 17 @ @ class MyCheck extends AbstractJavadocCheck { 
 HTML 4 is picked just to have a list of tags that don ' t require closing tag and a list of singleton tags that don ' t need closing tag at all . 
 < / p > 
 < p > 
 - Tags that don ' t require closing tag : & lt ; P & gt ; , & lt ; LI & gt ; , & lt ; TR & gt ; , & lt ; TD & gt ; , & lt ; TH & gt ; , & lt ; BODY & gt ; , & lt ; COLGROUP & gt ; , & lt ; DD & gt ; , 
 + Tags that don ' t require closing tag : & lt ; P & gt ; , & lt ; LI & gt ; , & lt ; TR & gt ; , & lt ; TD & gt ; , & lt ; TH & gt ; , & lt ; BODY & gt ; , & lt ; COLGROUP & gt ; , & lt ; DD & gt ; , 
 & lt ; DT & gt ; , & lt ; HEAD & gt ; , & lt ; HTML & gt ; , & lt ; OPTION & gt ; , & lt ; TBODY & gt ; , & lt ; THEAD & gt ; , & lt ; TFOOT & gt ; . 
 < / p > 
 < p > 
 - Singleton tags that don ' t need closing tag : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , 
 + Singleton tags that don ' t need closing tag : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , 
 & lt ; HR & gt ; , & lt ; IMG & gt ; , & lt ; INPUT & gt ; , & lt ; ISINDEX & gt ; , & lt ; LINK & gt ; , & lt ; META & gt ; , & lt ; PARAM & gt ; . 
 < / p > 
 < p > 
 If Checkstyle meets unknown tag ( for example HTML5 tag ) 
 it doesn ' t fail and parses this tag as < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # HTML _ TAG " > HTML _ TAG < / a > Javadoc token type . 
 - Just follow XHTML rules to make Checkstyle javadoc parser happy , even though tags are unknown . 
 + Just follow XHTML rules to make Checkstyle javadoc parser make nested AST , even though tags are unknown . 
 
 < source > < ! [ CDATA [ 
 < audio > < source src = " horse . ogg " type = " audio / ogg " / > < / audio >
