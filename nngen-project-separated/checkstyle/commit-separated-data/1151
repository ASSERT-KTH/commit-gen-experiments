BLEU SCORE: 0.028398387225677897

TEST MSG: Pull # 3293 : Replace Guava ' s Optional with Java ' s native
GENERATED MSG: Do not allocate arrays of zero length . # 1555

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> index 70473ee . . cadbfd2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . io . InputStream ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> + import java . util . Optional ; <nl> import java . util . Properties ; <nl> import java . util . Set ; <nl> import java . util . SortedSet ; <nl> @ @ - 36 , 7 + 37 , 6 @ @ import java . util . regex . Pattern ; <nl> import org . apache . commons . logging . Log ; <nl> import org . apache . commons . logging . LogFactory ; <nl> <nl> - import com . google . common . base . Optional ; <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . SetMultimap ; <nl> import com . google . common . collect . Sets ; <nl> @ @ - 306 , 7 + 306 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> fileNameRegexp = String . format ( Locale . ROOT , <nl> REGEXP _ FORMAT _ TO _ CHECK _ REQUIRED _ TRANSLATIONS , baseName , languageCode , extension ) ; <nl> } <nl> - Optional < String > missingFileName = Optional . absent ( ) ; <nl> + Optional < String > missingFileName = Optional . empty ( ) ; <nl> if ( ! bundle . containsFile ( fileNameRegexp ) ) { <nl> if ( searchForDefaultTranslation ) { <nl> missingFileName = Optional . of ( String . format ( Locale . ROOT , <nl> @ @ - 372 , 7 + 372 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> * / <nl> private static Optional < ResourceBundle > findBundle ( Set < ResourceBundle > bundles , <nl> ResourceBundle targetBundle ) { <nl> - Optional < ResourceBundle > result = Optional . absent ( ) ; <nl> + Optional < ResourceBundle > result = Optional . empty ( ) ; <nl> for ( ResourceBundle currentBundle : bundles ) { <nl> if ( targetBundle . getBaseName ( ) . equals ( currentBundle . getBaseName ( ) ) <nl> & & targetBundle . getExtension ( ) . equals ( currentBundle . getExtension ( ) ) <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> index 07349c2 . . b27ed97 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> @ @ - 19 , 9 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> + import java . util . Optional ; <nl> import java . util . regex . Pattern ; <nl> <nl> - import com . google . common . base . Optional ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> @ @ - 217 , 9 + 217 , 9 @ @ public class UncommentedMainCheck <nl> <nl> if ( params . getChildCount ( ) = = 1 ) { <nl> final DetailAST parameterType = params . getFirstChild ( ) . findFirstToken ( TokenTypes . TYPE ) ; <nl> - final Optional < DetailAST > arrayDecl = Optional . fromNullable ( <nl> + final Optional < DetailAST > arrayDecl = Optional . ofNullable ( <nl> parameterType . findFirstToken ( TokenTypes . ARRAY _ DECLARATOR ) ) ; <nl> - final Optional < DetailAST > varargs = Optional . fromNullable ( <nl> + final Optional < DetailAST > varargs = Optional . ofNullable ( <nl> params . getFirstChild ( ) . findFirstToken ( TokenTypes . ELLIPSIS ) ) ; <nl> <nl> if ( arrayDecl . isPresent ( ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index 158fe6b . . 3ec540e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 25 , 8 + 25 , 8 @ @ import java . util . Deque ; <nl> import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . Map ; <nl> + import java . util . Optional ; <nl> <nl> - import com . google . common . base . Optional ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 288 , 7 + 288 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> * @ return Optional of { @ link FinalVariableCandidate } for ast from scopeStack . <nl> * / <nl> private Optional < FinalVariableCandidate > getFinalCandidate ( DetailAST ast ) { <nl> - Optional < FinalVariableCandidate > result = Optional . absent ( ) ; <nl> + Optional < FinalVariableCandidate > result = Optional . empty ( ) ; <nl> final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; <nl> while ( iterator . hasNext ( ) & & ! result . isPresent ( ) ) { <nl> final ScopeData scopeData = iterator . next ( ) ; <nl> @ @ - 635 , 10 + 635 , 10 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> * @ return Optional of { @ link FinalVariableCandidate } . <nl> * / <nl> public Optional < FinalVariableCandidate > findFinalVariableCandidateForAst ( DetailAST ast ) { <nl> - Optional < FinalVariableCandidate > result = Optional . absent ( ) ; <nl> + Optional < FinalVariableCandidate > result = Optional . empty ( ) ; <nl> DetailAST storedVariable = null ; <nl> final Optional < FinalVariableCandidate > candidate = <nl> - Optional . fromNullable ( scope . get ( ast . getText ( ) ) ) ; <nl> + Optional . ofNullable ( scope . get ( ast . getText ( ) ) ) ; <nl> if ( candidate . isPresent ( ) ) { <nl> storedVariable = candidate . get ( ) . variableIdent ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> index 9881161 . . e709dae 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> @ @ - 19 , 7 + 19 , 8 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> <nl> - import com . google . common . base . Optional ; <nl> + import java . util . Optional ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> @ @ - 123 , 11 + 124 , 11 @ @ public class ParameterNameCheck <nl> <nl> final DetailAST parent = ast . getParent ( ) . getParent ( ) ; <nl> final Optional < DetailAST > annotation = <nl> - Optional . fromNullable ( parent . getFirstChild ( ) . getFirstChild ( ) ) ; <nl> + Optional . ofNullable ( parent . getFirstChild ( ) . getFirstChild ( ) ) ; <nl> <nl> if ( annotation . isPresent ( ) & & annotation . get ( ) . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> final Optional < DetailAST > overrideToken = <nl> - Optional . fromNullable ( annotation . get ( ) . findFirstToken ( TokenTypes . IDENT ) ) ; <nl> + Optional . ofNullable ( annotation . get ( ) . findFirstToken ( TokenTypes . IDENT ) ) ; <nl> if ( overrideToken . isPresent ( ) & & " Override " . equals ( overrideToken . get ( ) . getText ( ) ) ) { <nl> overridden = true ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> index 632ccc6 . . 031be70 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> @ @ - 28 , 7 + 28 , 6 @ @ import java . io . IOException ; <nl> import org . junit . Test ; <nl> <nl> import antlr . CommonHiddenStreamToken ; <nl> - <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> @ @ - 398 , 7 + 397 , 7 @ @ public class VisibilityModifierCheckTest <nl> checkConfig . addAttribute ( " immutableClassCanonicalNames " , <nl> " com . google . common . collect . ImmutableMap , " <nl> + " java . lang . String , " <nl> - + " com . google . common . base . Optional , " <nl> + + " java . util . Optional , " <nl> + " java . math . BigDecimal " ) ; <nl> final String [ ] expected = { <nl> " 16 : 56 : " + getCheckMessage ( MSG _ KEY , " perfSeries " ) , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputVisibilityModifierGenerics . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputVisibilityModifierGenerics . java <nl> index 1fcc376 . . 6c4dd09 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputVisibilityModifierGenerics . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputVisibilityModifierGenerics . java <nl> @ @ - 4 , 8 + 4 , 8 @ @ import java . math . BigDecimal ; <nl> import java . util . ArrayList ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> + import java . util . Optional ; <nl> <nl> - import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> public final class InputVisibilityModifierGenerics { <nl> @ @ - 40 , 15 + 40 , 15 @ @ public final class InputVisibilityModifierGenerics { <nl> <nl> public InputVisibilityModifierGenerics ( ) { <nl> this . name = " John Doe " ; <nl> - this . keyword = Optional . absent ( ) ; <nl> + this . keyword = Optional . empty ( ) ; <nl> this . perfSeries = ImmutableMap . of ( ) ; <nl> this . uuidMap = ImmutableMap . of ( ) ; <nl> this . peopleMap = ImmutableMap . of ( ) ; <nl> this . someMap = ImmutableMap . of ( ) ; <nl> this . newMap = ImmutableMap . of ( ) ; <nl> this . orders = ImmutableMap . of ( ) ; <nl> - this . optionalOfObject = Optional . absent ( ) ; <nl> - this . obj = Optional . absent ( ) ; <nl> + this . optionalOfObject = Optional . empty ( ) ; <nl> + this . obj = Optional . empty ( ) ; <nl> this . mapOfStrings = new HashMap < > ( 1 ) ; <nl> this . names = new HashMap < > ( 1 ) ; <nl> this . links = new HashMap < > ( 1 ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index cbe74ce . . 1bf78af 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 579 , 12 + 579 , 7 @ @ public final class TreeWalker <nl> if ( ast1 . getLineNo ( ) < ast2 . getLineNo ( ) ) { <nl> return false ; <nl> } <nl> - else { <nl> - if ( ast1 . getColumnNo ( ) > ast2 . getColumnNo ( ) ) { <nl> - return true ; <nl> - } <nl> - } <nl> - return false ; <nl> + return ast1 . getColumnNo ( ) > ast2 . getColumnNo ( ) ; <nl> } <nl> <nl> / * *

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 index 70473ee . . cadbfd2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . io . InputStream ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Locale ; 
 + import java . util . Optional ; 
 import java . util . Properties ; 
 import java . util . Set ; 
 import java . util . SortedSet ; 
 @ @ - 36 , 7 + 37 , 6 @ @ import java . util . regex . Pattern ; 
 import org . apache . commons . logging . Log ; 
 import org . apache . commons . logging . LogFactory ; 
 
 - import com . google . common . base . Optional ; 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . SetMultimap ; 
 import com . google . common . collect . Sets ; 
 @ @ - 306 , 7 + 306 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 fileNameRegexp = String . format ( Locale . ROOT , 
 REGEXP _ FORMAT _ TO _ CHECK _ REQUIRED _ TRANSLATIONS , baseName , languageCode , extension ) ; 
 } 
 - Optional < String > missingFileName = Optional . absent ( ) ; 
 + Optional < String > missingFileName = Optional . empty ( ) ; 
 if ( ! bundle . containsFile ( fileNameRegexp ) ) { 
 if ( searchForDefaultTranslation ) { 
 missingFileName = Optional . of ( String . format ( Locale . ROOT , 
 @ @ - 372 , 7 + 372 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 * / 
 private static Optional < ResourceBundle > findBundle ( Set < ResourceBundle > bundles , 
 ResourceBundle targetBundle ) { 
 - Optional < ResourceBundle > result = Optional . absent ( ) ; 
 + Optional < ResourceBundle > result = Optional . empty ( ) ; 
 for ( ResourceBundle currentBundle : bundles ) { 
 if ( targetBundle . getBaseName ( ) . equals ( currentBundle . getBaseName ( ) ) 
 & & targetBundle . getExtension ( ) . equals ( currentBundle . getExtension ( ) ) 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 index 07349c2 . . b27ed97 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 @ @ - 19 , 9 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 + import java . util . Optional ; 
 import java . util . regex . Pattern ; 
 
 - import com . google . common . base . Optional ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 @ @ - 217 , 9 + 217 , 9 @ @ public class UncommentedMainCheck 
 
 if ( params . getChildCount ( ) = = 1 ) { 
 final DetailAST parameterType = params . getFirstChild ( ) . findFirstToken ( TokenTypes . TYPE ) ; 
 - final Optional < DetailAST > arrayDecl = Optional . fromNullable ( 
 + final Optional < DetailAST > arrayDecl = Optional . ofNullable ( 
 parameterType . findFirstToken ( TokenTypes . ARRAY _ DECLARATOR ) ) ; 
 - final Optional < DetailAST > varargs = Optional . fromNullable ( 
 + final Optional < DetailAST > varargs = Optional . ofNullable ( 
 params . getFirstChild ( ) . findFirstToken ( TokenTypes . ELLIPSIS ) ) ; 
 
 if ( arrayDecl . isPresent ( ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index 158fe6b . . 3ec540e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 25 , 8 + 25 , 8 @ @ import java . util . Deque ; 
 import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . Map ; 
 + import java . util . Optional ; 
 
 - import com . google . common . base . Optional ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 288 , 7 + 288 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 * @ return Optional of { @ link FinalVariableCandidate } for ast from scopeStack . 
 * / 
 private Optional < FinalVariableCandidate > getFinalCandidate ( DetailAST ast ) { 
 - Optional < FinalVariableCandidate > result = Optional . absent ( ) ; 
 + Optional < FinalVariableCandidate > result = Optional . empty ( ) ; 
 final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; 
 while ( iterator . hasNext ( ) & & ! result . isPresent ( ) ) { 
 final ScopeData scopeData = iterator . next ( ) ; 
 @ @ - 635 , 10 + 635 , 10 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 * @ return Optional of { @ link FinalVariableCandidate } . 
 * / 
 public Optional < FinalVariableCandidate > findFinalVariableCandidateForAst ( DetailAST ast ) { 
 - Optional < FinalVariableCandidate > result = Optional . absent ( ) ; 
 + Optional < FinalVariableCandidate > result = Optional . empty ( ) ; 
 DetailAST storedVariable = null ; 
 final Optional < FinalVariableCandidate > candidate = 
 - Optional . fromNullable ( scope . get ( ast . getText ( ) ) ) ; 
 + Optional . ofNullable ( scope . get ( ast . getText ( ) ) ) ; 
 if ( candidate . isPresent ( ) ) { 
 storedVariable = candidate . get ( ) . variableIdent ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 index 9881161 . . e709dae 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 @ @ - 19 , 7 + 19 , 8 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . naming ; 
 
 - import com . google . common . base . Optional ; 
 + import java . util . Optional ; 
 + 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 @ @ - 123 , 11 + 124 , 11 @ @ public class ParameterNameCheck 
 
 final DetailAST parent = ast . getParent ( ) . getParent ( ) ; 
 final Optional < DetailAST > annotation = 
 - Optional . fromNullable ( parent . getFirstChild ( ) . getFirstChild ( ) ) ; 
 + Optional . ofNullable ( parent . getFirstChild ( ) . getFirstChild ( ) ) ; 
 
 if ( annotation . isPresent ( ) & & annotation . get ( ) . getType ( ) = = TokenTypes . ANNOTATION ) { 
 final Optional < DetailAST > overrideToken = 
 - Optional . fromNullable ( annotation . get ( ) . findFirstToken ( TokenTypes . IDENT ) ) ; 
 + Optional . ofNullable ( annotation . get ( ) . findFirstToken ( TokenTypes . IDENT ) ) ; 
 if ( overrideToken . isPresent ( ) & & " Override " . equals ( overrideToken . get ( ) . getText ( ) ) ) { 
 overridden = true ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 index 632ccc6 . . 031be70 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 @ @ - 28 , 7 + 28 , 6 @ @ import java . io . IOException ; 
 import org . junit . Test ; 
 
 import antlr . CommonHiddenStreamToken ; 
 - 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 @ @ - 398 , 7 + 397 , 7 @ @ public class VisibilityModifierCheckTest 
 checkConfig . addAttribute ( " immutableClassCanonicalNames " , 
 " com . google . common . collect . ImmutableMap , " 
 + " java . lang . String , " 
 - + " com . google . common . base . Optional , " 
 + + " java . util . Optional , " 
 + " java . math . BigDecimal " ) ; 
 final String [ ] expected = { 
 " 16 : 56 : " + getCheckMessage ( MSG _ KEY , " perfSeries " ) , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputVisibilityModifierGenerics . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputVisibilityModifierGenerics . java 
 index 1fcc376 . . 6c4dd09 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputVisibilityModifierGenerics . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputVisibilityModifierGenerics . java 
 @ @ - 4 , 8 + 4 , 8 @ @ import java . math . BigDecimal ; 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 + import java . util . Optional ; 
 
 - import com . google . common . base . Optional ; 
 import com . google . common . collect . ImmutableMap ; 
 
 public final class InputVisibilityModifierGenerics { 
 @ @ - 40 , 15 + 40 , 15 @ @ public final class InputVisibilityModifierGenerics { 
 
 public InputVisibilityModifierGenerics ( ) { 
 this . name = " John Doe " ; 
 - this . keyword = Optional . absent ( ) ; 
 + this . keyword = Optional . empty ( ) ; 
 this . perfSeries = ImmutableMap . of ( ) ; 
 this . uuidMap = ImmutableMap . of ( ) ; 
 this . peopleMap = ImmutableMap . of ( ) ; 
 this . someMap = ImmutableMap . of ( ) ; 
 this . newMap = ImmutableMap . of ( ) ; 
 this . orders = ImmutableMap . of ( ) ; 
 - this . optionalOfObject = Optional . absent ( ) ; 
 - this . obj = Optional . absent ( ) ; 
 + this . optionalOfObject = Optional . empty ( ) ; 
 + this . obj = Optional . empty ( ) ; 
 this . mapOfStrings = new HashMap < > ( 1 ) ; 
 this . names = new HashMap < > ( 1 ) ; 
 this . links = new HashMap < > ( 1 ) ;

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index cbe74ce . . 1bf78af 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 579 , 12 + 579 , 7 @ @ public final class TreeWalker 
 if ( ast1 . getLineNo ( ) < ast2 . getLineNo ( ) ) { 
 return false ; 
 } 
 - else { 
 - if ( ast1 . getColumnNo ( ) > ast2 . getColumnNo ( ) ) { 
 - return true ; 
 - } 
 - } 
 - return false ; 
 + return ast1 . getColumnNo ( ) > ast2 . getColumnNo ( ) ; 
 } 
 
 / * *
