BLEU SCORE: 0.07495553473355841

TEST MSG: Issue # 5118 : IllegalType does not check type arguments / parameters
GENERATED MSG: Issue # 3437 : PackageDeclaration should give option for directory name mismatch

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> index 1b927eb . . 4de10e9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> @ @ - 34 , 8 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; <nl> <nl> / * * <nl> - * Checks that particular class are never used as types in variable <nl> - * declarations , return values or parameters . <nl> + * Checks that particular classes or interfaces are never used . <nl> * <nl> * < p > Rationale : <nl> * Helps reduce coupling on concrete classes . <nl> @ @ - 71 , 7 + 70 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; <nl> * <nl> * < p > < b > ignoredMethodNames < / b > - Methods that should not be checked . <nl> * <nl> - * < p > < b > memberModifiers < / b > - To check only methods and fields with only specified modifiers . <nl> + * < p > < b > memberModifiers < / b > - To check only methods and fields with any of the specified modifiers . <nl> + * This property does not affect method calls nor method references . <nl> * <nl> * < p > In most cases it ' s justified to put following classes to < b > illegalClassNames < / b > : <nl> * < ul > <nl> @ @ - 167 , 10 + 167 , 13 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> @ Override <nl> public int [ ] getAcceptableTokens ( ) { <nl> return new int [ ] { <nl> - TokenTypes . VARIABLE _ DEF , <nl> - TokenTypes . PARAMETER _ DEF , <nl> - TokenTypes . METHOD _ DEF , <nl> + TokenTypes . ANNOTATION _ FIELD _ DEF , <nl> TokenTypes . IMPORT , <nl> + TokenTypes . METHOD _ CALL , <nl> + TokenTypes . METHOD _ DEF , <nl> + TokenTypes . METHOD _ REF , <nl> + TokenTypes . PARAMETER _ DEF , <nl> + TokenTypes . VARIABLE _ DEF , <nl> } ; <nl> } <nl> <nl> @ @ - 193 , 15 + 196 , 16 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> switch ( ast . getType ( ) ) { <nl> + case TokenTypes . METHOD _ CALL : <nl> + case TokenTypes . METHOD _ REF : <nl> + visitMethodCallOrRef ( ast ) ; <nl> + break ; <nl> case TokenTypes . METHOD _ DEF : <nl> - if ( isVerifiable ( ast ) ) { <nl> - visitMethodDef ( ast ) ; <nl> - } <nl> + visitMethodDef ( ast ) ; <nl> break ; <nl> case TokenTypes . VARIABLE _ DEF : <nl> - if ( isVerifiable ( ast ) ) { <nl> - visitVariableDef ( ast ) ; <nl> - } <nl> + case TokenTypes . ANNOTATION _ FIELD _ DEF : <nl> + visitVariableDef ( ast ) ; <nl> break ; <nl> case TokenTypes . PARAMETER _ DEF : <nl> visitParameterDef ( ast ) ; <nl> @ @ - 256 , 7 + 260 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> * @ param methodDef method for check . <nl> * / <nl> private void visitMethodDef ( DetailAST methodDef ) { <nl> - if ( isCheckedMethod ( methodDef ) ) { <nl> + if ( isVerifiable ( methodDef ) & & isCheckedMethod ( methodDef ) ) { <nl> checkClassName ( methodDef ) ; <nl> } <nl> } <nl> @ @ - 279 , 7 + 283 , 17 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> * @ param variableDef variable to check . <nl> * / <nl> private void visitVariableDef ( DetailAST variableDef ) { <nl> - checkClassName ( variableDef ) ; <nl> + if ( isVerifiable ( variableDef ) ) { <nl> + checkClassName ( variableDef ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks the type arguments of given method call / reference . <nl> + * @ param methodCallOrRef method call / reference to check . <nl> + * / <nl> + private void visitMethodCallOrRef ( DetailAST methodCallOrRef ) { <nl> + checkTypeArguments ( methodCallOrRef ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 319 , 19 + 333 , 96 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Checks type of given method , parameter or variable . <nl> + * Checks type and type arguments / parameters of given method , parameter , variable or <nl> + * method call / reference . <nl> * @ param ast node to check . <nl> * / <nl> private void checkClassName ( DetailAST ast ) { <nl> final DetailAST type = ast . findFirstToken ( TokenTypes . TYPE ) ; <nl> - final FullIdent ident = FullIdent . createFullIdent ( type . getFirstChild ( ) ) ; <nl> + checkType ( type ) ; <nl> + checkTypeParameters ( ast ) ; <nl> + } <nl> <nl> + / * * <nl> + * Checks the identifier of the given type . <nl> + * @ param type node to check . <nl> + * / <nl> + private void checkIdent ( DetailAST type ) { <nl> + final FullIdent ident = FullIdent . createFullIdentBelow ( type ) ; <nl> if ( isMatchingClassName ( ident . getText ( ) ) ) { <nl> log ( ident . getDetailAst ( ) , MSG _ KEY , ident . getText ( ) ) ; <nl> } <nl> } <nl> <nl> / * * <nl> + * Checks the given type , its arguments and parameters . <nl> + * @ param type node to check . <nl> + * / <nl> + private void checkType ( DetailAST type ) { <nl> + checkIdent ( type ) ; <nl> + checkTypeArguments ( type ) ; <nl> + checkTypeBounds ( type ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks the upper and lower bounds for the given type . <nl> + * @ param type node to check . <nl> + * / <nl> + private void checkTypeBounds ( DetailAST type ) { <nl> + final DetailAST upperBounds = type . findFirstToken ( TokenTypes . TYPE _ UPPER _ BOUNDS ) ; <nl> + if ( upperBounds ! = null ) { <nl> + checkType ( upperBounds ) ; <nl> + } <nl> + final DetailAST lowerBounds = type . findFirstToken ( TokenTypes . TYPE _ LOWER _ BOUNDS ) ; <nl> + if ( lowerBounds ! = null ) { <nl> + checkType ( lowerBounds ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks the type parameters of the node . <nl> + * @ param node node to check . <nl> + * / <nl> + private void checkTypeParameters ( final DetailAST node ) { <nl> + final DetailAST typeParameters = node . findFirstToken ( TokenTypes . TYPE _ PARAMETERS ) ; <nl> + if ( typeParameters ! = null ) { <nl> + final DetailAST typeParameter = <nl> + typeParameters . findFirstToken ( TokenTypes . TYPE _ PARAMETER ) ; <nl> + checkType ( typeParameter ) ; <nl> + DetailAST sibling = typeParameter . getNextSibling ( ) ; <nl> + while ( sibling ! = null ) { <nl> + if ( sibling . getType ( ) = = TokenTypes . TYPE _ PARAMETER ) { <nl> + checkType ( sibling ) ; <nl> + } <nl> + sibling = sibling . getNextSibling ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks the type arguments of the node . <nl> + * @ param node node to check . <nl> + * / <nl> + private void checkTypeArguments ( final DetailAST node ) { <nl> + DetailAST typeArguments = node . findFirstToken ( TokenTypes . TYPE _ ARGUMENTS ) ; <nl> + if ( typeArguments = = null ) { <nl> + typeArguments = node . getFirstChild ( ) . findFirstToken ( TokenTypes . TYPE _ ARGUMENTS ) ; <nl> + } <nl> + <nl> + if ( typeArguments ! = null ) { <nl> + final DetailAST typeArgument = typeArguments . findFirstToken ( TokenTypes . TYPE _ ARGUMENT ) ; <nl> + checkType ( typeArgument ) ; <nl> + DetailAST sibling = typeArgument . getNextSibling ( ) ; <nl> + while ( sibling ! = null ) { <nl> + if ( sibling . getType ( ) = = TokenTypes . TYPE _ ARGUMENT ) { <nl> + checkType ( sibling ) ; <nl> + } <nl> + sibling = sibling . getNextSibling ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns true if given class name is one of illegal classes or else false . <nl> * @ param className class name to check . <nl> * @ return true if given class name is one of illegal classes <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> index 7a21688 . . c3cde76 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Catching ' ' { 0 } ' ' is not allowed . <nl> illegal . throw = Throwing ' ' { 0 } ' ' is not allowed . <nl> illegal . token = Using ' ' { 0 } ' ' is not allowed . <nl> illegal . token . text = Token text matches the illegal pattern ' ' { 0 } ' ' . <nl> - illegal . type = Declaring variables , return values or parameters of type ' ' { 0 } ' ' is not allowed . <nl> + illegal . type = Usage of type ' ' { 0 } ' ' is not allowed . <nl> inline . conditional . avoid = Avoid inline conditionals . <nl> instantiation . avoid = Instantiation of { 0 } should be avoided . <nl> magic . number = ' ' { 0 } ' ' is a magic number . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> index 0b359bc . . 42cb6c2 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Die Exception ' ' { 0 } ' ' darf nicht abgefangen werden . <nl> illegal . throw = Die Exception ' ' { 0 } ' ' darf nicht geworfen werden . <nl> illegal . token = Das Token ' ' { 0 } ' ' ist nicht erlaubt . <nl> illegal . token . text = Token - Text entspricht dem Muster ' ' { 0 } ' ' . <nl> - illegal . type = Variablen , R ü ckgabewerte und Parameter vom Typ ' ' { 0 } ' ' sind nicht erlaubt . <nl> + illegal . type = Die Verwendung des Typs ' ' { 0 } ' ' ist nicht erlaubt . <nl> inline . conditional . avoid = Der Inline - Conditional - Operator sollte vermieden werden . <nl> instantiation . avoid = Die Klasse { 0 } sollte nicht direkt instanziiert werden . <nl> magic . number = Die magische Zahl ' ' { 0 } ' ' sollte als Konstante definiert werden . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties <nl> index 3f7b7f6 . . e1bb84b 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties <nl> @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Capturar la excepci ó n ' ' { 0 } ' ' no est á permitido . <nl> illegal . throw = Lanzar ' ' { 0 } ' ' no est á permitido . <nl> illegal . token = El uso de ' ' { 0 } ' ' no esta permitido . <nl> illegal . token . text = El texto del token coincide con el patr ó n ilegal ' ' { 0 } ' ' . <nl> - illegal . type = La declaraci ó n de variables , valores de retorno o par á metros de tipo ' ' { 0 } ' ' no est á permitida . <nl> + illegal . type = El uso de tipo ' ' { 0 } ' ' no est á permitida . <nl> inline . conditional . avoid = Evitar los condicionales en l í nea . <nl> instantiation . avoid = Deber í a evitarse la instanciaci ó n de { 0 } . <nl> magic . number = ' ' { 0 } ' ' es un n ú mero m á gico . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties <nl> index 1246514 . . d7f3a9c 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties <nl> @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Catching ' ' { 0 } ' ' ei ole sallittu . <nl> illegal . throw = Heitto ' ' { 0 } ' ' ei ole sallittu . <nl> illegal . token = ' ' { 0 } ' ' : n k ä ytt ö ei ole sallittu . <nl> illegal . token . text = Token teksti vastaa laiton malli ' ' { 0 } ' ' . <nl> - illegal . type = Julistaa muuttujia , paluuarvot tai parametrien tyyppi \ " \ " { 0 } \ " ei ole sallittu . <nl> + illegal . type = Tyypin ' ' { 0 } ' ' k ä ytt ö ei ole sallittua . <nl> inline . conditional . avoid = V ä lt ä inline conditionals . <nl> instantiation . avoid = Ä l ä instantioi { 0 } : a . <nl> magic . number = ' ' { 0 } ' ' on maaginen numero . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties <nl> index a1d712f . . a32283f 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties <nl> @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Catcher l ' ' exception ' ' { 0 } ' ' est prohib é . <nl> illegal . throw = Lancer ' ' { 0 } ' ' n ' ' est pas autoris é . <nl> illegal . token = Il est interdit d ' ' utiliser ' ' { 0 } ' ' . <nl> illegal . token . text = Cha î ne de caract è res interdite ' ' { 0 } ' ' . <nl> - illegal . type = D é clarer des variables , des valeurs de retour ou des param è tres de type ' ' { 0 } ' ' est interdit . <nl> + illegal . type = L ' ' utilisation du type ' ' { 0 } ' ' est interdit . <nl> inline . conditional . avoid = L ' ' utilisation de l ' ' op é rateur conditionel est prohib é e . <nl> instantiation . avoid = L ' ' instantiation de la classe { 0 } est prohib é e . <nl> magic . number = ' ' { 0 } ' ' devrait ê tre d é fini comme une constante . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties <nl> index ae74664 . . 958d427 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties <nl> @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = ' ' { 0 } ' ' を キ ャ ッ チ す る こ と は 許 可 さ れ て い ま せ ん <nl> illegal . throw = ' ' { 0 } ' ' を ス ロ ー す る こ と は 許 可 さ れ て い ま せ ん 。 <nl> illegal . token = ' ' { 0 } ' ' の 使 用 は 許 可 さ れ て い ま せ ん 。 <nl> illegal . token . text = ト ー ク ン の テ キ ス ト が 不 正 な パ タ ー ン ' ' { 0 } ' ' に 一 致 し て い ま す 。 <nl> - illegal . type = ' ' { 0 } ' ' 型 の 変 数 、 戻 り 値 、 パ ラ メ ー タ を 宣 言 す る こ と は 許 可 さ れ て い ま せ ん 。 <nl> + illegal . type = ' ' { 0 } ' ' 型 の 使 用 は 許 可 さ れ て い ま せ ん 。 <nl> inline . conditional . avoid = イ ン ラ イ ン 条 件 文 を 避 け て く だ さ い 。 <nl> instantiation . avoid = { 0 } の イ ン ス タ ン ス 化 は 避 け る べ き で す 。 <nl> magic . number = ' ' { 0 } ' ' は マ ジ ッ ク ナ ン バ ー で す 。 <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties <nl> index da79ad8 . . dbe2248 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties <nl> @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Capturar ' ' { 0 } ' ' n ã o é permitido . <nl> illegal . throw = Lan ç ar ' ' { 0 } ' ' n ã o é permitido . <nl> illegal . token = N ã o é permitida a utiliza ç ã o de ' ' { 0 } ' ' . <nl> illegal . token . text = Elemento de texto coincide com o padr ã o ilegal ' ' { 0 } ' ' . <nl> - illegal . type = A declara ç ã o de vari á veis , valores de retorno ou par â metros do tipo ' ' { 0 } ' ' n ã o é permitida . <nl> + illegal . type = Uso do tipo ' ' { 0 } ' ' n ã o é permitida . <nl> inline . conditional . avoid = Evite condicionais inline . <nl> instantiation . avoid = A instancia ç ã o de { 0 } deve ser evitada . <nl> magic . number = ' ' { 0 } ' ' é um n ú mero m á gico . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties <nl> index 4e27831 . . 3ec3327 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties <nl> @ @ - 24 , 7 + 24 , 7 @ @ illegal . catch = ' ' { 0 } ' ' istisnas ı n ı / hatas ı n ı yakalamaya izin verilmiyor . <nl> illegal . throw = ' ' { 0 } ' ' istisnas ı n ı / hatas ı n ı f ı rlatmaya izin verilmiyor . <nl> illegal . token = ' ' { 0 } ' ' kullan ı m ı na izin verilmiyor . <nl> illegal . token . text = İ zin verilmeyen bir kal ı p kullan ı lm ı ş ' ' { 0 } ' ' . <nl> - illegal . type = ' ' { 0 } ' ' tipinde de ğ i ş ken , d ö n ü ş de ğ eri ya da parametre tan ı mlanmamal ı d ı r . <nl> + illegal . type = ' ' { 0 } ' ' tipinin kullan ı lmas ı na izin verilmez . <nl> inline . conditional . avoid = Sat ı r i ç i ko ş ullu ifadeler kullan ı lmamal ı d ı r . <nl> instantiation . avoid = { 0 } s ı n ı f ı n ı n yeni nesnesi ü retilmemelidir . <nl> magic . number = ' ' { 0 } ' ' say ı s ı ' ' magic number ' ' d ı r . \ u00D6nce tan ı mlanmal ı , sonra kullan ı lmal ı . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties <nl> index 51bf29a . . 2a3b159 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties <nl> @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = 禁 止 捕 获 ： ' ' { 0 } ' ' 。 <nl> illegal . throw = 禁 止 抛 出 ： ' ' { 0 } ' ' 。 <nl> illegal . token = 禁 止 使 用 ： ' ' { 0 } ' ' 。 <nl> illegal . token . text = 不 应 匹 配 表 达 式 ： ' ' { 0 } ' ' 。 <nl> - illegal . type = 不 应 声 明 ' ' { 0 } ' ' 类 型 的 引 用 、 返 回 值 或 参 数 名 。 <nl> + illegal . type = 不 允 许 使 用 ' ' { 0 } ' ' 类 型 。 <nl> inline . conditional . avoid = 避 免 三 元 表 达 式 。 <nl> instantiation . avoid = 应 避 免 { 0 } 的 实 例 化 。 <nl> magic . number = ' ' { 0 } ' ' 是 一 个 魔 术 数 字 （ 直 接 常 数 ） 。 <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> index 31c53f9 . . 1c28cf4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> @ @ - 180 , 6 + 180 , 32 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testGenerics ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( IllegalTypeCheck . class ) ; <nl> + checkConfig . addAttribute ( " illegalClassNames " , <nl> + " Boolean , Foo , Serializable " ) ; <nl> + checkConfig . addAttribute ( " memberModifiers " , " LITERAL _ PUBLIC , FINAL " ) ; <nl> + final String [ ] expected = { <nl> + " 20 : 16 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 21 : 31 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 21 : 40 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , <nl> + " 24 : 18 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 25 : 24 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , <nl> + " 25 : 44 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 28 : 23 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 28 : 42 : " + getCheckMessage ( MSG _ KEY , " Serializable " ) , <nl> + " 30 : 54 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 32 : 25 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 32 : 60 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 34 : 26 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , <nl> + " 34 : 30 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 44 : 20 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 57 : 28 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputIllegalTypeGenerics . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testStarImports ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( IllegalTypeCheck . class ) ; <nl> checkConfig . addAttribute ( " illegalClassNames " , " List " ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java <nl> new file mode 100644 <nl> index 0000000 . . 123c358 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java <nl> @ @ - 0 , 0 + 1 , 59 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; <nl> + <nl> + import java . io . Serializable ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + import java . util . TreeSet ; <nl> + import java . util . function . Consumer ; <nl> + <nl> + / * * <nl> + * This test - input is intended to be checked using following configuration : <nl> + * <nl> + * illegalClassNames = { Boolean , Foo , Serializable } <nl> + * memberModifiers = { LITERAL _ PUBLIC , FINAL } <nl> + * <nl> + * / <nl> + public abstract class InputIllegalTypeGenerics { <nl> + <nl> + private Set < Boolean > privateSet ; / / OK <nl> + private java . util . List < Map < Boolean , Foo > > privateList ; / / OK <nl> + public Set < Boolean > set ; / / warn <nl> + public java . util . List < Map < Boolean , Foo > > list ; / / warn <nl> + <nl> + private void methodCall ( ) { <nl> + Bounded . < Boolean > foo ( ) ; / / warn <nl> + final Consumer < Foo > consumer = Foo < Boolean > : : foo ; / / warn <nl> + } <nl> + <nl> + public < T extends Boolean , U extends Serializable > void typeParameter ( T a ) { } / / warn <nl> + <nl> + public void fullName ( java . util . ArrayList < ? super Boolean > a ) { } / / warn <nl> + <nl> + public abstract Set < Boolean > shortName ( Set < ? super Set < Boolean > > a ) ; / / warn <nl> + <nl> + public Set < ? extends Foo < Boolean > > typeArgument ( ) { / / warn <nl> + return new TreeSet < Foo < Boolean > > ( ) ; / / OK <nl> + } <nl> + <nl> + public class MyClass < Foo extends Boolean > { } / / warn <nl> + <nl> + } <nl> + <nl> + class Bounded { <nl> + <nl> + public static < Boolean > void foo ( ) { } / / warn <nl> + <nl> + } <nl> + <nl> + class Foo < T extends Boolean & Serializable > { / / OK <nl> + <nl> + void foo ( ) { } <nl> + <nl> + } <nl> + <nl> + @ interface Annotation { <nl> + <nl> + Class < ? extends Boolean > [ ] nonPublic ( ) ; / / OK <nl> + public Class < ? extends Boolean > [ ] value ( ) ; / / warn <nl> + <nl> + } <nl> diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml <nl> index b7c12cb . . 654a05d 100644 <nl> - - - a / src / xdocs / checks . xml <nl> + + + b / src / xdocs / checks . xml <nl> @ @ - 314 , 8 + 314 , 7 @ @ <nl> < tr > <nl> < td > < a href = " config _ coding . html # IllegalType " > IllegalType < / a > < / td > <nl> < td > <nl> - Checks that particular class are never used as types in variable <nl> - declarations , return values or parameters . < / td > <nl> + Checks that particular classes or interfaces are never used . < / td > <nl> < / tr > <nl> < tr > <nl> < td > < a href = " config _ imports . html # ImportControl " > ImportControl < / a > < / td > <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index d7bb1b1 . . d67d09d 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 2056 , 8 + 2056 , 7 @ @ class SomeClass <nl> < subsection name = " Description " id = " IllegalType _ Description " > <nl> < p > Since Checkstyle 3 . 2 < / p > <nl> < p > <nl> - Checks that particular classes are never used as types in variable <nl> - declarations , one - dimensional and multi - dimensional arrays , return values or parameters . <nl> + Checks that particular classes or interfaces are never used . <nl> < / p > <nl> <nl> < p > <nl> @ @ - 2118 , 7 + 2117 , 8 @ @ class SomeClass <nl> < / tr > <nl> < tr > <nl> < td > memberModifiers < / td > <nl> - < td > Check methods and fields with only corresponding modifiers . < / td > <nl> + < td > To check only methods and fields with any of the specified modifiers . <nl> + This property does not affect method calls nor method references . < / td > <nl> < td > subset of tokens <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html " > TokenTypes < / a > < / td > <nl> < td / > <nl> @ @ - 2129 , 20 + 2129 , 32 @ @ class SomeClass <nl> < td > tokens to check < / td > <nl> < td > <nl> subset of tokens <nl> - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > <nl> - VARIABLE _ DEF < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > <nl> + ANNOTATION _ FIELD _ DEF < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ CALL " > <nl> + METHOD _ CALL < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > <nl> + METHOD _ DEF < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ REF " > <nl> + METHOD _ REF < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PARAMETER _ DEF " > <nl> PARAMETER _ DEF < / a > , <nl> - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > <nl> - METHOD _ DEF < / a > . <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > <nl> + VARIABLE _ DEF < / a > . <nl> < / td > <nl> < td > <nl> - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > <nl> - VARIABLE _ DEF < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > <nl> + ANNOTATION _ FIELD _ DEF < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ CALL " > <nl> + METHOD _ CALL < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > <nl> + METHOD _ DEF < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ REF " > <nl> + METHOD _ REF < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PARAMETER _ DEF " > <nl> PARAMETER _ DEF < / a > , <nl> - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > <nl> - METHOD _ DEF < / a > . <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > <nl> + VARIABLE _ DEF < / a > . <nl> < / td > <nl> < td > 3 . 2 < / td > <nl> < / tr > <nl> @ @ - 2159 , 7 + 2171 , 7 @ @ class SomeClass <nl> & lt ; / module & gt ; <nl> < / source > <nl> < p > <nl> - To configure the Check so that it verifies only public , protected and static <nl> + To configure the Check so that it verifies only public , protected or static <nl> methods and fields : <nl> < / p > <nl> < source > <nl> @ @ - 2168 , 6 + 2180 , 38 @ @ class SomeClass <nl> LITERAL _ PROTECTED , LITERAL _ STATIC & quot ; / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + < p > <nl> + To configure the check so that it verifies usage of types Boolean and Foo : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " IllegalType " & gt ; <nl> + & lt ; property name = & quot ; illegalClassNames & quot ; value = & quot ; Boolean , Foo & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + <nl> + < source > <nl> + public class Test { <nl> + <nl> + public Set & lt ; Boolean & gt ; set ; / / violation <nl> + public java . util . List & lt ; Map & lt ; Boolean , Foo & gt ; & gt ; list ; / / violation <nl> + <nl> + private void method ( List & lt ; Foo & gt ; list , Boolean value ) { / / violation <nl> + SomeType . & lt ; Boolean & gt ; foo ( ) ; / / violation <nl> + final Consumer & lt ; Foo & gt ; consumer = Foo & lt ; Boolean & gt ; : : foo ; / / violation <nl> + } <nl> + <nl> + public & lt ; T extends Boolean , U extends Serializable & gt ; void typeParameter ( T a ) { } / / violation <nl> + <nl> + public void fullName ( java . util . ArrayList & lt ; ? super Boolean & gt ; a ) { } / / violation <nl> + <nl> + public abstract Set & lt ; Boolean & gt ; shortName ( Set & lt ; ? super Boolean & gt ; a ) ; / / violation <nl> + <nl> + public Set & lt ; ? extends Foo & gt ; typeArgument ( ) { / / violation <nl> + return new TreeSet & lt ; Foo & lt ; Boolean & gt ; & gt ; ( ) ; <nl> + } <nl> + <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " id = " IllegalType _ Example _ of _ Usage " >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> index 1ad746a . . 94af99f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> @ @ - 183 , 9 + 183 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; <nl> final Predicate < DetailAST > predicate = currentNode - > { <nl> - return currentNode ! = null <nl> - & & currentNode ! = methodImplCloseBrace <nl> - & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) <nl> + return currentNode ! = methodImplCloseBrace <nl> & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; <nl> } ; <nl> final Optional < DetailAST > methodBody = <nl> @ @ - 220 , 31 + 218 , 19 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> * @ return true if a method has any of ignored annotations . <nl> * / <nl> private static boolean hasIgnoredAnnotation ( DetailAST methodDef , Set < String > annotations ) { <nl> - return annotations . stream ( ) . filter ( annotation - > hasAnnotation ( methodDef , annotation ) ) <nl> - . findAny ( ) . isPresent ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Check if a method has specific annotation . <nl> - * @ param methodDef method definition token . <nl> - * @ param annotationName annotation name . <nl> - * @ return true , if a method has a specific annotation . <nl> - * / <nl> - private static boolean hasAnnotation ( DetailAST methodDef , String annotationName ) { <nl> final DetailAST modifiers = methodDef . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - boolean containsAnnotation = false ; <nl> + boolean hasIgnoredAnnotation = false ; <nl> if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { <nl> final Optional < DetailAST > annotation = TokenUtils . findFirstTokenByPredicate ( modifiers , <nl> currentToken - > { <nl> - return currentToken ! = null <nl> - & & currentToken . getType ( ) = = TokenTypes . ANNOTATION <nl> - & & annotationName . equals ( getAnnotationName ( currentToken ) ) ; <nl> + return currentToken . getType ( ) = = TokenTypes . ANNOTATION <nl> + & & annotations . contains ( getAnnotationName ( currentToken ) ) ; <nl> } ) ; <nl> if ( annotation . isPresent ( ) ) { <nl> - containsAnnotation = true ; <nl> + hasIgnoredAnnotation = true ; <nl> } <nl> } <nl> - return containsAnnotation ; <nl> + return hasIgnoredAnnotation ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java <nl> index aad1d56 . . d9fd5a6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java <nl> @ @ - 191 , 7 + 191 , 8 @ @ public final class TokenUtils { <nl> } <nl> <nl> / * * <nl> - * Finds the first node { @ link Optional } of { @ link DetailAST } which matches the predicate . <nl> + * Finds the first { @ link Optional } child token of { @ link DetailAST } root node <nl> + * which matches the given predicate . <nl> * @ param root root node . <nl> * @ param predicate predicate . <nl> * @ return { @ link Optional } of { @ link DetailAST } node which matches the predicate . <nl> @ @ - 199 , 20 + 200 , 11 @ @ public final class TokenUtils { <nl> public static Optional < DetailAST > findFirstTokenByPredicate ( DetailAST root , <nl> Predicate < DetailAST > predicate ) { <nl> Optional < DetailAST > result = Optional . empty ( ) ; <nl> - DetailAST rootNode = root ; <nl> - while ( rootNode ! = null ) { <nl> - DetailAST toVisit = rootNode . getFirstChild ( ) ; <nl> - if ( predicate . test ( toVisit ) ) { <nl> - result = Optional . of ( toVisit ) ; <nl> + for ( DetailAST ast = root . getFirstChild ( ) ; ast ! = null ; ast = ast . getNextSibling ( ) ) { <nl> + if ( predicate . test ( ast ) ) { <nl> + result = Optional . of ( ast ) ; <nl> break ; <nl> } <nl> - while ( rootNode ! = null & & toVisit = = null ) { <nl> - toVisit = rootNode . getNextSibling ( ) ; <nl> - if ( toVisit = = null ) { <nl> - rootNode = rootNode . getParent ( ) ; <nl> - } <nl> - } <nl> - rootNode = toVisit ; <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java <nl> index 6781597 . . 5c3eb9e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . junit . Test ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class DesignForExtensionCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 88 , 17 + 89 , 30 @ @ public class DesignForExtensionCheckTest <nl> @ Test <nl> public void testIgnoredAnnotationsOption ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; <nl> - checkConfig . addAttribute ( " ignoredAnnotations " , " Override , Deprecated " ) ; <nl> + checkConfig . addAttribute ( " ignoredAnnotations " , " Override , Deprecated , MyAnnotation " ) ; <nl> final String [ ] expected = { <nl> " 31 : 5 : " <nl> + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo1 " ) , <nl> " 141 : 5 : " <nl> + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo21 " ) , <nl> + " 146 : 5 : " <nl> + + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " setAge " ) , <nl> + " 161 : 5 : " <nl> + + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo24 " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputDesignForExtensionIgnoredAnnotations . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> + public void testIgnoreAnnotationsOptionWithMultipleAnnotations ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoredAnnotations " , <nl> + " Override , Deprecated , Before , After , BeforeClass , AfterClass " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputDesignForExtensionMultipleAnnotations . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testNativeMethods ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; <nl> checkConfig . addAttribute ( " ignoredAnnotations " , " Deprecated " ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java <nl> index c8a2e36 . . 3a4f37b 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java <nl> @ @ - 138 , 6 + 138 , 29 @ @ public class InputDesignForExtensionIgnoredAnnotations { <nl> @ InputLocalAnnotations . ClassRule <nl> public void foo20 ( ) { return ; } <nl> <nl> - @ InputLocalAnnotations . ClassRule <nl> - public void foo21 ( ) { return ; } / / violation <nl> + @ InputLocalAnnotations . ClassRule / / violation <nl> + public void foo21 ( ) { return ; } <nl> + <nl> + private int age ; <nl> + <nl> + @ Inject / / violation <nl> + public void setAge ( int age ) { <nl> + this . age = age ; <nl> + } <nl> + <nl> + public @ interface Inject { } <nl> + <nl> + public @ MyAnnotation void foo22 ( ) { <nl> + foo1 ( ) ; <nl> + } <nl> + <nl> + @ MyAnnotation public void foo23 ( ) { <nl> + foo1 ( ) ; <nl> + } <nl> + <nl> + public void foo24 ( @ MyAnnotation int a ) { / / violation <nl> + foo1 ( ) ; <nl> + } <nl> + <nl> + public @ interface MyAnnotation { } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java <nl> new file mode 100644 <nl> index 0000000 . . 7f94946 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java <nl> @ @ - 0 , 0 + 1 , 84 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import org . junit . Ignore ; <nl> + import org . junit . Test ; <nl> + <nl> + public class InputDesignForExtensionMultipleAnnotations { <nl> + <nl> + @ Ignore <nl> + @ Deprecated <nl> + public void foo1 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Deprecated <nl> + @ Ignore <nl> + public void foo2 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Ignore <nl> + / / comment <nl> + @ Deprecated <nl> + public void foo4 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Deprecated <nl> + / / comment <nl> + @ Ignore <nl> + public void foo5 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + <nl> + @ Ignore <nl> + / * * <nl> + * comment <nl> + * / <nl> + @ Deprecated <nl> + public void foo6 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Deprecated <nl> + / * * <nl> + * comment <nl> + * / <nl> + @ Ignore <nl> + public void foo7 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Ignore <nl> + / * comment * / <nl> + @ Deprecated <nl> + public void foo8 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Deprecated <nl> + / * comment * / <nl> + @ Ignore <nl> + public void foo9 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + / * comment * / <nl> + @ Ignore <nl> + @ Deprecated <nl> + public void foo10 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + / * comment * / <nl> + @ Deprecated <nl> + @ Ignore <nl> + public void foo11 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + private void foo3 ( ) { } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 index 1b927eb . . 4de10e9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 @ @ - 34 , 8 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; 
 
 / * * 
 - * Checks that particular class are never used as types in variable 
 - * declarations , return values or parameters . 
 + * Checks that particular classes or interfaces are never used . 
 * 
 * < p > Rationale : 
 * Helps reduce coupling on concrete classes . 
 @ @ - 71 , 7 + 70 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; 
 * 
 * < p > < b > ignoredMethodNames < / b > - Methods that should not be checked . 
 * 
 - * < p > < b > memberModifiers < / b > - To check only methods and fields with only specified modifiers . 
 + * < p > < b > memberModifiers < / b > - To check only methods and fields with any of the specified modifiers . 
 + * This property does not affect method calls nor method references . 
 * 
 * < p > In most cases it ' s justified to put following classes to < b > illegalClassNames < / b > : 
 * < ul > 
 @ @ - 167 , 10 + 167 , 13 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 @ Override 
 public int [ ] getAcceptableTokens ( ) { 
 return new int [ ] { 
 - TokenTypes . VARIABLE _ DEF , 
 - TokenTypes . PARAMETER _ DEF , 
 - TokenTypes . METHOD _ DEF , 
 + TokenTypes . ANNOTATION _ FIELD _ DEF , 
 TokenTypes . IMPORT , 
 + TokenTypes . METHOD _ CALL , 
 + TokenTypes . METHOD _ DEF , 
 + TokenTypes . METHOD _ REF , 
 + TokenTypes . PARAMETER _ DEF , 
 + TokenTypes . VARIABLE _ DEF , 
 } ; 
 } 
 
 @ @ - 193 , 15 + 196 , 16 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 switch ( ast . getType ( ) ) { 
 + case TokenTypes . METHOD _ CALL : 
 + case TokenTypes . METHOD _ REF : 
 + visitMethodCallOrRef ( ast ) ; 
 + break ; 
 case TokenTypes . METHOD _ DEF : 
 - if ( isVerifiable ( ast ) ) { 
 - visitMethodDef ( ast ) ; 
 - } 
 + visitMethodDef ( ast ) ; 
 break ; 
 case TokenTypes . VARIABLE _ DEF : 
 - if ( isVerifiable ( ast ) ) { 
 - visitVariableDef ( ast ) ; 
 - } 
 + case TokenTypes . ANNOTATION _ FIELD _ DEF : 
 + visitVariableDef ( ast ) ; 
 break ; 
 case TokenTypes . PARAMETER _ DEF : 
 visitParameterDef ( ast ) ; 
 @ @ - 256 , 7 + 260 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 * @ param methodDef method for check . 
 * / 
 private void visitMethodDef ( DetailAST methodDef ) { 
 - if ( isCheckedMethod ( methodDef ) ) { 
 + if ( isVerifiable ( methodDef ) & & isCheckedMethod ( methodDef ) ) { 
 checkClassName ( methodDef ) ; 
 } 
 } 
 @ @ - 279 , 7 + 283 , 17 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 * @ param variableDef variable to check . 
 * / 
 private void visitVariableDef ( DetailAST variableDef ) { 
 - checkClassName ( variableDef ) ; 
 + if ( isVerifiable ( variableDef ) ) { 
 + checkClassName ( variableDef ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks the type arguments of given method call / reference . 
 + * @ param methodCallOrRef method call / reference to check . 
 + * / 
 + private void visitMethodCallOrRef ( DetailAST methodCallOrRef ) { 
 + checkTypeArguments ( methodCallOrRef ) ; 
 } 
 
 / * * 
 @ @ - 319 , 19 + 333 , 96 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Checks type of given method , parameter or variable . 
 + * Checks type and type arguments / parameters of given method , parameter , variable or 
 + * method call / reference . 
 * @ param ast node to check . 
 * / 
 private void checkClassName ( DetailAST ast ) { 
 final DetailAST type = ast . findFirstToken ( TokenTypes . TYPE ) ; 
 - final FullIdent ident = FullIdent . createFullIdent ( type . getFirstChild ( ) ) ; 
 + checkType ( type ) ; 
 + checkTypeParameters ( ast ) ; 
 + } 
 
 + / * * 
 + * Checks the identifier of the given type . 
 + * @ param type node to check . 
 + * / 
 + private void checkIdent ( DetailAST type ) { 
 + final FullIdent ident = FullIdent . createFullIdentBelow ( type ) ; 
 if ( isMatchingClassName ( ident . getText ( ) ) ) { 
 log ( ident . getDetailAst ( ) , MSG _ KEY , ident . getText ( ) ) ; 
 } 
 } 
 
 / * * 
 + * Checks the given type , its arguments and parameters . 
 + * @ param type node to check . 
 + * / 
 + private void checkType ( DetailAST type ) { 
 + checkIdent ( type ) ; 
 + checkTypeArguments ( type ) ; 
 + checkTypeBounds ( type ) ; 
 + } 
 + 
 + / * * 
 + * Checks the upper and lower bounds for the given type . 
 + * @ param type node to check . 
 + * / 
 + private void checkTypeBounds ( DetailAST type ) { 
 + final DetailAST upperBounds = type . findFirstToken ( TokenTypes . TYPE _ UPPER _ BOUNDS ) ; 
 + if ( upperBounds ! = null ) { 
 + checkType ( upperBounds ) ; 
 + } 
 + final DetailAST lowerBounds = type . findFirstToken ( TokenTypes . TYPE _ LOWER _ BOUNDS ) ; 
 + if ( lowerBounds ! = null ) { 
 + checkType ( lowerBounds ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks the type parameters of the node . 
 + * @ param node node to check . 
 + * / 
 + private void checkTypeParameters ( final DetailAST node ) { 
 + final DetailAST typeParameters = node . findFirstToken ( TokenTypes . TYPE _ PARAMETERS ) ; 
 + if ( typeParameters ! = null ) { 
 + final DetailAST typeParameter = 
 + typeParameters . findFirstToken ( TokenTypes . TYPE _ PARAMETER ) ; 
 + checkType ( typeParameter ) ; 
 + DetailAST sibling = typeParameter . getNextSibling ( ) ; 
 + while ( sibling ! = null ) { 
 + if ( sibling . getType ( ) = = TokenTypes . TYPE _ PARAMETER ) { 
 + checkType ( sibling ) ; 
 + } 
 + sibling = sibling . getNextSibling ( ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Checks the type arguments of the node . 
 + * @ param node node to check . 
 + * / 
 + private void checkTypeArguments ( final DetailAST node ) { 
 + DetailAST typeArguments = node . findFirstToken ( TokenTypes . TYPE _ ARGUMENTS ) ; 
 + if ( typeArguments = = null ) { 
 + typeArguments = node . getFirstChild ( ) . findFirstToken ( TokenTypes . TYPE _ ARGUMENTS ) ; 
 + } 
 + 
 + if ( typeArguments ! = null ) { 
 + final DetailAST typeArgument = typeArguments . findFirstToken ( TokenTypes . TYPE _ ARGUMENT ) ; 
 + checkType ( typeArgument ) ; 
 + DetailAST sibling = typeArgument . getNextSibling ( ) ; 
 + while ( sibling ! = null ) { 
 + if ( sibling . getType ( ) = = TokenTypes . TYPE _ ARGUMENT ) { 
 + checkType ( sibling ) ; 
 + } 
 + sibling = sibling . getNextSibling ( ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 * Returns true if given class name is one of illegal classes or else false . 
 * @ param className class name to check . 
 * @ return true if given class name is one of illegal classes 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 index 7a21688 . . c3cde76 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Catching ' ' { 0 } ' ' is not allowed . 
 illegal . throw = Throwing ' ' { 0 } ' ' is not allowed . 
 illegal . token = Using ' ' { 0 } ' ' is not allowed . 
 illegal . token . text = Token text matches the illegal pattern ' ' { 0 } ' ' . 
 - illegal . type = Declaring variables , return values or parameters of type ' ' { 0 } ' ' is not allowed . 
 + illegal . type = Usage of type ' ' { 0 } ' ' is not allowed . 
 inline . conditional . avoid = Avoid inline conditionals . 
 instantiation . avoid = Instantiation of { 0 } should be avoided . 
 magic . number = ' ' { 0 } ' ' is a magic number . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 index 0b359bc . . 42cb6c2 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Die Exception ' ' { 0 } ' ' darf nicht abgefangen werden . 
 illegal . throw = Die Exception ' ' { 0 } ' ' darf nicht geworfen werden . 
 illegal . token = Das Token ' ' { 0 } ' ' ist nicht erlaubt . 
 illegal . token . text = Token - Text entspricht dem Muster ' ' { 0 } ' ' . 
 - illegal . type = Variablen , R ü ckgabewerte und Parameter vom Typ ' ' { 0 } ' ' sind nicht erlaubt . 
 + illegal . type = Die Verwendung des Typs ' ' { 0 } ' ' ist nicht erlaubt . 
 inline . conditional . avoid = Der Inline - Conditional - Operator sollte vermieden werden . 
 instantiation . avoid = Die Klasse { 0 } sollte nicht direkt instanziiert werden . 
 magic . number = Die magische Zahl ' ' { 0 } ' ' sollte als Konstante definiert werden . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties 
 index 3f7b7f6 . . e1bb84b 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties 
 @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Capturar la excepci ó n ' ' { 0 } ' ' no est á permitido . 
 illegal . throw = Lanzar ' ' { 0 } ' ' no est á permitido . 
 illegal . token = El uso de ' ' { 0 } ' ' no esta permitido . 
 illegal . token . text = El texto del token coincide con el patr ó n ilegal ' ' { 0 } ' ' . 
 - illegal . type = La declaraci ó n de variables , valores de retorno o par á metros de tipo ' ' { 0 } ' ' no est á permitida . 
 + illegal . type = El uso de tipo ' ' { 0 } ' ' no est á permitida . 
 inline . conditional . avoid = Evitar los condicionales en l í nea . 
 instantiation . avoid = Deber í a evitarse la instanciaci ó n de { 0 } . 
 magic . number = ' ' { 0 } ' ' es un n ú mero m á gico . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties 
 index 1246514 . . d7f3a9c 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties 
 @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Catching ' ' { 0 } ' ' ei ole sallittu . 
 illegal . throw = Heitto ' ' { 0 } ' ' ei ole sallittu . 
 illegal . token = ' ' { 0 } ' ' : n k ä ytt ö ei ole sallittu . 
 illegal . token . text = Token teksti vastaa laiton malli ' ' { 0 } ' ' . 
 - illegal . type = Julistaa muuttujia , paluuarvot tai parametrien tyyppi \ " \ " { 0 } \ " ei ole sallittu . 
 + illegal . type = Tyypin ' ' { 0 } ' ' k ä ytt ö ei ole sallittua . 
 inline . conditional . avoid = V ä lt ä inline conditionals . 
 instantiation . avoid = Ä l ä instantioi { 0 } : a . 
 magic . number = ' ' { 0 } ' ' on maaginen numero . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties 
 index a1d712f . . a32283f 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties 
 @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Catcher l ' ' exception ' ' { 0 } ' ' est prohib é . 
 illegal . throw = Lancer ' ' { 0 } ' ' n ' ' est pas autoris é . 
 illegal . token = Il est interdit d ' ' utiliser ' ' { 0 } ' ' . 
 illegal . token . text = Cha î ne de caract è res interdite ' ' { 0 } ' ' . 
 - illegal . type = D é clarer des variables , des valeurs de retour ou des param è tres de type ' ' { 0 } ' ' est interdit . 
 + illegal . type = L ' ' utilisation du type ' ' { 0 } ' ' est interdit . 
 inline . conditional . avoid = L ' ' utilisation de l ' ' op é rateur conditionel est prohib é e . 
 instantiation . avoid = L ' ' instantiation de la classe { 0 } est prohib é e . 
 magic . number = ' ' { 0 } ' ' devrait ê tre d é fini comme une constante . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties 
 index ae74664 . . 958d427 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties 
 @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = ' ' { 0 } ' ' を キ ャ ッ チ す る こ と は 許 可 さ れ て い ま せ ん 
 illegal . throw = ' ' { 0 } ' ' を ス ロ ー す る こ と は 許 可 さ れ て い ま せ ん 。 
 illegal . token = ' ' { 0 } ' ' の 使 用 は 許 可 さ れ て い ま せ ん 。 
 illegal . token . text = ト ー ク ン の テ キ ス ト が 不 正 な パ タ ー ン ' ' { 0 } ' ' に 一 致 し て い ま す 。 
 - illegal . type = ' ' { 0 } ' ' 型 の 変 数 、 戻 り 値 、 パ ラ メ ー タ を 宣 言 す る こ と は 許 可 さ れ て い ま せ ん 。 
 + illegal . type = ' ' { 0 } ' ' 型 の 使 用 は 許 可 さ れ て い ま せ ん 。 
 inline . conditional . avoid = イ ン ラ イ ン 条 件 文 を 避 け て く だ さ い 。 
 instantiation . avoid = { 0 } の イ ン ス タ ン ス 化 は 避 け る べ き で す 。 
 magic . number = ' ' { 0 } ' ' は マ ジ ッ ク ナ ン バ ー で す 。 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties 
 index da79ad8 . . dbe2248 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties 
 @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = Capturar ' ' { 0 } ' ' n ã o é permitido . 
 illegal . throw = Lan ç ar ' ' { 0 } ' ' n ã o é permitido . 
 illegal . token = N ã o é permitida a utiliza ç ã o de ' ' { 0 } ' ' . 
 illegal . token . text = Elemento de texto coincide com o padr ã o ilegal ' ' { 0 } ' ' . 
 - illegal . type = A declara ç ã o de vari á veis , valores de retorno ou par â metros do tipo ' ' { 0 } ' ' n ã o é permitida . 
 + illegal . type = Uso do tipo ' ' { 0 } ' ' n ã o é permitida . 
 inline . conditional . avoid = Evite condicionais inline . 
 instantiation . avoid = A instancia ç ã o de { 0 } deve ser evitada . 
 magic . number = ' ' { 0 } ' ' é um n ú mero m á gico . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties 
 index 4e27831 . . 3ec3327 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties 
 @ @ - 24 , 7 + 24 , 7 @ @ illegal . catch = ' ' { 0 } ' ' istisnas ı n ı / hatas ı n ı yakalamaya izin verilmiyor . 
 illegal . throw = ' ' { 0 } ' ' istisnas ı n ı / hatas ı n ı f ı rlatmaya izin verilmiyor . 
 illegal . token = ' ' { 0 } ' ' kullan ı m ı na izin verilmiyor . 
 illegal . token . text = İ zin verilmeyen bir kal ı p kullan ı lm ı ş ' ' { 0 } ' ' . 
 - illegal . type = ' ' { 0 } ' ' tipinde de ğ i ş ken , d ö n ü ş de ğ eri ya da parametre tan ı mlanmamal ı d ı r . 
 + illegal . type = ' ' { 0 } ' ' tipinin kullan ı lmas ı na izin verilmez . 
 inline . conditional . avoid = Sat ı r i ç i ko ş ullu ifadeler kullan ı lmamal ı d ı r . 
 instantiation . avoid = { 0 } s ı n ı f ı n ı n yeni nesnesi ü retilmemelidir . 
 magic . number = ' ' { 0 } ' ' say ı s ı ' ' magic number ' ' d ı r . \ u00D6nce tan ı mlanmal ı , sonra kullan ı lmal ı . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties 
 index 51bf29a . . 2a3b159 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties 
 @ @ - 23 , 7 + 23 , 7 @ @ illegal . catch = 禁 止 捕 获 ： ' ' { 0 } ' ' 。 
 illegal . throw = 禁 止 抛 出 ： ' ' { 0 } ' ' 。 
 illegal . token = 禁 止 使 用 ： ' ' { 0 } ' ' 。 
 illegal . token . text = 不 应 匹 配 表 达 式 ： ' ' { 0 } ' ' 。 
 - illegal . type = 不 应 声 明 ' ' { 0 } ' ' 类 型 的 引 用 、 返 回 值 或 参 数 名 。 
 + illegal . type = 不 允 许 使 用 ' ' { 0 } ' ' 类 型 。 
 inline . conditional . avoid = 避 免 三 元 表 达 式 。 
 instantiation . avoid = 应 避 免 { 0 } 的 实 例 化 。 
 magic . number = ' ' { 0 } ' ' 是 一 个 魔 术 数 字 （ 直 接 常 数 ） 。 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 index 31c53f9 . . 1c28cf4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 @ @ - 180 , 6 + 180 , 32 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testGenerics ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( IllegalTypeCheck . class ) ; 
 + checkConfig . addAttribute ( " illegalClassNames " , 
 + " Boolean , Foo , Serializable " ) ; 
 + checkConfig . addAttribute ( " memberModifiers " , " LITERAL _ PUBLIC , FINAL " ) ; 
 + final String [ ] expected = { 
 + " 20 : 16 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 21 : 31 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 21 : 40 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , 
 + " 24 : 18 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 25 : 24 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , 
 + " 25 : 44 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 28 : 23 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 28 : 42 : " + getCheckMessage ( MSG _ KEY , " Serializable " ) , 
 + " 30 : 54 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 32 : 25 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 32 : 60 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 34 : 26 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , 
 + " 34 : 30 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 44 : 20 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 57 : 28 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputIllegalTypeGenerics . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testStarImports ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( IllegalTypeCheck . class ) ; 
 checkConfig . addAttribute ( " illegalClassNames " , " List " ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java 
 new file mode 100644 
 index 0000000 . . 123c358 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java 
 @ @ - 0 , 0 + 1 , 59 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; 
 + 
 + import java . io . Serializable ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + import java . util . TreeSet ; 
 + import java . util . function . Consumer ; 
 + 
 + / * * 
 + * This test - input is intended to be checked using following configuration : 
 + * 
 + * illegalClassNames = { Boolean , Foo , Serializable } 
 + * memberModifiers = { LITERAL _ PUBLIC , FINAL } 
 + * 
 + * / 
 + public abstract class InputIllegalTypeGenerics { 
 + 
 + private Set < Boolean > privateSet ; / / OK 
 + private java . util . List < Map < Boolean , Foo > > privateList ; / / OK 
 + public Set < Boolean > set ; / / warn 
 + public java . util . List < Map < Boolean , Foo > > list ; / / warn 
 + 
 + private void methodCall ( ) { 
 + Bounded . < Boolean > foo ( ) ; / / warn 
 + final Consumer < Foo > consumer = Foo < Boolean > : : foo ; / / warn 
 + } 
 + 
 + public < T extends Boolean , U extends Serializable > void typeParameter ( T a ) { } / / warn 
 + 
 + public void fullName ( java . util . ArrayList < ? super Boolean > a ) { } / / warn 
 + 
 + public abstract Set < Boolean > shortName ( Set < ? super Set < Boolean > > a ) ; / / warn 
 + 
 + public Set < ? extends Foo < Boolean > > typeArgument ( ) { / / warn 
 + return new TreeSet < Foo < Boolean > > ( ) ; / / OK 
 + } 
 + 
 + public class MyClass < Foo extends Boolean > { } / / warn 
 + 
 + } 
 + 
 + class Bounded { 
 + 
 + public static < Boolean > void foo ( ) { } / / warn 
 + 
 + } 
 + 
 + class Foo < T extends Boolean & Serializable > { / / OK 
 + 
 + void foo ( ) { } 
 + 
 + } 
 + 
 + @ interface Annotation { 
 + 
 + Class < ? extends Boolean > [ ] nonPublic ( ) ; / / OK 
 + public Class < ? extends Boolean > [ ] value ( ) ; / / warn 
 + 
 + } 
 diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml 
 index b7c12cb . . 654a05d 100644 
 - - - a / src / xdocs / checks . xml 
 + + + b / src / xdocs / checks . xml 
 @ @ - 314 , 8 + 314 , 7 @ @ 
 < tr > 
 < td > < a href = " config _ coding . html # IllegalType " > IllegalType < / a > < / td > 
 < td > 
 - Checks that particular class are never used as types in variable 
 - declarations , return values or parameters . < / td > 
 + Checks that particular classes or interfaces are never used . < / td > 
 < / tr > 
 < tr > 
 < td > < a href = " config _ imports . html # ImportControl " > ImportControl < / a > < / td > 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index d7bb1b1 . . d67d09d 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 2056 , 8 + 2056 , 7 @ @ class SomeClass 
 < subsection name = " Description " id = " IllegalType _ Description " > 
 < p > Since Checkstyle 3 . 2 < / p > 
 < p > 
 - Checks that particular classes are never used as types in variable 
 - declarations , one - dimensional and multi - dimensional arrays , return values or parameters . 
 + Checks that particular classes or interfaces are never used . 
 < / p > 
 
 < p > 
 @ @ - 2118 , 7 + 2117 , 8 @ @ class SomeClass 
 < / tr > 
 < tr > 
 < td > memberModifiers < / td > 
 - < td > Check methods and fields with only corresponding modifiers . < / td > 
 + < td > To check only methods and fields with any of the specified modifiers . 
 + This property does not affect method calls nor method references . < / td > 
 < td > subset of tokens 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html " > TokenTypes < / a > < / td > 
 < td / > 
 @ @ - 2129 , 20 + 2129 , 32 @ @ class SomeClass 
 < td > tokens to check < / td > 
 < td > 
 subset of tokens 
 - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > 
 - VARIABLE _ DEF < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > 
 + ANNOTATION _ FIELD _ DEF < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ CALL " > 
 + METHOD _ CALL < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > 
 + METHOD _ DEF < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ REF " > 
 + METHOD _ REF < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PARAMETER _ DEF " > 
 PARAMETER _ DEF < / a > , 
 - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > 
 - METHOD _ DEF < / a > . 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > 
 + VARIABLE _ DEF < / a > . 
 < / td > 
 < td > 
 - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > 
 - VARIABLE _ DEF < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > 
 + ANNOTATION _ FIELD _ DEF < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ CALL " > 
 + METHOD _ CALL < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > 
 + METHOD _ DEF < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ REF " > 
 + METHOD _ REF < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PARAMETER _ DEF " > 
 PARAMETER _ DEF < / a > , 
 - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > 
 - METHOD _ DEF < / a > . 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > 
 + VARIABLE _ DEF < / a > . 
 < / td > 
 < td > 3 . 2 < / td > 
 < / tr > 
 @ @ - 2159 , 7 + 2171 , 7 @ @ class SomeClass 
 & lt ; / module & gt ; 
 < / source > 
 < p > 
 - To configure the Check so that it verifies only public , protected and static 
 + To configure the Check so that it verifies only public , protected or static 
 methods and fields : 
 < / p > 
 < source > 
 @ @ - 2168 , 6 + 2180 , 38 @ @ class SomeClass 
 LITERAL _ PROTECTED , LITERAL _ STATIC & quot ; / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + < p > 
 + To configure the check so that it verifies usage of types Boolean and Foo : 
 + < / p > 
 + < source > 
 + & lt ; module name = " IllegalType " & gt ; 
 + & lt ; property name = & quot ; illegalClassNames & quot ; value = & quot ; Boolean , Foo & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + 
 + < source > 
 + public class Test { 
 + 
 + public Set & lt ; Boolean & gt ; set ; / / violation 
 + public java . util . List & lt ; Map & lt ; Boolean , Foo & gt ; & gt ; list ; / / violation 
 + 
 + private void method ( List & lt ; Foo & gt ; list , Boolean value ) { / / violation 
 + SomeType . & lt ; Boolean & gt ; foo ( ) ; / / violation 
 + final Consumer & lt ; Foo & gt ; consumer = Foo & lt ; Boolean & gt ; : : foo ; / / violation 
 + } 
 + 
 + public & lt ; T extends Boolean , U extends Serializable & gt ; void typeParameter ( T a ) { } / / violation 
 + 
 + public void fullName ( java . util . ArrayList & lt ; ? super Boolean & gt ; a ) { } / / violation 
 + 
 + public abstract Set & lt ; Boolean & gt ; shortName ( Set & lt ; ? super Boolean & gt ; a ) ; / / violation 
 + 
 + public Set & lt ; ? extends Foo & gt ; typeArgument ( ) { / / violation 
 + return new TreeSet & lt ; Foo & lt ; Boolean & gt ; & gt ; ( ) ; 
 + } 
 + 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Example of Usage " id = " IllegalType _ Example _ of _ Usage " >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 index 1ad746a . . 94af99f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 @ @ - 183 , 9 + 183 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; 
 final Predicate < DetailAST > predicate = currentNode - > { 
 - return currentNode ! = null 
 - & & currentNode ! = methodImplCloseBrace 
 - & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) 
 + return currentNode ! = methodImplCloseBrace 
 & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; 
 } ; 
 final Optional < DetailAST > methodBody = 
 @ @ - 220 , 31 + 218 , 19 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 * @ return true if a method has any of ignored annotations . 
 * / 
 private static boolean hasIgnoredAnnotation ( DetailAST methodDef , Set < String > annotations ) { 
 - return annotations . stream ( ) . filter ( annotation - > hasAnnotation ( methodDef , annotation ) ) 
 - . findAny ( ) . isPresent ( ) ; 
 - } 
 - 
 - / * * 
 - * Check if a method has specific annotation . 
 - * @ param methodDef method definition token . 
 - * @ param annotationName annotation name . 
 - * @ return true , if a method has a specific annotation . 
 - * / 
 - private static boolean hasAnnotation ( DetailAST methodDef , String annotationName ) { 
 final DetailAST modifiers = methodDef . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - boolean containsAnnotation = false ; 
 + boolean hasIgnoredAnnotation = false ; 
 if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { 
 final Optional < DetailAST > annotation = TokenUtils . findFirstTokenByPredicate ( modifiers , 
 currentToken - > { 
 - return currentToken ! = null 
 - & & currentToken . getType ( ) = = TokenTypes . ANNOTATION 
 - & & annotationName . equals ( getAnnotationName ( currentToken ) ) ; 
 + return currentToken . getType ( ) = = TokenTypes . ANNOTATION 
 + & & annotations . contains ( getAnnotationName ( currentToken ) ) ; 
 } ) ; 
 if ( annotation . isPresent ( ) ) { 
 - containsAnnotation = true ; 
 + hasIgnoredAnnotation = true ; 
 } 
 } 
 - return containsAnnotation ; 
 + return hasIgnoredAnnotation ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java 
 index aad1d56 . . d9fd5a6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java 
 @ @ - 191 , 7 + 191 , 8 @ @ public final class TokenUtils { 
 } 
 
 / * * 
 - * Finds the first node { @ link Optional } of { @ link DetailAST } which matches the predicate . 
 + * Finds the first { @ link Optional } child token of { @ link DetailAST } root node 
 + * which matches the given predicate . 
 * @ param root root node . 
 * @ param predicate predicate . 
 * @ return { @ link Optional } of { @ link DetailAST } node which matches the predicate . 
 @ @ - 199 , 20 + 200 , 11 @ @ public final class TokenUtils { 
 public static Optional < DetailAST > findFirstTokenByPredicate ( DetailAST root , 
 Predicate < DetailAST > predicate ) { 
 Optional < DetailAST > result = Optional . empty ( ) ; 
 - DetailAST rootNode = root ; 
 - while ( rootNode ! = null ) { 
 - DetailAST toVisit = rootNode . getFirstChild ( ) ; 
 - if ( predicate . test ( toVisit ) ) { 
 - result = Optional . of ( toVisit ) ; 
 + for ( DetailAST ast = root . getFirstChild ( ) ; ast ! = null ; ast = ast . getNextSibling ( ) ) { 
 + if ( predicate . test ( ast ) ) { 
 + result = Optional . of ( ast ) ; 
 break ; 
 } 
 - while ( rootNode ! = null & & toVisit = = null ) { 
 - toVisit = rootNode . getNextSibling ( ) ; 
 - if ( toVisit = = null ) { 
 - rootNode = rootNode . getParent ( ) ; 
 - } 
 - } 
 - rootNode = toVisit ; 
 } 
 return result ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java 
 index 6781597 . . 5c3eb9e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . junit . Test ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class DesignForExtensionCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 88 , 17 + 89 , 30 @ @ public class DesignForExtensionCheckTest 
 @ Test 
 public void testIgnoredAnnotationsOption ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; 
 - checkConfig . addAttribute ( " ignoredAnnotations " , " Override , Deprecated " ) ; 
 + checkConfig . addAttribute ( " ignoredAnnotations " , " Override , Deprecated , MyAnnotation " ) ; 
 final String [ ] expected = { 
 " 31 : 5 : " 
 + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo1 " ) , 
 " 141 : 5 : " 
 + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo21 " ) , 
 + " 146 : 5 : " 
 + + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " setAge " ) , 
 + " 161 : 5 : " 
 + + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo24 " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputDesignForExtensionIgnoredAnnotations . java " ) , expected ) ; 
 } 
 
 @ Test 
 + public void testIgnoreAnnotationsOptionWithMultipleAnnotations ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoredAnnotations " , 
 + " Override , Deprecated , Before , After , BeforeClass , AfterClass " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputDesignForExtensionMultipleAnnotations . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testNativeMethods ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; 
 checkConfig . addAttribute ( " ignoredAnnotations " , " Deprecated " ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java 
 index c8a2e36 . . 3a4f37b 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java 
 @ @ - 138 , 6 + 138 , 29 @ @ public class InputDesignForExtensionIgnoredAnnotations { 
 @ InputLocalAnnotations . ClassRule 
 public void foo20 ( ) { return ; } 
 
 - @ InputLocalAnnotations . ClassRule 
 - public void foo21 ( ) { return ; } / / violation 
 + @ InputLocalAnnotations . ClassRule / / violation 
 + public void foo21 ( ) { return ; } 
 + 
 + private int age ; 
 + 
 + @ Inject / / violation 
 + public void setAge ( int age ) { 
 + this . age = age ; 
 + } 
 + 
 + public @ interface Inject { } 
 + 
 + public @ MyAnnotation void foo22 ( ) { 
 + foo1 ( ) ; 
 + } 
 + 
 + @ MyAnnotation public void foo23 ( ) { 
 + foo1 ( ) ; 
 + } 
 + 
 + public void foo24 ( @ MyAnnotation int a ) { / / violation 
 + foo1 ( ) ; 
 + } 
 + 
 + public @ interface MyAnnotation { } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java 
 new file mode 100644 
 index 0000000 . . 7f94946 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java 
 @ @ - 0 , 0 + 1 , 84 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . util . List ; 
 + 
 + import org . junit . Ignore ; 
 + import org . junit . Test ; 
 + 
 + public class InputDesignForExtensionMultipleAnnotations { 
 + 
 + @ Ignore 
 + @ Deprecated 
 + public void foo1 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Deprecated 
 + @ Ignore 
 + public void foo2 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Ignore 
 + / / comment 
 + @ Deprecated 
 + public void foo4 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Deprecated 
 + / / comment 
 + @ Ignore 
 + public void foo5 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + 
 + @ Ignore 
 + / * * 
 + * comment 
 + * / 
 + @ Deprecated 
 + public void foo6 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Deprecated 
 + / * * 
 + * comment 
 + * / 
 + @ Ignore 
 + public void foo7 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Ignore 
 + / * comment * / 
 + @ Deprecated 
 + public void foo8 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Deprecated 
 + / * comment * / 
 + @ Ignore 
 + public void foo9 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + / * comment * / 
 + @ Ignore 
 + @ Deprecated 
 + public void foo10 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + / * comment * / 
 + @ Deprecated 
 + @ Ignore 
 + public void foo11 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + private void foo3 ( ) { } 
 + }
