BLEU SCORE: 0.09548450962056532

TEST MSG: Issue # 6118 : IllegalType should check extends & implements
GENERATED MSG: Issue # 4092 : added extends , implements and annotations processing

TEST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 4819206 . . 427d0d4 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 302 , 7 + 302 , 7 @ @ <nl> or @ Image = ' FinalLocalVariableCheck ' or @ Image = ' ModifiedControlVariableCheck ' <nl> or @ Image = ' ParameterAssignmentCheck ' or @ Image = ' UnnecessaryParenthesesCheck ' <nl> or @ Image = ' AbstractClassCouplingCheck ' or @ Image = ' BooleanExpressionComplexityCheck ' <nl> - or @ Image = ' ParenPadCheck ' ] / / MethodDeclaration [ @ Name = ' visitToken ' ] <nl> + or @ Image = ' ParenPadCheck ' or @ Image = ' IllegalTypeCheck ' ] / / MethodDeclaration [ @ Name = ' visitToken ' ] <nl> | / / ClassOrInterfaceDeclaration [ @ Image = ' XdocsJavaDocsTest ' ] <nl> / / MethodDeclaration [ @ Name = ' testAllCheckSectionJavaDocs ' ] " / > <nl> < / properties > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> index 4de10e9 . . b058a21 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> @ @ - 168 , 7 + 168 , 9 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> public int [ ] getAcceptableTokens ( ) { <nl> return new int [ ] { <nl> TokenTypes . ANNOTATION _ FIELD _ DEF , <nl> + TokenTypes . CLASS _ DEF , <nl> TokenTypes . IMPORT , <nl> + TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . METHOD _ CALL , <nl> TokenTypes . METHOD _ DEF , <nl> TokenTypes . METHOD _ REF , <nl> @ @ - 196 , 6 + 198 , 10 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> switch ( ast . getType ( ) ) { <nl> + case TokenTypes . CLASS _ DEF : <nl> + case TokenTypes . INTERFACE _ DEF : <nl> + visitTypeDef ( ast ) ; <nl> + break ; <nl> case TokenTypes . METHOD _ CALL : <nl> case TokenTypes . METHOD _ REF : <nl> visitMethodCallOrRef ( ast ) ; <nl> @ @ - 256 , 6 + 262 , 24 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Checks the super type and implemented interfaces of a given type . <nl> + * @ param typeDef class or interface for check . <nl> + * / <nl> + private void visitTypeDef ( DetailAST typeDef ) { <nl> + if ( isVerifiable ( typeDef ) ) { <nl> + checkTypeParameters ( typeDef ) ; <nl> + final DetailAST extendsClause = typeDef . findFirstToken ( TokenTypes . EXTENDS _ CLAUSE ) ; <nl> + if ( extendsClause ! = null ) { <nl> + checkBaseTypes ( extendsClause ) ; <nl> + } <nl> + final DetailAST implementsClause = typeDef . findFirstToken ( TokenTypes . IMPLEMENTS _ CLAUSE ) ; <nl> + if ( implementsClause ! = null ) { <nl> + checkBaseTypes ( implementsClause ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Checks return type of a given method . <nl> * @ param methodDef method for check . <nl> * / <nl> @ @ - 348 , 18 + 372 , 36 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> * @ param type node to check . <nl> * / <nl> private void checkIdent ( DetailAST type ) { <nl> - final FullIdent ident = FullIdent . createFullIdentBelow ( type ) ; <nl> + final FullIdent ident = FullIdent . createFullIdent ( type ) ; <nl> if ( isMatchingClassName ( ident . getText ( ) ) ) { <nl> log ( ident . getDetailAst ( ) , MSG _ KEY , ident . getText ( ) ) ; <nl> } <nl> } <nl> <nl> / * * <nl> + * Checks the { @ code extends } or { @ code implements } statement . <nl> + * @ param clause DetailAST for either { @ link TokenTypes # EXTENDS _ CLAUSE } or <nl> + * { @ link TokenTypes # IMPLEMENTS _ CLAUSE } <nl> + * / <nl> + private void checkBaseTypes ( DetailAST clause ) { <nl> + DetailAST child = clause . getFirstChild ( ) ; <nl> + while ( child ! = null ) { <nl> + if ( child . getType ( ) = = TokenTypes . IDENT ) { <nl> + checkIdent ( child ) ; <nl> + } <nl> + else if ( child . getType ( ) = = TokenTypes . TYPE _ ARGUMENTS ) { <nl> + TokenUtil . forEachChild ( child , TokenTypes . TYPE _ ARGUMENT , this : : checkType ) ; <nl> + } <nl> + child = child . getNextSibling ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Checks the given type , its arguments and parameters . <nl> * @ param type node to check . <nl> * / <nl> private void checkType ( DetailAST type ) { <nl> - checkIdent ( type ) ; <nl> + checkIdent ( type . getFirstChild ( ) ) ; <nl> checkTypeArguments ( type ) ; <nl> checkTypeBounds ( type ) ; <nl> } <nl> @ @ - 386 , 16 + 428 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> private void checkTypeParameters ( final DetailAST node ) { <nl> final DetailAST typeParameters = node . findFirstToken ( TokenTypes . TYPE _ PARAMETERS ) ; <nl> if ( typeParameters ! = null ) { <nl> - final DetailAST typeParameter = <nl> - typeParameters . findFirstToken ( TokenTypes . TYPE _ PARAMETER ) ; <nl> - checkType ( typeParameter ) ; <nl> - DetailAST sibling = typeParameter . getNextSibling ( ) ; <nl> - while ( sibling ! = null ) { <nl> - if ( sibling . getType ( ) = = TokenTypes . TYPE _ PARAMETER ) { <nl> - checkType ( sibling ) ; <nl> - } <nl> - sibling = sibling . getNextSibling ( ) ; <nl> - } <nl> + TokenUtil . forEachChild ( typeParameters , TokenTypes . TYPE _ PARAMETER , this : : checkType ) ; <nl> } <nl> } <nl> <nl> @ @ - 410 , 15 + 443 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> } <nl> <nl> if ( typeArguments ! = null ) { <nl> - final DetailAST typeArgument = typeArguments . findFirstToken ( TokenTypes . TYPE _ ARGUMENT ) ; <nl> - checkType ( typeArgument ) ; <nl> - DetailAST sibling = typeArgument . getNextSibling ( ) ; <nl> - while ( sibling ! = null ) { <nl> - if ( sibling . getType ( ) = = TokenTypes . TYPE _ ARGUMENT ) { <nl> - checkType ( sibling ) ; <nl> - } <nl> - sibling = sibling . getNextSibling ( ) ; <nl> - } <nl> + TokenUtil . forEachChild ( typeArguments , TokenTypes . TYPE _ ARGUMENT , this : : checkType ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtil . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtil . java <nl> index 3a0c9b0 . . 95724e0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtil . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtil . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . Optional ; <nl> import java . util . ResourceBundle ; <nl> + import java . util . function . Consumer ; <nl> import java . util . function . Predicate ; <nl> import java . util . stream . Collectors ; <nl> <nl> @ @ - 226 , 4 + 227 , 19 @ @ public final class TokenUtil { <nl> return result ; <nl> } <nl> <nl> + / * * <nl> + * Performs an action for each child of { @ link DetailAST } root node <nl> + * which matches the given token type . <nl> + * @ param root root node . <nl> + * @ param type token type to match . <nl> + * @ param action action to perform on the nodes . <nl> + * / <nl> + public static void forEachChild ( DetailAST root , int type , Consumer < DetailAST > action ) { <nl> + for ( DetailAST ast = root . getFirstChild ( ) ; ast ! = null ; ast = ast . getNextSibling ( ) ) { <nl> + if ( ast . getType ( ) = = type ) { <nl> + action . accept ( ast ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> index 1c28cf4 . . 2bb06a2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> @ @ - 44 , 6 + 44 , 7 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( IllegalTypeCheck . class ) ; <nl> checkConfig . addAttribute ( " validateAbstractClassNames " , " true " ) ; <nl> final String [ ] expected = { <nl> + " 10 : 38 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> " 27 : 5 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> " 29 : 37 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> " 33 : 12 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> @ @ - 140 , 6 + 141 , 7 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { <nl> " List , InputIllegalTypeGregorianCalendar , java . io . File , ArrayList , Boolean " ) ; <nl> final String [ ] expected = { <nl> " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , <nl> + " 14 : 43 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , <nl> " 16 : 23 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , <nl> " 24 : 9 : " + getCheckMessage ( MSG _ KEY , " List " ) , <nl> " 25 : 9 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , <nl> @ @ - 199 , 13 + 201 , 35 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { <nl> " 32 : 60 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> " 34 : 26 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , <nl> " 34 : 30 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> - " 44 : 20 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> - " 57 : 28 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 38 : 26 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , <nl> + " 38 : 38 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 47 : 20 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 60 : 28 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputIllegalTypeGenerics . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> + public void testExtendsImplements ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( IllegalTypeCheck . class ) ; <nl> + checkConfig . addAttribute ( " illegalClassNames " , <nl> + " Boolean , Foo , Hashtable , Serializable " ) ; <nl> + checkConfig . addAttribute ( " memberModifiers " , " LITERAL _ PUBLIC " ) ; <nl> + final String [ ] expected = { <nl> + " 16 : 17 : " + getCheckMessage ( MSG _ KEY , " Hashtable " ) , <nl> + " 17 : 14 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 22 : 23 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 24 : 13 : " + getCheckMessage ( MSG _ KEY , " Serializable " ) , <nl> + " 26 : 24 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , <nl> + " 27 : 27 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 30 : 32 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , <nl> + " 31 : 28 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 32 : 13 : " + getCheckMessage ( MSG _ KEY , " Serializable " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputIllegalTypeExtendsImplements . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testStarImports ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( IllegalTypeCheck . class ) ; <nl> checkConfig . addAttribute ( " illegalClassNames " , " List " ) ; <nl> @ @ - 283 , 7 + 307 , 7 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { <nl> final IllegalTypeCheck check = new IllegalTypeCheck ( ) ; <nl> <nl> final DetailAST classDefAst = new DetailAST ( ) ; <nl> - classDefAst . setType ( TokenTypes . CLASS _ DEF ) ; <nl> + classDefAst . setType ( TokenTypes . DOT ) ; <nl> <nl> try { <nl> check . visitToken ( classDefAst ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilTest . java <nl> index 1d7cbf7 . . 827bde1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilTest . java <nl> @ @ - 27 , 7 + 27 , 9 @ @ import static org . junit . Assert . fail ; <nl> <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Modifier ; <nl> + import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Optional ; <nl> import java . util . TreeMap ; <nl> @ @ - 277 , 4 + 279 , 25 @ @ public class TokenUtilTest { <nl> assertEquals ( " Invalid second sibling " , secondSibling , result . get ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testForEachChild ( ) { <nl> + final DetailAST astForTest = new DetailAST ( ) ; <nl> + final DetailAST child = new DetailAST ( ) ; <nl> + final DetailAST firstSibling = new DetailAST ( ) ; <nl> + final DetailAST secondSibling = new DetailAST ( ) ; <nl> + final DetailAST thirdSibling = new DetailAST ( ) ; <nl> + firstSibling . setType ( TokenTypes . DOT ) ; <nl> + secondSibling . setType ( TokenTypes . CLASS _ DEF ) ; <nl> + thirdSibling . setType ( TokenTypes . IDENT ) ; <nl> + secondSibling . setNextSibling ( thirdSibling ) ; <nl> + firstSibling . setNextSibling ( secondSibling ) ; <nl> + child . setNextSibling ( firstSibling ) ; <nl> + astForTest . setFirstChild ( child ) ; <nl> + final List < DetailAST > children = new ArrayList < > ( ) ; <nl> + TokenUtil . forEachChild ( astForTest , TokenTypes . CLASS _ DEF , children : : add ) ; <nl> + <nl> + assertEquals ( " Must be one match " , 1 , children . size ( ) ) ; <nl> + assertEquals ( " Mismatched child node " , secondSibling , children . get ( 0 ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeExtendsImplements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeExtendsImplements . java <nl> new file mode 100644 <nl> index 0000000 . . f78669e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeExtendsImplements . java <nl> @ @ - 0 , 0 + 1 , 55 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; <nl> + <nl> + import java . io . Serializable ; <nl> + import java . util . * ; <nl> + <nl> + / * * <nl> + * This test - input is intended to be checked using following configuration : <nl> + * <nl> + * illegalClassNames = { Boolean , Foo , Hashtable , Serializable } <nl> + * memberModifiers = { LITERAL _ PUBLIC } <nl> + * <nl> + * / <nl> + public abstract class InputIllegalTypeExtendsImplements { <nl> + <nl> + public abstract class Bar <nl> + extends Hashtable / / warn <nl> + < Boolean , / / warn <nl> + Bar > { / / OK <nl> + } <nl> + <nl> + public abstract class Foo < <nl> + T extends Boolean > / / warn <nl> + implements Cloneable , / / OK <nl> + Serializable , / / warn <nl> + Comparator , / / OK <nl> + Comparable < Foo < / / warn <nl> + ? extends Boolean > > { / / warn <nl> + } <nl> + <nl> + public interface Interface < Foo > <nl> + extends Comparable < Boolean > , / / warn <nl> + Serializable { / / warn <nl> + } <nl> + <nl> + abstract class NonPublicBar <nl> + extends Hashtable / / OK <nl> + < Boolean , / / OK <nl> + Bar > { / / OK <nl> + } <nl> + <nl> + abstract class NonPublicFoo < <nl> + T extends Boolean > / / OK <nl> + implements Cloneable , / / OK <nl> + Serializable , / / OK <nl> + Comparator , / / OK <nl> + Comparable < Foo < / / OK <nl> + ? extends Boolean > > { / / OK <nl> + } <nl> + <nl> + interface NonPublicInterface < Foo > <nl> + extends Comparable < Boolean > , / / OK <nl> + Serializable { / / OK <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java <nl> index 123c358 . . 80f2221 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java <nl> @ @ - 41 , 6 + 41 , 9 @ @ public abstract class InputIllegalTypeGenerics { <nl> <nl> class Bounded { <nl> <nl> + public boolean match = new TreeSet < Integer > ( ) . stream ( ) <nl> + . allMatch ( new TreeSet < > ( ) : : add ) ; / / OK <nl> + <nl> public static < Boolean > void foo ( ) { } / / warn <nl> <nl> } <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index d67d09d . . 8f128d0 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 2131 , 6 + 2131 , 10 @ @ class SomeClass <nl> subset of tokens <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > <nl> ANNOTATION _ FIELD _ DEF < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CLASS _ DEF " > <nl> + CLASS _ DEF < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INTERFACE _ DEF " > <nl> + INTERFACE _ DEF < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ CALL " > <nl> METHOD _ CALL < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > <nl> @ @ - 2145 , 6 + 2149 , 10 @ @ class SomeClass <nl> < td > <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > <nl> ANNOTATION _ FIELD _ DEF < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CLASS _ DEF " > <nl> + CLASS _ DEF < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INTERFACE _ DEF " > <nl> + INTERFACE _ DEF < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ CALL " > <nl> METHOD _ CALL < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " >
NEAREST DIFF (one line): diff - - git a / . ci / jsoref - spellchecker / whitelist . words b / . ci / jsoref - spellchecker / whitelist . words <nl> index 0d36f75 . . 61af023 100644 <nl> - - - a / . ci / jsoref - spellchecker / whitelist . words <nl> + + + b / . ci / jsoref - spellchecker / whitelist . words <nl> @ @ - 29 , 6 + 29 , 7 @ @ allclasses <nl> alot <nl> ambig <nl> Amessages <nl> + androidx <nl> ANNOS <nl> annotationlocation <nl> annotationonsameline <nl> @ @ - 65 , 6 + 66 , 7 @ @ ASF <nl> ASingle <nl> Aspectj <nl> Asrc <nl> + assertj <nl> ASTNo <nl> asttreestringprinter <nl> Asun <nl> @ @ - 278 , 6 + 280 , 7 @ @ cyclomatic <nl> cyclomaticcomplexity <nl> cz <nl> daaf <nl> + dalvik <nl> Daniil <nl> daniilyar <nl> Darguments <nl> @ @ - 492 , 6 + 495 , 7 @ @ googleapis <nl> googleblog <nl> googleecommon <nl> googlegroups <nl> + googlesource <nl> govstrangefolder <nl> gplus <nl> gradle <nl> @ @ - 718 , 6 + 722 , 7 @ @ lexer <nl> lgpl <nl> lharris <nl> LHSOf <nl> + libcore <nl> liberapay <nl> libexec <nl> lifecycle <nl> @ @ - 950 , 6 + 955 , 7 @ @ parameterassignment <nl> parametername <nl> parameternumber <nl> paramnum <nl> + Parcelable <nl> parenpad <nl> parrt <nl> parsetreetablepresentation <nl> @ @ - 985 , 6 + 991 , 7 @ @ Postgresql <nl> powermock <nl> Ppitest <nl> prameterless <nl> + prebuilts <nl> preformatted <nl> printf <nl> println <nl> @ @ - 1127 , 6 + 1134 , 7 @ @ spellchecker <nl> spliterator <nl> spotbugs <nl> spotbugsreports <nl> + spotify <nl> springframework <nl> sqale <nl> sqe <nl> @ @ - 1159 , 6 + 1167 , 7 @ @ subelements <nl> subext <nl> subscope <nl> sudo <nl> + suitebuilder <nl> sukhodolsky <nl> summaryjavadoc <nl> superclasses <nl> diff - - git a / config / ant - phase - verify . xml b / config / ant - phase - verify . xml <nl> index 47ca639 . . a6e8e82 100644 <nl> - - - a / config / ant - phase - verify . xml <nl> + + + b / config / ant - phase - verify . xml <nl> @ @ - 31 , 7 + 31 , 8 @ @ <nl> > <nl> < fileset dir = " src " <nl> includes = " * * / * " <nl> - excludes = " it / resources / * * / * , test / resources / * * / * , test / resources - noncompilable / * * / * " / > <nl> + excludes = " it / resources / * * / * , it / resources - noncompilable / * * / * , <nl> + , test / resources / * * / * , test / resources - noncompilable / * * / * " / > <nl> < formatter type = " plain " / > <nl> < formatter type = " xml " toFile = " $ { mvn . project . build . directory } / cs _ errors . xml " / > <nl> < classpath path = " $ { mvn . runtime _ classpath } " / > <nl> diff - - git a / pom . xml b / pom . xml <nl> index 0c626fa . . 450a20f 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 589 , 7 + 589 , 8 @ @ <nl> < sourceDirectory > $ { project . basedir } / src < / sourceDirectory > <nl> < / sourceDirectories > <nl> < excludes > <nl> - * * / it / resources / * * / * , * * / test / resources / * * / * , * * / test / resources - noncompilable / * * / * <nl> + * * / it / resources / * * / * , * * / it / resources - noncompilable / * * / * , <nl> + , * * / test / resources / * * / * , * * / test / resources - noncompilable / * * / * <nl> < / excludes > <nl> < / configuration > <nl> < goals > <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> index b41879b . . aeea77c 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> @ @ - 113 , 6 + 113 , 20 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> } <nl> <nl> / * * <nl> + * Returns canonical path for the file with the given file name . <nl> + * The path is formed base on the non - compilable resources location . <nl> + * This implementation uses ' src / test / resources - noncompilable / ' <nl> + * as a non - compilable resource location . <nl> + * @ param filename file name . <nl> + * @ return canonical path for the file with the given file name . <nl> + * @ throws IOException if I / O exception occurs while forming the path . <nl> + * / <nl> + protected final String getNonCompilablePath ( String filename ) throws IOException { <nl> + return new File ( " src / it / resources - noncompilable / " + getPackageLocation ( ) + " / " <nl> + + filename ) . getCanonicalPath ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Creates { @ link DefaultConfiguration } instance for the given module class . <nl> * @ param clazz module class . <nl> * @ return { @ link DefaultConfiguration } instance . <nl> diff - - git a / src / it / java / org / checkstyle / checks / imports / ImportOrderTest . java b / src / it / java / org / checkstyle / checks / imports / ImportOrderTest . java <nl> new file mode 100644 <nl> index 0000000 . . 189107e <nl> - - - / dev / null <nl> + + + b / src / it / java / org / checkstyle / checks / imports / ImportOrderTest . java <nl> @ @ - 0 , 0 + 1 , 88 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2018 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package org . checkstyle . checks . imports ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . google . checkstyle . test . base . AbstractModuleTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> + <nl> + public class ImportOrderTest extends AbstractModuleTestSupport { <nl> + <nl> + @ Override <nl> + protected String getPackageLocation ( ) { <nl> + return " org / checkstyle / checks / imports / importorder " ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAndroid ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " groups " , <nl> + " android , androidx , com . android , dalvik , com , gov , junit , libcore , net , org , java , javax " ) ; <nl> + checkConfig . addAttribute ( " option " , " top " ) ; <nl> + checkConfig . addAttribute ( " ordered " , " true " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " separatedStaticGroups " , " true " ) ; <nl> + checkConfig . addAttribute ( " staticGroups " , <nl> + " android , androidx , com . android , dalvik , com , gov , junit , libcore , net , org , java , javax " ) ; <nl> + <nl> + final String filePath = getNonCompilablePath ( " InputFromAndroid . java " ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSpotify ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " groups " , " android , com , net , junit , org , java , javax " ) ; <nl> + checkConfig . addAttribute ( " option " , " bottom " ) ; <nl> + checkConfig . addAttribute ( " ordered " , " true " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " separatedStaticGroups " , " true " ) ; <nl> + checkConfig . addAttribute ( " staticGroups " , " android , com , net , junit , org , java , javax " ) ; <nl> + <nl> + final String filePath = getNonCompilablePath ( " InputFromSpotify . java " ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTwitter ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " caseSensitive " , " true " ) ; <nl> + checkConfig . addAttribute ( " groups " , " android , com . twitter , com , junit , net , org , java , javax " ) ; <nl> + checkConfig . addAttribute ( " option " , " bottom " ) ; <nl> + checkConfig . addAttribute ( " ordered " , " true " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " separatedStaticGroups " , " true " ) ; <nl> + checkConfig . addAttribute ( " staticGroups " , <nl> + " android , com . twitter , com , junit , net , org , java , javax " ) ; <nl> + <nl> + final String filePath = getNonCompilablePath ( " InputFromTwitter . java " ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromAndroid . java b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromAndroid . java <nl> new file mode 100644 <nl> index 0000000 . . 43bd37d <nl> - - - / dev / null <nl> + + + b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromAndroid . java <nl> @ @ - 0 , 0 + 1 , 57 @ @ <nl> + / / non - compiled with javac : contains specially crafted set of imports for testing <nl> + package org . checkstyle . checks . importorder ; <nl> + / * * <nl> + * This test - input is intended to be checked using following configuration : <nl> + * <nl> + * groups = { android , androidx , com . android , dalvik , com , gov , junit , libcore , net , org , java , javax } <nl> + * option = top <nl> + * ordered = true <nl> + * separated = true <nl> + * separatedStaticGroups = true <nl> + * staticGroups = { android , androidx , com . android , dalvik , com , gov , junit , libcore , net , org , java , javax } <nl> + * <nl> + * This test - input is based on real application code and shouldn ' t be changed . <nl> + * @ see https : / / android . googlesource . com / platform / prebuilts / checkstyle / + / master / default - treewalker - checks . xml <nl> + * / <nl> + import static android . graphics . drawable . Icon . TYPE _ ADAPTIVE _ BITMAP ; <nl> + import static android . graphics . drawable . Icon . TYPE _ BITMAP ; <nl> + import static android . graphics . drawable . Icon . TYPE _ DATA ; <nl> + import static android . graphics . drawable . Icon . TYPE _ RESOURCE ; <nl> + import static android . graphics . drawable . Icon . TYPE _ URI ; <nl> + <nl> + import static androidx . annotation . RestrictTo . Scope . LIBRARY ; <nl> + import static androidx . annotation . RestrictTo . Scope . LIBRARY _ GROUP ; <nl> + <nl> + import android . app . ActivityManager ; <nl> + import android . content . ContentResolver ; <nl> + import android . content . Context ; <nl> + import android . content . Intent ; <nl> + import android . content . pm . ApplicationInfo ; <nl> + import android . graphics . Shader ; <nl> + import android . graphics . drawable . BitmapDrawable ; <nl> + import android . os . Parcelable ; <nl> + import android . text . TextUtils ; <nl> + import android . util . Log ; <nl> + <nl> + import androidx . annotation . ColorInt ; <nl> + import androidx . annotation . DrawableRes ; <nl> + import androidx . annotation . IdRes ; <nl> + import androidx . annotation . IntDef ; <nl> + import androidx . annotation . RestrictTo ; <nl> + import androidx . annotation . VisibleForTesting ; <nl> + import androidx . core . content . ContextCompat ; <nl> + import androidx . core . content . res . ResourcesCompat ; <nl> + import androidx . core . util . Preconditions ; <nl> + <nl> + import java . io . ByteArrayOutputStream ; <nl> + import java . io . File ; <nl> + import java . io . FileInputStream ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . InputStream ; <nl> + import java . lang . annotation . Retention ; <nl> + import java . lang . annotation . RetentionPolicy ; <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + import java . nio . charset . Charset ; <nl> + <nl> + class InputFromAndroid { <nl> + } <nl> diff - - git a / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromSpotify . java b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromSpotify . java <nl> new file mode 100644 <nl> index 0000000 . . 03b2210 <nl> - - - / dev / null <nl> + + + b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromSpotify . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / / non - compiled with javac : contains specially crafted set of imports for testing <nl> + package org . checkstyle . checks . importorder ; <nl> + / * * <nl> + * This test - input is intended to be checked using following configuration : <nl> + * <nl> + * groups = { android , com , net , junit , org , java , javax } <nl> + * option = bottom <nl> + * ordered = true <nl> + * separated = true <nl> + * separatedStaticGroups = true <nl> + * staticGroups = { android , com , net , junit , org , java , javax } <nl> + * <nl> + * This test - input is based on real application code and shouldn ' t be changed . <nl> + * / <nl> + import com . spotify . x . R ; <nl> + <nl> + import javax . inject . Inject ; <nl> + <nl> + import static android . support . test . espresso . action . ViewActions . click ; <nl> + import static android . support . test . espresso . matcher . ViewMatchers . isDisplayed ; <nl> + import static android . support . test . espresso . matcher . ViewMatchers . withContentDescription ; <nl> + import static android . support . test . espresso . matcher . ViewMatchers . withText ; <nl> + <nl> + import static com . spotify . X . o ; <nl> + <nl> + import static org . hamcrest . core . AllOf . allOf ; <nl> + <nl> + class InputFromSpotify { <nl> + } <nl> diff - - git a / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromTwitter . java b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromTwitter . java <nl> new file mode 100644 <nl> index 0000000 . . b7d25b9 <nl> - - - / dev / null <nl> + + + b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromTwitter . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + / / non - compiled with javac : contains specially crafted set of imports for testing <nl> + package org . checkstyle . checks . importorder ; <nl> + / * * <nl> + * This test - input is intended to be checked using following configuration : <nl> + * <nl> + * caseSensitive = true <nl> + * groups = { android , com . twitter , com , junit , net , org , java , javax } <nl> + * option = bottom <nl> + * ordered = true <nl> + * separated = true <nl> + * separatedStaticGroups = true <nl> + * staticGroups = { android , com . twitter , com , junit , net , org , java , javax } <nl> + * <nl> + * This test - input is based on real application code and shouldn ' t be changed . <nl> + * / <nl> + import android . os . SystemClock ; <nl> + import android . support . test . InstrumentationRegistry ; <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> + import android . test . suitebuilder . annotation . LargeTest ; <nl> + <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import static com . twitter . android . utils . EspressoHelpers . goBack ; <nl> + import static com . twitter . android . utils . EspressoHelpers . swipeAwayAndWait ; <nl> + import static com . twitter . android . utils . EspressoHelpers . swipeDown ; <nl> + import static com . twitter . android . utils . EspressoHelpers . tapOnHomeTab ; <nl> + import static com . twitter . android . utils . EspressoHelpers . tapOnTweetWithText ; <nl> + <nl> + import static org . assertj . core . api . Assertions . assertThat ; <nl> + <nl> + class InputFromTwitter { <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index 544bd63 . . 72d58a6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 66 , 6 + 66 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> * < tr > < td > separated < / td > < td > whether type imports groups should be separated by , at least , <nl> * one blank line or comment and aren ' t separated internally <nl> * < / td > < td > Boolean < / td > < td > false < / td > < / tr > <nl> + * < tr > < td > separatedStaticGroups < / td > < td > whether static imports should be separated by , at least , <nl> + * one blank line or comment and aren ' t separated internally <nl> + * < / td > < td > Boolean < / td > < td > false < / td > < / tr > <nl> * < tr > < td > caseSensitive < / td > < td > whether string comparison should be case sensitive or not . <nl> * Case sensitive sorting is in ASCII sort order < / td > < td > Boolean < / td > < td > true < / td > < / tr > <nl> * < tr > < td > staticGroups < / td > < td > list of static import groups ( every group identified either by a <nl> @ @ - 220 , 6 + 223 , 8 @ @ public class ImportOrderCheck <nl> private Pattern [ ] staticGroups = EMPTY _ PATTERN _ ARRAY ; <nl> / * * Require imports in group be separated . * / <nl> private boolean separated ; <nl> + / * * Require static imports in group be separated . * / <nl> + private boolean separatedStaticGroups ; <nl> / * * Require imports in group . * / <nl> private boolean ordered = true ; <nl> / * * Should comparison be case sensitive . * / <nl> @ @ - 235 , 6 + 240 , 13 @ @ public class ImportOrderCheck <nl> private boolean lastImportStatic ; <nl> / * * Whether there was any imports . * / <nl> private boolean beforeFirstImport ; <nl> + / * * Whether static and type import groups should be split apart . <nl> + * When the { @ code option } property is set to { @ code INFLOW } , { @ code BELOW } or { @ code UNDER } , <nl> + * both the type and static imports use the properties { @ code groups } and { @ code separated } . <nl> + * When the { @ code option } property is set to { @ code TOP } or { @ code BOTTOM } , static imports <nl> + * uses the properties { @ code staticGroups } and { @ code separatedStaticGroups } . <nl> + * * / <nl> + private boolean staticImportsApart ; <nl> / * * Whether static imports should be sorted alphabetically or not . * / <nl> private boolean sortStaticImportsAlphabetically ; <nl> / * * Whether to use container ordering ( Eclipse IDE term ) for static imports or not . * / <nl> @ @ - 269 , 7 + 281 , 8 @ @ public class ImportOrderCheck <nl> <nl> / * * <nl> * Sets the list of package groups for static imports and the order they should occur in the <nl> - * file . <nl> + * file . This property has effect only when the property { @ code option } is set to { @ code top } <nl> + * or { @ code bottom } . ) <nl> * <nl> * @ param packageGroups a comma - separated list of package names / prefixes . <nl> * / <nl> @ @ - 291 , 16 + 304 , 28 @ @ public class ImportOrderCheck <nl> <nl> / * * <nl> * Sets whether or not groups of type imports must be separated from one another <nl> - * by at least one blank line . <nl> + * by at least one blank line or comment . <nl> * <nl> * @ param separated <nl> - * whether groups should be separated by one blank line . <nl> + * whether groups should be separated by one blank line or comment . <nl> * / <nl> public void setSeparated ( boolean separated ) { <nl> this . separated = separated ; <nl> } <nl> <nl> / * * <nl> + * Sets whether or not groups of static imports must be separated from one another <nl> + * by at least one blank line or comment . This property has effect only when the property <nl> + * { @ code option } is set to { @ code top } or { @ code bottom } . ) <nl> + * <nl> + * @ param separatedStaticGroups <nl> + * whether groups should be separated by one blank line or comment . <nl> + * / <nl> + public void setSeparatedStaticGroups ( boolean separatedStaticGroups ) { <nl> + this . separatedStaticGroups = separatedStaticGroups ; <nl> + } <nl> + <nl> + / * * <nl> * Sets whether string comparison should be case sensitive or not . <nl> * <nl> * @ param caseSensitive <nl> @ @ - 349 , 6 + 374 , 8 @ @ public class ImportOrderCheck <nl> lastImport = " " ; <nl> lastImportStatic = false ; <nl> beforeFirstImport = true ; <nl> + staticImportsApart = <nl> + option = = ImportOrderOption . TOP | | option = = ImportOrderOption . BOTTOM ; <nl> } <nl> <nl> / / - @ cs [ CyclomaticComplexity ] SWITCH was transformed into IF - ELSE . <nl> @ @ - 368 , 30 + 395 , 14 @ @ public class ImportOrderCheck <nl> isStatic = true ; <nl> } <nl> <nl> - final boolean isStaticAndNotLastImport = isStatic & & ! lastImportStatic ; <nl> - final boolean isLastImportAndNonStatic = lastImportStatic & & ! isStatic ; <nl> - <nl> / / using set of IF instead of SWITCH to analyze Enum options to satisfy coverage . <nl> / / https : / / github . com / checkstyle / checkstyle / issues / 1387 <nl> - if ( option = = ImportOrderOption . TOP ) { <nl> - if ( isLastImportAndNonStatic ) { <nl> - lastGroup = Integer . MIN _ VALUE ; <nl> - lastImport = " " ; <nl> - } <nl> + if ( option = = ImportOrderOption . TOP | | option = = ImportOrderOption . ABOVE ) { <nl> + final boolean isStaticAndNotLastImport = isStatic & & ! lastImportStatic ; <nl> doVisitToken ( ident , isStatic , isStaticAndNotLastImport , line ) ; <nl> } <nl> - else if ( option = = ImportOrderOption . BOTTOM ) { <nl> - if ( isStaticAndNotLastImport ) { <nl> - lastGroup = Integer . MIN _ VALUE ; <nl> - lastImport = " " ; <nl> - } <nl> - doVisitToken ( ident , isStatic , isLastImportAndNonStatic , line ) ; <nl> - } <nl> - else if ( option = = ImportOrderOption . ABOVE ) { <nl> - / / previous non - static but current is static <nl> - doVisitToken ( ident , isStatic , isStaticAndNotLastImport , line ) ; <nl> - } <nl> - else if ( option = = ImportOrderOption . UNDER ) { <nl> + else if ( option = = ImportOrderOption . BOTTOM | | option = = ImportOrderOption . UNDER ) { <nl> + final boolean isLastImportAndNonStatic = lastImportStatic & & ! isStatic ; <nl> doVisitToken ( ident , isStatic , isLastImportAndNonStatic , line ) ; <nl> } <nl> else if ( option = = ImportOrderOption . INFLOW ) { <nl> @ @ - 419 , 12 + 430 , 10 @ @ public class ImportOrderCheck <nl> * / <nl> private void doVisitToken ( FullIdent ident , boolean isStatic , boolean previous , int line ) { <nl> final String name = ident . getText ( ) ; <nl> - final boolean staticImportsIndependent = <nl> - option = = ImportOrderOption . TOP | | option = = ImportOrderOption . BOTTOM ; <nl> - final int groupIdx = getGroupNumber ( isStatic & & staticImportsIndependent , name ) ; <nl> + final int groupIdx = getGroupNumber ( isStatic & & staticImportsApart , name ) ; <nl> <nl> if ( groupIdx > lastGroup ) { <nl> - if ( ! beforeFirstImport & & ! isStatic & & separated & & line - lastImportLine < 2 ) { <nl> + if ( ! beforeFirstImport & & line - lastImportLine < 2 & & needSeparator ( isStatic ) ) { <nl> log ( line , MSG _ SEPARATION , name ) ; <nl> } <nl> } <nl> @ @ - 434 , 7 + 443 , 7 @ @ public class ImportOrderCheck <nl> else { <nl> log ( line , MSG _ ORDERING , name ) ; <nl> } <nl> - if ( isSeparatorInGroup ( groupIdx , line ) ) { <nl> + if ( isSeparatorInGroup ( groupIdx , isStatic , line ) ) { <nl> log ( line , MSG _ SEPARATED _ IN _ GROUP , name ) ; <nl> } <nl> <nl> @ @ - 443 , 14 + 452 , 35 @ @ public class ImportOrderCheck <nl> } <nl> <nl> / * * <nl> + * Checks whether import groups should be separated . <nl> + * @ param isStatic whether the token is static or not . <nl> + * @ return true if imports groups should be separated . <nl> + * / <nl> + private boolean needSeparator ( boolean isStatic ) { <nl> + final boolean typeImportSeparator = ! isStatic & & separated ; <nl> + final boolean staticImportSeparator ; <nl> + if ( staticImportsApart ) { <nl> + staticImportSeparator = isStatic & & separatedStaticGroups ; <nl> + } <nl> + else { <nl> + staticImportSeparator = isStatic & & separated ; <nl> + } <nl> + final boolean separatorBetween = isStatic ! = lastImportStatic <nl> + & & ( separated | | separatedStaticGroups ) & & staticImportsApart ; <nl> + <nl> + return typeImportSeparator | | staticImportSeparator | | separatorBetween ; <nl> + } <nl> + <nl> + / * * <nl> * Checks whether imports group separated internally . <nl> * @ param groupIdx group number . <nl> + * @ param isStatic whether the token is static or not . <nl> * @ param line the line of the current import . <nl> * @ return true if imports group are separated internally . <nl> * / <nl> - private boolean isSeparatorInGroup ( int groupIdx , int line ) { <nl> + private boolean isSeparatorInGroup ( int groupIdx , boolean isStatic , int line ) { <nl> final boolean inSameGroup = groupIdx = = lastGroup ; <nl> - return ( ! separated | | inSameGroup ) & & isSeparatorBeforeImport ( line ) ; <nl> + return ( inSameGroup | | ! needSeparator ( isStatic ) ) & & isSeparatorBeforeImport ( line ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 510 , 8 + 540 , 7 @ @ public class ImportOrderCheck <nl> if ( useContainerOrderingForStatic ) { <nl> result = compareContainerOrder ( lastImport , name , caseSensitive ) > = 0 ; <nl> } <nl> - else if ( option = = ImportOrderOption . TOP <nl> - | | option = = ImportOrderOption . BOTTOM ) { <nl> + else if ( staticImportsApart ) { <nl> result = sortStaticImportsAlphabetically <nl> & & compare ( lastImport , name , caseSensitive ) > = 0 ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> index 73bc867 . . 4c1123a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> @ @ - 514 , 8 + 514 , 7 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> checkConfig . addAttribute ( " separated " , " true " ) ; <nl> checkConfig . addAttribute ( " groups " , " java , org " ) ; <nl> final String [ ] expected = { <nl> - / / Till https : / / github . com / checkstyle / checkstyle / issues / 5279 <nl> - / / " 4 : " + getCheckMessage ( MSG _ SEPARATION , " org . antlr . v4 . runtime . CommonToken . * " ) , <nl> + " 4 : " + getCheckMessage ( MSG _ SEPARATION , " org . antlr . v4 . runtime . CommonToken . * " ) , <nl> " 5 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . CommonToken . * " ) , <nl> " 7 : " + getCheckMessage ( MSG _ ORDERING , " java . util . Set " ) , <nl> } ; <nl> @ @ - 837 , 6 + 836 , 23 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testStaticGroupsBottomSeparated ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " groups " , " android , com , net , junit , org , java , javax " ) ; <nl> + checkConfig . addAttribute ( " staticGroups " , " android , com , net , junit , org , java , javax " ) ; <nl> + checkConfig . addAttribute ( " option " , " bottom " ) ; <nl> + checkConfig . addAttribute ( " ordered " , " true " ) ; <nl> + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " separatedStaticGroups " , " true " ) ; <nl> + checkConfig . addAttribute ( " useContainerOrderingForStatic " , " false " ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , <nl> + getNonCompilablePath ( " InputImportOrderStaticGroupsBottomSeparated . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testStaticGroupsInflow ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> checkConfig . addAttribute ( " groups " , " " ) ; <nl> @ @ - 883 , 6 + 899 , 23 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testStaticGroupsTopSeparated ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " groups " , " android , androidx , java " ) ; <nl> + checkConfig . addAttribute ( " staticGroups " , " android , androidx , java " ) ; <nl> + checkConfig . addAttribute ( " option " , " top " ) ; <nl> + checkConfig . addAttribute ( " ordered " , " true " ) ; <nl> + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; <nl> + checkConfig . addAttribute ( " separated " , " false " ) ; <nl> + checkConfig . addAttribute ( " separatedStaticGroups " , " true " ) ; <nl> + checkConfig . addAttribute ( " useContainerOrderingForStatic " , " false " ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getNonCompilablePath ( " InputImportOrderStaticGroupsTopSeparated . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testStaticGroupsUnordered ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> checkConfig . addAttribute ( " groups " , " org , com , java " ) ; <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsBottomSeparated . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsBottomSeparated . java <nl> new file mode 100644 <nl> index 0000000 . . 8f92596 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsBottomSeparated . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + / / non - compiled with javac : contains specially crafted set of imports for testing <nl> + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; <nl> + / * * <nl> + * This test - input is intended to be checked using following configuration : <nl> + * <nl> + * groups = { android , com , net , junit , org , java , javax } <nl> + * staticGroups = { android , com , net , junit , org , java , javax } <nl> + * option = bottom <nl> + * ordered = true <nl> + * sortStaticImportsAlphabetically = true <nl> + * separated = true <nl> + * separatedStaticGroups = true <nl> + * useContainerOrderingForStatic = false <nl> + * <nl> + * / <nl> + import com . spotify . x . R ; <nl> + <nl> + import javax . inject . Inject ; <nl> + <nl> + import static android . support . test . espresso . action . ViewActions . click ; <nl> + import static android . support . test . espresso . matcher . ViewMatchers . isDisplayed ; <nl> + import static android . support . test . espresso . matcher . ViewMatchers . withContentDescription ; <nl> + import static android . support . test . espresso . matcher . ViewMatchers . withText ; <nl> + <nl> + import static com . spotify . X . o ; <nl> + <nl> + import static org . hamcrest . core . AllOf . allOf ; <nl> + <nl> + public class InputImportOrderStaticGroupsBottomSeparated { <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsTopSeparated . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsTopSeparated . java <nl> new file mode 100644 <nl> index 0000000 . . 2d8f6d3 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsTopSeparated . java <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + / / non - compiled with javac : contains specially crafted set of imports for testing <nl> + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; <nl> + / * * <nl> + * This test - input is intended to be checked using following configuration : <nl> + * <nl> + * groups = { android , androidx , java } <nl> + * staticGroups = { android , androidx , java } <nl> + * option = top <nl> + * ordered = true <nl> + * sortStaticImportsAlphabetically = true <nl> + * separated = false <nl> + * separatedStaticGroups = true <nl> + * useContainerOrderingForStatic = false <nl> + * <nl> + * / <nl> + import static android . app . slice . Slice . HINT _ ACTIONS ; <nl> + import static android . app . slice . Slice . HINT _ ERROR ; <nl> + import static android . app . slice . Slice . HINT _ SUMMARY ; <nl> + import static android . app . slice . Slice . HINT _ TITLE ; <nl> + import static android . app . slice . SliceItem . FORMAT _ TEXT ; <nl> + <nl> + import static androidx . annotation . RestrictTo . Scope . LIBRARY ; <nl> + import static androidx . slice . builders . ListBuilder . ICON _ IMAGE ; <nl> + import static androidx . slice . builders . ListBuilder . INFINITY ; <nl> + import static androidx . slice . builders . ListBuilder . LARGE _ IMAGE ; <nl> + import static androidx . slice . core . SliceHints . SUBTYPE _ MIN ; <nl> + <nl> + import android . app . PendingIntent ; <nl> + import android . net . Uri ; <nl> + import androidx . annotation . ColorInt ; <nl> + import androidx . annotation . NonNull ; <nl> + import androidx . core . graphics . drawable . IconCompat ; <nl> + import androidx . slice . Clock ; <nl> + import androidx . slice . Slice ; <nl> + import androidx . slice . builders . SliceAction ; <nl> + import java . time . Duration ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + public class InputImportOrderStaticGroupsTopSeparated { <nl> + } <nl> diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml <nl> index 17524bf . . 9b90e6e 100644 <nl> - - - a / src / xdocs / config _ imports . xml <nl> + + + b / src / xdocs / config _ imports . xml <nl> @ @ - 1427 , 6 + 1427 , 18 @ @ import java . util . stream . IntStream ; <nl> < td > 3 . 2 < / td > <nl> < / tr > <nl> < tr > <nl> + < td > separatedStaticGroups < / td > <nl> + < td > <nl> + whether static import groups should be separated by , at least , one <nl> + blank line or comment and aren ' t separated internally . <nl> + ( This property has effect only when the property < code > option < / code > <nl> + is is set to < code > top < / code > or < code > bottom < / code > . ) <nl> + < / td > <nl> + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> + < td > false < / td > <nl> + < td > 8 . 12 < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > caseSensitive < / td > <nl> < td > whether string comparison should be case sensitive or not . <nl> Case sensitive sorting is in <nl> @ @ - 1445 , 7 + 1457 , 8 @ @ import java . util . stream . IntStream ; <nl> in forward slashes ( e . g . < code > / regexp / < / code > ) . All static imports , <nl> which does not match any group , falls into an additional group , located at the end . <nl> Thus , the empty list of static groups ( the default value ) means <nl> - one group for all static imports . <nl> + one group for all static imports . ( This property has effect only when <nl> + the property < code > option < / code > is set to < code > top < / code > or < code > bottom < / code > . ) <nl> < / td > <nl> < td > < a href = " property _ types . html # regexp " > Regular Expressions < / a > < / td > <nl> < td > < code > { } < / code > < / td > <nl> diff - - git a / src / xdocs / property _ types . xml b / src / xdocs / property _ types . xml <nl> index 0b9e57b . . e8a4e65 100644 <nl> - - - a / src / xdocs / property _ types . xml <nl> + + + b / src / xdocs / property _ types . xml <nl> @ @ - 485 , 7 + 485 , 10 @ @ <nl> <nl> < tr > <nl> < td > < code > top < / code > < / td > <nl> - < td > All static imports are at the top . For example : <nl> + < td > All static imports are at the top . <nl> + Groups for static import are defined by the property ' staticGroups ' . <nl> + The blank line between groups is driven by the property ' separatedStaticGroups ' . <nl> + For example : <nl> < pre > <nl> import static a . b . C . * ; <nl> import static x . y . Z . * ; <nl> @ @ - 534 , 7 + 537 , 10 @ @ <nl> <nl> < tr > <nl> < td > < code > bottom < / code > < / td > <nl> - < td > All static imports are at the bottom . For example : <nl> + < td > All static imports are at the bottom . <nl> + Groups for static import are defined by the property ' staticGroups ' . <nl> + The blank line between groups is driven by the property ' separatedStaticGroups ' . <nl> + For example : <nl> < pre > <nl> import a . b . D ; <nl> import x . y . Z ;

TEST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 4819206 . . 427d0d4 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 302 , 7 + 302 , 7 @ @ 
 or @ Image = ' FinalLocalVariableCheck ' or @ Image = ' ModifiedControlVariableCheck ' 
 or @ Image = ' ParameterAssignmentCheck ' or @ Image = ' UnnecessaryParenthesesCheck ' 
 or @ Image = ' AbstractClassCouplingCheck ' or @ Image = ' BooleanExpressionComplexityCheck ' 
 - or @ Image = ' ParenPadCheck ' ] / / MethodDeclaration [ @ Name = ' visitToken ' ] 
 + or @ Image = ' ParenPadCheck ' or @ Image = ' IllegalTypeCheck ' ] / / MethodDeclaration [ @ Name = ' visitToken ' ] 
 | / / ClassOrInterfaceDeclaration [ @ Image = ' XdocsJavaDocsTest ' ] 
 / / MethodDeclaration [ @ Name = ' testAllCheckSectionJavaDocs ' ] " / > 
 < / properties > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 index 4de10e9 . . b058a21 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 @ @ - 168 , 7 + 168 , 9 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 public int [ ] getAcceptableTokens ( ) { 
 return new int [ ] { 
 TokenTypes . ANNOTATION _ FIELD _ DEF , 
 + TokenTypes . CLASS _ DEF , 
 TokenTypes . IMPORT , 
 + TokenTypes . INTERFACE _ DEF , 
 TokenTypes . METHOD _ CALL , 
 TokenTypes . METHOD _ DEF , 
 TokenTypes . METHOD _ REF , 
 @ @ - 196 , 6 + 198 , 10 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 switch ( ast . getType ( ) ) { 
 + case TokenTypes . CLASS _ DEF : 
 + case TokenTypes . INTERFACE _ DEF : 
 + visitTypeDef ( ast ) ; 
 + break ; 
 case TokenTypes . METHOD _ CALL : 
 case TokenTypes . METHOD _ REF : 
 visitMethodCallOrRef ( ast ) ; 
 @ @ - 256 , 6 + 262 , 24 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Checks the super type and implemented interfaces of a given type . 
 + * @ param typeDef class or interface for check . 
 + * / 
 + private void visitTypeDef ( DetailAST typeDef ) { 
 + if ( isVerifiable ( typeDef ) ) { 
 + checkTypeParameters ( typeDef ) ; 
 + final DetailAST extendsClause = typeDef . findFirstToken ( TokenTypes . EXTENDS _ CLAUSE ) ; 
 + if ( extendsClause ! = null ) { 
 + checkBaseTypes ( extendsClause ) ; 
 + } 
 + final DetailAST implementsClause = typeDef . findFirstToken ( TokenTypes . IMPLEMENTS _ CLAUSE ) ; 
 + if ( implementsClause ! = null ) { 
 + checkBaseTypes ( implementsClause ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 * Checks return type of a given method . 
 * @ param methodDef method for check . 
 * / 
 @ @ - 348 , 18 + 372 , 36 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 * @ param type node to check . 
 * / 
 private void checkIdent ( DetailAST type ) { 
 - final FullIdent ident = FullIdent . createFullIdentBelow ( type ) ; 
 + final FullIdent ident = FullIdent . createFullIdent ( type ) ; 
 if ( isMatchingClassName ( ident . getText ( ) ) ) { 
 log ( ident . getDetailAst ( ) , MSG _ KEY , ident . getText ( ) ) ; 
 } 
 } 
 
 / * * 
 + * Checks the { @ code extends } or { @ code implements } statement . 
 + * @ param clause DetailAST for either { @ link TokenTypes # EXTENDS _ CLAUSE } or 
 + * { @ link TokenTypes # IMPLEMENTS _ CLAUSE } 
 + * / 
 + private void checkBaseTypes ( DetailAST clause ) { 
 + DetailAST child = clause . getFirstChild ( ) ; 
 + while ( child ! = null ) { 
 + if ( child . getType ( ) = = TokenTypes . IDENT ) { 
 + checkIdent ( child ) ; 
 + } 
 + else if ( child . getType ( ) = = TokenTypes . TYPE _ ARGUMENTS ) { 
 + TokenUtil . forEachChild ( child , TokenTypes . TYPE _ ARGUMENT , this : : checkType ) ; 
 + } 
 + child = child . getNextSibling ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 * Checks the given type , its arguments and parameters . 
 * @ param type node to check . 
 * / 
 private void checkType ( DetailAST type ) { 
 - checkIdent ( type ) ; 
 + checkIdent ( type . getFirstChild ( ) ) ; 
 checkTypeArguments ( type ) ; 
 checkTypeBounds ( type ) ; 
 } 
 @ @ - 386 , 16 + 428 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 private void checkTypeParameters ( final DetailAST node ) { 
 final DetailAST typeParameters = node . findFirstToken ( TokenTypes . TYPE _ PARAMETERS ) ; 
 if ( typeParameters ! = null ) { 
 - final DetailAST typeParameter = 
 - typeParameters . findFirstToken ( TokenTypes . TYPE _ PARAMETER ) ; 
 - checkType ( typeParameter ) ; 
 - DetailAST sibling = typeParameter . getNextSibling ( ) ; 
 - while ( sibling ! = null ) { 
 - if ( sibling . getType ( ) = = TokenTypes . TYPE _ PARAMETER ) { 
 - checkType ( sibling ) ; 
 - } 
 - sibling = sibling . getNextSibling ( ) ; 
 - } 
 + TokenUtil . forEachChild ( typeParameters , TokenTypes . TYPE _ PARAMETER , this : : checkType ) ; 
 } 
 } 
 
 @ @ - 410 , 15 + 443 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 } 
 
 if ( typeArguments ! = null ) { 
 - final DetailAST typeArgument = typeArguments . findFirstToken ( TokenTypes . TYPE _ ARGUMENT ) ; 
 - checkType ( typeArgument ) ; 
 - DetailAST sibling = typeArgument . getNextSibling ( ) ; 
 - while ( sibling ! = null ) { 
 - if ( sibling . getType ( ) = = TokenTypes . TYPE _ ARGUMENT ) { 
 - checkType ( sibling ) ; 
 - } 
 - sibling = sibling . getNextSibling ( ) ; 
 - } 
 + TokenUtil . forEachChild ( typeArguments , TokenTypes . TYPE _ ARGUMENT , this : : checkType ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtil . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtil . java 
 index 3a0c9b0 . . 95724e0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtil . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtil . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . Optional ; 
 import java . util . ResourceBundle ; 
 + import java . util . function . Consumer ; 
 import java . util . function . Predicate ; 
 import java . util . stream . Collectors ; 
 
 @ @ - 226 , 4 + 227 , 19 @ @ public final class TokenUtil { 
 return result ; 
 } 
 
 + / * * 
 + * Performs an action for each child of { @ link DetailAST } root node 
 + * which matches the given token type . 
 + * @ param root root node . 
 + * @ param type token type to match . 
 + * @ param action action to perform on the nodes . 
 + * / 
 + public static void forEachChild ( DetailAST root , int type , Consumer < DetailAST > action ) { 
 + for ( DetailAST ast = root . getFirstChild ( ) ; ast ! = null ; ast = ast . getNextSibling ( ) ) { 
 + if ( ast . getType ( ) = = type ) { 
 + action . accept ( ast ) ; 
 + } 
 + } 
 + } 
 + 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 index 1c28cf4 . . 2bb06a2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 @ @ - 44 , 6 + 44 , 7 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { 
 final DefaultConfiguration checkConfig = createModuleConfig ( IllegalTypeCheck . class ) ; 
 checkConfig . addAttribute ( " validateAbstractClassNames " , " true " ) ; 
 final String [ ] expected = { 
 + " 10 : 38 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 " 27 : 5 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 " 29 : 37 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 " 33 : 12 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 @ @ - 140 , 6 + 141 , 7 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { 
 " List , InputIllegalTypeGregorianCalendar , java . io . File , ArrayList , Boolean " ) ; 
 final String [ ] expected = { 
 " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , 
 + " 14 : 43 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , 
 " 16 : 23 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , 
 " 24 : 9 : " + getCheckMessage ( MSG _ KEY , " List " ) , 
 " 25 : 9 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , 
 @ @ - 199 , 13 + 201 , 35 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { 
 " 32 : 60 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 " 34 : 26 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , 
 " 34 : 30 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 - " 44 : 20 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 - " 57 : 28 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 38 : 26 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , 
 + " 38 : 38 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 47 : 20 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 60 : 28 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputIllegalTypeGenerics . java " ) , expected ) ; 
 } 
 
 @ Test 
 + public void testExtendsImplements ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( IllegalTypeCheck . class ) ; 
 + checkConfig . addAttribute ( " illegalClassNames " , 
 + " Boolean , Foo , Hashtable , Serializable " ) ; 
 + checkConfig . addAttribute ( " memberModifiers " , " LITERAL _ PUBLIC " ) ; 
 + final String [ ] expected = { 
 + " 16 : 17 : " + getCheckMessage ( MSG _ KEY , " Hashtable " ) , 
 + " 17 : 14 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 22 : 23 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 24 : 13 : " + getCheckMessage ( MSG _ KEY , " Serializable " ) , 
 + " 26 : 24 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , 
 + " 27 : 27 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 30 : 32 : " + getCheckMessage ( MSG _ KEY , " Foo " ) , 
 + " 31 : 28 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 32 : 13 : " + getCheckMessage ( MSG _ KEY , " Serializable " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputIllegalTypeExtendsImplements . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testStarImports ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( IllegalTypeCheck . class ) ; 
 checkConfig . addAttribute ( " illegalClassNames " , " List " ) ; 
 @ @ - 283 , 7 + 307 , 7 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { 
 final IllegalTypeCheck check = new IllegalTypeCheck ( ) ; 
 
 final DetailAST classDefAst = new DetailAST ( ) ; 
 - classDefAst . setType ( TokenTypes . CLASS _ DEF ) ; 
 + classDefAst . setType ( TokenTypes . DOT ) ; 
 
 try { 
 check . visitToken ( classDefAst ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilTest . java 
 index 1d7cbf7 . . 827bde1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilTest . java 
 @ @ - 27 , 7 + 27 , 9 @ @ import static org . junit . Assert . fail ; 
 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Modifier ; 
 + import java . util . ArrayList ; 
 import java . util . Arrays ; 
 + import java . util . List ; 
 import java . util . Map ; 
 import java . util . Optional ; 
 import java . util . TreeMap ; 
 @ @ - 277 , 4 + 279 , 25 @ @ public class TokenUtilTest { 
 assertEquals ( " Invalid second sibling " , secondSibling , result . get ( ) ) ; 
 } 
 
 + @ Test 
 + public void testForEachChild ( ) { 
 + final DetailAST astForTest = new DetailAST ( ) ; 
 + final DetailAST child = new DetailAST ( ) ; 
 + final DetailAST firstSibling = new DetailAST ( ) ; 
 + final DetailAST secondSibling = new DetailAST ( ) ; 
 + final DetailAST thirdSibling = new DetailAST ( ) ; 
 + firstSibling . setType ( TokenTypes . DOT ) ; 
 + secondSibling . setType ( TokenTypes . CLASS _ DEF ) ; 
 + thirdSibling . setType ( TokenTypes . IDENT ) ; 
 + secondSibling . setNextSibling ( thirdSibling ) ; 
 + firstSibling . setNextSibling ( secondSibling ) ; 
 + child . setNextSibling ( firstSibling ) ; 
 + astForTest . setFirstChild ( child ) ; 
 + final List < DetailAST > children = new ArrayList < > ( ) ; 
 + TokenUtil . forEachChild ( astForTest , TokenTypes . CLASS _ DEF , children : : add ) ; 
 + 
 + assertEquals ( " Must be one match " , 1 , children . size ( ) ) ; 
 + assertEquals ( " Mismatched child node " , secondSibling , children . get ( 0 ) ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeExtendsImplements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeExtendsImplements . java 
 new file mode 100644 
 index 0000000 . . f78669e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeExtendsImplements . java 
 @ @ - 0 , 0 + 1 , 55 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; 
 + 
 + import java . io . Serializable ; 
 + import java . util . * ; 
 + 
 + / * * 
 + * This test - input is intended to be checked using following configuration : 
 + * 
 + * illegalClassNames = { Boolean , Foo , Hashtable , Serializable } 
 + * memberModifiers = { LITERAL _ PUBLIC } 
 + * 
 + * / 
 + public abstract class InputIllegalTypeExtendsImplements { 
 + 
 + public abstract class Bar 
 + extends Hashtable / / warn 
 + < Boolean , / / warn 
 + Bar > { / / OK 
 + } 
 + 
 + public abstract class Foo < 
 + T extends Boolean > / / warn 
 + implements Cloneable , / / OK 
 + Serializable , / / warn 
 + Comparator , / / OK 
 + Comparable < Foo < / / warn 
 + ? extends Boolean > > { / / warn 
 + } 
 + 
 + public interface Interface < Foo > 
 + extends Comparable < Boolean > , / / warn 
 + Serializable { / / warn 
 + } 
 + 
 + abstract class NonPublicBar 
 + extends Hashtable / / OK 
 + < Boolean , / / OK 
 + Bar > { / / OK 
 + } 
 + 
 + abstract class NonPublicFoo < 
 + T extends Boolean > / / OK 
 + implements Cloneable , / / OK 
 + Serializable , / / OK 
 + Comparator , / / OK 
 + Comparable < Foo < / / OK 
 + ? extends Boolean > > { / / OK 
 + } 
 + 
 + interface NonPublicInterface < Foo > 
 + extends Comparable < Boolean > , / / OK 
 + Serializable { / / OK 
 + } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java 
 index 123c358 . . 80f2221 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGenerics . java 
 @ @ - 41 , 6 + 41 , 9 @ @ public abstract class InputIllegalTypeGenerics { 
 
 class Bounded { 
 
 + public boolean match = new TreeSet < Integer > ( ) . stream ( ) 
 + . allMatch ( new TreeSet < > ( ) : : add ) ; / / OK 
 + 
 public static < Boolean > void foo ( ) { } / / warn 
 
 } 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index d67d09d . . 8f128d0 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 2131 , 6 + 2131 , 10 @ @ class SomeClass 
 subset of tokens 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > 
 ANNOTATION _ FIELD _ DEF < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CLASS _ DEF " > 
 + CLASS _ DEF < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INTERFACE _ DEF " > 
 + INTERFACE _ DEF < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ CALL " > 
 METHOD _ CALL < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > 
 @ @ - 2145 , 6 + 2149 , 10 @ @ class SomeClass 
 < td > 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > 
 ANNOTATION _ FIELD _ DEF < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CLASS _ DEF " > 
 + CLASS _ DEF < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INTERFACE _ DEF " > 
 + INTERFACE _ DEF < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ CALL " > 
 METHOD _ CALL < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " >

NEAREST DIFF:
diff - - git a / . ci / jsoref - spellchecker / whitelist . words b / . ci / jsoref - spellchecker / whitelist . words 
 index 0d36f75 . . 61af023 100644 
 - - - a / . ci / jsoref - spellchecker / whitelist . words 
 + + + b / . ci / jsoref - spellchecker / whitelist . words 
 @ @ - 29 , 6 + 29 , 7 @ @ allclasses 
 alot 
 ambig 
 Amessages 
 + androidx 
 ANNOS 
 annotationlocation 
 annotationonsameline 
 @ @ - 65 , 6 + 66 , 7 @ @ ASF 
 ASingle 
 Aspectj 
 Asrc 
 + assertj 
 ASTNo 
 asttreestringprinter 
 Asun 
 @ @ - 278 , 6 + 280 , 7 @ @ cyclomatic 
 cyclomaticcomplexity 
 cz 
 daaf 
 + dalvik 
 Daniil 
 daniilyar 
 Darguments 
 @ @ - 492 , 6 + 495 , 7 @ @ googleapis 
 googleblog 
 googleecommon 
 googlegroups 
 + googlesource 
 govstrangefolder 
 gplus 
 gradle 
 @ @ - 718 , 6 + 722 , 7 @ @ lexer 
 lgpl 
 lharris 
 LHSOf 
 + libcore 
 liberapay 
 libexec 
 lifecycle 
 @ @ - 950 , 6 + 955 , 7 @ @ parameterassignment 
 parametername 
 parameternumber 
 paramnum 
 + Parcelable 
 parenpad 
 parrt 
 parsetreetablepresentation 
 @ @ - 985 , 6 + 991 , 7 @ @ Postgresql 
 powermock 
 Ppitest 
 prameterless 
 + prebuilts 
 preformatted 
 printf 
 println 
 @ @ - 1127 , 6 + 1134 , 7 @ @ spellchecker 
 spliterator 
 spotbugs 
 spotbugsreports 
 + spotify 
 springframework 
 sqale 
 sqe 
 @ @ - 1159 , 6 + 1167 , 7 @ @ subelements 
 subext 
 subscope 
 sudo 
 + suitebuilder 
 sukhodolsky 
 summaryjavadoc 
 superclasses 
 diff - - git a / config / ant - phase - verify . xml b / config / ant - phase - verify . xml 
 index 47ca639 . . a6e8e82 100644 
 - - - a / config / ant - phase - verify . xml 
 + + + b / config / ant - phase - verify . xml 
 @ @ - 31 , 7 + 31 , 8 @ @ 
 > 
 < fileset dir = " src " 
 includes = " * * / * " 
 - excludes = " it / resources / * * / * , test / resources / * * / * , test / resources - noncompilable / * * / * " / > 
 + excludes = " it / resources / * * / * , it / resources - noncompilable / * * / * , 
 + , test / resources / * * / * , test / resources - noncompilable / * * / * " / > 
 < formatter type = " plain " / > 
 < formatter type = " xml " toFile = " $ { mvn . project . build . directory } / cs _ errors . xml " / > 
 < classpath path = " $ { mvn . runtime _ classpath } " / > 
 diff - - git a / pom . xml b / pom . xml 
 index 0c626fa . . 450a20f 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 589 , 7 + 589 , 8 @ @ 
 < sourceDirectory > $ { project . basedir } / src < / sourceDirectory > 
 < / sourceDirectories > 
 < excludes > 
 - * * / it / resources / * * / * , * * / test / resources / * * / * , * * / test / resources - noncompilable / * * / * 
 + * * / it / resources / * * / * , * * / it / resources - noncompilable / * * / * , 
 + , * * / test / resources / * * / * , * * / test / resources - noncompilable / * * / * 
 < / excludes > 
 < / configuration > 
 < goals > 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 index b41879b . . aeea77c 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 @ @ - 113 , 6 + 113 , 20 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 } 
 
 / * * 
 + * Returns canonical path for the file with the given file name . 
 + * The path is formed base on the non - compilable resources location . 
 + * This implementation uses ' src / test / resources - noncompilable / ' 
 + * as a non - compilable resource location . 
 + * @ param filename file name . 
 + * @ return canonical path for the file with the given file name . 
 + * @ throws IOException if I / O exception occurs while forming the path . 
 + * / 
 + protected final String getNonCompilablePath ( String filename ) throws IOException { 
 + return new File ( " src / it / resources - noncompilable / " + getPackageLocation ( ) + " / " 
 + + filename ) . getCanonicalPath ( ) ; 
 + } 
 + 
 + / * * 
 * Creates { @ link DefaultConfiguration } instance for the given module class . 
 * @ param clazz module class . 
 * @ return { @ link DefaultConfiguration } instance . 
 diff - - git a / src / it / java / org / checkstyle / checks / imports / ImportOrderTest . java b / src / it / java / org / checkstyle / checks / imports / ImportOrderTest . java 
 new file mode 100644 
 index 0000000 . . 189107e 
 - - - / dev / null 
 + + + b / src / it / java / org / checkstyle / checks / imports / ImportOrderTest . java 
 @ @ - 0 , 0 + 1 , 88 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2018 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package org . checkstyle . checks . imports ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . google . checkstyle . test . base . AbstractModuleTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 + 
 + public class ImportOrderTest extends AbstractModuleTestSupport { 
 + 
 + @ Override 
 + protected String getPackageLocation ( ) { 
 + return " org / checkstyle / checks / imports / importorder " ; 
 + } 
 + 
 + @ Test 
 + public void testAndroid ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " groups " , 
 + " android , androidx , com . android , dalvik , com , gov , junit , libcore , net , org , java , javax " ) ; 
 + checkConfig . addAttribute ( " option " , " top " ) ; 
 + checkConfig . addAttribute ( " ordered " , " true " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " separatedStaticGroups " , " true " ) ; 
 + checkConfig . addAttribute ( " staticGroups " , 
 + " android , androidx , com . android , dalvik , com , gov , junit , libcore , net , org , java , javax " ) ; 
 + 
 + final String filePath = getNonCompilablePath ( " InputFromAndroid . java " ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void testSpotify ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " groups " , " android , com , net , junit , org , java , javax " ) ; 
 + checkConfig . addAttribute ( " option " , " bottom " ) ; 
 + checkConfig . addAttribute ( " ordered " , " true " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " separatedStaticGroups " , " true " ) ; 
 + checkConfig . addAttribute ( " staticGroups " , " android , com , net , junit , org , java , javax " ) ; 
 + 
 + final String filePath = getNonCompilablePath ( " InputFromSpotify . java " ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void testTwitter ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " caseSensitive " , " true " ) ; 
 + checkConfig . addAttribute ( " groups " , " android , com . twitter , com , junit , net , org , java , javax " ) ; 
 + checkConfig . addAttribute ( " option " , " bottom " ) ; 
 + checkConfig . addAttribute ( " ordered " , " true " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " separatedStaticGroups " , " true " ) ; 
 + checkConfig . addAttribute ( " staticGroups " , 
 + " android , com . twitter , com , junit , net , org , java , javax " ) ; 
 + 
 + final String filePath = getNonCompilablePath ( " InputFromTwitter . java " ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromAndroid . java b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromAndroid . java 
 new file mode 100644 
 index 0000000 . . 43bd37d 
 - - - / dev / null 
 + + + b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromAndroid . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + / / non - compiled with javac : contains specially crafted set of imports for testing 
 + package org . checkstyle . checks . importorder ; 
 + / * * 
 + * This test - input is intended to be checked using following configuration : 
 + * 
 + * groups = { android , androidx , com . android , dalvik , com , gov , junit , libcore , net , org , java , javax } 
 + * option = top 
 + * ordered = true 
 + * separated = true 
 + * separatedStaticGroups = true 
 + * staticGroups = { android , androidx , com . android , dalvik , com , gov , junit , libcore , net , org , java , javax } 
 + * 
 + * This test - input is based on real application code and shouldn ' t be changed . 
 + * @ see https : / / android . googlesource . com / platform / prebuilts / checkstyle / + / master / default - treewalker - checks . xml 
 + * / 
 + import static android . graphics . drawable . Icon . TYPE _ ADAPTIVE _ BITMAP ; 
 + import static android . graphics . drawable . Icon . TYPE _ BITMAP ; 
 + import static android . graphics . drawable . Icon . TYPE _ DATA ; 
 + import static android . graphics . drawable . Icon . TYPE _ RESOURCE ; 
 + import static android . graphics . drawable . Icon . TYPE _ URI ; 
 + 
 + import static androidx . annotation . RestrictTo . Scope . LIBRARY ; 
 + import static androidx . annotation . RestrictTo . Scope . LIBRARY _ GROUP ; 
 + 
 + import android . app . ActivityManager ; 
 + import android . content . ContentResolver ; 
 + import android . content . Context ; 
 + import android . content . Intent ; 
 + import android . content . pm . ApplicationInfo ; 
 + import android . graphics . Shader ; 
 + import android . graphics . drawable . BitmapDrawable ; 
 + import android . os . Parcelable ; 
 + import android . text . TextUtils ; 
 + import android . util . Log ; 
 + 
 + import androidx . annotation . ColorInt ; 
 + import androidx . annotation . DrawableRes ; 
 + import androidx . annotation . IdRes ; 
 + import androidx . annotation . IntDef ; 
 + import androidx . annotation . RestrictTo ; 
 + import androidx . annotation . VisibleForTesting ; 
 + import androidx . core . content . ContextCompat ; 
 + import androidx . core . content . res . ResourcesCompat ; 
 + import androidx . core . util . Preconditions ; 
 + 
 + import java . io . ByteArrayOutputStream ; 
 + import java . io . File ; 
 + import java . io . FileInputStream ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . InputStream ; 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . RetentionPolicy ; 
 + import java . lang . reflect . InvocationTargetException ; 
 + import java . nio . charset . Charset ; 
 + 
 + class InputFromAndroid { 
 + } 
 diff - - git a / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromSpotify . java b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromSpotify . java 
 new file mode 100644 
 index 0000000 . . 03b2210 
 - - - / dev / null 
 + + + b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromSpotify . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / / non - compiled with javac : contains specially crafted set of imports for testing 
 + package org . checkstyle . checks . importorder ; 
 + / * * 
 + * This test - input is intended to be checked using following configuration : 
 + * 
 + * groups = { android , com , net , junit , org , java , javax } 
 + * option = bottom 
 + * ordered = true 
 + * separated = true 
 + * separatedStaticGroups = true 
 + * staticGroups = { android , com , net , junit , org , java , javax } 
 + * 
 + * This test - input is based on real application code and shouldn ' t be changed . 
 + * / 
 + import com . spotify . x . R ; 
 + 
 + import javax . inject . Inject ; 
 + 
 + import static android . support . test . espresso . action . ViewActions . click ; 
 + import static android . support . test . espresso . matcher . ViewMatchers . isDisplayed ; 
 + import static android . support . test . espresso . matcher . ViewMatchers . withContentDescription ; 
 + import static android . support . test . espresso . matcher . ViewMatchers . withText ; 
 + 
 + import static com . spotify . X . o ; 
 + 
 + import static org . hamcrest . core . AllOf . allOf ; 
 + 
 + class InputFromSpotify { 
 + } 
 diff - - git a / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromTwitter . java b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromTwitter . java 
 new file mode 100644 
 index 0000000 . . b7d25b9 
 - - - / dev / null 
 + + + b / src / it / resources - noncompilable / org / checkstyle / checks / imports / importorder / InputFromTwitter . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + / / non - compiled with javac : contains specially crafted set of imports for testing 
 + package org . checkstyle . checks . importorder ; 
 + / * * 
 + * This test - input is intended to be checked using following configuration : 
 + * 
 + * caseSensitive = true 
 + * groups = { android , com . twitter , com , junit , net , org , java , javax } 
 + * option = bottom 
 + * ordered = true 
 + * separated = true 
 + * separatedStaticGroups = true 
 + * staticGroups = { android , com . twitter , com , junit , net , org , java , javax } 
 + * 
 + * This test - input is based on real application code and shouldn ' t be changed . 
 + * / 
 + import android . os . SystemClock ; 
 + import android . support . test . InstrumentationRegistry ; 
 + import android . support . test . runner . AndroidJUnit4 ; 
 + import android . test . suitebuilder . annotation . LargeTest ; 
 + 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import static com . twitter . android . utils . EspressoHelpers . goBack ; 
 + import static com . twitter . android . utils . EspressoHelpers . swipeAwayAndWait ; 
 + import static com . twitter . android . utils . EspressoHelpers . swipeDown ; 
 + import static com . twitter . android . utils . EspressoHelpers . tapOnHomeTab ; 
 + import static com . twitter . android . utils . EspressoHelpers . tapOnTweetWithText ; 
 + 
 + import static org . assertj . core . api . Assertions . assertThat ; 
 + 
 + class InputFromTwitter { 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index 544bd63 . . 72d58a6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 66 , 6 + 66 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 * < tr > < td > separated < / td > < td > whether type imports groups should be separated by , at least , 
 * one blank line or comment and aren ' t separated internally 
 * < / td > < td > Boolean < / td > < td > false < / td > < / tr > 
 + * < tr > < td > separatedStaticGroups < / td > < td > whether static imports should be separated by , at least , 
 + * one blank line or comment and aren ' t separated internally 
 + * < / td > < td > Boolean < / td > < td > false < / td > < / tr > 
 * < tr > < td > caseSensitive < / td > < td > whether string comparison should be case sensitive or not . 
 * Case sensitive sorting is in ASCII sort order < / td > < td > Boolean < / td > < td > true < / td > < / tr > 
 * < tr > < td > staticGroups < / td > < td > list of static import groups ( every group identified either by a 
 @ @ - 220 , 6 + 223 , 8 @ @ public class ImportOrderCheck 
 private Pattern [ ] staticGroups = EMPTY _ PATTERN _ ARRAY ; 
 / * * Require imports in group be separated . * / 
 private boolean separated ; 
 + / * * Require static imports in group be separated . * / 
 + private boolean separatedStaticGroups ; 
 / * * Require imports in group . * / 
 private boolean ordered = true ; 
 / * * Should comparison be case sensitive . * / 
 @ @ - 235 , 6 + 240 , 13 @ @ public class ImportOrderCheck 
 private boolean lastImportStatic ; 
 / * * Whether there was any imports . * / 
 private boolean beforeFirstImport ; 
 + / * * Whether static and type import groups should be split apart . 
 + * When the { @ code option } property is set to { @ code INFLOW } , { @ code BELOW } or { @ code UNDER } , 
 + * both the type and static imports use the properties { @ code groups } and { @ code separated } . 
 + * When the { @ code option } property is set to { @ code TOP } or { @ code BOTTOM } , static imports 
 + * uses the properties { @ code staticGroups } and { @ code separatedStaticGroups } . 
 + * * / 
 + private boolean staticImportsApart ; 
 / * * Whether static imports should be sorted alphabetically or not . * / 
 private boolean sortStaticImportsAlphabetically ; 
 / * * Whether to use container ordering ( Eclipse IDE term ) for static imports or not . * / 
 @ @ - 269 , 7 + 281 , 8 @ @ public class ImportOrderCheck 
 
 / * * 
 * Sets the list of package groups for static imports and the order they should occur in the 
 - * file . 
 + * file . This property has effect only when the property { @ code option } is set to { @ code top } 
 + * or { @ code bottom } . ) 
 * 
 * @ param packageGroups a comma - separated list of package names / prefixes . 
 * / 
 @ @ - 291 , 16 + 304 , 28 @ @ public class ImportOrderCheck 
 
 / * * 
 * Sets whether or not groups of type imports must be separated from one another 
 - * by at least one blank line . 
 + * by at least one blank line or comment . 
 * 
 * @ param separated 
 - * whether groups should be separated by one blank line . 
 + * whether groups should be separated by one blank line or comment . 
 * / 
 public void setSeparated ( boolean separated ) { 
 this . separated = separated ; 
 } 
 
 / * * 
 + * Sets whether or not groups of static imports must be separated from one another 
 + * by at least one blank line or comment . This property has effect only when the property 
 + * { @ code option } is set to { @ code top } or { @ code bottom } . ) 
 + * 
 + * @ param separatedStaticGroups 
 + * whether groups should be separated by one blank line or comment . 
 + * / 
 + public void setSeparatedStaticGroups ( boolean separatedStaticGroups ) { 
 + this . separatedStaticGroups = separatedStaticGroups ; 
 + } 
 + 
 + / * * 
 * Sets whether string comparison should be case sensitive or not . 
 * 
 * @ param caseSensitive 
 @ @ - 349 , 6 + 374 , 8 @ @ public class ImportOrderCheck 
 lastImport = " " ; 
 lastImportStatic = false ; 
 beforeFirstImport = true ; 
 + staticImportsApart = 
 + option = = ImportOrderOption . TOP | | option = = ImportOrderOption . BOTTOM ; 
 } 
 
 / / - @ cs [ CyclomaticComplexity ] SWITCH was transformed into IF - ELSE . 
 @ @ - 368 , 30 + 395 , 14 @ @ public class ImportOrderCheck 
 isStatic = true ; 
 } 
 
 - final boolean isStaticAndNotLastImport = isStatic & & ! lastImportStatic ; 
 - final boolean isLastImportAndNonStatic = lastImportStatic & & ! isStatic ; 
 - 
 / / using set of IF instead of SWITCH to analyze Enum options to satisfy coverage . 
 / / https : / / github . com / checkstyle / checkstyle / issues / 1387 
 - if ( option = = ImportOrderOption . TOP ) { 
 - if ( isLastImportAndNonStatic ) { 
 - lastGroup = Integer . MIN _ VALUE ; 
 - lastImport = " " ; 
 - } 
 + if ( option = = ImportOrderOption . TOP | | option = = ImportOrderOption . ABOVE ) { 
 + final boolean isStaticAndNotLastImport = isStatic & & ! lastImportStatic ; 
 doVisitToken ( ident , isStatic , isStaticAndNotLastImport , line ) ; 
 } 
 - else if ( option = = ImportOrderOption . BOTTOM ) { 
 - if ( isStaticAndNotLastImport ) { 
 - lastGroup = Integer . MIN _ VALUE ; 
 - lastImport = " " ; 
 - } 
 - doVisitToken ( ident , isStatic , isLastImportAndNonStatic , line ) ; 
 - } 
 - else if ( option = = ImportOrderOption . ABOVE ) { 
 - / / previous non - static but current is static 
 - doVisitToken ( ident , isStatic , isStaticAndNotLastImport , line ) ; 
 - } 
 - else if ( option = = ImportOrderOption . UNDER ) { 
 + else if ( option = = ImportOrderOption . BOTTOM | | option = = ImportOrderOption . UNDER ) { 
 + final boolean isLastImportAndNonStatic = lastImportStatic & & ! isStatic ; 
 doVisitToken ( ident , isStatic , isLastImportAndNonStatic , line ) ; 
 } 
 else if ( option = = ImportOrderOption . INFLOW ) { 
 @ @ - 419 , 12 + 430 , 10 @ @ public class ImportOrderCheck 
 * / 
 private void doVisitToken ( FullIdent ident , boolean isStatic , boolean previous , int line ) { 
 final String name = ident . getText ( ) ; 
 - final boolean staticImportsIndependent = 
 - option = = ImportOrderOption . TOP | | option = = ImportOrderOption . BOTTOM ; 
 - final int groupIdx = getGroupNumber ( isStatic & & staticImportsIndependent , name ) ; 
 + final int groupIdx = getGroupNumber ( isStatic & & staticImportsApart , name ) ; 
 
 if ( groupIdx > lastGroup ) { 
 - if ( ! beforeFirstImport & & ! isStatic & & separated & & line - lastImportLine < 2 ) { 
 + if ( ! beforeFirstImport & & line - lastImportLine < 2 & & needSeparator ( isStatic ) ) { 
 log ( line , MSG _ SEPARATION , name ) ; 
 } 
 } 
 @ @ - 434 , 7 + 443 , 7 @ @ public class ImportOrderCheck 
 else { 
 log ( line , MSG _ ORDERING , name ) ; 
 } 
 - if ( isSeparatorInGroup ( groupIdx , line ) ) { 
 + if ( isSeparatorInGroup ( groupIdx , isStatic , line ) ) { 
 log ( line , MSG _ SEPARATED _ IN _ GROUP , name ) ; 
 } 
 
 @ @ - 443 , 14 + 452 , 35 @ @ public class ImportOrderCheck 
 } 
 
 / * * 
 + * Checks whether import groups should be separated . 
 + * @ param isStatic whether the token is static or not . 
 + * @ return true if imports groups should be separated . 
 + * / 
 + private boolean needSeparator ( boolean isStatic ) { 
 + final boolean typeImportSeparator = ! isStatic & & separated ; 
 + final boolean staticImportSeparator ; 
 + if ( staticImportsApart ) { 
 + staticImportSeparator = isStatic & & separatedStaticGroups ; 
 + } 
 + else { 
 + staticImportSeparator = isStatic & & separated ; 
 + } 
 + final boolean separatorBetween = isStatic ! = lastImportStatic 
 + & & ( separated | | separatedStaticGroups ) & & staticImportsApart ; 
 + 
 + return typeImportSeparator | | staticImportSeparator | | separatorBetween ; 
 + } 
 + 
 + / * * 
 * Checks whether imports group separated internally . 
 * @ param groupIdx group number . 
 + * @ param isStatic whether the token is static or not . 
 * @ param line the line of the current import . 
 * @ return true if imports group are separated internally . 
 * / 
 - private boolean isSeparatorInGroup ( int groupIdx , int line ) { 
 + private boolean isSeparatorInGroup ( int groupIdx , boolean isStatic , int line ) { 
 final boolean inSameGroup = groupIdx = = lastGroup ; 
 - return ( ! separated | | inSameGroup ) & & isSeparatorBeforeImport ( line ) ; 
 + return ( inSameGroup | | ! needSeparator ( isStatic ) ) & & isSeparatorBeforeImport ( line ) ; 
 } 
 
 / * * 
 @ @ - 510 , 8 + 540 , 7 @ @ public class ImportOrderCheck 
 if ( useContainerOrderingForStatic ) { 
 result = compareContainerOrder ( lastImport , name , caseSensitive ) > = 0 ; 
 } 
 - else if ( option = = ImportOrderOption . TOP 
 - | | option = = ImportOrderOption . BOTTOM ) { 
 + else if ( staticImportsApart ) { 
 result = sortStaticImportsAlphabetically 
 & & compare ( lastImport , name , caseSensitive ) > = 0 ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 index 73bc867 . . 4c1123a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 @ @ - 514 , 8 + 514 , 7 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 checkConfig . addAttribute ( " separated " , " true " ) ; 
 checkConfig . addAttribute ( " groups " , " java , org " ) ; 
 final String [ ] expected = { 
 - / / Till https : / / github . com / checkstyle / checkstyle / issues / 5279 
 - / / " 4 : " + getCheckMessage ( MSG _ SEPARATION , " org . antlr . v4 . runtime . CommonToken . * " ) , 
 + " 4 : " + getCheckMessage ( MSG _ SEPARATION , " org . antlr . v4 . runtime . CommonToken . * " ) , 
 " 5 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . CommonToken . * " ) , 
 " 7 : " + getCheckMessage ( MSG _ ORDERING , " java . util . Set " ) , 
 } ; 
 @ @ - 837 , 6 + 836 , 23 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testStaticGroupsBottomSeparated ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " groups " , " android , com , net , junit , org , java , javax " ) ; 
 + checkConfig . addAttribute ( " staticGroups " , " android , com , net , junit , org , java , javax " ) ; 
 + checkConfig . addAttribute ( " option " , " bottom " ) ; 
 + checkConfig . addAttribute ( " ordered " , " true " ) ; 
 + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " separatedStaticGroups " , " true " ) ; 
 + checkConfig . addAttribute ( " useContainerOrderingForStatic " , " false " ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , 
 + getNonCompilablePath ( " InputImportOrderStaticGroupsBottomSeparated . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testStaticGroupsInflow ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 checkConfig . addAttribute ( " groups " , " " ) ; 
 @ @ - 883 , 6 + 899 , 23 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testStaticGroupsTopSeparated ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " groups " , " android , androidx , java " ) ; 
 + checkConfig . addAttribute ( " staticGroups " , " android , androidx , java " ) ; 
 + checkConfig . addAttribute ( " option " , " top " ) ; 
 + checkConfig . addAttribute ( " ordered " , " true " ) ; 
 + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; 
 + checkConfig . addAttribute ( " separated " , " false " ) ; 
 + checkConfig . addAttribute ( " separatedStaticGroups " , " true " ) ; 
 + checkConfig . addAttribute ( " useContainerOrderingForStatic " , " false " ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getNonCompilablePath ( " InputImportOrderStaticGroupsTopSeparated . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testStaticGroupsUnordered ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 checkConfig . addAttribute ( " groups " , " org , com , java " ) ; 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsBottomSeparated . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsBottomSeparated . java 
 new file mode 100644 
 index 0000000 . . 8f92596 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsBottomSeparated . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + / / non - compiled with javac : contains specially crafted set of imports for testing 
 + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; 
 + / * * 
 + * This test - input is intended to be checked using following configuration : 
 + * 
 + * groups = { android , com , net , junit , org , java , javax } 
 + * staticGroups = { android , com , net , junit , org , java , javax } 
 + * option = bottom 
 + * ordered = true 
 + * sortStaticImportsAlphabetically = true 
 + * separated = true 
 + * separatedStaticGroups = true 
 + * useContainerOrderingForStatic = false 
 + * 
 + * / 
 + import com . spotify . x . R ; 
 + 
 + import javax . inject . Inject ; 
 + 
 + import static android . support . test . espresso . action . ViewActions . click ; 
 + import static android . support . test . espresso . matcher . ViewMatchers . isDisplayed ; 
 + import static android . support . test . espresso . matcher . ViewMatchers . withContentDescription ; 
 + import static android . support . test . espresso . matcher . ViewMatchers . withText ; 
 + 
 + import static com . spotify . X . o ; 
 + 
 + import static org . hamcrest . core . AllOf . allOf ; 
 + 
 + public class InputImportOrderStaticGroupsBottomSeparated { 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsTopSeparated . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsTopSeparated . java 
 new file mode 100644 
 index 0000000 . . 2d8f6d3 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupsTopSeparated . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + / / non - compiled with javac : contains specially crafted set of imports for testing 
 + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; 
 + / * * 
 + * This test - input is intended to be checked using following configuration : 
 + * 
 + * groups = { android , androidx , java } 
 + * staticGroups = { android , androidx , java } 
 + * option = top 
 + * ordered = true 
 + * sortStaticImportsAlphabetically = true 
 + * separated = false 
 + * separatedStaticGroups = true 
 + * useContainerOrderingForStatic = false 
 + * 
 + * / 
 + import static android . app . slice . Slice . HINT _ ACTIONS ; 
 + import static android . app . slice . Slice . HINT _ ERROR ; 
 + import static android . app . slice . Slice . HINT _ SUMMARY ; 
 + import static android . app . slice . Slice . HINT _ TITLE ; 
 + import static android . app . slice . SliceItem . FORMAT _ TEXT ; 
 + 
 + import static androidx . annotation . RestrictTo . Scope . LIBRARY ; 
 + import static androidx . slice . builders . ListBuilder . ICON _ IMAGE ; 
 + import static androidx . slice . builders . ListBuilder . INFINITY ; 
 + import static androidx . slice . builders . ListBuilder . LARGE _ IMAGE ; 
 + import static androidx . slice . core . SliceHints . SUBTYPE _ MIN ; 
 + 
 + import android . app . PendingIntent ; 
 + import android . net . Uri ; 
 + import androidx . annotation . ColorInt ; 
 + import androidx . annotation . NonNull ; 
 + import androidx . core . graphics . drawable . IconCompat ; 
 + import androidx . slice . Clock ; 
 + import androidx . slice . Slice ; 
 + import androidx . slice . builders . SliceAction ; 
 + import java . time . Duration ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + public class InputImportOrderStaticGroupsTopSeparated { 
 + } 
 diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml 
 index 17524bf . . 9b90e6e 100644 
 - - - a / src / xdocs / config _ imports . xml 
 + + + b / src / xdocs / config _ imports . xml 
 @ @ - 1427 , 6 + 1427 , 18 @ @ import java . util . stream . IntStream ; 
 < td > 3 . 2 < / td > 
 < / tr > 
 < tr > 
 + < td > separatedStaticGroups < / td > 
 + < td > 
 + whether static import groups should be separated by , at least , one 
 + blank line or comment and aren ' t separated internally . 
 + ( This property has effect only when the property < code > option < / code > 
 + is is set to < code > top < / code > or < code > bottom < / code > . ) 
 + < / td > 
 + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 + < td > false < / td > 
 + < td > 8 . 12 < / td > 
 + < / tr > 
 + < tr > 
 < td > caseSensitive < / td > 
 < td > whether string comparison should be case sensitive or not . 
 Case sensitive sorting is in 
 @ @ - 1445 , 7 + 1457 , 8 @ @ import java . util . stream . IntStream ; 
 in forward slashes ( e . g . < code > / regexp / < / code > ) . All static imports , 
 which does not match any group , falls into an additional group , located at the end . 
 Thus , the empty list of static groups ( the default value ) means 
 - one group for all static imports . 
 + one group for all static imports . ( This property has effect only when 
 + the property < code > option < / code > is set to < code > top < / code > or < code > bottom < / code > . ) 
 < / td > 
 < td > < a href = " property _ types . html # regexp " > Regular Expressions < / a > < / td > 
 < td > < code > { } < / code > < / td > 
 diff - - git a / src / xdocs / property _ types . xml b / src / xdocs / property _ types . xml 
 index 0b9e57b . . e8a4e65 100644 
 - - - a / src / xdocs / property _ types . xml 
 + + + b / src / xdocs / property _ types . xml 
 @ @ - 485 , 7 + 485 , 10 @ @ 
 
 < tr > 
 < td > < code > top < / code > < / td > 
 - < td > All static imports are at the top . For example : 
 + < td > All static imports are at the top . 
 + Groups for static import are defined by the property ' staticGroups ' . 
 + The blank line between groups is driven by the property ' separatedStaticGroups ' . 
 + For example : 
 < pre > 
 import static a . b . C . * ; 
 import static x . y . Z . * ; 
 @ @ - 534 , 7 + 537 , 10 @ @ 
 
 < tr > 
 < td > < code > bottom < / code > < / td > 
 - < td > All static imports are at the bottom . For example : 
 + < td > All static imports are at the bottom . 
 + Groups for static import are defined by the property ' staticGroups ' . 
 + The blank line between groups is driven by the property ' separatedStaticGroups ' . 
 + For example : 
 < pre > 
 import a . b . D ; 
 import x . y . Z ;
