BLEU SCORE: 0.2925637512788283

TEST MSG: Issue # 410 : Wiki page
GENERATED MSG: Issue # 410 : Wiki - page . Some more info .

TEST DIFF (one line): diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm <nl> index 9b0ac35 . . e73a871 100644 <nl> - - - a / src / xdocs / writingjavadocchecks . xml . vm <nl> + + + b / src / xdocs / writingjavadocchecks . xml . vm <nl> @ @ - 33 , 10 + 33 , 11 @ @ <nl> <nl> < section name = " Overview " > <nl> < p > <nl> - To start implementing your own Check create new class and extend < a href = ' http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . html ' > AbstractJavadocCheck < / a > . It has two abstract methods : <nl> + To start implementing your own Check create new class and extend < a href = ' http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . html ' > AbstractJavadocCheck < / a > . It has two abstract methods you should implement : <nl> < / p > <nl> < ul > <nl> - < li > getDefaultJavadocTokens ( ) - return array of token types that your new Check requires to process ( see " Token Types " section ) < / li > <nl> + < li > getDefaultJavadocTokens ( ) - return int array of token types your Check is going to process . The array should contain int constants from JavadocTokenTypes class . <nl> + There is also TokenTypes class in Checkstyle . Make sure you use JavadocTokenTypes class in your Check , because the second one is used to describe standard Java DetailAST token type . < / li > <nl> < li > visitJavadocToken ( DetailNode ) - it ' s the place you should put tree nodes proccessing . The argument is Javadoc tree node of type you described <nl> before in getDefaultJavadocTokens ( ) method . < / li > <nl> < / ul > <nl> @ @ - 172 , 7 + 173 , 9 @ @ JAVADOC - > * My < b > class < / b > . \ r \ n * @ see AbstractClass < EOF > [ 0 : 0 ] <nl> ] ] > < / source > <nl> < / section > <nl> <nl> - < section name = " Token types " > <nl> + < section name = " Access Java AST from Javadoc Check " > <nl> + As you alreasy know Javadoc parse tree is result of parsing block comment . There is a method to get the original block comment . <nl> + You may need this block comment to check its position or something else in main DetailAST tree . For example , to write a JavadocCheck that verifies @ param tags in Javadoc comment of a method definition , you also need all method ' s parameter names . To get method definition AST you should access main DetailAST tree throuth block comment AST . For this purpose use < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . html # getBlockCommentAst - - " > getBlockCommentAst ( ) < / a > method that returns DetailAST node . <nl> < / section > <nl> <nl> < section name = " HTML Code In Javadoc Comments " > <nl> @ @ - 267 , 16 + 270 , 13 @ @ JAVADOC - > < p > First < / p > \ r \ n < p > Second < / p > < EOF > [ 0 : 0 ] <nl> ] ] > < / source > <nl> < / section > <nl> <nl> - <nl> < section name = " Checkstyle SDK GUI " > <nl> - < / section > <nl> - <nl> - < section name = " Access Java AST from Javadoc Check " > <nl> + Not implemented yet . See < a href = " https : / / github . com / checkstyle / checkstyle / issues / 408 " > Github Issue # 408 < / a > . <nl> < / section > <nl> <nl> < section name = " Integrating new Javadoc Check " > <nl> + Javadoc Checks as well as regular Checks extend < a href = " http : / / checkstyle . sourceforge . net / apidocs / index . html " > AbstractCheck < / a > class . So integrating new Javadoc Check is similar to < a href = " writingchecks . html # Integrate _ your _ Check " > integrating other Checks < / a > . <nl> < / section > <nl> <nl> < / body > <nl> < / document > <nl> -
NEAREST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 3354135 . . 47f5a84 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 20 , 7 + 20 , 7 @ @ <nl> < ! - - Test to reproduce error catching in Checker and satisfy coverage rate . - - > <nl> < suppress checks = " IllegalCatch " <nl> files = " CheckerTest . java " <nl> - lines = " 535 " / > <nl> + lines = " 569 " / > <nl> <nl> < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > <nl> < suppress checks = " AbbreviationAsWordInName " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index a560082 . . 1f32b76 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 299 , 12 + 299 , 12 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> for ( final File file : files ) { <nl> try { <nl> final String fileName = file . getAbsolutePath ( ) ; <nl> - fireFileStarted ( fileName ) ; <nl> final long timestamp = file . lastModified ( ) ; <nl> if ( cache ! = null & & cache . isInCache ( fileName , timestamp ) <nl> | | ! CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { <nl> continue ; <nl> } <nl> + fireFileStarted ( fileName ) ; <nl> final SortedSet < LocalizedMessage > fileMessages = processFile ( file ) ; <nl> fireErrors ( fileName , fileMessages ) ; <nl> fireFileFinished ( fileName ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 8039eb0 . . 645d0da 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 217 , 6 + 217 , 9 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( checkerConfig ) ; <nl> <nl> + final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; <nl> + checker . addListener ( auditAdapter ) ; <nl> + <nl> final List < File > files = new ArrayList < > ( ) ; <nl> final File file = new File ( " file . pdf " ) ; <nl> files . add ( file ) ; <nl> @ @ - 228 , 7 + 231 , 38 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> final int counter = checker . process ( files ) ; <nl> <nl> / / comparing to 1 as there is only one legal file in input <nl> - assertEquals ( 1 , counter ) ; <nl> + final int numLegalFiles = 1 ; <nl> + assertEquals ( numLegalFiles , counter ) ; <nl> + assertEquals ( numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; <nl> + assertEquals ( numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIgnoredFileExtensions ( ) throws Exception { <nl> + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; <nl> + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + <nl> + final Checker checker = new Checker ( ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . configure ( checkerConfig ) ; <nl> + <nl> + final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; <nl> + checker . addListener ( auditAdapter ) ; <nl> + <nl> + final List < File > allIgnoredFiles = new ArrayList < > ( ) ; <nl> + final File ignoredFile = new File ( " file . pdf " ) ; <nl> + allIgnoredFiles . add ( ignoredFile ) ; <nl> + final String [ ] fileExtensions = { " java " , " xml " , " properties " } ; <nl> + checker . setFileExtensions ( fileExtensions ) ; <nl> + checker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + final int counter = checker . process ( allIgnoredFiles ) ; <nl> + <nl> + / / comparing to 0 as there is no legal file in input <nl> + final int numLegalFiles = 0 ; <nl> + assertEquals ( numLegalFiles , counter ) ; <nl> + assertEquals ( numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; <nl> + assertEquals ( numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " deprecation " ) <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DebugAuditAdapter . java b / src / test / java / com / puppycrawl / tools / checkstyle / DebugAuditAdapter . java <nl> index 982308f . . 3efb300 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DebugAuditAdapter . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DebugAuditAdapter . java <nl> @ @ - 23 , 9 + 23 , 23 @ @ import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> <nl> class DebugAuditAdapter implements AuditListener { <nl> - / * * Keeps track of the number of errors . * / <nl> + / * * Keeps track whether this { @ code AuditListener } was called . * / <nl> private boolean called ; <nl> <nl> + / * * Keeps track of the number of files started . * / <nl> + private int numFilesStarted ; <nl> + <nl> + / * * Keeps track of the number of files finished . * / <nl> + private int numFilesFinished ; <nl> + <nl> + public int getNumFilesStarted ( ) { <nl> + return numFilesStarted ; <nl> + } <nl> + <nl> + public int getNumFilesFinished ( ) { <nl> + return numFilesFinished ; <nl> + } <nl> + <nl> public boolean wasCalled ( ) { <nl> return called ; <nl> } <nl> @ @ - 52 , 6 + 66 , 7 @ @ class DebugAuditAdapter implements AuditListener { <nl> @ Override <nl> public void fileStarted ( AuditEvent event ) { <nl> called = true ; <nl> + numFilesStarted + + ; <nl> } <nl> <nl> @ Override <nl> @ @ - 62 , 5 + 77 , 6 @ @ class DebugAuditAdapter implements AuditListener { <nl> @ Override <nl> public void fileFinished ( AuditEvent event ) { <nl> called = true ; <nl> + numFilesFinished + + ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm 
 index 9b0ac35 . . e73a871 100644 
 - - - a / src / xdocs / writingjavadocchecks . xml . vm 
 + + + b / src / xdocs / writingjavadocchecks . xml . vm 
 @ @ - 33 , 10 + 33 , 11 @ @ 
 
 < section name = " Overview " > 
 < p > 
 - To start implementing your own Check create new class and extend < a href = ' http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . html ' > AbstractJavadocCheck < / a > . It has two abstract methods : 
 + To start implementing your own Check create new class and extend < a href = ' http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . html ' > AbstractJavadocCheck < / a > . It has two abstract methods you should implement : 
 < / p > 
 < ul > 
 - < li > getDefaultJavadocTokens ( ) - return array of token types that your new Check requires to process ( see " Token Types " section ) < / li > 
 + < li > getDefaultJavadocTokens ( ) - return int array of token types your Check is going to process . The array should contain int constants from JavadocTokenTypes class . 
 + There is also TokenTypes class in Checkstyle . Make sure you use JavadocTokenTypes class in your Check , because the second one is used to describe standard Java DetailAST token type . < / li > 
 < li > visitJavadocToken ( DetailNode ) - it ' s the place you should put tree nodes proccessing . The argument is Javadoc tree node of type you described 
 before in getDefaultJavadocTokens ( ) method . < / li > 
 < / ul > 
 @ @ - 172 , 7 + 173 , 9 @ @ JAVADOC - > * My < b > class < / b > . \ r \ n * @ see AbstractClass < EOF > [ 0 : 0 ] 
 ] ] > < / source > 
 < / section > 
 
 - < section name = " Token types " > 
 + < section name = " Access Java AST from Javadoc Check " > 
 + As you alreasy know Javadoc parse tree is result of parsing block comment . There is a method to get the original block comment . 
 + You may need this block comment to check its position or something else in main DetailAST tree . For example , to write a JavadocCheck that verifies @ param tags in Javadoc comment of a method definition , you also need all method ' s parameter names . To get method definition AST you should access main DetailAST tree throuth block comment AST . For this purpose use < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . html # getBlockCommentAst - - " > getBlockCommentAst ( ) < / a > method that returns DetailAST node . 
 < / section > 
 
 < section name = " HTML Code In Javadoc Comments " > 
 @ @ - 267 , 16 + 270 , 13 @ @ JAVADOC - > < p > First < / p > \ r \ n < p > Second < / p > < EOF > [ 0 : 0 ] 
 ] ] > < / source > 
 < / section > 
 
 - 
 < section name = " Checkstyle SDK GUI " > 
 - < / section > 
 - 
 - < section name = " Access Java AST from Javadoc Check " > 
 + Not implemented yet . See < a href = " https : / / github . com / checkstyle / checkstyle / issues / 408 " > Github Issue # 408 < / a > . 
 < / section > 
 
 < section name = " Integrating new Javadoc Check " > 
 + Javadoc Checks as well as regular Checks extend < a href = " http : / / checkstyle . sourceforge . net / apidocs / index . html " > AbstractCheck < / a > class . So integrating new Javadoc Check is similar to < a href = " writingchecks . html # Integrate _ your _ Check " > integrating other Checks < / a > . 
 < / section > 
 
 < / body > 
 < / document > 
 -

NEAREST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 3354135 . . 47f5a84 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 20 , 7 + 20 , 7 @ @ 
 < ! - - Test to reproduce error catching in Checker and satisfy coverage rate . - - > 
 < suppress checks = " IllegalCatch " 
 files = " CheckerTest . java " 
 - lines = " 535 " / > 
 + lines = " 569 " / > 
 
 < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > 
 < suppress checks = " AbbreviationAsWordInName " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index a560082 . . 1f32b76 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 299 , 12 + 299 , 12 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 for ( final File file : files ) { 
 try { 
 final String fileName = file . getAbsolutePath ( ) ; 
 - fireFileStarted ( fileName ) ; 
 final long timestamp = file . lastModified ( ) ; 
 if ( cache ! = null & & cache . isInCache ( fileName , timestamp ) 
 | | ! CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { 
 continue ; 
 } 
 + fireFileStarted ( fileName ) ; 
 final SortedSet < LocalizedMessage > fileMessages = processFile ( file ) ; 
 fireErrors ( fileName , fileMessages ) ; 
 fireFileFinished ( fileName ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 8039eb0 . . 645d0da 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 217 , 6 + 217 , 9 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( checkerConfig ) ; 
 
 + final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; 
 + checker . addListener ( auditAdapter ) ; 
 + 
 final List < File > files = new ArrayList < > ( ) ; 
 final File file = new File ( " file . pdf " ) ; 
 files . add ( file ) ; 
 @ @ - 228 , 7 + 231 , 38 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 final int counter = checker . process ( files ) ; 
 
 / / comparing to 1 as there is only one legal file in input 
 - assertEquals ( 1 , counter ) ; 
 + final int numLegalFiles = 1 ; 
 + assertEquals ( numLegalFiles , counter ) ; 
 + assertEquals ( numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; 
 + assertEquals ( numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIgnoredFileExtensions ( ) throws Exception { 
 + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; 
 + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + 
 + final Checker checker = new Checker ( ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . configure ( checkerConfig ) ; 
 + 
 + final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; 
 + checker . addListener ( auditAdapter ) ; 
 + 
 + final List < File > allIgnoredFiles = new ArrayList < > ( ) ; 
 + final File ignoredFile = new File ( " file . pdf " ) ; 
 + allIgnoredFiles . add ( ignoredFile ) ; 
 + final String [ ] fileExtensions = { " java " , " xml " , " properties " } ; 
 + checker . setFileExtensions ( fileExtensions ) ; 
 + checker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + final int counter = checker . process ( allIgnoredFiles ) ; 
 + 
 + / / comparing to 0 as there is no legal file in input 
 + final int numLegalFiles = 0 ; 
 + assertEquals ( numLegalFiles , counter ) ; 
 + assertEquals ( numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; 
 + assertEquals ( numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; 
 } 
 
 @ SuppressWarnings ( " deprecation " ) 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DebugAuditAdapter . java b / src / test / java / com / puppycrawl / tools / checkstyle / DebugAuditAdapter . java 
 index 982308f . . 3efb300 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DebugAuditAdapter . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DebugAuditAdapter . java 
 @ @ - 23 , 9 + 23 , 23 @ @ import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 
 class DebugAuditAdapter implements AuditListener { 
 - / * * Keeps track of the number of errors . * / 
 + / * * Keeps track whether this { @ code AuditListener } was called . * / 
 private boolean called ; 
 
 + / * * Keeps track of the number of files started . * / 
 + private int numFilesStarted ; 
 + 
 + / * * Keeps track of the number of files finished . * / 
 + private int numFilesFinished ; 
 + 
 + public int getNumFilesStarted ( ) { 
 + return numFilesStarted ; 
 + } 
 + 
 + public int getNumFilesFinished ( ) { 
 + return numFilesFinished ; 
 + } 
 + 
 public boolean wasCalled ( ) { 
 return called ; 
 } 
 @ @ - 52 , 6 + 66 , 7 @ @ class DebugAuditAdapter implements AuditListener { 
 @ Override 
 public void fileStarted ( AuditEvent event ) { 
 called = true ; 
 + numFilesStarted + + ; 
 } 
 
 @ Override 
 @ @ - 62 , 5 + 77 , 6 @ @ class DebugAuditAdapter implements AuditListener { 
 @ Override 
 public void fileFinished ( AuditEvent event ) { 
 called = true ; 
 + numFilesFinished + + ; 
 } 
 }
