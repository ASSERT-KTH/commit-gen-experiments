BLEU SCORE: 0.09469167282754097

TEST MSG: minor : fix for name Steve McConnell
GENERATED MSG: minor : extending doc for usage of NewLineAtEndOfFile . fileExtensions

TEST DIFF (one line): diff - - git a / src / xdocs / config _ misc . xml b / src / xdocs / config _ misc . xml <nl> index 27caccb . . f9a3e7b 100644 <nl> - - - a / src / xdocs / config _ misc . xml <nl> + + + b / src / xdocs / config _ misc . xml <nl> @ @ - 1432 , 7 + 1432 , 7 @ @ void foo ( String aFooString , <nl> < / p > <nl> <nl> < p > <nl> - Rationale : Steve McConnel in < cite > Code Complete < / cite > suggests that <nl> + Rationale : Steve McConnell in < cite > Code Complete < / cite > suggests that <nl> endline comments are a bad practice . An end line comment would be <nl> one that is on the same line as actual code . For example : <nl> < / p >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> index 7858e6c . . 22bf555 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> @ @ - 238 , 7 + 238 , 8 @ @ public class EmptyBlockCheck <nl> private static DetailAST findLeftCurly ( DetailAST ast ) { <nl> final DetailAST leftCurly ; <nl> final DetailAST slistAST = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> - if ( ast . getType ( ) = = TokenTypes . LITERAL _ CASE <nl> + if ( ( ast . getType ( ) = = TokenTypes . LITERAL _ CASE <nl> + | | ast . getType ( ) = = TokenTypes . LITERAL _ DEFAULT ) <nl> & & ast . getNextSibling ( ) ! = null <nl> & & ast . getNextSibling ( ) . getFirstChild ( ) . getType ( ) = = TokenTypes . SLIST ) { <nl> leftCurly = ast . getNextSibling ( ) . getFirstChild ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java <nl> index e9616d4 . . 2aeb83e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java <nl> @ @ - 189 , 4 + 189 , 39 @ @ public class EmptyBlockCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEmptyCase . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testAllowEmptyDefaultWithText ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyBlockCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , BlockOption . TEXT . toString ( ) ) ; <nl> + checkConfig . addAttribute ( " tokens " , " LITERAL _ DEFAULT " ) ; <nl> + final String [ ] expected = { <nl> + " 5 : 30 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , <nl> + " 11 : 13 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , <nl> + " 36 : 22 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , <nl> + " 44 : 47 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , <nl> + " 50 : 22 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , <nl> + " 78 : 13 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputEmptyDefault . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testForbidDefaultWithoutStatement ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyBlockCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , BlockOption . STMT . toString ( ) ) ; <nl> + checkConfig . addAttribute ( " tokens " , " LITERAL _ DEFAULT " ) ; <nl> + final String [ ] expected = { <nl> + " 5 : 30 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , <nl> + " 11 : 13 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , <nl> + " 15 : 13 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , <nl> + " 26 : 30 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , <nl> + " 36 : 22 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , <nl> + " 44 : 47 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , <nl> + " 50 : 22 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , <nl> + " 65 : 22 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , <nl> + " 78 : 13 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputEmptyDefault . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyDefault . java <nl> new file mode 100644 <nl> index 0000000 . . d7a7984 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyDefault . java <nl> @ @ - 0 , 0 + 1 , 89 @ @ <nl> + public class InputEmptyDefault { <nl> + void method1 ( int a ) { <nl> + switch ( a ) { } <nl> + switch ( a ) { default : ; } / / no violation <nl> + switch ( a ) { default : { } } / / violation <nl> + switch ( a ) { <nl> + default : <nl> + } <nl> + switch ( a ) { <nl> + default : / / violation <nl> + { } <nl> + } <nl> + switch ( a ) { <nl> + default : / / violation if checking statements <nl> + { / / text <nl> + } <nl> + } <nl> + } <nl> + <nl> + void method2 ( int a ) { <nl> + switch ( a ) { <nl> + case 1 : a + + ; <nl> + case 2 : a + + ; <nl> + default : / / no violation <nl> + switch ( a ) { <nl> + default : { / / violation if checking for statements <nl> + <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + void method3 ( int a , int b ) { <nl> + switch ( a ) { <nl> + case 1 : break ; <nl> + default : { } method2 ( a ) ; / / violation <nl> + } <nl> + <nl> + switch ( b ) { <nl> + case 2 : break ; <nl> + default : method2 ( b ) ; { } / / no violation <nl> + } <nl> + <nl> + switch ( a + b ) { case 1 : break ; default : { } ; } / / violation <nl> + } <nl> + <nl> + void method4 ( int a , int b ) { <nl> + switch ( a ) { <nl> + case 1 : <nl> + default : { } / / violation <nl> + } <nl> + <nl> + switch ( b ) { <nl> + case 1 : <nl> + default : / / no violation <nl> + } <nl> + <nl> + switch ( a + b ) { <nl> + default : / / no violation <nl> + case 1 : { } <nl> + } <nl> + <nl> + switch ( a - b ) { <nl> + case 1 : <nl> + default : { / / violation if checking statements <nl> + <nl> + } ; <nl> + case 2 : { } <nl> + } <nl> + } <nl> + <nl> + void method5 ( int a , int b ) { <nl> + switch ( a ) { <nl> + case 1 : <nl> + case 2 : <nl> + case 3 : <nl> + default : / / violation <nl> + { <nl> + } <nl> + } <nl> + <nl> + switch ( b ) { <nl> + default : / / no violation <nl> + case 1 : <nl> + case 2 : { } method2 ( b ) ; <nl> + case 3 : <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml <nl> index 51c8d33 . . 13437d2 100644 <nl> - - - a / src / xdocs / config _ blocks . xml <nl> + + + b / src / xdocs / config _ blocks . xml <nl> @ @ - 150 , 6 + 150 , 35 @ @ switch ( a ) <nl> < section name = " EmptyBlock " > <nl> < subsection name = " Description " > <nl> < p > Checks for empty blocks . This check does not validate sequential blocks . < / p > <nl> + <nl> + < p > Sequential blocks won ' t be checked . Also , no violations for fallthrough : < / p > <nl> + < source > <nl> + switch ( a ) { <nl> + case 1 : / / no violation <nl> + case 2 : / / no violation <nl> + case 3 : someMethod ( ) ; { } / / no violation <nl> + default : break ; <nl> + } <nl> + < / source > <nl> + <nl> + < p > <nl> + This check processes LITERAL _ CASE and LITERAL _ DEFAULT separately . <nl> + So , if tokens = LITERAL _ DEFAULT , following code will not trigger any violation , <nl> + as the empty block belongs to LITERAL _ CASE : <nl> + < / p > <nl> + < p > Configuration : < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; EmptyBlock & quot ; & gt ; <nl> + & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ DEFAULT & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < p > Result : < / p > <nl> + < source > <nl> + switch ( a ) { <nl> + default : / / no violation for " default : " as empty block belong to " case 1 : " <nl> + case 1 : { } <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " >

TEST DIFF:
diff - - git a / src / xdocs / config _ misc . xml b / src / xdocs / config _ misc . xml 
 index 27caccb . . f9a3e7b 100644 
 - - - a / src / xdocs / config _ misc . xml 
 + + + b / src / xdocs / config _ misc . xml 
 @ @ - 1432 , 7 + 1432 , 7 @ @ void foo ( String aFooString , 
 < / p > 
 
 < p > 
 - Rationale : Steve McConnel in < cite > Code Complete < / cite > suggests that 
 + Rationale : Steve McConnell in < cite > Code Complete < / cite > suggests that 
 endline comments are a bad practice . An end line comment would be 
 one that is on the same line as actual code . For example : 
 < / p >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 index 7858e6c . . 22bf555 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 @ @ - 238 , 7 + 238 , 8 @ @ public class EmptyBlockCheck 
 private static DetailAST findLeftCurly ( DetailAST ast ) { 
 final DetailAST leftCurly ; 
 final DetailAST slistAST = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 - if ( ast . getType ( ) = = TokenTypes . LITERAL _ CASE 
 + if ( ( ast . getType ( ) = = TokenTypes . LITERAL _ CASE 
 + | | ast . getType ( ) = = TokenTypes . LITERAL _ DEFAULT ) 
 & & ast . getNextSibling ( ) ! = null 
 & & ast . getNextSibling ( ) . getFirstChild ( ) . getType ( ) = = TokenTypes . SLIST ) { 
 leftCurly = ast . getNextSibling ( ) . getFirstChild ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java 
 index e9616d4 . . 2aeb83e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java 
 @ @ - 189 , 4 + 189 , 39 @ @ public class EmptyBlockCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputEmptyCase . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testAllowEmptyDefaultWithText ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyBlockCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , BlockOption . TEXT . toString ( ) ) ; 
 + checkConfig . addAttribute ( " tokens " , " LITERAL _ DEFAULT " ) ; 
 + final String [ ] expected = { 
 + " 5 : 30 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , 
 + " 11 : 13 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , 
 + " 36 : 22 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , 
 + " 44 : 47 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , 
 + " 50 : 22 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , 
 + " 78 : 13 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " default " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputEmptyDefault . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testForbidDefaultWithoutStatement ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyBlockCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , BlockOption . STMT . toString ( ) ) ; 
 + checkConfig . addAttribute ( " tokens " , " LITERAL _ DEFAULT " ) ; 
 + final String [ ] expected = { 
 + " 5 : 30 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , 
 + " 11 : 13 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , 
 + " 15 : 13 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , 
 + " 26 : 30 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , 
 + " 36 : 22 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , 
 + " 44 : 47 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , 
 + " 50 : 22 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , 
 + " 65 : 22 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , 
 + " 78 : 13 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " default " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputEmptyDefault . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyDefault . java 
 new file mode 100644 
 index 0000000 . . d7a7984 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyDefault . java 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + public class InputEmptyDefault { 
 + void method1 ( int a ) { 
 + switch ( a ) { } 
 + switch ( a ) { default : ; } / / no violation 
 + switch ( a ) { default : { } } / / violation 
 + switch ( a ) { 
 + default : 
 + } 
 + switch ( a ) { 
 + default : / / violation 
 + { } 
 + } 
 + switch ( a ) { 
 + default : / / violation if checking statements 
 + { / / text 
 + } 
 + } 
 + } 
 + 
 + void method2 ( int a ) { 
 + switch ( a ) { 
 + case 1 : a + + ; 
 + case 2 : a + + ; 
 + default : / / no violation 
 + switch ( a ) { 
 + default : { / / violation if checking for statements 
 + 
 + } 
 + } 
 + } 
 + } 
 + 
 + void method3 ( int a , int b ) { 
 + switch ( a ) { 
 + case 1 : break ; 
 + default : { } method2 ( a ) ; / / violation 
 + } 
 + 
 + switch ( b ) { 
 + case 2 : break ; 
 + default : method2 ( b ) ; { } / / no violation 
 + } 
 + 
 + switch ( a + b ) { case 1 : break ; default : { } ; } / / violation 
 + } 
 + 
 + void method4 ( int a , int b ) { 
 + switch ( a ) { 
 + case 1 : 
 + default : { } / / violation 
 + } 
 + 
 + switch ( b ) { 
 + case 1 : 
 + default : / / no violation 
 + } 
 + 
 + switch ( a + b ) { 
 + default : / / no violation 
 + case 1 : { } 
 + } 
 + 
 + switch ( a - b ) { 
 + case 1 : 
 + default : { / / violation if checking statements 
 + 
 + } ; 
 + case 2 : { } 
 + } 
 + } 
 + 
 + void method5 ( int a , int b ) { 
 + switch ( a ) { 
 + case 1 : 
 + case 2 : 
 + case 3 : 
 + default : / / violation 
 + { 
 + } 
 + } 
 + 
 + switch ( b ) { 
 + default : / / no violation 
 + case 1 : 
 + case 2 : { } method2 ( b ) ; 
 + case 3 : 
 + } 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml 
 index 51c8d33 . . 13437d2 100644 
 - - - a / src / xdocs / config _ blocks . xml 
 + + + b / src / xdocs / config _ blocks . xml 
 @ @ - 150 , 6 + 150 , 35 @ @ switch ( a ) 
 < section name = " EmptyBlock " > 
 < subsection name = " Description " > 
 < p > Checks for empty blocks . This check does not validate sequential blocks . < / p > 
 + 
 + < p > Sequential blocks won ' t be checked . Also , no violations for fallthrough : < / p > 
 + < source > 
 + switch ( a ) { 
 + case 1 : / / no violation 
 + case 2 : / / no violation 
 + case 3 : someMethod ( ) ; { } / / no violation 
 + default : break ; 
 + } 
 + < / source > 
 + 
 + < p > 
 + This check processes LITERAL _ CASE and LITERAL _ DEFAULT separately . 
 + So , if tokens = LITERAL _ DEFAULT , following code will not trigger any violation , 
 + as the empty block belongs to LITERAL _ CASE : 
 + < / p > 
 + < p > Configuration : < / p > 
 + < source > 
 + & lt ; module name = & quot ; EmptyBlock & quot ; & gt ; 
 + & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ DEFAULT & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < p > Result : < / p > 
 + < source > 
 + switch ( a ) { 
 + default : / / no violation for " default : " as empty block belong to " case 1 : " 
 + case 1 : { } 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Properties " >
