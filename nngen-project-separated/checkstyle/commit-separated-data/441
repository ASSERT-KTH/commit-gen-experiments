BLEU SCORE: 0.31702331385234306

TEST MSG: Pull # 5392 : fixed RequireThisCheck and for loop variable handling
GENERATED MSG: Pull # 5351 : fixed RequireThisCheck and catch variable handling

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 1e34daf . . 58e5f7b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 91 , 6 + 91 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> * @ author o _ sukhodolsky <nl> * @ author Andrei Selkin <nl> * / <nl> + / / - @ cs [ ClassDataAbstractionCoupling ] This check requires to work with and identify many frames . <nl> @ FileStatefulCheck <nl> public class RequireThisCheck extends AbstractCheck { <nl> <nl> @ @ - 197 , 6 + 198 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> TokenTypes . ANNOTATION _ DEF , <nl> TokenTypes . CTOR _ DEF , <nl> TokenTypes . METHOD _ DEF , <nl> + TokenTypes . LITERAL _ FOR , <nl> TokenTypes . SLIST , <nl> TokenTypes . IDENT , <nl> } ; <nl> @ @ - 241 , 6 + 243 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> case TokenTypes . SLIST : <nl> case TokenTypes . METHOD _ DEF : <nl> case TokenTypes . CTOR _ DEF : <nl> + case TokenTypes . LITERAL _ FOR : <nl> current . push ( frames . get ( ast ) ) ; <nl> break ; <nl> default : <nl> @ @ - 258 , 6 + 261 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> case TokenTypes . SLIST : <nl> case TokenTypes . METHOD _ DEF : <nl> case TokenTypes . CTOR _ DEF : <nl> + case TokenTypes . LITERAL _ FOR : <nl> current . pop ( ) ; <nl> break ; <nl> default : <nl> @ @ - 352 , 6 + 356 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> * @ param frameStack stack containing the FrameTree being built . <nl> * @ param ast AST to parse . <nl> * / <nl> + / / - @ cs [ JavaNCSS ] This method is a big switch and is too hard to remove . <nl> private static void collectDeclarations ( Deque < AbstractFrame > frameStack , DetailAST ast ) { <nl> final AbstractFrame frame = frameStack . peek ( ) ; <nl> switch ( ast . getType ( ) ) { <nl> @ @ - 401 , 6 + 406 , 10 @ @ public class RequireThisCheck extends AbstractCheck { <nl> TokenTypes . IDENT ) ) ; <nl> frameStack . addFirst ( catchFrame ) ; <nl> break ; <nl> + case TokenTypes . LITERAL _ FOR : <nl> + final AbstractFrame forFrame = new ForFrame ( frame , ast ) ; <nl> + frameStack . addFirst ( forFrame ) ; <nl> + break ; <nl> case TokenTypes . LITERAL _ NEW : <nl> if ( isAnonymousClassDef ( ast ) ) { <nl> frameStack . addFirst ( new AnonymousClassFrame ( frame , <nl> @ @ - 450 , 6 + 459 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> case TokenTypes . METHOD _ DEF : <nl> case TokenTypes . CTOR _ DEF : <nl> case TokenTypes . LITERAL _ CATCH : <nl> + case TokenTypes . LITERAL _ FOR : <nl> frames . put ( ast , frameStack . poll ( ) ) ; <nl> break ; <nl> case TokenTypes . LITERAL _ NEW : <nl> @ @ - 617 , 7 + 627 , 8 @ @ public class RequireThisCheck extends AbstractCheck { <nl> private boolean canBeReferencedFromStaticContext ( DetailAST ident ) { <nl> AbstractFrame variableDeclarationFrame = findFrame ( ident , false ) ; <nl> boolean staticInitializationBlock = false ; <nl> - while ( variableDeclarationFrame . getType ( ) = = FrameType . BLOCK _ FRAME ) { <nl> + while ( variableDeclarationFrame . getType ( ) = = FrameType . BLOCK _ FRAME <nl> + | | variableDeclarationFrame . getType ( ) = = FrameType . FOR _ FRAME ) { <nl> final DetailAST blockFrameNameIdent = variableDeclarationFrame . getFrameNameIdent ( ) ; <nl> final DetailAST definitionToken = blockFrameNameIdent . getParent ( ) ; <nl> if ( definitionToken . getType ( ) = = TokenTypes . STATIC _ INIT ) { <nl> @ @ - 983 , 6 + 994 , 8 @ @ public class RequireThisCheck extends AbstractCheck { <nl> BLOCK _ FRAME , <nl> / * * Catch frame type . * / <nl> CATCH _ FRAME , <nl> + / * * Lambda frame type . * / <nl> + FOR _ FRAME , <nl> } <nl> <nl> / * * <nl> @ @ - 1408 , 4 + 1421 , 24 @ @ public class RequireThisCheck extends AbstractCheck { <nl> return FrameType . CATCH _ FRAME ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * A frame initiated on entering a for block ; holds local for variable names . <nl> + * @ author Richard Veach <nl> + * / <nl> + public static class ForFrame extends AbstractFrame { <nl> + / * * <nl> + * Creates for frame . <nl> + * @ param parent parent frame . <nl> + * @ param ident ident frame name ident . <nl> + * / <nl> + protected ForFrame ( AbstractFrame parent , DetailAST ident ) { <nl> + super ( parent , ident ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public FrameType getType ( ) { <nl> + return FrameType . FOR _ FRAME ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 512aaa8 . . 83b7dac 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 61 , 8 + 61 , 10 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , <nl> " 134 : 9 : " + getCheckMessage ( MSG _ METHOD , " foo " , " " ) , <nl> " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , <nl> - " 167 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> - " 167 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> + " 168 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> + " 168 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> + " 174 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " b " , " " ) , <nl> + " 174 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " b " , " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , <nl> @ @ - 101 , 8 + 103 , 10 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> " 114 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " " ) , <nl> " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , <nl> " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , <nl> - " 167 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> - " 167 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> + " 168 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> + " 168 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> + " 174 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " b " , " " ) , <nl> + " 174 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " b " , " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , <nl> @ @ - 328 , 6 + 332 , 17 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testFor ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; <nl> + checkConfig . addAttribute ( " validateOnlyOverlapping " , " false " ) ; <nl> + final String [ ] expected = { <nl> + " 13 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " bottom " , " " ) , <nl> + " 21 : 34 : " + getCheckMessage ( MSG _ VARIABLE , " name " , " " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputRequireThisFor . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void test ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> index 872996d . . 77beca3 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> @ @ - 152 , 6 + 152 , 7 @ @ class NestedRechange { <nl> } <nl> class NestedFrames { <nl> int a = 0 ; <nl> + int b = 0 ; <nl> <nl> public int oneReturnInMethod2 ( ) { <nl> for ( int i = 0 ; i < 10 ; i + + ) { <nl> @ @ - 166 , 4 + 167 , 10 @ @ class NestedFrames { <nl> } <nl> return a + a * a ; <nl> } <nl> + <nl> + public int oneReturnInMethod3 ( ) { <nl> + for ( int b = 0 ; b < 10 ; b + + ) { <nl> + } <nl> + return b + b * b ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisFor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisFor . java <nl> new file mode 100644 <nl> index 0000000 . . 9ad0e9f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisFor . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . requirethis ; <nl> + <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> + <nl> + public class InputRequireThisFor { <nl> + private String name ; <nl> + int bottom ; <nl> + <nl> + public void method1 ( ) { <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + int bottom = i - 4 ; <nl> + bottom = bottom > 0 ? bottom - 1 : bottom ; <nl> + } <nl> + } <nl> + <nl> + public void method2 ( ) { <nl> + for ( String name : new String [ ] { } ) { <nl> + } <nl> + <nl> + Path jarfile = Paths . get ( name + " . jar " ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 81c29cf . . a5fba03 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 220 , 7 + 220 , 7 @ @ <nl> < maven . jacoco . plugin . version > 0 . 7 . 9 < / maven . jacoco . plugin . version > <nl> < saxon . version > 9 . 8 . 0 - 5 < / saxon . version > <nl> < maven . checkstyle . plugin . version > 2 . 17 < / maven . checkstyle . plugin . version > <nl> - < maven . sevntu . checkstyle . plugin . version > 1 . 24 . 2 < / maven . sevntu . checkstyle . plugin . version > <nl> + < maven . sevntu . checkstyle . plugin . version > 1 . 25 . 0 < / maven . sevntu . checkstyle . plugin . version > <nl> < maven . sevntu - checkstyle - check . checkstyle . version > 8 . 4 < / maven . sevntu - checkstyle - check . checkstyle . version > <nl> < maven . versions . plugin . version > 2 . 5 < / maven . versions . plugin . version > <nl> < java . version > 1 . 8 < / java . version >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 1e34daf . . 58e5f7b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 91 , 6 + 91 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 * @ author o _ sukhodolsky 
 * @ author Andrei Selkin 
 * / 
 + / / - @ cs [ ClassDataAbstractionCoupling ] This check requires to work with and identify many frames . 
 @ FileStatefulCheck 
 public class RequireThisCheck extends AbstractCheck { 
 
 @ @ - 197 , 6 + 198 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 TokenTypes . ANNOTATION _ DEF , 
 TokenTypes . CTOR _ DEF , 
 TokenTypes . METHOD _ DEF , 
 + TokenTypes . LITERAL _ FOR , 
 TokenTypes . SLIST , 
 TokenTypes . IDENT , 
 } ; 
 @ @ - 241 , 6 + 243 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 case TokenTypes . SLIST : 
 case TokenTypes . METHOD _ DEF : 
 case TokenTypes . CTOR _ DEF : 
 + case TokenTypes . LITERAL _ FOR : 
 current . push ( frames . get ( ast ) ) ; 
 break ; 
 default : 
 @ @ - 258 , 6 + 261 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 case TokenTypes . SLIST : 
 case TokenTypes . METHOD _ DEF : 
 case TokenTypes . CTOR _ DEF : 
 + case TokenTypes . LITERAL _ FOR : 
 current . pop ( ) ; 
 break ; 
 default : 
 @ @ - 352 , 6 + 356 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 * @ param frameStack stack containing the FrameTree being built . 
 * @ param ast AST to parse . 
 * / 
 + / / - @ cs [ JavaNCSS ] This method is a big switch and is too hard to remove . 
 private static void collectDeclarations ( Deque < AbstractFrame > frameStack , DetailAST ast ) { 
 final AbstractFrame frame = frameStack . peek ( ) ; 
 switch ( ast . getType ( ) ) { 
 @ @ - 401 , 6 + 406 , 10 @ @ public class RequireThisCheck extends AbstractCheck { 
 TokenTypes . IDENT ) ) ; 
 frameStack . addFirst ( catchFrame ) ; 
 break ; 
 + case TokenTypes . LITERAL _ FOR : 
 + final AbstractFrame forFrame = new ForFrame ( frame , ast ) ; 
 + frameStack . addFirst ( forFrame ) ; 
 + break ; 
 case TokenTypes . LITERAL _ NEW : 
 if ( isAnonymousClassDef ( ast ) ) { 
 frameStack . addFirst ( new AnonymousClassFrame ( frame , 
 @ @ - 450 , 6 + 459 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 case TokenTypes . METHOD _ DEF : 
 case TokenTypes . CTOR _ DEF : 
 case TokenTypes . LITERAL _ CATCH : 
 + case TokenTypes . LITERAL _ FOR : 
 frames . put ( ast , frameStack . poll ( ) ) ; 
 break ; 
 case TokenTypes . LITERAL _ NEW : 
 @ @ - 617 , 7 + 627 , 8 @ @ public class RequireThisCheck extends AbstractCheck { 
 private boolean canBeReferencedFromStaticContext ( DetailAST ident ) { 
 AbstractFrame variableDeclarationFrame = findFrame ( ident , false ) ; 
 boolean staticInitializationBlock = false ; 
 - while ( variableDeclarationFrame . getType ( ) = = FrameType . BLOCK _ FRAME ) { 
 + while ( variableDeclarationFrame . getType ( ) = = FrameType . BLOCK _ FRAME 
 + | | variableDeclarationFrame . getType ( ) = = FrameType . FOR _ FRAME ) { 
 final DetailAST blockFrameNameIdent = variableDeclarationFrame . getFrameNameIdent ( ) ; 
 final DetailAST definitionToken = blockFrameNameIdent . getParent ( ) ; 
 if ( definitionToken . getType ( ) = = TokenTypes . STATIC _ INIT ) { 
 @ @ - 983 , 6 + 994 , 8 @ @ public class RequireThisCheck extends AbstractCheck { 
 BLOCK _ FRAME , 
 / * * Catch frame type . * / 
 CATCH _ FRAME , 
 + / * * Lambda frame type . * / 
 + FOR _ FRAME , 
 } 
 
 / * * 
 @ @ - 1408 , 4 + 1421 , 24 @ @ public class RequireThisCheck extends AbstractCheck { 
 return FrameType . CATCH _ FRAME ; 
 } 
 } 
 + 
 + / * * 
 + * A frame initiated on entering a for block ; holds local for variable names . 
 + * @ author Richard Veach 
 + * / 
 + public static class ForFrame extends AbstractFrame { 
 + / * * 
 + * Creates for frame . 
 + * @ param parent parent frame . 
 + * @ param ident ident frame name ident . 
 + * / 
 + protected ForFrame ( AbstractFrame parent , DetailAST ident ) { 
 + super ( parent , ident ) ; 
 + } 
 + 
 + @ Override 
 + public FrameType getType ( ) { 
 + return FrameType . FOR _ FRAME ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 512aaa8 . . 83b7dac 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 61 , 8 + 61 , 10 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , 
 " 134 : 9 : " + getCheckMessage ( MSG _ METHOD , " foo " , " " ) , 
 " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , 
 - " 167 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 - " 167 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 + " 168 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 + " 168 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 + " 174 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " b " , " " ) , 
 + " 174 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " b " , " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , 
 @ @ - 101 , 8 + 103 , 10 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 " 114 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " " ) , 
 " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , 
 " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , 
 - " 167 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 - " 167 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 + " 168 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 + " 168 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 + " 174 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " b " , " " ) , 
 + " 174 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " b " , " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , 
 @ @ - 328 , 6 + 332 , 17 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testFor ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; 
 + checkConfig . addAttribute ( " validateOnlyOverlapping " , " false " ) ; 
 + final String [ ] expected = { 
 + " 13 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " bottom " , " " ) , 
 + " 21 : 34 : " + getCheckMessage ( MSG _ VARIABLE , " name " , " " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputRequireThisFor . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void test ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 index 872996d . . 77beca3 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 @ @ - 152 , 6 + 152 , 7 @ @ class NestedRechange { 
 } 
 class NestedFrames { 
 int a = 0 ; 
 + int b = 0 ; 
 
 public int oneReturnInMethod2 ( ) { 
 for ( int i = 0 ; i < 10 ; i + + ) { 
 @ @ - 166 , 4 + 167 , 10 @ @ class NestedFrames { 
 } 
 return a + a * a ; 
 } 
 + 
 + public int oneReturnInMethod3 ( ) { 
 + for ( int b = 0 ; b < 10 ; b + + ) { 
 + } 
 + return b + b * b ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisFor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisFor . java 
 new file mode 100644 
 index 0000000 . . 9ad0e9f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisFor . java 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . requirethis ; 
 + 
 + import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 + 
 + public class InputRequireThisFor { 
 + private String name ; 
 + int bottom ; 
 + 
 + public void method1 ( ) { 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + int bottom = i - 4 ; 
 + bottom = bottom > 0 ? bottom - 1 : bottom ; 
 + } 
 + } 
 + 
 + public void method2 ( ) { 
 + for ( String name : new String [ ] { } ) { 
 + } 
 + 
 + Path jarfile = Paths . get ( name + " . jar " ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 81c29cf . . a5fba03 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 220 , 7 + 220 , 7 @ @ 
 < maven . jacoco . plugin . version > 0 . 7 . 9 < / maven . jacoco . plugin . version > 
 < saxon . version > 9 . 8 . 0 - 5 < / saxon . version > 
 < maven . checkstyle . plugin . version > 2 . 17 < / maven . checkstyle . plugin . version > 
 - < maven . sevntu . checkstyle . plugin . version > 1 . 24 . 2 < / maven . sevntu . checkstyle . plugin . version > 
 + < maven . sevntu . checkstyle . plugin . version > 1 . 25 . 0 < / maven . sevntu . checkstyle . plugin . version > 
 < maven . sevntu - checkstyle - check . checkstyle . version > 8 . 4 < / maven . sevntu - checkstyle - check . checkstyle . version > 
 < maven . versions . plugin . version > 2 . 5 < / maven . versions . plugin . version > 
 < java . version > 1 . 8 < / java . version >
