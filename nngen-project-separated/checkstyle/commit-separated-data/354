BLEU SCORE: 0.8801117367933934

TEST MSG: config : bump jacoco to 0 . 8 . 1
GENERATED MSG: config : bump jacoco to 0 . 8 . 0

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index c38f980 . . 5e99dcc 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 203 , 7 + 203 , 7 @ @ <nl> < maven . spotbugs . plugin . version > 3 . 1 . 3 < / maven . spotbugs . plugin . version > <nl> < maven . pmd . plugin . version > 3 . 8 < / maven . pmd . plugin . version > <nl> < pmd . version > 5 . 8 . 1 < / pmd . version > <nl> - < maven . jacoco . plugin . version > 0 . 8 . 0 < / maven . jacoco . plugin . version > <nl> + < maven . jacoco . plugin . version > 0 . 8 . 1 < / maven . jacoco . plugin . version > <nl> < powermock . version > 2 . 0 . 0 - beta . 5 < / powermock . version > <nl> < saxon . version > 9 . 8 . 0 - 10 < / saxon . version > <nl> < maven . checkstyle . plugin . version > 3 . 0 . 0 < / maven . checkstyle . plugin . version >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index c2e3de9 . . cc2bed1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 336 , 7 + 336 , 8 @ @ public class RequireThisCheck extends AbstractCheck { <nl> break ; <nl> case TokenTypes . PARAMETER _ DEF : <nl> if ( ! CheckUtils . isReceiverParameter ( ast ) <nl> - & & ! isLambdaParameter ( ast ) ) { <nl> + & & ! isLambdaParameter ( ast ) <nl> + & & ast . getParent ( ) . getType ( ) ! = TokenTypes . LITERAL _ CATCH ) { <nl> final DetailAST parameterIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> frame . addIdent ( parameterIdent ) ; <nl> } <nl> @ @ - 366 , 6 + 367 , 12 @ @ public class RequireThisCheck extends AbstractCheck { <nl> final DetailAST ctorFrameNameIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> frameStack . addFirst ( new ConstructorFrame ( frame , ctorFrameNameIdent ) ) ; <nl> break ; <nl> + case TokenTypes . LITERAL _ CATCH : <nl> + final AbstractFrame catchFrame = new CatchFrame ( frame , ast ) ; <nl> + catchFrame . addIdent ( ast . findFirstToken ( TokenTypes . PARAMETER _ DEF ) . findFirstToken ( <nl> + TokenTypes . IDENT ) ) ; <nl> + frameStack . addFirst ( catchFrame ) ; <nl> + break ; <nl> case TokenTypes . LITERAL _ NEW : <nl> if ( isAnonymousClassDef ( ast ) ) { <nl> frameStack . addFirst ( new AnonymousClassFrame ( frame , <nl> @ @ - 414 , 6 + 421 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> case TokenTypes . SLIST : <nl> case TokenTypes . METHOD _ DEF : <nl> case TokenTypes . CTOR _ DEF : <nl> + case TokenTypes . LITERAL _ CATCH : <nl> frames . put ( ast , frameStack . poll ( ) ) ; <nl> break ; <nl> case TokenTypes . LITERAL _ NEW : <nl> @ @ - 952 , 6 + 960 , 8 @ @ public class RequireThisCheck extends AbstractCheck { <nl> METHOD _ FRAME , <nl> / * * Block frame type . * / <nl> BLOCK _ FRAME , <nl> + / * * Catch frame type . * / <nl> + CATCH _ FRAME , <nl> } <nl> <nl> / * * <nl> @ @ - 1357 , 4 + 1367 , 24 @ @ public class RequireThisCheck extends AbstractCheck { <nl> return FrameType . BLOCK _ FRAME ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * A frame initiated on entering a catch block ; holds local catch variable names . <nl> + * @ author Richard Veach <nl> + * / <nl> + public static class CatchFrame extends AbstractFrame { <nl> + / * * <nl> + * Creates catch frame . <nl> + * @ param parent parent frame . <nl> + * @ param ident ident frame name ident . <nl> + * / <nl> + protected CatchFrame ( AbstractFrame parent , DetailAST ident ) { <nl> + super ( parent , ident ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public FrameType getType ( ) { <nl> + return FrameType . CATCH _ FRAME ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 6474fc4 . . c2289d0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck . MSG _ METHOD ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck . MSG _ VARIABLE ; <nl> <nl> + import java . lang . reflect . Constructor ; <nl> import java . util . SortedSet ; <nl> <nl> import org . junit . Assert ; <nl> @ @ - 33 , 6 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> @ @ - 296 , 6 + 298 , 16 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testCatchVariables ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; <nl> + checkConfig . addAttribute ( " validateOnlyOverlapping " , " false " ) ; <nl> + final String [ ] expected = { <nl> + " 29 : 21 : " + getCheckMessage ( MSG _ VARIABLE , " ex " , " " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputRequireThisCatchVariables . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void test ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> @ @ - 309 , 4 + 321 , 18 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getPath ( " InputRequireThisExtendedMethod . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testUnusedMethod ( ) throws Exception { <nl> + final DetailAST ident = new DetailAST ( ) ; <nl> + ident . setText ( " testName " ) ; <nl> + <nl> + final Class < ? > cls = Class . forName ( RequireThisCheck . class . getName ( ) + " $ CatchFrame " ) ; <nl> + final Constructor < ? > constructor = cls . getDeclaredConstructors ( ) [ 0 ] ; <nl> + constructor . setAccessible ( true ) ; <nl> + final Object o = constructor . newInstance ( null , ident ) ; <nl> + <nl> + Assert . assertEquals ( " expected ident token " , ident , <nl> + TestUtil . getClassDeclaredMethod ( cls , " getFrameNameIdent " ) . invoke ( o ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisCatchVariables . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisCatchVariables . java <nl> new file mode 100644 <nl> index 0000000 . . 920dd63 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisCatchVariables . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . requirethis ; <nl> + <nl> + public class InputRequireThisCatchVariables extends Thread { <nl> + private Throwable ex ; <nl> + <nl> + public InputRequireThisCatchVariables ( Throwable ex ) { <nl> + this . ex = ex ; <nl> + } <nl> + <nl> + @ Override <nl> + public void run ( ) { <nl> + if ( this . ex ! = null ) { <nl> + try { <nl> + exceptional ( this . ex ) ; <nl> + } <nl> + catch ( RuntimeException ex ) { <nl> + if ( ex = = this . ex ) { <nl> + debug ( " Expected exception thrown " , ex ) ; <nl> + } <nl> + else { <nl> + ex . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + catch ( Error err ) { <nl> + if ( err = = this . ex ) { <nl> + debug ( " Expected exception thrown " , err ) ; <nl> + } <nl> + else { <nl> + ex . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + catch ( Throwable ex ) { <nl> + ex . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void exceptional ( Throwable ex ) { } <nl> + private static void debug ( String message , Throwable err ) { } <nl> + }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index c38f980 . . 5e99dcc 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 203 , 7 + 203 , 7 @ @ 
 < maven . spotbugs . plugin . version > 3 . 1 . 3 < / maven . spotbugs . plugin . version > 
 < maven . pmd . plugin . version > 3 . 8 < / maven . pmd . plugin . version > 
 < pmd . version > 5 . 8 . 1 < / pmd . version > 
 - < maven . jacoco . plugin . version > 0 . 8 . 0 < / maven . jacoco . plugin . version > 
 + < maven . jacoco . plugin . version > 0 . 8 . 1 < / maven . jacoco . plugin . version > 
 < powermock . version > 2 . 0 . 0 - beta . 5 < / powermock . version > 
 < saxon . version > 9 . 8 . 0 - 10 < / saxon . version > 
 < maven . checkstyle . plugin . version > 3 . 0 . 0 < / maven . checkstyle . plugin . version >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index c2e3de9 . . cc2bed1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 336 , 7 + 336 , 8 @ @ public class RequireThisCheck extends AbstractCheck { 
 break ; 
 case TokenTypes . PARAMETER _ DEF : 
 if ( ! CheckUtils . isReceiverParameter ( ast ) 
 - & & ! isLambdaParameter ( ast ) ) { 
 + & & ! isLambdaParameter ( ast ) 
 + & & ast . getParent ( ) . getType ( ) ! = TokenTypes . LITERAL _ CATCH ) { 
 final DetailAST parameterIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 frame . addIdent ( parameterIdent ) ; 
 } 
 @ @ - 366 , 6 + 367 , 12 @ @ public class RequireThisCheck extends AbstractCheck { 
 final DetailAST ctorFrameNameIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 frameStack . addFirst ( new ConstructorFrame ( frame , ctorFrameNameIdent ) ) ; 
 break ; 
 + case TokenTypes . LITERAL _ CATCH : 
 + final AbstractFrame catchFrame = new CatchFrame ( frame , ast ) ; 
 + catchFrame . addIdent ( ast . findFirstToken ( TokenTypes . PARAMETER _ DEF ) . findFirstToken ( 
 + TokenTypes . IDENT ) ) ; 
 + frameStack . addFirst ( catchFrame ) ; 
 + break ; 
 case TokenTypes . LITERAL _ NEW : 
 if ( isAnonymousClassDef ( ast ) ) { 
 frameStack . addFirst ( new AnonymousClassFrame ( frame , 
 @ @ - 414 , 6 + 421 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 case TokenTypes . SLIST : 
 case TokenTypes . METHOD _ DEF : 
 case TokenTypes . CTOR _ DEF : 
 + case TokenTypes . LITERAL _ CATCH : 
 frames . put ( ast , frameStack . poll ( ) ) ; 
 break ; 
 case TokenTypes . LITERAL _ NEW : 
 @ @ - 952 , 6 + 960 , 8 @ @ public class RequireThisCheck extends AbstractCheck { 
 METHOD _ FRAME , 
 / * * Block frame type . * / 
 BLOCK _ FRAME , 
 + / * * Catch frame type . * / 
 + CATCH _ FRAME , 
 } 
 
 / * * 
 @ @ - 1357 , 4 + 1367 , 24 @ @ public class RequireThisCheck extends AbstractCheck { 
 return FrameType . BLOCK _ FRAME ; 
 } 
 } 
 + 
 + / * * 
 + * A frame initiated on entering a catch block ; holds local catch variable names . 
 + * @ author Richard Veach 
 + * / 
 + public static class CatchFrame extends AbstractFrame { 
 + / * * 
 + * Creates catch frame . 
 + * @ param parent parent frame . 
 + * @ param ident ident frame name ident . 
 + * / 
 + protected CatchFrame ( AbstractFrame parent , DetailAST ident ) { 
 + super ( parent , ident ) ; 
 + } 
 + 
 + @ Override 
 + public FrameType getType ( ) { 
 + return FrameType . CATCH _ FRAME ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 6474fc4 . . c2289d0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck . MSG _ METHOD ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck . MSG _ VARIABLE ; 
 
 + import java . lang . reflect . Constructor ; 
 import java . util . SortedSet ; 
 
 import org . junit . Assert ; 
 @ @ - 33 , 6 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 @ @ - 296 , 6 + 298 , 16 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testCatchVariables ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; 
 + checkConfig . addAttribute ( " validateOnlyOverlapping " , " false " ) ; 
 + final String [ ] expected = { 
 + " 29 : 21 : " + getCheckMessage ( MSG _ VARIABLE , " ex " , " " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputRequireThisCatchVariables . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void test ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 @ @ - 309 , 4 + 321 , 18 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getPath ( " InputRequireThisExtendedMethod . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testUnusedMethod ( ) throws Exception { 
 + final DetailAST ident = new DetailAST ( ) ; 
 + ident . setText ( " testName " ) ; 
 + 
 + final Class < ? > cls = Class . forName ( RequireThisCheck . class . getName ( ) + " $ CatchFrame " ) ; 
 + final Constructor < ? > constructor = cls . getDeclaredConstructors ( ) [ 0 ] ; 
 + constructor . setAccessible ( true ) ; 
 + final Object o = constructor . newInstance ( null , ident ) ; 
 + 
 + Assert . assertEquals ( " expected ident token " , ident , 
 + TestUtil . getClassDeclaredMethod ( cls , " getFrameNameIdent " ) . invoke ( o ) ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisCatchVariables . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisCatchVariables . java 
 new file mode 100644 
 index 0000000 . . 920dd63 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisCatchVariables . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . requirethis ; 
 + 
 + public class InputRequireThisCatchVariables extends Thread { 
 + private Throwable ex ; 
 + 
 + public InputRequireThisCatchVariables ( Throwable ex ) { 
 + this . ex = ex ; 
 + } 
 + 
 + @ Override 
 + public void run ( ) { 
 + if ( this . ex ! = null ) { 
 + try { 
 + exceptional ( this . ex ) ; 
 + } 
 + catch ( RuntimeException ex ) { 
 + if ( ex = = this . ex ) { 
 + debug ( " Expected exception thrown " , ex ) ; 
 + } 
 + else { 
 + ex . printStackTrace ( ) ; 
 + } 
 + } 
 + catch ( Error err ) { 
 + if ( err = = this . ex ) { 
 + debug ( " Expected exception thrown " , err ) ; 
 + } 
 + else { 
 + ex . printStackTrace ( ) ; 
 + } 
 + } 
 + catch ( Throwable ex ) { 
 + ex . printStackTrace ( ) ; 
 + } 
 + } 
 + } 
 + 
 + private static void exceptional ( Throwable ex ) { } 
 + private static void debug ( String message , Throwable err ) { } 
 + }
