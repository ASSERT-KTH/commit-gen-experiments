BLEU SCORE: 0.06754312828675708

TEST MSG: Issue # 3808 : Check indentation of this ( ) and super ( )
GENERATED MSG: Issue # 2763 : restored indentation ' s throwsIndent logic

TEST DIFF (one line): diff - - git a / . ci / shippable . sh b / . ci / shippable . sh <nl> index 57df020 . . c250232 100755 <nl> - - - a / . ci / shippable . sh <nl> + + + b / . ci / shippable . sh <nl> @ @ - 106 , 13 + 106 , 11 @ @ pitest - indentation ) <nl> " ForHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( forEach , expected , false , false ) ; < / span > < / pre > < / td > < / tr > " <nl> " ForHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkWrappingIndentation ( getMainAst ( ) , getForLoopRightParen ( getMainAst ( ) ) ) ; < / span > < / pre > < / td > < / tr > " <nl> " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > createdHandlers . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> - " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > register ( TokenTypes . CTOR _ CALL , MethodCallHandler . class ) ; < / span > < / pre > < / td > < / tr > " <nl> " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > register ( TokenTypes . INDEX _ OP , IndexHandler . class ) ; < / span > < / pre > < / td > < / tr > " <nl> " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > handlerFactory . clearCreatedHandlers ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > handlers . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > primordialHandler . checkIndentation ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " IndentLevel . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > for ( int i = levels . nextSetBit ( 0 ) ; i & # 62 ; = 0 ; < / span > < / pre > < / td > < / tr > " <nl> - " MethodCallHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkLeftParen ( lparen ) ; < / span > < / pre > < / td > < / tr > " <nl> " MethodDefHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( node . getLineNo ( ) & # 60 ; lineStart ) { < / span > < / pre > < / td > < / tr > " <nl> " MethodDefHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( node . getType ( ) = = TokenTypes . ANNOTATION ) { < / span > < / pre > < / td > < / tr > " <nl> " NewHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( type , getIndent ( ) , false , false ) ; < / span > < / pre > < / td > < / tr > " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java <nl> index 115d953 . . a00d6f0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java <nl> @ @ - 54 , 6 + 54 , 8 @ @ public class BlockParentHandler extends AbstractExpressionHandler { <nl> TokenTypes . LITERAL _ RETURN , <nl> TokenTypes . LITERAL _ THROW , <nl> TokenTypes . LITERAL _ CONTINUE , <nl> + TokenTypes . CTOR _ CALL , <nl> + TokenTypes . SUPER _ CTOR _ CALL , <nl> } ; <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java <nl> index ec6f95b . . d7bad30 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java <nl> @ @ - 67 , 6 + 67 , 7 @ @ public class HandlerFactory { <nl> register ( TokenTypes . ARRAY _ INIT , ArrayInitHandler . class ) ; <nl> register ( TokenTypes . METHOD _ CALL , MethodCallHandler . class ) ; <nl> register ( TokenTypes . CTOR _ CALL , MethodCallHandler . class ) ; <nl> + register ( TokenTypes . SUPER _ CTOR _ CALL , MethodCallHandler . class ) ; <nl> register ( TokenTypes . LABELED _ STAT , LabelHandler . class ) ; <nl> register ( TokenTypes . STATIC _ INIT , StaticInitHandler . class ) ; <nl> register ( TokenTypes . INSTANCE _ INIT , SlistHandler . class ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java <nl> index cc870a4 . . 26c3ea7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java <nl> @ @ - 61 , 6 + 61 , 9 @ @ public class MethodCallHandler extends AbstractExpressionHandler { <nl> indentLevel = new IndentLevel ( container . getIndent ( ) , getBasicOffset ( ) ) ; <nl> } <nl> } <nl> + else if ( getMainAst ( ) . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ NEW ) { <nl> + indentLevel = super . getIndentImpl ( ) ; <nl> + } <nl> else { <nl> / / if our expression isn ' t first on the line , just use the start <nl> / / of the line <nl> @ @ - 170 , 12 + 173 , 20 @ @ public class MethodCallHandler extends AbstractExpressionHandler { <nl> <nl> @ Override <nl> public void checkIndentation ( ) { <nl> - final DetailAST exprNode = getMainAst ( ) . getParent ( ) ; <nl> - if ( exprNode . getParent ( ) . getType ( ) = = TokenTypes . SLIST ) { <nl> - final DetailAST methodName = getMainAst ( ) . getFirstChild ( ) ; <nl> - checkExpressionSubtree ( methodName , getIndent ( ) , false , false ) ; <nl> + DetailAST lparen = null ; <nl> + if ( getMainAst ( ) . getType ( ) = = TokenTypes . METHOD _ CALL ) { <nl> + final DetailAST exprNode = getMainAst ( ) . getParent ( ) ; <nl> + if ( exprNode . getParent ( ) . getType ( ) = = TokenTypes . SLIST ) { <nl> + checkExpressionSubtree ( getMainAst ( ) . getFirstChild ( ) , getIndent ( ) , false , false ) ; <nl> + lparen = getMainAst ( ) ; <nl> + } <nl> + } <nl> + else { <nl> + / / TokenTypes . CTOR _ CALL | TokenTypes . SUPER _ CTOR _ CALL <nl> + lparen = getMainAst ( ) . getFirstChild ( ) ; <nl> + } <nl> <nl> - final DetailAST lparen = getMainAst ( ) ; <nl> + if ( lparen ! = null ) { <nl> final DetailAST rparen = getMainAst ( ) . findFirstToken ( TokenTypes . RPAREN ) ; <nl> checkLeftParen ( lparen ) ; <nl> <nl> @ @ - 186 , 7 + 197 , 7 @ @ public class MethodCallHandler extends AbstractExpressionHandler { <nl> false , true ) ; <nl> <nl> checkRightParen ( lparen , rparen ) ; <nl> - checkWrappingIndentation ( getMainAst ( ) , getMethodCallLastNode ( getMainAst ( ) ) ) ; <nl> + checkWrappingIndentation ( getMainAst ( ) , getCallLastNode ( getMainAst ( ) ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 197 , 13 + 208 , 13 @ @ public class MethodCallHandler extends AbstractExpressionHandler { <nl> } <nl> <nl> / * * <nl> - * Returns method call right paren . <nl> + * Returns method or constructor call right paren . <nl> * @ param firstNode <nl> - * method call ast ( TokenTypes . METHOD _ CALL ) <nl> - * @ return ast node containing right paren for specified method call . If <nl> + * call ast ( TokenTypes . METHOD _ CALL | TokenTypes . CTOR _ CALL | TokenTypes . SUPER _ CTOR _ CALL ) <nl> + * @ return ast node containing right paren for specified method or constructor call . If <nl> * method calls are chained returns right paren for last call . <nl> * / <nl> - private static DetailAST getMethodCallLastNode ( DetailAST firstNode ) { <nl> + private static DetailAST getCallLastNode ( DetailAST firstNode ) { <nl> return firstNode . getLastChild ( ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 4b1e433 . . 73238df 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 449 , 6 + 449 , 34 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testCtorCall ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( IndentationCheck . class ) ; <nl> + <nl> + checkConfig . addAttribute ( " basicOffset " , " 2 " ) ; <nl> + checkConfig . addAttribute ( " braceAdjustment " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> + final String [ ] expected = { <nl> + " 28 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , <nl> + " 29 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 6 ) , <nl> + " 30 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 6 ) , <nl> + " 34 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , <nl> + " 35 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 6 ) , <nl> + " 39 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , <nl> + " 40 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 8 ) , <nl> + " 41 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 8 ) , <nl> + " 45 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , <nl> + " 46 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 8 ) , <nl> + " 50 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , <nl> + " 51 : " + getCheckMessage ( MSG _ ERROR , " ( " , 4 , 8 ) , <nl> + " 52 : " + getCheckMessage ( MSG _ ERROR , " x " , 4 , 8 ) , <nl> + " 56 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , <nl> + " 57 : " + getCheckMessage ( MSG _ ERROR , " method call lparen " , 4 , 6 ) , <nl> + } ; <nl> + verifyWarns ( checkConfig , getPath ( " InputIndentationCtorCall . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testMembers ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( IndentationCheck . class ) ; <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCtorCall . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCtorCall . java <nl> new file mode 100644 <nl> index 0000000 . . 6653212 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCtorCall . java <nl> @ @ - 0 , 0 + 1 , 93 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . indentation . indentation ; / / indent : 0 exp : 0 <nl> + <nl> + import java . util . function . Function ; / / indent : 0 exp : 0 <nl> + <nl> + / * * / / indent : 0 exp : 0 <nl> + * This test - input is intended to be checked using following configuration : / / indent : 1 exp : 1 <nl> + * / / indent : 1 exp : 1 <nl> + * basicOffset = 2 / / indent : 1 exp : 1 <nl> + * braceAdjustment = 0 / / indent : 1 exp : 1 <nl> + * lineWrappingIndentation = 4 / / indent : 1 exp : 1 <nl> + * tabWidth = 4 / / indent : 1 exp : 1 <nl> + * / / / indent : 1 exp : 1 <nl> + class InputIndentationCtorCall { / / indent : 0 exp : 0 <nl> + <nl> + class Base { / / indent : 2 exp : 2 <nl> + <nl> + public Base ( long arg ) { / / indent : 4 exp : 4 <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + public Base ( Function arg ) { / / indent : 4 exp : 4 <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + class Invalid extends Base { / / indent : 2 exp : 2 <nl> + <nl> + public Invalid ( long arg ) { / / indent : 4 exp : 4 <nl> + super ( / / indent : 4 exp : 6 warn <nl> + arg / / indent : 4 exp : 6 warn <nl> + + 1L ) ; / / indent : 4 exp : 6 warn <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + public Invalid ( ) { / / indent : 4 exp : 4 <nl> + this ( / / indent : 4 exp : 6 warn <nl> + 0L ) ; / / indent : 4 exp : 6 warn <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + public Invalid ( int arg ) { / / indent : 4 exp : 4 <nl> + new InputIndentationCtorCall ( ) . super ( / / indent : 4 exp : 6 warn <nl> + arg / / indent : 4 exp : 8 warn <nl> + + 1L ) ; / / indent : 4 exp : 8 warn <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + public Invalid ( InputIndentationCtorCall obj , long arg ) { / / indent : 4 exp : 4 <nl> + obj . super ( / / indent : 4 exp : 6 warn <nl> + arg ) ; / / indent : 4 exp : 8 warn <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + public Invalid ( InputIndentationCtorCall arg ) { / / indent : 4 exp : 4 <nl> + arg . super / / indent : 4 exp : 6 warn <nl> + ( / / indent : 4 exp : 8 warn <nl> + x - > x ) ; / / indent : 4 exp : 8 warn <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + public Invalid ( char arg ) { / / indent : 4 exp : 4 <nl> + this / / indent : 4 exp : 6 warn <nl> + ( ) ; / / indent : 4 exp : 6 warn <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + class Valid extends Base { / / indent : 2 exp : 2 <nl> + <nl> + public Valid ( int arg ) { / / indent : 4 exp : 4 <nl> + super ( / / indent : 6 exp : 6 <nl> + arg / / indent : 10 exp : 10 <nl> + + 1L ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + public Valid ( long arg ) { / / indent : 4 exp : 4 <nl> + new InputIndentationCtorCall ( ) . super ( / / indent : 6 exp : 6 <nl> + arg / / indent : 10 exp : 10 <nl> + + 1L ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + public Valid ( ) { / / indent : 4 exp : 4 <nl> + this ( / / indent : 6 exp : 6 <nl> + 0L ) ; / / indent : 10 exp : 10 <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + public Valid ( InputIndentationCtorCall obj , long arg ) { / / indent : 4 exp : 4 <nl> + obj . super ( / / indent : 6 exp : 6 <nl> + arg ) ; / / indent : 10 exp : 10 <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + public Valid ( InputIndentationCtorCall arg ) { / / indent : 4 exp : 4 <nl> + arg . super ( / / indent : 6 exp : 6 <nl> + x - > x ) ; / / indent : 10 exp : 10 <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + } / / indent : 0 exp : 0
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 729278a . . cb356b3 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 296 , 7 + 296 , 7 @ @ <nl> < dependency > <nl> < groupId > org . slf4j < / groupId > <nl> < artifactId > slf4j - simple < / artifactId > <nl> - < version > 1 . 7 . 19 < / version > <nl> + < version > 1 . 7 . 20 < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency >

TEST DIFF:
diff - - git a / . ci / shippable . sh b / . ci / shippable . sh 
 index 57df020 . . c250232 100755 
 - - - a / . ci / shippable . sh 
 + + + b / . ci / shippable . sh 
 @ @ - 106 , 13 + 106 , 11 @ @ pitest - indentation ) 
 " ForHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( forEach , expected , false , false ) ; < / span > < / pre > < / td > < / tr > " 
 " ForHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkWrappingIndentation ( getMainAst ( ) , getForLoopRightParen ( getMainAst ( ) ) ) ; < / span > < / pre > < / td > < / tr > " 
 " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > createdHandlers . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 - " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > register ( TokenTypes . CTOR _ CALL , MethodCallHandler . class ) ; < / span > < / pre > < / td > < / tr > " 
 " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > register ( TokenTypes . INDEX _ OP , IndexHandler . class ) ; < / span > < / pre > < / td > < / tr > " 
 " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > handlerFactory . clearCreatedHandlers ( ) ; < / span > < / pre > < / td > < / tr > " 
 " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > handlers . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > primordialHandler . checkIndentation ( ) ; < / span > < / pre > < / td > < / tr > " 
 " IndentLevel . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > for ( int i = levels . nextSetBit ( 0 ) ; i & # 62 ; = 0 ; < / span > < / pre > < / td > < / tr > " 
 - " MethodCallHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkLeftParen ( lparen ) ; < / span > < / pre > < / td > < / tr > " 
 " MethodDefHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( node . getLineNo ( ) & # 60 ; lineStart ) { < / span > < / pre > < / td > < / tr > " 
 " MethodDefHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( node . getType ( ) = = TokenTypes . ANNOTATION ) { < / span > < / pre > < / td > < / tr > " 
 " NewHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( type , getIndent ( ) , false , false ) ; < / span > < / pre > < / td > < / tr > " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java 
 index 115d953 . . a00d6f0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java 
 @ @ - 54 , 6 + 54 , 8 @ @ public class BlockParentHandler extends AbstractExpressionHandler { 
 TokenTypes . LITERAL _ RETURN , 
 TokenTypes . LITERAL _ THROW , 
 TokenTypes . LITERAL _ CONTINUE , 
 + TokenTypes . CTOR _ CALL , 
 + TokenTypes . SUPER _ CTOR _ CALL , 
 } ; 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java 
 index ec6f95b . . d7bad30 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java 
 @ @ - 67 , 6 + 67 , 7 @ @ public class HandlerFactory { 
 register ( TokenTypes . ARRAY _ INIT , ArrayInitHandler . class ) ; 
 register ( TokenTypes . METHOD _ CALL , MethodCallHandler . class ) ; 
 register ( TokenTypes . CTOR _ CALL , MethodCallHandler . class ) ; 
 + register ( TokenTypes . SUPER _ CTOR _ CALL , MethodCallHandler . class ) ; 
 register ( TokenTypes . LABELED _ STAT , LabelHandler . class ) ; 
 register ( TokenTypes . STATIC _ INIT , StaticInitHandler . class ) ; 
 register ( TokenTypes . INSTANCE _ INIT , SlistHandler . class ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java 
 index cc870a4 . . 26c3ea7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java 
 @ @ - 61 , 6 + 61 , 9 @ @ public class MethodCallHandler extends AbstractExpressionHandler { 
 indentLevel = new IndentLevel ( container . getIndent ( ) , getBasicOffset ( ) ) ; 
 } 
 } 
 + else if ( getMainAst ( ) . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ NEW ) { 
 + indentLevel = super . getIndentImpl ( ) ; 
 + } 
 else { 
 / / if our expression isn ' t first on the line , just use the start 
 / / of the line 
 @ @ - 170 , 12 + 173 , 20 @ @ public class MethodCallHandler extends AbstractExpressionHandler { 
 
 @ Override 
 public void checkIndentation ( ) { 
 - final DetailAST exprNode = getMainAst ( ) . getParent ( ) ; 
 - if ( exprNode . getParent ( ) . getType ( ) = = TokenTypes . SLIST ) { 
 - final DetailAST methodName = getMainAst ( ) . getFirstChild ( ) ; 
 - checkExpressionSubtree ( methodName , getIndent ( ) , false , false ) ; 
 + DetailAST lparen = null ; 
 + if ( getMainAst ( ) . getType ( ) = = TokenTypes . METHOD _ CALL ) { 
 + final DetailAST exprNode = getMainAst ( ) . getParent ( ) ; 
 + if ( exprNode . getParent ( ) . getType ( ) = = TokenTypes . SLIST ) { 
 + checkExpressionSubtree ( getMainAst ( ) . getFirstChild ( ) , getIndent ( ) , false , false ) ; 
 + lparen = getMainAst ( ) ; 
 + } 
 + } 
 + else { 
 + / / TokenTypes . CTOR _ CALL | TokenTypes . SUPER _ CTOR _ CALL 
 + lparen = getMainAst ( ) . getFirstChild ( ) ; 
 + } 
 
 - final DetailAST lparen = getMainAst ( ) ; 
 + if ( lparen ! = null ) { 
 final DetailAST rparen = getMainAst ( ) . findFirstToken ( TokenTypes . RPAREN ) ; 
 checkLeftParen ( lparen ) ; 
 
 @ @ - 186 , 7 + 197 , 7 @ @ public class MethodCallHandler extends AbstractExpressionHandler { 
 false , true ) ; 
 
 checkRightParen ( lparen , rparen ) ; 
 - checkWrappingIndentation ( getMainAst ( ) , getMethodCallLastNode ( getMainAst ( ) ) ) ; 
 + checkWrappingIndentation ( getMainAst ( ) , getCallLastNode ( getMainAst ( ) ) ) ; 
 } 
 } 
 } 
 @ @ - 197 , 13 + 208 , 13 @ @ public class MethodCallHandler extends AbstractExpressionHandler { 
 } 
 
 / * * 
 - * Returns method call right paren . 
 + * Returns method or constructor call right paren . 
 * @ param firstNode 
 - * method call ast ( TokenTypes . METHOD _ CALL ) 
 - * @ return ast node containing right paren for specified method call . If 
 + * call ast ( TokenTypes . METHOD _ CALL | TokenTypes . CTOR _ CALL | TokenTypes . SUPER _ CTOR _ CALL ) 
 + * @ return ast node containing right paren for specified method or constructor call . If 
 * method calls are chained returns right paren for last call . 
 * / 
 - private static DetailAST getMethodCallLastNode ( DetailAST firstNode ) { 
 + private static DetailAST getCallLastNode ( DetailAST firstNode ) { 
 return firstNode . getLastChild ( ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 4b1e433 . . 73238df 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 449 , 6 + 449 , 34 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testCtorCall ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( IndentationCheck . class ) ; 
 + 
 + checkConfig . addAttribute ( " basicOffset " , " 2 " ) ; 
 + checkConfig . addAttribute ( " braceAdjustment " , " 0 " ) ; 
 + checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 + final String [ ] expected = { 
 + " 28 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , 
 + " 29 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 6 ) , 
 + " 30 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 6 ) , 
 + " 34 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , 
 + " 35 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 6 ) , 
 + " 39 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , 
 + " 40 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 8 ) , 
 + " 41 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 8 ) , 
 + " 45 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , 
 + " 46 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 4 , 8 ) , 
 + " 50 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , 
 + " 51 : " + getCheckMessage ( MSG _ ERROR , " ( " , 4 , 8 ) , 
 + " 52 : " + getCheckMessage ( MSG _ ERROR , " x " , 4 , 8 ) , 
 + " 56 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " ctor def " , 4 , 6 ) , 
 + " 57 : " + getCheckMessage ( MSG _ ERROR , " method call lparen " , 4 , 6 ) , 
 + } ; 
 + verifyWarns ( checkConfig , getPath ( " InputIndentationCtorCall . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testMembers ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( IndentationCheck . class ) ; 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCtorCall . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCtorCall . java 
 new file mode 100644 
 index 0000000 . . 6653212 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCtorCall . java 
 @ @ - 0 , 0 + 1 , 93 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . indentation . indentation ; / / indent : 0 exp : 0 
 + 
 + import java . util . function . Function ; / / indent : 0 exp : 0 
 + 
 + / * * / / indent : 0 exp : 0 
 + * This test - input is intended to be checked using following configuration : / / indent : 1 exp : 1 
 + * / / indent : 1 exp : 1 
 + * basicOffset = 2 / / indent : 1 exp : 1 
 + * braceAdjustment = 0 / / indent : 1 exp : 1 
 + * lineWrappingIndentation = 4 / / indent : 1 exp : 1 
 + * tabWidth = 4 / / indent : 1 exp : 1 
 + * / / / indent : 1 exp : 1 
 + class InputIndentationCtorCall { / / indent : 0 exp : 0 
 + 
 + class Base { / / indent : 2 exp : 2 
 + 
 + public Base ( long arg ) { / / indent : 4 exp : 4 
 + } / / indent : 4 exp : 4 
 + 
 + public Base ( Function arg ) { / / indent : 4 exp : 4 
 + } / / indent : 4 exp : 4 
 + 
 + } / / indent : 2 exp : 2 
 + 
 + class Invalid extends Base { / / indent : 2 exp : 2 
 + 
 + public Invalid ( long arg ) { / / indent : 4 exp : 4 
 + super ( / / indent : 4 exp : 6 warn 
 + arg / / indent : 4 exp : 6 warn 
 + + 1L ) ; / / indent : 4 exp : 6 warn 
 + } / / indent : 4 exp : 4 
 + 
 + public Invalid ( ) { / / indent : 4 exp : 4 
 + this ( / / indent : 4 exp : 6 warn 
 + 0L ) ; / / indent : 4 exp : 6 warn 
 + } / / indent : 4 exp : 4 
 + 
 + public Invalid ( int arg ) { / / indent : 4 exp : 4 
 + new InputIndentationCtorCall ( ) . super ( / / indent : 4 exp : 6 warn 
 + arg / / indent : 4 exp : 8 warn 
 + + 1L ) ; / / indent : 4 exp : 8 warn 
 + } / / indent : 4 exp : 4 
 + 
 + public Invalid ( InputIndentationCtorCall obj , long arg ) { / / indent : 4 exp : 4 
 + obj . super ( / / indent : 4 exp : 6 warn 
 + arg ) ; / / indent : 4 exp : 8 warn 
 + } / / indent : 4 exp : 4 
 + 
 + public Invalid ( InputIndentationCtorCall arg ) { / / indent : 4 exp : 4 
 + arg . super / / indent : 4 exp : 6 warn 
 + ( / / indent : 4 exp : 8 warn 
 + x - > x ) ; / / indent : 4 exp : 8 warn 
 + } / / indent : 4 exp : 4 
 + 
 + public Invalid ( char arg ) { / / indent : 4 exp : 4 
 + this / / indent : 4 exp : 6 warn 
 + ( ) ; / / indent : 4 exp : 6 warn 
 + } / / indent : 4 exp : 4 
 + 
 + } / / indent : 2 exp : 2 
 + 
 + class Valid extends Base { / / indent : 2 exp : 2 
 + 
 + public Valid ( int arg ) { / / indent : 4 exp : 4 
 + super ( / / indent : 6 exp : 6 
 + arg / / indent : 10 exp : 10 
 + + 1L ) ; / / indent : 12 exp : 12 
 + } / / indent : 4 exp : 4 
 + 
 + public Valid ( long arg ) { / / indent : 4 exp : 4 
 + new InputIndentationCtorCall ( ) . super ( / / indent : 6 exp : 6 
 + arg / / indent : 10 exp : 10 
 + + 1L ) ; / / indent : 12 exp : 12 
 + } / / indent : 4 exp : 4 
 + 
 + public Valid ( ) { / / indent : 4 exp : 4 
 + this ( / / indent : 6 exp : 6 
 + 0L ) ; / / indent : 10 exp : 10 
 + } / / indent : 4 exp : 4 
 + 
 + public Valid ( InputIndentationCtorCall obj , long arg ) { / / indent : 4 exp : 4 
 + obj . super ( / / indent : 6 exp : 6 
 + arg ) ; / / indent : 10 exp : 10 
 + } / / indent : 4 exp : 4 
 + 
 + public Valid ( InputIndentationCtorCall arg ) { / / indent : 4 exp : 4 
 + arg . super ( / / indent : 6 exp : 6 
 + x - > x ) ; / / indent : 10 exp : 10 
 + } / / indent : 4 exp : 4 
 + 
 + } / / indent : 2 exp : 2 
 + 
 + } / / indent : 0 exp : 0

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 729278a . . cb356b3 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 296 , 7 + 296 , 7 @ @ 
 < dependency > 
 < groupId > org . slf4j < / groupId > 
 < artifactId > slf4j - simple < / artifactId > 
 - < version > 1 . 7 . 19 < / version > 
 + < version > 1 . 7 . 20 < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency >
