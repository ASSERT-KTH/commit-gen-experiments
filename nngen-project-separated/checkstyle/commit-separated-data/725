BLEU SCORE: 0.048312524369621634

TEST MSG: minor : suppress non existing link for spotbugs plugin
GENERATED MSG: config : exlude for link of linkcheck validation - maven - plugin

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index c6405a5 . . 354f846 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1274 , 6 + 1274 , 8 @ @ <nl> < excludedLink > http : / / search . maven . org / * < / excludedLink > <nl> < ! - - codehaus does not exists anymore - - > <nl> < excludedLink > http : / / sonar - plugins . codehaus . org / maven - report < / excludedLink > <nl> + < ! - - this plugin does not have site at all - - > <nl> + < excludedLink > http : / / hazendaz . github . io / findbugs - maven - plugin / < / excludedLink > <nl> < ! - - SSLHandshakeException but page is opening - - > <nl> < excludedLink > http : / / www . sickboy . cz / checkstyle / < / excludedLink > <nl> < ! - - Excluded due to Maven Enforcer Plugin ' s issue # 234 : https : / / issues . apache . org / jira / browse / MENFORCER - 234 - - >
NEAREST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 34639cf . . d8f7a8c 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 132 , 7 + 132 , 7 @ @ <nl> <nl> < ! - - Suppressions from PMD configuration - - > <nl> < ! - - validateCli is not reasonable to split as encapsulation of logic will be damaged - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " Main \ . java " lines = " 169 " / > <nl> + < suppress checks = " CyclomaticComplexity " files = " Main \ . java " lines = " 181 " / > <nl> < ! - - JavadocMethodCheck , JavadocStyleCheck , JavadocUtils . getJavadocTags ( ) - deprecated - - > <nl> < suppress checks = " CyclomaticComplexity " files = " JavadocMethodCheck \ . java " / > <nl> < suppress checks = " CyclomaticComplexity " files = " JavadocStyleCheck \ . java " / > <nl> @ @ - 147 , 4 + 147 , 7 @ @ <nl> < suppress checks = " ParameterNumber " <nl> files = " LocalizedMessage . java " <nl> lines = " 105 , 143 , 174 " / > <nl> + <nl> + < ! - - Not reasonable to split as encapsulation of logic will be damaged . - - > <nl> + < suppress checks = " ExecutableStatementCount " files = " Main \ . java " lines = " 90 " / > <nl> < / suppressions > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> new file mode 100644 <nl> index 0000000 . . 27c7614 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> @ @ - 0 , 0 + 1 , 148 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . util . Locale ; <nl> + import java . util . regex . Pattern ; <nl> + <nl> + import antlr . RecognitionException ; <nl> + import antlr . TokenStreamException ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> + import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> + <nl> + / * * <nl> + * Class for printing AST to String . <nl> + * @ author Vladislav Lisetskii <nl> + * / <nl> + public final class AstTreeStringPrinter { <nl> + <nl> + / * * Newline pattern . * / <nl> + private static final Pattern NEWLINE = Pattern . compile ( " \ n " ) ; <nl> + / * * Return pattern . * / <nl> + private static final Pattern RETURN = Pattern . compile ( " \ r " ) ; <nl> + / * * Tab pattern . * / <nl> + private static final Pattern TAB = Pattern . compile ( " \ t " ) ; <nl> + <nl> + / * * Prevent instances . * / <nl> + private AstTreeStringPrinter ( ) { <nl> + / / no code <nl> + } <nl> + <nl> + / * * <nl> + * Parse a file and print the parse tree . <nl> + * @ param file the file to print . <nl> + * @ return the AST of the file in String form . <nl> + * @ throws IOException if the file could not be read . <nl> + * @ throws CheckstyleException if the file is not a Java source . <nl> + * / <nl> + public static String printFileAst ( File file ) throws IOException , CheckstyleException { <nl> + return printTree ( parseFile ( file ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Print AST . <nl> + * @ param ast the root AST node . <nl> + * @ return string AST . <nl> + * / <nl> + private static String printTree ( DetailAST ast ) { <nl> + final StringBuilder messageBuilder = new StringBuilder ( ) ; <nl> + DetailAST node = ast ; <nl> + while ( node ! = null ) { <nl> + messageBuilder . append ( getIndentation ( node ) ) <nl> + . append ( TokenUtils . getTokenName ( node . getType ( ) ) ) . append ( " - > " ) <nl> + . append ( excapeAllControlChars ( node . getText ( ) ) ) . append ( " [ " ) <nl> + . append ( node . getLineNo ( ) ) . append ( ' : ' ) . append ( node . getColumnNo ( ) ) . append ( " ] \ n " ) <nl> + . append ( printTree ( node . getFirstChild ( ) ) ) ; <nl> + node = node . getNextSibling ( ) ; <nl> + } <nl> + return messageBuilder . toString ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get indentation for an AST node . <nl> + * @ param ast the AST to get the indentation for . <nl> + * @ return the indentation in String format . <nl> + * / <nl> + private static String getIndentation ( DetailAST ast ) { <nl> + final boolean isLastChild = ast . getNextSibling ( ) = = null ; <nl> + DetailAST node = ast ; <nl> + final StringBuilder indentation = new StringBuilder ( ) ; <nl> + while ( node . getParent ( ) ! = null ) { <nl> + node = node . getParent ( ) ; <nl> + if ( node . getParent ( ) = = null ) { <nl> + if ( isLastChild ) { <nl> + / / only ASCII symbols must be used due to <nl> + / / problems with running tests on Windows <nl> + indentation . append ( " ` - - " ) ; <nl> + } <nl> + else { <nl> + indentation . append ( " | - - " ) ; <nl> + } <nl> + } <nl> + else { <nl> + if ( node . getNextSibling ( ) = = null ) { <nl> + indentation . insert ( 0 , " " ) ; <nl> + } <nl> + else { <nl> + indentation . insert ( 0 , " | " ) ; <nl> + } <nl> + } <nl> + } <nl> + return indentation . toString ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Replace all control chars with excaped symbols . <nl> + * @ param text the String to process . <nl> + * @ return the processed String with all control chars excaped . <nl> + * / <nl> + private static String excapeAllControlChars ( String text ) { <nl> + final String textWithoutNewlines = NEWLINE . matcher ( text ) . replaceAll ( " \ \ \ \ n " ) ; <nl> + final String textWithoutReturns = RETURN . matcher ( textWithoutNewlines ) . replaceAll ( " \ \ \ \ r " ) ; <nl> + return TAB . matcher ( textWithoutReturns ) . replaceAll ( " \ \ \ \ t " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Parse a file and return the parse tree . <nl> + * @ param file the file to parse . <nl> + * @ return the root node of the parse tree . <nl> + * @ throws IOException if the file could not be read . <nl> + * @ throws CheckstyleException if the file is not a Java source . <nl> + * / <nl> + private static DetailAST parseFile ( File file ) throws IOException , CheckstyleException { <nl> + final FileText text = new FileText ( file . getAbsoluteFile ( ) , <nl> + System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; <nl> + final FileContents contents = new FileContents ( text ) ; <nl> + try { <nl> + return TreeWalker . parse ( contents ) ; <nl> + } <nl> + catch ( RecognitionException | TokenStreamException ex ) { <nl> + final String exceptionMsg = String . format ( Locale . ROOT , <nl> + " % s occurred during the analysis of file % s . " , <nl> + ex . getClass ( ) . getSimpleName ( ) , file . getPath ( ) ) ; <nl> + throw new CheckstyleException ( exceptionMsg , ex ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index be1187b . . 630d20d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 67 , 6 + 67 , 9 @ @ public final class Main { <nl> / * * Name for the option ' o ' . * / <nl> private static final String OPTION _ O _ NAME = " o " ; <nl> <nl> + / * * Name for the option ' t ' . * / <nl> + private static final String OPTION _ T _ NAME = " t " ; <nl> + <nl> / * * Name for ' xml ' format . * / <nl> private static final String XML _ FORMAT _ NAME = " xml " ; <nl> <nl> @ @ - 81 , 10 + 84 , 10 @ @ public final class Main { <nl> * Loops over the files specified checking them for errors . The exit code <nl> * is the number of errors found in all the files . <nl> * @ param args the command line arguments . <nl> - * @ throws FileNotFoundException if there is a problem with files access <nl> + * @ throws IOException if there is a problem with files access <nl> * @ noinspection CallToPrintStackTrace <nl> * * / <nl> - public static void main ( String . . . args ) throws FileNotFoundException { <nl> + public static void main ( String . . . args ) throws IOException { <nl> int errorCounter = 0 ; <nl> boolean cliViolations = false ; <nl> / / provide proper exit code based on results . <nl> @ @ - 115 , 9 + 118 , 18 @ @ public final class Main { <nl> else { <nl> / / create config helper object <nl> final CliOptions config = convertCliToPojo ( commandLine ) ; <nl> - / / run Checker <nl> - errorCounter = runCheckstyle ( config ) ; <nl> - exitStatus = errorCounter ; <nl> + <nl> + if ( commandLine . hasOption ( OPTION _ T _ NAME ) ) { <nl> + / / print AST <nl> + final File file = config . files . get ( 0 ) ; <nl> + final String stringAst = AstTreeStringPrinter . printFileAst ( file ) ; <nl> + System . out . print ( stringAst ) ; <nl> + } <nl> + else { <nl> + / / run Checker <nl> + errorCounter = runCheckstyle ( config ) ; <nl> + exitStatus = errorCounter ; <nl> + } <nl> } <nl> } <nl> } <nl> @ @ - 168 , 8 + 180 , 23 @ @ public final class Main { <nl> * / <nl> private static List < String > validateCli ( CommandLine cmdLine ) { <nl> final List < String > result = new ArrayList < > ( ) ; <nl> + final List < File > filesToProcess = getFilesToProcess ( cmdLine . getArgs ( ) ) ; <nl> + <nl> + if ( filesToProcess . isEmpty ( ) ) { <nl> + result . add ( " Files to process must be specified , found 0 . " ) ; <nl> + } <nl> + / / ensure there is no conflicting options <nl> + else if ( cmdLine . hasOption ( OPTION _ T _ NAME ) ) { <nl> + if ( cmdLine . hasOption ( OPTION _ C _ NAME ) | | cmdLine . hasOption ( OPTION _ P _ NAME ) <nl> + | | cmdLine . hasOption ( OPTION _ F _ NAME ) | | cmdLine . hasOption ( OPTION _ O _ NAME ) ) { <nl> + result . add ( " Option ' - t ' cannot be used with other options . " ) ; <nl> + } <nl> + else if ( filesToProcess . size ( ) > 1 ) { <nl> + result . add ( " Printing AST is allowed for only one file . " ) ; <nl> + } <nl> + } <nl> / / ensure a configuration file is specified <nl> - if ( cmdLine . hasOption ( OPTION _ C _ NAME ) ) { <nl> + else if ( cmdLine . hasOption ( OPTION _ C _ NAME ) ) { <nl> final String configLocation = cmdLine . getOptionValue ( OPTION _ C _ NAME ) ; <nl> try { <nl> / / test location only <nl> @ @ - 202 , 10 + 229 , 6 @ @ public final class Main { <nl> result . add ( String . format ( " Permission denied : ' % s ' . " , outputLocation ) ) ; <nl> } <nl> } <nl> - final List < File > files = getFilesToProcess ( cmdLine . getArgs ( ) ) ; <nl> - if ( files . isEmpty ( ) ) { <nl> - result . add ( " Must specify files to process , found 0 . " ) ; <nl> - } <nl> } <nl> else { <nl> result . add ( " Must specify a config XML file . " ) ; <nl> @ @ - 421 , 6 + 444 , 7 @ @ public final class Main { <nl> " Sets the output format . ( % s | % s ) . Defaults to % s " , <nl> PLAIN _ FORMAT _ NAME , XML _ FORMAT _ NAME , PLAIN _ FORMAT _ NAME ) ) ; <nl> options . addOption ( OPTION _ V _ NAME , false , " Print product version and exit " ) ; <nl> + options . addOption ( OPTION _ T _ NAME , false , " Print Abstract Syntax Tree ( AST ) of the file " ) ; <nl> return options ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> new file mode 100644 <nl> index 0000000 . . 9b12cab <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> @ @ - 0 , 0 + 1 , 46 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + <nl> + public class AstTreeStringPrinterTest { <nl> + <nl> + private static String getNonCompilablePath ( String filename ) { <nl> + return " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " + filename ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { <nl> + assertUtilsClassHasPrivateConstructor ( AstTreeStringPrinter . class ) ; <nl> + } <nl> + <nl> + @ Test ( expected = CheckstyleException . class ) <nl> + public void testParseFileThrowable ( ) throws Exception { <nl> + AstTreeStringPrinter . printFileAst ( <nl> + new File ( getNonCompilablePath ( " InputAstTreeStringPrinter . java " ) ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 19a75c0 . . 6d62ea5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 101 , 6 + 101 , 7 @ @ public class MainTest { <nl> + " - f < arg > Sets the output format . ( plain | xml ) . Defaults to plain % n " <nl> + " - o < arg > Sets the output file . Defaults to stdout % n " <nl> + " - p < arg > Loads the properties file % n " <nl> + + " - t Print Abstract Syntax Tree ( AST ) of the file % n " <nl> + " - v Print product version and exit % n " ) ; <nl> <nl> assertEquals ( usage , systemOut . getLog ( ) ) ; <nl> @ @ - 132 , 8 + 133 , 8 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) { <nl> - assertEquals ( " Must specify files to process , found 0 . " + System . lineSeparator ( ) , <nl> - systemOut . getLog ( ) ) ; <nl> + assertEquals ( " Files to process must be specified , found 0 . " <nl> + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> @ @ - 586 , 4 + 587 , 122 @ @ public class MainTest { <nl> getNonCompilablePath ( " InputIncorrectClass . java " ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testPrintTreeOnMoreThanOneFile ( ) throws Exception { <nl> + <nl> + exit . expectSystemExitWithStatus ( - 1 ) ; <nl> + exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> + @ Override <nl> + public void checkAssertion ( ) { <nl> + assertEquals ( " Printing AST is allowed for only one file . " <nl> + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + Main . main ( " - t " , getPath ( " checks / metrics " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testPrintTreeOption ( ) throws Exception { <nl> + final String expected = " PACKAGE _ DEF - > package [ 1 : 0 ] \ n " <nl> + + " | - - ANNOTATIONS - > ANNOTATIONS [ 1 : 28 ] \ n " <nl> + + " | - - DOT - > . [ 1 : 28 ] \ n " <nl> + + " | | - - DOT - > . [ 1 : 22 ] \ n " <nl> + + " | | | - - DOT - > . [ 1 : 11 ] \ n " <nl> + + " | | | | - - IDENT - > com [ 1 : 8 ] \ n " <nl> + + " | | | ` - - IDENT - > puppycrawl [ 1 : 12 ] \ n " <nl> + + " | | ` - - IDENT - > tools [ 1 : 23 ] \ n " <nl> + + " | ` - - IDENT - > checkstyle [ 1 : 29 ] \ n " <nl> + + " ` - - SEMI - > ; [ 1 : 39 ] \ n " <nl> + + " CLASS _ DEF - > CLASS _ DEF [ 3 : 0 ] \ n " <nl> + + " | - - MODIFIERS - > MODIFIERS [ 3 : 0 ] \ n " <nl> + + " | ` - - LITERAL _ PUBLIC - > public [ 3 : 0 ] \ n " <nl> + + " | - - LITERAL _ CLASS - > class [ 3 : 7 ] \ n " <nl> + + " | - - IDENT - > InputMain [ 3 : 13 ] \ n " <nl> + + " ` - - OBJBLOCK - > OBJBLOCK [ 3 : 23 ] \ n " <nl> + + " | - - LCURLY - > { [ 3 : 23 ] \ n " <nl> + + " ` - - RCURLY - > } [ 4 : 0 ] \ n " <nl> + + " CLASS _ DEF - > CLASS _ DEF [ 5 : 0 ] \ n " <nl> + + " | - - MODIFIERS - > MODIFIERS [ 5 : 0 ] \ n " <nl> + + " | - - LITERAL _ CLASS - > class [ 5 : 0 ] \ n " <nl> + + " | - - IDENT - > InputMainInner [ 5 : 6 ] \ n " <nl> + + " ` - - OBJBLOCK - > OBJBLOCK [ 5 : 21 ] \ n " <nl> + + " | - - LCURLY - > { [ 5 : 21 ] \ n " <nl> + + " ` - - RCURLY - > } [ 6 : 0 ] \ n " ; <nl> + <nl> + exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> + @ Override <nl> + public void checkAssertion ( ) { <nl> + assertEquals ( expected , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> + } <nl> + } ) ; <nl> + Main . main ( " - t " , getPath ( " InputMain . java " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testConflictingOptionsTvsC ( ) throws Exception { <nl> + <nl> + exit . expectSystemExitWithStatus ( - 1 ) ; <nl> + exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> + @ Override <nl> + public void checkAssertion ( ) { <nl> + assertEquals ( " Option ' - t ' cannot be used with other options . " <nl> + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + Main . main ( " - c " , " / google _ checks . xml " , " - t " , getPath ( " checks / metrics " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testConflictingOptionsTvsP ( ) throws Exception { <nl> + <nl> + exit . expectSystemExitWithStatus ( - 1 ) ; <nl> + exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> + @ Override <nl> + public void checkAssertion ( ) { <nl> + assertEquals ( " Option ' - t ' cannot be used with other options . " <nl> + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + Main . main ( " - p " , getPath ( " mycheckstyle . properties " ) , " - t " , getPath ( " checks / metrics " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testConflictingOptionsTvsF ( ) throws Exception { <nl> + <nl> + exit . expectSystemExitWithStatus ( - 1 ) ; <nl> + exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> + @ Override <nl> + public void checkAssertion ( ) { <nl> + assertEquals ( " Option ' - t ' cannot be used with other options . " <nl> + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + Main . main ( " - f " , " plain " , " - t " , getPath ( " checks / metrics " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testConflictingOptionsTvsO ( ) throws Exception { <nl> + final File file = temporaryFolder . newFile ( " file . output " ) ; <nl> + <nl> + exit . expectSystemExitWithStatus ( - 1 ) ; <nl> + exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> + @ Override <nl> + public void checkAssertion ( ) { <nl> + assertEquals ( " Option ' - t ' cannot be used with other options . " <nl> + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + Main . main ( " - o " , file . getCanonicalPath ( ) , " - t " , getPath ( " checks / metrics " ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputAstTreeStringPrinter . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputAstTreeStringPrinter . java <nl> new file mode 100644 <nl> index 0000000 . . 66dfcfa <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputAstTreeStringPrinter . java <nl> @ @ - 0 , 0 + 1 @ @ <nl> + classD a { } <nl> \ No newline at end of file <nl> diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm <nl> index 38d1704 . . 8bc8395 100644 <nl> - - - a / src / xdocs / cmdline . xml . vm <nl> + + + b / src / xdocs / cmdline . xml . vm <nl> @ @ - 38 , 6 + 38 , 7 @ @ java - D & lt ; property & gt ; = & lt ; value & gt ; \ <nl> com . puppycrawl . tools . checkstyle . Main \ <nl> - c & lt ; configurationFile & gt ; \ <nl> [ - f & lt ; format & gt ; ] [ - p & lt ; propertiesFile & gt ; ] [ - o & lt ; file & gt ; ] \ <nl> + [ - t ] [ - v ] \ <nl> file . . . <nl> < / source > <nl> < / p > <nl> @ @ - 72 , 6 + 73 , 13 @ @ java - D & lt ; property & gt ; = & lt ; value & gt ; \ <nl> < code > - o file < / code > - specify the file to output <nl> to . <nl> < / li > <nl> + < li > <nl> + < code > - t < / code > - print Abstract Syntax Tree ( AST ) of the checked file . The option <nl> + cannot be used other options and requires exactly one file to run on to be specified . <nl> + < / li > <nl> + < li > <nl> + < code > - v < / code > - print product version and exit . Any other option is ignored . <nl> + < / li > <nl> < / ul > <nl> <nl> < p >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index c6405a5 . . 354f846 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1274 , 6 + 1274 , 8 @ @ 
 < excludedLink > http : / / search . maven . org / * < / excludedLink > 
 < ! - - codehaus does not exists anymore - - > 
 < excludedLink > http : / / sonar - plugins . codehaus . org / maven - report < / excludedLink > 
 + < ! - - this plugin does not have site at all - - > 
 + < excludedLink > http : / / hazendaz . github . io / findbugs - maven - plugin / < / excludedLink > 
 < ! - - SSLHandshakeException but page is opening - - > 
 < excludedLink > http : / / www . sickboy . cz / checkstyle / < / excludedLink > 
 < ! - - Excluded due to Maven Enforcer Plugin ' s issue # 234 : https : / / issues . apache . org / jira / browse / MENFORCER - 234 - - >

NEAREST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 34639cf . . d8f7a8c 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 132 , 7 + 132 , 7 @ @ 
 
 < ! - - Suppressions from PMD configuration - - > 
 < ! - - validateCli is not reasonable to split as encapsulation of logic will be damaged - - > 
 - < suppress checks = " CyclomaticComplexity " files = " Main \ . java " lines = " 169 " / > 
 + < suppress checks = " CyclomaticComplexity " files = " Main \ . java " lines = " 181 " / > 
 < ! - - JavadocMethodCheck , JavadocStyleCheck , JavadocUtils . getJavadocTags ( ) - deprecated - - > 
 < suppress checks = " CyclomaticComplexity " files = " JavadocMethodCheck \ . java " / > 
 < suppress checks = " CyclomaticComplexity " files = " JavadocStyleCheck \ . java " / > 
 @ @ - 147 , 4 + 147 , 7 @ @ 
 < suppress checks = " ParameterNumber " 
 files = " LocalizedMessage . java " 
 lines = " 105 , 143 , 174 " / > 
 + 
 + < ! - - Not reasonable to split as encapsulation of logic will be damaged . - - > 
 + < suppress checks = " ExecutableStatementCount " files = " Main \ . java " lines = " 90 " / > 
 < / suppressions > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 new file mode 100644 
 index 0000000 . . 27c7614 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 @ @ - 0 , 0 + 1 , 148 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . util . Locale ; 
 + import java . util . regex . Pattern ; 
 + 
 + import antlr . RecognitionException ; 
 + import antlr . TokenStreamException ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 + import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 + 
 + / * * 
 + * Class for printing AST to String . 
 + * @ author Vladislav Lisetskii 
 + * / 
 + public final class AstTreeStringPrinter { 
 + 
 + / * * Newline pattern . * / 
 + private static final Pattern NEWLINE = Pattern . compile ( " \ n " ) ; 
 + / * * Return pattern . * / 
 + private static final Pattern RETURN = Pattern . compile ( " \ r " ) ; 
 + / * * Tab pattern . * / 
 + private static final Pattern TAB = Pattern . compile ( " \ t " ) ; 
 + 
 + / * * Prevent instances . * / 
 + private AstTreeStringPrinter ( ) { 
 + / / no code 
 + } 
 + 
 + / * * 
 + * Parse a file and print the parse tree . 
 + * @ param file the file to print . 
 + * @ return the AST of the file in String form . 
 + * @ throws IOException if the file could not be read . 
 + * @ throws CheckstyleException if the file is not a Java source . 
 + * / 
 + public static String printFileAst ( File file ) throws IOException , CheckstyleException { 
 + return printTree ( parseFile ( file ) ) ; 
 + } 
 + 
 + / * * 
 + * Print AST . 
 + * @ param ast the root AST node . 
 + * @ return string AST . 
 + * / 
 + private static String printTree ( DetailAST ast ) { 
 + final StringBuilder messageBuilder = new StringBuilder ( ) ; 
 + DetailAST node = ast ; 
 + while ( node ! = null ) { 
 + messageBuilder . append ( getIndentation ( node ) ) 
 + . append ( TokenUtils . getTokenName ( node . getType ( ) ) ) . append ( " - > " ) 
 + . append ( excapeAllControlChars ( node . getText ( ) ) ) . append ( " [ " ) 
 + . append ( node . getLineNo ( ) ) . append ( ' : ' ) . append ( node . getColumnNo ( ) ) . append ( " ] \ n " ) 
 + . append ( printTree ( node . getFirstChild ( ) ) ) ; 
 + node = node . getNextSibling ( ) ; 
 + } 
 + return messageBuilder . toString ( ) ; 
 + } 
 + 
 + / * * 
 + * Get indentation for an AST node . 
 + * @ param ast the AST to get the indentation for . 
 + * @ return the indentation in String format . 
 + * / 
 + private static String getIndentation ( DetailAST ast ) { 
 + final boolean isLastChild = ast . getNextSibling ( ) = = null ; 
 + DetailAST node = ast ; 
 + final StringBuilder indentation = new StringBuilder ( ) ; 
 + while ( node . getParent ( ) ! = null ) { 
 + node = node . getParent ( ) ; 
 + if ( node . getParent ( ) = = null ) { 
 + if ( isLastChild ) { 
 + / / only ASCII symbols must be used due to 
 + / / problems with running tests on Windows 
 + indentation . append ( " ` - - " ) ; 
 + } 
 + else { 
 + indentation . append ( " | - - " ) ; 
 + } 
 + } 
 + else { 
 + if ( node . getNextSibling ( ) = = null ) { 
 + indentation . insert ( 0 , " " ) ; 
 + } 
 + else { 
 + indentation . insert ( 0 , " | " ) ; 
 + } 
 + } 
 + } 
 + return indentation . toString ( ) ; 
 + } 
 + 
 + / * * 
 + * Replace all control chars with excaped symbols . 
 + * @ param text the String to process . 
 + * @ return the processed String with all control chars excaped . 
 + * / 
 + private static String excapeAllControlChars ( String text ) { 
 + final String textWithoutNewlines = NEWLINE . matcher ( text ) . replaceAll ( " \ \ \ \ n " ) ; 
 + final String textWithoutReturns = RETURN . matcher ( textWithoutNewlines ) . replaceAll ( " \ \ \ \ r " ) ; 
 + return TAB . matcher ( textWithoutReturns ) . replaceAll ( " \ \ \ \ t " ) ; 
 + } 
 + 
 + / * * 
 + * Parse a file and return the parse tree . 
 + * @ param file the file to parse . 
 + * @ return the root node of the parse tree . 
 + * @ throws IOException if the file could not be read . 
 + * @ throws CheckstyleException if the file is not a Java source . 
 + * / 
 + private static DetailAST parseFile ( File file ) throws IOException , CheckstyleException { 
 + final FileText text = new FileText ( file . getAbsoluteFile ( ) , 
 + System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; 
 + final FileContents contents = new FileContents ( text ) ; 
 + try { 
 + return TreeWalker . parse ( contents ) ; 
 + } 
 + catch ( RecognitionException | TokenStreamException ex ) { 
 + final String exceptionMsg = String . format ( Locale . ROOT , 
 + " % s occurred during the analysis of file % s . " , 
 + ex . getClass ( ) . getSimpleName ( ) , file . getPath ( ) ) ; 
 + throw new CheckstyleException ( exceptionMsg , ex ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index be1187b . . 630d20d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 67 , 6 + 67 , 9 @ @ public final class Main { 
 / * * Name for the option ' o ' . * / 
 private static final String OPTION _ O _ NAME = " o " ; 
 
 + / * * Name for the option ' t ' . * / 
 + private static final String OPTION _ T _ NAME = " t " ; 
 + 
 / * * Name for ' xml ' format . * / 
 private static final String XML _ FORMAT _ NAME = " xml " ; 
 
 @ @ - 81 , 10 + 84 , 10 @ @ public final class Main { 
 * Loops over the files specified checking them for errors . The exit code 
 * is the number of errors found in all the files . 
 * @ param args the command line arguments . 
 - * @ throws FileNotFoundException if there is a problem with files access 
 + * @ throws IOException if there is a problem with files access 
 * @ noinspection CallToPrintStackTrace 
 * * / 
 - public static void main ( String . . . args ) throws FileNotFoundException { 
 + public static void main ( String . . . args ) throws IOException { 
 int errorCounter = 0 ; 
 boolean cliViolations = false ; 
 / / provide proper exit code based on results . 
 @ @ - 115 , 9 + 118 , 18 @ @ public final class Main { 
 else { 
 / / create config helper object 
 final CliOptions config = convertCliToPojo ( commandLine ) ; 
 - / / run Checker 
 - errorCounter = runCheckstyle ( config ) ; 
 - exitStatus = errorCounter ; 
 + 
 + if ( commandLine . hasOption ( OPTION _ T _ NAME ) ) { 
 + / / print AST 
 + final File file = config . files . get ( 0 ) ; 
 + final String stringAst = AstTreeStringPrinter . printFileAst ( file ) ; 
 + System . out . print ( stringAst ) ; 
 + } 
 + else { 
 + / / run Checker 
 + errorCounter = runCheckstyle ( config ) ; 
 + exitStatus = errorCounter ; 
 + } 
 } 
 } 
 } 
 @ @ - 168 , 8 + 180 , 23 @ @ public final class Main { 
 * / 
 private static List < String > validateCli ( CommandLine cmdLine ) { 
 final List < String > result = new ArrayList < > ( ) ; 
 + final List < File > filesToProcess = getFilesToProcess ( cmdLine . getArgs ( ) ) ; 
 + 
 + if ( filesToProcess . isEmpty ( ) ) { 
 + result . add ( " Files to process must be specified , found 0 . " ) ; 
 + } 
 + / / ensure there is no conflicting options 
 + else if ( cmdLine . hasOption ( OPTION _ T _ NAME ) ) { 
 + if ( cmdLine . hasOption ( OPTION _ C _ NAME ) | | cmdLine . hasOption ( OPTION _ P _ NAME ) 
 + | | cmdLine . hasOption ( OPTION _ F _ NAME ) | | cmdLine . hasOption ( OPTION _ O _ NAME ) ) { 
 + result . add ( " Option ' - t ' cannot be used with other options . " ) ; 
 + } 
 + else if ( filesToProcess . size ( ) > 1 ) { 
 + result . add ( " Printing AST is allowed for only one file . " ) ; 
 + } 
 + } 
 / / ensure a configuration file is specified 
 - if ( cmdLine . hasOption ( OPTION _ C _ NAME ) ) { 
 + else if ( cmdLine . hasOption ( OPTION _ C _ NAME ) ) { 
 final String configLocation = cmdLine . getOptionValue ( OPTION _ C _ NAME ) ; 
 try { 
 / / test location only 
 @ @ - 202 , 10 + 229 , 6 @ @ public final class Main { 
 result . add ( String . format ( " Permission denied : ' % s ' . " , outputLocation ) ) ; 
 } 
 } 
 - final List < File > files = getFilesToProcess ( cmdLine . getArgs ( ) ) ; 
 - if ( files . isEmpty ( ) ) { 
 - result . add ( " Must specify files to process , found 0 . " ) ; 
 - } 
 } 
 else { 
 result . add ( " Must specify a config XML file . " ) ; 
 @ @ - 421 , 6 + 444 , 7 @ @ public final class Main { 
 " Sets the output format . ( % s | % s ) . Defaults to % s " , 
 PLAIN _ FORMAT _ NAME , XML _ FORMAT _ NAME , PLAIN _ FORMAT _ NAME ) ) ; 
 options . addOption ( OPTION _ V _ NAME , false , " Print product version and exit " ) ; 
 + options . addOption ( OPTION _ T _ NAME , false , " Print Abstract Syntax Tree ( AST ) of the file " ) ; 
 return options ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 new file mode 100644 
 index 0000000 . . 9b12cab 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; 
 + 
 + import java . io . File ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + 
 + public class AstTreeStringPrinterTest { 
 + 
 + private static String getNonCompilablePath ( String filename ) { 
 + return " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " + filename ; 
 + } 
 + 
 + @ Test 
 + public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { 
 + assertUtilsClassHasPrivateConstructor ( AstTreeStringPrinter . class ) ; 
 + } 
 + 
 + @ Test ( expected = CheckstyleException . class ) 
 + public void testParseFileThrowable ( ) throws Exception { 
 + AstTreeStringPrinter . printFileAst ( 
 + new File ( getNonCompilablePath ( " InputAstTreeStringPrinter . java " ) ) ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 19a75c0 . . 6d62ea5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 101 , 6 + 101 , 7 @ @ public class MainTest { 
 + " - f < arg > Sets the output format . ( plain | xml ) . Defaults to plain % n " 
 + " - o < arg > Sets the output file . Defaults to stdout % n " 
 + " - p < arg > Loads the properties file % n " 
 + + " - t Print Abstract Syntax Tree ( AST ) of the file % n " 
 + " - v Print product version and exit % n " ) ; 
 
 assertEquals ( usage , systemOut . getLog ( ) ) ; 
 @ @ - 132 , 8 + 133 , 8 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) { 
 - assertEquals ( " Must specify files to process , found 0 . " + System . lineSeparator ( ) , 
 - systemOut . getLog ( ) ) ; 
 + assertEquals ( " Files to process must be specified , found 0 . " 
 + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 @ @ - 586 , 4 + 587 , 122 @ @ public class MainTest { 
 getNonCompilablePath ( " InputIncorrectClass . java " ) ) ; 
 } 
 
 + @ Test 
 + public void testPrintTreeOnMoreThanOneFile ( ) throws Exception { 
 + 
 + exit . expectSystemExitWithStatus ( - 1 ) ; 
 + exit . checkAssertionAfterwards ( new Assertion ( ) { 
 + @ Override 
 + public void checkAssertion ( ) { 
 + assertEquals ( " Printing AST is allowed for only one file . " 
 + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 + assertEquals ( " " , systemErr . getLog ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + Main . main ( " - t " , getPath ( " checks / metrics " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testPrintTreeOption ( ) throws Exception { 
 + final String expected = " PACKAGE _ DEF - > package [ 1 : 0 ] \ n " 
 + + " | - - ANNOTATIONS - > ANNOTATIONS [ 1 : 28 ] \ n " 
 + + " | - - DOT - > . [ 1 : 28 ] \ n " 
 + + " | | - - DOT - > . [ 1 : 22 ] \ n " 
 + + " | | | - - DOT - > . [ 1 : 11 ] \ n " 
 + + " | | | | - - IDENT - > com [ 1 : 8 ] \ n " 
 + + " | | | ` - - IDENT - > puppycrawl [ 1 : 12 ] \ n " 
 + + " | | ` - - IDENT - > tools [ 1 : 23 ] \ n " 
 + + " | ` - - IDENT - > checkstyle [ 1 : 29 ] \ n " 
 + + " ` - - SEMI - > ; [ 1 : 39 ] \ n " 
 + + " CLASS _ DEF - > CLASS _ DEF [ 3 : 0 ] \ n " 
 + + " | - - MODIFIERS - > MODIFIERS [ 3 : 0 ] \ n " 
 + + " | ` - - LITERAL _ PUBLIC - > public [ 3 : 0 ] \ n " 
 + + " | - - LITERAL _ CLASS - > class [ 3 : 7 ] \ n " 
 + + " | - - IDENT - > InputMain [ 3 : 13 ] \ n " 
 + + " ` - - OBJBLOCK - > OBJBLOCK [ 3 : 23 ] \ n " 
 + + " | - - LCURLY - > { [ 3 : 23 ] \ n " 
 + + " ` - - RCURLY - > } [ 4 : 0 ] \ n " 
 + + " CLASS _ DEF - > CLASS _ DEF [ 5 : 0 ] \ n " 
 + + " | - - MODIFIERS - > MODIFIERS [ 5 : 0 ] \ n " 
 + + " | - - LITERAL _ CLASS - > class [ 5 : 0 ] \ n " 
 + + " | - - IDENT - > InputMainInner [ 5 : 6 ] \ n " 
 + + " ` - - OBJBLOCK - > OBJBLOCK [ 5 : 21 ] \ n " 
 + + " | - - LCURLY - > { [ 5 : 21 ] \ n " 
 + + " ` - - RCURLY - > } [ 6 : 0 ] \ n " ; 
 + 
 + exit . checkAssertionAfterwards ( new Assertion ( ) { 
 + @ Override 
 + public void checkAssertion ( ) { 
 + assertEquals ( expected , systemOut . getLog ( ) ) ; 
 + assertEquals ( " " , systemErr . getLog ( ) ) ; 
 + } 
 + } ) ; 
 + Main . main ( " - t " , getPath ( " InputMain . java " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testConflictingOptionsTvsC ( ) throws Exception { 
 + 
 + exit . expectSystemExitWithStatus ( - 1 ) ; 
 + exit . checkAssertionAfterwards ( new Assertion ( ) { 
 + @ Override 
 + public void checkAssertion ( ) { 
 + assertEquals ( " Option ' - t ' cannot be used with other options . " 
 + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 + assertEquals ( " " , systemErr . getLog ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + Main . main ( " - c " , " / google _ checks . xml " , " - t " , getPath ( " checks / metrics " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testConflictingOptionsTvsP ( ) throws Exception { 
 + 
 + exit . expectSystemExitWithStatus ( - 1 ) ; 
 + exit . checkAssertionAfterwards ( new Assertion ( ) { 
 + @ Override 
 + public void checkAssertion ( ) { 
 + assertEquals ( " Option ' - t ' cannot be used with other options . " 
 + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 + assertEquals ( " " , systemErr . getLog ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + Main . main ( " - p " , getPath ( " mycheckstyle . properties " ) , " - t " , getPath ( " checks / metrics " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testConflictingOptionsTvsF ( ) throws Exception { 
 + 
 + exit . expectSystemExitWithStatus ( - 1 ) ; 
 + exit . checkAssertionAfterwards ( new Assertion ( ) { 
 + @ Override 
 + public void checkAssertion ( ) { 
 + assertEquals ( " Option ' - t ' cannot be used with other options . " 
 + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 + assertEquals ( " " , systemErr . getLog ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + Main . main ( " - f " , " plain " , " - t " , getPath ( " checks / metrics " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testConflictingOptionsTvsO ( ) throws Exception { 
 + final File file = temporaryFolder . newFile ( " file . output " ) ; 
 + 
 + exit . expectSystemExitWithStatus ( - 1 ) ; 
 + exit . checkAssertionAfterwards ( new Assertion ( ) { 
 + @ Override 
 + public void checkAssertion ( ) { 
 + assertEquals ( " Option ' - t ' cannot be used with other options . " 
 + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 + assertEquals ( " " , systemErr . getLog ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + Main . main ( " - o " , file . getCanonicalPath ( ) , " - t " , getPath ( " checks / metrics " ) ) ; 
 + } 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputAstTreeStringPrinter . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputAstTreeStringPrinter . java 
 new file mode 100644 
 index 0000000 . . 66dfcfa 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputAstTreeStringPrinter . java 
 @ @ - 0 , 0 + 1 @ @ 
 + classD a { } 
 \ No newline at end of file 
 diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm 
 index 38d1704 . . 8bc8395 100644 
 - - - a / src / xdocs / cmdline . xml . vm 
 + + + b / src / xdocs / cmdline . xml . vm 
 @ @ - 38 , 6 + 38 , 7 @ @ java - D & lt ; property & gt ; = & lt ; value & gt ; \ 
 com . puppycrawl . tools . checkstyle . Main \ 
 - c & lt ; configurationFile & gt ; \ 
 [ - f & lt ; format & gt ; ] [ - p & lt ; propertiesFile & gt ; ] [ - o & lt ; file & gt ; ] \ 
 + [ - t ] [ - v ] \ 
 file . . . 
 < / source > 
 < / p > 
 @ @ - 72 , 6 + 73 , 13 @ @ java - D & lt ; property & gt ; = & lt ; value & gt ; \ 
 < code > - o file < / code > - specify the file to output 
 to . 
 < / li > 
 + < li > 
 + < code > - t < / code > - print Abstract Syntax Tree ( AST ) of the checked file . The option 
 + cannot be used other options and requires exactly one file to run on to be specified . 
 + < / li > 
 + < li > 
 + < code > - v < / code > - print product version and exit . Any other option is ignored . 
 + < / li > 
 < / ul > 
 
 < p >
