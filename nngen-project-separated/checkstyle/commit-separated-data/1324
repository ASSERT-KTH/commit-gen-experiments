BLEU SCORE: 0.036967197413021805

TEST MSG: Issue # 2551 : added deprecated Check for backwards compatibility
GENERATED MSG: implementation for rfe # 715709 ( anonymous inner classes should be short )

TEST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 375dc6e . . df31414 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 170 , 6 + 170 , 12 @ @ <nl> or @ Image = ' AbstractCheck ' or @ Image = ' AbstractJavadocCheck ' ] " / > <nl> < / properties > <nl> < / rule > <nl> + < rule ref = " rulesets / java / design . xml / AbstractClassWithoutAnyMethod " > <nl> + < properties > <nl> + < ! - - Can not change API - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Check ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> <nl> < rule ref = " rulesets / java / design . xml / AvoidDeeplyNestedIfStmts " > <nl> < properties > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java <nl> new file mode 100644 <nl> index 0000000 . . e4eb820 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . api ; <nl> + <nl> + / * * <nl> + * The base class for checks . <nl> + * <nl> + * @ deprecated Class was renamed to support the abstract class naming <nl> + * convention . This class remains only to support backwards <nl> + * compatibility . Use { @ link AbstractCheck } instead . <nl> + * @ author Oliver Burn <nl> + * @ see < a href = " { @ docRoot } / . . / writingchecks . html " target = " _ top " > Writing your <nl> + * own checks < / a > <nl> + * @ noinspection EmptyClass <nl> + * / <nl> + @ Deprecated <nl> + public abstract class Check extends AbstractCheck { <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / CheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / CheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . 36b8609 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / CheckTest . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . api ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + <nl> + public class CheckTest { <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + @ Test <nl> + public void testInstanceOfCheck ( ) { <nl> + final Object module = new Check ( ) { <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return null ; <nl> + } <nl> + } ; <nl> + <nl> + Assert . assertTrue ( " Check must be an instance of AbstractCheck - 1 " , <nl> + module instanceof AbstractCheck ) ; <nl> + Assert . assertTrue ( " Check must be an instance of AbstractCheck - 2 " , <nl> + AbstractCheck . class . isInstance ( module ) ) ; <nl> + Assert . assertTrue ( " Check must be able to be assignable to AbstractCheck " , <nl> + AbstractCheck . class . isAssignableFrom ( Check . class ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / docs / releasenotes . html b / docs / releasenotes . html <nl> index 5559936 . . e126d02 100644 <nl> - - - a / docs / releasenotes . html <nl> + + + b / docs / releasenotes . html <nl> @ @ - 61 , 6 + 61 , 10 @ @ <nl> < li class = " body " > Added check for trailing comma in array <nl> initialization . ( module ArrayTrailingComma , request <nl> 696301 ) < / li > <nl> + <nl> + < li class = " body " > MagicNumberCheck now checks array initializers . ( request <nl> + 745949 ) < / li > <nl> + <nl> < / ul > <nl> <nl> < p class = " body " > <nl> @ @ - 75 , 6 + 79 , 9 @ @ <nl> < li class = " body " > Typo in HideUtilityClassConstructor description ( bug <nl> 743973 ) < / li > <nl> <nl> + < li class = " body " > False MagicNumberCheck errors for interfaces ( bug <nl> + 745941 ) < / li > <nl> + <nl> < / ul > <nl> <nl> <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheck . java <nl> index daa6f26 . . 3ac6b6f 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheck . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import java . util . Arrays ; <nl> <nl> @ @ - 141 , 6 + 142 , 9 @ @ public class MagicNumberCheck extends Check <nl> * / <nl> private boolean isConstantDefinition ( DetailAST aAST ) <nl> { <nl> + if ( ScopeUtils . inInterfaceBlock ( aAST ) ) { <nl> + return true ; <nl> + } <nl> DetailAST parent = aAST . getParent ( ) ; <nl> <nl> / / expression ? <nl> @ @ - 148 , 8 + 152 , 13 @ @ public class MagicNumberCheck extends Check <nl> return false ; <nl> } <nl> <nl> - / / assignment ? <nl> + / / array init ? <nl> parent = parent . getParent ( ) ; <nl> + if ( ( parent ! = null ) & & ( parent . getType ( ) = = TokenTypes . ARRAY _ INIT ) ) { <nl> + parent = parent . getParent ( ) ; <nl> + } <nl> + <nl> + / / assignment ? <nl> if ( ( parent = = null ) | | ( parent . getType ( ) ! = TokenTypes . ASSIGN ) ) { <nl> return false ; <nl> } <nl> diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / InputMagicNumber . java b / src / testinputs / com / puppycrawl / tools / checkstyle / InputMagicNumber . java <nl> index 0ce6483 . . 3e20b68 100644 <nl> - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / InputMagicNumber . java <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / InputMagicNumber . java <nl> @ @ - 72 , 3 + 72 , 16 @ @ public class InputMagicNumber { <nl> long longHexVar17 = 0X11l ; <nl> } <nl> } <nl> + <nl> + interface Blah <nl> + { <nl> + int LOW = 5 ; <nl> + int HIGH = 78 ; <nl> + } <nl> + <nl> + class ArrayMagicTest <nl> + { <nl> + private static final int [ ] NONMAGIC = { 3 } ; <nl> + private int [ ] magic = { 3 } ; <nl> + } <nl> + <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheckTest . java <nl> index 01f952c . . 8c3f39a 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheckTest . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ public class MagicNumberCheckTest <nl> " 69 : 24 : ' 0X011 ' is a magic number . " , <nl> " 71 : 29 : ' 0x10L ' is a magic number . " , <nl> " 72 : 29 : ' 0X11l ' is a magic number . " , <nl> + " 85 : 28 : ' 3 ' is a magic number . " , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputMagicNumber . java " ) , expected ) ; <nl> } <nl> @ @ - 110 , 6 + 111 , 7 @ @ public class MagicNumberCheckTest <nl> " 70 : 28 : ' 0x0L ' is a magic number . " , <nl> " 71 : 29 : ' 0x10L ' is a magic number . " , <nl> " 72 : 29 : ' 0X11l ' is a magic number . " , <nl> + " 85 : 28 : ' 3 ' is a magic number . " , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputMagicNumber . java " ) , expected ) ; <nl> } <nl> @ @ - 139 , 6 + 141 , 7 @ @ public class MagicNumberCheckTest <nl> " 69 : 24 : ' 0X011 ' is a magic number . " , <nl> " 71 : 29 : ' 0x10L ' is a magic number . " , <nl> " 72 : 29 : ' 0X11l ' is a magic number . " , <nl> + " 85 : 28 : ' 3 ' is a magic number . " , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputMagicNumber . java " ) , expected ) ; <nl> }

TEST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 375dc6e . . df31414 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 170 , 6 + 170 , 12 @ @ 
 or @ Image = ' AbstractCheck ' or @ Image = ' AbstractJavadocCheck ' ] " / > 
 < / properties > 
 < / rule > 
 + < rule ref = " rulesets / java / design . xml / AbstractClassWithoutAnyMethod " > 
 + < properties > 
 + < ! - - Can not change API - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Check ' ] " / > 
 + < / properties > 
 + < / rule > 
 
 < rule ref = " rulesets / java / design . xml / AvoidDeeplyNestedIfStmts " > 
 < properties > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java 
 new file mode 100644 
 index 0000000 . . e4eb820 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . api ; 
 + 
 + / * * 
 + * The base class for checks . 
 + * 
 + * @ deprecated Class was renamed to support the abstract class naming 
 + * convention . This class remains only to support backwards 
 + * compatibility . Use { @ link AbstractCheck } instead . 
 + * @ author Oliver Burn 
 + * @ see < a href = " { @ docRoot } / . . / writingchecks . html " target = " _ top " > Writing your 
 + * own checks < / a > 
 + * @ noinspection EmptyClass 
 + * / 
 + @ Deprecated 
 + public abstract class Check extends AbstractCheck { 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / CheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / CheckTest . java 
 new file mode 100644 
 index 0000000 . . 36b8609 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / CheckTest . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . api ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . Test ; 
 + 
 + public class CheckTest { 
 + @ SuppressWarnings ( " deprecation " ) 
 + @ Test 
 + public void testInstanceOfCheck ( ) { 
 + final Object module = new Check ( ) { 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) { 
 + return null ; 
 + } 
 + } ; 
 + 
 + Assert . assertTrue ( " Check must be an instance of AbstractCheck - 1 " , 
 + module instanceof AbstractCheck ) ; 
 + Assert . assertTrue ( " Check must be an instance of AbstractCheck - 2 " , 
 + AbstractCheck . class . isInstance ( module ) ) ; 
 + Assert . assertTrue ( " Check must be able to be assignable to AbstractCheck " , 
 + AbstractCheck . class . isAssignableFrom ( Check . class ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / docs / releasenotes . html b / docs / releasenotes . html 
 index 5559936 . . e126d02 100644 
 - - - a / docs / releasenotes . html 
 + + + b / docs / releasenotes . html 
 @ @ - 61 , 6 + 61 , 10 @ @ 
 < li class = " body " > Added check for trailing comma in array 
 initialization . ( module ArrayTrailingComma , request 
 696301 ) < / li > 
 + 
 + < li class = " body " > MagicNumberCheck now checks array initializers . ( request 
 + 745949 ) < / li > 
 + 
 < / ul > 
 
 < p class = " body " > 
 @ @ - 75 , 6 + 79 , 9 @ @ 
 < li class = " body " > Typo in HideUtilityClassConstructor description ( bug 
 743973 ) < / li > 
 
 + < li class = " body " > False MagicNumberCheck errors for interfaces ( bug 
 + 745941 ) < / li > 
 + 
 < / ul > 
 
 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheck . java 
 index daa6f26 . . 3ac6b6f 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheck . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import java . util . Arrays ; 
 
 @ @ - 141 , 6 + 142 , 9 @ @ public class MagicNumberCheck extends Check 
 * / 
 private boolean isConstantDefinition ( DetailAST aAST ) 
 { 
 + if ( ScopeUtils . inInterfaceBlock ( aAST ) ) { 
 + return true ; 
 + } 
 DetailAST parent = aAST . getParent ( ) ; 
 
 / / expression ? 
 @ @ - 148 , 8 + 152 , 13 @ @ public class MagicNumberCheck extends Check 
 return false ; 
 } 
 
 - / / assignment ? 
 + / / array init ? 
 parent = parent . getParent ( ) ; 
 + if ( ( parent ! = null ) & & ( parent . getType ( ) = = TokenTypes . ARRAY _ INIT ) ) { 
 + parent = parent . getParent ( ) ; 
 + } 
 + 
 + / / assignment ? 
 if ( ( parent = = null ) | | ( parent . getType ( ) ! = TokenTypes . ASSIGN ) ) { 
 return false ; 
 } 
 diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / InputMagicNumber . java b / src / testinputs / com / puppycrawl / tools / checkstyle / InputMagicNumber . java 
 index 0ce6483 . . 3e20b68 100644 
 - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / InputMagicNumber . java 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / InputMagicNumber . java 
 @ @ - 72 , 3 + 72 , 16 @ @ public class InputMagicNumber { 
 long longHexVar17 = 0X11l ; 
 } 
 } 
 + 
 + interface Blah 
 + { 
 + int LOW = 5 ; 
 + int HIGH = 78 ; 
 + } 
 + 
 + class ArrayMagicTest 
 + { 
 + private static final int [ ] NONMAGIC = { 3 } ; 
 + private int [ ] magic = { 3 } ; 
 + } 
 + 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheckTest . java 
 index 01f952c . . 8c3f39a 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / MagicNumberCheckTest . java 
 @ @ - 32 , 6 + 32 , 7 @ @ public class MagicNumberCheckTest 
 " 69 : 24 : ' 0X011 ' is a magic number . " , 
 " 71 : 29 : ' 0x10L ' is a magic number . " , 
 " 72 : 29 : ' 0X11l ' is a magic number . " , 
 + " 85 : 28 : ' 3 ' is a magic number . " , 
 } ; 
 verify ( checkConfig , getPath ( " InputMagicNumber . java " ) , expected ) ; 
 } 
 @ @ - 110 , 6 + 111 , 7 @ @ public class MagicNumberCheckTest 
 " 70 : 28 : ' 0x0L ' is a magic number . " , 
 " 71 : 29 : ' 0x10L ' is a magic number . " , 
 " 72 : 29 : ' 0X11l ' is a magic number . " , 
 + " 85 : 28 : ' 3 ' is a magic number . " , 
 } ; 
 verify ( checkConfig , getPath ( " InputMagicNumber . java " ) , expected ) ; 
 } 
 @ @ - 139 , 6 + 141 , 7 @ @ public class MagicNumberCheckTest 
 " 69 : 24 : ' 0X011 ' is a magic number . " , 
 " 71 : 29 : ' 0x10L ' is a magic number . " , 
 " 72 : 29 : ' 0X11l ' is a magic number . " , 
 + " 85 : 28 : ' 3 ' is a magic number . " , 
 } ; 
 verify ( checkConfig , getPath ( " InputMagicNumber . java " ) , expected ) ; 
 }
