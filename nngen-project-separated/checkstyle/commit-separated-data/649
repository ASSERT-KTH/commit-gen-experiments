BLEU SCORE: 0.0396825163954481

TEST MSG: Issue # 4724 : fix FieldNotUsedInToString IDEA violations
GENERATED MSG: Issue # 1566 : Fix for ' Don ' t use trailing comments ' ( partial )

TEST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 803bb80 . . 50dd6de 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 721 , 7 + 721 , 7 @ @ <nl> < / inspection _ tool > <nl> < inspection _ tool class = " FieldMayBeFinal " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " FieldMayBeStatic " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " FieldNotUsedInToString " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> + < inspection _ tool class = " FieldNotUsedInToString " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " FieldRepeatedlyAccessed " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < option name = " m _ ignoreFinalFields " value = " false " / > <nl> < / inspection _ tool > <nl> @ @ - 2118 , 6 + 2118 , 8 @ @ <nl> < option value = " NonFinalFieldReferencedInHashCode " / > <nl> < ! - - FileContentsHolder # getContence ( ) getter is deprecated - - > <nl> < option value = " CallToSimpleGetterFromWithinClass " / > <nl> + < ! - - violations in DetailAST will be addressed further - - > <nl> + < option value = " FieldNotUsedInToString " / > <nl> < / list > <nl> < / option > <nl> < / inspection _ tool > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / Comment . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / Comment . java <nl> index 2122437 . . 237e4a5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / Comment . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / Comment . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> + import java . util . Arrays ; <nl> + <nl> / * * <nl> * Representation of the comment block . <nl> * <nl> @ @ - 98 , 8 + 100 , 10 @ @ public class Comment implements TextBlock { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - final String separator = " : " ; <nl> - return " Comment [ " + startLineNo + separator + startColNo + " - " <nl> - + endLineNo + separator + endColNo + " ] " ; <nl> + return " Comment [ text = " + Arrays . toString ( text ) <nl> + + " , startLineNo = " + startLineNo <nl> + + " , endLineNo = " + endLineNo <nl> + + " , startColNo = " + startColNo <nl> + + " , endColNo = " + endColNo + ' ] ' ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> index c8ae67d . . dab8f8a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> * @ author Oliver Burn <nl> * @ author lkuehne <nl> * @ see < a href = " http : / / www . antlr . org / " > ANTLR Website < / a > <nl> + * @ noinspection FieldNotUsedInToString <nl> * / <nl> public final class DetailAST extends CommonASTWithHiddenTokens { <nl> private static final long serialVersionUID = - 2580884815577559874L ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java <nl> index bfcea71 . . d8aba2e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java <nl> @ @ - 95 , 7 + 95 , 7 @ @ public final class FullIdent { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - return getText ( ) + " [ " + lineNo + " x " + columnNo + " ] " ; <nl> + return String . join ( " " , elements ) + " [ " + lineNo + " x " + columnNo + " ] " ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index 6336a45 . . d80d39e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 476 , 9 + 476 , 11 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { <nl> @ Override <nl> public String toString ( ) { <nl> return " RegularClass [ name = " + getName ( ) <nl> - + " , in class = " + surroundingClass <nl> - + " , loadable = " + loadable <nl> - + " , class = " + classObj + " ] " ; <nl> + + " , in class = ' " + surroundingClass + ' \ ' ' <nl> + + " , check = " + check . hashCode ( ) <nl> + + " , loadable = " + loadable <nl> + + " , class = " + classObj <nl> + + ' ] ' ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineSet . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineSet . java <nl> index bbb9de6 . . c42a2e8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineSet . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineSet . java <nl> @ @ - 93 , 6 + 93 , 6 @ @ public class LineSet { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - return " LineSet [ firstLine = " + firstLine ( ) + " , lastLine = " + lastLine ( ) + " ] " ; <nl> + return " LineSet [ firstLine = " + lines . firstKey ( ) + " , lastLine = " + lines . lastKey ( ) + " ] " ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / HtmlTag . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / HtmlTag . java <nl> index 4a8fbac . . ec7ca74 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / HtmlTag . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / HtmlTag . java <nl> @ @ - 117 , 9 + 117 , 21 @ @ class HtmlTag { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> + return " HtmlTag [ id = ' " + id + ' \ ' ' <nl> + + " , lineNo = " + lineNo <nl> + + " , position = " + position <nl> + + " , text = ' " + text + ' \ ' ' <nl> + + " , closedTag = " + closedTag <nl> + + " , incompleteTag = " + incompleteTag + ' ] ' ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the comment line of text where this tag appears . <nl> + * @ return text of the tag <nl> + * / <nl> + public String getText ( ) { <nl> final int startOfText = position ; <nl> - final int endOfText = <nl> - Math . min ( startOfText + MAX _ TEXT _ LEN , text . length ( ) ) ; <nl> + final int endOfText = Math . min ( startOfText + MAX _ TEXT _ LEN , text . length ( ) ) ; <nl> return text . substring ( startOfText , endOfText ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java <nl> index 6067020 . . f8cb445 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> <nl> import java . util . Arrays ; <nl> + import java . util . Objects ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> @ @ - 169 , 7 + 170 , 13 @ @ public class JavadocNodeImpl implements DetailNode { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - return JavadocUtils . getTokenName ( type ) <nl> - + " [ " + lineNumber + " x " + columnNumber + " ] " ; <nl> + return " JavadocNodeImpl [ " <nl> + + " index = " + index <nl> + + " , type = " + JavadocUtils . getTokenName ( type ) <nl> + + " , text = ' " + text + ' \ ' ' <nl> + + " , lineNumber = " + lineNumber <nl> + + " , columnNumber = " + columnNumber <nl> + + " , children = " + Objects . hashCode ( children ) <nl> + + " , parent = " + parent + ' ] ' ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> index a1c681b . . 890a2d5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> @ @ - 370 , 7 + 370 , 7 @ @ public class JavadocStyleCheck <nl> log ( tag . getLineNo ( ) , <nl> tag . getPosition ( ) , <nl> MSG _ EXTRA _ HTML , <nl> - tag ) ; <nl> + tag . getText ( ) ) ; <nl> } <nl> else { <nl> / / See if there are any unclosed tags that were opened <nl> @ @ - 394 , 7 + 394 , 8 @ @ public class JavadocStyleCheck <nl> if ( ! isSingleTag ( htmlTag ) <nl> & & ! htmlTag . getId ( ) . equals ( lastFound ) <nl> & & ! typeParameters . contains ( htmlTag . getId ( ) ) ) { <nl> - log ( htmlTag . getLineNo ( ) , htmlTag . getPosition ( ) , MSG _ UNCLOSED _ HTML , htmlTag ) ; <nl> + log ( htmlTag . getLineNo ( ) , htmlTag . getPosition ( ) , <nl> + MSG _ UNCLOSED _ HTML , htmlTag . getText ( ) ) ; <nl> lastFound = htmlTag . getId ( ) ; <nl> } <nl> } <nl> @ @ - 436 , 7 + 437 , 7 @ @ public class JavadocStyleCheck <nl> log ( lastOpenTag . getLineNo ( ) , <nl> lastOpenTag . getPosition ( ) , <nl> MSG _ UNCLOSED _ HTML , <nl> - lastOpenTag ) ; <nl> + lastOpenTag . getText ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java <nl> index df51319 . . 505a3ca 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java <nl> @ @ - 91 , 8 + 91 , 10 @ @ public class JavadocTag { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - return " JavadocTag { tag = ' " + getTagName ( ) + " ' lineNo = " + lineNo + " , columnNo = " + columnNo <nl> - + " , firstArg = ' " + firstArg + " ' } " ; <nl> + return " JavadocTag [ tag = ' " + tagInfo . getName ( ) <nl> + + " ' lineNo = " + lineNo <nl> + + " , columnNo = " + columnNo <nl> + + " , firstArg = ' " + firstArg + " ' ] " ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> index ddf5bf6 . . c6afdb5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> @ @ - 411 , 9 + 411 , 13 @ @ public class SuppressWithNearbyCommentFilter <nl> } <nl> <nl> @ Override <nl> - public final String toString ( ) { <nl> - return " Tag [ lines = [ " + firstLine + " to " + lastLine <nl> - + " ] ; text = ' " + text + " ' ] " ; <nl> + public String toString ( ) { <nl> + return " Tag [ text = ' " + text + ' \ ' ' <nl> + + " , firstLine = " + firstLine <nl> + + " , lastLine = " + lastLine <nl> + + " , tagCheckRegexp = " + tagCheckRegexp <nl> + + " , tagMessageRegexp = " + tagMessageRegexp <nl> + + ' ] ' ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> index 50e0e54 . . e3d1710 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> @ @ - 450 , 9 + 450 , 13 @ @ public class SuppressionCommentFilter <nl> } <nl> <nl> @ Override <nl> - public final String toString ( ) { <nl> - return " Tag [ line = " + line + " ; col = " + column <nl> - + " ; on = " + reportingOn + " ; text = ' " + text + " ' ] " ; <nl> + public String toString ( ) { <nl> + return " Tag [ text = ' " + text + ' \ ' ' <nl> + + " , line = " + line <nl> + + " , column = " + column <nl> + + " , on = " + reportingOn <nl> + + " , tagCheckRegexp = " + tagCheckRegexp <nl> + + " , tagMessageRegexp = " + tagMessageRegexp + ' ] ' ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> index 09b78f8 . . 0f2c48f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class FileContentsTest { <nl> fileContents . reportCppComment ( 1 , 2 ) ; <nl> final Map < Integer , TextBlock > cppComments = fileContents . getCppComments ( ) ; <nl> <nl> - assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 6 ) . toString ( ) , <nl> + assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 6 ) . toString ( ) , <nl> cppComments . get ( 1 ) . toString ( ) ) ; <nl> } <nl> <nl> @ @ - 95 , 7 + 95 , 7 @ @ public class FileContentsTest { <nl> fileContents . reportCComment ( 1 , 2 , 1 , 2 ) ; <nl> final ImmutableMap < Integer , List < TextBlock > > comments = fileContents . getCComments ( ) ; <nl> <nl> - assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 2 ) . toString ( ) , <nl> + assertEquals ( new Comment ( new String [ ] { " / " } , 2 , 1 , 2 ) . toString ( ) , <nl> comments . get ( 1 ) . get ( 0 ) . toString ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> index 1c57f00 . . 04d5b77 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> @ @ - 100 , 15 + 100 , 17 @ @ public class AbstractTypeAwareCheckTest extends AbstractModuleTestSupport { <nl> int . class , int . class ) ; <nl> final Object token = tokenConstructor . newInstance ( " blablabla " , 1 , 1 ) ; <nl> <nl> + final JavadocMethodCheck methodCheck = new JavadocMethodCheck ( ) ; <nl> final Object regularClass = regularClassConstructor . newInstance ( token , " sur " , <nl> - new JavadocMethodCheck ( ) ) ; <nl> + methodCheck ) ; <nl> <nl> final Method toString = regularClass . getClass ( ) . getDeclaredMethod ( " toString " ) ; <nl> toString . setAccessible ( true ) ; <nl> final String result = ( String ) toString . invoke ( regularClass ) ; <nl> - assertEquals ( " Invalid toString result " , <nl> - " RegularClass [ name = Token [ blablabla ( 1x1 ) ] , in class = sur , loadable = true , class = null ] " , <nl> - result ) ; <nl> + final String expected = " RegularClass [ name = Token [ blablabla ( 1x1 ) ] , in class = ' sur ' , check = " <nl> + + methodCheck . hashCode ( ) + " , " + " loadable = true , class = null ] " ; <nl> + <nl> + assertEquals ( " Invalid toString result " , expected , result ) ; <nl> <nl> final Method setClazz = regularClass . getClass ( ) . getDeclaredMethod ( " setClazz " , Class . class ) ; <nl> setClazz . setAccessible ( true ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java <nl> index d1eefee . . 0b20d58 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java <nl> @ @ - 36 , 7 + 36 , 8 @ @ public class JavadocNodeImplTest { <nl> <nl> final String result = javadocNode . toString ( ) ; <nl> <nl> - assertEquals ( " CODE _ LITERAL [ 1x2 ] " , result ) ; <nl> + assertEquals ( " JavadocNodeImpl [ index = 0 , type = CODE _ LITERAL , text = ' null ' , lineNumber = 1 , " <nl> + + " columnNumber = 2 , children = 0 , parent = null ] " , result ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheckTest . java <nl> index 8ef8666 . . 6f1d438 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheckTest . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocStyleCheck . M <nl> import static com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocStyleCheck . MSG _ NO _ PERIOD ; <nl> import static com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocStyleCheck . MSG _ UNCLOSED _ HTML ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> + import static org . junit . Assert . assertEquals ; <nl> <nl> import java . io . File ; <nl> <nl> @ @ - 412 , 4 + 413 , 11 @ @ public class JavadocStyleCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputJavadocStyle . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testHtmlTagToString ( ) { <nl> + final HtmlTag tag = new HtmlTag ( " id " , 3 , 5 , true , false , " < a href = \ " URL \ " / > " ) ; <nl> + assertEquals ( " HtmlTag [ id = ' id ' , lineNo = 3 , position = 5 , text = ' < a href = \ " URL \ " / > ' , " <nl> + + " closedTag = true , incompleteTag = false ] " , tag . toString ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java <nl> index 3fa140f . . 5453d4c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java <nl> @ @ - 61 , 6 + 61 , 6 @ @ public class JavadocTagTest { <nl> <nl> final String result = javadocTag . toString ( ) ; <nl> <nl> - assertEquals ( " JavadocTag { tag = ' author ' lineNo = 0 , columnNo = 1 , firstArg = ' firstArg ' } " , result ) ; <nl> + assertEquals ( " JavadocTag [ tag = ' author ' lineNo = 0 , columnNo = 1 , firstArg = ' firstArg ' ] " , result ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> index 274f642 . . c2ce3c2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> @ @ - 308 , 7 + 308 , 8 @ @ public class SuppressWithNearbyCommentFilterTest <nl> " text " , 7 , new SuppressWithNearbyCommentFilter ( ) <nl> ) ; <nl> assertEquals ( " Invalid toString result " , <nl> - " Tag [ lines = [ 7 to 7 ] ; text = ' text ' ] " , tag . toString ( ) ) ; <nl> + " Tag [ text = ' text ' , firstLine = 7 , lastLine = 7 , " <nl> + + " tagCheckRegexp = . * , tagMessageRegexp = null ] " , tag . toString ( ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> index 05af45e . . bd1a9de 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> @ @ - 255 , 7 + 255 , 8 @ @ public class SuppressionCommentFilterTest <nl> ) ; <nl> <nl> assertEquals ( " Invalid toString result " , <nl> - " Tag [ line = 0 ; col = 1 ; on = false ; text = ' text ' ] " , tag . toString ( ) ) ; <nl> + " Tag [ text = ' text ' , line = 0 , column = 1 , on = false , " <nl> + + " tagCheckRegexp = . * , tagMessageRegexp = null ] " , tag . toString ( ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java <nl> index 804b491 . . 95afa4c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java <nl> @ @ - 44 , 7 + 44 , 9 @ @ public class CommentsTest extends AbstractTreeTestSupport { <nl> @ Test <nl> public void testToString ( ) { <nl> final Comment comment = new Comment ( new String [ ] { " value " } , 1 , 2 , 3 ) ; <nl> - Assert . assertEquals ( " Comment [ 2 : 1 - 2 : 3 ] " , comment . toString ( ) ) ; <nl> + Assert . assertEquals ( <nl> + " Comment [ text = [ value ] , startLineNo = 2 , endLineNo = 2 , startColNo = 1 , endColNo = 3 ] " , <nl> + comment . toString ( ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml <nl> index 980e492 . . 3f5fbf2 100644 <nl> - - - a / src / xdocs / config _ design . xml <nl> + + + b / src / xdocs / config _ design . xml <nl> @ @ - 459 , 13 + 459 , 32 @ @ public class StringUtils / / not final to allow subclassing <nl> < section name = " DesignForExtension " > <nl> < subsection name = " Description " > <nl> < p > <nl> - Checks that classes are designed for extension . More specifically , <nl> - it enforces a programming style where superclasses provide empty <nl> - " hooks " that can be implemented by subclasses . <nl> + The Check finds classes that are designed for extension ( subclass creation ) . <nl> + < / p > <nl> + < p > <nl> + Problem is described at " Effective Java , 2nd Edition by Josh Bloch " book , chapter " Item 17 : Design and document for inheritance or else prohibit it " . <nl> < / p > <nl> - <nl> < p > <nl> - The exact rule is that nonprivate , nonstatic methods of classes that <nl> + Some quotes from book : <nl> + < / p > <nl> + < blockquote > The class must document its self - use of overridable methods . <nl> + By convention , a method that invokes overridable methods contains a description <nl> + of these invocations at the end of its documentation comment . The description <nl> + begins with the phrase “ This implementation . ” <nl> + < / blockquote > <nl> + < blockquote > The best solution to this problem is to prohibit subclassing in classes that <nl> + are not designed and documented to be safely subclassed . <nl> + < / blockquote > <nl> + < blockquote > If a concrete class does not implement a standard interface , then you may <nl> + inconvenience some programmers by prohibiting inheritance . If you feel that you <nl> + must allow inheritance from such a class , one reasonable approach is to ensure <nl> + that the class never invokes any of its overridable methods and to document this <nl> + fact . In other words , eliminate the class ’ s self - use of overridable methods entirely . <nl> + In doing so , you ’ ll create a class that is reasonably safe to subclass . Overriding a <nl> + method will never affect the behavior of any other method . <nl> + < / blockquote > <nl> + < p > <nl> + The exact rule is that non - private , non - static methods of classes that <nl> can be subclassed must <nl> < / p > <nl> <nl> @ @ - 483 , 6 + 502 , 60 @ @ public class StringUtils / / not final to allow subclassing <nl> subclasses cannot corrupt the state of the superclass by forgetting <nl> to call the superclass ' s method . <nl> < / p > <nl> + < p > <nl> + More specifically , <nl> + it enforces a programming style where superclasses provide empty <nl> + " hooks " that can be implemented by subclasses . <nl> + < / p > <nl> + < p > <nl> + Example of code that cause violation as it is designed for extension : <nl> + < / p > <nl> + < source > <nl> + public abstract class Plant { <nl> + private String roots ; <nl> + private String trunk ; <nl> + <nl> + protected void validate ( ) { <nl> + if ( roots = = null ) throw new IllegalArgumentException ( " No roots ! " ) ; <nl> + if ( trunk = = null ) throw new IllegalArgumentException ( " No trunk ! " ) ; <nl> + } <nl> + <nl> + public abstract void grow ( ) ; <nl> + } <nl> + <nl> + public class Tree extends Plant { <nl> + private List leaves ; <nl> + <nl> + @ Overrides <nl> + protected void validate ( ) { <nl> + super . validate ( ) ; <nl> + if ( leaves = = null ) throw new IllegalArgumentException ( " No leaves ! " ) ; <nl> + } <nl> + <nl> + public void grow ( ) { <nl> + validate ( ) ; <nl> + } <nl> + } <nl> + < / source > <nl> + < p > <nl> + Example of code without violation : <nl> + < / p > <nl> + < source > <nl> + public abstract class Plant { <nl> + private String roots ; <nl> + private String trunk ; <nl> + <nl> + private void validate ( ) { <nl> + if ( roots = = null ) throw new IllegalArgumentException ( " No roots ! " ) ; <nl> + if ( trunk = = null ) throw new IllegalArgumentException ( " No trunk ! " ) ; <nl> + validateEx ( ) ; <nl> + } <nl> + <nl> + protected void validateEx ( ) { } <nl> + <nl> + public abstract void grow ( ) ; <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " >

TEST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 803bb80 . . 50dd6de 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 721 , 7 + 721 , 7 @ @ 
 < / inspection _ tool > 
 < inspection _ tool class = " FieldMayBeFinal " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " FieldMayBeStatic " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " FieldNotUsedInToString " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 + < inspection _ tool class = " FieldNotUsedInToString " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " FieldRepeatedlyAccessed " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < option name = " m _ ignoreFinalFields " value = " false " / > 
 < / inspection _ tool > 
 @ @ - 2118 , 6 + 2118 , 8 @ @ 
 < option value = " NonFinalFieldReferencedInHashCode " / > 
 < ! - - FileContentsHolder # getContence ( ) getter is deprecated - - > 
 < option value = " CallToSimpleGetterFromWithinClass " / > 
 + < ! - - violations in DetailAST will be addressed further - - > 
 + < option value = " FieldNotUsedInToString " / > 
 < / list > 
 < / option > 
 < / inspection _ tool > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / Comment . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / Comment . java 
 index 2122437 . . 237e4a5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / Comment . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / Comment . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package com . puppycrawl . tools . checkstyle . api ; 
 
 + import java . util . Arrays ; 
 + 
 / * * 
 * Representation of the comment block . 
 * 
 @ @ - 98 , 8 + 100 , 10 @ @ public class Comment implements TextBlock { 
 
 @ Override 
 public String toString ( ) { 
 - final String separator = " : " ; 
 - return " Comment [ " + startLineNo + separator + startColNo + " - " 
 - + endLineNo + separator + endColNo + " ] " ; 
 + return " Comment [ text = " + Arrays . toString ( text ) 
 + + " , startLineNo = " + startLineNo 
 + + " , endLineNo = " + endLineNo 
 + + " , startColNo = " + startColNo 
 + + " , endColNo = " + endColNo + ' ] ' ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 index c8ae67d . . dab8f8a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 * @ author Oliver Burn 
 * @ author lkuehne 
 * @ see < a href = " http : / / www . antlr . org / " > ANTLR Website < / a > 
 + * @ noinspection FieldNotUsedInToString 
 * / 
 public final class DetailAST extends CommonASTWithHiddenTokens { 
 private static final long serialVersionUID = - 2580884815577559874L ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java 
 index bfcea71 . . d8aba2e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java 
 @ @ - 95 , 7 + 95 , 7 @ @ public final class FullIdent { 
 
 @ Override 
 public String toString ( ) { 
 - return getText ( ) + " [ " + lineNo + " x " + columnNo + " ] " ; 
 + return String . join ( " " , elements ) + " [ " + lineNo + " x " + columnNo + " ] " ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index 6336a45 . . d80d39e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 476 , 9 + 476 , 11 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { 
 @ Override 
 public String toString ( ) { 
 return " RegularClass [ name = " + getName ( ) 
 - + " , in class = " + surroundingClass 
 - + " , loadable = " + loadable 
 - + " , class = " + classObj + " ] " ; 
 + + " , in class = ' " + surroundingClass + ' \ ' ' 
 + + " , check = " + check . hashCode ( ) 
 + + " , loadable = " + loadable 
 + + " , class = " + classObj 
 + + ' ] ' ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineSet . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineSet . java 
 index bbb9de6 . . c42a2e8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineSet . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineSet . java 
 @ @ - 93 , 6 + 93 , 6 @ @ public class LineSet { 
 
 @ Override 
 public String toString ( ) { 
 - return " LineSet [ firstLine = " + firstLine ( ) + " , lastLine = " + lastLine ( ) + " ] " ; 
 + return " LineSet [ firstLine = " + lines . firstKey ( ) + " , lastLine = " + lines . lastKey ( ) + " ] " ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / HtmlTag . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / HtmlTag . java 
 index 4a8fbac . . ec7ca74 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / HtmlTag . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / HtmlTag . java 
 @ @ - 117 , 9 + 117 , 21 @ @ class HtmlTag { 
 
 @ Override 
 public String toString ( ) { 
 + return " HtmlTag [ id = ' " + id + ' \ ' ' 
 + + " , lineNo = " + lineNo 
 + + " , position = " + position 
 + + " , text = ' " + text + ' \ ' ' 
 + + " , closedTag = " + closedTag 
 + + " , incompleteTag = " + incompleteTag + ' ] ' ; 
 + } 
 + 
 + / * * 
 + * Returns the comment line of text where this tag appears . 
 + * @ return text of the tag 
 + * / 
 + public String getText ( ) { 
 final int startOfText = position ; 
 - final int endOfText = 
 - Math . min ( startOfText + MAX _ TEXT _ LEN , text . length ( ) ) ; 
 + final int endOfText = Math . min ( startOfText + MAX _ TEXT _ LEN , text . length ( ) ) ; 
 return text . substring ( startOfText , endOfText ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java 
 index 6067020 . . f8cb445 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 
 import java . util . Arrays ; 
 + import java . util . Objects ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 @ @ - 169 , 7 + 170 , 13 @ @ public class JavadocNodeImpl implements DetailNode { 
 
 @ Override 
 public String toString ( ) { 
 - return JavadocUtils . getTokenName ( type ) 
 - + " [ " + lineNumber + " x " + columnNumber + " ] " ; 
 + return " JavadocNodeImpl [ " 
 + + " index = " + index 
 + + " , type = " + JavadocUtils . getTokenName ( type ) 
 + + " , text = ' " + text + ' \ ' ' 
 + + " , lineNumber = " + lineNumber 
 + + " , columnNumber = " + columnNumber 
 + + " , children = " + Objects . hashCode ( children ) 
 + + " , parent = " + parent + ' ] ' ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 index a1c681b . . 890a2d5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 @ @ - 370 , 7 + 370 , 7 @ @ public class JavadocStyleCheck 
 log ( tag . getLineNo ( ) , 
 tag . getPosition ( ) , 
 MSG _ EXTRA _ HTML , 
 - tag ) ; 
 + tag . getText ( ) ) ; 
 } 
 else { 
 / / See if there are any unclosed tags that were opened 
 @ @ - 394 , 7 + 394 , 8 @ @ public class JavadocStyleCheck 
 if ( ! isSingleTag ( htmlTag ) 
 & & ! htmlTag . getId ( ) . equals ( lastFound ) 
 & & ! typeParameters . contains ( htmlTag . getId ( ) ) ) { 
 - log ( htmlTag . getLineNo ( ) , htmlTag . getPosition ( ) , MSG _ UNCLOSED _ HTML , htmlTag ) ; 
 + log ( htmlTag . getLineNo ( ) , htmlTag . getPosition ( ) , 
 + MSG _ UNCLOSED _ HTML , htmlTag . getText ( ) ) ; 
 lastFound = htmlTag . getId ( ) ; 
 } 
 } 
 @ @ - 436 , 7 + 437 , 7 @ @ public class JavadocStyleCheck 
 log ( lastOpenTag . getLineNo ( ) , 
 lastOpenTag . getPosition ( ) , 
 MSG _ UNCLOSED _ HTML , 
 - lastOpenTag ) ; 
 + lastOpenTag . getText ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java 
 index df51319 . . 505a3ca 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java 
 @ @ - 91 , 8 + 91 , 10 @ @ public class JavadocTag { 
 
 @ Override 
 public String toString ( ) { 
 - return " JavadocTag { tag = ' " + getTagName ( ) + " ' lineNo = " + lineNo + " , columnNo = " + columnNo 
 - + " , firstArg = ' " + firstArg + " ' } " ; 
 + return " JavadocTag [ tag = ' " + tagInfo . getName ( ) 
 + + " ' lineNo = " + lineNo 
 + + " , columnNo = " + columnNo 
 + + " , firstArg = ' " + firstArg + " ' ] " ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 index ddf5bf6 . . c6afdb5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 @ @ - 411 , 9 + 411 , 13 @ @ public class SuppressWithNearbyCommentFilter 
 } 
 
 @ Override 
 - public final String toString ( ) { 
 - return " Tag [ lines = [ " + firstLine + " to " + lastLine 
 - + " ] ; text = ' " + text + " ' ] " ; 
 + public String toString ( ) { 
 + return " Tag [ text = ' " + text + ' \ ' ' 
 + + " , firstLine = " + firstLine 
 + + " , lastLine = " + lastLine 
 + + " , tagCheckRegexp = " + tagCheckRegexp 
 + + " , tagMessageRegexp = " + tagMessageRegexp 
 + + ' ] ' ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 index 50e0e54 . . e3d1710 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 @ @ - 450 , 9 + 450 , 13 @ @ public class SuppressionCommentFilter 
 } 
 
 @ Override 
 - public final String toString ( ) { 
 - return " Tag [ line = " + line + " ; col = " + column 
 - + " ; on = " + reportingOn + " ; text = ' " + text + " ' ] " ; 
 + public String toString ( ) { 
 + return " Tag [ text = ' " + text + ' \ ' ' 
 + + " , line = " + line 
 + + " , column = " + column 
 + + " , on = " + reportingOn 
 + + " , tagCheckRegexp = " + tagCheckRegexp 
 + + " , tagMessageRegexp = " + tagMessageRegexp + ' ] ' ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 index 09b78f8 . . 0f2c48f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 @ @ - 74 , 7 + 74 , 7 @ @ public class FileContentsTest { 
 fileContents . reportCppComment ( 1 , 2 ) ; 
 final Map < Integer , TextBlock > cppComments = fileContents . getCppComments ( ) ; 
 
 - assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 6 ) . toString ( ) , 
 + assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 6 ) . toString ( ) , 
 cppComments . get ( 1 ) . toString ( ) ) ; 
 } 
 
 @ @ - 95 , 7 + 95 , 7 @ @ public class FileContentsTest { 
 fileContents . reportCComment ( 1 , 2 , 1 , 2 ) ; 
 final ImmutableMap < Integer , List < TextBlock > > comments = fileContents . getCComments ( ) ; 
 
 - assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 2 ) . toString ( ) , 
 + assertEquals ( new Comment ( new String [ ] { " / " } , 2 , 1 , 2 ) . toString ( ) , 
 comments . get ( 1 ) . get ( 0 ) . toString ( ) ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 index 1c57f00 . . 04d5b77 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 @ @ - 100 , 15 + 100 , 17 @ @ public class AbstractTypeAwareCheckTest extends AbstractModuleTestSupport { 
 int . class , int . class ) ; 
 final Object token = tokenConstructor . newInstance ( " blablabla " , 1 , 1 ) ; 
 
 + final JavadocMethodCheck methodCheck = new JavadocMethodCheck ( ) ; 
 final Object regularClass = regularClassConstructor . newInstance ( token , " sur " , 
 - new JavadocMethodCheck ( ) ) ; 
 + methodCheck ) ; 
 
 final Method toString = regularClass . getClass ( ) . getDeclaredMethod ( " toString " ) ; 
 toString . setAccessible ( true ) ; 
 final String result = ( String ) toString . invoke ( regularClass ) ; 
 - assertEquals ( " Invalid toString result " , 
 - " RegularClass [ name = Token [ blablabla ( 1x1 ) ] , in class = sur , loadable = true , class = null ] " , 
 - result ) ; 
 + final String expected = " RegularClass [ name = Token [ blablabla ( 1x1 ) ] , in class = ' sur ' , check = " 
 + + methodCheck . hashCode ( ) + " , " + " loadable = true , class = null ] " ; 
 + 
 + assertEquals ( " Invalid toString result " , expected , result ) ; 
 
 final Method setClazz = regularClass . getClass ( ) . getDeclaredMethod ( " setClazz " , Class . class ) ; 
 setClazz . setAccessible ( true ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java 
 index d1eefee . . 0b20d58 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java 
 @ @ - 36 , 7 + 36 , 8 @ @ public class JavadocNodeImplTest { 
 
 final String result = javadocNode . toString ( ) ; 
 
 - assertEquals ( " CODE _ LITERAL [ 1x2 ] " , result ) ; 
 + assertEquals ( " JavadocNodeImpl [ index = 0 , type = CODE _ LITERAL , text = ' null ' , lineNumber = 1 , " 
 + + " columnNumber = 2 , children = 0 , parent = null ] " , result ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheckTest . java 
 index 8ef8666 . . 6f1d438 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheckTest . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocStyleCheck . M 
 import static com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocStyleCheck . MSG _ NO _ PERIOD ; 
 import static com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocStyleCheck . MSG _ UNCLOSED _ HTML ; 
 import static org . junit . Assert . assertArrayEquals ; 
 + import static org . junit . Assert . assertEquals ; 
 
 import java . io . File ; 
 
 @ @ - 412 , 4 + 413 , 11 @ @ public class JavadocStyleCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputJavadocStyle . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testHtmlTagToString ( ) { 
 + final HtmlTag tag = new HtmlTag ( " id " , 3 , 5 , true , false , " < a href = \ " URL \ " / > " ) ; 
 + assertEquals ( " HtmlTag [ id = ' id ' , lineNo = 3 , position = 5 , text = ' < a href = \ " URL \ " / > ' , " 
 + + " closedTag = true , incompleteTag = false ] " , tag . toString ( ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java 
 index 3fa140f . . 5453d4c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java 
 @ @ - 61 , 6 + 61 , 6 @ @ public class JavadocTagTest { 
 
 final String result = javadocTag . toString ( ) ; 
 
 - assertEquals ( " JavadocTag { tag = ' author ' lineNo = 0 , columnNo = 1 , firstArg = ' firstArg ' } " , result ) ; 
 + assertEquals ( " JavadocTag [ tag = ' author ' lineNo = 0 , columnNo = 1 , firstArg = ' firstArg ' ] " , result ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 index 274f642 . . c2ce3c2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 @ @ - 308 , 7 + 308 , 8 @ @ public class SuppressWithNearbyCommentFilterTest 
 " text " , 7 , new SuppressWithNearbyCommentFilter ( ) 
 ) ; 
 assertEquals ( " Invalid toString result " , 
 - " Tag [ lines = [ 7 to 7 ] ; text = ' text ' ] " , tag . toString ( ) ) ; 
 + " Tag [ text = ' text ' , firstLine = 7 , lastLine = 7 , " 
 + + " tagCheckRegexp = . * , tagMessageRegexp = null ] " , tag . toString ( ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 index 05af45e . . bd1a9de 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 @ @ - 255 , 7 + 255 , 8 @ @ public class SuppressionCommentFilterTest 
 ) ; 
 
 assertEquals ( " Invalid toString result " , 
 - " Tag [ line = 0 ; col = 1 ; on = false ; text = ' text ' ] " , tag . toString ( ) ) ; 
 + " Tag [ text = ' text ' , line = 0 , column = 1 , on = false , " 
 + + " tagCheckRegexp = . * , tagMessageRegexp = null ] " , tag . toString ( ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java 
 index 804b491 . . 95afa4c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java 
 @ @ - 44 , 7 + 44 , 9 @ @ public class CommentsTest extends AbstractTreeTestSupport { 
 @ Test 
 public void testToString ( ) { 
 final Comment comment = new Comment ( new String [ ] { " value " } , 1 , 2 , 3 ) ; 
 - Assert . assertEquals ( " Comment [ 2 : 1 - 2 : 3 ] " , comment . toString ( ) ) ; 
 + Assert . assertEquals ( 
 + " Comment [ text = [ value ] , startLineNo = 2 , endLineNo = 2 , startColNo = 1 , endColNo = 3 ] " , 
 + comment . toString ( ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml 
 index 980e492 . . 3f5fbf2 100644 
 - - - a / src / xdocs / config _ design . xml 
 + + + b / src / xdocs / config _ design . xml 
 @ @ - 459 , 13 + 459 , 32 @ @ public class StringUtils / / not final to allow subclassing 
 < section name = " DesignForExtension " > 
 < subsection name = " Description " > 
 < p > 
 - Checks that classes are designed for extension . More specifically , 
 - it enforces a programming style where superclasses provide empty 
 - " hooks " that can be implemented by subclasses . 
 + The Check finds classes that are designed for extension ( subclass creation ) . 
 + < / p > 
 + < p > 
 + Problem is described at " Effective Java , 2nd Edition by Josh Bloch " book , chapter " Item 17 : Design and document for inheritance or else prohibit it " . 
 < / p > 
 - 
 < p > 
 - The exact rule is that nonprivate , nonstatic methods of classes that 
 + Some quotes from book : 
 + < / p > 
 + < blockquote > The class must document its self - use of overridable methods . 
 + By convention , a method that invokes overridable methods contains a description 
 + of these invocations at the end of its documentation comment . The description 
 + begins with the phrase “ This implementation . ” 
 + < / blockquote > 
 + < blockquote > The best solution to this problem is to prohibit subclassing in classes that 
 + are not designed and documented to be safely subclassed . 
 + < / blockquote > 
 + < blockquote > If a concrete class does not implement a standard interface , then you may 
 + inconvenience some programmers by prohibiting inheritance . If you feel that you 
 + must allow inheritance from such a class , one reasonable approach is to ensure 
 + that the class never invokes any of its overridable methods and to document this 
 + fact . In other words , eliminate the class ’ s self - use of overridable methods entirely . 
 + In doing so , you ’ ll create a class that is reasonably safe to subclass . Overriding a 
 + method will never affect the behavior of any other method . 
 + < / blockquote > 
 + < p > 
 + The exact rule is that non - private , non - static methods of classes that 
 can be subclassed must 
 < / p > 
 
 @ @ - 483 , 6 + 502 , 60 @ @ public class StringUtils / / not final to allow subclassing 
 subclasses cannot corrupt the state of the superclass by forgetting 
 to call the superclass ' s method . 
 < / p > 
 + < p > 
 + More specifically , 
 + it enforces a programming style where superclasses provide empty 
 + " hooks " that can be implemented by subclasses . 
 + < / p > 
 + < p > 
 + Example of code that cause violation as it is designed for extension : 
 + < / p > 
 + < source > 
 + public abstract class Plant { 
 + private String roots ; 
 + private String trunk ; 
 + 
 + protected void validate ( ) { 
 + if ( roots = = null ) throw new IllegalArgumentException ( " No roots ! " ) ; 
 + if ( trunk = = null ) throw new IllegalArgumentException ( " No trunk ! " ) ; 
 + } 
 + 
 + public abstract void grow ( ) ; 
 + } 
 + 
 + public class Tree extends Plant { 
 + private List leaves ; 
 + 
 + @ Overrides 
 + protected void validate ( ) { 
 + super . validate ( ) ; 
 + if ( leaves = = null ) throw new IllegalArgumentException ( " No leaves ! " ) ; 
 + } 
 + 
 + public void grow ( ) { 
 + validate ( ) ; 
 + } 
 + } 
 + < / source > 
 + < p > 
 + Example of code without violation : 
 + < / p > 
 + < source > 
 + public abstract class Plant { 
 + private String roots ; 
 + private String trunk ; 
 + 
 + private void validate ( ) { 
 + if ( roots = = null ) throw new IllegalArgumentException ( " No roots ! " ) ; 
 + if ( trunk = = null ) throw new IllegalArgumentException ( " No trunk ! " ) ; 
 + validateEx ( ) ; 
 + } 
 + 
 + protected void validateEx ( ) { } 
 + 
 + public abstract void grow ( ) ; 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Properties " >
