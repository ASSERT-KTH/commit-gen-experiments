BLEU SCORE: 0.021504238591261653

TEST MSG: Issue # 2546 : added new check RegexpOnFilenameCheck
GENERATED MSG: part of refactoring to consolidate all the regexp checks .

TEST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 540dcb9 . . ed6feca 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 93 , 6 + 93 , 25 @ @ <nl> < property name = " fileExtensions " value = " java " / > <nl> < property name = " message " value = " First sentence in a comment should start with a capital letter " / > <nl> < / module > <nl> + < module name = " RegexpOnFilename " / > <nl> + < module name = " RegexpOnFilename " > <nl> + < property name = " folderPattern " value = " [ \ \ / ] src [ \ \ / ] \ w + [ \ \ / ] java [ \ \ / ] " / > <nl> + < property name = " fileNamePattern " value = " \ . java $ " / > <nl> + < property name = " match " value = " false " / > <nl> + < message key = " regexp . filepath . mismatch " value = " Only java files should be located in the ' ' src / * / java ' ' folders . " / > <nl> + < / module > <nl> + < module name = " RegexpOnFilename " > <nl> + < property name = " folderPattern " value = " [ \ \ / ] src [ \ \ / ] xdocs [ \ \ / ] " / > <nl> + < property name = " fileNamePattern " value = " \ . ( xml ) | ( vm ) $ " / > <nl> + < property name = " match " value = " false " / > <nl> + < message key = " regexp . filepath . mismatch " value = " All files in the ' ' src / xdocs ' ' folder should have the ' ' xml ' ' or ' ' vm ' ' extension . " / > <nl> + < / module > <nl> + < module name = " RegexpOnFilename " > <nl> + < property name = " folderPattern " value = " [ \ \ / ] src [ \ \ / ] it [ \ \ / ] java [ \ \ / ] " / > <nl> + < property name = " fileNamePattern " value = " ^ ( ( \ w + Test ) | ( Base \ w + ) ) \ . java $ " / > <nl> + < property name = " match " value = " false " / > <nl> + < message key = " regexp . filepath . mismatch " value = " All files in the ' ' src / it / java ' ' folder should be named ' ' * Test . java ' ' or ' ' Base * . java ' ' . " / > <nl> + < / module > <nl> <nl> < ! - - Size Violations - - > <nl> < module name = " FileLength " > <nl> @ @ - 288 , 7 + 307 , 9 @ @ <nl> <nl> < ! - - Misc - - > <nl> < module name = " ArrayTypeStyle " / > <nl> - < module name = " AvoidEscapedUnicodeCharacters " / > <nl> + < module name = " AvoidEscapedUnicodeCharacters " > <nl> + < property name = " allowIfAllCharactersEscaped " value = " true " / > <nl> + < / module > <nl> < module name = " CommentsIndentation " / > <nl> < module name = " DescendantToken " / > <nl> < module name = " FileContentsHolder " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> new file mode 100644 <nl> index 0000000 . . b98b6b9 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> @ @ - 0 , 0 + 1 , 384 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . util . List ; <nl> + import java . util . regex . Pattern ; <nl> + <nl> + import com . google . common . io . Files ; <nl> + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> + <nl> + / * * <nl> + * < p > <nl> + * Implementation of a check that looks for a file name and / or path match ( or <nl> + * mis - match ) against specified patterns . It can also be used to verify files <nl> + * match specific naming patterns not covered by other checks ( Ex : properties , <nl> + * xml , etc . ) . <nl> + * < / p > <nl> + * <nl> + * < p > <nl> + * When customizing the check , the properties are applied in a specific order . <nl> + * The fileExtensions property first picks only files that match any of the <nl> + * specific extensions supplied . Once files are matched against the <nl> + * fileExtensions , the match property is then used in conjuction with the <nl> + * patterns to determine if the check is looking for a match or mis - match on <nl> + * those files . If the fileNamePattern is supplied , the matching is only applied <nl> + * to the fileNamePattern and not the folderPattern . If no fileNamePattern is <nl> + * supplied , then matching is applied to the folderPattern only and will result <nl> + * in all files in a folder to be reported on violations . If no folderPattern is <nl> + * supplied , then all folders that checkstyle finds are examined for violations . <nl> + * The ignoreFileNameExtensions property drops the file extension and applies <nl> + * the fileNamePattern only to the rest of file name . For example , if the file <nl> + * is named ' test . java ' and this property is turned on , the pattern is only <nl> + * applied to ' test ' . <nl> + * < / p > <nl> + * <nl> + * < p > <nl> + * If this check is configured with no properties , then the default behavior of <nl> + * this check is to report file names with spaces in them . When at least one <nl> + * pattern property is supplied , the entire check is under the user ' s control to <nl> + * allow them to fully customize the behavior . <nl> + * < / p > <nl> + * <nl> + * < p > <nl> + * It is recommended that if you create your own pattern , to also specify a <nl> + * custom error message . This allows the error message printed to be clear what <nl> + * the violation is , especially if multiple RegexpOnFilename checks are used . <nl> + * Argument 0 for the message populates the check ' s folderPattern . Argument 1 <nl> + * for the message populates the check ' s fileNamePattern . The file name is not <nl> + * passed as an argument since it is part of CheckStyle ' s default error <nl> + * messages . <nl> + * < / p > <nl> + * <nl> + * < p > <nl> + * Check have following options : <nl> + * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * folderPattern - Regular expression to match the folder path against . Default <nl> + * value is null . < / li > <nl> + * <nl> + * < li > <nl> + * fileNamePattern - Regular expression to match the file name against . Default <nl> + * value is null . < / li > <nl> + * <nl> + * < li > <nl> + * match - Whether to look for a match or mis - match on the file name , if the <nl> + * fileNamePattern is supplied , otherwise it is applied on the folderPattern . <nl> + * Default value is true . < / li > <nl> + * <nl> + * < li > <nl> + * ignoreFileNameExtensions - Whether to ignore the file extension for the file <nl> + * name match . Default value is false . < / li > <nl> + * <nl> + * < li > <nl> + * fileExtensions - File type extension of files to process . If this is <nl> + * specified , then only files that match these types are examined with the other <nl> + * patterns . Default value is { } . < / li > <nl> + * < / ul > <nl> + * < br > <nl> + * <nl> + * < p > <nl> + * To configure the check to report file names that contain a space : <nl> + * < / p > <nl> + * <nl> + * < pre > <nl> + * & lt ; module name = & quot ; RegexpOnFilename & quot ; / & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check to force picture files to not be ' gif ' : <nl> + * < / p > <nl> + * <nl> + * < pre > <nl> + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; <nl> + * & lt ; property name = & quot ; fileNamePattern & quot ; value = & quot ; \ \ . gif $ & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * OR : <nl> + * < / p > <nl> + * <nl> + * < pre > <nl> + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; <nl> + * & lt ; property name = & quot ; fileNamePattern & quot ; value = & quot ; . & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; fileExtensions & quot ; value = & quot ; gif & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * <nl> + * < p > <nl> + * To configure the check to only allow property and xml files to be located in <nl> + * the resource folder : <nl> + * < / p > <nl> + * <nl> + * < pre > <nl> + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; <nl> + * & lt ; property name = & quot ; folderPattern & quot ; <nl> + * value = & quot ; [ \ \ / ] src [ \ \ / ] \ \ w + [ \ \ / ] resources [ \ \ / ] & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; match & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; fileExtensions & quot ; value = & quot ; properties , xml & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * <nl> + * < p > <nl> + * To configure the check to only allow Java and XML files in your folders use <nl> + * the below . <nl> + * < / p > <nl> + * <nl> + * < pre > <nl> + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; <nl> + * & lt ; property name = & quot ; fileNamePattern & quot ; value = & quot ; \ \ . ( java | xml ) $ & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; match & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check to only allow Java and XML files only in your source <nl> + * folder and ignore any other folders : <nl> + * < / p > <nl> + * <nl> + * < p > <nl> + * < b > Note : < / b > ' folderPattern ' must be specified if checkstyle is analyzing <nl> + * more than the normal source folder , like the ' bin ' folder where class files <nl> + * can be located . <nl> + * < / p > <nl> + * <nl> + * < pre > <nl> + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; <nl> + * & lt ; property name = & quot ; folderPattern & quot ; value = & quot ; [ \ \ / ] src [ \ \ / ] & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; fileNamePattern & quot ; value = & quot ; \ \ . ( java | xml ) $ & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; match & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check to only allow file names to be camel case : <nl> + * < / p > <nl> + * <nl> + * < pre > <nl> + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; <nl> + * & lt ; property name = & quot ; fileNamePattern & quot ; <nl> + * value = & quot ; ^ ( [ A - Z ] [ a - z0 - 9 ] + \ . ? ) + $ & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; match & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; ignoreFileNameExtensions & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * <nl> + * @ author Richard Veach <nl> + * / <nl> + public class RegexpOnFilenameCheck extends AbstractFileSetCheck { <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ MATCH = " regexp . filename . match " ; <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ MISMATCH = " regexp . filename . mismatch " ; <nl> + <nl> + / * * Compiled regexp to match a folder . * / <nl> + private Pattern folderPattern ; <nl> + / * * Compiled regexp to match a file . * / <nl> + private Pattern fileNamePattern ; <nl> + / * * Whether to look for a file name match or mismatch . * / <nl> + private boolean match = true ; <nl> + / * * Whether to ignore the file ' s extension when looking for matches . * / <nl> + private boolean ignoreFileNameExtensions ; <nl> + <nl> + / * * <nl> + * Setter for folder format . <nl> + * <nl> + * @ param folderPattern format of folder . <nl> + * @ throws org . apache . commons . beanutils . ConversionException if unable to <nl> + * create Pattern object . <nl> + * / <nl> + public void setFolderPattern ( String folderPattern ) { <nl> + this . folderPattern = CommonUtils . createPattern ( folderPattern ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Setter for file name format . <nl> + * <nl> + * @ param fileNamePattern format of file . <nl> + * @ throws org . apache . commons . beanutils . ConversionException if unable to <nl> + * create Pattern object . <nl> + * / <nl> + public void setFileNamePattern ( String fileNamePattern ) { <nl> + this . fileNamePattern = CommonUtils . createPattern ( fileNamePattern ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets whether the check should look for a file name match or mismatch . <nl> + * <nl> + * @ param match check ' s option for matching file names . <nl> + * / <nl> + public void setMatch ( boolean match ) { <nl> + this . match = match ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets whether file name matching should drop the file extension or not . <nl> + * <nl> + * @ param ignoreFileNameExtensions check ' s option for ignoring file extension . <nl> + * / <nl> + public void setIgnoreFileNameExtensions ( boolean ignoreFileNameExtensions ) { <nl> + this . ignoreFileNameExtensions = ignoreFileNameExtensions ; <nl> + } <nl> + <nl> + @ Override <nl> + public void init ( ) { <nl> + if ( fileNamePattern = = null & & folderPattern = = null ) { <nl> + fileNamePattern = CommonUtils . createPattern ( " \ \ s " ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> + final String fileName = getFileName ( file ) ; <nl> + final String folderPath = getFolderPath ( file ) ; <nl> + <nl> + if ( isMatchFolder ( folderPath ) & & isMatchFile ( fileName ) ) { <nl> + log ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Retrieves the file name from the given { @ code file } . <nl> + * <nl> + * @ param file Input file to examine . <nl> + * @ return The file name . <nl> + * / <nl> + private String getFileName ( File file ) { <nl> + String fileName = file . getName ( ) ; <nl> + <nl> + if ( ignoreFileNameExtensions ) { <nl> + fileName = Files . getNameWithoutExtension ( fileName ) ; <nl> + } <nl> + <nl> + return fileName ; <nl> + } <nl> + <nl> + / * * <nl> + * Retrieves the folder path from the given { @ code file } . <nl> + * <nl> + * @ param file Input file to examine . <nl> + * @ return The folder path . <nl> + * @ throws CheckstyleException if there is an error getting the canonical <nl> + * path of the { @ code file } . <nl> + * / <nl> + private static String getFolderPath ( File file ) throws CheckstyleException { <nl> + try { <nl> + return file . getParentFile ( ) . getCanonicalPath ( ) ; <nl> + } <nl> + catch ( IOException ex ) { <nl> + throw new CheckstyleException ( " unable to create canonical path names for " <nl> + + file . getAbsolutePath ( ) , ex ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks if the given { @ code folderPath } matches the specified <nl> + * { @ link # folderPattern } . <nl> + * <nl> + * @ param folderPath Input folder path to examine . <nl> + * @ return true if they do match . <nl> + * / <nl> + private boolean isMatchFolder ( String folderPath ) { <nl> + final boolean result ; <nl> + <nl> + / / null pattern always matches , regardless of value of ' match ' <nl> + if ( folderPattern = = null ) { <nl> + result = true ; <nl> + } <nl> + else { <nl> + final boolean useMatch ; <nl> + <nl> + / / null pattern means ' match ' applies to the folderPattern matching <nl> + if ( fileNamePattern = = null ) { <nl> + useMatch = match ; <nl> + } <nl> + else { <nl> + useMatch = true ; <nl> + } <nl> + <nl> + result = folderPattern . matcher ( folderPath ) . find ( ) = = useMatch ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if the given { @ code fileName } matches the specified <nl> + * { @ link # fileNamePattern } . <nl> + * <nl> + * @ param fileName Input file name to examine . <nl> + * @ return true if they do match . <nl> + * / <nl> + private boolean isMatchFile ( String fileName ) { <nl> + final boolean result ; <nl> + <nl> + / / null pattern always matches , regardless of value of ' match ' <nl> + if ( fileNamePattern = = null ) { <nl> + result = true ; <nl> + } <nl> + else { <nl> + result = fileNamePattern . matcher ( fileName ) . find ( ) = = match ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> + / * * Logs the errors for the check . * / <nl> + private void log ( ) { <nl> + final String folder = getStringOrDefault ( folderPattern , " " ) ; <nl> + final String fileName = getStringOrDefault ( fileNamePattern , " " ) ; <nl> + <nl> + if ( match ) { <nl> + log ( 0 , MSG _ MATCH , folder , fileName ) ; <nl> + } <nl> + else { <nl> + log ( 0 , MSG _ MISMATCH , folder , fileName ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Retrieves the String form of the { @ code pattern } or { @ code defaultString } <nl> + * if null . <nl> + * <nl> + * @ param pattern The pattern to convert . <nl> + * @ param defaultString The result to use if { @ code pattern } is null . <nl> + * @ return The String form of the { @ code pattern } . <nl> + * / <nl> + private static String getStringOrDefault ( Pattern pattern , String defaultString ) { <nl> + final String result ; <nl> + <nl> + if ( pattern = = null ) { <nl> + result = defaultString ; <nl> + } <nl> + else { <nl> + result = pattern . toString ( ) ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + } <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties <nl> index de1d4e1 . . 2bd37b6 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties <nl> @ @ - 8 , 3 + 8 , 5 @ @ duplicate . regexp = Found duplicate pattern ' ' { 0 } ' ' . <nl> regexp . empty = Empty ( null ) pattern . <nl> regexp . StackOverflowError = java . util . regex . Matcher caused a java . lang . StackOverflowError for pattern ' ' { 1 } ' ' ( you may be scanning a binary file instead of text ? ) . <nl> <nl> + regexp . filename . match = File match folder pattern ' ' { 0 } ' ' and file pattern ' ' { 1 } ' ' . <nl> + regexp . filename . mismatch = File not match folder pattern ' ' { 0 } ' ' and file pattern ' ' { 1 } ' ' . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages _ de . propert
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java <nl> index 7ea4f75 . . 5a11254 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java <nl> @ @ - 116 , 7 + 116 , 7 @ @ public abstract class Check extends AbstractViolationReporter <nl> } <nl> <nl> / * * <nl> - * Initialse the check . This is the time to verify that the check has <nl> + * Initialise the check . This is the time to verify that the check has <nl> * everything required to perform it job . <nl> * / <nl> public void init ( )

TEST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 540dcb9 . . ed6feca 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 93 , 6 + 93 , 25 @ @ 
 < property name = " fileExtensions " value = " java " / > 
 < property name = " message " value = " First sentence in a comment should start with a capital letter " / > 
 < / module > 
 + < module name = " RegexpOnFilename " / > 
 + < module name = " RegexpOnFilename " > 
 + < property name = " folderPattern " value = " [ \ \ / ] src [ \ \ / ] \ w + [ \ \ / ] java [ \ \ / ] " / > 
 + < property name = " fileNamePattern " value = " \ . java $ " / > 
 + < property name = " match " value = " false " / > 
 + < message key = " regexp . filepath . mismatch " value = " Only java files should be located in the ' ' src / * / java ' ' folders . " / > 
 + < / module > 
 + < module name = " RegexpOnFilename " > 
 + < property name = " folderPattern " value = " [ \ \ / ] src [ \ \ / ] xdocs [ \ \ / ] " / > 
 + < property name = " fileNamePattern " value = " \ . ( xml ) | ( vm ) $ " / > 
 + < property name = " match " value = " false " / > 
 + < message key = " regexp . filepath . mismatch " value = " All files in the ' ' src / xdocs ' ' folder should have the ' ' xml ' ' or ' ' vm ' ' extension . " / > 
 + < / module > 
 + < module name = " RegexpOnFilename " > 
 + < property name = " folderPattern " value = " [ \ \ / ] src [ \ \ / ] it [ \ \ / ] java [ \ \ / ] " / > 
 + < property name = " fileNamePattern " value = " ^ ( ( \ w + Test ) | ( Base \ w + ) ) \ . java $ " / > 
 + < property name = " match " value = " false " / > 
 + < message key = " regexp . filepath . mismatch " value = " All files in the ' ' src / it / java ' ' folder should be named ' ' * Test . java ' ' or ' ' Base * . java ' ' . " / > 
 + < / module > 
 
 < ! - - Size Violations - - > 
 < module name = " FileLength " > 
 @ @ - 288 , 7 + 307 , 9 @ @ 
 
 < ! - - Misc - - > 
 < module name = " ArrayTypeStyle " / > 
 - < module name = " AvoidEscapedUnicodeCharacters " / > 
 + < module name = " AvoidEscapedUnicodeCharacters " > 
 + < property name = " allowIfAllCharactersEscaped " value = " true " / > 
 + < / module > 
 < module name = " CommentsIndentation " / > 
 < module name = " DescendantToken " / > 
 < module name = " FileContentsHolder " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 new file mode 100644 
 index 0000000 . . b98b6b9 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 @ @ - 0 , 0 + 1 , 384 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . util . List ; 
 + import java . util . regex . Pattern ; 
 + 
 + import com . google . common . io . Files ; 
 + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 + 
 + / * * 
 + * < p > 
 + * Implementation of a check that looks for a file name and / or path match ( or 
 + * mis - match ) against specified patterns . It can also be used to verify files 
 + * match specific naming patterns not covered by other checks ( Ex : properties , 
 + * xml , etc . ) . 
 + * < / p > 
 + * 
 + * < p > 
 + * When customizing the check , the properties are applied in a specific order . 
 + * The fileExtensions property first picks only files that match any of the 
 + * specific extensions supplied . Once files are matched against the 
 + * fileExtensions , the match property is then used in conjuction with the 
 + * patterns to determine if the check is looking for a match or mis - match on 
 + * those files . If the fileNamePattern is supplied , the matching is only applied 
 + * to the fileNamePattern and not the folderPattern . If no fileNamePattern is 
 + * supplied , then matching is applied to the folderPattern only and will result 
 + * in all files in a folder to be reported on violations . If no folderPattern is 
 + * supplied , then all folders that checkstyle finds are examined for violations . 
 + * The ignoreFileNameExtensions property drops the file extension and applies 
 + * the fileNamePattern only to the rest of file name . For example , if the file 
 + * is named ' test . java ' and this property is turned on , the pattern is only 
 + * applied to ' test ' . 
 + * < / p > 
 + * 
 + * < p > 
 + * If this check is configured with no properties , then the default behavior of 
 + * this check is to report file names with spaces in them . When at least one 
 + * pattern property is supplied , the entire check is under the user ' s control to 
 + * allow them to fully customize the behavior . 
 + * < / p > 
 + * 
 + * < p > 
 + * It is recommended that if you create your own pattern , to also specify a 
 + * custom error message . This allows the error message printed to be clear what 
 + * the violation is , especially if multiple RegexpOnFilename checks are used . 
 + * Argument 0 for the message populates the check ' s folderPattern . Argument 1 
 + * for the message populates the check ' s fileNamePattern . The file name is not 
 + * passed as an argument since it is part of CheckStyle ' s default error 
 + * messages . 
 + * < / p > 
 + * 
 + * < p > 
 + * Check have following options : 
 + * < / p > 
 + * < ul > 
 + * < li > 
 + * folderPattern - Regular expression to match the folder path against . Default 
 + * value is null . < / li > 
 + * 
 + * < li > 
 + * fileNamePattern - Regular expression to match the file name against . Default 
 + * value is null . < / li > 
 + * 
 + * < li > 
 + * match - Whether to look for a match or mis - match on the file name , if the 
 + * fileNamePattern is supplied , otherwise it is applied on the folderPattern . 
 + * Default value is true . < / li > 
 + * 
 + * < li > 
 + * ignoreFileNameExtensions - Whether to ignore the file extension for the file 
 + * name match . Default value is false . < / li > 
 + * 
 + * < li > 
 + * fileExtensions - File type extension of files to process . If this is 
 + * specified , then only files that match these types are examined with the other 
 + * patterns . Default value is { } . < / li > 
 + * < / ul > 
 + * < br > 
 + * 
 + * < p > 
 + * To configure the check to report file names that contain a space : 
 + * < / p > 
 + * 
 + * < pre > 
 + * & lt ; module name = & quot ; RegexpOnFilename & quot ; / & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check to force picture files to not be ' gif ' : 
 + * < / p > 
 + * 
 + * < pre > 
 + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; 
 + * & lt ; property name = & quot ; fileNamePattern & quot ; value = & quot ; \ \ . gif $ & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * OR : 
 + * < / p > 
 + * 
 + * < pre > 
 + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; 
 + * & lt ; property name = & quot ; fileNamePattern & quot ; value = & quot ; . & quot ; / & gt ; 
 + * & lt ; property name = & quot ; fileExtensions & quot ; value = & quot ; gif & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * 
 + * < p > 
 + * To configure the check to only allow property and xml files to be located in 
 + * the resource folder : 
 + * < / p > 
 + * 
 + * < pre > 
 + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; 
 + * & lt ; property name = & quot ; folderPattern & quot ; 
 + * value = & quot ; [ \ \ / ] src [ \ \ / ] \ \ w + [ \ \ / ] resources [ \ \ / ] & quot ; / & gt ; 
 + * & lt ; property name = & quot ; match & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; property name = & quot ; fileExtensions & quot ; value = & quot ; properties , xml & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * 
 + * < p > 
 + * To configure the check to only allow Java and XML files in your folders use 
 + * the below . 
 + * < / p > 
 + * 
 + * < pre > 
 + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; 
 + * & lt ; property name = & quot ; fileNamePattern & quot ; value = & quot ; \ \ . ( java | xml ) $ & quot ; / & gt ; 
 + * & lt ; property name = & quot ; match & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check to only allow Java and XML files only in your source 
 + * folder and ignore any other folders : 
 + * < / p > 
 + * 
 + * < p > 
 + * < b > Note : < / b > ' folderPattern ' must be specified if checkstyle is analyzing 
 + * more than the normal source folder , like the ' bin ' folder where class files 
 + * can be located . 
 + * < / p > 
 + * 
 + * < pre > 
 + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; 
 + * & lt ; property name = & quot ; folderPattern & quot ; value = & quot ; [ \ \ / ] src [ \ \ / ] & quot ; / & gt ; 
 + * & lt ; property name = & quot ; fileNamePattern & quot ; value = & quot ; \ \ . ( java | xml ) $ & quot ; / & gt ; 
 + * & lt ; property name = & quot ; match & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check to only allow file names to be camel case : 
 + * < / p > 
 + * 
 + * < pre > 
 + * & lt ; module name = & quot ; RegexpOnFilename & quot ; & gt ; 
 + * & lt ; property name = & quot ; fileNamePattern & quot ; 
 + * value = & quot ; ^ ( [ A - Z ] [ a - z0 - 9 ] + \ . ? ) + $ & quot ; / & gt ; 
 + * & lt ; property name = & quot ; match & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; property name = & quot ; ignoreFileNameExtensions & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * 
 + * @ author Richard Veach 
 + * / 
 + public class RegexpOnFilenameCheck extends AbstractFileSetCheck { 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ MATCH = " regexp . filename . match " ; 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ MISMATCH = " regexp . filename . mismatch " ; 
 + 
 + / * * Compiled regexp to match a folder . * / 
 + private Pattern folderPattern ; 
 + / * * Compiled regexp to match a file . * / 
 + private Pattern fileNamePattern ; 
 + / * * Whether to look for a file name match or mismatch . * / 
 + private boolean match = true ; 
 + / * * Whether to ignore the file ' s extension when looking for matches . * / 
 + private boolean ignoreFileNameExtensions ; 
 + 
 + / * * 
 + * Setter for folder format . 
 + * 
 + * @ param folderPattern format of folder . 
 + * @ throws org . apache . commons . beanutils . ConversionException if unable to 
 + * create Pattern object . 
 + * / 
 + public void setFolderPattern ( String folderPattern ) { 
 + this . folderPattern = CommonUtils . createPattern ( folderPattern ) ; 
 + } 
 + 
 + / * * 
 + * Setter for file name format . 
 + * 
 + * @ param fileNamePattern format of file . 
 + * @ throws org . apache . commons . beanutils . ConversionException if unable to 
 + * create Pattern object . 
 + * / 
 + public void setFileNamePattern ( String fileNamePattern ) { 
 + this . fileNamePattern = CommonUtils . createPattern ( fileNamePattern ) ; 
 + } 
 + 
 + / * * 
 + * Sets whether the check should look for a file name match or mismatch . 
 + * 
 + * @ param match check ' s option for matching file names . 
 + * / 
 + public void setMatch ( boolean match ) { 
 + this . match = match ; 
 + } 
 + 
 + / * * 
 + * Sets whether file name matching should drop the file extension or not . 
 + * 
 + * @ param ignoreFileNameExtensions check ' s option for ignoring file extension . 
 + * / 
 + public void setIgnoreFileNameExtensions ( boolean ignoreFileNameExtensions ) { 
 + this . ignoreFileNameExtensions = ignoreFileNameExtensions ; 
 + } 
 + 
 + @ Override 
 + public void init ( ) { 
 + if ( fileNamePattern = = null & & folderPattern = = null ) { 
 + fileNamePattern = CommonUtils . createPattern ( " \ \ s " ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 + final String fileName = getFileName ( file ) ; 
 + final String folderPath = getFolderPath ( file ) ; 
 + 
 + if ( isMatchFolder ( folderPath ) & & isMatchFile ( fileName ) ) { 
 + log ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Retrieves the file name from the given { @ code file } . 
 + * 
 + * @ param file Input file to examine . 
 + * @ return The file name . 
 + * / 
 + private String getFileName ( File file ) { 
 + String fileName = file . getName ( ) ; 
 + 
 + if ( ignoreFileNameExtensions ) { 
 + fileName = Files . getNameWithoutExtension ( fileName ) ; 
 + } 
 + 
 + return fileName ; 
 + } 
 + 
 + / * * 
 + * Retrieves the folder path from the given { @ code file } . 
 + * 
 + * @ param file Input file to examine . 
 + * @ return The folder path . 
 + * @ throws CheckstyleException if there is an error getting the canonical 
 + * path of the { @ code file } . 
 + * / 
 + private static String getFolderPath ( File file ) throws CheckstyleException { 
 + try { 
 + return file . getParentFile ( ) . getCanonicalPath ( ) ; 
 + } 
 + catch ( IOException ex ) { 
 + throw new CheckstyleException ( " unable to create canonical path names for " 
 + + file . getAbsolutePath ( ) , ex ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks if the given { @ code folderPath } matches the specified 
 + * { @ link # folderPattern } . 
 + * 
 + * @ param folderPath Input folder path to examine . 
 + * @ return true if they do match . 
 + * / 
 + private boolean isMatchFolder ( String folderPath ) { 
 + final boolean result ; 
 + 
 + / / null pattern always matches , regardless of value of ' match ' 
 + if ( folderPattern = = null ) { 
 + result = true ; 
 + } 
 + else { 
 + final boolean useMatch ; 
 + 
 + / / null pattern means ' match ' applies to the folderPattern matching 
 + if ( fileNamePattern = = null ) { 
 + useMatch = match ; 
 + } 
 + else { 
 + useMatch = true ; 
 + } 
 + 
 + result = folderPattern . matcher ( folderPath ) . find ( ) = = useMatch ; 
 + } 
 + 
 + return result ; 
 + } 
 + 
 + / * * 
 + * Checks if the given { @ code fileName } matches the specified 
 + * { @ link # fileNamePattern } . 
 + * 
 + * @ param fileName Input file name to examine . 
 + * @ return true if they do match . 
 + * / 
 + private boolean isMatchFile ( String fileName ) { 
 + final boolean result ; 
 + 
 + / / null pattern always matches , regardless of value of ' match ' 
 + if ( fileNamePattern = = null ) { 
 + result = true ; 
 + } 
 + else { 
 + result = fileNamePattern . matcher ( fileName ) . find ( ) = = match ; 
 + } 
 + 
 + return result ; 
 + } 
 + 
 + / * * Logs the errors for the check . * / 
 + private void log ( ) { 
 + final String folder = getStringOrDefault ( folderPattern , " " ) ; 
 + final String fileName = getStringOrDefault ( fileNamePattern , " " ) ; 
 + 
 + if ( match ) { 
 + log ( 0 , MSG _ MATCH , folder , fileName ) ; 
 + } 
 + else { 
 + log ( 0 , MSG _ MISMATCH , folder , fileName ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Retrieves the String form of the { @ code pattern } or { @ code defaultString } 
 + * if null . 
 + * 
 + * @ param pattern The pattern to convert . 
 + * @ param defaultString The result to use if { @ code pattern } is null . 
 + * @ return The String form of the { @ code pattern } . 
 + * / 
 + private static String getStringOrDefault ( Pattern pattern , String defaultString ) { 
 + final String result ; 
 + 
 + if ( pattern = = null ) { 
 + result = defaultString ; 
 + } 
 + else { 
 + result = pattern . toString ( ) ; 
 + } 
 + 
 + return result ; 
 + } 
 + } 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties 
 index de1d4e1 . . 2bd37b6 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties 
 @ @ - 8 , 3 + 8 , 5 @ @ duplicate . regexp = Found duplicate pattern ' ' { 0 } ' ' . 
 regexp . empty = Empty ( null ) pattern . 
 regexp . StackOverflowError = java . util . regex . Matcher caused a java . lang . StackOverflowError for pattern ' ' { 1 } ' ' ( you may be scanning a binary file instead of text ? ) . 
 
 + regexp . filename . match = File match folder pattern ' ' { 0 } ' ' and file pattern ' ' { 1 } ' ' . 
 + regexp . filename . mismatch = File not match folder pattern ' ' { 0 } ' ' and file pattern ' ' { 1 } ' ' . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages _ de . propert

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java 
 index 7ea4f75 . . 5a11254 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java 
 @ @ - 116 , 7 + 116 , 7 @ @ public abstract class Check extends AbstractViolationReporter 
 } 
 
 / * * 
 - * Initialse the check . This is the time to verify that the check has 
 + * Initialise the check . This is the time to verify that the check has 
 * everything required to perform it job . 
 * / 
 public void init ( )
