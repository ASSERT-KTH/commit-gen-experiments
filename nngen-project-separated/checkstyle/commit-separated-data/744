BLEU SCORE: 0.018709718017288025

TEST MSG: Issue # 4353 : refactoring : remove ' final ' modifier from all arguments of method / c - tor at ImportControlCheck and around
GENERATED MSG: Fix typos in import and java8 packages . # 1555

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java <nl> index 496b4fc . . 1471729 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java <nl> @ @ - 65 , 8 + 65 , 8 @ @ class ImportControl { <nl> * @ param regex flags interpretation of pkgName as regex pattern . <nl> * @ param strategyOnMismatch strategy in a case if matching allow / disallow rule was not found . <nl> * / <nl> - ImportControl ( final String pkgName , final boolean regex , <nl> - final MismatchStrategy strategyOnMismatch ) { <nl> + ImportControl ( String pkgName , boolean regex , <nl> + MismatchStrategy strategyOnMismatch ) { <nl> parent = null ; <nl> this . regex = regex ; <nl> this . strategyOnMismatch = strategyOnMismatch ; <nl> @ @ - 88 , 7 + 88 , 7 @ @ class ImportControl { <nl> * @ param pkgName the name of the package . <nl> * @ param regex flags interpretation of pkgName as regex pattern . <nl> * / <nl> - ImportControl ( final String pkgName , final boolean regex ) { <nl> + ImportControl ( String pkgName , boolean regex ) { <nl> this ( pkgName , regex , MismatchStrategy . DISALLOWED ) ; <nl> } <nl> <nl> @ @ - 100 , 8 + 100 , 8 @ @ class ImportControl { <nl> * @ param regex flags interpretation of subPkg as regex pattern . <nl> * @ param strategyOnMismatch strategy in a case if matching allow / disallow rule was not found . <nl> * / <nl> - ImportControl ( final ImportControl parent , final String subPkg , final boolean regex , <nl> - final MismatchStrategy strategyOnMismatch ) { <nl> + ImportControl ( ImportControl parent , String subPkg , boolean regex , <nl> + MismatchStrategy strategyOnMismatch ) { <nl> this . parent = parent ; <nl> this . strategyOnMismatch = strategyOnMismatch ; <nl> if ( regex | | parent . regex ) { <nl> @ @ - 129 , 7 + 129 , 7 @ @ class ImportControl { <nl> * @ param subPkg the sub package name . <nl> * @ param regex flags interpretation of subPkg as regex pattern . <nl> * / <nl> - ImportControl ( final ImportControl parent , final String subPkg , final boolean regex ) { <nl> + ImportControl ( ImportControl parent , String subPkg , boolean regex ) { <nl> this ( parent , subPkg , regex , MismatchStrategy . DELEGATE _ TO _ PARENT ) ; <nl> } <nl> <nl> @ @ - 157 , 7 + 157 , 7 @ @ class ImportControl { <nl> * @ param alreadyRegex signals if input already is a regular expression . <nl> * @ return a regex string . <nl> * / <nl> - private static String ensureSelfContainedRegex ( final String input , final boolean alreadyRegex ) { <nl> + private static String ensureSelfContainedRegex ( String input , boolean alreadyRegex ) { <nl> final String result ; <nl> if ( alreadyRegex ) { <nl> result = encloseInGroup ( input ) ; <nl> @ @ - 211 , 7 + 211 , 7 @ @ class ImportControl { <nl> * Adds an { @ link AbstractImportRule } to the node . <nl> * @ param rule the rule to be added . <nl> * / <nl> - protected void addImportRule ( final AbstractImportRule rule ) { <nl> + protected void addImportRule ( AbstractImportRule rule ) { <nl> rules . addFirst ( rule ) ; <nl> } <nl> <nl> @ @ - 220 , 7 + 220 , 7 @ @ class ImportControl { <nl> * @ param forPkg the package to search for . <nl> * @ return the finest match , or null if no match at all . <nl> * / <nl> - public ImportControl locateFinest ( final String forPkg ) { <nl> + public ImportControl locateFinest ( String forPkg ) { <nl> ImportControl finestMatch = null ; <nl> / / Check if we are a match . <nl> if ( matchesAtFront ( forPkg ) ) { <nl> @ @ - 243 , 7 + 243 , 7 @ @ class ImportControl { <nl> * @ param pkg the package to compare with . <nl> * @ return if it matches . <nl> * / <nl> - private boolean matchesAtFront ( final String pkg ) { <nl> + private boolean matchesAtFront ( String pkg ) { <nl> final boolean result ; <nl> if ( regex ) { <nl> result = patternForPartialMatch . matcher ( pkg ) . matches ( ) ; <nl> @ @ - 260 , 7 + 260 , 7 @ @ class ImportControl { <nl> * @ param pkg the package to compare with . <nl> * @ return if it matches . <nl> * / <nl> - private boolean matchesAtFrontNoRegex ( final String pkg ) { <nl> + private boolean matchesAtFrontNoRegex ( String pkg ) { <nl> return pkg . startsWith ( fullPackage ) <nl> & & ( pkg . length ( ) = = fullPackage . length ( ) <nl> | | pkg . charAt ( fullPackage . length ( ) ) = = ' . ' ) ; <nl> @ @ - 276 , 7 + 276 , 7 @ @ class ImportControl { <nl> * @ param inPkg the package doing the import . <nl> * @ return an { @ link AccessResult } . <nl> * / <nl> - public AccessResult checkAccess ( final String inPkg , final String forImport ) { <nl> + public AccessResult checkAccess ( String inPkg , String forImport ) { <nl> final AccessResult result ; <nl> final AccessResult returnValue = localCheckAccess ( inPkg , forImport ) ; <nl> if ( returnValue ! = AccessResult . UNKNOWN ) { <nl> @ @ - 311 , 7 + 311 , 7 @ @ class ImportControl { <nl> * @ param inPkg the package doing the import . <nl> * @ return an { @ link AccessResult } . <nl> * / <nl> - private AccessResult localCheckAccess ( final String inPkg , final String forImport ) { <nl> + private AccessResult localCheckAccess ( String inPkg , String forImport ) { <nl> AccessResult localCheckAccessResult = AccessResult . UNKNOWN ; <nl> for ( AbstractImportRule importRule : rules ) { <nl> / / Check if an import rule is only meant to be applied locally . <nl> @ @ - 331 , 7 + 331 , 7 @ @ class ImportControl { <nl> * @ param pkg the package to compare with . <nl> * @ return if it matches . <nl> * / <nl> - private boolean matchesExactly ( final String pkg ) { <nl> + private boolean matchesExactly ( String pkg ) { <nl> final boolean result ; <nl> if ( regex ) { <nl> result = patternForExactMatch . matcher ( pkg ) . matches ( ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java <nl> index 4a4a379 . . beee079 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java <nl> @ @ - 107 , 13 + 107 , 13 @ @ public class ImportControlCheck extends AbstractCheck implements ExternalResourc <nl> } <nl> <nl> @ Override <nl> - public void beginTree ( final DetailAST rootAST ) { <nl> + public void beginTree ( DetailAST rootAST ) { <nl> currentImportControl = null ; <nl> processCurrentFile = path . matcher ( getFileContents ( ) . getFileName ( ) ) . find ( ) ; <nl> } <nl> <nl> @ Override <nl> - public void visitToken ( final DetailAST ast ) { <nl> + public void visitToken ( DetailAST ast ) { <nl> if ( processCurrentFile ) { <nl> if ( ast . getType ( ) = = TokenTypes . PACKAGE _ DEF ) { <nl> if ( root = = null ) { <nl> @ @ - 185 , 7 + 185 , 7 @ @ public class ImportControlCheck extends AbstractCheck implements ExternalResourc <nl> root = ImportControlLoader . load ( uri ) ; <nl> fileLocation = uri . toString ( ) ; <nl> } <nl> - catch ( final CheckstyleException ex ) { <nl> + catch ( CheckstyleException ex ) { <nl> throw new IllegalArgumentException ( UNABLE _ TO _ LOAD + uri , ex ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> index c9f032c . . 458f2c1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> @ @ - 116 , 10 + 116 , 10 @ @ final class ImportControlLoader extends AbstractLoader { <nl> } <nl> <nl> @ Override <nl> - public void startElement ( final String namespaceUri , <nl> - final String localName , <nl> - final String qName , <nl> - final Attributes attributes ) <nl> + public void startElement ( String namespaceUri , <nl> + String localName , <nl> + String qName , <nl> + Attributes attributes ) <nl> throws SAXException { <nl> if ( " import - control " . equals ( qName ) ) { <nl> final String pkg = safeGet ( attributes , PKG _ ATTRIBUTE _ NAME ) ; <nl> @ @ - 162 , 13 + 162 , 13 @ @ final class ImportControlLoader extends AbstractLoader { <nl> * @ param attributes the attributes . <nl> * @ return if the regex attribute is contained . <nl> * / <nl> - private static boolean containsRegexAttribute ( final Attributes attributes ) { <nl> + private static boolean containsRegexAttribute ( Attributes attributes ) { <nl> return attributes . getValue ( " regex " ) ! = null ; <nl> } <nl> <nl> @ Override <nl> - public void endElement ( final String namespaceUri , final String localName , <nl> - final String qName ) { <nl> + public void endElement ( String namespaceUri , String localName , <nl> + String qName ) { <nl> if ( SUBPACKAGE _ ELEMENT _ NAME . equals ( qName ) ) { <nl> stack . pop ( ) ; <nl> } <nl> @ @ - 180 , 7 + 180 , 7 @ @ final class ImportControlLoader extends AbstractLoader { <nl> * @ return the root { @ link ImportControl } object . <nl> * @ throws CheckstyleException if an error occurs . <nl> * / <nl> - public static ImportControl load ( final URI uri ) throws CheckstyleException { <nl> + public static ImportControl load ( URI uri ) throws CheckstyleException { <nl> <nl> InputStream inputStream = null ; <nl> try { <nl> @ @ - 188 , 10 + 188 , 10 @ @ final class ImportControlLoader extends AbstractLoader { <nl> final InputSource source = new InputSource ( inputStream ) ; <nl> return load ( source , uri ) ; <nl> } <nl> - catch ( final MalformedURLException ex ) { <nl> + catch ( MalformedURLException ex ) { <nl> throw new CheckstyleException ( " syntax error in url " + uri , ex ) ; <nl> } <nl> - catch ( final IOException ex ) { <nl> + catch ( IOException ex ) { <nl> throw new CheckstyleException ( " unable to find " + uri , ex ) ; <nl> } <nl> finally { <nl> @ @ - 206 , 18 + 206 , 18 @ @ final class ImportControlLoader extends AbstractLoader { <nl> * @ return the root { @ link ImportControl } object . <nl> * @ throws CheckstyleException if an error occurs . <nl> * / <nl> - private static ImportControl load ( final InputSource source , <nl> - final URI uri ) throws CheckstyleException { <nl> + private static ImportControl load ( InputSource source , <nl> + URI uri ) throws CheckstyleException { <nl> try { <nl> final ImportControlLoader loader = new ImportControlLoader ( ) ; <nl> loader . parseInputSource ( source ) ; <nl> return loader . getRoot ( ) ; <nl> } <nl> - catch ( final ParserConfigurationException | SAXException ex ) { <nl> + catch ( ParserConfigurationException | SAXException ex ) { <nl> throw new CheckstyleException ( " unable to parse " + uri <nl> + " - " + ex . getMessage ( ) , ex ) ; <nl> } <nl> - catch ( final IOException ex ) { <nl> + catch ( IOException ex ) { <nl> throw new CheckstyleException ( " unable to read " + uri , ex ) ; <nl> } <nl> } <nl> @ @ - 252 , 7 + 252 , 7 @ @ final class ImportControlLoader extends AbstractLoader { <nl> * @ param attributes collect to get attribute from . <nl> * @ return the value of the attribute . <nl> * / <nl> - private static MismatchStrategy getStrategyForImportControl ( final Attributes attributes ) { <nl> + private static MismatchStrategy getStrategyForImportControl ( Attributes attributes ) { <nl> final String returnValue = attributes . getValue ( STRATEGY _ ON _ MISMATCH _ ATTRIBUTE _ NAME ) ; <nl> MismatchStrategy strategyOnMismatch = MismatchStrategy . DISALLOWED ; <nl> if ( STRATEGY _ ON _ MISMATCH _ ALLOWED _ VALUE . equals ( returnValue ) ) { <nl> @ @ - 266 , 7 + 266 , 7 @ @ final class ImportControlLoader extends AbstractLoader { <nl> * @ param attributes collect to get attribute from . <nl> * @ return the value of the attribute . <nl> * / <nl> - private static MismatchStrategy getStrategyForSubpackage ( final Attributes attributes ) { <nl> + private static MismatchStrategy getStrategyForSubpackage ( Attributes attributes ) { <nl> final String returnValue = attributes . getValue ( STRATEGY _ ON _ MISMATCH _ ATTRIBUTE _ NAME ) ; <nl> MismatchStrategy strategyOnMismatch = MismatchStrategy . DELEGATE _ TO _ PARENT ; <nl> if ( STRATEGY _ ON _ MISMATCH _ ALLOWED _ VALUE . equals ( returnValue ) ) { <nl> @ @ - 286 , 7 + 286 , 7 @ @ final class ImportControlLoader extends AbstractLoader { <nl> * @ return the value of the attribute . <nl> * @ throws SAXException if the attribute does not exist . <nl> * / <nl> - private static String safeGet ( final Attributes attributes , final String name ) <nl> + private static String safeGet ( Attributes attributes , String name ) <nl> throws SAXException { <nl> final String returnValue = attributes . getValue ( name ) ; <nl> if ( returnValue = = null ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> index 3cd3a67 . . 0c01c59 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> @ @ - 316 , 7 + 316 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , getPath ( " InputImportControl . java " ) , expected ) ; <nl> fail ( " Test should fail if exception was not thrown " ) ; <nl> } <nl> - catch ( final CheckstyleException ex ) { <nl> + catch ( CheckstyleException ex ) { <nl> final String message = getCheckstyleExceptionMessage ( ex ) ; <nl> assertTrue ( message . startsWith ( " Unable to load " ) ) ; <nl> } <nl> @ @ - 332 , 7 + 332 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , getPath ( " InputImportControl . java " ) , expected ) ; <nl> fail ( " Test should fail if exception was not thrown " ) ; <nl> } <nl> - catch ( final CheckstyleException ex ) { <nl> + catch ( CheckstyleException ex ) { <nl> final String message = getCheckstyleExceptionMessage ( ex ) ; <nl> assertTrue ( message . startsWith ( " Unable to find : " ) ) ; <nl> } <nl> @ @ - 357 , 7 + 357 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , getPath ( " InputImportControl . java " ) , expected ) ; <nl> fail ( " Test should fail if exception was not thrown " ) ; <nl> } <nl> - catch ( final CheckstyleException ex ) { <nl> + catch ( CheckstyleException ex ) { <nl> final String message = getCheckstyleExceptionMessage ( ex ) ; <nl> assertTrue ( message . startsWith ( " Unable to find : " ) ) ; <nl> } <nl> @ @ - 382 , 7 + 382 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , getPath ( " InputImportControl . java " ) , expected ) ; <nl> fail ( " Test should fail if exception was not thrown " ) ; <nl> } <nl> - catch ( final CheckstyleException ex ) { <nl> + catch ( CheckstyleException ex ) { <nl> final String message = getCheckstyleExceptionMessage ( ex ) ; <nl> assertTrue ( message . startsWith ( " Unable to load " ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index d677359 . . 5972a28 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 463 , 7 + 463 , 7 @ @ <nl> < version > 1 . 6 < / version > <nl> < / requireJavaVersion > <nl> < ! - - we can not use this as it require <nl> - compilation on 1 . 6 only , due to dependecy to ' tools ' <nl> + compilation on 1 . 6 only , due to dependency to ' tools ' <nl> < enforceBytecodeVersion > <nl> < maxJdkVersion > 1 . 6 < / maxJdkVersion > <nl> < / enforceBytecodeVersion > <nl> @ @ - 473 , 7 + 473 , 7 @ @ <nl> < / execution > <nl> < / executions > <nl> < ! - - we can not use this as it require <nl> - compilation on 1 . 6 only , due to dependecy to ' tool ' <nl> + compilation on 1 . 6 only , due to dependency to ' tool ' <nl> < dependencies > <nl> < dependency > <nl> < groupId > org . codehaus . mojo < / groupId > <nl> @ @ - 555 , 7 + 555 , 7 @ @ <nl> < / configuration > <nl> < / execution > <nl> < execution > <nl> - < id > add - ittest - source < / id > <nl> + < id > add - it - test - source < / id > <nl> < phase > process - resources < / phase > <nl> < goals > <nl> < goal > add - test - source < / goal > <nl> @ @ - 567 , 7 + 567 , 7 @ @ <nl> < / configuration > <nl> < / execution > <nl> < execution > <nl> - < id > add - ittest - resource < / id > <nl> + < id > add - it - test - resource < / id > <nl> < phase > process - resources < / phase > <nl> < goals > <nl> < goal > add - test - source < / goal > <nl> @ @ - 964 , 10 + 964 , 10 @ @ <nl> < excludedLink > http : / / search . maven . org / * < / excludedLink > <nl> < excludedLink > http : / / junit . org < / excludedLink > <nl> < excludedLink > http : / / sonar - plugins . codehaus . org / maven - report < / excludedLink > <nl> - < ! - - Excluded due to checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 <nl> + < ! - - Excluded due to Checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 <nl> and http : / / jira . codehaus . org / browse / DOXIA - 525 and http : / / jira . codehaus . org / browse / MLINKCHECK - 21 will be fixed - - > <nl> < excludedLink > * * / com / puppycrawl / * * < / excludedLink > <nl> - < ! - - Excluded due to checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 will be fixed - - > <nl> + < ! - - Excluded due to Checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 will be fixed - - > <nl> < excludedLink > http : / / docs . oracle . com / javase / 7 / docs / api / org / xml / sax / helpers . DefaultHandler . html ? * < / excludedLink > <nl> < ! - - Excluded due to Maven Enforcer Plugin ' s issue # 234 : https : / / issues . apache . org / jira / browse / MENFORCER - 234 - - > <nl> < excludedLink > http : / / maven . apache . org / enforcer / maven - enforcer - plugin < / excludedLink > <nl> @ @ - 1013 , 7 + 1013 , 7 @ @ <nl> < profiles > <nl> <nl> < ! - - Bring in tools . jar for platforms which provide it <nl> - that is required for javadoc docklets that are in use - - > <nl> + that is required for javadoc doclets that are in use - - > <nl> < profile > <nl> < id > default - tools . jar - oracle < / id > <nl> < activation > <nl> @ @ - 1402 , 11 + 1402 , 11 @ @ <nl> <nl> < / profiles > <nl> <nl> - < ! - - that repositories are required for tesing plugin ' s snapshot version - - > <nl> + < ! - - that repositories are required for testing plugin ' s snapshot version - - > <nl> < pluginRepositories > <nl> < pluginRepository > <nl> < id > nexus - snapshot < / id > <nl> - < name > Oficial Maven Apache Repo < / name > <nl> + < name > Official Maven Apache Repo < / name > <nl> < url > https : / / nexus . codehaus . org / content / repositories / snapshots / < / url > <nl> < / pluginRepository > <nl> < / pluginRepositories >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java 
 index 496b4fc . . 1471729 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java 
 @ @ - 65 , 8 + 65 , 8 @ @ class ImportControl { 
 * @ param regex flags interpretation of pkgName as regex pattern . 
 * @ param strategyOnMismatch strategy in a case if matching allow / disallow rule was not found . 
 * / 
 - ImportControl ( final String pkgName , final boolean regex , 
 - final MismatchStrategy strategyOnMismatch ) { 
 + ImportControl ( String pkgName , boolean regex , 
 + MismatchStrategy strategyOnMismatch ) { 
 parent = null ; 
 this . regex = regex ; 
 this . strategyOnMismatch = strategyOnMismatch ; 
 @ @ - 88 , 7 + 88 , 7 @ @ class ImportControl { 
 * @ param pkgName the name of the package . 
 * @ param regex flags interpretation of pkgName as regex pattern . 
 * / 
 - ImportControl ( final String pkgName , final boolean regex ) { 
 + ImportControl ( String pkgName , boolean regex ) { 
 this ( pkgName , regex , MismatchStrategy . DISALLOWED ) ; 
 } 
 
 @ @ - 100 , 8 + 100 , 8 @ @ class ImportControl { 
 * @ param regex flags interpretation of subPkg as regex pattern . 
 * @ param strategyOnMismatch strategy in a case if matching allow / disallow rule was not found . 
 * / 
 - ImportControl ( final ImportControl parent , final String subPkg , final boolean regex , 
 - final MismatchStrategy strategyOnMismatch ) { 
 + ImportControl ( ImportControl parent , String subPkg , boolean regex , 
 + MismatchStrategy strategyOnMismatch ) { 
 this . parent = parent ; 
 this . strategyOnMismatch = strategyOnMismatch ; 
 if ( regex | | parent . regex ) { 
 @ @ - 129 , 7 + 129 , 7 @ @ class ImportControl { 
 * @ param subPkg the sub package name . 
 * @ param regex flags interpretation of subPkg as regex pattern . 
 * / 
 - ImportControl ( final ImportControl parent , final String subPkg , final boolean regex ) { 
 + ImportControl ( ImportControl parent , String subPkg , boolean regex ) { 
 this ( parent , subPkg , regex , MismatchStrategy . DELEGATE _ TO _ PARENT ) ; 
 } 
 
 @ @ - 157 , 7 + 157 , 7 @ @ class ImportControl { 
 * @ param alreadyRegex signals if input already is a regular expression . 
 * @ return a regex string . 
 * / 
 - private static String ensureSelfContainedRegex ( final String input , final boolean alreadyRegex ) { 
 + private static String ensureSelfContainedRegex ( String input , boolean alreadyRegex ) { 
 final String result ; 
 if ( alreadyRegex ) { 
 result = encloseInGroup ( input ) ; 
 @ @ - 211 , 7 + 211 , 7 @ @ class ImportControl { 
 * Adds an { @ link AbstractImportRule } to the node . 
 * @ param rule the rule to be added . 
 * / 
 - protected void addImportRule ( final AbstractImportRule rule ) { 
 + protected void addImportRule ( AbstractImportRule rule ) { 
 rules . addFirst ( rule ) ; 
 } 
 
 @ @ - 220 , 7 + 220 , 7 @ @ class ImportControl { 
 * @ param forPkg the package to search for . 
 * @ return the finest match , or null if no match at all . 
 * / 
 - public ImportControl locateFinest ( final String forPkg ) { 
 + public ImportControl locateFinest ( String forPkg ) { 
 ImportControl finestMatch = null ; 
 / / Check if we are a match . 
 if ( matchesAtFront ( forPkg ) ) { 
 @ @ - 243 , 7 + 243 , 7 @ @ class ImportControl { 
 * @ param pkg the package to compare with . 
 * @ return if it matches . 
 * / 
 - private boolean matchesAtFront ( final String pkg ) { 
 + private boolean matchesAtFront ( String pkg ) { 
 final boolean result ; 
 if ( regex ) { 
 result = patternForPartialMatch . matcher ( pkg ) . matches ( ) ; 
 @ @ - 260 , 7 + 260 , 7 @ @ class ImportControl { 
 * @ param pkg the package to compare with . 
 * @ return if it matches . 
 * / 
 - private boolean matchesAtFrontNoRegex ( final String pkg ) { 
 + private boolean matchesAtFrontNoRegex ( String pkg ) { 
 return pkg . startsWith ( fullPackage ) 
 & & ( pkg . length ( ) = = fullPackage . length ( ) 
 | | pkg . charAt ( fullPackage . length ( ) ) = = ' . ' ) ; 
 @ @ - 276 , 7 + 276 , 7 @ @ class ImportControl { 
 * @ param inPkg the package doing the import . 
 * @ return an { @ link AccessResult } . 
 * / 
 - public AccessResult checkAccess ( final String inPkg , final String forImport ) { 
 + public AccessResult checkAccess ( String inPkg , String forImport ) { 
 final AccessResult result ; 
 final AccessResult returnValue = localCheckAccess ( inPkg , forImport ) ; 
 if ( returnValue ! = AccessResult . UNKNOWN ) { 
 @ @ - 311 , 7 + 311 , 7 @ @ class ImportControl { 
 * @ param inPkg the package doing the import . 
 * @ return an { @ link AccessResult } . 
 * / 
 - private AccessResult localCheckAccess ( final String inPkg , final String forImport ) { 
 + private AccessResult localCheckAccess ( String inPkg , String forImport ) { 
 AccessResult localCheckAccessResult = AccessResult . UNKNOWN ; 
 for ( AbstractImportRule importRule : rules ) { 
 / / Check if an import rule is only meant to be applied locally . 
 @ @ - 331 , 7 + 331 , 7 @ @ class ImportControl { 
 * @ param pkg the package to compare with . 
 * @ return if it matches . 
 * / 
 - private boolean matchesExactly ( final String pkg ) { 
 + private boolean matchesExactly ( String pkg ) { 
 final boolean result ; 
 if ( regex ) { 
 result = patternForExactMatch . matcher ( pkg ) . matches ( ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java 
 index 4a4a379 . . beee079 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java 
 @ @ - 107 , 13 + 107 , 13 @ @ public class ImportControlCheck extends AbstractCheck implements ExternalResourc 
 } 
 
 @ Override 
 - public void beginTree ( final DetailAST rootAST ) { 
 + public void beginTree ( DetailAST rootAST ) { 
 currentImportControl = null ; 
 processCurrentFile = path . matcher ( getFileContents ( ) . getFileName ( ) ) . find ( ) ; 
 } 
 
 @ Override 
 - public void visitToken ( final DetailAST ast ) { 
 + public void visitToken ( DetailAST ast ) { 
 if ( processCurrentFile ) { 
 if ( ast . getType ( ) = = TokenTypes . PACKAGE _ DEF ) { 
 if ( root = = null ) { 
 @ @ - 185 , 7 + 185 , 7 @ @ public class ImportControlCheck extends AbstractCheck implements ExternalResourc 
 root = ImportControlLoader . load ( uri ) ; 
 fileLocation = uri . toString ( ) ; 
 } 
 - catch ( final CheckstyleException ex ) { 
 + catch ( CheckstyleException ex ) { 
 throw new IllegalArgumentException ( UNABLE _ TO _ LOAD + uri , ex ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 index c9f032c . . 458f2c1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 @ @ - 116 , 10 + 116 , 10 @ @ final class ImportControlLoader extends AbstractLoader { 
 } 
 
 @ Override 
 - public void startElement ( final String namespaceUri , 
 - final String localName , 
 - final String qName , 
 - final Attributes attributes ) 
 + public void startElement ( String namespaceUri , 
 + String localName , 
 + String qName , 
 + Attributes attributes ) 
 throws SAXException { 
 if ( " import - control " . equals ( qName ) ) { 
 final String pkg = safeGet ( attributes , PKG _ ATTRIBUTE _ NAME ) ; 
 @ @ - 162 , 13 + 162 , 13 @ @ final class ImportControlLoader extends AbstractLoader { 
 * @ param attributes the attributes . 
 * @ return if the regex attribute is contained . 
 * / 
 - private static boolean containsRegexAttribute ( final Attributes attributes ) { 
 + private static boolean containsRegexAttribute ( Attributes attributes ) { 
 return attributes . getValue ( " regex " ) ! = null ; 
 } 
 
 @ Override 
 - public void endElement ( final String namespaceUri , final String localName , 
 - final String qName ) { 
 + public void endElement ( String namespaceUri , String localName , 
 + String qName ) { 
 if ( SUBPACKAGE _ ELEMENT _ NAME . equals ( qName ) ) { 
 stack . pop ( ) ; 
 } 
 @ @ - 180 , 7 + 180 , 7 @ @ final class ImportControlLoader extends AbstractLoader { 
 * @ return the root { @ link ImportControl } object . 
 * @ throws CheckstyleException if an error occurs . 
 * / 
 - public static ImportControl load ( final URI uri ) throws CheckstyleException { 
 + public static ImportControl load ( URI uri ) throws CheckstyleException { 
 
 InputStream inputStream = null ; 
 try { 
 @ @ - 188 , 10 + 188 , 10 @ @ final class ImportControlLoader extends AbstractLoader { 
 final InputSource source = new InputSource ( inputStream ) ; 
 return load ( source , uri ) ; 
 } 
 - catch ( final MalformedURLException ex ) { 
 + catch ( MalformedURLException ex ) { 
 throw new CheckstyleException ( " syntax error in url " + uri , ex ) ; 
 } 
 - catch ( final IOException ex ) { 
 + catch ( IOException ex ) { 
 throw new CheckstyleException ( " unable to find " + uri , ex ) ; 
 } 
 finally { 
 @ @ - 206 , 18 + 206 , 18 @ @ final class ImportControlLoader extends AbstractLoader { 
 * @ return the root { @ link ImportControl } object . 
 * @ throws CheckstyleException if an error occurs . 
 * / 
 - private static ImportControl load ( final InputSource source , 
 - final URI uri ) throws CheckstyleException { 
 + private static ImportControl load ( InputSource source , 
 + URI uri ) throws CheckstyleException { 
 try { 
 final ImportControlLoader loader = new ImportControlLoader ( ) ; 
 loader . parseInputSource ( source ) ; 
 return loader . getRoot ( ) ; 
 } 
 - catch ( final ParserConfigurationException | SAXException ex ) { 
 + catch ( ParserConfigurationException | SAXException ex ) { 
 throw new CheckstyleException ( " unable to parse " + uri 
 + " - " + ex . getMessage ( ) , ex ) ; 
 } 
 - catch ( final IOException ex ) { 
 + catch ( IOException ex ) { 
 throw new CheckstyleException ( " unable to read " + uri , ex ) ; 
 } 
 } 
 @ @ - 252 , 7 + 252 , 7 @ @ final class ImportControlLoader extends AbstractLoader { 
 * @ param attributes collect to get attribute from . 
 * @ return the value of the attribute . 
 * / 
 - private static MismatchStrategy getStrategyForImportControl ( final Attributes attributes ) { 
 + private static MismatchStrategy getStrategyForImportControl ( Attributes attributes ) { 
 final String returnValue = attributes . getValue ( STRATEGY _ ON _ MISMATCH _ ATTRIBUTE _ NAME ) ; 
 MismatchStrategy strategyOnMismatch = MismatchStrategy . DISALLOWED ; 
 if ( STRATEGY _ ON _ MISMATCH _ ALLOWED _ VALUE . equals ( returnValue ) ) { 
 @ @ - 266 , 7 + 266 , 7 @ @ final class ImportControlLoader extends AbstractLoader { 
 * @ param attributes collect to get attribute from . 
 * @ return the value of the attribute . 
 * / 
 - private static MismatchStrategy getStrategyForSubpackage ( final Attributes attributes ) { 
 + private static MismatchStrategy getStrategyForSubpackage ( Attributes attributes ) { 
 final String returnValue = attributes . getValue ( STRATEGY _ ON _ MISMATCH _ ATTRIBUTE _ NAME ) ; 
 MismatchStrategy strategyOnMismatch = MismatchStrategy . DELEGATE _ TO _ PARENT ; 
 if ( STRATEGY _ ON _ MISMATCH _ ALLOWED _ VALUE . equals ( returnValue ) ) { 
 @ @ - 286 , 7 + 286 , 7 @ @ final class ImportControlLoader extends AbstractLoader { 
 * @ return the value of the attribute . 
 * @ throws SAXException if the attribute does not exist . 
 * / 
 - private static String safeGet ( final Attributes attributes , final String name ) 
 + private static String safeGet ( Attributes attributes , String name ) 
 throws SAXException { 
 final String returnValue = attributes . getValue ( name ) ; 
 if ( returnValue = = null ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 index 3cd3a67 . . 0c01c59 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 @ @ - 316 , 7 + 316 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 verify ( checkConfig , getPath ( " InputImportControl . java " ) , expected ) ; 
 fail ( " Test should fail if exception was not thrown " ) ; 
 } 
 - catch ( final CheckstyleException ex ) { 
 + catch ( CheckstyleException ex ) { 
 final String message = getCheckstyleExceptionMessage ( ex ) ; 
 assertTrue ( message . startsWith ( " Unable to load " ) ) ; 
 } 
 @ @ - 332 , 7 + 332 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 verify ( checkConfig , getPath ( " InputImportControl . java " ) , expected ) ; 
 fail ( " Test should fail if exception was not thrown " ) ; 
 } 
 - catch ( final CheckstyleException ex ) { 
 + catch ( CheckstyleException ex ) { 
 final String message = getCheckstyleExceptionMessage ( ex ) ; 
 assertTrue ( message . startsWith ( " Unable to find : " ) ) ; 
 } 
 @ @ - 357 , 7 + 357 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 verify ( checkConfig , getPath ( " InputImportControl . java " ) , expected ) ; 
 fail ( " Test should fail if exception was not thrown " ) ; 
 } 
 - catch ( final CheckstyleException ex ) { 
 + catch ( CheckstyleException ex ) { 
 final String message = getCheckstyleExceptionMessage ( ex ) ; 
 assertTrue ( message . startsWith ( " Unable to find : " ) ) ; 
 } 
 @ @ - 382 , 7 + 382 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 verify ( checkConfig , getPath ( " InputImportControl . java " ) , expected ) ; 
 fail ( " Test should fail if exception was not thrown " ) ; 
 } 
 - catch ( final CheckstyleException ex ) { 
 + catch ( CheckstyleException ex ) { 
 final String message = getCheckstyleExceptionMessage ( ex ) ; 
 assertTrue ( message . startsWith ( " Unable to load " ) ) ; 
 }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index d677359 . . 5972a28 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 463 , 7 + 463 , 7 @ @ 
 < version > 1 . 6 < / version > 
 < / requireJavaVersion > 
 < ! - - we can not use this as it require 
 - compilation on 1 . 6 only , due to dependecy to ' tools ' 
 + compilation on 1 . 6 only , due to dependency to ' tools ' 
 < enforceBytecodeVersion > 
 < maxJdkVersion > 1 . 6 < / maxJdkVersion > 
 < / enforceBytecodeVersion > 
 @ @ - 473 , 7 + 473 , 7 @ @ 
 < / execution > 
 < / executions > 
 < ! - - we can not use this as it require 
 - compilation on 1 . 6 only , due to dependecy to ' tool ' 
 + compilation on 1 . 6 only , due to dependency to ' tool ' 
 < dependencies > 
 < dependency > 
 < groupId > org . codehaus . mojo < / groupId > 
 @ @ - 555 , 7 + 555 , 7 @ @ 
 < / configuration > 
 < / execution > 
 < execution > 
 - < id > add - ittest - source < / id > 
 + < id > add - it - test - source < / id > 
 < phase > process - resources < / phase > 
 < goals > 
 < goal > add - test - source < / goal > 
 @ @ - 567 , 7 + 567 , 7 @ @ 
 < / configuration > 
 < / execution > 
 < execution > 
 - < id > add - ittest - resource < / id > 
 + < id > add - it - test - resource < / id > 
 < phase > process - resources < / phase > 
 < goals > 
 < goal > add - test - source < / goal > 
 @ @ - 964 , 10 + 964 , 10 @ @ 
 < excludedLink > http : / / search . maven . org / * < / excludedLink > 
 < excludedLink > http : / / junit . org < / excludedLink > 
 < excludedLink > http : / / sonar - plugins . codehaus . org / maven - report < / excludedLink > 
 - < ! - - Excluded due to checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 
 + < ! - - Excluded due to Checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 
 and http : / / jira . codehaus . org / browse / DOXIA - 525 and http : / / jira . codehaus . org / browse / MLINKCHECK - 21 will be fixed - - > 
 < excludedLink > * * / com / puppycrawl / * * < / excludedLink > 
 - < ! - - Excluded due to checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 will be fixed - - > 
 + < ! - - Excluded due to Checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 will be fixed - - > 
 < excludedLink > http : / / docs . oracle . com / javase / 7 / docs / api / org / xml / sax / helpers . DefaultHandler . html ? * < / excludedLink > 
 < ! - - Excluded due to Maven Enforcer Plugin ' s issue # 234 : https : / / issues . apache . org / jira / browse / MENFORCER - 234 - - > 
 < excludedLink > http : / / maven . apache . org / enforcer / maven - enforcer - plugin < / excludedLink > 
 @ @ - 1013 , 7 + 1013 , 7 @ @ 
 < profiles > 
 
 < ! - - Bring in tools . jar for platforms which provide it 
 - that is required for javadoc docklets that are in use - - > 
 + that is required for javadoc doclets that are in use - - > 
 < profile > 
 < id > default - tools . jar - oracle < / id > 
 < activation > 
 @ @ - 1402 , 11 + 1402 , 11 @ @ 
 
 < / profiles > 
 
 - < ! - - that repositories are required for tesing plugin ' s snapshot version - - > 
 + < ! - - that repositories are required for testing plugin ' s snapshot version - - > 
 < pluginRepositories > 
 < pluginRepository > 
 < id > nexus - snapshot < / id > 
 - < name > Oficial Maven Apache Repo < / name > 
 + < name > Official Maven Apache Repo < / name > 
 < url > https : / / nexus . codehaus . org / content / repositories / snapshots / < / url > 
 < / pluginRepository > 
 < / pluginRepositories >
