BLEU SCORE: 0.5459709700160348

TEST MSG: [ maven - release - plugin ] prepare release checkstyle - 7 . 5
GENERATED MSG: [ maven - release - plugin ] rollback the release of checkstyle - 7 . 2

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index e2dc5d1 . . 96ed9d8 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> <nl> < groupId > com . puppycrawl . tools < / groupId > <nl> < artifactId > checkstyle < / artifactId > <nl> - < version > 7 . 5 - SNAPSHOT < / version > <nl> + < version > 7 . 5 < / version > <nl> < packaging > jar < / packaging > <nl> <nl> < name > checkstyle < / name >
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index cace93a . . 480b41f 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 302 , 7 + 302 , 9 @ @ <nl> < ! - - Default classes are also listed - - > <nl> < property name = " excludedClasses " value = " boolean , byte , char , double , float , int , long , short , void , Boolean , Byte , Character , Double , Float , Integer , Long , Short , Void , Object , Class , String , StringBuffer , StringBuilder , ArrayIndexOutOfBoundsException , Exception , RuntimeException , IllegalArgumentException , IllegalStateException , IndexOutOfBoundsException , NullPointerException , Throwable , SecurityException , UnsupportedOperationException , List , ArrayList , Deque , Queue , LinkedList , Set , HashSet , SortedSet , TreeSet , Map , HashMap , SortedMap , TreeMap , DetailsAST , CheckstyleException , UnsupportedEncodingException , BuildException , ConversionException , FileNotFoundException , TestException , Log , Sets , Multimap , TokenStreamRecognitionException , RecognitionException , TokenStreamException , IOException " / > <nl> < / module > <nl> - < module name = " CyclomaticComplexity " / > <nl> + < module name = " CyclomaticComplexity " > <nl> + < property name = " switchBlockAsSingleDecisionPoint " value = " true " / > <nl> + < / module > <nl> < module name = " JavaNCSS " / > <nl> < module name = " NPathComplexity " / > <nl> <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 5b1735a . . 8d0a79e 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 126 , 7 + 126 , 6 @ @ <nl> < ! - - getDetails ( ) method - huge Switch , it has to be monolithic - - > <nl> < suppress checks = " ExecutableStatementCount " files = " RightCurlyCheck \ . java " lines = " 313 " / > <nl> < suppress checks = " JavaNCSS " files = " RightCurlyCheck \ . java " lines = " 313 " / > <nl> - < suppress checks = " CyclomaticComplexity " files = " RightCurlyCheck \ . java " lines = " 313 " / > <nl> <nl> < ! - - we need that set of converters - - > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " AutomaticBean \ . java " / > <nl> @ @ - 140 , 9 + 139 , 12 @ @ <nl> < ! - - Should be fixed after moving https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / blob / master / sevntu - checks / src / main / java / com / github / sevntu / checkstyle / checks / coding / ReturnCountExtendedCheck . java into the main repo - - > <nl> < suppress checks = " ReturnCount " files = " ( ClassResolver | ConfigurationLoader | IndentationCheckTest ) \ . java " / > <nl> <nl> - < ! - - Just big switches . Cannot be split to several methods . Till https : / / github . com / checkstyle / checkstyle / issues / 2029 - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " ( AbstractDeclarationCollector | RequireThisCheck | SuppressWarningsHolder | LeftCurlyCheck | FallThroughCheck | FinalLocalVariableCheck | ModifiedControlVariableCheck ) \ . java " / > <nl> - < suppress checks = " CyclomaticComplexity " files = " ( ParameterAssignmentCheck | VariableDeclarationUsageDistanceCheck | BooleanExpressionComplexityCheck | NPathComplexityCheck | CheckUtils ) \ . java " / > <nl> + < ! - - Method getClassFrameWhereViolationIsFound already have too much abstract methods that fully <nl> + explain a logic , additional abstraction will not make logic / algorithm more readable . - - > <nl> + < suppress checks = " CyclomaticComplexity " files = " RequireThisCheck \ . java " lines = " 416 " / > <nl> + < ! - - The only optimization which can be there is to move CASE - block expressions to separate method , <nl> + but that will not increase readability . - - > <nl> + < suppress checks = " CyclomaticComplexity " files = " FinalLocalVariableCheck \ . java " lines = " 176 , 328 " / > <nl> <nl> < ! - - Suppressions from PMD configuration - - > <nl> < ! - - validateCli is not reasonable to split as encapsulation of logic will be damaged - - > <nl> @ @ - 157 , 10 + 159 , 6 @ @ <nl> < ! - - SWITCH was transformed into IF - ELSE - - > <nl> < suppress checks = " CyclomaticComplexity " files = " ImportOrderCheck \ . java " lines = " 357 " / > <nl> <nl> - < ! - - Just big SWITCH block which contains IF blocks in ' visitToken ' . <nl> - If we split the block to several methods it will demage readibility . - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " DeclarationOrderCheck \ . java " lines = " 189 " / > <nl> - <nl> < ! - - LocalizedMessage class is immutable , we need that amount of arguments . - - > <nl> < suppress checks = " ParameterNumber " <nl> files = " LocalizedMessage . java " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> index 2766315 . . 8902693 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> @ @ - 160 , 14 + 160 , 8 @ @ public class SuppressWarningsHolder <nl> final int column = event . getColumn ( ) ; <nl> boolean suppressed = false ; <nl> for ( Entry entry : entries ) { <nl> - final boolean afterStart = <nl> - entry . getFirstLine ( ) < line <nl> - | | entry . getFirstLine ( ) = = line <nl> - & & ( column = = 0 | | entry . getFirstColumn ( ) < = column ) ; <nl> - final boolean beforeEnd = <nl> - entry . getLastLine ( ) > line <nl> - | | entry . getLastLine ( ) = = line & & entry <nl> - . getLastColumn ( ) > = column ; <nl> + final boolean afterStart = isSuppressedAfterEventStart ( line , column , entry ) ; <nl> + final boolean beforeEnd = isSuppressedBeforeEventEnd ( line , column , entry ) ; <nl> final boolean nameMatches = <nl> ALL _ WARNING _ MATCHING _ ID . equals ( entry . getCheckName ( ) ) <nl> | | entry . getCheckName ( ) . equalsIgnoreCase ( checkAlias ) ; <nl> @ @ - 180 , 6 + 174 , 36 @ @ public class SuppressWarningsHolder <nl> return suppressed ; <nl> } <nl> <nl> + / * * <nl> + * Checks whether suppression entry position is after the audit event occurrence position <nl> + * in the source file . <nl> + * @ param line the line number in the source file where the event occurred . <nl> + * @ param column the column number in the source file where the event occurred . <nl> + * @ param entry suppression entry . <nl> + * @ return true if suppression entry position is after the audit event occurrence position <nl> + * in the source file . <nl> + * / <nl> + private static boolean isSuppressedAfterEventStart ( int line , int column , Entry entry ) { <nl> + return entry . getFirstLine ( ) < line <nl> + | | entry . getFirstLine ( ) = = line <nl> + & & ( column = = 0 | | entry . getFirstColumn ( ) < = column ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks whether suppression entry position is before the audit event occurrence position <nl> + * in the source file . <nl> + * @ param line the line number in the source file where the event occurred . <nl> + * @ param column the column number in the source file where the event occurred . <nl> + * @ param entry suppression entry . <nl> + * @ return true if suppression entry position is before the audit event occurrence position <nl> + * in the source file . <nl> + * / <nl> + private static boolean isSuppressedBeforeEventEnd ( int line , int column , Entry entry ) { <nl> + return entry . getLastLine ( ) > line <nl> + | | entry . getLastLine ( ) = = line & & entry <nl> + . getLastColumn ( ) > = column ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return getAcceptableTokens ( ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> index f75112a . . 1a70486 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> @ @ - 399 , 36 + 399 , 7 @ @ public class VariableDeclarationUsageDistanceCheck extends AbstractCheck { <nl> if ( currentAst . getFirstChild ( ) ! = null ) { <nl> <nl> if ( isChild ( currentAst , variableIdentAst ) ) { <nl> - <nl> - switch ( currentAst . getType ( ) ) { <nl> - case TokenTypes . VARIABLE _ DEF : <nl> - dist + + ; <nl> - break ; <nl> - case TokenTypes . SLIST : <nl> - dist = 0 ; <nl> - break ; <nl> - case TokenTypes . LITERAL _ FOR : <nl> - case TokenTypes . LITERAL _ WHILE : <nl> - case TokenTypes . LITERAL _ DO : <nl> - case TokenTypes . LITERAL _ IF : <nl> - case TokenTypes . LITERAL _ SWITCH : <nl> - if ( isVariableInOperatorExpr ( currentAst , variableIdentAst ) ) { <nl> - dist + + ; <nl> - } <nl> - else { <nl> - / / variable usage is in inner scope <nl> - / / reset counters , because we can ' t determine distance <nl> - dist = 0 ; <nl> - } <nl> - break ; <nl> - default : <nl> - if ( currentAst . branchContains ( TokenTypes . SLIST ) ) { <nl> - dist = 0 ; <nl> - } <nl> - else { <nl> - dist + + ; <nl> - } <nl> - } <nl> + dist = getDistToVariableUsageInChildNode ( currentAst , variableIdentAst , dist ) ; <nl> variableUsageAst = currentAst ; <nl> firstUsageFound = true ; <nl> } <nl> @ @ - 448 , 6 + 419 , 48 @ @ public class VariableDeclarationUsageDistanceCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Returns the distance to variable usage for in the child node . <nl> + * @ param childNode child node . <nl> + * @ param varIdent variable variable identifier . <nl> + * @ param currentDistToVarUsage current distance to the variable usage . <nl> + * @ return the distance to variable usage for in the child node . <nl> + * / <nl> + private static int getDistToVariableUsageInChildNode ( DetailAST childNode , DetailAST varIdent , <nl> + int currentDistToVarUsage ) { <nl> + int resultDist = currentDistToVarUsage ; <nl> + switch ( childNode . getType ( ) ) { <nl> + case TokenTypes . VARIABLE _ DEF : <nl> + resultDist + + ; <nl> + break ; <nl> + case TokenTypes . SLIST : <nl> + resultDist = 0 ; <nl> + break ; <nl> + case TokenTypes . LITERAL _ FOR : <nl> + case TokenTypes . LITERAL _ WHILE : <nl> + case TokenTypes . LITERAL _ DO : <nl> + case TokenTypes . LITERAL _ IF : <nl> + case TokenTypes . LITERAL _ SWITCH : <nl> + if ( isVariableInOperatorExpr ( childNode , varIdent ) ) { <nl> + resultDist + + ; <nl> + } <nl> + else { <nl> + / / variable usage is in inner scope <nl> + / / reset counters , because we can ' t determine distance <nl> + resultDist = 0 ; <nl> + } <nl> + break ; <nl> + default : <nl> + if ( childNode . branchContains ( TokenTypes . SLIST ) ) { <nl> + resultDist = 0 ; <nl> + } <nl> + else { <nl> + resultDist + + ; <nl> + } <nl> + } <nl> + return resultDist ; <nl> + } <nl> + <nl> + / * * <nl> * Calculates distance between declaration of variable and its first usage <nl> * in multiple scopes . <nl> * @ param ast

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index e2dc5d1 . . 96ed9d8 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 
 < groupId > com . puppycrawl . tools < / groupId > 
 < artifactId > checkstyle < / artifactId > 
 - < version > 7 . 5 - SNAPSHOT < / version > 
 + < version > 7 . 5 < / version > 
 < packaging > jar < / packaging > 
 
 < name > checkstyle < / name >

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index cace93a . . 480b41f 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 302 , 7 + 302 , 9 @ @ 
 < ! - - Default classes are also listed - - > 
 < property name = " excludedClasses " value = " boolean , byte , char , double , float , int , long , short , void , Boolean , Byte , Character , Double , Float , Integer , Long , Short , Void , Object , Class , String , StringBuffer , StringBuilder , ArrayIndexOutOfBoundsException , Exception , RuntimeException , IllegalArgumentException , IllegalStateException , IndexOutOfBoundsException , NullPointerException , Throwable , SecurityException , UnsupportedOperationException , List , ArrayList , Deque , Queue , LinkedList , Set , HashSet , SortedSet , TreeSet , Map , HashMap , SortedMap , TreeMap , DetailsAST , CheckstyleException , UnsupportedEncodingException , BuildException , ConversionException , FileNotFoundException , TestException , Log , Sets , Multimap , TokenStreamRecognitionException , RecognitionException , TokenStreamException , IOException " / > 
 < / module > 
 - < module name = " CyclomaticComplexity " / > 
 + < module name = " CyclomaticComplexity " > 
 + < property name = " switchBlockAsSingleDecisionPoint " value = " true " / > 
 + < / module > 
 < module name = " JavaNCSS " / > 
 < module name = " NPathComplexity " / > 
 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 5b1735a . . 8d0a79e 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 126 , 7 + 126 , 6 @ @ 
 < ! - - getDetails ( ) method - huge Switch , it has to be monolithic - - > 
 < suppress checks = " ExecutableStatementCount " files = " RightCurlyCheck \ . java " lines = " 313 " / > 
 < suppress checks = " JavaNCSS " files = " RightCurlyCheck \ . java " lines = " 313 " / > 
 - < suppress checks = " CyclomaticComplexity " files = " RightCurlyCheck \ . java " lines = " 313 " / > 
 
 < ! - - we need that set of converters - - > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " AutomaticBean \ . java " / > 
 @ @ - 140 , 9 + 139 , 12 @ @ 
 < ! - - Should be fixed after moving https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / blob / master / sevntu - checks / src / main / java / com / github / sevntu / checkstyle / checks / coding / ReturnCountExtendedCheck . java into the main repo - - > 
 < suppress checks = " ReturnCount " files = " ( ClassResolver | ConfigurationLoader | IndentationCheckTest ) \ . java " / > 
 
 - < ! - - Just big switches . Cannot be split to several methods . Till https : / / github . com / checkstyle / checkstyle / issues / 2029 - - > 
 - < suppress checks = " CyclomaticComplexity " files = " ( AbstractDeclarationCollector | RequireThisCheck | SuppressWarningsHolder | LeftCurlyCheck | FallThroughCheck | FinalLocalVariableCheck | ModifiedControlVariableCheck ) \ . java " / > 
 - < suppress checks = " CyclomaticComplexity " files = " ( ParameterAssignmentCheck | VariableDeclarationUsageDistanceCheck | BooleanExpressionComplexityCheck | NPathComplexityCheck | CheckUtils ) \ . java " / > 
 + < ! - - Method getClassFrameWhereViolationIsFound already have too much abstract methods that fully 
 + explain a logic , additional abstraction will not make logic / algorithm more readable . - - > 
 + < suppress checks = " CyclomaticComplexity " files = " RequireThisCheck \ . java " lines = " 416 " / > 
 + < ! - - The only optimization which can be there is to move CASE - block expressions to separate method , 
 + but that will not increase readability . - - > 
 + < suppress checks = " CyclomaticComplexity " files = " FinalLocalVariableCheck \ . java " lines = " 176 , 328 " / > 
 
 < ! - - Suppressions from PMD configuration - - > 
 < ! - - validateCli is not reasonable to split as encapsulation of logic will be damaged - - > 
 @ @ - 157 , 10 + 159 , 6 @ @ 
 < ! - - SWITCH was transformed into IF - ELSE - - > 
 < suppress checks = " CyclomaticComplexity " files = " ImportOrderCheck \ . java " lines = " 357 " / > 
 
 - < ! - - Just big SWITCH block which contains IF blocks in ' visitToken ' . 
 - If we split the block to several methods it will demage readibility . - - > 
 - < suppress checks = " CyclomaticComplexity " files = " DeclarationOrderCheck \ . java " lines = " 189 " / > 
 - 
 < ! - - LocalizedMessage class is immutable , we need that amount of arguments . - - > 
 < suppress checks = " ParameterNumber " 
 files = " LocalizedMessage . java " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 index 2766315 . . 8902693 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 @ @ - 160 , 14 + 160 , 8 @ @ public class SuppressWarningsHolder 
 final int column = event . getColumn ( ) ; 
 boolean suppressed = false ; 
 for ( Entry entry : entries ) { 
 - final boolean afterStart = 
 - entry . getFirstLine ( ) < line 
 - | | entry . getFirstLine ( ) = = line 
 - & & ( column = = 0 | | entry . getFirstColumn ( ) < = column ) ; 
 - final boolean beforeEnd = 
 - entry . getLastLine ( ) > line 
 - | | entry . getLastLine ( ) = = line & & entry 
 - . getLastColumn ( ) > = column ; 
 + final boolean afterStart = isSuppressedAfterEventStart ( line , column , entry ) ; 
 + final boolean beforeEnd = isSuppressedBeforeEventEnd ( line , column , entry ) ; 
 final boolean nameMatches = 
 ALL _ WARNING _ MATCHING _ ID . equals ( entry . getCheckName ( ) ) 
 | | entry . getCheckName ( ) . equalsIgnoreCase ( checkAlias ) ; 
 @ @ - 180 , 6 + 174 , 36 @ @ public class SuppressWarningsHolder 
 return suppressed ; 
 } 
 
 + / * * 
 + * Checks whether suppression entry position is after the audit event occurrence position 
 + * in the source file . 
 + * @ param line the line number in the source file where the event occurred . 
 + * @ param column the column number in the source file where the event occurred . 
 + * @ param entry suppression entry . 
 + * @ return true if suppression entry position is after the audit event occurrence position 
 + * in the source file . 
 + * / 
 + private static boolean isSuppressedAfterEventStart ( int line , int column , Entry entry ) { 
 + return entry . getFirstLine ( ) < line 
 + | | entry . getFirstLine ( ) = = line 
 + & & ( column = = 0 | | entry . getFirstColumn ( ) < = column ) ; 
 + } 
 + 
 + / * * 
 + * Checks whether suppression entry position is before the audit event occurrence position 
 + * in the source file . 
 + * @ param line the line number in the source file where the event occurred . 
 + * @ param column the column number in the source file where the event occurred . 
 + * @ param entry suppression entry . 
 + * @ return true if suppression entry position is before the audit event occurrence position 
 + * in the source file . 
 + * / 
 + private static boolean isSuppressedBeforeEventEnd ( int line , int column , Entry entry ) { 
 + return entry . getLastLine ( ) > line 
 + | | entry . getLastLine ( ) = = line & & entry 
 + . getLastColumn ( ) > = column ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return getAcceptableTokens ( ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 index f75112a . . 1a70486 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 @ @ - 399 , 36 + 399 , 7 @ @ public class VariableDeclarationUsageDistanceCheck extends AbstractCheck { 
 if ( currentAst . getFirstChild ( ) ! = null ) { 
 
 if ( isChild ( currentAst , variableIdentAst ) ) { 
 - 
 - switch ( currentAst . getType ( ) ) { 
 - case TokenTypes . VARIABLE _ DEF : 
 - dist + + ; 
 - break ; 
 - case TokenTypes . SLIST : 
 - dist = 0 ; 
 - break ; 
 - case TokenTypes . LITERAL _ FOR : 
 - case TokenTypes . LITERAL _ WHILE : 
 - case TokenTypes . LITERAL _ DO : 
 - case TokenTypes . LITERAL _ IF : 
 - case TokenTypes . LITERAL _ SWITCH : 
 - if ( isVariableInOperatorExpr ( currentAst , variableIdentAst ) ) { 
 - dist + + ; 
 - } 
 - else { 
 - / / variable usage is in inner scope 
 - / / reset counters , because we can ' t determine distance 
 - dist = 0 ; 
 - } 
 - break ; 
 - default : 
 - if ( currentAst . branchContains ( TokenTypes . SLIST ) ) { 
 - dist = 0 ; 
 - } 
 - else { 
 - dist + + ; 
 - } 
 - } 
 + dist = getDistToVariableUsageInChildNode ( currentAst , variableIdentAst , dist ) ; 
 variableUsageAst = currentAst ; 
 firstUsageFound = true ; 
 } 
 @ @ - 448 , 6 + 419 , 48 @ @ public class VariableDeclarationUsageDistanceCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Returns the distance to variable usage for in the child node . 
 + * @ param childNode child node . 
 + * @ param varIdent variable variable identifier . 
 + * @ param currentDistToVarUsage current distance to the variable usage . 
 + * @ return the distance to variable usage for in the child node . 
 + * / 
 + private static int getDistToVariableUsageInChildNode ( DetailAST childNode , DetailAST varIdent , 
 + int currentDistToVarUsage ) { 
 + int resultDist = currentDistToVarUsage ; 
 + switch ( childNode . getType ( ) ) { 
 + case TokenTypes . VARIABLE _ DEF : 
 + resultDist + + ; 
 + break ; 
 + case TokenTypes . SLIST : 
 + resultDist = 0 ; 
 + break ; 
 + case TokenTypes . LITERAL _ FOR : 
 + case TokenTypes . LITERAL _ WHILE : 
 + case TokenTypes . LITERAL _ DO : 
 + case TokenTypes . LITERAL _ IF : 
 + case TokenTypes . LITERAL _ SWITCH : 
 + if ( isVariableInOperatorExpr ( childNode , varIdent ) ) { 
 + resultDist + + ; 
 + } 
 + else { 
 + / / variable usage is in inner scope 
 + / / reset counters , because we can ' t determine distance 
 + resultDist = 0 ; 
 + } 
 + break ; 
 + default : 
 + if ( childNode . branchContains ( TokenTypes . SLIST ) ) { 
 + resultDist = 0 ; 
 + } 
 + else { 
 + resultDist + + ; 
 + } 
 + } 
 + return resultDist ; 
 + } 
 + 
 + / * * 
 * Calculates distance between declaration of variable and its first usage 
 * in multiple scopes . 
 * @ param ast
