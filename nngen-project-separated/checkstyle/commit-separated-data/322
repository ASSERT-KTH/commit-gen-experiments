BLEU SCORE: 0.040196567388933686

TEST MSG: Issue # 5638 : File { Input , Output } Stream to Files . new { Input , Output } Stream
GENERATED MSG: Issue # 5023 : Prohibited the usage of hardcoded encoding in Checkstyle source code ;

TEST DIFF (one line): diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index 032fab3 . . df9d9f3 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 5 , 6 + 5 , 11 @ @ <nl> <nl> < import - control pkg = " com . puppycrawl . tools . checkstyle " > <nl> <nl> + < ! - - java . io . FileInputStream and java . io . FileOutputStream are disallowed in favor of <nl> + Files . newInputStream and Files . newOutputStream . <nl> + See https : / / github . com / checkstyle / checkstyle / issues / 5638 - - > <nl> + < disallow class = " java . io . FileInputStream " / > <nl> + < disallow class = " java . io . FileOutputStream " / > <nl> < ! - - Disallowed till https : / / github . com / mojohaus / cobertura - maven - plugin / issues / 29 - - > <nl> < disallow class = " java . util . stream . Stream " / > <nl> < disallow class = " java . util . stream . Stream . Builder " / > <nl> @ @ - 79 , 6 + 84 , 7 @ @ <nl> <nl> < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > <nl> < allow class = " com . google . common . io . Closeables " local - only = " true " / > <nl> + < allow class = " java . nio . file . Files " local - only = " true " / > <nl> < / subpackage > <nl> <nl> < subpackage name = " api " > <nl> @ @ - 86 , 6 + 92 , 7 @ @ <nl> < allow pkg = " java . lang . reflect " local - only = " true " / > <nl> < allow pkg = " java . nio . charset " local - only = " true " / > <nl> < allow class = " java . beans . PropertyDescriptor " local - only = " true " / > <nl> + < allow class = " java . nio . file . Files " local - only = " true " / > <nl> < allow class = " java . text . MessageFormat " local - only = " true " / > <nl> < allow class = " com . puppycrawl . tools . checkstyle . grammars . CommentListener " <nl> local - only = " true " / > <nl> @ @ - 104 , 6 + 111 , 8 @ @ <nl> < allow pkg = " java . math " / > <nl> < allow pkg = " com . puppycrawl . tools . checkstyle . utils " / > <nl> < allow class = " java . nio . charset . StandardCharsets " local - only = " true " / > <nl> + < allow class = " java . nio . file . Files " local - only = " true " / > <nl> + < allow class = " java . nio . file . NoSuchFileException " local - only = " true " / > <nl> < allow class = " com . puppycrawl . tools . checkstyle . Definitions " local - only = " true " / > <nl> <nl> < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractIndentationTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractIndentationTestSupport . java <nl> index 1fec178 . . 1ddebfd 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / AbstractIndentationTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / AbstractIndentationTestSupport . java <nl> @ @ - 20 , 10 + 20 , 10 @ @ <nl> package com . google . checkstyle . test . base ; <nl> <nl> import java . io . BufferedReader ; <nl> - import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> - import java . io . InputStreamReader ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Paths ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> @ @ - 64 , 8 + 64 , 8 @ @ public abstract class AbstractIndentationTestSupport extends AbstractModuleTestS <nl> final int tabWidth ) <nl> throws IOException { <nl> final List < Integer > result = new ArrayList < > ( ) ; <nl> - try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( <nl> - new FileInputStream ( aFileName ) , StandardCharsets . UTF _ 8 ) ) ) { <nl> + try ( BufferedReader br = Files . newBufferedReader ( <nl> + Paths . get ( aFileName ) , StandardCharsets . UTF _ 8 ) ) { <nl> int lineNumber = 1 ; <nl> for ( String line = br . readLine ( ) ; line ! = null ; line = br . readLine ( ) ) { <nl> final Matcher match = LINE _ WITH _ COMMENT _ REGEX . matcher ( line ) ; <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> index 7ea9c61 . . 5e351c9 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> @ @ - 26 , 11 + 26 , 12 @ @ import java . io . BufferedReader ; <nl> import java . io . ByteArrayInputStream ; <nl> import java . io . ByteArrayOutputStream ; <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . io . LineNumberReader ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Paths ; <nl> import java . text . MessageFormat ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> @ @ - 396 , 8 + 397 , 8 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * / <nl> protected Integer [ ] getLinesWithWarn ( String fileName ) throws IOException { <nl> final List < Integer > result = new ArrayList < > ( ) ; <nl> - try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( <nl> - new FileInputStream ( fileName ) , StandardCharsets . UTF _ 8 ) ) ) { <nl> + try ( BufferedReader br = Files . newBufferedReader ( <nl> + Paths . get ( fileName ) , StandardCharsets . UTF _ 8 ) ) { <nl> int lineNumber = 1 ; <nl> while ( true ) { <nl> final String line = br . readLine ( ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index cd5a75c . . 9ce6a01 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 20 , 11 + 20 , 11 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> - import java . io . FileNotFoundException ; <nl> - import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . io . OutputStream ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Paths ; <nl> import java . util . ArrayList ; <nl> import java . util . LinkedList ; <nl> import java . util . List ; <nl> @ @ - 472 , 13 + 472 , 13 @ @ public final class Main { <nl> * @ param cliOptions <nl> * pojo object that contains all options <nl> * @ return number of violations of ERROR level <nl> - * @ throws FileNotFoundException <nl> + * @ throws IOException <nl> * when output file could not be found <nl> * @ throws CheckstyleException <nl> * when properties file could not be loaded <nl> * / <nl> private static int runCheckstyle ( CliOptions cliOptions ) <nl> - throws CheckstyleException , FileNotFoundException { <nl> + throws CheckstyleException , IOException { <nl> / / setup the properties <nl> final Properties props ; <nl> <nl> @ @ - 558 , 9 + 558 , 9 @ @ public final class Main { <nl> throws CheckstyleException { <nl> final Properties properties = new Properties ( ) ; <nl> <nl> - FileInputStream fis = null ; <nl> + InputStream fis = null ; <nl> try { <nl> - fis = new FileInputStream ( file ) ; <nl> + fis = Files . newInputStream ( file . toPath ( ) ) ; <nl> properties . load ( fis ) ; <nl> } <nl> catch ( final IOException ex ) { <nl> @ @ - 582 , 12 + 582 , 11 @ @ public final class Main { <nl> * @ param format format of the audit listener <nl> * @ param outputLocation the location of output <nl> * @ return a fresh new { @ code AuditListener } <nl> - * @ exception FileNotFoundException when provided output location is not found <nl> - * @ noinspection IOResourceOpenedButNotSafelyClosed <nl> + * @ exception IOException when provided output location is not found <nl> * / <nl> private static AuditListener createListener ( String format , <nl> String outputLocation ) <nl> - throws FileNotFoundException { <nl> + throws IOException { <nl> / / setup the output stream <nl> final OutputStream out ; <nl> final AutomaticBean . OutputStreamOptions closeOutputStream ; <nl> @ @ - 596 , 7 + 595 , 7 @ @ public final class Main { <nl> closeOutputStream = AutomaticBean . OutputStreamOptions . NONE ; <nl> } <nl> else { <nl> - out = new FileOutputStream ( outputLocation ) ; <nl> + out = Files . newOutputStream ( Paths . get ( outputLocation ) ) ; <nl> closeOutputStream = AutomaticBean . OutputStreamOptions . CLOSE ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> index 78656a2 . . fdfdf32 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> @ @ - 22 , 9 + 22 , 8 @ @ package com . puppycrawl . tools . checkstyle ; <nl> import java . io . BufferedInputStream ; <nl> import java . io . ByteArrayOutputStream ; <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> - import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . io . ObjectOutputStream ; <nl> import java . io . OutputStream ; <nl> import java . io . Serializable ; <nl> @ @ - 115 , 10 + 114 , 11 @ @ final class PropertyCacheFile { <nl> / / get the current config so if the file isn ' t found <nl> / / the first time the hash will be added to output file <nl> configHash = getHashCodeBasedOnObjectContent ( config ) ; <nl> - if ( new File ( fileName ) . exists ( ) ) { <nl> - FileInputStream inStream = null ; <nl> + final File file = new File ( fileName ) ; <nl> + if ( file . exists ( ) ) { <nl> + InputStream inStream = null ; <nl> try { <nl> - inStream = new FileInputStream ( fileName ) ; <nl> + inStream = Files . newInputStream ( file . toPath ( ) ) ; <nl> details . load ( inStream ) ; <nl> final String cachedConfigHash = details . getProperty ( CONFIG _ HASH _ KEY ) ; <nl> if ( ! configHash . equals ( cachedConfigHash ) ) { <nl> @ @ - 141 , 13 + 141 , 14 @ @ final class PropertyCacheFile { <nl> * @ throws IOException when there is a problems with file save <nl> * / <nl> public void persist ( ) throws IOException { <nl> - final Path directory = Paths . get ( fileName ) . getParent ( ) ; <nl> + final Path path = Paths . get ( fileName ) ; <nl> + final Path directory = path . getParent ( ) ; <nl> if ( directory ! = null ) { <nl> Files . createDirectories ( directory ) ; <nl> } <nl> - FileOutputStream out = null ; <nl> + OutputStream out = null ; <nl> try { <nl> - out = new FileOutputStream ( fileName ) ; <nl> + out = Files . newOutputStream ( path ) ; <nl> details . store ( out , null ) ; <nl> } <nl> finally { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> index ed9067d . . 881ff7a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> @ @ - 20 , 10 + 20 , 10 @ @ <nl> package com . puppycrawl . tools . checkstyle . ant ; <nl> <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> - import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . io . OutputStream ; <nl> + import java . nio . file . Files ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> @ @ - 444 , 9 + 444 , 9 @ @ public class CheckstyleAntTask extends Task { <nl> <nl> / / Load the properties file if specified <nl> if ( properties ! = null ) { <nl> - FileInputStream inStream = null ; <nl> + InputStream inStream = null ; <nl> try { <nl> - inStream = new FileInputStream ( properties ) ; <nl> + inStream = Files . newInputStream ( properties . toPath ( ) ) ; <nl> returnValue . load ( inStream ) ; <nl> } <nl> catch ( final IOException ex ) { <nl> @ @ - 703 , 7 + 703 , 7 @ @ public class CheckstyleAntTask extends Task { <nl> ) ; <nl> } <nl> else { <nl> - final FileOutputStream infoStream = new FileOutputStream ( toFile ) ; <nl> + final OutputStream infoStream = Files . newOutputStream ( toFile . toPath ( ) ) ; <nl> defaultLogger = <nl> new DefaultLogger ( infoStream , AutomaticBean . OutputStreamOptions . CLOSE , <nl> infoStream , AutomaticBean . OutputStreamOptions . NONE ) ; <nl> @ @ - 724 , 7 + 724 , 7 @ @ public class CheckstyleAntTask extends Task { <nl> AutomaticBean . OutputStreamOptions . CLOSE ) ; <nl> } <nl> else { <nl> - xmlLogger = new XMLLogger ( new FileOutputStream ( toFile ) , <nl> + xmlLogger = new XMLLogger ( Files . newOutputStream ( toFile . toPath ( ) ) , <nl> AutomaticBean . OutputStreamOptions . CLOSE ) ; <nl> } <nl> return xmlLogger ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> index 4199836 . . 3d94a8a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> @ @ - 21 , 9 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import java . io . BufferedReader ; <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> import java . io . Reader ; <nl> import java . io . StringReader ; <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . nio . charset . Charset ; <nl> import java . nio . charset . CharsetDecoder ; <nl> import java . nio . charset . CodingErrorAction ; <nl> import java . nio . charset . UnsupportedCharsetException ; <nl> + import java . nio . file . Files ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> @ @ - 196 , 7 + 197 , 7 @ @ public final class FileText { <nl> throw new FileNotFoundException ( inputFile . getPath ( ) + " ( No such file or directory ) " ) ; <nl> } <nl> final StringBuilder buf = new StringBuilder ( 1024 ) ; <nl> - final FileInputStream stream = new FileInputStream ( inputFile ) ; <nl> + final InputStream stream = Files . newInputStream ( inputFile . toPath ( ) ) ; <nl> final Reader reader = new InputStreamReader ( stream , decoder ) ; <nl> try { <nl> final char [ ] chars = new char [ READ _ BUFFER _ SIZE ] ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> index 6fc5e5b . . 13d1d03 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> @ @ - 20 , 10 + 20 , 10 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> - import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . NoSuchFileException ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . HashSet ; <nl> @ @ - 482 , 7 + 482 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> Set < String > keys = new HashSet < > ( ) ; <nl> InputStream inStream = null ; <nl> try { <nl> - inStream = new FileInputStream ( file ) ; <nl> + inStream = Files . newInputStream ( file . toPath ( ) ) ; <nl> final Properties translations = new Properties ( ) ; <nl> translations . load ( inStream ) ; <nl> keys = translations . stringPropertyNames ( ) ; <nl> @ @ - 504 , 7 + 504 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> private void logIoException ( IOException exception , File file ) { <nl> String [ ] args = null ; <nl> String key = " general . fileNotFound " ; <nl> - if ( ! ( exception instanceof FileNotFoundException ) ) { <nl> + if ( ! ( exception instanceof NoSuchFileException ) ) { <nl> args = new String [ ] { exception . getMessage ( ) } ; <nl> key = " general . exception " ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> index 360a4b3 . . 634be9b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> @ @ - 20 , 8 + 20 , 9 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . nio . file . Files ; <nl> import java . util . Properties ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> @ @ - 68 , 17 + 69 , 17 @ @ public class UniquePropertiesCheck extends AbstractFileSetCheck { <nl> @ Override <nl> protected void processFiltered ( File file , FileText fileText ) { <nl> final UniqueProperties properties = new UniqueProperties ( ) ; <nl> - FileInputStream fileInputStream = null ; <nl> + InputStream inputStream = null ; <nl> try { <nl> - fileInputStream = new FileInputStream ( file ) ; <nl> - properties . load ( fileInputStream ) ; <nl> + inputStream = Files . newInputStream ( file . toPath ( ) ) ; <nl> + properties . load ( inputStream ) ; <nl> } <nl> catch ( IOException ex ) { <nl> log ( 0 , MSG _ IO _ EXCEPTION _ KEY , file . getPath ( ) , <nl> ex . getLocalizedMessage ( ) ) ; <nl> } <nl> finally { <nl> - Closeables . closeQuietly ( fileInputStream ) ; <nl> + Closeables . closeQuietly ( inputStream ) ; <nl> } <nl> <nl> for ( Entry < String > duplication : properties <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 05cfab5 . . 5ade110 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 37 , 9 + 37 , 9 @ @ import static org . mockito . Mockito . when ; <nl> import java . io . ByteArrayInputStream ; <nl> import java . io . ByteArrayOutputStream ; <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> import java . io . IOError ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> import java . io . LineNumberReader ; <nl> import java . io . UnsupportedEncodingException ; <nl> @ @ - 848 , 7 + 848 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> <nl> verify ( checkerConfig , fileViolationPath , expected ) ; <nl> <nl> - try ( FileInputStream input = new FileInputStream ( cacheFile ) ) { <nl> + try ( InputStream input = Files . newInputStream ( cacheFile . toPath ( ) ) ) { <nl> final Properties details = new Properties ( ) ; <nl> details . load ( input ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index 37c6ee5 . . b0532ae 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 25 , 10 + 25 , 11 @ @ import static org . junit . Assert . fail ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Paths ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . Properties ; <nl> @ @ - 560 , 8 + 561 , 8 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { <nl> public void testLoadConfigurationDeprecated ( ) throws Exception { <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - new FileInputStream ( <nl> - getPath ( " InputConfigurationLoaderModuleIgnoreSeverity . xml " ) ) , <nl> + Files . newInputStream ( Paths . get ( <nl> + getPath ( " InputConfigurationLoaderModuleIgnoreSeverity . xml " ) ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 647 , 8 + 648 , 8 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { <nl> <nl> final DefaultConfiguration configuration1 = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - new InputSource ( new FileInputStream ( <nl> - getPath ( " InputConfigurationLoaderModuleIgnoreSeverity . xml " ) ) ) , <nl> + new InputSource ( Files . newInputStream ( Paths . get ( <nl> + getPath ( " InputConfigurationLoaderModuleIgnoreSeverity . xml " ) ) ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , <nl> ConfigurationLoader . IgnoredModulesOptions . EXECUTE ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 32786cf . . 39ab06e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 488 , 18 + 488 , 7 @ @ public class MainTest { <nl> final Method method = Main . class . getDeclaredMethod ( " loadProperties " , param ) ; <nl> method . setAccessible ( true ) ; <nl> try { <nl> - if ( System . getProperty ( " os . name " ) . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { <nl> - / / https : / / support . microsoft . com / en - us / kb / 177506 but this only for NTFS <nl> - / / WindowsServer 2012 use Resilient File System ( ReFS ) , so any name is ok <nl> - final File file = new File ( File . separator + " : invalid " ) ; <nl> - if ( file . exists ( ) ) { <nl> - file . delete ( ) ; <nl> - } <nl> - method . invoke ( null , new File ( file . getAbsolutePath ( ) ) ) ; <nl> - } <nl> - else { <nl> - method . invoke ( null , new File ( File . separator + " \ 0 : invalid " ) ) ; <nl> - } <nl> + method . invoke ( null , new File ( " . " ) ) ; <nl> fail ( " Exception was expected " ) ; <nl> } <nl> catch ( InvocationTargetException ex ) { <nl> @ @ - 522 , 8 + 511 , 7 @ @ public class MainTest { <nl> . substring ( localizedMessage . lastIndexOf ( ' ' ) , <nl> localizedMessage . length ( ) ) ) ; <nl> assertTrue ( " Invalid error message " , samePrefix | | sameSuffix ) ; <nl> - assertTrue ( " Invalid error message " , <nl> - causeMessage . contains ( " : invalid " ) ) ; <nl> + assertTrue ( " Invalid error message " , causeMessage . contains ( " . ' " ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> index 22beca8 . . b13ff01 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> @ @ - 33 , 7 + 33 , 6 @ @ import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> import java . io . ByteArrayInputStream ; <nl> - import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . lang . reflect . Constructor ; <nl> @ @ - 41 , 6 + 40 , 8 @ @ import java . lang . reflect . Field ; <nl> import java . net . URL ; <nl> import java . net . URLConnection ; <nl> import java . net . URLStreamHandler ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> import java . util . Enumeration ; <nl> import java . util . HashSet ; <nl> @ @ - 97 , 7 + 98 , 7 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { <nl> <nl> final URLConnection mockConnection = Mockito . mock ( URLConnection . class ) ; <nl> when ( mockConnection . getInputStream ( ) ) . thenReturn ( <nl> - new FileInputStream ( getPath ( " InputPackageNamesLoaderFile . xml " ) ) ) ; <nl> + Files . newInputStream ( Paths . get ( getPath ( " InputPackageNamesLoaderFile . xml " ) ) ) ) ; <nl> <nl> final URL url = getMockUrl ( mockConnection ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> index 86739c5 . . dfae54e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> @ @ - 36 , 10 + 36 , 10 @ @ import static org . powermock . api . mockito . PowerMockito . when ; <nl> import java . io . BufferedInputStream ; <nl> import java . io . ByteArrayOutputStream ; <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> - import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . io . ObjectOutputStream ; <nl> + import java . io . OutputStream ; <nl> import java . io . Serializable ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 152 , 7 + 152 , 7 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> public void testPopulateDetails ( ) throws IOException { <nl> mockStatic ( Closeables . class ) ; <nl> doNothing ( ) . when ( Closeables . class ) ; <nl> - Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> + Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> final PropertyCacheFile cache = new PropertyCacheFile ( config , <nl> @ @ - 171 , 7 + 171 , 7 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> <nl> verifyStatic ( Closeables . class , times ( 2 ) ) ; <nl> - Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> + Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 283 , 10 + 283 , 10 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> public void testFlushAndCloseCacheFileOutputStream ( ) throws IOException { <nl> mockStatic ( Closeables . class ) ; <nl> doNothing ( ) . when ( Closeables . class ) ; <nl> - Closeables . close ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> + Closeables . close ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> mockStatic ( Flushables . class ) ; <nl> doNothing ( ) . when ( Flushables . class ) ; <nl> - Flushables . flush ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> + Flushables . flush ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> final PropertyCacheFile cache = new PropertyCacheFile ( config , <nl> @ @ - 296 , 9 + 296 , 9 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> cache . persist ( ) ; <nl> <nl> verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> - Closeables . close ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> + Closeables . close ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> verifyStatic ( Flushables . class , times ( 1 ) ) ; <nl> - Flushables . flush ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> + Flushables . flush ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 19da856 . . 7b888d6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 24 , 10 + 24 , 7 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> - import java . io . BufferedWriter ; <nl> import java . io . File ; <nl> - import java . io . FileOutputStream ; <nl> - import java . io . OutputStreamWriter ; <nl> import java . io . Writer ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . nio . file . Files ; <nl> @ @ - 77 , 8 + 74 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( ConstantNameCheck . class ) ; <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> - try ( Writer writer = new BufferedWriter ( <nl> - new OutputStreamWriter ( new FileOutputStream ( file ) , StandardCharsets . UTF _ 8 ) ) ) { <nl> + try ( Writer writer = Files . newBufferedWriter ( file . toPath ( ) , StandardCharsets . UTF _ 8 ) ) { <nl> final String content = " public class Main { public static final int k = 5 + 4 ; } " ; <nl> writer . write ( content ) ; <nl> } <nl> @ @ - 94 , 8 + 90 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( ConstantNameCheck . class ) ; <nl> final File file = temporaryFolder . newFile ( " file . pdf " ) ; <nl> - try ( BufferedWriter writer = new BufferedWriter ( <nl> - new OutputStreamWriter ( new FileOutputStream ( file ) , StandardCharsets . UTF _ 8 ) ) ) { <nl> + try ( Writer writer = Files . newBufferedWriter ( file . toPath ( ) , StandardCharsets . UTF _ 8 ) ) { <nl> final String content = " public class Main { public static final int k = 5 + 4 ; } " ; <nl> writer . write ( content ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> index 5ad7288 . . 2f89a24 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> @ @ - 25 , 12 + 25 , 11 @ @ import static org . junit . Assert . assertNotSame ; <nl> import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> - import java . io . BufferedWriter ; <nl> import java . io . File ; <nl> - import java . io . FileOutputStream ; <nl> - import java . io . OutputStreamWriter ; <nl> + import java . io . Writer ; <nl> import java . lang . reflect . Method ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . nio . file . Files ; <nl> import java . text . MessageFormat ; <nl> import java . util . Arrays ; <nl> import java . util . BitSet ; <nl> @ @ - 243 , 8 + 242 , 7 @ @ public class DetailASTTest extends AbstractModuleTestSupport { <nl> public void testManyComments ( ) throws Exception { <nl> final File file = temporaryFolder . newFile ( " InputDetailASTManyComments . java " ) ; <nl> <nl> - try ( BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( <nl> - new FileOutputStream ( file ) , StandardCharsets . UTF _ 8 ) ) ) { <nl> + try ( Writer bw = Files . newBufferedWriter ( file . toPath ( ) , StandardCharsets . UTF _ 8 ) ) { <nl> bw . write ( " class C { \ n " ) ; <nl> for ( int i = 0 ; i < = 30000 ; i + + ) { <nl> bw . write ( " / / " + i + " \ n " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> index 8443d40 . . 6ec254d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> @ @ - 212 , 7 + 212 , 7 @ @ public class TranslationCheckTest extends AbstractXmlTestSupport { <nl> final Method loadKeys = <nl> check . getClass ( ) . getDeclaredMethod ( " getTranslationKeys " , File . class ) ; <nl> loadKeys . setAccessible ( true ) ; <nl> - final Set < String > keys = ( Set < String > ) loadKeys . invoke ( check , new File ( " " ) ) ; <nl> + final Set < String > keys = ( Set < String > ) loadKeys . invoke ( check , new File ( " . no . such . file " ) ) ; <nl> assertTrue ( " Translation keys should be empty when File is not found " , keys . isEmpty ( ) ) ; <nl> assertEquals ( " Invalid error count " , 1 , counter . getCount ( ) ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> index 938185e . . c695b66 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> @ @ - 29 , 11 + 29 , 12 @ @ import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> - import java . io . FileNotFoundException ; <nl> + import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . Method ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . NoSuchFileException ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> @ @ - 100 , 14 + 101 , 14 @ @ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { <nl> public void testCloseInputStream ( ) throws Exception { <nl> mockStatic ( Closeables . class ) ; <nl> doNothing ( ) . when ( Closeables . class ) ; <nl> - Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> + Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> <nl> final DefaultConfiguration checkConfig = createModuleConfig ( UniquePropertiesCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getPath ( " InputUniquePropertiesWithoutErrors . properties " ) , expected ) ; <nl> <nl> verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> - Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> + Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 194 , 20 + 195 , 17 @ @ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> / * * <nl> - * Method generates FileNotFound exception details . It tries to open file , <nl> - * that does not exist . <nl> + * Method generates NoSuchFileException details . It tries to a open file that does not exist . <nl> * @ param file to be opened <nl> - * @ return detail message of { @ link FileNotFoundException } <nl> + * @ return localized detail message of { @ link NoSuchFileException } <nl> * / <nl> - private static String getFileNotFoundDetail ( File file ) throws Exception { <nl> + private static String getFileNotFoundDetail ( File file ) { <nl> / / Create exception to know detail message we should wait in <nl> / / LocalisedMessage <nl> - try { <nl> - final InputStream stream = new FileInputStream ( file ) ; <nl> - stream . close ( ) ; <nl> + try ( InputStream stream = Files . newInputStream ( file . toPath ( ) ) ) { <nl> throw new IllegalStateException ( " File " + file . getPath ( ) + " should not exist " ) ; <nl> } <nl> - catch ( FileNotFoundException ex ) { <nl> + catch ( IOException ex ) { <nl> return ex . getLocalizedMessage ( ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index d49755c . . 0085472 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 30 , 10 + 30 , 10 @ @ import static org . junit . Assert . fail ; <nl> <nl> import java . io . BufferedReader ; <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> - import java . io . InputStreamReader ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Paths ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> @ @ - 65 , 8 + 65 , 8 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { <nl> final int tabWidth ) <nl> throws IOException { <nl> final List < IndentComment > result = new ArrayList < > ( ) ; <nl> - try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( <nl> - new FileInputStream ( aFileName ) , StandardCharsets . UTF _ 8 ) ) ) { <nl> + try ( BufferedReader br = Files . newBufferedReader ( Paths . get ( aFileName ) , <nl> + StandardCharsets . UTF _ 8 ) ) { <nl> int lineNumber = 1 ; <nl> for ( String line = br . readLine ( ) ; line ! = null ; line = br . readLine ( ) ) { <nl> final Matcher match = LINE _ WITH _ COMMENT _ REGEX . matcher ( line ) ;
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / ParenPadTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / ParenPadTest . java <nl> index 104785e . . 06cedac 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / ParenPadTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / ParenPadTest . java <nl> @ @ - 158 , 6 + 158 , 8 @ @ public class ParenPadTest extends AbstractModuleTestSupport { <nl> " 212 : 49 : " + getCheckMessage ( clazz , messageKeyFollowed , " ( " ) , <nl> " 212 : 51 : " + getCheckMessage ( clazz , messageKeyPreceded , " ) " ) , <nl> " 212 : 53 : " + getCheckMessage ( clazz , messageKeyPreceded , " ) " ) , <nl> + " 220 : 36 : " + getCheckMessage ( clazz , messageKeyPreceded , " ) " ) , <nl> + " 221 : 60 : " + getCheckMessage ( clazz , messageKeyPreceded , " ) " ) , <nl> } ; <nl> final Configuration checkConfig = getModuleConfig ( " ParenPad " ) ; <nl> final String filePath = getPath ( " InputParenPad . java " ) ; <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputParenPad . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputParenPad . java <nl> index 5d7fc1f . . 7739937 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputParenPad . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputParenPad . java <nl> @ @ - 211 , 4 + 211 , 13 @ @ enum MyEnum { <nl> org . junit . Assert . assertThat ( " Help ! Integers don ' t work " , / / warning <nl> 0 , org . hamcrest . CoreMatchers . is ( 1 ) ) ; / / warning <nl> } <nl> + <nl> + private void tryWithResources ( ) throws Exception { <nl> + try ( AutoCloseable a = null ) { } / / ok <nl> + try ( AutoCloseable a = null ; AutoCloseable b = null ) { } / / ok <nl> + try ( AutoCloseable a = null ; AutoCloseable b = null ; ) { } / / ok <nl> + try ( AutoCloseable a = null ; AutoCloseable b = null ; ) { } / / ok <nl> + try ( AutoCloseable a = null ) { } / / warning <nl> + try ( AutoCloseable a = null ; AutoCloseable b = null ) { } / / warning <nl> + } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java <nl> index bd5bc60 . . a5cd4c1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java <nl> @ @ - 28 , 9 + 28 , 10 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> / * * <nl> * < p > Checks the padding of parentheses ; that is whether a space is required <nl> * after a left parenthesis and before a right parenthesis , or such spaces are <nl> - * forbidden , with the exception that it does <nl> - * not check for padding of the right parenthesis at an empty for iterator and <nl> - * empty for initializer . <nl> + * forbidden . No check occurs at the right parenthesis after an empty for <nl> + * iterator , at the left parenthesis before an empty for initialization , or at <nl> + * the right parenthesis of a try - with - resources resource specification where <nl> + * the last resource variable has a trailing semi - colon . <nl> * Use Check { @ link EmptyForIteratorPadCheck EmptyForIteratorPad } to validate <nl> * empty for iterators and { @ link EmptyForInitializerPadCheck EmptyForInitializerPad } <nl> * to validate empty for initializers . Typecasts are also not checked , as there is <nl> @ @ - 137 , 6 + 138 , 9 @ @ public class ParenPadCheck extends AbstractParenPadCheck { <nl> case TokenTypes . LAMBDA : <nl> visitTokenWithOptionalParentheses ( ast ) ; <nl> break ; <nl> + case TokenTypes . RESOURCE _ SPECIFICATION : <nl> + visitResourceSpecification ( ast ) ; <nl> + break ; <nl> default : <nl> processLeft ( ast . findFirstToken ( TokenTypes . LPAREN ) ) ; <nl> processRight ( ast . findFirstToken ( TokenTypes . RPAREN ) ) ; <nl> @ @ - 159 , 6 + 163 , 27 @ @ public class ParenPadCheck extends AbstractParenPadCheck { <nl> } <nl> <nl> / * * <nl> + * Checks parens in { @ link TokenTypes # RESOURCE _ SPECIFICATION } . <nl> + * @ param ast the token to check . <nl> + * / <nl> + private void visitResourceSpecification ( DetailAST ast ) { <nl> + processLeft ( ast . findFirstToken ( TokenTypes . LPAREN ) ) ; <nl> + final DetailAST rparen = ast . findFirstToken ( TokenTypes . RPAREN ) ; <nl> + if ( ! hasPrecedingSemiColon ( rparen ) ) { <nl> + processRight ( rparen ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks that a token is preceded by a semi - colon . <nl> + * @ param ast the token to check <nl> + * @ return whether a token is preceded by a semi - colon <nl> + * / <nl> + private static boolean hasPrecedingSemiColon ( DetailAST ast ) { <nl> + return ast . getPreviousSibling ( ) . getType ( ) = = TokenTypes . SEMI ; <nl> + } <nl> + <nl> + / * * <nl> * Checks parens in { @ link TokenTypes # LITERAL _ FOR } . <nl> * @ param ast the token to check . <nl> * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> index 1537765 . . a9df661 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> @ @ - 445 , 4 + 445 , 14 @ @ public class ParenPadCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputParenPadStartOfTheLine . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testTryWithResources ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ParenPadCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 9 : 36 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " ) " ) , <nl> + " 10 : 60 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " ) " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputParenPadTryWithResources . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadTryWithResources . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadTryWithResources . java <nl> new file mode 100644 <nl> index 0000000 . . b45f2f4 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadTryWithResources . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . parenpad ; <nl> + <nl> + class InputParenPadTryWithResources { <nl> + private void tryWithResources ( ) throws Exception { <nl> + try ( AutoCloseable a = null ) { } / / ok <nl> + try ( AutoCloseable a = null ; AutoCloseable b = null ) { } / / ok <nl> + try ( AutoCloseable a = null ; AutoCloseable b = null ; ) { } / / ok <nl> + try ( AutoCloseable a = null ; AutoCloseable b = null ; ) { } / / ok <nl> + try ( AutoCloseable a = null ) { } / / warning <nl> + try ( AutoCloseable a = null ; AutoCloseable b = null ) { } / / warning <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml <nl> index 21676a9 . . a02dc6a 100644 <nl> - - - a / src / xdocs / config _ whitespace . xml <nl> + + + b / src / xdocs / config _ whitespace . xml <nl> @ @ - 1396 , 9 + 1396 , 11 @ @ import static java . math . BigInteger . ZERO ; <nl> < p > <nl> Checks the policy on the padding of parentheses ; i . e . whether a <nl> space is required after a left parenthesis and before a right <nl> - parenthesis , or such spaces are forbidden , with the exception that it does <nl> - not check for padding of the right parenthesis at an empty for iterator and <nl> - empty for initializer . <nl> + parenthesis , or such spaces are forbidden . No check occurs at <nl> + the right parenthesis after an empty for iterator , at the left <nl> + parenthesis before an empty for initialization , or at the right <nl> + parenthesis of a try - with - resources resource specification where <nl> + the last resource variable has a trailing semi - colon . <nl> Use Check < a <nl> href = " config _ whitespace . html # EmptyForIteratorPad " > EmptyForIteratorPad < / a > <nl> to validate empty for iterators and < a <nl> @ @ - 1542 , 6 + 1544 , 16 @ @ import static java . math . BigInteger . ZERO ; <nl> & lt ; property name = & quot ; option & quot ; value = & quot ; space & quot ; / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + <nl> + < p > <nl> + The following cases not checked : <nl> + < / p > <nl> + < source > <nl> + for ( ; i & lt ; j ; i + + , j - - ) / / no check after left parenthesis <nl> + for ( Iterator it = xs . iterator ( ) ; it . hasNext ( ) ; ) / / no check before right parenthesis <nl> + try ( Closeable resource = acquire ( ) ; ) / / no check before right parenthesis <nl> + < / source > <nl> + <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " >

TEST DIFF:
diff - - git a / config / import - control . xml b / config / import - control . xml 
 index 032fab3 . . df9d9f3 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 5 , 6 + 5 , 11 @ @ 
 
 < import - control pkg = " com . puppycrawl . tools . checkstyle " > 
 
 + < ! - - java . io . FileInputStream and java . io . FileOutputStream are disallowed in favor of 
 + Files . newInputStream and Files . newOutputStream . 
 + See https : / / github . com / checkstyle / checkstyle / issues / 5638 - - > 
 + < disallow class = " java . io . FileInputStream " / > 
 + < disallow class = " java . io . FileOutputStream " / > 
 < ! - - Disallowed till https : / / github . com / mojohaus / cobertura - maven - plugin / issues / 29 - - > 
 < disallow class = " java . util . stream . Stream " / > 
 < disallow class = " java . util . stream . Stream . Builder " / > 
 @ @ - 79 , 6 + 84 , 7 @ @ 
 
 < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > 
 < allow class = " com . google . common . io . Closeables " local - only = " true " / > 
 + < allow class = " java . nio . file . Files " local - only = " true " / > 
 < / subpackage > 
 
 < subpackage name = " api " > 
 @ @ - 86 , 6 + 92 , 7 @ @ 
 < allow pkg = " java . lang . reflect " local - only = " true " / > 
 < allow pkg = " java . nio . charset " local - only = " true " / > 
 < allow class = " java . beans . PropertyDescriptor " local - only = " true " / > 
 + < allow class = " java . nio . file . Files " local - only = " true " / > 
 < allow class = " java . text . MessageFormat " local - only = " true " / > 
 < allow class = " com . puppycrawl . tools . checkstyle . grammars . CommentListener " 
 local - only = " true " / > 
 @ @ - 104 , 6 + 111 , 8 @ @ 
 < allow pkg = " java . math " / > 
 < allow pkg = " com . puppycrawl . tools . checkstyle . utils " / > 
 < allow class = " java . nio . charset . StandardCharsets " local - only = " true " / > 
 + < allow class = " java . nio . file . Files " local - only = " true " / > 
 + < allow class = " java . nio . file . NoSuchFileException " local - only = " true " / > 
 < allow class = " com . puppycrawl . tools . checkstyle . Definitions " local - only = " true " / > 
 
 < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractIndentationTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractIndentationTestSupport . java 
 index 1fec178 . . 1ddebfd 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / AbstractIndentationTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / AbstractIndentationTestSupport . java 
 @ @ - 20 , 10 + 20 , 10 @ @ 
 package com . google . checkstyle . test . base ; 
 
 import java . io . BufferedReader ; 
 - import java . io . FileInputStream ; 
 import java . io . IOException ; 
 - import java . io . InputStreamReader ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Paths ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 @ @ - 64 , 8 + 64 , 8 @ @ public abstract class AbstractIndentationTestSupport extends AbstractModuleTestS 
 final int tabWidth ) 
 throws IOException { 
 final List < Integer > result = new ArrayList < > ( ) ; 
 - try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( 
 - new FileInputStream ( aFileName ) , StandardCharsets . UTF _ 8 ) ) ) { 
 + try ( BufferedReader br = Files . newBufferedReader ( 
 + Paths . get ( aFileName ) , StandardCharsets . UTF _ 8 ) ) { 
 int lineNumber = 1 ; 
 for ( String line = br . readLine ( ) ; line ! = null ; line = br . readLine ( ) ) { 
 final Matcher match = LINE _ WITH _ COMMENT _ REGEX . matcher ( line ) ; 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 index 7ea9c61 . . 5e351c9 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 @ @ - 26 , 11 + 26 , 12 @ @ import java . io . BufferedReader ; 
 import java . io . ByteArrayInputStream ; 
 import java . io . ByteArrayOutputStream ; 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . io . LineNumberReader ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Paths ; 
 import java . text . MessageFormat ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 @ @ - 396 , 8 + 397 , 8 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * / 
 protected Integer [ ] getLinesWithWarn ( String fileName ) throws IOException { 
 final List < Integer > result = new ArrayList < > ( ) ; 
 - try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( 
 - new FileInputStream ( fileName ) , StandardCharsets . UTF _ 8 ) ) ) { 
 + try ( BufferedReader br = Files . newBufferedReader ( 
 + Paths . get ( fileName ) , StandardCharsets . UTF _ 8 ) ) { 
 int lineNumber = 1 ; 
 while ( true ) { 
 final String line = br . readLine ( ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index cd5a75c . . 9ce6a01 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 20 , 11 + 20 , 11 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 - import java . io . FileNotFoundException ; 
 - import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . io . OutputStream ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Paths ; 
 import java . util . ArrayList ; 
 import java . util . LinkedList ; 
 import java . util . List ; 
 @ @ - 472 , 13 + 472 , 13 @ @ public final class Main { 
 * @ param cliOptions 
 * pojo object that contains all options 
 * @ return number of violations of ERROR level 
 - * @ throws FileNotFoundException 
 + * @ throws IOException 
 * when output file could not be found 
 * @ throws CheckstyleException 
 * when properties file could not be loaded 
 * / 
 private static int runCheckstyle ( CliOptions cliOptions ) 
 - throws CheckstyleException , FileNotFoundException { 
 + throws CheckstyleException , IOException { 
 / / setup the properties 
 final Properties props ; 
 
 @ @ - 558 , 9 + 558 , 9 @ @ public final class Main { 
 throws CheckstyleException { 
 final Properties properties = new Properties ( ) ; 
 
 - FileInputStream fis = null ; 
 + InputStream fis = null ; 
 try { 
 - fis = new FileInputStream ( file ) ; 
 + fis = Files . newInputStream ( file . toPath ( ) ) ; 
 properties . load ( fis ) ; 
 } 
 catch ( final IOException ex ) { 
 @ @ - 582 , 12 + 582 , 11 @ @ public final class Main { 
 * @ param format format of the audit listener 
 * @ param outputLocation the location of output 
 * @ return a fresh new { @ code AuditListener } 
 - * @ exception FileNotFoundException when provided output location is not found 
 - * @ noinspection IOResourceOpenedButNotSafelyClosed 
 + * @ exception IOException when provided output location is not found 
 * / 
 private static AuditListener createListener ( String format , 
 String outputLocation ) 
 - throws FileNotFoundException { 
 + throws IOException { 
 / / setup the output stream 
 final OutputStream out ; 
 final AutomaticBean . OutputStreamOptions closeOutputStream ; 
 @ @ - 596 , 7 + 595 , 7 @ @ public final class Main { 
 closeOutputStream = AutomaticBean . OutputStreamOptions . NONE ; 
 } 
 else { 
 - out = new FileOutputStream ( outputLocation ) ; 
 + out = Files . newOutputStream ( Paths . get ( outputLocation ) ) ; 
 closeOutputStream = AutomaticBean . OutputStreamOptions . CLOSE ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 index 78656a2 . . fdfdf32 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 @ @ - 22 , 9 + 22 , 8 @ @ package com . puppycrawl . tools . checkstyle ; 
 import java . io . BufferedInputStream ; 
 import java . io . ByteArrayOutputStream ; 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 - import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . io . ObjectOutputStream ; 
 import java . io . OutputStream ; 
 import java . io . Serializable ; 
 @ @ - 115 , 10 + 114 , 11 @ @ final class PropertyCacheFile { 
 / / get the current config so if the file isn ' t found 
 / / the first time the hash will be added to output file 
 configHash = getHashCodeBasedOnObjectContent ( config ) ; 
 - if ( new File ( fileName ) . exists ( ) ) { 
 - FileInputStream inStream = null ; 
 + final File file = new File ( fileName ) ; 
 + if ( file . exists ( ) ) { 
 + InputStream inStream = null ; 
 try { 
 - inStream = new FileInputStream ( fileName ) ; 
 + inStream = Files . newInputStream ( file . toPath ( ) ) ; 
 details . load ( inStream ) ; 
 final String cachedConfigHash = details . getProperty ( CONFIG _ HASH _ KEY ) ; 
 if ( ! configHash . equals ( cachedConfigHash ) ) { 
 @ @ - 141 , 13 + 141 , 14 @ @ final class PropertyCacheFile { 
 * @ throws IOException when there is a problems with file save 
 * / 
 public void persist ( ) throws IOException { 
 - final Path directory = Paths . get ( fileName ) . getParent ( ) ; 
 + final Path path = Paths . get ( fileName ) ; 
 + final Path directory = path . getParent ( ) ; 
 if ( directory ! = null ) { 
 Files . createDirectories ( directory ) ; 
 } 
 - FileOutputStream out = null ; 
 + OutputStream out = null ; 
 try { 
 - out = new FileOutputStream ( fileName ) ; 
 + out = Files . newOutputStream ( path ) ; 
 details . store ( out , null ) ; 
 } 
 finally { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 index ed9067d . . 881ff7a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 @ @ - 20 , 10 + 20 , 10 @ @ 
 package com . puppycrawl . tools . checkstyle . ant ; 
 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 - import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . io . OutputStream ; 
 + import java . nio . file . Files ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 @ @ - 444 , 9 + 444 , 9 @ @ public class CheckstyleAntTask extends Task { 
 
 / / Load the properties file if specified 
 if ( properties ! = null ) { 
 - FileInputStream inStream = null ; 
 + InputStream inStream = null ; 
 try { 
 - inStream = new FileInputStream ( properties ) ; 
 + inStream = Files . newInputStream ( properties . toPath ( ) ) ; 
 returnValue . load ( inStream ) ; 
 } 
 catch ( final IOException ex ) { 
 @ @ - 703 , 7 + 703 , 7 @ @ public class CheckstyleAntTask extends Task { 
 ) ; 
 } 
 else { 
 - final FileOutputStream infoStream = new FileOutputStream ( toFile ) ; 
 + final OutputStream infoStream = Files . newOutputStream ( toFile . toPath ( ) ) ; 
 defaultLogger = 
 new DefaultLogger ( infoStream , AutomaticBean . OutputStreamOptions . CLOSE , 
 infoStream , AutomaticBean . OutputStreamOptions . NONE ) ; 
 @ @ - 724 , 7 + 724 , 7 @ @ public class CheckstyleAntTask extends Task { 
 AutomaticBean . OutputStreamOptions . CLOSE ) ; 
 } 
 else { 
 - xmlLogger = new XMLLogger ( new FileOutputStream ( toFile ) , 
 + xmlLogger = new XMLLogger ( Files . newOutputStream ( toFile . toPath ( ) ) , 
 AutomaticBean . OutputStreamOptions . CLOSE ) ; 
 } 
 return xmlLogger ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 index 4199836 . . 3d94a8a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 @ @ - 21 , 9 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import java . io . BufferedReader ; 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 import java . io . FileNotFoundException ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 import java . io . Reader ; 
 import java . io . StringReader ; 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . nio . charset . Charset ; 
 import java . nio . charset . CharsetDecoder ; 
 import java . nio . charset . CodingErrorAction ; 
 import java . nio . charset . UnsupportedCharsetException ; 
 + import java . nio . file . Files ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 @ @ - 196 , 7 + 197 , 7 @ @ public final class FileText { 
 throw new FileNotFoundException ( inputFile . getPath ( ) + " ( No such file or directory ) " ) ; 
 } 
 final StringBuilder buf = new StringBuilder ( 1024 ) ; 
 - final FileInputStream stream = new FileInputStream ( inputFile ) ; 
 + final InputStream stream = Files . newInputStream ( inputFile . toPath ( ) ) ; 
 final Reader reader = new InputStreamReader ( stream , decoder ) ; 
 try { 
 final char [ ] chars = new char [ READ _ BUFFER _ SIZE ] ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 index 6fc5e5b . . 13d1d03 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 @ @ - 20 , 10 + 20 , 10 @ @ 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 - import java . io . FileNotFoundException ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . NoSuchFileException ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . HashSet ; 
 @ @ - 482 , 7 + 482 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 Set < String > keys = new HashSet < > ( ) ; 
 InputStream inStream = null ; 
 try { 
 - inStream = new FileInputStream ( file ) ; 
 + inStream = Files . newInputStream ( file . toPath ( ) ) ; 
 final Properties translations = new Properties ( ) ; 
 translations . load ( inStream ) ; 
 keys = translations . stringPropertyNames ( ) ; 
 @ @ - 504 , 7 + 504 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 private void logIoException ( IOException exception , File file ) { 
 String [ ] args = null ; 
 String key = " general . fileNotFound " ; 
 - if ( ! ( exception instanceof FileNotFoundException ) ) { 
 + if ( ! ( exception instanceof NoSuchFileException ) ) { 
 args = new String [ ] { exception . getMessage ( ) } ; 
 key = " general . exception " ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 index 360a4b3 . . 634be9b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 @ @ - 20 , 8 + 20 , 9 @ @ 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . nio . file . Files ; 
 import java . util . Properties ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 @ @ - 68 , 17 + 69 , 17 @ @ public class UniquePropertiesCheck extends AbstractFileSetCheck { 
 @ Override 
 protected void processFiltered ( File file , FileText fileText ) { 
 final UniqueProperties properties = new UniqueProperties ( ) ; 
 - FileInputStream fileInputStream = null ; 
 + InputStream inputStream = null ; 
 try { 
 - fileInputStream = new FileInputStream ( file ) ; 
 - properties . load ( fileInputStream ) ; 
 + inputStream = Files . newInputStream ( file . toPath ( ) ) ; 
 + properties . load ( inputStream ) ; 
 } 
 catch ( IOException ex ) { 
 log ( 0 , MSG _ IO _ EXCEPTION _ KEY , file . getPath ( ) , 
 ex . getLocalizedMessage ( ) ) ; 
 } 
 finally { 
 - Closeables . closeQuietly ( fileInputStream ) ; 
 + Closeables . closeQuietly ( inputStream ) ; 
 } 
 
 for ( Entry < String > duplication : properties 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 05cfab5 . . 5ade110 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 37 , 9 + 37 , 9 @ @ import static org . mockito . Mockito . when ; 
 import java . io . ByteArrayInputStream ; 
 import java . io . ByteArrayOutputStream ; 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 import java . io . IOError ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 import java . io . LineNumberReader ; 
 import java . io . UnsupportedEncodingException ; 
 @ @ - 848 , 7 + 848 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 
 verify ( checkerConfig , fileViolationPath , expected ) ; 
 
 - try ( FileInputStream input = new FileInputStream ( cacheFile ) ) { 
 + try ( InputStream input = Files . newInputStream ( cacheFile . toPath ( ) ) ) { 
 final Properties details = new Properties ( ) ; 
 details . load ( input ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index 37c6ee5 . . b0532ae 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 25 , 10 + 25 , 11 @ @ import static org . junit . Assert . fail ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Paths ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . Properties ; 
 @ @ - 560 , 8 + 561 , 8 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { 
 public void testLoadConfigurationDeprecated ( ) throws Exception { 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - new FileInputStream ( 
 - getPath ( " InputConfigurationLoaderModuleIgnoreSeverity . xml " ) ) , 
 + Files . newInputStream ( Paths . get ( 
 + getPath ( " InputConfigurationLoaderModuleIgnoreSeverity . xml " ) ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 647 , 8 + 648 , 8 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { 
 
 final DefaultConfiguration configuration1 = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - new InputSource ( new FileInputStream ( 
 - getPath ( " InputConfigurationLoaderModuleIgnoreSeverity . xml " ) ) ) , 
 + new InputSource ( Files . newInputStream ( Paths . get ( 
 + getPath ( " InputConfigurationLoaderModuleIgnoreSeverity . xml " ) ) ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , 
 ConfigurationLoader . IgnoredModulesOptions . EXECUTE ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 32786cf . . 39ab06e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 488 , 18 + 488 , 7 @ @ public class MainTest { 
 final Method method = Main . class . getDeclaredMethod ( " loadProperties " , param ) ; 
 method . setAccessible ( true ) ; 
 try { 
 - if ( System . getProperty ( " os . name " ) . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { 
 - / / https : / / support . microsoft . com / en - us / kb / 177506 but this only for NTFS 
 - / / WindowsServer 2012 use Resilient File System ( ReFS ) , so any name is ok 
 - final File file = new File ( File . separator + " : invalid " ) ; 
 - if ( file . exists ( ) ) { 
 - file . delete ( ) ; 
 - } 
 - method . invoke ( null , new File ( file . getAbsolutePath ( ) ) ) ; 
 - } 
 - else { 
 - method . invoke ( null , new File ( File . separator + " \ 0 : invalid " ) ) ; 
 - } 
 + method . invoke ( null , new File ( " . " ) ) ; 
 fail ( " Exception was expected " ) ; 
 } 
 catch ( InvocationTargetException ex ) { 
 @ @ - 522 , 8 + 511 , 7 @ @ public class MainTest { 
 . substring ( localizedMessage . lastIndexOf ( ' ' ) , 
 localizedMessage . length ( ) ) ) ; 
 assertTrue ( " Invalid error message " , samePrefix | | sameSuffix ) ; 
 - assertTrue ( " Invalid error message " , 
 - causeMessage . contains ( " : invalid " ) ) ; 
 + assertTrue ( " Invalid error message " , causeMessage . contains ( " . ' " ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 index 22beca8 . . b13ff01 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 @ @ - 33 , 7 + 33 , 6 @ @ import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 
 import java . io . ByteArrayInputStream ; 
 - import java . io . FileInputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . lang . reflect . Constructor ; 
 @ @ - 41 , 6 + 40 , 8 @ @ import java . lang . reflect . Field ; 
 import java . net . URL ; 
 import java . net . URLConnection ; 
 import java . net . URLStreamHandler ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 import java . util . Enumeration ; 
 import java . util . HashSet ; 
 @ @ - 97 , 7 + 98 , 7 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { 
 
 final URLConnection mockConnection = Mockito . mock ( URLConnection . class ) ; 
 when ( mockConnection . getInputStream ( ) ) . thenReturn ( 
 - new FileInputStream ( getPath ( " InputPackageNamesLoaderFile . xml " ) ) ) ; 
 + Files . newInputStream ( Paths . get ( getPath ( " InputPackageNamesLoaderFile . xml " ) ) ) ) ; 
 
 final URL url = getMockUrl ( mockConnection ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 index 86739c5 . . dfae54e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 @ @ - 36 , 10 + 36 , 10 @ @ import static org . powermock . api . mockito . PowerMockito . when ; 
 import java . io . BufferedInputStream ; 
 import java . io . ByteArrayOutputStream ; 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 - import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . io . ObjectOutputStream ; 
 + import java . io . OutputStream ; 
 import java . io . Serializable ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 @ @ - 152 , 7 + 152 , 7 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 public void testPopulateDetails ( ) throws IOException { 
 mockStatic ( Closeables . class ) ; 
 doNothing ( ) . when ( Closeables . class ) ; 
 - Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 + Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 final PropertyCacheFile cache = new PropertyCacheFile ( config , 
 @ @ - 171 , 7 + 171 , 7 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 
 verifyStatic ( Closeables . class , times ( 2 ) ) ; 
 - Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 + Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 } 
 
 @ Test 
 @ @ - 283 , 10 + 283 , 10 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 public void testFlushAndCloseCacheFileOutputStream ( ) throws IOException { 
 mockStatic ( Closeables . class ) ; 
 doNothing ( ) . when ( Closeables . class ) ; 
 - Closeables . close ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 + Closeables . close ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 mockStatic ( Flushables . class ) ; 
 doNothing ( ) . when ( Flushables . class ) ; 
 - Flushables . flush ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 + Flushables . flush ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 final PropertyCacheFile cache = new PropertyCacheFile ( config , 
 @ @ - 296 , 9 + 296 , 9 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 cache . persist ( ) ; 
 
 verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 - Closeables . close ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 + Closeables . close ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 verifyStatic ( Flushables . class , times ( 1 ) ) ; 
 - Flushables . flush ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 + Flushables . flush ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 19da856 . . 7b888d6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 24 , 10 + 24 , 7 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 - import java . io . BufferedWriter ; 
 import java . io . File ; 
 - import java . io . FileOutputStream ; 
 - import java . io . OutputStreamWriter ; 
 import java . io . Writer ; 
 import java . nio . charset . StandardCharsets ; 
 import java . nio . file . Files ; 
 @ @ - 77 , 8 + 74 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( ConstantNameCheck . class ) ; 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 - try ( Writer writer = new BufferedWriter ( 
 - new OutputStreamWriter ( new FileOutputStream ( file ) , StandardCharsets . UTF _ 8 ) ) ) { 
 + try ( Writer writer = Files . newBufferedWriter ( file . toPath ( ) , StandardCharsets . UTF _ 8 ) ) { 
 final String content = " public class Main { public static final int k = 5 + 4 ; } " ; 
 writer . write ( content ) ; 
 } 
 @ @ - 94 , 8 + 90 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( ConstantNameCheck . class ) ; 
 final File file = temporaryFolder . newFile ( " file . pdf " ) ; 
 - try ( BufferedWriter writer = new BufferedWriter ( 
 - new OutputStreamWriter ( new FileOutputStream ( file ) , StandardCharsets . UTF _ 8 ) ) ) { 
 + try ( Writer writer = Files . newBufferedWriter ( file . toPath ( ) , StandardCharsets . UTF _ 8 ) ) { 
 final String content = " public class Main { public static final int k = 5 + 4 ; } " ; 
 writer . write ( content ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 index 5ad7288 . . 2f89a24 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 @ @ - 25 , 12 + 25 , 11 @ @ import static org . junit . Assert . assertNotSame ; 
 import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 
 - import java . io . BufferedWriter ; 
 import java . io . File ; 
 - import java . io . FileOutputStream ; 
 - import java . io . OutputStreamWriter ; 
 + import java . io . Writer ; 
 import java . lang . reflect . Method ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . nio . file . Files ; 
 import java . text . MessageFormat ; 
 import java . util . Arrays ; 
 import java . util . BitSet ; 
 @ @ - 243 , 8 + 242 , 7 @ @ public class DetailASTTest extends AbstractModuleTestSupport { 
 public void testManyComments ( ) throws Exception { 
 final File file = temporaryFolder . newFile ( " InputDetailASTManyComments . java " ) ; 
 
 - try ( BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( 
 - new FileOutputStream ( file ) , StandardCharsets . UTF _ 8 ) ) ) { 
 + try ( Writer bw = Files . newBufferedWriter ( file . toPath ( ) , StandardCharsets . UTF _ 8 ) ) { 
 bw . write ( " class C { \ n " ) ; 
 for ( int i = 0 ; i < = 30000 ; i + + ) { 
 bw . write ( " / / " + i + " \ n " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 index 8443d40 . . 6ec254d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 @ @ - 212 , 7 + 212 , 7 @ @ public class TranslationCheckTest extends AbstractXmlTestSupport { 
 final Method loadKeys = 
 check . getClass ( ) . getDeclaredMethod ( " getTranslationKeys " , File . class ) ; 
 loadKeys . setAccessible ( true ) ; 
 - final Set < String > keys = ( Set < String > ) loadKeys . invoke ( check , new File ( " " ) ) ; 
 + final Set < String > keys = ( Set < String > ) loadKeys . invoke ( check , new File ( " . no . such . file " ) ) ; 
 assertTrue ( " Translation keys should be empty when File is not found " , keys . isEmpty ( ) ) ; 
 assertEquals ( " Invalid error count " , 1 , counter . getCount ( ) ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 index 938185e . . c695b66 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 @ @ - 29 , 11 + 29 , 12 @ @ import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 - import java . io . FileNotFoundException ; 
 + import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . Method ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . NoSuchFileException ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 @ @ - 100 , 14 + 101 , 14 @ @ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { 
 public void testCloseInputStream ( ) throws Exception { 
 mockStatic ( Closeables . class ) ; 
 doNothing ( ) . when ( Closeables . class ) ; 
 - Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 + Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 
 final DefaultConfiguration checkConfig = createModuleConfig ( UniquePropertiesCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getPath ( " InputUniquePropertiesWithoutErrors . properties " ) , expected ) ; 
 
 verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 - Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 + Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 } 
 
 / * * 
 @ @ - 194 , 20 + 195 , 17 @ @ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { 
 } 
 
 / * * 
 - * Method generates FileNotFound exception details . It tries to open file , 
 - * that does not exist . 
 + * Method generates NoSuchFileException details . It tries to a open file that does not exist . 
 * @ param file to be opened 
 - * @ return detail message of { @ link FileNotFoundException } 
 + * @ return localized detail message of { @ link NoSuchFileException } 
 * / 
 - private static String getFileNotFoundDetail ( File file ) throws Exception { 
 + private static String getFileNotFoundDetail ( File file ) { 
 / / Create exception to know detail message we should wait in 
 / / LocalisedMessage 
 - try { 
 - final InputStream stream = new FileInputStream ( file ) ; 
 - stream . close ( ) ; 
 + try ( InputStream stream = Files . newInputStream ( file . toPath ( ) ) ) { 
 throw new IllegalStateException ( " File " + file . getPath ( ) + " should not exist " ) ; 
 } 
 - catch ( FileNotFoundException ex ) { 
 + catch ( IOException ex ) { 
 return ex . getLocalizedMessage ( ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index d49755c . . 0085472 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 30 , 10 + 30 , 10 @ @ import static org . junit . Assert . fail ; 
 
 import java . io . BufferedReader ; 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 import java . io . IOException ; 
 - import java . io . InputStreamReader ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Paths ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 @ @ - 65 , 8 + 65 , 8 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { 
 final int tabWidth ) 
 throws IOException { 
 final List < IndentComment > result = new ArrayList < > ( ) ; 
 - try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( 
 - new FileInputStream ( aFileName ) , StandardCharsets . UTF _ 8 ) ) ) { 
 + try ( BufferedReader br = Files . newBufferedReader ( Paths . get ( aFileName ) , 
 + StandardCharsets . UTF _ 8 ) ) { 
 int lineNumber = 1 ; 
 for ( String line = br . readLine ( ) ; line ! = null ; line = br . readLine ( ) ) { 
 final Matcher match = LINE _ WITH _ COMMENT _ REGEX . matcher ( line ) ;

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / ParenPadTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / ParenPadTest . java 
 index 104785e . . 06cedac 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / ParenPadTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / ParenPadTest . java 
 @ @ - 158 , 6 + 158 , 8 @ @ public class ParenPadTest extends AbstractModuleTestSupport { 
 " 212 : 49 : " + getCheckMessage ( clazz , messageKeyFollowed , " ( " ) , 
 " 212 : 51 : " + getCheckMessage ( clazz , messageKeyPreceded , " ) " ) , 
 " 212 : 53 : " + getCheckMessage ( clazz , messageKeyPreceded , " ) " ) , 
 + " 220 : 36 : " + getCheckMessage ( clazz , messageKeyPreceded , " ) " ) , 
 + " 221 : 60 : " + getCheckMessage ( clazz , messageKeyPreceded , " ) " ) , 
 } ; 
 final Configuration checkConfig = getModuleConfig ( " ParenPad " ) ; 
 final String filePath = getPath ( " InputParenPad . java " ) ; 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputParenPad . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputParenPad . java 
 index 5d7fc1f . . 7739937 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputParenPad . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputParenPad . java 
 @ @ - 211 , 4 + 211 , 13 @ @ enum MyEnum { 
 org . junit . Assert . assertThat ( " Help ! Integers don ' t work " , / / warning 
 0 , org . hamcrest . CoreMatchers . is ( 1 ) ) ; / / warning 
 } 
 + 
 + private void tryWithResources ( ) throws Exception { 
 + try ( AutoCloseable a = null ) { } / / ok 
 + try ( AutoCloseable a = null ; AutoCloseable b = null ) { } / / ok 
 + try ( AutoCloseable a = null ; AutoCloseable b = null ; ) { } / / ok 
 + try ( AutoCloseable a = null ; AutoCloseable b = null ; ) { } / / ok 
 + try ( AutoCloseable a = null ) { } / / warning 
 + try ( AutoCloseable a = null ; AutoCloseable b = null ) { } / / warning 
 + } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java 
 index bd5bc60 . . a5cd4c1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java 
 @ @ - 28 , 9 + 28 , 10 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 / * * 
 * < p > Checks the padding of parentheses ; that is whether a space is required 
 * after a left parenthesis and before a right parenthesis , or such spaces are 
 - * forbidden , with the exception that it does 
 - * not check for padding of the right parenthesis at an empty for iterator and 
 - * empty for initializer . 
 + * forbidden . No check occurs at the right parenthesis after an empty for 
 + * iterator , at the left parenthesis before an empty for initialization , or at 
 + * the right parenthesis of a try - with - resources resource specification where 
 + * the last resource variable has a trailing semi - colon . 
 * Use Check { @ link EmptyForIteratorPadCheck EmptyForIteratorPad } to validate 
 * empty for iterators and { @ link EmptyForInitializerPadCheck EmptyForInitializerPad } 
 * to validate empty for initializers . Typecasts are also not checked , as there is 
 @ @ - 137 , 6 + 138 , 9 @ @ public class ParenPadCheck extends AbstractParenPadCheck { 
 case TokenTypes . LAMBDA : 
 visitTokenWithOptionalParentheses ( ast ) ; 
 break ; 
 + case TokenTypes . RESOURCE _ SPECIFICATION : 
 + visitResourceSpecification ( ast ) ; 
 + break ; 
 default : 
 processLeft ( ast . findFirstToken ( TokenTypes . LPAREN ) ) ; 
 processRight ( ast . findFirstToken ( TokenTypes . RPAREN ) ) ; 
 @ @ - 159 , 6 + 163 , 27 @ @ public class ParenPadCheck extends AbstractParenPadCheck { 
 } 
 
 / * * 
 + * Checks parens in { @ link TokenTypes # RESOURCE _ SPECIFICATION } . 
 + * @ param ast the token to check . 
 + * / 
 + private void visitResourceSpecification ( DetailAST ast ) { 
 + processLeft ( ast . findFirstToken ( TokenTypes . LPAREN ) ) ; 
 + final DetailAST rparen = ast . findFirstToken ( TokenTypes . RPAREN ) ; 
 + if ( ! hasPrecedingSemiColon ( rparen ) ) { 
 + processRight ( rparen ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks that a token is preceded by a semi - colon . 
 + * @ param ast the token to check 
 + * @ return whether a token is preceded by a semi - colon 
 + * / 
 + private static boolean hasPrecedingSemiColon ( DetailAST ast ) { 
 + return ast . getPreviousSibling ( ) . getType ( ) = = TokenTypes . SEMI ; 
 + } 
 + 
 + / * * 
 * Checks parens in { @ link TokenTypes # LITERAL _ FOR } . 
 * @ param ast the token to check . 
 * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 index 1537765 . . a9df661 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 @ @ - 445 , 4 + 445 , 14 @ @ public class ParenPadCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputParenPadStartOfTheLine . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testTryWithResources ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ParenPadCheck . class ) ; 
 + final String [ ] expected = { 
 + " 9 : 36 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " ) " ) , 
 + " 10 : 60 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " ) " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputParenPadTryWithResources . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadTryWithResources . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadTryWithResources . java 
 new file mode 100644 
 index 0000000 . . b45f2f4 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadTryWithResources . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . parenpad ; 
 + 
 + class InputParenPadTryWithResources { 
 + private void tryWithResources ( ) throws Exception { 
 + try ( AutoCloseable a = null ) { } / / ok 
 + try ( AutoCloseable a = null ; AutoCloseable b = null ) { } / / ok 
 + try ( AutoCloseable a = null ; AutoCloseable b = null ; ) { } / / ok 
 + try ( AutoCloseable a = null ; AutoCloseable b = null ; ) { } / / ok 
 + try ( AutoCloseable a = null ) { } / / warning 
 + try ( AutoCloseable a = null ; AutoCloseable b = null ) { } / / warning 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml 
 index 21676a9 . . a02dc6a 100644 
 - - - a / src / xdocs / config _ whitespace . xml 
 + + + b / src / xdocs / config _ whitespace . xml 
 @ @ - 1396 , 9 + 1396 , 11 @ @ import static java . math . BigInteger . ZERO ; 
 < p > 
 Checks the policy on the padding of parentheses ; i . e . whether a 
 space is required after a left parenthesis and before a right 
 - parenthesis , or such spaces are forbidden , with the exception that it does 
 - not check for padding of the right parenthesis at an empty for iterator and 
 - empty for initializer . 
 + parenthesis , or such spaces are forbidden . No check occurs at 
 + the right parenthesis after an empty for iterator , at the left 
 + parenthesis before an empty for initialization , or at the right 
 + parenthesis of a try - with - resources resource specification where 
 + the last resource variable has a trailing semi - colon . 
 Use Check < a 
 href = " config _ whitespace . html # EmptyForIteratorPad " > EmptyForIteratorPad < / a > 
 to validate empty for iterators and < a 
 @ @ - 1542 , 6 + 1544 , 16 @ @ import static java . math . BigInteger . ZERO ; 
 & lt ; property name = & quot ; option & quot ; value = & quot ; space & quot ; / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + 
 + < p > 
 + The following cases not checked : 
 + < / p > 
 + < source > 
 + for ( ; i & lt ; j ; i + + , j - - ) / / no check after left parenthesis 
 + for ( Iterator it = xs . iterator ( ) ; it . hasNext ( ) ; ) / / no check before right parenthesis 
 + try ( Closeable resource = acquire ( ) ; ) / / no check before right parenthesis 
 + < / source > 
 + 
 < / subsection > 
 
 < subsection name = " Example of Usage " >
