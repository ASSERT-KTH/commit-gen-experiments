BLEU SCORE: 0.028127399371595342

TEST MSG: minor : fixed xdoc not validating required sub - sections
GENERATED MSG: Issue # 2268 : require all filters appear in checkstyle _ checks . xml

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java <nl> index 01b1ba4 . . 6f08210 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java <nl> @ @ - 412 , 6 + 412 , 15 @ @ public class XdocsPagesTest { <nl> <nl> subSectionPos + + ; <nl> } <nl> + <nl> + if ( " Checker " . equals ( sectionName ) ) { <nl> + Assert . assertTrue ( fileName + " section ' " + sectionName <nl> + + " ' should contain up to ' Package ' sub - section " , subSectionPos > = 6 ) ; <nl> + } <nl> + else { <nl> + Assert . assertTrue ( fileName + " section ' " + sectionName <nl> + + " ' should contain up to ' Parent ' sub - section " , subSectionPos > = 7 ) ; <nl> + } <nl> } <nl> <nl> private static void validateSinceDescriptionSection ( String fileName , String sectionName , <nl> @ @ - 1237 , 7 + 1246 , 7 @ @ public class XdocsPagesTest { <nl> Node subSection ) { <nl> final String expected ; <nl> <nl> - if ( hasParentModule ( sectionName ) ) { <nl> + if ( ! " TreeWalker " . equals ( sectionName ) & & hasParentModule ( sectionName ) ) { <nl> expected = " TreeWalker " ; <nl> } <nl> else { <nl> diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml <nl> index ad32baf . . 0019690 100644 <nl> - - - a / src / xdocs / config . xml <nl> + + + b / src / xdocs / config . xml <nl> @ @ - 440 , 6 + 440 , 27 @ @ <nl> < / source > <nl> <nl> < / subsection > <nl> + <nl> + < subsection name = " Example of Usage " > <nl> + < ul > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + Checker " > <nl> + Google Style < / a > <nl> + < / li > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Asun _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + Checker " > <nl> + Sun Style < / a > <nl> + < / li > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Aconfig + filename % 3Acheckstyle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + Checker " > <nl> + Checkstyle Style < / a > <nl> + < / li > <nl> + < / ul > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Package " > <nl> + < p > com . puppycrawl . tools . checkstyle < / p > <nl> + < / subsection > <nl> < / section > <nl> <nl> < section name = " TreeWalker " > <nl> @ @ - 546 , 6 + 567 , 31 @ @ <nl> & lt ; / module & gt ; <nl> < / source > <nl> < / subsection > <nl> + <nl> + < subsection name = " Example of Usage " > <nl> + < ul > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + TreeWalker " > <nl> + Google Style < / a > <nl> + < / li > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Asun _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + TreeWalker " > <nl> + Sun Style < / a > <nl> + < / li > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Aconfig + filename % 3Acheckstyle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + TreeWalker " > <nl> + Checkstyle Style < / a > <nl> + < / li > <nl> + < / ul > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Package " > <nl> + < p > com . puppycrawl . tools . checkstyle < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Parent Module " > <nl> + < p > < a href = " config . html # Checker " > Checker < / a > < / p > <nl> + < / subsection > <nl> < / section > <nl> <nl> < section name = " TreeWalker Checks " >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> index 1d418d4 . . 1305e12 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> @ @ - 158 , 7 + 158 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { <nl> " 17 : 9 : switch without \ " default \ " clause . " , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputMissingSwitchDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " checks / InputMissingSwitchDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 172 , 11 + 172 , 11 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " maximumMessage " , " Literal Strings should be compared using equals ( ) , not ' ' = = ' ' . " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 11 : 18 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , <nl> - " 16 : 20 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , <nl> - " 21 : 22 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , <nl> + " 7 : 18 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , <nl> + " 12 : 20 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , <nl> + " 17 : 22 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputStringLiteralEquality . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " checks " + File . separator + " InputStringLiteralEquality . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheckTest . java <nl> index c63e30b . . 08d274a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheckTest . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . MissingSwitchDefaultCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> @ @ - 37 , 6 + 40 , 12 @ @ public class MissingSwitchDefaultCheckTest <nl> checkConfig = createCheckConfig ( MissingSwitchDefaultCheck . class ) ; <nl> } <nl> <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testMissingSwitchDefault ( ) throws Exception { <nl> final String [ ] expected = { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java <nl> index 09214a7 . . 3b8c435 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . NoCloneCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 34 , 6 + 35 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> * / <nl> public class NoCloneCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testHasClone ( ) <nl> throws Exception { <nl> @ @ - 48 , 7 + 55 , 7 @ @ public class NoCloneCheckTest <nl> " 60 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 98 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputClone . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputClone . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 3450f4a . . 6afa809 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck . MSG <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck . MSG _ VARIABLE ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> @ @ - 32 , 6 + 33 , 12 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIt ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 44 , 7 + 51 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> " 56 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputRequireThis . java " ) , <nl> + getPath ( " InputRequireThis . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 57 , 7 + 64 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> " 17 : 9 : " + getCheckMessage ( MSG _ METHOD , " method1 " , " \ " this \ " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputRequireThis . java " ) , <nl> + getPath ( " InputRequireThis . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 73 , 7 + 80 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> " 56 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputRequireThis . java " ) , <nl> + getPath ( " InputRequireThis . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 94 , 7 + 101 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> " 8 : 16 : " + getCheckMessage ( MSG _ METHOD , " other " , " \ " this \ " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputRequireThis2 . java " ) , <nl> + getPath ( " InputRequireThis2 . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 111 , 7 + 118 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( RequireThisCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputRequireThis3 . java " ) , <nl> + getPath ( " InputRequireThis3 . java " ) , <nl> expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheckTest . java <nl> index f904c0d . . 586136b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . StringLiteralEqualityCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 31 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class StringLiteralEqualityCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIt ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 40 , 7 + 47 , 7 @ @ public class StringLiteralEqualityCheckTest <nl> " 16 : 20 : " + getCheckMessage ( MSG _ KEY , " = = " ) , <nl> " 21 : 22 : " + getCheckMessage ( MSG _ KEY , " = = " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputStringLiteralEquality . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputStringLiteralEquality . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> index c4c599a . . 6b37849 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class SuperCloneCheckTest <nl> " 35 : 19 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> " 60 : 48 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding / InputClone . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " checks / coding / InputClone . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> index 7a29a02 . . 335b73f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> @ @ - 109 , 14 + 109 , 15 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { <nl> createCheckConfig ( OneTopLevelClassCheck . class ) ; <nl> final String [ ] expected = { <nl> " 25 : " + getCheckMessage ( MSG _ KEY , " NoSuperClone " ) , <nl> - " 33 : " + getCheckMessage ( MSG _ KEY , " InnerClone " ) , <nl> - " 50 : " + getCheckMessage ( MSG _ KEY , " CloneWithTypeArguments " ) , <nl> - " 58 : " + getCheckMessage ( MSG _ KEY , " CloneWithTypeArgumentsAndNoSuper " ) , <nl> - " 67 : " + getCheckMessage ( MSG _ KEY , " MyClassWithGenericSuperMethod " ) , <nl> - " 84 : " + getCheckMessage ( MSG _ KEY , " AnotherClass " ) , <nl> - " 97 : " + getCheckMessage ( MSG _ KEY , " NativeTest " ) , <nl> + " 29 : " + getCheckMessage ( MSG _ KEY , " InnerClone " ) , <nl> + " 33 : " + getCheckMessage ( MSG _ KEY , " CloneWithTypeArguments " ) , <nl> + " 37 : " + getCheckMessage ( MSG _ KEY , " CloneWithTypeArgumentsAndNoSuper " ) , <nl> + " 41 : " + getCheckMessage ( MSG _ KEY , " MyClassWithGenericSuperMethod " ) , <nl> + " 45 : " + getCheckMessage ( MSG _ KEY , " AnotherClass " ) , <nl> + " 48 : " + getCheckMessage ( MSG _ KEY , " NativeTest " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputClone . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " checks " + File . separator + " design " <nl> + + File . separator + " InputClone . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputMissingSwitchDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputMissingSwitchDefault . java <nl> deleted file mode 100644 <nl> index cd0c0a2 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputMissingSwitchDefault . java <nl> + + + / dev / null <nl> @ @ - 1 , 22 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - public class InputMissingSwitchDefault { <nl> - public void foo ( ) { <nl> - int i = 1 ; <nl> - switch ( i ) { <nl> - case 1 : i + + ; break ; <nl> - case 2 : i - - ; break ; <nl> - default : return ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - class bad _ test { <nl> - public void foo ( ) { <nl> - int i = 1 ; <nl> - switch ( i ) { <nl> - case 1 : i + + ; break ; <nl> - case 2 : i - - ; break ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputMissingSwitchDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputMissingSwitchDefault . java <nl> new file mode 100644 <nl> index 0000000 . . 7db2bd5 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputMissingSwitchDefault . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks ; <nl> + <nl> + public class InputMissingSwitchDefault { <nl> + public void foo ( ) { <nl> + int i = 1 ; <nl> + switch ( i ) { <nl> + case 1 : i + + ; break ; <nl> + case 2 : i - - ; break ; <nl> + default : return ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + class bad _ test { <nl> + public void foo ( ) { <nl> + int i = 1 ; <nl> + switch ( i ) { <nl> + case 1 : i + + ; break ; <nl> + case 2 : i - - ; break ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputStringLiteralEquality . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputStringLiteralEquality . java <nl> new file mode 100644 <nl> index 0000000 . . d6609d3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputStringLiteralEquality . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks ; <nl> + <nl> + public class InputStringLiteralEquality <nl> + { <nl> + void foo ( String name ) <nl> + { <nl> + if ( name = = " Lars " ) <nl> + { <nl> + / / flagged , should use equals <nl> + } <nl> + <nl> + if ( " Oleg " = = name ) <nl> + { <nl> + / / flagged , should use equals <nl> + } <nl> + <nl> + if ( " Oliver " = = " Oliver " ) <nl> + { <nl> + / / doesn ' t make much sense because this can be evaluated <nl> + / / to true at compile time , but is flagged anyway <nl> + } <nl> + <nl> + String compare = " Rick " ; <nl> + if ( name = = compare ) <nl> + { <nl> + / / currently not flagged . <nl> + / / <nl> + / / Implementing this is very complicated , we would need <nl> + / / - type info on the = = operands <nl> + / / - prevent false alarms where the user explicitly wants <nl> + / / to compare object identities <nl> + / / <nl> + / / My current feeling is that we should leave finding <nl> + / / this one to manual code inspections . After all MCI is <nl> + / / what some of us get paid for : - ) <nl> + } <nl> + <nl> + if ( " Rick " . toUpperCase ( ) = = " Rick " . toLowerCase ( ) ) <nl> + { <nl> + / / completly dynamic , don ' t flag <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java <nl> new file mode 100644 <nl> index 0000000 . . 11ec5df <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / / someexamples of 1 . 5 extensions <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + @ interface MyAnnotation1 { <nl> + String name ( ) ; <nl> + int version ( ) ; <nl> + } <nl> + <nl> + @ MyAnnotation1 ( name = " ABC " , version = 1 ) <nl> + public class Input15Extensions <nl> + { <nl> + <nl> + } <nl> + <nl> + enum Enum2 <nl> + { <nl> + A , B , C ; <nl> + Enum2 ( ) { } <nl> + public String toString ( ) { <nl> + return " " ; / / some custom implementation <nl> + } <nl> + } <nl> + <nl> + interface TestRequireThisEnum <nl> + { <nl> + enum DAY _ OF _ WEEK <nl> + { <nl> + SUNDAY , <nl> + MONDAY , <nl> + TUESDAY , <nl> + WEDNESDAY , <nl> + THURSDAY , <nl> + FRIDAY , <nl> + SATURDAY <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java <nl> new file mode 100644 <nl> index 0000000 . . d641483 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java <nl> @ @ - 0 , 0 + 1 , 99 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + public class InputClone <nl> + { / * class body * / <nl> + public InputClone ( ) throws CloneNotSupportedException <nl> + { / / constructor body <nl> + super . equals ( new String ( ) ) ; <nl> + super . clone ( ) ; <nl> + } <nl> + <nl> + public Object clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return super . clone ( ) ; <nl> + } <nl> + <nl> + public void method ( ) throws CloneNotSupportedException <nl> + { <nl> + super . clone ( ) ; <nl> + } <nl> + <nl> + { <nl> + super . clone ( ) ; <nl> + } <nl> + } <nl> + <nl> + class NoSuperClone <nl> + { <nl> + public Object clone ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + class InnerClone <nl> + { <nl> + public Object clone ( ) <nl> + { <nl> + class Inner <nl> + { <nl> + public Object clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return super . clone ( ) ; <nl> + } <nl> + } <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + / / This could not pass as valid semantically but tests that <nl> + / / type arguments are ignored when checking super calls <nl> + class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > <nl> + { <nl> + public CloneWithTypeArguments < T > clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return ( CloneWithTypeArguments < T > ) super . < T > clone ( ) ; <nl> + } <nl> + } <nl> + <nl> + class CloneWithTypeArgumentsAndNoSuper < T > <nl> + { <nl> + public CloneWithTypeArgumentsAndNoSuper < T > clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + / / Check that super keword isn ' t snagged here <nl> + class MyClassWithGenericSuperMethod <nl> + { <nl> + void someMethod ( java . util . List < ? super java . util . Map < Object , Object > > l ) <nl> + { <nl> + <nl> + } <nl> + <nl> + / * * <nl> + * Not a valid clone override . Should not get flagged . <nl> + * @ param o some object <nl> + * @ return a cloned Object ? <nl> + * / <nl> + public static Object clone ( Object o ) { <nl> + 	 return null ; <nl> + } <nl> + } <nl> + <nl> + class AnotherClass { <nl> + <nl> + / * * <nl> + * Not a valid clone override . Should not get flagged . <nl> + * @ param t some type <nl> + * @ param < T > a type <nl> + * @ return a cloned type ? <nl> + * / <nl> + public < T > T clone ( T t ) { <nl> + 	 return null ; <nl> + } <nl> + } <nl> + <nl> + class NativeTest { <nl> + public native Object clone ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMissingSwitchDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMissingSwitchDefault . java <nl> new file mode 100644 <nl> index 0000000 . . 17a73a0 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMissingSwitchDefault . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputMissingSwitchDefault { <nl> + public void foo ( ) { <nl> + int i = 1 ; <nl> + switch ( i ) { <nl> + case 1 : i + + ; break ; <nl> + case 2 : i - - ; break ; <nl> + default : return ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + class bad _ test { <nl> + public void foo ( ) { <nl> + int i = 1 ; <nl> + switch ( i ) { <nl> + case 1 : i + + ; break ; <nl> + case 2 : i - - ; break ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java <nl> new file mode 100644 <nl> index 0000000 . . e8cdbb7 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import java . awt . Toolkit ; <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + <nl> + public class InputRequireThis { <nl> + int i ; <nl> + void method1 ( ) { <nl> + i = 3 ; <nl> + } <nl> + <nl> + void method2 ( int i ) { <nl> + i + + ; <nl> + this . i = i ; <nl> + method1 ( ) ; <nl> + try { <nl> + this . method1 ( ) ; <nl> + } <nl> + catch ( RuntimeException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + this . i - - ; <nl> + <nl> + Integer . toString ( 10 ) ; <nl> + } <nl> + <nl> + < T > void method3 ( ) <nl> + { <nl> + i = 3 ; <nl> + } <nl> + <nl> + void method4 ( ) { <nl> + this . < String > method3 ( ) ; <nl> + this . < I > method3 ( ) ; <nl> + } <nl> + int I = 0 ; <nl> + private class I { } <nl> + } <nl> + / / enum <nl> + enum MyEnum <nl> + { <nl> + A , <nl> + B <nl> + { <nl> + void doSomething ( ) <nl> + { <nl> + z = 1 ; <nl> + } <nl> + } ; <nl> + <nl> + int z ; <nl> + private MyEnum ( ) <nl> + { <nl> + z = 0 ; <nl> + } <nl> + } <nl> + <nl> + class Bug2123003 { <nl> + @ Rock ( band = " GnR " ) <nl> + private String band ; <nl> + <nl> + class Inner { <nl> + @ Rock ( band = { " GnR " } ) <nl> + private String band ; <nl> + } <nl> + <nl> + class Inner2 { <nl> + @ Rock ( band = { ( true ) ? " GnR " : " Tool " } ) <nl> + private String band ; <nl> + } <nl> + / * \ m / ( > . < ) \ m / * / <nl> + @ interface Rock { <nl> + String [ ] band ( ) default " Metallica " ; <nl> + } <nl> + } <nl> + <nl> + class Bug1155921 { <nl> + private static int CONST = 1 ; <nl> + private static int static _ method ( ) { <nl> + return 1 ; <nl> + } <nl> + <nl> + private int method1 ( ) { <nl> + return CONST ; <nl> + } <nl> + <nl> + private int method2 ( ) { <nl> + return static _ method ( ) ; <nl> + } <nl> + } <nl> + <nl> + interface Issue155 { <nl> + String BASE = " A " ; <nl> + String EXT = BASE + " B " ; <nl> + } <nl> + <nl> + class Issue257 { <nl> + public void foo ( ) { <nl> + try ( final InputStream foo = new ByteArrayInputStream ( new byte [ 512 ] ) ) { <nl> + foo . read ( ) ; <nl> + } <nl> + catch ( final IOException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis2 . java <nl> new file mode 100644 <nl> index 0000000 . . 032337f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis2 . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputRequireThis2 { <nl> + 	 private final int number = 1 ; <nl> + <nl> + public int check ( ) { <nl> + int sum = number ; <nl> + sum + = other ( ) ; <nl> + return sum ; <nl> + } <nl> + <nl> + private int other ( ) { <nl> + 	 return 0 ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis3 . java <nl> new file mode 100644 <nl> index 0000000 . . 4d326a6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis3 . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputRequireThis3 { <nl> + interface AnonWithEmpty { <nl> + public void fooEmpty ( ) ; <nl> + } <nl> + <nl> + void method ( ) { <nl> + AnonWithEmpty foo = new AnonWithEmpty ( ) { <nl> + <nl> + public void emptyMethod ( ) { <nl> + } <nl> + <nl> + @ Override <nl> + public void fooEmpty ( ) { <nl> + int a = doSideEffect ( ) ; <nl> + } <nl> + <nl> + public int doSideEffect ( ) { <nl> + return 1 ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputStringLiteralEquality . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputStringLiteralEquality . java <nl> new file mode 100644 <nl> index 0000000 . . 8a8f13a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputStringLiteralEquality . java <nl> @ @ - 0 , 0 + 1 , 47 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + / * * <nl> + * Input file for the StringLiteralEqualityCheck <nl> + * @ author Lars K & uuml ; hne <nl> + * / <nl> + public class InputStringLiteralEquality <nl> + { <nl> + void foo ( String name ) <nl> + { <nl> + if ( name = = " Lars " ) <nl> + { <nl> + / / flagged , should use equals <nl> + } <nl> + <nl> + if ( " Oleg " = = name ) <nl> + { <nl> + / / flagged , should use equals <nl> + } <nl> + <nl> + if ( " Oliver " = = " Oliver " ) <nl> + { <nl> + / / doesn ' t make much sense because this can be evaluated <nl> + / / to true at compile time , but is flagged anyway <nl> + } <nl> + <nl> + String compare = " Rick " ; <nl> + if ( name = = compare ) <nl> + { <nl> + / / currently not flagged . <nl> + / / <nl> + / / Implementing this is very complicated , we would need <nl> + / / - type info on the = = operands <nl> + / / - prevent false alarms where the user explicitly wants <nl> + / / to compare object identities <nl> + / / <nl> + / / My current feeling is that we should leave finding <nl> + / / this one to manual code inspections . After all MCI is <nl> + / / what some of us get paid for : - ) <nl> + } <nl> + <nl> + if ( " Rick " . toUpperCase ( ) = = " Rick " . toLowerCase ( ) ) <nl> + { <nl> + / / completly dynamic , don ' t flag <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java <nl> new file mode 100644 <nl> index 0000000 . . d70c859 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + public class InputClone <nl> + { / * class body * / <nl> + public InputClone ( ) throws CloneNotSupportedException <nl> + { / / constructor body <nl> + super . equals ( new String ( ) ) ; <nl> + super . clone ( ) ; <nl> + } <nl> + <nl> + public Object clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return super . clone ( ) ; <nl> + } <nl> + <nl> + public void method ( ) throws CloneNotSupportedException <nl> + { <nl> + super . clone ( ) ; <nl> + } <nl> + <nl> + { <nl> + super . clone ( ) ; <nl> + } <nl> + } <nl> + <nl> + class NoSuperClone <nl> + { <nl> + } <nl> + <nl> + class InnerClone <nl> + { <nl> + } <nl> + <nl> + class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > <nl> + { <nl> + } <nl> + <nl> + class CloneWithTypeArgumentsAndNoSuper < T > <nl> + { <nl> + } <nl> + <nl> + class MyClassWithGenericSuperMethod <nl> + { <nl> + } <nl> + <nl> + class AnotherClass { <nl> + } <nl> + <nl> + class NativeTest { <nl> + public native Object clone ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputClone . java <nl> deleted file mode 100644 <nl> index d21a4fb . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputClone . java <nl> + + + / dev / null <nl> @ @ - 1 , 99 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - public class InputClone <nl> - { / * class body * / <nl> - public InputClone ( ) throws CloneNotSupportedException <nl> - { / / constructor body <nl> - super . equals ( new String ( ) ) ; <nl> - super . clone ( ) ; <nl> - } <nl> - <nl> - public Object clone ( ) throws CloneNotSupportedException <nl> - { <nl> - return super . clone ( ) ; <nl> - } <nl> - <nl> - public void method ( ) throws CloneNotSupportedException <nl> - { <nl> - super . clone ( ) ; <nl> - } <nl> - <nl> - { <nl> - super . clone ( ) ; <nl> - } <nl> - } <nl> - <nl> - class NoSuperClone <nl> - { <nl> - public Object clone ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - } <nl> - <nl> - class InnerClone <nl> - { <nl> - public Object clone ( ) <nl> - { <nl> - class Inner <nl> - { <nl> - public Object clone ( ) throws CloneNotSupportedException <nl> - { <nl> - return super . clone ( ) ; <nl> - } <nl> - } <nl> - return null ; <nl> - } <nl> - } <nl> - <nl> - / / This could not pass as valid semantically but tests that <nl> - / / type arguments are ignored when checking super calls <nl> - class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > <nl> - { <nl> - public CloneWithTypeArguments < T > clone ( ) throws CloneNotSupportedException <nl> - { <nl> - return ( CloneWithTypeArguments < T > ) super . < T > clone ( ) ; <nl> - } <nl> - } <nl> - <nl> - class CloneWithTypeArgumentsAndNoSuper < T > <nl> - { <nl> - public CloneWithTypeArgumentsAndNoSuper < T > clone ( ) throws CloneNotSupportedException <nl> - { <nl> - return null ; <nl> - } <nl> - } <nl> - <nl> - / / Check that super keword isn ' t snagged here <nl> - class MyClassWithGenericSuperMethod <nl> - { <nl> - void someMethod ( java . util . List < ? super java . util . Map < Object , Object > > l ) <nl> - { <nl> - <nl> - } <nl> - <nl> - / * * <nl> - * Not a valid clone override . Should not get flagged . <nl> - * @ param o some object <nl> - * @ return a cloned Object ? <nl> - * / <nl> - public static Object clone ( Object o ) { <nl> - 	 return null ; <nl> - } <nl> - } <nl> - <nl> - class AnotherClass { <nl> - <nl> - / * * <nl> - * Not a valid clone override . Should not get flagged . <nl> - * @ param t some type <nl> - * @ param < T > a type <nl> - * @ return a cloned type ? <nl> - * / <nl> - public < T > T clone ( T t ) { <nl> - 	 return null ; <nl> - } <nl> - } <nl> - <nl> - class NativeTest { <nl> - public native Object clone ( ) ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java <nl> deleted file mode 100644 <nl> index 1465995 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java <nl> + + + / dev / null <nl> @ @ - 1 , 108 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - import java . awt . Toolkit ; <nl> - import java . io . ByteArrayInputStream ; <nl> - import java . io . IOException ; <nl> - import java . io . InputStream ; <nl> - <nl> - public class InputRequireThis { <nl> - int i ; <nl> - void method1 ( ) { <nl> - i = 3 ; <nl> - } <nl> - <nl> - void method2 ( int i ) { <nl> - i + + ; <nl> - this . i = i ; <nl> - method1 ( ) ; <nl> - try { <nl> - this . method1 ( ) ; <nl> - } <nl> - catch ( RuntimeException e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - this . i - - ; <nl> - <nl> - Integer . toString ( 10 ) ; <nl> - } <nl> - <nl> - < T > void method3 ( ) <nl> - { <nl> - i = 3 ; <nl> - } <nl> - <nl> - void method4 ( ) { <nl> - this . < String > method3 ( ) ; <nl> - this . < I > method3 ( ) ; <nl> - } <nl> - int I = 0 ; <nl> - private class I { } <nl> - } <nl> - / / enum <nl> - enum MyEnum <nl> - { <nl> - A , <nl> - B <nl> - { <nl> - void doSomething ( ) <nl> - { <nl> - z = 1 ; <nl> - } <nl> - } ; <nl> - <nl> - int z ; <nl> - private MyEnum ( ) <nl> - { <nl> - z = 0 ; <nl> - } <nl> - } <nl> - <nl> - class Bug2123003 { <nl> - @ Rock ( band = " GnR " ) <nl> - private String band ; <nl> - <nl> - class Inner { <nl> - @ Rock ( band = { " GnR " } ) <nl> - private String band ; <nl> - } <nl> - <nl> - class Inner2 { <nl> - @ Rock ( band = { ( true ) ? " GnR " : " Tool " } ) <nl> - private String band ; <nl> - } <nl> - / * \ m / ( > . < ) \ m / * / <nl> - @ interface Rock { <nl> - String [ ] band ( ) default " Metallica " ; <nl> - } <nl> - } <nl> - <nl> - class Bug1155921 { <nl> - private static int CONST = 1 ; <nl> - private static int static _ method ( ) { <nl> - return 1 ; <nl> - } <nl> - <nl> - private int method1 ( ) { <nl> - return CONST ; <nl> - } <nl> - <nl> - private int method2 ( ) { <nl> - return static _ method ( ) ; <nl> - } <nl> - } <nl> - <nl> - interface Issue155 { <nl> - String BASE = " A " ; <nl> - String EXT = BASE + " B " ; <nl> - } <nl> - <nl> - class Issue257 { <nl> - public void foo ( ) { <nl> - try ( final InputStream foo = new ByteArrayInputStream ( new byte [ 512 ] ) ) { <nl> - foo . read ( ) ; <nl> - } <nl> - catch ( final IOException e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis2 . java <nl> deleted file mode 100644 <nl> index 8de7043 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputRequireThis2 { <nl> - 	 private final int number = 1 ; <nl> - <nl> - public int check ( ) { <nl> - int sum = number ; <nl> - sum + = other ( ) ; <nl> - return sum ; <nl> - } <nl> - <nl> - private int other ( ) { <nl> - 	 return 0 ; <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java <nl> deleted file mode 100644 <nl> index d4bc493 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java <nl> + + + / dev / null <nl> @ @ - 1 , 24 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputRequireThis3 { <nl> - interface AnonWithEmpty { <nl> - public void fooEmpty ( ) ; <nl> - } <nl> - <nl> - void method ( ) { <nl> - AnonWithEmpty foo = new AnonWithEmpty ( ) { <nl> - <nl> - public void emptyMethod ( ) { <nl> - } <nl> - <nl> - @ Override <nl> - public void fooEmpty ( ) { <nl> - int a = doSideEffect ( ) ; <nl> - } <nl> - <nl> - public int doSideEffect ( ) { <nl> - return 1 ; <nl> - } <nl> - } ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputStringLiteralEquality . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputStringLiteralEquality . java <nl> deleted file mode 100644 <nl> index 0b008c2 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputStringLiteralEquality . java <nl> + + + / dev / null <nl> @ @ - 1 , 47 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - / * * <nl> - * Input file for the StringLiteralEqualityCheck <nl> - * @ author Lars K & uuml ; hne <nl> - * / <nl> - public class InputStringLiteralEquality <nl> - { <nl> - void foo ( String name ) <nl> - { <nl> - if ( name = = " Lars " ) <nl> - { <nl> - / / flagged , should use equals <nl> - } <nl> - <nl> - if ( " Oleg " = = name ) <nl> - { <nl> - / / flagged , should use equals <nl> - } <nl> - <nl> - if ( " Oliver " = = " Oliver " ) <nl> - { <nl> - / / doesn ' t make much sense because this can be evaluated <nl> - / / to true at compile time , but is flagged anyway <nl> - } <nl> - <nl> - String compare = " Rick " ; <nl> - if ( name = = compare ) <nl> - { <nl> - / / currently not flagged . <nl> - / / <nl> - / / Implementing this is very complicated , we would need <nl> - / / - type info on the = = operands <nl> - / / - prevent false alarms where the user explicitly wants <nl> - / / to compare object identities <nl> - / / <nl> - / / My current feeling is that we should leave finding <nl> - / / this one to manual code inspections . After all MCI is <nl> - / / what some of us get paid for : - ) <nl> - } <nl> - <nl> - if ( " Rick " . toUpperCase ( ) = = " Rick " . toLowerCase ( ) ) <nl> - { <nl> - / / completly dynamic , don ' t flag <nl> - } <nl> - } <nl> - }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java 
 index 01b1ba4 . . 6f08210 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java 
 @ @ - 412 , 6 + 412 , 15 @ @ public class XdocsPagesTest { 
 
 subSectionPos + + ; 
 } 
 + 
 + if ( " Checker " . equals ( sectionName ) ) { 
 + Assert . assertTrue ( fileName + " section ' " + sectionName 
 + + " ' should contain up to ' Package ' sub - section " , subSectionPos > = 6 ) ; 
 + } 
 + else { 
 + Assert . assertTrue ( fileName + " section ' " + sectionName 
 + + " ' should contain up to ' Parent ' sub - section " , subSectionPos > = 7 ) ; 
 + } 
 } 
 
 private static void validateSinceDescriptionSection ( String fileName , String sectionName , 
 @ @ - 1237 , 7 + 1246 , 7 @ @ public class XdocsPagesTest { 
 Node subSection ) { 
 final String expected ; 
 
 - if ( hasParentModule ( sectionName ) ) { 
 + if ( ! " TreeWalker " . equals ( sectionName ) & & hasParentModule ( sectionName ) ) { 
 expected = " TreeWalker " ; 
 } 
 else { 
 diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml 
 index ad32baf . . 0019690 100644 
 - - - a / src / xdocs / config . xml 
 + + + b / src / xdocs / config . xml 
 @ @ - 440 , 6 + 440 , 27 @ @ 
 < / source > 
 
 < / subsection > 
 + 
 + < subsection name = " Example of Usage " > 
 + < ul > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + Checker " > 
 + Google Style < / a > 
 + < / li > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Asun _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + Checker " > 
 + Sun Style < / a > 
 + < / li > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Aconfig + filename % 3Acheckstyle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + Checker " > 
 + Checkstyle Style < / a > 
 + < / li > 
 + < / ul > 
 + < / subsection > 
 + 
 + < subsection name = " Package " > 
 + < p > com . puppycrawl . tools . checkstyle < / p > 
 + < / subsection > 
 < / section > 
 
 < section name = " TreeWalker " > 
 @ @ - 546 , 6 + 567 , 31 @ @ 
 & lt ; / module & gt ; 
 < / source > 
 < / subsection > 
 + 
 + < subsection name = " Example of Usage " > 
 + < ul > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + TreeWalker " > 
 + Google Style < / a > 
 + < / li > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Asun _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + TreeWalker " > 
 + Sun Style < / a > 
 + < / li > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Aconfig + filename % 3Acheckstyle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + TreeWalker " > 
 + Checkstyle Style < / a > 
 + < / li > 
 + < / ul > 
 + < / subsection > 
 + 
 + < subsection name = " Package " > 
 + < p > com . puppycrawl . tools . checkstyle < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Parent Module " > 
 + < p > < a href = " config . html # Checker " > Checker < / a > < / p > 
 + < / subsection > 
 < / section > 
 
 < section name = " TreeWalker Checks " >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 index 1d418d4 . . 1305e12 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 @ @ - 158 , 7 + 158 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { 
 " 17 : 9 : switch without \ " default \ " clause . " , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputMissingSwitchDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " checks / InputMissingSwitchDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 172 , 11 + 172 , 11 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " maximumMessage " , " Literal Strings should be compared using equals ( ) , not ' ' = = ' ' . " ) ; 
 
 final String [ ] expected = { 
 - " 11 : 18 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , 
 - " 16 : 20 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , 
 - " 21 : 22 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , 
 + " 7 : 18 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , 
 + " 12 : 20 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , 
 + " 17 : 22 : Literal Strings should be compared using equals ( ) , not ' = = ' . " , 
 } ; 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputStringLiteralEquality . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " checks " + File . separator + " InputStringLiteralEquality . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheckTest . java 
 index c63e30b . . 08d274a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheckTest . java 
 @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . MissingSwitchDefaultCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Assert ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 @ @ - 37 , 6 + 40 , 12 @ @ public class MissingSwitchDefaultCheckTest 
 checkConfig = createCheckConfig ( MissingSwitchDefaultCheck . class ) ; 
 } 
 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testMissingSwitchDefault ( ) throws Exception { 
 final String [ ] expected = { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java 
 index 09214a7 . . 3b8c435 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . NoCloneCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 34 , 6 + 35 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 * / 
 public class NoCloneCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testHasClone ( ) 
 throws Exception { 
 @ @ - 48 , 7 + 55 , 7 @ @ public class NoCloneCheckTest 
 " 60 : " + getCheckMessage ( MSG _ KEY ) , 
 " 98 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputClone . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputClone . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 3450f4a . . 6afa809 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck . MSG 
 import static com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck . MSG _ VARIABLE ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 @ @ - 32 , 6 + 33 , 12 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class RequireThisCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testIt ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 44 , 7 + 51 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 " 56 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , 
 } ; 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputRequireThis . java " ) , 
 + getPath ( " InputRequireThis . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 57 , 7 + 64 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 " 17 : 9 : " + getCheckMessage ( MSG _ METHOD , " method1 " , " \ " this \ " " ) , 
 } ; 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputRequireThis . java " ) , 
 + getPath ( " InputRequireThis . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 73 , 7 + 80 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 " 56 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , 
 } ; 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputRequireThis . java " ) , 
 + getPath ( " InputRequireThis . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 94 , 7 + 101 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 " 8 : 16 : " + getCheckMessage ( MSG _ METHOD , " other " , " \ " this \ " " ) , 
 } ; 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputRequireThis2 . java " ) , 
 + getPath ( " InputRequireThis2 . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 111 , 7 + 118 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = createCheckConfig ( RequireThisCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputRequireThis3 . java " ) , 
 + getPath ( " InputRequireThis3 . java " ) , 
 expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheckTest . java 
 index f904c0d . . 586136b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . StringLiteralEqualityCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 31 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class StringLiteralEqualityCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testIt ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 40 , 7 + 47 , 7 @ @ public class StringLiteralEqualityCheckTest 
 " 16 : 20 : " + getCheckMessage ( MSG _ KEY , " = = " ) , 
 " 21 : 22 : " + getCheckMessage ( MSG _ KEY , " = = " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputStringLiteralEquality . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputStringLiteralEquality . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 index c4c599a . . 6b37849 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 @ @ - 40 , 7 + 40 , 7 @ @ public class SuperCloneCheckTest 
 " 35 : 19 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 " 60 : 48 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " coding / InputClone . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " checks / coding / InputClone . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 index 7a29a02 . . 335b73f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 @ @ - 109 , 14 + 109 , 15 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { 
 createCheckConfig ( OneTopLevelClassCheck . class ) ; 
 final String [ ] expected = { 
 " 25 : " + getCheckMessage ( MSG _ KEY , " NoSuperClone " ) , 
 - " 33 : " + getCheckMessage ( MSG _ KEY , " InnerClone " ) , 
 - " 50 : " + getCheckMessage ( MSG _ KEY , " CloneWithTypeArguments " ) , 
 - " 58 : " + getCheckMessage ( MSG _ KEY , " CloneWithTypeArgumentsAndNoSuper " ) , 
 - " 67 : " + getCheckMessage ( MSG _ KEY , " MyClassWithGenericSuperMethod " ) , 
 - " 84 : " + getCheckMessage ( MSG _ KEY , " AnotherClass " ) , 
 - " 97 : " + getCheckMessage ( MSG _ KEY , " NativeTest " ) , 
 + " 29 : " + getCheckMessage ( MSG _ KEY , " InnerClone " ) , 
 + " 33 : " + getCheckMessage ( MSG _ KEY , " CloneWithTypeArguments " ) , 
 + " 37 : " + getCheckMessage ( MSG _ KEY , " CloneWithTypeArgumentsAndNoSuper " ) , 
 + " 41 : " + getCheckMessage ( MSG _ KEY , " MyClassWithGenericSuperMethod " ) , 
 + " 45 : " + getCheckMessage ( MSG _ KEY , " AnotherClass " ) , 
 + " 48 : " + getCheckMessage ( MSG _ KEY , " NativeTest " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputClone . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " checks " + File . separator + " design " 
 + + File . separator + " InputClone . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputMissingSwitchDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputMissingSwitchDefault . java 
 deleted file mode 100644 
 index cd0c0a2 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputMissingSwitchDefault . java 
 + + + / dev / null 
 @ @ - 1 , 22 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - public class InputMissingSwitchDefault { 
 - public void foo ( ) { 
 - int i = 1 ; 
 - switch ( i ) { 
 - case 1 : i + + ; break ; 
 - case 2 : i - - ; break ; 
 - default : return ; 
 - } 
 - } 
 - } 
 - 
 - class bad _ test { 
 - public void foo ( ) { 
 - int i = 1 ; 
 - switch ( i ) { 
 - case 1 : i + + ; break ; 
 - case 2 : i - - ; break ; 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputMissingSwitchDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputMissingSwitchDefault . java 
 new file mode 100644 
 index 0000000 . . 7db2bd5 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputMissingSwitchDefault . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks ; 
 + 
 + public class InputMissingSwitchDefault { 
 + public void foo ( ) { 
 + int i = 1 ; 
 + switch ( i ) { 
 + case 1 : i + + ; break ; 
 + case 2 : i - - ; break ; 
 + default : return ; 
 + } 
 + } 
 + } 
 + 
 + class bad _ test { 
 + public void foo ( ) { 
 + int i = 1 ; 
 + switch ( i ) { 
 + case 1 : i + + ; break ; 
 + case 2 : i - - ; break ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputStringLiteralEquality . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputStringLiteralEquality . java 
 new file mode 100644 
 index 0000000 . . d6609d3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputStringLiteralEquality . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks ; 
 + 
 + public class InputStringLiteralEquality 
 + { 
 + void foo ( String name ) 
 + { 
 + if ( name = = " Lars " ) 
 + { 
 + / / flagged , should use equals 
 + } 
 + 
 + if ( " Oleg " = = name ) 
 + { 
 + / / flagged , should use equals 
 + } 
 + 
 + if ( " Oliver " = = " Oliver " ) 
 + { 
 + / / doesn ' t make much sense because this can be evaluated 
 + / / to true at compile time , but is flagged anyway 
 + } 
 + 
 + String compare = " Rick " ; 
 + if ( name = = compare ) 
 + { 
 + / / currently not flagged . 
 + / / 
 + / / Implementing this is very complicated , we would need 
 + / / - type info on the = = operands 
 + / / - prevent false alarms where the user explicitly wants 
 + / / to compare object identities 
 + / / 
 + / / My current feeling is that we should leave finding 
 + / / this one to manual code inspections . After all MCI is 
 + / / what some of us get paid for : - ) 
 + } 
 + 
 + if ( " Rick " . toUpperCase ( ) = = " Rick " . toLowerCase ( ) ) 
 + { 
 + / / completly dynamic , don ' t flag 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java 
 new file mode 100644 
 index 0000000 . . 11ec5df 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / / someexamples of 1 . 5 extensions 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + @ interface MyAnnotation1 { 
 + String name ( ) ; 
 + int version ( ) ; 
 + } 
 + 
 + @ MyAnnotation1 ( name = " ABC " , version = 1 ) 
 + public class Input15Extensions 
 + { 
 + 
 + } 
 + 
 + enum Enum2 
 + { 
 + A , B , C ; 
 + Enum2 ( ) { } 
 + public String toString ( ) { 
 + return " " ; / / some custom implementation 
 + } 
 + } 
 + 
 + interface TestRequireThisEnum 
 + { 
 + enum DAY _ OF _ WEEK 
 + { 
 + SUNDAY , 
 + MONDAY , 
 + TUESDAY , 
 + WEDNESDAY , 
 + THURSDAY , 
 + FRIDAY , 
 + SATURDAY 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java 
 new file mode 100644 
 index 0000000 . . d641483 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java 
 @ @ - 0 , 0 + 1 , 99 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + public class InputClone 
 + { / * class body * / 
 + public InputClone ( ) throws CloneNotSupportedException 
 + { / / constructor body 
 + super . equals ( new String ( ) ) ; 
 + super . clone ( ) ; 
 + } 
 + 
 + public Object clone ( ) throws CloneNotSupportedException 
 + { 
 + return super . clone ( ) ; 
 + } 
 + 
 + public void method ( ) throws CloneNotSupportedException 
 + { 
 + super . clone ( ) ; 
 + } 
 + 
 + { 
 + super . clone ( ) ; 
 + } 
 + } 
 + 
 + class NoSuperClone 
 + { 
 + public Object clone ( ) 
 + { 
 + return null ; 
 + } 
 + } 
 + 
 + class InnerClone 
 + { 
 + public Object clone ( ) 
 + { 
 + class Inner 
 + { 
 + public Object clone ( ) throws CloneNotSupportedException 
 + { 
 + return super . clone ( ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 + } 
 + 
 + / / This could not pass as valid semantically but tests that 
 + / / type arguments are ignored when checking super calls 
 + class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > 
 + { 
 + public CloneWithTypeArguments < T > clone ( ) throws CloneNotSupportedException 
 + { 
 + return ( CloneWithTypeArguments < T > ) super . < T > clone ( ) ; 
 + } 
 + } 
 + 
 + class CloneWithTypeArgumentsAndNoSuper < T > 
 + { 
 + public CloneWithTypeArgumentsAndNoSuper < T > clone ( ) throws CloneNotSupportedException 
 + { 
 + return null ; 
 + } 
 + } 
 + 
 + / / Check that super keword isn ' t snagged here 
 + class MyClassWithGenericSuperMethod 
 + { 
 + void someMethod ( java . util . List < ? super java . util . Map < Object , Object > > l ) 
 + { 
 + 
 + } 
 + 
 + / * * 
 + * Not a valid clone override . Should not get flagged . 
 + * @ param o some object 
 + * @ return a cloned Object ? 
 + * / 
 + public static Object clone ( Object o ) { 
 + 	 return null ; 
 + } 
 + } 
 + 
 + class AnotherClass { 
 + 
 + / * * 
 + * Not a valid clone override . Should not get flagged . 
 + * @ param t some type 
 + * @ param < T > a type 
 + * @ return a cloned type ? 
 + * / 
 + public < T > T clone ( T t ) { 
 + 	 return null ; 
 + } 
 + } 
 + 
 + class NativeTest { 
 + public native Object clone ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMissingSwitchDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMissingSwitchDefault . java 
 new file mode 100644 
 index 0000000 . . 17a73a0 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMissingSwitchDefault . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputMissingSwitchDefault { 
 + public void foo ( ) { 
 + int i = 1 ; 
 + switch ( i ) { 
 + case 1 : i + + ; break ; 
 + case 2 : i - - ; break ; 
 + default : return ; 
 + } 
 + } 
 + } 
 + 
 + class bad _ test { 
 + public void foo ( ) { 
 + int i = 1 ; 
 + switch ( i ) { 
 + case 1 : i + + ; break ; 
 + case 2 : i - - ; break ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java 
 new file mode 100644 
 index 0000000 . . e8cdbb7 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import java . awt . Toolkit ; 
 + import java . io . ByteArrayInputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + 
 + public class InputRequireThis { 
 + int i ; 
 + void method1 ( ) { 
 + i = 3 ; 
 + } 
 + 
 + void method2 ( int i ) { 
 + i + + ; 
 + this . i = i ; 
 + method1 ( ) ; 
 + try { 
 + this . method1 ( ) ; 
 + } 
 + catch ( RuntimeException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + this . i - - ; 
 + 
 + Integer . toString ( 10 ) ; 
 + } 
 + 
 + < T > void method3 ( ) 
 + { 
 + i = 3 ; 
 + } 
 + 
 + void method4 ( ) { 
 + this . < String > method3 ( ) ; 
 + this . < I > method3 ( ) ; 
 + } 
 + int I = 0 ; 
 + private class I { } 
 + } 
 + / / enum 
 + enum MyEnum 
 + { 
 + A , 
 + B 
 + { 
 + void doSomething ( ) 
 + { 
 + z = 1 ; 
 + } 
 + } ; 
 + 
 + int z ; 
 + private MyEnum ( ) 
 + { 
 + z = 0 ; 
 + } 
 + } 
 + 
 + class Bug2123003 { 
 + @ Rock ( band = " GnR " ) 
 + private String band ; 
 + 
 + class Inner { 
 + @ Rock ( band = { " GnR " } ) 
 + private String band ; 
 + } 
 + 
 + class Inner2 { 
 + @ Rock ( band = { ( true ) ? " GnR " : " Tool " } ) 
 + private String band ; 
 + } 
 + / * \ m / ( > . < ) \ m / * / 
 + @ interface Rock { 
 + String [ ] band ( ) default " Metallica " ; 
 + } 
 + } 
 + 
 + class Bug1155921 { 
 + private static int CONST = 1 ; 
 + private static int static _ method ( ) { 
 + return 1 ; 
 + } 
 + 
 + private int method1 ( ) { 
 + return CONST ; 
 + } 
 + 
 + private int method2 ( ) { 
 + return static _ method ( ) ; 
 + } 
 + } 
 + 
 + interface Issue155 { 
 + String BASE = " A " ; 
 + String EXT = BASE + " B " ; 
 + } 
 + 
 + class Issue257 { 
 + public void foo ( ) { 
 + try ( final InputStream foo = new ByteArrayInputStream ( new byte [ 512 ] ) ) { 
 + foo . read ( ) ; 
 + } 
 + catch ( final IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis2 . java 
 new file mode 100644 
 index 0000000 . . 032337f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis2 . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputRequireThis2 { 
 + 	 private final int number = 1 ; 
 + 
 + public int check ( ) { 
 + int sum = number ; 
 + sum + = other ( ) ; 
 + return sum ; 
 + } 
 + 
 + private int other ( ) { 
 + 	 return 0 ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis3 . java 
 new file mode 100644 
 index 0000000 . . 4d326a6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis3 . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputRequireThis3 { 
 + interface AnonWithEmpty { 
 + public void fooEmpty ( ) ; 
 + } 
 + 
 + void method ( ) { 
 + AnonWithEmpty foo = new AnonWithEmpty ( ) { 
 + 
 + public void emptyMethod ( ) { 
 + } 
 + 
 + @ Override 
 + public void fooEmpty ( ) { 
 + int a = doSideEffect ( ) ; 
 + } 
 + 
 + public int doSideEffect ( ) { 
 + return 1 ; 
 + } 
 + } ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputStringLiteralEquality . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputStringLiteralEquality . java 
 new file mode 100644 
 index 0000000 . . 8a8f13a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputStringLiteralEquality . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + / * * 
 + * Input file for the StringLiteralEqualityCheck 
 + * @ author Lars K & uuml ; hne 
 + * / 
 + public class InputStringLiteralEquality 
 + { 
 + void foo ( String name ) 
 + { 
 + if ( name = = " Lars " ) 
 + { 
 + / / flagged , should use equals 
 + } 
 + 
 + if ( " Oleg " = = name ) 
 + { 
 + / / flagged , should use equals 
 + } 
 + 
 + if ( " Oliver " = = " Oliver " ) 
 + { 
 + / / doesn ' t make much sense because this can be evaluated 
 + / / to true at compile time , but is flagged anyway 
 + } 
 + 
 + String compare = " Rick " ; 
 + if ( name = = compare ) 
 + { 
 + / / currently not flagged . 
 + / / 
 + / / Implementing this is very complicated , we would need 
 + / / - type info on the = = operands 
 + / / - prevent false alarms where the user explicitly wants 
 + / / to compare object identities 
 + / / 
 + / / My current feeling is that we should leave finding 
 + / / this one to manual code inspections . After all MCI is 
 + / / what some of us get paid for : - ) 
 + } 
 + 
 + if ( " Rick " . toUpperCase ( ) = = " Rick " . toLowerCase ( ) ) 
 + { 
 + / / completly dynamic , don ' t flag 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java 
 new file mode 100644 
 index 0000000 . . d70c859 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + public class InputClone 
 + { / * class body * / 
 + public InputClone ( ) throws CloneNotSupportedException 
 + { / / constructor body 
 + super . equals ( new String ( ) ) ; 
 + super . clone ( ) ; 
 + } 
 + 
 + public Object clone ( ) throws CloneNotSupportedException 
 + { 
 + return super . clone ( ) ; 
 + } 
 + 
 + public void method ( ) throws CloneNotSupportedException 
 + { 
 + super . clone ( ) ; 
 + } 
 + 
 + { 
 + super . clone ( ) ; 
 + } 
 + } 
 + 
 + class NoSuperClone 
 + { 
 + } 
 + 
 + class InnerClone 
 + { 
 + } 
 + 
 + class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > 
 + { 
 + } 
 + 
 + class CloneWithTypeArgumentsAndNoSuper < T > 
 + { 
 + } 
 + 
 + class MyClassWithGenericSuperMethod 
 + { 
 + } 
 + 
 + class AnotherClass { 
 + } 
 + 
 + class NativeTest { 
 + public native Object clone ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputClone . java 
 deleted file mode 100644 
 index d21a4fb . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputClone . java 
 + + + / dev / null 
 @ @ - 1 , 99 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - public class InputClone 
 - { / * class body * / 
 - public InputClone ( ) throws CloneNotSupportedException 
 - { / / constructor body 
 - super . equals ( new String ( ) ) ; 
 - super . clone ( ) ; 
 - } 
 - 
 - public Object clone ( ) throws CloneNotSupportedException 
 - { 
 - return super . clone ( ) ; 
 - } 
 - 
 - public void method ( ) throws CloneNotSupportedException 
 - { 
 - super . clone ( ) ; 
 - } 
 - 
 - { 
 - super . clone ( ) ; 
 - } 
 - } 
 - 
 - class NoSuperClone 
 - { 
 - public Object clone ( ) 
 - { 
 - return null ; 
 - } 
 - } 
 - 
 - class InnerClone 
 - { 
 - public Object clone ( ) 
 - { 
 - class Inner 
 - { 
 - public Object clone ( ) throws CloneNotSupportedException 
 - { 
 - return super . clone ( ) ; 
 - } 
 - } 
 - return null ; 
 - } 
 - } 
 - 
 - / / This could not pass as valid semantically but tests that 
 - / / type arguments are ignored when checking super calls 
 - class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > 
 - { 
 - public CloneWithTypeArguments < T > clone ( ) throws CloneNotSupportedException 
 - { 
 - return ( CloneWithTypeArguments < T > ) super . < T > clone ( ) ; 
 - } 
 - } 
 - 
 - class CloneWithTypeArgumentsAndNoSuper < T > 
 - { 
 - public CloneWithTypeArgumentsAndNoSuper < T > clone ( ) throws CloneNotSupportedException 
 - { 
 - return null ; 
 - } 
 - } 
 - 
 - / / Check that super keword isn ' t snagged here 
 - class MyClassWithGenericSuperMethod 
 - { 
 - void someMethod ( java . util . List < ? super java . util . Map < Object , Object > > l ) 
 - { 
 - 
 - } 
 - 
 - / * * 
 - * Not a valid clone override . Should not get flagged . 
 - * @ param o some object 
 - * @ return a cloned Object ? 
 - * / 
 - public static Object clone ( Object o ) { 
 - 	 return null ; 
 - } 
 - } 
 - 
 - class AnotherClass { 
 - 
 - / * * 
 - * Not a valid clone override . Should not get flagged . 
 - * @ param t some type 
 - * @ param < T > a type 
 - * @ return a cloned type ? 
 - * / 
 - public < T > T clone ( T t ) { 
 - 	 return null ; 
 - } 
 - } 
 - 
 - class NativeTest { 
 - public native Object clone ( ) ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java 
 deleted file mode 100644 
 index 1465995 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java 
 + + + / dev / null 
 @ @ - 1 , 108 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - import java . awt . Toolkit ; 
 - import java . io . ByteArrayInputStream ; 
 - import java . io . IOException ; 
 - import java . io . InputStream ; 
 - 
 - public class InputRequireThis { 
 - int i ; 
 - void method1 ( ) { 
 - i = 3 ; 
 - } 
 - 
 - void method2 ( int i ) { 
 - i + + ; 
 - this . i = i ; 
 - method1 ( ) ; 
 - try { 
 - this . method1 ( ) ; 
 - } 
 - catch ( RuntimeException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - this . i - - ; 
 - 
 - Integer . toString ( 10 ) ; 
 - } 
 - 
 - < T > void method3 ( ) 
 - { 
 - i = 3 ; 
 - } 
 - 
 - void method4 ( ) { 
 - this . < String > method3 ( ) ; 
 - this . < I > method3 ( ) ; 
 - } 
 - int I = 0 ; 
 - private class I { } 
 - } 
 - / / enum 
 - enum MyEnum 
 - { 
 - A , 
 - B 
 - { 
 - void doSomething ( ) 
 - { 
 - z = 1 ; 
 - } 
 - } ; 
 - 
 - int z ; 
 - private MyEnum ( ) 
 - { 
 - z = 0 ; 
 - } 
 - } 
 - 
 - class Bug2123003 { 
 - @ Rock ( band = " GnR " ) 
 - private String band ; 
 - 
 - class Inner { 
 - @ Rock ( band = { " GnR " } ) 
 - private String band ; 
 - } 
 - 
 - class Inner2 { 
 - @ Rock ( band = { ( true ) ? " GnR " : " Tool " } ) 
 - private String band ; 
 - } 
 - / * \ m / ( > . < ) \ m / * / 
 - @ interface Rock { 
 - String [ ] band ( ) default " Metallica " ; 
 - } 
 - } 
 - 
 - class Bug1155921 { 
 - private static int CONST = 1 ; 
 - private static int static _ method ( ) { 
 - return 1 ; 
 - } 
 - 
 - private int method1 ( ) { 
 - return CONST ; 
 - } 
 - 
 - private int method2 ( ) { 
 - return static _ method ( ) ; 
 - } 
 - } 
 - 
 - interface Issue155 { 
 - String BASE = " A " ; 
 - String EXT = BASE + " B " ; 
 - } 
 - 
 - class Issue257 { 
 - public void foo ( ) { 
 - try ( final InputStream foo = new ByteArrayInputStream ( new byte [ 512 ] ) ) { 
 - foo . read ( ) ; 
 - } 
 - catch ( final IOException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis2 . java 
 deleted file mode 100644 
 index 8de7043 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis2 . java 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputRequireThis2 { 
 - 	 private final int number = 1 ; 
 - 
 - public int check ( ) { 
 - int sum = number ; 
 - sum + = other ( ) ; 
 - return sum ; 
 - } 
 - 
 - private int other ( ) { 
 - 	 return 0 ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java 
 deleted file mode 100644 
 index d4bc493 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java 
 + + + / dev / null 
 @ @ - 1 , 24 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputRequireThis3 { 
 - interface AnonWithEmpty { 
 - public void fooEmpty ( ) ; 
 - } 
 - 
 - void method ( ) { 
 - AnonWithEmpty foo = new AnonWithEmpty ( ) { 
 - 
 - public void emptyMethod ( ) { 
 - } 
 - 
 - @ Override 
 - public void fooEmpty ( ) { 
 - int a = doSideEffect ( ) ; 
 - } 
 - 
 - public int doSideEffect ( ) { 
 - return 1 ; 
 - } 
 - } ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputStringLiteralEquality . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputStringLiteralEquality . java 
 deleted file mode 100644 
 index 0b008c2 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputStringLiteralEquality . java 
 + + + / dev / null 
 @ @ - 1 , 47 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - / * * 
 - * Input file for the StringLiteralEqualityCheck 
 - * @ author Lars K & uuml ; hne 
 - * / 
 - public class InputStringLiteralEquality 
 - { 
 - void foo ( String name ) 
 - { 
 - if ( name = = " Lars " ) 
 - { 
 - / / flagged , should use equals 
 - } 
 - 
 - if ( " Oleg " = = name ) 
 - { 
 - / / flagged , should use equals 
 - } 
 - 
 - if ( " Oliver " = = " Oliver " ) 
 - { 
 - / / doesn ' t make much sense because this can be evaluated 
 - / / to true at compile time , but is flagged anyway 
 - } 
 - 
 - String compare = " Rick " ; 
 - if ( name = = compare ) 
 - { 
 - / / currently not flagged . 
 - / / 
 - / / Implementing this is very complicated , we would need 
 - / / - type info on the = = operands 
 - / / - prevent false alarms where the user explicitly wants 
 - / / to compare object identities 
 - / / 
 - / / My current feeling is that we should leave finding 
 - / / this one to manual code inspections . After all MCI is 
 - / / what some of us get paid for : - ) 
 - } 
 - 
 - if ( " Rick " . toUpperCase ( ) = = " Rick " . toLowerCase ( ) ) 
 - { 
 - / / completly dynamic , don ' t flag 
 - } 
 - } 
 - }
