BLEU SCORE: 0.8070557274927982

TEST MSG: Issue # 2161 : unify test input locations for sizes package
GENERATED MSG: Issue # 2161 : unify test input locations for naming package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java <nl> index 2f670cc . . 028867c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java <nl> @ @ - 23 , 6 + 23 , 9 @ @ import static com . puppycrawl . tools . checkstyle . checks . sizes . FileLengthCheck . MSG _ K <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 34 , 6 + 37 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> public class FileLengthCheckTest <nl> extends BaseCheckTestSupport { <nl> @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " sizes " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Override <nl> protected DefaultConfiguration createCheckerConfig ( <nl> Configuration config ) { <nl> DefaultConfiguration dc = new DefaultConfiguration ( " root " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java <nl> index 9086bb7 . . 022e8fb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> import static com . puppycrawl . tools . checkstyle . checks . sizes . LineLengthCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 29 , 6 + 32 , 11 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class LineLengthCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " sizes " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java <nl> index 92dd5c5 . . 3cf05f6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> import static com . puppycrawl . tools . checkstyle . checks . sizes . MethodLengthCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 30 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class MethodLengthCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " sizes " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckTest . java <nl> index fc5df7b . . 1d79415 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckTest . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> import static com . puppycrawl . tools . checkstyle . checks . sizes . OuterTypeNumberCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 30 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class OuterTypeNumberCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " sizes " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> index 0f9dccd . . fe8d099 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> import static com . puppycrawl . tools . checkstyle . checks . sizes . ParameterNumberCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 31 , 6 + 34 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class ParameterNumberCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " sizes " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifier . java <nl> deleted file mode 100644 <nl> index 52f7ab1 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifier . java <nl> + + + / dev / null <nl> @ @ - 1 , 139 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - / * * <nl> - * Test case for Modifier checks : <nl> - * - order of modifiers <nl> - * - use of ' public ' in interface definition <nl> - * @ author lkuehne <nl> - * / <nl> - strictfp final class InputModifier / / illegal order of modifiers for class <nl> - { <nl> - <nl> - / * * Illegal order of modifiers for variables * / <nl> - static private boolean sModifierOrderVar = false ; <nl> - <nl> - / * * <nl> - * Illegal order of modifiers for methods . Make sure that the <nl> - * first and last modifier from the JLS sequence is used . <nl> - * / <nl> - strictfp private void doStuff ( ) <nl> - { <nl> - } <nl> - <nl> - / * * Single annotation without other modifiers * / <nl> - @ MyAnnotation2 void someMethod ( ) <nl> - { <nl> - } <nl> - <nl> - / * * Illegal order of annotation - must come first * / <nl> - private @ MyAnnotation2 void someMethod2 ( ) <nl> - { <nl> - } <nl> - <nl> - / * * Annotation in middle of other modifiers otherwise in correct order * / <nl> - private @ MyAnnotation2 strictfp void someMethod3 ( ) <nl> - { <nl> - } <nl> - <nl> - / * * Correct order * / <nl> - @ MyAnnotation2 private strictfp void someMethod4 ( ) <nl> - { <nl> - } <nl> - <nl> - / * * Annotation in middle of other modifiers otherwise in correct order * / <nl> - @ MyAnnotation2 private static @ MyAnnotation4 strictfp void someMethod5 ( ) <nl> - { <nl> - } <nl> - <nl> - / * * holder for redundant ' public ' modifier check . * / <nl> - public static interface InputRedundantPublicModifier / / violation <nl> - { <nl> - / * * redundant ' public ' modifier * / <nl> - public void a ( ) ; / / violation <nl> - <nl> - / * * all OK * / <nl> - void b ( ) ; <nl> - <nl> - / * * redundant abstract modifier * / <nl> - abstract void c ( ) ; / / violation <nl> - <nl> - / * * redundant ' public ' modifier * / <nl> - public float PI _ PUBLIC = ( float ) 3 . 14 ; / / violation <nl> - <nl> - / * * redundant ' abstract ' modifier ( field can not be abstract ) * / <nl> - / / abstract float PI _ ABSTRACT = ( float ) 3 . 14 ; <nl> - <nl> - / * * redundant ' final ' modifier * / <nl> - final float PI _ FINAL = ( float ) 3 . 14 ; / / violation <nl> - <nl> - / * * all OK * / <nl> - float PI _ OK = ( float ) 3 . 14 ; <nl> - } <nl> - <nl> - / * * redundant ' final ' modifier * / <nl> - private final void method ( ) / / violation <nl> - { <nl> - } <nl> - } <nl> - <nl> - / * * Holder for redundant ' final ' check . * / <nl> - final class RedundantFinalClass <nl> - { <nl> - / * * redundant ' final ' modifier * / <nl> - public final void finalMethod ( ) / / violation <nl> - { <nl> - } <nl> - <nl> - / * * OK * / <nl> - public void method ( ) <nl> - { <nl> - } <nl> - } <nl> - <nl> - / * * Holder for redundant modifiers of inner implementation * / <nl> - abstract interface InnerImplementation / / violation <nl> - { <nl> - InnerImplementation inner = <nl> - new InnerImplementation ( ) <nl> - { <nl> - / * * compiler requires ' public ' modifier * / <nl> - public void method ( ) <nl> - { <nl> - } <nl> - } ; <nl> - <nl> - void method ( ) ; <nl> - } <nl> - <nl> - / * * Holder for redundant modifiers of annotation fields / variables * / <nl> - @ interface Annotation <nl> - { <nl> - public String s1 = " " ; / / violation <nl> - final String s2 = " " ; / / violation <nl> - static String s3 = " " ; / / violation <nl> - String s4 = " " ; <nl> - public String blah ( ) ; / / violation <nl> - abstract String blah2 ( ) ; / / violation <nl> - } <nl> - <nl> - @ interface MyAnnotation2 { <nl> - } <nl> - <nl> - @ interface MyAnnotation4 { <nl> - } <nl> - <nl> - class SafeVarargsUsage { <nl> - @ Deprecated <nl> - @ SafeVarargs <nl> - private final void foo ( int . . . k ) { } <nl> - <nl> - @ Deprecated <nl> - @ SafeVarargs <nl> - @ SuppressWarnings ( " " ) <nl> - private final void foo1 ( Object . . . obj ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java <nl> deleted file mode 100644 <nl> index 92ef3b8 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 27 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - class InputParameterNumberCheckBase <nl> - { <nl> - / / method with many parameters <nl> - void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> - <nl> - } <nl> - <nl> - / / method with many parameters <nl> - void myMethod2 ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> - <nl> - } <nl> - } <nl> - <nl> - public class InputParameterNumberCheck extends InputParameterNumberCheckBase <nl> - { <nl> - @ Override <nl> - void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> - <nl> - } <nl> - <nl> - @ java . lang . Override <nl> - void myMethod2 ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / OuterTypeNumberCheckInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / OuterTypeNumberCheckInput . java <nl> deleted file mode 100644 <nl> index 3b505a6 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / OuterTypeNumberCheckInput . java <nl> + + + / dev / null <nl> @ @ - 1 , 10 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - / * * Contains empty inner class for OuterTypeNumberCheckTest * / <nl> - public class OuterTypeNumberCheckInput { <nl> - <nl> - / * * Just empty inner class * / <nl> - private class InnerClass { <nl> - / / Do nothing <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputModifier . java <nl> new file mode 100644 <nl> index 0000000 . . 39fbc84 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputModifier . java <nl> @ @ - 0 , 0 + 1 , 133 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> + <nl> + strictfp final class InputModifier / / illegal order of modifiers for class <nl> + { <nl> + <nl> + / * * Illegal order of modifiers for variables * / <nl> + static private boolean sModifierOrderVar = false ; <nl> + <nl> + / * * <nl> + * Illegal order of modifiers for methods . Make sure that the <nl> + * first and last modifier from the JLS sequence is used . <nl> + * / <nl> + strictfp private void doStuff ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Single annotation without other modifiers * / <nl> + @ MyAnnotation2 void someMethod ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Illegal order of annotation - must come first * / <nl> + private @ MyAnnotation2 void someMethod2 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Annotation in middle of other modifiers otherwise in correct order * / <nl> + private @ MyAnnotation2 strictfp void someMethod3 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Correct order * / <nl> + @ MyAnnotation2 private strictfp void someMethod4 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Annotation in middle of other modifiers otherwise in correct order * / <nl> + @ MyAnnotation2 private static @ MyAnnotation4 strictfp void someMethod5 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * holder for redundant ' public ' modifier check . * / <nl> + public static interface InputRedundantPublicModifier / / violation <nl> + { <nl> + / * * redundant ' public ' modifier * / <nl> + public void a ( ) ; / / violation <nl> + <nl> + / * * all OK * / <nl> + void b ( ) ; <nl> + <nl> + / * * redundant abstract modifier * / <nl> + abstract void c ( ) ; / / violation <nl> + <nl> + / * * redundant ' public ' modifier * / <nl> + public float PI _ PUBLIC = ( float ) 3 . 14 ; / / violation <nl> + <nl> + / * * redundant ' abstract ' modifier ( field can not be abstract ) * / <nl> + / / abstract float PI _ ABSTRACT = ( float ) 3 . 14 ; <nl> + <nl> + / * * redundant ' final ' modifier * / <nl> + final float PI _ FINAL = ( float ) 3 . 14 ; / / violation <nl> + <nl> + / * * all OK * / <nl> + float PI _ OK = ( float ) 3 . 14 ; <nl> + } <nl> + <nl> + / * * redundant ' final ' modifier * / <nl> + private final void method ( ) / / violation <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Holder for redundant ' final ' check . * / <nl> + final class RedundantFinalClass <nl> + { <nl> + / * * redundant ' final ' modifier * / <nl> + public final void finalMethod ( ) / / violation <nl> + { <nl> + } <nl> + <nl> + / * * OK * / <nl> + public void method ( ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Holder for redundant modifiers of inner implementation * / <nl> + abstract interface InnerImplementation / / violation <nl> + { <nl> + InnerImplementation inner = <nl> + new InnerImplementation ( ) <nl> + { <nl> + / * * compiler requires ' public ' modifier * / <nl> + public void method ( ) <nl> + { <nl> + } <nl> + } ; <nl> + <nl> + void method ( ) ; <nl> + } <nl> + <nl> + / * * Holder for redundant modifiers of annotation fields / variables * / <nl> + @ interface Annotation <nl> + { <nl> + public String s1 = " " ; / / violation <nl> + final String s2 = " " ; / / violation <nl> + static String s3 = " " ; / / violation <nl> + String s4 = " " ; <nl> + public String blah ( ) ; / / violation <nl> + abstract String blah2 ( ) ; / / violation <nl> + } <nl> + <nl> + @ interface MyAnnotation2 { <nl> + } <nl> + <nl> + @ interface MyAnnotation4 { <nl> + } <nl> + <nl> + class SafeVarargsUsage { <nl> + @ Deprecated <nl> + @ SafeVarargs <nl> + private final void foo ( int . . . k ) { } <nl> + <nl> + @ Deprecated <nl> + @ SafeVarargs <nl> + @ SuppressWarnings ( " " ) <nl> + private final void foo1 ( Object . . . obj ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputParameterNumberCheck . java <nl> new file mode 100644 <nl> index 0000000 . . d8c5230 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputParameterNumberCheck . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> + <nl> + class InputParameterNumberCheckBase <nl> + { <nl> + / / method with many parameters <nl> + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + <nl> + / / method with many parameters <nl> + void myMethod2 ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + public class InputParameterNumberCheck extends InputParameterNumberCheckBase <nl> + { <nl> + @ Override <nl> + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + <nl> + @ java . lang . Override <nl> + void myMethod2 ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputSimple . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputSimple . java <nl> new file mode 100644 <nl> index 0000000 . . 972e428 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputSimple . java <nl> @ @ - 0 , 0 + 1 , 225 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : Feb - 2001 <nl> + / / Ignore error <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> + import java . io . * ; <nl> + / * * <nl> + * Contains simple mistakes : <nl> + * - Long lines <nl> + * - Tabs <nl> + * - Format of variables and parameters <nl> + * - Order of modifiers <nl> + * @ author Oliver Burn <nl> + * * / <nl> + final class InputSimple <nl> + { <nl> + / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + / / Contains a tab - > 	 < - <nl> + / / Contains trailing whitespace - > <nl> + <nl> + / / Name format tests <nl> + / / <nl> + / * * Invalid format * * / <nl> + public static final int badConstant = 2 ; <nl> + / * * Valid format * * / <nl> + public static final int MAX _ ROWS = 2 ; <nl> + <nl> + / * * Invalid format * * / <nl> + private static int badStatic = 2 ; <nl> + / * * Valid format * * / <nl> + private static int sNumCreated = 0 ; <nl> + <nl> + / * * Invalid format * * / <nl> + private int badMember = 2 ; <nl> + / * * Valid format * * / <nl> + private int mNumCreated1 = 0 ; <nl> + / * * Valid format * * / <nl> + protected int mNumCreated2 = 0 ; <nl> + <nl> + / * * commas are wrong * * / <nl> + private int [ ] mInts = new int [ ] { 1 , 2 , 3 , <nl> + 4 } ; <nl> + <nl> + / / <nl> + / / Accessor tests <nl> + / / <nl> + / * * should be private * * / <nl> + public static int sTest1 ; <nl> + / * * should be private * * / <nl> + protected static int sTest3 ; <nl> + / * * should be private * * / <nl> + static int sTest2 ; <nl> + <nl> + / * * should be private * * / <nl> + int mTest1 ; <nl> + / * * should be private * * / <nl> + public int mTest2 ; <nl> + <nl> + / / <nl> + / / Parameter name format tests <nl> + / / <nl> + <nl> + / * * <nl> + * @ return hack <nl> + * @ param badFormat1 bad format <nl> + * @ param badFormat2 bad format <nl> + * @ param badFormat3 bad format <nl> + * @ throws java . lang . Exception abc <nl> + * * / <nl> + int test1 ( int badFormat1 , int badFormat2 , <nl> + final int badFormat3 ) <nl> + throws java . lang . Exception <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + / * * method that is 20 lines long * * / <nl> + private void longMethod ( ) <nl> + { <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + } <nl> + <nl> + / * * constructor that is 10 lines long * * / <nl> + private InputSimple ( ) <nl> + { <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + } <nl> + <nl> + / * * test local variables * / <nl> + private void localVariables ( ) <nl> + { <nl> + / / normal decl <nl> + int abc = 0 ; <nl> + int ABC = 0 ; <nl> + <nl> + / / final decls <nl> + final int cde = 0 ; <nl> + final int CDE = 0 ; <nl> + <nl> + / / decl in for loop init statement <nl> + for ( int k = 0 ; k < 1 ; k + + ) <nl> + { <nl> + String innerBlockVariable = " " ; <nl> + } <nl> + for ( int I = 0 ; I < 1 ; I + + ) <nl> + { <nl> + String InnerBlockVariable = " " ; <nl> + } <nl> + } <nl> + <nl> + / * * test method pattern * / <nl> + void ALL _ UPPERCASE _ METHOD ( ) <nl> + { <nl> + } <nl> + <nl> + / * * test illegal constant * * / <nl> + private static final int BAD _ _ NAME = 3 ; <nl> + <nl> + / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " <nl> + / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char <nl> + / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK <nl> + <nl> + / * * some lines to test the error column after tabs * / <nl> + void errorColumnAfterTabs ( ) <nl> + { <nl> + / / with tab - width 8 all statements below start at the same column , <nl> + / / with different combinations of ' ' and ' \ t ' before the statement <nl> + int tab0 = 1 ; <nl> + 	 int tab1 = 1 ; <nl> + 	 int tab2 = 1 ; <nl> + 	 	 int tab3 = 1 ; <nl> + 	 	 int tab4 = 1 ; <nl> + 	 int tab5 = 1 ; <nl> + } <nl> + <nl> + / / FIXME : <nl> + / * FIXME : a <nl> + * FIXME : <nl> + * TODO <nl> + * / <nl> + / * NOTHING * / <nl> + / * YES * / / * FIXME : x * / / * YES ! ! * / <nl> + <nl> + / * * test long comments * * / <nl> + void veryLong ( ) <nl> + { <nl> + / * <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + enough talk * / <nl> + } <nl> + <nl> + / * * <nl> + * @ see to lazy to document all args . Testing excessive # args <nl> + * * / <nl> + void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , <nl> + int aArg6 , int aArg7 , int aArg8 , int aArg9 ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Test class for variable naming in for each clauses . * / <nl> + class InputSimple2 <nl> + { <nl> + / * * Some more Javadoc . * / <nl> + public void doSomething ( ) <nl> + { <nl> + / / " O " should be named " o " <nl> + for ( Object O : new java . util . ArrayList ( ) ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * Test enum for member naming check * / <nl> + enum MyEnum1 <nl> + { <nl> + / * * ABC constant * / <nl> + ABC , <nl> + <nl> + / * * XYZ constant * / <nl> + XYZ ; <nl> + <nl> + / * * Should be mSomeMemeber * / <nl> + private int someMember ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckInput . java <nl> new file mode 100644 <nl> index 0000000 . . a19e765 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckInput . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> + <nl> + / * * Contains empty inner class for OuterTypeNumberCheckTest * / <nl> + public class OuterTypeNumberCheckInput { <nl> + <nl> + / * * Just empty inner class * / <nl> + private class InnerClass { <nl> + / / Do nothing <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> index 89a41fc . . 2a550da 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> createChecker ( checkConfig ) ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator <nl> + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator <nl> + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> new file mode 100644 <nl> index 0000000 . . 10b8399 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> + <nl> + / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> + <nl> + / / STANDARD - keyword Check <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> + <nl> + / / SPECIAL _ IMPORTS - keyword Tag <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> + <nl> + import com . puppycrawl . tools . * ; <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> + <nl> + public class InputCustomImportOrder _ OverlappingPatterns { <nl> + } <nl> + / * <nl> + test : testRulesOrder _ ThirdBeforeSame ( ) <nl> + configuration : <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> + * / <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> deleted file mode 100644 <nl> index 10b8399 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> - <nl> - / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> - <nl> - / / STANDARD - keyword Check <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> - <nl> - / / SPECIAL _ IMPORTS - keyword Tag <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> - <nl> - import com . puppycrawl . tools . * ; <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> - <nl> - public class InputCustomImportOrder _ OverlappingPatterns { <nl> - } <nl> - / * <nl> - test : testRulesOrder _ ThirdBeforeSame ( ) <nl> - configuration : <nl> - checkConfig . addAttribute ( " customImportOrderRules " , <nl> - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> - * /

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java 
 index 2f670cc . . 028867c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java 
 @ @ - 23 , 6 + 23 , 9 @ @ import static com . puppycrawl . tools . checkstyle . checks . sizes . FileLengthCheck . MSG _ K 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 34 , 6 + 37 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 public class FileLengthCheckTest 
 extends BaseCheckTestSupport { 
 @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " sizes " + File . separator + filename ) ; 
 + } 
 + 
 + @ Override 
 protected DefaultConfiguration createCheckerConfig ( 
 Configuration config ) { 
 DefaultConfiguration dc = new DefaultConfiguration ( " root " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java 
 index 9086bb7 . . 022e8fb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java 
 @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 import static com . puppycrawl . tools . checkstyle . checks . sizes . LineLengthCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 29 , 6 + 32 , 11 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class LineLengthCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " sizes " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java 
 index 92dd5c5 . . 3cf05f6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java 
 @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 import static com . puppycrawl . tools . checkstyle . checks . sizes . MethodLengthCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 30 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class MethodLengthCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " sizes " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckTest . java 
 index fc5df7b . . 1d79415 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckTest . java 
 @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 import static com . puppycrawl . tools . checkstyle . checks . sizes . OuterTypeNumberCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 30 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class OuterTypeNumberCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " sizes " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 index 0f9dccd . . fe8d099 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 import static com . puppycrawl . tools . checkstyle . checks . sizes . ParameterNumberCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 31 , 6 + 34 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class ParameterNumberCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " sizes " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifier . java 
 deleted file mode 100644 
 index 52f7ab1 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifier . java 
 + + + / dev / null 
 @ @ - 1 , 139 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - / * * 
 - * Test case for Modifier checks : 
 - * - order of modifiers 
 - * - use of ' public ' in interface definition 
 - * @ author lkuehne 
 - * / 
 - strictfp final class InputModifier / / illegal order of modifiers for class 
 - { 
 - 
 - / * * Illegal order of modifiers for variables * / 
 - static private boolean sModifierOrderVar = false ; 
 - 
 - / * * 
 - * Illegal order of modifiers for methods . Make sure that the 
 - * first and last modifier from the JLS sequence is used . 
 - * / 
 - strictfp private void doStuff ( ) 
 - { 
 - } 
 - 
 - / * * Single annotation without other modifiers * / 
 - @ MyAnnotation2 void someMethod ( ) 
 - { 
 - } 
 - 
 - / * * Illegal order of annotation - must come first * / 
 - private @ MyAnnotation2 void someMethod2 ( ) 
 - { 
 - } 
 - 
 - / * * Annotation in middle of other modifiers otherwise in correct order * / 
 - private @ MyAnnotation2 strictfp void someMethod3 ( ) 
 - { 
 - } 
 - 
 - / * * Correct order * / 
 - @ MyAnnotation2 private strictfp void someMethod4 ( ) 
 - { 
 - } 
 - 
 - / * * Annotation in middle of other modifiers otherwise in correct order * / 
 - @ MyAnnotation2 private static @ MyAnnotation4 strictfp void someMethod5 ( ) 
 - { 
 - } 
 - 
 - / * * holder for redundant ' public ' modifier check . * / 
 - public static interface InputRedundantPublicModifier / / violation 
 - { 
 - / * * redundant ' public ' modifier * / 
 - public void a ( ) ; / / violation 
 - 
 - / * * all OK * / 
 - void b ( ) ; 
 - 
 - / * * redundant abstract modifier * / 
 - abstract void c ( ) ; / / violation 
 - 
 - / * * redundant ' public ' modifier * / 
 - public float PI _ PUBLIC = ( float ) 3 . 14 ; / / violation 
 - 
 - / * * redundant ' abstract ' modifier ( field can not be abstract ) * / 
 - / / abstract float PI _ ABSTRACT = ( float ) 3 . 14 ; 
 - 
 - / * * redundant ' final ' modifier * / 
 - final float PI _ FINAL = ( float ) 3 . 14 ; / / violation 
 - 
 - / * * all OK * / 
 - float PI _ OK = ( float ) 3 . 14 ; 
 - } 
 - 
 - / * * redundant ' final ' modifier * / 
 - private final void method ( ) / / violation 
 - { 
 - } 
 - } 
 - 
 - / * * Holder for redundant ' final ' check . * / 
 - final class RedundantFinalClass 
 - { 
 - / * * redundant ' final ' modifier * / 
 - public final void finalMethod ( ) / / violation 
 - { 
 - } 
 - 
 - / * * OK * / 
 - public void method ( ) 
 - { 
 - } 
 - } 
 - 
 - / * * Holder for redundant modifiers of inner implementation * / 
 - abstract interface InnerImplementation / / violation 
 - { 
 - InnerImplementation inner = 
 - new InnerImplementation ( ) 
 - { 
 - / * * compiler requires ' public ' modifier * / 
 - public void method ( ) 
 - { 
 - } 
 - } ; 
 - 
 - void method ( ) ; 
 - } 
 - 
 - / * * Holder for redundant modifiers of annotation fields / variables * / 
 - @ interface Annotation 
 - { 
 - public String s1 = " " ; / / violation 
 - final String s2 = " " ; / / violation 
 - static String s3 = " " ; / / violation 
 - String s4 = " " ; 
 - public String blah ( ) ; / / violation 
 - abstract String blah2 ( ) ; / / violation 
 - } 
 - 
 - @ interface MyAnnotation2 { 
 - } 
 - 
 - @ interface MyAnnotation4 { 
 - } 
 - 
 - class SafeVarargsUsage { 
 - @ Deprecated 
 - @ SafeVarargs 
 - private final void foo ( int . . . k ) { } 
 - 
 - @ Deprecated 
 - @ SafeVarargs 
 - @ SuppressWarnings ( " " ) 
 - private final void foo1 ( Object . . . obj ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java 
 deleted file mode 100644 
 index 92ef3b8 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java 
 + + + / dev / null 
 @ @ - 1 , 27 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - class InputParameterNumberCheckBase 
 - { 
 - / / method with many parameters 
 - void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 - 
 - } 
 - 
 - / / method with many parameters 
 - void myMethod2 ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 - 
 - } 
 - } 
 - 
 - public class InputParameterNumberCheck extends InputParameterNumberCheckBase 
 - { 
 - @ Override 
 - void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 - 
 - } 
 - 
 - @ java . lang . Override 
 - void myMethod2 ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 - 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / OuterTypeNumberCheckInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / OuterTypeNumberCheckInput . java 
 deleted file mode 100644 
 index 3b505a6 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / OuterTypeNumberCheckInput . java 
 + + + / dev / null 
 @ @ - 1 , 10 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - / * * Contains empty inner class for OuterTypeNumberCheckTest * / 
 - public class OuterTypeNumberCheckInput { 
 - 
 - / * * Just empty inner class * / 
 - private class InnerClass { 
 - / / Do nothing 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputModifier . java 
 new file mode 100644 
 index 0000000 . . 39fbc84 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputModifier . java 
 @ @ - 0 , 0 + 1 , 133 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 + 
 + strictfp final class InputModifier / / illegal order of modifiers for class 
 + { 
 + 
 + / * * Illegal order of modifiers for variables * / 
 + static private boolean sModifierOrderVar = false ; 
 + 
 + / * * 
 + * Illegal order of modifiers for methods . Make sure that the 
 + * first and last modifier from the JLS sequence is used . 
 + * / 
 + strictfp private void doStuff ( ) 
 + { 
 + } 
 + 
 + / * * Single annotation without other modifiers * / 
 + @ MyAnnotation2 void someMethod ( ) 
 + { 
 + } 
 + 
 + / * * Illegal order of annotation - must come first * / 
 + private @ MyAnnotation2 void someMethod2 ( ) 
 + { 
 + } 
 + 
 + / * * Annotation in middle of other modifiers otherwise in correct order * / 
 + private @ MyAnnotation2 strictfp void someMethod3 ( ) 
 + { 
 + } 
 + 
 + / * * Correct order * / 
 + @ MyAnnotation2 private strictfp void someMethod4 ( ) 
 + { 
 + } 
 + 
 + / * * Annotation in middle of other modifiers otherwise in correct order * / 
 + @ MyAnnotation2 private static @ MyAnnotation4 strictfp void someMethod5 ( ) 
 + { 
 + } 
 + 
 + / * * holder for redundant ' public ' modifier check . * / 
 + public static interface InputRedundantPublicModifier / / violation 
 + { 
 + / * * redundant ' public ' modifier * / 
 + public void a ( ) ; / / violation 
 + 
 + / * * all OK * / 
 + void b ( ) ; 
 + 
 + / * * redundant abstract modifier * / 
 + abstract void c ( ) ; / / violation 
 + 
 + / * * redundant ' public ' modifier * / 
 + public float PI _ PUBLIC = ( float ) 3 . 14 ; / / violation 
 + 
 + / * * redundant ' abstract ' modifier ( field can not be abstract ) * / 
 + / / abstract float PI _ ABSTRACT = ( float ) 3 . 14 ; 
 + 
 + / * * redundant ' final ' modifier * / 
 + final float PI _ FINAL = ( float ) 3 . 14 ; / / violation 
 + 
 + / * * all OK * / 
 + float PI _ OK = ( float ) 3 . 14 ; 
 + } 
 + 
 + / * * redundant ' final ' modifier * / 
 + private final void method ( ) / / violation 
 + { 
 + } 
 + } 
 + 
 + / * * Holder for redundant ' final ' check . * / 
 + final class RedundantFinalClass 
 + { 
 + / * * redundant ' final ' modifier * / 
 + public final void finalMethod ( ) / / violation 
 + { 
 + } 
 + 
 + / * * OK * / 
 + public void method ( ) 
 + { 
 + } 
 + } 
 + 
 + / * * Holder for redundant modifiers of inner implementation * / 
 + abstract interface InnerImplementation / / violation 
 + { 
 + InnerImplementation inner = 
 + new InnerImplementation ( ) 
 + { 
 + / * * compiler requires ' public ' modifier * / 
 + public void method ( ) 
 + { 
 + } 
 + } ; 
 + 
 + void method ( ) ; 
 + } 
 + 
 + / * * Holder for redundant modifiers of annotation fields / variables * / 
 + @ interface Annotation 
 + { 
 + public String s1 = " " ; / / violation 
 + final String s2 = " " ; / / violation 
 + static String s3 = " " ; / / violation 
 + String s4 = " " ; 
 + public String blah ( ) ; / / violation 
 + abstract String blah2 ( ) ; / / violation 
 + } 
 + 
 + @ interface MyAnnotation2 { 
 + } 
 + 
 + @ interface MyAnnotation4 { 
 + } 
 + 
 + class SafeVarargsUsage { 
 + @ Deprecated 
 + @ SafeVarargs 
 + private final void foo ( int . . . k ) { } 
 + 
 + @ Deprecated 
 + @ SafeVarargs 
 + @ SuppressWarnings ( " " ) 
 + private final void foo1 ( Object . . . obj ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputParameterNumberCheck . java 
 new file mode 100644 
 index 0000000 . . d8c5230 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputParameterNumberCheck . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 + 
 + class InputParameterNumberCheckBase 
 + { 
 + / / method with many parameters 
 + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + 
 + / / method with many parameters 
 + void myMethod2 ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + } 
 + 
 + public class InputParameterNumberCheck extends InputParameterNumberCheckBase 
 + { 
 + @ Override 
 + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + 
 + @ java . lang . Override 
 + void myMethod2 ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputSimple . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputSimple . java 
 new file mode 100644 
 index 0000000 . . 972e428 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputSimple . java 
 @ @ - 0 , 0 + 1 , 225 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : Feb - 2001 
 + / / Ignore error 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 + import java . io . * ; 
 + / * * 
 + * Contains simple mistakes : 
 + * - Long lines 
 + * - Tabs 
 + * - Format of variables and parameters 
 + * - Order of modifiers 
 + * @ author Oliver Burn 
 + * * / 
 + final class InputSimple 
 + { 
 + / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + / / Contains a tab - > 	 < - 
 + / / Contains trailing whitespace - > 
 + 
 + / / Name format tests 
 + / / 
 + / * * Invalid format * * / 
 + public static final int badConstant = 2 ; 
 + / * * Valid format * * / 
 + public static final int MAX _ ROWS = 2 ; 
 + 
 + / * * Invalid format * * / 
 + private static int badStatic = 2 ; 
 + / * * Valid format * * / 
 + private static int sNumCreated = 0 ; 
 + 
 + / * * Invalid format * * / 
 + private int badMember = 2 ; 
 + / * * Valid format * * / 
 + private int mNumCreated1 = 0 ; 
 + / * * Valid format * * / 
 + protected int mNumCreated2 = 0 ; 
 + 
 + / * * commas are wrong * * / 
 + private int [ ] mInts = new int [ ] { 1 , 2 , 3 , 
 + 4 } ; 
 + 
 + / / 
 + / / Accessor tests 
 + / / 
 + / * * should be private * * / 
 + public static int sTest1 ; 
 + / * * should be private * * / 
 + protected static int sTest3 ; 
 + / * * should be private * * / 
 + static int sTest2 ; 
 + 
 + / * * should be private * * / 
 + int mTest1 ; 
 + / * * should be private * * / 
 + public int mTest2 ; 
 + 
 + / / 
 + / / Parameter name format tests 
 + / / 
 + 
 + / * * 
 + * @ return hack 
 + * @ param badFormat1 bad format 
 + * @ param badFormat2 bad format 
 + * @ param badFormat3 bad format 
 + * @ throws java . lang . Exception abc 
 + * * / 
 + int test1 ( int badFormat1 , int badFormat2 , 
 + final int badFormat3 ) 
 + throws java . lang . Exception 
 + { 
 + return 0 ; 
 + } 
 + 
 + / * * method that is 20 lines long * * / 
 + private void longMethod ( ) 
 + { 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + } 
 + 
 + / * * constructor that is 10 lines long * * / 
 + private InputSimple ( ) 
 + { 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + } 
 + 
 + / * * test local variables * / 
 + private void localVariables ( ) 
 + { 
 + / / normal decl 
 + int abc = 0 ; 
 + int ABC = 0 ; 
 + 
 + / / final decls 
 + final int cde = 0 ; 
 + final int CDE = 0 ; 
 + 
 + / / decl in for loop init statement 
 + for ( int k = 0 ; k < 1 ; k + + ) 
 + { 
 + String innerBlockVariable = " " ; 
 + } 
 + for ( int I = 0 ; I < 1 ; I + + ) 
 + { 
 + String InnerBlockVariable = " " ; 
 + } 
 + } 
 + 
 + / * * test method pattern * / 
 + void ALL _ UPPERCASE _ METHOD ( ) 
 + { 
 + } 
 + 
 + / * * test illegal constant * * / 
 + private static final int BAD _ _ NAME = 3 ; 
 + 
 + / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " 
 + / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char 
 + / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK 
 + 
 + / * * some lines to test the error column after tabs * / 
 + void errorColumnAfterTabs ( ) 
 + { 
 + / / with tab - width 8 all statements below start at the same column , 
 + / / with different combinations of ' ' and ' \ t ' before the statement 
 + int tab0 = 1 ; 
 + 	 int tab1 = 1 ; 
 + 	 int tab2 = 1 ; 
 + 	 	 int tab3 = 1 ; 
 + 	 	 int tab4 = 1 ; 
 + 	 int tab5 = 1 ; 
 + } 
 + 
 + / / FIXME : 
 + / * FIXME : a 
 + * FIXME : 
 + * TODO 
 + * / 
 + / * NOTHING * / 
 + / * YES * / / * FIXME : x * / / * YES ! ! * / 
 + 
 + / * * test long comments * * / 
 + void veryLong ( ) 
 + { 
 + / * 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + enough talk * / 
 + } 
 + 
 + / * * 
 + * @ see to lazy to document all args . Testing excessive # args 
 + * * / 
 + void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , 
 + int aArg6 , int aArg7 , int aArg8 , int aArg9 ) 
 + { 
 + } 
 + } 
 + 
 + / * * Test class for variable naming in for each clauses . * / 
 + class InputSimple2 
 + { 
 + / * * Some more Javadoc . * / 
 + public void doSomething ( ) 
 + { 
 + / / " O " should be named " o " 
 + for ( Object O : new java . util . ArrayList ( ) ) 
 + { 
 + 
 + } 
 + } 
 + } 
 + 
 + / * * Test enum for member naming check * / 
 + enum MyEnum1 
 + { 
 + / * * ABC constant * / 
 + ABC , 
 + 
 + / * * XYZ constant * / 
 + XYZ ; 
 + 
 + / * * Should be mSomeMemeber * / 
 + private int someMember ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckInput . java 
 new file mode 100644 
 index 0000000 . . a19e765 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheckInput . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 + 
 + / * * Contains empty inner class for OuterTypeNumberCheckTest * / 
 + public class OuterTypeNumberCheckInput { 
 + 
 + / * * Just empty inner class * / 
 + private class InnerClass { 
 + / / Do nothing 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 index 89a41fc . . 2a550da 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 createChecker ( checkConfig ) ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator 
 + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator 
 + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 new file mode 100644 
 index 0000000 . . 10b8399 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 + 
 + / / every import from javadoc package has comment in brackets indicating presence of keywords 
 + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 + 
 + / / STANDARD - keyword Check 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 + 
 + / / SPECIAL _ IMPORTS - keyword Tag 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 + 
 + import com . puppycrawl . tools . * ; 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 + 
 + public class InputCustomImportOrder _ OverlappingPatterns { 
 + } 
 + / * 
 + test : testRulesOrder _ ThirdBeforeSame ( ) 
 + configuration : 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 + * / 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 deleted file mode 100644 
 index 10b8399 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . imports ; 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 - 
 - / / every import from javadoc package has comment in brackets indicating presence of keywords 
 - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 - 
 - / / STANDARD - keyword Check 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 - 
 - / / SPECIAL _ IMPORTS - keyword Tag 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 - 
 - import com . puppycrawl . tools . * ; 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 - 
 - public class InputCustomImportOrder _ OverlappingPatterns { 
 - } 
 - / * 
 - test : testRulesOrder _ ThirdBeforeSame ( ) 
 - configuration : 
 - checkConfig . addAttribute ( " customImportOrderRules " , 
 - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 - * /
