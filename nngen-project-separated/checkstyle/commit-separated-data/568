BLEU SCORE: 0.04814971807094068

TEST MSG: Issue # 5060 : activate rules that cause no error , place comment to support suppression to eclipse validation properties
GENERATED MSG: Issue # 2600 : fix for correct downloading of eclipse compiler to cache

TEST DIFF (one line): diff - - git a / config / org . eclipse . jdt . core . prefs b / config / org . eclipse . jdt . core . prefs <nl> index 4f73743 . . 4edab5e 100644 <nl> - - - a / config / org . eclipse . jdt . core . prefs <nl> + + + b / config / org . eclipse . jdt . core . prefs <nl> @ @ - 53 , 23 + 53 , 29 @ @ org . eclipse . jdt . core . compiler . problem . unusedParameter = error <nl> org . eclipse . jdt . core . compiler . problem . unusedPrivateMember = error <nl> org . eclipse . jdt . core . compiler . problem . unusedTypeParameter = error <nl> org . eclipse . jdt . core . compiler . problem . varargsArgumentNeedCast = error <nl> - <nl> - org . eclipse . jdt . core . compiler . annotation . missingNonNullByDefaultAnnotation = ignore <nl> - org . eclipse . jdt . core . compiler . problem . autoboxing = ignore <nl> + org . eclipse . jdt . core . compiler . problem . specialParameterHidingField = error <nl> + org . eclipse . jdt . core . compiler . problem . typeParameterHiding = error <nl> + org . eclipse . jdt . core . compiler . problem . fieldHiding = error <nl> + # We can not efnforce this rule as we are library and we keep deprecated stuff for some time <nl> org . eclipse . jdt . core . compiler . problem . deprecation = ignore <nl> + # We can not use try - with - resources till we use cobertura for coverage <nl> org . eclipse . jdt . core . compiler . problem . explicitlyClosedAutoCloseable = ignore <nl> - org . eclipse . jdt . core . compiler . problem . fieldHiding = ignore <nl> + # we will not put all String values to resources , it does not make sense in our project <nl> org . eclipse . jdt . core . compiler . problem . nonExternalizedStringLiteral = ignore <nl> + # We use checkstyle rule , special cases could be suppressed by configs out of code <nl> + org . eclipse . jdt . core . compiler . problem . unusedExceptionParameter = ignore <nl> + <nl> + # <nl> + # All below is disabled till - https : / / github . com / checkstyle / checkstyle / issues / 5060 <nl> + # <nl> + org . eclipse . jdt . core . compiler . annotation . missingNonNullByDefaultAnnotation = ignore <nl> + org . eclipse . jdt . core . compiler . problem . autoboxing = ignore <nl> org . eclipse . jdt . core . compiler . problem . potentiallyUnclosedCloseable = ignore <nl> org . eclipse . jdt . core . compiler . problem . potentialNullReference = ignore <nl> org . eclipse . jdt . core . compiler . problem . rawTypeReference = ignore <nl> org . eclipse . jdt . core . compiler . problem . reportMethodCanBePotentiallyStatic = ignore <nl> - org . eclipse . jdt . core . compiler . problem . specialParameterHidingField = ignore <nl> org . eclipse . jdt . core . compiler . problem . syntheticAccessEmulation = ignore <nl> - org . eclipse . jdt . core . compiler . problem . typeParameterHiding = ignore <nl> org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = ignore <nl> org . eclipse . jdt . core . compiler . problem . unnecessaryElse = ignore <nl> org . eclipse . jdt . core . compiler . problem . unnecessaryTypeCheck = ignore <nl> org . eclipse . jdt . core . compiler . problem . unqualifiedFieldAccess = ignore <nl> - # We use checkstyle rule , special cases could be suppressed by configs out of code <nl> - org . eclipse . jdt . core . compiler . problem . unusedExceptionParameter = ignore
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 9cb47ae . . 1e892d0 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1990 , 7 + 1990 , 7 @ @ <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . checks . regexp . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 93 < / mutationThreshold > <nl> + < mutationThreshold > 100 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java <nl> index 52f9db2 . . ab7f1b0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java <nl> @ @ - 228 , 7 + 228 , 7 @ @ public class RegexpCheck extends AbstractCheck { <nl> * @ return true is we can continue <nl> * / <nl> private boolean canContinueValidation ( boolean ignore ) { <nl> - return errorCount < errorLimit <nl> + return errorCount < = errorLimit - 1 <nl> & & ( ignore | | illegalPattern | | checkForDuplicates ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> index 7a26e28 . . 550d2f8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> @ @ - 48 , 7 + 48 , 6 @ @ public class RegexpMultilineCheck extends AbstractFileSetCheck { <nl> <nl> @ Override <nl> public void beginProcessing ( String charset ) { <nl> - super . beginProcessing ( charset ) ; <nl> final DetectorOptions options = DetectorOptions . newBuilder ( ) <nl> . reporter ( this ) <nl> . compileFlags ( Pattern . MULTILINE ) <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java <nl> index 31b943d . . 5d43796 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java <nl> @ @ - 46 , 7 + 46 , 6 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { <nl> <nl> @ Override <nl> public void beginProcessing ( String charset ) { <nl> - super . beginProcessing ( charset ) ; <nl> final DetectorOptions options = DetectorOptions . newBuilder ( ) <nl> . reporter ( this ) <nl> . compileFlags ( 0 ) <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java <nl> index 4257163 . . be551fe 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java <nl> @ @ - 108 , 10 + 108 , 7 @ @ class SinglelineDetector { <nl> / / So we need to use ( endCol - 1 ) here . <nl> if ( options . getSuppressor ( ) <nl> . shouldSuppress ( lineNo , startCol , lineNo , endCol - 1 ) ) { <nl> - if ( endCol < line . length ( ) ) { <nl> - / / check if the expression is on the rest of the line <nl> - checkLine ( lineNo , line , matcher , endCol ) ; <nl> - } <nl> + checkLine ( lineNo , line , matcher , endCol ) ; <nl> } <nl> else { <nl> currentMatches + + ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TestLoggingReporter . java b / src / test / java / com / puppycrawl / tools / checkstyle / TestLoggingReporter . java <nl> new file mode 100644 <nl> index 0000000 . . 9e9a596 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TestLoggingReporter . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . AbstractViolationReporter ; <nl> + <nl> + / * * <nl> + * @ noinspection ClassOnlyUsedInOnePackage <nl> + * / <nl> + public final class TestLoggingReporter extends AbstractViolationReporter { <nl> + private int logCount ; <nl> + <nl> + @ Override <nl> + public void log ( int line , String key , Object . . . args ) { <nl> + logCount + + ; <nl> + } <nl> + <nl> + @ Override <nl> + public void log ( int line , int col , String key , Object . . . args ) { <nl> + logCount + + ; <nl> + } <nl> + <nl> + public int getLogCount ( ) { <nl> + return logCount ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java <nl> index db98eaa . . e5e0fb1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java <nl> @ @ - 134 , 13 + 134 , 12 @ @ public class RegexpCheckTest extends AbstractModuleTestSupport { <nl> createModuleConfig ( RegexpCheck . class ) ; <nl> checkConfig . addAttribute ( " format " , illegal ) ; <nl> checkConfig . addAttribute ( " illegalPattern " , " true " ) ; <nl> - checkConfig . addAttribute ( " errorLimit " , " 3 " ) ; <nl> + checkConfig . addAttribute ( " errorLimit " , " 2 " ) ; <nl> final String error = " The error limit has been exceeded , " <nl> + " the check is aborting , there may be more unreported errors . " ; <nl> final String [ ] expected = { <nl> " 7 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> - " 8 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> - " 9 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , error + illegal ) , <nl> + " 8 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , error + illegal ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> @ @ - 349 , 4 + 348 , 19 @ @ public class RegexpCheckTest extends AbstractModuleTestSupport { <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getPath ( " InputRegexpStartingWithEmptyLine . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testIgnoreCommentsCppStyleWithIllegalPatternFalse ( ) throws Exception { <nl> + / / See if the comment is removed properly <nl> + final String illegal = " don ' t use trailing comments " ; <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( RegexpCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , illegal ) ; <nl> + checkConfig . addAttribute ( " illegalPattern " , " false " ) ; <nl> + checkConfig . addAttribute ( " ignoreComments " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 0 : " + getCheckMessage ( MSG _ REQUIRED _ REGEXP , illegal ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> index c0f0ade . . 395dff0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . io . File ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . nio . file . Files ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> @ @ - 35 , 6 + 36 , 8 @ @ import org . junit . rules . TemporaryFolder ; <nl> <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . TestLoggingReporter ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class RegexpMultilineCheckTest extends AbstractModuleTestSupport { <nl> @ @ - 126 , 6 + 129 , 47 @ @ public class RegexpMultilineCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testMaximum ( ) throws Exception { <nl> + final String illegal = " \ \ r " ; <nl> + checkConfig . addAttribute ( " format " , illegal ) ; <nl> + checkConfig . addAttribute ( " maximum " , " 1 " ) ; <nl> + final String [ ] expected = { <nl> + " 3 : " + getCheckMessage ( MSG _ REGEXP _ EXCEEDED , illegal ) , <nl> + } ; <nl> + <nl> + final File file = temporaryFolder . newFile ( ) ; <nl> + Files . write ( file . toPath ( ) , <nl> + " first line \ r \ n second line \ n \ r third line " . getBytes ( StandardCharsets . UTF _ 8 ) ) ; <nl> + <nl> + verify ( checkConfig , file . getPath ( ) , expected ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Done as a UT cause new instance of Detector is created each time ' verify ' executed . <nl> + * @ throws Exception some Exception <nl> + * / <nl> + @ Test <nl> + public void testStateIsBeingReset ( ) throws Exception { <nl> + final TestLoggingReporter reporter = new TestLoggingReporter ( ) ; <nl> + final DetectorOptions detectorOptions = DetectorOptions . newBuilder ( ) <nl> + . reporter ( reporter ) <nl> + . format ( " \ \ r " ) <nl> + . maximum ( 1 ) <nl> + . build ( ) ; <nl> + <nl> + final MultilineDetector detector = <nl> + new MultilineDetector ( detectorOptions ) ; <nl> + final File file = temporaryFolder . newFile ( ) ; <nl> + Files . write ( file . toPath ( ) , <nl> + " first line \ r \ n second line \ n \ r third line " . getBytes ( StandardCharsets . UTF _ 8 ) ) ; <nl> + <nl> + detector . processLines ( new FileText ( file , StandardCharsets . UTF _ 8 . name ( ) ) ) ; <nl> + detector . processLines ( new FileText ( file , StandardCharsets . UTF _ 8 . name ( ) ) ) ; <nl> + Assert . assertEquals ( " Logged unexpected amount of issues " , <nl> + 2 , reporter . getLogCount ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testDefaultConfiguration ( ) throws Exception { <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getPath ( " InputRegexpMultilineSemantic . java " ) , expected ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java <nl> index fcff45f . . a022383 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java <nl> @ @ - 22 , 14 + 22 , 21 @ @ package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> import static com . puppycrawl . tools . checkstyle . checks . regexp . SinglelineDetector . MSG _ REGEXP _ EXCEEDED ; <nl> import static com . puppycrawl . tools . checkstyle . checks . regexp . SinglelineDetector . MSG _ REGEXP _ MINIMUM ; <nl> <nl> + import java . io . File ; <nl> + import java . nio . charset . StandardCharsets ; <nl> + <nl> + import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . TestLoggingReporter ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class RegexpSinglelineCheckTest extends AbstractModuleTestSupport { <nl> + private static final String [ ] EMPTY = { } ; <nl> private DefaultConfiguration checkConfig ; <nl> <nl> @ Before <nl> @ @ - 111 , 4 + 118 , 36 @ @ public class RegexpSinglelineCheckTest extends AbstractModuleTestSupport { <nl> <nl> verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testMaximum ( ) throws Exception { <nl> + final String illegal = " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ; <nl> + checkConfig . addAttribute ( " format " , illegal ) ; <nl> + checkConfig . addAttribute ( " maximum " , " 1 " ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , EMPTY ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Done as a UT cause new instance of Detector is created each time ' verify ' executed . <nl> + * @ throws Exception some Exception <nl> + * / <nl> + @ Test <nl> + public void testStateIsBeingReset ( ) throws Exception { <nl> + final String illegal = " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ; <nl> + final TestLoggingReporter reporter = new TestLoggingReporter ( ) ; <nl> + final DetectorOptions detectorOptions = DetectorOptions . newBuilder ( ) <nl> + . reporter ( reporter ) <nl> + . format ( illegal ) <nl> + . maximum ( 1 ) <nl> + . build ( ) ; <nl> + <nl> + final SinglelineDetector detector = <nl> + new SinglelineDetector ( detectorOptions ) ; <nl> + final File file = new File ( getPath ( " InputRegexpSinglelineSemantic . java " ) ) ; <nl> + <nl> + detector . processLines ( new FileText ( file , StandardCharsets . UTF _ 8 . name ( ) ) ) ; <nl> + detector . processLines ( new FileText ( file , StandardCharsets . UTF _ 8 . name ( ) ) ) ; <nl> + Assert . assertEquals ( " Logged unexpected amount of issues " , <nl> + 0 , reporter . getLogCount ( ) ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / config / org . eclipse . jdt . core . prefs b / config / org . eclipse . jdt . core . prefs 
 index 4f73743 . . 4edab5e 100644 
 - - - a / config / org . eclipse . jdt . core . prefs 
 + + + b / config / org . eclipse . jdt . core . prefs 
 @ @ - 53 , 23 + 53 , 29 @ @ org . eclipse . jdt . core . compiler . problem . unusedParameter = error 
 org . eclipse . jdt . core . compiler . problem . unusedPrivateMember = error 
 org . eclipse . jdt . core . compiler . problem . unusedTypeParameter = error 
 org . eclipse . jdt . core . compiler . problem . varargsArgumentNeedCast = error 
 - 
 - org . eclipse . jdt . core . compiler . annotation . missingNonNullByDefaultAnnotation = ignore 
 - org . eclipse . jdt . core . compiler . problem . autoboxing = ignore 
 + org . eclipse . jdt . core . compiler . problem . specialParameterHidingField = error 
 + org . eclipse . jdt . core . compiler . problem . typeParameterHiding = error 
 + org . eclipse . jdt . core . compiler . problem . fieldHiding = error 
 + # We can not efnforce this rule as we are library and we keep deprecated stuff for some time 
 org . eclipse . jdt . core . compiler . problem . deprecation = ignore 
 + # We can not use try - with - resources till we use cobertura for coverage 
 org . eclipse . jdt . core . compiler . problem . explicitlyClosedAutoCloseable = ignore 
 - org . eclipse . jdt . core . compiler . problem . fieldHiding = ignore 
 + # we will not put all String values to resources , it does not make sense in our project 
 org . eclipse . jdt . core . compiler . problem . nonExternalizedStringLiteral = ignore 
 + # We use checkstyle rule , special cases could be suppressed by configs out of code 
 + org . eclipse . jdt . core . compiler . problem . unusedExceptionParameter = ignore 
 + 
 + # 
 + # All below is disabled till - https : / / github . com / checkstyle / checkstyle / issues / 5060 
 + # 
 + org . eclipse . jdt . core . compiler . annotation . missingNonNullByDefaultAnnotation = ignore 
 + org . eclipse . jdt . core . compiler . problem . autoboxing = ignore 
 org . eclipse . jdt . core . compiler . problem . potentiallyUnclosedCloseable = ignore 
 org . eclipse . jdt . core . compiler . problem . potentialNullReference = ignore 
 org . eclipse . jdt . core . compiler . problem . rawTypeReference = ignore 
 org . eclipse . jdt . core . compiler . problem . reportMethodCanBePotentiallyStatic = ignore 
 - org . eclipse . jdt . core . compiler . problem . specialParameterHidingField = ignore 
 org . eclipse . jdt . core . compiler . problem . syntheticAccessEmulation = ignore 
 - org . eclipse . jdt . core . compiler . problem . typeParameterHiding = ignore 
 org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = ignore 
 org . eclipse . jdt . core . compiler . problem . unnecessaryElse = ignore 
 org . eclipse . jdt . core . compiler . problem . unnecessaryTypeCheck = ignore 
 org . eclipse . jdt . core . compiler . problem . unqualifiedFieldAccess = ignore 
 - # We use checkstyle rule , special cases could be suppressed by configs out of code 
 - org . eclipse . jdt . core . compiler . problem . unusedExceptionParameter = ignore

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 9cb47ae . . 1e892d0 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1990 , 7 + 1990 , 7 @ @ 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . checks . regexp . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 93 < / mutationThreshold > 
 + < mutationThreshold > 100 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java 
 index 52f9db2 . . ab7f1b0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java 
 @ @ - 228 , 7 + 228 , 7 @ @ public class RegexpCheck extends AbstractCheck { 
 * @ return true is we can continue 
 * / 
 private boolean canContinueValidation ( boolean ignore ) { 
 - return errorCount < errorLimit 
 + return errorCount < = errorLimit - 1 
 & & ( ignore | | illegalPattern | | checkForDuplicates ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 index 7a26e28 . . 550d2f8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 @ @ - 48 , 7 + 48 , 6 @ @ public class RegexpMultilineCheck extends AbstractFileSetCheck { 
 
 @ Override 
 public void beginProcessing ( String charset ) { 
 - super . beginProcessing ( charset ) ; 
 final DetectorOptions options = DetectorOptions . newBuilder ( ) 
 . reporter ( this ) 
 . compileFlags ( Pattern . MULTILINE ) 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java 
 index 31b943d . . 5d43796 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java 
 @ @ - 46 , 7 + 46 , 6 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { 
 
 @ Override 
 public void beginProcessing ( String charset ) { 
 - super . beginProcessing ( charset ) ; 
 final DetectorOptions options = DetectorOptions . newBuilder ( ) 
 . reporter ( this ) 
 . compileFlags ( 0 ) 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java 
 index 4257163 . . be551fe 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java 
 @ @ - 108 , 10 + 108 , 7 @ @ class SinglelineDetector { 
 / / So we need to use ( endCol - 1 ) here . 
 if ( options . getSuppressor ( ) 
 . shouldSuppress ( lineNo , startCol , lineNo , endCol - 1 ) ) { 
 - if ( endCol < line . length ( ) ) { 
 - / / check if the expression is on the rest of the line 
 - checkLine ( lineNo , line , matcher , endCol ) ; 
 - } 
 + checkLine ( lineNo , line , matcher , endCol ) ; 
 } 
 else { 
 currentMatches + + ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TestLoggingReporter . java b / src / test / java / com / puppycrawl / tools / checkstyle / TestLoggingReporter . java 
 new file mode 100644 
 index 0000000 . . 9e9a596 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TestLoggingReporter . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . AbstractViolationReporter ; 
 + 
 + / * * 
 + * @ noinspection ClassOnlyUsedInOnePackage 
 + * / 
 + public final class TestLoggingReporter extends AbstractViolationReporter { 
 + private int logCount ; 
 + 
 + @ Override 
 + public void log ( int line , String key , Object . . . args ) { 
 + logCount + + ; 
 + } 
 + 
 + @ Override 
 + public void log ( int line , int col , String key , Object . . . args ) { 
 + logCount + + ; 
 + } 
 + 
 + public int getLogCount ( ) { 
 + return logCount ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java 
 index db98eaa . . e5e0fb1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java 
 @ @ - 134 , 13 + 134 , 12 @ @ public class RegexpCheckTest extends AbstractModuleTestSupport { 
 createModuleConfig ( RegexpCheck . class ) ; 
 checkConfig . addAttribute ( " format " , illegal ) ; 
 checkConfig . addAttribute ( " illegalPattern " , " true " ) ; 
 - checkConfig . addAttribute ( " errorLimit " , " 3 " ) ; 
 + checkConfig . addAttribute ( " errorLimit " , " 2 " ) ; 
 final String error = " The error limit has been exceeded , " 
 + " the check is aborting , there may be more unreported errors . " ; 
 final String [ ] expected = { 
 " 7 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 - " 8 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 - " 9 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , error + illegal ) , 
 + " 8 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , error + illegal ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 @ @ - 349 , 4 + 348 , 19 @ @ public class RegexpCheckTest extends AbstractModuleTestSupport { 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getPath ( " InputRegexpStartingWithEmptyLine . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testIgnoreCommentsCppStyleWithIllegalPatternFalse ( ) throws Exception { 
 + / / See if the comment is removed properly 
 + final String illegal = " don ' t use trailing comments " ; 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( RegexpCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , illegal ) ; 
 + checkConfig . addAttribute ( " illegalPattern " , " false " ) ; 
 + checkConfig . addAttribute ( " ignoreComments " , " true " ) ; 
 + final String [ ] expected = { 
 + " 0 : " + getCheckMessage ( MSG _ REQUIRED _ REGEXP , illegal ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 index c0f0ade . . 395dff0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . io . File ; 
 import java . nio . charset . StandardCharsets ; 
 import java . nio . file . Files ; 
 
 + import org . junit . Assert ; 
 import org . junit . Before ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 @ @ - 35 , 6 + 36 , 8 @ @ import org . junit . rules . TemporaryFolder ; 
 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . TestLoggingReporter ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class RegexpMultilineCheckTest extends AbstractModuleTestSupport { 
 @ @ - 126 , 6 + 129 , 47 @ @ public class RegexpMultilineCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testMaximum ( ) throws Exception { 
 + final String illegal = " \ \ r " ; 
 + checkConfig . addAttribute ( " format " , illegal ) ; 
 + checkConfig . addAttribute ( " maximum " , " 1 " ) ; 
 + final String [ ] expected = { 
 + " 3 : " + getCheckMessage ( MSG _ REGEXP _ EXCEEDED , illegal ) , 
 + } ; 
 + 
 + final File file = temporaryFolder . newFile ( ) ; 
 + Files . write ( file . toPath ( ) , 
 + " first line \ r \ n second line \ n \ r third line " . getBytes ( StandardCharsets . UTF _ 8 ) ) ; 
 + 
 + verify ( checkConfig , file . getPath ( ) , expected ) ; 
 + } 
 + 
 + / * * 
 + * Done as a UT cause new instance of Detector is created each time ' verify ' executed . 
 + * @ throws Exception some Exception 
 + * / 
 + @ Test 
 + public void testStateIsBeingReset ( ) throws Exception { 
 + final TestLoggingReporter reporter = new TestLoggingReporter ( ) ; 
 + final DetectorOptions detectorOptions = DetectorOptions . newBuilder ( ) 
 + . reporter ( reporter ) 
 + . format ( " \ \ r " ) 
 + . maximum ( 1 ) 
 + . build ( ) ; 
 + 
 + final MultilineDetector detector = 
 + new MultilineDetector ( detectorOptions ) ; 
 + final File file = temporaryFolder . newFile ( ) ; 
 + Files . write ( file . toPath ( ) , 
 + " first line \ r \ n second line \ n \ r third line " . getBytes ( StandardCharsets . UTF _ 8 ) ) ; 
 + 
 + detector . processLines ( new FileText ( file , StandardCharsets . UTF _ 8 . name ( ) ) ) ; 
 + detector . processLines ( new FileText ( file , StandardCharsets . UTF _ 8 . name ( ) ) ) ; 
 + Assert . assertEquals ( " Logged unexpected amount of issues " , 
 + 2 , reporter . getLogCount ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testDefaultConfiguration ( ) throws Exception { 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getPath ( " InputRegexpMultilineSemantic . java " ) , expected ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java 
 index fcff45f . . a022383 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java 
 @ @ - 22 , 14 + 22 , 21 @ @ package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 import static com . puppycrawl . tools . checkstyle . checks . regexp . SinglelineDetector . MSG _ REGEXP _ EXCEEDED ; 
 import static com . puppycrawl . tools . checkstyle . checks . regexp . SinglelineDetector . MSG _ REGEXP _ MINIMUM ; 
 
 + import java . io . File ; 
 + import java . nio . charset . StandardCharsets ; 
 + 
 + import org . junit . Assert ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . TestLoggingReporter ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class RegexpSinglelineCheckTest extends AbstractModuleTestSupport { 
 + private static final String [ ] EMPTY = { } ; 
 private DefaultConfiguration checkConfig ; 
 
 @ Before 
 @ @ - 111 , 4 + 118 , 36 @ @ public class RegexpSinglelineCheckTest extends AbstractModuleTestSupport { 
 
 verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testMaximum ( ) throws Exception { 
 + final String illegal = " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ; 
 + checkConfig . addAttribute ( " format " , illegal ) ; 
 + checkConfig . addAttribute ( " maximum " , " 1 " ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , EMPTY ) ; 
 + } 
 + 
 + / * * 
 + * Done as a UT cause new instance of Detector is created each time ' verify ' executed . 
 + * @ throws Exception some Exception 
 + * / 
 + @ Test 
 + public void testStateIsBeingReset ( ) throws Exception { 
 + final String illegal = " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ; 
 + final TestLoggingReporter reporter = new TestLoggingReporter ( ) ; 
 + final DetectorOptions detectorOptions = DetectorOptions . newBuilder ( ) 
 + . reporter ( reporter ) 
 + . format ( illegal ) 
 + . maximum ( 1 ) 
 + . build ( ) ; 
 + 
 + final SinglelineDetector detector = 
 + new SinglelineDetector ( detectorOptions ) ; 
 + final File file = new File ( getPath ( " InputRegexpSinglelineSemantic . java " ) ) ; 
 + 
 + detector . processLines ( new FileText ( file , StandardCharsets . UTF _ 8 . name ( ) ) ) ; 
 + detector . processLines ( new FileText ( file , StandardCharsets . UTF _ 8 . name ( ) ) ) ; 
 + Assert . assertEquals ( " Logged unexpected amount of issues " , 
 + 0 , reporter . getLogCount ( ) ) ; 
 + } 
 }
