BLEU SCORE: 0.043899270742871276

TEST MSG: config : print changed files if sjippable CI is skipped build
GENERATED MSG: config : force shippable to build only master , as all other branches should pass by PRs .

TEST DIFF (one line): diff - - git a / shippable . yml b / shippable . yml <nl> index 15243fb . . 63c28d0 100644 <nl> - - - a / shippable . yml <nl> + + + b / shippable . yml <nl> @ @ - 92 , 5 + 92 , 7 @ @ build : <nl> echo " Survived items found in reports , build will be failed " <nl> exit 1 <nl> fi <nl> - <nl> + else <nl> + echo " Build is skipped , changed files : " <nl> + git diff - - name - only HEAD HEAD ~ 1 <nl> fi
NEAREST DIFF (one line): diff - - git a / config / pmd - main . xml b / config / pmd - main . xml <nl> index 82fd133 . . 776cade 100644 <nl> - - - a / config / pmd - main . xml <nl> + + + b / config / pmd - main . xml <nl> @ @ - 10 , 4 + 10 , 18 @ @ <nl> < exclude - pattern > . * / src / it / . * < / exclude - pattern > <nl> < exclude - pattern > . * / src / test / . * < / exclude - pattern > <nl> < rule ref = " config / pmd . xml " / > <nl> + <nl> + < rule ref = " rulesets / java / unusedcode . xml / UnusedPrivateMethod " > <nl> + < properties > <nl> + < ! - - generates false - positives on private methods called within a file - - > <nl> + < property name = " violationSuppressXPath " <nl> + value = " / / MethodDeclaration [ @ Name = ' countTokens ' and . . / . . / . . [ @ Image = ' DescendantTokenCheck ' ] ] " / > <nl> + < ! - - generates false - positives on private methods called within a file - - > <nl> + < property name = " violationSuppressXPath " <nl> + value = " / / MethodDeclaration [ @ Name = ' getHashCodeBasedOnObjectContent ' and . . / . . / . . [ @ Image = ' PropertyCacheFile ' ] ] " / > <nl> + < ! - - generates false - positives on private methods called within a file - - > <nl> + < property name = " violationSuppressXPath " <nl> + value = " / / ClassOrInterfaceDeclaration [ @ Image = ' DescendantTokenCheck ' ] / / MethodDeclarator [ @ Image = ' countTokens ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> < / ruleset > <nl> diff - - git a / config / pmd - test . xml b / config / pmd - test . xml <nl> index 3d32172 . . cac5498 100644 <nl> - - - a / config / pmd - test . xml <nl> + + + b / config / pmd - test . xml <nl> @ @ - 8 , 6 + 8 , 7 @ @ <nl> PMD ruleset for Checkstyle tests <nl> < / description > <nl> < exclude - pattern > . * / src / main / . * < / exclude - pattern > <nl> + <nl> < rule ref = " config / pmd . xml " > <nl> < ! - - We do throws Exception , as any exception that in not caught in test should fail a test that is expected behavior and we like it as it follow fail - fast and helps to avoid extra catch blocks - - > <nl> < exclude name = " SignatureDeclareThrowsException " / > <nl> @ @ - 31 , 40 + 32 , 38 @ @ <nl> < exclude name = " ExcessivePublicCount " / > <nl> < ! - - we have too much UTs for each main class , it is better to keep all tests in one file to ease navigation and search for test - - > <nl> < exclude name = " ExcessiveClassLength " / > <nl> - < ! - - tentative - - > <nl> + < ! - - we want to keep it all in one place - - > <nl> + < exclude name = " NcssTypeCount " / > <nl> + < ! - - we want to avoid wide throws signature , it is just test - - > <nl> + < exclude name = " AvoidCatchingGenericException " / > <nl> + < ! - - we do not want invest extra time to make logic ideal in test method , may be later . . . - - > <nl> + < exclude name = " NPathComplexity " / > <nl> + < ! - - conflicts with checkstyle rule - - > <nl> < exclude name = " JUnitUseExpected " / > <nl> < ! - - tentative - - > <nl> - < exclude name = " UncommentedEmptyConstructor " / > <nl> - < ! - - tentative - - > <nl> - < exclude name = " ShortClassName " / > <nl> - < ! - - tentative - - > <nl> - < exclude name = " DefaultPackage " / > <nl> - < ! - - tentative - - > <nl> < exclude name = " AccessorClassGeneration " / > <nl> < ! - - tentative - - > <nl> - < exclude name = " AddEmptyString " / > <nl> - < ! - - tentative - - > <nl> - < exclude name = " ExcessiveMethodLength " / > <nl> - < ! - - tentative - - > <nl> - < exclude name = " NPathComplexity " / > <nl> - < ! - - tentative - - > <nl> - < exclude name = " NcssTypeCount " / > <nl> - < ! - - tentative - - > <nl> - < exclude name = " JUnit4TestShouldUseBeforeAnnotation " / > <nl> - < ! - - tentative - - > <nl> - < exclude name = " ShortMethodName " / > <nl> - < ! - - tentative - - > <nl> - < exclude name = " AvoidCatchingGenericException " / > <nl> - < ! - - tentative - - > <nl> < exclude name = " NonThreadSafeSingleton " / > <nl> - < ! - - tentative - - > <nl> - < exclude name = " UseVarargs " / > <nl> < / rule > <nl> <nl> < rule ref = " rulesets / java / codesize . xml / NcssMethodCount " > <nl> < properties > <nl> < ! - - ' testTokenNumbering ' method is simple but long as it recheck each token one by one - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' GeneratedJavaTokenTypesTest ' ] / / MethodDeclarator [ @ Image = ' testTokenNumbering ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' ParseTreeBuilder ' ] " / > <nl> + < ! - - ' testNospaceWithComplexInput ' it is intended to keep all in one method . - - > <nl> + < property name = " violationSuppressXPath " value = " <nl> + / / ClassOrInterfaceDeclaration [ @ Image = ' GeneratedJavaTokenTypesTest ' ] / / MethodDeclarator [ @ Image = ' testTokenNumbering ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' ParenPadCheckTest ' ] / / MethodDeclarator [ @ Image = ' testNospaceWithComplexInput ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> + <nl> + < rule ref = " rulesets / java / codesize . xml / ExcessiveMethodLength " > <nl> + < properties > <nl> + < ! - - ' testTokenNumbering ' method is simple but long as it recheck each token one by one - - > <nl> + < ! - - ' testNospaceWithComplexInput ' it is intended to keep all in one method . - - > <nl> + < property name = " violationSuppressXPath " value = " <nl> + / / ClassOrInterfaceDeclaration [ @ Image = ' GeneratedJavaTokenTypesTest ' ] / / MethodDeclarator [ @ Image = ' testTokenNumbering ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' ParenPadCheckTest ' ] / / MethodDeclarator [ @ Image = ' testNospaceWithComplexInput ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' ParenPadTest ' ] / / MethodDeclarator [ @ Image = ' testMethodParen ' ] " / > <nl> < / properties > <nl> < / rule > <nl> <nl> @ @ - 80 , 9 + 79 , 40 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> + < rule ref = " rulesets / java / migrating . xml / JUnit4TestShouldUseBeforeAnnotation " > <nl> + < properties > <nl> + < ! - - false positive - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' CommitValidationTest ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> < rule ref = " rulesets / java / junit . xml / JUnitTestContainsTooManyAsserts " > <nl> < properties > <nl> < property name = " maximumAsserts " value = " 11 " / > <nl> < / properties > <nl> < / rule > <nl> + <nl> + < rule ref = " rulesets / java / naming . xml / ShortMethodName " > <nl> + < properties > <nl> + < ! - - this inherited from GeneratedJavaLexer - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] <nl> + / / ClassOrInterfaceDeclaration [ @ Image = ' AssertGeneratedJavaLexer ' ] / / MethodDeclarator [ @ Image = ' LA ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> + <nl> + < rule ref = " rulesets / java / unusedcode . xml / UnusedPrivateMethod " > <nl> + < properties > <nl> + < ! - - generates false - positives on private methods called within a file - - > <nl> + < property name = " violationSuppressXPath " <nl> + value = " / / ClassOrInterfaceDeclaration [ @ Image = ' IndentationCheckTest ' ] / / MethodDeclarator [ @ Image = ' verifyWarns ' ] " / > <nl> + < ! - - generates false - positives on private methods called within a file - - > <nl> + < property name = " violationSuppressXPath " <nl> + value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWarningsFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > <nl> + < ! - - generates false - positives on private methods called within a file - - > <nl> + < property name = " violationSuppressXPath " <nl> + value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWithNearbyCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > <nl> + < ! - - generates false - positives on private methods called within a file - - > <nl> + < property name = " violationSuppressXPath " <nl> + value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> < / ruleset > <nl> diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 934ef28 . . 3d1af83 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 315 , 15 + 315 , 5 @ @ <nl> < rule ref = " rulesets / java / typeresolution . xml " / > <nl> < rule ref = " rulesets / java / unnecessary . xml " / > <nl> < rule ref = " rulesets / java / unusedcode . xml " / > <nl> - < rule ref = " rulesets / java / unusedcode . xml / UnusedPrivateMethod " > <nl> - < properties > <nl> - < ! - - generates false - positives on private methods called within a file - - > <nl> - < property name = " violationSuppressXPath " <nl> - value = " / / MethodDeclaration [ @ Name = ' countTokens ' and . . / . . / . . [ @ Image = ' DescendantTokenCheck ' ] ] " / > <nl> - < ! - - generates false - positives on private methods called within a file - - > <nl> - < property name = " violationSuppressXPath " <nl> - value = " / / MethodDeclaration [ @ Name = ' getHashCodeBasedOnObjectContent ' and . . / . . / . . [ @ Image = ' PropertyCacheFile ' ] ] " / > <nl> - < / properties > <nl> - < / rule > <nl> <nl> < / ruleset > <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule713atclauses / NonEmptyAtclauseDescriptionTest . java b / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule713atclauses / NonEmptyAtclauseDescriptionTest . java <nl> index 3f6a1f3 . . 7b8cc4d 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule713atclauses / NonEmptyAtclauseDescriptionTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule713atclauses / NonEmptyAtclauseDescriptionTest . java <nl> @ @ - 90 , 7 + 90 , 7 @ @ public class NonEmptyAtclauseDescriptionTest extends BaseCheckTestSupport { <nl> * @ param expected an array with expected messages . <nl> * @ return Integer array with numbers of lines with violations . <nl> * / <nl> - private static Integer [ ] getLineNumbersFromExpected ( String [ ] expected ) { <nl> + private static Integer [ ] getLineNumbersFromExpected ( String . . . expected ) { <nl> final Integer [ ] result = new Integer [ expected . length ] ; <nl> for ( int i = 0 ; i < expected . length ; i + + ) { <nl> result [ i ] = Integer . valueOf ( expected [ i ] . substring ( 0 , expected [ i ] . indexOf ( ' : ' ) ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 85a07b1 . . 86cc8fe 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 1797 , 8 + 1797 , 8 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> private final IndentComment [ ] comments ; <nl> private int position ; <nl> <nl> - private IndentAudit ( IndentComment . . . comments ) { <nl> - this . comments = comments ; <nl> + IndentAudit ( IndentComment . . . comments ) { <nl> + this . comments = Arrays . copyOf ( comments , comments . length ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java <nl> index 8ddbb23 . . c451907 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java <nl> @ @ - 66 , 7 + 66 , 7 @ @ public class GeneratedJava14LexerTest <nl> / / input is ' Ã Я ' <nl> final String [ ] expected = { <nl> " 7 : 9 : " + getCheckMessage ( MemberNameCheck . class , MSG _ INVALID _ PATTERN , <nl> - " " + ( char ) 0xC3 + ( char ) 0x042F , " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) , <nl> + new String ( new char [ ] { 0xC3 , 0x042F } ) , " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputGrammar . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> index 69113ab . . 979fa71 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> @ @ - 65 , 54 + 65 , 56 @ @ public class ModuleReflectionUtilsTest { <nl> @ Test <nl> public void testIsCheckstyleCheck ( ) { <nl> assertTrue ( ModuleReflectionUtils . isCheckstyleCheck ( CheckClass . class ) ) ; <nl> - assertFalse ( ModuleReflectionUtils . isCheckstyleCheck ( Foo . class ) ) ; <nl> + assertFalse ( ModuleReflectionUtils . isCheckstyleCheck ( NotCheckstyleCheck . class ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testIsFileSetModule ( ) { <nl> assertTrue ( ModuleReflectionUtils . isFileSetModule ( FileSetModuleClass . class ) ) ; <nl> - assertFalse ( ModuleReflectionUtils . isFileSetModule ( Foo . class ) ) ; <nl> + assertFalse ( ModuleReflectionUtils . isFileSetModule ( NotCheckstyleCheck . class ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testIsFilterModule ( ) { <nl> assertTrue ( ModuleReflectionUtils . isFilterModule ( FilterClass . class ) ) ; <nl> - assertFalse ( ModuleReflectionUtils . isFilterModule ( Foo . class ) ) ; <nl> + assertFalse ( ModuleReflectionUtils . isFilterModule ( NotCheckstyleCheck . class ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testIsFileFilterModule ( ) { <nl> assertTrue ( ModuleReflectionUtils . isFileFilterModule ( FileFilterModuleClass . class ) ) ; <nl> - assertFalse ( ModuleReflectionUtils . isFileFilterModule ( Foo . class ) ) ; <nl> + assertFalse ( ModuleReflectionUtils . isFileFilterModule ( NotCheckstyleCheck . class ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testIsRootModule ( ) { <nl> assertTrue ( ModuleReflectionUtils . isRootModule ( RootModuleClass . class ) ) ; <nl> - assertFalse ( ModuleReflectionUtils . isRootModule ( Foo . class ) ) ; <nl> + assertFalse ( ModuleReflectionUtils . isRootModule ( NotCheckstyleCheck . class ) ) ; <nl> } <nl> <nl> private static class ValidCheckstyleClass extends AutomaticBean { <nl> protected ValidCheckstyleClass ( ) { <nl> + / / keep pmd calm and happy <nl> } <nl> } <nl> <nl> private static class InvalidNonAutomaticBeanClass { <nl> protected InvalidNonAutomaticBeanClass ( ) { <nl> + / / keep pmd calm and happy <nl> } <nl> } <nl> <nl> - private static class Bar extends AbstractInvalidClass { <nl> + private abstract static class AbstractInvalidClass extends AutomaticBean { <nl> + public abstract void method ( ) ; <nl> + } <nl> + <nl> + private static class DummyClass extends AbstractInvalidClass { <nl> @ Override <nl> public void method ( ) { <nl> - / / dummy method <nl> + / / keep pmd calm and happy <nl> } <nl> } <nl> <nl> - private abstract static class AbstractInvalidClass extends AutomaticBean { <nl> - public abstract void method ( ) ; <nl> - } <nl> - <nl> private static class CheckClass extends AbstractCheck { <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> @ @ - 164 , 8 + 166 , 9 @ @ public class ModuleReflectionUtilsTest { <nl> } <nl> } <nl> <nl> - private static class Foo { <nl> - protected Foo ( ) { <nl> + private static class NotCheckstyleCheck { <nl> + protected NotCheckstyleCheck ( ) { <nl> + / / keep pmd calm and happy <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / shippable . yml b / shippable . yml 
 index 15243fb . . 63c28d0 100644 
 - - - a / shippable . yml 
 + + + b / shippable . yml 
 @ @ - 92 , 5 + 92 , 7 @ @ build : 
 echo " Survived items found in reports , build will be failed " 
 exit 1 
 fi 
 - 
 + else 
 + echo " Build is skipped , changed files : " 
 + git diff - - name - only HEAD HEAD ~ 1 
 fi

NEAREST DIFF:
diff - - git a / config / pmd - main . xml b / config / pmd - main . xml 
 index 82fd133 . . 776cade 100644 
 - - - a / config / pmd - main . xml 
 + + + b / config / pmd - main . xml 
 @ @ - 10 , 4 + 10 , 18 @ @ 
 < exclude - pattern > . * / src / it / . * < / exclude - pattern > 
 < exclude - pattern > . * / src / test / . * < / exclude - pattern > 
 < rule ref = " config / pmd . xml " / > 
 + 
 + < rule ref = " rulesets / java / unusedcode . xml / UnusedPrivateMethod " > 
 + < properties > 
 + < ! - - generates false - positives on private methods called within a file - - > 
 + < property name = " violationSuppressXPath " 
 + value = " / / MethodDeclaration [ @ Name = ' countTokens ' and . . / . . / . . [ @ Image = ' DescendantTokenCheck ' ] ] " / > 
 + < ! - - generates false - positives on private methods called within a file - - > 
 + < property name = " violationSuppressXPath " 
 + value = " / / MethodDeclaration [ @ Name = ' getHashCodeBasedOnObjectContent ' and . . / . . / . . [ @ Image = ' PropertyCacheFile ' ] ] " / > 
 + < ! - - generates false - positives on private methods called within a file - - > 
 + < property name = " violationSuppressXPath " 
 + value = " / / ClassOrInterfaceDeclaration [ @ Image = ' DescendantTokenCheck ' ] / / MethodDeclarator [ @ Image = ' countTokens ' ] " / > 
 + < / properties > 
 + < / rule > 
 < / ruleset > 
 diff - - git a / config / pmd - test . xml b / config / pmd - test . xml 
 index 3d32172 . . cac5498 100644 
 - - - a / config / pmd - test . xml 
 + + + b / config / pmd - test . xml 
 @ @ - 8 , 6 + 8 , 7 @ @ 
 PMD ruleset for Checkstyle tests 
 < / description > 
 < exclude - pattern > . * / src / main / . * < / exclude - pattern > 
 + 
 < rule ref = " config / pmd . xml " > 
 < ! - - We do throws Exception , as any exception that in not caught in test should fail a test that is expected behavior and we like it as it follow fail - fast and helps to avoid extra catch blocks - - > 
 < exclude name = " SignatureDeclareThrowsException " / > 
 @ @ - 31 , 40 + 32 , 38 @ @ 
 < exclude name = " ExcessivePublicCount " / > 
 < ! - - we have too much UTs for each main class , it is better to keep all tests in one file to ease navigation and search for test - - > 
 < exclude name = " ExcessiveClassLength " / > 
 - < ! - - tentative - - > 
 + < ! - - we want to keep it all in one place - - > 
 + < exclude name = " NcssTypeCount " / > 
 + < ! - - we want to avoid wide throws signature , it is just test - - > 
 + < exclude name = " AvoidCatchingGenericException " / > 
 + < ! - - we do not want invest extra time to make logic ideal in test method , may be later . . . - - > 
 + < exclude name = " NPathComplexity " / > 
 + < ! - - conflicts with checkstyle rule - - > 
 < exclude name = " JUnitUseExpected " / > 
 < ! - - tentative - - > 
 - < exclude name = " UncommentedEmptyConstructor " / > 
 - < ! - - tentative - - > 
 - < exclude name = " ShortClassName " / > 
 - < ! - - tentative - - > 
 - < exclude name = " DefaultPackage " / > 
 - < ! - - tentative - - > 
 < exclude name = " AccessorClassGeneration " / > 
 < ! - - tentative - - > 
 - < exclude name = " AddEmptyString " / > 
 - < ! - - tentative - - > 
 - < exclude name = " ExcessiveMethodLength " / > 
 - < ! - - tentative - - > 
 - < exclude name = " NPathComplexity " / > 
 - < ! - - tentative - - > 
 - < exclude name = " NcssTypeCount " / > 
 - < ! - - tentative - - > 
 - < exclude name = " JUnit4TestShouldUseBeforeAnnotation " / > 
 - < ! - - tentative - - > 
 - < exclude name = " ShortMethodName " / > 
 - < ! - - tentative - - > 
 - < exclude name = " AvoidCatchingGenericException " / > 
 - < ! - - tentative - - > 
 < exclude name = " NonThreadSafeSingleton " / > 
 - < ! - - tentative - - > 
 - < exclude name = " UseVarargs " / > 
 < / rule > 
 
 < rule ref = " rulesets / java / codesize . xml / NcssMethodCount " > 
 < properties > 
 < ! - - ' testTokenNumbering ' method is simple but long as it recheck each token one by one - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' GeneratedJavaTokenTypesTest ' ] / / MethodDeclarator [ @ Image = ' testTokenNumbering ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' ParseTreeBuilder ' ] " / > 
 + < ! - - ' testNospaceWithComplexInput ' it is intended to keep all in one method . - - > 
 + < property name = " violationSuppressXPath " value = " 
 + / / ClassOrInterfaceDeclaration [ @ Image = ' GeneratedJavaTokenTypesTest ' ] / / MethodDeclarator [ @ Image = ' testTokenNumbering ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' ParenPadCheckTest ' ] / / MethodDeclarator [ @ Image = ' testNospaceWithComplexInput ' ] " / > 
 + < / properties > 
 + < / rule > 
 + 
 + < rule ref = " rulesets / java / codesize . xml / ExcessiveMethodLength " > 
 + < properties > 
 + < ! - - ' testTokenNumbering ' method is simple but long as it recheck each token one by one - - > 
 + < ! - - ' testNospaceWithComplexInput ' it is intended to keep all in one method . - - > 
 + < property name = " violationSuppressXPath " value = " 
 + / / ClassOrInterfaceDeclaration [ @ Image = ' GeneratedJavaTokenTypesTest ' ] / / MethodDeclarator [ @ Image = ' testTokenNumbering ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' ParenPadCheckTest ' ] / / MethodDeclarator [ @ Image = ' testNospaceWithComplexInput ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' ParenPadTest ' ] / / MethodDeclarator [ @ Image = ' testMethodParen ' ] " / > 
 < / properties > 
 < / rule > 
 
 @ @ - 80 , 9 + 79 , 40 @ @ 
 < / properties > 
 < / rule > 
 
 + < rule ref = " rulesets / java / migrating . xml / JUnit4TestShouldUseBeforeAnnotation " > 
 + < properties > 
 + < ! - - false positive - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' CommitValidationTest ' ] " / > 
 + < / properties > 
 + < / rule > 
 < rule ref = " rulesets / java / junit . xml / JUnitTestContainsTooManyAsserts " > 
 < properties > 
 < property name = " maximumAsserts " value = " 11 " / > 
 < / properties > 
 < / rule > 
 + 
 + < rule ref = " rulesets / java / naming . xml / ShortMethodName " > 
 + < properties > 
 + < ! - - this inherited from GeneratedJavaLexer - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] 
 + / / ClassOrInterfaceDeclaration [ @ Image = ' AssertGeneratedJavaLexer ' ] / / MethodDeclarator [ @ Image = ' LA ' ] " / > 
 + < / properties > 
 + < / rule > 
 + 
 + < rule ref = " rulesets / java / unusedcode . xml / UnusedPrivateMethod " > 
 + < properties > 
 + < ! - - generates false - positives on private methods called within a file - - > 
 + < property name = " violationSuppressXPath " 
 + value = " / / ClassOrInterfaceDeclaration [ @ Image = ' IndentationCheckTest ' ] / / MethodDeclarator [ @ Image = ' verifyWarns ' ] " / > 
 + < ! - - generates false - positives on private methods called within a file - - > 
 + < property name = " violationSuppressXPath " 
 + value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWarningsFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > 
 + < ! - - generates false - positives on private methods called within a file - - > 
 + < property name = " violationSuppressXPath " 
 + value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWithNearbyCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > 
 + < ! - - generates false - positives on private methods called within a file - - > 
 + < property name = " violationSuppressXPath " 
 + value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > 
 + < / properties > 
 + < / rule > 
 < / ruleset > 
 diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 934ef28 . . 3d1af83 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 315 , 15 + 315 , 5 @ @ 
 < rule ref = " rulesets / java / typeresolution . xml " / > 
 < rule ref = " rulesets / java / unnecessary . xml " / > 
 < rule ref = " rulesets / java / unusedcode . xml " / > 
 - < rule ref = " rulesets / java / unusedcode . xml / UnusedPrivateMethod " > 
 - < properties > 
 - < ! - - generates false - positives on private methods called within a file - - > 
 - < property name = " violationSuppressXPath " 
 - value = " / / MethodDeclaration [ @ Name = ' countTokens ' and . . / . . / . . [ @ Image = ' DescendantTokenCheck ' ] ] " / > 
 - < ! - - generates false - positives on private methods called within a file - - > 
 - < property name = " violationSuppressXPath " 
 - value = " / / MethodDeclaration [ @ Name = ' getHashCodeBasedOnObjectContent ' and . . / . . / . . [ @ Image = ' PropertyCacheFile ' ] ] " / > 
 - < / properties > 
 - < / rule > 
 
 < / ruleset > 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule713atclauses / NonEmptyAtclauseDescriptionTest . java b / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule713atclauses / NonEmptyAtclauseDescriptionTest . java 
 index 3f6a1f3 . . 7b8cc4d 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule713atclauses / NonEmptyAtclauseDescriptionTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule713atclauses / NonEmptyAtclauseDescriptionTest . java 
 @ @ - 90 , 7 + 90 , 7 @ @ public class NonEmptyAtclauseDescriptionTest extends BaseCheckTestSupport { 
 * @ param expected an array with expected messages . 
 * @ return Integer array with numbers of lines with violations . 
 * / 
 - private static Integer [ ] getLineNumbersFromExpected ( String [ ] expected ) { 
 + private static Integer [ ] getLineNumbersFromExpected ( String . . . expected ) { 
 final Integer [ ] result = new Integer [ expected . length ] ; 
 for ( int i = 0 ; i < expected . length ; i + + ) { 
 result [ i ] = Integer . valueOf ( expected [ i ] . substring ( 0 , expected [ i ] . indexOf ( ' : ' ) ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 85a07b1 . . 86cc8fe 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 1797 , 8 + 1797 , 8 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 private final IndentComment [ ] comments ; 
 private int position ; 
 
 - private IndentAudit ( IndentComment . . . comments ) { 
 - this . comments = comments ; 
 + IndentAudit ( IndentComment . . . comments ) { 
 + this . comments = Arrays . copyOf ( comments , comments . length ) ; 
 } 
 
 @ Override 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java 
 index 8ddbb23 . . c451907 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java 
 @ @ - 66 , 7 + 66 , 7 @ @ public class GeneratedJava14LexerTest 
 / / input is ' Ã Я ' 
 final String [ ] expected = { 
 " 7 : 9 : " + getCheckMessage ( MemberNameCheck . class , MSG _ INVALID _ PATTERN , 
 - " " + ( char ) 0xC3 + ( char ) 0x042F , " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) , 
 + new String ( new char [ ] { 0xC3 , 0x042F } ) , " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputGrammar . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 index 69113ab . . 979fa71 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 @ @ - 65 , 54 + 65 , 56 @ @ public class ModuleReflectionUtilsTest { 
 @ Test 
 public void testIsCheckstyleCheck ( ) { 
 assertTrue ( ModuleReflectionUtils . isCheckstyleCheck ( CheckClass . class ) ) ; 
 - assertFalse ( ModuleReflectionUtils . isCheckstyleCheck ( Foo . class ) ) ; 
 + assertFalse ( ModuleReflectionUtils . isCheckstyleCheck ( NotCheckstyleCheck . class ) ) ; 
 } 
 
 @ Test 
 public void testIsFileSetModule ( ) { 
 assertTrue ( ModuleReflectionUtils . isFileSetModule ( FileSetModuleClass . class ) ) ; 
 - assertFalse ( ModuleReflectionUtils . isFileSetModule ( Foo . class ) ) ; 
 + assertFalse ( ModuleReflectionUtils . isFileSetModule ( NotCheckstyleCheck . class ) ) ; 
 } 
 
 @ Test 
 public void testIsFilterModule ( ) { 
 assertTrue ( ModuleReflectionUtils . isFilterModule ( FilterClass . class ) ) ; 
 - assertFalse ( ModuleReflectionUtils . isFilterModule ( Foo . class ) ) ; 
 + assertFalse ( ModuleReflectionUtils . isFilterModule ( NotCheckstyleCheck . class ) ) ; 
 } 
 
 @ Test 
 public void testIsFileFilterModule ( ) { 
 assertTrue ( ModuleReflectionUtils . isFileFilterModule ( FileFilterModuleClass . class ) ) ; 
 - assertFalse ( ModuleReflectionUtils . isFileFilterModule ( Foo . class ) ) ; 
 + assertFalse ( ModuleReflectionUtils . isFileFilterModule ( NotCheckstyleCheck . class ) ) ; 
 } 
 
 @ Test 
 public void testIsRootModule ( ) { 
 assertTrue ( ModuleReflectionUtils . isRootModule ( RootModuleClass . class ) ) ; 
 - assertFalse ( ModuleReflectionUtils . isRootModule ( Foo . class ) ) ; 
 + assertFalse ( ModuleReflectionUtils . isRootModule ( NotCheckstyleCheck . class ) ) ; 
 } 
 
 private static class ValidCheckstyleClass extends AutomaticBean { 
 protected ValidCheckstyleClass ( ) { 
 + / / keep pmd calm and happy 
 } 
 } 
 
 private static class InvalidNonAutomaticBeanClass { 
 protected InvalidNonAutomaticBeanClass ( ) { 
 + / / keep pmd calm and happy 
 } 
 } 
 
 - private static class Bar extends AbstractInvalidClass { 
 + private abstract static class AbstractInvalidClass extends AutomaticBean { 
 + public abstract void method ( ) ; 
 + } 
 + 
 + private static class DummyClass extends AbstractInvalidClass { 
 @ Override 
 public void method ( ) { 
 - / / dummy method 
 + / / keep pmd calm and happy 
 } 
 } 
 
 - private abstract static class AbstractInvalidClass extends AutomaticBean { 
 - public abstract void method ( ) ; 
 - } 
 - 
 private static class CheckClass extends AbstractCheck { 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 @ @ - 164 , 8 + 166 , 9 @ @ public class ModuleReflectionUtilsTest { 
 } 
 } 
 
 - private static class Foo { 
 - protected Foo ( ) { 
 + private static class NotCheckstyleCheck { 
 + protected NotCheckstyleCheck ( ) { 
 + / / keep pmd calm and happy 
 } 
 } 
 }
