BLEU SCORE: 0.016932492841722675

TEST MSG: Issue # 4516 : fix first bunch of pmd violations for JUnitAssertionsShouldIncludeMessage
GENERATED MSG: started to incorporate logging events

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 61a3a26 . . 907d9e5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 275 , 9 + 275 , 12 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> <nl> / / comparing to 1 as there is only one legal file in input <nl> final int numLegalFiles = 1 ; <nl> - assertEquals ( numLegalFiles , counter ) ; <nl> - assertEquals ( numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; <nl> - assertEquals ( numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; <nl> + assertEquals ( " There were more legal files than expected " , <nl> + numLegalFiles , counter ) ; <nl> + assertEquals ( " Audit was started on larger amount of files than expected " , <nl> + numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; <nl> + assertEquals ( " Audit was finished on larger amount of files than expected " , <nl> + numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 303 , 9 + 306 , 12 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> <nl> / / comparing to 0 as there is no legal file in input <nl> final int numLegalFiles = 0 ; <nl> - assertEquals ( numLegalFiles , counter ) ; <nl> - assertEquals ( numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; <nl> - assertEquals ( numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; <nl> + assertEquals ( " There were more legal files than expected " , <nl> + numLegalFiles , counter ) ; <nl> + assertEquals ( " Audit was started on larger amount of files than expected " , <nl> + numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; <nl> + assertEquals ( " Audit was finished on larger amount of files than expected " , <nl> + numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " deprecation " ) <nl> @ @ - 330 , 7 + 336 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( UnsupportedEncodingException ex ) { <nl> - assertEquals ( " unsupported charset : ' UNKNOWN - CHARSET ' " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is not expected " , <nl> + " unsupported charset : ' UNKNOWN - CHARSET ' " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 343 , 8 + 350 , 9 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertEquals ( " if no custom moduleFactory is set , " <nl> - + " moduleClassLoader must be specified " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is not expected " , <nl> + " if no custom moduleFactory is set , moduleClassLoader must be specified " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 370 , 15 + 378 , 19 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> checker . finishLocalSetup ( ) ; <nl> <nl> final Context context = ( Context ) Whitebox . getInternalState ( checker , " childContext " ) ; <nl> - assertEquals ( System . getProperty ( " file . encoding " , " UTF - 8 " ) , context . get ( " charset " ) ) ; <nl> - assertEquals ( contextClassLoader , context . get ( " classLoader " ) ) ; <nl> - assertEquals ( " error " , context . get ( " severity " ) ) ; <nl> - assertEquals ( " testBaseDir " , context . get ( " basedir " ) ) ; <nl> + assertEquals ( " Charset was different than expected " , <nl> + System . getProperty ( " file . encoding " , " UTF - 8 " ) , context . get ( " charset " ) ) ; <nl> + assertEquals ( " Was used unsufficient classloader " , <nl> + contextClassLoader , context . get ( " classLoader " ) ) ; <nl> + assertEquals ( " Severity is set to unexpected value " , <nl> + " error " , context . get ( " severity " ) ) ; <nl> + assertEquals ( " Basedir is set to unexpected value " , <nl> + " testBaseDir " , context . get ( " basedir " ) ) ; <nl> <nl> final Field sLocale = LocalizedMessage . class . getDeclaredField ( " sLocale " ) ; <nl> sLocale . setAccessible ( true ) ; <nl> final Locale locale = ( Locale ) sLocale . get ( null ) ; <nl> - assertEquals ( Locale . ITALY , locale ) ; <nl> + assertEquals ( " Locale is set to unexpected value " , Locale . ITALY , locale ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 394 , 7 + 406 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertEquals ( " java . lang . String is not allowed as a child in Checker " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is not expected " , <nl> + " java . lang . String is not allowed as a child in Checker " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 426 , 7 + 439 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> fail ( " Exception did not happen " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> - assertTrue ( ex . getCause ( ) instanceof IOException ) ; <nl> + assertTrue ( " Cause of exception differs from IOException " , <nl> + ex . getCause ( ) instanceof IOException ) ; <nl> } <nl> } <nl> <nl> @ @ - 437 , 7 + 451 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testCacheAndCheckWhichDoesNotImplementExternalResourceHolderInterface ( ) <nl> throws Exception { <nl> - assertFalse ( ExternalResourceHolder . class . isAssignableFrom ( HiddenFieldCheck . class ) ) ; <nl> + assertFalse ( " ExternalResourceHolder has changed his parent " , <nl> + ExternalResourceHolder . class . isAssignableFrom ( HiddenFieldCheck . class ) ) ; <nl> final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> <nl> final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> @ @ - 470 , 7 + 485 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> final Properties cacheAfterSecondRun = new Properties ( ) ; <nl> cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> <nl> - assertEquals ( cacheAfterFirstRun , cacheAfterSecondRun ) ; <nl> + assertEquals ( " Cache from first run differs from second run cache " , <nl> + cacheAfterFirstRun , cacheAfterSecondRun ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 498 , 12 + 514 , 15 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> <nl> / / There should 2 objects in cache : processed file ( file . java ) and checker configuration . <nl> final int expectedNumberOfObjectsInCache = 2 ; <nl> - assertEquals ( expectedNumberOfObjectsInCache , cache . size ( ) ) ; <nl> + assertEquals ( " Cache has unexpected size " , <nl> + expectedNumberOfObjectsInCache , cache . size ( ) ) ; <nl> <nl> final String expectedConfigHash = " 68EE3C3B4593FD8D86159C670C504542E20C6FA0 " ; <nl> - assertEquals ( expectedConfigHash , cache . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> + assertEquals ( " Cache has unexpected hash " , <nl> + expectedConfigHash , cache . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> <nl> - assertNotNull ( cache . getProperty ( tmpFile . getPath ( ) ) ) ; <nl> + assertNotNull ( " Cache file has null path " , <nl> + cache . getProperty ( tmpFile . getPath ( ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 531 , 8 + 550 , 10 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> final Properties cacheAfterClear = new Properties ( ) ; <nl> cacheAfterClear . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> <nl> - assertEquals ( 1 , cacheAfterClear . size ( ) ) ; <nl> - assertNotNull ( cacheAfterClear . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> + assertEquals ( " Cache has unexpected size " , <nl> + 1 , cacheAfterClear . size ( ) ) ; <nl> + assertNotNull ( " Cache has null hash " , <nl> + cacheAfterClear . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> <nl> final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> @ @ - 542 , 13 + 563 , 15 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> final Properties cacheAfterSecondRun = new Properties ( ) ; <nl> cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> <nl> - assertNotNull ( cacheAfterSecondRun . getProperty ( pathToEmptyFile ) ) ; <nl> - assertEquals ( <nl> + assertNotNull ( " Cache has null path " , <nl> + cacheAfterSecondRun . getProperty ( pathToEmptyFile ) ) ; <nl> + assertEquals ( " Cash have changed it hash " , <nl> cacheAfterClear . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , <nl> cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) <nl> ) ; <nl> final int expectedNumberOfObjectsInCacheAfterSecondRun = 2 ; <nl> - assertEquals ( expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; <nl> + assertEquals ( " Cache has changed number of items " , <nl> + expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 581 , 9 + 604 , 12 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> / / - @ cs [ IllegalCatchExtended ] Testing for catch Error is part of 100 % coverage . <nl> catch ( Error error ) { <nl> - assertThat ( error . getCause ( ) , instanceOf ( IOError . class ) ) ; <nl> - assertThat ( error . getCause ( ) . getCause ( ) , instanceOf ( InternalError . class ) ) ; <nl> - assertEquals ( errorMessage , error . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> + assertThat ( " Error cause differs from IOError " , <nl> + error . getCause ( ) , instanceOf ( IOError . class ) ) ; <nl> + assertThat ( " Error cause is not InternalError " , <nl> + error . getCause ( ) . getCause ( ) , instanceOf ( InternalError . class ) ) ; <nl> + assertEquals ( " Error message is not expected " , <nl> + errorMessage , error . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 594 , 7 + 620 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testCacheAndFilterWhichDoesNotImplementExternalResourceHolderInterface ( ) <nl> throws Exception { <nl> - assertFalse ( ExternalResourceHolder . class . isAssignableFrom ( DummyFilter . class ) ) ; <nl> + assertFalse ( " ExternalResourceHolder has changed its parent " , <nl> + ExternalResourceHolder . class . isAssignableFrom ( DummyFilter . class ) ) ; <nl> final DefaultConfiguration filterConfig = createCheckConfig ( DummyFilter . class ) ; <nl> <nl> final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyle _ checks " ) ; <nl> @ @ - 620 , 16 + 647 , 20 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> <nl> assertEquals ( <nl> + " Cache file has changed its path " , <nl> cacheAfterFirstRun . getProperty ( pathToEmptyFile ) , <nl> cacheAfterSecondRun . getProperty ( pathToEmptyFile ) <nl> ) ; <nl> assertEquals ( <nl> + " Cache has changed its hash " , <nl> cacheAfterFirstRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , <nl> cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) <nl> ) ; <nl> final int expectedNumberOfObjectsInCache = 2 ; <nl> - assertEquals ( expectedNumberOfObjectsInCache , cacheAfterFirstRun . size ( ) ) ; <nl> - assertEquals ( expectedNumberOfObjectsInCache , cacheAfterSecondRun . size ( ) ) ; <nl> + assertEquals ( " Number of items in cache differs from expected " , <nl> + expectedNumberOfObjectsInCache , cacheAfterFirstRun . size ( ) ) ; <nl> + assertEquals ( " Number of items in cache differs from expected " , <nl> + expectedNumberOfObjectsInCache , cacheAfterSecondRun . size ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 672 , 7 + 703 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> cacheAfterFirstRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> <nl> final int expectedNumberOfObjectsInCacheAfterFirstRun = 3 ; <nl> - assertEquals ( expectedNumberOfObjectsInCacheAfterFirstRun , cacheAfterFirstRun . size ( ) ) ; <nl> + assertEquals ( " Number of items in cache differs from expected " , <nl> + expectedNumberOfObjectsInCacheAfterFirstRun , cacheAfterFirstRun . size ( ) ) ; <nl> <nl> / / Change a list of external resources which are used by the check <nl> final String secondExternalResourceLocation = " checks " + File . separator <nl> @ @ - 685 , 23 + 717 , 28 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> final Properties cacheAfterSecondRun = new Properties ( ) ; <nl> cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; <nl> <nl> - assertEquals ( <nl> + assertEquals ( " Cache file has changed its path " , <nl> cacheAfterFirstRun . getProperty ( pathToEmptyFile ) , <nl> cacheAfterSecondRun . getProperty ( pathToEmptyFile ) <nl> ) ; <nl> assertEquals ( <nl> + " Cache has changed its hash " , <nl> cacheAfterFirstRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , <nl> cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) <nl> ) ; <nl> - assertEquals ( <nl> + assertEquals ( " Cache has changed its resource key " , <nl> cacheAfterFirstRun . getProperty ( firstExternalResourceKey ) , <nl> cacheAfterSecondRun . getProperty ( firstExternalResourceKey ) <nl> ) ; <nl> - assertNotNull ( cacheAfterFirstRun . getProperty ( firstExternalResourceKey ) ) ; <nl> + assertNotNull ( " Cache has null as a resource key " , <nl> + cacheAfterFirstRun . getProperty ( firstExternalResourceKey ) ) ; <nl> final int expectedNumberOfObjectsInCacheAfterSecondRun = 4 ; <nl> - assertEquals ( expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; <nl> - assertNull ( cacheAfterFirstRun . getProperty ( secondExternalResourceKey ) ) ; <nl> - assertNotNull ( cacheAfterSecondRun . getProperty ( secondExternalResourceKey ) ) ; <nl> + assertEquals ( " Number of items in cache differs from expected " , <nl> + expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; <nl> + assertNull ( " Cache has not null as a resource key " , <nl> + cacheAfterFirstRun . getProperty ( secondExternalResourceKey ) ) ; <nl> + assertNotNull ( " Cache has null as a resource key " , <nl> + cacheAfterSecondRun . getProperty ( secondExternalResourceKey ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 795 , 7 + 832 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; <nl> final List < String > expected = <nl> Arrays . asList ( " beginProcessing " , " finishProcessing " , " destroy " ) ; <nl> - assertArrayEquals ( expected . toArray ( ) , fileSet . getMethodCalls ( ) . toArray ( ) ) ; <nl> + assertArrayEquals ( " Method calls were not expected " , <nl> + expected . toArray ( ) , fileSet . getMethodCalls ( ) . toArray ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 803 , 7 + 841 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> final DummyFileSet fileSet = new DummyFileSet ( ) ; <nl> final Checker checker = new Checker ( ) ; <nl> checker . addFileSetCheck ( fileSet ) ; <nl> - assertEquals ( checker , fileSet . getInternalMessageDispatcher ( ) ) ; <nl> + assertEquals ( " Message dispatcher was not expected " , <nl> + checker , fileSet . getInternalMessageDispatcher ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 886 , 10 + 925 , 14 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> <nl> verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; <nl> <nl> - assertEquals ( 1 , testInfoOutputStream . getCloseCount ( ) ) ; <nl> - assertEquals ( 3 , testInfoOutputStream . getFlushCount ( ) ) ; <nl> - assertEquals ( 1 , testErrorOutputStream . getCloseCount ( ) ) ; <nl> - assertEquals ( 1 , testErrorOutputStream . getFlushCount ( ) ) ; <nl> + assertEquals ( " Close count was not expected " , <nl> + 1 , testInfoOutputStream . getCloseCount ( ) ) ; <nl> + assertEquals ( " Flush count was not expected " , <nl> + 3 , testInfoOutputStream . getFlushCount ( ) ) ; <nl> + assertEquals ( " Close count was not expected " , <nl> + 1 , testErrorOutputStream . getCloseCount ( ) ) ; <nl> + assertEquals ( " Flush count was not expected " , <nl> + 1 , testErrorOutputStream . getFlushCount ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 905 , 8 + 948 , 10 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> <nl> verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; <nl> <nl> - assertEquals ( 1 , testInfoOutputStream . getCloseCount ( ) ) ; <nl> - assertEquals ( 0 , testInfoOutputStream . getFlushCount ( ) ) ; <nl> + assertEquals ( " Close count was not expected " , <nl> + 1 , testInfoOutputStream . getCloseCount ( ) ) ; <nl> + assertEquals ( " Flush count was not expected " , <nl> + 0 , testInfoOutputStream . getFlushCount ( ) ) ; <nl> } <nl> <nl> private static class DummyFilter implements Filter { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> index 53620d2 . . 4211573 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> @ @ - 111 , 10 + 111 , 13 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> antTask . execute ( ) ; <nl> <nl> / / then <nl> - assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; <nl> + assertTrue ( " Checker is not processed " , <nl> + TestRootModuleChecker . isProcessed ( ) ) ; <nl> final List < File > filesToCheck = TestRootModuleChecker . getFilesToCheck ( ) ; <nl> - assertThat ( filesToCheck . size ( ) , is ( 1 ) ) ; <nl> - assertThat ( filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + assertThat ( " There more files to check then expected " , <nl> + filesToCheck . size ( ) , is ( 1 ) ) ; <nl> + assertThat ( " The path of file differs from expected " , <nl> + filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 133 , 10 + 136 , 13 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> antTask . execute ( ) ; <nl> <nl> / / then <nl> - assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; <nl> + assertTrue ( " Checker is not processed " , <nl> + TestRootModuleChecker . isProcessed ( ) ) ; <nl> final List < File > filesToCheck = TestRootModuleChecker . getFilesToCheck ( ) ; <nl> - assertThat ( filesToCheck . size ( ) , is ( 1 ) ) ; <nl> - assertThat ( filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + assertThat ( " There more files to check then expected " , <nl> + filesToCheck . size ( ) , is ( 1 ) ) ; <nl> + assertThat ( " The path of file differs from expected " , <nl> + filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 147 , 7 + 153 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> antTask . execute ( ) ; <nl> <nl> - assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; <nl> + assertTrue ( " Checker is not processed " , <nl> + TestRootModuleChecker . isProcessed ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 169 , 7 + 176 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertEquals ( " Must specify ' config ' . " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " Must specify ' config ' . " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 184 , 7 + 192 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; <nl> + assertTrue ( " Error message is unexpected " , <nl> + ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 199 , 7 + 208 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; <nl> + assertTrue ( " Error message is unexpected " , <nl> + ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 211 , 7 + 221 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertEquals ( " Must specify at least one of ' file ' or nested ' fileset ' or ' path ' . " , <nl> + assertEquals ( " Error message is unexpected " , <nl> + " Must specify at least one of ' file ' or nested ' fileset ' or ' path ' . " , <nl> ex . getMessage ( ) ) ; <nl> } <nl> } <nl> @ @ - 226 , 7 + 237 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertEquals ( " Got 0 errors and 1 warnings . " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " Got 0 errors and 1 warnings . " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 257 , 7 + 269 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> catch ( BuildException ex ) { <nl> final Map < String , Object > hashtable = project . getProperties ( ) ; <nl> final Object propertyValue = hashtable . get ( failurePropertyName ) ; <nl> - assertEquals ( " Got 2 errors and 0 warnings . " , propertyValue ) ; <nl> + assertEquals ( " Number of errors is unexpected " , <nl> + " Got 2 errors and 0 warnings . " , propertyValue ) ; <nl> } <nl> } <nl> <nl> @ @ - 291 , 17 + 304 , 18 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> antTask . execute ( ) ; <nl> <nl> final List < String > output = FileUtils . readLines ( outputFile ) ; <nl> - assertEquals ( " Starting audit . . . " , output . get ( 0 ) ) ; <nl> - assertTrue ( output . get ( 1 ) . startsWith ( " [ WARN ] " ) ) ; <nl> - assertTrue ( output . get ( 1 ) . endsWith ( " InputCheckstyleAntTaskError . java : 4 : " <nl> + final String errorMessage = " Content of file with violations differs from expected " ; <nl> + assertEquals ( errorMessage , " Starting audit . . . " , output . get ( 0 ) ) ; <nl> + assertTrue ( errorMessage , output . get ( 1 ) . startsWith ( " [ WARN ] " ) ) ; <nl> + assertTrue ( errorMessage , output . get ( 1 ) . endsWith ( " InputCheckstyleAntTaskError . java : 4 : " <nl> + " @ incomplete = Some javadoc [ WriteTag ] " ) ) ; <nl> - assertTrue ( output . get ( 2 ) . startsWith ( " [ ERROR ] " ) ) ; <nl> - assertTrue ( output . get ( 2 ) . endsWith ( " InputCheckstyleAntTaskError . java : 7 : " <nl> + assertTrue ( errorMessage , output . get ( 2 ) . startsWith ( " [ ERROR ] " ) ) ; <nl> + assertTrue ( errorMessage , output . get ( 2 ) . endsWith ( " InputCheckstyleAntTaskError . java : 7 : " <nl> + " Line is longer than 70 characters ( found 80 ) . [ LineLength ] " ) ) ; <nl> - assertTrue ( output . get ( 3 ) . startsWith ( " [ ERROR ] " ) ) ; <nl> - assertTrue ( output . get ( 3 ) . endsWith ( " InputCheckstyleAntTaskError . java : 9 : " <nl> + assertTrue ( errorMessage , output . get ( 3 ) . startsWith ( " [ ERROR ] " ) ) ; <nl> + assertTrue ( errorMessage , output . get ( 3 ) . endsWith ( " InputCheckstyleAntTaskError . java : 9 : " <nl> + " Line is longer than 70 characters ( found 81 ) . [ LineLength ] " ) ) ; <nl> - assertEquals ( " Audit done . " , output . get ( 4 ) ) ; <nl> + assertEquals ( errorMessage , " Audit done . " , output . get ( 4 ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 328 , 7 + 342 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertEquals ( expected , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + expected , ex . getMessage ( ) ) ; <nl> } <nl> try { <nl> antTask = new CheckstyleAntTask ( ) ; <nl> @ @ - 337 , 7 + 352 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertEquals ( expected , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + expected , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 359 , 7 + 375 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertTrue ( ex . getMessage ( ) . startsWith ( " Error loading Properties file " ) ) ; <nl> + assertTrue ( " Error message is unexpected " , <nl> + ex . getMessage ( ) . startsWith ( " Error loading Properties file " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 383 , 7 + 400 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> for ( int i = 0 ; i < expected . size ( ) ; i + + ) { <nl> final String line = expected . get ( i ) ; <nl> if ( ! line . startsWith ( " < checkstyle version " ) & & ! line . startsWith ( " < file " ) ) { <nl> - assertEquals ( line , actual . get ( i ) ) ; <nl> + assertEquals ( " Content of file with violations differs from expected " , <nl> + line , actual . get ( i ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 401 , 7 + 419 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create listeners : formatters " ) ) ; <nl> + assertTrue ( " Error message is unexpected " , <nl> + ex . getMessage ( ) . startsWith ( " Unable to create listeners : formatters " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 413 , 7 + 432 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertEquals ( " foo is not a legal value for this attribute " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " foo is not a legal value for this attribute " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 422 , 7 + 442 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> final String customName = " customName " ; <nl> final CheckstyleAntTask . Listener listener = new CheckstyleAntTask . Listener ( ) ; <nl> listener . setClassname ( customName ) ; <nl> - assertEquals ( customName , listener . getClassname ( ) ) ; <nl> + assertEquals ( " Class name is unexpected " , <nl> + customName , listener . getClassname ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 430 , 14 + 451 , 16 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> final String filename = getPath ( " ant / checkstyleAntTest . properties " ) ; <nl> final CheckstyleAntTask . Property property = new CheckstyleAntTask . Property ( ) ; <nl> property . setFile ( new File ( filename ) ) ; <nl> - assertEquals ( property . getValue ( ) , new File ( filename ) . getAbsolutePath ( ) ) ; <nl> + assertEquals ( " File path is unexpected " , <nl> + property . getValue ( ) , new File ( filename ) . getAbsolutePath ( ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testDefaultLoggerListener ( ) throws IOException { <nl> final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> formatter . setUseFile ( false ) ; <nl> - assertTrue ( formatter . createListener ( null ) instanceof DefaultLogger ) ; <nl> + assertTrue ( " Listener instance has unexpected type " , <nl> + formatter . createListener ( null ) instanceof DefaultLogger ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 445 , 7 + 468 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> formatter . setUseFile ( false ) ; <nl> formatter . setTofile ( new File ( " target / " ) ) ; <nl> - assertTrue ( formatter . createListener ( null ) instanceof DefaultLogger ) ; <nl> + assertTrue ( " Listener instance has unexpected type " , <nl> + formatter . createListener ( null ) instanceof DefaultLogger ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 455 , 7 + 479 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> formatter . setType ( formatterType ) ; <nl> formatter . setUseFile ( false ) ; <nl> - assertTrue ( formatter . createListener ( null ) instanceof XMLLogger ) ; <nl> + assertTrue ( " Listener instance has unexpected type " , <nl> + formatter . createListener ( null ) instanceof XMLLogger ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 466 , 7 + 491 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> formatter . setType ( formatterType ) ; <nl> formatter . setUseFile ( false ) ; <nl> formatter . setTofile ( new File ( " target / " ) ) ; <nl> - assertTrue ( formatter . createListener ( null ) instanceof XMLLogger ) ; <nl> + assertTrue ( " Listener instance has unexpected type " , <nl> + formatter . createListener ( null ) instanceof XMLLogger ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 497 , 7 + 523 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to process files : " ) ) ; <nl> + assertTrue ( " Error message is unexpected " , <nl> + ex . getMessage ( ) . startsWith ( " Unable to process files : " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 529 , 12 + 556 , 15 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> <nl> final List < MessageLevelPair > loggedMessages = antTask . getLoggedMessages ( ) ; <nl> <nl> - assertEquals ( expectedList . size ( ) , loggedMessages . size ( ) ) ; <nl> + assertEquals ( " Amount of log messages is unexpected " , <nl> + expectedList . size ( ) , loggedMessages . size ( ) ) ; <nl> for ( int i = 0 ; i < expectedList . size ( ) ; i + + ) { <nl> final MessageLevelPair expected = expectedList . get ( i ) ; <nl> final MessageLevelPair actual = loggedMessages . get ( i ) ; <nl> - assertTrue ( actual . getMsg ( ) . startsWith ( expected . getMsg ( ) ) ) ; <nl> - assertEquals ( expected . getLevel ( ) , actual . getLevel ( ) ) ; <nl> + assertTrue ( " Log messages were expected " , <nl> + actual . getMsg ( ) . startsWith ( expected . getMsg ( ) ) ) ; <nl> + assertEquals ( " Log messages were expected " , <nl> + expected . getLevel ( ) , actual . getLevel ( ) ) ; <nl> } <nl> <nl> }
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> index f6eecb5 . . 6ce69d1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> @ @ - 19 , 14 + 19 , 18 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> import java . io . File ; <nl> + import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . OutputStream ; <nl> import java . util . ArrayList ; <nl> - import java . util . Iterator ; <nl> import java . util . List ; <nl> import org . apache . regexp . RESyntaxException ; <nl> import org . apache . tools . ant . BuildException ; <nl> import org . apache . tools . ant . DirectoryScanner ; <nl> + import org . apache . tools . ant . Project ; <nl> import org . apache . tools . ant . Task ; <nl> + import org . apache . tools . ant . taskdefs . LogOutputStream ; <nl> + import org . apache . tools . ant . types . EnumeratedAttribute ; <nl> import org . apache . tools . ant . types . FileSet ; <nl> <nl> / * * <nl> @ @ - 37 , 10 + 41 , 20 @ @ import org . apache . tools . ant . types . FileSet ; <nl> public class CheckStyleTask <nl> extends Task <nl> { <nl> + / * * poor man ' s enum for an xml formatter * * / <nl> + private static final String E _ XML = " xml " ; <nl> + / * * poor man ' s enum for an plain formatter * * / <nl> + private static final String E _ PLAIN = " plain " ; <nl> + <nl> / * * name of file to check * * / <nl> private String mFileName ; <nl> + <nl> / * * contains the filesets to process * * / <nl> private final List mFileSets = new ArrayList ( ) ; <nl> + <nl> + / * * contains the formatters to log to * * / <nl> + private final List mFormatters = new ArrayList ( ) ; <nl> + <nl> / * * the configuration to pass to the checker * * / <nl> private final Configuration mConfig = new Configuration ( ) ; <nl> <nl> @ @ - 57 , 6 + 71 , 16 @ @ public class CheckStyleTask <nl> mFileSets . add ( aFS ) ; <nl> } <nl> <nl> + / * * <nl> + * Add a formatter <nl> + * @ param aFormatter the formatter to add for logging . <nl> + * / <nl> + public void addFormatter ( Formatter aFormatter ) <nl> + { <nl> + mFormatters . add ( aFormatter ) ; <nl> + } <nl> + <nl> + <nl> / * * @ param aFile the file to be checked * * / <nl> public void setFile ( File aFile ) <nl> { <nl> @ @ - 94 , 8 + 118 , 7 @ @ public class CheckStyleTask <nl> mConfig . setMemberPat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse memberpattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to parse memberPattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 106 , 8 + 129 , 8 @ @ public class CheckStyleTask <nl> mConfig . setPublicMemberPat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse publicmemberpattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( <nl> + " Unable to parse publicMemberPattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 118 , 8 + 141 , 7 @ @ public class CheckStyleTask <nl> mConfig . setParamPat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse parampattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to parse paramPattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 130 , 8 + 152 , 7 @ @ public class CheckStyleTask <nl> mConfig . setStaticFinalPat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse constpattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to parse constPattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 142 , 8 + 163 , 7 @ @ public class CheckStyleTask <nl> mConfig . setStaticPat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse staticpattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to parse staticPattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 154 , 8 + 174 , 7 @ @ public class CheckStyleTask <nl> mConfig . setTypePat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse typepattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to parse typePattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 166 , 8 + 185 , 7 @ @ public class CheckStyleTask <nl> mConfig . setHeaderFile ( aName . getAbsolutePath ( ) ) ; <nl> } <nl> catch ( IOException ex ) { <nl> - throw new BuildException ( " Unable to read headerfile - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to read headerfile - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 226 , 50 + 244 , 193 @ @ public class CheckStyleTask <nl> } <nl> <nl> / / Create the checker <nl> - Checker c ; <nl> + final int numErrs ; <nl> + Checker c = null ; <nl> try { <nl> c = new Checker ( mConfig , System . out ) ; <nl> + AuditListener [ ] listeners = getListeners ( ) ; <nl> + for ( int i = 0 ; i < listeners . length ; i + + ) { <nl> + c . addListener ( listeners [ i ] ) ; <nl> + } <nl> + final String [ ] files = scanFileSets ( ) ; <nl> + numErrs = c . process ( files ) ; <nl> + } <nl> + catch ( Exception e ) { <nl> + throw new BuildException ( " Unable to create a Checker " , e ) ; <nl> } <nl> - catch ( RESyntaxException e ) { <nl> - e . printStackTrace ( ) ; <nl> - throw new BuildException ( " Unable to create a Checker " , location ) ; <nl> + finally { <nl> + if ( c ! = null ) { <nl> + c . destroy ( ) ; <nl> + } <nl> } <nl> <nl> - / / Process the files <nl> - int numErrs = 0 ; <nl> - if ( mFileName ! = null ) { <nl> - numErrs + = c . process ( mFileName ) ; <nl> + if ( numErrs > 0 ) { <nl> + throw new BuildException ( " Got " + numErrs + " errors . " , location ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Return the list of listeners set in this task . <nl> + * @ return the list of listeners . <nl> + * @ throws ClassNotFoundException if an error occurs <nl> + * @ throws InstantiationException if an error occurs <nl> + * @ throws IllegalAccessException if an error occurs <nl> + * @ throws IOException if an error occurs <nl> + * / <nl> + protected AuditListener [ ] getListeners ( ) <nl> + throws ClassNotFoundException , InstantiationException , <nl> + IllegalAccessException , IOException <nl> + { <nl> + / / @ todo should we add a default plain stdout <nl> + / / formatter ? <nl> + if ( mFormatters . size ( ) = = 0 ) { <nl> + final Formatter f = new Formatter ( ) ; <nl> + final FormatterType type = new FormatterType ( ) ; <nl> + type . setValue ( E _ PLAIN ) ; <nl> + f . setType ( type ) ; <nl> + mFormatters . add ( f ) ; <nl> + } <nl> + <nl> + final AuditListener [ ] listeners = new AuditListener [ mFormatters . size ( ) ] ; <nl> + for ( int i = 0 ; i < listeners . length ; i + + ) { <nl> + final Formatter f = ( Formatter ) mFormatters . get ( i ) ; <nl> + listeners [ i ] = f . createListener ( this ) ; <nl> } <nl> + return listeners ; <nl> + } <nl> <nl> - final Iterator it = mFileSets . iterator ( ) ; <nl> - while ( it . hasNext ( ) ) { <nl> - final FileSet fs = ( FileSet ) it . next ( ) ; <nl> + / * * <nl> + * returns the list of files ( full path name ) to process . <nl> + * @ return the list of files included via the filesets . <nl> + * / <nl> + protected String [ ] scanFileSets ( ) <nl> + { <nl> + final ArrayList list = new ArrayList ( ) ; <nl> + if ( mFileName ! = null ) { <nl> + / / oops we ' ve got an additional one to process , don ' t <nl> + / / forget it . No sweat , it ' s fully resolved via the setter . <nl> + log ( " Adding standalone file for audit " , Project . MSG _ VERBOSE ) ; <nl> + list . add ( mFileName ) ; <nl> + } <nl> + for ( int i = 0 ; i < mFileSets . size ( ) ; i + + ) { <nl> + final FileSet fs = ( FileSet ) mFileSets . get ( i ) ; <nl> final DirectoryScanner ds = fs . getDirectoryScanner ( project ) ; <nl> - numErrs + = process ( fs . getDir ( project ) . getAbsolutePath ( ) , <nl> - ds . getIncludedFiles ( ) , <nl> - c ) ; <nl> + ds . scan ( ) ; <nl> + <nl> + final String [ ] names = ds . getIncludedFiles ( ) ; <nl> + log ( i + " ) Adding " + names . length + " files from directory " + <nl> + ds . getBasedir ( ) , Project . MSG _ VERBOSE ) ; <nl> + <nl> + for ( int j = 0 ; j < names . length ; j + + ) { <nl> + final String pathname = <nl> + ds . getBasedir ( ) + File . separator + names [ j ] ; <nl> + list . add ( pathname ) ; <nl> + } <nl> } <nl> <nl> - c . destroy ( ) ; <nl> + return ( String [ ] ) list . toArray ( new String [ 0 ] ) ; <nl> + } <nl> <nl> - if ( numErrs > 0 ) { <nl> - throw new BuildException ( " Got " + numErrs + " errors . " , location ) ; <nl> + / * * <nl> + * Poor mans enumeration for the formatter types . <nl> + * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > <nl> + * / <nl> + public static class FormatterType <nl> + extends EnumeratedAttribute <nl> + { <nl> + / * * my possible values * * / <nl> + private static final String [ ] VALUES = { E _ XML , E _ PLAIN } ; <nl> + <nl> + / * * @ see EnumeratedAttribute * * / <nl> + public String [ ] getValues ( ) <nl> + { <nl> + return VALUES ; <nl> } <nl> } <nl> <nl> / * * <nl> - * Processes the list of files . <nl> - * @ return the number of errors found <nl> - * @ param aDir absolute path to directory containing files <nl> - * @ param aFiles the files to process <nl> - * @ param aChecker the checker to process the files with <nl> - * * / <nl> - private int process ( String aDir , String [ ] aFiles , Checker aChecker ) <nl> + * Details about a formatter to be used . <nl> + * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > <nl> + * / <nl> + public static class Formatter <nl> { <nl> - int retVal = 0 ; <nl> - for ( int i = 0 ; i < aFiles . length ; i + + ) { <nl> - retVal + = aChecker . process ( aDir + File . separator + aFiles [ i ] ) ; <nl> + / * * class name of formatter * * / <nl> + private String mClassName = null ; <nl> + / * * whether formatter users a file * * / <nl> + private boolean mUseFile = true ; <nl> + / * * the file to output to * * / <nl> + private File mToFile = null ; <nl> + <nl> + / * * <nl> + * Set the type of the formatter . <nl> + * @ param aType the type <nl> + * / <nl> + public void setType ( FormatterType aType ) <nl> + { <nl> + final String val = aType . getValue ( ) ; <nl> + if ( E _ XML . equals ( val ) ) { <nl> + setClassname ( XMLLogger . class . getName ( ) ) ; <nl> + } <nl> + else if ( E _ PLAIN . equals ( val ) ) { <nl> + setClassname ( DefaultLogger . class . getName ( ) ) ; <nl> + } <nl> + else { <nl> + throw new BuildException ( " Invalid formatter type : " + val ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Set the class name of the formatter . <nl> + * @ param aTo the formatter class name <nl> + * / <nl> + public void setClassname ( String aTo ) <nl> + { <nl> + mClassName = aTo ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the file to output to . <nl> + * @ param aTo the file to output to <nl> + * / <nl> + public void setTofile ( File aTo ) <nl> + { <nl> + mToFile = aTo ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates a listener for the formatter . <nl> + * @ param aTask the task running <nl> + * @ return a listener <nl> + * @ throws ClassNotFoundException if an error occurs <nl> + * @ throws InstantiationException if an error occurs <nl> + * @ throws IllegalAccessException if an error occurs <nl> + * @ throws IOException if an error occurs <nl> + * / <nl> + public AuditListener createListener ( Task aTask ) <nl> + throws ClassNotFoundException , InstantiationException , <nl> + IllegalAccessException , IOException <nl> + { <nl> + final Class clazz = Class . forName ( mClassName ) ; <nl> + final AuditListener listener = ( AuditListener ) clazz . newInstance ( ) ; <nl> + if ( listener instanceof Streamable ) { <nl> + final Streamable o = ( Streamable ) listener ; <nl> + o . setOutputStream ( createOutputStream ( aTask ) ) ; <nl> + } <nl> + return listener ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return an output stream to log with <nl> + * @ param aTask the task to possibly log to <nl> + * @ throws IOException if an error occurs <nl> + * / <nl> + protected OutputStream createOutputStream ( Task aTask ) <nl> + throws IOException <nl> + { <nl> + if ( mToFile = = null ) { <nl> + return new LogOutputStream ( aTask , Project . MSG _ INFO ) ; <nl> + } <nl> + return new FileOutputStream ( mToFile ) ; <nl> } <nl> - return retVal ; <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 0475d78 . . 1f4b1d1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 21 , 20 + 21 , 23 @ @ package com . puppycrawl . tools . checkstyle ; <nl> import antlr . RecognitionException ; <nl> import antlr . TokenStreamException ; <nl> import antlr . collections . AST ; <nl> + import java . io . File ; <nl> import java . io . FileNotFoundException ; <nl> import java . io . FileReader ; <nl> import java . io . IOException ; <nl> import java . io . LineNumberReader ; <nl> + import java . io . OutputStream ; <nl> import java . io . PrintStream ; <nl> import java . util . ArrayList ; <nl> + import java . util . Iterator ; <nl> import java . util . Properties ; <nl> import org . apache . regexp . RESyntaxException ; <nl> - import java . io . File ; <nl> <nl> / * * <nl> * This class provides the functionality to check a file . <nl> * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > <nl> - * * / <nl> + * @ author < a href = " mailto : stephane . bailliez @ wanadoo . fr " > Stephane Bailliez < / a > <nl> + * / <nl> class Checker <nl> implements Defn <nl> { <nl> @ @ - 44 , 6 + 47 , 9 @ @ class Checker <nl> / * * cache file * * / <nl> private final PropertyCacheFile mCache ; <nl> <nl> + / * * vector of listeners * / <nl> + private final ArrayList mListeners = new ArrayList ( ) ; <nl> + <nl> / * * <nl> * Constructs the object . <nl> * @ param aConfig contains the configuration to check with <nl> @ @ - 63 , 6 + 69 , 54 @ @ class Checker <nl> void destroy ( ) <nl> { <nl> mCache . destroy ( ) ; <nl> + <nl> + / / close all streamable listeners <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final Object obj = it . next ( ) ; <nl> + if ( obj instanceof Streamable ) { <nl> + final Streamable str = ( Streamable ) obj ; <nl> + final OutputStream os = str . getOutputStream ( ) ; <nl> + / / close only those that can be closed . . . <nl> + if ( ( os ! = System . out ) & & ( os ! = System . err ) & & ( os ! = null ) ) { <nl> + try { <nl> + os . flush ( ) ; <nl> + os . close ( ) ; <nl> + } <nl> + catch ( IOException ignored ) { <nl> + } <nl> + } <nl> + } <nl> + it . remove ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Add the listener that will be used to receive events from the audit <nl> + * @ param aListener the nosy thing <nl> + * / <nl> + void addListener ( AuditListener aListener ) <nl> + { <nl> + mListeners . add ( aListener ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Processes a set of files . <nl> + * Once this is done , it is highly recommended to call for <nl> + * the destroy method to close and remove the listeners . <nl> + * @ param aFiles the list of files to be audited . <nl> + * @ return the total number of errors found <nl> + * @ see destroy ( ) <nl> + * / <nl> + int process ( String [ ] aFiles ) <nl> + { <nl> + int total = 0 ; <nl> + fireAuditStarted ( ) ; <nl> + for ( int i = 0 ; i < aFiles . length ; i + + ) { <nl> + total + = process ( aFiles [ i ] ) ; <nl> + } <nl> + fireAuditFinished ( ) ; <nl> + return total ; <nl> } <nl> <nl> / * * <nl> @ @ - 70 , 15 + 124 , 17 @ @ class Checker <nl> * @ return the number of errors found <nl> * @ param aFileName the name of the file to process <nl> * * / <nl> - int process ( String aFileName ) <nl> + private int process ( String aFileName ) <nl> { <nl> - final long timestamp = new File ( aFileName ) . lastModified ( ) ; <nl> + final File f = new File ( aFileName ) ; <nl> + final long timestamp = f . lastModified ( ) ; <nl> if ( mCache . alreadyChecked ( aFileName , timestamp ) ) { <nl> return 0 ; <nl> } <nl> <nl> LineText [ ] errors ; <nl> try { <nl> + fireFileStarted ( aFileName ) ; <nl> VerifierSingleton . getInstance ( ) . clearMessages ( ) ; <nl> VerifierSingleton . getInstance ( ) . setLines ( getLines ( aFileName ) ) ; <nl> final AST ast = getAST ( aFileName ) ; <nl> @ @ - 95 , 8 + 151 , 7 @ @ class Checker <nl> catch ( RecognitionException re ) { <nl> errors = new LineText [ ] { <nl> new LineText ( 0 , <nl> - " Got a RecognitionException - " + <nl> - re . getMessage ( ) ) } ; <nl> + " Got a RecognitionException - " + re . getMessage ( ) ) } ; <nl> } <nl> catch ( TokenStreamException te ) { <nl> errors = new LineText [ ] { <nl> @ @ - 108 , 8 + 163 , 10 @ @ class Checker <nl> mCache . checkedOk ( aFileName , timestamp ) ; <nl> } <nl> else { <nl> - displayErrors ( aFileName , errors ) ; <nl> + fireErrors ( aFileName , errors ) ; <nl> } <nl> + <nl> + fireFileFinished ( aFileName ) ; <nl> return errors . length ; <nl> } <nl> <nl> @ @ - 173 , 20 + 230 , 6 @ @ class Checker <nl> } <nl> <nl> / * * <nl> - * Displays the errors associated with a file name . The errors are formatted <nl> - * to be parsed by Emacs . <nl> - * @ param aFileName the file name to associate with the errors <nl> - * @ param aErrors the errors to display <nl> - * * / <nl> - private void displayErrors ( String aFileName , LineText [ ] aErrors ) <nl> - { <nl> - for ( int i = 0 ; i < aErrors . length ; i + + ) { <nl> - mLog . println ( aFileName + " : " + aErrors [ i ] . getLineNo ( ) + <nl> - " : " + aErrors [ i ] . getText ( ) ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> * @ return the header lines specified by a file in the supplied properties <nl> * set . If no file specified , or unable to read specified file , then an <nl> * empty list is returned . Errors are reported . <nl> @ @ - 208 , 5 + 251 , 72 @ @ class Checker <nl> return retVal ; <nl> } <nl> <nl> + / * * notify all listeners about the audit start * / <nl> + protected void fireAuditStarted ( ) <nl> + { <nl> + final AuditEvent evt = new AuditEvent ( this ) ; <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final AuditListener listener = ( AuditListener ) it . next ( ) ; <nl> + listener . auditStarted ( evt ) ; <nl> + } <nl> + } <nl> + <nl> + / * * notify all listeners about the audit end * / <nl> + protected void fireAuditFinished ( ) <nl> + { <nl> + final AuditEvent evt = new AuditEvent ( this ) ; <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final AuditListener listener = ( AuditListener ) it . next ( ) ; <nl> + listener . auditFinished ( evt ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * notify all listeners about the beginning of a file audit <nl> + * @ param aFileName the file to be audited <nl> + * / <nl> + protected void fireFileStarted ( String aFileName ) <nl> + { <nl> + final AuditEvent evt = new AuditEvent ( this , aFileName ) ; <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final AuditListener listener = ( AuditListener ) it . next ( ) ; <nl> + listener . fileStarted ( evt ) ; <nl> + } <nl> + } <nl> <nl> + / * * <nl> + * notify all listeners about the end of a file audit <nl> + * @ param aFileName the audited file <nl> + * / <nl> + protected void fireFileFinished ( String aFileName ) <nl> + { <nl> + final AuditEvent evt = new AuditEvent ( this , aFileName ) ; <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final AuditListener listener = ( AuditListener ) it . next ( ) ; <nl> + listener . fileFinished ( evt ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * notify all listeners about the errors in a file . <nl> + * @ param aFileName the audited file <nl> + * @ param aErrors the audit errors from the file <nl> + * / <nl> + protected void fireErrors ( String aFileName , LineText [ ] aErrors ) <nl> + { <nl> + for ( int i = 0 ; i < aErrors . length ; i + + ) { <nl> + final AuditEvent evt = <nl> + new AuditEvent ( this , aFileName , aErrors [ i ] . getLineNo ( ) , <nl> + aErrors [ i ] . getText ( ) ) ; <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final AuditListener listener = ( AuditListener ) it . next ( ) ; <nl> + listener . addError ( evt ) ; <nl> + } <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> index 2ecc4ac . . 6da04f1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 18 , 7 + 18 , 10 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . OutputStream ; <nl> import org . apache . regexp . RESyntaxException ; <nl> <nl> / * * <nl> @ @ - 38 , 11 + 41 , 54 @ @ public final class Main <nl> usage ( ) ; <nl> } <nl> <nl> + / / be brain dead about arguments parsing <nl> + String format = " plain " ; <nl> + String output = null ; <nl> + String [ ] files = null ; <nl> + for ( int i = 0 ; i < aArgs . length ; i + + ) { <nl> + if ( " - f " . equals ( aArgs [ i ] ) ) { <nl> + format = aArgs [ + + i ] ; <nl> + } <nl> + else if ( " - o " . equals ( aArgs [ i ] ) ) { <nl> + output = aArgs [ + + i ] ; <nl> + } <nl> + else { <nl> + files = new String [ aArgs . length - i ] ; <nl> + System . arraycopy ( aArgs , i , files , 0 , files . length ) ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + / / create the appropriate listener <nl> + OutputStream out = System . out ; <nl> + if ( output ! = null ) { <nl> + try { <nl> + out = new FileOutputStream ( output ) ; <nl> + } <nl> + catch ( FileNotFoundException e ) { <nl> + System . out . println ( " Could not find file : ' " + output + " ' " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + } <nl> + AuditListener listener = null ; <nl> + if ( " xml " . equals ( format ) ) { <nl> + listener = new XMLLogger ( out ) ; <nl> + } <nl> + else if ( " plain " . equals ( format ) ) { <nl> + listener = new DefaultLogger ( out ) ; <nl> + } <nl> + else { <nl> + System . out . println ( " Invalid format : ( " + format + <nl> + " ) . Must be ' plain ' or ' xml ' . " ) ; <nl> + usage ( ) ; <nl> + } <nl> + <nl> Checker c = null ; <nl> try { <nl> c = new Checker ( new Configuration ( System . getProperties ( ) , <nl> System . out ) , <nl> System . out ) ; <nl> + c . addListener ( listener ) ; <nl> } <nl> catch ( RESyntaxException rese ) { <nl> System . out . println ( " Unable to create an regexp object : " + <nl> @ @ - 56 , 13 + 102 , 10 @ @ public final class Main <nl> System . exit ( 1 ) ; <nl> } <nl> <nl> - int numErrors = 0 ; <nl> - for ( int i = 0 ; i < aArgs . length ; i + + ) { <nl> - numErrors + = c . process ( aArgs [ i ] ) ; <nl> - } <nl> + final int numErrs = c . process ( files ) ; <nl> <nl> c . destroy ( ) ; <nl> - System . exit ( numErrors ) ; <nl> + System . exit ( numErrs ) ; <nl> } <nl> <nl> / * * Prints the usage information . * * / <nl> @ @ - 70 , 7 + 113 , 13 @ @ public final class Main <nl> { <nl> System . out . println ( <nl> " Usage : java " + <nl> - com . puppycrawl . tools . checkstyle . Main . class . getName ( ) + " file . . . " ) ; <nl> + Main . class . getName ( ) + " < options > < file1 > < file2 > . . . . . . " ) ; <nl> + System . out . println ( " Options " ) ; <nl> + System . out . println ( <nl> + " \ t - f < format > \ tsets output format . ( plain | xml ) . " + <nl> + " Default to plain . " ) ; <nl> + System . out . println ( " \ t - o < file > \ tsets output file name . " + <nl> + " Defaults to stdout " ) ; <nl> System . exit ( 1 ) ; <nl> } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 7ff73ad . . 503b113 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 6 , 14 + 6 , 33 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . io . LineNumberReader ; <nl> + import java . io . OutputStream ; <nl> import java . io . PrintStream ; <nl> import java . net . URL ; <nl> import java . util . Properties ; <nl> import junit . framework . TestCase ; <nl> + import org . apache . regexp . RESyntaxException ; <nl> <nl> public class CheckerTest <nl> extends TestCase <nl> { <nl> + / * * a brief logger that only display info about errors * / <nl> + protected static class BriefLogger <nl> + extends DefaultLogger <nl> + { <nl> + public BriefLogger ( OutputStream out ) <nl> + { <nl> + super ( out ) ; <nl> + } <nl> + public void auditStarted ( AuditEvent evt ) { } <nl> + public void fileFinished ( AuditEvent evt ) { } <nl> + public void fileStarted ( AuditEvent evt ) { } <nl> + / / public void auditFinished ( AuditEvent evt ) { <nl> + <nl> + / / writer . flush ( ) ; <nl> + / / } <nl> + } <nl> + <nl> private final ByteArrayOutputStream mBAOS = new ByteArrayOutputStream ( ) ; <nl> private final PrintStream mStream = new PrintStream ( mBAOS ) ; <nl> private final Configuration mConfig = new Configuration ( ) ; <nl> @ @ - 36 , 10 + 55 , 20 @ @ public class CheckerTest <nl> return f . getCanonicalPath ( ) ; <nl> } <nl> <nl> + protected Checker createChecker ( ) <nl> + throws RESyntaxException <nl> + { <nl> + final AuditListener listener = new BriefLogger ( mStream ) ; <nl> + final Checker c = new Checker ( mConfig , mStream ) ; <nl> + c . addListener ( listener ) ; <nl> + return c ; <nl> + } <nl> + <nl> private void verify ( Checker aC , String aFilename , String [ ] aExpected ) <nl> throws Exception <nl> { <nl> - final int errs = aC . process ( aFilename ) ; <nl> + mStream . flush ( ) ; <nl> + final int errs = aC . process ( new String [ ] { aFilename } ) ; <nl> <nl> / / process each of the lines <nl> final ByteArrayInputStream bais = <nl> @ @ - 57 , 7 + 86 , 7 @ @ public class CheckerTest <nl> public void testWhitespace ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputWhitespace . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 79 , 7 + 108 , 7 @ @ public class CheckerTest <nl> throws Exception <nl> { <nl> mConfig . setIgnoreWhitespace ( true ) ; <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputWhitespace . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 91 , 7 + 120 , 7 @ @ public class CheckerTest <nl> public void testBraces ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputBraces . java " ) ; <nl> final String [ ] expected = { <nl> filepath + " : 29 : ' do ' construct must use ' { } ' s . " , <nl> @ @ - 122 , 7 + 151 , 7 @ @ public class CheckerTest <nl> throws Exception <nl> { <nl> mConfig . setIgnoreBraces ( true ) ; <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputBraces . java " ) ; <nl> final String [ ] expected = { <nl> filepath + " : 41 : ' ; ' is not preceeded with whitespace . " , <nl> @ @ - 135 , 7 + 164 , 7 @ @ public class CheckerTest <nl> public void testTags ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputTags . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 166 , 7 + 195 , 7 @ @ public class CheckerTest <nl> public void testInner ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputInner . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 186 , 7 + 215 , 7 @ @ public class CheckerTest <nl> throws Exception <nl> { <nl> mConfig . setPublicMemberPat ( " ^ r [ A - Z ] " ) ; <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputInner . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 205 , 7 + 234 , 7 @ @ public class CheckerTest <nl> public void testSimple ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputSimple . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 231 , 7 + 260 , 7 @ @ public class CheckerTest <nl> public void testStrictJavadoc ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputPublicOnly . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 269 , 7 + 298 , 7 @ @ public class CheckerTest <nl> throws Exception <nl> { <nl> mConfig . setRelaxJavadoc ( true ) ; <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputPublicOnly . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 295 , 7 + 324 , 7 @ @ public class CheckerTest <nl> public void testHeader ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " inputHeader . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 309 , 7 + 338 , 7 @ @ public class CheckerTest <nl> public void testImport ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputImport . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = {

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 61a3a26 . . 907d9e5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 275 , 9 + 275 , 12 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 
 / / comparing to 1 as there is only one legal file in input 
 final int numLegalFiles = 1 ; 
 - assertEquals ( numLegalFiles , counter ) ; 
 - assertEquals ( numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; 
 - assertEquals ( numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; 
 + assertEquals ( " There were more legal files than expected " , 
 + numLegalFiles , counter ) ; 
 + assertEquals ( " Audit was started on larger amount of files than expected " , 
 + numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; 
 + assertEquals ( " Audit was finished on larger amount of files than expected " , 
 + numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 303 , 9 + 306 , 12 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 
 / / comparing to 0 as there is no legal file in input 
 final int numLegalFiles = 0 ; 
 - assertEquals ( numLegalFiles , counter ) ; 
 - assertEquals ( numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; 
 - assertEquals ( numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; 
 + assertEquals ( " There were more legal files than expected " , 
 + numLegalFiles , counter ) ; 
 + assertEquals ( " Audit was started on larger amount of files than expected " , 
 + numLegalFiles , auditAdapter . getNumFilesStarted ( ) ) ; 
 + assertEquals ( " Audit was finished on larger amount of files than expected " , 
 + numLegalFiles , auditAdapter . getNumFilesFinished ( ) ) ; 
 } 
 
 @ SuppressWarnings ( " deprecation " ) 
 @ @ - 330 , 7 + 336 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( UnsupportedEncodingException ex ) { 
 - assertEquals ( " unsupported charset : ' UNKNOWN - CHARSET ' " , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is not expected " , 
 + " unsupported charset : ' UNKNOWN - CHARSET ' " , ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 343 , 8 + 350 , 9 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertEquals ( " if no custom moduleFactory is set , " 
 - + " moduleClassLoader must be specified " , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is not expected " , 
 + " if no custom moduleFactory is set , moduleClassLoader must be specified " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 370 , 15 + 378 , 19 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 checker . finishLocalSetup ( ) ; 
 
 final Context context = ( Context ) Whitebox . getInternalState ( checker , " childContext " ) ; 
 - assertEquals ( System . getProperty ( " file . encoding " , " UTF - 8 " ) , context . get ( " charset " ) ) ; 
 - assertEquals ( contextClassLoader , context . get ( " classLoader " ) ) ; 
 - assertEquals ( " error " , context . get ( " severity " ) ) ; 
 - assertEquals ( " testBaseDir " , context . get ( " basedir " ) ) ; 
 + assertEquals ( " Charset was different than expected " , 
 + System . getProperty ( " file . encoding " , " UTF - 8 " ) , context . get ( " charset " ) ) ; 
 + assertEquals ( " Was used unsufficient classloader " , 
 + contextClassLoader , context . get ( " classLoader " ) ) ; 
 + assertEquals ( " Severity is set to unexpected value " , 
 + " error " , context . get ( " severity " ) ) ; 
 + assertEquals ( " Basedir is set to unexpected value " , 
 + " testBaseDir " , context . get ( " basedir " ) ) ; 
 
 final Field sLocale = LocalizedMessage . class . getDeclaredField ( " sLocale " ) ; 
 sLocale . setAccessible ( true ) ; 
 final Locale locale = ( Locale ) sLocale . get ( null ) ; 
 - assertEquals ( Locale . ITALY , locale ) ; 
 + assertEquals ( " Locale is set to unexpected value " , Locale . ITALY , locale ) ; 
 } 
 
 @ Test 
 @ @ - 394 , 7 + 406 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertEquals ( " java . lang . String is not allowed as a child in Checker " , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is not expected " , 
 + " java . lang . String is not allowed as a child in Checker " , ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 426 , 7 + 439 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 fail ( " Exception did not happen " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 - assertTrue ( ex . getCause ( ) instanceof IOException ) ; 
 + assertTrue ( " Cause of exception differs from IOException " , 
 + ex . getCause ( ) instanceof IOException ) ; 
 } 
 } 
 
 @ @ - 437 , 7 + 451 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 @ Test 
 public void testCacheAndCheckWhichDoesNotImplementExternalResourceHolderInterface ( ) 
 throws Exception { 
 - assertFalse ( ExternalResourceHolder . class . isAssignableFrom ( HiddenFieldCheck . class ) ) ; 
 + assertFalse ( " ExternalResourceHolder has changed his parent " , 
 + ExternalResourceHolder . class . isAssignableFrom ( HiddenFieldCheck . class ) ) ; 
 final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 
 final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 @ @ - 470 , 7 + 485 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 final Properties cacheAfterSecondRun = new Properties ( ) ; 
 cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 
 - assertEquals ( cacheAfterFirstRun , cacheAfterSecondRun ) ; 
 + assertEquals ( " Cache from first run differs from second run cache " , 
 + cacheAfterFirstRun , cacheAfterSecondRun ) ; 
 } 
 
 @ Test 
 @ @ - 498 , 12 + 514 , 15 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 
 / / There should 2 objects in cache : processed file ( file . java ) and checker configuration . 
 final int expectedNumberOfObjectsInCache = 2 ; 
 - assertEquals ( expectedNumberOfObjectsInCache , cache . size ( ) ) ; 
 + assertEquals ( " Cache has unexpected size " , 
 + expectedNumberOfObjectsInCache , cache . size ( ) ) ; 
 
 final String expectedConfigHash = " 68EE3C3B4593FD8D86159C670C504542E20C6FA0 " ; 
 - assertEquals ( expectedConfigHash , cache . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 + assertEquals ( " Cache has unexpected hash " , 
 + expectedConfigHash , cache . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 
 - assertNotNull ( cache . getProperty ( tmpFile . getPath ( ) ) ) ; 
 + assertNotNull ( " Cache file has null path " , 
 + cache . getProperty ( tmpFile . getPath ( ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 531 , 8 + 550 , 10 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 final Properties cacheAfterClear = new Properties ( ) ; 
 cacheAfterClear . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 
 - assertEquals ( 1 , cacheAfterClear . size ( ) ) ; 
 - assertNotNull ( cacheAfterClear . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 + assertEquals ( " Cache has unexpected size " , 
 + 1 , cacheAfterClear . size ( ) ) ; 
 + assertNotNull ( " Cache has null hash " , 
 + cacheAfterClear . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 
 final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 @ @ - 542 , 13 + 563 , 15 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 final Properties cacheAfterSecondRun = new Properties ( ) ; 
 cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 
 - assertNotNull ( cacheAfterSecondRun . getProperty ( pathToEmptyFile ) ) ; 
 - assertEquals ( 
 + assertNotNull ( " Cache has null path " , 
 + cacheAfterSecondRun . getProperty ( pathToEmptyFile ) ) ; 
 + assertEquals ( " Cash have changed it hash " , 
 cacheAfterClear . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , 
 cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) 
 ) ; 
 final int expectedNumberOfObjectsInCacheAfterSecondRun = 2 ; 
 - assertEquals ( expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; 
 + assertEquals ( " Cache has changed number of items " , 
 + expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 581 , 9 + 604 , 12 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 / / - @ cs [ IllegalCatchExtended ] Testing for catch Error is part of 100 % coverage . 
 catch ( Error error ) { 
 - assertThat ( error . getCause ( ) , instanceOf ( IOError . class ) ) ; 
 - assertThat ( error . getCause ( ) . getCause ( ) , instanceOf ( InternalError . class ) ) ; 
 - assertEquals ( errorMessage , error . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 + assertThat ( " Error cause differs from IOError " , 
 + error . getCause ( ) , instanceOf ( IOError . class ) ) ; 
 + assertThat ( " Error cause is not InternalError " , 
 + error . getCause ( ) . getCause ( ) , instanceOf ( InternalError . class ) ) ; 
 + assertEquals ( " Error message is not expected " , 
 + errorMessage , error . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 594 , 7 + 620 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 @ Test 
 public void testCacheAndFilterWhichDoesNotImplementExternalResourceHolderInterface ( ) 
 throws Exception { 
 - assertFalse ( ExternalResourceHolder . class . isAssignableFrom ( DummyFilter . class ) ) ; 
 + assertFalse ( " ExternalResourceHolder has changed its parent " , 
 + ExternalResourceHolder . class . isAssignableFrom ( DummyFilter . class ) ) ; 
 final DefaultConfiguration filterConfig = createCheckConfig ( DummyFilter . class ) ; 
 
 final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyle _ checks " ) ; 
 @ @ - 620 , 16 + 647 , 20 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 
 assertEquals ( 
 + " Cache file has changed its path " , 
 cacheAfterFirstRun . getProperty ( pathToEmptyFile ) , 
 cacheAfterSecondRun . getProperty ( pathToEmptyFile ) 
 ) ; 
 assertEquals ( 
 + " Cache has changed its hash " , 
 cacheAfterFirstRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , 
 cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) 
 ) ; 
 final int expectedNumberOfObjectsInCache = 2 ; 
 - assertEquals ( expectedNumberOfObjectsInCache , cacheAfterFirstRun . size ( ) ) ; 
 - assertEquals ( expectedNumberOfObjectsInCache , cacheAfterSecondRun . size ( ) ) ; 
 + assertEquals ( " Number of items in cache differs from expected " , 
 + expectedNumberOfObjectsInCache , cacheAfterFirstRun . size ( ) ) ; 
 + assertEquals ( " Number of items in cache differs from expected " , 
 + expectedNumberOfObjectsInCache , cacheAfterSecondRun . size ( ) ) ; 
 } 
 
 / * * 
 @ @ - 672 , 7 + 703 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 cacheAfterFirstRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 
 final int expectedNumberOfObjectsInCacheAfterFirstRun = 3 ; 
 - assertEquals ( expectedNumberOfObjectsInCacheAfterFirstRun , cacheAfterFirstRun . size ( ) ) ; 
 + assertEquals ( " Number of items in cache differs from expected " , 
 + expectedNumberOfObjectsInCacheAfterFirstRun , cacheAfterFirstRun . size ( ) ) ; 
 
 / / Change a list of external resources which are used by the check 
 final String secondExternalResourceLocation = " checks " + File . separator 
 @ @ - 685 , 23 + 717 , 28 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 final Properties cacheAfterSecondRun = new Properties ( ) ; 
 cacheAfterSecondRun . load ( Files . newBufferedReader ( cacheFile . toPath ( ) ) ) ; 
 
 - assertEquals ( 
 + assertEquals ( " Cache file has changed its path " , 
 cacheAfterFirstRun . getProperty ( pathToEmptyFile ) , 
 cacheAfterSecondRun . getProperty ( pathToEmptyFile ) 
 ) ; 
 assertEquals ( 
 + " Cache has changed its hash " , 
 cacheAfterFirstRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) , 
 cacheAfterSecondRun . getProperty ( PropertyCacheFile . CONFIG _ HASH _ KEY ) 
 ) ; 
 - assertEquals ( 
 + assertEquals ( " Cache has changed its resource key " , 
 cacheAfterFirstRun . getProperty ( firstExternalResourceKey ) , 
 cacheAfterSecondRun . getProperty ( firstExternalResourceKey ) 
 ) ; 
 - assertNotNull ( cacheAfterFirstRun . getProperty ( firstExternalResourceKey ) ) ; 
 + assertNotNull ( " Cache has null as a resource key " , 
 + cacheAfterFirstRun . getProperty ( firstExternalResourceKey ) ) ; 
 final int expectedNumberOfObjectsInCacheAfterSecondRun = 4 ; 
 - assertEquals ( expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; 
 - assertNull ( cacheAfterFirstRun . getProperty ( secondExternalResourceKey ) ) ; 
 - assertNotNull ( cacheAfterSecondRun . getProperty ( secondExternalResourceKey ) ) ; 
 + assertEquals ( " Number of items in cache differs from expected " , 
 + expectedNumberOfObjectsInCacheAfterSecondRun , cacheAfterSecondRun . size ( ) ) ; 
 + assertNull ( " Cache has not null as a resource key " , 
 + cacheAfterFirstRun . getProperty ( secondExternalResourceKey ) ) ; 
 + assertNotNull ( " Cache has null as a resource key " , 
 + cacheAfterSecondRun . getProperty ( secondExternalResourceKey ) ) ; 
 } 
 
 @ Test 
 @ @ - 795 , 7 + 832 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; 
 final List < String > expected = 
 Arrays . asList ( " beginProcessing " , " finishProcessing " , " destroy " ) ; 
 - assertArrayEquals ( expected . toArray ( ) , fileSet . getMethodCalls ( ) . toArray ( ) ) ; 
 + assertArrayEquals ( " Method calls were not expected " , 
 + expected . toArray ( ) , fileSet . getMethodCalls ( ) . toArray ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 803 , 7 + 841 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 final DummyFileSet fileSet = new DummyFileSet ( ) ; 
 final Checker checker = new Checker ( ) ; 
 checker . addFileSetCheck ( fileSet ) ; 
 - assertEquals ( checker , fileSet . getInternalMessageDispatcher ( ) ) ; 
 + assertEquals ( " Message dispatcher was not expected " , 
 + checker , fileSet . getInternalMessageDispatcher ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 886 , 10 + 925 , 14 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 
 verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; 
 
 - assertEquals ( 1 , testInfoOutputStream . getCloseCount ( ) ) ; 
 - assertEquals ( 3 , testInfoOutputStream . getFlushCount ( ) ) ; 
 - assertEquals ( 1 , testErrorOutputStream . getCloseCount ( ) ) ; 
 - assertEquals ( 1 , testErrorOutputStream . getFlushCount ( ) ) ; 
 + assertEquals ( " Close count was not expected " , 
 + 1 , testInfoOutputStream . getCloseCount ( ) ) ; 
 + assertEquals ( " Flush count was not expected " , 
 + 3 , testInfoOutputStream . getFlushCount ( ) ) ; 
 + assertEquals ( " Close count was not expected " , 
 + 1 , testErrorOutputStream . getCloseCount ( ) ) ; 
 + assertEquals ( " Flush count was not expected " , 
 + 1 , testErrorOutputStream . getFlushCount ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 905 , 8 + 948 , 10 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 
 verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; 
 
 - assertEquals ( 1 , testInfoOutputStream . getCloseCount ( ) ) ; 
 - assertEquals ( 0 , testInfoOutputStream . getFlushCount ( ) ) ; 
 + assertEquals ( " Close count was not expected " , 
 + 1 , testInfoOutputStream . getCloseCount ( ) ) ; 
 + assertEquals ( " Flush count was not expected " , 
 + 0 , testInfoOutputStream . getFlushCount ( ) ) ; 
 } 
 
 private static class DummyFilter implements Filter { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 index 53620d2 . . 4211573 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 @ @ - 111 , 10 + 111 , 13 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 antTask . execute ( ) ; 
 
 / / then 
 - assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; 
 + assertTrue ( " Checker is not processed " , 
 + TestRootModuleChecker . isProcessed ( ) ) ; 
 final List < File > filesToCheck = TestRootModuleChecker . getFilesToCheck ( ) ; 
 - assertThat ( filesToCheck . size ( ) , is ( 1 ) ) ; 
 - assertThat ( filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + assertThat ( " There more files to check then expected " , 
 + filesToCheck . size ( ) , is ( 1 ) ) ; 
 + assertThat ( " The path of file differs from expected " , 
 + filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 133 , 10 + 136 , 13 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 antTask . execute ( ) ; 
 
 / / then 
 - assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; 
 + assertTrue ( " Checker is not processed " , 
 + TestRootModuleChecker . isProcessed ( ) ) ; 
 final List < File > filesToCheck = TestRootModuleChecker . getFilesToCheck ( ) ; 
 - assertThat ( filesToCheck . size ( ) , is ( 1 ) ) ; 
 - assertThat ( filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + assertThat ( " There more files to check then expected " , 
 + filesToCheck . size ( ) , is ( 1 ) ) ; 
 + assertThat ( " The path of file differs from expected " , 
 + filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 147 , 7 + 153 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 antTask . execute ( ) ; 
 
 - assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; 
 + assertTrue ( " Checker is not processed " , 
 + TestRootModuleChecker . isProcessed ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 169 , 7 + 176 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertEquals ( " Must specify ' config ' . " , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " Must specify ' config ' . " , ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 184 , 7 + 192 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; 
 + assertTrue ( " Error message is unexpected " , 
 + ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; 
 } 
 } 
 
 @ @ - 199 , 7 + 208 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; 
 + assertTrue ( " Error message is unexpected " , 
 + ex . getMessage ( ) . startsWith ( " Unable to create Root Module : configLocation " ) ) ; 
 } 
 } 
 
 @ @ - 211 , 7 + 221 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertEquals ( " Must specify at least one of ' file ' or nested ' fileset ' or ' path ' . " , 
 + assertEquals ( " Error message is unexpected " , 
 + " Must specify at least one of ' file ' or nested ' fileset ' or ' path ' . " , 
 ex . getMessage ( ) ) ; 
 } 
 } 
 @ @ - 226 , 7 + 237 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertEquals ( " Got 0 errors and 1 warnings . " , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " Got 0 errors and 1 warnings . " , ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 257 , 7 + 269 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 catch ( BuildException ex ) { 
 final Map < String , Object > hashtable = project . getProperties ( ) ; 
 final Object propertyValue = hashtable . get ( failurePropertyName ) ; 
 - assertEquals ( " Got 2 errors and 0 warnings . " , propertyValue ) ; 
 + assertEquals ( " Number of errors is unexpected " , 
 + " Got 2 errors and 0 warnings . " , propertyValue ) ; 
 } 
 } 
 
 @ @ - 291 , 17 + 304 , 18 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 antTask . execute ( ) ; 
 
 final List < String > output = FileUtils . readLines ( outputFile ) ; 
 - assertEquals ( " Starting audit . . . " , output . get ( 0 ) ) ; 
 - assertTrue ( output . get ( 1 ) . startsWith ( " [ WARN ] " ) ) ; 
 - assertTrue ( output . get ( 1 ) . endsWith ( " InputCheckstyleAntTaskError . java : 4 : " 
 + final String errorMessage = " Content of file with violations differs from expected " ; 
 + assertEquals ( errorMessage , " Starting audit . . . " , output . get ( 0 ) ) ; 
 + assertTrue ( errorMessage , output . get ( 1 ) . startsWith ( " [ WARN ] " ) ) ; 
 + assertTrue ( errorMessage , output . get ( 1 ) . endsWith ( " InputCheckstyleAntTaskError . java : 4 : " 
 + " @ incomplete = Some javadoc [ WriteTag ] " ) ) ; 
 - assertTrue ( output . get ( 2 ) . startsWith ( " [ ERROR ] " ) ) ; 
 - assertTrue ( output . get ( 2 ) . endsWith ( " InputCheckstyleAntTaskError . java : 7 : " 
 + assertTrue ( errorMessage , output . get ( 2 ) . startsWith ( " [ ERROR ] " ) ) ; 
 + assertTrue ( errorMessage , output . get ( 2 ) . endsWith ( " InputCheckstyleAntTaskError . java : 7 : " 
 + " Line is longer than 70 characters ( found 80 ) . [ LineLength ] " ) ) ; 
 - assertTrue ( output . get ( 3 ) . startsWith ( " [ ERROR ] " ) ) ; 
 - assertTrue ( output . get ( 3 ) . endsWith ( " InputCheckstyleAntTaskError . java : 9 : " 
 + assertTrue ( errorMessage , output . get ( 3 ) . startsWith ( " [ ERROR ] " ) ) ; 
 + assertTrue ( errorMessage , output . get ( 3 ) . endsWith ( " InputCheckstyleAntTaskError . java : 9 : " 
 + " Line is longer than 70 characters ( found 81 ) . [ LineLength ] " ) ) ; 
 - assertEquals ( " Audit done . " , output . get ( 4 ) ) ; 
 + assertEquals ( errorMessage , " Audit done . " , output . get ( 4 ) ) ; 
 } 
 
 @ Test 
 @ @ - 328 , 7 + 342 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertEquals ( expected , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + expected , ex . getMessage ( ) ) ; 
 } 
 try { 
 antTask = new CheckstyleAntTask ( ) ; 
 @ @ - 337 , 7 + 352 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertEquals ( expected , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + expected , ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 359 , 7 + 375 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertTrue ( ex . getMessage ( ) . startsWith ( " Error loading Properties file " ) ) ; 
 + assertTrue ( " Error message is unexpected " , 
 + ex . getMessage ( ) . startsWith ( " Error loading Properties file " ) ) ; 
 } 
 } 
 
 @ @ - 383 , 7 + 400 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 for ( int i = 0 ; i < expected . size ( ) ; i + + ) { 
 final String line = expected . get ( i ) ; 
 if ( ! line . startsWith ( " < checkstyle version " ) & & ! line . startsWith ( " < file " ) ) { 
 - assertEquals ( line , actual . get ( i ) ) ; 
 + assertEquals ( " Content of file with violations differs from expected " , 
 + line , actual . get ( i ) ) ; 
 } 
 } 
 } 
 @ @ - 401 , 7 + 419 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create listeners : formatters " ) ) ; 
 + assertTrue ( " Error message is unexpected " , 
 + ex . getMessage ( ) . startsWith ( " Unable to create listeners : formatters " ) ) ; 
 } 
 } 
 
 @ @ - 413 , 7 + 432 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertEquals ( " foo is not a legal value for this attribute " , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " foo is not a legal value for this attribute " , ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 422 , 7 + 442 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 final String customName = " customName " ; 
 final CheckstyleAntTask . Listener listener = new CheckstyleAntTask . Listener ( ) ; 
 listener . setClassname ( customName ) ; 
 - assertEquals ( customName , listener . getClassname ( ) ) ; 
 + assertEquals ( " Class name is unexpected " , 
 + customName , listener . getClassname ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 430 , 14 + 451 , 16 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 final String filename = getPath ( " ant / checkstyleAntTest . properties " ) ; 
 final CheckstyleAntTask . Property property = new CheckstyleAntTask . Property ( ) ; 
 property . setFile ( new File ( filename ) ) ; 
 - assertEquals ( property . getValue ( ) , new File ( filename ) . getAbsolutePath ( ) ) ; 
 + assertEquals ( " File path is unexpected " , 
 + property . getValue ( ) , new File ( filename ) . getAbsolutePath ( ) ) ; 
 } 
 
 @ Test 
 public void testDefaultLoggerListener ( ) throws IOException { 
 final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 formatter . setUseFile ( false ) ; 
 - assertTrue ( formatter . createListener ( null ) instanceof DefaultLogger ) ; 
 + assertTrue ( " Listener instance has unexpected type " , 
 + formatter . createListener ( null ) instanceof DefaultLogger ) ; 
 } 
 
 @ Test 
 @ @ - 445 , 7 + 468 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 formatter . setUseFile ( false ) ; 
 formatter . setTofile ( new File ( " target / " ) ) ; 
 - assertTrue ( formatter . createListener ( null ) instanceof DefaultLogger ) ; 
 + assertTrue ( " Listener instance has unexpected type " , 
 + formatter . createListener ( null ) instanceof DefaultLogger ) ; 
 } 
 
 @ Test 
 @ @ - 455 , 7 + 479 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 formatter . setType ( formatterType ) ; 
 formatter . setUseFile ( false ) ; 
 - assertTrue ( formatter . createListener ( null ) instanceof XMLLogger ) ; 
 + assertTrue ( " Listener instance has unexpected type " , 
 + formatter . createListener ( null ) instanceof XMLLogger ) ; 
 } 
 
 @ Test 
 @ @ - 466 , 7 + 491 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 formatter . setType ( formatterType ) ; 
 formatter . setUseFile ( false ) ; 
 formatter . setTofile ( new File ( " target / " ) ) ; 
 - assertTrue ( formatter . createListener ( null ) instanceof XMLLogger ) ; 
 + assertTrue ( " Listener instance has unexpected type " , 
 + formatter . createListener ( null ) instanceof XMLLogger ) ; 
 } 
 
 @ Test 
 @ @ - 497 , 7 + 523 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to process files : " ) ) ; 
 + assertTrue ( " Error message is unexpected " , 
 + ex . getMessage ( ) . startsWith ( " Unable to process files : " ) ) ; 
 } 
 } 
 
 @ @ - 529 , 12 + 556 , 15 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 
 final List < MessageLevelPair > loggedMessages = antTask . getLoggedMessages ( ) ; 
 
 - assertEquals ( expectedList . size ( ) , loggedMessages . size ( ) ) ; 
 + assertEquals ( " Amount of log messages is unexpected " , 
 + expectedList . size ( ) , loggedMessages . size ( ) ) ; 
 for ( int i = 0 ; i < expectedList . size ( ) ; i + + ) { 
 final MessageLevelPair expected = expectedList . get ( i ) ; 
 final MessageLevelPair actual = loggedMessages . get ( i ) ; 
 - assertTrue ( actual . getMsg ( ) . startsWith ( expected . getMsg ( ) ) ) ; 
 - assertEquals ( expected . getLevel ( ) , actual . getLevel ( ) ) ; 
 + assertTrue ( " Log messages were expected " , 
 + actual . getMsg ( ) . startsWith ( expected . getMsg ( ) ) ) ; 
 + assertEquals ( " Log messages were expected " , 
 + expected . getLevel ( ) , actual . getLevel ( ) ) ; 
 } 
 
 }

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 index f6eecb5 . . 6ce69d1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 @ @ - 19 , 14 + 19 , 18 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 import java . io . File ; 
 + import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . OutputStream ; 
 import java . util . ArrayList ; 
 - import java . util . Iterator ; 
 import java . util . List ; 
 import org . apache . regexp . RESyntaxException ; 
 import org . apache . tools . ant . BuildException ; 
 import org . apache . tools . ant . DirectoryScanner ; 
 + import org . apache . tools . ant . Project ; 
 import org . apache . tools . ant . Task ; 
 + import org . apache . tools . ant . taskdefs . LogOutputStream ; 
 + import org . apache . tools . ant . types . EnumeratedAttribute ; 
 import org . apache . tools . ant . types . FileSet ; 
 
 / * * 
 @ @ - 37 , 10 + 41 , 20 @ @ import org . apache . tools . ant . types . FileSet ; 
 public class CheckStyleTask 
 extends Task 
 { 
 + / * * poor man ' s enum for an xml formatter * * / 
 + private static final String E _ XML = " xml " ; 
 + / * * poor man ' s enum for an plain formatter * * / 
 + private static final String E _ PLAIN = " plain " ; 
 + 
 / * * name of file to check * * / 
 private String mFileName ; 
 + 
 / * * contains the filesets to process * * / 
 private final List mFileSets = new ArrayList ( ) ; 
 + 
 + / * * contains the formatters to log to * * / 
 + private final List mFormatters = new ArrayList ( ) ; 
 + 
 / * * the configuration to pass to the checker * * / 
 private final Configuration mConfig = new Configuration ( ) ; 
 
 @ @ - 57 , 6 + 71 , 16 @ @ public class CheckStyleTask 
 mFileSets . add ( aFS ) ; 
 } 
 
 + / * * 
 + * Add a formatter 
 + * @ param aFormatter the formatter to add for logging . 
 + * / 
 + public void addFormatter ( Formatter aFormatter ) 
 + { 
 + mFormatters . add ( aFormatter ) ; 
 + } 
 + 
 + 
 / * * @ param aFile the file to be checked * * / 
 public void setFile ( File aFile ) 
 { 
 @ @ - 94 , 8 + 118 , 7 @ @ public class CheckStyleTask 
 mConfig . setMemberPat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse memberpattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to parse memberPattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 106 , 8 + 129 , 8 @ @ public class CheckStyleTask 
 mConfig . setPublicMemberPat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse publicmemberpattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( 
 + " Unable to parse publicMemberPattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 118 , 8 + 141 , 7 @ @ public class CheckStyleTask 
 mConfig . setParamPat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse parampattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to parse paramPattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 130 , 8 + 152 , 7 @ @ public class CheckStyleTask 
 mConfig . setStaticFinalPat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse constpattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to parse constPattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 142 , 8 + 163 , 7 @ @ public class CheckStyleTask 
 mConfig . setStaticPat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse staticpattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to parse staticPattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 154 , 8 + 174 , 7 @ @ public class CheckStyleTask 
 mConfig . setTypePat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse typepattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to parse typePattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 166 , 8 + 185 , 7 @ @ public class CheckStyleTask 
 mConfig . setHeaderFile ( aName . getAbsolutePath ( ) ) ; 
 } 
 catch ( IOException ex ) { 
 - throw new BuildException ( " Unable to read headerfile - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to read headerfile - " , ex ) ; 
 } 
 } 
 
 @ @ - 226 , 50 + 244 , 193 @ @ public class CheckStyleTask 
 } 
 
 / / Create the checker 
 - Checker c ; 
 + final int numErrs ; 
 + Checker c = null ; 
 try { 
 c = new Checker ( mConfig , System . out ) ; 
 + AuditListener [ ] listeners = getListeners ( ) ; 
 + for ( int i = 0 ; i < listeners . length ; i + + ) { 
 + c . addListener ( listeners [ i ] ) ; 
 + } 
 + final String [ ] files = scanFileSets ( ) ; 
 + numErrs = c . process ( files ) ; 
 + } 
 + catch ( Exception e ) { 
 + throw new BuildException ( " Unable to create a Checker " , e ) ; 
 } 
 - catch ( RESyntaxException e ) { 
 - e . printStackTrace ( ) ; 
 - throw new BuildException ( " Unable to create a Checker " , location ) ; 
 + finally { 
 + if ( c ! = null ) { 
 + c . destroy ( ) ; 
 + } 
 } 
 
 - / / Process the files 
 - int numErrs = 0 ; 
 - if ( mFileName ! = null ) { 
 - numErrs + = c . process ( mFileName ) ; 
 + if ( numErrs > 0 ) { 
 + throw new BuildException ( " Got " + numErrs + " errors . " , location ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Return the list of listeners set in this task . 
 + * @ return the list of listeners . 
 + * @ throws ClassNotFoundException if an error occurs 
 + * @ throws InstantiationException if an error occurs 
 + * @ throws IllegalAccessException if an error occurs 
 + * @ throws IOException if an error occurs 
 + * / 
 + protected AuditListener [ ] getListeners ( ) 
 + throws ClassNotFoundException , InstantiationException , 
 + IllegalAccessException , IOException 
 + { 
 + / / @ todo should we add a default plain stdout 
 + / / formatter ? 
 + if ( mFormatters . size ( ) = = 0 ) { 
 + final Formatter f = new Formatter ( ) ; 
 + final FormatterType type = new FormatterType ( ) ; 
 + type . setValue ( E _ PLAIN ) ; 
 + f . setType ( type ) ; 
 + mFormatters . add ( f ) ; 
 + } 
 + 
 + final AuditListener [ ] listeners = new AuditListener [ mFormatters . size ( ) ] ; 
 + for ( int i = 0 ; i < listeners . length ; i + + ) { 
 + final Formatter f = ( Formatter ) mFormatters . get ( i ) ; 
 + listeners [ i ] = f . createListener ( this ) ; 
 } 
 + return listeners ; 
 + } 
 
 - final Iterator it = mFileSets . iterator ( ) ; 
 - while ( it . hasNext ( ) ) { 
 - final FileSet fs = ( FileSet ) it . next ( ) ; 
 + / * * 
 + * returns the list of files ( full path name ) to process . 
 + * @ return the list of files included via the filesets . 
 + * / 
 + protected String [ ] scanFileSets ( ) 
 + { 
 + final ArrayList list = new ArrayList ( ) ; 
 + if ( mFileName ! = null ) { 
 + / / oops we ' ve got an additional one to process , don ' t 
 + / / forget it . No sweat , it ' s fully resolved via the setter . 
 + log ( " Adding standalone file for audit " , Project . MSG _ VERBOSE ) ; 
 + list . add ( mFileName ) ; 
 + } 
 + for ( int i = 0 ; i < mFileSets . size ( ) ; i + + ) { 
 + final FileSet fs = ( FileSet ) mFileSets . get ( i ) ; 
 final DirectoryScanner ds = fs . getDirectoryScanner ( project ) ; 
 - numErrs + = process ( fs . getDir ( project ) . getAbsolutePath ( ) , 
 - ds . getIncludedFiles ( ) , 
 - c ) ; 
 + ds . scan ( ) ; 
 + 
 + final String [ ] names = ds . getIncludedFiles ( ) ; 
 + log ( i + " ) Adding " + names . length + " files from directory " + 
 + ds . getBasedir ( ) , Project . MSG _ VERBOSE ) ; 
 + 
 + for ( int j = 0 ; j < names . length ; j + + ) { 
 + final String pathname = 
 + ds . getBasedir ( ) + File . separator + names [ j ] ; 
 + list . add ( pathname ) ; 
 + } 
 } 
 
 - c . destroy ( ) ; 
 + return ( String [ ] ) list . toArray ( new String [ 0 ] ) ; 
 + } 
 
 - if ( numErrs > 0 ) { 
 - throw new BuildException ( " Got " + numErrs + " errors . " , location ) ; 
 + / * * 
 + * Poor mans enumeration for the formatter types . 
 + * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > 
 + * / 
 + public static class FormatterType 
 + extends EnumeratedAttribute 
 + { 
 + / * * my possible values * * / 
 + private static final String [ ] VALUES = { E _ XML , E _ PLAIN } ; 
 + 
 + / * * @ see EnumeratedAttribute * * / 
 + public String [ ] getValues ( ) 
 + { 
 + return VALUES ; 
 } 
 } 
 
 / * * 
 - * Processes the list of files . 
 - * @ return the number of errors found 
 - * @ param aDir absolute path to directory containing files 
 - * @ param aFiles the files to process 
 - * @ param aChecker the checker to process the files with 
 - * * / 
 - private int process ( String aDir , String [ ] aFiles , Checker aChecker ) 
 + * Details about a formatter to be used . 
 + * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > 
 + * / 
 + public static class Formatter 
 { 
 - int retVal = 0 ; 
 - for ( int i = 0 ; i < aFiles . length ; i + + ) { 
 - retVal + = aChecker . process ( aDir + File . separator + aFiles [ i ] ) ; 
 + / * * class name of formatter * * / 
 + private String mClassName = null ; 
 + / * * whether formatter users a file * * / 
 + private boolean mUseFile = true ; 
 + / * * the file to output to * * / 
 + private File mToFile = null ; 
 + 
 + / * * 
 + * Set the type of the formatter . 
 + * @ param aType the type 
 + * / 
 + public void setType ( FormatterType aType ) 
 + { 
 + final String val = aType . getValue ( ) ; 
 + if ( E _ XML . equals ( val ) ) { 
 + setClassname ( XMLLogger . class . getName ( ) ) ; 
 + } 
 + else if ( E _ PLAIN . equals ( val ) ) { 
 + setClassname ( DefaultLogger . class . getName ( ) ) ; 
 + } 
 + else { 
 + throw new BuildException ( " Invalid formatter type : " + val ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Set the class name of the formatter . 
 + * @ param aTo the formatter class name 
 + * / 
 + public void setClassname ( String aTo ) 
 + { 
 + mClassName = aTo ; 
 + } 
 + 
 + / * * 
 + * Set the file to output to . 
 + * @ param aTo the file to output to 
 + * / 
 + public void setTofile ( File aTo ) 
 + { 
 + mToFile = aTo ; 
 + } 
 + 
 + / * * 
 + * Creates a listener for the formatter . 
 + * @ param aTask the task running 
 + * @ return a listener 
 + * @ throws ClassNotFoundException if an error occurs 
 + * @ throws InstantiationException if an error occurs 
 + * @ throws IllegalAccessException if an error occurs 
 + * @ throws IOException if an error occurs 
 + * / 
 + public AuditListener createListener ( Task aTask ) 
 + throws ClassNotFoundException , InstantiationException , 
 + IllegalAccessException , IOException 
 + { 
 + final Class clazz = Class . forName ( mClassName ) ; 
 + final AuditListener listener = ( AuditListener ) clazz . newInstance ( ) ; 
 + if ( listener instanceof Streamable ) { 
 + final Streamable o = ( Streamable ) listener ; 
 + o . setOutputStream ( createOutputStream ( aTask ) ) ; 
 + } 
 + return listener ; 
 + } 
 + 
 + / * * 
 + * @ return an output stream to log with 
 + * @ param aTask the task to possibly log to 
 + * @ throws IOException if an error occurs 
 + * / 
 + protected OutputStream createOutputStream ( Task aTask ) 
 + throws IOException 
 + { 
 + if ( mToFile = = null ) { 
 + return new LogOutputStream ( aTask , Project . MSG _ INFO ) ; 
 + } 
 + return new FileOutputStream ( mToFile ) ; 
 } 
 - return retVal ; 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 index 0475d78 . . 1f4b1d1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 21 , 20 + 21 , 23 @ @ package com . puppycrawl . tools . checkstyle ; 
 import antlr . RecognitionException ; 
 import antlr . TokenStreamException ; 
 import antlr . collections . AST ; 
 + import java . io . File ; 
 import java . io . FileNotFoundException ; 
 import java . io . FileReader ; 
 import java . io . IOException ; 
 import java . io . LineNumberReader ; 
 + import java . io . OutputStream ; 
 import java . io . PrintStream ; 
 import java . util . ArrayList ; 
 + import java . util . Iterator ; 
 import java . util . Properties ; 
 import org . apache . regexp . RESyntaxException ; 
 - import java . io . File ; 
 
 / * * 
 * This class provides the functionality to check a file . 
 * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > 
 - * * / 
 + * @ author < a href = " mailto : stephane . bailliez @ wanadoo . fr " > Stephane Bailliez < / a > 
 + * / 
 class Checker 
 implements Defn 
 { 
 @ @ - 44 , 6 + 47 , 9 @ @ class Checker 
 / * * cache file * * / 
 private final PropertyCacheFile mCache ; 
 
 + / * * vector of listeners * / 
 + private final ArrayList mListeners = new ArrayList ( ) ; 
 + 
 / * * 
 * Constructs the object . 
 * @ param aConfig contains the configuration to check with 
 @ @ - 63 , 6 + 69 , 54 @ @ class Checker 
 void destroy ( ) 
 { 
 mCache . destroy ( ) ; 
 + 
 + / / close all streamable listeners 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final Object obj = it . next ( ) ; 
 + if ( obj instanceof Streamable ) { 
 + final Streamable str = ( Streamable ) obj ; 
 + final OutputStream os = str . getOutputStream ( ) ; 
 + / / close only those that can be closed . . . 
 + if ( ( os ! = System . out ) & & ( os ! = System . err ) & & ( os ! = null ) ) { 
 + try { 
 + os . flush ( ) ; 
 + os . close ( ) ; 
 + } 
 + catch ( IOException ignored ) { 
 + } 
 + } 
 + } 
 + it . remove ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Add the listener that will be used to receive events from the audit 
 + * @ param aListener the nosy thing 
 + * / 
 + void addListener ( AuditListener aListener ) 
 + { 
 + mListeners . add ( aListener ) ; 
 + } 
 + 
 + / * * 
 + * Processes a set of files . 
 + * Once this is done , it is highly recommended to call for 
 + * the destroy method to close and remove the listeners . 
 + * @ param aFiles the list of files to be audited . 
 + * @ return the total number of errors found 
 + * @ see destroy ( ) 
 + * / 
 + int process ( String [ ] aFiles ) 
 + { 
 + int total = 0 ; 
 + fireAuditStarted ( ) ; 
 + for ( int i = 0 ; i < aFiles . length ; i + + ) { 
 + total + = process ( aFiles [ i ] ) ; 
 + } 
 + fireAuditFinished ( ) ; 
 + return total ; 
 } 
 
 / * * 
 @ @ - 70 , 15 + 124 , 17 @ @ class Checker 
 * @ return the number of errors found 
 * @ param aFileName the name of the file to process 
 * * / 
 - int process ( String aFileName ) 
 + private int process ( String aFileName ) 
 { 
 - final long timestamp = new File ( aFileName ) . lastModified ( ) ; 
 + final File f = new File ( aFileName ) ; 
 + final long timestamp = f . lastModified ( ) ; 
 if ( mCache . alreadyChecked ( aFileName , timestamp ) ) { 
 return 0 ; 
 } 
 
 LineText [ ] errors ; 
 try { 
 + fireFileStarted ( aFileName ) ; 
 VerifierSingleton . getInstance ( ) . clearMessages ( ) ; 
 VerifierSingleton . getInstance ( ) . setLines ( getLines ( aFileName ) ) ; 
 final AST ast = getAST ( aFileName ) ; 
 @ @ - 95 , 8 + 151 , 7 @ @ class Checker 
 catch ( RecognitionException re ) { 
 errors = new LineText [ ] { 
 new LineText ( 0 , 
 - " Got a RecognitionException - " + 
 - re . getMessage ( ) ) } ; 
 + " Got a RecognitionException - " + re . getMessage ( ) ) } ; 
 } 
 catch ( TokenStreamException te ) { 
 errors = new LineText [ ] { 
 @ @ - 108 , 8 + 163 , 10 @ @ class Checker 
 mCache . checkedOk ( aFileName , timestamp ) ; 
 } 
 else { 
 - displayErrors ( aFileName , errors ) ; 
 + fireErrors ( aFileName , errors ) ; 
 } 
 + 
 + fireFileFinished ( aFileName ) ; 
 return errors . length ; 
 } 
 
 @ @ - 173 , 20 + 230 , 6 @ @ class Checker 
 } 
 
 / * * 
 - * Displays the errors associated with a file name . The errors are formatted 
 - * to be parsed by Emacs . 
 - * @ param aFileName the file name to associate with the errors 
 - * @ param aErrors the errors to display 
 - * * / 
 - private void displayErrors ( String aFileName , LineText [ ] aErrors ) 
 - { 
 - for ( int i = 0 ; i < aErrors . length ; i + + ) { 
 - mLog . println ( aFileName + " : " + aErrors [ i ] . getLineNo ( ) + 
 - " : " + aErrors [ i ] . getText ( ) ) ; 
 - } 
 - } 
 - 
 - / * * 
 * @ return the header lines specified by a file in the supplied properties 
 * set . If no file specified , or unable to read specified file , then an 
 * empty list is returned . Errors are reported . 
 @ @ - 208 , 5 + 251 , 72 @ @ class Checker 
 return retVal ; 
 } 
 
 + / * * notify all listeners about the audit start * / 
 + protected void fireAuditStarted ( ) 
 + { 
 + final AuditEvent evt = new AuditEvent ( this ) ; 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final AuditListener listener = ( AuditListener ) it . next ( ) ; 
 + listener . auditStarted ( evt ) ; 
 + } 
 + } 
 + 
 + / * * notify all listeners about the audit end * / 
 + protected void fireAuditFinished ( ) 
 + { 
 + final AuditEvent evt = new AuditEvent ( this ) ; 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final AuditListener listener = ( AuditListener ) it . next ( ) ; 
 + listener . auditFinished ( evt ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * notify all listeners about the beginning of a file audit 
 + * @ param aFileName the file to be audited 
 + * / 
 + protected void fireFileStarted ( String aFileName ) 
 + { 
 + final AuditEvent evt = new AuditEvent ( this , aFileName ) ; 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final AuditListener listener = ( AuditListener ) it . next ( ) ; 
 + listener . fileStarted ( evt ) ; 
 + } 
 + } 
 
 + / * * 
 + * notify all listeners about the end of a file audit 
 + * @ param aFileName the audited file 
 + * / 
 + protected void fireFileFinished ( String aFileName ) 
 + { 
 + final AuditEvent evt = new AuditEvent ( this , aFileName ) ; 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final AuditListener listener = ( AuditListener ) it . next ( ) ; 
 + listener . fileFinished ( evt ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * notify all listeners about the errors in a file . 
 + * @ param aFileName the audited file 
 + * @ param aErrors the audit errors from the file 
 + * / 
 + protected void fireErrors ( String aFileName , LineText [ ] aErrors ) 
 + { 
 + for ( int i = 0 ; i < aErrors . length ; i + + ) { 
 + final AuditEvent evt = 
 + new AuditEvent ( this , aFileName , aErrors [ i ] . getLineNo ( ) , 
 + aErrors [ i ] . getText ( ) ) ; 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final AuditListener listener = ( AuditListener ) it . next ( ) ; 
 + listener . addError ( evt ) ; 
 + } 
 + } 
 + } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 index 2ecc4ac . . 6da04f1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 18 , 7 + 18 , 10 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle ; 
 
 + import java . io . FileNotFoundException ; 
 + import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . OutputStream ; 
 import org . apache . regexp . RESyntaxException ; 
 
 / * * 
 @ @ - 38 , 11 + 41 , 54 @ @ public final class Main 
 usage ( ) ; 
 } 
 
 + / / be brain dead about arguments parsing 
 + String format = " plain " ; 
 + String output = null ; 
 + String [ ] files = null ; 
 + for ( int i = 0 ; i < aArgs . length ; i + + ) { 
 + if ( " - f " . equals ( aArgs [ i ] ) ) { 
 + format = aArgs [ + + i ] ; 
 + } 
 + else if ( " - o " . equals ( aArgs [ i ] ) ) { 
 + output = aArgs [ + + i ] ; 
 + } 
 + else { 
 + files = new String [ aArgs . length - i ] ; 
 + System . arraycopy ( aArgs , i , files , 0 , files . length ) ; 
 + break ; 
 + } 
 + } 
 + 
 + / / create the appropriate listener 
 + OutputStream out = System . out ; 
 + if ( output ! = null ) { 
 + try { 
 + out = new FileOutputStream ( output ) ; 
 + } 
 + catch ( FileNotFoundException e ) { 
 + System . out . println ( " Could not find file : ' " + output + " ' " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + } 
 + AuditListener listener = null ; 
 + if ( " xml " . equals ( format ) ) { 
 + listener = new XMLLogger ( out ) ; 
 + } 
 + else if ( " plain " . equals ( format ) ) { 
 + listener = new DefaultLogger ( out ) ; 
 + } 
 + else { 
 + System . out . println ( " Invalid format : ( " + format + 
 + " ) . Must be ' plain ' or ' xml ' . " ) ; 
 + usage ( ) ; 
 + } 
 + 
 Checker c = null ; 
 try { 
 c = new Checker ( new Configuration ( System . getProperties ( ) , 
 System . out ) , 
 System . out ) ; 
 + c . addListener ( listener ) ; 
 } 
 catch ( RESyntaxException rese ) { 
 System . out . println ( " Unable to create an regexp object : " + 
 @ @ - 56 , 13 + 102 , 10 @ @ public final class Main 
 System . exit ( 1 ) ; 
 } 
 
 - int numErrors = 0 ; 
 - for ( int i = 0 ; i < aArgs . length ; i + + ) { 
 - numErrors + = c . process ( aArgs [ i ] ) ; 
 - } 
 + final int numErrs = c . process ( files ) ; 
 
 c . destroy ( ) ; 
 - System . exit ( numErrors ) ; 
 + System . exit ( numErrs ) ; 
 } 
 
 / * * Prints the usage information . * * / 
 @ @ - 70 , 7 + 113 , 13 @ @ public final class Main 
 { 
 System . out . println ( 
 " Usage : java " + 
 - com . puppycrawl . tools . checkstyle . Main . class . getName ( ) + " file . . . " ) ; 
 + Main . class . getName ( ) + " < options > < file1 > < file2 > . . . . . . " ) ; 
 + System . out . println ( " Options " ) ; 
 + System . out . println ( 
 + " \ t - f < format > \ tsets output format . ( plain | xml ) . " + 
 + " Default to plain . " ) ; 
 + System . out . println ( " \ t - o < file > \ tsets output file name . " + 
 + " Defaults to stdout " ) ; 
 System . exit ( 1 ) ; 
 } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 7ff73ad . . 503b113 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 6 , 14 + 6 , 33 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . io . LineNumberReader ; 
 + import java . io . OutputStream ; 
 import java . io . PrintStream ; 
 import java . net . URL ; 
 import java . util . Properties ; 
 import junit . framework . TestCase ; 
 + import org . apache . regexp . RESyntaxException ; 
 
 public class CheckerTest 
 extends TestCase 
 { 
 + / * * a brief logger that only display info about errors * / 
 + protected static class BriefLogger 
 + extends DefaultLogger 
 + { 
 + public BriefLogger ( OutputStream out ) 
 + { 
 + super ( out ) ; 
 + } 
 + public void auditStarted ( AuditEvent evt ) { } 
 + public void fileFinished ( AuditEvent evt ) { } 
 + public void fileStarted ( AuditEvent evt ) { } 
 + / / public void auditFinished ( AuditEvent evt ) { 
 + 
 + / / writer . flush ( ) ; 
 + / / } 
 + } 
 + 
 private final ByteArrayOutputStream mBAOS = new ByteArrayOutputStream ( ) ; 
 private final PrintStream mStream = new PrintStream ( mBAOS ) ; 
 private final Configuration mConfig = new Configuration ( ) ; 
 @ @ - 36 , 10 + 55 , 20 @ @ public class CheckerTest 
 return f . getCanonicalPath ( ) ; 
 } 
 
 + protected Checker createChecker ( ) 
 + throws RESyntaxException 
 + { 
 + final AuditListener listener = new BriefLogger ( mStream ) ; 
 + final Checker c = new Checker ( mConfig , mStream ) ; 
 + c . addListener ( listener ) ; 
 + return c ; 
 + } 
 + 
 private void verify ( Checker aC , String aFilename , String [ ] aExpected ) 
 throws Exception 
 { 
 - final int errs = aC . process ( aFilename ) ; 
 + mStream . flush ( ) ; 
 + final int errs = aC . process ( new String [ ] { aFilename } ) ; 
 
 / / process each of the lines 
 final ByteArrayInputStream bais = 
 @ @ - 57 , 7 + 86 , 7 @ @ public class CheckerTest 
 public void testWhitespace ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputWhitespace . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 79 , 7 + 108 , 7 @ @ public class CheckerTest 
 throws Exception 
 { 
 mConfig . setIgnoreWhitespace ( true ) ; 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputWhitespace . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 91 , 7 + 120 , 7 @ @ public class CheckerTest 
 public void testBraces ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputBraces . java " ) ; 
 final String [ ] expected = { 
 filepath + " : 29 : ' do ' construct must use ' { } ' s . " , 
 @ @ - 122 , 7 + 151 , 7 @ @ public class CheckerTest 
 throws Exception 
 { 
 mConfig . setIgnoreBraces ( true ) ; 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputBraces . java " ) ; 
 final String [ ] expected = { 
 filepath + " : 41 : ' ; ' is not preceeded with whitespace . " , 
 @ @ - 135 , 7 + 164 , 7 @ @ public class CheckerTest 
 public void testTags ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputTags . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 166 , 7 + 195 , 7 @ @ public class CheckerTest 
 public void testInner ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputInner . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 186 , 7 + 215 , 7 @ @ public class CheckerTest 
 throws Exception 
 { 
 mConfig . setPublicMemberPat ( " ^ r [ A - Z ] " ) ; 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputInner . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 205 , 7 + 234 , 7 @ @ public class CheckerTest 
 public void testSimple ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputSimple . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 231 , 7 + 260 , 7 @ @ public class CheckerTest 
 public void testStrictJavadoc ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputPublicOnly . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 269 , 7 + 298 , 7 @ @ public class CheckerTest 
 throws Exception 
 { 
 mConfig . setRelaxJavadoc ( true ) ; 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputPublicOnly . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 295 , 7 + 324 , 7 @ @ public class CheckerTest 
 public void testHeader ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " inputHeader . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 309 , 7 + 338 , 7 @ @ public class CheckerTest 
 public void testImport ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputImport . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = {
