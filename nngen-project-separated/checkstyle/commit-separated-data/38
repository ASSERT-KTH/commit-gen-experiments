BLEU SCORE: 0.020980574531482755

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for AvoidInlineConditionals
GENERATED MSG: Merge

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java <nl> index d6cc86b . . 696449e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java <nl> @ @ - 25 , 16 + 25 , 25 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> - * Detects inline conditionals . <nl> - * <nl> - * < p > An example inline conditional is this : <nl> + * < p > <nl> + * Detects inline conditionals . Here is one example of an inline conditional : <nl> + * < / p > <nl> * < pre > <nl> * String a = getParameter ( " a " ) ; <nl> * String b = ( a = = null | | a . length & lt ; 1 ) ? null : a . substring ( 1 ) ; <nl> * < / pre > <nl> - * Rationale : Some developers find inline conditionals hard to read , <nl> - * so their company ' s coding standards forbids them . <nl> + * < p > <nl> + * Rationale : Some developers find inline conditionals hard to read , so <nl> + * their employer ' s coding standards forbid them . <nl> + * < / p > <nl> + * < p > <nl> + * To configure the check : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; AvoidInlineConditionals & quot ; / & gt ; <nl> + * < / pre > <nl> * <nl> + * @ since 3 . 1 <nl> * / <nl> @ StatelessCheck <nl> public class AvoidInlineConditionalsCheck extends AbstractCheck { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 06b3803 . . 3b43284 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 76 , 6 + 76 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " ArrayTrailingComma " , <nl> " AtclauseOrder " , <nl> " AvoidNestedBlocks " , <nl> + " AvoidInlineConditionals " , <nl> " CatchParameterName " , <nl> " ClassMemberImpliedModifier " , <nl> " ClassTypeParameterName " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index dbc30d4 . . 27e58e2 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 174 , 8 + 174 , 8 @ @ int [ ] a2 = new int [ ] { <nl> < / section > <nl> <nl> < section name = " AvoidInlineConditionals " > <nl> + < p > Since Checkstyle 3 . 1 < / p > <nl> < subsection name = " Description " id = " AvoidInlineConditionals _ Description " > <nl> - < p > Since Checkstyle 3 . 1 < / p > <nl> < p > <nl> Detects inline conditionals . Here is one example of an inline conditional : <nl> < / p >
NEAREST DIFF (one line): diff - - git a / src / xdocs / anttask . xml . vm b / src / xdocs / anttask . xml . vm <nl> index 3351d66 . . 1629179 100755 <nl> - - - a / src / xdocs / anttask . xml . vm <nl> + + + b / src / xdocs / anttask . xml . vm <nl> @ @ - 27 , 7 + 27 , 7 @ @ <nl> <nl> < p > <nl> The easiest way is to include < span <nl> - class = " default " > checkstyle - all - $ { projectVersion } . jar < / span > in the <nl> + class = " default " > checkstyle - $ { projectVersion } - all . jar < / span > in the <nl> classpath . This contains all the classes required to run <nl> Checkstyle . Alternatively , you must include the following in the <nl> classpath : <nl> @ @ - 69 , 7 + 69 , 7 @ @ <nl> <nl> < source > <nl> & lt ; taskdef resource = & quot ; checkstyletask . properties & quot ; <nl> - classpath = & quot ; / path / to / checkstyle - all - $ { projectVersion } . jar & quot ; / & gt ; <nl> + classpath = & quot ; / path / to / checkstyle - $ { projectVersion } - all . jar & quot ; / & gt ; <nl> < / source > <nl> <nl> < p > <nl> diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm <nl> index 65125c0 . . b46570e 100755 <nl> - - - a / src / xdocs / cmdline . xml . vm <nl> + + + b / src / xdocs / cmdline . xml . vm <nl> @ @ - 23 , 7 + 23 , 7 @ @ <nl> < section name = " Installation " > <nl> < p > <nl> The easiest way is to include < span <nl> - class = " default " > checkstyle - all - $ { projectVersion } . jar < / span > in the <nl> + class = " default " > checkstyle - $ { projectVersion } - all . jar < / span > in the <nl> classpath . If you are running JDK 5 . 0 this contains all the classes <nl> required to run Checkstyle . Alternatively , you must include the <nl> following in the classpath : <nl> @ @ - 200 , 7 + 200 , 7 @ @ java com . puppycrawl . tools . checkstyle . Main - c docs / sun _ checks . xml \ <nl> < / p > <nl> <nl> < source > <nl> - java - jar checkstyle - all - $ { projectVersion } . jar \ <nl> + java - jar checkstyle - $ { projectVersion } - all . jar \ <nl> - c docs / sun _ checks . xml Check . java <nl> < / source > <nl> < / div > <nl> diff - - git a / src / xdocs / writingchecks . xml . vm b / src / xdocs / writingchecks . xml . vm <nl> index 285de92 . . 61476ab 100644 <nl> - - - a / src / xdocs / writingchecks . xml . vm <nl> + + + b / src / xdocs / writingchecks . xml . vm <nl> @ @ - 112 , 7 + 112 , 7 @ @ <nl> source file . To run it type <nl> < / p > <nl> < source > <nl> - java - classpath checkstyle - all - $ { projectVersion } . jar \ <nl> + java - classpath checkstyle - $ { projectVersion } - all . jar \ <nl> com . puppycrawl . tools . checkstyle . gui . Main <nl> < / source > <nl> <nl> @ @ - 416 , 7 + 416 , 7 @ @ public class MethodLimitCheck extends Check <nl> < / p > <nl> <nl> < source > <nl> - java - classpath mycompanychecks . jar : checkstyle - all - $ { projectVersion } . jar \ <nl> + java - classpath mycompanychecks . jar : checkstyle - $ { projectVersion } - all . jar \ <nl> com . puppycrawl . tools . checkstyle . Main \ <nl> - c config . xml - r . <nl> < / source > <nl> diff - - git a / src / xdocs / writinglisteners . xml . vm b / src / xdocs / writinglisteners . xml . vm <nl> index 4baae4f . . 449f319 100755 <nl> - - - a / src / xdocs / writinglisteners . xml . vm <nl> + + + b / src / xdocs / writinglisteners . xml . vm <nl> @ @ - 279 , 7 + 279 , 7 @ @ Audit finished . Total errors : 1 <nl> < p > <nl> The easiest way to use < span <nl> class = " code " > CommonsLoggingListener < / span > is to include < span <nl> - class = " default " > checkstyle - all - $ { projectVersion } . jar < / span > <nl> + class = " default " > checkstyle - $ { projectVersion } - all . jar < / span > <nl> in the classpath because that jar file contains all the Commons <nl> Logging classes . The default Log under J2SE 1 . 4 is wrapper <nl> class < a

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java 
 index d6cc86b . . 696449e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java 
 @ @ - 25 , 16 + 25 , 25 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 - * Detects inline conditionals . 
 - * 
 - * < p > An example inline conditional is this : 
 + * < p > 
 + * Detects inline conditionals . Here is one example of an inline conditional : 
 + * < / p > 
 * < pre > 
 * String a = getParameter ( " a " ) ; 
 * String b = ( a = = null | | a . length & lt ; 1 ) ? null : a . substring ( 1 ) ; 
 * < / pre > 
 - * Rationale : Some developers find inline conditionals hard to read , 
 - * so their company ' s coding standards forbids them . 
 + * < p > 
 + * Rationale : Some developers find inline conditionals hard to read , so 
 + * their employer ' s coding standards forbid them . 
 + * < / p > 
 + * < p > 
 + * To configure the check : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; AvoidInlineConditionals & quot ; / & gt ; 
 + * < / pre > 
 * 
 + * @ since 3 . 1 
 * / 
 @ StatelessCheck 
 public class AvoidInlineConditionalsCheck extends AbstractCheck { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 06b3803 . . 3b43284 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 76 , 6 + 76 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " ArrayTrailingComma " , 
 " AtclauseOrder " , 
 " AvoidNestedBlocks " , 
 + " AvoidInlineConditionals " , 
 " CatchParameterName " , 
 " ClassMemberImpliedModifier " , 
 " ClassTypeParameterName " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index dbc30d4 . . 27e58e2 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 174 , 8 + 174 , 8 @ @ int [ ] a2 = new int [ ] { 
 < / section > 
 
 < section name = " AvoidInlineConditionals " > 
 + < p > Since Checkstyle 3 . 1 < / p > 
 < subsection name = " Description " id = " AvoidInlineConditionals _ Description " > 
 - < p > Since Checkstyle 3 . 1 < / p > 
 < p > 
 Detects inline conditionals . Here is one example of an inline conditional : 
 < / p >

NEAREST DIFF:
diff - - git a / src / xdocs / anttask . xml . vm b / src / xdocs / anttask . xml . vm 
 index 3351d66 . . 1629179 100755 
 - - - a / src / xdocs / anttask . xml . vm 
 + + + b / src / xdocs / anttask . xml . vm 
 @ @ - 27 , 7 + 27 , 7 @ @ 
 
 < p > 
 The easiest way is to include < span 
 - class = " default " > checkstyle - all - $ { projectVersion } . jar < / span > in the 
 + class = " default " > checkstyle - $ { projectVersion } - all . jar < / span > in the 
 classpath . This contains all the classes required to run 
 Checkstyle . Alternatively , you must include the following in the 
 classpath : 
 @ @ - 69 , 7 + 69 , 7 @ @ 
 
 < source > 
 & lt ; taskdef resource = & quot ; checkstyletask . properties & quot ; 
 - classpath = & quot ; / path / to / checkstyle - all - $ { projectVersion } . jar & quot ; / & gt ; 
 + classpath = & quot ; / path / to / checkstyle - $ { projectVersion } - all . jar & quot ; / & gt ; 
 < / source > 
 
 < p > 
 diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm 
 index 65125c0 . . b46570e 100755 
 - - - a / src / xdocs / cmdline . xml . vm 
 + + + b / src / xdocs / cmdline . xml . vm 
 @ @ - 23 , 7 + 23 , 7 @ @ 
 < section name = " Installation " > 
 < p > 
 The easiest way is to include < span 
 - class = " default " > checkstyle - all - $ { projectVersion } . jar < / span > in the 
 + class = " default " > checkstyle - $ { projectVersion } - all . jar < / span > in the 
 classpath . If you are running JDK 5 . 0 this contains all the classes 
 required to run Checkstyle . Alternatively , you must include the 
 following in the classpath : 
 @ @ - 200 , 7 + 200 , 7 @ @ java com . puppycrawl . tools . checkstyle . Main - c docs / sun _ checks . xml \ 
 < / p > 
 
 < source > 
 - java - jar checkstyle - all - $ { projectVersion } . jar \ 
 + java - jar checkstyle - $ { projectVersion } - all . jar \ 
 - c docs / sun _ checks . xml Check . java 
 < / source > 
 < / div > 
 diff - - git a / src / xdocs / writingchecks . xml . vm b / src / xdocs / writingchecks . xml . vm 
 index 285de92 . . 61476ab 100644 
 - - - a / src / xdocs / writingchecks . xml . vm 
 + + + b / src / xdocs / writingchecks . xml . vm 
 @ @ - 112 , 7 + 112 , 7 @ @ 
 source file . To run it type 
 < / p > 
 < source > 
 - java - classpath checkstyle - all - $ { projectVersion } . jar \ 
 + java - classpath checkstyle - $ { projectVersion } - all . jar \ 
 com . puppycrawl . tools . checkstyle . gui . Main 
 < / source > 
 
 @ @ - 416 , 7 + 416 , 7 @ @ public class MethodLimitCheck extends Check 
 < / p > 
 
 < source > 
 - java - classpath mycompanychecks . jar : checkstyle - all - $ { projectVersion } . jar \ 
 + java - classpath mycompanychecks . jar : checkstyle - $ { projectVersion } - all . jar \ 
 com . puppycrawl . tools . checkstyle . Main \ 
 - c config . xml - r . 
 < / source > 
 diff - - git a / src / xdocs / writinglisteners . xml . vm b / src / xdocs / writinglisteners . xml . vm 
 index 4baae4f . . 449f319 100755 
 - - - a / src / xdocs / writinglisteners . xml . vm 
 + + + b / src / xdocs / writinglisteners . xml . vm 
 @ @ - 279 , 7 + 279 , 7 @ @ Audit finished . Total errors : 1 
 < p > 
 The easiest way to use < span 
 class = " code " > CommonsLoggingListener < / span > is to include < span 
 - class = " default " > checkstyle - all - $ { projectVersion } . jar < / span > 
 + class = " default " > checkstyle - $ { projectVersion } - all . jar < / span > 
 in the classpath because that jar file contains all the Commons 
 Logging classes . The default Log under J2SE 1 . 4 is wrapper 
 class < a
