BLEU SCORE: 0.05751391809950023

TEST MSG: Issue # 4220 : Modified LeftCurlyCheckTest . java and moved its input files to the leftcurly subdirectory
GENERATED MSG: Issue # 3897 : Split input test files for WhitespaceAfterCheckTest

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java <nl> index aa51938 . . 515c374 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java <nl> @ @ - 50 , 13 + 50 , 13 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " blocks " + File . separator + filename ) ; <nl> + + " blocks " + File . separator + " leftcurly " + File . separator + filename ) ; <nl> } <nl> <nl> @ Override <nl> protected String getNonCompilablePath ( String filename ) throws IOException { <nl> return super . getNonCompilablePath ( " checks " + File . separator <nl> - + " blocks " + File . separator + filename ) ; <nl> + + " blocks " + File . separator + " leftcurly " + File . separator + filename ) ; <nl> } <nl> <nl> / * Additional test for jacoco , since valueOf ( ) <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> " 18 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> " 22 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> " 45 : 12 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 12 ) , <nl> " 50 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 18 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 118 , 7 + 118 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> " 45 : 12 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 12 ) , <nl> " 50 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 18 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 189 , 7 + 189 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> " 157 : 1 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , <nl> " 164 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputLeftCurlyOther . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyDefault3 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 203 , 7 + 203 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> " 158 : 12 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 12 ) , <nl> " 165 : 16 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 16 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputLeftCurlyOther . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyDefault3 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 217 , 7 + 217 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> " 69 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> " 105 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputBraces . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyMissingBraces . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 275 , 7 + 275 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " option " , LeftCurlyOption . EOL . toString ( ) ) ; <nl> checkConfig . addAttribute ( " ignoreEnums " , " true " ) ; <nl> final String [ ] expectedWhileTrue = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputLeftCurlyEnums . java " ) , expectedWhileTrue ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyIgnoreEnums . java " ) , expectedWhileTrue ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 285 , 7 + 285 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expectedWhileFalse = { <nl> " 4 : 17 : " + getCheckMessage ( MSG _ KEY _ LINE _ BREAK _ AFTER , " { " , 17 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputLeftCurlyEnums . java " ) , expectedWhileFalse ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyIgnoreEnums . java " ) , expectedWhileFalse ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 343 , 7 + 343 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " option " , LeftCurlyOption . EOL . toString ( ) ) ; <nl> checkConfig . addAttribute ( " maxLineLength " , " 100 " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputLeftCurlyAllInOneLine . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyFirstLine . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 360 , 7 + 360 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> " 67 : 12 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 12 ) , <nl> " 72 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 18 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces2 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyCoverageIncrease . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 370 , 7 + 370 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> try { <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyDefault . java " ) , expected ) ; <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAllInOneLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAllInOneLine . java <nl> deleted file mode 100644 <nl> index b6e33b1 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAllInOneLine . java <nl> + + + / dev / null <nl> @ @ - 1 , 4 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; import java . lang . annotation . ElementType ; import java . lang . annotation . Target ; import java . util . ArrayList ; import java . util . List ; class InputLeftCurlyAllInOneLine { <nl> - <nl> - <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAnnotations . java <nl> deleted file mode 100644 <nl> index 5b5f94b . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAnnotations . java <nl> + + + / dev / null <nl> @ @ - 1 , 67 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - import java . lang . annotation . ElementType ; <nl> - import java . lang . annotation . Target ; <nl> - import java . util . ArrayList ; <nl> - import java . util . List ; <nl> - <nl> - @ TestClassAnnotation <nl> - class InputLeftCurlyAnnotations <nl> - { <nl> - private static final int X = 10 ; <nl> - @ Override <nl> - public boolean equals ( Object other ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - @ SuppressWarnings ( " unused " ) <nl> - public int hashCode ( ) <nl> - { <nl> - int a = 10 ; <nl> - return 1 ; <nl> - } <nl> - <nl> - @ Override @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString ( ) <nl> - { <nl> - Integer i = this . X ; <nl> - List < String > l = new ArrayList ( ) ; <nl> - return " SomeString " ; <nl> - } <nl> - } <nl> - <nl> - @ TestClassAnnotation <nl> - class InputLeftCurlyAnnotations2 { <nl> - private static final int X = 10 ; <nl> - @ Override <nl> - public boolean equals ( Object other ) { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - @ SuppressWarnings ( " unused " ) <nl> - public int hashCode ( ) { <nl> - int a = 10 ; <nl> - return 1 ; <nl> - } <nl> - <nl> - @ Override @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString ( ) <nl> - { <nl> - Integer i = this . X ; <nl> - List < String > l = new ArrayList ( ) ; <nl> - return " SomeString " ; <nl> - } <nl> - <nl> - @ Deprecated <nl> - @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString2 ( ) <nl> - { <nl> - Integer i = this . X ; <nl> - List < String > l = new ArrayList ( ) ; <nl> - return " SomeString " ; <nl> - } <nl> - } <nl> - <nl> - @ Target ( ElementType . TYPE ) <nl> - @ interface TestClassAnnotation { <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyEnums . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyEnums . java <nl> deleted file mode 100644 <nl> index 5406cb5 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyEnums . java <nl> + + + / dev / null <nl> @ @ - 1 , 16 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - public class InputLeftCurlyEnums { <nl> - enum Colors { RED , <nl> - BLUE , <nl> - GREEN <nl> - } <nl> - <nl> - enum Languages { <nl> - JAVA , <nl> - PHP , <nl> - SCALA , <nl> - C , <nl> - PASCAL <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyLineBreakAfter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyLineBreakAfter . java <nl> deleted file mode 100644 <nl> index 805b94f . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyLineBreakAfter . java <nl> + + + / dev / null <nl> @ @ - 1 , 74 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - import java . lang . annotation . ElementType ; <nl> - import java . lang . annotation . Target ; <nl> - import java . util . ArrayList ; <nl> - import java . util . List ; <nl> - <nl> - class InputLeftCurlyLineBreakAfter <nl> - { <nl> - / * * @ see test method * * / <nl> - int foo ( ) throws InterruptedException <nl> - { <nl> - int x = 1 ; <nl> - int a = 2 ; <nl> - while ( true ) <nl> - { <nl> - try <nl> - { <nl> - if ( x > 0 ) <nl> - { <nl> - break ; <nl> - } <nl> - else if ( x < 0 ) { <nl> - ; <nl> - } <nl> - else { break ; } <nl> - switch ( a ) <nl> - { <nl> - case 0 : <nl> - break ; <nl> - default : <nl> - break ; <nl> - } <nl> - } <nl> - catch ( Exception e ) { break ; } <nl> - finally { break ; } <nl> - } <nl> - <nl> - synchronized ( this ) { do { x = 2 ; } while ( x = = 2 ) ; } <nl> - <nl> - synchronized ( this ) { <nl> - do { } while ( x = = 2 ) ; <nl> - } <nl> - <nl> - for ( int k = 0 ; k < 1 ; k + + ) { String innerBlockVariable = " " ; } <nl> - <nl> - for ( int k = 0 ; k < 1 ; k + + ) { } <nl> - 	 	 return a ; <nl> - } <nl> - <nl> - static { int x = 1 ; } <nl> - <nl> - void method2 ( ) <nl> - { <nl> - boolean flag = false ; <nl> - if ( flag ) { String . valueOf ( " foo " ) ; } <nl> - } <nl> - } <nl> - <nl> - class Absent _ CustomFieldSerializer1 { <nl> - <nl> - public static void serialize ( ) { } <nl> - } <nl> - <nl> - class Absent _ CustomFieldSerializer2 <nl> - { <nl> - public Absent _ CustomFieldSerializer2 ( ) { } <nl> - } <nl> - <nl> - class EmptyClass1 { } <nl> - <nl> - interface EmptyInterface1 { } <nl> - <nl> - enum KnownOrder { KNOWN _ ORDER , UNKNOWN _ ORDER } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyMethod . java <nl> deleted file mode 100644 <nl> index bcfc738 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyMethod . java <nl> + + + / dev / null <nl> @ @ - 1 , 89 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - / * * <nl> - * Test case for correct use of braces . <nl> - * @ author Oliver Burn <nl> - * * / <nl> - class InputLeftCurlyMethod <nl> - { <nl> - InputLeftCurlyMethod ( ) { } <nl> - InputLeftCurlyMethod ( String aOne ) { <nl> - } <nl> - InputLeftCurlyMethod ( int aOne ) <nl> - { <nl> - } <nl> - <nl> - void method1 ( ) { } <nl> - void method2 ( ) { <nl> - } <nl> - void method3 ( ) <nl> - { <nl> - } <nl> - void method4 ( ) <nl> - { <nl> - } <nl> - void method5 ( String aOne , <nl> - String aTwo ) <nl> - { <nl> - } <nl> - void method6 ( String aOne , <nl> - String aTwo ) { <nl> - } <nl> - } <nl> - <nl> - enum InputLeftCurlyMethodEnum <nl> - { <nl> - CONSTANT1 ( " hello " ) <nl> - { <nl> - void method1 ( ) { } <nl> - void method2 ( ) { <nl> - } <nl> - void method3 ( ) <nl> - { <nl> - } <nl> - void method4 ( ) <nl> - { <nl> - } <nl> - void method5 ( String aOne , <nl> - String aTwo ) <nl> - { <nl> - } <nl> - void method6 ( String aOne , <nl> - String aTwo ) { <nl> - } <nl> - } , <nl> - <nl> - CONSTANT2 ( " hello " ) { <nl> - <nl> - } , <nl> - <nl> - CONSTANT3 ( " hellohellohellohellohellohellohellohellohellohellohellohellohellohello " ) <nl> - { <nl> - } ; <nl> - <nl> - private InputLeftCurlyMethodEnum ( String value ) <nl> - { <nl> - <nl> - } <nl> - <nl> - void method1 ( ) { } <nl> - void method2 ( ) { <nl> - } <nl> - void method3 ( ) <nl> - { <nl> - } <nl> - void method4 ( ) <nl> - { <nl> - } <nl> - void method5 ( String aOne , <nl> - String aTwo ) <nl> - { <nl> - } <nl> - void method6 ( String aOne , <nl> - String aTwo ) { <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyNewLineOptionWithLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyNewLineOptionWithLambda . java <nl> deleted file mode 100644 <nl> index c37c006 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyNewLineOptionWithLambda . java <nl> + + + / dev / null <nl> @ @ - 1 , 18 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - <nl> - public class InputLeftCurlyNewLineOptionWithLambda <nl> - { <nl> - static Runnable r1 = ( ) - > { <nl> - String . valueOf ( " Hello world one ! " ) ; <nl> - } ; <nl> - <nl> - static Runnable r2 = ( ) - > String . valueOf ( " Hello world two ! " ) ; <nl> - <nl> - static Runnable r3 = ( ) - > { String . valueOf ( " Hello world two ! " ) ; } ; <nl> - <nl> - static Runnable r4 = ( ) - > <nl> - { <nl> - String . valueOf ( " Hello world one ! " ) ; <nl> - } ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces . java <nl> deleted file mode 100644 <nl> index ecabce5 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces . java <nl> + + + / dev / null <nl> @ @ - 1 , 52 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - public class InputScopeInnerInterfaces <nl> - { <nl> - private interface PrivateInterface <nl> - { <nl> - } <nl> - <nl> - interface PackageInnerInterface <nl> - { <nl> - } <nl> - <nl> - protected interface ProtectedInnerInterface <nl> - { <nl> - } <nl> - <nl> - public interface PublicInnerInterface <nl> - { <nl> - } <nl> - <nl> - private <nl> - class <nl> - MyClass1 { <nl> - } <nl> - <nl> - class <nl> - MyClass2 { <nl> - } <nl> - <nl> - private <nl> - interface <nl> - MyInterface1 { <nl> - } <nl> - <nl> - interface <nl> - MyInterface2 { <nl> - } <nl> - <nl> - protected <nl> - enum <nl> - MyEnum { <nl> - } <nl> - <nl> - private <nl> - @ interface <nl> - MyAnnotation { <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces2 . java <nl> deleted file mode 100644 <nl> index 2540fc5 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 74 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - public class InputScopeInnerInterfaces2 { <nl> - / / inner interfaces with different scopes <nl> - <nl> - <nl> - private interface PrivateInterface <nl> - { <nl> - public String CA = " CONST A " ; <nl> - String CB = " CONST b " ; <nl> - <nl> - public void ma ( ) ; <nl> - void mb ( ) ; <nl> - } <nl> - <nl> - interface PackageInnerInterface <nl> - { <nl> - public String CA = " CONST A " ; <nl> - String CB = " CONST b " ; <nl> - <nl> - public void ma ( ) ; <nl> - void mb ( ) ; <nl> - } <nl> - <nl> - protected interface ProtectedInnerInterface <nl> - { <nl> - public String CA = " CONST A " ; <nl> - String CB = " CONST b " ; <nl> - <nl> - public void ma ( ) ; <nl> - void mb ( ) ; <nl> - } <nl> - <nl> - public interface PublicInnerInterface <nl> - { <nl> - public String CA = " CONST A " ; <nl> - String CB = " CONST b " ; <nl> - <nl> - public void ma ( ) ; <nl> - void mb ( ) ; <nl> - } <nl> - <nl> - private <nl> - class <nl> - MyClass1 <nl> - { <nl> - } <nl> - class <nl> - MyClass2 { <nl> - } <nl> - <nl> - private <nl> - interface <nl> - MyInterface1 { <nl> - } <nl> - <nl> - interface <nl> - MyInterface2 { <nl> - } <nl> - <nl> - protected <nl> - enum <nl> - MyEnum { <nl> - } <nl> - <nl> - private <nl> - @ interface <nl> - MyAnnotation { <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyAnnotations . java <nl> new file mode 100644 <nl> index 0000000 . . ebb102a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyAnnotations . java <nl> @ @ - 0 , 0 + 1 , 67 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; <nl> + <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Target ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + @ TestClassAnnotation <nl> + class InputLeftCurlyAnnotations <nl> + { <nl> + private static final int X = 10 ; <nl> + @ Override <nl> + public boolean equals ( Object other ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + @ SuppressWarnings ( " unused " ) <nl> + public int hashCode ( ) <nl> + { <nl> + int a = 10 ; <nl> + return 1 ; <nl> + } <nl> + <nl> + @ Override @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString ( ) <nl> + { <nl> + Integer i = this . X ; <nl> + List < String > l = new ArrayList ( ) ; <nl> + return " SomeString " ; <nl> + } <nl> + } <nl> + <nl> + @ TestClassAnnotation <nl> + class InputLeftCurlyAnnotations2 { <nl> + private static final int X = 10 ; <nl> + @ Override <nl> + public boolean equals ( Object other ) { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + @ SuppressWarnings ( " unused " ) <nl> + public int hashCode ( ) { <nl> + int a = 10 ; <nl> + return 1 ; <nl> + } <nl> + <nl> + @ Override @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString ( ) <nl> + { <nl> + Integer i = this . X ; <nl> + List < String > l = new ArrayList ( ) ; <nl> + return " SomeString " ; <nl> + } <nl> + <nl> + @ Deprecated <nl> + @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString2 ( ) <nl> + { <nl> + Integer i = this . X ; <nl> + List < String > l = new ArrayList ( ) ; <nl> + return " SomeString " ; <nl> + } <nl> + } <nl> + <nl> + @ Target ( ElementType . TYPE ) <nl> + @ interface TestClassAnnotation { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyCoverageIncrease . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyCoverageIncrease . java <nl> new file mode 100644 <nl> index 0000000 . . 963c810 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyCoverageIncrease . java <nl> @ @ - 0 , 0 + 1 , 74 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; <nl> + <nl> + public class InputLeftCurlyCoverageIncrease { <nl> + / / inner interfaces with different scopes <nl> + <nl> + <nl> + private interface PrivateInterface <nl> + { <nl> + public String CA = " CONST A " ; <nl> + String CB = " CONST b " ; <nl> + <nl> + public void ma ( ) ; <nl> + void mb ( ) ; <nl> + } <nl> + <nl> + interface PackageInnerInterface <nl> + { <nl> + public String CA = " CONST A " ; <nl> + String CB = " CONST b " ; <nl> + <nl> + public void ma ( ) ; <nl> + void mb ( ) ; <nl> + } <nl> + <nl> + protected interface ProtectedInnerInterface <nl> + { <nl> + public String CA = " CONST A " ; <nl> + String CB = " CONST b " ; <nl> + <nl> + public void ma ( ) ; <nl> + void mb ( ) ; <nl> + } <nl> + <nl> + public interface PublicInnerInterface <nl> + { <nl> + public String CA = " CONST A " ; <nl> + String CB = " CONST b " ; <nl> + <nl> + public void ma ( ) ; <nl> + void mb ( ) ; <nl> + } <nl> + <nl> + private <nl> + class <nl> + MyClass1 <nl> + { <nl> + } <nl> + class <nl> + MyClass2 { <nl> + } <nl> + <nl> + private <nl> + interface <nl> + MyInterface1 { <nl> + } <nl> + <nl> + interface <nl> + MyInterface2 { <nl> + } <nl> + <nl> + protected <nl> + enum <nl> + MyEnum { <nl> + } <nl> + <nl> + private <nl> + @ interface <nl> + MyAnnotation { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault . java <nl> new file mode 100644 <nl> index 0000000 . . c4a3983 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; <nl> + <nl> + public class InputLeftCurlyDefault <nl> + { <nl> + private interface PrivateInterface <nl> + { <nl> + } <nl> + <nl> + interface PackageInnerInterface <nl> + { <nl> + } <nl> + <nl> + protected interface ProtectedInnerInterface <nl> + { <nl> + } <nl> + <nl> + public interface PublicInnerInterface <nl> + { <nl> + } <nl> + <nl> + private <nl> + class <nl> + MyClass1 { <nl> + } <nl> + <nl> + class <nl> + MyClass2 { <nl> + } <nl> + <nl> + private <nl> + interface <nl> + MyInterface1 { <nl> + } <nl> + <nl> + interface <nl> + MyInterface2 { <nl> + } <nl> + <nl> + protected <nl> + enum <nl> + MyEnum { <nl> + } <nl> + <nl> + private <nl> + @ interface <nl> + MyAnnotation { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault3 . java <nl> new file mode 100644 <nl> index 0000000 . . 8e9f3a0 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault3 . java <nl> @ @ - 0 , 0 + 1 , 170 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; <nl> + <nl> + / * * <nl> + * Test case for correct use of braces . <nl> + * @ author Oliver Burn <nl> + * * / <nl> + class InputLeftCurlyDefault3 <nl> + { <nl> + / * * @ see test method * * / <nl> + int foo ( ) throws InterruptedException <nl> + { <nl> + int x = 1 ; <nl> + int a = 2 ; <nl> + while ( true ) <nl> + { <nl> + try <nl> + { <nl> + if ( x > 0 ) <nl> + { <nl> + break ; <nl> + } <nl> + else if ( x < 0 ) { <nl> + ; <nl> + } <nl> + else <nl> + { <nl> + break ; <nl> + } <nl> + switch ( a ) <nl> + { <nl> + case 0 : <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + break ; <nl> + } <nl> + finally <nl> + { <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + synchronized ( this ) <nl> + { <nl> + do <nl> + { <nl> + x = 2 ; <nl> + } while ( x = = 2 ) ; <nl> + } <nl> + <nl> + this . wait ( 666 <nl> + ) ; / / Bizarre , but legal <nl> + <nl> + for ( int k = 0 ; k < 1 ; k + + ) <nl> + { <nl> + String innerBlockVariable = " " ; <nl> + } <nl> + <nl> + / / test input for bug reported by Joe Comuzzi <nl> + if ( System . currentTimeMillis ( ) > 1000 ) <nl> + return 1 ; <nl> + else <nl> + return 2 ; <nl> + } <nl> + <nl> + / / Test static initialiser <nl> + static <nl> + { <nl> + int x = 1 ; / / should not require any javadoc <nl> + } <nl> + <nl> + <nl> + <nl> + public enum GreetingsEnum <nl> + { <nl> + HELLO , <nl> + GOODBYE <nl> + } ; <nl> + <nl> + void method2 ( ) <nl> + { <nl> + boolean flag = true ; <nl> + if ( flag ) { <nl> + System . identityHashCode ( " heh " ) ; <nl> + flag = ! flag ; } String . CASE _ INSENSITIVE _ ORDER . <nl> + equals ( " Xe - xe " ) ; <nl> + / / it is ok to have rcurly on the same line as previous <nl> + / / statement if lcurly on the same line . <nl> + if ( flag ) { String . CASE _ INSENSITIVE _ ORDER . equals ( " it is ok . " ) ; } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Test input for closing brace if that brace terminates <nl> + * a statement or the body of a constructor . <nl> + * / <nl> + class FooCtor <nl> + { <nl> + 	 int i ; <nl> + 	 public FooCtor ( ) <nl> + { <nl> + 	 	 i = 1 ; <nl> + } } <nl> + <nl> + / * * <nl> + * Test input for closing brace if that brace terminates <nl> + * a statement or the body of a method . <nl> + * / <nl> + class FooMethod <nl> + { <nl> + 	 public void fooMethod ( ) <nl> + { <nl> + 	 	 int i = 1 ; <nl> + } } <nl> + <nl> + / * * <nl> + * Test input for closing brace if that brace terminates <nl> + * a statement or the body of a named class . <nl> + * / <nl> + class FooInner <nl> + { <nl> + 	 class InnerFoo <nl> + { <nl> + 	 	 public void fooInnerMethod ( ) <nl> + { <nl> + 	 	 	 <nl> + 	 	 } <nl> + } } <nl> + <nl> + / * * <nl> + * False positive <nl> + * <nl> + * / <nl> + class Absent _ CustomFieldSerializer3 { <nl> + <nl> + public static void serialize ( ) { } / / false positive . Expected nothing but was " ' } ' should be alone on a line . " <nl> + } <nl> + <nl> + class Absent _ CustomFieldSerializer4 <nl> + { <nl> + public Absent _ CustomFieldSerializer4 ( ) { } <nl> + } <nl> + <nl> + class EmptyClass2 { } <nl> + <nl> + interface EmptyInterface3 { } <nl> + <nl> + class ClassWithStaticInitializers <nl> + { <nl> + static { <nl> + } <nl> + static <nl> + { } <nl> + <nl> + static class Inner <nl> + { <nl> + static { <nl> + int i = 1 ; <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyFirstLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyFirstLine . java <nl> new file mode 100644 <nl> index 0000000 . . c0f1dd8 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyFirstLine . java <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; import java . lang . annotation . ElementType ; import java . lang . annotation . Target ; import java . util . ArrayList ; import java . util . List ; class InputLeftCurlyFirstLine { <nl> + <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyIgnoreEnums . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyIgnoreEnums . java <nl> new file mode 100644 <nl> index 0000000 . . c964915 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyIgnoreEnums . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; <nl> + <nl> + public class InputLeftCurlyIgnoreEnums { <nl> + enum Colors { RED , <nl> + BLUE , <nl> + GREEN <nl> + } <nl> + <nl> + enum Languages { <nl> + JAVA , <nl> + PHP , <nl> + SCALA , <nl> + C , <nl> + PASCAL <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyLineBreakAfter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyLineBreakAfter . java <nl> new file mode 100644 <nl> index 0000000 . . 9a63a5f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyLineBreakAfter . java <nl> @ @ - 0 , 0 + 1 , 74 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; <nl> + <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Target ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + class InputLeftCurlyLineBreakAfter <nl> + { <nl> + / * * @ see test method * * / <nl> + int foo ( ) throws InterruptedException <nl> + { <nl> + int x = 1 ; <nl> + int a = 2 ; <nl> + while ( true ) <nl> + { <nl> + try <nl> + { <nl> + if ( x > 0 ) <nl> + { <nl> + break ; <nl> + } <nl> + else if ( x < 0 ) { <nl> + ; <nl> + } <nl> + else { break ; } <nl> + switch ( a ) <nl> + { <nl> + case 0 : <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + catch ( Exception e ) { break ; } <nl> + finally { break ; } <nl> + } <nl> + <nl> + synchronized ( this ) { do { x = 2 ; } while ( x = = 2 ) ; } <nl> + <nl> + synchronized ( this ) { <nl> + do { } while ( x = = 2 ) ; <nl> + } <nl> + <nl> + for ( int k = 0 ; k < 1 ; k + + ) { String innerBlockVariable = " " ; } <nl> + <nl> + for ( int k = 0 ; k < 1 ; k + + ) { } <nl> + 	 	 return a ; <nl> + } <nl> + <nl> + static { int x = 1 ; } <nl> + <nl> + void method2 ( ) <nl> + { <nl> + boolean flag = false ; <nl> + if ( flag ) { String . valueOf ( " foo " ) ; } <nl> + } <nl> + } <nl> + <nl> + class Absent _ CustomFieldSerializer1 { <nl> + <nl> + public static void serialize ( ) { } <nl> + } <nl> + <nl> + class Absent _ CustomFieldSerializer2 <nl> + { <nl> + public Absent _ CustomFieldSerializer2 ( ) { } <nl> + } <nl> + <nl> + class EmptyClass1 { } <nl> + <nl> + interface EmptyInterface1 { } <nl> + <nl> + enum KnownOrder { KNOWN _ ORDER , UNKNOWN _ ORDER } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMethod . java <nl> new file mode 100644 <nl> index 0000000 . . ac0a4db <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMethod . java <nl> @ @ - 0 , 0 + 1 , 89 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; <nl> + <nl> + / * * <nl> + * Test case for correct use of braces . <nl> + * @ author Oliver Burn <nl> + * * / <nl> + class InputLeftCurlyMethod <nl> + { <nl> + InputLeftCurlyMethod ( ) { } <nl> + InputLeftCurlyMethod ( String aOne ) { <nl> + } <nl> + InputLeftCurlyMethod ( int aOne ) <nl> + { <nl> + } <nl> + <nl> + void method1 ( ) { } <nl> + void method2 ( ) { <nl> + } <nl> + void method3 ( ) <nl> + { <nl> + } <nl> + void method4 ( ) <nl> + { <nl> + } <nl> + void method5 ( String aOne , <nl> + String aTwo ) <nl> + { <nl> + } <nl> + void method6 ( String aOne , <nl> + String aTwo ) { <nl> + } <nl> + } <nl> + <nl> + enum InputLeftCurlyMethodEnum <nl> + { <nl> + CONSTANT1 ( " hello " ) <nl> + { <nl> + void method1 ( ) { } <nl> + void method2 ( ) { <nl> + } <nl> + void method3 ( ) <nl> + { <nl> + } <nl> + void method4 ( ) <nl> + { <nl> + } <nl> + void method5 ( String aOne , <nl> + String aTwo ) <nl> + { <nl> + } <nl> + void method6 ( String aOne , <nl> + String aTwo ) { <nl> + } <nl> + } , <nl> + <nl> + CONSTANT2 ( " hello " ) { <nl> + <nl> + } , <nl> + <nl> + CONSTANT3 ( " hellohellohellohellohellohellohellohellohellohellohellohellohellohello " ) <nl> + { <nl> + } ; <nl> + <nl> + private InputLeftCurlyMethodEnum ( String value ) <nl> + { <nl> + <nl> + } <nl> + <nl> + void method1 ( ) { } <nl> + void method2 ( ) { <nl> + } <nl> + void method3 ( ) <nl> + { <nl> + } <nl> + void method4 ( ) <nl> + { <nl> + } <nl> + void method5 ( String aOne , <nl> + String aTwo ) <nl> + { <nl> + } <nl> + void method6 ( String aOne , <nl> + String aTwo ) { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMissingBraces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMissingBraces . java <nl> new file mode 100644 <nl> index 0000000 . . ba3a3c4 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMissingBraces . java <nl> @ @ - 0 , 0 + 1 , 119 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; <nl> + <nl> + / * * <nl> + * Test case for correct use of braces . <nl> + * @ author Oliver Burn <nl> + * * / <nl> + class InputLeftCurlyMissingBraces <nl> + { <nl> + / * * @ return helper func * * / <nl> + boolean condition ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + / * * Test do / while loops * * / <nl> + void testDoWhile ( ) <nl> + { <nl> + / / Valid <nl> + do { <nl> + testDoWhile ( ) ; <nl> + } <nl> + while ( condition ( ) ) ; <nl> + <nl> + / / Invalid <nl> + do testDoWhile ( ) ; while ( condition ( ) ) ; <nl> + } <nl> + <nl> + / * * Test while loops * * / <nl> + void testWhile ( ) <nl> + { <nl> + / / Valid <nl> + while ( condition ( ) ) { <nl> + testWhile ( ) ; <nl> + } <nl> + <nl> + / / Invalid <nl> + while ( condition ( ) ) ; <nl> + while ( condition ( ) ) <nl> + testWhile ( ) ; <nl> + while ( condition ( ) ) <nl> + if ( condition ( ) ) <nl> + testWhile ( ) ; <nl> + } <nl> + <nl> + / * * Test for loops * * / <nl> + void testFor ( ) <nl> + { <nl> + / / Valid <nl> + for ( int i = 1 ; i < 5 ; i + + ) { <nl> + testFor ( ) ; <nl> + } <nl> + <nl> + / / Invalid <nl> + for ( int i = 1 ; i < 5 ; i + + ) ; <nl> + for ( int i = 1 ; i < 5 ; i + + ) <nl> + testFor ( ) ; <nl> + for ( int i = 1 ; i < 5 ; <nl> + i + + ) <nl> + if ( i > 2 ) <nl> + testFor ( ) ; <nl> + } <nl> + <nl> + / * * Test if constructs * * / <nl> + public void testIf ( ) <nl> + { <nl> + / / Valid <nl> + if ( condition ( ) ) { <nl> + testIf ( ) ; <nl> + } <nl> + else if ( condition ( ) ) { <nl> + testIf ( ) ; <nl> + } <nl> + else { <nl> + testIf ( ) ; <nl> + } <nl> + <nl> + / / Invalid <nl> + if ( condition ( ) ) ; <nl> + if ( condition ( ) ) <nl> + testIf ( ) ; <nl> + if ( condition ( ) ) <nl> + testIf ( ) ; <nl> + else <nl> + testIf ( ) ; <nl> + if ( condition ( ) ) <nl> + testIf ( ) ; <nl> + else { <nl> + testIf ( ) ; <nl> + } <nl> + if ( condition ( ) ) { <nl> + testIf ( ) ; <nl> + } <nl> + else <nl> + testIf ( ) ; <nl> + if ( condition ( ) ) <nl> + if ( condition ( ) ) <nl> + testIf ( ) ; <nl> + } <nl> + <nl> + void whitespaceAfterSemi ( ) <nl> + { <nl> + / / reject <nl> + int i = 1 ; int j = 2 ; <nl> + <nl> + / / accept <nl> + for ( ; ; ) { <nl> + } <nl> + } <nl> + <nl> + / * * Empty constructor block . * * / <nl> + public InputLeftCurlyMissingBraces ( ) { } <nl> + <nl> + / * * Empty method block . * * / <nl> + public void emptyImplementation ( ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyNewLineOptionWithLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyNewLineOptionWithLambda . java <nl> new file mode 100644 <nl> index 0000000 . . b6ad020 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyNewLineOptionWithLambda . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; <nl> + <nl> + <nl> + public class InputLeftCurlyNewLineOptionWithLambda <nl> + { <nl> + static Runnable r1 = ( ) - > { <nl> + String . valueOf ( " Hello world one ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable r2 = ( ) - > String . valueOf ( " Hello world two ! " ) ; <nl> + <nl> + static Runnable r3 = ( ) - > { String . valueOf ( " Hello world two ! " ) ; } ; <nl> + <nl> + static Runnable r4 = ( ) - > <nl> + { <nl> + String . valueOf ( " Hello world one ! " ) ; <nl> + } ; <nl> + }
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 421f430 . . 43c7eb4 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 168 , 6 + 168 , 10 @ @ <nl> < property name = " maxLineLength " value = " 100 " / > <nl> < / module > <nl> < module name = " NeedBraces " / > <nl> + < module name = " NeedBraces " > <nl> + < property name = " tokens " value = " LAMBDA " / > <nl> + < property name = " allowSingleLineStatement " value = " true " / > <nl> + < / module > <nl> < module name = " RightCurly " > <nl> < property name = " tokens " value = " METHOD _ DEF " / > <nl> < property name = " tokens " value = " CTOR _ DEF " / > <nl> diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index ce9951e . . a75d450 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 344 , 7 + 344 , 7 @ @ <nl> < inspection _ tool class = " CloneableImplementsClone " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> < option name = " m _ ignoreCloneableDueToInheritance " value = " false " / > <nl> < / inspection _ tool > <nl> - < inspection _ tool class = " CodeBlock2Expr " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < inspection _ tool class = " CodeBlock2Expr " enabled = " false " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CoffeeScriptArgumentsOutsideFunction " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CoffeeScriptFunctionSignatures " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CoffeeScriptInfiniteLoop " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> index 8ed29f0 . . 7191d06 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> @ @ - 158 , 9 + 158 , 9 @ @ public class EqualsHashCodeCheck <nl> @ Override <nl> public void finishTree ( DetailAST rootAST ) { <nl> objBlockWithEquals <nl> - . entrySet ( ) . stream ( ) . filter ( detailASTDetailASTEntry - > <nl> - objBlockWithHashCode . remove ( detailASTDetailASTEntry . getKey ( ) ) = = null ) <nl> - . forEach ( detailASTDetailASTEntry - > { <nl> + . entrySet ( ) . stream ( ) . filter ( detailASTDetailASTEntry - > { <nl> + return objBlockWithHashCode . remove ( detailASTDetailASTEntry . getKey ( ) ) = = null ; <nl> + } ) . forEach ( detailASTDetailASTEntry - > { <nl> final DetailAST equalsAST = detailASTDetailASTEntry . getValue ( ) ; <nl> log ( equalsAST . getLineNo ( ) , equalsAST . getColumnNo ( ) , MSG _ KEY _ HASHCODE ) ; <nl> } ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> index fb4d9ef . . 66b7b6c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> @ @ - 377 , 9 + 377 , 9 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { <nl> final DetailAST forUpdateListAST = forIteratorAST . findFirstToken ( TokenTypes . ELIST ) ; <nl> <nl> findChildrenOfExpressionType ( forUpdateListAST ) . stream ( ) <nl> - . filter ( iteratingExpressionAST - > <nl> - MUTATION _ OPERATIONS . contains ( iteratingExpressionAST . getType ( ) ) ) <nl> - . forEach ( iteratingExpressionAST - > { <nl> + . filter ( iteratingExpressionAST - > { <nl> + return MUTATION _ OPERATIONS . contains ( iteratingExpressionAST . getType ( ) ) ; <nl> + } ) . forEach ( iteratingExpressionAST - > { <nl> final DetailAST oneVariableOperatorChild = iteratingExpressionAST . getFirstChild ( ) ; <nl> if ( oneVariableOperatorChild . getType ( ) = = TokenTypes . IDENT ) { <nl> iteratorVariables . add ( oneVariableOperatorChild . getText ( ) ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> index fdb7b34 . . b74a614 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> @ @ - 184 , 11 + 184 , 12 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> if ( methodImplOpenBrace ! = null ) { <nl> final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; <nl> - final Predicate < DetailAST > predicate = currentNode - > <nl> - currentNode ! = null <nl> + final Predicate < DetailAST > predicate = currentNode - > { <nl> + return currentNode ! = null <nl> & & currentNode ! = methodImplCloseBrace <nl> & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) <nl> & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; <nl> + } ; <nl> final Optional < DetailAST > methodBody = <nl> TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; <nl> if ( methodBody . isPresent ( ) ) { <nl> @ @ - 237 , 9 + 238 , 11 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> boolean containsAnnotation = false ; <nl> if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { <nl> final Optional < DetailAST > annotation = TokenUtils . findFirstTokenByPredicate ( modifiers , <nl> - currentToken - > currentToken ! = null <nl> - & & currentToken . getType ( ) = = TokenTypes . ANNOTATION <nl> - & & annotationName . equals ( getAnnotationName ( currentToken ) ) ) ; <nl> + currentToken - > { <nl> + return currentToken ! = null <nl> + & & currentToken . getType ( ) = = TokenTypes . ANNOTATION <nl> + & & annotationName . equals ( getAnnotationName ( currentToken ) ) ; <nl> + } ) ; <nl> if ( annotation . isPresent ( ) ) { <nl> containsAnnotation = true ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index 3b0f535 . . 932bf4d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 724 , 8 + 724 , 10 @ @ public class VisibilityModifierCheck <nl> * / <nl> private boolean areImmutableTypeArguments ( List < String > typeArgsClassNames ) { <nl> return ! typeArgsClassNames . stream ( ) . filter ( <nl> - typeName - > ! immutableClassShortNames . contains ( typeName ) <nl> - & & ! immutableClassCanonicalNames . contains ( typeName ) ) . findFirst ( ) . isPresent ( ) ; <nl> + typeName - > { <nl> + return ! immutableClassShortNames . contains ( typeName ) <nl> + & & ! immutableClassCanonicalNames . contains ( typeName ) ; <nl> + } ) . findFirst ( ) . isPresent ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java <nl> index 68581de . . 2b6f27b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java <nl> @ @ - 43 , 8 + 43 , 9 @ @ class ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel { <nl> * / <nl> ListToTreeSelectionModelWrapper ( JTreeTable jTreeTable ) { <nl> treeTable = jTreeTable ; <nl> - getListSelectionModel ( ) . addListSelectionListener ( event - > <nl> - updateSelectedPathsFromSelectedRows ( ) ) ; <nl> + getListSelectionModel ( ) . addListSelectionListener ( event - > { <nl> + updateSelectedPathsFromSelectedRows ( ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> index ad1134a . . b3d3a48 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> @ @ - 122 , 9 + 122 , 11 @ @ public class DetailASTTest { <nl> } <nl> <nl> private static void checkDir ( File dir ) throws Exception { <nl> - final File [ ] files = dir . listFiles ( file - > ( file . getName ( ) . endsWith ( " . java " ) <nl> + final File [ ] files = dir . listFiles ( file - > { <nl> + return ( file . getName ( ) . endsWith ( " . java " ) <nl> | | file . isDirectory ( ) ) <nl> - & & ! file . getName ( ) . endsWith ( " InputGrammar . java " ) ) ; <nl> + & & ! file . getName ( ) . endsWith ( " InputGrammar . java " ) ; <nl> + } ) ; <nl> for ( File file : files ) { <nl> if ( file . isFile ( ) ) { <nl> checkFile ( file . getCanonicalPath ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index 842b20c . . adb04f4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 183 , 7 + 183 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NeedBraces " , Stream . of ( <nl> / / we prefer no braces here as it looks unusual even though they help avoid sharing <nl> / / scope of variables <nl> - " LITERAL _ DEFAULT " , " LITERAL _ CASE " , " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + " LITERAL _ DEFAULT " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " FinalParameters " , Stream . of ( <nl> / / we prefer these to be effectively final as to not damage readability <nl> " FOR _ EACH _ CLAUSE " , " LITERAL _ CATCH " ) . collect ( Collectors . toSet ( ) ) ) ;

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java 
 index aa51938 . . 515c374 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java 
 @ @ - 50 , 13 + 50 , 13 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " blocks " + File . separator + filename ) ; 
 + + " blocks " + File . separator + " leftcurly " + File . separator + filename ) ; 
 } 
 
 @ Override 
 protected String getNonCompilablePath ( String filename ) throws IOException { 
 return super . getNonCompilablePath ( " checks " + File . separator 
 - + " blocks " + File . separator + filename ) ; 
 + + " blocks " + File . separator + " leftcurly " + File . separator + filename ) ; 
 } 
 
 / * Additional test for jacoco , since valueOf ( ) 
 @ @ - 85 , 7 + 85 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 " 18 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 " 22 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 99 , 7 + 99 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 " 45 : 12 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 12 ) , 
 " 50 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 18 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 118 , 7 + 118 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 " 45 : 12 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 12 ) , 
 " 50 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 18 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 189 , 7 + 189 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 " 157 : 1 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , 
 " 164 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputLeftCurlyOther . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyDefault3 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 203 , 7 + 203 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 " 158 : 12 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 12 ) , 
 " 165 : 16 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 16 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputLeftCurlyOther . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyDefault3 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 217 , 7 + 217 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 " 69 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 " 105 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputBraces . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyMissingBraces . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 275 , 7 + 275 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " option " , LeftCurlyOption . EOL . toString ( ) ) ; 
 checkConfig . addAttribute ( " ignoreEnums " , " true " ) ; 
 final String [ ] expectedWhileTrue = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputLeftCurlyEnums . java " ) , expectedWhileTrue ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyIgnoreEnums . java " ) , expectedWhileTrue ) ; 
 } 
 
 @ Test 
 @ @ - 285 , 7 + 285 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 final String [ ] expectedWhileFalse = { 
 " 4 : 17 : " + getCheckMessage ( MSG _ KEY _ LINE _ BREAK _ AFTER , " { " , 17 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputLeftCurlyEnums . java " ) , expectedWhileFalse ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyIgnoreEnums . java " ) , expectedWhileFalse ) ; 
 } 
 
 @ Test 
 @ @ - 343 , 7 + 343 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " option " , LeftCurlyOption . EOL . toString ( ) ) ; 
 checkConfig . addAttribute ( " maxLineLength " , " 100 " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputLeftCurlyAllInOneLine . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyFirstLine . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 360 , 7 + 360 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 " 67 : 12 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 12 ) , 
 " 72 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " , 18 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces2 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyCoverageIncrease . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 370 , 7 + 370 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 try { 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyDefault . java " ) , expected ) ; 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAllInOneLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAllInOneLine . java 
 deleted file mode 100644 
 index b6e33b1 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAllInOneLine . java 
 + + + / dev / null 
 @ @ - 1 , 4 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; import java . lang . annotation . ElementType ; import java . lang . annotation . Target ; import java . util . ArrayList ; import java . util . List ; class InputLeftCurlyAllInOneLine { 
 - 
 - 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAnnotations . java 
 deleted file mode 100644 
 index 5b5f94b . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyAnnotations . java 
 + + + / dev / null 
 @ @ - 1 , 67 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - import java . lang . annotation . ElementType ; 
 - import java . lang . annotation . Target ; 
 - import java . util . ArrayList ; 
 - import java . util . List ; 
 - 
 - @ TestClassAnnotation 
 - class InputLeftCurlyAnnotations 
 - { 
 - private static final int X = 10 ; 
 - @ Override 
 - public boolean equals ( Object other ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - @ SuppressWarnings ( " unused " ) 
 - public int hashCode ( ) 
 - { 
 - int a = 10 ; 
 - return 1 ; 
 - } 
 - 
 - @ Override @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString ( ) 
 - { 
 - Integer i = this . X ; 
 - List < String > l = new ArrayList ( ) ; 
 - return " SomeString " ; 
 - } 
 - } 
 - 
 - @ TestClassAnnotation 
 - class InputLeftCurlyAnnotations2 { 
 - private static final int X = 10 ; 
 - @ Override 
 - public boolean equals ( Object other ) { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - @ SuppressWarnings ( " unused " ) 
 - public int hashCode ( ) { 
 - int a = 10 ; 
 - return 1 ; 
 - } 
 - 
 - @ Override @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString ( ) 
 - { 
 - Integer i = this . X ; 
 - List < String > l = new ArrayList ( ) ; 
 - return " SomeString " ; 
 - } 
 - 
 - @ Deprecated 
 - @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString2 ( ) 
 - { 
 - Integer i = this . X ; 
 - List < String > l = new ArrayList ( ) ; 
 - return " SomeString " ; 
 - } 
 - } 
 - 
 - @ Target ( ElementType . TYPE ) 
 - @ interface TestClassAnnotation { 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyEnums . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyEnums . java 
 deleted file mode 100644 
 index 5406cb5 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyEnums . java 
 + + + / dev / null 
 @ @ - 1 , 16 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - public class InputLeftCurlyEnums { 
 - enum Colors { RED , 
 - BLUE , 
 - GREEN 
 - } 
 - 
 - enum Languages { 
 - JAVA , 
 - PHP , 
 - SCALA , 
 - C , 
 - PASCAL 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyLineBreakAfter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyLineBreakAfter . java 
 deleted file mode 100644 
 index 805b94f . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyLineBreakAfter . java 
 + + + / dev / null 
 @ @ - 1 , 74 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - import java . lang . annotation . ElementType ; 
 - import java . lang . annotation . Target ; 
 - import java . util . ArrayList ; 
 - import java . util . List ; 
 - 
 - class InputLeftCurlyLineBreakAfter 
 - { 
 - / * * @ see test method * * / 
 - int foo ( ) throws InterruptedException 
 - { 
 - int x = 1 ; 
 - int a = 2 ; 
 - while ( true ) 
 - { 
 - try 
 - { 
 - if ( x > 0 ) 
 - { 
 - break ; 
 - } 
 - else if ( x < 0 ) { 
 - ; 
 - } 
 - else { break ; } 
 - switch ( a ) 
 - { 
 - case 0 : 
 - break ; 
 - default : 
 - break ; 
 - } 
 - } 
 - catch ( Exception e ) { break ; } 
 - finally { break ; } 
 - } 
 - 
 - synchronized ( this ) { do { x = 2 ; } while ( x = = 2 ) ; } 
 - 
 - synchronized ( this ) { 
 - do { } while ( x = = 2 ) ; 
 - } 
 - 
 - for ( int k = 0 ; k < 1 ; k + + ) { String innerBlockVariable = " " ; } 
 - 
 - for ( int k = 0 ; k < 1 ; k + + ) { } 
 - 	 	 return a ; 
 - } 
 - 
 - static { int x = 1 ; } 
 - 
 - void method2 ( ) 
 - { 
 - boolean flag = false ; 
 - if ( flag ) { String . valueOf ( " foo " ) ; } 
 - } 
 - } 
 - 
 - class Absent _ CustomFieldSerializer1 { 
 - 
 - public static void serialize ( ) { } 
 - } 
 - 
 - class Absent _ CustomFieldSerializer2 
 - { 
 - public Absent _ CustomFieldSerializer2 ( ) { } 
 - } 
 - 
 - class EmptyClass1 { } 
 - 
 - interface EmptyInterface1 { } 
 - 
 - enum KnownOrder { KNOWN _ ORDER , UNKNOWN _ ORDER } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyMethod . java 
 deleted file mode 100644 
 index bcfc738 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyMethod . java 
 + + + / dev / null 
 @ @ - 1 , 89 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - / * * 
 - * Test case for correct use of braces . 
 - * @ author Oliver Burn 
 - * * / 
 - class InputLeftCurlyMethod 
 - { 
 - InputLeftCurlyMethod ( ) { } 
 - InputLeftCurlyMethod ( String aOne ) { 
 - } 
 - InputLeftCurlyMethod ( int aOne ) 
 - { 
 - } 
 - 
 - void method1 ( ) { } 
 - void method2 ( ) { 
 - } 
 - void method3 ( ) 
 - { 
 - } 
 - void method4 ( ) 
 - { 
 - } 
 - void method5 ( String aOne , 
 - String aTwo ) 
 - { 
 - } 
 - void method6 ( String aOne , 
 - String aTwo ) { 
 - } 
 - } 
 - 
 - enum InputLeftCurlyMethodEnum 
 - { 
 - CONSTANT1 ( " hello " ) 
 - { 
 - void method1 ( ) { } 
 - void method2 ( ) { 
 - } 
 - void method3 ( ) 
 - { 
 - } 
 - void method4 ( ) 
 - { 
 - } 
 - void method5 ( String aOne , 
 - String aTwo ) 
 - { 
 - } 
 - void method6 ( String aOne , 
 - String aTwo ) { 
 - } 
 - } , 
 - 
 - CONSTANT2 ( " hello " ) { 
 - 
 - } , 
 - 
 - CONSTANT3 ( " hellohellohellohellohellohellohellohellohellohellohellohellohellohello " ) 
 - { 
 - } ; 
 - 
 - private InputLeftCurlyMethodEnum ( String value ) 
 - { 
 - 
 - } 
 - 
 - void method1 ( ) { } 
 - void method2 ( ) { 
 - } 
 - void method3 ( ) 
 - { 
 - } 
 - void method4 ( ) 
 - { 
 - } 
 - void method5 ( String aOne , 
 - String aTwo ) 
 - { 
 - } 
 - void method6 ( String aOne , 
 - String aTwo ) { 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyNewLineOptionWithLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyNewLineOptionWithLambda . java 
 deleted file mode 100644 
 index c37c006 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputLeftCurlyNewLineOptionWithLambda . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - 
 - public class InputLeftCurlyNewLineOptionWithLambda 
 - { 
 - static Runnable r1 = ( ) - > { 
 - String . valueOf ( " Hello world one ! " ) ; 
 - } ; 
 - 
 - static Runnable r2 = ( ) - > String . valueOf ( " Hello world two ! " ) ; 
 - 
 - static Runnable r3 = ( ) - > { String . valueOf ( " Hello world two ! " ) ; } ; 
 - 
 - static Runnable r4 = ( ) - > 
 - { 
 - String . valueOf ( " Hello world one ! " ) ; 
 - } ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces . java 
 deleted file mode 100644 
 index ecabce5 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces . java 
 + + + / dev / null 
 @ @ - 1 , 52 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - public class InputScopeInnerInterfaces 
 - { 
 - private interface PrivateInterface 
 - { 
 - } 
 - 
 - interface PackageInnerInterface 
 - { 
 - } 
 - 
 - protected interface ProtectedInnerInterface 
 - { 
 - } 
 - 
 - public interface PublicInnerInterface 
 - { 
 - } 
 - 
 - private 
 - class 
 - MyClass1 { 
 - } 
 - 
 - class 
 - MyClass2 { 
 - } 
 - 
 - private 
 - interface 
 - MyInterface1 { 
 - } 
 - 
 - interface 
 - MyInterface2 { 
 - } 
 - 
 - protected 
 - enum 
 - MyEnum { 
 - } 
 - 
 - private 
 - @ interface 
 - MyAnnotation { 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces2 . java 
 deleted file mode 100644 
 index 2540fc5 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputScopeInnerInterfaces2 . java 
 + + + / dev / null 
 @ @ - 1 , 74 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - public class InputScopeInnerInterfaces2 { 
 - / / inner interfaces with different scopes 
 - 
 - 
 - private interface PrivateInterface 
 - { 
 - public String CA = " CONST A " ; 
 - String CB = " CONST b " ; 
 - 
 - public void ma ( ) ; 
 - void mb ( ) ; 
 - } 
 - 
 - interface PackageInnerInterface 
 - { 
 - public String CA = " CONST A " ; 
 - String CB = " CONST b " ; 
 - 
 - public void ma ( ) ; 
 - void mb ( ) ; 
 - } 
 - 
 - protected interface ProtectedInnerInterface 
 - { 
 - public String CA = " CONST A " ; 
 - String CB = " CONST b " ; 
 - 
 - public void ma ( ) ; 
 - void mb ( ) ; 
 - } 
 - 
 - public interface PublicInnerInterface 
 - { 
 - public String CA = " CONST A " ; 
 - String CB = " CONST b " ; 
 - 
 - public void ma ( ) ; 
 - void mb ( ) ; 
 - } 
 - 
 - private 
 - class 
 - MyClass1 
 - { 
 - } 
 - class 
 - MyClass2 { 
 - } 
 - 
 - private 
 - interface 
 - MyInterface1 { 
 - } 
 - 
 - interface 
 - MyInterface2 { 
 - } 
 - 
 - protected 
 - enum 
 - MyEnum { 
 - } 
 - 
 - private 
 - @ interface 
 - MyAnnotation { 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyAnnotations . java 
 new file mode 100644 
 index 0000000 . . ebb102a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyAnnotations . java 
 @ @ - 0 , 0 + 1 , 67 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Target ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + @ TestClassAnnotation 
 + class InputLeftCurlyAnnotations 
 + { 
 + private static final int X = 10 ; 
 + @ Override 
 + public boolean equals ( Object other ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + @ SuppressWarnings ( " unused " ) 
 + public int hashCode ( ) 
 + { 
 + int a = 10 ; 
 + return 1 ; 
 + } 
 + 
 + @ Override @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString ( ) 
 + { 
 + Integer i = this . X ; 
 + List < String > l = new ArrayList ( ) ; 
 + return " SomeString " ; 
 + } 
 + } 
 + 
 + @ TestClassAnnotation 
 + class InputLeftCurlyAnnotations2 { 
 + private static final int X = 10 ; 
 + @ Override 
 + public boolean equals ( Object other ) { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + @ SuppressWarnings ( " unused " ) 
 + public int hashCode ( ) { 
 + int a = 10 ; 
 + return 1 ; 
 + } 
 + 
 + @ Override @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString ( ) 
 + { 
 + Integer i = this . X ; 
 + List < String > l = new ArrayList ( ) ; 
 + return " SomeString " ; 
 + } 
 + 
 + @ Deprecated 
 + @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString2 ( ) 
 + { 
 + Integer i = this . X ; 
 + List < String > l = new ArrayList ( ) ; 
 + return " SomeString " ; 
 + } 
 + } 
 + 
 + @ Target ( ElementType . TYPE ) 
 + @ interface TestClassAnnotation { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyCoverageIncrease . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyCoverageIncrease . java 
 new file mode 100644 
 index 0000000 . . 963c810 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyCoverageIncrease . java 
 @ @ - 0 , 0 + 1 , 74 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; 
 + 
 + public class InputLeftCurlyCoverageIncrease { 
 + / / inner interfaces with different scopes 
 + 
 + 
 + private interface PrivateInterface 
 + { 
 + public String CA = " CONST A " ; 
 + String CB = " CONST b " ; 
 + 
 + public void ma ( ) ; 
 + void mb ( ) ; 
 + } 
 + 
 + interface PackageInnerInterface 
 + { 
 + public String CA = " CONST A " ; 
 + String CB = " CONST b " ; 
 + 
 + public void ma ( ) ; 
 + void mb ( ) ; 
 + } 
 + 
 + protected interface ProtectedInnerInterface 
 + { 
 + public String CA = " CONST A " ; 
 + String CB = " CONST b " ; 
 + 
 + public void ma ( ) ; 
 + void mb ( ) ; 
 + } 
 + 
 + public interface PublicInnerInterface 
 + { 
 + public String CA = " CONST A " ; 
 + String CB = " CONST b " ; 
 + 
 + public void ma ( ) ; 
 + void mb ( ) ; 
 + } 
 + 
 + private 
 + class 
 + MyClass1 
 + { 
 + } 
 + class 
 + MyClass2 { 
 + } 
 + 
 + private 
 + interface 
 + MyInterface1 { 
 + } 
 + 
 + interface 
 + MyInterface2 { 
 + } 
 + 
 + protected 
 + enum 
 + MyEnum { 
 + } 
 + 
 + private 
 + @ interface 
 + MyAnnotation { 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault . java 
 new file mode 100644 
 index 0000000 . . c4a3983 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; 
 + 
 + public class InputLeftCurlyDefault 
 + { 
 + private interface PrivateInterface 
 + { 
 + } 
 + 
 + interface PackageInnerInterface 
 + { 
 + } 
 + 
 + protected interface ProtectedInnerInterface 
 + { 
 + } 
 + 
 + public interface PublicInnerInterface 
 + { 
 + } 
 + 
 + private 
 + class 
 + MyClass1 { 
 + } 
 + 
 + class 
 + MyClass2 { 
 + } 
 + 
 + private 
 + interface 
 + MyInterface1 { 
 + } 
 + 
 + interface 
 + MyInterface2 { 
 + } 
 + 
 + protected 
 + enum 
 + MyEnum { 
 + } 
 + 
 + private 
 + @ interface 
 + MyAnnotation { 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault3 . java 
 new file mode 100644 
 index 0000000 . . 8e9f3a0 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyDefault3 . java 
 @ @ - 0 , 0 + 1 , 170 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; 
 + 
 + / * * 
 + * Test case for correct use of braces . 
 + * @ author Oliver Burn 
 + * * / 
 + class InputLeftCurlyDefault3 
 + { 
 + / * * @ see test method * * / 
 + int foo ( ) throws InterruptedException 
 + { 
 + int x = 1 ; 
 + int a = 2 ; 
 + while ( true ) 
 + { 
 + try 
 + { 
 + if ( x > 0 ) 
 + { 
 + break ; 
 + } 
 + else if ( x < 0 ) { 
 + ; 
 + } 
 + else 
 + { 
 + break ; 
 + } 
 + switch ( a ) 
 + { 
 + case 0 : 
 + break ; 
 + default : 
 + break ; 
 + } 
 + } 
 + catch ( Exception e ) 
 + { 
 + break ; 
 + } 
 + finally 
 + { 
 + break ; 
 + } 
 + } 
 + 
 + synchronized ( this ) 
 + { 
 + do 
 + { 
 + x = 2 ; 
 + } while ( x = = 2 ) ; 
 + } 
 + 
 + this . wait ( 666 
 + ) ; / / Bizarre , but legal 
 + 
 + for ( int k = 0 ; k < 1 ; k + + ) 
 + { 
 + String innerBlockVariable = " " ; 
 + } 
 + 
 + / / test input for bug reported by Joe Comuzzi 
 + if ( System . currentTimeMillis ( ) > 1000 ) 
 + return 1 ; 
 + else 
 + return 2 ; 
 + } 
 + 
 + / / Test static initialiser 
 + static 
 + { 
 + int x = 1 ; / / should not require any javadoc 
 + } 
 + 
 + 
 + 
 + public enum GreetingsEnum 
 + { 
 + HELLO , 
 + GOODBYE 
 + } ; 
 + 
 + void method2 ( ) 
 + { 
 + boolean flag = true ; 
 + if ( flag ) { 
 + System . identityHashCode ( " heh " ) ; 
 + flag = ! flag ; } String . CASE _ INSENSITIVE _ ORDER . 
 + equals ( " Xe - xe " ) ; 
 + / / it is ok to have rcurly on the same line as previous 
 + / / statement if lcurly on the same line . 
 + if ( flag ) { String . CASE _ INSENSITIVE _ ORDER . equals ( " it is ok . " ) ; } 
 + } 
 + } 
 + 
 + / * * 
 + * Test input for closing brace if that brace terminates 
 + * a statement or the body of a constructor . 
 + * / 
 + class FooCtor 
 + { 
 + 	 int i ; 
 + 	 public FooCtor ( ) 
 + { 
 + 	 	 i = 1 ; 
 + } } 
 + 
 + / * * 
 + * Test input for closing brace if that brace terminates 
 + * a statement or the body of a method . 
 + * / 
 + class FooMethod 
 + { 
 + 	 public void fooMethod ( ) 
 + { 
 + 	 	 int i = 1 ; 
 + } } 
 + 
 + / * * 
 + * Test input for closing brace if that brace terminates 
 + * a statement or the body of a named class . 
 + * / 
 + class FooInner 
 + { 
 + 	 class InnerFoo 
 + { 
 + 	 	 public void fooInnerMethod ( ) 
 + { 
 + 	 	 	 
 + 	 	 } 
 + } } 
 + 
 + / * * 
 + * False positive 
 + * 
 + * / 
 + class Absent _ CustomFieldSerializer3 { 
 + 
 + public static void serialize ( ) { } / / false positive . Expected nothing but was " ' } ' should be alone on a line . " 
 + } 
 + 
 + class Absent _ CustomFieldSerializer4 
 + { 
 + public Absent _ CustomFieldSerializer4 ( ) { } 
 + } 
 + 
 + class EmptyClass2 { } 
 + 
 + interface EmptyInterface3 { } 
 + 
 + class ClassWithStaticInitializers 
 + { 
 + static { 
 + } 
 + static 
 + { } 
 + 
 + static class Inner 
 + { 
 + static { 
 + int i = 1 ; 
 + } 
 + } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyFirstLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyFirstLine . java 
 new file mode 100644 
 index 0000000 . . c0f1dd8 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyFirstLine . java 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; import java . lang . annotation . ElementType ; import java . lang . annotation . Target ; import java . util . ArrayList ; import java . util . List ; class InputLeftCurlyFirstLine { 
 + 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyIgnoreEnums . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyIgnoreEnums . java 
 new file mode 100644 
 index 0000000 . . c964915 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyIgnoreEnums . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; 
 + 
 + public class InputLeftCurlyIgnoreEnums { 
 + enum Colors { RED , 
 + BLUE , 
 + GREEN 
 + } 
 + 
 + enum Languages { 
 + JAVA , 
 + PHP , 
 + SCALA , 
 + C , 
 + PASCAL 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyLineBreakAfter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyLineBreakAfter . java 
 new file mode 100644 
 index 0000000 . . 9a63a5f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyLineBreakAfter . java 
 @ @ - 0 , 0 + 1 , 74 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Target ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + class InputLeftCurlyLineBreakAfter 
 + { 
 + / * * @ see test method * * / 
 + int foo ( ) throws InterruptedException 
 + { 
 + int x = 1 ; 
 + int a = 2 ; 
 + while ( true ) 
 + { 
 + try 
 + { 
 + if ( x > 0 ) 
 + { 
 + break ; 
 + } 
 + else if ( x < 0 ) { 
 + ; 
 + } 
 + else { break ; } 
 + switch ( a ) 
 + { 
 + case 0 : 
 + break ; 
 + default : 
 + break ; 
 + } 
 + } 
 + catch ( Exception e ) { break ; } 
 + finally { break ; } 
 + } 
 + 
 + synchronized ( this ) { do { x = 2 ; } while ( x = = 2 ) ; } 
 + 
 + synchronized ( this ) { 
 + do { } while ( x = = 2 ) ; 
 + } 
 + 
 + for ( int k = 0 ; k < 1 ; k + + ) { String innerBlockVariable = " " ; } 
 + 
 + for ( int k = 0 ; k < 1 ; k + + ) { } 
 + 	 	 return a ; 
 + } 
 + 
 + static { int x = 1 ; } 
 + 
 + void method2 ( ) 
 + { 
 + boolean flag = false ; 
 + if ( flag ) { String . valueOf ( " foo " ) ; } 
 + } 
 + } 
 + 
 + class Absent _ CustomFieldSerializer1 { 
 + 
 + public static void serialize ( ) { } 
 + } 
 + 
 + class Absent _ CustomFieldSerializer2 
 + { 
 + public Absent _ CustomFieldSerializer2 ( ) { } 
 + } 
 + 
 + class EmptyClass1 { } 
 + 
 + interface EmptyInterface1 { } 
 + 
 + enum KnownOrder { KNOWN _ ORDER , UNKNOWN _ ORDER } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMethod . java 
 new file mode 100644 
 index 0000000 . . ac0a4db 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMethod . java 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; 
 + 
 + / * * 
 + * Test case for correct use of braces . 
 + * @ author Oliver Burn 
 + * * / 
 + class InputLeftCurlyMethod 
 + { 
 + InputLeftCurlyMethod ( ) { } 
 + InputLeftCurlyMethod ( String aOne ) { 
 + } 
 + InputLeftCurlyMethod ( int aOne ) 
 + { 
 + } 
 + 
 + void method1 ( ) { } 
 + void method2 ( ) { 
 + } 
 + void method3 ( ) 
 + { 
 + } 
 + void method4 ( ) 
 + { 
 + } 
 + void method5 ( String aOne , 
 + String aTwo ) 
 + { 
 + } 
 + void method6 ( String aOne , 
 + String aTwo ) { 
 + } 
 + } 
 + 
 + enum InputLeftCurlyMethodEnum 
 + { 
 + CONSTANT1 ( " hello " ) 
 + { 
 + void method1 ( ) { } 
 + void method2 ( ) { 
 + } 
 + void method3 ( ) 
 + { 
 + } 
 + void method4 ( ) 
 + { 
 + } 
 + void method5 ( String aOne , 
 + String aTwo ) 
 + { 
 + } 
 + void method6 ( String aOne , 
 + String aTwo ) { 
 + } 
 + } , 
 + 
 + CONSTANT2 ( " hello " ) { 
 + 
 + } , 
 + 
 + CONSTANT3 ( " hellohellohellohellohellohellohellohellohellohellohellohellohellohello " ) 
 + { 
 + } ; 
 + 
 + private InputLeftCurlyMethodEnum ( String value ) 
 + { 
 + 
 + } 
 + 
 + void method1 ( ) { } 
 + void method2 ( ) { 
 + } 
 + void method3 ( ) 
 + { 
 + } 
 + void method4 ( ) 
 + { 
 + } 
 + void method5 ( String aOne , 
 + String aTwo ) 
 + { 
 + } 
 + void method6 ( String aOne , 
 + String aTwo ) { 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMissingBraces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMissingBraces . java 
 new file mode 100644 
 index 0000000 . . ba3a3c4 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyMissingBraces . java 
 @ @ - 0 , 0 + 1 , 119 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; 
 + 
 + / * * 
 + * Test case for correct use of braces . 
 + * @ author Oliver Burn 
 + * * / 
 + class InputLeftCurlyMissingBraces 
 + { 
 + / * * @ return helper func * * / 
 + boolean condition ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + / * * Test do / while loops * * / 
 + void testDoWhile ( ) 
 + { 
 + / / Valid 
 + do { 
 + testDoWhile ( ) ; 
 + } 
 + while ( condition ( ) ) ; 
 + 
 + / / Invalid 
 + do testDoWhile ( ) ; while ( condition ( ) ) ; 
 + } 
 + 
 + / * * Test while loops * * / 
 + void testWhile ( ) 
 + { 
 + / / Valid 
 + while ( condition ( ) ) { 
 + testWhile ( ) ; 
 + } 
 + 
 + / / Invalid 
 + while ( condition ( ) ) ; 
 + while ( condition ( ) ) 
 + testWhile ( ) ; 
 + while ( condition ( ) ) 
 + if ( condition ( ) ) 
 + testWhile ( ) ; 
 + } 
 + 
 + / * * Test for loops * * / 
 + void testFor ( ) 
 + { 
 + / / Valid 
 + for ( int i = 1 ; i < 5 ; i + + ) { 
 + testFor ( ) ; 
 + } 
 + 
 + / / Invalid 
 + for ( int i = 1 ; i < 5 ; i + + ) ; 
 + for ( int i = 1 ; i < 5 ; i + + ) 
 + testFor ( ) ; 
 + for ( int i = 1 ; i < 5 ; 
 + i + + ) 
 + if ( i > 2 ) 
 + testFor ( ) ; 
 + } 
 + 
 + / * * Test if constructs * * / 
 + public void testIf ( ) 
 + { 
 + / / Valid 
 + if ( condition ( ) ) { 
 + testIf ( ) ; 
 + } 
 + else if ( condition ( ) ) { 
 + testIf ( ) ; 
 + } 
 + else { 
 + testIf ( ) ; 
 + } 
 + 
 + / / Invalid 
 + if ( condition ( ) ) ; 
 + if ( condition ( ) ) 
 + testIf ( ) ; 
 + if ( condition ( ) ) 
 + testIf ( ) ; 
 + else 
 + testIf ( ) ; 
 + if ( condition ( ) ) 
 + testIf ( ) ; 
 + else { 
 + testIf ( ) ; 
 + } 
 + if ( condition ( ) ) { 
 + testIf ( ) ; 
 + } 
 + else 
 + testIf ( ) ; 
 + if ( condition ( ) ) 
 + if ( condition ( ) ) 
 + testIf ( ) ; 
 + } 
 + 
 + void whitespaceAfterSemi ( ) 
 + { 
 + / / reject 
 + int i = 1 ; int j = 2 ; 
 + 
 + / / accept 
 + for ( ; ; ) { 
 + } 
 + } 
 + 
 + / * * Empty constructor block . * * / 
 + public InputLeftCurlyMissingBraces ( ) { } 
 + 
 + / * * Empty method block . * * / 
 + public void emptyImplementation ( ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyNewLineOptionWithLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyNewLineOptionWithLambda . java 
 new file mode 100644 
 index 0000000 . . b6ad020 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / leftcurly / InputLeftCurlyNewLineOptionWithLambda . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . leftcurly ; 
 + 
 + 
 + public class InputLeftCurlyNewLineOptionWithLambda 
 + { 
 + static Runnable r1 = ( ) - > { 
 + String . valueOf ( " Hello world one ! " ) ; 
 + } ; 
 + 
 + static Runnable r2 = ( ) - > String . valueOf ( " Hello world two ! " ) ; 
 + 
 + static Runnable r3 = ( ) - > { String . valueOf ( " Hello world two ! " ) ; } ; 
 + 
 + static Runnable r4 = ( ) - > 
 + { 
 + String . valueOf ( " Hello world one ! " ) ; 
 + } ; 
 + }

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 421f430 . . 43c7eb4 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 168 , 6 + 168 , 10 @ @ 
 < property name = " maxLineLength " value = " 100 " / > 
 < / module > 
 < module name = " NeedBraces " / > 
 + < module name = " NeedBraces " > 
 + < property name = " tokens " value = " LAMBDA " / > 
 + < property name = " allowSingleLineStatement " value = " true " / > 
 + < / module > 
 < module name = " RightCurly " > 
 < property name = " tokens " value = " METHOD _ DEF " / > 
 < property name = " tokens " value = " CTOR _ DEF " / > 
 diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index ce9951e . . a75d450 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 344 , 7 + 344 , 7 @ @ 
 < inspection _ tool class = " CloneableImplementsClone " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 < option name = " m _ ignoreCloneableDueToInheritance " value = " false " / > 
 < / inspection _ tool > 
 - < inspection _ tool class = " CodeBlock2Expr " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < inspection _ tool class = " CodeBlock2Expr " enabled = " false " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CoffeeScriptArgumentsOutsideFunction " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CoffeeScriptFunctionSignatures " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CoffeeScriptInfiniteLoop " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 index 8ed29f0 . . 7191d06 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 @ @ - 158 , 9 + 158 , 9 @ @ public class EqualsHashCodeCheck 
 @ Override 
 public void finishTree ( DetailAST rootAST ) { 
 objBlockWithEquals 
 - . entrySet ( ) . stream ( ) . filter ( detailASTDetailASTEntry - > 
 - objBlockWithHashCode . remove ( detailASTDetailASTEntry . getKey ( ) ) = = null ) 
 - . forEach ( detailASTDetailASTEntry - > { 
 + . entrySet ( ) . stream ( ) . filter ( detailASTDetailASTEntry - > { 
 + return objBlockWithHashCode . remove ( detailASTDetailASTEntry . getKey ( ) ) = = null ; 
 + } ) . forEach ( detailASTDetailASTEntry - > { 
 final DetailAST equalsAST = detailASTDetailASTEntry . getValue ( ) ; 
 log ( equalsAST . getLineNo ( ) , equalsAST . getColumnNo ( ) , MSG _ KEY _ HASHCODE ) ; 
 } ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 index fb4d9ef . . 66b7b6c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 @ @ - 377 , 9 + 377 , 9 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { 
 final DetailAST forUpdateListAST = forIteratorAST . findFirstToken ( TokenTypes . ELIST ) ; 
 
 findChildrenOfExpressionType ( forUpdateListAST ) . stream ( ) 
 - . filter ( iteratingExpressionAST - > 
 - MUTATION _ OPERATIONS . contains ( iteratingExpressionAST . getType ( ) ) ) 
 - . forEach ( iteratingExpressionAST - > { 
 + . filter ( iteratingExpressionAST - > { 
 + return MUTATION _ OPERATIONS . contains ( iteratingExpressionAST . getType ( ) ) ; 
 + } ) . forEach ( iteratingExpressionAST - > { 
 final DetailAST oneVariableOperatorChild = iteratingExpressionAST . getFirstChild ( ) ; 
 if ( oneVariableOperatorChild . getType ( ) = = TokenTypes . IDENT ) { 
 iteratorVariables . add ( oneVariableOperatorChild . getText ( ) ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 index fdb7b34 . . b74a614 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 @ @ - 184 , 11 + 184 , 12 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 if ( methodImplOpenBrace ! = null ) { 
 final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; 
 - final Predicate < DetailAST > predicate = currentNode - > 
 - currentNode ! = null 
 + final Predicate < DetailAST > predicate = currentNode - > { 
 + return currentNode ! = null 
 & & currentNode ! = methodImplCloseBrace 
 & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) 
 & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; 
 + } ; 
 final Optional < DetailAST > methodBody = 
 TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; 
 if ( methodBody . isPresent ( ) ) { 
 @ @ - 237 , 9 + 238 , 11 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 boolean containsAnnotation = false ; 
 if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { 
 final Optional < DetailAST > annotation = TokenUtils . findFirstTokenByPredicate ( modifiers , 
 - currentToken - > currentToken ! = null 
 - & & currentToken . getType ( ) = = TokenTypes . ANNOTATION 
 - & & annotationName . equals ( getAnnotationName ( currentToken ) ) ) ; 
 + currentToken - > { 
 + return currentToken ! = null 
 + & & currentToken . getType ( ) = = TokenTypes . ANNOTATION 
 + & & annotationName . equals ( getAnnotationName ( currentToken ) ) ; 
 + } ) ; 
 if ( annotation . isPresent ( ) ) { 
 containsAnnotation = true ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index 3b0f535 . . 932bf4d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 724 , 8 + 724 , 10 @ @ public class VisibilityModifierCheck 
 * / 
 private boolean areImmutableTypeArguments ( List < String > typeArgsClassNames ) { 
 return ! typeArgsClassNames . stream ( ) . filter ( 
 - typeName - > ! immutableClassShortNames . contains ( typeName ) 
 - & & ! immutableClassCanonicalNames . contains ( typeName ) ) . findFirst ( ) . isPresent ( ) ; 
 + typeName - > { 
 + return ! immutableClassShortNames . contains ( typeName ) 
 + & & ! immutableClassCanonicalNames . contains ( typeName ) ; 
 + } ) . findFirst ( ) . isPresent ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java 
 index 68581de . . 2b6f27b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java 
 @ @ - 43 , 8 + 43 , 9 @ @ class ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel { 
 * / 
 ListToTreeSelectionModelWrapper ( JTreeTable jTreeTable ) { 
 treeTable = jTreeTable ; 
 - getListSelectionModel ( ) . addListSelectionListener ( event - > 
 - updateSelectedPathsFromSelectedRows ( ) ) ; 
 + getListSelectionModel ( ) . addListSelectionListener ( event - > { 
 + updateSelectedPathsFromSelectedRows ( ) ; 
 + } ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 index ad1134a . . b3d3a48 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 @ @ - 122 , 9 + 122 , 11 @ @ public class DetailASTTest { 
 } 
 
 private static void checkDir ( File dir ) throws Exception { 
 - final File [ ] files = dir . listFiles ( file - > ( file . getName ( ) . endsWith ( " . java " ) 
 + final File [ ] files = dir . listFiles ( file - > { 
 + return ( file . getName ( ) . endsWith ( " . java " ) 
 | | file . isDirectory ( ) ) 
 - & & ! file . getName ( ) . endsWith ( " InputGrammar . java " ) ) ; 
 + & & ! file . getName ( ) . endsWith ( " InputGrammar . java " ) ; 
 + } ) ; 
 for ( File file : files ) { 
 if ( file . isFile ( ) ) { 
 checkFile ( file . getCanonicalPath ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index 842b20c . . adb04f4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 183 , 7 + 183 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NeedBraces " , Stream . of ( 
 / / we prefer no braces here as it looks unusual even though they help avoid sharing 
 / / scope of variables 
 - " LITERAL _ DEFAULT " , " LITERAL _ CASE " , " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + " LITERAL _ DEFAULT " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; 
 CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " FinalParameters " , Stream . of ( 
 / / we prefer these to be effectively final as to not damage readability 
 " FOR _ EACH _ CLAUSE " , " LITERAL _ CATCH " ) . collect ( Collectors . toSet ( ) ) ) ;
