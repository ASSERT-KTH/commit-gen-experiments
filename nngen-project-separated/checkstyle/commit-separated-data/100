BLEU SCORE: 0.05073552004225952

TEST MSG: Issue # 4022 : Removed shouldStartLine property for RightCurly
GENERATED MSG: Add new option for RightCurlyCheck , issue # 1019 .

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> index 732bbf5 . . 604a8e2 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ ALONE ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ BREAK _ BEFORE ; <nl> - import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ NEW ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ SAME ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 83 , 10 + 82 , 11 @ @ public class RightCurlyTest extends AbstractModuleTestSupport { <nl> public void testRightCurlyAloneOther ( ) throws Exception { <nl> final String [ ] expected = { <nl> " 97 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> - " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , <nl> " 108 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> - " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> - " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , <nl> + " 122 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , <nl> } ; <nl> <nl> final Configuration checkConfig = getModuleConfig ( " RightCurly " , " RightCurlyAlone " ) ; <nl> diff - - git a / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionRightCurlyTest . java b / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionRightCurlyTest . java <nl> index afc4fff . . 73d4bf1 100644 <nl> - - - a / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionRightCurlyTest . java <nl> + + + b / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionRightCurlyTest . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport { <nl> <nl> final String [ ] expectedViolation = { <nl> " 9 : 15 : " + getCheckMessage ( RightCurlyCheck . class , <nl> - RightCurlyCheck . MSG _ KEY _ LINE _ NEW , " } " , 15 ) , <nl> + RightCurlyCheck . MSG _ KEY _ LINE _ ALONE , " } " , 15 ) , <nl> } ; <nl> <nl> final List < String > expectedXpathQueries = Collections . singletonList ( <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> index e0ceb89 . . 5cd0540 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> @ @ - 24 , 11 + 24 , 9 @ @ import java . util . Locale ; <nl> import com . puppycrawl . tools . checkstyle . StatelessCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . Scope ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> - import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 53 , 10 + 51 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; <nl> * { @ link TokenTypes # INSTANCE _ INIT INSTANCE _ INIT } . <nl> * < / p > <nl> * < p > <nl> - * < b > shouldStartLine < / b > - does the check need to check <nl> - * if right curly starts line . Default value is < b > true < / b > <nl> - * < / p > <nl> - * < p > <nl> * An example of how to configure the check is : <nl> * < / p > <nl> * < pre > <nl> @ @ - 96 , 15 + 90 , 6 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> * / <nl> public static final String MSG _ KEY _ LINE _ SAME = " line . same " ; <nl> <nl> - / * * <nl> - * A key is pointing to the warning message text in " messages . properties " <nl> - * file . <nl> - * / <nl> - public static final String MSG _ KEY _ LINE _ NEW = " line . new " ; <nl> - <nl> - / * * Do we need to check if right curly starts line . * / <nl> - private boolean shouldStartLine = true ; <nl> - <nl> / * * The policy to enforce . * / <nl> private RightCurlyOption option = RightCurlyOption . SAME ; <nl> <nl> @ @ - 117 , 14 + 102 , 6 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> option = RightCurlyOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> } <nl> <nl> - / * * <nl> - * Does the check need to check if right curly starts line . <nl> - * @ param flag new value of this property . <nl> - * / <nl> - public void setShouldStartLine ( boolean flag ) { <nl> - shouldStartLine = flag ; <nl> - } <nl> - <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return new int [ ] { <nl> @ @ - 187 , 15 + 164 , 9 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> else if ( shouldBeOnSameLine ( option , details ) ) { <nl> violation = MSG _ KEY _ LINE _ SAME ; <nl> } <nl> - else if ( shouldBeAloneOnLine ( option , details ) ) { <nl> + else if ( shouldBeAloneOnLine ( option , details , getLine ( details . rcurly . getLineNo ( ) - 1 ) ) ) { <nl> violation = MSG _ KEY _ LINE _ ALONE ; <nl> } <nl> - else if ( shouldStartLine ) { <nl> - final String targetSourceLine = getLines ( ) [ details . rcurly . getLineNo ( ) - 1 ] ; <nl> - if ( ! isOnStartOfLine ( details , targetSourceLine ) ) { <nl> - violation = MSG _ KEY _ LINE _ NEW ; <nl> - } <nl> - } <nl> return violation ; <nl> } <nl> <nl> @ @ - 228 , 13 + 199 , 16 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> * Checks that a right curly should be alone on a line . <nl> * @ param bracePolicy option for placing the right curly brace <nl> * @ param details Details for validation <nl> + * @ param targetSrcLine A string with contents of rcurly ' s line <nl> * @ return true if a right curly should be alone on a line . <nl> * / <nl> - private static boolean shouldBeAloneOnLine ( RightCurlyOption bracePolicy , Details details ) { <nl> + private static boolean shouldBeAloneOnLine ( RightCurlyOption bracePolicy , <nl> + Details details , <nl> + String targetSrcLine ) { <nl> return bracePolicy = = RightCurlyOption . ALONE <nl> - & & shouldBeAloneOnLineWithAloneOption ( details ) <nl> + & & shouldBeAloneOnLineWithAloneOption ( details , targetSrcLine ) <nl> | | bracePolicy = = RightCurlyOption . ALONE _ OR _ SINGLELINE <nl> - & & shouldBeAloneOnLineWithAloneOrSinglelineOption ( details ) <nl> + & & shouldBeAloneOnLineWithAloneOrSinglelineOption ( details , targetSrcLine ) <nl> | | details . shouldCheckLastRcurly <nl> & & details . rcurly . getLineNo ( ) = = details . nextToken . getLineNo ( ) ; <nl> } <nl> @ @ - 242 , 48 + 216 , 68 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> / * * <nl> * Whether right curly should be alone on line when ALONE option is used . <nl> * @ param details details for validation . <nl> + * @ param targetSrcLine A string with contents of rcurly ' s line <nl> * @ return true , if right curly should be alone on line when ALONE option is used . <nl> * / <nl> - private static boolean shouldBeAloneOnLineWithAloneOption ( Details details ) { <nl> - return ! isAloneOnLine ( details ) <nl> + private static boolean shouldBeAloneOnLineWithAloneOption ( Details details , <nl> + String targetSrcLine ) { <nl> + return ! isAloneOnLine ( details , targetSrcLine ) <nl> & & ! isEmptyBody ( details . lcurly ) ; <nl> } <nl> <nl> / * * <nl> * Whether right curly should be alone on line when ALONE _ OR _ SINGLELINE option is used . <nl> * @ param details details for validation . <nl> + * @ param targetSrcLine A string with contents of rcurly ' s line <nl> * @ return true , if right curly should be alone on line <nl> * when ALONE _ OR _ SINGLELINE option is used . <nl> * / <nl> - private static boolean shouldBeAloneOnLineWithAloneOrSinglelineOption ( Details details ) { <nl> - return ! isAloneOnLine ( details ) <nl> + private static boolean shouldBeAloneOnLineWithAloneOrSinglelineOption ( Details details , <nl> + String targetSrcLine ) { <nl> + return ! isAloneOnLine ( details , targetSrcLine ) <nl> & & ! isSingleLineBlock ( details ) <nl> - & & ! isAnonInnerClassInit ( details . lcurly ) <nl> & & ! isEmptyBody ( details . lcurly ) ; <nl> } <nl> <nl> / * * <nl> - * Whether right curly brace starts target source line . <nl> - * @ param details Details of right curly brace for validation <nl> - * @ param targetSourceLine source line to check <nl> - * @ return true if right curly brace starts target source line . <nl> - * / <nl> - private static boolean isOnStartOfLine ( Details details , String targetSourceLine ) { <nl> - return CommonUtil . hasWhitespaceBefore ( details . rcurly . getColumnNo ( ) , targetSourceLine ) <nl> - | | details . lcurly . getLineNo ( ) = = details . rcurly . getLineNo ( ) ; <nl> - } <nl> - <nl> - / * * <nl> * Checks whether right curly is alone on a line . <nl> * @ param details for validation . <nl> + * @ param targetSrcLine A string with contents of rcurly ' s line <nl> * @ return true if right curly is alone on a line . <nl> * / <nl> - private static boolean isAloneOnLine ( Details details ) { <nl> + private static boolean isAloneOnLine ( Details details , String targetSrcLine ) { <nl> final DetailAST rcurly = details . rcurly ; <nl> - final DetailAST lcurly = details . lcurly ; <nl> final DetailAST nextToken = details . nextToken ; <nl> - return rcurly . getLineNo ( ) ! = lcurly . getLineNo ( ) <nl> - & & rcurly . getLineNo ( ) ! = nextToken . getLineNo ( ) ; <nl> + return ( rcurly . getLineNo ( ) ! = nextToken . getLineNo ( ) | | skipDoubleBraceInstInit ( details ) ) <nl> + & & CommonUtil . hasWhitespaceBefore ( details . rcurly . getColumnNo ( ) , targetSrcLine ) ; <nl> + } <nl> + <nl> + / * * <nl> + * This method determines if the double brace initialization should be skipped over by the <nl> + * check . Double brace initializations are treated differently . The corresponding inner <nl> + * rcurly is treated as if it was alone on line even when it may be followed by another <nl> + * rcurly and a semi , raising no violations . <nl> + * < i > Please do note though that the line should not contain anything other than the following <nl> + * right curly and the semi following it or else violations will be raised . < / i > <nl> + * Only the kind of double brace initializations shown in the following example code will be <nl> + * skipped over : < br > <nl> + * < pre > <nl> + * { @ code Map < String , String > map = new LinkedHashMap < > ( ) { { <nl> + * put ( " alpha " , " man " ) ; <nl> + * } } ; / / no violation } <nl> + * < / pre > <nl> + * <nl> + * @ param details { @ link Details } object containing the details relevant to the rcurly <nl> + * @ return if the double brace initialization rcurly should be skipped over by the check <nl> + * / <nl> + private static boolean skipDoubleBraceInstInit ( Details details ) { <nl> + final DetailAST rcurly = details . rcurly ; <nl> + final DetailAST tokenAfterNextToken = Details . getNextToken ( details . nextToken ) ; <nl> + return rcurly . getParent ( ) . getParent ( ) . getType ( ) = = TokenTypes . INSTANCE _ INIT <nl> + & & details . nextToken . getType ( ) = = TokenTypes . RCURLY <nl> + & & tokenAfterNextToken . getType ( ) = = TokenTypes . SEMI <nl> + & & rcurly . getLineNo ( ) ! = Details . getNextToken ( tokenAfterNextToken ) . getLineNo ( ) ; <nl> + <nl> } <nl> <nl> / * * <nl> @ @ - 294 , 19 + 288 , 16 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> private static boolean isSingleLineBlock ( Details details ) { <nl> final DetailAST rcurly = details . rcurly ; <nl> final DetailAST lcurly = details . lcurly ; <nl> - final DetailAST nextToken = details . nextToken ; <nl> + DetailAST nextToken = details . nextToken ; <nl> + while ( nextToken . getType ( ) = = TokenTypes . LITERAL _ ELSE ) { <nl> + nextToken = Details . getNextToken ( nextToken ) ; <nl> + } <nl> + if ( nextToken . getType ( ) = = TokenTypes . DO _ WHILE ) { <nl> + final DetailAST doWhileSemi = nextToken . getParent ( ) . getLastChild ( ) ; <nl> + nextToken = Details . getNextToken ( doWhileSemi ) ; <nl> + } <nl> return rcurly . getLineNo ( ) = = lcurly . getLineNo ( ) <nl> - & & rcurly . getLineNo ( ) ! = nextToken . getLineNo ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Checks whether lcurly is in anonymous inner class initialization . <nl> - * @ param lcurly left curly token . <nl> - * @ return true if lcurly begins anonymous inner class initialization . <nl> - * / <nl> - private static boolean isAnonInnerClassInit ( DetailAST lcurly ) { <nl> - final Scope surroundingScope = ScopeUtil . getSurroundingScope ( lcurly ) ; <nl> - return surroundingScope . ordinal ( ) = = Scope . ANONINNER . ordinal ( ) ; <nl> + & & rcurly . getLineNo ( ) ! = nextToken . getLineNo ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 482 , 13 + 473 , 11 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> private static Details getDetailsForOthers ( DetailAST ast ) { <nl> DetailAST rcurly = null ; <nl> final DetailAST lcurly ; <nl> - final DetailAST nextToken ; <nl> final int tokenType = ast . getType ( ) ; <nl> if ( tokenType = = TokenTypes . CLASS _ DEF ) { <nl> final DetailAST child = ast . getLastChild ( ) ; <nl> lcurly = child . getFirstChild ( ) ; <nl> rcurly = child . getLastChild ( ) ; <nl> - nextToken = ast ; <nl> } <nl> else { <nl> lcurly = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> @ @ - 496 , 9 + 485 , 8 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> / / SLIST could be absent if method is abstract <nl> rcurly = lcurly . getLastChild ( ) ; <nl> } <nl> - nextToken = getNextToken ( ast ) ; <nl> } <nl> - return new Details ( lcurly , rcurly , nextToken , false ) ; <nl> + return new Details ( lcurly , rcurly , getNextToken ( ast ) , false ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 537 , 11 + 525 , 19 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> private static DetailAST getNextToken ( DetailAST ast ) { <nl> DetailAST next = null ; <nl> DetailAST parent = ast ; <nl> - while ( next = = null ) { <nl> + while ( next = = null & & parent ! = null ) { <nl> next = parent . getNextSibling ( ) ; <nl> parent = parent . getParent ( ) ; <nl> } <nl> - return CheckUtil . getFirstNode ( next ) ; <nl> + if ( next = = null ) { <nl> + / / a DetailAST object with DetailAST # NOT _ INITIALIZED for line and column numbers <nl> + / / that no ' actual ' DetailAST objects can have . <nl> + next = new DetailAST ( ) ; <nl> + } <nl> + else { <nl> + next = CheckUtil . getFirstNode ( next ) ; <nl> + } <nl> + return next ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> index c77fd51 . . eea5b2b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ ALONE ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ BREAK _ BEFORE ; <nl> - import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ NEW ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ SAME ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> @ @ - 102 , 13 + 101 , 13 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( RightCurlyCheck . class ) ; <nl> checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; <nl> checkConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF " ) ; <nl> - checkConfig . addAttribute ( " shouldStartLine " , " true " ) ; <nl> final String [ ] expected = { <nl> " 111 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> - " 111 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + " 111 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , <nl> " 122 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> - " 122 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> - " 136 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + " 122 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , <nl> + " 136 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + " 136 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputRightCurlyLeft . java " ) , expected ) ; <nl> } <nl> @ @ - 117 , 7 + 116 , 6 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> public void testShouldStartLine ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( RightCurlyCheck . class ) ; <nl> checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; <nl> - checkConfig . addAttribute ( " shouldStartLine " , " false " ) ; <nl> final String [ ] expected = { <nl> " 93 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , <nl> " 97 : 72 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 72 ) , <nl> @ @ - 141 , 7 + 139 , 6 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> public void testMethodCtorNamedClassClosingBrace ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( RightCurlyCheck . class ) ; <nl> checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; <nl> - checkConfig . addAttribute ( " shouldStartLine " , " false " ) ; <nl> final String [ ] expected = { <nl> " 93 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , <nl> " 97 : 72 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 72 ) , <nl> @ @ - 211 , 7 + 208 , 7 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> " 107 : 29 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 29 ) , <nl> " 111 : 88 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 88 ) , <nl> " 111 : 40 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 40 ) , <nl> - " 114 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 18 ) , <nl> + " 114 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 18 ) , <nl> " 118 : 23 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 23 ) , <nl> " 121 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , <nl> " 123 : 30 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 30 ) , <nl> @ @ - 219 , 25 + 216 , 24 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> " 136 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> " 138 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> " 138 : 33 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 33 ) , <nl> - " 148 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> " 150 : 75 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 75 ) , <nl> " 151 : 58 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 58 ) , <nl> " 151 : 74 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 74 ) , <nl> " 152 : 58 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 58 ) , <nl> " 153 : 58 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 58 ) , <nl> " 153 : 74 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 74 ) , <nl> - " 159 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 37 ) , <nl> + " 159 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , <nl> " 166 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , <nl> " 181 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> " 188 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> - " 188 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 13 ) , <nl> + " 188 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 13 ) , <nl> " 197 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> - " 197 : 10 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 10 ) , <nl> + " 197 : 10 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 10 ) , <nl> " 201 : 54 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 54 ) , <nl> - " 201 : 55 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 55 ) , <nl> + " 201 : 55 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 55 ) , <nl> " 204 : 75 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 75 ) , <nl> " 204 : 76 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 76 ) , <nl> - " 204 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 77 ) , <nl> + " 204 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 77 ) , <nl> " 208 : 76 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 76 ) , <nl> " 216 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , <nl> } ; <nl> @ @ - 253 , 26 + 249 , 35 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> + " LITERAL _ WHILE , LITERAL _ DO , STATIC _ INIT , INSTANCE _ INIT " ) ; <nl> final String [ ] expected = { <nl> " 60 : 26 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 26 ) , <nl> - " 69 : 29 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 29 ) , <nl> " 74 : 42 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 42 ) , <nl> - " 77 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 18 ) , <nl> + " 77 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 18 ) , <nl> " 85 : 30 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 30 ) , <nl> + " 89 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 77 ) , <nl> " 97 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> " 99 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> - " 119 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 37 ) , <nl> - " 126 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 37 ) , <nl> - " 148 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 13 ) , <nl> + " 110 : 75 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 75 ) , <nl> + " 111 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 77 ) , <nl> + " 111 : 93 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 93 ) , <nl> + " 112 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 77 ) , <nl> + " 113 : 64 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 64 ) , <nl> + " 113 : 80 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 80 ) , <nl> + " 119 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , <nl> + " 126 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , <nl> + " 141 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> + " 148 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> + " 148 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 13 ) , <nl> " 157 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> - " 157 : 10 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 10 ) , <nl> + " 157 : 10 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 10 ) , <nl> " 161 : 54 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 54 ) , <nl> - " 161 : 55 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 55 ) , <nl> + " 161 : 55 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 55 ) , <nl> " 164 : 75 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 75 ) , <nl> " 164 : 76 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 76 ) , <nl> - " 164 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 77 ) , <nl> + " 168 : 80 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 80 ) , <nl> + " 164 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 77 ) , <nl> " 176 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , <nl> - " 182 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 24 ) , <nl> - " 185 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 24 ) , <nl> - " 188 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 24 ) , <nl> + " 182 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 24 ) , <nl> + " 185 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 24 ) , <nl> + " 188 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 24 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputRightCurlyAloneOrSingleline . java " ) , expected ) ; <nl> } <nl> @ @ - 353 , 7 + 358 , 7 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> " 25 : 35 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 35 ) , <nl> " 27 : 92 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 92 ) , <nl> " 33 : 67 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 67 ) , <nl> - " 35 : 15 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 15 ) , <nl> + " 35 : 15 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 15 ) , <nl> " 37 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 13 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputRightCurlyTryResource . java " ) , expected ) ; <nl> @ @ - 365 , 7 + 370 , 7 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE _ OR _ SINGLELINE . toString ( ) ) ; <nl> final String [ ] expected = { <nl> " 19 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> - " 35 : 15 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 15 ) , <nl> + " 35 : 15 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 15 ) , <nl> " 37 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 13 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputRightCurlyTryResource . java " ) , expected ) ; <nl> @ @ - 410 , 4 + 415 , 50 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> getPath ( " InputRightCurlySameLambda . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testOptionAlone ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( RightCurlyCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; <nl> + checkConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , LITERAL _ IF , LITERAL _ ELSE , " <nl> + + " LITERAL _ DO , LITERAL _ WHILE , LITERAL _ FOR , STATIC _ INIT , INSTANCE _ INIT " ) ; <nl> + final String [ ] expected = { <nl> + " 7 : 15 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 15 ) , <nl> + " 8 : 21 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 21 ) , <nl> + " 12 : 26 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 26 ) , <nl> + " 21 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , <nl> + " 38 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> + " 42 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , <nl> + " 45 : 30 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 30 ) , <nl> + " 47 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , <nl> + " 49 : 17 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 17 ) , <nl> + " 51 : 53 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 53 ) , <nl> + " 53 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , <nl> + " 53 : 52 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 52 ) , <nl> + " 61 : 42 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 42 ) , <nl> + " 63 : 43 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 43 ) , <nl> + " 67 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputRightCurlyAlone . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testOptionAloneOrSingleLine ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( RightCurlyCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE _ OR _ SINGLELINE . toString ( ) ) ; <nl> + checkConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , LITERAL _ IF , LITERAL _ ELSE , " <nl> + + " LITERAL _ DO , LITERAL _ WHILE , LITERAL _ FOR , STATIC _ INIT , INSTANCE _ INIT " ) ; <nl> + final String [ ] expected = { <nl> + " 12 : 26 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 26 ) , <nl> + " 21 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , <nl> + " 29 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> + " 38 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , <nl> + " 42 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , <nl> + " 63 : 43 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 43 ) , <nl> + " 67 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( <nl> + " InputRightCurlyAloneOrSingleLine2 . java " ) , expected ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAlone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAlone . java <nl> new file mode 100644 <nl> index 0000000 . . d3a3296 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAlone . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . rightcurly ; <nl> + <nl> + public class InputRightCurlyAlone { <nl> + <nl> + private int a ; <nl> + private static int b ; <nl> + { a = 2 ; } / / violation <nl> + static { b = 3 ; } / / violation <nl> + <nl> + void method1 ( ) { <nl> + Thread t = new Thread ( ) { @ Override public void run ( ) { <nl> + int a ; int b ; } / / violation <nl> + } ; <nl> + } <nl> + <nl> + void method2 ( java . util . HashSet < String > set ) { <nl> + java . util . Map < String , String > map1 = new java . util . LinkedHashMap < String , String > ( ) { { <nl> + put ( " Hello " , " World " ) ; <nl> + put ( " first " , " second " ) ; <nl> + put ( " polygene " , " lubricants " ) ; <nl> + put ( " alpha " , " betical " ) ; } / / violation <nl> + } ; <nl> + <nl> + java . util . Map < String , String > map2 = new java . util . LinkedHashMap < String , String > ( ) { { <nl> + put ( " Hello " , " World " ) ; <nl> + put ( " first " , " second " ) ; <nl> + put ( " polygene " , " lubricants " ) ; <nl> + put ( " alpha " , " betical " ) ; <nl> + } } ; / / NO violation <nl> + } <nl> + <nl> + void method3 ( ) { <nl> + method2 ( new java . util . HashSet < String > ( ) { { <nl> + add ( " XZ13s " ) ; <nl> + add ( " AB21 / X " ) ; <nl> + add ( " YYLEX " ) ; <nl> + add ( " AR5E " ) ; <nl> + } } ) ; / / violation <nl> + } <nl> + <nl> + int method4 ( int a ) { <nl> + if ( a > 2 ) a * = 10 ; return + + a ; } / / violation <nl> + <nl> + void method5 ( int a ) { <nl> + while ( a > 5 ) { a - - ; } / / violation <nl> + <nl> + if ( a > 4 ) { a + + ; } / / violation <nl> + <nl> + do { a - - ; } while ( a > 3 ) ; / / violation <nl> + <nl> + for ( int i = 1 ; i < 10 ; i + + ) { byte b = 10 ; } / / violation <nl> + <nl> + if ( a < 2 ) { - - a ; } else if ( a > 3 ) { a + + ; } / / 2 violations <nl> + <nl> + java . util . List < String > list = new java . util . ArrayList < > ( ) ; <nl> + list . stream ( ) <nl> + . filter ( e - > { return ! e . isEmpty ( ) & & ! " null " . equals ( e ) ; } ) <nl> + . collect ( java . util . stream . Collectors . toList ( ) ) ; <nl> + } <nl> + <nl> + class TestClass { private int field ; } / / violation <nl> + <nl> + class TestClass2 { private int field ; } ; / / violation <nl> + <nl> + class TestClass3 { <nl> + private int field ; <nl> + } ; / / violation <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleLine2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleLine2 . java <nl> new file mode 100644 <nl> index 0000000 . . 79f1d96 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleLine2 . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . rightcurly ; <nl> + <nl> + public class InputRightCurlyAloneOrSingleLine2 { <nl> + <nl> + private int a ; <nl> + private static int b ; <nl> + { a = 2 ; } <nl> + static { b = 3 ; } <nl> + <nl> + void method1 ( ) { <nl> + Thread t = new Thread ( ) { @ Override public void run ( ) { <nl> + int a ; int b ; } / / violation <nl> + } ; <nl> + } <nl> + <nl> + void method2 ( java . util . HashSet < String > set ) { <nl> + java . util . Map < String , String > map1 = new java . util . LinkedHashMap < String , String > ( ) { { <nl> + put ( " Hello " , " World " ) ; <nl> + put ( " first " , " second " ) ; <nl> + put ( " polygene " , " lubricants " ) ; <nl> + put ( " alpha " , " betical " ) ; } / / violation <nl> + } ; <nl> + <nl> + java . util . Map < String , String > map2 = new java . util . LinkedHashMap < String , String > ( ) { { <nl> + put ( " Hello " , " World " ) ; <nl> + put ( " first " , " second " ) ; <nl> + put ( " polygene " , " lubricants " ) ; <nl> + put ( " alpha " , " betical " ) ; <nl> + } } ; ; / / violation <nl> + } <nl> + <nl> + void method3 ( ) { <nl> + method2 ( new java . util . HashSet < String > ( ) { { <nl> + add ( " XZ13s " ) ; <nl> + add ( " AB21 / X " ) ; <nl> + add ( " YYLEX " ) ; <nl> + add ( " AR5E " ) ; <nl> + } } ) ; / / violation <nl> + } <nl> + <nl> + int method4 ( int a ) { <nl> + if ( a > 2 ) a * = 10 ; return + + a ; } / / violation <nl> + <nl> + void method5 ( int a ) { <nl> + while ( a > 5 ) { a - - ; } <nl> + <nl> + if ( a > 4 ) { a + + ; } <nl> + <nl> + do { a - - ; } while ( a > 3 ) ; / / NO violation <nl> + <nl> + for ( int i = 1 ; i < 10 ; i + + ) { byte b = 10 ; } <nl> + <nl> + if ( a < 2 ) { - - a ; } else if ( a > 3 ) { a + + ; } <nl> + <nl> + java . util . List < String > list = new java . util . ArrayList < > ( ) ; <nl> + list . stream ( ) <nl> + . filter ( e - > { return ! e . isEmpty ( ) & & ! " null " . equals ( e ) ; } ) <nl> + . collect ( java . util . stream . Collectors . toList ( ) ) ; <nl> + } <nl> + <nl> + class TestClass { private int field ; } <nl> + <nl> + class TestClass2 { private int field ; } ; / / violation <nl> + <nl> + class TestClass3 { <nl> + private int field ; <nl> + } ; / / violation <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleline . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleline . java <nl> index 60857f1 . . c634c19 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleline . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleline . java <nl> @ @ - 105 , 7 + 105 , 7 @ @ public class InputRightCurlyAloneOrSingleline { <nl> put ( " first " , " second " ) ; <nl> put ( " polygene " , " lubricants " ) ; <nl> put ( " alpha " , " betical " ) ; <nl> - } } ; / / it ' s ok <nl> + } } ; / / NO violation <nl> <nl> Thread t = new Thread ( ) { @ Override public void run ( ) { super . run ( ) ; } } ; <nl> new Object ( ) { @ Override protected void finalize ( ) { " " . toString ( ) ; } { int a = 5 ; } } ; <nl> @ @ - 138 , 14 + 138 , 14 @ @ public class InputRightCurlyAloneOrSingleline { <nl> add ( " AB21 / X " ) ; <nl> add ( " YYLEX " ) ; <nl> add ( " AR5E " ) ; <nl> - } } ) ; / / it ' s ok , can ' t be formatted better <nl> + } } ) ; / / violation <nl> <nl> foo23 ( new java . util . HashSet < String > ( ) { { <nl> add ( " XZ13s " ) ; <nl> add ( " AB21 / X " ) ; <nl> add ( " YYLEX " ) ; <nl> add ( " AR5E " ) ; <nl> - } } ) ; } / / violation <nl> + } } ) ; } / / 2 violations <nl> <nl> <nl> void foo23 ( java . util . HashSet < String > set ) { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAnnotations . java <nl> index 270bbfd . . 5b66397 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAnnotations . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAnnotations . java <nl> @ @ - 145 , 7 + 145 , 7 @ @ class InputRightCurlyAnnotations <nl> put ( " first " , " second " ) ; <nl> put ( " polygene " , " lubricants " ) ; <nl> put ( " alpha " , " betical " ) ; <nl> - } } ; / / violation <nl> + } } ; / / NO violation <nl> <nl> Thread t = new Thread ( ) { @ Override public void run ( ) { super . run ( ) ; } } ; / / violation <nl> new Object ( ) { public int hashCode ( ) { return 1 ; } { int a = 5 ; } } ; / / violation <nl> diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml <nl> index 641ebe7 . . d9a536c 100644 <nl> - - - a / src / xdocs / config _ blocks . xml <nl> + + + b / src / xdocs / config _ blocks . xml <nl> @ @ - 897 , 14 + 897 , 6 @ @ for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK <nl> < td > 3 . 0 < / td > <nl> < / tr > <nl> < tr > <nl> - < td > shouldStartLine < / td > <nl> - < td > should we check if < code > ' } ' < / code > <nl> - starts line . < / td > <nl> - < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> - < td > < code > true < / code > < / td > <nl> - < td > 4 . 2 < / td > <nl> - < / tr > <nl> - < tr > <nl> < td > tokens < / td > <nl> < td > tokens to check < / td > <nl> <nl> @ @ - 1016 , 10 + 1008 , 6 @ @ for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK <nl> line . break . before < / a > <nl> < / li > <nl> < li > <nl> - < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources % 2Fcom % 2Fpuppycrawl % 2Ftools % 2Fcheckstyle % 2Fchecks % 2Fblocks + filename % 3Amessages * . properties + repo % 3Acheckstyle % 2Fcheckstyle + % 22line . new % 22 " > <nl> - line . new < / a > <nl> - < / li > <nl> - < li > <nl> < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources % 2Fcom % 2Fpuppycrawl % 2Ftools % 2Fcheckstyle % 2Fchecks % 2Fblocks + filename % 3Amessages * . properties + repo % 3Acheckstyle % 2Fcheckstyle + % 22line . same % 22 " > <nl> line . same < / a > <nl> < / li >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTagInfo . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTagInfo . java <nl> index f19c1ef . . 249d9ff 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTagInfo . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTagInfo . java <nl> @ @ - 432 , 7 + 432 , 7 @ @ public enum JavadocTagInfo { <nl> * @ param name the tag name <nl> * @ param type the type of tag <nl> * / <nl> - private JavadocTagInfo ( final String text , final String name , <nl> + JavadocTagInfo ( final String text , final String name , <nl> final Type type ) { <nl> this . text = text ; <nl> this . name = name ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / LineSeparatorOption . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / LineSeparatorOption . java <nl> index f6629e1 . . 4dd5423 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / LineSeparatorOption . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / LineSeparatorOption . java <nl> @ @ - 51 , 7 + 51 , 7 @ @ public enum LineSeparatorOption { <nl> * Creates a new < code > LineSeparatorOption < / code > instance . <nl> * @ param sep the line separator , e . g . " \ r \ n " <nl> * / <nl> - private LineSeparatorOption ( String sep ) { <nl> + LineSeparatorOption ( String sep ) { <nl> lineSeparator = sep . getBytes ( StandardCharsets . US _ ASCII ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> index c13759a . . 0d84a0e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> @ @ - 28 , 9 + 28 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * Checks for redundant modifiers in interface and annotation definitions . <nl> - * Also checks for redundant final modifiers on methods of final classes . <nl> + * Also checks for redundant final modifiers on methods of final classes <nl> + * and redundant enum constructor modifier . <nl> * <nl> * @ author lkuehne <nl> + * @ author < a href = " mailto : piotr . listkiewicz @ gmail . com " > liscju < / a > <nl> * / <nl> public class RedundantModifierCheck <nl> extends Check { <nl> @ @ - 56 , 6 + 58 , 7 @ @ public class RedundantModifierCheck <nl> TokenTypes . VARIABLE _ DEF , <nl> TokenTypes . ANNOTATION _ FIELD _ DEF , <nl> TokenTypes . INTERFACE _ DEF , <nl> + TokenTypes . CTOR _ DEF , <nl> } ; <nl> } <nl> <nl> @ @ - 71 , 23 + 74 , 18 @ @ public class RedundantModifierCheck <nl> TokenTypes . VARIABLE _ DEF , <nl> TokenTypes . ANNOTATION _ FIELD _ DEF , <nl> TokenTypes . INTERFACE _ DEF , <nl> + TokenTypes . CTOR _ DEF , <nl> } ; <nl> } <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> if ( TokenTypes . INTERFACE _ DEF = = ast . getType ( ) ) { <nl> - final DetailAST modifiers = <nl> - ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - <nl> - for ( final int tokenType : TOKENS _ FOR _ INTERFACE _ MODIFIERS ) { <nl> - final DetailAST modifier = <nl> - modifiers . findFirstToken ( tokenType ) ; <nl> - if ( modifier ! = null ) { <nl> - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , <nl> - MSG _ KEY , modifier . getText ( ) ) ; <nl> - } <nl> - } <nl> + checkInterfaceModifiers ( ast ) ; <nl> + } <nl> + else if ( TokenTypes . CTOR _ DEF = = ast . getType ( ) <nl> + & & isEnumMember ( ast ) ) { <nl> + checkEnumConstructorModifiers ( ast ) ; <nl> } <nl> else if ( isInterfaceOrAnnotationMember ( ast ) ) { <nl> processInterfaceOrAnnotation ( ast ) ; <nl> @ @ - 98 , 6 + 96 , 37 @ @ public class RedundantModifierCheck <nl> } <nl> <nl> / * * <nl> + * Checks if interface has proper modifiers <nl> + * @ param ast interface to check <nl> + * / <nl> + private void checkInterfaceModifiers ( DetailAST ast ) { <nl> + final DetailAST modifiers = <nl> + ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + <nl> + for ( final int tokenType : TOKENS _ FOR _ INTERFACE _ MODIFIERS ) { <nl> + final DetailAST modifier = <nl> + modifiers . findFirstToken ( tokenType ) ; <nl> + if ( modifier ! = null ) { <nl> + log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , <nl> + MSG _ KEY , modifier . getText ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Check if enum constructor has proper modifiers <nl> + * @ param ast constructor of enum <nl> + * / <nl> + private void checkEnumConstructorModifiers ( DetailAST ast ) { <nl> + final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + final DetailAST modifier = modifiers . getFirstChild ( ) ; <nl> + if ( modifier ! = null ) { <nl> + log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , <nl> + MSG _ KEY , modifier . getText ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * do validation of interface of annotation <nl> * @ param ast token AST <nl> * / <nl> @ @ - 162 , 6 + 191 , 16 @ @ public class RedundantModifierCheck <nl> } <nl> <nl> / * * <nl> + * Checks if current AST node is member of Enum <nl> + * @ param ast AST node <nl> + * @ return true if it is an enum member <nl> + * / <nl> + private boolean isEnumMember ( DetailAST ast ) { <nl> + final DetailAST parentTypeDef = ast . getParent ( ) . getParent ( ) ; <nl> + return parentTypeDef . getType ( ) = = TokenTypes . ENUM _ DEF ; <nl> + } <nl> + <nl> + / * * <nl> * Checks if current AST node is member of Interface or Annotation , not of their subnodes . <nl> * @ param ast AST node <nl> * @ return true or false <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java <nl> index ad69ed8 . . e34c01d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java <nl> @ @ - 83 , 6 + 83 , 16 @ @ public class RedundantModifierTest <nl> } <nl> <nl> @ Test <nl> + public void testEnumConstructorIsImplicitlyPrivate ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( RedundantModifierCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " private " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputRedundantConstructorModifier . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testGetAcceptableTokens ( ) { <nl> RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck ( ) ; <nl> int [ ] actual = redundantModifierCheckObj . getAcceptableTokens ( ) ; <nl> @ @ - 91 , 6 + 101 , 7 @ @ public class RedundantModifierTest <nl> TokenTypes . VARIABLE _ DEF , <nl> TokenTypes . ANNOTATION _ FIELD _ DEF , <nl> TokenTypes . INTERFACE _ DEF , <nl> + TokenTypes . CTOR _ DEF , <nl> } ; <nl> Assert . assertNotNull ( actual ) ; <nl> Assert . assertArrayEquals ( expected , actual ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java <nl> new file mode 100644 <nl> index 0000000 . . 29b16d3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + public enum InputRedundantConstructorModifier { <nl> + VAL1 , VAL2 ; <nl> + <nl> + private InputRedundantConstructorModifier ( ) { } <nl> + <nl> + InputRedundantConstructorModifier ( int i ) { } <nl> + <nl> + InputRedundantConstructorModifier ( char c ) { } <nl> + } <nl> + <nl> + class ProperPrivateConstructor { <nl> + private ProperPrivateConstructor ( ) { } <nl> + }

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 index 732bbf5 . . 604a8e2 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 @ @ - 21 , 7 + 21 , 6 @ @ package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ ALONE ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ BREAK _ BEFORE ; 
 - import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ NEW ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ SAME ; 
 
 import org . junit . Test ; 
 @ @ - 83 , 10 + 82 , 11 @ @ public class RightCurlyTest extends AbstractModuleTestSupport { 
 public void testRightCurlyAloneOther ( ) throws Exception { 
 final String [ ] expected = { 
 " 97 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 - " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , 
 " 108 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 - " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 - " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , 
 + " 122 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , 
 } ; 
 
 final Configuration checkConfig = getModuleConfig ( " RightCurly " , " RightCurlyAlone " ) ; 
 diff - - git a / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionRightCurlyTest . java b / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionRightCurlyTest . java 
 index afc4fff . . 73d4bf1 100644 
 - - - a / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionRightCurlyTest . java 
 + + + b / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionRightCurlyTest . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport { 
 
 final String [ ] expectedViolation = { 
 " 9 : 15 : " + getCheckMessage ( RightCurlyCheck . class , 
 - RightCurlyCheck . MSG _ KEY _ LINE _ NEW , " } " , 15 ) , 
 + RightCurlyCheck . MSG _ KEY _ LINE _ ALONE , " } " , 15 ) , 
 } ; 
 
 final List < String > expectedXpathQueries = Collections . singletonList ( 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 index e0ceb89 . . 5cd0540 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 @ @ - 24 , 11 + 24 , 9 @ @ import java . util . Locale ; 
 import com . puppycrawl . tools . checkstyle . StatelessCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . Scope ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 - import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; 
 
 / * * 
 * < p > 
 @ @ - 53 , 10 + 51 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; 
 * { @ link TokenTypes # INSTANCE _ INIT INSTANCE _ INIT } . 
 * < / p > 
 * < p > 
 - * < b > shouldStartLine < / b > - does the check need to check 
 - * if right curly starts line . Default value is < b > true < / b > 
 - * < / p > 
 - * < p > 
 * An example of how to configure the check is : 
 * < / p > 
 * < pre > 
 @ @ - 96 , 15 + 90 , 6 @ @ public class RightCurlyCheck extends AbstractCheck { 
 * / 
 public static final String MSG _ KEY _ LINE _ SAME = " line . same " ; 
 
 - / * * 
 - * A key is pointing to the warning message text in " messages . properties " 
 - * file . 
 - * / 
 - public static final String MSG _ KEY _ LINE _ NEW = " line . new " ; 
 - 
 - / * * Do we need to check if right curly starts line . * / 
 - private boolean shouldStartLine = true ; 
 - 
 / * * The policy to enforce . * / 
 private RightCurlyOption option = RightCurlyOption . SAME ; 
 
 @ @ - 117 , 14 + 102 , 6 @ @ public class RightCurlyCheck extends AbstractCheck { 
 option = RightCurlyOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 } 
 
 - / * * 
 - * Does the check need to check if right curly starts line . 
 - * @ param flag new value of this property . 
 - * / 
 - public void setShouldStartLine ( boolean flag ) { 
 - shouldStartLine = flag ; 
 - } 
 - 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return new int [ ] { 
 @ @ - 187 , 15 + 164 , 9 @ @ public class RightCurlyCheck extends AbstractCheck { 
 else if ( shouldBeOnSameLine ( option , details ) ) { 
 violation = MSG _ KEY _ LINE _ SAME ; 
 } 
 - else if ( shouldBeAloneOnLine ( option , details ) ) { 
 + else if ( shouldBeAloneOnLine ( option , details , getLine ( details . rcurly . getLineNo ( ) - 1 ) ) ) { 
 violation = MSG _ KEY _ LINE _ ALONE ; 
 } 
 - else if ( shouldStartLine ) { 
 - final String targetSourceLine = getLines ( ) [ details . rcurly . getLineNo ( ) - 1 ] ; 
 - if ( ! isOnStartOfLine ( details , targetSourceLine ) ) { 
 - violation = MSG _ KEY _ LINE _ NEW ; 
 - } 
 - } 
 return violation ; 
 } 
 
 @ @ - 228 , 13 + 199 , 16 @ @ public class RightCurlyCheck extends AbstractCheck { 
 * Checks that a right curly should be alone on a line . 
 * @ param bracePolicy option for placing the right curly brace 
 * @ param details Details for validation 
 + * @ param targetSrcLine A string with contents of rcurly ' s line 
 * @ return true if a right curly should be alone on a line . 
 * / 
 - private static boolean shouldBeAloneOnLine ( RightCurlyOption bracePolicy , Details details ) { 
 + private static boolean shouldBeAloneOnLine ( RightCurlyOption bracePolicy , 
 + Details details , 
 + String targetSrcLine ) { 
 return bracePolicy = = RightCurlyOption . ALONE 
 - & & shouldBeAloneOnLineWithAloneOption ( details ) 
 + & & shouldBeAloneOnLineWithAloneOption ( details , targetSrcLine ) 
 | | bracePolicy = = RightCurlyOption . ALONE _ OR _ SINGLELINE 
 - & & shouldBeAloneOnLineWithAloneOrSinglelineOption ( details ) 
 + & & shouldBeAloneOnLineWithAloneOrSinglelineOption ( details , targetSrcLine ) 
 | | details . shouldCheckLastRcurly 
 & & details . rcurly . getLineNo ( ) = = details . nextToken . getLineNo ( ) ; 
 } 
 @ @ - 242 , 48 + 216 , 68 @ @ public class RightCurlyCheck extends AbstractCheck { 
 / * * 
 * Whether right curly should be alone on line when ALONE option is used . 
 * @ param details details for validation . 
 + * @ param targetSrcLine A string with contents of rcurly ' s line 
 * @ return true , if right curly should be alone on line when ALONE option is used . 
 * / 
 - private static boolean shouldBeAloneOnLineWithAloneOption ( Details details ) { 
 - return ! isAloneOnLine ( details ) 
 + private static boolean shouldBeAloneOnLineWithAloneOption ( Details details , 
 + String targetSrcLine ) { 
 + return ! isAloneOnLine ( details , targetSrcLine ) 
 & & ! isEmptyBody ( details . lcurly ) ; 
 } 
 
 / * * 
 * Whether right curly should be alone on line when ALONE _ OR _ SINGLELINE option is used . 
 * @ param details details for validation . 
 + * @ param targetSrcLine A string with contents of rcurly ' s line 
 * @ return true , if right curly should be alone on line 
 * when ALONE _ OR _ SINGLELINE option is used . 
 * / 
 - private static boolean shouldBeAloneOnLineWithAloneOrSinglelineOption ( Details details ) { 
 - return ! isAloneOnLine ( details ) 
 + private static boolean shouldBeAloneOnLineWithAloneOrSinglelineOption ( Details details , 
 + String targetSrcLine ) { 
 + return ! isAloneOnLine ( details , targetSrcLine ) 
 & & ! isSingleLineBlock ( details ) 
 - & & ! isAnonInnerClassInit ( details . lcurly ) 
 & & ! isEmptyBody ( details . lcurly ) ; 
 } 
 
 / * * 
 - * Whether right curly brace starts target source line . 
 - * @ param details Details of right curly brace for validation 
 - * @ param targetSourceLine source line to check 
 - * @ return true if right curly brace starts target source line . 
 - * / 
 - private static boolean isOnStartOfLine ( Details details , String targetSourceLine ) { 
 - return CommonUtil . hasWhitespaceBefore ( details . rcurly . getColumnNo ( ) , targetSourceLine ) 
 - | | details . lcurly . getLineNo ( ) = = details . rcurly . getLineNo ( ) ; 
 - } 
 - 
 - / * * 
 * Checks whether right curly is alone on a line . 
 * @ param details for validation . 
 + * @ param targetSrcLine A string with contents of rcurly ' s line 
 * @ return true if right curly is alone on a line . 
 * / 
 - private static boolean isAloneOnLine ( Details details ) { 
 + private static boolean isAloneOnLine ( Details details , String targetSrcLine ) { 
 final DetailAST rcurly = details . rcurly ; 
 - final DetailAST lcurly = details . lcurly ; 
 final DetailAST nextToken = details . nextToken ; 
 - return rcurly . getLineNo ( ) ! = lcurly . getLineNo ( ) 
 - & & rcurly . getLineNo ( ) ! = nextToken . getLineNo ( ) ; 
 + return ( rcurly . getLineNo ( ) ! = nextToken . getLineNo ( ) | | skipDoubleBraceInstInit ( details ) ) 
 + & & CommonUtil . hasWhitespaceBefore ( details . rcurly . getColumnNo ( ) , targetSrcLine ) ; 
 + } 
 + 
 + / * * 
 + * This method determines if the double brace initialization should be skipped over by the 
 + * check . Double brace initializations are treated differently . The corresponding inner 
 + * rcurly is treated as if it was alone on line even when it may be followed by another 
 + * rcurly and a semi , raising no violations . 
 + * < i > Please do note though that the line should not contain anything other than the following 
 + * right curly and the semi following it or else violations will be raised . < / i > 
 + * Only the kind of double brace initializations shown in the following example code will be 
 + * skipped over : < br > 
 + * < pre > 
 + * { @ code Map < String , String > map = new LinkedHashMap < > ( ) { { 
 + * put ( " alpha " , " man " ) ; 
 + * } } ; / / no violation } 
 + * < / pre > 
 + * 
 + * @ param details { @ link Details } object containing the details relevant to the rcurly 
 + * @ return if the double brace initialization rcurly should be skipped over by the check 
 + * / 
 + private static boolean skipDoubleBraceInstInit ( Details details ) { 
 + final DetailAST rcurly = details . rcurly ; 
 + final DetailAST tokenAfterNextToken = Details . getNextToken ( details . nextToken ) ; 
 + return rcurly . getParent ( ) . getParent ( ) . getType ( ) = = TokenTypes . INSTANCE _ INIT 
 + & & details . nextToken . getType ( ) = = TokenTypes . RCURLY 
 + & & tokenAfterNextToken . getType ( ) = = TokenTypes . SEMI 
 + & & rcurly . getLineNo ( ) ! = Details . getNextToken ( tokenAfterNextToken ) . getLineNo ( ) ; 
 + 
 } 
 
 / * * 
 @ @ - 294 , 19 + 288 , 16 @ @ public class RightCurlyCheck extends AbstractCheck { 
 private static boolean isSingleLineBlock ( Details details ) { 
 final DetailAST rcurly = details . rcurly ; 
 final DetailAST lcurly = details . lcurly ; 
 - final DetailAST nextToken = details . nextToken ; 
 + DetailAST nextToken = details . nextToken ; 
 + while ( nextToken . getType ( ) = = TokenTypes . LITERAL _ ELSE ) { 
 + nextToken = Details . getNextToken ( nextToken ) ; 
 + } 
 + if ( nextToken . getType ( ) = = TokenTypes . DO _ WHILE ) { 
 + final DetailAST doWhileSemi = nextToken . getParent ( ) . getLastChild ( ) ; 
 + nextToken = Details . getNextToken ( doWhileSemi ) ; 
 + } 
 return rcurly . getLineNo ( ) = = lcurly . getLineNo ( ) 
 - & & rcurly . getLineNo ( ) ! = nextToken . getLineNo ( ) ; 
 - } 
 - 
 - / * * 
 - * Checks whether lcurly is in anonymous inner class initialization . 
 - * @ param lcurly left curly token . 
 - * @ return true if lcurly begins anonymous inner class initialization . 
 - * / 
 - private static boolean isAnonInnerClassInit ( DetailAST lcurly ) { 
 - final Scope surroundingScope = ScopeUtil . getSurroundingScope ( lcurly ) ; 
 - return surroundingScope . ordinal ( ) = = Scope . ANONINNER . ordinal ( ) ; 
 + & & rcurly . getLineNo ( ) ! = nextToken . getLineNo ( ) ; 
 } 
 
 / * * 
 @ @ - 482 , 13 + 473 , 11 @ @ public class RightCurlyCheck extends AbstractCheck { 
 private static Details getDetailsForOthers ( DetailAST ast ) { 
 DetailAST rcurly = null ; 
 final DetailAST lcurly ; 
 - final DetailAST nextToken ; 
 final int tokenType = ast . getType ( ) ; 
 if ( tokenType = = TokenTypes . CLASS _ DEF ) { 
 final DetailAST child = ast . getLastChild ( ) ; 
 lcurly = child . getFirstChild ( ) ; 
 rcurly = child . getLastChild ( ) ; 
 - nextToken = ast ; 
 } 
 else { 
 lcurly = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 @ @ - 496 , 9 + 485 , 8 @ @ public class RightCurlyCheck extends AbstractCheck { 
 / / SLIST could be absent if method is abstract 
 rcurly = lcurly . getLastChild ( ) ; 
 } 
 - nextToken = getNextToken ( ast ) ; 
 } 
 - return new Details ( lcurly , rcurly , nextToken , false ) ; 
 + return new Details ( lcurly , rcurly , getNextToken ( ast ) , false ) ; 
 } 
 
 / * * 
 @ @ - 537 , 11 + 525 , 19 @ @ public class RightCurlyCheck extends AbstractCheck { 
 private static DetailAST getNextToken ( DetailAST ast ) { 
 DetailAST next = null ; 
 DetailAST parent = ast ; 
 - while ( next = = null ) { 
 + while ( next = = null & & parent ! = null ) { 
 next = parent . getNextSibling ( ) ; 
 parent = parent . getParent ( ) ; 
 } 
 - return CheckUtil . getFirstNode ( next ) ; 
 + if ( next = = null ) { 
 + / / a DetailAST object with DetailAST # NOT _ INITIALIZED for line and column numbers 
 + / / that no ' actual ' DetailAST objects can have . 
 + next = new DetailAST ( ) ; 
 + } 
 + else { 
 + next = CheckUtil . getFirstNode ( next ) ; 
 + } 
 + return next ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 index c77fd51 . . eea5b2b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ ALONE ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ BREAK _ BEFORE ; 
 - import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ NEW ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ SAME ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 @ @ - 102 , 13 + 101 , 13 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 final DefaultConfiguration checkConfig = createModuleConfig ( RightCurlyCheck . class ) ; 
 checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; 
 checkConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF " ) ; 
 - checkConfig . addAttribute ( " shouldStartLine " , " true " ) ; 
 final String [ ] expected = { 
 " 111 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 - " 111 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + " 111 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , 
 " 122 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 - " 122 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 - " 136 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + " 122 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , 
 + " 136 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + " 136 : 6 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 6 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputRightCurlyLeft . java " ) , expected ) ; 
 } 
 @ @ - 117 , 7 + 116 , 6 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 public void testShouldStartLine ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( RightCurlyCheck . class ) ; 
 checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; 
 - checkConfig . addAttribute ( " shouldStartLine " , " false " ) ; 
 final String [ ] expected = { 
 " 93 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , 
 " 97 : 72 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 72 ) , 
 @ @ - 141 , 7 + 139 , 6 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 public void testMethodCtorNamedClassClosingBrace ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( RightCurlyCheck . class ) ; 
 checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; 
 - checkConfig . addAttribute ( " shouldStartLine " , " false " ) ; 
 final String [ ] expected = { 
 " 93 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , 
 " 97 : 72 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 72 ) , 
 @ @ - 211 , 7 + 208 , 7 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 " 107 : 29 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 29 ) , 
 " 111 : 88 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 88 ) , 
 " 111 : 40 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 40 ) , 
 - " 114 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 18 ) , 
 + " 114 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 18 ) , 
 " 118 : 23 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 23 ) , 
 " 121 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , 
 " 123 : 30 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 30 ) , 
 @ @ - 219 , 25 + 216 , 24 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 " 136 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 " 138 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 " 138 : 33 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 33 ) , 
 - " 148 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 " 150 : 75 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 75 ) , 
 " 151 : 58 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 58 ) , 
 " 151 : 74 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 74 ) , 
 " 152 : 58 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 58 ) , 
 " 153 : 58 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 58 ) , 
 " 153 : 74 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 74 ) , 
 - " 159 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 37 ) , 
 + " 159 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , 
 " 166 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , 
 " 181 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 " 188 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 - " 188 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 13 ) , 
 + " 188 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 13 ) , 
 " 197 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 - " 197 : 10 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 10 ) , 
 + " 197 : 10 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 10 ) , 
 " 201 : 54 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 54 ) , 
 - " 201 : 55 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 55 ) , 
 + " 201 : 55 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 55 ) , 
 " 204 : 75 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 75 ) , 
 " 204 : 76 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 76 ) , 
 - " 204 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 77 ) , 
 + " 204 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 77 ) , 
 " 208 : 76 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 76 ) , 
 " 216 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , 
 } ; 
 @ @ - 253 , 26 + 249 , 35 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 + " LITERAL _ WHILE , LITERAL _ DO , STATIC _ INIT , INSTANCE _ INIT " ) ; 
 final String [ ] expected = { 
 " 60 : 26 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 26 ) , 
 - " 69 : 29 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 29 ) , 
 " 74 : 42 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 42 ) , 
 - " 77 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 18 ) , 
 + " 77 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 18 ) , 
 " 85 : 30 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 30 ) , 
 + " 89 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 77 ) , 
 " 97 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 " 99 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 - " 119 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 37 ) , 
 - " 126 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 37 ) , 
 - " 148 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 13 ) , 
 + " 110 : 75 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 75 ) , 
 + " 111 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 77 ) , 
 + " 111 : 93 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 93 ) , 
 + " 112 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 77 ) , 
 + " 113 : 64 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 64 ) , 
 + " 113 : 80 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 80 ) , 
 + " 119 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , 
 + " 126 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , 
 + " 141 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 + " 148 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 + " 148 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 13 ) , 
 " 157 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 - " 157 : 10 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 10 ) , 
 + " 157 : 10 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 10 ) , 
 " 161 : 54 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 54 ) , 
 - " 161 : 55 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 55 ) , 
 + " 161 : 55 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 55 ) , 
 " 164 : 75 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 75 ) , 
 " 164 : 76 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 76 ) , 
 - " 164 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 77 ) , 
 + " 168 : 80 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 80 ) , 
 + " 164 : 77 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 77 ) , 
 " 176 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , 
 - " 182 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 24 ) , 
 - " 185 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 24 ) , 
 - " 188 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 24 ) , 
 + " 182 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 24 ) , 
 + " 185 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 24 ) , 
 + " 188 : 24 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 24 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputRightCurlyAloneOrSingleline . java " ) , expected ) ; 
 } 
 @ @ - 353 , 7 + 358 , 7 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 " 25 : 35 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 35 ) , 
 " 27 : 92 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 92 ) , 
 " 33 : 67 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 67 ) , 
 - " 35 : 15 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 15 ) , 
 + " 35 : 15 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 15 ) , 
 " 37 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 13 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputRightCurlyTryResource . java " ) , expected ) ; 
 @ @ - 365 , 7 + 370 , 7 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE _ OR _ SINGLELINE . toString ( ) ) ; 
 final String [ ] expected = { 
 " 19 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 - " 35 : 15 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " } " , 15 ) , 
 + " 35 : 15 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 15 ) , 
 " 37 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 13 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputRightCurlyTryResource . java " ) , expected ) ; 
 @ @ - 410 , 4 + 415 , 50 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 getPath ( " InputRightCurlySameLambda . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testOptionAlone ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( RightCurlyCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; 
 + checkConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , LITERAL _ IF , LITERAL _ ELSE , " 
 + + " LITERAL _ DO , LITERAL _ WHILE , LITERAL _ FOR , STATIC _ INIT , INSTANCE _ INIT " ) ; 
 + final String [ ] expected = { 
 + " 7 : 15 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 15 ) , 
 + " 8 : 21 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 21 ) , 
 + " 12 : 26 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 26 ) , 
 + " 21 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , 
 + " 38 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 + " 42 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , 
 + " 45 : 30 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 30 ) , 
 + " 47 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , 
 + " 49 : 17 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 17 ) , 
 + " 51 : 53 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 53 ) , 
 + " 53 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 27 ) , 
 + " 53 : 52 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 52 ) , 
 + " 61 : 42 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 42 ) , 
 + " 63 : 43 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 43 ) , 
 + " 67 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputRightCurlyAlone . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testOptionAloneOrSingleLine ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( RightCurlyCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE _ OR _ SINGLELINE . toString ( ) ) ; 
 + checkConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , LITERAL _ IF , LITERAL _ ELSE , " 
 + + " LITERAL _ DO , LITERAL _ WHILE , LITERAL _ FOR , STATIC _ INIT , INSTANCE _ INIT " ) ; 
 + final String [ ] expected = { 
 + " 12 : 26 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 26 ) , 
 + " 21 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , 
 + " 29 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 + " 38 : 9 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 9 ) , 
 + " 42 : 37 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 37 ) , 
 + " 63 : 43 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 43 ) , 
 + " 67 : 5 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + } ; 
 + verify ( checkConfig , getPath ( 
 + " InputRightCurlyAloneOrSingleLine2 . java " ) , expected ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAlone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAlone . java 
 new file mode 100644 
 index 0000000 . . d3a3296 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAlone . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . rightcurly ; 
 + 
 + public class InputRightCurlyAlone { 
 + 
 + private int a ; 
 + private static int b ; 
 + { a = 2 ; } / / violation 
 + static { b = 3 ; } / / violation 
 + 
 + void method1 ( ) { 
 + Thread t = new Thread ( ) { @ Override public void run ( ) { 
 + int a ; int b ; } / / violation 
 + } ; 
 + } 
 + 
 + void method2 ( java . util . HashSet < String > set ) { 
 + java . util . Map < String , String > map1 = new java . util . LinkedHashMap < String , String > ( ) { { 
 + put ( " Hello " , " World " ) ; 
 + put ( " first " , " second " ) ; 
 + put ( " polygene " , " lubricants " ) ; 
 + put ( " alpha " , " betical " ) ; } / / violation 
 + } ; 
 + 
 + java . util . Map < String , String > map2 = new java . util . LinkedHashMap < String , String > ( ) { { 
 + put ( " Hello " , " World " ) ; 
 + put ( " first " , " second " ) ; 
 + put ( " polygene " , " lubricants " ) ; 
 + put ( " alpha " , " betical " ) ; 
 + } } ; / / NO violation 
 + } 
 + 
 + void method3 ( ) { 
 + method2 ( new java . util . HashSet < String > ( ) { { 
 + add ( " XZ13s " ) ; 
 + add ( " AB21 / X " ) ; 
 + add ( " YYLEX " ) ; 
 + add ( " AR5E " ) ; 
 + } } ) ; / / violation 
 + } 
 + 
 + int method4 ( int a ) { 
 + if ( a > 2 ) a * = 10 ; return + + a ; } / / violation 
 + 
 + void method5 ( int a ) { 
 + while ( a > 5 ) { a - - ; } / / violation 
 + 
 + if ( a > 4 ) { a + + ; } / / violation 
 + 
 + do { a - - ; } while ( a > 3 ) ; / / violation 
 + 
 + for ( int i = 1 ; i < 10 ; i + + ) { byte b = 10 ; } / / violation 
 + 
 + if ( a < 2 ) { - - a ; } else if ( a > 3 ) { a + + ; } / / 2 violations 
 + 
 + java . util . List < String > list = new java . util . ArrayList < > ( ) ; 
 + list . stream ( ) 
 + . filter ( e - > { return ! e . isEmpty ( ) & & ! " null " . equals ( e ) ; } ) 
 + . collect ( java . util . stream . Collectors . toList ( ) ) ; 
 + } 
 + 
 + class TestClass { private int field ; } / / violation 
 + 
 + class TestClass2 { private int field ; } ; / / violation 
 + 
 + class TestClass3 { 
 + private int field ; 
 + } ; / / violation 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleLine2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleLine2 . java 
 new file mode 100644 
 index 0000000 . . 79f1d96 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleLine2 . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . rightcurly ; 
 + 
 + public class InputRightCurlyAloneOrSingleLine2 { 
 + 
 + private int a ; 
 + private static int b ; 
 + { a = 2 ; } 
 + static { b = 3 ; } 
 + 
 + void method1 ( ) { 
 + Thread t = new Thread ( ) { @ Override public void run ( ) { 
 + int a ; int b ; } / / violation 
 + } ; 
 + } 
 + 
 + void method2 ( java . util . HashSet < String > set ) { 
 + java . util . Map < String , String > map1 = new java . util . LinkedHashMap < String , String > ( ) { { 
 + put ( " Hello " , " World " ) ; 
 + put ( " first " , " second " ) ; 
 + put ( " polygene " , " lubricants " ) ; 
 + put ( " alpha " , " betical " ) ; } / / violation 
 + } ; 
 + 
 + java . util . Map < String , String > map2 = new java . util . LinkedHashMap < String , String > ( ) { { 
 + put ( " Hello " , " World " ) ; 
 + put ( " first " , " second " ) ; 
 + put ( " polygene " , " lubricants " ) ; 
 + put ( " alpha " , " betical " ) ; 
 + } } ; ; / / violation 
 + } 
 + 
 + void method3 ( ) { 
 + method2 ( new java . util . HashSet < String > ( ) { { 
 + add ( " XZ13s " ) ; 
 + add ( " AB21 / X " ) ; 
 + add ( " YYLEX " ) ; 
 + add ( " AR5E " ) ; 
 + } } ) ; / / violation 
 + } 
 + 
 + int method4 ( int a ) { 
 + if ( a > 2 ) a * = 10 ; return + + a ; } / / violation 
 + 
 + void method5 ( int a ) { 
 + while ( a > 5 ) { a - - ; } 
 + 
 + if ( a > 4 ) { a + + ; } 
 + 
 + do { a - - ; } while ( a > 3 ) ; / / NO violation 
 + 
 + for ( int i = 1 ; i < 10 ; i + + ) { byte b = 10 ; } 
 + 
 + if ( a < 2 ) { - - a ; } else if ( a > 3 ) { a + + ; } 
 + 
 + java . util . List < String > list = new java . util . ArrayList < > ( ) ; 
 + list . stream ( ) 
 + . filter ( e - > { return ! e . isEmpty ( ) & & ! " null " . equals ( e ) ; } ) 
 + . collect ( java . util . stream . Collectors . toList ( ) ) ; 
 + } 
 + 
 + class TestClass { private int field ; } 
 + 
 + class TestClass2 { private int field ; } ; / / violation 
 + 
 + class TestClass3 { 
 + private int field ; 
 + } ; / / violation 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleline . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleline . java 
 index 60857f1 . . c634c19 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleline . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAloneOrSingleline . java 
 @ @ - 105 , 7 + 105 , 7 @ @ public class InputRightCurlyAloneOrSingleline { 
 put ( " first " , " second " ) ; 
 put ( " polygene " , " lubricants " ) ; 
 put ( " alpha " , " betical " ) ; 
 - } } ; / / it ' s ok 
 + } } ; / / NO violation 
 
 Thread t = new Thread ( ) { @ Override public void run ( ) { super . run ( ) ; } } ; 
 new Object ( ) { @ Override protected void finalize ( ) { " " . toString ( ) ; } { int a = 5 ; } } ; 
 @ @ - 138 , 14 + 138 , 14 @ @ public class InputRightCurlyAloneOrSingleline { 
 add ( " AB21 / X " ) ; 
 add ( " YYLEX " ) ; 
 add ( " AR5E " ) ; 
 - } } ) ; / / it ' s ok , can ' t be formatted better 
 + } } ) ; / / violation 
 
 foo23 ( new java . util . HashSet < String > ( ) { { 
 add ( " XZ13s " ) ; 
 add ( " AB21 / X " ) ; 
 add ( " YYLEX " ) ; 
 add ( " AR5E " ) ; 
 - } } ) ; } / / violation 
 + } } ) ; } / / 2 violations 
 
 
 void foo23 ( java . util . HashSet < String > set ) { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAnnotations . java 
 index 270bbfd . . 5b66397 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAnnotations . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlyAnnotations . java 
 @ @ - 145 , 7 + 145 , 7 @ @ class InputRightCurlyAnnotations 
 put ( " first " , " second " ) ; 
 put ( " polygene " , " lubricants " ) ; 
 put ( " alpha " , " betical " ) ; 
 - } } ; / / violation 
 + } } ; / / NO violation 
 
 Thread t = new Thread ( ) { @ Override public void run ( ) { super . run ( ) ; } } ; / / violation 
 new Object ( ) { public int hashCode ( ) { return 1 ; } { int a = 5 ; } } ; / / violation 
 diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml 
 index 641ebe7 . . d9a536c 100644 
 - - - a / src / xdocs / config _ blocks . xml 
 + + + b / src / xdocs / config _ blocks . xml 
 @ @ - 897 , 14 + 897 , 6 @ @ for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK 
 < td > 3 . 0 < / td > 
 < / tr > 
 < tr > 
 - < td > shouldStartLine < / td > 
 - < td > should we check if < code > ' } ' < / code > 
 - starts line . < / td > 
 - < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 - < td > < code > true < / code > < / td > 
 - < td > 4 . 2 < / td > 
 - < / tr > 
 - < tr > 
 < td > tokens < / td > 
 < td > tokens to check < / td > 
 
 @ @ - 1016 , 10 + 1008 , 6 @ @ for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK 
 line . break . before < / a > 
 < / li > 
 < li > 
 - < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources % 2Fcom % 2Fpuppycrawl % 2Ftools % 2Fcheckstyle % 2Fchecks % 2Fblocks + filename % 3Amessages * . properties + repo % 3Acheckstyle % 2Fcheckstyle + % 22line . new % 22 " > 
 - line . new < / a > 
 - < / li > 
 - < li > 
 < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources % 2Fcom % 2Fpuppycrawl % 2Ftools % 2Fcheckstyle % 2Fchecks % 2Fblocks + filename % 3Amessages * . properties + repo % 3Acheckstyle % 2Fcheckstyle + % 22line . same % 22 " > 
 line . same < / a > 
 < / li >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTagInfo . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTagInfo . java 
 index f19c1ef . . 249d9ff 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTagInfo . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTagInfo . java 
 @ @ - 432 , 7 + 432 , 7 @ @ public enum JavadocTagInfo { 
 * @ param name the tag name 
 * @ param type the type of tag 
 * / 
 - private JavadocTagInfo ( final String text , final String name , 
 + JavadocTagInfo ( final String text , final String name , 
 final Type type ) { 
 this . text = text ; 
 this . name = name ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / LineSeparatorOption . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / LineSeparatorOption . java 
 index f6629e1 . . 4dd5423 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / LineSeparatorOption . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / LineSeparatorOption . java 
 @ @ - 51 , 7 + 51 , 7 @ @ public enum LineSeparatorOption { 
 * Creates a new < code > LineSeparatorOption < / code > instance . 
 * @ param sep the line separator , e . g . " \ r \ n " 
 * / 
 - private LineSeparatorOption ( String sep ) { 
 + LineSeparatorOption ( String sep ) { 
 lineSeparator = sep . getBytes ( StandardCharsets . US _ ASCII ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 index c13759a . . 0d84a0e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 @ @ - 28 , 9 + 28 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * Checks for redundant modifiers in interface and annotation definitions . 
 - * Also checks for redundant final modifiers on methods of final classes . 
 + * Also checks for redundant final modifiers on methods of final classes 
 + * and redundant enum constructor modifier . 
 * 
 * @ author lkuehne 
 + * @ author < a href = " mailto : piotr . listkiewicz @ gmail . com " > liscju < / a > 
 * / 
 public class RedundantModifierCheck 
 extends Check { 
 @ @ - 56 , 6 + 58 , 7 @ @ public class RedundantModifierCheck 
 TokenTypes . VARIABLE _ DEF , 
 TokenTypes . ANNOTATION _ FIELD _ DEF , 
 TokenTypes . INTERFACE _ DEF , 
 + TokenTypes . CTOR _ DEF , 
 } ; 
 } 
 
 @ @ - 71 , 23 + 74 , 18 @ @ public class RedundantModifierCheck 
 TokenTypes . VARIABLE _ DEF , 
 TokenTypes . ANNOTATION _ FIELD _ DEF , 
 TokenTypes . INTERFACE _ DEF , 
 + TokenTypes . CTOR _ DEF , 
 } ; 
 } 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 if ( TokenTypes . INTERFACE _ DEF = = ast . getType ( ) ) { 
 - final DetailAST modifiers = 
 - ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - 
 - for ( final int tokenType : TOKENS _ FOR _ INTERFACE _ MODIFIERS ) { 
 - final DetailAST modifier = 
 - modifiers . findFirstToken ( tokenType ) ; 
 - if ( modifier ! = null ) { 
 - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , 
 - MSG _ KEY , modifier . getText ( ) ) ; 
 - } 
 - } 
 + checkInterfaceModifiers ( ast ) ; 
 + } 
 + else if ( TokenTypes . CTOR _ DEF = = ast . getType ( ) 
 + & & isEnumMember ( ast ) ) { 
 + checkEnumConstructorModifiers ( ast ) ; 
 } 
 else if ( isInterfaceOrAnnotationMember ( ast ) ) { 
 processInterfaceOrAnnotation ( ast ) ; 
 @ @ - 98 , 6 + 96 , 37 @ @ public class RedundantModifierCheck 
 } 
 
 / * * 
 + * Checks if interface has proper modifiers 
 + * @ param ast interface to check 
 + * / 
 + private void checkInterfaceModifiers ( DetailAST ast ) { 
 + final DetailAST modifiers = 
 + ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + 
 + for ( final int tokenType : TOKENS _ FOR _ INTERFACE _ MODIFIERS ) { 
 + final DetailAST modifier = 
 + modifiers . findFirstToken ( tokenType ) ; 
 + if ( modifier ! = null ) { 
 + log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , 
 + MSG _ KEY , modifier . getText ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Check if enum constructor has proper modifiers 
 + * @ param ast constructor of enum 
 + * / 
 + private void checkEnumConstructorModifiers ( DetailAST ast ) { 
 + final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + final DetailAST modifier = modifiers . getFirstChild ( ) ; 
 + if ( modifier ! = null ) { 
 + log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , 
 + MSG _ KEY , modifier . getText ( ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 * do validation of interface of annotation 
 * @ param ast token AST 
 * / 
 @ @ - 162 , 6 + 191 , 16 @ @ public class RedundantModifierCheck 
 } 
 
 / * * 
 + * Checks if current AST node is member of Enum 
 + * @ param ast AST node 
 + * @ return true if it is an enum member 
 + * / 
 + private boolean isEnumMember ( DetailAST ast ) { 
 + final DetailAST parentTypeDef = ast . getParent ( ) . getParent ( ) ; 
 + return parentTypeDef . getType ( ) = = TokenTypes . ENUM _ DEF ; 
 + } 
 + 
 + / * * 
 * Checks if current AST node is member of Interface or Annotation , not of their subnodes . 
 * @ param ast AST node 
 * @ return true or false 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java 
 index ad69ed8 . . e34c01d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java 
 @ @ - 83 , 6 + 83 , 16 @ @ public class RedundantModifierTest 
 } 
 
 @ Test 
 + public void testEnumConstructorIsImplicitlyPrivate ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( RedundantModifierCheck . class ) ; 
 + final String [ ] expected = { 
 + " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " private " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputRedundantConstructorModifier . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testGetAcceptableTokens ( ) { 
 RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck ( ) ; 
 int [ ] actual = redundantModifierCheckObj . getAcceptableTokens ( ) ; 
 @ @ - 91 , 6 + 101 , 7 @ @ public class RedundantModifierTest 
 TokenTypes . VARIABLE _ DEF , 
 TokenTypes . ANNOTATION _ FIELD _ DEF , 
 TokenTypes . INTERFACE _ DEF , 
 + TokenTypes . CTOR _ DEF , 
 } ; 
 Assert . assertNotNull ( actual ) ; 
 Assert . assertArrayEquals ( expected , actual ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java 
 new file mode 100644 
 index 0000000 . . 29b16d3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + public enum InputRedundantConstructorModifier { 
 + VAL1 , VAL2 ; 
 + 
 + private InputRedundantConstructorModifier ( ) { } 
 + 
 + InputRedundantConstructorModifier ( int i ) { } 
 + 
 + InputRedundantConstructorModifier ( char c ) { } 
 + } 
 + 
 + class ProperPrivateConstructor { 
 + private ProperPrivateConstructor ( ) { } 
 + }
