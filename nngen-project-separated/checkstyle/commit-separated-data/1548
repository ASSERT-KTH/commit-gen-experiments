BLEU SCORE: 0.03164386910308281

TEST MSG: Issue # 2161 : unify test input locations
GENERATED MSG: OneTopLevelClass check example is broken and documentation missing , for ' tokens ' property . Issue # 1017

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> index 08ab608 . . 796e80c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 36 , 6 + 37 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class ThrowsCountCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " design " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDefault ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( ThrowsCountCheck . class ) ; <nl> @ @ - 47 , 7 + 54 , 7 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { <nl> " 55 : 43 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputThrowsCount . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 66 , 7 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { <nl> " 27 : 20 : " + getCheckMessage ( MSG _ KEY , 6 , 5 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputThrowsCount . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 101 , 6 + 108 , 6 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { <nl> " 35 : 28 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> " 55 : 43 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputThrowsCount . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputThrowsCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputThrowsCount . java <nl> new file mode 100644 <nl> index 0000000 . . 52f10ba <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputThrowsCount . java <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . awt . AWTException ; <nl> + import java . io . EOFException ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . sql . SQLException ; <nl> + <nl> + public class InputThrowsCount { <nl> + void method1 ( ) throws Exception <nl> + { <nl> + } <nl> + <nl> + void methdo2 ( ) throws java . awt . AWTException <nl> + { <nl> + } <nl> + <nl> + void method3 ( ) throws Exception , AWTException , SQLException , <nl> + FileNotFoundException , EOFException <nl> + { <nl> + } <nl> + <nl> + void method4 ( ) throws Exception , java . awt . AWTException , java . sql . SQLException , <nl> + java . io . FileNotFoundException , java . io . EOFException <nl> + { <nl> + } <nl> + <nl> + void method5 ( ) throws Exception , AWTException , Throwable , SQLException , <nl> + FileNotFoundException , EOFException <nl> + { <nl> + } <nl> + <nl> + void method6 ( ) { <nl> + } <nl> + <nl> + private void method7 ( ) throws Exception , AWTException , SQLException , <nl> + FileNotFoundException , EOFException { <nl> + } <nl> + } <nl> + <nl> + class SubClass extends InputThrowsCount { <nl> + @ Override <nl> + void method1 ( ) { <nl> + } <nl> + <nl> + @ Deprecated <nl> + @ Override <nl> + void method4 ( ) throws Exception , java . awt . AWTException { <nl> + } <nl> + <nl> + @ Override <nl> + void method5 ( ) throws Exception , AWTException , Throwable { <nl> + } <nl> + <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + final void method2 ( Object . . . objects ) throws Exception , AWTException , SQLException , <nl> + FileNotFoundException , EOFException { <nl> + } <nl> + <nl> + @ java . lang . Override <nl> + void method3 ( ) throws Exception { <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java <nl> deleted file mode 100644 <nl> index bfbb74a . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java <nl> + + + / dev / null <nl> @ @ - 1 , 62 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - import java . awt . AWTException ; <nl> - import java . io . EOFException ; <nl> - import java . io . FileNotFoundException ; <nl> - import java . sql . SQLException ; <nl> - <nl> - public class InputThrowsCount { <nl> - void method1 ( ) throws Exception <nl> - { <nl> - } <nl> - <nl> - void methdo2 ( ) throws java . awt . AWTException <nl> - { <nl> - } <nl> - <nl> - void method3 ( ) throws Exception , AWTException , SQLException , <nl> - FileNotFoundException , EOFException <nl> - { <nl> - } <nl> - <nl> - void method4 ( ) throws Exception , java . awt . AWTException , java . sql . SQLException , <nl> - java . io . FileNotFoundException , java . io . EOFException <nl> - { <nl> - } <nl> - <nl> - void method5 ( ) throws Exception , AWTException , Throwable , SQLException , <nl> - FileNotFoundException , EOFException <nl> - { <nl> - } <nl> - <nl> - void method6 ( ) { <nl> - } <nl> - <nl> - private void method7 ( ) throws Exception , AWTException , SQLException , <nl> - FileNotFoundException , EOFException { <nl> - } <nl> - } <nl> - <nl> - class SubClass extends InputThrowsCount { <nl> - @ Override <nl> - void method1 ( ) { <nl> - } <nl> - <nl> - @ Deprecated <nl> - @ Override <nl> - void method4 ( ) throws Exception , java . awt . AWTException { <nl> - } <nl> - <nl> - @ Override <nl> - void method5 ( ) throws Exception , AWTException , Throwable { <nl> - } <nl> - <nl> - @ SuppressWarnings ( " deprecation " ) <nl> - final void method2 ( Object . . . objects ) throws Exception , AWTException , SQLException , <nl> - FileNotFoundException , EOFException { <nl> - } <nl> - <nl> - @ java . lang . Override <nl> - void method3 ( ) throws Exception { <nl> - } <nl> - } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 4b15ade . . c2e6e8c 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 73 , 7 + 73 , 9 @ @ <nl> < exclude name = " DataflowAnomalyAnalysis " / > <nl> < ! - - turning local varibles to fields create design problems and extend scope of variable - - > <nl> < exclude name = " AvoidFinalLocalVariable " / > <nl> + < ! - - conflicts with names that does not mean in / out - - > <nl> < exclude name = " AvoidPrefixingMethodParameters " / > <nl> + < ! - - that is not practical , no options to allow some magic numbers , we will use our implementation - - > <nl> < exclude name = " AvoidLiteralsInIfCondition " / > <nl> < ! - - Checkstyle is not thread safe - - > <nl> < exclude name = " UseConcurrentHashMap " / >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 index 08ab608 . . 796e80c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Test ; 
 
 @ @ - 36 , 6 + 37 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class ThrowsCountCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " design " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testDefault ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( ThrowsCountCheck . class ) ; 
 @ @ - 47 , 7 + 54 , 7 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { 
 " 55 : 43 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputThrowsCount . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 7 + 66 , 7 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { 
 " 27 : 20 : " + getCheckMessage ( MSG _ KEY , 6 , 5 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputThrowsCount . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 101 , 6 + 108 , 6 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { 
 " 35 : 28 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 " 55 : 43 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputThrowsCount . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputThrowsCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputThrowsCount . java 
 new file mode 100644 
 index 0000000 . . 52f10ba 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputThrowsCount . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . awt . AWTException ; 
 + import java . io . EOFException ; 
 + import java . io . FileNotFoundException ; 
 + import java . sql . SQLException ; 
 + 
 + public class InputThrowsCount { 
 + void method1 ( ) throws Exception 
 + { 
 + } 
 + 
 + void methdo2 ( ) throws java . awt . AWTException 
 + { 
 + } 
 + 
 + void method3 ( ) throws Exception , AWTException , SQLException , 
 + FileNotFoundException , EOFException 
 + { 
 + } 
 + 
 + void method4 ( ) throws Exception , java . awt . AWTException , java . sql . SQLException , 
 + java . io . FileNotFoundException , java . io . EOFException 
 + { 
 + } 
 + 
 + void method5 ( ) throws Exception , AWTException , Throwable , SQLException , 
 + FileNotFoundException , EOFException 
 + { 
 + } 
 + 
 + void method6 ( ) { 
 + } 
 + 
 + private void method7 ( ) throws Exception , AWTException , SQLException , 
 + FileNotFoundException , EOFException { 
 + } 
 + } 
 + 
 + class SubClass extends InputThrowsCount { 
 + @ Override 
 + void method1 ( ) { 
 + } 
 + 
 + @ Deprecated 
 + @ Override 
 + void method4 ( ) throws Exception , java . awt . AWTException { 
 + } 
 + 
 + @ Override 
 + void method5 ( ) throws Exception , AWTException , Throwable { 
 + } 
 + 
 + @ SuppressWarnings ( " deprecation " ) 
 + final void method2 ( Object . . . objects ) throws Exception , AWTException , SQLException , 
 + FileNotFoundException , EOFException { 
 + } 
 + 
 + @ java . lang . Override 
 + void method3 ( ) throws Exception { 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java 
 deleted file mode 100644 
 index bfbb74a . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java 
 + + + / dev / null 
 @ @ - 1 , 62 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - import java . awt . AWTException ; 
 - import java . io . EOFException ; 
 - import java . io . FileNotFoundException ; 
 - import java . sql . SQLException ; 
 - 
 - public class InputThrowsCount { 
 - void method1 ( ) throws Exception 
 - { 
 - } 
 - 
 - void methdo2 ( ) throws java . awt . AWTException 
 - { 
 - } 
 - 
 - void method3 ( ) throws Exception , AWTException , SQLException , 
 - FileNotFoundException , EOFException 
 - { 
 - } 
 - 
 - void method4 ( ) throws Exception , java . awt . AWTException , java . sql . SQLException , 
 - java . io . FileNotFoundException , java . io . EOFException 
 - { 
 - } 
 - 
 - void method5 ( ) throws Exception , AWTException , Throwable , SQLException , 
 - FileNotFoundException , EOFException 
 - { 
 - } 
 - 
 - void method6 ( ) { 
 - } 
 - 
 - private void method7 ( ) throws Exception , AWTException , SQLException , 
 - FileNotFoundException , EOFException { 
 - } 
 - } 
 - 
 - class SubClass extends InputThrowsCount { 
 - @ Override 
 - void method1 ( ) { 
 - } 
 - 
 - @ Deprecated 
 - @ Override 
 - void method4 ( ) throws Exception , java . awt . AWTException { 
 - } 
 - 
 - @ Override 
 - void method5 ( ) throws Exception , AWTException , Throwable { 
 - } 
 - 
 - @ SuppressWarnings ( " deprecation " ) 
 - final void method2 ( Object . . . objects ) throws Exception , AWTException , SQLException , 
 - FileNotFoundException , EOFException { 
 - } 
 - 
 - @ java . lang . Override 
 - void method3 ( ) throws Exception { 
 - } 
 - } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 4b15ade . . c2e6e8c 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 73 , 7 + 73 , 9 @ @ 
 < exclude name = " DataflowAnomalyAnalysis " / > 
 < ! - - turning local varibles to fields create design problems and extend scope of variable - - > 
 < exclude name = " AvoidFinalLocalVariable " / > 
 + < ! - - conflicts with names that does not mean in / out - - > 
 < exclude name = " AvoidPrefixingMethodParameters " / > 
 + < ! - - that is not practical , no options to allow some magic numbers , we will use our implementation - - > 
 < exclude name = " AvoidLiteralsInIfCondition " / > 
 < ! - - Checkstyle is not thread safe - - > 
 < exclude name = " UseConcurrentHashMap " / >
