BLEU SCORE: 0.027611988917697356

TEST MSG: Fix possible leaks with java callback in config
GENERATED MSG: Add JNI helper class JavaGlabalRef and JavaClass

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsRealmConfig . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsRealmConfig . cpp <nl> index e55980c . . a7a1c23 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsRealmConfig . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsRealmConfig . cpp <nl> @ @ - 26 , 7 + 26 , 7 @ @ <nl> # include " util . hpp " <nl> # include " jni _ util / java _ method . hpp " <nl> # include " jni _ util / java _ class . hpp " <nl> - # include " jni _ util / java _ global _ ref . hpp " <nl> + # include " jni _ util / java _ global _ weak _ ref . hpp " <nl> # include " jni _ util / jni _ utils . hpp " <nl> # include " jni _ util / java _ exception _ thrower . hpp " <nl> <nl> @ @ - 132 , 16 + 132 , 26 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ OsRealmConfig _ nativeSetSchemaConfi <nl> static JavaMethod run _ migration _ callback _ method ( <nl> env , get _ shared _ realm _ class ( env ) , " runMigrationCallback " , <nl> " ( JLio / realm / internal / OsRealmConfig ; Lio / realm / internal / SharedRealm $ MigrationCallback ; J ) V " , true ) ; <nl> - JavaGlobalRef j _ config _ ref ( env , j _ config , true ) ; <nl> - JavaGlobalRef j _ migration _ callback _ ref ( env , j _ migration _ callback , true ) ; <nl> - config . migration _ function = [ j _ config _ ref , j _ migration _ callback _ ref ] ( SharedRealm old _ realm , <nl> + / / weak ref to avoid leaks caused by circular refs . <nl> + JavaGlobalWeakRef j _ config _ weak ( env , j _ config ) ; <nl> + JavaGlobalWeakRef j _ migration _ cb _ weak ( env , j _ migration _ callback ) ; <nl> + / / TODO : It would be great if we can use move constructor in the lambda capture which was introduced in <nl> + / / c + + 14 . But sadly it seems to be a bug with gcc 4 . 9 to support it . <nl> + config . migration _ function = [ j _ migration _ cb _ weak , j _ config _ weak ] ( SharedRealm old _ realm , <nl> SharedRealm realm , Schema & ) { <nl> JNIEnv * env = JniUtils : : get _ env ( false ) ; <nl> / / Java needs a new pointer for the SharedRealm life control . <nl> SharedRealm * new _ shared _ realm _ ptr = new SharedRealm ( realm ) ; <nl> - env - > CallStaticVoidMethod ( get _ shared _ realm _ class ( env ) , run _ migration _ callback _ method , <nl> - reinterpret _ cast < jlong > ( new _ shared _ realm _ ptr ) , j _ config _ ref . get ( ) , <nl> - j _ migration _ callback _ ref . get ( ) , old _ realm - > schema _ version ( ) ) ; <nl> + JavaGlobalRef config _ global = j _ config _ weak . global _ ref ( env ) ; <nl> + if ( ! config _ global ) { <nl> + return ; <nl> + } <nl> + <nl> + j _ migration _ cb _ weak . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * env , jobject obj ) { <nl> + env - > CallStaticVoidMethod ( get _ shared _ realm _ class ( env ) , run _ migration _ callback _ method , <nl> + reinterpret _ cast < jlong > ( new _ shared _ realm _ ptr ) , config _ global . get ( ) , obj , <nl> + old _ realm - > schema _ version ( ) ) ; <nl> + } ) ; <nl> TERMINATE _ JNI _ IF _ JAVA _ EXCEPTION _ OCCURRED ( env ) ; <nl> } ; <nl> } <nl> @ @ - 162 , 13 + 172 , 17 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ OsRealmConfig _ nativeSetCompactOnLa <nl> if ( j _ compact _ on _ launch ) { <nl> static JavaClass compact _ on _ launch _ class ( env , " io / realm / CompactOnLaunchCallback " ) ; <nl> static JavaMethod should _ compact ( env , compact _ on _ launch _ class , " shouldCompact " , " ( JJ ) Z " ) ; <nl> - JavaGlobalRef java _ compact _ on _ launch _ ref ( env , j _ compact _ on _ launch ) ; <nl> + / / weak ref to avoid leaks caused by circular refs . <nl> + JavaGlobalWeakRef java _ compact _ on _ launch _ weak ( env , j _ compact _ on _ launch ) ; <nl> <nl> - config . should _ compact _ on _ launch _ function = [ java _ compact _ on _ launch _ ref ] ( uint64 _ t totalBytes , <nl> + config . should _ compact _ on _ launch _ function = [ java _ compact _ on _ launch _ weak ] ( uint64 _ t totalBytes , <nl> uint64 _ t usedBytes ) { <nl> JNIEnv * env = JniUtils : : get _ env ( false ) ; <nl> - bool result = env - > CallBooleanMethod ( java _ compact _ on _ launch _ ref . get ( ) , should _ compact , <nl> - static _ cast < jlong > ( totalBytes ) , static _ cast < jlong > ( usedBytes ) ) ; <nl> + bool result = false ; <nl> + java _ compact _ on _ launch _ weak . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * env , jobject obj ) { <nl> + result = env - > CallBooleanMethod ( obj , should _ compact , static _ cast < jlong > ( totalBytes ) , <nl> + static _ cast < jlong > ( usedBytes ) ) ; <nl> + } ) ; <nl> TERMINATE _ JNI _ IF _ JAVA _ EXCEPTION _ OCCURRED ( env ) ; <nl> return result ; <nl> } ; <nl> @ @ - 194 , 15 + 208 , 22 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ OsRealmConfig _ nativeSetInitializat <nl> static JavaMethod run _ initialization _ callback _ method ( <nl> env , get _ shared _ realm _ class ( env ) , " runInitializationCallback " , <nl> " ( JLio / realm / internal / OsRealmConfig ; Lio / realm / internal / SharedRealm $ InitializationCallback ; ) V " , true ) ; <nl> - JavaGlobalRef j _ init _ callback _ ref ( env , j _ init _ callback , true ) ; <nl> - JavaGlobalRef j _ config _ ref ( env , j _ config , true ) ; <nl> - config . initialization _ function = [ j _ init _ callback _ ref , j _ config _ ref ] ( SharedRealm realm ) { <nl> + / / weak ref to avoid leaks caused by circular refs . <nl> + JavaGlobalWeakRef j _ init _ cb _ weak ( env , j _ init _ callback ) ; <nl> + JavaGlobalWeakRef j _ config _ weak ( env , j _ config ) ; <nl> + config . initialization _ function = [ j _ init _ cb _ weak , j _ config _ weak ] ( SharedRealm realm ) { <nl> JNIEnv * env = JniUtils : : get _ env ( false ) ; <nl> / / Java needs a new pointer for the SharedRealm life control . <nl> SharedRealm * new _ shared _ realm _ ptr = new SharedRealm ( realm ) ; <nl> - env - > CallStaticVoidMethod ( get _ shared _ realm _ class ( env ) , run _ initialization _ callback _ method , <nl> - reinterpret _ cast < jlong > ( new _ shared _ realm _ ptr ) , j _ config _ ref . get ( ) , <nl> - j _ init _ callback _ ref . get ( ) ) ; <nl> + JavaGlobalRef config _ global _ ref = j _ config _ weak . global _ ref ( env ) ; <nl> + if ( ! config _ global _ ref ) { <nl> + return ; <nl> + } <nl> + j _ init _ cb _ weak . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * env , jobject obj ) { <nl> + env - > CallStaticVoidMethod ( get _ shared _ realm _ class ( env ) , run _ initialization _ callback _ method , <nl> + reinterpret _ cast < jlong > ( new _ shared _ realm _ ptr ) , config _ global _ ref . get ( ) , <nl> + obj ) ; <nl> + } ) ; <nl> TERMINATE _ JNI _ IF _ JAVA _ EXCEPTION _ OCCURRED ( env ) ; <nl> } ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp <nl> index 1b11807 . . 7c68165 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp <nl> @ @ - 45 , 6 + 45 , 7 @ @ public : <nl> ~ JavaGlobalRef ( ) ; <nl> <nl> JavaGlobalRef & operator = ( JavaGlobalRef & & rhs ) ; <nl> + JavaGlobalRef & operator = ( JavaGlobalRef & rhs ) = delete ; <nl> JavaGlobalRef ( JavaGlobalRef & ) ; <nl> <nl> inline operator bool ( ) const noexcept <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . cpp <nl> index 10718df . . 898cdee 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . cpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . cpp <nl> @ @ - 19 , 7 + 19 , 56 @ @ <nl> <nl> using namespace realm : : jni _ util ; <nl> <nl> - bool JavaGlobalWeakRef : : call _ with _ local _ ref ( JNIEnv * env , std : : function < Callback > callback ) <nl> + JavaGlobalWeakRef : : JavaGlobalWeakRef ( ) <nl> + : m _ weak ( nullptr ) <nl> + { <nl> + } <nl> + <nl> + JavaGlobalWeakRef : : JavaGlobalWeakRef ( JNIEnv * env , jobject obj ) <nl> + : m _ weak ( obj ? env - > NewWeakGlobalRef ( obj ) : nullptr ) <nl> + { <nl> + } <nl> + <nl> + JavaGlobalWeakRef : : ~ JavaGlobalWeakRef ( ) <nl> + { <nl> + if ( m _ weak ) { <nl> + JniUtils : : get _ env ( ) - > DeleteWeakGlobalRef ( m _ weak ) ; <nl> + } <nl> + } <nl> + <nl> + JavaGlobalWeakRef : : JavaGlobalWeakRef ( JavaGlobalWeakRef & & rhs ) <nl> + : m _ weak ( rhs . m _ weak ) <nl> + { <nl> + rhs . m _ weak = nullptr ; <nl> + } <nl> + <nl> + JavaGlobalWeakRef & JavaGlobalWeakRef : : operator = ( JavaGlobalWeakRef & & rhs ) <nl> + { <nl> + this - > ~ JavaGlobalWeakRef ( ) ; <nl> + new ( this ) JavaGlobalWeakRef ( std : : move ( rhs ) ) ; <nl> + return * this ; <nl> + } <nl> + <nl> + JavaGlobalWeakRef : : JavaGlobalWeakRef ( const JavaGlobalWeakRef & rhs ) <nl> + : m _ weak ( JniUtils : : get _ env ( true ) - > NewWeakGlobalRef ( rhs . m _ weak ) ) <nl> + { <nl> + } <nl> + <nl> + JavaGlobalWeakRef & JavaGlobalWeakRef : : operator = ( const JavaGlobalWeakRef & rhs ) <nl> + { <nl> + new ( this ) JavaGlobalWeakRef ( rhs ) ; <nl> + return * this ; <nl> + } <nl> + <nl> + JavaGlobalRef JavaGlobalWeakRef : : global _ ref ( JNIEnv * env ) const <nl> + { <nl> + if ( ! env ) { <nl> + env = JniUtils : : get _ env ( true ) ; <nl> + } <nl> + return JavaGlobalRef ( env , m _ weak ) ; <nl> + } <nl> + <nl> + bool JavaGlobalWeakRef : : call _ with _ local _ ref ( JNIEnv * env , std : : function < Callback > callback ) const <nl> { <nl> if ( ! m _ weak ) { <nl> return false ; <nl> @ @ - 34 , 7 + 83 , 7 @ @ bool JavaGlobalWeakRef : : call _ with _ local _ ref ( JNIEnv * env , std : : function < Callback > <nl> return true ; <nl> } <nl> <nl> - bool JavaGlobalWeakRef : : call _ with _ local _ ref ( std : : function < Callback > callback ) <nl> + bool JavaGlobalWeakRef : : call _ with _ local _ ref ( std : : function < Callback > callback ) const <nl> { <nl> return call _ with _ local _ ref ( JniUtils : : get _ env ( ) , callback ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . hpp <nl> index 4e6c60d . . f21d640 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . hpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . hpp <nl> @ @ - 28 , 48 + 28 , 30 @ @ namespace jni _ util { <nl> / / RAII wrapper for weak global ref . <nl> class JavaGlobalWeakRef { <nl> public : <nl> - JavaGlobalWeakRef ( ) <nl> - : m _ weak ( nullptr ) <nl> - { <nl> - } <nl> - JavaGlobalWeakRef ( JNIEnv * env , jobject obj ) <nl> - : m _ weak ( obj ? env - > NewWeakGlobalRef ( obj ) : nullptr ) <nl> - { <nl> - } <nl> - ~ JavaGlobalWeakRef ( ) <nl> - { <nl> - if ( m _ weak ) { <nl> - JniUtils : : get _ env ( ) - > DeleteWeakGlobalRef ( m _ weak ) ; <nl> - } <nl> - } <nl> + JavaGlobalWeakRef ( ) ; <nl> + JavaGlobalWeakRef ( JNIEnv * , jobject ) ; <nl> + ~ JavaGlobalWeakRef ( ) ; <nl> <nl> - JavaGlobalWeakRef ( JavaGlobalWeakRef & & rhs ) <nl> - : m _ weak ( rhs . m _ weak ) <nl> - { <nl> - rhs . m _ weak = nullptr ; <nl> - } <nl> - JavaGlobalWeakRef & operator = ( JavaGlobalWeakRef & & rhs ) <nl> - { <nl> - this - > ~ JavaGlobalWeakRef ( ) ; <nl> - new ( this ) JavaGlobalWeakRef ( std : : move ( rhs ) ) ; <nl> - return * this ; <nl> - } <nl> + JavaGlobalWeakRef ( JavaGlobalWeakRef & & ) ; <nl> + JavaGlobalWeakRef & operator = ( JavaGlobalWeakRef & & ) ; <nl> <nl> - JavaGlobalWeakRef ( const JavaGlobalWeakRef & ) = delete ; <nl> - JavaGlobalWeakRef & operator = ( const JavaGlobalWeakRef & ) = delete ; <nl> + JavaGlobalWeakRef ( const JavaGlobalWeakRef & ) ; <nl> + JavaGlobalWeakRef & operator = ( const JavaGlobalWeakRef & ) ; <nl> <nl> inline operator bool ( ) const noexcept <nl> { <nl> return m _ weak ! = nullptr ; <nl> } <nl> <nl> + JavaGlobalRef global _ ref ( JNIEnv * env = nullptr ) const ; <nl> + <nl> using Callback = void ( JNIEnv * env , jobject obj ) ; <nl> <nl> / / Acquire a local ref and run the callback with it if the weak ref is valid . The local ref will be deleted after <nl> / / callback finished . Return false if the weak ref is not valid anymore . <nl> - bool call _ with _ local _ ref ( JNIEnv * env , std : : function < Callback > callback ) ; <nl> + bool call _ with _ local _ ref ( JNIEnv * env , std : : function < Callback > callback ) const ; <nl> / / Try to get an JNIEnv for current thread then run the callback . <nl> - bool call _ with _ local _ ref ( std : : function < Callback > callback ) ; <nl> + bool call _ with _ local _ ref ( std : : function < Callback > callback ) const ; <nl> <nl> private : <nl> jweak m _ weak ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java b / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java <nl> index bd4c166 . . 096b626 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java <nl> @ @ - 146 , 6 + 146 , 15 @ @ public class OsRealmConfig implements NativeObject { <nl> / / core destructor ' s thread safety . <nl> private final NativeContext context = new NativeContext ( ) ; <nl> <nl> + / / Hold a ref to callbacks to make sure they won ' t be GCed before getting called . <nl> + / / JNI should only hold a weak ref in the lambda functions . <nl> + @ SuppressWarnings ( { " FieldCanBeLocal " , " unused " } ) <nl> + private final CompactOnLaunchCallback compactOnLaunchCallback ; <nl> + @ SuppressWarnings ( { " FieldCanBeLocal " , " unused " } ) <nl> + private final SharedRealm . MigrationCallback migrationCallback ; <nl> + @ SuppressWarnings ( { " FieldCanBeLocal " , " unused " } ) <nl> + private final SharedRealm . InitializationCallback initializationCallback ; <nl> + <nl> private OsRealmConfig ( final RealmConfiguration config , <nl> boolean autoUpdateNotification , <nl> @ Nullable OsSchemaInfo schemaInfo , <nl> @ @ - 187 , 15 + 196 , 17 @ @ public class OsRealmConfig implements NativeObject { <nl> } <nl> final long schemaVersion = config . getSchemaVersion ( ) ; <nl> final long nativeSchemaPtr = schemaInfo = = null ? 0 : schemaInfo . getNativePtr ( ) ; <nl> + this . migrationCallback = migrationCallback ; <nl> nativeSetSchemaConfig ( nativePtr , schemaMode . getNativeValue ( ) , schemaVersion , nativeSchemaPtr , migrationCallback ) ; <nl> <nl> / / Compact on launch <nl> - CompactOnLaunchCallback compactOnLaunchCallback = config . getCompactOnLaunchCallback ( ) ; <nl> + this . compactOnLaunchCallback = config . getCompactOnLaunchCallback ( ) ; <nl> if ( compactOnLaunchCallback ! = null ) { <nl> nativeSetCompactOnLaunchCallback ( nativePtr , compactOnLaunchCallback ) ; <nl> } <nl> <nl> / / Initial data transaction <nl> + this . initializationCallback = initializationCallback ; <nl> if ( initializationCallback ! = null ) { <nl> nativeSetInitializationCallback ( nativePtr , initializationCallback ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> index 531611f . . 1c5fcc2 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> @ @ - 28 , 6 + 28 , 7 @ @ <nl> # include " util . hpp " <nl> <nl> # include " jni _ util / java _ method . hpp " <nl> + # include " jni _ util / java _ class . hpp " <nl> <nl> using namespace realm ; <nl> using namespace realm : : _ impl ; <nl> @ @ - 74 , 11 + 75 , 12 @ @ public : <nl> : m _ config ( std : : move ( config ) ) <nl> { <nl> # if REALM _ ENABLE _ SYNC <nl> + static JavaClass sync _ manager _ class ( env , " io / realm / SyncManager " ) ; <nl> / / Doing the methods lookup from the thread that loaded the lib , to avoid <nl> / / https : / / developer . android . com / training / articles / perf - jni . html # faq _ FindClass <nl> - static JavaMethod java _ error _ callback _ method ( env , java _ syncmanager , " notifyErrorHandler " , <nl> + static JavaMethod java _ error _ callback _ method ( env , sync _ manager _ class , " notifyErrorHandler " , <nl> " ( ILjava / lang / String ; Ljava / lang / String ; ) V " , true ) ; <nl> - static JavaMethod java _ bind _ session _ method ( env , java _ syncmanager , " bindSessionWithConfig " , <nl> + static JavaMethod java _ bind _ session _ method ( env , sync _ manager _ class , " bindSessionWithConfig " , <nl> " ( Ljava / lang / String ; ) Ljava / lang / String ; " , true ) ; <nl> <nl> / / error handler will be called form the sync client thread <nl> @ @ - 96 , 7 + 98 , 7 @ @ public : <nl> } <nl> <nl> JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; <nl> - env - > CallStaticVoidMethod ( java _ syncmanager , java _ error _ callback _ method , error _ code , <nl> + env - > CallStaticVoidMethod ( sync _ manager _ class , java _ error _ callback _ method , error _ code , <nl> to _ jstring ( env , error _ message ) , to _ jstring ( env , session . get ( ) - > path ( ) ) ) ; <nl> } ; <nl> <nl> @ @ - 110 , 7 + 112 , 7 @ @ public : <nl> JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; <nl> <nl> jstring access _ token _ string = ( jstring ) env - > CallStaticObjectMethod ( <nl> - java _ syncmanager , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; <nl> + sync _ manager _ class , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; <nl> if ( access _ token _ string ) { <nl> / / reusing cached valid token <nl> JStringAccessor access _ token ( env , access _ token _ string ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> index 070de20 . . 48e47cf 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> @ @ - 53 , 9 + 53 , 6 @ @ JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * ) <nl> java _ lang _ double _ init = env - > GetMethodID ( java _ lang _ double , " < init > " , " ( D ) V " ) ; <nl> java _ util _ date = GetClass ( env , " java / util / Date " ) ; <nl> java _ util _ date _ init = env - > GetMethodID ( java _ util _ date , " < init > " , " ( J ) V " ) ; <nl> - # if REALM _ ENABLE _ SYNC <nl> - java _ syncmanager = GetClass ( env , " io / realm / SyncManager " ) ; <nl> - # endif <nl> } <nl> <nl> return JNI _ VERSION _ 1 _ 6 ; <nl> @ @ - 73 , 9 + 70 , 7 @ @ JNIEXPORT void JNI _ OnUnload ( JavaVM * vm , void * ) <nl> env - > DeleteGlobalRef ( java _ lang _ double ) ; <nl> env - > DeleteGlobalRef ( java _ util _ date ) ; <nl> env - > DeleteGlobalRef ( java _ lang _ string ) ; <nl> - # if REALM _ ENABLE _ SYNC <nl> - env - > DeleteGlobalRef ( java _ syncmanager ) ; <nl> - # endif <nl> + JniUtils : : release ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp <nl> new file mode 100644 <nl> index 0000000 . . f0bb753 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # include " java _ class . hpp " <nl> + # include " jni _ utils . hpp " <nl> + <nl> + # include < realm / util / assert . hpp > <nl> + <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + JavaClass : : JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload ) <nl> + : m _ ref _ owner ( get _ jclass ( env , class _ name ) ) <nl> + , m _ class ( reinterpret _ cast < jclass > ( m _ ref _ owner . get ( ) ) ) <nl> + { <nl> + if ( free _ on _ unload ) { <nl> + / / Move the ownership of global ref to JNIUtils which will be released when JNI _ OnUnload . <nl> + JniUtils : : keep _ global _ ref ( m _ ref _ owner ) ; <nl> + } <nl> + } <nl> + <nl> + JavaGlobalRef JavaClass : : get _ jclass ( JNIEnv * env , const char * class _ name ) <nl> + { <nl> + jclass cls = env - > FindClass ( class _ name ) ; <nl> + REALM _ ASSERT _ DEBUG ( cls ) ; <nl> + <nl> + JavaGlobalRef cls _ ref ( env , cls ) ; <nl> + env - > DeleteLocalRef ( cls ) ; <nl> + return cls _ ref ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp <nl> new file mode 100644 <nl> index 0000000 . . c95dce2 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # ifndef REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP <nl> + # define REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP <nl> + <nl> + # include < jni . h > <nl> + <nl> + # include " java _ global _ ref . hpp " <nl> + <nl> + namespace realm { <nl> + namespace jni _ util { <nl> + <nl> + / / To find the jclass and manage the lifecycle for the jclass ' s global ref . <nl> + class JavaClass { <nl> + public : <nl> + / / when free _ on _ unload is true , the jclass ' s global ref will be released when JNI _ OnUnload called . This is useful <nl> + / / when the JavaClass instance is static . Otherwise the jclass ' s global ref will be released when this object is <nl> + / / deleted . <nl> + JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload = true ) ; <nl> + ~ JavaClass ( ) <nl> + { <nl> + } <nl> + <nl> + inline jclass get ( ) noexcept <nl> + { <nl> + return m _ class ; <nl> + } <nl> + <nl> + inline operator jclass ( ) const noexcept <nl> + { <nl> + return m _ class ; <nl> + } <nl> + <nl> + / / Not implemented for now . <nl> + JavaClass ( JavaClass & & ) = delete ; <nl> + JavaClass ( JavaClass & ) = delete ; <nl> + JavaClass & operator = ( JavaClass & & ) = delete ; <nl> + <nl> + private : <nl> + JavaGlobalRef m _ ref _ owner ; <nl> + jclass m _ class ; <nl> + static JavaGlobalRef get _ jclass ( JNIEnv * env , const char * class _ name ) ; <nl> + } ; <nl> + <nl> + } / / jni _ util <nl> + } / / realm <nl> + <nl> + # endif <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp <nl> new file mode 100644 <nl> index 0000000 . . fd6036c <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # include " java _ global _ ref . hpp " <nl> + # include " jni _ utils . hpp " <nl> + <nl> + # include < memory > <nl> + <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + JavaGlobalRef : : ~ JavaGlobalRef ( ) <nl> + { <nl> + if ( m _ ref ) { <nl> + JniUtils : : get _ env ( ) - > DeleteGlobalRef ( m _ ref ) ; <nl> + } <nl> + } <nl> + <nl> + JavaGlobalRef & JavaGlobalRef : : operator = ( JavaGlobalRef & & rhs ) <nl> + { <nl> + this - > ~ JavaGlobalRef ( ) ; <nl> + new ( this ) JavaGlobalRef ( std : : move ( rhs ) ) ; <nl> + return * this ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp <nl> new file mode 100644 <nl> index 0000000 . . a08aad4 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp <nl> @ @ - 0 , 0 + 1 , 64 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # ifndef REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP <nl> + # define REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP <nl> + <nl> + # include < jni . h > <nl> + <nl> + namespace realm { <nl> + namespace jni _ util { <nl> + <nl> + / / Manage the lifecycle of jobject ' s global ref . <nl> + class JavaGlobalRef { <nl> + public : <nl> + JavaGlobalRef ( ) <nl> + : m _ ref ( nullptr ) <nl> + { <nl> + } <nl> + JavaGlobalRef ( JNIEnv * env , jobject obj ) <nl> + : m _ ref ( obj ? env - > NewGlobalRef ( obj ) : nullptr ) <nl> + { <nl> + } <nl> + JavaGlobalRef ( JavaGlobalRef & & rhs ) <nl> + : m _ ref ( rhs . m _ ref ) <nl> + { <nl> + rhs . m _ ref = nullptr ; <nl> + } <nl> + ~ JavaGlobalRef ( ) ; <nl> + <nl> + JavaGlobalRef & operator = ( JavaGlobalRef & & rhs ) ; <nl> + <nl> + inline operator bool ( ) const noexcept <nl> + { <nl> + return m _ ref ! = nullptr ; <nl> + } <nl> + <nl> + inline jobject get ( ) noexcept <nl> + { <nl> + return m _ ref ; <nl> + } <nl> + <nl> + / / Not implemented for now . <nl> + JavaGlobalRef ( JavaGlobalRef & ) = delete ; <nl> + <nl> + private : <nl> + jobject m _ ref ; <nl> + } ; <nl> + } <nl> + } <nl> + <nl> + # endif / / REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp <nl> index 88a23eb . . 0ca6f52 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp <nl> @ @ - 31 , 6 + 31 , 12 @ @ void JniUtils : : initialize ( JavaVM * vm , jint vm _ version ) noexcept <nl> s _ instance = std : : unique _ ptr < JniUtils > ( new JniUtils ( vm , vm _ version ) ) ; <nl> } <nl> <nl> + void JniUtils : : release ( ) <nl> + { <nl> + REALM _ ASSERT _ DEBUG ( s _ instance ) ; <nl> + s _ instance . release ( ) ; <nl> + } <nl> + <nl> JNIEnv * JniUtils : : get _ env ( bool attach _ if _ needed ) <nl> { <nl> REALM _ ASSERT _ DEBUG ( s _ instance ) ; <nl> @ @ - 53 , 3 + 59 , 9 @ @ void JniUtils : : detach _ current _ thread ( ) <nl> { <nl> s _ instance - > m _ vm - > DetachCurrentThread ( ) ; <nl> } <nl> + <nl> + void JniUtils : : keep _ global _ ref ( JavaGlobalRef & ref ) <nl> + { <nl> + s _ instance - > m _ global _ refs . push _ back ( std : : move ( ref ) ) ; <nl> + } <nl> + <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp <nl> index 7d2bcf4 . . 689aa12 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp <nl> @ @ - 19 , 6 + 19 , 10 @ @ <nl> <nl> # include < jni . h > <nl> <nl> + # include < vector > <nl> + <nl> + # include " java _ global _ ref . hpp " <nl> + <nl> namespace realm { <nl> namespace jni _ util { <nl> <nl> @ @ - 31 , 12 + 35 , 16 @ @ public : <nl> <nl> / / Call this only once in JNI _ OnLoad . <nl> static void initialize ( JavaVM * vm , jint vm _ version ) noexcept ; <nl> + / / Call this in JNI _ OnUnload . <nl> + static void release ( ) ; <nl> / / When attach _ if _ needed is false , returns the JNIEnv if there is one attached to this thread . Assert if there is <nl> / / none . When attach _ if _ needed is true , try to attach and return a JNIEnv if necessary . <nl> static JNIEnv * get _ env ( bool attach _ if _ needed = false ) ; <nl> / / Detach the current thread from the JVM . Only required for C + + threads that where attached in the first place . <nl> / / Failing to do so is a resource leak . <nl> static void detach _ current _ thread ( ) ; <nl> + / / Keep the given global reference until JNI _ OnUnload is called . <nl> + static void keep _ global _ ref ( JavaGlobalRef & ref ) ; <nl> <nl> private : <nl> JniUtils ( JavaVM * vm , jint vm _ version ) noexcept <nl> @ @ - 47 , 6 + 55 , 7 @ @ private : <nl> <nl> JavaVM * m _ vm ; <nl> jint m _ vm _ version ; <nl> + std : : vector < JavaGlobalRef > m _ global _ refs ; <nl> } ; <nl> <nl> } / / namespace realm

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsRealmConfig . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsRealmConfig . cpp 
 index e55980c . . a7a1c23 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsRealmConfig . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsRealmConfig . cpp 
 @ @ - 26 , 7 + 26 , 7 @ @ 
 # include " util . hpp " 
 # include " jni _ util / java _ method . hpp " 
 # include " jni _ util / java _ class . hpp " 
 - # include " jni _ util / java _ global _ ref . hpp " 
 + # include " jni _ util / java _ global _ weak _ ref . hpp " 
 # include " jni _ util / jni _ utils . hpp " 
 # include " jni _ util / java _ exception _ thrower . hpp " 
 
 @ @ - 132 , 16 + 132 , 26 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ OsRealmConfig _ nativeSetSchemaConfi 
 static JavaMethod run _ migration _ callback _ method ( 
 env , get _ shared _ realm _ class ( env ) , " runMigrationCallback " , 
 " ( JLio / realm / internal / OsRealmConfig ; Lio / realm / internal / SharedRealm $ MigrationCallback ; J ) V " , true ) ; 
 - JavaGlobalRef j _ config _ ref ( env , j _ config , true ) ; 
 - JavaGlobalRef j _ migration _ callback _ ref ( env , j _ migration _ callback , true ) ; 
 - config . migration _ function = [ j _ config _ ref , j _ migration _ callback _ ref ] ( SharedRealm old _ realm , 
 + / / weak ref to avoid leaks caused by circular refs . 
 + JavaGlobalWeakRef j _ config _ weak ( env , j _ config ) ; 
 + JavaGlobalWeakRef j _ migration _ cb _ weak ( env , j _ migration _ callback ) ; 
 + / / TODO : It would be great if we can use move constructor in the lambda capture which was introduced in 
 + / / c + + 14 . But sadly it seems to be a bug with gcc 4 . 9 to support it . 
 + config . migration _ function = [ j _ migration _ cb _ weak , j _ config _ weak ] ( SharedRealm old _ realm , 
 SharedRealm realm , Schema & ) { 
 JNIEnv * env = JniUtils : : get _ env ( false ) ; 
 / / Java needs a new pointer for the SharedRealm life control . 
 SharedRealm * new _ shared _ realm _ ptr = new SharedRealm ( realm ) ; 
 - env - > CallStaticVoidMethod ( get _ shared _ realm _ class ( env ) , run _ migration _ callback _ method , 
 - reinterpret _ cast < jlong > ( new _ shared _ realm _ ptr ) , j _ config _ ref . get ( ) , 
 - j _ migration _ callback _ ref . get ( ) , old _ realm - > schema _ version ( ) ) ; 
 + JavaGlobalRef config _ global = j _ config _ weak . global _ ref ( env ) ; 
 + if ( ! config _ global ) { 
 + return ; 
 + } 
 + 
 + j _ migration _ cb _ weak . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * env , jobject obj ) { 
 + env - > CallStaticVoidMethod ( get _ shared _ realm _ class ( env ) , run _ migration _ callback _ method , 
 + reinterpret _ cast < jlong > ( new _ shared _ realm _ ptr ) , config _ global . get ( ) , obj , 
 + old _ realm - > schema _ version ( ) ) ; 
 + } ) ; 
 TERMINATE _ JNI _ IF _ JAVA _ EXCEPTION _ OCCURRED ( env ) ; 
 } ; 
 } 
 @ @ - 162 , 13 + 172 , 17 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ OsRealmConfig _ nativeSetCompactOnLa 
 if ( j _ compact _ on _ launch ) { 
 static JavaClass compact _ on _ launch _ class ( env , " io / realm / CompactOnLaunchCallback " ) ; 
 static JavaMethod should _ compact ( env , compact _ on _ launch _ class , " shouldCompact " , " ( JJ ) Z " ) ; 
 - JavaGlobalRef java _ compact _ on _ launch _ ref ( env , j _ compact _ on _ launch ) ; 
 + / / weak ref to avoid leaks caused by circular refs . 
 + JavaGlobalWeakRef java _ compact _ on _ launch _ weak ( env , j _ compact _ on _ launch ) ; 
 
 - config . should _ compact _ on _ launch _ function = [ java _ compact _ on _ launch _ ref ] ( uint64 _ t totalBytes , 
 + config . should _ compact _ on _ launch _ function = [ java _ compact _ on _ launch _ weak ] ( uint64 _ t totalBytes , 
 uint64 _ t usedBytes ) { 
 JNIEnv * env = JniUtils : : get _ env ( false ) ; 
 - bool result = env - > CallBooleanMethod ( java _ compact _ on _ launch _ ref . get ( ) , should _ compact , 
 - static _ cast < jlong > ( totalBytes ) , static _ cast < jlong > ( usedBytes ) ) ; 
 + bool result = false ; 
 + java _ compact _ on _ launch _ weak . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * env , jobject obj ) { 
 + result = env - > CallBooleanMethod ( obj , should _ compact , static _ cast < jlong > ( totalBytes ) , 
 + static _ cast < jlong > ( usedBytes ) ) ; 
 + } ) ; 
 TERMINATE _ JNI _ IF _ JAVA _ EXCEPTION _ OCCURRED ( env ) ; 
 return result ; 
 } ; 
 @ @ - 194 , 15 + 208 , 22 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ OsRealmConfig _ nativeSetInitializat 
 static JavaMethod run _ initialization _ callback _ method ( 
 env , get _ shared _ realm _ class ( env ) , " runInitializationCallback " , 
 " ( JLio / realm / internal / OsRealmConfig ; Lio / realm / internal / SharedRealm $ InitializationCallback ; ) V " , true ) ; 
 - JavaGlobalRef j _ init _ callback _ ref ( env , j _ init _ callback , true ) ; 
 - JavaGlobalRef j _ config _ ref ( env , j _ config , true ) ; 
 - config . initialization _ function = [ j _ init _ callback _ ref , j _ config _ ref ] ( SharedRealm realm ) { 
 + / / weak ref to avoid leaks caused by circular refs . 
 + JavaGlobalWeakRef j _ init _ cb _ weak ( env , j _ init _ callback ) ; 
 + JavaGlobalWeakRef j _ config _ weak ( env , j _ config ) ; 
 + config . initialization _ function = [ j _ init _ cb _ weak , j _ config _ weak ] ( SharedRealm realm ) { 
 JNIEnv * env = JniUtils : : get _ env ( false ) ; 
 / / Java needs a new pointer for the SharedRealm life control . 
 SharedRealm * new _ shared _ realm _ ptr = new SharedRealm ( realm ) ; 
 - env - > CallStaticVoidMethod ( get _ shared _ realm _ class ( env ) , run _ initialization _ callback _ method , 
 - reinterpret _ cast < jlong > ( new _ shared _ realm _ ptr ) , j _ config _ ref . get ( ) , 
 - j _ init _ callback _ ref . get ( ) ) ; 
 + JavaGlobalRef config _ global _ ref = j _ config _ weak . global _ ref ( env ) ; 
 + if ( ! config _ global _ ref ) { 
 + return ; 
 + } 
 + j _ init _ cb _ weak . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * env , jobject obj ) { 
 + env - > CallStaticVoidMethod ( get _ shared _ realm _ class ( env ) , run _ initialization _ callback _ method , 
 + reinterpret _ cast < jlong > ( new _ shared _ realm _ ptr ) , config _ global _ ref . get ( ) , 
 + obj ) ; 
 + } ) ; 
 TERMINATE _ JNI _ IF _ JAVA _ EXCEPTION _ OCCURRED ( env ) ; 
 } ; 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp 
 index 1b11807 . . 7c68165 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp 
 @ @ - 45 , 6 + 45 , 7 @ @ public : 
 ~ JavaGlobalRef ( ) ; 
 
 JavaGlobalRef & operator = ( JavaGlobalRef & & rhs ) ; 
 + JavaGlobalRef & operator = ( JavaGlobalRef & rhs ) = delete ; 
 JavaGlobalRef ( JavaGlobalRef & ) ; 
 
 inline operator bool ( ) const noexcept 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . cpp 
 index 10718df . . 898cdee 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . cpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . cpp 
 @ @ - 19 , 7 + 19 , 56 @ @ 
 
 using namespace realm : : jni _ util ; 
 
 - bool JavaGlobalWeakRef : : call _ with _ local _ ref ( JNIEnv * env , std : : function < Callback > callback ) 
 + JavaGlobalWeakRef : : JavaGlobalWeakRef ( ) 
 + : m _ weak ( nullptr ) 
 + { 
 + } 
 + 
 + JavaGlobalWeakRef : : JavaGlobalWeakRef ( JNIEnv * env , jobject obj ) 
 + : m _ weak ( obj ? env - > NewWeakGlobalRef ( obj ) : nullptr ) 
 + { 
 + } 
 + 
 + JavaGlobalWeakRef : : ~ JavaGlobalWeakRef ( ) 
 + { 
 + if ( m _ weak ) { 
 + JniUtils : : get _ env ( ) - > DeleteWeakGlobalRef ( m _ weak ) ; 
 + } 
 + } 
 + 
 + JavaGlobalWeakRef : : JavaGlobalWeakRef ( JavaGlobalWeakRef & & rhs ) 
 + : m _ weak ( rhs . m _ weak ) 
 + { 
 + rhs . m _ weak = nullptr ; 
 + } 
 + 
 + JavaGlobalWeakRef & JavaGlobalWeakRef : : operator = ( JavaGlobalWeakRef & & rhs ) 
 + { 
 + this - > ~ JavaGlobalWeakRef ( ) ; 
 + new ( this ) JavaGlobalWeakRef ( std : : move ( rhs ) ) ; 
 + return * this ; 
 + } 
 + 
 + JavaGlobalWeakRef : : JavaGlobalWeakRef ( const JavaGlobalWeakRef & rhs ) 
 + : m _ weak ( JniUtils : : get _ env ( true ) - > NewWeakGlobalRef ( rhs . m _ weak ) ) 
 + { 
 + } 
 + 
 + JavaGlobalWeakRef & JavaGlobalWeakRef : : operator = ( const JavaGlobalWeakRef & rhs ) 
 + { 
 + new ( this ) JavaGlobalWeakRef ( rhs ) ; 
 + return * this ; 
 + } 
 + 
 + JavaGlobalRef JavaGlobalWeakRef : : global _ ref ( JNIEnv * env ) const 
 + { 
 + if ( ! env ) { 
 + env = JniUtils : : get _ env ( true ) ; 
 + } 
 + return JavaGlobalRef ( env , m _ weak ) ; 
 + } 
 + 
 + bool JavaGlobalWeakRef : : call _ with _ local _ ref ( JNIEnv * env , std : : function < Callback > callback ) const 
 { 
 if ( ! m _ weak ) { 
 return false ; 
 @ @ - 34 , 7 + 83 , 7 @ @ bool JavaGlobalWeakRef : : call _ with _ local _ ref ( JNIEnv * env , std : : function < Callback > 
 return true ; 
 } 
 
 - bool JavaGlobalWeakRef : : call _ with _ local _ ref ( std : : function < Callback > callback ) 
 + bool JavaGlobalWeakRef : : call _ with _ local _ ref ( std : : function < Callback > callback ) const 
 { 
 return call _ with _ local _ ref ( JniUtils : : get _ env ( ) , callback ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . hpp 
 index 4e6c60d . . f21d640 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . hpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ weak _ ref . hpp 
 @ @ - 28 , 48 + 28 , 30 @ @ namespace jni _ util { 
 / / RAII wrapper for weak global ref . 
 class JavaGlobalWeakRef { 
 public : 
 - JavaGlobalWeakRef ( ) 
 - : m _ weak ( nullptr ) 
 - { 
 - } 
 - JavaGlobalWeakRef ( JNIEnv * env , jobject obj ) 
 - : m _ weak ( obj ? env - > NewWeakGlobalRef ( obj ) : nullptr ) 
 - { 
 - } 
 - ~ JavaGlobalWeakRef ( ) 
 - { 
 - if ( m _ weak ) { 
 - JniUtils : : get _ env ( ) - > DeleteWeakGlobalRef ( m _ weak ) ; 
 - } 
 - } 
 + JavaGlobalWeakRef ( ) ; 
 + JavaGlobalWeakRef ( JNIEnv * , jobject ) ; 
 + ~ JavaGlobalWeakRef ( ) ; 
 
 - JavaGlobalWeakRef ( JavaGlobalWeakRef & & rhs ) 
 - : m _ weak ( rhs . m _ weak ) 
 - { 
 - rhs . m _ weak = nullptr ; 
 - } 
 - JavaGlobalWeakRef & operator = ( JavaGlobalWeakRef & & rhs ) 
 - { 
 - this - > ~ JavaGlobalWeakRef ( ) ; 
 - new ( this ) JavaGlobalWeakRef ( std : : move ( rhs ) ) ; 
 - return * this ; 
 - } 
 + JavaGlobalWeakRef ( JavaGlobalWeakRef & & ) ; 
 + JavaGlobalWeakRef & operator = ( JavaGlobalWeakRef & & ) ; 
 
 - JavaGlobalWeakRef ( const JavaGlobalWeakRef & ) = delete ; 
 - JavaGlobalWeakRef & operator = ( const JavaGlobalWeakRef & ) = delete ; 
 + JavaGlobalWeakRef ( const JavaGlobalWeakRef & ) ; 
 + JavaGlobalWeakRef & operator = ( const JavaGlobalWeakRef & ) ; 
 
 inline operator bool ( ) const noexcept 
 { 
 return m _ weak ! = nullptr ; 
 } 
 
 + JavaGlobalRef global _ ref ( JNIEnv * env = nullptr ) const ; 
 + 
 using Callback = void ( JNIEnv * env , jobject obj ) ; 
 
 / / Acquire a local ref and run the callback with it if the weak ref is valid . The local ref will be deleted after 
 / / callback finished . Return false if the weak ref is not valid anymore . 
 - bool call _ with _ local _ ref ( JNIEnv * env , std : : function < Callback > callback ) ; 
 + bool call _ with _ local _ ref ( JNIEnv * env , std : : function < Callback > callback ) const ; 
 / / Try to get an JNIEnv for current thread then run the callback . 
 - bool call _ with _ local _ ref ( std : : function < Callback > callback ) ; 
 + bool call _ with _ local _ ref ( std : : function < Callback > callback ) const ; 
 
 private : 
 jweak m _ weak ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java b / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java 
 index bd4c166 . . 096b626 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java 
 @ @ - 146 , 6 + 146 , 15 @ @ public class OsRealmConfig implements NativeObject { 
 / / core destructor ' s thread safety . 
 private final NativeContext context = new NativeContext ( ) ; 
 
 + / / Hold a ref to callbacks to make sure they won ' t be GCed before getting called . 
 + / / JNI should only hold a weak ref in the lambda functions . 
 + @ SuppressWarnings ( { " FieldCanBeLocal " , " unused " } ) 
 + private final CompactOnLaunchCallback compactOnLaunchCallback ; 
 + @ SuppressWarnings ( { " FieldCanBeLocal " , " unused " } ) 
 + private final SharedRealm . MigrationCallback migrationCallback ; 
 + @ SuppressWarnings ( { " FieldCanBeLocal " , " unused " } ) 
 + private final SharedRealm . InitializationCallback initializationCallback ; 
 + 
 private OsRealmConfig ( final RealmConfiguration config , 
 boolean autoUpdateNotification , 
 @ Nullable OsSchemaInfo schemaInfo , 
 @ @ - 187 , 15 + 196 , 17 @ @ public class OsRealmConfig implements NativeObject { 
 } 
 final long schemaVersion = config . getSchemaVersion ( ) ; 
 final long nativeSchemaPtr = schemaInfo = = null ? 0 : schemaInfo . getNativePtr ( ) ; 
 + this . migrationCallback = migrationCallback ; 
 nativeSetSchemaConfig ( nativePtr , schemaMode . getNativeValue ( ) , schemaVersion , nativeSchemaPtr , migrationCallback ) ; 
 
 / / Compact on launch 
 - CompactOnLaunchCallback compactOnLaunchCallback = config . getCompactOnLaunchCallback ( ) ; 
 + this . compactOnLaunchCallback = config . getCompactOnLaunchCallback ( ) ; 
 if ( compactOnLaunchCallback ! = null ) { 
 nativeSetCompactOnLaunchCallback ( nativePtr , compactOnLaunchCallback ) ; 
 } 
 
 / / Initial data transaction 
 + this . initializationCallback = initializationCallback ; 
 if ( initializationCallback ! = null ) { 
 nativeSetInitializationCallback ( nativePtr , initializationCallback ) ; 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 index 531611f . . 1c5fcc2 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 @ @ - 28 , 6 + 28 , 7 @ @ 
 # include " util . hpp " 
 
 # include " jni _ util / java _ method . hpp " 
 + # include " jni _ util / java _ class . hpp " 
 
 using namespace realm ; 
 using namespace realm : : _ impl ; 
 @ @ - 74 , 11 + 75 , 12 @ @ public : 
 : m _ config ( std : : move ( config ) ) 
 { 
 # if REALM _ ENABLE _ SYNC 
 + static JavaClass sync _ manager _ class ( env , " io / realm / SyncManager " ) ; 
 / / Doing the methods lookup from the thread that loaded the lib , to avoid 
 / / https : / / developer . android . com / training / articles / perf - jni . html # faq _ FindClass 
 - static JavaMethod java _ error _ callback _ method ( env , java _ syncmanager , " notifyErrorHandler " , 
 + static JavaMethod java _ error _ callback _ method ( env , sync _ manager _ class , " notifyErrorHandler " , 
 " ( ILjava / lang / String ; Ljava / lang / String ; ) V " , true ) ; 
 - static JavaMethod java _ bind _ session _ method ( env , java _ syncmanager , " bindSessionWithConfig " , 
 + static JavaMethod java _ bind _ session _ method ( env , sync _ manager _ class , " bindSessionWithConfig " , 
 " ( Ljava / lang / String ; ) Ljava / lang / String ; " , true ) ; 
 
 / / error handler will be called form the sync client thread 
 @ @ - 96 , 7 + 98 , 7 @ @ public : 
 } 
 
 JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; 
 - env - > CallStaticVoidMethod ( java _ syncmanager , java _ error _ callback _ method , error _ code , 
 + env - > CallStaticVoidMethod ( sync _ manager _ class , java _ error _ callback _ method , error _ code , 
 to _ jstring ( env , error _ message ) , to _ jstring ( env , session . get ( ) - > path ( ) ) ) ; 
 } ; 
 
 @ @ - 110 , 7 + 112 , 7 @ @ public : 
 JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; 
 
 jstring access _ token _ string = ( jstring ) env - > CallStaticObjectMethod ( 
 - java _ syncmanager , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; 
 + sync _ manager _ class , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; 
 if ( access _ token _ string ) { 
 / / reusing cached valid token 
 JStringAccessor access _ token ( env , access _ token _ string ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 index 070de20 . . 48e47cf 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 @ @ - 53 , 9 + 53 , 6 @ @ JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * ) 
 java _ lang _ double _ init = env - > GetMethodID ( java _ lang _ double , " < init > " , " ( D ) V " ) ; 
 java _ util _ date = GetClass ( env , " java / util / Date " ) ; 
 java _ util _ date _ init = env - > GetMethodID ( java _ util _ date , " < init > " , " ( J ) V " ) ; 
 - # if REALM _ ENABLE _ SYNC 
 - java _ syncmanager = GetClass ( env , " io / realm / SyncManager " ) ; 
 - # endif 
 } 
 
 return JNI _ VERSION _ 1 _ 6 ; 
 @ @ - 73 , 9 + 70 , 7 @ @ JNIEXPORT void JNI _ OnUnload ( JavaVM * vm , void * ) 
 env - > DeleteGlobalRef ( java _ lang _ double ) ; 
 env - > DeleteGlobalRef ( java _ util _ date ) ; 
 env - > DeleteGlobalRef ( java _ lang _ string ) ; 
 - # if REALM _ ENABLE _ SYNC 
 - env - > DeleteGlobalRef ( java _ syncmanager ) ; 
 - # endif 
 + JniUtils : : release ( ) ; 
 } 
 } 
 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp 
 new file mode 100644 
 index 0000000 . . f0bb753 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # include " java _ class . hpp " 
 + # include " jni _ utils . hpp " 
 + 
 + # include < realm / util / assert . hpp > 
 + 
 + using namespace realm : : jni _ util ; 
 + 
 + JavaClass : : JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload ) 
 + : m _ ref _ owner ( get _ jclass ( env , class _ name ) ) 
 + , m _ class ( reinterpret _ cast < jclass > ( m _ ref _ owner . get ( ) ) ) 
 + { 
 + if ( free _ on _ unload ) { 
 + / / Move the ownership of global ref to JNIUtils which will be released when JNI _ OnUnload . 
 + JniUtils : : keep _ global _ ref ( m _ ref _ owner ) ; 
 + } 
 + } 
 + 
 + JavaGlobalRef JavaClass : : get _ jclass ( JNIEnv * env , const char * class _ name ) 
 + { 
 + jclass cls = env - > FindClass ( class _ name ) ; 
 + REALM _ ASSERT _ DEBUG ( cls ) ; 
 + 
 + JavaGlobalRef cls _ ref ( env , cls ) ; 
 + env - > DeleteLocalRef ( cls ) ; 
 + return cls _ ref ; 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp 
 new file mode 100644 
 index 0000000 . . c95dce2 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # ifndef REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP 
 + # define REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP 
 + 
 + # include < jni . h > 
 + 
 + # include " java _ global _ ref . hpp " 
 + 
 + namespace realm { 
 + namespace jni _ util { 
 + 
 + / / To find the jclass and manage the lifecycle for the jclass ' s global ref . 
 + class JavaClass { 
 + public : 
 + / / when free _ on _ unload is true , the jclass ' s global ref will be released when JNI _ OnUnload called . This is useful 
 + / / when the JavaClass instance is static . Otherwise the jclass ' s global ref will be released when this object is 
 + / / deleted . 
 + JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload = true ) ; 
 + ~ JavaClass ( ) 
 + { 
 + } 
 + 
 + inline jclass get ( ) noexcept 
 + { 
 + return m _ class ; 
 + } 
 + 
 + inline operator jclass ( ) const noexcept 
 + { 
 + return m _ class ; 
 + } 
 + 
 + / / Not implemented for now . 
 + JavaClass ( JavaClass & & ) = delete ; 
 + JavaClass ( JavaClass & ) = delete ; 
 + JavaClass & operator = ( JavaClass & & ) = delete ; 
 + 
 + private : 
 + JavaGlobalRef m _ ref _ owner ; 
 + jclass m _ class ; 
 + static JavaGlobalRef get _ jclass ( JNIEnv * env , const char * class _ name ) ; 
 + } ; 
 + 
 + } / / jni _ util 
 + } / / realm 
 + 
 + # endif 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp 
 new file mode 100644 
 index 0000000 . . fd6036c 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # include " java _ global _ ref . hpp " 
 + # include " jni _ utils . hpp " 
 + 
 + # include < memory > 
 + 
 + using namespace realm : : jni _ util ; 
 + 
 + JavaGlobalRef : : ~ JavaGlobalRef ( ) 
 + { 
 + if ( m _ ref ) { 
 + JniUtils : : get _ env ( ) - > DeleteGlobalRef ( m _ ref ) ; 
 + } 
 + } 
 + 
 + JavaGlobalRef & JavaGlobalRef : : operator = ( JavaGlobalRef & & rhs ) 
 + { 
 + this - > ~ JavaGlobalRef ( ) ; 
 + new ( this ) JavaGlobalRef ( std : : move ( rhs ) ) ; 
 + return * this ; 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp 
 new file mode 100644 
 index 0000000 . . a08aad4 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp 
 @ @ - 0 , 0 + 1 , 64 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # ifndef REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP 
 + # define REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP 
 + 
 + # include < jni . h > 
 + 
 + namespace realm { 
 + namespace jni _ util { 
 + 
 + / / Manage the lifecycle of jobject ' s global ref . 
 + class JavaGlobalRef { 
 + public : 
 + JavaGlobalRef ( ) 
 + : m _ ref ( nullptr ) 
 + { 
 + } 
 + JavaGlobalRef ( JNIEnv * env , jobject obj ) 
 + : m _ ref ( obj ? env - > NewGlobalRef ( obj ) : nullptr ) 
 + { 
 + } 
 + JavaGlobalRef ( JavaGlobalRef & & rhs ) 
 + : m _ ref ( rhs . m _ ref ) 
 + { 
 + rhs . m _ ref = nullptr ; 
 + } 
 + ~ JavaGlobalRef ( ) ; 
 + 
 + JavaGlobalRef & operator = ( JavaGlobalRef & & rhs ) ; 
 + 
 + inline operator bool ( ) const noexcept 
 + { 
 + return m _ ref ! = nullptr ; 
 + } 
 + 
 + inline jobject get ( ) noexcept 
 + { 
 + return m _ ref ; 
 + } 
 + 
 + / / Not implemented for now . 
 + JavaGlobalRef ( JavaGlobalRef & ) = delete ; 
 + 
 + private : 
 + jobject m _ ref ; 
 + } ; 
 + } 
 + } 
 + 
 + # endif / / REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp 
 index 88a23eb . . 0ca6f52 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp 
 @ @ - 31 , 6 + 31 , 12 @ @ void JniUtils : : initialize ( JavaVM * vm , jint vm _ version ) noexcept 
 s _ instance = std : : unique _ ptr < JniUtils > ( new JniUtils ( vm , vm _ version ) ) ; 
 } 
 
 + void JniUtils : : release ( ) 
 + { 
 + REALM _ ASSERT _ DEBUG ( s _ instance ) ; 
 + s _ instance . release ( ) ; 
 + } 
 + 
 JNIEnv * JniUtils : : get _ env ( bool attach _ if _ needed ) 
 { 
 REALM _ ASSERT _ DEBUG ( s _ instance ) ; 
 @ @ - 53 , 3 + 59 , 9 @ @ void JniUtils : : detach _ current _ thread ( ) 
 { 
 s _ instance - > m _ vm - > DetachCurrentThread ( ) ; 
 } 
 + 
 + void JniUtils : : keep _ global _ ref ( JavaGlobalRef & ref ) 
 + { 
 + s _ instance - > m _ global _ refs . push _ back ( std : : move ( ref ) ) ; 
 + } 
 + 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp 
 index 7d2bcf4 . . 689aa12 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp 
 @ @ - 19 , 6 + 19 , 10 @ @ 
 
 # include < jni . h > 
 
 + # include < vector > 
 + 
 + # include " java _ global _ ref . hpp " 
 + 
 namespace realm { 
 namespace jni _ util { 
 
 @ @ - 31 , 12 + 35 , 16 @ @ public : 
 
 / / Call this only once in JNI _ OnLoad . 
 static void initialize ( JavaVM * vm , jint vm _ version ) noexcept ; 
 + / / Call this in JNI _ OnUnload . 
 + static void release ( ) ; 
 / / When attach _ if _ needed is false , returns the JNIEnv if there is one attached to this thread . Assert if there is 
 / / none . When attach _ if _ needed is true , try to attach and return a JNIEnv if necessary . 
 static JNIEnv * get _ env ( bool attach _ if _ needed = false ) ; 
 / / Detach the current thread from the JVM . Only required for C + + threads that where attached in the first place . 
 / / Failing to do so is a resource leak . 
 static void detach _ current _ thread ( ) ; 
 + / / Keep the given global reference until JNI _ OnUnload is called . 
 + static void keep _ global _ ref ( JavaGlobalRef & ref ) ; 
 
 private : 
 JniUtils ( JavaVM * vm , jint vm _ version ) noexcept 
 @ @ - 47 , 6 + 55 , 7 @ @ private : 
 
 JavaVM * m _ vm ; 
 jint m _ vm _ version ; 
 + std : : vector < JavaGlobalRef > m _ global _ refs ; 
 } ; 
 
 } / / namespace realm
