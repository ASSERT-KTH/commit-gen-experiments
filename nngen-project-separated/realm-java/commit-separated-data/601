BLEU SCORE: 0.03283637368030199

TEST MSG: Sync facade to make spliting lib possible
GENERATED MSG: More checkings when modify RealmList

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 388801d . . 2836c6c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 19 , 9 + 19 , 6 @ @ package io . realm ; <nl> import android . content . Context ; <nl> import android . os . Handler ; <nl> import android . os . Looper ; <nl> - import android . util . Log ; <nl> - <nl> - import com . getkeepsafe . relinker . BuildConfig ; <nl> <nl> import java . io . Closeable ; <nl> import java . io . File ; <nl> @ @ - 41 , 9 + 38 , 8 @ @ import io . realm . internal . Table ; <nl> import io . realm . internal . UncheckedRow ; <nl> import io . realm . internal . Util ; <nl> import io . realm . internal . async . RealmThreadPoolExecutor ; <nl> - import io . realm . log . AndroidLogger ; <nl> import io . realm . log . RealmLog ; <nl> - import io . realm . internal . objectserver . ObjectServerFacade ; <nl> + import io . realm . internal . ObjectServerFacade ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 77 , 6 + 73 , 7 @ @ public abstract class BaseRealm implements Closeable { <nl> RealmSchema schema ; <nl> HandlerController handlerController ; <nl> <nl> + <nl> protected BaseRealm ( RealmConfiguration configuration ) { <nl> this . threadId = Thread . currentThread ( ) . getId ( ) ; <nl> this . configuration = configuration ; <nl> @ @ - 350 , 7 + 347 , 8 @ @ public abstract class BaseRealm implements Closeable { <nl> void commitTransaction ( boolean notifyLocalThread ) { <nl> checkIfValid ( ) ; <nl> sharedRealm . commitTransaction ( ) ; <nl> - ObjectServerFacade . notifyCommit ( configuration , sharedRealm . getLastSnapshotVersion ( ) ) ; <nl> + ObjectServerFacade . getFacade ( configuration . isSyncConfiguration ( ) ) <nl> + . notifyCommit ( configuration , sharedRealm . getLastSnapshotVersion ( ) ) ; <nl> <nl> / / Sometimes we don ' t want to notify the local thread about commits , e . g . creating a completely new Realm <nl> / / file will make a commit in order to create the schema . Users should not be notified about that . <nl> @ @ - 402 , 6 + 400 , 16 @ @ public abstract class BaseRealm implements Closeable { <nl> } <nl> <nl> / * * <nl> + * Check if the Realm is not built with a SyncRealmConfiguration <nl> + * / <nl> + void checkNotInSync ( ) { <nl> + if ( configuration . isSyncConfiguration ( ) ) { <nl> + throw new IllegalArgumentException ( " You cannot perform changes to a schema . " + <nl> + " Please update app and restart . " ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the canonical path to where this Realm is persisted on disk . <nl> * <nl> * @ return the canonical path to the Realm file . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 1e49eba . . 5c7cbeb 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 58 , 7 + 58 , 6 @ @ import io . realm . internal . RealmProxyMediator ; <nl> import io . realm . internal . Table ; <nl> import io . realm . log . AndroidLogger ; <nl> import io . realm . log . RealmLog ; <nl> - import io . realm . internal . objectserver . ObjectServerFacade ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 314 , 7 + 313 , 7 @ @ public final class Realm extends BaseRealm { <nl> private static void initializeRealm ( Realm realm ) { <nl> long version = realm . getVersion ( ) ; <nl> boolean commitNeeded = false ; <nl> - boolean syncAvailable = ObjectServerFacade . SYNC _ AVAILABLE & & realm . configuration instanceof SyncConfiguration ; <nl> + boolean syncAvailable = realm . configuration . isSyncConfiguration ( ) ; <nl> <nl> try { <nl> if ( ! syncAvailable ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> index fb60662 . . 002b09f 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import java . util . Map ; <nl> import io . realm . exceptions . RealmFileException ; <nl> import io . realm . internal . ColumnIndices ; <nl> import io . realm . log . RealmLog ; <nl> - import io . realm . internal . objectserver . ObjectServerFacade ; <nl> + import io . realm . internal . ObjectServerFacade ; <nl> <nl> / * * <nl> * To cache { @ link Realm } , { @ link DynamicRealm } instances and related resources . <nl> @ @ - 159 , 7 + 159 , 7 @ @ final class RealmCache { <nl> <nl> / / Notify SyncPolicy that the Realm has been opened for the first time <nl> if ( refAndCount . globalCount = = 1 ) { <nl> - ObjectServerFacade . realmOpened ( configuration ) ; <nl> + ObjectServerFacade . getFacade ( configuration . isSyncConfiguration ( ) ) . realmOpened ( configuration ) ; <nl> } <nl> return realm ; <nl> } <nl> @ @ - 223 , 7 + 223 , 8 @ @ final class RealmCache { <nl> / / No more instance of typed Realm and dynamic Realm . Remove the configuration from cache . <nl> if ( totalRefCount = = 0 ) { <nl> cachesMap . remove ( canonicalPath ) ; <nl> - ObjectServerFacade . realmClosed ( realm . getConfiguration ( ) ) ; <nl> + ObjectServerFacade . getFacade ( realm . getConfiguration ( ) . isSyncConfiguration ( ) ) <nl> + . realmClosed ( realm . getConfiguration ( ) ) ; <nl> } <nl> <nl> } else { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 28c6745 . . 06775f7 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 360 , 6 + 360 , 11 @ @ public class RealmConfiguration { <nl> } <nl> } <nl> <nl> + / / Check if this configuration is a SyncConfiguration instance . <nl> + boolean isSyncConfiguration ( ) { <nl> + return false ; <nl> + } <nl> + <nl> / * * <nl> * RealmConfiguration . Builder used to construct instances of a RealmConfiguration in a fluent manner . <nl> * / <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java <nl> index 7191912 . . 8c7e6b0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import java . util . Set ; <nl> import io . realm . annotations . Required ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableOrView ; <nl> - import io . realm . internal . objectserver . ObjectServerFacade ; <nl> <nl> / * * <nl> * Class for interacting with the schema for a given RealmObject class . This makes it possible to <nl> @ @ - 152 , 7 + 151 , 7 @ @ public final class RealmObjectSchema { <nl> * @ see RealmSchema # rename ( String , String ) <nl> * / <nl> public RealmObjectSchema setClassName ( String className ) { <nl> - checkNotInSync ( ) ; / / renaming a table is not permitted <nl> + realm . checkNotInSync ( ) ; / / renaming a table is not permitted <nl> checkEmpty ( className ) ; <nl> String internalTableName = Table . TABLE _ PREFIX + className ; <nl> / / FIXME : when core implements class name length check , please remove . <nl> @ @ - 292 , 7 + 291 , 7 @ @ public final class RealmObjectSchema { <nl> * @ throws IllegalArgumentException if field name doesn ' t exist . <nl> * / <nl> public RealmObjectSchema removeField ( String fieldName ) { <nl> - checkNotInSync ( ) ; / / destructive modification of a schema is not permitted <nl> + realm . checkNotInSync ( ) ; / / destructive modification of a schema is not permitted <nl> checkLegalName ( fieldName ) ; <nl> if ( ! hasField ( fieldName ) ) { <nl> throw new IllegalStateException ( fieldName + " does not exist . " ) ; <nl> @ @ - 314 , 7 + 313 , 7 @ @ public final class RealmObjectSchema { <nl> * @ throws IllegalArgumentException if field name doesn ' t exist or if the new field name already exists . <nl> * / <nl> public RealmObjectSchema renameField ( String currentFieldName , String newFieldName ) { <nl> - checkNotInSync ( ) ; / / destructive modification of a schema is not permitted <nl> + realm . checkNotInSync ( ) ; / / destructive modification of a schema is not permitted <nl> checkLegalName ( currentFieldName ) ; <nl> checkFieldExists ( currentFieldName ) ; <nl> checkLegalName ( newFieldName ) ; <nl> @ @ - 380 , 7 + 379 , 7 @ @ public final class RealmObjectSchema { <nl> * @ throws IllegalArgumentException if field name doesn ' t exist or the field doesn ' t have an index . <nl> * / <nl> public RealmObjectSchema removeIndex ( String fieldName ) { <nl> - checkNotInSync ( ) ; / / destructive modifications are not permitted <nl> + realm . checkNotInSync ( ) ; / / destructive modifications are not permitted <nl> checkLegalName ( fieldName ) ; <nl> checkFieldExists ( fieldName ) ; <nl> long columnIndex = getColumnIndex ( fieldName ) ; <nl> @ @ - 423 , 7 + 422 , 7 @ @ public final class RealmObjectSchema { <nl> * @ throws IllegalArgumentException if the class doesn ' t have a primary key defined . <nl> * / <nl> public RealmObjectSchema removePrimaryKey ( ) { <nl> - checkNotInSync ( ) ; / / destructive modifications are not permitted <nl> + realm . checkNotInSync ( ) ; / / destructive modifications are not permitted <nl> if ( ! table . hasPrimaryKey ( ) ) { <nl> throw new IllegalStateException ( getClassName ( ) + " doesn ' t have a primary key . " ) ; <nl> } <nl> @ @ - 662 , 13 + 661 , 6 @ @ public final class RealmObjectSchema { <nl> } <nl> } <nl> <nl> - private void checkNotInSync ( ) { <nl> - / / FIXME : similar method found in RealmSchema . <nl> - if ( ObjectServerFacade . SYNC _ AVAILABLE & & realm . configuration instanceof SyncConfiguration ) { <nl> - throw new IllegalArgumentException ( " You cannot perform changes to a schema . Please update app and restart . " ) ; <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Returns the column indices for the given field name . If a linked field is defined , the column index for <nl> * each field is returned . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmSchema . java b / realm / realm - library / src / main / java / io / realm / RealmSchema . java <nl> index 3aa0f83 . . 99264bf 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmSchema . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmSchema . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import io . realm . internal . ColumnIndices ; <nl> import io . realm . internal . ColumnInfo ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . Util ; <nl> - import io . realm . internal . objectserver . ObjectServerFacade ; <nl> <nl> / * * <nl> * Class for interacting with the Realm schema using a dynamic API . This makes it possible <nl> @ @ - 188 , 7 + 187 , 7 @ @ public final class RealmSchema { <nl> * @ param className name of the class to remove . <nl> * / <nl> public void remove ( String className ) { <nl> - checkNotInSync ( ) ; / / destructive modifications are not permitted <nl> + realm . checkNotInSync ( ) ; / / destructive modifications are not permitted <nl> checkEmpty ( className , EMPTY _ STRING _ MSG ) ; <nl> String internalTableName = TABLE _ PREFIX + className ; <nl> checkHasTable ( className , " Cannot remove class because it is not in this Realm : " + className ) ; <nl> @ @ - 207 , 7 + 206 , 7 @ @ public final class RealmSchema { <nl> * @ return a schema object for renamed class . <nl> * / <nl> public RealmObjectSchema rename ( String oldClassName , String newClassName ) { <nl> - checkNotInSync ( ) ; / / destructive modifications are not permitted <nl> + realm . checkNotInSync ( ) ; / / destructive modifications are not permitted <nl> checkEmpty ( oldClassName , " Class names cannot be empty or null " ) ; <nl> checkEmpty ( newClassName , " Class names cannot be empty or null " ) ; <nl> String oldInternalName = TABLE _ PREFIX + oldClassName ; <nl> @ @ - 251 , 11 + 250 , 6 @ @ public final class RealmSchema { <nl> } <nl> } <nl> <nl> - private void checkNotInSync ( ) { <nl> - if ( ObjectServerFacade . SYNC _ AVAILABLE & & realm . configuration instanceof SyncConfiguration ) { <nl> - throw new IllegalArgumentException ( " You cannot perform changes to a schema . Please update app and restart . " ) ; <nl> - } <nl> - } <nl> private void checkEmpty ( String str , String error ) { <nl> if ( str = = null | | str . isEmpty ( ) ) { <nl> throw new IllegalArgumentException ( error ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> index d97ed95 . . 80698a5 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> @ @ - 208 , 6 + 208 , 11 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> return deleteRealmOnLogout ; <nl> } <nl> <nl> + @ Override <nl> + boolean isSyncConfiguration ( ) { <nl> + return true ; <nl> + } <nl> + <nl> / * * <nl> * Builder used to construct instances of a SyncConfiguration in a fluent manner . <nl> * / <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java <nl> new file mode 100644 <nl> index 0000000 . . 331ea7d <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java <nl> @ @ - 0 , 0 + 1 , 58 @ @ <nl> + package io . realm . internal ; <nl> + <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . exceptions . RealmException ; <nl> + <nl> + / * * <nl> + * Class acting as an mediator between the basic Realm APIs and the Object Server APIs . <nl> + * This breaks the cyclic dependency between ObjectServer and Realm code . <nl> + * / <nl> + public class ObjectServerFacade { <nl> + <nl> + private final static ObjectServerFacade nonSyncFacade = new ObjectServerFacade ( ) ; <nl> + private static ObjectServerFacade syncFacade = null ; <nl> + <nl> + static { <nl> + / / noinspection TryWithIdenticalCatches <nl> + try { <nl> + Class syncFacadeClass = Class . forName ( " io . realm . internal . objectserver . SyncObjectServerFacade " ) ; <nl> + syncFacade = ( ObjectServerFacade ) syncFacadeClass . newInstance ( ) ; <nl> + } catch ( ClassNotFoundException ignored ) { <nl> + } catch ( InstantiationException e ) { <nl> + throw new RealmException ( " Failed to init SyncObjectServerFacade " , e ) ; <nl> + } catch ( IllegalAccessException e ) { <nl> + throw new RealmException ( " Failed to init SyncObjectServerFacade " , e ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Notify the session for this configuration that a local commit was made . <nl> + * / <nl> + public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { <nl> + } <nl> + <nl> + public void realmClosed ( RealmConfiguration configuration ) { <nl> + } <nl> + <nl> + public void realmOpened ( RealmConfiguration configuration ) { <nl> + } <nl> + <nl> + public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { <nl> + return new String [ 2 ] ; <nl> + } <nl> + <nl> + public static ObjectServerFacade getFacade ( boolean needSyncFacade ) { <nl> + if ( needSyncFacade ) { <nl> + return syncFacade ; <nl> + } <nl> + return nonSyncFacade ; <nl> + } <nl> + <nl> + / / Returns a SyncObjectServerFacade instance if the class exists . Otherwise returns a non - sync one . <nl> + static ObjectServerFacade getSyncFacadeIfPossible ( ) { <nl> + if ( syncFacade ! = null ) { <nl> + return syncFacade ; <nl> + } <nl> + return nonSyncFacade ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index eca1c49 . . 347807c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ import java . io . File ; <nl> import io . realm . RealmConfiguration ; <nl> import io . realm . RealmSchema ; <nl> import io . realm . internal . async . BadVersionException ; <nl> - import io . realm . internal . objectserver . ObjectServerFacade ; <nl> <nl> public final class SharedRealm implements Closeable { <nl> <nl> @ @ - 76 , 6 + 75 , 7 @ @ public final class SharedRealm implements Closeable { <nl> <nl> / / JNI will only hold a weak global ref to this . <nl> public final RealmNotifier realmNotifier ; <nl> + public final ObjectServerFacade objectServerFacade ; <nl> <nl> public static class VersionID implements Comparable < VersionID > { <nl> public final long version ; <nl> @ @ - 148 , 6 + 148 , 7 @ @ public final class SharedRealm implements Closeable { <nl> this . schemaChangeListener = schemaVersionListener ; <nl> context = new Context ( ) ; <nl> this . lastSchemaVersion = schemaVersionListener = = null ? - 1L : getSchemaVersion ( ) ; <nl> + objectServerFacade = null ; <nl> } <nl> <nl> public static SharedRealm getInstance ( RealmConfiguration config ) { <nl> @ @ - 156 , 7 + 157 , 7 @ @ public final class SharedRealm implements Closeable { <nl> <nl> public static SharedRealm getInstance ( RealmConfiguration config , RealmNotifier realmNotifier , <nl> SchemaVersionListener schemaVersionListener ) { <nl> - String [ ] userAndServer = ObjectServerFacade . getUserAndServerUrl ( config ) ; <nl> + String [ ] userAndServer = ObjectServerFacade . getSyncFacadeIfPossible ( ) . getUserAndServerUrl ( config ) ; <nl> String rosServerUrl = userAndServer [ 0 ] ; <nl> String rosUserToken = userAndServer [ 1 ] ; <nl> boolean enable _ caching = false ; / / Handled in Java currently <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / ObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / ObjectServerFacade . java <nl> deleted file mode 100644 <nl> index bcac711 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / objectserver / ObjectServerFacade . java <nl> + + + / dev / null <nl> @ @ - 1 , 65 + 0 , 0 @ @ <nl> - package io . realm . internal . objectserver ; <nl> - <nl> - import io . realm . RealmConfiguration ; <nl> - import io . realm . Session ; <nl> - import io . realm . SyncConfiguration ; <nl> - import io . realm . SyncManager ; <nl> - <nl> - / * * <nl> - * Class acting as an mediator between the basic Realm APIs and the Object Server APIs . <nl> - * This breaks the cyclic dependency between ObjectServer and Realm code . <nl> - * <nl> - * TODO Move this class into a ` common ` module that both realm - library and objectserver - library depends on . <nl> - * / <nl> - public class ObjectServerFacade { <nl> - <nl> - public static final boolean SYNC _ AVAILABLE ; <nl> - <nl> - static { <nl> - boolean syncAvailable ; <nl> - try { <nl> - Class . forName ( " io . realm . SyncManager " ) ; <nl> - syncAvailable = true ; <nl> - } catch ( ClassNotFoundException e ) { <nl> - syncAvailable = false ; <nl> - } <nl> - SYNC _ AVAILABLE = syncAvailable ; <nl> - } <nl> - / * * <nl> - * Notify the session for this configuration that a local commit was made . <nl> - * / <nl> - public static void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { <nl> - if ( SYNC _ AVAILABLE & & configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . notifyCommit ( lastSnapshotVersion ) ; <nl> - } <nl> - } <nl> - <nl> - public static void realmClosed ( RealmConfiguration configuration ) { <nl> - if ( SYNC _ AVAILABLE & & configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . getSyncPolicy ( ) . onRealmClosed ( session ) ; <nl> - } <nl> - } <nl> - <nl> - public static void realmOpened ( RealmConfiguration configuration ) { <nl> - if ( SYNC _ AVAILABLE & & configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . getSyncPolicy ( ) . onRealmOpened ( session ) ; <nl> - } <nl> - } <nl> - <nl> - public static String [ ] getUserAndServerUrl ( RealmConfiguration config ) { <nl> - if ( SYNC _ AVAILABLE & & config instanceof SyncConfiguration ) { <nl> - SyncConfiguration syncConfig = ( SyncConfiguration ) config ; <nl> - String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; <nl> - String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; <nl> - return new String [ ] { rosServerUrl , rosUserToken } ; <nl> - } else { <nl> - return new String [ 2 ] ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java <nl> new file mode 100644 <nl> index 0000000 . . 5740a20 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java <nl> @ @ - 0 , 0 + 1 , 60 @ @ <nl> + package io . realm . internal . objectserver ; <nl> + <nl> + <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . Session ; <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncManager ; <nl> + import io . realm . internal . ObjectServerFacade ; <nl> + <nl> + @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade <nl> + public class SyncObjectServerFacade extends ObjectServerFacade { <nl> + <nl> + private static final String WRONG _ TYPE _ OF _ CONFIGURATION = <nl> + " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; <nl> + <nl> + @ Override <nl> + public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . notifyCommit ( lastSnapshotVersion ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void realmClosed ( RealmConfiguration configuration ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . getSyncPolicy ( ) . onRealmClosed ( session ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void realmOpened ( RealmConfiguration configuration ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . getSyncPolicy ( ) . onRealmOpened ( session ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { <nl> + if ( config instanceof SyncConfiguration ) { <nl> + SyncConfiguration syncConfig = ( SyncConfiguration ) config ; <nl> + String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; <nl> + String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; <nl> + return new String [ ] { rosServerUrl , rosUserToken } ; <nl> + } else { <nl> + return new String [ 2 ] ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / log / RealmLog . java b / realm / realm - library / src / main / java / io / realm / log / RealmLog . java <nl> index 3693c3d . . 6389196 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / log / RealmLog . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / log / RealmLog . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ import java . util . List ; <nl> import io . realm . internal . Keep ; <nl> import io . realm . internal . Util ; <nl> import io . realm . SyncManager ; <nl> - import io . realm . internal . objectserver . ObjectServerFacade ; <nl> + import io . realm . internal . ObjectServerFacade ; <nl> <nl> / * * <nl> * Global logger used by all Realm components . <nl> @ @ - 59 , 10 + 59 , 8 @ @ public final class RealmLog { <nl> <nl> private static void setMinimumNativeDebugLevel ( int nativeDebugLevel ) { <nl> minimumNativeLogLevel = nativeDebugLevel ; <nl> + / / FIXME : Use same log level setting for normal Realm and Sync Realm . <nl> Util . setDebugLevel ( nativeDebugLevel ) ; / / Log level for Realm Core <nl> - if ( ObjectServerFacade . SYNC _ AVAILABLE ) { <nl> - SyncManager . setLogLevel ( nativeDebugLevel ) ; <nl> - } <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / realm / realm - jni / src / io _ realm _ internal _ LinkView . cpp b / realm / realm - jni / src / io _ realm _ internal _ LinkView . cpp <nl> index cc9aa38 . . 82776f3 100644 <nl> - - - a / realm / realm - jni / src / io _ realm _ internal _ LinkView . cpp <nl> + + + b / realm / realm - jni / src / io _ realm _ internal _ LinkView . cpp <nl> @ @ - 193 , 11 + 193 , 24 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeFind <nl> } <nl> <nl> JNIEXPORT void JNICALL Java _ io _ realm _ internal _ LinkView _ nativeRemoveAllTargetRows <nl> - ( JNIEnv * env , jobject , jlong nativeLinkViewPtr ) { <nl> + ( JNIEnv * env , jobject , jlong nativeLinkViewPtr ) <nl> + { <nl> TR _ ENTER _ PTR ( nativeLinkViewPtr ) <nl> try { <nl> LinkView * lv = LV ( nativeLinkViewPtr ) ; <nl> lv - > remove _ all _ target _ rows ( ) ; <nl> } CATCH _ STD ( ) <nl> - } <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeGetTargetTable <nl> + ( JNIEnv * , jobject , jlong nativeLinkViewPtr ) <nl> + { <nl> + TR _ ENTER _ PTR ( nativeLinkViewPtr ) <nl> + <nl> + LinkView * lv = LV ( nativeLinkViewPtr ) ; <nl> + Table * pTable = & ( lv - > get _ target _ table ( ) ) ; <nl> + LangBindHelper : : bind _ table _ ptr ( pTable ) ; <nl> + <nl> + return reinterpret _ cast < jlong > ( pTable ) ; <nl> + } <nl> <nl> diff - - git a / realm / realm - jni / src / io _ realm _ internal _ LinkView . h b / realm / realm - jni / src / io _ realm _ internal _ LinkView . h <nl> index 9be9eae . . 173fa01 100644 <nl> - - - a / realm / realm - jni / src / io _ realm _ internal _ LinkView . h <nl> + + + b / realm / realm - jni / src / io _ realm _ internal _ LinkView . h <nl> @ @ - 127 , 6 + 127 , 14 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeFind <nl> JNIEXPORT void JNICALL Java _ io _ realm _ internal _ LinkView _ nativeRemoveAllTargetRows <nl> ( JNIEnv * , jobject , jlong ) ; <nl> <nl> + / * <nl> + * Class : io _ realm _ internal _ LinkView <nl> + * Method : nativeGetTargetTable <nl> + * Signature : ( J ) J <nl> + * / <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeGetTargetTable <nl> + ( JNIEnv * , jobject , jlong ) ; <nl> + <nl> # ifdef _ _ cplusplus <nl> } <nl> # endif <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmListTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmListTests . java <nl> index 4eb0a98 . . f996d94 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmListTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmListTests . java <nl> @ @ - 27 , 12 + 27 , 14 @ @ import org . junit . runner . RunWith ; <nl> <nl> import java . util . Collections ; <nl> import java . util . concurrent . Callable ; <nl> + import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . Future ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> + import io . realm . entities . Cat ; <nl> import io . realm . entities . CyclicType ; <nl> import io . realm . entities . CyclicTypePrimaryKey ; <nl> import io . realm . entities . Dog ; <nl> @ @ - 103 , 6 + 105 , 7 @ @ public class RealmListTests { <nl> private void checkMethodsOnEmptyList ( Realm realm , RealmList < Dog > list ) { <nl> realm . beginTransaction ( ) ; <nl> for ( int i = 0 ; i < 4 ; i + + ) { <nl> + / / noinspection TryWithIdenticalCatches <nl> try { <nl> switch ( i ) { <nl> case 0 : list . get ( 0 ) ; break ; <nl> @ @ - 915 , 7 + 918 , 7 @ @ public class RealmListTests { <nl> } <nl> <nl> @ Test <nl> - public void testRemoveAllFromRealm ( ) { <nl> + public void removeAllFromRealm ( ) { <nl> Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; <nl> RealmList < Dog > dogs = owner . getDogs ( ) ; <nl> assertEquals ( TEST _ OBJECTS , dogs . size ( ) ) ; <nl> @ @ - 928 , 7 + 931 , 7 @ @ public class RealmListTests { <nl> } <nl> <nl> @ Test <nl> - public void testRealmRemoveAllNotManagedList ( ) { <nl> + public void removeAllFromRealm _ notManagedList ( ) { <nl> Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; <nl> RealmList < Dog > dogs = owner . getDogs ( ) ; <nl> assertEquals ( TEST _ OBJECTS , dogs . size ( ) ) ; <nl> @ @ - 947 , 7 + 950 , 7 @ @ public class RealmListTests { <nl> } <nl> <nl> @ Test <nl> - public void testRealmRemoveAllOutsideTransaction ( ) { <nl> + public void removeAllFromRealm _ outsideTransaction ( ) { <nl> Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; <nl> RealmList < Dog > dogs = owner . getDogs ( ) ; <nl> try { <nl> @ @ - 959 , 7 + 962 , 7 @ @ public class RealmListTests { <nl> } <nl> <nl> @ Test <nl> - public void testRemoveAllFromListStandaloneObjectShouldThrow ( ) { <nl> + public void removeAllFromRealm _ listWithStandaloneObjectShouldThrow ( ) { <nl> final RealmList < Dog > list = new RealmList < Dog > ( ) ; <nl> <nl> testRealm . beginTransaction ( ) ; <nl> @ @ - 986 , 7 + 989 , 7 @ @ public class RealmListTests { <nl> } <nl> <nl> @ Test <nl> - public void testRemoveAllFromRealmEmptyList ( ) { <nl> + public void removeAllFromRealm _ emptyList ( ) { <nl> RealmList < Dog > dogs = testRealm . where ( Owner . class ) . findFirst ( ) . getDogs ( ) ; <nl> assertEquals ( TEST _ OBJECTS , dogs . size ( ) ) ; <nl> <nl> @ @ - 1006 , 7 + 1009 , 7 @ @ public class RealmListTests { <nl> } <nl> <nl> @ Test <nl> - public void testRemoveAllFromRealmInvalidListShouldThrow ( ) { <nl> + public void removeAllFromRealm _ invalidListShouldThrow ( ) { <nl> RealmList < Dog > dogs = testRealm . where ( Owner . class ) . findFirst ( ) . getDogs ( ) ; <nl> assertEquals ( TEST _ OBJECTS , dogs . size ( ) ) ; <nl> testRealm . close ( ) ; <nl> @ @ - 1019 , 4 + 1022 , 166 @ @ public class RealmListTests { <nl> assertEquals ( " This Realm instance has already been closed , making it unusable . " , e . getMessage ( ) ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void add _ set _ objectFromOtherThread ( ) { <nl> + final CountDownLatch finishedLatch = new CountDownLatch ( 1 ) ; <nl> + final Dog dog = testRealm . where ( Dog . class ) . findFirst ( ) ; <nl> + final String expectedMsg = " Cannot copy an object from another Realm instance . " ; <nl> + <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm realm = Realm . getInstance ( testRealm . getConfiguration ( ) ) ; <nl> + realm . beginTransaction ( ) ; <nl> + RealmList < Dog > list = realm . createObject ( Owner . class ) . getDogs ( ) ; <nl> + list . add ( realm . createObject ( Dog . class ) ) ; <nl> + try { <nl> + list . add ( dog ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + } <nl> + <nl> + try { <nl> + list . add ( 0 , dog ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + } <nl> + <nl> + try { <nl> + list . set ( 0 , dog ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + } <nl> + <nl> + realm . cancelTransaction ( ) ; <nl> + realm . close ( ) ; <nl> + finishedLatch . countDown ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + TestHelper . awaitOrFail ( finishedLatch ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void add _ set _ dynamicObjectFromOtherThread ( ) { <nl> + final CountDownLatch finishedLatch = new CountDownLatch ( 1 ) ; <nl> + DynamicRealm dynamicRealm = DynamicRealm . getInstance ( testRealm . getConfiguration ( ) ) ; <nl> + final DynamicRealmObject dynDog = dynamicRealm . where ( Dog . CLASS _ NAME ) . findFirst ( ) ; <nl> + final String expectedMsg = " Cannot copy an object to a Realm instance created in another thread . " ; <nl> + <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + DynamicRealm dynamicRealm = DynamicRealm . getInstance ( testRealm . getConfiguration ( ) ) ; <nl> + dynamicRealm . beginTransaction ( ) ; <nl> + RealmList < DynamicRealmObject > list = dynamicRealm . createObject ( Owner . CLASS _ NAME ) <nl> + . getList ( Owner . FIELD _ DOGS ) ; <nl> + list . add ( dynamicRealm . createObject ( Dog . CLASS _ NAME ) ) ; <nl> + <nl> + try { <nl> + list . add ( dynDog ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalStateException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + } <nl> + <nl> + try { <nl> + list . add ( 0 , dynDog ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalStateException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + } <nl> + <nl> + try { <nl> + list . set ( 0 , dynDog ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalStateException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + } <nl> + <nl> + dynamicRealm . cancelTransaction ( ) ; <nl> + dynamicRealm . close ( ) ; <nl> + finishedLatch . countDown ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + TestHelper . awaitOrFail ( finishedLatch ) ; <nl> + dynamicRealm . close ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void add _ set _ withWrongDynamicObjectType ( ) { <nl> + final String expectedMsg = " The object has a different type from list ' s . Type of the list is ' Dog ' , " + <nl> + " type of object is ' Cat ' . " ; <nl> + DynamicRealm dynamicRealm = DynamicRealm . getInstance ( testRealm . getConfiguration ( ) ) ; <nl> + <nl> + dynamicRealm . beginTransaction ( ) ; <nl> + RealmList < DynamicRealmObject > list = dynamicRealm . createObject ( Owner . CLASS _ NAME ) <nl> + . getList ( Owner . FIELD _ DOGS ) ; <nl> + DynamicRealmObject dynCat = dynamicRealm . createObject ( Cat . CLASS _ NAME ) ; <nl> + <nl> + try { <nl> + list . add ( dynCat ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + <nl> + } <nl> + <nl> + try { <nl> + list . add ( 0 , dynCat ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + <nl> + } <nl> + <nl> + try { <nl> + list . set ( 0 , dynCat ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + <nl> + } <nl> + <nl> + dynamicRealm . cancelTransaction ( ) ; <nl> + dynamicRealm . close ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void add _ set _ dynamicObjectCreatedFromTypedRealm ( ) { <nl> + final String expectedMsg = " Cannot copy DynamicRealmObject between Realm instances . " ; <nl> + DynamicRealmObject dynDog = new DynamicRealmObject ( testRealm . where ( Dog . class ) . findFirst ( ) ) ; <nl> + DynamicRealm dynamicRealm = DynamicRealm . getInstance ( testRealm . getConfiguration ( ) ) ; <nl> + <nl> + dynamicRealm . beginTransaction ( ) ; <nl> + RealmList < DynamicRealmObject > list = dynamicRealm . createObject ( Owner . CLASS _ NAME ) <nl> + . getList ( Owner . FIELD _ DOGS ) ; <nl> + <nl> + try { <nl> + list . add ( dynDog ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + } <nl> + <nl> + try { <nl> + list . add ( 0 , dynDog ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + } <nl> + <nl> + try { <nl> + list . set ( 0 , dynDog ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; <nl> + } <nl> + <nl> + dynamicRealm . cancelTransaction ( ) ; <nl> + dynamicRealm . close ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index 56bb519 . . 286bcb7 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 2726 , 7 + 2726 , 7 @ @ public class RealmTests { <nl> DynamicRealm dynamicRealm = DynamicRealm . getInstance ( realm . getConfiguration ( ) ) ; <nl> dynamicRealm . beginTransaction ( ) ; <nl> RealmList < DynamicRealmObject > dynamicList = dynamicRealm . createObject ( AllTypes . CLASS _ NAME ) . getList ( AllTypes . FIELD _ REALMLIST ) ; <nl> - DynamicRealmObject dObj = dynamicRealm . createObject ( AllTypes . CLASS _ NAME ) ; <nl> + DynamicRealmObject dObj = dynamicRealm . createObject ( Dog . CLASS _ NAME ) ; <nl> dynamicList . add ( dObj ) ; <nl> dynamicRealm . commitTransaction ( ) ; <nl> try { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / entities / Owner . java b / realm / realm - library / src / androidTest / java / io / realm / entities / Owner . java <nl> index ca8a253 . . 605d5ae 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / entities / Owner . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / entities / Owner . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ import io . realm . RealmObject ; <nl> public class Owner extends RealmObject { <nl> <nl> public static String CLASS _ NAME = " Owner " ; <nl> + public static String FIELD _ NAME = " name " ; <nl> + public static String FIELD _ DOGS = " dogs " ; <nl> + public static String FIELD _ CAT = " cat " ; <nl> <nl> private String name ; <nl> private RealmList < Dog > dogs ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> index 2e173dc . . a506deb 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> @ @ - 269 , 7 + 269 , 7 @ @ public final class DynamicRealmObject extends RealmObject { <nl> public RealmList < DynamicRealmObject > getList ( String fieldName ) { <nl> long columnIndex = row . getColumnIndex ( fieldName ) ; <nl> LinkView linkView = row . getLinkList ( columnIndex ) ; <nl> - String className = linkView . getTable ( ) . getLinkTarget ( columnIndex ) . getName ( ) . substring ( Table . TABLE _ PREFIX . length ( ) ) ; <nl> + String className = RealmSchema . getSchemaForTable ( linkView . getTargetTable ( ) ) ; <nl> return new RealmList < DynamicRealmObject > ( className , linkView , realm ) ; <nl> } <nl> <nl> @ @ - 588 , 7 + 588 , 7 @ @ public final class DynamicRealmObject extends RealmObject { <nl> long columnIndex = row . getColumnIndex ( fieldName ) ; <nl> LinkView links = row . getLinkList ( columnIndex ) ; <nl> links . clear ( ) ; <nl> - Table linkTargetTable = links . getTable ( ) . getLinkTarget ( columnIndex ) ; <nl> + Table linkTargetTable = links . getTargetTable ( ) ; <nl> for ( int i = 0 ; i < list . size ( ) ; i + + ) { <nl> RealmObject obj = list . get ( i ) ; <nl> if ( obj . realm ! = realm ) { <nl> @ @ - 626 , 7 + 626 , 7 @ @ public final class DynamicRealmObject extends RealmObject { <nl> * @ return this objects type . <nl> * / <nl> public String getType ( ) { <nl> - return row . getTable ( ) . getName ( ) . substring ( Table . TABLE _ PREFIX . length ( ) ) ; <nl> + return RealmSchema . getSchemaForTable ( row . getTable ( ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmList . java b / realm / realm - library / src / main / java / io / realm / RealmList . java <nl> index 90b5c71 . . a60b2fa 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmList . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . util . List ; <nl> import io . realm . exceptions . RealmException ; <nl> import io . realm . internal . InvalidRow ; <nl> import io . realm . internal . LinkView ; <nl> + import io . realm . internal . Table ; <nl> <nl> / * * <nl> * RealmList is used to model one - to - many relationships in a { @ link io . realm . RealmObject } . <nl> @ @ - 218 , 15 + 219 , 34 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> <nl> / / Transparently copies a standalone object or managed object from another Realm to the Realm backing this RealmList . <nl> private E copyToRealmIfNeeded ( E object ) { <nl> - / / Object is already in this realm <nl> - if ( object . row ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { <nl> - return object ; <nl> - } <nl> - <nl> - / / We don ' t support moving DynamicRealmObjects across Realms automatically . The overhead is too big as you <nl> - / / have to run a full schema validation for each object . <nl> if ( object instanceof DynamicRealmObject ) { <nl> - throw new IllegalArgumentException ( " Automatically copying DynamicRealmObjects from other Realms are not supported " ) ; <nl> + String listClassName = RealmSchema . getSchemaForTable ( view . getTargetTable ( ) ) ; <nl> + String objectClassName = ( ( DynamicRealmObject ) object ) . getType ( ) ; <nl> + if ( object . realm = = realm ) { <nl> + if ( listClassName . equals ( objectClassName ) ) { <nl> + / / Same Realm instance and same target table <nl> + return object ; <nl> + } else { <nl> + / / Different target table <nl> + throw new IllegalArgumentException ( String . format ( " The object has a different type from list ' s . " + <nl> + " Type of the list is ' % s ' , type of object is ' % s ' . " , listClassName , objectClassName ) ) ; <nl> + } <nl> + } else if ( realm . threadId = = object . realm . threadId ) { <nl> + / / We don ' t support moving DynamicRealmObjects across Realms automatically . The overhead is too big as <nl> + / / you have to run a full schema validation for each object . <nl> + / / And copying from another Realm instance pointed to the same Realm file is not supported as well . <nl> + throw new IllegalArgumentException ( " Cannot copy DynamicRealmObject between Realm instances . " ) ; <nl> + } else { <nl> + throw new IllegalStateException ( " Cannot copy an object to a Realm instance created in another thread . " ) ; <nl> + } <nl> + } else { <nl> + / / Object is already in this realm <nl> + if ( object . row ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { <nl> + if ( realm ! = object . realm ) { <nl> + throw new IllegalArgumentException ( " Cannot copy an object from another Realm instance . " ) ; <nl> + } <nl> + return object ; <nl> + } <nl> } <nl> <nl> / / At this point the object can only be a typed object , so the backing Realm cannot be a DynamicRealm . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmSchema . java b / realm / realm - library / src / main / java / io / realm / RealmSchema . java <nl> index 0f83fd0 . . 2957d64 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmSchema . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmSchema . java <nl> @ @ - 238 , 4 + 238 , 8 @ @ public final class RealmSchema { <nl> void setColumnIndices ( ColumnIndices columnIndices ) { <nl> this . columnIndices = columnIndices ; <nl> } <nl> + <nl> + static String getSchemaForTable ( Table table ) { <nl> + return table . getName ( ) . substring ( Table . TABLE _ PREFIX . length ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java b / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java <nl> index e01d9be . . ae0b460 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class CheckedRow extends UncheckedRow { <nl> * / <nl> public static CheckedRow get ( Context context , LinkView linkView , long index ) { <nl> long nativeRowPointer = linkView . nativeGetRow ( linkView . nativePointer , index ) ; <nl> - CheckedRow row = new CheckedRow ( context , linkView . parent . getLinkTarget ( linkView . columnIndexInParent ) , <nl> + CheckedRow row = new CheckedRow ( context , linkView . getTargetTable ( ) , <nl> nativeRowPointer ) ; <nl> context . rowReferences . put ( new UncheckedRowNativeObjectReference ( row , context . referenceQueue ) , <nl> Context . NATIVE _ REFERENCES _ VALUE ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / LinkView . java b / realm / realm - library / src / main / java / io / realm / internal / LinkView . java <nl> index a0f2eef . . 98887cd 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / LinkView . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / LinkView . java <nl> @ @ - 153 , 6 + 153 , 19 @ @ public class LinkView extends NativeObject { <nl> nativeRemoveAllTargetRows ( nativePointer ) ; <nl> } <nl> <nl> + public Table getTargetTable ( ) { <nl> + / / Execute the disposal of abandoned realm objects each time a new realm object is created <nl> + context . executeDelayedDisposal ( ) ; <nl> + long nativeTablePointer = nativeGetTargetTable ( nativePointer ) ; <nl> + try { <nl> + / / Copy context reference from parent <nl> + return new Table ( context , this . parent , nativeTablePointer ) ; <nl> + } catch ( RuntimeException e ) { <nl> + Table . nativeClose ( nativeTablePointer ) ; <nl> + throw e ; <nl> + } <nl> + } <nl> + <nl> private void checkImmutable ( ) { <nl> if ( parent . isImmutable ( ) ) { <nl> throw new IllegalStateException ( " Changing Realm data can only be done from inside a transaction . " ) ; <nl> @ @ - 174 , 4 + 187 , 5 @ @ public class LinkView extends NativeObject { <nl> private native boolean nativeIsAttached ( long nativeLinkViewPtr ) ; <nl> private native long nativeFind ( long nativeLinkViewPtr , long targetRowIndex ) ; <nl> private native void nativeRemoveAllTargetRows ( long nativeLinkViewPtr ) ; <nl> + private native long nativeGetTargetTable ( long nativeLinkViewPtr ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java b / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java <nl> index 7522228 . . 3f591b2 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java <nl> @ @ - 96 , 7 + 96 , 7 @ @ public class UncheckedRow extends NativeObject implements Row { <nl> * / <nl> public static UncheckedRow getByRowIndex ( Context context , LinkView linkView , long index ) { <nl> long nativeRowPointer = linkView . nativeGetRow ( linkView . nativePointer , index ) ; <nl> - UncheckedRow row = new UncheckedRow ( context , linkView . parent . getLinkTarget ( linkView . columnIndexInParent ) , <nl> + UncheckedRow row = new UncheckedRow ( context , linkView . getTargetTable ( ) , <nl> nativeRowPointer ) ; <nl> context . rowReferences . put ( new UncheckedRowNativeObjectReference ( row , context . referenceQueue ) , <nl> Context . NATIVE _ REFERENCES _ VALUE ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 388801d . . 2836c6c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 19 , 9 + 19 , 6 @ @ package io . realm ; 
 import android . content . Context ; 
 import android . os . Handler ; 
 import android . os . Looper ; 
 - import android . util . Log ; 
 - 
 - import com . getkeepsafe . relinker . BuildConfig ; 
 
 import java . io . Closeable ; 
 import java . io . File ; 
 @ @ - 41 , 9 + 38 , 8 @ @ import io . realm . internal . Table ; 
 import io . realm . internal . UncheckedRow ; 
 import io . realm . internal . Util ; 
 import io . realm . internal . async . RealmThreadPoolExecutor ; 
 - import io . realm . log . AndroidLogger ; 
 import io . realm . log . RealmLog ; 
 - import io . realm . internal . objectserver . ObjectServerFacade ; 
 + import io . realm . internal . ObjectServerFacade ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 77 , 6 + 73 , 7 @ @ public abstract class BaseRealm implements Closeable { 
 RealmSchema schema ; 
 HandlerController handlerController ; 
 
 + 
 protected BaseRealm ( RealmConfiguration configuration ) { 
 this . threadId = Thread . currentThread ( ) . getId ( ) ; 
 this . configuration = configuration ; 
 @ @ - 350 , 7 + 347 , 8 @ @ public abstract class BaseRealm implements Closeable { 
 void commitTransaction ( boolean notifyLocalThread ) { 
 checkIfValid ( ) ; 
 sharedRealm . commitTransaction ( ) ; 
 - ObjectServerFacade . notifyCommit ( configuration , sharedRealm . getLastSnapshotVersion ( ) ) ; 
 + ObjectServerFacade . getFacade ( configuration . isSyncConfiguration ( ) ) 
 + . notifyCommit ( configuration , sharedRealm . getLastSnapshotVersion ( ) ) ; 
 
 / / Sometimes we don ' t want to notify the local thread about commits , e . g . creating a completely new Realm 
 / / file will make a commit in order to create the schema . Users should not be notified about that . 
 @ @ - 402 , 6 + 400 , 16 @ @ public abstract class BaseRealm implements Closeable { 
 } 
 
 / * * 
 + * Check if the Realm is not built with a SyncRealmConfiguration 
 + * / 
 + void checkNotInSync ( ) { 
 + if ( configuration . isSyncConfiguration ( ) ) { 
 + throw new IllegalArgumentException ( " You cannot perform changes to a schema . " + 
 + " Please update app and restart . " ) ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the canonical path to where this Realm is persisted on disk . 
 * 
 * @ return the canonical path to the Realm file . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 1e49eba . . 5c7cbeb 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 58 , 7 + 58 , 6 @ @ import io . realm . internal . RealmProxyMediator ; 
 import io . realm . internal . Table ; 
 import io . realm . log . AndroidLogger ; 
 import io . realm . log . RealmLog ; 
 - import io . realm . internal . objectserver . ObjectServerFacade ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 314 , 7 + 313 , 7 @ @ public final class Realm extends BaseRealm { 
 private static void initializeRealm ( Realm realm ) { 
 long version = realm . getVersion ( ) ; 
 boolean commitNeeded = false ; 
 - boolean syncAvailable = ObjectServerFacade . SYNC _ AVAILABLE & & realm . configuration instanceof SyncConfiguration ; 
 + boolean syncAvailable = realm . configuration . isSyncConfiguration ( ) ; 
 
 try { 
 if ( ! syncAvailable ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 index fb60662 . . 002b09f 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import java . util . Map ; 
 import io . realm . exceptions . RealmFileException ; 
 import io . realm . internal . ColumnIndices ; 
 import io . realm . log . RealmLog ; 
 - import io . realm . internal . objectserver . ObjectServerFacade ; 
 + import io . realm . internal . ObjectServerFacade ; 
 
 / * * 
 * To cache { @ link Realm } , { @ link DynamicRealm } instances and related resources . 
 @ @ - 159 , 7 + 159 , 7 @ @ final class RealmCache { 
 
 / / Notify SyncPolicy that the Realm has been opened for the first time 
 if ( refAndCount . globalCount = = 1 ) { 
 - ObjectServerFacade . realmOpened ( configuration ) ; 
 + ObjectServerFacade . getFacade ( configuration . isSyncConfiguration ( ) ) . realmOpened ( configuration ) ; 
 } 
 return realm ; 
 } 
 @ @ - 223 , 7 + 223 , 8 @ @ final class RealmCache { 
 / / No more instance of typed Realm and dynamic Realm . Remove the configuration from cache . 
 if ( totalRefCount = = 0 ) { 
 cachesMap . remove ( canonicalPath ) ; 
 - ObjectServerFacade . realmClosed ( realm . getConfiguration ( ) ) ; 
 + ObjectServerFacade . getFacade ( realm . getConfiguration ( ) . isSyncConfiguration ( ) ) 
 + . realmClosed ( realm . getConfiguration ( ) ) ; 
 } 
 
 } else { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 28c6745 . . 06775f7 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 360 , 6 + 360 , 11 @ @ public class RealmConfiguration { 
 } 
 } 
 
 + / / Check if this configuration is a SyncConfiguration instance . 
 + boolean isSyncConfiguration ( ) { 
 + return false ; 
 + } 
 + 
 / * * 
 * RealmConfiguration . Builder used to construct instances of a RealmConfiguration in a fluent manner . 
 * / 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java 
 index 7191912 . . 8c7e6b0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import java . util . Set ; 
 import io . realm . annotations . Required ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableOrView ; 
 - import io . realm . internal . objectserver . ObjectServerFacade ; 
 
 / * * 
 * Class for interacting with the schema for a given RealmObject class . This makes it possible to 
 @ @ - 152 , 7 + 151 , 7 @ @ public final class RealmObjectSchema { 
 * @ see RealmSchema # rename ( String , String ) 
 * / 
 public RealmObjectSchema setClassName ( String className ) { 
 - checkNotInSync ( ) ; / / renaming a table is not permitted 
 + realm . checkNotInSync ( ) ; / / renaming a table is not permitted 
 checkEmpty ( className ) ; 
 String internalTableName = Table . TABLE _ PREFIX + className ; 
 / / FIXME : when core implements class name length check , please remove . 
 @ @ - 292 , 7 + 291 , 7 @ @ public final class RealmObjectSchema { 
 * @ throws IllegalArgumentException if field name doesn ' t exist . 
 * / 
 public RealmObjectSchema removeField ( String fieldName ) { 
 - checkNotInSync ( ) ; / / destructive modification of a schema is not permitted 
 + realm . checkNotInSync ( ) ; / / destructive modification of a schema is not permitted 
 checkLegalName ( fieldName ) ; 
 if ( ! hasField ( fieldName ) ) { 
 throw new IllegalStateException ( fieldName + " does not exist . " ) ; 
 @ @ - 314 , 7 + 313 , 7 @ @ public final class RealmObjectSchema { 
 * @ throws IllegalArgumentException if field name doesn ' t exist or if the new field name already exists . 
 * / 
 public RealmObjectSchema renameField ( String currentFieldName , String newFieldName ) { 
 - checkNotInSync ( ) ; / / destructive modification of a schema is not permitted 
 + realm . checkNotInSync ( ) ; / / destructive modification of a schema is not permitted 
 checkLegalName ( currentFieldName ) ; 
 checkFieldExists ( currentFieldName ) ; 
 checkLegalName ( newFieldName ) ; 
 @ @ - 380 , 7 + 379 , 7 @ @ public final class RealmObjectSchema { 
 * @ throws IllegalArgumentException if field name doesn ' t exist or the field doesn ' t have an index . 
 * / 
 public RealmObjectSchema removeIndex ( String fieldName ) { 
 - checkNotInSync ( ) ; / / destructive modifications are not permitted 
 + realm . checkNotInSync ( ) ; / / destructive modifications are not permitted 
 checkLegalName ( fieldName ) ; 
 checkFieldExists ( fieldName ) ; 
 long columnIndex = getColumnIndex ( fieldName ) ; 
 @ @ - 423 , 7 + 422 , 7 @ @ public final class RealmObjectSchema { 
 * @ throws IllegalArgumentException if the class doesn ' t have a primary key defined . 
 * / 
 public RealmObjectSchema removePrimaryKey ( ) { 
 - checkNotInSync ( ) ; / / destructive modifications are not permitted 
 + realm . checkNotInSync ( ) ; / / destructive modifications are not permitted 
 if ( ! table . hasPrimaryKey ( ) ) { 
 throw new IllegalStateException ( getClassName ( ) + " doesn ' t have a primary key . " ) ; 
 } 
 @ @ - 662 , 13 + 661 , 6 @ @ public final class RealmObjectSchema { 
 } 
 } 
 
 - private void checkNotInSync ( ) { 
 - / / FIXME : similar method found in RealmSchema . 
 - if ( ObjectServerFacade . SYNC _ AVAILABLE & & realm . configuration instanceof SyncConfiguration ) { 
 - throw new IllegalArgumentException ( " You cannot perform changes to a schema . Please update app and restart . " ) ; 
 - } 
 - } 
 - 
 / * * 
 * Returns the column indices for the given field name . If a linked field is defined , the column index for 
 * each field is returned . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmSchema . java b / realm / realm - library / src / main / java / io / realm / RealmSchema . java 
 index 3aa0f83 . . 99264bf 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmSchema . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmSchema . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import io . realm . internal . ColumnIndices ; 
 import io . realm . internal . ColumnInfo ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . Util ; 
 - import io . realm . internal . objectserver . ObjectServerFacade ; 
 
 / * * 
 * Class for interacting with the Realm schema using a dynamic API . This makes it possible 
 @ @ - 188 , 7 + 187 , 7 @ @ public final class RealmSchema { 
 * @ param className name of the class to remove . 
 * / 
 public void remove ( String className ) { 
 - checkNotInSync ( ) ; / / destructive modifications are not permitted 
 + realm . checkNotInSync ( ) ; / / destructive modifications are not permitted 
 checkEmpty ( className , EMPTY _ STRING _ MSG ) ; 
 String internalTableName = TABLE _ PREFIX + className ; 
 checkHasTable ( className , " Cannot remove class because it is not in this Realm : " + className ) ; 
 @ @ - 207 , 7 + 206 , 7 @ @ public final class RealmSchema { 
 * @ return a schema object for renamed class . 
 * / 
 public RealmObjectSchema rename ( String oldClassName , String newClassName ) { 
 - checkNotInSync ( ) ; / / destructive modifications are not permitted 
 + realm . checkNotInSync ( ) ; / / destructive modifications are not permitted 
 checkEmpty ( oldClassName , " Class names cannot be empty or null " ) ; 
 checkEmpty ( newClassName , " Class names cannot be empty or null " ) ; 
 String oldInternalName = TABLE _ PREFIX + oldClassName ; 
 @ @ - 251 , 11 + 250 , 6 @ @ public final class RealmSchema { 
 } 
 } 
 
 - private void checkNotInSync ( ) { 
 - if ( ObjectServerFacade . SYNC _ AVAILABLE & & realm . configuration instanceof SyncConfiguration ) { 
 - throw new IllegalArgumentException ( " You cannot perform changes to a schema . Please update app and restart . " ) ; 
 - } 
 - } 
 private void checkEmpty ( String str , String error ) { 
 if ( str = = null | | str . isEmpty ( ) ) { 
 throw new IllegalArgumentException ( error ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 index d97ed95 . . 80698a5 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 @ @ - 208 , 6 + 208 , 11 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 return deleteRealmOnLogout ; 
 } 
 
 + @ Override 
 + boolean isSyncConfiguration ( ) { 
 + return true ; 
 + } 
 + 
 / * * 
 * Builder used to construct instances of a SyncConfiguration in a fluent manner . 
 * / 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java 
 new file mode 100644 
 index 0000000 . . 331ea7d 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + package io . realm . internal ; 
 + 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . exceptions . RealmException ; 
 + 
 + / * * 
 + * Class acting as an mediator between the basic Realm APIs and the Object Server APIs . 
 + * This breaks the cyclic dependency between ObjectServer and Realm code . 
 + * / 
 + public class ObjectServerFacade { 
 + 
 + private final static ObjectServerFacade nonSyncFacade = new ObjectServerFacade ( ) ; 
 + private static ObjectServerFacade syncFacade = null ; 
 + 
 + static { 
 + / / noinspection TryWithIdenticalCatches 
 + try { 
 + Class syncFacadeClass = Class . forName ( " io . realm . internal . objectserver . SyncObjectServerFacade " ) ; 
 + syncFacade = ( ObjectServerFacade ) syncFacadeClass . newInstance ( ) ; 
 + } catch ( ClassNotFoundException ignored ) { 
 + } catch ( InstantiationException e ) { 
 + throw new RealmException ( " Failed to init SyncObjectServerFacade " , e ) ; 
 + } catch ( IllegalAccessException e ) { 
 + throw new RealmException ( " Failed to init SyncObjectServerFacade " , e ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Notify the session for this configuration that a local commit was made . 
 + * / 
 + public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { 
 + } 
 + 
 + public void realmClosed ( RealmConfiguration configuration ) { 
 + } 
 + 
 + public void realmOpened ( RealmConfiguration configuration ) { 
 + } 
 + 
 + public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { 
 + return new String [ 2 ] ; 
 + } 
 + 
 + public static ObjectServerFacade getFacade ( boolean needSyncFacade ) { 
 + if ( needSyncFacade ) { 
 + return syncFacade ; 
 + } 
 + return nonSyncFacade ; 
 + } 
 + 
 + / / Returns a SyncObjectServerFacade instance if the class exists . Otherwise returns a non - sync one . 
 + static ObjectServerFacade getSyncFacadeIfPossible ( ) { 
 + if ( syncFacade ! = null ) { 
 + return syncFacade ; 
 + } 
 + return nonSyncFacade ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index eca1c49 . . 347807c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 22 , 7 + 22 , 6 @ @ import java . io . File ; 
 import io . realm . RealmConfiguration ; 
 import io . realm . RealmSchema ; 
 import io . realm . internal . async . BadVersionException ; 
 - import io . realm . internal . objectserver . ObjectServerFacade ; 
 
 public final class SharedRealm implements Closeable { 
 
 @ @ - 76 , 6 + 75 , 7 @ @ public final class SharedRealm implements Closeable { 
 
 / / JNI will only hold a weak global ref to this . 
 public final RealmNotifier realmNotifier ; 
 + public final ObjectServerFacade objectServerFacade ; 
 
 public static class VersionID implements Comparable < VersionID > { 
 public final long version ; 
 @ @ - 148 , 6 + 148 , 7 @ @ public final class SharedRealm implements Closeable { 
 this . schemaChangeListener = schemaVersionListener ; 
 context = new Context ( ) ; 
 this . lastSchemaVersion = schemaVersionListener = = null ? - 1L : getSchemaVersion ( ) ; 
 + objectServerFacade = null ; 
 } 
 
 public static SharedRealm getInstance ( RealmConfiguration config ) { 
 @ @ - 156 , 7 + 157 , 7 @ @ public final class SharedRealm implements Closeable { 
 
 public static SharedRealm getInstance ( RealmConfiguration config , RealmNotifier realmNotifier , 
 SchemaVersionListener schemaVersionListener ) { 
 - String [ ] userAndServer = ObjectServerFacade . getUserAndServerUrl ( config ) ; 
 + String [ ] userAndServer = ObjectServerFacade . getSyncFacadeIfPossible ( ) . getUserAndServerUrl ( config ) ; 
 String rosServerUrl = userAndServer [ 0 ] ; 
 String rosUserToken = userAndServer [ 1 ] ; 
 boolean enable _ caching = false ; / / Handled in Java currently 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / ObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / ObjectServerFacade . java 
 deleted file mode 100644 
 index bcac711 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / objectserver / ObjectServerFacade . java 
 + + + / dev / null 
 @ @ - 1 , 65 + 0 , 0 @ @ 
 - package io . realm . internal . objectserver ; 
 - 
 - import io . realm . RealmConfiguration ; 
 - import io . realm . Session ; 
 - import io . realm . SyncConfiguration ; 
 - import io . realm . SyncManager ; 
 - 
 - / * * 
 - * Class acting as an mediator between the basic Realm APIs and the Object Server APIs . 
 - * This breaks the cyclic dependency between ObjectServer and Realm code . 
 - * 
 - * TODO Move this class into a ` common ` module that both realm - library and objectserver - library depends on . 
 - * / 
 - public class ObjectServerFacade { 
 - 
 - public static final boolean SYNC _ AVAILABLE ; 
 - 
 - static { 
 - boolean syncAvailable ; 
 - try { 
 - Class . forName ( " io . realm . SyncManager " ) ; 
 - syncAvailable = true ; 
 - } catch ( ClassNotFoundException e ) { 
 - syncAvailable = false ; 
 - } 
 - SYNC _ AVAILABLE = syncAvailable ; 
 - } 
 - / * * 
 - * Notify the session for this configuration that a local commit was made . 
 - * / 
 - public static void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { 
 - if ( SYNC _ AVAILABLE & & configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . notifyCommit ( lastSnapshotVersion ) ; 
 - } 
 - } 
 - 
 - public static void realmClosed ( RealmConfiguration configuration ) { 
 - if ( SYNC _ AVAILABLE & & configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . getSyncPolicy ( ) . onRealmClosed ( session ) ; 
 - } 
 - } 
 - 
 - public static void realmOpened ( RealmConfiguration configuration ) { 
 - if ( SYNC _ AVAILABLE & & configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . getSyncPolicy ( ) . onRealmOpened ( session ) ; 
 - } 
 - } 
 - 
 - public static String [ ] getUserAndServerUrl ( RealmConfiguration config ) { 
 - if ( SYNC _ AVAILABLE & & config instanceof SyncConfiguration ) { 
 - SyncConfiguration syncConfig = ( SyncConfiguration ) config ; 
 - String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; 
 - String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; 
 - return new String [ ] { rosServerUrl , rosUserToken } ; 
 - } else { 
 - return new String [ 2 ] ; 
 - } 
 - } 
 - } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java 
 new file mode 100644 
 index 0000000 . . 5740a20 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + package io . realm . internal . objectserver ; 
 + 
 + 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . Session ; 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . SyncManager ; 
 + import io . realm . internal . ObjectServerFacade ; 
 + 
 + @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade 
 + public class SyncObjectServerFacade extends ObjectServerFacade { 
 + 
 + private static final String WRONG _ TYPE _ OF _ CONFIGURATION = 
 + " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; 
 + 
 + @ Override 
 + public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . notifyCommit ( lastSnapshotVersion ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void realmClosed ( RealmConfiguration configuration ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . getSyncPolicy ( ) . onRealmClosed ( session ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void realmOpened ( RealmConfiguration configuration ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . getSyncPolicy ( ) . onRealmOpened ( session ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { 
 + if ( config instanceof SyncConfiguration ) { 
 + SyncConfiguration syncConfig = ( SyncConfiguration ) config ; 
 + String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; 
 + String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; 
 + return new String [ ] { rosServerUrl , rosUserToken } ; 
 + } else { 
 + return new String [ 2 ] ; 
 + } 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / log / RealmLog . java b / realm / realm - library / src / main / java / io / realm / log / RealmLog . java 
 index 3693c3d . . 6389196 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / log / RealmLog . java 
 + + + b / realm / realm - library / src / main / java / io / realm / log / RealmLog . java 
 @ @ - 22 , 7 + 22 , 7 @ @ import java . util . List ; 
 import io . realm . internal . Keep ; 
 import io . realm . internal . Util ; 
 import io . realm . SyncManager ; 
 - import io . realm . internal . objectserver . ObjectServerFacade ; 
 + import io . realm . internal . ObjectServerFacade ; 
 
 / * * 
 * Global logger used by all Realm components . 
 @ @ - 59 , 10 + 59 , 8 @ @ public final class RealmLog { 
 
 private static void setMinimumNativeDebugLevel ( int nativeDebugLevel ) { 
 minimumNativeLogLevel = nativeDebugLevel ; 
 + / / FIXME : Use same log level setting for normal Realm and Sync Realm . 
 Util . setDebugLevel ( nativeDebugLevel ) ; / / Log level for Realm Core 
 - if ( ObjectServerFacade . SYNC _ AVAILABLE ) { 
 - SyncManager . setLogLevel ( nativeDebugLevel ) ; 
 - } 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / realm / realm - jni / src / io _ realm _ internal _ LinkView . cpp b / realm / realm - jni / src / io _ realm _ internal _ LinkView . cpp 
 index cc9aa38 . . 82776f3 100644 
 - - - a / realm / realm - jni / src / io _ realm _ internal _ LinkView . cpp 
 + + + b / realm / realm - jni / src / io _ realm _ internal _ LinkView . cpp 
 @ @ - 193 , 11 + 193 , 24 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeFind 
 } 
 
 JNIEXPORT void JNICALL Java _ io _ realm _ internal _ LinkView _ nativeRemoveAllTargetRows 
 - ( JNIEnv * env , jobject , jlong nativeLinkViewPtr ) { 
 + ( JNIEnv * env , jobject , jlong nativeLinkViewPtr ) 
 + { 
 TR _ ENTER _ PTR ( nativeLinkViewPtr ) 
 try { 
 LinkView * lv = LV ( nativeLinkViewPtr ) ; 
 lv - > remove _ all _ target _ rows ( ) ; 
 } CATCH _ STD ( ) 
 - } 
 + } 
 + 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeGetTargetTable 
 + ( JNIEnv * , jobject , jlong nativeLinkViewPtr ) 
 + { 
 + TR _ ENTER _ PTR ( nativeLinkViewPtr ) 
 + 
 + LinkView * lv = LV ( nativeLinkViewPtr ) ; 
 + Table * pTable = & ( lv - > get _ target _ table ( ) ) ; 
 + LangBindHelper : : bind _ table _ ptr ( pTable ) ; 
 + 
 + return reinterpret _ cast < jlong > ( pTable ) ; 
 + } 
 
 diff - - git a / realm / realm - jni / src / io _ realm _ internal _ LinkView . h b / realm / realm - jni / src / io _ realm _ internal _ LinkView . h 
 index 9be9eae . . 173fa01 100644 
 - - - a / realm / realm - jni / src / io _ realm _ internal _ LinkView . h 
 + + + b / realm / realm - jni / src / io _ realm _ internal _ LinkView . h 
 @ @ - 127 , 6 + 127 , 14 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeFind 
 JNIEXPORT void JNICALL Java _ io _ realm _ internal _ LinkView _ nativeRemoveAllTargetRows 
 ( JNIEnv * , jobject , jlong ) ; 
 
 + / * 
 + * Class : io _ realm _ internal _ LinkView 
 + * Method : nativeGetTargetTable 
 + * Signature : ( J ) J 
 + * / 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeGetTargetTable 
 + ( JNIEnv * , jobject , jlong ) ; 
 + 
 # ifdef _ _ cplusplus 
 } 
 # endif 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmListTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmListTests . java 
 index 4eb0a98 . . f996d94 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmListTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmListTests . java 
 @ @ - 27 , 12 + 27 , 14 @ @ import org . junit . runner . RunWith ; 
 
 import java . util . Collections ; 
 import java . util . concurrent . Callable ; 
 + import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . Future ; 
 
 import io . realm . entities . AllTypes ; 
 + import io . realm . entities . Cat ; 
 import io . realm . entities . CyclicType ; 
 import io . realm . entities . CyclicTypePrimaryKey ; 
 import io . realm . entities . Dog ; 
 @ @ - 103 , 6 + 105 , 7 @ @ public class RealmListTests { 
 private void checkMethodsOnEmptyList ( Realm realm , RealmList < Dog > list ) { 
 realm . beginTransaction ( ) ; 
 for ( int i = 0 ; i < 4 ; i + + ) { 
 + / / noinspection TryWithIdenticalCatches 
 try { 
 switch ( i ) { 
 case 0 : list . get ( 0 ) ; break ; 
 @ @ - 915 , 7 + 918 , 7 @ @ public class RealmListTests { 
 } 
 
 @ Test 
 - public void testRemoveAllFromRealm ( ) { 
 + public void removeAllFromRealm ( ) { 
 Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; 
 RealmList < Dog > dogs = owner . getDogs ( ) ; 
 assertEquals ( TEST _ OBJECTS , dogs . size ( ) ) ; 
 @ @ - 928 , 7 + 931 , 7 @ @ public class RealmListTests { 
 } 
 
 @ Test 
 - public void testRealmRemoveAllNotManagedList ( ) { 
 + public void removeAllFromRealm _ notManagedList ( ) { 
 Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; 
 RealmList < Dog > dogs = owner . getDogs ( ) ; 
 assertEquals ( TEST _ OBJECTS , dogs . size ( ) ) ; 
 @ @ - 947 , 7 + 950 , 7 @ @ public class RealmListTests { 
 } 
 
 @ Test 
 - public void testRealmRemoveAllOutsideTransaction ( ) { 
 + public void removeAllFromRealm _ outsideTransaction ( ) { 
 Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; 
 RealmList < Dog > dogs = owner . getDogs ( ) ; 
 try { 
 @ @ - 959 , 7 + 962 , 7 @ @ public class RealmListTests { 
 } 
 
 @ Test 
 - public void testRemoveAllFromListStandaloneObjectShouldThrow ( ) { 
 + public void removeAllFromRealm _ listWithStandaloneObjectShouldThrow ( ) { 
 final RealmList < Dog > list = new RealmList < Dog > ( ) ; 
 
 testRealm . beginTransaction ( ) ; 
 @ @ - 986 , 7 + 989 , 7 @ @ public class RealmListTests { 
 } 
 
 @ Test 
 - public void testRemoveAllFromRealmEmptyList ( ) { 
 + public void removeAllFromRealm _ emptyList ( ) { 
 RealmList < Dog > dogs = testRealm . where ( Owner . class ) . findFirst ( ) . getDogs ( ) ; 
 assertEquals ( TEST _ OBJECTS , dogs . size ( ) ) ; 
 
 @ @ - 1006 , 7 + 1009 , 7 @ @ public class RealmListTests { 
 } 
 
 @ Test 
 - public void testRemoveAllFromRealmInvalidListShouldThrow ( ) { 
 + public void removeAllFromRealm _ invalidListShouldThrow ( ) { 
 RealmList < Dog > dogs = testRealm . where ( Owner . class ) . findFirst ( ) . getDogs ( ) ; 
 assertEquals ( TEST _ OBJECTS , dogs . size ( ) ) ; 
 testRealm . close ( ) ; 
 @ @ - 1019 , 4 + 1022 , 166 @ @ public class RealmListTests { 
 assertEquals ( " This Realm instance has already been closed , making it unusable . " , e . getMessage ( ) ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void add _ set _ objectFromOtherThread ( ) { 
 + final CountDownLatch finishedLatch = new CountDownLatch ( 1 ) ; 
 + final Dog dog = testRealm . where ( Dog . class ) . findFirst ( ) ; 
 + final String expectedMsg = " Cannot copy an object from another Realm instance . " ; 
 + 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm realm = Realm . getInstance ( testRealm . getConfiguration ( ) ) ; 
 + realm . beginTransaction ( ) ; 
 + RealmList < Dog > list = realm . createObject ( Owner . class ) . getDogs ( ) ; 
 + list . add ( realm . createObject ( Dog . class ) ) ; 
 + try { 
 + list . add ( dog ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + } 
 + 
 + try { 
 + list . add ( 0 , dog ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + } 
 + 
 + try { 
 + list . set ( 0 , dog ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + } 
 + 
 + realm . cancelTransaction ( ) ; 
 + realm . close ( ) ; 
 + finishedLatch . countDown ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + TestHelper . awaitOrFail ( finishedLatch ) ; 
 + } 
 + 
 + @ Test 
 + public void add _ set _ dynamicObjectFromOtherThread ( ) { 
 + final CountDownLatch finishedLatch = new CountDownLatch ( 1 ) ; 
 + DynamicRealm dynamicRealm = DynamicRealm . getInstance ( testRealm . getConfiguration ( ) ) ; 
 + final DynamicRealmObject dynDog = dynamicRealm . where ( Dog . CLASS _ NAME ) . findFirst ( ) ; 
 + final String expectedMsg = " Cannot copy an object to a Realm instance created in another thread . " ; 
 + 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + DynamicRealm dynamicRealm = DynamicRealm . getInstance ( testRealm . getConfiguration ( ) ) ; 
 + dynamicRealm . beginTransaction ( ) ; 
 + RealmList < DynamicRealmObject > list = dynamicRealm . createObject ( Owner . CLASS _ NAME ) 
 + . getList ( Owner . FIELD _ DOGS ) ; 
 + list . add ( dynamicRealm . createObject ( Dog . CLASS _ NAME ) ) ; 
 + 
 + try { 
 + list . add ( dynDog ) ; 
 + fail ( ) ; 
 + } catch ( IllegalStateException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + } 
 + 
 + try { 
 + list . add ( 0 , dynDog ) ; 
 + fail ( ) ; 
 + } catch ( IllegalStateException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + } 
 + 
 + try { 
 + list . set ( 0 , dynDog ) ; 
 + fail ( ) ; 
 + } catch ( IllegalStateException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + } 
 + 
 + dynamicRealm . cancelTransaction ( ) ; 
 + dynamicRealm . close ( ) ; 
 + finishedLatch . countDown ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + TestHelper . awaitOrFail ( finishedLatch ) ; 
 + dynamicRealm . close ( ) ; 
 + } 
 + 
 + @ Test 
 + public void add _ set _ withWrongDynamicObjectType ( ) { 
 + final String expectedMsg = " The object has a different type from list ' s . Type of the list is ' Dog ' , " + 
 + " type of object is ' Cat ' . " ; 
 + DynamicRealm dynamicRealm = DynamicRealm . getInstance ( testRealm . getConfiguration ( ) ) ; 
 + 
 + dynamicRealm . beginTransaction ( ) ; 
 + RealmList < DynamicRealmObject > list = dynamicRealm . createObject ( Owner . CLASS _ NAME ) 
 + . getList ( Owner . FIELD _ DOGS ) ; 
 + DynamicRealmObject dynCat = dynamicRealm . createObject ( Cat . CLASS _ NAME ) ; 
 + 
 + try { 
 + list . add ( dynCat ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + 
 + } 
 + 
 + try { 
 + list . add ( 0 , dynCat ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + 
 + } 
 + 
 + try { 
 + list . set ( 0 , dynCat ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + 
 + } 
 + 
 + dynamicRealm . cancelTransaction ( ) ; 
 + dynamicRealm . close ( ) ; 
 + } 
 + 
 + @ Test 
 + public void add _ set _ dynamicObjectCreatedFromTypedRealm ( ) { 
 + final String expectedMsg = " Cannot copy DynamicRealmObject between Realm instances . " ; 
 + DynamicRealmObject dynDog = new DynamicRealmObject ( testRealm . where ( Dog . class ) . findFirst ( ) ) ; 
 + DynamicRealm dynamicRealm = DynamicRealm . getInstance ( testRealm . getConfiguration ( ) ) ; 
 + 
 + dynamicRealm . beginTransaction ( ) ; 
 + RealmList < DynamicRealmObject > list = dynamicRealm . createObject ( Owner . CLASS _ NAME ) 
 + . getList ( Owner . FIELD _ DOGS ) ; 
 + 
 + try { 
 + list . add ( dynDog ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + } 
 + 
 + try { 
 + list . add ( 0 , dynDog ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + } 
 + 
 + try { 
 + list . set ( 0 , dynDog ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( expectedMsg , expected . getMessage ( ) ) ; 
 + } 
 + 
 + dynamicRealm . cancelTransaction ( ) ; 
 + dynamicRealm . close ( ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index 56bb519 . . 286bcb7 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 2726 , 7 + 2726 , 7 @ @ public class RealmTests { 
 DynamicRealm dynamicRealm = DynamicRealm . getInstance ( realm . getConfiguration ( ) ) ; 
 dynamicRealm . beginTransaction ( ) ; 
 RealmList < DynamicRealmObject > dynamicList = dynamicRealm . createObject ( AllTypes . CLASS _ NAME ) . getList ( AllTypes . FIELD _ REALMLIST ) ; 
 - DynamicRealmObject dObj = dynamicRealm . createObject ( AllTypes . CLASS _ NAME ) ; 
 + DynamicRealmObject dObj = dynamicRealm . createObject ( Dog . CLASS _ NAME ) ; 
 dynamicList . add ( dObj ) ; 
 dynamicRealm . commitTransaction ( ) ; 
 try { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / entities / Owner . java b / realm / realm - library / src / androidTest / java / io / realm / entities / Owner . java 
 index ca8a253 . . 605d5ae 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / entities / Owner . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / entities / Owner . java 
 @ @ - 22 , 6 + 22 , 9 @ @ import io . realm . RealmObject ; 
 public class Owner extends RealmObject { 
 
 public static String CLASS _ NAME = " Owner " ; 
 + public static String FIELD _ NAME = " name " ; 
 + public static String FIELD _ DOGS = " dogs " ; 
 + public static String FIELD _ CAT = " cat " ; 
 
 private String name ; 
 private RealmList < Dog > dogs ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 index 2e173dc . . a506deb 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 @ @ - 269 , 7 + 269 , 7 @ @ public final class DynamicRealmObject extends RealmObject { 
 public RealmList < DynamicRealmObject > getList ( String fieldName ) { 
 long columnIndex = row . getColumnIndex ( fieldName ) ; 
 LinkView linkView = row . getLinkList ( columnIndex ) ; 
 - String className = linkView . getTable ( ) . getLinkTarget ( columnIndex ) . getName ( ) . substring ( Table . TABLE _ PREFIX . length ( ) ) ; 
 + String className = RealmSchema . getSchemaForTable ( linkView . getTargetTable ( ) ) ; 
 return new RealmList < DynamicRealmObject > ( className , linkView , realm ) ; 
 } 
 
 @ @ - 588 , 7 + 588 , 7 @ @ public final class DynamicRealmObject extends RealmObject { 
 long columnIndex = row . getColumnIndex ( fieldName ) ; 
 LinkView links = row . getLinkList ( columnIndex ) ; 
 links . clear ( ) ; 
 - Table linkTargetTable = links . getTable ( ) . getLinkTarget ( columnIndex ) ; 
 + Table linkTargetTable = links . getTargetTable ( ) ; 
 for ( int i = 0 ; i < list . size ( ) ; i + + ) { 
 RealmObject obj = list . get ( i ) ; 
 if ( obj . realm ! = realm ) { 
 @ @ - 626 , 7 + 626 , 7 @ @ public final class DynamicRealmObject extends RealmObject { 
 * @ return this objects type . 
 * / 
 public String getType ( ) { 
 - return row . getTable ( ) . getName ( ) . substring ( Table . TABLE _ PREFIX . length ( ) ) ; 
 + return RealmSchema . getSchemaForTable ( row . getTable ( ) ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmList . java b / realm / realm - library / src / main / java / io / realm / RealmList . java 
 index 90b5c71 . . a60b2fa 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmList . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmList . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . util . List ; 
 import io . realm . exceptions . RealmException ; 
 import io . realm . internal . InvalidRow ; 
 import io . realm . internal . LinkView ; 
 + import io . realm . internal . Table ; 
 
 / * * 
 * RealmList is used to model one - to - many relationships in a { @ link io . realm . RealmObject } . 
 @ @ - 218 , 15 + 219 , 34 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 
 / / Transparently copies a standalone object or managed object from another Realm to the Realm backing this RealmList . 
 private E copyToRealmIfNeeded ( E object ) { 
 - / / Object is already in this realm 
 - if ( object . row ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { 
 - return object ; 
 - } 
 - 
 - / / We don ' t support moving DynamicRealmObjects across Realms automatically . The overhead is too big as you 
 - / / have to run a full schema validation for each object . 
 if ( object instanceof DynamicRealmObject ) { 
 - throw new IllegalArgumentException ( " Automatically copying DynamicRealmObjects from other Realms are not supported " ) ; 
 + String listClassName = RealmSchema . getSchemaForTable ( view . getTargetTable ( ) ) ; 
 + String objectClassName = ( ( DynamicRealmObject ) object ) . getType ( ) ; 
 + if ( object . realm = = realm ) { 
 + if ( listClassName . equals ( objectClassName ) ) { 
 + / / Same Realm instance and same target table 
 + return object ; 
 + } else { 
 + / / Different target table 
 + throw new IllegalArgumentException ( String . format ( " The object has a different type from list ' s . " + 
 + " Type of the list is ' % s ' , type of object is ' % s ' . " , listClassName , objectClassName ) ) ; 
 + } 
 + } else if ( realm . threadId = = object . realm . threadId ) { 
 + / / We don ' t support moving DynamicRealmObjects across Realms automatically . The overhead is too big as 
 + / / you have to run a full schema validation for each object . 
 + / / And copying from another Realm instance pointed to the same Realm file is not supported as well . 
 + throw new IllegalArgumentException ( " Cannot copy DynamicRealmObject between Realm instances . " ) ; 
 + } else { 
 + throw new IllegalStateException ( " Cannot copy an object to a Realm instance created in another thread . " ) ; 
 + } 
 + } else { 
 + / / Object is already in this realm 
 + if ( object . row ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { 
 + if ( realm ! = object . realm ) { 
 + throw new IllegalArgumentException ( " Cannot copy an object from another Realm instance . " ) ; 
 + } 
 + return object ; 
 + } 
 } 
 
 / / At this point the object can only be a typed object , so the backing Realm cannot be a DynamicRealm . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmSchema . java b / realm / realm - library / src / main / java / io / realm / RealmSchema . java 
 index 0f83fd0 . . 2957d64 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmSchema . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmSchema . java 
 @ @ - 238 , 4 + 238 , 8 @ @ public final class RealmSchema { 
 void setColumnIndices ( ColumnIndices columnIndices ) { 
 this . columnIndices = columnIndices ; 
 } 
 + 
 + static String getSchemaForTable ( Table table ) { 
 + return table . getName ( ) . substring ( Table . TABLE _ PREFIX . length ( ) ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java b / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java 
 index e01d9be . . ae0b460 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class CheckedRow extends UncheckedRow { 
 * / 
 public static CheckedRow get ( Context context , LinkView linkView , long index ) { 
 long nativeRowPointer = linkView . nativeGetRow ( linkView . nativePointer , index ) ; 
 - CheckedRow row = new CheckedRow ( context , linkView . parent . getLinkTarget ( linkView . columnIndexInParent ) , 
 + CheckedRow row = new CheckedRow ( context , linkView . getTargetTable ( ) , 
 nativeRowPointer ) ; 
 context . rowReferences . put ( new UncheckedRowNativeObjectReference ( row , context . referenceQueue ) , 
 Context . NATIVE _ REFERENCES _ VALUE ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / LinkView . java b / realm / realm - library / src / main / java / io / realm / internal / LinkView . java 
 index a0f2eef . . 98887cd 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / LinkView . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / LinkView . java 
 @ @ - 153 , 6 + 153 , 19 @ @ public class LinkView extends NativeObject { 
 nativeRemoveAllTargetRows ( nativePointer ) ; 
 } 
 
 + public Table getTargetTable ( ) { 
 + / / Execute the disposal of abandoned realm objects each time a new realm object is created 
 + context . executeDelayedDisposal ( ) ; 
 + long nativeTablePointer = nativeGetTargetTable ( nativePointer ) ; 
 + try { 
 + / / Copy context reference from parent 
 + return new Table ( context , this . parent , nativeTablePointer ) ; 
 + } catch ( RuntimeException e ) { 
 + Table . nativeClose ( nativeTablePointer ) ; 
 + throw e ; 
 + } 
 + } 
 + 
 private void checkImmutable ( ) { 
 if ( parent . isImmutable ( ) ) { 
 throw new IllegalStateException ( " Changing Realm data can only be done from inside a transaction . " ) ; 
 @ @ - 174 , 4 + 187 , 5 @ @ public class LinkView extends NativeObject { 
 private native boolean nativeIsAttached ( long nativeLinkViewPtr ) ; 
 private native long nativeFind ( long nativeLinkViewPtr , long targetRowIndex ) ; 
 private native void nativeRemoveAllTargetRows ( long nativeLinkViewPtr ) ; 
 + private native long nativeGetTargetTable ( long nativeLinkViewPtr ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java b / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java 
 index 7522228 . . 3f591b2 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java 
 @ @ - 96 , 7 + 96 , 7 @ @ public class UncheckedRow extends NativeObject implements Row { 
 * / 
 public static UncheckedRow getByRowIndex ( Context context , LinkView linkView , long index ) { 
 long nativeRowPointer = linkView . nativeGetRow ( linkView . nativePointer , index ) ; 
 - UncheckedRow row = new UncheckedRow ( context , linkView . parent . getLinkTarget ( linkView . columnIndexInParent ) , 
 + UncheckedRow row = new UncheckedRow ( context , linkView . getTargetTable ( ) , 
 nativeRowPointer ) ; 
 context . rowReferences . put ( new UncheckedRowNativeObjectReference ( row , context . referenceQueue ) , 
 Context . NATIVE _ REFERENCES _ VALUE ) ;
