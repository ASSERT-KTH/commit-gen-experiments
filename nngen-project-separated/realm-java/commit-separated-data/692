BLEU SCORE: 0.11156508007421491

TEST MSG: PR feedback
GENERATED MSG: Nh / fix listener generics

TEST DIFF (one line): diff - - git a / examples / kotlinExample / build . gradle b / examples / kotlinExample / build . gradle <nl> index 4936d60 . . 813315c 100644 <nl> - - - a / examples / kotlinExample / build . gradle <nl> + + + b / examples / kotlinExample / build . gradle <nl> @ @ - 52 , 6 + 52 , 5 @ @ android { <nl> <nl> dependencies { <nl> compile " org . jetbrains . kotlin : kotlin - stdlib : $ { kotlin _ version } " <nl> - / / compile " org . jetbrains . kotlin : kotlin - reflect : $ { kotlin _ version } " <nl> compile ' org . jetbrains . anko : anko - sdk15 : 0 . 8 . 2 ' <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index aeaeaae . . 00362ef 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 267 , 7 + 267 , 7 @ @ public class RealmTests { <nl> @ Test <nl> public void getInstance ( ) { <nl> assertNotNull ( " Realm . getInstance unexpectedly returns null " , realm ) ; <nl> - assertTrue ( " Realm . getInstance does not contain expected table " , realm . contains ( AllTypes . class ) ) ; <nl> + assertTrue ( " Realm . getInstance does not contain expected table " , realm . getSchema ( ) . contains ( AllTypes . CLASS _ NAME ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1961 , 7 + 1961 , 6 @ @ public class RealmTests { <nl> try { realm . copyToRealm ( ts ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . copyToRealmOrUpdate ( t ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . copyToRealmOrUpdate ( ts ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> - try { realm . remove ( AllTypes . class , 0 ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . delete ( AllTypes . class ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . deleteAll ( ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> index b2e64a9 . . ea871c3 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> @ @ - 119 , 13 + 119 , 12 @ @ public final class DynamicRealm extends BaseRealm { <nl> / * * <nl> * Adds a change listener to the Realm . <nl> * < p > <nl> - * The listeners will be executed on every loop of a Handler thread if <nl> - * changes why committed by this or another thread . <nl> + * The listeners will be executed on every loop of a Handler thread if changes are committed by <nl> + * this or another thread . <nl> * <nl> - * Realm instances are cached , so for that reason it is important to <nl> + * Realm instances are cached pr . thread , so for that reason it is important to <nl> * remember to remove listeners again either using { @ link # removeChangeListener ( RealmChangeListener ) } <nl> - * or { @ link # removeAllChangeListeners ( ) } . Not doing so can cause <nl> - * memory leaks . <nl> + * or { @ link # removeAllChangeListeners ( ) } . Not doing so can cause memory leaks . <nl> * <nl> * @ param listener the change listener . <nl> * @ throws IllegalStateException if you try to register a listener from a non - Looper Thread . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 1cd8e74 . . d265e60 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 716 , 10 + 716 , 6 @ @ public final class Realm extends BaseRealm { <nl> return get ( clazz , rowIndex ) ; <nl> } <nl> <nl> - void remove ( Class < ? extends RealmModel > clazz , long objectIndex ) { <nl> - getTable ( clazz ) . moveLastOver ( objectIndex ) ; <nl> - } <nl> - <nl> / * * <nl> * Copies a RealmObject to the Realm instance and returns the copy . Any further changes to the original RealmObject <nl> * will not be reflected in the Realm copy . This is a deep copy , so all referenced objects will be copied . Objects <nl> @ @ - 916 , 10 + 912 , 6 @ @ public final class Realm extends BaseRealm { <nl> return createDetachedCopy ( realmObject , maxDepth , new HashMap < RealmModel , RealmObjectProxy . CacheData < RealmModel > > ( ) ) ; <nl> } <nl> <nl> - boolean contains ( Class < ? extends RealmModel > clazz ) { <nl> - return configuration . getSchemaMediator ( ) . getModelClasses ( ) . contains ( clazz ) ; <nl> - } <nl> - <nl> / * * <nl> * Returns a typed RealmQuery , which can be used to query for specific objects of this type <nl> *
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> index 8a55467 . . 4778fbe 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> @ @ - 63 , 7 + 63 , 8 @ @ public class RealmChangeListenerTests { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void returnedRealmIsNotNull ( ) { <nl> - looperThread . realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> + Realm realm = looperThread . realm ; <nl> + realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> @ Override <nl> public void onChange ( Realm realm ) { <nl> assertNotNull ( realm ) ; <nl> @ @ - 71 , 8 + 72 , 8 @ @ public class RealmChangeListenerTests { <nl> looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> - looperThread . realm . beginTransaction ( ) ; <nl> - looperThread . realm . commitTransaction ( ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . commitTransaction ( ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 6019132 . . 5c832b8 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 125 , 26 + 125 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> return ! sharedGroupManager . isImmutable ( ) ; <nl> } <nl> <nl> - / * * <nl> - * Adds a change listener to the Realm . <nl> - * < p > <nl> - * The listeners will be executed : <nl> - * < ul > <nl> - * < li > Immediately if a change was committed by the local thread < / li > <nl> - * < li > On every loop of a Handler thread if changes were committed by another thread < / li > <nl> - * < li > On every call to { @ link io . realm . Realm # refresh ( ) } < / li > <nl> - * < / ul > <nl> - * <nl> - * Listeners are stored as a strong reference , you need to remove the added listeners using { @ link # removeChangeListener ( RealmChangeListener ) } <nl> - * or { @ link # removeAllChangeListeners ( ) } which removes all listeners including the ones added via anonymous classes . <nl> - * <nl> - * @ param listener the change listener . <nl> - * @ throws IllegalStateException if you try to register a listener from a non - Looper Thread . <nl> - * @ see io . realm . RealmChangeListener <nl> - * @ see # removeChangeListener ( RealmChangeListener ) <nl> - * @ see # removeAllChangeListeners ( ) <nl> - * / <nl> - public void addChangeListener ( RealmChangeListener < ? extends BaseRealm > listener ) { <nl> + protected void addListener ( RealmChangeListener < ? extends BaseRealm > listener ) { <nl> checkIfValid ( ) ; <nl> if ( ! handlerController . isAutoRefreshEnabled ( ) ) { <nl> throw new IllegalStateException ( " You can ' t register a listener from a non - Looper thread " ) ; <nl> @ @ - 158 , 7 + 139 , 6 @ @ abstract class BaseRealm implements Closeable { <nl> * @ param listener the change listener to be removed . <nl> * @ throws IllegalStateException if you try to remove a listener from a non - Looper Thread . <nl> * @ see io . realm . RealmChangeListener <nl> - * @ see # addChangeListener ( RealmChangeListener ) <nl> * / <nl> public void removeChangeListener ( RealmChangeListener < ? extends BaseRealm > listener ) { <nl> checkIfValid ( ) ; <nl> @ @ - 193 , 7 + 173 , 6 @ @ abstract class BaseRealm implements Closeable { <nl> * <nl> * @ throws IllegalStateException if you try to remove listeners from a non - Looper Thread . <nl> * @ see io . realm . RealmChangeListener <nl> - * @ see # addChangeListener ( RealmChangeListener ) <nl> * / <nl> public void removeAllChangeListeners ( ) { <nl> checkIfValid ( ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> index 1a9113d . . 0a9436b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> @ @ - 116 , 6 + 116 , 30 @ @ public final class DynamicRealm extends BaseRealm { <nl> return RealmQuery . createDynamicQuery ( this , className ) ; <nl> } <nl> <nl> + <nl> + / * * <nl> + * Adds a change listener to the Realm . <nl> + * < p > <nl> + * The listeners will be executed : <nl> + * < ul > <nl> + * < li > Immediately if a change was committed by the local thread < / li > <nl> + * < li > On every loop of a Handler thread if changes were committed by another thread < / li > <nl> + * < li > On every call to { @ link io . realm . Realm # refresh ( ) } < / li > <nl> + * < / ul > <nl> + * <nl> + * Listeners are stored as a strong reference , you need to remove the added listeners using { @ link # removeChangeListener ( RealmChangeListener ) } <nl> + * or { @ link # removeAllChangeListeners ( ) } which removes all listeners including the ones added via anonymous classes . <nl> + * <nl> + * @ param listener the change listener . <nl> + * @ throws IllegalStateException if you try to register a listener from a non - Looper Thread . <nl> + * @ see io . realm . RealmChangeListener <nl> + * @ see # removeChangeListener ( RealmChangeListener ) <nl> + * @ see # removeAllChangeListeners ( ) <nl> + * / <nl> + public void addChangeListener ( RealmChangeListener < DynamicRealm > listener ) { <nl> + super . addListener ( listener ) ; <nl> + } <nl> + <nl> / * * <nl> * Removes all objects of the specified class . <nl> * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 3cac62e . . c43883b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 954 , 6 + 954 , 29 @ @ public final class Realm extends BaseRealm { <nl> } <nl> <nl> / * * <nl> + * Adds a change listener to the Realm . <nl> + * < p > <nl> + * The listeners will be executed : <nl> + * < ul > <nl> + * < li > Immediately if a change was committed by the local thread < / li > <nl> + * < li > On every loop of a Handler thread if changes were committed by another thread < / li > <nl> + * < li > On every call to { @ link io . realm . Realm # refresh ( ) } < / li > <nl> + * < / ul > <nl> + * <nl> + * Listeners are stored as a strong reference , you need to remove the added listeners using { @ link # removeChangeListener ( RealmChangeListener ) } <nl> + * or { @ link # removeAllChangeListeners ( ) } which removes all listeners including the ones added via anonymous classes . <nl> + * <nl> + * @ param listener the change listener . <nl> + * @ throws IllegalStateException if you try to register a listener from a non - Looper Thread . <nl> + * @ see io . realm . RealmChangeListener <nl> + * @ see # removeChangeListener ( RealmChangeListener ) <nl> + * @ see # removeAllChangeListeners ( ) <nl> + * / <nl> + public void addChangeListener ( RealmChangeListener < Realm > listener ) { <nl> + super . addListener ( listener ) ; <nl> + } <nl> + <nl> + / * * <nl> * DEPRECATED : Use { @ code realm . where ( clazz ) . findAll ( ) } instead . <nl> * / <nl> @ Deprecated

TEST DIFF:
diff - - git a / examples / kotlinExample / build . gradle b / examples / kotlinExample / build . gradle 
 index 4936d60 . . 813315c 100644 
 - - - a / examples / kotlinExample / build . gradle 
 + + + b / examples / kotlinExample / build . gradle 
 @ @ - 52 , 6 + 52 , 5 @ @ android { 
 
 dependencies { 
 compile " org . jetbrains . kotlin : kotlin - stdlib : $ { kotlin _ version } " 
 - / / compile " org . jetbrains . kotlin : kotlin - reflect : $ { kotlin _ version } " 
 compile ' org . jetbrains . anko : anko - sdk15 : 0 . 8 . 2 ' 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index aeaeaae . . 00362ef 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 267 , 7 + 267 , 7 @ @ public class RealmTests { 
 @ Test 
 public void getInstance ( ) { 
 assertNotNull ( " Realm . getInstance unexpectedly returns null " , realm ) ; 
 - assertTrue ( " Realm . getInstance does not contain expected table " , realm . contains ( AllTypes . class ) ) ; 
 + assertTrue ( " Realm . getInstance does not contain expected table " , realm . getSchema ( ) . contains ( AllTypes . CLASS _ NAME ) ) ; 
 } 
 
 @ Test 
 @ @ - 1961 , 7 + 1961 , 6 @ @ public class RealmTests { 
 try { realm . copyToRealm ( ts ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . copyToRealmOrUpdate ( t ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . copyToRealmOrUpdate ( ts ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 - try { realm . remove ( AllTypes . class , 0 ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . delete ( AllTypes . class ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . deleteAll ( ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 index b2e64a9 . . ea871c3 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 @ @ - 119 , 13 + 119 , 12 @ @ public final class DynamicRealm extends BaseRealm { 
 / * * 
 * Adds a change listener to the Realm . 
 * < p > 
 - * The listeners will be executed on every loop of a Handler thread if 
 - * changes why committed by this or another thread . 
 + * The listeners will be executed on every loop of a Handler thread if changes are committed by 
 + * this or another thread . 
 * 
 - * Realm instances are cached , so for that reason it is important to 
 + * Realm instances are cached pr . thread , so for that reason it is important to 
 * remember to remove listeners again either using { @ link # removeChangeListener ( RealmChangeListener ) } 
 - * or { @ link # removeAllChangeListeners ( ) } . Not doing so can cause 
 - * memory leaks . 
 + * or { @ link # removeAllChangeListeners ( ) } . Not doing so can cause memory leaks . 
 * 
 * @ param listener the change listener . 
 * @ throws IllegalStateException if you try to register a listener from a non - Looper Thread . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 1cd8e74 . . d265e60 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 716 , 10 + 716 , 6 @ @ public final class Realm extends BaseRealm { 
 return get ( clazz , rowIndex ) ; 
 } 
 
 - void remove ( Class < ? extends RealmModel > clazz , long objectIndex ) { 
 - getTable ( clazz ) . moveLastOver ( objectIndex ) ; 
 - } 
 - 
 / * * 
 * Copies a RealmObject to the Realm instance and returns the copy . Any further changes to the original RealmObject 
 * will not be reflected in the Realm copy . This is a deep copy , so all referenced objects will be copied . Objects 
 @ @ - 916 , 10 + 912 , 6 @ @ public final class Realm extends BaseRealm { 
 return createDetachedCopy ( realmObject , maxDepth , new HashMap < RealmModel , RealmObjectProxy . CacheData < RealmModel > > ( ) ) ; 
 } 
 
 - boolean contains ( Class < ? extends RealmModel > clazz ) { 
 - return configuration . getSchemaMediator ( ) . getModelClasses ( ) . contains ( clazz ) ; 
 - } 
 - 
 / * * 
 * Returns a typed RealmQuery , which can be used to query for specific objects of this type 
 *

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 index 8a55467 . . 4778fbe 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 @ @ - 63 , 7 + 63 , 8 @ @ public class RealmChangeListenerTests { 
 @ Test 
 @ RunTestInLooperThread 
 public void returnedRealmIsNotNull ( ) { 
 - looperThread . realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 + Realm realm = looperThread . realm ; 
 + realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 @ Override 
 public void onChange ( Realm realm ) { 
 assertNotNull ( realm ) ; 
 @ @ - 71 , 8 + 72 , 8 @ @ public class RealmChangeListenerTests { 
 looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 - looperThread . realm . beginTransaction ( ) ; 
 - looperThread . realm . commitTransaction ( ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . commitTransaction ( ) ; 
 } 
 
 @ Test 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 6019132 . . 5c832b8 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 125 , 26 + 125 , 7 @ @ abstract class BaseRealm implements Closeable { 
 return ! sharedGroupManager . isImmutable ( ) ; 
 } 
 
 - / * * 
 - * Adds a change listener to the Realm . 
 - * < p > 
 - * The listeners will be executed : 
 - * < ul > 
 - * < li > Immediately if a change was committed by the local thread < / li > 
 - * < li > On every loop of a Handler thread if changes were committed by another thread < / li > 
 - * < li > On every call to { @ link io . realm . Realm # refresh ( ) } < / li > 
 - * < / ul > 
 - * 
 - * Listeners are stored as a strong reference , you need to remove the added listeners using { @ link # removeChangeListener ( RealmChangeListener ) } 
 - * or { @ link # removeAllChangeListeners ( ) } which removes all listeners including the ones added via anonymous classes . 
 - * 
 - * @ param listener the change listener . 
 - * @ throws IllegalStateException if you try to register a listener from a non - Looper Thread . 
 - * @ see io . realm . RealmChangeListener 
 - * @ see # removeChangeListener ( RealmChangeListener ) 
 - * @ see # removeAllChangeListeners ( ) 
 - * / 
 - public void addChangeListener ( RealmChangeListener < ? extends BaseRealm > listener ) { 
 + protected void addListener ( RealmChangeListener < ? extends BaseRealm > listener ) { 
 checkIfValid ( ) ; 
 if ( ! handlerController . isAutoRefreshEnabled ( ) ) { 
 throw new IllegalStateException ( " You can ' t register a listener from a non - Looper thread " ) ; 
 @ @ - 158 , 7 + 139 , 6 @ @ abstract class BaseRealm implements Closeable { 
 * @ param listener the change listener to be removed . 
 * @ throws IllegalStateException if you try to remove a listener from a non - Looper Thread . 
 * @ see io . realm . RealmChangeListener 
 - * @ see # addChangeListener ( RealmChangeListener ) 
 * / 
 public void removeChangeListener ( RealmChangeListener < ? extends BaseRealm > listener ) { 
 checkIfValid ( ) ; 
 @ @ - 193 , 7 + 173 , 6 @ @ abstract class BaseRealm implements Closeable { 
 * 
 * @ throws IllegalStateException if you try to remove listeners from a non - Looper Thread . 
 * @ see io . realm . RealmChangeListener 
 - * @ see # addChangeListener ( RealmChangeListener ) 
 * / 
 public void removeAllChangeListeners ( ) { 
 checkIfValid ( ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 index 1a9113d . . 0a9436b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 @ @ - 116 , 6 + 116 , 30 @ @ public final class DynamicRealm extends BaseRealm { 
 return RealmQuery . createDynamicQuery ( this , className ) ; 
 } 
 
 + 
 + / * * 
 + * Adds a change listener to the Realm . 
 + * < p > 
 + * The listeners will be executed : 
 + * < ul > 
 + * < li > Immediately if a change was committed by the local thread < / li > 
 + * < li > On every loop of a Handler thread if changes were committed by another thread < / li > 
 + * < li > On every call to { @ link io . realm . Realm # refresh ( ) } < / li > 
 + * < / ul > 
 + * 
 + * Listeners are stored as a strong reference , you need to remove the added listeners using { @ link # removeChangeListener ( RealmChangeListener ) } 
 + * or { @ link # removeAllChangeListeners ( ) } which removes all listeners including the ones added via anonymous classes . 
 + * 
 + * @ param listener the change listener . 
 + * @ throws IllegalStateException if you try to register a listener from a non - Looper Thread . 
 + * @ see io . realm . RealmChangeListener 
 + * @ see # removeChangeListener ( RealmChangeListener ) 
 + * @ see # removeAllChangeListeners ( ) 
 + * / 
 + public void addChangeListener ( RealmChangeListener < DynamicRealm > listener ) { 
 + super . addListener ( listener ) ; 
 + } 
 + 
 / * * 
 * Removes all objects of the specified class . 
 * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 3cac62e . . c43883b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 954 , 6 + 954 , 29 @ @ public final class Realm extends BaseRealm { 
 } 
 
 / * * 
 + * Adds a change listener to the Realm . 
 + * < p > 
 + * The listeners will be executed : 
 + * < ul > 
 + * < li > Immediately if a change was committed by the local thread < / li > 
 + * < li > On every loop of a Handler thread if changes were committed by another thread < / li > 
 + * < li > On every call to { @ link io . realm . Realm # refresh ( ) } < / li > 
 + * < / ul > 
 + * 
 + * Listeners are stored as a strong reference , you need to remove the added listeners using { @ link # removeChangeListener ( RealmChangeListener ) } 
 + * or { @ link # removeAllChangeListeners ( ) } which removes all listeners including the ones added via anonymous classes . 
 + * 
 + * @ param listener the change listener . 
 + * @ throws IllegalStateException if you try to register a listener from a non - Looper Thread . 
 + * @ see io . realm . RealmChangeListener 
 + * @ see # removeChangeListener ( RealmChangeListener ) 
 + * @ see # removeAllChangeListeners ( ) 
 + * / 
 + public void addChangeListener ( RealmChangeListener < Realm > listener ) { 
 + super . addListener ( listener ) ; 
 + } 
 + 
 + / * * 
 * DEPRECATED : Use { @ code realm . where ( clazz ) . findAll ( ) } instead . 
 * / 
 @ Deprecated
