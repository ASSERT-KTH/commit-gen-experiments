BLEU SCORE: 0.020244462660665517

TEST MSG: Using a custom tag ( @ Beta ) in javadoc . Add annotation @ Beta to public classes .
GENERATED MSG: Fixed bug in path when getting access tokens for Realms

TEST DIFF (one line): diff - - git a / realm - annotations / src / main / java / io / realm / annotations / Beta . java b / realm - annotations / src / main / java / io / realm / annotations / Beta . java <nl> new file mode 100644 <nl> index 0000000 . . f35dd4d <nl> - - - / dev / null <nl> + + + b / realm - annotations / src / main / java / io / realm / annotations / Beta . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . annotations ; <nl> + <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Retention ; <nl> + import java . lang . annotation . RetentionPolicy ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> + / * * <nl> + * This annotation is added to classes , constructors or methods which are considered in beta phase . <nl> + * It indicates that any public interface can change without prior announcements . <nl> + * Moreover , classes , constructors , and methods annotated as beta are not considered at production <nl> + * quality , and should be used with care . <nl> + * / <nl> + @ Retention ( RetentionPolicy . SOURCE ) <nl> + @ Target ( { ElementType . TYPE , ElementType . CONSTRUCTOR , ElementType . METHOD } ) <nl> + public @ interface Beta { <nl> + } <nl> diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index 2987477 . . 504bce7 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 138 , 6 + 138 , 11 @ @ task sourcesJar ( type : Jar ) { <nl> classifier = ' sources ' <nl> } <nl> <nl> + def betaTag = ' Beta : a : < div style = " border - style : solid ; border - width : 2px " > This software is considered in beta phase . ' + <nl> + ' It indicates that any public interface can change without prior announcements . ' + <nl> + ' Moreover , classes , constructors , and methods annotated as beta are not ' + <nl> + ' considered at production quality , and should be used with care . < / div > ' <nl> + <nl> task javadoc ( type : Javadoc ) { <nl> source android . sourceSets . objectServer . java . srcDirs <nl> source android . sourceSets . main . java . srcDirs <nl> @ @ - 155 , 6 + 160 , 8 @ @ task javadoc ( type : Javadoc ) { <nl> links " https : / / docs . oracle . com / javase / 7 / docs / api / " <nl> links " http : / / reactivex . io / RxJava / javadoc / " <nl> linksOffline " https : / / developer . android . com / reference / " , " $ { project . android . sdkDirectory } / docs / reference " <nl> + <nl> + tags = [ betaTag ] <nl> } <nl> exclude ' * * / internal / * * ' <nl> exclude ' * * / BuildConfig . java ' <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / AuthenticationListener . java b / realm / realm - library / src / objectServer / java / io / realm / AuthenticationListener . java <nl> index d7a2de6 . . 7fbed14 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / AuthenticationListener . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / AuthenticationListener . java <nl> @ @ - 16 , 9 + 16 , 13 @ @ <nl> <nl> package io . realm ; <nl> <nl> + import io . realm . annotations . Beta ; <nl> + <nl> / * * <nl> + * @ Beta <nl> * Interface describing events related to Users and their authentication <nl> * / <nl> + @ Beta <nl> public interface AuthenticationListener { <nl> / * * <nl> * A user was logged into the Object Server <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / Credentials . java b / realm / realm - library / src / objectServer / java / io / realm / Credentials . java <nl> index 144a935 . . 2f03ad6 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / Credentials . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / Credentials . java <nl> @ @ - 20 , 7 + 20 , 10 @ @ import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> + import io . realm . annotations . Beta ; <nl> + <nl> / * * <nl> + * @ Beta <nl> * Credentials represent a login with a 3rd party login provider in an OAuth2 login flow , and are used by the Realm <nl> * Object Server to verify the user and grant access . <nl> * < p > <nl> @ @ - 60 , 6 + 63 , 7 @ @ import java . util . Map ; <nl> * } <nl> * < / pre > <nl> * / <nl> + @ Beta <nl> public class Credentials { <nl> <nl> private String identityProvider ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ErrorCode . java b / realm / realm - library / src / objectServer / java / io / realm / ErrorCode . java <nl> index d3b1ca2 . . 17e0365 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / ErrorCode . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / ErrorCode . java <nl> @ @ - 16 , 9 + 16 , 13 @ @ <nl> <nl> package io . realm ; <nl> <nl> + import io . realm . annotations . Beta ; <nl> + <nl> / * * <nl> + * @ Beta <nl> * This class enumerate all potential errors related to using the Object Server or synchronizing data . <nl> * / <nl> + @ Beta <nl> public enum ErrorCode { <nl> <nl> / / See https : / / github . com / realm / realm - sync / blob / master / doc / protocol . md <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> index b859929 . . 069f32b 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> @ @ - 4 , 14 + 4 , 17 @ @ import android . content . Context ; <nl> import android . content . pm . PackageInfo ; <nl> <nl> import io . realm . android . SharedPrefsUserStore ; <nl> + import io . realm . annotations . Beta ; <nl> import io . realm . internal . Keep ; <nl> <nl> / * * <nl> + * @ Beta <nl> * Internal initializer class for the Object Server . <nl> * Use to keep the ` SyncManager ` free from Android dependencies <nl> * / <nl> @ SuppressWarnings ( " unused " ) <nl> @ Keep <nl> + @ Beta <nl> class ObjectServer { <nl> <nl> public static void init ( Context context ) { <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ObjectServerError . java b / realm / realm - library / src / objectServer / java / io / realm / ObjectServerError . java <nl> index fed409b . . bd2f0f46 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / ObjectServerError . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / ObjectServerError . java <nl> @ @ - 16 , 9 + 16 , 11 @ @ <nl> <nl> package io . realm ; <nl> <nl> + import io . realm . annotations . Beta ; <nl> import io . realm . internal . Util ; <nl> <nl> / * * <nl> + * @ Beta <nl> * This class is a wrapper for all errors happening when communicating with the Realm Object Server . <nl> * This include both exceptions and protocol errors . <nl> * <nl> @ @ - 28 , 6 + 30 , 7 @ @ import io . realm . internal . Util ; <nl> * <nl> * @ see ErrorCode for a list of possible errors . <nl> * / <nl> + @ Beta <nl> public class ObjectServerError extends RuntimeException { <nl> <nl> private final ErrorCode error ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / Session . java b / realm / realm - library / src / objectServer / java / io / realm / Session . java <nl> index 66253ce . . a5c44e2 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / Session . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / Session . java <nl> @ @ - 18 , 11 + 18 , 13 @ @ package io . realm ; <nl> <nl> import java . net . URI ; <nl> <nl> + import io . realm . annotations . Beta ; <nl> import io . realm . internal . Keep ; <nl> import io . realm . log . RealmLog ; <nl> import io . realm . internal . objectserver . SyncSession ; <nl> <nl> / * * <nl> + * @ Beta <nl> * This class represents the connection to the Realm Object Server for one { @ link SyncConfiguration } . <nl> * < p > <nl> * A Session is created by either calling { @ link SyncManager # getSession ( SyncConfiguration ) } or by opening <nl> @ @ - 37 , 6 + 39 , 7 @ @ import io . realm . internal . objectserver . SyncSession ; <nl> * @ see SessionState <nl> * / <nl> @ Keep <nl> + @ Beta <nl> public final class Session { <nl> <nl> private final SyncSession syncSession ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SessionState . java b / realm / realm - library / src / objectServer / java / io / realm / SessionState . java <nl> index d3e167e . . 9ede02c 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SessionState . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SessionState . java <nl> @ @ - 16 , 9 + 16 , 13 @ @ <nl> <nl> package io . realm ; <nl> <nl> + import io . realm . annotations . Beta ; <nl> + <nl> / * * <nl> + * @ Beta <nl> * Enum describing the various states the Session Finite - State - Machine can be in . <nl> * / <nl> + @ Beta <nl> public enum SessionState { <nl> INITIAL , / / Initial starting state <nl> UNBOUND , / / Start done , Realm is unbound . <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> index a28b2af . . e6eeebb 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> @ @ - 28 , 6 + 28 , 8 @ @ import java . util . Arrays ; <nl> import java . util . HashSet ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> + <nl> + import io . realm . annotations . Beta ; <nl> import io . realm . annotations . RealmModule ; <nl> import io . realm . exceptions . RealmException ; <nl> import io . realm . internal . RealmProxyMediator ; <nl> @ @ - 38 , 6 + 40 , 7 @ @ import io . realm . rx . RealmObservableFactory ; <nl> import io . realm . rx . RxObservableFactory ; <nl> <nl> / * * <nl> + * @ Beta <nl> * An { @ link SyncConfiguration } is used to setup a Realm that can be synchronized between devices using the Realm <nl> * Object Server . <nl> * < p > <nl> @ @ - 67 , 6 + 70 , 7 @ @ import io . realm . rx . RxObservableFactory ; <nl> * Synchronized Realms are created by using { @ link Realm # getInstance ( RealmConfiguration ) } and <nl> * { @ link Realm # getDefaultInstance ( ) } like ordinary unsynchronized Realms . <nl> * / <nl> + @ Beta <nl> public final class SyncConfiguration extends RealmConfiguration { <nl> <nl> public static final int PORT _ REALM = 80 ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> index c6a7fbe . . 56dfad5 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . ThreadPoolExecutor ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import io . realm . annotations . Beta ; <nl> import io . realm . internal . Keep ; <nl> import io . realm . internal . network . AuthenticationServer ; <nl> import io . realm . internal . network . OkHttpAuthenticationServer ; <nl> @ @ - 29 , 6 + 30 , 7 @ @ import io . realm . internal . objectserver . SyncSession ; <nl> import io . realm . log . RealmLog ; <nl> <nl> / * * <nl> + * @ Beta <nl> * The SyncManager is the central controller for interacting with the Realm Object Server . <nl> * It handles the creation of { @ link Session } s and it is possible to configure session defaults and the underlying <nl> * network client using this class . <nl> @ @ - 40 , 6 + 42 , 7 @ @ import io . realm . log . RealmLog ; <nl> * <nl> * / <nl> @ Keep <nl> + @ Beta <nl> public final class SyncManager { <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / User . java b / realm / realm - library / src / objectServer / java / io / realm / User . java <nl> index 2f84203 . . 41515d7 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / User . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / User . java <nl> @ @ - 32 , 18 + 32 , 19 @ @ import java . util . Collection ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . ThreadPoolExecutor ; <nl> <nl> - import io . realm . internal . IOException ; <nl> + import io . realm . annotations . Beta ; <nl> import io . realm . internal . Util ; <nl> import io . realm . internal . async . RealmAsyncTaskImpl ; <nl> - import io . realm . internal . objectserver . SyncUser ; <nl> - import io . realm . internal . objectserver . Token ; <nl> import io . realm . internal . network . AuthenticateResponse ; <nl> import io . realm . internal . network . AuthenticationServer ; <nl> - import io . realm . log . RealmLog ; <nl> import io . realm . internal . network . ExponentialBackoffTask ; <nl> import io . realm . internal . network . LogoutResponse ; <nl> + import io . realm . internal . objectserver . SyncUser ; <nl> + import io . realm . internal . objectserver . Token ; <nl> + import io . realm . log . RealmLog ; <nl> <nl> / * * <nl> + * @ Beta <nl> * This class represents a user on the Realm Object Server . The credentials are provided by various 3rd party <nl> * providers ( Facebook , Google , etc . ) . <nl> * < p > <nl> @ @ - 54 , 6 + 55 , 7 @ @ import io . realm . internal . network . LogoutResponse ; <nl> * Persisting a user between sessions , the user ' s credentials are stored locally on the device , and should be treated <nl> * as sensitive data . <nl> * / <nl> + @ Beta <nl> public class User { <nl> <nl> private final SyncUser syncUser ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / UserStore . java b / realm / realm - library / src / objectServer / java / io / realm / UserStore . java <nl> index c55aace . . 140d013 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / UserStore . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / UserStore . java <nl> @ @ - 19 , 8 + 19 , 10 @ @ package io . realm ; <nl> import java . util . Collection ; <nl> <nl> import io . realm . android . SharedPrefsUserStore ; <nl> + import io . realm . annotations . Beta ; <nl> <nl> / * * <nl> + * @ Beta <nl> * Interface for classes responsible for saving and retrieving Object Server users again . <nl> * < p > <nl> * Any implementation of a User Store is expected to not perform lengthy blocking operations as it might <nl> @ @ - 29 , 6 + 31 , 7 @ @ import io . realm . android . SharedPrefsUserStore ; <nl> * @ see SyncManager # setUserStore ( UserStore ) <nl> * @ see SharedPrefsUserStore <nl> * / <nl> + @ Beta <nl> public interface UserStore { <nl> <nl> String CURRENT _ USER _ KEY = " realm $ currentUser " ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> index e3fbc8c . . 75e31a0 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> @ @ - 21 , 10 + 21 , 10 @ @ import org . json . JSONObject ; <nl> <nl> import java . io . IOException ; <nl> <nl> - import io . realm . log . RealmLog ; <nl> import io . realm . ErrorCode ; <nl> - import io . realm . internal . objectserver . Token ; <nl> import io . realm . ObjectServerError ; <nl> + import io . realm . internal . objectserver . Token ; <nl> + import io . realm . log . RealmLog ; <nl> import okhttp3 . Response ; <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / LogoutResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / LogoutResponse . java <nl> index 1ee07bb . . 5439f9f 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / LogoutResponse . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / LogoutResponse . java <nl> @ @ - 18 , 9 + 18 , 9 @ @ package io . realm . internal . network ; <nl> <nl> import java . io . IOException ; <nl> <nl> - import io . realm . log . RealmLog ; <nl> import io . realm . ErrorCode ; <nl> import io . realm . ObjectServerError ; <nl> + import io . realm . log . RealmLog ; <nl> import okhttp3 . Response ; <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> index 2b5ae1e . . 2cac097 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import io . realm . Credentials ; <nl> import io . realm . ErrorCode ; <nl> import io . realm . ObjectServerError ; <nl> import io . realm . User ; <nl> - import io . realm . internal . Util ; <nl> import io . realm . internal . objectserver . Token ; <nl> import okhttp3 . Call ; <nl> import okhttp3 . MediaType ;
NEAREST DIFF (one line): diff - - git a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java <nl> index 4cfce02 . . 229d41b 100644 <nl> - - - a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java <nl> + + + b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java <nl> @ @ - 68 , 7 + 68 , 10 @ @ public class CounterActivity extends AppCompatActivity { <nl> . initialData ( new Realm . Transaction ( ) { <nl> @ Override <nl> public void execute ( Realm realm ) { <nl> - realm . createObject ( CRDTCounter . class , 1 ) ; <nl> + / / Workaround for initialData right now https : / / github . com / realm / realm - java - private / issues / 164 <nl> + if ( realm . isEmpty ( ) ) { <nl> + realm . createObject ( CRDTCounter . class , 1 ) ; <nl> + } <nl> } <nl> } ) <nl> . build ( ) ; <nl> diff - - git a / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java b / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java <nl> new file mode 100644 <nl> index 0000000 . . bc274b8 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java <nl> @ @ - 0 , 0 + 1 , 57 @ @ <nl> + package io . realm ; <nl> + <nl> + <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> + <nl> + import org . json . JSONException ; <nl> + import org . json . JSONObject ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import java . net . URI ; <nl> + import java . net . URISyntaxException ; <nl> + <nl> + import io . realm . internal . network . AuthenticateRequest ; <nl> + import io . realm . internal . objectserver . Token ; <nl> + import io . realm . util . SyncTestUtils ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + <nl> + @ RunWith ( AndroidJUnit4 . class ) <nl> + public class AuthenticateRequestTests { <nl> + <nl> + / / Tests based on the schemas described here : https : / / github . com / realm / realm - sync - services / blob / master / doc / index . apib <nl> + <nl> + @ Test <nl> + public void realmLogin ( ) throws URISyntaxException , JSONException { <nl> + Token t = SyncTestUtils . createTestUser ( ) . getSyncUser ( ) . getUserToken ( ) ; <nl> + AuthenticateRequest request = AuthenticateRequest . realmLogin ( t , new URI ( " realm : / / objectserver / " + t . value ( ) + " / default " ) ) ; <nl> + <nl> + JSONObject obj = new JSONObject ( request . toJson ( ) ) ; <nl> + assertEquals ( " / " + t . value ( ) + " / default " , obj . get ( " path " ) ) ; <nl> + assertEquals ( t . value ( ) , obj . get ( " data " ) ) ; <nl> + assertEquals ( " realm " , obj . get ( " provider " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void userLogin ( ) throws URISyntaxException , JSONException { <nl> + AuthenticateRequest request = AuthenticateRequest . userLogin ( Credentials . facebook ( " foo " ) ) ; <nl> + <nl> + JSONObject obj = new JSONObject ( request . toJson ( ) ) ; <nl> + assertFalse ( obj . has ( " path " ) ) ; <nl> + assertEquals ( " foo " , obj . get ( " data " ) ) ; <nl> + assertEquals ( " facebook " , obj . get ( " provider " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void userRefresh ( ) throws URISyntaxException , JSONException { <nl> + Token t = SyncTestUtils . createTestUser ( ) . getSyncUser ( ) . getUserToken ( ) ; <nl> + AuthenticateRequest request = AuthenticateRequest . userRefresh ( t ) ; <nl> + <nl> + JSONObject obj = new JSONObject ( request . toJson ( ) ) ; <nl> + assertFalse ( obj . has ( " path " ) ) ; <nl> + assertEquals ( t . value ( ) , obj . get ( " data " ) ) ; <nl> + assertEquals ( " realm " , obj . get ( " provider " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index d3dc934 . . 1830681 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 23 , 8 + 23 , 6 @ @ import android . os . Build ; <nl> import android . util . JsonReader ; <nl> import android . util . Log ; <nl> <nl> - import com . getkeepsafe . relinker . BuildConfig ; <nl> - <nl> import org . json . JSONArray ; <nl> import org . json . JSONException ; <nl> import org . json . JSONObject ; <nl> @ @ - 188 , 7 + 186 , 7 @ @ public final class Realm extends BaseRealm { <nl> throw new IllegalArgumentException ( " Non - null context required . " ) ; <nl> } <nl> RealmCore . loadLibrary ( context ) ; <nl> - RealmLog . add ( BuildConfig . DEBUG ? new AndroidLogger ( Log . DEBUG ) : new AndroidLogger ( Log . WARN ) ) ; <nl> + RealmLog . add ( io . realm . BuildConfig . DEBUG ? new AndroidLogger ( Log . DEBUG ) : new AndroidLogger ( Log . WARN ) ) ; <nl> defaultConfiguration = new RealmConfiguration . Builder ( context ) . build ( ) ; <nl> ObjectServerFacade . getSyncFacadeIfPossible ( ) . init ( context ) ; <nl> BaseRealm . applicationContext = context . getApplicationContext ( ) ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / User . java b / realm / realm - library / src / objectServer / java / io / realm / User . java <nl> index be2a111 . . 439ea59 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / User . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / User . java <nl> @ @ - 72 , 7 + 72 , 6 @ @ public class User { <nl> public static User currentUser ( ) { <nl> User user = SyncManager . getUserStore ( ) . get ( UserStore . CURRENT _ USER _ KEY ) ; <nl> if ( user ! = null & & user . isValid ( ) ) { <nl> - user . getSyncUser ( ) . scheduleRefresh ( ) ; <nl> return user ; <nl> } <nl> return null ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateRequest . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateRequest . java <nl> index 590599d . . cd2a3f0 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateRequest . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateRequest . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class AuthenticateRequest { <nl> / * * <nl> * Generates a proper login request for a new user . <nl> * / <nl> - public static AuthenticateRequest fromCredentials ( Credentials credentials ) { <nl> + public static AuthenticateRequest userLogin ( Credentials credentials ) { <nl> if ( credentials = = null ) { <nl> throw new IllegalArgumentException ( " Non - null credentials required . " ) ; <nl> } <nl> @ @ - 54 , 16 + 54 , 26 @ @ public class AuthenticateRequest { <nl> } <nl> <nl> / * * <nl> - * Authenticate access to a given Realm using an already logged in user . <nl> - * <nl> - * @ param refreshToken user ' s refresh token . <nl> + * Generates a request for refreshing a user token . <nl> * / <nl> - public static AuthenticateRequest fromRefreshToken ( Token refreshToken ) { <nl> + public static AuthenticateRequest userRefresh ( Token userToken ) { <nl> + return new AuthenticateRequest ( " realm " , <nl> + userToken . value ( ) , <nl> + SyncManager . APP _ ID , <nl> + null , <nl> + Collections . < String , Object > emptyMap ( ) <nl> + ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Generates a request for accessing a Realm <nl> + * / <nl> + public static AuthenticateRequest realmLogin ( Token userToken , URI serverUrl ) { <nl> / / Authenticate a given Realm path using an already logged in user . <nl> return new AuthenticateRequest ( " realm " , <nl> - refreshToken . value ( ) , <nl> + userToken . value ( ) , <nl> SyncManager . APP _ ID , <nl> - refreshToken . path ( ) , <nl> + serverUrl . getPath ( ) , <nl> Collections . < String , Object > emptyMap ( ) <nl> ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> index 1377186 . . 919c1ed 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { <nl> @ Override <nl> public AuthenticateResponse loginUser ( Credentials credentials , URL authenticationUrl ) { <nl> try { <nl> - String requestBody = AuthenticateRequest . fromCredentials ( credentials ) . toJson ( ) ; <nl> + String requestBody = AuthenticateRequest . userLogin ( credentials ) . toJson ( ) ; <nl> return authenticate ( authenticationUrl , requestBody ) ; <nl> } catch ( Exception e ) { <nl> return AuthenticateResponse . from ( new ObjectServerError ( ErrorCode . OTHER _ ERROR , Util . getStackTrace ( e ) ) ) ; <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { <nl> @ Override <nl> public AuthenticateResponse loginToRealm ( Token refreshToken , URI serverUrl , URL authenticationUrl ) { <nl> try { <nl> - String requestBody = AuthenticateRequest . fromRefreshToken ( refreshToken ) . toJson ( ) ; <nl> + String requestBody = AuthenticateRequest . realmLogin ( refreshToken , serverUrl ) . toJson ( ) ; <nl> return authenticate ( authenticationUrl , requestBody ) ; <nl> } catch ( Exception e ) { <nl> return AuthenticateResponse . from ( new ObjectServerError ( ErrorCode . UNKNOWN , e ) ) ; <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { <nl> @ Override <nl> public AuthenticateResponse refreshUser ( Token userToken , URL authenticationUrl ) { <nl> try { <nl> - String requestBody = AuthenticateRequest . fromRefreshToken ( userToken ) . toJson ( ) ; <nl> + String requestBody = AuthenticateRequest . userRefresh ( userToken ) . toJson ( ) ; <nl> return authenticate ( authenticationUrl , requestBody ) ; <nl> } catch ( Exception e ) { <nl> return AuthenticateResponse . from ( new ObjectServerError ( ErrorCode . UNKNOWN , e ) ) ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / AuthenticatingState . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / AuthenticatingState . java <nl> index e742799 . . efbb49c 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / AuthenticatingState . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / AuthenticatingState . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ import io . realm . ObjectServerError ; <nl> import io . realm . Session ; <nl> import io . realm . SessionState ; <nl> import io . realm . internal . network . NetworkStateReceiver ; <nl> + import io . realm . log . RealmLog ; <nl> <nl> / * * <nl> * AUTHENTICATING State . This step is needed if the user does not have proper access or credentials to access the <nl> @ @ - 100 , 11 + 101 , 13 @ @ class AuthenticatingState extends FsmState { <nl> session . authenticateRealm ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> + RealmLog . debug ( " Session [ % s ] : Access token acquired " , session . getConfiguration ( ) . getPath ( ) ) ; <nl> gotoNextState ( SessionState . BINDING ) ; <nl> } <nl> } , new Session . ErrorHandler ( ) { <nl> @ Override <nl> public void onError ( Session s , ObjectServerError error ) { <nl> + RealmLog . debug ( " Session [ % s ] : Failed to get access token ( % d ) " , session . getConfiguration ( ) . getPath ( ) , error . getErrorCode ( ) ) ; <nl> session . onError ( error ) ; <nl> } <nl> } ) ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncUser . java <nl> index e4a4ff0 . . 67f95fb 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncUser . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncUser . java <nl> @ @ - 14 , 8 + 14 , 6 @ @ package io . realm . internal . objectserver ; / * <nl> * limitations under the License . <nl> * / <nl> <nl> - import android . os . SystemClock ; <nl> - <nl> import org . json . JSONArray ; <nl> import org . json . JSONException ; <nl> import org . json . JSONObject ; <nl> @ @ - 27 , 19 + 25 , 12 @ @ import java . util . Collection ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> - import java . util . concurrent . Future ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import io . realm . RealmAsyncTask ; <nl> import io . realm . Session ; <nl> import io . realm . SyncConfiguration ; <nl> - import io . realm . SyncManager ; <nl> import io . realm . User ; <nl> - import io . realm . internal . network . AuthenticateResponse ; <nl> - import io . realm . internal . async . RealmAsyncTaskImpl ; <nl> - import io . realm . internal . network . AuthenticationServer ; <nl> - import io . realm . internal . network . ExponentialBackoffTask ; <nl> - import io . realm . log . RealmLog ; <nl> <nl> / * * <nl> * Internal representation of a user on the Realm Object Server . <nl> @ @ - 47 , 17 + 38 , 11 @ @ import io . realm . log . RealmLog ; <nl> * / <nl> public class SyncUser { <nl> <nl> - / / Time left on current refresh token , before we want to begin refreshing it . <nl> - / / Failing to refresh it before it expires , will result in the user no longer being valid , and not being able <nl> - / / to synchronize changes . It will still be possible to open Realms and read their data . <nl> - private final long REFRESH _ WINDOW _ MS = TimeUnit . SECONDS . toMillis ( 5 ) ; <nl> - <nl> private final String identity ; <nl> private Token refreshToken ; <nl> private URL authenticationUrl ; <nl> private Map < URI , AccessDescription > realms = new HashMap < URI , AccessDescription > ( ) ; <nl> private List < Session > sessions = new ArrayList < Session > ( ) ; <nl> - private RealmAsyncTask refreshTask ; <nl> private boolean loggedIn ; <nl> <nl> / * * <nl> @ @ - 72 , 36 + 57 , 6 @ @ public class SyncUser { <nl> <nl> public void setRefreshToken ( final Token refreshToken ) { <nl> this . refreshToken = refreshToken ; / / Replace any existing token . TODO re - save the user with latest token . <nl> - scheduleRefresh ( ) ; <nl> - } <nl> - <nl> - / / Schedule a refresh . This method cannot fail , but will continue retrying until either the app is killed <nl> - / / or the attempt was successful . <nl> - / / We should probably optimize this . See https : / / github . com / realm / realm - java - private / issues / 140 <nl> - public void scheduleRefresh ( ) { <nl> - final long expire = refreshToken . expiresMs ( ) ; <nl> - final AuthenticationServer server = SyncManager . getAuthServer ( ) ; <nl> - Future < ? > task = SyncManager . NETWORK _ POOL _ EXECUTOR . submit ( new ExponentialBackoffTask < AuthenticateResponse > ( ) { <nl> - @ Override <nl> - protected AuthenticateResponse execute ( ) { <nl> - long timeToExpiration = System . currentTimeMillis ( ) - expire ; <nl> - if ( timeToExpiration - REFRESH _ WINDOW _ MS > 0 ) { <nl> - SystemClock . sleep ( timeToExpiration ) ; <nl> - } <nl> - return server . refreshUser ( refreshToken , authenticationUrl ) ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void onSuccess ( AuthenticateResponse response ) { <nl> - setRefreshToken ( response . getRefreshToken ( ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void onError ( AuthenticateResponse response ) { <nl> - RealmLog . warn ( " Failed refreshing a user . \ n " + response . getError ( ) . toString ( ) ) ; <nl> - } <nl> - } ) ; <nl> - refreshTask = new RealmAsyncTaskImpl ( task , SyncManager . NETWORK _ POOL _ EXECUTOR ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 190 , 10 + 145 , 6 @ @ public class SyncUser { <nl> public void clearTokens ( ) { <nl> realms . clear ( ) ; <nl> refreshToken = null ; <nl> - if ( refreshTask ! = null ) { <nl> - refreshTask . cancel ( ) ; <nl> - refreshTask = null ; <nl> - } <nl> } <nl> <nl> public boolean isLoggedIn ( ) {

TEST DIFF:
diff - - git a / realm - annotations / src / main / java / io / realm / annotations / Beta . java b / realm - annotations / src / main / java / io / realm / annotations / Beta . java 
 new file mode 100644 
 index 0000000 . . f35dd4d 
 - - - / dev / null 
 + + + b / realm - annotations / src / main / java / io / realm / annotations / Beta . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . annotations ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . RetentionPolicy ; 
 + import java . lang . annotation . Target ; 
 + 
 + / * * 
 + * This annotation is added to classes , constructors or methods which are considered in beta phase . 
 + * It indicates that any public interface can change without prior announcements . 
 + * Moreover , classes , constructors , and methods annotated as beta are not considered at production 
 + * quality , and should be used with care . 
 + * / 
 + @ Retention ( RetentionPolicy . SOURCE ) 
 + @ Target ( { ElementType . TYPE , ElementType . CONSTRUCTOR , ElementType . METHOD } ) 
 + public @ interface Beta { 
 + } 
 diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index 2987477 . . 504bce7 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 138 , 6 + 138 , 11 @ @ task sourcesJar ( type : Jar ) { 
 classifier = ' sources ' 
 } 
 
 + def betaTag = ' Beta : a : < div style = " border - style : solid ; border - width : 2px " > This software is considered in beta phase . ' + 
 + ' It indicates that any public interface can change without prior announcements . ' + 
 + ' Moreover , classes , constructors , and methods annotated as beta are not ' + 
 + ' considered at production quality , and should be used with care . < / div > ' 
 + 
 task javadoc ( type : Javadoc ) { 
 source android . sourceSets . objectServer . java . srcDirs 
 source android . sourceSets . main . java . srcDirs 
 @ @ - 155 , 6 + 160 , 8 @ @ task javadoc ( type : Javadoc ) { 
 links " https : / / docs . oracle . com / javase / 7 / docs / api / " 
 links " http : / / reactivex . io / RxJava / javadoc / " 
 linksOffline " https : / / developer . android . com / reference / " , " $ { project . android . sdkDirectory } / docs / reference " 
 + 
 + tags = [ betaTag ] 
 } 
 exclude ' * * / internal / * * ' 
 exclude ' * * / BuildConfig . java ' 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / AuthenticationListener . java b / realm / realm - library / src / objectServer / java / io / realm / AuthenticationListener . java 
 index d7a2de6 . . 7fbed14 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / AuthenticationListener . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / AuthenticationListener . java 
 @ @ - 16 , 9 + 16 , 13 @ @ 
 
 package io . realm ; 
 
 + import io . realm . annotations . Beta ; 
 + 
 / * * 
 + * @ Beta 
 * Interface describing events related to Users and their authentication 
 * / 
 + @ Beta 
 public interface AuthenticationListener { 
 / * * 
 * A user was logged into the Object Server 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / Credentials . java b / realm / realm - library / src / objectServer / java / io / realm / Credentials . java 
 index 144a935 . . 2f03ad6 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / Credentials . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / Credentials . java 
 @ @ - 20 , 7 + 20 , 10 @ @ import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 + import io . realm . annotations . Beta ; 
 + 
 / * * 
 + * @ Beta 
 * Credentials represent a login with a 3rd party login provider in an OAuth2 login flow , and are used by the Realm 
 * Object Server to verify the user and grant access . 
 * < p > 
 @ @ - 60 , 6 + 63 , 7 @ @ import java . util . Map ; 
 * } 
 * < / pre > 
 * / 
 + @ Beta 
 public class Credentials { 
 
 private String identityProvider ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ErrorCode . java b / realm / realm - library / src / objectServer / java / io / realm / ErrorCode . java 
 index d3b1ca2 . . 17e0365 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / ErrorCode . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / ErrorCode . java 
 @ @ - 16 , 9 + 16 , 13 @ @ 
 
 package io . realm ; 
 
 + import io . realm . annotations . Beta ; 
 + 
 / * * 
 + * @ Beta 
 * This class enumerate all potential errors related to using the Object Server or synchronizing data . 
 * / 
 + @ Beta 
 public enum ErrorCode { 
 
 / / See https : / / github . com / realm / realm - sync / blob / master / doc / protocol . md 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 index b859929 . . 069f32b 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 @ @ - 4 , 14 + 4 , 17 @ @ import android . content . Context ; 
 import android . content . pm . PackageInfo ; 
 
 import io . realm . android . SharedPrefsUserStore ; 
 + import io . realm . annotations . Beta ; 
 import io . realm . internal . Keep ; 
 
 / * * 
 + * @ Beta 
 * Internal initializer class for the Object Server . 
 * Use to keep the ` SyncManager ` free from Android dependencies 
 * / 
 @ SuppressWarnings ( " unused " ) 
 @ Keep 
 + @ Beta 
 class ObjectServer { 
 
 public static void init ( Context context ) { 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ObjectServerError . java b / realm / realm - library / src / objectServer / java / io / realm / ObjectServerError . java 
 index fed409b . . bd2f0f46 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / ObjectServerError . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / ObjectServerError . java 
 @ @ - 16 , 9 + 16 , 11 @ @ 
 
 package io . realm ; 
 
 + import io . realm . annotations . Beta ; 
 import io . realm . internal . Util ; 
 
 / * * 
 + * @ Beta 
 * This class is a wrapper for all errors happening when communicating with the Realm Object Server . 
 * This include both exceptions and protocol errors . 
 * 
 @ @ - 28 , 6 + 30 , 7 @ @ import io . realm . internal . Util ; 
 * 
 * @ see ErrorCode for a list of possible errors . 
 * / 
 + @ Beta 
 public class ObjectServerError extends RuntimeException { 
 
 private final ErrorCode error ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / Session . java b / realm / realm - library / src / objectServer / java / io / realm / Session . java 
 index 66253ce . . a5c44e2 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / Session . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / Session . java 
 @ @ - 18 , 11 + 18 , 13 @ @ package io . realm ; 
 
 import java . net . URI ; 
 
 + import io . realm . annotations . Beta ; 
 import io . realm . internal . Keep ; 
 import io . realm . log . RealmLog ; 
 import io . realm . internal . objectserver . SyncSession ; 
 
 / * * 
 + * @ Beta 
 * This class represents the connection to the Realm Object Server for one { @ link SyncConfiguration } . 
 * < p > 
 * A Session is created by either calling { @ link SyncManager # getSession ( SyncConfiguration ) } or by opening 
 @ @ - 37 , 6 + 39 , 7 @ @ import io . realm . internal . objectserver . SyncSession ; 
 * @ see SessionState 
 * / 
 @ Keep 
 + @ Beta 
 public final class Session { 
 
 private final SyncSession syncSession ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SessionState . java b / realm / realm - library / src / objectServer / java / io / realm / SessionState . java 
 index d3e167e . . 9ede02c 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SessionState . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SessionState . java 
 @ @ - 16 , 9 + 16 , 13 @ @ 
 
 package io . realm ; 
 
 + import io . realm . annotations . Beta ; 
 + 
 / * * 
 + * @ Beta 
 * Enum describing the various states the Session Finite - State - Machine can be in . 
 * / 
 + @ Beta 
 public enum SessionState { 
 INITIAL , / / Initial starting state 
 UNBOUND , / / Start done , Realm is unbound . 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 index a28b2af . . e6eeebb 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 @ @ - 28 , 6 + 28 , 8 @ @ import java . util . Arrays ; 
 import java . util . HashSet ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 + 
 + import io . realm . annotations . Beta ; 
 import io . realm . annotations . RealmModule ; 
 import io . realm . exceptions . RealmException ; 
 import io . realm . internal . RealmProxyMediator ; 
 @ @ - 38 , 6 + 40 , 7 @ @ import io . realm . rx . RealmObservableFactory ; 
 import io . realm . rx . RxObservableFactory ; 
 
 / * * 
 + * @ Beta 
 * An { @ link SyncConfiguration } is used to setup a Realm that can be synchronized between devices using the Realm 
 * Object Server . 
 * < p > 
 @ @ - 67 , 6 + 70 , 7 @ @ import io . realm . rx . RxObservableFactory ; 
 * Synchronized Realms are created by using { @ link Realm # getInstance ( RealmConfiguration ) } and 
 * { @ link Realm # getDefaultInstance ( ) } like ordinary unsynchronized Realms . 
 * / 
 + @ Beta 
 public final class SyncConfiguration extends RealmConfiguration { 
 
 public static final int PORT _ REALM = 80 ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 index c6a7fbe . . 56dfad5 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . ThreadPoolExecutor ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import io . realm . annotations . Beta ; 
 import io . realm . internal . Keep ; 
 import io . realm . internal . network . AuthenticationServer ; 
 import io . realm . internal . network . OkHttpAuthenticationServer ; 
 @ @ - 29 , 6 + 30 , 7 @ @ import io . realm . internal . objectserver . SyncSession ; 
 import io . realm . log . RealmLog ; 
 
 / * * 
 + * @ Beta 
 * The SyncManager is the central controller for interacting with the Realm Object Server . 
 * It handles the creation of { @ link Session } s and it is possible to configure session defaults and the underlying 
 * network client using this class . 
 @ @ - 40 , 6 + 42 , 7 @ @ import io . realm . log . RealmLog ; 
 * 
 * / 
 @ Keep 
 + @ Beta 
 public final class SyncManager { 
 
 / * * 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / User . java b / realm / realm - library / src / objectServer / java / io / realm / User . java 
 index 2f84203 . . 41515d7 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / User . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / User . java 
 @ @ - 32 , 18 + 32 , 19 @ @ import java . util . Collection ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . ThreadPoolExecutor ; 
 
 - import io . realm . internal . IOException ; 
 + import io . realm . annotations . Beta ; 
 import io . realm . internal . Util ; 
 import io . realm . internal . async . RealmAsyncTaskImpl ; 
 - import io . realm . internal . objectserver . SyncUser ; 
 - import io . realm . internal . objectserver . Token ; 
 import io . realm . internal . network . AuthenticateResponse ; 
 import io . realm . internal . network . AuthenticationServer ; 
 - import io . realm . log . RealmLog ; 
 import io . realm . internal . network . ExponentialBackoffTask ; 
 import io . realm . internal . network . LogoutResponse ; 
 + import io . realm . internal . objectserver . SyncUser ; 
 + import io . realm . internal . objectserver . Token ; 
 + import io . realm . log . RealmLog ; 
 
 / * * 
 + * @ Beta 
 * This class represents a user on the Realm Object Server . The credentials are provided by various 3rd party 
 * providers ( Facebook , Google , etc . ) . 
 * < p > 
 @ @ - 54 , 6 + 55 , 7 @ @ import io . realm . internal . network . LogoutResponse ; 
 * Persisting a user between sessions , the user ' s credentials are stored locally on the device , and should be treated 
 * as sensitive data . 
 * / 
 + @ Beta 
 public class User { 
 
 private final SyncUser syncUser ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / UserStore . java b / realm / realm - library / src / objectServer / java / io / realm / UserStore . java 
 index c55aace . . 140d013 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / UserStore . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / UserStore . java 
 @ @ - 19 , 8 + 19 , 10 @ @ package io . realm ; 
 import java . util . Collection ; 
 
 import io . realm . android . SharedPrefsUserStore ; 
 + import io . realm . annotations . Beta ; 
 
 / * * 
 + * @ Beta 
 * Interface for classes responsible for saving and retrieving Object Server users again . 
 * < p > 
 * Any implementation of a User Store is expected to not perform lengthy blocking operations as it might 
 @ @ - 29 , 6 + 31 , 7 @ @ import io . realm . android . SharedPrefsUserStore ; 
 * @ see SyncManager # setUserStore ( UserStore ) 
 * @ see SharedPrefsUserStore 
 * / 
 + @ Beta 
 public interface UserStore { 
 
 String CURRENT _ USER _ KEY = " realm $ currentUser " ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 index e3fbc8c . . 75e31a0 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 @ @ - 21 , 10 + 21 , 10 @ @ import org . json . JSONObject ; 
 
 import java . io . IOException ; 
 
 - import io . realm . log . RealmLog ; 
 import io . realm . ErrorCode ; 
 - import io . realm . internal . objectserver . Token ; 
 import io . realm . ObjectServerError ; 
 + import io . realm . internal . objectserver . Token ; 
 + import io . realm . log . RealmLog ; 
 import okhttp3 . Response ; 
 
 / * * 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / LogoutResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / LogoutResponse . java 
 index 1ee07bb . . 5439f9f 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / LogoutResponse . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / LogoutResponse . java 
 @ @ - 18 , 9 + 18 , 9 @ @ package io . realm . internal . network ; 
 
 import java . io . IOException ; 
 
 - import io . realm . log . RealmLog ; 
 import io . realm . ErrorCode ; 
 import io . realm . ObjectServerError ; 
 + import io . realm . log . RealmLog ; 
 import okhttp3 . Response ; 
 
 / * * 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 index 2b5ae1e . . 2cac097 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import io . realm . Credentials ; 
 import io . realm . ErrorCode ; 
 import io . realm . ObjectServerError ; 
 import io . realm . User ; 
 - import io . realm . internal . Util ; 
 import io . realm . internal . objectserver . Token ; 
 import okhttp3 . Call ; 
 import okhttp3 . MediaType ;

NEAREST DIFF:
diff - - git a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java 
 index 4cfce02 . . 229d41b 100644 
 - - - a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java 
 + + + b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java 
 @ @ - 68 , 7 + 68 , 10 @ @ public class CounterActivity extends AppCompatActivity { 
 . initialData ( new Realm . Transaction ( ) { 
 @ Override 
 public void execute ( Realm realm ) { 
 - realm . createObject ( CRDTCounter . class , 1 ) ; 
 + / / Workaround for initialData right now https : / / github . com / realm / realm - java - private / issues / 164 
 + if ( realm . isEmpty ( ) ) { 
 + realm . createObject ( CRDTCounter . class , 1 ) ; 
 + } 
 } 
 } ) 
 . build ( ) ; 
 diff - - git a / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java b / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java 
 new file mode 100644 
 index 0000000 . . bc274b8 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package io . realm ; 
 + 
 + 
 + import android . support . test . runner . AndroidJUnit4 ; 
 + 
 + import org . json . JSONException ; 
 + import org . json . JSONObject ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import java . net . URI ; 
 + import java . net . URISyntaxException ; 
 + 
 + import io . realm . internal . network . AuthenticateRequest ; 
 + import io . realm . internal . objectserver . Token ; 
 + import io . realm . util . SyncTestUtils ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + 
 + @ RunWith ( AndroidJUnit4 . class ) 
 + public class AuthenticateRequestTests { 
 + 
 + / / Tests based on the schemas described here : https : / / github . com / realm / realm - sync - services / blob / master / doc / index . apib 
 + 
 + @ Test 
 + public void realmLogin ( ) throws URISyntaxException , JSONException { 
 + Token t = SyncTestUtils . createTestUser ( ) . getSyncUser ( ) . getUserToken ( ) ; 
 + AuthenticateRequest request = AuthenticateRequest . realmLogin ( t , new URI ( " realm : / / objectserver / " + t . value ( ) + " / default " ) ) ; 
 + 
 + JSONObject obj = new JSONObject ( request . toJson ( ) ) ; 
 + assertEquals ( " / " + t . value ( ) + " / default " , obj . get ( " path " ) ) ; 
 + assertEquals ( t . value ( ) , obj . get ( " data " ) ) ; 
 + assertEquals ( " realm " , obj . get ( " provider " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void userLogin ( ) throws URISyntaxException , JSONException { 
 + AuthenticateRequest request = AuthenticateRequest . userLogin ( Credentials . facebook ( " foo " ) ) ; 
 + 
 + JSONObject obj = new JSONObject ( request . toJson ( ) ) ; 
 + assertFalse ( obj . has ( " path " ) ) ; 
 + assertEquals ( " foo " , obj . get ( " data " ) ) ; 
 + assertEquals ( " facebook " , obj . get ( " provider " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void userRefresh ( ) throws URISyntaxException , JSONException { 
 + Token t = SyncTestUtils . createTestUser ( ) . getSyncUser ( ) . getUserToken ( ) ; 
 + AuthenticateRequest request = AuthenticateRequest . userRefresh ( t ) ; 
 + 
 + JSONObject obj = new JSONObject ( request . toJson ( ) ) ; 
 + assertFalse ( obj . has ( " path " ) ) ; 
 + assertEquals ( t . value ( ) , obj . get ( " data " ) ) ; 
 + assertEquals ( " realm " , obj . get ( " provider " ) ) ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index d3dc934 . . 1830681 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 23 , 8 + 23 , 6 @ @ import android . os . Build ; 
 import android . util . JsonReader ; 
 import android . util . Log ; 
 
 - import com . getkeepsafe . relinker . BuildConfig ; 
 - 
 import org . json . JSONArray ; 
 import org . json . JSONException ; 
 import org . json . JSONObject ; 
 @ @ - 188 , 7 + 186 , 7 @ @ public final class Realm extends BaseRealm { 
 throw new IllegalArgumentException ( " Non - null context required . " ) ; 
 } 
 RealmCore . loadLibrary ( context ) ; 
 - RealmLog . add ( BuildConfig . DEBUG ? new AndroidLogger ( Log . DEBUG ) : new AndroidLogger ( Log . WARN ) ) ; 
 + RealmLog . add ( io . realm . BuildConfig . DEBUG ? new AndroidLogger ( Log . DEBUG ) : new AndroidLogger ( Log . WARN ) ) ; 
 defaultConfiguration = new RealmConfiguration . Builder ( context ) . build ( ) ; 
 ObjectServerFacade . getSyncFacadeIfPossible ( ) . init ( context ) ; 
 BaseRealm . applicationContext = context . getApplicationContext ( ) ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / User . java b / realm / realm - library / src / objectServer / java / io / realm / User . java 
 index be2a111 . . 439ea59 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / User . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / User . java 
 @ @ - 72 , 7 + 72 , 6 @ @ public class User { 
 public static User currentUser ( ) { 
 User user = SyncManager . getUserStore ( ) . get ( UserStore . CURRENT _ USER _ KEY ) ; 
 if ( user ! = null & & user . isValid ( ) ) { 
 - user . getSyncUser ( ) . scheduleRefresh ( ) ; 
 return user ; 
 } 
 return null ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateRequest . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateRequest . java 
 index 590599d . . cd2a3f0 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateRequest . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateRequest . java 
 @ @ - 42 , 7 + 42 , 7 @ @ public class AuthenticateRequest { 
 / * * 
 * Generates a proper login request for a new user . 
 * / 
 - public static AuthenticateRequest fromCredentials ( Credentials credentials ) { 
 + public static AuthenticateRequest userLogin ( Credentials credentials ) { 
 if ( credentials = = null ) { 
 throw new IllegalArgumentException ( " Non - null credentials required . " ) ; 
 } 
 @ @ - 54 , 16 + 54 , 26 @ @ public class AuthenticateRequest { 
 } 
 
 / * * 
 - * Authenticate access to a given Realm using an already logged in user . 
 - * 
 - * @ param refreshToken user ' s refresh token . 
 + * Generates a request for refreshing a user token . 
 * / 
 - public static AuthenticateRequest fromRefreshToken ( Token refreshToken ) { 
 + public static AuthenticateRequest userRefresh ( Token userToken ) { 
 + return new AuthenticateRequest ( " realm " , 
 + userToken . value ( ) , 
 + SyncManager . APP _ ID , 
 + null , 
 + Collections . < String , Object > emptyMap ( ) 
 + ) ; 
 + } 
 + 
 + / * * 
 + * Generates a request for accessing a Realm 
 + * / 
 + public static AuthenticateRequest realmLogin ( Token userToken , URI serverUrl ) { 
 / / Authenticate a given Realm path using an already logged in user . 
 return new AuthenticateRequest ( " realm " , 
 - refreshToken . value ( ) , 
 + userToken . value ( ) , 
 SyncManager . APP _ ID , 
 - refreshToken . path ( ) , 
 + serverUrl . getPath ( ) , 
 Collections . < String , Object > emptyMap ( ) 
 ) ; 
 } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 index 1377186 . . 919c1ed 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 @ @ - 49 , 7 + 49 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { 
 @ Override 
 public AuthenticateResponse loginUser ( Credentials credentials , URL authenticationUrl ) { 
 try { 
 - String requestBody = AuthenticateRequest . fromCredentials ( credentials ) . toJson ( ) ; 
 + String requestBody = AuthenticateRequest . userLogin ( credentials ) . toJson ( ) ; 
 return authenticate ( authenticationUrl , requestBody ) ; 
 } catch ( Exception e ) { 
 return AuthenticateResponse . from ( new ObjectServerError ( ErrorCode . OTHER _ ERROR , Util . getStackTrace ( e ) ) ) ; 
 @ @ - 59 , 7 + 59 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { 
 @ Override 
 public AuthenticateResponse loginToRealm ( Token refreshToken , URI serverUrl , URL authenticationUrl ) { 
 try { 
 - String requestBody = AuthenticateRequest . fromRefreshToken ( refreshToken ) . toJson ( ) ; 
 + String requestBody = AuthenticateRequest . realmLogin ( refreshToken , serverUrl ) . toJson ( ) ; 
 return authenticate ( authenticationUrl , requestBody ) ; 
 } catch ( Exception e ) { 
 return AuthenticateResponse . from ( new ObjectServerError ( ErrorCode . UNKNOWN , e ) ) ; 
 @ @ - 69 , 7 + 69 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { 
 @ Override 
 public AuthenticateResponse refreshUser ( Token userToken , URL authenticationUrl ) { 
 try { 
 - String requestBody = AuthenticateRequest . fromRefreshToken ( userToken ) . toJson ( ) ; 
 + String requestBody = AuthenticateRequest . userRefresh ( userToken ) . toJson ( ) ; 
 return authenticate ( authenticationUrl , requestBody ) ; 
 } catch ( Exception e ) { 
 return AuthenticateResponse . from ( new ObjectServerError ( ErrorCode . UNKNOWN , e ) ) ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / AuthenticatingState . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / AuthenticatingState . java 
 index e742799 . . efbb49c 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / AuthenticatingState . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / AuthenticatingState . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import io . realm . ObjectServerError ; 
 import io . realm . Session ; 
 import io . realm . SessionState ; 
 import io . realm . internal . network . NetworkStateReceiver ; 
 + import io . realm . log . RealmLog ; 
 
 / * * 
 * AUTHENTICATING State . This step is needed if the user does not have proper access or credentials to access the 
 @ @ - 100 , 11 + 101 , 13 @ @ class AuthenticatingState extends FsmState { 
 session . authenticateRealm ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 + RealmLog . debug ( " Session [ % s ] : Access token acquired " , session . getConfiguration ( ) . getPath ( ) ) ; 
 gotoNextState ( SessionState . BINDING ) ; 
 } 
 } , new Session . ErrorHandler ( ) { 
 @ Override 
 public void onError ( Session s , ObjectServerError error ) { 
 + RealmLog . debug ( " Session [ % s ] : Failed to get access token ( % d ) " , session . getConfiguration ( ) . getPath ( ) , error . getErrorCode ( ) ) ; 
 session . onError ( error ) ; 
 } 
 } ) ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncUser . java 
 index e4a4ff0 . . 67f95fb 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncUser . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncUser . java 
 @ @ - 14 , 8 + 14 , 6 @ @ package io . realm . internal . objectserver ; / * 
 * limitations under the License . 
 * / 
 
 - import android . os . SystemClock ; 
 - 
 import org . json . JSONArray ; 
 import org . json . JSONException ; 
 import org . json . JSONObject ; 
 @ @ - 27 , 19 + 25 , 12 @ @ import java . util . Collection ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 - import java . util . concurrent . Future ; 
 import java . util . concurrent . TimeUnit ; 
 
 import io . realm . RealmAsyncTask ; 
 import io . realm . Session ; 
 import io . realm . SyncConfiguration ; 
 - import io . realm . SyncManager ; 
 import io . realm . User ; 
 - import io . realm . internal . network . AuthenticateResponse ; 
 - import io . realm . internal . async . RealmAsyncTaskImpl ; 
 - import io . realm . internal . network . AuthenticationServer ; 
 - import io . realm . internal . network . ExponentialBackoffTask ; 
 - import io . realm . log . RealmLog ; 
 
 / * * 
 * Internal representation of a user on the Realm Object Server . 
 @ @ - 47 , 17 + 38 , 11 @ @ import io . realm . log . RealmLog ; 
 * / 
 public class SyncUser { 
 
 - / / Time left on current refresh token , before we want to begin refreshing it . 
 - / / Failing to refresh it before it expires , will result in the user no longer being valid , and not being able 
 - / / to synchronize changes . It will still be possible to open Realms and read their data . 
 - private final long REFRESH _ WINDOW _ MS = TimeUnit . SECONDS . toMillis ( 5 ) ; 
 - 
 private final String identity ; 
 private Token refreshToken ; 
 private URL authenticationUrl ; 
 private Map < URI , AccessDescription > realms = new HashMap < URI , AccessDescription > ( ) ; 
 private List < Session > sessions = new ArrayList < Session > ( ) ; 
 - private RealmAsyncTask refreshTask ; 
 private boolean loggedIn ; 
 
 / * * 
 @ @ - 72 , 36 + 57 , 6 @ @ public class SyncUser { 
 
 public void setRefreshToken ( final Token refreshToken ) { 
 this . refreshToken = refreshToken ; / / Replace any existing token . TODO re - save the user with latest token . 
 - scheduleRefresh ( ) ; 
 - } 
 - 
 - / / Schedule a refresh . This method cannot fail , but will continue retrying until either the app is killed 
 - / / or the attempt was successful . 
 - / / We should probably optimize this . See https : / / github . com / realm / realm - java - private / issues / 140 
 - public void scheduleRefresh ( ) { 
 - final long expire = refreshToken . expiresMs ( ) ; 
 - final AuthenticationServer server = SyncManager . getAuthServer ( ) ; 
 - Future < ? > task = SyncManager . NETWORK _ POOL _ EXECUTOR . submit ( new ExponentialBackoffTask < AuthenticateResponse > ( ) { 
 - @ Override 
 - protected AuthenticateResponse execute ( ) { 
 - long timeToExpiration = System . currentTimeMillis ( ) - expire ; 
 - if ( timeToExpiration - REFRESH _ WINDOW _ MS > 0 ) { 
 - SystemClock . sleep ( timeToExpiration ) ; 
 - } 
 - return server . refreshUser ( refreshToken , authenticationUrl ) ; 
 - } 
 - 
 - @ Override 
 - protected void onSuccess ( AuthenticateResponse response ) { 
 - setRefreshToken ( response . getRefreshToken ( ) ) ; 
 - } 
 - 
 - @ Override 
 - protected void onError ( AuthenticateResponse response ) { 
 - RealmLog . warn ( " Failed refreshing a user . \ n " + response . getError ( ) . toString ( ) ) ; 
 - } 
 - } ) ; 
 - refreshTask = new RealmAsyncTaskImpl ( task , SyncManager . NETWORK _ POOL _ EXECUTOR ) ; 
 } 
 
 / * * 
 @ @ - 190 , 10 + 145 , 6 @ @ public class SyncUser { 
 public void clearTokens ( ) { 
 realms . clear ( ) ; 
 refreshToken = null ; 
 - if ( refreshTask ! = null ) { 
 - refreshTask . cancel ( ) ; 
 - refreshTask = null ; 
 - } 
 } 
 
 public boolean isLoggedIn ( ) {
