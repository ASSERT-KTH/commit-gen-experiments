BLEU SCORE: 0.11598118436136108

TEST MSG: Fix errorprone issues
GENERATED MSG: Remove generic parameter from RealmObject

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java <nl> index 3ac4e32 . . 0acf690 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java <nl> @ @ - 220 , 8 + 220 , 8 @ @ public class DynamicRealmObjectTests { <nl> try { <nl> callThreadConfinedMethod ( obj , method ) ; <nl> fail ( " IllegalStateException must be thrown . " ) ; <nl> - } catch ( Throwable e ) { <nl> - if ( e instanceof IllegalStateException & & expectedMessage . equals ( e . getMessage ( ) ) ) { <nl> + } catch ( IllegalStateException e ) { <nl> + if ( expectedMessage . equals ( e . getMessage ( ) ) ) { <nl> / / expected exception <nl> continue ; <nl> } <nl> @ @ - 1613 , 15 + 1613 , 14 @ @ public class DynamicRealmObjectTests { <nl> final DynamicRealmObject object = dynamicRealm . where ( AllTypes . CLASS _ NAME ) . findFirst ( ) ; <nl> <nl> final CountDownLatch threadFinished = new CountDownLatch ( 1 ) ; <nl> - final AtomicReference < Throwable > throwable = new AtomicReference < > ( ) ; <nl> final Thread thread = new Thread ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> try { <nl> object . getDynamicRealm ( ) ; <nl> fail ( ) ; <nl> - } catch ( Throwable t ) { <nl> - throwable . set ( t ) ; <nl> + } catch ( IllegalStateException e ) { <nl> + assertEquals ( BaseRealm . INCORRECT _ THREAD _ MESSAGE , e . getMessage ( ) ) ; <nl> } finally { <nl> threadFinished . countDown ( ) ; <nl> } <nl> @ @ - 1629 , 11 + 1628 , 5 @ @ public class DynamicRealmObjectTests { <nl> } ) ; <nl> thread . start ( ) ; <nl> TestHelper . awaitOrFail ( threadFinished ) ; <nl> - <nl> - final Throwable thrownInTheThread = throwable . get ( ) ; <nl> - if ( ! ( thrownInTheThread instanceof IllegalStateException ) ) { <nl> - throw thrownInTheThread ; <nl> - } <nl> - assertEquals ( BaseRealm . INCORRECT _ THREAD _ MESSAGE , thrownInTheThread . getMessage ( ) ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / ManagedOrderedRealmCollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / ManagedOrderedRealmCollectionTests . java <nl> index c50e59c . . 366d439 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / ManagedOrderedRealmCollectionTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / ManagedOrderedRealmCollectionTests . java <nl> @ @ - 779 , 10 + 779 , 10 @ @ public class ManagedOrderedRealmCollectionTests extends CollectionTests { <nl> case REMOVE _ INDEX : collection . remove ( 0 ) ; break ; <nl> } <nl> fail ( " Unknown method or it failed to throw : " + method ) ; <nl> - } catch ( Throwable t ) { <nl> - if ( ! t . getClass ( ) . equals ( expected ) ) { <nl> - fail ( method + " didn ' t throw the expected exception . Was : " + t + " , expected : " + expected ) ; <nl> - } <nl> + } catch ( IllegalStateException e ) { <nl> + assertEquals ( expected , e . getClass ( ) ) ; <nl> + } catch ( UnsupportedOperationException e ) { <nl> + assertEquals ( expected , e . getClass ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java <nl> index 96fc619 . . b27d7b3 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java <nl> @ @ - 784 , 10 + 784 , 10 @ @ public class ManagedRealmCollectionTests extends CollectionTests { <nl> case RETAIN _ ALL : collection . retainAll ( Collections . singletonList ( new AllJavaTypes ( ) ) ) ; break ; <nl> } <nl> fail ( " Unknown method or it failed to throw : " + method ) ; <nl> - } catch ( Throwable t ) { <nl> - if ( ! t . getClass ( ) . equals ( expected ) ) { <nl> - fail ( method + " didn ' t throw the expected exception . Was : " + t + " , expected : " + expected ) ; <nl> - } <nl> + } catch ( IllegalStateException e ) { <nl> + assertEquals ( expected , e . getClass ( ) ) ; <nl> + } catch ( UnsupportedOperationException e ) { <nl> + assertEquals ( expected , e . getClass ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java b / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java <nl> index d7e705a . . 706182e 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java <nl> @ @ - 429 , 6 + 429 , 7 @ @ public class OrderedRealmCollectionIteratorTests extends CollectionTests { <nl> <nl> try { <nl> it . remove ( ) ; <nl> + fail ( ) ; <nl> } catch ( IllegalStateException e ) { <nl> assertRealmList ( ) ; <nl> } catch ( UnsupportedOperationException e ) { <nl> @ @ - 612 , 6 + 613 , 7 @ @ public class OrderedRealmCollectionIteratorTests extends CollectionTests { <nl> assertEquals ( 42 , obj . getFieldLong ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> public void listIterator _ add ( ) { <nl> if ( skipTest ( CollectionClass . REALMRESULTS ) ) { <nl> return ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> index 667336c . . 8d99101 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> @ @ - 2080 , 23 + 2080 , 20 @ @ public class RealmObjectTests { <nl> realm . commitTransaction ( ) ; <nl> <nl> final CountDownLatch threadFinished = new CountDownLatch ( 1 ) ; <nl> - final AtomicReference < Throwable > throwable = new AtomicReference < > ( ) ; <nl> final Thread thread = new Thread ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> try { <nl> object . getRealm ( ) ; <nl> fail ( ) ; <nl> - } catch ( Throwable t ) { <nl> - throwable . set ( t ) ; <nl> - threadFinished . countDown ( ) ; <nl> - return ; <nl> + } catch ( IllegalStateException e ) { <nl> + assertEquals ( BaseRealm . INCORRECT _ THREAD _ MESSAGE , e . getMessage ( ) ) ; <nl> } <nl> try { <nl> RealmObject . getRealm ( object ) ; <nl> fail ( ) ; <nl> - } catch ( Throwable t ) { <nl> - throwable . set ( t ) ; <nl> + } catch ( IllegalStateException e ) { <nl> + assertEquals ( BaseRealm . INCORRECT _ THREAD _ MESSAGE , e . getMessage ( ) ) ; <nl> } finally { <nl> threadFinished . countDown ( ) ; <nl> } <nl> @ @ - 2104 , 12 + 2101 , 6 @ @ public class RealmObjectTests { <nl> } ) ; <nl> thread . start ( ) ; <nl> TestHelper . awaitOrFail ( threadFinished ) ; <nl> - <nl> - final Throwable thrownInTheThread = throwable . get ( ) ; <nl> - if ( ! ( thrownInTheThread instanceof IllegalStateException ) ) { <nl> - throw thrownInTheThread ; <nl> - } <nl> - assertEquals ( BaseRealm . INCORRECT _ THREAD _ MESSAGE , thrownInTheThread . getMessage ( ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> index 35456d2 . . e1a1d52 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> @ @ - 357 , 7 + 357 , 6 @ @ public class RealmQueryTests extends QueryTests { <nl> public void callThreadConfinedMethodsFromWrongThread ( ) throws Throwable { <nl> final RealmQuery < AllJavaTypes > query = realm . where ( AllJavaTypes . class ) ; <nl> <nl> - final AtomicReference < Throwable > throwableFromThread = new AtomicReference < Throwable > ( ) ; <nl> final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; <nl> <nl> final String expectedMessage ; <nl> @ @ - 380 , 13 + 379 , 8 @ @ public class RealmQueryTests extends QueryTests { <nl> try { <nl> callThreadConfinedMethod ( query , method ) ; <nl> fail ( " IllegalStateException must be thrown . " ) ; <nl> - } catch ( Throwable e ) { <nl> - if ( e instanceof IllegalStateException & & expectedMessage . equals ( e . getMessage ( ) ) ) { <nl> - / / expected exception <nl> - continue ; <nl> - } <nl> - throwableFromThread . set ( e ) ; <nl> - return ; <nl> + } catch ( IllegalStateException e ) { <nl> + assertEquals ( expectedMessage , e . getMessage ( ) ) ; <nl> } <nl> } <nl> } finally { <nl> @ @ - 397 , 10 + 391 , 6 @ @ public class RealmQueryTests extends QueryTests { <nl> thread . start ( ) ; <nl> <nl> TestHelper . awaitOrFail ( testFinished ) ; <nl> - final Throwable throwable = throwableFromThread . get ( ) ; <nl> - if ( throwable ! = null ) { <nl> - throw throwable ; <nl> - } <nl> } <nl> <nl> @ Test <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> index 7c12ddb . . 73db5a1 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> @ @ - 628 , 24 + 628 , 28 @ @ public class RealmSchemaTests { <nl> <nl> try { <nl> realmSchema . create ( " Foo " ) ; <nl> + fail ( ) ; <nl> } catch ( IllegalStateException expected ) { <nl> assertThat ( expected . getMessage ( ) , CoreMatchers . containsString ( " transaction " ) ) ; <nl> } <nl> <nl> try { <nl> realmSchema . createWithPrimaryKeyField ( " Foo " , " PK " , String . class ) ; <nl> + fail ( ) ; <nl> } catch ( IllegalStateException expected ) { <nl> assertThat ( expected . getMessage ( ) , CoreMatchers . containsString ( " transaction " ) ) ; <nl> } <nl> <nl> try { <nl> realmSchema . remove ( " Cat " ) ; <nl> + fail ( ) ; <nl> } catch ( IllegalStateException expected ) { <nl> assertThat ( expected . getMessage ( ) , CoreMatchers . containsString ( " transaction " ) ) ; <nl> } <nl> <nl> try { <nl> realmSchema . rename ( " Cat " , " Foo1 " ) ; <nl> + fail ( ) ; <nl> } catch ( IllegalStateException expected ) { <nl> assertThat ( expected . getMessage ( ) , CoreMatchers . containsString ( " transaction " ) ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index 7d87271 . . 509d05f 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 4017 , 7 + 4017 , 6 @ @ public class RealmTests { <nl> @ Test <nl> public void waitForChange _ onLooperThread ( ) throws Throwable { <nl> final CountDownLatch bgRealmClosed = new CountDownLatch ( 1 ) ; <nl> - final ExceptionHolder bgError = new ExceptionHolder ( ) ; <nl> <nl> Thread thread = new Thread ( new Runnable ( ) { <nl> @ Override <nl> @ @ - 4027 , 8 + 4026 , 7 @ @ public class RealmTests { <nl> try { <nl> realm . waitForChange ( ) ; <nl> fail ( ) ; <nl> - } catch ( Throwable expected ) { <nl> - bgError . setException ( expected ) ; <nl> + } catch ( IllegalStateException ignored ) { <nl> } finally { <nl> realm . close ( ) ; <nl> bgRealmClosed . countDown ( ) ; <nl> @ @ - 4038 , 10 + 4036 , 6 @ @ public class RealmTests { <nl> thread . start ( ) ; <nl> <nl> TestHelper . awaitOrFail ( bgRealmClosed ) ; <nl> - if ( bgError . getException ( ) instanceof AssertionError ) { <nl> - throw bgError . getException ( ) ; <nl> - } <nl> - assertEquals ( IllegalStateException . class , bgError . getException ( ) . getClass ( ) ) ; <nl> } <nl> <nl> / / Cannot wait inside of a transaction . <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> index 287d17b . . 06e6792 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> @ @ - 619 , 7 + 619 , 7 @ @ public class SortTest { <nl> @ Test <nl> public void sortCaseSensitive ( ) { <nl> chars = " ' - ! \ " # $ % & ( ) * , . / : ; ? _ + < = > 123aAbBcCxXyYzZ " ; <nl> - createAndTest ( new StringBuffer ( chars ) . reverse ( ) . toString ( ) ) ; <nl> + createAndTest ( new StringBuilder ( chars ) . reverse ( ) . toString ( ) ) ; <nl> <nl> / / try all permutations - keep the list short <nl> chars = " 12aAbB " ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> index ebc149f . . 31d7396 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> @ @ - 80 , 7 + 80 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { <nl> / / events ( Callbacks happening in the future ) , so we add a strong reference <nl> / / to them for the duration of the test . <nl> / / Access guarded by ' lock ' <nl> - private LinkedList < Object > keepStrongReference ; <nl> + private List < Object > keepStrongReference ; <nl> <nl> / / Custom Realm used by the test . Saving the reference here will guarantee <nl> / / that the instance is closed when exiting the test . <nl> @ @ - 266 , 9 + 266 , 9 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { <nl> super . before ( ) ; <nl> <nl> RealmConfiguration config = createConfiguration ( UUID . randomUUID ( ) . toString ( ) ) ; <nl> - LinkedList < Object > refs = new LinkedList < > ( ) ; <nl> - List < Realm > realms = new LinkedList < > ( ) ; <nl> - LinkedList < Closeable > closeables = new LinkedList < > ( ) ; <nl> + List < Object > refs = new ArrayList < > ( ) ; <nl> + List < Realm > realms = new ArrayList < > ( ) ; <nl> + List < Closeable > closeables = new ArrayList < > ( ) ; <nl> <nl> synchronized ( lock ) { <nl> realmConfiguration = config ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> index 1399b3e . . 3dac06e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> @ @ - 20 , 11 + 20 , 11 @ @ import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . lang . ref . WeakReference ; <nl> + import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . EnumMap ; <nl> import java . util . Iterator ; <nl> - import java . util . LinkedList ; <nl> import java . util . List ; <nl> import java . util . concurrent . ConcurrentLinkedQueue ; <nl> import java . util . concurrent . CountDownLatch ; <nl> @ @ - 200 , 7 + 200 , 7 @ @ final class RealmCache { <nl> / / are not allowed and an exception will be thrown when trying to add it to the cache list . <nl> / / A weak ref is used to hold the RealmCache instance . The weak ref entry will be cleared if and only if there <nl> / / is no Realm instance holding a strong ref to it and there is no Realm instance associated it is BEING created . <nl> - private static final List < WeakReference < RealmCache > > cachesList = new LinkedList < WeakReference < RealmCache > > ( ) ; <nl> + private static final List < WeakReference < RealmCache > > cachesList = new ArrayList < WeakReference < RealmCache > > ( ) ; <nl> <nl> / / See leak ( ) <nl> / / isLeaked flag is used to avoid adding strong ref multiple times without iterating the list . <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / PermissionManager . java b / realm / realm - library / src / objectServer / java / io / realm / PermissionManager . java <nl> index 9d1acc3 . . d41906a 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / PermissionManager . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / PermissionManager . java <nl> @ @ - 24 , 10 + 24 , 8 @ @ import java . net . URISyntaxException ; <nl> import java . net . URL ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> - import java . util . Deque ; <nl> import java . util . HashMap ; <nl> import java . util . LinkedHashMap ; <nl> - import java . util . LinkedList ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 142 , 7 + 140 , 7 @ @ public class PermissionManager implements Closeable { <nl> private Realm defaultPermissionRealm ; <nl> <nl> / / Task list used to queue tasks until the underlying Realms are done opening ( or failed doing so ) . <nl> - private Deque < PermissionManagerTask > delayedTasks = new LinkedList < > ( ) ; <nl> + private List < PermissionManagerTask > delayedTasks = new ArrayList < > ( ) ; <nl> <nl> / / List of tasks that are being processed . Used to keep strong references for listeners to work . <nl> / / The task must remove itself from this list once it either completes
NEAREST DIFF (one line): diff - - git a / examples / rxJavaExample / README . md b / examples / rxJavaExample / README . md <nl> index 3f33bfa . . ea203c2 100644 <nl> - - - a / examples / rxJavaExample / README . md <nl> + + + b / examples / rxJavaExample / README . md <nl> @ @ - 5 , 13 + 5 , 17 @ @ <nl> - Observables might have a default Scheduler they operate on that is <nl> different than the one the RealmObject was created on . <nl> <nl> - - RealmObjects auto - update . Observables that operate on multiple " versions " <nl> + - RealmObjects are live objects that automatically staty up to date . Observables that operate on multiple " versions " <nl> will most likely not work as expected . <nl> <nl> - Retrofit automatically offload to a worker thread . <nl> <nl> - Use Realm async API instead of subscribeOn to offload Realm work . <nl> <nl> + - You can use Realm . copyFromRealm to make a copy of Realm data <nl> + <nl> + <nl> + <nl> <nl> # # Resources ( TODO ) <nl> - http : / / www . grahamlea . com / 2014 / 07 / rxjava - threading - examples / <nl> \ No newline at end of file <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> index 12a0c4a . . ff099ad 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ public class RxJavaTests extends AndroidTestCase { <nl> realm . commitTransaction ( ) ; <nl> <nl> final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> @ Override <nl> public void call ( AllTypes rxObject ) { <nl> assertTrue ( rxObject = = obj ) ; <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class RxJavaTests extends AndroidTestCase { <nl> final AllTypes obj = realm . createObject ( AllTypes . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> @ Override <nl> public void call ( AllTypes rxObject ) { <nl> subscriberCalled . addAndGet ( 1 ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index a3e5103 . . 4e420ec 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 25 , 15 + 25 , 12 @ @ import java . lang . ref . ReferenceQueue ; <nl> import java . lang . ref . WeakReference ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> - import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> - import java . util . Set ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> - import java . util . concurrent . CopyOnWriteArraySet ; <nl> <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> import io . realm . internal . SharedGroupManager ; <nl> @ @ - 44 , 7 + 41 , 6 @ @ import io . realm . internal . android . DebugAndroidLogger ; <nl> import io . realm . internal . android . ReleaseAndroidLogger ; <nl> import io . realm . internal . async . RealmThreadPoolExecutor ; <nl> import io . realm . internal . log . RealmLog ; <nl> - import io . realm . rx . RxObservableFactory ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 53 , 7 + 49 , 7 @ @ import rx . Observable ; <nl> * @ see io . realm . Realm <nl> * @ see io . realm . DynamicRealm <nl> * / <nl> - public abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> + public abstract class BaseRealm < T extends BaseRealm < T > > implements Closeable { <nl> protected static final long UNVERSIONED = - 1 ; <nl> private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; <nl> private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; <nl> @ @ - 203 , 8 + 199 , 8 @ @ public abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public Observable < E > observable ( ) { <nl> - return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; <nl> + public Observable < T > observable ( ) { <nl> + return ( Observable < T > ) configuration . getRxFactory ( ) . from ( this ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> index f979667 . . 627ac4a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ import io . realm . internal . TableView ; <nl> * @ see Realm <nl> * @ see RealmSchema <nl> * / <nl> - public final class DynamicRealm extends BaseRealm { <nl> + public final class DynamicRealm extends BaseRealm < DynamicRealm > { <nl> <nl> private DynamicRealm ( RealmConfiguration configuration , boolean autoRefresh ) { <nl> super ( configuration , autoRefresh ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> index 40ad05a . . 318e9e9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ import io . realm . internal . android . JsonUtils ; <nl> * Class that wraps a normal RealmObject in order to allow dynamic access instead of a typed interface . <nl> * Using a DynamicRealmObject is slower than using the regular RealmObject class . <nl> * / <nl> - public final class DynamicRealmObject extends RealmObject < DynamicRealmObject > { <nl> + public final class DynamicRealmObject extends RealmObject { <nl> <nl> / * * <nl> * Creates a dynamic Realm object based on an existing object . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> index 5283cb5 . . 24824b6 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ class RealmCache { <nl> * @ param realmClass class of { @ link Realm } or { @ link DynamicRealm } to be created in or gotten from the cache . <nl> * @ return the { @ link Realm } or { @ link DynamicRealm } instance . <nl> * / <nl> - static synchronized < E extends BaseRealm > E createRealmOrGetFromCache ( RealmConfiguration configuration , <nl> + static synchronized < E extends BaseRealm < E > > E createRealmOrGetFromCache ( RealmConfiguration configuration , <nl> Class < E > realmClass ) { <nl> boolean isCacheInMap = true ; <nl> RealmCache cache = cachesMap . get ( configuration . getPath ( ) ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 3978bfc . . 34960d0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ import rx . Observable ; <nl> * / <nl> <nl> @ RealmClass <nl> - public abstract class RealmObject < E extends RealmObject > { <nl> + public abstract class RealmObject { <nl> <nl> protected Row row ; <nl> protected BaseRealm realm ; <nl> @ @ - 255 , 7 + 255 , 10 @ @ public abstract class RealmObject < E extends RealmObject > { <nl> * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public Observable < E > observable ( ) { <nl> + public < E extends RealmObject > Observable < E > observable ( Class < E > type ) { <nl> + if ( ! this . getClass ( ) . isInstance ( type ) ) { <nl> + throw new IllegalArgumentException ( " This RealmObject cannot be cast to the desired type : " + type ) ; <nl> + } <nl> return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 89274ba . . fde3390 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1719 , 86 + 1719 , 16 @ @ public class RealmQuery < E extends RealmObject > { <nl> * @ return the object found or { @ code null } if no object matches the query conditions . <nl> * @ see io . realm . RealmObject <nl> * / <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public E findFirst ( ) { <nl> checkQueryIsNotReused ( ) ; <nl> long rowIndex = this . query . find ( ) ; <nl> if ( rowIndex > = 0 ) { <nl> - return ( E ) realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; <nl> + return realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; <nl> } else { <nl> return null ; <nl> } <nl> } <nl> <nl> - / / FIXME Replace with Schema when it is available <nl> - private static class DynamicColumnMap implements Map < String , Long > { <nl> - private final Table table ; <nl> - <nl> - public DynamicColumnMap ( Table table ) { <nl> - this . table = table ; <nl> - } <nl> - <nl> - @ Override <nl> - public Long get ( Object key ) { <nl> - return table . getColumnIndex ( ( String ) key ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void clear ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean containsKey ( Object key ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean containsValue ( Object value ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Set < Entry < String , Long > > entrySet ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isEmpty ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Set < String > keySet ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Long put ( String key , Long value ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void putAll ( Map < ? extends String , ? extends Long > map ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Long remove ( Object key ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int size ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Collection < Long > values ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Similar to { @ link # findFirst ( ) } but runs asynchronously on a worker thread <nl> * This method is only available from a Looper thread . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index db09759 . . 3629486 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 157 , 15 + 157 , 14 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> * @ throws IndexOutOfBoundsException if { @ code location < 0 | | location > = size ( ) } . <nl> * / <nl> @ Override <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public E get ( int location ) { <nl> E obj ; <nl> realm . checkIfValid ( ) ; <nl> TableOrView table = getTable ( ) ; <nl> if ( table instanceof TableView ) { <nl> - obj = ( E ) realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; <nl> + obj = realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; <nl> } else { <nl> - obj = ( E ) realm . get ( classSpec , className , location ) ; <nl> + obj = realm . get ( classSpec , className , location ) ; <nl> } <nl> <nl> return obj ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> index 718e705 . . 940f217 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ public final class RealmObservableFactory implements RxObservableFactory { <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> + public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> checkRxJavaAvailable ( ) ; <nl> return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> @ Override <nl> @ @ - 106 , 13 + 106 , 13 @ @ public final class RealmObservableFactory implements RxObservableFactory { <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> + public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> checkRxJavaAvailable ( ) ; <nl> throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject < E > > Observable < E > from ( final E object ) { <nl> + public < E extends RealmObject > Observable < E > from ( final E object ) { <nl> checkRxJavaAvailable ( ) ; <nl> return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> @ Override <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> index 0984f85 . . 14fd548 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ public interface RxObservableFactory { <nl> * @ param results RealmResults to listen to changes for . <nl> * @ param < E > Type of RealmObject <nl> * / <nl> - < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> + < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> <nl> / * * <nl> * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each <nl> @ @ - 41 , 7 + 41 , 7 @ @ public interface RxObservableFactory { <nl> * @ param list RealmObject to listen to changes for . <nl> * @ param < E > Type of RealmObject <nl> * / <nl> - < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> + < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> <nl> <nl> / * * <nl> @ @ - 53 , 5 + 53 , 5 @ @ public interface RxObservableFactory { <nl> * @ param object RealmObject to listen to changes for . <nl> * @ param < E > Type of RealmObject <nl> * / <nl> - < E extends RealmObject < E > > Observable < E > from ( E object ) ; <nl> + < E extends RealmObject > Observable < E > from ( E object ) ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java 
 index 3ac4e32 . . 0acf690 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java 
 @ @ - 220 , 8 + 220 , 8 @ @ public class DynamicRealmObjectTests { 
 try { 
 callThreadConfinedMethod ( obj , method ) ; 
 fail ( " IllegalStateException must be thrown . " ) ; 
 - } catch ( Throwable e ) { 
 - if ( e instanceof IllegalStateException & & expectedMessage . equals ( e . getMessage ( ) ) ) { 
 + } catch ( IllegalStateException e ) { 
 + if ( expectedMessage . equals ( e . getMessage ( ) ) ) { 
 / / expected exception 
 continue ; 
 } 
 @ @ - 1613 , 15 + 1613 , 14 @ @ public class DynamicRealmObjectTests { 
 final DynamicRealmObject object = dynamicRealm . where ( AllTypes . CLASS _ NAME ) . findFirst ( ) ; 
 
 final CountDownLatch threadFinished = new CountDownLatch ( 1 ) ; 
 - final AtomicReference < Throwable > throwable = new AtomicReference < > ( ) ; 
 final Thread thread = new Thread ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 try { 
 object . getDynamicRealm ( ) ; 
 fail ( ) ; 
 - } catch ( Throwable t ) { 
 - throwable . set ( t ) ; 
 + } catch ( IllegalStateException e ) { 
 + assertEquals ( BaseRealm . INCORRECT _ THREAD _ MESSAGE , e . getMessage ( ) ) ; 
 } finally { 
 threadFinished . countDown ( ) ; 
 } 
 @ @ - 1629 , 11 + 1628 , 5 @ @ public class DynamicRealmObjectTests { 
 } ) ; 
 thread . start ( ) ; 
 TestHelper . awaitOrFail ( threadFinished ) ; 
 - 
 - final Throwable thrownInTheThread = throwable . get ( ) ; 
 - if ( ! ( thrownInTheThread instanceof IllegalStateException ) ) { 
 - throw thrownInTheThread ; 
 - } 
 - assertEquals ( BaseRealm . INCORRECT _ THREAD _ MESSAGE , thrownInTheThread . getMessage ( ) ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / ManagedOrderedRealmCollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / ManagedOrderedRealmCollectionTests . java 
 index c50e59c . . 366d439 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / ManagedOrderedRealmCollectionTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / ManagedOrderedRealmCollectionTests . java 
 @ @ - 779 , 10 + 779 , 10 @ @ public class ManagedOrderedRealmCollectionTests extends CollectionTests { 
 case REMOVE _ INDEX : collection . remove ( 0 ) ; break ; 
 } 
 fail ( " Unknown method or it failed to throw : " + method ) ; 
 - } catch ( Throwable t ) { 
 - if ( ! t . getClass ( ) . equals ( expected ) ) { 
 - fail ( method + " didn ' t throw the expected exception . Was : " + t + " , expected : " + expected ) ; 
 - } 
 + } catch ( IllegalStateException e ) { 
 + assertEquals ( expected , e . getClass ( ) ) ; 
 + } catch ( UnsupportedOperationException e ) { 
 + assertEquals ( expected , e . getClass ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java 
 index 96fc619 . . b27d7b3 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java 
 @ @ - 784 , 10 + 784 , 10 @ @ public class ManagedRealmCollectionTests extends CollectionTests { 
 case RETAIN _ ALL : collection . retainAll ( Collections . singletonList ( new AllJavaTypes ( ) ) ) ; break ; 
 } 
 fail ( " Unknown method or it failed to throw : " + method ) ; 
 - } catch ( Throwable t ) { 
 - if ( ! t . getClass ( ) . equals ( expected ) ) { 
 - fail ( method + " didn ' t throw the expected exception . Was : " + t + " , expected : " + expected ) ; 
 - } 
 + } catch ( IllegalStateException e ) { 
 + assertEquals ( expected , e . getClass ( ) ) ; 
 + } catch ( UnsupportedOperationException e ) { 
 + assertEquals ( expected , e . getClass ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java b / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java 
 index d7e705a . . 706182e 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java 
 @ @ - 429 , 6 + 429 , 7 @ @ public class OrderedRealmCollectionIteratorTests extends CollectionTests { 
 
 try { 
 it . remove ( ) ; 
 + fail ( ) ; 
 } catch ( IllegalStateException e ) { 
 assertRealmList ( ) ; 
 } catch ( UnsupportedOperationException e ) { 
 @ @ - 612 , 6 + 613 , 7 @ @ public class OrderedRealmCollectionIteratorTests extends CollectionTests { 
 assertEquals ( 42 , obj . getFieldLong ( ) ) ; 
 } 
 
 + @ Test 
 public void listIterator _ add ( ) { 
 if ( skipTest ( CollectionClass . REALMRESULTS ) ) { 
 return ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 index 667336c . . 8d99101 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 @ @ - 2080 , 23 + 2080 , 20 @ @ public class RealmObjectTests { 
 realm . commitTransaction ( ) ; 
 
 final CountDownLatch threadFinished = new CountDownLatch ( 1 ) ; 
 - final AtomicReference < Throwable > throwable = new AtomicReference < > ( ) ; 
 final Thread thread = new Thread ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 try { 
 object . getRealm ( ) ; 
 fail ( ) ; 
 - } catch ( Throwable t ) { 
 - throwable . set ( t ) ; 
 - threadFinished . countDown ( ) ; 
 - return ; 
 + } catch ( IllegalStateException e ) { 
 + assertEquals ( BaseRealm . INCORRECT _ THREAD _ MESSAGE , e . getMessage ( ) ) ; 
 } 
 try { 
 RealmObject . getRealm ( object ) ; 
 fail ( ) ; 
 - } catch ( Throwable t ) { 
 - throwable . set ( t ) ; 
 + } catch ( IllegalStateException e ) { 
 + assertEquals ( BaseRealm . INCORRECT _ THREAD _ MESSAGE , e . getMessage ( ) ) ; 
 } finally { 
 threadFinished . countDown ( ) ; 
 } 
 @ @ - 2104 , 12 + 2101 , 6 @ @ public class RealmObjectTests { 
 } ) ; 
 thread . start ( ) ; 
 TestHelper . awaitOrFail ( threadFinished ) ; 
 - 
 - final Throwable thrownInTheThread = throwable . get ( ) ; 
 - if ( ! ( thrownInTheThread instanceof IllegalStateException ) ) { 
 - throw thrownInTheThread ; 
 - } 
 - assertEquals ( BaseRealm . INCORRECT _ THREAD _ MESSAGE , thrownInTheThread . getMessage ( ) ) ; 
 } 
 
 @ Test 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 index 35456d2 . . e1a1d52 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 @ @ - 357 , 7 + 357 , 6 @ @ public class RealmQueryTests extends QueryTests { 
 public void callThreadConfinedMethodsFromWrongThread ( ) throws Throwable { 
 final RealmQuery < AllJavaTypes > query = realm . where ( AllJavaTypes . class ) ; 
 
 - final AtomicReference < Throwable > throwableFromThread = new AtomicReference < Throwable > ( ) ; 
 final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; 
 
 final String expectedMessage ; 
 @ @ - 380 , 13 + 379 , 8 @ @ public class RealmQueryTests extends QueryTests { 
 try { 
 callThreadConfinedMethod ( query , method ) ; 
 fail ( " IllegalStateException must be thrown . " ) ; 
 - } catch ( Throwable e ) { 
 - if ( e instanceof IllegalStateException & & expectedMessage . equals ( e . getMessage ( ) ) ) { 
 - / / expected exception 
 - continue ; 
 - } 
 - throwableFromThread . set ( e ) ; 
 - return ; 
 + } catch ( IllegalStateException e ) { 
 + assertEquals ( expectedMessage , e . getMessage ( ) ) ; 
 } 
 } 
 } finally { 
 @ @ - 397 , 10 + 391 , 6 @ @ public class RealmQueryTests extends QueryTests { 
 thread . start ( ) ; 
 
 TestHelper . awaitOrFail ( testFinished ) ; 
 - final Throwable throwable = throwableFromThread . get ( ) ; 
 - if ( throwable ! = null ) { 
 - throw throwable ; 
 - } 
 } 
 
 @ Test 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 index 7c12ddb . . 73db5a1 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 @ @ - 628 , 24 + 628 , 28 @ @ public class RealmSchemaTests { 
 
 try { 
 realmSchema . create ( " Foo " ) ; 
 + fail ( ) ; 
 } catch ( IllegalStateException expected ) { 
 assertThat ( expected . getMessage ( ) , CoreMatchers . containsString ( " transaction " ) ) ; 
 } 
 
 try { 
 realmSchema . createWithPrimaryKeyField ( " Foo " , " PK " , String . class ) ; 
 + fail ( ) ; 
 } catch ( IllegalStateException expected ) { 
 assertThat ( expected . getMessage ( ) , CoreMatchers . containsString ( " transaction " ) ) ; 
 } 
 
 try { 
 realmSchema . remove ( " Cat " ) ; 
 + fail ( ) ; 
 } catch ( IllegalStateException expected ) { 
 assertThat ( expected . getMessage ( ) , CoreMatchers . containsString ( " transaction " ) ) ; 
 } 
 
 try { 
 realmSchema . rename ( " Cat " , " Foo1 " ) ; 
 + fail ( ) ; 
 } catch ( IllegalStateException expected ) { 
 assertThat ( expected . getMessage ( ) , CoreMatchers . containsString ( " transaction " ) ) ; 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index 7d87271 . . 509d05f 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 4017 , 7 + 4017 , 6 @ @ public class RealmTests { 
 @ Test 
 public void waitForChange _ onLooperThread ( ) throws Throwable { 
 final CountDownLatch bgRealmClosed = new CountDownLatch ( 1 ) ; 
 - final ExceptionHolder bgError = new ExceptionHolder ( ) ; 
 
 Thread thread = new Thread ( new Runnable ( ) { 
 @ Override 
 @ @ - 4027 , 8 + 4026 , 7 @ @ public class RealmTests { 
 try { 
 realm . waitForChange ( ) ; 
 fail ( ) ; 
 - } catch ( Throwable expected ) { 
 - bgError . setException ( expected ) ; 
 + } catch ( IllegalStateException ignored ) { 
 } finally { 
 realm . close ( ) ; 
 bgRealmClosed . countDown ( ) ; 
 @ @ - 4038 , 10 + 4036 , 6 @ @ public class RealmTests { 
 thread . start ( ) ; 
 
 TestHelper . awaitOrFail ( bgRealmClosed ) ; 
 - if ( bgError . getException ( ) instanceof AssertionError ) { 
 - throw bgError . getException ( ) ; 
 - } 
 - assertEquals ( IllegalStateException . class , bgError . getException ( ) . getClass ( ) ) ; 
 } 
 
 / / Cannot wait inside of a transaction . 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 index 287d17b . . 06e6792 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 @ @ - 619 , 7 + 619 , 7 @ @ public class SortTest { 
 @ Test 
 public void sortCaseSensitive ( ) { 
 chars = " ' - ! \ " # $ % & ( ) * , . / : ; ? _ + < = > 123aAbBcCxXyYzZ " ; 
 - createAndTest ( new StringBuffer ( chars ) . reverse ( ) . toString ( ) ) ; 
 + createAndTest ( new StringBuilder ( chars ) . reverse ( ) . toString ( ) ) ; 
 
 / / try all permutations - keep the list short 
 chars = " 12aAbB " ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 index ebc149f . . 31d7396 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 @ @ - 80 , 7 + 80 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { 
 / / events ( Callbacks happening in the future ) , so we add a strong reference 
 / / to them for the duration of the test . 
 / / Access guarded by ' lock ' 
 - private LinkedList < Object > keepStrongReference ; 
 + private List < Object > keepStrongReference ; 
 
 / / Custom Realm used by the test . Saving the reference here will guarantee 
 / / that the instance is closed when exiting the test . 
 @ @ - 266 , 9 + 266 , 9 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { 
 super . before ( ) ; 
 
 RealmConfiguration config = createConfiguration ( UUID . randomUUID ( ) . toString ( ) ) ; 
 - LinkedList < Object > refs = new LinkedList < > ( ) ; 
 - List < Realm > realms = new LinkedList < > ( ) ; 
 - LinkedList < Closeable > closeables = new LinkedList < > ( ) ; 
 + List < Object > refs = new ArrayList < > ( ) ; 
 + List < Realm > realms = new ArrayList < > ( ) ; 
 + List < Closeable > closeables = new ArrayList < > ( ) ; 
 
 synchronized ( lock ) { 
 realmConfiguration = config ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 index 1399b3e . . 3dac06e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 @ @ - 20 , 11 + 20 , 11 @ @ import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . lang . ref . WeakReference ; 
 + import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . EnumMap ; 
 import java . util . Iterator ; 
 - import java . util . LinkedList ; 
 import java . util . List ; 
 import java . util . concurrent . ConcurrentLinkedQueue ; 
 import java . util . concurrent . CountDownLatch ; 
 @ @ - 200 , 7 + 200 , 7 @ @ final class RealmCache { 
 / / are not allowed and an exception will be thrown when trying to add it to the cache list . 
 / / A weak ref is used to hold the RealmCache instance . The weak ref entry will be cleared if and only if there 
 / / is no Realm instance holding a strong ref to it and there is no Realm instance associated it is BEING created . 
 - private static final List < WeakReference < RealmCache > > cachesList = new LinkedList < WeakReference < RealmCache > > ( ) ; 
 + private static final List < WeakReference < RealmCache > > cachesList = new ArrayList < WeakReference < RealmCache > > ( ) ; 
 
 / / See leak ( ) 
 / / isLeaked flag is used to avoid adding strong ref multiple times without iterating the list . 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / PermissionManager . java b / realm / realm - library / src / objectServer / java / io / realm / PermissionManager . java 
 index 9d1acc3 . . d41906a 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / PermissionManager . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / PermissionManager . java 
 @ @ - 24 , 10 + 24 , 8 @ @ import java . net . URISyntaxException ; 
 import java . net . URL ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 - import java . util . Deque ; 
 import java . util . HashMap ; 
 import java . util . LinkedHashMap ; 
 - import java . util . LinkedList ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 @ @ - 142 , 7 + 140 , 7 @ @ public class PermissionManager implements Closeable { 
 private Realm defaultPermissionRealm ; 
 
 / / Task list used to queue tasks until the underlying Realms are done opening ( or failed doing so ) . 
 - private Deque < PermissionManagerTask > delayedTasks = new LinkedList < > ( ) ; 
 + private List < PermissionManagerTask > delayedTasks = new ArrayList < > ( ) ; 
 
 / / List of tasks that are being processed . Used to keep strong references for listeners to work . 
 / / The task must remove itself from this list once it either completes

NEAREST DIFF:
diff - - git a / examples / rxJavaExample / README . md b / examples / rxJavaExample / README . md 
 index 3f33bfa . . ea203c2 100644 
 - - - a / examples / rxJavaExample / README . md 
 + + + b / examples / rxJavaExample / README . md 
 @ @ - 5 , 13 + 5 , 17 @ @ 
 - Observables might have a default Scheduler they operate on that is 
 different than the one the RealmObject was created on . 
 
 - - RealmObjects auto - update . Observables that operate on multiple " versions " 
 + - RealmObjects are live objects that automatically staty up to date . Observables that operate on multiple " versions " 
 will most likely not work as expected . 
 
 - Retrofit automatically offload to a worker thread . 
 
 - Use Realm async API instead of subscribeOn to offload Realm work . 
 
 + - You can use Realm . copyFromRealm to make a copy of Realm data 
 + 
 + 
 + 
 
 # # Resources ( TODO ) 
 - http : / / www . grahamlea . com / 2014 / 07 / rxjava - threading - examples / 
 \ No newline at end of file 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 index 12a0c4a . . ff099ad 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 @ @ - 31 , 7 + 31 , 7 @ @ public class RxJavaTests extends AndroidTestCase { 
 realm . commitTransaction ( ) ; 
 
 final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { 
 @ Override 
 public void call ( AllTypes rxObject ) { 
 assertTrue ( rxObject = = obj ) ; 
 @ @ - 74 , 7 + 74 , 7 @ @ public class RxJavaTests extends AndroidTestCase { 
 final AllTypes obj = realm . createObject ( AllTypes . class ) ; 
 realm . commitTransaction ( ) ; 
 
 - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { 
 @ Override 
 public void call ( AllTypes rxObject ) { 
 subscriberCalled . addAndGet ( 1 ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index a3e5103 . . 4e420ec 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 25 , 15 + 25 , 12 @ @ import java . lang . ref . ReferenceQueue ; 
 import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 - import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 - import java . util . Set ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 - import java . util . concurrent . CopyOnWriteArraySet ; 
 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 import io . realm . internal . SharedGroupManager ; 
 @ @ - 44 , 7 + 41 , 6 @ @ import io . realm . internal . android . DebugAndroidLogger ; 
 import io . realm . internal . android . ReleaseAndroidLogger ; 
 import io . realm . internal . async . RealmThreadPoolExecutor ; 
 import io . realm . internal . log . RealmLog ; 
 - import io . realm . rx . RxObservableFactory ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 53 , 7 + 49 , 7 @ @ import rx . Observable ; 
 * @ see io . realm . Realm 
 * @ see io . realm . DynamicRealm 
 * / 
 - public abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 + public abstract class BaseRealm < T extends BaseRealm < T > > implements Closeable { 
 protected static final long UNVERSIONED = - 1 ; 
 private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; 
 private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; 
 @ @ - 203 , 8 + 199 , 8 @ @ public abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 @ SuppressWarnings ( " unchecked " ) 
 - public Observable < E > observable ( ) { 
 - return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; 
 + public Observable < T > observable ( ) { 
 + return ( Observable < T > ) configuration . getRxFactory ( ) . from ( this ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 index f979667 . . 627ac4a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 @ @ - 42 , 7 + 42 , 7 @ @ import io . realm . internal . TableView ; 
 * @ see Realm 
 * @ see RealmSchema 
 * / 
 - public final class DynamicRealm extends BaseRealm { 
 + public final class DynamicRealm extends BaseRealm < DynamicRealm > { 
 
 private DynamicRealm ( RealmConfiguration configuration , boolean autoRefresh ) { 
 super ( configuration , autoRefresh ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 index 40ad05a . . 318e9e9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 @ @ - 29 , 7 + 29 , 7 @ @ import io . realm . internal . android . JsonUtils ; 
 * Class that wraps a normal RealmObject in order to allow dynamic access instead of a typed interface . 
 * Using a DynamicRealmObject is slower than using the regular RealmObject class . 
 * / 
 - public final class DynamicRealmObject extends RealmObject < DynamicRealmObject > { 
 + public final class DynamicRealmObject extends RealmObject { 
 
 / * * 
 * Creates a dynamic Realm object based on an existing object . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 index 5283cb5 . . 24824b6 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 @ @ - 89 , 7 + 89 , 7 @ @ class RealmCache { 
 * @ param realmClass class of { @ link Realm } or { @ link DynamicRealm } to be created in or gotten from the cache . 
 * @ return the { @ link Realm } or { @ link DynamicRealm } instance . 
 * / 
 - static synchronized < E extends BaseRealm > E createRealmOrGetFromCache ( RealmConfiguration configuration , 
 + static synchronized < E extends BaseRealm < E > > E createRealmOrGetFromCache ( RealmConfiguration configuration , 
 Class < E > realmClass ) { 
 boolean isCacheInMap = true ; 
 RealmCache cache = cachesMap . get ( configuration . getPath ( ) ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 3978bfc . . 34960d0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 79 , 7 + 79 , 7 @ @ import rx . Observable ; 
 * / 
 
 @ RealmClass 
 - public abstract class RealmObject < E extends RealmObject > { 
 + public abstract class RealmObject { 
 
 protected Row row ; 
 protected BaseRealm realm ; 
 @ @ - 255 , 7 + 255 , 10 @ @ public abstract class RealmObject < E extends RealmObject > { 
 * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 @ SuppressWarnings ( " unchecked " ) 
 - public Observable < E > observable ( ) { 
 + public < E extends RealmObject > Observable < E > observable ( Class < E > type ) { 
 + if ( ! this . getClass ( ) . isInstance ( type ) ) { 
 + throw new IllegalArgumentException ( " This RealmObject cannot be cast to the desired type : " + type ) ; 
 + } 
 return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 89274ba . . fde3390 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1719 , 86 + 1719 , 16 @ @ public class RealmQuery < E extends RealmObject > { 
 * @ return the object found or { @ code null } if no object matches the query conditions . 
 * @ see io . realm . RealmObject 
 * / 
 - @ SuppressWarnings ( " unchecked " ) 
 public E findFirst ( ) { 
 checkQueryIsNotReused ( ) ; 
 long rowIndex = this . query . find ( ) ; 
 if ( rowIndex > = 0 ) { 
 - return ( E ) realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; 
 + return realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; 
 } else { 
 return null ; 
 } 
 } 
 
 - / / FIXME Replace with Schema when it is available 
 - private static class DynamicColumnMap implements Map < String , Long > { 
 - private final Table table ; 
 - 
 - public DynamicColumnMap ( Table table ) { 
 - this . table = table ; 
 - } 
 - 
 - @ Override 
 - public Long get ( Object key ) { 
 - return table . getColumnIndex ( ( String ) key ) ; 
 - } 
 - 
 - @ Override 
 - public void clear ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean containsKey ( Object key ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean containsValue ( Object value ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Set < Entry < String , Long > > entrySet ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean isEmpty ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Set < String > keySet ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Long put ( String key , Long value ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public void putAll ( Map < ? extends String , ? extends Long > map ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Long remove ( Object key ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public int size ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Collection < Long > values ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - } 
 - 
 / * * 
 * Similar to { @ link # findFirst ( ) } but runs asynchronously on a worker thread 
 * This method is only available from a Looper thread . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index db09759 . . 3629486 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 157 , 15 + 157 , 14 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 * @ throws IndexOutOfBoundsException if { @ code location < 0 | | location > = size ( ) } . 
 * / 
 @ Override 
 - @ SuppressWarnings ( " unchecked " ) 
 public E get ( int location ) { 
 E obj ; 
 realm . checkIfValid ( ) ; 
 TableOrView table = getTable ( ) ; 
 if ( table instanceof TableView ) { 
 - obj = ( E ) realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; 
 + obj = realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; 
 } else { 
 - obj = ( E ) realm . get ( classSpec , className , location ) ; 
 + obj = realm . get ( classSpec , className , location ) ; 
 } 
 
 return obj ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 index 718e705 . . 940f217 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 @ @ - 79 , 7 + 79 , 7 @ @ public final class RealmObservableFactory implements RxObservableFactory { 
 } 
 
 @ Override 
 - public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 + public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 checkRxJavaAvailable ( ) ; 
 return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 @ Override 
 @ @ - 106 , 13 + 106 , 13 @ @ public final class RealmObservableFactory implements RxObservableFactory { 
 } 
 
 @ Override 
 - public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 + public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 checkRxJavaAvailable ( ) ; 
 throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 } 
 
 @ Override 
 - public < E extends RealmObject < E > > Observable < E > from ( final E object ) { 
 + public < E extends RealmObject > Observable < E > from ( final E object ) { 
 checkRxJavaAvailable ( ) ; 
 return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 @ Override 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 index 0984f85 . . 14fd548 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 @ @ - 30 , 7 + 30 , 7 @ @ public interface RxObservableFactory { 
 * @ param results RealmResults to listen to changes for . 
 * @ param < E > Type of RealmObject 
 * / 
 - < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 + < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 
 / * * 
 * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each 
 @ @ - 41 , 7 + 41 , 7 @ @ public interface RxObservableFactory { 
 * @ param list RealmObject to listen to changes for . 
 * @ param < E > Type of RealmObject 
 * / 
 - < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 + < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 
 
 / * * 
 @ @ - 53 , 5 + 53 , 5 @ @ public interface RxObservableFactory { 
 * @ param object RealmObject to listen to changes for . 
 * @ param < E > Type of RealmObject 
 * / 
 - < E extends RealmObject < E > > Observable < E > from ( E object ) ; 
 + < E extends RealmObject > Observable < E > from ( E object ) ; 
 }
