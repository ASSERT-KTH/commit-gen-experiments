BLEU SCORE: 0.021597011339333432

TEST MSG: RealmObject now uses the same interface methods for RealmObservable without implementing the interface . . . . because compilers and kotlin
GENERATED MSG: Increased RealmObjectTests coverage with testing on unmanaged objects and removing null listener .

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 27d4ebd . . 9444387 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 10 , 6 + 10 , 7 @ @ <nl> # # # Deprecated <nl> <nl> * ` RealmResults . removeChangeListeners ( ) ` . Use ` RealmResults . removeAllChangeListeners ( ) ` instead . <nl> + * ` RealmObject . removeChangeListeners ( ) ` . Use ` RealmObject . removeAllChangeListeners ( ) ` instead . <nl> <nl> # # # Enhancements <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> index 2c1bada . . 2feb687 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> @ @ - 1682 , 7 + 1682 , 7 @ @ public class RealmObjectTests { <nl> * / <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void removeChangeListeners ( ) { <nl> + public void removeAllChangeListeners ( ) { <nl> final Realm realm = looperThread . realm ; <nl> realm . beginTransaction ( ) ; <nl> Dog dog = realm . createObject ( Dog . class ) ; <nl> @ @ - 1694 , 7 + 1694 , 7 @ @ public class RealmObjectTests { <nl> assertTrue ( false ) ; <nl> } <nl> } ) ; <nl> - dog . removeChangeListeners ( ) ; <nl> + dog . removeAllChangeListeners ( ) ; <nl> <nl> realm . beginTransaction ( ) ; <nl> Dog sameDog = realm . where ( Dog . class ) . equalTo ( Dog . FIELD _ AGE , 13 ) . findFirst ( ) ; <nl> @ @ - 1723 , 11 + 1723 , 11 @ @ public class RealmObjectTests { <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void removeChangeListeners _ throwOnUnmanagedObject ( ) { <nl> + public void removeAllChangeListeners _ throwOnUnmanagedObject ( ) { <nl> Dog dog = new Dog ( ) ; <nl> <nl> try { <nl> - dog . removeChangeListeners ( ) ; <nl> + dog . removeAllChangeListeners ( ) ; <nl> fail ( " Failed to remove null listener . " ) ; <nl> } catch ( IllegalArgumentException ignore ) { <nl> looperThread . testComplete ( ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index cc3b05f . . 7b942c5 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 354 , 7 + 354 , 6 @ @ public abstract class RealmObject implements RealmModel { <nl> } <nl> } <nl> <nl> - <nl> / * * <nl> * Removes a previously registered listener . <nl> * <nl> @ @ - 396 , 18 + 395 , 40 @ @ public abstract class RealmObject implements RealmModel { <nl> <nl> / * * <nl> * Removes all registered listeners . <nl> + * <nl> + * @ deprecated Use { @ link # removeAllChangeListeners ( ) } instead . <nl> * / <nl> + @ Deprecated <nl> public final void removeChangeListeners ( ) { <nl> RealmObject . removeChangeListeners ( this ) ; <nl> } <nl> <nl> / * * <nl> + * Removes all registered listeners . <nl> + * / <nl> + public final void removeAllChangeListeners ( ) { <nl> + RealmObject . removeAllChangeListeners ( this ) ; <nl> + } <nl> + <nl> + / * * <nl> * Removes all registered listeners from the given RealmObject . <nl> * <nl> * @ param object RealmObject to remove all listeners from . <nl> * @ throws IllegalArgumentException if object is { @ code null } or isn ' t managed by Realm . <nl> + * @ deprecated Use { @ link RealmObject # removeAllChangeListeners ( RealmModel ) } instead . <nl> * / <nl> + @ Deprecated <nl> public static < E extends RealmModel > void removeChangeListeners ( E object ) { <nl> + removeAllChangeListeners ( object ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Removes all registered listeners from the given RealmObject . <nl> + * <nl> + * @ param object RealmObject to remove all listeners from . <nl> + * @ throws IllegalArgumentException if object is { @ code null } or isn ' t managed by Realm . <nl> + * / <nl> + public static < E extends RealmModel > void removeAllChangeListeners ( E object ) { <nl> if ( object instanceof RealmObjectProxy ) { <nl> RealmObjectProxy proxy = ( RealmObjectProxy ) object ; <nl> BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> index 3bd9eea . . 5ee084b 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> @ @ - 48 , 6 + 48 , 8 @ @ import io . realm . entities . StringAndInt ; <nl> import io . realm . entities . Thread ; <nl> import io . realm . internal . Row ; <nl> import io . realm . internal . Table ; <nl> + import io . realm . rule . RunInLooperThread ; <nl> + import io . realm . rule . RunTestInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> <nl> import static io . realm . internal . test . ExtraTests . assertArrayEquals ; <nl> @ @ - 70 , 10 + 72 , 19 @ @ public class RealmObjectTests { <nl> public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> @ Rule <nl> public final ExpectedException thrown = ExpectedException . none ( ) ; <nl> + @ Rule <nl> + public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; <nl> <nl> private Realm realm ; <nl> private RealmConfiguration realmConfig ; <nl> <nl> + private Dog createManagedDogObjectFromRealmInstance ( Realm testRealm ) { <nl> + testRealm . beginTransaction ( ) ; <nl> + Dog dog = testRealm . createObject ( Dog . class ) ; <nl> + testRealm . commitTransaction ( ) ; <nl> + return dog ; <nl> + } <nl> + <nl> @ Before <nl> public void setUp ( ) { <nl> realmConfig = configFactory . createConfiguration ( ) ; <nl> @ @ - 207 , 6 + 218 , 17 @ @ public class RealmObjectTests { <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void deleteFromRealm _ throwOnUnmanagedObject ( ) { <nl> + Dog dog = new Dog ( ) ; <nl> + <nl> + try { <nl> + dog . deleteFromRealm ( ) ; <nl> + fail ( " Failed on deleting a RealmObject from null Row . " ) ; <nl> + } catch ( IllegalStateException ignored ) { <nl> + } <nl> + } <nl> + <nl> / / query for an object , remove it and see it has been removed from realm <nl> @ Test <nl> public void deleteFromRealm _ removedFromResults ( ) { <nl> @ @ - 1564 , 4 + 1586 , 106 @ @ public class RealmObjectTests { <nl> realm . commitTransaction ( ) ; <nl> assertNull ( realm . allObjects ( NullTypes . class ) . first ( ) . getFieldDateNull ( ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void addChangeListener _ throwOnAddingNullListener ( ) { <nl> + final Realm realm = looperThread . realm ; <nl> + Dog dog = createManagedDogObjectFromRealmInstance ( realm ) ; <nl> + <nl> + try { <nl> + dog . addChangeListener ( ( RealmChangeListener ) null ) ; <nl> + fail ( " Failed on adding null change listener . " ) ; <nl> + } catch ( IllegalArgumentException ignore ) { <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void addChangeListener _ throwOnUnmanagedObject ( ) { <nl> + Dog dog = new Dog ( ) ; <nl> + <nl> + try { <nl> + dog . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + } <nl> + } ) ; <nl> + fail ( " Failed on adding listener on null realm . " ) ; <nl> + } catch ( IllegalArgumentException ignore ) { <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void removeChangeListener _ throwOnRemovingNullListener ( ) { <nl> + final Realm realm = looperThread . realm ; <nl> + Dog dog = createManagedDogObjectFromRealmInstance ( realm ) ; <nl> + <nl> + try { <nl> + dog . removeChangeListener ( ( RealmChangeListener ) null ) ; <nl> + fail ( " Failed on adding null change listener . " ) ; <nl> + } catch ( IllegalArgumentException ignore ) { <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * This test is to see if RealmObject . removeChangeListeners ( ) works as it is intended . <nl> + * / <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void removeChangeListeners ( ) { <nl> + final Realm realm = looperThread . realm ; <nl> + realm . beginTransaction ( ) ; <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setAge ( 13 ) ; <nl> + realm . commitTransaction ( ) ; <nl> + dog . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + assertTrue ( false ) ; <nl> + } <nl> + } ) ; <nl> + dog . removeChangeListeners ( ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + Dog sameDog = realm . where ( Dog . class ) . equalTo ( Dog . FIELD _ AGE , 13 ) . findFirst ( ) ; <nl> + sameDog . setName ( " Jesper " ) ; <nl> + realm . commitTransaction ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void removeChangeListener _ throwOnUnmanagedObject ( ) { <nl> + Dog dog = new Dog ( ) ; <nl> + RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + } <nl> + } ; <nl> + <nl> + try { <nl> + dog . removeChangeListener ( listener ) ; <nl> + fail ( " Failed to remove a listener from null Realm . " ) ; <nl> + } catch ( IllegalArgumentException ignore ) { <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void removeChangeListeners _ throwOnUnmanagedObject ( ) { <nl> + Dog dog = new Dog ( ) ; <nl> + <nl> + try { <nl> + dog . removeChangeListeners ( ) ; <nl> + fail ( " Failed to remove null listener . " ) ; <nl> + } catch ( IllegalArgumentException ignore ) { <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 27d4ebd . . 9444387 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 10 , 6 + 10 , 7 @ @ 
 # # # Deprecated 
 
 * ` RealmResults . removeChangeListeners ( ) ` . Use ` RealmResults . removeAllChangeListeners ( ) ` instead . 
 + * ` RealmObject . removeChangeListeners ( ) ` . Use ` RealmObject . removeAllChangeListeners ( ) ` instead . 
 
 # # # Enhancements 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 index 2c1bada . . 2feb687 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 @ @ - 1682 , 7 + 1682 , 7 @ @ public class RealmObjectTests { 
 * / 
 @ Test 
 @ RunTestInLooperThread 
 - public void removeChangeListeners ( ) { 
 + public void removeAllChangeListeners ( ) { 
 final Realm realm = looperThread . realm ; 
 realm . beginTransaction ( ) ; 
 Dog dog = realm . createObject ( Dog . class ) ; 
 @ @ - 1694 , 7 + 1694 , 7 @ @ public class RealmObjectTests { 
 assertTrue ( false ) ; 
 } 
 } ) ; 
 - dog . removeChangeListeners ( ) ; 
 + dog . removeAllChangeListeners ( ) ; 
 
 realm . beginTransaction ( ) ; 
 Dog sameDog = realm . where ( Dog . class ) . equalTo ( Dog . FIELD _ AGE , 13 ) . findFirst ( ) ; 
 @ @ - 1723 , 11 + 1723 , 11 @ @ public class RealmObjectTests { 
 
 @ Test 
 @ RunTestInLooperThread 
 - public void removeChangeListeners _ throwOnUnmanagedObject ( ) { 
 + public void removeAllChangeListeners _ throwOnUnmanagedObject ( ) { 
 Dog dog = new Dog ( ) ; 
 
 try { 
 - dog . removeChangeListeners ( ) ; 
 + dog . removeAllChangeListeners ( ) ; 
 fail ( " Failed to remove null listener . " ) ; 
 } catch ( IllegalArgumentException ignore ) { 
 looperThread . testComplete ( ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index cc3b05f . . 7b942c5 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 354 , 7 + 354 , 6 @ @ public abstract class RealmObject implements RealmModel { 
 } 
 } 
 
 - 
 / * * 
 * Removes a previously registered listener . 
 * 
 @ @ - 396 , 18 + 395 , 40 @ @ public abstract class RealmObject implements RealmModel { 
 
 / * * 
 * Removes all registered listeners . 
 + * 
 + * @ deprecated Use { @ link # removeAllChangeListeners ( ) } instead . 
 * / 
 + @ Deprecated 
 public final void removeChangeListeners ( ) { 
 RealmObject . removeChangeListeners ( this ) ; 
 } 
 
 / * * 
 + * Removes all registered listeners . 
 + * / 
 + public final void removeAllChangeListeners ( ) { 
 + RealmObject . removeAllChangeListeners ( this ) ; 
 + } 
 + 
 + / * * 
 * Removes all registered listeners from the given RealmObject . 
 * 
 * @ param object RealmObject to remove all listeners from . 
 * @ throws IllegalArgumentException if object is { @ code null } or isn ' t managed by Realm . 
 + * @ deprecated Use { @ link RealmObject # removeAllChangeListeners ( RealmModel ) } instead . 
 * / 
 + @ Deprecated 
 public static < E extends RealmModel > void removeChangeListeners ( E object ) { 
 + removeAllChangeListeners ( object ) ; 
 + } 
 + 
 + / * * 
 + * Removes all registered listeners from the given RealmObject . 
 + * 
 + * @ param object RealmObject to remove all listeners from . 
 + * @ throws IllegalArgumentException if object is { @ code null } or isn ' t managed by Realm . 
 + * / 
 + public static < E extends RealmModel > void removeAllChangeListeners ( E object ) { 
 if ( object instanceof RealmObjectProxy ) { 
 RealmObjectProxy proxy = ( RealmObjectProxy ) object ; 
 BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 index 3bd9eea . . 5ee084b 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 @ @ - 48 , 6 + 48 , 8 @ @ import io . realm . entities . StringAndInt ; 
 import io . realm . entities . Thread ; 
 import io . realm . internal . Row ; 
 import io . realm . internal . Table ; 
 + import io . realm . rule . RunInLooperThread ; 
 + import io . realm . rule . RunTestInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 
 import static io . realm . internal . test . ExtraTests . assertArrayEquals ; 
 @ @ - 70 , 10 + 72 , 19 @ @ public class RealmObjectTests { 
 public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 @ Rule 
 public final ExpectedException thrown = ExpectedException . none ( ) ; 
 + @ Rule 
 + public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; 
 
 private Realm realm ; 
 private RealmConfiguration realmConfig ; 
 
 + private Dog createManagedDogObjectFromRealmInstance ( Realm testRealm ) { 
 + testRealm . beginTransaction ( ) ; 
 + Dog dog = testRealm . createObject ( Dog . class ) ; 
 + testRealm . commitTransaction ( ) ; 
 + return dog ; 
 + } 
 + 
 @ Before 
 public void setUp ( ) { 
 realmConfig = configFactory . createConfiguration ( ) ; 
 @ @ - 207 , 6 + 218 , 17 @ @ public class RealmObjectTests { 
 } 
 } 
 
 + @ Test 
 + public void deleteFromRealm _ throwOnUnmanagedObject ( ) { 
 + Dog dog = new Dog ( ) ; 
 + 
 + try { 
 + dog . deleteFromRealm ( ) ; 
 + fail ( " Failed on deleting a RealmObject from null Row . " ) ; 
 + } catch ( IllegalStateException ignored ) { 
 + } 
 + } 
 + 
 / / query for an object , remove it and see it has been removed from realm 
 @ Test 
 public void deleteFromRealm _ removedFromResults ( ) { 
 @ @ - 1564 , 4 + 1586 , 106 @ @ public class RealmObjectTests { 
 realm . commitTransaction ( ) ; 
 assertNull ( realm . allObjects ( NullTypes . class ) . first ( ) . getFieldDateNull ( ) ) ; 
 } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void addChangeListener _ throwOnAddingNullListener ( ) { 
 + final Realm realm = looperThread . realm ; 
 + Dog dog = createManagedDogObjectFromRealmInstance ( realm ) ; 
 + 
 + try { 
 + dog . addChangeListener ( ( RealmChangeListener ) null ) ; 
 + fail ( " Failed on adding null change listener . " ) ; 
 + } catch ( IllegalArgumentException ignore ) { 
 + looperThread . testComplete ( ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void addChangeListener _ throwOnUnmanagedObject ( ) { 
 + Dog dog = new Dog ( ) ; 
 + 
 + try { 
 + dog . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + } 
 + } ) ; 
 + fail ( " Failed on adding listener on null realm . " ) ; 
 + } catch ( IllegalArgumentException ignore ) { 
 + looperThread . testComplete ( ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void removeChangeListener _ throwOnRemovingNullListener ( ) { 
 + final Realm realm = looperThread . realm ; 
 + Dog dog = createManagedDogObjectFromRealmInstance ( realm ) ; 
 + 
 + try { 
 + dog . removeChangeListener ( ( RealmChangeListener ) null ) ; 
 + fail ( " Failed on adding null change listener . " ) ; 
 + } catch ( IllegalArgumentException ignore ) { 
 + looperThread . testComplete ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * This test is to see if RealmObject . removeChangeListeners ( ) works as it is intended . 
 + * / 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void removeChangeListeners ( ) { 
 + final Realm realm = looperThread . realm ; 
 + realm . beginTransaction ( ) ; 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setAge ( 13 ) ; 
 + realm . commitTransaction ( ) ; 
 + dog . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + assertTrue ( false ) ; 
 + } 
 + } ) ; 
 + dog . removeChangeListeners ( ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + Dog sameDog = realm . where ( Dog . class ) . equalTo ( Dog . FIELD _ AGE , 13 ) . findFirst ( ) ; 
 + sameDog . setName ( " Jesper " ) ; 
 + realm . commitTransaction ( ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void removeChangeListener _ throwOnUnmanagedObject ( ) { 
 + Dog dog = new Dog ( ) ; 
 + RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + } 
 + } ; 
 + 
 + try { 
 + dog . removeChangeListener ( listener ) ; 
 + fail ( " Failed to remove a listener from null Realm . " ) ; 
 + } catch ( IllegalArgumentException ignore ) { 
 + looperThread . testComplete ( ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void removeChangeListeners _ throwOnUnmanagedObject ( ) { 
 + Dog dog = new Dog ( ) ; 
 + 
 + try { 
 + dog . removeChangeListeners ( ) ; 
 + fail ( " Failed to remove null listener . " ) ; 
 + } catch ( IllegalArgumentException ignore ) { 
 + looperThread . testComplete ( ) ; 
 + } 
 + } 
 }
