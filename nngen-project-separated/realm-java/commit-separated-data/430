BLEU SCORE: 0.018738883683389617

TEST MSG: add backup option when receiving a client reset from Sync protocol
GENERATED MSG: Call SyncManager . notifyErrorHandler

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 1dee611 . . fca1711 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> # # # Internal <nl> <nl> * Updated Realm Sync to 1 . 0 . 0 - BETA - 7 . 1 . <nl> + * Add a Realm backup when receiving a Sync client reset message from the server . <nl> <nl> # # 2 . 2 . 2 <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp <nl> index 8b41842 . . bbafb60 100644 <nl> - - - a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp <nl> + + + b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp <nl> @ @ - 28 , 6 + 28 , 8 @ @ <nl> <nl> # include < impl / realm _ coordinator . hpp > <nl> # include < sync / sync _ manager . hpp > <nl> + # include < object - store / src / sync / impl / sync _ metadata . hpp > <nl> + # include < object - store / src / sync / impl / sync _ file . hpp > <nl> <nl> # include " util . hpp " <nl> # include " jni _ util / jni _ utils . hpp " <nl> @ @ - 61 , 7 + 63 , 7 @ @ public : <nl> coordinator - > wake _ up _ notifier _ worker ( ) ; <nl> } <nl> } ; <nl> - auto error _ handler = [ weak _ session _ ref ] ( std : : error _ code error _ code , bool is _ fatal , const std : : string message ) { <nl> + auto error _ handler = [ weak _ session _ ref , local _ realm _ path ] ( std : : error _ code error _ code , bool is _ fatal , const std : : string message ) { <nl> if ( error _ code . category ( ) ! = realm : : sync : : protocol _ error _ category ( ) & & <nl> error _ code . category ( ) ! = realm : : sync : : client _ error _ category ( ) ) { <nl> / / FIXME : Consider below when moving to the OS sync manager . <nl> @ @ - 74 , 14 + 76 , 47 @ @ public : <nl> return ; <nl> } <nl> <nl> - auto session _ ref = weak _ session _ ref . lock ( ) ; <nl> - if ( session _ ref ) { <nl> - session _ ref . get ( ) - > call _ with _ local _ ref ( [ & ] ( JNIEnv * local _ env , jobject obj ) { <nl> - static realm : : jni _ util : : JavaMethod notify _ error _ handler ( <nl> - local _ env , obj , " notifySessionError " , " ( ILjava / lang / String ; ) V " ) ; <nl> - local _ env - > CallVoidMethod ( <nl> - obj , notify _ error _ handler , error _ code . value ( ) , local _ env - > NewStringUTF ( message . c _ str ( ) ) ) ; <nl> + / / Handle client reset , without returning to Java <nl> + <nl> + / / we don ' t have the original SyncError so we can ' t call SyncError # is _ client _ reset _ requested <nl> + / / we need to transform the error code to an enum , then do the check manually <nl> + using ProtocolError = realm : : sync : : ProtocolError ; <nl> + auto protocol _ error = static _ cast < ProtocolError > ( error _ code . value ( ) ) ; <nl> + <nl> + / / Documented here : https : / / realm . io / docs / realm - object - server / # client - recovery - from - a - backup <nl> + if ( protocol _ error = = ProtocolError : : bad _ server _ file _ ident <nl> + | | protocol _ error = = ProtocolError : : bad _ client _ file _ ident <nl> + | | protocol _ error = = ProtocolError : : bad _ server _ version <nl> + | | protocol _ error = = ProtocolError : : diverging _ histories ) { <nl> + <nl> + / / Add a SyncFileActionMetadata marking the Realm as needing to be deleted . <nl> + auto recovery _ path = realm : : util : : reserve _ unique _ file _ name ( <nl> + realm : : SyncManager : : shared ( ) . recovery _ directory _ path ( ) , <nl> + realm : : util : : create _ timestamped _ template ( " recovered _ realm " ) ) ; <nl> + auto original _ path = local _ realm _ path ; <nl> + <nl> + realm : : jni _ util : : Log : : d ( " A client reset is scheduled for the next app start " ) ; <nl> + realm : : SyncManager : : shared ( ) . perform _ metadata _ update ( [ original _ path = std : : move ( original _ path ) , <nl> + recovery _ path = std : : move ( recovery _ path ) ] ( const auto & manager ) { <nl> + realm : : SyncFileActionMetadata ( manager , <nl> + realm : : SyncFileActionMetadata : : Action : : HandleRealmForClientReset , <nl> + original _ path , <nl> + nullptr , <nl> + nullptr , <nl> + realm : : util : : Optional < std : : string > ( <nl> + std : : move ( recovery _ path ) ) ) ; <nl> } ) ; <nl> + <nl> + } else { <nl> + auto session _ ref = weak _ session _ ref . lock ( ) ; <nl> + if ( session _ ref ) { <nl> + session _ ref . get ( ) - > call _ with _ local _ ref ( [ & ] ( JNIEnv * local _ env , jobject obj ) { <nl> + static realm : : jni _ util : : JavaMethod notify _ error _ handler ( <nl> + local _ env , obj , " notifySessionError " , " ( ILjava / lang / String ; ) V " ) ; <nl> + local _ env - > CallVoidMethod ( <nl> + obj , notify _ error _ handler , error _ code . value ( ) , local _ env - > NewStringUTF ( message . c _ str ( ) ) ) ; <nl> + } ) ; <nl> + } <nl> } <nl> } ; <nl> m _ sync _ session - > set _ sync _ transact _ callback ( sync _ transact _ callback ) ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / BoundState . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / BoundState . java <nl> index 976bada . . e3e4aa5 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / BoundState . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / BoundState . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ class BoundState extends FsmState { <nl> / / Create a new session & bind it <nl> session . createNativeSession ( ) ; <nl> gotoNextState ( SessionState . BINDING ) ; <nl> - <nl> + <nl> } else { <nl> switch ( error . getCategory ( ) ) { <nl> case FATAL : gotoNextState ( SessionState . STOPPED ) ; break ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> index c397fea . . f513c03 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> @ @ - 73 , 13 + 73 , 28 @ @ struct AndroidLoggerFactory : public realm : : SyncLoggerFactory { <nl> } s _ logger _ factory ; <nl> <nl> / / TODO : Move to a better place & not needed after moving to OS <nl> - AndroidLogger & AndroidLogger : : shared ( ) noexcept { <nl> + AndroidLogger & AndroidLogger : : shared ( ) noexcept <nl> + { <nl> static AndroidLogger logger ; <nl> return logger ; <nl> } <nl> <nl> + static jclass sync _ manager = nullptr ; <nl> + static jmethodID sync _ manager _ notify _ error _ handler = nullptr ; <nl> + <nl> + static void error _ handler ( int error _ code , std : : string message ) <nl> + { <nl> + JNIEnv * env ; <nl> + if ( g _ vm - > GetEnv ( ( void * * ) & env , JNI _ VERSION _ 1 _ 6 ) ! = JNI _ OK ) { <nl> + throw std : : runtime _ error ( " JVM is not attached to this thread . Called in error _ handler . " ) ; <nl> + } <nl> + <nl> + env - > CallStaticVoidMethod ( sync _ manager , <nl> + sync _ manager _ notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; <nl> + } <nl> + <nl> JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient <nl> - ( JNIEnv * env , jclass ) <nl> + ( JNIEnv * env , jclass sync _ manager _ class ) <nl> { <nl> TR _ ENTER ( env ) <nl> if ( sync _ client ) return ; <nl> @ @ - 90 , 13 + 105 , 19 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient <nl> sync : : Client : : Config config ; <nl> config . logger = & AndroidLogger : : shared ( ) ; <nl> sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws <nl> - / / FIXME setup error handler for client <nl> + <nl> + / / This function should only be called once , so below is safe . <nl> + sync _ manager = sync _ manager _ class ; <nl> + sync _ manager _ notify _ error _ handler = env - > GetStaticMethodID ( sync _ manager , <nl> + " notifyErrorHandler " , " ( ILjava / lang / String ; ) V " ) ; <nl> + sync _ client - > set _ error _ handler ( error _ handler ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> / / Create the thread from java side to avoid some strange errors when native throws . <nl> JNIEXPORT void JNICALL <nl> - Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) { <nl> + Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) <nl> + { <nl> try { <nl> sync _ client - > run ( ) ; <nl> } CATCH _ STD ( ) <nl> diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp <nl> index 2c571bd . . eb00c1a 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / util . cpp <nl> @ @ - 38 , 8 + 38 , 6 @ @ jclass java _ lang _ float ; <nl> jmethodID java _ lang _ float _ init ; <nl> jclass java _ lang _ double ; <nl> jmethodID java _ lang _ double _ init ; <nl> - jclass sync _ manager ; <nl> - jmethodID sync _ manager _ notify _ error _ handler ; <nl> jclass session _ class _ ref ; <nl> jmethodID session _ error _ handler ; <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp <nl> index 7cadba4 . . 9db3763 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . hpp <nl> + + + b / realm / realm - library / src / main / cpp / util . hpp <nl> @ @ - 713 , 8 + 713 , 6 @ @ extern jclass java _ lang _ double ; <nl> extern jmethodID java _ lang _ double _ init ; <nl> <nl> / / FIXME Move to own library <nl> - extern jclass sync _ manager ; <nl> - extern jmethodID sync _ manager _ notify _ error _ handler ; <nl> extern jclass session _ class _ ref ; <nl> extern jmethodID session _ error _ handler ; <nl> <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> index 56dfad5 . . 01891b6 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> @ @ - 206 , 6 + 206 , 7 @ @ public final class SyncManager { <nl> / / This is called from SyncManager . cpp from the worker thread the Sync Client is running on <nl> / / Right now Core doesn ' t send these errors to the proper session , so instead we need to notify all sessions <nl> / / from here . This can be removed once better error propagation is implemented in Sync Core . <nl> + @ SuppressWarnings ( " unused " ) <nl> private static void notifyErrorHandler ( int errorCode , String errorMessage ) { <nl> ObjectServerError error = new ObjectServerError ( ErrorCode . fromInt ( errorCode ) , errorMessage ) ; <nl> for ( SyncSession session : SessionStore . getAllSessions ( ) ) {

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 1dee611 . . fca1711 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 # # # Internal 
 
 * Updated Realm Sync to 1 . 0 . 0 - BETA - 7 . 1 . 
 + * Add a Realm backup when receiving a Sync client reset message from the server . 
 
 # # 2 . 2 . 2 
 
 diff - - git a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp 
 index 8b41842 . . bbafb60 100644 
 - - - a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp 
 + + + b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp 
 @ @ - 28 , 6 + 28 , 8 @ @ 
 
 # include < impl / realm _ coordinator . hpp > 
 # include < sync / sync _ manager . hpp > 
 + # include < object - store / src / sync / impl / sync _ metadata . hpp > 
 + # include < object - store / src / sync / impl / sync _ file . hpp > 
 
 # include " util . hpp " 
 # include " jni _ util / jni _ utils . hpp " 
 @ @ - 61 , 7 + 63 , 7 @ @ public : 
 coordinator - > wake _ up _ notifier _ worker ( ) ; 
 } 
 } ; 
 - auto error _ handler = [ weak _ session _ ref ] ( std : : error _ code error _ code , bool is _ fatal , const std : : string message ) { 
 + auto error _ handler = [ weak _ session _ ref , local _ realm _ path ] ( std : : error _ code error _ code , bool is _ fatal , const std : : string message ) { 
 if ( error _ code . category ( ) ! = realm : : sync : : protocol _ error _ category ( ) & & 
 error _ code . category ( ) ! = realm : : sync : : client _ error _ category ( ) ) { 
 / / FIXME : Consider below when moving to the OS sync manager . 
 @ @ - 74 , 14 + 76 , 47 @ @ public : 
 return ; 
 } 
 
 - auto session _ ref = weak _ session _ ref . lock ( ) ; 
 - if ( session _ ref ) { 
 - session _ ref . get ( ) - > call _ with _ local _ ref ( [ & ] ( JNIEnv * local _ env , jobject obj ) { 
 - static realm : : jni _ util : : JavaMethod notify _ error _ handler ( 
 - local _ env , obj , " notifySessionError " , " ( ILjava / lang / String ; ) V " ) ; 
 - local _ env - > CallVoidMethod ( 
 - obj , notify _ error _ handler , error _ code . value ( ) , local _ env - > NewStringUTF ( message . c _ str ( ) ) ) ; 
 + / / Handle client reset , without returning to Java 
 + 
 + / / we don ' t have the original SyncError so we can ' t call SyncError # is _ client _ reset _ requested 
 + / / we need to transform the error code to an enum , then do the check manually 
 + using ProtocolError = realm : : sync : : ProtocolError ; 
 + auto protocol _ error = static _ cast < ProtocolError > ( error _ code . value ( ) ) ; 
 + 
 + / / Documented here : https : / / realm . io / docs / realm - object - server / # client - recovery - from - a - backup 
 + if ( protocol _ error = = ProtocolError : : bad _ server _ file _ ident 
 + | | protocol _ error = = ProtocolError : : bad _ client _ file _ ident 
 + | | protocol _ error = = ProtocolError : : bad _ server _ version 
 + | | protocol _ error = = ProtocolError : : diverging _ histories ) { 
 + 
 + / / Add a SyncFileActionMetadata marking the Realm as needing to be deleted . 
 + auto recovery _ path = realm : : util : : reserve _ unique _ file _ name ( 
 + realm : : SyncManager : : shared ( ) . recovery _ directory _ path ( ) , 
 + realm : : util : : create _ timestamped _ template ( " recovered _ realm " ) ) ; 
 + auto original _ path = local _ realm _ path ; 
 + 
 + realm : : jni _ util : : Log : : d ( " A client reset is scheduled for the next app start " ) ; 
 + realm : : SyncManager : : shared ( ) . perform _ metadata _ update ( [ original _ path = std : : move ( original _ path ) , 
 + recovery _ path = std : : move ( recovery _ path ) ] ( const auto & manager ) { 
 + realm : : SyncFileActionMetadata ( manager , 
 + realm : : SyncFileActionMetadata : : Action : : HandleRealmForClientReset , 
 + original _ path , 
 + nullptr , 
 + nullptr , 
 + realm : : util : : Optional < std : : string > ( 
 + std : : move ( recovery _ path ) ) ) ; 
 } ) ; 
 + 
 + } else { 
 + auto session _ ref = weak _ session _ ref . lock ( ) ; 
 + if ( session _ ref ) { 
 + session _ ref . get ( ) - > call _ with _ local _ ref ( [ & ] ( JNIEnv * local _ env , jobject obj ) { 
 + static realm : : jni _ util : : JavaMethod notify _ error _ handler ( 
 + local _ env , obj , " notifySessionError " , " ( ILjava / lang / String ; ) V " ) ; 
 + local _ env - > CallVoidMethod ( 
 + obj , notify _ error _ handler , error _ code . value ( ) , local _ env - > NewStringUTF ( message . c _ str ( ) ) ) ; 
 + } ) ; 
 + } 
 } 
 } ; 
 m _ sync _ session - > set _ sync _ transact _ callback ( sync _ transact _ callback ) ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / BoundState . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / BoundState . java 
 index 976bada . . e3e4aa5 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / BoundState . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / BoundState . java 
 @ @ - 67 , 7 + 67 , 7 @ @ class BoundState extends FsmState { 
 / / Create a new session & bind it 
 session . createNativeSession ( ) ; 
 gotoNextState ( SessionState . BINDING ) ; 
 - 
 + 
 } else { 
 switch ( error . getCategory ( ) ) { 
 case FATAL : gotoNextState ( SessionState . STOPPED ) ; break ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 index c397fea . . f513c03 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 @ @ - 73 , 13 + 73 , 28 @ @ struct AndroidLoggerFactory : public realm : : SyncLoggerFactory { 
 } s _ logger _ factory ; 
 
 / / TODO : Move to a better place & not needed after moving to OS 
 - AndroidLogger & AndroidLogger : : shared ( ) noexcept { 
 + AndroidLogger & AndroidLogger : : shared ( ) noexcept 
 + { 
 static AndroidLogger logger ; 
 return logger ; 
 } 
 
 + static jclass sync _ manager = nullptr ; 
 + static jmethodID sync _ manager _ notify _ error _ handler = nullptr ; 
 + 
 + static void error _ handler ( int error _ code , std : : string message ) 
 + { 
 + JNIEnv * env ; 
 + if ( g _ vm - > GetEnv ( ( void * * ) & env , JNI _ VERSION _ 1 _ 6 ) ! = JNI _ OK ) { 
 + throw std : : runtime _ error ( " JVM is not attached to this thread . Called in error _ handler . " ) ; 
 + } 
 + 
 + env - > CallStaticVoidMethod ( sync _ manager , 
 + sync _ manager _ notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; 
 + } 
 + 
 JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient 
 - ( JNIEnv * env , jclass ) 
 + ( JNIEnv * env , jclass sync _ manager _ class ) 
 { 
 TR _ ENTER ( env ) 
 if ( sync _ client ) return ; 
 @ @ - 90 , 13 + 105 , 19 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient 
 sync : : Client : : Config config ; 
 config . logger = & AndroidLogger : : shared ( ) ; 
 sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws 
 - / / FIXME setup error handler for client 
 + 
 + / / This function should only be called once , so below is safe . 
 + sync _ manager = sync _ manager _ class ; 
 + sync _ manager _ notify _ error _ handler = env - > GetStaticMethodID ( sync _ manager , 
 + " notifyErrorHandler " , " ( ILjava / lang / String ; ) V " ) ; 
 + sync _ client - > set _ error _ handler ( error _ handler ) ; 
 } CATCH _ STD ( ) 
 } 
 
 / / Create the thread from java side to avoid some strange errors when native throws . 
 JNIEXPORT void JNICALL 
 - Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) { 
 + Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) 
 + { 
 try { 
 sync _ client - > run ( ) ; 
 } CATCH _ STD ( ) 
 diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp 
 index 2c571bd . . eb00c1a 100644 
 - - - a / realm / realm - library / src / main / cpp / util . cpp 
 + + + b / realm / realm - library / src / main / cpp / util . cpp 
 @ @ - 38 , 8 + 38 , 6 @ @ jclass java _ lang _ float ; 
 jmethodID java _ lang _ float _ init ; 
 jclass java _ lang _ double ; 
 jmethodID java _ lang _ double _ init ; 
 - jclass sync _ manager ; 
 - jmethodID sync _ manager _ notify _ error _ handler ; 
 jclass session _ class _ ref ; 
 jmethodID session _ error _ handler ; 
 
 diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp 
 index 7cadba4 . . 9db3763 100644 
 - - - a / realm / realm - library / src / main / cpp / util . hpp 
 + + + b / realm / realm - library / src / main / cpp / util . hpp 
 @ @ - 713 , 8 + 713 , 6 @ @ extern jclass java _ lang _ double ; 
 extern jmethodID java _ lang _ double _ init ; 
 
 / / FIXME Move to own library 
 - extern jclass sync _ manager ; 
 - extern jmethodID sync _ manager _ notify _ error _ handler ; 
 extern jclass session _ class _ ref ; 
 extern jmethodID session _ error _ handler ; 
 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 index 56dfad5 . . 01891b6 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 @ @ - 206 , 6 + 206 , 7 @ @ public final class SyncManager { 
 / / This is called from SyncManager . cpp from the worker thread the Sync Client is running on 
 / / Right now Core doesn ' t send these errors to the proper session , so instead we need to notify all sessions 
 / / from here . This can be removed once better error propagation is implemented in Sync Core . 
 + @ SuppressWarnings ( " unused " ) 
 private static void notifyErrorHandler ( int errorCode , String errorMessage ) { 
 ObjectServerError error = new ObjectServerError ( ErrorCode . fromInt ( errorCode ) , errorMessage ) ; 
 for ( SyncSession session : SessionStore . getAllSessions ( ) ) {
