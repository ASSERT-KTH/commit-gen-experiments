BLEU SCORE: 0.01509869171115925

TEST MSG: Fix tests
GENERATED MSG: Schemas are now only validated once across threads .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> index 5c92ab9 . . 0f92108 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> @ @ - 539 , 6 + 539 , 7 @ @ public class RealmResultsTests extends CollectionTests { <nl> } <nl> <nl> @ Test <nl> + @ RunTestInLooperThread <nl> public void distinctAsync _ notIndexedFields ( ) { <nl> final long numberOfBlocks = 25 ; <nl> final long numberOfObjects = 10 ; <nl> @ @ - 551 , 9 + 552 , 11 @ @ public class RealmResultsTests extends CollectionTests { <nl> } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> + looperThread . testComplete ( ) ; <nl> } <nl> <nl> @ Test <nl> + @ RunTestInLooperThread <nl> public void distinctAsync _ doesNotExist ( ) { <nl> final long numberOfBlocks = 25 ; <nl> final long numberOfObjects = 10 ; <nl> @ @ - 563 , 9 + 566 , 11 @ @ public class RealmResultsTests extends CollectionTests { <nl> realm . where ( AnnotationIndexTypes . class ) . findAll ( ) . distinctAsync ( " doesNotExist " ) ; <nl> } catch ( IllegalArgumentException ignored ) { <nl> } <nl> + looperThread . testComplete ( ) ; <nl> } <nl> <nl> @ Test <nl> + @ RunTestInLooperThread <nl> public void distinctAsync _ invalidTypes ( ) { <nl> populateTestRealm ( realm , TEST _ DATA _ SIZE ) ; <nl> <nl> @ @ - 575 , 9 + 580 , 11 @ @ public class RealmResultsTests extends CollectionTests { <nl> } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> + looperThread . testComplete ( ) ; <nl> } <nl> <nl> @ Test <nl> + @ RunTestInLooperThread <nl> public void distinctAsync _ indexedLinkedFields ( ) { <nl> final long numberOfBlocks = 25 ; <nl> final long numberOfObjects = 10 ; <nl> @ @ - 590 , 9 + 597 , 11 @ @ public class RealmResultsTests extends CollectionTests { <nl> } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> + looperThread . testComplete ( ) ; <nl> } <nl> <nl> @ Test <nl> + @ RunTestInLooperThread <nl> public void distinctAsync _ notIndexedLinkedFields ( ) { <nl> populateForDistinctInvalidTypesLinked ( realm ) ; <nl> <nl> @ @ - 600 , 6 + 609 , 7 @ @ public class RealmResultsTests extends CollectionTests { <nl> realm . where ( AllJavaTypes . class ) . findAll ( ) . distinctAsync ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ BINARY ) ; <nl> } catch ( IllegalArgumentException ignored ) { <nl> } <nl> + looperThread . testComplete ( ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> index 60a5a04 . . 3fba8aa 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> @ @ - 17 , 8 + 17 , 6 @ @ package io . realm ; <nl> <nl> import android . content . Context ; <nl> import android . os . Build ; <nl> - import android . os . Handler ; <nl> - import android . os . HandlerThread ; <nl> import android . support . test . InstrumentationRegistry ; <nl> import android . support . test . runner . AndroidJUnit4 ; <nl> import android . util . Base64 ; <nl> @ @ - 35 , 24 + 33 , 19 @ @ import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . util . Date ; <nl> import java . util . concurrent . CountDownLatch ; <nl> - import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . AllTypesPrimaryKey ; <nl> - import io . realm . entities . Cat ; <nl> import io . realm . entities . Dog ; <nl> - import io . realm . entities . Owner ; <nl> import io . realm . entities . PrimaryKeyAsLong ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . rule . RunTestInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> - import io . realm . util . RealmBackgroundTask ; <nl> <nl> import static org . hamcrest . number . OrderingComparison . greaterThanOrEqualTo ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 534 , 7 + 527 , 6 @ @ public class TypeBasedNotificationsTests { <nl> realm . commitTransaction ( ) ; <nl> <nl> final Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; <nl> - assertTrue ( dog . load ( ) ) ; <nl> <nl> looperThread . keepStrongReference . add ( dog ) ; <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ @ - 590 , 7 + 582 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; <nl> / / Execute the query . <nl> - assertEquals ( 1 , dogs . size ( ) ) ; <nl> + dogs . first ( ) ; <nl> looperThread . keepStrongReference . add ( dogs ) ; <nl> dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index 661e2bb . . fccb21d 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 0 . 83 <nl> + * Opening a Realm file from one thread will no longer be blocked by a write transaction from another thread . <nl> * BREAKING CHANGE : Removed deprecated methods and constructors from the Realm class . <nl> * Fixed a bug which might cause failure when loading the native library . <nl> * Fixed a bug which might trigger a timeout in Context . finalize ( ) . <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 976bbd3 . . 8c55ec9 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . json . JSONObject ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . sql . Time ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Date ; <nl> @ @ - 39 , 6 + 40 , 9 @ @ import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . Future ; <nl> + import java . util . concurrent . FutureTask ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + import java . util . concurrent . TimeoutException ; <nl> <nl> import io . realm . dynamic . DynamicRealmObject ; <nl> import io . realm . entities . AllTypes ; <nl> @ @ - 1818 , 4 + 1822 , 38 @ @ public class RealmTest extends AndroidTestCase { <nl> testRealm = Realm . getInstance ( newConfig ) ; <nl> assertNotNull ( testRealm ) ; <nl> } <nl> + <nl> + public void testValidateSchemasOverThreads ( ) throws InterruptedException , TimeoutException , ExecutionException { <nl> + final RealmConfiguration config = TestHelper . createConfiguration ( getContext ( ) , " foo " ) ; <nl> + final CountDownLatch bgThreadLocked = new CountDownLatch ( 1 ) ; <nl> + final CountDownLatch mainThreadDone = new CountDownLatch ( 1 ) ; <nl> + <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + bgThreadLocked . countDown ( ) ; <nl> + try { <nl> + mainThreadDone . await ( 5 , TimeUnit . SECONDS ) ; <nl> + } catch ( InterruptedException ignored ) { <nl> + } <nl> + realm . close ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> + @ Override <nl> + public Boolean call ( ) throws Exception { <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + realm . close ( ) ; <nl> + mainThreadDone . countDown ( ) ; <nl> + return true ; <nl> + } <nl> + } ) ; <nl> + <nl> + bgThreadLocked . await ( 2 , TimeUnit . SECONDS ) ; <nl> + assertTrue ( future . get ( 2 , TimeUnit . SECONDS ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 17b02f9 . . 8ee5193 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 128 , 6 + 128 , 9 @ @ public final class Realm implements Closeable { <nl> } <nl> } ; <nl> <nl> + / / List of Realm files that has already been validated <nl> + private static final Map < String , Boolean > validatedRealmFiles = new ConcurrentHashMap < String , Boolean > ( ) ; <nl> + <nl> private static final ThreadLocal < Map < RealmConfiguration , Integer > > referenceCount = <nl> new ThreadLocal < Map < RealmConfiguration , Integer > > ( ) { <nl> @ Override <nl> @ @ - 242 , 6 + 245 , 7 @ @ public final class Realm implements Closeable { <nl> } <nl> if ( sharedGroup ! = null & & references = = 1 ) { <nl> realmsCache . get ( ) . remove ( configuration ) ; <nl> + validatedRealmFiles . remove ( configuration . getPath ( ) ) ; <nl> sharedGroup . close ( ) ; <nl> sharedGroup = null ; <nl> <nl> @ @ - 408 , 7 + 412 , 9 @ @ public final class Realm implements Closeable { <nl> private static Realm create ( RealmConfiguration configuration ) { <nl> boolean autoRefresh = Looper . myLooper ( ) ! = null ; <nl> try { <nl> - return createAndValidate ( configuration , true , autoRefresh ) ; <nl> + boolean validateSchema = validatedRealmFiles . containsKey ( configuration . getPath ( ) ) ; <nl> + return createAndValidate ( configuration , validateSchema , autoRefresh ) ; <nl> + <nl> } catch ( RealmMigrationNeededException e ) { <nl> if ( configuration . shouldDeleteRealmIfMigrationNeeded ( ) ) { <nl> deleteRealm ( configuration ) ; <nl> @ @ - 545 , 6 + 551 , 7 @ @ public final class Realm implements Closeable { <nl> mediator . validateTable ( modelClass , realm . transaction ) ; <nl> realm . columnIndices . addClass ( modelClass , mediator . getColumnIndices ( modelClass ) ) ; <nl> } <nl> + validatedRealmFiles . put ( realm . getPath ( ) , true ) ; <nl> } finally { <nl> if ( commitNeeded ) { <nl> realm . commitTransaction ( ) ; <nl> @ @ - 1477 , 6 + 1484 , 7 @ @ public final class Realm implements Closeable { <nl> realm . beginTransaction ( ) ; <nl> realm . setVersion ( realmMigration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> realm . commitTransaction ( ) ; <nl> + validatedRealmFiles . remove ( configuration . getPath ( ) ) ; <nl> } finally { <nl> if ( realm ! = null ) { <nl> realm . close ( ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 index 5c92ab9 . . 0f92108 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 @ @ - 539 , 6 + 539 , 7 @ @ public class RealmResultsTests extends CollectionTests { 
 } 
 
 @ Test 
 + @ RunTestInLooperThread 
 public void distinctAsync _ notIndexedFields ( ) { 
 final long numberOfBlocks = 25 ; 
 final long numberOfObjects = 10 ; 
 @ @ - 551 , 9 + 552 , 11 @ @ public class RealmResultsTests extends CollectionTests { 
 } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 + looperThread . testComplete ( ) ; 
 } 
 
 @ Test 
 + @ RunTestInLooperThread 
 public void distinctAsync _ doesNotExist ( ) { 
 final long numberOfBlocks = 25 ; 
 final long numberOfObjects = 10 ; 
 @ @ - 563 , 9 + 566 , 11 @ @ public class RealmResultsTests extends CollectionTests { 
 realm . where ( AnnotationIndexTypes . class ) . findAll ( ) . distinctAsync ( " doesNotExist " ) ; 
 } catch ( IllegalArgumentException ignored ) { 
 } 
 + looperThread . testComplete ( ) ; 
 } 
 
 @ Test 
 + @ RunTestInLooperThread 
 public void distinctAsync _ invalidTypes ( ) { 
 populateTestRealm ( realm , TEST _ DATA _ SIZE ) ; 
 
 @ @ - 575 , 9 + 580 , 11 @ @ public class RealmResultsTests extends CollectionTests { 
 } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 + looperThread . testComplete ( ) ; 
 } 
 
 @ Test 
 + @ RunTestInLooperThread 
 public void distinctAsync _ indexedLinkedFields ( ) { 
 final long numberOfBlocks = 25 ; 
 final long numberOfObjects = 10 ; 
 @ @ - 590 , 9 + 597 , 11 @ @ public class RealmResultsTests extends CollectionTests { 
 } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 + looperThread . testComplete ( ) ; 
 } 
 
 @ Test 
 + @ RunTestInLooperThread 
 public void distinctAsync _ notIndexedLinkedFields ( ) { 
 populateForDistinctInvalidTypesLinked ( realm ) ; 
 
 @ @ - 600 , 6 + 609 , 7 @ @ public class RealmResultsTests extends CollectionTests { 
 realm . where ( AllJavaTypes . class ) . findAll ( ) . distinctAsync ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ BINARY ) ; 
 } catch ( IllegalArgumentException ignored ) { 
 } 
 + looperThread . testComplete ( ) ; 
 } 
 
 @ Test 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 index 60a5a04 . . 3fba8aa 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 @ @ - 17 , 8 + 17 , 6 @ @ package io . realm ; 
 
 import android . content . Context ; 
 import android . os . Build ; 
 - import android . os . Handler ; 
 - import android . os . HandlerThread ; 
 import android . support . test . InstrumentationRegistry ; 
 import android . support . test . runner . AndroidJUnit4 ; 
 import android . util . Base64 ; 
 @ @ - 35 , 24 + 33 , 19 @ @ import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . util . Date ; 
 import java . util . concurrent . CountDownLatch ; 
 - import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . AllTypesPrimaryKey ; 
 - import io . realm . entities . Cat ; 
 import io . realm . entities . Dog ; 
 - import io . realm . entities . Owner ; 
 import io . realm . entities . PrimaryKeyAsLong ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . rule . RunTestInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 - import io . realm . util . RealmBackgroundTask ; 
 
 import static org . hamcrest . number . OrderingComparison . greaterThanOrEqualTo ; 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 @ @ - 534 , 7 + 527 , 6 @ @ public class TypeBasedNotificationsTests { 
 realm . commitTransaction ( ) ; 
 
 final Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; 
 - assertTrue ( dog . load ( ) ) ; 
 
 looperThread . keepStrongReference . add ( dog ) ; 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ @ - 590 , 7 + 582 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; 
 / / Execute the query . 
 - assertEquals ( 1 , dogs . size ( ) ) ; 
 + dogs . first ( ) ; 
 looperThread . keepStrongReference . add ( dogs ) ; 
 dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index 661e2bb . . fccb21d 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 0 . 83 
 + * Opening a Realm file from one thread will no longer be blocked by a write transaction from another thread . 
 * BREAKING CHANGE : Removed deprecated methods and constructors from the Realm class . 
 * Fixed a bug which might cause failure when loading the native library . 
 * Fixed a bug which might trigger a timeout in Context . finalize ( ) . 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 976bbd3 . . 8c55ec9 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . json . JSONObject ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 + import java . sql . Time ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Date ; 
 @ @ - 39 , 6 + 40 , 9 @ @ import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . Future ; 
 + import java . util . concurrent . FutureTask ; 
 + import java . util . concurrent . TimeUnit ; 
 + import java . util . concurrent . TimeoutException ; 
 
 import io . realm . dynamic . DynamicRealmObject ; 
 import io . realm . entities . AllTypes ; 
 @ @ - 1818 , 4 + 1822 , 38 @ @ public class RealmTest extends AndroidTestCase { 
 testRealm = Realm . getInstance ( newConfig ) ; 
 assertNotNull ( testRealm ) ; 
 } 
 + 
 + public void testValidateSchemasOverThreads ( ) throws InterruptedException , TimeoutException , ExecutionException { 
 + final RealmConfiguration config = TestHelper . createConfiguration ( getContext ( ) , " foo " ) ; 
 + final CountDownLatch bgThreadLocked = new CountDownLatch ( 1 ) ; 
 + final CountDownLatch mainThreadDone = new CountDownLatch ( 1 ) ; 
 + 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + bgThreadLocked . countDown ( ) ; 
 + try { 
 + mainThreadDone . await ( 5 , TimeUnit . SECONDS ) ; 
 + } catch ( InterruptedException ignored ) { 
 + } 
 + realm . close ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 + @ Override 
 + public Boolean call ( ) throws Exception { 
 + Realm realm = Realm . getInstance ( config ) ; 
 + realm . close ( ) ; 
 + mainThreadDone . countDown ( ) ; 
 + return true ; 
 + } 
 + } ) ; 
 + 
 + bgThreadLocked . await ( 2 , TimeUnit . SECONDS ) ; 
 + assertTrue ( future . get ( 2 , TimeUnit . SECONDS ) ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 17b02f9 . . 8ee5193 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 128 , 6 + 128 , 9 @ @ public final class Realm implements Closeable { 
 } 
 } ; 
 
 + / / List of Realm files that has already been validated 
 + private static final Map < String , Boolean > validatedRealmFiles = new ConcurrentHashMap < String , Boolean > ( ) ; 
 + 
 private static final ThreadLocal < Map < RealmConfiguration , Integer > > referenceCount = 
 new ThreadLocal < Map < RealmConfiguration , Integer > > ( ) { 
 @ Override 
 @ @ - 242 , 6 + 245 , 7 @ @ public final class Realm implements Closeable { 
 } 
 if ( sharedGroup ! = null & & references = = 1 ) { 
 realmsCache . get ( ) . remove ( configuration ) ; 
 + validatedRealmFiles . remove ( configuration . getPath ( ) ) ; 
 sharedGroup . close ( ) ; 
 sharedGroup = null ; 
 
 @ @ - 408 , 7 + 412 , 9 @ @ public final class Realm implements Closeable { 
 private static Realm create ( RealmConfiguration configuration ) { 
 boolean autoRefresh = Looper . myLooper ( ) ! = null ; 
 try { 
 - return createAndValidate ( configuration , true , autoRefresh ) ; 
 + boolean validateSchema = validatedRealmFiles . containsKey ( configuration . getPath ( ) ) ; 
 + return createAndValidate ( configuration , validateSchema , autoRefresh ) ; 
 + 
 } catch ( RealmMigrationNeededException e ) { 
 if ( configuration . shouldDeleteRealmIfMigrationNeeded ( ) ) { 
 deleteRealm ( configuration ) ; 
 @ @ - 545 , 6 + 551 , 7 @ @ public final class Realm implements Closeable { 
 mediator . validateTable ( modelClass , realm . transaction ) ; 
 realm . columnIndices . addClass ( modelClass , mediator . getColumnIndices ( modelClass ) ) ; 
 } 
 + validatedRealmFiles . put ( realm . getPath ( ) , true ) ; 
 } finally { 
 if ( commitNeeded ) { 
 realm . commitTransaction ( ) ; 
 @ @ - 1477 , 6 + 1484 , 7 @ @ public final class Realm implements Closeable { 
 realm . beginTransaction ( ) ; 
 realm . setVersion ( realmMigration . execute ( realm , realm . getVersion ( ) ) ) ; 
 realm . commitTransaction ( ) ; 
 + validatedRealmFiles . remove ( configuration . getPath ( ) ) ; 
 } finally { 
 if ( realm ! = null ) { 
 realm . close ( ) ;
