BLEU SCORE: 0.017177441586169604

TEST MSG: Extend TestRealmObjectFileObject to support fine - grained Synthetic test class
GENERATED MSG: Get rid of interfaces and only define two kind of lists .

TEST DIFF (one line): diff - - git a / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> index 2433360 . . 4fe2ba5 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> + + + b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import org . junit . Test ; <nl> import java . io . IOException ; <nl> import java . util . Arrays ; <nl> <nl> + import javax . lang . model . element . Modifier ; <nl> import javax . tools . JavaFileObject ; <nl> <nl> import static com . google . testing . compile . JavaSourceSubjectFactory . javaSource ; <nl> @ @ - 60 , 15 + 61 , 6 @ @ public class RealmProcessorTest { <nl> private JavaFileObject customInterface = JavaFileObjects . forResource ( " some / test / CustomInterface . java " ) ; <nl> private JavaFileObject backlinks = JavaFileObjects . forResource ( " some / test / Backlinks . java " ) ; <nl> private JavaFileObject backlinksTarget = JavaFileObjects . forResource ( " some / test / BacklinkTarget . java " ) ; <nl> - private JavaFileObject backlinksInvalidField = JavaFileObjects . forResource ( " some / test / Backlinks _ InvalidFieldType . java " ) ; <nl> - private JavaFileObject backlinksLinked = JavaFileObjects . forResource ( " some / test / Backlinks _ LinkedFields . java " ) ; <nl> - private JavaFileObject backlinksMissingParam = JavaFileObjects . forResource ( " some / test / Backlinks _ MissingParameter . java " ) ; <nl> - private JavaFileObject backlinksMissingGeneric = JavaFileObjects . forResource ( " some / test / Backlinks _ MissingGeneric . java " ) ; <nl> - private JavaFileObject backlinksRequired = JavaFileObjects . forResource ( " some / test / Backlinks _ Required . java " ) ; <nl> - private JavaFileObject backlinksIgnored = JavaFileObjects . forResource ( " some / test / Backlinks _ Ignored . java " ) ; <nl> - private JavaFileObject backlinksNotFound = JavaFileObjects . forResource ( " some / test / Backlinks _ NotFound . java " ) ; <nl> - private JavaFileObject backlinksNonFinalField = JavaFileObjects . forResource ( " some / test / Backlinks _ NotFinal . java " ) ; <nl> - private JavaFileObject backlinksWrongType = JavaFileObjects . forResource ( " some / test / Backlinks _ WrongType . java " ) ; <nl> private JavaFileObject nonLatinName = JavaFileObjects . forResource ( " some / test / Á rv í zt ű r ő T ü k ö rf ú r ó g é p . java " ) ; <nl> <nl> @ Test <nl> @ @ - 79 , 7 + 71 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileProcessedSimpleFile ( ) throws Exception { <nl> + public void compileProcessedSimpleFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( simpleModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 87 , 7 + 79 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileProcessedEmptyFile ( ) throws Exception { <nl> + public void compileProcessedEmptyFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( emptyModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 95 , 14 + 87 , 14 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> / / Disabled because it does not seem to find the generated interface file @ Test <nl> - public void compileSimpleProxyFile ( ) throws Exception { <nl> + public void compileSimpleProxyFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( simpleProxy ) <nl> . compilesWithoutError ( ) ; <nl> } <nl> <nl> @ Test <nl> - public void compareProcessedSimpleFile ( ) throws Exception { <nl> + public void compareProcessedSimpleFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( simpleModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 112 , 7 + 104 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileProcessedNullTypesFile ( ) throws Exception { <nl> + public void compileProcessedNullTypesFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( nullTypesModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 120 , 7 + 112 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compareProcessedNullTypesFile ( ) throws Exception { <nl> + public void compareProcessedNullTypesFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( nullTypesModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 137 , 7 + 129 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileProcessedAllTypesFile ( ) throws Exception { <nl> + public void compileProcessedAllTypesFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( allTypesModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 145 , 14 + 137 , 14 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileAllTypesProxyFile ( ) throws Exception { <nl> + public void compileAllTypesProxyFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( allTypesModel ) <nl> . compilesWithoutError ( ) ; <nl> } <nl> <nl> @ Test <nl> - public void compareProcessedAllTypesFile ( ) throws Exception { <nl> + public void compareProcessedAllTypesFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( allTypesModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 163 , 7 + 155 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileAppModuleCustomClasses ( ) throws Exception { <nl> + public void compileAppModuleCustomClasses ( ) { <nl> ASSERT . about ( javaSources ( ) ) <nl> . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / AppModuleCustomClasses . java " ) ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 171 , 7 + 163 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileAppModuleAllClasses ( ) throws Exception { <nl> + public void compileAppModuleAllClasses ( ) { <nl> ASSERT . about ( javaSources ( ) ) <nl> . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / AppModuleAllClasses . java " ) ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 179 , 7 + 171 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileLibraryModulesAllClasses ( ) throws Exception { <nl> + public void compileLibraryModulesAllClasses ( ) { <nl> ASSERT . about ( javaSources ( ) ) <nl> . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / LibraryModuleAllClasses . java " ) ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 187 , 7 + 179 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileLibraryModulesCustomClasses ( ) throws Exception { <nl> + public void compileLibraryModulesCustomClasses ( ) { <nl> ASSERT . about ( javaSources ( ) ) <nl> . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / LibraryModuleCustomClasses . java " ) ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 195 , 7 + 187 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileAppModuleMixedParametersFail ( ) throws Exception { <nl> + public void compileAppModuleMixedParametersFail ( ) { <nl> ASSERT . about ( javaSources ( ) ) <nl> . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( <nl> " some / test / InvalidAllTypesModuleMixedParameters . java " ) ) ) <nl> @ @ - 204 , 7 + 196 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileAppModuleWrongTypeFail ( ) throws Exception { <nl> + public void compileAppModuleWrongTypeFail ( ) { <nl> ASSERT . about ( javaSources ( ) ) <nl> . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( <nl> " some / test / InvalidAllTypesModuleWrongType . java " ) ) ) <nl> @ @ - 213 , 7 + 205 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileLibraryModuleMixedParametersFail ( ) throws Exception { <nl> + public void compileLibraryModuleMixedParametersFail ( ) { <nl> ASSERT . about ( javaSources ( ) ) <nl> . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / InvalidLibraryModuleMixedParameters . java " ) ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 221 , 7 + 213 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileLibraryModuleWrongTypeFail ( ) throws Exception { <nl> + public void compileLibraryModuleWrongTypeFail ( ) { <nl> ASSERT . about ( javaSources ( ) ) <nl> . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / InvalidLibraryModuleWrongType . java " ) ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 236 , 7 + 228 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileProcessedBooleansFile ( ) throws Exception { <nl> + public void compileProcessedBooleansFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( booleansModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 244 , 14 + 236 , 14 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileBooleansProxyFile ( ) throws Exception { <nl> + public void compileBooleansProxyFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( booleansModel ) <nl> . compilesWithoutError ( ) ; <nl> } <nl> <nl> @ Test <nl> - public void compareProcessedBooleansFile ( ) throws Exception { <nl> + public void compareProcessedBooleansFile ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( booleansModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 292 , 8 + 284 , 8 @ @ public class RealmProcessorTest { <nl> " Byte " , " Short " , " Integer " , " Long " , " Boolean " } ; <nl> <nl> for ( String fieldType : validIndexFieldTypes ) { <nl> - TestRealmObjectFileObject javaFileObject = <nl> - TestRealmObjectFileObject . getSingleFieldInstance ( " ValidIndexType " , " Index " , fieldType , " testField " ) ; <nl> + RealmSyntheticTestClass javaFileObject = <nl> + new RealmSyntheticTestClass . Builder ( ) . name ( " ValidIndexType " ) . field ( " testField " , fieldType , " Index " ) . build ( ) ; <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( javaFileObject ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 307 , 8 + 299 , 8 @ @ public class RealmProcessorTest { <nl> final String [ ] invalidIndexFieldTypes = { " float " , " double " , " byte [ ] " , " Simple " , " RealmList " , " Float " , " Double " } ; <nl> <nl> for ( String fieldType : invalidIndexFieldTypes ) { <nl> - TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject . getSingleFieldInstance ( <nl> - " InvalidIndexType " , " Index " , fieldType , " testField " ) ; <nl> + RealmSyntheticTestClass javaFileObject = <nl> + new RealmSyntheticTestClass . Builder ( ) . name ( " InvalidIndexType " ) . field ( " testField " , fieldType , " Index " ) . build ( ) ; <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( javaFileObject ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 322 , 8 + 314 , 8 @ @ public class RealmProcessorTest { <nl> final String [ ] validPrimaryKeyFieldTypes = { " byte " , " short " , " int " , " long " , " String " , " Byte " , " Short " , " Integer " , " Long " } ; <nl> <nl> for ( String fieldType : validPrimaryKeyFieldTypes ) { <nl> - TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject . getSingleFieldInstance ( <nl> - " ValidPrimaryKeyType " , " PrimaryKey " , fieldType , " testField " ) ; <nl> + RealmSyntheticTestClass javaFileObject = <nl> + new RealmSyntheticTestClass . Builder ( ) . name ( " ValidPrimaryKeyType " ) . field ( " testField " , fieldType , " PrimaryKey " ) . build ( ) ; <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( javaFileObject ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 337 , 9 + 329 , 8 @ @ public class RealmProcessorTest { <nl> final String [ ] invalidPrimaryKeyFieldTypes = { " boolean " , " java . util . Date " , " Simple " , " RealmList < Simple > " , " Boolean " } ; <nl> <nl> for ( String fieldType : invalidPrimaryKeyFieldTypes ) { <nl> - TestRealmObjectFileObject javaFileObject = <nl> - TestRealmObjectFileObject . getSingleFieldInstance ( <nl> - " InvalidPrimaryKeyType " , " PrimaryKey " , fieldType , " testField " ) ; <nl> + RealmSyntheticTestClass javaFileObject = <nl> + new RealmSyntheticTestClass . Builder ( ) . name ( " InvalidPrimaryKeyType " ) . field ( " testField " , fieldType , " PrimaryKey " ) . build ( ) ; <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( javaFileObject ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 354 , 8 + 345 , 8 @ @ public class RealmProcessorTest { <nl> " Float " , " Double " , " Boolean " , " java . util . Date " } ; <nl> <nl> for ( String fieldType : validPrimaryKeyFieldTypes ) { <nl> - TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject . getSingleFieldInstance ( <nl> - " ValidPrimaryKeyType " , " Required " , fieldType , " testField " ) ; <nl> + RealmSyntheticTestClass javaFileObject = <nl> + new RealmSyntheticTestClass . Builder ( ) . name ( " ValidPrimaryKeyType " ) . field ( " testField " , fieldType , " Required " ) . build ( ) ; <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( javaFileObject ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 370 , 8 + 361 , 8 @ @ public class RealmProcessorTest { <nl> " boolean " , " RealmList < Simple > " , " Simple " } ; <nl> <nl> for ( String fieldType : validPrimaryKeyFieldTypes ) { <nl> - TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject . getSingleFieldInstance ( <nl> - " ValidPrimaryKeyType " , " Required " , fieldType , " testField " ) ; <nl> + RealmSyntheticTestClass javaFileObject = <nl> + new RealmSyntheticTestClass . Builder ( ) . name ( " ValidPrimaryKeyType " ) . field ( " testField " , fieldType , " Required " ) . build ( ) ; <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( javaFileObject ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 380 , 7 + 371 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileConflictingFieldName ( ) throws Exception { <nl> + public void compileConflictingFieldName ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( conflictingFieldNameModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 388 , 7 + 379 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void failOnFinalFields ( ) throws Exception { <nl> + public void failOnFinalFields ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( finalModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 396 , 7 + 387 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void compileTransientFields ( ) throws Exception { <nl> + public void compileTransientFields ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( transientModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 404 , 7 + 395 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void failOnVolatileFields ( ) throws Exception { <nl> + public void failOnVolatileFields ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( volatileModel ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 413 , 7 + 404 , 7 @ @ public class RealmProcessorTest { <nl> <nl> / / annotation without implementing RealmModel interface <nl> @ Test <nl> - public void failOnInvalidRealmModel _ 1 ( ) throws Exception { <nl> + public void failOnInvalidRealmModel _ 1 ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( invalidRealmModelModel _ 1 ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 422 , 7 + 413 , 7 @ @ public class RealmProcessorTest { <nl> <nl> / / it ' s not allowed to extend from another RealmObject <nl> @ Test <nl> - public void failOnInvalidRealmModel _ 2 ( ) throws Exception { <nl> + public void failOnInvalidRealmModel _ 2 ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( invalidRealmModelModel _ 2 ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 431 , 7 + 422 , 7 @ @ public class RealmProcessorTest { <nl> <nl> / / it ' s not allowed to extend from another RealmObject <nl> @ Test <nl> - public void failOnInvalidRealmModel _ 3 ( ) throws Exception { <nl> + public void failOnInvalidRealmModel _ 3 ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( invalidRealmModelModel _ 3 ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 439 , 7 + 430 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void validRealmModelUsingInheritance ( ) throws Exception { <nl> + public void validRealmModelUsingInheritance ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( ValidModelPojo _ ExtendingRealmObject ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 447 , 7 + 438 , 7 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void canNotInheritRealmList ( ) throws Exception { <nl> + public void canNotInheritRealmList ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( UseExtendRealmList ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> @ @ - 487 , 90 + 478 , 157 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> - public void failOnLinkingObjectsWithInvalidFieldType ( ) { <nl> + public void compileSyntheticBacklinks ( ) throws IOException { <nl> + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) <nl> + . builder ( ) . build ( ) ; <nl> ASSERT . about ( javaSources ( ) ) <nl> - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksInvalidField ) ) <nl> + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) <nl> + . processedWith ( new RealmProcessor ( ) ) <nl> + . compilesWithoutError ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void failOnLinkingObjectsWithInvalidFieldType ( ) throws IOException { <nl> + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) <nl> + / / Backlinks must be RealmResults <nl> + . type ( " BacklinkTarget " ) <nl> + . builder ( ) . build ( ) ; <nl> + ASSERT . about ( javaSources ( ) ) <nl> + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . failsToCompile ( ) <nl> . withErrorContaining ( " Fields annotated with @ LinkingObjects must be RealmResults " ) ; <nl> } <nl> <nl> @ Test <nl> - public void failOnLinkingObjectsWithNonFinalField ( ) { <nl> + public void failOnLinkingObjectsWithNonFinalField ( ) throws IOException { <nl> + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) <nl> + / / A field with a @ LinkingObjects annotation must be final <nl> + . modifiers ( Modifier . PUBLIC ) <nl> + . builder ( ) . build ( ) ; <nl> ASSERT . about ( javaSources ( ) ) <nl> - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksNonFinalField ) ) <nl> + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . failsToCompile ( ) <nl> . withErrorContaining ( " must be final " ) ; <nl> } <nl> <nl> @ Test <nl> - public void failsOnLinkingObjectsWithLinkedFields ( ) { <nl> + public void failsOnLinkingObjectsWithLinkedFields ( ) throws IOException { <nl> + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) <nl> + / / Defining a backlink more than one levels back is not supported . <nl> + / / It can be queried though : equalTo ( " selectedFieldParents . selectedFieldParents " ) <nl> + . clearAnnotations ( ) <nl> + . annotation ( " LinkingObjects ( \ " child . id \ " ) " ) <nl> + . builder ( ) . build ( ) ; <nl> ASSERT . about ( javaSources ( ) ) <nl> - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksLinked ) ) <nl> + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . failsToCompile ( ) <nl> . withErrorContaining ( " The use of ' . ' to specify fields in referenced classes is not supported " ) ; <nl> } <nl> <nl> @ Test <nl> - public void failsOnLinkingObjectsMissingFieldName ( ) { <nl> + public void failsOnLinkingObjectsMissingFieldName ( ) throws IOException { <nl> + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) <nl> + / / No backlinked field specified <nl> + . clearAnnotations ( ) <nl> + . annotation ( " LinkingObjects " ) <nl> + . builder ( ) . build ( ) ; <nl> ASSERT . about ( javaSources ( ) ) <nl> - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksMissingParam ) ) <nl> + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . failsToCompile ( ) <nl> . withErrorContaining ( " must have a parameter identifying the link target " ) ; <nl> } <nl> <nl> @ Test <nl> - public void failsOnLinkingObjectsMissingGeneric ( ) { <nl> + public void failsOnLinkingObjectsMissingGeneric ( ) throws IOException { <nl> + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) <nl> + / / No backlink generic param specified <nl> + . type ( " RealmResults " ) <nl> + . builder ( ) . build ( ) ; <nl> ASSERT . about ( javaSources ( ) ) <nl> - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksMissingGeneric ) ) <nl> + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . failsToCompile ( ) <nl> . withErrorContaining ( " must specify a generic type " ) ; <nl> } <nl> <nl> @ Test <nl> - public void failsOnLinkingObjectsWithRequiredFields ( ) { <nl> + public void failsOnLinkingObjectsWithRequiredFields ( ) throws IOException { <nl> + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) <nl> + / / A backlinked field may not be @ Required <nl> + . annotation ( " Required " ) <nl> + . builder ( ) . build ( ) ; <nl> ASSERT . about ( javaSources ( ) ) <nl> - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksRequired ) ) <nl> + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . failsToCompile ( ) <nl> . withErrorContaining ( " cannot be @ Required " ) ; <nl> } <nl> <nl> @ Test <nl> - public void failsOnLinkingObjectsWithIgnoreFields ( ) { <nl> + public void failsOnLinkingObjectsWithIgnoreFields ( ) throws IOException { <nl> + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) <nl> + / / An @ Ignored , backlinked field is completely ignored <nl> + . annotation ( " Ignore " ) <nl> + . builder ( ) . build ( ) ; <nl> ASSERT . about ( javaSources ( ) ) <nl> - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksIgnored ) ) <nl> + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . compilesWithoutError ( ) ; <nl> } <nl> <nl> @ Test <nl> - public void failsOnLinkingObjectsFieldNotFound ( ) { <nl> + public void failsOnLinkingObjectsFieldNotFound ( ) throws IOException { <nl> + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) <nl> + / / The argument to the @ LinkingObjects annotation must name a field in the target class <nl> + . clearAnnotations ( ) <nl> + . annotation ( " LinkingObjects ( \ " xxx \ " ) " ) <nl> + . builder ( ) . build ( ) ; <nl> ASSERT . about ( javaSources ( ) ) <nl> - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksNotFound ) ) <nl> + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . failsToCompile ( ) <nl> . withErrorContaining ( " does not exist in class " ) ; <nl> } <nl> <nl> @ Test <nl> - public void failsOnLinkingObjectsWithFieldWrongType ( ) { <nl> + public void failsOnLinkingObjectsWithFieldWrongType ( ) throws IOException { <nl> + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) <nl> + / / The type of the field named in the @ LinkingObjects annotation must match <nl> + / / the generic type of the annotated field . BacklinkTarget . child is a Backlink , <nl> + / / not a Backlinks _ WrongType . <nl> + . builder ( ) . name ( " Backlinks _ WrongType " ) . build ( ) ; <nl> ASSERT . about ( javaSources ( ) ) <nl> - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksWrongType ) ) <nl> + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . failsToCompile ( ) <nl> . withErrorContaining ( " instead of " ) ; <nl> } <nl> <nl> @ Test <nl> - public void compareNonLatinName ( ) throws Exception { <nl> + public void compareNonLatinName ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( nonLatinName ) <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . compilesWithoutError ( ) ; <nl> } <nl> + <nl> + / / This method constructs a synthetic Backlinks test class that * should * compile correctly . <nl> + / / It returns the ref to the backlinked Field . Tests can modify the <nl> + / / field in perverse ways , to verify failure modes . <nl> + private RealmSyntheticTestClass . Field createBacklinkTestClass ( ) { <nl> + return new RealmSyntheticTestClass . Builder ( ) . name ( " Backlinks " ) <nl> + . field ( ) . name ( " id " ) . type ( " int " ) . builder ( ) <nl> + . field ( ) <nl> + . name ( " parents " ) <nl> + . type ( " RealmResults < BacklinkTarget > " ) <nl> + . modifiers ( Modifier . PUBLIC , Modifier . FINAL ) <nl> + . annotation ( " LinkingObjects ( \ " child \ " ) " ) <nl> + . initializer ( " null " ) <nl> + . hasGetter ( false ) <nl> + . hasSetter ( false ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmSyntheticTestClass . java b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmSyntheticTestClass . java <nl> new file mode 100644 <nl> index 0000000 . . 129e98d <nl> - - - / dev / null <nl> + + + b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmSyntheticTestClass . java <nl> @ @ - 0 , 0 + 1 , 201 @ @ <nl> + / * <nl> + * Copyright 2015 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . processor ; <nl> + <nl> + import com . squareup . javawriter . JavaWriter ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . StringWriter ; <nl> + import java . net . URI ; <nl> + import java . util . ArrayList ; <nl> + import java . util . EnumSet ; <nl> + import java . util . List ; <nl> + <nl> + import javax . lang . model . element . Modifier ; <nl> + import javax . tools . SimpleJavaFileObject ; <nl> + <nl> + / / Helper class for creating RealmObject java files <nl> + public class RealmSyntheticTestClass extends SimpleJavaFileObject { <nl> + public static class Field { <nl> + private final Builder builder ; <nl> + private String name ; <nl> + private String type ; <nl> + private String initializer ; <nl> + private boolean hasGetter = true ; <nl> + private boolean hasSetter = true ; <nl> + private EnumSet < Modifier > modifiers = EnumSet . of ( Modifier . PRIVATE ) ; <nl> + private final List < String > annotations = new ArrayList < String > ( ) ; <nl> + <nl> + Field ( Builder builder ) { <nl> + this . builder = builder ; <nl> + } <nl> + <nl> + public Field name ( String name ) { <nl> + this . name = name . substring ( 0 , 1 ) . toUpperCase ( ) + name . substring ( 1 , name . length ( ) ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public Field type ( String type ) { <nl> + this . type = type ; <nl> + return this ; <nl> + } <nl> + <nl> + public Field modifiers ( Modifier . . . modifiers ) { <nl> + this . modifiers = EnumSet . of ( modifiers [ 0 ] , modifiers ) ; / / yuk <nl> + return this ; <nl> + } <nl> + <nl> + public Field clearAnnotations ( ) { <nl> + this . annotations . clear ( ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public Field annotation ( String annotation ) { <nl> + this . annotations . add ( annotation ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public Field initializer ( String initializer ) { <nl> + this . initializer = initializer ; <nl> + return this ; <nl> + } <nl> + <nl> + public Field hasGetter ( boolean hasGetter ) { <nl> + this . hasGetter = hasGetter ; <nl> + return this ; <nl> + } <nl> + <nl> + public Field hasSetter ( boolean hasSetter ) { <nl> + this . hasSetter = hasSetter ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder builder ( ) { <nl> + return builder ; <nl> + } <nl> + } <nl> + <nl> + public static class Builder { <nl> + private final List < Field > fields = new ArrayList < Field > ( ) ; <nl> + private String name ; <nl> + <nl> + public Builder name ( String name ) { <nl> + this . name = name ; <nl> + return this ; <nl> + } <nl> + <nl> + / / Note : this returns the new field , not the builder . <nl> + / / To get the builder back , use Field . builder ( ) <nl> + public Field field ( ) { <nl> + Field f = new Field ( this ) ; <nl> + fields . add ( f ) ; <nl> + return f ; <nl> + } <nl> + <nl> + / / Convenience method to support legacy usage <nl> + public Builder field ( String name , String type , String annotation ) { <nl> + field ( ) . name ( name ) . type ( type ) . annotation ( annotation ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public RealmSyntheticTestClass build ( ) throws IOException { <nl> + StringWriter stringWriter = new StringWriter ( ) ; <nl> + JavaWriter writer = new JavaWriter ( stringWriter ) ; <nl> + <nl> + / / Package name <nl> + writer . emitPackage ( " some . test " ) ; <nl> + <nl> + / / Import Realm classes <nl> + writer . emitImports ( " io . realm . * " ) ; <nl> + writer . emitImports ( " io . realm . annotations . * " ) ; <nl> + <nl> + / / Begin the class definition <nl> + writer . beginType ( <nl> + name , / / full qualified name of the item to generate <nl> + " class " , / / the type of the item <nl> + EnumSet . of ( Modifier . PUBLIC ) , / / modifiers to apply <nl> + " RealmObject " ) / / class to extend <nl> + . emitEmptyLine ( ) ; <nl> + <nl> + for ( Field field : fields ) { generateField ( writer , field ) ; } <nl> + <nl> + writer . endType ( ) ; <nl> + <nl> + return new RealmSyntheticTestClass ( stringWriter , name ) ; <nl> + } <nl> + <nl> + private void generateField ( JavaWriter writer , Field field ) throws IOException { <nl> + if ( field . name = = null ) { throw new IllegalArgumentException ( " A field must have a name " ) ; } <nl> + if ( field . type = = null ) { throw new IllegalArgumentException ( " A field must have a type " ) ; } <nl> + <nl> + / / Declaration of field <nl> + for ( String annotation : field . annotations ) { writer . emitAnnotation ( annotation ) ; } <nl> + writer . emitField ( field . type , field . name , field . modifiers , field . initializer ) ; <nl> + <nl> + if ( field . hasSetter ) { emitSetter ( writer , field ) ; } <nl> + if ( field . hasGetter ) { emitGetter ( writer , field ) ; } <nl> + } <nl> + <nl> + private void emitSetter ( JavaWriter writer , Field field ) throws IOException { <nl> + / / Setter <nl> + writer . beginMethod ( <nl> + " void " , / / Return type <nl> + " set " + field . name , / / Method name <nl> + EnumSet . of ( Modifier . PUBLIC ) , field . type , field . name ) ; / / Modifiers <nl> + writer . emitStatement ( " realmSet $ " + field . name + " ( " + field . name + " ) " ) ; <nl> + writer . endMethod ( ) ; <nl> + <nl> + / / Realm Setter <nl> + writer . beginMethod ( <nl> + " void " , / / Return type <nl> + " realmSet $ " + field . name , / / Method name <nl> + EnumSet . of ( Modifier . PUBLIC ) , field . type , field . name ) ; / / Modifiers <nl> + writer . emitStatement ( " this . " + field . name + " = " + field . name ) ; <nl> + writer . endMethod ( ) ; <nl> + } <nl> + <nl> + private void emitGetter ( JavaWriter writer , Field field ) throws IOException { <nl> + / / Getter <nl> + writer . beginMethod ( <nl> + field . type , / / Return type <nl> + " get " + field . name , / / Method name <nl> + EnumSet . of ( Modifier . PUBLIC ) ) ; / / Modifiers <nl> + writer . emitStatement ( " return realmGet $ " + field . name + " ( ) " ) ; <nl> + writer . endMethod ( ) ; <nl> + <nl> + / / Realm Getter <nl> + writer . beginMethod ( <nl> + field . type , / / Return type <nl> + " realmGet $ " + field . name , / / Method name <nl> + EnumSet . of ( Modifier . PUBLIC ) ) ; / / Modifiers <nl> + writer . emitStatement ( " return " + field . name ) ; <nl> + writer . endMethod ( ) ; <nl> + } <nl> + } <nl> + <nl> + private final StringWriter stringWriter ; <nl> + <nl> + private RealmSyntheticTestClass ( StringWriter stringWriter , String name ) { <nl> + super ( URI . create ( name + " . java " ) , Kind . SOURCE ) ; <nl> + this . stringWriter = stringWriter ; <nl> + } <nl> + <nl> + @ Override <nl> + public CharSequence getCharContent ( boolean ignoreEncodingErrors ) throws IOException { <nl> + return stringWriter . getBuffer ( ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - annotations - processor / src / test / java / io / realm / processor / TestRealmObjectFileObject . java b / realm / realm - annotations - processor / src / test / java / io / realm / processor / TestRealmObjectFileObject . java <nl> deleted file mode 100644 <nl> index 60114a4 . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / test / java / io / realm / processor / TestRealmObjectFileObject . java <nl> + + + / dev / null <nl> @ @ - 1 , 109 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2015 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . processor ; <nl> - <nl> - import com . squareup . javawriter . JavaWriter ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . io . StringWriter ; <nl> - import java . net . URI ; <nl> - import java . util . EnumSet ; <nl> - <nl> - import javax . lang . model . element . Modifier ; <nl> - import javax . tools . SimpleJavaFileObject ; <nl> - <nl> - / / Helper class for creating RealmObject java files <nl> - public class TestRealmObjectFileObject extends SimpleJavaFileObject { <nl> - private StringWriter stringWriter ; <nl> - <nl> - private TestRealmObjectFileObject ( String name , StringWriter stringWriter ) { <nl> - super ( URI . create ( name + " . java " ) , Kind . SOURCE ) ; <nl> - this . stringWriter = stringWriter ; <nl> - } <nl> - <nl> - @ Override <nl> - public CharSequence getCharContent ( boolean ignoreEncodingErrors ) throws IOException { <nl> - return stringWriter . getBuffer ( ) ; <nl> - } <nl> - <nl> - / / Helper function to create a Realm object java file with a single field . <nl> - public static TestRealmObjectFileObject getSingleFieldInstance ( String className , <nl> - String annotationToField , <nl> - String fieldType , <nl> - String fieldName ) throws IOException { <nl> - String FieldName = fieldName . substring ( 0 , 1 ) . toUpperCase ( ) + fieldName . substring ( 1 , fieldName . length ( ) ) ; <nl> - StringWriter stringWriter = new StringWriter ( ) ; <nl> - JavaWriter writer = new JavaWriter ( stringWriter ) ; <nl> - <nl> - / / Package name <nl> - writer . emitPackage ( " some . test " ) ; <nl> - <nl> - / / Import Realm classes <nl> - writer . emitImports ( " io . realm . * " ) ; <nl> - writer . emitImports ( " io . realm . annotations . * " ) ; <nl> - <nl> - / / Begin the class definition <nl> - writer . beginType ( <nl> - className , / / full qualified name of the item to generate <nl> - " class " , / / the type of the item <nl> - EnumSet . of ( Modifier . PUBLIC ) , / / modifiers to apply <nl> - " RealmObject " ) / / class to extend <nl> - . emitEmptyLine ( ) ; <nl> - <nl> - / / Declaration of field <nl> - writer . emitAnnotation ( annotationToField ) ; <nl> - writer . emitField ( fieldType , fieldName , EnumSet . of ( Modifier . PRIVATE ) ) ; <nl> - <nl> - / / Getter <nl> - writer . beginMethod ( <nl> - fieldType , / / Return type <nl> - " get " + FieldName , / / Method name <nl> - EnumSet . of ( Modifier . PUBLIC ) ) ; / / Modifiers <nl> - writer . emitStatement ( " return realmGet $ " + fieldName + " ( ) " ) ; <nl> - writer . endMethod ( ) ; <nl> - <nl> - / / Setter <nl> - writer . beginMethod ( <nl> - " void " , / / Return type <nl> - " set " + FieldName , / / Method name <nl> - EnumSet . of ( Modifier . PUBLIC ) , <nl> - fieldType , fieldName ) ; / / Modifiers <nl> - writer . emitStatement ( " realmSet $ " + fieldName + " ( " + fieldName + " ) " ) ; <nl> - writer . endMethod ( ) ; <nl> - <nl> - / / Realm Getter <nl> - writer . beginMethod ( <nl> - fieldType , / / Return type <nl> - " realmGet $ " + fieldName , / / Method name <nl> - EnumSet . of ( Modifier . PUBLIC ) ) ; / / Modifiers <nl> - writer . emitStatement ( " return " + fieldName ) ; <nl> - writer . endMethod ( ) ; <nl> - <nl> - / / Realm Setter <nl> - writer . beginMethod ( <nl> - " void " , / / Return type <nl> - " realmSet $ " + fieldName , / / Method name <nl> - EnumSet . of ( Modifier . PUBLIC ) , <nl> - fieldType , fieldName ) ; / / Modifiers <nl> - writer . emitStatement ( " this . " + fieldName + " = " + fieldName ) ; <nl> - writer . endMethod ( ) ; <nl> - <nl> - writer . endType ( ) ; <nl> - <nl> - return new TestRealmObjectFileObject ( className , stringWriter ) ; <nl> - } <nl> - } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Ignored . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Ignored . java <nl> deleted file mode 100644 <nl> index acceae1 . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Ignored . java <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - package some . test ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . annotations . LinkingObjects ; <nl> - import io . realm . annotations . Ignore ; <nl> - <nl> - public class Backlinks _ Ignored extends RealmObject { <nl> - private int id ; <nl> - <nl> - / / An @ Ignored , backlinked field is completely ignored <nl> - @ Ignore <nl> - @ LinkingObjects ( " foo " ) <nl> - private int parents = 0 ; <nl> - } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ InvalidFieldType . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ InvalidFieldType . java <nl> deleted file mode 100644 <nl> index 4c6afb1 . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ InvalidFieldType . java <nl> + + + / dev / null <nl> @ @ - 1 , 13 + 0 , 0 @ @ <nl> - package some . test ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . annotations . LinkingObjects ; <nl> - <nl> - public class Backlinks _ InvalidFieldType extends RealmObject { <nl> - private int id ; <nl> - <nl> - / / Backlinks must be RealmResults <nl> - @ LinkingObjects ( " child " ) <nl> - private final BacklinkTarget parents = null ; <nl> - } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ LinkedFields . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ LinkedFields . java <nl> deleted file mode 100644 <nl> index d252226 . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ LinkedFields . java <nl> + + + / dev / null <nl> @ @ - 1 , 14 + 0 , 0 @ @ <nl> - package some . test ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . annotations . LinkingObjects ; <nl> - <nl> - public class Backlinks _ LinkedFields extends RealmObject { <nl> - private int id ; <nl> - <nl> - / / Defining a backlink more than one levels back is not supported . <nl> - / / It can be queried though : ` equalTo ( " selectedFieldParents . selectedFieldParents " ) <nl> - @ LinkingObjects ( " child . id " ) <nl> - private final RealmResults < BacklinkTarget > parents = null ; <nl> - } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingGeneric . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingGeneric . java <nl> deleted file mode 100644 <nl> index ababc62 . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingGeneric . java <nl> + + + / dev / null <nl> @ @ - 1 , 13 + 0 , 0 @ @ <nl> - package some . test ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . annotations . LinkingObjects ; <nl> - <nl> - public class Backlinks _ MissingGeneric extends RealmObject { <nl> - private int id ; <nl> - <nl> - / / Forgot to specify the backlink generic param <nl> - @ LinkingObjects ( " child " ) <nl> - private final RealmResults parents = null ; <nl> - } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingParameter . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingParameter . java <nl> deleted file mode 100644 <nl> index dec9d6a . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingParameter . java <nl> + + + / dev / null <nl> @ @ - 1 , 13 + 0 , 0 @ @ <nl> - package some . test ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . annotations . LinkingObjects ; <nl> - <nl> - public class Backlinks _ MissingParameter extends RealmObject { <nl> - private int id ; <nl> - <nl> - / / Forgot to specify the backlinked field <nl> - @ LinkingObjects <nl> - private final RealmResults < BacklinkTarget > parents = null ; <nl> - } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFinal . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFinal . java <nl> deleted file mode 100644 <nl> index 97c406b . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFinal . java <nl> + + + / dev / null <nl> @ @ - 1 , 29 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2017 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package some . test ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . annotations . LinkingObjects ; <nl> - <nl> - public class Backlinks _ NotFinal extends RealmObject { <nl> - private int id ; <nl> - <nl> - / / The field named in the @ LinkingObjects annotation must be final <nl> - @ LinkingObjects ( " child " ) <nl> - private RealmResults < BacklinkTarget > simpleParents = null ; <nl> - } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFound . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFound . java <nl> deleted file mode 100644 <nl> index 05692a7 . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFound . java <nl> + + + / dev / null <nl> @ @ - 1 , 29 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2017 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package some . test ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . annotations . LinkingObjects ; <nl> - <nl> - public class Backlinks _ NotFound extends RealmObject { <nl> - private int id ; <nl> - <nl> - / / The argument to the @ LinkingObjects annotation must name a field in the target class <nl> - @ LinkingObjects ( " xxx " ) <nl> - private final RealmResults < BacklinkTarget > parents = null ; <nl> - } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Required . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Required . java <nl> deleted file mode 100644 <nl> index 5f70fcb . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Required . java <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - package some . test ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . annotations . LinkingObjects ; <nl> - import io . realm . annotations . Required ; <nl> - <nl> - public class Backlinks _ Required extends RealmObject { <nl> - private int id ; <nl> - <nl> - / / A backlinked field may not be @ Required <nl> - @ Required <nl> - @ LinkingObjects ( " child " ) <nl> - private final RealmResults < BacklinkTarget > parents = null ; <nl> - } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ WrongType . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ WrongType . java <nl> deleted file mode 100644 <nl> index a09363c . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ WrongType . java <nl> + + + / dev / null <nl> @ @ - 1 , 30 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2017 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package some . test ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . annotations . LinkingObjects ; <nl> - <nl> - public class Backlinks _ WrongType extends RealmObject { <nl> - private int id ; <nl> - <nl> - / / The type of the field named in the @ LinkingObjects annotation must match <nl> - / / the generic type of the annotated field <nl> - @ LinkingObjects ( " child " ) <nl> - private final RealmResults < BacklinkTarget > parents = null ; <nl> - }
NEAREST DIFF (one line): diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java <nl> index e7dd4e8 . . c065e41 100644 <nl> - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java <nl> + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import android . widget . TextView ; <nl> import java . io . IOException ; <nl> <nl> import io . realm . Realm ; <nl> - import io . realm . RealmList ; <nl> + import io . realm . RelationList ; <nl> import io . realm . examples . realmintroexample . model . Cat ; <nl> import io . realm . examples . realmintroexample . model . Dog ; <nl> import io . realm . examples . realmintroexample . model . Person ; <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class RealmBasicExampleActivity extends Activity { <nl> <nl> Realm realm = new Realm ( getFilesDir ( ) ) ; <nl> showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; <nl> - RealmList < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; <nl> + RelationList < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; <nl> showStatus ( " Size of result set : " + result . size ( ) ) ; <nl> } <nl> <nl> diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> index fbd2a69 . . ea9f9ae 100644 <nl> - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package io . realm . examples . realmintroexample . model ; <nl> <nl> - import io . realm . RealmList ; <nl> + import io . realm . RelationList ; <nl> import io . realm . RealmObject ; <nl> import io . realm . annotations . RealmClass ; <nl> <nl> @ @ - 10 , 7 + 10 , 7 @ @ public class Person extends RealmObject { <nl> private String name ; <nl> private int age ; <nl> private Dog dog ; <nl> - private RealmList < Cat > cats ; <nl> + private RelationList < Cat > cats ; <nl> <nl> public String getName ( ) { <nl> return name ; <nl> diff - - git a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> index c9eae0a . . e6356ea 100644 <nl> - - - a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> + + + b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import io . realm . Realm ; <nl> - import io . realm . RealmList ; <nl> + import io . realm . ResultList ; <nl> import io . realm . internal . ColumnType ; <nl> import io . realm . internal . ReadTransaction ; <nl> import io . realm . internal . SharedGroup ; <nl> @ @ - 119 , 7 + 119 , 7 @ @ public class PerformanceTask extends AsyncTask < Integer , String , String > { <nl> <nl> timer = System . currentTimeMillis ( ) ; <nl> / / Debug . startMethodTracing ( " reads " ) ; <nl> - RealmList < User > realmList = realm . where ( User . class ) . findAll ( ) ; <nl> + ResultList < User > realmList = realm . where ( User . class ) . findAll ( ) ; <nl> for ( int i = 0 ; i < listSize ; i + + ) { <nl> / / IUser u = realmList . getTest ( i , IUser . class ) ; <nl> User u = realmList . get ( i ) ; <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java <nl> index a02e2a8 . . d8ea331 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java <nl> @ @ - 126 , 7 + 126 , 7 @ @ public class RealmSourceCodeGenerator { <nl> Types typeUtils = processingEnvironment . getTypeUtils ( ) ; <nl> <nl> TypeMirror realmObject = elementUtils . getTypeElement ( " io . realm . RealmObject " ) . asType ( ) ; <nl> - DeclaredType realmList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; <nl> + DeclaredType relationList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RelationList " ) , typeUtils . getWildcardType ( null , null ) ) ; <nl> <nl> / / Set source code indent to 4 spaces <nl> writer . setIndent ( " " ) ; <nl> @ @ - 140 , 9 + 140 , 8 @ @ public class RealmSourceCodeGenerator { <nl> " io . realm . internal . ImplicitTransaction " , <nl> " io . realm . internal . Row " , <nl> " io . realm . internal . LinkView " , <nl> - " io . realm . RealmLinkList " , <nl> - " io . realm . RealmObject " , <nl> - " io . realm . RealmList " ) <nl> + " io . realm . RelationList " , <nl> + " io . realm . RealmObject " ) <nl> . emitEmptyLine ( ) ; <nl> <nl> / / Begin the class definition <nl> @ @ - 210 , 7 + 209 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . endControlFlow ( ) ; <nl> writer . emitStatement ( " realmGetRow ( ) . setLink ( % d , value . realmGetRow ( ) . getIndex ( ) ) " , columnNumber ) ; <nl> writer . endMethod ( ) ; <nl> - } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> + } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { <nl> / * * <nl> * LinkLists <nl> * / <nl> @ @ - 226 , 7 + 225 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( fieldTypeCanonicalName , " get " + capitaliseFirstChar ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; <nl> writer . emitStatement ( <nl> - " return new RealmLinkList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , <nl> + " return new RelationList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , <nl> genericType , columnNumber ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> @ @ - 238 , 7 + 237 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . beginControlFlow ( " if ( value = = null ) " ) ; <nl> writer . emitStatement ( " return " ) ; / / TODO : delete all the links instead <nl> writer . endControlFlow ( ) ; <nl> - writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RealmList < ? extends RealmObject > ) value ) " ) ; <nl> + writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RelationList < ? extends RealmObject > ) value ) " ) ; <nl> writer . emitStatement ( " links . add ( linkedObject . realmGetRow ( ) . getIndex ( ) ) " ) ; <nl> writer . endControlFlow ( ) ; <nl> writer . endMethod ( ) ; <nl> @ @ - 282 , 7 + 281 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . endControlFlow ( ) ; <nl> writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK , \ " % s \ " , transaction . getTable ( \ " % s \ " ) ) " , <nl> fieldName . toLowerCase ( Locale . getDefault ( ) ) , fieldTypeName ) ; <nl> - } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> + } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { <nl> String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; <nl> String genericType ; <nl> if ( genericCanonicalType . contains ( " . " ) ) { <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index c6ba3a6 . . 0b6f9f1 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 411 , 7 + 411 , 7 @ @ public class Realm { <nl> } <nl> <nl> <nl> - public < E extends RealmObject > RealmTableOrViewList < E > allObjects ( Class < E > clazz ) { <nl> + public < E extends RealmObject > ResultList < E > allObjects ( Class < E > clazz ) { <nl> return where ( clazz ) . findAll ( ) ; <nl> } <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmArrayList . java b / realm / src / main / java / io / realm / RealmArrayList . java <nl> deleted file mode 100644 <nl> index b0e9aa0 . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / RealmArrayList . java <nl> + + + / dev / null <nl> @ @ - 1 , 44 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - import java . util . ArrayList ; <nl> - <nl> - public class RealmArrayList < E extends RealmObject > extends ArrayList < E > implements RealmList < E > { <nl> - <nl> - <nl> - @ Override <nl> - public void move ( int oldPos , int newPos ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public E first ( ) { <nl> - return get ( 0 ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public E last ( ) { <nl> - return get ( size ( ) - 1 ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public RealmQuery < E > where ( ) { <nl> - return null ; <nl> - } <nl> - <nl> - } <nl> diff - - git a / realm / src / main / java / io / realm / RealmLinkList . java b / realm / src / main / java / io / realm / RealmLinkList . java <nl> deleted file mode 100644 <nl> index 7e0cb39 . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / RealmLinkList . java <nl> + + + / dev / null <nl> @ @ - 1 , 93 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - import java . util . AbstractList ; <nl> - <nl> - import io . realm . internal . LinkView ; <nl> - <nl> - public class RealmLinkList < E extends RealmObject > extends AbstractList < E > implements RealmList < E > { <nl> - <nl> - private Class < E > clazz ; <nl> - private LinkView view ; <nl> - private Realm realm ; <nl> - <nl> - public RealmLinkList ( Class < E > clazz , LinkView view , Realm realm ) { <nl> - this . clazz = clazz ; <nl> - this . view = view ; <nl> - this . realm = realm ; <nl> - } <nl> - <nl> - @ Override <nl> - public void add ( int location , E object ) { <nl> - view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public E set ( int location , E object ) { <nl> - view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; <nl> - return object ; <nl> - } <nl> - <nl> - @ Override <nl> - public void move ( int oldPos , int newPos ) { <nl> - view . move ( oldPos , newPos ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void clear ( ) { <nl> - view . clear ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public E remove ( int location ) { <nl> - view . remove ( location ) ; <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public E get ( int i ) { <nl> - return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public E first ( ) { <nl> - if ( ! view . isEmpty ( ) ) { <nl> - return get ( 0 ) ; <nl> - } <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public E last ( ) { <nl> - if ( ! view . isEmpty ( ) ) { <nl> - return get ( size ( ) - 1 ) ; <nl> - } <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public int size ( ) { <nl> - return ( ( Long ) view . size ( ) ) . intValue ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public RealmQuery < E > where ( ) { <nl> - return null ; <nl> - } <nl> - <nl> - } <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> deleted file mode 100644 <nl> index 59f6f2f . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / RealmList . java <nl> + + + / dev / null <nl> @ @ - 1 , 60 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - import java . util . List ; <nl> - <nl> - public interface RealmList < E extends RealmObject > extends List < E > { <nl> - <nl> - <nl> - void move ( int oldPos , int newPos ) ; <nl> - <nl> - / * * <nl> - * <nl> - * @ param rowIndex The objects index in the list <nl> - * @ return An object of type E , which is backed by Realm <nl> - * / <nl> - @ Override <nl> - E get ( int rowIndex ) ; <nl> - <nl> - / * * <nl> - * Gets the first object in this list <nl> - * @ return An object of type E , which is backed by Realm <nl> - * / <nl> - E first ( ) ; <nl> - <nl> - / * * <nl> - * Gets the last object in this list <nl> - * @ return An object of type E , which is backed by Realm <nl> - * / <nl> - E last ( ) ; <nl> - <nl> - / * * <nl> - * <nl> - * @ return The number of elements in this RealmList <nl> - * / <nl> - @ Override <nl> - int size ( ) ; <nl> - <nl> - / * * <nl> - * Returns a RealmQuery , used to filter this RealmList <nl> - * <nl> - * @ return A RealmQuery to filter the list <nl> - * / <nl> - RealmQuery < E > where ( ) ; <nl> - <nl> - } <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index cf10b61 . . 68ebcb2 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import io . realm . internal . TableQuery ; <nl> * / <nl> public class RealmQuery < E extends RealmObject > { <nl> <nl> - private RealmTableOrViewList realmList ; <nl> + private ResultList realmList ; <nl> private Realm realm ; <nl> private TableQuery query ; <nl> private Map < String , Integer > columns = new HashMap < String , Integer > ( ) ; <nl> @ @ - 48 , 7 + 48 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> } <nl> } <nl> <nl> - public RealmQuery ( RealmTableOrViewList realmList , Class < E > clazz ) { <nl> + public RealmQuery ( ResultList realmList , Class < E > clazz ) { <nl> this . realmList = realmList ; <nl> <nl> this . realm = realmList . getRealm ( ) ; <nl> @ @ - 454 , 12 + 454 , 12 @ @ public class RealmQuery < E extends RealmObject > { <nl> <nl> / / Execute <nl> <nl> - public RealmTableOrViewList < E > findAll ( ) { <nl> - return new RealmTableOrViewList < E > ( realm , query . findAll ( ) , clazz ) ; <nl> + public ResultList < E > findAll ( ) { <nl> + return new ResultList < E > ( realm , query . findAll ( ) , clazz ) ; <nl> } <nl> <nl> public E findFirst ( ) { <nl> - RealmList < E > result = findAll ( ) ; <nl> + ResultList < E > result = findAll ( ) ; <nl> if ( result . size ( ) > 0 ) { <nl> return findAll ( ) . get ( 0 ) ; <nl> } else { <nl> diff - - git a / realm / src / main / java / io / realm / RealmTableOrViewList . java b / realm / src / main / java / io / realm / RealmTableOrViewList . java <nl> deleted file mode 100644 <nl> index d1b1624 . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / RealmTableOrViewList . java <nl> + + + / dev / null <nl> @ @ - 1 , 282 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - <nl> - import java . util . AbstractList ; <nl> - import java . util . HashMap ; <nl> - import java . util . Map ; <nl> - <nl> - import io . realm . internal . TableOrView ; <nl> - import io . realm . internal . TableView ; <nl> - <nl> - / * * <nl> - * <nl> - * @ param < E > The class of objects in this list <nl> - * / <nl> - public class RealmTableOrViewList < E extends RealmObject > extends AbstractList < E > implements RealmList < E > { <nl> - <nl> - private Class < E > classSpec ; <nl> - private Realm realm ; <nl> - private TableOrView table = null ; <nl> - <nl> - RealmTableOrViewList ( Realm realm , Class < E > classSpec ) { <nl> - this . realm = realm ; <nl> - this . classSpec = classSpec ; <nl> - } <nl> - <nl> - RealmTableOrViewList ( Realm realm , TableOrView table , Class < E > classSpec ) { <nl> - this ( realm , classSpec ) ; <nl> - this . table = table ; <nl> - } <nl> - <nl> - Realm getRealm ( ) { <nl> - return realm ; <nl> - } <nl> - <nl> - TableOrView getTable ( ) { <nl> - <nl> - if ( table = = null ) { <nl> - return realm . getTable ( classSpec ) ; <nl> - } else { <nl> - return table ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - @ Deprecated <nl> - public void move ( int oldPos , int newPos ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; <nl> - <nl> - <nl> - @ Override <nl> - public RealmQuery < E > where ( ) { <nl> - return new RealmQuery < E > ( this , classSpec ) ; <nl> - } <nl> - <nl> - <nl> - @ Override <nl> - public E get ( int rowIndex ) { <nl> - <nl> - E obj ; <nl> - <nl> - TableOrView table = getTable ( ) ; <nl> - if ( table instanceof TableView ) { <nl> - obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; <nl> - } else { <nl> - obj = realm . get ( classSpec , rowIndex ) ; <nl> - } <nl> - <nl> - return obj ; <nl> - } <nl> - <nl> - @ Override <nl> - public E first ( ) { <nl> - return get ( 0 ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public E last ( ) { <nl> - return get ( size ( ) - 1 ) ; <nl> - } <nl> - <nl> - / / Sorting <nl> - <nl> - / / public static enum Order { <nl> - / / ASCENDING , DESCENDING <nl> - / / } <nl> - / / <nl> - / / / * * <nl> - / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . <nl> - / / * <nl> - / / * @ param fieldName The field name to sort by . <nl> - / / * @ return A sorted RealmList <nl> - / / * / <nl> - / / public RealmList < E > sort ( String fieldName ) { <nl> - / / return sort ( fieldName , Order . ASCENDING ) ; <nl> - / / } <nl> - / / <nl> - / / / * * <nl> - / / * Get a sorted RealmList from an existing RealmList . <nl> - / / * <nl> - / / * @ param fieldName The field name to sort by . <nl> - / / * @ param sortOrder The direction to sort by . <nl> - / / * @ return A sorted RealmList . <nl> - / / * / <nl> - / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { <nl> - / / throw new NoSuchMethodError ( ) ; <nl> - / / } <nl> - <nl> - <nl> - / / Aggregates <nl> - <nl> - @ Override <nl> - public int size ( ) { <nl> - return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Find the minimum value of a field . <nl> - * <nl> - * @ param fieldName The field to look for a minimum on . Only int , float , and double <nl> - * are supported . <nl> - * @ return <nl> - * / <nl> - public Number min ( String fieldName ) { <nl> - / / TODO : Date <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . minimumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . minimumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . minimumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * Find the maximum value of a field . <nl> - * <nl> - * @ param fieldName The field to look for a maximum on . Only int , float , and double <nl> - * are supported . <nl> - * @ return The maximum value . <nl> - * / <nl> - public Number max ( String fieldName ) { <nl> - / / TODO : Date <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . maximumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . maximumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . maximumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * Calculate the sum of a field . <nl> - * <nl> - * @ param fieldName The field to sum . Only int , float , and double are supported . <nl> - * @ return The sum . <nl> - * / <nl> - <nl> - public Number sum ( String fieldName ) { <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . sumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . sumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . sumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * Returns the average of a given field for objects in a RealmList . <nl> - * <nl> - * @ param fieldName The field to calculate average on . Only properties of type int , <nl> - * float and double are supported . <nl> - * @ return The average for the given field amongst objects in an RealmList . This <nl> - * will be of type double for both float and double field . <nl> - * / <nl> - public double average ( String fieldName ) { <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . averageLong ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . averageDouble ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . averageFloat ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / / Deleting <nl> - <nl> - / * * <nl> - * Removes an object at a given index . <nl> - * <nl> - * @ param index The array index identifying the object to be removed . <nl> - * @ return Always return null . <nl> - * / <nl> - @ Override <nl> - public E remove ( int index ) { <nl> - TableOrView table = getTable ( ) ; <nl> - table . remove ( index ) ; <nl> - return null ; <nl> - } <nl> - <nl> - / * * <nl> - * Removes the last object in a RealmList . <nl> - * <nl> - * / <nl> - public void removeLast ( ) { <nl> - TableOrView table = getTable ( ) ; <nl> - table . removeLast ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Removes all objects from a RealmList . <nl> - * <nl> - * / <nl> - public void clear ( ) { <nl> - TableOrView table = getTable ( ) ; <nl> - table . clear ( ) ; <nl> - } <nl> - <nl> - / / Adding objects <nl> - <nl> - @ Override <nl> - @ Deprecated <nl> - public boolean add ( E element ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - @ Deprecated <nl> - public void add ( int index , E element ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - / / <nl> - / / / * * <nl> - / / * Replaces an object at the given index with a new object . <nl> - / / * <nl> - / / * @ param index The array index of the object to be replaced . <nl> - / / * @ param element An object . <nl> - / / * / <nl> - / / public void replace ( int index , E element ) { <nl> - / / throw new NoSuchMethodError ( ) ; <nl> - / / } <nl> - } <nl> diff - - git a / realm / src / main / java / io / realm / RelationList . java b / realm / src / main / java / io / realm / RelationList . java <nl> new file mode 100644 <nl> index 0000000 . . 3616353 <nl> - - - / dev / null <nl> + + + b / realm / src / main / java / io / realm / RelationList . java <nl> @ @ - 0 , 0 + 1 , 89 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm ; <nl> + <nl> + import java . util . AbstractList ; <nl> + <nl> + import io . realm . internal . LinkView ; <nl> + <nl> + public class RelationList < E extends RealmObject > extends AbstractList < E > { <nl> + <nl> + private Class < E > clazz ; <nl> + private LinkView view ; <nl> + private Realm realm ; <nl> + <nl> + public RelationList ( Class < E > clazz , LinkView view , Realm realm ) { <nl> + this . clazz = clazz ; <nl> + this . view = view ; <nl> + this . realm = realm ; <nl> + } <nl> + <nl> + @ Override <nl> + public void add ( int location , E object ) { <nl> + view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public E set ( int location , E object ) { <nl> + view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; <nl> + return object ; <nl> + } <nl> + <nl> + public void move ( int oldPos , int newPos ) { <nl> + view . move ( oldPos , newPos ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void clear ( ) { <nl> + view . clear ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public E remove ( int location ) { <nl> + view . remove ( location ) ; <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public E get ( int i ) { <nl> + return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; <nl> + } <nl> + <nl> + public E first ( ) { <nl> + if ( ! view . isEmpty ( ) ) { <nl> + return get ( 0 ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + public E last ( ) { <nl> + if ( ! view . isEmpty ( ) ) { <nl> + return get ( size ( ) - 1 ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public int size ( ) { <nl> + return ( ( Long ) view . size ( ) ) . intValue ( ) ; <nl> + } <nl> + <nl> + public RealmQuery < E > where ( ) { <nl> + return null ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / realm / src / main / java / io / realm / ResultList . java b / realm / src / main / java / io / realm / ResultList . java <nl> new file mode 100644 <nl> index 0000000 . . c92a51b <nl> - - - / dev / null <nl> + + + b / realm / src / main / java / io / realm / ResultList . java <nl> @ @ - 0 , 0 + 1 , 273 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm ; <nl> + <nl> + <nl> + import java . util . AbstractList ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import io . realm . internal . TableOrView ; <nl> + import io . realm . internal . TableView ; <nl> + <nl> + / * * <nl> + * <nl> + * @ param < E > The class of objects in this list <nl> + * / <nl> + public class ResultList < E extends RealmObject > extends AbstractList < E > { <nl> + <nl> + private Class < E > classSpec ; <nl> + private Realm realm ; <nl> + private TableOrView table = null ; <nl> + <nl> + ResultList ( Realm realm , Class < E > classSpec ) { <nl> + this . realm = realm ; <nl> + this . classSpec = classSpec ; <nl> + } <nl> + <nl> + ResultList ( Realm realm , TableOrView table , Class < E > classSpec ) { <nl> + this ( realm , classSpec ) ; <nl> + this . table = table ; <nl> + } <nl> + <nl> + Realm getRealm ( ) { <nl> + return realm ; <nl> + } <nl> + <nl> + TableOrView getTable ( ) { <nl> + <nl> + if ( table = = null ) { <nl> + return realm . getTable ( classSpec ) ; <nl> + } else { <nl> + return table ; <nl> + } <nl> + } <nl> + <nl> + Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; <nl> + <nl> + <nl> + public RealmQuery < E > where ( ) { <nl> + return new RealmQuery < E > ( this , classSpec ) ; <nl> + } <nl> + <nl> + <nl> + @ Override <nl> + public E get ( int rowIndex ) { <nl> + <nl> + E obj ; <nl> + <nl> + TableOrView table = getTable ( ) ; <nl> + if ( table instanceof TableView ) { <nl> + obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; <nl> + } else { <nl> + obj = realm . get ( classSpec , rowIndex ) ; <nl> + } <nl> + <nl> + return obj ; <nl> + } <nl> + <nl> + public E first ( ) { <nl> + return get ( 0 ) ; <nl> + } <nl> + <nl> + public E last ( ) { <nl> + return get ( size ( ) - 1 ) ; <nl> + } <nl> + <nl> + / / Sorting <nl> + <nl> + / / public static enum Order { <nl> + / / ASCENDING , DESCENDING <nl> + / / } <nl> + / / <nl> + / / / * * <nl> + / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . <nl> + / / * <nl> + / / * @ param fieldName The field name to sort by . <nl> + / / * @ return A sorted RealmList <nl> + / / * / <nl> + / / public RealmList < E > sort ( String fieldName ) { <nl> + / / return sort ( fieldName , Order . ASCENDING ) ; <nl> + / / } <nl> + / / <nl> + / / / * * <nl> + / / * Get a sorted RealmList from an existing RealmList . <nl> + / / * <nl> + / / * @ param fieldName The field name to sort by . <nl> + / / * @ param sortOrder The direction to sort by . <nl> + / / * @ return A sorted RealmList . <nl> + / / * / <nl> + / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { <nl> + / / throw new NoSuchMethodError ( ) ; <nl> + / / } <nl> + <nl> + <nl> + / / Aggregates <nl> + <nl> + @ Override <nl> + public int size ( ) { <nl> + return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Find the minimum value of a field . <nl> + * <nl> + * @ param fieldName The field to look for a minimum on . Only int , float , and double <nl> + * are supported . <nl> + * @ return <nl> + * / <nl> + public Number min ( String fieldName ) { <nl> + / / TODO : Date <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . minimumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . minimumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . minimumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Find the maximum value of a field . <nl> + * <nl> + * @ param fieldName The field to look for a maximum on . Only int , float , and double <nl> + * are supported . <nl> + * @ return The maximum value . <nl> + * / <nl> + public Number max ( String fieldName ) { <nl> + / / TODO : Date <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . maximumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . maximumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . maximumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Calculate the sum of a field . <nl> + * <nl> + * @ param fieldName The field to sum . Only int , float , and double are supported . <nl> + * @ return The sum . <nl> + * / <nl> + <nl> + public Number sum ( String fieldName ) { <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . sumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . sumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . sumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Returns the average of a given field for objects in a RealmList . <nl> + * <nl> + * @ param fieldName The field to calculate average on . Only properties of type int , <nl> + * float and double are supported . <nl> + * @ return The average for the given field amongst objects in an RealmList . This <nl> + * will be of type double for both float and double field . <nl> + * / <nl> + public double average ( String fieldName ) { <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . averageLong ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . averageDouble ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . averageFloat ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / / Deleting <nl> + <nl> + / * * <nl> + * Removes an object at a given index . <nl> + * <nl> + * @ param index The array index identifying the object to be removed . <nl> + * @ return Always return null . <nl> + * / <nl> + @ Override <nl> + public E remove ( int index ) { <nl> + TableOrView table = getTable ( ) ; <nl> + table . remove ( index ) ; <nl> + return null ; <nl> + } <nl> + <nl> + / * * <nl> + * Removes the last object in a RealmList . <nl> + * <nl> + * / <nl> + public void removeLast ( ) { <nl> + TableOrView table = getTable ( ) ; <nl> + table . removeLast ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Removes all objects from a RealmList . <nl> + * <nl> + * / <nl> + public void clear ( ) { <nl> + TableOrView table = getTable ( ) ; <nl> + table . clear ( ) ; <nl> + } <nl> + <nl> + / / Adding objects <nl> + <nl> + @ Override <nl> + @ Deprecated <nl> + public boolean add ( E element ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Deprecated <nl> + public void add ( int index , E element ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + / / <nl> + / / / * * <nl> + / / * Replaces an object at the given index with a new object . <nl> + / / * <nl> + / / * @ param index The array index of the object to be replaced . <nl> + / / * @ param element An object . <nl> + / / * / <nl> + / / public void replace ( int index , E element ) { <nl> + / / throw new NoSuchMethodError ( ) ; <nl> + / / } <nl> + }

TEST DIFF:
diff - - git a / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 index 2433360 . . 4fe2ba5 100644 
 - - - a / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 + + + b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import org . junit . Test ; 
 import java . io . IOException ; 
 import java . util . Arrays ; 
 
 + import javax . lang . model . element . Modifier ; 
 import javax . tools . JavaFileObject ; 
 
 import static com . google . testing . compile . JavaSourceSubjectFactory . javaSource ; 
 @ @ - 60 , 15 + 61 , 6 @ @ public class RealmProcessorTest { 
 private JavaFileObject customInterface = JavaFileObjects . forResource ( " some / test / CustomInterface . java " ) ; 
 private JavaFileObject backlinks = JavaFileObjects . forResource ( " some / test / Backlinks . java " ) ; 
 private JavaFileObject backlinksTarget = JavaFileObjects . forResource ( " some / test / BacklinkTarget . java " ) ; 
 - private JavaFileObject backlinksInvalidField = JavaFileObjects . forResource ( " some / test / Backlinks _ InvalidFieldType . java " ) ; 
 - private JavaFileObject backlinksLinked = JavaFileObjects . forResource ( " some / test / Backlinks _ LinkedFields . java " ) ; 
 - private JavaFileObject backlinksMissingParam = JavaFileObjects . forResource ( " some / test / Backlinks _ MissingParameter . java " ) ; 
 - private JavaFileObject backlinksMissingGeneric = JavaFileObjects . forResource ( " some / test / Backlinks _ MissingGeneric . java " ) ; 
 - private JavaFileObject backlinksRequired = JavaFileObjects . forResource ( " some / test / Backlinks _ Required . java " ) ; 
 - private JavaFileObject backlinksIgnored = JavaFileObjects . forResource ( " some / test / Backlinks _ Ignored . java " ) ; 
 - private JavaFileObject backlinksNotFound = JavaFileObjects . forResource ( " some / test / Backlinks _ NotFound . java " ) ; 
 - private JavaFileObject backlinksNonFinalField = JavaFileObjects . forResource ( " some / test / Backlinks _ NotFinal . java " ) ; 
 - private JavaFileObject backlinksWrongType = JavaFileObjects . forResource ( " some / test / Backlinks _ WrongType . java " ) ; 
 private JavaFileObject nonLatinName = JavaFileObjects . forResource ( " some / test / Á rv í zt ű r ő T ü k ö rf ú r ó g é p . java " ) ; 
 
 @ Test 
 @ @ - 79 , 7 + 71 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileProcessedSimpleFile ( ) throws Exception { 
 + public void compileProcessedSimpleFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( simpleModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 87 , 7 + 79 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileProcessedEmptyFile ( ) throws Exception { 
 + public void compileProcessedEmptyFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( emptyModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 95 , 14 + 87 , 14 @ @ public class RealmProcessorTest { 
 } 
 
 / / Disabled because it does not seem to find the generated interface file @ Test 
 - public void compileSimpleProxyFile ( ) throws Exception { 
 + public void compileSimpleProxyFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( simpleProxy ) 
 . compilesWithoutError ( ) ; 
 } 
 
 @ Test 
 - public void compareProcessedSimpleFile ( ) throws Exception { 
 + public void compareProcessedSimpleFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( simpleModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 112 , 7 + 104 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileProcessedNullTypesFile ( ) throws Exception { 
 + public void compileProcessedNullTypesFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( nullTypesModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 120 , 7 + 112 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compareProcessedNullTypesFile ( ) throws Exception { 
 + public void compareProcessedNullTypesFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( nullTypesModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 137 , 7 + 129 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileProcessedAllTypesFile ( ) throws Exception { 
 + public void compileProcessedAllTypesFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( allTypesModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 145 , 14 + 137 , 14 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileAllTypesProxyFile ( ) throws Exception { 
 + public void compileAllTypesProxyFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( allTypesModel ) 
 . compilesWithoutError ( ) ; 
 } 
 
 @ Test 
 - public void compareProcessedAllTypesFile ( ) throws Exception { 
 + public void compareProcessedAllTypesFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( allTypesModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 163 , 7 + 155 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileAppModuleCustomClasses ( ) throws Exception { 
 + public void compileAppModuleCustomClasses ( ) { 
 ASSERT . about ( javaSources ( ) ) 
 . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / AppModuleCustomClasses . java " ) ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 171 , 7 + 163 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileAppModuleAllClasses ( ) throws Exception { 
 + public void compileAppModuleAllClasses ( ) { 
 ASSERT . about ( javaSources ( ) ) 
 . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / AppModuleAllClasses . java " ) ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 179 , 7 + 171 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileLibraryModulesAllClasses ( ) throws Exception { 
 + public void compileLibraryModulesAllClasses ( ) { 
 ASSERT . about ( javaSources ( ) ) 
 . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / LibraryModuleAllClasses . java " ) ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 187 , 7 + 179 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileLibraryModulesCustomClasses ( ) throws Exception { 
 + public void compileLibraryModulesCustomClasses ( ) { 
 ASSERT . about ( javaSources ( ) ) 
 . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / LibraryModuleCustomClasses . java " ) ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 195 , 7 + 187 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileAppModuleMixedParametersFail ( ) throws Exception { 
 + public void compileAppModuleMixedParametersFail ( ) { 
 ASSERT . about ( javaSources ( ) ) 
 . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( 
 " some / test / InvalidAllTypesModuleMixedParameters . java " ) ) ) 
 @ @ - 204 , 7 + 196 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileAppModuleWrongTypeFail ( ) throws Exception { 
 + public void compileAppModuleWrongTypeFail ( ) { 
 ASSERT . about ( javaSources ( ) ) 
 . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( 
 " some / test / InvalidAllTypesModuleWrongType . java " ) ) ) 
 @ @ - 213 , 7 + 205 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileLibraryModuleMixedParametersFail ( ) throws Exception { 
 + public void compileLibraryModuleMixedParametersFail ( ) { 
 ASSERT . about ( javaSources ( ) ) 
 . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / InvalidLibraryModuleMixedParameters . java " ) ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 221 , 7 + 213 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileLibraryModuleWrongTypeFail ( ) throws Exception { 
 + public void compileLibraryModuleWrongTypeFail ( ) { 
 ASSERT . about ( javaSources ( ) ) 
 . that ( Arrays . asList ( allTypesModel , JavaFileObjects . forResource ( " some / test / InvalidLibraryModuleWrongType . java " ) ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 236 , 7 + 228 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileProcessedBooleansFile ( ) throws Exception { 
 + public void compileProcessedBooleansFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( booleansModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 244 , 14 + 236 , 14 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileBooleansProxyFile ( ) throws Exception { 
 + public void compileBooleansProxyFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( booleansModel ) 
 . compilesWithoutError ( ) ; 
 } 
 
 @ Test 
 - public void compareProcessedBooleansFile ( ) throws Exception { 
 + public void compareProcessedBooleansFile ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( booleansModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 292 , 8 + 284 , 8 @ @ public class RealmProcessorTest { 
 " Byte " , " Short " , " Integer " , " Long " , " Boolean " } ; 
 
 for ( String fieldType : validIndexFieldTypes ) { 
 - TestRealmObjectFileObject javaFileObject = 
 - TestRealmObjectFileObject . getSingleFieldInstance ( " ValidIndexType " , " Index " , fieldType , " testField " ) ; 
 + RealmSyntheticTestClass javaFileObject = 
 + new RealmSyntheticTestClass . Builder ( ) . name ( " ValidIndexType " ) . field ( " testField " , fieldType , " Index " ) . build ( ) ; 
 ASSERT . about ( javaSource ( ) ) 
 . that ( javaFileObject ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 307 , 8 + 299 , 8 @ @ public class RealmProcessorTest { 
 final String [ ] invalidIndexFieldTypes = { " float " , " double " , " byte [ ] " , " Simple " , " RealmList " , " Float " , " Double " } ; 
 
 for ( String fieldType : invalidIndexFieldTypes ) { 
 - TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject . getSingleFieldInstance ( 
 - " InvalidIndexType " , " Index " , fieldType , " testField " ) ; 
 + RealmSyntheticTestClass javaFileObject = 
 + new RealmSyntheticTestClass . Builder ( ) . name ( " InvalidIndexType " ) . field ( " testField " , fieldType , " Index " ) . build ( ) ; 
 ASSERT . about ( javaSource ( ) ) 
 . that ( javaFileObject ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 322 , 8 + 314 , 8 @ @ public class RealmProcessorTest { 
 final String [ ] validPrimaryKeyFieldTypes = { " byte " , " short " , " int " , " long " , " String " , " Byte " , " Short " , " Integer " , " Long " } ; 
 
 for ( String fieldType : validPrimaryKeyFieldTypes ) { 
 - TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject . getSingleFieldInstance ( 
 - " ValidPrimaryKeyType " , " PrimaryKey " , fieldType , " testField " ) ; 
 + RealmSyntheticTestClass javaFileObject = 
 + new RealmSyntheticTestClass . Builder ( ) . name ( " ValidPrimaryKeyType " ) . field ( " testField " , fieldType , " PrimaryKey " ) . build ( ) ; 
 ASSERT . about ( javaSource ( ) ) 
 . that ( javaFileObject ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 337 , 9 + 329 , 8 @ @ public class RealmProcessorTest { 
 final String [ ] invalidPrimaryKeyFieldTypes = { " boolean " , " java . util . Date " , " Simple " , " RealmList < Simple > " , " Boolean " } ; 
 
 for ( String fieldType : invalidPrimaryKeyFieldTypes ) { 
 - TestRealmObjectFileObject javaFileObject = 
 - TestRealmObjectFileObject . getSingleFieldInstance ( 
 - " InvalidPrimaryKeyType " , " PrimaryKey " , fieldType , " testField " ) ; 
 + RealmSyntheticTestClass javaFileObject = 
 + new RealmSyntheticTestClass . Builder ( ) . name ( " InvalidPrimaryKeyType " ) . field ( " testField " , fieldType , " PrimaryKey " ) . build ( ) ; 
 ASSERT . about ( javaSource ( ) ) 
 . that ( javaFileObject ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 354 , 8 + 345 , 8 @ @ public class RealmProcessorTest { 
 " Float " , " Double " , " Boolean " , " java . util . Date " } ; 
 
 for ( String fieldType : validPrimaryKeyFieldTypes ) { 
 - TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject . getSingleFieldInstance ( 
 - " ValidPrimaryKeyType " , " Required " , fieldType , " testField " ) ; 
 + RealmSyntheticTestClass javaFileObject = 
 + new RealmSyntheticTestClass . Builder ( ) . name ( " ValidPrimaryKeyType " ) . field ( " testField " , fieldType , " Required " ) . build ( ) ; 
 ASSERT . about ( javaSource ( ) ) 
 . that ( javaFileObject ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 370 , 8 + 361 , 8 @ @ public class RealmProcessorTest { 
 " boolean " , " RealmList < Simple > " , " Simple " } ; 
 
 for ( String fieldType : validPrimaryKeyFieldTypes ) { 
 - TestRealmObjectFileObject javaFileObject = TestRealmObjectFileObject . getSingleFieldInstance ( 
 - " ValidPrimaryKeyType " , " Required " , fieldType , " testField " ) ; 
 + RealmSyntheticTestClass javaFileObject = 
 + new RealmSyntheticTestClass . Builder ( ) . name ( " ValidPrimaryKeyType " ) . field ( " testField " , fieldType , " Required " ) . build ( ) ; 
 ASSERT . about ( javaSource ( ) ) 
 . that ( javaFileObject ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 380 , 7 + 371 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileConflictingFieldName ( ) throws Exception { 
 + public void compileConflictingFieldName ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( conflictingFieldNameModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 388 , 7 + 379 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void failOnFinalFields ( ) throws Exception { 
 + public void failOnFinalFields ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( finalModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 396 , 7 + 387 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void compileTransientFields ( ) throws Exception { 
 + public void compileTransientFields ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( transientModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 404 , 7 + 395 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void failOnVolatileFields ( ) throws Exception { 
 + public void failOnVolatileFields ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( volatileModel ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 413 , 7 + 404 , 7 @ @ public class RealmProcessorTest { 
 
 / / annotation without implementing RealmModel interface 
 @ Test 
 - public void failOnInvalidRealmModel _ 1 ( ) throws Exception { 
 + public void failOnInvalidRealmModel _ 1 ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( invalidRealmModelModel _ 1 ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 422 , 7 + 413 , 7 @ @ public class RealmProcessorTest { 
 
 / / it ' s not allowed to extend from another RealmObject 
 @ Test 
 - public void failOnInvalidRealmModel _ 2 ( ) throws Exception { 
 + public void failOnInvalidRealmModel _ 2 ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( invalidRealmModelModel _ 2 ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 431 , 7 + 422 , 7 @ @ public class RealmProcessorTest { 
 
 / / it ' s not allowed to extend from another RealmObject 
 @ Test 
 - public void failOnInvalidRealmModel _ 3 ( ) throws Exception { 
 + public void failOnInvalidRealmModel _ 3 ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( invalidRealmModelModel _ 3 ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 439 , 7 + 430 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void validRealmModelUsingInheritance ( ) throws Exception { 
 + public void validRealmModelUsingInheritance ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( ValidModelPojo _ ExtendingRealmObject ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 447 , 7 + 438 , 7 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void canNotInheritRealmList ( ) throws Exception { 
 + public void canNotInheritRealmList ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( UseExtendRealmList ) 
 . processedWith ( new RealmProcessor ( ) ) 
 @ @ - 487 , 90 + 478 , 157 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 - public void failOnLinkingObjectsWithInvalidFieldType ( ) { 
 + public void compileSyntheticBacklinks ( ) throws IOException { 
 + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) 
 + . builder ( ) . build ( ) ; 
 ASSERT . about ( javaSources ( ) ) 
 - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksInvalidField ) ) 
 + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) 
 + . processedWith ( new RealmProcessor ( ) ) 
 + . compilesWithoutError ( ) ; 
 + } 
 + 
 + @ Test 
 + public void failOnLinkingObjectsWithInvalidFieldType ( ) throws IOException { 
 + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) 
 + / / Backlinks must be RealmResults 
 + . type ( " BacklinkTarget " ) 
 + . builder ( ) . build ( ) ; 
 + ASSERT . about ( javaSources ( ) ) 
 + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 . failsToCompile ( ) 
 . withErrorContaining ( " Fields annotated with @ LinkingObjects must be RealmResults " ) ; 
 } 
 
 @ Test 
 - public void failOnLinkingObjectsWithNonFinalField ( ) { 
 + public void failOnLinkingObjectsWithNonFinalField ( ) throws IOException { 
 + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) 
 + / / A field with a @ LinkingObjects annotation must be final 
 + . modifiers ( Modifier . PUBLIC ) 
 + . builder ( ) . build ( ) ; 
 ASSERT . about ( javaSources ( ) ) 
 - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksNonFinalField ) ) 
 + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 . failsToCompile ( ) 
 . withErrorContaining ( " must be final " ) ; 
 } 
 
 @ Test 
 - public void failsOnLinkingObjectsWithLinkedFields ( ) { 
 + public void failsOnLinkingObjectsWithLinkedFields ( ) throws IOException { 
 + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) 
 + / / Defining a backlink more than one levels back is not supported . 
 + / / It can be queried though : equalTo ( " selectedFieldParents . selectedFieldParents " ) 
 + . clearAnnotations ( ) 
 + . annotation ( " LinkingObjects ( \ " child . id \ " ) " ) 
 + . builder ( ) . build ( ) ; 
 ASSERT . about ( javaSources ( ) ) 
 - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksLinked ) ) 
 + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 . failsToCompile ( ) 
 . withErrorContaining ( " The use of ' . ' to specify fields in referenced classes is not supported " ) ; 
 } 
 
 @ Test 
 - public void failsOnLinkingObjectsMissingFieldName ( ) { 
 + public void failsOnLinkingObjectsMissingFieldName ( ) throws IOException { 
 + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) 
 + / / No backlinked field specified 
 + . clearAnnotations ( ) 
 + . annotation ( " LinkingObjects " ) 
 + . builder ( ) . build ( ) ; 
 ASSERT . about ( javaSources ( ) ) 
 - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksMissingParam ) ) 
 + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 . failsToCompile ( ) 
 . withErrorContaining ( " must have a parameter identifying the link target " ) ; 
 } 
 
 @ Test 
 - public void failsOnLinkingObjectsMissingGeneric ( ) { 
 + public void failsOnLinkingObjectsMissingGeneric ( ) throws IOException { 
 + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) 
 + / / No backlink generic param specified 
 + . type ( " RealmResults " ) 
 + . builder ( ) . build ( ) ; 
 ASSERT . about ( javaSources ( ) ) 
 - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksMissingGeneric ) ) 
 + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 . failsToCompile ( ) 
 . withErrorContaining ( " must specify a generic type " ) ; 
 } 
 
 @ Test 
 - public void failsOnLinkingObjectsWithRequiredFields ( ) { 
 + public void failsOnLinkingObjectsWithRequiredFields ( ) throws IOException { 
 + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) 
 + / / A backlinked field may not be @ Required 
 + . annotation ( " Required " ) 
 + . builder ( ) . build ( ) ; 
 ASSERT . about ( javaSources ( ) ) 
 - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksRequired ) ) 
 + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 . failsToCompile ( ) 
 . withErrorContaining ( " cannot be @ Required " ) ; 
 } 
 
 @ Test 
 - public void failsOnLinkingObjectsWithIgnoreFields ( ) { 
 + public void failsOnLinkingObjectsWithIgnoreFields ( ) throws IOException { 
 + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) 
 + / / An @ Ignored , backlinked field is completely ignored 
 + . annotation ( " Ignore " ) 
 + . builder ( ) . build ( ) ; 
 ASSERT . about ( javaSources ( ) ) 
 - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksIgnored ) ) 
 + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 . compilesWithoutError ( ) ; 
 } 
 
 @ Test 
 - public void failsOnLinkingObjectsFieldNotFound ( ) { 
 + public void failsOnLinkingObjectsFieldNotFound ( ) throws IOException { 
 + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) 
 + / / The argument to the @ LinkingObjects annotation must name a field in the target class 
 + . clearAnnotations ( ) 
 + . annotation ( " LinkingObjects ( \ " xxx \ " ) " ) 
 + . builder ( ) . build ( ) ; 
 ASSERT . about ( javaSources ( ) ) 
 - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksNotFound ) ) 
 + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 . failsToCompile ( ) 
 . withErrorContaining ( " does not exist in class " ) ; 
 } 
 
 @ Test 
 - public void failsOnLinkingObjectsWithFieldWrongType ( ) { 
 + public void failsOnLinkingObjectsWithFieldWrongType ( ) throws IOException { 
 + RealmSyntheticTestClass javaFileObject = createBacklinkTestClass ( ) 
 + / / The type of the field named in the @ LinkingObjects annotation must match 
 + / / the generic type of the annotated field . BacklinkTarget . child is a Backlink , 
 + / / not a Backlinks _ WrongType . 
 + . builder ( ) . name ( " Backlinks _ WrongType " ) . build ( ) ; 
 ASSERT . about ( javaSources ( ) ) 
 - . that ( Arrays . asList ( backlinks , backlinksTarget , backlinksWrongType ) ) 
 + . that ( Arrays . asList ( backlinksTarget , javaFileObject ) ) 
 . processedWith ( new RealmProcessor ( ) ) 
 . failsToCompile ( ) 
 . withErrorContaining ( " instead of " ) ; 
 } 
 
 @ Test 
 - public void compareNonLatinName ( ) throws Exception { 
 + public void compareNonLatinName ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( nonLatinName ) 
 . processedWith ( new RealmProcessor ( ) ) 
 . compilesWithoutError ( ) ; 
 } 
 + 
 + / / This method constructs a synthetic Backlinks test class that * should * compile correctly . 
 + / / It returns the ref to the backlinked Field . Tests can modify the 
 + / / field in perverse ways , to verify failure modes . 
 + private RealmSyntheticTestClass . Field createBacklinkTestClass ( ) { 
 + return new RealmSyntheticTestClass . Builder ( ) . name ( " Backlinks " ) 
 + . field ( ) . name ( " id " ) . type ( " int " ) . builder ( ) 
 + . field ( ) 
 + . name ( " parents " ) 
 + . type ( " RealmResults < BacklinkTarget > " ) 
 + . modifiers ( Modifier . PUBLIC , Modifier . FINAL ) 
 + . annotation ( " LinkingObjects ( \ " child \ " ) " ) 
 + . initializer ( " null " ) 
 + . hasGetter ( false ) 
 + . hasSetter ( false ) ; 
 + } 
 } 
 diff - - git a / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmSyntheticTestClass . java b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmSyntheticTestClass . java 
 new file mode 100644 
 index 0000000 . . 129e98d 
 - - - / dev / null 
 + + + b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmSyntheticTestClass . java 
 @ @ - 0 , 0 + 1 , 201 @ @ 
 + / * 
 + * Copyright 2015 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . processor ; 
 + 
 + import com . squareup . javawriter . JavaWriter ; 
 + 
 + import java . io . IOException ; 
 + import java . io . StringWriter ; 
 + import java . net . URI ; 
 + import java . util . ArrayList ; 
 + import java . util . EnumSet ; 
 + import java . util . List ; 
 + 
 + import javax . lang . model . element . Modifier ; 
 + import javax . tools . SimpleJavaFileObject ; 
 + 
 + / / Helper class for creating RealmObject java files 
 + public class RealmSyntheticTestClass extends SimpleJavaFileObject { 
 + public static class Field { 
 + private final Builder builder ; 
 + private String name ; 
 + private String type ; 
 + private String initializer ; 
 + private boolean hasGetter = true ; 
 + private boolean hasSetter = true ; 
 + private EnumSet < Modifier > modifiers = EnumSet . of ( Modifier . PRIVATE ) ; 
 + private final List < String > annotations = new ArrayList < String > ( ) ; 
 + 
 + Field ( Builder builder ) { 
 + this . builder = builder ; 
 + } 
 + 
 + public Field name ( String name ) { 
 + this . name = name . substring ( 0 , 1 ) . toUpperCase ( ) + name . substring ( 1 , name . length ( ) ) ; 
 + return this ; 
 + } 
 + 
 + public Field type ( String type ) { 
 + this . type = type ; 
 + return this ; 
 + } 
 + 
 + public Field modifiers ( Modifier . . . modifiers ) { 
 + this . modifiers = EnumSet . of ( modifiers [ 0 ] , modifiers ) ; / / yuk 
 + return this ; 
 + } 
 + 
 + public Field clearAnnotations ( ) { 
 + this . annotations . clear ( ) ; 
 + return this ; 
 + } 
 + 
 + public Field annotation ( String annotation ) { 
 + this . annotations . add ( annotation ) ; 
 + return this ; 
 + } 
 + 
 + public Field initializer ( String initializer ) { 
 + this . initializer = initializer ; 
 + return this ; 
 + } 
 + 
 + public Field hasGetter ( boolean hasGetter ) { 
 + this . hasGetter = hasGetter ; 
 + return this ; 
 + } 
 + 
 + public Field hasSetter ( boolean hasSetter ) { 
 + this . hasSetter = hasSetter ; 
 + return this ; 
 + } 
 + 
 + public Builder builder ( ) { 
 + return builder ; 
 + } 
 + } 
 + 
 + public static class Builder { 
 + private final List < Field > fields = new ArrayList < Field > ( ) ; 
 + private String name ; 
 + 
 + public Builder name ( String name ) { 
 + this . name = name ; 
 + return this ; 
 + } 
 + 
 + / / Note : this returns the new field , not the builder . 
 + / / To get the builder back , use Field . builder ( ) 
 + public Field field ( ) { 
 + Field f = new Field ( this ) ; 
 + fields . add ( f ) ; 
 + return f ; 
 + } 
 + 
 + / / Convenience method to support legacy usage 
 + public Builder field ( String name , String type , String annotation ) { 
 + field ( ) . name ( name ) . type ( type ) . annotation ( annotation ) ; 
 + return this ; 
 + } 
 + 
 + public RealmSyntheticTestClass build ( ) throws IOException { 
 + StringWriter stringWriter = new StringWriter ( ) ; 
 + JavaWriter writer = new JavaWriter ( stringWriter ) ; 
 + 
 + / / Package name 
 + writer . emitPackage ( " some . test " ) ; 
 + 
 + / / Import Realm classes 
 + writer . emitImports ( " io . realm . * " ) ; 
 + writer . emitImports ( " io . realm . annotations . * " ) ; 
 + 
 + / / Begin the class definition 
 + writer . beginType ( 
 + name , / / full qualified name of the item to generate 
 + " class " , / / the type of the item 
 + EnumSet . of ( Modifier . PUBLIC ) , / / modifiers to apply 
 + " RealmObject " ) / / class to extend 
 + . emitEmptyLine ( ) ; 
 + 
 + for ( Field field : fields ) { generateField ( writer , field ) ; } 
 + 
 + writer . endType ( ) ; 
 + 
 + return new RealmSyntheticTestClass ( stringWriter , name ) ; 
 + } 
 + 
 + private void generateField ( JavaWriter writer , Field field ) throws IOException { 
 + if ( field . name = = null ) { throw new IllegalArgumentException ( " A field must have a name " ) ; } 
 + if ( field . type = = null ) { throw new IllegalArgumentException ( " A field must have a type " ) ; } 
 + 
 + / / Declaration of field 
 + for ( String annotation : field . annotations ) { writer . emitAnnotation ( annotation ) ; } 
 + writer . emitField ( field . type , field . name , field . modifiers , field . initializer ) ; 
 + 
 + if ( field . hasSetter ) { emitSetter ( writer , field ) ; } 
 + if ( field . hasGetter ) { emitGetter ( writer , field ) ; } 
 + } 
 + 
 + private void emitSetter ( JavaWriter writer , Field field ) throws IOException { 
 + / / Setter 
 + writer . beginMethod ( 
 + " void " , / / Return type 
 + " set " + field . name , / / Method name 
 + EnumSet . of ( Modifier . PUBLIC ) , field . type , field . name ) ; / / Modifiers 
 + writer . emitStatement ( " realmSet $ " + field . name + " ( " + field . name + " ) " ) ; 
 + writer . endMethod ( ) ; 
 + 
 + / / Realm Setter 
 + writer . beginMethod ( 
 + " void " , / / Return type 
 + " realmSet $ " + field . name , / / Method name 
 + EnumSet . of ( Modifier . PUBLIC ) , field . type , field . name ) ; / / Modifiers 
 + writer . emitStatement ( " this . " + field . name + " = " + field . name ) ; 
 + writer . endMethod ( ) ; 
 + } 
 + 
 + private void emitGetter ( JavaWriter writer , Field field ) throws IOException { 
 + / / Getter 
 + writer . beginMethod ( 
 + field . type , / / Return type 
 + " get " + field . name , / / Method name 
 + EnumSet . of ( Modifier . PUBLIC ) ) ; / / Modifiers 
 + writer . emitStatement ( " return realmGet $ " + field . name + " ( ) " ) ; 
 + writer . endMethod ( ) ; 
 + 
 + / / Realm Getter 
 + writer . beginMethod ( 
 + field . type , / / Return type 
 + " realmGet $ " + field . name , / / Method name 
 + EnumSet . of ( Modifier . PUBLIC ) ) ; / / Modifiers 
 + writer . emitStatement ( " return " + field . name ) ; 
 + writer . endMethod ( ) ; 
 + } 
 + } 
 + 
 + private final StringWriter stringWriter ; 
 + 
 + private RealmSyntheticTestClass ( StringWriter stringWriter , String name ) { 
 + super ( URI . create ( name + " . java " ) , Kind . SOURCE ) ; 
 + this . stringWriter = stringWriter ; 
 + } 
 + 
 + @ Override 
 + public CharSequence getCharContent ( boolean ignoreEncodingErrors ) throws IOException { 
 + return stringWriter . getBuffer ( ) ; 
 + } 
 + } 
 diff - - git a / realm / realm - annotations - processor / src / test / java / io / realm / processor / TestRealmObjectFileObject . java b / realm / realm - annotations - processor / src / test / java / io / realm / processor / TestRealmObjectFileObject . java 
 deleted file mode 100644 
 index 60114a4 . . 0000000 
 - - - a / realm / realm - annotations - processor / src / test / java / io / realm / processor / TestRealmObjectFileObject . java 
 + + + / dev / null 
 @ @ - 1 , 109 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2015 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . processor ; 
 - 
 - import com . squareup . javawriter . JavaWriter ; 
 - 
 - import java . io . IOException ; 
 - import java . io . StringWriter ; 
 - import java . net . URI ; 
 - import java . util . EnumSet ; 
 - 
 - import javax . lang . model . element . Modifier ; 
 - import javax . tools . SimpleJavaFileObject ; 
 - 
 - / / Helper class for creating RealmObject java files 
 - public class TestRealmObjectFileObject extends SimpleJavaFileObject { 
 - private StringWriter stringWriter ; 
 - 
 - private TestRealmObjectFileObject ( String name , StringWriter stringWriter ) { 
 - super ( URI . create ( name + " . java " ) , Kind . SOURCE ) ; 
 - this . stringWriter = stringWriter ; 
 - } 
 - 
 - @ Override 
 - public CharSequence getCharContent ( boolean ignoreEncodingErrors ) throws IOException { 
 - return stringWriter . getBuffer ( ) ; 
 - } 
 - 
 - / / Helper function to create a Realm object java file with a single field . 
 - public static TestRealmObjectFileObject getSingleFieldInstance ( String className , 
 - String annotationToField , 
 - String fieldType , 
 - String fieldName ) throws IOException { 
 - String FieldName = fieldName . substring ( 0 , 1 ) . toUpperCase ( ) + fieldName . substring ( 1 , fieldName . length ( ) ) ; 
 - StringWriter stringWriter = new StringWriter ( ) ; 
 - JavaWriter writer = new JavaWriter ( stringWriter ) ; 
 - 
 - / / Package name 
 - writer . emitPackage ( " some . test " ) ; 
 - 
 - / / Import Realm classes 
 - writer . emitImports ( " io . realm . * " ) ; 
 - writer . emitImports ( " io . realm . annotations . * " ) ; 
 - 
 - / / Begin the class definition 
 - writer . beginType ( 
 - className , / / full qualified name of the item to generate 
 - " class " , / / the type of the item 
 - EnumSet . of ( Modifier . PUBLIC ) , / / modifiers to apply 
 - " RealmObject " ) / / class to extend 
 - . emitEmptyLine ( ) ; 
 - 
 - / / Declaration of field 
 - writer . emitAnnotation ( annotationToField ) ; 
 - writer . emitField ( fieldType , fieldName , EnumSet . of ( Modifier . PRIVATE ) ) ; 
 - 
 - / / Getter 
 - writer . beginMethod ( 
 - fieldType , / / Return type 
 - " get " + FieldName , / / Method name 
 - EnumSet . of ( Modifier . PUBLIC ) ) ; / / Modifiers 
 - writer . emitStatement ( " return realmGet $ " + fieldName + " ( ) " ) ; 
 - writer . endMethod ( ) ; 
 - 
 - / / Setter 
 - writer . beginMethod ( 
 - " void " , / / Return type 
 - " set " + FieldName , / / Method name 
 - EnumSet . of ( Modifier . PUBLIC ) , 
 - fieldType , fieldName ) ; / / Modifiers 
 - writer . emitStatement ( " realmSet $ " + fieldName + " ( " + fieldName + " ) " ) ; 
 - writer . endMethod ( ) ; 
 - 
 - / / Realm Getter 
 - writer . beginMethod ( 
 - fieldType , / / Return type 
 - " realmGet $ " + fieldName , / / Method name 
 - EnumSet . of ( Modifier . PUBLIC ) ) ; / / Modifiers 
 - writer . emitStatement ( " return " + fieldName ) ; 
 - writer . endMethod ( ) ; 
 - 
 - / / Realm Setter 
 - writer . beginMethod ( 
 - " void " , / / Return type 
 - " realmSet $ " + fieldName , / / Method name 
 - EnumSet . of ( Modifier . PUBLIC ) , 
 - fieldType , fieldName ) ; / / Modifiers 
 - writer . emitStatement ( " this . " + fieldName + " = " + fieldName ) ; 
 - writer . endMethod ( ) ; 
 - 
 - writer . endType ( ) ; 
 - 
 - return new TestRealmObjectFileObject ( className , stringWriter ) ; 
 - } 
 - } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Ignored . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Ignored . java 
 deleted file mode 100644 
 index acceae1 . . 0000000 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Ignored . java 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - package some . test ; 
 - 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import io . realm . annotations . LinkingObjects ; 
 - import io . realm . annotations . Ignore ; 
 - 
 - public class Backlinks _ Ignored extends RealmObject { 
 - private int id ; 
 - 
 - / / An @ Ignored , backlinked field is completely ignored 
 - @ Ignore 
 - @ LinkingObjects ( " foo " ) 
 - private int parents = 0 ; 
 - } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ InvalidFieldType . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ InvalidFieldType . java 
 deleted file mode 100644 
 index 4c6afb1 . . 0000000 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ InvalidFieldType . java 
 + + + / dev / null 
 @ @ - 1 , 13 + 0 , 0 @ @ 
 - package some . test ; 
 - 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import io . realm . annotations . LinkingObjects ; 
 - 
 - public class Backlinks _ InvalidFieldType extends RealmObject { 
 - private int id ; 
 - 
 - / / Backlinks must be RealmResults 
 - @ LinkingObjects ( " child " ) 
 - private final BacklinkTarget parents = null ; 
 - } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ LinkedFields . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ LinkedFields . java 
 deleted file mode 100644 
 index d252226 . . 0000000 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ LinkedFields . java 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - package some . test ; 
 - 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import io . realm . annotations . LinkingObjects ; 
 - 
 - public class Backlinks _ LinkedFields extends RealmObject { 
 - private int id ; 
 - 
 - / / Defining a backlink more than one levels back is not supported . 
 - / / It can be queried though : ` equalTo ( " selectedFieldParents . selectedFieldParents " ) 
 - @ LinkingObjects ( " child . id " ) 
 - private final RealmResults < BacklinkTarget > parents = null ; 
 - } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingGeneric . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingGeneric . java 
 deleted file mode 100644 
 index ababc62 . . 0000000 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingGeneric . java 
 + + + / dev / null 
 @ @ - 1 , 13 + 0 , 0 @ @ 
 - package some . test ; 
 - 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import io . realm . annotations . LinkingObjects ; 
 - 
 - public class Backlinks _ MissingGeneric extends RealmObject { 
 - private int id ; 
 - 
 - / / Forgot to specify the backlink generic param 
 - @ LinkingObjects ( " child " ) 
 - private final RealmResults parents = null ; 
 - } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingParameter . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingParameter . java 
 deleted file mode 100644 
 index dec9d6a . . 0000000 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ MissingParameter . java 
 + + + / dev / null 
 @ @ - 1 , 13 + 0 , 0 @ @ 
 - package some . test ; 
 - 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import io . realm . annotations . LinkingObjects ; 
 - 
 - public class Backlinks _ MissingParameter extends RealmObject { 
 - private int id ; 
 - 
 - / / Forgot to specify the backlinked field 
 - @ LinkingObjects 
 - private final RealmResults < BacklinkTarget > parents = null ; 
 - } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFinal . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFinal . java 
 deleted file mode 100644 
 index 97c406b . . 0000000 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFinal . java 
 + + + / dev / null 
 @ @ - 1 , 29 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2017 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package some . test ; 
 - 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import io . realm . annotations . LinkingObjects ; 
 - 
 - public class Backlinks _ NotFinal extends RealmObject { 
 - private int id ; 
 - 
 - / / The field named in the @ LinkingObjects annotation must be final 
 - @ LinkingObjects ( " child " ) 
 - private RealmResults < BacklinkTarget > simpleParents = null ; 
 - } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFound . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFound . java 
 deleted file mode 100644 
 index 05692a7 . . 0000000 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ NotFound . java 
 + + + / dev / null 
 @ @ - 1 , 29 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2017 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package some . test ; 
 - 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import io . realm . annotations . LinkingObjects ; 
 - 
 - public class Backlinks _ NotFound extends RealmObject { 
 - private int id ; 
 - 
 - / / The argument to the @ LinkingObjects annotation must name a field in the target class 
 - @ LinkingObjects ( " xxx " ) 
 - private final RealmResults < BacklinkTarget > parents = null ; 
 - } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Required . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Required . java 
 deleted file mode 100644 
 index 5f70fcb . . 0000000 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ Required . java 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - package some . test ; 
 - 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import io . realm . annotations . LinkingObjects ; 
 - import io . realm . annotations . Required ; 
 - 
 - public class Backlinks _ Required extends RealmObject { 
 - private int id ; 
 - 
 - / / A backlinked field may not be @ Required 
 - @ Required 
 - @ LinkingObjects ( " child " ) 
 - private final RealmResults < BacklinkTarget > parents = null ; 
 - } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ WrongType . java b / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ WrongType . java 
 deleted file mode 100644 
 index a09363c . . 0000000 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Backlinks _ WrongType . java 
 + + + / dev / null 
 @ @ - 1 , 30 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2017 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package some . test ; 
 - 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import io . realm . annotations . LinkingObjects ; 
 - 
 - public class Backlinks _ WrongType extends RealmObject { 
 - private int id ; 
 - 
 - / / The type of the field named in the @ LinkingObjects annotation must match 
 - / / the generic type of the annotated field 
 - @ LinkingObjects ( " child " ) 
 - private final RealmResults < BacklinkTarget > parents = null ; 
 - }

NEAREST DIFF:
diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java 
 index e7dd4e8 . . c065e41 100644 
 - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java 
 + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java 
 @ @ - 10 , 7 + 10 , 7 @ @ import android . widget . TextView ; 
 import java . io . IOException ; 
 
 import io . realm . Realm ; 
 - import io . realm . RealmList ; 
 + import io . realm . RelationList ; 
 import io . realm . examples . realmintroexample . model . Cat ; 
 import io . realm . examples . realmintroexample . model . Dog ; 
 import io . realm . examples . realmintroexample . model . Person ; 
 @ @ - 85 , 7 + 85 , 7 @ @ public class RealmBasicExampleActivity extends Activity { 
 
 Realm realm = new Realm ( getFilesDir ( ) ) ; 
 showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; 
 - RealmList < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; 
 + RelationList < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; 
 showStatus ( " Size of result set : " + result . size ( ) ) ; 
 } 
 
 diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 index fbd2a69 . . ea9f9ae 100644 
 - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package io . realm . examples . realmintroexample . model ; 
 
 - import io . realm . RealmList ; 
 + import io . realm . RelationList ; 
 import io . realm . RealmObject ; 
 import io . realm . annotations . RealmClass ; 
 
 @ @ - 10 , 7 + 10 , 7 @ @ public class Person extends RealmObject { 
 private String name ; 
 private int age ; 
 private Dog dog ; 
 - private RealmList < Cat > cats ; 
 + private RelationList < Cat > cats ; 
 
 public String getName ( ) { 
 return name ; 
 diff - - git a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 index c9eae0a . . e6356ea 100644 
 - - - a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 + + + b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 @ @ - 32 , 7 + 32 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 
 import io . realm . Realm ; 
 - import io . realm . RealmList ; 
 + import io . realm . ResultList ; 
 import io . realm . internal . ColumnType ; 
 import io . realm . internal . ReadTransaction ; 
 import io . realm . internal . SharedGroup ; 
 @ @ - 119 , 7 + 119 , 7 @ @ public class PerformanceTask extends AsyncTask < Integer , String , String > { 
 
 timer = System . currentTimeMillis ( ) ; 
 / / Debug . startMethodTracing ( " reads " ) ; 
 - RealmList < User > realmList = realm . where ( User . class ) . findAll ( ) ; 
 + ResultList < User > realmList = realm . where ( User . class ) . findAll ( ) ; 
 for ( int i = 0 ; i < listSize ; i + + ) { 
 / / IUser u = realmList . getTest ( i , IUser . class ) ; 
 User u = realmList . get ( i ) ; 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java 
 index a02e2a8 . . d8ea331 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java 
 @ @ - 126 , 7 + 126 , 7 @ @ public class RealmSourceCodeGenerator { 
 Types typeUtils = processingEnvironment . getTypeUtils ( ) ; 
 
 TypeMirror realmObject = elementUtils . getTypeElement ( " io . realm . RealmObject " ) . asType ( ) ; 
 - DeclaredType realmList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; 
 + DeclaredType relationList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RelationList " ) , typeUtils . getWildcardType ( null , null ) ) ; 
 
 / / Set source code indent to 4 spaces 
 writer . setIndent ( " " ) ; 
 @ @ - 140 , 9 + 140 , 8 @ @ public class RealmSourceCodeGenerator { 
 " io . realm . internal . ImplicitTransaction " , 
 " io . realm . internal . Row " , 
 " io . realm . internal . LinkView " , 
 - " io . realm . RealmLinkList " , 
 - " io . realm . RealmObject " , 
 - " io . realm . RealmList " ) 
 + " io . realm . RelationList " , 
 + " io . realm . RealmObject " ) 
 . emitEmptyLine ( ) ; 
 
 / / Begin the class definition 
 @ @ - 210 , 7 + 209 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . endControlFlow ( ) ; 
 writer . emitStatement ( " realmGetRow ( ) . setLink ( % d , value . realmGetRow ( ) . getIndex ( ) ) " , columnNumber ) ; 
 writer . endMethod ( ) ; 
 - } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 + } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { 
 / * * 
 * LinkLists 
 * / 
 @ @ - 226 , 7 + 225 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( fieldTypeCanonicalName , " get " + capitaliseFirstChar ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; 
 writer . emitStatement ( 
 - " return new RealmLinkList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , 
 + " return new RelationList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , 
 genericType , columnNumber ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 @ @ - 238 , 7 + 237 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . beginControlFlow ( " if ( value = = null ) " ) ; 
 writer . emitStatement ( " return " ) ; / / TODO : delete all the links instead 
 writer . endControlFlow ( ) ; 
 - writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RealmList < ? extends RealmObject > ) value ) " ) ; 
 + writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RelationList < ? extends RealmObject > ) value ) " ) ; 
 writer . emitStatement ( " links . add ( linkedObject . realmGetRow ( ) . getIndex ( ) ) " ) ; 
 writer . endControlFlow ( ) ; 
 writer . endMethod ( ) ; 
 @ @ - 282 , 7 + 281 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . endControlFlow ( ) ; 
 writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK , \ " % s \ " , transaction . getTable ( \ " % s \ " ) ) " , 
 fieldName . toLowerCase ( Locale . getDefault ( ) ) , fieldTypeName ) ; 
 - } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 + } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { 
 String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; 
 String genericType ; 
 if ( genericCanonicalType . contains ( " . " ) ) { 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index c6ba3a6 . . 0b6f9f1 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 411 , 7 + 411 , 7 @ @ public class Realm { 
 } 
 
 
 - public < E extends RealmObject > RealmTableOrViewList < E > allObjects ( Class < E > clazz ) { 
 + public < E extends RealmObject > ResultList < E > allObjects ( Class < E > clazz ) { 
 return where ( clazz ) . findAll ( ) ; 
 } 
 
 diff - - git a / realm / src / main / java / io / realm / RealmArrayList . java b / realm / src / main / java / io / realm / RealmArrayList . java 
 deleted file mode 100644 
 index b0e9aa0 . . 0000000 
 - - - a / realm / src / main / java / io / realm / RealmArrayList . java 
 + + + / dev / null 
 @ @ - 1 , 44 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - import java . util . ArrayList ; 
 - 
 - public class RealmArrayList < E extends RealmObject > extends ArrayList < E > implements RealmList < E > { 
 - 
 - 
 - @ Override 
 - public void move ( int oldPos , int newPos ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public E first ( ) { 
 - return get ( 0 ) ; 
 - } 
 - 
 - @ Override 
 - public E last ( ) { 
 - return get ( size ( ) - 1 ) ; 
 - } 
 - 
 - @ Override 
 - public RealmQuery < E > where ( ) { 
 - return null ; 
 - } 
 - 
 - } 
 diff - - git a / realm / src / main / java / io / realm / RealmLinkList . java b / realm / src / main / java / io / realm / RealmLinkList . java 
 deleted file mode 100644 
 index 7e0cb39 . . 0000000 
 - - - a / realm / src / main / java / io / realm / RealmLinkList . java 
 + + + / dev / null 
 @ @ - 1 , 93 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - import java . util . AbstractList ; 
 - 
 - import io . realm . internal . LinkView ; 
 - 
 - public class RealmLinkList < E extends RealmObject > extends AbstractList < E > implements RealmList < E > { 
 - 
 - private Class < E > clazz ; 
 - private LinkView view ; 
 - private Realm realm ; 
 - 
 - public RealmLinkList ( Class < E > clazz , LinkView view , Realm realm ) { 
 - this . clazz = clazz ; 
 - this . view = view ; 
 - this . realm = realm ; 
 - } 
 - 
 - @ Override 
 - public void add ( int location , E object ) { 
 - view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; 
 - } 
 - 
 - @ Override 
 - public E set ( int location , E object ) { 
 - view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; 
 - return object ; 
 - } 
 - 
 - @ Override 
 - public void move ( int oldPos , int newPos ) { 
 - view . move ( oldPos , newPos ) ; 
 - } 
 - 
 - @ Override 
 - public void clear ( ) { 
 - view . clear ( ) ; 
 - } 
 - 
 - @ Override 
 - public E remove ( int location ) { 
 - view . remove ( location ) ; 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public E get ( int i ) { 
 - return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; 
 - } 
 - 
 - @ Override 
 - public E first ( ) { 
 - if ( ! view . isEmpty ( ) ) { 
 - return get ( 0 ) ; 
 - } 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public E last ( ) { 
 - if ( ! view . isEmpty ( ) ) { 
 - return get ( size ( ) - 1 ) ; 
 - } 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public int size ( ) { 
 - return ( ( Long ) view . size ( ) ) . intValue ( ) ; 
 - } 
 - 
 - @ Override 
 - public RealmQuery < E > where ( ) { 
 - return null ; 
 - } 
 - 
 - } 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 deleted file mode 100644 
 index 59f6f2f . . 0000000 
 - - - a / realm / src / main / java / io / realm / RealmList . java 
 + + + / dev / null 
 @ @ - 1 , 60 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - import java . util . List ; 
 - 
 - public interface RealmList < E extends RealmObject > extends List < E > { 
 - 
 - 
 - void move ( int oldPos , int newPos ) ; 
 - 
 - / * * 
 - * 
 - * @ param rowIndex The objects index in the list 
 - * @ return An object of type E , which is backed by Realm 
 - * / 
 - @ Override 
 - E get ( int rowIndex ) ; 
 - 
 - / * * 
 - * Gets the first object in this list 
 - * @ return An object of type E , which is backed by Realm 
 - * / 
 - E first ( ) ; 
 - 
 - / * * 
 - * Gets the last object in this list 
 - * @ return An object of type E , which is backed by Realm 
 - * / 
 - E last ( ) ; 
 - 
 - / * * 
 - * 
 - * @ return The number of elements in this RealmList 
 - * / 
 - @ Override 
 - int size ( ) ; 
 - 
 - / * * 
 - * Returns a RealmQuery , used to filter this RealmList 
 - * 
 - * @ return A RealmQuery to filter the list 
 - * / 
 - RealmQuery < E > where ( ) ; 
 - 
 - } 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index cf10b61 . . 68ebcb2 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 30 , 7 + 30 , 7 @ @ import io . realm . internal . TableQuery ; 
 * / 
 public class RealmQuery < E extends RealmObject > { 
 
 - private RealmTableOrViewList realmList ; 
 + private ResultList realmList ; 
 private Realm realm ; 
 private TableQuery query ; 
 private Map < String , Integer > columns = new HashMap < String , Integer > ( ) ; 
 @ @ - 48 , 7 + 48 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 } 
 } 
 
 - public RealmQuery ( RealmTableOrViewList realmList , Class < E > clazz ) { 
 + public RealmQuery ( ResultList realmList , Class < E > clazz ) { 
 this . realmList = realmList ; 
 
 this . realm = realmList . getRealm ( ) ; 
 @ @ - 454 , 12 + 454 , 12 @ @ public class RealmQuery < E extends RealmObject > { 
 
 / / Execute 
 
 - public RealmTableOrViewList < E > findAll ( ) { 
 - return new RealmTableOrViewList < E > ( realm , query . findAll ( ) , clazz ) ; 
 + public ResultList < E > findAll ( ) { 
 + return new ResultList < E > ( realm , query . findAll ( ) , clazz ) ; 
 } 
 
 public E findFirst ( ) { 
 - RealmList < E > result = findAll ( ) ; 
 + ResultList < E > result = findAll ( ) ; 
 if ( result . size ( ) > 0 ) { 
 return findAll ( ) . get ( 0 ) ; 
 } else { 
 diff - - git a / realm / src / main / java / io / realm / RealmTableOrViewList . java b / realm / src / main / java / io / realm / RealmTableOrViewList . java 
 deleted file mode 100644 
 index d1b1624 . . 0000000 
 - - - a / realm / src / main / java / io / realm / RealmTableOrViewList . java 
 + + + / dev / null 
 @ @ - 1 , 282 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - 
 - import java . util . AbstractList ; 
 - import java . util . HashMap ; 
 - import java . util . Map ; 
 - 
 - import io . realm . internal . TableOrView ; 
 - import io . realm . internal . TableView ; 
 - 
 - / * * 
 - * 
 - * @ param < E > The class of objects in this list 
 - * / 
 - public class RealmTableOrViewList < E extends RealmObject > extends AbstractList < E > implements RealmList < E > { 
 - 
 - private Class < E > classSpec ; 
 - private Realm realm ; 
 - private TableOrView table = null ; 
 - 
 - RealmTableOrViewList ( Realm realm , Class < E > classSpec ) { 
 - this . realm = realm ; 
 - this . classSpec = classSpec ; 
 - } 
 - 
 - RealmTableOrViewList ( Realm realm , TableOrView table , Class < E > classSpec ) { 
 - this ( realm , classSpec ) ; 
 - this . table = table ; 
 - } 
 - 
 - Realm getRealm ( ) { 
 - return realm ; 
 - } 
 - 
 - TableOrView getTable ( ) { 
 - 
 - if ( table = = null ) { 
 - return realm . getTable ( classSpec ) ; 
 - } else { 
 - return table ; 
 - } 
 - } 
 - 
 - @ Override 
 - @ Deprecated 
 - public void move ( int oldPos , int newPos ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; 
 - 
 - 
 - @ Override 
 - public RealmQuery < E > where ( ) { 
 - return new RealmQuery < E > ( this , classSpec ) ; 
 - } 
 - 
 - 
 - @ Override 
 - public E get ( int rowIndex ) { 
 - 
 - E obj ; 
 - 
 - TableOrView table = getTable ( ) ; 
 - if ( table instanceof TableView ) { 
 - obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; 
 - } else { 
 - obj = realm . get ( classSpec , rowIndex ) ; 
 - } 
 - 
 - return obj ; 
 - } 
 - 
 - @ Override 
 - public E first ( ) { 
 - return get ( 0 ) ; 
 - } 
 - 
 - @ Override 
 - public E last ( ) { 
 - return get ( size ( ) - 1 ) ; 
 - } 
 - 
 - / / Sorting 
 - 
 - / / public static enum Order { 
 - / / ASCENDING , DESCENDING 
 - / / } 
 - / / 
 - / / / * * 
 - / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . 
 - / / * 
 - / / * @ param fieldName The field name to sort by . 
 - / / * @ return A sorted RealmList 
 - / / * / 
 - / / public RealmList < E > sort ( String fieldName ) { 
 - / / return sort ( fieldName , Order . ASCENDING ) ; 
 - / / } 
 - / / 
 - / / / * * 
 - / / * Get a sorted RealmList from an existing RealmList . 
 - / / * 
 - / / * @ param fieldName The field name to sort by . 
 - / / * @ param sortOrder The direction to sort by . 
 - / / * @ return A sorted RealmList . 
 - / / * / 
 - / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { 
 - / / throw new NoSuchMethodError ( ) ; 
 - / / } 
 - 
 - 
 - / / Aggregates 
 - 
 - @ Override 
 - public int size ( ) { 
 - return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; 
 - } 
 - 
 - / * * 
 - * Find the minimum value of a field . 
 - * 
 - * @ param fieldName The field to look for a minimum on . Only int , float , and double 
 - * are supported . 
 - * @ return 
 - * / 
 - public Number min ( String fieldName ) { 
 - / / TODO : Date 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . minimumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . minimumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . minimumDouble ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / * * 
 - * Find the maximum value of a field . 
 - * 
 - * @ param fieldName The field to look for a maximum on . Only int , float , and double 
 - * are supported . 
 - * @ return The maximum value . 
 - * / 
 - public Number max ( String fieldName ) { 
 - / / TODO : Date 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . maximumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . maximumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . maximumDouble ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / * * 
 - * Calculate the sum of a field . 
 - * 
 - * @ param fieldName The field to sum . Only int , float , and double are supported . 
 - * @ return The sum . 
 - * / 
 - 
 - public Number sum ( String fieldName ) { 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . sumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . sumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . sumDouble ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / * * 
 - * Returns the average of a given field for objects in a RealmList . 
 - * 
 - * @ param fieldName The field to calculate average on . Only properties of type int , 
 - * float and double are supported . 
 - * @ return The average for the given field amongst objects in an RealmList . This 
 - * will be of type double for both float and double field . 
 - * / 
 - public double average ( String fieldName ) { 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . averageLong ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . averageDouble ( columnIndex ) ; 
 - case FLOAT : 
 - return table . averageFloat ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / / Deleting 
 - 
 - / * * 
 - * Removes an object at a given index . 
 - * 
 - * @ param index The array index identifying the object to be removed . 
 - * @ return Always return null . 
 - * / 
 - @ Override 
 - public E remove ( int index ) { 
 - TableOrView table = getTable ( ) ; 
 - table . remove ( index ) ; 
 - return null ; 
 - } 
 - 
 - / * * 
 - * Removes the last object in a RealmList . 
 - * 
 - * / 
 - public void removeLast ( ) { 
 - TableOrView table = getTable ( ) ; 
 - table . removeLast ( ) ; 
 - } 
 - 
 - / * * 
 - * Removes all objects from a RealmList . 
 - * 
 - * / 
 - public void clear ( ) { 
 - TableOrView table = getTable ( ) ; 
 - table . clear ( ) ; 
 - } 
 - 
 - / / Adding objects 
 - 
 - @ Override 
 - @ Deprecated 
 - public boolean add ( E element ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - @ Deprecated 
 - public void add ( int index , E element ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - / / 
 - / / / * * 
 - / / * Replaces an object at the given index with a new object . 
 - / / * 
 - / / * @ param index The array index of the object to be replaced . 
 - / / * @ param element An object . 
 - / / * / 
 - / / public void replace ( int index , E element ) { 
 - / / throw new NoSuchMethodError ( ) ; 
 - / / } 
 - } 
 diff - - git a / realm / src / main / java / io / realm / RelationList . java b / realm / src / main / java / io / realm / RelationList . java 
 new file mode 100644 
 index 0000000 . . 3616353 
 - - - / dev / null 
 + + + b / realm / src / main / java / io / realm / RelationList . java 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm ; 
 + 
 + import java . util . AbstractList ; 
 + 
 + import io . realm . internal . LinkView ; 
 + 
 + public class RelationList < E extends RealmObject > extends AbstractList < E > { 
 + 
 + private Class < E > clazz ; 
 + private LinkView view ; 
 + private Realm realm ; 
 + 
 + public RelationList ( Class < E > clazz , LinkView view , Realm realm ) { 
 + this . clazz = clazz ; 
 + this . view = view ; 
 + this . realm = realm ; 
 + } 
 + 
 + @ Override 
 + public void add ( int location , E object ) { 
 + view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public E set ( int location , E object ) { 
 + view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; 
 + return object ; 
 + } 
 + 
 + public void move ( int oldPos , int newPos ) { 
 + view . move ( oldPos , newPos ) ; 
 + } 
 + 
 + @ Override 
 + public void clear ( ) { 
 + view . clear ( ) ; 
 + } 
 + 
 + @ Override 
 + public E remove ( int location ) { 
 + view . remove ( location ) ; 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public E get ( int i ) { 
 + return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; 
 + } 
 + 
 + public E first ( ) { 
 + if ( ! view . isEmpty ( ) ) { 
 + return get ( 0 ) ; 
 + } 
 + return null ; 
 + } 
 + 
 + public E last ( ) { 
 + if ( ! view . isEmpty ( ) ) { 
 + return get ( size ( ) - 1 ) ; 
 + } 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public int size ( ) { 
 + return ( ( Long ) view . size ( ) ) . intValue ( ) ; 
 + } 
 + 
 + public RealmQuery < E > where ( ) { 
 + return null ; 
 + } 
 + 
 + } 
 diff - - git a / realm / src / main / java / io / realm / ResultList . java b / realm / src / main / java / io / realm / ResultList . java 
 new file mode 100644 
 index 0000000 . . c92a51b 
 - - - / dev / null 
 + + + b / realm / src / main / java / io / realm / ResultList . java 
 @ @ - 0 , 0 + 1 , 273 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm ; 
 + 
 + 
 + import java . util . AbstractList ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import io . realm . internal . TableOrView ; 
 + import io . realm . internal . TableView ; 
 + 
 + / * * 
 + * 
 + * @ param < E > The class of objects in this list 
 + * / 
 + public class ResultList < E extends RealmObject > extends AbstractList < E > { 
 + 
 + private Class < E > classSpec ; 
 + private Realm realm ; 
 + private TableOrView table = null ; 
 + 
 + ResultList ( Realm realm , Class < E > classSpec ) { 
 + this . realm = realm ; 
 + this . classSpec = classSpec ; 
 + } 
 + 
 + ResultList ( Realm realm , TableOrView table , Class < E > classSpec ) { 
 + this ( realm , classSpec ) ; 
 + this . table = table ; 
 + } 
 + 
 + Realm getRealm ( ) { 
 + return realm ; 
 + } 
 + 
 + TableOrView getTable ( ) { 
 + 
 + if ( table = = null ) { 
 + return realm . getTable ( classSpec ) ; 
 + } else { 
 + return table ; 
 + } 
 + } 
 + 
 + Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; 
 + 
 + 
 + public RealmQuery < E > where ( ) { 
 + return new RealmQuery < E > ( this , classSpec ) ; 
 + } 
 + 
 + 
 + @ Override 
 + public E get ( int rowIndex ) { 
 + 
 + E obj ; 
 + 
 + TableOrView table = getTable ( ) ; 
 + if ( table instanceof TableView ) { 
 + obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; 
 + } else { 
 + obj = realm . get ( classSpec , rowIndex ) ; 
 + } 
 + 
 + return obj ; 
 + } 
 + 
 + public E first ( ) { 
 + return get ( 0 ) ; 
 + } 
 + 
 + public E last ( ) { 
 + return get ( size ( ) - 1 ) ; 
 + } 
 + 
 + / / Sorting 
 + 
 + / / public static enum Order { 
 + / / ASCENDING , DESCENDING 
 + / / } 
 + / / 
 + / / / * * 
 + / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . 
 + / / * 
 + / / * @ param fieldName The field name to sort by . 
 + / / * @ return A sorted RealmList 
 + / / * / 
 + / / public RealmList < E > sort ( String fieldName ) { 
 + / / return sort ( fieldName , Order . ASCENDING ) ; 
 + / / } 
 + / / 
 + / / / * * 
 + / / * Get a sorted RealmList from an existing RealmList . 
 + / / * 
 + / / * @ param fieldName The field name to sort by . 
 + / / * @ param sortOrder The direction to sort by . 
 + / / * @ return A sorted RealmList . 
 + / / * / 
 + / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { 
 + / / throw new NoSuchMethodError ( ) ; 
 + / / } 
 + 
 + 
 + / / Aggregates 
 + 
 + @ Override 
 + public int size ( ) { 
 + return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; 
 + } 
 + 
 + / * * 
 + * Find the minimum value of a field . 
 + * 
 + * @ param fieldName The field to look for a minimum on . Only int , float , and double 
 + * are supported . 
 + * @ return 
 + * / 
 + public Number min ( String fieldName ) { 
 + / / TODO : Date 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . minimumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . minimumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . minimumDouble ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Find the maximum value of a field . 
 + * 
 + * @ param fieldName The field to look for a maximum on . Only int , float , and double 
 + * are supported . 
 + * @ return The maximum value . 
 + * / 
 + public Number max ( String fieldName ) { 
 + / / TODO : Date 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . maximumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . maximumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . maximumDouble ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Calculate the sum of a field . 
 + * 
 + * @ param fieldName The field to sum . Only int , float , and double are supported . 
 + * @ return The sum . 
 + * / 
 + 
 + public Number sum ( String fieldName ) { 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . sumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . sumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . sumDouble ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Returns the average of a given field for objects in a RealmList . 
 + * 
 + * @ param fieldName The field to calculate average on . Only properties of type int , 
 + * float and double are supported . 
 + * @ return The average for the given field amongst objects in an RealmList . This 
 + * will be of type double for both float and double field . 
 + * / 
 + public double average ( String fieldName ) { 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . averageLong ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . averageDouble ( columnIndex ) ; 
 + case FLOAT : 
 + return table . averageFloat ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / / Deleting 
 + 
 + / * * 
 + * Removes an object at a given index . 
 + * 
 + * @ param index The array index identifying the object to be removed . 
 + * @ return Always return null . 
 + * / 
 + @ Override 
 + public E remove ( int index ) { 
 + TableOrView table = getTable ( ) ; 
 + table . remove ( index ) ; 
 + return null ; 
 + } 
 + 
 + / * * 
 + * Removes the last object in a RealmList . 
 + * 
 + * / 
 + public void removeLast ( ) { 
 + TableOrView table = getTable ( ) ; 
 + table . removeLast ( ) ; 
 + } 
 + 
 + / * * 
 + * Removes all objects from a RealmList . 
 + * 
 + * / 
 + public void clear ( ) { 
 + TableOrView table = getTable ( ) ; 
 + table . clear ( ) ; 
 + } 
 + 
 + / / Adding objects 
 + 
 + @ Override 
 + @ Deprecated 
 + public boolean add ( E element ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 + @ Override 
 + @ Deprecated 
 + public void add ( int index , E element ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + / / 
 + / / / * * 
 + / / * Replaces an object at the given index with a new object . 
 + / / * 
 + / / * @ param index The array index of the object to be replaced . 
 + / / * @ param element An object . 
 + / / * / 
 + / / public void replace ( int index , E element ) { 
 + / / throw new NoSuchMethodError ( ) ; 
 + / / } 
 + }
