BLEU SCORE: 0.029079340872079116

TEST MSG: Expose listeners list size from RealmNotifier
GENERATED MSG: Includes fix in case of re - instantiation

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> index 461533f . . 42d989d 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> @ @ - 379 , 7 + 379 , 7 @ @ public class RxJavaTests { <nl> @ Test <nl> @ UiThreadTest <nl> public void unsubscribe _ sameThread ( ) { <nl> - / * final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> subscription = realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { <nl> @ Override <nl> public void call ( Realm rxRealm ) { <nl> @ @ - 387 , 15 + 387 , 15 @ @ public class RxJavaTests { <nl> subscribedNotified . set ( true ) ; <nl> } <nl> } ) ; <nl> - assertEquals ( 1 , realm . handlerController . changeListeners . size ( ) ) ; <nl> + assertEquals ( 1 , realm . sharedRealm . realmNotifier . getListnersListSize ( ) ) ; <nl> subscription . unsubscribe ( ) ; <nl> - assertEquals ( 0 , realm . handlerController . changeListeners . size ( ) ) ; * / <nl> + assertEquals ( 0 , realm . sharedRealm . realmNotifier . getListnersListSize ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ UiThreadTest <nl> public void unsubscribe _ fromOtherThread ( ) { <nl> - / * final CountDownLatch unsubscribeCompleted = new CountDownLatch ( 1 ) ; <nl> + final CountDownLatch unsubscribeCompleted = new CountDownLatch ( 1 ) ; <nl> final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> final Subscription subscription = realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { <nl> @ Override <nl> @ @ - 405 , 7 + 405 , 7 @ @ public class RxJavaTests { <nl> } <nl> } ) ; <nl> assertTrue ( subscribedNotified . get ( ) ) ; <nl> - assertEquals ( 1 , realm . handlerController . changeListeners . size ( ) ) ; <nl> + assertEquals ( 1 , realm . sharedRealm . realmNotifier . getListnersListSize ( ) ) ; <nl> new Thread ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> @ @ - 419 , 10 + 419 , 10 @ @ public class RxJavaTests { <nl> } <nl> } ) . start ( ) ; <nl> TestHelper . awaitOrFail ( unsubscribeCompleted ) ; <nl> - assertEquals ( 1 , realm . handlerController . changeListeners . size ( ) ) ; <nl> + assertEquals ( 1 , realm . sharedRealm . realmNotifier . getListnersListSize ( ) ) ; <nl> / / We cannot call subscription . unsubscribe ( ) again , so manually close the extra Realm instance opened by <nl> / / the Observable . <nl> - realm . close ( ) ; * / <nl> + realm . close ( ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> index b725025 . . 3e5d823 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> @ @ - 139 , 4 + 139 , 8 @ @ public abstract class RealmNotifier implements Closeable { <nl> * @ param runnable to be executed in the following event loop . <nl> * / <nl> public abstract void post ( Runnable runnable ) ; <nl> + <nl> + public int getListnersListSize ( ) { <nl> + return realmObserverPairs . size ( ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 66a1518 . . 482d48b 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 232 , 4 + 232 , 67 @ @ public class NotificationsTest extends AndroidTestCase { <nl> <nl> thread . join ( 1 ) ; <nl> } <nl> + <nl> + public void testAutoUpdateRealmResults ( ) { <nl> + final int TEST _ SIZE = 10 ; <nl> + final AtomicBoolean cantRun = new AtomicBoolean ( true ) ; <nl> + final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> + <nl> + <nl> + Realm . deleteRealmFile ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + / / assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> + <nl> + Thread listenerThread = new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Looper . prepare ( ) ; <nl> + Realm . deleteRealmFile ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; <nl> + assertEquals ( 0 , dogs . size ( ) ) ; <nl> + realm . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + / / Re - instatiation on each notification is intentional <nl> + Realm r = Realm . getInstance ( getContext ( ) ) ; <nl> + counter . incrementAndGet ( ) ; <nl> + } <nl> + } ) ; <nl> + cantRun . set ( false ) ; <nl> + Looper . loop ( ) ; <nl> + } <nl> + } ; <nl> + listenerThread . start ( ) ; <nl> + <nl> + while ( cantRun . get ( ) ) { <nl> + try { <nl> + Thread . sleep ( 100 ) ; <nl> + } <nl> + catch ( InterruptedException ignored ) { <nl> + fail ( ) ; <nl> + } <nl> + } <nl> + try { <nl> + Thread . sleep ( 1000 ) ; <nl> + } catch ( InterruptedException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setName ( " Rex " + i ) ; <nl> + } <nl> + realm . commitTransaction ( ) ; <nl> + assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> + <nl> + try { <nl> + listenerThread . join ( 2000 ) ; <nl> + } catch ( InterruptedException ignored ) { <nl> + fail ( ) ; <nl> + } <nl> + / / one for initTable and one for the commit <nl> + assertEquals ( 2 , counter . get ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 2cedd8d . . e80dec2 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 363 , 6 + 363 , 8 @ @ public class Realm { <nl> realm = new Realm ( absolutePath , key , autoRefresh ) ; <nl> realms . put ( absolutePath , realm ) ; <nl> realmsCache . set ( realms ) ; <nl> + } else { <nl> + return realm ; <nl> } <nl> if ( validateSchema ) { <nl> Class < ? > validationClass ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 index 461533f . . 42d989d 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 @ @ - 379 , 7 + 379 , 7 @ @ public class RxJavaTests { 
 @ Test 
 @ UiThreadTest 
 public void unsubscribe _ sameThread ( ) { 
 - / * final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 subscription = realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { 
 @ Override 
 public void call ( Realm rxRealm ) { 
 @ @ - 387 , 15 + 387 , 15 @ @ public class RxJavaTests { 
 subscribedNotified . set ( true ) ; 
 } 
 } ) ; 
 - assertEquals ( 1 , realm . handlerController . changeListeners . size ( ) ) ; 
 + assertEquals ( 1 , realm . sharedRealm . realmNotifier . getListnersListSize ( ) ) ; 
 subscription . unsubscribe ( ) ; 
 - assertEquals ( 0 , realm . handlerController . changeListeners . size ( ) ) ; * / 
 + assertEquals ( 0 , realm . sharedRealm . realmNotifier . getListnersListSize ( ) ) ; 
 } 
 
 @ Test 
 @ UiThreadTest 
 public void unsubscribe _ fromOtherThread ( ) { 
 - / * final CountDownLatch unsubscribeCompleted = new CountDownLatch ( 1 ) ; 
 + final CountDownLatch unsubscribeCompleted = new CountDownLatch ( 1 ) ; 
 final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 final Subscription subscription = realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { 
 @ Override 
 @ @ - 405 , 7 + 405 , 7 @ @ public class RxJavaTests { 
 } 
 } ) ; 
 assertTrue ( subscribedNotified . get ( ) ) ; 
 - assertEquals ( 1 , realm . handlerController . changeListeners . size ( ) ) ; 
 + assertEquals ( 1 , realm . sharedRealm . realmNotifier . getListnersListSize ( ) ) ; 
 new Thread ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 @ @ - 419 , 10 + 419 , 10 @ @ public class RxJavaTests { 
 } 
 } ) . start ( ) ; 
 TestHelper . awaitOrFail ( unsubscribeCompleted ) ; 
 - assertEquals ( 1 , realm . handlerController . changeListeners . size ( ) ) ; 
 + assertEquals ( 1 , realm . sharedRealm . realmNotifier . getListnersListSize ( ) ) ; 
 / / We cannot call subscription . unsubscribe ( ) again , so manually close the extra Realm instance opened by 
 / / the Observable . 
 - realm . close ( ) ; * / 
 + realm . close ( ) ; 
 } 
 
 @ Test 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 index b725025 . . 3e5d823 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 @ @ - 139 , 4 + 139 , 8 @ @ public abstract class RealmNotifier implements Closeable { 
 * @ param runnable to be executed in the following event loop . 
 * / 
 public abstract void post ( Runnable runnable ) ; 
 + 
 + public int getListnersListSize ( ) { 
 + return realmObserverPairs . size ( ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 index 66a1518 . . 482d48b 100644 
 - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 232 , 4 + 232 , 67 @ @ public class NotificationsTest extends AndroidTestCase { 
 
 thread . join ( 1 ) ; 
 } 
 + 
 + public void testAutoUpdateRealmResults ( ) { 
 + final int TEST _ SIZE = 10 ; 
 + final AtomicBoolean cantRun = new AtomicBoolean ( true ) ; 
 + final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 + 
 + 
 + Realm . deleteRealmFile ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + / / assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 + 
 + Thread listenerThread = new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Looper . prepare ( ) ; 
 + Realm . deleteRealmFile ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; 
 + assertEquals ( 0 , dogs . size ( ) ) ; 
 + realm . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + / / Re - instatiation on each notification is intentional 
 + Realm r = Realm . getInstance ( getContext ( ) ) ; 
 + counter . incrementAndGet ( ) ; 
 + } 
 + } ) ; 
 + cantRun . set ( false ) ; 
 + Looper . loop ( ) ; 
 + } 
 + } ; 
 + listenerThread . start ( ) ; 
 + 
 + while ( cantRun . get ( ) ) { 
 + try { 
 + Thread . sleep ( 100 ) ; 
 + } 
 + catch ( InterruptedException ignored ) { 
 + fail ( ) ; 
 + } 
 + } 
 + try { 
 + Thread . sleep ( 1000 ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + realm . beginTransaction ( ) ; 
 + for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setName ( " Rex " + i ) ; 
 + } 
 + realm . commitTransaction ( ) ; 
 + assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 + 
 + try { 
 + listenerThread . join ( 2000 ) ; 
 + } catch ( InterruptedException ignored ) { 
 + fail ( ) ; 
 + } 
 + / / one for initTable and one for the commit 
 + assertEquals ( 2 , counter . get ( ) ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 2cedd8d . . e80dec2 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 363 , 6 + 363 , 8 @ @ public class Realm { 
 realm = new Realm ( absolutePath , key , autoRefresh ) ; 
 realms . put ( absolutePath , realm ) ; 
 realmsCache . set ( realms ) ; 
 + } else { 
 + return realm ; 
 } 
 if ( validateSchema ) { 
 Class < ? > validationClass ;
