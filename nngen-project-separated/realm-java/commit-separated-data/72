BLEU SCORE: 0.051416288865472046

TEST MSG: Update Kotlin sample
GENERATED MSG: Update kotlin used in example to 1 . 1

TEST DIFF (one line): diff - - git a / examples / kotlinExample / build . gradle b / examples / kotlinExample / build . gradle <nl> index 9b887ac . . aa27cde 100644 <nl> - - - a / examples / kotlinExample / build . gradle <nl> + + + b / examples / kotlinExample / build . gradle <nl> @ @ - 60 , 5 + 60 , 5 @ @ tasks . withType ( org . jetbrains . kotlin . gradle . tasks . KotlinCompile ) . all { <nl> <nl> dependencies { <nl> implementation " org . jetbrains . kotlin : kotlin - stdlib - jdk7 : $ { kotlin _ version } " <nl> - implementation ' org . jetbrains . anko : anko - sdk15 : 0 . 9 . 1 ' <nl> + implementation " org . jetbrains . anko : anko - commons : 0 . 10 . 4 " <nl> } <nl> diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> index 25a6622 . . 3d7af8c 100644 <nl> - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> @ @ - 30 , 36 + 30 , 34 @ @ import io . realm . kotlin . createObject <nl> import io . realm . kotlin . where <nl> import org . jetbrains . anko . doAsync <nl> import org . jetbrains . anko . uiThread <nl> - import kotlin . properties . Delegates <nl> <nl> class KotlinExampleActivity : Activity ( ) { <nl> - <nl> companion object { <nl> - val TAG : String = KotlinExampleActivity : : class . java . simpleName <nl> + const val TAG : String = " KotlinExampleActivity " <nl> } <nl> <nl> - private var rootLayout : LinearLayout by Delegates . notNull ( ) <nl> - private var realm : Realm by Delegates . notNull ( ) <nl> + private lateinit var rootLayout : LinearLayout <nl> + private lateinit var realm : Realm <nl> <nl> override fun onCreate ( savedInstanceState : Bundle ? ) { <nl> super . onCreate ( savedInstanceState ) <nl> setContentView ( R . layout . activity _ realm _ basic _ example ) <nl> + <nl> rootLayout = findViewById ( R . id . container ) <nl> rootLayout . removeAllViews ( ) <nl> <nl> - / / These operations are small enough that <nl> - / / we can generally safely run them on the UI thread . <nl> - <nl> / / Open the realm for the UI thread . <nl> realm = Realm . getDefaultInstance ( ) <nl> <nl> / / Delete all persons <nl> / / Using executeTransaction with a lambda reduces code size and makes it impossible <nl> / / to forget to commit the transaction . <nl> - realm . executeTransaction { <nl> + realm . executeTransaction { realm - > <nl> realm . deleteAll ( ) <nl> } <nl> <nl> + / / These operations are small enough that <nl> + / / we can generally safely run them on the UI thread . <nl> basicCRUD ( realm ) <nl> basicQuery ( realm ) <nl> basicLinkQuery ( realm ) <nl> @ @ - 67 , 8 + 65 , 17 @ @ class KotlinExampleActivity : Activity ( ) { <nl> / / More complex operations can be executed on another thread , for example using <nl> / / Anko ' s doAsync extension method . <nl> doAsync { <nl> - var info = complexReadWrite ( ) <nl> - info + = complexQuery ( ) <nl> + var info = " " <nl> + <nl> + / / Open the default realm . All threads must use its own reference to the realm . <nl> + / / Those can not be transferred across threads . <nl> + <nl> + / / Realm implements the Closable interface , therefore <nl> + / / we can make use of Kotlin ' s built - in extension method ' use ' ( pun intended ) . <nl> + Realm . getDefaultInstance ( ) . use { realm - > <nl> + info + = complexReadWrite ( realm ) <nl> + info + = complexQuery ( realm ) <nl> + } <nl> uiThread { <nl> showStatus ( info ) <nl> } <nl> @ @ - 80 , 18 + 87 , 19 @ @ class KotlinExampleActivity : Activity ( ) { <nl> realm . close ( ) / / Remember to close Realm when done . <nl> } <nl> <nl> - private fun showStatus ( txt : String ) { <nl> - Log . i ( TAG , txt ) <nl> - val tv = TextView ( this ) <nl> - tv . text = txt <nl> - rootLayout . addView ( tv ) <nl> + private fun showStatus ( text : String ) { <nl> + Log . i ( TAG , text ) <nl> + val textView = TextView ( this ) <nl> + textView . text = text <nl> + rootLayout . addView ( textView ) <nl> } <nl> <nl> + @ Suppress ( " NAME _ SHADOWING " ) <nl> private fun basicCRUD ( realm : Realm ) { <nl> showStatus ( " Perform basic Create / Read / Update / Delete ( CRUD ) operations . . . " ) <nl> <nl> / / All writes must be wrapped in a transaction to facilitate safe multi threading <nl> - realm . executeTransaction { <nl> + realm . executeTransaction { realm - > <nl> / / Add a person <nl> val person = realm . createObject < Person > ( 0 ) <nl> person . name = " Young Person " <nl> @ @ - 103 , 7 + 111 , 7 @ @ class KotlinExampleActivity : Activity ( ) { <nl> showStatus ( person . name + " : " + person . age ) <nl> <nl> / / Update person in a transaction <nl> - realm . executeTransaction { <nl> + realm . executeTransaction { _ - > <nl> person . name = " Senior Person " <nl> person . age = 99 <nl> showStatus ( person . name + " got older : " + person . age ) <nl> @ @ - 129 , 84 + 137 , 68 @ @ class KotlinExampleActivity : Activity ( ) { <nl> showStatus ( " Size of result set : $ { results . size } " ) <nl> } <nl> <nl> - private fun complexReadWrite ( ) : String { <nl> + private fun complexReadWrite ( realm : Realm ) : String { <nl> var status = " \ nPerforming complex Read / Write operation . . . " <nl> <nl> - / / Open the default realm . All threads must use its own reference to the realm . <nl> - / / Those can not be transferred across threads . <nl> - val realm = Realm . getDefaultInstance ( ) <nl> - try { <nl> - / / Add ten persons in one transaction <nl> - realm . executeTransaction { <nl> - val fido = realm . createObject < Dog > ( ) <nl> - fido . name = " fido " <nl> - for ( i in 1 . . 9 ) { <nl> - val person = realm . createObject < Person > ( i . toLong ( ) ) <nl> - person . name = " Person no . $ i " <nl> - person . age = i <nl> - person . dog = fido <nl> - <nl> - / / The field tempReference is annotated with @ Ignore . <nl> - / / This means setTempReference sets the Person tempReference <nl> - / / field directly . The tempReference is NOT saved as part of <nl> - / / the RealmObject : <nl> - person . tempReference = 42 <nl> - <nl> - for ( j in 0 . . i - 1 ) { <nl> - val cat = realm . createObject < Cat > ( ) <nl> - cat . name = " Cat _ $ j " <nl> - person . cats . add ( cat ) <nl> - } <nl> + / / Add ten persons in one transaction <nl> + realm . executeTransaction { <nl> + val fido = realm . createObject < Dog > ( ) <nl> + fido . name = " fido " <nl> + for ( i in 1 . . 9 ) { <nl> + val person = realm . createObject < Person > ( i . toLong ( ) ) <nl> + person . name = " Person no . $ i " <nl> + person . age = i <nl> + person . dog = fido <nl> + <nl> + / / The field tempReference is annotated with @ Ignore . <nl> + / / This means setTempReference sets the Person tempReference <nl> + / / field directly . The tempReference is NOT saved as part of <nl> + / / the RealmObject : <nl> + person . tempReference = 42 <nl> + <nl> + for ( j in 0 . . i - 1 ) { <nl> + val cat = realm . createObject < Cat > ( ) <nl> + cat . name = " Cat _ $ j " <nl> + person . cats . add ( cat ) <nl> } <nl> } <nl> + } <nl> <nl> - / / Implicit read transactions allow you to access your objects <nl> - status + = " \ nNumber of persons : $ { realm . where < Person > ( ) . count ( ) } " <nl> + / / Implicit read transactions allow you to access your objects <nl> + status + = " \ nNumber of persons : $ { realm . where < Person > ( ) . count ( ) } " <nl> <nl> - / / Iterate over all objects <nl> - for ( person in realm . where < Person > ( ) . findAll ( ) ) { <nl> - val dogName : String = person ? . dog ? . name ? : " None " <nl> + / / Iterate over all objects <nl> + for ( person in realm . where < Person > ( ) . findAll ( ) ) { <nl> + val dogName : String = person ? . dog ? . name ? : " None " <nl> <nl> - status + = " \ n $ { person . name } : $ { person . age } : $ dogName : $ { person . cats . size } " <nl> + status + = " \ n $ { person . name } : $ { person . age } : $ dogName : $ { person . cats . size } " <nl> <nl> - / / The field tempReference is annotated with @ Ignore <nl> - / / Though we initially set its value to 42 , it has <nl> - / / not been saved as part of the Person RealmObject : <nl> - check ( person . tempReference = = 0 ) <nl> - } <nl> + / / The field tempReference is annotated with @ Ignore <nl> + / / Though we initially set its value to 42 , it has <nl> + / / not been saved as part of the Person RealmObject : <nl> + check ( person . tempReference = = 0 ) <nl> + } <nl> <nl> - / / Sorting <nl> - val sortedPersons = realm . where < Person > ( ) . sort ( Person : : age . name , Sort . DESCENDING ) . findAll ( ) <nl> - status + = " \ nSorting $ { sortedPersons . last ( ) ? . name } = = $ { realm . where < Person > ( ) . findAll ( ) . first ( ) ? . name } " <nl> + / / Sorting <nl> + val sortedPersons = realm . where < Person > ( ) . sort ( Person : : age . name , Sort . DESCENDING ) . findAll ( ) <nl> + status + = " \ nSorting $ { sortedPersons . last ( ) ? . name } = = $ { realm . where < Person > ( ) . findAll ( ) . first ( ) ? . name } " <nl> <nl> - } finally { <nl> - realm . close ( ) <nl> - } <nl> return status <nl> } <nl> <nl> - private fun complexQuery ( ) : String { <nl> + private fun complexQuery ( realm : Realm ) : String { <nl> var status = " \ n \ nPerforming complex Query operation . . . " <nl> <nl> - / / Realm implements the Closable interface , therefore we can make use of Kotlin ' s built - in <nl> - / / extension method ' use ' ( pun intended ) . <nl> - Realm . getDefaultInstance ( ) . use { <nl> - / / ' it ' is the implicit lambda parameter of type Realm <nl> - status + = " \ nNumber of persons : $ { it . where < Person > ( ) . count ( ) } " <nl> - <nl> - / / Find all persons where age between 7 and 9 and name begins with " Person " . <nl> - val results = it <nl> - . where < Person > ( ) <nl> - . between ( " age " , 7 , 9 ) / / Notice implicit " and " operation <nl> - . beginsWith ( " name " , " Person " ) <nl> - . findAll ( ) <nl> + status + = " \ nNumber of persons : $ { realm . where < Person > ( ) . count ( ) } " <nl> <nl> - status + = " \ nSize of result set : $ { results . size } " <nl> + / / Find all persons where age between 7 and 9 and name begins with " Person " . <nl> + val results = realm . where < Person > ( ) <nl> + . between ( " age " , 7 , 9 ) / / Notice implicit " and " operation <nl> + . beginsWith ( " name " , " Person " ) <nl> + . findAll ( ) <nl> <nl> - } <nl> + status + = " \ nSize of result set : $ { results . size } " <nl> <nl> return status <nl> } <nl> - <nl> - <nl> } <nl> diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Cat . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Cat . kt <nl> index 60e21b8 . . b1d4a37 100644 <nl> - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Cat . kt <nl> + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Cat . kt <nl> @ @ - 17 , 7 + 17 , 12 @ @ <nl> package io . realm . examples . kotlin . model <nl> <nl> import io . realm . RealmObject <nl> + import io . realm . RealmResults <nl> + import io . realm . annotations . LinkingObjects <nl> <nl> open class Cat : RealmObject ( ) { <nl> var name : String ? = null <nl> + <nl> + @ LinkingObjects ( " cats " ) <nl> + val owners : RealmResults < Person > ? = null <nl> } <nl> diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Dog . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Dog . kt <nl> index 17d8b5f . . e1237ed 100644 <nl> - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Dog . kt <nl> + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Dog . kt <nl> @ @ - 22 , 6 + 22 , 7 @ @ import io . realm . annotations . LinkingObjects <nl> <nl> open class Dog : RealmObject ( ) { <nl> var name : String ? = null <nl> + <nl> @ LinkingObjects ( " dog " ) <nl> val owners : RealmResults < Person > ? = null <nl> }
NEAREST DIFF (one line): diff - - git a / examples / kotlinExample / build . gradle b / examples / kotlinExample / build . gradle <nl> index 8034025 . . 79d9712 100644 <nl> - - - a / examples / kotlinExample / build . gradle <nl> + + + b / examples / kotlinExample / build . gradle <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> buildscript { <nl> - ext . kotlin _ version = ' 1 . 0 . 6 ' <nl> + ext . kotlin _ version = ' 1 . 1 . 0 ' <nl> repositories { <nl> jcenter ( ) <nl> mavenCentral ( ) <nl> @ @ - 39 , 11 + 39 , 6 @ @ android { <nl> events 2000 <nl> } <nl> <nl> - / / Incremental builds currently doesn ' t work with Kotlin <nl> - dexOptions { <nl> - incremental false <nl> - } <nl> - <nl> sourceSets { <nl> main . java . srcDirs + = ' src / main / kotlin ' <nl> } <nl> diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> index 73f0663 . . aba7c85 100644 <nl> - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> @ @ - 64 , 9 + 64 , 8 @ @ class KotlinExampleActivity : Activity ( ) { <nl> <nl> / / More complex operations can be executed on another thread , for example using <nl> / / Anko ' s async extension method . <nl> - async ( ) { <nl> - var info : String <nl> - info = complexReadWrite ( ) <nl> + async { <nl> + var info = complexReadWrite ( ) <nl> info + = complexQuery ( ) <nl> <nl> uiThread { <nl> @ @ - 134 , 51 + 133 , 53 @ @ class KotlinExampleActivity : Activity ( ) { <nl> / / Open the default realm . All threads must use its own reference to the realm . <nl> / / Those can not be transferred across threads . <nl> val realm = Realm . getDefaultInstance ( ) <nl> - <nl> - / / Add ten persons in one transaction <nl> - realm . executeTransaction { <nl> - val fido = realm . createObject ( Dog : : class . java ) <nl> - fido . name = " fido " <nl> - for ( i in 1 . . 9 ) { <nl> - val person = realm . createObject ( Person : : class . java , i . toLong ( ) ) <nl> - person . name = " Person no . $ i " <nl> - person . age = i <nl> - person . dog = fido <nl> - <nl> - / / The field tempReference is annotated with @ Ignore . <nl> - / / This means setTempReference sets the Person tempReference <nl> - / / field directly . The tempReference is NOT saved as part of <nl> - / / the RealmObject : <nl> - person . tempReference = 42 <nl> - <nl> - for ( j in 0 . . i - 1 ) { <nl> - val cat = realm . createObject ( Cat : : class . java ) <nl> - cat . name = " Cat _ $ j " <nl> - person . cats . add ( cat ) <nl> + try { <nl> + / / Add ten persons in one transaction <nl> + realm . executeTransaction { <nl> + val fido = realm . createObject ( Dog : : class . java ) <nl> + fido . name = " fido " <nl> + for ( i in 1 . . 9 ) { <nl> + val person = realm . createObject ( Person : : class . java , i . toLong ( ) ) <nl> + person . name = " Person no . $ i " <nl> + person . age = i <nl> + person . dog = fido <nl> + <nl> + / / The field tempReference is annotated with @ Ignore . <nl> + / / This means setTempReference sets the Person tempReference <nl> + / / field directly . The tempReference is NOT saved as part of <nl> + / / the RealmObject : <nl> + person . tempReference = 42 <nl> + <nl> + for ( j in 0 . . i - 1 ) { <nl> + val cat = realm . createObject ( Cat : : class . java ) <nl> + cat . name = " Cat _ $ j " <nl> + person . cats . add ( cat ) <nl> + } <nl> } <nl> } <nl> - } <nl> <nl> - / / Implicit read transactions allow you to access your objects <nl> - status + = " \ nNumber of persons : $ { realm . where ( Person : : class . java ) . count ( ) } " <nl> + / / Implicit read transactions allow you to access your objects <nl> + status + = " \ nNumber of persons : $ { realm . where ( Person : : class . java ) . count ( ) } " <nl> <nl> - / / Iterate over all objects <nl> - for ( person in realm . where ( Person : : class . java ) . findAll ( ) ) { <nl> - val dogName : String = person ? . dog ? . name ? : " None " <nl> + / / Iterate over all objects <nl> + for ( person in realm . where ( Person : : class . java ) . findAll ( ) ) { <nl> + val dogName : String = person ? . dog ? . name ? : " None " <nl> <nl> - status + = " \ n $ { person . name } : $ { person . age } : $ dogName : $ { person . cats . size } " <nl> + status + = " \ n $ { person . name } : $ { person . age } : $ dogName : $ { person . cats . size } " <nl> <nl> - / / The field tempReference is annotated with @ Ignore <nl> - / / Though we initially set its value to 42 , it has <nl> - / / not been saved as part of the Person RealmObject : <nl> - check ( person . tempReference = = 0 ) <nl> - } <nl> + / / The field tempReference is annotated with @ Ignore <nl> + / / Though we initially set its value to 42 , it has <nl> + / / not been saved as part of the Person RealmObject : <nl> + check ( person . tempReference = = 0 ) <nl> + } <nl> <nl> - / / Sorting <nl> - val sortedPersons = realm . where ( Person : : class . java ) . findAllSorted ( " age " , Sort . DESCENDING ) <nl> - status + = " \ nSorting $ { sortedPersons . last ( ) . name } = = $ { realm . where ( Person : : class . java ) . findAll ( ) . first ( ) . name } " <nl> + / / Sorting <nl> + val sortedPersons = realm . where ( Person : : class . java ) . findAllSorted ( " age " , Sort . DESCENDING ) <nl> + status + = " \ nSorting $ { sortedPersons . last ( ) . name } = = $ { realm . where ( Person : : class . java ) . findAll ( ) . first ( ) . name } " <nl> <nl> - realm . close ( ) <nl> + } finally { <nl> + realm . close ( ) <nl> + } <nl> return status <nl> } <nl>

TEST DIFF:
diff - - git a / examples / kotlinExample / build . gradle b / examples / kotlinExample / build . gradle 
 index 9b887ac . . aa27cde 100644 
 - - - a / examples / kotlinExample / build . gradle 
 + + + b / examples / kotlinExample / build . gradle 
 @ @ - 60 , 5 + 60 , 5 @ @ tasks . withType ( org . jetbrains . kotlin . gradle . tasks . KotlinCompile ) . all { 
 
 dependencies { 
 implementation " org . jetbrains . kotlin : kotlin - stdlib - jdk7 : $ { kotlin _ version } " 
 - implementation ' org . jetbrains . anko : anko - sdk15 : 0 . 9 . 1 ' 
 + implementation " org . jetbrains . anko : anko - commons : 0 . 10 . 4 " 
 } 
 diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 index 25a6622 . . 3d7af8c 100644 
 - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 @ @ - 30 , 36 + 30 , 34 @ @ import io . realm . kotlin . createObject 
 import io . realm . kotlin . where 
 import org . jetbrains . anko . doAsync 
 import org . jetbrains . anko . uiThread 
 - import kotlin . properties . Delegates 
 
 class KotlinExampleActivity : Activity ( ) { 
 - 
 companion object { 
 - val TAG : String = KotlinExampleActivity : : class . java . simpleName 
 + const val TAG : String = " KotlinExampleActivity " 
 } 
 
 - private var rootLayout : LinearLayout by Delegates . notNull ( ) 
 - private var realm : Realm by Delegates . notNull ( ) 
 + private lateinit var rootLayout : LinearLayout 
 + private lateinit var realm : Realm 
 
 override fun onCreate ( savedInstanceState : Bundle ? ) { 
 super . onCreate ( savedInstanceState ) 
 setContentView ( R . layout . activity _ realm _ basic _ example ) 
 + 
 rootLayout = findViewById ( R . id . container ) 
 rootLayout . removeAllViews ( ) 
 
 - / / These operations are small enough that 
 - / / we can generally safely run them on the UI thread . 
 - 
 / / Open the realm for the UI thread . 
 realm = Realm . getDefaultInstance ( ) 
 
 / / Delete all persons 
 / / Using executeTransaction with a lambda reduces code size and makes it impossible 
 / / to forget to commit the transaction . 
 - realm . executeTransaction { 
 + realm . executeTransaction { realm - > 
 realm . deleteAll ( ) 
 } 
 
 + / / These operations are small enough that 
 + / / we can generally safely run them on the UI thread . 
 basicCRUD ( realm ) 
 basicQuery ( realm ) 
 basicLinkQuery ( realm ) 
 @ @ - 67 , 8 + 65 , 17 @ @ class KotlinExampleActivity : Activity ( ) { 
 / / More complex operations can be executed on another thread , for example using 
 / / Anko ' s doAsync extension method . 
 doAsync { 
 - var info = complexReadWrite ( ) 
 - info + = complexQuery ( ) 
 + var info = " " 
 + 
 + / / Open the default realm . All threads must use its own reference to the realm . 
 + / / Those can not be transferred across threads . 
 + 
 + / / Realm implements the Closable interface , therefore 
 + / / we can make use of Kotlin ' s built - in extension method ' use ' ( pun intended ) . 
 + Realm . getDefaultInstance ( ) . use { realm - > 
 + info + = complexReadWrite ( realm ) 
 + info + = complexQuery ( realm ) 
 + } 
 uiThread { 
 showStatus ( info ) 
 } 
 @ @ - 80 , 18 + 87 , 19 @ @ class KotlinExampleActivity : Activity ( ) { 
 realm . close ( ) / / Remember to close Realm when done . 
 } 
 
 - private fun showStatus ( txt : String ) { 
 - Log . i ( TAG , txt ) 
 - val tv = TextView ( this ) 
 - tv . text = txt 
 - rootLayout . addView ( tv ) 
 + private fun showStatus ( text : String ) { 
 + Log . i ( TAG , text ) 
 + val textView = TextView ( this ) 
 + textView . text = text 
 + rootLayout . addView ( textView ) 
 } 
 
 + @ Suppress ( " NAME _ SHADOWING " ) 
 private fun basicCRUD ( realm : Realm ) { 
 showStatus ( " Perform basic Create / Read / Update / Delete ( CRUD ) operations . . . " ) 
 
 / / All writes must be wrapped in a transaction to facilitate safe multi threading 
 - realm . executeTransaction { 
 + realm . executeTransaction { realm - > 
 / / Add a person 
 val person = realm . createObject < Person > ( 0 ) 
 person . name = " Young Person " 
 @ @ - 103 , 7 + 111 , 7 @ @ class KotlinExampleActivity : Activity ( ) { 
 showStatus ( person . name + " : " + person . age ) 
 
 / / Update person in a transaction 
 - realm . executeTransaction { 
 + realm . executeTransaction { _ - > 
 person . name = " Senior Person " 
 person . age = 99 
 showStatus ( person . name + " got older : " + person . age ) 
 @ @ - 129 , 84 + 137 , 68 @ @ class KotlinExampleActivity : Activity ( ) { 
 showStatus ( " Size of result set : $ { results . size } " ) 
 } 
 
 - private fun complexReadWrite ( ) : String { 
 + private fun complexReadWrite ( realm : Realm ) : String { 
 var status = " \ nPerforming complex Read / Write operation . . . " 
 
 - / / Open the default realm . All threads must use its own reference to the realm . 
 - / / Those can not be transferred across threads . 
 - val realm = Realm . getDefaultInstance ( ) 
 - try { 
 - / / Add ten persons in one transaction 
 - realm . executeTransaction { 
 - val fido = realm . createObject < Dog > ( ) 
 - fido . name = " fido " 
 - for ( i in 1 . . 9 ) { 
 - val person = realm . createObject < Person > ( i . toLong ( ) ) 
 - person . name = " Person no . $ i " 
 - person . age = i 
 - person . dog = fido 
 - 
 - / / The field tempReference is annotated with @ Ignore . 
 - / / This means setTempReference sets the Person tempReference 
 - / / field directly . The tempReference is NOT saved as part of 
 - / / the RealmObject : 
 - person . tempReference = 42 
 - 
 - for ( j in 0 . . i - 1 ) { 
 - val cat = realm . createObject < Cat > ( ) 
 - cat . name = " Cat _ $ j " 
 - person . cats . add ( cat ) 
 - } 
 + / / Add ten persons in one transaction 
 + realm . executeTransaction { 
 + val fido = realm . createObject < Dog > ( ) 
 + fido . name = " fido " 
 + for ( i in 1 . . 9 ) { 
 + val person = realm . createObject < Person > ( i . toLong ( ) ) 
 + person . name = " Person no . $ i " 
 + person . age = i 
 + person . dog = fido 
 + 
 + / / The field tempReference is annotated with @ Ignore . 
 + / / This means setTempReference sets the Person tempReference 
 + / / field directly . The tempReference is NOT saved as part of 
 + / / the RealmObject : 
 + person . tempReference = 42 
 + 
 + for ( j in 0 . . i - 1 ) { 
 + val cat = realm . createObject < Cat > ( ) 
 + cat . name = " Cat _ $ j " 
 + person . cats . add ( cat ) 
 } 
 } 
 + } 
 
 - / / Implicit read transactions allow you to access your objects 
 - status + = " \ nNumber of persons : $ { realm . where < Person > ( ) . count ( ) } " 
 + / / Implicit read transactions allow you to access your objects 
 + status + = " \ nNumber of persons : $ { realm . where < Person > ( ) . count ( ) } " 
 
 - / / Iterate over all objects 
 - for ( person in realm . where < Person > ( ) . findAll ( ) ) { 
 - val dogName : String = person ? . dog ? . name ? : " None " 
 + / / Iterate over all objects 
 + for ( person in realm . where < Person > ( ) . findAll ( ) ) { 
 + val dogName : String = person ? . dog ? . name ? : " None " 
 
 - status + = " \ n $ { person . name } : $ { person . age } : $ dogName : $ { person . cats . size } " 
 + status + = " \ n $ { person . name } : $ { person . age } : $ dogName : $ { person . cats . size } " 
 
 - / / The field tempReference is annotated with @ Ignore 
 - / / Though we initially set its value to 42 , it has 
 - / / not been saved as part of the Person RealmObject : 
 - check ( person . tempReference = = 0 ) 
 - } 
 + / / The field tempReference is annotated with @ Ignore 
 + / / Though we initially set its value to 42 , it has 
 + / / not been saved as part of the Person RealmObject : 
 + check ( person . tempReference = = 0 ) 
 + } 
 
 - / / Sorting 
 - val sortedPersons = realm . where < Person > ( ) . sort ( Person : : age . name , Sort . DESCENDING ) . findAll ( ) 
 - status + = " \ nSorting $ { sortedPersons . last ( ) ? . name } = = $ { realm . where < Person > ( ) . findAll ( ) . first ( ) ? . name } " 
 + / / Sorting 
 + val sortedPersons = realm . where < Person > ( ) . sort ( Person : : age . name , Sort . DESCENDING ) . findAll ( ) 
 + status + = " \ nSorting $ { sortedPersons . last ( ) ? . name } = = $ { realm . where < Person > ( ) . findAll ( ) . first ( ) ? . name } " 
 
 - } finally { 
 - realm . close ( ) 
 - } 
 return status 
 } 
 
 - private fun complexQuery ( ) : String { 
 + private fun complexQuery ( realm : Realm ) : String { 
 var status = " \ n \ nPerforming complex Query operation . . . " 
 
 - / / Realm implements the Closable interface , therefore we can make use of Kotlin ' s built - in 
 - / / extension method ' use ' ( pun intended ) . 
 - Realm . getDefaultInstance ( ) . use { 
 - / / ' it ' is the implicit lambda parameter of type Realm 
 - status + = " \ nNumber of persons : $ { it . where < Person > ( ) . count ( ) } " 
 - 
 - / / Find all persons where age between 7 and 9 and name begins with " Person " . 
 - val results = it 
 - . where < Person > ( ) 
 - . between ( " age " , 7 , 9 ) / / Notice implicit " and " operation 
 - . beginsWith ( " name " , " Person " ) 
 - . findAll ( ) 
 + status + = " \ nNumber of persons : $ { realm . where < Person > ( ) . count ( ) } " 
 
 - status + = " \ nSize of result set : $ { results . size } " 
 + / / Find all persons where age between 7 and 9 and name begins with " Person " . 
 + val results = realm . where < Person > ( ) 
 + . between ( " age " , 7 , 9 ) / / Notice implicit " and " operation 
 + . beginsWith ( " name " , " Person " ) 
 + . findAll ( ) 
 
 - } 
 + status + = " \ nSize of result set : $ { results . size } " 
 
 return status 
 } 
 - 
 - 
 } 
 diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Cat . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Cat . kt 
 index 60e21b8 . . b1d4a37 100644 
 - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Cat . kt 
 + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Cat . kt 
 @ @ - 17 , 7 + 17 , 12 @ @ 
 package io . realm . examples . kotlin . model 
 
 import io . realm . RealmObject 
 + import io . realm . RealmResults 
 + import io . realm . annotations . LinkingObjects 
 
 open class Cat : RealmObject ( ) { 
 var name : String ? = null 
 + 
 + @ LinkingObjects ( " cats " ) 
 + val owners : RealmResults < Person > ? = null 
 } 
 diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Dog . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Dog . kt 
 index 17d8b5f . . e1237ed 100644 
 - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Dog . kt 
 + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Dog . kt 
 @ @ - 22 , 6 + 22 , 7 @ @ import io . realm . annotations . LinkingObjects 
 
 open class Dog : RealmObject ( ) { 
 var name : String ? = null 
 + 
 @ LinkingObjects ( " dog " ) 
 val owners : RealmResults < Person > ? = null 
 }

NEAREST DIFF:
diff - - git a / examples / kotlinExample / build . gradle b / examples / kotlinExample / build . gradle 
 index 8034025 . . 79d9712 100644 
 - - - a / examples / kotlinExample / build . gradle 
 + + + b / examples / kotlinExample / build . gradle 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 buildscript { 
 - ext . kotlin _ version = ' 1 . 0 . 6 ' 
 + ext . kotlin _ version = ' 1 . 1 . 0 ' 
 repositories { 
 jcenter ( ) 
 mavenCentral ( ) 
 @ @ - 39 , 11 + 39 , 6 @ @ android { 
 events 2000 
 } 
 
 - / / Incremental builds currently doesn ' t work with Kotlin 
 - dexOptions { 
 - incremental false 
 - } 
 - 
 sourceSets { 
 main . java . srcDirs + = ' src / main / kotlin ' 
 } 
 diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 index 73f0663 . . aba7c85 100644 
 - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 @ @ - 64 , 9 + 64 , 8 @ @ class KotlinExampleActivity : Activity ( ) { 
 
 / / More complex operations can be executed on another thread , for example using 
 / / Anko ' s async extension method . 
 - async ( ) { 
 - var info : String 
 - info = complexReadWrite ( ) 
 + async { 
 + var info = complexReadWrite ( ) 
 info + = complexQuery ( ) 
 
 uiThread { 
 @ @ - 134 , 51 + 133 , 53 @ @ class KotlinExampleActivity : Activity ( ) { 
 / / Open the default realm . All threads must use its own reference to the realm . 
 / / Those can not be transferred across threads . 
 val realm = Realm . getDefaultInstance ( ) 
 - 
 - / / Add ten persons in one transaction 
 - realm . executeTransaction { 
 - val fido = realm . createObject ( Dog : : class . java ) 
 - fido . name = " fido " 
 - for ( i in 1 . . 9 ) { 
 - val person = realm . createObject ( Person : : class . java , i . toLong ( ) ) 
 - person . name = " Person no . $ i " 
 - person . age = i 
 - person . dog = fido 
 - 
 - / / The field tempReference is annotated with @ Ignore . 
 - / / This means setTempReference sets the Person tempReference 
 - / / field directly . The tempReference is NOT saved as part of 
 - / / the RealmObject : 
 - person . tempReference = 42 
 - 
 - for ( j in 0 . . i - 1 ) { 
 - val cat = realm . createObject ( Cat : : class . java ) 
 - cat . name = " Cat _ $ j " 
 - person . cats . add ( cat ) 
 + try { 
 + / / Add ten persons in one transaction 
 + realm . executeTransaction { 
 + val fido = realm . createObject ( Dog : : class . java ) 
 + fido . name = " fido " 
 + for ( i in 1 . . 9 ) { 
 + val person = realm . createObject ( Person : : class . java , i . toLong ( ) ) 
 + person . name = " Person no . $ i " 
 + person . age = i 
 + person . dog = fido 
 + 
 + / / The field tempReference is annotated with @ Ignore . 
 + / / This means setTempReference sets the Person tempReference 
 + / / field directly . The tempReference is NOT saved as part of 
 + / / the RealmObject : 
 + person . tempReference = 42 
 + 
 + for ( j in 0 . . i - 1 ) { 
 + val cat = realm . createObject ( Cat : : class . java ) 
 + cat . name = " Cat _ $ j " 
 + person . cats . add ( cat ) 
 + } 
 } 
 } 
 - } 
 
 - / / Implicit read transactions allow you to access your objects 
 - status + = " \ nNumber of persons : $ { realm . where ( Person : : class . java ) . count ( ) } " 
 + / / Implicit read transactions allow you to access your objects 
 + status + = " \ nNumber of persons : $ { realm . where ( Person : : class . java ) . count ( ) } " 
 
 - / / Iterate over all objects 
 - for ( person in realm . where ( Person : : class . java ) . findAll ( ) ) { 
 - val dogName : String = person ? . dog ? . name ? : " None " 
 + / / Iterate over all objects 
 + for ( person in realm . where ( Person : : class . java ) . findAll ( ) ) { 
 + val dogName : String = person ? . dog ? . name ? : " None " 
 
 - status + = " \ n $ { person . name } : $ { person . age } : $ dogName : $ { person . cats . size } " 
 + status + = " \ n $ { person . name } : $ { person . age } : $ dogName : $ { person . cats . size } " 
 
 - / / The field tempReference is annotated with @ Ignore 
 - / / Though we initially set its value to 42 , it has 
 - / / not been saved as part of the Person RealmObject : 
 - check ( person . tempReference = = 0 ) 
 - } 
 + / / The field tempReference is annotated with @ Ignore 
 + / / Though we initially set its value to 42 , it has 
 + / / not been saved as part of the Person RealmObject : 
 + check ( person . tempReference = = 0 ) 
 + } 
 
 - / / Sorting 
 - val sortedPersons = realm . where ( Person : : class . java ) . findAllSorted ( " age " , Sort . DESCENDING ) 
 - status + = " \ nSorting $ { sortedPersons . last ( ) . name } = = $ { realm . where ( Person : : class . java ) . findAll ( ) . first ( ) . name } " 
 + / / Sorting 
 + val sortedPersons = realm . where ( Person : : class . java ) . findAllSorted ( " age " , Sort . DESCENDING ) 
 + status + = " \ nSorting $ { sortedPersons . last ( ) . name } = = $ { realm . where ( Person : : class . java ) . findAll ( ) . first ( ) . name } " 
 
 - realm . close ( ) 
 + } finally { 
 + realm . close ( ) 
 + } 
 return status 
 } 

