BLEU SCORE: 0.04996872151825359

TEST MSG: Update core to 2 . 0 . 0 - rc7
GENERATED MSG: Adding Table . unsetIndex ( ) to remove search index .

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 33c3bb1 . . 5e25fb2 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 34 , 7 + 34 , 7 @ @ <nl> # # # Internal <nl> <nl> * Moved JNI build to CMake . <nl> - * Updated Realm Core to 2 . 0 . 0 - rc4 . <nl> + * Updated Realm Core to 2 . 0 . 0 - rc7 . <nl> <nl> # # 1 . 2 . 0 <nl> <nl> diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index ebc1137 . . b42f048 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 12 , 9 + 12 , 9 @ @ apply plugin : ' checkstyle ' <nl> apply plugin : ' com . github . kt3k . coveralls ' <nl> apply plugin : ' de . undercouch . download ' <nl> <nl> - ext . coreVersion = ' 2 . 0 . 0 - rc4 ' <nl> + ext . coreVersion = ' 2 . 0 . 0 - rc7 ' <nl> / / empty or comment out this to disable hash checking <nl> - ext . coreSha256Hash = ' 760d8e889b8d678da36f63be2a49924969bfc8370176696ee977659d59677717 ' <nl> + ext . coreSha256Hash = ' 5707af75cd3624505d687c5fa31ccb6a61fe754f72ff6c79d98a342af3b9942b ' <nl> ext . forceDownloadCore = <nl> project . hasProperty ( ' forceDownloadCore ' ) ? project . getProperty ( ' forceDownloadCore ' ) . toBoolean ( ) : false <nl> / / Set the core source code path . By setting this , the core will be built from source . And coreVersion will be read from <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> index 0f1eb70 . . 5f8c54d 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> @ @ - 706 , 10 + 706 , 11 @ @ Java _ io _ realm _ internal _ Table _ nativeSetStringUnique ( JNIEnv * env , jclass , jlong na <nl> if ( ! TBL _ AND _ COL _ NULLABLE ( env , TBL ( nativeTablePtr ) , columnIndex ) ) { <nl> return ; <nl> } <nl> + TBL ( nativeTablePtr ) - > set _ string _ unique ( S ( columnIndex ) , S ( rowIndex ) , null { } ) ; <nl> + } else { <nl> + JStringAccessor value2 ( env , value ) ; / / throws <nl> + TBL ( nativeTablePtr ) - > set _ string _ unique ( S ( columnIndex ) , S ( rowIndex ) , value2 ) ; <nl> } <nl> - JStringAccessor value2 ( env , value ) ; / / throws <nl> - / / FIXME : Check if we need to call set _ null _ unique when core support it . <nl> - TBL ( nativeTablePtr ) - > set _ string _ unique ( S ( columnIndex ) , S ( rowIndex ) , value2 ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> @ @ - 765 , 6 + 766 , 23 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetNull ( <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> + JNIEXPORT void JNICALL <nl> + Java _ io _ realm _ internal _ Table _ nativeSetNullUnique ( JNIEnv * env , jclass , jlong nativeTablePtr , jlong columnIndex , <nl> + jlong rowIndex ) <nl> + { <nl> + Table * pTable = TBL ( nativeTablePtr ) ; <nl> + if ( ! TBL _ AND _ COL _ INDEX _ VALID ( env , pTable , columnIndex ) ) <nl> + return ; <nl> + if ( ! TBL _ AND _ ROW _ INDEX _ VALID ( env , pTable , rowIndex ) ) <nl> + return ; <nl> + if ( ! TBL _ AND _ COL _ NULLABLE ( env , pTable , columnIndex ) ) <nl> + return ; <nl> + try { <nl> + pTable - > set _ null _ unique ( S ( columnIndex ) , S ( rowIndex ) ) ; <nl> + } CATCH _ STD ( ) <nl> + } <nl> + <nl> + <nl> JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeGetRowPtr <nl> ( JNIEnv * env , jobject , jlong nativeTablePtr , jlong index ) <nl> { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> index ad5c39f . . a0c5c5e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> @ @ - 33 , 10 + 33 , 6 @ @ public class Table implements TableOrView , TableSchema { <nl> public static final int TABLE _ MAX _ LENGTH = 56 ; / / Max length of class names without prefix <nl> public static final String TABLE _ PREFIX = Util . getTablePrefix ( ) ; <nl> public static final long INFINITE = - 1 ; <nl> - @ SuppressWarnings ( " WeakerAccess " ) <nl> - public static final String STRING _ DEFAULT _ VALUE = " " ; <nl> - @ SuppressWarnings ( " WeakerAccess " ) <nl> - public static final long INTEGER _ DEFAULT _ VALUE = 0 ; <nl> public static final boolean NULLABLE = true ; <nl> public static final boolean NOT _ NULLABLE = false ; <nl> <nl> @ @ - 408 , 7 + 404 , 6 @ @ public class Table implements TableOrView , TableSchema { <nl> long primaryKeyColumnIndex = getPrimaryKey ( ) ; <nl> RealmFieldType type = getColumnType ( primaryKeyColumnIndex ) ; <nl> long rowIndex ; <nl> - UncheckedRow row ; <nl> <nl> / / Add with primary key initially set <nl> if ( primaryKeyValue = = null ) { <nl> @ @ - 419 , 9 + 414 , 11 @ @ public class Table implements TableOrView , TableSchema { <nl> throwDuplicatePrimaryKeyException ( " null " ) ; <nl> } <nl> rowIndex = nativeAddEmptyRow ( nativePtr , 1 ) ; <nl> - row = getUncheckedRow ( rowIndex ) ; <nl> - / / FIXME : Use core ' s set _ null _ unique when core supports it . <nl> - row . setNull ( primaryKeyColumnIndex ) ; <nl> + if ( type = = RealmFieldType . STRING ) { <nl> + nativeSetStringUnique ( nativePtr , primaryKeyColumnIndex , rowIndex , null ) ; <nl> + } else { <nl> + nativeSetNullUnique ( nativePtr , primaryKeyColumnIndex , rowIndex ) ; <nl> + } <nl> break ; <nl> <nl> default : <nl> @ @ - 1338 , 6 + 1335 , 8 @ @ public class Table implements TableOrView , TableSchema { <nl> public static native void nativeSetString ( long nativeTablePtr , long columnIndex , long rowIndex , String value ) ; <nl> public static native void nativeSetStringUnique ( long nativeTablePtr , long columnIndex , long rowIndex , String value ) ; <nl> public static native void nativeSetNull ( long nativeTablePtr , long columnIndex , long rowIndex ) ; <nl> + / / Use nativeSetStringUnique ( null ) for String column ! <nl> + public static native void nativeSetNullUnique ( long nativeTablePtr , long columnIndex , long rowIndex ) ; <nl> public static native void nativeSetByteArray ( long nativePtr , long columnIndex , long rowIndex , byte [ ] data ) ; <nl> public static native void nativeSetLink ( long nativeTablePtr , long columnIndex , long rowIndex , long value ) ; <nl> private native long nativeSetPrimaryKey ( long privateKeyTableNativePtr , long nativePtr , String columnName ) ;
NEAREST DIFF (one line): diff - - git a / realm - jni / src / io _ realm _ internal _ Table . h b / realm - jni / src / io _ realm _ internal _ Table . h <nl> index c5212e7 . . dffd4c4 100644 <nl> - - - a / realm - jni / src / io _ realm _ internal _ Table . h <nl> + + + b / realm - jni / src / io _ realm _ internal _ Table . h <nl> @ @ - 515 , 6 + 515 , 14 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetIndex <nl> <nl> / * <nl> * Class : io _ realm _ internal _ Table <nl> + * Method : nativeUnsetIndex <nl> + * Signature : ( JJ ) V <nl> + * / <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeUnsetIndex <nl> + ( JNIEnv * , jobject , jlong , jlong ) ; <nl> + <nl> + / * <nl> + * Class : io _ realm _ internal _ Table <nl> * Method : nativeHasIndex <nl> * Signature : ( JJ ) Z <nl> * / <nl> diff - - git a / realm - jni / src / io _ realm _ internal _ table . cpp b / realm - jni / src / io _ realm _ internal _ table . cpp <nl> index ee3b28b . . 03e05d7 100644 <nl> - - - a / realm - jni / src / io _ realm _ internal _ table . cpp <nl> + + + b / realm - jni / src / io _ realm _ internal _ table . cpp <nl> @ @ - 740 , 6 + 740 , 22 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetIndex ( <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeUnsetIndex ( <nl> + JNIEnv * env , jobject , jlong nativeTablePtr , jlong columnIndex ) <nl> + { <nl> + Table * pTable = TBL ( nativeTablePtr ) ; <nl> + if ( ! TBL _ AND _ COL _ INDEX _ VALID ( env , pTable , columnIndex ) ) <nl> + return ; <nl> + if ( pTable - > get _ column _ type ( S ( columnIndex ) ) ! = type _ String ) { <nl> + ThrowException ( env , IllegalArgument , " Invalid columntype - only string columns are supported at the moment . " ) ; <nl> + return ; <nl> + } <nl> + try { <nl> + pTable - > remove _ search _ index ( S ( columnIndex ) ) ; <nl> + } CATCH _ STD ( ) <nl> + } <nl> + <nl> + <nl> JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Table _ nativeHasIndex ( <nl> JNIEnv * env , jobject , jlong nativeTablePtr , jlong columnIndex ) <nl> { <nl> diff - - git a / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java b / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java <nl> index 1c7a798 . . c20d3e8 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java <nl> @ @ - 2 , 13 + 2 , 6 @ @ package io . realm . internal ; <nl> <nl> import junit . framework . TestCase ; <nl> <nl> - import java . util . Arrays ; <nl> - import java . util . Iterator ; <nl> - import java . util . List ; <nl> - <nl> - import io . realm . internal . test . DataProviderUtil ; <nl> - import io . realm . internal . test . TestHelper ; <nl> - <nl> public class TableIndexAndDistinctTest extends TestCase { <nl> Table table ; <nl> <nl> @ @ - 148 , 5 + 141 , 23 @ @ public class TableIndexAndDistinctTest extends TestCase { <nl> List < ? > mixedValues = Arrays . asList ( values ) ; <nl> return DataProviderUtil . allCombinations ( mixedValues ) ; <nl> } * / <nl> + <nl> + public void testUnsetIndex ( ) { <nl> + init ( ) ; <nl> + table . setIndex ( 1 ) ; <nl> + assertEquals ( true , table . hasIndex ( 1 ) ) ; <nl> + <nl> + table . unsetIndex ( 1 ) ; <nl> + assertEquals ( false , table . hasIndex ( 1 ) ) ; <nl> + } <nl> + <nl> + public void testUnsetIndexNoop ( ) { <nl> + init ( ) ; <nl> + assertEquals ( false , table . hasIndex ( 1 ) ) ; <nl> + <nl> + / / remove index from non - indexed column is a no - op <nl> + table . unsetIndex ( 1 ) ; <nl> + assertEquals ( false , table . hasIndex ( 1 ) ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / realm / src / main / java / io / realm / internal / Table . java b / realm / src / main / java / io / realm / internal / Table . java <nl> index 7a0065d . . 619b801 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / Table . java <nl> + + + b / realm / src / main / java / io / realm / internal / Table . java <nl> @ @ - 1152 , 15 + 1152 , 24 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> protected native void nativeAddInt ( long nativeViewPtr , long columnIndex , long value ) ; <nl> <nl> + private final String MSG _ ONLY _ STRING _ COLOUM _ CAN _ BE _ INDEXED = " Index is only supported on string columns . " ; <nl> <nl> public void setIndex ( long columnIndex ) { <nl> checkImmutable ( ) ; <nl> if ( getColumnType ( columnIndex ) ! = ColumnType . STRING ) { <nl> - throw new IllegalArgumentException ( " Index is only supported on string columns . " ) ; <nl> + throw new IllegalArgumentException ( MSG _ ONLY _ STRING _ COLOUM _ CAN _ BE _ INDEXED ) ; <nl> } <nl> nativeSetIndex ( nativePtr , columnIndex ) ; <nl> } <nl> <nl> + public void unsetIndex ( long columnIndex ) { <nl> + checkImmutable ( ) ; <nl> + if ( getColumnType ( columnIndex ) ! = ColumnType . STRING ) { <nl> + throw new IllegalArgumentException ( MSG _ ONLY _ STRING _ COLOUM _ CAN _ BE _ INDEXED ) ; <nl> + } <nl> + nativeUnsetIndex ( nativePtr , columnIndex ) ; <nl> + } <nl> + <nl> / * * <nl> * Define a primary key for this table . This needs to be called manually before inserting data <nl> * into the table . <nl> @ @ - 1211 , 6 + 1220 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> protected native void nativeSetIndex ( long nativePtr , long columnIndex ) ; <nl> <nl> + protected native void nativeUnsetIndex ( long nativePtr , long columnIndex ) ; <nl> <nl> public boolean hasIndex ( long columnIndex ) { <nl> return nativeHasIndex ( nativePtr , columnIndex ) ;

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 33c3bb1 . . 5e25fb2 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 34 , 7 + 34 , 7 @ @ 
 # # # Internal 
 
 * Moved JNI build to CMake . 
 - * Updated Realm Core to 2 . 0 . 0 - rc4 . 
 + * Updated Realm Core to 2 . 0 . 0 - rc7 . 
 
 # # 1 . 2 . 0 
 
 diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index ebc1137 . . b42f048 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 12 , 9 + 12 , 9 @ @ apply plugin : ' checkstyle ' 
 apply plugin : ' com . github . kt3k . coveralls ' 
 apply plugin : ' de . undercouch . download ' 
 
 - ext . coreVersion = ' 2 . 0 . 0 - rc4 ' 
 + ext . coreVersion = ' 2 . 0 . 0 - rc7 ' 
 / / empty or comment out this to disable hash checking 
 - ext . coreSha256Hash = ' 760d8e889b8d678da36f63be2a49924969bfc8370176696ee977659d59677717 ' 
 + ext . coreSha256Hash = ' 5707af75cd3624505d687c5fa31ccb6a61fe754f72ff6c79d98a342af3b9942b ' 
 ext . forceDownloadCore = 
 project . hasProperty ( ' forceDownloadCore ' ) ? project . getProperty ( ' forceDownloadCore ' ) . toBoolean ( ) : false 
 / / Set the core source code path . By setting this , the core will be built from source . And coreVersion will be read from 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 index 0f1eb70 . . 5f8c54d 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 @ @ - 706 , 10 + 706 , 11 @ @ Java _ io _ realm _ internal _ Table _ nativeSetStringUnique ( JNIEnv * env , jclass , jlong na 
 if ( ! TBL _ AND _ COL _ NULLABLE ( env , TBL ( nativeTablePtr ) , columnIndex ) ) { 
 return ; 
 } 
 + TBL ( nativeTablePtr ) - > set _ string _ unique ( S ( columnIndex ) , S ( rowIndex ) , null { } ) ; 
 + } else { 
 + JStringAccessor value2 ( env , value ) ; / / throws 
 + TBL ( nativeTablePtr ) - > set _ string _ unique ( S ( columnIndex ) , S ( rowIndex ) , value2 ) ; 
 } 
 - JStringAccessor value2 ( env , value ) ; / / throws 
 - / / FIXME : Check if we need to call set _ null _ unique when core support it . 
 - TBL ( nativeTablePtr ) - > set _ string _ unique ( S ( columnIndex ) , S ( rowIndex ) , value2 ) ; 
 } CATCH _ STD ( ) 
 } 
 
 @ @ - 765 , 6 + 766 , 23 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetNull ( 
 } CATCH _ STD ( ) 
 } 
 
 + JNIEXPORT void JNICALL 
 + Java _ io _ realm _ internal _ Table _ nativeSetNullUnique ( JNIEnv * env , jclass , jlong nativeTablePtr , jlong columnIndex , 
 + jlong rowIndex ) 
 + { 
 + Table * pTable = TBL ( nativeTablePtr ) ; 
 + if ( ! TBL _ AND _ COL _ INDEX _ VALID ( env , pTable , columnIndex ) ) 
 + return ; 
 + if ( ! TBL _ AND _ ROW _ INDEX _ VALID ( env , pTable , rowIndex ) ) 
 + return ; 
 + if ( ! TBL _ AND _ COL _ NULLABLE ( env , pTable , columnIndex ) ) 
 + return ; 
 + try { 
 + pTable - > set _ null _ unique ( S ( columnIndex ) , S ( rowIndex ) ) ; 
 + } CATCH _ STD ( ) 
 + } 
 + 
 + 
 JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeGetRowPtr 
 ( JNIEnv * env , jobject , jlong nativeTablePtr , jlong index ) 
 { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 index ad5c39f . . a0c5c5e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 @ @ - 33 , 10 + 33 , 6 @ @ public class Table implements TableOrView , TableSchema { 
 public static final int TABLE _ MAX _ LENGTH = 56 ; / / Max length of class names without prefix 
 public static final String TABLE _ PREFIX = Util . getTablePrefix ( ) ; 
 public static final long INFINITE = - 1 ; 
 - @ SuppressWarnings ( " WeakerAccess " ) 
 - public static final String STRING _ DEFAULT _ VALUE = " " ; 
 - @ SuppressWarnings ( " WeakerAccess " ) 
 - public static final long INTEGER _ DEFAULT _ VALUE = 0 ; 
 public static final boolean NULLABLE = true ; 
 public static final boolean NOT _ NULLABLE = false ; 
 
 @ @ - 408 , 7 + 404 , 6 @ @ public class Table implements TableOrView , TableSchema { 
 long primaryKeyColumnIndex = getPrimaryKey ( ) ; 
 RealmFieldType type = getColumnType ( primaryKeyColumnIndex ) ; 
 long rowIndex ; 
 - UncheckedRow row ; 
 
 / / Add with primary key initially set 
 if ( primaryKeyValue = = null ) { 
 @ @ - 419 , 9 + 414 , 11 @ @ public class Table implements TableOrView , TableSchema { 
 throwDuplicatePrimaryKeyException ( " null " ) ; 
 } 
 rowIndex = nativeAddEmptyRow ( nativePtr , 1 ) ; 
 - row = getUncheckedRow ( rowIndex ) ; 
 - / / FIXME : Use core ' s set _ null _ unique when core supports it . 
 - row . setNull ( primaryKeyColumnIndex ) ; 
 + if ( type = = RealmFieldType . STRING ) { 
 + nativeSetStringUnique ( nativePtr , primaryKeyColumnIndex , rowIndex , null ) ; 
 + } else { 
 + nativeSetNullUnique ( nativePtr , primaryKeyColumnIndex , rowIndex ) ; 
 + } 
 break ; 
 
 default : 
 @ @ - 1338 , 6 + 1335 , 8 @ @ public class Table implements TableOrView , TableSchema { 
 public static native void nativeSetString ( long nativeTablePtr , long columnIndex , long rowIndex , String value ) ; 
 public static native void nativeSetStringUnique ( long nativeTablePtr , long columnIndex , long rowIndex , String value ) ; 
 public static native void nativeSetNull ( long nativeTablePtr , long columnIndex , long rowIndex ) ; 
 + / / Use nativeSetStringUnique ( null ) for String column ! 
 + public static native void nativeSetNullUnique ( long nativeTablePtr , long columnIndex , long rowIndex ) ; 
 public static native void nativeSetByteArray ( long nativePtr , long columnIndex , long rowIndex , byte [ ] data ) ; 
 public static native void nativeSetLink ( long nativeTablePtr , long columnIndex , long rowIndex , long value ) ; 
 private native long nativeSetPrimaryKey ( long privateKeyTableNativePtr , long nativePtr , String columnName ) ;

NEAREST DIFF:
diff - - git a / realm - jni / src / io _ realm _ internal _ Table . h b / realm - jni / src / io _ realm _ internal _ Table . h 
 index c5212e7 . . dffd4c4 100644 
 - - - a / realm - jni / src / io _ realm _ internal _ Table . h 
 + + + b / realm - jni / src / io _ realm _ internal _ Table . h 
 @ @ - 515 , 6 + 515 , 14 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetIndex 
 
 / * 
 * Class : io _ realm _ internal _ Table 
 + * Method : nativeUnsetIndex 
 + * Signature : ( JJ ) V 
 + * / 
 + JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeUnsetIndex 
 + ( JNIEnv * , jobject , jlong , jlong ) ; 
 + 
 + / * 
 + * Class : io _ realm _ internal _ Table 
 * Method : nativeHasIndex 
 * Signature : ( JJ ) Z 
 * / 
 diff - - git a / realm - jni / src / io _ realm _ internal _ table . cpp b / realm - jni / src / io _ realm _ internal _ table . cpp 
 index ee3b28b . . 03e05d7 100644 
 - - - a / realm - jni / src / io _ realm _ internal _ table . cpp 
 + + + b / realm - jni / src / io _ realm _ internal _ table . cpp 
 @ @ - 740 , 6 + 740 , 22 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetIndex ( 
 } CATCH _ STD ( ) 
 } 
 
 + JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeUnsetIndex ( 
 + JNIEnv * env , jobject , jlong nativeTablePtr , jlong columnIndex ) 
 + { 
 + Table * pTable = TBL ( nativeTablePtr ) ; 
 + if ( ! TBL _ AND _ COL _ INDEX _ VALID ( env , pTable , columnIndex ) ) 
 + return ; 
 + if ( pTable - > get _ column _ type ( S ( columnIndex ) ) ! = type _ String ) { 
 + ThrowException ( env , IllegalArgument , " Invalid columntype - only string columns are supported at the moment . " ) ; 
 + return ; 
 + } 
 + try { 
 + pTable - > remove _ search _ index ( S ( columnIndex ) ) ; 
 + } CATCH _ STD ( ) 
 + } 
 + 
 + 
 JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Table _ nativeHasIndex ( 
 JNIEnv * env , jobject , jlong nativeTablePtr , jlong columnIndex ) 
 { 
 diff - - git a / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java b / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java 
 index 1c7a798 . . c20d3e8 100644 
 - - - a / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java 
 + + + b / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java 
 @ @ - 2 , 13 + 2 , 6 @ @ package io . realm . internal ; 
 
 import junit . framework . TestCase ; 
 
 - import java . util . Arrays ; 
 - import java . util . Iterator ; 
 - import java . util . List ; 
 - 
 - import io . realm . internal . test . DataProviderUtil ; 
 - import io . realm . internal . test . TestHelper ; 
 - 
 public class TableIndexAndDistinctTest extends TestCase { 
 Table table ; 
 
 @ @ - 148 , 5 + 141 , 23 @ @ public class TableIndexAndDistinctTest extends TestCase { 
 List < ? > mixedValues = Arrays . asList ( values ) ; 
 return DataProviderUtil . allCombinations ( mixedValues ) ; 
 } * / 
 + 
 + public void testUnsetIndex ( ) { 
 + init ( ) ; 
 + table . setIndex ( 1 ) ; 
 + assertEquals ( true , table . hasIndex ( 1 ) ) ; 
 + 
 + table . unsetIndex ( 1 ) ; 
 + assertEquals ( false , table . hasIndex ( 1 ) ) ; 
 + } 
 + 
 + public void testUnsetIndexNoop ( ) { 
 + init ( ) ; 
 + assertEquals ( false , table . hasIndex ( 1 ) ) ; 
 + 
 + / / remove index from non - indexed column is a no - op 
 + table . unsetIndex ( 1 ) ; 
 + assertEquals ( false , table . hasIndex ( 1 ) ) ; 
 + } 
 } 
 
 diff - - git a / realm / src / main / java / io / realm / internal / Table . java b / realm / src / main / java / io / realm / internal / Table . java 
 index 7a0065d . . 619b801 100644 
 - - - a / realm / src / main / java / io / realm / internal / Table . java 
 + + + b / realm / src / main / java / io / realm / internal / Table . java 
 @ @ - 1152 , 15 + 1152 , 24 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 protected native void nativeAddInt ( long nativeViewPtr , long columnIndex , long value ) ; 
 
 + private final String MSG _ ONLY _ STRING _ COLOUM _ CAN _ BE _ INDEXED = " Index is only supported on string columns . " ; 
 
 public void setIndex ( long columnIndex ) { 
 checkImmutable ( ) ; 
 if ( getColumnType ( columnIndex ) ! = ColumnType . STRING ) { 
 - throw new IllegalArgumentException ( " Index is only supported on string columns . " ) ; 
 + throw new IllegalArgumentException ( MSG _ ONLY _ STRING _ COLOUM _ CAN _ BE _ INDEXED ) ; 
 } 
 nativeSetIndex ( nativePtr , columnIndex ) ; 
 } 
 
 + public void unsetIndex ( long columnIndex ) { 
 + checkImmutable ( ) ; 
 + if ( getColumnType ( columnIndex ) ! = ColumnType . STRING ) { 
 + throw new IllegalArgumentException ( MSG _ ONLY _ STRING _ COLOUM _ CAN _ BE _ INDEXED ) ; 
 + } 
 + nativeUnsetIndex ( nativePtr , columnIndex ) ; 
 + } 
 + 
 / * * 
 * Define a primary key for this table . This needs to be called manually before inserting data 
 * into the table . 
 @ @ - 1211 , 6 + 1220 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 protected native void nativeSetIndex ( long nativePtr , long columnIndex ) ; 
 
 + protected native void nativeUnsetIndex ( long nativePtr , long columnIndex ) ; 
 
 public boolean hasIndex ( long columnIndex ) { 
 return nativeHasIndex ( nativePtr , columnIndex ) ;
