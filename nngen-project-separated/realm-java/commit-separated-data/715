BLEU SCORE: 0.05522397783539471

TEST MSG: Deprecated 3 field sort in Realm and RealmQuery
GENERATED MSG: Adding sort functionality to findAll ( ) .

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index e7443f4 . . 418b00f 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 9 , 7 + 9 , 10 @ @ <nl> <nl> # # # Deprecated <nl> <nl> - * ` RealmConfiguration . setModules ( ) ` . Use ` RealmConfiguration . modules ( ) ` insteasd . <nl> + * ` Realm . allObjectsSorted ( field , sort , field , sort , field , sort ) ` . Use ` RealmQuery . findAllSorted ( field [ ] , sort [ ] ) ` ` instead . <nl> + * ` RealmQuery . findAllSorted ( field , sort , field , sort , field , sort ) ` . Use ` RealmQuery . findAllSorted ( field [ ] , sort [ ] ) ` ` instead . <nl> + * ` RealmQuery . findAllSortedAsync ( field , sort , field , sort , field , sort ) ` . Use ` RealmQuery . findAllSortedAsync ( field [ ] , sort [ ] ) ` ` instead . <nl> + * ` RealmConfiguration . setModules ( ) ` . Use ` RealmConfiguration . modules ( ) ` instead . <nl> <nl> # # # Enhancements <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index d4fdf68 . . 06a5424 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 1010 , 19 + 1010 , 9 @ @ public final class Realm extends BaseRealm { <nl> } <nl> <nl> / * * <nl> - * Gets all objects of a specific class sorted by two specific field names . If no objects exist , the returned <nl> - * { @ link RealmResults } will not be { @ code null } . The RealmResults . size ( ) to check the number of objects instead . <nl> - * <nl> - * @ param clazz the class ti get objects of . <nl> - * @ param fieldName1 first field name to sort by . <nl> - * @ param sortOrder1 sort order for first field . <nl> - * @ param fieldName2 second field name to sort by . <nl> - * @ param sortOrder2 sort order for second field . <nl> - * @ param fieldName3 third field name to sort by . <nl> - * @ param sortOrder3 sort order for third field . <nl> - * @ return a sorted RealmResults containing the objects . <nl> - * @ throws java . lang . IllegalArgumentException if a field name does not exist . <nl> + * DEPRECATED : Use { @ link # allObjectsSorted ( Class , String [ ] , Sort [ ] ) } instead . <nl> * / <nl> + @ Deprecated <nl> public < E extends RealmModel > RealmResults < E > allObjectsSorted ( Class < E > clazz , String fieldName1 , <nl> Sort sortOrder1 , <nl> String fieldName2 , Sort sortOrder2 , <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 92d0b93 . . 0e25969 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1844 , 22 + 1844 , 9 @ @ public final class RealmQuery < E extends RealmModel > { <nl> } <nl> <nl> / * * <nl> - * Finds all objects that fulfill the query conditions and sorted by specific field names in <nl> - * ascending order . <nl> - * <nl> - * Sorting is currently limited to character sets in ' Latin Basic ' , ' Latin Supplement ' , ' Latin Extended A ' , <nl> - * ' Latin Extended B ' ( UTF - 8 range 0 - 591 ) . For other character sets , sorting will have no effect . <nl> - * <nl> - * @ param fieldName1 first field name <nl> - * @ param sortOrder1 sort order for first field <nl> - * @ param fieldName2 second field name <nl> - * @ param sortOrder2 sort order for second field <nl> - * @ param fieldName3 third field names <nl> - * @ param sortOrder3 sort order for third field <nl> - * @ return a { @ link io . realm . RealmResults } containing objects . If no objects match the condition , a list with zero <nl> - * objects is returned . <nl> - * @ throws java . lang . IllegalArgumentException if a field name does not exist . <nl> + * DEPRECATED : Use { @ link # findAllSorted ( String [ ] , Sort [ ] ) } instead . <nl> * / <nl> + @ Deprecated <nl> public RealmResults < E > findAllSorted ( String fieldName1 , Sort sortOrder1 , <nl> String fieldName2 , Sort sortOrder2 , <nl> String fieldName3 , Sort sortOrder3 ) { <nl> @ @ - 1868 , 14 + 1855 , 9 @ @ public final class RealmQuery < E extends RealmModel > { <nl> } <nl> <nl> / * * <nl> - * Similar to { @ link # findAllSorted ( String , Sort , String , Sort , String , Sort ) } but <nl> - * runs asynchronously on a worker thread . <nl> - * This method is only available from a Looper thread . <nl> - * <nl> - * @ return immediately an empty { @ link RealmResults } . Users need to register a listener <nl> - * { @ link io . realm . RealmResults # addChangeListener ( RealmChangeListener ) } to be notified when the query completes . <nl> - * @ throws java . lang . IllegalArgumentException if a field name does not exist . <nl> + * DEPRECATED : Use { @ link # findAllSortedAsync ( String [ ] , Sort [ ] ) } instead . <nl> * / <nl> + @ Deprecated <nl> public RealmResults < E > findAllSortedAsync ( String fieldName1 , Sort sortOrder1 , <nl> String fieldName2 , Sort sortOrder2 , <nl> String fieldName3 , Sort sortOrder3 ) {
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index d05f4d0 . . cea93de 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> 0 . 75 . 1 ( ? ? ) <nl> * Changing sort to be an in - place method . <nl> * Renaming SORT _ ORDER _ DECENDING to SORT _ ORDER _ DESCENDING . <nl> - * Adding sorting functionality to allObjects ( ) . <nl> + * Adding sorting functionality to allObjects ( ) and findAll ( ) . <nl> <nl> 0 . 75 . 0 ( 28 Nov 2014 ) <nl> * Realm now implements Closeable , allowing better cleanup of native resources <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> index b3aa1b5 . . aa58736 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> @ @ - 615 , 4 + 615 , 21 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> RealmResults < AllTypes > stillNone = none . where ( ) . greaterThan ( FIELD _ LONG , TEST _ DATA _ SIZE ) . findAll ( ) ; <nl> assertEquals ( 0 , stillNone . size ( ) ) ; <nl> } <nl> + <nl> + public void testFindAllSorted ( ) { <nl> + RealmResults < AllTypes > allTypes = testRealm . where ( AllTypes . class ) . findAll ( FIELD _ LONG , RealmResults . SORT _ ORDER _ ASCENDING ) ; <nl> + assertEquals ( TEST _ DATA _ SIZE , allTypes . size ( ) ) ; <nl> + assertEquals ( 0 , allTypes . first ( ) . getColumnLong ( ) ) ; <nl> + assertEquals ( TEST _ DATA _ SIZE - 1 , allTypes . last ( ) . getColumnLong ( ) ) ; <nl> + <nl> + RealmResults < AllTypes > reverseList = testRealm . where ( AllTypes . class ) . findAll ( FIELD _ LONG , RealmResults . SORT _ ORDER _ DESCENDING ) ; <nl> + assertEquals ( TEST _ DATA _ SIZE , reverseList . size ( ) ) ; <nl> + assertEquals ( 0 , reverseList . last ( ) . getColumnLong ( ) ) ; <nl> + assertEquals ( TEST _ DATA _ SIZE - 1 , reverseList . first ( ) . getColumnLong ( ) ) ; <nl> + <nl> + try { <nl> + RealmResults < AllTypes > none = testRealm . where ( AllTypes . class ) . findAll ( " invalid " , RealmResults . SORT _ ORDER _ DESCENDING ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException ignored ) { } <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index 173e9b9 . . 4401fd2 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import io . realm . internal . ColumnType ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableQuery ; <nl> + import io . realm . internal . TableView ; <nl> <nl> / * * <nl> * <nl> @ @ - 1121 , 6 + 1122 , 25 @ @ public class RealmQuery < E extends RealmObject > { <nl> } <nl> <nl> / * * <nl> + * Find all objects that fulfill the query conditions and sorted by specific field name . <nl> + * <nl> + * @ param fieldName the field name to sort by . <nl> + * @ param sortAscending sort ascending if SORT _ ORDER _ ASCENDING , sort descending if SORT _ ORDER _ DESCENDING . <nl> + * @ return A sorted RealmResults containing the objects . <nl> + * @ throws java . lang . IllegalArgumentException if field name does not exist . <nl> + * / <nl> + public RealmResults < E > findAll ( String fieldName , boolean sortAscending ) { <nl> + TableView tableView = query . findAll ( ) ; <nl> + TableView . Order order = sortAscending ? TableView . Order . ascending : TableView . Order . descending ; <nl> + Integer columnIndex = columns . get ( fieldName ) ; <nl> + if ( columnIndex = = null | | columnIndex < 0 ) { <nl> + throw new IllegalArgumentException ( String . format ( " Field name ' % s ' does not exist . " , fieldName ) ) ; <nl> + } <nl> + tableView . sort ( columnIndex , order ) ; <nl> + return new RealmResults < E > ( realm , tableView , clazz ) ; <nl> + } <nl> + <nl> + / * * <nl> * Find the first object that fulfills the query conditions . <nl> * @ return The object found or null if no object matches the query conditions . <nl> * @ see io . realm . RealmObject

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index e7443f4 . . 418b00f 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 9 , 7 + 9 , 10 @ @ 
 
 # # # Deprecated 
 
 - * ` RealmConfiguration . setModules ( ) ` . Use ` RealmConfiguration . modules ( ) ` insteasd . 
 + * ` Realm . allObjectsSorted ( field , sort , field , sort , field , sort ) ` . Use ` RealmQuery . findAllSorted ( field [ ] , sort [ ] ) ` ` instead . 
 + * ` RealmQuery . findAllSorted ( field , sort , field , sort , field , sort ) ` . Use ` RealmQuery . findAllSorted ( field [ ] , sort [ ] ) ` ` instead . 
 + * ` RealmQuery . findAllSortedAsync ( field , sort , field , sort , field , sort ) ` . Use ` RealmQuery . findAllSortedAsync ( field [ ] , sort [ ] ) ` ` instead . 
 + * ` RealmConfiguration . setModules ( ) ` . Use ` RealmConfiguration . modules ( ) ` instead . 
 
 # # # Enhancements 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index d4fdf68 . . 06a5424 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 1010 , 19 + 1010 , 9 @ @ public final class Realm extends BaseRealm { 
 } 
 
 / * * 
 - * Gets all objects of a specific class sorted by two specific field names . If no objects exist , the returned 
 - * { @ link RealmResults } will not be { @ code null } . The RealmResults . size ( ) to check the number of objects instead . 
 - * 
 - * @ param clazz the class ti get objects of . 
 - * @ param fieldName1 first field name to sort by . 
 - * @ param sortOrder1 sort order for first field . 
 - * @ param fieldName2 second field name to sort by . 
 - * @ param sortOrder2 sort order for second field . 
 - * @ param fieldName3 third field name to sort by . 
 - * @ param sortOrder3 sort order for third field . 
 - * @ return a sorted RealmResults containing the objects . 
 - * @ throws java . lang . IllegalArgumentException if a field name does not exist . 
 + * DEPRECATED : Use { @ link # allObjectsSorted ( Class , String [ ] , Sort [ ] ) } instead . 
 * / 
 + @ Deprecated 
 public < E extends RealmModel > RealmResults < E > allObjectsSorted ( Class < E > clazz , String fieldName1 , 
 Sort sortOrder1 , 
 String fieldName2 , Sort sortOrder2 , 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 92d0b93 . . 0e25969 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1844 , 22 + 1844 , 9 @ @ public final class RealmQuery < E extends RealmModel > { 
 } 
 
 / * * 
 - * Finds all objects that fulfill the query conditions and sorted by specific field names in 
 - * ascending order . 
 - * 
 - * Sorting is currently limited to character sets in ' Latin Basic ' , ' Latin Supplement ' , ' Latin Extended A ' , 
 - * ' Latin Extended B ' ( UTF - 8 range 0 - 591 ) . For other character sets , sorting will have no effect . 
 - * 
 - * @ param fieldName1 first field name 
 - * @ param sortOrder1 sort order for first field 
 - * @ param fieldName2 second field name 
 - * @ param sortOrder2 sort order for second field 
 - * @ param fieldName3 third field names 
 - * @ param sortOrder3 sort order for third field 
 - * @ return a { @ link io . realm . RealmResults } containing objects . If no objects match the condition , a list with zero 
 - * objects is returned . 
 - * @ throws java . lang . IllegalArgumentException if a field name does not exist . 
 + * DEPRECATED : Use { @ link # findAllSorted ( String [ ] , Sort [ ] ) } instead . 
 * / 
 + @ Deprecated 
 public RealmResults < E > findAllSorted ( String fieldName1 , Sort sortOrder1 , 
 String fieldName2 , Sort sortOrder2 , 
 String fieldName3 , Sort sortOrder3 ) { 
 @ @ - 1868 , 14 + 1855 , 9 @ @ public final class RealmQuery < E extends RealmModel > { 
 } 
 
 / * * 
 - * Similar to { @ link # findAllSorted ( String , Sort , String , Sort , String , Sort ) } but 
 - * runs asynchronously on a worker thread . 
 - * This method is only available from a Looper thread . 
 - * 
 - * @ return immediately an empty { @ link RealmResults } . Users need to register a listener 
 - * { @ link io . realm . RealmResults # addChangeListener ( RealmChangeListener ) } to be notified when the query completes . 
 - * @ throws java . lang . IllegalArgumentException if a field name does not exist . 
 + * DEPRECATED : Use { @ link # findAllSortedAsync ( String [ ] , Sort [ ] ) } instead . 
 * / 
 + @ Deprecated 
 public RealmResults < E > findAllSortedAsync ( String fieldName1 , Sort sortOrder1 , 
 String fieldName2 , Sort sortOrder2 , 
 String fieldName3 , Sort sortOrder3 ) {

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index d05f4d0 . . cea93de 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 0 . 75 . 1 ( ? ? ) 
 * Changing sort to be an in - place method . 
 * Renaming SORT _ ORDER _ DECENDING to SORT _ ORDER _ DESCENDING . 
 - * Adding sorting functionality to allObjects ( ) . 
 + * Adding sorting functionality to allObjects ( ) and findAll ( ) . 
 
 0 . 75 . 0 ( 28 Nov 2014 ) 
 * Realm now implements Closeable , allowing better cleanup of native resources 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 index b3aa1b5 . . aa58736 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 @ @ - 615 , 4 + 615 , 21 @ @ public class RealmResultsTest extends AndroidTestCase { 
 RealmResults < AllTypes > stillNone = none . where ( ) . greaterThan ( FIELD _ LONG , TEST _ DATA _ SIZE ) . findAll ( ) ; 
 assertEquals ( 0 , stillNone . size ( ) ) ; 
 } 
 + 
 + public void testFindAllSorted ( ) { 
 + RealmResults < AllTypes > allTypes = testRealm . where ( AllTypes . class ) . findAll ( FIELD _ LONG , RealmResults . SORT _ ORDER _ ASCENDING ) ; 
 + assertEquals ( TEST _ DATA _ SIZE , allTypes . size ( ) ) ; 
 + assertEquals ( 0 , allTypes . first ( ) . getColumnLong ( ) ) ; 
 + assertEquals ( TEST _ DATA _ SIZE - 1 , allTypes . last ( ) . getColumnLong ( ) ) ; 
 + 
 + RealmResults < AllTypes > reverseList = testRealm . where ( AllTypes . class ) . findAll ( FIELD _ LONG , RealmResults . SORT _ ORDER _ DESCENDING ) ; 
 + assertEquals ( TEST _ DATA _ SIZE , reverseList . size ( ) ) ; 
 + assertEquals ( 0 , reverseList . last ( ) . getColumnLong ( ) ) ; 
 + assertEquals ( TEST _ DATA _ SIZE - 1 , reverseList . first ( ) . getColumnLong ( ) ) ; 
 + 
 + try { 
 + RealmResults < AllTypes > none = testRealm . where ( AllTypes . class ) . findAll ( " invalid " , RealmResults . SORT _ ORDER _ DESCENDING ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException ignored ) { } 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index 173e9b9 . . 4401fd2 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import io . realm . internal . ColumnType ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableQuery ; 
 + import io . realm . internal . TableView ; 
 
 / * * 
 * 
 @ @ - 1121 , 6 + 1122 , 25 @ @ public class RealmQuery < E extends RealmObject > { 
 } 
 
 / * * 
 + * Find all objects that fulfill the query conditions and sorted by specific field name . 
 + * 
 + * @ param fieldName the field name to sort by . 
 + * @ param sortAscending sort ascending if SORT _ ORDER _ ASCENDING , sort descending if SORT _ ORDER _ DESCENDING . 
 + * @ return A sorted RealmResults containing the objects . 
 + * @ throws java . lang . IllegalArgumentException if field name does not exist . 
 + * / 
 + public RealmResults < E > findAll ( String fieldName , boolean sortAscending ) { 
 + TableView tableView = query . findAll ( ) ; 
 + TableView . Order order = sortAscending ? TableView . Order . ascending : TableView . Order . descending ; 
 + Integer columnIndex = columns . get ( fieldName ) ; 
 + if ( columnIndex = = null | | columnIndex < 0 ) { 
 + throw new IllegalArgumentException ( String . format ( " Field name ' % s ' does not exist . " , fieldName ) ) ; 
 + } 
 + tableView . sort ( columnIndex , order ) ; 
 + return new RealmResults < E > ( realm , tableView , clazz ) ; 
 + } 
 + 
 + / * * 
 * Find the first object that fulfills the query conditions . 
 * @ return The object found or null if no object matches the query conditions . 
 * @ see io . realm . RealmObject
