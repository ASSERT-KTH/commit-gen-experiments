BLEU SCORE: 0.02735488212061132

TEST MSG: Add comment about GC to all relevant change listeners
GENERATED MSG: Create RxJava factory interface , and add it to RealmConfiguration . Reworded Javadoc .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / RealmList . java b / realm / realm - library / src / main / java / io / realm / RealmList . java <nl> index ec33d39 . . 4d3b995 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmList . java <nl> @ @ - 899 , 6 + 899 , 31 @ @ public class RealmList < E extends RealmModel > extends AbstractList < E > implements <nl> <nl> / * * <nl> * Adds a change listener to this { @ link RealmList } . <nl> + * < p > <nl> + * Registering a change listener will not prevent the underlying RealmList from being garbage collected . <nl> + * If the RealmList is garbage collected , the change listener will stop being triggered . To avoid this , keep a <nl> + * strong reference for as long as appropriate e . g . in a class variable . <nl> + * < p > <nl> + * < pre > <nl> + * { @ code <nl> + * public class MyActivity extends Activity { <nl> + * <nl> + * private RealmList < Dog > dogs ; / / Strong reference to keep listeners alive <nl> + * <nl> + * \ @ Override <nl> + * protected void onCreate ( Bundle savedInstanceState ) { <nl> + * super . onCreate ( savedInstanceState ) ; <nl> + * dogs = realm . where ( Person . class ) . findFirst ( ) . getDogs ( ) ; <nl> + * dogs . addChangeListener ( new OrderedRealmCollectionChangeListener < RealmList < Dog > > ( ) { <nl> + * \ @ Override <nl> + * public void onChange ( RealmList < Dog > dogs , OrderedCollectionChangeSet changeSet ) { <nl> + * / / React to change <nl> + * } <nl> + * } ) ; <nl> + * } <nl> + * } <nl> + * } <nl> + * < / pre > <nl> * <nl> * @ param listener the change listener to be notified . <nl> * @ throws IllegalArgumentException if the change listener is { @ code null } . <nl> @ @ - 925 , 6 + 950 , 31 @ @ public class RealmList < E extends RealmModel > extends AbstractList < E > implements <nl> <nl> / * * <nl> * Adds a change listener to this { @ link RealmList } . <nl> + * < p > <nl> + * Registering a change listener will not prevent the underlying RealmList from being garbage collected . <nl> + * If the RealmList is garbage collected , the change listener will stop being triggered . To avoid this , keep a <nl> + * strong reference for as long as appropriate e . g . in a class variable . <nl> + * < p > <nl> + * < pre > <nl> + * { @ code <nl> + * public class MyActivity extends Activity { <nl> + * <nl> + * private RealmList < Dog > dogs ; / / Strong reference to keep listeners alive <nl> + * <nl> + * \ @ Override <nl> + * protected void onCreate ( Bundle savedInstanceState ) { <nl> + * super . onCreate ( savedInstanceState ) ; <nl> + * dogs = realm . where ( Person . class ) . findFirst ( ) . getDogs ( ) ; <nl> + * dogs . addChangeListener ( new RealmChangeListener < RealmList < Dog > > ( ) { <nl> + * \ @ Override <nl> + * public void onChange ( RealmList < Dog > dogs ) { <nl> + * / / React to change <nl> + * } <nl> + * } ) ; <nl> + * } <nl> + * } <nl> + * } <nl> + * < / pre > <nl> * <nl> * @ param listener the change listener to be notified . <nl> * @ throws IllegalArgumentException if the change listener is { @ code null } . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 74025c2 . . 792e118 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 316 , 6 + 316 , 31 @ @ public abstract class RealmObject implements RealmModel { <nl> * Adds a change listener to this RealmObject to get detailed information about changes . The listener will be <nl> * triggered if any value field or referenced RealmObject field is changed , or the RealmList field itself is <nl> * changed . <nl> + * < p > <nl> + * Registering a change listener will not prevent the underlying RealmObject from being garbage collected . <nl> + * If the RealmObject is garbage collected , the change listener will stop being triggered . To avoid this , keep a <nl> + * strong reference for as long as appropriate e . g . in a class variable . <nl> + * < p > <nl> + * < pre > <nl> + * { @ code <nl> + * public class MyActivity extends Activity { <nl> + * <nl> + * private Person person ; / / Strong reference to keep listeners alive <nl> + * <nl> + * \ @ Override <nl> + * protected void onCreate ( Bundle savedInstanceState ) { <nl> + * super . onCreate ( savedInstanceState ) ; <nl> + * person = realm . where ( Person . class ) . findFirst ( ) ; <nl> + * person . addChangeListener ( new RealmObjectChangeListener < Person > ( ) { <nl> + * \ @ Override <nl> + * public void onChange ( Person person , ObjectChangeSet changeSet ) { <nl> + * / / React to change <nl> + * } <nl> + * } ) ; <nl> + * } <nl> + * } <nl> + * } <nl> + * < / pre > <nl> * <nl> * @ param listener the change listener to be notified . <nl> * @ throws IllegalArgumentException if the change listener is { @ code null } or the object is an unmanaged object . <nl> @ @ - 330 , 6 + 355 , 31 @ @ public abstract class RealmObject implements RealmModel { <nl> / * * <nl> * Adds a change listener to this RealmObject that will be triggered if any value field or referenced RealmObject <nl> * field is changed , or the RealmList field itself is changed . <nl> + * < p > <nl> + * Registering a change listener will not prevent the underlying RealmObject from being garbage collected . <nl> + * If the RealmObject is garbage collected , the change listener will stop being triggered . To avoid this , keep a <nl> + * strong reference for as long as appropriate e . g . in a class variable . <nl> + * < p > <nl> + * < pre > <nl> + * { @ code <nl> + * public class MyActivity extends Activity { <nl> + * <nl> + * private Person person ; / / Strong reference to keep listeners alive <nl> + * <nl> + * \ @ Override <nl> + * protected void onCreate ( Bundle savedInstanceState ) { <nl> + * super . onCreate ( savedInstanceState ) ; <nl> + * person = realm . where ( Person . class ) . findFirst ( ) ; <nl> + * person . addChangeListener ( new RealmChangeListener < Person > ( ) { <nl> + * \ @ Override <nl> + * public void onChange ( Person person ) { <nl> + * / / React to change <nl> + * } <nl> + * } ) ; <nl> + * } <nl> + * } <nl> + * } <nl> + * < / pre > <nl> * <nl> * @ param listener the change listener to be notified . <nl> * @ throws IllegalArgumentException if the change listener is { @ code null } or the object is an unmanaged object . <nl> @ @ - 345 , 6 + 395 , 32 @ @ public abstract class RealmObject implements RealmModel { <nl> * Adds a change listener to a RealmObject to get detailed information about the changes . The listener will be <nl> * triggered if any value field or referenced RealmObject field is changed , or the RealmList field itself is <nl> * changed . <nl> + * < p > <nl> + * Registering a change listener will not prevent the underlying RealmObject from being garbage collected . <nl> + * If the RealmObject is garbage collected , the change listener will stop being triggered . To avoid this , keep a <nl> + * strong reference for as long as appropriate e . g . in a class variable . <nl> + * < p > <nl> + * < pre > <nl> + * { @ code <nl> + * public class MyActivity extends Activity { <nl> + * <nl> + * private Person person ; / / Strong reference to keep listeners alive <nl> + * <nl> + * \ @ Override <nl> + * protected void onCreate ( Bundle savedInstanceState ) { <nl> + * super . onCreate ( savedInstanceState ) ; <nl> + * person = realm . where ( Person . class ) . findFirst ( ) ; <nl> + * person . addChangeListener ( new RealmObjectChangeListener < Person > ( ) { <nl> + * \ @ Override <nl> + * public void onChange ( Person person , ObjectChangeSet changeSet ) { <nl> + * / / React to change <nl> + * } <nl> + * } ) ; <nl> + * } <nl> + * } <nl> + * } <nl> + * < / pre > <nl> + * <nl> * <nl> * @ param object RealmObject to add listener to . <nl> * @ param listener the change listener to be notified . <nl> @ @ - 375 , 6 + 451 , 31 @ @ public abstract class RealmObject implements RealmModel { <nl> / * * <nl> * Adds a change listener to a RealmObject that will be triggered if any value field or referenced RealmObject field <nl> * is changed , or the RealmList field itself is changed . <nl> + * < p > <nl> + * Registering a change listener will not prevent the underlying RealmObject from being garbage collected . <nl> + * If the RealmObject is garbage collected , the change listener will stop being triggered . To avoid this , keep a <nl> + * strong reference for as long as appropriate e . g . in a class variable . <nl> + * < p > <nl> + * < pre > <nl> + * { @ code <nl> + * public class MyActivity extends Activity { <nl> + * <nl> + * private Person person ; / / Strong reference to keep listeners alive <nl> + * <nl> + * \ @ Override <nl> + * protected void onCreate ( Bundle savedInstanceState ) { <nl> + * super . onCreate ( savedInstanceState ) ; <nl> + * person = realm . where ( Person . class ) . findFirst ( ) ; <nl> + * person . addChangeListener ( new RealmChangeListener < Person > ( ) { <nl> + * \ @ Override <nl> + * public void onChange ( Person person ) { <nl> + * / / React to change <nl> + * } <nl> + * } ) ; <nl> + * } <nl> + * } <nl> + * } <nl> + * < / pre > <nl> * <nl> * @ param object RealmObject to add listener to . <nl> * @ param listener the change listener to be notified . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 60c8c3b . . c8f047d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 125 , 6 + 125 , 31 @ @ public class RealmResults < E extends RealmModel > extends OrderedRealmCollectionIm <nl> <nl> / * * <nl> * Adds a change listener to this { @ link RealmResults } . <nl> + * < p > <nl> + * Registering a change listener will not prevent the underlying RealmResults from being garbage collected . <nl> + * If the RealmResults is garbage collected , the change listener will stop being triggered . To avoid this , keep a <nl> + * strong reference for as long as appropriate e . g . in a class variable . <nl> + * < p > <nl> + * < pre > <nl> + * { @ code <nl> + * public class MyActivity extends Activity { <nl> + * <nl> + * private RealmResults < Person > results ; / / Strong reference to keep listeners alive <nl> + * <nl> + * \ @ Override <nl> + * protected void onCreate ( Bundle savedInstanceState ) { <nl> + * super . onCreate ( savedInstanceState ) ; <nl> + * results = realm . where ( Person . class ) . findAllAsync ( ) ; <nl> + * results . addChangeListener ( new RealmChangeListener < RealmResults < Person > > ( ) { <nl> + * \ @ Override <nl> + * public void onChange ( RealmResults < Person > persons ) { <nl> + * / / React to change <nl> + * } <nl> + * } ) ; <nl> + * } <nl> + * } <nl> + * } <nl> + * < / pre > <nl> * <nl> * @ param listener the change listener to be notified . <nl> * @ throws IllegalArgumentException if the change listener is { @ code null } . <nl> @ @ - 138 , 6 + 163 , 31 @ @ public class RealmResults < E extends RealmModel > extends OrderedRealmCollectionIm <nl> <nl> / * * <nl> * Adds a change listener to this { @ link RealmResults } . <nl> + * < p > <nl> + * Registering a change listener will not prevent the underlying RealmResults from being garbage collected . <nl> + * If the RealmResults is garbage collected , the change listener will stop being triggered . To avoid this , keep a <nl> + * strong reference for as long as appropriate e . g . in a class variable . <nl> + * < p > <nl> + * < pre > <nl> + * { @ code <nl> + * public class MyActivity extends Activity { <nl> + * <nl> + * private RealmResults < Person > results ; / / Strong reference to keep listeners alive <nl> + * <nl> + * \ @ Override <nl> + * protected void onCreate ( Bundle savedInstanceState ) { <nl> + * super . onCreate ( savedInstanceState ) ; <nl> + * results = realm . where ( Person . class ) . findAllAsync ( ) ; <nl> + * results . addChangeListener ( new OrderedRealmCollectionChangeListener < RealmResults < Person > > ( ) { <nl> + * \ @ Override <nl> + * public void onChange ( RealmResults < Person > persons , OrderedCollectionChangeSet changeSet ) { <nl> + * / / React to change <nl> + * } <nl> + * } ) ; <nl> + * } <nl> + * } <nl> + * } <nl> + * < / pre > <nl> * <nl> * @ param listener the change listener to be notified . <nl> * @ throws IllegalArgumentException if the change listener is { @ code null } .
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 5869db2 . . f11d3fa 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 44 , 13 + 44 , 14 @ @ import io . realm . internal . android . DebugAndroidLogger ; <nl> import io . realm . internal . android . ReleaseAndroidLogger ; <nl> import io . realm . internal . async . RealmThreadPoolExecutor ; <nl> import io . realm . internal . log . RealmLog ; <nl> + import rx . Observable ; <nl> <nl> / * * <nl> * Base class for all Realm instances . <nl> * <nl> * @ see io . realm . Realm <nl> * / <nl> - abstract class BaseRealm implements Closeable { <nl> + abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> protected static final long UNVERSIONED = - 1 ; <nl> private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; <nl> private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; <nl> @ @ - 179 , 6 + 180 , 19 @ @ abstract class BaseRealm implements Closeable { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Returns an Rx Observable that monitors changes to this realm . It will output the last state when <nl> + * subscribed to . <nl> + * <nl> + * @ return RxJava Observable <nl> + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> + * @ see < a href = " " > RxJava and Realm < / a > <nl> + * / <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public Observable < E > observable ( ) { <nl> + return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; <nl> + } <nl> + <nl> void setHandler ( Handler handler ) { <nl> / / remove the old one <nl> handlers . remove ( this . handler ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 94faa6c . . 0026c7c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 110 , 7 + 110 , 7 @ @ import io . realm . internal . log . RealmLog ; <nl> * @ see < a href = " http : / / en . wikipedia . org / wiki / ACID " > ACID < / a > <nl> * @ see < a href = " https : / / github . com / realm / realm - java / tree / master / examples " > Examples using Realm < / a > <nl> * / <nl> - public final class Realm extends BaseRealm { <nl> + public final class Realm extends BaseRealm < Realm > { <nl> <nl> public static final String DEFAULT _ REALM _ NAME = RealmConfiguration . DEFAULT _ REALM _ NAME ; <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 02b20df . . 47221ff 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 77 , 6 + 77 , 7 @ @ public class RealmConfiguration { <nl> private final boolean deleteRealmIfMigrationNeeded ; <nl> private final SharedGroup . Durability durability ; <nl> private final RealmProxyMediator schemaMediator ; <nl> + private final RxJavaFactory rxObservableFactory ; <nl> <nl> private RealmConfiguration ( Builder builder ) { <nl> this . realmFolder = builder . folder ; <nl> @ @ - 88 , 6 + 89 , 7 @ @ public class RealmConfiguration { <nl> this . migration = builder . migration ; <nl> this . durability = builder . durability ; <nl> this . schemaMediator = createSchemaMediator ( builder ) ; <nl> + this . rxObservableFactory = new RxJavaFactory ( ) ; <nl> } <nl> <nl> public File getRealmFolder ( ) { <nl> @ @ - 126 , 6 + 128 , 10 @ @ public class RealmConfiguration { <nl> return canonicalPath ; <nl> } <nl> <nl> + RxObservableFactory getRxFactory ( ) { <nl> + return rxObservableFactory ; <nl> + } <nl> + <nl> @ Override <nl> public boolean equals ( Object obj ) { <nl> if ( this = = obj ) return true ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 2de77d6 . . 65b88ff 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import io . realm . internal . Row ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableQuery ; <nl> import io . realm . internal . log . RealmLog ; <nl> - import io . realm . rx . RxObservableFactory ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 272 , 15 + 271 , 16 @ @ public abstract class RealmObject < E extends RealmObject > { <nl> } <nl> <nl> / * * <nl> - * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when <nl> + * Returns an Rx Observable that monitors changes to this RealmObject . It will output the object when <nl> * subscribed to . <nl> * <nl> * @ return RxJava Observable <nl> - * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . <nl> + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> + * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> + @ SuppressWarnings ( " unchecked " ) <nl> public Observable < E > observable ( ) { <nl> - / / noinspection unchecked <nl> - return RxObservableFactory . from ( ( E ) this ) ; <nl> + return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 8726922 . . 8cd91f7 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 34 , 7 + 34 , 6 @ @ import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableQuery ; <nl> import io . realm . internal . TableView ; <nl> import io . realm . internal . log . RealmLog ; <nl> - import io . realm . rx . RxObservableFactory ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 811 , 15 + 810 , 15 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> <nl> / * * <nl> - * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when <nl> + * Returns an Rx Observable that monitors changes to this RealmResults . It will output the last results when <nl> * subscribed to . <nl> * <nl> * @ return RxJava Observable <nl> - * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . <nl> + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> + * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> public Observable < RealmResults < E > > observable ( ) { <nl> - / / noinspection unchecked <nl> - return RxObservableFactory . from ( this ) ; <nl> + return realm . configuration . getRxFactory ( ) . from ( this ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 06402e2 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java <nl> @ @ - 0 , 0 + 1 , 134 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm ; <nl> + <nl> + import rx . Observable ; <nl> + import rx . Subscriber ; <nl> + import rx . functions . Action0 ; <nl> + import rx . subscriptions . Subscriptions ; <nl> + <nl> + / * * <nl> + * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . <nl> + * TODO Test compatibility with RxJava2 / RxMobile <nl> + * / <nl> + public class RxJavaFactory implements RxObservableFactory { <nl> + <nl> + private boolean rxJavaAvailble ; <nl> + <nl> + public RxJavaFactory ( ) { <nl> + try { <nl> + Class . forName ( " rx . Observable " ) ; <nl> + rxJavaAvailble = true ; <nl> + } catch ( ClassNotFoundException ignore ) { <nl> + rxJavaAvailble = false ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends BaseRealm > Observable < E > from ( final E realm ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super E > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> + } ; <nl> + realm . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + realm . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( results ) ; <nl> + } <nl> + } ; <nl> + results . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + results . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( results ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < E > from ( final E object ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super E > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( object ) ; <nl> + } <nl> + } ; <nl> + object . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + object . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( object ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private void checkRxJavaAvailable ( ) { <nl> + if ( rxJavaAvailble ) { <nl> + throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + <nl> + " Remember to add it as a compile dependency . See XXX for more details . " ) ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 0977392 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java <nl> @ @ - 0 , 0 + 1 , 53 @ @ <nl> + package io . realm ; <nl> + <nl> + import rx . Observable ; <nl> + <nl> + / * * <nl> + * Factory interface for creating Rx Observables from Realm classes . <nl> + * / <nl> + public interface RxObservableFactory { <nl> + <nl> + / * * <nl> + * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each <nl> + * update to the Realm . <nl> + * <nl> + * Realm observables are effectively hot observables as Realms auto - update . <nl> + * <nl> + * @ param realm RealmResults to listen to changes for . <nl> + * / <nl> + < E extends BaseRealm > Observable < E > from ( E realm ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmResults . It should emit the initial results when subscribed to and on each <nl> + * update to the results . <nl> + * <nl> + * RealmResults observables are effectively hot observables as RealmObjects auto - update . <nl> + * <nl> + * @ param results RealmResults to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each <nl> + * update to the list . <nl> + * <nl> + * RealmList observables are effectively hot observables as RealmLists auto - update . <nl> + * <nl> + * @ param list RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> + <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update <nl> + * to the object . <nl> + * <nl> + * RealmObject observables are effectively hot observables as RealmObjects auto - update . <nl> + * <nl> + * @ param object RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < E > from ( E object ) ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> deleted file mode 100644 <nl> index b5e7da5 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 114 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . rx ; <nl> - <nl> - import io . realm . RealmChangeListener ; <nl> - import io . realm . RealmList ; <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import rx . Observable ; <nl> - import rx . Subscriber ; <nl> - import rx . functions . Action0 ; <nl> - import rx . subjects . BehaviorSubject ; <nl> - import rx . subscriptions . Subscriptions ; <nl> - <nl> - / / TODO Would it be better ( = more efficient ) to try to reuse RealmChangeListeners across observables ? <nl> - / / TODO Extract factory interface <nl> - / / TODO Convert this class to non - static . Add Configuration option for injecting factory instances , RealmConfiguration is kinda meh . <nl> - public class RxObservableFactory { <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmObject . It will emit the initial object when subscribed to and on each update <nl> - * to the object . <nl> - * <nl> - * RealmObject observables are effectively hot observables as RealmObjects auto - update . <nl> - * <nl> - * @ param object RealmObject to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - public static < E extends RealmObject > Observable < E > from ( final E object ) { <nl> - return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super E > subscriber ) { <nl> - final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - subscriber . onNext ( object ) ; <nl> - } <nl> - } ; <nl> - object . addChangeListener ( listener ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - object . removeChangeListener ( listener ) ; <nl> - } <nl> - } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . This mimics a BehaviorSubject . <nl> - subscriber . onNext ( object ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmResults . It will emit the initial results when subscribed to and on each <nl> - * update to the results . <nl> - * <nl> - * RealmResults observables are effectively hot observables as RealmObjects auto - update . <nl> - * <nl> - * @ param results RealmResults to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - public static < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> - return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> - final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - subscriber . onNext ( results ) ; <nl> - } <nl> - } ; <nl> - results . addChangeListener ( listener ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - results . removeChangeListener ( listener ) ; <nl> - } <nl> - } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . This mimics a BehaviorSubject . <nl> - subscriber . onNext ( results ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmResults . It will emit the initial list when subscribed to and on each <nl> - * update to the list . <nl> - * <nl> - * @ param list RealmObject to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - public static < E extends RealmObject > Observable < RealmList < E > > from ( final RealmList < E > list ) { <nl> - final BehaviorSubject < RealmList < E > > subject = BehaviorSubject . create ( list ) ; <nl> - / / TODO Need to add ChangeListener to RealmList . Require fine - grained notifications . <nl> - throw new RuntimeException ( " Not supported yet " ) ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / RealmList . java b / realm / realm - library / src / main / java / io / realm / RealmList . java 
 index ec33d39 . . 4d3b995 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmList . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmList . java 
 @ @ - 899 , 6 + 899 , 31 @ @ public class RealmList < E extends RealmModel > extends AbstractList < E > implements 
 
 / * * 
 * Adds a change listener to this { @ link RealmList } . 
 + * < p > 
 + * Registering a change listener will not prevent the underlying RealmList from being garbage collected . 
 + * If the RealmList is garbage collected , the change listener will stop being triggered . To avoid this , keep a 
 + * strong reference for as long as appropriate e . g . in a class variable . 
 + * < p > 
 + * < pre > 
 + * { @ code 
 + * public class MyActivity extends Activity { 
 + * 
 + * private RealmList < Dog > dogs ; / / Strong reference to keep listeners alive 
 + * 
 + * \ @ Override 
 + * protected void onCreate ( Bundle savedInstanceState ) { 
 + * super . onCreate ( savedInstanceState ) ; 
 + * dogs = realm . where ( Person . class ) . findFirst ( ) . getDogs ( ) ; 
 + * dogs . addChangeListener ( new OrderedRealmCollectionChangeListener < RealmList < Dog > > ( ) { 
 + * \ @ Override 
 + * public void onChange ( RealmList < Dog > dogs , OrderedCollectionChangeSet changeSet ) { 
 + * / / React to change 
 + * } 
 + * } ) ; 
 + * } 
 + * } 
 + * } 
 + * < / pre > 
 * 
 * @ param listener the change listener to be notified . 
 * @ throws IllegalArgumentException if the change listener is { @ code null } . 
 @ @ - 925 , 6 + 950 , 31 @ @ public class RealmList < E extends RealmModel > extends AbstractList < E > implements 
 
 / * * 
 * Adds a change listener to this { @ link RealmList } . 
 + * < p > 
 + * Registering a change listener will not prevent the underlying RealmList from being garbage collected . 
 + * If the RealmList is garbage collected , the change listener will stop being triggered . To avoid this , keep a 
 + * strong reference for as long as appropriate e . g . in a class variable . 
 + * < p > 
 + * < pre > 
 + * { @ code 
 + * public class MyActivity extends Activity { 
 + * 
 + * private RealmList < Dog > dogs ; / / Strong reference to keep listeners alive 
 + * 
 + * \ @ Override 
 + * protected void onCreate ( Bundle savedInstanceState ) { 
 + * super . onCreate ( savedInstanceState ) ; 
 + * dogs = realm . where ( Person . class ) . findFirst ( ) . getDogs ( ) ; 
 + * dogs . addChangeListener ( new RealmChangeListener < RealmList < Dog > > ( ) { 
 + * \ @ Override 
 + * public void onChange ( RealmList < Dog > dogs ) { 
 + * / / React to change 
 + * } 
 + * } ) ; 
 + * } 
 + * } 
 + * } 
 + * < / pre > 
 * 
 * @ param listener the change listener to be notified . 
 * @ throws IllegalArgumentException if the change listener is { @ code null } . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 74025c2 . . 792e118 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 316 , 6 + 316 , 31 @ @ public abstract class RealmObject implements RealmModel { 
 * Adds a change listener to this RealmObject to get detailed information about changes . The listener will be 
 * triggered if any value field or referenced RealmObject field is changed , or the RealmList field itself is 
 * changed . 
 + * < p > 
 + * Registering a change listener will not prevent the underlying RealmObject from being garbage collected . 
 + * If the RealmObject is garbage collected , the change listener will stop being triggered . To avoid this , keep a 
 + * strong reference for as long as appropriate e . g . in a class variable . 
 + * < p > 
 + * < pre > 
 + * { @ code 
 + * public class MyActivity extends Activity { 
 + * 
 + * private Person person ; / / Strong reference to keep listeners alive 
 + * 
 + * \ @ Override 
 + * protected void onCreate ( Bundle savedInstanceState ) { 
 + * super . onCreate ( savedInstanceState ) ; 
 + * person = realm . where ( Person . class ) . findFirst ( ) ; 
 + * person . addChangeListener ( new RealmObjectChangeListener < Person > ( ) { 
 + * \ @ Override 
 + * public void onChange ( Person person , ObjectChangeSet changeSet ) { 
 + * / / React to change 
 + * } 
 + * } ) ; 
 + * } 
 + * } 
 + * } 
 + * < / pre > 
 * 
 * @ param listener the change listener to be notified . 
 * @ throws IllegalArgumentException if the change listener is { @ code null } or the object is an unmanaged object . 
 @ @ - 330 , 6 + 355 , 31 @ @ public abstract class RealmObject implements RealmModel { 
 / * * 
 * Adds a change listener to this RealmObject that will be triggered if any value field or referenced RealmObject 
 * field is changed , or the RealmList field itself is changed . 
 + * < p > 
 + * Registering a change listener will not prevent the underlying RealmObject from being garbage collected . 
 + * If the RealmObject is garbage collected , the change listener will stop being triggered . To avoid this , keep a 
 + * strong reference for as long as appropriate e . g . in a class variable . 
 + * < p > 
 + * < pre > 
 + * { @ code 
 + * public class MyActivity extends Activity { 
 + * 
 + * private Person person ; / / Strong reference to keep listeners alive 
 + * 
 + * \ @ Override 
 + * protected void onCreate ( Bundle savedInstanceState ) { 
 + * super . onCreate ( savedInstanceState ) ; 
 + * person = realm . where ( Person . class ) . findFirst ( ) ; 
 + * person . addChangeListener ( new RealmChangeListener < Person > ( ) { 
 + * \ @ Override 
 + * public void onChange ( Person person ) { 
 + * / / React to change 
 + * } 
 + * } ) ; 
 + * } 
 + * } 
 + * } 
 + * < / pre > 
 * 
 * @ param listener the change listener to be notified . 
 * @ throws IllegalArgumentException if the change listener is { @ code null } or the object is an unmanaged object . 
 @ @ - 345 , 6 + 395 , 32 @ @ public abstract class RealmObject implements RealmModel { 
 * Adds a change listener to a RealmObject to get detailed information about the changes . The listener will be 
 * triggered if any value field or referenced RealmObject field is changed , or the RealmList field itself is 
 * changed . 
 + * < p > 
 + * Registering a change listener will not prevent the underlying RealmObject from being garbage collected . 
 + * If the RealmObject is garbage collected , the change listener will stop being triggered . To avoid this , keep a 
 + * strong reference for as long as appropriate e . g . in a class variable . 
 + * < p > 
 + * < pre > 
 + * { @ code 
 + * public class MyActivity extends Activity { 
 + * 
 + * private Person person ; / / Strong reference to keep listeners alive 
 + * 
 + * \ @ Override 
 + * protected void onCreate ( Bundle savedInstanceState ) { 
 + * super . onCreate ( savedInstanceState ) ; 
 + * person = realm . where ( Person . class ) . findFirst ( ) ; 
 + * person . addChangeListener ( new RealmObjectChangeListener < Person > ( ) { 
 + * \ @ Override 
 + * public void onChange ( Person person , ObjectChangeSet changeSet ) { 
 + * / / React to change 
 + * } 
 + * } ) ; 
 + * } 
 + * } 
 + * } 
 + * < / pre > 
 + * 
 * 
 * @ param object RealmObject to add listener to . 
 * @ param listener the change listener to be notified . 
 @ @ - 375 , 6 + 451 , 31 @ @ public abstract class RealmObject implements RealmModel { 
 / * * 
 * Adds a change listener to a RealmObject that will be triggered if any value field or referenced RealmObject field 
 * is changed , or the RealmList field itself is changed . 
 + * < p > 
 + * Registering a change listener will not prevent the underlying RealmObject from being garbage collected . 
 + * If the RealmObject is garbage collected , the change listener will stop being triggered . To avoid this , keep a 
 + * strong reference for as long as appropriate e . g . in a class variable . 
 + * < p > 
 + * < pre > 
 + * { @ code 
 + * public class MyActivity extends Activity { 
 + * 
 + * private Person person ; / / Strong reference to keep listeners alive 
 + * 
 + * \ @ Override 
 + * protected void onCreate ( Bundle savedInstanceState ) { 
 + * super . onCreate ( savedInstanceState ) ; 
 + * person = realm . where ( Person . class ) . findFirst ( ) ; 
 + * person . addChangeListener ( new RealmChangeListener < Person > ( ) { 
 + * \ @ Override 
 + * public void onChange ( Person person ) { 
 + * / / React to change 
 + * } 
 + * } ) ; 
 + * } 
 + * } 
 + * } 
 + * < / pre > 
 * 
 * @ param object RealmObject to add listener to . 
 * @ param listener the change listener to be notified . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 60c8c3b . . c8f047d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 125 , 6 + 125 , 31 @ @ public class RealmResults < E extends RealmModel > extends OrderedRealmCollectionIm 
 
 / * * 
 * Adds a change listener to this { @ link RealmResults } . 
 + * < p > 
 + * Registering a change listener will not prevent the underlying RealmResults from being garbage collected . 
 + * If the RealmResults is garbage collected , the change listener will stop being triggered . To avoid this , keep a 
 + * strong reference for as long as appropriate e . g . in a class variable . 
 + * < p > 
 + * < pre > 
 + * { @ code 
 + * public class MyActivity extends Activity { 
 + * 
 + * private RealmResults < Person > results ; / / Strong reference to keep listeners alive 
 + * 
 + * \ @ Override 
 + * protected void onCreate ( Bundle savedInstanceState ) { 
 + * super . onCreate ( savedInstanceState ) ; 
 + * results = realm . where ( Person . class ) . findAllAsync ( ) ; 
 + * results . addChangeListener ( new RealmChangeListener < RealmResults < Person > > ( ) { 
 + * \ @ Override 
 + * public void onChange ( RealmResults < Person > persons ) { 
 + * / / React to change 
 + * } 
 + * } ) ; 
 + * } 
 + * } 
 + * } 
 + * < / pre > 
 * 
 * @ param listener the change listener to be notified . 
 * @ throws IllegalArgumentException if the change listener is { @ code null } . 
 @ @ - 138 , 6 + 163 , 31 @ @ public class RealmResults < E extends RealmModel > extends OrderedRealmCollectionIm 
 
 / * * 
 * Adds a change listener to this { @ link RealmResults } . 
 + * < p > 
 + * Registering a change listener will not prevent the underlying RealmResults from being garbage collected . 
 + * If the RealmResults is garbage collected , the change listener will stop being triggered . To avoid this , keep a 
 + * strong reference for as long as appropriate e . g . in a class variable . 
 + * < p > 
 + * < pre > 
 + * { @ code 
 + * public class MyActivity extends Activity { 
 + * 
 + * private RealmResults < Person > results ; / / Strong reference to keep listeners alive 
 + * 
 + * \ @ Override 
 + * protected void onCreate ( Bundle savedInstanceState ) { 
 + * super . onCreate ( savedInstanceState ) ; 
 + * results = realm . where ( Person . class ) . findAllAsync ( ) ; 
 + * results . addChangeListener ( new OrderedRealmCollectionChangeListener < RealmResults < Person > > ( ) { 
 + * \ @ Override 
 + * public void onChange ( RealmResults < Person > persons , OrderedCollectionChangeSet changeSet ) { 
 + * / / React to change 
 + * } 
 + * } ) ; 
 + * } 
 + * } 
 + * } 
 + * < / pre > 
 * 
 * @ param listener the change listener to be notified . 
 * @ throws IllegalArgumentException if the change listener is { @ code null } .

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 5869db2 . . f11d3fa 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 44 , 13 + 44 , 14 @ @ import io . realm . internal . android . DebugAndroidLogger ; 
 import io . realm . internal . android . ReleaseAndroidLogger ; 
 import io . realm . internal . async . RealmThreadPoolExecutor ; 
 import io . realm . internal . log . RealmLog ; 
 + import rx . Observable ; 
 
 / * * 
 * Base class for all Realm instances . 
 * 
 * @ see io . realm . Realm 
 * / 
 - abstract class BaseRealm implements Closeable { 
 + abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 protected static final long UNVERSIONED = - 1 ; 
 private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; 
 private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; 
 @ @ - 179 , 6 + 180 , 19 @ @ abstract class BaseRealm implements Closeable { 
 } 
 } 
 
 + / * * 
 + * Returns an Rx Observable that monitors changes to this realm . It will output the last state when 
 + * subscribed to . 
 + * 
 + * @ return RxJava Observable 
 + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 + * @ see < a href = " " > RxJava and Realm < / a > 
 + * / 
 + @ SuppressWarnings ( " unchecked " ) 
 + public Observable < E > observable ( ) { 
 + return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; 
 + } 
 + 
 void setHandler ( Handler handler ) { 
 / / remove the old one 
 handlers . remove ( this . handler ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 94faa6c . . 0026c7c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 110 , 7 + 110 , 7 @ @ import io . realm . internal . log . RealmLog ; 
 * @ see < a href = " http : / / en . wikipedia . org / wiki / ACID " > ACID < / a > 
 * @ see < a href = " https : / / github . com / realm / realm - java / tree / master / examples " > Examples using Realm < / a > 
 * / 
 - public final class Realm extends BaseRealm { 
 + public final class Realm extends BaseRealm < Realm > { 
 
 public static final String DEFAULT _ REALM _ NAME = RealmConfiguration . DEFAULT _ REALM _ NAME ; 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 02b20df . . 47221ff 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 77 , 6 + 77 , 7 @ @ public class RealmConfiguration { 
 private final boolean deleteRealmIfMigrationNeeded ; 
 private final SharedGroup . Durability durability ; 
 private final RealmProxyMediator schemaMediator ; 
 + private final RxJavaFactory rxObservableFactory ; 
 
 private RealmConfiguration ( Builder builder ) { 
 this . realmFolder = builder . folder ; 
 @ @ - 88 , 6 + 89 , 7 @ @ public class RealmConfiguration { 
 this . migration = builder . migration ; 
 this . durability = builder . durability ; 
 this . schemaMediator = createSchemaMediator ( builder ) ; 
 + this . rxObservableFactory = new RxJavaFactory ( ) ; 
 } 
 
 public File getRealmFolder ( ) { 
 @ @ - 126 , 6 + 128 , 10 @ @ public class RealmConfiguration { 
 return canonicalPath ; 
 } 
 
 + RxObservableFactory getRxFactory ( ) { 
 + return rxObservableFactory ; 
 + } 
 + 
 @ Override 
 public boolean equals ( Object obj ) { 
 if ( this = = obj ) return true ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 2de77d6 . . 65b88ff 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import io . realm . internal . Row ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableQuery ; 
 import io . realm . internal . log . RealmLog ; 
 - import io . realm . rx . RxObservableFactory ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 272 , 15 + 271 , 16 @ @ public abstract class RealmObject < E extends RealmObject > { 
 } 
 
 / * * 
 - * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when 
 + * Returns an Rx Observable that monitors changes to this RealmObject . It will output the object when 
 * subscribed to . 
 * 
 * @ return RxJava Observable 
 - * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . 
 + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 + * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 + @ SuppressWarnings ( " unchecked " ) 
 public Observable < E > observable ( ) { 
 - / / noinspection unchecked 
 - return RxObservableFactory . from ( ( E ) this ) ; 
 + return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 8726922 . . 8cd91f7 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 34 , 7 + 34 , 6 @ @ import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableQuery ; 
 import io . realm . internal . TableView ; 
 import io . realm . internal . log . RealmLog ; 
 - import io . realm . rx . RxObservableFactory ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 811 , 15 + 810 , 15 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 } 
 
 / * * 
 - * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when 
 + * Returns an Rx Observable that monitors changes to this RealmResults . It will output the last results when 
 * subscribed to . 
 * 
 * @ return RxJava Observable 
 - * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . 
 + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 + * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 public Observable < RealmResults < E > > observable ( ) { 
 - / / noinspection unchecked 
 - return RxObservableFactory . from ( this ) ; 
 + return realm . configuration . getRxFactory ( ) . from ( this ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java 
 new file mode 100644 
 index 0000000 . . 06402e2 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java 
 @ @ - 0 , 0 + 1 , 134 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm ; 
 + 
 + import rx . Observable ; 
 + import rx . Subscriber ; 
 + import rx . functions . Action0 ; 
 + import rx . subscriptions . Subscriptions ; 
 + 
 + / * * 
 + * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . 
 + * TODO Test compatibility with RxJava2 / RxMobile 
 + * / 
 + public class RxJavaFactory implements RxObservableFactory { 
 + 
 + private boolean rxJavaAvailble ; 
 + 
 + public RxJavaFactory ( ) { 
 + try { 
 + Class . forName ( " rx . Observable " ) ; 
 + rxJavaAvailble = true ; 
 + } catch ( ClassNotFoundException ignore ) { 
 + rxJavaAvailble = false ; 
 + } 
 + } 
 + 
 + @ Override 
 + public < E extends BaseRealm > Observable < E > from ( final E realm ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super E > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( realm ) ; 
 + } 
 + } ; 
 + realm . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + realm . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( realm ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( results ) ; 
 + } 
 + } ; 
 + results . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + results . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( results ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 + checkRxJavaAvailable ( ) ; 
 + throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < E > from ( final E object ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super E > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( object ) ; 
 + } 
 + } ; 
 + object . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + object . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( object ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private void checkRxJavaAvailable ( ) { 
 + if ( rxJavaAvailble ) { 
 + throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + 
 + " Remember to add it as a compile dependency . See XXX for more details . " ) ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java 
 new file mode 100644 
 index 0000000 . . 0977392 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + package io . realm ; 
 + 
 + import rx . Observable ; 
 + 
 + / * * 
 + * Factory interface for creating Rx Observables from Realm classes . 
 + * / 
 + public interface RxObservableFactory { 
 + 
 + / * * 
 + * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each 
 + * update to the Realm . 
 + * 
 + * Realm observables are effectively hot observables as Realms auto - update . 
 + * 
 + * @ param realm RealmResults to listen to changes for . 
 + * / 
 + < E extends BaseRealm > Observable < E > from ( E realm ) ; 
 + 
 + / * * 
 + * Creates an Observable for a RealmResults . It should emit the initial results when subscribed to and on each 
 + * update to the results . 
 + * 
 + * RealmResults observables are effectively hot observables as RealmObjects auto - update . 
 + * 
 + * @ param results RealmResults to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 + 
 + / * * 
 + * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each 
 + * update to the list . 
 + * 
 + * RealmList observables are effectively hot observables as RealmLists auto - update . 
 + * 
 + * @ param list RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 + 
 + 
 + / * * 
 + * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update 
 + * to the object . 
 + * 
 + * RealmObject observables are effectively hot observables as RealmObjects auto - update . 
 + * 
 + * @ param object RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < E > from ( E object ) ; 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 deleted file mode 100644 
 index b5e7da5 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 + + + / dev / null 
 @ @ - 1 , 114 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . rx ; 
 - 
 - import io . realm . RealmChangeListener ; 
 - import io . realm . RealmList ; 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import rx . Observable ; 
 - import rx . Subscriber ; 
 - import rx . functions . Action0 ; 
 - import rx . subjects . BehaviorSubject ; 
 - import rx . subscriptions . Subscriptions ; 
 - 
 - / / TODO Would it be better ( = more efficient ) to try to reuse RealmChangeListeners across observables ? 
 - / / TODO Extract factory interface 
 - / / TODO Convert this class to non - static . Add Configuration option for injecting factory instances , RealmConfiguration is kinda meh . 
 - public class RxObservableFactory { 
 - 
 - / * * 
 - * Creates an Observable for a RealmObject . It will emit the initial object when subscribed to and on each update 
 - * to the object . 
 - * 
 - * RealmObject observables are effectively hot observables as RealmObjects auto - update . 
 - * 
 - * @ param object RealmObject to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - public static < E extends RealmObject > Observable < E > from ( final E object ) { 
 - return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super E > subscriber ) { 
 - final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - subscriber . onNext ( object ) ; 
 - } 
 - } ; 
 - object . addChangeListener ( listener ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - object . removeChangeListener ( listener ) ; 
 - } 
 - } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . This mimics a BehaviorSubject . 
 - subscriber . onNext ( object ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - / * * 
 - * Creates an Observable for a RealmResults . It will emit the initial results when subscribed to and on each 
 - * update to the results . 
 - * 
 - * RealmResults observables are effectively hot observables as RealmObjects auto - update . 
 - * 
 - * @ param results RealmResults to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - public static < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 - return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 - final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - subscriber . onNext ( results ) ; 
 - } 
 - } ; 
 - results . addChangeListener ( listener ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - results . removeChangeListener ( listener ) ; 
 - } 
 - } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . This mimics a BehaviorSubject . 
 - subscriber . onNext ( results ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - / * * 
 - * Creates an Observable for a RealmResults . It will emit the initial list when subscribed to and on each 
 - * update to the list . 
 - * 
 - * @ param list RealmObject to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - public static < E extends RealmObject > Observable < RealmList < E > > from ( final RealmList < E > list ) { 
 - final BehaviorSubject < RealmList < E > > subject = BehaviorSubject . create ( list ) ; 
 - / / TODO Need to add ChangeListener to RealmList . Require fine - grained notifications . 
 - throw new RuntimeException ( " Not supported yet " ) ; 
 - } 
 - }
