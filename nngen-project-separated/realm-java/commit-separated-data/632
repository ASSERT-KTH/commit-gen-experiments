BLEU SCORE: 0.040583489434387374

TEST MSG: Fix notification tests for following changes
GENERATED MSG: One more flaky test

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> index f3bf35d . . 6d06152 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 247 , 87 + 247 , 6 @ @ public class NotificationsTest { <nl> RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; <nl> } <nl> <nl> - / / @ Test <nl> - / / FIXME : This test is being replaced by https : / / github . com / realm / realm - java / pull / 2319 / files <nl> - public void realmResultsStableDuringLooperEvent ( ) throws InterruptedException , ExecutionException { <nl> - final int TEST _ SIZE = 10 ; <nl> - final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> - final AtomicBoolean isReady = new AtomicBoolean ( false ) ; <nl> - final AtomicBoolean isRealmOpen = new AtomicBoolean ( true ) ; <nl> - final Map < Integer , Integer > results = new ConcurrentHashMap < Integer , Integer > ( ) ; <nl> - final Looper [ ] looper = new Looper [ 1 ] ; <nl> - / / noinspection unchecked <nl> - final RealmChangeListener < Realm > [ ] listener = new RealmChangeListener [ 1 ] ; <nl> - <nl> - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> - Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> - <nl> - @ Override <nl> - public Boolean call ( ) throws Exception { <nl> - Looper . prepare ( ) ; <nl> - looper [ 0 ] = Looper . myLooper ( ) ; <nl> - Realm realm = null ; <nl> - try { <nl> - realm = Realm . getInstance ( realmConfig ) ; <nl> - final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; <nl> - assertEquals ( 0 , dogs . size ( ) ) ; <nl> - listener [ 0 ] = new RealmChangeListener < Realm > ( ) { <nl> - @ Override <nl> - public void onChange ( Realm object ) { <nl> - int c = counter . incrementAndGet ( ) ; <nl> - results . put ( c , dogs . size ( ) ) ; <nl> - } <nl> - } ; <nl> - realm . addChangeListener ( listener [ 0 ] ) ; <nl> - isReady . set ( true ) ; <nl> - Looper . loop ( ) ; <nl> - } finally { <nl> - if ( realm ! = null ) { <nl> - realm . close ( ) ; <nl> - isRealmOpen . set ( false ) ; <nl> - } <nl> - } <nl> - return true ; <nl> - } <nl> - } ) ; <nl> - <nl> - / / Wait until the looper is started <nl> - while ( ! isReady . get ( ) ) { <nl> - Thread . sleep ( 5 ) ; <nl> - } <nl> - Thread . sleep ( 100 ) ; <nl> - <nl> - Realm realm = Realm . getInstance ( realmConfig ) ; <nl> - realm . beginTransaction ( ) ; <nl> - for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { <nl> - Dog dog = realm . createObject ( Dog . class ) ; <nl> - dog . setName ( " Rex " + i ) ; <nl> - } <nl> - realm . commitTransaction ( ) ; <nl> - assertEquals ( TEST _ SIZE , realm . where ( Dog . class ) . count ( ) ) ; <nl> - realm . close ( ) ; <nl> - <nl> - try { <nl> - future . get ( 2 , TimeUnit . SECONDS ) ; <nl> - } catch ( TimeoutException ignore ) { <nl> - } finally { <nl> - looper [ 0 ] . quit ( ) ; <nl> - } <nl> - <nl> - / / Wait until the Looper thread is actually closed <nl> - while ( isRealmOpen . get ( ) ) { <nl> - Thread . sleep ( 5 ) ; <nl> - } <nl> - <nl> - assertEquals ( 1 , results . size ( ) ) ; <nl> - <nl> - assertTrue ( results . containsKey ( 1 ) ) ; <nl> - assertEquals ( TEST _ SIZE , results . get ( 1 ) . intValue ( ) ) ; <nl> - <nl> - assertEquals ( 1 , counter . get ( ) ) ; <nl> - RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; <nl> - } <nl> - <nl> @ Test <nl> public void closeClearingHandlerMessages ( ) throws InterruptedException , TimeoutException , ExecutionException { <nl> final int TEST _ SIZE = 10 ; <nl> @ @ - 349 , 9 + 268 , 9 @ @ public class NotificationsTest { <nl> } <nl> addHandlerMessages . await ( 1 , TimeUnit . SECONDS ) ; / / Wait for main thread to add update messages <nl> <nl> - / / Find the current Handler for the thread now . All message and references will be <nl> + / / Create a Handler for the thread now . All message and references for the notification handler will be <nl> / / cleared once we call close ( ) . <nl> - Handler threadHandler = realm . handler ; <nl> + Handler threadHandler = new Handler ( Looper . myLooper ( ) ) ; <nl> realm . close ( ) ; / / Close native resources + associated handlers . <nl> <nl> / / Looper now reads the update message from the main thread if the Handler was not <nl> @ @ - 359 , 12 + 278 , 13 @ @ public class NotificationsTest { <nl> / / If it works correctly . The looper will just block on an empty message queue . <nl> / / This is normal behavior but is bad for testing , so we add a custom quit message <nl> / / at the end so we can evaluate results faster . <nl> - threadHandler . post ( new Runnable ( ) { <nl> + / / 500 ms delay is to make sure the notification daemon thread gets time to send notification . <nl> + threadHandler . postDelayed ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> TestHelper . quitLooperOrFail ( ) ; <nl> } <nl> - } ) ; <nl> + } , 500 ) ; <nl> <nl> try { <nl> Looper . loop ( ) ; <nl> @ @ - 848 , 89 + 768 , 57 @ @ public class NotificationsTest { <nl> / / to advance to the latest version . We make sure in this test that all Realm listeners will be notified <nl> / / regardless of the presence of an async RealmResults that will delay the ` REALM _ CHANGE ` sometimes <nl> @ Test <nl> - public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { <nl> - final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger ( 0 ) ; <nl> - final AtomicInteger numberOfAsyncRealmResultsCallbackInvocation = new AtomicInteger ( 0 ) ; <nl> - final CountDownLatch signalTestFinished = new CountDownLatch ( 2 ) ; <nl> - final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> - final Realm [ ] realm = new Realm [ 1 ] ; <nl> - final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> - final Looper [ ] backgroundLooper = new Looper [ 1 ] ; <nl> - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> - executorService . submit ( new Runnable ( ) { <nl> + @ RunTestInLooperThread <nl> + public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification ( ) { <nl> + final Realm realm = looperThread . realm ; <nl> + final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAllAsync ( ) ; <nl> + final AtomicBoolean resultsListenerDone = new AtomicBoolean ( false ) ; <nl> + final AtomicBoolean realmListenerDone = new AtomicBoolean ( false ) ; <nl> + <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> + assertTrue ( dogs . load ( ) ) ; <nl> + assertEquals ( 0 , dogs . size ( ) ) ; <nl> + dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> - Looper . prepare ( ) ; <nl> - backgroundLooper [ 0 ] = Looper . myLooper ( ) ; <nl> - <nl> - try { <nl> - realm [ 0 ] = Realm . getInstance ( realmConfig ) ; <nl> - realm [ 0 ] . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> - @ Override <nl> - public void onChange ( Realm object ) { <nl> - RealmResults < Dog > dogs ; / / to keep it as a strong reference <nl> - switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { <nl> - case 1 : { <nl> - / / first commit <nl> - dogs = realm [ 0 ] . where ( Dog . class ) . findAllAsync ( ) ; <nl> - assertTrue ( dogs . load ( ) ) ; <nl> - dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> - @ Override <nl> - public void onChange ( RealmResults < Dog > object ) { <nl> - numberOfAsyncRealmResultsCallbackInvocation . incrementAndGet ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - new Thread ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - Realm realm = Realm . getInstance ( realmConfig ) ; <nl> - realm . beginTransaction ( ) ; <nl> - realm . createObject ( Dog . class ) ; <nl> - realm . commitTransaction ( ) ; <nl> - realm . close ( ) ; <nl> - signalTestFinished . countDown ( ) ; <nl> - } <nl> - } . start ( ) ; <nl> - break ; <nl> - } <nl> - case 2 : { <nl> - / / finish test <nl> - signalTestFinished . countDown ( ) ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - } ) ; <nl> + public void onChange ( RealmResults < Dog > results ) { <nl> + if ( dogs . size ( ) = = 2 ) { <nl> + / / Results has the latest changes <nl> + resultsListenerDone . set ( true ) ; <nl> + if ( realmListenerDone . get ( ) ) { <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } <nl> + } <nl> + } ) ; <nl> <nl> - realm [ 0 ] . handler . post ( new Runnable ( ) { <nl> + realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> + @ Override <nl> + public void onChange ( Realm element ) { <nl> + if ( dogs . size ( ) = = 1 ) { <nl> + / / Step 2 . Create the second dog <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> - realm [ 0 ] . beginTransaction ( ) ; <nl> - realm [ 0 ] . createObject ( Dog . class ) ; <nl> - realm [ 0 ] . commitTransaction ( ) ; <nl> + public void execute ( Realm realm ) { <nl> + realm . createObject ( Dog . class ) ; <nl> } <nl> } ) ; <nl> - <nl> - Looper . loop ( ) ; <nl> - <nl> - } catch ( Throwable e ) { <nl> - threadAssertionError [ 0 ] = e ; <nl> - <nl> - } finally { <nl> - if ( realm . length > 0 & & realm [ 0 ] ! = null ) { <nl> - realm [ 0 ] . close ( ) ; <nl> - } <nl> - signalClosedRealm . countDown ( ) ; <nl> - <nl> - if ( signalTestFinished . getCount ( ) > 0 ) { <nl> - signalTestFinished . countDown ( ) ; <nl> + } else if ( dogs . size ( ) = = 2 ) { <nl> + / / Realm listener can see the latest changes <nl> + realmListenerDone . set ( true ) ; <nl> + if ( resultsListenerDone . get ( ) ) { <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } <nl> } <nl> } ) ; <nl> <nl> - TestHelper . exitOrThrow ( executorService , signalTestFinished , signalClosedRealm , backgroundLooper , threadAssertionError ) ; <nl> + / / Step 1 . Create the first dog <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . createObject ( Dog . class ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> / / The presence of async RealmResults blocks any ` REALM _ CHANGE ` notification . We make sure in this test that all
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> index fbfda7f . . 422b8b8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 940 , 87 + 940 , 56 @ @ public class NotificationsTest { <nl> / / to advance to the latest version . We make sure in this test that all Realm listeners will be notified <nl> / / regardless of the presence of an async RealmObject that will delay the ` REALM _ CHANGE ` sometimes <nl> @ Test <nl> - public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { <nl> + @ RunTestInLooperThread <nl> + public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) { <nl> final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger ( 0 ) ; <nl> - final AtomicInteger numberOfAsyncRealmObjectCallbackInvocation = new AtomicInteger ( 0 ) ; <nl> - final CountDownLatch signalTestFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> - final Realm [ ] realm = new Realm [ 1 ] ; <nl> - final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; / / to catch both Exception & AssertionError <nl> - final Looper [ ] backgroundLooper = new Looper [ 1 ] ; <nl> - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> - executorService . submit ( new Runnable ( ) { <nl> + looperThread . realm . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> - Looper . prepare ( ) ; <nl> - backgroundLooper [ 0 ] = Looper . myLooper ( ) ; <nl> - <nl> - try { <nl> - realm [ 0 ] = Realm . getInstance ( realmConfig ) ; <nl> - realm [ 0 ] . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - Dog dog ; / / to keep it as a strong reference <nl> - switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { <nl> - case 1 : { <nl> - / / first commit <nl> - dog = realm [ 0 ] . where ( Dog . class ) . findFirstAsync ( ) ; <nl> - assertTrue ( dog . load ( ) ) ; <nl> - dog . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - numberOfAsyncRealmObjectCallbackInvocation . incrementAndGet ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - new Thread ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - Realm realm = Realm . getInstance ( realmConfig ) ; <nl> - realm . beginTransaction ( ) ; <nl> - realm . createObject ( Dog . class ) ; <nl> - realm . commitTransaction ( ) ; <nl> - realm . close ( ) ; <nl> - } <nl> - } . start ( ) ; <nl> - break ; <nl> - } <nl> - case 2 : { <nl> - / / finish test <nl> - signalTestFinished . countDown ( ) ; <nl> - break ; <nl> - } <nl> + public void onChange ( ) { <nl> + switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { <nl> + case 1 : { <nl> + / / first commit <nl> + Dog dog = looperThread . realm . where ( Dog . class ) . findFirstAsync ( ) ; <nl> + assertTrue ( dog . load ( ) ) ; <nl> + dog . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> } <nl> - } <nl> - } ) ; <nl> - <nl> - realm [ 0 ] . handler . post ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - realm [ 0 ] . beginTransaction ( ) ; <nl> - realm [ 0 ] . createObject ( Dog . class ) ; <nl> - realm [ 0 ] . commitTransaction ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - Looper . loop ( ) ; <nl> - <nl> - } catch ( Throwable e ) { <nl> - threadAssertionError [ 0 ] = e ; <nl> - <nl> - } finally { <nl> - if ( signalTestFinished . getCount ( ) > 0 ) { <nl> - signalTestFinished . countDown ( ) ; <nl> + } ) ; <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> + <nl> + new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm realm = Realm . getInstance ( looperThread . realmConfiguration ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . createObject ( Dog . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + realm . close ( ) ; <nl> + signalClosedRealm . countDown ( ) ; <nl> + } <nl> + } . start ( ) ; <nl> + break ; <nl> } <nl> - if ( realm . length > 0 & & realm [ 0 ] ! = null ) { <nl> - realm [ 0 ] . close ( ) ; <nl> + case 2 : { <nl> + / / finish test <nl> + TestHelper . awaitOrFail ( signalClosedRealm ) ; <nl> + looperThread . testComplete ( ) ; <nl> + break ; <nl> } <nl> - signalClosedRealm . countDown ( ) ; <nl> } <nl> } <nl> } ) ; <nl> <nl> - TestHelper . exitOrThrow ( executorService , signalTestFinished , signalClosedRealm , backgroundLooper , threadAssertionError ) ; <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + looperThread . realm . beginTransaction ( ) ; <nl> + looperThread . realm . createObject ( Dog . class ) ; <nl> + looperThread . realm . commitTransaction ( ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> @ Test

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 index f3bf35d . . 6d06152 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 247 , 87 + 247 , 6 @ @ public class NotificationsTest { 
 RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; 
 } 
 
 - / / @ Test 
 - / / FIXME : This test is being replaced by https : / / github . com / realm / realm - java / pull / 2319 / files 
 - public void realmResultsStableDuringLooperEvent ( ) throws InterruptedException , ExecutionException { 
 - final int TEST _ SIZE = 10 ; 
 - final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 - final AtomicBoolean isReady = new AtomicBoolean ( false ) ; 
 - final AtomicBoolean isRealmOpen = new AtomicBoolean ( true ) ; 
 - final Map < Integer , Integer > results = new ConcurrentHashMap < Integer , Integer > ( ) ; 
 - final Looper [ ] looper = new Looper [ 1 ] ; 
 - / / noinspection unchecked 
 - final RealmChangeListener < Realm > [ ] listener = new RealmChangeListener [ 1 ] ; 
 - 
 - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 - Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 - 
 - @ Override 
 - public Boolean call ( ) throws Exception { 
 - Looper . prepare ( ) ; 
 - looper [ 0 ] = Looper . myLooper ( ) ; 
 - Realm realm = null ; 
 - try { 
 - realm = Realm . getInstance ( realmConfig ) ; 
 - final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; 
 - assertEquals ( 0 , dogs . size ( ) ) ; 
 - listener [ 0 ] = new RealmChangeListener < Realm > ( ) { 
 - @ Override 
 - public void onChange ( Realm object ) { 
 - int c = counter . incrementAndGet ( ) ; 
 - results . put ( c , dogs . size ( ) ) ; 
 - } 
 - } ; 
 - realm . addChangeListener ( listener [ 0 ] ) ; 
 - isReady . set ( true ) ; 
 - Looper . loop ( ) ; 
 - } finally { 
 - if ( realm ! = null ) { 
 - realm . close ( ) ; 
 - isRealmOpen . set ( false ) ; 
 - } 
 - } 
 - return true ; 
 - } 
 - } ) ; 
 - 
 - / / Wait until the looper is started 
 - while ( ! isReady . get ( ) ) { 
 - Thread . sleep ( 5 ) ; 
 - } 
 - Thread . sleep ( 100 ) ; 
 - 
 - Realm realm = Realm . getInstance ( realmConfig ) ; 
 - realm . beginTransaction ( ) ; 
 - for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { 
 - Dog dog = realm . createObject ( Dog . class ) ; 
 - dog . setName ( " Rex " + i ) ; 
 - } 
 - realm . commitTransaction ( ) ; 
 - assertEquals ( TEST _ SIZE , realm . where ( Dog . class ) . count ( ) ) ; 
 - realm . close ( ) ; 
 - 
 - try { 
 - future . get ( 2 , TimeUnit . SECONDS ) ; 
 - } catch ( TimeoutException ignore ) { 
 - } finally { 
 - looper [ 0 ] . quit ( ) ; 
 - } 
 - 
 - / / Wait until the Looper thread is actually closed 
 - while ( isRealmOpen . get ( ) ) { 
 - Thread . sleep ( 5 ) ; 
 - } 
 - 
 - assertEquals ( 1 , results . size ( ) ) ; 
 - 
 - assertTrue ( results . containsKey ( 1 ) ) ; 
 - assertEquals ( TEST _ SIZE , results . get ( 1 ) . intValue ( ) ) ; 
 - 
 - assertEquals ( 1 , counter . get ( ) ) ; 
 - RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; 
 - } 
 - 
 @ Test 
 public void closeClearingHandlerMessages ( ) throws InterruptedException , TimeoutException , ExecutionException { 
 final int TEST _ SIZE = 10 ; 
 @ @ - 349 , 9 + 268 , 9 @ @ public class NotificationsTest { 
 } 
 addHandlerMessages . await ( 1 , TimeUnit . SECONDS ) ; / / Wait for main thread to add update messages 
 
 - / / Find the current Handler for the thread now . All message and references will be 
 + / / Create a Handler for the thread now . All message and references for the notification handler will be 
 / / cleared once we call close ( ) . 
 - Handler threadHandler = realm . handler ; 
 + Handler threadHandler = new Handler ( Looper . myLooper ( ) ) ; 
 realm . close ( ) ; / / Close native resources + associated handlers . 
 
 / / Looper now reads the update message from the main thread if the Handler was not 
 @ @ - 359 , 12 + 278 , 13 @ @ public class NotificationsTest { 
 / / If it works correctly . The looper will just block on an empty message queue . 
 / / This is normal behavior but is bad for testing , so we add a custom quit message 
 / / at the end so we can evaluate results faster . 
 - threadHandler . post ( new Runnable ( ) { 
 + / / 500 ms delay is to make sure the notification daemon thread gets time to send notification . 
 + threadHandler . postDelayed ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 TestHelper . quitLooperOrFail ( ) ; 
 } 
 - } ) ; 
 + } , 500 ) ; 
 
 try { 
 Looper . loop ( ) ; 
 @ @ - 848 , 89 + 768 , 57 @ @ public class NotificationsTest { 
 / / to advance to the latest version . We make sure in this test that all Realm listeners will be notified 
 / / regardless of the presence of an async RealmResults that will delay the ` REALM _ CHANGE ` sometimes 
 @ Test 
 - public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { 
 - final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger ( 0 ) ; 
 - final AtomicInteger numberOfAsyncRealmResultsCallbackInvocation = new AtomicInteger ( 0 ) ; 
 - final CountDownLatch signalTestFinished = new CountDownLatch ( 2 ) ; 
 - final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 - final Realm [ ] realm = new Realm [ 1 ] ; 
 - final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 - final Looper [ ] backgroundLooper = new Looper [ 1 ] ; 
 - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 - executorService . submit ( new Runnable ( ) { 
 + @ RunTestInLooperThread 
 + public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification ( ) { 
 + final Realm realm = looperThread . realm ; 
 + final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAllAsync ( ) ; 
 + final AtomicBoolean resultsListenerDone = new AtomicBoolean ( false ) ; 
 + final AtomicBoolean realmListenerDone = new AtomicBoolean ( false ) ; 
 + 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 + assertTrue ( dogs . load ( ) ) ; 
 + assertEquals ( 0 , dogs . size ( ) ) ; 
 + dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 - public void run ( ) { 
 - Looper . prepare ( ) ; 
 - backgroundLooper [ 0 ] = Looper . myLooper ( ) ; 
 - 
 - try { 
 - realm [ 0 ] = Realm . getInstance ( realmConfig ) ; 
 - realm [ 0 ] . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 - @ Override 
 - public void onChange ( Realm object ) { 
 - RealmResults < Dog > dogs ; / / to keep it as a strong reference 
 - switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { 
 - case 1 : { 
 - / / first commit 
 - dogs = realm [ 0 ] . where ( Dog . class ) . findAllAsync ( ) ; 
 - assertTrue ( dogs . load ( ) ) ; 
 - dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 - @ Override 
 - public void onChange ( RealmResults < Dog > object ) { 
 - numberOfAsyncRealmResultsCallbackInvocation . incrementAndGet ( ) ; 
 - } 
 - } ) ; 
 - 
 - new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - Realm realm = Realm . getInstance ( realmConfig ) ; 
 - realm . beginTransaction ( ) ; 
 - realm . createObject ( Dog . class ) ; 
 - realm . commitTransaction ( ) ; 
 - realm . close ( ) ; 
 - signalTestFinished . countDown ( ) ; 
 - } 
 - } . start ( ) ; 
 - break ; 
 - } 
 - case 2 : { 
 - / / finish test 
 - signalTestFinished . countDown ( ) ; 
 - break ; 
 - } 
 - } 
 - } 
 - } ) ; 
 + public void onChange ( RealmResults < Dog > results ) { 
 + if ( dogs . size ( ) = = 2 ) { 
 + / / Results has the latest changes 
 + resultsListenerDone . set ( true ) ; 
 + if ( realmListenerDone . get ( ) ) { 
 + looperThread . testComplete ( ) ; 
 + } 
 + } 
 + } 
 + } ) ; 
 
 - realm [ 0 ] . handler . post ( new Runnable ( ) { 
 + realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 + @ Override 
 + public void onChange ( Realm element ) { 
 + if ( dogs . size ( ) = = 1 ) { 
 + / / Step 2 . Create the second dog 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 @ Override 
 - public void run ( ) { 
 - realm [ 0 ] . beginTransaction ( ) ; 
 - realm [ 0 ] . createObject ( Dog . class ) ; 
 - realm [ 0 ] . commitTransaction ( ) ; 
 + public void execute ( Realm realm ) { 
 + realm . createObject ( Dog . class ) ; 
 } 
 } ) ; 
 - 
 - Looper . loop ( ) ; 
 - 
 - } catch ( Throwable e ) { 
 - threadAssertionError [ 0 ] = e ; 
 - 
 - } finally { 
 - if ( realm . length > 0 & & realm [ 0 ] ! = null ) { 
 - realm [ 0 ] . close ( ) ; 
 - } 
 - signalClosedRealm . countDown ( ) ; 
 - 
 - if ( signalTestFinished . getCount ( ) > 0 ) { 
 - signalTestFinished . countDown ( ) ; 
 + } else if ( dogs . size ( ) = = 2 ) { 
 + / / Realm listener can see the latest changes 
 + realmListenerDone . set ( true ) ; 
 + if ( resultsListenerDone . get ( ) ) { 
 + looperThread . testComplete ( ) ; 
 } 
 } 
 } 
 } ) ; 
 
 - TestHelper . exitOrThrow ( executorService , signalTestFinished , signalClosedRealm , backgroundLooper , threadAssertionError ) ; 
 + / / Step 1 . Create the first dog 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . createObject ( Dog . class ) ; 
 + } 
 + } ) ; 
 } 
 
 / / The presence of async RealmResults blocks any ` REALM _ CHANGE ` notification . We make sure in this test that all

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 index fbfda7f . . 422b8b8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 940 , 87 + 940 , 56 @ @ public class NotificationsTest { 
 / / to advance to the latest version . We make sure in this test that all Realm listeners will be notified 
 / / regardless of the presence of an async RealmObject that will delay the ` REALM _ CHANGE ` sometimes 
 @ Test 
 - public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { 
 + @ RunTestInLooperThread 
 + public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) { 
 final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger ( 0 ) ; 
 - final AtomicInteger numberOfAsyncRealmObjectCallbackInvocation = new AtomicInteger ( 0 ) ; 
 - final CountDownLatch signalTestFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 - final Realm [ ] realm = new Realm [ 1 ] ; 
 - final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; / / to catch both Exception & AssertionError 
 - final Looper [ ] backgroundLooper = new Looper [ 1 ] ; 
 - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 - executorService . submit ( new Runnable ( ) { 
 + looperThread . realm . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 - public void run ( ) { 
 - Looper . prepare ( ) ; 
 - backgroundLooper [ 0 ] = Looper . myLooper ( ) ; 
 - 
 - try { 
 - realm [ 0 ] = Realm . getInstance ( realmConfig ) ; 
 - realm [ 0 ] . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - Dog dog ; / / to keep it as a strong reference 
 - switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { 
 - case 1 : { 
 - / / first commit 
 - dog = realm [ 0 ] . where ( Dog . class ) . findFirstAsync ( ) ; 
 - assertTrue ( dog . load ( ) ) ; 
 - dog . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - numberOfAsyncRealmObjectCallbackInvocation . incrementAndGet ( ) ; 
 - } 
 - } ) ; 
 - 
 - new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - Realm realm = Realm . getInstance ( realmConfig ) ; 
 - realm . beginTransaction ( ) ; 
 - realm . createObject ( Dog . class ) ; 
 - realm . commitTransaction ( ) ; 
 - realm . close ( ) ; 
 - } 
 - } . start ( ) ; 
 - break ; 
 - } 
 - case 2 : { 
 - / / finish test 
 - signalTestFinished . countDown ( ) ; 
 - break ; 
 - } 
 + public void onChange ( ) { 
 + switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { 
 + case 1 : { 
 + / / first commit 
 + Dog dog = looperThread . realm . where ( Dog . class ) . findFirstAsync ( ) ; 
 + assertTrue ( dog . load ( ) ) ; 
 + dog . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 } 
 - } 
 - } ) ; 
 - 
 - realm [ 0 ] . handler . post ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - realm [ 0 ] . beginTransaction ( ) ; 
 - realm [ 0 ] . createObject ( Dog . class ) ; 
 - realm [ 0 ] . commitTransaction ( ) ; 
 - } 
 - } ) ; 
 - 
 - Looper . loop ( ) ; 
 - 
 - } catch ( Throwable e ) { 
 - threadAssertionError [ 0 ] = e ; 
 - 
 - } finally { 
 - if ( signalTestFinished . getCount ( ) > 0 ) { 
 - signalTestFinished . countDown ( ) ; 
 + } ) ; 
 + looperThread . keepStrongReference . add ( dog ) ; 
 + 
 + new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm realm = Realm . getInstance ( looperThread . realmConfiguration ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . createObject ( Dog . class ) ; 
 + realm . commitTransaction ( ) ; 
 + realm . close ( ) ; 
 + signalClosedRealm . countDown ( ) ; 
 + } 
 + } . start ( ) ; 
 + break ; 
 } 
 - if ( realm . length > 0 & & realm [ 0 ] ! = null ) { 
 - realm [ 0 ] . close ( ) ; 
 + case 2 : { 
 + / / finish test 
 + TestHelper . awaitOrFail ( signalClosedRealm ) ; 
 + looperThread . testComplete ( ) ; 
 + break ; 
 } 
 - signalClosedRealm . countDown ( ) ; 
 } 
 } 
 } ) ; 
 
 - TestHelper . exitOrThrow ( executorService , signalTestFinished , signalClosedRealm , backgroundLooper , threadAssertionError ) ; 
 + looperThread . postRunnable ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + looperThread . realm . beginTransaction ( ) ; 
 + looperThread . realm . createObject ( Dog . class ) ; 
 + looperThread . realm . commitTransaction ( ) ; 
 + } 
 + } ) ; 
 } 
 
 @ Test
