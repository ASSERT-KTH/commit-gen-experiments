BLEU SCORE: 0.02383853510228548

TEST MSG: fix ambiguous method calls warned by Java 8 compiler
GENERATED MSG: Collection ' s indexOf

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java <nl> index 8651633 . . 3a04a45 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java <nl> @ @ - 937 , 27 + 937 , 27 @ @ public class DynamicRealmObjectTests { <nl> break ; <nl> case SHORT : <nl> dObj . set ( AllJavaTypes . FIELD _ SHORT , ( short ) 42 ) ; <nl> - assertEquals ( Long . parseLong ( " 42 " ) , dObj . get ( AllJavaTypes . FIELD _ SHORT ) ) ; <nl> + assertEquals ( Long . parseLong ( " 42 " ) , dObj . < Long > get ( AllJavaTypes . FIELD _ SHORT ) . longValue ( ) ) ; <nl> break ; <nl> case INT : <nl> dObj . set ( AllJavaTypes . FIELD _ INT , 42 ) ; <nl> - assertEquals ( Long . parseLong ( " 42 " ) , dObj . get ( AllJavaTypes . FIELD _ INT ) ) ; <nl> + assertEquals ( Long . parseLong ( " 42 " ) , dObj . < Long > get ( AllJavaTypes . FIELD _ INT ) . longValue ( ) ) ; <nl> break ; <nl> case LONG : <nl> dObj . set ( AllJavaTypes . FIELD _ LONG , 42L ) ; <nl> - assertEquals ( Long . parseLong ( " 42 " ) , dObj . get ( AllJavaTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( Long . parseLong ( " 42 " ) , dObj . < Long > get ( AllJavaTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> break ; <nl> case BYTE : <nl> dObj . set ( AllJavaTypes . FIELD _ BYTE , ( byte ) 4 ) ; <nl> - assertEquals ( Long . parseLong ( " 4 " ) , dObj . get ( AllJavaTypes . FIELD _ BYTE ) ) ; <nl> + assertEquals ( Long . parseLong ( " 4 " ) , dObj . < Long > get ( AllJavaTypes . FIELD _ BYTE ) . longValue ( ) ) ; <nl> break ; <nl> case FLOAT : <nl> dObj . set ( AllJavaTypes . FIELD _ FLOAT , 1 . 23f ) ; <nl> - assertEquals ( Float . parseFloat ( " 1 . 23 " ) , dObj . get ( AllJavaTypes . FIELD _ FLOAT ) ) ; <nl> + assertEquals ( Float . parseFloat ( " 1 . 23 " ) , dObj . < Float > get ( AllJavaTypes . FIELD _ FLOAT ) , Float . MIN _ NORMAL ) ; <nl> break ; <nl> case DOUBLE : <nl> dObj . set ( AllJavaTypes . FIELD _ DOUBLE , 1 . 234d ) ; <nl> - assertEquals ( Double . parseDouble ( " 1 . 234 " ) , dObj . get ( AllJavaTypes . FIELD _ DOUBLE ) ) ; <nl> + assertEquals ( Double . parseDouble ( " 1 . 234 " ) , dObj . < Double > get ( AllJavaTypes . FIELD _ DOUBLE ) , Double . MIN _ NORMAL ) ; <nl> break ; <nl> case STRING : <nl> dObj . set ( AllJavaTypes . FIELD _ STRING , " str " ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> index 400f618 . . b98b5ed 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> @ @ - 476 , 27 + 476 , 27 @ @ public class DynamicRealmTests { <nl> @ Override <nl> public void onChange ( RealmResults < DynamicRealmObject > object ) { <nl> assertEquals ( " data 0 " , realmResults1 . get ( 0 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 3L , realmResults1 . get ( 0 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 3L , realmResults1 . get ( 0 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 0 " , realmResults1 . get ( 1 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 2L , realmResults1 . get ( 1 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 2L , realmResults1 . get ( 1 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 0 " , realmResults1 . get ( 2 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 0L , realmResults1 . get ( 2 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 0L , realmResults1 . get ( 2 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> <nl> assertEquals ( " data 1 " , realmResults1 . get ( 3 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 4L , realmResults1 . get ( 3 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 4L , realmResults1 . get ( 3 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 1 " , realmResults1 . get ( 4 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 3L , realmResults1 . get ( 4 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 3L , realmResults1 . get ( 4 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 1 " , realmResults1 . get ( 5 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 1L , realmResults1 . get ( 5 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 1L , realmResults1 . get ( 5 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 1 " , realmResults1 . get ( 6 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 0L , realmResults1 . get ( 6 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 0L , realmResults1 . get ( 6 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> <nl> assertEquals ( " data 2 " , realmResults1 . get ( 7 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 4L , realmResults1 . get ( 7 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 4L , realmResults1 . get ( 7 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 2 " , realmResults1 . get ( 8 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 2L , realmResults1 . get ( 8 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 2L , realmResults1 . get ( 8 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 2 " , realmResults1 . get ( 9 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 1L , realmResults1 . get ( 9 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 1L , realmResults1 . get ( 9 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> <nl> signalCallbackDone . run ( ) ; <nl> } <nl> @ @ - 506 , 27 + 506 , 27 @ @ public class DynamicRealmTests { <nl> @ Override <nl> public void onChange ( RealmResults < DynamicRealmObject > object ) { <nl> assertEquals ( " data 2 " , realmResults2 . get ( 0 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 1L , realmResults2 . get ( 0 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 1L , realmResults2 . get ( 0 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 2 " , realmResults2 . get ( 1 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 2L , realmResults2 . get ( 1 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 2L , realmResults2 . get ( 1 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 2 " , realmResults2 . get ( 2 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 4L , realmResults2 . get ( 2 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 4L , realmResults2 . get ( 2 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> <nl> assertEquals ( " data 1 " , realmResults2 . get ( 3 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 0L , realmResults2 . get ( 3 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 0L , realmResults2 . get ( 3 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 1 " , realmResults2 . get ( 4 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 1L , realmResults2 . get ( 4 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 1L , realmResults2 . get ( 4 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 1 " , realmResults2 . get ( 5 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 3L , realmResults2 . get ( 5 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 3L , realmResults2 . get ( 5 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 1 " , realmResults2 . get ( 6 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 4L , realmResults2 . get ( 6 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 4L , realmResults2 . get ( 6 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> <nl> assertEquals ( " data 0 " , realmResults2 . get ( 7 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 0L , realmResults2 . get ( 7 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 0L , realmResults2 . get ( 7 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 0 " , realmResults2 . get ( 8 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 2L , realmResults2 . get ( 8 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 2L , realmResults2 . get ( 8 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> assertEquals ( " data 0 " , realmResults2 . get ( 9 ) . get ( AllTypes . FIELD _ STRING ) ) ; <nl> - assertEquals ( 3L , realmResults2 . get ( 9 ) . get ( AllTypes . FIELD _ LONG ) ) ; <nl> + assertEquals ( 3L , realmResults2 . get ( 9 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; <nl> <nl> signalCallbackDone . run ( ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java <nl> index 6d1e857 . . 33e47f8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class JNIQueryTest extends TestCase { <nl> assertEquals ( 14 + 16 , cnt ) ; <nl> <nl> double avg = query . averageInt ( 0 ) ; <nl> - assertEquals ( 15 . 0 , avg ) ; <nl> + assertEquals ( 15 . 0 , avg , Double . MIN _ NORMAL ) ; <nl> <nl> / / TODO : Add tests with all parameters <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIRowTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIRowTest . java <nl> index 8b9c613 . . 3d8902e 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIRowTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIRowTest . java <nl> @ @ - 48 , 8 + 48 , 8 @ @ public class JNIRowTest extends TestCase { <nl> <nl> assertEquals ( " abc " , row . getString ( 0 ) ) ; <nl> assertEquals ( 3 , row . getLong ( 1 ) ) ; <nl> - assertEquals ( ( float ) 1 . 2 , row . getFloat ( 2 ) , 0 . 0001 ) ; <nl> - assertEquals ( 1 . 3 , row . getDouble ( 3 ) ) ; <nl> + assertEquals ( 1 . 2F , row . getFloat ( 2 ) , Float . MIN _ NORMAL ) ; <nl> + assertEquals ( 1 . 3 , row . getDouble ( 3 ) , Double . MIN _ NORMAL ) ; <nl> assertEquals ( true , row . getBoolean ( 4 ) ) ; <nl> assertEquals ( new Date ( 0 ) , row . getDate ( 5 ) ) ; <nl> MoreAsserts . assertEquals ( data , row . getBinaryByteArray ( 6 ) ) ; <nl> @ @ - 67 , 8 + 67 , 8 @ @ public class JNIRowTest extends TestCase { <nl> <nl> assertEquals ( " a " , row . getString ( 0 ) ) ; <nl> assertEquals ( 1 , row . getLong ( 1 ) ) ; <nl> - assertEquals ( ( float ) 8 . 8 , row . getFloat ( 2 ) , 0 . 0001 ) ; <nl> - assertEquals ( 9 . 9 , row . getDouble ( 3 ) ) ; <nl> + assertEquals ( 8 . 8F , row . getFloat ( 2 ) , Float . MIN _ NORMAL ) ; <nl> + assertEquals ( 9 . 9 , row . getDouble ( 3 ) , Double . MIN _ NORMAL ) ; <nl> assertEquals ( false , row . getBoolean ( 4 ) ) ; <nl> assertEquals ( new Date ( 10000 ) , row . getDate ( 5 ) ) ; <nl> MoreAsserts . assertEquals ( newData , row . getBinaryByteArray ( 6 ) ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> index bb2f61f . . 923f7d6 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> @ @ - 153 , 19 + 153 , 19 @ @ public class SortTest { <nl> <nl> assertEquals ( " Adam " , results . get ( 0 ) . getColumnString ( ) ) ; <nl> assertEquals ( 4 , results . get ( 0 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 2 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 0 ) ) ; <nl> + assertEquals ( 0 , results . getCollection ( ) . indexOf ( 2 ) ) ; <nl> <nl> assertEquals ( " Adam " , results . get ( 1 ) . getColumnString ( ) ) ; <nl> assertEquals ( 5 , results . get ( 1 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 0 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 1 ) ) ; <nl> + assertEquals ( 1 , results . getCollection ( ) . indexOf ( 0 ) ) ; <nl> <nl> assertEquals ( " Adam " , results . get ( 2 ) . getColumnString ( ) ) ; <nl> assertEquals ( 5 , results . get ( 2 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 3 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 2 ) ) ; <nl> + assertEquals ( 2 , results . getCollection ( ) . indexOf ( 3 ) ) ; <nl> <nl> assertEquals ( " Brian " , results . get ( 3 ) . getColumnString ( ) ) ; <nl> assertEquals ( 4 , results . get ( 3 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 1 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 3 ) ) ; <nl> + assertEquals ( 3 , results . getCollection ( ) . indexOf ( 1 ) ) ; <nl> } <nl> <nl> private void checkSortTwoFieldsIntString ( RealmResults < AllTypes > results ) { <nl> @ @ - 179 , 19 + 179 , 19 @ @ public class SortTest { <nl> <nl> assertEquals ( " Adam " , results . get ( 0 ) . getColumnString ( ) ) ; <nl> assertEquals ( 4 , results . get ( 0 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 2 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 0 ) ) ; <nl> + assertEquals ( 0 , results . getCollection ( ) . indexOf ( 2 ) ) ; <nl> <nl> assertEquals ( " Brian " , results . get ( 1 ) . getColumnString ( ) ) ; <nl> assertEquals ( 4 , results . get ( 1 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 1 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 1 ) ) ; <nl> + assertEquals ( 1 , results . getCollection ( ) . indexOf ( 1 ) ) ; <nl> <nl> assertEquals ( " Adam " , results . get ( 2 ) . getColumnString ( ) ) ; <nl> assertEquals ( 5 , results . get ( 2 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 0 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 2 ) ) ; <nl> + assertEquals ( 2 , results . getCollection ( ) . indexOf ( 0 ) ) ; <nl> <nl> assertEquals ( " Adam " , results . get ( 3 ) . getColumnString ( ) ) ; <nl> assertEquals ( 5 , results . get ( 3 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 3 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 3 ) ) ; <nl> + assertEquals ( 3 , results . getCollection ( ) . indexOf ( 3 ) ) ; <nl> } <nl> <nl> private void checkSortTwoFieldsIntAscendingStringDescending ( RealmResults < AllTypes > results ) { <nl> @ @ - 205 , 19 + 205 , 19 @ @ public class SortTest { <nl> <nl> assertEquals ( " Brian " , results . get ( 0 ) . getColumnString ( ) ) ; <nl> assertEquals ( 4 , results . get ( 0 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 1 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 0 ) ) ; <nl> + assertEquals ( 0 , results . getCollection ( ) . indexOf ( 1 ) ) ; <nl> <nl> assertEquals ( " Adam " , results . get ( 1 ) . getColumnString ( ) ) ; <nl> assertEquals ( 4 , results . get ( 1 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 2 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 1 ) ) ; <nl> + assertEquals ( 1 , results . getCollection ( ) . indexOf ( 2 ) ) ; <nl> <nl> assertEquals ( " Adam " , results . get ( 2 ) . getColumnString ( ) ) ; <nl> assertEquals ( 5 , results . get ( 2 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 0 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 2 ) ) ; <nl> + assertEquals ( 2 , results . getCollection ( ) . indexOf ( 0 ) ) ; <nl> <nl> assertEquals ( " Adam " , results . get ( 3 ) . getColumnString ( ) ) ; <nl> assertEquals ( 5 , results . get ( 3 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 3 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 3 ) ) ; <nl> + assertEquals ( 3 , results . getCollection ( ) . indexOf ( 3 ) ) ; <nl> } <nl> <nl> private void checkSortTwoFieldsStringAscendingIntDescending ( RealmResults < AllTypes > results ) { <nl> @ @ - 231 , 19 + 231 , 19 @ @ public class SortTest { <nl> <nl> assertEquals ( " Adam " , results . get ( 0 ) . getColumnString ( ) ) ; <nl> assertEquals ( 5 , results . get ( 0 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 0 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 0 ) ) ; <nl> + assertEquals ( 0 , results . getCollection ( ) . indexOf ( 0 ) ) ; <nl> <nl> assertEquals ( " Adam " , results . get ( 1 ) . getColumnString ( ) ) ; <nl> assertEquals ( 5 , results . get ( 1 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 3 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 1 ) ) ; <nl> + assertEquals ( 1 , results . getCollection ( ) . indexOf ( 3 ) ) ; <nl> <nl> assertEquals ( " Adam " , results . get ( 2 ) . getColumnString ( ) ) ; <nl> assertEquals ( 4 , results . get ( 2 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 2 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 2 ) ) ; <nl> + assertEquals ( 2 , results . getCollection ( ) . indexOf ( 2 ) ) ; <nl> <nl> assertEquals ( " Brian " , results . get ( 3 ) . getColumnString ( ) ) ; <nl> assertEquals ( 4 , results . get ( 3 ) . getColumnLong ( ) ) ; <nl> - assertEquals ( 1 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 3 ) ) ; <nl> + assertEquals ( 3 , results . getCollection ( ) . indexOf ( 1 ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index f71a316 . . c084f77 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 221 , 7 + 221 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenGetFinalizerPtr ( JNIEnv <nl> return reinterpret _ cast < jlong > ( & finalize _ notification _ token ) ; <nl> } <nl> <nl> - JNIEXPORT jlong JNICALL <nl> + JNIEXPORT void JNICALL <nl> Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenClose ( JNIEnv * , jclass , jlong native _ ptr ) <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> @ @ - 240 , 3 + 240 , 31 @ @ Java _ io _ realm _ internal _ Collection _ nativeWhere ( JNIEnv * env , jclass , jlong native _ <nl> } CATCH _ STD ( ) <nl> return 0 ; <nl> } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeIndexOf ( JNIEnv * env , jclass , jlong native _ ptr , jlong row _ native _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto row = reinterpret _ cast < Row * > ( row _ native _ ptr ) ; <nl> + <nl> + return static _ cast < jlong > ( results - > index _ of ( * row ) ) ; <nl> + } CATCH _ STD ( ) <nl> + return npos ; <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeIndexOfBySourceRowIndex ( JNIEnv * env , jclass , jlong native _ ptr , <nl> + jlong source _ row _ index ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto index = static _ cast < size _ t > ( source _ row _ index ) ; <nl> + <nl> + return static _ cast < jlong > ( results - > index _ of ( index ) ) ; <nl> + } CATCH _ STD ( ) <nl> + return npos ; <nl> + <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index 0787c1e . . 4ba3bdf 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 182 , 6 + 182 , 16 @ @ public class Collection implements NativeObject { <nl> return nativeContains ( nativePtr , row . getNativePtr ( ) ) ; <nl> } <nl> <nl> + public int indexOf ( UncheckedRow row ) { <nl> + long index = nativeIndexOf ( nativePtr , row . getNativePtr ( ) ) ; <nl> + return ( index > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) index ; <nl> + } <nl> + <nl> + public int indexOf ( long sourceRowIndex ) { <nl> + long index = nativeIndexOfBySourceRowIndex ( nativePtr , sourceRowIndex ) ; <nl> + return ( index > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) index ; <nl> + } <nl> + <nl> public void addListener ( Listener listener ) { <nl> if ( ! listeners . contains ( listener ) ) { <nl> listeners . add ( listener ) ; <nl> @ @ - 235 , 6 + 245 , 8 @ @ public class Collection implements NativeObject { <nl> private static native long nativeSort ( long nativePtr , long sortDescNativePtr ) ; <nl> private native long nativeAddListener ( long nativePtr ) ; <nl> private static native long nativeNotificationTokenGetFinalizerPtr ( ) ; <nl> - private static native long nativeNotificationTokenClose ( long nativePtr ) ; <nl> + private static native void nativeNotificationTokenClose ( long nativePtr ) ; <nl> private static native long nativeWhere ( long nativePtr ) ; <nl> + private static native long nativeIndexOf ( long nativePtr , long rowNativePtr ) ; <nl> + private static native long nativeIndexOfBySourceRowIndex ( long nativePtr , long sourceRowIndex ) ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java 
 index 8651633 . . 3a04a45 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmObjectTests . java 
 @ @ - 937 , 27 + 937 , 27 @ @ public class DynamicRealmObjectTests { 
 break ; 
 case SHORT : 
 dObj . set ( AllJavaTypes . FIELD _ SHORT , ( short ) 42 ) ; 
 - assertEquals ( Long . parseLong ( " 42 " ) , dObj . get ( AllJavaTypes . FIELD _ SHORT ) ) ; 
 + assertEquals ( Long . parseLong ( " 42 " ) , dObj . < Long > get ( AllJavaTypes . FIELD _ SHORT ) . longValue ( ) ) ; 
 break ; 
 case INT : 
 dObj . set ( AllJavaTypes . FIELD _ INT , 42 ) ; 
 - assertEquals ( Long . parseLong ( " 42 " ) , dObj . get ( AllJavaTypes . FIELD _ INT ) ) ; 
 + assertEquals ( Long . parseLong ( " 42 " ) , dObj . < Long > get ( AllJavaTypes . FIELD _ INT ) . longValue ( ) ) ; 
 break ; 
 case LONG : 
 dObj . set ( AllJavaTypes . FIELD _ LONG , 42L ) ; 
 - assertEquals ( Long . parseLong ( " 42 " ) , dObj . get ( AllJavaTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( Long . parseLong ( " 42 " ) , dObj . < Long > get ( AllJavaTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 break ; 
 case BYTE : 
 dObj . set ( AllJavaTypes . FIELD _ BYTE , ( byte ) 4 ) ; 
 - assertEquals ( Long . parseLong ( " 4 " ) , dObj . get ( AllJavaTypes . FIELD _ BYTE ) ) ; 
 + assertEquals ( Long . parseLong ( " 4 " ) , dObj . < Long > get ( AllJavaTypes . FIELD _ BYTE ) . longValue ( ) ) ; 
 break ; 
 case FLOAT : 
 dObj . set ( AllJavaTypes . FIELD _ FLOAT , 1 . 23f ) ; 
 - assertEquals ( Float . parseFloat ( " 1 . 23 " ) , dObj . get ( AllJavaTypes . FIELD _ FLOAT ) ) ; 
 + assertEquals ( Float . parseFloat ( " 1 . 23 " ) , dObj . < Float > get ( AllJavaTypes . FIELD _ FLOAT ) , Float . MIN _ NORMAL ) ; 
 break ; 
 case DOUBLE : 
 dObj . set ( AllJavaTypes . FIELD _ DOUBLE , 1 . 234d ) ; 
 - assertEquals ( Double . parseDouble ( " 1 . 234 " ) , dObj . get ( AllJavaTypes . FIELD _ DOUBLE ) ) ; 
 + assertEquals ( Double . parseDouble ( " 1 . 234 " ) , dObj . < Double > get ( AllJavaTypes . FIELD _ DOUBLE ) , Double . MIN _ NORMAL ) ; 
 break ; 
 case STRING : 
 dObj . set ( AllJavaTypes . FIELD _ STRING , " str " ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 index 400f618 . . b98b5ed 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 @ @ - 476 , 27 + 476 , 27 @ @ public class DynamicRealmTests { 
 @ Override 
 public void onChange ( RealmResults < DynamicRealmObject > object ) { 
 assertEquals ( " data 0 " , realmResults1 . get ( 0 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 3L , realmResults1 . get ( 0 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 3L , realmResults1 . get ( 0 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 0 " , realmResults1 . get ( 1 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 2L , realmResults1 . get ( 1 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 2L , realmResults1 . get ( 1 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 0 " , realmResults1 . get ( 2 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 0L , realmResults1 . get ( 2 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 0L , realmResults1 . get ( 2 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 
 assertEquals ( " data 1 " , realmResults1 . get ( 3 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 4L , realmResults1 . get ( 3 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 4L , realmResults1 . get ( 3 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 1 " , realmResults1 . get ( 4 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 3L , realmResults1 . get ( 4 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 3L , realmResults1 . get ( 4 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 1 " , realmResults1 . get ( 5 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 1L , realmResults1 . get ( 5 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 1L , realmResults1 . get ( 5 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 1 " , realmResults1 . get ( 6 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 0L , realmResults1 . get ( 6 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 0L , realmResults1 . get ( 6 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 
 assertEquals ( " data 2 " , realmResults1 . get ( 7 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 4L , realmResults1 . get ( 7 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 4L , realmResults1 . get ( 7 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 2 " , realmResults1 . get ( 8 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 2L , realmResults1 . get ( 8 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 2L , realmResults1 . get ( 8 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 2 " , realmResults1 . get ( 9 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 1L , realmResults1 . get ( 9 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 1L , realmResults1 . get ( 9 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 
 signalCallbackDone . run ( ) ; 
 } 
 @ @ - 506 , 27 + 506 , 27 @ @ public class DynamicRealmTests { 
 @ Override 
 public void onChange ( RealmResults < DynamicRealmObject > object ) { 
 assertEquals ( " data 2 " , realmResults2 . get ( 0 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 1L , realmResults2 . get ( 0 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 1L , realmResults2 . get ( 0 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 2 " , realmResults2 . get ( 1 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 2L , realmResults2 . get ( 1 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 2L , realmResults2 . get ( 1 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 2 " , realmResults2 . get ( 2 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 4L , realmResults2 . get ( 2 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 4L , realmResults2 . get ( 2 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 
 assertEquals ( " data 1 " , realmResults2 . get ( 3 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 0L , realmResults2 . get ( 3 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 0L , realmResults2 . get ( 3 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 1 " , realmResults2 . get ( 4 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 1L , realmResults2 . get ( 4 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 1L , realmResults2 . get ( 4 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 1 " , realmResults2 . get ( 5 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 3L , realmResults2 . get ( 5 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 3L , realmResults2 . get ( 5 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 1 " , realmResults2 . get ( 6 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 4L , realmResults2 . get ( 6 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 4L , realmResults2 . get ( 6 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 
 assertEquals ( " data 0 " , realmResults2 . get ( 7 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 0L , realmResults2 . get ( 7 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 0L , realmResults2 . get ( 7 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 0 " , realmResults2 . get ( 8 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 2L , realmResults2 . get ( 8 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 2L , realmResults2 . get ( 8 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 assertEquals ( " data 0 " , realmResults2 . get ( 9 ) . get ( AllTypes . FIELD _ STRING ) ) ; 
 - assertEquals ( 3L , realmResults2 . get ( 9 ) . get ( AllTypes . FIELD _ LONG ) ) ; 
 + assertEquals ( 3L , realmResults2 . get ( 9 ) . < Long > get ( AllTypes . FIELD _ LONG ) . longValue ( ) ) ; 
 
 signalCallbackDone . run ( ) ; 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java 
 index 6d1e857 . . 33e47f8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class JNIQueryTest extends TestCase { 
 assertEquals ( 14 + 16 , cnt ) ; 
 
 double avg = query . averageInt ( 0 ) ; 
 - assertEquals ( 15 . 0 , avg ) ; 
 + assertEquals ( 15 . 0 , avg , Double . MIN _ NORMAL ) ; 
 
 / / TODO : Add tests with all parameters 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIRowTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIRowTest . java 
 index 8b9c613 . . 3d8902e 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIRowTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIRowTest . java 
 @ @ - 48 , 8 + 48 , 8 @ @ public class JNIRowTest extends TestCase { 
 
 assertEquals ( " abc " , row . getString ( 0 ) ) ; 
 assertEquals ( 3 , row . getLong ( 1 ) ) ; 
 - assertEquals ( ( float ) 1 . 2 , row . getFloat ( 2 ) , 0 . 0001 ) ; 
 - assertEquals ( 1 . 3 , row . getDouble ( 3 ) ) ; 
 + assertEquals ( 1 . 2F , row . getFloat ( 2 ) , Float . MIN _ NORMAL ) ; 
 + assertEquals ( 1 . 3 , row . getDouble ( 3 ) , Double . MIN _ NORMAL ) ; 
 assertEquals ( true , row . getBoolean ( 4 ) ) ; 
 assertEquals ( new Date ( 0 ) , row . getDate ( 5 ) ) ; 
 MoreAsserts . assertEquals ( data , row . getBinaryByteArray ( 6 ) ) ; 
 @ @ - 67 , 8 + 67 , 8 @ @ public class JNIRowTest extends TestCase { 
 
 assertEquals ( " a " , row . getString ( 0 ) ) ; 
 assertEquals ( 1 , row . getLong ( 1 ) ) ; 
 - assertEquals ( ( float ) 8 . 8 , row . getFloat ( 2 ) , 0 . 0001 ) ; 
 - assertEquals ( 9 . 9 , row . getDouble ( 3 ) ) ; 
 + assertEquals ( 8 . 8F , row . getFloat ( 2 ) , Float . MIN _ NORMAL ) ; 
 + assertEquals ( 9 . 9 , row . getDouble ( 3 ) , Double . MIN _ NORMAL ) ; 
 assertEquals ( false , row . getBoolean ( 4 ) ) ; 
 assertEquals ( new Date ( 10000 ) , row . getDate ( 5 ) ) ; 
 MoreAsserts . assertEquals ( newData , row . getBinaryByteArray ( 6 ) ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 index bb2f61f . . 923f7d6 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 @ @ - 153 , 19 + 153 , 19 @ @ public class SortTest { 
 
 assertEquals ( " Adam " , results . get ( 0 ) . getColumnString ( ) ) ; 
 assertEquals ( 4 , results . get ( 0 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 2 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 0 ) ) ; 
 + assertEquals ( 0 , results . getCollection ( ) . indexOf ( 2 ) ) ; 
 
 assertEquals ( " Adam " , results . get ( 1 ) . getColumnString ( ) ) ; 
 assertEquals ( 5 , results . get ( 1 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 0 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 1 ) ) ; 
 + assertEquals ( 1 , results . getCollection ( ) . indexOf ( 0 ) ) ; 
 
 assertEquals ( " Adam " , results . get ( 2 ) . getColumnString ( ) ) ; 
 assertEquals ( 5 , results . get ( 2 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 3 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 2 ) ) ; 
 + assertEquals ( 2 , results . getCollection ( ) . indexOf ( 3 ) ) ; 
 
 assertEquals ( " Brian " , results . get ( 3 ) . getColumnString ( ) ) ; 
 assertEquals ( 4 , results . get ( 3 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 1 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 3 ) ) ; 
 + assertEquals ( 3 , results . getCollection ( ) . indexOf ( 1 ) ) ; 
 } 
 
 private void checkSortTwoFieldsIntString ( RealmResults < AllTypes > results ) { 
 @ @ - 179 , 19 + 179 , 19 @ @ public class SortTest { 
 
 assertEquals ( " Adam " , results . get ( 0 ) . getColumnString ( ) ) ; 
 assertEquals ( 4 , results . get ( 0 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 2 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 0 ) ) ; 
 + assertEquals ( 0 , results . getCollection ( ) . indexOf ( 2 ) ) ; 
 
 assertEquals ( " Brian " , results . get ( 1 ) . getColumnString ( ) ) ; 
 assertEquals ( 4 , results . get ( 1 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 1 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 1 ) ) ; 
 + assertEquals ( 1 , results . getCollection ( ) . indexOf ( 1 ) ) ; 
 
 assertEquals ( " Adam " , results . get ( 2 ) . getColumnString ( ) ) ; 
 assertEquals ( 5 , results . get ( 2 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 0 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 2 ) ) ; 
 + assertEquals ( 2 , results . getCollection ( ) . indexOf ( 0 ) ) ; 
 
 assertEquals ( " Adam " , results . get ( 3 ) . getColumnString ( ) ) ; 
 assertEquals ( 5 , results . get ( 3 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 3 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 3 ) ) ; 
 + assertEquals ( 3 , results . getCollection ( ) . indexOf ( 3 ) ) ; 
 } 
 
 private void checkSortTwoFieldsIntAscendingStringDescending ( RealmResults < AllTypes > results ) { 
 @ @ - 205 , 19 + 205 , 19 @ @ public class SortTest { 
 
 assertEquals ( " Brian " , results . get ( 0 ) . getColumnString ( ) ) ; 
 assertEquals ( 4 , results . get ( 0 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 1 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 0 ) ) ; 
 + assertEquals ( 0 , results . getCollection ( ) . indexOf ( 1 ) ) ; 
 
 assertEquals ( " Adam " , results . get ( 1 ) . getColumnString ( ) ) ; 
 assertEquals ( 4 , results . get ( 1 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 2 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 1 ) ) ; 
 + assertEquals ( 1 , results . getCollection ( ) . indexOf ( 2 ) ) ; 
 
 assertEquals ( " Adam " , results . get ( 2 ) . getColumnString ( ) ) ; 
 assertEquals ( 5 , results . get ( 2 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 0 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 2 ) ) ; 
 + assertEquals ( 2 , results . getCollection ( ) . indexOf ( 0 ) ) ; 
 
 assertEquals ( " Adam " , results . get ( 3 ) . getColumnString ( ) ) ; 
 assertEquals ( 5 , results . get ( 3 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 3 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 3 ) ) ; 
 + assertEquals ( 3 , results . getCollection ( ) . indexOf ( 3 ) ) ; 
 } 
 
 private void checkSortTwoFieldsStringAscendingIntDescending ( RealmResults < AllTypes > results ) { 
 @ @ - 231 , 19 + 231 , 19 @ @ public class SortTest { 
 
 assertEquals ( " Adam " , results . get ( 0 ) . getColumnString ( ) ) ; 
 assertEquals ( 5 , results . get ( 0 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 0 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 0 ) ) ; 
 + assertEquals ( 0 , results . getCollection ( ) . indexOf ( 0 ) ) ; 
 
 assertEquals ( " Adam " , results . get ( 1 ) . getColumnString ( ) ) ; 
 assertEquals ( 5 , results . get ( 1 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 3 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 1 ) ) ; 
 + assertEquals ( 1 , results . getCollection ( ) . indexOf ( 3 ) ) ; 
 
 assertEquals ( " Adam " , results . get ( 2 ) . getColumnString ( ) ) ; 
 assertEquals ( 4 , results . get ( 2 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 2 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 2 ) ) ; 
 + assertEquals ( 2 , results . getCollection ( ) . indexOf ( 2 ) ) ; 
 
 assertEquals ( " Brian " , results . get ( 3 ) . getColumnString ( ) ) ; 
 assertEquals ( 4 , results . get ( 3 ) . getColumnLong ( ) ) ; 
 - assertEquals ( 1 , ( ( TableView ) results . getTableOrView ( ) ) . getSourceRowIndex ( 3 ) ) ; 
 + assertEquals ( 3 , results . getCollection ( ) . indexOf ( 1 ) ) ; 
 } 
 
 @ Test 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index f71a316 . . c084f77 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 221 , 7 + 221 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenGetFinalizerPtr ( JNIEnv 
 return reinterpret _ cast < jlong > ( & finalize _ notification _ token ) ; 
 } 
 
 - JNIEXPORT jlong JNICALL 
 + JNIEXPORT void JNICALL 
 Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenClose ( JNIEnv * , jclass , jlong native _ ptr ) 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 @ @ - 240 , 3 + 240 , 31 @ @ Java _ io _ realm _ internal _ Collection _ nativeWhere ( JNIEnv * env , jclass , jlong native _ 
 } CATCH _ STD ( ) 
 return 0 ; 
 } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeIndexOf ( JNIEnv * env , jclass , jlong native _ ptr , jlong row _ native _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto row = reinterpret _ cast < Row * > ( row _ native _ ptr ) ; 
 + 
 + return static _ cast < jlong > ( results - > index _ of ( * row ) ) ; 
 + } CATCH _ STD ( ) 
 + return npos ; 
 + } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeIndexOfBySourceRowIndex ( JNIEnv * env , jclass , jlong native _ ptr , 
 + jlong source _ row _ index ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto index = static _ cast < size _ t > ( source _ row _ index ) ; 
 + 
 + return static _ cast < jlong > ( results - > index _ of ( index ) ) ; 
 + } CATCH _ STD ( ) 
 + return npos ; 
 + 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index 0787c1e . . 4ba3bdf 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 182 , 6 + 182 , 16 @ @ public class Collection implements NativeObject { 
 return nativeContains ( nativePtr , row . getNativePtr ( ) ) ; 
 } 
 
 + public int indexOf ( UncheckedRow row ) { 
 + long index = nativeIndexOf ( nativePtr , row . getNativePtr ( ) ) ; 
 + return ( index > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) index ; 
 + } 
 + 
 + public int indexOf ( long sourceRowIndex ) { 
 + long index = nativeIndexOfBySourceRowIndex ( nativePtr , sourceRowIndex ) ; 
 + return ( index > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) index ; 
 + } 
 + 
 public void addListener ( Listener listener ) { 
 if ( ! listeners . contains ( listener ) ) { 
 listeners . add ( listener ) ; 
 @ @ - 235 , 6 + 245 , 8 @ @ public class Collection implements NativeObject { 
 private static native long nativeSort ( long nativePtr , long sortDescNativePtr ) ; 
 private native long nativeAddListener ( long nativePtr ) ; 
 private static native long nativeNotificationTokenGetFinalizerPtr ( ) ; 
 - private static native long nativeNotificationTokenClose ( long nativePtr ) ; 
 + private static native void nativeNotificationTokenClose ( long nativePtr ) ; 
 private static native long nativeWhere ( long nativePtr ) ; 
 + private static native long nativeIndexOf ( long nativePtr , long rowNativePtr ) ; 
 + private static native long nativeIndexOfBySourceRowIndex ( long nativePtr , long sourceRowIndex ) ; 
 }
