BLEU SCORE: 0.018738883683389617

TEST MSG: Non - nullable types are a subclass of nullable types .
GENERATED MSG: Refactor and javadoc

TEST DIFF (one line): diff - - git a / realm / kotlin - extensions / src / main / kotlin / io / realm / kotlin / RealmQueryExtensions . kt b / realm / kotlin - extensions / src / main / kotlin / io / realm / kotlin / RealmQueryExtensions . kt <nl> index b223597 . . 6b7f3c7 100644 <nl> - - - a / realm / kotlin - extensions / src / main / kotlin / io / realm / kotlin / RealmQueryExtensions . kt <nl> + + + b / realm / kotlin - extensions / src / main / kotlin / io / realm / kotlin / RealmQueryExtensions . kt <nl> @ @ - 32 , 7 + 32 , 7 @ @ import java . util . * <nl> * empty . <nl> * / <nl> fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < String ? > , <nl> + value : Array < out String ? > , <nl> casing : Case = Case . SENSITIVE ) : RealmQuery < T > { <nl> return this . ` in ` ( propertyName , value , casing ) <nl> } <nl> @ @ - 48 , 7 + 48 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> * empty . <nl> * / <nl> fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Byte ? > ) : RealmQuery < T > { <nl> + value : Array < out Byte ? > ) : RealmQuery < T > { <nl> return this . ` in ` ( propertyName , value ) <nl> } <nl> <nl> @ @ - 62 , 7 + 62 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> * empty . <nl> * / <nl> fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Short ? > ) : RealmQuery < T > { <nl> + value : Array < out Short ? > ) : RealmQuery < T > { <nl> return this . ` in ` ( propertyName , value ) <nl> } <nl> <nl> @ @ - 76 , 7 + 76 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> * or empty . <nl> * / <nl> fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Int ? > ) : RealmQuery < T > { <nl> + value : Array < out Int ? > ) : RealmQuery < T > { <nl> return this . ` in ` ( propertyName , value ) <nl> } <nl> <nl> @ @ - 90 , 7 + 90 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> * empty . <nl> * / <nl> fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Long ? > ) : RealmQuery < T > { <nl> + value : Array < out Long ? > ) : RealmQuery < T > { <nl> return this . ` in ` ( propertyName , value ) <nl> } <nl> <nl> @ @ - 104 , 7 + 104 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> * empty . <nl> * / <nl> fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Double ? > ) : RealmQuery < T > { <nl> + value : Array < out Double ? > ) : RealmQuery < T > { <nl> return this . ` in ` ( propertyName , value ) <nl> } <nl> <nl> @ @ - 119 , 7 + 119 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> * empty . <nl> * / <nl> fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Float ? > ) : RealmQuery < T > { <nl> + value : Array < out Float ? > ) : RealmQuery < T > { <nl> return this . ` in ` ( propertyName , value ) <nl> } <nl> <nl> @ @ - 134 , 7 + 134 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> * or empty . <nl> * / <nl> fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Boolean ? > ) : RealmQuery < T > { <nl> + value : Array < out Boolean ? > ) : RealmQuery < T > { <nl> return this . ` in ` ( propertyName , value ) <nl> } <nl> <nl> @ @ - 148 , 147 + 148 , 6 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> * empty . <nl> * / <nl> fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Date ? > ) : RealmQuery < T > { <nl> + value : Array < out Date ? > ) : RealmQuery < T > { <nl> return this . ` in ` ( propertyName , value ) <nl> } <nl> - <nl> - / * * <nl> - * In comparison . This allows you to test if objects match any value in an array of values . <nl> - * <nl> - * @ param fieldName the field to compare . <nl> - * @ param values array of values to compare with and it cannot be null or empty . <nl> - * @ param casing how casing is handled . [ Case . INSENSITIVE ] works only for the Latin - 1 characters . <nl> - * @ return the query object . <nl> - * @ throws java . lang . IllegalArgumentException if the field isn ' t a String field or ` values ` is ` null ` or <nl> - * empty . <nl> - * / <nl> - @ JvmName ( " nonNullOneOf " ) <nl> - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < String > , <nl> - casing : Case = Case . SENSITIVE ) : RealmQuery < T > { <nl> - return this . ` in ` ( propertyName , value , casing ) <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * In comparison . This allows you to test if objects match any value in an array of values . <nl> - * <nl> - * @ param fieldName the field to compare . <nl> - * @ param values array of values to compare with and it cannot be null or empty . <nl> - * @ return the query object . <nl> - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Byte field or ` values ` is ` null ` or <nl> - * empty . <nl> - * / <nl> - @ JvmName ( " nonNullOneOf " ) <nl> - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Byte > ) : RealmQuery < T > { <nl> - return this . ` in ` ( propertyName , value ) <nl> - } <nl> - <nl> - / * * <nl> - * In comparison . This allows you to test if objects match any value in an array of values . <nl> - * <nl> - * @ param fieldName the field to compare . <nl> - * @ param values array of values to compare with and it cannot be null or empty . <nl> - * @ return the query object . <nl> - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Short field or ` values ` is ` null ` or <nl> - * empty . <nl> - * / <nl> - @ JvmName ( " nonNullOneOf " ) <nl> - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Short > ) : RealmQuery < T > { <nl> - return this . ` in ` ( propertyName , value ) <nl> - } <nl> - <nl> - / * * <nl> - * In comparison . This allows you to test if objects match any value in an array of values . <nl> - * <nl> - * @ param fieldName the field to compare . <nl> - * @ param values array of values to compare with and it cannot be null or empty . <nl> - * @ return the query object . <nl> - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Integer field or ` values ` is ` null ` <nl> - * or empty . <nl> - * / <nl> - @ JvmName ( " nonNullOneOf " ) <nl> - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Int > ) : RealmQuery < T > { <nl> - return this . ` in ` ( propertyName , value ) <nl> - } <nl> - <nl> - / * * <nl> - * In comparison . This allows you to test if objects match any value in an array of values . <nl> - * <nl> - * @ param fieldName the field to compare . <nl> - * @ param values array of values to compare with and it cannot be null or empty . <nl> - * @ return the query object . <nl> - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Long field or ` values ` is ` null ` or <nl> - * empty . <nl> - * / <nl> - @ JvmName ( " nonNullOneOf " ) <nl> - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Long > ) : RealmQuery < T > { <nl> - return this . ` in ` ( propertyName , value ) <nl> - } <nl> - <nl> - / * * <nl> - * In comparison . This allows you to test if objects match any value in an array of values . <nl> - * <nl> - * @ param fieldName the field to compare . <nl> - * @ param values array of values to compare with and it cannot be null or empty . <nl> - * @ return the query object . <nl> - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Double field or ` values ` is ` null ` or <nl> - * empty . <nl> - * / <nl> - @ JvmName ( " nonNullOneOf " ) <nl> - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Double > ) : RealmQuery < T > { <nl> - return this . ` in ` ( propertyName , value ) <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * In comparison . This allows you to test if objects match any value in an array of values . <nl> - * <nl> - * @ param fieldName the field to compare . <nl> - * @ param values array of values to compare with and it cannot be null or empty . <nl> - * @ return the query object . <nl> - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Float field or ` values ` is ` null ` or <nl> - * empty . <nl> - * / <nl> - @ JvmName ( " nonNullOneOf " ) <nl> - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Float > ) : RealmQuery < T > { <nl> - return this . ` in ` ( propertyName , value ) <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * In comparison . This allows you to test if objects match any value in an array of values . <nl> - * <nl> - * @ param fieldName the field to compare . <nl> - * @ param values array of values to compare with and it cannot be null or empty . <nl> - * @ return the query object . <nl> - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Boolean field or ` values ` is ` null ` <nl> - * or empty . <nl> - * / <nl> - @ JvmName ( " nonNullOneOf " ) <nl> - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Boolean > ) : RealmQuery < T > { <nl> - return this . ` in ` ( propertyName , value ) <nl> - } <nl> - <nl> - / * * <nl> - * In comparison . This allows you to test if objects match any value in an array of values . <nl> - * <nl> - * @ param fieldName the field to compare . <nl> - * @ param values array of values to compare with and it cannot be null or empty . <nl> - * @ return the query object . <nl> - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Date field or ` values ` is ` null ` or <nl> - * empty . <nl> - * / <nl> - @ JvmName ( " nonNullOneOf " ) <nl> - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , <nl> - value : Array < Date > ) : RealmQuery < T > { <nl> - return this . ` in ` ( propertyName , value ) <nl> - } <nl> -
NEAREST DIFF (one line): diff - - git a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmList . java b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmList . java <nl> index fbe573b . . eda2279 100644 <nl> - - - a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmList . java <nl> + + + b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmList . java <nl> @ @ - 17 , 9 + 17 , 13 @ @ import io . realm . Table ; <nl> import io . realm . TableOrView ; <nl> import io . realm . WriteTransaction ; <nl> <nl> - public class RealmList < T > extends AbstractList < T > { <nl> + / * * <nl> + * <nl> + * @ param < E > The type of objects to be persisted in this list <nl> + * / <nl> + public class RealmList < E > extends AbstractList < E > { <nl> <nl> - private Class < T > type ; <nl> + private Class < E > type ; <nl> <nl> private Context context ; <nl> <nl> @ @ - 28 , 12 + 32 , 22 @ @ public class RealmList < T > extends AbstractList < T > { <nl> <nl> private TableOrView dataStore = null ; <nl> <nl> - <nl> - public RealmList ( Class < T > type , Context context ) { <nl> + / * * <nl> + * <nl> + * @ param type <nl> + * @ param context <nl> + * / <nl> + RealmList ( Class < E > type , Context context ) { <nl> this ( type , context , context . getFilesDir ( ) + " / default . realm " ) ; <nl> } <nl> <nl> - public RealmList ( Class < T > type , Context context , String filePath ) { <nl> + / * * <nl> + * <nl> + * @ param type <nl> + * @ param context <nl> + * @ param filePath <nl> + * / <nl> + RealmList ( Class < E > type , Context context , String filePath ) { <nl> this . context = context ; <nl> this . sg = new SharedGroup ( filePath ) ; <nl> <nl> @ @ - 84 , 7 + 98 , 7 @ @ public class RealmList < T > extends AbstractList < T > { <nl> <nl> } <nl> <nl> - RealmList ( RealmList < T > realm , TableOrView dataStore ) { <nl> + RealmList ( RealmList < E > realm , TableOrView dataStore ) { <nl> this . context = realm . context ; <nl> this . type = realm . type ; <nl> this . dataStore = dataStore ; <nl> @ @ - 118 , 11 + 132 , 16 @ @ public class RealmList < T > extends AbstractList < T > { <nl> this . dataStore = this . transaction . getTable ( this . type . getName ( ) ) ; <nl> } <nl> <nl> - public T create ( ) { <nl> + / * * <nl> + * Instantiates and adds a new object to the list <nl> + * <nl> + * @ return The new object <nl> + * / <nl> + public E create ( ) { <nl> try { <nl> - T obj = ProxyBuilder . forClass ( this . type ) <nl> + E obj = ProxyBuilder . forClass ( this . type ) <nl> . dexCache ( this . context . getDir ( " dx " , Context . MODE _ PRIVATE ) ) <nl> - . handler ( new RealmProxy < T > ( this , - 1 ) ) <nl> + . handler ( new RealmProxy < E > ( this , - 1 ) ) <nl> . build ( ) ; <nl> return obj ; <nl> } catch ( IOException e ) { <nl> @ @ - 131 , 12 + 150 , 22 @ @ public class RealmList < T > extends AbstractList < T > { <nl> return null ; <nl> } <nl> <nl> - public RealmQuery < T > where ( ) { <nl> - return new RealmQuery < T > ( this ) ; <nl> + / * * <nl> + * Returns a RealmQuery , used to filter this collection <nl> + * <nl> + * @ return A RealmQuery to filter the list <nl> + * / <nl> + public RealmQuery < E > where ( ) { <nl> + return new RealmQuery < E > ( this ) ; <nl> } <nl> <nl> + / * * <nl> + * <nl> + * @ param rowIndex The index position where the object should be inserted <nl> + * @ param element The object to insert <nl> + * / <nl> @ Override <nl> - public void add ( int rowIndex , T element ) { <nl> + public void add ( int rowIndex , E element ) { <nl> <nl> Field [ ] fields = element . getClass ( ) . getSuperclass ( ) . getDeclaredFields ( ) ; <nl> <nl> @ @ - 175 , 14 + 204 , 25 @ @ public class RealmList < T > extends AbstractList < T > { <nl> <nl> } <nl> <nl> + / * * <nl> + * <nl> + * @ param rowIndex The index of the object to be removed <nl> + * @ return Always returns null , as the object is no longer backed by Realm <nl> + * / <nl> @ Override <nl> - public T remove ( int rowIndex ) { <nl> + public E remove ( int rowIndex ) { <nl> this . dataStore . remove ( rowIndex ) ; <nl> return null ; <nl> } <nl> <nl> + / * * <nl> + * <nl> + * @ param rowIndex The index position where the object should be inserted <nl> + * @ param element The object to insert <nl> + * @ return The inserted object <nl> + * / <nl> @ Override <nl> - public T set ( int rowIndex , T element ) { <nl> + public E set ( int rowIndex , E element ) { <nl> <nl> Field [ ] fields = element . getClass ( ) . getDeclaredFields ( ) ; <nl> <nl> @ @ - 236 , 14 + 276 , 17 @ @ public class RealmList < T > extends AbstractList < T > { <nl> <nl> } <nl> <nl> - <nl> - <nl> + / * * <nl> + * <nl> + * @ param rowIndex The objects index in the list <nl> + * @ return An object of type T , which is backed by Realm <nl> + * / <nl> @ Override <nl> - public T get ( int rowIndex ) { <nl> + public E get ( int rowIndex ) { <nl> try { <nl> - T obj = ProxyBuilder . forClass ( this . type ) <nl> + E obj = ProxyBuilder . forClass ( this . type ) <nl> . dexCache ( this . context . getDir ( " dx " , Context . MODE _ PRIVATE ) ) <nl> - . handler ( new RealmProxy < T > ( this , rowIndex ) ) <nl> + . handler ( new RealmProxy < E > ( this , rowIndex ) ) <nl> . build ( ) ; <nl> ( ( RealmProxy ) ProxyBuilder . getInvocationHandler ( obj ) ) . realmSetRowIndex ( rowIndex ) ; <nl> return obj ; <nl> @ @ - 253 , 6 + 296 , 10 @ @ public class RealmList < T > extends AbstractList < T > { <nl> return null ; <nl> } <nl> <nl> + / * * <nl> + * <nl> + * @ return The number of elements in this RealmList <nl> + * / <nl> @ Override <nl> public int size ( ) { <nl> return ( ( Long ) this . dataStore . size ( ) ) . intValue ( ) ; <nl> diff - - git a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmProxy . java b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmProxy . java <nl> index dc8478a . . 8179055 100644 <nl> - - - a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmProxy . java <nl> + + + b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmProxy . java <nl> @ @ - 10 , 12 + 10 , 10 @ @ import java . util . Date ; <nl> <nl> import io . realm . TableOrView ; <nl> <nl> - public class RealmProxy < T > implements InvocationHandler { <nl> + class RealmProxy implements InvocationHandler { <nl> <nl> private RealmList realm ; <nl> private long rowIndex ; <nl> - private Object proxied ; <nl> - <nl> <nl> public RealmProxy ( RealmList realm , long rowIndex ) { <nl> this . realm = realm ; <nl> @ @ - 104 , 5 + 102 , 4 @ @ public class RealmProxy < T > implements InvocationHandler { <nl> return ProxyBuilder . callSuper ( proxy , m , args ) ; <nl> } <nl> <nl> - <nl> } <nl> diff - - git a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmQuery . java b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmQuery . java <nl> index 3fa87c1 . . d489fcf 100644 <nl> - - - a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmQuery . java <nl> + + + b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmQuery . java <nl> @ @ - 3 , 19 + 3 , 22 @ @ package io . realm . typed ; <nl> <nl> import java . util . Date ; <nl> import java . util . HashMap ; <nl> - import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import io . realm . TableOrView ; <nl> import io . realm . TableQuery ; <nl> <nl> - public class RealmQuery < T > { <nl> + / * * <nl> + * <nl> + * @ param < E > The type of objects to be queried <nl> + * / <nl> + public class RealmQuery < E > { <nl> <nl> - private RealmList < T > realm ; <nl> + private RealmList < E > realm ; <nl> private TableQuery query ; <nl> private Map < String , Integer > columns = new HashMap < String , Integer > ( ) ; <nl> <nl> - public RealmQuery ( RealmList < T > realmList ) { <nl> + public RealmQuery ( RealmList < E > realmList ) { <nl> this . realm = realmList ; <nl> <nl> TableOrView dataStore = realmList . getDataStore ( ) ; <nl> @ @ - 26 , 49 + 29 , 45 @ @ public class RealmQuery < T > { <nl> } <nl> } <nl> <nl> - public static < T > RealmQuery < T > where ( List < T > realm ) { <nl> - return new RealmQuery < T > ( ( RealmList < T > ) realm ) ; <nl> - } <nl> - <nl> / / Equal <nl> <nl> - public RealmQuery < T > equalTo ( String columnName , String value ) { <nl> + public RealmQuery < E > equalTo ( String columnName , String value ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . equalTo ( columnIndex , value ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > equalTo ( String columnName , int value ) { <nl> + public RealmQuery < E > equalTo ( String columnName , int value ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . equalTo ( columnIndex , value ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > equalTo ( String columnName , long value ) { <nl> + public RealmQuery < E > equalTo ( String columnName , long value ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . equalTo ( columnIndex , value ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > equalTo ( String columnName , double value ) { <nl> + public RealmQuery < E > equalTo ( String columnName , double value ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . equalTo ( columnIndex , value ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > equalTo ( String columnName , float value ) { <nl> + public RealmQuery < E > equalTo ( String columnName , float value ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . equalTo ( columnIndex , value ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > equalTo ( String columnName , boolean value ) { <nl> + public RealmQuery < E > equalTo ( String columnName , boolean value ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . equalTo ( columnIndex , value ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > equalTo ( String columnName , Date value ) { <nl> + public RealmQuery < E > equalTo ( String columnName , Date value ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . equalTo ( columnIndex , value ) ; <nl> return this ; <nl> @ @ - 76 , 31 + 75 , 31 @ @ public class RealmQuery < T > { <nl> <nl> / / Between <nl> <nl> - public RealmQuery < T > between ( String columnName , int from , int to ) { <nl> + public RealmQuery < E > between ( String columnName , int from , int to ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . between ( columnIndex , from , to ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > between ( String columnName , long from , long to ) { <nl> + public RealmQuery < E > between ( String columnName , long from , long to ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . between ( columnIndex , from , to ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > between ( String columnName , double from , double to ) { <nl> + public RealmQuery < E > between ( String columnName , double from , double to ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . between ( columnIndex , from , to ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > between ( String columnName , float from , float to ) { <nl> + public RealmQuery < E > between ( String columnName , float from , float to ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . between ( columnIndex , from , to ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > between ( String columnName , Date from , Date to ) { <nl> + public RealmQuery < E > between ( String columnName , Date from , Date to ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . between ( columnIndex , from , to ) ; <nl> return this ; <nl> @ @ - 109 , 13 + 108 , 13 @ @ public class RealmQuery < T > { <nl> <nl> / / Contains <nl> <nl> - public RealmQuery < T > contains ( String columnName , String value ) { <nl> + public RealmQuery < E > contains ( String columnName , String value ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . contains ( columnIndex , value ) ; <nl> return this ; <nl> } <nl> <nl> - public RealmQuery < T > contains ( String columnName , String value , boolean caseSensitive ) { <nl> + public RealmQuery < E > contains ( String columnName , String value , boolean caseSensitive ) { <nl> int columnIndex = columns . get ( columnName ) ; <nl> this . query . contains ( columnIndex , value , caseSensitive ) ; <nl> return this ; <nl> @ @ - 141 , 8 + 140 , 8 @ @ public class RealmQuery < T > { <nl> <nl> / / Execute <nl> <nl> - public RealmList < T > findAll ( ) { <nl> - return new RealmList < T > ( realm , query . findAll ( ) ) ; <nl> + public RealmList < E > findAll ( ) { <nl> + return new RealmList < E > ( realm , query . findAll ( ) ) ; <nl> } <nl> <nl> } <nl> diff - - git a / RealmAndroid / lib / src / main / java / io / realm / typed / Realms . java b / RealmAndroid / lib / src / main / java / io / realm / typed / Realms . java <nl> index 43dabf6 . . 412ddb1 100644 <nl> - - - a / RealmAndroid / lib / src / main / java / io / realm / typed / Realms . java <nl> + + + b / RealmAndroid / lib / src / main / java / io / realm / typed / Realms . java <nl> @ @ - 4 , 9 + 4 , 18 @ @ import android . content . Context ; <nl> <nl> public class Realms { <nl> <nl> + private Realms ( ) { } <nl> <nl> - public static < T > RealmList < T > list ( Context context , Class < T > type ) { <nl> - return new RealmList < T > ( type , context ) ; <nl> + / * * <nl> + * Returns a RealmList which is backed by the default realm , it might already contain data . <nl> + * <nl> + * @ param context The Context from which the filesystem path is derived <nl> + * @ param type The definition of the object which is to be accesed <nl> + * @ param < E > The type which should be accessible from this list <nl> + * @ return A list backed by Realm <nl> + * / <nl> + public static < E > RealmList < E > list ( Context context , Class < E > type ) { <nl> + return new RealmList < E > ( type , context ) ; <nl> } <nl> <nl> }

TEST DIFF:
diff - - git a / realm / kotlin - extensions / src / main / kotlin / io / realm / kotlin / RealmQueryExtensions . kt b / realm / kotlin - extensions / src / main / kotlin / io / realm / kotlin / RealmQueryExtensions . kt 
 index b223597 . . 6b7f3c7 100644 
 - - - a / realm / kotlin - extensions / src / main / kotlin / io / realm / kotlin / RealmQueryExtensions . kt 
 + + + b / realm / kotlin - extensions / src / main / kotlin / io / realm / kotlin / RealmQueryExtensions . kt 
 @ @ - 32 , 7 + 32 , 7 @ @ import java . util . * 
 * empty . 
 * / 
 fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < String ? > , 
 + value : Array < out String ? > , 
 casing : Case = Case . SENSITIVE ) : RealmQuery < T > { 
 return this . ` in ` ( propertyName , value , casing ) 
 } 
 @ @ - 48 , 7 + 48 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 * empty . 
 * / 
 fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Byte ? > ) : RealmQuery < T > { 
 + value : Array < out Byte ? > ) : RealmQuery < T > { 
 return this . ` in ` ( propertyName , value ) 
 } 
 
 @ @ - 62 , 7 + 62 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 * empty . 
 * / 
 fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Short ? > ) : RealmQuery < T > { 
 + value : Array < out Short ? > ) : RealmQuery < T > { 
 return this . ` in ` ( propertyName , value ) 
 } 
 
 @ @ - 76 , 7 + 76 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 * or empty . 
 * / 
 fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Int ? > ) : RealmQuery < T > { 
 + value : Array < out Int ? > ) : RealmQuery < T > { 
 return this . ` in ` ( propertyName , value ) 
 } 
 
 @ @ - 90 , 7 + 90 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 * empty . 
 * / 
 fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Long ? > ) : RealmQuery < T > { 
 + value : Array < out Long ? > ) : RealmQuery < T > { 
 return this . ` in ` ( propertyName , value ) 
 } 
 
 @ @ - 104 , 7 + 104 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 * empty . 
 * / 
 fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Double ? > ) : RealmQuery < T > { 
 + value : Array < out Double ? > ) : RealmQuery < T > { 
 return this . ` in ` ( propertyName , value ) 
 } 
 
 @ @ - 119 , 7 + 119 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 * empty . 
 * / 
 fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Float ? > ) : RealmQuery < T > { 
 + value : Array < out Float ? > ) : RealmQuery < T > { 
 return this . ` in ` ( propertyName , value ) 
 } 
 
 @ @ - 134 , 7 + 134 , 7 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 * or empty . 
 * / 
 fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Boolean ? > ) : RealmQuery < T > { 
 + value : Array < out Boolean ? > ) : RealmQuery < T > { 
 return this . ` in ` ( propertyName , value ) 
 } 
 
 @ @ - 148 , 147 + 148 , 6 @ @ fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 * empty . 
 * / 
 fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Date ? > ) : RealmQuery < T > { 
 + value : Array < out Date ? > ) : RealmQuery < T > { 
 return this . ` in ` ( propertyName , value ) 
 } 
 - 
 - / * * 
 - * In comparison . This allows you to test if objects match any value in an array of values . 
 - * 
 - * @ param fieldName the field to compare . 
 - * @ param values array of values to compare with and it cannot be null or empty . 
 - * @ param casing how casing is handled . [ Case . INSENSITIVE ] works only for the Latin - 1 characters . 
 - * @ return the query object . 
 - * @ throws java . lang . IllegalArgumentException if the field isn ' t a String field or ` values ` is ` null ` or 
 - * empty . 
 - * / 
 - @ JvmName ( " nonNullOneOf " ) 
 - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < String > , 
 - casing : Case = Case . SENSITIVE ) : RealmQuery < T > { 
 - return this . ` in ` ( propertyName , value , casing ) 
 - } 
 - 
 - 
 - / * * 
 - * In comparison . This allows you to test if objects match any value in an array of values . 
 - * 
 - * @ param fieldName the field to compare . 
 - * @ param values array of values to compare with and it cannot be null or empty . 
 - * @ return the query object . 
 - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Byte field or ` values ` is ` null ` or 
 - * empty . 
 - * / 
 - @ JvmName ( " nonNullOneOf " ) 
 - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Byte > ) : RealmQuery < T > { 
 - return this . ` in ` ( propertyName , value ) 
 - } 
 - 
 - / * * 
 - * In comparison . This allows you to test if objects match any value in an array of values . 
 - * 
 - * @ param fieldName the field to compare . 
 - * @ param values array of values to compare with and it cannot be null or empty . 
 - * @ return the query object . 
 - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Short field or ` values ` is ` null ` or 
 - * empty . 
 - * / 
 - @ JvmName ( " nonNullOneOf " ) 
 - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Short > ) : RealmQuery < T > { 
 - return this . ` in ` ( propertyName , value ) 
 - } 
 - 
 - / * * 
 - * In comparison . This allows you to test if objects match any value in an array of values . 
 - * 
 - * @ param fieldName the field to compare . 
 - * @ param values array of values to compare with and it cannot be null or empty . 
 - * @ return the query object . 
 - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Integer field or ` values ` is ` null ` 
 - * or empty . 
 - * / 
 - @ JvmName ( " nonNullOneOf " ) 
 - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Int > ) : RealmQuery < T > { 
 - return this . ` in ` ( propertyName , value ) 
 - } 
 - 
 - / * * 
 - * In comparison . This allows you to test if objects match any value in an array of values . 
 - * 
 - * @ param fieldName the field to compare . 
 - * @ param values array of values to compare with and it cannot be null or empty . 
 - * @ return the query object . 
 - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Long field or ` values ` is ` null ` or 
 - * empty . 
 - * / 
 - @ JvmName ( " nonNullOneOf " ) 
 - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Long > ) : RealmQuery < T > { 
 - return this . ` in ` ( propertyName , value ) 
 - } 
 - 
 - / * * 
 - * In comparison . This allows you to test if objects match any value in an array of values . 
 - * 
 - * @ param fieldName the field to compare . 
 - * @ param values array of values to compare with and it cannot be null or empty . 
 - * @ return the query object . 
 - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Double field or ` values ` is ` null ` or 
 - * empty . 
 - * / 
 - @ JvmName ( " nonNullOneOf " ) 
 - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Double > ) : RealmQuery < T > { 
 - return this . ` in ` ( propertyName , value ) 
 - } 
 - 
 - 
 - / * * 
 - * In comparison . This allows you to test if objects match any value in an array of values . 
 - * 
 - * @ param fieldName the field to compare . 
 - * @ param values array of values to compare with and it cannot be null or empty . 
 - * @ return the query object . 
 - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Float field or ` values ` is ` null ` or 
 - * empty . 
 - * / 
 - @ JvmName ( " nonNullOneOf " ) 
 - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Float > ) : RealmQuery < T > { 
 - return this . ` in ` ( propertyName , value ) 
 - } 
 - 
 - 
 - / * * 
 - * In comparison . This allows you to test if objects match any value in an array of values . 
 - * 
 - * @ param fieldName the field to compare . 
 - * @ param values array of values to compare with and it cannot be null or empty . 
 - * @ return the query object . 
 - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Boolean field or ` values ` is ` null ` 
 - * or empty . 
 - * / 
 - @ JvmName ( " nonNullOneOf " ) 
 - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Boolean > ) : RealmQuery < T > { 
 - return this . ` in ` ( propertyName , value ) 
 - } 
 - 
 - / * * 
 - * In comparison . This allows you to test if objects match any value in an array of values . 
 - * 
 - * @ param fieldName the field to compare . 
 - * @ param values array of values to compare with and it cannot be null or empty . 
 - * @ return the query object . 
 - * @ throws java . lang . IllegalArgumentException if the field isn ' t a Date field or ` values ` is ` null ` or 
 - * empty . 
 - * / 
 - @ JvmName ( " nonNullOneOf " ) 
 - fun < T : RealmModel > RealmQuery < T > . oneOf ( propertyName : String , 
 - value : Array < Date > ) : RealmQuery < T > { 
 - return this . ` in ` ( propertyName , value ) 
 - } 
 -

NEAREST DIFF:
diff - - git a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmList . java b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmList . java 
 index fbe573b . . eda2279 100644 
 - - - a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmList . java 
 + + + b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmList . java 
 @ @ - 17 , 9 + 17 , 13 @ @ import io . realm . Table ; 
 import io . realm . TableOrView ; 
 import io . realm . WriteTransaction ; 
 
 - public class RealmList < T > extends AbstractList < T > { 
 + / * * 
 + * 
 + * @ param < E > The type of objects to be persisted in this list 
 + * / 
 + public class RealmList < E > extends AbstractList < E > { 
 
 - private Class < T > type ; 
 + private Class < E > type ; 
 
 private Context context ; 
 
 @ @ - 28 , 12 + 32 , 22 @ @ public class RealmList < T > extends AbstractList < T > { 
 
 private TableOrView dataStore = null ; 
 
 - 
 - public RealmList ( Class < T > type , Context context ) { 
 + / * * 
 + * 
 + * @ param type 
 + * @ param context 
 + * / 
 + RealmList ( Class < E > type , Context context ) { 
 this ( type , context , context . getFilesDir ( ) + " / default . realm " ) ; 
 } 
 
 - public RealmList ( Class < T > type , Context context , String filePath ) { 
 + / * * 
 + * 
 + * @ param type 
 + * @ param context 
 + * @ param filePath 
 + * / 
 + RealmList ( Class < E > type , Context context , String filePath ) { 
 this . context = context ; 
 this . sg = new SharedGroup ( filePath ) ; 
 
 @ @ - 84 , 7 + 98 , 7 @ @ public class RealmList < T > extends AbstractList < T > { 
 
 } 
 
 - RealmList ( RealmList < T > realm , TableOrView dataStore ) { 
 + RealmList ( RealmList < E > realm , TableOrView dataStore ) { 
 this . context = realm . context ; 
 this . type = realm . type ; 
 this . dataStore = dataStore ; 
 @ @ - 118 , 11 + 132 , 16 @ @ public class RealmList < T > extends AbstractList < T > { 
 this . dataStore = this . transaction . getTable ( this . type . getName ( ) ) ; 
 } 
 
 - public T create ( ) { 
 + / * * 
 + * Instantiates and adds a new object to the list 
 + * 
 + * @ return The new object 
 + * / 
 + public E create ( ) { 
 try { 
 - T obj = ProxyBuilder . forClass ( this . type ) 
 + E obj = ProxyBuilder . forClass ( this . type ) 
 . dexCache ( this . context . getDir ( " dx " , Context . MODE _ PRIVATE ) ) 
 - . handler ( new RealmProxy < T > ( this , - 1 ) ) 
 + . handler ( new RealmProxy < E > ( this , - 1 ) ) 
 . build ( ) ; 
 return obj ; 
 } catch ( IOException e ) { 
 @ @ - 131 , 12 + 150 , 22 @ @ public class RealmList < T > extends AbstractList < T > { 
 return null ; 
 } 
 
 - public RealmQuery < T > where ( ) { 
 - return new RealmQuery < T > ( this ) ; 
 + / * * 
 + * Returns a RealmQuery , used to filter this collection 
 + * 
 + * @ return A RealmQuery to filter the list 
 + * / 
 + public RealmQuery < E > where ( ) { 
 + return new RealmQuery < E > ( this ) ; 
 } 
 
 + / * * 
 + * 
 + * @ param rowIndex The index position where the object should be inserted 
 + * @ param element The object to insert 
 + * / 
 @ Override 
 - public void add ( int rowIndex , T element ) { 
 + public void add ( int rowIndex , E element ) { 
 
 Field [ ] fields = element . getClass ( ) . getSuperclass ( ) . getDeclaredFields ( ) ; 
 
 @ @ - 175 , 14 + 204 , 25 @ @ public class RealmList < T > extends AbstractList < T > { 
 
 } 
 
 + / * * 
 + * 
 + * @ param rowIndex The index of the object to be removed 
 + * @ return Always returns null , as the object is no longer backed by Realm 
 + * / 
 @ Override 
 - public T remove ( int rowIndex ) { 
 + public E remove ( int rowIndex ) { 
 this . dataStore . remove ( rowIndex ) ; 
 return null ; 
 } 
 
 + / * * 
 + * 
 + * @ param rowIndex The index position where the object should be inserted 
 + * @ param element The object to insert 
 + * @ return The inserted object 
 + * / 
 @ Override 
 - public T set ( int rowIndex , T element ) { 
 + public E set ( int rowIndex , E element ) { 
 
 Field [ ] fields = element . getClass ( ) . getDeclaredFields ( ) ; 
 
 @ @ - 236 , 14 + 276 , 17 @ @ public class RealmList < T > extends AbstractList < T > { 
 
 } 
 
 - 
 - 
 + / * * 
 + * 
 + * @ param rowIndex The objects index in the list 
 + * @ return An object of type T , which is backed by Realm 
 + * / 
 @ Override 
 - public T get ( int rowIndex ) { 
 + public E get ( int rowIndex ) { 
 try { 
 - T obj = ProxyBuilder . forClass ( this . type ) 
 + E obj = ProxyBuilder . forClass ( this . type ) 
 . dexCache ( this . context . getDir ( " dx " , Context . MODE _ PRIVATE ) ) 
 - . handler ( new RealmProxy < T > ( this , rowIndex ) ) 
 + . handler ( new RealmProxy < E > ( this , rowIndex ) ) 
 . build ( ) ; 
 ( ( RealmProxy ) ProxyBuilder . getInvocationHandler ( obj ) ) . realmSetRowIndex ( rowIndex ) ; 
 return obj ; 
 @ @ - 253 , 6 + 296 , 10 @ @ public class RealmList < T > extends AbstractList < T > { 
 return null ; 
 } 
 
 + / * * 
 + * 
 + * @ return The number of elements in this RealmList 
 + * / 
 @ Override 
 public int size ( ) { 
 return ( ( Long ) this . dataStore . size ( ) ) . intValue ( ) ; 
 diff - - git a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmProxy . java b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmProxy . java 
 index dc8478a . . 8179055 100644 
 - - - a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmProxy . java 
 + + + b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmProxy . java 
 @ @ - 10 , 12 + 10 , 10 @ @ import java . util . Date ; 
 
 import io . realm . TableOrView ; 
 
 - public class RealmProxy < T > implements InvocationHandler { 
 + class RealmProxy implements InvocationHandler { 
 
 private RealmList realm ; 
 private long rowIndex ; 
 - private Object proxied ; 
 - 
 
 public RealmProxy ( RealmList realm , long rowIndex ) { 
 this . realm = realm ; 
 @ @ - 104 , 5 + 102 , 4 @ @ public class RealmProxy < T > implements InvocationHandler { 
 return ProxyBuilder . callSuper ( proxy , m , args ) ; 
 } 
 
 - 
 } 
 diff - - git a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmQuery . java b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmQuery . java 
 index 3fa87c1 . . d489fcf 100644 
 - - - a / RealmAndroid / lib / src / main / java / io / realm / typed / RealmQuery . java 
 + + + b / RealmAndroid / lib / src / main / java / io / realm / typed / RealmQuery . java 
 @ @ - 3 , 19 + 3 , 22 @ @ package io . realm . typed ; 
 
 import java . util . Date ; 
 import java . util . HashMap ; 
 - import java . util . List ; 
 import java . util . Map ; 
 
 import io . realm . TableOrView ; 
 import io . realm . TableQuery ; 
 
 - public class RealmQuery < T > { 
 + / * * 
 + * 
 + * @ param < E > The type of objects to be queried 
 + * / 
 + public class RealmQuery < E > { 
 
 - private RealmList < T > realm ; 
 + private RealmList < E > realm ; 
 private TableQuery query ; 
 private Map < String , Integer > columns = new HashMap < String , Integer > ( ) ; 
 
 - public RealmQuery ( RealmList < T > realmList ) { 
 + public RealmQuery ( RealmList < E > realmList ) { 
 this . realm = realmList ; 
 
 TableOrView dataStore = realmList . getDataStore ( ) ; 
 @ @ - 26 , 49 + 29 , 45 @ @ public class RealmQuery < T > { 
 } 
 } 
 
 - public static < T > RealmQuery < T > where ( List < T > realm ) { 
 - return new RealmQuery < T > ( ( RealmList < T > ) realm ) ; 
 - } 
 - 
 / / Equal 
 
 - public RealmQuery < T > equalTo ( String columnName , String value ) { 
 + public RealmQuery < E > equalTo ( String columnName , String value ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . equalTo ( columnIndex , value ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > equalTo ( String columnName , int value ) { 
 + public RealmQuery < E > equalTo ( String columnName , int value ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . equalTo ( columnIndex , value ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > equalTo ( String columnName , long value ) { 
 + public RealmQuery < E > equalTo ( String columnName , long value ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . equalTo ( columnIndex , value ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > equalTo ( String columnName , double value ) { 
 + public RealmQuery < E > equalTo ( String columnName , double value ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . equalTo ( columnIndex , value ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > equalTo ( String columnName , float value ) { 
 + public RealmQuery < E > equalTo ( String columnName , float value ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . equalTo ( columnIndex , value ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > equalTo ( String columnName , boolean value ) { 
 + public RealmQuery < E > equalTo ( String columnName , boolean value ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . equalTo ( columnIndex , value ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > equalTo ( String columnName , Date value ) { 
 + public RealmQuery < E > equalTo ( String columnName , Date value ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . equalTo ( columnIndex , value ) ; 
 return this ; 
 @ @ - 76 , 31 + 75 , 31 @ @ public class RealmQuery < T > { 
 
 / / Between 
 
 - public RealmQuery < T > between ( String columnName , int from , int to ) { 
 + public RealmQuery < E > between ( String columnName , int from , int to ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . between ( columnIndex , from , to ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > between ( String columnName , long from , long to ) { 
 + public RealmQuery < E > between ( String columnName , long from , long to ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . between ( columnIndex , from , to ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > between ( String columnName , double from , double to ) { 
 + public RealmQuery < E > between ( String columnName , double from , double to ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . between ( columnIndex , from , to ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > between ( String columnName , float from , float to ) { 
 + public RealmQuery < E > between ( String columnName , float from , float to ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . between ( columnIndex , from , to ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > between ( String columnName , Date from , Date to ) { 
 + public RealmQuery < E > between ( String columnName , Date from , Date to ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . between ( columnIndex , from , to ) ; 
 return this ; 
 @ @ - 109 , 13 + 108 , 13 @ @ public class RealmQuery < T > { 
 
 / / Contains 
 
 - public RealmQuery < T > contains ( String columnName , String value ) { 
 + public RealmQuery < E > contains ( String columnName , String value ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . contains ( columnIndex , value ) ; 
 return this ; 
 } 
 
 - public RealmQuery < T > contains ( String columnName , String value , boolean caseSensitive ) { 
 + public RealmQuery < E > contains ( String columnName , String value , boolean caseSensitive ) { 
 int columnIndex = columns . get ( columnName ) ; 
 this . query . contains ( columnIndex , value , caseSensitive ) ; 
 return this ; 
 @ @ - 141 , 8 + 140 , 8 @ @ public class RealmQuery < T > { 
 
 / / Execute 
 
 - public RealmList < T > findAll ( ) { 
 - return new RealmList < T > ( realm , query . findAll ( ) ) ; 
 + public RealmList < E > findAll ( ) { 
 + return new RealmList < E > ( realm , query . findAll ( ) ) ; 
 } 
 
 } 
 diff - - git a / RealmAndroid / lib / src / main / java / io / realm / typed / Realms . java b / RealmAndroid / lib / src / main / java / io / realm / typed / Realms . java 
 index 43dabf6 . . 412ddb1 100644 
 - - - a / RealmAndroid / lib / src / main / java / io / realm / typed / Realms . java 
 + + + b / RealmAndroid / lib / src / main / java / io / realm / typed / Realms . java 
 @ @ - 4 , 9 + 4 , 18 @ @ import android . content . Context ; 
 
 public class Realms { 
 
 + private Realms ( ) { } 
 
 - public static < T > RealmList < T > list ( Context context , Class < T > type ) { 
 - return new RealmList < T > ( type , context ) ; 
 + / * * 
 + * Returns a RealmList which is backed by the default realm , it might already contain data . 
 + * 
 + * @ param context The Context from which the filesystem path is derived 
 + * @ param type The definition of the object which is to be accesed 
 + * @ param < E > The type which should be accessible from this list 
 + * @ return A list backed by Realm 
 + * / 
 + public static < E > RealmList < E > list ( Context context , Class < E > type ) { 
 + return new RealmList < E > ( type , context ) ; 
 } 
 
 }
