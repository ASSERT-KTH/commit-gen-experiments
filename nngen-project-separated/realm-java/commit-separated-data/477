BLEU SCORE: 0.02383853510228548

TEST MSG: Don ' t hold pointer of SortDescriptor in java
GENERATED MSG: Hack with snapshot to support stable iterator

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> index 5df7fa8 . . 6be3080 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> @ @ - 172 , 19 + 172 , 16 @ @ public class CollectionTests { <nl> public void sort ( ) { <nl> Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> SortDescriptor sortDescriptor = new SortDescriptor ( table , new long [ ] { 2 } ) ; <nl> - try { <nl> - Collection collection2 = collection . sort ( sortDescriptor ) ; <nl> <nl> - / / A new native Results should be created . <nl> - assertTrue ( collection . getNativePtr ( ) ! = collection2 . getNativePtr ( ) ) ; <nl> - assertEquals ( 4 , collection . size ( ) ) ; <nl> - assertEquals ( 4 , collection2 . size ( ) ) ; <nl> + Collection collection2 = collection . sort ( sortDescriptor ) ; <nl> <nl> - assertEquals ( collection2 . getUncheckedRow ( 0 ) . getLong ( 2 ) , 1 ) ; <nl> - assertEquals ( collection2 . getUncheckedRow ( 3 ) . getLong ( 2 ) , 4 ) ; <nl> - } finally { <nl> - sortDescriptor . close ( ) ; <nl> - } <nl> + / / A new native Results should be created . <nl> + assertTrue ( collection . getNativePtr ( ) ! = collection2 . getNativePtr ( ) ) ; <nl> + assertEquals ( 4 , collection . size ( ) ) ; <nl> + assertEquals ( 4 , collection2 . size ( ) ) ; <nl> + <nl> + assertEquals ( collection2 . getUncheckedRow ( 0 ) . getLong ( 2 ) , 1 ) ; <nl> + assertEquals ( collection2 . getUncheckedRow ( 3 ) . getLong ( 2 ) , 4 ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 207 , 24 + 204 , 18 @ @ public class CollectionTests { <nl> @ Test <nl> public void indexOf ( ) { <nl> SortDescriptor sortDescriptor = new SortDescriptor ( table , new long [ ] { 2 } ) ; <nl> - try { <nl> - Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; <nl> - UncheckedRow row = table . getUncheckedRow ( 0 ) ; <nl> - assertEquals ( collection . indexOf ( row ) , 3 ) ; <nl> - } finally { <nl> - sortDescriptor . close ( ) ; <nl> - } <nl> + <nl> + Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; <nl> + UncheckedRow row = table . getUncheckedRow ( 0 ) ; <nl> + assertEquals ( collection . indexOf ( row ) , 3 ) ; <nl> } <nl> <nl> @ Test <nl> public void indexOf _ long ( ) { <nl> SortDescriptor sortDescriptor = new SortDescriptor ( table , new long [ ] { 2 } ) ; <nl> - try { <nl> - Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; <nl> - assertEquals ( collection . indexOf ( 0 ) , 3 ) ; <nl> - } finally { <nl> - sortDescriptor . close ( ) ; <nl> - } <nl> + <nl> + Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; <nl> + assertEquals ( collection . indexOf ( 0 ) , 3 ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> index 914477a . . f4942fa 100644 <nl> - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> @ @ - 37 , 7 + 37 , 7 @ @ set ( classes _ LIST <nl> io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow <nl> io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil <nl> io . realm . log . LogLevel io . realm . log . RealmLog io . realm . Property io . realm . RealmSchema <nl> - io . realm . RealmObjectSchema io . realm . internal . Collection io . realm . internal . SortDescriptor <nl> + io . realm . RealmObjectSchema io . realm . internal . Collection <nl> io . realm . internal . NativeObjectReference <nl> ) <nl> # / . / is the workaround for the problem that AS cannot find the jni headers . <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp <nl> deleted file mode 100644 <nl> index 7dcc8ef . . 0000000 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp <nl> + + + / dev / null <nl> @ @ - 1 , 48 + 0 , 0 @ @ <nl> - # include " io _ realm _ internal _ SortDescriptor . h " <nl> - <nl> - # include < realm / views . hpp > <nl> - <nl> - # include " util . hpp " <nl> - <nl> - using namespace realm ; <nl> - <nl> - JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ internal _ SortDescriptor _ nativeCreate ( JNIEnv * env , jclass , jlong table _ ptr , jobjectArray column _ indices , <nl> - jbooleanArray ascending ) <nl> - { <nl> - try { <nl> - JniArrayOfArrays < JniLongArray , jlongArray > arrays ( env , column _ indices ) ; <nl> - JniBooleanArray ascending _ array ( env , ascending ) ; <nl> - jsize arr _ len = arrays . len ( ) ; <nl> - <nl> - std : : vector < std : : vector < size _ t > > indices ; <nl> - std : : vector < bool > ascending _ list ; <nl> - <nl> - for ( int i = 0 ; i < arr _ len ; + + i ) { <nl> - JniLongArray & jni _ long _ array = arrays [ i ] ; <nl> - std : : vector < size _ t > col _ indices ; <nl> - for ( int j = 0 ; j < jni _ long _ array . len ( ) ; + + j ) { <nl> - col _ indices . push _ back ( static _ cast < size _ t > ( jni _ long _ array [ j ] ) ) ; <nl> - } <nl> - indices . push _ back ( std : : move ( col _ indices ) ) ; <nl> - if ( ascending ) { <nl> - ascending _ list . push _ back ( static _ cast < bool > ( ascending _ array [ i ] ) ) ; <nl> - } <nl> - } <nl> - <nl> - SortDescriptor * descriptor = ascending ? <nl> - new SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) , std : : move ( ascending _ list ) ) <nl> - : new SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) ) ; <nl> - return reinterpret _ cast < jlong > ( descriptor ) ; <nl> - } CATCH _ STD ( ) <nl> - <nl> - return reinterpret _ cast < jlong > ( nullptr ) ; <nl> - } <nl> - <nl> - JNIEXPORT void JNICALL <nl> - Java _ io _ realm _ internal _ SortDescriptor _ nativeClose ( JNIEnv * env , jclass , jlong ptr ) { <nl> - try { <nl> - SortDescriptor * descriptor = reinterpret _ cast < SortDescriptor * > ( ptr ) ; <nl> - delete descriptor ; <nl> - } CATCH _ STD ( ) <nl> - } <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index c6b60da . . 7a2fe1c 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 23 , 10 + 23 , 12 @ @ <nl> # include < results . hpp > <nl> <nl> # include " util . hpp " <nl> + # include " java _ sort _ descriptor . hpp " <nl> # include " jni _ util / method . hpp " <nl> <nl> using namespace realm ; <nl> using namespace realm : : jni _ util ; <nl> + using namespace realm : : _ impl ; <nl> <nl> / / We need to control the life cycle of Results , weak ref of Java Collection object and the NotificationToken . <nl> / / Wrap all three together , so when the Java Collection object gets GCed , all three of them will be invalidated . <nl> @ @ - 107 , 7 + 109 , 7 @ @ static void finalize _ results ( jlong ptr ) <nl> <nl> JNIEXPORT jlong JNICALL <nl> Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared _ realm _ ptr , jlong query _ ptr , <nl> - jlong sort _ desc _ native _ ptr , jlong distinct _ desc _ native _ ptr ) <nl> + jobject sort _ desc , jobject distinct _ desc ) <nl> { <nl> TR _ ENTER ( ) <nl> try { <nl> @ @ - 117 , 11 + 119 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong <nl> } <nl> <nl> auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; <nl> - auto sort _ desc _ ptr = reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; <nl> - auto distinct _ desc _ ptr = reinterpret _ cast < SortDescriptor * > ( distinct _ desc _ native _ ptr ) ; <nl> Results results ( shared _ realm , * query , <nl> - sort _ desc _ ptr ? * sort _ desc _ ptr : SortDescriptor ( ) , <nl> - distinct _ desc _ ptr ? * distinct _ desc _ ptr : SortDescriptor ( ) ) ; <nl> + SortDescriptor ( JavaSortDescriptor ( env , sort _ desc ) ) , <nl> + SortDescriptor ( JavaSortDescriptor ( env , distinct _ desc ) ) ) ; <nl> auto wrapper = new ResultsWrapper ( std : : move ( results ) ) ; <nl> if ( shared _ realm - > is _ in _ transaction ( ) ) { <nl> wrapper - > switch _ to _ snapshot ( ) ; <nl> @ @ - 274 , 13 + 274 , 12 @ @ Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong nat <nl> } <nl> <nl> JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlong sort _ desc _ native _ ptr ) <nl> + Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jobject sort _ desc ) <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> - auto sort _ descriptor = * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; <nl> - auto sorted _ result = wrapper - > get _ results ( ) . sort ( std : : move ( sort _ descriptor ) ) ; <nl> + auto sorted _ result = wrapper - > get _ results ( ) . sort ( JavaSortDescriptor ( env , sort _ desc ) ) ; <nl> return reinterpret _ cast < jlong > ( new ResultsWrapper ( std : : move ( sorted _ result ) ) ) ; <nl> } CATCH _ STD ( ) <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ sort _ descriptor . cpp b / realm / realm - library / src / main / cpp / java _ sort _ descriptor . cpp <nl> new file mode 100644 <nl> index 0000000 . . 1e3f050 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / java _ sort _ descriptor . cpp <nl> @ @ - 0 , 0 + 1 , 66 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + <nl> + # include " java _ sort _ descriptor . hpp " <nl> + # include " jni _ util / method . hpp " <nl> + <nl> + using namespace realm ; <nl> + using namespace realm : : _ impl ; <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + JavaSortDescriptor : : operator realm : : SortDescriptor ( ) const noexcept <nl> + { <nl> + if ( m _ sort _ desc _ obj = = nullptr ) { <nl> + return SortDescriptor ( ) ; <nl> + } <nl> + <nl> + / / Cache the method IDs . <nl> + static JniMethod getColumnIndices = JniMethod ( m _ env , m _ sort _ desc _ obj , " getColumnIndices " , " ( ) [ [ J " ) ; <nl> + static JniMethod getAscendings = JniMethod ( m _ env , m _ sort _ desc _ obj , " getAscendings " , " ( ) [ Z " ) ; <nl> + static JniMethod getTablePtr = JniMethod ( m _ env , m _ sort _ desc _ obj , " getTablePtr " , " ( ) J " ) ; <nl> + <nl> + jobjectArray column _ indices = <nl> + static _ cast < jobjectArray > ( m _ env - > CallObjectMethod ( m _ sort _ desc _ obj , getColumnIndices ) ) ; <nl> + jbooleanArray ascendings = <nl> + static _ cast < jbooleanArray > ( m _ env - > CallObjectMethod ( m _ sort _ desc _ obj , getAscendings ) ) ; <nl> + jlong table _ ptr = m _ env - > CallLongMethod ( m _ sort _ desc _ obj , getTablePtr ) ; <nl> + <nl> + JniArrayOfArrays < JniLongArray , jlongArray > arrays ( m _ env , column _ indices ) ; <nl> + JniBooleanArray ascending _ array ( m _ env , ascendings ) ; <nl> + jsize arr _ len = arrays . len ( ) ; <nl> + <nl> + std : : vector < std : : vector < size _ t > > indices ; <nl> + std : : vector < bool > ascending _ list ; <nl> + <nl> + for ( int i = 0 ; i < arr _ len ; + + i ) { <nl> + JniLongArray & jni _ long _ array = arrays [ i ] ; <nl> + std : : vector < size _ t > col _ indices ; <nl> + for ( int j = 0 ; j < jni _ long _ array . len ( ) ; + + j ) { <nl> + col _ indices . push _ back ( static _ cast < size _ t > ( jni _ long _ array [ j ] ) ) ; <nl> + } <nl> + indices . push _ back ( std : : move ( col _ indices ) ) ; <nl> + if ( ascendings ) { <nl> + ascending _ list . push _ back ( static _ cast < bool > ( ascending _ array [ i ] ) ) ; <nl> + } <nl> + } <nl> + <nl> + return ascendings ? <nl> + SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) , std : : move ( ascending _ list ) ) <nl> + : SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) ) ; <nl> + } <nl> + <nl> + <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ sort _ descriptor . hpp b / realm / realm - library / src / main / cpp / java _ sort _ descriptor . hpp <nl> new file mode 100644 <nl> index 0000000 . . 8c26543 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / java _ sort _ descriptor . hpp <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # ifndef JAVA _ SORT _ DESCRIPTOR _ HPP <nl> + # define JAVA _ SORT _ DESCRIPTOR _ HPP <nl> + <nl> + # include < jni . h > <nl> + # include < realm / views . hpp > <nl> + <nl> + namespace realm { <nl> + namespace _ impl { <nl> + <nl> + / / For converting a Java SortDescriptor object to realm : : SortDescriptor . <nl> + / / This class is not designed to be used across JNI calls . So it doesn ' t acquire a reference to the given Java object . <nl> + / / We don ' t holding a pointer to the SortDescriptor in the Java object like normally we do is because of the ObjectStore <nl> + / / always consume the SortDescriptor by calling the move constructor . Holding a empty SortDescriptor in Java level <nl> + / / doesn ' t make too much sense and causes troubles with memory management . <nl> + class JavaSortDescriptor { <nl> + public : <nl> + JavaSortDescriptor ( JNIEnv * env , jobject sort _ desc _ obj ) : m _ env ( env ) , m _ sort _ desc _ obj ( sort _ desc _ obj ) { } <nl> + <nl> + JavaSortDescriptor ( const JavaSortDescriptor & ) = delete ; <nl> + JavaSortDescriptor & operator = ( const JavaSortDescriptor & ) = delete ; <nl> + JavaSortDescriptor ( JavaSortDescriptor & & ) = delete ; <nl> + JavaSortDescriptor & operator = ( JavaSortDescriptor & & ) = delete ; <nl> + <nl> + operator realm : : SortDescriptor ( ) const noexcept ; <nl> + <nl> + private : <nl> + JNIEnv * m _ env ; <nl> + jobject m _ sort _ desc _ obj ; <nl> + } ; <nl> + <nl> + } / / namespace _ impl <nl> + } / / namespace realm <nl> + # endif / / JAVA _ SORT _ DESCRIPTOR _ HPP <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 909578d . . 1994672 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 301 , 15 + 301 , 12 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen <nl> public RealmResults < E > sort ( String fieldName ) { <nl> SortDescriptor sortDescriptor = <nl> SortDescriptor . getInstanceForSort ( collection . getTable ( ) , fieldName , Sort . ASCENDING ) ; <nl> - try { <nl> - Collection sortedCollection = collection . sort ( sortDescriptor ) ; <nl> - if ( className ! = null ) { <nl> - return new RealmResults < E > ( realm , sortedCollection , className ) ; <nl> - } else { <nl> - return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; <nl> - } <nl> - } finally { <nl> - sortDescriptor . close ( ) ; <nl> + <nl> + Collection sortedCollection = collection . sort ( sortDescriptor ) ; <nl> + if ( className ! = null ) { <nl> + return new RealmResults < E > ( realm , sortedCollection , className ) ; <nl> + } else { <nl> + return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; <nl> } <nl> } <nl> <nl> @ @ - 320 , 15 + 317 , 12 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen <nl> public RealmResults < E > sort ( String fieldName , Sort sortOrder ) { <nl> SortDescriptor sortDescriptor = <nl> SortDescriptor . getInstanceForSort ( collection . getTable ( ) , fieldName , sortOrder ) ; <nl> - try { <nl> - Collection sortedCollection = collection . sort ( sortDescriptor ) ; <nl> - if ( className ! = null ) { <nl> - return new RealmResults < E > ( realm , sortedCollection , className ) ; <nl> - } else { <nl> - return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; <nl> - } <nl> - } finally { <nl> - sortDescriptor . close ( ) ; <nl> + <nl> + Collection sortedCollection = collection . sort ( sortDescriptor ) ; <nl> + if ( className ! = null ) { <nl> + return new RealmResults < E > ( realm , sortedCollection , className ) ; <nl> + } else { <nl> + return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; <nl> } <nl> } <nl> <nl> @ @ - 339 , 15 + 333 , 12 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen <nl> public RealmResults < E > sort ( String fieldNames [ ] , Sort sortOrders [ ] ) { <nl> SortDescriptor sortDescriptor = <nl> SortDescriptor . getInstanceForSort ( collection . getTable ( ) , fieldNames , sortOrders ) ; <nl> - try { <nl> - Collection sortedCollection = collection . sort ( sortDescriptor ) ; <nl> - if ( className ! = null ) { <nl> - return new RealmResults < E > ( realm , sortedCollection , className ) ; <nl> - } else { <nl> - return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; <nl> - } <nl> - } finally { <nl> - sortDescriptor . close ( ) ; <nl> + <nl> + Collection sortedCollection = collection . sort ( sortDescriptor ) ; <nl> + if ( className ! = null ) { <nl> + return new RealmResults < E > ( realm , sortedCollection , className ) ; <nl> + } else { <nl> + return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index 2956b93 . . c91eff3 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 85 , 8 + 85 , 8 @ @ public final class Collection implements NativeObject { <nl> query . validateQuery ( ) ; <nl> <nl> this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , <nl> - sortDescriptor = = null ? 0 : sortDescriptor . getNativePtr ( ) , <nl> - distinctDescriptor = = null ? 0 : distinctDescriptor . getNativePtr ( ) ) ; <nl> + sortDescriptor , <nl> + distinctDescriptor ) ; <nl> <nl> this . sharedRealm = sharedRealm ; <nl> this . context = sharedRealm . context ; <nl> @ @ - 162 , 7 + 162 , 7 @ @ public final class Collection implements NativeObject { <nl> } <nl> <nl> public Collection sort ( SortDescriptor sortDescriptor ) { <nl> - return new Collection ( sharedRealm , query , nativeSort ( nativePtr , sortDescriptor . getNativePtr ( ) ) ) ; <nl> + return new Collection ( sharedRealm , query , nativeSort ( nativePtr , sortDescriptor ) ) ; <nl> } <nl> <nl> public boolean contains ( UncheckedRow row ) { <nl> @ @ - 241 , 7 + 241 , 7 @ @ public final class Collection implements NativeObject { <nl> <nl> private static native long nativeGetFinalizerPtr ( ) ; <nl> private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , <nl> - long sortDescNativePtr , long distinctDescNativePtr ) ; <nl> + SortDescriptor sortDesc , SortDescriptor distinctDesc ) ; <nl> @ SuppressWarnings ( " unused " ) / / Not used for now <nl> private static native long nativeCreateSnapshot ( long nativePtr ) ; <nl> private static native long nativeGetRow ( long nativePtr , int index ) ; <nl> @ @ - 251 , 7 + 251 , 7 @ @ public final class Collection implements NativeObject { <nl> private static native void nativeClear ( long nativePtr ) ; <nl> private static native long nativeSize ( long nativePtr ) ; <nl> private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; <nl> - private static native long nativeSort ( long nativePtr , long sortDescNativePtr ) ; <nl> + private static native long nativeSort ( long nativePtr , SortDescriptor sortDesc ) ; <nl> private static native boolean nativeDeleteFirst ( long nativePtr ) ; <nl> private static native boolean nativeDeleteLast ( long nativePtr ) ; <nl> private static native void nativeDelete ( long nativePtr , long index ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> index 5ca4b97 . . 051149f 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> @ @ - 16 , 18 + 16 , 27 @ @ <nl> <nl> package io . realm . internal ; <nl> <nl> - import java . io . * ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> import io . realm . RealmFieldType ; <nl> import io . realm . Sort ; <nl> <nl> - public class SortDescriptor implements Closeable { <nl> + / * * <nl> + * Java class to present the same name core class in Java . This can be converted to a cpp realm : : SortDescriptor object <nl> + * through realm : : _ impl : : JavaSortDescriptor . <nl> + * < p > <nl> + * NOTE : Since the column indices are determined when constructing the object with the given table ' s status , the indices <nl> + * could be wrong when schema changes . Always create and consume the instance when needed , DON ' T store a SortDescriptor <nl> + * and use it whenever the ShareGroup can be in different versions . <nl> + * / <nl> + @ KeepMember <nl> + public class SortDescriptor { <nl> <nl> private final long [ ] [ ] columnIndices ; <nl> private final boolean [ ] ascendings ; <nl> - private long nativePtr = 0 ; <nl> + private final Table table ; <nl> + <nl> final static List < RealmFieldType > validFieldTypesForSort = Arrays . asList ( <nl> RealmFieldType . BOOLEAN , RealmFieldType . INTEGER , RealmFieldType . FLOAT , RealmFieldType . DOUBLE , <nl> RealmFieldType . STRING , RealmFieldType . DATE ) ; <nl> @ @ - 39 , 11 + 48 , 6 @ @ public class SortDescriptor implements Closeable { <nl> this ( table , new long [ ] [ ] { columnIndices } , null ) ; <nl> } <nl> <nl> - / / Internal use only . For JNI testing . <nl> - SortDescriptor ( Table table , long [ ] columnIndices , Sort sortOrder ) { <nl> - this ( table , new long [ ] [ ] { columnIndices } , new Sort [ ] { sortOrder } ) ; <nl> - } <nl> - <nl> private SortDescriptor ( Table table , long [ ] [ ] columnIndices , Sort [ ] sortOrders ) { <nl> if ( sortOrders ! = null ) { <nl> ascendings = new boolean [ sortOrders . length ] ; <nl> @ @ - 55 , 7 + 59 , 7 @ @ public class SortDescriptor implements Closeable { <nl> } <nl> <nl> this . columnIndices = columnIndices ; <nl> - nativePtr = nativeCreate ( table . getNativePtr ( ) , columnIndices , ascendings ) ; <nl> + this . table = table ; <nl> } <nl> <nl> public static SortDescriptor getInstanceForSort ( Table table , String fieldDescription , Sort sortOrder ) { <nl> @ @ - 102 , 10 + 106 , 6 @ @ public class SortDescriptor implements Closeable { <nl> return new SortDescriptor ( table , columnIndices , null ) ; <nl> } <nl> <nl> - public long getNativePtr ( ) { <nl> - return nativePtr ; <nl> - } <nl> - <nl> private static void checkFieldTypeForSort ( FieldDescriptor descriptor , String fieldDescriptions ) { <nl> for ( RealmFieldType aValidFieldTypesForSort : validFieldTypesForSort ) { <nl> if ( aValidFieldTypesForSort = = descriptor . getFieldType ( ) ) { <nl> @ @ - 130 , 20 + 130 , 22 @ @ public class SortDescriptor implements Closeable { <nl> } <nl> } <nl> <nl> + / / Called by JNI . <nl> + @ KeepMember <nl> long [ ] [ ] getColumnIndices ( ) { <nl> return columnIndices ; <nl> } <nl> <nl> + / / Called by JNI . <nl> + @ KeepMember <nl> boolean [ ] getAscendings ( ) { <nl> return ascendings ; <nl> } <nl> <nl> - @ Override <nl> - public void close ( ) { <nl> - nativeClose ( nativePtr ) ; <nl> - nativePtr = 0 ; <nl> + / / Called by JNI . <nl> + @ KeepMember <nl> + @ SuppressWarnings ( " unused " ) <nl> + private long getTablePtr ( ) { <nl> + return table . getNativePtr ( ) ; <nl> } <nl> - <nl> - private static native long nativeCreate ( long tablePtr , long [ ] [ ] columnIndices , boolean [ ] ascending ) ; <nl> - private static native void nativeClose ( long ptr ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> index 815aabc . . 648e304 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import io . realm . RealmChangeListener ; <nl> import io . realm . RealmConfiguration ; <nl> import io . realm . RealmFieldType ; <nl> import io . realm . TestHelper ; <nl> + import io . realm . internal . android . AndroidRealmNotifier ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . rule . RunTestInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> @ @ - 56 , 7 + 57 , 7 @ @ public class CollectionTests { <nl> @ Before <nl> public void setUp ( ) { <nl> config = configFactory . createConfiguration ( ) ; <nl> - sharedRealm = SharedRealm . getInstance ( config ) ; <nl> + sharedRealm = getSharedRealm ( ) ; <nl> populateData ( ) ; <nl> } <nl> <nl> @ @ - 65 , 6 + 66 , 10 @ @ public class CollectionTests { <nl> sharedRealm . close ( ) ; <nl> } <nl> <nl> + private SharedRealm getSharedRealm ( ) { <nl> + return SharedRealm . getInstance ( config , new AndroidRealmNotifier ( ) , null ) ; <nl> + } <nl> + <nl> private void populateData ( ) { <nl> sharedRealm . beginTransaction ( ) ; <nl> table = sharedRealm . getTable ( " test _ table " ) ; <nl> @ @ - 101 , 7 + 106 , 7 @ @ public class CollectionTests { <nl> new Thread ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> - SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; <nl> + SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> addRow ( sharedRealm ) ; <nl> sharedRealm . close ( ) ; <nl> latch . countDown ( ) ; <nl> @ @ - 274 , 7 + 279 , 7 @ @ public class CollectionTests { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void addListener _ queryNotReturned ( ) { <nl> - final SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; <nl> + final SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> Table table = sharedRealm . getTable ( " test _ table " ) ; <nl> <nl> final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> @ @ - 295 , 7 + 300 , 7 @ @ public class CollectionTests { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void addListener _ queryReturned ( ) { <nl> - final SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; <nl> + final SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> Table table = sharedRealm . getTable ( " test _ table " ) ; <nl> <nl> final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> @ @ - 319 , 7 + 324 , 7 @ @ public class CollectionTests { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void addListener _ queryNotReturnedLocalAndRemoteCommit ( ) { <nl> - final SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; <nl> + final SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> Table table = sharedRealm . getTable ( " test _ table " ) ; <nl> <nl> final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> @ @ - 342 , 7 + 347 , 7 @ @ public class CollectionTests { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void addListener _ queryNotReturnedLocalCommitOnly ( ) { <nl> - final SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; <nl> + final SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> Table table = sharedRealm . getTable ( " test _ table " ) ; <nl> <nl> final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> @ @ - 364 , 7 + 369 , 7 @ @ public class CollectionTests { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void addListener _ queryReturnedLocalCommitOnly ( ) { <nl> - final SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; <nl> + final SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> Table table = sharedRealm . getTable ( " test _ table " ) ; <nl> <nl> final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> @ @ - 383 , 11 + 388 , 35 @ @ public class CollectionTests { <nl> } <nl> <nl> @ Test <nl> - public void size _ doesNotChangeAfterLocalCommit ( ) { <nl> + public void switchSnapshot _ nonLooperThread ( ) { <nl> final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> assertEquals ( collection . size ( ) , 4 ) ; <nl> addRow ( sharedRealm ) ; <nl> + / / The results is backed by snapshot now . <nl> assertEquals ( collection . size ( ) , 4 ) ; <nl> sharedRealm . refresh ( ) ; <nl> + / / The results is switched back to the original Results . <nl> + assertEquals ( collection . size ( ) , 5 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void switchSnapshot _ looperThread ( ) { <nl> + final SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> + final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> + looperThread . keepStrongReference . add ( collection ) ; <nl> + assertEquals ( collection . size ( ) , 4 ) ; <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + / / The results is switched back to the original Results . <nl> + assertEquals ( collection . size ( ) , 5 ) ; <nl> + sharedRealm . close ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + addRow ( sharedRealm ) ; <nl> + / / The results is backed by snapshot now . <nl> + assertEquals ( collection . size ( ) , 4 ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index 0c82e4b . . 6203d61 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> <nl> # include " util . hpp " <nl> # include " jni _ util / method . hpp " <nl> + # include " jni _ util / log . hpp " <nl> <nl> using namespace realm ; <nl> using namespace realm : : jni _ util ; <nl> @ @ - 32 , 7 + 33 , 6 @ @ using namespace realm : : jni _ util ; <nl> / / Wrap all three together , so when the Java Collection object gets GCed , all three of them will be invalidated . <nl> struct ResultsWrapper { <nl> jobject m _ collection _ weak _ ref ; <nl> - Results m _ results ; <nl> NotificationToken m _ notification _ token ; <nl> <nl> ResultsWrapper ( Results & & results ) <nl> @ @ - 52 , 6 + 52 , 36 @ @ struct ResultsWrapper { <nl> env - > DeleteWeakGlobalRef ( m _ collection _ weak _ ref ) ; <nl> } <nl> } <nl> + <nl> + inline Results & get _ original _ results ( ) <nl> + { <nl> + return m _ results ; <nl> + } <nl> + <nl> + inline Results & get _ results ( ) <nl> + { <nl> + if ( m _ snapshot . get _ mode ( ) = = Results : : Mode : : Empty ) { <nl> + Log : : e ( " Using origin . " ) ; <nl> + return m _ results ; <nl> + } else { <nl> + Log : : e ( " Using snapshot . " ) ; <nl> + return m _ snapshot ; <nl> + } <nl> + } <nl> + <nl> + inline void switch _ to _ snapshot ( ) <nl> + { <nl> + m _ snapshot = m _ results . snapshot ( ) ; <nl> + } <nl> + <nl> + inline void switch _ to _ origin ( ) <nl> + { <nl> + m _ snapshot = Results ( ) ; <nl> + } <nl> + <nl> + private : <nl> + Results m _ results ; <nl> + Results m _ snapshot ; <nl> } ; <nl> <nl> static void finalize _ results ( jlong ptr ) ; <nl> @ @ - 80 , 6 + 110 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong <nl> sort _ desc _ ptr ? * sort _ desc _ ptr : SortDescriptor ( ) , <nl> distinct _ desc _ ptr ? * distinct _ desc _ ptr : SortDescriptor ( ) ) ; <nl> auto wrapper = new ResultsWrapper ( std : : move ( results ) ) ; <nl> + if ( shared _ realm - > is _ in _ transaction ( ) ) { <nl> + wrapper - > switch _ to _ snapshot ( ) ; <nl> + } <nl> <nl> return reinterpret _ cast < jlong > ( wrapper ) ; <nl> } CATCH _ STD ( ) <nl> @ @ - 92 , 7 + 125 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlon <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> - auto snapshot = wrapper - > m _ results . snapshot ( ) ; <nl> + auto snapshot = wrapper - > get _ original _ results ( ) ; <nl> return reinterpret _ cast < jlong > ( new Results ( snapshot ) ) ; <nl> } CATCH _ STD ( ) <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> @ @ - 105 , 7 + 138 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeContains ( JNIEnv * env , jclass , jlong nati <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> auto row = reinterpret _ cast < Row * > ( native _ row _ ptr ) ; <nl> - size _ t index = wrapper - > m _ results . index _ of ( * row ) ; <nl> + size _ t index = wrapper - > get _ results ( ) . index _ of ( * row ) ; <nl> return to _ jbool ( index ! = not _ found ) ; <nl> } CATCH _ STD ( ) ; <nl> return JNI _ FALSE ; <nl> @ @ - 117 , 7 + 150 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeGetRow ( JNIEnv * env , jclass , jlong native <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> - auto row = wrapper - > m _ results . get ( static _ cast < size _ t > ( index ) ) ; <nl> + auto row = wrapper - > get _ results ( ) . get ( static _ cast < size _ t > ( index ) ) ; <nl> return reinterpret _ cast < jlong > ( new Row ( std : : move ( row ) ) ) ; <nl> } CATCH _ STD ( ) <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> @ @ - 129 , 7 + 162 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeFirstRow ( JNIEnv * env , jclass , jlong nati <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> - auto optional _ row = wrapper - > m _ results . first ( ) ; <nl> + auto optional _ row = wrapper - > get _ results ( ) . first ( ) ; <nl> if ( optional _ row ) { <nl> return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; <nl> } <nl> @ @ - 144 , 7 + 177 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeLastRow ( JNIEnv * env , jclass , jlong nativ <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> - auto optional _ row = wrapper - > m _ results . last ( ) ; <nl> + auto optional _ row = wrapper - > get _ results ( ) . last ( ) ; <nl> if ( optional _ row ) { <nl> return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; <nl> } <nl> @ @ - 158 , 7 + 191 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeClear ( JNIEnv * env , jclass , jlong native _ <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> - wrapper - > m _ results . clear ( ) ; <nl> + wrapper - > get _ results ( ) . clear ( ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> @ @ - 168 , 7 + 201 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeSize ( JNIEnv * env , jclass , jlong native _ p <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> - return static _ cast < jlong > ( wrapper - > m _ results . size ( ) ) ; <nl> + return static _ cast < jlong > ( wrapper - > get _ results ( ) . size ( ) ) ; <nl> } CATCH _ STD ( ) <nl> return 0 ; <nl> } <nl> @ @ - 185 , 16 + 218 , 16 @ @ Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong nat <nl> Optional < Mixed > value ; <nl> switch ( agg _ func ) { <nl> case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MINIMUM : <nl> - value = wrapper - > m _ results . min ( index ) ; <nl> + value = wrapper - > get _ results ( ) . min ( index ) ; <nl> break ; <nl> case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MAXIMUM : <nl> - value = wrapper - > m _ results . max ( index ) ; <nl> + value = wrapper - > get _ results ( ) . max ( index ) ; <nl> break ; <nl> case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ AVERAGE : <nl> - value = wrapper - > m _ results . average ( index ) ; <nl> + value = wrapper - > get _ results ( ) . average ( index ) ; <nl> break ; <nl> case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ SUM : <nl> - value = wrapper - > m _ results . sum ( index ) ; <nl> + value = wrapper - > get _ results ( ) . sum ( index ) ; <nl> break ; <nl> default : <nl> REALM _ UNREACHABLE ( ) ; <nl> @ @ - 228 , 7 + 261 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ p <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> auto sort _ descriptor = * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; <nl> - auto sorted _ result = wrapper - > m _ results . sort ( std : : move ( sort _ descriptor ) ) ; <nl> + auto sorted _ result = wrapper - > get _ results ( ) . sort ( std : : move ( sort _ descriptor ) ) ; <nl> return reinterpret _ cast < jlong > ( new ResultsWrapper ( std : : move ( sorted _ result ) ) ) ; <nl> } CATCH _ STD ( ) <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> @ @ - 257 , 7 + 290 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeStartListening ( JNIEnv * env , jobject inst <nl> env - > CallVoidMethod ( wrapper - > m _ collection _ weak _ ref , notify _ change _ listeners ) ; <nl> } ; <nl> <nl> - wrapper - > m _ notification _ token = wrapper - > m _ results . add _ notification _ callback ( cb ) ; <nl> + wrapper - > m _ notification _ token = wrapper - > get _ original _ results ( ) . add _ notification _ callback ( cb ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> @ @ - 286 , 7 + 319 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeWhere ( JNIEnv * env , jclass , jlong native _ <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> <nl> - Query * query = new Query ( wrapper - > m _ results . get _ query ( ) ) ; <nl> + Query * query = new Query ( wrapper - > get _ original _ results ( ) . get _ query ( ) ) ; <nl> return reinterpret _ cast < jlong > ( query ) ; <nl> } CATCH _ STD ( ) <nl> return 0 ; <nl> @ @ - 300 , 7 + 333 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeIndexOf ( JNIEnv * env , jclass , jlong nativ <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> auto row = reinterpret _ cast < Row * > ( row _ native _ ptr ) ; <nl> <nl> - return static _ cast < jlong > ( wrapper - > m _ results . index _ of ( * row ) ) ; <nl> + return static _ cast < jlong > ( wrapper - > get _ results ( ) . index _ of ( * row ) ) ; <nl> } CATCH _ STD ( ) <nl> return npos ; <nl> } <nl> @ @ - 314 , 8 + 347 , 28 @ @ Java _ io _ realm _ internal _ Collection _ nativeIndexOfBySourceRowIndex ( JNIEnv * env , jcl <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> auto index = static _ cast < size _ t > ( source _ row _ index ) ; <nl> <nl> - return static _ cast < jlong > ( wrapper - > m _ results . index _ of ( index ) ) ; <nl> + return static _ cast < jlong > ( wrapper - > get _ results ( ) . index _ of ( index ) ) ; <nl> } CATCH _ STD ( ) <nl> return npos ; <nl> <nl> } <nl> + <nl> + JNIEXPORT void JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeEnableSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> + wrapper - > switch _ to _ snapshot ( ) ; <nl> + } CATCH _ STD ( ) <nl> + } <nl> + <nl> + JNIEXPORT void JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeDisableSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> + wrapper - > switch _ to _ origin ( ) ; <nl> + } CATCH _ STD ( ) <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index a4b714c . . bd95936 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import io . realm . annotations . RealmClass ; <nl> import io . realm . internal . InvalidRow ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> + import io . realm . internal . SharedRealm ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 270 , 7 + 271 , 7 @ @ public abstract class RealmObject implements RealmModel { <nl> RealmObjectProxy proxy = ( RealmObjectProxy ) object ; <nl> BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; <nl> realm . checkIfValid ( ) ; <nl> - realm . sharedRealm . getCapabilities ( ) . checkCanDeliverNotification ( " Listener cannot be added . " ) ; <nl> + SharedRealm . getCapabilities ( ) . checkCanDeliverNotification ( " Listener cannot be added . " ) ; <nl> / / noinspection unchecked <nl> proxy . realmGet $ proxyState ( ) . addChangeListener ( listener ) ; <nl> } else { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index 70e4b5d . . 3098167 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 88 , 6 + 88 , 7 @ @ public final class Collection implements NativeObject { <nl> this . context = sharedRealm . context ; <nl> this . query = query ; <nl> this . context . addReference ( this ) ; <nl> + sharedRealm . addCollection ( this ) ; <nl> } <nl> <nl> public Collection ( SharedRealm sharedRealm , TableQuery query , <nl> @ @ - 107 , 6 + 108 , 7 @ @ public final class Collection implements NativeObject { <nl> this . nativePtr = nativePtr ; <nl> <nl> this . context . addReference ( this ) ; <nl> + sharedRealm . addCollection ( this ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 207 , 6 + 209 , 14 @ @ public final class Collection implements NativeObject { <nl> } <nl> } <nl> <nl> + void enableSnapshot ( ) { <nl> + nativeEnableSnapshot ( nativePtr ) ; <nl> + } <nl> + <nl> + void disableSnapshot ( ) { <nl> + nativeDisableSnapshot ( nativePtr ) ; <nl> + } <nl> + <nl> private static native long nativeGetFinalizerPtr ( ) ; <nl> private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , <nl> long sortDescNativePtr , long distinctDescNativePtr ) ; <nl> @ @ - 226 , 4 + 236 , 6 @ @ public final class Collection implements NativeObject { <nl> private static native long nativeWhere ( long nativePtr ) ; <nl> private static native long nativeIndexOf ( long nativePtr , long rowNativePtr ) ; <nl> private static native long nativeIndexOfBySourceRowIndex ( long nativePtr , long sourceRowIndex ) ; <nl> + private static native void nativeEnableSnapshot ( long nativePtr ) ; <nl> + private static native void nativeDisableSnapshot ( long nativePtr ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> index f6b9cfd . . 4db2c2e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import io . realm . RealmChangeListener ; <nl> * other thread / process changes the Realm file . <nl> * / <nl> @ Keep <nl> - public class RealmNotifier implements Closeable { <nl> + public abstract class RealmNotifier implements Closeable { <nl> <nl> private static class RealmObserverPair < T > extends ObserverPair < T , RealmChangeListener < T > > { <nl> public RealmObserverPair ( T observer , RealmChangeListener < T > listener ) { <nl> @ @ - 95 , 4 + 95 , 6 @ @ public class RealmNotifier implements Closeable { <nl> public void removeAllChangeListeners ( ) { <nl> realmObserverPairs . clear ( ) ; <nl> } <nl> + <nl> + public abstract void postAtFrontOfQueue ( Runnable runnable ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index 22c91bd . . 389076c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 18 , 11 + 18 , 13 @ @ package io . realm . internal ; <nl> <nl> import java . io . Closeable ; <nl> import java . io . File ; <nl> + import java . lang . ref . WeakReference ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> <nl> import io . realm . RealmConfiguration ; <nl> import io . realm . RealmSchema ; <nl> import io . realm . internal . android . AndroidCapabilities ; <nl> - import io . realm . internal . async . BadVersionException ; <nl> <nl> public final class SharedRealm implements Closeable { <nl> <nl> @ @ - 107 , 6 + 109 , 7 @ @ public final class SharedRealm implements Closeable { <nl> public final RealmNotifier realmNotifier ; <nl> public final RowNotifier rowNotifier ; <nl> public final ObjectServerFacade objectServerFacade ; <nl> + public final List < WeakReference < Collection > > collections = new ArrayList < WeakReference < Collection > > ( ) ; <nl> <nl> public static class VersionID implements Comparable < VersionID > { <nl> public final long version ; <nl> @ @ - 227 , 14 + 230 , 24 @ @ public final class SharedRealm implements Closeable { <nl> public void beginTransaction ( ) { <nl> nativeBeginTransaction ( nativePtr ) ; <nl> invokeSchemaChangeListenerIfSchemaChanged ( ) ; <nl> + enableCollectionSnapshot ( ) ; <nl> } <nl> <nl> public void commitTransaction ( ) { <nl> nativeCommitTransaction ( nativePtr ) ; <nl> + if ( realmNotifier ! = null & & ! collections . isEmpty ( ) ) { <nl> + realmNotifier . postAtFrontOfQueue ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + disableCollectionSnapshot ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> } <nl> <nl> public void cancelTransaction ( ) { <nl> nativeCancelTransaction ( nativePtr ) ; <nl> + disableCollectionSnapshot ( ) ; <nl> } <nl> <nl> public boolean isInTransaction ( ) { <nl> @ @ - 289 , 6 + 302 , 7 @ @ public final class SharedRealm implements Closeable { <nl> public void refresh ( ) { <nl> nativeRefresh ( nativePtr ) ; <nl> invokeSchemaChangeListenerIfSchemaChanged ( ) ; <nl> + disableCollectionSnapshot ( ) ; <nl> } <nl> <nl> public SharedRealm . VersionID getVersionID ( ) { <nl> @ @ - 336 , 7 + 350 , 7 @ @ public final class SharedRealm implements Closeable { <nl> return nativeIsAutoRefresh ( nativePtr ) ; <nl> } <nl> <nl> - public Capabilities getCapabilities ( ) { <nl> + public static Capabilities getCapabilities ( ) { <nl> return capabilities ; <nl> } <nl> <nl> @ @ - 380 , 6 + 394 , 33 @ @ public final class SharedRealm implements Closeable { <nl> } <nl> } <nl> <nl> + / / Should only be called by Collection ' s constructor <nl> + void addCollection ( Collection collection ) { <nl> + collections . add ( new WeakReference < Collection > ( collection ) ) ; <nl> + } <nl> + <nl> + private void enableCollectionSnapshot ( ) { <nl> + for ( WeakReference < Collection > collectionRef : collections ) { <nl> + Collection collection = collectionRef . get ( ) ; <nl> + if ( collection = = null ) { <nl> + collections . remove ( collectionRef ) ; <nl> + } else { <nl> + collection . enableSnapshot ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + void disableCollectionSnapshot ( ) { <nl> + for ( WeakReference < Collection > collectionRef : collections ) { <nl> + Collection collection = collectionRef . get ( ) ; <nl> + if ( collection = = null ) { <nl> + collections . remove ( collectionRef ) ; <nl> + } else { <nl> + collection . disableSnapshot ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> private static native void nativeInit ( String temporaryDirectoryPath ) ; <nl> private static native long nativeCreateConfig ( String realmPath , byte [ ] key , byte schemaMode , boolean inMemory , <nl> boolean cache , boolean disableFormatUpgrade , <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / android / AndroidRealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidRealmNotifier . java <nl> new file mode 100644 <nl> index 0000000 . . 75e4c04 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidRealmNotifier . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + package io . realm . internal . android ; <nl> + <nl> + import android . os . Handler ; <nl> + import android . os . Looper ; <nl> + <nl> + import io . realm . internal . RealmNotifier ; <nl> + import io . realm . internal . SharedRealm ; <nl> + <nl> + public class AndroidRealmNotifier extends RealmNotifier { <nl> + private final Handler handler ; <nl> + <nl> + public AndroidRealmNotifier ( ) { <nl> + if ( SharedRealm . getCapabilities ( ) . canDeliverNotification ( ) ) { <nl> + handler = new Handler ( Looper . myLooper ( ) ) ; <nl> + } else { <nl> + handler = null ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void postAtFrontOfQueue ( Runnable runnable ) { <nl> + if ( handler ! = null ) { <nl> + handler . postAtFrontOfQueue ( runnable ) ; <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 index 5df7fa8 . . 6be3080 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 @ @ - 172 , 19 + 172 , 16 @ @ public class CollectionTests { 
 public void sort ( ) { 
 Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 SortDescriptor sortDescriptor = new SortDescriptor ( table , new long [ ] { 2 } ) ; 
 - try { 
 - Collection collection2 = collection . sort ( sortDescriptor ) ; 
 
 - / / A new native Results should be created . 
 - assertTrue ( collection . getNativePtr ( ) ! = collection2 . getNativePtr ( ) ) ; 
 - assertEquals ( 4 , collection . size ( ) ) ; 
 - assertEquals ( 4 , collection2 . size ( ) ) ; 
 + Collection collection2 = collection . sort ( sortDescriptor ) ; 
 
 - assertEquals ( collection2 . getUncheckedRow ( 0 ) . getLong ( 2 ) , 1 ) ; 
 - assertEquals ( collection2 . getUncheckedRow ( 3 ) . getLong ( 2 ) , 4 ) ; 
 - } finally { 
 - sortDescriptor . close ( ) ; 
 - } 
 + / / A new native Results should be created . 
 + assertTrue ( collection . getNativePtr ( ) ! = collection2 . getNativePtr ( ) ) ; 
 + assertEquals ( 4 , collection . size ( ) ) ; 
 + assertEquals ( 4 , collection2 . size ( ) ) ; 
 + 
 + assertEquals ( collection2 . getUncheckedRow ( 0 ) . getLong ( 2 ) , 1 ) ; 
 + assertEquals ( collection2 . getUncheckedRow ( 3 ) . getLong ( 2 ) , 4 ) ; 
 } 
 
 @ Test 
 @ @ - 207 , 24 + 204 , 18 @ @ public class CollectionTests { 
 @ Test 
 public void indexOf ( ) { 
 SortDescriptor sortDescriptor = new SortDescriptor ( table , new long [ ] { 2 } ) ; 
 - try { 
 - Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; 
 - UncheckedRow row = table . getUncheckedRow ( 0 ) ; 
 - assertEquals ( collection . indexOf ( row ) , 3 ) ; 
 - } finally { 
 - sortDescriptor . close ( ) ; 
 - } 
 + 
 + Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; 
 + UncheckedRow row = table . getUncheckedRow ( 0 ) ; 
 + assertEquals ( collection . indexOf ( row ) , 3 ) ; 
 } 
 
 @ Test 
 public void indexOf _ long ( ) { 
 SortDescriptor sortDescriptor = new SortDescriptor ( table , new long [ ] { 2 } ) ; 
 - try { 
 - Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; 
 - assertEquals ( collection . indexOf ( 0 ) , 3 ) ; 
 - } finally { 
 - sortDescriptor . close ( ) ; 
 - } 
 + 
 + Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; 
 + assertEquals ( collection . indexOf ( 0 ) , 3 ) ; 
 } 
 
 @ Test 
 diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 index 914477a . . f4942fa 100644 
 - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt 
 + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 @ @ - 37 , 7 + 37 , 7 @ @ set ( classes _ LIST 
 io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow 
 io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil 
 io . realm . log . LogLevel io . realm . log . RealmLog io . realm . Property io . realm . RealmSchema 
 - io . realm . RealmObjectSchema io . realm . internal . Collection io . realm . internal . SortDescriptor 
 + io . realm . RealmObjectSchema io . realm . internal . Collection 
 io . realm . internal . NativeObjectReference 
 ) 
 # / . / is the workaround for the problem that AS cannot find the jni headers . 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp 
 deleted file mode 100644 
 index 7dcc8ef . . 0000000 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp 
 + + + / dev / null 
 @ @ - 1 , 48 + 0 , 0 @ @ 
 - # include " io _ realm _ internal _ SortDescriptor . h " 
 - 
 - # include < realm / views . hpp > 
 - 
 - # include " util . hpp " 
 - 
 - using namespace realm ; 
 - 
 - JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ internal _ SortDescriptor _ nativeCreate ( JNIEnv * env , jclass , jlong table _ ptr , jobjectArray column _ indices , 
 - jbooleanArray ascending ) 
 - { 
 - try { 
 - JniArrayOfArrays < JniLongArray , jlongArray > arrays ( env , column _ indices ) ; 
 - JniBooleanArray ascending _ array ( env , ascending ) ; 
 - jsize arr _ len = arrays . len ( ) ; 
 - 
 - std : : vector < std : : vector < size _ t > > indices ; 
 - std : : vector < bool > ascending _ list ; 
 - 
 - for ( int i = 0 ; i < arr _ len ; + + i ) { 
 - JniLongArray & jni _ long _ array = arrays [ i ] ; 
 - std : : vector < size _ t > col _ indices ; 
 - for ( int j = 0 ; j < jni _ long _ array . len ( ) ; + + j ) { 
 - col _ indices . push _ back ( static _ cast < size _ t > ( jni _ long _ array [ j ] ) ) ; 
 - } 
 - indices . push _ back ( std : : move ( col _ indices ) ) ; 
 - if ( ascending ) { 
 - ascending _ list . push _ back ( static _ cast < bool > ( ascending _ array [ i ] ) ) ; 
 - } 
 - } 
 - 
 - SortDescriptor * descriptor = ascending ? 
 - new SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) , std : : move ( ascending _ list ) ) 
 - : new SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) ) ; 
 - return reinterpret _ cast < jlong > ( descriptor ) ; 
 - } CATCH _ STD ( ) 
 - 
 - return reinterpret _ cast < jlong > ( nullptr ) ; 
 - } 
 - 
 - JNIEXPORT void JNICALL 
 - Java _ io _ realm _ internal _ SortDescriptor _ nativeClose ( JNIEnv * env , jclass , jlong ptr ) { 
 - try { 
 - SortDescriptor * descriptor = reinterpret _ cast < SortDescriptor * > ( ptr ) ; 
 - delete descriptor ; 
 - } CATCH _ STD ( ) 
 - } 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index c6b60da . . 7a2fe1c 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 23 , 10 + 23 , 12 @ @ 
 # include < results . hpp > 
 
 # include " util . hpp " 
 + # include " java _ sort _ descriptor . hpp " 
 # include " jni _ util / method . hpp " 
 
 using namespace realm ; 
 using namespace realm : : jni _ util ; 
 + using namespace realm : : _ impl ; 
 
 / / We need to control the life cycle of Results , weak ref of Java Collection object and the NotificationToken . 
 / / Wrap all three together , so when the Java Collection object gets GCed , all three of them will be invalidated . 
 @ @ - 107 , 7 + 109 , 7 @ @ static void finalize _ results ( jlong ptr ) 
 
 JNIEXPORT jlong JNICALL 
 Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared _ realm _ ptr , jlong query _ ptr , 
 - jlong sort _ desc _ native _ ptr , jlong distinct _ desc _ native _ ptr ) 
 + jobject sort _ desc , jobject distinct _ desc ) 
 { 
 TR _ ENTER ( ) 
 try { 
 @ @ - 117 , 11 + 119 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong 
 } 
 
 auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; 
 - auto sort _ desc _ ptr = reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; 
 - auto distinct _ desc _ ptr = reinterpret _ cast < SortDescriptor * > ( distinct _ desc _ native _ ptr ) ; 
 Results results ( shared _ realm , * query , 
 - sort _ desc _ ptr ? * sort _ desc _ ptr : SortDescriptor ( ) , 
 - distinct _ desc _ ptr ? * distinct _ desc _ ptr : SortDescriptor ( ) ) ; 
 + SortDescriptor ( JavaSortDescriptor ( env , sort _ desc ) ) , 
 + SortDescriptor ( JavaSortDescriptor ( env , distinct _ desc ) ) ) ; 
 auto wrapper = new ResultsWrapper ( std : : move ( results ) ) ; 
 if ( shared _ realm - > is _ in _ transaction ( ) ) { 
 wrapper - > switch _ to _ snapshot ( ) ; 
 @ @ - 274 , 13 + 274 , 12 @ @ Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong nat 
 } 
 
 JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlong sort _ desc _ native _ ptr ) 
 + Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jobject sort _ desc ) 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 - auto sort _ descriptor = * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; 
 - auto sorted _ result = wrapper - > get _ results ( ) . sort ( std : : move ( sort _ descriptor ) ) ; 
 + auto sorted _ result = wrapper - > get _ results ( ) . sort ( JavaSortDescriptor ( env , sort _ desc ) ) ; 
 return reinterpret _ cast < jlong > ( new ResultsWrapper ( std : : move ( sorted _ result ) ) ) ; 
 } CATCH _ STD ( ) 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / java _ sort _ descriptor . cpp b / realm / realm - library / src / main / cpp / java _ sort _ descriptor . cpp 
 new file mode 100644 
 index 0000000 . . 1e3f050 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / java _ sort _ descriptor . cpp 
 @ @ - 0 , 0 + 1 , 66 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + 
 + # include " java _ sort _ descriptor . hpp " 
 + # include " jni _ util / method . hpp " 
 + 
 + using namespace realm ; 
 + using namespace realm : : _ impl ; 
 + using namespace realm : : jni _ util ; 
 + 
 + JavaSortDescriptor : : operator realm : : SortDescriptor ( ) const noexcept 
 + { 
 + if ( m _ sort _ desc _ obj = = nullptr ) { 
 + return SortDescriptor ( ) ; 
 + } 
 + 
 + / / Cache the method IDs . 
 + static JniMethod getColumnIndices = JniMethod ( m _ env , m _ sort _ desc _ obj , " getColumnIndices " , " ( ) [ [ J " ) ; 
 + static JniMethod getAscendings = JniMethod ( m _ env , m _ sort _ desc _ obj , " getAscendings " , " ( ) [ Z " ) ; 
 + static JniMethod getTablePtr = JniMethod ( m _ env , m _ sort _ desc _ obj , " getTablePtr " , " ( ) J " ) ; 
 + 
 + jobjectArray column _ indices = 
 + static _ cast < jobjectArray > ( m _ env - > CallObjectMethod ( m _ sort _ desc _ obj , getColumnIndices ) ) ; 
 + jbooleanArray ascendings = 
 + static _ cast < jbooleanArray > ( m _ env - > CallObjectMethod ( m _ sort _ desc _ obj , getAscendings ) ) ; 
 + jlong table _ ptr = m _ env - > CallLongMethod ( m _ sort _ desc _ obj , getTablePtr ) ; 
 + 
 + JniArrayOfArrays < JniLongArray , jlongArray > arrays ( m _ env , column _ indices ) ; 
 + JniBooleanArray ascending _ array ( m _ env , ascendings ) ; 
 + jsize arr _ len = arrays . len ( ) ; 
 + 
 + std : : vector < std : : vector < size _ t > > indices ; 
 + std : : vector < bool > ascending _ list ; 
 + 
 + for ( int i = 0 ; i < arr _ len ; + + i ) { 
 + JniLongArray & jni _ long _ array = arrays [ i ] ; 
 + std : : vector < size _ t > col _ indices ; 
 + for ( int j = 0 ; j < jni _ long _ array . len ( ) ; + + j ) { 
 + col _ indices . push _ back ( static _ cast < size _ t > ( jni _ long _ array [ j ] ) ) ; 
 + } 
 + indices . push _ back ( std : : move ( col _ indices ) ) ; 
 + if ( ascendings ) { 
 + ascending _ list . push _ back ( static _ cast < bool > ( ascending _ array [ i ] ) ) ; 
 + } 
 + } 
 + 
 + return ascendings ? 
 + SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) , std : : move ( ascending _ list ) ) 
 + : SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) ) ; 
 + } 
 + 
 + 
 diff - - git a / realm / realm - library / src / main / cpp / java _ sort _ descriptor . hpp b / realm / realm - library / src / main / cpp / java _ sort _ descriptor . hpp 
 new file mode 100644 
 index 0000000 . . 8c26543 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / java _ sort _ descriptor . hpp 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # ifndef JAVA _ SORT _ DESCRIPTOR _ HPP 
 + # define JAVA _ SORT _ DESCRIPTOR _ HPP 
 + 
 + # include < jni . h > 
 + # include < realm / views . hpp > 
 + 
 + namespace realm { 
 + namespace _ impl { 
 + 
 + / / For converting a Java SortDescriptor object to realm : : SortDescriptor . 
 + / / This class is not designed to be used across JNI calls . So it doesn ' t acquire a reference to the given Java object . 
 + / / We don ' t holding a pointer to the SortDescriptor in the Java object like normally we do is because of the ObjectStore 
 + / / always consume the SortDescriptor by calling the move constructor . Holding a empty SortDescriptor in Java level 
 + / / doesn ' t make too much sense and causes troubles with memory management . 
 + class JavaSortDescriptor { 
 + public : 
 + JavaSortDescriptor ( JNIEnv * env , jobject sort _ desc _ obj ) : m _ env ( env ) , m _ sort _ desc _ obj ( sort _ desc _ obj ) { } 
 + 
 + JavaSortDescriptor ( const JavaSortDescriptor & ) = delete ; 
 + JavaSortDescriptor & operator = ( const JavaSortDescriptor & ) = delete ; 
 + JavaSortDescriptor ( JavaSortDescriptor & & ) = delete ; 
 + JavaSortDescriptor & operator = ( JavaSortDescriptor & & ) = delete ; 
 + 
 + operator realm : : SortDescriptor ( ) const noexcept ; 
 + 
 + private : 
 + JNIEnv * m _ env ; 
 + jobject m _ sort _ desc _ obj ; 
 + } ; 
 + 
 + } / / namespace _ impl 
 + } / / namespace realm 
 + # endif / / JAVA _ SORT _ DESCRIPTOR _ HPP 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 909578d . . 1994672 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 301 , 15 + 301 , 12 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen 
 public RealmResults < E > sort ( String fieldName ) { 
 SortDescriptor sortDescriptor = 
 SortDescriptor . getInstanceForSort ( collection . getTable ( ) , fieldName , Sort . ASCENDING ) ; 
 - try { 
 - Collection sortedCollection = collection . sort ( sortDescriptor ) ; 
 - if ( className ! = null ) { 
 - return new RealmResults < E > ( realm , sortedCollection , className ) ; 
 - } else { 
 - return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; 
 - } 
 - } finally { 
 - sortDescriptor . close ( ) ; 
 + 
 + Collection sortedCollection = collection . sort ( sortDescriptor ) ; 
 + if ( className ! = null ) { 
 + return new RealmResults < E > ( realm , sortedCollection , className ) ; 
 + } else { 
 + return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; 
 } 
 } 
 
 @ @ - 320 , 15 + 317 , 12 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen 
 public RealmResults < E > sort ( String fieldName , Sort sortOrder ) { 
 SortDescriptor sortDescriptor = 
 SortDescriptor . getInstanceForSort ( collection . getTable ( ) , fieldName , sortOrder ) ; 
 - try { 
 - Collection sortedCollection = collection . sort ( sortDescriptor ) ; 
 - if ( className ! = null ) { 
 - return new RealmResults < E > ( realm , sortedCollection , className ) ; 
 - } else { 
 - return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; 
 - } 
 - } finally { 
 - sortDescriptor . close ( ) ; 
 + 
 + Collection sortedCollection = collection . sort ( sortDescriptor ) ; 
 + if ( className ! = null ) { 
 + return new RealmResults < E > ( realm , sortedCollection , className ) ; 
 + } else { 
 + return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; 
 } 
 } 
 
 @ @ - 339 , 15 + 333 , 12 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen 
 public RealmResults < E > sort ( String fieldNames [ ] , Sort sortOrders [ ] ) { 
 SortDescriptor sortDescriptor = 
 SortDescriptor . getInstanceForSort ( collection . getTable ( ) , fieldNames , sortOrders ) ; 
 - try { 
 - Collection sortedCollection = collection . sort ( sortDescriptor ) ; 
 - if ( className ! = null ) { 
 - return new RealmResults < E > ( realm , sortedCollection , className ) ; 
 - } else { 
 - return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; 
 - } 
 - } finally { 
 - sortDescriptor . close ( ) ; 
 + 
 + Collection sortedCollection = collection . sort ( sortDescriptor ) ; 
 + if ( className ! = null ) { 
 + return new RealmResults < E > ( realm , sortedCollection , className ) ; 
 + } else { 
 + return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; 
 } 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index 2956b93 . . c91eff3 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 85 , 8 + 85 , 8 @ @ public final class Collection implements NativeObject { 
 query . validateQuery ( ) ; 
 
 this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , 
 - sortDescriptor = = null ? 0 : sortDescriptor . getNativePtr ( ) , 
 - distinctDescriptor = = null ? 0 : distinctDescriptor . getNativePtr ( ) ) ; 
 + sortDescriptor , 
 + distinctDescriptor ) ; 
 
 this . sharedRealm = sharedRealm ; 
 this . context = sharedRealm . context ; 
 @ @ - 162 , 7 + 162 , 7 @ @ public final class Collection implements NativeObject { 
 } 
 
 public Collection sort ( SortDescriptor sortDescriptor ) { 
 - return new Collection ( sharedRealm , query , nativeSort ( nativePtr , sortDescriptor . getNativePtr ( ) ) ) ; 
 + return new Collection ( sharedRealm , query , nativeSort ( nativePtr , sortDescriptor ) ) ; 
 } 
 
 public boolean contains ( UncheckedRow row ) { 
 @ @ - 241 , 7 + 241 , 7 @ @ public final class Collection implements NativeObject { 
 
 private static native long nativeGetFinalizerPtr ( ) ; 
 private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , 
 - long sortDescNativePtr , long distinctDescNativePtr ) ; 
 + SortDescriptor sortDesc , SortDescriptor distinctDesc ) ; 
 @ SuppressWarnings ( " unused " ) / / Not used for now 
 private static native long nativeCreateSnapshot ( long nativePtr ) ; 
 private static native long nativeGetRow ( long nativePtr , int index ) ; 
 @ @ - 251 , 7 + 251 , 7 @ @ public final class Collection implements NativeObject { 
 private static native void nativeClear ( long nativePtr ) ; 
 private static native long nativeSize ( long nativePtr ) ; 
 private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; 
 - private static native long nativeSort ( long nativePtr , long sortDescNativePtr ) ; 
 + private static native long nativeSort ( long nativePtr , SortDescriptor sortDesc ) ; 
 private static native boolean nativeDeleteFirst ( long nativePtr ) ; 
 private static native boolean nativeDeleteLast ( long nativePtr ) ; 
 private static native void nativeDelete ( long nativePtr , long index ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 index 5ca4b97 . . 051149f 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 @ @ - 16 , 18 + 16 , 27 @ @ 
 
 package io . realm . internal ; 
 
 - import java . io . * ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 
 import io . realm . RealmFieldType ; 
 import io . realm . Sort ; 
 
 - public class SortDescriptor implements Closeable { 
 + / * * 
 + * Java class to present the same name core class in Java . This can be converted to a cpp realm : : SortDescriptor object 
 + * through realm : : _ impl : : JavaSortDescriptor . 
 + * < p > 
 + * NOTE : Since the column indices are determined when constructing the object with the given table ' s status , the indices 
 + * could be wrong when schema changes . Always create and consume the instance when needed , DON ' T store a SortDescriptor 
 + * and use it whenever the ShareGroup can be in different versions . 
 + * / 
 + @ KeepMember 
 + public class SortDescriptor { 
 
 private final long [ ] [ ] columnIndices ; 
 private final boolean [ ] ascendings ; 
 - private long nativePtr = 0 ; 
 + private final Table table ; 
 + 
 final static List < RealmFieldType > validFieldTypesForSort = Arrays . asList ( 
 RealmFieldType . BOOLEAN , RealmFieldType . INTEGER , RealmFieldType . FLOAT , RealmFieldType . DOUBLE , 
 RealmFieldType . STRING , RealmFieldType . DATE ) ; 
 @ @ - 39 , 11 + 48 , 6 @ @ public class SortDescriptor implements Closeable { 
 this ( table , new long [ ] [ ] { columnIndices } , null ) ; 
 } 
 
 - / / Internal use only . For JNI testing . 
 - SortDescriptor ( Table table , long [ ] columnIndices , Sort sortOrder ) { 
 - this ( table , new long [ ] [ ] { columnIndices } , new Sort [ ] { sortOrder } ) ; 
 - } 
 - 
 private SortDescriptor ( Table table , long [ ] [ ] columnIndices , Sort [ ] sortOrders ) { 
 if ( sortOrders ! = null ) { 
 ascendings = new boolean [ sortOrders . length ] ; 
 @ @ - 55 , 7 + 59 , 7 @ @ public class SortDescriptor implements Closeable { 
 } 
 
 this . columnIndices = columnIndices ; 
 - nativePtr = nativeCreate ( table . getNativePtr ( ) , columnIndices , ascendings ) ; 
 + this . table = table ; 
 } 
 
 public static SortDescriptor getInstanceForSort ( Table table , String fieldDescription , Sort sortOrder ) { 
 @ @ - 102 , 10 + 106 , 6 @ @ public class SortDescriptor implements Closeable { 
 return new SortDescriptor ( table , columnIndices , null ) ; 
 } 
 
 - public long getNativePtr ( ) { 
 - return nativePtr ; 
 - } 
 - 
 private static void checkFieldTypeForSort ( FieldDescriptor descriptor , String fieldDescriptions ) { 
 for ( RealmFieldType aValidFieldTypesForSort : validFieldTypesForSort ) { 
 if ( aValidFieldTypesForSort = = descriptor . getFieldType ( ) ) { 
 @ @ - 130 , 20 + 130 , 22 @ @ public class SortDescriptor implements Closeable { 
 } 
 } 
 
 + / / Called by JNI . 
 + @ KeepMember 
 long [ ] [ ] getColumnIndices ( ) { 
 return columnIndices ; 
 } 
 
 + / / Called by JNI . 
 + @ KeepMember 
 boolean [ ] getAscendings ( ) { 
 return ascendings ; 
 } 
 
 - @ Override 
 - public void close ( ) { 
 - nativeClose ( nativePtr ) ; 
 - nativePtr = 0 ; 
 + / / Called by JNI . 
 + @ KeepMember 
 + @ SuppressWarnings ( " unused " ) 
 + private long getTablePtr ( ) { 
 + return table . getNativePtr ( ) ; 
 } 
 - 
 - private static native long nativeCreate ( long tablePtr , long [ ] [ ] columnIndices , boolean [ ] ascending ) ; 
 - private static native void nativeClose ( long ptr ) ; 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 index 815aabc . . 648e304 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import io . realm . RealmChangeListener ; 
 import io . realm . RealmConfiguration ; 
 import io . realm . RealmFieldType ; 
 import io . realm . TestHelper ; 
 + import io . realm . internal . android . AndroidRealmNotifier ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . rule . RunTestInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 @ @ - 56 , 7 + 57 , 7 @ @ public class CollectionTests { 
 @ Before 
 public void setUp ( ) { 
 config = configFactory . createConfiguration ( ) ; 
 - sharedRealm = SharedRealm . getInstance ( config ) ; 
 + sharedRealm = getSharedRealm ( ) ; 
 populateData ( ) ; 
 } 
 
 @ @ - 65 , 6 + 66 , 10 @ @ public class CollectionTests { 
 sharedRealm . close ( ) ; 
 } 
 
 + private SharedRealm getSharedRealm ( ) { 
 + return SharedRealm . getInstance ( config , new AndroidRealmNotifier ( ) , null ) ; 
 + } 
 + 
 private void populateData ( ) { 
 sharedRealm . beginTransaction ( ) ; 
 table = sharedRealm . getTable ( " test _ table " ) ; 
 @ @ - 101 , 7 + 106 , 7 @ @ public class CollectionTests { 
 new Thread ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 - SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; 
 + SharedRealm sharedRealm = getSharedRealm ( ) ; 
 addRow ( sharedRealm ) ; 
 sharedRealm . close ( ) ; 
 latch . countDown ( ) ; 
 @ @ - 274 , 7 + 279 , 7 @ @ public class CollectionTests { 
 @ Test 
 @ RunTestInLooperThread 
 public void addListener _ queryNotReturned ( ) { 
 - final SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; 
 + final SharedRealm sharedRealm = getSharedRealm ( ) ; 
 Table table = sharedRealm . getTable ( " test _ table " ) ; 
 
 final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 @ @ - 295 , 7 + 300 , 7 @ @ public class CollectionTests { 
 @ Test 
 @ RunTestInLooperThread 
 public void addListener _ queryReturned ( ) { 
 - final SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; 
 + final SharedRealm sharedRealm = getSharedRealm ( ) ; 
 Table table = sharedRealm . getTable ( " test _ table " ) ; 
 
 final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 @ @ - 319 , 7 + 324 , 7 @ @ public class CollectionTests { 
 @ Test 
 @ RunTestInLooperThread 
 public void addListener _ queryNotReturnedLocalAndRemoteCommit ( ) { 
 - final SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; 
 + final SharedRealm sharedRealm = getSharedRealm ( ) ; 
 Table table = sharedRealm . getTable ( " test _ table " ) ; 
 
 final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 @ @ - 342 , 7 + 347 , 7 @ @ public class CollectionTests { 
 @ Test 
 @ RunTestInLooperThread 
 public void addListener _ queryNotReturnedLocalCommitOnly ( ) { 
 - final SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; 
 + final SharedRealm sharedRealm = getSharedRealm ( ) ; 
 Table table = sharedRealm . getTable ( " test _ table " ) ; 
 
 final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 @ @ - 364 , 7 + 369 , 7 @ @ public class CollectionTests { 
 @ Test 
 @ RunTestInLooperThread 
 public void addListener _ queryReturnedLocalCommitOnly ( ) { 
 - final SharedRealm sharedRealm = SharedRealm . getInstance ( config ) ; 
 + final SharedRealm sharedRealm = getSharedRealm ( ) ; 
 Table table = sharedRealm . getTable ( " test _ table " ) ; 
 
 final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 @ @ - 383 , 11 + 388 , 35 @ @ public class CollectionTests { 
 } 
 
 @ Test 
 - public void size _ doesNotChangeAfterLocalCommit ( ) { 
 + public void switchSnapshot _ nonLooperThread ( ) { 
 final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 assertEquals ( collection . size ( ) , 4 ) ; 
 addRow ( sharedRealm ) ; 
 + / / The results is backed by snapshot now . 
 assertEquals ( collection . size ( ) , 4 ) ; 
 sharedRealm . refresh ( ) ; 
 + / / The results is switched back to the original Results . 
 + assertEquals ( collection . size ( ) , 5 ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void switchSnapshot _ looperThread ( ) { 
 + final SharedRealm sharedRealm = getSharedRealm ( ) ; 
 + final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 + looperThread . keepStrongReference . add ( collection ) ; 
 + assertEquals ( collection . size ( ) , 4 ) ; 
 + looperThread . postRunnable ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + / / The results is switched back to the original Results . 
 + assertEquals ( collection . size ( ) , 5 ) ; 
 + sharedRealm . close ( ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + addRow ( sharedRealm ) ; 
 + / / The results is backed by snapshot now . 
 + assertEquals ( collection . size ( ) , 4 ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index 0c82e4b . . 6203d61 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 
 # include " util . hpp " 
 # include " jni _ util / method . hpp " 
 + # include " jni _ util / log . hpp " 
 
 using namespace realm ; 
 using namespace realm : : jni _ util ; 
 @ @ - 32 , 7 + 33 , 6 @ @ using namespace realm : : jni _ util ; 
 / / Wrap all three together , so when the Java Collection object gets GCed , all three of them will be invalidated . 
 struct ResultsWrapper { 
 jobject m _ collection _ weak _ ref ; 
 - Results m _ results ; 
 NotificationToken m _ notification _ token ; 
 
 ResultsWrapper ( Results & & results ) 
 @ @ - 52 , 6 + 52 , 36 @ @ struct ResultsWrapper { 
 env - > DeleteWeakGlobalRef ( m _ collection _ weak _ ref ) ; 
 } 
 } 
 + 
 + inline Results & get _ original _ results ( ) 
 + { 
 + return m _ results ; 
 + } 
 + 
 + inline Results & get _ results ( ) 
 + { 
 + if ( m _ snapshot . get _ mode ( ) = = Results : : Mode : : Empty ) { 
 + Log : : e ( " Using origin . " ) ; 
 + return m _ results ; 
 + } else { 
 + Log : : e ( " Using snapshot . " ) ; 
 + return m _ snapshot ; 
 + } 
 + } 
 + 
 + inline void switch _ to _ snapshot ( ) 
 + { 
 + m _ snapshot = m _ results . snapshot ( ) ; 
 + } 
 + 
 + inline void switch _ to _ origin ( ) 
 + { 
 + m _ snapshot = Results ( ) ; 
 + } 
 + 
 + private : 
 + Results m _ results ; 
 + Results m _ snapshot ; 
 } ; 
 
 static void finalize _ results ( jlong ptr ) ; 
 @ @ - 80 , 6 + 110 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong 
 sort _ desc _ ptr ? * sort _ desc _ ptr : SortDescriptor ( ) , 
 distinct _ desc _ ptr ? * distinct _ desc _ ptr : SortDescriptor ( ) ) ; 
 auto wrapper = new ResultsWrapper ( std : : move ( results ) ) ; 
 + if ( shared _ realm - > is _ in _ transaction ( ) ) { 
 + wrapper - > switch _ to _ snapshot ( ) ; 
 + } 
 
 return reinterpret _ cast < jlong > ( wrapper ) ; 
 } CATCH _ STD ( ) 
 @ @ - 92 , 7 + 125 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlon 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 - auto snapshot = wrapper - > m _ results . snapshot ( ) ; 
 + auto snapshot = wrapper - > get _ original _ results ( ) ; 
 return reinterpret _ cast < jlong > ( new Results ( snapshot ) ) ; 
 } CATCH _ STD ( ) 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 @ @ - 105 , 7 + 138 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeContains ( JNIEnv * env , jclass , jlong nati 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 auto row = reinterpret _ cast < Row * > ( native _ row _ ptr ) ; 
 - size _ t index = wrapper - > m _ results . index _ of ( * row ) ; 
 + size _ t index = wrapper - > get _ results ( ) . index _ of ( * row ) ; 
 return to _ jbool ( index ! = not _ found ) ; 
 } CATCH _ STD ( ) ; 
 return JNI _ FALSE ; 
 @ @ - 117 , 7 + 150 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeGetRow ( JNIEnv * env , jclass , jlong native 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 - auto row = wrapper - > m _ results . get ( static _ cast < size _ t > ( index ) ) ; 
 + auto row = wrapper - > get _ results ( ) . get ( static _ cast < size _ t > ( index ) ) ; 
 return reinterpret _ cast < jlong > ( new Row ( std : : move ( row ) ) ) ; 
 } CATCH _ STD ( ) 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 @ @ - 129 , 7 + 162 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeFirstRow ( JNIEnv * env , jclass , jlong nati 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 - auto optional _ row = wrapper - > m _ results . first ( ) ; 
 + auto optional _ row = wrapper - > get _ results ( ) . first ( ) ; 
 if ( optional _ row ) { 
 return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; 
 } 
 @ @ - 144 , 7 + 177 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeLastRow ( JNIEnv * env , jclass , jlong nativ 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 - auto optional _ row = wrapper - > m _ results . last ( ) ; 
 + auto optional _ row = wrapper - > get _ results ( ) . last ( ) ; 
 if ( optional _ row ) { 
 return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; 
 } 
 @ @ - 158 , 7 + 191 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeClear ( JNIEnv * env , jclass , jlong native _ 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 - wrapper - > m _ results . clear ( ) ; 
 + wrapper - > get _ results ( ) . clear ( ) ; 
 } CATCH _ STD ( ) 
 } 
 
 @ @ - 168 , 7 + 201 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeSize ( JNIEnv * env , jclass , jlong native _ p 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 - return static _ cast < jlong > ( wrapper - > m _ results . size ( ) ) ; 
 + return static _ cast < jlong > ( wrapper - > get _ results ( ) . size ( ) ) ; 
 } CATCH _ STD ( ) 
 return 0 ; 
 } 
 @ @ - 185 , 16 + 218 , 16 @ @ Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong nat 
 Optional < Mixed > value ; 
 switch ( agg _ func ) { 
 case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MINIMUM : 
 - value = wrapper - > m _ results . min ( index ) ; 
 + value = wrapper - > get _ results ( ) . min ( index ) ; 
 break ; 
 case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MAXIMUM : 
 - value = wrapper - > m _ results . max ( index ) ; 
 + value = wrapper - > get _ results ( ) . max ( index ) ; 
 break ; 
 case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ AVERAGE : 
 - value = wrapper - > m _ results . average ( index ) ; 
 + value = wrapper - > get _ results ( ) . average ( index ) ; 
 break ; 
 case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ SUM : 
 - value = wrapper - > m _ results . sum ( index ) ; 
 + value = wrapper - > get _ results ( ) . sum ( index ) ; 
 break ; 
 default : 
 REALM _ UNREACHABLE ( ) ; 
 @ @ - 228 , 7 + 261 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ p 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 auto sort _ descriptor = * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; 
 - auto sorted _ result = wrapper - > m _ results . sort ( std : : move ( sort _ descriptor ) ) ; 
 + auto sorted _ result = wrapper - > get _ results ( ) . sort ( std : : move ( sort _ descriptor ) ) ; 
 return reinterpret _ cast < jlong > ( new ResultsWrapper ( std : : move ( sorted _ result ) ) ) ; 
 } CATCH _ STD ( ) 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 @ @ - 257 , 7 + 290 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeStartListening ( JNIEnv * env , jobject inst 
 env - > CallVoidMethod ( wrapper - > m _ collection _ weak _ ref , notify _ change _ listeners ) ; 
 } ; 
 
 - wrapper - > m _ notification _ token = wrapper - > m _ results . add _ notification _ callback ( cb ) ; 
 + wrapper - > m _ notification _ token = wrapper - > get _ original _ results ( ) . add _ notification _ callback ( cb ) ; 
 } CATCH _ STD ( ) 
 } 
 
 @ @ - 286 , 7 + 319 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeWhere ( JNIEnv * env , jclass , jlong native _ 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 
 - Query * query = new Query ( wrapper - > m _ results . get _ query ( ) ) ; 
 + Query * query = new Query ( wrapper - > get _ original _ results ( ) . get _ query ( ) ) ; 
 return reinterpret _ cast < jlong > ( query ) ; 
 } CATCH _ STD ( ) 
 return 0 ; 
 @ @ - 300 , 7 + 333 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeIndexOf ( JNIEnv * env , jclass , jlong nativ 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 auto row = reinterpret _ cast < Row * > ( row _ native _ ptr ) ; 
 
 - return static _ cast < jlong > ( wrapper - > m _ results . index _ of ( * row ) ) ; 
 + return static _ cast < jlong > ( wrapper - > get _ results ( ) . index _ of ( * row ) ) ; 
 } CATCH _ STD ( ) 
 return npos ; 
 } 
 @ @ - 314 , 8 + 347 , 28 @ @ Java _ io _ realm _ internal _ Collection _ nativeIndexOfBySourceRowIndex ( JNIEnv * env , jcl 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 auto index = static _ cast < size _ t > ( source _ row _ index ) ; 
 
 - return static _ cast < jlong > ( wrapper - > m _ results . index _ of ( index ) ) ; 
 + return static _ cast < jlong > ( wrapper - > get _ results ( ) . index _ of ( index ) ) ; 
 } CATCH _ STD ( ) 
 return npos ; 
 
 } 
 + 
 + JNIEXPORT void JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeEnableSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 + wrapper - > switch _ to _ snapshot ( ) ; 
 + } CATCH _ STD ( ) 
 + } 
 + 
 + JNIEXPORT void JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeDisableSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 + wrapper - > switch _ to _ origin ( ) ; 
 + } CATCH _ STD ( ) 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index a4b714c . . bd95936 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import io . realm . annotations . RealmClass ; 
 import io . realm . internal . InvalidRow ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 + import io . realm . internal . SharedRealm ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 270 , 7 + 271 , 7 @ @ public abstract class RealmObject implements RealmModel { 
 RealmObjectProxy proxy = ( RealmObjectProxy ) object ; 
 BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; 
 realm . checkIfValid ( ) ; 
 - realm . sharedRealm . getCapabilities ( ) . checkCanDeliverNotification ( " Listener cannot be added . " ) ; 
 + SharedRealm . getCapabilities ( ) . checkCanDeliverNotification ( " Listener cannot be added . " ) ; 
 / / noinspection unchecked 
 proxy . realmGet $ proxyState ( ) . addChangeListener ( listener ) ; 
 } else { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index 70e4b5d . . 3098167 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 88 , 6 + 88 , 7 @ @ public final class Collection implements NativeObject { 
 this . context = sharedRealm . context ; 
 this . query = query ; 
 this . context . addReference ( this ) ; 
 + sharedRealm . addCollection ( this ) ; 
 } 
 
 public Collection ( SharedRealm sharedRealm , TableQuery query , 
 @ @ - 107 , 6 + 108 , 7 @ @ public final class Collection implements NativeObject { 
 this . nativePtr = nativePtr ; 
 
 this . context . addReference ( this ) ; 
 + sharedRealm . addCollection ( this ) ; 
 } 
 
 @ Override 
 @ @ - 207 , 6 + 209 , 14 @ @ public final class Collection implements NativeObject { 
 } 
 } 
 
 + void enableSnapshot ( ) { 
 + nativeEnableSnapshot ( nativePtr ) ; 
 + } 
 + 
 + void disableSnapshot ( ) { 
 + nativeDisableSnapshot ( nativePtr ) ; 
 + } 
 + 
 private static native long nativeGetFinalizerPtr ( ) ; 
 private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , 
 long sortDescNativePtr , long distinctDescNativePtr ) ; 
 @ @ - 226 , 4 + 236 , 6 @ @ public final class Collection implements NativeObject { 
 private static native long nativeWhere ( long nativePtr ) ; 
 private static native long nativeIndexOf ( long nativePtr , long rowNativePtr ) ; 
 private static native long nativeIndexOfBySourceRowIndex ( long nativePtr , long sourceRowIndex ) ; 
 + private static native void nativeEnableSnapshot ( long nativePtr ) ; 
 + private static native void nativeDisableSnapshot ( long nativePtr ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 index f6b9cfd . . 4db2c2e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import io . realm . RealmChangeListener ; 
 * other thread / process changes the Realm file . 
 * / 
 @ Keep 
 - public class RealmNotifier implements Closeable { 
 + public abstract class RealmNotifier implements Closeable { 
 
 private static class RealmObserverPair < T > extends ObserverPair < T , RealmChangeListener < T > > { 
 public RealmObserverPair ( T observer , RealmChangeListener < T > listener ) { 
 @ @ - 95 , 4 + 95 , 6 @ @ public class RealmNotifier implements Closeable { 
 public void removeAllChangeListeners ( ) { 
 realmObserverPairs . clear ( ) ; 
 } 
 + 
 + public abstract void postAtFrontOfQueue ( Runnable runnable ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index 22c91bd . . 389076c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 18 , 11 + 18 , 13 @ @ package io . realm . internal ; 
 
 import java . io . Closeable ; 
 import java . io . File ; 
 + import java . lang . ref . WeakReference ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 
 import io . realm . RealmConfiguration ; 
 import io . realm . RealmSchema ; 
 import io . realm . internal . android . AndroidCapabilities ; 
 - import io . realm . internal . async . BadVersionException ; 
 
 public final class SharedRealm implements Closeable { 
 
 @ @ - 107 , 6 + 109 , 7 @ @ public final class SharedRealm implements Closeable { 
 public final RealmNotifier realmNotifier ; 
 public final RowNotifier rowNotifier ; 
 public final ObjectServerFacade objectServerFacade ; 
 + public final List < WeakReference < Collection > > collections = new ArrayList < WeakReference < Collection > > ( ) ; 
 
 public static class VersionID implements Comparable < VersionID > { 
 public final long version ; 
 @ @ - 227 , 14 + 230 , 24 @ @ public final class SharedRealm implements Closeable { 
 public void beginTransaction ( ) { 
 nativeBeginTransaction ( nativePtr ) ; 
 invokeSchemaChangeListenerIfSchemaChanged ( ) ; 
 + enableCollectionSnapshot ( ) ; 
 } 
 
 public void commitTransaction ( ) { 
 nativeCommitTransaction ( nativePtr ) ; 
 + if ( realmNotifier ! = null & & ! collections . isEmpty ( ) ) { 
 + realmNotifier . postAtFrontOfQueue ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + disableCollectionSnapshot ( ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 
 public void cancelTransaction ( ) { 
 nativeCancelTransaction ( nativePtr ) ; 
 + disableCollectionSnapshot ( ) ; 
 } 
 
 public boolean isInTransaction ( ) { 
 @ @ - 289 , 6 + 302 , 7 @ @ public final class SharedRealm implements Closeable { 
 public void refresh ( ) { 
 nativeRefresh ( nativePtr ) ; 
 invokeSchemaChangeListenerIfSchemaChanged ( ) ; 
 + disableCollectionSnapshot ( ) ; 
 } 
 
 public SharedRealm . VersionID getVersionID ( ) { 
 @ @ - 336 , 7 + 350 , 7 @ @ public final class SharedRealm implements Closeable { 
 return nativeIsAutoRefresh ( nativePtr ) ; 
 } 
 
 - public Capabilities getCapabilities ( ) { 
 + public static Capabilities getCapabilities ( ) { 
 return capabilities ; 
 } 
 
 @ @ - 380 , 6 + 394 , 33 @ @ public final class SharedRealm implements Closeable { 
 } 
 } 
 
 + / / Should only be called by Collection ' s constructor 
 + void addCollection ( Collection collection ) { 
 + collections . add ( new WeakReference < Collection > ( collection ) ) ; 
 + } 
 + 
 + private void enableCollectionSnapshot ( ) { 
 + for ( WeakReference < Collection > collectionRef : collections ) { 
 + Collection collection = collectionRef . get ( ) ; 
 + if ( collection = = null ) { 
 + collections . remove ( collectionRef ) ; 
 + } else { 
 + collection . enableSnapshot ( ) ; 
 + } 
 + } 
 + } 
 + 
 + void disableCollectionSnapshot ( ) { 
 + for ( WeakReference < Collection > collectionRef : collections ) { 
 + Collection collection = collectionRef . get ( ) ; 
 + if ( collection = = null ) { 
 + collections . remove ( collectionRef ) ; 
 + } else { 
 + collection . disableSnapshot ( ) ; 
 + } 
 + } 
 + } 
 + 
 private static native void nativeInit ( String temporaryDirectoryPath ) ; 
 private static native long nativeCreateConfig ( String realmPath , byte [ ] key , byte schemaMode , boolean inMemory , 
 boolean cache , boolean disableFormatUpgrade , 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / android / AndroidRealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidRealmNotifier . java 
 new file mode 100644 
 index 0000000 . . 75e4c04 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidRealmNotifier . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package io . realm . internal . android ; 
 + 
 + import android . os . Handler ; 
 + import android . os . Looper ; 
 + 
 + import io . realm . internal . RealmNotifier ; 
 + import io . realm . internal . SharedRealm ; 
 + 
 + public class AndroidRealmNotifier extends RealmNotifier { 
 + private final Handler handler ; 
 + 
 + public AndroidRealmNotifier ( ) { 
 + if ( SharedRealm . getCapabilities ( ) . canDeliverNotification ( ) ) { 
 + handler = new Handler ( Looper . myLooper ( ) ) ; 
 + } else { 
 + handler = null ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void postAtFrontOfQueue ( Runnable runnable ) { 
 + if ( handler ! = null ) { 
 + handler . postAtFrontOfQueue ( runnable ) ; 
 + } 
 + } 
 + }
