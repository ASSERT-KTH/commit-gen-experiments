BLEU SCORE: 0.10682175159905853

TEST MSG: Remove dependencies from OS sync
GENERATED MSG: Remove unused exception conversions

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> index 5e0d400 . . 0792208 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> @ @ - 45 , 6 + 45 , 8 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeCreateConfig ( JNIEnv * env , jclass , jstri <nl> config - > sync _ config = std : : make _ shared < SyncConfig > ( ) ; <nl> config - > sync _ config - > user _ tag = token ; <nl> config - > sync _ config - > realm _ url = url ; <nl> + / / FIXME : Sync session is handled by java now . Remove this when adapt to OS sync implementation . <nl> + config - > sync _ config - > create _ session = false ; <nl> } <nl> return reinterpret _ cast < jlong > ( config ) ; <nl> } CATCH _ STD ( ) <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ SyncManager . cpp <nl> index c82b36b . . e701031 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ SyncManager . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ SyncManager . cpp <nl> @ @ - 16 , 31 + 16 , 33 @ @ <nl> <nl> # include < jni . h > <nl> <nl> - # include " io _ realm _ objectserver _ SyncManager . h " <nl> - # include " objectserver _ shared . hpp " <nl> - # include " util . hpp " <nl> - # include < realm / group _ shared . hpp > <nl> - # include < realm / replication . hpp > <nl> + # include < chrono > <nl> + # include < functional > <nl> + # include < mutex > <nl> + # include < vector > <nl> <nl> + # include < realm / group _ shared . hpp > <nl> # include < realm / sync / history . hpp > <nl> # include < realm / sync / client . hpp > <nl> - # include < realm / util / logger . hpp > <nl> - # include < mutex > <nl> - # include < thread > <nl> - # include < vector > <nl> - # include < chrono > <nl> - # include < functional > <nl> - # include < android / log . h > <nl> - # include < object - store / src / sync _ manager . hpp > <nl> + <nl> + # include " objectserver _ shared . hpp " <nl> + <nl> + # include " io _ realm _ objectserver _ SyncManager . h " <nl> <nl> using namespace realm ; <nl> - using namespace sync ; <nl> + using namespace realm : : sync ; <nl> <nl> - class AndroidLogger : public realm : : util : : RootLogger <nl> + std : : unique _ ptr < Client > sync _ client ; <nl> + <nl> + class AndroidLogger : public util : : RootLogger <nl> { <nl> public : <nl> void do _ log ( Level level , std : : string msg ) <nl> { <nl> + / / FIXME Sync only calls the logger from the thread running the client , so it should <nl> + / / be safe to store the env when starting the thread . <nl> + JNIEnv * env ; <nl> + g _ vm - > AttachCurrentThread ( & env , nullptr ) ; <nl> jmethodID log _ method ; <nl> switch ( level ) { <nl> case Level : : trace : log _ method = log _ trace ; break ; <nl> @ @ - 52 , 50 + 54 , 51 @ @ public : <nl> case Level : : fatal : log _ method = log _ fatal ; break ; <nl> case Level : : all : <nl> case Level : : off : <nl> - ThrowException ( sync _ client _ env , IllegalArgument , " Unknown logger argument : " + num _ to _ string ( level ) ) ; <nl> + ThrowException ( env , IllegalArgument , <nl> + util : : format ( " Unknown logger argument : % s . " , util : : Logger : : get _ level _ prefix ( level ) ) ) ; <nl> return ; <nl> } <nl> - log _ message ( sync _ client _ env , log _ method , msg . c _ str ( ) ) ; <nl> + log _ message ( env , log _ method , msg . c _ str ( ) ) ; <nl> } <nl> + static AndroidLogger & shared ( ) noexcept ; <nl> } ; <nl> <nl> + / / Not used by now <nl> struct AndroidLoggerFactory : public realm : : SyncLoggerFactory { <nl> - std : : unique _ ptr < realm : : util : : Logger > make _ logger ( realm : : util : : Logger : : Level level ) { <nl> + std : : unique _ ptr < util : : Logger > make _ logger ( util : : Logger : : Level level ) { <nl> auto logger = std : : make _ unique < AndroidLogger > ( ) ; <nl> logger - > set _ level _ threshold ( level ) ; <nl> - return std : : move ( logger ) ; <nl> + return std : : unique _ ptr < util : : Logger > ( std : : move ( logger ) ) ; <nl> } <nl> } s _ logger _ factory ; <nl> <nl> - / / Object Server global vars , see objectserver _ shared . hpp <nl> - std : : thread * sync _ client _ thread ; <nl> - JNIEnv * sync _ client _ env ; <nl> + / / TODO : Move to a better place & not needed after moving to OS <nl> + AndroidLogger & AndroidLogger : : shared ( ) noexcept { <nl> + static AndroidLogger logger ; <nl> + return logger ; <nl> + } <nl> <nl> JNIEXPORT void JNICALL Java _ io _ realm _ objectserver _ SyncManager _ nativeInitializeSyncClient <nl> ( JNIEnv * env , jclass ) <nl> { <nl> TR _ ENTER ( env ) <nl> - try { <nl> - / / Prepare Sync Client . It will be created on demand <nl> + if ( sync _ client ) return ; <nl> <nl> - SyncLoginFunction loginDelegate = [ = ] ( const Realm : : Config & ) { <nl> - / / Ignore this for now . We are handling this manually . <nl> - } ; <nl> + try { <nl> + AndroidLogger : : shared ( ) . set _ level _ threshold ( util : : Logger : : Level : : warn ) ; <nl> <nl> - SyncClientReadyFunction clientReadyDelegate = [ = ] ( const realm : : sync : : Client & ) { <nl> - / / Attaching thread to Java so we can perform JNI calls <nl> - JavaVMAttachArgs args ; <nl> - args . version = JNI _ VERSION _ 1 _ 6 ; <nl> - args . name = NULL ; / / java thread a name <nl> - args . group = NULL ; / / java thread group <nl> - g _ vm - > AttachCurrentThread ( & sync _ client _ env , & args ) ; <nl> - } ; <nl> + sync : : Client : : Config config ; <nl> + config . logger = & AndroidLogger : : shared ( ) ; <nl> + sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws <nl> + / / FIXME setup error handler for client <nl> + } CATCH _ STD ( ) <nl> + } <nl> <nl> - SyncManager & sync _ manager = SyncManager : : shared ( ) ; <nl> - sync _ manager . set _ login _ function ( loginDelegate ) ; <nl> - sync _ manager . set _ logger _ factory ( s _ logger _ factory ) ; <nl> - sync _ manager . set _ log _ level ( util : : Logger : : Level : : warn ) ; <nl> - sync _ manager . set _ client _ ready _ callback ( clientReadyDelegate ) ; <nl> + / / Create the thread from java side to avoid some strange errors when native throws . <nl> + JNIEXPORT void JNICALL <nl> + Java _ io _ realm _ objectserver _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) { <nl> + try { <nl> + sync _ client - > run ( ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> @ @ - 103 , 7 + 106 , 6 @ @ JNIEXPORT void JNICALL <nl> Java _ io _ realm _ objectserver _ SyncManager _ nativeSetSyncClientLogLevel ( JNIEnv * env , jclass , jint logLevel ) <nl> { <nl> util : : Logger : : Level native _ log _ level ; <nl> - bool valid _ log _ level = true ; <nl> switch ( logLevel ) { <nl> case io _ realm _ log _ LogLevel _ ALL : native _ log _ level = util : : Logger : : Level : : all ; break ; <nl> case io _ realm _ log _ LogLevel _ TRACE : native _ log _ level = util : : Logger : : Level : : trace ; break ; <nl> @ @ - 114 , 12 + 116 , 9 @ @ Java _ io _ realm _ objectserver _ SyncManager _ nativeSetSyncClientLogLevel ( JNIEnv * env , <nl> case io _ realm _ log _ LogLevel _ FATAL : native _ log _ level = util : : Logger : : Level : : fatal ; break ; <nl> case io _ realm _ log _ LogLevel _ OFF : native _ log _ level = util : : Logger : : Level : : off ; break ; <nl> default : <nl> - valid _ log _ level = false ; <nl> ThrowException ( env , IllegalArgument , " Invalid log level : " + logLevel ) ; <nl> + return ; <nl> } <nl> - if ( valid _ log _ level ) { <nl> - realm : : SyncManager : : shared ( ) . set _ log _ level ( native _ log _ level ) ; <nl> - } <nl> + / / FIXME : This call is not thread safe . Switch to OS implementation to make it thread safe . <nl> + AndroidLogger : : shared ( ) . set _ level _ threshold ( native _ log _ level ) ; <nl> } <nl> - <nl> - <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ internal _ SyncSession . cpp b / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ internal _ SyncSession . cpp <nl> index 18c5063 . . 5222166 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ internal _ SyncSession . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ internal _ SyncSession . cpp <nl> @ @ - 31 , 7 + 31 , 6 @ @ <nl> # include < chrono > <nl> # include < functional > <nl> # include < android / log . h > <nl> - # include < object - store / src / sync _ manager . hpp > <nl> <nl> using namespace std ; <nl> using namespace realm ; <nl> @ @ - 43 , 13 + 42 , 8 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ objectserver _ internal _ SyncSession _ nativeCr <nl> { <nl> TR _ ENTER ( env ) <nl> try { <nl> - Client * sync _ client = & SyncManager : : shared ( ) . get _ sync _ client ( ) - > client ; <nl> - if ( sync _ client = = NULL ) { <nl> - return 0 ; <nl> - } <nl> - <nl> JStringAccessor local _ path ( env , localRealmPath ) ; <nl> - JniSession * jni _ session = new JniSession ( env , sync _ client , local _ path , obj ) ; <nl> + JniSession * jni _ session = new JniSession ( env , local _ path , obj ) ; <nl> return reinterpret _ cast < jlong > ( jni _ session ) ; <nl> } CATCH _ STD ( ) <nl> return 0 ; <nl> diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store <nl> index b11ef9c . . 6b6012c 160000 <nl> - - - a / realm / realm - library / src / main / cpp / object - store <nl> + + + b / realm / realm - library / src / main / cpp / object - store <nl> @ @ - 1 + 1 @ @ <nl> - Subproject commit b11ef9c8b799f0f09059789ab8711853ce31b85f <nl> + Subproject commit 6b6012cb2d603e20bf82e19c453af0f9bf997894 <nl> diff - - git a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp <nl> index 9e44aa5 . . 7d9d824 100644 <nl> - - - a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp <nl> + + + b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp <nl> @ @ - 13 , 7 + 13 , 6 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> # ifndef REALM _ OBJECTSERVER _ SHARED _ HPP <nl> # define REALM _ OBJECTSERVER _ SHARED _ HPP <nl> <nl> @ @ - 25 , 15 + 24 , 10 @ @ <nl> # include < realm / sync / client . hpp > <nl> # include < realm / util / logger . hpp > <nl> # include < object - store / src / impl / realm _ coordinator . hpp > <nl> + # include < object - store / src / sync _ manager . hpp > <nl> <nl> # include " util . hpp " <nl> <nl> - / / maintain a reference to the threads allocated dynamically , to prevent deallocation <nl> - / / after Java _ io _ realm _ internal _ SharedGroup _ nativeStartSession completes . <nl> - / / To be released later , maybe on JNI _ OnUnload <nl> - extern std : : thread * sync _ client _ thread ; <nl> - extern JNIEnv * sync _ client _ env ; <nl> - <nl> <nl> / / Wrapper class for realm : : Session . This allows us to manage the C + + session and callback lifecycle correctly . <nl> / / TODO Use OS SyncSession instead <nl> @ @ - 41 , 24 + 35 , 30 @ @ class JniSession { <nl> <nl> public : <nl> JniSession ( ) = delete ; <nl> - JniSession ( JNIEnv * env , realm : : sync : : Client * sync _ client , std : : string local _ realm _ path , jobject java _ session _ obj ) <nl> + JniSession ( JNIEnv * env , std : : string local _ realm _ path , jobject java _ session _ obj ) <nl> { <nl> + / / FIXME : This doesn ' t look good . Temp solution before moving to OS sync . <nl> + extern std : : unique _ ptr < realm : : sync : : Client > sync _ client ; <nl> / / Get the coordinator for the given path , or null if there is none <nl> m _ sync _ session = new realm : : sync : : Session ( * sync _ client , local _ realm _ path ) ; <nl> - m _ global _ obj _ ref = env - > NewGlobalRef ( java _ session _ obj ) ; <nl> - jobject global _ obj _ ref _ tmp ( m _ global _ obj _ ref ) ; <nl> - auto sync _ transact _ callback = [ local _ realm _ path ] ( realm : : VersionID , realm : : VersionID ) { <nl> - auto coordinator = realm : : _ impl : : RealmCoordinator : : get _ existing _ coordinator ( realm : : StringData ( local _ realm _ path ) ) ; <nl> - if ( coordinator ) { <nl> - coordinator - > notify _ others ( ) ; <nl> - } <nl> - } ; <nl> - auto error _ handler = [ & , global _ obj _ ref _ tmp ] ( int error _ code , std : : string message ) { <nl> - std : : string log = num _ to _ string ( error _ code ) + " " + message . c _ str ( ) ; <nl> - log _ message ( sync _ client _ env , log _ debug , log . c _ str ( ) ) ; <nl> - } ; <nl> - m _ sync _ session - > set _ sync _ transact _ callback ( sync _ transact _ callback ) ; <nl> - m _ sync _ session - > set _ error _ handler ( std : : move ( error _ handler ) ) ; <nl> + m _ global _ obj _ ref = env - > NewGlobalRef ( java _ session _ obj ) ; <nl> + jobject global _ obj _ ref _ tmp ( m _ global _ obj _ ref ) ; <nl> + auto sync _ transact _ callback = [ local _ realm _ path ] ( realm : : VersionID , realm : : VersionID ) { <nl> + auto coordinator = realm : : _ impl : : RealmCoordinator : : get _ existing _ coordinator ( <nl> + realm : : StringData ( local _ realm _ path ) ) ; <nl> + if ( coordinator ) { <nl> + coordinator - > notify _ others ( ) ; <nl> + } <nl> + } ; <nl> + auto error _ handler = [ & , global _ obj _ ref _ tmp ] ( int error _ code , std : : string message ) { <nl> + / / FIXME : Simplify this by moving log _ message to AndroidLogger <nl> + JNIEnv * local _ env ; <nl> + g _ vm - > AttachCurrentThread ( & env , nullptr ) ; <nl> + std : : string log = num _ to _ string ( error _ code ) + " " + message . c _ str ( ) ; <nl> + log _ message ( local _ env , log _ debug , log . c _ str ( ) ) ; <nl> + } ; <nl> + m _ sync _ session - > set _ sync _ transact _ callback ( sync _ transact _ callback ) ; <nl> + m _ sync _ session - > set _ error _ handler ( std : : move ( error _ handler ) ) ; <nl> } <nl> <nl> inline realm : : sync : : Session * get _ session ( ) const noexcept <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / objectserver / SyncManager . java b / realm / realm - library / src / main / java / io / realm / objectserver / SyncManager . java <nl> index b3b556d . . e068cec 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / objectserver / SyncManager . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / objectserver / SyncManager . java <nl> @ @ - 68 , 10 + 68 , 21 @ @ public final class SyncManager { <nl> / / Right now it just lives and dies together with the process . <nl> private static volatile AuthenticationServer authServer = new OkHttpAuthenticationServer ( ) ; <nl> static volatile Session . ErrorHandler defaultSessionErrorHandler = SESSION _ NO _ OP _ ERROR _ HANDLER ; <nl> + @ SuppressWarnings ( " FieldCanBeLocal " ) <nl> + private static Thread clientThread ; <nl> <nl> static { <nl> RealmCore . loadLibrary ( ) ; <nl> nativeInitializeSyncClient ( ) ; <nl> + / / Create the client thread in java to avoid strange problem when error happens . And anyway we need to attach <nl> + / / to the jvm for logger . <nl> + clientThread = new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + nativeRunClient ( ) ; <nl> + } <nl> + } , " RealmSyncClient " ) ; <nl> + clientThread . start ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 150 , 4 + 161 , 5 @ @ public final class SyncManager { <nl> <nl> private static native void nativeInitializeSyncClient ( ) ; <nl> private static native void nativeSetSyncClientLogLevel ( int logLevel ) ; <nl> + private static native void nativeRunClient ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> index d74bd51 . . 272dd33 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> @ @ - 18 , 7 + 18 , 6 @ @ <nl> <nl> # include " util . hpp " <nl> # include " io _ realm _ internal _ Table . h " <nl> - # include " java _ lang _ List _ Util . hpp " <nl> # include " tablebase _ tpl . hpp " <nl> <nl> using namespace std ; <nl> @ @ - 1545 , 7 + 1544 , 7 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeVersion ( <nl> bool valid = ( TBL ( nativeTablePtr ) ! = NULL ) ; <nl> if ( valid ) { <nl> if ( ! TBL ( nativeTablePtr ) - > is _ attached ( ) ) { <nl> - ThrowException ( env , TableInvalid , " The Realm has been closed and is no longer accessible . " ) ; <nl> + ThrowException ( env , IllegalState , " The Realm has been closed and is no longer accessible . " ) ; <nl> return 0 ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ TableView . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ TableView . cpp <nl> index ba1bfc7 . . d4837d7 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ TableView . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ TableView . cpp <nl> @ @ - 29 , 7 + 29 , 7 @ @ inline bool view _ valid _ and _ in _ sync ( JNIEnv * env , jlong nativeViewPtr ) { <nl> bool valid = ( TV ( nativeViewPtr ) ! = NULL ) ; <nl> if ( valid ) { <nl> if ( ! TV ( nativeViewPtr ) - > is _ attached ( ) ) { <nl> - ThrowException ( env , TableInvalid , " The Realm has been closed and is no longer accessible . " ) ; <nl> + ThrowException ( env , IllegalState , " The Realm has been closed and is no longer accessible . " ) ; <nl> return false ; <nl> } <nl> / / depends _ on _ deleted _ linklist ( ) will return true if and only if the current TableView was created from a <nl> @ @ - 951 , 7 + 951 , 7 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableView _ nativeSyncIfNeeded ( <nl> bool valid = ( TV ( nativeViewPtr ) ! = NULL ) ; <nl> if ( valid ) { <nl> if ( ! TV ( nativeViewPtr ) - > is _ attached ( ) ) { <nl> - ThrowException ( env , TableInvalid , " The Realm has been closed and is no longer accessible . " ) ; <nl> + ThrowException ( env , IllegalState , " The Realm has been closed and is no longer accessible . " ) ; <nl> return 0 ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ TestUtil . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ TestUtil . cpp <nl> index d14615f . . 0529180 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ TestUtil . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ TestUtil . cpp <nl> @ @ - 32 , 46 + 32 , 16 @ @ throwOrGetExpectedMessage ( JNIEnv * env , jlong testcase , bool should _ throw ) <nl> if ( should _ throw ) <nl> ThrowException ( env , ClassNotFound , " parm1 " , " parm2 " ) ; <nl> break ; <nl> - case NoSuchField : <nl> - expect = " java . lang . NoSuchFieldException : Field ' parm2 ' could not be located in class io . realm . parm1 " ; <nl> - if ( should _ throw ) <nl> - ThrowException ( env , NoSuchField , " parm1 " , " parm2 " ) ; <nl> - break ; <nl> - case NoSuchMethod : <nl> - expect = " java . lang . NoSuchMethodException : Method ' parm2 ' could not be located in class io . realm . parm1 " ; <nl> - if ( should _ throw ) <nl> - ThrowException ( env , NoSuchMethod , " parm1 " , " parm2 " ) ; <nl> - break ; <nl> case IllegalArgument : <nl> expect = " java . lang . IllegalArgumentException : Illegal Argument : parm1 " ; <nl> if ( should _ throw ) <nl> ThrowException ( env , IllegalArgument , " parm1 " , " parm2 " ) ; <nl> break ; <nl> - case IOFailed : <nl> - expect = " io . realm . exceptions . RealmIOException : Failed to open parm1 . parm2 " ; <nl> - if ( should _ throw ) <nl> - ThrowException ( env , IOFailed , " parm1 " , " parm2 " ) ; <nl> - break ; <nl> - case FileNotFound : <nl> - expect = " io . realm . exceptions . RealmIOException : File not found : parm1 . " ; <nl> - if ( should _ throw ) <nl> - ThrowException ( env , FileNotFound , " parm1 " , " parm2 " ) ; <nl> - break ; <nl> - case FileAccessError : <nl> - expect = " io . realm . exceptions . RealmIOException : Failed to access : parm1 . parm2 " ; <nl> - if ( should _ throw ) <nl> - ThrowException ( env , FileAccessError , " parm1 " , " parm2 " ) ; <nl> - break ; <nl> case IndexOutOfBounds : <nl> expect = " java . lang . ArrayIndexOutOfBoundsException : parm1 " ; <nl> if ( should _ throw ) <nl> ThrowException ( env , IndexOutOfBounds , " parm1 " , " parm2 " ) ; <nl> break ; <nl> - case TableInvalid : <nl> - expect = " java . lang . IllegalStateException : Illegal State : parm1 " ; <nl> - if ( should _ throw ) <nl> - ThrowException ( env , TableInvalid , " parm1 " , " parm2 " ) ; <nl> - break ; <nl> case UnsupportedOperation : <nl> expect = " java . lang . UnsupportedOperationException : parm1 " ; <nl> if ( should _ throw ) <nl> @ @ - 92 , 26 + 62 , 11 @ @ throwOrGetExpectedMessage ( JNIEnv * env , jlong testcase , bool should _ throw ) <nl> if ( should _ throw ) <nl> ThrowException ( env , RuntimeError , " parm1 " , " parm2 " ) ; <nl> break ; <nl> - case RowInvalid : <nl> - expect = " java . lang . IllegalStateException : Illegal State : parm1 " ; <nl> - if ( should _ throw ) <nl> - ThrowException ( env , RowInvalid , " parm1 " , " parm2 " ) ; <nl> - break ; <nl> - case CrossTableLink : <nl> - expect = " java . lang . IllegalStateException : This class is referenced by other classes . Remove those fields first before removing this class . " ; <nl> - if ( should _ throw ) <nl> - ThrowException ( env , CrossTableLink , " parm1 " ) ; <nl> - break ; <nl> case BadVersion : <nl> expect = " io . realm . internal . async . BadVersionException : parm1 " ; <nl> if ( should _ throw ) <nl> ThrowException ( env , BadVersion , " parm1 " , " parm2 " ) ; <nl> break ; <nl> - case LockFileError : <nl> - expect = " io . realm . exceptions . IncompatibleLockFileException : parm1 " ; <nl> - if ( should _ throw ) <nl> - ThrowException ( env , LockFileError , " parm1 " , " parm2 " ) ; <nl> - break ; <nl> case IllegalState : <nl> expect = " java . lang . IllegalStateException : parm1 " ; <nl> if ( should _ throw ) <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . cpp b / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . cpp <nl> deleted file mode 100644 <nl> index d1a1853 . . 0000000 <nl> - - - a / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . cpp <nl> + + + / dev / null <nl> @ @ - 1 , 46 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - # include " util . hpp " <nl> - # include " java _ lang _ List _ Util . hpp " <nl> - <nl> - jint java _ lang _ List _ size ( JNIEnv * env , jobject jList ) <nl> - { <nl> - / / WARNING : do not cache these methods , list class may be different based on the object jlist <nl> - jclass jListClass = env - > GetObjectClass ( jList ) ; <nl> - if ( jListClass = = NULL ) <nl> - return 0 ; <nl> - jmethodID jListSizeMethodId = env - > GetMethodID ( jListClass , " size " , " ( ) I " ) ; <nl> - if ( jListSizeMethodId = = NULL ) { <nl> - ThrowException ( env , NoSuchMethod , " jList " , " size " ) ; <nl> - return 0 ; <nl> - } <nl> - return env - > CallIntMethod ( jList , jListSizeMethodId ) ; <nl> - } <nl> - <nl> - jobject java _ lang _ List _ get ( JNIEnv * env , jobject jList , jint index ) <nl> - { <nl> - / / WARNING : do not cache these methods / classes , list class may be different based on the object jlist <nl> - jclass jListClass = env - > GetObjectClass ( jList ) ; <nl> - if ( jListClass = = NULL ) <nl> - return NULL ; <nl> - jmethodID jListGetMethodId = env - > GetMethodID ( jListClass , " get " , " ( I ) Ljava / lang / Object ; " ) ; <nl> - if ( jListGetMethodId = = NULL ) { <nl> - ThrowException ( env , NoSuchMethod , " jList " , " get " ) ; <nl> - return NULL ; <nl> - } <nl> - return env - > CallObjectMethod ( jList , jListGetMethodId , index ) ; <nl> - } <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . hpp b / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . hpp <nl> deleted file mode 100644 <nl> index a360a24 . . 0000000 <nl> - - - a / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . hpp <nl> + + + / dev / null <nl> @ @ - 1 , 33 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - # ifndef JAVA _ LANG _ LIST _ UTIL _ H <nl> - # define JAVA _ LANG _ LIST _ UTIL _ H <nl> - <nl> - # include < jni . h > <nl> - <nl> - # ifdef _ _ cplusplus <nl> - extern " C " { <nl> - # endif <nl> - <nl> - jint java _ lang _ List _ size ( JNIEnv * env , jobject jList ) ; <nl> - jobject java _ lang _ List _ get ( JNIEnv * env , jobject jList , jint index ) ; <nl> - <nl> - # ifdef _ _ cplusplus <nl> - } <nl> - # endif <nl> - <nl> - # endif <nl> diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp <nl> index b5af9f0 . . 136056f 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / util . cpp <nl> @ @ - 49 , 7 + 49 , 7 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) <nl> } <nl> catch ( CrossTableLinkTarget & e ) { <nl> ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> - ThrowException ( env , CrossTableLink , ss . str ( ) ) ; <nl> + ThrowException ( env , IllegalState , ss . str ( ) ) ; <nl> } <nl> catch ( SharedGroup : : BadVersion & e ) { <nl> ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> @ @ - 96 , 41 + 96 , 11 @ @ void ThrowException ( JNIEnv * env , ExceptionKind exception , const std : : string & cla <nl> message = " Class ' " + classStr + " ' could not be located . " ; <nl> break ; <nl> <nl> - case NoSuchField : <nl> - jExceptionClass = env - > FindClass ( " java / lang / NoSuchFieldException " ) ; <nl> - message = " Field ' " + itemStr + " ' could not be located in class io . realm . " + classStr ; <nl> - break ; <nl> - <nl> - case NoSuchMethod : <nl> - jExceptionClass = env - > FindClass ( " java / lang / NoSuchMethodException " ) ; <nl> - message = " Method ' " + itemStr + " ' could not be located in class io . realm . " + classStr ; <nl> - break ; <nl> - <nl> case IllegalArgument : <nl> jExceptionClass = env - > FindClass ( " java / lang / IllegalArgumentException " ) ; <nl> message = " Illegal Argument : " + classStr ; <nl> break ; <nl> <nl> - case TableInvalid : <nl> - jExceptionClass = env - > FindClass ( " java / lang / IllegalStateException " ) ; <nl> - message = " Illegal State : " + classStr ; <nl> - break ; <nl> - <nl> - case IOFailed : <nl> - jExceptionClass = env - > FindClass ( " io / realm / exceptions / RealmIOException " ) ; <nl> - message = " Failed to open " + classStr + " . " + itemStr ; <nl> - break ; <nl> - <nl> - case FileNotFound : <nl> - jExceptionClass = env - > FindClass ( " io / realm / exceptions / RealmIOException " ) ; <nl> - message = " File not found : " + classStr + " . " ; <nl> - break ; <nl> - <nl> - case FileAccessError : <nl> - jExceptionClass = env - > FindClass ( " io / realm / exceptions / RealmIOException " ) ; <nl> - message = " Failed to access : " + classStr + " . " + itemStr ; <nl> - break ; <nl> - <nl> case IndexOutOfBounds : <nl> jExceptionClass = env - > FindClass ( " java / lang / ArrayIndexOutOfBoundsException " ) ; <nl> message = classStr ; <nl> @ @ - 156 , 30 + 126 , 16 @ @ void ThrowException ( JNIEnv * env , ExceptionKind exception , const std : : string & cla <nl> message = classStr ; <nl> break ; <nl> <nl> - case RowInvalid : <nl> - jExceptionClass = env - > FindClass ( " java / lang / IllegalStateException " ) ; <nl> - message = " Illegal State : " + classStr ; <nl> - break ; <nl> - <nl> - case CrossTableLink : <nl> - jExceptionClass = env - > FindClass ( " java / lang / IllegalStateException " ) ; <nl> - message = " This class is referenced by other classes . Remove those fields first before removing this class . " ; <nl> - break ; <nl> - <nl> case BadVersion : <nl> jExceptionClass = env - > FindClass ( " io / realm / internal / async / BadVersionException " ) ; <nl> message = classStr ; <nl> break ; <nl> <nl> - case LockFileError : <nl> - jExceptionClass = env - > FindClass ( " io / realm / exceptions / IncompatibleLockFileException " ) ; <nl> - message = classStr ; <nl> - break ; <nl> - <nl> case IllegalState : <nl> jExceptionClass = env - > FindClass ( " java / lang / IllegalStateException " ) ; <nl> message = classStr ; <nl> break ; <nl> + <nl> / / Should never get here . <nl> case ExceptionKindMax : <nl> default : <nl> diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp <nl> index 8213a63 . . 3465957 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . hpp <nl> + + + b / realm / realm - library / src / main / cpp / util . hpp <nl> @ @ - 86 , 25 + 86 , 15 @ @ std : : string num _ to _ string ( T pNumber ) <nl> # define HO ( T , ptr ) reinterpret _ cast < realm : : SharedGroup : : Handover < T > * > ( ptr ) <nl> <nl> / / Exception handling <nl> - / / FIXME : RowInvalid and IllegalState both throw IllegalStateException , maybe remove the RowInvalid . <nl> enum ExceptionKind { <nl> ClassNotFound = 0 , <nl> - NoSuchField , <nl> - NoSuchMethod , <nl> IllegalArgument , <nl> - IOFailed , <nl> - FileNotFound , <nl> - FileAccessError , <nl> IndexOutOfBounds , <nl> - TableInvalid , <nl> UnsupportedOperation , <nl> OutOfMemory , <nl> FatalError , <nl> RuntimeError , <nl> - RowInvalid , <nl> - CrossTableLink , <nl> BadVersion , <nl> - LockFileError , <nl> IllegalState , <nl> / / NOTE ! ! ! ! : Please also add test cases to io _ realm _ internal _ TestUtil when introducing a <nl> / / new exception kind . <nl> @ @ - 220 , 7 + 210 , 7 @ @ inline bool TableIsValid ( JNIEnv * env , T * objPtr ) <nl> } <nl> if ( ! valid ) { <nl> TR _ ERR ( " Table % p is no longer attached ! " , VOID _ PTR ( objPtr ) ) <nl> - ThrowException ( env , TableInvalid , " Table is no longer valid to operate on . " ) ; <nl> + ThrowException ( env , IllegalState , " Table is no longer valid to operate on . " ) ; <nl> } <nl> return valid ; <nl> } <nl> @ @ - 230 , 7 + 220 , 7 @ @ inline bool RowIsValid ( JNIEnv * env , realm : : Row * rowPtr ) <nl> bool valid = ( rowPtr ! = NULL & & rowPtr - > is _ attached ( ) ) ; <nl> if ( ! valid ) { <nl> TR _ ERR ( " Row % p is no longer attached ! " , VOID _ PTR ( rowPtr ) ) <nl> - ThrowException ( env , RowInvalid , " Object is no longer valid to operate on . Was it deleted by another thread ? " ) ; <nl> + ThrowException ( env , IllegalState , " Object is no longer valid to operate on . Was it deleted by another thread ? " ) ; <nl> } <nl> return valid ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 index 5e0d400 . . 0792208 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 @ @ - 45 , 6 + 45 , 8 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeCreateConfig ( JNIEnv * env , jclass , jstri 
 config - > sync _ config = std : : make _ shared < SyncConfig > ( ) ; 
 config - > sync _ config - > user _ tag = token ; 
 config - > sync _ config - > realm _ url = url ; 
 + / / FIXME : Sync session is handled by java now . Remove this when adapt to OS sync implementation . 
 + config - > sync _ config - > create _ session = false ; 
 } 
 return reinterpret _ cast < jlong > ( config ) ; 
 } CATCH _ STD ( ) 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ SyncManager . cpp 
 index c82b36b . . e701031 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ SyncManager . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ SyncManager . cpp 
 @ @ - 16 , 31 + 16 , 33 @ @ 
 
 # include < jni . h > 
 
 - # include " io _ realm _ objectserver _ SyncManager . h " 
 - # include " objectserver _ shared . hpp " 
 - # include " util . hpp " 
 - # include < realm / group _ shared . hpp > 
 - # include < realm / replication . hpp > 
 + # include < chrono > 
 + # include < functional > 
 + # include < mutex > 
 + # include < vector > 
 
 + # include < realm / group _ shared . hpp > 
 # include < realm / sync / history . hpp > 
 # include < realm / sync / client . hpp > 
 - # include < realm / util / logger . hpp > 
 - # include < mutex > 
 - # include < thread > 
 - # include < vector > 
 - # include < chrono > 
 - # include < functional > 
 - # include < android / log . h > 
 - # include < object - store / src / sync _ manager . hpp > 
 + 
 + # include " objectserver _ shared . hpp " 
 + 
 + # include " io _ realm _ objectserver _ SyncManager . h " 
 
 using namespace realm ; 
 - using namespace sync ; 
 + using namespace realm : : sync ; 
 
 - class AndroidLogger : public realm : : util : : RootLogger 
 + std : : unique _ ptr < Client > sync _ client ; 
 + 
 + class AndroidLogger : public util : : RootLogger 
 { 
 public : 
 void do _ log ( Level level , std : : string msg ) 
 { 
 + / / FIXME Sync only calls the logger from the thread running the client , so it should 
 + / / be safe to store the env when starting the thread . 
 + JNIEnv * env ; 
 + g _ vm - > AttachCurrentThread ( & env , nullptr ) ; 
 jmethodID log _ method ; 
 switch ( level ) { 
 case Level : : trace : log _ method = log _ trace ; break ; 
 @ @ - 52 , 50 + 54 , 51 @ @ public : 
 case Level : : fatal : log _ method = log _ fatal ; break ; 
 case Level : : all : 
 case Level : : off : 
 - ThrowException ( sync _ client _ env , IllegalArgument , " Unknown logger argument : " + num _ to _ string ( level ) ) ; 
 + ThrowException ( env , IllegalArgument , 
 + util : : format ( " Unknown logger argument : % s . " , util : : Logger : : get _ level _ prefix ( level ) ) ) ; 
 return ; 
 } 
 - log _ message ( sync _ client _ env , log _ method , msg . c _ str ( ) ) ; 
 + log _ message ( env , log _ method , msg . c _ str ( ) ) ; 
 } 
 + static AndroidLogger & shared ( ) noexcept ; 
 } ; 
 
 + / / Not used by now 
 struct AndroidLoggerFactory : public realm : : SyncLoggerFactory { 
 - std : : unique _ ptr < realm : : util : : Logger > make _ logger ( realm : : util : : Logger : : Level level ) { 
 + std : : unique _ ptr < util : : Logger > make _ logger ( util : : Logger : : Level level ) { 
 auto logger = std : : make _ unique < AndroidLogger > ( ) ; 
 logger - > set _ level _ threshold ( level ) ; 
 - return std : : move ( logger ) ; 
 + return std : : unique _ ptr < util : : Logger > ( std : : move ( logger ) ) ; 
 } 
 } s _ logger _ factory ; 
 
 - / / Object Server global vars , see objectserver _ shared . hpp 
 - std : : thread * sync _ client _ thread ; 
 - JNIEnv * sync _ client _ env ; 
 + / / TODO : Move to a better place & not needed after moving to OS 
 + AndroidLogger & AndroidLogger : : shared ( ) noexcept { 
 + static AndroidLogger logger ; 
 + return logger ; 
 + } 
 
 JNIEXPORT void JNICALL Java _ io _ realm _ objectserver _ SyncManager _ nativeInitializeSyncClient 
 ( JNIEnv * env , jclass ) 
 { 
 TR _ ENTER ( env ) 
 - try { 
 - / / Prepare Sync Client . It will be created on demand 
 + if ( sync _ client ) return ; 
 
 - SyncLoginFunction loginDelegate = [ = ] ( const Realm : : Config & ) { 
 - / / Ignore this for now . We are handling this manually . 
 - } ; 
 + try { 
 + AndroidLogger : : shared ( ) . set _ level _ threshold ( util : : Logger : : Level : : warn ) ; 
 
 - SyncClientReadyFunction clientReadyDelegate = [ = ] ( const realm : : sync : : Client & ) { 
 - / / Attaching thread to Java so we can perform JNI calls 
 - JavaVMAttachArgs args ; 
 - args . version = JNI _ VERSION _ 1 _ 6 ; 
 - args . name = NULL ; / / java thread a name 
 - args . group = NULL ; / / java thread group 
 - g _ vm - > AttachCurrentThread ( & sync _ client _ env , & args ) ; 
 - } ; 
 + sync : : Client : : Config config ; 
 + config . logger = & AndroidLogger : : shared ( ) ; 
 + sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws 
 + / / FIXME setup error handler for client 
 + } CATCH _ STD ( ) 
 + } 
 
 - SyncManager & sync _ manager = SyncManager : : shared ( ) ; 
 - sync _ manager . set _ login _ function ( loginDelegate ) ; 
 - sync _ manager . set _ logger _ factory ( s _ logger _ factory ) ; 
 - sync _ manager . set _ log _ level ( util : : Logger : : Level : : warn ) ; 
 - sync _ manager . set _ client _ ready _ callback ( clientReadyDelegate ) ; 
 + / / Create the thread from java side to avoid some strange errors when native throws . 
 + JNIEXPORT void JNICALL 
 + Java _ io _ realm _ objectserver _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) { 
 + try { 
 + sync _ client - > run ( ) ; 
 } CATCH _ STD ( ) 
 } 
 
 @ @ - 103 , 7 + 106 , 6 @ @ JNIEXPORT void JNICALL 
 Java _ io _ realm _ objectserver _ SyncManager _ nativeSetSyncClientLogLevel ( JNIEnv * env , jclass , jint logLevel ) 
 { 
 util : : Logger : : Level native _ log _ level ; 
 - bool valid _ log _ level = true ; 
 switch ( logLevel ) { 
 case io _ realm _ log _ LogLevel _ ALL : native _ log _ level = util : : Logger : : Level : : all ; break ; 
 case io _ realm _ log _ LogLevel _ TRACE : native _ log _ level = util : : Logger : : Level : : trace ; break ; 
 @ @ - 114 , 12 + 116 , 9 @ @ Java _ io _ realm _ objectserver _ SyncManager _ nativeSetSyncClientLogLevel ( JNIEnv * env , 
 case io _ realm _ log _ LogLevel _ FATAL : native _ log _ level = util : : Logger : : Level : : fatal ; break ; 
 case io _ realm _ log _ LogLevel _ OFF : native _ log _ level = util : : Logger : : Level : : off ; break ; 
 default : 
 - valid _ log _ level = false ; 
 ThrowException ( env , IllegalArgument , " Invalid log level : " + logLevel ) ; 
 + return ; 
 } 
 - if ( valid _ log _ level ) { 
 - realm : : SyncManager : : shared ( ) . set _ log _ level ( native _ log _ level ) ; 
 - } 
 + / / FIXME : This call is not thread safe . Switch to OS implementation to make it thread safe . 
 + AndroidLogger : : shared ( ) . set _ level _ threshold ( native _ log _ level ) ; 
 } 
 - 
 - 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ internal _ SyncSession . cpp b / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ internal _ SyncSession . cpp 
 index 18c5063 . . 5222166 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ internal _ SyncSession . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ objectserver _ internal _ SyncSession . cpp 
 @ @ - 31 , 7 + 31 , 6 @ @ 
 # include < chrono > 
 # include < functional > 
 # include < android / log . h > 
 - # include < object - store / src / sync _ manager . hpp > 
 
 using namespace std ; 
 using namespace realm ; 
 @ @ - 43 , 13 + 42 , 8 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ objectserver _ internal _ SyncSession _ nativeCr 
 { 
 TR _ ENTER ( env ) 
 try { 
 - Client * sync _ client = & SyncManager : : shared ( ) . get _ sync _ client ( ) - > client ; 
 - if ( sync _ client = = NULL ) { 
 - return 0 ; 
 - } 
 - 
 JStringAccessor local _ path ( env , localRealmPath ) ; 
 - JniSession * jni _ session = new JniSession ( env , sync _ client , local _ path , obj ) ; 
 + JniSession * jni _ session = new JniSession ( env , local _ path , obj ) ; 
 return reinterpret _ cast < jlong > ( jni _ session ) ; 
 } CATCH _ STD ( ) 
 return 0 ; 
 diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store 
 index b11ef9c . . 6b6012c 160000 
 - - - a / realm / realm - library / src / main / cpp / object - store 
 + + + b / realm / realm - library / src / main / cpp / object - store 
 @ @ - 1 + 1 @ @ 
 - Subproject commit b11ef9c8b799f0f09059789ab8711853ce31b85f 
 + Subproject commit 6b6012cb2d603e20bf82e19c453af0f9bf997894 
 diff - - git a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp 
 index 9e44aa5 . . 7d9d824 100644 
 - - - a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp 
 + + + b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp 
 @ @ - 13 , 7 + 13 , 6 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 # ifndef REALM _ OBJECTSERVER _ SHARED _ HPP 
 # define REALM _ OBJECTSERVER _ SHARED _ HPP 
 
 @ @ - 25 , 15 + 24 , 10 @ @ 
 # include < realm / sync / client . hpp > 
 # include < realm / util / logger . hpp > 
 # include < object - store / src / impl / realm _ coordinator . hpp > 
 + # include < object - store / src / sync _ manager . hpp > 
 
 # include " util . hpp " 
 
 - / / maintain a reference to the threads allocated dynamically , to prevent deallocation 
 - / / after Java _ io _ realm _ internal _ SharedGroup _ nativeStartSession completes . 
 - / / To be released later , maybe on JNI _ OnUnload 
 - extern std : : thread * sync _ client _ thread ; 
 - extern JNIEnv * sync _ client _ env ; 
 - 
 
 / / Wrapper class for realm : : Session . This allows us to manage the C + + session and callback lifecycle correctly . 
 / / TODO Use OS SyncSession instead 
 @ @ - 41 , 24 + 35 , 30 @ @ class JniSession { 
 
 public : 
 JniSession ( ) = delete ; 
 - JniSession ( JNIEnv * env , realm : : sync : : Client * sync _ client , std : : string local _ realm _ path , jobject java _ session _ obj ) 
 + JniSession ( JNIEnv * env , std : : string local _ realm _ path , jobject java _ session _ obj ) 
 { 
 + / / FIXME : This doesn ' t look good . Temp solution before moving to OS sync . 
 + extern std : : unique _ ptr < realm : : sync : : Client > sync _ client ; 
 / / Get the coordinator for the given path , or null if there is none 
 m _ sync _ session = new realm : : sync : : Session ( * sync _ client , local _ realm _ path ) ; 
 - m _ global _ obj _ ref = env - > NewGlobalRef ( java _ session _ obj ) ; 
 - jobject global _ obj _ ref _ tmp ( m _ global _ obj _ ref ) ; 
 - auto sync _ transact _ callback = [ local _ realm _ path ] ( realm : : VersionID , realm : : VersionID ) { 
 - auto coordinator = realm : : _ impl : : RealmCoordinator : : get _ existing _ coordinator ( realm : : StringData ( local _ realm _ path ) ) ; 
 - if ( coordinator ) { 
 - coordinator - > notify _ others ( ) ; 
 - } 
 - } ; 
 - auto error _ handler = [ & , global _ obj _ ref _ tmp ] ( int error _ code , std : : string message ) { 
 - std : : string log = num _ to _ string ( error _ code ) + " " + message . c _ str ( ) ; 
 - log _ message ( sync _ client _ env , log _ debug , log . c _ str ( ) ) ; 
 - } ; 
 - m _ sync _ session - > set _ sync _ transact _ callback ( sync _ transact _ callback ) ; 
 - m _ sync _ session - > set _ error _ handler ( std : : move ( error _ handler ) ) ; 
 + m _ global _ obj _ ref = env - > NewGlobalRef ( java _ session _ obj ) ; 
 + jobject global _ obj _ ref _ tmp ( m _ global _ obj _ ref ) ; 
 + auto sync _ transact _ callback = [ local _ realm _ path ] ( realm : : VersionID , realm : : VersionID ) { 
 + auto coordinator = realm : : _ impl : : RealmCoordinator : : get _ existing _ coordinator ( 
 + realm : : StringData ( local _ realm _ path ) ) ; 
 + if ( coordinator ) { 
 + coordinator - > notify _ others ( ) ; 
 + } 
 + } ; 
 + auto error _ handler = [ & , global _ obj _ ref _ tmp ] ( int error _ code , std : : string message ) { 
 + / / FIXME : Simplify this by moving log _ message to AndroidLogger 
 + JNIEnv * local _ env ; 
 + g _ vm - > AttachCurrentThread ( & env , nullptr ) ; 
 + std : : string log = num _ to _ string ( error _ code ) + " " + message . c _ str ( ) ; 
 + log _ message ( local _ env , log _ debug , log . c _ str ( ) ) ; 
 + } ; 
 + m _ sync _ session - > set _ sync _ transact _ callback ( sync _ transact _ callback ) ; 
 + m _ sync _ session - > set _ error _ handler ( std : : move ( error _ handler ) ) ; 
 } 
 
 inline realm : : sync : : Session * get _ session ( ) const noexcept 
 diff - - git a / realm / realm - library / src / main / java / io / realm / objectserver / SyncManager . java b / realm / realm - library / src / main / java / io / realm / objectserver / SyncManager . java 
 index b3b556d . . e068cec 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / objectserver / SyncManager . java 
 + + + b / realm / realm - library / src / main / java / io / realm / objectserver / SyncManager . java 
 @ @ - 68 , 10 + 68 , 21 @ @ public final class SyncManager { 
 / / Right now it just lives and dies together with the process . 
 private static volatile AuthenticationServer authServer = new OkHttpAuthenticationServer ( ) ; 
 static volatile Session . ErrorHandler defaultSessionErrorHandler = SESSION _ NO _ OP _ ERROR _ HANDLER ; 
 + @ SuppressWarnings ( " FieldCanBeLocal " ) 
 + private static Thread clientThread ; 
 
 static { 
 RealmCore . loadLibrary ( ) ; 
 nativeInitializeSyncClient ( ) ; 
 + / / Create the client thread in java to avoid strange problem when error happens . And anyway we need to attach 
 + / / to the jvm for logger . 
 + clientThread = new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + nativeRunClient ( ) ; 
 + } 
 + } , " RealmSyncClient " ) ; 
 + clientThread . start ( ) ; 
 } 
 
 / * * 
 @ @ - 150 , 4 + 161 , 5 @ @ public final class SyncManager { 
 
 private static native void nativeInitializeSyncClient ( ) ; 
 private static native void nativeSetSyncClientLogLevel ( int logLevel ) ; 
 + private static native void nativeRunClient ( ) ; 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 index d74bd51 . . 272dd33 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 @ @ - 18 , 7 + 18 , 6 @ @ 
 
 # include " util . hpp " 
 # include " io _ realm _ internal _ Table . h " 
 - # include " java _ lang _ List _ Util . hpp " 
 # include " tablebase _ tpl . hpp " 
 
 using namespace std ; 
 @ @ - 1545 , 7 + 1544 , 7 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeVersion ( 
 bool valid = ( TBL ( nativeTablePtr ) ! = NULL ) ; 
 if ( valid ) { 
 if ( ! TBL ( nativeTablePtr ) - > is _ attached ( ) ) { 
 - ThrowException ( env , TableInvalid , " The Realm has been closed and is no longer accessible . " ) ; 
 + ThrowException ( env , IllegalState , " The Realm has been closed and is no longer accessible . " ) ; 
 return 0 ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ TableView . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ TableView . cpp 
 index ba1bfc7 . . d4837d7 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ TableView . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ TableView . cpp 
 @ @ - 29 , 7 + 29 , 7 @ @ inline bool view _ valid _ and _ in _ sync ( JNIEnv * env , jlong nativeViewPtr ) { 
 bool valid = ( TV ( nativeViewPtr ) ! = NULL ) ; 
 if ( valid ) { 
 if ( ! TV ( nativeViewPtr ) - > is _ attached ( ) ) { 
 - ThrowException ( env , TableInvalid , " The Realm has been closed and is no longer accessible . " ) ; 
 + ThrowException ( env , IllegalState , " The Realm has been closed and is no longer accessible . " ) ; 
 return false ; 
 } 
 / / depends _ on _ deleted _ linklist ( ) will return true if and only if the current TableView was created from a 
 @ @ - 951 , 7 + 951 , 7 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableView _ nativeSyncIfNeeded ( 
 bool valid = ( TV ( nativeViewPtr ) ! = NULL ) ; 
 if ( valid ) { 
 if ( ! TV ( nativeViewPtr ) - > is _ attached ( ) ) { 
 - ThrowException ( env , TableInvalid , " The Realm has been closed and is no longer accessible . " ) ; 
 + ThrowException ( env , IllegalState , " The Realm has been closed and is no longer accessible . " ) ; 
 return 0 ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ TestUtil . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ TestUtil . cpp 
 index d14615f . . 0529180 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ TestUtil . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ TestUtil . cpp 
 @ @ - 32 , 46 + 32 , 16 @ @ throwOrGetExpectedMessage ( JNIEnv * env , jlong testcase , bool should _ throw ) 
 if ( should _ throw ) 
 ThrowException ( env , ClassNotFound , " parm1 " , " parm2 " ) ; 
 break ; 
 - case NoSuchField : 
 - expect = " java . lang . NoSuchFieldException : Field ' parm2 ' could not be located in class io . realm . parm1 " ; 
 - if ( should _ throw ) 
 - ThrowException ( env , NoSuchField , " parm1 " , " parm2 " ) ; 
 - break ; 
 - case NoSuchMethod : 
 - expect = " java . lang . NoSuchMethodException : Method ' parm2 ' could not be located in class io . realm . parm1 " ; 
 - if ( should _ throw ) 
 - ThrowException ( env , NoSuchMethod , " parm1 " , " parm2 " ) ; 
 - break ; 
 case IllegalArgument : 
 expect = " java . lang . IllegalArgumentException : Illegal Argument : parm1 " ; 
 if ( should _ throw ) 
 ThrowException ( env , IllegalArgument , " parm1 " , " parm2 " ) ; 
 break ; 
 - case IOFailed : 
 - expect = " io . realm . exceptions . RealmIOException : Failed to open parm1 . parm2 " ; 
 - if ( should _ throw ) 
 - ThrowException ( env , IOFailed , " parm1 " , " parm2 " ) ; 
 - break ; 
 - case FileNotFound : 
 - expect = " io . realm . exceptions . RealmIOException : File not found : parm1 . " ; 
 - if ( should _ throw ) 
 - ThrowException ( env , FileNotFound , " parm1 " , " parm2 " ) ; 
 - break ; 
 - case FileAccessError : 
 - expect = " io . realm . exceptions . RealmIOException : Failed to access : parm1 . parm2 " ; 
 - if ( should _ throw ) 
 - ThrowException ( env , FileAccessError , " parm1 " , " parm2 " ) ; 
 - break ; 
 case IndexOutOfBounds : 
 expect = " java . lang . ArrayIndexOutOfBoundsException : parm1 " ; 
 if ( should _ throw ) 
 ThrowException ( env , IndexOutOfBounds , " parm1 " , " parm2 " ) ; 
 break ; 
 - case TableInvalid : 
 - expect = " java . lang . IllegalStateException : Illegal State : parm1 " ; 
 - if ( should _ throw ) 
 - ThrowException ( env , TableInvalid , " parm1 " , " parm2 " ) ; 
 - break ; 
 case UnsupportedOperation : 
 expect = " java . lang . UnsupportedOperationException : parm1 " ; 
 if ( should _ throw ) 
 @ @ - 92 , 26 + 62 , 11 @ @ throwOrGetExpectedMessage ( JNIEnv * env , jlong testcase , bool should _ throw ) 
 if ( should _ throw ) 
 ThrowException ( env , RuntimeError , " parm1 " , " parm2 " ) ; 
 break ; 
 - case RowInvalid : 
 - expect = " java . lang . IllegalStateException : Illegal State : parm1 " ; 
 - if ( should _ throw ) 
 - ThrowException ( env , RowInvalid , " parm1 " , " parm2 " ) ; 
 - break ; 
 - case CrossTableLink : 
 - expect = " java . lang . IllegalStateException : This class is referenced by other classes . Remove those fields first before removing this class . " ; 
 - if ( should _ throw ) 
 - ThrowException ( env , CrossTableLink , " parm1 " ) ; 
 - break ; 
 case BadVersion : 
 expect = " io . realm . internal . async . BadVersionException : parm1 " ; 
 if ( should _ throw ) 
 ThrowException ( env , BadVersion , " parm1 " , " parm2 " ) ; 
 break ; 
 - case LockFileError : 
 - expect = " io . realm . exceptions . IncompatibleLockFileException : parm1 " ; 
 - if ( should _ throw ) 
 - ThrowException ( env , LockFileError , " parm1 " , " parm2 " ) ; 
 - break ; 
 case IllegalState : 
 expect = " java . lang . IllegalStateException : parm1 " ; 
 if ( should _ throw ) 
 diff - - git a / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . cpp b / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . cpp 
 deleted file mode 100644 
 index d1a1853 . . 0000000 
 - - - a / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . cpp 
 + + + / dev / null 
 @ @ - 1 , 46 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - # include " util . hpp " 
 - # include " java _ lang _ List _ Util . hpp " 
 - 
 - jint java _ lang _ List _ size ( JNIEnv * env , jobject jList ) 
 - { 
 - / / WARNING : do not cache these methods , list class may be different based on the object jlist 
 - jclass jListClass = env - > GetObjectClass ( jList ) ; 
 - if ( jListClass = = NULL ) 
 - return 0 ; 
 - jmethodID jListSizeMethodId = env - > GetMethodID ( jListClass , " size " , " ( ) I " ) ; 
 - if ( jListSizeMethodId = = NULL ) { 
 - ThrowException ( env , NoSuchMethod , " jList " , " size " ) ; 
 - return 0 ; 
 - } 
 - return env - > CallIntMethod ( jList , jListSizeMethodId ) ; 
 - } 
 - 
 - jobject java _ lang _ List _ get ( JNIEnv * env , jobject jList , jint index ) 
 - { 
 - / / WARNING : do not cache these methods / classes , list class may be different based on the object jlist 
 - jclass jListClass = env - > GetObjectClass ( jList ) ; 
 - if ( jListClass = = NULL ) 
 - return NULL ; 
 - jmethodID jListGetMethodId = env - > GetMethodID ( jListClass , " get " , " ( I ) Ljava / lang / Object ; " ) ; 
 - if ( jListGetMethodId = = NULL ) { 
 - ThrowException ( env , NoSuchMethod , " jList " , " get " ) ; 
 - return NULL ; 
 - } 
 - return env - > CallObjectMethod ( jList , jListGetMethodId , index ) ; 
 - } 
 diff - - git a / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . hpp b / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . hpp 
 deleted file mode 100644 
 index a360a24 . . 0000000 
 - - - a / realm / realm - library / src / main / cpp / java _ lang _ List _ Util . hpp 
 + + + / dev / null 
 @ @ - 1 , 33 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - # ifndef JAVA _ LANG _ LIST _ UTIL _ H 
 - # define JAVA _ LANG _ LIST _ UTIL _ H 
 - 
 - # include < jni . h > 
 - 
 - # ifdef _ _ cplusplus 
 - extern " C " { 
 - # endif 
 - 
 - jint java _ lang _ List _ size ( JNIEnv * env , jobject jList ) ; 
 - jobject java _ lang _ List _ get ( JNIEnv * env , jobject jList , jint index ) ; 
 - 
 - # ifdef _ _ cplusplus 
 - } 
 - # endif 
 - 
 - # endif 
 diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp 
 index b5af9f0 . . 136056f 100644 
 - - - a / realm / realm - library / src / main / cpp / util . cpp 
 + + + b / realm / realm - library / src / main / cpp / util . cpp 
 @ @ - 49 , 7 + 49 , 7 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) 
 } 
 catch ( CrossTableLinkTarget & e ) { 
 ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 - ThrowException ( env , CrossTableLink , ss . str ( ) ) ; 
 + ThrowException ( env , IllegalState , ss . str ( ) ) ; 
 } 
 catch ( SharedGroup : : BadVersion & e ) { 
 ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 @ @ - 96 , 41 + 96 , 11 @ @ void ThrowException ( JNIEnv * env , ExceptionKind exception , const std : : string & cla 
 message = " Class ' " + classStr + " ' could not be located . " ; 
 break ; 
 
 - case NoSuchField : 
 - jExceptionClass = env - > FindClass ( " java / lang / NoSuchFieldException " ) ; 
 - message = " Field ' " + itemStr + " ' could not be located in class io . realm . " + classStr ; 
 - break ; 
 - 
 - case NoSuchMethod : 
 - jExceptionClass = env - > FindClass ( " java / lang / NoSuchMethodException " ) ; 
 - message = " Method ' " + itemStr + " ' could not be located in class io . realm . " + classStr ; 
 - break ; 
 - 
 case IllegalArgument : 
 jExceptionClass = env - > FindClass ( " java / lang / IllegalArgumentException " ) ; 
 message = " Illegal Argument : " + classStr ; 
 break ; 
 
 - case TableInvalid : 
 - jExceptionClass = env - > FindClass ( " java / lang / IllegalStateException " ) ; 
 - message = " Illegal State : " + classStr ; 
 - break ; 
 - 
 - case IOFailed : 
 - jExceptionClass = env - > FindClass ( " io / realm / exceptions / RealmIOException " ) ; 
 - message = " Failed to open " + classStr + " . " + itemStr ; 
 - break ; 
 - 
 - case FileNotFound : 
 - jExceptionClass = env - > FindClass ( " io / realm / exceptions / RealmIOException " ) ; 
 - message = " File not found : " + classStr + " . " ; 
 - break ; 
 - 
 - case FileAccessError : 
 - jExceptionClass = env - > FindClass ( " io / realm / exceptions / RealmIOException " ) ; 
 - message = " Failed to access : " + classStr + " . " + itemStr ; 
 - break ; 
 - 
 case IndexOutOfBounds : 
 jExceptionClass = env - > FindClass ( " java / lang / ArrayIndexOutOfBoundsException " ) ; 
 message = classStr ; 
 @ @ - 156 , 30 + 126 , 16 @ @ void ThrowException ( JNIEnv * env , ExceptionKind exception , const std : : string & cla 
 message = classStr ; 
 break ; 
 
 - case RowInvalid : 
 - jExceptionClass = env - > FindClass ( " java / lang / IllegalStateException " ) ; 
 - message = " Illegal State : " + classStr ; 
 - break ; 
 - 
 - case CrossTableLink : 
 - jExceptionClass = env - > FindClass ( " java / lang / IllegalStateException " ) ; 
 - message = " This class is referenced by other classes . Remove those fields first before removing this class . " ; 
 - break ; 
 - 
 case BadVersion : 
 jExceptionClass = env - > FindClass ( " io / realm / internal / async / BadVersionException " ) ; 
 message = classStr ; 
 break ; 
 
 - case LockFileError : 
 - jExceptionClass = env - > FindClass ( " io / realm / exceptions / IncompatibleLockFileException " ) ; 
 - message = classStr ; 
 - break ; 
 - 
 case IllegalState : 
 jExceptionClass = env - > FindClass ( " java / lang / IllegalStateException " ) ; 
 message = classStr ; 
 break ; 
 + 
 / / Should never get here . 
 case ExceptionKindMax : 
 default : 
 diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp 
 index 8213a63 . . 3465957 100644 
 - - - a / realm / realm - library / src / main / cpp / util . hpp 
 + + + b / realm / realm - library / src / main / cpp / util . hpp 
 @ @ - 86 , 25 + 86 , 15 @ @ std : : string num _ to _ string ( T pNumber ) 
 # define HO ( T , ptr ) reinterpret _ cast < realm : : SharedGroup : : Handover < T > * > ( ptr ) 
 
 / / Exception handling 
 - / / FIXME : RowInvalid and IllegalState both throw IllegalStateException , maybe remove the RowInvalid . 
 enum ExceptionKind { 
 ClassNotFound = 0 , 
 - NoSuchField , 
 - NoSuchMethod , 
 IllegalArgument , 
 - IOFailed , 
 - FileNotFound , 
 - FileAccessError , 
 IndexOutOfBounds , 
 - TableInvalid , 
 UnsupportedOperation , 
 OutOfMemory , 
 FatalError , 
 RuntimeError , 
 - RowInvalid , 
 - CrossTableLink , 
 BadVersion , 
 - LockFileError , 
 IllegalState , 
 / / NOTE ! ! ! ! : Please also add test cases to io _ realm _ internal _ TestUtil when introducing a 
 / / new exception kind . 
 @ @ - 220 , 7 + 210 , 7 @ @ inline bool TableIsValid ( JNIEnv * env , T * objPtr ) 
 } 
 if ( ! valid ) { 
 TR _ ERR ( " Table % p is no longer attached ! " , VOID _ PTR ( objPtr ) ) 
 - ThrowException ( env , TableInvalid , " Table is no longer valid to operate on . " ) ; 
 + ThrowException ( env , IllegalState , " Table is no longer valid to operate on . " ) ; 
 } 
 return valid ; 
 } 
 @ @ - 230 , 7 + 220 , 7 @ @ inline bool RowIsValid ( JNIEnv * env , realm : : Row * rowPtr ) 
 bool valid = ( rowPtr ! = NULL & & rowPtr - > is _ attached ( ) ) ; 
 if ( ! valid ) { 
 TR _ ERR ( " Row % p is no longer attached ! " , VOID _ PTR ( rowPtr ) ) 
 - ThrowException ( env , RowInvalid , " Object is no longer valid to operate on . Was it deleted by another thread ? " ) ; 
 + ThrowException ( env , IllegalState , " Object is no longer valid to operate on . Was it deleted by another thread ? " ) ; 
 } 
 return valid ; 
 }
