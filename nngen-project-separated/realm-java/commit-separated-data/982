BLEU SCORE: 0.03057230827292727

TEST MSG: fix # 1646
GENERATED MSG: Schemas are now only validated once across threads .

TEST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index a23276f . . 0e42864 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ <nl> package io . realm ; <nl> <nl> import android . content . Context ; <nl> + import android . os . SystemClock ; <nl> import android . test . AndroidTestCase ; <nl> <nl> import junit . framework . AssertionFailedError ; <nl> @ @ - 44 , 7 + 45 , 6 @ @ import java . util . concurrent . TimeoutException ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> <nl> import io . realm . dynamic . DynamicRealmObject ; <nl> - import io . realm . entities . AllJavaTypes ; <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . AllTypesPrimaryKey ; <nl> import io . realm . entities . AnnotationIndexTypes ; <nl> @ @ - 2219 , 4 + 2219 , 51 @ @ public class RealmTest extends AndroidTestCase { <nl> testRealm . cancelTransaction ( ) ; <nl> assertFalse ( testRealm . isInTransaction ( ) ) ; <nl> } <nl> + <nl> + / / test for https : / / github . com / realm / realm - java / issues / 1646 <nl> + public void testClosingRealmWhileOtherThreadIsOpeningRealm ( ) throws Exception { <nl> + final CountDownLatch startLatch = new CountDownLatch ( 1 ) ; <nl> + final CountDownLatch endLatch = new CountDownLatch ( 1 ) ; <nl> + <nl> + final List < Exception > exception = new ArrayList < Exception > ( ) ; <nl> + <nl> + new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + try { <nl> + startLatch . await ( ) ; <nl> + } catch ( InterruptedException e ) { <nl> + exception . add ( e ) ; <nl> + return ; <nl> + } <nl> + <nl> + final Realm realm = Realm . getInstance ( testConfig ) ; <nl> + try { <nl> + realm . where ( AllTypes . class ) . equalTo ( " columnLong " , 0L ) . findFirst ( ) ; <nl> + } catch ( Exception e ) { <nl> + exception . add ( e ) ; <nl> + } finally { <nl> + endLatch . countDown ( ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + } <nl> + } . start ( ) ; <nl> + <nl> + / / prevent for another thread to enter Realm . createAndValidate ( ) . <nl> + synchronized ( BaseRealm . class ) { <nl> + startLatch . countDown ( ) ; <nl> + <nl> + / / wait for another thread ' s entering Realm . createAndValidate ( ) . <nl> + SystemClock . sleep ( 100L ) ; <nl> + <nl> + testRealm . close ( ) ; <nl> + testRealm = null ; <nl> + } <nl> + <nl> + endLatch . await ( ) ; <nl> + <nl> + if ( ! exception . isEmpty ( ) ) { <nl> + throw exception . get ( 0 ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 7dc36bf . . 94faa6c 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 243 , 8 + 243 , 7 @ @ public final class Realm extends BaseRealm { <nl> private static synchronized Realm create ( RealmConfiguration configuration ) { <nl> boolean autoRefresh = Looper . myLooper ( ) ! = null ; <nl> try { <nl> - boolean validateSchema = ! validatedRealmFiles . containsKey ( configuration . getPath ( ) ) ; <nl> - return createAndValidate ( configuration , validateSchema , autoRefresh ) ; <nl> + return createAndValidate ( configuration , null , autoRefresh ) ; <nl> <nl> } catch ( RealmMigrationNeededException e ) { <nl> if ( configuration . shouldDeleteRealmIfMigrationNeeded ( ) ) { <nl> @ @ - 257 , 8 + 256 , 12 @ @ public final class Realm extends BaseRealm { <nl> } <nl> } <nl> <nl> - private static Realm createAndValidate ( RealmConfiguration configuration , boolean validateSchema , boolean autoRefresh ) { <nl> + private static Realm createAndValidate ( RealmConfiguration configuration , Boolean validateSchema , boolean autoRefresh ) { <nl> synchronized ( BaseRealm . class ) { <nl> + if ( validateSchema = = null ) { <nl> + validateSchema = ! validatedRealmFiles . containsKey ( configuration . getPath ( ) ) ; <nl> + } <nl> + <nl> / / Check if a cached instance already exists for this thread <nl> String canonicalPath = configuration . getPath ( ) ; <nl> Map < RealmConfiguration , Integer > localRefCount = referenceCount . get ( ) ; <nl> @ @ - 1149 , 7 + 1152 , 10 @ @ public final class Realm extends BaseRealm { <nl> <nl> @ Override <nl> protected void lastLocalInstanceClosed ( ) { <nl> - validatedRealmFiles . remove ( configuration . getPath ( ) ) ; <nl> + / / validatedRealmFiles must not modified while other thread is executing createAndValidate ( ) <nl> + synchronized ( BaseRealm . class ) { <nl> + validatedRealmFiles . remove ( configuration . getPath ( ) ) ; <nl> + } <nl> realmsCache . get ( ) . remove ( configuration ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index 661e2bb . . fccb21d 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 0 . 83 <nl> + * Opening a Realm file from one thread will no longer be blocked by a write transaction from another thread . <nl> * BREAKING CHANGE : Removed deprecated methods and constructors from the Realm class . <nl> * Fixed a bug which might cause failure when loading the native library . <nl> * Fixed a bug which might trigger a timeout in Context . finalize ( ) . <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 976bbd3 . . 8c55ec9 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . json . JSONObject ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . sql . Time ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Date ; <nl> @ @ - 39 , 6 + 40 , 9 @ @ import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . Future ; <nl> + import java . util . concurrent . FutureTask ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + import java . util . concurrent . TimeoutException ; <nl> <nl> import io . realm . dynamic . DynamicRealmObject ; <nl> import io . realm . entities . AllTypes ; <nl> @ @ - 1818 , 4 + 1822 , 38 @ @ public class RealmTest extends AndroidTestCase { <nl> testRealm = Realm . getInstance ( newConfig ) ; <nl> assertNotNull ( testRealm ) ; <nl> } <nl> + <nl> + public void testValidateSchemasOverThreads ( ) throws InterruptedException , TimeoutException , ExecutionException { <nl> + final RealmConfiguration config = TestHelper . createConfiguration ( getContext ( ) , " foo " ) ; <nl> + final CountDownLatch bgThreadLocked = new CountDownLatch ( 1 ) ; <nl> + final CountDownLatch mainThreadDone = new CountDownLatch ( 1 ) ; <nl> + <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + bgThreadLocked . countDown ( ) ; <nl> + try { <nl> + mainThreadDone . await ( 5 , TimeUnit . SECONDS ) ; <nl> + } catch ( InterruptedException ignored ) { <nl> + } <nl> + realm . close ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> + @ Override <nl> + public Boolean call ( ) throws Exception { <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + realm . close ( ) ; <nl> + mainThreadDone . countDown ( ) ; <nl> + return true ; <nl> + } <nl> + } ) ; <nl> + <nl> + bgThreadLocked . await ( 2 , TimeUnit . SECONDS ) ; <nl> + assertTrue ( future . get ( 2 , TimeUnit . SECONDS ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 17b02f9 . . 8ee5193 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 128 , 6 + 128 , 9 @ @ public final class Realm implements Closeable { <nl> } <nl> } ; <nl> <nl> + / / List of Realm files that has already been validated <nl> + private static final Map < String , Boolean > validatedRealmFiles = new ConcurrentHashMap < String , Boolean > ( ) ; <nl> + <nl> private static final ThreadLocal < Map < RealmConfiguration , Integer > > referenceCount = <nl> new ThreadLocal < Map < RealmConfiguration , Integer > > ( ) { <nl> @ Override <nl> @ @ - 242 , 6 + 245 , 7 @ @ public final class Realm implements Closeable { <nl> } <nl> if ( sharedGroup ! = null & & references = = 1 ) { <nl> realmsCache . get ( ) . remove ( configuration ) ; <nl> + validatedRealmFiles . remove ( configuration . getPath ( ) ) ; <nl> sharedGroup . close ( ) ; <nl> sharedGroup = null ; <nl> <nl> @ @ - 408 , 7 + 412 , 9 @ @ public final class Realm implements Closeable { <nl> private static Realm create ( RealmConfiguration configuration ) { <nl> boolean autoRefresh = Looper . myLooper ( ) ! = null ; <nl> try { <nl> - return createAndValidate ( configuration , true , autoRefresh ) ; <nl> + boolean validateSchema = validatedRealmFiles . containsKey ( configuration . getPath ( ) ) ; <nl> + return createAndValidate ( configuration , validateSchema , autoRefresh ) ; <nl> + <nl> } catch ( RealmMigrationNeededException e ) { <nl> if ( configuration . shouldDeleteRealmIfMigrationNeeded ( ) ) { <nl> deleteRealm ( configuration ) ; <nl> @ @ - 545 , 6 + 551 , 7 @ @ public final class Realm implements Closeable { <nl> mediator . validateTable ( modelClass , realm . transaction ) ; <nl> realm . columnIndices . addClass ( modelClass , mediator . getColumnIndices ( modelClass ) ) ; <nl> } <nl> + validatedRealmFiles . put ( realm . getPath ( ) , true ) ; <nl> } finally { <nl> if ( commitNeeded ) { <nl> realm . commitTransaction ( ) ; <nl> @ @ - 1477 , 6 + 1484 , 7 @ @ public final class Realm implements Closeable { <nl> realm . beginTransaction ( ) ; <nl> realm . setVersion ( realmMigration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> realm . commitTransaction ( ) ; <nl> + validatedRealmFiles . remove ( configuration . getPath ( ) ) ; <nl> } finally { <nl> if ( realm ! = null ) { <nl> realm . close ( ) ;

TEST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index a23276f . . 0e42864 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 16 , 6 + 16 , 7 @ @ 
 package io . realm ; 
 
 import android . content . Context ; 
 + import android . os . SystemClock ; 
 import android . test . AndroidTestCase ; 
 
 import junit . framework . AssertionFailedError ; 
 @ @ - 44 , 7 + 45 , 6 @ @ import java . util . concurrent . TimeoutException ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 
 import io . realm . dynamic . DynamicRealmObject ; 
 - import io . realm . entities . AllJavaTypes ; 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . AllTypesPrimaryKey ; 
 import io . realm . entities . AnnotationIndexTypes ; 
 @ @ - 2219 , 4 + 2219 , 51 @ @ public class RealmTest extends AndroidTestCase { 
 testRealm . cancelTransaction ( ) ; 
 assertFalse ( testRealm . isInTransaction ( ) ) ; 
 } 
 + 
 + / / test for https : / / github . com / realm / realm - java / issues / 1646 
 + public void testClosingRealmWhileOtherThreadIsOpeningRealm ( ) throws Exception { 
 + final CountDownLatch startLatch = new CountDownLatch ( 1 ) ; 
 + final CountDownLatch endLatch = new CountDownLatch ( 1 ) ; 
 + 
 + final List < Exception > exception = new ArrayList < Exception > ( ) ; 
 + 
 + new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + startLatch . await ( ) ; 
 + } catch ( InterruptedException e ) { 
 + exception . add ( e ) ; 
 + return ; 
 + } 
 + 
 + final Realm realm = Realm . getInstance ( testConfig ) ; 
 + try { 
 + realm . where ( AllTypes . class ) . equalTo ( " columnLong " , 0L ) . findFirst ( ) ; 
 + } catch ( Exception e ) { 
 + exception . add ( e ) ; 
 + } finally { 
 + endLatch . countDown ( ) ; 
 + realm . close ( ) ; 
 + } 
 + } 
 + } . start ( ) ; 
 + 
 + / / prevent for another thread to enter Realm . createAndValidate ( ) . 
 + synchronized ( BaseRealm . class ) { 
 + startLatch . countDown ( ) ; 
 + 
 + / / wait for another thread ' s entering Realm . createAndValidate ( ) . 
 + SystemClock . sleep ( 100L ) ; 
 + 
 + testRealm . close ( ) ; 
 + testRealm = null ; 
 + } 
 + 
 + endLatch . await ( ) ; 
 + 
 + if ( ! exception . isEmpty ( ) ) { 
 + throw exception . get ( 0 ) ; 
 + } 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 7dc36bf . . 94faa6c 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 243 , 8 + 243 , 7 @ @ public final class Realm extends BaseRealm { 
 private static synchronized Realm create ( RealmConfiguration configuration ) { 
 boolean autoRefresh = Looper . myLooper ( ) ! = null ; 
 try { 
 - boolean validateSchema = ! validatedRealmFiles . containsKey ( configuration . getPath ( ) ) ; 
 - return createAndValidate ( configuration , validateSchema , autoRefresh ) ; 
 + return createAndValidate ( configuration , null , autoRefresh ) ; 
 
 } catch ( RealmMigrationNeededException e ) { 
 if ( configuration . shouldDeleteRealmIfMigrationNeeded ( ) ) { 
 @ @ - 257 , 8 + 256 , 12 @ @ public final class Realm extends BaseRealm { 
 } 
 } 
 
 - private static Realm createAndValidate ( RealmConfiguration configuration , boolean validateSchema , boolean autoRefresh ) { 
 + private static Realm createAndValidate ( RealmConfiguration configuration , Boolean validateSchema , boolean autoRefresh ) { 
 synchronized ( BaseRealm . class ) { 
 + if ( validateSchema = = null ) { 
 + validateSchema = ! validatedRealmFiles . containsKey ( configuration . getPath ( ) ) ; 
 + } 
 + 
 / / Check if a cached instance already exists for this thread 
 String canonicalPath = configuration . getPath ( ) ; 
 Map < RealmConfiguration , Integer > localRefCount = referenceCount . get ( ) ; 
 @ @ - 1149 , 7 + 1152 , 10 @ @ public final class Realm extends BaseRealm { 
 
 @ Override 
 protected void lastLocalInstanceClosed ( ) { 
 - validatedRealmFiles . remove ( configuration . getPath ( ) ) ; 
 + / / validatedRealmFiles must not modified while other thread is executing createAndValidate ( ) 
 + synchronized ( BaseRealm . class ) { 
 + validatedRealmFiles . remove ( configuration . getPath ( ) ) ; 
 + } 
 realmsCache . get ( ) . remove ( configuration ) ; 
 } 


NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index 661e2bb . . fccb21d 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 0 . 83 
 + * Opening a Realm file from one thread will no longer be blocked by a write transaction from another thread . 
 * BREAKING CHANGE : Removed deprecated methods and constructors from the Realm class . 
 * Fixed a bug which might cause failure when loading the native library . 
 * Fixed a bug which might trigger a timeout in Context . finalize ( ) . 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 976bbd3 . . 8c55ec9 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . json . JSONObject ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 + import java . sql . Time ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Date ; 
 @ @ - 39 , 6 + 40 , 9 @ @ import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . Future ; 
 + import java . util . concurrent . FutureTask ; 
 + import java . util . concurrent . TimeUnit ; 
 + import java . util . concurrent . TimeoutException ; 
 
 import io . realm . dynamic . DynamicRealmObject ; 
 import io . realm . entities . AllTypes ; 
 @ @ - 1818 , 4 + 1822 , 38 @ @ public class RealmTest extends AndroidTestCase { 
 testRealm = Realm . getInstance ( newConfig ) ; 
 assertNotNull ( testRealm ) ; 
 } 
 + 
 + public void testValidateSchemasOverThreads ( ) throws InterruptedException , TimeoutException , ExecutionException { 
 + final RealmConfiguration config = TestHelper . createConfiguration ( getContext ( ) , " foo " ) ; 
 + final CountDownLatch bgThreadLocked = new CountDownLatch ( 1 ) ; 
 + final CountDownLatch mainThreadDone = new CountDownLatch ( 1 ) ; 
 + 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + bgThreadLocked . countDown ( ) ; 
 + try { 
 + mainThreadDone . await ( 5 , TimeUnit . SECONDS ) ; 
 + } catch ( InterruptedException ignored ) { 
 + } 
 + realm . close ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 + @ Override 
 + public Boolean call ( ) throws Exception { 
 + Realm realm = Realm . getInstance ( config ) ; 
 + realm . close ( ) ; 
 + mainThreadDone . countDown ( ) ; 
 + return true ; 
 + } 
 + } ) ; 
 + 
 + bgThreadLocked . await ( 2 , TimeUnit . SECONDS ) ; 
 + assertTrue ( future . get ( 2 , TimeUnit . SECONDS ) ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 17b02f9 . . 8ee5193 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 128 , 6 + 128 , 9 @ @ public final class Realm implements Closeable { 
 } 
 } ; 
 
 + / / List of Realm files that has already been validated 
 + private static final Map < String , Boolean > validatedRealmFiles = new ConcurrentHashMap < String , Boolean > ( ) ; 
 + 
 private static final ThreadLocal < Map < RealmConfiguration , Integer > > referenceCount = 
 new ThreadLocal < Map < RealmConfiguration , Integer > > ( ) { 
 @ Override 
 @ @ - 242 , 6 + 245 , 7 @ @ public final class Realm implements Closeable { 
 } 
 if ( sharedGroup ! = null & & references = = 1 ) { 
 realmsCache . get ( ) . remove ( configuration ) ; 
 + validatedRealmFiles . remove ( configuration . getPath ( ) ) ; 
 sharedGroup . close ( ) ; 
 sharedGroup = null ; 
 
 @ @ - 408 , 7 + 412 , 9 @ @ public final class Realm implements Closeable { 
 private static Realm create ( RealmConfiguration configuration ) { 
 boolean autoRefresh = Looper . myLooper ( ) ! = null ; 
 try { 
 - return createAndValidate ( configuration , true , autoRefresh ) ; 
 + boolean validateSchema = validatedRealmFiles . containsKey ( configuration . getPath ( ) ) ; 
 + return createAndValidate ( configuration , validateSchema , autoRefresh ) ; 
 + 
 } catch ( RealmMigrationNeededException e ) { 
 if ( configuration . shouldDeleteRealmIfMigrationNeeded ( ) ) { 
 deleteRealm ( configuration ) ; 
 @ @ - 545 , 6 + 551 , 7 @ @ public final class Realm implements Closeable { 
 mediator . validateTable ( modelClass , realm . transaction ) ; 
 realm . columnIndices . addClass ( modelClass , mediator . getColumnIndices ( modelClass ) ) ; 
 } 
 + validatedRealmFiles . put ( realm . getPath ( ) , true ) ; 
 } finally { 
 if ( commitNeeded ) { 
 realm . commitTransaction ( ) ; 
 @ @ - 1477 , 6 + 1484 , 7 @ @ public final class Realm implements Closeable { 
 realm . beginTransaction ( ) ; 
 realm . setVersion ( realmMigration . execute ( realm , realm . getVersion ( ) ) ) ; 
 realm . commitTransaction ( ) ; 
 + validatedRealmFiles . remove ( configuration . getPath ( ) ) ; 
 } finally { 
 if ( realm ! = null ) { 
 realm . close ( ) ;
