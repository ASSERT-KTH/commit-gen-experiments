BLEU SCORE: 0.0410424993119494

TEST MSG: Remove largeRealmMultipleThreads
GENERATED MSG: Unit test to expose timeout in finalizer

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> index 0c6f652 . . 35456d2 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> @ @ - 2554 , 47 + 2554 , 6 @ @ public class RealmQueryTests extends QueryTests { <nl> } <nl> } <nl> <nl> - @ Ignore ( " Disabled because it is time consuming " ) <nl> - @ Test <nl> - public void largeRealmMultipleThreads ( ) throws InterruptedException { <nl> - final int nObjects = 500000 ; <nl> - final int nThreads = 3 ; <nl> - final CountDownLatch latch = new CountDownLatch ( nThreads ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - realm . delete ( StringOnly . class ) ; <nl> - for ( int i = 0 ; i < nObjects ; i + + ) { <nl> - StringOnly stringOnly = realm . createObject ( StringOnly . class ) ; <nl> - stringOnly . setChars ( String . format ( " string % d " , i ) ) ; <nl> - } <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - <nl> - for ( int i = 0 ; i < nThreads ; i + + ) { <nl> - Thread thread = new Thread ( <nl> - new Runnable ( ) { <nl> - @ Override <nl> - @ SuppressWarnings ( " ElementsCountedInLoop " ) <nl> - public void run ( ) { <nl> - RealmConfiguration realmConfig = configFactory . createConfiguration ( ) ; <nl> - Realm realm = Realm . getInstance ( realmConfig ) ; <nl> - RealmResults < StringOnly > realmResults = realm . where ( StringOnly . class ) . findAll ( ) ; <nl> - int n = 0 ; <nl> - for ( StringOnly ignored : realmResults ) { <nl> - n = n + 1 ; <nl> - } <nl> - assertEquals ( nObjects , n ) ; <nl> - realm . close ( ) ; <nl> - latch . countDown ( ) ; <nl> - } <nl> - } <nl> - ) ; <nl> - thread . start ( ) ; <nl> - } <nl> - <nl> - TestHelper . awaitOrFail ( latch ) ; <nl> - } <nl> - <nl> @ Test <nl> public void isValid _ tableQuery ( ) { <nl> final RealmQuery < AllTypes > query = realm . where ( AllTypes . class ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmQueryTest . java b / realm / src / androidTest / java / io / realm / RealmQueryTest . java <nl> index e408d7c . . 2e664ac 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmQueryTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmQueryTest . java <nl> @ @ - 477 , 4 + 477 , 64 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> System . gc ( ) ; / / if a native resource has a reference count = 0 , doing GC here might lead to a crash <nl> } <nl> } <nl> + <nl> + public void testLargeRealmMultipleThreads ( ) { <nl> + final int nObjects = 1000000 ; <nl> + testRealm . beginTransaction ( ) ; <nl> + testRealm . clear ( StringOnly . class ) ; <nl> + for ( int i = 0 ; i < nObjects ; i + + ) { <nl> + StringOnly stringOnly = testRealm . createObject ( StringOnly . class ) ; <nl> + stringOnly . setChars ( String . format ( " string % d " , i ) ) ; <nl> + } <nl> + testRealm . commitTransaction ( ) ; <nl> + <nl> + Runnable runnable1 = new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> + RealmResults < StringOnly > realmResults = realm . where ( StringOnly . class ) . beginsWith ( " chars " , " st " ) . findAll ( ) ; <nl> + int n = 0 ; <nl> + for ( StringOnly stringOnly : realmResults ) { <nl> + n = n + 1 ; <nl> + } <nl> + assertEquals ( nObjects , n ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + } ; <nl> + Thread thread1 = new Thread ( runnable1 ) ; <nl> + <nl> + Runnable runnable2 = new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> + RealmResults < StringOnly > realmResults = realm . where ( StringOnly . class ) . endsWith ( " chars " , " 0 " ) . findAll ( ) ; <nl> + int n = 0 ; <nl> + for ( StringOnly stringOnly : realmResults ) { <nl> + n = n + 1 ; <nl> + } <nl> + assertEquals ( nObjects / 10 , n ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + } ; <nl> + Thread thread2 = new Thread ( runnable2 ) ; <nl> + <nl> + thread1 . start ( ) ; <nl> + thread2 . start ( ) ; <nl> + <nl> + RealmResults < StringOnly > realmResults = testRealm . allObjects ( StringOnly . class ) ; <nl> + int n = 0 ; <nl> + for ( StringOnly stringOnly : realmResults ) { <nl> + n = n + 1 ; <nl> + } <nl> + assertEquals ( nObjects , n ) ; <nl> + <nl> + try { <nl> + Thread . sleep ( 10000 ) ; <nl> + } catch ( InterruptedException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + <nl> + } <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 index 0c6f652 . . 35456d2 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 @ @ - 2554 , 47 + 2554 , 6 @ @ public class RealmQueryTests extends QueryTests { 
 } 
 } 
 
 - @ Ignore ( " Disabled because it is time consuming " ) 
 - @ Test 
 - public void largeRealmMultipleThreads ( ) throws InterruptedException { 
 - final int nObjects = 500000 ; 
 - final int nThreads = 3 ; 
 - final CountDownLatch latch = new CountDownLatch ( nThreads ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - realm . delete ( StringOnly . class ) ; 
 - for ( int i = 0 ; i < nObjects ; i + + ) { 
 - StringOnly stringOnly = realm . createObject ( StringOnly . class ) ; 
 - stringOnly . setChars ( String . format ( " string % d " , i ) ) ; 
 - } 
 - realm . commitTransaction ( ) ; 
 - 
 - 
 - for ( int i = 0 ; i < nThreads ; i + + ) { 
 - Thread thread = new Thread ( 
 - new Runnable ( ) { 
 - @ Override 
 - @ SuppressWarnings ( " ElementsCountedInLoop " ) 
 - public void run ( ) { 
 - RealmConfiguration realmConfig = configFactory . createConfiguration ( ) ; 
 - Realm realm = Realm . getInstance ( realmConfig ) ; 
 - RealmResults < StringOnly > realmResults = realm . where ( StringOnly . class ) . findAll ( ) ; 
 - int n = 0 ; 
 - for ( StringOnly ignored : realmResults ) { 
 - n = n + 1 ; 
 - } 
 - assertEquals ( nObjects , n ) ; 
 - realm . close ( ) ; 
 - latch . countDown ( ) ; 
 - } 
 - } 
 - ) ; 
 - thread . start ( ) ; 
 - } 
 - 
 - TestHelper . awaitOrFail ( latch ) ; 
 - } 
 - 
 @ Test 
 public void isValid _ tableQuery ( ) { 
 final RealmQuery < AllTypes > query = realm . where ( AllTypes . class ) ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmQueryTest . java b / realm / src / androidTest / java / io / realm / RealmQueryTest . java 
 index e408d7c . . 2e664ac 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmQueryTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmQueryTest . java 
 @ @ - 477 , 4 + 477 , 64 @ @ public class RealmQueryTest extends AndroidTestCase { 
 System . gc ( ) ; / / if a native resource has a reference count = 0 , doing GC here might lead to a crash 
 } 
 } 
 + 
 + public void testLargeRealmMultipleThreads ( ) { 
 + final int nObjects = 1000000 ; 
 + testRealm . beginTransaction ( ) ; 
 + testRealm . clear ( StringOnly . class ) ; 
 + for ( int i = 0 ; i < nObjects ; i + + ) { 
 + StringOnly stringOnly = testRealm . createObject ( StringOnly . class ) ; 
 + stringOnly . setChars ( String . format ( " string % d " , i ) ) ; 
 + } 
 + testRealm . commitTransaction ( ) ; 
 + 
 + Runnable runnable1 = new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 + RealmResults < StringOnly > realmResults = realm . where ( StringOnly . class ) . beginsWith ( " chars " , " st " ) . findAll ( ) ; 
 + int n = 0 ; 
 + for ( StringOnly stringOnly : realmResults ) { 
 + n = n + 1 ; 
 + } 
 + assertEquals ( nObjects , n ) ; 
 + realm . close ( ) ; 
 + } 
 + } ; 
 + Thread thread1 = new Thread ( runnable1 ) ; 
 + 
 + Runnable runnable2 = new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 + RealmResults < StringOnly > realmResults = realm . where ( StringOnly . class ) . endsWith ( " chars " , " 0 " ) . findAll ( ) ; 
 + int n = 0 ; 
 + for ( StringOnly stringOnly : realmResults ) { 
 + n = n + 1 ; 
 + } 
 + assertEquals ( nObjects / 10 , n ) ; 
 + realm . close ( ) ; 
 + } 
 + } ; 
 + Thread thread2 = new Thread ( runnable2 ) ; 
 + 
 + thread1 . start ( ) ; 
 + thread2 . start ( ) ; 
 + 
 + RealmResults < StringOnly > realmResults = testRealm . allObjects ( StringOnly . class ) ; 
 + int n = 0 ; 
 + for ( StringOnly stringOnly : realmResults ) { 
 + n = n + 1 ; 
 + } 
 + assertEquals ( nObjects , n ) ; 
 + 
 + try { 
 + Thread . sleep ( 10000 ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + } 
 }
