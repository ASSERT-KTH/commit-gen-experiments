BLEU SCORE: 0.0321858262703621

TEST MSG: Upgrade to Sync - RC21 and ROS 2 . 0 . 0 - alpha . 34
GENERATED MSG: Add support for SyncCredentials . accessToken . Updated integration tests .

TEST DIFF (one line): diff - - git a / Jenkinsfile b / Jenkinsfile <nl> index dc74785 . . 19aa5a9 100644 <nl> - - - a / Jenkinsfile <nl> + + + b / Jenkinsfile <nl> @ @ - 6 , 7 + 6 , 7 @ @ def buildSuccess = false <nl> def rosContainer <nl> try { <nl> node ( ' android ' ) { <nl> - timeout ( time : 1 , unit : ' HOURS ' ) { <nl> + timeout ( time : 90 , unit : ' MINUTES ' ) { <nl> / / Allocate a custom workspace to avoid having % in the path ( it breaks ld ) <nl> ws ( ' / tmp / realm - java ' ) { <nl> 	 stage ( ' SCM ' ) { <nl> diff - - git a / dependencies . list b / dependencies . list <nl> index 1398418 . . 91cfac3 100644 <nl> - - - a / dependencies . list <nl> + + + b / dependencies . list <nl> @ @ - 1 , 8 + 1 , 8 @ @ <nl> # Realm Sync Core release used by Realm Java <nl> # https : / / github . com / realm / realm - sync / releases <nl> - REALM _ SYNC _ VERSION = 2 . 0 . 0 - rc18 <nl> - REALM _ SYNC _ SHA256 = 73cb89c1a04cafa871444aa91d93eb9df16af088bcb7d3ede73bb815d53a06e5 <nl> + REALM _ SYNC _ VERSION = 2 . 0 . 0 - rc21 <nl> + REALM _ SYNC _ SHA256 = 5e09e54e68e78683e006898f5a703f80e0ee49492fb0f9dc2384fcbbb9f02f70 <nl> <nl> # Object Server Release used by Integration tests . Installed using NPM . <nl> # Use ` npm view realm - object - server versions ` to get a list of available versions . <nl> - REALM _ OBJECT _ SERVER _ DE _ VERSION = 2 . 0 . 0 - alpha . 30 <nl> + REALM _ OBJECT _ SERVER _ DE _ VERSION = 2 . 0 . 0 - alpha . 34 <nl> diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store <nl> index 6f7804a . . cdd0d8c 160000 <nl> - - - a / realm / realm - library / src / main / cpp / object - store <nl> + + + b / realm / realm - library / src / main / cpp / object - store <nl> @ @ - 1 + 1 @ @ <nl> - Subproject commit 6f7804a2332732e0c2d2db6bf920a38c75e72fb2 <nl> + Subproject commit cdd0d8c82ba6dfb60ebc2c339b26b7b3ca4d4047 <nl> diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp <nl> index b7e157c . . 25c0299 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / util . cpp <nl> @ @ - 224 , 6 + 224 , 9 @ @ void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : Rea <nl> case realm : : RealmFileException : : Kind : : FormatUpgradeRequired : <nl> kind _ code = io _ realm _ internal _ SharedRealm _ FILE _ EXCEPTION _ KIND _ FORMAT _ UPGRADE _ REQUIRED ; <nl> break ; <nl> + case realm : : RealmFileException : : Kind : : IncompatibleSyncedRealm : <nl> + kind _ code = io _ realm _ internal _ SharedRealm _ FILE _ EXCEPTION _ INCOMPATIBLE _ SYNC _ FILE ; <nl> + break ; <nl> } <nl> jstring jstr = env - > NewStringUTF ( message . c _ str ( ) ) ; <nl> jobject exception = env - > NewObject ( cls , constructor , kind _ code , jstr ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java b / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java <nl> index 07e6b86 . . 716c026 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java <nl> @ @ - 60 , 7 + 60 , 12 @ @ public class RealmFileException extends RuntimeException { <nl> / * * <nl> * Thrown if the file needs to be upgraded to a new format , but upgrades have been explicitly disabled . <nl> * / <nl> - FORMAT _ UPGRADE _ REQUIRED ; <nl> + FORMAT _ UPGRADE _ REQUIRED , <nl> + / * * <nl> + * Thrown if an attempt was made to open an Realm file created with Realm Object Server 1 . * , which is <nl> + * not compatible with Realm Object Server 2 . * . This exception should automatically be handled by Realm . <nl> + * / <nl> + INCOMPATIBLE _ SYNC _ FILE ; <nl> <nl> / / Created from byte values by JNI . <nl> static Kind getKind ( byte value ) { <nl> @ @ - 79 , 6 + 84 , 8 @ @ public class RealmFileException extends RuntimeException { <nl> return FORMAT _ UPGRADE _ REQUIRED ; <nl> case SharedRealm . FILE _ EXCEPTION _ KIND _ BAD _ HISTORY : <nl> return BAD _ HISTORY ; <nl> + case SharedRealm . FILE _ EXCEPTION _ INCOMPATIBLE _ SYNC _ FILE : <nl> + return INCOMPATIBLE _ SYNC _ FILE ; <nl> default : <nl> throw new RuntimeException ( " Unknown value for RealmFileException kind . " ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index c2a81e4 . . e2308c9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ public final class SharedRealm implements Closeable , NativeObject { <nl> public static final byte FILE _ EXCEPTION _ KIND _ NOT _ FOUND = 4 ; <nl> public static final byte FILE _ EXCEPTION _ KIND _ INCOMPATIBLE _ LOCK _ FILE = 5 ; <nl> public static final byte FILE _ EXCEPTION _ KIND _ FORMAT _ UPGRADE _ REQUIRED = 6 ; <nl> + public static final byte FILE _ EXCEPTION _ INCOMPATIBLE _ SYNC _ FILE = 7 ; <nl> private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; <nl> <nl> public static void initialize ( File tempDirectory ) { <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> index 429e2e6 . . 23a60d5 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> @ @ - 274 , 7 + 274 , 31 @ @ public class SyncUser { <nl> / / the similar SyncConfiguration using the same identity , but with different ( new ) <nl> / / refresh - token . <nl> realms . clear ( ) ; <nl> - SyncManager . notifyUserLoggedOut ( SyncUser . this ) ; <nl> + <nl> + / / Finally revoke server token . The local user is logged out in any case . <nl> + final AuthenticationServer server = SyncManager . getAuthServer ( ) ; <nl> + / / don ' t reference directly the refreshToken inside the revoke request <nl> + / / as it may revoke the newly acquired refresh _ token <nl> + final Token refreshTokenToBeRevoked = refreshToken ; <nl> + <nl> + ThreadPoolExecutor networkPoolExecutor = SyncManager . NETWORK _ POOL _ EXECUTOR ; <nl> + networkPoolExecutor . submit ( new ExponentialBackoffTask < LogoutResponse > ( ) { <nl> + <nl> + @ Override <nl> + protected LogoutResponse execute ( ) { <nl> + return server . logout ( refreshTokenToBeRevoked , getAuthenticationUrl ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void onSuccess ( LogoutResponse response ) { <nl> + SyncManager . notifyUserLoggedOut ( SyncUser . this ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void onError ( LogoutResponse response ) { <nl> + RealmLog . error ( " Failed to log user out . \ n " + response . getError ( ) . toString ( ) ) ; <nl> + } <nl> + } ) ; <nl> } <nl> } <nl> <nl> @ @ - 503 , 16 + 527 , 10 @ @ public class SyncUser { <nl> AuthenticationServer authServer = SyncManager . getAuthServer ( ) ; <nl> LookupUserIdResponse response = authServer . retrieveUser ( refreshToken , provider , providerUserIdentity , getAuthenticationUrl ( ) ) ; <nl> if ( ! response . isValid ( ) ) { <nl> - / / the endpoint returns a 404 if it can ' t honor the query , either because <nl> - / / - provider is not valid <nl> - / / - provider _ id is not valid <nl> - / / - token used is not an admin one <nl> - / / in this case we should return null instead of throwing <nl> - if ( response . getError ( ) . getErrorCode ( ) = = ErrorCode . NOT _ FOUND ) { <nl> - return null ; <nl> - } else { <nl> - throw response . getError ( ) ; <nl> - } <nl> + / / Right now errors are very inconsistent . See https : / / github . com / realm / ros / issues / 310 <nl> + / / Treat them all as " User not existing " . This is too broad , and should be revisited <nl> + / / once # 310 is fixed . <nl> + return null ; <nl> } else { <nl> return SyncUserInfo . fromLookupUserIdResponse ( response ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthServerResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthServerResponse . java <nl> index c6d2c470 . . 4285b56 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthServerResponse . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthServerResponse . java <nl> @ @ - 63 , 7 + 63 , 14 @ @ public abstract class AuthServerResponse { <nl> JSONObject obj = new JSONObject ( response ) ; <nl> String title = obj . optString ( " title " , null ) ; <nl> String hint = obj . optString ( " hint " , null ) ; <nl> - ErrorCode errorCode = ErrorCode . fromInt ( obj . optInt ( " code " , - 1 ) ) ; <nl> + ErrorCode errorCode ; <nl> + if ( obj . has ( " code " ) ) { <nl> + errorCode = ErrorCode . fromInt ( obj . getInt ( " code " ) ) ; <nl> + } else if ( obj . has ( " status " ) ) { <nl> + errorCode = ErrorCode . fromInt ( obj . getInt ( " status " ) ) ; <nl> + } else { <nl> + errorCode = ErrorCode . UNKNOWN ; <nl> + } <nl> return new ObjectServerError ( errorCode , title , hint ) ; <nl> } catch ( JSONException e ) { <nl> return new ObjectServerError ( ErrorCode . JSON _ EXCEPTION , " Server failed with " + <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / ChangePasswordRequest . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / ChangePasswordRequest . java <nl> index 8e22c09 . . 6ca1f3a 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / ChangePasswordRequest . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / ChangePasswordRequest . java <nl> @ @ - 56 , 10 + 56 , 9 @ @ public class ChangePasswordRequest { <nl> public String toJson ( ) { <nl> try { <nl> JSONObject request = new JSONObject ( ) ; <nl> - request . put ( " token " , token ) ; <nl> - request . put ( " password " , newPassword ) ; <nl> + request . put ( " newPassword " , newPassword ) ; <nl> if ( userID ! = null ) { <nl> - request . put ( " user _ id " , userID ) ; <nl> + request . put ( " userId " , userID ) ; <nl> } <nl> return request . toString ( ) ; <nl> } catch ( JSONException e ) { <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> index 997f59c . . 88a6fcf 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . net . URL ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import io . realm . SyncCredentials ; <nl> + import io . realm . internal . Util ; <nl> import io . realm . internal . objectserver . Token ; <nl> import io . realm . log . RealmLog ; <nl> import okhttp3 . Call ; <nl> @ @ - 36 , 8 + 37 , 8 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { <nl> <nl> public static final MediaType JSON = MediaType . parse ( " application / json ; charset = utf - 8 " ) ; <nl> private static final String ACTION _ LOGOUT = " revoke " ; / / Auth end point for logging out users <nl> - private static final String ACTION _ CHANGE _ PASSWORD = " users / : userId : / password " ; / / Auth end point for changing passwords <nl> - private static final String ACTION _ LOOKUP _ USER _ ID = " users " ; / / Auth end point for looking up user id <nl> + private static final String ACTION _ CHANGE _ PASSWORD = " password " ; / / Auth end point for changing passwords <nl> + private static final String ACTION _ LOOKUP _ USER _ ID = " / users / : provider : / : providerId : " ; / / Auth end point for looking up user id <nl> <nl> private final OkHttpClient client = new OkHttpClient . Builder ( ) <nl> . connectTimeout ( 10 , TimeUnit . SECONDS ) <nl> @ @ - 86 , 7 + 87 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { <nl> public LogoutResponse logout ( Token userToken , URL authenticationUrl ) { <nl> try { <nl> String requestBody = LogoutRequest . create ( userToken ) . toJson ( ) ; <nl> - return logout ( buildActionUrl ( authenticationUrl , ACTION _ LOGOUT ) , requestBody ) ; <nl> + return logout ( buildActionUrl ( authenticationUrl , ACTION _ LOGOUT ) , userToken . value ( ) , requestBody ) ; <nl> } catch ( Exception e ) { <nl> return LogoutResponse . from ( e ) ; <nl> } <nl> @ @ - 96 , 7 + 97 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { <nl> public ChangePasswordResponse changePassword ( Token userToken , String newPassword , URL authenticationUrl ) { <nl> try { <nl> String requestBody = ChangePasswordRequest . create ( userToken , newPassword ) . toJson ( ) ; <nl> - return changePassword ( buildActionUrl ( authenticationUrl , ACTION _ CHANGE _ PASSWORD ) , requestBody ) ; <nl> + return changePassword ( buildActionUrl ( authenticationUrl , ACTION _ CHANGE _ PASSWORD ) , userToken . value ( ) , requestBody ) ; <nl> } catch ( Exception e ) { <nl> return ChangePasswordResponse . from ( e ) ; <nl> } <nl> @ @ - 106 , 7 + 107 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { <nl> public ChangePasswordResponse changePassword ( Token adminToken , String userId , String newPassword , URL authenticationUrl ) { <nl> try { <nl> String requestBody = ChangePasswordRequest . create ( adminToken , userId , newPassword ) . toJson ( ) ; <nl> - return changePassword ( buildActionUrl ( authenticationUrl , ACTION _ CHANGE _ PASSWORD . replace ( " : userId : " , userId ) ) , requestBody ) ; <nl> + return changePassword ( buildActionUrl ( authenticationUrl , ACTION _ CHANGE _ PASSWORD ) , adminToken . value ( ) , requestBody ) ; <nl> } catch ( Exception e ) { <nl> return ChangePasswordResponse . from ( e ) ; <nl> } <nl> @ @ - 115 , 7 + 116 , 10 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { <nl> @ Override <nl> public LookupUserIdResponse retrieveUser ( Token adminToken , String provider , String providerId , URL authenticationUrl ) { <nl> try { <nl> - return lookupUserId ( buildLookupUserIdUrl ( authenticationUrl , ACTION _ LOOKUP _ USER _ ID , provider , providerId ) , adminToken . value ( ) ) ; <nl> + String action = ACTION _ LOOKUP _ USER _ ID <nl> + . replace ( " : provider : " , provider ) <nl> + . replace ( " : providerId : " , providerId ) ; <nl> + return lookupUserId ( buildActionUrl ( authenticationUrl , action ) , adminToken . value ( ) ) ; <nl> } catch ( Exception e ) { <nl> return LookupUserIdResponse . from ( e ) ; <nl> } <nl> @ @ - 132 , 53 + 136 , 62 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { <nl> } <nl> } <nl> <nl> - private static URL buildLookupUserIdUrl ( URL authenticationUrl , String action , String provider , String providerId ) { <nl> - String authURL = authenticationUrl . toExternalForm ( ) ; <nl> - String separator = authURL . endsWith ( " / " ) ? " " : " / " ; <nl> - try { <nl> - return new URL ( authURL + separator + action + " / " + providerId ) ; <nl> - } catch ( MalformedURLException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> private AuthenticateResponse authenticate ( URL authenticationUrl , String requestBody ) throws Exception { <nl> RealmLog . debug ( " Network request ( authenticate ) : " + authenticationUrl ) ; <nl> - Request request = newAuthRequest ( authenticationUrl ) . post ( RequestBody . create ( JSON , requestBody ) ) . build ( ) ; <nl> + Request request = newAuthRequest ( authenticationUrl ) <nl> + . post ( RequestBody . create ( JSON , requestBody ) ) <nl> + . build ( ) ; <nl> Call call = client . newCall ( request ) ; <nl> Response response = call . execute ( ) ; <nl> return AuthenticateResponse . from ( response ) ; <nl> } <nl> <nl> - private LogoutResponse logout ( URL logoutUrl , String requestBody ) throws Exception { <nl> + private LogoutResponse logout ( URL logoutUrl , String authToken , String requestBody ) throws Exception { <nl> RealmLog . debug ( " Network request ( logout ) : " + logoutUrl ) ; <nl> - Request request = newAuthRequest ( logoutUrl ) . post ( RequestBody . create ( JSON , requestBody ) ) . build ( ) ; <nl> + Request request = newAuthRequest ( logoutUrl , authToken ) <nl> + . post ( RequestBody . create ( JSON , requestBody ) ) <nl> + . build ( ) ; <nl> Call call = client . newCall ( request ) ; <nl> Response response = call . execute ( ) ; <nl> return LogoutResponse . from ( response ) ; <nl> } <nl> <nl> - private ChangePasswordResponse changePassword ( URL changePasswordUrl , String requestBody ) throws Exception { <nl> + private ChangePasswordResponse changePassword ( URL changePasswordUrl , String authToken , String requestBody ) throws Exception { <nl> RealmLog . debug ( " Network request ( changePassword ) : " + changePasswordUrl ) ; <nl> - Request request = newAuthRequest ( changePasswordUrl ) . put ( RequestBody . create ( JSON , requestBody ) ) . build ( ) ; <nl> + Request request = newAuthRequest ( changePasswordUrl , authToken ) <nl> + . put ( RequestBody . create ( JSON , requestBody ) ) <nl> + . build ( ) ; <nl> Call call = client . newCall ( request ) ; <nl> Response response = call . execute ( ) ; <nl> return ChangePasswordResponse . from ( response ) ; <nl> } <nl> <nl> - private LookupUserIdResponse lookupUserId ( URL lookupUserIdUrl , String token ) throws Exception { <nl> + private LookupUserIdResponse lookupUserId ( URL lookupUserIdUrl , String authToken ) throws Exception { <nl> RealmLog . debug ( " Network request ( lookupUserId ) : " + lookupUserIdUrl ) ; <nl> - Request request = newAuthRequest ( lookupUserIdUrl ) . get ( ) . header ( " Authorization " , token ) . build ( ) ; <nl> + Request request = newAuthRequest ( lookupUserIdUrl , authToken ) <nl> + . get ( ) <nl> + . build ( ) ; <nl> Call call = client . newCall ( request ) ; <nl> Response response = call . execute ( ) ; <nl> return LookupUserIdResponse . from ( response ) ; <nl> } <nl> <nl> private Request . Builder newAuthRequest ( URL url ) { <nl> - return new Request . Builder ( ) <nl> + return newAuthRequest ( url , null ) ; <nl> + } <nl> + <nl> + private Request . Builder newAuthRequest ( URL url , String authToken ) { <nl> + Request . Builder builder = new Request . Builder ( ) <nl> . url ( url ) <nl> . addHeader ( " Content - Type " , " application / json " ) <nl> . addHeader ( " Accept " , " application / json " ) ; <nl> + <nl> + / / Only add Authorization header for those API ' s that require it . <nl> + if ( ! Util . isEmptyString ( authToken ) ) { <nl> + builder . addHeader ( " Authorization " , authToken ) ; <nl> + } <nl> + <nl> + return builder ; <nl> } <nl> <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> index 9bd027c . . 9b006ac 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import io . realm . SyncManager ; <nl> import io . realm . SyncSession ; <nl> import io . realm . SyncUser ; <nl> import io . realm . SyncUserInfo ; <nl> + import io . realm . TestHelper ; <nl> import io . realm . entities . StringOnly ; <nl> import io . realm . internal . async . RealmAsyncTaskImpl ; <nl> import io . realm . internal . objectserver . Token ; <nl> @ @ - 90 , 7 + 91 , 8 @ @ public class AuthTests extends StandardIntegrationTest { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void login _ newUser ( ) { <nl> - SyncCredentials credentials = SyncCredentials . usernamePassword ( " myUser " , " password " , true ) ; <nl> + String userId = UUID . randomUUID ( ) . toString ( ) ; <nl> + SyncCredentials credentials = SyncCredentials . usernamePassword ( userId , " password " , true ) ; <nl> SyncUser . loginAsync ( credentials , Constants . AUTH _ URL , new SyncUser . Callback ( ) { <nl> @ Override <nl> public void onSuccess ( SyncUser user ) { <nl> @ @ - 194 , 7 + 196 , 6 @ @ public class AuthTests extends StandardIntegrationTest { <nl> } <nl> <nl> @ Test <nl> - @ Ignore ( " Resolve https : / / github . com / realm / ros / issues / 273 " ) <nl> public void changePassword ( ) { <nl> String username = UUID . randomUUID ( ) . toString ( ) ; <nl> String originalPassword = " password " ; <nl> @ @ - 214 , 7 + 215 , 6 @ @ public class AuthTests extends StandardIntegrationTest { <nl> } <nl> <nl> @ Test <nl> - @ Ignore ( " Resolve https : / / github . com / realm / ros / issues / 273 " ) <nl> public void changePassword _ using _ admin ( ) { <nl> String username = UUID . randomUUID ( ) . toString ( ) ; <nl> String originalPassword = " password " ; <nl> @ @ - 242 , 7 + 242 , 6 @ @ public class AuthTests extends StandardIntegrationTest { <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - @ Ignore ( " Resolve https : / / github . com / realm / ros / issues / 273 " ) <nl> public void changePassword _ using _ admin _ async ( ) { <nl> final String username = UUID . randomUUID ( ) . toString ( ) ; <nl> final String originalPassword = " password " ; <nl> @ @ - 282 , 6 + 281 , 7 @ @ public class AuthTests extends StandardIntegrationTest { <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> + @ Ignore ( " Wait until https : / / github . com / realm / ros / issues / 309 is resolved " ) <nl> public void changePassword _ throwWhenUserIsLoggedOut ( ) { <nl> String username = UUID . randomUUID ( ) . toString ( ) ; <nl> String password = " password " ; <nl> @ @ - 398 , 7 + 398 , 6 @ @ public class AuthTests extends StandardIntegrationTest { <nl> RealmConfiguration configuration = new SyncConfiguration . Builder ( user , Constants . USER _ REALM ) . build ( ) ; <nl> user . logout ( ) ; <nl> assertFalse ( user . isValid ( ) ) ; <nl> - <nl> Realm instance = Realm . getInstance ( configuration ) ; <nl> instance . close ( ) ; <nl> } <nl> @ @ - 500 , 23 + 499 , 38 @ @ public class AuthTests extends StandardIntegrationTest { <nl> } <nl> <nl> @ Test <nl> - @ Ignore ( " Resolve https : / / github . com / realm / ros / issues / 261 " ) <nl> public void revokedRefreshTokenIsNotSameAfterLogin ( ) throws InterruptedException { <nl> + final CountDownLatch userLoggedInAgain = new CountDownLatch ( 1 ) ; <nl> final String uniqueName = UUID . randomUUID ( ) . toString ( ) ; <nl> <nl> - SyncCredentials credentials = SyncCredentials . usernamePassword ( uniqueName , " password " , true ) ; <nl> + final SyncCredentials credentials = SyncCredentials . usernamePassword ( uniqueName , " password " , true ) ; <nl> SyncUser user = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; <nl> - Token revokedRefreshToken = user . getAccessToken ( ) ; <nl> + final Token revokedRefreshToken = user . getAccessToken ( ) ; <nl> <nl> - user . logout ( ) ; <nl> + SyncManager . addAuthenticationListener ( new AuthenticationListener ( ) { <nl> + @ Override <nl> + public void loggedIn ( SyncUser user ) { <nl> <nl> - credentials = SyncCredentials . usernamePassword ( uniqueName , " password " , false ) ; <nl> - SyncUser loggedInUser = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; <nl> + } <nl> <nl> - / / still comparing the same user <nl> - Assert . assertEquals ( revokedRefreshToken . identity ( ) , loggedInUser . getAccessToken ( ) . identity ( ) ) ; <nl> - / / different tokens <nl> - assertNotEquals ( revokedRefreshToken . value ( ) , loggedInUser . getAccessToken ( ) . value ( ) ) ; <nl> + @ Override <nl> + public void loggedOut ( SyncUser user ) { <nl> + SystemClock . sleep ( 1000 ) ; / / Remove once https : / / github . com / realm / ros / issues / 304 is fixed <nl> + SyncCredentials credentials = SyncCredentials . usernamePassword ( uniqueName , " password " , false ) ; <nl> + SyncUser loggedInUser = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; <nl> + <nl> + / / still comparing the same user <nl> + assertEquals ( revokedRefreshToken . identity ( ) , loggedInUser . getAccessToken ( ) . identity ( ) ) ; <nl> + <nl> + / / different tokens <nl> + assertNotEquals ( revokedRefreshToken . value ( ) , loggedInUser . getAccessToken ( ) . value ( ) ) ; <nl> + SyncManager . removeAuthenticationListener ( this ) ; <nl> + userLoggedInAgain . countDown ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + user . logout ( ) ; <nl> + TestHelper . awaitOrFail ( userLoggedInAgain ) ; <nl> } <nl> <nl> / / The pre - emptive token refresh subsystem should function , and properly refresh the access token . <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / EncryptedSynchronizedRealmTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / EncryptedSynchronizedRealmTests . java <nl> index 50d7ed8 . . 7806b41 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / EncryptedSynchronizedRealmTests . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / EncryptedSynchronizedRealmTests . java <nl> @ @ - 1 , 18 + 1 , 14 @ @ <nl> package io . realm . objectserver ; <nl> <nl> import android . os . SystemClock ; <nl> - import android . text . style . TabStopSpan ; <nl> <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . Timeout ; <nl> <nl> import java . util . UUID ; <nl> - import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . TimeUnit ; <nl> - import java . util . concurrent . atomic . AtomicBoolean ; <nl> <nl> - import io . realm . BaseIntegrationTest ; <nl> import io . realm . ObjectServerError ; <nl> import io . realm . Realm ; <nl> import io . realm . RealmResults ; <nl> @ @ - 24 , 7 + 20 , 6 @ @ import io . realm . SyncSession ; <nl> import io . realm . SyncUser ; <nl> import io . realm . TestHelper ; <nl> import io . realm . entities . StringOnly ; <nl> - import io . realm . exceptions . RealmError ; <nl> import io . realm . exceptions . RealmFileException ; <nl> import io . realm . objectserver . utils . Constants ; <nl> import io . realm . objectserver . utils . StringOnlyModule ; <nl> @ @ - 130 , 19 + 125 , 6 @ @ public class EncryptedSynchronizedRealmTests extends StandardIntegrationTest { <nl> / / STEP 2 : make sure the changes gets to the server <nl> SyncManager . getSession ( configWithEncryption ) . uploadAllLocalChanges ( ) ; <nl> <nl> - final CountDownLatch backgroundException = new CountDownLatch ( 1 ) ; <nl> - final AtomicBoolean exceptionThrown = new AtomicBoolean ( false ) ; <nl> - <nl> - Thread . UncaughtExceptionHandler defaultUncaughtExceptionHandler = Thread . getDefaultUncaughtExceptionHandler ( ) ; <nl> - Thread . setDefaultUncaughtExceptionHandler ( new Thread . UncaughtExceptionHandler ( ) { <nl> - @ Override <nl> - public void uncaughtException ( Thread t , Throwable e ) { <nl> - if ( e instanceof RealmError & & e . getMessage ( ) . contains ( " An exception has been thrown on the sync client thread " ) ) { <nl> - exceptionThrown . set ( true ) ; <nl> - } <nl> - backgroundException . countDown ( ) ; <nl> - } <nl> - } ) ; <nl> realm . close ( ) ; <nl> user . logout ( ) ; <nl> <nl> @ @ - 163 , 12 + 145 , 11 @ @ public class EncryptedSynchronizedRealmTests extends StandardIntegrationTest { <nl> realm = Realm . getInstance ( configWithoutEncryption ) ; <nl> fail ( " It should not be possible to open the Realm without the encryption key set previously . " ) ; <nl> } catch ( RealmFileException ignored ) { <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + } <nl> } <nl> - <nl> - TestHelper . awaitOrFail ( backgroundException ) ; <nl> - / / restore default handler <nl> - Thread . setDefaultUncaughtExceptionHandler ( defaultUncaughtExceptionHandler ) ; <nl> - assertTrue ( " Sync Client Thread should throw an exception " , exceptionThrown . get ( ) ) ; <nl> } <nl> <nl> / / If client B encrypts its synced Realm , client A should be able to access that Realm with a different encryption key . <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> index a1d325d . . beb5c0c 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> @ @ - 161 , 40 + 161 , 12 @ @ public class UserFactory { <nl> handler . post ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> - final AtomicInteger usersLoggedOut = new AtomicInteger ( 0 ) ; <nl> - final int activeUsers = SyncUser . all ( ) . size ( ) ; <nl> - final AuthenticationListener listener = new AuthenticationListener ( ) { <nl> - @ Override <nl> - public void loggedIn ( SyncUser user ) { <nl> - SyncManager . removeAuthenticationListener ( this ) ; <nl> - fail ( " User logged in while exiting test : " + user ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void loggedOut ( SyncUser user ) { <nl> - if ( usersLoggedOut . incrementAndGet ( ) = = activeUsers ) { <nl> - SyncManager . removeAuthenticationListener ( this ) ; <nl> - allUsersLoggedOut . countDown ( ) ; <nl> - } <nl> - } <nl> - } ; <nl> - SyncManager . addAuthenticationListener ( listener ) ; <nl> - <nl> Map < String , SyncUser > users = SyncUser . all ( ) ; <nl> - if ( users . isEmpty ( ) ) { <nl> - SyncManager . removeAuthenticationListener ( listener ) ; <nl> - allUsersLoggedOut . countDown ( ) ; <nl> - } else { <nl> - for ( SyncUser user : users . values ( ) ) { <nl> - user . logout ( ) ; <nl> - if ( ! user . getAuthenticationUrl ( ) . toString ( ) . contains ( " 127 . 0 . 0 . 1 " ) ) { <nl> - / / For dummy users , calling ` logout ( ) ` will never result in the <nl> - / / authentication listener to trigger since the URL doesn ' t exist . <nl> - / / For these cases , we manually trigger the listener . <nl> - listener . loggedOut ( user ) ; <nl> - } <nl> - } <nl> + for ( SyncUser user : users . values ( ) ) { <nl> + user . logout ( ) ; <nl> } <nl> + SystemClock . sleep ( 2000 ) ; / / Remove when https : / / github . com / realm / ros / issues / 304 is fixed <nl> + allUsersLoggedOut . countDown ( ) ; <nl> } <nl> } ) ; <nl> TestHelper . awaitOrFail ( allUsersLoggedOut ) ; <nl> diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js <nl> index 384c549 . . 0e46a05 100755 <nl> - - - a / tools / sync _ test _ server / ros - testing - server . js <nl> + + + b / tools / sync _ test _ server / ros - testing - server . js <nl> @ @ - 42 , 7 + 42 , 7 @ @ function waitForRosToInitialize ( attempts , onSuccess , onError ) { <nl> http . get ( " http : / / 0 . 0 . 0 . 0 : 9080 / health " , function ( res ) { <nl> if ( res . statusCode ! = 200 ) { <nl> winston . info ( " ROS / health / returned : " + res . statusCode ) <nl> - waitForRosToInitialize ( attempts - 1 , onSuccess ) <nl> + waitForRosToInitialize ( attempts - 1 , onSuccess , onError ) <nl> } else { <nl> onSuccess ( ) ; <nl> } <nl> @ @ - 51 , 7 + 51 , 7 @ @ function waitForRosToInitialize ( attempts , onSuccess , onError ) { <nl> / / Errors like ECONNREFUSED 0 . 0 . 0 . 0 : 9080 will be reported here . <nl> / / Wait a little before trying again ( common startup is ~ 1 second ) . <nl> setTimeout ( function ( ) { <nl> - waitForRosToInitialize ( attempts - 1 , onSuccess ) ; <nl> + waitForRosToInitialize ( attempts - 1 , onSuccess , onError ) ; <nl> } , 200 ) ; <nl> } ) ; <nl> } <nl> @ @ - 64 , 7 + 64 , 10 @ @ function startRealmObjectServer ( onSuccess , onError ) { <nl> winston . info ( env . NODE _ ENV ) ; <nl> env . NODE _ ENV = ' development ' ; <nl> syncServerChildProcess = spawn ( ' ros ' , <nl> - [ ' start ' , ' - - data ' , path ] , <nl> + [ ' start ' , <nl> + ' - - data ' , path , <nl> + ' - - access - token - ttl ' , ' 20 ' / / WARNING : Changing this value may impact the timeout of the refresh token test ( AuthTests # preemptiveTokenRefresh ) <nl> + ] , <nl> { env : env , cwd : path } ) ; <nl> <nl> / / local config : <nl> @ @ - 93 , 8 + 96 , 6 @ @ function stopRealmObjectServer ( onSuccess , onError ) { <nl> onSuccess ( ) ; <nl> } ) ; <nl> <nl> - / / Move back to ` SIGTERM ` once https : / / github . com / realm / ros / issues / 234 <nl> - / / is resolved <nl> syncServerChildProcess . kill ( ' SIGKILL ' ) ; <nl> } <nl> <nl> @ @ - 103 , 10 + 104 , 10 @ @ dispatcher . onGet ( " / start " , function ( req , res ) { <nl> winston . info ( " Attempting to start ROS " ) ; <nl> startRealmObjectServer ( ( ) = > { <nl> res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; <nl> - res . end ( ' ROS server started ' ) ; <nl> + res . end ( ' ROS started ' ) ; <nl> } , function ( err ) { <nl> res . writeHead ( 500 , { ' Content - Type ' : ' text / plain ' } ) ; <nl> - res . end ( ' Starting a ROS server failed : ' + err ) ; <nl> + res . end ( ' Starting ROS failed : ' + err ) ; <nl> } ) ; <nl> } ) ; <nl> <nl> @ @ - 114 , 8 + 115 , 11 @ @ dispatcher . onGet ( " / start " , function ( req , res ) { <nl> dispatcher . onGet ( " / stop " , function ( req , res ) { <nl> winston . info ( " Attempting to stop ROS " ) <nl> stopRealmObjectServer ( function ( ) { <nl> - res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; <nl> - res . end ( ' ROS server stopped ' ) ; <nl> + res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; <nl> + res . end ( ' ROS stopped ' ) ; <nl> + } , function ( err ) { <nl> + res . writeHead ( 500 , { ' Content - Type ' : ' text / plain ' } ) ; <nl> + res . end ( ' Stopping ROS failed : ' + err ) ; <nl> } ) ; <nl> } ) ; <nl>
NEAREST DIFF (one line): diff - - git a / README . md b / README . md <nl> index ee52154 . . 268af42 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 220 , 6 + 220 , 9 @ @ To run a testing server locally : <nl> 	 . / gradlew connectedObjectServerDebugAndroidTest <nl> 	 ` ` ` <nl> <nl> + Note that if using VirtualBox ( Genymotion ) , the network needs to be bridged for the tests to work . <nl> + This is done in ` VirtualBox > Network ` . Set " Adapter 2 " to " Bridged Adapter " . <nl> + <nl> These tests may take as much as half an hour to complete . <nl> <nl> # # Contributing <nl> diff - - git a / realm / realm - library / src / androidTest / AndroidManifest . xml b / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> index c7741a6 . . d9e252d 100644 <nl> - - - a / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> + + + b / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> @ @ - 21 , 6 + 21 , 23 @ @ <nl> android : exported = " true " <nl> android : process = " : remote " > <nl> < / service > <nl> + <nl> + < ! - - <nl> + FIXME : Manifest merger doesn ' t seem to work correctly with test flavours . <nl> + Figure out why . For now place services here <nl> + - - > <nl> + < service <nl> + android : name = " io . realm . objectserver . service . SendOneCommit " <nl> + android : enabled = " true " <nl> + android : exported = " true " <nl> + android : process = " : remote " > <nl> + < / service > <nl> + < service <nl> + android : name = " io . realm . objectserver . service . SendsALot " <nl> + android : enabled = " true " <nl> + android : exported = " true " <nl> + android : process = " : remote " > <nl> + < / service > <nl> < / application > <nl> <nl> < / manifest > <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> index a587ca1 . . c31ea68 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import org . junit . Before ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> + import org . mockito . Mockito ; <nl> <nl> import java . net . MalformedURLException ; <nl> import java . net . URI ; <nl> @ @ - 31 , 6 + 32 , 7 @ @ import java . net . URL ; <nl> import java . util . Collection ; <nl> <nl> import io . realm . android . SharedPrefsUserStore ; <nl> + import io . realm . internal . network . AuthenticationServer ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . util . SyncTestUtils ; <nl> <nl> @ @ - 39 , 6 + 41 , 8 @ @ import static junit . framework . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> + import static org . mockito . Matchers . any ; <nl> + import static org . mockito . Mockito . when ; <nl> <nl> @ RunWith ( AndroidJUnit4 . class ) <nl> public class SyncUserTests { <nl> @ @ - 151 , 4 + 155 , 19 @ @ public class SyncUserTests { <nl> assertTrue ( str ! = null & & ! str . isEmpty ( ) ) ; <nl> } <nl> <nl> + / / Test that a login an access token logs the user in directly without touching the network <nl> + @ Test <nl> + public void login _ withAccessToken ( ) { <nl> + AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; <nl> + when ( authServer . loginUser ( any ( SyncCredentials . class ) , any ( URL . class ) ) ) . thenThrow ( new AssertionError ( " Server contacted . " ) ) ; <nl> + AuthenticationServer originalServer = SyncManager . getAuthServer ( ) ; <nl> + SyncManager . setAuthServerImpl ( authServer ) ; <nl> + try { <nl> + SyncCredentials credentials = SyncCredentials . accessToken ( " foo " , " bar " ) ; <nl> + SyncUser user = SyncUser . login ( credentials , " http : / / ros . realm . io / auth " ) ; <nl> + assertTrue ( user . isValid ( ) ) ; <nl> + } finally { <nl> + SyncManager . setAuthServerImpl ( originalServer ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java <nl> index 827f126 . . b9dcbc4 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java <nl> @ @ - 151 , 6 + 151 , 23 @ @ public class SyncCredentials { <nl> return new SyncCredentials ( identityProvider , userIdentifier , userInfo ) ; <nl> } <nl> <nl> + / * * <nl> + * Creates credentials from an existing access token . Since an access token is the proof that a user already <nl> + * has logged in . Credentials created this way are automatically assumed to have successfully logged in . <nl> + * This means that providing this credential to { @ link SyncUser # login ( SyncCredentials , String ) } will always <nl> + * succeed , but accessing any Realm after might fail if the token is no longer valid . <nl> + * <nl> + * @ param accessToken Users access token . <nl> + * @ param identifier User identifier . <nl> + * @ return a set of credentials that can be used to log into the Object Server using <nl> + * { @ link SyncUser # loginAsync ( SyncCredentials , String , SyncUser . Callback ) } <nl> + * / <nl> + public static SyncCredentials accessToken ( String accessToken , String identifier ) { <nl> + HashMap < String , Object > userInfo = new HashMap < String , Object > ( ) ; <nl> + userInfo . put ( " _ token " , accessToken ) ; <nl> + return new SyncCredentials ( IdentityProvider . ACCESS _ TOKEN , identifier , userInfo ) ; <nl> + } <nl> + <nl> private SyncCredentials ( String identityProvider , String token , Map < String , Object > userInfo ) { <nl> this . identityProvider = identityProvider ; <nl> this . userIdentifier = token ; <nl> @ @ - 191 , 6 + 208 , 14 @ @ public class SyncCredentials { <nl> * verifying that a given credential is valid . <nl> * / <nl> public static final class IdentityProvider { <nl> + <nl> + / * * <nl> + * The provided identify is an already registered user ( represented by the access token ) . Logging in with this <nl> + * type of identity will happen purely on the device without contacting the Realm Object Server . Acquiring <nl> + * access to individual Realms will still require talking to the Object Server . <nl> + * / <nl> + public static final String ACCESS _ TOKEN = " _ access _ token " ; <nl> + <nl> / * * <nl> * Any credentials verified by the debug identity provider will always be considered valid . <nl> * It is only available if configured on the Object Server , and it is disabled by default . <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> index 65130e7 . . 379c3dd 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . net . URL ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> + import java . util . Objects ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . ThreadPoolExecutor ; <nl> <nl> @ @ - 150 , 10 + 151 , 20 @ @ public class SyncUser { <nl> throw new IllegalArgumentException ( " Invalid URL " + authenticationUrl + " . " , e ) ; <nl> } <nl> <nl> - final AuthenticationServer server = SyncManager . getAuthServer ( ) ; <nl> ObjectServerError error ; <nl> try { <nl> - AuthenticateResponse result = server . loginUser ( credentials , authUrl ) ; <nl> + AuthenticateResponse result ; <nl> + if ( credentials . getIdentityProvider ( ) . equals ( SyncCredentials . IdentityProvider . ACCESS _ TOKEN ) ) { <nl> + / / Credentials using ACCESS _ TOKEN as IdentityProvider are optimistically assumed to be valid already <nl> + / / So log them in directly without contacting the authentication server . This is done by mirroring <nl> + / / the JSON response expected from the server . <nl> + String userIdentifier = credentials . getUserIdentifier ( ) ; <nl> + String token = ( String ) credentials . getUserInfo ( ) . get ( " _ token " ) ; <nl> + result = AuthenticateResponse . createValidResponseWithUser ( userIdentifier , token ) ; <nl> + } else { <nl> + final AuthenticationServer server = SyncManager . getAuthServer ( ) ; <nl> + result = server . loginUser ( credentials , authUrl ) ; <nl> + } <nl> if ( result . isValid ( ) ) { <nl> ObjectServerUser syncUser = new ObjectServerUser ( result . getRefreshToken ( ) , authUrl ) ; <nl> SyncUser user = new SyncUser ( syncUser ) ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> index 75e31a0 . . 9408a55 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> @ @ - 75 , 6 + 75 , 24 @ @ public class AuthenticateResponse extends AuthServerResponse { <nl> } <nl> <nl> / * * <nl> + * Helper method for creating a valid user login response . The user returned will be assumed to have all permissions <nl> + * as doesn ' t expire . <nl> + * <nl> + * @ param identifier User identifier . <nl> + * @ param token Users refresh token . <nl> + * @ return Response <nl> + * / <nl> + public static AuthenticateResponse createValidResponseWithUser ( String identifier , String token ) { <nl> + try { <nl> + JSONObject response = new JSONObject ( ) ; <nl> + response . put ( JSON _ FIELD _ REFRESH _ TOKEN , new Token ( token , identifier , null , Long . MAX _ VALUE , Token . Permission . ALL ) . toJson ( ) ) ; <nl> + return new AuthenticateResponse ( response . toString ( ) ) ; <nl> + } catch ( JSONException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Creates an unsuccessful authentication response . This should only happen in case of network or I / O related <nl> * issues . <nl> * <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java <nl> index 78f0acf . . 3ae10a2 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java <nl> @ @ - 151 , 5 + 151 , 7 @ @ public class Token { <nl> DOWNLOAD , <nl> REFRESH , <nl> MANAGE ; <nl> + <nl> + public static final Permission [ ] ALL = { UPLOAD , DOWNLOAD , REFRESH , MANAGE } ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> index ccf997a . . a38b774 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> @ @ - 9 , 6 + 9 , 8 @ @ import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . SyncConfiguration ; <nl> import io . realm . SyncCredentials ; <nl> import io . realm . ErrorCode ; <nl> import io . realm . ObjectServerError ; <nl> @ @ - 66 , 4 + 68 , 21 @ @ public class AuthTests { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void login _ withAccessToken ( ) { <nl> + SyncCredentials credentials = SyncCredentials . accessToken ( Constants . USER _ TOKEN , " access - token - user " ) ; <nl> + SyncUser . loginAsync ( credentials , Constants . AUTH _ URL , new SyncUser . Callback ( ) { <nl> + @ Override <nl> + public void onSuccess ( SyncUser user ) { <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , Constants . SYNC _ SERVER _ URL ) . build ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onError ( ObjectServerError error ) { <nl> + fail ( " Error thrown : " + error ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java <nl> index 6e465f5 . . 73df932 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import android . support . test . runner . AndroidJUnit4 ; <nl> <nl> import org . junit . AfterClass ; <nl> import org . junit . BeforeClass ; <nl> + import org . junit . Ignore ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> @ @ - 32 , 16 + 33 , 20 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import io . realm . ObjectServerError ; <nl> import io . realm . Realm ; <nl> import io . realm . RealmChangeListener ; <nl> import io . realm . RealmResults ; <nl> import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncSession ; <nl> + import io . realm . SyncUser ; <nl> import io . realm . objectserver . model . ProcessInfo ; <nl> import io . realm . objectserver . model . TestObject ; <nl> import io . realm . objectserver . service . SendOneCommit ; <nl> import io . realm . objectserver . service . SendsALot ; <nl> import io . realm . objectserver . utils . Constants ; <nl> import io . realm . objectserver . utils . HttpUtils ; <nl> + import io . realm . objectserver . utils . UserFactory ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 50 , 6 + 55 , 7 @ @ import static org . junit . Assert . fail ; <nl> public class ProcessCommitTests { <nl> @ BeforeClass <nl> public static void setUp ( ) throws Exception { <nl> + Realm . init ( InstrumentationRegistry . getContext ( ) ) ; <nl> HttpUtils . startSyncServer ( ) ; <nl> } <nl> <nl> @ @ - 58 , 15 + 64 , 10 @ @ public class ProcessCommitTests { <nl> HttpUtils . stopSyncServer ( ) ; <nl> } <nl> <nl> - / / FIXME : At least need one method in the test class <nl> - @ Test <nl> - public void dummy ( ) { <nl> - <nl> - } <nl> - <nl> - / / FIXME : Disable for now . <nl> - / * <nl> + / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating <nl> + / / a Sync Client , but it needs to be investigated . <nl> @ Test <nl> + @ Ignore <nl> public void expectServerCommit ( ) throws Throwable { <nl> final Throwable [ ] exception = new Throwable [ 1 ] ; <nl> final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; <nl> @ @ - 76 , 18 + 77 , 23 @ @ public class ProcessCommitTests { <nl> public void run ( ) { <nl> try { <nl> Looper . prepare ( ) ; <nl> - Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; <nl> + Context targetContext = InstrumentationRegistry . getTargetContext ( ) ; <nl> <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( ) <nl> + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> + String realmUrl = Constants . SYNC _ SERVER _ URL ; <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> . name ( SendOneCommit . class . getSimpleName ( ) ) <nl> - . serverUrl ( Constants . SYNC _ SERVER _ URL ) <nl> - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) <nl> + . errorHandler ( new SyncSession . ErrorHandler ( ) { <nl> + @ Override <nl> + public void onError ( SyncSession session , ObjectServerError error ) { <nl> + fail ( " Sync failure : " + error ) ; <nl> + } <nl> + } ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests <nl> final Realm realm = Realm . getInstance ( syncConfig ) ; <nl> Intent intent = new Intent ( targetContext , SendOneCommit . class ) ; <nl> targetContext . startService ( intent ) ; <nl> - <nl> final RealmResults < ProcessInfo > all = realm . where ( ProcessInfo . class ) . findAll ( ) ; <nl> all . addChangeListener ( new RealmChangeListener < RealmResults < ProcessInfo > > ( ) { <nl> @ Override <nl> @ @ - 113 , 14 + 119 , 15 @ @ public class ProcessCommitTests { <nl> fail ( " Test timed out " ) ; <nl> } <nl> } <nl> - * / <nl> <nl> + / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating <nl> + / / a Sync Client , but it needs to be investigated . <nl> / / TODO send string from service and match <nl> / / replicate integration tests from Cocoa <nl> / / add gradle task to start the sh script automatically ( create pid file , = = > run or kill existing process <nl> / / check the requirement for the issue again <nl> - / * <nl> @ Test <nl> + @ Ignore <nl> public void expectALot ( ) throws Throwable { <nl> final Throwable [ ] exception = new Throwable [ 1 ] ; <nl> final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; <nl> @ @ - 132 , 10 + 139 , 16 @ @ public class ProcessCommitTests { <nl> Looper . prepare ( ) ; <nl> Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; <nl> <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( targetContext ) <nl> + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> + String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> . name ( SendsALot . class . getSimpleName ( ) ) <nl> - . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) <nl> - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ) <nl> + . errorHandler ( new SyncSession . ErrorHandler ( ) { <nl> + @ Override <nl> + public void onError ( SyncSession session , ObjectServerError error ) { <nl> + fail ( " Sync failure : " + error ) ; <nl> + } <nl> + } ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests <nl> final Realm realm = Realm . getInstance ( syncConfig ) ; <nl> @ @ - 171 , 5 + 184 , 4 @ @ public class ProcessCommitTests { <nl> fail ( " Test timed out " ) ; <nl> } <nl> } <nl> - * / <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java <nl> index 26c4f89 . . 2620be8 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java <nl> @ @ - 20 , 6 + 20 , 13 @ @ import android . app . Service ; <nl> import android . content . Intent ; <nl> import android . os . IBinder ; <nl> <nl> + import io . realm . Realm ; <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncUser ; <nl> + import io . realm . objectserver . model . ProcessInfo ; <nl> + import io . realm . objectserver . utils . Constants ; <nl> + import io . realm . objectserver . utils . UserFactory ; <nl> + <nl> / * * <nl> * Open a sync Realm on a different process , then send one commit . <nl> * / <nl> @ @ - 28 , 12 + 35 , 11 @ @ public class SendOneCommit extends Service { <nl> @ Override <nl> public void onCreate ( ) { <nl> super . onCreate ( ) ; <nl> - / / FIXME : Disable for now <nl> - / * <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( this ) <nl> + Realm . init ( getApplicationContext ( ) ) ; <nl> + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> + String realmUrl = Constants . SYNC _ SERVER _ URL ; <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> . name ( SendOneCommit . class . getSimpleName ( ) ) <nl> - . serverUrl ( Constants . SYNC _ SERVER _ URL ) <nl> - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; <nl> Realm realm = Realm . getInstance ( syncConfig ) ; <nl> @ @ - 46 , 10 + 52 , 8 @ @ public class SendOneCommit extends Service { <nl> realm . commitTransaction ( ) ; <nl> <nl> realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset <nl> - * / <nl> } <nl> <nl> - <nl> @ Override <nl> public IBinder onBind ( Intent intent ) { <nl> return null ; <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java <nl> index 2bcdd9d . . 27df640 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java <nl> @ @ - 20 , 6 + 20 , 13 @ @ import android . app . Service ; <nl> import android . content . Intent ; <nl> import android . os . IBinder ; <nl> <nl> + import io . realm . Realm ; <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncUser ; <nl> + import io . realm . objectserver . model . TestObject ; <nl> + import io . realm . objectserver . utils . Constants ; <nl> + import io . realm . objectserver . utils . UserFactory ; <nl> + <nl> / * * <nl> * Open a sync Realm on a different process , then send one commit . <nl> * / <nl> @ @ - 28 , 13 + 35 , 11 @ @ public class SendsALot extends Service { <nl> @ Override <nl> public void onCreate ( ) { <nl> super . onCreate ( ) ; <nl> - / / FIXME : Disable for now . <nl> - / * <nl> - User user = UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ; <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user ) <nl> + Realm . init ( getApplicationContext ( ) ) ; <nl> + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> + String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> . name ( SendsALot . class . getSimpleName ( ) ) <nl> - . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) <nl> - . user ( ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; <nl> Realm realm = Realm . getInstance ( syncConfig ) ; <nl> @ @ - 49 , 7 + 54 , 6 @ @ public class SendsALot extends Service { <nl> realm . commitTransaction ( ) ; <nl> <nl> realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset <nl> - * / <nl> } <nl> <nl> <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java <nl> index 9b15ae1 . . 1fa4fb9 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java <nl> @ @ - 16 , 12 + 16 , 17 @ @ <nl> <nl> package io . realm . objectserver . utils ; <nl> <nl> + import android . support . test . InstrumentationRegistry ; <nl> + <nl> import java . io . IOException ; <nl> <nl> + import io . realm . Realm ; <nl> import io . realm . log . RealmLog ; <nl> import okhttp3 . Headers ; <nl> + import okhttp3 . MediaType ; <nl> import okhttp3 . OkHttpClient ; <nl> import okhttp3 . Request ; <nl> + import okhttp3 . RequestBody ; <nl> import okhttp3 . Response ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 34 , 10 @ @ import okhttp3 . Response ; <nl> * temp directory & start a sync server on it for each unit test . <nl> * / <nl> public class HttpUtils { <nl> - private final static OkHttpClient client = new OkHttpClient ( ) ; <nl> + private final static OkHttpClient client = new OkHttpClient . Builder ( ) <nl> + . retryOnConnectionFailure ( true ) <nl> + . build ( ) ; <nl> + <nl> / / adb reverse tcp : 8888 tcp : 8888 <nl> / / will forward this query to the host , running the integration test server on 8888 <nl> private final static String START _ SERVER = " http : / / 127 . 0 . 0 . 1 : 8888 / start " ; <nl> @ @ - 60 , 20 + 68 , 29 @ @ public class HttpUtils { <nl> / / Checking the server <nl> private static boolean waitAuthServerReady ( ) throws InterruptedException { <nl> int retryTimes = 50 ; <nl> + <nl> + / / Dummy invalid request , which will trigger a 400 ( BAD REQUEST ) , but indicate the auth <nl> + / / server is responsive <nl> Request request = new Request . Builder ( ) <nl> - . url ( Constants . AUTH _ SERVER _ URL ) <nl> + . post ( RequestBody . create ( MediaType . parse ( " application / json ; charset = utf - 8 " ) , " " ) ) <nl> + . url ( Constants . AUTH _ URL ) <nl> . build ( ) ; <nl> <nl> while ( retryTimes ! = 0 ) { <nl> + Response response = null ; <nl> try { <nl> - Response response = client . newCall ( request ) . execute ( ) ; <nl> - if ( response . isSuccessful ( ) ) { <nl> + response = client . newCall ( request ) . execute ( ) ; <nl> + if ( response . code ( ) = = 400 ) { <nl> return true ; <nl> } <nl> RealmLog . error ( " Error response from auth server : % s " , response . toString ( ) ) ; <nl> } catch ( IOException e ) { <nl> RealmLog . error ( e ) ; <nl> Thread . sleep ( 100 ) ; <nl> + } finally { <nl> + if ( response ! = null ) { <nl> + response . close ( ) ; <nl> + } <nl> } <nl> retryTimes - - ; <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> index 1ebb2d6 . . 9e6c43d 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> @ @ - 16 , 25 + 16 , 13 @ @ <nl> <nl> package io . realm . objectserver . utils ; <nl> <nl> - import java . net . URI ; <nl> - import java . net . URISyntaxException ; <nl> - <nl> + import io . realm . SyncCredentials ; <nl> import io . realm . SyncUser ; <nl> - import io . realm . objectserver . utils . Constants ; <nl> <nl> / / Must be in ` io . realm . objectserver ` to work around package protected methods . <nl> public class UserFactory { <nl> - / / FIXME : Not working right now . <nl> - / * <nl> - public static User createDefaultUser ( String SERVER _ URL , String USER _ TOKEN ) { <nl> - try { <nl> - User user = User . createLocal ( ) ; <nl> - <nl> - user . addAccessToken ( new URI ( SERVER _ URL ) , USER _ TOKEN ) ; <nl> - return user ; <nl> - } catch ( URISyntaxException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + public static SyncUser createDefaultUser ( String authUrl , String accessToken ) { <nl> + SyncCredentials credentials = SyncCredentials . accessToken ( accessToken , " sync - integration - user " ) ; <nl> + return SyncUser . login ( credentials , authUrl ) ; <nl> } <nl> - * / <nl> } <nl> diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js <nl> index c182652 . . 6ddef03 100755 <nl> - - - a / tools / sync _ test _ server / ros - testing - server . js <nl> + + + b / tools / sync _ test _ server / ros - testing - server . js <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> # ! / usr / bin / env nodejs <nl> <nl> - var winston = require ( ' winston ' ) ; / / logging <nl> + var winston = require ( ' winston ' ) ; / / logging <nl> const temp = require ( ' temp ' ) ; <nl> const spawn = require ( ' child _ process ' ) . spawn ; <nl> var http = require ( ' http ' ) ; <nl> @ @ - 23 , 7 + 23 , 7 @ @ function handleRequest ( request , response ) { <nl> try { <nl> / / log the request on console <nl> winston . log ( request . url ) ; <nl> - / / Disptach <nl> + / / Dispatch <nl> dispatcher . dispatch ( request , response ) ; <nl> } catch ( err ) { <nl> console . log ( err ) ; <nl> diff - - git a / tools / sync _ test _ server / start _ server . sh b / tools / sync _ test _ server / start _ server . sh <nl> index 00930f5 . . 277bb4b 100755 <nl> - - - a / tools / sync _ test _ server / start _ server . sh <nl> + + + b / tools / sync _ test _ server / start _ server . sh <nl> @ @ - 9 , 9 + 9 , 10 @ @ TMP _ DIR = $ ( mktemp - d / tmp / sync - test . XXXX ) | | { echo " Failed to mktemp $ TEST _ TEMP _ <nl> <nl> adb reverse tcp : 7800 tcp : 7800 & & \ <nl> adb reverse tcp : 8080 tcp : 8080 & & \ <nl> + adb reverse tcp : 9080 tcp : 9080 & & \ <nl> adb reverse tcp : 8888 tcp : 8888 | | { echo " Failed to reverse adb port . " ; exit 1 ; } <nl> <nl> docker build $ DOCKERFILE _ DIR - - build - arg ROS _ DE _ VERSION = $ ROS _ DE _ VERSION - t sync - test - server | | { echo " Failed to build Docker image . " ; exit 1 ; } <nl> <nl> echo " See log files in $ TMP _ DIR " <nl> - docker run - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server <nl> + docker run - p 9080 : 9080 - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server

TEST DIFF:
diff - - git a / Jenkinsfile b / Jenkinsfile 
 index dc74785 . . 19aa5a9 100644 
 - - - a / Jenkinsfile 
 + + + b / Jenkinsfile 
 @ @ - 6 , 7 + 6 , 7 @ @ def buildSuccess = false 
 def rosContainer 
 try { 
 node ( ' android ' ) { 
 - timeout ( time : 1 , unit : ' HOURS ' ) { 
 + timeout ( time : 90 , unit : ' MINUTES ' ) { 
 / / Allocate a custom workspace to avoid having % in the path ( it breaks ld ) 
 ws ( ' / tmp / realm - java ' ) { 
 	 stage ( ' SCM ' ) { 
 diff - - git a / dependencies . list b / dependencies . list 
 index 1398418 . . 91cfac3 100644 
 - - - a / dependencies . list 
 + + + b / dependencies . list 
 @ @ - 1 , 8 + 1 , 8 @ @ 
 # Realm Sync Core release used by Realm Java 
 # https : / / github . com / realm / realm - sync / releases 
 - REALM _ SYNC _ VERSION = 2 . 0 . 0 - rc18 
 - REALM _ SYNC _ SHA256 = 73cb89c1a04cafa871444aa91d93eb9df16af088bcb7d3ede73bb815d53a06e5 
 + REALM _ SYNC _ VERSION = 2 . 0 . 0 - rc21 
 + REALM _ SYNC _ SHA256 = 5e09e54e68e78683e006898f5a703f80e0ee49492fb0f9dc2384fcbbb9f02f70 
 
 # Object Server Release used by Integration tests . Installed using NPM . 
 # Use ` npm view realm - object - server versions ` to get a list of available versions . 
 - REALM _ OBJECT _ SERVER _ DE _ VERSION = 2 . 0 . 0 - alpha . 30 
 + REALM _ OBJECT _ SERVER _ DE _ VERSION = 2 . 0 . 0 - alpha . 34 
 diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store 
 index 6f7804a . . cdd0d8c 160000 
 - - - a / realm / realm - library / src / main / cpp / object - store 
 + + + b / realm / realm - library / src / main / cpp / object - store 
 @ @ - 1 + 1 @ @ 
 - Subproject commit 6f7804a2332732e0c2d2db6bf920a38c75e72fb2 
 + Subproject commit cdd0d8c82ba6dfb60ebc2c339b26b7b3ca4d4047 
 diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp 
 index b7e157c . . 25c0299 100644 
 - - - a / realm / realm - library / src / main / cpp / util . cpp 
 + + + b / realm / realm - library / src / main / cpp / util . cpp 
 @ @ - 224 , 6 + 224 , 9 @ @ void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : Rea 
 case realm : : RealmFileException : : Kind : : FormatUpgradeRequired : 
 kind _ code = io _ realm _ internal _ SharedRealm _ FILE _ EXCEPTION _ KIND _ FORMAT _ UPGRADE _ REQUIRED ; 
 break ; 
 + case realm : : RealmFileException : : Kind : : IncompatibleSyncedRealm : 
 + kind _ code = io _ realm _ internal _ SharedRealm _ FILE _ EXCEPTION _ INCOMPATIBLE _ SYNC _ FILE ; 
 + break ; 
 } 
 jstring jstr = env - > NewStringUTF ( message . c _ str ( ) ) ; 
 jobject exception = env - > NewObject ( cls , constructor , kind _ code , jstr ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java b / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java 
 index 07e6b86 . . 716c026 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java 
 + + + b / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java 
 @ @ - 60 , 7 + 60 , 12 @ @ public class RealmFileException extends RuntimeException { 
 / * * 
 * Thrown if the file needs to be upgraded to a new format , but upgrades have been explicitly disabled . 
 * / 
 - FORMAT _ UPGRADE _ REQUIRED ; 
 + FORMAT _ UPGRADE _ REQUIRED , 
 + / * * 
 + * Thrown if an attempt was made to open an Realm file created with Realm Object Server 1 . * , which is 
 + * not compatible with Realm Object Server 2 . * . This exception should automatically be handled by Realm . 
 + * / 
 + INCOMPATIBLE _ SYNC _ FILE ; 
 
 / / Created from byte values by JNI . 
 static Kind getKind ( byte value ) { 
 @ @ - 79 , 6 + 84 , 8 @ @ public class RealmFileException extends RuntimeException { 
 return FORMAT _ UPGRADE _ REQUIRED ; 
 case SharedRealm . FILE _ EXCEPTION _ KIND _ BAD _ HISTORY : 
 return BAD _ HISTORY ; 
 + case SharedRealm . FILE _ EXCEPTION _ INCOMPATIBLE _ SYNC _ FILE : 
 + return INCOMPATIBLE _ SYNC _ FILE ; 
 default : 
 throw new RuntimeException ( " Unknown value for RealmFileException kind . " ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index c2a81e4 . . e2308c9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 41 , 6 + 41 , 7 @ @ public final class SharedRealm implements Closeable , NativeObject { 
 public static final byte FILE _ EXCEPTION _ KIND _ NOT _ FOUND = 4 ; 
 public static final byte FILE _ EXCEPTION _ KIND _ INCOMPATIBLE _ LOCK _ FILE = 5 ; 
 public static final byte FILE _ EXCEPTION _ KIND _ FORMAT _ UPGRADE _ REQUIRED = 6 ; 
 + public static final byte FILE _ EXCEPTION _ INCOMPATIBLE _ SYNC _ FILE = 7 ; 
 private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; 
 
 public static void initialize ( File tempDirectory ) { 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 index 429e2e6 . . 23a60d5 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 @ @ - 274 , 7 + 274 , 31 @ @ public class SyncUser { 
 / / the similar SyncConfiguration using the same identity , but with different ( new ) 
 / / refresh - token . 
 realms . clear ( ) ; 
 - SyncManager . notifyUserLoggedOut ( SyncUser . this ) ; 
 + 
 + / / Finally revoke server token . The local user is logged out in any case . 
 + final AuthenticationServer server = SyncManager . getAuthServer ( ) ; 
 + / / don ' t reference directly the refreshToken inside the revoke request 
 + / / as it may revoke the newly acquired refresh _ token 
 + final Token refreshTokenToBeRevoked = refreshToken ; 
 + 
 + ThreadPoolExecutor networkPoolExecutor = SyncManager . NETWORK _ POOL _ EXECUTOR ; 
 + networkPoolExecutor . submit ( new ExponentialBackoffTask < LogoutResponse > ( ) { 
 + 
 + @ Override 
 + protected LogoutResponse execute ( ) { 
 + return server . logout ( refreshTokenToBeRevoked , getAuthenticationUrl ( ) ) ; 
 + } 
 + 
 + @ Override 
 + protected void onSuccess ( LogoutResponse response ) { 
 + SyncManager . notifyUserLoggedOut ( SyncUser . this ) ; 
 + } 
 + 
 + @ Override 
 + protected void onError ( LogoutResponse response ) { 
 + RealmLog . error ( " Failed to log user out . \ n " + response . getError ( ) . toString ( ) ) ; 
 + } 
 + } ) ; 
 } 
 } 
 
 @ @ - 503 , 16 + 527 , 10 @ @ public class SyncUser { 
 AuthenticationServer authServer = SyncManager . getAuthServer ( ) ; 
 LookupUserIdResponse response = authServer . retrieveUser ( refreshToken , provider , providerUserIdentity , getAuthenticationUrl ( ) ) ; 
 if ( ! response . isValid ( ) ) { 
 - / / the endpoint returns a 404 if it can ' t honor the query , either because 
 - / / - provider is not valid 
 - / / - provider _ id is not valid 
 - / / - token used is not an admin one 
 - / / in this case we should return null instead of throwing 
 - if ( response . getError ( ) . getErrorCode ( ) = = ErrorCode . NOT _ FOUND ) { 
 - return null ; 
 - } else { 
 - throw response . getError ( ) ; 
 - } 
 + / / Right now errors are very inconsistent . See https : / / github . com / realm / ros / issues / 310 
 + / / Treat them all as " User not existing " . This is too broad , and should be revisited 
 + / / once # 310 is fixed . 
 + return null ; 
 } else { 
 return SyncUserInfo . fromLookupUserIdResponse ( response ) ; 
 } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthServerResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthServerResponse . java 
 index c6d2c470 . . 4285b56 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthServerResponse . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthServerResponse . java 
 @ @ - 63 , 7 + 63 , 14 @ @ public abstract class AuthServerResponse { 
 JSONObject obj = new JSONObject ( response ) ; 
 String title = obj . optString ( " title " , null ) ; 
 String hint = obj . optString ( " hint " , null ) ; 
 - ErrorCode errorCode = ErrorCode . fromInt ( obj . optInt ( " code " , - 1 ) ) ; 
 + ErrorCode errorCode ; 
 + if ( obj . has ( " code " ) ) { 
 + errorCode = ErrorCode . fromInt ( obj . getInt ( " code " ) ) ; 
 + } else if ( obj . has ( " status " ) ) { 
 + errorCode = ErrorCode . fromInt ( obj . getInt ( " status " ) ) ; 
 + } else { 
 + errorCode = ErrorCode . UNKNOWN ; 
 + } 
 return new ObjectServerError ( errorCode , title , hint ) ; 
 } catch ( JSONException e ) { 
 return new ObjectServerError ( ErrorCode . JSON _ EXCEPTION , " Server failed with " + 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / ChangePasswordRequest . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / ChangePasswordRequest . java 
 index 8e22c09 . . 6ca1f3a 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / ChangePasswordRequest . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / ChangePasswordRequest . java 
 @ @ - 56 , 10 + 56 , 9 @ @ public class ChangePasswordRequest { 
 public String toJson ( ) { 
 try { 
 JSONObject request = new JSONObject ( ) ; 
 - request . put ( " token " , token ) ; 
 - request . put ( " password " , newPassword ) ; 
 + request . put ( " newPassword " , newPassword ) ; 
 if ( userID ! = null ) { 
 - request . put ( " user _ id " , userID ) ; 
 + request . put ( " userId " , userID ) ; 
 } 
 return request . toString ( ) ; 
 } catch ( JSONException e ) { 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 index 997f59c . . 88a6fcf 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . net . URL ; 
 import java . util . concurrent . TimeUnit ; 
 
 import io . realm . SyncCredentials ; 
 + import io . realm . internal . Util ; 
 import io . realm . internal . objectserver . Token ; 
 import io . realm . log . RealmLog ; 
 import okhttp3 . Call ; 
 @ @ - 36 , 8 + 37 , 8 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { 
 
 public static final MediaType JSON = MediaType . parse ( " application / json ; charset = utf - 8 " ) ; 
 private static final String ACTION _ LOGOUT = " revoke " ; / / Auth end point for logging out users 
 - private static final String ACTION _ CHANGE _ PASSWORD = " users / : userId : / password " ; / / Auth end point for changing passwords 
 - private static final String ACTION _ LOOKUP _ USER _ ID = " users " ; / / Auth end point for looking up user id 
 + private static final String ACTION _ CHANGE _ PASSWORD = " password " ; / / Auth end point for changing passwords 
 + private static final String ACTION _ LOOKUP _ USER _ ID = " / users / : provider : / : providerId : " ; / / Auth end point for looking up user id 
 
 private final OkHttpClient client = new OkHttpClient . Builder ( ) 
 . connectTimeout ( 10 , TimeUnit . SECONDS ) 
 @ @ - 86 , 7 + 87 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { 
 public LogoutResponse logout ( Token userToken , URL authenticationUrl ) { 
 try { 
 String requestBody = LogoutRequest . create ( userToken ) . toJson ( ) ; 
 - return logout ( buildActionUrl ( authenticationUrl , ACTION _ LOGOUT ) , requestBody ) ; 
 + return logout ( buildActionUrl ( authenticationUrl , ACTION _ LOGOUT ) , userToken . value ( ) , requestBody ) ; 
 } catch ( Exception e ) { 
 return LogoutResponse . from ( e ) ; 
 } 
 @ @ - 96 , 7 + 97 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { 
 public ChangePasswordResponse changePassword ( Token userToken , String newPassword , URL authenticationUrl ) { 
 try { 
 String requestBody = ChangePasswordRequest . create ( userToken , newPassword ) . toJson ( ) ; 
 - return changePassword ( buildActionUrl ( authenticationUrl , ACTION _ CHANGE _ PASSWORD ) , requestBody ) ; 
 + return changePassword ( buildActionUrl ( authenticationUrl , ACTION _ CHANGE _ PASSWORD ) , userToken . value ( ) , requestBody ) ; 
 } catch ( Exception e ) { 
 return ChangePasswordResponse . from ( e ) ; 
 } 
 @ @ - 106 , 7 + 107 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { 
 public ChangePasswordResponse changePassword ( Token adminToken , String userId , String newPassword , URL authenticationUrl ) { 
 try { 
 String requestBody = ChangePasswordRequest . create ( adminToken , userId , newPassword ) . toJson ( ) ; 
 - return changePassword ( buildActionUrl ( authenticationUrl , ACTION _ CHANGE _ PASSWORD . replace ( " : userId : " , userId ) ) , requestBody ) ; 
 + return changePassword ( buildActionUrl ( authenticationUrl , ACTION _ CHANGE _ PASSWORD ) , adminToken . value ( ) , requestBody ) ; 
 } catch ( Exception e ) { 
 return ChangePasswordResponse . from ( e ) ; 
 } 
 @ @ - 115 , 7 + 116 , 10 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { 
 @ Override 
 public LookupUserIdResponse retrieveUser ( Token adminToken , String provider , String providerId , URL authenticationUrl ) { 
 try { 
 - return lookupUserId ( buildLookupUserIdUrl ( authenticationUrl , ACTION _ LOOKUP _ USER _ ID , provider , providerId ) , adminToken . value ( ) ) ; 
 + String action = ACTION _ LOOKUP _ USER _ ID 
 + . replace ( " : provider : " , provider ) 
 + . replace ( " : providerId : " , providerId ) ; 
 + return lookupUserId ( buildActionUrl ( authenticationUrl , action ) , adminToken . value ( ) ) ; 
 } catch ( Exception e ) { 
 return LookupUserIdResponse . from ( e ) ; 
 } 
 @ @ - 132 , 53 + 136 , 62 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { 
 } 
 } 
 
 - private static URL buildLookupUserIdUrl ( URL authenticationUrl , String action , String provider , String providerId ) { 
 - String authURL = authenticationUrl . toExternalForm ( ) ; 
 - String separator = authURL . endsWith ( " / " ) ? " " : " / " ; 
 - try { 
 - return new URL ( authURL + separator + action + " / " + providerId ) ; 
 - } catch ( MalformedURLException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 private AuthenticateResponse authenticate ( URL authenticationUrl , String requestBody ) throws Exception { 
 RealmLog . debug ( " Network request ( authenticate ) : " + authenticationUrl ) ; 
 - Request request = newAuthRequest ( authenticationUrl ) . post ( RequestBody . create ( JSON , requestBody ) ) . build ( ) ; 
 + Request request = newAuthRequest ( authenticationUrl ) 
 + . post ( RequestBody . create ( JSON , requestBody ) ) 
 + . build ( ) ; 
 Call call = client . newCall ( request ) ; 
 Response response = call . execute ( ) ; 
 return AuthenticateResponse . from ( response ) ; 
 } 
 
 - private LogoutResponse logout ( URL logoutUrl , String requestBody ) throws Exception { 
 + private LogoutResponse logout ( URL logoutUrl , String authToken , String requestBody ) throws Exception { 
 RealmLog . debug ( " Network request ( logout ) : " + logoutUrl ) ; 
 - Request request = newAuthRequest ( logoutUrl ) . post ( RequestBody . create ( JSON , requestBody ) ) . build ( ) ; 
 + Request request = newAuthRequest ( logoutUrl , authToken ) 
 + . post ( RequestBody . create ( JSON , requestBody ) ) 
 + . build ( ) ; 
 Call call = client . newCall ( request ) ; 
 Response response = call . execute ( ) ; 
 return LogoutResponse . from ( response ) ; 
 } 
 
 - private ChangePasswordResponse changePassword ( URL changePasswordUrl , String requestBody ) throws Exception { 
 + private ChangePasswordResponse changePassword ( URL changePasswordUrl , String authToken , String requestBody ) throws Exception { 
 RealmLog . debug ( " Network request ( changePassword ) : " + changePasswordUrl ) ; 
 - Request request = newAuthRequest ( changePasswordUrl ) . put ( RequestBody . create ( JSON , requestBody ) ) . build ( ) ; 
 + Request request = newAuthRequest ( changePasswordUrl , authToken ) 
 + . put ( RequestBody . create ( JSON , requestBody ) ) 
 + . build ( ) ; 
 Call call = client . newCall ( request ) ; 
 Response response = call . execute ( ) ; 
 return ChangePasswordResponse . from ( response ) ; 
 } 
 
 - private LookupUserIdResponse lookupUserId ( URL lookupUserIdUrl , String token ) throws Exception { 
 + private LookupUserIdResponse lookupUserId ( URL lookupUserIdUrl , String authToken ) throws Exception { 
 RealmLog . debug ( " Network request ( lookupUserId ) : " + lookupUserIdUrl ) ; 
 - Request request = newAuthRequest ( lookupUserIdUrl ) . get ( ) . header ( " Authorization " , token ) . build ( ) ; 
 + Request request = newAuthRequest ( lookupUserIdUrl , authToken ) 
 + . get ( ) 
 + . build ( ) ; 
 Call call = client . newCall ( request ) ; 
 Response response = call . execute ( ) ; 
 return LookupUserIdResponse . from ( response ) ; 
 } 
 
 private Request . Builder newAuthRequest ( URL url ) { 
 - return new Request . Builder ( ) 
 + return newAuthRequest ( url , null ) ; 
 + } 
 + 
 + private Request . Builder newAuthRequest ( URL url , String authToken ) { 
 + Request . Builder builder = new Request . Builder ( ) 
 . url ( url ) 
 . addHeader ( " Content - Type " , " application / json " ) 
 . addHeader ( " Accept " , " application / json " ) ; 
 + 
 + / / Only add Authorization header for those API ' s that require it . 
 + if ( ! Util . isEmptyString ( authToken ) ) { 
 + builder . addHeader ( " Authorization " , authToken ) ; 
 + } 
 + 
 + return builder ; 
 } 
 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 index 9bd027c . . 9b006ac 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import io . realm . SyncManager ; 
 import io . realm . SyncSession ; 
 import io . realm . SyncUser ; 
 import io . realm . SyncUserInfo ; 
 + import io . realm . TestHelper ; 
 import io . realm . entities . StringOnly ; 
 import io . realm . internal . async . RealmAsyncTaskImpl ; 
 import io . realm . internal . objectserver . Token ; 
 @ @ - 90 , 7 + 91 , 8 @ @ public class AuthTests extends StandardIntegrationTest { 
 @ Test 
 @ RunTestInLooperThread 
 public void login _ newUser ( ) { 
 - SyncCredentials credentials = SyncCredentials . usernamePassword ( " myUser " , " password " , true ) ; 
 + String userId = UUID . randomUUID ( ) . toString ( ) ; 
 + SyncCredentials credentials = SyncCredentials . usernamePassword ( userId , " password " , true ) ; 
 SyncUser . loginAsync ( credentials , Constants . AUTH _ URL , new SyncUser . Callback ( ) { 
 @ Override 
 public void onSuccess ( SyncUser user ) { 
 @ @ - 194 , 7 + 196 , 6 @ @ public class AuthTests extends StandardIntegrationTest { 
 } 
 
 @ Test 
 - @ Ignore ( " Resolve https : / / github . com / realm / ros / issues / 273 " ) 
 public void changePassword ( ) { 
 String username = UUID . randomUUID ( ) . toString ( ) ; 
 String originalPassword = " password " ; 
 @ @ - 214 , 7 + 215 , 6 @ @ public class AuthTests extends StandardIntegrationTest { 
 } 
 
 @ Test 
 - @ Ignore ( " Resolve https : / / github . com / realm / ros / issues / 273 " ) 
 public void changePassword _ using _ admin ( ) { 
 String username = UUID . randomUUID ( ) . toString ( ) ; 
 String originalPassword = " password " ; 
 @ @ - 242 , 7 + 242 , 6 @ @ public class AuthTests extends StandardIntegrationTest { 
 
 @ Test 
 @ RunTestInLooperThread 
 - @ Ignore ( " Resolve https : / / github . com / realm / ros / issues / 273 " ) 
 public void changePassword _ using _ admin _ async ( ) { 
 final String username = UUID . randomUUID ( ) . toString ( ) ; 
 final String originalPassword = " password " ; 
 @ @ - 282 , 6 + 281 , 7 @ @ public class AuthTests extends StandardIntegrationTest { 
 
 @ Test 
 @ RunTestInLooperThread 
 + @ Ignore ( " Wait until https : / / github . com / realm / ros / issues / 309 is resolved " ) 
 public void changePassword _ throwWhenUserIsLoggedOut ( ) { 
 String username = UUID . randomUUID ( ) . toString ( ) ; 
 String password = " password " ; 
 @ @ - 398 , 7 + 398 , 6 @ @ public class AuthTests extends StandardIntegrationTest { 
 RealmConfiguration configuration = new SyncConfiguration . Builder ( user , Constants . USER _ REALM ) . build ( ) ; 
 user . logout ( ) ; 
 assertFalse ( user . isValid ( ) ) ; 
 - 
 Realm instance = Realm . getInstance ( configuration ) ; 
 instance . close ( ) ; 
 } 
 @ @ - 500 , 23 + 499 , 38 @ @ public class AuthTests extends StandardIntegrationTest { 
 } 
 
 @ Test 
 - @ Ignore ( " Resolve https : / / github . com / realm / ros / issues / 261 " ) 
 public void revokedRefreshTokenIsNotSameAfterLogin ( ) throws InterruptedException { 
 + final CountDownLatch userLoggedInAgain = new CountDownLatch ( 1 ) ; 
 final String uniqueName = UUID . randomUUID ( ) . toString ( ) ; 
 
 - SyncCredentials credentials = SyncCredentials . usernamePassword ( uniqueName , " password " , true ) ; 
 + final SyncCredentials credentials = SyncCredentials . usernamePassword ( uniqueName , " password " , true ) ; 
 SyncUser user = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; 
 - Token revokedRefreshToken = user . getAccessToken ( ) ; 
 + final Token revokedRefreshToken = user . getAccessToken ( ) ; 
 
 - user . logout ( ) ; 
 + SyncManager . addAuthenticationListener ( new AuthenticationListener ( ) { 
 + @ Override 
 + public void loggedIn ( SyncUser user ) { 
 
 - credentials = SyncCredentials . usernamePassword ( uniqueName , " password " , false ) ; 
 - SyncUser loggedInUser = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; 
 + } 
 
 - / / still comparing the same user 
 - Assert . assertEquals ( revokedRefreshToken . identity ( ) , loggedInUser . getAccessToken ( ) . identity ( ) ) ; 
 - / / different tokens 
 - assertNotEquals ( revokedRefreshToken . value ( ) , loggedInUser . getAccessToken ( ) . value ( ) ) ; 
 + @ Override 
 + public void loggedOut ( SyncUser user ) { 
 + SystemClock . sleep ( 1000 ) ; / / Remove once https : / / github . com / realm / ros / issues / 304 is fixed 
 + SyncCredentials credentials = SyncCredentials . usernamePassword ( uniqueName , " password " , false ) ; 
 + SyncUser loggedInUser = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; 
 + 
 + / / still comparing the same user 
 + assertEquals ( revokedRefreshToken . identity ( ) , loggedInUser . getAccessToken ( ) . identity ( ) ) ; 
 + 
 + / / different tokens 
 + assertNotEquals ( revokedRefreshToken . value ( ) , loggedInUser . getAccessToken ( ) . value ( ) ) ; 
 + SyncManager . removeAuthenticationListener ( this ) ; 
 + userLoggedInAgain . countDown ( ) ; 
 + } 
 + } ) ; 
 + 
 + user . logout ( ) ; 
 + TestHelper . awaitOrFail ( userLoggedInAgain ) ; 
 } 
 
 / / The pre - emptive token refresh subsystem should function , and properly refresh the access token . 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / EncryptedSynchronizedRealmTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / EncryptedSynchronizedRealmTests . java 
 index 50d7ed8 . . 7806b41 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / EncryptedSynchronizedRealmTests . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / EncryptedSynchronizedRealmTests . java 
 @ @ - 1 , 18 + 1 , 14 @ @ 
 package io . realm . objectserver ; 
 
 import android . os . SystemClock ; 
 - import android . text . style . TabStopSpan ; 
 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . Timeout ; 
 
 import java . util . UUID ; 
 - import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . TimeUnit ; 
 - import java . util . concurrent . atomic . AtomicBoolean ; 
 
 - import io . realm . BaseIntegrationTest ; 
 import io . realm . ObjectServerError ; 
 import io . realm . Realm ; 
 import io . realm . RealmResults ; 
 @ @ - 24 , 7 + 20 , 6 @ @ import io . realm . SyncSession ; 
 import io . realm . SyncUser ; 
 import io . realm . TestHelper ; 
 import io . realm . entities . StringOnly ; 
 - import io . realm . exceptions . RealmError ; 
 import io . realm . exceptions . RealmFileException ; 
 import io . realm . objectserver . utils . Constants ; 
 import io . realm . objectserver . utils . StringOnlyModule ; 
 @ @ - 130 , 19 + 125 , 6 @ @ public class EncryptedSynchronizedRealmTests extends StandardIntegrationTest { 
 / / STEP 2 : make sure the changes gets to the server 
 SyncManager . getSession ( configWithEncryption ) . uploadAllLocalChanges ( ) ; 
 
 - final CountDownLatch backgroundException = new CountDownLatch ( 1 ) ; 
 - final AtomicBoolean exceptionThrown = new AtomicBoolean ( false ) ; 
 - 
 - Thread . UncaughtExceptionHandler defaultUncaughtExceptionHandler = Thread . getDefaultUncaughtExceptionHandler ( ) ; 
 - Thread . setDefaultUncaughtExceptionHandler ( new Thread . UncaughtExceptionHandler ( ) { 
 - @ Override 
 - public void uncaughtException ( Thread t , Throwable e ) { 
 - if ( e instanceof RealmError & & e . getMessage ( ) . contains ( " An exception has been thrown on the sync client thread " ) ) { 
 - exceptionThrown . set ( true ) ; 
 - } 
 - backgroundException . countDown ( ) ; 
 - } 
 - } ) ; 
 realm . close ( ) ; 
 user . logout ( ) ; 
 
 @ @ - 163 , 12 + 145 , 11 @ @ public class EncryptedSynchronizedRealmTests extends StandardIntegrationTest { 
 realm = Realm . getInstance ( configWithoutEncryption ) ; 
 fail ( " It should not be possible to open the Realm without the encryption key set previously . " ) ; 
 } catch ( RealmFileException ignored ) { 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + } 
 } 
 - 
 - TestHelper . awaitOrFail ( backgroundException ) ; 
 - / / restore default handler 
 - Thread . setDefaultUncaughtExceptionHandler ( defaultUncaughtExceptionHandler ) ; 
 - assertTrue ( " Sync Client Thread should throw an exception " , exceptionThrown . get ( ) ) ; 
 } 
 
 / / If client B encrypts its synced Realm , client A should be able to access that Realm with a different encryption key . 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 index a1d325d . . beb5c0c 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 @ @ - 161 , 40 + 161 , 12 @ @ public class UserFactory { 
 handler . post ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 - final AtomicInteger usersLoggedOut = new AtomicInteger ( 0 ) ; 
 - final int activeUsers = SyncUser . all ( ) . size ( ) ; 
 - final AuthenticationListener listener = new AuthenticationListener ( ) { 
 - @ Override 
 - public void loggedIn ( SyncUser user ) { 
 - SyncManager . removeAuthenticationListener ( this ) ; 
 - fail ( " User logged in while exiting test : " + user ) ; 
 - } 
 - 
 - @ Override 
 - public void loggedOut ( SyncUser user ) { 
 - if ( usersLoggedOut . incrementAndGet ( ) = = activeUsers ) { 
 - SyncManager . removeAuthenticationListener ( this ) ; 
 - allUsersLoggedOut . countDown ( ) ; 
 - } 
 - } 
 - } ; 
 - SyncManager . addAuthenticationListener ( listener ) ; 
 - 
 Map < String , SyncUser > users = SyncUser . all ( ) ; 
 - if ( users . isEmpty ( ) ) { 
 - SyncManager . removeAuthenticationListener ( listener ) ; 
 - allUsersLoggedOut . countDown ( ) ; 
 - } else { 
 - for ( SyncUser user : users . values ( ) ) { 
 - user . logout ( ) ; 
 - if ( ! user . getAuthenticationUrl ( ) . toString ( ) . contains ( " 127 . 0 . 0 . 1 " ) ) { 
 - / / For dummy users , calling ` logout ( ) ` will never result in the 
 - / / authentication listener to trigger since the URL doesn ' t exist . 
 - / / For these cases , we manually trigger the listener . 
 - listener . loggedOut ( user ) ; 
 - } 
 - } 
 + for ( SyncUser user : users . values ( ) ) { 
 + user . logout ( ) ; 
 } 
 + SystemClock . sleep ( 2000 ) ; / / Remove when https : / / github . com / realm / ros / issues / 304 is fixed 
 + allUsersLoggedOut . countDown ( ) ; 
 } 
 } ) ; 
 TestHelper . awaitOrFail ( allUsersLoggedOut ) ; 
 diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js 
 index 384c549 . . 0e46a05 100755 
 - - - a / tools / sync _ test _ server / ros - testing - server . js 
 + + + b / tools / sync _ test _ server / ros - testing - server . js 
 @ @ - 42 , 7 + 42 , 7 @ @ function waitForRosToInitialize ( attempts , onSuccess , onError ) { 
 http . get ( " http : / / 0 . 0 . 0 . 0 : 9080 / health " , function ( res ) { 
 if ( res . statusCode ! = 200 ) { 
 winston . info ( " ROS / health / returned : " + res . statusCode ) 
 - waitForRosToInitialize ( attempts - 1 , onSuccess ) 
 + waitForRosToInitialize ( attempts - 1 , onSuccess , onError ) 
 } else { 
 onSuccess ( ) ; 
 } 
 @ @ - 51 , 7 + 51 , 7 @ @ function waitForRosToInitialize ( attempts , onSuccess , onError ) { 
 / / Errors like ECONNREFUSED 0 . 0 . 0 . 0 : 9080 will be reported here . 
 / / Wait a little before trying again ( common startup is ~ 1 second ) . 
 setTimeout ( function ( ) { 
 - waitForRosToInitialize ( attempts - 1 , onSuccess ) ; 
 + waitForRosToInitialize ( attempts - 1 , onSuccess , onError ) ; 
 } , 200 ) ; 
 } ) ; 
 } 
 @ @ - 64 , 7 + 64 , 10 @ @ function startRealmObjectServer ( onSuccess , onError ) { 
 winston . info ( env . NODE _ ENV ) ; 
 env . NODE _ ENV = ' development ' ; 
 syncServerChildProcess = spawn ( ' ros ' , 
 - [ ' start ' , ' - - data ' , path ] , 
 + [ ' start ' , 
 + ' - - data ' , path , 
 + ' - - access - token - ttl ' , ' 20 ' / / WARNING : Changing this value may impact the timeout of the refresh token test ( AuthTests # preemptiveTokenRefresh ) 
 + ] , 
 { env : env , cwd : path } ) ; 
 
 / / local config : 
 @ @ - 93 , 8 + 96 , 6 @ @ function stopRealmObjectServer ( onSuccess , onError ) { 
 onSuccess ( ) ; 
 } ) ; 
 
 - / / Move back to ` SIGTERM ` once https : / / github . com / realm / ros / issues / 234 
 - / / is resolved 
 syncServerChildProcess . kill ( ' SIGKILL ' ) ; 
 } 
 
 @ @ - 103 , 10 + 104 , 10 @ @ dispatcher . onGet ( " / start " , function ( req , res ) { 
 winston . info ( " Attempting to start ROS " ) ; 
 startRealmObjectServer ( ( ) = > { 
 res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; 
 - res . end ( ' ROS server started ' ) ; 
 + res . end ( ' ROS started ' ) ; 
 } , function ( err ) { 
 res . writeHead ( 500 , { ' Content - Type ' : ' text / plain ' } ) ; 
 - res . end ( ' Starting a ROS server failed : ' + err ) ; 
 + res . end ( ' Starting ROS failed : ' + err ) ; 
 } ) ; 
 } ) ; 
 
 @ @ - 114 , 8 + 115 , 11 @ @ dispatcher . onGet ( " / start " , function ( req , res ) { 
 dispatcher . onGet ( " / stop " , function ( req , res ) { 
 winston . info ( " Attempting to stop ROS " ) 
 stopRealmObjectServer ( function ( ) { 
 - res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; 
 - res . end ( ' ROS server stopped ' ) ; 
 + res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; 
 + res . end ( ' ROS stopped ' ) ; 
 + } , function ( err ) { 
 + res . writeHead ( 500 , { ' Content - Type ' : ' text / plain ' } ) ; 
 + res . end ( ' Stopping ROS failed : ' + err ) ; 
 } ) ; 
 } ) ; 


NEAREST DIFF:
diff - - git a / README . md b / README . md 
 index ee52154 . . 268af42 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 220 , 6 + 220 , 9 @ @ To run a testing server locally : 
 	 . / gradlew connectedObjectServerDebugAndroidTest 
 	 ` ` ` 
 
 + Note that if using VirtualBox ( Genymotion ) , the network needs to be bridged for the tests to work . 
 + This is done in ` VirtualBox > Network ` . Set " Adapter 2 " to " Bridged Adapter " . 
 + 
 These tests may take as much as half an hour to complete . 
 
 # # Contributing 
 diff - - git a / realm / realm - library / src / androidTest / AndroidManifest . xml b / realm / realm - library / src / androidTest / AndroidManifest . xml 
 index c7741a6 . . d9e252d 100644 
 - - - a / realm / realm - library / src / androidTest / AndroidManifest . xml 
 + + + b / realm / realm - library / src / androidTest / AndroidManifest . xml 
 @ @ - 21 , 6 + 21 , 23 @ @ 
 android : exported = " true " 
 android : process = " : remote " > 
 < / service > 
 + 
 + < ! - - 
 + FIXME : Manifest merger doesn ' t seem to work correctly with test flavours . 
 + Figure out why . For now place services here 
 + - - > 
 + < service 
 + android : name = " io . realm . objectserver . service . SendOneCommit " 
 + android : enabled = " true " 
 + android : exported = " true " 
 + android : process = " : remote " > 
 + < / service > 
 + < service 
 + android : name = " io . realm . objectserver . service . SendsALot " 
 + android : enabled = " true " 
 + android : exported = " true " 
 + android : process = " : remote " > 
 + < / service > 
 < / application > 
 
 < / manifest > 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 index a587ca1 . . c31ea68 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import org . junit . Before ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 + import org . mockito . Mockito ; 
 
 import java . net . MalformedURLException ; 
 import java . net . URI ; 
 @ @ - 31 , 6 + 32 , 7 @ @ import java . net . URL ; 
 import java . util . Collection ; 
 
 import io . realm . android . SharedPrefsUserStore ; 
 + import io . realm . internal . network . AuthenticationServer ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . util . SyncTestUtils ; 
 
 @ @ - 39 , 6 + 41 , 8 @ @ import static junit . framework . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 + import static org . mockito . Matchers . any ; 
 + import static org . mockito . Mockito . when ; 
 
 @ RunWith ( AndroidJUnit4 . class ) 
 public class SyncUserTests { 
 @ @ - 151 , 4 + 155 , 19 @ @ public class SyncUserTests { 
 assertTrue ( str ! = null & & ! str . isEmpty ( ) ) ; 
 } 
 
 + / / Test that a login an access token logs the user in directly without touching the network 
 + @ Test 
 + public void login _ withAccessToken ( ) { 
 + AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; 
 + when ( authServer . loginUser ( any ( SyncCredentials . class ) , any ( URL . class ) ) ) . thenThrow ( new AssertionError ( " Server contacted . " ) ) ; 
 + AuthenticationServer originalServer = SyncManager . getAuthServer ( ) ; 
 + SyncManager . setAuthServerImpl ( authServer ) ; 
 + try { 
 + SyncCredentials credentials = SyncCredentials . accessToken ( " foo " , " bar " ) ; 
 + SyncUser user = SyncUser . login ( credentials , " http : / / ros . realm . io / auth " ) ; 
 + assertTrue ( user . isValid ( ) ) ; 
 + } finally { 
 + SyncManager . setAuthServerImpl ( originalServer ) ; 
 + } 
 + } 
 } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java 
 index 827f126 . . b9dcbc4 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java 
 @ @ - 151 , 6 + 151 , 23 @ @ public class SyncCredentials { 
 return new SyncCredentials ( identityProvider , userIdentifier , userInfo ) ; 
 } 
 
 + / * * 
 + * Creates credentials from an existing access token . Since an access token is the proof that a user already 
 + * has logged in . Credentials created this way are automatically assumed to have successfully logged in . 
 + * This means that providing this credential to { @ link SyncUser # login ( SyncCredentials , String ) } will always 
 + * succeed , but accessing any Realm after might fail if the token is no longer valid . 
 + * 
 + * @ param accessToken Users access token . 
 + * @ param identifier User identifier . 
 + * @ return a set of credentials that can be used to log into the Object Server using 
 + * { @ link SyncUser # loginAsync ( SyncCredentials , String , SyncUser . Callback ) } 
 + * / 
 + public static SyncCredentials accessToken ( String accessToken , String identifier ) { 
 + HashMap < String , Object > userInfo = new HashMap < String , Object > ( ) ; 
 + userInfo . put ( " _ token " , accessToken ) ; 
 + return new SyncCredentials ( IdentityProvider . ACCESS _ TOKEN , identifier , userInfo ) ; 
 + } 
 + 
 private SyncCredentials ( String identityProvider , String token , Map < String , Object > userInfo ) { 
 this . identityProvider = identityProvider ; 
 this . userIdentifier = token ; 
 @ @ - 191 , 6 + 208 , 14 @ @ public class SyncCredentials { 
 * verifying that a given credential is valid . 
 * / 
 public static final class IdentityProvider { 
 + 
 + / * * 
 + * The provided identify is an already registered user ( represented by the access token ) . Logging in with this 
 + * type of identity will happen purely on the device without contacting the Realm Object Server . Acquiring 
 + * access to individual Realms will still require talking to the Object Server . 
 + * / 
 + public static final String ACCESS _ TOKEN = " _ access _ token " ; 
 + 
 / * * 
 * Any credentials verified by the debug identity provider will always be considered valid . 
 * It is only available if configured on the Object Server , and it is disabled by default . 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 index 65130e7 . . 379c3dd 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . net . URL ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . List ; 
 + import java . util . Objects ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . ThreadPoolExecutor ; 
 
 @ @ - 150 , 10 + 151 , 20 @ @ public class SyncUser { 
 throw new IllegalArgumentException ( " Invalid URL " + authenticationUrl + " . " , e ) ; 
 } 
 
 - final AuthenticationServer server = SyncManager . getAuthServer ( ) ; 
 ObjectServerError error ; 
 try { 
 - AuthenticateResponse result = server . loginUser ( credentials , authUrl ) ; 
 + AuthenticateResponse result ; 
 + if ( credentials . getIdentityProvider ( ) . equals ( SyncCredentials . IdentityProvider . ACCESS _ TOKEN ) ) { 
 + / / Credentials using ACCESS _ TOKEN as IdentityProvider are optimistically assumed to be valid already 
 + / / So log them in directly without contacting the authentication server . This is done by mirroring 
 + / / the JSON response expected from the server . 
 + String userIdentifier = credentials . getUserIdentifier ( ) ; 
 + String token = ( String ) credentials . getUserInfo ( ) . get ( " _ token " ) ; 
 + result = AuthenticateResponse . createValidResponseWithUser ( userIdentifier , token ) ; 
 + } else { 
 + final AuthenticationServer server = SyncManager . getAuthServer ( ) ; 
 + result = server . loginUser ( credentials , authUrl ) ; 
 + } 
 if ( result . isValid ( ) ) { 
 ObjectServerUser syncUser = new ObjectServerUser ( result . getRefreshToken ( ) , authUrl ) ; 
 SyncUser user = new SyncUser ( syncUser ) ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 index 75e31a0 . . 9408a55 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 @ @ - 75 , 6 + 75 , 24 @ @ public class AuthenticateResponse extends AuthServerResponse { 
 } 
 
 / * * 
 + * Helper method for creating a valid user login response . The user returned will be assumed to have all permissions 
 + * as doesn ' t expire . 
 + * 
 + * @ param identifier User identifier . 
 + * @ param token Users refresh token . 
 + * @ return Response 
 + * / 
 + public static AuthenticateResponse createValidResponseWithUser ( String identifier , String token ) { 
 + try { 
 + JSONObject response = new JSONObject ( ) ; 
 + response . put ( JSON _ FIELD _ REFRESH _ TOKEN , new Token ( token , identifier , null , Long . MAX _ VALUE , Token . Permission . ALL ) . toJson ( ) ) ; 
 + return new AuthenticateResponse ( response . toString ( ) ) ; 
 + } catch ( JSONException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + / * * 
 * Creates an unsuccessful authentication response . This should only happen in case of network or I / O related 
 * issues . 
 * 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java 
 index 78f0acf . . 3ae10a2 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java 
 @ @ - 151 , 5 + 151 , 7 @ @ public class Token { 
 DOWNLOAD , 
 REFRESH , 
 MANAGE ; 
 + 
 + public static final Permission [ ] ALL = { UPLOAD , DOWNLOAD , REFRESH , MANAGE } ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 index ccf997a . . a38b774 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 @ @ - 9 , 6 + 9 , 8 @ @ import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . SyncConfiguration ; 
 import io . realm . SyncCredentials ; 
 import io . realm . ErrorCode ; 
 import io . realm . ObjectServerError ; 
 @ @ - 66 , 4 + 68 , 21 @ @ public class AuthTests { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void login _ withAccessToken ( ) { 
 + SyncCredentials credentials = SyncCredentials . accessToken ( Constants . USER _ TOKEN , " access - token - user " ) ; 
 + SyncUser . loginAsync ( credentials , Constants . AUTH _ URL , new SyncUser . Callback ( ) { 
 + @ Override 
 + public void onSuccess ( SyncUser user ) { 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , Constants . SYNC _ SERVER _ URL ) . build ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( ObjectServerError error ) { 
 + fail ( " Error thrown : " + error ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java 
 index 6e465f5 . . 73df932 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import android . support . test . runner . AndroidJUnit4 ; 
 
 import org . junit . AfterClass ; 
 import org . junit . BeforeClass ; 
 + import org . junit . Ignore ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 @ @ - 32 , 16 + 33 , 20 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import io . realm . ObjectServerError ; 
 import io . realm . Realm ; 
 import io . realm . RealmChangeListener ; 
 import io . realm . RealmResults ; 
 import io . realm . SyncConfiguration ; 
 + import io . realm . SyncSession ; 
 + import io . realm . SyncUser ; 
 import io . realm . objectserver . model . ProcessInfo ; 
 import io . realm . objectserver . model . TestObject ; 
 import io . realm . objectserver . service . SendOneCommit ; 
 import io . realm . objectserver . service . SendsALot ; 
 import io . realm . objectserver . utils . Constants ; 
 import io . realm . objectserver . utils . HttpUtils ; 
 + import io . realm . objectserver . utils . UserFactory ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 @ @ - 50 , 6 + 55 , 7 @ @ import static org . junit . Assert . fail ; 
 public class ProcessCommitTests { 
 @ BeforeClass 
 public static void setUp ( ) throws Exception { 
 + Realm . init ( InstrumentationRegistry . getContext ( ) ) ; 
 HttpUtils . startSyncServer ( ) ; 
 } 
 
 @ @ - 58 , 15 + 64 , 10 @ @ public class ProcessCommitTests { 
 HttpUtils . stopSyncServer ( ) ; 
 } 
 
 - / / FIXME : At least need one method in the test class 
 - @ Test 
 - public void dummy ( ) { 
 - 
 - } 
 - 
 - / / FIXME : Disable for now . 
 - / * 
 + / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating 
 + / / a Sync Client , but it needs to be investigated . 
 @ Test 
 + @ Ignore 
 public void expectServerCommit ( ) throws Throwable { 
 final Throwable [ ] exception = new Throwable [ 1 ] ; 
 final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; 
 @ @ - 76 , 18 + 77 , 23 @ @ public class ProcessCommitTests { 
 public void run ( ) { 
 try { 
 Looper . prepare ( ) ; 
 - Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; 
 + Context targetContext = InstrumentationRegistry . getTargetContext ( ) ; 
 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( ) 
 + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 + String realmUrl = Constants . SYNC _ SERVER _ URL ; 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 . name ( SendOneCommit . class . getSimpleName ( ) ) 
 - . serverUrl ( Constants . SYNC _ SERVER _ URL ) 
 - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) 
 + . errorHandler ( new SyncSession . ErrorHandler ( ) { 
 + @ Override 
 + public void onError ( SyncSession session , ObjectServerError error ) { 
 + fail ( " Sync failure : " + error ) ; 
 + } 
 + } ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests 
 final Realm realm = Realm . getInstance ( syncConfig ) ; 
 Intent intent = new Intent ( targetContext , SendOneCommit . class ) ; 
 targetContext . startService ( intent ) ; 
 - 
 final RealmResults < ProcessInfo > all = realm . where ( ProcessInfo . class ) . findAll ( ) ; 
 all . addChangeListener ( new RealmChangeListener < RealmResults < ProcessInfo > > ( ) { 
 @ Override 
 @ @ - 113 , 14 + 119 , 15 @ @ public class ProcessCommitTests { 
 fail ( " Test timed out " ) ; 
 } 
 } 
 - * / 
 
 + / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating 
 + / / a Sync Client , but it needs to be investigated . 
 / / TODO send string from service and match 
 / / replicate integration tests from Cocoa 
 / / add gradle task to start the sh script automatically ( create pid file , = = > run or kill existing process 
 / / check the requirement for the issue again 
 - / * 
 @ Test 
 + @ Ignore 
 public void expectALot ( ) throws Throwable { 
 final Throwable [ ] exception = new Throwable [ 1 ] ; 
 final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; 
 @ @ - 132 , 10 + 139 , 16 @ @ public class ProcessCommitTests { 
 Looper . prepare ( ) ; 
 Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; 
 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( targetContext ) 
 + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 + String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 . name ( SendsALot . class . getSimpleName ( ) ) 
 - . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) 
 - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ) 
 + . errorHandler ( new SyncSession . ErrorHandler ( ) { 
 + @ Override 
 + public void onError ( SyncSession session , ObjectServerError error ) { 
 + fail ( " Sync failure : " + error ) ; 
 + } 
 + } ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests 
 final Realm realm = Realm . getInstance ( syncConfig ) ; 
 @ @ - 171 , 5 + 184 , 4 @ @ public class ProcessCommitTests { 
 fail ( " Test timed out " ) ; 
 } 
 } 
 - * / 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java 
 index 26c4f89 . . 2620be8 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java 
 @ @ - 20 , 6 + 20 , 13 @ @ import android . app . Service ; 
 import android . content . Intent ; 
 import android . os . IBinder ; 
 
 + import io . realm . Realm ; 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . SyncUser ; 
 + import io . realm . objectserver . model . ProcessInfo ; 
 + import io . realm . objectserver . utils . Constants ; 
 + import io . realm . objectserver . utils . UserFactory ; 
 + 
 / * * 
 * Open a sync Realm on a different process , then send one commit . 
 * / 
 @ @ - 28 , 12 + 35 , 11 @ @ public class SendOneCommit extends Service { 
 @ Override 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 - / / FIXME : Disable for now 
 - / * 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( this ) 
 + Realm . init ( getApplicationContext ( ) ) ; 
 + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 + String realmUrl = Constants . SYNC _ SERVER _ URL ; 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 . name ( SendOneCommit . class . getSimpleName ( ) ) 
 - . serverUrl ( Constants . SYNC _ SERVER _ URL ) 
 - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; 
 Realm realm = Realm . getInstance ( syncConfig ) ; 
 @ @ - 46 , 10 + 52 , 8 @ @ public class SendOneCommit extends Service { 
 realm . commitTransaction ( ) ; 
 
 realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset 
 - * / 
 } 
 
 - 
 @ Override 
 public IBinder onBind ( Intent intent ) { 
 return null ; 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java 
 index 2bcdd9d . . 27df640 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java 
 @ @ - 20 , 6 + 20 , 13 @ @ import android . app . Service ; 
 import android . content . Intent ; 
 import android . os . IBinder ; 
 
 + import io . realm . Realm ; 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . SyncUser ; 
 + import io . realm . objectserver . model . TestObject ; 
 + import io . realm . objectserver . utils . Constants ; 
 + import io . realm . objectserver . utils . UserFactory ; 
 + 
 / * * 
 * Open a sync Realm on a different process , then send one commit . 
 * / 
 @ @ - 28 , 13 + 35 , 11 @ @ public class SendsALot extends Service { 
 @ Override 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 - / / FIXME : Disable for now . 
 - / * 
 - User user = UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ; 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user ) 
 + Realm . init ( getApplicationContext ( ) ) ; 
 + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 + String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 . name ( SendsALot . class . getSimpleName ( ) ) 
 - . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) 
 - . user ( ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; 
 Realm realm = Realm . getInstance ( syncConfig ) ; 
 @ @ - 49 , 7 + 54 , 6 @ @ public class SendsALot extends Service { 
 realm . commitTransaction ( ) ; 
 
 realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset 
 - * / 
 } 
 
 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java 
 index 9b15ae1 . . 1fa4fb9 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java 
 @ @ - 16 , 12 + 16 , 17 @ @ 
 
 package io . realm . objectserver . utils ; 
 
 + import android . support . test . InstrumentationRegistry ; 
 + 
 import java . io . IOException ; 
 
 + import io . realm . Realm ; 
 import io . realm . log . RealmLog ; 
 import okhttp3 . Headers ; 
 + import okhttp3 . MediaType ; 
 import okhttp3 . OkHttpClient ; 
 import okhttp3 . Request ; 
 + import okhttp3 . RequestBody ; 
 import okhttp3 . Response ; 
 
 / * * 
 @ @ - 29 , 7 + 34 , 10 @ @ import okhttp3 . Response ; 
 * temp directory & start a sync server on it for each unit test . 
 * / 
 public class HttpUtils { 
 - private final static OkHttpClient client = new OkHttpClient ( ) ; 
 + private final static OkHttpClient client = new OkHttpClient . Builder ( ) 
 + . retryOnConnectionFailure ( true ) 
 + . build ( ) ; 
 + 
 / / adb reverse tcp : 8888 tcp : 8888 
 / / will forward this query to the host , running the integration test server on 8888 
 private final static String START _ SERVER = " http : / / 127 . 0 . 0 . 1 : 8888 / start " ; 
 @ @ - 60 , 20 + 68 , 29 @ @ public class HttpUtils { 
 / / Checking the server 
 private static boolean waitAuthServerReady ( ) throws InterruptedException { 
 int retryTimes = 50 ; 
 + 
 + / / Dummy invalid request , which will trigger a 400 ( BAD REQUEST ) , but indicate the auth 
 + / / server is responsive 
 Request request = new Request . Builder ( ) 
 - . url ( Constants . AUTH _ SERVER _ URL ) 
 + . post ( RequestBody . create ( MediaType . parse ( " application / json ; charset = utf - 8 " ) , " " ) ) 
 + . url ( Constants . AUTH _ URL ) 
 . build ( ) ; 
 
 while ( retryTimes ! = 0 ) { 
 + Response response = null ; 
 try { 
 - Response response = client . newCall ( request ) . execute ( ) ; 
 - if ( response . isSuccessful ( ) ) { 
 + response = client . newCall ( request ) . execute ( ) ; 
 + if ( response . code ( ) = = 400 ) { 
 return true ; 
 } 
 RealmLog . error ( " Error response from auth server : % s " , response . toString ( ) ) ; 
 } catch ( IOException e ) { 
 RealmLog . error ( e ) ; 
 Thread . sleep ( 100 ) ; 
 + } finally { 
 + if ( response ! = null ) { 
 + response . close ( ) ; 
 + } 
 } 
 retryTimes - - ; 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 index 1ebb2d6 . . 9e6c43d 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 @ @ - 16 , 25 + 16 , 13 @ @ 
 
 package io . realm . objectserver . utils ; 
 
 - import java . net . URI ; 
 - import java . net . URISyntaxException ; 
 - 
 + import io . realm . SyncCredentials ; 
 import io . realm . SyncUser ; 
 - import io . realm . objectserver . utils . Constants ; 
 
 / / Must be in ` io . realm . objectserver ` to work around package protected methods . 
 public class UserFactory { 
 - / / FIXME : Not working right now . 
 - / * 
 - public static User createDefaultUser ( String SERVER _ URL , String USER _ TOKEN ) { 
 - try { 
 - User user = User . createLocal ( ) ; 
 - 
 - user . addAccessToken ( new URI ( SERVER _ URL ) , USER _ TOKEN ) ; 
 - return user ; 
 - } catch ( URISyntaxException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + public static SyncUser createDefaultUser ( String authUrl , String accessToken ) { 
 + SyncCredentials credentials = SyncCredentials . accessToken ( accessToken , " sync - integration - user " ) ; 
 + return SyncUser . login ( credentials , authUrl ) ; 
 } 
 - * / 
 } 
 diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js 
 index c182652 . . 6ddef03 100755 
 - - - a / tools / sync _ test _ server / ros - testing - server . js 
 + + + b / tools / sync _ test _ server / ros - testing - server . js 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 # ! / usr / bin / env nodejs 
 
 - var winston = require ( ' winston ' ) ; / / logging 
 + var winston = require ( ' winston ' ) ; / / logging 
 const temp = require ( ' temp ' ) ; 
 const spawn = require ( ' child _ process ' ) . spawn ; 
 var http = require ( ' http ' ) ; 
 @ @ - 23 , 7 + 23 , 7 @ @ function handleRequest ( request , response ) { 
 try { 
 / / log the request on console 
 winston . log ( request . url ) ; 
 - / / Disptach 
 + / / Dispatch 
 dispatcher . dispatch ( request , response ) ; 
 } catch ( err ) { 
 console . log ( err ) ; 
 diff - - git a / tools / sync _ test _ server / start _ server . sh b / tools / sync _ test _ server / start _ server . sh 
 index 00930f5 . . 277bb4b 100755 
 - - - a / tools / sync _ test _ server / start _ server . sh 
 + + + b / tools / sync _ test _ server / start _ server . sh 
 @ @ - 9 , 9 + 9 , 10 @ @ TMP _ DIR = $ ( mktemp - d / tmp / sync - test . XXXX ) | | { echo " Failed to mktemp $ TEST _ TEMP _ 
 
 adb reverse tcp : 7800 tcp : 7800 & & \ 
 adb reverse tcp : 8080 tcp : 8080 & & \ 
 + adb reverse tcp : 9080 tcp : 9080 & & \ 
 adb reverse tcp : 8888 tcp : 8888 | | { echo " Failed to reverse adb port . " ; exit 1 ; } 
 
 docker build $ DOCKERFILE _ DIR - - build - arg ROS _ DE _ VERSION = $ ROS _ DE _ VERSION - t sync - test - server | | { echo " Failed to build Docker image . " ; exit 1 ; } 
 
 echo " See log files in $ TMP _ DIR " 
 - docker run - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server 
 + docker run - p 9080 : 9080 - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server
