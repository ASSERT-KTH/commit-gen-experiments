BLEU SCORE: 0.05522397783539471

TEST MSG: Update core to 2 . 3 . 0
GENERATED MSG: Call SyncManager . notifyErrorHandler

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index c979bb4 . . 90ee485 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 16 , 8 + 16 , 8 @ @ <nl> <nl> # # # Internal <nl> <nl> - * Upgraded Realm Core to 2 . 1 . 0 . <nl> - * Upgraded Realm Sync to 1 . 0 . 0 - BETA - 5 . 0 . <nl> + * Upgraded Realm Core to 2 . 3 . 0 . <nl> + * Upgraded Realm Sync to 1 . 0 . 0 - BETA - 6 . 5 . <nl> <nl> # # 2 . 2 . 1 <nl> <nl> diff - - git a / dependencies . list b / dependencies . list <nl> index e1ea9c6 . . 53ffc5b 100644 <nl> - - - a / dependencies . list <nl> + + + b / dependencies . list <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> # Realm Sync Core release used by Realm Java <nl> # https : / / github . com / realm / realm - sync / releases <nl> - REALM _ SYNC _ VERSION = 1 . 0 . 0 - BETA - 5 . 0 <nl> - REALM _ SYNC _ SHA256 = 7bbaa9cdef722d85489feb1b70da11d5640869540d9a0fc40621de7352dd9ffd <nl> + REALM _ SYNC _ VERSION = 1 . 0 . 0 - BETA - 6 . 5 <nl> + REALM _ SYNC _ SHA256 = dad59e910e4a8cab75791bab152e7c9e43712b174e0dce5a1596273976eb4de3 <nl> <nl> # Object Server Release used by Integration tests <nl> # https : / / packagecloud . io / realm / realm ? filter = debs <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> index 1567862 . . 433e443 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> @ @ - 38 , 17 + 38 , 6 @ @ using namespace realm : : jni _ util ; <nl> <nl> std : : unique _ ptr < Client > sync _ client ; <nl> <nl> - static jclass sync _ manager = nullptr ; <nl> - static jmethodID sync _ manager _ notify _ error _ handler = nullptr ; <nl> - <nl> - static void error _ handler ( int error _ code , std : : string message ) <nl> - { <nl> - JNIEnv * env = JniUtils : : get _ env ( ) ; <nl> - <nl> - env - > CallStaticVoidMethod ( sync _ manager , <nl> - sync _ manager _ notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; <nl> - } <nl> - <nl> JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient <nl> ( JNIEnv * env , jclass sync _ manager _ class ) <nl> { <nl> @ @ - 59 , 12 + 48 , 6 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient <nl> sync : : Client : : Config config ; <nl> config . logger = & CoreLoggerBridge : : shared ( ) ; <nl> sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws <nl> - <nl> - / / This function should only be called once , so below is safe . <nl> - sync _ manager = reinterpret _ cast < jclass > ( env - > NewGlobalRef ( sync _ manager _ class ) ) ; <nl> - sync _ manager _ notify _ error _ handler = env - > GetStaticMethodID ( sync _ manager , <nl> - " notifyErrorHandler " , " ( ILjava / lang / String ; ) V " ) ; <nl> - sync _ client - > set _ error _ handler ( error _ handler ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp <nl> index ea0ebec . . cbd02f0 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp <nl> @ @ - 74 , 7 + 74 , 6 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ objectserver _ ObjectServerSession _ n <nl> { <nl> TR _ ENTER ( ) <nl> JniSession * session = SS ( sessionPointer ) ; <nl> - session - > close ( env ) ; <nl> delete session ; / / TODO Can we avoid killing the session here ? <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store <nl> index 300a2d6 . . 99570ba 160000 <nl> - - - a / realm / realm - library / src / main / cpp / object - store <nl> + + + b / realm / realm - library / src / main / cpp / object - store <nl> @ @ - 1 + 1 @ @ <nl> - Subproject commit 300a2d6f284391540dcfd346893de49fa15e1771 <nl> + Subproject commit 99570ba6e0711820ef71b20d7ce0975b52cfd197 <nl> diff - - git a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp <nl> index 4ac8b02 . . ab7a9f7 100644 <nl> - - - a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp <nl> + + + b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp <nl> @ @ - 19 , 9 + 19 , 11 @ @ <nl> # include < jni . h > <nl> # include < string > <nl> # include < thread > <nl> + # include < memory > <nl> <nl> # include < realm / sync / history . hpp > <nl> # include < realm / sync / client . hpp > <nl> + # include < realm / sync / protocol . hpp > <nl> # include < realm / util / logger . hpp > <nl> <nl> # include < impl / realm _ coordinator . hpp > <nl> @ @ - 29 , 8 + 31 , 8 @ @ <nl> <nl> # include " util . hpp " <nl> # include " jni _ util / jni _ utils . hpp " <nl> - <nl> - using namespace realm : : jni _ util ; <nl> + # include " jni _ util / java _ global _ weak _ ref . hpp " <nl> + # include " jni _ util / java _ method . hpp " <nl> <nl> <nl> / / Wrapper class for realm : : Session . This allows us to manage the C + + session and callback lifecycle correctly . <nl> @ @ - 44 , 12 + 46 , 14 @ @ public : <nl> JniSession & operator = ( JniSession & & ) = delete ; <nl> <nl> JniSession ( JNIEnv * env , std : : string local _ realm _ path , jobject java _ session _ obj ) <nl> + : m _ java _ session _ ref ( std : : make _ shared < realm : : jni _ util : : JavaGlobalWeakRef > ( env , java _ session _ obj ) ) <nl> { <nl> extern std : : unique _ ptr < realm : : sync : : Client > sync _ client ; <nl> / / Get the coordinator for the given path , or null if there is none <nl> m _ sync _ session = new realm : : sync : : Session ( * sync _ client , local _ realm _ path ) ; <nl> - m _ java _ session _ ref = env - > NewGlobalRef ( java _ session _ obj ) ; <nl> - jobject global _ obj _ ref _ tmp ( m _ java _ session _ ref ) ; <nl> + / / error _ handler could be called after JniSession destructed . So we need to pass a weak ref to lambda to avoid <nl> + / / the corrupted pointer . <nl> + std : : weak _ ptr < realm : : jni _ util : : JavaGlobalWeakRef > weak _ session _ ref ( m _ java _ session _ ref ) ; <nl> auto sync _ transact _ callback = [ local _ realm _ path ] ( realm : : VersionID , realm : : VersionID ) { <nl> auto coordinator = realm : : _ impl : : RealmCoordinator : : get _ existing _ coordinator ( <nl> realm : : StringData ( local _ realm _ path ) ) ; <nl> @ @ - 57 , 13 + 61 , 29 @ @ public : <nl> coordinator - > wake _ up _ notifier _ worker ( ) ; <nl> } <nl> } ; <nl> - auto error _ handler = [ & , global _ obj _ ref _ tmp ] ( int error _ code , std : : string message ) { <nl> - JNIEnv * local _ env = JniUtils : : get _ env ( true ) ; <nl> - jclass java _ session _ class = local _ env - > GetObjectClass ( global _ obj _ ref _ tmp ) ; <nl> - jmethodID notify _ error _ handler = local _ env - > GetMethodID ( java _ session _ class , <nl> - " notifySessionError " , " ( ILjava / lang / String ; ) V " ) ; <nl> - local _ env - > CallVoidMethod ( global _ obj _ ref _ tmp , <nl> - notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; <nl> + auto error _ handler = [ weak _ session _ ref ] ( std : : error _ code error _ code , bool is _ fatal , const std : : string message ) { <nl> + if ( error _ code . category ( ) ! = realm : : sync : : protocol _ error _ category ( ) | | <nl> + error _ code . category ( ) ! = realm : : sync : : client _ error _ category ( ) ) { <nl> + / / FIXME : Consider below when moving to the OS sync manager . <nl> + / / Ignore this error since it may cause exceptions in java ErrorCode . fromInt ( ) . Throwing exception there <nl> + / / will trigger " called with pending exception " later since the thread is created by java , and the <nl> + / / endless loop is in native code . The java exception will never be thrown because of the endless loop <nl> + / / will never quit to java land . <nl> + realm : : jni _ util : : Log : : e ( " Unhandled sync client error code % 1 , % 2 . is _ fatal : % 3 . " , <nl> + error _ code . value ( ) , error _ code . message ( ) , is _ fatal ) ; <nl> + return ; <nl> + } <nl> + <nl> + auto session _ ref = weak _ session _ ref . lock ( ) ; <nl> + if ( session _ ref ) { <nl> + session _ ref . get ( ) - > call _ with _ local _ ref ( [ & ] ( JNIEnv * local _ env , jobject obj ) { <nl> + jclass java _ session _ class = local _ env - > GetObjectClass ( obj ) ; <nl> + static realm : : jni _ util : : JavaMethod notify _ error _ handler ( <nl> + local _ env , obj , " notifySessionError " , " ( ILjava / lang / String ; ) V " ) ; <nl> + local _ env - > CallVoidMethod ( <nl> + obj , notify _ error _ handler , error _ code . value ( ) , local _ env - > NewStringUTF ( message . c _ str ( ) ) ) ; <nl> + } ) ; <nl> + } <nl> } ; <nl> m _ sync _ session - > set _ sync _ transact _ callback ( sync _ transact _ callback ) ; <nl> m _ sync _ session - > set _ error _ handler ( std : : move ( error _ handler ) ) ; <nl> @ @ - 74 , 12 + 94 , 6 @ @ public : <nl> return m _ sync _ session ; <nl> } <nl> <nl> - / / Call this just before destroying the object to release JNI resources . <nl> - inline void close ( JNIEnv * env ) <nl> - { <nl> - env - > DeleteGlobalRef ( m _ java _ session _ ref ) ; <nl> - } <nl> - <nl> ~ JniSession ( ) <nl> { <nl> delete m _ sync _ session ; <nl> @ @ - 87 , 7 + 101 , 7 @ @ public : <nl> <nl> private : <nl> realm : : sync : : Session * m _ sync _ session ; <nl> - jobject m _ java _ session _ ref ; <nl> + std : : shared _ ptr < realm : : jni _ util : : JavaGlobalWeakRef > m _ java _ session _ ref ; <nl> } ; <nl> <nl> # endif / / REALM _ OBJECTSERVER _ SHARED _ HPP <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> index 0fd8086 . . f3fe17b 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> @ @ - 205 , 17 + 205 , 6 @ @ public class SyncManager { <nl> return userStore ; <nl> } <nl> <nl> - / / This is called from SyncManager . cpp from the worker thread the Sync Client is running on <nl> - / / Right now Core doesn ' t send these errors to the proper session , so instead we need to notify all sessions <nl> - / / from here . This can be removed once better error propagation is implemented in Sync Core . <nl> - @ SuppressWarnings ( " unused " ) <nl> - private static void notifyErrorHandler ( int errorCode , String errorMessage ) { <nl> - ObjectServerError error = new ObjectServerError ( ErrorCode . fromInt ( errorCode ) , errorMessage ) ; <nl> - for ( ObjectServerSession session : SessionStore . getAllSessions ( ) ) { <nl> - session . onError ( error ) ; <nl> - } <nl> - } <nl> - <nl> / / Notify listeners that a user logged in <nl> static void notifyUserLoggedIn ( SyncUser user ) { <nl> for ( AuthenticationListener authListener : authListeners ) {
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> index c397fea . . f513c03 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> @ @ - 73 , 13 + 73 , 28 @ @ struct AndroidLoggerFactory : public realm : : SyncLoggerFactory { <nl> } s _ logger _ factory ; <nl> <nl> / / TODO : Move to a better place & not needed after moving to OS <nl> - AndroidLogger & AndroidLogger : : shared ( ) noexcept { <nl> + AndroidLogger & AndroidLogger : : shared ( ) noexcept <nl> + { <nl> static AndroidLogger logger ; <nl> return logger ; <nl> } <nl> <nl> + static jclass sync _ manager = nullptr ; <nl> + static jmethodID sync _ manager _ notify _ error _ handler = nullptr ; <nl> + <nl> + static void error _ handler ( int error _ code , std : : string message ) <nl> + { <nl> + JNIEnv * env ; <nl> + if ( g _ vm - > GetEnv ( ( void * * ) & env , JNI _ VERSION _ 1 _ 6 ) ! = JNI _ OK ) { <nl> + throw std : : runtime _ error ( " JVM is not attached to this thread . Called in error _ handler . " ) ; <nl> + } <nl> + <nl> + env - > CallStaticVoidMethod ( sync _ manager , <nl> + sync _ manager _ notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; <nl> + } <nl> + <nl> JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient <nl> - ( JNIEnv * env , jclass ) <nl> + ( JNIEnv * env , jclass sync _ manager _ class ) <nl> { <nl> TR _ ENTER ( env ) <nl> if ( sync _ client ) return ; <nl> @ @ - 90 , 13 + 105 , 19 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient <nl> sync : : Client : : Config config ; <nl> config . logger = & AndroidLogger : : shared ( ) ; <nl> sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws <nl> - / / FIXME setup error handler for client <nl> + <nl> + / / This function should only be called once , so below is safe . <nl> + sync _ manager = sync _ manager _ class ; <nl> + sync _ manager _ notify _ error _ handler = env - > GetStaticMethodID ( sync _ manager , <nl> + " notifyErrorHandler " , " ( ILjava / lang / String ; ) V " ) ; <nl> + sync _ client - > set _ error _ handler ( error _ handler ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> / / Create the thread from java side to avoid some strange errors when native throws . <nl> JNIEXPORT void JNICALL <nl> - Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) { <nl> + Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) <nl> + { <nl> try { <nl> sync _ client - > run ( ) ; <nl> } CATCH _ STD ( ) <nl> diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp <nl> index 2c571bd . . eb00c1a 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / util . cpp <nl> @ @ - 38 , 8 + 38 , 6 @ @ jclass java _ lang _ float ; <nl> jmethodID java _ lang _ float _ init ; <nl> jclass java _ lang _ double ; <nl> jmethodID java _ lang _ double _ init ; <nl> - jclass sync _ manager ; <nl> - jmethodID sync _ manager _ notify _ error _ handler ; <nl> jclass session _ class _ ref ; <nl> jmethodID session _ error _ handler ; <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp <nl> index 7cadba4 . . 9db3763 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . hpp <nl> + + + b / realm / realm - library / src / main / cpp / util . hpp <nl> @ @ - 713 , 8 + 713 , 6 @ @ extern jclass java _ lang _ double ; <nl> extern jmethodID java _ lang _ double _ init ; <nl> <nl> / / FIXME Move to own library <nl> - extern jclass sync _ manager ; <nl> - extern jmethodID sync _ manager _ notify _ error _ handler ; <nl> extern jclass session _ class _ ref ; <nl> extern jmethodID session _ error _ handler ; <nl> <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> index 56dfad5 . . 01891b6 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> @ @ - 206 , 6 + 206 , 7 @ @ public final class SyncManager { <nl> / / This is called from SyncManager . cpp from the worker thread the Sync Client is running on <nl> / / Right now Core doesn ' t send these errors to the proper session , so instead we need to notify all sessions <nl> / / from here . This can be removed once better error propagation is implemented in Sync Core . <nl> + @ SuppressWarnings ( " unused " ) <nl> private static void notifyErrorHandler ( int errorCode , String errorMessage ) { <nl> ObjectServerError error = new ObjectServerError ( ErrorCode . fromInt ( errorCode ) , errorMessage ) ; <nl> for ( SyncSession session : SessionStore . getAllSessions ( ) ) {

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index c979bb4 . . 90ee485 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 16 , 8 + 16 , 8 @ @ 
 
 # # # Internal 
 
 - * Upgraded Realm Core to 2 . 1 . 0 . 
 - * Upgraded Realm Sync to 1 . 0 . 0 - BETA - 5 . 0 . 
 + * Upgraded Realm Core to 2 . 3 . 0 . 
 + * Upgraded Realm Sync to 1 . 0 . 0 - BETA - 6 . 5 . 
 
 # # 2 . 2 . 1 
 
 diff - - git a / dependencies . list b / dependencies . list 
 index e1ea9c6 . . 53ffc5b 100644 
 - - - a / dependencies . list 
 + + + b / dependencies . list 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 # Realm Sync Core release used by Realm Java 
 # https : / / github . com / realm / realm - sync / releases 
 - REALM _ SYNC _ VERSION = 1 . 0 . 0 - BETA - 5 . 0 
 - REALM _ SYNC _ SHA256 = 7bbaa9cdef722d85489feb1b70da11d5640869540d9a0fc40621de7352dd9ffd 
 + REALM _ SYNC _ VERSION = 1 . 0 . 0 - BETA - 6 . 5 
 + REALM _ SYNC _ SHA256 = dad59e910e4a8cab75791bab152e7c9e43712b174e0dce5a1596273976eb4de3 
 
 # Object Server Release used by Integration tests 
 # https : / / packagecloud . io / realm / realm ? filter = debs 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 index 1567862 . . 433e443 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 @ @ - 38 , 17 + 38 , 6 @ @ using namespace realm : : jni _ util ; 
 
 std : : unique _ ptr < Client > sync _ client ; 
 
 - static jclass sync _ manager = nullptr ; 
 - static jmethodID sync _ manager _ notify _ error _ handler = nullptr ; 
 - 
 - static void error _ handler ( int error _ code , std : : string message ) 
 - { 
 - JNIEnv * env = JniUtils : : get _ env ( ) ; 
 - 
 - env - > CallStaticVoidMethod ( sync _ manager , 
 - sync _ manager _ notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; 
 - } 
 - 
 JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient 
 ( JNIEnv * env , jclass sync _ manager _ class ) 
 { 
 @ @ - 59 , 12 + 48 , 6 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient 
 sync : : Client : : Config config ; 
 config . logger = & CoreLoggerBridge : : shared ( ) ; 
 sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws 
 - 
 - / / This function should only be called once , so below is safe . 
 - sync _ manager = reinterpret _ cast < jclass > ( env - > NewGlobalRef ( sync _ manager _ class ) ) ; 
 - sync _ manager _ notify _ error _ handler = env - > GetStaticMethodID ( sync _ manager , 
 - " notifyErrorHandler " , " ( ILjava / lang / String ; ) V " ) ; 
 - sync _ client - > set _ error _ handler ( error _ handler ) ; 
 } CATCH _ STD ( ) 
 } 
 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp 
 index ea0ebec . . cbd02f0 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp 
 @ @ - 74 , 7 + 74 , 6 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ objectserver _ ObjectServerSession _ n 
 { 
 TR _ ENTER ( ) 
 JniSession * session = SS ( sessionPointer ) ; 
 - session - > close ( env ) ; 
 delete session ; / / TODO Can we avoid killing the session here ? 
 } 
 
 diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store 
 index 300a2d6 . . 99570ba 160000 
 - - - a / realm / realm - library / src / main / cpp / object - store 
 + + + b / realm / realm - library / src / main / cpp / object - store 
 @ @ - 1 + 1 @ @ 
 - Subproject commit 300a2d6f284391540dcfd346893de49fa15e1771 
 + Subproject commit 99570ba6e0711820ef71b20d7ce0975b52cfd197 
 diff - - git a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp 
 index 4ac8b02 . . ab7a9f7 100644 
 - - - a / realm / realm - library / src / main / cpp / objectserver _ shared . hpp 
 + + + b / realm / realm - library / src / main / cpp / objectserver _ shared . hpp 
 @ @ - 19 , 9 + 19 , 11 @ @ 
 # include < jni . h > 
 # include < string > 
 # include < thread > 
 + # include < memory > 
 
 # include < realm / sync / history . hpp > 
 # include < realm / sync / client . hpp > 
 + # include < realm / sync / protocol . hpp > 
 # include < realm / util / logger . hpp > 
 
 # include < impl / realm _ coordinator . hpp > 
 @ @ - 29 , 8 + 31 , 8 @ @ 
 
 # include " util . hpp " 
 # include " jni _ util / jni _ utils . hpp " 
 - 
 - using namespace realm : : jni _ util ; 
 + # include " jni _ util / java _ global _ weak _ ref . hpp " 
 + # include " jni _ util / java _ method . hpp " 
 
 
 / / Wrapper class for realm : : Session . This allows us to manage the C + + session and callback lifecycle correctly . 
 @ @ - 44 , 12 + 46 , 14 @ @ public : 
 JniSession & operator = ( JniSession & & ) = delete ; 
 
 JniSession ( JNIEnv * env , std : : string local _ realm _ path , jobject java _ session _ obj ) 
 + : m _ java _ session _ ref ( std : : make _ shared < realm : : jni _ util : : JavaGlobalWeakRef > ( env , java _ session _ obj ) ) 
 { 
 extern std : : unique _ ptr < realm : : sync : : Client > sync _ client ; 
 / / Get the coordinator for the given path , or null if there is none 
 m _ sync _ session = new realm : : sync : : Session ( * sync _ client , local _ realm _ path ) ; 
 - m _ java _ session _ ref = env - > NewGlobalRef ( java _ session _ obj ) ; 
 - jobject global _ obj _ ref _ tmp ( m _ java _ session _ ref ) ; 
 + / / error _ handler could be called after JniSession destructed . So we need to pass a weak ref to lambda to avoid 
 + / / the corrupted pointer . 
 + std : : weak _ ptr < realm : : jni _ util : : JavaGlobalWeakRef > weak _ session _ ref ( m _ java _ session _ ref ) ; 
 auto sync _ transact _ callback = [ local _ realm _ path ] ( realm : : VersionID , realm : : VersionID ) { 
 auto coordinator = realm : : _ impl : : RealmCoordinator : : get _ existing _ coordinator ( 
 realm : : StringData ( local _ realm _ path ) ) ; 
 @ @ - 57 , 13 + 61 , 29 @ @ public : 
 coordinator - > wake _ up _ notifier _ worker ( ) ; 
 } 
 } ; 
 - auto error _ handler = [ & , global _ obj _ ref _ tmp ] ( int error _ code , std : : string message ) { 
 - JNIEnv * local _ env = JniUtils : : get _ env ( true ) ; 
 - jclass java _ session _ class = local _ env - > GetObjectClass ( global _ obj _ ref _ tmp ) ; 
 - jmethodID notify _ error _ handler = local _ env - > GetMethodID ( java _ session _ class , 
 - " notifySessionError " , " ( ILjava / lang / String ; ) V " ) ; 
 - local _ env - > CallVoidMethod ( global _ obj _ ref _ tmp , 
 - notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; 
 + auto error _ handler = [ weak _ session _ ref ] ( std : : error _ code error _ code , bool is _ fatal , const std : : string message ) { 
 + if ( error _ code . category ( ) ! = realm : : sync : : protocol _ error _ category ( ) | | 
 + error _ code . category ( ) ! = realm : : sync : : client _ error _ category ( ) ) { 
 + / / FIXME : Consider below when moving to the OS sync manager . 
 + / / Ignore this error since it may cause exceptions in java ErrorCode . fromInt ( ) . Throwing exception there 
 + / / will trigger " called with pending exception " later since the thread is created by java , and the 
 + / / endless loop is in native code . The java exception will never be thrown because of the endless loop 
 + / / will never quit to java land . 
 + realm : : jni _ util : : Log : : e ( " Unhandled sync client error code % 1 , % 2 . is _ fatal : % 3 . " , 
 + error _ code . value ( ) , error _ code . message ( ) , is _ fatal ) ; 
 + return ; 
 + } 
 + 
 + auto session _ ref = weak _ session _ ref . lock ( ) ; 
 + if ( session _ ref ) { 
 + session _ ref . get ( ) - > call _ with _ local _ ref ( [ & ] ( JNIEnv * local _ env , jobject obj ) { 
 + jclass java _ session _ class = local _ env - > GetObjectClass ( obj ) ; 
 + static realm : : jni _ util : : JavaMethod notify _ error _ handler ( 
 + local _ env , obj , " notifySessionError " , " ( ILjava / lang / String ; ) V " ) ; 
 + local _ env - > CallVoidMethod ( 
 + obj , notify _ error _ handler , error _ code . value ( ) , local _ env - > NewStringUTF ( message . c _ str ( ) ) ) ; 
 + } ) ; 
 + } 
 } ; 
 m _ sync _ session - > set _ sync _ transact _ callback ( sync _ transact _ callback ) ; 
 m _ sync _ session - > set _ error _ handler ( std : : move ( error _ handler ) ) ; 
 @ @ - 74 , 12 + 94 , 6 @ @ public : 
 return m _ sync _ session ; 
 } 
 
 - / / Call this just before destroying the object to release JNI resources . 
 - inline void close ( JNIEnv * env ) 
 - { 
 - env - > DeleteGlobalRef ( m _ java _ session _ ref ) ; 
 - } 
 - 
 ~ JniSession ( ) 
 { 
 delete m _ sync _ session ; 
 @ @ - 87 , 7 + 101 , 7 @ @ public : 
 
 private : 
 realm : : sync : : Session * m _ sync _ session ; 
 - jobject m _ java _ session _ ref ; 
 + std : : shared _ ptr < realm : : jni _ util : : JavaGlobalWeakRef > m _ java _ session _ ref ; 
 } ; 
 
 # endif / / REALM _ OBJECTSERVER _ SHARED _ HPP 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 index 0fd8086 . . f3fe17b 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 @ @ - 205 , 17 + 205 , 6 @ @ public class SyncManager { 
 return userStore ; 
 } 
 
 - / / This is called from SyncManager . cpp from the worker thread the Sync Client is running on 
 - / / Right now Core doesn ' t send these errors to the proper session , so instead we need to notify all sessions 
 - / / from here . This can be removed once better error propagation is implemented in Sync Core . 
 - @ SuppressWarnings ( " unused " ) 
 - private static void notifyErrorHandler ( int errorCode , String errorMessage ) { 
 - ObjectServerError error = new ObjectServerError ( ErrorCode . fromInt ( errorCode ) , errorMessage ) ; 
 - for ( ObjectServerSession session : SessionStore . getAllSessions ( ) ) { 
 - session . onError ( error ) ; 
 - } 
 - } 
 - 
 / / Notify listeners that a user logged in 
 static void notifyUserLoggedIn ( SyncUser user ) { 
 for ( AuthenticationListener authListener : authListeners ) {

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 index c397fea . . f513c03 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 @ @ - 73 , 13 + 73 , 28 @ @ struct AndroidLoggerFactory : public realm : : SyncLoggerFactory { 
 } s _ logger _ factory ; 
 
 / / TODO : Move to a better place & not needed after moving to OS 
 - AndroidLogger & AndroidLogger : : shared ( ) noexcept { 
 + AndroidLogger & AndroidLogger : : shared ( ) noexcept 
 + { 
 static AndroidLogger logger ; 
 return logger ; 
 } 
 
 + static jclass sync _ manager = nullptr ; 
 + static jmethodID sync _ manager _ notify _ error _ handler = nullptr ; 
 + 
 + static void error _ handler ( int error _ code , std : : string message ) 
 + { 
 + JNIEnv * env ; 
 + if ( g _ vm - > GetEnv ( ( void * * ) & env , JNI _ VERSION _ 1 _ 6 ) ! = JNI _ OK ) { 
 + throw std : : runtime _ error ( " JVM is not attached to this thread . Called in error _ handler . " ) ; 
 + } 
 + 
 + env - > CallStaticVoidMethod ( sync _ manager , 
 + sync _ manager _ notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; 
 + } 
 + 
 JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient 
 - ( JNIEnv * env , jclass ) 
 + ( JNIEnv * env , jclass sync _ manager _ class ) 
 { 
 TR _ ENTER ( env ) 
 if ( sync _ client ) return ; 
 @ @ - 90 , 13 + 105 , 19 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient 
 sync : : Client : : Config config ; 
 config . logger = & AndroidLogger : : shared ( ) ; 
 sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws 
 - / / FIXME setup error handler for client 
 + 
 + / / This function should only be called once , so below is safe . 
 + sync _ manager = sync _ manager _ class ; 
 + sync _ manager _ notify _ error _ handler = env - > GetStaticMethodID ( sync _ manager , 
 + " notifyErrorHandler " , " ( ILjava / lang / String ; ) V " ) ; 
 + sync _ client - > set _ error _ handler ( error _ handler ) ; 
 } CATCH _ STD ( ) 
 } 
 
 / / Create the thread from java side to avoid some strange errors when native throws . 
 JNIEXPORT void JNICALL 
 - Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) { 
 + Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) 
 + { 
 try { 
 sync _ client - > run ( ) ; 
 } CATCH _ STD ( ) 
 diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp 
 index 2c571bd . . eb00c1a 100644 
 - - - a / realm / realm - library / src / main / cpp / util . cpp 
 + + + b / realm / realm - library / src / main / cpp / util . cpp 
 @ @ - 38 , 8 + 38 , 6 @ @ jclass java _ lang _ float ; 
 jmethodID java _ lang _ float _ init ; 
 jclass java _ lang _ double ; 
 jmethodID java _ lang _ double _ init ; 
 - jclass sync _ manager ; 
 - jmethodID sync _ manager _ notify _ error _ handler ; 
 jclass session _ class _ ref ; 
 jmethodID session _ error _ handler ; 
 
 diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp 
 index 7cadba4 . . 9db3763 100644 
 - - - a / realm / realm - library / src / main / cpp / util . hpp 
 + + + b / realm / realm - library / src / main / cpp / util . hpp 
 @ @ - 713 , 8 + 713 , 6 @ @ extern jclass java _ lang _ double ; 
 extern jmethodID java _ lang _ double _ init ; 
 
 / / FIXME Move to own library 
 - extern jclass sync _ manager ; 
 - extern jmethodID sync _ manager _ notify _ error _ handler ; 
 extern jclass session _ class _ ref ; 
 extern jmethodID session _ error _ handler ; 
 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 index 56dfad5 . . 01891b6 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 @ @ - 206 , 6 + 206 , 7 @ @ public final class SyncManager { 
 / / This is called from SyncManager . cpp from the worker thread the Sync Client is running on 
 / / Right now Core doesn ' t send these errors to the proper session , so instead we need to notify all sessions 
 / / from here . This can be removed once better error propagation is implemented in Sync Core . 
 + @ SuppressWarnings ( " unused " ) 
 private static void notifyErrorHandler ( int errorCode , String errorMessage ) { 
 ObjectServerError error = new ObjectServerError ( ErrorCode . fromInt ( errorCode ) , errorMessage ) ; 
 for ( SyncSession session : SessionStore . getAllSessions ( ) ) {
