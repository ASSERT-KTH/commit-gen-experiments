BLEU SCORE: 0.04576506607182439

TEST MSG: Isolate test Realm files
GENERATED MSG: Added test cases for RealmConfiguration + minor refactoring .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> index 29de257 . . 4d824a6 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 77 , 6 + 77 , 7 @ @ import io . realm . exceptions . RealmException ; <nl> import io . realm . exceptions . RealmIOException ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . log . RealmLog ; <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> <nl> import static io . realm . internal . test . ExtraTests . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> @ @ - 91 , 6 + 92 , 8 @ @ import static org . junit . Assert . fail ; <nl> public class RealmTest { <nl> @ Rule <nl> public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule ( ) ; <nl> + @ Rule <nl> + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> private Context context ; <nl> <nl> protected final static int TEST _ DATA _ SIZE = 10 ; <nl> @ @ - 115 , 8 + 118 , 7 @ @ public class RealmTest { <nl> / / for your test to run with AndroidJUnitRunner . <nl> context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> <nl> - testConfig = TestHelper . createConfiguration ( context ) ; <nl> - Realm . deleteRealm ( testConfig ) ; <nl> + testConfig = configFactory . createConfiguration ( ) ; <nl> testRealm = Realm . getInstance ( testConfig ) ; <nl> } <nl> <nl> @ @ - 175 , 11 + 177 , 9 @ @ public class RealmTest { <nl> @ Test <nl> public void testGetInstanceFileNoWritePermissionThrows ( ) throws IOException { <nl> String REALM _ FILE = " readonly . realm " ; <nl> - File folder = context . getFilesDir ( ) ; <nl> + File folder = configFactory . getRoot ( ) ; <nl> File realmFile = new File ( folder , REALM _ FILE ) ; <nl> - if ( realmFile . exists ( ) ) { <nl> - realmFile . delete ( ) ; / / Reset old test data <nl> - } <nl> + assertFalse ( realmFile . exists ( ) ) ; <nl> <nl> assertTrue ( realmFile . createNewFile ( ) ) ; <nl> assertTrue ( realmFile . setWritable ( false ) ) ; <nl> @ @ - 211 , 7 + 211 , 7 @ @ public class RealmTest { <nl> testRealm . close ( ) ; / / Clear handler created by testRealm in setUp ( ) <nl> assertEquals ( 0 , Realm . getHandlers ( ) . size ( ) ) ; <nl> final String REALM _ NAME = " test - internalhandlers " ; <nl> - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , REALM _ NAME ) ; <nl> + RealmConfiguration realmConfig = configFactory . createConfiguration ( REALM _ NAME ) ; <nl> Realm . deleteRealm ( realmConfig ) ; <nl> <nl> / / Open and close first instance of a Realm <nl> @ @ - 887 , 8 + 887 , 7 @ @ public class RealmTest { <nl> } <nl> <nl> private void createAndTestFilename ( String language , String fileName ) { <nl> - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , fileName ) ; <nl> - Realm . deleteRealm ( realmConfig ) ; <nl> + RealmConfiguration realmConfig = configFactory . createConfiguration ( fileName ) ; <nl> Realm realm1 = Realm . getInstance ( realmConfig ) ; <nl> realm1 . beginTransaction ( ) ; <nl> Dog dog1 = realm1 . createObject ( Dog . class ) ; <nl> @ @ - 896 , 7 + 895 , 7 @ @ public class RealmTest { <nl> realm1 . commitTransaction ( ) ; <nl> realm1 . close ( ) ; <nl> <nl> - File file = new File ( context . getFilesDir ( ) , fileName ) ; <nl> + File file = new File ( realmConfig . getPath ( ) ) ; <nl> assertTrue ( language , file . exists ( ) ) ; <nl> <nl> Realm realm2 = Realm . getInstance ( realmConfig ) ; <nl> @ @ - 1015 , 14 + 1014 , 14 @ @ public class RealmTest { <nl> } <nl> <nl> / / Make sure the reference counter is per realm file <nl> - RealmConfiguration anotherConfig = TestHelper . createConfiguration ( context , " anotherRealm . realm " ) ; <nl> + RealmConfiguration anotherConfig = configFactory . createConfiguration ( " anotherRealm . realm " ) ; <nl> Realm . deleteRealm ( anotherConfig ) ; <nl> Realm otherRealm = Realm . getInstance ( anotherConfig ) ; <nl> <nl> / / Raise the reference <nl> Realm realm = null ; <nl> try { <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( configFactory . createConfiguration ( ) ) ; <nl> } finally { <nl> if ( realm ! = null ) realm . close ( ) ; <nl> } <nl> @ @ - 1062 , 7 + 1061 , 7 @ @ public class RealmTest { <nl> public void testReferenceCountingDoubleClose ( ) { <nl> testRealm . close ( ) ; <nl> testRealm . close ( ) ; / / Count down once too many . Counter is now potentially negative <nl> - testRealm = Realm . getInstance ( context ) ; <nl> + testRealm = Realm . getInstance ( configFactory . createConfiguration ( ) ) ; <nl> testRealm . beginTransaction ( ) ; <nl> AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; <nl> RealmResults < AllTypes > queryResult = testRealm . allObjects ( AllTypes . class ) ; <nl> @ @ - 1078 , 8 + 1077 , 8 @ @ public class RealmTest { <nl> <nl> @ Test <nl> public void testWriteCopyTo ( ) throws IOException { <nl> - RealmConfiguration configA = TestHelper . createConfiguration ( context , " file1 . realm " ) ; <nl> - RealmConfiguration configB = TestHelper . createConfiguration ( context , " file2 . realm " ) ; <nl> + RealmConfiguration configA = configFactory . createConfiguration ( " file1 . realm " ) ; <nl> + RealmConfiguration configB = configFactory . createConfiguration ( " file2 . realm " ) ; <nl> Realm . deleteRealm ( configA ) ; <nl> Realm . deleteRealm ( configB ) ; <nl> <nl> @ @ - 1091 , 7 + 1090 , 7 @ @ public class RealmTest { <nl> allTypes . setColumnString ( " Hello World " ) ; <nl> realm1 . commitTransaction ( ) ; <nl> <nl> - realm1 . writeCopyTo ( new File ( context . getFilesDir ( ) , " file2 . realm " ) ) ; <nl> + realm1 . writeCopyTo ( new File ( configB . getPath ( ) ) ) ; <nl> } finally { <nl> if ( realm1 ! = null ) { <nl> realm1 . close ( ) ; <nl> @ @ - 1099 , 8 + 1098 , 8 @ @ public class RealmTest { <nl> } <nl> <nl> / / Copy is compacted i . e . smaller than original <nl> - File file1 = new File ( context . getFilesDir ( ) , " file1 . realm " ) ; <nl> - File file2 = new File ( context . getFilesDir ( ) , " file2 . realm " ) ; <nl> + File file1 = new File ( configA . getPath ( ) ) ; <nl> + File file2 = new File ( configB . getPath ( ) ) ; <nl> assertTrue ( file1 . length ( ) > = file2 . length ( ) ) ; <nl> <nl> Realm realm2 = null ; <nl> @ @ - 1129 , 16 + 1128 , 12 @ @ public class RealmTest { <nl> <nl> @ Test <nl> public void testCompactRealmFileFailsIfOpen ( ) throws IOException { <nl> - assertFalse ( Realm . compactRealm ( TestHelper . createConfiguration ( context ) ) ) ; <nl> + assertFalse ( Realm . compactRealm ( testRealm . getConfiguration ( ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testCompactEncryptedEmptyRealmFile ( ) { <nl> - RealmConfiguration realmConfig = new RealmConfiguration . Builder ( context ) <nl> - . name ( " enc . realm " ) <nl> - . encryptionKey ( TestHelper . getRandomKey ( ) ) <nl> - . build ( ) ; <nl> - Realm . deleteRealm ( realmConfig ) ; <nl> + RealmConfiguration realmConfig = configFactory . createConfiguration ( " enc . realm " , TestHelper . getRandomKey ( ) ) ; <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . close ( ) ; <nl> / / TODO : remove try / catch block when compacting encrypted Realms is supported <nl> @ @ - 1151 , 11 + 1146 , 7 @ @ public class RealmTest { <nl> <nl> @ Test <nl> public void testCompactEncryptedPopulatedRealmFile ( ) { <nl> - RealmConfiguration realmConfig = new RealmConfiguration . Builder ( context ) <nl> - . name ( " enc . realm " ) <nl> - . encryptionKey ( TestHelper . getRandomKey ( ) ) <nl> - . build ( ) ; <nl> - Realm . deleteRealm ( realmConfig ) ; <nl> + RealmConfiguration realmConfig = configFactory . createConfiguration ( " enc . realm " , TestHelper . getRandomKey ( ) ) ; <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> <nl> populateTestRealm ( realm , 100 ) ; <nl> @ @ - 1171 , 27 + 1162 , 25 @ @ public class RealmTest { <nl> @ Test <nl> public void testCompactEmptyRealmFile ( ) throws IOException { <nl> final String REALM _ NAME = " test . realm " ; <nl> - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , REALM _ NAME ) ; <nl> - Realm . deleteRealm ( realmConfig ) ; <nl> + RealmConfiguration realmConfig = configFactory . createConfiguration ( REALM _ NAME ) ; <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . close ( ) ; <nl> - long before = new File ( context . getFilesDir ( ) , REALM _ NAME ) . length ( ) ; <nl> + long before = new File ( realmConfig . getPath ( ) ) . length ( ) ; <nl> assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> - long after = new File ( context . getFilesDir ( ) , REALM _ NAME ) . length ( ) ; <nl> + long after = new File ( realmConfig . getPath ( ) ) . length ( ) ; <nl> assertTrue ( before > = after ) ; <nl> } <nl> <nl> @ Test <nl> public void testCompactPopulateRealmFile ( ) throws IOException { <nl> final String REALM _ NAME = " test . realm " ; <nl> - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , REALM _ NAME ) ; <nl> - Realm . deleteRealm ( realmConfig ) ; <nl> + RealmConfiguration realmConfig = configFactory . createConfiguration ( REALM _ NAME ) ; <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> populateTestRealm ( realm , 100 ) ; <nl> realm . close ( ) ; <nl> - long before = new File ( context . getFilesDir ( ) , REALM _ NAME ) . length ( ) ; <nl> + long before = new File ( realmConfig . getPath ( ) ) . length ( ) ; <nl> assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> - long after = new File ( context . getFilesDir ( ) , REALM _ NAME ) . length ( ) ; <nl> + long after = new File ( realmConfig . getPath ( ) ) . length ( ) ; <nl> assertTrue ( before > = after ) ; <nl> } <nl> <nl> @ @ - 1228 , 8 + 1217 , 7 @ @ public class RealmTest { <nl> allTypes . setColumnString ( " Test " ) ; <nl> testRealm . commitTransaction ( ) ; <nl> <nl> - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , " other - realm " ) ; <nl> - Realm . deleteRealm ( realmConfig ) ; <nl> + RealmConfiguration realmConfig = configFactory . createConfiguration ( " other - realm " ) ; <nl> Realm otherRealm = Realm . getInstance ( realmConfig ) ; <nl> otherRealm . beginTransaction ( ) ; <nl> AllTypes copiedAllTypes = otherRealm . copyToRealm ( allTypes ) ; <nl> @ @ - 1652 , 21 + 1640 , 12 @ @ public class RealmTest { <nl> assertTrue ( key1 ! = key2 ) ; <nl> <nl> final String ENCRYPTED _ REALM = " differentKeys . realm " ; <nl> - Realm . deleteRealm ( TestHelper . createConfiguration ( context , ENCRYPTED _ REALM ) ) ; <nl> Realm realm1 = null ; <nl> Realm realm2 = null ; <nl> try { <nl> - realm1 = Realm . getInstance ( new RealmConfiguration . Builder ( context ) <nl> - . name ( ENCRYPTED _ REALM ) <nl> - . encryptionKey ( key1 ) <nl> - . build ( ) <nl> - ) ; <nl> + realm1 = Realm . getInstance ( configFactory . createConfiguration ( ENCRYPTED _ REALM , key1 ) ) ; <nl> try { <nl> - realm2 = Realm . getInstance ( new RealmConfiguration . Builder ( context ) <nl> - . name ( ENCRYPTED _ REALM ) <nl> - . encryptionKey ( key2 ) <nl> - . build ( ) <nl> - ) ; <nl> + realm2 = Realm . getInstance ( configFactory . createConfiguration ( ENCRYPTED _ REALM , key2 ) ) ; <nl> } catch ( Exception e ) { <nl> fail ( ) ; <nl> } finally { <nl> @ @ - 1692 , 29 + 1671 , 16 @ @ public class RealmTest { <nl> final String RE _ ENCRYPTED _ REALM _ FILE _ NAME = " reEncryptedTestRealm . realm " ; <nl> final String DECRYPTED _ REALM _ FILE _ NAME = " decryptedTestRealm . realm " ; <nl> <nl> - RealmConfiguration encryptedRealmConfig = new RealmConfiguration . Builder ( context ) <nl> - . name ( ENCRYPTED _ REALM _ FILE _ NAME ) <nl> - . encryptionKey ( TestHelper . getRandomKey ( ) ) <nl> - . build ( ) ; <nl> - <nl> - RealmConfiguration reEncryptedRealmConfig = new RealmConfiguration . Builder ( context ) <nl> - . name ( RE _ ENCRYPTED _ REALM _ FILE _ NAME ) <nl> - . encryptionKey ( TestHelper . getRandomKey ( ) ) <nl> - . build ( ) ; <nl> + RealmConfiguration encryptedRealmConfig = configFactory . createConfiguration ( ENCRYPTED _ REALM _ FILE _ NAME , <nl> + TestHelper . getRandomKey ( ) ) ; <nl> <nl> - RealmConfiguration decryptedRealmConfig = new RealmConfiguration . Builder ( context ) <nl> - . name ( DECRYPTED _ REALM _ FILE _ NAME ) <nl> - . build ( ) ; <nl> + RealmConfiguration reEncryptedRealmConfig = configFactory . createConfiguration ( RE _ ENCRYPTED _ REALM _ FILE _ NAME , <nl> + TestHelper . getRandomKey ( ) ) ; <nl> <nl> - / / Delete old test Realms if present <nl> - for ( RealmConfiguration realmConfig : Arrays . asList ( encryptedRealmConfig , reEncryptedRealmConfig , decryptedRealmConfig ) ) { <nl> - if ( ! Realm . deleteRealm ( realmConfig ) ) { <nl> - fail ( ) ; <nl> - } <nl> - } <nl> + RealmConfiguration decryptedRealmConfig = configFactory . createConfiguration ( DECRYPTED _ REALM _ FILE _ NAME ) ; <nl> <nl> / / Write encrypted copy from a unencrypted Realm <nl> - File destination = new File ( context . getFilesDir ( ) , ENCRYPTED _ REALM _ FILE _ NAME ) ; <nl> + File destination = new File ( encryptedRealmConfig . getPath ( ) ) ; <nl> try { <nl> testRealm . writeEncryptedCopyTo ( destination , encryptedRealmConfig . getEncryptionKey ( ) ) ; <nl> } catch ( Exception e ) { <nl> @ @ - 1784 , 8 + 1750 , 8 @ @ public class RealmTest { <nl> public void testOpenRealmFileDeletionShouldThrow ( ) { <nl> final String OTHER _ REALM _ NAME = " yetAnotherRealm . realm " ; <nl> <nl> - RealmConfiguration configA = TestHelper . createConfiguration ( context ) ; <nl> - RealmConfiguration configB = TestHelper . createConfiguration ( context , OTHER _ REALM _ NAME ) ; <nl> + RealmConfiguration configA = configFactory . createConfiguration ( ) ; <nl> + RealmConfiguration configB = configFactory . createConfiguration ( OTHER _ REALM _ NAME ) ; <nl> <nl> / / This instance is already cached because of the setUp ( ) method so this deletion should throw <nl> try { <nl> @ @ - 2087 , 8 + 2053 , 7 @ @ public class RealmTest { <nl> / / even if we skip initialization & validation <nl> @ Test <nl> public void testColumnIndicesIsPopulatedWhenSkippingInitialization ( ) throws Throwable { <nl> - final RealmConfiguration realmConfiguration = TestHelper . createConfiguration ( context , " columnIndices " ) ; <nl> - Realm . deleteRealm ( realmConfiguration ) ; <nl> + final RealmConfiguration realmConfiguration = configFactory . createConfiguration ( " columnIndices " ) ; <nl> final Exception threadError [ ] = new Exception [ 1 ] ; <nl> final CountDownLatch bgRealmOpened = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch mainThreadRealmDone = new CountDownLatch ( 1 ) ; <nl> @ @ - 2426 , 8 + 2391 , 7 @ @ public class RealmTest { <nl> <nl> @ Test <nl> public void testIsEmpty ( ) { <nl> - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , " empty _ test . realm " ) ; <nl> - Realm . deleteRealm ( realmConfig ) ; <nl> + RealmConfiguration realmConfig = configFactory . createConfiguration ( " empty _ test . realm " ) ; <nl> Realm emptyRealm = Realm . getInstance ( realmConfig ) ; <nl> <nl> assertTrue ( emptyRealm . isEmpty ( ) ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> index dcb1434 . . cff18d7 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ import io . realm . entities . NullTypes ; <nl> import io . realm . entities . StringOnly ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . log . Logger ; <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> <nl> import static junit . framework . Assert . fail ; <nl> import static org . junit . Assert . assertEquals ; <nl> @ @ - 355 , 22 + 356 , 42 @ @ public class TestHelper { <nl> } <nl> } <nl> <nl> + / * * <nl> + * @ deprecated Use { @ link TestRealmConfigurationFactory # createConfiguration ( ) } instead . <nl> + * / <nl> + @ Deprecated <nl> public static RealmConfiguration createConfiguration ( Context context ) { <nl> return createConfiguration ( context , Realm . DEFAULT _ REALM _ NAME ) ; <nl> } <nl> <nl> + / * * <nl> + * @ deprecated Use { @ link TestRealmConfigurationFactory # createConfiguration ( String ) } instead . <nl> + * / <nl> + @ Deprecated <nl> public static RealmConfiguration createConfiguration ( Context context , String name ) { <nl> return createConfiguration ( context . getFilesDir ( ) , name ) ; <nl> } <nl> <nl> + / * * <nl> + * @ deprecated Use { @ link TestRealmConfigurationFactory # createConfiguration ( String ) } instead . <nl> + * / <nl> + @ Deprecated <nl> public static RealmConfiguration createConfiguration ( File folder , String name ) { <nl> return createConfiguration ( folder , name , null ) ; <nl> } <nl> <nl> + / * * <nl> + * @ deprecated Use { @ link TestRealmConfigurationFactory # createConfiguration ( String , byte [ ] ) } instead . <nl> + * / <nl> + @ Deprecated <nl> public static RealmConfiguration createConfiguration ( Context context , String name , byte [ ] key ) { <nl> return createConfiguration ( context . getFilesDir ( ) , name , key ) ; <nl> } <nl> <nl> + / * * <nl> + * @ deprecated Use { @ link TestRealmConfigurationFactory # createConfiguration ( String , byte [ ] ) } instead . <nl> + * / <nl> + @ Deprecated <nl> public static RealmConfiguration createConfiguration ( File dir , String name , byte [ ] key ) { <nl> RealmConfiguration . Builder config = new RealmConfiguration . Builder ( dir ) . name ( name ) ; <nl> if ( key ! = null ) { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> new file mode 100644 <nl> index 0000000 . . d87d16a <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> @ @ - 0 , 0 + 1 , 82 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . rule ; <nl> + <nl> + import org . junit . rules . TemporaryFolder ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> + <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmConfiguration ; <nl> + <nl> + / * * <nl> + * Rule that creates the { @ link RealmConfiguration } in a temporary directory and deletes the Realm created with that <nl> + * configuration once the test finishes . Be sure to close all Realm instances before finishing the test . Otherwise <nl> + * { @ link Realm # deleteRealm ( RealmConfiguration ) } will throw an exception in the { @ link # after ( ) } method . <nl> + * The temp directory will be deleted regardless if the { @ link Realm # deleteRealm ( RealmConfiguration ) } fails or not . <nl> + * / <nl> + public class TestRealmConfigurationFactory extends TemporaryFolder { <nl> + private Map < RealmConfiguration , Boolean > map = new ConcurrentHashMap < RealmConfiguration , Boolean > ( ) ; <nl> + private Set < RealmConfiguration > configurations = Collections . newSetFromMap ( map ) ; <nl> + <nl> + @ Override <nl> + protected void before ( ) throws Throwable { <nl> + super . before ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void after ( ) { <nl> + try { <nl> + for ( RealmConfiguration configuration : configurations ) { <nl> + Realm . deleteRealm ( configuration ) ; <nl> + } <nl> + } finally { <nl> + / / This will delete the temp folder . <nl> + super . after ( ) ; <nl> + } <nl> + } <nl> + <nl> + public RealmConfiguration createConfiguration ( ) { <nl> + RealmConfiguration configuration = new RealmConfiguration . Builder ( getRoot ( ) ) <nl> + . build ( ) ; <nl> + <nl> + configurations . add ( configuration ) ; <nl> + return configuration ; <nl> + } <nl> + <nl> + public RealmConfiguration createConfiguration ( String name ) { <nl> + RealmConfiguration configuration = new RealmConfiguration . Builder ( getRoot ( ) ) <nl> + . name ( name ) <nl> + . build ( ) ; <nl> + <nl> + configurations . add ( configuration ) ; <nl> + return configuration ; <nl> + } <nl> + <nl> + public RealmConfiguration createConfiguration ( String name , byte [ ] key ) { <nl> + RealmConfiguration configuration = new RealmConfiguration . Builder ( getRoot ( ) ) <nl> + . name ( name ) <nl> + . encryptionKey ( key ) <nl> + . build ( ) ; <nl> + <nl> + configurations . add ( configuration ) ; <nl> + return configuration ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> index 1079902 . . 106aa84 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> @ @ - 18 , 8 + 18 , 24 @ @ package io . realm ; <nl> <nl> import android . test . AndroidTestCase ; <nl> <nl> + import java . io . File ; <nl> + import java . util . Random ; <nl> + <nl> + import io . realm . entities . AllTypesPrimaryKey ; <nl> + import io . realm . entities . Dog ; <nl> + import io . realm . entities . Owner ; <nl> + import io . realm . exceptions . RealmMigrationNeededException ; <nl> + <nl> public class RealmConfigurationTest extends AndroidTestCase { <nl> <nl> + RealmConfiguration defaultConfig ; <nl> + @ Override <nl> + protected void setUp ( ) throws Exception { <nl> + super . setUp ( ) ; <nl> + defaultConfig = new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ; <nl> + Realm . deleteRealmFile ( defaultConfig ) ; <nl> + } <nl> + <nl> public void testSetNullDefaultConfigurationThrows ( ) { <nl> try { <nl> Realm . setDefaultConfiguration ( null ) ; <nl> @ @ - 28 , 4 + 44 , 198 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> } <nl> fail ( ) ; <nl> } <nl> + <nl> + public void testGetNullDefaultInstanceThrows ( ) { <nl> + try { <nl> + Realm . getDefaultInstance ( ) ; <nl> + } catch ( NullPointerException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testGetNullInstance ( ) { <nl> + try { <nl> + Realm . getInstance ( ( RealmConfiguration ) null ) ; <nl> + } catch ( NullPointerException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNullDirThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( ( File ) null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNullNameThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . name ( null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testEmptyNameThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . name ( " " ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNullKeyThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testWrongKeyLengthThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( new byte [ 63 ] ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNegativeVersionThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . version ( - 1 ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testVersionLessThanDiscVersionThrows ( ) { <nl> + Realm . deleteRealmFile ( new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ) ; <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 42 ) . create ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + try { <nl> + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 1 ) . create ( ) ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testVersionEqualWhenSchemaChangesThrows ( ) { <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . version ( 42 ) <nl> + . schema ( Dog . class ) <nl> + . create ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + try { <nl> + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . version ( 42 ) <nl> + . schema ( AllTypesPrimaryKey . class ) <nl> + . create ( ) ) ; <nl> + } catch ( RealmMigrationNeededException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testCustomSchemaAlsoIncludeLinkedClasses ( ) { <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . schema ( Dog . class ) <nl> + . create ( ) ) ; <nl> + assertEquals ( 3 , realm . getTable ( Owner . class ) . getColumnCount ( ) ) ; <nl> + assertEquals ( 7 , realm . getTable ( Dog . class ) . getColumnCount ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testNullMigrationThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . migration ( null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testSetDefaultConfiguration ( ) { <nl> + Realm . setDefaultConfiguration ( defaultConfig ) ; <nl> + Realm realm = Realm . getDefaultInstance ( ) ; <nl> + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testGetInstance ( ) { <nl> + Realm realm = Realm . getInstance ( defaultConfig ) ; <nl> + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testStandardSetup ( ) { <nl> + byte [ ] key = new byte [ 64 ] ; <nl> + new Random ( ) . nextBytes ( key ) ; <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . name ( " foo . realm " ) <nl> + . encryptionKey ( key ) <nl> + . version ( 42 ) <nl> + . migration ( new RealmMigration ( ) { <nl> + @ Override <nl> + public long execute ( Realm realm , long version ) { <nl> + return 0 ; / / no - op <nl> + } <nl> + } ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . deleteRealmIfMigrationNeeded ( ) <nl> + . create ( ) ) ; <nl> + assertTrue ( realm . getPath ( ) . endsWith ( " foo . realm " ) ) ; <nl> + assertEquals ( 42 , realm . getVersion ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testDeleteRealmIfMigration ( ) { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . schema ( Dog . class ) <nl> + . version ( 0 ) <nl> + . create ( ) ; <nl> + Realm . deleteRealmFile ( config ) ; <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . copyToRealm ( new Dog ( " Foo " ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . schema ( Owner . class , Dog . class ) <nl> + . version ( 1 ) <nl> + . deleteRealmIfMigrationNeeded ( ) <nl> + . create ( ) ) ; <nl> + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testDeleteRealmBeforeOpening ( ) { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) . deleteRealmBeforeOpening ( ) . create ( ) ; <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . copyToRealm ( new Dog ( " Foo " ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + realm = Realm . getInstance ( config ) ; <nl> + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 18376c2 . . 59a4ad3 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 232 , 7 + 232 , 9 @ @ public final class Realm implements Closeable { <nl> sharedGroup . close ( ) ; <nl> sharedGroup = null ; <nl> AtomicInteger counter = openRealms . get ( id ) ; <nl> - counter . decrementAndGet ( ) ; <nl> + if ( counter . decrementAndGet ( ) = = 0 ) { <nl> + openRealms . remove ( id ) ; <nl> + } ; <nl> } <nl> <nl> int refCount = references - 1 ; <nl> @ @ - 399 , 11 + 401 , 11 @ @ public final class Realm implements Closeable { <nl> @ Deprecated <nl> @ SuppressWarnings ( " UnusedDeclaration " ) <nl> public static Realm getInstance ( Context context , String fileName , byte [ ] key ) { <nl> - return create ( new RealmConfiguration . Builder ( context ) <nl> - . name ( fileName ) <nl> - . encryptionKey ( key ) <nl> - . create ( ) <nl> - ) ; <nl> + RealmConfiguration . Builder builder = new RealmConfiguration . Builder ( context ) . name ( fileName ) ; <nl> + if ( key ! = null ) { <nl> + builder . encryptionKey ( key ) ; <nl> + } <nl> + return create ( builder . create ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 571 , 7 + 573 , 7 @ @ public final class Realm implements Closeable { <nl> if ( references = = 0 ) { <nl> AtomicInteger counter = openRealms . get ( id ) ; <nl> if ( counter = = null ) { <nl> - if ( config . isDeleteRealmBeforeOpening ( ) ) { <nl> + if ( config . shouldDeleteRealmBeforeOpening ( ) ) { <nl> deleteRealmFile ( config ) ; <nl> } <nl> openRealms . put ( id , new AtomicInteger ( 1 ) ) ; <nl> @ @ - 598 , 6 + 600 , 18 @ @ public final class Realm implements Closeable { <nl> realmsCache . set ( realms ) ; <nl> localRefCount . put ( id , references + 1 ) ; <nl> <nl> + / / Check versions of Realm <nl> + long currentVersion = realm . getVersion ( ) ; <nl> + long requiredVersion = config . getVersion ( ) ; <nl> + if ( currentVersion ! = UNVERSIONED & & currentVersion < requiredVersion ) { <nl> + realm . close ( ) ; <nl> + throw new RealmMigrationNeededException ( String . format ( " Realm on disc need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; <nl> + } <nl> + if ( currentVersion ! = UNVERSIONED & & requiredVersion < currentVersion ) { <nl> + realm . close ( ) ; <nl> + throw new IllegalArgumentException ( String . format ( " Realm on disc is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; <nl> + } <nl> + <nl> if ( validateSchema ) { <nl> try { <nl> initializeRealm ( realm , config ) ; <nl> @ @ - 647 , 14 + 661 , 15 @ @ public final class Realm implements Closeable { <nl> try { <nl> realm . beginTransaction ( ) ; <nl> if ( version = = UNVERSIONED ) { <nl> - realm . setVersion ( 0 ) ; <nl> commitNeeded = true ; <nl> + realm . setVersion ( config . getVersion ( ) ) ; <nl> } <nl> - <nl> for ( String className : proxyClasses ) { <nl> String [ ] splitted = className . split ( " \ \ . " ) ; <nl> String modelClassName = splitted [ splitted . length - 1 ] ; <nl> String generatedClassName = getProxyClassName ( modelClassName ) ; <nl> + <nl> + / / Verify that there is a proxy class for each supported model class <nl> Class < ? > generatedClass ; <nl> try { <nl> generatedClass = Class . forName ( generatedClassName ) ; <nl> @ @ - 727 , 7 + 742 , 6 @ @ public final class Realm implements Closeable { <nl> } <nl> } finally { <nl> if ( commitNeeded ) { <nl> - realm . setVersion ( config . getVersion ( ) ) ; <nl> realm . commitTransaction ( ) ; <nl> } else { <nl> realm . cancelTransaction ( ) ; <nl> @ @ - 1391 , 7 + 1405 , 7 @ @ public final class Realm implements Closeable { <nl> public < E extends RealmObject > RealmResults < E > allObjectsSorted ( Class < E > clazz , String fieldName1 , <nl> boolean sortAscending1 , String fieldName2 , <nl> boolean sortAscending2 ) { <nl> - return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , <nl> + return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , <nl> sortAscending2 } ) ; <nl> } <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> index 5c9d235 . . 1417c13 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class RealmConfiguration { <nl> return deleteRealmIfMigrationNeeded ; <nl> } <nl> <nl> - public boolean isDeleteRealmBeforeOpening ( ) { <nl> + public boolean shouldDeleteRealmBeforeOpening ( ) { <nl> return deleteRealmBeforeOpening ; <nl> } <nl> <nl> @ @ - 133 , 7 + 133 , 7 @ @ public class RealmConfiguration { <nl> * / <nl> public Builder ( Context context ) { <nl> if ( context = = null ) { <nl> - throw new NullPointerException ( " A non - null Context must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null Context must be provided " ) ; <nl> } <nl> this . folder = context . getFilesDir ( ) ; <nl> } <nl> @ @ - 155 , 7 + 155 , 7 @ @ public class RealmConfiguration { <nl> * / <nl> public Builder encryptionKey ( byte [ ] key ) { <nl> if ( key = = null ) { <nl> - throw new NullPointerException ( " A non - null key must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null key must be provided " ) ; <nl> } <nl> if ( key . length ! = 64 ) { <nl> throw new IllegalArgumentException ( " The provided key must be 64 bytes . Yours was : " + key . length ) ; <nl> @ @ - 177 , 7 + 177 , 7 @ @ public class RealmConfiguration { <nl> * <nl> * @ see # migration ( RealmMigration ) <nl> * / <nl> - public Builder setVersion ( int version ) { <nl> + public Builder version ( int version ) { <nl> if ( version < 0 ) { <nl> throw new IllegalArgumentException ( " Realm version numbers must be 0 ( zero ) or higher . Yours was : " + version ) ; <nl> } <nl> @ @ - 192 , 7 + 192 , 7 @ @ public class RealmConfiguration { <nl> * / <nl> public Builder migration ( RealmMigration migration ) { <nl> if ( migration = = null ) { <nl> - throw new NullPointerException ( " A non - null migration must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null migration must be provided " ) ; <nl> } <nl> this . migration = migration ; <nl> return this ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 index 29de257 . . 4d824a6 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 77 , 6 + 77 , 7 @ @ import io . realm . exceptions . RealmException ; 
 import io . realm . exceptions . RealmIOException ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . log . RealmLog ; 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 
 import static io . realm . internal . test . ExtraTests . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 @ @ - 91 , 6 + 92 , 8 @ @ import static org . junit . Assert . fail ; 
 public class RealmTest { 
 @ Rule 
 public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule ( ) ; 
 + @ Rule 
 + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 private Context context ; 
 
 protected final static int TEST _ DATA _ SIZE = 10 ; 
 @ @ - 115 , 8 + 118 , 7 @ @ public class RealmTest { 
 / / for your test to run with AndroidJUnitRunner . 
 context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 
 - testConfig = TestHelper . createConfiguration ( context ) ; 
 - Realm . deleteRealm ( testConfig ) ; 
 + testConfig = configFactory . createConfiguration ( ) ; 
 testRealm = Realm . getInstance ( testConfig ) ; 
 } 
 
 @ @ - 175 , 11 + 177 , 9 @ @ public class RealmTest { 
 @ Test 
 public void testGetInstanceFileNoWritePermissionThrows ( ) throws IOException { 
 String REALM _ FILE = " readonly . realm " ; 
 - File folder = context . getFilesDir ( ) ; 
 + File folder = configFactory . getRoot ( ) ; 
 File realmFile = new File ( folder , REALM _ FILE ) ; 
 - if ( realmFile . exists ( ) ) { 
 - realmFile . delete ( ) ; / / Reset old test data 
 - } 
 + assertFalse ( realmFile . exists ( ) ) ; 
 
 assertTrue ( realmFile . createNewFile ( ) ) ; 
 assertTrue ( realmFile . setWritable ( false ) ) ; 
 @ @ - 211 , 7 + 211 , 7 @ @ public class RealmTest { 
 testRealm . close ( ) ; / / Clear handler created by testRealm in setUp ( ) 
 assertEquals ( 0 , Realm . getHandlers ( ) . size ( ) ) ; 
 final String REALM _ NAME = " test - internalhandlers " ; 
 - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , REALM _ NAME ) ; 
 + RealmConfiguration realmConfig = configFactory . createConfiguration ( REALM _ NAME ) ; 
 Realm . deleteRealm ( realmConfig ) ; 
 
 / / Open and close first instance of a Realm 
 @ @ - 887 , 8 + 887 , 7 @ @ public class RealmTest { 
 } 
 
 private void createAndTestFilename ( String language , String fileName ) { 
 - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , fileName ) ; 
 - Realm . deleteRealm ( realmConfig ) ; 
 + RealmConfiguration realmConfig = configFactory . createConfiguration ( fileName ) ; 
 Realm realm1 = Realm . getInstance ( realmConfig ) ; 
 realm1 . beginTransaction ( ) ; 
 Dog dog1 = realm1 . createObject ( Dog . class ) ; 
 @ @ - 896 , 7 + 895 , 7 @ @ public class RealmTest { 
 realm1 . commitTransaction ( ) ; 
 realm1 . close ( ) ; 
 
 - File file = new File ( context . getFilesDir ( ) , fileName ) ; 
 + File file = new File ( realmConfig . getPath ( ) ) ; 
 assertTrue ( language , file . exists ( ) ) ; 
 
 Realm realm2 = Realm . getInstance ( realmConfig ) ; 
 @ @ - 1015 , 14 + 1014 , 14 @ @ public class RealmTest { 
 } 
 
 / / Make sure the reference counter is per realm file 
 - RealmConfiguration anotherConfig = TestHelper . createConfiguration ( context , " anotherRealm . realm " ) ; 
 + RealmConfiguration anotherConfig = configFactory . createConfiguration ( " anotherRealm . realm " ) ; 
 Realm . deleteRealm ( anotherConfig ) ; 
 Realm otherRealm = Realm . getInstance ( anotherConfig ) ; 
 
 / / Raise the reference 
 Realm realm = null ; 
 try { 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( configFactory . createConfiguration ( ) ) ; 
 } finally { 
 if ( realm ! = null ) realm . close ( ) ; 
 } 
 @ @ - 1062 , 7 + 1061 , 7 @ @ public class RealmTest { 
 public void testReferenceCountingDoubleClose ( ) { 
 testRealm . close ( ) ; 
 testRealm . close ( ) ; / / Count down once too many . Counter is now potentially negative 
 - testRealm = Realm . getInstance ( context ) ; 
 + testRealm = Realm . getInstance ( configFactory . createConfiguration ( ) ) ; 
 testRealm . beginTransaction ( ) ; 
 AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; 
 RealmResults < AllTypes > queryResult = testRealm . allObjects ( AllTypes . class ) ; 
 @ @ - 1078 , 8 + 1077 , 8 @ @ public class RealmTest { 
 
 @ Test 
 public void testWriteCopyTo ( ) throws IOException { 
 - RealmConfiguration configA = TestHelper . createConfiguration ( context , " file1 . realm " ) ; 
 - RealmConfiguration configB = TestHelper . createConfiguration ( context , " file2 . realm " ) ; 
 + RealmConfiguration configA = configFactory . createConfiguration ( " file1 . realm " ) ; 
 + RealmConfiguration configB = configFactory . createConfiguration ( " file2 . realm " ) ; 
 Realm . deleteRealm ( configA ) ; 
 Realm . deleteRealm ( configB ) ; 
 
 @ @ - 1091 , 7 + 1090 , 7 @ @ public class RealmTest { 
 allTypes . setColumnString ( " Hello World " ) ; 
 realm1 . commitTransaction ( ) ; 
 
 - realm1 . writeCopyTo ( new File ( context . getFilesDir ( ) , " file2 . realm " ) ) ; 
 + realm1 . writeCopyTo ( new File ( configB . getPath ( ) ) ) ; 
 } finally { 
 if ( realm1 ! = null ) { 
 realm1 . close ( ) ; 
 @ @ - 1099 , 8 + 1098 , 8 @ @ public class RealmTest { 
 } 
 
 / / Copy is compacted i . e . smaller than original 
 - File file1 = new File ( context . getFilesDir ( ) , " file1 . realm " ) ; 
 - File file2 = new File ( context . getFilesDir ( ) , " file2 . realm " ) ; 
 + File file1 = new File ( configA . getPath ( ) ) ; 
 + File file2 = new File ( configB . getPath ( ) ) ; 
 assertTrue ( file1 . length ( ) > = file2 . length ( ) ) ; 
 
 Realm realm2 = null ; 
 @ @ - 1129 , 16 + 1128 , 12 @ @ public class RealmTest { 
 
 @ Test 
 public void testCompactRealmFileFailsIfOpen ( ) throws IOException { 
 - assertFalse ( Realm . compactRealm ( TestHelper . createConfiguration ( context ) ) ) ; 
 + assertFalse ( Realm . compactRealm ( testRealm . getConfiguration ( ) ) ) ; 
 } 
 
 @ Test 
 public void testCompactEncryptedEmptyRealmFile ( ) { 
 - RealmConfiguration realmConfig = new RealmConfiguration . Builder ( context ) 
 - . name ( " enc . realm " ) 
 - . encryptionKey ( TestHelper . getRandomKey ( ) ) 
 - . build ( ) ; 
 - Realm . deleteRealm ( realmConfig ) ; 
 + RealmConfiguration realmConfig = configFactory . createConfiguration ( " enc . realm " , TestHelper . getRandomKey ( ) ) ; 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . close ( ) ; 
 / / TODO : remove try / catch block when compacting encrypted Realms is supported 
 @ @ - 1151 , 11 + 1146 , 7 @ @ public class RealmTest { 
 
 @ Test 
 public void testCompactEncryptedPopulatedRealmFile ( ) { 
 - RealmConfiguration realmConfig = new RealmConfiguration . Builder ( context ) 
 - . name ( " enc . realm " ) 
 - . encryptionKey ( TestHelper . getRandomKey ( ) ) 
 - . build ( ) ; 
 - Realm . deleteRealm ( realmConfig ) ; 
 + RealmConfiguration realmConfig = configFactory . createConfiguration ( " enc . realm " , TestHelper . getRandomKey ( ) ) ; 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 
 populateTestRealm ( realm , 100 ) ; 
 @ @ - 1171 , 27 + 1162 , 25 @ @ public class RealmTest { 
 @ Test 
 public void testCompactEmptyRealmFile ( ) throws IOException { 
 final String REALM _ NAME = " test . realm " ; 
 - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , REALM _ NAME ) ; 
 - Realm . deleteRealm ( realmConfig ) ; 
 + RealmConfiguration realmConfig = configFactory . createConfiguration ( REALM _ NAME ) ; 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . close ( ) ; 
 - long before = new File ( context . getFilesDir ( ) , REALM _ NAME ) . length ( ) ; 
 + long before = new File ( realmConfig . getPath ( ) ) . length ( ) ; 
 assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 - long after = new File ( context . getFilesDir ( ) , REALM _ NAME ) . length ( ) ; 
 + long after = new File ( realmConfig . getPath ( ) ) . length ( ) ; 
 assertTrue ( before > = after ) ; 
 } 
 
 @ Test 
 public void testCompactPopulateRealmFile ( ) throws IOException { 
 final String REALM _ NAME = " test . realm " ; 
 - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , REALM _ NAME ) ; 
 - Realm . deleteRealm ( realmConfig ) ; 
 + RealmConfiguration realmConfig = configFactory . createConfiguration ( REALM _ NAME ) ; 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 populateTestRealm ( realm , 100 ) ; 
 realm . close ( ) ; 
 - long before = new File ( context . getFilesDir ( ) , REALM _ NAME ) . length ( ) ; 
 + long before = new File ( realmConfig . getPath ( ) ) . length ( ) ; 
 assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 - long after = new File ( context . getFilesDir ( ) , REALM _ NAME ) . length ( ) ; 
 + long after = new File ( realmConfig . getPath ( ) ) . length ( ) ; 
 assertTrue ( before > = after ) ; 
 } 
 
 @ @ - 1228 , 8 + 1217 , 7 @ @ public class RealmTest { 
 allTypes . setColumnString ( " Test " ) ; 
 testRealm . commitTransaction ( ) ; 
 
 - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , " other - realm " ) ; 
 - Realm . deleteRealm ( realmConfig ) ; 
 + RealmConfiguration realmConfig = configFactory . createConfiguration ( " other - realm " ) ; 
 Realm otherRealm = Realm . getInstance ( realmConfig ) ; 
 otherRealm . beginTransaction ( ) ; 
 AllTypes copiedAllTypes = otherRealm . copyToRealm ( allTypes ) ; 
 @ @ - 1652 , 21 + 1640 , 12 @ @ public class RealmTest { 
 assertTrue ( key1 ! = key2 ) ; 
 
 final String ENCRYPTED _ REALM = " differentKeys . realm " ; 
 - Realm . deleteRealm ( TestHelper . createConfiguration ( context , ENCRYPTED _ REALM ) ) ; 
 Realm realm1 = null ; 
 Realm realm2 = null ; 
 try { 
 - realm1 = Realm . getInstance ( new RealmConfiguration . Builder ( context ) 
 - . name ( ENCRYPTED _ REALM ) 
 - . encryptionKey ( key1 ) 
 - . build ( ) 
 - ) ; 
 + realm1 = Realm . getInstance ( configFactory . createConfiguration ( ENCRYPTED _ REALM , key1 ) ) ; 
 try { 
 - realm2 = Realm . getInstance ( new RealmConfiguration . Builder ( context ) 
 - . name ( ENCRYPTED _ REALM ) 
 - . encryptionKey ( key2 ) 
 - . build ( ) 
 - ) ; 
 + realm2 = Realm . getInstance ( configFactory . createConfiguration ( ENCRYPTED _ REALM , key2 ) ) ; 
 } catch ( Exception e ) { 
 fail ( ) ; 
 } finally { 
 @ @ - 1692 , 29 + 1671 , 16 @ @ public class RealmTest { 
 final String RE _ ENCRYPTED _ REALM _ FILE _ NAME = " reEncryptedTestRealm . realm " ; 
 final String DECRYPTED _ REALM _ FILE _ NAME = " decryptedTestRealm . realm " ; 
 
 - RealmConfiguration encryptedRealmConfig = new RealmConfiguration . Builder ( context ) 
 - . name ( ENCRYPTED _ REALM _ FILE _ NAME ) 
 - . encryptionKey ( TestHelper . getRandomKey ( ) ) 
 - . build ( ) ; 
 - 
 - RealmConfiguration reEncryptedRealmConfig = new RealmConfiguration . Builder ( context ) 
 - . name ( RE _ ENCRYPTED _ REALM _ FILE _ NAME ) 
 - . encryptionKey ( TestHelper . getRandomKey ( ) ) 
 - . build ( ) ; 
 + RealmConfiguration encryptedRealmConfig = configFactory . createConfiguration ( ENCRYPTED _ REALM _ FILE _ NAME , 
 + TestHelper . getRandomKey ( ) ) ; 
 
 - RealmConfiguration decryptedRealmConfig = new RealmConfiguration . Builder ( context ) 
 - . name ( DECRYPTED _ REALM _ FILE _ NAME ) 
 - . build ( ) ; 
 + RealmConfiguration reEncryptedRealmConfig = configFactory . createConfiguration ( RE _ ENCRYPTED _ REALM _ FILE _ NAME , 
 + TestHelper . getRandomKey ( ) ) ; 
 
 - / / Delete old test Realms if present 
 - for ( RealmConfiguration realmConfig : Arrays . asList ( encryptedRealmConfig , reEncryptedRealmConfig , decryptedRealmConfig ) ) { 
 - if ( ! Realm . deleteRealm ( realmConfig ) ) { 
 - fail ( ) ; 
 - } 
 - } 
 + RealmConfiguration decryptedRealmConfig = configFactory . createConfiguration ( DECRYPTED _ REALM _ FILE _ NAME ) ; 
 
 / / Write encrypted copy from a unencrypted Realm 
 - File destination = new File ( context . getFilesDir ( ) , ENCRYPTED _ REALM _ FILE _ NAME ) ; 
 + File destination = new File ( encryptedRealmConfig . getPath ( ) ) ; 
 try { 
 testRealm . writeEncryptedCopyTo ( destination , encryptedRealmConfig . getEncryptionKey ( ) ) ; 
 } catch ( Exception e ) { 
 @ @ - 1784 , 8 + 1750 , 8 @ @ public class RealmTest { 
 public void testOpenRealmFileDeletionShouldThrow ( ) { 
 final String OTHER _ REALM _ NAME = " yetAnotherRealm . realm " ; 
 
 - RealmConfiguration configA = TestHelper . createConfiguration ( context ) ; 
 - RealmConfiguration configB = TestHelper . createConfiguration ( context , OTHER _ REALM _ NAME ) ; 
 + RealmConfiguration configA = configFactory . createConfiguration ( ) ; 
 + RealmConfiguration configB = configFactory . createConfiguration ( OTHER _ REALM _ NAME ) ; 
 
 / / This instance is already cached because of the setUp ( ) method so this deletion should throw 
 try { 
 @ @ - 2087 , 8 + 2053 , 7 @ @ public class RealmTest { 
 / / even if we skip initialization & validation 
 @ Test 
 public void testColumnIndicesIsPopulatedWhenSkippingInitialization ( ) throws Throwable { 
 - final RealmConfiguration realmConfiguration = TestHelper . createConfiguration ( context , " columnIndices " ) ; 
 - Realm . deleteRealm ( realmConfiguration ) ; 
 + final RealmConfiguration realmConfiguration = configFactory . createConfiguration ( " columnIndices " ) ; 
 final Exception threadError [ ] = new Exception [ 1 ] ; 
 final CountDownLatch bgRealmOpened = new CountDownLatch ( 1 ) ; 
 final CountDownLatch mainThreadRealmDone = new CountDownLatch ( 1 ) ; 
 @ @ - 2426 , 8 + 2391 , 7 @ @ public class RealmTest { 
 
 @ Test 
 public void testIsEmpty ( ) { 
 - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , " empty _ test . realm " ) ; 
 - Realm . deleteRealm ( realmConfig ) ; 
 + RealmConfiguration realmConfig = configFactory . createConfiguration ( " empty _ test . realm " ) ; 
 Realm emptyRealm = Realm . getInstance ( realmConfig ) ; 
 
 assertTrue ( emptyRealm . isEmpty ( ) ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 index dcb1434 . . cff18d7 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 @ @ - 45 , 6 + 45 , 7 @ @ import io . realm . entities . NullTypes ; 
 import io . realm . entities . StringOnly ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . log . Logger ; 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 
 import static junit . framework . Assert . fail ; 
 import static org . junit . Assert . assertEquals ; 
 @ @ - 355 , 22 + 356 , 42 @ @ public class TestHelper { 
 } 
 } 
 
 + / * * 
 + * @ deprecated Use { @ link TestRealmConfigurationFactory # createConfiguration ( ) } instead . 
 + * / 
 + @ Deprecated 
 public static RealmConfiguration createConfiguration ( Context context ) { 
 return createConfiguration ( context , Realm . DEFAULT _ REALM _ NAME ) ; 
 } 
 
 + / * * 
 + * @ deprecated Use { @ link TestRealmConfigurationFactory # createConfiguration ( String ) } instead . 
 + * / 
 + @ Deprecated 
 public static RealmConfiguration createConfiguration ( Context context , String name ) { 
 return createConfiguration ( context . getFilesDir ( ) , name ) ; 
 } 
 
 + / * * 
 + * @ deprecated Use { @ link TestRealmConfigurationFactory # createConfiguration ( String ) } instead . 
 + * / 
 + @ Deprecated 
 public static RealmConfiguration createConfiguration ( File folder , String name ) { 
 return createConfiguration ( folder , name , null ) ; 
 } 
 
 + / * * 
 + * @ deprecated Use { @ link TestRealmConfigurationFactory # createConfiguration ( String , byte [ ] ) } instead . 
 + * / 
 + @ Deprecated 
 public static RealmConfiguration createConfiguration ( Context context , String name , byte [ ] key ) { 
 return createConfiguration ( context . getFilesDir ( ) , name , key ) ; 
 } 
 
 + / * * 
 + * @ deprecated Use { @ link TestRealmConfigurationFactory # createConfiguration ( String , byte [ ] ) } instead . 
 + * / 
 + @ Deprecated 
 public static RealmConfiguration createConfiguration ( File dir , String name , byte [ ] key ) { 
 RealmConfiguration . Builder config = new RealmConfiguration . Builder ( dir ) . name ( name ) ; 
 if ( key ! = null ) { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 new file mode 100644 
 index 0000000 . . d87d16a 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 @ @ - 0 , 0 + 1 , 82 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . rule ; 
 + 
 + import org . junit . rules . TemporaryFolder ; 
 + 
 + import java . util . Collections ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 + 
 + import io . realm . Realm ; 
 + import io . realm . RealmConfiguration ; 
 + 
 + / * * 
 + * Rule that creates the { @ link RealmConfiguration } in a temporary directory and deletes the Realm created with that 
 + * configuration once the test finishes . Be sure to close all Realm instances before finishing the test . Otherwise 
 + * { @ link Realm # deleteRealm ( RealmConfiguration ) } will throw an exception in the { @ link # after ( ) } method . 
 + * The temp directory will be deleted regardless if the { @ link Realm # deleteRealm ( RealmConfiguration ) } fails or not . 
 + * / 
 + public class TestRealmConfigurationFactory extends TemporaryFolder { 
 + private Map < RealmConfiguration , Boolean > map = new ConcurrentHashMap < RealmConfiguration , Boolean > ( ) ; 
 + private Set < RealmConfiguration > configurations = Collections . newSetFromMap ( map ) ; 
 + 
 + @ Override 
 + protected void before ( ) throws Throwable { 
 + super . before ( ) ; 
 + } 
 + 
 + @ Override 
 + protected void after ( ) { 
 + try { 
 + for ( RealmConfiguration configuration : configurations ) { 
 + Realm . deleteRealm ( configuration ) ; 
 + } 
 + } finally { 
 + / / This will delete the temp folder . 
 + super . after ( ) ; 
 + } 
 + } 
 + 
 + public RealmConfiguration createConfiguration ( ) { 
 + RealmConfiguration configuration = new RealmConfiguration . Builder ( getRoot ( ) ) 
 + . build ( ) ; 
 + 
 + configurations . add ( configuration ) ; 
 + return configuration ; 
 + } 
 + 
 + public RealmConfiguration createConfiguration ( String name ) { 
 + RealmConfiguration configuration = new RealmConfiguration . Builder ( getRoot ( ) ) 
 + . name ( name ) 
 + . build ( ) ; 
 + 
 + configurations . add ( configuration ) ; 
 + return configuration ; 
 + } 
 + 
 + public RealmConfiguration createConfiguration ( String name , byte [ ] key ) { 
 + RealmConfiguration configuration = new RealmConfiguration . Builder ( getRoot ( ) ) 
 + . name ( name ) 
 + . encryptionKey ( key ) 
 + . build ( ) ; 
 + 
 + configurations . add ( configuration ) ; 
 + return configuration ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 index 1079902 . . 106aa84 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 @ @ - 18 , 8 + 18 , 24 @ @ package io . realm ; 
 
 import android . test . AndroidTestCase ; 
 
 + import java . io . File ; 
 + import java . util . Random ; 
 + 
 + import io . realm . entities . AllTypesPrimaryKey ; 
 + import io . realm . entities . Dog ; 
 + import io . realm . entities . Owner ; 
 + import io . realm . exceptions . RealmMigrationNeededException ; 
 + 
 public class RealmConfigurationTest extends AndroidTestCase { 
 
 + RealmConfiguration defaultConfig ; 
 + @ Override 
 + protected void setUp ( ) throws Exception { 
 + super . setUp ( ) ; 
 + defaultConfig = new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ; 
 + Realm . deleteRealmFile ( defaultConfig ) ; 
 + } 
 + 
 public void testSetNullDefaultConfigurationThrows ( ) { 
 try { 
 Realm . setDefaultConfiguration ( null ) ; 
 @ @ - 28 , 4 + 44 , 198 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 } 
 fail ( ) ; 
 } 
 + 
 + public void testGetNullDefaultInstanceThrows ( ) { 
 + try { 
 + Realm . getDefaultInstance ( ) ; 
 + } catch ( NullPointerException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testGetNullInstance ( ) { 
 + try { 
 + Realm . getInstance ( ( RealmConfiguration ) null ) ; 
 + } catch ( NullPointerException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNullDirThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( ( File ) null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNullNameThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . name ( null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testEmptyNameThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . name ( " " ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNullKeyThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testWrongKeyLengthThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( new byte [ 63 ] ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNegativeVersionThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . version ( - 1 ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testVersionLessThanDiscVersionThrows ( ) { 
 + Realm . deleteRealmFile ( new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ) ; 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 42 ) . create ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + try { 
 + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 1 ) . create ( ) ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testVersionEqualWhenSchemaChangesThrows ( ) { 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . deleteRealmBeforeOpening ( ) 
 + . version ( 42 ) 
 + . schema ( Dog . class ) 
 + . create ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + try { 
 + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . version ( 42 ) 
 + . schema ( AllTypesPrimaryKey . class ) 
 + . create ( ) ) ; 
 + } catch ( RealmMigrationNeededException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testCustomSchemaAlsoIncludeLinkedClasses ( ) { 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . deleteRealmBeforeOpening ( ) 
 + . schema ( Dog . class ) 
 + . create ( ) ) ; 
 + assertEquals ( 3 , realm . getTable ( Owner . class ) . getColumnCount ( ) ) ; 
 + assertEquals ( 7 , realm . getTable ( Dog . class ) . getColumnCount ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testNullMigrationThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . migration ( null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testSetDefaultConfiguration ( ) { 
 + Realm . setDefaultConfiguration ( defaultConfig ) ; 
 + Realm realm = Realm . getDefaultInstance ( ) ; 
 + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testGetInstance ( ) { 
 + Realm realm = Realm . getInstance ( defaultConfig ) ; 
 + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testStandardSetup ( ) { 
 + byte [ ] key = new byte [ 64 ] ; 
 + new Random ( ) . nextBytes ( key ) ; 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . name ( " foo . realm " ) 
 + . encryptionKey ( key ) 
 + . version ( 42 ) 
 + . migration ( new RealmMigration ( ) { 
 + @ Override 
 + public long execute ( Realm realm , long version ) { 
 + return 0 ; / / no - op 
 + } 
 + } ) 
 + . deleteRealmBeforeOpening ( ) 
 + . deleteRealmIfMigrationNeeded ( ) 
 + . create ( ) ) ; 
 + assertTrue ( realm . getPath ( ) . endsWith ( " foo . realm " ) ) ; 
 + assertEquals ( 42 , realm . getVersion ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testDeleteRealmIfMigration ( ) { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) 
 + . deleteRealmBeforeOpening ( ) 
 + . schema ( Dog . class ) 
 + . version ( 0 ) 
 + . create ( ) ; 
 + Realm . deleteRealmFile ( config ) ; 
 + Realm realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . copyToRealm ( new Dog ( " Foo " ) ) ; 
 + realm . commitTransaction ( ) ; 
 + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . schema ( Owner . class , Dog . class ) 
 + . version ( 1 ) 
 + . deleteRealmIfMigrationNeeded ( ) 
 + . create ( ) ) ; 
 + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testDeleteRealmBeforeOpening ( ) { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) . deleteRealmBeforeOpening ( ) . create ( ) ; 
 + Realm realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . copyToRealm ( new Dog ( " Foo " ) ) ; 
 + realm . commitTransaction ( ) ; 
 + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + realm = Realm . getInstance ( config ) ; 
 + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 18376c2 . . 59a4ad3 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 232 , 7 + 232 , 9 @ @ public final class Realm implements Closeable { 
 sharedGroup . close ( ) ; 
 sharedGroup = null ; 
 AtomicInteger counter = openRealms . get ( id ) ; 
 - counter . decrementAndGet ( ) ; 
 + if ( counter . decrementAndGet ( ) = = 0 ) { 
 + openRealms . remove ( id ) ; 
 + } ; 
 } 
 
 int refCount = references - 1 ; 
 @ @ - 399 , 11 + 401 , 11 @ @ public final class Realm implements Closeable { 
 @ Deprecated 
 @ SuppressWarnings ( " UnusedDeclaration " ) 
 public static Realm getInstance ( Context context , String fileName , byte [ ] key ) { 
 - return create ( new RealmConfiguration . Builder ( context ) 
 - . name ( fileName ) 
 - . encryptionKey ( key ) 
 - . create ( ) 
 - ) ; 
 + RealmConfiguration . Builder builder = new RealmConfiguration . Builder ( context ) . name ( fileName ) ; 
 + if ( key ! = null ) { 
 + builder . encryptionKey ( key ) ; 
 + } 
 + return create ( builder . create ( ) ) ; 
 } 
 
 / * * 
 @ @ - 571 , 7 + 573 , 7 @ @ public final class Realm implements Closeable { 
 if ( references = = 0 ) { 
 AtomicInteger counter = openRealms . get ( id ) ; 
 if ( counter = = null ) { 
 - if ( config . isDeleteRealmBeforeOpening ( ) ) { 
 + if ( config . shouldDeleteRealmBeforeOpening ( ) ) { 
 deleteRealmFile ( config ) ; 
 } 
 openRealms . put ( id , new AtomicInteger ( 1 ) ) ; 
 @ @ - 598 , 6 + 600 , 18 @ @ public final class Realm implements Closeable { 
 realmsCache . set ( realms ) ; 
 localRefCount . put ( id , references + 1 ) ; 
 
 + / / Check versions of Realm 
 + long currentVersion = realm . getVersion ( ) ; 
 + long requiredVersion = config . getVersion ( ) ; 
 + if ( currentVersion ! = UNVERSIONED & & currentVersion < requiredVersion ) { 
 + realm . close ( ) ; 
 + throw new RealmMigrationNeededException ( String . format ( " Realm on disc need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; 
 + } 
 + if ( currentVersion ! = UNVERSIONED & & requiredVersion < currentVersion ) { 
 + realm . close ( ) ; 
 + throw new IllegalArgumentException ( String . format ( " Realm on disc is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; 
 + } 
 + 
 if ( validateSchema ) { 
 try { 
 initializeRealm ( realm , config ) ; 
 @ @ - 647 , 14 + 661 , 15 @ @ public final class Realm implements Closeable { 
 try { 
 realm . beginTransaction ( ) ; 
 if ( version = = UNVERSIONED ) { 
 - realm . setVersion ( 0 ) ; 
 commitNeeded = true ; 
 + realm . setVersion ( config . getVersion ( ) ) ; 
 } 
 - 
 for ( String className : proxyClasses ) { 
 String [ ] splitted = className . split ( " \ \ . " ) ; 
 String modelClassName = splitted [ splitted . length - 1 ] ; 
 String generatedClassName = getProxyClassName ( modelClassName ) ; 
 + 
 + / / Verify that there is a proxy class for each supported model class 
 Class < ? > generatedClass ; 
 try { 
 generatedClass = Class . forName ( generatedClassName ) ; 
 @ @ - 727 , 7 + 742 , 6 @ @ public final class Realm implements Closeable { 
 } 
 } finally { 
 if ( commitNeeded ) { 
 - realm . setVersion ( config . getVersion ( ) ) ; 
 realm . commitTransaction ( ) ; 
 } else { 
 realm . cancelTransaction ( ) ; 
 @ @ - 1391 , 7 + 1405 , 7 @ @ public final class Realm implements Closeable { 
 public < E extends RealmObject > RealmResults < E > allObjectsSorted ( Class < E > clazz , String fieldName1 , 
 boolean sortAscending1 , String fieldName2 , 
 boolean sortAscending2 ) { 
 - return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , 
 + return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , 
 sortAscending2 } ) ; 
 } 
 
 diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java 
 index 5c9d235 . . 1417c13 100644 
 - - - a / realm / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class RealmConfiguration { 
 return deleteRealmIfMigrationNeeded ; 
 } 
 
 - public boolean isDeleteRealmBeforeOpening ( ) { 
 + public boolean shouldDeleteRealmBeforeOpening ( ) { 
 return deleteRealmBeforeOpening ; 
 } 
 
 @ @ - 133 , 7 + 133 , 7 @ @ public class RealmConfiguration { 
 * / 
 public Builder ( Context context ) { 
 if ( context = = null ) { 
 - throw new NullPointerException ( " A non - null Context must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null Context must be provided " ) ; 
 } 
 this . folder = context . getFilesDir ( ) ; 
 } 
 @ @ - 155 , 7 + 155 , 7 @ @ public class RealmConfiguration { 
 * / 
 public Builder encryptionKey ( byte [ ] key ) { 
 if ( key = = null ) { 
 - throw new NullPointerException ( " A non - null key must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null key must be provided " ) ; 
 } 
 if ( key . length ! = 64 ) { 
 throw new IllegalArgumentException ( " The provided key must be 64 bytes . Yours was : " + key . length ) ; 
 @ @ - 177 , 7 + 177 , 7 @ @ public class RealmConfiguration { 
 * 
 * @ see # migration ( RealmMigration ) 
 * / 
 - public Builder setVersion ( int version ) { 
 + public Builder version ( int version ) { 
 if ( version < 0 ) { 
 throw new IllegalArgumentException ( " Realm version numbers must be 0 ( zero ) or higher . Yours was : " + version ) ; 
 } 
 @ @ - 192 , 7 + 192 , 7 @ @ public class RealmConfiguration { 
 * / 
 public Builder migration ( RealmMigration migration ) { 
 if ( migration = = null ) { 
 - throw new NullPointerException ( " A non - null migration must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null migration must be provided " ) ; 
 } 
 this . migration = migration ; 
 return this ;
