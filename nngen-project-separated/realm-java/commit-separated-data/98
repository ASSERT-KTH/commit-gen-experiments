BLEU SCORE: 0.0156963464356626

TEST MSG: Fixing Plugin Test
GENERATED MSG: Add unit tests for " realm - android " plugin .

TEST DIFF (one line): diff - - git a / Jenkinsfile b / Jenkinsfile <nl> index 7c8e9a7 . . e2f45c0 100644 <nl> - - - a / Jenkinsfile <nl> + + + b / Jenkinsfile <nl> @ @ - 69 , 6 + 69 , 22 @ @ try { <nl> } <nl> } <nl> <nl> + stage ( ' Gradle plugin tests ' ) { <nl> + try { <nl> + gradle ( ' gradle - plugin ' , ' check ' ) <nl> + } finally { <nl> + storeJunitResults ' gradle - plugin / build / test - results / test / TEST - * . xml ' <nl> + } <nl> + } <nl> + <nl> + stage ( ' Realm Transformer tests ' ) { <nl> + try { <nl> + gradle ( ' realm - transformer ' , ' check ' ) <nl> + } finally { <nl> + storeJunitResults ' realm - transformer / build / test - results / test / TEST - * . xml ' <nl> + } <nl> + } <nl> + <nl> stage ( ' Static code analysis ' ) { <nl> try { <nl> gradle ( ' realm ' , ' findbugs pmd checkstyle ' ) <nl> diff - - git a / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy <nl> index 2f9080e . . e07e0e6 100644 <nl> - - - a / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy <nl> + + + b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy <nl> @ @ - 16 , 6 + 16 , 8 @ @ <nl> <nl> package io . realm . gradle <nl> <nl> + import io . realm . transformer . RealmTransformer <nl> + <nl> import com . android . build . api . transform . Transform <nl> import org . gradle . api . GradleException <nl> import org . gradle . api . Project <nl> @ @ - 30 , 7 + 32 , 6 @ @ import org . junit . Before <nl> import org . junit . Test <nl> <nl> import static org . junit . Assert . assertEquals <nl> - import static org . junit . Assert . assertFalse <nl> import static org . junit . Assert . assertTrue <nl> import static org . junit . Assert . fail <nl> <nl> @ @ - 40 , 13 + 41 , 13 @ @ class PluginTest { <nl> private String currentVersion <nl> <nl> @ Before <nl> - public void setUp ( ) { <nl> + void setUp ( ) { <nl> project = ProjectBuilder . builder ( ) . build ( ) <nl> currentVersion = new File ( " . . / version . txt " ) . text . trim ( ) <nl> } <nl> <nl> @ Test <nl> - public void pluginAddsRightDependencies ( ) { <nl> + void pluginAddsRightDependencies ( ) { <nl> project . buildscript { <nl> repositories { <nl> mavenLocal ( ) <nl> @ @ - 62 , 8 + 63 , 6 @ @ class PluginTest { <nl> project . apply plugin : ' com . android . application ' <nl> project . apply plugin : ' realm - android ' <nl> <nl> - assertTrue ( containsUrl ( project . repositories , ' https : / / jitpack . io ' ) ) <nl> - <nl> assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - android - library ' , currentVersion ) ) <nl> assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - annotations ' , currentVersion ) ) <nl> <nl> @ @ - 71 , 7 + 70 , 7 @ @ class PluginTest { <nl> } <nl> <nl> @ Test <nl> - public void pluginFailsWithoutAndroidPlugin ( ) { <nl> + void pluginFailsWithoutAndroidPlugin ( ) { <nl> project . buildscript { <nl> repositories { <nl> mavenLocal ( ) <nl> @ @ - 107 , 7 + 106 , 7 @ @ class PluginTest { <nl> def configurationContainerField = DefaultDependencyHandler . class . getDeclaredField ( " configurationContainer " ) <nl> configurationContainerField . setAccessible ( true ) <nl> def configurationContainer = configurationContainerField . get ( dependencies ) <nl> - def compileConfiguration = configurationContainer . findByName ( " compile " ) <nl> + def compileConfiguration = configurationContainer . findByName ( " api " ) <nl> <nl> def DependencySet dependencySet = compileConfiguration . getDependencies ( ) <nl> for ( Dependency dependency in dependencySet ) {
NEAREST DIFF (one line): diff - - git a / gradle - plugin / build . gradle b / gradle - plugin / build . gradle <nl> index c21be4b . . d3f9607 100644 <nl> - - - a / gradle - plugin / build . gradle <nl> + + + b / gradle - plugin / build . gradle <nl> @ @ - 32 , 6 + 32 , 8 @ @ dependencies { <nl> testCompile ( ' org . spockframework : spock - core : 1 . 0 - groovy - 2 . 4 ' ) { <nl> exclude module : ' groovy - all ' <nl> } <nl> + testCompile gradleTestKit ( ) <nl> + testCompile ' junit : junit : 4 . 12 ' <nl> } <nl> <nl> / / for Ant filter <nl> diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> index 9490f5b . . 1d92b11 100644 <nl> - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> @ @ - 16 , 7 + 16 , 7 @ @ class Realm implements Plugin < Project > { <nl> def isAndroidApp = project . plugins . withType ( AppPlugin ) <nl> def isAndroidLib = project . plugins . withType ( LibraryPlugin ) <nl> if ( ! isAndroidApp & & ! isAndroidLib ) { <nl> - throw new GradleException ( " ' android ' or ' android - library ' plugin required . " ) <nl> + throw new GradleException ( " ' com . android . application ' or ' com . android . library ' plugin required . " ) <nl> } <nl> <nl> def isKotlinProject = project . plugins . withType ( KotlinAndroidPlugin ) <nl> diff - - git a / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy <nl> new file mode 100644 <nl> index 0000000 . . ea611e0 <nl> - - - / dev / null <nl> + + + b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy <nl> @ @ - 0 , 0 + 1 , 98 @ @ <nl> + package io . realm . gradle <nl> + import org . gradle . api . GradleException <nl> + import org . gradle . api . Project <nl> + import org . gradle . api . artifacts . Dependency <nl> + import org . gradle . api . artifacts . DependencySet <nl> + import org . gradle . api . artifacts . dsl . DependencyHandler <nl> + import org . gradle . api . artifacts . dsl . RepositoryHandler <nl> + import org . gradle . api . internal . artifacts . dsl . dependencies . DefaultDependencyHandler <nl> + import org . gradle . api . internal . plugins . PluginApplicationException <nl> + import org . gradle . testfixtures . ProjectBuilder <nl> + import org . junit . Before <nl> + import org . junit . Test <nl> + <nl> + import static org . junit . Assert . assertEquals <nl> + import static org . junit . Assert . assertTrue <nl> + import static org . junit . Assert . fail <nl> + <nl> + class PluginTest { <nl> + <nl> + private Project project <nl> + private String currentVersion <nl> + <nl> + @ Before <nl> + public void setUp ( ) { <nl> + project = ProjectBuilder . builder ( ) . build ( ) <nl> + currentVersion = new File ( " . . / version . txt " ) . text . trim ( ) <nl> + } <nl> + <nl> + @ Test <nl> + public void testPlugin ( ) { <nl> + project . buildscript { <nl> + repositories { <nl> + mavenLocal ( ) <nl> + jcenter ( ) <nl> + } <nl> + dependencies { <nl> + classpath ' com . android . tools . build : gradle : 1 . 5 . 0 ' <nl> + classpath ' com . jakewharton . sdkmanager : gradle - plugin : 0 . 12 . 0 ' <nl> + classpath " io . realm : realm - gradle - plugin : $ { currentVersion } " <nl> + } <nl> + } <nl> + <nl> + project . apply plugin : ' com . android . application ' <nl> + project . apply plugin : ' realm - android ' <nl> + <nl> + assertTrue ( containsUrl ( project . repositories , ' https : / / jitpack . io ' ) ) <nl> + <nl> + assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - android - library ' ) ) <nl> + assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - annotations ' ) ) <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithoutAndroidPlugin ( ) { <nl> + project . buildscript { <nl> + repositories { <nl> + mavenLocal ( ) <nl> + jcenter ( ) <nl> + } <nl> + dependencies { <nl> + classpath ' com . android . tools . build : gradle : 1 . 5 . 0 ' <nl> + classpath ' com . jakewharton . sdkmanager : gradle - plugin : 0 . 12 . 0 ' <nl> + classpath " io . realm : realm - gradle - plugin : $ { currentVersion } " <nl> + } <nl> + } <nl> + <nl> + try { <nl> + project . apply plugin : ' realm - android ' <nl> + fail ( ) <nl> + } catch ( PluginApplicationException e ) { <nl> + assertEquals ( e . getCause ( ) . class , GradleException . class ) <nl> + assertTrue ( e . getCause ( ) . getMessage ( ) . contains ( " ' com . android . application ' or ' com . android . library ' plugin required . " ) ) <nl> + } <nl> + } <nl> + <nl> + private static boolean containsUrl ( RepositoryHandler repositories , String url ) { <nl> + for ( repo in repositories ) { <nl> + if ( repo . properties . get ( ' url ' ) . toString ( ) = = url ) { <nl> + return true <nl> + } <nl> + } <nl> + return false <nl> + } <nl> + <nl> + private static boolean containsDependency ( DependencyHandler dependencies , String group , String name ) { <nl> + def configurationContainerField = DefaultDependencyHandler . class . getDeclaredField ( " configurationContainer " ) <nl> + configurationContainerField . setAccessible ( true ) <nl> + def configurationContainer = configurationContainerField . get ( dependencies ) <nl> + def compileConfiguration = configurationContainer . findByName ( " compile " ) <nl> + <nl> + def DependencySet dependencySet = compileConfiguration . getDependencies ( ) <nl> + for ( Dependency dependency in dependencySet ) { <nl> + if ( dependency . properties . group = = group & & dependency . properties . name = = name ) { <nl> + return true <nl> + } <nl> + } <nl> + return false <nl> + } <nl> + }

TEST DIFF:
diff - - git a / Jenkinsfile b / Jenkinsfile 
 index 7c8e9a7 . . e2f45c0 100644 
 - - - a / Jenkinsfile 
 + + + b / Jenkinsfile 
 @ @ - 69 , 6 + 69 , 22 @ @ try { 
 } 
 } 
 
 + stage ( ' Gradle plugin tests ' ) { 
 + try { 
 + gradle ( ' gradle - plugin ' , ' check ' ) 
 + } finally { 
 + storeJunitResults ' gradle - plugin / build / test - results / test / TEST - * . xml ' 
 + } 
 + } 
 + 
 + stage ( ' Realm Transformer tests ' ) { 
 + try { 
 + gradle ( ' realm - transformer ' , ' check ' ) 
 + } finally { 
 + storeJunitResults ' realm - transformer / build / test - results / test / TEST - * . xml ' 
 + } 
 + } 
 + 
 stage ( ' Static code analysis ' ) { 
 try { 
 gradle ( ' realm ' , ' findbugs pmd checkstyle ' ) 
 diff - - git a / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy 
 index 2f9080e . . e07e0e6 100644 
 - - - a / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy 
 + + + b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy 
 @ @ - 16 , 6 + 16 , 8 @ @ 
 
 package io . realm . gradle 
 
 + import io . realm . transformer . RealmTransformer 
 + 
 import com . android . build . api . transform . Transform 
 import org . gradle . api . GradleException 
 import org . gradle . api . Project 
 @ @ - 30 , 7 + 32 , 6 @ @ import org . junit . Before 
 import org . junit . Test 
 
 import static org . junit . Assert . assertEquals 
 - import static org . junit . Assert . assertFalse 
 import static org . junit . Assert . assertTrue 
 import static org . junit . Assert . fail 
 
 @ @ - 40 , 13 + 41 , 13 @ @ class PluginTest { 
 private String currentVersion 
 
 @ Before 
 - public void setUp ( ) { 
 + void setUp ( ) { 
 project = ProjectBuilder . builder ( ) . build ( ) 
 currentVersion = new File ( " . . / version . txt " ) . text . trim ( ) 
 } 
 
 @ Test 
 - public void pluginAddsRightDependencies ( ) { 
 + void pluginAddsRightDependencies ( ) { 
 project . buildscript { 
 repositories { 
 mavenLocal ( ) 
 @ @ - 62 , 8 + 63 , 6 @ @ class PluginTest { 
 project . apply plugin : ' com . android . application ' 
 project . apply plugin : ' realm - android ' 
 
 - assertTrue ( containsUrl ( project . repositories , ' https : / / jitpack . io ' ) ) 
 - 
 assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - android - library ' , currentVersion ) ) 
 assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - annotations ' , currentVersion ) ) 
 
 @ @ - 71 , 7 + 70 , 7 @ @ class PluginTest { 
 } 
 
 @ Test 
 - public void pluginFailsWithoutAndroidPlugin ( ) { 
 + void pluginFailsWithoutAndroidPlugin ( ) { 
 project . buildscript { 
 repositories { 
 mavenLocal ( ) 
 @ @ - 107 , 7 + 106 , 7 @ @ class PluginTest { 
 def configurationContainerField = DefaultDependencyHandler . class . getDeclaredField ( " configurationContainer " ) 
 configurationContainerField . setAccessible ( true ) 
 def configurationContainer = configurationContainerField . get ( dependencies ) 
 - def compileConfiguration = configurationContainer . findByName ( " compile " ) 
 + def compileConfiguration = configurationContainer . findByName ( " api " ) 
 
 def DependencySet dependencySet = compileConfiguration . getDependencies ( ) 
 for ( Dependency dependency in dependencySet ) {

NEAREST DIFF:
diff - - git a / gradle - plugin / build . gradle b / gradle - plugin / build . gradle 
 index c21be4b . . d3f9607 100644 
 - - - a / gradle - plugin / build . gradle 
 + + + b / gradle - plugin / build . gradle 
 @ @ - 32 , 6 + 32 , 8 @ @ dependencies { 
 testCompile ( ' org . spockframework : spock - core : 1 . 0 - groovy - 2 . 4 ' ) { 
 exclude module : ' groovy - all ' 
 } 
 + testCompile gradleTestKit ( ) 
 + testCompile ' junit : junit : 4 . 12 ' 
 } 
 
 / / for Ant filter 
 diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 index 9490f5b . . 1d92b11 100644 
 - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 @ @ - 16 , 7 + 16 , 7 @ @ class Realm implements Plugin < Project > { 
 def isAndroidApp = project . plugins . withType ( AppPlugin ) 
 def isAndroidLib = project . plugins . withType ( LibraryPlugin ) 
 if ( ! isAndroidApp & & ! isAndroidLib ) { 
 - throw new GradleException ( " ' android ' or ' android - library ' plugin required . " ) 
 + throw new GradleException ( " ' com . android . application ' or ' com . android . library ' plugin required . " ) 
 } 
 
 def isKotlinProject = project . plugins . withType ( KotlinAndroidPlugin ) 
 diff - - git a / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy 
 new file mode 100644 
 index 0000000 . . ea611e0 
 - - - / dev / null 
 + + + b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy 
 @ @ - 0 , 0 + 1 , 98 @ @ 
 + package io . realm . gradle 
 + import org . gradle . api . GradleException 
 + import org . gradle . api . Project 
 + import org . gradle . api . artifacts . Dependency 
 + import org . gradle . api . artifacts . DependencySet 
 + import org . gradle . api . artifacts . dsl . DependencyHandler 
 + import org . gradle . api . artifacts . dsl . RepositoryHandler 
 + import org . gradle . api . internal . artifacts . dsl . dependencies . DefaultDependencyHandler 
 + import org . gradle . api . internal . plugins . PluginApplicationException 
 + import org . gradle . testfixtures . ProjectBuilder 
 + import org . junit . Before 
 + import org . junit . Test 
 + 
 + import static org . junit . Assert . assertEquals 
 + import static org . junit . Assert . assertTrue 
 + import static org . junit . Assert . fail 
 + 
 + class PluginTest { 
 + 
 + private Project project 
 + private String currentVersion 
 + 
 + @ Before 
 + public void setUp ( ) { 
 + project = ProjectBuilder . builder ( ) . build ( ) 
 + currentVersion = new File ( " . . / version . txt " ) . text . trim ( ) 
 + } 
 + 
 + @ Test 
 + public void testPlugin ( ) { 
 + project . buildscript { 
 + repositories { 
 + mavenLocal ( ) 
 + jcenter ( ) 
 + } 
 + dependencies { 
 + classpath ' com . android . tools . build : gradle : 1 . 5 . 0 ' 
 + classpath ' com . jakewharton . sdkmanager : gradle - plugin : 0 . 12 . 0 ' 
 + classpath " io . realm : realm - gradle - plugin : $ { currentVersion } " 
 + } 
 + } 
 + 
 + project . apply plugin : ' com . android . application ' 
 + project . apply plugin : ' realm - android ' 
 + 
 + assertTrue ( containsUrl ( project . repositories , ' https : / / jitpack . io ' ) ) 
 + 
 + assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - android - library ' ) ) 
 + assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - annotations ' ) ) 
 + } 
 + 
 + @ Test 
 + public void testWithoutAndroidPlugin ( ) { 
 + project . buildscript { 
 + repositories { 
 + mavenLocal ( ) 
 + jcenter ( ) 
 + } 
 + dependencies { 
 + classpath ' com . android . tools . build : gradle : 1 . 5 . 0 ' 
 + classpath ' com . jakewharton . sdkmanager : gradle - plugin : 0 . 12 . 0 ' 
 + classpath " io . realm : realm - gradle - plugin : $ { currentVersion } " 
 + } 
 + } 
 + 
 + try { 
 + project . apply plugin : ' realm - android ' 
 + fail ( ) 
 + } catch ( PluginApplicationException e ) { 
 + assertEquals ( e . getCause ( ) . class , GradleException . class ) 
 + assertTrue ( e . getCause ( ) . getMessage ( ) . contains ( " ' com . android . application ' or ' com . android . library ' plugin required . " ) ) 
 + } 
 + } 
 + 
 + private static boolean containsUrl ( RepositoryHandler repositories , String url ) { 
 + for ( repo in repositories ) { 
 + if ( repo . properties . get ( ' url ' ) . toString ( ) = = url ) { 
 + return true 
 + } 
 + } 
 + return false 
 + } 
 + 
 + private static boolean containsDependency ( DependencyHandler dependencies , String group , String name ) { 
 + def configurationContainerField = DefaultDependencyHandler . class . getDeclaredField ( " configurationContainer " ) 
 + configurationContainerField . setAccessible ( true ) 
 + def configurationContainer = configurationContainerField . get ( dependencies ) 
 + def compileConfiguration = configurationContainer . findByName ( " compile " ) 
 + 
 + def DependencySet dependencySet = compileConfiguration . getDependencies ( ) 
 + for ( Dependency dependency in dependencySet ) { 
 + if ( dependency . properties . group = = group & & dependency . properties . name = = name ) { 
 + return true 
 + } 
 + } 
 + return false 
 + } 
 + }
