BLEU SCORE: 0.035802380724744266

TEST MSG: Enable build from core source
GENERATED MSG: Perform the publishing to Bintray using curl

TEST DIFF (one line): diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index 208d17e . . eaba3c7 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 29 , 7 + 29 , 9 @ @ if ( ! ext . coreArchiveDir ) { <nl> } <nl> ext . coreArchiveFile = rootProject . file ( " $ { ext . coreArchiveDir } / realm - sync - android - $ { project . coreVersion } . tar . gz " ) <nl> ext . coreDistributionDir = file ( " $ { projectDir } / distribution / realm - core / " ) <nl> - ext . coreDir = file ( " $ { project . coreDistributionDir . getAbsolutePath ( ) } / core - $ { project . coreVersion } " ) <nl> + ext . coreDir = file ( project . coreSourcePath ? <nl> + " $ { project . coreSourcePath } / android - lib " : <nl> + " $ { project . coreDistributionDir . getAbsolutePath ( ) } / core - $ { project . coreVersion } " ) <nl> ext . ccachePath = project . findProperty ( ' ccachePath ' ) ? : System . getenv ( ' NDK _ CCACHE ' ) <nl> ext . lcachePath = project . findProperty ( ' lcachePath ' ) ? : System . getenv ( ' NDK _ LCACHE ' ) <nl> <nl> @ @ - 46 , 11 + 48 , 11 @ @ android { <nl> externalNativeBuild { <nl> cmake { <nl> arguments " - DREALM _ CORE _ DIST _ DIR : STRING = $ { project . coreDir . getAbsolutePath ( ) } " , <nl> - / / FIXME : <nl> - / / This is copied from https : / / dl . google . com / android / repository / cmake - 3 . 4 . 2909474 - linux - x86 _ 64 . zip <nl> - / / because of the android . toolchain . cmake shipped with Android SDK CMake 3 . 6 doesn ' t work with our <nl> - / / JNI build currently ( lack of lto linking support ) . <nl> - / / This file should be removed and use the one from Android SDK cmake package when it supports lto . <nl> + / / FIXME : <nl> + / / This is copied from https : / / dl . google . com / android / repository / cmake - 3 . 4 . 2909474 - linux - x86 _ 64 . zip <nl> + / / because of the android . toolchain . cmake shipped with Android SDK CMake 3 . 6 doesn ' t work with our <nl> + / / JNI build currently ( lack of lto linking support ) . <nl> + / / This file should be removed and use the one from Android SDK cmake package when it supports lto . <nl> " - DCMAKE _ TOOLCHAIN _ FILE = $ { project . file ( ' src / main / cpp / android . toolchain . cmake ' ) . path } " <nl> if ( project . ccachePath ) arguments " - DNDK _ CCACHE = $ project . ccachePath " <nl> if ( project . lcachePath ) arguments " - DNDK _ LCACHE = $ project . lcachePath " <nl> @ @ - 112 , 6 + 114 , 15 @ @ android { <nl> consumerProguardFiles ' proguard - rules - common . pro ' , ' proguard - rules - objectServer . pro ' <nl> } <nl> } <nl> + <nl> + variantFilter { variant - > <nl> + def names = variant . flavors * . name <nl> + <nl> + / / Ignore the objectServer flavour when building from core source . <nl> + if ( coreSourcePath & & names . contains ( " objectServer " ) ) { <nl> + variant . ignore = true <nl> + } <nl> + } <nl> } <nl> <nl> project . afterEvaluate { <nl> @ @ - 178 , 7 + 189 , 7 @ @ task javadoc ( type : Javadoc ) { <nl> links " http : / / reactivex . io / RxJava / javadoc / " <nl> linksOffline " https : / / developer . android . com / reference / " , " $ { project . android . sdkDirectory } / docs / reference " <nl> <nl> - tags = [ betaTag ] <nl> + tags = [ betaTag ] <nl> } <nl> exclude ' * * / internal / * * ' <nl> exclude ' * * / BuildConfig . java ' <nl> @ @ - 252 , 7 + 263 , 7 @ @ task checkstyle ( type : Checkstyle ) { <nl> / / Configuration options can be found here : <nl> / / http : / / developer . android . com / reference / android / support / test / runner / AndroidJUnitRunner . html <nl> task connectedBenchmarks ( type : GradleBuild ) { <nl> - description = ' Run all benchmarks on connected devices ' <nl> + description = ' Run all benchmarks on connected devices ' <nl> group = ' Verification ' <nl> buildFile = file ( " $ { projectDir } / build . gradle " ) <nl> startParameter . getProjectProperties ( ) . put ( ' android . testInstrumentationRunnerArguments . package ' , ' io . realm . benchmarks ' ) <nl> @ @ - 260 , 7 + 271 , 7 @ @ task connectedBenchmarks ( type : GradleBuild ) { <nl> } <nl> <nl> task connectedUnitTests ( type : GradleBuild ) { <nl> - description = ' Run all unit tests on connected devices ' <nl> + description = ' Run all unit tests on connected devices ' <nl> group = ' Verification ' <nl> buildFile = file ( " $ { projectDir } / build . gradle " ) <nl> startParameter . getProjectProperties ( ) . put ( ' android . testInstrumentationRunnerArguments . notPackage ' , ' io . realm . benchmarks ' ) <nl> @ @ - 358 , 7 + 369 , 7 @ @ publishing { <nl> accessKey project . hasProperty ( ' s3AccessKey ' ) ? s3AccessKey : ' noAccessKey ' <nl> secretKey project . hasProperty ( ' s3SecretKey ' ) ? s3SecretKey : ' noSecretKey ' <nl> } <nl> - if ( project . version . endsWith ( ' - SNAPSHOT ' ) ) { <nl> + if ( project . version . endsWith ( ' - SNAPSHOT ' ) ) { <nl> url " s3 : / / realm - ci - artifacts / maven / snapshots / " <nl> } else { <nl> url " s3 : / / realm - ci - artifacts / maven / releases / " <nl> @ @ - 398 , 7 + 409 , 7 @ @ task downloadCore ( ) { <nl> return project . hasProperty ( ' coreSha256Hash ' ) & & ! project . coreSha256Hash . empty <nl> } <nl> <nl> - def calcSha256Hash = { File targetFile - > <nl> + def calcSha256Hash = { File targetFile - > <nl> MessageDigest sha = MessageDigest . getInstance ( " SHA - 256 " ) <nl> Formatter hexHash = new Formatter ( ) <nl> sha . digest ( targetFile . bytes ) . each { b - > hexHash . format ( ' % 02x ' , b ) } <nl> @ @ - 482 , 9 + 493 , 14 @ @ task deployCore ( group : ' build setup ' , description : ' Deploy the latest version of <nl> coreSourcePath ? compileCore : downloadCore <nl> } <nl> <nl> + / / Build with the output from core source dir . No need to deploy anything . <nl> + onlyIf { <nl> + return ! coreSourcePath <nl> + } <nl> + <nl> outputs . upToDateWhen { <nl> - / / Clean up the coreDir if it is newly downloaded or compiled from source <nl> - if ( coreDownloaded | | coreSourcePath ) { <nl> + / / Clean up the coreDir if it is newly downloaded <nl> + if ( coreDownloaded ) { <nl> return false <nl> } <nl> <nl> @ @ - 575 , 52 + 591 , 52 @ @ android . productFlavors . all { flavor - > <nl> dependsOn " assemble $ { flavor . name . capitalize ( ) } " <nl> group = ' Publishing ' <nl> commandLine ' curl ' , <nl> - ' - X ' , <nl> - ' PUT ' , <nl> - ' - T ' , <nl> - " $ { buildDir } / outputs / aar / realm - android - library - $ { flavor . name } - release . aar " , <nl> - ' - u ' , <nl> - " $ { userName } : $ { accessKey } " , <nl> - " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } . aar ? publish = 0 " <nl> + ' - X ' , <nl> + ' PUT ' , <nl> + ' - T ' , <nl> + " $ { buildDir } / outputs / aar / realm - android - library - $ { flavor . name } - release . aar " , <nl> + ' - u ' , <nl> + " $ { userName } : $ { accessKey } " , <nl> + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } . aar ? publish = 0 " <nl> } <nl> <nl> task ( " bintraySources $ { flavor . name . capitalize ( ) } " , type : Exec ) { <nl> dependsOn sourcesJar <nl> group = ' Publishing ' <nl> commandLine ' curl ' , <nl> - ' - X ' , <nl> - ' PUT ' , <nl> - ' - T ' , <nl> - " $ { buildDir } / libs / realm - android - library - $ { project . version } - sources . jar " , <nl> - ' - u ' , <nl> - " $ { userName } : $ { accessKey } " , <nl> - " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } - sources . jar ? publish = 0 " <nl> + ' - X ' , <nl> + ' PUT ' , <nl> + ' - T ' , <nl> + " $ { buildDir } / libs / realm - android - library - $ { project . version } - sources . jar " , <nl> + ' - u ' , <nl> + " $ { userName } : $ { accessKey } " , <nl> + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } - sources . jar ? publish = 0 " <nl> } <nl> <nl> task ( " bintrayJavadoc $ { flavor . name . capitalize ( ) } " , type : Exec ) { <nl> dependsOn javadocJar <nl> group = ' Publishing ' <nl> commandLine ' curl ' , <nl> - ' - X ' , <nl> - ' PUT ' , <nl> - ' - T ' , <nl> - " $ { buildDir } / libs / realm - android - library - $ { project . version } - javadoc . jar " , <nl> - ' - u ' , <nl> - " $ { userName } : $ { accessKey } " , <nl> - " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } - javadoc . jar ? publish = 0 " <nl> + ' - X ' , <nl> + ' PUT ' , <nl> + ' - T ' , <nl> + " $ { buildDir } / libs / realm - android - library - $ { project . version } - javadoc . jar " , <nl> + ' - u ' , <nl> + " $ { userName } : $ { accessKey } " , <nl> + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } - javadoc . jar ? publish = 0 " <nl> } <nl> <nl> task ( " bintrayPom $ { flavor . name . capitalize ( ) } " , type : Exec ) { <nl> dependsOn " publish $ { flavor . name . capitalize ( ) } PublicationPublicationToMavenLocal " <nl> group = ' Publishing ' <nl> commandLine ' curl ' , <nl> - ' - X ' , <nl> - ' PUT ' , <nl> - ' - T ' , <nl> - " $ { buildDir } / publications / $ { flavor . name } Publication / pom - default . xml " , <nl> - ' - u ' , <nl> - " $ { userName } : $ { accessKey } " , <nl> - " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } . pom ? publish = 0 " <nl> + ' - X ' , <nl> + ' PUT ' , <nl> + ' - T ' , <nl> + " $ { buildDir } / publications / $ { flavor . name } Publication / pom - default . xml " , <nl> + ' - u ' , <nl> + " $ { userName } : $ { accessKey } " , <nl> + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } . pom ? publish = 0 " <nl> } <nl> <nl> / / OJO <nl> @ @ - 724 , 11 + 740 , 11 @ @ def checkNdk ( String ndkPath ) { <nl> } <nl> if ( detectedNdkVersion ! = project . ndkVersion ) { <nl> throw new GradleException ( " Your NDK version : $ { detectedNdkVersion } . " <nl> - + " Realm JNI must be compiled with the version $ { project . ndkVersion } of NDK . " ) <nl> + + " Realm JNI must be compiled with the version $ { project . ndkVersion } of NDK . " ) <nl> } <nl> } <nl> <nl> - def getValueFromPropertiesFile ( File propFile , String key ) { <nl> + static def getValueFromPropertiesFile ( File propFile , String key ) { <nl> if ( ! propFile . isFile ( ) | | ! propFile . canRead ( ) ) { <nl> return null <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> index 4aefd1f . . 5b97a89 100644 <nl> - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> @ @ - 84 , 23 + 84 , 25 @ @ add _ library ( lib _ realm _ core STATIC IMPORTED ) <nl> set _ target _ properties ( lib _ realm _ core PROPERTIES IMPORTED _ LOCATION $ { core _ lib _ PATH } <nl> IMPORTED _ LINK _ INTERFACE _ LIBRARIES atomic ) <nl> <nl> - # Sync static library <nl> - set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - $ { ANDROID _ ABI } . a ) <nl> - # Workaround for old core ' s funny ABI nicknames <nl> - if ( NOT EXISTS $ { sync _ lib _ PATH } ) <nl> - if ( ARMEABI ) <nl> - set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm . a ) <nl> - elseif ( ARMEABI _ V7A ) <nl> - set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm - v7a . a ) <nl> - elseif ( ARM64 _ V8A ) <nl> - set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm64 . a ) <nl> - else ( ) <nl> - message ( FATAL _ ERROR " Cannot find core lib file : $ { sync _ lib _ PATH } " ) <nl> + if ( build _ SYNC ) <nl> + # Sync static library <nl> + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - $ { ANDROID _ ABI } . a ) <nl> + # Workaround for old core ' s funny ABI nicknames <nl> + if ( NOT EXISTS $ { sync _ lib _ PATH } ) <nl> + if ( ARMEABI ) <nl> + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm . a ) <nl> + elseif ( ARMEABI _ V7A ) <nl> + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm - v7a . a ) <nl> + elseif ( ARM64 _ V8A ) <nl> + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm64 . a ) <nl> + else ( ) <nl> + message ( FATAL _ ERROR " Cannot find sync lib file : $ { sync _ lib _ PATH } " ) <nl> + endif ( ) <nl> endif ( ) <nl> + add _ library ( lib _ realm _ sync STATIC IMPORTED ) <nl> + set _ target _ properties ( lib _ realm _ sync PROPERTIES IMPORTED _ LOCATION $ { sync _ lib _ PATH } <nl> + IMPORTED _ LINK _ INTERFACE _ LIBRARIES lib _ realm _ core ) <nl> endif ( ) <nl> - add _ library ( lib _ realm _ sync STATIC IMPORTED ) <nl> - set _ target _ properties ( lib _ realm _ sync PROPERTIES IMPORTED _ LOCATION $ { sync _ lib _ PATH } <nl> - IMPORTED _ LINK _ INTERFACE _ LIBRARIES lib _ realm _ core ) <nl> <nl> # build application ' s shared lib <nl> include _ directories ( $ { REALM _ CORE _ DIST _ DIR } / include
NEAREST DIFF (one line): diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index 0d3833e . . 2987477 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 5 , 7 + 5 , 6 @ @ apply plugin : ' com . neenbedankt . android - apt ' <nl> apply plugin : ' com . github . dcendents . android - maven ' <nl> apply plugin : ' maven - publish ' <nl> apply plugin : ' com . jfrog . artifactory ' <nl> - apply plugin : ' com . jfrog . bintray ' <nl> apply plugin : ' findbugs ' <nl> apply plugin : ' pmd ' <nl> apply plugin : ' checkstyle ' <nl> @ @ - 344 , 28 + 343 , 6 @ @ publishing { <nl> } <nl> } <nl> <nl> - bintray { <nl> - user = project . hasProperty ( ' bintrayUser ' ) ? bintrayUser : ' noUser ' <nl> - key = project . hasProperty ( ' bintrayKey ' ) ? bintrayKey : ' noKey ' <nl> - <nl> - dryRun = false <nl> - publish = false <nl> - <nl> - configurations = [ ' basePublication ' , ' objectServerPublication ' ] <nl> - <nl> - pkg { <nl> - repo = ' maven ' <nl> - name = ' realm - android - library ' <nl> - desc = ' Realm for Android ' <nl> - websiteUrl = ' http : / / realm . io ' <nl> - issueTrackerUrl = ' https : / / github . com / realm / realm - java / issues ' <nl> - vcsUrl = ' https : / / github . com / realm / realm - java . git ' <nl> - licenses = [ ' Apache - 2 . 0 ' ] <nl> - labels = [ ' android ' , ' realm ' ] <nl> - publicDownloadNumbers = false <nl> - } <nl> - } <nl> - <nl> artifactory { <nl> contextUrl = ' https : / / oss . jfrog . org / artifactory ' <nl> publish { <nl> @ @ - 559 , 6 + 536 , 79 @ @ task checkNdk ( ) < < { <nl> } <nl> } <nl> <nl> + android . productFlavors . all { flavor - > <nl> + def librarySuffix = flavor . name = = ' base ' ? ' ' : ' - object - server ' <nl> + def userName = project . findProperty ( ' bintrayUser ' ) ? : ' noUser ' <nl> + def accessKey = project . findProperty ( ' bintrayKey ' ) ? : ' noKey ' <nl> + <nl> + task ( " bintrayAar $ { flavor . name . capitalize ( ) } " , type : Exec ) { <nl> + dependsOn " assemble $ { flavor . name . capitalize ( ) } " <nl> + group = ' Publishing ' <nl> + commandLine ' curl ' , <nl> + ' - X ' , <nl> + ' PUT ' , <nl> + ' - T ' , <nl> + " $ { buildDir } / outputs / aar / realm - android - library - $ { flavor . name } - release . aar " , <nl> + ' - u ' , <nl> + " $ { userName } : $ { accessKey } " , <nl> + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } . aar ? publish = 0 " <nl> + } <nl> + <nl> + task ( " bintraySources $ { flavor . name . capitalize ( ) } " , type : Exec ) { <nl> + dependsOn sourcesJar <nl> + group = ' Publishing ' <nl> + commandLine ' curl ' , <nl> + ' - X ' , <nl> + ' PUT ' , <nl> + ' - T ' , <nl> + " $ { buildDir } / libs / realm - android - library - $ { project . version } - sources . jar " , <nl> + ' - u ' , <nl> + " $ { userName } : $ { accessKey } " , <nl> + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - sources . jar ? publish = 0 " <nl> + } <nl> + <nl> + task ( " bintrayJavadoc $ { flavor . name . capitalize ( ) } " , type : Exec ) { <nl> + dependsOn javadocJar <nl> + group = ' Publishing ' <nl> + commandLine ' curl ' , <nl> + ' - X ' , <nl> + ' PUT ' , <nl> + ' - T ' , <nl> + " $ { buildDir } / libs / realm - android - library - $ { project . version } - javadoc . jar " , <nl> + ' - u ' , <nl> + " $ { userName } : $ { accessKey } " , <nl> + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - javadoc . jar ? publish = 0 " <nl> + } <nl> + <nl> + task ( " bintrayPom $ { flavor . name . capitalize ( ) } " , type : Exec ) { <nl> + dependsOn " publish $ { flavor . name . capitalize ( ) } PublicationPublicationToMavenLocal " <nl> + group = ' Publishing ' <nl> + commandLine ' curl ' , <nl> + ' - X ' , <nl> + ' PUT ' , <nl> + ' - T ' , <nl> + " $ { buildDir } / publications / $ { flavor . name } Publication / pom - default . xml " , <nl> + ' - u ' , <nl> + " $ { userName } : $ { accessKey } " , <nl> + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } . pom ? publish = 0 " <nl> + } <nl> + <nl> + task ( " bintray $ { flavor . name . capitalize ( ) } " ) { <nl> + dependsOn " bintrayAar $ { flavor . name . capitalize ( ) } " <nl> + dependsOn " bintraySources $ { flavor . name . capitalize ( ) } " <nl> + dependsOn " bintrayJavadoc $ { flavor . name . capitalize ( ) } " <nl> + dependsOn " bintrayPom $ { flavor . name . capitalize ( ) } " <nl> + group = ' Publishing ' <nl> + } <nl> + } <nl> + <nl> + task bintrayUpload ( ) { <nl> + android . productFlavors . all { flavor - > <nl> + dependsOn " bintray $ { flavor . name . capitalize ( ) } " <nl> + } <nl> + group = ' Publishing ' <nl> + } <nl> + <nl> def checkNdk ( String ndkPath ) { <nl> def detectedNdkVersion <nl> def releaseFile = new File ( ndkPath , ' RELEASE . TXT ' )

TEST DIFF:
diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index 208d17e . . eaba3c7 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 29 , 7 + 29 , 9 @ @ if ( ! ext . coreArchiveDir ) { 
 } 
 ext . coreArchiveFile = rootProject . file ( " $ { ext . coreArchiveDir } / realm - sync - android - $ { project . coreVersion } . tar . gz " ) 
 ext . coreDistributionDir = file ( " $ { projectDir } / distribution / realm - core / " ) 
 - ext . coreDir = file ( " $ { project . coreDistributionDir . getAbsolutePath ( ) } / core - $ { project . coreVersion } " ) 
 + ext . coreDir = file ( project . coreSourcePath ? 
 + " $ { project . coreSourcePath } / android - lib " : 
 + " $ { project . coreDistributionDir . getAbsolutePath ( ) } / core - $ { project . coreVersion } " ) 
 ext . ccachePath = project . findProperty ( ' ccachePath ' ) ? : System . getenv ( ' NDK _ CCACHE ' ) 
 ext . lcachePath = project . findProperty ( ' lcachePath ' ) ? : System . getenv ( ' NDK _ LCACHE ' ) 
 
 @ @ - 46 , 11 + 48 , 11 @ @ android { 
 externalNativeBuild { 
 cmake { 
 arguments " - DREALM _ CORE _ DIST _ DIR : STRING = $ { project . coreDir . getAbsolutePath ( ) } " , 
 - / / FIXME : 
 - / / This is copied from https : / / dl . google . com / android / repository / cmake - 3 . 4 . 2909474 - linux - x86 _ 64 . zip 
 - / / because of the android . toolchain . cmake shipped with Android SDK CMake 3 . 6 doesn ' t work with our 
 - / / JNI build currently ( lack of lto linking support ) . 
 - / / This file should be removed and use the one from Android SDK cmake package when it supports lto . 
 + / / FIXME : 
 + / / This is copied from https : / / dl . google . com / android / repository / cmake - 3 . 4 . 2909474 - linux - x86 _ 64 . zip 
 + / / because of the android . toolchain . cmake shipped with Android SDK CMake 3 . 6 doesn ' t work with our 
 + / / JNI build currently ( lack of lto linking support ) . 
 + / / This file should be removed and use the one from Android SDK cmake package when it supports lto . 
 " - DCMAKE _ TOOLCHAIN _ FILE = $ { project . file ( ' src / main / cpp / android . toolchain . cmake ' ) . path } " 
 if ( project . ccachePath ) arguments " - DNDK _ CCACHE = $ project . ccachePath " 
 if ( project . lcachePath ) arguments " - DNDK _ LCACHE = $ project . lcachePath " 
 @ @ - 112 , 6 + 114 , 15 @ @ android { 
 consumerProguardFiles ' proguard - rules - common . pro ' , ' proguard - rules - objectServer . pro ' 
 } 
 } 
 + 
 + variantFilter { variant - > 
 + def names = variant . flavors * . name 
 + 
 + / / Ignore the objectServer flavour when building from core source . 
 + if ( coreSourcePath & & names . contains ( " objectServer " ) ) { 
 + variant . ignore = true 
 + } 
 + } 
 } 
 
 project . afterEvaluate { 
 @ @ - 178 , 7 + 189 , 7 @ @ task javadoc ( type : Javadoc ) { 
 links " http : / / reactivex . io / RxJava / javadoc / " 
 linksOffline " https : / / developer . android . com / reference / " , " $ { project . android . sdkDirectory } / docs / reference " 
 
 - tags = [ betaTag ] 
 + tags = [ betaTag ] 
 } 
 exclude ' * * / internal / * * ' 
 exclude ' * * / BuildConfig . java ' 
 @ @ - 252 , 7 + 263 , 7 @ @ task checkstyle ( type : Checkstyle ) { 
 / / Configuration options can be found here : 
 / / http : / / developer . android . com / reference / android / support / test / runner / AndroidJUnitRunner . html 
 task connectedBenchmarks ( type : GradleBuild ) { 
 - description = ' Run all benchmarks on connected devices ' 
 + description = ' Run all benchmarks on connected devices ' 
 group = ' Verification ' 
 buildFile = file ( " $ { projectDir } / build . gradle " ) 
 startParameter . getProjectProperties ( ) . put ( ' android . testInstrumentationRunnerArguments . package ' , ' io . realm . benchmarks ' ) 
 @ @ - 260 , 7 + 271 , 7 @ @ task connectedBenchmarks ( type : GradleBuild ) { 
 } 
 
 task connectedUnitTests ( type : GradleBuild ) { 
 - description = ' Run all unit tests on connected devices ' 
 + description = ' Run all unit tests on connected devices ' 
 group = ' Verification ' 
 buildFile = file ( " $ { projectDir } / build . gradle " ) 
 startParameter . getProjectProperties ( ) . put ( ' android . testInstrumentationRunnerArguments . notPackage ' , ' io . realm . benchmarks ' ) 
 @ @ - 358 , 7 + 369 , 7 @ @ publishing { 
 accessKey project . hasProperty ( ' s3AccessKey ' ) ? s3AccessKey : ' noAccessKey ' 
 secretKey project . hasProperty ( ' s3SecretKey ' ) ? s3SecretKey : ' noSecretKey ' 
 } 
 - if ( project . version . endsWith ( ' - SNAPSHOT ' ) ) { 
 + if ( project . version . endsWith ( ' - SNAPSHOT ' ) ) { 
 url " s3 : / / realm - ci - artifacts / maven / snapshots / " 
 } else { 
 url " s3 : / / realm - ci - artifacts / maven / releases / " 
 @ @ - 398 , 7 + 409 , 7 @ @ task downloadCore ( ) { 
 return project . hasProperty ( ' coreSha256Hash ' ) & & ! project . coreSha256Hash . empty 
 } 
 
 - def calcSha256Hash = { File targetFile - > 
 + def calcSha256Hash = { File targetFile - > 
 MessageDigest sha = MessageDigest . getInstance ( " SHA - 256 " ) 
 Formatter hexHash = new Formatter ( ) 
 sha . digest ( targetFile . bytes ) . each { b - > hexHash . format ( ' % 02x ' , b ) } 
 @ @ - 482 , 9 + 493 , 14 @ @ task deployCore ( group : ' build setup ' , description : ' Deploy the latest version of 
 coreSourcePath ? compileCore : downloadCore 
 } 
 
 + / / Build with the output from core source dir . No need to deploy anything . 
 + onlyIf { 
 + return ! coreSourcePath 
 + } 
 + 
 outputs . upToDateWhen { 
 - / / Clean up the coreDir if it is newly downloaded or compiled from source 
 - if ( coreDownloaded | | coreSourcePath ) { 
 + / / Clean up the coreDir if it is newly downloaded 
 + if ( coreDownloaded ) { 
 return false 
 } 
 
 @ @ - 575 , 52 + 591 , 52 @ @ android . productFlavors . all { flavor - > 
 dependsOn " assemble $ { flavor . name . capitalize ( ) } " 
 group = ' Publishing ' 
 commandLine ' curl ' , 
 - ' - X ' , 
 - ' PUT ' , 
 - ' - T ' , 
 - " $ { buildDir } / outputs / aar / realm - android - library - $ { flavor . name } - release . aar " , 
 - ' - u ' , 
 - " $ { userName } : $ { accessKey } " , 
 - " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } . aar ? publish = 0 " 
 + ' - X ' , 
 + ' PUT ' , 
 + ' - T ' , 
 + " $ { buildDir } / outputs / aar / realm - android - library - $ { flavor . name } - release . aar " , 
 + ' - u ' , 
 + " $ { userName } : $ { accessKey } " , 
 + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } . aar ? publish = 0 " 
 } 
 
 task ( " bintraySources $ { flavor . name . capitalize ( ) } " , type : Exec ) { 
 dependsOn sourcesJar 
 group = ' Publishing ' 
 commandLine ' curl ' , 
 - ' - X ' , 
 - ' PUT ' , 
 - ' - T ' , 
 - " $ { buildDir } / libs / realm - android - library - $ { project . version } - sources . jar " , 
 - ' - u ' , 
 - " $ { userName } : $ { accessKey } " , 
 - " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } - sources . jar ? publish = 0 " 
 + ' - X ' , 
 + ' PUT ' , 
 + ' - T ' , 
 + " $ { buildDir } / libs / realm - android - library - $ { project . version } - sources . jar " , 
 + ' - u ' , 
 + " $ { userName } : $ { accessKey } " , 
 + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } - sources . jar ? publish = 0 " 
 } 
 
 task ( " bintrayJavadoc $ { flavor . name . capitalize ( ) } " , type : Exec ) { 
 dependsOn javadocJar 
 group = ' Publishing ' 
 commandLine ' curl ' , 
 - ' - X ' , 
 - ' PUT ' , 
 - ' - T ' , 
 - " $ { buildDir } / libs / realm - android - library - $ { project . version } - javadoc . jar " , 
 - ' - u ' , 
 - " $ { userName } : $ { accessKey } " , 
 - " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } - javadoc . jar ? publish = 0 " 
 + ' - X ' , 
 + ' PUT ' , 
 + ' - T ' , 
 + " $ { buildDir } / libs / realm - android - library - $ { project . version } - javadoc . jar " , 
 + ' - u ' , 
 + " $ { userName } : $ { accessKey } " , 
 + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } - javadoc . jar ? publish = 0 " 
 } 
 
 task ( " bintrayPom $ { flavor . name . capitalize ( ) } " , type : Exec ) { 
 dependsOn " publish $ { flavor . name . capitalize ( ) } PublicationPublicationToMavenLocal " 
 group = ' Publishing ' 
 commandLine ' curl ' , 
 - ' - X ' , 
 - ' PUT ' , 
 - ' - T ' , 
 - " $ { buildDir } / publications / $ { flavor . name } Publication / pom - default . xml " , 
 - ' - u ' , 
 - " $ { userName } : $ { accessKey } " , 
 - " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } . pom ? publish = 0 " 
 + ' - X ' , 
 + ' PUT ' , 
 + ' - T ' , 
 + " $ { buildDir } / publications / $ { flavor . name } Publication / pom - default . xml " , 
 + ' - u ' , 
 + " $ { userName } : $ { accessKey } " , 
 + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - $ { project . version } . pom ? publish = 0 " 
 } 
 
 / / OJO 
 @ @ - 724 , 11 + 740 , 11 @ @ def checkNdk ( String ndkPath ) { 
 } 
 if ( detectedNdkVersion ! = project . ndkVersion ) { 
 throw new GradleException ( " Your NDK version : $ { detectedNdkVersion } . " 
 - + " Realm JNI must be compiled with the version $ { project . ndkVersion } of NDK . " ) 
 + + " Realm JNI must be compiled with the version $ { project . ndkVersion } of NDK . " ) 
 } 
 } 
 
 - def getValueFromPropertiesFile ( File propFile , String key ) { 
 + static def getValueFromPropertiesFile ( File propFile , String key ) { 
 if ( ! propFile . isFile ( ) | | ! propFile . canRead ( ) ) { 
 return null 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 index 4aefd1f . . 5b97a89 100644 
 - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt 
 + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 @ @ - 84 , 23 + 84 , 25 @ @ add _ library ( lib _ realm _ core STATIC IMPORTED ) 
 set _ target _ properties ( lib _ realm _ core PROPERTIES IMPORTED _ LOCATION $ { core _ lib _ PATH } 
 IMPORTED _ LINK _ INTERFACE _ LIBRARIES atomic ) 
 
 - # Sync static library 
 - set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - $ { ANDROID _ ABI } . a ) 
 - # Workaround for old core ' s funny ABI nicknames 
 - if ( NOT EXISTS $ { sync _ lib _ PATH } ) 
 - if ( ARMEABI ) 
 - set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm . a ) 
 - elseif ( ARMEABI _ V7A ) 
 - set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm - v7a . a ) 
 - elseif ( ARM64 _ V8A ) 
 - set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm64 . a ) 
 - else ( ) 
 - message ( FATAL _ ERROR " Cannot find core lib file : $ { sync _ lib _ PATH } " ) 
 + if ( build _ SYNC ) 
 + # Sync static library 
 + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - $ { ANDROID _ ABI } . a ) 
 + # Workaround for old core ' s funny ABI nicknames 
 + if ( NOT EXISTS $ { sync _ lib _ PATH } ) 
 + if ( ARMEABI ) 
 + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm . a ) 
 + elseif ( ARMEABI _ V7A ) 
 + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm - v7a . a ) 
 + elseif ( ARM64 _ V8A ) 
 + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm64 . a ) 
 + else ( ) 
 + message ( FATAL _ ERROR " Cannot find sync lib file : $ { sync _ lib _ PATH } " ) 
 + endif ( ) 
 endif ( ) 
 + add _ library ( lib _ realm _ sync STATIC IMPORTED ) 
 + set _ target _ properties ( lib _ realm _ sync PROPERTIES IMPORTED _ LOCATION $ { sync _ lib _ PATH } 
 + IMPORTED _ LINK _ INTERFACE _ LIBRARIES lib _ realm _ core ) 
 endif ( ) 
 - add _ library ( lib _ realm _ sync STATIC IMPORTED ) 
 - set _ target _ properties ( lib _ realm _ sync PROPERTIES IMPORTED _ LOCATION $ { sync _ lib _ PATH } 
 - IMPORTED _ LINK _ INTERFACE _ LIBRARIES lib _ realm _ core ) 
 
 # build application ' s shared lib 
 include _ directories ( $ { REALM _ CORE _ DIST _ DIR } / include

NEAREST DIFF:
diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index 0d3833e . . 2987477 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 5 , 7 + 5 , 6 @ @ apply plugin : ' com . neenbedankt . android - apt ' 
 apply plugin : ' com . github . dcendents . android - maven ' 
 apply plugin : ' maven - publish ' 
 apply plugin : ' com . jfrog . artifactory ' 
 - apply plugin : ' com . jfrog . bintray ' 
 apply plugin : ' findbugs ' 
 apply plugin : ' pmd ' 
 apply plugin : ' checkstyle ' 
 @ @ - 344 , 28 + 343 , 6 @ @ publishing { 
 } 
 } 
 
 - bintray { 
 - user = project . hasProperty ( ' bintrayUser ' ) ? bintrayUser : ' noUser ' 
 - key = project . hasProperty ( ' bintrayKey ' ) ? bintrayKey : ' noKey ' 
 - 
 - dryRun = false 
 - publish = false 
 - 
 - configurations = [ ' basePublication ' , ' objectServerPublication ' ] 
 - 
 - pkg { 
 - repo = ' maven ' 
 - name = ' realm - android - library ' 
 - desc = ' Realm for Android ' 
 - websiteUrl = ' http : / / realm . io ' 
 - issueTrackerUrl = ' https : / / github . com / realm / realm - java / issues ' 
 - vcsUrl = ' https : / / github . com / realm / realm - java . git ' 
 - licenses = [ ' Apache - 2 . 0 ' ] 
 - labels = [ ' android ' , ' realm ' ] 
 - publicDownloadNumbers = false 
 - } 
 - } 
 - 
 artifactory { 
 contextUrl = ' https : / / oss . jfrog . org / artifactory ' 
 publish { 
 @ @ - 559 , 6 + 536 , 79 @ @ task checkNdk ( ) < < { 
 } 
 } 
 
 + android . productFlavors . all { flavor - > 
 + def librarySuffix = flavor . name = = ' base ' ? ' ' : ' - object - server ' 
 + def userName = project . findProperty ( ' bintrayUser ' ) ? : ' noUser ' 
 + def accessKey = project . findProperty ( ' bintrayKey ' ) ? : ' noKey ' 
 + 
 + task ( " bintrayAar $ { flavor . name . capitalize ( ) } " , type : Exec ) { 
 + dependsOn " assemble $ { flavor . name . capitalize ( ) } " 
 + group = ' Publishing ' 
 + commandLine ' curl ' , 
 + ' - X ' , 
 + ' PUT ' , 
 + ' - T ' , 
 + " $ { buildDir } / outputs / aar / realm - android - library - $ { flavor . name } - release . aar " , 
 + ' - u ' , 
 + " $ { userName } : $ { accessKey } " , 
 + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } . aar ? publish = 0 " 
 + } 
 + 
 + task ( " bintraySources $ { flavor . name . capitalize ( ) } " , type : Exec ) { 
 + dependsOn sourcesJar 
 + group = ' Publishing ' 
 + commandLine ' curl ' , 
 + ' - X ' , 
 + ' PUT ' , 
 + ' - T ' , 
 + " $ { buildDir } / libs / realm - android - library - $ { project . version } - sources . jar " , 
 + ' - u ' , 
 + " $ { userName } : $ { accessKey } " , 
 + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - sources . jar ? publish = 0 " 
 + } 
 + 
 + task ( " bintrayJavadoc $ { flavor . name . capitalize ( ) } " , type : Exec ) { 
 + dependsOn javadocJar 
 + group = ' Publishing ' 
 + commandLine ' curl ' , 
 + ' - X ' , 
 + ' PUT ' , 
 + ' - T ' , 
 + " $ { buildDir } / libs / realm - android - library - $ { project . version } - javadoc . jar " , 
 + ' - u ' , 
 + " $ { userName } : $ { accessKey } " , 
 + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } - javadoc . jar ? publish = 0 " 
 + } 
 + 
 + task ( " bintrayPom $ { flavor . name . capitalize ( ) } " , type : Exec ) { 
 + dependsOn " publish $ { flavor . name . capitalize ( ) } PublicationPublicationToMavenLocal " 
 + group = ' Publishing ' 
 + commandLine ' curl ' , 
 + ' - X ' , 
 + ' PUT ' , 
 + ' - T ' , 
 + " $ { buildDir } / publications / $ { flavor . name } Publication / pom - default . xml " , 
 + ' - u ' , 
 + " $ { userName } : $ { accessKey } " , 
 + " https : / / api . bintray . com / content / realm / maven / realm - android - library $ { librarySuffix } / $ { project . version } / io / realm / realm - android - library $ { librarySuffix } / $ { project . version } / realm - android - library $ { librarySuffix } . pom ? publish = 0 " 
 + } 
 + 
 + task ( " bintray $ { flavor . name . capitalize ( ) } " ) { 
 + dependsOn " bintrayAar $ { flavor . name . capitalize ( ) } " 
 + dependsOn " bintraySources $ { flavor . name . capitalize ( ) } " 
 + dependsOn " bintrayJavadoc $ { flavor . name . capitalize ( ) } " 
 + dependsOn " bintrayPom $ { flavor . name . capitalize ( ) } " 
 + group = ' Publishing ' 
 + } 
 + } 
 + 
 + task bintrayUpload ( ) { 
 + android . productFlavors . all { flavor - > 
 + dependsOn " bintray $ { flavor . name . capitalize ( ) } " 
 + } 
 + group = ' Publishing ' 
 + } 
 + 
 def checkNdk ( String ndkPath ) { 
 def detectedNdkVersion 
 def releaseFile = new File ( ndkPath , ' RELEASE . TXT ' )
