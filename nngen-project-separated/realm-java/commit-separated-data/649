BLEU SCORE: 0.04923026124015933

TEST MSG: More GCed ref for flaky test
GENERATED MSG: Cleanup unit test naming and looper thread usage .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> index 69c7678 . . 5efec33 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> @ @ - 397 , 11 + 397 , 12 @ @ public class DynamicRealmTests { <nl> } ) ; <nl> } <nl> <nl> - / / Initialize a Dynamic Realm used by the * Async tests . <nl> + / / Initialize a Dynamic Realm used by the * Async tests and keep it ref in the looperThread . <nl> private DynamicRealm initializeDynamicRealm ( ) { <nl> RealmConfiguration defaultConfig = looperThread . realmConfiguration ; <nl> final DynamicRealm dynamicRealm = DynamicRealm . getInstance ( defaultConfig ) ; <nl> populateTestRealm ( dynamicRealm , 10 ) ; <nl> + looperThread . keepStrongReference . add ( dynamicRealm ) ; <nl> return dynamicRealm ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 80a7ed4 . . b03478a 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 1020 , 6 + 1020 , 7 @ @ public class NotificationsTest { <nl> realm . createObject ( AllTypes . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( results ) ; <nl> results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> @ @ - 1227 , 6 + 1228 , 7 @ @ public class NotificationsTest { <nl> <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> <nl> + looperThread . keepStrongReference . add ( asyncResults ) ; <nl> asyncResults . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > element ) { <nl> @ @ - 1325 , 6 + 1327 , 7 @ @ public class NotificationsTest { <nl> realm . commitTransaction ( ) ; <nl> <nl> RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllAsync ( ) ; <nl> + looperThread . keepStrongReference . add ( results ) ; <nl> results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > element ) { <nl> @ @ - 1344 , 6 + 1347 , 7 @ @ public class NotificationsTest { <nl> final RealmResults < AllTypes > syncResults = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllAsync ( ) ; <nl> + looperThread . keepStrongReference . add ( results ) ; <nl> results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > results ) { <nl> @ @ - 1380 , 6 + 1384 , 8 @ @ public class NotificationsTest { <nl> final Realm realm = looperThread . realm ; <nl> final RealmResults < AllTypes > syncResults1 = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> final RealmResults < AllTypes > syncResults2 = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> + <nl> + looperThread . keepStrongReference . add ( syncResults1 ) ; <nl> syncResults1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > element ) { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> index 7ccb8ba . . f4707f7 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> @ @ - 328 , 6 + 328 , 7 @ @ public class RealmAsyncQueryTests { <nl> assertFalse ( results . isLoaded ( ) ) ; <nl> assertEquals ( 0 , results . size ( ) ) ; <nl> <nl> + looperThread . keepStrongReference . add ( results ) ; <nl> results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> @ @ - 437 , 6 + 438 , 7 @ @ public class RealmAsyncQueryTests { <nl> . between ( " columnLong " , 0 , 4 ) <nl> . findAllAsync ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( realmResults ) ; <nl> / / notification should be called as well <nl> realmResults . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> @ @ - 512 , 6 + 514 , 7 @ @ public class RealmAsyncQueryTests { <nl> assertEquals ( 0 , realmResults . size ( ) ) ; <nl> <nl> / / 6 . Callback triggered after retry has completed <nl> + looperThread . keepStrongReference . add ( realmResults ) ; <nl> realmResults . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> @ @ - 594 , 6 + 597 , 9 @ @ public class RealmAsyncQueryTests { <nl> } <nl> } ; <nl> <nl> + looperThread . keepStrongReference . add ( realmResults1 ) ; <nl> + looperThread . keepStrongReference . add ( realmResults2 ) ; <nl> + <nl> realmResults1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> @ @ - 675 , 6 + 681 , 8 @ @ public class RealmAsyncQueryTests { <nl> assertFalse ( realmResults . isLoaded ( ) ) ; <nl> assertEquals ( 0 , realmResults . size ( ) ) ; <nl> <nl> + looperThread . keepStrongReference . add ( realmResults ) ; <nl> + <nl> / / Add change listener that should only be called once <nl> realmResults . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> @ @ - 772 , 6 + 780 , 9 @ @ public class RealmAsyncQueryTests { <nl> } <nl> } ; <nl> <nl> + looperThread . keepStrongReference . add ( realmResults1 ) ; <nl> + looperThread . keepStrongReference . add ( realmResults2 ) ; <nl> + <nl> realmResults1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> @ @ - 809 , 7 + 820 , 7 @ @ public class RealmAsyncQueryTests { <nl> final AllTypes asyncObj = realm . where ( AllTypes . class ) . findFirstAsync ( ) ; <nl> assertFalse ( asyncObj . isValid ( ) ) ; <nl> assertFalse ( asyncObj . isLoaded ( ) ) ; <nl> - <nl> + looperThread . keepStrongReference . add ( asyncObj ) ; <nl> asyncObj . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { <nl> @ Override <nl> public void onChange ( AllTypes object ) { <nl> @ @ - 825 , 6 + 836 , 7 @ @ public class RealmAsyncQueryTests { <nl> public void findFirstAsync _ initalEmptyRow ( ) throws Throwable { <nl> Realm realm = looperThread . realm ; <nl> final AllTypes firstAsync = realm . where ( AllTypes . class ) . findFirstAsync ( ) ; <nl> + looperThread . keepStrongReference . add ( firstAsync ) ; <nl> firstAsync . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { <nl> @ Override <nl> public void onChange ( AllTypes object ) { <nl> @ @ - 859 , 6 + 871 , 7 @ @ public class RealmAsyncQueryTests { <nl> assertEquals ( 0 , firstAsync . getColumnLong ( ) ) ; <nl> assertEquals ( " test data 0 " , firstAsync . getColumnString ( ) ) ; <nl> <nl> + looperThread . keepStrongReference . add ( firstAsync ) ; <nl> firstAsync . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { <nl> @ Override <nl> public void onChange ( AllTypes object ) { <nl> @ @ - 883 , 6 + 896 , 7 @ @ public class RealmAsyncQueryTests { <nl> . between ( " columnLong " , 4 , 9 ) <nl> . findFirstAsync ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( realmResults ) ; <nl> realmResults . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { <nl> @ Override <nl> public void onChange ( AllTypes object ) { <nl> @ @ - 976 , 6 + 990 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> <nl> / / Add change listener that should only be called once after the retry completed . <nl> + looperThread . keepStrongReference . add ( realmResults ) ; <nl> realmResults . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { <nl> @ Override <nl> public void onChange ( AllTypes object ) { <nl> @ @ - 1006 , 6 + 1021 , 7 @ @ public class RealmAsyncQueryTests { <nl> assertFalse ( results . isLoaded ( ) ) ; <nl> assertEquals ( 0 , results . size ( ) ) ; <nl> <nl> + looperThread . keepStrongReference . add ( results ) ; <nl> results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> @ @ - 1068 , 6 + 1084 , 7 @ @ public class RealmAsyncQueryTests { <nl> / / 4 . Intercepting the query completed event the first time will <nl> / / cause a commit that should cause the findAllSortedAsync to be re - run . <nl> / / This change listener should only be called with the final result . <nl> + looperThread . keepStrongReference . add ( realmResults ) ; <nl> realmResults . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> @ @ - 1161 , 6 + 1178 , 9 @ @ public class RealmAsyncQueryTests { <nl> } <nl> } ; <nl> <nl> + looperThread . keepStrongReference . add ( realmResults1 ) ; <nl> + looperThread . keepStrongReference . add ( realmResults2 ) ; <nl> + <nl> realmResults1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> @ @ - 1302 , 6 + 1322 , 9 @ @ public class RealmAsyncQueryTests { <nl> } <nl> } ; <nl> <nl> + looperThread . keepStrongReference . add ( realmResults1 ) ; <nl> + looperThread . keepStrongReference . add ( realmResults2 ) ; <nl> + <nl> realmResults1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> @ @ - 1558 , 6 + 1581 , 10 @ @ public class RealmAsyncQueryTests { <nl> } <nl> } ; <nl> <nl> + looperThread . keepStrongReference . add ( distinctBool ) ; <nl> + looperThread . keepStrongReference . add ( distinctLong ) ; <nl> + looperThread . keepStrongReference . add ( distinctDate ) ; <nl> + looperThread . keepStrongReference . add ( distinctString ) ; <nl> distinctBool . addChangeListener ( new RealmChangeListener < RealmResults < AnnotationIndexTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AnnotationIndexTypes > object ) { <nl> @ @ - 1767 , 6 + 1794 , 7 @ @ public class RealmAsyncQueryTests { <nl> final Realm realm = looperThread . realm ; <nl> <nl> final RealmResults < Dog > allAsync = realm . where ( Dog . class ) . equalTo ( " owner . name " , " kiba " ) . findAllAsync ( ) ; <nl> + looperThread . keepStrongReference . add ( allAsync ) ; <nl> allAsync . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < Dog > object ) { <nl> @ @ - 1826 , 6 + 1854 , 7 @ @ public class RealmAsyncQueryTests { <nl> Realm . asyncTaskExecutor . pause ( ) ; <nl> <nl> final AllTypes firstAsync = looperThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; <nl> + looperThread . keepStrongReference . add ( firstAsync ) ; <nl> firstAsync . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { <nl> @ Override <nl> public void onChange ( AllTypes object ) { <nl> @ @ - 1959 , 6 + 1988 , 7 @ @ public class RealmAsyncQueryTests { <nl> <nl> / / 1 . Make sure that async query is not started <nl> final RealmResults < AllTypes > result = realm . where ( AllTypes . class ) . findAllSortedAsync ( AllTypes . FIELD _ STRING ) ; <nl> + looperThread . keepStrongReference . add ( result ) ; <nl> result . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> index 4778fbe . . 23f08c5 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> @ @ - 98 , 6 + 98 , 7 @ @ public class RealmChangeListenerTests { <nl> public void returnedRealmResultsIsNotNull ( ) { <nl> Realm realm = looperThread . realm ; <nl> RealmResults < Cat > cats = realm . where ( Cat . class ) . findAll ( ) ; <nl> + looperThread . keepStrongReference . add ( cats ) ; <nl> cats . addChangeListener ( new RealmChangeListener < RealmResults < Cat > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < Cat > result ) { <nl> @ @ - 116 , 6 + 117 , 7 @ @ public class RealmChangeListenerTests { <nl> public void returnedRealmResultsOfModelIsNotNull ( ) { <nl> Realm realm = looperThread . realm ; <nl> RealmResults < AllTypesRealmModel > alltypes = realm . where ( AllTypesRealmModel . class ) . findAll ( ) ; <nl> + looperThread . keepStrongReference . add ( alltypes ) ; <nl> alltypes . addChangeListener ( new RealmChangeListener < RealmResults < AllTypesRealmModel > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypesRealmModel > result ) { <nl> @ @ - 139 , 6 + 141 , 7 @ @ public class RealmChangeListenerTests { <nl> Cat cat = looperThread . realm . createObject ( Cat . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( cat ) ; <nl> cat . addChangeListener ( new RealmChangeListener < Cat > ( ) { <nl> @ Override <nl> public void onChange ( Cat object ) { <nl> @ @ - 160 , 6 + 163 , 7 @ @ public class RealmChangeListenerTests { <nl> AllTypesRealmModel model = realm . createObject ( AllTypesRealmModel . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( model ) ; <nl> RealmObject . addChangeListener ( model , new RealmChangeListener < AllTypesRealmModel > ( ) { <nl> @ Override <nl> public void onChange ( AllTypesRealmModel object ) { <nl> @ @ - 184 , 6 + 188 , 7 @ @ public class RealmChangeListenerTests { <nl> DynamicRealmObject allTypes = dynamicRealm . createObject ( AllTypes . CLASS _ NAME ) ; <nl> dynamicRealm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( allTypes ) ; <nl> allTypes . addChangeListener ( new RealmChangeListener < DynamicRealmObject > ( ) { <nl> @ Override <nl> public void onChange ( DynamicRealmObject object ) { <nl> @ @ - 205 , 6 + 210 , 7 @ @ public class RealmChangeListenerTests { <nl> <nl> final DynamicRealm dynamicRealm = DynamicRealm . getInstance ( looperThread . realmConfiguration ) ; <nl> RealmResults < DynamicRealmObject > all = dynamicRealm . where ( AllTypes . CLASS _ NAME ) . findAll ( ) ; <nl> + looperThread . keepStrongReference . add ( all ) ; <nl> all . addChangeListener ( new RealmChangeListener < RealmResults < DynamicRealmObject > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < DynamicRealmObject > result ) { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmModelTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmModelTests . java <nl> index 5bf3868 . . d634c2a 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmModelTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmModelTests . java <nl> @ @ - 192 , 6 + 192 , 7 @ @ public class RealmModelTests { <nl> populateTestRealm ( realm , TEST _ DATA _ SIZE ) ; <nl> <nl> final RealmResults < AllTypesRealmModel > allTypesRealmModels = realm . where ( AllTypesRealmModel . class ) . distinctAsync ( AllTypesRealmModel . FIELD _ STRING ) ; <nl> + looperThread . keepStrongReference . add ( allTypesRealmModels ) ; <nl> allTypesRealmModels . addChangeListener ( new RealmChangeListener < RealmResults < AllTypesRealmModel > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypesRealmModel > object ) { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> index 644d3ca . . 7c64ba4 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> @ @ - 1716 , 6 + 1716 , 7 @ @ public class RealmObjectTests { <nl> allTypesPrimaryKey = realm . copyToRealmOrUpdate ( allTypesPrimaryKey ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( allTypesPrimaryKey ) ; <nl> allTypesPrimaryKey . addChangeListener ( new RealmChangeListener < AllTypesPrimaryKey > ( ) { <nl> @ Override <nl> public void onChange ( AllTypesPrimaryKey element ) { <nl> @ @ - 1793 , 6 + 1794 , 7 @ @ public class RealmObjectTests { <nl> realm . handlerController . realmObjects ; <nl> <nl> final AllTypesPrimaryKey allTypesPrimaryKey = realm . where ( AllTypesPrimaryKey . class ) . findFirstAsync ( ) ; <nl> + looperThread . keepStrongReference . add ( allTypesPrimaryKey ) ; <nl> allTypesPrimaryKey . addChangeListener ( new RealmChangeListener < AllTypesPrimaryKey > ( ) { <nl> @ Override <nl> public void onChange ( AllTypesPrimaryKey element ) { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> index 9c50d71 . . 5dcce6c 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> @ @ - 2311 , 6 + 2311 , 10 @ @ public class RealmQueryTests { <nl> } <nl> } ; <nl> <nl> + looperThread . keepStrongReference . add ( distinctBool ) ; <nl> + looperThread . keepStrongReference . add ( distinctLong ) ; <nl> + looperThread . keepStrongReference . add ( distinctDate ) ; <nl> + looperThread . keepStrongReference . add ( distinctString ) ; <nl> distinctBool . addChangeListener ( new RealmChangeListener < RealmResults < AnnotationIndexTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AnnotationIndexTypes > object ) { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> index ebc5546 . . cf2ea4f 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> @ @ - 342 , 7 + 342 , 7 @ @ public class RealmResultsTests extends CollectionTests { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void changeListener _ syncIfNeeded _ updatedFromOtherThread ( ) { <nl> - final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( " Foo " ) ) ; <nl> + final Realm realm = looperThread . realm ; <nl> populateTestRealm ( realm , 10 ) ; <nl> <nl> final RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . lessThan ( AllTypes . FIELD _ LONG , 10 ) . findAll ( ) ; <nl> @ @ - 450 , 6 + 450 , 10 @ @ public class RealmResultsTests extends CollectionTests { <nl> } <nl> } ; <nl> <nl> + looperThread . keepStrongReference . add ( distinctBool ) ; <nl> + looperThread . keepStrongReference . add ( distinctLong ) ; <nl> + looperThread . keepStrongReference . add ( distinctDate ) ; <nl> + looperThread . keepStrongReference . add ( distinctString ) ; <nl> distinctBool . addChangeListener ( new RealmChangeListener < RealmResults < AnnotationIndexTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AnnotationIndexTypes > object ) { <nl> @ @ - 512 , 6 + 516 , 8 @ @ public class RealmResultsTests extends CollectionTests { <nl> } <nl> } ; <nl> <nl> + looperThread . keepStrongReference . add ( distinctDate ) ; <nl> + looperThread . keepStrongReference . add ( distinctString ) ; <nl> distinctDate . addChangeListener ( new RealmChangeListener < RealmResults < AnnotationIndexTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AnnotationIndexTypes > object ) { <nl> @ @ - 856 , 6 + 862 , 7 @ @ public class RealmResultsTests extends CollectionTests { <nl> Realm realm = looperThread . realm ; <nl> RealmResults < AllTypes > collection = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( collection ) ; <nl> collection . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> @ @ - 900 , 6 + 907 , 7 @ @ public class RealmResultsTests extends CollectionTests { <nl> } ) ; <nl> <nl> / / Adding it twice will be ignored , so removing it will not cause the listener to be triggered . <nl> + looperThread . keepStrongReference . add ( collection ) ; <nl> collection . addChangeListener ( listener ) ; <nl> collection . addChangeListener ( listener ) ; <nl> collection . removeChangeListener ( listener ) ; <nl> @ @ - 933 , 6 + 941 , 7 @ @ public class RealmResultsTests extends CollectionTests { <nl> } <nl> } ; <nl> <nl> + looperThread . keepStrongReference . add ( collection ) ; <nl> collection . addChangeListener ( listener ) ; <nl> collection . removeChangeListener ( listener ) ; <nl> <nl> @ @ - 983 , 6 + 992 , 7 @ @ public class RealmResultsTests extends CollectionTests { <nl> } <nl> } ; <nl> <nl> + looperThread . keepStrongReference . add ( collection ) ; <nl> collection . addChangeListener ( listenerA ) ; <nl> collection . addChangeListener ( listenerB ) ; <nl> collection . removeChangeListeners ( ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index 063c513 . . 5bd703a 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 2799 , 7 + 2799 , 7 @ @ public class RealmTests { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void closeRealmInChangeListenerWhenThereIsListenerOnEmptyObject ( ) { <nl> - final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( ) ) ; <nl> + final Realm realm = looperThread . realm ; <nl> final RealmChangeListener < AllTypes > dummyListener = new RealmChangeListener < AllTypes > ( ) { <nl> @ Override <nl> public void onChange ( AllTypes object ) { <nl> @ @ - 2840 , 7 + 2840 , 7 @ @ public class RealmTests { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void closeRealmInChangeListenerWhenThereIsListenerOnObject ( ) { <nl> - final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( ) ) ; <nl> + final Realm realm = looperThread . realm ; <nl> final RealmChangeListener < AllTypes > dummyListener = new RealmChangeListener < AllTypes > ( ) { <nl> @ Override <nl> public void onChange ( AllTypes object ) { <nl> @ @ - 2885 , 7 + 2885 , 7 @ @ public class RealmTests { <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void closeRealmInChangeListenerWhenThereIsListenerOnResults ( ) { <nl> - final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( ) ) ; <nl> + final Realm realm = looperThread . realm ; <nl> final RealmChangeListener < RealmResults < AllTypes > > dummyListener = new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > object ) { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> index 7c787c5 . . 396e9cd 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> @ @ - 344 , 7 + 344 , 7 @ @ public class SortTest { <nl> public void resorting ( ) throws InterruptedException { <nl> final AtomicInteger changeListenerCalled = new AtomicInteger ( 4 ) ; <nl> <nl> - final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( ) ) ; <nl> + final Realm realm = looperThread . realm ; <nl> realm . setAutoRefresh ( true ) ; <nl> <nl> final Runnable endTest = new Runnable ( ) { <nl> @ @ - 365 , 6 + 365 , 7 @ @ public class SortTest { <nl> <nl> / / rr0 : [ 0 , 1 , 2 , 3 ] <nl> final RealmResults < AllTypes > rr0 = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> + looperThread . keepStrongReference . add ( rr0 ) ; <nl> rr0 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > element ) { <nl> @ @ - 376 , 6 + 377 , 7 @ @ public class SortTest { <nl> <nl> / / rr1 : [ 1 , 2 , 0 , 3 ] <nl> final RealmResults < AllTypes > rr1 = realm . where ( AllTypes . class ) . findAll ( ) . sort ( FIELD _ LONG , Sort . ASCENDING ) ; <nl> + looperThread . keepStrongReference . add ( rr1 ) ; <nl> rr1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > element ) { <nl> @ @ - 391 , 6 + 393 , 7 @ @ public class SortTest { <nl> <nl> / / rr2 : [ 0 , 3 , 1 , 2 ] <nl> final RealmResults < AllTypes > rr2 = realm . where ( AllTypes . class ) . findAll ( ) . sort ( FIELD _ LONG , Sort . DESCENDING ) ; <nl> + looperThread . keepStrongReference . add ( rr2 ) ; <nl> rr2 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > element ) { <nl> @ @ - 479 , 6 + 482 , 7 @ @ public class SortTest { <nl> <nl> RealmResults < AllTypes > objectsAscending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . ASCENDING ) ; <nl> assertEquals ( TEST _ SIZE , objectsAscending . size ( ) ) ; <nl> + looperThread . keepStrongReference . add ( objectsAscending ) ; <nl> objectsAscending . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > element ) { <nl> @ @ - 494 , 6 + 498 , 7 @ @ public class SortTest { <nl> <nl> RealmResults < AllTypes > objectsDescending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . DESCENDING ) ; <nl> assertEquals ( TEST _ SIZE , objectsDescending . size ( ) ) ; <nl> + looperThread . keepStrongReference . add ( objectsDescending ) ; <nl> objectsDescending . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < AllTypes > element ) { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> index ae3d2f8 . . 34cbeef 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> @ @ - 104 , 6 + 104 , 7 @ @ public class TypeBasedNotificationsTests { <nl> final Dog dog = realm . createObject ( Dog . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ Override <nl> public void onChange ( Dog object ) { <nl> @ @ - 121 , 6 + 122 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ RunTestInLooperThread <nl> public void callback _ should _ trigger _ for _ createObject _ dynamic _ realm ( ) { <nl> final DynamicRealm realm = DynamicRealm . getInstance ( looperThread . realmConfiguration ) ; <nl> + looperThread . keepStrongReference . add ( realm ) ; <nl> realm . addChangeListener ( new RealmChangeListener < DynamicRealm > ( ) { <nl> @ Override <nl> public void onChange ( DynamicRealm object ) { <nl> @ @ - 141 , 6 + 143 , 7 @ @ public class TypeBasedNotificationsTests { <nl> final DynamicRealmObject dog = realm . createObject ( " Dog " ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> dog . addChangeListener ( new RealmChangeListener < DynamicRealmObject > ( ) { <nl> @ Override <nl> public void onChange ( DynamicRealmObject object ) { <nl> @ @ - 180 , 6 + 183 , 7 @ @ public class TypeBasedNotificationsTests { <nl> final Dog dog = realm . copyToRealm ( akamaru ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ Override <nl> public void onChange ( Dog object ) { <nl> @ @ - 221 , 6 + 225 , 7 @ @ public class TypeBasedNotificationsTests { <nl> final PrimaryKeyAsLong primaryKeyAsLong = realm . copyToRealmOrUpdate ( obj ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( primaryKeyAsLong ) ; <nl> primaryKeyAsLong . addChangeListener ( new RealmChangeListener < PrimaryKeyAsLong > ( ) { <nl> @ Override <nl> public void onChange ( PrimaryKeyAsLong object ) { <nl> @ @ - 268 , 6 + 273 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . commitTransaction ( ) ; <nl> in . close ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( objectFromJson ) ; <nl> objectFromJson . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { <nl> @ Override <nl> public void onChange ( AllTypes object ) { <nl> @ @ - 323 , 6 + 329 , 7 @ @ public class TypeBasedNotificationsTests { <nl> final AllTypes objectFromJson = realm . createObjectFromJson ( AllTypes . class , json ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( objectFromJson ) ; <nl> objectFromJson . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { <nl> @ Override <nl> public void onChange ( AllTypes object ) { <nl> @ @ - 386 , 6 + 393 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . commitTransaction ( ) ; <nl> in . close ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( objectFromJson ) ; <nl> objectFromJson . addChangeListener ( new RealmChangeListener < AllTypesPrimaryKey > ( ) { <nl> @ Override <nl> public void onChange ( AllTypesPrimaryKey object ) { <nl> @ @ - 445 , 6 + 453 , 7 @ @ public class TypeBasedNotificationsTests { <nl> final AllTypesPrimaryKey newObj = realm . createOrUpdateObjectFromJson ( AllTypesPrimaryKey . class , json ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> + looperThread . keepStrongReference . add ( newObj ) ; <nl> newObj . addChangeListener ( new RealmChangeListener < AllTypesPrimaryKey > ( ) { <nl> @ Override <nl> public void onChange ( AllTypesPrimaryKey object ) { <nl> @ @ - 478 , 6 + 487 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . commitTransaction ( ) ; <nl> <nl> final Dog dog = realm . where ( Dog . class ) . findFirst ( ) ; <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ Override <nl> public void onChange ( Dog object ) { <nl> @ @ - 536 , 6 + 546 , 7 @ @ public class TypeBasedNotificationsTests { <nl> final Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; <nl> assertTrue ( dog . load ( ) ) ; <nl> <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ Override <nl> public void onChange ( Dog object ) { <nl> @ @ - 613 , 6 + 624 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> final Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; <nl> assertTrue ( dog . load ( ) ) ; <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ Override <nl> public void onChange ( Dog object ) { <nl> @ @ - 713 , 6 + 725 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> final Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; <nl> assertTrue ( dog . load ( ) ) ; <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ Override <nl> public void onChange ( Dog object ) { <nl> @ @ - 797 , 6 + 810 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . commitTransaction ( ) ; <nl> <nl> final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < Dog > object ) { <nl> @ @ - 854 , 6 + 868 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAllAsync ( ) ; <nl> assertTrue ( dogs . load ( ) ) ; <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < Dog > object ) { <nl> @ @ - 930 , 6 + 945 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . commitTransaction ( ) ; <nl> <nl> Dog dog = realm . where ( Dog . class ) . findFirst ( ) ; <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> for ( int i = 0 ; i < NUMBER _ OF _ LISTENERS ; i + + ) { <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ Override <nl> @ @ - 971 , 6 + 987 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; <nl> assertTrue ( dog . load ( ) ) ; <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> for ( int i = 0 ; i < NUMBER _ OF _ LISTENERS ; i + + ) { <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ Override <nl> @ @ - 1009 , 6 + 1026 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . commitTransaction ( ) ; <nl> <nl> RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> for ( int i = 0 ; i < NUMBER _ OF _ LISTENERS ; i + + ) { <nl> dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> @ @ - 1049 , 6 + 1067 , 7 @ @ public class TypeBasedNotificationsTests { <nl> RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAllAsync ( ) ; <nl> assertTrue ( dogs . load ( ) ) ; <nl> <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> for ( int i = 0 ; i < NUMBER _ OF _ LISTENERS ; i + + ) { <nl> dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> @ @ - 1096 , 6 + 1115 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . commitTransaction ( ) ; <nl> <nl> Dog dog = realm . where ( Dog . class ) . findFirst ( ) ; <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ Override <nl> public void onChange ( Dog object ) { <nl> @ @ - 1168 , 6 + 1188 , 7 @ @ public class TypeBasedNotificationsTests { <nl> } ; <nl> <nl> Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { <nl> @ Override <nl> public void onChange ( Dog object ) { <nl> @ @ - 1214 , 6 + 1235 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . commitTransaction ( ) ; <nl> <nl> final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < Dog > object ) { <nl> @ @ - 1279 , 6 + 1301 , 7 @ @ public class TypeBasedNotificationsTests { <nl> } ; <nl> <nl> final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAllAsync ( ) ; <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < Dog > object ) { <nl> @ @ - 1426 , 6 + 1449 , 8 @ @ public class TypeBasedNotificationsTests { <nl> finishedLatch . countDown ( ) ; <nl> } <nl> } ; <nl> + looperThread . keepStrongReference . add ( results1 ) ; <nl> + looperThread . keepStrongReference . add ( results2 ) ; <nl> results1 . addChangeListener ( listener ) ; <nl> results2 . addChangeListener ( listener ) ; <nl> <nl> @ @ - 1451 , 6 + 1476 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> final RealmResults < Dog > dogs = <nl> allTypes . getColumnRealmList ( ) . where ( ) . equalTo ( Dog . FIELD _ NAME , " name _ 0 " ) . findAll ( ) ; <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < Dog > object ) {
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> index 9b16b9c . . e6cc8af 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> @ @ - 64 , 7 + 64 , 7 @ @ public class RealmAsyncQueryTests { <nl> private Context context ; <nl> <nl> @ Rule <nl> - public final RunInLooperThread workerThread = new RunInLooperThread ( ) ; <nl> + public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; <nl> <nl> @ Before <nl> public void setUp ( ) throws Exception { <nl> @ @ - 78 , 10 + 78 , 10 @ @ public class RealmAsyncQueryTests { <nl> / / start asynchronously a transaction to insert one element <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testAsyncTransaction ( ) throws Throwable { <nl> - assertEquals ( 0 , workerThread . realm . allObjects ( Owner . class ) . size ( ) ) ; <nl> + public void executeTransaction _ async ( ) throws Throwable { <nl> + assertEquals ( 0 , looperThread . realm . allObjects ( Owner . class ) . size ( ) ) ; <nl> <nl> - workerThread . realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + looperThread . realm . executeTransaction ( new Realm . Transaction ( ) { <nl> @ Override <nl> public void execute ( Realm realm ) { <nl> Owner owner = realm . createObject ( Owner . class ) ; <nl> @ @ - 90 , 23 + 90 , 23 @ @ public class RealmAsyncQueryTests { <nl> } , new Realm . Transaction . Callback ( ) { <nl> @ Override <nl> public void onSuccess ( ) { <nl> - assertEquals ( 1 , workerThread . realm . allObjects ( Owner . class ) . size ( ) ) ; <nl> - assertEquals ( " Owner " , workerThread . realm . where ( Owner . class ) . findFirst ( ) . getName ( ) ) ; <nl> - workerThread . testComplete ( ) ; <nl> + assertEquals ( 1 , looperThread . realm . allObjects ( Owner . class ) . size ( ) ) ; <nl> + assertEquals ( " Owner " , looperThread . realm . where ( Owner . class ) . findFirst ( ) . getName ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> <nl> @ Override <nl> public void onError ( Exception e ) { <nl> - workerThread . testComplete ( ) ; ; <nl> + looperThread . testComplete ( ) ; ; <nl> fail ( e . getMessage ( ) ) ; <nl> } <nl> } ) ; <nl> } <nl> <nl> + / / Test that an async transaction that throws an exception propagate it properly to the user . <nl> @ Test <nl> - public void testAsyncTransactionThatThrowsRuntimeException ( ) throws Throwable { <nl> + public void executeTransaction _ async _ exceptionHandling ( ) throws Throwable { <nl> final TestHelper . TestLogger testLogger = new TestHelper . TestLogger ( ) ; <nl> - <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Realm [ ] realm = new Realm [ 1 ] ; <nl> @ @ - 181 , 108 + 181 , 82 @ @ public class RealmAsyncQueryTests { <nl> <nl> / / Test if the background Realm is closed when transaction success returned . <nl> @ Test <nl> - public void testClosedBeforeAsyncTransactionSuccess ( ) { <nl> - final CountDownLatch signalTestFinished = new CountDownLatch ( 1 ) ; <nl> - HandlerThread handlerThread = new HandlerThread ( " background " ) ; <nl> - handlerThread . start ( ) ; <nl> - final Handler handler = new Handler ( handlerThread . getLooper ( ) ) ; <nl> - handler . post ( new Runnable ( ) { <nl> + @ RunTestInLooperThread <nl> + public void executeTransaction _ async _ realmClosedOnSuccess ( ) { <nl> + final AtomicInteger counter = new AtomicInteger ( 100 ) ; <nl> + final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( " testClosedBeforeAsyncTransactionSuccess " ) ) ; <nl> + final RealmCache . Callback cacheCallback = new RealmCache . Callback ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> - final AtomicInteger counter = new AtomicInteger ( 100 ) ; <nl> - final Realm realm = openRealmInstance ( " testClosedBeforeAsyncTransactionSuccess " ) ; <nl> - final RealmCache . Callback cacheCallback = new RealmCache . Callback ( ) { <nl> - @ Override <nl> - public void onResult ( int count ) { <nl> - assertEquals ( 1 , count ) ; <nl> - if ( counter . decrementAndGet ( ) = = 0 ) { <nl> - realm . close ( ) ; <nl> - signalTestFinished . countDown ( ) ; <nl> - } <nl> - } <nl> - } ; <nl> - final Realm . Transaction . Callback transactionCallback = new Realm . Transaction . Callback ( ) { <nl> - @ Override <nl> - public void onSuccess ( ) { <nl> - RealmCache . invokeWithGlobalRefCount ( realm . getConfiguration ( ) , cacheCallback ) ; <nl> - if ( counter . get ( ) = = 0 ) { <nl> - / / Finish testing <nl> - return ; <nl> - } <nl> - realm . executeTransaction ( new Realm . Transaction ( ) { <nl> - @ Override <nl> - public void execute ( Realm realm ) { <nl> - } <nl> - } , this ) ; <nl> - } <nl> - } ; <nl> - <nl> + public void onResult ( int count ) { <nl> + assertEquals ( 1 , count ) ; <nl> + if ( counter . decrementAndGet ( ) = = 0 ) { <nl> + realm . close ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } <nl> + } ; <nl> + final Realm . Transaction . Callback transactionCallback = new Realm . Transaction . Callback ( ) { <nl> + @ Override <nl> + public void onSuccess ( ) { <nl> + RealmCache . invokeWithGlobalRefCount ( realm . getConfiguration ( ) , cacheCallback ) ; <nl> + if ( counter . get ( ) = = 0 ) { <nl> + / / Finish testing <nl> + return ; <nl> + } <nl> realm . executeTransaction ( new Realm . Transaction ( ) { <nl> @ Override <nl> public void execute ( Realm realm ) { <nl> } <nl> - } , transactionCallback ) ; <nl> + } , this ) ; <nl> } <nl> - } ) ; <nl> - try { <nl> - TestHelper . awaitOrFail ( signalTestFinished ) ; <nl> - } finally { <nl> - handlerThread . quit ( ) ; <nl> - } <nl> + } ; <nl> + <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + } <nl> + } , transactionCallback ) ; <nl> } <nl> <nl> / / Test if the background Realm is closed when transaction error returned . <nl> @ Test <nl> - public void testClosedBeforeAsyncTransactionError ( ) { <nl> - final CountDownLatch signalTestFinished = new CountDownLatch ( 1 ) ; <nl> - HandlerThread handlerThread = new HandlerThread ( " background " ) ; <nl> - handlerThread . start ( ) ; <nl> - final Handler handler = new Handler ( handlerThread . getLooper ( ) ) ; <nl> - handler . post ( new Runnable ( ) { <nl> + @ RunTestInLooperThread <nl> + public void executeTransaction _ async _ realmClosedOnError ( ) { <nl> + final AtomicInteger counter = new AtomicInteger ( 100 ) ; <nl> + final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( " testClosedBeforeAsyncTransactionSuccess " ) ) ; <nl> + final RealmCache . Callback cacheCallback = new RealmCache . Callback ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> - final AtomicInteger counter = new AtomicInteger ( 100 ) ; <nl> - final Realm realm = openRealmInstance ( " testClosedBeforeAsyncTransactionSuccess " ) ; <nl> - final RealmCache . Callback cacheCallback = new RealmCache . Callback ( ) { <nl> - @ Override <nl> - public void onResult ( int count ) { <nl> - assertEquals ( 1 , count ) ; <nl> - if ( counter . decrementAndGet ( ) = = 0 ) { <nl> - realm . close ( ) ; <nl> - signalTestFinished . countDown ( ) ; <nl> - } <nl> - } <nl> - } ; <nl> - final Realm . Transaction . Callback transactionCallback = new Realm . Transaction . Callback ( ) { <nl> - @ Override <nl> - public void onError ( Exception e ) { <nl> - RealmCache . invokeWithGlobalRefCount ( realm . getConfiguration ( ) , cacheCallback ) ; <nl> - if ( counter . get ( ) = = 0 ) { <nl> - / / Finish testing <nl> - return ; <nl> - } <nl> - realm . executeTransaction ( new Realm . Transaction ( ) { <nl> - @ Override <nl> - public void execute ( Realm realm ) { <nl> - throw new RuntimeException ( " Dummy exception " ) ; <nl> - } <nl> - } , this ) ; <nl> - } <nl> - } ; <nl> - <nl> + public void onResult ( int count ) { <nl> + assertEquals ( 1 , count ) ; <nl> + if ( counter . decrementAndGet ( ) = = 0 ) { <nl> + realm . close ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } <nl> + } ; <nl> + final Realm . Transaction . Callback transactionCallback = new Realm . Transaction . Callback ( ) { <nl> + @ Override <nl> + public void onError ( Exception e ) { <nl> + RealmCache . invokeWithGlobalRefCount ( realm . getConfiguration ( ) , cacheCallback ) ; <nl> + if ( counter . get ( ) = = 0 ) { <nl> + / / Finish testing <nl> + return ; <nl> + } <nl> realm . executeTransaction ( new Realm . Transaction ( ) { <nl> @ Override <nl> public void execute ( Realm realm ) { <nl> throw new RuntimeException ( " Dummy exception " ) ; <nl> } <nl> - } , transactionCallback ) ; <nl> + } , this ) ; <nl> } <nl> - } ) ; <nl> - try { <nl> - TestHelper . awaitOrFail ( signalTestFinished ) ; <nl> - } finally { <nl> - handlerThread . quit ( ) ; <nl> - } <nl> + } ; <nl> + <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + throw new RuntimeException ( " Dummy exception " ) ; <nl> + } <nl> + } , transactionCallback ) ; <nl> } <nl> <nl> / / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * <nl> @ @ - 292 , 7 + 266 , 7 @ @ public class RealmAsyncQueryTests { <nl> / / finding element [ 0 - 4 ] asynchronously then wait for the promise to be loaded . <nl> / / no use of notification callback <nl> @ Test <nl> - public void testFindAllAsync ( ) throws Throwable { <nl> + public void findAllAsync ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 370 , 11 + 344 , 11 @ @ public class RealmAsyncQueryTests { <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testAccessingRealmListOnUnloadedRealmObjectShouldThrow ( ) { <nl> + public void accessingRealmListOnUnloadedRealmObjectShouldThrow ( ) { <nl> Realm . asyncQueryExecutor . pause ( ) ; <nl> <nl> - populateTestRealm ( workerThread . realm , 10 ) ; <nl> - final AllTypes alltypes1 = workerThread . realm . where ( AllTypes . class ) <nl> + populateTestRealm ( looperThread . realm , 10 ) ; <nl> + final AllTypes alltypes1 = looperThread . realm . where ( AllTypes . class ) <nl> . equalTo ( " columnLong " , 0 ) <nl> . findFirstAsync ( ) ; <nl> <nl> @ @ - 386 , 13 + 360 , 13 @ @ public class RealmAsyncQueryTests { <nl> } <nl> <nl> Realm . asyncQueryExecutor . resume ( ) ; <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> Looper . loop ( ) ; <nl> <nl> } <nl> <nl> @ Test <nl> - public void testStandaloneObjectAsyncBehaviour ( ) { <nl> + public void standaloneObjectAsyncBehaviour ( ) { <nl> Dog dog = new Dog ( ) ; <nl> dog . setName ( " Akamaru " ) ; <nl> dog . setAge ( 10 ) ; <nl> @ @ - 402 , 7 + 376 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> <nl> @ Test <nl> - public void testAsyncQueryOnNonLooperThreadShouldThrow ( ) throws Throwable { <nl> + public void findAllAsync _ throwsOnNonLooperThread ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> final ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> @ @ - 449 , 10 + 423 , 10 @ @ public class RealmAsyncQueryTests { <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testReusingQuery ( ) throws Throwable { <nl> - populateTestRealm ( workerThread . realm , 10 ) ; <nl> + public void findAllAsync _ reusingQuery ( ) throws Throwable { <nl> + populateTestRealm ( looperThread . realm , 10 ) ; <nl> <nl> - RealmQuery < AllTypes > query = workerThread . realm . where ( AllTypes . class ) <nl> + RealmQuery < AllTypes > query = looperThread . realm . where ( AllTypes . class ) <nl> . between ( " columnLong " , 0 , 4 ) ; <nl> RealmResults < AllTypes > queryAllSync = query . findAll ( ) ; <nl> RealmResults < AllTypes > allAsync = query . findAllAsync ( ) ; <nl> @ @ - 465 , 7 + 439 , 7 @ @ public class RealmAsyncQueryTests { <nl> RealmResults < AllTypes > allAsyncSorted = query . findAllSorted ( " columnLong " ) ; <nl> fail ( " Should throw an exception , can not reuse RealmQuery " ) ; <nl> } catch ( IllegalStateException ignored ) { <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 473 , 11 + 447 , 11 @ @ public class RealmAsyncQueryTests { <nl> / / using a callback to be notified when the data is loaded <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testFindAllAsyncWithNotification ( ) throws Throwable { <nl> + public void findAllAsync _ withNotification ( ) throws Throwable { <nl> Realm . asyncQueryExecutor . pause ( ) ; <nl> <nl> - populateTestRealm ( workerThread . realm , 10 ) ; <nl> - final RealmResults < AllTypes > realmResults = workerThread . realm . where ( AllTypes . class ) <nl> + populateTestRealm ( looperThread . realm , 10 ) ; <nl> + final RealmResults < AllTypes > realmResults = looperThread . realm . where ( AllTypes . class ) <nl> . between ( " columnLong " , 0 , 4 ) <nl> . findAllAsync ( ) ; <nl> <nl> @ @ - 487 , 7 + 461 , 7 @ @ public class RealmAsyncQueryTests { <nl> assertTrue ( realmResults . isLoaded ( ) ) ; <nl> assertEquals ( 5 , realmResults . size ( ) ) ; <nl> assertTrue ( realmResults . get ( 4 ) . isValid ( ) ) ; <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> <nl> @ @ - 495 , 18 + 469 , 18 @ @ public class RealmAsyncQueryTests { <nl> assertEquals ( 0 , realmResults . size ( ) ) ; <nl> <nl> Realm . asyncQueryExecutor . resume ( ) ; <nl> - workerThread . keepStrongReference . add ( realmResults ) ; <nl> + looperThread . keepStrongReference . add ( realmResults ) ; <nl> } <nl> <nl> / / transforming an async query into sync by calling load to force <nl> / / the blocking behaviour <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testForceLoadAsync ( ) throws Throwable { <nl> + public void findAllAsync _ forceLoad ( ) throws Throwable { <nl> Realm . asyncQueryExecutor . pause ( ) ; <nl> <nl> - populateTestRealm ( workerThread . realm , 10 ) ; <nl> - final RealmResults < AllTypes > realmResults = workerThread . realm . where ( AllTypes . class ) <nl> + populateTestRealm ( looperThread . realm , 10 ) ; <nl> + final RealmResults < AllTypes > realmResults = looperThread . realm . where ( AllTypes . class ) <nl> . between ( " columnLong " , 0 , 4 ) <nl> . findAllAsync ( ) ; <nl> <nl> @ @ - 516 , 7 + 490 , 7 @ @ public class RealmAsyncQueryTests { <nl> public void onChange ( ) { <nl> assertTrue ( realmResults . isLoaded ( ) ) ; <nl> assertEquals ( 5 , realmResults . size ( ) ) ; <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> <nl> } <nl> } ) ; <nl> @ @ - 543 , 7 + 517 , 7 @ @ public class RealmAsyncQueryTests { <nl> / / 8 - the notification should be called once ( when we retry automatically we shouldn ' t <nl> / / notify the user ) . <nl> @ Test <nl> - public void testFindAllAsyncRetry ( ) throws Throwable { <nl> + public void findAllAsync _ retry ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 642 , 7 + 616 , 7 @ @ public class RealmAsyncQueryTests { <nl> / / 6 - now REALM _ CHANGED will trigger a COMPLETED _ UPDATE _ ASYNC _ QUERIES that should update all queries <nl> / / 7 - callbacks are notified with the latest results ( called twice overall ) <nl> @ Test <nl> - public void testFindAllAsyncBatchUpdate ( ) throws Throwable { <nl> + public void findAllAsync _ batchUpdate ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 2 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 804 , 7 + 778 , 7 @ @ public class RealmAsyncQueryTests { <nl> / / is operating on a previous version , this should retry the query on the worker thread <nl> / / to deliver the results once ( using the latest version of the Realm ) <nl> @ Test <nl> - public void testFindAllCallerIsAdvanced ( ) throws Throwable { <nl> + public void findAllAsync _ callerIsAdvanced ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch callbackInvokedFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> @ @ - 958 , 7 + 932 , 7 @ @ public class RealmAsyncQueryTests { <nl> / / update ( using the latest realm ) for all async queries is in progress <nl> / / 7 - onChange notification will be triggered once <nl> @ Test <nl> - public void testFindAllCallerThreadBehind ( ) throws Throwable { <nl> + public void findAllAsync _ callerThreadBehind ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 2 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 1095 , 7 + 1069 , 7 @ @ public class RealmAsyncQueryTests { <nl> <nl> / / similar UC as # testFindAllAsync using ' findFirst ' <nl> @ Test <nl> - public void testFindFirstAsync ( ) throws Throwable { <nl> + public void findFirstAsync ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 1162 , 8 + 1136 , 8 @ @ public class RealmAsyncQueryTests { <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testFindFirstAsyncWithInitialEmptyRow ( ) throws Throwable { <nl> - final AllTypes firstAsync = workerThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; <nl> + public void findFirstAsync _ initalEmptyRow ( ) throws Throwable { <nl> + final AllTypes firstAsync = looperThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; <nl> firstAsync . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> @ @ - 1171 , 26 + 1145 , 26 @ @ public class RealmAsyncQueryTests { <nl> assertTrue ( firstAsync . isLoaded ( ) ) ; <nl> assertTrue ( firstAsync . isValid ( ) ) ; <nl> assertEquals ( 0 , firstAsync . getColumnLong ( ) ) ; <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> assertTrue ( firstAsync . load ( ) ) ; <nl> assertTrue ( firstAsync . isLoaded ( ) ) ; <nl> assertFalse ( firstAsync . isValid ( ) ) ; <nl> <nl> - populateTestRealm ( workerThread . realm , 10 ) ; <nl> - workerThread . keepStrongReference . add ( firstAsync ) ; <nl> + populateTestRealm ( looperThread . realm , 10 ) ; <nl> + looperThread . keepStrongReference . add ( firstAsync ) ; <nl> } <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testFindFirstAsyncUpdatedIfSyncRealmObjectIsUpdated ( ) throws Throwable { <nl> - populateTestRealm ( workerThread . realm , 1 ) ; <nl> - AllTypes firstSync = workerThread . realm . where ( AllTypes . class ) . findFirst ( ) ; <nl> + public void findFirstAsync _ updatedIfsyncRealmObjectIsUpdated ( ) throws Throwable { <nl> + populateTestRealm ( looperThread . realm , 1 ) ; <nl> + AllTypes firstSync = looperThread . realm . where ( AllTypes . class ) . findFirst ( ) ; <nl> assertEquals ( 0 , firstSync . getColumnLong ( ) ) ; <nl> assertEquals ( " test data 0 " , firstSync . getColumnString ( ) ) ; <nl> <nl> - final AllTypes firstAsync = workerThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; <nl> + final AllTypes firstAsync = looperThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; <nl> assertTrue ( firstAsync . load ( ) ) ; <nl> assertTrue ( firstAsync . isLoaded ( ) ) ; <nl> assertTrue ( firstAsync . isValid ( ) ) ; <nl> @ @ - 1201 , 24 + 1175 , 24 @ @ public class RealmAsyncQueryTests { <nl> @ Override <nl> public void onChange ( ) { <nl> assertEquals ( " Galacticon " , firstAsync . getColumnString ( ) ) ; <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> <nl> - workerThread . realm . beginTransaction ( ) ; <nl> + looperThread . realm . beginTransaction ( ) ; <nl> firstSync . setColumnString ( " Galacticon " ) ; <nl> - workerThread . realm . commitTransaction ( ) ; <nl> + looperThread . realm . commitTransaction ( ) ; <nl> } <nl> <nl> / / finding elements [ 0 - 4 ] asynchronously then wait for the promise to be loaded <nl> / / using a callback to be notified when the data is loaded <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testFindFirstAsyncWithNotification ( ) throws Throwable { <nl> + public void findFirstAsync _ withNotification ( ) throws Throwable { <nl> Realm . asyncQueryExecutor . pause ( ) ; <nl> <nl> - populateTestRealm ( workerThread . realm , 10 ) ; <nl> - final AllTypes realmResults = workerThread . realm . where ( AllTypes . class ) <nl> + populateTestRealm ( looperThread . realm , 10 ) ; <nl> + final AllTypes realmResults = looperThread . realm . where ( AllTypes . class ) <nl> . between ( " columnLong " , 4 , 9 ) <nl> . findFirstAsync ( ) ; <nl> <nl> @ @ - 1228 , 7 + 1202 , 7 @ @ public class RealmAsyncQueryTests { <nl> assertTrue ( realmResults . isLoaded ( ) ) ; <nl> assertTrue ( realmResults . isValid ( ) ) ; <nl> assertEquals ( " test data 4 " , realmResults . getColumnString ( ) ) ; <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> <nl> @ @ - 1241 , 17 + 1215 , 17 @ @ public class RealmAsyncQueryTests { <nl> } <nl> <nl> Realm . asyncQueryExecutor . resume ( ) ; <nl> - workerThread . keepStrongReference . add ( realmResults ) ; <nl> + looperThread . keepStrongReference . add ( realmResults ) ; <nl> } <nl> <nl> / / similar UC as # testForceLoadAsync using ' findFirst ' <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testForceLoadFindFirstAsync ( ) throws Throwable { <nl> + public void findFirstAsync _ forceLoad ( ) throws Throwable { <nl> Realm . asyncQueryExecutor . pause ( ) ; <nl> <nl> - populateTestRealm ( workerThread . realm , 10 ) ; <nl> - final AllTypes realmResults = workerThread . realm . where ( AllTypes . class ) <nl> + populateTestRealm ( looperThread . realm , 10 ) ; <nl> + final AllTypes realmResults = looperThread . realm . where ( AllTypes . class ) <nl> . between ( " columnLong " , 4 , 9 ) <nl> . findFirstAsync ( ) ; <nl> <nl> @ @ - 1263 , 12 + 1237 , 12 @ @ public class RealmAsyncQueryTests { <nl> assertTrue ( realmResults . isLoaded ( ) ) ; <nl> assertEquals ( " test data 4 " , realmResults . getColumnString ( ) ) ; <nl> <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> <nl> / / similar UC as # testFindAllAsyncRetry using ' findFirst ' <nl> @ Test <nl> - public void testFindFirstAsyncRetry ( ) throws Throwable { <nl> + public void findFirstAsync _ retry ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 1370 , 7 + 1344 , 7 @ @ public class RealmAsyncQueryTests { <nl> <nl> / / similar UC as # testFindAllAsync using ' findAllSorted ' <nl> @ Test <nl> - public void testFindAllSortedAsync ( ) throws Throwable { <nl> + public void findAllSortedAsync ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 1453 , 7 + 1427 , 7 @ @ public class RealmAsyncQueryTests { <nl> / / finding elements [ 4 - 8 ] asynchronously then wait for the promise to be loaded <nl> / / using a callback to be notified when the data is loaded <nl> @ Test <nl> - public void testFindAllSortedAsyncRetry ( ) throws Throwable { <nl> + public void findAllSortedAsync _ retry ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 1545 , 7 + 1519 , 7 @ @ public class RealmAsyncQueryTests { <nl> <nl> / / similar UC as # testFindAllAsyncBatchUpdate using ' findAllSorted ' <nl> @ Test <nl> - public void testFindAllSortedAsyncBatchUpdate ( ) throws Throwable { <nl> + public void findAllSortedAsync _ batchUpdate ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 2 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 1706 , 7 + 1680 , 7 @ @ public class RealmAsyncQueryTests { <nl> <nl> / / similar UC as # testFindAllAsyncBatchUpdate using ' findAllSortedMulti ' <nl> @ Test <nl> - public void testFindAllSortedMultiAsyncBatchUpdate ( ) throws Throwable { <nl> + public void findAllSortedAsync _ multipleFields _ batchUpdate ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 2 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 1947 , 8 + 1921 , 8 @ @ public class RealmAsyncQueryTests { <nl> / / if unregistered properly . <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testListenerShouldNotLeak ( ) { <nl> - populateTestRealm ( workerThread . realm , 10 ) ; <nl> + public void listenerShouldNotLeak ( ) { <nl> + populateTestRealm ( looperThread . realm , 10 ) ; <nl> <nl> / / simulate the ActivityManager by creating 1 instance responsible <nl> / / of attaching an onChange listener , then simulate a configuration <nl> @ @ - 1956 , 14 + 1930 , 14 @ @ public class RealmAsyncQueryTests { <nl> / / we make sure that the GC enqueue the reference of the destroyed instance <nl> / / which indicate no memory leak <nl> MockActivityManager mockActivityManager = <nl> - MockActivityManager . newInstance ( workerThread . realm . getConfiguration ( ) ) ; <nl> + MockActivityManager . newInstance ( looperThread . realm . getConfiguration ( ) ) ; <nl> <nl> mockActivityManager . sendConfigurationChange ( ) ; <nl> <nl> assertEquals ( 1 , mockActivityManager . numberOfInstances ( ) ) ; <nl> / / remove GC ' d reference & assert that one instance should remain <nl> Iterator < Map . Entry < WeakReference < RealmResults < ? > > , RealmQuery < ? > > > iterator = <nl> - workerThread . realm . handlerController . asyncRealmResults . entrySet ( ) . iterator ( ) ; <nl> + looperThread . realm . handlerController . asyncRealmResults . entrySet ( ) . iterator ( ) ; <nl> while ( iterator . hasNext ( ) ) { <nl> Map . Entry < WeakReference < RealmResults < ? > > , RealmQuery < ? > > entry = iterator . next ( ) ; <nl> RealmResults < ? > weakReference = entry . getKey ( ) . get ( ) ; <nl> @ @ - 1972 , 18 + 1946 , 18 @ @ public class RealmAsyncQueryTests { <nl> } <nl> } <nl> <nl> - assertEquals ( 1 , workerThread . realm . handlerController . asyncRealmResults . size ( ) ) ; <nl> + assertEquals ( 1 , looperThread . realm . handlerController . asyncRealmResults . size ( ) ) ; <nl> mockActivityManager . onStop ( ) ; / / to close the Realm <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testCombiningAsyncAndSync ( ) { <nl> - populateTestRealm ( workerThread . realm , 10 ) ; <nl> + public void combiningAsyncAndSync ( ) { <nl> + populateTestRealm ( looperThread . realm , 10 ) ; <nl> <nl> Realm . asyncQueryExecutor . pause ( ) ; <nl> - final RealmResults < AllTypes > allTypesAsync = workerThread . realm . where ( AllTypes . class ) . greaterThan ( " columnLong " , 5 ) . findAllAsync ( ) ; <nl> + final RealmResults < AllTypes > allTypesAsync = looperThread . realm . where ( AllTypes . class ) . greaterThan ( " columnLong " , 5 ) . findAllAsync ( ) ; <nl> final RealmResults < AllTypes > allTypesSync = allTypesAsync . where ( ) . greaterThan ( " columnLong " , 3 ) . findAll ( ) ; <nl> <nl> assertEquals ( 0 , allTypesAsync . size ( ) ) ; <nl> @ @ - 1993 , 18 + 1967 , 18 @ @ public class RealmAsyncQueryTests { <nl> public void onChange ( ) { <nl> assertEquals ( 4 , allTypesAsync . size ( ) ) ; <nl> assertEquals ( 6 , allTypesSync . size ( ) ) ; <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> Realm . asyncQueryExecutor . resume ( ) ; <nl> - workerThread . keepStrongReference . add ( allTypesAsync ) ; <nl> + looperThread . keepStrongReference . add ( allTypesAsync ) ; <nl> } <nl> <nl> / / keep advancing the Realm by sending 1 commit for each frame ( 16ms ) <nl> / / the async queries should keep up with the modification <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testStressTestBackgroundCommits ( ) throws Throwable { <nl> + public void stressTestBackgroundCommits ( ) throws Throwable { <nl> final int NUMBER _ OF _ COMMITS = 100 ; <nl> final CountDownLatch bgRealmClosed = new CountDownLatch ( 1 ) ; <nl> final long [ ] latestLongValue = new long [ 1 ] ; <nl> @ @ - 2014 , 7 + 1988 , 7 @ @ public class RealmAsyncQueryTests { <nl> @ Override <nl> public void run ( ) { <nl> Random random = new Random ( System . currentTimeMillis ( ) ) ; <nl> - Realm backgroundThreadRealm = Realm . getInstance ( workerThread . realm . getConfiguration ( ) ) ; <nl> + Realm backgroundThreadRealm = Realm . getInstance ( looperThread . realm . getConfiguration ( ) ) ; <nl> for ( int i = 0 ; i < NUMBER _ OF _ COMMITS ; i + + ) { <nl> backgroundThreadRealm . beginTransaction ( ) ; <nl> AllTypes object = backgroundThreadRealm . createObject ( AllTypes . class ) ; <nl> @ @ - 2032 , 25 + 2006 , 25 @ @ public class RealmAsyncQueryTests { <nl> } <nl> } ; <nl> <nl> - final RealmResults < AllTypes > allAsync = workerThread . realm . where ( AllTypes . class ) . findAllAsync ( ) ; <nl> + final RealmResults < AllTypes > allAsync = looperThread . realm . where ( AllTypes . class ) . findAllAsync ( ) ; <nl> allAsync . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> assertTrue ( allAsync . isLoaded ( ) ) ; <nl> if ( allAsync . size ( ) = = NUMBER _ OF _ COMMITS ) { <nl> - AllTypes lastInserted = workerThread . realm . where ( AllTypes . class ) <nl> + AllTypes lastInserted = looperThread . realm . where ( AllTypes . class ) <nl> . equalTo ( " columnLong " , latestLongValue [ 0 ] ) <nl> . equalTo ( " columnFloat " , latestFloatValue [ 0 ] ) <nl> . findFirst ( ) ; <nl> assertNotNull ( lastInserted ) ; <nl> TestHelper . awaitOrFail ( bgRealmClosed ) ; <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } <nl> } ) ; <nl> - workerThread . keepStrongReference . add ( allAsync ) ; <nl> + looperThread . keepStrongReference . add ( allAsync ) ; <nl> <nl> - workerThread . realm . handler . postDelayed ( new Runnable ( ) { <nl> + looperThread . realm . handler . postDelayed ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> backgroundThread . start ( ) ; <nl> @ @ - 2059 , 7 + 2033 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> <nl> @ Test <nl> - public void testAsyncDistinct ( ) throws Throwable { <nl> + public void distinctAsync ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 4 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 2156 , 7 + 2130 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> <nl> @ Test <nl> - public void testAsyncDistinctNotIndexedFields ( ) throws Throwable { <nl> + public void distinctAsync _ notIndexedFields ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 4 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> @ @ - 2207 , 47 + 2181 , 47 @ @ public class RealmAsyncQueryTests { <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testAsyncDistinctFieldDoesNotExist ( ) throws Throwable { <nl> + public void distinctAsync _ noneExistingField ( ) throws Throwable { <nl> final long numberOfBlocks = 25 ; <nl> final long numberOfObjects = 10 ; / / must be greater than 1 <nl> - populateForDistinct ( workerThread . realm , numberOfBlocks , numberOfObjects , false ) ; <nl> + populateForDistinct ( looperThread . realm , numberOfBlocks , numberOfObjects , false ) ; <nl> <nl> try { <nl> - workerThread . realm . distinctAsync ( AnnotationIndexTypes . class , " doesNotExist " ) ; <nl> + looperThread . realm . distinctAsync ( AnnotationIndexTypes . class , " doesNotExist " ) ; <nl> fail ( ) ; <nl> } catch ( IllegalArgumentException ignored ) { <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void testBatchUpdateDifferentTypeOfQueries ( ) { <nl> - workerThread . realm . beginTransaction ( ) ; <nl> + public void batchUpdateDifferentTypeOfQueries ( ) { <nl> + looperThread . realm . beginTransaction ( ) ; <nl> for ( int i = 0 ; i < 5 ; ) { <nl> - AllTypes allTypes = workerThread . realm . createObject ( AllTypes . class ) ; <nl> + AllTypes allTypes = looperThread . realm . createObject ( AllTypes . class ) ; <nl> allTypes . setColumnLong ( i ) ; <nl> allTypes . setColumnString ( " data " + i % 3 ) ; <nl> <nl> - allTypes = workerThread . realm . createObject ( AllTypes . class ) ; <nl> + allTypes = looperThread . realm . createObject ( AllTypes . class ) ; <nl> allTypes . setColumnLong ( i ) ; <nl> allTypes . setColumnString ( " data " + ( + + i % 3 ) ) ; <nl> } <nl> final long numberOfBlocks = 25 ; <nl> final long numberOfObjects = 10 ; / / must be greater than 1 <nl> - workerThread . realm . commitTransaction ( ) ; <nl> - populateForDistinct ( workerThread . realm , numberOfBlocks , numberOfObjects , false ) ; <nl> + looperThread . realm . commitTransaction ( ) ; <nl> + populateForDistinct ( looperThread . realm , numberOfBlocks , numberOfObjects , false ) ; <nl> <nl> - RealmResults < AllTypes > findAllAsync = workerThread . realm . where ( AllTypes . class ) . findAllAsync ( ) ; <nl> - RealmResults < AllTypes > findAllSorted = workerThread . realm . where ( AllTypes . class ) . findAllSortedAsync ( " columnString " , Sort . ASCENDING ) ; <nl> - RealmResults < AllTypes > findAllSortedMulti = workerThread . realm . where ( AllTypes . class ) . findAllSortedAsync ( new String [ ] { " columnString " , " columnLong " } , <nl> + RealmResults < AllTypes > findAllAsync = looperThread . realm . where ( AllTypes . class ) . findAllAsync ( ) ; <nl> + RealmResults < AllTypes > findAllSorted = looperThread . realm . where ( AllTypes . class ) . findAllSortedAsync ( " columnString " , Sort . ASCENDING ) ; <nl> + RealmResults < AllTypes > findAllSortedMulti = looperThread . realm . where ( AllTypes . class ) . findAllSortedAsync ( new String [ ] { " columnString " , " columnLong " } , <nl> new Sort [ ] { Sort . ASCENDING , Sort . DESCENDING } ) ; <nl> - RealmResults < AnnotationIndexTypes > findDistinct = workerThread . realm . distinctAsync ( AnnotationIndexTypes . class , " indexString " ) ; <nl> + RealmResults < AnnotationIndexTypes > findDistinct = looperThread . realm . distinctAsync ( AnnotationIndexTypes . class , " indexString " ) ; <nl> <nl> - workerThread . keepStrongReference . add ( findAllAsync ) ; <nl> - workerThread . keepStrongReference . add ( findAllSorted ) ; <nl> - workerThread . keepStrongReference . add ( findAllSortedMulti ) ; <nl> - workerThread . keepStrongReference . add ( findDistinct ) ; <nl> + looperThread . keepStrongReference . add ( findAllAsync ) ; <nl> + looperThread . keepStrongReference . add ( findAllSorted ) ; <nl> + looperThread . keepStrongReference . add ( findAllSortedMulti ) ; <nl> + looperThread . keepStrongReference . add ( findDistinct ) ; <nl> <nl> final CountDownLatch queriesCompleted = new CountDownLatch ( 4 ) ; <nl> final AtomicInteger batchUpdateCompleted = new AtomicInteger ( 0 ) ; <nl> @ @ - 2266 , 7 + 2240 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> case 2 : { <nl> if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> break ; <nl> } <nl> @ @ - 2284 , 7 + 2258 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> case 2 : { <nl> if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> break ; <nl> } <nl> @ @ - 2302 , 7 + 2276 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> case 2 : { <nl> if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> break ; <nl> } <nl> @ @ - 2320 , 7 + 2294 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> case 2 : { <nl> if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { <nl> - workerThread . testComplete ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> break ; <nl> } <nl> @ @ - 2335 , 7 + 2309 , 7 @ @ public class RealmAsyncQueryTests { <nl> public void run ( ) { <nl> try { <nl> queriesCompleted . await ( ) ; <nl> - Realm bgRealm = Realm . getInstance ( workerThread . realm . getConfiguration ( ) ) ; <nl> + Realm bgRealm = Realm . getInstance ( looperThread . realm . getConfiguration ( ) ) ; <nl> <nl> bgRealm . beginTransaction ( ) ; <nl> bgRealm . createObject ( AllTypes . class ) ; <nl> @ @ - 2351 , 7 + 2325 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> <nl> / / this test make sure that Async queries update when using link <nl> - public void testQueryingLinkHandover ( ) throws Throwable { <nl> + public void queryingLinkHandover ( ) throws Throwable { <nl> final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> final AtomicInteger numberOfInvocations = new AtomicInteger ( 0 ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 index 69c7678 . . 5efec33 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 @ @ - 397 , 11 + 397 , 12 @ @ public class DynamicRealmTests { 
 } ) ; 
 } 
 
 - / / Initialize a Dynamic Realm used by the * Async tests . 
 + / / Initialize a Dynamic Realm used by the * Async tests and keep it ref in the looperThread . 
 private DynamicRealm initializeDynamicRealm ( ) { 
 RealmConfiguration defaultConfig = looperThread . realmConfiguration ; 
 final DynamicRealm dynamicRealm = DynamicRealm . getInstance ( defaultConfig ) ; 
 populateTestRealm ( dynamicRealm , 10 ) ; 
 + looperThread . keepStrongReference . add ( dynamicRealm ) ; 
 return dynamicRealm ; 
 } 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 index 80a7ed4 . . b03478a 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 1020 , 6 + 1020 , 7 @ @ public class NotificationsTest { 
 realm . createObject ( AllTypes . class ) ; 
 realm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( results ) ; 
 results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 @ @ - 1227 , 6 + 1228 , 7 @ @ public class NotificationsTest { 
 
 assertEquals ( 1 , results . size ( ) ) ; 
 
 + looperThread . keepStrongReference . add ( asyncResults ) ; 
 asyncResults . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > element ) { 
 @ @ - 1325 , 6 + 1327 , 7 @ @ public class NotificationsTest { 
 realm . commitTransaction ( ) ; 
 
 RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllAsync ( ) ; 
 + looperThread . keepStrongReference . add ( results ) ; 
 results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > element ) { 
 @ @ - 1344 , 6 + 1347 , 7 @ @ public class NotificationsTest { 
 final RealmResults < AllTypes > syncResults = realm . where ( AllTypes . class ) . findAll ( ) ; 
 
 RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllAsync ( ) ; 
 + looperThread . keepStrongReference . add ( results ) ; 
 results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > results ) { 
 @ @ - 1380 , 6 + 1384 , 8 @ @ public class NotificationsTest { 
 final Realm realm = looperThread . realm ; 
 final RealmResults < AllTypes > syncResults1 = realm . where ( AllTypes . class ) . findAll ( ) ; 
 final RealmResults < AllTypes > syncResults2 = realm . where ( AllTypes . class ) . findAll ( ) ; 
 + 
 + looperThread . keepStrongReference . add ( syncResults1 ) ; 
 syncResults1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > element ) { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 index 7ccb8ba . . f4707f7 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 @ @ - 328 , 6 + 328 , 7 @ @ public class RealmAsyncQueryTests { 
 assertFalse ( results . isLoaded ( ) ) ; 
 assertEquals ( 0 , results . size ( ) ) ; 
 
 + looperThread . keepStrongReference . add ( results ) ; 
 results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 @ @ - 437 , 6 + 438 , 7 @ @ public class RealmAsyncQueryTests { 
 . between ( " columnLong " , 0 , 4 ) 
 . findAllAsync ( ) ; 
 
 + looperThread . keepStrongReference . add ( realmResults ) ; 
 / / notification should be called as well 
 realmResults . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 @ @ - 512 , 6 + 514 , 7 @ @ public class RealmAsyncQueryTests { 
 assertEquals ( 0 , realmResults . size ( ) ) ; 
 
 / / 6 . Callback triggered after retry has completed 
 + looperThread . keepStrongReference . add ( realmResults ) ; 
 realmResults . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 @ @ - 594 , 6 + 597 , 9 @ @ public class RealmAsyncQueryTests { 
 } 
 } ; 
 
 + looperThread . keepStrongReference . add ( realmResults1 ) ; 
 + looperThread . keepStrongReference . add ( realmResults2 ) ; 
 + 
 realmResults1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 @ @ - 675 , 6 + 681 , 8 @ @ public class RealmAsyncQueryTests { 
 assertFalse ( realmResults . isLoaded ( ) ) ; 
 assertEquals ( 0 , realmResults . size ( ) ) ; 
 
 + looperThread . keepStrongReference . add ( realmResults ) ; 
 + 
 / / Add change listener that should only be called once 
 realmResults . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 @ @ - 772 , 6 + 780 , 9 @ @ public class RealmAsyncQueryTests { 
 } 
 } ; 
 
 + looperThread . keepStrongReference . add ( realmResults1 ) ; 
 + looperThread . keepStrongReference . add ( realmResults2 ) ; 
 + 
 realmResults1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 @ @ - 809 , 7 + 820 , 7 @ @ public class RealmAsyncQueryTests { 
 final AllTypes asyncObj = realm . where ( AllTypes . class ) . findFirstAsync ( ) ; 
 assertFalse ( asyncObj . isValid ( ) ) ; 
 assertFalse ( asyncObj . isLoaded ( ) ) ; 
 - 
 + looperThread . keepStrongReference . add ( asyncObj ) ; 
 asyncObj . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { 
 @ Override 
 public void onChange ( AllTypes object ) { 
 @ @ - 825 , 6 + 836 , 7 @ @ public class RealmAsyncQueryTests { 
 public void findFirstAsync _ initalEmptyRow ( ) throws Throwable { 
 Realm realm = looperThread . realm ; 
 final AllTypes firstAsync = realm . where ( AllTypes . class ) . findFirstAsync ( ) ; 
 + looperThread . keepStrongReference . add ( firstAsync ) ; 
 firstAsync . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { 
 @ Override 
 public void onChange ( AllTypes object ) { 
 @ @ - 859 , 6 + 871 , 7 @ @ public class RealmAsyncQueryTests { 
 assertEquals ( 0 , firstAsync . getColumnLong ( ) ) ; 
 assertEquals ( " test data 0 " , firstAsync . getColumnString ( ) ) ; 
 
 + looperThread . keepStrongReference . add ( firstAsync ) ; 
 firstAsync . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { 
 @ Override 
 public void onChange ( AllTypes object ) { 
 @ @ - 883 , 6 + 896 , 7 @ @ public class RealmAsyncQueryTests { 
 . between ( " columnLong " , 4 , 9 ) 
 . findFirstAsync ( ) ; 
 
 + looperThread . keepStrongReference . add ( realmResults ) ; 
 realmResults . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { 
 @ Override 
 public void onChange ( AllTypes object ) { 
 @ @ - 976 , 6 + 990 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 
 / / Add change listener that should only be called once after the retry completed . 
 + looperThread . keepStrongReference . add ( realmResults ) ; 
 realmResults . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { 
 @ Override 
 public void onChange ( AllTypes object ) { 
 @ @ - 1006 , 6 + 1021 , 7 @ @ public class RealmAsyncQueryTests { 
 assertFalse ( results . isLoaded ( ) ) ; 
 assertEquals ( 0 , results . size ( ) ) ; 
 
 + looperThread . keepStrongReference . add ( results ) ; 
 results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 @ @ - 1068 , 6 + 1084 , 7 @ @ public class RealmAsyncQueryTests { 
 / / 4 . Intercepting the query completed event the first time will 
 / / cause a commit that should cause the findAllSortedAsync to be re - run . 
 / / This change listener should only be called with the final result . 
 + looperThread . keepStrongReference . add ( realmResults ) ; 
 realmResults . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 @ @ - 1161 , 6 + 1178 , 9 @ @ public class RealmAsyncQueryTests { 
 } 
 } ; 
 
 + looperThread . keepStrongReference . add ( realmResults1 ) ; 
 + looperThread . keepStrongReference . add ( realmResults2 ) ; 
 + 
 realmResults1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 @ @ - 1302 , 6 + 1322 , 9 @ @ public class RealmAsyncQueryTests { 
 } 
 } ; 
 
 + looperThread . keepStrongReference . add ( realmResults1 ) ; 
 + looperThread . keepStrongReference . add ( realmResults2 ) ; 
 + 
 realmResults1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 @ @ - 1558 , 6 + 1581 , 10 @ @ public class RealmAsyncQueryTests { 
 } 
 } ; 
 
 + looperThread . keepStrongReference . add ( distinctBool ) ; 
 + looperThread . keepStrongReference . add ( distinctLong ) ; 
 + looperThread . keepStrongReference . add ( distinctDate ) ; 
 + looperThread . keepStrongReference . add ( distinctString ) ; 
 distinctBool . addChangeListener ( new RealmChangeListener < RealmResults < AnnotationIndexTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AnnotationIndexTypes > object ) { 
 @ @ - 1767 , 6 + 1794 , 7 @ @ public class RealmAsyncQueryTests { 
 final Realm realm = looperThread . realm ; 
 
 final RealmResults < Dog > allAsync = realm . where ( Dog . class ) . equalTo ( " owner . name " , " kiba " ) . findAllAsync ( ) ; 
 + looperThread . keepStrongReference . add ( allAsync ) ; 
 allAsync . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < Dog > object ) { 
 @ @ - 1826 , 6 + 1854 , 7 @ @ public class RealmAsyncQueryTests { 
 Realm . asyncTaskExecutor . pause ( ) ; 
 
 final AllTypes firstAsync = looperThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; 
 + looperThread . keepStrongReference . add ( firstAsync ) ; 
 firstAsync . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { 
 @ Override 
 public void onChange ( AllTypes object ) { 
 @ @ - 1959 , 6 + 1988 , 7 @ @ public class RealmAsyncQueryTests { 
 
 / / 1 . Make sure that async query is not started 
 final RealmResults < AllTypes > result = realm . where ( AllTypes . class ) . findAllSortedAsync ( AllTypes . FIELD _ STRING ) ; 
 + looperThread . keepStrongReference . add ( result ) ; 
 result . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 index 4778fbe . . 23f08c5 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 @ @ - 98 , 6 + 98 , 7 @ @ public class RealmChangeListenerTests { 
 public void returnedRealmResultsIsNotNull ( ) { 
 Realm realm = looperThread . realm ; 
 RealmResults < Cat > cats = realm . where ( Cat . class ) . findAll ( ) ; 
 + looperThread . keepStrongReference . add ( cats ) ; 
 cats . addChangeListener ( new RealmChangeListener < RealmResults < Cat > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < Cat > result ) { 
 @ @ - 116 , 6 + 117 , 7 @ @ public class RealmChangeListenerTests { 
 public void returnedRealmResultsOfModelIsNotNull ( ) { 
 Realm realm = looperThread . realm ; 
 RealmResults < AllTypesRealmModel > alltypes = realm . where ( AllTypesRealmModel . class ) . findAll ( ) ; 
 + looperThread . keepStrongReference . add ( alltypes ) ; 
 alltypes . addChangeListener ( new RealmChangeListener < RealmResults < AllTypesRealmModel > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypesRealmModel > result ) { 
 @ @ - 139 , 6 + 141 , 7 @ @ public class RealmChangeListenerTests { 
 Cat cat = looperThread . realm . createObject ( Cat . class ) ; 
 realm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( cat ) ; 
 cat . addChangeListener ( new RealmChangeListener < Cat > ( ) { 
 @ Override 
 public void onChange ( Cat object ) { 
 @ @ - 160 , 6 + 163 , 7 @ @ public class RealmChangeListenerTests { 
 AllTypesRealmModel model = realm . createObject ( AllTypesRealmModel . class ) ; 
 realm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( model ) ; 
 RealmObject . addChangeListener ( model , new RealmChangeListener < AllTypesRealmModel > ( ) { 
 @ Override 
 public void onChange ( AllTypesRealmModel object ) { 
 @ @ - 184 , 6 + 188 , 7 @ @ public class RealmChangeListenerTests { 
 DynamicRealmObject allTypes = dynamicRealm . createObject ( AllTypes . CLASS _ NAME ) ; 
 dynamicRealm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( allTypes ) ; 
 allTypes . addChangeListener ( new RealmChangeListener < DynamicRealmObject > ( ) { 
 @ Override 
 public void onChange ( DynamicRealmObject object ) { 
 @ @ - 205 , 6 + 210 , 7 @ @ public class RealmChangeListenerTests { 
 
 final DynamicRealm dynamicRealm = DynamicRealm . getInstance ( looperThread . realmConfiguration ) ; 
 RealmResults < DynamicRealmObject > all = dynamicRealm . where ( AllTypes . CLASS _ NAME ) . findAll ( ) ; 
 + looperThread . keepStrongReference . add ( all ) ; 
 all . addChangeListener ( new RealmChangeListener < RealmResults < DynamicRealmObject > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < DynamicRealmObject > result ) { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmModelTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmModelTests . java 
 index 5bf3868 . . d634c2a 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmModelTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmModelTests . java 
 @ @ - 192 , 6 + 192 , 7 @ @ public class RealmModelTests { 
 populateTestRealm ( realm , TEST _ DATA _ SIZE ) ; 
 
 final RealmResults < AllTypesRealmModel > allTypesRealmModels = realm . where ( AllTypesRealmModel . class ) . distinctAsync ( AllTypesRealmModel . FIELD _ STRING ) ; 
 + looperThread . keepStrongReference . add ( allTypesRealmModels ) ; 
 allTypesRealmModels . addChangeListener ( new RealmChangeListener < RealmResults < AllTypesRealmModel > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypesRealmModel > object ) { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 index 644d3ca . . 7c64ba4 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 @ @ - 1716 , 6 + 1716 , 7 @ @ public class RealmObjectTests { 
 allTypesPrimaryKey = realm . copyToRealmOrUpdate ( allTypesPrimaryKey ) ; 
 realm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( allTypesPrimaryKey ) ; 
 allTypesPrimaryKey . addChangeListener ( new RealmChangeListener < AllTypesPrimaryKey > ( ) { 
 @ Override 
 public void onChange ( AllTypesPrimaryKey element ) { 
 @ @ - 1793 , 6 + 1794 , 7 @ @ public class RealmObjectTests { 
 realm . handlerController . realmObjects ; 
 
 final AllTypesPrimaryKey allTypesPrimaryKey = realm . where ( AllTypesPrimaryKey . class ) . findFirstAsync ( ) ; 
 + looperThread . keepStrongReference . add ( allTypesPrimaryKey ) ; 
 allTypesPrimaryKey . addChangeListener ( new RealmChangeListener < AllTypesPrimaryKey > ( ) { 
 @ Override 
 public void onChange ( AllTypesPrimaryKey element ) { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 index 9c50d71 . . 5dcce6c 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 @ @ - 2311 , 6 + 2311 , 10 @ @ public class RealmQueryTests { 
 } 
 } ; 
 
 + looperThread . keepStrongReference . add ( distinctBool ) ; 
 + looperThread . keepStrongReference . add ( distinctLong ) ; 
 + looperThread . keepStrongReference . add ( distinctDate ) ; 
 + looperThread . keepStrongReference . add ( distinctString ) ; 
 distinctBool . addChangeListener ( new RealmChangeListener < RealmResults < AnnotationIndexTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AnnotationIndexTypes > object ) { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 index ebc5546 . . cf2ea4f 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 @ @ - 342 , 7 + 342 , 7 @ @ public class RealmResultsTests extends CollectionTests { 
 @ Test 
 @ RunTestInLooperThread 
 public void changeListener _ syncIfNeeded _ updatedFromOtherThread ( ) { 
 - final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( " Foo " ) ) ; 
 + final Realm realm = looperThread . realm ; 
 populateTestRealm ( realm , 10 ) ; 
 
 final RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . lessThan ( AllTypes . FIELD _ LONG , 10 ) . findAll ( ) ; 
 @ @ - 450 , 6 + 450 , 10 @ @ public class RealmResultsTests extends CollectionTests { 
 } 
 } ; 
 
 + looperThread . keepStrongReference . add ( distinctBool ) ; 
 + looperThread . keepStrongReference . add ( distinctLong ) ; 
 + looperThread . keepStrongReference . add ( distinctDate ) ; 
 + looperThread . keepStrongReference . add ( distinctString ) ; 
 distinctBool . addChangeListener ( new RealmChangeListener < RealmResults < AnnotationIndexTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AnnotationIndexTypes > object ) { 
 @ @ - 512 , 6 + 516 , 8 @ @ public class RealmResultsTests extends CollectionTests { 
 } 
 } ; 
 
 + looperThread . keepStrongReference . add ( distinctDate ) ; 
 + looperThread . keepStrongReference . add ( distinctString ) ; 
 distinctDate . addChangeListener ( new RealmChangeListener < RealmResults < AnnotationIndexTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AnnotationIndexTypes > object ) { 
 @ @ - 856 , 6 + 862 , 7 @ @ public class RealmResultsTests extends CollectionTests { 
 Realm realm = looperThread . realm ; 
 RealmResults < AllTypes > collection = realm . where ( AllTypes . class ) . findAll ( ) ; 
 
 + looperThread . keepStrongReference . add ( collection ) ; 
 collection . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 @ @ - 900 , 6 + 907 , 7 @ @ public class RealmResultsTests extends CollectionTests { 
 } ) ; 
 
 / / Adding it twice will be ignored , so removing it will not cause the listener to be triggered . 
 + looperThread . keepStrongReference . add ( collection ) ; 
 collection . addChangeListener ( listener ) ; 
 collection . addChangeListener ( listener ) ; 
 collection . removeChangeListener ( listener ) ; 
 @ @ - 933 , 6 + 941 , 7 @ @ public class RealmResultsTests extends CollectionTests { 
 } 
 } ; 
 
 + looperThread . keepStrongReference . add ( collection ) ; 
 collection . addChangeListener ( listener ) ; 
 collection . removeChangeListener ( listener ) ; 
 
 @ @ - 983 , 6 + 992 , 7 @ @ public class RealmResultsTests extends CollectionTests { 
 } 
 } ; 
 
 + looperThread . keepStrongReference . add ( collection ) ; 
 collection . addChangeListener ( listenerA ) ; 
 collection . addChangeListener ( listenerB ) ; 
 collection . removeChangeListeners ( ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index 063c513 . . 5bd703a 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 2799 , 7 + 2799 , 7 @ @ public class RealmTests { 
 @ Test 
 @ RunTestInLooperThread 
 public void closeRealmInChangeListenerWhenThereIsListenerOnEmptyObject ( ) { 
 - final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( ) ) ; 
 + final Realm realm = looperThread . realm ; 
 final RealmChangeListener < AllTypes > dummyListener = new RealmChangeListener < AllTypes > ( ) { 
 @ Override 
 public void onChange ( AllTypes object ) { 
 @ @ - 2840 , 7 + 2840 , 7 @ @ public class RealmTests { 
 @ Test 
 @ RunTestInLooperThread 
 public void closeRealmInChangeListenerWhenThereIsListenerOnObject ( ) { 
 - final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( ) ) ; 
 + final Realm realm = looperThread . realm ; 
 final RealmChangeListener < AllTypes > dummyListener = new RealmChangeListener < AllTypes > ( ) { 
 @ Override 
 public void onChange ( AllTypes object ) { 
 @ @ - 2885 , 7 + 2885 , 7 @ @ public class RealmTests { 
 @ Test 
 @ RunTestInLooperThread 
 public void closeRealmInChangeListenerWhenThereIsListenerOnResults ( ) { 
 - final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( ) ) ; 
 + final Realm realm = looperThread . realm ; 
 final RealmChangeListener < RealmResults < AllTypes > > dummyListener = new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > object ) { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 index 7c787c5 . . 396e9cd 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 @ @ - 344 , 7 + 344 , 7 @ @ public class SortTest { 
 public void resorting ( ) throws InterruptedException { 
 final AtomicInteger changeListenerCalled = new AtomicInteger ( 4 ) ; 
 
 - final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( ) ) ; 
 + final Realm realm = looperThread . realm ; 
 realm . setAutoRefresh ( true ) ; 
 
 final Runnable endTest = new Runnable ( ) { 
 @ @ - 365 , 6 + 365 , 7 @ @ public class SortTest { 
 
 / / rr0 : [ 0 , 1 , 2 , 3 ] 
 final RealmResults < AllTypes > rr0 = realm . where ( AllTypes . class ) . findAll ( ) ; 
 + looperThread . keepStrongReference . add ( rr0 ) ; 
 rr0 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > element ) { 
 @ @ - 376 , 6 + 377 , 7 @ @ public class SortTest { 
 
 / / rr1 : [ 1 , 2 , 0 , 3 ] 
 final RealmResults < AllTypes > rr1 = realm . where ( AllTypes . class ) . findAll ( ) . sort ( FIELD _ LONG , Sort . ASCENDING ) ; 
 + looperThread . keepStrongReference . add ( rr1 ) ; 
 rr1 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > element ) { 
 @ @ - 391 , 6 + 393 , 7 @ @ public class SortTest { 
 
 / / rr2 : [ 0 , 3 , 1 , 2 ] 
 final RealmResults < AllTypes > rr2 = realm . where ( AllTypes . class ) . findAll ( ) . sort ( FIELD _ LONG , Sort . DESCENDING ) ; 
 + looperThread . keepStrongReference . add ( rr2 ) ; 
 rr2 . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > element ) { 
 @ @ - 479 , 6 + 482 , 7 @ @ public class SortTest { 
 
 RealmResults < AllTypes > objectsAscending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . ASCENDING ) ; 
 assertEquals ( TEST _ SIZE , objectsAscending . size ( ) ) ; 
 + looperThread . keepStrongReference . add ( objectsAscending ) ; 
 objectsAscending . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > element ) { 
 @ @ - 494 , 6 + 498 , 7 @ @ public class SortTest { 
 
 RealmResults < AllTypes > objectsDescending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . DESCENDING ) ; 
 assertEquals ( TEST _ SIZE , objectsDescending . size ( ) ) ; 
 + looperThread . keepStrongReference . add ( objectsDescending ) ; 
 objectsDescending . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < AllTypes > element ) { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 index ae3d2f8 . . 34cbeef 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 @ @ - 104 , 6 + 104 , 7 @ @ public class TypeBasedNotificationsTests { 
 final Dog dog = realm . createObject ( Dog . class ) ; 
 realm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( dog ) ; 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ Override 
 public void onChange ( Dog object ) { 
 @ @ - 121 , 6 + 122 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ RunTestInLooperThread 
 public void callback _ should _ trigger _ for _ createObject _ dynamic _ realm ( ) { 
 final DynamicRealm realm = DynamicRealm . getInstance ( looperThread . realmConfiguration ) ; 
 + looperThread . keepStrongReference . add ( realm ) ; 
 realm . addChangeListener ( new RealmChangeListener < DynamicRealm > ( ) { 
 @ Override 
 public void onChange ( DynamicRealm object ) { 
 @ @ - 141 , 6 + 143 , 7 @ @ public class TypeBasedNotificationsTests { 
 final DynamicRealmObject dog = realm . createObject ( " Dog " ) ; 
 realm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( dog ) ; 
 dog . addChangeListener ( new RealmChangeListener < DynamicRealmObject > ( ) { 
 @ Override 
 public void onChange ( DynamicRealmObject object ) { 
 @ @ - 180 , 6 + 183 , 7 @ @ public class TypeBasedNotificationsTests { 
 final Dog dog = realm . copyToRealm ( akamaru ) ; 
 realm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( dog ) ; 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ Override 
 public void onChange ( Dog object ) { 
 @ @ - 221 , 6 + 225 , 7 @ @ public class TypeBasedNotificationsTests { 
 final PrimaryKeyAsLong primaryKeyAsLong = realm . copyToRealmOrUpdate ( obj ) ; 
 realm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( primaryKeyAsLong ) ; 
 primaryKeyAsLong . addChangeListener ( new RealmChangeListener < PrimaryKeyAsLong > ( ) { 
 @ Override 
 public void onChange ( PrimaryKeyAsLong object ) { 
 @ @ - 268 , 6 + 273 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . commitTransaction ( ) ; 
 in . close ( ) ; 
 
 + looperThread . keepStrongReference . add ( objectFromJson ) ; 
 objectFromJson . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { 
 @ Override 
 public void onChange ( AllTypes object ) { 
 @ @ - 323 , 6 + 329 , 7 @ @ public class TypeBasedNotificationsTests { 
 final AllTypes objectFromJson = realm . createObjectFromJson ( AllTypes . class , json ) ; 
 realm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( objectFromJson ) ; 
 objectFromJson . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { 
 @ Override 
 public void onChange ( AllTypes object ) { 
 @ @ - 386 , 6 + 393 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . commitTransaction ( ) ; 
 in . close ( ) ; 
 
 + looperThread . keepStrongReference . add ( objectFromJson ) ; 
 objectFromJson . addChangeListener ( new RealmChangeListener < AllTypesPrimaryKey > ( ) { 
 @ Override 
 public void onChange ( AllTypesPrimaryKey object ) { 
 @ @ - 445 , 6 + 453 , 7 @ @ public class TypeBasedNotificationsTests { 
 final AllTypesPrimaryKey newObj = realm . createOrUpdateObjectFromJson ( AllTypesPrimaryKey . class , json ) ; 
 realm . commitTransaction ( ) ; 
 
 + looperThread . keepStrongReference . add ( newObj ) ; 
 newObj . addChangeListener ( new RealmChangeListener < AllTypesPrimaryKey > ( ) { 
 @ Override 
 public void onChange ( AllTypesPrimaryKey object ) { 
 @ @ - 478 , 6 + 487 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . commitTransaction ( ) ; 
 
 final Dog dog = realm . where ( Dog . class ) . findFirst ( ) ; 
 + looperThread . keepStrongReference . add ( dog ) ; 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ Override 
 public void onChange ( Dog object ) { 
 @ @ - 536 , 6 + 546 , 7 @ @ public class TypeBasedNotificationsTests { 
 final Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; 
 assertTrue ( dog . load ( ) ) ; 
 
 + looperThread . keepStrongReference . add ( dog ) ; 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ Override 
 public void onChange ( Dog object ) { 
 @ @ - 613 , 6 + 624 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 final Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; 
 assertTrue ( dog . load ( ) ) ; 
 + looperThread . keepStrongReference . add ( dog ) ; 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ Override 
 public void onChange ( Dog object ) { 
 @ @ - 713 , 6 + 725 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 final Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; 
 assertTrue ( dog . load ( ) ) ; 
 + looperThread . keepStrongReference . add ( dog ) ; 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ Override 
 public void onChange ( Dog object ) { 
 @ @ - 797 , 6 + 810 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . commitTransaction ( ) ; 
 
 final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < Dog > object ) { 
 @ @ - 854 , 6 + 868 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAllAsync ( ) ; 
 assertTrue ( dogs . load ( ) ) ; 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < Dog > object ) { 
 @ @ - 930 , 6 + 945 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . commitTransaction ( ) ; 
 
 Dog dog = realm . where ( Dog . class ) . findFirst ( ) ; 
 + looperThread . keepStrongReference . add ( dog ) ; 
 for ( int i = 0 ; i < NUMBER _ OF _ LISTENERS ; i + + ) { 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ Override 
 @ @ - 971 , 6 + 987 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; 
 assertTrue ( dog . load ( ) ) ; 
 + looperThread . keepStrongReference . add ( dog ) ; 
 for ( int i = 0 ; i < NUMBER _ OF _ LISTENERS ; i + + ) { 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ Override 
 @ @ - 1009 , 6 + 1026 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . commitTransaction ( ) ; 
 
 RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 for ( int i = 0 ; i < NUMBER _ OF _ LISTENERS ; i + + ) { 
 dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 @ @ - 1049 , 6 + 1067 , 7 @ @ public class TypeBasedNotificationsTests { 
 RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAllAsync ( ) ; 
 assertTrue ( dogs . load ( ) ) ; 
 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 for ( int i = 0 ; i < NUMBER _ OF _ LISTENERS ; i + + ) { 
 dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 @ @ - 1096 , 6 + 1115 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . commitTransaction ( ) ; 
 
 Dog dog = realm . where ( Dog . class ) . findFirst ( ) ; 
 + looperThread . keepStrongReference . add ( dog ) ; 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ Override 
 public void onChange ( Dog object ) { 
 @ @ - 1168 , 6 + 1188 , 7 @ @ public class TypeBasedNotificationsTests { 
 } ; 
 
 Dog dog = realm . where ( Dog . class ) . findFirstAsync ( ) ; 
 + looperThread . keepStrongReference . add ( dog ) ; 
 dog . addChangeListener ( new RealmChangeListener < Dog > ( ) { 
 @ Override 
 public void onChange ( Dog object ) { 
 @ @ - 1214 , 6 + 1235 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . commitTransaction ( ) ; 
 
 final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < Dog > object ) { 
 @ @ - 1279 , 6 + 1301 , 7 @ @ public class TypeBasedNotificationsTests { 
 } ; 
 
 final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAllAsync ( ) ; 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < Dog > object ) { 
 @ @ - 1426 , 6 + 1449 , 8 @ @ public class TypeBasedNotificationsTests { 
 finishedLatch . countDown ( ) ; 
 } 
 } ; 
 + looperThread . keepStrongReference . add ( results1 ) ; 
 + looperThread . keepStrongReference . add ( results2 ) ; 
 results1 . addChangeListener ( listener ) ; 
 results2 . addChangeListener ( listener ) ; 
 
 @ @ - 1451 , 6 + 1476 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 final RealmResults < Dog > dogs = 
 allTypes . getColumnRealmList ( ) . where ( ) . equalTo ( Dog . FIELD _ NAME , " name _ 0 " ) . findAll ( ) ; 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < Dog > object ) {

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 index 9b16b9c . . e6cc8af 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 @ @ - 64 , 7 + 64 , 7 @ @ public class RealmAsyncQueryTests { 
 private Context context ; 
 
 @ Rule 
 - public final RunInLooperThread workerThread = new RunInLooperThread ( ) ; 
 + public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; 
 
 @ Before 
 public void setUp ( ) throws Exception { 
 @ @ - 78 , 10 + 78 , 10 @ @ public class RealmAsyncQueryTests { 
 / / start asynchronously a transaction to insert one element 
 @ Test 
 @ RunTestInLooperThread 
 - public void testAsyncTransaction ( ) throws Throwable { 
 - assertEquals ( 0 , workerThread . realm . allObjects ( Owner . class ) . size ( ) ) ; 
 + public void executeTransaction _ async ( ) throws Throwable { 
 + assertEquals ( 0 , looperThread . realm . allObjects ( Owner . class ) . size ( ) ) ; 
 
 - workerThread . realm . executeTransaction ( new Realm . Transaction ( ) { 
 + looperThread . realm . executeTransaction ( new Realm . Transaction ( ) { 
 @ Override 
 public void execute ( Realm realm ) { 
 Owner owner = realm . createObject ( Owner . class ) ; 
 @ @ - 90 , 23 + 90 , 23 @ @ public class RealmAsyncQueryTests { 
 } , new Realm . Transaction . Callback ( ) { 
 @ Override 
 public void onSuccess ( ) { 
 - assertEquals ( 1 , workerThread . realm . allObjects ( Owner . class ) . size ( ) ) ; 
 - assertEquals ( " Owner " , workerThread . realm . where ( Owner . class ) . findFirst ( ) . getName ( ) ) ; 
 - workerThread . testComplete ( ) ; 
 + assertEquals ( 1 , looperThread . realm . allObjects ( Owner . class ) . size ( ) ) ; 
 + assertEquals ( " Owner " , looperThread . realm . where ( Owner . class ) . findFirst ( ) . getName ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 
 @ Override 
 public void onError ( Exception e ) { 
 - workerThread . testComplete ( ) ; ; 
 + looperThread . testComplete ( ) ; ; 
 fail ( e . getMessage ( ) ) ; 
 } 
 } ) ; 
 } 
 
 + / / Test that an async transaction that throws an exception propagate it properly to the user . 
 @ Test 
 - public void testAsyncTransactionThatThrowsRuntimeException ( ) throws Throwable { 
 + public void executeTransaction _ async _ exceptionHandling ( ) throws Throwable { 
 final TestHelper . TestLogger testLogger = new TestHelper . TestLogger ( ) ; 
 - 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Realm [ ] realm = new Realm [ 1 ] ; 
 @ @ - 181 , 108 + 181 , 82 @ @ public class RealmAsyncQueryTests { 
 
 / / Test if the background Realm is closed when transaction success returned . 
 @ Test 
 - public void testClosedBeforeAsyncTransactionSuccess ( ) { 
 - final CountDownLatch signalTestFinished = new CountDownLatch ( 1 ) ; 
 - HandlerThread handlerThread = new HandlerThread ( " background " ) ; 
 - handlerThread . start ( ) ; 
 - final Handler handler = new Handler ( handlerThread . getLooper ( ) ) ; 
 - handler . post ( new Runnable ( ) { 
 + @ RunTestInLooperThread 
 + public void executeTransaction _ async _ realmClosedOnSuccess ( ) { 
 + final AtomicInteger counter = new AtomicInteger ( 100 ) ; 
 + final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( " testClosedBeforeAsyncTransactionSuccess " ) ) ; 
 + final RealmCache . Callback cacheCallback = new RealmCache . Callback ( ) { 
 @ Override 
 - public void run ( ) { 
 - final AtomicInteger counter = new AtomicInteger ( 100 ) ; 
 - final Realm realm = openRealmInstance ( " testClosedBeforeAsyncTransactionSuccess " ) ; 
 - final RealmCache . Callback cacheCallback = new RealmCache . Callback ( ) { 
 - @ Override 
 - public void onResult ( int count ) { 
 - assertEquals ( 1 , count ) ; 
 - if ( counter . decrementAndGet ( ) = = 0 ) { 
 - realm . close ( ) ; 
 - signalTestFinished . countDown ( ) ; 
 - } 
 - } 
 - } ; 
 - final Realm . Transaction . Callback transactionCallback = new Realm . Transaction . Callback ( ) { 
 - @ Override 
 - public void onSuccess ( ) { 
 - RealmCache . invokeWithGlobalRefCount ( realm . getConfiguration ( ) , cacheCallback ) ; 
 - if ( counter . get ( ) = = 0 ) { 
 - / / Finish testing 
 - return ; 
 - } 
 - realm . executeTransaction ( new Realm . Transaction ( ) { 
 - @ Override 
 - public void execute ( Realm realm ) { 
 - } 
 - } , this ) ; 
 - } 
 - } ; 
 - 
 + public void onResult ( int count ) { 
 + assertEquals ( 1 , count ) ; 
 + if ( counter . decrementAndGet ( ) = = 0 ) { 
 + realm . close ( ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + } 
 + } ; 
 + final Realm . Transaction . Callback transactionCallback = new Realm . Transaction . Callback ( ) { 
 + @ Override 
 + public void onSuccess ( ) { 
 + RealmCache . invokeWithGlobalRefCount ( realm . getConfiguration ( ) , cacheCallback ) ; 
 + if ( counter . get ( ) = = 0 ) { 
 + / / Finish testing 
 + return ; 
 + } 
 realm . executeTransaction ( new Realm . Transaction ( ) { 
 @ Override 
 public void execute ( Realm realm ) { 
 } 
 - } , transactionCallback ) ; 
 + } , this ) ; 
 } 
 - } ) ; 
 - try { 
 - TestHelper . awaitOrFail ( signalTestFinished ) ; 
 - } finally { 
 - handlerThread . quit ( ) ; 
 - } 
 + } ; 
 + 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + } 
 + } , transactionCallback ) ; 
 } 
 
 / / Test if the background Realm is closed when transaction error returned . 
 @ Test 
 - public void testClosedBeforeAsyncTransactionError ( ) { 
 - final CountDownLatch signalTestFinished = new CountDownLatch ( 1 ) ; 
 - HandlerThread handlerThread = new HandlerThread ( " background " ) ; 
 - handlerThread . start ( ) ; 
 - final Handler handler = new Handler ( handlerThread . getLooper ( ) ) ; 
 - handler . post ( new Runnable ( ) { 
 + @ RunTestInLooperThread 
 + public void executeTransaction _ async _ realmClosedOnError ( ) { 
 + final AtomicInteger counter = new AtomicInteger ( 100 ) ; 
 + final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( " testClosedBeforeAsyncTransactionSuccess " ) ) ; 
 + final RealmCache . Callback cacheCallback = new RealmCache . Callback ( ) { 
 @ Override 
 - public void run ( ) { 
 - final AtomicInteger counter = new AtomicInteger ( 100 ) ; 
 - final Realm realm = openRealmInstance ( " testClosedBeforeAsyncTransactionSuccess " ) ; 
 - final RealmCache . Callback cacheCallback = new RealmCache . Callback ( ) { 
 - @ Override 
 - public void onResult ( int count ) { 
 - assertEquals ( 1 , count ) ; 
 - if ( counter . decrementAndGet ( ) = = 0 ) { 
 - realm . close ( ) ; 
 - signalTestFinished . countDown ( ) ; 
 - } 
 - } 
 - } ; 
 - final Realm . Transaction . Callback transactionCallback = new Realm . Transaction . Callback ( ) { 
 - @ Override 
 - public void onError ( Exception e ) { 
 - RealmCache . invokeWithGlobalRefCount ( realm . getConfiguration ( ) , cacheCallback ) ; 
 - if ( counter . get ( ) = = 0 ) { 
 - / / Finish testing 
 - return ; 
 - } 
 - realm . executeTransaction ( new Realm . Transaction ( ) { 
 - @ Override 
 - public void execute ( Realm realm ) { 
 - throw new RuntimeException ( " Dummy exception " ) ; 
 - } 
 - } , this ) ; 
 - } 
 - } ; 
 - 
 + public void onResult ( int count ) { 
 + assertEquals ( 1 , count ) ; 
 + if ( counter . decrementAndGet ( ) = = 0 ) { 
 + realm . close ( ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + } 
 + } ; 
 + final Realm . Transaction . Callback transactionCallback = new Realm . Transaction . Callback ( ) { 
 + @ Override 
 + public void onError ( Exception e ) { 
 + RealmCache . invokeWithGlobalRefCount ( realm . getConfiguration ( ) , cacheCallback ) ; 
 + if ( counter . get ( ) = = 0 ) { 
 + / / Finish testing 
 + return ; 
 + } 
 realm . executeTransaction ( new Realm . Transaction ( ) { 
 @ Override 
 public void execute ( Realm realm ) { 
 throw new RuntimeException ( " Dummy exception " ) ; 
 } 
 - } , transactionCallback ) ; 
 + } , this ) ; 
 } 
 - } ) ; 
 - try { 
 - TestHelper . awaitOrFail ( signalTestFinished ) ; 
 - } finally { 
 - handlerThread . quit ( ) ; 
 - } 
 + } ; 
 + 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + throw new RuntimeException ( " Dummy exception " ) ; 
 + } 
 + } , transactionCallback ) ; 
 } 
 
 / / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 @ @ - 292 , 7 + 266 , 7 @ @ public class RealmAsyncQueryTests { 
 / / finding element [ 0 - 4 ] asynchronously then wait for the promise to be loaded . 
 / / no use of notification callback 
 @ Test 
 - public void testFindAllAsync ( ) throws Throwable { 
 + public void findAllAsync ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 370 , 11 + 344 , 11 @ @ public class RealmAsyncQueryTests { 
 
 @ Test 
 @ RunTestInLooperThread 
 - public void testAccessingRealmListOnUnloadedRealmObjectShouldThrow ( ) { 
 + public void accessingRealmListOnUnloadedRealmObjectShouldThrow ( ) { 
 Realm . asyncQueryExecutor . pause ( ) ; 
 
 - populateTestRealm ( workerThread . realm , 10 ) ; 
 - final AllTypes alltypes1 = workerThread . realm . where ( AllTypes . class ) 
 + populateTestRealm ( looperThread . realm , 10 ) ; 
 + final AllTypes alltypes1 = looperThread . realm . where ( AllTypes . class ) 
 . equalTo ( " columnLong " , 0 ) 
 . findFirstAsync ( ) ; 
 
 @ @ - 386 , 13 + 360 , 13 @ @ public class RealmAsyncQueryTests { 
 } 
 
 Realm . asyncQueryExecutor . resume ( ) ; 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 Looper . loop ( ) ; 
 
 } 
 
 @ Test 
 - public void testStandaloneObjectAsyncBehaviour ( ) { 
 + public void standaloneObjectAsyncBehaviour ( ) { 
 Dog dog = new Dog ( ) ; 
 dog . setName ( " Akamaru " ) ; 
 dog . setAge ( 10 ) ; 
 @ @ - 402 , 7 + 376 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 
 @ Test 
 - public void testAsyncQueryOnNonLooperThreadShouldThrow ( ) throws Throwable { 
 + public void findAllAsync _ throwsOnNonLooperThread ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 final ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 @ @ - 449 , 10 + 423 , 10 @ @ public class RealmAsyncQueryTests { 
 
 @ Test 
 @ RunTestInLooperThread 
 - public void testReusingQuery ( ) throws Throwable { 
 - populateTestRealm ( workerThread . realm , 10 ) ; 
 + public void findAllAsync _ reusingQuery ( ) throws Throwable { 
 + populateTestRealm ( looperThread . realm , 10 ) ; 
 
 - RealmQuery < AllTypes > query = workerThread . realm . where ( AllTypes . class ) 
 + RealmQuery < AllTypes > query = looperThread . realm . where ( AllTypes . class ) 
 . between ( " columnLong " , 0 , 4 ) ; 
 RealmResults < AllTypes > queryAllSync = query . findAll ( ) ; 
 RealmResults < AllTypes > allAsync = query . findAllAsync ( ) ; 
 @ @ - 465 , 7 + 439 , 7 @ @ public class RealmAsyncQueryTests { 
 RealmResults < AllTypes > allAsyncSorted = query . findAllSorted ( " columnLong " ) ; 
 fail ( " Should throw an exception , can not reuse RealmQuery " ) ; 
 } catch ( IllegalStateException ignored ) { 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } 
 
 @ @ - 473 , 11 + 447 , 11 @ @ public class RealmAsyncQueryTests { 
 / / using a callback to be notified when the data is loaded 
 @ Test 
 @ RunTestInLooperThread 
 - public void testFindAllAsyncWithNotification ( ) throws Throwable { 
 + public void findAllAsync _ withNotification ( ) throws Throwable { 
 Realm . asyncQueryExecutor . pause ( ) ; 
 
 - populateTestRealm ( workerThread . realm , 10 ) ; 
 - final RealmResults < AllTypes > realmResults = workerThread . realm . where ( AllTypes . class ) 
 + populateTestRealm ( looperThread . realm , 10 ) ; 
 + final RealmResults < AllTypes > realmResults = looperThread . realm . where ( AllTypes . class ) 
 . between ( " columnLong " , 0 , 4 ) 
 . findAllAsync ( ) ; 
 
 @ @ - 487 , 7 + 461 , 7 @ @ public class RealmAsyncQueryTests { 
 assertTrue ( realmResults . isLoaded ( ) ) ; 
 assertEquals ( 5 , realmResults . size ( ) ) ; 
 assertTrue ( realmResults . get ( 4 ) . isValid ( ) ) ; 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 
 @ @ - 495 , 18 + 469 , 18 @ @ public class RealmAsyncQueryTests { 
 assertEquals ( 0 , realmResults . size ( ) ) ; 
 
 Realm . asyncQueryExecutor . resume ( ) ; 
 - workerThread . keepStrongReference . add ( realmResults ) ; 
 + looperThread . keepStrongReference . add ( realmResults ) ; 
 } 
 
 / / transforming an async query into sync by calling load to force 
 / / the blocking behaviour 
 @ Test 
 @ RunTestInLooperThread 
 - public void testForceLoadAsync ( ) throws Throwable { 
 + public void findAllAsync _ forceLoad ( ) throws Throwable { 
 Realm . asyncQueryExecutor . pause ( ) ; 
 
 - populateTestRealm ( workerThread . realm , 10 ) ; 
 - final RealmResults < AllTypes > realmResults = workerThread . realm . where ( AllTypes . class ) 
 + populateTestRealm ( looperThread . realm , 10 ) ; 
 + final RealmResults < AllTypes > realmResults = looperThread . realm . where ( AllTypes . class ) 
 . between ( " columnLong " , 0 , 4 ) 
 . findAllAsync ( ) ; 
 
 @ @ - 516 , 7 + 490 , 7 @ @ public class RealmAsyncQueryTests { 
 public void onChange ( ) { 
 assertTrue ( realmResults . isLoaded ( ) ) ; 
 assertEquals ( 5 , realmResults . size ( ) ) ; 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 
 } 
 } ) ; 
 @ @ - 543 , 7 + 517 , 7 @ @ public class RealmAsyncQueryTests { 
 / / 8 - the notification should be called once ( when we retry automatically we shouldn ' t 
 / / notify the user ) . 
 @ Test 
 - public void testFindAllAsyncRetry ( ) throws Throwable { 
 + public void findAllAsync _ retry ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 642 , 7 + 616 , 7 @ @ public class RealmAsyncQueryTests { 
 / / 6 - now REALM _ CHANGED will trigger a COMPLETED _ UPDATE _ ASYNC _ QUERIES that should update all queries 
 / / 7 - callbacks are notified with the latest results ( called twice overall ) 
 @ Test 
 - public void testFindAllAsyncBatchUpdate ( ) throws Throwable { 
 + public void findAllAsync _ batchUpdate ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 2 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 804 , 7 + 778 , 7 @ @ public class RealmAsyncQueryTests { 
 / / is operating on a previous version , this should retry the query on the worker thread 
 / / to deliver the results once ( using the latest version of the Realm ) 
 @ Test 
 - public void testFindAllCallerIsAdvanced ( ) throws Throwable { 
 + public void findAllAsync _ callerIsAdvanced ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch callbackInvokedFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 @ @ - 958 , 7 + 932 , 7 @ @ public class RealmAsyncQueryTests { 
 / / update ( using the latest realm ) for all async queries is in progress 
 / / 7 - onChange notification will be triggered once 
 @ Test 
 - public void testFindAllCallerThreadBehind ( ) throws Throwable { 
 + public void findAllAsync _ callerThreadBehind ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 2 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 1095 , 7 + 1069 , 7 @ @ public class RealmAsyncQueryTests { 
 
 / / similar UC as # testFindAllAsync using ' findFirst ' 
 @ Test 
 - public void testFindFirstAsync ( ) throws Throwable { 
 + public void findFirstAsync ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 1162 , 8 + 1136 , 8 @ @ public class RealmAsyncQueryTests { 
 
 @ Test 
 @ RunTestInLooperThread 
 - public void testFindFirstAsyncWithInitialEmptyRow ( ) throws Throwable { 
 - final AllTypes firstAsync = workerThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; 
 + public void findFirstAsync _ initalEmptyRow ( ) throws Throwable { 
 + final AllTypes firstAsync = looperThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; 
 firstAsync . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 @ @ - 1171 , 26 + 1145 , 26 @ @ public class RealmAsyncQueryTests { 
 assertTrue ( firstAsync . isLoaded ( ) ) ; 
 assertTrue ( firstAsync . isValid ( ) ) ; 
 assertEquals ( 0 , firstAsync . getColumnLong ( ) ) ; 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 assertTrue ( firstAsync . load ( ) ) ; 
 assertTrue ( firstAsync . isLoaded ( ) ) ; 
 assertFalse ( firstAsync . isValid ( ) ) ; 
 
 - populateTestRealm ( workerThread . realm , 10 ) ; 
 - workerThread . keepStrongReference . add ( firstAsync ) ; 
 + populateTestRealm ( looperThread . realm , 10 ) ; 
 + looperThread . keepStrongReference . add ( firstAsync ) ; 
 } 
 
 @ Test 
 @ RunTestInLooperThread 
 - public void testFindFirstAsyncUpdatedIfSyncRealmObjectIsUpdated ( ) throws Throwable { 
 - populateTestRealm ( workerThread . realm , 1 ) ; 
 - AllTypes firstSync = workerThread . realm . where ( AllTypes . class ) . findFirst ( ) ; 
 + public void findFirstAsync _ updatedIfsyncRealmObjectIsUpdated ( ) throws Throwable { 
 + populateTestRealm ( looperThread . realm , 1 ) ; 
 + AllTypes firstSync = looperThread . realm . where ( AllTypes . class ) . findFirst ( ) ; 
 assertEquals ( 0 , firstSync . getColumnLong ( ) ) ; 
 assertEquals ( " test data 0 " , firstSync . getColumnString ( ) ) ; 
 
 - final AllTypes firstAsync = workerThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; 
 + final AllTypes firstAsync = looperThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; 
 assertTrue ( firstAsync . load ( ) ) ; 
 assertTrue ( firstAsync . isLoaded ( ) ) ; 
 assertTrue ( firstAsync . isValid ( ) ) ; 
 @ @ - 1201 , 24 + 1175 , 24 @ @ public class RealmAsyncQueryTests { 
 @ Override 
 public void onChange ( ) { 
 assertEquals ( " Galacticon " , firstAsync . getColumnString ( ) ) ; 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 
 - workerThread . realm . beginTransaction ( ) ; 
 + looperThread . realm . beginTransaction ( ) ; 
 firstSync . setColumnString ( " Galacticon " ) ; 
 - workerThread . realm . commitTransaction ( ) ; 
 + looperThread . realm . commitTransaction ( ) ; 
 } 
 
 / / finding elements [ 0 - 4 ] asynchronously then wait for the promise to be loaded 
 / / using a callback to be notified when the data is loaded 
 @ Test 
 @ RunTestInLooperThread 
 - public void testFindFirstAsyncWithNotification ( ) throws Throwable { 
 + public void findFirstAsync _ withNotification ( ) throws Throwable { 
 Realm . asyncQueryExecutor . pause ( ) ; 
 
 - populateTestRealm ( workerThread . realm , 10 ) ; 
 - final AllTypes realmResults = workerThread . realm . where ( AllTypes . class ) 
 + populateTestRealm ( looperThread . realm , 10 ) ; 
 + final AllTypes realmResults = looperThread . realm . where ( AllTypes . class ) 
 . between ( " columnLong " , 4 , 9 ) 
 . findFirstAsync ( ) ; 
 
 @ @ - 1228 , 7 + 1202 , 7 @ @ public class RealmAsyncQueryTests { 
 assertTrue ( realmResults . isLoaded ( ) ) ; 
 assertTrue ( realmResults . isValid ( ) ) ; 
 assertEquals ( " test data 4 " , realmResults . getColumnString ( ) ) ; 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 
 @ @ - 1241 , 17 + 1215 , 17 @ @ public class RealmAsyncQueryTests { 
 } 
 
 Realm . asyncQueryExecutor . resume ( ) ; 
 - workerThread . keepStrongReference . add ( realmResults ) ; 
 + looperThread . keepStrongReference . add ( realmResults ) ; 
 } 
 
 / / similar UC as # testForceLoadAsync using ' findFirst ' 
 @ Test 
 @ RunTestInLooperThread 
 - public void testForceLoadFindFirstAsync ( ) throws Throwable { 
 + public void findFirstAsync _ forceLoad ( ) throws Throwable { 
 Realm . asyncQueryExecutor . pause ( ) ; 
 
 - populateTestRealm ( workerThread . realm , 10 ) ; 
 - final AllTypes realmResults = workerThread . realm . where ( AllTypes . class ) 
 + populateTestRealm ( looperThread . realm , 10 ) ; 
 + final AllTypes realmResults = looperThread . realm . where ( AllTypes . class ) 
 . between ( " columnLong " , 4 , 9 ) 
 . findFirstAsync ( ) ; 
 
 @ @ - 1263 , 12 + 1237 , 12 @ @ public class RealmAsyncQueryTests { 
 assertTrue ( realmResults . isLoaded ( ) ) ; 
 assertEquals ( " test data 4 " , realmResults . getColumnString ( ) ) ; 
 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 
 / / similar UC as # testFindAllAsyncRetry using ' findFirst ' 
 @ Test 
 - public void testFindFirstAsyncRetry ( ) throws Throwable { 
 + public void findFirstAsync _ retry ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 1370 , 7 + 1344 , 7 @ @ public class RealmAsyncQueryTests { 
 
 / / similar UC as # testFindAllAsync using ' findAllSorted ' 
 @ Test 
 - public void testFindAllSortedAsync ( ) throws Throwable { 
 + public void findAllSortedAsync ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 1453 , 7 + 1427 , 7 @ @ public class RealmAsyncQueryTests { 
 / / finding elements [ 4 - 8 ] asynchronously then wait for the promise to be loaded 
 / / using a callback to be notified when the data is loaded 
 @ Test 
 - public void testFindAllSortedAsyncRetry ( ) throws Throwable { 
 + public void findAllSortedAsync _ retry ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 1545 , 7 + 1519 , 7 @ @ public class RealmAsyncQueryTests { 
 
 / / similar UC as # testFindAllAsyncBatchUpdate using ' findAllSorted ' 
 @ Test 
 - public void testFindAllSortedAsyncBatchUpdate ( ) throws Throwable { 
 + public void findAllSortedAsync _ batchUpdate ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 2 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 1706 , 7 + 1680 , 7 @ @ public class RealmAsyncQueryTests { 
 
 / / similar UC as # testFindAllAsyncBatchUpdate using ' findAllSortedMulti ' 
 @ Test 
 - public void testFindAllSortedMultiAsyncBatchUpdate ( ) throws Throwable { 
 + public void findAllSortedAsync _ multipleFields _ batchUpdate ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 2 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 1947 , 8 + 1921 , 8 @ @ public class RealmAsyncQueryTests { 
 / / if unregistered properly . 
 @ Test 
 @ RunTestInLooperThread 
 - public void testListenerShouldNotLeak ( ) { 
 - populateTestRealm ( workerThread . realm , 10 ) ; 
 + public void listenerShouldNotLeak ( ) { 
 + populateTestRealm ( looperThread . realm , 10 ) ; 
 
 / / simulate the ActivityManager by creating 1 instance responsible 
 / / of attaching an onChange listener , then simulate a configuration 
 @ @ - 1956 , 14 + 1930 , 14 @ @ public class RealmAsyncQueryTests { 
 / / we make sure that the GC enqueue the reference of the destroyed instance 
 / / which indicate no memory leak 
 MockActivityManager mockActivityManager = 
 - MockActivityManager . newInstance ( workerThread . realm . getConfiguration ( ) ) ; 
 + MockActivityManager . newInstance ( looperThread . realm . getConfiguration ( ) ) ; 
 
 mockActivityManager . sendConfigurationChange ( ) ; 
 
 assertEquals ( 1 , mockActivityManager . numberOfInstances ( ) ) ; 
 / / remove GC ' d reference & assert that one instance should remain 
 Iterator < Map . Entry < WeakReference < RealmResults < ? > > , RealmQuery < ? > > > iterator = 
 - workerThread . realm . handlerController . asyncRealmResults . entrySet ( ) . iterator ( ) ; 
 + looperThread . realm . handlerController . asyncRealmResults . entrySet ( ) . iterator ( ) ; 
 while ( iterator . hasNext ( ) ) { 
 Map . Entry < WeakReference < RealmResults < ? > > , RealmQuery < ? > > entry = iterator . next ( ) ; 
 RealmResults < ? > weakReference = entry . getKey ( ) . get ( ) ; 
 @ @ - 1972 , 18 + 1946 , 18 @ @ public class RealmAsyncQueryTests { 
 } 
 } 
 
 - assertEquals ( 1 , workerThread . realm . handlerController . asyncRealmResults . size ( ) ) ; 
 + assertEquals ( 1 , looperThread . realm . handlerController . asyncRealmResults . size ( ) ) ; 
 mockActivityManager . onStop ( ) ; / / to close the Realm 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 
 @ Test 
 @ RunTestInLooperThread 
 - public void testCombiningAsyncAndSync ( ) { 
 - populateTestRealm ( workerThread . realm , 10 ) ; 
 + public void combiningAsyncAndSync ( ) { 
 + populateTestRealm ( looperThread . realm , 10 ) ; 
 
 Realm . asyncQueryExecutor . pause ( ) ; 
 - final RealmResults < AllTypes > allTypesAsync = workerThread . realm . where ( AllTypes . class ) . greaterThan ( " columnLong " , 5 ) . findAllAsync ( ) ; 
 + final RealmResults < AllTypes > allTypesAsync = looperThread . realm . where ( AllTypes . class ) . greaterThan ( " columnLong " , 5 ) . findAllAsync ( ) ; 
 final RealmResults < AllTypes > allTypesSync = allTypesAsync . where ( ) . greaterThan ( " columnLong " , 3 ) . findAll ( ) ; 
 
 assertEquals ( 0 , allTypesAsync . size ( ) ) ; 
 @ @ - 1993 , 18 + 1967 , 18 @ @ public class RealmAsyncQueryTests { 
 public void onChange ( ) { 
 assertEquals ( 4 , allTypesAsync . size ( ) ) ; 
 assertEquals ( 6 , allTypesSync . size ( ) ) ; 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 Realm . asyncQueryExecutor . resume ( ) ; 
 - workerThread . keepStrongReference . add ( allTypesAsync ) ; 
 + looperThread . keepStrongReference . add ( allTypesAsync ) ; 
 } 
 
 / / keep advancing the Realm by sending 1 commit for each frame ( 16ms ) 
 / / the async queries should keep up with the modification 
 @ Test 
 @ RunTestInLooperThread 
 - public void testStressTestBackgroundCommits ( ) throws Throwable { 
 + public void stressTestBackgroundCommits ( ) throws Throwable { 
 final int NUMBER _ OF _ COMMITS = 100 ; 
 final CountDownLatch bgRealmClosed = new CountDownLatch ( 1 ) ; 
 final long [ ] latestLongValue = new long [ 1 ] ; 
 @ @ - 2014 , 7 + 1988 , 7 @ @ public class RealmAsyncQueryTests { 
 @ Override 
 public void run ( ) { 
 Random random = new Random ( System . currentTimeMillis ( ) ) ; 
 - Realm backgroundThreadRealm = Realm . getInstance ( workerThread . realm . getConfiguration ( ) ) ; 
 + Realm backgroundThreadRealm = Realm . getInstance ( looperThread . realm . getConfiguration ( ) ) ; 
 for ( int i = 0 ; i < NUMBER _ OF _ COMMITS ; i + + ) { 
 backgroundThreadRealm . beginTransaction ( ) ; 
 AllTypes object = backgroundThreadRealm . createObject ( AllTypes . class ) ; 
 @ @ - 2032 , 25 + 2006 , 25 @ @ public class RealmAsyncQueryTests { 
 } 
 } ; 
 
 - final RealmResults < AllTypes > allAsync = workerThread . realm . where ( AllTypes . class ) . findAllAsync ( ) ; 
 + final RealmResults < AllTypes > allAsync = looperThread . realm . where ( AllTypes . class ) . findAllAsync ( ) ; 
 allAsync . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 assertTrue ( allAsync . isLoaded ( ) ) ; 
 if ( allAsync . size ( ) = = NUMBER _ OF _ COMMITS ) { 
 - AllTypes lastInserted = workerThread . realm . where ( AllTypes . class ) 
 + AllTypes lastInserted = looperThread . realm . where ( AllTypes . class ) 
 . equalTo ( " columnLong " , latestLongValue [ 0 ] ) 
 . equalTo ( " columnFloat " , latestFloatValue [ 0 ] ) 
 . findFirst ( ) ; 
 assertNotNull ( lastInserted ) ; 
 TestHelper . awaitOrFail ( bgRealmClosed ) ; 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } 
 } ) ; 
 - workerThread . keepStrongReference . add ( allAsync ) ; 
 + looperThread . keepStrongReference . add ( allAsync ) ; 
 
 - workerThread . realm . handler . postDelayed ( new Runnable ( ) { 
 + looperThread . realm . handler . postDelayed ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 backgroundThread . start ( ) ; 
 @ @ - 2059 , 7 + 2033 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 
 @ Test 
 - public void testAsyncDistinct ( ) throws Throwable { 
 + public void distinctAsync ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 4 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 2156 , 7 + 2130 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 
 @ Test 
 - public void testAsyncDistinctNotIndexedFields ( ) throws Throwable { 
 + public void distinctAsync _ notIndexedFields ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 4 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 @ @ - 2207 , 47 + 2181 , 47 @ @ public class RealmAsyncQueryTests { 
 
 @ Test 
 @ RunTestInLooperThread 
 - public void testAsyncDistinctFieldDoesNotExist ( ) throws Throwable { 
 + public void distinctAsync _ noneExistingField ( ) throws Throwable { 
 final long numberOfBlocks = 25 ; 
 final long numberOfObjects = 10 ; / / must be greater than 1 
 - populateForDistinct ( workerThread . realm , numberOfBlocks , numberOfObjects , false ) ; 
 + populateForDistinct ( looperThread . realm , numberOfBlocks , numberOfObjects , false ) ; 
 
 try { 
 - workerThread . realm . distinctAsync ( AnnotationIndexTypes . class , " doesNotExist " ) ; 
 + looperThread . realm . distinctAsync ( AnnotationIndexTypes . class , " doesNotExist " ) ; 
 fail ( ) ; 
 } catch ( IllegalArgumentException ignored ) { 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } 
 
 @ Test 
 @ RunTestInLooperThread 
 - public void testBatchUpdateDifferentTypeOfQueries ( ) { 
 - workerThread . realm . beginTransaction ( ) ; 
 + public void batchUpdateDifferentTypeOfQueries ( ) { 
 + looperThread . realm . beginTransaction ( ) ; 
 for ( int i = 0 ; i < 5 ; ) { 
 - AllTypes allTypes = workerThread . realm . createObject ( AllTypes . class ) ; 
 + AllTypes allTypes = looperThread . realm . createObject ( AllTypes . class ) ; 
 allTypes . setColumnLong ( i ) ; 
 allTypes . setColumnString ( " data " + i % 3 ) ; 
 
 - allTypes = workerThread . realm . createObject ( AllTypes . class ) ; 
 + allTypes = looperThread . realm . createObject ( AllTypes . class ) ; 
 allTypes . setColumnLong ( i ) ; 
 allTypes . setColumnString ( " data " + ( + + i % 3 ) ) ; 
 } 
 final long numberOfBlocks = 25 ; 
 final long numberOfObjects = 10 ; / / must be greater than 1 
 - workerThread . realm . commitTransaction ( ) ; 
 - populateForDistinct ( workerThread . realm , numberOfBlocks , numberOfObjects , false ) ; 
 + looperThread . realm . commitTransaction ( ) ; 
 + populateForDistinct ( looperThread . realm , numberOfBlocks , numberOfObjects , false ) ; 
 
 - RealmResults < AllTypes > findAllAsync = workerThread . realm . where ( AllTypes . class ) . findAllAsync ( ) ; 
 - RealmResults < AllTypes > findAllSorted = workerThread . realm . where ( AllTypes . class ) . findAllSortedAsync ( " columnString " , Sort . ASCENDING ) ; 
 - RealmResults < AllTypes > findAllSortedMulti = workerThread . realm . where ( AllTypes . class ) . findAllSortedAsync ( new String [ ] { " columnString " , " columnLong " } , 
 + RealmResults < AllTypes > findAllAsync = looperThread . realm . where ( AllTypes . class ) . findAllAsync ( ) ; 
 + RealmResults < AllTypes > findAllSorted = looperThread . realm . where ( AllTypes . class ) . findAllSortedAsync ( " columnString " , Sort . ASCENDING ) ; 
 + RealmResults < AllTypes > findAllSortedMulti = looperThread . realm . where ( AllTypes . class ) . findAllSortedAsync ( new String [ ] { " columnString " , " columnLong " } , 
 new Sort [ ] { Sort . ASCENDING , Sort . DESCENDING } ) ; 
 - RealmResults < AnnotationIndexTypes > findDistinct = workerThread . realm . distinctAsync ( AnnotationIndexTypes . class , " indexString " ) ; 
 + RealmResults < AnnotationIndexTypes > findDistinct = looperThread . realm . distinctAsync ( AnnotationIndexTypes . class , " indexString " ) ; 
 
 - workerThread . keepStrongReference . add ( findAllAsync ) ; 
 - workerThread . keepStrongReference . add ( findAllSorted ) ; 
 - workerThread . keepStrongReference . add ( findAllSortedMulti ) ; 
 - workerThread . keepStrongReference . add ( findDistinct ) ; 
 + looperThread . keepStrongReference . add ( findAllAsync ) ; 
 + looperThread . keepStrongReference . add ( findAllSorted ) ; 
 + looperThread . keepStrongReference . add ( findAllSortedMulti ) ; 
 + looperThread . keepStrongReference . add ( findDistinct ) ; 
 
 final CountDownLatch queriesCompleted = new CountDownLatch ( 4 ) ; 
 final AtomicInteger batchUpdateCompleted = new AtomicInteger ( 0 ) ; 
 @ @ - 2266 , 7 + 2240 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 case 2 : { 
 if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 break ; 
 } 
 @ @ - 2284 , 7 + 2258 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 case 2 : { 
 if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 break ; 
 } 
 @ @ - 2302 , 7 + 2276 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 case 2 : { 
 if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 break ; 
 } 
 @ @ - 2320 , 7 + 2294 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 case 2 : { 
 if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { 
 - workerThread . testComplete ( ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 break ; 
 } 
 @ @ - 2335 , 7 + 2309 , 7 @ @ public class RealmAsyncQueryTests { 
 public void run ( ) { 
 try { 
 queriesCompleted . await ( ) ; 
 - Realm bgRealm = Realm . getInstance ( workerThread . realm . getConfiguration ( ) ) ; 
 + Realm bgRealm = Realm . getInstance ( looperThread . realm . getConfiguration ( ) ) ; 
 
 bgRealm . beginTransaction ( ) ; 
 bgRealm . createObject ( AllTypes . class ) ; 
 @ @ - 2351 , 7 + 2325 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 
 / / this test make sure that Async queries update when using link 
 - public void testQueryingLinkHandover ( ) throws Throwable { 
 + public void queryingLinkHandover ( ) throws Throwable { 
 final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 final AtomicInteger numberOfInvocations = new AtomicInteger ( 0 ) ;
