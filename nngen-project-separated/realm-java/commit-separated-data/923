BLEU SCORE: 0.06274655310994741

TEST MSG: Removing the restriction of compacting encrypted Realm files .
GENERATED MSG: Enabling compacting of encrypted Realms

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> index 89ed7fd . . 010492d 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 42 , 7 + 42 , 6 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . TimeUnit ; <nl> - import java . util . concurrent . TimeoutException ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> @ @ - 1071 , 12 + 1070 , 10 @ @ public class RealmTest extends AndroidTestCase { <nl> Realm . deleteRealm ( realmConfig ) ; <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . close ( ) ; <nl> - / / TODO : remove try / catch block when compacting encrypted Realms is supported <nl> - try { <nl> - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> - fail ( ) ; <nl> - } catch ( IllegalArgumentException expected ) { <nl> - } <nl> + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> + assertFalse ( realm . isClosed ( ) ) ; <nl> + realm . close ( ) ; <nl> } <nl> <nl> public void testCompactEncryptedPopulatedRealmFile ( ) { <nl> @ @ - 1089 , 12 + 1086 , 13 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> populateTestRealm ( realm , 100 ) ; <nl> realm . close ( ) ; <nl> - / / TODO : remove try / catch block when compacting encrypted Realms is supported <nl> - try { <nl> - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> - fail ( ) ; <nl> - } catch ( IllegalArgumentException expected ) { <nl> - } <nl> + <nl> + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> + <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> + assertFalse ( realm . isClosed ( ) ) ; <nl> + assertEquals ( 100 , realm . allObjects ( AllTypes . class ) . size ( ) ) ; <nl> + realm . close ( ) ; <nl> } <nl> <nl> public void testCompactEmptyRealmFile ( ) throws IOException { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 42b7397 . . 6931f4e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 29 , 11 + 29 , 9 @ @ import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> - import java . util . Set ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> - import java . util . concurrent . CopyOnWriteArraySet ; <nl> <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> import io . realm . internal . SharedGroupManager ; <nl> @ @ - 593 , 10 + 591 , 6 @ @ abstract class BaseRealm implements Closeable { <nl> * Compacts the Realm file defined by the given configuration . <nl> * / <nl> public static boolean compactRealm ( final RealmConfiguration configuration ) { <nl> - if ( configuration . getEncryptionKey ( ) ! = null ) { <nl> - throw new IllegalArgumentException ( " Cannot currently compact an encrypted Realm . " ) ; <nl> - } <nl> - <nl> final AtomicBoolean result = new AtomicBoolean ( false ) ; <nl> <nl> RealmCache . invokeWithGlobalRefCount ( configuration , new RealmCache . Callback ( ) {
NEAREST DIFF (one line): diff - - git a / realm - jni / src / tablequery . hpp b / realm - jni / src / tablequery . hpp <nl> index 80279bb . . 11ab289 100644 <nl> - - - a / realm - jni / src / tablequery . hpp <nl> + + + b / realm - jni / src / tablequery . hpp <nl> @ @ - 28 , 7 + 28 , 7 @ @ class TableQuery : public realm : : Query { <nl> std : : vector < size _ t > subtables ; / / holds subtable column indices <nl> <nl> public : <nl> - TableQuery ( const Query & copy ) : realm : : Query ( copy , realm : : Query : : TCopyExpressionTag { } ) { } ; <nl> + TableQuery ( const Query & copy ) : realm : : Query ( copy ) { } ; <nl> <nl> void push _ subtable ( size _ t index ) { <nl> subtables . push _ back ( index ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 1a42f81 . . 4237836 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 1009 , 11 + 1009 , 11 @ @ public class RealmTest extends AndroidTestCase { <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . close ( ) ; <nl> / / TODO : remove try / catch block when compacting encrypted Realms is supported <nl> - try { <nl> + / / try { <nl> assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> - fail ( ) ; <nl> - } catch ( IllegalArgumentException expected ) { <nl> - } <nl> + / / fail ( ) ; <nl> + / / } catch ( IllegalArgumentException expected ) { <nl> + / / } <nl> } <nl> <nl> public void testCompactEncryptedPopulatedRealmFile ( ) { <nl> @ @ - 1026 , 12 + 1026 , 13 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> populateTestRealm ( realm , 100 ) ; <nl> realm . close ( ) ; <nl> - / / TODO : remove try / catch block when compacting encrypted Realms is supported <nl> - try { <nl> - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> - fail ( ) ; <nl> - } catch ( IllegalArgumentException expected ) { <nl> - } <nl> + assertTrue ( realm . isClosed ( ) ) ; <nl> + <nl> + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> + <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> + assertEquals ( 100 , realm . allObjects ( AllTypes . class ) . size ( ) ) ; <nl> + realm . close ( ) ; <nl> } <nl> <nl> public void testCompactEmptyRealmFile ( ) throws IOException { <nl> diff - - git a / realm / src / main / java / io / realm / BaseRealm . java b / realm / src / main / java / io / realm / BaseRealm . java <nl> index cd851bc . . 161391d 100644 <nl> - - - a / realm / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 559 , 9 + 559 , 9 @ @ abstract class BaseRealm implements Closeable { <nl> * Compacts the Realm file defined by the given configuration . <nl> * / <nl> public static synchronized boolean compactRealm ( RealmConfiguration configuration ) { <nl> - if ( configuration . getEncryptionKey ( ) ! = null ) { <nl> - throw new IllegalArgumentException ( " Cannot currently compact an encrypted Realm . " ) ; <nl> - } <nl> + / / if ( configuration . getEncryptionKey ( ) ! = null ) { <nl> + / / throw new IllegalArgumentException ( " Cannot currently compact an encrypted Realm . " ) ; <nl> + / / } <nl> <nl> if ( isFileOpen ( configuration ) ) { <nl> throw new IllegalStateException ( " Cannot compact an open Realm " ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 index 89ed7fd . . 010492d 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 42 , 7 + 42 , 6 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . TimeUnit ; 
 - import java . util . concurrent . TimeoutException ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 
 import io . realm . entities . AllTypes ; 
 @ @ - 1071 , 12 + 1070 , 10 @ @ public class RealmTest extends AndroidTestCase { 
 Realm . deleteRealm ( realmConfig ) ; 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . close ( ) ; 
 - / / TODO : remove try / catch block when compacting encrypted Realms is supported 
 - try { 
 - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 - fail ( ) ; 
 - } catch ( IllegalArgumentException expected ) { 
 - } 
 + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 + assertFalse ( realm . isClosed ( ) ) ; 
 + realm . close ( ) ; 
 } 
 
 public void testCompactEncryptedPopulatedRealmFile ( ) { 
 @ @ - 1089 , 12 + 1086 , 13 @ @ public class RealmTest extends AndroidTestCase { 
 
 populateTestRealm ( realm , 100 ) ; 
 realm . close ( ) ; 
 - / / TODO : remove try / catch block when compacting encrypted Realms is supported 
 - try { 
 - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 - fail ( ) ; 
 - } catch ( IllegalArgumentException expected ) { 
 - } 
 + 
 + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 + 
 + realm = Realm . getInstance ( realmConfig ) ; 
 + assertFalse ( realm . isClosed ( ) ) ; 
 + assertEquals ( 100 , realm . allObjects ( AllTypes . class ) . size ( ) ) ; 
 + realm . close ( ) ; 
 } 
 
 public void testCompactEmptyRealmFile ( ) throws IOException { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 42b7397 . . 6931f4e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 29 , 11 + 29 , 9 @ @ import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 - import java . util . Set ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 - import java . util . concurrent . CopyOnWriteArraySet ; 
 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 import io . realm . internal . SharedGroupManager ; 
 @ @ - 593 , 10 + 591 , 6 @ @ abstract class BaseRealm implements Closeable { 
 * Compacts the Realm file defined by the given configuration . 
 * / 
 public static boolean compactRealm ( final RealmConfiguration configuration ) { 
 - if ( configuration . getEncryptionKey ( ) ! = null ) { 
 - throw new IllegalArgumentException ( " Cannot currently compact an encrypted Realm . " ) ; 
 - } 
 - 
 final AtomicBoolean result = new AtomicBoolean ( false ) ; 
 
 RealmCache . invokeWithGlobalRefCount ( configuration , new RealmCache . Callback ( ) {

NEAREST DIFF:
diff - - git a / realm - jni / src / tablequery . hpp b / realm - jni / src / tablequery . hpp 
 index 80279bb . . 11ab289 100644 
 - - - a / realm - jni / src / tablequery . hpp 
 + + + b / realm - jni / src / tablequery . hpp 
 @ @ - 28 , 7 + 28 , 7 @ @ class TableQuery : public realm : : Query { 
 std : : vector < size _ t > subtables ; / / holds subtable column indices 
 
 public : 
 - TableQuery ( const Query & copy ) : realm : : Query ( copy , realm : : Query : : TCopyExpressionTag { } ) { } ; 
 + TableQuery ( const Query & copy ) : realm : : Query ( copy ) { } ; 
 
 void push _ subtable ( size _ t index ) { 
 subtables . push _ back ( index ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 1a42f81 . . 4237836 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 1009 , 11 + 1009 , 11 @ @ public class RealmTest extends AndroidTestCase { 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . close ( ) ; 
 / / TODO : remove try / catch block when compacting encrypted Realms is supported 
 - try { 
 + / / try { 
 assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 - fail ( ) ; 
 - } catch ( IllegalArgumentException expected ) { 
 - } 
 + / / fail ( ) ; 
 + / / } catch ( IllegalArgumentException expected ) { 
 + / / } 
 } 
 
 public void testCompactEncryptedPopulatedRealmFile ( ) { 
 @ @ - 1026 , 12 + 1026 , 13 @ @ public class RealmTest extends AndroidTestCase { 
 
 populateTestRealm ( realm , 100 ) ; 
 realm . close ( ) ; 
 - / / TODO : remove try / catch block when compacting encrypted Realms is supported 
 - try { 
 - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 - fail ( ) ; 
 - } catch ( IllegalArgumentException expected ) { 
 - } 
 + assertTrue ( realm . isClosed ( ) ) ; 
 + 
 + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 + 
 + realm = Realm . getInstance ( realmConfig ) ; 
 + assertEquals ( 100 , realm . allObjects ( AllTypes . class ) . size ( ) ) ; 
 + realm . close ( ) ; 
 } 
 
 public void testCompactEmptyRealmFile ( ) throws IOException { 
 diff - - git a / realm / src / main / java / io / realm / BaseRealm . java b / realm / src / main / java / io / realm / BaseRealm . java 
 index cd851bc . . 161391d 100644 
 - - - a / realm / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / src / main / java / io / realm / BaseRealm . java 
 @ @ - 559 , 9 + 559 , 9 @ @ abstract class BaseRealm implements Closeable { 
 * Compacts the Realm file defined by the given configuration . 
 * / 
 public static synchronized boolean compactRealm ( RealmConfiguration configuration ) { 
 - if ( configuration . getEncryptionKey ( ) ! = null ) { 
 - throw new IllegalArgumentException ( " Cannot currently compact an encrypted Realm . " ) ; 
 - } 
 + / / if ( configuration . getEncryptionKey ( ) ! = null ) { 
 + / / throw new IllegalArgumentException ( " Cannot currently compact an encrypted Realm . " ) ; 
 + / / } 
 
 if ( isFileOpen ( configuration ) ) { 
 throw new IllegalStateException ( " Cannot compact an open Realm " ) ;
