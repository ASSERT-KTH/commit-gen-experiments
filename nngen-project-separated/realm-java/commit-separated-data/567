BLEU SCORE: 0.5

TEST MSG: Fix examples
GENERATED MSG: Some fixes

TEST DIFF (one line): diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java b / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java <nl> index 684960e . . ba58b50 100644 <nl> - - - a / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java <nl> + + + b / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import android . widget . LinearLayout ; <nl> import android . widget . TextView ; <nl> <nl> import io . realm . Realm ; <nl> - import io . realm . RealmConfiguration ; <nl> import io . realm . RealmResults ; <nl> import io . realm . Sort ; <nl> import io . realm . examples . intro . model . Cat ; <nl> @ @ - 37 , 7 + 36 , 6 @ @ public class IntroExampleActivity extends Activity { <nl> private LinearLayout rootLayout = null ; <nl> <nl> private Realm realm ; <nl> - private RealmConfiguration realmConfig ; <nl> <nl> @ Override <nl> protected void onCreate ( Bundle savedInstanceState ) { <nl> @ @ - 148 , 7 + 146 , 7 @ @ public class IntroExampleActivity extends Activity { <nl> <nl> / / Open the default realm . All threads must use it ' s own reference to the realm . <nl> / / Those can not be transferred across threads . <nl> - Realm realm = Realm . getInstance ( realmConfig ) ; <nl> + Realm realm = Realm . getDefaultInstance ( ) ; <nl> <nl> / / Add ten persons in one transaction <nl> realm . executeTransaction ( new Realm . Transaction ( ) { <nl> @ @ - 204 , 7 + 202 , 7 @ @ public class IntroExampleActivity extends Activity { <nl> private String complexQuery ( ) { <nl> String status = " \ n \ nPerforming complex Query operation . . . " ; <nl> <nl> - Realm realm = Realm . getInstance ( realmConfig ) ; <nl> + Realm realm = Realm . getDefaultInstance ( ) ; <nl> status + = " \ nNumber of persons : " + realm . where ( Person . class ) . count ( ) ; <nl> <nl> / / Find all persons where age between 7 and 9 and name begins with " Person " . <nl> diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> index f519715 . . 60ab821 100644 <nl> - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> @ @ - 23 , 7 + 23 , 6 @ @ import android . widget . LinearLayout <nl> import android . widget . TextView <nl> import io . realm . Realm <nl> import io . realm . Sort <nl> - import io . realm . RealmConfiguration <nl> import io . realm . examples . kotlin . model . Cat <nl> import io . realm . examples . kotlin . model . Dog <nl> import io . realm . examples . kotlin . model . Person <nl> @ @ - 40 , 7 + 39 , 6 @ @ class KotlinExampleActivity : Activity ( ) { <nl> <nl> private var rootLayout : LinearLayout by Delegates . notNull ( ) <nl> private var realm : Realm by Delegates . notNull ( ) <nl> - private var realmConfig : RealmConfiguration by Delegates . notNull ( ) <nl> <nl> override fun onCreate ( savedInstanceState : Bundle ? ) { <nl> super . onCreate ( savedInstanceState ) <nl> @ @ - 96 , 8 + 94 , 7 @ @ class KotlinExampleActivity : Activity ( ) { <nl> / / All writes must be wrapped in a transaction to facilitate safe multi threading <nl> realm . executeTransaction { <nl> / / Add a person <nl> - var person = realm . createObject ( Person : : class . java ) <nl> - person . id = 1 <nl> + var person = realm . createObject ( Person : : class . java , 1 ) <nl> person . name = " Young Person " <nl> person . age = 14 <nl> } <nl> @ @ - 137 , 7 + 134 , 7 @ @ class KotlinExampleActivity : Activity ( ) { <nl> <nl> / / Open the default realm . All threads must use it ' s own reference to the realm . <nl> / / Those can not be transferred across threads . <nl> - val realm = Realm . getInstance ( realmConfig ) <nl> + val realm = Realm . getDefaultInstance ( ) <nl> <nl> / / Add ten persons in one transaction <nl> realm . executeTransaction { <nl> @ @ - 193 , 7 + 190 , 7 @ @ class KotlinExampleActivity : Activity ( ) { <nl> <nl> / / Realm implements the Closable interface , therefore we can make use of Kotlin ' s built - in <nl> / / extension method ' use ' ( pun intended ) . <nl> - Realm . getInstance ( realmConfig ) . use { <nl> + Realm . getDefaultInstance ( ) . use { <nl> / / ' it ' is the implicit lambda parameter of type Realm <nl> status + = " \ nNumber of persons : $ { it . where ( Person : : class . java ) . count ( ) } " <nl> <nl> diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Person . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Person . kt <nl> index 36deb5c . . c408a12 100644 <nl> - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Person . kt <nl> + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Person . kt <nl> @ @ - 30 , 7 + 30 , 9 @ @ open class Person ( <nl> / / All properties are by default persisted . <nl> / / Properties can be annotated with PrimaryKey or Index . <nl> / / If you use non - nullable types , properties must be initialized with non - null values . <nl> - @ PrimaryKey open var name : String = " " , <nl> + @ PrimaryKey open var id : Long = 0 , <nl> + <nl> + open var name : String = " " , <nl> <nl> open var age : Int = 0 , <nl> <nl> @ @ - 41 , 9 + 43 , 8 @ @ open class Person ( <nl> open var cats : RealmList < Cat > = RealmList ( ) , <nl> <nl> / / You can instruct Realm to ignore a field and not persist it . <nl> - @ Ignore open var tempReference : Int = 0 , <nl> + @ Ignore open var tempReference : Int = 0 <nl> <nl> - open var id : Long = 0 <nl> ) : RealmObject ( ) { <nl> / / The Kotlin compiler generates standard getters and setters . <nl> / / Realm will overload them and code inside them is ignored .
NEAREST DIFF (one line): diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java <nl> index dd34264 . . 085ded7 100644 <nl> - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java <nl> + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package io . realm . examples . realmmigrationexample ; <nl> <nl> import android . app . Activity ; <nl> - import android . os . AsyncTask ; <nl> import android . os . Bundle ; <nl> import android . util . Log ; <nl> import android . widget . LinearLayout ; <nl> @ @ - 14 , 8 + 13 , 8 @ @ import java . io . InputStream ; <nl> <nl> import io . realm . Realm ; <nl> import io . realm . examples . realmmigrationexample . model . Migration ; <nl> - import io . realm . examples . realmmigrationexample . model . Pet ; <nl> import io . realm . examples . realmmigrationexample . model . Person ; <nl> + import io . realm . exceptions . RealmMigrationNeededException ; <nl> <nl> <nl> public class RealmMigrationExampleActivity extends Activity { <nl> @ @ - 38 , 11 + 37 , 9 @ @ public class RealmMigrationExampleActivity extends Activity { <nl> <nl> try { <nl> / / should throw as migration is required <nl> - Realm realm = Realm . getInstance ( this , " default0 " ) ; <nl> - } <nl> - catch ( Exception ex ) { <nl> - ex . printStackTrace ( ) ; <nl> - / / FIXME - catch the proper exception <nl> + Realm . getInstance ( this , " default0 " ) ; <nl> + } catch ( RealmMigrationNeededException ex ) { <nl> + Log . i ( TAG , " Excellent ! This is expected . " ) ; <nl> } <nl> <nl> Realm . migrateRealmAtPath ( path0 , new Migration ( ) ) ; <nl> @ @ - 76 , 14 + 73 , 11 @ @ public class RealmMigrationExampleActivity extends Activity { <nl> } <nl> <nl> private String realmString ( Realm realm ) { <nl> - String string = " " ; <nl> - for ( Person p : realm . allObjects ( Person . class ) ) { <nl> - string + = " name : " + p . getFullName ( ) + " \ n " ; <nl> - string + = " age : " + p . getAge ( ) + " \ n " ; <nl> - string + = " pets : " + p . getPets ( ) . size ( ) + " \ n " ; <nl> - / / FIXME - print out pet info <nl> + StringBuilder stringBuilder = new StringBuilder ( ) ; <nl> + for ( Person person : realm . allObjects ( Person . class ) ) { <nl> + stringBuilder . append ( person . toString ( ) ) . append ( " \ n " ) ; <nl> } <nl> - return string ; <nl> + return stringBuilder . toString ( ) ; <nl> } <nl> <nl> private void showStatus ( Realm realm ) { <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 58c3d7e . . 18ab3ae 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 23 , 11 + 23 , 10 @ @ import android . os . Message ; <nl> import android . util . Log ; <nl> <nl> import com . google . common . base . Splitter ; <nl> - import com . google . common . collect . Iterables ; <nl> import com . google . common . base . Throwables ; <nl> + import com . google . common . collect . Iterables ; <nl> <nl> import java . io . File ; <nl> - import java . lang . ref . SoftReference ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 56 , 6 + 55 , 12 @ @ public class Realm { <nl> private static final String TAG = " REALM " ; <nl> private static final String TABLE _ PREFIX = " class _ " ; <nl> private static final Set < String > validatedPaths = Collections . synchronizedSet ( new HashSet < String > ( ) ) ; <nl> + private static final ThreadLocal < Map < String , Realm > > realmsCache = new ThreadLocal < Map < String , Realm > > ( ) { <nl> + @ Override <nl> + protected Map < String , Realm > initialValue ( ) { <nl> + return new HashMap < String , Realm > ( ) ; <nl> + } <nl> + } ; <nl> <nl> private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; <nl> private static boolean autoRefresh = true ; <nl> @ @ - 162 , 14 + 167 , 12 @ @ public class Realm { <nl> } <nl> <nl> private static Realm createAndValidate ( String absolutePath , boolean validateSchema ) { <nl> - ThreadRealm threadRealm = new ThreadRealm ( absolutePath ) ; <nl> - SoftReference < Realm > realmSoftReference = threadRealm . get ( ) ; <nl> - Realm realm = realmSoftReference . get ( ) ; <nl> + Map < String , Realm > realms = realmsCache . get ( ) ; <nl> + Realm realm = realms . get ( absolutePath ) ; <nl> if ( realm = = null ) { <nl> - / / The garbage collector decided to get rid of the realm instance <nl> - Realm newRealm = new Realm ( absolutePath ) ; <nl> - threadRealm . set ( new SoftReference < Realm > ( newRealm ) ) ; <nl> - realm = newRealm ; <nl> + realm = new Realm ( absolutePath ) ; <nl> + realms . put ( absolutePath , realm ) ; <nl> + realmsCache . set ( realms ) ; <nl> } <nl> if ( validateSchema ) { <nl> / / FIXME - get rid fo validatedPaths - only validate if we don ' t have a cached realm <nl> @ @ - 197 , 10 + 200 , 11 @ @ public class Realm { <nl> <nl> realm . beginTransaction ( ) ; <nl> long version = realm . getVersion ( ) ; <nl> + realm . commitTransaction ( ) ; <nl> for ( String className : proxyClasses ) { <nl> String modelClassName = Iterables . getLast ( Splitter . on ( " . " ) . split ( className ) ) ; <nl> String generatedClassName = " io . realm . " + modelClassName + " RealmProxy " ; <nl> - Class < ? > generatedClass = null ; <nl> + Class < ? > generatedClass ; <nl> try { <nl> generatedClass = Class . forName ( generatedClassName ) ; <nl> } catch ( ClassNotFoundException e ) { <nl> @ @ - 214 , 14 + 218 , 17 @ @ public class Realm { <nl> throw new RealmException ( " Could not find the initTable method in the generated " + generatedClassName + " class " ) ; <nl> } <nl> try { <nl> + realm . beginTransaction ( ) ; <nl> initTableMethod . invoke ( null , realm . transaction ) ; <nl> } catch ( IllegalAccessException e ) { <nl> throw new RealmException ( " Could not execute the initTable method in the " + generatedClassName + " class " ) ; <nl> } catch ( InvocationTargetException e ) { <nl> throw new RealmException ( " An exception was thrown in the initTable method in the " + generatedClassName + " class " ) ; <nl> + } finally { <nl> + realm . commitTransaction ( ) ; <nl> } <nl> } <nl> - Method validateMethod = null ; <nl> + Method validateMethod ; <nl> try { <nl> validateMethod = generatedClass . getMethod ( " validateTable " , new Class [ ] { ImplicitTransaction . class } ) ; <nl> } catch ( NoSuchMethodException e ) { <nl> @ @ - 236 , 9 + 243 , 11 @ @ public class Realm { <nl> } <nl> } <nl> if ( version = = - 1 ) { <nl> + realm . beginTransaction ( ) ; <nl> realm . setVersion ( 0 ) ; <nl> + realm . commitTransaction ( ) ; <nl> } <nl> - realm . commitTransaction ( ) ; <nl> + <nl> validatedPaths . add ( absolutePath ) ; <nl> } <nl> } <nl> @ @ - 246 , 17 + 255 , 10 @ @ public class Realm { <nl> } <nl> <nl> / / This class stores soft - references to realm objects per thread per realm file <nl> - private static class ThreadRealm extends ThreadLocal < SoftReference < Realm > > { <nl> - private String absolutePath ; <nl> - <nl> - private ThreadRealm ( String absolutePath ) { <nl> - this . absolutePath = absolutePath ; <nl> - } <nl> - <nl> + private static class ThreadRealm extends ThreadLocal < Map < String , Realm > > { <nl> @ Override <nl> - protected SoftReference < Realm > initialValue ( ) { <nl> - Realm realm = new Realm ( absolutePath ) ; <nl> - return new SoftReference < Realm > ( realm ) ; <nl> + protected Map < String , Realm > initialValue ( ) { <nl> + return new HashMap < String , Realm > ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 458 , 7 + 460 , 11 @ @ public class Realm { <nl> Message message = Message . obtain ( ) ; <nl> message . arg1 = LooperThread . REALM _ CHANGED ; <nl> message . arg2 = id ; <nl> - looperThread . handler . sendMessage ( message ) ; <nl> + if ( looperThread . handler ! = null ) { <nl> + looperThread . handler . sendMessage ( message ) ; <nl> + } else { <nl> + Log . i ( TAG , " The LooperThread is not up and running yet . Commit message not sent " ) ; <nl> + } <nl> } <nl> <nl> public void clear ( Class < ? > classSpec ) { <nl> @ @ - 487 , 6 + 493 , 10 @ @ public class Realm { <nl> realm . beginTransaction ( ) ; <nl> realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> realm . commitTransaction ( ) ; <nl> + / / Update the cache <nl> + Map < String , Realm > realms = realmsCache . get ( ) ; <nl> + realms . put ( realmPath , new Realm ( realmPath ) ) ; <nl> + realmsCache . set ( realms ) ; <nl> } <nl> <nl> / * *

TEST DIFF:
diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java b / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java 
 index 684960e . . ba58b50 100644 
 - - - a / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java 
 + + + b / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import android . widget . LinearLayout ; 
 import android . widget . TextView ; 
 
 import io . realm . Realm ; 
 - import io . realm . RealmConfiguration ; 
 import io . realm . RealmResults ; 
 import io . realm . Sort ; 
 import io . realm . examples . intro . model . Cat ; 
 @ @ - 37 , 7 + 36 , 6 @ @ public class IntroExampleActivity extends Activity { 
 private LinearLayout rootLayout = null ; 
 
 private Realm realm ; 
 - private RealmConfiguration realmConfig ; 
 
 @ Override 
 protected void onCreate ( Bundle savedInstanceState ) { 
 @ @ - 148 , 7 + 146 , 7 @ @ public class IntroExampleActivity extends Activity { 
 
 / / Open the default realm . All threads must use it ' s own reference to the realm . 
 / / Those can not be transferred across threads . 
 - Realm realm = Realm . getInstance ( realmConfig ) ; 
 + Realm realm = Realm . getDefaultInstance ( ) ; 
 
 / / Add ten persons in one transaction 
 realm . executeTransaction ( new Realm . Transaction ( ) { 
 @ @ - 204 , 7 + 202 , 7 @ @ public class IntroExampleActivity extends Activity { 
 private String complexQuery ( ) { 
 String status = " \ n \ nPerforming complex Query operation . . . " ; 
 
 - Realm realm = Realm . getInstance ( realmConfig ) ; 
 + Realm realm = Realm . getDefaultInstance ( ) ; 
 status + = " \ nNumber of persons : " + realm . where ( Person . class ) . count ( ) ; 
 
 / / Find all persons where age between 7 and 9 and name begins with " Person " . 
 diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 index f519715 . . 60ab821 100644 
 - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 @ @ - 23 , 7 + 23 , 6 @ @ import android . widget . LinearLayout 
 import android . widget . TextView 
 import io . realm . Realm 
 import io . realm . Sort 
 - import io . realm . RealmConfiguration 
 import io . realm . examples . kotlin . model . Cat 
 import io . realm . examples . kotlin . model . Dog 
 import io . realm . examples . kotlin . model . Person 
 @ @ - 40 , 7 + 39 , 6 @ @ class KotlinExampleActivity : Activity ( ) { 
 
 private var rootLayout : LinearLayout by Delegates . notNull ( ) 
 private var realm : Realm by Delegates . notNull ( ) 
 - private var realmConfig : RealmConfiguration by Delegates . notNull ( ) 
 
 override fun onCreate ( savedInstanceState : Bundle ? ) { 
 super . onCreate ( savedInstanceState ) 
 @ @ - 96 , 8 + 94 , 7 @ @ class KotlinExampleActivity : Activity ( ) { 
 / / All writes must be wrapped in a transaction to facilitate safe multi threading 
 realm . executeTransaction { 
 / / Add a person 
 - var person = realm . createObject ( Person : : class . java ) 
 - person . id = 1 
 + var person = realm . createObject ( Person : : class . java , 1 ) 
 person . name = " Young Person " 
 person . age = 14 
 } 
 @ @ - 137 , 7 + 134 , 7 @ @ class KotlinExampleActivity : Activity ( ) { 
 
 / / Open the default realm . All threads must use it ' s own reference to the realm . 
 / / Those can not be transferred across threads . 
 - val realm = Realm . getInstance ( realmConfig ) 
 + val realm = Realm . getDefaultInstance ( ) 
 
 / / Add ten persons in one transaction 
 realm . executeTransaction { 
 @ @ - 193 , 7 + 190 , 7 @ @ class KotlinExampleActivity : Activity ( ) { 
 
 / / Realm implements the Closable interface , therefore we can make use of Kotlin ' s built - in 
 / / extension method ' use ' ( pun intended ) . 
 - Realm . getInstance ( realmConfig ) . use { 
 + Realm . getDefaultInstance ( ) . use { 
 / / ' it ' is the implicit lambda parameter of type Realm 
 status + = " \ nNumber of persons : $ { it . where ( Person : : class . java ) . count ( ) } " 
 
 diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Person . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Person . kt 
 index 36deb5c . . c408a12 100644 
 - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Person . kt 
 + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / model / Person . kt 
 @ @ - 30 , 7 + 30 , 9 @ @ open class Person ( 
 / / All properties are by default persisted . 
 / / Properties can be annotated with PrimaryKey or Index . 
 / / If you use non - nullable types , properties must be initialized with non - null values . 
 - @ PrimaryKey open var name : String = " " , 
 + @ PrimaryKey open var id : Long = 0 , 
 + 
 + open var name : String = " " , 
 
 open var age : Int = 0 , 
 
 @ @ - 41 , 9 + 43 , 8 @ @ open class Person ( 
 open var cats : RealmList < Cat > = RealmList ( ) , 
 
 / / You can instruct Realm to ignore a field and not persist it . 
 - @ Ignore open var tempReference : Int = 0 , 
 + @ Ignore open var tempReference : Int = 0 
 
 - open var id : Long = 0 
 ) : RealmObject ( ) { 
 / / The Kotlin compiler generates standard getters and setters . 
 / / Realm will overload them and code inside them is ignored .

NEAREST DIFF:
diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java 
 index dd34264 . . 085ded7 100644 
 - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java 
 + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package io . realm . examples . realmmigrationexample ; 
 
 import android . app . Activity ; 
 - import android . os . AsyncTask ; 
 import android . os . Bundle ; 
 import android . util . Log ; 
 import android . widget . LinearLayout ; 
 @ @ - 14 , 8 + 13 , 8 @ @ import java . io . InputStream ; 
 
 import io . realm . Realm ; 
 import io . realm . examples . realmmigrationexample . model . Migration ; 
 - import io . realm . examples . realmmigrationexample . model . Pet ; 
 import io . realm . examples . realmmigrationexample . model . Person ; 
 + import io . realm . exceptions . RealmMigrationNeededException ; 
 
 
 public class RealmMigrationExampleActivity extends Activity { 
 @ @ - 38 , 11 + 37 , 9 @ @ public class RealmMigrationExampleActivity extends Activity { 
 
 try { 
 / / should throw as migration is required 
 - Realm realm = Realm . getInstance ( this , " default0 " ) ; 
 - } 
 - catch ( Exception ex ) { 
 - ex . printStackTrace ( ) ; 
 - / / FIXME - catch the proper exception 
 + Realm . getInstance ( this , " default0 " ) ; 
 + } catch ( RealmMigrationNeededException ex ) { 
 + Log . i ( TAG , " Excellent ! This is expected . " ) ; 
 } 
 
 Realm . migrateRealmAtPath ( path0 , new Migration ( ) ) ; 
 @ @ - 76 , 14 + 73 , 11 @ @ public class RealmMigrationExampleActivity extends Activity { 
 } 
 
 private String realmString ( Realm realm ) { 
 - String string = " " ; 
 - for ( Person p : realm . allObjects ( Person . class ) ) { 
 - string + = " name : " + p . getFullName ( ) + " \ n " ; 
 - string + = " age : " + p . getAge ( ) + " \ n " ; 
 - string + = " pets : " + p . getPets ( ) . size ( ) + " \ n " ; 
 - / / FIXME - print out pet info 
 + StringBuilder stringBuilder = new StringBuilder ( ) ; 
 + for ( Person person : realm . allObjects ( Person . class ) ) { 
 + stringBuilder . append ( person . toString ( ) ) . append ( " \ n " ) ; 
 } 
 - return string ; 
 + return stringBuilder . toString ( ) ; 
 } 
 
 private void showStatus ( Realm realm ) { 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 58c3d7e . . 18ab3ae 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 23 , 11 + 23 , 10 @ @ import android . os . Message ; 
 import android . util . Log ; 
 
 import com . google . common . base . Splitter ; 
 - import com . google . common . collect . Iterables ; 
 import com . google . common . base . Throwables ; 
 + import com . google . common . collect . Iterables ; 
 
 import java . io . File ; 
 - import java . lang . ref . SoftReference ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 @ @ - 56 , 6 + 55 , 12 @ @ public class Realm { 
 private static final String TAG = " REALM " ; 
 private static final String TABLE _ PREFIX = " class _ " ; 
 private static final Set < String > validatedPaths = Collections . synchronizedSet ( new HashSet < String > ( ) ) ; 
 + private static final ThreadLocal < Map < String , Realm > > realmsCache = new ThreadLocal < Map < String , Realm > > ( ) { 
 + @ Override 
 + protected Map < String , Realm > initialValue ( ) { 
 + return new HashMap < String , Realm > ( ) ; 
 + } 
 + } ; 
 
 private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; 
 private static boolean autoRefresh = true ; 
 @ @ - 162 , 14 + 167 , 12 @ @ public class Realm { 
 } 
 
 private static Realm createAndValidate ( String absolutePath , boolean validateSchema ) { 
 - ThreadRealm threadRealm = new ThreadRealm ( absolutePath ) ; 
 - SoftReference < Realm > realmSoftReference = threadRealm . get ( ) ; 
 - Realm realm = realmSoftReference . get ( ) ; 
 + Map < String , Realm > realms = realmsCache . get ( ) ; 
 + Realm realm = realms . get ( absolutePath ) ; 
 if ( realm = = null ) { 
 - / / The garbage collector decided to get rid of the realm instance 
 - Realm newRealm = new Realm ( absolutePath ) ; 
 - threadRealm . set ( new SoftReference < Realm > ( newRealm ) ) ; 
 - realm = newRealm ; 
 + realm = new Realm ( absolutePath ) ; 
 + realms . put ( absolutePath , realm ) ; 
 + realmsCache . set ( realms ) ; 
 } 
 if ( validateSchema ) { 
 / / FIXME - get rid fo validatedPaths - only validate if we don ' t have a cached realm 
 @ @ - 197 , 10 + 200 , 11 @ @ public class Realm { 
 
 realm . beginTransaction ( ) ; 
 long version = realm . getVersion ( ) ; 
 + realm . commitTransaction ( ) ; 
 for ( String className : proxyClasses ) { 
 String modelClassName = Iterables . getLast ( Splitter . on ( " . " ) . split ( className ) ) ; 
 String generatedClassName = " io . realm . " + modelClassName + " RealmProxy " ; 
 - Class < ? > generatedClass = null ; 
 + Class < ? > generatedClass ; 
 try { 
 generatedClass = Class . forName ( generatedClassName ) ; 
 } catch ( ClassNotFoundException e ) { 
 @ @ - 214 , 14 + 218 , 17 @ @ public class Realm { 
 throw new RealmException ( " Could not find the initTable method in the generated " + generatedClassName + " class " ) ; 
 } 
 try { 
 + realm . beginTransaction ( ) ; 
 initTableMethod . invoke ( null , realm . transaction ) ; 
 } catch ( IllegalAccessException e ) { 
 throw new RealmException ( " Could not execute the initTable method in the " + generatedClassName + " class " ) ; 
 } catch ( InvocationTargetException e ) { 
 throw new RealmException ( " An exception was thrown in the initTable method in the " + generatedClassName + " class " ) ; 
 + } finally { 
 + realm . commitTransaction ( ) ; 
 } 
 } 
 - Method validateMethod = null ; 
 + Method validateMethod ; 
 try { 
 validateMethod = generatedClass . getMethod ( " validateTable " , new Class [ ] { ImplicitTransaction . class } ) ; 
 } catch ( NoSuchMethodException e ) { 
 @ @ - 236 , 9 + 243 , 11 @ @ public class Realm { 
 } 
 } 
 if ( version = = - 1 ) { 
 + realm . beginTransaction ( ) ; 
 realm . setVersion ( 0 ) ; 
 + realm . commitTransaction ( ) ; 
 } 
 - realm . commitTransaction ( ) ; 
 + 
 validatedPaths . add ( absolutePath ) ; 
 } 
 } 
 @ @ - 246 , 17 + 255 , 10 @ @ public class Realm { 
 } 
 
 / / This class stores soft - references to realm objects per thread per realm file 
 - private static class ThreadRealm extends ThreadLocal < SoftReference < Realm > > { 
 - private String absolutePath ; 
 - 
 - private ThreadRealm ( String absolutePath ) { 
 - this . absolutePath = absolutePath ; 
 - } 
 - 
 + private static class ThreadRealm extends ThreadLocal < Map < String , Realm > > { 
 @ Override 
 - protected SoftReference < Realm > initialValue ( ) { 
 - Realm realm = new Realm ( absolutePath ) ; 
 - return new SoftReference < Realm > ( realm ) ; 
 + protected Map < String , Realm > initialValue ( ) { 
 + return new HashMap < String , Realm > ( ) ; 
 } 
 } 
 
 @ @ - 458 , 7 + 460 , 11 @ @ public class Realm { 
 Message message = Message . obtain ( ) ; 
 message . arg1 = LooperThread . REALM _ CHANGED ; 
 message . arg2 = id ; 
 - looperThread . handler . sendMessage ( message ) ; 
 + if ( looperThread . handler ! = null ) { 
 + looperThread . handler . sendMessage ( message ) ; 
 + } else { 
 + Log . i ( TAG , " The LooperThread is not up and running yet . Commit message not sent " ) ; 
 + } 
 } 
 
 public void clear ( Class < ? > classSpec ) { 
 @ @ - 487 , 6 + 493 , 10 @ @ public class Realm { 
 realm . beginTransaction ( ) ; 
 realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; 
 realm . commitTransaction ( ) ; 
 + / / Update the cache 
 + Map < String , Realm > realms = realmsCache . get ( ) ; 
 + realms . put ( realmPath , new Realm ( realmPath ) ) ; 
 + realmsCache . set ( realms ) ; 
 } 
 
 / * *
