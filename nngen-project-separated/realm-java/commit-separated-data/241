BLEU SCORE: 0.0033689734995427335

TEST MSG: PR fix
GENERATED MSG: Revert " Removing the restriction of compacting encrypted Realm files . "

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / LinkingObjectsManagedTests . java b / realm / realm - library / src / androidTest / java / io / realm / LinkingObjectsManagedTests . java <nl> index b4d7734 . . a53538e 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / LinkingObjectsManagedTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / LinkingObjectsManagedTests . java <nl> @ @ - 536 , 7 + 536 , 6 @ @ public class LinkingObjectsManagedTests { <nl> CoreMatchers . allOf ( <nl> CoreMatchers . containsString ( " Property ' BacklinksSource . name ' has been added " ) , <nl> CoreMatchers . containsString ( " Property ' BacklinksTarget . parents ' has been removed " ) ) ) ; <nl> - / / assertTrue ( expected . getMessage ( ) . contains ( " Field count is " ) ) ; <nl> } finally { <nl> Realm . deleteRealm ( realmConfig ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> index e6080cf . . 3b8fdd5 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ package io . realm ; <nl> import android . content . Context ; <nl> import android . support . test . InstrumentationRegistry ; <nl> import android . support . test . runner . AndroidJUnit4 ; <nl> - import android . util . Log ; <nl> <nl> import org . hamcrest . CoreMatchers ; <nl> import org . junit . After ; <nl> @ @ - 38 , 13 + 37 , 10 @ @ import java . util . concurrent . atomic . AtomicBoolean ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . AnnotationTypes ; <nl> - import io . realm . entities . Cat ; <nl> import io . realm . entities . CatOwner ; <nl> import io . realm . entities . Dog ; <nl> - import io . realm . entities . DogPrimaryKey ; <nl> import io . realm . entities . FieldOrder ; <nl> import io . realm . entities . NullTypes ; <nl> - import io . realm . entities . Owner ; <nl> import io . realm . entities . PrimaryKeyAsBoxedByte ; <nl> import io . realm . entities . PrimaryKeyAsBoxedInteger ; <nl> import io . realm . entities . PrimaryKeyAsBoxedLong ; <nl> @ @ - 74 , 6 + 70 , 7 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertNull ; <nl> + import static org . junit . Assert . assertSame ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 986 , 7 + 983 , 7 @ @ public class RealmMigrationTests { <nl> fail ( " Failed on " + field ) ; <nl> } catch ( RealmMigrationNeededException e ) { <nl> assertThat ( e . getMessage ( ) , CoreMatchers . containsString ( <nl> - String . format ( " Property ' NullTypes . % s ' has been made required " , field ) ) ) ; <nl> + String . format ( Locale . US , " Property ' NullTypes . % s ' has been made required " , field ) ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 1303 , 7 + 1300 , 7 @ @ public class RealmMigrationTests { <nl> realm = Realm . getInstance ( config ) ; <nl> fail ( ) ; <nl> } catch ( RuntimeException expected ) { <nl> - assertEquals ( exception , expected ) ; <nl> + assertSame ( exception , expected ) ; <nl> } finally { <nl> if ( realm ! = null ) { <nl> realm . close ( ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / exceptions / RealmMigrationNeededException . java b / realm / realm - library / src / main / java / io / realm / exceptions / RealmMigrationNeededException . java <nl> index aadcdc7 . . 4da5400 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / exceptions / RealmMigrationNeededException . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / exceptions / RealmMigrationNeededException . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . io . File ; <nl> import io . realm . internal . Keep ; <nl> <nl> <nl> + / / Constructed from JNI <nl> @ Keep <nl> public final class RealmMigrationNeededException extends RuntimeException { <nl>
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> index 010492d . . 89ed7fd 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . TimeUnit ; <nl> + import java . util . concurrent . TimeoutException ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> @ @ - 1070 , 10 + 1071 , 12 @ @ public class RealmTest extends AndroidTestCase { <nl> Realm . deleteRealm ( realmConfig ) ; <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . close ( ) ; <nl> - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> - realm = Realm . getInstance ( realmConfig ) ; <nl> - assertFalse ( realm . isClosed ( ) ) ; <nl> - realm . close ( ) ; <nl> + / / TODO : remove try / catch block when compacting encrypted Realms is supported <nl> + try { <nl> + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + } <nl> } <nl> <nl> public void testCompactEncryptedPopulatedRealmFile ( ) { <nl> @ @ - 1086 , 13 + 1089 , 12 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> populateTestRealm ( realm , 100 ) ; <nl> realm . close ( ) ; <nl> - <nl> - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> - <nl> - realm = Realm . getInstance ( realmConfig ) ; <nl> - assertFalse ( realm . isClosed ( ) ) ; <nl> - assertEquals ( 100 , realm . allObjects ( AllTypes . class ) . size ( ) ) ; <nl> - realm . close ( ) ; <nl> + / / TODO : remove try / catch block when compacting encrypted Realms is supported <nl> + try { <nl> + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + } <nl> } <nl> <nl> public void testCompactEmptyRealmFile ( ) throws IOException { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 6931f4e . . 42b7397 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 29 , 9 + 29 , 11 @ @ import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> + import java . util . concurrent . CopyOnWriteArraySet ; <nl> <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> import io . realm . internal . SharedGroupManager ; <nl> @ @ - 591 , 6 + 593 , 10 @ @ abstract class BaseRealm implements Closeable { <nl> * Compacts the Realm file defined by the given configuration . <nl> * / <nl> public static boolean compactRealm ( final RealmConfiguration configuration ) { <nl> + if ( configuration . getEncryptionKey ( ) ! = null ) { <nl> + throw new IllegalArgumentException ( " Cannot currently compact an encrypted Realm . " ) ; <nl> + } <nl> + <nl> final AtomicBoolean result = new AtomicBoolean ( false ) ; <nl> <nl> RealmCache . invokeWithGlobalRefCount ( configuration , new RealmCache . Callback ( ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / LinkingObjectsManagedTests . java b / realm / realm - library / src / androidTest / java / io / realm / LinkingObjectsManagedTests . java 
 index b4d7734 . . a53538e 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / LinkingObjectsManagedTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / LinkingObjectsManagedTests . java 
 @ @ - 536 , 7 + 536 , 6 @ @ public class LinkingObjectsManagedTests { 
 CoreMatchers . allOf ( 
 CoreMatchers . containsString ( " Property ' BacklinksSource . name ' has been added " ) , 
 CoreMatchers . containsString ( " Property ' BacklinksTarget . parents ' has been removed " ) ) ) ; 
 - / / assertTrue ( expected . getMessage ( ) . contains ( " Field count is " ) ) ; 
 } finally { 
 Realm . deleteRealm ( realmConfig ) ; 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 index e6080cf . . 3b8fdd5 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 @ @ - 19 , 7 + 19 , 6 @ @ package io . realm ; 
 import android . content . Context ; 
 import android . support . test . InstrumentationRegistry ; 
 import android . support . test . runner . AndroidJUnit4 ; 
 - import android . util . Log ; 
 
 import org . hamcrest . CoreMatchers ; 
 import org . junit . After ; 
 @ @ - 38 , 13 + 37 , 10 @ @ import java . util . concurrent . atomic . AtomicBoolean ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . AnnotationTypes ; 
 - import io . realm . entities . Cat ; 
 import io . realm . entities . CatOwner ; 
 import io . realm . entities . Dog ; 
 - import io . realm . entities . DogPrimaryKey ; 
 import io . realm . entities . FieldOrder ; 
 import io . realm . entities . NullTypes ; 
 - import io . realm . entities . Owner ; 
 import io . realm . entities . PrimaryKeyAsBoxedByte ; 
 import io . realm . entities . PrimaryKeyAsBoxedInteger ; 
 import io . realm . entities . PrimaryKeyAsBoxedLong ; 
 @ @ - 74 , 6 + 70 , 7 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertNull ; 
 + import static org . junit . Assert . assertSame ; 
 import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 @ @ - 986 , 7 + 983 , 7 @ @ public class RealmMigrationTests { 
 fail ( " Failed on " + field ) ; 
 } catch ( RealmMigrationNeededException e ) { 
 assertThat ( e . getMessage ( ) , CoreMatchers . containsString ( 
 - String . format ( " Property ' NullTypes . % s ' has been made required " , field ) ) ) ; 
 + String . format ( Locale . US , " Property ' NullTypes . % s ' has been made required " , field ) ) ) ; 
 } 
 } 
 } 
 @ @ - 1303 , 7 + 1300 , 7 @ @ public class RealmMigrationTests { 
 realm = Realm . getInstance ( config ) ; 
 fail ( ) ; 
 } catch ( RuntimeException expected ) { 
 - assertEquals ( exception , expected ) ; 
 + assertSame ( exception , expected ) ; 
 } finally { 
 if ( realm ! = null ) { 
 realm . close ( ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / exceptions / RealmMigrationNeededException . java b / realm / realm - library / src / main / java / io / realm / exceptions / RealmMigrationNeededException . java 
 index aadcdc7 . . 4da5400 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / exceptions / RealmMigrationNeededException . java 
 + + + b / realm / realm - library / src / main / java / io / realm / exceptions / RealmMigrationNeededException . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . io . File ; 
 import io . realm . internal . Keep ; 
 
 
 + / / Constructed from JNI 
 @ Keep 
 public final class RealmMigrationNeededException extends RuntimeException { 


NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 index 010492d . . 89ed7fd 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 42 , 6 + 42 , 7 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . TimeUnit ; 
 + import java . util . concurrent . TimeoutException ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 
 import io . realm . entities . AllTypes ; 
 @ @ - 1070 , 10 + 1071 , 12 @ @ public class RealmTest extends AndroidTestCase { 
 Realm . deleteRealm ( realmConfig ) ; 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . close ( ) ; 
 - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 - realm = Realm . getInstance ( realmConfig ) ; 
 - assertFalse ( realm . isClosed ( ) ) ; 
 - realm . close ( ) ; 
 + / / TODO : remove try / catch block when compacting encrypted Realms is supported 
 + try { 
 + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + } 
 } 
 
 public void testCompactEncryptedPopulatedRealmFile ( ) { 
 @ @ - 1086 , 13 + 1089 , 12 @ @ public class RealmTest extends AndroidTestCase { 
 
 populateTestRealm ( realm , 100 ) ; 
 realm . close ( ) ; 
 - 
 - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 - 
 - realm = Realm . getInstance ( realmConfig ) ; 
 - assertFalse ( realm . isClosed ( ) ) ; 
 - assertEquals ( 100 , realm . allObjects ( AllTypes . class ) . size ( ) ) ; 
 - realm . close ( ) ; 
 + / / TODO : remove try / catch block when compacting encrypted Realms is supported 
 + try { 
 + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + } 
 } 
 
 public void testCompactEmptyRealmFile ( ) throws IOException { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 6931f4e . . 42b7397 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 29 , 9 + 29 , 11 @ @ import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 + import java . util . concurrent . CopyOnWriteArraySet ; 
 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 import io . realm . internal . SharedGroupManager ; 
 @ @ - 591 , 6 + 593 , 10 @ @ abstract class BaseRealm implements Closeable { 
 * Compacts the Realm file defined by the given configuration . 
 * / 
 public static boolean compactRealm ( final RealmConfiguration configuration ) { 
 + if ( configuration . getEncryptionKey ( ) ! = null ) { 
 + throw new IllegalArgumentException ( " Cannot currently compact an encrypted Realm . " ) ; 
 + } 
 + 
 final AtomicBoolean result = new AtomicBoolean ( false ) ; 
 
 RealmCache . invokeWithGlobalRefCount ( configuration , new RealmCache . Callback ( ) {
