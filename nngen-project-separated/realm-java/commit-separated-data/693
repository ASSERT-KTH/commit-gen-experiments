BLEU SCORE: 0.012637829447572243

TEST MSG: Javadoc corrections for findAllSorted & findAllSortedAsync
GENERATED MSG: In sort ( ) throw exception if field name does not exist .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index a955dfd . . 83cc623 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1648 , 7 + 1648 , 8 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * @ param fieldName the field name to sort by . <nl> * @ return a { @ link io . realm . RealmResults } containing objects . If no objects match the condition , a list with zero <nl> * objects is returned . <nl> - * @ throws java . lang . IllegalArgumentException if field name does not exist . <nl> + * @ throws java . lang . IllegalArgumentException if the field name does not exist or it belongs to a child <nl> + * { @ link RealmObject } or a child { @ link RealmList } . <nl> * / <nl> public RealmResults < E > findAllSorted ( String fieldName ) { <nl> return findAllSorted ( fieldName , Sort . ASCENDING ) ; <nl> @ @ - 1660 , 7 + 1661 , 8 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * <nl> * @ return immediately an empty { @ link RealmResults } . Users need to register a listener <nl> * { @ link io . realm . RealmResults # addChangeListener ( RealmChangeListener ) } to be notified when the query completes . <nl> - * @ throws java . lang . IllegalArgumentException if field name does not exist . <nl> + * @ throws java . lang . IllegalArgumentException if the field name does not exist or it belongs to a child <nl> + * { @ link RealmObject } or a child { @ link RealmList } . <nl> * / <nl> public RealmResults < E > findAllSortedAsync ( String fieldName ) { <nl> return findAllSortedAsync ( fieldName , Sort . ASCENDING ) ; <nl> @ @ - 1823 , 10 + 1825 , 11 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * @ param sortOrder2 sort order for second field <nl> * @ return a { @ link io . realm . RealmResults } containing objects . If no objects match the condition , a list with zero <nl> * objects is returned . <nl> - * @ throws java . lang . IllegalArgumentException if a field name does not exist . <nl> + * @ throws java . lang . IllegalArgumentException if a field name does not exist or it belongs to a child <nl> + * { @ link RealmObject } or a child { @ link RealmList } . <nl> * / <nl> public RealmResults < E > findAllSorted ( String fieldName1 , Sort sortOrder1 , <nl> - String fieldName2 , Sort sortOrder2 ) { <nl> + String fieldName2 , Sort sortOrder2 ) { <nl> return findAllSorted ( new String [ ] { fieldName1 , fieldName2 } , new Sort [ ] { sortOrder1 , sortOrder2 } ) ; <nl> } <nl> <nl> @ @ - 1836 , 7 + 1839 , 8 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * <nl> * @ return immediately an empty { @ link RealmResults } . Users need to register a listener <nl> * { @ link io . realm . RealmResults # addChangeListener ( RealmChangeListener ) } to be notified when the query completes . <nl> - * @ throws java . lang . IllegalArgumentException if a field name does not exist . <nl> + * @ throws java . lang . IllegalArgumentException if a field name does not exist or it belongs to a child <nl> + * { @ link RealmObject } or a child { @ link RealmList } . <nl> * / <nl> public RealmResults < E > findAllSortedAsync ( String fieldName1 , Sort sortOrder1 , <nl> String fieldName2 , Sort sortOrder2 ) {
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> index 8d3ed0d . . b3aa1b5 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> @ @ - 415 , 7 + 415 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> resultList . sort ( " Non - existing " ) ; <nl> fail ( " Column should not exist " ) ; <nl> - } catch ( ArrayIndexOutOfBoundsException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java <nl> index aa45541 . . d36db85 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / src / main / java / io / realm / RealmResults . java <nl> @ @ - 165 , 6 + 165 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> * Only fields of type boolean , short , int , long , float , double , Date , and String are supported . <nl> * <nl> * @ param fieldName The field name to sort by . <nl> + * @ throws java . lang . IllegalArgumentException if field name does not exist . <nl> * / <nl> public void sort ( String fieldName ) { <nl> this . sort ( fieldName , SORT _ ORDER _ ASCENDING ) ; <nl> @ @ - 178 , 6 + 179 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> * @ param sortAscending The direction to sort by ; if true ascending , otherwise descending <nl> * You can use the constants SORT _ ORDER _ ASCENDING and SORT _ ORDER _ DESCENDING <nl> * for readability . <nl> + * @ throws java . lang . IllegalArgumentException if field name does not exist . <nl> * / <nl> public void sort ( String fieldName , boolean sortAscending ) { <nl> realm . checkIfValid ( ) ; <nl> @ @ - 185 , 11 + 187 , 14 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> <nl> if ( table instanceof TableView ) { <nl> long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + if ( columnIndex < 0 ) { <nl> + throw new IllegalArgumentException ( String . format ( " Field ' % s ' does not exist . " , fieldName ) ) ; <nl> + } <nl> TableView . Order TVOrder = sortAscending ? TableView . Order . ascending : TableView . Order . descending ; <nl> ( ( TableView ) table ) . sort ( columnIndex , TVOrder ) ; <nl> } <nl> else { <nl> - throw new IllegalArgumentException ( " Please use allObject ( ) . " ) ; <nl> + throw new IllegalArgumentException ( " Only RealmResults can be sorted - please use allObject ( ) to create a RealmResults . " ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index a955dfd . . 83cc623 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1648 , 7 + 1648 , 8 @ @ public final class RealmQuery < E extends RealmModel > { 
 * @ param fieldName the field name to sort by . 
 * @ return a { @ link io . realm . RealmResults } containing objects . If no objects match the condition , a list with zero 
 * objects is returned . 
 - * @ throws java . lang . IllegalArgumentException if field name does not exist . 
 + * @ throws java . lang . IllegalArgumentException if the field name does not exist or it belongs to a child 
 + * { @ link RealmObject } or a child { @ link RealmList } . 
 * / 
 public RealmResults < E > findAllSorted ( String fieldName ) { 
 return findAllSorted ( fieldName , Sort . ASCENDING ) ; 
 @ @ - 1660 , 7 + 1661 , 8 @ @ public final class RealmQuery < E extends RealmModel > { 
 * 
 * @ return immediately an empty { @ link RealmResults } . Users need to register a listener 
 * { @ link io . realm . RealmResults # addChangeListener ( RealmChangeListener ) } to be notified when the query completes . 
 - * @ throws java . lang . IllegalArgumentException if field name does not exist . 
 + * @ throws java . lang . IllegalArgumentException if the field name does not exist or it belongs to a child 
 + * { @ link RealmObject } or a child { @ link RealmList } . 
 * / 
 public RealmResults < E > findAllSortedAsync ( String fieldName ) { 
 return findAllSortedAsync ( fieldName , Sort . ASCENDING ) ; 
 @ @ - 1823 , 10 + 1825 , 11 @ @ public final class RealmQuery < E extends RealmModel > { 
 * @ param sortOrder2 sort order for second field 
 * @ return a { @ link io . realm . RealmResults } containing objects . If no objects match the condition , a list with zero 
 * objects is returned . 
 - * @ throws java . lang . IllegalArgumentException if a field name does not exist . 
 + * @ throws java . lang . IllegalArgumentException if a field name does not exist or it belongs to a child 
 + * { @ link RealmObject } or a child { @ link RealmList } . 
 * / 
 public RealmResults < E > findAllSorted ( String fieldName1 , Sort sortOrder1 , 
 - String fieldName2 , Sort sortOrder2 ) { 
 + String fieldName2 , Sort sortOrder2 ) { 
 return findAllSorted ( new String [ ] { fieldName1 , fieldName2 } , new Sort [ ] { sortOrder1 , sortOrder2 } ) ; 
 } 
 
 @ @ - 1836 , 7 + 1839 , 8 @ @ public final class RealmQuery < E extends RealmModel > { 
 * 
 * @ return immediately an empty { @ link RealmResults } . Users need to register a listener 
 * { @ link io . realm . RealmResults # addChangeListener ( RealmChangeListener ) } to be notified when the query completes . 
 - * @ throws java . lang . IllegalArgumentException if a field name does not exist . 
 + * @ throws java . lang . IllegalArgumentException if a field name does not exist or it belongs to a child 
 + * { @ link RealmObject } or a child { @ link RealmList } . 
 * / 
 public RealmResults < E > findAllSortedAsync ( String fieldName1 , Sort sortOrder1 , 
 String fieldName2 , Sort sortOrder2 ) {

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 index 8d3ed0d . . b3aa1b5 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 @ @ - 415 , 7 + 415 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 resultList . sort ( " Non - existing " ) ; 
 fail ( " Column should not exist " ) ; 
 - } catch ( ArrayIndexOutOfBoundsException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 
 diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java 
 index aa45541 . . d36db85 100644 
 - - - a / realm / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / src / main / java / io / realm / RealmResults . java 
 @ @ - 165 , 6 + 165 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 * Only fields of type boolean , short , int , long , float , double , Date , and String are supported . 
 * 
 * @ param fieldName The field name to sort by . 
 + * @ throws java . lang . IllegalArgumentException if field name does not exist . 
 * / 
 public void sort ( String fieldName ) { 
 this . sort ( fieldName , SORT _ ORDER _ ASCENDING ) ; 
 @ @ - 178 , 6 + 179 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 * @ param sortAscending The direction to sort by ; if true ascending , otherwise descending 
 * You can use the constants SORT _ ORDER _ ASCENDING and SORT _ ORDER _ DESCENDING 
 * for readability . 
 + * @ throws java . lang . IllegalArgumentException if field name does not exist . 
 * / 
 public void sort ( String fieldName , boolean sortAscending ) { 
 realm . checkIfValid ( ) ; 
 @ @ - 185 , 11 + 187 , 14 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 
 if ( table instanceof TableView ) { 
 long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + if ( columnIndex < 0 ) { 
 + throw new IllegalArgumentException ( String . format ( " Field ' % s ' does not exist . " , fieldName ) ) ; 
 + } 
 TableView . Order TVOrder = sortAscending ? TableView . Order . ascending : TableView . Order . descending ; 
 ( ( TableView ) table ) . sort ( columnIndex , TVOrder ) ; 
 } 
 else { 
 - throw new IllegalArgumentException ( " Please use allObject ( ) . " ) ; 
 + throw new IllegalArgumentException ( " Only RealmResults can be sorted - please use allObject ( ) to create a RealmResults . " ) ; 
 } 
 } 

