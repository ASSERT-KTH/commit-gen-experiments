BLEU SCORE: 0.02139538333930869

TEST MSG: Added Realm . isEmpty ( )
GENERATED MSG: Iterating a RealmResult now correctly identifies any changes to the underlying query result .

TEST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index bd86d1b . . 72e8127 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 0 . 84 . 2 <nl> + * Added Realm . isEmpty ( ) . <nl> * Fixed bug making it impossible to convert a field to being required during a migration . <nl> <nl> 0 . 84 . 1 <nl> diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Group . cpp b / realm / realm - jni / src / io _ realm _ internal _ Group . cpp <nl> index 9b85e9f . . 0336924 100644 <nl> - - - a / realm / realm - jni / src / io _ realm _ internal _ Group . cpp <nl> + + + b / realm / realm - jni / src / io _ realm _ internal _ Group . cpp <nl> @ @ - 289 , 3 + 289 , 20 @ @ JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Group _ nativeEquals ( <nl> } CATCH _ STD ( ) <nl> return false ; <nl> } <nl> + <nl> + JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Group _ nativeIsEmpty ( <nl> + JNIEnv * , jobject , jlong nativeGroupPtr ) <nl> + { <nl> + Group * grp = G ( nativeGroupPtr ) ; <nl> + const string table _ prefix ( TABLE _ PREFIX ) ; <nl> + const size _ t table _ prefix _ length = table _ prefix . length ( ) ; <nl> + <nl> + for ( size _ t i = 0 ; i < grp - > size ( ) ; + + i ) { <nl> + ConstTableRef table = grp - > get _ table ( i ) ; <nl> + const string table _ name = table - > get _ name ( ) ; <nl> + if ( table _ name . compare ( 0 , table _ prefix _ length , table _ prefix ) = = 0 & & ! table - > is _ empty ( ) ) { <nl> + return false ; <nl> + } <nl> + } <nl> + return true ; <nl> + } <nl> diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Group . h b / realm / realm - jni / src / io _ realm _ internal _ Group . h <nl> index 5e95a00 . . 794542d 100644 <nl> - - - a / realm / realm - jni / src / io _ realm _ internal _ Group . h <nl> + + + b / realm / realm - jni / src / io _ realm _ internal _ Group . h <nl> @ @ - 127 , 6 + 127 , 14 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Group _ nativeCommit <nl> JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Group _ nativeToString <nl> ( JNIEnv * , jobject , jlong ) ; <nl> <nl> + / * <nl> + * Class : io _ realm _ internal _ Group <nl> + * Method : nativeIsEmpty <nl> + * Signature : ( J ) Z <nl> + * / <nl> + JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Group _ nativeIsEmpty ( <nl> + JNIEnv * , jobject , jlong nativeGroupPtr ) ; <nl> + <nl> # ifdef _ _ cplusplus <nl> } <nl> # endif <nl> diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Util . cpp b / realm / realm - jni / src / io _ realm _ internal _ Util . cpp <nl> index d1c19f8 . . be08645 100644 <nl> - - - a / realm / realm - jni / src / io _ realm _ internal _ Util . cpp <nl> + + + b / realm / realm - jni / src / io _ realm _ internal _ Util . cpp <nl> @ @ - 29 , 7 + 29 , 9 @ @ using std : : string ; <nl> <nl> / / used by logging <nl> int trace _ level = 0 ; <nl> - const char * log _ tag = " REALM " ; <nl> + const char * log _ tag = " REALM " ; <nl> + <nl> + const char * const TABLE _ PREFIX = " class _ " ; <nl> <nl> JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * ) <nl> { <nl> @ @ - 73 , 6 + 75 , 12 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Util _ nativeGetMemUsage ( JNIEnv * , j <nl> return GetMemUsage ( ) ; <nl> } <nl> <nl> + JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Util _ nativeGetTablePrefix ( <nl> + JNIEnv * env , jclass ) <nl> + { <nl> + return to _ jstring ( env , string ( TABLE _ PREFIX ) ) ; <nl> + } <nl> + <nl> / / - - - - - - - - - - - - - - - - - - - - - - - - - - Testcases for exception handling <nl> <nl> JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Util _ nativeTestcase ( <nl> diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Util . h b / realm / realm - jni / src / io _ realm _ internal _ Util . h <nl> index 6309b24 . . 8a41d65 100644 <nl> - - - a / realm / realm - jni / src / io _ realm _ internal _ Util . h <nl> + + + b / realm / realm - jni / src / io _ realm _ internal _ Util . h <nl> @ @ - 25 , 6 + 25 , 14 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Util _ nativeSetDebugLevel <nl> <nl> / * <nl> * Class : io _ realm _ internal _ Util <nl> + * Method : nativeGetTablePrefix <nl> + * Signature : ( ) Ljava / lang / String ; <nl> + * / <nl> + JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Util _ nativeGetTablePrefix <nl> + ( JNIEnv * , jclass ) ; <nl> + <nl> + / * <nl> + * Class : io _ realm _ internal _ Util <nl> * Method : nativeTestcase <nl> * Signature : ( IZJ ) Ljava / lang / String ; <nl> * / <nl> diff - - git a / realm / realm - jni / src / util . hpp b / realm / realm - jni / src / util . hpp <nl> index ab9209e . . 47a5ff7 100644 <nl> - - - a / realm / realm - jni / src / util . hpp <nl> + + + b / realm / realm - jni / src / util . hpp <nl> @ @ - 136 , 7 + 136 , 7 @ @ jclass GetClass ( JNIEnv * env , const char * classStr ) ; <nl> <nl> / / Debug trace <nl> extern int trace _ level ; <nl> - extern const char * log _ tag ; <nl> + extern const char * log _ tag ; <nl> <nl> # if TRACE <nl> # if defined ( ANDROID ) <nl> @ @ - 584 , 4 + 584 , 6 @ @ inline jobject NewFloat ( JNIEnv * env , float value ) <nl> return env - > NewObject ( java _ lang _ float , java _ lang _ float _ init , value ) ; <nl> } <nl> <nl> + extern const char * const TABLE _ PREFIX ; <nl> + <nl> # endif / / REALM _ JAVA _ UTIL _ HPP <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> index c60f656 . . 49f8c30 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 2278 , 4 + 2278 , 33 @ @ public class RealmTest extends AndroidTestCase { <nl> throw exception . get ( 0 ) ; <nl> } <nl> } <nl> + <nl> + public void testIsEmpty ( ) { <nl> + RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) , " empty _ test . realm " ) ; <nl> + Realm . deleteRealm ( realmConfig ) ; <nl> + Realm emptyRealm = Realm . getInstance ( realmConfig ) ; <nl> + <nl> + assertTrue ( emptyRealm . isEmpty ( ) ) ; <nl> + <nl> + emptyRealm . beginTransaction ( ) ; <nl> + PrimaryKeyAsLong obj = new PrimaryKeyAsLong ( ) ; <nl> + obj . setId ( 1 ) ; <nl> + obj . setName ( " Foo " ) ; <nl> + emptyRealm . copyToRealm ( obj ) ; <nl> + assertFalse ( emptyRealm . isEmpty ( ) ) ; <nl> + emptyRealm . cancelTransaction ( ) ; <nl> + <nl> + assertTrue ( emptyRealm . isEmpty ( ) ) ; <nl> + <nl> + emptyRealm . beginTransaction ( ) ; <nl> + obj = new PrimaryKeyAsLong ( ) ; <nl> + obj . setId ( 1 ) ; <nl> + obj . setName ( " Foo " ) ; <nl> + emptyRealm . copyToRealm ( obj ) ; <nl> + emptyRealm . commitTransaction ( ) ; <nl> + <nl> + assertFalse ( emptyRealm . isEmpty ( ) ) ; <nl> + <nl> + emptyRealm . close ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 8c62541 . . 5869db2 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 444 , 6 + 444 , 16 @ @ abstract class BaseRealm implements Closeable { <nl> } <nl> <nl> / * * <nl> + * Check if this { @ link io . realm . Realm } contains any objects . <nl> + * <nl> + * @ return { @ code true } if empty , @ { code false } otherwise . <nl> + * / <nl> + public boolean isEmpty ( ) { <nl> + checkIfValid ( ) ; <nl> + return sharedGroupManager . getTransaction ( ) . isObjectTablesEmpty ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Returns the ThreadLocal reference counter for this Realm . <nl> * / <nl> protected abstract Map < RealmConfiguration , Integer > getLocalReferenceCount ( ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Group . java b / realm / realm - library / src / main / java / io / realm / internal / Group . java <nl> index 941ab1f . . a54ae45 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Group . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Group . java <nl> @ @ - 226 , 6 + 226 , 17 @ @ public class Group implements Closeable { <nl> return nativeWriteToMem ( nativePtr ) ; <nl> } <nl> <nl> + / * <nl> + * Check if the Group contains any objects . It only checks for " class _ " <nl> + * tables or non - metadata tables , e . g . this return true if the " pk " table <nl> + * contained information . <nl> + * <nl> + * @ return { @ code true } if empty , @ { code false } otherwise . <nl> + * / <nl> + public boolean isObjectTablesEmpty ( ) { <nl> + return nativeIsEmpty ( nativePtr ) ; <nl> + } <nl> + <nl> / * <nl> * TODO : Find a way to release the malloc ' ed native memory automatically <nl> <nl> @ @ - 269 , 4 + 280 , 5 @ @ public class Group implements Closeable { <nl> protected native String nativeToJson ( long nativeGroupPtr ) ; <nl> protected native void nativeCommit ( long nativeGroupPtr ) ; <nl> protected native String nativeToString ( long nativeGroupPtr ) ; <nl> + protected native boolean nativeIsEmpty ( long nativeGroupPtr ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> index e008a23 . . b56f900 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ import io . realm . exceptions . RealmException ; <nl> * / <nl> public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> - public static final String TABLE _ PREFIX = " class _ " ; <nl> + public static final String TABLE _ PREFIX = Util . getTablePrefix ( ) ; <nl> public static final long INFINITE = - 1 ; <nl> public static final String STRING _ DEFAULT _ VALUE = " " ; <nl> public static final long INTEGER _ DEFAULT _ VALUE = 0 ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Util . java b / realm / realm - library / src / main / java / io / realm / internal / Util . java <nl> index 9fb3af7 . . f187331 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Util . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Util . java <nl> @ @ - 40 , 6 + 40 , 11 @ @ public class Util { <nl> System . out . print ( txt ) ; <nl> } <nl> <nl> + public static String getTablePrefix ( ) { <nl> + return nativeGetTablePrefix ( ) ; <nl> + } <nl> + static native String nativeGetTablePrefix ( ) ; <nl> + <nl> <nl> / / Testcases run in nativeCode <nl> public enum Testcase {
NEAREST DIFF (one line): diff - - git a / realm - jni / src / io _ realm _ internal _ TableView . h b / realm - jni / src / io _ realm _ internal _ TableView . h <nl> index 71a4f25 . . a7cd8b0 100644 <nl> - - - a / realm - jni / src / io _ realm _ internal _ TableView . h <nl> + + + b / realm - jni / src / io _ realm _ internal _ TableView . h <nl> @ @ - 543 , 6 + 543 , 14 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableView _ nativeWhere <nl> JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableView _ nativePivot <nl> ( JNIEnv * , jobject , jlong , jlong , jlong , jint , jlong ) ; <nl> <nl> + / * <nl> + * Class : io _ realm _ internal _ TableView <nl> + * Method : nativeSync <nl> + * Signature : ( J ) J <nl> + * / <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableView _ nativeSync <nl> + ( JNIEnv * , jobject , jlong ) ; <nl> + <nl> # ifdef _ _ cplusplus <nl> } <nl> # endif <nl> diff - - git a / realm - jni / src / io _ realm _ internal _ tableview . cpp b / realm - jni / src / io _ realm _ internal _ tableview . cpp <nl> index abf10db . . c5c4d9d 100644 <nl> - - - a / realm - jni / src / io _ realm _ internal _ tableview . cpp <nl> + + + b / realm - jni / src / io _ realm _ internal _ tableview . cpp <nl> @ @ - 1011 , 3 + 1011 , 8 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableView _ nativeWhere <nl> return 0 ; <nl> } <nl> <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableView _ nativeSync ( <nl> + JNIEnv * env , jobject , jlong nativeViewPtr ) <nl> + { <nl> + return TV ( nativeViewPtr ) - > sync _ if _ needed ( ) ; <nl> + } <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsIteratorTests . java b / realm / src / androidTest / java / io / realm / RealmResultsIteratorTests . java <nl> index 5fc167e . . 79e46d4 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmResultsIteratorTests . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmResultsIteratorTests . java <nl> @ @ - 6 , 6 + 6 , 11 @ @ import java . util . ConcurrentModificationException ; <nl> import java . util . Date ; <nl> import java . util . Iterator ; <nl> import java . util . ListIterator ; <nl> + import java . util . concurrent . Callable ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Executors ; <nl> + import java . util . concurrent . Future ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . exceptions . RealmException ; <nl> @ @ - 135 , 6 + 140 , 59 @ @ public class RealmResultsIteratorTests extends AndroidTestCase { <nl> fail ( " remove ( ) not allowed " ) ; <nl> } <nl> <nl> + / / Using size ( ) as heuristic for concurrent modifications is dangerous as we might skip <nl> + / / elements . <nl> + public void testRemovingObjectsFromOtherThreadWhileIterating ( ) throws InterruptedException , ExecutionException { <nl> + <nl> + / / Prefill <nl> + Realm realm = Realm . getInstance ( getContext ( ) , " test " ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . clear ( AllTypes . class ) ; <nl> + AllTypes o1 = realm . createObject ( AllTypes . class ) ; <nl> + o1 . setColumnLong ( 1 ) ; <nl> + AllTypes o2 = realm . createObject ( AllTypes . class ) ; <nl> + o2 . setColumnLong ( 2 ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + / / Iterate past 1st item <nl> + RealmResults < AllTypes > result = realm . allObjects ( AllTypes . class ) ; <nl> + Iterator < AllTypes > it = result . iterator ( ) ; <nl> + it . next ( ) ; <nl> + <nl> + / / Delete first item and insert new . Meaning Item 2 gets Item 1s place , and is skipped <nl> + / / in iterator when calling next ( ) . <nl> + Callable < Boolean > backgroundWorker = new Callable < Boolean > ( ) { <nl> + @ Override <nl> + public Boolean call ( ) throws Exception { <nl> + Realm backgroundRealm = Realm . getInstance ( getContext ( ) , " test " , false ) ; <nl> + backgroundRealm . beginTransaction ( ) ; <nl> + RealmResults < AllTypes > backgroundResult = backgroundRealm . allObjects ( AllTypes . class ) ; <nl> + if ( backgroundResult . size ( ) ! = 2 ) return false ; <nl> + backgroundResult . sort ( " columnLong " , RealmResults . SORT _ ORDER _ ASCENDING ) . remove ( 0 ) ; <nl> + AllTypes o3 = backgroundRealm . createObject ( AllTypes . class ) ; <nl> + o3 . setColumnLong ( 3 ) ; <nl> + backgroundRealm . commitTransaction ( ) ; <nl> + if ( backgroundResult . size ( ) ! = 2 ) return false ; <nl> + return true ; <nl> + } <nl> + } ; <nl> + <nl> + / / Wait for background thread to finish <nl> + ExecutorService executorService = Executors . newFixedThreadPool ( 1 ) ; <nl> + Future < Boolean > backgroundResult = executorService . submit ( backgroundWorker ) ; <nl> + assertTrue ( backgroundResult . get ( ) ) ; <nl> + realm . refresh ( ) ; / / This shouldn ' t be needed , but is currently . <nl> + <nl> + / / Next item would now be o3 . <nl> + try { <nl> + AllTypes o3 = it . next ( ) ; <nl> + assertEquals ( 3 , o3 . getColumnLong ( ) ) ; <nl> + fail ( " Failed to detect the list was modified , but retained it ' s size while iterating " ) ; <nl> + } catch ( ConcurrentModificationException e ) { <nl> + return ; <nl> + } <nl> + } <nl> + <nl> private long sum ( int start , int end ) { <nl> long sum = 0 ; <nl> for ( int i = start ; i < = end ; i + + ) { <nl> diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java <nl> index 6746951 . . e263f38 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / src / main / java / io / realm / RealmResults . java <nl> @ @ - 20 , 10 + 20 , 8 @ @ package io . realm ; <nl> import java . util . AbstractList ; <nl> import java . util . ConcurrentModificationException ; <nl> import java . util . Date ; <nl> - import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . ListIterator ; <nl> - import java . util . Map ; <nl> import java . util . NoSuchElementException ; <nl> <nl> import io . realm . exceptions . RealmException ; <nl> @ @ - 55 , 7 + 53 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> public static final boolean SORT _ ORDER _ DECENDING = false ; <nl> <nl> private static final String TYPE _ MISMATCH = " Field ' % s ' : type mismatch - % s expected . " ; <nl> - private int oldSize = - 1 ; / / Used to keep track of changes to Realm . Bad invarient , replace with version number from sync method . <nl> + private long currentTableViewVersion = - 1 ; <nl> <nl> RealmResults ( Realm realm , Class < E > classSpec ) { <nl> this . realm = realm ; <nl> @ @ - 79 , 8 + 77 , 6 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> } <nl> <nl> - Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; <nl> - <nl> / * * <nl> * Returns a typed @ { link io . realm . RealmQuery } , which can be used to query for specific <nl> * objects of this type . <nl> @ @ - 409 , 16 + 405 , 13 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> / / throw new NoSuchMethodError ( ) ; <nl> / / } <nl> <nl> - / / TODO : This is not safe , size ( ) can return the same result even though the data has changed <nl> - / / Core has exposed a method so we can compare tableview version numbers , but are awaiting a core <nl> - / / release . <nl> private void assertRealmIsStable ( ) { <nl> - int newSize = size ( ) ; <nl> - if ( oldSize > - 1 & & newSize ! = oldSize ) { <nl> + long version = table . sync ( ) ; <nl> + if ( currentTableViewVersion > - 1 & & version ! = currentTableViewVersion ) { <nl> throw new ConcurrentModificationException ( " No changes to a Realm is allowed while iterating a RealmResults . " ) ; <nl> } <nl> <nl> - oldSize = newSize ; <nl> + currentTableViewVersion = version ; <nl> } <nl> <nl> / / Custom RealmResults iterator . It ensures that we only iterate on a Realm that hasn ' t changed . <nl> @ @ - 426 , 7 + 419 , 9 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> <nl> int pos = - 1 ; <nl> <nl> - RealmResultsIterator ( ) { } <nl> + RealmResultsIterator ( ) { <nl> + currentTableViewVersion = table . sync ( ) ; <nl> + } <nl> <nl> public boolean hasNext ( ) { <nl> assertRealmIsStable ( ) ; <nl> diff - - git a / realm / src / main / java / io / realm / internal / Table . java b / realm / src / main / java / io / realm / internal / Table . java <nl> index 8ad15c3 . . 2b1305f 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / Table . java <nl> + + + b / realm / src / main / java / io / realm / internal / Table . java <nl> @ @ - 1434 , 6 + 1434 , 11 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> protected native String nativeRowToString ( long nativeTablePtr , long rowIndex ) ; <nl> <nl> + @ Override <nl> + public long sync ( ) { <nl> + throw new RuntimeException ( " Not supported for tables " ) ; <nl> + } <nl> + <nl> private void throwImmutable ( ) { <nl> throw new IllegalStateException ( " Mutable method call during read transaction . " ) ; <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / internal / TableOrView . java b / realm / src / main / java / io / realm / internal / TableOrView . java <nl> index 304168d . . 3432bd8 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / TableOrView . java <nl> + + + b / realm / src / main / java / io / realm / internal / TableOrView . java <nl> @ @ - 326 , 4 + 326 , 11 @ @ public interface TableOrView { <nl> <nl> public Table pivot ( long stringCol , long intCol , PivotType pivotType ) ; <nl> <nl> + / * * <nl> + * Syncs the tableview with the underlying table data . It is not required to call this <nl> + * explicitly , all other API methods will automatically sync the view as well . <nl> + * <nl> + * @ return Version number for the updated tableview . <nl> + * / <nl> + public long sync ( ) ; <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / internal / TableView . java b / realm / src / main / java / io / realm / internal / TableView . java <nl> index 68622f5 . . 2a03eec 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / TableView . java <nl> + + + b / realm / src / main / java / io / realm / internal / TableView . java <nl> @ @ - 924 , 6 + 924 , 14 @ @ public class TableView implements TableOrView , Closeable { <nl> nativePivot ( nativePtr , stringCol , intCol , pivotType . value , result . nativePtr ) ; <nl> return result ; <nl> } <nl> - <nl> - protected native void nativePivot ( long nativeTablePtr , long sringCol , long intCol , int pivotType , long result ) ; <nl> + <nl> + protected native void nativePivot ( long nativeTablePtr , long sringCol , long intCol , int pivotType , long result ) ; <nl> + <nl> + <nl> + @ Override <nl> + public long sync ( ) { <nl> + return nativeSync ( nativePtr ) ; <nl> + } <nl> + <nl> + protected native long nativeSync ( long nativeTablePtr ) ; <nl> }

TEST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index bd86d1b . . 72e8127 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 0 . 84 . 2 
 + * Added Realm . isEmpty ( ) . 
 * Fixed bug making it impossible to convert a field to being required during a migration . 
 
 0 . 84 . 1 
 diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Group . cpp b / realm / realm - jni / src / io _ realm _ internal _ Group . cpp 
 index 9b85e9f . . 0336924 100644 
 - - - a / realm / realm - jni / src / io _ realm _ internal _ Group . cpp 
 + + + b / realm / realm - jni / src / io _ realm _ internal _ Group . cpp 
 @ @ - 289 , 3 + 289 , 20 @ @ JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Group _ nativeEquals ( 
 } CATCH _ STD ( ) 
 return false ; 
 } 
 + 
 + JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Group _ nativeIsEmpty ( 
 + JNIEnv * , jobject , jlong nativeGroupPtr ) 
 + { 
 + Group * grp = G ( nativeGroupPtr ) ; 
 + const string table _ prefix ( TABLE _ PREFIX ) ; 
 + const size _ t table _ prefix _ length = table _ prefix . length ( ) ; 
 + 
 + for ( size _ t i = 0 ; i < grp - > size ( ) ; + + i ) { 
 + ConstTableRef table = grp - > get _ table ( i ) ; 
 + const string table _ name = table - > get _ name ( ) ; 
 + if ( table _ name . compare ( 0 , table _ prefix _ length , table _ prefix ) = = 0 & & ! table - > is _ empty ( ) ) { 
 + return false ; 
 + } 
 + } 
 + return true ; 
 + } 
 diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Group . h b / realm / realm - jni / src / io _ realm _ internal _ Group . h 
 index 5e95a00 . . 794542d 100644 
 - - - a / realm / realm - jni / src / io _ realm _ internal _ Group . h 
 + + + b / realm / realm - jni / src / io _ realm _ internal _ Group . h 
 @ @ - 127 , 6 + 127 , 14 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Group _ nativeCommit 
 JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Group _ nativeToString 
 ( JNIEnv * , jobject , jlong ) ; 
 
 + / * 
 + * Class : io _ realm _ internal _ Group 
 + * Method : nativeIsEmpty 
 + * Signature : ( J ) Z 
 + * / 
 + JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Group _ nativeIsEmpty ( 
 + JNIEnv * , jobject , jlong nativeGroupPtr ) ; 
 + 
 # ifdef _ _ cplusplus 
 } 
 # endif 
 diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Util . cpp b / realm / realm - jni / src / io _ realm _ internal _ Util . cpp 
 index d1c19f8 . . be08645 100644 
 - - - a / realm / realm - jni / src / io _ realm _ internal _ Util . cpp 
 + + + b / realm / realm - jni / src / io _ realm _ internal _ Util . cpp 
 @ @ - 29 , 7 + 29 , 9 @ @ using std : : string ; 
 
 / / used by logging 
 int trace _ level = 0 ; 
 - const char * log _ tag = " REALM " ; 
 + const char * log _ tag = " REALM " ; 
 + 
 + const char * const TABLE _ PREFIX = " class _ " ; 
 
 JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * ) 
 { 
 @ @ - 73 , 6 + 75 , 12 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Util _ nativeGetMemUsage ( JNIEnv * , j 
 return GetMemUsage ( ) ; 
 } 
 
 + JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Util _ nativeGetTablePrefix ( 
 + JNIEnv * env , jclass ) 
 + { 
 + return to _ jstring ( env , string ( TABLE _ PREFIX ) ) ; 
 + } 
 + 
 / / - - - - - - - - - - - - - - - - - - - - - - - - - - Testcases for exception handling 
 
 JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Util _ nativeTestcase ( 
 diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Util . h b / realm / realm - jni / src / io _ realm _ internal _ Util . h 
 index 6309b24 . . 8a41d65 100644 
 - - - a / realm / realm - jni / src / io _ realm _ internal _ Util . h 
 + + + b / realm / realm - jni / src / io _ realm _ internal _ Util . h 
 @ @ - 25 , 6 + 25 , 14 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Util _ nativeSetDebugLevel 
 
 / * 
 * Class : io _ realm _ internal _ Util 
 + * Method : nativeGetTablePrefix 
 + * Signature : ( ) Ljava / lang / String ; 
 + * / 
 + JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Util _ nativeGetTablePrefix 
 + ( JNIEnv * , jclass ) ; 
 + 
 + / * 
 + * Class : io _ realm _ internal _ Util 
 * Method : nativeTestcase 
 * Signature : ( IZJ ) Ljava / lang / String ; 
 * / 
 diff - - git a / realm / realm - jni / src / util . hpp b / realm / realm - jni / src / util . hpp 
 index ab9209e . . 47a5ff7 100644 
 - - - a / realm / realm - jni / src / util . hpp 
 + + + b / realm / realm - jni / src / util . hpp 
 @ @ - 136 , 7 + 136 , 7 @ @ jclass GetClass ( JNIEnv * env , const char * classStr ) ; 
 
 / / Debug trace 
 extern int trace _ level ; 
 - extern const char * log _ tag ; 
 + extern const char * log _ tag ; 
 
 # if TRACE 
 # if defined ( ANDROID ) 
 @ @ - 584 , 4 + 584 , 6 @ @ inline jobject NewFloat ( JNIEnv * env , float value ) 
 return env - > NewObject ( java _ lang _ float , java _ lang _ float _ init , value ) ; 
 } 
 
 + extern const char * const TABLE _ PREFIX ; 
 + 
 # endif / / REALM _ JAVA _ UTIL _ HPP 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 index c60f656 . . 49f8c30 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 2278 , 4 + 2278 , 33 @ @ public class RealmTest extends AndroidTestCase { 
 throw exception . get ( 0 ) ; 
 } 
 } 
 + 
 + public void testIsEmpty ( ) { 
 + RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) , " empty _ test . realm " ) ; 
 + Realm . deleteRealm ( realmConfig ) ; 
 + Realm emptyRealm = Realm . getInstance ( realmConfig ) ; 
 + 
 + assertTrue ( emptyRealm . isEmpty ( ) ) ; 
 + 
 + emptyRealm . beginTransaction ( ) ; 
 + PrimaryKeyAsLong obj = new PrimaryKeyAsLong ( ) ; 
 + obj . setId ( 1 ) ; 
 + obj . setName ( " Foo " ) ; 
 + emptyRealm . copyToRealm ( obj ) ; 
 + assertFalse ( emptyRealm . isEmpty ( ) ) ; 
 + emptyRealm . cancelTransaction ( ) ; 
 + 
 + assertTrue ( emptyRealm . isEmpty ( ) ) ; 
 + 
 + emptyRealm . beginTransaction ( ) ; 
 + obj = new PrimaryKeyAsLong ( ) ; 
 + obj . setId ( 1 ) ; 
 + obj . setName ( " Foo " ) ; 
 + emptyRealm . copyToRealm ( obj ) ; 
 + emptyRealm . commitTransaction ( ) ; 
 + 
 + assertFalse ( emptyRealm . isEmpty ( ) ) ; 
 + 
 + emptyRealm . close ( ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 8c62541 . . 5869db2 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 444 , 6 + 444 , 16 @ @ abstract class BaseRealm implements Closeable { 
 } 
 
 / * * 
 + * Check if this { @ link io . realm . Realm } contains any objects . 
 + * 
 + * @ return { @ code true } if empty , @ { code false } otherwise . 
 + * / 
 + public boolean isEmpty ( ) { 
 + checkIfValid ( ) ; 
 + return sharedGroupManager . getTransaction ( ) . isObjectTablesEmpty ( ) ; 
 + } 
 + 
 + / * * 
 * Returns the ThreadLocal reference counter for this Realm . 
 * / 
 protected abstract Map < RealmConfiguration , Integer > getLocalReferenceCount ( ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Group . java b / realm / realm - library / src / main / java / io / realm / internal / Group . java 
 index 941ab1f . . a54ae45 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Group . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Group . java 
 @ @ - 226 , 6 + 226 , 17 @ @ public class Group implements Closeable { 
 return nativeWriteToMem ( nativePtr ) ; 
 } 
 
 + / * 
 + * Check if the Group contains any objects . It only checks for " class _ " 
 + * tables or non - metadata tables , e . g . this return true if the " pk " table 
 + * contained information . 
 + * 
 + * @ return { @ code true } if empty , @ { code false } otherwise . 
 + * / 
 + public boolean isObjectTablesEmpty ( ) { 
 + return nativeIsEmpty ( nativePtr ) ; 
 + } 
 + 
 / * 
 * TODO : Find a way to release the malloc ' ed native memory automatically 
 
 @ @ - 269 , 4 + 280 , 5 @ @ public class Group implements Closeable { 
 protected native String nativeToJson ( long nativeGroupPtr ) ; 
 protected native void nativeCommit ( long nativeGroupPtr ) ; 
 protected native String nativeToString ( long nativeGroupPtr ) ; 
 + protected native boolean nativeIsEmpty ( long nativeGroupPtr ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 index e008a23 . . b56f900 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 @ @ - 31 , 7 + 31 , 7 @ @ import io . realm . exceptions . RealmException ; 
 * / 
 public class Table implements TableOrView , TableSchema , Closeable { 
 
 - public static final String TABLE _ PREFIX = " class _ " ; 
 + public static final String TABLE _ PREFIX = Util . getTablePrefix ( ) ; 
 public static final long INFINITE = - 1 ; 
 public static final String STRING _ DEFAULT _ VALUE = " " ; 
 public static final long INTEGER _ DEFAULT _ VALUE = 0 ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Util . java b / realm / realm - library / src / main / java / io / realm / internal / Util . java 
 index 9fb3af7 . . f187331 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Util . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Util . java 
 @ @ - 40 , 6 + 40 , 11 @ @ public class Util { 
 System . out . print ( txt ) ; 
 } 
 
 + public static String getTablePrefix ( ) { 
 + return nativeGetTablePrefix ( ) ; 
 + } 
 + static native String nativeGetTablePrefix ( ) ; 
 + 
 
 / / Testcases run in nativeCode 
 public enum Testcase {

NEAREST DIFF:
diff - - git a / realm - jni / src / io _ realm _ internal _ TableView . h b / realm - jni / src / io _ realm _ internal _ TableView . h 
 index 71a4f25 . . a7cd8b0 100644 
 - - - a / realm - jni / src / io _ realm _ internal _ TableView . h 
 + + + b / realm - jni / src / io _ realm _ internal _ TableView . h 
 @ @ - 543 , 6 + 543 , 14 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableView _ nativeWhere 
 JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableView _ nativePivot 
 ( JNIEnv * , jobject , jlong , jlong , jlong , jint , jlong ) ; 
 
 + / * 
 + * Class : io _ realm _ internal _ TableView 
 + * Method : nativeSync 
 + * Signature : ( J ) J 
 + * / 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableView _ nativeSync 
 + ( JNIEnv * , jobject , jlong ) ; 
 + 
 # ifdef _ _ cplusplus 
 } 
 # endif 
 diff - - git a / realm - jni / src / io _ realm _ internal _ tableview . cpp b / realm - jni / src / io _ realm _ internal _ tableview . cpp 
 index abf10db . . c5c4d9d 100644 
 - - - a / realm - jni / src / io _ realm _ internal _ tableview . cpp 
 + + + b / realm - jni / src / io _ realm _ internal _ tableview . cpp 
 @ @ - 1011 , 3 + 1011 , 8 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableView _ nativeWhere 
 return 0 ; 
 } 
 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableView _ nativeSync ( 
 + JNIEnv * env , jobject , jlong nativeViewPtr ) 
 + { 
 + return TV ( nativeViewPtr ) - > sync _ if _ needed ( ) ; 
 + } 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsIteratorTests . java b / realm / src / androidTest / java / io / realm / RealmResultsIteratorTests . java 
 index 5fc167e . . 79e46d4 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmResultsIteratorTests . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmResultsIteratorTests . java 
 @ @ - 6 , 6 + 6 , 11 @ @ import java . util . ConcurrentModificationException ; 
 import java . util . Date ; 
 import java . util . Iterator ; 
 import java . util . ListIterator ; 
 + import java . util . concurrent . Callable ; 
 + import java . util . concurrent . ExecutionException ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . Executors ; 
 + import java . util . concurrent . Future ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . exceptions . RealmException ; 
 @ @ - 135 , 6 + 140 , 59 @ @ public class RealmResultsIteratorTests extends AndroidTestCase { 
 fail ( " remove ( ) not allowed " ) ; 
 } 
 
 + / / Using size ( ) as heuristic for concurrent modifications is dangerous as we might skip 
 + / / elements . 
 + public void testRemovingObjectsFromOtherThreadWhileIterating ( ) throws InterruptedException , ExecutionException { 
 + 
 + / / Prefill 
 + Realm realm = Realm . getInstance ( getContext ( ) , " test " ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . clear ( AllTypes . class ) ; 
 + AllTypes o1 = realm . createObject ( AllTypes . class ) ; 
 + o1 . setColumnLong ( 1 ) ; 
 + AllTypes o2 = realm . createObject ( AllTypes . class ) ; 
 + o2 . setColumnLong ( 2 ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + / / Iterate past 1st item 
 + RealmResults < AllTypes > result = realm . allObjects ( AllTypes . class ) ; 
 + Iterator < AllTypes > it = result . iterator ( ) ; 
 + it . next ( ) ; 
 + 
 + / / Delete first item and insert new . Meaning Item 2 gets Item 1s place , and is skipped 
 + / / in iterator when calling next ( ) . 
 + Callable < Boolean > backgroundWorker = new Callable < Boolean > ( ) { 
 + @ Override 
 + public Boolean call ( ) throws Exception { 
 + Realm backgroundRealm = Realm . getInstance ( getContext ( ) , " test " , false ) ; 
 + backgroundRealm . beginTransaction ( ) ; 
 + RealmResults < AllTypes > backgroundResult = backgroundRealm . allObjects ( AllTypes . class ) ; 
 + if ( backgroundResult . size ( ) ! = 2 ) return false ; 
 + backgroundResult . sort ( " columnLong " , RealmResults . SORT _ ORDER _ ASCENDING ) . remove ( 0 ) ; 
 + AllTypes o3 = backgroundRealm . createObject ( AllTypes . class ) ; 
 + o3 . setColumnLong ( 3 ) ; 
 + backgroundRealm . commitTransaction ( ) ; 
 + if ( backgroundResult . size ( ) ! = 2 ) return false ; 
 + return true ; 
 + } 
 + } ; 
 + 
 + / / Wait for background thread to finish 
 + ExecutorService executorService = Executors . newFixedThreadPool ( 1 ) ; 
 + Future < Boolean > backgroundResult = executorService . submit ( backgroundWorker ) ; 
 + assertTrue ( backgroundResult . get ( ) ) ; 
 + realm . refresh ( ) ; / / This shouldn ' t be needed , but is currently . 
 + 
 + / / Next item would now be o3 . 
 + try { 
 + AllTypes o3 = it . next ( ) ; 
 + assertEquals ( 3 , o3 . getColumnLong ( ) ) ; 
 + fail ( " Failed to detect the list was modified , but retained it ' s size while iterating " ) ; 
 + } catch ( ConcurrentModificationException e ) { 
 + return ; 
 + } 
 + } 
 + 
 private long sum ( int start , int end ) { 
 long sum = 0 ; 
 for ( int i = start ; i < = end ; i + + ) { 
 diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java 
 index 6746951 . . e263f38 100644 
 - - - a / realm / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / src / main / java / io / realm / RealmResults . java 
 @ @ - 20 , 10 + 20 , 8 @ @ package io . realm ; 
 import java . util . AbstractList ; 
 import java . util . ConcurrentModificationException ; 
 import java . util . Date ; 
 - import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . ListIterator ; 
 - import java . util . Map ; 
 import java . util . NoSuchElementException ; 
 
 import io . realm . exceptions . RealmException ; 
 @ @ - 55 , 7 + 53 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 public static final boolean SORT _ ORDER _ DECENDING = false ; 
 
 private static final String TYPE _ MISMATCH = " Field ' % s ' : type mismatch - % s expected . " ; 
 - private int oldSize = - 1 ; / / Used to keep track of changes to Realm . Bad invarient , replace with version number from sync method . 
 + private long currentTableViewVersion = - 1 ; 
 
 RealmResults ( Realm realm , Class < E > classSpec ) { 
 this . realm = realm ; 
 @ @ - 79 , 8 + 77 , 6 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 } 
 } 
 
 - Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; 
 - 
 / * * 
 * Returns a typed @ { link io . realm . RealmQuery } , which can be used to query for specific 
 * objects of this type . 
 @ @ - 409 , 16 + 405 , 13 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 / / throw new NoSuchMethodError ( ) ; 
 / / } 
 
 - / / TODO : This is not safe , size ( ) can return the same result even though the data has changed 
 - / / Core has exposed a method so we can compare tableview version numbers , but are awaiting a core 
 - / / release . 
 private void assertRealmIsStable ( ) { 
 - int newSize = size ( ) ; 
 - if ( oldSize > - 1 & & newSize ! = oldSize ) { 
 + long version = table . sync ( ) ; 
 + if ( currentTableViewVersion > - 1 & & version ! = currentTableViewVersion ) { 
 throw new ConcurrentModificationException ( " No changes to a Realm is allowed while iterating a RealmResults . " ) ; 
 } 
 
 - oldSize = newSize ; 
 + currentTableViewVersion = version ; 
 } 
 
 / / Custom RealmResults iterator . It ensures that we only iterate on a Realm that hasn ' t changed . 
 @ @ - 426 , 7 + 419 , 9 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 
 int pos = - 1 ; 
 
 - RealmResultsIterator ( ) { } 
 + RealmResultsIterator ( ) { 
 + currentTableViewVersion = table . sync ( ) ; 
 + } 
 
 public boolean hasNext ( ) { 
 assertRealmIsStable ( ) ; 
 diff - - git a / realm / src / main / java / io / realm / internal / Table . java b / realm / src / main / java / io / realm / internal / Table . java 
 index 8ad15c3 . . 2b1305f 100644 
 - - - a / realm / src / main / java / io / realm / internal / Table . java 
 + + + b / realm / src / main / java / io / realm / internal / Table . java 
 @ @ - 1434 , 6 + 1434 , 11 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 protected native String nativeRowToString ( long nativeTablePtr , long rowIndex ) ; 
 
 + @ Override 
 + public long sync ( ) { 
 + throw new RuntimeException ( " Not supported for tables " ) ; 
 + } 
 + 
 private void throwImmutable ( ) { 
 throw new IllegalStateException ( " Mutable method call during read transaction . " ) ; 
 } 
 diff - - git a / realm / src / main / java / io / realm / internal / TableOrView . java b / realm / src / main / java / io / realm / internal / TableOrView . java 
 index 304168d . . 3432bd8 100644 
 - - - a / realm / src / main / java / io / realm / internal / TableOrView . java 
 + + + b / realm / src / main / java / io / realm / internal / TableOrView . java 
 @ @ - 326 , 4 + 326 , 11 @ @ public interface TableOrView { 
 
 public Table pivot ( long stringCol , long intCol , PivotType pivotType ) ; 
 
 + / * * 
 + * Syncs the tableview with the underlying table data . It is not required to call this 
 + * explicitly , all other API methods will automatically sync the view as well . 
 + * 
 + * @ return Version number for the updated tableview . 
 + * / 
 + public long sync ( ) ; 
 } 
 diff - - git a / realm / src / main / java / io / realm / internal / TableView . java b / realm / src / main / java / io / realm / internal / TableView . java 
 index 68622f5 . . 2a03eec 100644 
 - - - a / realm / src / main / java / io / realm / internal / TableView . java 
 + + + b / realm / src / main / java / io / realm / internal / TableView . java 
 @ @ - 924 , 6 + 924 , 14 @ @ public class TableView implements TableOrView , Closeable { 
 nativePivot ( nativePtr , stringCol , intCol , pivotType . value , result . nativePtr ) ; 
 return result ; 
 } 
 - 
 - protected native void nativePivot ( long nativeTablePtr , long sringCol , long intCol , int pivotType , long result ) ; 
 + 
 + protected native void nativePivot ( long nativeTablePtr , long sringCol , long intCol , int pivotType , long result ) ; 
 + 
 + 
 + @ Override 
 + public long sync ( ) { 
 + return nativeSync ( nativePtr ) ; 
 + } 
 + 
 + protected native long nativeSync ( long nativeTablePtr ) ; 
 }
