BLEU SCORE: 0.020980574531482755

TEST MSG: Fix Context leak warning in threadExample ( # 4580 )
GENERATED MSG: Remove unused Activity from the concurrency example

TEST DIFF (one line): diff - - git a / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java b / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java <nl> index c3b567d . . 79148ea 100644 <nl> - - - a / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java <nl> + + + b / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java <nl> @ @ - 28 , 6 + 28 , 8 @ @ import android . widget . ProgressBar ; <nl> import android . widget . SeekBar ; <nl> import android . widget . TextView ; <nl> <nl> + import java . lang . ref . WeakReference ; <nl> + <nl> import io . realm . Realm ; <nl> import io . realm . examples . threads . model . Score ; <nl> <nl> @ @ - 56 , 7 + 58 , 7 @ @ public class AsyncTaskFragment extends Fragment { <nl> asyncTask . cancel ( true ) ; <nl> } <nl> <nl> - asyncTask = new ImportAsyncTask ( ) ; <nl> + asyncTask = new ImportAsyncTask ( AsyncTaskFragment . this ) ; <nl> asyncTask . execute ( ) ; <nl> } <nl> } ) ; <nl> @ @ - 64 , 6 + 66 , 14 @ @ public class AsyncTaskFragment extends Fragment { <nl> return rootView ; <nl> } <nl> <nl> + @ Override <nl> + public void onStop ( ) { <nl> + super . onStop ( ) ; <nl> + if ( asyncTask ! = null ) { <nl> + asyncTask . cancel ( false ) ; <nl> + } <nl> + } <nl> + <nl> private void showStatus ( String txt ) { <nl> Log . i ( TAG , txt ) ; <nl> TextView tv = new TextView ( getActivity ( ) ) ; <nl> @ @ - 80 , 7 + 90 , 13 @ @ public class AsyncTaskFragment extends Fragment { <nl> / / UI thread . This means that it is not possible to reuse RealmObjects or RealmResults created <nl> / / in doInBackground ( ) in the other methods . Nor is it possible to use RealmObjects as Progress <nl> / / or Result objects . <nl> - private class ImportAsyncTask extends AsyncTask < Void , Integer , Integer > { <nl> + private static class ImportAsyncTask extends AsyncTask < Void , Integer , Integer > { <nl> + <nl> + private final WeakReference < AsyncTaskFragment > fragmentRef ; <nl> + <nl> + ImportAsyncTask ( AsyncTaskFragment outerFragment ) { <nl> + fragmentRef = new WeakReference < AsyncTaskFragment > ( outerFragment ) ; <nl> + } <nl> <nl> @ Override <nl> protected Integer doInBackground ( Void . . . params ) { <nl> @ @ - 106 , 16 + 122 , 25 @ @ public class AsyncTaskFragment extends Fragment { <nl> <nl> @ Override <nl> protected void onPreExecute ( ) { <nl> - logsView . removeAllViews ( ) ; <nl> - progressView . setVisibility ( View . VISIBLE ) ; <nl> - showStatus ( " Starting import " ) ; <nl> + final AsyncTaskFragment fragment = fragmentRef . get ( ) ; <nl> + if ( fragment = = null | | fragment . isDetached ( ) ) { <nl> + cancel ( false ) ; <nl> + return ; <nl> + } <nl> + fragment . logsView . removeAllViews ( ) ; <nl> + fragment . progressView . setVisibility ( View . VISIBLE ) ; <nl> + fragment . showStatus ( " Starting import " ) ; <nl> } <nl> <nl> @ Override <nl> protected void onPostExecute ( Integer sum ) { <nl> - progressView . setVisibility ( View . GONE ) ; <nl> - showStatus ( TEST _ OBJECTS + " objects imported . " ) ; <nl> - showStatus ( " The total score is : " + sum ) ; <nl> + final AsyncTaskFragment fragment = fragmentRef . get ( ) ; <nl> + if ( fragment = = null | | fragment . isDetached ( ) ) { <nl> + return ; <nl> + } <nl> + fragment . progressView . setVisibility ( View . GONE ) ; <nl> + fragment . showStatus ( TEST _ OBJECTS + " objects imported . " ) ; <nl> + fragment . showStatus ( " The total score is : " + sum ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / examples / concurrencyExample / src / main / AndroidManifest . xml b / examples / concurrencyExample / src / main / AndroidManifest . xml <nl> index 7486172 . . 427caed 100644 <nl> - - - a / examples / concurrencyExample / src / main / AndroidManifest . xml <nl> + + + b / examples / concurrencyExample / src / main / AndroidManifest . xml <nl> @ @ - 18 , 12 + 18 , 6 @ @ <nl> < / intent - filter > <nl> < / activity > <nl> <nl> - < activity <nl> - android : name = " . RealmResultsExampleActivity " <nl> - android : configChanges = " keyboardHidden | orientation | screenSize " <nl> - android : label = " @ string / app _ name " > <nl> - < / activity > <nl> - <nl> < service <nl> android : name = " . services . SpawningService " <nl> android : configChanges = " keyboardHidden | orientation | screenSize " <nl> diff - - git a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java b / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java <nl> deleted file mode 100644 <nl> index 52c2e94 . . 0000000 <nl> - - - a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java <nl> + + + / dev / null <nl> @ @ - 1 , 186 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . examples . concurrency ; <nl> - <nl> - import android . app . Activity ; <nl> - import android . content . Intent ; <nl> - import android . os . Bundle ; <nl> - import android . util . Log ; <nl> - import android . view . View ; <nl> - import android . widget . ListView ; <nl> - import android . widget . RadioGroup ; <nl> - import android . widget . TextView ; <nl> - <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmChangeListener ; <nl> - import io . realm . RealmList ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . examples . concurrency . adapters . RealmSimpleExampleAdapter ; <nl> - import io . realm . examples . concurrency . model . Cat ; <nl> - import io . realm . examples . concurrency . model . Dog ; <nl> - import io . realm . examples . concurrency . model . Person ; <nl> - import io . realm . examples . concurrency . services . SpawningService ; <nl> - import io . realm . examples . concurrency . services . TransactionService ; <nl> - <nl> - public class RealmResultsExampleActivity extends Activity implements View . OnClickListener { <nl> - <nl> - @ SuppressWarnings ( " UnusedDeclaration " ) <nl> - public static final String TAG = RealmResultsExampleActivity . class . getName ( ) ; <nl> - <nl> - private Realm realm = null ; <nl> - <nl> - private RealmSimpleExampleAdapter < Person > mAdapter = null ; <nl> - private ListView mListView = null ; <nl> - <nl> - private TextView mTextUpdate ; <nl> - <nl> - @ Override <nl> - protected void onCreate ( Bundle savedInstanceState ) { <nl> - super . onCreate ( savedInstanceState ) ; <nl> - setContentView ( R . layout . activity _ realm _ resultsexample ) ; <nl> - <nl> - findViewById ( R . id . insert _ record _ button ) . setOnClickListener ( this ) ; <nl> - findViewById ( R . id . quit _ button ) . setOnClickListener ( new View . OnClickListener ( ) { <nl> - @ Override <nl> - public void onClick ( View view ) { <nl> - stopTests ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - mListView = ( ListView ) findViewById ( R . id . items _ list ) ; <nl> - mTextUpdate = ( TextView ) findViewById ( R . id . size _ status ) ; <nl> - / / Reset the realm data before starting the tests <nl> - Realm . deleteRealmFile ( this ) ; <nl> - <nl> - / / Acquire a realm object <nl> - realm = Realm . getInstance ( this ) ; <nl> - <nl> - realm . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - updateList ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - mAdapter = new RealmSimpleExampleAdapter < Person > ( this , R . layout . simplelistitem , realm . allObjects ( Person . class ) ) ; <nl> - mListView . setAdapter ( mAdapter ) ; <nl> - } <nl> - <nl> - private void updateList ( ) { <nl> - RealmResults < Person > realmResults = realm . allObjects ( Person . class ) ; <nl> - if ( realmResults ! = null ) { <nl> - mTextUpdate . setText ( realmResults . size ( ) + " " ) ; <nl> - mAdapter . notifyDataSetChanged ( ) ; <nl> - } <nl> - mListView . invalidate ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void onResume ( ) { <nl> - super . onResume ( ) ; <nl> - startTests ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void onStop ( ) { <nl> - super . onStop ( ) ; <nl> - stopTests ( ) ; <nl> - } <nl> - <nl> - private void startTests ( ) { <nl> - startSpawnTests ( ) ; <nl> - / / Alternatively can use transaction tests here . . . <nl> - / / startTransactionTests ( ) ; <nl> - } <nl> - <nl> - private void stopTests ( ) { <nl> - stopSpawnTests ( ) ; <nl> - / / Alternatively can use transaction tests here . . . <nl> - / / stopTransactionTests ( ) ; <nl> - } <nl> - <nl> - / / Using the screen form the user can inject into the Realm <nl> - / / even if other threads are creating transactions . <nl> - @ Override <nl> - public void onClick ( View v ) { <nl> - String personName = ( ( TextView ) findViewById ( R . id . name ) ) . getText ( ) . toString ( ) ; <nl> - String personAge = ( ( TextView ) findViewById ( R . id . age ) ) . getText ( ) . toString ( ) ; <nl> - String petName = ( ( TextView ) findViewById ( R . id . pets _ name ) ) . getText ( ) . toString ( ) ; <nl> - <nl> - Integer parseAge = 0 ; <nl> - try { <nl> - parseAge = Integer . parseInt ( personAge ) ; <nl> - } catch ( NumberFormatException ignored ) { <nl> - 	 Log . d ( TAG , " Age for a person invalid " ) ; <nl> - 	 return ; <nl> - } <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - Person person = realm . createObject ( Person . class ) ; <nl> - person . setName ( personName ) ; <nl> - person . setAge ( parseAge ) ; <nl> - <nl> - int checkedId = ( ( RadioGroup ) findViewById ( R . id . petType ) ) . getCheckedRadioButtonId ( ) ; <nl> - if ( checkedId = = R . id . hasCat ) { <nl> - Cat cat = realm . createObject ( Cat . class ) ; <nl> - cat . setName ( petName ) ; <nl> - RealmList < Cat > cats = person . getCats ( ) ; <nl> - cats . add ( cat ) ; <nl> - } else if ( checkedId = = R . id . hasDog ) { <nl> - Dog dog = realm . createObject ( Dog . class ) ; <nl> - dog . setName ( petName ) ; <nl> - person . setDog ( dog ) ; <nl> - } <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - } <nl> - <nl> - / / The transaction tests are one IntentService running multiple Writes <nl> - / / to a Realm in either a multiple transaction or single transaction loop <nl> - private void startTransactionTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; <nl> - serviceIntent . putExtra ( TransactionService . REALM _ TESTTYPE _ EXTRA , <nl> - TransactionService . TestType . MANY _ TRANSACTIONS ) ; <nl> - serviceIntent . putExtra ( TransactionService . ITERATION _ COUNT , 10000000 ) ; <nl> - this . startService ( serviceIntent ) ; <nl> - } <nl> - <nl> - private void stopTransactionTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; <nl> - this . stopService ( serviceIntent ) ; <nl> - } <nl> - <nl> - / / The Spawned tests create multiple threads of type Reader or Writer <nl> - / / which loop for a specified count <nl> - private void startSpawnTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; <nl> - serviceIntent . putExtra ( SpawningService . REALM _ INSERTCOUNT _ EXTRA , 10000000 ) ; <nl> - serviceIntent . putExtra ( SpawningService . REALM _ READCOUNT _ EXTRA , 10000000 ) ; <nl> - this . startService ( serviceIntent ) ; <nl> - } <nl> - <nl> - private void stopSpawnTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; <nl> - this . stopService ( serviceIntent ) ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( " UnusedDeclaration " ) <nl> - private void restartTests ( ) { <nl> - stopTransactionTests ( ) ; <nl> - startTransactionTests ( ) ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java b / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java 
 index c3b567d . . 79148ea 100644 
 - - - a / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java 
 + + + b / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java 
 @ @ - 28 , 6 + 28 , 8 @ @ import android . widget . ProgressBar ; 
 import android . widget . SeekBar ; 
 import android . widget . TextView ; 
 
 + import java . lang . ref . WeakReference ; 
 + 
 import io . realm . Realm ; 
 import io . realm . examples . threads . model . Score ; 
 
 @ @ - 56 , 7 + 58 , 7 @ @ public class AsyncTaskFragment extends Fragment { 
 asyncTask . cancel ( true ) ; 
 } 
 
 - asyncTask = new ImportAsyncTask ( ) ; 
 + asyncTask = new ImportAsyncTask ( AsyncTaskFragment . this ) ; 
 asyncTask . execute ( ) ; 
 } 
 } ) ; 
 @ @ - 64 , 6 + 66 , 14 @ @ public class AsyncTaskFragment extends Fragment { 
 return rootView ; 
 } 
 
 + @ Override 
 + public void onStop ( ) { 
 + super . onStop ( ) ; 
 + if ( asyncTask ! = null ) { 
 + asyncTask . cancel ( false ) ; 
 + } 
 + } 
 + 
 private void showStatus ( String txt ) { 
 Log . i ( TAG , txt ) ; 
 TextView tv = new TextView ( getActivity ( ) ) ; 
 @ @ - 80 , 7 + 90 , 13 @ @ public class AsyncTaskFragment extends Fragment { 
 / / UI thread . This means that it is not possible to reuse RealmObjects or RealmResults created 
 / / in doInBackground ( ) in the other methods . Nor is it possible to use RealmObjects as Progress 
 / / or Result objects . 
 - private class ImportAsyncTask extends AsyncTask < Void , Integer , Integer > { 
 + private static class ImportAsyncTask extends AsyncTask < Void , Integer , Integer > { 
 + 
 + private final WeakReference < AsyncTaskFragment > fragmentRef ; 
 + 
 + ImportAsyncTask ( AsyncTaskFragment outerFragment ) { 
 + fragmentRef = new WeakReference < AsyncTaskFragment > ( outerFragment ) ; 
 + } 
 
 @ Override 
 protected Integer doInBackground ( Void . . . params ) { 
 @ @ - 106 , 16 + 122 , 25 @ @ public class AsyncTaskFragment extends Fragment { 
 
 @ Override 
 protected void onPreExecute ( ) { 
 - logsView . removeAllViews ( ) ; 
 - progressView . setVisibility ( View . VISIBLE ) ; 
 - showStatus ( " Starting import " ) ; 
 + final AsyncTaskFragment fragment = fragmentRef . get ( ) ; 
 + if ( fragment = = null | | fragment . isDetached ( ) ) { 
 + cancel ( false ) ; 
 + return ; 
 + } 
 + fragment . logsView . removeAllViews ( ) ; 
 + fragment . progressView . setVisibility ( View . VISIBLE ) ; 
 + fragment . showStatus ( " Starting import " ) ; 
 } 
 
 @ Override 
 protected void onPostExecute ( Integer sum ) { 
 - progressView . setVisibility ( View . GONE ) ; 
 - showStatus ( TEST _ OBJECTS + " objects imported . " ) ; 
 - showStatus ( " The total score is : " + sum ) ; 
 + final AsyncTaskFragment fragment = fragmentRef . get ( ) ; 
 + if ( fragment = = null | | fragment . isDetached ( ) ) { 
 + return ; 
 + } 
 + fragment . progressView . setVisibility ( View . GONE ) ; 
 + fragment . showStatus ( TEST _ OBJECTS + " objects imported . " ) ; 
 + fragment . showStatus ( " The total score is : " + sum ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / examples / concurrencyExample / src / main / AndroidManifest . xml b / examples / concurrencyExample / src / main / AndroidManifest . xml 
 index 7486172 . . 427caed 100644 
 - - - a / examples / concurrencyExample / src / main / AndroidManifest . xml 
 + + + b / examples / concurrencyExample / src / main / AndroidManifest . xml 
 @ @ - 18 , 12 + 18 , 6 @ @ 
 < / intent - filter > 
 < / activity > 
 
 - < activity 
 - android : name = " . RealmResultsExampleActivity " 
 - android : configChanges = " keyboardHidden | orientation | screenSize " 
 - android : label = " @ string / app _ name " > 
 - < / activity > 
 - 
 < service 
 android : name = " . services . SpawningService " 
 android : configChanges = " keyboardHidden | orientation | screenSize " 
 diff - - git a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java b / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java 
 deleted file mode 100644 
 index 52c2e94 . . 0000000 
 - - - a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java 
 + + + / dev / null 
 @ @ - 1 , 186 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . examples . concurrency ; 
 - 
 - import android . app . Activity ; 
 - import android . content . Intent ; 
 - import android . os . Bundle ; 
 - import android . util . Log ; 
 - import android . view . View ; 
 - import android . widget . ListView ; 
 - import android . widget . RadioGroup ; 
 - import android . widget . TextView ; 
 - 
 - import io . realm . Realm ; 
 - import io . realm . RealmChangeListener ; 
 - import io . realm . RealmList ; 
 - import io . realm . RealmResults ; 
 - import io . realm . examples . concurrency . adapters . RealmSimpleExampleAdapter ; 
 - import io . realm . examples . concurrency . model . Cat ; 
 - import io . realm . examples . concurrency . model . Dog ; 
 - import io . realm . examples . concurrency . model . Person ; 
 - import io . realm . examples . concurrency . services . SpawningService ; 
 - import io . realm . examples . concurrency . services . TransactionService ; 
 - 
 - public class RealmResultsExampleActivity extends Activity implements View . OnClickListener { 
 - 
 - @ SuppressWarnings ( " UnusedDeclaration " ) 
 - public static final String TAG = RealmResultsExampleActivity . class . getName ( ) ; 
 - 
 - private Realm realm = null ; 
 - 
 - private RealmSimpleExampleAdapter < Person > mAdapter = null ; 
 - private ListView mListView = null ; 
 - 
 - private TextView mTextUpdate ; 
 - 
 - @ Override 
 - protected void onCreate ( Bundle savedInstanceState ) { 
 - super . onCreate ( savedInstanceState ) ; 
 - setContentView ( R . layout . activity _ realm _ resultsexample ) ; 
 - 
 - findViewById ( R . id . insert _ record _ button ) . setOnClickListener ( this ) ; 
 - findViewById ( R . id . quit _ button ) . setOnClickListener ( new View . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( View view ) { 
 - stopTests ( ) ; 
 - } 
 - } ) ; 
 - 
 - mListView = ( ListView ) findViewById ( R . id . items _ list ) ; 
 - mTextUpdate = ( TextView ) findViewById ( R . id . size _ status ) ; 
 - / / Reset the realm data before starting the tests 
 - Realm . deleteRealmFile ( this ) ; 
 - 
 - / / Acquire a realm object 
 - realm = Realm . getInstance ( this ) ; 
 - 
 - realm . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - updateList ( ) ; 
 - } 
 - } ) ; 
 - 
 - mAdapter = new RealmSimpleExampleAdapter < Person > ( this , R . layout . simplelistitem , realm . allObjects ( Person . class ) ) ; 
 - mListView . setAdapter ( mAdapter ) ; 
 - } 
 - 
 - private void updateList ( ) { 
 - RealmResults < Person > realmResults = realm . allObjects ( Person . class ) ; 
 - if ( realmResults ! = null ) { 
 - mTextUpdate . setText ( realmResults . size ( ) + " " ) ; 
 - mAdapter . notifyDataSetChanged ( ) ; 
 - } 
 - mListView . invalidate ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onResume ( ) { 
 - super . onResume ( ) ; 
 - startTests ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onStop ( ) { 
 - super . onStop ( ) ; 
 - stopTests ( ) ; 
 - } 
 - 
 - private void startTests ( ) { 
 - startSpawnTests ( ) ; 
 - / / Alternatively can use transaction tests here . . . 
 - / / startTransactionTests ( ) ; 
 - } 
 - 
 - private void stopTests ( ) { 
 - stopSpawnTests ( ) ; 
 - / / Alternatively can use transaction tests here . . . 
 - / / stopTransactionTests ( ) ; 
 - } 
 - 
 - / / Using the screen form the user can inject into the Realm 
 - / / even if other threads are creating transactions . 
 - @ Override 
 - public void onClick ( View v ) { 
 - String personName = ( ( TextView ) findViewById ( R . id . name ) ) . getText ( ) . toString ( ) ; 
 - String personAge = ( ( TextView ) findViewById ( R . id . age ) ) . getText ( ) . toString ( ) ; 
 - String petName = ( ( TextView ) findViewById ( R . id . pets _ name ) ) . getText ( ) . toString ( ) ; 
 - 
 - Integer parseAge = 0 ; 
 - try { 
 - parseAge = Integer . parseInt ( personAge ) ; 
 - } catch ( NumberFormatException ignored ) { 
 - 	 Log . d ( TAG , " Age for a person invalid " ) ; 
 - 	 return ; 
 - } 
 - 
 - realm . beginTransaction ( ) ; 
 - Person person = realm . createObject ( Person . class ) ; 
 - person . setName ( personName ) ; 
 - person . setAge ( parseAge ) ; 
 - 
 - int checkedId = ( ( RadioGroup ) findViewById ( R . id . petType ) ) . getCheckedRadioButtonId ( ) ; 
 - if ( checkedId = = R . id . hasCat ) { 
 - Cat cat = realm . createObject ( Cat . class ) ; 
 - cat . setName ( petName ) ; 
 - RealmList < Cat > cats = person . getCats ( ) ; 
 - cats . add ( cat ) ; 
 - } else if ( checkedId = = R . id . hasDog ) { 
 - Dog dog = realm . createObject ( Dog . class ) ; 
 - dog . setName ( petName ) ; 
 - person . setDog ( dog ) ; 
 - } 
 - 
 - realm . commitTransaction ( ) ; 
 - } 
 - 
 - / / The transaction tests are one IntentService running multiple Writes 
 - / / to a Realm in either a multiple transaction or single transaction loop 
 - private void startTransactionTests ( ) { 
 - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; 
 - serviceIntent . putExtra ( TransactionService . REALM _ TESTTYPE _ EXTRA , 
 - TransactionService . TestType . MANY _ TRANSACTIONS ) ; 
 - serviceIntent . putExtra ( TransactionService . ITERATION _ COUNT , 10000000 ) ; 
 - this . startService ( serviceIntent ) ; 
 - } 
 - 
 - private void stopTransactionTests ( ) { 
 - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; 
 - this . stopService ( serviceIntent ) ; 
 - } 
 - 
 - / / The Spawned tests create multiple threads of type Reader or Writer 
 - / / which loop for a specified count 
 - private void startSpawnTests ( ) { 
 - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; 
 - serviceIntent . putExtra ( SpawningService . REALM _ INSERTCOUNT _ EXTRA , 10000000 ) ; 
 - serviceIntent . putExtra ( SpawningService . REALM _ READCOUNT _ EXTRA , 10000000 ) ; 
 - this . startService ( serviceIntent ) ; 
 - } 
 - 
 - private void stopSpawnTests ( ) { 
 - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; 
 - this . stopService ( serviceIntent ) ; 
 - } 
 - 
 - @ SuppressWarnings ( " UnusedDeclaration " ) 
 - private void restartTests ( ) { 
 - stopTransactionTests ( ) ; 
 - startTransactionTests ( ) ; 
 - } 
 - }
