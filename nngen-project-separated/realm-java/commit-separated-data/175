BLEU SCORE: 0.07986788803078405

TEST MSG: Support offline client reset
GENERATED MSG: Implement Realm static constructors

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 0a65e65 . . 5cffb2d 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 35 , 7 + 35 , 7 @ @ <nl> # # # Bug Fixes <nl> <nl> * Throw ` IllegalArgumentException ` instead of ` IllegalStateException ` when calling string / binary data setters if the data length exceeds the limit . <nl> - * Exposing a ` RealmConfiguration ` that allows a user to open the backup Realm after the client reset ( # 4759 ) . <nl> + * Exposing a ` RealmConfiguration ` that allows a user to open the backup Realm after the client reset ( # 4759 / # 5223 ) . <nl> <nl> # # # Internal <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> index d262d92 . . 66827fa 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> @ @ - 32 , 7 + 32 , 6 @ @ import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> <nl> - import io . realm . CompactOnLaunchCallback ; <nl> import io . realm . Realm ; <nl> import io . realm . RealmConfiguration ; <nl> <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / assets / stable _ id _ migration . realm b / realm / realm - library / src / androidTestObjectServer / assets / stable _ id _ migration . realm <nl> deleted file mode 100644 <nl> index cda2d88 . . 0000000 <nl> Binary files a / realm / realm - library / src / androidTestObjectServer / assets / stable _ id _ migration . realm and / dev / null differ <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java <nl> index c011fa5 . . 5417255 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java <nl> @ @ - 274 , 6 + 274 , 7 @ @ public class SessionTests { <nl> RealmConfiguration backupRealmConfiguration = handler . getBackupRealmConfiguration ( ) ; <nl> assertNotNull ( backupRealmConfiguration ) ; <nl> assertFalse ( backupRealmConfiguration . isSyncConfiguration ( ) ) ; <nl> + assertTrue ( backupRealmConfiguration . isRecoveryConfiguration ( ) ) ; <nl> <nl> Realm backupRealm = Realm . getInstance ( backupRealmConfiguration ) ; <nl> assertFalse ( backupRealm . isEmpty ( ) ) ; <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java <nl> index c91a7e2 . . 43339ca 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java <nl> @ @ - 16 , 12 + 16 , 10 @ @ <nl> <nl> package io . realm ; <nl> <nl> - import android . content . Context ; <nl> import android . support . test . InstrumentationRegistry ; <nl> import android . support . test . runner . AndroidJUnit4 ; <nl> <nl> import org . junit . After ; <nl> - import org . junit . Before ; <nl> import org . junit . Ignore ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> @ @ - 61 , 13 + 59 , 6 @ @ public class SyncConfigurationTests { <nl> @ Rule <nl> public final ExpectedException thrown = ExpectedException . none ( ) ; <nl> <nl> - private Context context ; <nl> - <nl> - @ Before <nl> - public void setUp ( ) { <nl> - context = InstrumentationRegistry . getContext ( ) ; <nl> - } <nl> - <nl> @ After <nl> public void tearDown ( ) throws Exception { <nl> SyncManager . reset ( ) ; <nl> @ @ - 104 , 7 + 95 , 7 @ @ public class SyncConfigurationTests { <nl> <nl> SyncConfiguration config = new SyncConfiguration . Builder ( user , serverUrl ) . build ( ) ; <nl> <nl> - assertEquals ( new File ( context . getFilesDir ( ) , expectedFolder ) , config . getRealmDirectory ( ) ) ; <nl> + assertEquals ( new File ( InstrumentationRegistry . getContext ( ) . getFilesDir ( ) , expectedFolder ) , config . getRealmDirectory ( ) ) ; <nl> assertEquals ( expectedFileName , config . getRealmFileName ( ) ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncManagerTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncManagerTests . java <nl> index 2d306e4 . . 839c935 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncManagerTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncManagerTests . java <nl> @ @ - 166 , 6 + 166 , 5 @ @ public class SyncManagerTests { <nl> assertEquals ( user , session . getUser ( ) ) ; / / see also SessionTests <nl> <nl> realm . close ( ) ; <nl> - SyncManager . reset ( ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java <nl> index f866cd1 . . 60b25da 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java <nl> @ @ - 19 , 20 + 19 , 21 @ @ package io . realm ; <nl> import android . support . test . InstrumentationRegistry ; <nl> import android . support . test . runner . AndroidJUnit4 ; <nl> <nl> + import org . junit . BeforeClass ; <nl> import org . junit . Ignore ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> + import java . io . File ; <nl> import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> <nl> import io . realm . entities . IndexedFields ; <nl> - import io . realm . entities . PrimaryKeyAsInteger ; <nl> import io . realm . entities . PrimaryKeyAsString ; <nl> import io . realm . entities . StringOnly ; <nl> - import io . realm . exceptions . RealmMigrationNeededException ; <nl> - import io . realm . internal . OsObjectStore ; <nl> + import io . realm . exceptions . IncompatibleSyncedFileException ; <nl> + import io . realm . objectserver . utils . StringOnlyModule ; <nl> import io . realm . rule . TestSyncConfigurationFactory ; <nl> import io . realm . util . SyncTestUtils ; <nl> <nl> @ @ - 51 , 6 + 52 , 14 @ @ public class SyncedRealmMigrationTests { <nl> @ Rule <nl> public final TestSyncConfigurationFactory configFactory = new TestSyncConfigurationFactory ( ) ; <nl> <nl> + @ BeforeClass <nl> + public static void beforeClass ( ) { <nl> + / / another Test class may have the BaseRealm . applicationContext set but <nl> + / / the SyncManager reset . This will make assertion to fail , we need to re - initialise <nl> + / / the sync _ manager . cpp # m _ file _ manager ( configFactory rule do this ) <nl> + BaseRealm . applicationContext = null ; <nl> + } <nl> + <nl> @ Test <nl> public void migrateRealm _ syncConfigurationThrows ( ) { <nl> SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( SyncTestUtils . createTestUser ( ) , " http : / / foo . com / auth " ) . build ( ) ; <nl> @ @ - 296 , 18 + 305 , 54 @ @ public class SyncedRealmMigrationTests { <nl> realm . close ( ) ; <nl> } <nl> <nl> - / / The stable _ id _ migration . realm is created with sync v1 . 8 . 5 with one object created for each object schema . <nl> @ Test <nl> - @ Ignore ( " Not supported by sync right now . " ) <nl> - public void stableIDMigrationCauseClientReset ( ) throws IOException { <nl> + public void offlineClientReset ( ) throws IOException { <nl> SyncConfiguration config = configFactory <nl> . createSyncConfigurationBuilder ( SyncTestUtils . createTestUser ( ) , " http : / / foo . com / auth " ) <nl> - . schema ( StringOnly . class , PrimaryKeyAsString . class , PrimaryKeyAsInteger . class ) <nl> - . name ( " stable _ id _ migration . realm " ) <nl> + . modules ( new StringOnlyModule ( ) ) <nl> . build ( ) ; <nl> - configFactory . copyRealmFromAssets ( InstrumentationRegistry . getContext ( ) , " stable _ id _ migration . realm " , config ) ; <nl> + <nl> + String path = config . getPath ( ) ; <nl> + File realmFile = new File ( path ) ; <nl> + assertFalse ( realmFile . exists ( ) ) ; <nl> + / / copy the 1 . x Realm <nl> + configFactory . copyRealmFromAssets ( InstrumentationRegistry . getContext ( ) , " sync - 1 . x . realm " , config ) ; <nl> + assertTrue ( realmFile . exists ( ) ) ; <nl> + <nl> + / / open the file using the new ROS 2 . x server <nl> + try { <nl> + Realm . getInstance ( config ) ; <nl> + fail ( " should throw IncompatibleSyncedFileException " ) ; <nl> + } catch ( IncompatibleSyncedFileException expected ) { <nl> + String recoveryPath = expected . getRecoveryPath ( ) ; <nl> + assertTrue ( new File ( recoveryPath ) . exists ( ) ) ; <nl> + / / can open the backup Realm <nl> + RealmConfiguration backupRealmConfiguration = expected . getBackupRealmConfiguration ( null , new StringOnlyModule ( ) ) ; <nl> + Realm backupRealm = Realm . getInstance ( backupRealmConfiguration ) ; <nl> + assertFalse ( backupRealm . isEmpty ( ) ) ; <nl> + RealmResults < StringOnly > all = backupRealm . where ( StringOnly . class ) . findAll ( ) ; <nl> + assertEquals ( 1 , all . size ( ) ) ; <nl> + assertEquals ( " Hello from ROS 1 . X " , all . get ( 0 ) . getChars ( ) ) ; <nl> + <nl> + / / make sure it ' s read only <nl> + try { <nl> + backupRealm . beginTransaction ( ) ; <nl> + fail ( " Backup Realm should be read - only , we should throw " ) ; <nl> + } catch ( IllegalStateException ignored ) { <nl> + } <nl> + backupRealm . close ( ) ; <nl> + <nl> + / / we can open in dynamic mode <nl> + DynamicRealm dynamicRealm = DynamicRealm . getInstance ( backupRealmConfiguration ) ; <nl> + dynamicRealm . getSchema ( ) . checkHasTable ( StringOnly . CLASS _ NAME , " Dynamic Realm should contains " + StringOnly . CLASS _ NAME ) ; <nl> + RealmResults < DynamicRealmObject > allDynamic = dynamicRealm . where ( StringOnly . CLASS _ NAME ) . findAll ( ) ; <nl> + assertEquals ( 1 , allDynamic . size ( ) ) ; <nl> + assertEquals ( " Hello from ROS 1 . X " , allDynamic . first ( ) . getString ( StringOnly . FIELD _ CHARS ) ) ; <nl> + dynamicRealm . close ( ) ; <nl> + } <nl> + <nl> Realm realm = Realm . getInstance ( config ) ; <nl> - / / TODO : Should the local realm be cleaned ? It contains one object for each object schema in the realm . <nl> + assertTrue ( realm . isEmpty ( ) ) ; <nl> realm . close ( ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store <nl> index cdd0d8c . . 317dc9b 160000 <nl> - - - a / realm / realm - library / src / main / cpp / object - store <nl> + + + b / realm / realm - library / src / main / cpp / object - store <nl> @ @ - 1 + 1 @ @ <nl> - Subproject commit cdd0d8c82ba6dfb60ebc2c339b26b7b3ca4d4047 <nl> + Subproject commit 317dc9b3d9ef1b5de5ace72e05ac6d58e443bef5 <nl> diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp <nl> index 25c0299 . . 357ef84 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / util . cpp <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> # include < realm / util / assert . hpp > <nl> # include < realm / util / file . hpp > <nl> # include < realm / unicode . hpp > <nl> + # include < jni _ util / java _ method . hpp > <nl> # include " utf8 . hpp " <nl> <nl> # include " util . hpp " <nl> @ @ - 38 , 7 + 39 , 7 @ @ using namespace realm : : util ; <nl> using namespace realm : : jni _ util ; <nl> using namespace realm : : _ impl ; <nl> <nl> - void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : RealmFileException : : Kind kind ) ; <nl> + void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : RealmFileException : : Kind kind , const std : : string & path = " " ) ; <nl> <nl> void ConvertException ( JNIEnv * env , const char * file , int line ) <nl> { <nl> @ @ - 67 , 7 + 68 , 7 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) <nl> } <nl> catch ( RealmFileException & e ) { <nl> ss < < e . what ( ) < < " ( " < < e . underlying ( ) < < " ) ( " < < e . path ( ) < < " ) in " < < file < < " line " < < line ; <nl> - ThrowRealmFileException ( env , ss . str ( ) , e . kind ( ) ) ; <nl> + ThrowRealmFileException ( env , ss . str ( ) , e . kind ( ) , e . path ( ) ) ; <nl> } <nl> catch ( File : : AccessError & e ) { <nl> ss < < e . what ( ) < < " ( " < < e . get _ path ( ) < < " ) in " < < file < < " line " < < line ; <nl> @ @ - 195 , 11 + 196 , 13 @ @ void ThrowException ( JNIEnv * env , ExceptionKind exception , const std : : string & cla <nl> env - > DeleteLocalRef ( jExceptionClass ) ; <nl> } <nl> <nl> - void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : RealmFileException : : Kind kind ) <nl> + void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : RealmFileException : : Kind kind , const std : : string & path ) <nl> { <nl> - jclass cls = env - > FindClass ( " io / realm / exceptions / RealmFileException " ) ; <nl> + static JavaClass jrealm _ file _ exception _ cls ( env , " io / realm / exceptions / RealmFileException " ) ; <nl> + static JavaClass jincompatible _ synced _ file _ cls ( env , " io / realm / exceptions / IncompatibleSyncedFileException " ) ; <nl> + static JavaMethod jicompatible _ synced _ ctor ( env , jincompatible _ synced _ file _ cls , " < init > " , " ( Ljava / lang / String ; Ljava / lang / String ; ) V " ) ; <nl> + static JavaMethod constructor ( env , jrealm _ file _ exception _ cls , " < init > " , " ( BLjava / lang / String ; ) V " ) ; <nl> <nl> - jmethodID constructor = env - > GetMethodID ( cls , " < init > " , " ( BLjava / lang / String ; ) V " ) ; <nl> / / Initial value to suppress gcc warning . <nl> jbyte kind _ code = - 1 ; / / To suppress compile warning . <nl> switch ( kind ) { <nl> @ @ - 225 , 13 + 228 , 16 @ @ void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : Rea <nl> kind _ code = io _ realm _ internal _ SharedRealm _ FILE _ EXCEPTION _ KIND _ FORMAT _ UPGRADE _ REQUIRED ; <nl> break ; <nl> case realm : : RealmFileException : : Kind : : IncompatibleSyncedRealm : <nl> - kind _ code = io _ realm _ internal _ SharedRealm _ FILE _ EXCEPTION _ INCOMPATIBLE _ SYNC _ FILE ; <nl> - break ; <nl> - } <nl> - jstring jstr = env - > NewStringUTF ( message . c _ str ( ) ) ; <nl> - jobject exception = env - > NewObject ( cls , constructor , kind _ code , jstr ) ; <nl> + jobject jexception = env - > NewObject ( jincompatible _ synced _ file _ cls , jicompatible _ synced _ ctor , <nl> + to _ jstring ( env , message ) , to _ jstring ( env , path ) ) ; <nl> + env - > Throw ( reinterpret _ cast < jthrowable > ( jexception ) ) ; <nl> + env - > DeleteLocalRef ( jexception ) ; <nl> + return ; <nl> + } <nl> + jstring jmessage = to _ jstring ( env , message ) ; <nl> + jstring jpath = to _ jstring ( env , path ) ; <nl> + jobject exception = env - > NewObject ( jrealm _ file _ exception _ cls , constructor , kind _ code , jmessage , jpath ) ; <nl> env - > Throw ( reinterpret _ cast < jthrowable > ( exception ) ) ; <nl> - env - > DeleteLocalRef ( cls ) ; <nl> env - > DeleteLocalRef ( exception ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index b6546f4 . . 6678fe9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 101 , 6 + 101 , 11 @ @ public class RealmConfiguration { <nl> private final Realm . Transaction initialDataTransaction ; <nl> private final boolean readOnly ; <nl> private final CompactOnLaunchCallback compactOnLaunch ; <nl> + / * * <nl> + * Whether this RealmConfiguration is intended to open a <nl> + * recovery Realm produced after an offline / online client reset . <nl> + * / <nl> + private final boolean isRecoveryConfiguration ; <nl> <nl> / / We need to enumerate all parameters since SyncConfiguration and RealmConfiguration supports different <nl> / / subsets of them . <nl> @ @ - 117 , 7 + 122 , 8 @ @ public class RealmConfiguration { <nl> @ Nullable RxObservableFactory rxObservableFactory , <nl> @ Nullable Realm . Transaction initialDataTransaction , <nl> boolean readOnly , <nl> - @ Nullable CompactOnLaunchCallback compactOnLaunch ) { <nl> + @ Nullable CompactOnLaunchCallback compactOnLaunch , <nl> + boolean isRecoveryConfiguration ) { <nl> this . realmDirectory = realmDirectory ; <nl> this . realmFileName = realmFileName ; <nl> this . canonicalPath = canonicalPath ; <nl> @ @ - 132 , 6 + 138 , 7 @ @ public class RealmConfiguration { <nl> this . initialDataTransaction = initialDataTransaction ; <nl> this . readOnly = readOnly ; <nl> this . compactOnLaunch = compactOnLaunch ; <nl> + this . isRecoveryConfiguration = isRecoveryConfiguration ; <nl> } <nl> <nl> public File getRealmDirectory ( ) { <nl> @ @ - 266 , 6 + 273 , 14 @ @ public class RealmConfiguration { <nl> return readOnly ; <nl> } <nl> <nl> + / * * <nl> + * @ return { @ code true } if this configuration is intended to open a backup Realm ( as a result of a client reset ) . <nl> + * @ see < a href = " https : / / realm . io / docs / java / latest / api / io / realm / ClientResetRequiredError . html " > ClientResetRequiredError < / a > <nl> + * / <nl> + public boolean isRecoveryConfiguration ( ) { <nl> + return isRecoveryConfiguration ; <nl> + } <nl> + <nl> @ Override <nl> public boolean equals ( Object obj ) { <nl> if ( this = = obj ) { return true ; } <nl> @ @ - 276 , 6 + 291 , 7 @ @ public class RealmConfiguration { <nl> if ( schemaVersion ! = that . schemaVersion ) { return false ; } <nl> if ( deleteRealmIfMigrationNeeded ! = that . deleteRealmIfMigrationNeeded ) { return false ; } <nl> if ( readOnly ! = that . readOnly ) { return false ; } <nl> + if ( isRecoveryConfiguration ! = that . isRecoveryConfiguration ) { return false ; } <nl> if ( realmDirectory ! = null ? ! realmDirectory . equals ( that . realmDirectory ) : that . realmDirectory ! = null ) { <nl> return false ; <nl> } <nl> @ @ - 317 , 6 + 333 , 7 @ @ public class RealmConfiguration { <nl> result = 31 * result + ( initialDataTransaction ! = null ? initialDataTransaction . hashCode ( ) : 0 ) ; <nl> result = 31 * result + ( readOnly ? 1 : 0 ) ; <nl> result = 31 * result + ( compactOnLaunch ! = null ? compactOnLaunch . hashCode ( ) : 0 ) ; <nl> + result = 31 * result + ( isRecoveryConfiguration ? 1 : 0 ) ; <nl> return result ; <nl> } <nl> <nl> @ @ - 802 , 7 + 819 , 8 @ @ public class RealmConfiguration { <nl> rxFactory , <nl> initialDataTransaction , <nl> readOnly , <nl> - compactOnLaunch <nl> + compactOnLaunch , <nl> + false <nl> ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java b / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java <nl> index 24eb5fa . . f83f4f7 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java <nl> @ @ - 187 , 8 + 187 , 10 @ @ public class OsRealmConfig implements NativeObject { <nl> <nl> / / Set schema related params . <nl> SchemaMode schemaMode = SchemaMode . SCHEMA _ MODE _ MANUAL ; <nl> - if ( config . isReadOnly ( ) ) { <nl> + if ( config . isRecoveryConfiguration ( ) ) { <nl> schemaMode = SchemaMode . SCHEMA _ MODE _ IMMUTABLE ; <nl> + } else if ( config . isReadOnly ( ) ) { <nl> + schemaMode = SchemaMode . SCHEMA _ MODE _ READONLY ; <nl> } else if ( syncRealmUrl ! = null ) { <nl> schemaMode = SchemaMode . SCHEMA _ MODE _ ADDITIVE ; <nl> } else if ( config . shouldDeleteRealmIfMigrationNeeded ( ) ) { <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> index 3659767 . . 2b69a76 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> @ @ - 131 , 7 + 131 , 8 @ @ public class SyncConfiguration extends RealmConfiguration { <nl> rxFactory , <nl> initialDataTransaction , <nl> readOnly , <nl> - null <nl> + null , <nl> + false <nl> ) ; <nl> <nl> this . user = user ; <nl> @ @ - 188 , 7 + 189 , 7 @ @ public class SyncConfiguration extends RealmConfiguration { <nl> } <nl> <nl> static RealmConfiguration forRecovery ( String canonicalPath , @ Nullable byte [ ] encryptionKey , RealmProxyMediator schemaMediator ) { <nl> - return new RealmConfiguration ( null , null , canonicalPath , null , encryptionKey , 0 , null , false , OsRealmConfig . Durability . FULL , schemaMediator , null , null , true , null ) ; <nl> + return new RealmConfiguration ( null , null , canonicalPath , null , encryptionKey , 0 , null , false , OsRealmConfig . Durability . FULL , schemaMediator , null , null , true , null , true ) ; <nl> } <nl> <nl> static URI resolveServerUrl ( URI serverUrl , String userIdentifier ) { <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / exceptions / IncompatibleSyncedFileException . java b / realm / realm - library / src / objectServer / java / io / realm / exceptions / IncompatibleSyncedFileException . java <nl> new file mode 100644 <nl> index 0000000 . . 2742b11 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / exceptions / IncompatibleSyncedFileException . java <nl> @ @ - 0 , 0 + 1 , 96 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . exceptions ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . RealmModel ; <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . internal . Keep ; <nl> + <nl> + / * * <nl> + * An exception thrown when attempting to open an incompatible Synchronized Realm file . This usually happens <nl> + * when the Realm file was created with an older version of the SDK and automatic migration to the current version <nl> + * is not possible . When such an exception occurs , the original file is moved to a backup location and a new file is <nl> + * created instead . If you wish to migrate any data from the backup location , you can use { @ link # getBackupRealmConfiguration ( ) } <nl> + * to obtain a { @ link RealmConfiguration } that can then be used to open the backup Realm . After that , retry <nl> + * opening the original Realm file ( which now should be recreated as an empty file ) and copy all data from the backup file to the new one . <nl> + * < pre > <nl> + * { @ code <nl> + * SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , serverUri ) . build ( ) ; <nl> + * try { <nl> + * Realm realm = Realm . getInstance ( syncConfig ) ; <nl> + * } catch ( IncompatibleSyncedFileException exception ) { <nl> + * RealmConfiguration backupConfig = exception . getBackupRealmConfiguration ( ) ; <nl> + * Realm backupRealm = Realm . getInstance ( backupConfig ) ; <nl> + * realm = Realm . GetInstance ( syncConfig ) ; <nl> + * } <nl> + * } <nl> + * < / pre > <nl> + * / <nl> + @ Keep <nl> + public class IncompatibleSyncedFileException extends RealmFileException { <nl> + private final String path ; <nl> + <nl> + public IncompatibleSyncedFileException ( String message , String recoveryPath ) { <nl> + super ( Kind . INCOMPATIBLE _ SYNC _ FILE , message ) ; <nl> + this . path = recoveryPath ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets a { @ link RealmConfiguration } instance that can be used to open the backup Realm file . <nl> + * <nl> + * Note : This will use the default Realm module ( composed of all { @ link RealmModel } ) , and <nl> + * assume no encryption should be used as well . <nl> + * <nl> + * @ return A configuration object for the backup Realm . <nl> + * / <nl> + public RealmConfiguration getBackupRealmConfiguration ( ) { <nl> + return SyncConfiguration . forRecovery ( path , null ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets a { @ link RealmConfiguration } instance that can be used to open the backup Realm file . <nl> + * <nl> + * Note : This will use the default Realm module ( composed of all { @ link RealmModel } ) . <nl> + * <nl> + * @ param encryptionKey Optional encryption key that was used to encrypt the original Realm file . <nl> + * @ return A configuration object for the backup Realm . <nl> + * / <nl> + public RealmConfiguration getBackupRealmConfiguration ( @ Nullable byte [ ] encryptionKey ) { <nl> + return SyncConfiguration . forRecovery ( path , encryptionKey ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets a { @ link RealmConfiguration } instance that can be used to open the backup Realm file . <nl> + * <nl> + * @ param encryptionKey Optional encryption key that was used to encrypt the original Realm file . <nl> + * @ param modules restricts Realm schema to the provided module . <nl> + * @ return A configuration object for the backup Realm . <nl> + * / <nl> + public RealmConfiguration getBackupRealmConfiguration ( @ Nullable byte [ ] encryptionKey , Object . . . modules ) { <nl> + return SyncConfiguration . forRecovery ( path , encryptionKey , modules ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return Absolute path to the backup Realm file . <nl> + * / <nl> + public String getRecoveryPath ( ) { <nl> + return path ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / assets / sync - 1 . x . realm b / realm / realm - library / src / syncIntegrationTest / assets / sync - 1 . x . realm <nl> new file mode 100644 <nl> index 0000000 . . 3f7404b <nl> Binary files / dev / null and b / realm / realm - library / src / syncIntegrationTest / assets / sync - 1 . x . realm differ
NEAREST DIFF (one line): diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java <nl> index f24f3e3 . . 8024608 100755 <nl> - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java <nl> + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java <nl> @ @ - 8 , 9 + 8 , 11 @ @ import android . util . Log ; <nl> import com . google . gson . Gson ; <nl> import com . google . gson . reflect . TypeToken ; <nl> <nl> + import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> + import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> import io . realm . Realm ; <nl> @ @ - 53 , 13 + 55 , 25 @ @ public class CityLoader extends AsyncTaskLoader < List < City > > { <nl> <nl> dataIsReady = true ; <nl> <nl> + / / Delete realm files <nl> + File writablePath = context . getFilesDir ( ) ; <nl> + for ( File file : Arrays . asList ( <nl> + new File ( writablePath , Realm . DEFAULT _ REALM _ NAME ) , <nl> + new File ( writablePath , Realm . DEFAULT _ REALM _ NAME + " . lock " ) ) ) { <nl> + if ( file . exists ( ) ) { <nl> + boolean deleteResult = file . delete ( ) ; <nl> + if ( ! deleteResult ) { <nl> + throw new AssertionError ( " Could not delete file : " + file . getAbsolutePath ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> / / Store the retrieved items to the Realm <nl> - Realm realm = new Realm ( context ) ; <nl> - realm . clear ( ) ; / / Delete the Realm ( in the event of a Reset ) <nl> + Realm realm = Realm . create ( context ) ; <nl> <nl> realm . beginWrite ( ) ; <nl> for ( City city : items ) { <nl> - City realmCity = realm . create ( City . class ) ; <nl> + City realmCity = realm . createObject ( City . class ) ; <nl> realmCity . setName ( city . getName ( ) ) ; <nl> realmCity . setVotes ( city . getVotes ( ) ) ; <nl> } <nl> diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> index 71ae952 . . 7e8feb3 100644 <nl> - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load <nl> } <nl> <nl> public void updateCities ( ) { <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> RealmResults < City > cities = realm . where ( City . class ) . findAll ( ) ; <nl> mAdapter . setData ( cities ) ; <nl> <nl> @ @ - 104 , 7 + 104 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load <nl> City modifiedCity = ( City ) mAdapter . getItem ( position ) ; <nl> <nl> / / Update the realm object affected by the user <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> RealmQuery < City > query = realm . where ( City . class ) . beginsWith ( " name " , modifiedCity . getName ( ) ) ; <nl> City city = query . findFirst ( ) ; <nl> realm . beginWrite ( ) ; <nl> diff - - git a / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java b / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java <nl> index cc41ef1 . . a97cb09 100644 <nl> - - - a / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java <nl> + + + b / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java <nl> @ @ - 66 , 11 + 66 , 11 @ @ public class RealmIntroExampleActivity extends Activity { <nl> showStatus ( " Performing basic Read / Write operation . . . " ) ; <nl> <nl> / / Open a default realm <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> <nl> / / Add a person in a write transaction <nl> realm . beginWrite ( ) ; <nl> - Person person = realm . create ( Person . class ) ; <nl> + Person person = realm . createObject ( Person . class ) ; <nl> person . setName ( " Happy Person " ) ; <nl> person . setAge ( 14 ) ; <nl> realm . commit ( ) ; <nl> @ @ - 83 , 7 + 83 , 7 @ @ public class RealmIntroExampleActivity extends Activity { <nl> private void basicQuery ( ) throws java . io . IOException { <nl> showStatus ( " \ nPerforming basic Query operation . . . " ) ; <nl> <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; <nl> RealmResults < Person > results = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; <nl> showStatus ( " Size of result set : " + results . size ( ) ) ; <nl> @ @ - 93 , 7 + 93 , 7 @ @ public class RealmIntroExampleActivity extends Activity { <nl> showStatus ( " \ nPerforming basic Update operation . . . " ) ; <nl> <nl> / / Open a default realm <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> <nl> / / Get the first object <nl> Person person = realm . where ( Person . class ) . findFirst ( ) ; <nl> @ @ - 118 , 19 + 118 , 19 @ @ public class RealmIntroExampleActivity extends Activity { <nl> String status = " \ nPerforming complex Read / Write operation . . . " ; <nl> <nl> / / Open a default realm <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> <nl> / / Add ten persons in one write transaction <nl> realm . beginWrite ( ) ; <nl> - Dog fido = realm . create ( Dog . class ) ; <nl> + Dog fido = realm . createObject ( Dog . class ) ; <nl> fido . setName ( " fido " ) ; <nl> for ( int i = 0 ; i < 10 ; i + + ) { <nl> - Person person = realm . create ( Person . class ) ; <nl> + Person person = realm . createObject ( Person . class ) ; <nl> person . setName ( " Person no . " + i ) ; <nl> person . setAge ( i ) ; <nl> person . setDog ( fido ) ; <nl> for ( int j = 0 ; j < i ; j + + ) { <nl> - Cat cat = realm . create ( Cat . class ) ; <nl> + Cat cat = realm . createObject ( Cat . class ) ; <nl> cat . setName ( " Cat _ " + j ) ; <nl> person . getCats ( ) . add ( cat ) ; <nl> } <nl> @ @ - 157 , 7 + 157 , 7 @ @ public class RealmIntroExampleActivity extends Activity { <nl> private String complexQuery ( ) throws IOException { <nl> String status = " \ n \ nPerforming complex Query operation . . . " ; <nl> <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; <nl> <nl> / / Find all persons where age between 7 and 9 and name begins with " Person " . <nl> diff - - git a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> index 851cdda . . e4e91e8 100644 <nl> - - - a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> + + + b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> @ @ - 83 , 15 + 83 , 14 @ @ public class PerformanceTask extends AsyncTask < Integer , String , String > { <nl> System . out . println ( " # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Testing new interface " ) ; <nl> <nl> Realm . setDefaultDurability ( SharedGroup . Durability . FULL ) ; <nl> - Realm realm = new Realm ( activity ) ; <nl> - realm . clear ( ) ; <nl> + Realm realm = Realm . create ( activity ) ; <nl> <nl> timer = System . currentTimeMillis ( ) ; <nl> try { <nl> / / Debug . startMethodTracing ( " writes " ) ; <nl> realm . beginWrite ( ) ; <nl> for ( int i = 0 ; i < listSize ; i + + ) { <nl> - User user = realm . create ( User . class ) ; <nl> + User user = realm . createObject ( User . class ) ; <nl> <nl> user . setId ( i ) ; <nl> user . setName ( " John Doe " ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> new file mode 100644 <nl> index 0000000 . . 74cc428 <nl> - - - / dev / null <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package io . realm ; <nl> + <nl> + import android . test . AndroidTestCase ; <nl> + <nl> + public class RealmTest extends AndroidTestCase { <nl> + <nl> + public void testRealmThreadCachingSpeed ( ) { <nl> + long tic1 = System . currentTimeMillis ( ) ; <nl> + Realm realm1 = Realm . create ( this . getContext ( ) ) ; <nl> + long toc1 = System . currentTimeMillis ( ) ; <nl> + long t1 = toc1 - tic1 ; <nl> + <nl> + long tic2 = System . currentTimeMillis ( ) ; <nl> + Realm realm2 = Realm . create ( this . getContext ( ) ) ; <nl> + long toc2 = System . currentTimeMillis ( ) ; <nl> + long t2 = toc2 - tic2 ; <nl> + <nl> + / / At least 5 times faster ? <nl> + assertTrue ( t2 < ( t1 / 5 ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 0e10436 . . 782ddca 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ package io . realm ; <nl> import android . content . Context ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> + import java . lang . ref . SoftReference ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 40 , 13 + 40 , 15 @ @ import io . realm . internal . Table ; <nl> public class Realm { <nl> <nl> private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; <nl> + public static final String DEFAULT _ REALM _ NAME = " default . realm " ; <nl> + private static final Map < String , ThreadRealm > realms = new HashMap < String , ThreadRealm > ( ) ; <nl> <nl> - private SharedGroup sg ; <nl> + private SharedGroup sharedGroup ; <nl> private ImplicitTransaction transaction ; <nl> private String filePath ; <nl> private int version ; <nl> - private File bytecodeCache ; <nl> - private ScheduledExecutorService ses = Executors . newSingleThreadScheduledExecutor ( ) ; <nl> + private ScheduledExecutorService scheduledExecutorService <nl> + = Executors . newSingleThreadScheduledExecutor ( ) ; <nl> <nl> private Map < Class < ? > , String > generatedClassNames = new HashMap < Class < ? > , String > ( ) ; <nl> private Map < Class < ? > , String > simpleClassNames = new HashMap < Class < ? > , String > ( ) ; <nl> @ @ - 59 , 31 + 61 , 17 @ @ public class Realm { <nl> private List < RealmChangeListener > changeListeners = new ArrayList < RealmChangeListener > ( ) ; <nl> boolean runEventHandler = false ; <nl> <nl> - public Realm ( Context context ) { <nl> - File filesDir = context . getFilesDir ( ) ; <nl> - this . filePath = new File ( filesDir , " default . realm " ) . getAbsolutePath ( ) ; <nl> - init ( ) ; <nl> - } <nl> - <nl> - public Realm ( Context context , String filePath ) { <nl> - File filesDir = context . getFilesDir ( ) ; <nl> - this . filePath = new File ( filesDir , filePath ) . getAbsolutePath ( ) ; <nl> - init ( ) ; <nl> - } <nl> - <nl> - public Realm ( File writeablePath ) throws IOException { <nl> - this ( writeablePath , " default . realm " ) ; <nl> - } <nl> - <nl> - public Realm ( File writeablePath , String filePath ) { <nl> - this . filePath = new File ( writeablePath , filePath ) . getAbsolutePath ( ) ; <nl> - init ( ) ; <nl> + / / The constructor in private to enforce the use of the static one <nl> + private Realm ( String absolutePath ) { <nl> + this . filePath = absolutePath ; <nl> + this . sharedGroup = new SharedGroup ( filePath , defaultDurability ) ; <nl> + this . transaction = sharedGroup . beginImplicitTransaction ( ) ; <nl> } <nl> <nl> private void startEventHandler ( ) { <nl> runEventHandler = true ; <nl> RealmEventHandler realmEventHandler = new RealmEventHandler ( this ) ; <nl> - ses . scheduleWithFixedDelay ( realmEventHandler , 0 , 100 , TimeUnit . MILLISECONDS ) ; <nl> + scheduledExecutorService . scheduleWithFixedDelay ( realmEventHandler , 0 , 100 , TimeUnit . MILLISECONDS ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 92 , 11 + 80 , 6 @ @ public class Realm { <nl> super . finalize ( ) ; <nl> } <nl> <nl> - private void init ( ) { <nl> - this . sg = new SharedGroup ( filePath , defaultDurability ) ; <nl> - this . transaction = sg . beginImplicitTransaction ( ) ; <nl> - } <nl> - <nl> public static void setDefaultDurability ( SharedGroup . Durability durability ) { <nl> defaultDurability = durability ; <nl> } <nl> @ @ - 112 , 13 + 95 , 63 @ @ public class Realm { <nl> return transaction . getTable ( simpleClassName ) ; <nl> } <nl> <nl> + public static Realm create ( Context context ) { <nl> + return Realm . create ( context , DEFAULT _ REALM _ NAME ) ; <nl> + } <nl> + <nl> + public static Realm create ( Context context , String fileName ) { <nl> + return Realm . create ( context . getFilesDir ( ) , fileName ) ; <nl> + } <nl> + <nl> + public static Realm create ( File writeableFolder ) { <nl> + return Realm . create ( writeableFolder , DEFAULT _ REALM _ NAME ) ; <nl> + } <nl> + <nl> + public static Realm create ( File writableFolder , String filename ) { <nl> + String absolutePath = new File ( writableFolder , filename ) . getAbsolutePath ( ) ; <nl> + return create ( absolutePath ) ; <nl> + } <nl> + <nl> + private static Realm create ( String absolutePath ) { <nl> + ThreadRealm threadRealm = realms . get ( absolutePath ) ; <nl> + if ( threadRealm = = null ) { <nl> + threadRealm = new ThreadRealm ( absolutePath ) ; <nl> + realms . put ( absolutePath , threadRealm ) ; <nl> + } <nl> + SoftReference < Realm > realmSoftReference = threadRealm . get ( ) ; <nl> + Realm realm = realmSoftReference . get ( ) ; <nl> + if ( realm = = null ) { <nl> + / / The garbage collector decided to get rid of the realm instance <nl> + threadRealm = new ThreadRealm ( absolutePath ) ; <nl> + realms . put ( absolutePath , threadRealm ) ; <nl> + realmSoftReference = threadRealm . get ( ) ; <nl> + realm = realmSoftReference . get ( ) ; <nl> + } <nl> + return realm ; <nl> + } <nl> + <nl> + / / This class stores soft - references to realm objects per thread per realm file <nl> + private static class ThreadRealm extends ThreadLocal < SoftReference < Realm > > { <nl> + private String absolutePath ; <nl> + <nl> + private ThreadRealm ( String absolutePath ) { <nl> + this . absolutePath = absolutePath ; <nl> + } <nl> + <nl> + @ Override <nl> + protected SoftReference < Realm > initialValue ( ) { <nl> + Realm realm = new Realm ( absolutePath ) ; <nl> + return new SoftReference < Realm > ( realm ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Instantiates and adds a new object to the realm <nl> * <nl> * @ return The new object <nl> * @ param < E > <nl> * / <nl> - public < E extends RealmObject > E create ( Class < E > clazz ) { <nl> + public < E extends RealmObject > E createObject ( Class < E > clazz ) { <nl> Table table ; <nl> table = tables . get ( clazz ) ; <nl> if ( table = = null ) { <nl> @ @ - 464 , 7 + 497 , 7 @ @ public class Realm { <nl> } <nl> <nl> boolean hasChanged ( ) { <nl> - return sg . hasChanged ( ) ; <nl> + return sharedGroup . hasChanged ( ) ; <nl> } <nl> <nl> / / Transactions <nl> @ @ - 479 , 7 + 512 , 7 @ @ public class Realm { <nl> public void beginWrite ( ) { <nl> <nl> / / If we are moving the transaction forward , send local notifications <nl> - if ( sg . hasChanged ( ) ) { <nl> + if ( sharedGroup . hasChanged ( ) ) { <nl> sendNotifications ( ) ; <nl> } <nl> <nl> @ @ - 501 , 14 + 534 , 6 @ @ public class Realm { <nl> getTable ( classSpec ) . clear ( ) ; <nl> } <nl> <nl> - public void clear ( ) { <nl> - transaction . endRead ( ) ; <nl> - sg . close ( ) ; <nl> - new File ( filePath ) . delete ( ) ; <nl> - new File ( filePath + " . lock " ) . delete ( ) ; <nl> - init ( ) ; <nl> - } <nl> - <nl> public int getVersion ( ) { <nl> return version ; <nl> } <nl> @ @ - 517 , 8 + 542 , 7 @ @ public class Realm { <nl> this . version = version ; <nl> } <nl> <nl> - private File getBytecodeCache ( ) { <nl> - return bytecodeCache ; <nl> + public String getFilePath ( ) { <nl> + return filePath ; <nl> } <nl> - <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmEventHandler . java b / realm / src / main / java / io / realm / RealmEventHandler . java <nl> index d6be5fd . . 08b2df0 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmEventHandler . java <nl> + + + b / realm / src / main / java / io / realm / RealmEventHandler . java <nl> @ @ - 20 , 22 + 20 , 16 @ @ import java . lang . ref . WeakReference ; <nl> <nl> public class RealmEventHandler implements Runnable { <nl> <nl> - private static int count = 0 ; <nl> - private int myCount ; <nl> private WeakReference < Realm > realmRef ; <nl> <nl> public RealmEventHandler ( Realm realm ) { <nl> realmRef = new WeakReference < Realm > ( realm ) ; <nl> - myCount = count + + ; <nl> } <nl> <nl> @ Override <nl> public void run ( ) { <nl> - <nl> Realm realm = realmRef . get ( ) ; <nl> - <nl> if ( realm ! = null & & realm . runEventHandler ) { <nl> - <nl> if ( realm . hasChanged ( ) ) { <nl> realm . sendNotifications ( ) ; <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java <nl> index 25785a2 . . 179691e 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / src / main / java / io / realm / RealmObject . java <nl> @ @ - 23 , 7 + 23 , 7 @ @ import io . realm . annotations . RealmClass ; <nl> public abstract class RealmObject { <nl> <nl> protected Row row ; <nl> - protected Realm realm = null ; <nl> + protected Realm realm ; <nl> <nl> protected Realm getRealm ( ) { <nl> return realm ; <nl> @ @ - 41 , 6 + 41 , 7 @ @ public abstract class RealmObject { <nl> this . row = row ; <nl> } <nl> <nl> + <nl> / / Creating objects <nl> <nl> / / / * *

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 0a65e65 . . 5cffb2d 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 35 , 7 + 35 , 7 @ @ 
 # # # Bug Fixes 
 
 * Throw ` IllegalArgumentException ` instead of ` IllegalStateException ` when calling string / binary data setters if the data length exceeds the limit . 
 - * Exposing a ` RealmConfiguration ` that allows a user to open the backup Realm after the client reset ( # 4759 ) . 
 + * Exposing a ` RealmConfiguration ` that allows a user to open the backup Realm after the client reset ( # 4759 / # 5223 ) . 
 
 # # # Internal 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 index d262d92 . . 66827fa 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 @ @ - 32 , 7 + 32 , 6 @ @ import java . util . Map ; 
 import java . util . Set ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 
 - import io . realm . CompactOnLaunchCallback ; 
 import io . realm . Realm ; 
 import io . realm . RealmConfiguration ; 
 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / assets / stable _ id _ migration . realm b / realm / realm - library / src / androidTestObjectServer / assets / stable _ id _ migration . realm 
 deleted file mode 100644 
 index cda2d88 . . 0000000 
 Binary files a / realm / realm - library / src / androidTestObjectServer / assets / stable _ id _ migration . realm and / dev / null differ 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java 
 index c011fa5 . . 5417255 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java 
 @ @ - 274 , 6 + 274 , 7 @ @ public class SessionTests { 
 RealmConfiguration backupRealmConfiguration = handler . getBackupRealmConfiguration ( ) ; 
 assertNotNull ( backupRealmConfiguration ) ; 
 assertFalse ( backupRealmConfiguration . isSyncConfiguration ( ) ) ; 
 + assertTrue ( backupRealmConfiguration . isRecoveryConfiguration ( ) ) ; 
 
 Realm backupRealm = Realm . getInstance ( backupRealmConfiguration ) ; 
 assertFalse ( backupRealm . isEmpty ( ) ) ; 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java 
 index c91a7e2 . . 43339ca 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java 
 @ @ - 16 , 12 + 16 , 10 @ @ 
 
 package io . realm ; 
 
 - import android . content . Context ; 
 import android . support . test . InstrumentationRegistry ; 
 import android . support . test . runner . AndroidJUnit4 ; 
 
 import org . junit . After ; 
 - import org . junit . Before ; 
 import org . junit . Ignore ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 @ @ - 61 , 13 + 59 , 6 @ @ public class SyncConfigurationTests { 
 @ Rule 
 public final ExpectedException thrown = ExpectedException . none ( ) ; 
 
 - private Context context ; 
 - 
 - @ Before 
 - public void setUp ( ) { 
 - context = InstrumentationRegistry . getContext ( ) ; 
 - } 
 - 
 @ After 
 public void tearDown ( ) throws Exception { 
 SyncManager . reset ( ) ; 
 @ @ - 104 , 7 + 95 , 7 @ @ public class SyncConfigurationTests { 
 
 SyncConfiguration config = new SyncConfiguration . Builder ( user , serverUrl ) . build ( ) ; 
 
 - assertEquals ( new File ( context . getFilesDir ( ) , expectedFolder ) , config . getRealmDirectory ( ) ) ; 
 + assertEquals ( new File ( InstrumentationRegistry . getContext ( ) . getFilesDir ( ) , expectedFolder ) , config . getRealmDirectory ( ) ) ; 
 assertEquals ( expectedFileName , config . getRealmFileName ( ) ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncManagerTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncManagerTests . java 
 index 2d306e4 . . 839c935 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncManagerTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncManagerTests . java 
 @ @ - 166 , 6 + 166 , 5 @ @ public class SyncManagerTests { 
 assertEquals ( user , session . getUser ( ) ) ; / / see also SessionTests 
 
 realm . close ( ) ; 
 - SyncManager . reset ( ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java 
 index f866cd1 . . 60b25da 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java 
 @ @ - 19 , 20 + 19 , 21 @ @ package io . realm ; 
 import android . support . test . InstrumentationRegistry ; 
 import android . support . test . runner . AndroidJUnit4 ; 
 
 + import org . junit . BeforeClass ; 
 import org . junit . Ignore ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 + import java . io . File ; 
 import java . io . FileNotFoundException ; 
 import java . io . IOException ; 
 
 import io . realm . entities . IndexedFields ; 
 - import io . realm . entities . PrimaryKeyAsInteger ; 
 import io . realm . entities . PrimaryKeyAsString ; 
 import io . realm . entities . StringOnly ; 
 - import io . realm . exceptions . RealmMigrationNeededException ; 
 - import io . realm . internal . OsObjectStore ; 
 + import io . realm . exceptions . IncompatibleSyncedFileException ; 
 + import io . realm . objectserver . utils . StringOnlyModule ; 
 import io . realm . rule . TestSyncConfigurationFactory ; 
 import io . realm . util . SyncTestUtils ; 
 
 @ @ - 51 , 6 + 52 , 14 @ @ public class SyncedRealmMigrationTests { 
 @ Rule 
 public final TestSyncConfigurationFactory configFactory = new TestSyncConfigurationFactory ( ) ; 
 
 + @ BeforeClass 
 + public static void beforeClass ( ) { 
 + / / another Test class may have the BaseRealm . applicationContext set but 
 + / / the SyncManager reset . This will make assertion to fail , we need to re - initialise 
 + / / the sync _ manager . cpp # m _ file _ manager ( configFactory rule do this ) 
 + BaseRealm . applicationContext = null ; 
 + } 
 + 
 @ Test 
 public void migrateRealm _ syncConfigurationThrows ( ) { 
 SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( SyncTestUtils . createTestUser ( ) , " http : / / foo . com / auth " ) . build ( ) ; 
 @ @ - 296 , 18 + 305 , 54 @ @ public class SyncedRealmMigrationTests { 
 realm . close ( ) ; 
 } 
 
 - / / The stable _ id _ migration . realm is created with sync v1 . 8 . 5 with one object created for each object schema . 
 @ Test 
 - @ Ignore ( " Not supported by sync right now . " ) 
 - public void stableIDMigrationCauseClientReset ( ) throws IOException { 
 + public void offlineClientReset ( ) throws IOException { 
 SyncConfiguration config = configFactory 
 . createSyncConfigurationBuilder ( SyncTestUtils . createTestUser ( ) , " http : / / foo . com / auth " ) 
 - . schema ( StringOnly . class , PrimaryKeyAsString . class , PrimaryKeyAsInteger . class ) 
 - . name ( " stable _ id _ migration . realm " ) 
 + . modules ( new StringOnlyModule ( ) ) 
 . build ( ) ; 
 - configFactory . copyRealmFromAssets ( InstrumentationRegistry . getContext ( ) , " stable _ id _ migration . realm " , config ) ; 
 + 
 + String path = config . getPath ( ) ; 
 + File realmFile = new File ( path ) ; 
 + assertFalse ( realmFile . exists ( ) ) ; 
 + / / copy the 1 . x Realm 
 + configFactory . copyRealmFromAssets ( InstrumentationRegistry . getContext ( ) , " sync - 1 . x . realm " , config ) ; 
 + assertTrue ( realmFile . exists ( ) ) ; 
 + 
 + / / open the file using the new ROS 2 . x server 
 + try { 
 + Realm . getInstance ( config ) ; 
 + fail ( " should throw IncompatibleSyncedFileException " ) ; 
 + } catch ( IncompatibleSyncedFileException expected ) { 
 + String recoveryPath = expected . getRecoveryPath ( ) ; 
 + assertTrue ( new File ( recoveryPath ) . exists ( ) ) ; 
 + / / can open the backup Realm 
 + RealmConfiguration backupRealmConfiguration = expected . getBackupRealmConfiguration ( null , new StringOnlyModule ( ) ) ; 
 + Realm backupRealm = Realm . getInstance ( backupRealmConfiguration ) ; 
 + assertFalse ( backupRealm . isEmpty ( ) ) ; 
 + RealmResults < StringOnly > all = backupRealm . where ( StringOnly . class ) . findAll ( ) ; 
 + assertEquals ( 1 , all . size ( ) ) ; 
 + assertEquals ( " Hello from ROS 1 . X " , all . get ( 0 ) . getChars ( ) ) ; 
 + 
 + / / make sure it ' s read only 
 + try { 
 + backupRealm . beginTransaction ( ) ; 
 + fail ( " Backup Realm should be read - only , we should throw " ) ; 
 + } catch ( IllegalStateException ignored ) { 
 + } 
 + backupRealm . close ( ) ; 
 + 
 + / / we can open in dynamic mode 
 + DynamicRealm dynamicRealm = DynamicRealm . getInstance ( backupRealmConfiguration ) ; 
 + dynamicRealm . getSchema ( ) . checkHasTable ( StringOnly . CLASS _ NAME , " Dynamic Realm should contains " + StringOnly . CLASS _ NAME ) ; 
 + RealmResults < DynamicRealmObject > allDynamic = dynamicRealm . where ( StringOnly . CLASS _ NAME ) . findAll ( ) ; 
 + assertEquals ( 1 , allDynamic . size ( ) ) ; 
 + assertEquals ( " Hello from ROS 1 . X " , allDynamic . first ( ) . getString ( StringOnly . FIELD _ CHARS ) ) ; 
 + dynamicRealm . close ( ) ; 
 + } 
 + 
 Realm realm = Realm . getInstance ( config ) ; 
 - / / TODO : Should the local realm be cleaned ? It contains one object for each object schema in the realm . 
 + assertTrue ( realm . isEmpty ( ) ) ; 
 realm . close ( ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store 
 index cdd0d8c . . 317dc9b 160000 
 - - - a / realm / realm - library / src / main / cpp / object - store 
 + + + b / realm / realm - library / src / main / cpp / object - store 
 @ @ - 1 + 1 @ @ 
 - Subproject commit cdd0d8c82ba6dfb60ebc2c339b26b7b3ca4d4047 
 + Subproject commit 317dc9b3d9ef1b5de5ace72e05ac6d58e443bef5 
 diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp 
 index 25c0299 . . 357ef84 100644 
 - - - a / realm / realm - library / src / main / cpp / util . cpp 
 + + + b / realm / realm - library / src / main / cpp / util . cpp 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 # include < realm / util / assert . hpp > 
 # include < realm / util / file . hpp > 
 # include < realm / unicode . hpp > 
 + # include < jni _ util / java _ method . hpp > 
 # include " utf8 . hpp " 
 
 # include " util . hpp " 
 @ @ - 38 , 7 + 39 , 7 @ @ using namespace realm : : util ; 
 using namespace realm : : jni _ util ; 
 using namespace realm : : _ impl ; 
 
 - void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : RealmFileException : : Kind kind ) ; 
 + void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : RealmFileException : : Kind kind , const std : : string & path = " " ) ; 
 
 void ConvertException ( JNIEnv * env , const char * file , int line ) 
 { 
 @ @ - 67 , 7 + 68 , 7 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) 
 } 
 catch ( RealmFileException & e ) { 
 ss < < e . what ( ) < < " ( " < < e . underlying ( ) < < " ) ( " < < e . path ( ) < < " ) in " < < file < < " line " < < line ; 
 - ThrowRealmFileException ( env , ss . str ( ) , e . kind ( ) ) ; 
 + ThrowRealmFileException ( env , ss . str ( ) , e . kind ( ) , e . path ( ) ) ; 
 } 
 catch ( File : : AccessError & e ) { 
 ss < < e . what ( ) < < " ( " < < e . get _ path ( ) < < " ) in " < < file < < " line " < < line ; 
 @ @ - 195 , 11 + 196 , 13 @ @ void ThrowException ( JNIEnv * env , ExceptionKind exception , const std : : string & cla 
 env - > DeleteLocalRef ( jExceptionClass ) ; 
 } 
 
 - void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : RealmFileException : : Kind kind ) 
 + void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : RealmFileException : : Kind kind , const std : : string & path ) 
 { 
 - jclass cls = env - > FindClass ( " io / realm / exceptions / RealmFileException " ) ; 
 + static JavaClass jrealm _ file _ exception _ cls ( env , " io / realm / exceptions / RealmFileException " ) ; 
 + static JavaClass jincompatible _ synced _ file _ cls ( env , " io / realm / exceptions / IncompatibleSyncedFileException " ) ; 
 + static JavaMethod jicompatible _ synced _ ctor ( env , jincompatible _ synced _ file _ cls , " < init > " , " ( Ljava / lang / String ; Ljava / lang / String ; ) V " ) ; 
 + static JavaMethod constructor ( env , jrealm _ file _ exception _ cls , " < init > " , " ( BLjava / lang / String ; ) V " ) ; 
 
 - jmethodID constructor = env - > GetMethodID ( cls , " < init > " , " ( BLjava / lang / String ; ) V " ) ; 
 / / Initial value to suppress gcc warning . 
 jbyte kind _ code = - 1 ; / / To suppress compile warning . 
 switch ( kind ) { 
 @ @ - 225 , 13 + 228 , 16 @ @ void ThrowRealmFileException ( JNIEnv * env , const std : : string & message , realm : : Rea 
 kind _ code = io _ realm _ internal _ SharedRealm _ FILE _ EXCEPTION _ KIND _ FORMAT _ UPGRADE _ REQUIRED ; 
 break ; 
 case realm : : RealmFileException : : Kind : : IncompatibleSyncedRealm : 
 - kind _ code = io _ realm _ internal _ SharedRealm _ FILE _ EXCEPTION _ INCOMPATIBLE _ SYNC _ FILE ; 
 - break ; 
 - } 
 - jstring jstr = env - > NewStringUTF ( message . c _ str ( ) ) ; 
 - jobject exception = env - > NewObject ( cls , constructor , kind _ code , jstr ) ; 
 + jobject jexception = env - > NewObject ( jincompatible _ synced _ file _ cls , jicompatible _ synced _ ctor , 
 + to _ jstring ( env , message ) , to _ jstring ( env , path ) ) ; 
 + env - > Throw ( reinterpret _ cast < jthrowable > ( jexception ) ) ; 
 + env - > DeleteLocalRef ( jexception ) ; 
 + return ; 
 + } 
 + jstring jmessage = to _ jstring ( env , message ) ; 
 + jstring jpath = to _ jstring ( env , path ) ; 
 + jobject exception = env - > NewObject ( jrealm _ file _ exception _ cls , constructor , kind _ code , jmessage , jpath ) ; 
 env - > Throw ( reinterpret _ cast < jthrowable > ( exception ) ) ; 
 - env - > DeleteLocalRef ( cls ) ; 
 env - > DeleteLocalRef ( exception ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index b6546f4 . . 6678fe9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 101 , 6 + 101 , 11 @ @ public class RealmConfiguration { 
 private final Realm . Transaction initialDataTransaction ; 
 private final boolean readOnly ; 
 private final CompactOnLaunchCallback compactOnLaunch ; 
 + / * * 
 + * Whether this RealmConfiguration is intended to open a 
 + * recovery Realm produced after an offline / online client reset . 
 + * / 
 + private final boolean isRecoveryConfiguration ; 
 
 / / We need to enumerate all parameters since SyncConfiguration and RealmConfiguration supports different 
 / / subsets of them . 
 @ @ - 117 , 7 + 122 , 8 @ @ public class RealmConfiguration { 
 @ Nullable RxObservableFactory rxObservableFactory , 
 @ Nullable Realm . Transaction initialDataTransaction , 
 boolean readOnly , 
 - @ Nullable CompactOnLaunchCallback compactOnLaunch ) { 
 + @ Nullable CompactOnLaunchCallback compactOnLaunch , 
 + boolean isRecoveryConfiguration ) { 
 this . realmDirectory = realmDirectory ; 
 this . realmFileName = realmFileName ; 
 this . canonicalPath = canonicalPath ; 
 @ @ - 132 , 6 + 138 , 7 @ @ public class RealmConfiguration { 
 this . initialDataTransaction = initialDataTransaction ; 
 this . readOnly = readOnly ; 
 this . compactOnLaunch = compactOnLaunch ; 
 + this . isRecoveryConfiguration = isRecoveryConfiguration ; 
 } 
 
 public File getRealmDirectory ( ) { 
 @ @ - 266 , 6 + 273 , 14 @ @ public class RealmConfiguration { 
 return readOnly ; 
 } 
 
 + / * * 
 + * @ return { @ code true } if this configuration is intended to open a backup Realm ( as a result of a client reset ) . 
 + * @ see < a href = " https : / / realm . io / docs / java / latest / api / io / realm / ClientResetRequiredError . html " > ClientResetRequiredError < / a > 
 + * / 
 + public boolean isRecoveryConfiguration ( ) { 
 + return isRecoveryConfiguration ; 
 + } 
 + 
 @ Override 
 public boolean equals ( Object obj ) { 
 if ( this = = obj ) { return true ; } 
 @ @ - 276 , 6 + 291 , 7 @ @ public class RealmConfiguration { 
 if ( schemaVersion ! = that . schemaVersion ) { return false ; } 
 if ( deleteRealmIfMigrationNeeded ! = that . deleteRealmIfMigrationNeeded ) { return false ; } 
 if ( readOnly ! = that . readOnly ) { return false ; } 
 + if ( isRecoveryConfiguration ! = that . isRecoveryConfiguration ) { return false ; } 
 if ( realmDirectory ! = null ? ! realmDirectory . equals ( that . realmDirectory ) : that . realmDirectory ! = null ) { 
 return false ; 
 } 
 @ @ - 317 , 6 + 333 , 7 @ @ public class RealmConfiguration { 
 result = 31 * result + ( initialDataTransaction ! = null ? initialDataTransaction . hashCode ( ) : 0 ) ; 
 result = 31 * result + ( readOnly ? 1 : 0 ) ; 
 result = 31 * result + ( compactOnLaunch ! = null ? compactOnLaunch . hashCode ( ) : 0 ) ; 
 + result = 31 * result + ( isRecoveryConfiguration ? 1 : 0 ) ; 
 return result ; 
 } 
 
 @ @ - 802 , 7 + 819 , 8 @ @ public class RealmConfiguration { 
 rxFactory , 
 initialDataTransaction , 
 readOnly , 
 - compactOnLaunch 
 + compactOnLaunch , 
 + false 
 ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java b / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java 
 index 24eb5fa . . f83f4f7 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / OsRealmConfig . java 
 @ @ - 187 , 8 + 187 , 10 @ @ public class OsRealmConfig implements NativeObject { 
 
 / / Set schema related params . 
 SchemaMode schemaMode = SchemaMode . SCHEMA _ MODE _ MANUAL ; 
 - if ( config . isReadOnly ( ) ) { 
 + if ( config . isRecoveryConfiguration ( ) ) { 
 schemaMode = SchemaMode . SCHEMA _ MODE _ IMMUTABLE ; 
 + } else if ( config . isReadOnly ( ) ) { 
 + schemaMode = SchemaMode . SCHEMA _ MODE _ READONLY ; 
 } else if ( syncRealmUrl ! = null ) { 
 schemaMode = SchemaMode . SCHEMA _ MODE _ ADDITIVE ; 
 } else if ( config . shouldDeleteRealmIfMigrationNeeded ( ) ) { 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 index 3659767 . . 2b69a76 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 @ @ - 131 , 7 + 131 , 8 @ @ public class SyncConfiguration extends RealmConfiguration { 
 rxFactory , 
 initialDataTransaction , 
 readOnly , 
 - null 
 + null , 
 + false 
 ) ; 
 
 this . user = user ; 
 @ @ - 188 , 7 + 189 , 7 @ @ public class SyncConfiguration extends RealmConfiguration { 
 } 
 
 static RealmConfiguration forRecovery ( String canonicalPath , @ Nullable byte [ ] encryptionKey , RealmProxyMediator schemaMediator ) { 
 - return new RealmConfiguration ( null , null , canonicalPath , null , encryptionKey , 0 , null , false , OsRealmConfig . Durability . FULL , schemaMediator , null , null , true , null ) ; 
 + return new RealmConfiguration ( null , null , canonicalPath , null , encryptionKey , 0 , null , false , OsRealmConfig . Durability . FULL , schemaMediator , null , null , true , null , true ) ; 
 } 
 
 static URI resolveServerUrl ( URI serverUrl , String userIdentifier ) { 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / exceptions / IncompatibleSyncedFileException . java b / realm / realm - library / src / objectServer / java / io / realm / exceptions / IncompatibleSyncedFileException . java 
 new file mode 100644 
 index 0000000 . . 2742b11 
 - - - / dev / null 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / exceptions / IncompatibleSyncedFileException . java 
 @ @ - 0 , 0 + 1 , 96 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . exceptions ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . RealmModel ; 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . internal . Keep ; 
 + 
 + / * * 
 + * An exception thrown when attempting to open an incompatible Synchronized Realm file . This usually happens 
 + * when the Realm file was created with an older version of the SDK and automatic migration to the current version 
 + * is not possible . When such an exception occurs , the original file is moved to a backup location and a new file is 
 + * created instead . If you wish to migrate any data from the backup location , you can use { @ link # getBackupRealmConfiguration ( ) } 
 + * to obtain a { @ link RealmConfiguration } that can then be used to open the backup Realm . After that , retry 
 + * opening the original Realm file ( which now should be recreated as an empty file ) and copy all data from the backup file to the new one . 
 + * < pre > 
 + * { @ code 
 + * SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , serverUri ) . build ( ) ; 
 + * try { 
 + * Realm realm = Realm . getInstance ( syncConfig ) ; 
 + * } catch ( IncompatibleSyncedFileException exception ) { 
 + * RealmConfiguration backupConfig = exception . getBackupRealmConfiguration ( ) ; 
 + * Realm backupRealm = Realm . getInstance ( backupConfig ) ; 
 + * realm = Realm . GetInstance ( syncConfig ) ; 
 + * } 
 + * } 
 + * < / pre > 
 + * / 
 + @ Keep 
 + public class IncompatibleSyncedFileException extends RealmFileException { 
 + private final String path ; 
 + 
 + public IncompatibleSyncedFileException ( String message , String recoveryPath ) { 
 + super ( Kind . INCOMPATIBLE _ SYNC _ FILE , message ) ; 
 + this . path = recoveryPath ; 
 + } 
 + 
 + / * * 
 + * Gets a { @ link RealmConfiguration } instance that can be used to open the backup Realm file . 
 + * 
 + * Note : This will use the default Realm module ( composed of all { @ link RealmModel } ) , and 
 + * assume no encryption should be used as well . 
 + * 
 + * @ return A configuration object for the backup Realm . 
 + * / 
 + public RealmConfiguration getBackupRealmConfiguration ( ) { 
 + return SyncConfiguration . forRecovery ( path , null ) ; 
 + } 
 + 
 + / * * 
 + * Gets a { @ link RealmConfiguration } instance that can be used to open the backup Realm file . 
 + * 
 + * Note : This will use the default Realm module ( composed of all { @ link RealmModel } ) . 
 + * 
 + * @ param encryptionKey Optional encryption key that was used to encrypt the original Realm file . 
 + * @ return A configuration object for the backup Realm . 
 + * / 
 + public RealmConfiguration getBackupRealmConfiguration ( @ Nullable byte [ ] encryptionKey ) { 
 + return SyncConfiguration . forRecovery ( path , encryptionKey ) ; 
 + } 
 + 
 + / * * 
 + * Gets a { @ link RealmConfiguration } instance that can be used to open the backup Realm file . 
 + * 
 + * @ param encryptionKey Optional encryption key that was used to encrypt the original Realm file . 
 + * @ param modules restricts Realm schema to the provided module . 
 + * @ return A configuration object for the backup Realm . 
 + * / 
 + public RealmConfiguration getBackupRealmConfiguration ( @ Nullable byte [ ] encryptionKey , Object . . . modules ) { 
 + return SyncConfiguration . forRecovery ( path , encryptionKey , modules ) ; 
 + } 
 + 
 + / * * 
 + * @ return Absolute path to the backup Realm file . 
 + * / 
 + public String getRecoveryPath ( ) { 
 + return path ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / assets / sync - 1 . x . realm b / realm / realm - library / src / syncIntegrationTest / assets / sync - 1 . x . realm 
 new file mode 100644 
 index 0000000 . . 3f7404b 
 Binary files / dev / null and b / realm / realm - library / src / syncIntegrationTest / assets / sync - 1 . x . realm differ

NEAREST DIFF:
diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java 
 index f24f3e3 . . 8024608 100755 
 - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java 
 + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java 
 @ @ - 8 , 9 + 8 , 11 @ @ import android . util . Log ; 
 import com . google . gson . Gson ; 
 import com . google . gson . reflect . TypeToken ; 
 
 + import java . io . File ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 + import java . util . Arrays ; 
 import java . util . List ; 
 
 import io . realm . Realm ; 
 @ @ - 53 , 13 + 55 , 25 @ @ public class CityLoader extends AsyncTaskLoader < List < City > > { 
 
 dataIsReady = true ; 
 
 + / / Delete realm files 
 + File writablePath = context . getFilesDir ( ) ; 
 + for ( File file : Arrays . asList ( 
 + new File ( writablePath , Realm . DEFAULT _ REALM _ NAME ) , 
 + new File ( writablePath , Realm . DEFAULT _ REALM _ NAME + " . lock " ) ) ) { 
 + if ( file . exists ( ) ) { 
 + boolean deleteResult = file . delete ( ) ; 
 + if ( ! deleteResult ) { 
 + throw new AssertionError ( " Could not delete file : " + file . getAbsolutePath ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 / / Store the retrieved items to the Realm 
 - Realm realm = new Realm ( context ) ; 
 - realm . clear ( ) ; / / Delete the Realm ( in the event of a Reset ) 
 + Realm realm = Realm . create ( context ) ; 
 
 realm . beginWrite ( ) ; 
 for ( City city : items ) { 
 - City realmCity = realm . create ( City . class ) ; 
 + City realmCity = realm . createObject ( City . class ) ; 
 realmCity . setName ( city . getName ( ) ) ; 
 realmCity . setVotes ( city . getVotes ( ) ) ; 
 } 
 diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 index 71ae952 . . 7e8feb3 100644 
 - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load 
 } 
 
 public void updateCities ( ) { 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 RealmResults < City > cities = realm . where ( City . class ) . findAll ( ) ; 
 mAdapter . setData ( cities ) ; 
 
 @ @ - 104 , 7 + 104 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load 
 City modifiedCity = ( City ) mAdapter . getItem ( position ) ; 
 
 / / Update the realm object affected by the user 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 RealmQuery < City > query = realm . where ( City . class ) . beginsWith ( " name " , modifiedCity . getName ( ) ) ; 
 City city = query . findFirst ( ) ; 
 realm . beginWrite ( ) ; 
 diff - - git a / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java b / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java 
 index cc41ef1 . . a97cb09 100644 
 - - - a / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java 
 + + + b / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java 
 @ @ - 66 , 11 + 66 , 11 @ @ public class RealmIntroExampleActivity extends Activity { 
 showStatus ( " Performing basic Read / Write operation . . . " ) ; 
 
 / / Open a default realm 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 
 / / Add a person in a write transaction 
 realm . beginWrite ( ) ; 
 - Person person = realm . create ( Person . class ) ; 
 + Person person = realm . createObject ( Person . class ) ; 
 person . setName ( " Happy Person " ) ; 
 person . setAge ( 14 ) ; 
 realm . commit ( ) ; 
 @ @ - 83 , 7 + 83 , 7 @ @ public class RealmIntroExampleActivity extends Activity { 
 private void basicQuery ( ) throws java . io . IOException { 
 showStatus ( " \ nPerforming basic Query operation . . . " ) ; 
 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; 
 RealmResults < Person > results = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; 
 showStatus ( " Size of result set : " + results . size ( ) ) ; 
 @ @ - 93 , 7 + 93 , 7 @ @ public class RealmIntroExampleActivity extends Activity { 
 showStatus ( " \ nPerforming basic Update operation . . . " ) ; 
 
 / / Open a default realm 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 
 / / Get the first object 
 Person person = realm . where ( Person . class ) . findFirst ( ) ; 
 @ @ - 118 , 19 + 118 , 19 @ @ public class RealmIntroExampleActivity extends Activity { 
 String status = " \ nPerforming complex Read / Write operation . . . " ; 
 
 / / Open a default realm 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 
 / / Add ten persons in one write transaction 
 realm . beginWrite ( ) ; 
 - Dog fido = realm . create ( Dog . class ) ; 
 + Dog fido = realm . createObject ( Dog . class ) ; 
 fido . setName ( " fido " ) ; 
 for ( int i = 0 ; i < 10 ; i + + ) { 
 - Person person = realm . create ( Person . class ) ; 
 + Person person = realm . createObject ( Person . class ) ; 
 person . setName ( " Person no . " + i ) ; 
 person . setAge ( i ) ; 
 person . setDog ( fido ) ; 
 for ( int j = 0 ; j < i ; j + + ) { 
 - Cat cat = realm . create ( Cat . class ) ; 
 + Cat cat = realm . createObject ( Cat . class ) ; 
 cat . setName ( " Cat _ " + j ) ; 
 person . getCats ( ) . add ( cat ) ; 
 } 
 @ @ - 157 , 7 + 157 , 7 @ @ public class RealmIntroExampleActivity extends Activity { 
 private String complexQuery ( ) throws IOException { 
 String status = " \ n \ nPerforming complex Query operation . . . " ; 
 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; 
 
 / / Find all persons where age between 7 and 9 and name begins with " Person " . 
 diff - - git a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 index 851cdda . . e4e91e8 100644 
 - - - a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 + + + b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 @ @ - 83 , 15 + 83 , 14 @ @ public class PerformanceTask extends AsyncTask < Integer , String , String > { 
 System . out . println ( " # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Testing new interface " ) ; 
 
 Realm . setDefaultDurability ( SharedGroup . Durability . FULL ) ; 
 - Realm realm = new Realm ( activity ) ; 
 - realm . clear ( ) ; 
 + Realm realm = Realm . create ( activity ) ; 
 
 timer = System . currentTimeMillis ( ) ; 
 try { 
 / / Debug . startMethodTracing ( " writes " ) ; 
 realm . beginWrite ( ) ; 
 for ( int i = 0 ; i < listSize ; i + + ) { 
 - User user = realm . create ( User . class ) ; 
 + User user = realm . createObject ( User . class ) ; 
 
 user . setId ( i ) ; 
 user . setName ( " John Doe " ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 new file mode 100644 
 index 0000000 . . 74cc428 
 - - - / dev / null 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package io . realm ; 
 + 
 + import android . test . AndroidTestCase ; 
 + 
 + public class RealmTest extends AndroidTestCase { 
 + 
 + public void testRealmThreadCachingSpeed ( ) { 
 + long tic1 = System . currentTimeMillis ( ) ; 
 + Realm realm1 = Realm . create ( this . getContext ( ) ) ; 
 + long toc1 = System . currentTimeMillis ( ) ; 
 + long t1 = toc1 - tic1 ; 
 + 
 + long tic2 = System . currentTimeMillis ( ) ; 
 + Realm realm2 = Realm . create ( this . getContext ( ) ) ; 
 + long toc2 = System . currentTimeMillis ( ) ; 
 + long t2 = toc2 - tic2 ; 
 + 
 + / / At least 5 times faster ? 
 + assertTrue ( t2 < ( t1 / 5 ) ) ; 
 + } 
 + } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 0e10436 . . 782ddca 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 19 , 7 + 19 , 7 @ @ package io . realm ; 
 import android . content . Context ; 
 
 import java . io . File ; 
 - import java . io . IOException ; 
 + import java . lang . ref . SoftReference ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 @ @ - 40 , 13 + 40 , 15 @ @ import io . realm . internal . Table ; 
 public class Realm { 
 
 private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; 
 + public static final String DEFAULT _ REALM _ NAME = " default . realm " ; 
 + private static final Map < String , ThreadRealm > realms = new HashMap < String , ThreadRealm > ( ) ; 
 
 - private SharedGroup sg ; 
 + private SharedGroup sharedGroup ; 
 private ImplicitTransaction transaction ; 
 private String filePath ; 
 private int version ; 
 - private File bytecodeCache ; 
 - private ScheduledExecutorService ses = Executors . newSingleThreadScheduledExecutor ( ) ; 
 + private ScheduledExecutorService scheduledExecutorService 
 + = Executors . newSingleThreadScheduledExecutor ( ) ; 
 
 private Map < Class < ? > , String > generatedClassNames = new HashMap < Class < ? > , String > ( ) ; 
 private Map < Class < ? > , String > simpleClassNames = new HashMap < Class < ? > , String > ( ) ; 
 @ @ - 59 , 31 + 61 , 17 @ @ public class Realm { 
 private List < RealmChangeListener > changeListeners = new ArrayList < RealmChangeListener > ( ) ; 
 boolean runEventHandler = false ; 
 
 - public Realm ( Context context ) { 
 - File filesDir = context . getFilesDir ( ) ; 
 - this . filePath = new File ( filesDir , " default . realm " ) . getAbsolutePath ( ) ; 
 - init ( ) ; 
 - } 
 - 
 - public Realm ( Context context , String filePath ) { 
 - File filesDir = context . getFilesDir ( ) ; 
 - this . filePath = new File ( filesDir , filePath ) . getAbsolutePath ( ) ; 
 - init ( ) ; 
 - } 
 - 
 - public Realm ( File writeablePath ) throws IOException { 
 - this ( writeablePath , " default . realm " ) ; 
 - } 
 - 
 - public Realm ( File writeablePath , String filePath ) { 
 - this . filePath = new File ( writeablePath , filePath ) . getAbsolutePath ( ) ; 
 - init ( ) ; 
 + / / The constructor in private to enforce the use of the static one 
 + private Realm ( String absolutePath ) { 
 + this . filePath = absolutePath ; 
 + this . sharedGroup = new SharedGroup ( filePath , defaultDurability ) ; 
 + this . transaction = sharedGroup . beginImplicitTransaction ( ) ; 
 } 
 
 private void startEventHandler ( ) { 
 runEventHandler = true ; 
 RealmEventHandler realmEventHandler = new RealmEventHandler ( this ) ; 
 - ses . scheduleWithFixedDelay ( realmEventHandler , 0 , 100 , TimeUnit . MILLISECONDS ) ; 
 + scheduledExecutorService . scheduleWithFixedDelay ( realmEventHandler , 0 , 100 , TimeUnit . MILLISECONDS ) ; 
 } 
 
 @ Override 
 @ @ - 92 , 11 + 80 , 6 @ @ public class Realm { 
 super . finalize ( ) ; 
 } 
 
 - private void init ( ) { 
 - this . sg = new SharedGroup ( filePath , defaultDurability ) ; 
 - this . transaction = sg . beginImplicitTransaction ( ) ; 
 - } 
 - 
 public static void setDefaultDurability ( SharedGroup . Durability durability ) { 
 defaultDurability = durability ; 
 } 
 @ @ - 112 , 13 + 95 , 63 @ @ public class Realm { 
 return transaction . getTable ( simpleClassName ) ; 
 } 
 
 + public static Realm create ( Context context ) { 
 + return Realm . create ( context , DEFAULT _ REALM _ NAME ) ; 
 + } 
 + 
 + public static Realm create ( Context context , String fileName ) { 
 + return Realm . create ( context . getFilesDir ( ) , fileName ) ; 
 + } 
 + 
 + public static Realm create ( File writeableFolder ) { 
 + return Realm . create ( writeableFolder , DEFAULT _ REALM _ NAME ) ; 
 + } 
 + 
 + public static Realm create ( File writableFolder , String filename ) { 
 + String absolutePath = new File ( writableFolder , filename ) . getAbsolutePath ( ) ; 
 + return create ( absolutePath ) ; 
 + } 
 + 
 + private static Realm create ( String absolutePath ) { 
 + ThreadRealm threadRealm = realms . get ( absolutePath ) ; 
 + if ( threadRealm = = null ) { 
 + threadRealm = new ThreadRealm ( absolutePath ) ; 
 + realms . put ( absolutePath , threadRealm ) ; 
 + } 
 + SoftReference < Realm > realmSoftReference = threadRealm . get ( ) ; 
 + Realm realm = realmSoftReference . get ( ) ; 
 + if ( realm = = null ) { 
 + / / The garbage collector decided to get rid of the realm instance 
 + threadRealm = new ThreadRealm ( absolutePath ) ; 
 + realms . put ( absolutePath , threadRealm ) ; 
 + realmSoftReference = threadRealm . get ( ) ; 
 + realm = realmSoftReference . get ( ) ; 
 + } 
 + return realm ; 
 + } 
 + 
 + / / This class stores soft - references to realm objects per thread per realm file 
 + private static class ThreadRealm extends ThreadLocal < SoftReference < Realm > > { 
 + private String absolutePath ; 
 + 
 + private ThreadRealm ( String absolutePath ) { 
 + this . absolutePath = absolutePath ; 
 + } 
 + 
 + @ Override 
 + protected SoftReference < Realm > initialValue ( ) { 
 + Realm realm = new Realm ( absolutePath ) ; 
 + return new SoftReference < Realm > ( realm ) ; 
 + } 
 + } 
 + 
 / * * 
 * Instantiates and adds a new object to the realm 
 * 
 * @ return The new object 
 * @ param < E > 
 * / 
 - public < E extends RealmObject > E create ( Class < E > clazz ) { 
 + public < E extends RealmObject > E createObject ( Class < E > clazz ) { 
 Table table ; 
 table = tables . get ( clazz ) ; 
 if ( table = = null ) { 
 @ @ - 464 , 7 + 497 , 7 @ @ public class Realm { 
 } 
 
 boolean hasChanged ( ) { 
 - return sg . hasChanged ( ) ; 
 + return sharedGroup . hasChanged ( ) ; 
 } 
 
 / / Transactions 
 @ @ - 479 , 7 + 512 , 7 @ @ public class Realm { 
 public void beginWrite ( ) { 
 
 / / If we are moving the transaction forward , send local notifications 
 - if ( sg . hasChanged ( ) ) { 
 + if ( sharedGroup . hasChanged ( ) ) { 
 sendNotifications ( ) ; 
 } 
 
 @ @ - 501 , 14 + 534 , 6 @ @ public class Realm { 
 getTable ( classSpec ) . clear ( ) ; 
 } 
 
 - public void clear ( ) { 
 - transaction . endRead ( ) ; 
 - sg . close ( ) ; 
 - new File ( filePath ) . delete ( ) ; 
 - new File ( filePath + " . lock " ) . delete ( ) ; 
 - init ( ) ; 
 - } 
 - 
 public int getVersion ( ) { 
 return version ; 
 } 
 @ @ - 517 , 8 + 542 , 7 @ @ public class Realm { 
 this . version = version ; 
 } 
 
 - private File getBytecodeCache ( ) { 
 - return bytecodeCache ; 
 + public String getFilePath ( ) { 
 + return filePath ; 
 } 
 - 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmEventHandler . java b / realm / src / main / java / io / realm / RealmEventHandler . java 
 index d6be5fd . . 08b2df0 100644 
 - - - a / realm / src / main / java / io / realm / RealmEventHandler . java 
 + + + b / realm / src / main / java / io / realm / RealmEventHandler . java 
 @ @ - 20 , 22 + 20 , 16 @ @ import java . lang . ref . WeakReference ; 
 
 public class RealmEventHandler implements Runnable { 
 
 - private static int count = 0 ; 
 - private int myCount ; 
 private WeakReference < Realm > realmRef ; 
 
 public RealmEventHandler ( Realm realm ) { 
 realmRef = new WeakReference < Realm > ( realm ) ; 
 - myCount = count + + ; 
 } 
 
 @ Override 
 public void run ( ) { 
 - 
 Realm realm = realmRef . get ( ) ; 
 - 
 if ( realm ! = null & & realm . runEventHandler ) { 
 - 
 if ( realm . hasChanged ( ) ) { 
 realm . sendNotifications ( ) ; 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java 
 index 25785a2 . . 179691e 100644 
 - - - a / realm / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / src / main / java / io / realm / RealmObject . java 
 @ @ - 23 , 7 + 23 , 7 @ @ import io . realm . annotations . RealmClass ; 
 public abstract class RealmObject { 
 
 protected Row row ; 
 - protected Realm realm = null ; 
 + protected Realm realm ; 
 
 protected Realm getRealm ( ) { 
 return realm ; 
 @ @ - 41 , 6 + 41 , 7 @ @ public abstract class RealmObject { 
 this . row = row ; 
 } 
 
 + 
 / / Creating objects 
 
 / / / * *
