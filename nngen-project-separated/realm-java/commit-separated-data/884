BLEU SCORE: 0.020655725292911018

TEST MSG: Upgrading to NDK R10e and gcc 4 . 9
GENERATED MSG: realm - jni : change realm core files location and introduce SHA - 256 checking to archive file .

TEST DIFF (one line): diff - - git a / README . md b / README . md <nl> index b78c837 . . 6735d3e 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 60 , 19 + 60 , 19 @ @ Prerequisites : <nl> * Make sure ` make ` is available in your ` $ PATH ` <nl> * Download the [ * * JDK 7 * * ] ( http : / / www . oracle . com / technetwork / java / javase / downloads / jdk7 - downloads - 1880260 . html ) or [ * * JDK 8 * * ] ( http : / / www . oracle . com / technetwork / java / javase / downloads / jdk8 - downloads - 2133151 . html ) from Oracle and install it . <nl> * Download & install the Android SDK , * * Android 4 . 4 . 2 ( API 19 ) * * , * * Android 4 . 4W ( API 20 ) * * and * * Android 5 . 0 ( API 21 ) * * ( for example through Android Studio â€™ s * * Android SDK Manager * * ) <nl> - * Download the * * Android NDK ( = r10d ) * * for [ OS X ] ( http : / / dl . google . com / android / ndk / android - ndk - r10d - darwin - x86 _ 64 . bin ) or [ Linux ] ( http : / / dl . google . com / android / ndk / android - ndk - r10d - linux - x86 _ 64 . bin ) . <nl> + * Download the * * Android NDK ( = r10e ) * * for [ OS X ] ( http : / / dl . google . com / android / ndk / android - ndk - r10e - darwin - x86 _ 64 . bin ) or [ Linux ] ( http : / / dl . google . com / android / ndk / android - ndk - r10e - linux - x86 _ 64 . bin ) . <nl> * Or you can use [ Hombrew - versions ] ( https : / / github . com / Homebrew / homebrew - versions ) to install Android NDK for Mac : <nl> <nl> ` ` ` <nl> brew tap homebrew / versions <nl> - brew install android - ndk - r10d <nl> + brew install android - ndk <nl> ` ` ` <nl> <nl> * Add two environment variables to your profile : <nl> <nl> ` ` ` <nl> export ANDROID _ HOME = ~ / Library / Android / sdk <nl> - export NDK _ HOME = / usr / local / Cellar / android - ndk - r10d / r10d <nl> + export NDK _ HOME = / usr / local / Cellar / android - ndk / r10e <nl> ` ` ` <nl> <nl> * If you are using OS X , you ' d be better to add following lines to ` ~ / . profile ` in order for Android Studio to see those environment variables . <nl> diff - - git a / changelog . txt b / changelog . txt <nl> index fbbec05 . . 03676f3 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 3 + 1 , 8 @ @ <nl> + 0 . 87 . 1 <nl> + * Upgraded to NDK R10e . Using gcc 4 . 9 for all architectures . <nl> + * Updated Realm Core to 0 . 95 . 6 <nl> + - Fixed a bug where an async query can be copied incomplete in rare cases . <nl> + <nl> 0 . 87 . 0 <nl> * Added Realm . asObservable ( ) , RealmResults . asObservable ( ) , RealmObject . asObservable ( ) , DynamicRealm . asObservable ( ) and DynamicRealmObject . asObservable ( ) . <nl> * Added RealmConfiguration . Builder . rxFactory ( ) and RxObservableFactory for custom RxJava observable factory classes . <nl> @ @ - 272 , 7 + 277 , 7 @ @ <nl> and dates after 2038 - 01 - 19 are not supported on 32 bit systems <nl> * Fixed bug so Realm no longer throws an Exception when removing the last object <nl> * Bug fixed in RealmResults which prevented subquerying <nl> - <nl> + <nl> 0 . 74 . 0 ( 19 Nov 2014 ) <nl> * Added support for more field / accessors naming conventions <nl> * Allow static methods in model classes <nl> diff - - git a / realm . properties b / realm . properties <nl> index 5d4d3b2 . . 60d64cf 100644 <nl> - - - a / realm . properties <nl> + + + b / realm . properties <nl> @ @ - 1 , 2 + 1 , 2 @ @ <nl> gradleVersion = 2 . 7 <nl> - ndkVersion = r10d <nl> + ndkVersion = r10e <nl> diff - - git a / realm / realm - jni / build . gradle b / realm / realm - jni / build . gradle <nl> index 491cecf . . af04b92 100644 <nl> - - - a / realm / realm - jni / build . gradle <nl> + + + b / realm / realm - jni / build . gradle <nl> @ @ - 1 , 8 + 1 , 8 @ @ <nl> import java . security . MessageDigest <nl> <nl> - ext . coreVersion = ' 0 . 95 . 5 ' <nl> + ext . coreVersion = ' 0 . 95 . 6 ' <nl> / / empty or comment out this to disable hash checking <nl> - ext . coreSha256Hash = ' 96980368e87ca60195f552c8255846a9f1db2ff498304264b97caced0daf71e4 ' <nl> + ext . coreSha256Hash = ' e040350420dda9e276ead1366f309e52f2dfa1551c9ed6e97639c7de2fee62d0 ' <nl> ext . forceDownloadCore = <nl> project . hasProperty ( ' forceDownloadCore ' ) ? project . getProperty ( ' forceDownloadCore ' ) . toBoolean ( ) : false <nl> / / gcc is default for the NDK . It also produces smaller binaries <nl> @ @ - 15 , 14 + 15 , 14 @ @ ext . stripSymbols = project . hasProperty ( ' stripSymbols ' ) ? project . getProperty ( ' st <nl> / / core source code . <nl> ext . coreSourcePath = project . hasProperty ( ' coreSourcePath ' ) ? project . getProperty ( ' coreSourcePath ' ) : null <nl> <nl> - def commonCflags = [ ' - std = c + + 11 ' , ' - ffunction - sections ' , ' - fdata - sections ' , ' - flto ' ] <nl> + def commonCflags = [ ' - Os ' , ' - std = c + + 11 ' , ' - ffunction - sections ' , ' - fdata - sections ' , ' - flto ' ] <nl> <nl> enum Compiler { <nl> GCC , CLANG <nl> } <nl> <nl> / / Unfortunately the NDK has no consistency when it comes to naming . <nl> - / / This Class holds all the different names used and some more informations <nl> + / / This Class holds all the different names used and some more information <nl> class Toolchain { <nl> / / The standard name : arm , arm64 , mips , x86 <nl> String name <nl> @ @ - 55 , 12 + 55 , 12 @ @ class Target { <nl> List < String > cflags <nl> } <nl> <nl> - / / We are using gcc 4 . 8 for 32 bits targets and 4 . 9 for 64 bits targets , as the NDK defaults . <nl> + / / We are using gcc 4 . 9 for all architectures <nl> def toolchains = [ <nl> - new Toolchain ( name : ' arm ' , fullName : ' arm - linux - androideabi ' , commandPrefix : ' arm - linux - androideabi ' , version : [ ( Compiler . GCC ) : ' 4 . 8 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 8 ) , <nl> + new Toolchain ( name : ' arm ' , fullName : ' arm - linux - androideabi ' , commandPrefix : ' arm - linux - androideabi ' , version : [ ( Compiler . GCC ) : ' 4 . 9 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 8 ) , <nl> new Toolchain ( name : ' arm64 ' , fullName : ' aarch64 - linux - android ' , commandPrefix : ' aarch64 - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 9 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 21 ) , <nl> - new Toolchain ( name : ' mips ' , fullName : ' mipsel - linux - android ' , commandPrefix : ' mipsel - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 8 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 9 ) , <nl> - new Toolchain ( name : ' x86 ' , fullName : ' x86 ' , commandPrefix : ' i686 - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 8 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 9 ) , <nl> + new Toolchain ( name : ' mips ' , fullName : ' mipsel - linux - android ' , commandPrefix : ' mipsel - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 9 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 9 ) , <nl> + new Toolchain ( name : ' x86 ' , fullName : ' x86 ' , commandPrefix : ' i686 - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 9 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 9 ) , <nl> new Toolchain ( name : ' x86 _ 64 ' , fullName : ' x86 _ 64 ' , commandPrefix : ' x86 _ 64 - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 9 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 21 ) <nl> ] <nl> <nl> @ @ - 283 , 7 + 283 , 7 @ @ targets . each { target - > <nl> " REALM _ CFLAGS _ COMMON = - Wno - variadic - macros - DREALM _ HAVE _ CONFIG - DPIC - I $ { project . coreDir } / include " , <nl> " CFLAGS _ ARCH = $ { ( commonCflags + target . cflags ) . join ( ' ' ) } " , <nl> " BASE _ DENOM = $ { target . name } " , <nl> - " REALM _ LDFLAGS _ COMMON = - lrealm - android - $ { target . name } - lstdc + + - lsupc + + - llog - L $ { project . coreDir } - Wl , - - gc - sections - flto " , <nl> + " REALM _ LDFLAGS _ COMMON = - lrealm - android - $ { target . name } - lstdc + + - lsupc + + - llog - L $ { project . coreDir } - Wl , - - gc - sections " , <nl> ' LIB _ SUFFIX _ SHARED = . so ' , <nl> " librealm - jni - $ { target . name } $ { getDebugExt ( ) } . so " <nl> ] <nl> diff - - git a / realm / realm - jni / project . mk b / realm / realm - jni / project . mk <nl> index bae3602 . . 1f770c3 100644 <nl> - - - a / realm / realm - jni / project . mk <nl> + + + b / realm / realm - jni / project . mk <nl> @ @ - 52 , 7 + 52 , 7 @ @ ifeq ( $ ( REALM _ ANDROID ) , ) <nl> endif <nl> endif <nl> else <nl> - PROJECT _ CFLAGS + = - fvisibility = hidden - DANDROID <nl> + PROJECT _ CFLAGS + = - fvisibility = hidden - DANDROID - ffunction - sections - fdata - sections - flto <nl> CFLAGS _ OPTIM = - Os - DNDEBUG <nl> endif <nl>
NEAREST DIFF (one line): diff - - git a / realm - jni / build . gradle b / realm - jni / build . gradle <nl> index 11204a0 . . 9bcd5df 100644 <nl> - - - a / realm - jni / build . gradle <nl> + + + b / realm - jni / build . gradle <nl> @ @ - 1 , 4 + 1 , 9 @ @ <nl> + import java . security . MessageDigest <nl> + <nl> ext . coreVersion = ' 0 . 93 . 0 ' <nl> + / / empty or comment out this to disable hash checking <nl> + ext . coreSha256Hash = ' 90044150ff6019a31c044306becccc513c7394f7486ffc8ba4880121c1ef46fa ' <nl> + ext . forceDownloadCore = false <nl> ext . clang = false / / gcc is default for the NDK . It also produces smaller binaries <nl> <nl> def commonCflags = [ ' - std = c + + 11 ' , ' - ffunction - sections ' , ' - fdata - sections ' , ' - flto ' ] <nl> @ @ - 59 , 20 + 64 , 26 @ @ def targets = [ <nl> <nl> buildscript { <nl> repositories { <nl> - mavenCentral ( ) <nl> + jcenter ( ) <nl> } <nl> dependencies { <nl> - classpath ' de . undercouch : gradle - download - task : 1 . 0 ' <nl> + classpath ' de . undercouch : gradle - download - task : 2 . 0 . 0 ' <nl> } <nl> } <nl> <nl> - apply plugin : ' download - task ' <nl> + apply plugin : ' de . undercouch . download ' <nl> <nl> Properties localProperties = new Properties ( ) <nl> localProperties . load ( new FileInputStream ( " $ { projectDir } / . . / local . properties " ) ) <nl> localProperties . entrySet ( ) . each ( ) { entry - > <nl> project . ext [ entry . getKey ( ) ] = localProperties . setProperty ( entry . getKey ( ) , entry . getValue ( ) ) <nl> } <nl> + if ( project . clang instanceof String ) { <nl> + ext . clang = Boolean . parseBoolean ( project . clang ) <nl> + } <nl> + if ( project . forceDownloadCore instanceof String ) { <nl> + ext . forceDownloadCore = Boolean . parseBoolean ( project . forceDownloadCore ) <nl> + } <nl> <nl> task checkProperties ( group : ' check ' , description : ' Check the user provided gradle . properties ' ) < < { <nl> if ( ! project . ext [ ' ndk . dir ' ] ) { <nl> @ @ - 89 , 18 + 100 , 91 @ @ task checkProperties ( group : ' check ' , description : ' Check the user provided gradl <nl> } <nl> } <nl> <nl> - / / TODO : Split this task into smaller subtasks <nl> + ext . coreArchiveFile = project . file ( " . . / core - android - $ { project . coreVersion } . tar . gz " ) <nl> + ext . coreDir = new File ( buildDir , " core - $ { project . coreVersion } " ) <nl> + <nl> + def coreDownloaded = false <nl> + <nl> task downloadCore ( group : ' build setup ' , description : ' Download the latest version of realm core ' , dependsOn : checkProperties ) { <nl> - outputs . dir " . . / core - $ { project . coreVersion } " <nl> + def isHashCheckingEnabled = { <nl> + return project . hasProperty ( ' coreSha256Hash ' ) & & ! project . coreSha256Hash . empty <nl> + } <nl> + <nl> + def calcSha256Hash = { File targetFile - > <nl> + MessageDigest sha = MessageDigest . getInstance ( " SHA - 256 " ) ; <nl> + Formatter hexHash = new Formatter ( ) <nl> + sha . digest ( targetFile . bytes ) . each { b - > hexHash . format ( ' % 02x ' , b ) } <nl> + return hexHash . toString ( ) <nl> + } <nl> + <nl> + def shouldDownloadCore = { <nl> + if ( ! project . coreArchiveFile . exists ( ) ) { <nl> + return true <nl> + } <nl> + if ( project . forceDownloadCore ) { <nl> + return true ; <nl> + } <nl> + if ( ! isHashCheckingEnabled ( ) ) { <nl> + println " Skipping hash check ( empty \ ' coreSha256Hash \ ' ) . " <nl> + return false <nl> + } <nl> + <nl> + def calculatedHash = calcSha256Hash ( project . coreArchiveFile ) <nl> + if ( project . coreSha256Hash . equalsIgnoreCase ( calculatedHash ) ) { <nl> + return false <nl> + } <nl> + <nl> + println " Existing archive hash mismatch ( Expected : $ { project . coreSha256Hash . toLowerCase ( ) } " + <nl> + " but got $ { calculatedHash . toLowerCase ( ) } ) . Download new version . " <nl> + return true <nl> + } <nl> + <nl> doLast { <nl> - download { <nl> - src " http : / / static . realm . io / downloads / core / realm - core - android - $ { project . coreVersion } . tar . gz " <nl> - dest new File ( buildDir , " core - android - $ { project . coreVersion } . tar . gz " ) <nl> - onlyIfNewer true <nl> + if ( shouldDownloadCore ( ) ) { <nl> + download { <nl> + src " http : / / static . realm . io / downloads / core / realm - core - android - $ { project . coreVersion } . tar . gz " <nl> + dest project . coreArchiveFile <nl> + onlyIfNewer false <nl> + } <nl> + coreDownloaded = true <nl> + <nl> + if ( isHashCheckingEnabled ( ) ) { <nl> + def calculatedHash = calcSha256Hash ( project . coreArchiveFile ) <nl> + if ( ! project . coreSha256Hash . equalsIgnoreCase ( calculatedHash ) ) { <nl> + throw new GradleException ( " Invalid checksum for file ' " + <nl> + " $ { project . coreArchiveFile . getName ( ) } ' . Expected " + <nl> + " $ { project . coreSha256Hash . toLowerCase ( ) } but got " + <nl> + " $ { calculatedHash . toLowerCase ( ) } . " ) ; <nl> + } <nl> + } else { <nl> + println ' Skipping hash check ( empty \ ' coreSha256Hash \ ' ) . ' <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + task deployCore ( group : ' build setup ' , description : ' Deploy the latest version of realm core ' ) { <nl> + dependsOn { downloadCore } <nl> + <nl> + outputs . upToDateWhen { <nl> + if ( coreDownloaded ) { <nl> + return false <nl> + } <nl> + <nl> + return project . coreDir . exists ( ) <nl> + } <nl> + <nl> + doLast { <nl> + exec { <nl> + commandLine = [ <nl> + ' rm ' , <nl> + ' - rf ' , <nl> + project . coreDir . getAbsolutePath ( ) <nl> + ] <nl> } <nl> copy { <nl> - from tarTree ( new File ( buildDir , " core - android - $ { project . coreVersion } . tar . gz " ) ) <nl> - into " . . / core - $ { project . coreVersion } " <nl> + from tarTree ( project . coreArchiveFile ) <nl> + into project . coreDir <nl> } <nl> for ( target in targets ) { <nl> exec { <nl> @ @ - 113 , 13 + 197 , 6 @ @ task downloadCore ( group : ' build setup ' , description : ' Download the latest versio <nl> ] <nl> } <nl> } <nl> - exec { <nl> - commandLine = [ <nl> - ' rm ' , <nl> - ' - rf ' , <nl> - " $ { projectDir } / build / * " <nl> - ] <nl> - } <nl> } <nl> } <nl> <nl> @ @ - 143 , 7 + 220 , 7 @ @ targets . each { target - > <nl> task " buildAndroidJni $ { target . name . capitalize ( ) } " ( type : Exec ) { <nl> group ' build ' <nl> description " Build the Android JNI shared library for the $ { target . name . capitalize ( ) } platform " <nl> - dependsOn downloadCore <nl> + dependsOn deployCore <nl> dependsOn " generateNdkToolchain $ { target . toolchain . name . capitalize ( ) } " <nl> environment PATH : " $ { buildDir } / standalone - toolchains / $ { target . toolchain . name } / bin : $ { System . env . PATH } " <nl> environment CC : " $ { target . toolchain . commandPrefix } - $ { clang ? ' clang ' : ' gcc ' } " <nl> @ @ - 153 , 10 + 230 , 10 @ @ targets . each { target - > <nl> ' make ' , <nl> ' - C ' , " $ { projectDir } / src " , <nl> " CC _ IS = $ { clang ? ' clang ' : ' gcc ' } " , <nl> - " REALM _ CFLAGS = - Wno - variadic - macros - DREALM _ HAVE _ CONFIG - DPIC - I $ { projectDir } / . . / core - $ { project . coreVersion } / include " , <nl> + " REALM _ CFLAGS = - Wno - variadic - macros - DREALM _ HAVE _ CONFIG - DPIC - I $ { project . coreDir } / include " , <nl> " CFLAGS _ ARCH = $ { ( commonCflags + target . cflags ) . join ( ' ' ) } " , <nl> " BASE _ DENOM = $ { target . name } " , <nl> - " REALM _ LDFLAGS = - lrealm - android - $ { target . name } - lstdc + + - lsupc + + - llog - L $ { projectDir } / . . / core - $ { project . coreVersion } - Wl , - - gc - sections - flto " , <nl> + " REALM _ LDFLAGS = - lrealm - android - $ { target . name } - lstdc + + - lsupc + + - llog - L $ { project . coreDir } - Wl , - - gc - sections - flto " , <nl> ' LIB _ SUFFIX _ SHARED = . so ' , <nl> " librealm - jni - $ { target . name } . so " <nl> ]

TEST DIFF:
diff - - git a / README . md b / README . md 
 index b78c837 . . 6735d3e 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 60 , 19 + 60 , 19 @ @ Prerequisites : 
 * Make sure ` make ` is available in your ` $ PATH ` 
 * Download the [ * * JDK 7 * * ] ( http : / / www . oracle . com / technetwork / java / javase / downloads / jdk7 - downloads - 1880260 . html ) or [ * * JDK 8 * * ] ( http : / / www . oracle . com / technetwork / java / javase / downloads / jdk8 - downloads - 2133151 . html ) from Oracle and install it . 
 * Download & install the Android SDK , * * Android 4 . 4 . 2 ( API 19 ) * * , * * Android 4 . 4W ( API 20 ) * * and * * Android 5 . 0 ( API 21 ) * * ( for example through Android Studio â€™ s * * Android SDK Manager * * ) 
 - * Download the * * Android NDK ( = r10d ) * * for [ OS X ] ( http : / / dl . google . com / android / ndk / android - ndk - r10d - darwin - x86 _ 64 . bin ) or [ Linux ] ( http : / / dl . google . com / android / ndk / android - ndk - r10d - linux - x86 _ 64 . bin ) . 
 + * Download the * * Android NDK ( = r10e ) * * for [ OS X ] ( http : / / dl . google . com / android / ndk / android - ndk - r10e - darwin - x86 _ 64 . bin ) or [ Linux ] ( http : / / dl . google . com / android / ndk / android - ndk - r10e - linux - x86 _ 64 . bin ) . 
 * Or you can use [ Hombrew - versions ] ( https : / / github . com / Homebrew / homebrew - versions ) to install Android NDK for Mac : 
 
 ` ` ` 
 brew tap homebrew / versions 
 - brew install android - ndk - r10d 
 + brew install android - ndk 
 ` ` ` 
 
 * Add two environment variables to your profile : 
 
 ` ` ` 
 export ANDROID _ HOME = ~ / Library / Android / sdk 
 - export NDK _ HOME = / usr / local / Cellar / android - ndk - r10d / r10d 
 + export NDK _ HOME = / usr / local / Cellar / android - ndk / r10e 
 ` ` ` 
 
 * If you are using OS X , you ' d be better to add following lines to ` ~ / . profile ` in order for Android Studio to see those environment variables . 
 diff - - git a / changelog . txt b / changelog . txt 
 index fbbec05 . . 03676f3 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 3 + 1 , 8 @ @ 
 + 0 . 87 . 1 
 + * Upgraded to NDK R10e . Using gcc 4 . 9 for all architectures . 
 + * Updated Realm Core to 0 . 95 . 6 
 + - Fixed a bug where an async query can be copied incomplete in rare cases . 
 + 
 0 . 87 . 0 
 * Added Realm . asObservable ( ) , RealmResults . asObservable ( ) , RealmObject . asObservable ( ) , DynamicRealm . asObservable ( ) and DynamicRealmObject . asObservable ( ) . 
 * Added RealmConfiguration . Builder . rxFactory ( ) and RxObservableFactory for custom RxJava observable factory classes . 
 @ @ - 272 , 7 + 277 , 7 @ @ 
 and dates after 2038 - 01 - 19 are not supported on 32 bit systems 
 * Fixed bug so Realm no longer throws an Exception when removing the last object 
 * Bug fixed in RealmResults which prevented subquerying 
 - 
 + 
 0 . 74 . 0 ( 19 Nov 2014 ) 
 * Added support for more field / accessors naming conventions 
 * Allow static methods in model classes 
 diff - - git a / realm . properties b / realm . properties 
 index 5d4d3b2 . . 60d64cf 100644 
 - - - a / realm . properties 
 + + + b / realm . properties 
 @ @ - 1 , 2 + 1 , 2 @ @ 
 gradleVersion = 2 . 7 
 - ndkVersion = r10d 
 + ndkVersion = r10e 
 diff - - git a / realm / realm - jni / build . gradle b / realm / realm - jni / build . gradle 
 index 491cecf . . af04b92 100644 
 - - - a / realm / realm - jni / build . gradle 
 + + + b / realm / realm - jni / build . gradle 
 @ @ - 1 , 8 + 1 , 8 @ @ 
 import java . security . MessageDigest 
 
 - ext . coreVersion = ' 0 . 95 . 5 ' 
 + ext . coreVersion = ' 0 . 95 . 6 ' 
 / / empty or comment out this to disable hash checking 
 - ext . coreSha256Hash = ' 96980368e87ca60195f552c8255846a9f1db2ff498304264b97caced0daf71e4 ' 
 + ext . coreSha256Hash = ' e040350420dda9e276ead1366f309e52f2dfa1551c9ed6e97639c7de2fee62d0 ' 
 ext . forceDownloadCore = 
 project . hasProperty ( ' forceDownloadCore ' ) ? project . getProperty ( ' forceDownloadCore ' ) . toBoolean ( ) : false 
 / / gcc is default for the NDK . It also produces smaller binaries 
 @ @ - 15 , 14 + 15 , 14 @ @ ext . stripSymbols = project . hasProperty ( ' stripSymbols ' ) ? project . getProperty ( ' st 
 / / core source code . 
 ext . coreSourcePath = project . hasProperty ( ' coreSourcePath ' ) ? project . getProperty ( ' coreSourcePath ' ) : null 
 
 - def commonCflags = [ ' - std = c + + 11 ' , ' - ffunction - sections ' , ' - fdata - sections ' , ' - flto ' ] 
 + def commonCflags = [ ' - Os ' , ' - std = c + + 11 ' , ' - ffunction - sections ' , ' - fdata - sections ' , ' - flto ' ] 
 
 enum Compiler { 
 GCC , CLANG 
 } 
 
 / / Unfortunately the NDK has no consistency when it comes to naming . 
 - / / This Class holds all the different names used and some more informations 
 + / / This Class holds all the different names used and some more information 
 class Toolchain { 
 / / The standard name : arm , arm64 , mips , x86 
 String name 
 @ @ - 55 , 12 + 55 , 12 @ @ class Target { 
 List < String > cflags 
 } 
 
 - / / We are using gcc 4 . 8 for 32 bits targets and 4 . 9 for 64 bits targets , as the NDK defaults . 
 + / / We are using gcc 4 . 9 for all architectures 
 def toolchains = [ 
 - new Toolchain ( name : ' arm ' , fullName : ' arm - linux - androideabi ' , commandPrefix : ' arm - linux - androideabi ' , version : [ ( Compiler . GCC ) : ' 4 . 8 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 8 ) , 
 + new Toolchain ( name : ' arm ' , fullName : ' arm - linux - androideabi ' , commandPrefix : ' arm - linux - androideabi ' , version : [ ( Compiler . GCC ) : ' 4 . 9 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 8 ) , 
 new Toolchain ( name : ' arm64 ' , fullName : ' aarch64 - linux - android ' , commandPrefix : ' aarch64 - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 9 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 21 ) , 
 - new Toolchain ( name : ' mips ' , fullName : ' mipsel - linux - android ' , commandPrefix : ' mipsel - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 8 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 9 ) , 
 - new Toolchain ( name : ' x86 ' , fullName : ' x86 ' , commandPrefix : ' i686 - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 8 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 9 ) , 
 + new Toolchain ( name : ' mips ' , fullName : ' mipsel - linux - android ' , commandPrefix : ' mipsel - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 9 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 9 ) , 
 + new Toolchain ( name : ' x86 ' , fullName : ' x86 ' , commandPrefix : ' i686 - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 9 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 9 ) , 
 new Toolchain ( name : ' x86 _ 64 ' , fullName : ' x86 _ 64 ' , commandPrefix : ' x86 _ 64 - linux - android ' , version : [ ( Compiler . GCC ) : ' 4 . 9 ' , ( Compiler . CLANG ) : ' 3 . 5 ' ] , platform : 21 ) 
 ] 
 
 @ @ - 283 , 7 + 283 , 7 @ @ targets . each { target - > 
 " REALM _ CFLAGS _ COMMON = - Wno - variadic - macros - DREALM _ HAVE _ CONFIG - DPIC - I $ { project . coreDir } / include " , 
 " CFLAGS _ ARCH = $ { ( commonCflags + target . cflags ) . join ( ' ' ) } " , 
 " BASE _ DENOM = $ { target . name } " , 
 - " REALM _ LDFLAGS _ COMMON = - lrealm - android - $ { target . name } - lstdc + + - lsupc + + - llog - L $ { project . coreDir } - Wl , - - gc - sections - flto " , 
 + " REALM _ LDFLAGS _ COMMON = - lrealm - android - $ { target . name } - lstdc + + - lsupc + + - llog - L $ { project . coreDir } - Wl , - - gc - sections " , 
 ' LIB _ SUFFIX _ SHARED = . so ' , 
 " librealm - jni - $ { target . name } $ { getDebugExt ( ) } . so " 
 ] 
 diff - - git a / realm / realm - jni / project . mk b / realm / realm - jni / project . mk 
 index bae3602 . . 1f770c3 100644 
 - - - a / realm / realm - jni / project . mk 
 + + + b / realm / realm - jni / project . mk 
 @ @ - 52 , 7 + 52 , 7 @ @ ifeq ( $ ( REALM _ ANDROID ) , ) 
 endif 
 endif 
 else 
 - PROJECT _ CFLAGS + = - fvisibility = hidden - DANDROID 
 + PROJECT _ CFLAGS + = - fvisibility = hidden - DANDROID - ffunction - sections - fdata - sections - flto 
 CFLAGS _ OPTIM = - Os - DNDEBUG 
 endif 


NEAREST DIFF:
diff - - git a / realm - jni / build . gradle b / realm - jni / build . gradle 
 index 11204a0 . . 9bcd5df 100644 
 - - - a / realm - jni / build . gradle 
 + + + b / realm - jni / build . gradle 
 @ @ - 1 , 4 + 1 , 9 @ @ 
 + import java . security . MessageDigest 
 + 
 ext . coreVersion = ' 0 . 93 . 0 ' 
 + / / empty or comment out this to disable hash checking 
 + ext . coreSha256Hash = ' 90044150ff6019a31c044306becccc513c7394f7486ffc8ba4880121c1ef46fa ' 
 + ext . forceDownloadCore = false 
 ext . clang = false / / gcc is default for the NDK . It also produces smaller binaries 
 
 def commonCflags = [ ' - std = c + + 11 ' , ' - ffunction - sections ' , ' - fdata - sections ' , ' - flto ' ] 
 @ @ - 59 , 20 + 64 , 26 @ @ def targets = [ 
 
 buildscript { 
 repositories { 
 - mavenCentral ( ) 
 + jcenter ( ) 
 } 
 dependencies { 
 - classpath ' de . undercouch : gradle - download - task : 1 . 0 ' 
 + classpath ' de . undercouch : gradle - download - task : 2 . 0 . 0 ' 
 } 
 } 
 
 - apply plugin : ' download - task ' 
 + apply plugin : ' de . undercouch . download ' 
 
 Properties localProperties = new Properties ( ) 
 localProperties . load ( new FileInputStream ( " $ { projectDir } / . . / local . properties " ) ) 
 localProperties . entrySet ( ) . each ( ) { entry - > 
 project . ext [ entry . getKey ( ) ] = localProperties . setProperty ( entry . getKey ( ) , entry . getValue ( ) ) 
 } 
 + if ( project . clang instanceof String ) { 
 + ext . clang = Boolean . parseBoolean ( project . clang ) 
 + } 
 + if ( project . forceDownloadCore instanceof String ) { 
 + ext . forceDownloadCore = Boolean . parseBoolean ( project . forceDownloadCore ) 
 + } 
 
 task checkProperties ( group : ' check ' , description : ' Check the user provided gradle . properties ' ) < < { 
 if ( ! project . ext [ ' ndk . dir ' ] ) { 
 @ @ - 89 , 18 + 100 , 91 @ @ task checkProperties ( group : ' check ' , description : ' Check the user provided gradl 
 } 
 } 
 
 - / / TODO : Split this task into smaller subtasks 
 + ext . coreArchiveFile = project . file ( " . . / core - android - $ { project . coreVersion } . tar . gz " ) 
 + ext . coreDir = new File ( buildDir , " core - $ { project . coreVersion } " ) 
 + 
 + def coreDownloaded = false 
 + 
 task downloadCore ( group : ' build setup ' , description : ' Download the latest version of realm core ' , dependsOn : checkProperties ) { 
 - outputs . dir " . . / core - $ { project . coreVersion } " 
 + def isHashCheckingEnabled = { 
 + return project . hasProperty ( ' coreSha256Hash ' ) & & ! project . coreSha256Hash . empty 
 + } 
 + 
 + def calcSha256Hash = { File targetFile - > 
 + MessageDigest sha = MessageDigest . getInstance ( " SHA - 256 " ) ; 
 + Formatter hexHash = new Formatter ( ) 
 + sha . digest ( targetFile . bytes ) . each { b - > hexHash . format ( ' % 02x ' , b ) } 
 + return hexHash . toString ( ) 
 + } 
 + 
 + def shouldDownloadCore = { 
 + if ( ! project . coreArchiveFile . exists ( ) ) { 
 + return true 
 + } 
 + if ( project . forceDownloadCore ) { 
 + return true ; 
 + } 
 + if ( ! isHashCheckingEnabled ( ) ) { 
 + println " Skipping hash check ( empty \ ' coreSha256Hash \ ' ) . " 
 + return false 
 + } 
 + 
 + def calculatedHash = calcSha256Hash ( project . coreArchiveFile ) 
 + if ( project . coreSha256Hash . equalsIgnoreCase ( calculatedHash ) ) { 
 + return false 
 + } 
 + 
 + println " Existing archive hash mismatch ( Expected : $ { project . coreSha256Hash . toLowerCase ( ) } " + 
 + " but got $ { calculatedHash . toLowerCase ( ) } ) . Download new version . " 
 + return true 
 + } 
 + 
 doLast { 
 - download { 
 - src " http : / / static . realm . io / downloads / core / realm - core - android - $ { project . coreVersion } . tar . gz " 
 - dest new File ( buildDir , " core - android - $ { project . coreVersion } . tar . gz " ) 
 - onlyIfNewer true 
 + if ( shouldDownloadCore ( ) ) { 
 + download { 
 + src " http : / / static . realm . io / downloads / core / realm - core - android - $ { project . coreVersion } . tar . gz " 
 + dest project . coreArchiveFile 
 + onlyIfNewer false 
 + } 
 + coreDownloaded = true 
 + 
 + if ( isHashCheckingEnabled ( ) ) { 
 + def calculatedHash = calcSha256Hash ( project . coreArchiveFile ) 
 + if ( ! project . coreSha256Hash . equalsIgnoreCase ( calculatedHash ) ) { 
 + throw new GradleException ( " Invalid checksum for file ' " + 
 + " $ { project . coreArchiveFile . getName ( ) } ' . Expected " + 
 + " $ { project . coreSha256Hash . toLowerCase ( ) } but got " + 
 + " $ { calculatedHash . toLowerCase ( ) } . " ) ; 
 + } 
 + } else { 
 + println ' Skipping hash check ( empty \ ' coreSha256Hash \ ' ) . ' 
 + } 
 + } 
 + } 
 + } 
 + 
 + task deployCore ( group : ' build setup ' , description : ' Deploy the latest version of realm core ' ) { 
 + dependsOn { downloadCore } 
 + 
 + outputs . upToDateWhen { 
 + if ( coreDownloaded ) { 
 + return false 
 + } 
 + 
 + return project . coreDir . exists ( ) 
 + } 
 + 
 + doLast { 
 + exec { 
 + commandLine = [ 
 + ' rm ' , 
 + ' - rf ' , 
 + project . coreDir . getAbsolutePath ( ) 
 + ] 
 } 
 copy { 
 - from tarTree ( new File ( buildDir , " core - android - $ { project . coreVersion } . tar . gz " ) ) 
 - into " . . / core - $ { project . coreVersion } " 
 + from tarTree ( project . coreArchiveFile ) 
 + into project . coreDir 
 } 
 for ( target in targets ) { 
 exec { 
 @ @ - 113 , 13 + 197 , 6 @ @ task downloadCore ( group : ' build setup ' , description : ' Download the latest versio 
 ] 
 } 
 } 
 - exec { 
 - commandLine = [ 
 - ' rm ' , 
 - ' - rf ' , 
 - " $ { projectDir } / build / * " 
 - ] 
 - } 
 } 
 } 
 
 @ @ - 143 , 7 + 220 , 7 @ @ targets . each { target - > 
 task " buildAndroidJni $ { target . name . capitalize ( ) } " ( type : Exec ) { 
 group ' build ' 
 description " Build the Android JNI shared library for the $ { target . name . capitalize ( ) } platform " 
 - dependsOn downloadCore 
 + dependsOn deployCore 
 dependsOn " generateNdkToolchain $ { target . toolchain . name . capitalize ( ) } " 
 environment PATH : " $ { buildDir } / standalone - toolchains / $ { target . toolchain . name } / bin : $ { System . env . PATH } " 
 environment CC : " $ { target . toolchain . commandPrefix } - $ { clang ? ' clang ' : ' gcc ' } " 
 @ @ - 153 , 10 + 230 , 10 @ @ targets . each { target - > 
 ' make ' , 
 ' - C ' , " $ { projectDir } / src " , 
 " CC _ IS = $ { clang ? ' clang ' : ' gcc ' } " , 
 - " REALM _ CFLAGS = - Wno - variadic - macros - DREALM _ HAVE _ CONFIG - DPIC - I $ { projectDir } / . . / core - $ { project . coreVersion } / include " , 
 + " REALM _ CFLAGS = - Wno - variadic - macros - DREALM _ HAVE _ CONFIG - DPIC - I $ { project . coreDir } / include " , 
 " CFLAGS _ ARCH = $ { ( commonCflags + target . cflags ) . join ( ' ' ) } " , 
 " BASE _ DENOM = $ { target . name } " , 
 - " REALM _ LDFLAGS = - lrealm - android - $ { target . name } - lstdc + + - lsupc + + - llog - L $ { projectDir } / . . / core - $ { project . coreVersion } - Wl , - - gc - sections - flto " , 
 + " REALM _ LDFLAGS = - lrealm - android - $ { target . name } - lstdc + + - lsupc + + - llog - L $ { project . coreDir } - Wl , - - gc - sections - flto " , 
 ' LIB _ SUFFIX _ SHARED = . so ' , 
 " librealm - jni - $ { target . name } . so " 
 ]
