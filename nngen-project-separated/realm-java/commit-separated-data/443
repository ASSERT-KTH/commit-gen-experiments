BLEU SCORE: 0.7577395672414201

TEST MSG: Revert " Add support for SyncCredentials . accessToken . Updated integration tests . "
GENERATED MSG: Add support for SyncCredentials . accessToken . Updated integration tests .

TEST DIFF (one line): diff - - git a / README . md b / README . md <nl> index 268af42 . . ee52154 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 220 , 9 + 220 , 6 @ @ To run a testing server locally : <nl> 	 . / gradlew connectedObjectServerDebugAndroidTest <nl> 	 ` ` ` <nl> <nl> - Note that if using VirtualBox ( Genymotion ) , the network needs to be bridged for the tests to work . <nl> - This is done in ` VirtualBox > Network ` . Set " Adapter 2 " to " Bridged Adapter " . <nl> - <nl> These tests may take as much as half an hour to complete . <nl> <nl> # # Contributing <nl> diff - - git a / realm / realm - library / src / androidTest / AndroidManifest . xml b / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> index d9e252d . . c7741a6 100644 <nl> - - - a / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> + + + b / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> @ @ - 21 , 23 + 21 , 6 @ @ <nl> android : exported = " true " <nl> android : process = " : remote " > <nl> < / service > <nl> - <nl> - < ! - - <nl> - FIXME : Manifest merger doesn ' t seem to work correctly with test flavours . <nl> - Figure out why . For now place services here <nl> - - - > <nl> - < service <nl> - android : name = " io . realm . objectserver . service . SendOneCommit " <nl> - android : enabled = " true " <nl> - android : exported = " true " <nl> - android : process = " : remote " > <nl> - < / service > <nl> - < service <nl> - android : name = " io . realm . objectserver . service . SendsALot " <nl> - android : enabled = " true " <nl> - android : exported = " true " <nl> - android : process = " : remote " > <nl> - < / service > <nl> < / application > <nl> <nl> < / manifest > <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> index c31ea68 . . a587ca1 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import org . junit . Before ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> - import org . mockito . Mockito ; <nl> <nl> import java . net . MalformedURLException ; <nl> import java . net . URI ; <nl> @ @ - 32 , 7 + 31 , 6 @ @ import java . net . URL ; <nl> import java . util . Collection ; <nl> <nl> import io . realm . android . SharedPrefsUserStore ; <nl> - import io . realm . internal . network . AuthenticationServer ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . util . SyncTestUtils ; <nl> <nl> @ @ - 41 , 8 + 39 , 6 @ @ import static junit . framework . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> - import static org . mockito . Matchers . any ; <nl> - import static org . mockito . Mockito . when ; <nl> <nl> @ RunWith ( AndroidJUnit4 . class ) <nl> public class SyncUserTests { <nl> @ @ - 155 , 19 + 151 , 4 @ @ public class SyncUserTests { <nl> assertTrue ( str ! = null & & ! str . isEmpty ( ) ) ; <nl> } <nl> <nl> - / / Test that a login an access token logs the user in directly without touching the network <nl> - @ Test <nl> - public void login _ withAccessToken ( ) { <nl> - AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; <nl> - when ( authServer . loginUser ( any ( SyncCredentials . class ) , any ( URL . class ) ) ) . thenThrow ( new AssertionError ( " Server contacted . " ) ) ; <nl> - AuthenticationServer originalServer = SyncManager . getAuthServer ( ) ; <nl> - SyncManager . setAuthServerImpl ( authServer ) ; <nl> - try { <nl> - SyncCredentials credentials = SyncCredentials . accessToken ( " foo " , " bar " ) ; <nl> - SyncUser user = SyncUser . login ( credentials , " http : / / ros . realm . io / auth " ) ; <nl> - assertTrue ( user . isValid ( ) ) ; <nl> - } finally { <nl> - SyncManager . setAuthServerImpl ( originalServer ) ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java <nl> index b9dcbc4 . . 827f126 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java <nl> @ @ - 151 , 23 + 151 , 6 @ @ public class SyncCredentials { <nl> return new SyncCredentials ( identityProvider , userIdentifier , userInfo ) ; <nl> } <nl> <nl> - / * * <nl> - * Creates credentials from an existing access token . Since an access token is the proof that a user already <nl> - * has logged in . Credentials created this way are automatically assumed to have successfully logged in . <nl> - * This means that providing this credential to { @ link SyncUser # login ( SyncCredentials , String ) } will always <nl> - * succeed , but accessing any Realm after might fail if the token is no longer valid . <nl> - * <nl> - * @ param accessToken Users access token . <nl> - * @ param identifier User identifier . <nl> - * @ return a set of credentials that can be used to log into the Object Server using <nl> - * { @ link SyncUser # loginAsync ( SyncCredentials , String , SyncUser . Callback ) } <nl> - * / <nl> - public static SyncCredentials accessToken ( String accessToken , String identifier ) { <nl> - HashMap < String , Object > userInfo = new HashMap < String , Object > ( ) ; <nl> - userInfo . put ( " _ token " , accessToken ) ; <nl> - return new SyncCredentials ( IdentityProvider . ACCESS _ TOKEN , identifier , userInfo ) ; <nl> - } <nl> - <nl> private SyncCredentials ( String identityProvider , String token , Map < String , Object > userInfo ) { <nl> this . identityProvider = identityProvider ; <nl> this . userIdentifier = token ; <nl> @ @ - 208 , 14 + 191 , 6 @ @ public class SyncCredentials { <nl> * verifying that a given credential is valid . <nl> * / <nl> public static final class IdentityProvider { <nl> - <nl> - / * * <nl> - * The provided identify is an already registered user ( represented by the access token ) . Logging in with this <nl> - * type of identity will happen purely on the device without contacting the Realm Object Server . Acquiring <nl> - * access to individual Realms will still require talking to the Object Server . <nl> - * / <nl> - public static final String ACCESS _ TOKEN = " _ access _ token " ; <nl> - <nl> / * * <nl> * Any credentials verified by the debug identity provider will always be considered valid . <nl> * It is only available if configured on the Object Server , and it is disabled by default . <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> index 379c3dd . . 65130e7 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> @ @ - 31 , 7 + 31 , 6 @ @ import java . net . URL ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> - import java . util . Objects ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . ThreadPoolExecutor ; <nl> <nl> @ @ - 151 , 20 + 150 , 10 @ @ public class SyncUser { <nl> throw new IllegalArgumentException ( " Invalid URL " + authenticationUrl + " . " , e ) ; <nl> } <nl> <nl> + final AuthenticationServer server = SyncManager . getAuthServer ( ) ; <nl> ObjectServerError error ; <nl> try { <nl> - AuthenticateResponse result ; <nl> - if ( credentials . getIdentityProvider ( ) . equals ( SyncCredentials . IdentityProvider . ACCESS _ TOKEN ) ) { <nl> - / / Credentials using ACCESS _ TOKEN as IdentityProvider are optimistically assumed to be valid already <nl> - / / So log them in directly without contacting the authentication server . This is done by mirroring <nl> - / / the JSON response expected from the server . <nl> - String userIdentifier = credentials . getUserIdentifier ( ) ; <nl> - String token = ( String ) credentials . getUserInfo ( ) . get ( " _ token " ) ; <nl> - result = AuthenticateResponse . createValidResponseWithUser ( userIdentifier , token ) ; <nl> - } else { <nl> - final AuthenticationServer server = SyncManager . getAuthServer ( ) ; <nl> - result = server . loginUser ( credentials , authUrl ) ; <nl> - } <nl> + AuthenticateResponse result = server . loginUser ( credentials , authUrl ) ; <nl> if ( result . isValid ( ) ) { <nl> ObjectServerUser syncUser = new ObjectServerUser ( result . getRefreshToken ( ) , authUrl ) ; <nl> SyncUser user = new SyncUser ( syncUser ) ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> index 9408a55 . . 75e31a0 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> @ @ - 75 , 24 + 75 , 6 @ @ public class AuthenticateResponse extends AuthServerResponse { <nl> } <nl> <nl> / * * <nl> - * Helper method for creating a valid user login response . The user returned will be assumed to have all permissions <nl> - * as doesn ' t expire . <nl> - * <nl> - * @ param identifier User identifier . <nl> - * @ param token Users refresh token . <nl> - * @ return Response <nl> - * / <nl> - public static AuthenticateResponse createValidResponseWithUser ( String identifier , String token ) { <nl> - try { <nl> - JSONObject response = new JSONObject ( ) ; <nl> - response . put ( JSON _ FIELD _ REFRESH _ TOKEN , new Token ( token , identifier , null , Long . MAX _ VALUE , Token . Permission . ALL ) . toJson ( ) ) ; <nl> - return new AuthenticateResponse ( response . toString ( ) ) ; <nl> - } catch ( JSONException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> * Creates an unsuccessful authentication response . This should only happen in case of network or I / O related <nl> * issues . <nl> * <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java <nl> index 3ae10a2 . . 78f0acf 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java <nl> @ @ - 151 , 7 + 151 , 5 @ @ public class Token { <nl> DOWNLOAD , <nl> REFRESH , <nl> MANAGE ; <nl> - <nl> - public static final Permission [ ] ALL = { UPLOAD , DOWNLOAD , REFRESH , MANAGE } ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> index a38b774 . . ccf997a 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> @ @ - 9 , 8 + 9 , 6 @ @ import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> - import io . realm . RealmConfiguration ; <nl> - import io . realm . SyncConfiguration ; <nl> import io . realm . SyncCredentials ; <nl> import io . realm . ErrorCode ; <nl> import io . realm . ObjectServerError ; <nl> @ @ - 68 , 21 + 66 , 4 @ @ public class AuthTests { <nl> } <nl> } ) ; <nl> } <nl> - <nl> - @ Test <nl> - @ RunTestInLooperThread <nl> - public void login _ withAccessToken ( ) { <nl> - SyncCredentials credentials = SyncCredentials . accessToken ( Constants . USER _ TOKEN , " access - token - user " ) ; <nl> - SyncUser . loginAsync ( credentials , Constants . AUTH _ URL , new SyncUser . Callback ( ) { <nl> - @ Override <nl> - public void onSuccess ( SyncUser user ) { <nl> - SyncConfiguration config = new SyncConfiguration . Builder ( user , Constants . SYNC _ SERVER _ URL ) . build ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void onError ( ObjectServerError error ) { <nl> - fail ( " Error thrown : " + error ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java <nl> index 73df932 . . 6e465f5 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import android . support . test . runner . AndroidJUnit4 ; <nl> <nl> import org . junit . AfterClass ; <nl> import org . junit . BeforeClass ; <nl> - import org . junit . Ignore ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> @ @ - 33 , 20 + 32 , 16 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> - import io . realm . ObjectServerError ; <nl> import io . realm . Realm ; <nl> import io . realm . RealmChangeListener ; <nl> import io . realm . RealmResults ; <nl> import io . realm . SyncConfiguration ; <nl> - import io . realm . SyncSession ; <nl> - import io . realm . SyncUser ; <nl> import io . realm . objectserver . model . ProcessInfo ; <nl> import io . realm . objectserver . model . TestObject ; <nl> import io . realm . objectserver . service . SendOneCommit ; <nl> import io . realm . objectserver . service . SendsALot ; <nl> import io . realm . objectserver . utils . Constants ; <nl> import io . realm . objectserver . utils . HttpUtils ; <nl> - import io . realm . objectserver . utils . UserFactory ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 55 , 7 + 50 , 6 @ @ import static org . junit . Assert . fail ; <nl> public class ProcessCommitTests { <nl> @ BeforeClass <nl> public static void setUp ( ) throws Exception { <nl> - Realm . init ( InstrumentationRegistry . getContext ( ) ) ; <nl> HttpUtils . startSyncServer ( ) ; <nl> } <nl> <nl> @ @ - 64 , 10 + 58 , 15 @ @ public class ProcessCommitTests { <nl> HttpUtils . stopSyncServer ( ) ; <nl> } <nl> <nl> - / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating <nl> - / / a Sync Client , but it needs to be investigated . <nl> + / / FIXME : At least need one method in the test class <nl> + @ Test <nl> + public void dummy ( ) { <nl> + <nl> + } <nl> + <nl> + / / FIXME : Disable for now . <nl> + / * <nl> @ Test <nl> - @ Ignore <nl> public void expectServerCommit ( ) throws Throwable { <nl> final Throwable [ ] exception = new Throwable [ 1 ] ; <nl> final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; <nl> @ @ - 77 , 23 + 76 , 18 @ @ public class ProcessCommitTests { <nl> public void run ( ) { <nl> try { <nl> Looper . prepare ( ) ; <nl> - Context targetContext = InstrumentationRegistry . getTargetContext ( ) ; <nl> + Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; <nl> <nl> - SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> - String realmUrl = Constants . SYNC _ SERVER _ URL ; <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( ) <nl> . name ( SendOneCommit . class . getSimpleName ( ) ) <nl> - . errorHandler ( new SyncSession . ErrorHandler ( ) { <nl> - @ Override <nl> - public void onError ( SyncSession session , ObjectServerError error ) { <nl> - fail ( " Sync failure : " + error ) ; <nl> - } <nl> - } ) <nl> + . serverUrl ( Constants . SYNC _ SERVER _ URL ) <nl> + . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests <nl> final Realm realm = Realm . getInstance ( syncConfig ) ; <nl> Intent intent = new Intent ( targetContext , SendOneCommit . class ) ; <nl> targetContext . startService ( intent ) ; <nl> + <nl> final RealmResults < ProcessInfo > all = realm . where ( ProcessInfo . class ) . findAll ( ) ; <nl> all . addChangeListener ( new RealmChangeListener < RealmResults < ProcessInfo > > ( ) { <nl> @ Override <nl> @ @ - 119 , 15 + 113 , 14 @ @ public class ProcessCommitTests { <nl> fail ( " Test timed out " ) ; <nl> } <nl> } <nl> + * / <nl> <nl> - / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating <nl> - / / a Sync Client , but it needs to be investigated . <nl> / / TODO send string from service and match <nl> / / replicate integration tests from Cocoa <nl> / / add gradle task to start the sh script automatically ( create pid file , = = > run or kill existing process <nl> / / check the requirement for the issue again <nl> + / * <nl> @ Test <nl> - @ Ignore <nl> public void expectALot ( ) throws Throwable { <nl> final Throwable [ ] exception = new Throwable [ 1 ] ; <nl> final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; <nl> @ @ - 139 , 16 + 132 , 10 @ @ public class ProcessCommitTests { <nl> Looper . prepare ( ) ; <nl> Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; <nl> <nl> - SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> - String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( targetContext ) <nl> . name ( SendsALot . class . getSimpleName ( ) ) <nl> - . errorHandler ( new SyncSession . ErrorHandler ( ) { <nl> - @ Override <nl> - public void onError ( SyncSession session , ObjectServerError error ) { <nl> - fail ( " Sync failure : " + error ) ; <nl> - } <nl> - } ) <nl> + . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) <nl> + . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests <nl> final Realm realm = Realm . getInstance ( syncConfig ) ; <nl> @ @ - 184 , 4 + 171 , 5 @ @ public class ProcessCommitTests { <nl> fail ( " Test timed out " ) ; <nl> } <nl> } <nl> + * / <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java <nl> index 2620be8 . . 26c4f89 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java <nl> @ @ - 20 , 13 + 20 , 6 @ @ import android . app . Service ; <nl> import android . content . Intent ; <nl> import android . os . IBinder ; <nl> <nl> - import io . realm . Realm ; <nl> - import io . realm . SyncConfiguration ; <nl> - import io . realm . SyncUser ; <nl> - import io . realm . objectserver . model . ProcessInfo ; <nl> - import io . realm . objectserver . utils . Constants ; <nl> - import io . realm . objectserver . utils . UserFactory ; <nl> - <nl> / * * <nl> * Open a sync Realm on a different process , then send one commit . <nl> * / <nl> @ @ - 35 , 11 + 28 , 12 @ @ public class SendOneCommit extends Service { <nl> @ Override <nl> public void onCreate ( ) { <nl> super . onCreate ( ) ; <nl> - Realm . init ( getApplicationContext ( ) ) ; <nl> - SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> - String realmUrl = Constants . SYNC _ SERVER _ URL ; <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> + / / FIXME : Disable for now <nl> + / * <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( this ) <nl> . name ( SendOneCommit . class . getSimpleName ( ) ) <nl> + . serverUrl ( Constants . SYNC _ SERVER _ URL ) <nl> + . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; <nl> Realm realm = Realm . getInstance ( syncConfig ) ; <nl> @ @ - 52 , 8 + 46 , 10 @ @ public class SendOneCommit extends Service { <nl> realm . commitTransaction ( ) ; <nl> <nl> realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset <nl> + * / <nl> } <nl> <nl> + <nl> @ Override <nl> public IBinder onBind ( Intent intent ) { <nl> return null ; <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java <nl> index 27df640 . . 2bcdd9d 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java <nl> @ @ - 20 , 13 + 20 , 6 @ @ import android . app . Service ; <nl> import android . content . Intent ; <nl> import android . os . IBinder ; <nl> <nl> - import io . realm . Realm ; <nl> - import io . realm . SyncConfiguration ; <nl> - import io . realm . SyncUser ; <nl> - import io . realm . objectserver . model . TestObject ; <nl> - import io . realm . objectserver . utils . Constants ; <nl> - import io . realm . objectserver . utils . UserFactory ; <nl> - <nl> / * * <nl> * Open a sync Realm on a different process , then send one commit . <nl> * / <nl> @ @ - 35 , 11 + 28 , 13 @ @ public class SendsALot extends Service { <nl> @ Override <nl> public void onCreate ( ) { <nl> super . onCreate ( ) ; <nl> - Realm . init ( getApplicationContext ( ) ) ; <nl> - SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> - String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> + / / FIXME : Disable for now . <nl> + / * <nl> + User user = UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ; <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user ) <nl> . name ( SendsALot . class . getSimpleName ( ) ) <nl> + . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) <nl> + . user ( ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; <nl> Realm realm = Realm . getInstance ( syncConfig ) ; <nl> @ @ - 54 , 6 + 49 , 7 @ @ public class SendsALot extends Service { <nl> realm . commitTransaction ( ) ; <nl> <nl> realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset <nl> + * / <nl> } <nl> <nl> <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java <nl> index 1fa4fb9 . . 9b15ae1 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java <nl> @ @ - 16 , 17 + 16 , 12 @ @ <nl> <nl> package io . realm . objectserver . utils ; <nl> <nl> - import android . support . test . InstrumentationRegistry ; <nl> - <nl> import java . io . IOException ; <nl> <nl> - import io . realm . Realm ; <nl> import io . realm . log . RealmLog ; <nl> import okhttp3 . Headers ; <nl> - import okhttp3 . MediaType ; <nl> import okhttp3 . OkHttpClient ; <nl> import okhttp3 . Request ; <nl> - import okhttp3 . RequestBody ; <nl> import okhttp3 . Response ; <nl> <nl> / * * <nl> @ @ - 34 , 10 + 29 , 7 @ @ import okhttp3 . Response ; <nl> * temp directory & start a sync server on it for each unit test . <nl> * / <nl> public class HttpUtils { <nl> - private final static OkHttpClient client = new OkHttpClient . Builder ( ) <nl> - . retryOnConnectionFailure ( true ) <nl> - . build ( ) ; <nl> - <nl> + private final static OkHttpClient client = new OkHttpClient ( ) ; <nl> / / adb reverse tcp : 8888 tcp : 8888 <nl> / / will forward this query to the host , running the integration test server on 8888 <nl> private final static String START _ SERVER = " http : / / 127 . 0 . 0 . 1 : 8888 / start " ; <nl> @ @ - 68 , 29 + 60 , 20 @ @ public class HttpUtils { <nl> / / Checking the server <nl> private static boolean waitAuthServerReady ( ) throws InterruptedException { <nl> int retryTimes = 50 ; <nl> - <nl> - / / Dummy invalid request , which will trigger a 400 ( BAD REQUEST ) , but indicate the auth <nl> - / / server is responsive <nl> Request request = new Request . Builder ( ) <nl> - . post ( RequestBody . create ( MediaType . parse ( " application / json ; charset = utf - 8 " ) , " " ) ) <nl> - . url ( Constants . AUTH _ URL ) <nl> + . url ( Constants . AUTH _ SERVER _ URL ) <nl> . build ( ) ; <nl> <nl> while ( retryTimes ! = 0 ) { <nl> - Response response = null ; <nl> try { <nl> - response = client . newCall ( request ) . execute ( ) ; <nl> - if ( response . code ( ) = = 400 ) { <nl> + Response response = client . newCall ( request ) . execute ( ) ; <nl> + if ( response . isSuccessful ( ) ) { <nl> return true ; <nl> } <nl> RealmLog . error ( " Error response from auth server : % s " , response . toString ( ) ) ; <nl> } catch ( IOException e ) { <nl> RealmLog . error ( e ) ; <nl> Thread . sleep ( 100 ) ; <nl> - } finally { <nl> - if ( response ! = null ) { <nl> - response . close ( ) ; <nl> - } <nl> } <nl> retryTimes - - ; <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> index 9e6c43d . . 1ebb2d6 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> @ @ - 16 , 13 + 16 , 25 @ @ <nl> <nl> package io . realm . objectserver . utils ; <nl> <nl> - import io . realm . SyncCredentials ; <nl> + import java . net . URI ; <nl> + import java . net . URISyntaxException ; <nl> + <nl> import io . realm . SyncUser ; <nl> + import io . realm . objectserver . utils . Constants ; <nl> <nl> / / Must be in ` io . realm . objectserver ` to work around package protected methods . <nl> public class UserFactory { <nl> - public static SyncUser createDefaultUser ( String authUrl , String accessToken ) { <nl> - SyncCredentials credentials = SyncCredentials . accessToken ( accessToken , " sync - integration - user " ) ; <nl> - return SyncUser . login ( credentials , authUrl ) ; <nl> + / / FIXME : Not working right now . <nl> + / * <nl> + public static User createDefaultUser ( String SERVER _ URL , String USER _ TOKEN ) { <nl> + try { <nl> + User user = User . createLocal ( ) ; <nl> + <nl> + user . addAccessToken ( new URI ( SERVER _ URL ) , USER _ TOKEN ) ; <nl> + return user ; <nl> + } catch ( URISyntaxException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> + * / <nl> } <nl> diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js <nl> index 6ddef03 . . c182652 100755 <nl> - - - a / tools / sync _ test _ server / ros - testing - server . js <nl> + + + b / tools / sync _ test _ server / ros - testing - server . js <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> # ! / usr / bin / env nodejs <nl> <nl> - var winston = require ( ' winston ' ) ; / / logging <nl> + var winston = require ( ' winston ' ) ; / / logging <nl> const temp = require ( ' temp ' ) ; <nl> const spawn = require ( ' child _ process ' ) . spawn ; <nl> var http = require ( ' http ' ) ; <nl> @ @ - 23 , 7 + 23 , 7 @ @ function handleRequest ( request , response ) { <nl> try { <nl> / / log the request on console <nl> winston . log ( request . url ) ; <nl> - / / Dispatch <nl> + / / Disptach <nl> dispatcher . dispatch ( request , response ) ; <nl> } catch ( err ) { <nl> console . log ( err ) ; <nl> diff - - git a / tools / sync _ test _ server / start _ server . sh b / tools / sync _ test _ server / start _ server . sh <nl> index 277bb4b . . 00930f5 100755 <nl> - - - a / tools / sync _ test _ server / start _ server . sh <nl> + + + b / tools / sync _ test _ server / start _ server . sh <nl> @ @ - 9 , 10 + 9 , 9 @ @ TMP _ DIR = $ ( mktemp - d / tmp / sync - test . XXXX ) | | { echo " Failed to mktemp $ TEST _ TEMP _ <nl> <nl> adb reverse tcp : 7800 tcp : 7800 & & \ <nl> adb reverse tcp : 8080 tcp : 8080 & & \ <nl> - adb reverse tcp : 9080 tcp : 9080 & & \ <nl> adb reverse tcp : 8888 tcp : 8888 | | { echo " Failed to reverse adb port . " ; exit 1 ; } <nl> <nl> docker build $ DOCKERFILE _ DIR - - build - arg ROS _ DE _ VERSION = $ ROS _ DE _ VERSION - t sync - test - server | | { echo " Failed to build Docker image . " ; exit 1 ; } <nl> <nl> echo " See log files in $ TMP _ DIR " <nl> - docker run - p 9080 : 9080 - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server <nl> + docker run - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server
NEAREST DIFF (one line): diff - - git a / README . md b / README . md <nl> index ee52154 . . 268af42 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 220 , 6 + 220 , 9 @ @ To run a testing server locally : <nl> 	 . / gradlew connectedObjectServerDebugAndroidTest <nl> 	 ` ` ` <nl> <nl> + Note that if using VirtualBox ( Genymotion ) , the network needs to be bridged for the tests to work . <nl> + This is done in ` VirtualBox > Network ` . Set " Adapter 2 " to " Bridged Adapter " . <nl> + <nl> These tests may take as much as half an hour to complete . <nl> <nl> # # Contributing <nl> diff - - git a / realm / realm - library / src / androidTest / AndroidManifest . xml b / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> index c7741a6 . . d9e252d 100644 <nl> - - - a / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> + + + b / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> @ @ - 21 , 6 + 21 , 23 @ @ <nl> android : exported = " true " <nl> android : process = " : remote " > <nl> < / service > <nl> + <nl> + < ! - - <nl> + FIXME : Manifest merger doesn ' t seem to work correctly with test flavours . <nl> + Figure out why . For now place services here <nl> + - - > <nl> + < service <nl> + android : name = " io . realm . objectserver . service . SendOneCommit " <nl> + android : enabled = " true " <nl> + android : exported = " true " <nl> + android : process = " : remote " > <nl> + < / service > <nl> + < service <nl> + android : name = " io . realm . objectserver . service . SendsALot " <nl> + android : enabled = " true " <nl> + android : exported = " true " <nl> + android : process = " : remote " > <nl> + < / service > <nl> < / application > <nl> <nl> < / manifest > <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> index a587ca1 . . c31ea68 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import org . junit . Before ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> + import org . mockito . Mockito ; <nl> <nl> import java . net . MalformedURLException ; <nl> import java . net . URI ; <nl> @ @ - 31 , 6 + 32 , 7 @ @ import java . net . URL ; <nl> import java . util . Collection ; <nl> <nl> import io . realm . android . SharedPrefsUserStore ; <nl> + import io . realm . internal . network . AuthenticationServer ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . util . SyncTestUtils ; <nl> <nl> @ @ - 39 , 6 + 41 , 8 @ @ import static junit . framework . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> + import static org . mockito . Matchers . any ; <nl> + import static org . mockito . Mockito . when ; <nl> <nl> @ RunWith ( AndroidJUnit4 . class ) <nl> public class SyncUserTests { <nl> @ @ - 151 , 4 + 155 , 19 @ @ public class SyncUserTests { <nl> assertTrue ( str ! = null & & ! str . isEmpty ( ) ) ; <nl> } <nl> <nl> + / / Test that a login an access token logs the user in directly without touching the network <nl> + @ Test <nl> + public void login _ withAccessToken ( ) { <nl> + AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; <nl> + when ( authServer . loginUser ( any ( SyncCredentials . class ) , any ( URL . class ) ) ) . thenThrow ( new AssertionError ( " Server contacted . " ) ) ; <nl> + AuthenticationServer originalServer = SyncManager . getAuthServer ( ) ; <nl> + SyncManager . setAuthServerImpl ( authServer ) ; <nl> + try { <nl> + SyncCredentials credentials = SyncCredentials . accessToken ( " foo " , " bar " ) ; <nl> + SyncUser user = SyncUser . login ( credentials , " http : / / ros . realm . io / auth " ) ; <nl> + assertTrue ( user . isValid ( ) ) ; <nl> + } finally { <nl> + SyncManager . setAuthServerImpl ( originalServer ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java <nl> index 827f126 . . b9dcbc4 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java <nl> @ @ - 151 , 6 + 151 , 23 @ @ public class SyncCredentials { <nl> return new SyncCredentials ( identityProvider , userIdentifier , userInfo ) ; <nl> } <nl> <nl> + / * * <nl> + * Creates credentials from an existing access token . Since an access token is the proof that a user already <nl> + * has logged in . Credentials created this way are automatically assumed to have successfully logged in . <nl> + * This means that providing this credential to { @ link SyncUser # login ( SyncCredentials , String ) } will always <nl> + * succeed , but accessing any Realm after might fail if the token is no longer valid . <nl> + * <nl> + * @ param accessToken Users access token . <nl> + * @ param identifier User identifier . <nl> + * @ return a set of credentials that can be used to log into the Object Server using <nl> + * { @ link SyncUser # loginAsync ( SyncCredentials , String , SyncUser . Callback ) } <nl> + * / <nl> + public static SyncCredentials accessToken ( String accessToken , String identifier ) { <nl> + HashMap < String , Object > userInfo = new HashMap < String , Object > ( ) ; <nl> + userInfo . put ( " _ token " , accessToken ) ; <nl> + return new SyncCredentials ( IdentityProvider . ACCESS _ TOKEN , identifier , userInfo ) ; <nl> + } <nl> + <nl> private SyncCredentials ( String identityProvider , String token , Map < String , Object > userInfo ) { <nl> this . identityProvider = identityProvider ; <nl> this . userIdentifier = token ; <nl> @ @ - 191 , 6 + 208 , 14 @ @ public class SyncCredentials { <nl> * verifying that a given credential is valid . <nl> * / <nl> public static final class IdentityProvider { <nl> + <nl> + / * * <nl> + * The provided identify is an already registered user ( represented by the access token ) . Logging in with this <nl> + * type of identity will happen purely on the device without contacting the Realm Object Server . Acquiring <nl> + * access to individual Realms will still require talking to the Object Server . <nl> + * / <nl> + public static final String ACCESS _ TOKEN = " _ access _ token " ; <nl> + <nl> / * * <nl> * Any credentials verified by the debug identity provider will always be considered valid . <nl> * It is only available if configured on the Object Server , and it is disabled by default . <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> index 65130e7 . . 379c3dd 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . net . URL ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> + import java . util . Objects ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . ThreadPoolExecutor ; <nl> <nl> @ @ - 150 , 10 + 151 , 20 @ @ public class SyncUser { <nl> throw new IllegalArgumentException ( " Invalid URL " + authenticationUrl + " . " , e ) ; <nl> } <nl> <nl> - final AuthenticationServer server = SyncManager . getAuthServer ( ) ; <nl> ObjectServerError error ; <nl> try { <nl> - AuthenticateResponse result = server . loginUser ( credentials , authUrl ) ; <nl> + AuthenticateResponse result ; <nl> + if ( credentials . getIdentityProvider ( ) . equals ( SyncCredentials . IdentityProvider . ACCESS _ TOKEN ) ) { <nl> + / / Credentials using ACCESS _ TOKEN as IdentityProvider are optimistically assumed to be valid already <nl> + / / So log them in directly without contacting the authentication server . This is done by mirroring <nl> + / / the JSON response expected from the server . <nl> + String userIdentifier = credentials . getUserIdentifier ( ) ; <nl> + String token = ( String ) credentials . getUserInfo ( ) . get ( " _ token " ) ; <nl> + result = AuthenticateResponse . createValidResponseWithUser ( userIdentifier , token ) ; <nl> + } else { <nl> + final AuthenticationServer server = SyncManager . getAuthServer ( ) ; <nl> + result = server . loginUser ( credentials , authUrl ) ; <nl> + } <nl> if ( result . isValid ( ) ) { <nl> ObjectServerUser syncUser = new ObjectServerUser ( result . getRefreshToken ( ) , authUrl ) ; <nl> SyncUser user = new SyncUser ( syncUser ) ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> index 75e31a0 . . 9408a55 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> @ @ - 75 , 6 + 75 , 24 @ @ public class AuthenticateResponse extends AuthServerResponse { <nl> } <nl> <nl> / * * <nl> + * Helper method for creating a valid user login response . The user returned will be assumed to have all permissions <nl> + * as doesn ' t expire . <nl> + * <nl> + * @ param identifier User identifier . <nl> + * @ param token Users refresh token . <nl> + * @ return Response <nl> + * / <nl> + public static AuthenticateResponse createValidResponseWithUser ( String identifier , String token ) { <nl> + try { <nl> + JSONObject response = new JSONObject ( ) ; <nl> + response . put ( JSON _ FIELD _ REFRESH _ TOKEN , new Token ( token , identifier , null , Long . MAX _ VALUE , Token . Permission . ALL ) . toJson ( ) ) ; <nl> + return new AuthenticateResponse ( response . toString ( ) ) ; <nl> + } catch ( JSONException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Creates an unsuccessful authentication response . This should only happen in case of network or I / O related <nl> * issues . <nl> * <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java <nl> index 78f0acf . . 3ae10a2 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java <nl> @ @ - 151 , 5 + 151 , 7 @ @ public class Token { <nl> DOWNLOAD , <nl> REFRESH , <nl> MANAGE ; <nl> + <nl> + public static final Permission [ ] ALL = { UPLOAD , DOWNLOAD , REFRESH , MANAGE } ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> index ccf997a . . a38b774 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> @ @ - 9 , 6 + 9 , 8 @ @ import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . SyncConfiguration ; <nl> import io . realm . SyncCredentials ; <nl> import io . realm . ErrorCode ; <nl> import io . realm . ObjectServerError ; <nl> @ @ - 66 , 4 + 68 , 21 @ @ public class AuthTests { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void login _ withAccessToken ( ) { <nl> + SyncCredentials credentials = SyncCredentials . accessToken ( Constants . USER _ TOKEN , " access - token - user " ) ; <nl> + SyncUser . loginAsync ( credentials , Constants . AUTH _ URL , new SyncUser . Callback ( ) { <nl> + @ Override <nl> + public void onSuccess ( SyncUser user ) { <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , Constants . SYNC _ SERVER _ URL ) . build ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onError ( ObjectServerError error ) { <nl> + fail ( " Error thrown : " + error ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java <nl> index 6e465f5 . . 73df932 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import android . support . test . runner . AndroidJUnit4 ; <nl> <nl> import org . junit . AfterClass ; <nl> import org . junit . BeforeClass ; <nl> + import org . junit . Ignore ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> @ @ - 32 , 16 + 33 , 20 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import io . realm . ObjectServerError ; <nl> import io . realm . Realm ; <nl> import io . realm . RealmChangeListener ; <nl> import io . realm . RealmResults ; <nl> import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncSession ; <nl> + import io . realm . SyncUser ; <nl> import io . realm . objectserver . model . ProcessInfo ; <nl> import io . realm . objectserver . model . TestObject ; <nl> import io . realm . objectserver . service . SendOneCommit ; <nl> import io . realm . objectserver . service . SendsALot ; <nl> import io . realm . objectserver . utils . Constants ; <nl> import io . realm . objectserver . utils . HttpUtils ; <nl> + import io . realm . objectserver . utils . UserFactory ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 50 , 6 + 55 , 7 @ @ import static org . junit . Assert . fail ; <nl> public class ProcessCommitTests { <nl> @ BeforeClass <nl> public static void setUp ( ) throws Exception { <nl> + Realm . init ( InstrumentationRegistry . getContext ( ) ) ; <nl> HttpUtils . startSyncServer ( ) ; <nl> } <nl> <nl> @ @ - 58 , 15 + 64 , 10 @ @ public class ProcessCommitTests { <nl> HttpUtils . stopSyncServer ( ) ; <nl> } <nl> <nl> - / / FIXME : At least need one method in the test class <nl> - @ Test <nl> - public void dummy ( ) { <nl> - <nl> - } <nl> - <nl> - / / FIXME : Disable for now . <nl> - / * <nl> + / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating <nl> + / / a Sync Client , but it needs to be investigated . <nl> @ Test <nl> + @ Ignore <nl> public void expectServerCommit ( ) throws Throwable { <nl> final Throwable [ ] exception = new Throwable [ 1 ] ; <nl> final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; <nl> @ @ - 76 , 18 + 77 , 23 @ @ public class ProcessCommitTests { <nl> public void run ( ) { <nl> try { <nl> Looper . prepare ( ) ; <nl> - Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; <nl> + Context targetContext = InstrumentationRegistry . getTargetContext ( ) ; <nl> <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( ) <nl> + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> + String realmUrl = Constants . SYNC _ SERVER _ URL ; <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> . name ( SendOneCommit . class . getSimpleName ( ) ) <nl> - . serverUrl ( Constants . SYNC _ SERVER _ URL ) <nl> - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) <nl> + . errorHandler ( new SyncSession . ErrorHandler ( ) { <nl> + @ Override <nl> + public void onError ( SyncSession session , ObjectServerError error ) { <nl> + fail ( " Sync failure : " + error ) ; <nl> + } <nl> + } ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests <nl> final Realm realm = Realm . getInstance ( syncConfig ) ; <nl> Intent intent = new Intent ( targetContext , SendOneCommit . class ) ; <nl> targetContext . startService ( intent ) ; <nl> - <nl> final RealmResults < ProcessInfo > all = realm . where ( ProcessInfo . class ) . findAll ( ) ; <nl> all . addChangeListener ( new RealmChangeListener < RealmResults < ProcessInfo > > ( ) { <nl> @ Override <nl> @ @ - 113 , 14 + 119 , 15 @ @ public class ProcessCommitTests { <nl> fail ( " Test timed out " ) ; <nl> } <nl> } <nl> - * / <nl> <nl> + / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating <nl> + / / a Sync Client , but it needs to be investigated . <nl> / / TODO send string from service and match <nl> / / replicate integration tests from Cocoa <nl> / / add gradle task to start the sh script automatically ( create pid file , = = > run or kill existing process <nl> / / check the requirement for the issue again <nl> - / * <nl> @ Test <nl> + @ Ignore <nl> public void expectALot ( ) throws Throwable { <nl> final Throwable [ ] exception = new Throwable [ 1 ] ; <nl> final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; <nl> @ @ - 132 , 10 + 139 , 16 @ @ public class ProcessCommitTests { <nl> Looper . prepare ( ) ; <nl> Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; <nl> <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( targetContext ) <nl> + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> + String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> . name ( SendsALot . class . getSimpleName ( ) ) <nl> - . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) <nl> - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ) <nl> + . errorHandler ( new SyncSession . ErrorHandler ( ) { <nl> + @ Override <nl> + public void onError ( SyncSession session , ObjectServerError error ) { <nl> + fail ( " Sync failure : " + error ) ; <nl> + } <nl> + } ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests <nl> final Realm realm = Realm . getInstance ( syncConfig ) ; <nl> @ @ - 171 , 5 + 184 , 4 @ @ public class ProcessCommitTests { <nl> fail ( " Test timed out " ) ; <nl> } <nl> } <nl> - * / <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java <nl> index 26c4f89 . . 2620be8 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java <nl> @ @ - 20 , 6 + 20 , 13 @ @ import android . app . Service ; <nl> import android . content . Intent ; <nl> import android . os . IBinder ; <nl> <nl> + import io . realm . Realm ; <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncUser ; <nl> + import io . realm . objectserver . model . ProcessInfo ; <nl> + import io . realm . objectserver . utils . Constants ; <nl> + import io . realm . objectserver . utils . UserFactory ; <nl> + <nl> / * * <nl> * Open a sync Realm on a different process , then send one commit . <nl> * / <nl> @ @ - 28 , 12 + 35 , 11 @ @ public class SendOneCommit extends Service { <nl> @ Override <nl> public void onCreate ( ) { <nl> super . onCreate ( ) ; <nl> - / / FIXME : Disable for now <nl> - / * <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( this ) <nl> + Realm . init ( getApplicationContext ( ) ) ; <nl> + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> + String realmUrl = Constants . SYNC _ SERVER _ URL ; <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> . name ( SendOneCommit . class . getSimpleName ( ) ) <nl> - . serverUrl ( Constants . SYNC _ SERVER _ URL ) <nl> - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; <nl> Realm realm = Realm . getInstance ( syncConfig ) ; <nl> @ @ - 46 , 10 + 52 , 8 @ @ public class SendOneCommit extends Service { <nl> realm . commitTransaction ( ) ; <nl> <nl> realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset <nl> - * / <nl> } <nl> <nl> - <nl> @ Override <nl> public IBinder onBind ( Intent intent ) { <nl> return null ; <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java <nl> index 2bcdd9d . . 27df640 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java <nl> @ @ - 20 , 6 + 20 , 13 @ @ import android . app . Service ; <nl> import android . content . Intent ; <nl> import android . os . IBinder ; <nl> <nl> + import io . realm . Realm ; <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncUser ; <nl> + import io . realm . objectserver . model . TestObject ; <nl> + import io . realm . objectserver . utils . Constants ; <nl> + import io . realm . objectserver . utils . UserFactory ; <nl> + <nl> / * * <nl> * Open a sync Realm on a different process , then send one commit . <nl> * / <nl> @ @ - 28 , 13 + 35 , 11 @ @ public class SendsALot extends Service { <nl> @ Override <nl> public void onCreate ( ) { <nl> super . onCreate ( ) ; <nl> - / / FIXME : Disable for now . <nl> - / * <nl> - User user = UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ; <nl> - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user ) <nl> + Realm . init ( getApplicationContext ( ) ) ; <nl> + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; <nl> + String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; <nl> + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) <nl> . name ( SendsALot . class . getSimpleName ( ) ) <nl> - . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) <nl> - . user ( ) <nl> . build ( ) ; <nl> Realm . deleteRealm ( syncConfig ) ; <nl> Realm realm = Realm . getInstance ( syncConfig ) ; <nl> @ @ - 49 , 7 + 54 , 6 @ @ public class SendsALot extends Service { <nl> realm . commitTransaction ( ) ; <nl> <nl> realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset <nl> - * / <nl> } <nl> <nl> <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java <nl> index 9b15ae1 . . 1fa4fb9 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java <nl> @ @ - 16 , 12 + 16 , 17 @ @ <nl> <nl> package io . realm . objectserver . utils ; <nl> <nl> + import android . support . test . InstrumentationRegistry ; <nl> + <nl> import java . io . IOException ; <nl> <nl> + import io . realm . Realm ; <nl> import io . realm . log . RealmLog ; <nl> import okhttp3 . Headers ; <nl> + import okhttp3 . MediaType ; <nl> import okhttp3 . OkHttpClient ; <nl> import okhttp3 . Request ; <nl> + import okhttp3 . RequestBody ; <nl> import okhttp3 . Response ; <nl> <nl> / * * <nl> @ @ - 29 , 7 + 34 , 10 @ @ import okhttp3 . Response ; <nl> * temp directory & start a sync server on it for each unit test . <nl> * / <nl> public class HttpUtils { <nl> - private final static OkHttpClient client = new OkHttpClient ( ) ; <nl> + private final static OkHttpClient client = new OkHttpClient . Builder ( ) <nl> + . retryOnConnectionFailure ( true ) <nl> + . build ( ) ; <nl> + <nl> / / adb reverse tcp : 8888 tcp : 8888 <nl> / / will forward this query to the host , running the integration test server on 8888 <nl> private final static String START _ SERVER = " http : / / 127 . 0 . 0 . 1 : 8888 / start " ; <nl> @ @ - 60 , 20 + 68 , 29 @ @ public class HttpUtils { <nl> / / Checking the server <nl> private static boolean waitAuthServerReady ( ) throws InterruptedException { <nl> int retryTimes = 50 ; <nl> + <nl> + / / Dummy invalid request , which will trigger a 400 ( BAD REQUEST ) , but indicate the auth <nl> + / / server is responsive <nl> Request request = new Request . Builder ( ) <nl> - . url ( Constants . AUTH _ SERVER _ URL ) <nl> + . post ( RequestBody . create ( MediaType . parse ( " application / json ; charset = utf - 8 " ) , " " ) ) <nl> + . url ( Constants . AUTH _ URL ) <nl> . build ( ) ; <nl> <nl> while ( retryTimes ! = 0 ) { <nl> + Response response = null ; <nl> try { <nl> - Response response = client . newCall ( request ) . execute ( ) ; <nl> - if ( response . isSuccessful ( ) ) { <nl> + response = client . newCall ( request ) . execute ( ) ; <nl> + if ( response . code ( ) = = 400 ) { <nl> return true ; <nl> } <nl> RealmLog . error ( " Error response from auth server : % s " , response . toString ( ) ) ; <nl> } catch ( IOException e ) { <nl> RealmLog . error ( e ) ; <nl> Thread . sleep ( 100 ) ; <nl> + } finally { <nl> + if ( response ! = null ) { <nl> + response . close ( ) ; <nl> + } <nl> } <nl> retryTimes - - ; <nl> } <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> index 1ebb2d6 . . 9e6c43d 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java <nl> @ @ - 16 , 25 + 16 , 13 @ @ <nl> <nl> package io . realm . objectserver . utils ; <nl> <nl> - import java . net . URI ; <nl> - import java . net . URISyntaxException ; <nl> - <nl> + import io . realm . SyncCredentials ; <nl> import io . realm . SyncUser ; <nl> - import io . realm . objectserver . utils . Constants ; <nl> <nl> / / Must be in ` io . realm . objectserver ` to work around package protected methods . <nl> public class UserFactory { <nl> - / / FIXME : Not working right now . <nl> - / * <nl> - public static User createDefaultUser ( String SERVER _ URL , String USER _ TOKEN ) { <nl> - try { <nl> - User user = User . createLocal ( ) ; <nl> - <nl> - user . addAccessToken ( new URI ( SERVER _ URL ) , USER _ TOKEN ) ; <nl> - return user ; <nl> - } catch ( URISyntaxException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + public static SyncUser createDefaultUser ( String authUrl , String accessToken ) { <nl> + SyncCredentials credentials = SyncCredentials . accessToken ( accessToken , " sync - integration - user " ) ; <nl> + return SyncUser . login ( credentials , authUrl ) ; <nl> } <nl> - * / <nl> } <nl> diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js <nl> index c182652 . . 6ddef03 100755 <nl> - - - a / tools / sync _ test _ server / ros - testing - server . js <nl> + + + b / tools / sync _ test _ server / ros - testing - server . js <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> # ! / usr / bin / env nodejs <nl> <nl> - var winston = require ( ' winston ' ) ; / / logging <nl> + var winston = require ( ' winston ' ) ; / / logging <nl> const temp = require ( ' temp ' ) ; <nl> const spawn = require ( ' child _ process ' ) . spawn ; <nl> var http = require ( ' http ' ) ; <nl> @ @ - 23 , 7 + 23 , 7 @ @ function handleRequest ( request , response ) { <nl> try { <nl> / / log the request on console <nl> winston . log ( request . url ) ; <nl> - / / Disptach <nl> + / / Dispatch <nl> dispatcher . dispatch ( request , response ) ; <nl> } catch ( err ) { <nl> console . log ( err ) ; <nl> diff - - git a / tools / sync _ test _ server / start _ server . sh b / tools / sync _ test _ server / start _ server . sh <nl> index 00930f5 . . 277bb4b 100755 <nl> - - - a / tools / sync _ test _ server / start _ server . sh <nl> + + + b / tools / sync _ test _ server / start _ server . sh <nl> @ @ - 9 , 9 + 9 , 10 @ @ TMP _ DIR = $ ( mktemp - d / tmp / sync - test . XXXX ) | | { echo " Failed to mktemp $ TEST _ TEMP _ <nl> <nl> adb reverse tcp : 7800 tcp : 7800 & & \ <nl> adb reverse tcp : 8080 tcp : 8080 & & \ <nl> + adb reverse tcp : 9080 tcp : 9080 & & \ <nl> adb reverse tcp : 8888 tcp : 8888 | | { echo " Failed to reverse adb port . " ; exit 1 ; } <nl> <nl> docker build $ DOCKERFILE _ DIR - - build - arg ROS _ DE _ VERSION = $ ROS _ DE _ VERSION - t sync - test - server | | { echo " Failed to build Docker image . " ; exit 1 ; } <nl> <nl> echo " See log files in $ TMP _ DIR " <nl> - docker run - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server <nl> + docker run - p 9080 : 9080 - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server

TEST DIFF:
diff - - git a / README . md b / README . md 
 index 268af42 . . ee52154 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 220 , 9 + 220 , 6 @ @ To run a testing server locally : 
 	 . / gradlew connectedObjectServerDebugAndroidTest 
 	 ` ` ` 
 
 - Note that if using VirtualBox ( Genymotion ) , the network needs to be bridged for the tests to work . 
 - This is done in ` VirtualBox > Network ` . Set " Adapter 2 " to " Bridged Adapter " . 
 - 
 These tests may take as much as half an hour to complete . 
 
 # # Contributing 
 diff - - git a / realm / realm - library / src / androidTest / AndroidManifest . xml b / realm / realm - library / src / androidTest / AndroidManifest . xml 
 index d9e252d . . c7741a6 100644 
 - - - a / realm / realm - library / src / androidTest / AndroidManifest . xml 
 + + + b / realm / realm - library / src / androidTest / AndroidManifest . xml 
 @ @ - 21 , 23 + 21 , 6 @ @ 
 android : exported = " true " 
 android : process = " : remote " > 
 < / service > 
 - 
 - < ! - - 
 - FIXME : Manifest merger doesn ' t seem to work correctly with test flavours . 
 - Figure out why . For now place services here 
 - - - > 
 - < service 
 - android : name = " io . realm . objectserver . service . SendOneCommit " 
 - android : enabled = " true " 
 - android : exported = " true " 
 - android : process = " : remote " > 
 - < / service > 
 - < service 
 - android : name = " io . realm . objectserver . service . SendsALot " 
 - android : enabled = " true " 
 - android : exported = " true " 
 - android : process = " : remote " > 
 - < / service > 
 < / application > 
 
 < / manifest > 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 index c31ea68 . . a587ca1 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import org . junit . Before ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 - import org . mockito . Mockito ; 
 
 import java . net . MalformedURLException ; 
 import java . net . URI ; 
 @ @ - 32 , 7 + 31 , 6 @ @ import java . net . URL ; 
 import java . util . Collection ; 
 
 import io . realm . android . SharedPrefsUserStore ; 
 - import io . realm . internal . network . AuthenticationServer ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . util . SyncTestUtils ; 
 
 @ @ - 41 , 8 + 39 , 6 @ @ import static junit . framework . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 - import static org . mockito . Matchers . any ; 
 - import static org . mockito . Mockito . when ; 
 
 @ RunWith ( AndroidJUnit4 . class ) 
 public class SyncUserTests { 
 @ @ - 155 , 19 + 151 , 4 @ @ public class SyncUserTests { 
 assertTrue ( str ! = null & & ! str . isEmpty ( ) ) ; 
 } 
 
 - / / Test that a login an access token logs the user in directly without touching the network 
 - @ Test 
 - public void login _ withAccessToken ( ) { 
 - AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; 
 - when ( authServer . loginUser ( any ( SyncCredentials . class ) , any ( URL . class ) ) ) . thenThrow ( new AssertionError ( " Server contacted . " ) ) ; 
 - AuthenticationServer originalServer = SyncManager . getAuthServer ( ) ; 
 - SyncManager . setAuthServerImpl ( authServer ) ; 
 - try { 
 - SyncCredentials credentials = SyncCredentials . accessToken ( " foo " , " bar " ) ; 
 - SyncUser user = SyncUser . login ( credentials , " http : / / ros . realm . io / auth " ) ; 
 - assertTrue ( user . isValid ( ) ) ; 
 - } finally { 
 - SyncManager . setAuthServerImpl ( originalServer ) ; 
 - } 
 - } 
 } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java 
 index b9dcbc4 . . 827f126 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java 
 @ @ - 151 , 23 + 151 , 6 @ @ public class SyncCredentials { 
 return new SyncCredentials ( identityProvider , userIdentifier , userInfo ) ; 
 } 
 
 - / * * 
 - * Creates credentials from an existing access token . Since an access token is the proof that a user already 
 - * has logged in . Credentials created this way are automatically assumed to have successfully logged in . 
 - * This means that providing this credential to { @ link SyncUser # login ( SyncCredentials , String ) } will always 
 - * succeed , but accessing any Realm after might fail if the token is no longer valid . 
 - * 
 - * @ param accessToken Users access token . 
 - * @ param identifier User identifier . 
 - * @ return a set of credentials that can be used to log into the Object Server using 
 - * { @ link SyncUser # loginAsync ( SyncCredentials , String , SyncUser . Callback ) } 
 - * / 
 - public static SyncCredentials accessToken ( String accessToken , String identifier ) { 
 - HashMap < String , Object > userInfo = new HashMap < String , Object > ( ) ; 
 - userInfo . put ( " _ token " , accessToken ) ; 
 - return new SyncCredentials ( IdentityProvider . ACCESS _ TOKEN , identifier , userInfo ) ; 
 - } 
 - 
 private SyncCredentials ( String identityProvider , String token , Map < String , Object > userInfo ) { 
 this . identityProvider = identityProvider ; 
 this . userIdentifier = token ; 
 @ @ - 208 , 14 + 191 , 6 @ @ public class SyncCredentials { 
 * verifying that a given credential is valid . 
 * / 
 public static final class IdentityProvider { 
 - 
 - / * * 
 - * The provided identify is an already registered user ( represented by the access token ) . Logging in with this 
 - * type of identity will happen purely on the device without contacting the Realm Object Server . Acquiring 
 - * access to individual Realms will still require talking to the Object Server . 
 - * / 
 - public static final String ACCESS _ TOKEN = " _ access _ token " ; 
 - 
 / * * 
 * Any credentials verified by the debug identity provider will always be considered valid . 
 * It is only available if configured on the Object Server , and it is disabled by default . 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 index 379c3dd . . 65130e7 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 @ @ - 31 , 7 + 31 , 6 @ @ import java . net . URL ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . List ; 
 - import java . util . Objects ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . ThreadPoolExecutor ; 
 
 @ @ - 151 , 20 + 150 , 10 @ @ public class SyncUser { 
 throw new IllegalArgumentException ( " Invalid URL " + authenticationUrl + " . " , e ) ; 
 } 
 
 + final AuthenticationServer server = SyncManager . getAuthServer ( ) ; 
 ObjectServerError error ; 
 try { 
 - AuthenticateResponse result ; 
 - if ( credentials . getIdentityProvider ( ) . equals ( SyncCredentials . IdentityProvider . ACCESS _ TOKEN ) ) { 
 - / / Credentials using ACCESS _ TOKEN as IdentityProvider are optimistically assumed to be valid already 
 - / / So log them in directly without contacting the authentication server . This is done by mirroring 
 - / / the JSON response expected from the server . 
 - String userIdentifier = credentials . getUserIdentifier ( ) ; 
 - String token = ( String ) credentials . getUserInfo ( ) . get ( " _ token " ) ; 
 - result = AuthenticateResponse . createValidResponseWithUser ( userIdentifier , token ) ; 
 - } else { 
 - final AuthenticationServer server = SyncManager . getAuthServer ( ) ; 
 - result = server . loginUser ( credentials , authUrl ) ; 
 - } 
 + AuthenticateResponse result = server . loginUser ( credentials , authUrl ) ; 
 if ( result . isValid ( ) ) { 
 ObjectServerUser syncUser = new ObjectServerUser ( result . getRefreshToken ( ) , authUrl ) ; 
 SyncUser user = new SyncUser ( syncUser ) ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 index 9408a55 . . 75e31a0 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 @ @ - 75 , 24 + 75 , 6 @ @ public class AuthenticateResponse extends AuthServerResponse { 
 } 
 
 / * * 
 - * Helper method for creating a valid user login response . The user returned will be assumed to have all permissions 
 - * as doesn ' t expire . 
 - * 
 - * @ param identifier User identifier . 
 - * @ param token Users refresh token . 
 - * @ return Response 
 - * / 
 - public static AuthenticateResponse createValidResponseWithUser ( String identifier , String token ) { 
 - try { 
 - JSONObject response = new JSONObject ( ) ; 
 - response . put ( JSON _ FIELD _ REFRESH _ TOKEN , new Token ( token , identifier , null , Long . MAX _ VALUE , Token . Permission . ALL ) . toJson ( ) ) ; 
 - return new AuthenticateResponse ( response . toString ( ) ) ; 
 - } catch ( JSONException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 - / * * 
 * Creates an unsuccessful authentication response . This should only happen in case of network or I / O related 
 * issues . 
 * 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java 
 index 3ae10a2 . . 78f0acf 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java 
 @ @ - 151 , 7 + 151 , 5 @ @ public class Token { 
 DOWNLOAD , 
 REFRESH , 
 MANAGE ; 
 - 
 - public static final Permission [ ] ALL = { UPLOAD , DOWNLOAD , REFRESH , MANAGE } ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 index a38b774 . . ccf997a 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 @ @ - 9 , 8 + 9 , 6 @ @ import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 - import io . realm . RealmConfiguration ; 
 - import io . realm . SyncConfiguration ; 
 import io . realm . SyncCredentials ; 
 import io . realm . ErrorCode ; 
 import io . realm . ObjectServerError ; 
 @ @ - 68 , 21 + 66 , 4 @ @ public class AuthTests { 
 } 
 } ) ; 
 } 
 - 
 - @ Test 
 - @ RunTestInLooperThread 
 - public void login _ withAccessToken ( ) { 
 - SyncCredentials credentials = SyncCredentials . accessToken ( Constants . USER _ TOKEN , " access - token - user " ) ; 
 - SyncUser . loginAsync ( credentials , Constants . AUTH _ URL , new SyncUser . Callback ( ) { 
 - @ Override 
 - public void onSuccess ( SyncUser user ) { 
 - SyncConfiguration config = new SyncConfiguration . Builder ( user , Constants . SYNC _ SERVER _ URL ) . build ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( ObjectServerError error ) { 
 - fail ( " Error thrown : " + error ) ; 
 - } 
 - } ) ; 
 - } 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java 
 index 73df932 . . 6e465f5 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import android . support . test . runner . AndroidJUnit4 ; 
 
 import org . junit . AfterClass ; 
 import org . junit . BeforeClass ; 
 - import org . junit . Ignore ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 @ @ - 33 , 20 + 32 , 16 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . TimeUnit ; 
 
 - import io . realm . ObjectServerError ; 
 import io . realm . Realm ; 
 import io . realm . RealmChangeListener ; 
 import io . realm . RealmResults ; 
 import io . realm . SyncConfiguration ; 
 - import io . realm . SyncSession ; 
 - import io . realm . SyncUser ; 
 import io . realm . objectserver . model . ProcessInfo ; 
 import io . realm . objectserver . model . TestObject ; 
 import io . realm . objectserver . service . SendOneCommit ; 
 import io . realm . objectserver . service . SendsALot ; 
 import io . realm . objectserver . utils . Constants ; 
 import io . realm . objectserver . utils . HttpUtils ; 
 - import io . realm . objectserver . utils . UserFactory ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 @ @ - 55 , 7 + 50 , 6 @ @ import static org . junit . Assert . fail ; 
 public class ProcessCommitTests { 
 @ BeforeClass 
 public static void setUp ( ) throws Exception { 
 - Realm . init ( InstrumentationRegistry . getContext ( ) ) ; 
 HttpUtils . startSyncServer ( ) ; 
 } 
 
 @ @ - 64 , 10 + 58 , 15 @ @ public class ProcessCommitTests { 
 HttpUtils . stopSyncServer ( ) ; 
 } 
 
 - / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating 
 - / / a Sync Client , but it needs to be investigated . 
 + / / FIXME : At least need one method in the test class 
 + @ Test 
 + public void dummy ( ) { 
 + 
 + } 
 + 
 + / / FIXME : Disable for now . 
 + / * 
 @ Test 
 - @ Ignore 
 public void expectServerCommit ( ) throws Throwable { 
 final Throwable [ ] exception = new Throwable [ 1 ] ; 
 final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; 
 @ @ - 77 , 23 + 76 , 18 @ @ public class ProcessCommitTests { 
 public void run ( ) { 
 try { 
 Looper . prepare ( ) ; 
 - Context targetContext = InstrumentationRegistry . getTargetContext ( ) ; 
 + Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; 
 
 - SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 - String realmUrl = Constants . SYNC _ SERVER _ URL ; 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( ) 
 . name ( SendOneCommit . class . getSimpleName ( ) ) 
 - . errorHandler ( new SyncSession . ErrorHandler ( ) { 
 - @ Override 
 - public void onError ( SyncSession session , ObjectServerError error ) { 
 - fail ( " Sync failure : " + error ) ; 
 - } 
 - } ) 
 + . serverUrl ( Constants . SYNC _ SERVER _ URL ) 
 + . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests 
 final Realm realm = Realm . getInstance ( syncConfig ) ; 
 Intent intent = new Intent ( targetContext , SendOneCommit . class ) ; 
 targetContext . startService ( intent ) ; 
 + 
 final RealmResults < ProcessInfo > all = realm . where ( ProcessInfo . class ) . findAll ( ) ; 
 all . addChangeListener ( new RealmChangeListener < RealmResults < ProcessInfo > > ( ) { 
 @ Override 
 @ @ - 119 , 15 + 113 , 14 @ @ public class ProcessCommitTests { 
 fail ( " Test timed out " ) ; 
 } 
 } 
 + * / 
 
 - / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating 
 - / / a Sync Client , but it needs to be investigated . 
 / / TODO send string from service and match 
 / / replicate integration tests from Cocoa 
 / / add gradle task to start the sh script automatically ( create pid file , = = > run or kill existing process 
 / / check the requirement for the issue again 
 + / * 
 @ Test 
 - @ Ignore 
 public void expectALot ( ) throws Throwable { 
 final Throwable [ ] exception = new Throwable [ 1 ] ; 
 final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; 
 @ @ - 139 , 16 + 132 , 10 @ @ public class ProcessCommitTests { 
 Looper . prepare ( ) ; 
 Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; 
 
 - SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 - String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( targetContext ) 
 . name ( SendsALot . class . getSimpleName ( ) ) 
 - . errorHandler ( new SyncSession . ErrorHandler ( ) { 
 - @ Override 
 - public void onError ( SyncSession session , ObjectServerError error ) { 
 - fail ( " Sync failure : " + error ) ; 
 - } 
 - } ) 
 + . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) 
 + . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests 
 final Realm realm = Realm . getInstance ( syncConfig ) ; 
 @ @ - 184 , 4 + 171 , 5 @ @ public class ProcessCommitTests { 
 fail ( " Test timed out " ) ; 
 } 
 } 
 + * / 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java 
 index 2620be8 . . 26c4f89 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java 
 @ @ - 20 , 13 + 20 , 6 @ @ import android . app . Service ; 
 import android . content . Intent ; 
 import android . os . IBinder ; 
 
 - import io . realm . Realm ; 
 - import io . realm . SyncConfiguration ; 
 - import io . realm . SyncUser ; 
 - import io . realm . objectserver . model . ProcessInfo ; 
 - import io . realm . objectserver . utils . Constants ; 
 - import io . realm . objectserver . utils . UserFactory ; 
 - 
 / * * 
 * Open a sync Realm on a different process , then send one commit . 
 * / 
 @ @ - 35 , 11 + 28 , 12 @ @ public class SendOneCommit extends Service { 
 @ Override 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 - Realm . init ( getApplicationContext ( ) ) ; 
 - SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 - String realmUrl = Constants . SYNC _ SERVER _ URL ; 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 + / / FIXME : Disable for now 
 + / * 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( this ) 
 . name ( SendOneCommit . class . getSimpleName ( ) ) 
 + . serverUrl ( Constants . SYNC _ SERVER _ URL ) 
 + . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; 
 Realm realm = Realm . getInstance ( syncConfig ) ; 
 @ @ - 52 , 8 + 46 , 10 @ @ public class SendOneCommit extends Service { 
 realm . commitTransaction ( ) ; 
 
 realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset 
 + * / 
 } 
 
 + 
 @ Override 
 public IBinder onBind ( Intent intent ) { 
 return null ; 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java 
 index 27df640 . . 2bcdd9d 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java 
 @ @ - 20 , 13 + 20 , 6 @ @ import android . app . Service ; 
 import android . content . Intent ; 
 import android . os . IBinder ; 
 
 - import io . realm . Realm ; 
 - import io . realm . SyncConfiguration ; 
 - import io . realm . SyncUser ; 
 - import io . realm . objectserver . model . TestObject ; 
 - import io . realm . objectserver . utils . Constants ; 
 - import io . realm . objectserver . utils . UserFactory ; 
 - 
 / * * 
 * Open a sync Realm on a different process , then send one commit . 
 * / 
 @ @ - 35 , 11 + 28 , 13 @ @ public class SendsALot extends Service { 
 @ Override 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 - Realm . init ( getApplicationContext ( ) ) ; 
 - SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 - String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 + / / FIXME : Disable for now . 
 + / * 
 + User user = UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ; 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user ) 
 . name ( SendsALot . class . getSimpleName ( ) ) 
 + . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) 
 + . user ( ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; 
 Realm realm = Realm . getInstance ( syncConfig ) ; 
 @ @ - 54 , 6 + 49 , 7 @ @ public class SendsALot extends Service { 
 realm . commitTransaction ( ) ; 
 
 realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset 
 + * / 
 } 
 
 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java 
 index 1fa4fb9 . . 9b15ae1 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java 
 @ @ - 16 , 17 + 16 , 12 @ @ 
 
 package io . realm . objectserver . utils ; 
 
 - import android . support . test . InstrumentationRegistry ; 
 - 
 import java . io . IOException ; 
 
 - import io . realm . Realm ; 
 import io . realm . log . RealmLog ; 
 import okhttp3 . Headers ; 
 - import okhttp3 . MediaType ; 
 import okhttp3 . OkHttpClient ; 
 import okhttp3 . Request ; 
 - import okhttp3 . RequestBody ; 
 import okhttp3 . Response ; 
 
 / * * 
 @ @ - 34 , 10 + 29 , 7 @ @ import okhttp3 . Response ; 
 * temp directory & start a sync server on it for each unit test . 
 * / 
 public class HttpUtils { 
 - private final static OkHttpClient client = new OkHttpClient . Builder ( ) 
 - . retryOnConnectionFailure ( true ) 
 - . build ( ) ; 
 - 
 + private final static OkHttpClient client = new OkHttpClient ( ) ; 
 / / adb reverse tcp : 8888 tcp : 8888 
 / / will forward this query to the host , running the integration test server on 8888 
 private final static String START _ SERVER = " http : / / 127 . 0 . 0 . 1 : 8888 / start " ; 
 @ @ - 68 , 29 + 60 , 20 @ @ public class HttpUtils { 
 / / Checking the server 
 private static boolean waitAuthServerReady ( ) throws InterruptedException { 
 int retryTimes = 50 ; 
 - 
 - / / Dummy invalid request , which will trigger a 400 ( BAD REQUEST ) , but indicate the auth 
 - / / server is responsive 
 Request request = new Request . Builder ( ) 
 - . post ( RequestBody . create ( MediaType . parse ( " application / json ; charset = utf - 8 " ) , " " ) ) 
 - . url ( Constants . AUTH _ URL ) 
 + . url ( Constants . AUTH _ SERVER _ URL ) 
 . build ( ) ; 
 
 while ( retryTimes ! = 0 ) { 
 - Response response = null ; 
 try { 
 - response = client . newCall ( request ) . execute ( ) ; 
 - if ( response . code ( ) = = 400 ) { 
 + Response response = client . newCall ( request ) . execute ( ) ; 
 + if ( response . isSuccessful ( ) ) { 
 return true ; 
 } 
 RealmLog . error ( " Error response from auth server : % s " , response . toString ( ) ) ; 
 } catch ( IOException e ) { 
 RealmLog . error ( e ) ; 
 Thread . sleep ( 100 ) ; 
 - } finally { 
 - if ( response ! = null ) { 
 - response . close ( ) ; 
 - } 
 } 
 retryTimes - - ; 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 index 9e6c43d . . 1ebb2d6 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 @ @ - 16 , 13 + 16 , 25 @ @ 
 
 package io . realm . objectserver . utils ; 
 
 - import io . realm . SyncCredentials ; 
 + import java . net . URI ; 
 + import java . net . URISyntaxException ; 
 + 
 import io . realm . SyncUser ; 
 + import io . realm . objectserver . utils . Constants ; 
 
 / / Must be in ` io . realm . objectserver ` to work around package protected methods . 
 public class UserFactory { 
 - public static SyncUser createDefaultUser ( String authUrl , String accessToken ) { 
 - SyncCredentials credentials = SyncCredentials . accessToken ( accessToken , " sync - integration - user " ) ; 
 - return SyncUser . login ( credentials , authUrl ) ; 
 + / / FIXME : Not working right now . 
 + / * 
 + public static User createDefaultUser ( String SERVER _ URL , String USER _ TOKEN ) { 
 + try { 
 + User user = User . createLocal ( ) ; 
 + 
 + user . addAccessToken ( new URI ( SERVER _ URL ) , USER _ TOKEN ) ; 
 + return user ; 
 + } catch ( URISyntaxException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 + * / 
 } 
 diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js 
 index 6ddef03 . . c182652 100755 
 - - - a / tools / sync _ test _ server / ros - testing - server . js 
 + + + b / tools / sync _ test _ server / ros - testing - server . js 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 # ! / usr / bin / env nodejs 
 
 - var winston = require ( ' winston ' ) ; / / logging 
 + var winston = require ( ' winston ' ) ; / / logging 
 const temp = require ( ' temp ' ) ; 
 const spawn = require ( ' child _ process ' ) . spawn ; 
 var http = require ( ' http ' ) ; 
 @ @ - 23 , 7 + 23 , 7 @ @ function handleRequest ( request , response ) { 
 try { 
 / / log the request on console 
 winston . log ( request . url ) ; 
 - / / Dispatch 
 + / / Disptach 
 dispatcher . dispatch ( request , response ) ; 
 } catch ( err ) { 
 console . log ( err ) ; 
 diff - - git a / tools / sync _ test _ server / start _ server . sh b / tools / sync _ test _ server / start _ server . sh 
 index 277bb4b . . 00930f5 100755 
 - - - a / tools / sync _ test _ server / start _ server . sh 
 + + + b / tools / sync _ test _ server / start _ server . sh 
 @ @ - 9 , 10 + 9 , 9 @ @ TMP _ DIR = $ ( mktemp - d / tmp / sync - test . XXXX ) | | { echo " Failed to mktemp $ TEST _ TEMP _ 
 
 adb reverse tcp : 7800 tcp : 7800 & & \ 
 adb reverse tcp : 8080 tcp : 8080 & & \ 
 - adb reverse tcp : 9080 tcp : 9080 & & \ 
 adb reverse tcp : 8888 tcp : 8888 | | { echo " Failed to reverse adb port . " ; exit 1 ; } 
 
 docker build $ DOCKERFILE _ DIR - - build - arg ROS _ DE _ VERSION = $ ROS _ DE _ VERSION - t sync - test - server | | { echo " Failed to build Docker image . " ; exit 1 ; } 
 
 echo " See log files in $ TMP _ DIR " 
 - docker run - p 9080 : 9080 - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server 
 + docker run - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server

NEAREST DIFF:
diff - - git a / README . md b / README . md 
 index ee52154 . . 268af42 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 220 , 6 + 220 , 9 @ @ To run a testing server locally : 
 	 . / gradlew connectedObjectServerDebugAndroidTest 
 	 ` ` ` 
 
 + Note that if using VirtualBox ( Genymotion ) , the network needs to be bridged for the tests to work . 
 + This is done in ` VirtualBox > Network ` . Set " Adapter 2 " to " Bridged Adapter " . 
 + 
 These tests may take as much as half an hour to complete . 
 
 # # Contributing 
 diff - - git a / realm / realm - library / src / androidTest / AndroidManifest . xml b / realm / realm - library / src / androidTest / AndroidManifest . xml 
 index c7741a6 . . d9e252d 100644 
 - - - a / realm / realm - library / src / androidTest / AndroidManifest . xml 
 + + + b / realm / realm - library / src / androidTest / AndroidManifest . xml 
 @ @ - 21 , 6 + 21 , 23 @ @ 
 android : exported = " true " 
 android : process = " : remote " > 
 < / service > 
 + 
 + < ! - - 
 + FIXME : Manifest merger doesn ' t seem to work correctly with test flavours . 
 + Figure out why . For now place services here 
 + - - > 
 + < service 
 + android : name = " io . realm . objectserver . service . SendOneCommit " 
 + android : enabled = " true " 
 + android : exported = " true " 
 + android : process = " : remote " > 
 + < / service > 
 + < service 
 + android : name = " io . realm . objectserver . service . SendsALot " 
 + android : enabled = " true " 
 + android : exported = " true " 
 + android : process = " : remote " > 
 + < / service > 
 < / application > 
 
 < / manifest > 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 index a587ca1 . . c31ea68 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import org . junit . Before ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 + import org . mockito . Mockito ; 
 
 import java . net . MalformedURLException ; 
 import java . net . URI ; 
 @ @ - 31 , 6 + 32 , 7 @ @ import java . net . URL ; 
 import java . util . Collection ; 
 
 import io . realm . android . SharedPrefsUserStore ; 
 + import io . realm . internal . network . AuthenticationServer ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . util . SyncTestUtils ; 
 
 @ @ - 39 , 6 + 41 , 8 @ @ import static junit . framework . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 + import static org . mockito . Matchers . any ; 
 + import static org . mockito . Mockito . when ; 
 
 @ RunWith ( AndroidJUnit4 . class ) 
 public class SyncUserTests { 
 @ @ - 151 , 4 + 155 , 19 @ @ public class SyncUserTests { 
 assertTrue ( str ! = null & & ! str . isEmpty ( ) ) ; 
 } 
 
 + / / Test that a login an access token logs the user in directly without touching the network 
 + @ Test 
 + public void login _ withAccessToken ( ) { 
 + AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; 
 + when ( authServer . loginUser ( any ( SyncCredentials . class ) , any ( URL . class ) ) ) . thenThrow ( new AssertionError ( " Server contacted . " ) ) ; 
 + AuthenticationServer originalServer = SyncManager . getAuthServer ( ) ; 
 + SyncManager . setAuthServerImpl ( authServer ) ; 
 + try { 
 + SyncCredentials credentials = SyncCredentials . accessToken ( " foo " , " bar " ) ; 
 + SyncUser user = SyncUser . login ( credentials , " http : / / ros . realm . io / auth " ) ; 
 + assertTrue ( user . isValid ( ) ) ; 
 + } finally { 
 + SyncManager . setAuthServerImpl ( originalServer ) ; 
 + } 
 + } 
 } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java 
 index 827f126 . . b9dcbc4 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncCredentials . java 
 @ @ - 151 , 6 + 151 , 23 @ @ public class SyncCredentials { 
 return new SyncCredentials ( identityProvider , userIdentifier , userInfo ) ; 
 } 
 
 + / * * 
 + * Creates credentials from an existing access token . Since an access token is the proof that a user already 
 + * has logged in . Credentials created this way are automatically assumed to have successfully logged in . 
 + * This means that providing this credential to { @ link SyncUser # login ( SyncCredentials , String ) } will always 
 + * succeed , but accessing any Realm after might fail if the token is no longer valid . 
 + * 
 + * @ param accessToken Users access token . 
 + * @ param identifier User identifier . 
 + * @ return a set of credentials that can be used to log into the Object Server using 
 + * { @ link SyncUser # loginAsync ( SyncCredentials , String , SyncUser . Callback ) } 
 + * / 
 + public static SyncCredentials accessToken ( String accessToken , String identifier ) { 
 + HashMap < String , Object > userInfo = new HashMap < String , Object > ( ) ; 
 + userInfo . put ( " _ token " , accessToken ) ; 
 + return new SyncCredentials ( IdentityProvider . ACCESS _ TOKEN , identifier , userInfo ) ; 
 + } 
 + 
 private SyncCredentials ( String identityProvider , String token , Map < String , Object > userInfo ) { 
 this . identityProvider = identityProvider ; 
 this . userIdentifier = token ; 
 @ @ - 191 , 6 + 208 , 14 @ @ public class SyncCredentials { 
 * verifying that a given credential is valid . 
 * / 
 public static final class IdentityProvider { 
 + 
 + / * * 
 + * The provided identify is an already registered user ( represented by the access token ) . Logging in with this 
 + * type of identity will happen purely on the device without contacting the Realm Object Server . Acquiring 
 + * access to individual Realms will still require talking to the Object Server . 
 + * / 
 + public static final String ACCESS _ TOKEN = " _ access _ token " ; 
 + 
 / * * 
 * Any credentials verified by the debug identity provider will always be considered valid . 
 * It is only available if configured on the Object Server , and it is disabled by default . 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 index 65130e7 . . 379c3dd 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . net . URL ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . List ; 
 + import java . util . Objects ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . ThreadPoolExecutor ; 
 
 @ @ - 150 , 10 + 151 , 20 @ @ public class SyncUser { 
 throw new IllegalArgumentException ( " Invalid URL " + authenticationUrl + " . " , e ) ; 
 } 
 
 - final AuthenticationServer server = SyncManager . getAuthServer ( ) ; 
 ObjectServerError error ; 
 try { 
 - AuthenticateResponse result = server . loginUser ( credentials , authUrl ) ; 
 + AuthenticateResponse result ; 
 + if ( credentials . getIdentityProvider ( ) . equals ( SyncCredentials . IdentityProvider . ACCESS _ TOKEN ) ) { 
 + / / Credentials using ACCESS _ TOKEN as IdentityProvider are optimistically assumed to be valid already 
 + / / So log them in directly without contacting the authentication server . This is done by mirroring 
 + / / the JSON response expected from the server . 
 + String userIdentifier = credentials . getUserIdentifier ( ) ; 
 + String token = ( String ) credentials . getUserInfo ( ) . get ( " _ token " ) ; 
 + result = AuthenticateResponse . createValidResponseWithUser ( userIdentifier , token ) ; 
 + } else { 
 + final AuthenticationServer server = SyncManager . getAuthServer ( ) ; 
 + result = server . loginUser ( credentials , authUrl ) ; 
 + } 
 if ( result . isValid ( ) ) { 
 ObjectServerUser syncUser = new ObjectServerUser ( result . getRefreshToken ( ) , authUrl ) ; 
 SyncUser user = new SyncUser ( syncUser ) ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 index 75e31a0 . . 9408a55 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 @ @ - 75 , 6 + 75 , 24 @ @ public class AuthenticateResponse extends AuthServerResponse { 
 } 
 
 / * * 
 + * Helper method for creating a valid user login response . The user returned will be assumed to have all permissions 
 + * as doesn ' t expire . 
 + * 
 + * @ param identifier User identifier . 
 + * @ param token Users refresh token . 
 + * @ return Response 
 + * / 
 + public static AuthenticateResponse createValidResponseWithUser ( String identifier , String token ) { 
 + try { 
 + JSONObject response = new JSONObject ( ) ; 
 + response . put ( JSON _ FIELD _ REFRESH _ TOKEN , new Token ( token , identifier , null , Long . MAX _ VALUE , Token . Permission . ALL ) . toJson ( ) ) ; 
 + return new AuthenticateResponse ( response . toString ( ) ) ; 
 + } catch ( JSONException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + / * * 
 * Creates an unsuccessful authentication response . This should only happen in case of network or I / O related 
 * issues . 
 * 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java 
 index 78f0acf . . 3ae10a2 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / Token . java 
 @ @ - 151 , 5 + 151 , 7 @ @ public class Token { 
 DOWNLOAD , 
 REFRESH , 
 MANAGE ; 
 + 
 + public static final Permission [ ] ALL = { UPLOAD , DOWNLOAD , REFRESH , MANAGE } ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 index ccf997a . . a38b774 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 @ @ - 9 , 6 + 9 , 8 @ @ import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . SyncConfiguration ; 
 import io . realm . SyncCredentials ; 
 import io . realm . ErrorCode ; 
 import io . realm . ObjectServerError ; 
 @ @ - 66 , 4 + 68 , 21 @ @ public class AuthTests { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void login _ withAccessToken ( ) { 
 + SyncCredentials credentials = SyncCredentials . accessToken ( Constants . USER _ TOKEN , " access - token - user " ) ; 
 + SyncUser . loginAsync ( credentials , Constants . AUTH _ URL , new SyncUser . Callback ( ) { 
 + @ Override 
 + public void onSuccess ( SyncUser user ) { 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , Constants . SYNC _ SERVER _ URL ) . build ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( ObjectServerError error ) { 
 + fail ( " Error thrown : " + error ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java 
 index 6e465f5 . . 73df932 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / ProcessCommitTests . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import android . support . test . runner . AndroidJUnit4 ; 
 
 import org . junit . AfterClass ; 
 import org . junit . BeforeClass ; 
 + import org . junit . Ignore ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 @ @ - 32 , 16 + 33 , 20 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import io . realm . ObjectServerError ; 
 import io . realm . Realm ; 
 import io . realm . RealmChangeListener ; 
 import io . realm . RealmResults ; 
 import io . realm . SyncConfiguration ; 
 + import io . realm . SyncSession ; 
 + import io . realm . SyncUser ; 
 import io . realm . objectserver . model . ProcessInfo ; 
 import io . realm . objectserver . model . TestObject ; 
 import io . realm . objectserver . service . SendOneCommit ; 
 import io . realm . objectserver . service . SendsALot ; 
 import io . realm . objectserver . utils . Constants ; 
 import io . realm . objectserver . utils . HttpUtils ; 
 + import io . realm . objectserver . utils . UserFactory ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 @ @ - 50 , 6 + 55 , 7 @ @ import static org . junit . Assert . fail ; 
 public class ProcessCommitTests { 
 @ BeforeClass 
 public static void setUp ( ) throws Exception { 
 + Realm . init ( InstrumentationRegistry . getContext ( ) ) ; 
 HttpUtils . startSyncServer ( ) ; 
 } 
 
 @ @ - 58 , 15 + 64 , 10 @ @ public class ProcessCommitTests { 
 HttpUtils . stopSyncServer ( ) ; 
 } 
 
 - / / FIXME : At least need one method in the test class 
 - @ Test 
 - public void dummy ( ) { 
 - 
 - } 
 - 
 - / / FIXME : Disable for now . 
 - / * 
 + / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating 
 + / / a Sync Client , but it needs to be investigated . 
 @ Test 
 + @ Ignore 
 public void expectServerCommit ( ) throws Throwable { 
 final Throwable [ ] exception = new Throwable [ 1 ] ; 
 final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; 
 @ @ - 76 , 18 + 77 , 23 @ @ public class ProcessCommitTests { 
 public void run ( ) { 
 try { 
 Looper . prepare ( ) ; 
 - Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; 
 + Context targetContext = InstrumentationRegistry . getTargetContext ( ) ; 
 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( ) 
 + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 + String realmUrl = Constants . SYNC _ SERVER _ URL ; 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 . name ( SendOneCommit . class . getSimpleName ( ) ) 
 - . serverUrl ( Constants . SYNC _ SERVER _ URL ) 
 - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) 
 + . errorHandler ( new SyncSession . ErrorHandler ( ) { 
 + @ Override 
 + public void onError ( SyncSession session , ObjectServerError error ) { 
 + fail ( " Sync failure : " + error ) ; 
 + } 
 + } ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests 
 final Realm realm = Realm . getInstance ( syncConfig ) ; 
 Intent intent = new Intent ( targetContext , SendOneCommit . class ) ; 
 targetContext . startService ( intent ) ; 
 - 
 final RealmResults < ProcessInfo > all = realm . where ( ProcessInfo . class ) . findAll ( ) ; 
 all . addChangeListener ( new RealmChangeListener < RealmResults < ProcessInfo > > ( ) { 
 @ Override 
 @ @ - 113 , 14 + 119 , 15 @ @ public class ProcessCommitTests { 
 fail ( " Test timed out " ) ; 
 } 
 } 
 - * / 
 
 + / / FIXME : Ignore for now . They do still not work . It might be caused by two processes each creating 
 + / / a Sync Client , but it needs to be investigated . 
 / / TODO send string from service and match 
 / / replicate integration tests from Cocoa 
 / / add gradle task to start the sh script automatically ( create pid file , = = > run or kill existing process 
 / / check the requirement for the issue again 
 - / * 
 @ Test 
 + @ Ignore 
 public void expectALot ( ) throws Throwable { 
 final Throwable [ ] exception = new Throwable [ 1 ] ; 
 final CountDownLatch testFinished = new CountDownLatch ( 1 ) ; 
 @ @ - 132 , 10 + 139 , 16 @ @ public class ProcessCommitTests { 
 Looper . prepare ( ) ; 
 Context targetContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; 
 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( targetContext ) 
 + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 + String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 . name ( SendsALot . class . getSimpleName ( ) ) 
 - . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) 
 - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ) 
 + . errorHandler ( new SyncSession . ErrorHandler ( ) { 
 + @ Override 
 + public void onError ( SyncSession session , ObjectServerError error ) { 
 + fail ( " Sync failure : " + error ) ; 
 + } 
 + } ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; / / TODO do this in Rule as async tests 
 final Realm realm = Realm . getInstance ( syncConfig ) ; 
 @ @ - 171 , 5 + 184 , 4 @ @ public class ProcessCommitTests { 
 fail ( " Test timed out " ) ; 
 } 
 } 
 - * / 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java 
 index 26c4f89 . . 2620be8 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendOneCommit . java 
 @ @ - 20 , 6 + 20 , 13 @ @ import android . app . Service ; 
 import android . content . Intent ; 
 import android . os . IBinder ; 
 
 + import io . realm . Realm ; 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . SyncUser ; 
 + import io . realm . objectserver . model . ProcessInfo ; 
 + import io . realm . objectserver . utils . Constants ; 
 + import io . realm . objectserver . utils . UserFactory ; 
 + 
 / * * 
 * Open a sync Realm on a different process , then send one commit . 
 * / 
 @ @ - 28 , 12 + 35 , 11 @ @ public class SendOneCommit extends Service { 
 @ Override 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 - / / FIXME : Disable for now 
 - / * 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( this ) 
 + Realm . init ( getApplicationContext ( ) ) ; 
 + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 + String realmUrl = Constants . SYNC _ SERVER _ URL ; 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 . name ( SendOneCommit . class . getSimpleName ( ) ) 
 - . serverUrl ( Constants . SYNC _ SERVER _ URL ) 
 - . user ( UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL , Constants . USER _ TOKEN ) ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; 
 Realm realm = Realm . getInstance ( syncConfig ) ; 
 @ @ - 46 , 10 + 52 , 8 @ @ public class SendOneCommit extends Service { 
 realm . commitTransaction ( ) ; 
 
 realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset 
 - * / 
 } 
 
 - 
 @ Override 
 public IBinder onBind ( Intent intent ) { 
 return null ; 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java 
 index 2bcdd9d . . 27df640 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / service / SendsALot . java 
 @ @ - 20 , 6 + 20 , 13 @ @ import android . app . Service ; 
 import android . content . Intent ; 
 import android . os . IBinder ; 
 
 + import io . realm . Realm ; 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . SyncUser ; 
 + import io . realm . objectserver . model . TestObject ; 
 + import io . realm . objectserver . utils . Constants ; 
 + import io . realm . objectserver . utils . UserFactory ; 
 + 
 / * * 
 * Open a sync Realm on a different process , then send one commit . 
 * / 
 @ @ - 28 , 13 + 35 , 11 @ @ public class SendsALot extends Service { 
 @ Override 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 - / / FIXME : Disable for now . 
 - / * 
 - User user = UserFactory . createDefaultUser ( Constants . SYNC _ SERVER _ URL _ 2 , Constants . USER _ TOKEN ) ; 
 - final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user ) 
 + Realm . init ( getApplicationContext ( ) ) ; 
 + SyncUser user = UserFactory . createDefaultUser ( Constants . AUTH _ URL , Constants . USER _ TOKEN ) ; 
 + String realmUrl = Constants . SYNC _ SERVER _ URL _ 2 ; 
 + final SyncConfiguration syncConfig = new SyncConfiguration . Builder ( user , realmUrl ) 
 . name ( SendsALot . class . getSimpleName ( ) ) 
 - . serverUrl ( Constants . SYNC _ SERVER _ URL _ 2 ) 
 - . user ( ) 
 . build ( ) ; 
 Realm . deleteRealm ( syncConfig ) ; 
 Realm realm = Realm . getInstance ( syncConfig ) ; 
 @ @ - 49 , 7 + 54 , 6 @ @ public class SendsALot extends Service { 
 realm . commitTransaction ( ) ; 
 
 realm . close ( ) ; / / FIXME the close may not give a chance to the sync client to process / upload the changeset 
 - * / 
 } 
 
 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java 
 index 9b15ae1 . . 1fa4fb9 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / HttpUtils . java 
 @ @ - 16 , 12 + 16 , 17 @ @ 
 
 package io . realm . objectserver . utils ; 
 
 + import android . support . test . InstrumentationRegistry ; 
 + 
 import java . io . IOException ; 
 
 + import io . realm . Realm ; 
 import io . realm . log . RealmLog ; 
 import okhttp3 . Headers ; 
 + import okhttp3 . MediaType ; 
 import okhttp3 . OkHttpClient ; 
 import okhttp3 . Request ; 
 + import okhttp3 . RequestBody ; 
 import okhttp3 . Response ; 
 
 / * * 
 @ @ - 29 , 7 + 34 , 10 @ @ import okhttp3 . Response ; 
 * temp directory & start a sync server on it for each unit test . 
 * / 
 public class HttpUtils { 
 - private final static OkHttpClient client = new OkHttpClient ( ) ; 
 + private final static OkHttpClient client = new OkHttpClient . Builder ( ) 
 + . retryOnConnectionFailure ( true ) 
 + . build ( ) ; 
 + 
 / / adb reverse tcp : 8888 tcp : 8888 
 / / will forward this query to the host , running the integration test server on 8888 
 private final static String START _ SERVER = " http : / / 127 . 0 . 0 . 1 : 8888 / start " ; 
 @ @ - 60 , 20 + 68 , 29 @ @ public class HttpUtils { 
 / / Checking the server 
 private static boolean waitAuthServerReady ( ) throws InterruptedException { 
 int retryTimes = 50 ; 
 + 
 + / / Dummy invalid request , which will trigger a 400 ( BAD REQUEST ) , but indicate the auth 
 + / / server is responsive 
 Request request = new Request . Builder ( ) 
 - . url ( Constants . AUTH _ SERVER _ URL ) 
 + . post ( RequestBody . create ( MediaType . parse ( " application / json ; charset = utf - 8 " ) , " " ) ) 
 + . url ( Constants . AUTH _ URL ) 
 . build ( ) ; 
 
 while ( retryTimes ! = 0 ) { 
 + Response response = null ; 
 try { 
 - Response response = client . newCall ( request ) . execute ( ) ; 
 - if ( response . isSuccessful ( ) ) { 
 + response = client . newCall ( request ) . execute ( ) ; 
 + if ( response . code ( ) = = 400 ) { 
 return true ; 
 } 
 RealmLog . error ( " Error response from auth server : % s " , response . toString ( ) ) ; 
 } catch ( IOException e ) { 
 RealmLog . error ( e ) ; 
 Thread . sleep ( 100 ) ; 
 + } finally { 
 + if ( response ! = null ) { 
 + response . close ( ) ; 
 + } 
 } 
 retryTimes - - ; 
 } 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 index 1ebb2d6 . . 9e6c43d 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / UserFactory . java 
 @ @ - 16 , 25 + 16 , 13 @ @ 
 
 package io . realm . objectserver . utils ; 
 
 - import java . net . URI ; 
 - import java . net . URISyntaxException ; 
 - 
 + import io . realm . SyncCredentials ; 
 import io . realm . SyncUser ; 
 - import io . realm . objectserver . utils . Constants ; 
 
 / / Must be in ` io . realm . objectserver ` to work around package protected methods . 
 public class UserFactory { 
 - / / FIXME : Not working right now . 
 - / * 
 - public static User createDefaultUser ( String SERVER _ URL , String USER _ TOKEN ) { 
 - try { 
 - User user = User . createLocal ( ) ; 
 - 
 - user . addAccessToken ( new URI ( SERVER _ URL ) , USER _ TOKEN ) ; 
 - return user ; 
 - } catch ( URISyntaxException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + public static SyncUser createDefaultUser ( String authUrl , String accessToken ) { 
 + SyncCredentials credentials = SyncCredentials . accessToken ( accessToken , " sync - integration - user " ) ; 
 + return SyncUser . login ( credentials , authUrl ) ; 
 } 
 - * / 
 } 
 diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js 
 index c182652 . . 6ddef03 100755 
 - - - a / tools / sync _ test _ server / ros - testing - server . js 
 + + + b / tools / sync _ test _ server / ros - testing - server . js 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 # ! / usr / bin / env nodejs 
 
 - var winston = require ( ' winston ' ) ; / / logging 
 + var winston = require ( ' winston ' ) ; / / logging 
 const temp = require ( ' temp ' ) ; 
 const spawn = require ( ' child _ process ' ) . spawn ; 
 var http = require ( ' http ' ) ; 
 @ @ - 23 , 7 + 23 , 7 @ @ function handleRequest ( request , response ) { 
 try { 
 / / log the request on console 
 winston . log ( request . url ) ; 
 - / / Disptach 
 + / / Dispatch 
 dispatcher . dispatch ( request , response ) ; 
 } catch ( err ) { 
 console . log ( err ) ; 
 diff - - git a / tools / sync _ test _ server / start _ server . sh b / tools / sync _ test _ server / start _ server . sh 
 index 00930f5 . . 277bb4b 100755 
 - - - a / tools / sync _ test _ server / start _ server . sh 
 + + + b / tools / sync _ test _ server / start _ server . sh 
 @ @ - 9 , 9 + 9 , 10 @ @ TMP _ DIR = $ ( mktemp - d / tmp / sync - test . XXXX ) | | { echo " Failed to mktemp $ TEST _ TEMP _ 
 
 adb reverse tcp : 7800 tcp : 7800 & & \ 
 adb reverse tcp : 8080 tcp : 8080 & & \ 
 + adb reverse tcp : 9080 tcp : 9080 & & \ 
 adb reverse tcp : 8888 tcp : 8888 | | { echo " Failed to reverse adb port . " ; exit 1 ; } 
 
 docker build $ DOCKERFILE _ DIR - - build - arg ROS _ DE _ VERSION = $ ROS _ DE _ VERSION - t sync - test - server | | { echo " Failed to build Docker image . " ; exit 1 ; } 
 
 echo " See log files in $ TMP _ DIR " 
 - docker run - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server 
 + docker run - p 9080 : 9080 - p 8080 : 8080 - p 7800 : 7800 - p 8888 : 8888 - v $ TMP _ DIR : / tmp - - name sync - test - server sync - test - server
