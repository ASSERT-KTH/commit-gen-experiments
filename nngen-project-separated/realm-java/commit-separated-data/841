BLEU SCORE: 0.016932492841722675

TEST MSG: Don â€™ t override equals / hashCode / toString if already implemented
GENERATED MSG: Add check on fields of type RealmList

TEST DIFF (one line): diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> index 3afad19 . . 0e79776 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> @ @ - 25 , 7 + 25 , 9 @ @ import java . util . Set ; <nl> import javax . annotation . processing . ProcessingEnvironment ; <nl> import javax . lang . model . element . Element ; <nl> import javax . lang . model . element . ElementKind ; <nl> + import javax . lang . model . element . ExecutableElement ; <nl> import javax . lang . model . element . Modifier ; <nl> + import javax . lang . model . element . Name ; <nl> import javax . lang . model . element . PackageElement ; <nl> import javax . lang . model . element . TypeElement ; <nl> import javax . lang . model . element . VariableElement ; <nl> @ @ - 51 , 6 + 53 , 9 @ @ public class ClassMetaData { <nl> private List < VariableElement > fields = new ArrayList < VariableElement > ( ) ; / / List of all fields in the class except those @ Ignored . <nl> private List < VariableElement > indexedFields = new ArrayList < VariableElement > ( ) ; / / list of all fields marked @ Index . <nl> private Set < VariableElement > nullableFields = new HashSet < VariableElement > ( ) ; / / Set of fields which can be nullable <nl> + private boolean containsToString ; <nl> + private boolean containsEquals ; <nl> + private boolean containsHashCode ; <nl> <nl> private final List < TypeMirror > validPrimaryKeyTypes ; <nl> private final Types typeUtils ; <nl> @ @ - 67 , 6 + 72 , 19 @ @ public class ClassMetaData { <nl> typeUtils . getPrimitiveType ( TypeKind . LONG ) , <nl> typeUtils . getPrimitiveType ( TypeKind . BYTE ) <nl> ) ; <nl> + <nl> + for ( Element element : classType . getEnclosedElements ( ) ) { <nl> + if ( element instanceof ExecutableElement ) { <nl> + Name name = element . getSimpleName ( ) ; <nl> + if ( name . contentEquals ( " toString " ) ) { <nl> + this . containsToString = true ; <nl> + } else if ( name . contentEquals ( " equals " ) ) { <nl> + this . containsEquals = true ; <nl> + } else if ( name . contentEquals ( " hashCode " ) ) { <nl> + this . containsHashCode = true ; <nl> + } <nl> + } <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 293 , 5 + 311 , 17 @ @ public class ClassMetaData { <nl> } <nl> return false ; <nl> } <nl> + <nl> + public boolean containsToString ( ) { <nl> + return containsToString ; <nl> + } <nl> + <nl> + public boolean containsEquals ( ) { <nl> + return containsEquals ; <nl> + } <nl> + <nl> + public boolean containsHashCode ( ) { <nl> + return containsHashCode ; <nl> + } <nl> } <nl> <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 1081782 . . 2d80bee 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 120 , 9 + 120 , 15 @ @ public class RealmProxyClassGenerator { <nl> emitCopyMethod ( writer ) ; <nl> emitCreateDetachedCopyMethod ( writer ) ; <nl> emitUpdateMethod ( writer ) ; <nl> - emitToStringMethod ( writer ) ; <nl> - emitHashcodeMethod ( writer ) ; <nl> - emitEqualsMethod ( writer ) ; <nl> + if ( ! metadata . containsToString ( ) ) { <nl> + emitToStringMethod ( writer ) ; <nl> + } <nl> + if ( ! metadata . containsHashCode ( ) ) { <nl> + emitHashcodeMethod ( writer ) ; <nl> + } <nl> + if ( ! metadata . containsEquals ( ) ) { <nl> + emitEqualsMethod ( writer ) ; <nl> + } <nl> <nl> / / End the class definition <nl> writer . endType ( ) ; <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> index 2f764ca . . d56c728 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> @ @ - 279 , 53 + 279 , 4 @ @ public class SimpleRealmProxy extends Simple <nl> return standaloneObject ; <nl> } <nl> <nl> - @ Override <nl> - public String toString ( ) { <nl> - if ( ! isValid ( ) ) { <nl> - return " Invalid object " ; <nl> - } <nl> - StringBuilder stringBuilder = new StringBuilder ( " Simple = [ " ) ; <nl> - stringBuilder . append ( " { name : " ) ; <nl> - stringBuilder . append ( realmGetter $ name ( ) ! = null ? realmGetter $ name ( ) : " null " ) ; <nl> - stringBuilder . append ( " } " ) ; <nl> - stringBuilder . append ( " , " ) ; <nl> - stringBuilder . append ( " { age : " ) ; <nl> - stringBuilder . append ( realmGetter $ age ( ) ) ; <nl> - stringBuilder . append ( " } " ) ; <nl> - stringBuilder . append ( " ] " ) ; <nl> - return stringBuilder . toString ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int hashCode ( ) { <nl> - String realmName = realm . getPath ( ) ; <nl> - String tableName = row . getTable ( ) . getName ( ) ; <nl> - long rowIndex = row . getIndex ( ) ; <nl> - <nl> - int result = 17 ; <nl> - result = 31 * result + ( ( realmName ! = null ) ? realmName . hashCode ( ) : 0 ) ; <nl> - result = 31 * result + ( ( tableName ! = null ) ? tableName . hashCode ( ) : 0 ) ; <nl> - result = 31 * result + ( int ) ( rowIndex ^ ( rowIndex > > > 32 ) ) ; <nl> - return result ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean equals ( Object o ) { <nl> - if ( this = = o ) return true ; <nl> - if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; <nl> - SimpleRealmProxy aSimple = ( SimpleRealmProxy ) o ; <nl> - <nl> - String path = realm . getPath ( ) ; <nl> - String otherPath = aSimple . realm . getPath ( ) ; <nl> - if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; ; <nl> - <nl> - String tableName = row . getTable ( ) . getName ( ) ; <nl> - String otherTableName = aSimple . row . getTable ( ) . getName ( ) ; <nl> - if ( tableName ! = null ? ! tableName . equals ( otherTableName ) : otherTableName ! = null ) return false ; <nl> - <nl> - if ( row . getIndex ( ) ! = aSimple . row . getIndex ( ) ) return false ; <nl> - <nl> - return true ; <nl> - } <nl> - <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Simple . java b / realm / realm - annotations - processor / src / test / resources / some / test / Simple . java <nl> index f79eaee . . 39d00e0 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Simple . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / some / test / Simple . java <nl> @ @ - 53 , 4 + 53 , 32 @ @ public class Simple extends RealmObject { <nl> public void realmSetter $ age ( int age ) { <nl> this . age = age ; <nl> } <nl> - } <nl> \ No newline at end of file <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return " Simple { " + <nl> + " name = ' " + name + ' \ ' ' + <nl> + " , age = " + age + <nl> + ' } ' ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) { <nl> + if ( this = = o ) return true ; <nl> + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; <nl> + <nl> + Simple simple = ( Simple ) o ; <nl> + <nl> + if ( age ! = simple . age ) return false ; <nl> + if ( name ! = null ? ! name . equals ( simple . name ) : simple . name ! = null ) return false ; <nl> + <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) { <nl> + int result = name ! = null ? name . hashCode ( ) : 0 ; <nl> + result = 31 * result + age ; <nl> + return result ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index 0fde647 . . 1912025 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 11 , 6 + 11 , 7 @ @ <nl> * Added a check to give a better error message when null is used as value for a primary key . <nl> * Fixed unchecked cast warnings when building with Realm . <nl> * Cleaned up examples ( remove old test project ) . <nl> + * Added checking for missing generic type in RealmList fields in annotation processor . <nl> <nl> 0 . 80 . 3 <nl> * Calling Realm . copyToRealmOrUpdate ( ) with an object with a null primary key now throws a proper exception . <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> index 378bf42 . . 896e142 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import javax . lang . model . element . Modifier ; <nl> import javax . lang . model . element . PackageElement ; <nl> import javax . lang . model . element . TypeElement ; <nl> import javax . lang . model . element . VariableElement ; <nl> + import javax . lang . model . type . DeclaredType ; <nl> import javax . lang . model . type . TypeKind ; <nl> import javax . lang . model . type . TypeMirror ; <nl> import javax . lang . model . util . Types ; <nl> @ @ - 63 , 12 + 64 , 14 @ @ public class ClassMetaData { <nl> <nl> private final List < TypeMirror > validPrimaryKeyTypes ; <nl> private final Types typeUtils ; <nl> + private DeclaredType realmList ; <nl> <nl> public ClassMetaData ( ProcessingEnvironment env , TypeElement clazz ) { <nl> this . classType = clazz ; <nl> this . className = clazz . getSimpleName ( ) . toString ( ) ; <nl> typeUtils = env . getTypeUtils ( ) ; <nl> TypeMirror stringType = env . getElementUtils ( ) . getTypeElement ( " java . lang . String " ) . asType ( ) ; <nl> + realmList = typeUtils . getDeclaredType ( env . getElementUtils ( ) . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; <nl> validPrimaryKeyTypes = Arrays . asList ( <nl> stringType , <nl> typeUtils . getPrimitiveType ( TypeKind . SHORT ) , <nl> @ @ - 102 , 6 + 105 , 7 @ @ public class ClassMetaData { <nl> packageName = packageElement . getQualifiedName ( ) . toString ( ) ; <nl> <nl> if ( ! categorizeClassElements ( ) ) return false ; <nl> + if ( ! checkListTypes ( ) ) return false ; <nl> if ( ! checkMethods ( ) ) return false ; <nl> if ( ! checkDefaultConstructor ( ) ) return false ; <nl> if ( ! checkRequiredGetters ( ) ) return false ; <nl> @ @ - 144 , 6 + 148 , 18 @ @ public class ClassMetaData { <nl> return true ; <nl> } <nl> <nl> + private boolean checkListTypes ( ) { <nl> + for ( VariableElement field : fields ) { <nl> + if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> + if ( Utils . getGenericType ( field ) = = null ) { <nl> + Utils . error ( " No generic type supplied for field " , field ) ; <nl> + return false ; <nl> + } <nl> + } <nl> + } <nl> + return true ; <nl> + } <nl> + <nl> / / Verify that a setter is used to set a field in the model class . <nl> / / Note : This is done heuristically by comparing the name of setter with the name of the field . <nl> / / Annotation processors does not allow us to inspect individual statements . <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java b / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java <nl> index 039140a . . b2ba192 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java <nl> @ @ - 1 , 5 + 1 , 8 @ @ <nl> package io . realm . processor ; <nl> <nl> + import java . lang . reflect . ParameterizedType ; <nl> + import java . util . List ; <nl> + <nl> import javax . annotation . processing . Messager ; <nl> import javax . annotation . processing . ProcessingEnvironment ; <nl> import javax . lang . model . element . Element ; <nl> @ @ - 8 , 6 + 11 , 7 @ @ import javax . lang . model . element . Modifier ; <nl> import javax . lang . model . element . TypeElement ; <nl> import javax . lang . model . element . VariableElement ; <nl> import javax . lang . model . type . DeclaredType ; <nl> + import javax . lang . model . type . TypeMirror ; <nl> import javax . lang . model . util . Types ; <nl> import javax . tools . Diagnostic ; <nl> <nl> @ @ - 83 , 7 + 87 , 12 @ @ public class Utils { <nl> * Returns the generic type for Lists of the form { @ code List < type > } <nl> * / <nl> public static String getGenericType ( VariableElement field ) { <nl> - String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; <nl> + TypeMirror fieldType = field . asType ( ) ; <nl> + List < ? extends TypeMirror > typeArguments = ( ( DeclaredType ) fieldType ) . getTypeArguments ( ) ; <nl> + if ( typeArguments . size ( ) = = 0 ) { <nl> + return null ; <nl> + } <nl> + String genericCanonicalType = ( String ) typeArguments . get ( 0 ) . toString ( ) ; <nl> String genericType ; <nl> if ( genericCanonicalType . contains ( " . " ) ) { <nl> genericType = genericCanonicalType . substring ( genericCanonicalType . lastIndexOf ( ' . ' ) + 1 ) ; <nl> diff - - git a / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java b / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> index 359175a . . 76811e0 100644 <nl> - - - a / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> + + + b / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ public class RealmProcessorTest { <nl> private JavaFileObject noAccessorsModel = JavaFileObjects . forResource ( " some / test / NoAccessors . java " ) ; <nl> private JavaFileObject fieldNamesModel = JavaFileObjects . forResource ( " some / test / FieldNames . java " ) ; <nl> private JavaFileObject customAccessorModel = JavaFileObjects . forResource ( " some / test / CustomAccessor . java " ) ; <nl> + private JavaFileObject missingGenericTypeModel = JavaFileObjects . forResource ( " some / test / MissingGenericType . java " ) ; <nl> <nl> @ Test <nl> public void compileSimpleFile ( ) { <nl> @ @ - 219 , 6 + 220 , 14 @ @ public class RealmProcessorTest { <nl> } <nl> <nl> @ Test <nl> + public void compileMissingGenericType ( ) { <nl> + ASSERT . about ( javaSource ( ) ) <nl> + . that ( missingGenericTypeModel ) <nl> + . processedWith ( new RealmProcessor ( ) ) <nl> + . failsToCompile ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void compileFieldNamesFiles ( ) { <nl> ASSERT . about ( javaSource ( ) ) <nl> . that ( fieldNamesModel ) <nl> diff - - git a / realm - annotations - processor / src / test / resources / some / test / MissingGenericType . java b / realm - annotations - processor / src / test / resources / some / test / MissingGenericType . java <nl> new file mode 100644 <nl> index 0000000 . . 4636c06 <nl> - - - / dev / null <nl> + + + b / realm - annotations - processor / src / test / resources / some / test / MissingGenericType . java <nl> @ @ - 0 , 0 + 1 , 32 @ @ <nl> + / * <nl> + * Copyright 2015 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package some . test ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + import io . realm . RealmList ; <nl> + <nl> + class MissingGenericType extends RealmObject { <nl> + private RealmList list ; / / this is an error ! <nl> + <nl> + public RealmList getList ( ) { <nl> + return list ; <nl> + } <nl> + <nl> + public void setList ( RealmList list ) { <nl> + this . list = list ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / realm - annotations - processor / src / test / resources / some / test / NoAccessors . java b / realm - annotations - processor / src / test / resources / some / test / NoAccessors . java <nl> index 4b52b53 . . 6c703e8 100644 <nl> - - - a / realm - annotations - processor / src / test / resources / some / test / NoAccessors . java <nl> + + + b / realm - annotations - processor / src / test / resources / some / test / NoAccessors . java <nl> @ @ - 1 , 3 + 1 , 19 @ @ <nl> + / * <nl> + * Copyright 2015 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> package io . realm . entities ; <nl> <nl> import java . util . Date ;

TEST DIFF:
diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 index 3afad19 . . 0e79776 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 @ @ - 25 , 7 + 25 , 9 @ @ import java . util . Set ; 
 import javax . annotation . processing . ProcessingEnvironment ; 
 import javax . lang . model . element . Element ; 
 import javax . lang . model . element . ElementKind ; 
 + import javax . lang . model . element . ExecutableElement ; 
 import javax . lang . model . element . Modifier ; 
 + import javax . lang . model . element . Name ; 
 import javax . lang . model . element . PackageElement ; 
 import javax . lang . model . element . TypeElement ; 
 import javax . lang . model . element . VariableElement ; 
 @ @ - 51 , 6 + 53 , 9 @ @ public class ClassMetaData { 
 private List < VariableElement > fields = new ArrayList < VariableElement > ( ) ; / / List of all fields in the class except those @ Ignored . 
 private List < VariableElement > indexedFields = new ArrayList < VariableElement > ( ) ; / / list of all fields marked @ Index . 
 private Set < VariableElement > nullableFields = new HashSet < VariableElement > ( ) ; / / Set of fields which can be nullable 
 + private boolean containsToString ; 
 + private boolean containsEquals ; 
 + private boolean containsHashCode ; 
 
 private final List < TypeMirror > validPrimaryKeyTypes ; 
 private final Types typeUtils ; 
 @ @ - 67 , 6 + 72 , 19 @ @ public class ClassMetaData { 
 typeUtils . getPrimitiveType ( TypeKind . LONG ) , 
 typeUtils . getPrimitiveType ( TypeKind . BYTE ) 
 ) ; 
 + 
 + for ( Element element : classType . getEnclosedElements ( ) ) { 
 + if ( element instanceof ExecutableElement ) { 
 + Name name = element . getSimpleName ( ) ; 
 + if ( name . contentEquals ( " toString " ) ) { 
 + this . containsToString = true ; 
 + } else if ( name . contentEquals ( " equals " ) ) { 
 + this . containsEquals = true ; 
 + } else if ( name . contentEquals ( " hashCode " ) ) { 
 + this . containsHashCode = true ; 
 + } 
 + } 
 + } 
 } 
 
 / * * 
 @ @ - 293 , 5 + 311 , 17 @ @ public class ClassMetaData { 
 } 
 return false ; 
 } 
 + 
 + public boolean containsToString ( ) { 
 + return containsToString ; 
 + } 
 + 
 + public boolean containsEquals ( ) { 
 + return containsEquals ; 
 + } 
 + 
 + public boolean containsHashCode ( ) { 
 + return containsHashCode ; 
 + } 
 } 
 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 1081782 . . 2d80bee 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 120 , 9 + 120 , 15 @ @ public class RealmProxyClassGenerator { 
 emitCopyMethod ( writer ) ; 
 emitCreateDetachedCopyMethod ( writer ) ; 
 emitUpdateMethod ( writer ) ; 
 - emitToStringMethod ( writer ) ; 
 - emitHashcodeMethod ( writer ) ; 
 - emitEqualsMethod ( writer ) ; 
 + if ( ! metadata . containsToString ( ) ) { 
 + emitToStringMethod ( writer ) ; 
 + } 
 + if ( ! metadata . containsHashCode ( ) ) { 
 + emitHashcodeMethod ( writer ) ; 
 + } 
 + if ( ! metadata . containsEquals ( ) ) { 
 + emitEqualsMethod ( writer ) ; 
 + } 
 
 / / End the class definition 
 writer . endType ( ) ; 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 index 2f764ca . . d56c728 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 @ @ - 279 , 53 + 279 , 4 @ @ public class SimpleRealmProxy extends Simple 
 return standaloneObject ; 
 } 
 
 - @ Override 
 - public String toString ( ) { 
 - if ( ! isValid ( ) ) { 
 - return " Invalid object " ; 
 - } 
 - StringBuilder stringBuilder = new StringBuilder ( " Simple = [ " ) ; 
 - stringBuilder . append ( " { name : " ) ; 
 - stringBuilder . append ( realmGetter $ name ( ) ! = null ? realmGetter $ name ( ) : " null " ) ; 
 - stringBuilder . append ( " } " ) ; 
 - stringBuilder . append ( " , " ) ; 
 - stringBuilder . append ( " { age : " ) ; 
 - stringBuilder . append ( realmGetter $ age ( ) ) ; 
 - stringBuilder . append ( " } " ) ; 
 - stringBuilder . append ( " ] " ) ; 
 - return stringBuilder . toString ( ) ; 
 - } 
 - 
 - @ Override 
 - public int hashCode ( ) { 
 - String realmName = realm . getPath ( ) ; 
 - String tableName = row . getTable ( ) . getName ( ) ; 
 - long rowIndex = row . getIndex ( ) ; 
 - 
 - int result = 17 ; 
 - result = 31 * result + ( ( realmName ! = null ) ? realmName . hashCode ( ) : 0 ) ; 
 - result = 31 * result + ( ( tableName ! = null ) ? tableName . hashCode ( ) : 0 ) ; 
 - result = 31 * result + ( int ) ( rowIndex ^ ( rowIndex > > > 32 ) ) ; 
 - return result ; 
 - } 
 - 
 - @ Override 
 - public boolean equals ( Object o ) { 
 - if ( this = = o ) return true ; 
 - if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; 
 - SimpleRealmProxy aSimple = ( SimpleRealmProxy ) o ; 
 - 
 - String path = realm . getPath ( ) ; 
 - String otherPath = aSimple . realm . getPath ( ) ; 
 - if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; ; 
 - 
 - String tableName = row . getTable ( ) . getName ( ) ; 
 - String otherTableName = aSimple . row . getTable ( ) . getName ( ) ; 
 - if ( tableName ! = null ? ! tableName . equals ( otherTableName ) : otherTableName ! = null ) return false ; 
 - 
 - if ( row . getIndex ( ) ! = aSimple . row . getIndex ( ) ) return false ; 
 - 
 - return true ; 
 - } 
 - 
 } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Simple . java b / realm / realm - annotations - processor / src / test / resources / some / test / Simple . java 
 index f79eaee . . 39d00e0 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Simple . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / some / test / Simple . java 
 @ @ - 53 , 4 + 53 , 32 @ @ public class Simple extends RealmObject { 
 public void realmSetter $ age ( int age ) { 
 this . age = age ; 
 } 
 - } 
 \ No newline at end of file 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return " Simple { " + 
 + " name = ' " + name + ' \ ' ' + 
 + " , age = " + age + 
 + ' } ' ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object o ) { 
 + if ( this = = o ) return true ; 
 + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; 
 + 
 + Simple simple = ( Simple ) o ; 
 + 
 + if ( age ! = simple . age ) return false ; 
 + if ( name ! = null ? ! name . equals ( simple . name ) : simple . name ! = null ) return false ; 
 + 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) { 
 + int result = name ! = null ? name . hashCode ( ) : 0 ; 
 + result = 31 * result + age ; 
 + return result ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index 0fde647 . . 1912025 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 11 , 6 + 11 , 7 @ @ 
 * Added a check to give a better error message when null is used as value for a primary key . 
 * Fixed unchecked cast warnings when building with Realm . 
 * Cleaned up examples ( remove old test project ) . 
 + * Added checking for missing generic type in RealmList fields in annotation processor . 
 
 0 . 80 . 3 
 * Calling Realm . copyToRealmOrUpdate ( ) with an object with a null primary key now throws a proper exception . 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 index 378bf42 . . 896e142 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import javax . lang . model . element . Modifier ; 
 import javax . lang . model . element . PackageElement ; 
 import javax . lang . model . element . TypeElement ; 
 import javax . lang . model . element . VariableElement ; 
 + import javax . lang . model . type . DeclaredType ; 
 import javax . lang . model . type . TypeKind ; 
 import javax . lang . model . type . TypeMirror ; 
 import javax . lang . model . util . Types ; 
 @ @ - 63 , 12 + 64 , 14 @ @ public class ClassMetaData { 
 
 private final List < TypeMirror > validPrimaryKeyTypes ; 
 private final Types typeUtils ; 
 + private DeclaredType realmList ; 
 
 public ClassMetaData ( ProcessingEnvironment env , TypeElement clazz ) { 
 this . classType = clazz ; 
 this . className = clazz . getSimpleName ( ) . toString ( ) ; 
 typeUtils = env . getTypeUtils ( ) ; 
 TypeMirror stringType = env . getElementUtils ( ) . getTypeElement ( " java . lang . String " ) . asType ( ) ; 
 + realmList = typeUtils . getDeclaredType ( env . getElementUtils ( ) . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; 
 validPrimaryKeyTypes = Arrays . asList ( 
 stringType , 
 typeUtils . getPrimitiveType ( TypeKind . SHORT ) , 
 @ @ - 102 , 6 + 105 , 7 @ @ public class ClassMetaData { 
 packageName = packageElement . getQualifiedName ( ) . toString ( ) ; 
 
 if ( ! categorizeClassElements ( ) ) return false ; 
 + if ( ! checkListTypes ( ) ) return false ; 
 if ( ! checkMethods ( ) ) return false ; 
 if ( ! checkDefaultConstructor ( ) ) return false ; 
 if ( ! checkRequiredGetters ( ) ) return false ; 
 @ @ - 144 , 6 + 148 , 18 @ @ public class ClassMetaData { 
 return true ; 
 } 
 
 + private boolean checkListTypes ( ) { 
 + for ( VariableElement field : fields ) { 
 + if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 + if ( Utils . getGenericType ( field ) = = null ) { 
 + Utils . error ( " No generic type supplied for field " , field ) ; 
 + return false ; 
 + } 
 + } 
 + } 
 + return true ; 
 + } 
 + 
 / / Verify that a setter is used to set a field in the model class . 
 / / Note : This is done heuristically by comparing the name of setter with the name of the field . 
 / / Annotation processors does not allow us to inspect individual statements . 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java b / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java 
 index 039140a . . b2ba192 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java 
 @ @ - 1 , 5 + 1 , 8 @ @ 
 package io . realm . processor ; 
 
 + import java . lang . reflect . ParameterizedType ; 
 + import java . util . List ; 
 + 
 import javax . annotation . processing . Messager ; 
 import javax . annotation . processing . ProcessingEnvironment ; 
 import javax . lang . model . element . Element ; 
 @ @ - 8 , 6 + 11 , 7 @ @ import javax . lang . model . element . Modifier ; 
 import javax . lang . model . element . TypeElement ; 
 import javax . lang . model . element . VariableElement ; 
 import javax . lang . model . type . DeclaredType ; 
 + import javax . lang . model . type . TypeMirror ; 
 import javax . lang . model . util . Types ; 
 import javax . tools . Diagnostic ; 
 
 @ @ - 83 , 7 + 87 , 12 @ @ public class Utils { 
 * Returns the generic type for Lists of the form { @ code List < type > } 
 * / 
 public static String getGenericType ( VariableElement field ) { 
 - String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; 
 + TypeMirror fieldType = field . asType ( ) ; 
 + List < ? extends TypeMirror > typeArguments = ( ( DeclaredType ) fieldType ) . getTypeArguments ( ) ; 
 + if ( typeArguments . size ( ) = = 0 ) { 
 + return null ; 
 + } 
 + String genericCanonicalType = ( String ) typeArguments . get ( 0 ) . toString ( ) ; 
 String genericType ; 
 if ( genericCanonicalType . contains ( " . " ) ) { 
 genericType = genericCanonicalType . substring ( genericCanonicalType . lastIndexOf ( ' . ' ) + 1 ) ; 
 diff - - git a / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java b / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 index 359175a . . 76811e0 100644 
 - - - a / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 + + + b / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 @ @ - 41 , 6 + 41 , 7 @ @ public class RealmProcessorTest { 
 private JavaFileObject noAccessorsModel = JavaFileObjects . forResource ( " some / test / NoAccessors . java " ) ; 
 private JavaFileObject fieldNamesModel = JavaFileObjects . forResource ( " some / test / FieldNames . java " ) ; 
 private JavaFileObject customAccessorModel = JavaFileObjects . forResource ( " some / test / CustomAccessor . java " ) ; 
 + private JavaFileObject missingGenericTypeModel = JavaFileObjects . forResource ( " some / test / MissingGenericType . java " ) ; 
 
 @ Test 
 public void compileSimpleFile ( ) { 
 @ @ - 219 , 6 + 220 , 14 @ @ public class RealmProcessorTest { 
 } 
 
 @ Test 
 + public void compileMissingGenericType ( ) { 
 + ASSERT . about ( javaSource ( ) ) 
 + . that ( missingGenericTypeModel ) 
 + . processedWith ( new RealmProcessor ( ) ) 
 + . failsToCompile ( ) ; 
 + } 
 + 
 + @ Test 
 public void compileFieldNamesFiles ( ) { 
 ASSERT . about ( javaSource ( ) ) 
 . that ( fieldNamesModel ) 
 diff - - git a / realm - annotations - processor / src / test / resources / some / test / MissingGenericType . java b / realm - annotations - processor / src / test / resources / some / test / MissingGenericType . java 
 new file mode 100644 
 index 0000000 . . 4636c06 
 - - - / dev / null 
 + + + b / realm - annotations - processor / src / test / resources / some / test / MissingGenericType . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + / * 
 + * Copyright 2015 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package some . test ; 
 + 
 + import io . realm . RealmObject ; 
 + import io . realm . RealmList ; 
 + 
 + class MissingGenericType extends RealmObject { 
 + private RealmList list ; / / this is an error ! 
 + 
 + public RealmList getList ( ) { 
 + return list ; 
 + } 
 + 
 + public void setList ( RealmList list ) { 
 + this . list = list ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / realm - annotations - processor / src / test / resources / some / test / NoAccessors . java b / realm - annotations - processor / src / test / resources / some / test / NoAccessors . java 
 index 4b52b53 . . 6c703e8 100644 
 - - - a / realm - annotations - processor / src / test / resources / some / test / NoAccessors . java 
 + + + b / realm - annotations - processor / src / test / resources / some / test / NoAccessors . java 
 @ @ - 1 , 3 + 1 , 19 @ @ 
 + / * 
 + * Copyright 2015 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 package io . realm . entities ; 
 
 import java . util . Date ;
