BLEU SCORE: 0.028127399371595342

TEST MSG: Add a unit tests for scenarios described in # 4093
GENERATED MSG: copyToRealmOrUpdate now works correctly with a mix of models primary keys and not .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / assets / rename - and - add - indexed . realm b / realm / realm - library / src / androidTest / assets / rename - and - add - indexed . realm <nl> new file mode 100644 <nl> index 0000000 . . 851be97 <nl> Binary files / dev / null and b / realm / realm - library / src / androidTest / assets / rename - and - add - indexed . realm differ <nl> diff - - git a / realm / realm - library / src / androidTest / assets / rename - and - add . realm b / realm / realm - library / src / androidTest / assets / rename - and - add . realm <nl> new file mode 100644 <nl> index 0000000 . . e873f83 <nl> Binary files / dev / null and b / realm / realm - library / src / androidTest / assets / rename - and - add . realm differ <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> index cb26f70 . . f3690fc 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> @ @ - 49 , 9 + 49 , 11 @ @ import io . realm . entities . PrimaryKeyAsString ; <nl> import io . realm . entities . StringOnly ; <nl> import io . realm . entities . Thread ; <nl> import io . realm . entities . migration . MigrationClassRenamed ; <nl> + import io . realm . entities . migration . MigrationFieldRenameAndAdd ; <nl> import io . realm . entities . migration . MigrationFieldRenamed ; <nl> import io . realm . entities . migration . MigrationFieldTypeToInt ; <nl> import io . realm . entities . migration . MigrationFieldTypeToInteger ; <nl> + import io . realm . entities . migration . MigrationIndexedFieldRenamed ; <nl> import io . realm . entities . migration . MigrationPosteriorIndexOnly ; <nl> import io . realm . entities . migration . MigrationPriorIndexOnly ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> @ @ - 1209 , 6 + 1211 , 75 @ @ public class RealmMigrationTests { <nl> Realm . migrateRealm ( config , migration ) ; <nl> } <nl> <nl> + @ Test <nl> + public void renameAndAddField ( ) { <nl> + final Class < MigrationFieldRenameAndAdd > schemaClass = MigrationFieldRenameAndAdd . class ; <nl> + <nl> + RealmMigration migration = new RealmMigration ( ) { <nl> + @ Override <nl> + public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { <nl> + realm . getSchema ( ) . get ( schemaClass . getSimpleName ( ) ) <nl> + . renameField ( " string1 " , " string2 " ) <nl> + . addField ( " string1 " , String . class ) ; <nl> + } <nl> + } ; <nl> + <nl> + RealmConfiguration config = configFactory . createConfigurationBuilder ( ) <nl> + . schema ( schemaClass ) <nl> + . schemaVersion ( 2 ) <nl> + . migration ( migration ) <nl> + . assetFile ( " rename - and - add . realm " ) <nl> + . build ( ) ; <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + <nl> + RealmObjectSchema schema = realm . getSchema ( ) . get ( schemaClass . getSimpleName ( ) ) ; <nl> + assertTrue ( schema . hasField ( " string1 " ) ) ; <nl> + assertTrue ( schema . hasField ( " string2 " ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void renameAndAddIndexedField ( ) { <nl> + final Class < MigrationIndexedFieldRenamed > schemaClass = MigrationIndexedFieldRenamed . class ; <nl> + final int oldTestVal = 7 ; <nl> + final Long testVal = Long . valueOf ( 293 ) ; <nl> + <nl> + RealmMigration migration = new RealmMigration ( ) { <nl> + @ Override <nl> + public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { <nl> + realm . getSchema ( ) . get ( schemaClass . getSimpleName ( ) ) <nl> + . renameField ( " testField " , " oldTestField " ) <nl> + . addField ( " testField " , Long . class ) ; <nl> + } <nl> + } ; <nl> + <nl> + RealmConfiguration config = configFactory . createConfigurationBuilder ( ) <nl> + . schema ( schemaClass ) <nl> + . schemaVersion ( 2 ) <nl> + . migration ( migration ) <nl> + . assetFile ( " rename - and - add - indexed . realm " ) <nl> + . build ( ) ; <nl> + realm = Realm . getInstance ( config ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + MigrationIndexedFieldRenamed obj = realm . createObject ( schemaClass , 2 ) ; <nl> + obj . oldTestField = oldTestVal ; <nl> + obj . testField = testVal ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + RealmObjectSchema schema = realm . getSchema ( ) . get ( schemaClass . getSimpleName ( ) ) ; <nl> + assertTrue ( schema . hasField ( " testField " ) ) ; <nl> + assertTrue ( schema . hasField ( " oldTestField " ) ) ; <nl> + assertTrue ( schema . hasIndex ( " oldTestField " ) ) ; <nl> + <nl> + RealmResults < MigrationIndexedFieldRenamed > result = realm . where ( schemaClass ) . equalTo ( " id " , 2 ) . findAll ( ) ; <nl> + assertEquals ( " There should be an object with PK = 2 " , 1 , result . size ( ) ) ; <nl> + assertEquals ( " Unexpected oldTestField value " , oldTestVal , result . first ( ) . oldTestField ) ; <nl> + assertEquals ( " Unexpected testField value " , testVal , result . first ( ) . testField ) ; <nl> + <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> / / TODO Add unit tests for default nullability <nl> / / TODO Add unit tests for default Indexing for Primary keys <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationFieldRenameAndAdd . java b / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationFieldRenameAndAdd . java <nl> new file mode 100644 <nl> index 0000000 . . bfe41a4 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationFieldRenameAndAdd . java <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . entities . migration ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + <nl> + <nl> + public class MigrationFieldRenameAndAdd extends RealmObject { <nl> + private String string1 ; / / to be renamed <nl> + private String string2 ; <nl> + <nl> + public String getString1 ( ) { <nl> + return string1 ; <nl> + } <nl> + <nl> + public void setString1 ( String string1 ) { <nl> + this . string1 = string1 ; <nl> + } <nl> + <nl> + public String getString2 ( ) { <nl> + return string2 ; <nl> + } <nl> + <nl> + public void setString2 ( String string2 ) { <nl> + this . string2 = string2 ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationIndexedFieldRenamed . java b / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationIndexedFieldRenamed . java <nl> new file mode 100644 <nl> index 0000000 . . 7b48bac <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationIndexedFieldRenamed . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . entities . migration ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + import io . realm . annotations . Index ; <nl> + import io . realm . annotations . PrimaryKey ; <nl> + <nl> + public class MigrationIndexedFieldRenamed extends RealmObject { <nl> + @ PrimaryKey <nl> + public long id ; <nl> + @ Index <nl> + public int oldTestField ; <nl> + public Long testField ; <nl> + }
NEAREST DIFF (one line): diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 4a17fb8 . . 2c4ff54 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 481 , 7 + 481 , 7 @ @ public class RealmProxyClassGenerator { <nl> ) ; <nl> <nl> if ( primaryKey = = null ) { <nl> - writer . emitStatement ( " return copy ( realm , object , false ) " ) ; <nl> + writer . emitStatement ( " return copy ( realm , object , update ) " ) ; <nl> } else { <nl> writer <nl> . emitStatement ( " % s realmObject = null " , className ) <nl> @ @ - 587 , 7 + 587 , 7 @ @ public class RealmProxyClassGenerator { <nl> writer <nl> . emitStatement ( " % s % s = newObject . % s ( ) " , Utils . getFieldTypeSimpleName ( field ) , fieldName , getters . get ( fieldName ) ) <nl> . beginControlFlow ( " if ( % s ! = null ) " , fieldName ) <nl> - . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , realm . getTable ( % s . class ) . hasPrimaryKey ( ) ) ) " , <nl> + . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , true ) ) " , <nl> setters . get ( fieldName ) , <nl> Utils . getProxyClassSimpleName ( field ) , <nl> fieldName , <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 8edcc57 . . 9b64034 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 37 , 11 + 37 , 14 @ @ import java . util . concurrent . Future ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . AllTypesPrimaryKey ; <nl> + import io . realm . entities . Cat ; <nl> import io . realm . entities . Dog ; <nl> import io . realm . entities . DogPrimaryKey ; <nl> import io . realm . entities . NonLatinFieldNames ; <nl> import io . realm . entities . Owner ; <nl> + import io . realm . entities . OwnerPrimaryKey ; <nl> import io . realm . entities . PrimaryKeyAsLong ; <nl> + import io . realm . entities . PrimaryKeyMix ; <nl> import io . realm . entities . StringOnly ; <nl> import io . realm . exceptions . RealmException ; <nl> import io . realm . exceptions . RealmIOException ; <nl> @ @ - 1173 , 7 + 1176 , 35 @ @ public class RealmTest extends AndroidTestCase { <nl> assertEquals ( 4 , testRealm . allObjects ( DogPrimaryKey . class ) . size ( ) ) ; <nl> } <nl> <nl> - public void testCopyOrUpdateIterable ( ) { <nl> + public void testCopyOrUpdatePrimaryKeyMix ( ) { <nl> + / / Crate Object graph where tier 2 consists of 1 object with primary key and one doesn ' t . <nl> + / / Tier 3 both have objects with primary keys . <nl> + / / <nl> + / / PK <nl> + / / / \ <nl> + / / PK nonPK <nl> + / / | | <nl> + / / PK PK <nl> + DogPrimaryKey dog = new DogPrimaryKey ( 1 , " Dog " ) ; <nl> + OwnerPrimaryKey owner = new OwnerPrimaryKey ( 1 , " Owner " ) ; <nl> + owner . setDog ( dog ) ; <nl> + <nl> + Cat cat = new Cat ( ) ; <nl> + cat . setScaredOfDog ( dog ) ; <nl> + <nl> + PrimaryKeyMix mixObject = new PrimaryKeyMix ( 1 ) ; <nl> + mixObject . setDogOwner ( owner ) ; <nl> + mixObject . setCat ( cat ) ; <nl> + <nl> + testRealm . beginTransaction ( ) ; <nl> + PrimaryKeyMix realmObject = testRealm . copyToRealmOrUpdate ( mixObject ) ; <nl> + testRealm . commitTransaction ( ) ; <nl> + <nl> + assertEquals ( " Dog " , realmObject . getCat ( ) . getScaredOfDog ( ) . getName ( ) ) ; <nl> + assertEquals ( " Dog " , realmObject . getDogOwner ( ) . getDog ( ) . getName ( ) ) ; <nl> + } <nl> + <nl> + public void testCopyOrUpdateIterable ( ) { <nl> testRealm . executeTransaction ( new Realm . Transaction ( ) { <nl> @ Override <nl> public void execute ( Realm realm ) { <nl> diff - - git a / realm / src / androidTest / java / io / realm / entities / Cat . java b / realm / src / androidTest / java / io / realm / entities / Cat . java <nl> index a8c2121 . . bb7a911 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / entities / Cat . java <nl> + + + b / realm / src / androidTest / java / io / realm / entities / Cat . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ public class Cat extends RealmObject { <nl> private boolean hasTail ; <nl> private Date birthday ; <nl> private Owner owner ; <nl> + private DogPrimaryKey scaredOfDog ; <nl> <nl> public Owner getOwner ( ) { <nl> return owner ; <nl> @ @ - 85 , 4 + 86 , 12 @ @ public class Cat extends RealmObject { <nl> public void setName ( String name ) { <nl> this . name = name ; <nl> } <nl> + <nl> + public DogPrimaryKey getScaredOfDog ( ) { <nl> + return scaredOfDog ; <nl> + } <nl> + <nl> + public void setScaredOfDog ( DogPrimaryKey scaredOfDog ) { <nl> + this . scaredOfDog = scaredOfDog ; <nl> + } <nl> } <nl> diff - - git a / realm / src / androidTest / java / io / realm / entities / OwnerPrimaryKey . java b / realm / src / androidTest / java / io / realm / entities / OwnerPrimaryKey . java <nl> new file mode 100644 <nl> index 0000000 . . 3a8ed2c <nl> - - - / dev / null <nl> + + + b / realm / src / androidTest / java / io / realm / entities / OwnerPrimaryKey . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . entities ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + import io . realm . annotations . PrimaryKey ; <nl> + <nl> + public class OwnerPrimaryKey extends RealmObject { <nl> + <nl> + @ PrimaryKey <nl> + private long id ; <nl> + <nl> + private String name ; <nl> + private DogPrimaryKey dog ; <nl> + <nl> + public OwnerPrimaryKey ( ) { <nl> + } <nl> + <nl> + public OwnerPrimaryKey ( long id , String name ) { <nl> + this . id = id ; <nl> + this . name = name ; <nl> + } <nl> + <nl> + public long getId ( ) { <nl> + return id ; <nl> + } <nl> + <nl> + public void setId ( long id ) { <nl> + this . id = id ; <nl> + } <nl> + <nl> + public String getName ( ) { <nl> + return name ; <nl> + } <nl> + <nl> + public void setName ( String name ) { <nl> + this . name = name ; <nl> + } <nl> + <nl> + public DogPrimaryKey getDog ( ) { <nl> + return dog ; <nl> + } <nl> + <nl> + public void setDog ( DogPrimaryKey dog ) { <nl> + this . dog = dog ; <nl> + } <nl> + } <nl> diff - - git a / realm / src / androidTest / java / io / realm / entities / PrimaryKeyMix . java b / realm / src / androidTest / java / io / realm / entities / PrimaryKeyMix . java <nl> new file mode 100644 <nl> index 0000000 . . dbdb5b3 <nl> - - - / dev / null <nl> + + + b / realm / src / androidTest / java / io / realm / entities / PrimaryKeyMix . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . entities ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + import io . realm . annotations . PrimaryKey ; <nl> + <nl> + public class PrimaryKeyMix extends RealmObject { <nl> + <nl> + @ PrimaryKey <nl> + private long id ; <nl> + <nl> + private OwnerPrimaryKey dogOwner ; <nl> + private Cat cat ; <nl> + <nl> + public PrimaryKeyMix ( ) { <nl> + <nl> + } <nl> + <nl> + public PrimaryKeyMix ( long id ) { <nl> + this . id = id ; <nl> + } <nl> + <nl> + public long getId ( ) { <nl> + return id ; <nl> + } <nl> + <nl> + public void setId ( long id ) { <nl> + this . id = id ; <nl> + } <nl> + <nl> + public OwnerPrimaryKey getDogOwner ( ) { <nl> + return dogOwner ; <nl> + } <nl> + <nl> + public void setDogOwner ( OwnerPrimaryKey dogOwner ) { <nl> + this . dogOwner = dogOwner ; <nl> + } <nl> + <nl> + public Cat getCat ( ) { <nl> + return cat ; <nl> + } <nl> + <nl> + public void setCat ( Cat cat ) { <nl> + this . cat = cat ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / assets / rename - and - add - indexed . realm b / realm / realm - library / src / androidTest / assets / rename - and - add - indexed . realm 
 new file mode 100644 
 index 0000000 . . 851be97 
 Binary files / dev / null and b / realm / realm - library / src / androidTest / assets / rename - and - add - indexed . realm differ 
 diff - - git a / realm / realm - library / src / androidTest / assets / rename - and - add . realm b / realm / realm - library / src / androidTest / assets / rename - and - add . realm 
 new file mode 100644 
 index 0000000 . . e873f83 
 Binary files / dev / null and b / realm / realm - library / src / androidTest / assets / rename - and - add . realm differ 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 index cb26f70 . . f3690fc 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 @ @ - 49 , 9 + 49 , 11 @ @ import io . realm . entities . PrimaryKeyAsString ; 
 import io . realm . entities . StringOnly ; 
 import io . realm . entities . Thread ; 
 import io . realm . entities . migration . MigrationClassRenamed ; 
 + import io . realm . entities . migration . MigrationFieldRenameAndAdd ; 
 import io . realm . entities . migration . MigrationFieldRenamed ; 
 import io . realm . entities . migration . MigrationFieldTypeToInt ; 
 import io . realm . entities . migration . MigrationFieldTypeToInteger ; 
 + import io . realm . entities . migration . MigrationIndexedFieldRenamed ; 
 import io . realm . entities . migration . MigrationPosteriorIndexOnly ; 
 import io . realm . entities . migration . MigrationPriorIndexOnly ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 @ @ - 1209 , 6 + 1211 , 75 @ @ public class RealmMigrationTests { 
 Realm . migrateRealm ( config , migration ) ; 
 } 
 
 + @ Test 
 + public void renameAndAddField ( ) { 
 + final Class < MigrationFieldRenameAndAdd > schemaClass = MigrationFieldRenameAndAdd . class ; 
 + 
 + RealmMigration migration = new RealmMigration ( ) { 
 + @ Override 
 + public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { 
 + realm . getSchema ( ) . get ( schemaClass . getSimpleName ( ) ) 
 + . renameField ( " string1 " , " string2 " ) 
 + . addField ( " string1 " , String . class ) ; 
 + } 
 + } ; 
 + 
 + RealmConfiguration config = configFactory . createConfigurationBuilder ( ) 
 + . schema ( schemaClass ) 
 + . schemaVersion ( 2 ) 
 + . migration ( migration ) 
 + . assetFile ( " rename - and - add . realm " ) 
 + . build ( ) ; 
 + Realm realm = Realm . getInstance ( config ) ; 
 + 
 + RealmObjectSchema schema = realm . getSchema ( ) . get ( schemaClass . getSimpleName ( ) ) ; 
 + assertTrue ( schema . hasField ( " string1 " ) ) ; 
 + assertTrue ( schema . hasField ( " string2 " ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + @ Test 
 + public void renameAndAddIndexedField ( ) { 
 + final Class < MigrationIndexedFieldRenamed > schemaClass = MigrationIndexedFieldRenamed . class ; 
 + final int oldTestVal = 7 ; 
 + final Long testVal = Long . valueOf ( 293 ) ; 
 + 
 + RealmMigration migration = new RealmMigration ( ) { 
 + @ Override 
 + public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { 
 + realm . getSchema ( ) . get ( schemaClass . getSimpleName ( ) ) 
 + . renameField ( " testField " , " oldTestField " ) 
 + . addField ( " testField " , Long . class ) ; 
 + } 
 + } ; 
 + 
 + RealmConfiguration config = configFactory . createConfigurationBuilder ( ) 
 + . schema ( schemaClass ) 
 + . schemaVersion ( 2 ) 
 + . migration ( migration ) 
 + . assetFile ( " rename - and - add - indexed . realm " ) 
 + . build ( ) ; 
 + realm = Realm . getInstance ( config ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + MigrationIndexedFieldRenamed obj = realm . createObject ( schemaClass , 2 ) ; 
 + obj . oldTestField = oldTestVal ; 
 + obj . testField = testVal ; 
 + realm . commitTransaction ( ) ; 
 + 
 + RealmObjectSchema schema = realm . getSchema ( ) . get ( schemaClass . getSimpleName ( ) ) ; 
 + assertTrue ( schema . hasField ( " testField " ) ) ; 
 + assertTrue ( schema . hasField ( " oldTestField " ) ) ; 
 + assertTrue ( schema . hasIndex ( " oldTestField " ) ) ; 
 + 
 + RealmResults < MigrationIndexedFieldRenamed > result = realm . where ( schemaClass ) . equalTo ( " id " , 2 ) . findAll ( ) ; 
 + assertEquals ( " There should be an object with PK = 2 " , 1 , result . size ( ) ) ; 
 + assertEquals ( " Unexpected oldTestField value " , oldTestVal , result . first ( ) . oldTestField ) ; 
 + assertEquals ( " Unexpected testField value " , testVal , result . first ( ) . testField ) ; 
 + 
 + realm . close ( ) ; 
 + } 
 + 
 / / TODO Add unit tests for default nullability 
 / / TODO Add unit tests for default Indexing for Primary keys 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationFieldRenameAndAdd . java b / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationFieldRenameAndAdd . java 
 new file mode 100644 
 index 0000000 . . bfe41a4 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationFieldRenameAndAdd . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . entities . migration ; 
 + 
 + import io . realm . RealmObject ; 
 + 
 + 
 + public class MigrationFieldRenameAndAdd extends RealmObject { 
 + private String string1 ; / / to be renamed 
 + private String string2 ; 
 + 
 + public String getString1 ( ) { 
 + return string1 ; 
 + } 
 + 
 + public void setString1 ( String string1 ) { 
 + this . string1 = string1 ; 
 + } 
 + 
 + public String getString2 ( ) { 
 + return string2 ; 
 + } 
 + 
 + public void setString2 ( String string2 ) { 
 + this . string2 = string2 ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationIndexedFieldRenamed . java b / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationIndexedFieldRenamed . java 
 new file mode 100644 
 index 0000000 . . 7b48bac 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / entities / migration / MigrationIndexedFieldRenamed . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . entities . migration ; 
 + 
 + import io . realm . RealmObject ; 
 + import io . realm . annotations . Index ; 
 + import io . realm . annotations . PrimaryKey ; 
 + 
 + public class MigrationIndexedFieldRenamed extends RealmObject { 
 + @ PrimaryKey 
 + public long id ; 
 + @ Index 
 + public int oldTestField ; 
 + public Long testField ; 
 + }

NEAREST DIFF:
diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 4a17fb8 . . 2c4ff54 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 481 , 7 + 481 , 7 @ @ public class RealmProxyClassGenerator { 
 ) ; 
 
 if ( primaryKey = = null ) { 
 - writer . emitStatement ( " return copy ( realm , object , false ) " ) ; 
 + writer . emitStatement ( " return copy ( realm , object , update ) " ) ; 
 } else { 
 writer 
 . emitStatement ( " % s realmObject = null " , className ) 
 @ @ - 587 , 7 + 587 , 7 @ @ public class RealmProxyClassGenerator { 
 writer 
 . emitStatement ( " % s % s = newObject . % s ( ) " , Utils . getFieldTypeSimpleName ( field ) , fieldName , getters . get ( fieldName ) ) 
 . beginControlFlow ( " if ( % s ! = null ) " , fieldName ) 
 - . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , realm . getTable ( % s . class ) . hasPrimaryKey ( ) ) ) " , 
 + . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , true ) ) " , 
 setters . get ( fieldName ) , 
 Utils . getProxyClassSimpleName ( field ) , 
 fieldName , 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 8edcc57 . . 9b64034 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 37 , 11 + 37 , 14 @ @ import java . util . concurrent . Future ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . AllTypesPrimaryKey ; 
 + import io . realm . entities . Cat ; 
 import io . realm . entities . Dog ; 
 import io . realm . entities . DogPrimaryKey ; 
 import io . realm . entities . NonLatinFieldNames ; 
 import io . realm . entities . Owner ; 
 + import io . realm . entities . OwnerPrimaryKey ; 
 import io . realm . entities . PrimaryKeyAsLong ; 
 + import io . realm . entities . PrimaryKeyMix ; 
 import io . realm . entities . StringOnly ; 
 import io . realm . exceptions . RealmException ; 
 import io . realm . exceptions . RealmIOException ; 
 @ @ - 1173 , 7 + 1176 , 35 @ @ public class RealmTest extends AndroidTestCase { 
 assertEquals ( 4 , testRealm . allObjects ( DogPrimaryKey . class ) . size ( ) ) ; 
 } 
 
 - public void testCopyOrUpdateIterable ( ) { 
 + public void testCopyOrUpdatePrimaryKeyMix ( ) { 
 + / / Crate Object graph where tier 2 consists of 1 object with primary key and one doesn ' t . 
 + / / Tier 3 both have objects with primary keys . 
 + / / 
 + / / PK 
 + / / / \ 
 + / / PK nonPK 
 + / / | | 
 + / / PK PK 
 + DogPrimaryKey dog = new DogPrimaryKey ( 1 , " Dog " ) ; 
 + OwnerPrimaryKey owner = new OwnerPrimaryKey ( 1 , " Owner " ) ; 
 + owner . setDog ( dog ) ; 
 + 
 + Cat cat = new Cat ( ) ; 
 + cat . setScaredOfDog ( dog ) ; 
 + 
 + PrimaryKeyMix mixObject = new PrimaryKeyMix ( 1 ) ; 
 + mixObject . setDogOwner ( owner ) ; 
 + mixObject . setCat ( cat ) ; 
 + 
 + testRealm . beginTransaction ( ) ; 
 + PrimaryKeyMix realmObject = testRealm . copyToRealmOrUpdate ( mixObject ) ; 
 + testRealm . commitTransaction ( ) ; 
 + 
 + assertEquals ( " Dog " , realmObject . getCat ( ) . getScaredOfDog ( ) . getName ( ) ) ; 
 + assertEquals ( " Dog " , realmObject . getDogOwner ( ) . getDog ( ) . getName ( ) ) ; 
 + } 
 + 
 + public void testCopyOrUpdateIterable ( ) { 
 testRealm . executeTransaction ( new Realm . Transaction ( ) { 
 @ Override 
 public void execute ( Realm realm ) { 
 diff - - git a / realm / src / androidTest / java / io / realm / entities / Cat . java b / realm / src / androidTest / java / io / realm / entities / Cat . java 
 index a8c2121 . . bb7a911 100644 
 - - - a / realm / src / androidTest / java / io / realm / entities / Cat . java 
 + + + b / realm / src / androidTest / java / io / realm / entities / Cat . java 
 @ @ - 28 , 6 + 28 , 7 @ @ public class Cat extends RealmObject { 
 private boolean hasTail ; 
 private Date birthday ; 
 private Owner owner ; 
 + private DogPrimaryKey scaredOfDog ; 
 
 public Owner getOwner ( ) { 
 return owner ; 
 @ @ - 85 , 4 + 86 , 12 @ @ public class Cat extends RealmObject { 
 public void setName ( String name ) { 
 this . name = name ; 
 } 
 + 
 + public DogPrimaryKey getScaredOfDog ( ) { 
 + return scaredOfDog ; 
 + } 
 + 
 + public void setScaredOfDog ( DogPrimaryKey scaredOfDog ) { 
 + this . scaredOfDog = scaredOfDog ; 
 + } 
 } 
 diff - - git a / realm / src / androidTest / java / io / realm / entities / OwnerPrimaryKey . java b / realm / src / androidTest / java / io / realm / entities / OwnerPrimaryKey . java 
 new file mode 100644 
 index 0000000 . . 3a8ed2c 
 - - - / dev / null 
 + + + b / realm / src / androidTest / java / io / realm / entities / OwnerPrimaryKey . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . entities ; 
 + 
 + import io . realm . RealmObject ; 
 + import io . realm . annotations . PrimaryKey ; 
 + 
 + public class OwnerPrimaryKey extends RealmObject { 
 + 
 + @ PrimaryKey 
 + private long id ; 
 + 
 + private String name ; 
 + private DogPrimaryKey dog ; 
 + 
 + public OwnerPrimaryKey ( ) { 
 + } 
 + 
 + public OwnerPrimaryKey ( long id , String name ) { 
 + this . id = id ; 
 + this . name = name ; 
 + } 
 + 
 + public long getId ( ) { 
 + return id ; 
 + } 
 + 
 + public void setId ( long id ) { 
 + this . id = id ; 
 + } 
 + 
 + public String getName ( ) { 
 + return name ; 
 + } 
 + 
 + public void setName ( String name ) { 
 + this . name = name ; 
 + } 
 + 
 + public DogPrimaryKey getDog ( ) { 
 + return dog ; 
 + } 
 + 
 + public void setDog ( DogPrimaryKey dog ) { 
 + this . dog = dog ; 
 + } 
 + } 
 diff - - git a / realm / src / androidTest / java / io / realm / entities / PrimaryKeyMix . java b / realm / src / androidTest / java / io / realm / entities / PrimaryKeyMix . java 
 new file mode 100644 
 index 0000000 . . dbdb5b3 
 - - - / dev / null 
 + + + b / realm / src / androidTest / java / io / realm / entities / PrimaryKeyMix . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . entities ; 
 + 
 + import io . realm . RealmObject ; 
 + import io . realm . annotations . PrimaryKey ; 
 + 
 + public class PrimaryKeyMix extends RealmObject { 
 + 
 + @ PrimaryKey 
 + private long id ; 
 + 
 + private OwnerPrimaryKey dogOwner ; 
 + private Cat cat ; 
 + 
 + public PrimaryKeyMix ( ) { 
 + 
 + } 
 + 
 + public PrimaryKeyMix ( long id ) { 
 + this . id = id ; 
 + } 
 + 
 + public long getId ( ) { 
 + return id ; 
 + } 
 + 
 + public void setId ( long id ) { 
 + this . id = id ; 
 + } 
 + 
 + public OwnerPrimaryKey getDogOwner ( ) { 
 + return dogOwner ; 
 + } 
 + 
 + public void setDogOwner ( OwnerPrimaryKey dogOwner ) { 
 + this . dogOwner = dogOwner ; 
 + } 
 + 
 + public Cat getCat ( ) { 
 + return cat ; 
 + } 
 + 
 + public void setCat ( Cat cat ) { 
 + this . cat = cat ; 
 + } 
 + }
