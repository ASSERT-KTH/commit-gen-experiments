BLEU SCORE: 0.024675789207681903

TEST MSG: Address the first wave of review comments
GENERATED MSG: Started using Transform API for byte - code weaving

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index d368f89 . . a7fce2e 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 43 , 7 + 43 , 7 @ @ task connectedCheck ( type : GradleBuild ) { <nl> <nl> task installRealm ( type : GradleBuild ) { <nl> group = ' Install ' <nl> - description = ' Install the artifacts of Realm project into mavenLocal ( ) ' <nl> + description = ' Install the artifacts of Realm libraries into mavenLocal ( ) ' <nl> buildFile = file ( ' realm / build . gradle ' ) <nl> tasks = [ ' install ' , ' uploadShadow ' ] <nl> } <nl> diff - - git a / gradle - plugin / build . gradle b / gradle - plugin / build . gradle <nl> index d3f9607 . . 9312047 100644 <nl> - - - a / gradle - plugin / build . gradle <nl> + + + b / gradle - plugin / build . gradle <nl> @ @ - 25 , 7 + 25 , 7 @ @ dependencies { <nl> compile ' com . android . tools . build : transform - api : 1 . 5 . 0 ' <nl> compile ' com . android . tools . build : gradle : 1 . 5 . 0 ' <nl> compile ' org . javassist : javassist : 3 . 20 . 0 - GA ' <nl> - compile ' org . jetbrains . kotlin : kotlin - gradle - plugin : 1 . 0 . 0 - beta - 3595 ' <nl> + compile ' org . jetbrains . kotlin : kotlin - gradle - plugin : 1 . 0 . 0 - beta - 4589 ' <nl> compile " io . realm : realm - annotations : $ { version } " <nl> compile " io . realm : realm - android : $ { version } @ jar " <nl> <nl> diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / BytecodeModifier . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / BytecodeModifier . groovy <nl> index 81fe380 . . 956ef1f 100644 <nl> - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / BytecodeModifier . groovy <nl> + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / BytecodeModifier . groovy <nl> @ @ - 27 , 26 + 27 , 40 @ @ import javassist . expr . FieldAccess <nl> import org . slf4j . Logger <nl> import org . slf4j . LoggerFactory <nl> <nl> + / * * <nl> + * This class encapsulates the bytecode manipulation code needed to transform model classes <nl> + * and the classes using them . <nl> + * / <nl> class BytecodeModifier { <nl> + <nl> + private static final Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) <nl> + <nl> + / * * <nl> + * Adds Realm specific accessors to a model class . <nl> + * <nl> + * @ param clazz the CtClass to add accessors to . <nl> + * All the declared fields will be associated with a getter and a setter . <nl> + * / <nl> public static void addRealmAccessors ( CtClass clazz ) { <nl> - Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) <nl> logger . info " Realm : Adding accessors to $ { clazz . simpleName } " <nl> + def methods = clazz . getDeclaredMethods ( ) * . name <nl> clazz . declaredFields . each { CtField field - > <nl> - try { <nl> - clazz . getDeclaredMethod ( " realmGetter \ $ $ { field . name } " ) <nl> - } catch ( NotFoundException ignored ) { <nl> + if ( ! methods . contains ( " realmGetter \ $ $ { field . name } " ) ) { <nl> clazz . addMethod ( CtNewMethod . getter ( " realmGetter \ $ $ { field . name } " , field ) ) <nl> } <nl> - try { <nl> - clazz . getDeclaredMethod ( " realmSetter \ $ $ { field . name } " ) <nl> - } catch ( NotFoundException ignored ) { <nl> + if ( ! methods . contains ( " realmSetter \ $ $ { field . name } " ) ) { <nl> clazz . addMethod ( CtNewMethod . setter ( " realmSetter \ $ $ { field . name } " , field ) ) <nl> } <nl> } <nl> } <nl> <nl> + / * * <nl> + * Modify a class replacing field accesses with the appropriate Realm accessors <nl> + * <nl> + * @ param clazz The CtClass to modify <nl> + * @ param managedFields List of fields whose access should be replaced <nl> + * / <nl> public static void useRealmAccessors ( CtClass clazz , List < CtField > managedFields ) { <nl> - Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) <nl> clazz . getDeclaredBehaviors ( ) . each { behavior - > <nl> logger . info " Behavior : $ { behavior . name } " <nl> if ( ! behavior . name . startsWith ( ' realmGetter $ ' ) & & ! behavior . name . startsWith ( ' realmSetter $ ' ) ) { <nl> @ @ - 55 , 10 + 69 , 14 @ @ class BytecodeModifier { <nl> } <nl> } <nl> <nl> + / * * <nl> + * This class goes through all the behaviours of a class and replaces field accesses with <nl> + * the appropriate accessor . <nl> + * / <nl> private static class ExpressionEditor extends ExprEditor { <nl> - List < CtField > managedFields <nl> - CtClass ctClass <nl> - CtBehavior behavior <nl> + final List < CtField > managedFields <nl> + final CtClass ctClass <nl> + final CtBehavior behavior <nl> <nl> ExpressionEditor ( List < CtField > managedFields , CtClass ctClass , CtBehavior behavior ) { <nl> this . managedFields = managedFields <nl> @ @ - 68 , 16 + 86 , 12 @ @ class BytecodeModifier { <nl> <nl> @ Override <nl> void edit ( FieldAccess fieldAccess ) throws CannotCompileException { <nl> - Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) <nl> try { <nl> logger . info " Field being accessed : $ { fieldAccess . className } . $ { fieldAccess . fieldName } " <nl> - def flag = false <nl> - managedFields . each { <nl> - if ( fieldAccess . className . equals ( it . declaringClass . name ) & & fieldAccess . fieldName . equals ( it . name ) ) { <nl> - flag = true <nl> - } <nl> + def isRealmFieldAccess = managedFields . find { <nl> + fieldAccess . className . equals ( it . declaringClass . name ) & & fieldAccess . fieldName . equals ( it . name ) <nl> } <nl> - if ( flag ) { <nl> + if ( isRealmFieldAccess ! = null ) { <nl> logger . info " Realm : Manipulating $ { ctClass . simpleName } . $ { behavior . name } ( ) : $ { fieldAccess . fieldName } " <nl> logger . info " Methods : $ { ctClass . declaredMethods } " <nl> def fieldName = fieldAccess . fieldName <nl> diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy <nl> index 1998871 . . 41f3a97 100644 <nl> - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy <nl> + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy <nl> @ @ - 15 , 7 + 15 , 6 @ @ <nl> * / <nl> <nl> package io . realm . gradle <nl> - <nl> import com . android . build . api . transform . * <nl> import com . google . common . collect . BiMap <nl> import com . google . common . collect . HashBiMap <nl> @ @ - 28 , 8 + 27 , 12 @ @ import javassist . LoaderClassPath <nl> import org . slf4j . Logger <nl> import org . slf4j . LoggerFactory <nl> <nl> - import static com . android . build . api . transform . QualifiedContent . * <nl> + import java . lang . reflect . Modifier <nl> <nl> + import static com . android . build . api . transform . QualifiedContent . * <nl> + / * * <nl> + * This class implements the Transform API provided by the Android Gradle plugin <nl> + * / <nl> class RealmTransformer extends Transform { <nl> <nl> private Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) <nl> @ @ - 46 , 8 + 49 , 7 @ @ class RealmTransformer extends Transform { <nl> <nl> @ Override <nl> Set < Scope > getScopes ( ) { <nl> - return Sets . immutableEnumSet ( <nl> - Scope . PROJECT ) <nl> + return Sets . immutableEnumSet ( Scope . PROJECT ) <nl> } <nl> <nl> @ Override <nl> @ @ - 60 , 6 + 62 , 7 @ @ class RealmTransformer extends Transform { <nl> TransformOutputProvider outputProvider , boolean isIncremental ) <nl> throws IOException , TransformException , InterruptedException { <nl> <nl> + / / Find all the possible sources of relevant class files <nl> final ArrayList < File > folders = [ ] <nl> inputs . each { TransformInput input - > <nl> logger . info " Directory inputs : $ { input . directoryInputs * . file } " <nl> @ @ - 71 , 7 + 74 , 7 @ @ class RealmTransformer extends Transform { <nl> folders . addAll ( input . jarInputs * . file ) <nl> } <nl> <nl> - <nl> + / / Find all the class files in the sources found <nl> BiMap < File , String > classFiles = HashBiMap . create ( ) <nl> <nl> folders . each { File folder - > <nl> @ @ - 88 , 7 + 91 , 9 @ @ class RealmTransformer extends Transform { <nl> } <nl> } <nl> <nl> - / / Don ' t use ClassPool . getDefault ( ) . Doing so consecutive builds in the same run ( e . g . debug + release ) <nl> + / / Create and populate the Javassist class pool <nl> + <nl> + / / Don ' t use ClassPool . getDefault ( ) . Doing consecutive builds in the same run ( e . g . debug + release ) <nl> / / will use a cached object and all the classes will result frozen . <nl> ClassPool classPool = new ClassPool ( null ) <nl> classPool . appendSystemPath ( ) <nl> @ @ - 98 , 26 + 103 , 29 @ @ class RealmTransformer extends Transform { <nl> classPool . appendClassPath ( folder . canonicalPath ) <nl> } <nl> <nl> - logger . info " Contains io . realm . RealmList : $ { classPool . getOrNull ( ' io . realm . RealmList ' ) } " <nl> - <nl> + / / Find the proxy classes <nl> def proxyClasses = classFiles . findAll { key , value - > key . name . endsWith ( ' RealmProxy . class ' ) } <nl> logger . info " Proxy Classes : $ { proxyClasses * . value } " <nl> <nl> + / / Find the model classes <nl> def modelClasses = proxyClasses . collect { key , value - > <nl> classPool . getCtClass ( classFiles . get ( key ) ) . superclass <nl> } <nl> logger . info " Model Classes : $ { modelClasses * . name } " <nl> <nl> + / / Populate a list of the fields that need to be managed with bytecode manipulation <nl> def managedFields = [ ] <nl> modelClasses . each { <nl> managedFields . addAll ( it . declaredFields . findAll { <nl> - it . getAnnotation ( Ignore . class ) = = null <nl> + it . getAnnotation ( Ignore . class ) = = null & & ! Modifier . isStatic ( it . getModifiers ( ) ) <nl> } ) <nl> } <nl> logger . info " Managed Fields : $ { managedFields * . name } " <nl> <nl> + / / Add accessors to the model classes <nl> modelClasses . each { BytecodeModifier . addRealmAccessors ( it ) } <nl> <nl> + / / Use accessors instead of direct field access <nl> classFiles . each { key , value - > <nl> logger . info " Modifying class $ { value } " <nl> def ctClass = classPool . getCtClass ( value ) <nl> diff - - git a / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy <nl> index 66fb29a . . e7be7c0 100644 <nl> - - - a / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy <nl> + + + b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy <nl> @ @ - 45 , 7 + 45 , 7 @ @ class PluginTest { <nl> } <nl> <nl> @ Test <nl> - public void testPlugin ( ) { <nl> + public void pluginAddsRightDependencies ( ) { <nl> project . buildscript { <nl> repositories { <nl> mavenLocal ( ) <nl> @ @ - 66 , 11 + 66 , 11 @ @ class PluginTest { <nl> assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - android - library ' , currentVersion ) ) <nl> assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - annotations ' , currentVersion ) ) <nl> <nl> - assertTrue ( containsTransform ( project . android . transforms , RealmTransformer . class ) ) ; <nl> + assertTrue ( containsTransform ( project . android . transforms , RealmTransformer . class ) ) <nl> } <nl> <nl> @ Test <nl> - public void testWithoutAndroidPlugin ( ) { <nl> + public void pluginFailsWithoutAndroidPlugin ( ) { <nl> project . buildscript { <nl> repositories { <nl> mavenLocal ( ) <nl> @ @ - 122 , 9 + 122 , 9 @ @ class PluginTest { <nl> private static boolean containsTransform ( List < Transform > transformList , Class < ? extends Transform > targetClass ) { <nl> for ( Transform t : transformList ) { <nl> if ( t . getClass ( ) = = targetClass ) { <nl> - return true ; <nl> + return true <nl> } <nl> } <nl> - return false ; <nl> + return false <nl> } <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java <nl> index 0fc0611 . . 472e2e8 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java <nl> @ @ - 270 , 13 + 270 , 13 @ @ public class RealmJsonTypeHelper { <nl> writer <nl> . beginControlFlow ( " if ( json . has ( \ " % s \ " ) ) " , fieldName ) <nl> . beginControlFlow ( " if ( json . isNull ( \ " % s \ " ) ) " , fieldName ) <nl> - . emitStatement ( " obj = ( % sRealmProxy ) realm . createObject ( % s . class , null ) " , qualifiedRealmObjectClass , qualifiedRealmObjectClass ) <nl> + . emitStatement ( " obj = ( % 1 $ sRealmProxy ) realm . createObject ( % 1 $ s . class , null ) " , qualifiedRealmObjectClass ) <nl> . nextControlFlow ( " else " ) <nl> - . emitStatement ( " obj = ( % sRealmProxy ) realm . createObject ( % s . class , json . get % s ( \ " % s \ " ) ) " , <nl> - qualifiedRealmObjectClass , qualifiedRealmObjectClass , jsonType , fieldName ) <nl> + . emitStatement ( " obj = ( % 1 $ sRealmProxy ) realm . createObject ( % 1 $ s . class , json . get % 2 $ s ( \ " % 3 $ s \ " ) ) " , <nl> + qualifiedRealmObjectClass , jsonType , fieldName ) <nl> . endControlFlow ( ) <nl> . nextControlFlow ( " else " ) <nl> - . emitStatement ( " obj = ( % sRealmProxy ) realm . createObject ( % s . class ) " , qualifiedRealmObjectClass , qualifiedRealmObjectClass ) <nl> + . emitStatement ( " obj = ( % 1 $ sRealmProxy ) realm . createObject ( % 1 $ s . class ) " , qualifiedRealmObjectClass ) <nl> . endControlFlow ( ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index e88886d . . 81c872d 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 666 , 7 + 666 , 8 @ @ public class RealmProxyClassGenerator { <nl> className , / / Return type <nl> " copy " , / / Method name <nl> EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers <nl> - " Realm " , " realm " , className , " from " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , " cache " ) ; / / Argument type & argument name <nl> + " Realm " , " realm " , className , " from " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , <nl> + " cache " ) ; / / Argument type & argument name <nl> <nl> writer . emitStatement ( " final boolean isStandalone = ! ( from instanceof % sRealmProxy ) " , className ) ; <nl> writer . emitStatement ( " Class < ? extends % s > clazz " , className ) ; <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Final . java b / realm / realm - annotations - processor / src / test / resources / some / test / Final . java <nl> index bbbfac0 . . 69f438e 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Final . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / some / test / Final . java <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> / * <nl> - * Copyright 2014 Realm Inc . <nl> + * Copyright 2016 Realm Inc . <nl> * <nl> * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> * you may not use this file except in compliance with the License . <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Transient . java b / realm / realm - annotations - processor / src / test / resources / some / test / Transient . java <nl> index 9e66138 . . 721fc62 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Transient . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / some / test / Transient . java <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> / * <nl> - * Copyright 2014 Realm Inc . <nl> + * Copyright 2016 Realm Inc . <nl> * <nl> * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> * you may not use this file except in compliance with the License . <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Volatile . java b / realm / realm - annotations - processor / src / test / resources / some / test / Volatile . java <nl> index cdfc649 . . b494d46 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Volatile . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / some / test / Volatile . java <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> / * <nl> - * Copyright 2014 Realm Inc . <nl> + * Copyright 2016 Realm Inc . <nl> * <nl> * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> * you may not use this file except in compliance with the License .
NEAREST DIFF (one line): diff - - git a / examples / build . gradle b / examples / build . gradle <nl> index 83cf3b1 . . c07e671 100644 <nl> - - - a / examples / build . gradle <nl> + + + b / examples / build . gradle <nl> @ @ - 15 , 7 + 15 , 7 @ @ allprojects { <nl> jcenter ( ) <nl> } <nl> dependencies { <nl> - classpath ' com . android . tools . build : gradle : 1 . 2 . 3 ' <nl> + classpath ' com . android . tools . build : gradle : 1 . 5 . 0 ' <nl> classpath ' com . jfrog . bintray . gradle : gradle - bintray - plugin : 1 . 2 ' <nl> classpath ' com . jakewharton . sdkmanager : gradle - plugin : 0 . 12 . 0 ' <nl> classpath ' com . novoda : gradle - android - command - plugin : 1 . 3 . 0 ' <nl> diff - - git a / examples / kotlinExample / build . gradle b / examples / kotlinExample / build . gradle <nl> index 2f88e38 . . 440a01c 100644 <nl> - - - a / examples / kotlinExample / build . gradle <nl> + + + b / examples / kotlinExample / build . gradle <nl> @ @ - 49 , 7 + 49 , 7 @ @ dependencies { <nl> compile " org . jetbrains . kotlin : kotlin - stdlib : $ { kotlin _ version } " <nl> compile " org . jetbrains . kotlin : kotlin - reflect : $ { kotlin _ version } " <nl> compile ' org . jetbrains . anko : anko - sdk15 : 0 . 7 . 2 ' <nl> - compile " io . realm : realm - android : $ { version } @ aar " <nl> + compile " io . realm : realm - android - library : $ { version } @ aar " <nl> compile " io . realm : realm - annotations : $ { version } " <nl> kapt " io . realm : realm - annotations - processor : $ { version } " <nl> } <nl> diff - - git a / gradle - plugin / build . gradle b / gradle - plugin / build . gradle <nl> index 331065c . . ee402fb 100644 <nl> - - - a / gradle - plugin / build . gradle <nl> + + + b / gradle - plugin / build . gradle <nl> @ @ - 8 , 21 + 8 , 25 @ @ props . each { key , val - > <nl> } <nl> <nl> repositories { <nl> + mavenLocal ( ) <nl> jcenter ( ) <nl> } <nl> <nl> - dependencies { <nl> - compile gradleApi ( ) <nl> - compile localGroovy ( ) <nl> - compile ' com . neenbedankt . gradle . plugins : android - apt : 1 . 8 ' <nl> - } <nl> - <nl> sourceCompatibility = 1 . 6 <nl> targetCompatibility = 1 . 6 <nl> <nl> group = ' io . realm ' <nl> version = file ( " $ { projectDir } / . . / version . txt " ) . text . trim ( ) ; <nl> <nl> + dependencies { <nl> + compile gradleApi ( ) <nl> + compile localGroovy ( ) <nl> + compile ' com . neenbedankt . gradle . plugins : android - apt : 1 . 8 ' <nl> + compile ' com . android . tools . build : transform - api : 1 . 5 . 0 ' <nl> + compile ' org . javassist : javassist : 3 . 20 . 0 - GA ' <nl> + compile " io . realm : realm - annotations : $ { version } " <nl> + } <nl> + <nl> / / for Ant filter <nl> import org . apache . tools . ant . filters . ReplaceTokens <nl> <nl> diff - - git a / gradle - plugin / gradle / wrapper / gradle - wrapper . properties b / gradle - plugin / gradle / wrapper / gradle - wrapper . properties <nl> index 274aa16 . . 24d56cf 100644 <nl> - - - a / gradle - plugin / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle - plugin / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Fri Oct 16 12 : 55 : 34 CEST 2015 <nl> + # Tue Dec 01 10 : 58 : 39 CET 2015 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 2 . 7 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 2 . 7 - all . zip <nl> diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> index 5323e78 . . a344001 100644 <nl> - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> @ @ - 9 , 6 + 9 , 7 @ @ class Realm implements Plugin < Project > { <nl> @ Override <nl> void apply ( Project project ) { <nl> project . plugins . apply ( AndroidAptPlugin ) <nl> + project . android . registerTransform ( new RealmTransformer ( ) ) <nl> project . repositories . add ( project . getRepositories ( ) . jcenter ( ) ) ; <nl> project . dependencies . add ( " compile " , " io . realm : realm - android - library : $ { Version . VERSION } " ) ; <nl> project . dependencies . add ( " compile " , " io . realm : realm - annotations : $ { Version . VERSION } " ) ; <nl> diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy <nl> new file mode 100644 <nl> index 0000000 . . 294ba68 <nl> - - - / dev / null <nl> + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy <nl> @ @ - 0 , 0 + 1 , 166 @ @ <nl> + package io . realm . gradle <nl> + import com . android . build . api . transform . * <nl> + import com . google . common . collect . BiMap <nl> + import com . google . common . collect . HashBiMap <nl> + import com . google . common . collect . ImmutableSet <nl> + import com . google . common . collect . Sets <nl> + import groovy . io . FileType <nl> + import io . realm . annotations . Ignore <nl> + import javassist . * <nl> + import javassist . expr . ExprEditor <nl> + import javassist . expr . FieldAccess <nl> + <nl> + import static com . android . build . api . transform . QualifiedContent . * <nl> + <nl> + class RealmTransformer extends Transform { <nl> + <nl> + @ Override <nl> + String getName ( ) { <nl> + return " RealmTransformer " <nl> + } <nl> + <nl> + @ Override <nl> + Set < ContentType > getInputTypes ( ) { <nl> + return ImmutableSet . < ContentType > of ( DefaultContentType . CLASSES ) <nl> + } <nl> + <nl> + @ Override <nl> + Set < Scope > getScopes ( ) { <nl> + return Sets . immutableEnumSet ( <nl> + Scope . PROJECT ) <nl> + } <nl> + <nl> + @ Override <nl> + boolean isIncremental ( ) { <nl> + return true <nl> + } <nl> + <nl> + @ Override <nl> + void transform ( Context context , Collection < TransformInput > inputs , Collection < TransformInput > referencedInputs , <nl> + TransformOutputProvider outputProvider , boolean isIncremental ) <nl> + throws IOException , TransformException , InterruptedException { <nl> + <nl> + final ArrayList < File > folders = [ ] <nl> + inputs . each { TransformInput input - > <nl> + println " Directory inputs : $ { input . directoryInputs * . file } " <nl> + folders . addAll ( input . directoryInputs * . file ) <nl> + } <nl> + <nl> + referencedInputs . each { TransformInput input - > <nl> + folders . addAll ( input . directoryInputs * . file ) <nl> + folders . addAll ( input . jarInputs * . file ) <nl> + } <nl> + <nl> + <nl> + BiMap < File , String > classFiles = HashBiMap . create ( ) <nl> + <nl> + folders . each { File folder - > <nl> + folder . eachFileRecurse ( FileType . FILES ) { File file - > <nl> + if ( file . name . endsWith ( ' . class ' ) ) { <nl> + classFiles . put ( <nl> + file , <nl> + file . canonicalPath <nl> + . replace ( folder . canonicalPath , ' ' ) <nl> + . replaceFirst ( ' / ' , ' ' ) <nl> + . replace ( ' / ' , ' . ' ) <nl> + . replace ( ' . class ' , ' ' ) ) <nl> + } <nl> + } <nl> + } <nl> + <nl> + / / Don ' t use ClassPool . getDefault ( ) . Doing so consecutive builds in the same run ( e . g . debug + release ) <nl> + / / will use a cached object and all the classes will result frozen . <nl> + ClassPool classPool = new ClassPool ( null ) <nl> + classPool . appendSystemPath ( ) <nl> + <nl> + folders . each { File folder - > <nl> + classPool . appendClassPath ( folder . canonicalPath ) <nl> + } <nl> + <nl> + def proxyClasses = classFiles . findAll { key , value - > key . name . endsWith ( ' RealmProxy . class ' ) } <nl> + println " Proxy Classes : $ { proxyClasses * . value } " <nl> + <nl> + def modelClasses = proxyClasses . collect { key , value - > <nl> + classPool . getCtClass ( classFiles . get ( key ) ) . superclass <nl> + } <nl> + println " Model Classes : $ { modelClasses * . name } " <nl> + <nl> + def managedFields = [ ] <nl> + modelClasses . each { managedFields . addAll ( it . declaredFields ) } <nl> + println " Managed Fields : $ { managedFields * . name } " <nl> + <nl> + modelClasses . each { addRealmAccessors ( it ) } <nl> + <nl> + classFiles . each { key , value - > <nl> + println " Modifying class $ { value } " <nl> + def ctClass = classPool . getCtClass ( value ) <nl> + useRealmAccessors ( ctClass , managedFields ) <nl> + ctClass . writeFile ( outputProvider . getContentLocation ( <nl> + ' realm ' , getInputTypes ( ) , getScopes ( ) , Format . DIRECTORY ) . canonicalPath ) <nl> + } <nl> + } <nl> + <nl> + private void useRealmAccessors ( CtClass clazz , List < CtField > managedFields ) { <nl> + clazz . getDeclaredBehaviors ( ) . each { behavior - > <nl> + println " Behavior : $ { behavior . name } " <nl> + if ( ! behavior . name . startsWith ( ' realmGetter $ ' ) & & ! behavior . name . startsWith ( ' realmSetter $ ' ) ) { <nl> + behavior . instrument ( new ExpressionEditor ( managedFields , clazz , behavior ) ) <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void addRealmAccessors ( CtClass clazz ) { <nl> + println ( " Realm : Adding accessors to $ { clazz . simpleName } " ) <nl> + clazz . declaredFields . each { CtField field - > <nl> + if ( field . getAnnotation ( Ignore . class ) = = null ) { <nl> + try { <nl> + clazz . getDeclaredMethod ( " realmGetter \ $ $ { field . name } " ) <nl> + } catch ( NotFoundException ignored ) { <nl> + clazz . addMethod ( CtNewMethod . getter ( " realmGetter \ $ $ { field . name } " , field ) ) <nl> + } <nl> + try { <nl> + clazz . getDeclaredMethod ( " realmSetter \ $ $ { field . name } " ) <nl> + } catch ( NotFoundException ignored ) { <nl> + clazz . addMethod ( CtNewMethod . setter ( " realmSetter \ $ $ { field . name } " , field ) ) <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + private class ExpressionEditor extends ExprEditor { <nl> + List < CtField > managedFields <nl> + CtClass ctClass <nl> + CtBehavior behavior <nl> + <nl> + ExpressionEditor ( List < CtField > managedFields , CtClass ctClass , CtBehavior behavior ) { <nl> + this . managedFields = managedFields <nl> + this . ctClass = ctClass <nl> + this . behavior = behavior <nl> + } <nl> + <nl> + @ Override <nl> + void edit ( FieldAccess fieldAccess ) throws CannotCompileException { <nl> + try { <nl> + println " Field being accessed : $ { fieldAccess . className } . $ { fieldAccess . fieldName } " <nl> + def flag = false <nl> + managedFields . each { <nl> + if ( fieldAccess . className . equals ( it . declaringClass . name ) & & fieldAccess . fieldName . equals ( it . name ) ) { <nl> + flag = true <nl> + } <nl> + } <nl> + if ( flag ) { <nl> + println ( " Realm : Manipulating $ { ctClass . simpleName } . $ { behavior . name } ( ) : $ { fieldAccess . fieldName } " ) <nl> + println ( " Methods : $ { ctClass . declaredMethods } " ) <nl> + def fieldName = fieldAccess . fieldName <nl> + if ( fieldAccess . isReader ( ) ) { <nl> + fieldAccess . replace ( ' $ _ = $ 0 . realmGetter $ ' + fieldName + ' ( ) ; ' ) <nl> + } else if ( fieldAccess . isWriter ( ) ) { <nl> + fieldAccess . replace ( ' $ 0 . realmSetter $ ' + fieldName + ' ( $ 1 ) ; ' ) <nl> + } <nl> + } <nl> + } catch ( NotFoundException ignored ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index d368f89 . . a7fce2e 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 43 , 7 + 43 , 7 @ @ task connectedCheck ( type : GradleBuild ) { 
 
 task installRealm ( type : GradleBuild ) { 
 group = ' Install ' 
 - description = ' Install the artifacts of Realm project into mavenLocal ( ) ' 
 + description = ' Install the artifacts of Realm libraries into mavenLocal ( ) ' 
 buildFile = file ( ' realm / build . gradle ' ) 
 tasks = [ ' install ' , ' uploadShadow ' ] 
 } 
 diff - - git a / gradle - plugin / build . gradle b / gradle - plugin / build . gradle 
 index d3f9607 . . 9312047 100644 
 - - - a / gradle - plugin / build . gradle 
 + + + b / gradle - plugin / build . gradle 
 @ @ - 25 , 7 + 25 , 7 @ @ dependencies { 
 compile ' com . android . tools . build : transform - api : 1 . 5 . 0 ' 
 compile ' com . android . tools . build : gradle : 1 . 5 . 0 ' 
 compile ' org . javassist : javassist : 3 . 20 . 0 - GA ' 
 - compile ' org . jetbrains . kotlin : kotlin - gradle - plugin : 1 . 0 . 0 - beta - 3595 ' 
 + compile ' org . jetbrains . kotlin : kotlin - gradle - plugin : 1 . 0 . 0 - beta - 4589 ' 
 compile " io . realm : realm - annotations : $ { version } " 
 compile " io . realm : realm - android : $ { version } @ jar " 
 
 diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / BytecodeModifier . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / BytecodeModifier . groovy 
 index 81fe380 . . 956ef1f 100644 
 - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / BytecodeModifier . groovy 
 + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / BytecodeModifier . groovy 
 @ @ - 27 , 26 + 27 , 40 @ @ import javassist . expr . FieldAccess 
 import org . slf4j . Logger 
 import org . slf4j . LoggerFactory 
 
 + / * * 
 + * This class encapsulates the bytecode manipulation code needed to transform model classes 
 + * and the classes using them . 
 + * / 
 class BytecodeModifier { 
 + 
 + private static final Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) 
 + 
 + / * * 
 + * Adds Realm specific accessors to a model class . 
 + * 
 + * @ param clazz the CtClass to add accessors to . 
 + * All the declared fields will be associated with a getter and a setter . 
 + * / 
 public static void addRealmAccessors ( CtClass clazz ) { 
 - Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) 
 logger . info " Realm : Adding accessors to $ { clazz . simpleName } " 
 + def methods = clazz . getDeclaredMethods ( ) * . name 
 clazz . declaredFields . each { CtField field - > 
 - try { 
 - clazz . getDeclaredMethod ( " realmGetter \ $ $ { field . name } " ) 
 - } catch ( NotFoundException ignored ) { 
 + if ( ! methods . contains ( " realmGetter \ $ $ { field . name } " ) ) { 
 clazz . addMethod ( CtNewMethod . getter ( " realmGetter \ $ $ { field . name } " , field ) ) 
 } 
 - try { 
 - clazz . getDeclaredMethod ( " realmSetter \ $ $ { field . name } " ) 
 - } catch ( NotFoundException ignored ) { 
 + if ( ! methods . contains ( " realmSetter \ $ $ { field . name } " ) ) { 
 clazz . addMethod ( CtNewMethod . setter ( " realmSetter \ $ $ { field . name } " , field ) ) 
 } 
 } 
 } 
 
 + / * * 
 + * Modify a class replacing field accesses with the appropriate Realm accessors 
 + * 
 + * @ param clazz The CtClass to modify 
 + * @ param managedFields List of fields whose access should be replaced 
 + * / 
 public static void useRealmAccessors ( CtClass clazz , List < CtField > managedFields ) { 
 - Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) 
 clazz . getDeclaredBehaviors ( ) . each { behavior - > 
 logger . info " Behavior : $ { behavior . name } " 
 if ( ! behavior . name . startsWith ( ' realmGetter $ ' ) & & ! behavior . name . startsWith ( ' realmSetter $ ' ) ) { 
 @ @ - 55 , 10 + 69 , 14 @ @ class BytecodeModifier { 
 } 
 } 
 
 + / * * 
 + * This class goes through all the behaviours of a class and replaces field accesses with 
 + * the appropriate accessor . 
 + * / 
 private static class ExpressionEditor extends ExprEditor { 
 - List < CtField > managedFields 
 - CtClass ctClass 
 - CtBehavior behavior 
 + final List < CtField > managedFields 
 + final CtClass ctClass 
 + final CtBehavior behavior 
 
 ExpressionEditor ( List < CtField > managedFields , CtClass ctClass , CtBehavior behavior ) { 
 this . managedFields = managedFields 
 @ @ - 68 , 16 + 86 , 12 @ @ class BytecodeModifier { 
 
 @ Override 
 void edit ( FieldAccess fieldAccess ) throws CannotCompileException { 
 - Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) 
 try { 
 logger . info " Field being accessed : $ { fieldAccess . className } . $ { fieldAccess . fieldName } " 
 - def flag = false 
 - managedFields . each { 
 - if ( fieldAccess . className . equals ( it . declaringClass . name ) & & fieldAccess . fieldName . equals ( it . name ) ) { 
 - flag = true 
 - } 
 + def isRealmFieldAccess = managedFields . find { 
 + fieldAccess . className . equals ( it . declaringClass . name ) & & fieldAccess . fieldName . equals ( it . name ) 
 } 
 - if ( flag ) { 
 + if ( isRealmFieldAccess ! = null ) { 
 logger . info " Realm : Manipulating $ { ctClass . simpleName } . $ { behavior . name } ( ) : $ { fieldAccess . fieldName } " 
 logger . info " Methods : $ { ctClass . declaredMethods } " 
 def fieldName = fieldAccess . fieldName 
 diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy 
 index 1998871 . . 41f3a97 100644 
 - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy 
 + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy 
 @ @ - 15 , 7 + 15 , 6 @ @ 
 * / 
 
 package io . realm . gradle 
 - 
 import com . android . build . api . transform . * 
 import com . google . common . collect . BiMap 
 import com . google . common . collect . HashBiMap 
 @ @ - 28 , 8 + 27 , 12 @ @ import javassist . LoaderClassPath 
 import org . slf4j . Logger 
 import org . slf4j . LoggerFactory 
 
 - import static com . android . build . api . transform . QualifiedContent . * 
 + import java . lang . reflect . Modifier 
 
 + import static com . android . build . api . transform . QualifiedContent . * 
 + / * * 
 + * This class implements the Transform API provided by the Android Gradle plugin 
 + * / 
 class RealmTransformer extends Transform { 
 
 private Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) 
 @ @ - 46 , 8 + 49 , 7 @ @ class RealmTransformer extends Transform { 
 
 @ Override 
 Set < Scope > getScopes ( ) { 
 - return Sets . immutableEnumSet ( 
 - Scope . PROJECT ) 
 + return Sets . immutableEnumSet ( Scope . PROJECT ) 
 } 
 
 @ Override 
 @ @ - 60 , 6 + 62 , 7 @ @ class RealmTransformer extends Transform { 
 TransformOutputProvider outputProvider , boolean isIncremental ) 
 throws IOException , TransformException , InterruptedException { 
 
 + / / Find all the possible sources of relevant class files 
 final ArrayList < File > folders = [ ] 
 inputs . each { TransformInput input - > 
 logger . info " Directory inputs : $ { input . directoryInputs * . file } " 
 @ @ - 71 , 7 + 74 , 7 @ @ class RealmTransformer extends Transform { 
 folders . addAll ( input . jarInputs * . file ) 
 } 
 
 - 
 + / / Find all the class files in the sources found 
 BiMap < File , String > classFiles = HashBiMap . create ( ) 
 
 folders . each { File folder - > 
 @ @ - 88 , 7 + 91 , 9 @ @ class RealmTransformer extends Transform { 
 } 
 } 
 
 - / / Don ' t use ClassPool . getDefault ( ) . Doing so consecutive builds in the same run ( e . g . debug + release ) 
 + / / Create and populate the Javassist class pool 
 + 
 + / / Don ' t use ClassPool . getDefault ( ) . Doing consecutive builds in the same run ( e . g . debug + release ) 
 / / will use a cached object and all the classes will result frozen . 
 ClassPool classPool = new ClassPool ( null ) 
 classPool . appendSystemPath ( ) 
 @ @ - 98 , 26 + 103 , 29 @ @ class RealmTransformer extends Transform { 
 classPool . appendClassPath ( folder . canonicalPath ) 
 } 
 
 - logger . info " Contains io . realm . RealmList : $ { classPool . getOrNull ( ' io . realm . RealmList ' ) } " 
 - 
 + / / Find the proxy classes 
 def proxyClasses = classFiles . findAll { key , value - > key . name . endsWith ( ' RealmProxy . class ' ) } 
 logger . info " Proxy Classes : $ { proxyClasses * . value } " 
 
 + / / Find the model classes 
 def modelClasses = proxyClasses . collect { key , value - > 
 classPool . getCtClass ( classFiles . get ( key ) ) . superclass 
 } 
 logger . info " Model Classes : $ { modelClasses * . name } " 
 
 + / / Populate a list of the fields that need to be managed with bytecode manipulation 
 def managedFields = [ ] 
 modelClasses . each { 
 managedFields . addAll ( it . declaredFields . findAll { 
 - it . getAnnotation ( Ignore . class ) = = null 
 + it . getAnnotation ( Ignore . class ) = = null & & ! Modifier . isStatic ( it . getModifiers ( ) ) 
 } ) 
 } 
 logger . info " Managed Fields : $ { managedFields * . name } " 
 
 + / / Add accessors to the model classes 
 modelClasses . each { BytecodeModifier . addRealmAccessors ( it ) } 
 
 + / / Use accessors instead of direct field access 
 classFiles . each { key , value - > 
 logger . info " Modifying class $ { value } " 
 def ctClass = classPool . getCtClass ( value ) 
 diff - - git a / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy 
 index 66fb29a . . e7be7c0 100644 
 - - - a / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy 
 + + + b / gradle - plugin / src / test / groovy / io / realm / gradle / PluginTest . groovy 
 @ @ - 45 , 7 + 45 , 7 @ @ class PluginTest { 
 } 
 
 @ Test 
 - public void testPlugin ( ) { 
 + public void pluginAddsRightDependencies ( ) { 
 project . buildscript { 
 repositories { 
 mavenLocal ( ) 
 @ @ - 66 , 11 + 66 , 11 @ @ class PluginTest { 
 assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - android - library ' , currentVersion ) ) 
 assertTrue ( containsDependency ( project . dependencies , ' io . realm ' , ' realm - annotations ' , currentVersion ) ) 
 
 - assertTrue ( containsTransform ( project . android . transforms , RealmTransformer . class ) ) ; 
 + assertTrue ( containsTransform ( project . android . transforms , RealmTransformer . class ) ) 
 } 
 
 @ Test 
 - public void testWithoutAndroidPlugin ( ) { 
 + public void pluginFailsWithoutAndroidPlugin ( ) { 
 project . buildscript { 
 repositories { 
 mavenLocal ( ) 
 @ @ - 122 , 9 + 122 , 9 @ @ class PluginTest { 
 private static boolean containsTransform ( List < Transform > transformList , Class < ? extends Transform > targetClass ) { 
 for ( Transform t : transformList ) { 
 if ( t . getClass ( ) = = targetClass ) { 
 - return true ; 
 + return true 
 } 
 } 
 - return false ; 
 + return false 
 } 
 } 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java 
 index 0fc0611 . . 472e2e8 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java 
 @ @ - 270 , 13 + 270 , 13 @ @ public class RealmJsonTypeHelper { 
 writer 
 . beginControlFlow ( " if ( json . has ( \ " % s \ " ) ) " , fieldName ) 
 . beginControlFlow ( " if ( json . isNull ( \ " % s \ " ) ) " , fieldName ) 
 - . emitStatement ( " obj = ( % sRealmProxy ) realm . createObject ( % s . class , null ) " , qualifiedRealmObjectClass , qualifiedRealmObjectClass ) 
 + . emitStatement ( " obj = ( % 1 $ sRealmProxy ) realm . createObject ( % 1 $ s . class , null ) " , qualifiedRealmObjectClass ) 
 . nextControlFlow ( " else " ) 
 - . emitStatement ( " obj = ( % sRealmProxy ) realm . createObject ( % s . class , json . get % s ( \ " % s \ " ) ) " , 
 - qualifiedRealmObjectClass , qualifiedRealmObjectClass , jsonType , fieldName ) 
 + . emitStatement ( " obj = ( % 1 $ sRealmProxy ) realm . createObject ( % 1 $ s . class , json . get % 2 $ s ( \ " % 3 $ s \ " ) ) " , 
 + qualifiedRealmObjectClass , jsonType , fieldName ) 
 . endControlFlow ( ) 
 . nextControlFlow ( " else " ) 
 - . emitStatement ( " obj = ( % sRealmProxy ) realm . createObject ( % s . class ) " , qualifiedRealmObjectClass , qualifiedRealmObjectClass ) 
 + . emitStatement ( " obj = ( % 1 $ sRealmProxy ) realm . createObject ( % 1 $ s . class ) " , qualifiedRealmObjectClass ) 
 . endControlFlow ( ) ; 
 } 
 } 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index e88886d . . 81c872d 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 666 , 7 + 666 , 8 @ @ public class RealmProxyClassGenerator { 
 className , / / Return type 
 " copy " , / / Method name 
 EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers 
 - " Realm " , " realm " , className , " from " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , " cache " ) ; / / Argument type & argument name 
 + " Realm " , " realm " , className , " from " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , 
 + " cache " ) ; / / Argument type & argument name 
 
 writer . emitStatement ( " final boolean isStandalone = ! ( from instanceof % sRealmProxy ) " , className ) ; 
 writer . emitStatement ( " Class < ? extends % s > clazz " , className ) ; 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Final . java b / realm / realm - annotations - processor / src / test / resources / some / test / Final . java 
 index bbbfac0 . . 69f438e 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Final . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / some / test / Final . java 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 / * 
 - * Copyright 2014 Realm Inc . 
 + * Copyright 2016 Realm Inc . 
 * 
 * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 * you may not use this file except in compliance with the License . 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Transient . java b / realm / realm - annotations - processor / src / test / resources / some / test / Transient . java 
 index 9e66138 . . 721fc62 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Transient . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / some / test / Transient . java 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 / * 
 - * Copyright 2014 Realm Inc . 
 + * Copyright 2016 Realm Inc . 
 * 
 * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 * you may not use this file except in compliance with the License . 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Volatile . java b / realm / realm - annotations - processor / src / test / resources / some / test / Volatile . java 
 index cdfc649 . . b494d46 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / some / test / Volatile . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / some / test / Volatile . java 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 / * 
 - * Copyright 2014 Realm Inc . 
 + * Copyright 2016 Realm Inc . 
 * 
 * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 * you may not use this file except in compliance with the License .

NEAREST DIFF:
diff - - git a / examples / build . gradle b / examples / build . gradle 
 index 83cf3b1 . . c07e671 100644 
 - - - a / examples / build . gradle 
 + + + b / examples / build . gradle 
 @ @ - 15 , 7 + 15 , 7 @ @ allprojects { 
 jcenter ( ) 
 } 
 dependencies { 
 - classpath ' com . android . tools . build : gradle : 1 . 2 . 3 ' 
 + classpath ' com . android . tools . build : gradle : 1 . 5 . 0 ' 
 classpath ' com . jfrog . bintray . gradle : gradle - bintray - plugin : 1 . 2 ' 
 classpath ' com . jakewharton . sdkmanager : gradle - plugin : 0 . 12 . 0 ' 
 classpath ' com . novoda : gradle - android - command - plugin : 1 . 3 . 0 ' 
 diff - - git a / examples / kotlinExample / build . gradle b / examples / kotlinExample / build . gradle 
 index 2f88e38 . . 440a01c 100644 
 - - - a / examples / kotlinExample / build . gradle 
 + + + b / examples / kotlinExample / build . gradle 
 @ @ - 49 , 7 + 49 , 7 @ @ dependencies { 
 compile " org . jetbrains . kotlin : kotlin - stdlib : $ { kotlin _ version } " 
 compile " org . jetbrains . kotlin : kotlin - reflect : $ { kotlin _ version } " 
 compile ' org . jetbrains . anko : anko - sdk15 : 0 . 7 . 2 ' 
 - compile " io . realm : realm - android : $ { version } @ aar " 
 + compile " io . realm : realm - android - library : $ { version } @ aar " 
 compile " io . realm : realm - annotations : $ { version } " 
 kapt " io . realm : realm - annotations - processor : $ { version } " 
 } 
 diff - - git a / gradle - plugin / build . gradle b / gradle - plugin / build . gradle 
 index 331065c . . ee402fb 100644 
 - - - a / gradle - plugin / build . gradle 
 + + + b / gradle - plugin / build . gradle 
 @ @ - 8 , 21 + 8 , 25 @ @ props . each { key , val - > 
 } 
 
 repositories { 
 + mavenLocal ( ) 
 jcenter ( ) 
 } 
 
 - dependencies { 
 - compile gradleApi ( ) 
 - compile localGroovy ( ) 
 - compile ' com . neenbedankt . gradle . plugins : android - apt : 1 . 8 ' 
 - } 
 - 
 sourceCompatibility = 1 . 6 
 targetCompatibility = 1 . 6 
 
 group = ' io . realm ' 
 version = file ( " $ { projectDir } / . . / version . txt " ) . text . trim ( ) ; 
 
 + dependencies { 
 + compile gradleApi ( ) 
 + compile localGroovy ( ) 
 + compile ' com . neenbedankt . gradle . plugins : android - apt : 1 . 8 ' 
 + compile ' com . android . tools . build : transform - api : 1 . 5 . 0 ' 
 + compile ' org . javassist : javassist : 3 . 20 . 0 - GA ' 
 + compile " io . realm : realm - annotations : $ { version } " 
 + } 
 + 
 / / for Ant filter 
 import org . apache . tools . ant . filters . ReplaceTokens 
 
 diff - - git a / gradle - plugin / gradle / wrapper / gradle - wrapper . properties b / gradle - plugin / gradle / wrapper / gradle - wrapper . properties 
 index 274aa16 . . 24d56cf 100644 
 - - - a / gradle - plugin / gradle / wrapper / gradle - wrapper . properties 
 + + + b / gradle - plugin / gradle / wrapper / gradle - wrapper . properties 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 - # Fri Oct 16 12 : 55 : 34 CEST 2015 
 + # Tue Dec 01 10 : 58 : 39 CET 2015 
 distributionBase = GRADLE _ USER _ HOME 
 distributionPath = wrapper / dists 
 zipStoreBase = GRADLE _ USER _ HOME 
 zipStorePath = wrapper / dists 
 - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 2 . 7 - bin . zip 
 + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 2 . 7 - all . zip 
 diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 index 5323e78 . . a344001 100644 
 - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 @ @ - 9 , 6 + 9 , 7 @ @ class Realm implements Plugin < Project > { 
 @ Override 
 void apply ( Project project ) { 
 project . plugins . apply ( AndroidAptPlugin ) 
 + project . android . registerTransform ( new RealmTransformer ( ) ) 
 project . repositories . add ( project . getRepositories ( ) . jcenter ( ) ) ; 
 project . dependencies . add ( " compile " , " io . realm : realm - android - library : $ { Version . VERSION } " ) ; 
 project . dependencies . add ( " compile " , " io . realm : realm - annotations : $ { Version . VERSION } " ) ; 
 diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy 
 new file mode 100644 
 index 0000000 . . 294ba68 
 - - - / dev / null 
 + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy 
 @ @ - 0 , 0 + 1 , 166 @ @ 
 + package io . realm . gradle 
 + import com . android . build . api . transform . * 
 + import com . google . common . collect . BiMap 
 + import com . google . common . collect . HashBiMap 
 + import com . google . common . collect . ImmutableSet 
 + import com . google . common . collect . Sets 
 + import groovy . io . FileType 
 + import io . realm . annotations . Ignore 
 + import javassist . * 
 + import javassist . expr . ExprEditor 
 + import javassist . expr . FieldAccess 
 + 
 + import static com . android . build . api . transform . QualifiedContent . * 
 + 
 + class RealmTransformer extends Transform { 
 + 
 + @ Override 
 + String getName ( ) { 
 + return " RealmTransformer " 
 + } 
 + 
 + @ Override 
 + Set < ContentType > getInputTypes ( ) { 
 + return ImmutableSet . < ContentType > of ( DefaultContentType . CLASSES ) 
 + } 
 + 
 + @ Override 
 + Set < Scope > getScopes ( ) { 
 + return Sets . immutableEnumSet ( 
 + Scope . PROJECT ) 
 + } 
 + 
 + @ Override 
 + boolean isIncremental ( ) { 
 + return true 
 + } 
 + 
 + @ Override 
 + void transform ( Context context , Collection < TransformInput > inputs , Collection < TransformInput > referencedInputs , 
 + TransformOutputProvider outputProvider , boolean isIncremental ) 
 + throws IOException , TransformException , InterruptedException { 
 + 
 + final ArrayList < File > folders = [ ] 
 + inputs . each { TransformInput input - > 
 + println " Directory inputs : $ { input . directoryInputs * . file } " 
 + folders . addAll ( input . directoryInputs * . file ) 
 + } 
 + 
 + referencedInputs . each { TransformInput input - > 
 + folders . addAll ( input . directoryInputs * . file ) 
 + folders . addAll ( input . jarInputs * . file ) 
 + } 
 + 
 + 
 + BiMap < File , String > classFiles = HashBiMap . create ( ) 
 + 
 + folders . each { File folder - > 
 + folder . eachFileRecurse ( FileType . FILES ) { File file - > 
 + if ( file . name . endsWith ( ' . class ' ) ) { 
 + classFiles . put ( 
 + file , 
 + file . canonicalPath 
 + . replace ( folder . canonicalPath , ' ' ) 
 + . replaceFirst ( ' / ' , ' ' ) 
 + . replace ( ' / ' , ' . ' ) 
 + . replace ( ' . class ' , ' ' ) ) 
 + } 
 + } 
 + } 
 + 
 + / / Don ' t use ClassPool . getDefault ( ) . Doing so consecutive builds in the same run ( e . g . debug + release ) 
 + / / will use a cached object and all the classes will result frozen . 
 + ClassPool classPool = new ClassPool ( null ) 
 + classPool . appendSystemPath ( ) 
 + 
 + folders . each { File folder - > 
 + classPool . appendClassPath ( folder . canonicalPath ) 
 + } 
 + 
 + def proxyClasses = classFiles . findAll { key , value - > key . name . endsWith ( ' RealmProxy . class ' ) } 
 + println " Proxy Classes : $ { proxyClasses * . value } " 
 + 
 + def modelClasses = proxyClasses . collect { key , value - > 
 + classPool . getCtClass ( classFiles . get ( key ) ) . superclass 
 + } 
 + println " Model Classes : $ { modelClasses * . name } " 
 + 
 + def managedFields = [ ] 
 + modelClasses . each { managedFields . addAll ( it . declaredFields ) } 
 + println " Managed Fields : $ { managedFields * . name } " 
 + 
 + modelClasses . each { addRealmAccessors ( it ) } 
 + 
 + classFiles . each { key , value - > 
 + println " Modifying class $ { value } " 
 + def ctClass = classPool . getCtClass ( value ) 
 + useRealmAccessors ( ctClass , managedFields ) 
 + ctClass . writeFile ( outputProvider . getContentLocation ( 
 + ' realm ' , getInputTypes ( ) , getScopes ( ) , Format . DIRECTORY ) . canonicalPath ) 
 + } 
 + } 
 + 
 + private void useRealmAccessors ( CtClass clazz , List < CtField > managedFields ) { 
 + clazz . getDeclaredBehaviors ( ) . each { behavior - > 
 + println " Behavior : $ { behavior . name } " 
 + if ( ! behavior . name . startsWith ( ' realmGetter $ ' ) & & ! behavior . name . startsWith ( ' realmSetter $ ' ) ) { 
 + behavior . instrument ( new ExpressionEditor ( managedFields , clazz , behavior ) ) 
 + } 
 + } 
 + } 
 + 
 + private static void addRealmAccessors ( CtClass clazz ) { 
 + println ( " Realm : Adding accessors to $ { clazz . simpleName } " ) 
 + clazz . declaredFields . each { CtField field - > 
 + if ( field . getAnnotation ( Ignore . class ) = = null ) { 
 + try { 
 + clazz . getDeclaredMethod ( " realmGetter \ $ $ { field . name } " ) 
 + } catch ( NotFoundException ignored ) { 
 + clazz . addMethod ( CtNewMethod . getter ( " realmGetter \ $ $ { field . name } " , field ) ) 
 + } 
 + try { 
 + clazz . getDeclaredMethod ( " realmSetter \ $ $ { field . name } " ) 
 + } catch ( NotFoundException ignored ) { 
 + clazz . addMethod ( CtNewMethod . setter ( " realmSetter \ $ $ { field . name } " , field ) ) 
 + } 
 + } 
 + } 
 + } 
 + 
 + private class ExpressionEditor extends ExprEditor { 
 + List < CtField > managedFields 
 + CtClass ctClass 
 + CtBehavior behavior 
 + 
 + ExpressionEditor ( List < CtField > managedFields , CtClass ctClass , CtBehavior behavior ) { 
 + this . managedFields = managedFields 
 + this . ctClass = ctClass 
 + this . behavior = behavior 
 + } 
 + 
 + @ Override 
 + void edit ( FieldAccess fieldAccess ) throws CannotCompileException { 
 + try { 
 + println " Field being accessed : $ { fieldAccess . className } . $ { fieldAccess . fieldName } " 
 + def flag = false 
 + managedFields . each { 
 + if ( fieldAccess . className . equals ( it . declaringClass . name ) & & fieldAccess . fieldName . equals ( it . name ) ) { 
 + flag = true 
 + } 
 + } 
 + if ( flag ) { 
 + println ( " Realm : Manipulating $ { ctClass . simpleName } . $ { behavior . name } ( ) : $ { fieldAccess . fieldName } " ) 
 + println ( " Methods : $ { ctClass . declaredMethods } " ) 
 + def fieldName = fieldAccess . fieldName 
 + if ( fieldAccess . isReader ( ) ) { 
 + fieldAccess . replace ( ' $ _ = $ 0 . realmGetter $ ' + fieldName + ' ( ) ; ' ) 
 + } else if ( fieldAccess . isWriter ( ) ) { 
 + fieldAccess . replace ( ' $ 0 . realmSetter $ ' + fieldName + ' ( $ 1 ) ; ' ) 
 + } 
 + } 
 + } catch ( NotFoundException ignored ) { 
 + } 
 + } 
 + } 
 + 
 + }
