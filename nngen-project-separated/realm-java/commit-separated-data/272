BLEU SCORE: 0.018738883683389617

TEST MSG: use fail ( ) instead of assert ( false ) .
GENERATED MSG: Fixed code layout

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java <nl> index 33e47f8 . . 26182e5 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java <nl> @ @ - 444 , 57 + 444 , 60 @ @ public class JNIQueryTest extends TestCase { <nl> <nl> / / Compares strings in non string columns . <nl> for ( int i = 0 ; i < = 6 ; i + + ) { <nl> - try { query . equalTo ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . notEqualTo ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . beginsWith ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . endsWith ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . like ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . contains ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + if ( i ! = 6 ) { <nl> + try { query . equalTo ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . notEqualTo ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . beginsWith ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . endsWith ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . like ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . contains ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + } <nl> } <nl> <nl> + <nl> / / Compares integer in non integer columns . <nl> for ( int i = 0 ; i < = 6 ; i + + ) { <nl> if ( i ! = 5 ) { <nl> - try { query . equalTo ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . lessThan ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . between ( new long [ ] { i } , 123 , 321 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . equalTo ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . lessThan ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . between ( new long [ ] { i } , 123 , 321 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> } <nl> } <nl> <nl> / / Compares float in non float columns . <nl> for ( int i = 0 ; i < = 6 ; i + + ) { <nl> if ( i ! = 4 ) { <nl> - try { query . equalTo ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . lessThan ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . between ( new long [ ] { i } , 123F , 321F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . equalTo ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . lessThan ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . between ( new long [ ] { i } , 123F , 321F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> } <nl> } <nl> <nl> / / Compares double in non double columns . <nl> for ( int i = 0 ; i < = 6 ; i + + ) { <nl> if ( i ! = 3 ) { <nl> - try { query . equalTo ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . lessThan ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . between ( new long [ ] { i } , 123D , 321D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . equalTo ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . lessThan ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . between ( new long [ ] { i } , 123D , 321D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> } <nl> } <nl> <nl> / / Compares boolean in non boolean columns . <nl> for ( int i = 0 ; i < = 6 ; i + + ) { <nl> if ( i ! = 1 ) { <nl> - try { query . equalTo ( new long [ ] { i } , oneNullTable , true ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . equalTo ( new long [ ] { i } , oneNullTable , true ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> } <nl> } <nl> <nl> @ @ - 502 , 12 + 505 , 12 @ @ public class JNIQueryTest extends TestCase { <nl> / * TODO : <nl> for ( int i = 0 ; i < = 8 ; i + + ) { <nl> if ( i ! = 2 ) { <nl> - try { query . equal ( i , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . lessThan ( i , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . lessThanOrEqual ( i , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . greaterThan ( i , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . greaterThanOrEqual ( i , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . between ( i , new Date ( ) , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . equal ( i , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . lessThan ( i , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . lessThanOrEqual ( i , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . greaterThan ( i , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . greaterThanOrEqual ( i , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . between ( i , new Date ( ) , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> } <nl> } <nl> * / <nl> @ @ - 520 , 98 + 523 , 98 @ @ public class JNIQueryTest extends TestCase { <nl> / / Queries the table . <nl> TableQuery query = table . where ( ) ; <nl> <nl> - try { query . minimumInt ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumInt ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumInt ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumInt ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - <nl> - try { query . maximumInt ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumInt ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumInt ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumInt ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - <nl> - try { query . sumInt ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumInt ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumInt ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumInt ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - <nl> - try { query . averageInt ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageInt ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageInt ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageInt ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumInt ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumFloat ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumDouble ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumInt ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumFloat ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumDouble ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumInt ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumFloat ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumDouble ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumInt ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumFloat ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . minimumDouble ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + <nl> + try { query . maximumInt ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumFloat ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumDouble ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumInt ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumFloat ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumDouble ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumInt ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumFloat ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumDouble ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumInt ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumFloat ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . maximumDouble ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + <nl> + try { query . sumInt ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumFloat ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumDouble ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumInt ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumFloat ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumDouble ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumInt ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumFloat ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumDouble ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumInt ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumFloat ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . sumDouble ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + <nl> + try { query . averageInt ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageFloat ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageDouble ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageInt ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageFloat ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageDouble ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageInt ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageFloat ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageDouble ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageInt ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageFloat ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> + try { query . averageDouble ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } <nl> / / Out of bounds for string <nl> - try { query . equalTo ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . beginsWith ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . endsWith ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . like ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . contains ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> + try { query . equalTo ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . beginsWith ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . endsWith ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . like ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . contains ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> <nl> <nl> / / Out of bounds for integer <nl> - try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . between ( new long [ ] { 7 } , 123 , 321 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> + try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . between ( new long [ ] { 7 } , 123 , 321 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> <nl> <nl> / / Out of bounds for float <nl> - try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . between ( new long [ ] { 7 } , 123F , 321F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> + try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . between ( new long [ ] { 7 } , 123F , 321F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> <nl> <nl> / / Out of bounds for double <nl> - try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> - try { query . between ( new long [ ] { 7 } , 123D , 321D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> + try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> + try { query . between ( new long [ ] { 7 } , 123D , 321D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> <nl> <nl> / / Out of bounds for boolean <nl> - try { query . equalTo ( new long [ ] { 7 } , oneNullTable , true ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } <nl> + try { query . equalTo ( new long [ ] { 7 } , oneNullTable , true ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } <nl> } <nl> <nl> public void testMaximumDate ( ) {
NEAREST DIFF (one line): diff - - git a / tightdb - java - test / src / test / java / com / tightdb / JNIQueryTest . java b / tightdb - java - test / src / test / java / com / tightdb / JNIQueryTest . java <nl> index 0a71d8e . . db6344d 100644 <nl> - - - a / tightdb - java - test / src / test / java / com / tightdb / JNIQueryTest . java <nl> + + + b / tightdb - java - test / src / test / java / com / tightdb / JNIQueryTest . java <nl> @ @ - 133 , 81 + 133 , 81 @ @ public class JNIQueryTest { <nl> / / Query the table <nl> TableQuery query = table . where ( ) ; <nl> <nl> - try { query . minimum ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimum ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimum ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimum ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimum ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumFloat ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumDouble ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimum ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumFloat ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . minimumDouble ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - <nl> - try { query . maximum ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximum ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximum ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximum ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximum ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumFloat ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumDouble ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximum ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumFloat ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . maximumDouble ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - <nl> - try { query . sum ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sum ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sum ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sum ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sum ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumFloat ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumDouble ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sum ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumFloat ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . sumDouble ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - <nl> - try { query . average ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . average ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . average ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . average ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . average ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageFloat ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageDouble ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . average ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageFloat ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> - try { query . averageDouble ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimum ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimum ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimum ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + 	 	 try { query . minimumDouble ( 2 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimum ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimum ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumFloat ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumDouble ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimum ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumFloat ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . minimumDouble ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + <nl> + try { query . maximum ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximum ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumDouble ( 1 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximum ( 2 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumFloat ( 2 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumDouble ( 2 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximum ( 6 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumFloat ( 6 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumDouble ( 6 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximum ( 7 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumFloat ( 7 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumDouble ( 7 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximum ( 8 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumFloat ( 8 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . maximumDouble ( 8 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + <nl> + try { query . sum ( 0 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumFloat ( 0 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumDouble ( 0 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sum ( 1 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumFloat ( 1 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumDouble ( 1 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sum ( 2 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumFloat ( 2 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumDouble ( 2 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sum ( 6 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumFloat ( 6 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumDouble ( 6 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sum ( 7 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumFloat ( 7 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumDouble ( 7 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sum ( 8 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumFloat ( 8 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . sumDouble ( 8 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + <nl> + try { query . average ( 0 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageFloat ( 0 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageDouble ( 0 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . average ( 1 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageFloat ( 1 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageDouble ( 1 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . average ( 2 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageFloat ( 2 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageDouble ( 2 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . average ( 6 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageFloat ( 6 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageDouble ( 6 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . average ( 7 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageFloat ( 7 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageDouble ( 7 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . average ( 8 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageFloat ( 8 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> + try { query . averageDouble ( 8 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } <nl> <nl> } <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java 
 index 33e47f8 . . 26182e5 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIQueryTest . java 
 @ @ - 444 , 57 + 444 , 60 @ @ public class JNIQueryTest extends TestCase { 
 
 / / Compares strings in non string columns . 
 for ( int i = 0 ; i < = 6 ; i + + ) { 
 - try { query . equalTo ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . notEqualTo ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . beginsWith ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . endsWith ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . like ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . contains ( new long [ ] { i } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + if ( i ! = 6 ) { 
 + try { query . equalTo ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . notEqualTo ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . beginsWith ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . endsWith ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . like ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . contains ( new long [ ] { i } , oneNullTable , " string " ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + } 
 } 
 
 + 
 / / Compares integer in non integer columns . 
 for ( int i = 0 ; i < = 6 ; i + + ) { 
 if ( i ! = 5 ) { 
 - try { query . equalTo ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . lessThan ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . between ( new long [ ] { i } , 123 , 321 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . equalTo ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . lessThan ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . between ( new long [ ] { i } , 123 , 321 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 } 
 } 
 
 / / Compares float in non float columns . 
 for ( int i = 0 ; i < = 6 ; i + + ) { 
 if ( i ! = 4 ) { 
 - try { query . equalTo ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . lessThan ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . between ( new long [ ] { i } , 123F , 321F ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . equalTo ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . lessThan ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . between ( new long [ ] { i } , 123F , 321F ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 } 
 } 
 
 / / Compares double in non double columns . 
 for ( int i = 0 ; i < = 6 ; i + + ) { 
 if ( i ! = 3 ) { 
 - try { query . equalTo ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . lessThan ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . between ( new long [ ] { i } , 123D , 321D ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . equalTo ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . notEqualTo ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . lessThan ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . lessThanOrEqual ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . greaterThan ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . greaterThanOrEqual ( new long [ ] { i } , oneNullTable , 123D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . between ( new long [ ] { i } , 123D , 321D ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 } 
 } 
 
 / / Compares boolean in non boolean columns . 
 for ( int i = 0 ; i < = 6 ; i + + ) { 
 if ( i ! = 1 ) { 
 - try { query . equalTo ( new long [ ] { i } , oneNullTable , true ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . equalTo ( new long [ ] { i } , oneNullTable , true ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 } 
 } 
 
 @ @ - 502 , 12 + 505 , 12 @ @ public class JNIQueryTest extends TestCase { 
 / * TODO : 
 for ( int i = 0 ; i < = 8 ; i + + ) { 
 if ( i ! = 2 ) { 
 - try { query . equal ( i , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . lessThan ( i , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . lessThanOrEqual ( i , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . greaterThan ( i , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . greaterThanOrEqual ( i , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . between ( i , new Date ( ) , new Date ( ) ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . equal ( i , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . lessThan ( i , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . lessThanOrEqual ( i , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . greaterThan ( i , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . greaterThanOrEqual ( i , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . between ( i , new Date ( ) , new Date ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 } 
 } 
 * / 
 @ @ - 520 , 98 + 523 , 98 @ @ public class JNIQueryTest extends TestCase { 
 / / Queries the table . 
 TableQuery query = table . where ( ) ; 
 
 - try { query . minimumInt ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumInt ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumInt ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumInt ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - 
 - try { query . maximumInt ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumInt ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumInt ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumInt ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - 
 - try { query . sumInt ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumInt ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumInt ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumInt ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - 
 - try { query . averageInt ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageInt ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageInt ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageInt ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumInt ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumFloat ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumDouble ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumInt ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumFloat ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumDouble ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumInt ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumFloat ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumDouble ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumInt ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumFloat ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . minimumDouble ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + 
 + try { query . maximumInt ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumFloat ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumDouble ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumInt ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumFloat ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumDouble ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumInt ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumFloat ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumDouble ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumInt ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumFloat ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . maximumDouble ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + 
 + try { query . sumInt ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumFloat ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumDouble ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumInt ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumFloat ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumDouble ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumInt ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumFloat ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumDouble ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumInt ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumFloat ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . sumDouble ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + 
 + try { query . averageInt ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageFloat ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageDouble ( 0 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageInt ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageFloat ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageDouble ( 1 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageInt ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageFloat ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageDouble ( 2 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageInt ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageFloat ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 + try { query . averageDouble ( 6 ) ; fail ( ) ; } catch ( IllegalArgumentException ignore ) { } 
 / / Out of bounds for string 
 - try { query . equalTo ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . beginsWith ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . endsWith ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . like ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . contains ( new long [ ] { 7 } , oneNullTable , " string " ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 + try { query . equalTo ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . beginsWith ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . endsWith ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . like ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . contains ( new long [ ] { 7 } , oneNullTable , " string " ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 
 
 / / Out of bounds for integer 
 - try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . between ( new long [ ] { 7 } , 123 , 321 ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 + try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . between ( new long [ ] { 7 } , 123 , 321 ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 
 
 / / Out of bounds for float 
 - try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . between ( new long [ ] { 7 } , 123F , 321F ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 + try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . between ( new long [ ] { 7 } , 123F , 321F ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 
 
 / / Out of bounds for double 
 - try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 - try { query . between ( new long [ ] { 7 } , 123D , 321D ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 + try { query . equalTo ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . notEqualTo ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . lessThan ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . lessThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . greaterThan ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . greaterThanOrEqual ( new long [ ] { 7 } , oneNullTable , 123D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 + try { query . between ( new long [ ] { 7 } , 123D , 321D ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 
 
 / / Out of bounds for boolean 
 - try { query . equalTo ( new long [ ] { 7 } , oneNullTable , true ) ; assert ( false ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } 
 + try { query . equalTo ( new long [ ] { 7 } , oneNullTable , true ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException ignore ) { } 
 } 
 
 public void testMaximumDate ( ) {

NEAREST DIFF:
diff - - git a / tightdb - java - test / src / test / java / com / tightdb / JNIQueryTest . java b / tightdb - java - test / src / test / java / com / tightdb / JNIQueryTest . java 
 index 0a71d8e . . db6344d 100644 
 - - - a / tightdb - java - test / src / test / java / com / tightdb / JNIQueryTest . java 
 + + + b / tightdb - java - test / src / test / java / com / tightdb / JNIQueryTest . java 
 @ @ - 133 , 81 + 133 , 81 @ @ public class JNIQueryTest { 
 / / Query the table 
 TableQuery query = table . where ( ) ; 
 
 - try { query . minimum ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimum ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimum ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimum ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimum ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumFloat ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumDouble ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimum ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumFloat ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . minimumDouble ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - 
 - try { query . maximum ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximum ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximum ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximum ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximum ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumFloat ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumDouble ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximum ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumFloat ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . maximumDouble ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - 
 - try { query . sum ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sum ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sum ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sum ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sum ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumFloat ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumDouble ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sum ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumFloat ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . sumDouble ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - 
 - try { query . average ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . average ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . average ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageDouble ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . average ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . average ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageFloat ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageDouble ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . average ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageFloat ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 - try { query . averageDouble ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimum ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimum ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumDouble ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimum ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumFloat ( 2 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + 	 	 try { query . minimumDouble ( 2 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimum ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumFloat ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumDouble ( 6 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimum ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumFloat ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumDouble ( 7 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimum ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumFloat ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . minimumDouble ( 8 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + 
 + try { query . maximum ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumFloat ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumDouble ( 0 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximum ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumFloat ( 1 ) ; assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumDouble ( 1 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximum ( 2 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumFloat ( 2 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumDouble ( 2 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximum ( 6 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumFloat ( 6 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumDouble ( 6 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximum ( 7 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumFloat ( 7 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumDouble ( 7 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximum ( 8 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumFloat ( 8 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . maximumDouble ( 8 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + 
 + try { query . sum ( 0 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumFloat ( 0 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumDouble ( 0 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sum ( 1 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumFloat ( 1 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumDouble ( 1 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sum ( 2 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumFloat ( 2 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumDouble ( 2 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sum ( 6 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumFloat ( 6 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumDouble ( 6 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sum ( 7 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumFloat ( 7 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumDouble ( 7 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sum ( 8 ) ; 	 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumFloat ( 8 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . sumDouble ( 8 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + 
 + try { query . average ( 0 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageFloat ( 0 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageDouble ( 0 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . average ( 1 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageFloat ( 1 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageDouble ( 1 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . average ( 2 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageFloat ( 2 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageDouble ( 2 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . average ( 6 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageFloat ( 6 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageDouble ( 6 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . average ( 7 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageFloat ( 7 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageDouble ( 7 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . average ( 8 ) ; 	 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageFloat ( 8 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 + try { query . averageDouble ( 8 ) ; 	 assert ( false ) ; } catch ( IllegalArgumentException e ) { } 
 
 } 

