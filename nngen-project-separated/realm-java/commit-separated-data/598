BLEU SCORE: 0.03377156414337854

TEST MSG: Fix example . User store only returns the user if it is valid .
GENERATED MSG: Remove local user from the API

TEST DIFF (one line): diff - - git a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java <nl> index 4ba665f . . 4cfce02 100644 <nl> - - - a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java <nl> + + + b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java <nl> @ @ - 37 , 7 + 37 , 7 @ @ import io . realm . User ; <nl> <nl> public class CounterActivity extends AppCompatActivity { <nl> <nl> - private static final String REALM _ URL = " realm : / / " + MyApplication . OBJECT _ SERVER _ IP + " / ~ / default " ; <nl> + private static final String REALM _ URL = " realm : / / " + MyApplication . OBJECT _ SERVER _ IP + " : 7800 / ~ / default " ; <nl> <nl> private Realm realm ; <nl> private RealmResults < CounterOperation > counter ; <nl> @ @ - 61 , 8 + 61 , 8 @ @ public class CounterActivity extends AppCompatActivity { <nl> @ Override <nl> protected void onStart ( ) { <nl> super . onStart ( ) ; <nl> - if ( User . currentUser ( ) ! = null ) { <nl> - user = User . currentUser ( ) ; <nl> + user = User . currentUser ( ) ; <nl> + if ( user ! = null ) { <nl> / / Create a RealmConfiguration for our user <nl> SyncConfiguration config = new SyncConfiguration . Builder ( user , REALM _ URL ) <nl> . initialData ( new Realm . Transaction ( ) { <nl> diff - - git a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / MyApplication . java b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / MyApplication . java <nl> index 02d9ad8 . . 05d7567 100644 <nl> - - - a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / MyApplication . java <nl> + + + b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / MyApplication . java <nl> @ @ - 19 , 20 + 19 , 22 @ @ package io . realm . examples . objectserver ; <nl> import android . app . Application ; <nl> import android . util . Log ; <nl> <nl> + import io . realm . Realm ; <nl> import io . realm . log . AndroidLogger ; <nl> import io . realm . log . RealmLog ; <nl> - import io . realm . SyncManager ; <nl> - import io . realm . User ; <nl> - import io . realm . UserStore ; <nl> - import io . realm . android . SharedPrefsUserStore ; <nl> <nl> public class MyApplication extends Application { <nl> <nl> - public static final String OBJECT _ SERVER _ IP = " 192 . 168 . 1 . 3 " ; <nl> + public static final String OBJECT _ SERVER _ IP = " 192 . 168 . 104 . 22 " ; <nl> @ Override <nl> public void onCreate ( ) { <nl> super . onCreate ( ) ; <nl> - RealmLog . add ( new AndroidLogger ( Log . VERBOSE ) ) ; <nl> - SyncManager . setUserStore ( new SharedPrefsUserStore ( this ) ) ; / / Temporary until we can find a way to inject Context . <nl> + Realm . init ( this ) ; <nl> + <nl> + / / Enable full log output when debugging <nl> + if ( BuildConfig . DEBUG ) { <nl> + RealmLog . clear ( ) ; <nl> + RealmLog . add ( new AndroidLogger ( Log . VERBOSE ) ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / SyncManager . java b / realm / realm - library / src / main / java / io / realm / SyncManager . java <nl> index 5230a25 . . 41d8ca5 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / SyncManager . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / SyncManager . java <nl> @ @ - 70 , 29 + 70 , 30 @ @ public final class SyncManager { <nl> / / The Sync Client is lightweight , but consider creating / removing it when there is no sessions . <nl> / / Right now it just lives and dies together with the process . <nl> private static volatile AuthenticationServer authServer = new OkHttpAuthenticationServer ( ) ; <nl> - private static volatile UserStore userStore ; / / FIXME : Set to a default once we merge global init <nl> - <nl> + private static volatile UserStore userStore ; <nl> <nl> static volatile Session . ErrorHandler defaultSessionErrorHandler = SESSION _ NO _ OP _ ERROR _ HANDLER ; <nl> @ SuppressWarnings ( " FieldCanBeLocal " ) <nl> private static Thread clientThread ; <nl> <nl> - / / Called from SyncObjectServerFacade using reflection <nl> - @ SuppressWarnings ( " unused " ) <nl> + / / Initialize the SyncManager <nl> static void init ( String appId , UserStore userStore ) { <nl> <nl> + SyncManager . APP _ ID = appId ; <nl> + SyncManager . userStore = userStore ; <nl> + <nl> / / Initialize underlying Sync Network Client <nl> nativeInitializeSyncClient ( ) ; <nl> <nl> / / Create the client thread in java to avoid problems when exceptions are being thrown . We need to attach <nl> / / any thread to the JVM anyway in order to send back log events . <nl> - clientThread = new Thread ( new Runnable ( ) { <nl> + SyncManager . clientThread = new Thread ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> nativeRunClient ( ) ; <nl> } <nl> } , " RealmSyncClient " ) ; <nl> - clientThread . start ( ) ; <nl> + SyncManager . clientThread . start ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / User . java b / realm / realm - library / src / main / java / io / realm / User . java <nl> index 8b89636 . . 85a9a08 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / User . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / User . java <nl> @ @ - 55 , 12 + 55 , 14 @ @ public class User { <nl> } <nl> <nl> / * * <nl> - * Returns the last user that has logged in that hasn ' t logged out yet . <nl> + * Returns the last user that has logged in that are still valid . <nl> + * A user is invalidated when it logs out or its access tokens expire . <nl> * <nl> * @ return last { @ link User } that have logged in that is still valid . <nl> * / <nl> public static User currentUser ( ) { <nl> - return SyncManager . getUserStore ( ) . get ( UserStore . CURRENT _ USER _ KEY ) ; <nl> + User user = SyncManager . getUserStore ( ) . get ( UserStore . CURRENT _ USER _ KEY ) ; <nl> + return ( user ! = null & & user . isValid ( ) ) ? user : null ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java <nl> index df61426 . . eb5fc17 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java <nl> @ @ - 31 , 17 + 31 , 13 @ @ import org . junit . rules . TemporaryFolder ; <nl> import org . junit . runner . RunWith ; <nl> <nl> import java . io . File ; <nl> - import java . net . URL ; <nl> import java . util . Locale ; <nl> import java . util . UUID ; <nl> <nl> import io . realm . DynamicRealm ; <nl> - import io . realm . Realm ; <nl> import io . realm . RealmMigration ; <nl> - import io . realm . objectserver . android . SharedPrefsUserStore ; <nl> import io . realm . objectserver . internal . Token ; <nl> import io . realm . rule . RunInLooperThread ; <nl> - import io . realm . rule . RunTestInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> @ @ - 94 , 7 + 90 , 7 @ @ public class SyncConfigurationTests { <nl> <nl> @ Test <nl> public void serverUrl _ setsFolderAndFileName ( ) { <nl> - User user = User . createLocal ( ) ; <nl> + User user = createTestUser ( ) ; <nl> String [ ] [ ] validUrls = { <nl> / / < URL > , < Folder > , < FileName > <nl> { " realm : / / objectserver . realm . io / ~ / default " , " realm - object - server / " + user . getIdentifier ( ) , " default " } , <nl> @ @ - 167 , 7 + 163 , 7 @ @ public class SyncConfigurationTests { <nl> public void errorHandler ( ) { <nl> SyncConfiguration . Builder builder ; <nl> builder = new SyncConfiguration . Builder ( context ) <nl> - . user ( User . createLocal ( ) ) <nl> + . user ( createTestUser ( ) ) <nl> . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; <nl> <nl> Session . ErrorHandler errorHandler = new Session . ErrorHandler ( ) { <nl> @ @ - 194 , 7 + 190 , 7 @ @ public class SyncConfigurationTests { <nl> <nl> / / Create configuration using the default handler <nl> SyncConfiguration config = new SyncConfiguration . Builder ( context ) <nl> - . user ( User . createLocal ( ) ) <nl> + . user ( createTestUser ( ) ) <nl> . serverUrl ( " realm : / / objectserver . realm . io / default " ) <nl> . build ( ) ; <nl> assertEquals ( errorHandler , config . getErrorHandler ( ) ) ; <nl> @ @ - 206 , 7 + 202 , 7 @ @ public class SyncConfigurationTests { <nl> public void errorHandler _ nullThrows ( ) { <nl> SyncConfiguration . Builder builder ; <nl> builder = new SyncConfiguration . Builder ( context ) <nl> - . user ( User . createLocal ( ) ) <nl> + . user ( createTestUser ( ) ) <nl> . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; <nl> <nl> try { <nl> @ @ - 219 , 7 + 215 , 7 @ @ public class SyncConfigurationTests { <nl> public void migration _ alwaysThrows ( ) { <nl> SyncConfiguration . Builder builder ; <nl> builder = new SyncConfiguration . Builder ( context ) <nl> - . user ( User . createLocal ( ) ) <nl> + . user ( createTestUser ( ) ) <nl> . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; <nl> <nl> try { <nl> @ @ - 237 , 6 + 233 , 9 @ @ public class SyncConfigurationTests { <nl> } catch ( IllegalArgumentException ignore ) { <nl> } <nl> } <nl> + private User createTestUser ( ) { <nl> + return createTestUser ( Long . MAX _ VALUE ) ; <nl> + } <nl> <nl> private User createTestUser ( long expires ) { <nl> JSONObject obj = new JSONObject ( ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / objectserver / User . java b / realm / realm - library / src / main / java / io / realm / objectserver / User . java <nl> index 230998d . . a760ca6 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / objectserver / User . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / objectserver / User . java <nl> @ @ - 60 , 14 + 60 , 6 @ @ public class User { <nl> private Map < URI , Token > accessTokens = new HashMap < URI , Token > ( ) ; <nl> <nl> / * * <nl> - * Creates a User only known to this device . <nl> - * @ return <nl> - * / <nl> - public static User createLocal ( ) { <nl> - Token token = new Token ( UUID . randomUUID ( ) . toString ( ) , null , null , Long . MAX _ VALUE , Token . Permission . values ( ) ) ; <nl> - return new User ( UUID . randomUUID ( ) . toString ( ) , token , null ) ; <nl> - } <nl> - / * * <nl> * Load a user that has previously been serialized using { @ link # toJson ( ) } . <nl> * <nl> * @ param user JSON string representing the user .

TEST DIFF:
diff - - git a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java 
 index 4ba665f . . 4cfce02 100644 
 - - - a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java 
 + + + b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java 
 @ @ - 37 , 7 + 37 , 7 @ @ import io . realm . User ; 
 
 public class CounterActivity extends AppCompatActivity { 
 
 - private static final String REALM _ URL = " realm : / / " + MyApplication . OBJECT _ SERVER _ IP + " / ~ / default " ; 
 + private static final String REALM _ URL = " realm : / / " + MyApplication . OBJECT _ SERVER _ IP + " : 7800 / ~ / default " ; 
 
 private Realm realm ; 
 private RealmResults < CounterOperation > counter ; 
 @ @ - 61 , 8 + 61 , 8 @ @ public class CounterActivity extends AppCompatActivity { 
 @ Override 
 protected void onStart ( ) { 
 super . onStart ( ) ; 
 - if ( User . currentUser ( ) ! = null ) { 
 - user = User . currentUser ( ) ; 
 + user = User . currentUser ( ) ; 
 + if ( user ! = null ) { 
 / / Create a RealmConfiguration for our user 
 SyncConfiguration config = new SyncConfiguration . Builder ( user , REALM _ URL ) 
 . initialData ( new Realm . Transaction ( ) { 
 diff - - git a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / MyApplication . java b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / MyApplication . java 
 index 02d9ad8 . . 05d7567 100644 
 - - - a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / MyApplication . java 
 + + + b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / MyApplication . java 
 @ @ - 19 , 20 + 19 , 22 @ @ package io . realm . examples . objectserver ; 
 import android . app . Application ; 
 import android . util . Log ; 
 
 + import io . realm . Realm ; 
 import io . realm . log . AndroidLogger ; 
 import io . realm . log . RealmLog ; 
 - import io . realm . SyncManager ; 
 - import io . realm . User ; 
 - import io . realm . UserStore ; 
 - import io . realm . android . SharedPrefsUserStore ; 
 
 public class MyApplication extends Application { 
 
 - public static final String OBJECT _ SERVER _ IP = " 192 . 168 . 1 . 3 " ; 
 + public static final String OBJECT _ SERVER _ IP = " 192 . 168 . 104 . 22 " ; 
 @ Override 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 - RealmLog . add ( new AndroidLogger ( Log . VERBOSE ) ) ; 
 - SyncManager . setUserStore ( new SharedPrefsUserStore ( this ) ) ; / / Temporary until we can find a way to inject Context . 
 + Realm . init ( this ) ; 
 + 
 + / / Enable full log output when debugging 
 + if ( BuildConfig . DEBUG ) { 
 + RealmLog . clear ( ) ; 
 + RealmLog . add ( new AndroidLogger ( Log . VERBOSE ) ) ; 
 + } 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / SyncManager . java b / realm / realm - library / src / main / java / io / realm / SyncManager . java 
 index 5230a25 . . 41d8ca5 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / SyncManager . java 
 + + + b / realm / realm - library / src / main / java / io / realm / SyncManager . java 
 @ @ - 70 , 29 + 70 , 30 @ @ public final class SyncManager { 
 / / The Sync Client is lightweight , but consider creating / removing it when there is no sessions . 
 / / Right now it just lives and dies together with the process . 
 private static volatile AuthenticationServer authServer = new OkHttpAuthenticationServer ( ) ; 
 - private static volatile UserStore userStore ; / / FIXME : Set to a default once we merge global init 
 - 
 + private static volatile UserStore userStore ; 
 
 static volatile Session . ErrorHandler defaultSessionErrorHandler = SESSION _ NO _ OP _ ERROR _ HANDLER ; 
 @ SuppressWarnings ( " FieldCanBeLocal " ) 
 private static Thread clientThread ; 
 
 - / / Called from SyncObjectServerFacade using reflection 
 - @ SuppressWarnings ( " unused " ) 
 + / / Initialize the SyncManager 
 static void init ( String appId , UserStore userStore ) { 
 
 + SyncManager . APP _ ID = appId ; 
 + SyncManager . userStore = userStore ; 
 + 
 / / Initialize underlying Sync Network Client 
 nativeInitializeSyncClient ( ) ; 
 
 / / Create the client thread in java to avoid problems when exceptions are being thrown . We need to attach 
 / / any thread to the JVM anyway in order to send back log events . 
 - clientThread = new Thread ( new Runnable ( ) { 
 + SyncManager . clientThread = new Thread ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 nativeRunClient ( ) ; 
 } 
 } , " RealmSyncClient " ) ; 
 - clientThread . start ( ) ; 
 + SyncManager . clientThread . start ( ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / User . java b / realm / realm - library / src / main / java / io / realm / User . java 
 index 8b89636 . . 85a9a08 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / User . java 
 + + + b / realm / realm - library / src / main / java / io / realm / User . java 
 @ @ - 55 , 12 + 55 , 14 @ @ public class User { 
 } 
 
 / * * 
 - * Returns the last user that has logged in that hasn ' t logged out yet . 
 + * Returns the last user that has logged in that are still valid . 
 + * A user is invalidated when it logs out or its access tokens expire . 
 * 
 * @ return last { @ link User } that have logged in that is still valid . 
 * / 
 public static User currentUser ( ) { 
 - return SyncManager . getUserStore ( ) . get ( UserStore . CURRENT _ USER _ KEY ) ; 
 + User user = SyncManager . getUserStore ( ) . get ( UserStore . CURRENT _ USER _ KEY ) ; 
 + return ( user ! = null & & user . isValid ( ) ) ? user : null ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java 
 index df61426 . . eb5fc17 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java 
 @ @ - 31 , 17 + 31 , 13 @ @ import org . junit . rules . TemporaryFolder ; 
 import org . junit . runner . RunWith ; 
 
 import java . io . File ; 
 - import java . net . URL ; 
 import java . util . Locale ; 
 import java . util . UUID ; 
 
 import io . realm . DynamicRealm ; 
 - import io . realm . Realm ; 
 import io . realm . RealmMigration ; 
 - import io . realm . objectserver . android . SharedPrefsUserStore ; 
 import io . realm . objectserver . internal . Token ; 
 import io . realm . rule . RunInLooperThread ; 
 - import io . realm . rule . RunTestInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 
 import static org . junit . Assert . assertEquals ; 
 @ @ - 94 , 7 + 90 , 7 @ @ public class SyncConfigurationTests { 
 
 @ Test 
 public void serverUrl _ setsFolderAndFileName ( ) { 
 - User user = User . createLocal ( ) ; 
 + User user = createTestUser ( ) ; 
 String [ ] [ ] validUrls = { 
 / / < URL > , < Folder > , < FileName > 
 { " realm : / / objectserver . realm . io / ~ / default " , " realm - object - server / " + user . getIdentifier ( ) , " default " } , 
 @ @ - 167 , 7 + 163 , 7 @ @ public class SyncConfigurationTests { 
 public void errorHandler ( ) { 
 SyncConfiguration . Builder builder ; 
 builder = new SyncConfiguration . Builder ( context ) 
 - . user ( User . createLocal ( ) ) 
 + . user ( createTestUser ( ) ) 
 . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; 
 
 Session . ErrorHandler errorHandler = new Session . ErrorHandler ( ) { 
 @ @ - 194 , 7 + 190 , 7 @ @ public class SyncConfigurationTests { 
 
 / / Create configuration using the default handler 
 SyncConfiguration config = new SyncConfiguration . Builder ( context ) 
 - . user ( User . createLocal ( ) ) 
 + . user ( createTestUser ( ) ) 
 . serverUrl ( " realm : / / objectserver . realm . io / default " ) 
 . build ( ) ; 
 assertEquals ( errorHandler , config . getErrorHandler ( ) ) ; 
 @ @ - 206 , 7 + 202 , 7 @ @ public class SyncConfigurationTests { 
 public void errorHandler _ nullThrows ( ) { 
 SyncConfiguration . Builder builder ; 
 builder = new SyncConfiguration . Builder ( context ) 
 - . user ( User . createLocal ( ) ) 
 + . user ( createTestUser ( ) ) 
 . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; 
 
 try { 
 @ @ - 219 , 7 + 215 , 7 @ @ public class SyncConfigurationTests { 
 public void migration _ alwaysThrows ( ) { 
 SyncConfiguration . Builder builder ; 
 builder = new SyncConfiguration . Builder ( context ) 
 - . user ( User . createLocal ( ) ) 
 + . user ( createTestUser ( ) ) 
 . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; 
 
 try { 
 @ @ - 237 , 6 + 233 , 9 @ @ public class SyncConfigurationTests { 
 } catch ( IllegalArgumentException ignore ) { 
 } 
 } 
 + private User createTestUser ( ) { 
 + return createTestUser ( Long . MAX _ VALUE ) ; 
 + } 
 
 private User createTestUser ( long expires ) { 
 JSONObject obj = new JSONObject ( ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / objectserver / User . java b / realm / realm - library / src / main / java / io / realm / objectserver / User . java 
 index 230998d . . a760ca6 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / objectserver / User . java 
 + + + b / realm / realm - library / src / main / java / io / realm / objectserver / User . java 
 @ @ - 60 , 14 + 60 , 6 @ @ public class User { 
 private Map < URI , Token > accessTokens = new HashMap < URI , Token > ( ) ; 
 
 / * * 
 - * Creates a User only known to this device . 
 - * @ return 
 - * / 
 - public static User createLocal ( ) { 
 - Token token = new Token ( UUID . randomUUID ( ) . toString ( ) , null , null , Long . MAX _ VALUE , Token . Permission . values ( ) ) ; 
 - return new User ( UUID . randomUUID ( ) . toString ( ) , token , null ) ; 
 - } 
 - / * * 
 * Load a user that has previously been serialized using { @ link # toJson ( ) } . 
 * 
 * @ param user JSON string representing the user .
