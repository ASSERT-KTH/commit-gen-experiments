BLEU SCORE: 0.037954847898457066

TEST MSG: Minimize overhead on CI for PR builds .
GENERATED MSG: Add support for the multiple flavors to the metrics collection stage

TEST DIFF (one line): diff - - git a / Jenkinsfile b / Jenkinsfile <nl> index 19aa5a9 . . 84261d4 100644 <nl> - - - a / Jenkinsfile <nl> + + + b / Jenkinsfile <nl> @ @ - 9 , 103 + 9 , 115 @ @ try { <nl> timeout ( time : 90 , unit : ' MINUTES ' ) { <nl> / / Allocate a custom workspace to avoid having % in the path ( it breaks ld ) <nl> ws ( ' / tmp / realm - java ' ) { <nl> - 	 stage ( ' SCM ' ) { <nl> - 	 checkout ( [ <nl> - 	 	 $ class : ' GitSCM ' , <nl> - 	 	 branches : scm . branches , <nl> - 	 	 gitTool : ' native git ' , <nl> - 	 	 extensions : scm . extensions + [ <nl> - 	 	 [ $ class : ' CleanCheckout ' ] , <nl> - 	 	 [ $ class : ' SubmoduleOption ' , recursiveSubmodules : true ] <nl> - 	 	 ] , <nl> - 	 	 userRemoteConfigs : scm . userRemoteConfigs <nl> - 	 	 ] ) <nl> - 	 } <nl> - <nl> - 	 def buildEnv <nl> - 	 def rosEnv <nl> - 	 stage ( ' Docker build ' ) { <nl> - 	 / / Docker image for build <nl> - 	 buildEnv = docker . build ' realm - java : snapshot ' <nl> - 	 / / Docker image for testing Realm Object Server <nl> - 	 def dependProperties = readProperties file : ' dependencies . list ' <nl> - 	 def rosDeVersion = dependProperties [ " REALM _ OBJECT _ SERVER _ DE _ VERSION " ] <nl> - 	 rosEnv = docker . build ' ros : snapshot ' , " - - build - arg ROS _ DE _ VERSION = $ { rosDeVersion } tools / sync _ test _ server " <nl> - 	 } <nl> - <nl> - 	 rosContainer = rosEnv . run ( ' - v / tmp = / tmp / . ros ' ) <nl> - <nl> - 	 try { <nl> - buildEnv . inside ( " - e HOME = / tmp " + <nl> - 	 	 	 " - e _ JAVA _ OPTIONS = - Duser . home = / tmp " + <nl> - 	 	 	 " - - privileged " + <nl> - 	 	 	 " - v / dev / bus / usb : / dev / bus / usb " + <nl> - 	 	 	 " - v $ { env . HOME } / gradle - cache : / tmp / . gradle " + <nl> - 	 	 	 " - v $ { env . HOME } / . android : / tmp / . android " + <nl> - 	 	 	 " - v $ { env . HOME } / ccache : / tmp / . ccache " + <nl> - 	 	 	 " - - network container : $ { rosContainer . id } " ) { <nl> - stage ( ' JVM tests ' ) { <nl> - try { <nl> - withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { <nl> - sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } " <nl> + stage ( ' SCM ' ) { <nl> + checkout ( [ <nl> + $ class : ' GitSCM ' , <nl> + branches : scm . branches , <nl> + gitTool : ' native git ' , <nl> + extensions : scm . extensions + [ <nl> + [ $ class : ' CleanCheckout ' ] , <nl> + [ $ class : ' SubmoduleOption ' , recursiveSubmodules : true ] <nl> + ] , <nl> + userRemoteConfigs : scm . userRemoteConfigs <nl> + ] ) <nl> + } <nl> + <nl> + / / Toggles for PR vs . Master builds . <nl> + / / For PR ' s , we just build for arm - v7a and run unit tests for the ObjectServer variant <nl> + / / A full build is done on ` master ` . <nl> + / / TODO Once Android emulators are available on all nodes , we can switch to x86 builds <nl> + / / on PR ' s for even more throughput . <nl> + def ABIs = " " <nl> + def instrumentationTestTarget = " connectedAndroidTest " <nl> + if ( ! [ ' master ' ] . contains ( env . BRANCH _ NAME ) ) { <nl> + ABIs = " armeabi - v7a " <nl> + instrumentationTestTarget = " connectedObjectServerDebugAndroidTest " / / Run in debug more for better error reporting <nl> + } <nl> + <nl> + def buildEnv <nl> + def rosEnv <nl> + stage ( ' Docker build ' ) { <nl> + / / Docker image for build <nl> + buildEnv = docker . build ' realm - java : snapshot ' <nl> + / / Docker image for testing Realm Object Server <nl> + def dependProperties = readProperties file : ' dependencies . list ' <nl> + def rosDeVersion = dependProperties [ " REALM _ OBJECT _ SERVER _ DE _ VERSION " ] <nl> + rosEnv = docker . build ' ros : snapshot ' , " - - build - arg ROS _ DE _ VERSION = $ { rosDeVersion } tools / sync _ test _ server " <nl> + } <nl> + <nl> + 	 rosContainer = rosEnv . run ( ' - v / tmp = / tmp / . ros ' ) <nl> + <nl> + try { <nl> + buildEnv . inside ( " - e HOME = / tmp " + <nl> + " - e _ JAVA _ OPTIONS = - Duser . home = / tmp " + <nl> + " - - privileged " + <nl> + " - v / dev / bus / usb : / dev / bus / usb " + <nl> + " - v $ { env . HOME } / gradle - cache : / tmp / . gradle " + <nl> + " - v $ { env . HOME } / . android : / tmp / . android " + <nl> + " - v $ { env . HOME } / ccache : / tmp / . ccache " + <nl> + " - - network container : $ { rosContainer . id } " ) { <nl> + stage ( ' JVM tests ' ) { <nl> + try { <nl> + withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { <nl> + sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } - PbuildTargetABIs = $ { ABIs } " <nl> + } <nl> + } finally { <nl> + storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' <nl> + storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' <nl> + step ( [ $ class : ' LintPublisher ' ] ) <nl> + } <nl> } <nl> - } finally { <nl> - storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' <nl> - storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' <nl> - step ( [ $ class : ' LintPublisher ' ] ) <nl> - } <nl> - } <nl> - <nl> - stage ( ' Static code analysis ' ) { <nl> - try { <nl> - gradle ( ' realm ' , ' findbugs pmd checkstyle ' ) <nl> - } finally { <nl> - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) <nl> - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) <nl> - step ( [ $ class : ' CheckStylePublisher ' , <nl> - 	 	 canComputeNew : false , <nl> - 	 	 defaultEncoding : ' ' , <nl> - 	 	 healthy : ' ' , <nl> - 	 	 pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , <nl> - 	 	 unHealthy : ' ' <nl> - 	 	 ] ) <nl> - } <nl> - } <nl> - <nl> - stage ( ' Run instrumented tests ' ) { <nl> - lock ( " $ { env . NODE _ NAME } - android " ) { <nl> - boolean archiveLog = true <nl> - String backgroundPid <nl> - try { <nl> - backgroundPid = startLogCatCollector ( ) <nl> - forwardAdbPorts ( ) <nl> - gradle ( ' realm ' , ' connectedAndroidTest ' ) <nl> - archiveLog = false ; <nl> - } finally { <nl> - stopLogCatCollector ( backgroundPid , archiveLog ) <nl> - storeJunitResults ' realm / realm - library / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' <nl> + <nl> + stage ( ' Static code analysis ' ) { <nl> + try { <nl> + gradle ( ' realm ' , ' findbugs pmd checkstyle ' ) <nl> + } finally { <nl> + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) <nl> + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) <nl> + step ( [ $ class : ' CheckStylePublisher ' , <nl> + canComputeNew : false , <nl> + defaultEncoding : ' ' , <nl> + healthy : ' ' , <nl> + pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , <nl> + unHealthy : ' ' <nl> + ] ) <nl> + } <nl> } <nl> - } <nl> - } <nl> <nl> - / / TODO : add support for running monkey on the example apps <nl> + stage ( ' Run instrumented tests ' ) { <nl> + lock ( " $ { env . NODE _ NAME } - android " ) { <nl> + boolean archiveLog = true <nl> + String backgroundPid <nl> + try { <nl> + backgroundPid = startLogCatCollector ( ) <nl> + forwardAdbPorts ( ) <nl> + gradle ( ' realm ' , " $ { instrumentationTestTarget } " ) <nl> + archiveLog = false ; <nl> + } finally { <nl> + stopLogCatCollector ( backgroundPid , archiveLog ) <nl> + storeJunitResults ' realm / realm - library / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' <nl> + } <nl> + } <nl> + } <nl> <nl> - if ( env . BRANCH _ NAME = = ' master ' ) { <nl> - stage ( ' Collect metrics ' ) { <nl> - collectAarMetrics ( ) <nl> - } <nl> + / / TODO : add support for running monkey on the example apps <nl> + <nl> + if ( env . BRANCH _ NAME = = ' master ' ) { <nl> + stage ( ' Collect metrics ' ) { <nl> + collectAarMetrics ( ) <nl> + } <nl> <nl> - stage ( ' Publish to OJO ' ) { <nl> - withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { <nl> - sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " <nl> + stage ( ' Publish to OJO ' ) { <nl> + withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { <nl> + sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " <nl> + } <nl> + } <nl> } <nl> } <nl> - } <nl> - } <nl> - 	 } finally { <nl> - sh " docker logs $ { rosContainer . id } " <nl> - rosContainer . stop ( ) <nl> - 	 } <nl> + } finally { <nl> + sh " docker logs $ { rosContainer . id } " <nl> + rosContainer . stop ( ) <nl> + } <nl> } <nl> } <nl> currentBuild . rawBuild . setResult ( Result . SUCCESS )
NEAREST DIFF (one line): diff - - git a / Jenkinsfile b / Jenkinsfile <nl> index 5ae8ce9 . . 5c3dfe4 100644 <nl> - - - a / Jenkinsfile <nl> + + + b / Jenkinsfile <nl> @ @ - 7 , 69 + 7 , 78 @ @ try { <nl> node ( ' android ' ) { <nl> / / Allocate a custom workspace to avoid having % in the path ( it breaks ld ) <nl> ws ( ' / tmp / realm - java ' ) { <nl> - stage ' SCM ' <nl> - checkout ( [ <nl> - $ class : ' GitSCM ' , <nl> - branches : scm . branches , <nl> - gitTool : ' native git ' , <nl> - extensions : scm . extensions + [ [ $ class : ' CleanCheckout ' ] ] , <nl> - userRemoteConfigs : scm . userRemoteConfigs <nl> - ] ) <nl> - sh ' git submodule sync ' <nl> - sh ' git submodule update - - init - - recursive ' <nl> - / / Make sure not to delete the folder that Jenkins allocates to store scripts <nl> - sh ' git clean - ffdx - e . ? ? ? ? ? ? ? ? ' <nl> - <nl> - stage ' Docker build ' <nl> - def buildEnv = docker . build ' realm - java : snapshot ' <nl> + stage ( ' SCM ' ) { <nl> + checkout ( [ <nl> + $ class : ' GitSCM ' , <nl> + branches : scm . branches , <nl> + gitTool : ' native git ' , <nl> + extensions : scm . extensions + [ [ $ class : ' CleanCheckout ' ] ] , <nl> + userRemoteConfigs : scm . userRemoteConfigs <nl> + ] ) <nl> + sh ' git submodule sync ' <nl> + sh ' git submodule update - - init - - recursive ' <nl> + / / Make sure not to delete the folder that Jenkins allocates to store scripts <nl> + sh ' git clean - ffdx - e . ? ? ? ? ? ? ? ? ' <nl> + } <nl> + <nl> + def buildEnv <nl> + stage ( ' Docker build ' ) { <nl> + buildEnv = docker . build ' realm - java : snapshot ' <nl> + } <nl> + <nl> buildEnv . inside ( " - e HOME = / tmp - e _ JAVA _ OPTIONS = - Duser . home = / tmp - - privileged - v / dev / bus / usb : / dev / bus / usb - v $ { env . HOME } / gradle - cache : / tmp / . gradle - v $ { env . HOME } / . android : / tmp / . android - v $ { env . HOME } / ccache : / tmp / . ccache " ) { <nl> - stage ' JVM tests ' <nl> - try { <nl> - withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { <nl> - sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } " <nl> + stage ( ' JVM tests ' ) { <nl> + try { <nl> + withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { <nl> + sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } " <nl> + } <nl> + } finally { <nl> + storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' <nl> + storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' <nl> + step ( [ $ class : ' LintPublisher ' ] ) <nl> } <nl> - } finally { <nl> - storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' <nl> - storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' <nl> - step ( [ $ class : ' LintPublisher ' ] ) <nl> } <nl> <nl> - stage ' Static code analysis ' <nl> - try { <nl> - gradle ( ' realm ' , ' findbugs pmd checkstyle ' ) <nl> - } finally { <nl> - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) <nl> - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) <nl> - step ( [ $ class : ' CheckStylePublisher ' , <nl> - canComputeNew : false , <nl> - defaultEncoding : ' ' , <nl> - healthy : ' ' , <nl> - pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , <nl> - unHealthy : ' ' <nl> - ] ) <nl> + stage ( ' Static code analysis ' ) { <nl> + try { <nl> + gradle ( ' realm ' , ' findbugs pmd checkstyle ' ) <nl> + } finally { <nl> + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) <nl> + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) <nl> + step ( [ $ class : ' CheckStylePublisher ' , <nl> + canComputeNew : false , <nl> + defaultEncoding : ' ' , <nl> + healthy : ' ' , <nl> + pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , <nl> + unHealthy : ' ' <nl> + ] ) <nl> + } <nl> } <nl> <nl> - stage ' Run instrumented tests ' <nl> - boolean archiveLog = true <nl> - String backgroundPid <nl> - try { <nl> - backgroundPid = startLogCatCollector ( ) <nl> - gradle ( ' realm ' , ' connectedUnitTests ' ) <nl> - archiveLog = false ; <nl> - } finally { <nl> - stopLogCatCollector ( backgroundPid , archiveLog ) <nl> - storeJunitResults ' realm / realm - library / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' <nl> + stage ( ' Run instrumented tests ' ) { <nl> + boolean archiveLog = true <nl> + String backgroundPid <nl> + try { <nl> + backgroundPid = startLogCatCollector ( ) <nl> + gradle ( ' realm ' , ' connectedUnitTests ' ) <nl> + archiveLog = false ; <nl> + } finally { <nl> + stopLogCatCollector ( backgroundPid , archiveLog ) <nl> + storeJunitResults ' realm / realm - library / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' <nl> + } <nl> } <nl> <nl> / / TODO : add support for running monkey on the example apps <nl> <nl> if ( env . BRANCH _ NAME = = ' master ' ) { <nl> - stage ' Collect metrics ' <nl> - collectAarMetrics ( ) <nl> + stage ( ' Collect metrics ' ) { <nl> + collectAarMetrics ( ) <nl> + } <nl> <nl> - stage ' Publish to OJO ' <nl> - withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { <nl> - sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " <nl> + stage ( ' Publish to OJO ' ) { <nl> + withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { <nl> + sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " <nl> + } <nl> } <nl> } <nl> } <nl> @ @ - 121 , 16 + 130 , 16 @ @ def stopLogCatCollector ( String backgroundPid , boolean archiveLog ) { <nl> sh ' rm logcat . txt ' <nl> } <nl> <nl> - def sendMetrics ( String metric , String value ) { <nl> + def sendMetrics ( String metricName , String metricValue , Map < String , String > tags ) { <nl> + def tagsString = getTagsString ( tags ) <nl> withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' 5b8ad2d9 - 61a4 - 43b5 - b4df - b8ff6b1f16fa ' , passwordVariable : ' influx _ pass ' , usernameVariable : ' influx _ user ' ] ] ) { <nl> - sh " curl - i - XPOST ' https : / / greatscott - pinheads - 70 . c . influxdb . com : 8086 / write ? db = realm ' - - data - binary ' $ { metric } value = $ { value } i ' - - user ' $ { env . influx _ user } : $ { env . influx _ pass } ' " <nl> + sh " curl - i - XPOST ' https : / / greatscott - pinheads - 70 . c . influxdb . com : 8086 / write ? db = realm ' - - data - binary ' $ { metricName } , $ { tagsString } value = $ { metricValue } i ' - - user ' $ { env . influx _ user } : $ { env . influx _ pass } ' " <nl> } <nl> } <nl> <nl> - def sendTaggedMetric ( String metric , String value , String tagName , String tagValue ) { <nl> - withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' 5b8ad2d9 - 61a4 - 43b5 - b4df - b8ff6b1f16fa ' , passwordVariable : ' influx _ pass ' , usernameVariable : ' influx _ user ' ] ] ) { <nl> - sh " curl - i - XPOST ' https : / / greatscott - pinheads - 70 . c . influxdb . com : 8086 / write ? db = realm ' - - data - binary ' $ { metric } , $ { tagName } = $ { tagValue } value = $ { value } i ' - - user ' $ { env . influx _ user } : $ { env . influx _ pass } ' " <nl> - } <nl> + @ NonCPS <nl> + def getTagsString ( Map < String , String > tags ) { <nl> + return tags . collect { k , v - > " $ k = $ v " } . join ( ' , ' ) <nl> } <nl> <nl> def storeJunitResults ( String path ) { <nl> @ @ - 141 , 24 + 150 , 30 @ @ def storeJunitResults ( String path ) { <nl> } <nl> <nl> def collectAarMetrics ( ) { <nl> - sh ' ' ' set - xe <nl> - cd realm / realm - library / build / outputs / aar <nl> - unzip realm - android - library - release . aar - d unzipped <nl> - find $ ANDROID _ HOME - name dx | sort - r | head - n 1 > dx <nl> - $ ( cat dx ) - - dex - - output = temp . dex unzipped / classes . jar <nl> - cat temp . dex | head - c 92 | tail - c 4 | hexdump - e ' 1 / 4 " % d " ' > methods <nl> - ' ' ' <nl> - <nl> - sendMetrics ( ' methods ' , readFile ( ' realm / realm - library / build / outputs / aar / methods ' ) ) <nl> - <nl> - def aarFile = findFiles ( glob : ' realm / realm - library / build / outputs / aar / realm - android - library - release . aar ' ) [ 0 ] <nl> - sendMetrics ( ' aar _ size ' , aarFile . length as String ) <nl> - <nl> - def soFiles = findFiles ( glob : ' realm / realm - library / build / outputs / aar / unzipped / jni / * / librealm - jni . so ' ) <nl> - for ( int i = 0 ; i < soFiles . length ; i + + ) { <nl> - def abiName = soFiles [ i ] . path . tokenize ( ' / ' ) [ - 2 ] <nl> - def libSize = soFiles [ i ] . length as String <nl> - sendTaggedMetric ( ' abi _ size ' , libSize , ' type ' , abiName ) <nl> + def flavors = [ ' base ' , ' objectServer ' ] <nl> + for ( def i = 0 ; i < flavors . size ( ) ; i + + ) { <nl> + def flavor = flavors [ i ] <nl> + sh " " " set - xe <nl> + cd realm / realm - library / build / outputs / aar <nl> + unzip realm - android - library - $ { flavor } - release . aar - d unzipped $ { flavor } <nl> + find \ $ ANDROID _ HOME - name dx | sort - r | head - n 1 > dx <nl> + \ $ ( cat dx ) - - dex - - output = temp $ { flavor } . dex unzipped $ { flavor } / classes . jar <nl> + cat temp $ { flavor } . dex | head - c 92 | tail - c 4 | hexdump - e ' 1 / 4 \ " % d \ " ' > methods $ { flavor } <nl> + " " " <nl> + <nl> + def methods = readFile ( " realm / realm - library / build / outputs / aar / methods $ { flavor } " ) <nl> + sendMetrics ( ' methods ' , methods , [ ' flavor ' : flavor ] ) <nl> + <nl> + def aarFile = findFiles ( glob : " realm / realm - library / build / outputs / aar / realm - android - library - $ { flavor } - release . aar " ) [ 0 ] <nl> + sendMetrics ( ' aar _ size ' , aarFile . length as String , [ ' flavor ' : flavor ] ) <nl> + <nl> + def soFiles = findFiles ( glob : " realm / realm - library / build / outputs / aar / unzipped $ { flavor } / jni / * / librealm - jni . so " ) <nl> + for ( def j = 0 ; j < soFiles . size ( ) ; j + + ) { <nl> + def soFile = soFiles [ j ] <nl> + def abiName = soFile . path . tokenize ( ' / ' ) [ - 2 ] <nl> + def libSize = soFile . length as String <nl> + sendMetrics ( ' abi _ size ' , libSize , [ ' flavor ' : flavor , ' type ' : abiName ] ) <nl> + } <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / Jenkinsfile b / Jenkinsfile 
 index 19aa5a9 . . 84261d4 100644 
 - - - a / Jenkinsfile 
 + + + b / Jenkinsfile 
 @ @ - 9 , 103 + 9 , 115 @ @ try { 
 timeout ( time : 90 , unit : ' MINUTES ' ) { 
 / / Allocate a custom workspace to avoid having % in the path ( it breaks ld ) 
 ws ( ' / tmp / realm - java ' ) { 
 - 	 stage ( ' SCM ' ) { 
 - 	 checkout ( [ 
 - 	 	 $ class : ' GitSCM ' , 
 - 	 	 branches : scm . branches , 
 - 	 	 gitTool : ' native git ' , 
 - 	 	 extensions : scm . extensions + [ 
 - 	 	 [ $ class : ' CleanCheckout ' ] , 
 - 	 	 [ $ class : ' SubmoduleOption ' , recursiveSubmodules : true ] 
 - 	 	 ] , 
 - 	 	 userRemoteConfigs : scm . userRemoteConfigs 
 - 	 	 ] ) 
 - 	 } 
 - 
 - 	 def buildEnv 
 - 	 def rosEnv 
 - 	 stage ( ' Docker build ' ) { 
 - 	 / / Docker image for build 
 - 	 buildEnv = docker . build ' realm - java : snapshot ' 
 - 	 / / Docker image for testing Realm Object Server 
 - 	 def dependProperties = readProperties file : ' dependencies . list ' 
 - 	 def rosDeVersion = dependProperties [ " REALM _ OBJECT _ SERVER _ DE _ VERSION " ] 
 - 	 rosEnv = docker . build ' ros : snapshot ' , " - - build - arg ROS _ DE _ VERSION = $ { rosDeVersion } tools / sync _ test _ server " 
 - 	 } 
 - 
 - 	 rosContainer = rosEnv . run ( ' - v / tmp = / tmp / . ros ' ) 
 - 
 - 	 try { 
 - buildEnv . inside ( " - e HOME = / tmp " + 
 - 	 	 	 " - e _ JAVA _ OPTIONS = - Duser . home = / tmp " + 
 - 	 	 	 " - - privileged " + 
 - 	 	 	 " - v / dev / bus / usb : / dev / bus / usb " + 
 - 	 	 	 " - v $ { env . HOME } / gradle - cache : / tmp / . gradle " + 
 - 	 	 	 " - v $ { env . HOME } / . android : / tmp / . android " + 
 - 	 	 	 " - v $ { env . HOME } / ccache : / tmp / . ccache " + 
 - 	 	 	 " - - network container : $ { rosContainer . id } " ) { 
 - stage ( ' JVM tests ' ) { 
 - try { 
 - withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { 
 - sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } " 
 + stage ( ' SCM ' ) { 
 + checkout ( [ 
 + $ class : ' GitSCM ' , 
 + branches : scm . branches , 
 + gitTool : ' native git ' , 
 + extensions : scm . extensions + [ 
 + [ $ class : ' CleanCheckout ' ] , 
 + [ $ class : ' SubmoduleOption ' , recursiveSubmodules : true ] 
 + ] , 
 + userRemoteConfigs : scm . userRemoteConfigs 
 + ] ) 
 + } 
 + 
 + / / Toggles for PR vs . Master builds . 
 + / / For PR ' s , we just build for arm - v7a and run unit tests for the ObjectServer variant 
 + / / A full build is done on ` master ` . 
 + / / TODO Once Android emulators are available on all nodes , we can switch to x86 builds 
 + / / on PR ' s for even more throughput . 
 + def ABIs = " " 
 + def instrumentationTestTarget = " connectedAndroidTest " 
 + if ( ! [ ' master ' ] . contains ( env . BRANCH _ NAME ) ) { 
 + ABIs = " armeabi - v7a " 
 + instrumentationTestTarget = " connectedObjectServerDebugAndroidTest " / / Run in debug more for better error reporting 
 + } 
 + 
 + def buildEnv 
 + def rosEnv 
 + stage ( ' Docker build ' ) { 
 + / / Docker image for build 
 + buildEnv = docker . build ' realm - java : snapshot ' 
 + / / Docker image for testing Realm Object Server 
 + def dependProperties = readProperties file : ' dependencies . list ' 
 + def rosDeVersion = dependProperties [ " REALM _ OBJECT _ SERVER _ DE _ VERSION " ] 
 + rosEnv = docker . build ' ros : snapshot ' , " - - build - arg ROS _ DE _ VERSION = $ { rosDeVersion } tools / sync _ test _ server " 
 + } 
 + 
 + 	 rosContainer = rosEnv . run ( ' - v / tmp = / tmp / . ros ' ) 
 + 
 + try { 
 + buildEnv . inside ( " - e HOME = / tmp " + 
 + " - e _ JAVA _ OPTIONS = - Duser . home = / tmp " + 
 + " - - privileged " + 
 + " - v / dev / bus / usb : / dev / bus / usb " + 
 + " - v $ { env . HOME } / gradle - cache : / tmp / . gradle " + 
 + " - v $ { env . HOME } / . android : / tmp / . android " + 
 + " - v $ { env . HOME } / ccache : / tmp / . ccache " + 
 + " - - network container : $ { rosContainer . id } " ) { 
 + stage ( ' JVM tests ' ) { 
 + try { 
 + withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { 
 + sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } - PbuildTargetABIs = $ { ABIs } " 
 + } 
 + } finally { 
 + storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' 
 + storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' 
 + step ( [ $ class : ' LintPublisher ' ] ) 
 + } 
 } 
 - } finally { 
 - storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' 
 - storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' 
 - step ( [ $ class : ' LintPublisher ' ] ) 
 - } 
 - } 
 - 
 - stage ( ' Static code analysis ' ) { 
 - try { 
 - gradle ( ' realm ' , ' findbugs pmd checkstyle ' ) 
 - } finally { 
 - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) 
 - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) 
 - step ( [ $ class : ' CheckStylePublisher ' , 
 - 	 	 canComputeNew : false , 
 - 	 	 defaultEncoding : ' ' , 
 - 	 	 healthy : ' ' , 
 - 	 	 pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , 
 - 	 	 unHealthy : ' ' 
 - 	 	 ] ) 
 - } 
 - } 
 - 
 - stage ( ' Run instrumented tests ' ) { 
 - lock ( " $ { env . NODE _ NAME } - android " ) { 
 - boolean archiveLog = true 
 - String backgroundPid 
 - try { 
 - backgroundPid = startLogCatCollector ( ) 
 - forwardAdbPorts ( ) 
 - gradle ( ' realm ' , ' connectedAndroidTest ' ) 
 - archiveLog = false ; 
 - } finally { 
 - stopLogCatCollector ( backgroundPid , archiveLog ) 
 - storeJunitResults ' realm / realm - library / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' 
 + 
 + stage ( ' Static code analysis ' ) { 
 + try { 
 + gradle ( ' realm ' , ' findbugs pmd checkstyle ' ) 
 + } finally { 
 + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) 
 + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) 
 + step ( [ $ class : ' CheckStylePublisher ' , 
 + canComputeNew : false , 
 + defaultEncoding : ' ' , 
 + healthy : ' ' , 
 + pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , 
 + unHealthy : ' ' 
 + ] ) 
 + } 
 } 
 - } 
 - } 
 
 - / / TODO : add support for running monkey on the example apps 
 + stage ( ' Run instrumented tests ' ) { 
 + lock ( " $ { env . NODE _ NAME } - android " ) { 
 + boolean archiveLog = true 
 + String backgroundPid 
 + try { 
 + backgroundPid = startLogCatCollector ( ) 
 + forwardAdbPorts ( ) 
 + gradle ( ' realm ' , " $ { instrumentationTestTarget } " ) 
 + archiveLog = false ; 
 + } finally { 
 + stopLogCatCollector ( backgroundPid , archiveLog ) 
 + storeJunitResults ' realm / realm - library / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' 
 + } 
 + } 
 + } 
 
 - if ( env . BRANCH _ NAME = = ' master ' ) { 
 - stage ( ' Collect metrics ' ) { 
 - collectAarMetrics ( ) 
 - } 
 + / / TODO : add support for running monkey on the example apps 
 + 
 + if ( env . BRANCH _ NAME = = ' master ' ) { 
 + stage ( ' Collect metrics ' ) { 
 + collectAarMetrics ( ) 
 + } 
 
 - stage ( ' Publish to OJO ' ) { 
 - withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { 
 - sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " 
 + stage ( ' Publish to OJO ' ) { 
 + withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { 
 + sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " 
 + } 
 + } 
 } 
 } 
 - } 
 - } 
 - 	 } finally { 
 - sh " docker logs $ { rosContainer . id } " 
 - rosContainer . stop ( ) 
 - 	 } 
 + } finally { 
 + sh " docker logs $ { rosContainer . id } " 
 + rosContainer . stop ( ) 
 + } 
 } 
 } 
 currentBuild . rawBuild . setResult ( Result . SUCCESS )

NEAREST DIFF:
diff - - git a / Jenkinsfile b / Jenkinsfile 
 index 5ae8ce9 . . 5c3dfe4 100644 
 - - - a / Jenkinsfile 
 + + + b / Jenkinsfile 
 @ @ - 7 , 69 + 7 , 78 @ @ try { 
 node ( ' android ' ) { 
 / / Allocate a custom workspace to avoid having % in the path ( it breaks ld ) 
 ws ( ' / tmp / realm - java ' ) { 
 - stage ' SCM ' 
 - checkout ( [ 
 - $ class : ' GitSCM ' , 
 - branches : scm . branches , 
 - gitTool : ' native git ' , 
 - extensions : scm . extensions + [ [ $ class : ' CleanCheckout ' ] ] , 
 - userRemoteConfigs : scm . userRemoteConfigs 
 - ] ) 
 - sh ' git submodule sync ' 
 - sh ' git submodule update - - init - - recursive ' 
 - / / Make sure not to delete the folder that Jenkins allocates to store scripts 
 - sh ' git clean - ffdx - e . ? ? ? ? ? ? ? ? ' 
 - 
 - stage ' Docker build ' 
 - def buildEnv = docker . build ' realm - java : snapshot ' 
 + stage ( ' SCM ' ) { 
 + checkout ( [ 
 + $ class : ' GitSCM ' , 
 + branches : scm . branches , 
 + gitTool : ' native git ' , 
 + extensions : scm . extensions + [ [ $ class : ' CleanCheckout ' ] ] , 
 + userRemoteConfigs : scm . userRemoteConfigs 
 + ] ) 
 + sh ' git submodule sync ' 
 + sh ' git submodule update - - init - - recursive ' 
 + / / Make sure not to delete the folder that Jenkins allocates to store scripts 
 + sh ' git clean - ffdx - e . ? ? ? ? ? ? ? ? ' 
 + } 
 + 
 + def buildEnv 
 + stage ( ' Docker build ' ) { 
 + buildEnv = docker . build ' realm - java : snapshot ' 
 + } 
 + 
 buildEnv . inside ( " - e HOME = / tmp - e _ JAVA _ OPTIONS = - Duser . home = / tmp - - privileged - v / dev / bus / usb : / dev / bus / usb - v $ { env . HOME } / gradle - cache : / tmp / . gradle - v $ { env . HOME } / . android : / tmp / . android - v $ { env . HOME } / ccache : / tmp / . ccache " ) { 
 - stage ' JVM tests ' 
 - try { 
 - withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { 
 - sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } " 
 + stage ( ' JVM tests ' ) { 
 + try { 
 + withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { 
 + sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } " 
 + } 
 + } finally { 
 + storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' 
 + storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' 
 + step ( [ $ class : ' LintPublisher ' ] ) 
 } 
 - } finally { 
 - storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' 
 - storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' 
 - step ( [ $ class : ' LintPublisher ' ] ) 
 } 
 
 - stage ' Static code analysis ' 
 - try { 
 - gradle ( ' realm ' , ' findbugs pmd checkstyle ' ) 
 - } finally { 
 - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) 
 - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) 
 - step ( [ $ class : ' CheckStylePublisher ' , 
 - canComputeNew : false , 
 - defaultEncoding : ' ' , 
 - healthy : ' ' , 
 - pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , 
 - unHealthy : ' ' 
 - ] ) 
 + stage ( ' Static code analysis ' ) { 
 + try { 
 + gradle ( ' realm ' , ' findbugs pmd checkstyle ' ) 
 + } finally { 
 + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) 
 + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) 
 + step ( [ $ class : ' CheckStylePublisher ' , 
 + canComputeNew : false , 
 + defaultEncoding : ' ' , 
 + healthy : ' ' , 
 + pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , 
 + unHealthy : ' ' 
 + ] ) 
 + } 
 } 
 
 - stage ' Run instrumented tests ' 
 - boolean archiveLog = true 
 - String backgroundPid 
 - try { 
 - backgroundPid = startLogCatCollector ( ) 
 - gradle ( ' realm ' , ' connectedUnitTests ' ) 
 - archiveLog = false ; 
 - } finally { 
 - stopLogCatCollector ( backgroundPid , archiveLog ) 
 - storeJunitResults ' realm / realm - library / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' 
 + stage ( ' Run instrumented tests ' ) { 
 + boolean archiveLog = true 
 + String backgroundPid 
 + try { 
 + backgroundPid = startLogCatCollector ( ) 
 + gradle ( ' realm ' , ' connectedUnitTests ' ) 
 + archiveLog = false ; 
 + } finally { 
 + stopLogCatCollector ( backgroundPid , archiveLog ) 
 + storeJunitResults ' realm / realm - library / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' 
 + } 
 } 
 
 / / TODO : add support for running monkey on the example apps 
 
 if ( env . BRANCH _ NAME = = ' master ' ) { 
 - stage ' Collect metrics ' 
 - collectAarMetrics ( ) 
 + stage ( ' Collect metrics ' ) { 
 + collectAarMetrics ( ) 
 + } 
 
 - stage ' Publish to OJO ' 
 - withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { 
 - sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " 
 + stage ( ' Publish to OJO ' ) { 
 + withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { 
 + sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " 
 + } 
 } 
 } 
 } 
 @ @ - 121 , 16 + 130 , 16 @ @ def stopLogCatCollector ( String backgroundPid , boolean archiveLog ) { 
 sh ' rm logcat . txt ' 
 } 
 
 - def sendMetrics ( String metric , String value ) { 
 + def sendMetrics ( String metricName , String metricValue , Map < String , String > tags ) { 
 + def tagsString = getTagsString ( tags ) 
 withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' 5b8ad2d9 - 61a4 - 43b5 - b4df - b8ff6b1f16fa ' , passwordVariable : ' influx _ pass ' , usernameVariable : ' influx _ user ' ] ] ) { 
 - sh " curl - i - XPOST ' https : / / greatscott - pinheads - 70 . c . influxdb . com : 8086 / write ? db = realm ' - - data - binary ' $ { metric } value = $ { value } i ' - - user ' $ { env . influx _ user } : $ { env . influx _ pass } ' " 
 + sh " curl - i - XPOST ' https : / / greatscott - pinheads - 70 . c . influxdb . com : 8086 / write ? db = realm ' - - data - binary ' $ { metricName } , $ { tagsString } value = $ { metricValue } i ' - - user ' $ { env . influx _ user } : $ { env . influx _ pass } ' " 
 } 
 } 
 
 - def sendTaggedMetric ( String metric , String value , String tagName , String tagValue ) { 
 - withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' 5b8ad2d9 - 61a4 - 43b5 - b4df - b8ff6b1f16fa ' , passwordVariable : ' influx _ pass ' , usernameVariable : ' influx _ user ' ] ] ) { 
 - sh " curl - i - XPOST ' https : / / greatscott - pinheads - 70 . c . influxdb . com : 8086 / write ? db = realm ' - - data - binary ' $ { metric } , $ { tagName } = $ { tagValue } value = $ { value } i ' - - user ' $ { env . influx _ user } : $ { env . influx _ pass } ' " 
 - } 
 + @ NonCPS 
 + def getTagsString ( Map < String , String > tags ) { 
 + return tags . collect { k , v - > " $ k = $ v " } . join ( ' , ' ) 
 } 
 
 def storeJunitResults ( String path ) { 
 @ @ - 141 , 24 + 150 , 30 @ @ def storeJunitResults ( String path ) { 
 } 
 
 def collectAarMetrics ( ) { 
 - sh ' ' ' set - xe 
 - cd realm / realm - library / build / outputs / aar 
 - unzip realm - android - library - release . aar - d unzipped 
 - find $ ANDROID _ HOME - name dx | sort - r | head - n 1 > dx 
 - $ ( cat dx ) - - dex - - output = temp . dex unzipped / classes . jar 
 - cat temp . dex | head - c 92 | tail - c 4 | hexdump - e ' 1 / 4 " % d " ' > methods 
 - ' ' ' 
 - 
 - sendMetrics ( ' methods ' , readFile ( ' realm / realm - library / build / outputs / aar / methods ' ) ) 
 - 
 - def aarFile = findFiles ( glob : ' realm / realm - library / build / outputs / aar / realm - android - library - release . aar ' ) [ 0 ] 
 - sendMetrics ( ' aar _ size ' , aarFile . length as String ) 
 - 
 - def soFiles = findFiles ( glob : ' realm / realm - library / build / outputs / aar / unzipped / jni / * / librealm - jni . so ' ) 
 - for ( int i = 0 ; i < soFiles . length ; i + + ) { 
 - def abiName = soFiles [ i ] . path . tokenize ( ' / ' ) [ - 2 ] 
 - def libSize = soFiles [ i ] . length as String 
 - sendTaggedMetric ( ' abi _ size ' , libSize , ' type ' , abiName ) 
 + def flavors = [ ' base ' , ' objectServer ' ] 
 + for ( def i = 0 ; i < flavors . size ( ) ; i + + ) { 
 + def flavor = flavors [ i ] 
 + sh " " " set - xe 
 + cd realm / realm - library / build / outputs / aar 
 + unzip realm - android - library - $ { flavor } - release . aar - d unzipped $ { flavor } 
 + find \ $ ANDROID _ HOME - name dx | sort - r | head - n 1 > dx 
 + \ $ ( cat dx ) - - dex - - output = temp $ { flavor } . dex unzipped $ { flavor } / classes . jar 
 + cat temp $ { flavor } . dex | head - c 92 | tail - c 4 | hexdump - e ' 1 / 4 \ " % d \ " ' > methods $ { flavor } 
 + " " " 
 + 
 + def methods = readFile ( " realm / realm - library / build / outputs / aar / methods $ { flavor } " ) 
 + sendMetrics ( ' methods ' , methods , [ ' flavor ' : flavor ] ) 
 + 
 + def aarFile = findFiles ( glob : " realm / realm - library / build / outputs / aar / realm - android - library - $ { flavor } - release . aar " ) [ 0 ] 
 + sendMetrics ( ' aar _ size ' , aarFile . length as String , [ ' flavor ' : flavor ] ) 
 + 
 + def soFiles = findFiles ( glob : " realm / realm - library / build / outputs / aar / unzipped $ { flavor } / jni / * / librealm - jni . so " ) 
 + for ( def j = 0 ; j < soFiles . size ( ) ; j + + ) { 
 + def soFile = soFiles [ j ] 
 + def abiName = soFile . path . tokenize ( ' / ' ) [ - 2 ] 
 + def libSize = soFile . length as String 
 + sendMetrics ( ' abi _ size ' , libSize , [ ' flavor ' : flavor , ' type ' : abiName ] ) 
 + } 
 } 
 } 

