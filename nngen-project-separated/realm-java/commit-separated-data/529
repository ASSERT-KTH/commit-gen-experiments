BLEU SCORE: 0.016932492841722675

TEST MSG: Handling Results exceptions . Adding support for contains / index _ of
GENERATED MSG: WiP

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp b / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp <nl> index 9da609e . . 5ef1d4c 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp <nl> @ @ - 51 , 7 + 51 , 7 @ @ Java _ io _ realm _ RealmResults _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared <nl> } <nl> <nl> JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ RealmResults _ nativeCreateSnapshort ( JNIEnv * env , jclass , jlong native _ ptr ) { <nl> + Java _ io _ realm _ RealmResults _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> @ @ - 61 , 6 + 61 , 18 @ @ Java _ io _ realm _ RealmResults _ nativeCreateSnapshort ( JNIEnv * env , jclass , jlong nati <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> } <nl> <nl> + JNIEXPORT jboolean JNICALL <nl> + Java _ io _ realm _ RealmResults _ nativeContains ( JNIEnv * env , jclass , jlong native _ ptr , jlong native _ row _ ptr ) { <nl> + TR _ ENTER _ PTR ( native _ ptr ) ; <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto row = reinterpret _ cast < Row * > ( native _ row _ ptr ) ; <nl> + size _ t index = results - > index _ of ( * row ) ; <nl> + return to _ jbool ( index ! = not _ found ) ; <nl> + } CATCH _ STD ( ) ; <nl> + return JNI _ FALSE ; <nl> + } <nl> + <nl> / / FIXME : we don ' t use it at the moment <nl> JNIEXPORT jlong JNICALL <nl> Java _ io _ realm _ RealmResults _ nativeGetRow ( JNIEnv * env , jclass , jlong native _ ptr , jint index ) { <nl> diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp <nl> index b309893 . . 029f7c4 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / util . cpp <nl> @ @ - 25 , 6 + 25 , 7 @ @ <nl> # include " io _ realm _ internal _ Util . h " <nl> # include " io _ realm _ internal _ SharedRealm . h " <nl> # include " shared _ realm . hpp " <nl> + # include " results . hpp " <nl> <nl> using namespace std ; <nl> using namespace realm ; <nl> @ @ - 80 , 6 + 81 , 21 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) <nl> ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> ThrowException ( env , IllegalArgument , ss . str ( ) ) ; <nl> } <nl> + catch ( Results : : OutOfBoundsIndexException & e ) { <nl> + ss < < " Out of range in " < < file < < " line " < < line <nl> + < < " ( requested : " < < e . requested < < " valid : " < < e . valid _ count < < " ) " ; <nl> + ThrowException ( env , IndexOutOfBounds , ss . str ( ) ) ; <nl> + } <nl> + catch ( Results : : IncorrectTableException & e ) { <nl> + ss < < " Incorrect class in " < < file < < " line " < < line <nl> + < < " ( actual : " < < e . actual < < " expected : " < < e . expected < < " ) " ; <nl> + ThrowException ( env , IllegalArgument , ss . str ( ) ) ; <nl> + } <nl> + catch ( Results : : UnsupportedColumnTypeException & e ) { <nl> + ss < < " Unsupported type in " < < file < < " line " < < line <nl> + < < " ( field name : " < < e . column _ name < < " ) " ; <nl> + ThrowException ( env , IllegalArgument , ss . str ( ) ) ; <nl> + } <nl> catch ( exception & e ) { <nl> ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> ThrowException ( env , FatalError , ss . str ( ) ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp <nl> index a214e9f . . 53825bf 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . hpp <nl> + + + b / realm / realm - library / src / main / cpp / util . hpp <nl> @ @ - 716 , 4 + 716 , 8 @ @ static inline bool to _ bool ( jboolean b ) { <nl> return b = = JNI _ TRUE ; <nl> } <nl> <nl> + static inline jboolean to _ jbool ( bool b ) { <nl> + return b ? JNI _ TRUE : JNI _ FALSE ; <nl> + } <nl> + <nl> # endif / / REALM _ JAVA _ UTIL _ HPP <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 5a2aa84 . . 109a222 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 31 , 12 + 31 , 14 @ @ import java . util . NoSuchElementException ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . Future ; <nl> <nl> + import io . realm . internal . CheckedRow ; <nl> import io . realm . internal . InvalidRow ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableQuery ; <nl> import io . realm . internal . TableView ; <nl> + import io . realm . internal . UncheckedRow ; <nl> import io . realm . internal . async . BadVersionException ; <nl> import io . realm . log . RealmLog ; <nl> import rx . Observable ; <nl> @ @ - 234 , 8 + 236 , 18 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> boolean contains = false ; <nl> if ( isLoaded ( ) & & object instanceof RealmObjectProxy ) { <nl> RealmObjectProxy proxy = ( RealmObjectProxy ) object ; <nl> - if ( realm . getPath ( ) . equals ( proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) . getPath ( ) ) & & proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) ! = InvalidRow . INSTANCE ) { <nl> - contains = ( table . sourceRowIndex ( proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) . getIndex ( ) ) ! = TableOrView . NO _ MATCH ) ; <nl> + if ( nativePtr = = 0 ) { <nl> + if ( realm . getPath ( ) . equals ( proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) . getPath ( ) ) & & proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) ! = InvalidRow . INSTANCE ) { <nl> + contains = ( table . sourceRowIndex ( proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) . getIndex ( ) ) ! = TableOrView . NO _ MATCH ) ; <nl> + } <nl> + } else { <nl> + if ( realm instanceof DynamicRealm ) { <nl> + UncheckedRow row = ( UncheckedRow ) proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) ; <nl> + contains = nativeContains ( nativePtr , row . nativePointer ) ; <nl> + } else { <nl> + CheckedRow row = ( CheckedRow ) proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) ; <nl> + contains = nativeContains ( nativePtr , row . nativePointer ) ; <nl> + } <nl> } <nl> } <nl> return contains ; <nl> @ @ - 456 , 7 + 468 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> <nl> boolean orders [ ] = new boolean [ sortOrders . length ] ; <nl> for ( int i = 0 ; i < sortOrders . length ; i + + ) { <nl> - orders [ i ] = sortOrders [ i ] . getValue ( ) <nl> + orders [ i ] = sortOrders [ i ] . getValue ( ) ; <nl> } <nl> <nl> long ptr = nativeSort ( nativePtr , columnIndices , orders ) ; <nl> @ @ - 1160 , 6 + 1172 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , long [ ] columnIndices , boolean [ ] orders ) ; <nl> private static native long nativeCreateSnapshot ( long nativePtr ) ; <nl> private static native long nativeGetRow ( long nativePtr , int index ) ; <nl> + private static native boolean nativeContains ( long nativePtr , long nativeRowPtr ) ; <nl> private static native void nativeClear ( long nativePtr ) ; <nl> private static native long nativeSize ( long nativePtr ) ; <nl> private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / NativeObject . java b / realm / realm - library / src / main / java / io / realm / internal / NativeObject . java <nl> index cad7f39 . . 7451722 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / NativeObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / NativeObject . java <nl> @ @ - 22 , 5 + 22 , 6 @ @ package io . realm . internal ; <nl> * All Java classes wrapping a core class should extend NativeObject . <nl> * / <nl> public abstract class NativeObject { <nl> - long nativePointer ; <nl> + / / FIXME : can it be protected ? <nl> + public long nativePointer ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> index 8d9ce2b . . 3d156b0 100644 <nl> - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> @ @ - 37 , 7 + 37 , 7 @ @ set ( classes _ LIST <nl> io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow <nl> io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil <nl> io . realm . log . LogLevel io . realm . log . RealmLog io . realm . Property io . realm . RealmSchema <nl> - io . realm . RealmObjectSchema <nl> + io . realm . RealmObjectSchema io . realm . RealmResults <nl> ) <nl> # / . / is the workaround for the problem that AS cannot find the jni headers . <nl> # See https : / / github . com / googlesamples / android - ndk / issues / 319 <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 7bc4df2 . . 29121bf 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 89 , 6 + 89 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> / / clear it . <nl> private boolean viewUpdated = false ; <nl> <nl> + private final long nativePtr ; <nl> + <nl> + static < E extends RealmModel > RealmResults < E > createFromQuery ( BaseRealm realm , TableQuery query , Class < E > clazz , <nl> + String fieldNames [ ] , Sort [ ] sortOrder ) { <nl> + return new RealmResults < E > ( realm , query , clazz , fieldNames , sortOrder ) ; <nl> + } <nl> <nl> static < E extends RealmModel > RealmResults < E > createFromTableQuery ( BaseRealm realm , TableQuery query , Class < E > clazz ) { <nl> return new RealmResults < E > ( realm , query , clazz ) ; <nl> @ @ - 110 , 16 + 116 , 34 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> return realmResults ; <nl> } <nl> <nl> + private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz , String fieldNames [ ] , Sort [ ] sortOrder ) { <nl> + this . realm = realm ; <nl> + this . classSpec = clazz ; <nl> + this . query = query ; <nl> + <nl> + if ( sortOrder . length ! = fieldNames . length ) { <nl> + throw new IllegalArgumentException ( " Number of field names and sort orders does not match " ) ; <nl> + } <nl> + <nl> + boolean [ ] order = new boolean [ sortOrder . length ] ; <nl> + for ( int i = 0 ; i < sortOrder . length ; i + + ) { <nl> + order [ i ] = sortOrder [ i ] = = Sort . ASCENDING ; <nl> + } <nl> + this . nativePtr = nativeCreateResults ( realm . sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , order ) ; <nl> + } <nl> + <nl> private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz ) { <nl> this . realm = realm ; <nl> this . classSpec = clazz ; <nl> this . query = query ; <nl> + this . nativePtr = 0 ; <nl> } <nl> <nl> private RealmResults ( BaseRealm realm , TableQuery query , String className ) { <nl> this . realm = realm ; <nl> this . query = query ; <nl> this . className = className ; <nl> + this . nativePtr = 0 ; <nl> } <nl> <nl> private RealmResults ( BaseRealm realm , TableOrView table , Class < E > classSpec ) { <nl> @ @ - 130 , 6 + 154 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> this . pendingQuery = null ; <nl> this . query = null ; <nl> this . currentTableViewVersion = table . syncIfNeeded ( ) ; <nl> + this . nativePtr = 0 ; <nl> } <nl> <nl> private RealmResults ( BaseRealm realm , String className ) { <nl> @ @ - 138 , 6 + 163 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> <nl> pendingQuery = null ; <nl> query = null ; <nl> + this . nativePtr = 0 ; <nl> } <nl> <nl> private RealmResults ( BaseRealm realm , TableOrView table , String className ) { <nl> @ @ - 262 , 7 + 288 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> @ Override <nl> public E last ( E defaultValue ) { <nl> return lastImpl ( false , defaultValue ) ; <nl> - <nl> + <nl> } <nl> <nl> private E lastImpl ( boolean shouldThrow , E defaultValue ) { <nl> @ @ - 294 , 8 + 320 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public boolean deleteAllFromRealm ( ) { <nl> realm . checkIfValid ( ) ; <nl> if ( size ( ) > 0 ) { <nl> - TableOrView table = getTableOrView ( ) ; <nl> - table . clear ( ) ; <nl> + if ( nativePtr = = 0 ) { <nl> + TableOrView table = getTableOrView ( ) ; <nl> + table . clear ( ) ; <nl> + } else { <nl> + nativeClear ( nativePtr ) ; <nl> + } <nl> return true ; <nl> } else { <nl> return false ; <nl> @ @ - 413 , 7 + 443 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> if ( ! isLoaded ( ) ) { <nl> return 0 ; <nl> } else { <nl> - long size = getTableOrView ( ) . size ( ) ; <nl> + long size ; <nl> + if ( nativePtr = = 0 ) { <nl> + size = getTableOrView ( ) . size ( ) ; <nl> + } else { <nl> + size = nativeSize ( nativePtr ) ; <nl> + } <nl> return ( size > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) size ; <nl> } <nl> } <nl> @ @ - 424 , 15 + 459 , 19 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public Number min ( String fieldName ) { <nl> realm . checkIfValid ( ) ; <nl> long columnIndex = getColumnIndexForSort ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . minimumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . minimumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . minimumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> + if ( nativePtr = = 0 ) { <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . minimumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . minimumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . minimumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> + } <nl> + } else { <nl> + return nativeAggregate ( nativePtr , columnIndex , 1 ) ; <nl> } <nl> } <nl> <nl> @ @ - 1056 , 4 + 1095 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> } <nl> } <nl> } <nl> + <nl> + native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , boolean [ ] order ) ; <nl> + native long nativeGetRow ( long nativePtr , int index ) ; <nl> + native void nativeClear ( long nativePtr ) ; <nl> + native long nativeSize ( long nativePtr ) ; <nl> + native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index e7ad6c0 . . 9f9cf2d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 211 , 7 + 211 , 8 @ @ public final class SharedRealm implements Closeable { <nl> } <nl> } <nl> <nl> - long getNativePtr ( ) { <nl> + / / FIXME : can it be protected ? <nl> + public long getNativePtr ( ) { <nl> return nativePtr ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> index 5060ad4 . . 80cffcb 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> @ @ - 60 , 6 + 60 , 11 @ @ public class TableQuery implements Closeable { <nl> this . origin = origin ; <nl> } <nl> <nl> + / / FIXME : can it be protected ? <nl> + public long getNativePtr ( ) { <nl> + return this . nativePtr ; <nl> + } <nl> + <nl> public void close ( ) { <nl> synchronized ( context ) { <nl> if ( nativePtr ! = 0 ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp b / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp 
 index 9da609e . . 5ef1d4c 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp 
 @ @ - 51 , 7 + 51 , 7 @ @ Java _ io _ realm _ RealmResults _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared 
 } 
 
 JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ RealmResults _ nativeCreateSnapshort ( JNIEnv * env , jclass , jlong native _ ptr ) { 
 + Java _ io _ realm _ RealmResults _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 @ @ - 61 , 6 + 61 , 18 @ @ Java _ io _ realm _ RealmResults _ nativeCreateSnapshort ( JNIEnv * env , jclass , jlong nati 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 } 
 
 + JNIEXPORT jboolean JNICALL 
 + Java _ io _ realm _ RealmResults _ nativeContains ( JNIEnv * env , jclass , jlong native _ ptr , jlong native _ row _ ptr ) { 
 + TR _ ENTER _ PTR ( native _ ptr ) ; 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto row = reinterpret _ cast < Row * > ( native _ row _ ptr ) ; 
 + size _ t index = results - > index _ of ( * row ) ; 
 + return to _ jbool ( index ! = not _ found ) ; 
 + } CATCH _ STD ( ) ; 
 + return JNI _ FALSE ; 
 + } 
 + 
 / / FIXME : we don ' t use it at the moment 
 JNIEXPORT jlong JNICALL 
 Java _ io _ realm _ RealmResults _ nativeGetRow ( JNIEnv * env , jclass , jlong native _ ptr , jint index ) { 
 diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp 
 index b309893 . . 029f7c4 100644 
 - - - a / realm / realm - library / src / main / cpp / util . cpp 
 + + + b / realm / realm - library / src / main / cpp / util . cpp 
 @ @ - 25 , 6 + 25 , 7 @ @ 
 # include " io _ realm _ internal _ Util . h " 
 # include " io _ realm _ internal _ SharedRealm . h " 
 # include " shared _ realm . hpp " 
 + # include " results . hpp " 
 
 using namespace std ; 
 using namespace realm ; 
 @ @ - 80 , 6 + 81 , 21 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) 
 ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 ThrowException ( env , IllegalArgument , ss . str ( ) ) ; 
 } 
 + catch ( Results : : OutOfBoundsIndexException & e ) { 
 + ss < < " Out of range in " < < file < < " line " < < line 
 + < < " ( requested : " < < e . requested < < " valid : " < < e . valid _ count < < " ) " ; 
 + ThrowException ( env , IndexOutOfBounds , ss . str ( ) ) ; 
 + } 
 + catch ( Results : : IncorrectTableException & e ) { 
 + ss < < " Incorrect class in " < < file < < " line " < < line 
 + < < " ( actual : " < < e . actual < < " expected : " < < e . expected < < " ) " ; 
 + ThrowException ( env , IllegalArgument , ss . str ( ) ) ; 
 + } 
 + catch ( Results : : UnsupportedColumnTypeException & e ) { 
 + ss < < " Unsupported type in " < < file < < " line " < < line 
 + < < " ( field name : " < < e . column _ name < < " ) " ; 
 + ThrowException ( env , IllegalArgument , ss . str ( ) ) ; 
 + } 
 catch ( exception & e ) { 
 ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 ThrowException ( env , FatalError , ss . str ( ) ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp 
 index a214e9f . . 53825bf 100644 
 - - - a / realm / realm - library / src / main / cpp / util . hpp 
 + + + b / realm / realm - library / src / main / cpp / util . hpp 
 @ @ - 716 , 4 + 716 , 8 @ @ static inline bool to _ bool ( jboolean b ) { 
 return b = = JNI _ TRUE ; 
 } 
 
 + static inline jboolean to _ jbool ( bool b ) { 
 + return b ? JNI _ TRUE : JNI _ FALSE ; 
 + } 
 + 
 # endif / / REALM _ JAVA _ UTIL _ HPP 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 5a2aa84 . . 109a222 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 31 , 12 + 31 , 14 @ @ import java . util . NoSuchElementException ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . Future ; 
 
 + import io . realm . internal . CheckedRow ; 
 import io . realm . internal . InvalidRow ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableQuery ; 
 import io . realm . internal . TableView ; 
 + import io . realm . internal . UncheckedRow ; 
 import io . realm . internal . async . BadVersionException ; 
 import io . realm . log . RealmLog ; 
 import rx . Observable ; 
 @ @ - 234 , 8 + 236 , 18 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 boolean contains = false ; 
 if ( isLoaded ( ) & & object instanceof RealmObjectProxy ) { 
 RealmObjectProxy proxy = ( RealmObjectProxy ) object ; 
 - if ( realm . getPath ( ) . equals ( proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) . getPath ( ) ) & & proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) ! = InvalidRow . INSTANCE ) { 
 - contains = ( table . sourceRowIndex ( proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) . getIndex ( ) ) ! = TableOrView . NO _ MATCH ) ; 
 + if ( nativePtr = = 0 ) { 
 + if ( realm . getPath ( ) . equals ( proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) . getPath ( ) ) & & proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) ! = InvalidRow . INSTANCE ) { 
 + contains = ( table . sourceRowIndex ( proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) . getIndex ( ) ) ! = TableOrView . NO _ MATCH ) ; 
 + } 
 + } else { 
 + if ( realm instanceof DynamicRealm ) { 
 + UncheckedRow row = ( UncheckedRow ) proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) ; 
 + contains = nativeContains ( nativePtr , row . nativePointer ) ; 
 + } else { 
 + CheckedRow row = ( CheckedRow ) proxy . realmGet $ proxyState ( ) . getRow $ realm ( ) ; 
 + contains = nativeContains ( nativePtr , row . nativePointer ) ; 
 + } 
 } 
 } 
 return contains ; 
 @ @ - 456 , 7 + 468 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 
 boolean orders [ ] = new boolean [ sortOrders . length ] ; 
 for ( int i = 0 ; i < sortOrders . length ; i + + ) { 
 - orders [ i ] = sortOrders [ i ] . getValue ( ) 
 + orders [ i ] = sortOrders [ i ] . getValue ( ) ; 
 } 
 
 long ptr = nativeSort ( nativePtr , columnIndices , orders ) ; 
 @ @ - 1160 , 6 + 1172 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , long [ ] columnIndices , boolean [ ] orders ) ; 
 private static native long nativeCreateSnapshot ( long nativePtr ) ; 
 private static native long nativeGetRow ( long nativePtr , int index ) ; 
 + private static native boolean nativeContains ( long nativePtr , long nativeRowPtr ) ; 
 private static native void nativeClear ( long nativePtr ) ; 
 private static native long nativeSize ( long nativePtr ) ; 
 private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / NativeObject . java b / realm / realm - library / src / main / java / io / realm / internal / NativeObject . java 
 index cad7f39 . . 7451722 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / NativeObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / NativeObject . java 
 @ @ - 22 , 5 + 22 , 6 @ @ package io . realm . internal ; 
 * All Java classes wrapping a core class should extend NativeObject . 
 * / 
 public abstract class NativeObject { 
 - long nativePointer ; 
 + / / FIXME : can it be protected ? 
 + public long nativePointer ; 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 index 8d9ce2b . . 3d156b0 100644 
 - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt 
 + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 @ @ - 37 , 7 + 37 , 7 @ @ set ( classes _ LIST 
 io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow 
 io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil 
 io . realm . log . LogLevel io . realm . log . RealmLog io . realm . Property io . realm . RealmSchema 
 - io . realm . RealmObjectSchema 
 + io . realm . RealmObjectSchema io . realm . RealmResults 
 ) 
 # / . / is the workaround for the problem that AS cannot find the jni headers . 
 # See https : / / github . com / googlesamples / android - ndk / issues / 319 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 7bc4df2 . . 29121bf 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 89 , 6 + 89 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 / / clear it . 
 private boolean viewUpdated = false ; 
 
 + private final long nativePtr ; 
 + 
 + static < E extends RealmModel > RealmResults < E > createFromQuery ( BaseRealm realm , TableQuery query , Class < E > clazz , 
 + String fieldNames [ ] , Sort [ ] sortOrder ) { 
 + return new RealmResults < E > ( realm , query , clazz , fieldNames , sortOrder ) ; 
 + } 
 
 static < E extends RealmModel > RealmResults < E > createFromTableQuery ( BaseRealm realm , TableQuery query , Class < E > clazz ) { 
 return new RealmResults < E > ( realm , query , clazz ) ; 
 @ @ - 110 , 16 + 116 , 34 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 return realmResults ; 
 } 
 
 + private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz , String fieldNames [ ] , Sort [ ] sortOrder ) { 
 + this . realm = realm ; 
 + this . classSpec = clazz ; 
 + this . query = query ; 
 + 
 + if ( sortOrder . length ! = fieldNames . length ) { 
 + throw new IllegalArgumentException ( " Number of field names and sort orders does not match " ) ; 
 + } 
 + 
 + boolean [ ] order = new boolean [ sortOrder . length ] ; 
 + for ( int i = 0 ; i < sortOrder . length ; i + + ) { 
 + order [ i ] = sortOrder [ i ] = = Sort . ASCENDING ; 
 + } 
 + this . nativePtr = nativeCreateResults ( realm . sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , order ) ; 
 + } 
 + 
 private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz ) { 
 this . realm = realm ; 
 this . classSpec = clazz ; 
 this . query = query ; 
 + this . nativePtr = 0 ; 
 } 
 
 private RealmResults ( BaseRealm realm , TableQuery query , String className ) { 
 this . realm = realm ; 
 this . query = query ; 
 this . className = className ; 
 + this . nativePtr = 0 ; 
 } 
 
 private RealmResults ( BaseRealm realm , TableOrView table , Class < E > classSpec ) { 
 @ @ - 130 , 6 + 154 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 this . pendingQuery = null ; 
 this . query = null ; 
 this . currentTableViewVersion = table . syncIfNeeded ( ) ; 
 + this . nativePtr = 0 ; 
 } 
 
 private RealmResults ( BaseRealm realm , String className ) { 
 @ @ - 138 , 6 + 163 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 
 pendingQuery = null ; 
 query = null ; 
 + this . nativePtr = 0 ; 
 } 
 
 private RealmResults ( BaseRealm realm , TableOrView table , String className ) { 
 @ @ - 262 , 7 + 288 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 @ Override 
 public E last ( E defaultValue ) { 
 return lastImpl ( false , defaultValue ) ; 
 - 
 + 
 } 
 
 private E lastImpl ( boolean shouldThrow , E defaultValue ) { 
 @ @ - 294 , 8 + 320 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public boolean deleteAllFromRealm ( ) { 
 realm . checkIfValid ( ) ; 
 if ( size ( ) > 0 ) { 
 - TableOrView table = getTableOrView ( ) ; 
 - table . clear ( ) ; 
 + if ( nativePtr = = 0 ) { 
 + TableOrView table = getTableOrView ( ) ; 
 + table . clear ( ) ; 
 + } else { 
 + nativeClear ( nativePtr ) ; 
 + } 
 return true ; 
 } else { 
 return false ; 
 @ @ - 413 , 7 + 443 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 if ( ! isLoaded ( ) ) { 
 return 0 ; 
 } else { 
 - long size = getTableOrView ( ) . size ( ) ; 
 + long size ; 
 + if ( nativePtr = = 0 ) { 
 + size = getTableOrView ( ) . size ( ) ; 
 + } else { 
 + size = nativeSize ( nativePtr ) ; 
 + } 
 return ( size > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) size ; 
 } 
 } 
 @ @ - 424 , 15 + 459 , 19 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public Number min ( String fieldName ) { 
 realm . checkIfValid ( ) ; 
 long columnIndex = getColumnIndexForSort ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . minimumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . minimumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . minimumDouble ( columnIndex ) ; 
 - default : 
 - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 + if ( nativePtr = = 0 ) { 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . minimumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . minimumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . minimumDouble ( columnIndex ) ; 
 + default : 
 + throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 + } 
 + } else { 
 + return nativeAggregate ( nativePtr , columnIndex , 1 ) ; 
 } 
 } 
 
 @ @ - 1056 , 4 + 1095 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 } 
 } 
 } 
 + 
 + native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , boolean [ ] order ) ; 
 + native long nativeGetRow ( long nativePtr , int index ) ; 
 + native void nativeClear ( long nativePtr ) ; 
 + native long nativeSize ( long nativePtr ) ; 
 + native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index e7ad6c0 . . 9f9cf2d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 211 , 7 + 211 , 8 @ @ public final class SharedRealm implements Closeable { 
 } 
 } 
 
 - long getNativePtr ( ) { 
 + / / FIXME : can it be protected ? 
 + public long getNativePtr ( ) { 
 return nativePtr ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 index 5060ad4 . . 80cffcb 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 @ @ - 60 , 6 + 60 , 11 @ @ public class TableQuery implements Closeable { 
 this . origin = origin ; 
 } 
 
 + / / FIXME : can it be protected ? 
 + public long getNativePtr ( ) { 
 + return this . nativePtr ; 
 + } 
 + 
 public void close ( ) { 
 synchronized ( context ) { 
 if ( nativePtr ! = 0 ) {
