BLEU SCORE: 0.007855246784369017

TEST MSG: Fix tests
GENERATED MSG: Fix errors from login being wrapped in an UNKNOWN code .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java <nl> index 8554b22 . . 1fe1112 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class SessionTests { <nl> ) ; <nl> Session session = new Session ( internalSession ) ; <nl> <nl> - assertEquals ( " realm : / / objectserver . realm . io : 80 / JohnDoe / default " , session . getServerUrl ( ) . toString ( ) ) ; <nl> + assertEquals ( " realm : / / objectserver . realm . io / JohnDoe / default " , session . getServerUrl ( ) . toString ( ) ) ; <nl> assertEquals ( user , session . getUser ( ) ) ; <nl> assertEquals ( configuration , session . getConfiguration ( ) ) ; <nl> assertNull ( session . getState ( ) ) ; <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java <nl> index 4a57dde . . 8cd5e59 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java <nl> @ @ - 280 , 7 + 280 , 7 @ @ public class SyncConfigurationTests { <nl> String url = " realm : / / objectserver . realm . io / default " ; <nl> SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) . build ( ) ; <nl> assertTrue ( user . equals ( config . getUser ( ) ) ) ; <nl> - assertEquals ( " realm : / / objectserver . realm . io : 80 / default " , config . getServerUrl ( ) . toString ( ) ) ; <nl> + assertEquals ( " realm : / / objectserver . realm . io / default " , config . getServerUrl ( ) . toString ( ) ) ; <nl> assertFalse ( config . shouldDeleteRealmOnLogout ( ) ) ; <nl> assertTrue ( config . isSyncConfiguration ( ) ) ; <nl> } <nl> @ @ - 340 , 6 + 340 , 7 @ @ public class SyncConfigurationTests { <nl> file . delete ( ) ; / / clean up <nl> } <nl> <nl> + / * FIXME : deleteRealmOnLogout is not supported by now <nl> @ Test <nl> public void deleteOnLogout ( ) { <nl> User user = createTestUser ( ) ; <nl> @ @ - 350 , 6 + 351 , 7 @ @ public class SyncConfigurationTests { <nl> . build ( ) ; <nl> assertTrue ( config . shouldDeleteRealmOnLogout ( ) ) ; <nl> } <nl> + * / <nl> <nl> @ Test <nl> public void initialData ( ) { <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / UserTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / UserTests . java <nl> index 01df4e1 . . 4cf3601 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / UserTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / UserTests . java <nl> @ @ - 69 , 6 + 69 , 7 @ @ public class UserTests { <nl> } <nl> <nl> / / Tests that the user store returns the last user to login <nl> + / * FIXME : This test fails because of wrong JSON string . <nl> @ Test <nl> public void currentUser _ returnsUserAfterLogin ( ) { <nl> AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; <nl> @ @ - 77 , 54 + 78 , 5 @ @ public class UserTests { <nl> User user = User . login ( Credentials . facebook ( " foo " ) , " http : / / bar . com / auth " ) ; <nl> assertEquals ( user , User . currentUser ( ) ) ; <nl> } <nl> - <nl> - / / Tests that if a user logs in , the refreshToken is refreshed before it expires . <nl> - @ RunTestInLooperThread <nl> - @ Test <nl> - public void login _ refreshWhenExpiring ( ) { <nl> - / / Setup server responses <nl> - / / Expires in 30 seconds and Refresh starts 30 seconds before it expires . This should trigger a refresh <nl> - / / immediately . <nl> - long expires = System . currentTimeMillis ( ) + TimeUnit . SECONDS . toMillis ( 30 ) ; <nl> - AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; <nl> - when ( authServer . loginUser ( any ( Credentials . class ) , any ( URL . class ) ) ) . thenReturn ( SyncTestUtils . createLoginResponse ( expires ) ) ; <nl> - when ( authServer . refreshUser ( any ( Token . class ) , any ( URL . class ) ) ) . then ( new Answer < AuthenticateResponse > ( ) { <nl> - @ Override <nl> - public AuthenticateResponse answer ( InvocationOnMock invocation ) throws Throwable { <nl> - looperThread . testComplete ( ) ; <nl> - return SyncTestUtils . createRefreshResponse ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - / / Login ( which will trigger a refreshUser ) <nl> - SyncManager . setAuthServerImpl ( authServer ) ; <nl> - User . login ( Credentials . facebook ( " foo " ) , " http : / / bar . com / auth " ) ; <nl> - } <nl> - <nl> - / / Tests that if a user is loaded from storage , it will still be refreshed when expiring . <nl> - @ RunTestInLooperThread <nl> - @ Test <nl> - public void currentUser _ refreshWhenExpiring ( ) { <nl> - / / Setup <nl> - / / Expires in 30 seconds and Refresh starts 30 seconds before it expires . This should trigger a refresh <nl> - / / immediately . <nl> - long expires = System . currentTimeMillis ( ) + TimeUnit . SECONDS . toMillis ( 30 ) ; <nl> - AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; <nl> - when ( authServer . refreshUser ( any ( Token . class ) , any ( URL . class ) ) ) . then ( new Answer < AuthenticateResponse > ( ) { <nl> - @ Override <nl> - public AuthenticateResponse answer ( InvocationOnMock invocation ) throws Throwable { <nl> - looperThread . testComplete ( ) ; <nl> - return SyncTestUtils . createRefreshResponse ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - SyncManager . setUserStore ( new SharedPrefsUserStore ( InstrumentationRegistry . getContext ( ) ) ) ; <nl> - SyncManager . setAuthServerImpl ( authServer ) ; <nl> - User testUser = SyncTestUtils . createTestUser ( expires ) ; <nl> - SyncManager . getUserStore ( ) . put ( UserStore . CURRENT _ USER _ KEY , testUser ) ; <nl> - <nl> - / / Load user from storage . This should also trigger a refresh when the user expires <nl> - User user = User . currentUser ( ) ; <nl> - assertEquals ( testUser , user ) ; <nl> - } <nl> + * / <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java b / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java <nl> index bc274b8 . . 458bb29 100644 <nl> - - - a / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java <nl> + + + b / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java <nl> @ @ - 7 , 16 + 7 , 22 @ @ import org . json . JSONException ; <nl> import org . json . JSONObject ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> + import org . mockito . Mockito ; <nl> <nl> import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> + import java . net . URL ; <nl> <nl> import io . realm . internal . network . AuthenticateRequest ; <nl> + import io . realm . internal . network . AuthenticationServer ; <nl> import io . realm . internal . objectserver . Token ; <nl> import io . realm . util . SyncTestUtils ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . fail ; <nl> + import static org . mockito . Matchers . any ; <nl> + import static org . mockito . Mockito . when ; <nl> <nl> @ RunWith ( AndroidJUnit4 . class ) <nl> public class AuthenticateRequestTests { <nl> @ @ - 54 , 4 + 60 , 19 @ @ public class AuthenticateRequestTests { <nl> assertEquals ( t . value ( ) , obj . get ( " data " ) ) ; <nl> assertEquals ( " realm " , obj . get ( " provider " ) ) ; <nl> } <nl> + <nl> + <nl> + @ Test <nl> + public void errorsNotWrapped ( ) { <nl> + AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; <nl> + when ( authServer . loginUser ( any ( Credentials . class ) , any ( URL . class ) ) ) . thenReturn ( SyncTestUtils . createErrorResponse ( ErrorCode . ACCESS _ DENIED ) ) ; <nl> + SyncManager . setAuthServerImpl ( authServer ) ; <nl> + <nl> + try { <nl> + User . login ( Credentials . facebook ( " foo " ) , " http : / / foo . bar / auth " ) ; <nl> + fail ( ) ; <nl> + } catch ( ObjectServerError e ) { <nl> + assertEquals ( ErrorCode . ACCESS _ DENIED , e . getErrorCode ( ) ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / androidTestobjectServer / java / io / realm / util / SyncTestUtils . java b / realm / realm - library / src / androidTestobjectServer / java / io / realm / util / SyncTestUtils . java <nl> index 2fdd291 . . dda3944 100644 <nl> - - - a / realm / realm - library / src / androidTestobjectServer / java / io / realm / util / SyncTestUtils . java <nl> + + + b / realm / realm - library / src / androidTestobjectServer / java / io / realm / util / SyncTestUtils . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import org . json . JSONObject ; <nl> <nl> import java . util . UUID ; <nl> <nl> + import io . realm . ErrorCode ; <nl> + import io . realm . ObjectServerError ; <nl> import io . realm . User ; <nl> import io . realm . internal . network . AuthenticateResponse ; <nl> import io . realm . internal . objectserver . SyncUser ; <nl> @ @ - 79 , 4 + 81 , 8 @ @ public class SyncTestUtils { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> + <nl> + public static AuthenticateResponse createErrorResponse ( ErrorCode code ) { <nl> + return AuthenticateResponse . from ( new ObjectServerError ( code , " dummy " ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / User . java b / realm / realm - library / src / objectServer / java / io / realm / User . java <nl> index 439ea59 . . 2f84203 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / User . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / User . java <nl> @ @ - 126 , 6 + 126 , 7 @ @ public class User { <nl> } <nl> <nl> final AuthenticationServer server = SyncManager . getAuthServer ( ) ; <nl> + ObjectServerError error ; <nl> try { <nl> AuthenticateResponse result = server . loginUser ( credentials , authUrl ) ; <nl> if ( result . isValid ( ) ) { <nl> @ @ - 137 , 13 + 138 , 12 @ @ public class User { <nl> return user ; <nl> } else { <nl> RealmLog . info ( " Failed authenticating user . \ n % s " , result . getError ( ) ) ; <nl> - throw result . getError ( ) ; <nl> + error = result . getError ( ) ; <nl> } <nl> - } catch ( IOException e ) { <nl> - throw new ObjectServerError ( ErrorCode . IO _ EXCEPTION , e ) ; <nl> } catch ( Throwable e ) { <nl> throw new ObjectServerError ( ErrorCode . UNKNOWN , e ) ; <nl> } <nl> + throw error ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> index 919c1ed . . 2b5ae1e 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { <nl> String requestBody = AuthenticateRequest . userLogin ( credentials ) . toJson ( ) ; <nl> return authenticate ( authenticationUrl , requestBody ) ; <nl> } catch ( Exception e ) { <nl> - return AuthenticateResponse . from ( new ObjectServerError ( ErrorCode . OTHER _ ERROR , Util . getStackTrace ( e ) ) ) ; <nl> + return AuthenticateResponse . from ( new ObjectServerError ( ErrorCode . UNKNOWN , e ) ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java 
 index 8554b22 . . 1fe1112 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class SessionTests { 
 ) ; 
 Session session = new Session ( internalSession ) ; 
 
 - assertEquals ( " realm : / / objectserver . realm . io : 80 / JohnDoe / default " , session . getServerUrl ( ) . toString ( ) ) ; 
 + assertEquals ( " realm : / / objectserver . realm . io / JohnDoe / default " , session . getServerUrl ( ) . toString ( ) ) ; 
 assertEquals ( user , session . getUser ( ) ) ; 
 assertEquals ( configuration , session . getConfiguration ( ) ) ; 
 assertNull ( session . getState ( ) ) ; 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java 
 index 4a57dde . . 8cd5e59 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java 
 @ @ - 280 , 7 + 280 , 7 @ @ public class SyncConfigurationTests { 
 String url = " realm : / / objectserver . realm . io / default " ; 
 SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) . build ( ) ; 
 assertTrue ( user . equals ( config . getUser ( ) ) ) ; 
 - assertEquals ( " realm : / / objectserver . realm . io : 80 / default " , config . getServerUrl ( ) . toString ( ) ) ; 
 + assertEquals ( " realm : / / objectserver . realm . io / default " , config . getServerUrl ( ) . toString ( ) ) ; 
 assertFalse ( config . shouldDeleteRealmOnLogout ( ) ) ; 
 assertTrue ( config . isSyncConfiguration ( ) ) ; 
 } 
 @ @ - 340 , 6 + 340 , 7 @ @ public class SyncConfigurationTests { 
 file . delete ( ) ; / / clean up 
 } 
 
 + / * FIXME : deleteRealmOnLogout is not supported by now 
 @ Test 
 public void deleteOnLogout ( ) { 
 User user = createTestUser ( ) ; 
 @ @ - 350 , 6 + 351 , 7 @ @ public class SyncConfigurationTests { 
 . build ( ) ; 
 assertTrue ( config . shouldDeleteRealmOnLogout ( ) ) ; 
 } 
 + * / 
 
 @ Test 
 public void initialData ( ) { 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / UserTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / UserTests . java 
 index 01df4e1 . . 4cf3601 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / UserTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / UserTests . java 
 @ @ - 69 , 6 + 69 , 7 @ @ public class UserTests { 
 } 
 
 / / Tests that the user store returns the last user to login 
 + / * FIXME : This test fails because of wrong JSON string . 
 @ Test 
 public void currentUser _ returnsUserAfterLogin ( ) { 
 AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; 
 @ @ - 77 , 54 + 78 , 5 @ @ public class UserTests { 
 User user = User . login ( Credentials . facebook ( " foo " ) , " http : / / bar . com / auth " ) ; 
 assertEquals ( user , User . currentUser ( ) ) ; 
 } 
 - 
 - / / Tests that if a user logs in , the refreshToken is refreshed before it expires . 
 - @ RunTestInLooperThread 
 - @ Test 
 - public void login _ refreshWhenExpiring ( ) { 
 - / / Setup server responses 
 - / / Expires in 30 seconds and Refresh starts 30 seconds before it expires . This should trigger a refresh 
 - / / immediately . 
 - long expires = System . currentTimeMillis ( ) + TimeUnit . SECONDS . toMillis ( 30 ) ; 
 - AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; 
 - when ( authServer . loginUser ( any ( Credentials . class ) , any ( URL . class ) ) ) . thenReturn ( SyncTestUtils . createLoginResponse ( expires ) ) ; 
 - when ( authServer . refreshUser ( any ( Token . class ) , any ( URL . class ) ) ) . then ( new Answer < AuthenticateResponse > ( ) { 
 - @ Override 
 - public AuthenticateResponse answer ( InvocationOnMock invocation ) throws Throwable { 
 - looperThread . testComplete ( ) ; 
 - return SyncTestUtils . createRefreshResponse ( ) ; 
 - } 
 - } ) ; 
 - 
 - / / Login ( which will trigger a refreshUser ) 
 - SyncManager . setAuthServerImpl ( authServer ) ; 
 - User . login ( Credentials . facebook ( " foo " ) , " http : / / bar . com / auth " ) ; 
 - } 
 - 
 - / / Tests that if a user is loaded from storage , it will still be refreshed when expiring . 
 - @ RunTestInLooperThread 
 - @ Test 
 - public void currentUser _ refreshWhenExpiring ( ) { 
 - / / Setup 
 - / / Expires in 30 seconds and Refresh starts 30 seconds before it expires . This should trigger a refresh 
 - / / immediately . 
 - long expires = System . currentTimeMillis ( ) + TimeUnit . SECONDS . toMillis ( 30 ) ; 
 - AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; 
 - when ( authServer . refreshUser ( any ( Token . class ) , any ( URL . class ) ) ) . then ( new Answer < AuthenticateResponse > ( ) { 
 - @ Override 
 - public AuthenticateResponse answer ( InvocationOnMock invocation ) throws Throwable { 
 - looperThread . testComplete ( ) ; 
 - return SyncTestUtils . createRefreshResponse ( ) ; 
 - } 
 - } ) ; 
 - 
 - SyncManager . setUserStore ( new SharedPrefsUserStore ( InstrumentationRegistry . getContext ( ) ) ) ; 
 - SyncManager . setAuthServerImpl ( authServer ) ; 
 - User testUser = SyncTestUtils . createTestUser ( expires ) ; 
 - SyncManager . getUserStore ( ) . put ( UserStore . CURRENT _ USER _ KEY , testUser ) ; 
 - 
 - / / Load user from storage . This should also trigger a refresh when the user expires 
 - User user = User . currentUser ( ) ; 
 - assertEquals ( testUser , user ) ; 
 - } 
 + * / 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java b / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java 
 index bc274b8 . . 458bb29 100644 
 - - - a / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java 
 + + + b / realm / realm - library / src / androidTestobjectServer / java / io / realm / AuthenticateRequestTests . java 
 @ @ - 7 , 16 + 7 , 22 @ @ import org . json . JSONException ; 
 import org . json . JSONObject ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 + import org . mockito . Mockito ; 
 
 import java . net . URI ; 
 import java . net . URISyntaxException ; 
 + import java . net . URL ; 
 
 import io . realm . internal . network . AuthenticateRequest ; 
 + import io . realm . internal . network . AuthenticationServer ; 
 import io . realm . internal . objectserver . Token ; 
 import io . realm . util . SyncTestUtils ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . fail ; 
 + import static org . mockito . Matchers . any ; 
 + import static org . mockito . Mockito . when ; 
 
 @ RunWith ( AndroidJUnit4 . class ) 
 public class AuthenticateRequestTests { 
 @ @ - 54 , 4 + 60 , 19 @ @ public class AuthenticateRequestTests { 
 assertEquals ( t . value ( ) , obj . get ( " data " ) ) ; 
 assertEquals ( " realm " , obj . get ( " provider " ) ) ; 
 } 
 + 
 + 
 + @ Test 
 + public void errorsNotWrapped ( ) { 
 + AuthenticationServer authServer = Mockito . mock ( AuthenticationServer . class ) ; 
 + when ( authServer . loginUser ( any ( Credentials . class ) , any ( URL . class ) ) ) . thenReturn ( SyncTestUtils . createErrorResponse ( ErrorCode . ACCESS _ DENIED ) ) ; 
 + SyncManager . setAuthServerImpl ( authServer ) ; 
 + 
 + try { 
 + User . login ( Credentials . facebook ( " foo " ) , " http : / / foo . bar / auth " ) ; 
 + fail ( ) ; 
 + } catch ( ObjectServerError e ) { 
 + assertEquals ( ErrorCode . ACCESS _ DENIED , e . getErrorCode ( ) ) ; 
 + } 
 + } 
 } 
 diff - - git a / realm / realm - library / src / androidTestobjectServer / java / io / realm / util / SyncTestUtils . java b / realm / realm - library / src / androidTestobjectServer / java / io / realm / util / SyncTestUtils . java 
 index 2fdd291 . . dda3944 100644 
 - - - a / realm / realm - library / src / androidTestobjectServer / java / io / realm / util / SyncTestUtils . java 
 + + + b / realm / realm - library / src / androidTestobjectServer / java / io / realm / util / SyncTestUtils . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import org . json . JSONObject ; 
 
 import java . util . UUID ; 
 
 + import io . realm . ErrorCode ; 
 + import io . realm . ObjectServerError ; 
 import io . realm . User ; 
 import io . realm . internal . network . AuthenticateResponse ; 
 import io . realm . internal . objectserver . SyncUser ; 
 @ @ - 79 , 4 + 81 , 8 @ @ public class SyncTestUtils { 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 + 
 + public static AuthenticateResponse createErrorResponse ( ErrorCode code ) { 
 + return AuthenticateResponse . from ( new ObjectServerError ( code , " dummy " ) ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / User . java b / realm / realm - library / src / objectServer / java / io / realm / User . java 
 index 439ea59 . . 2f84203 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / User . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / User . java 
 @ @ - 126 , 6 + 126 , 7 @ @ public class User { 
 } 
 
 final AuthenticationServer server = SyncManager . getAuthServer ( ) ; 
 + ObjectServerError error ; 
 try { 
 AuthenticateResponse result = server . loginUser ( credentials , authUrl ) ; 
 if ( result . isValid ( ) ) { 
 @ @ - 137 , 13 + 138 , 12 @ @ public class User { 
 return user ; 
 } else { 
 RealmLog . info ( " Failed authenticating user . \ n % s " , result . getError ( ) ) ; 
 - throw result . getError ( ) ; 
 + error = result . getError ( ) ; 
 } 
 - } catch ( IOException e ) { 
 - throw new ObjectServerError ( ErrorCode . IO _ EXCEPTION , e ) ; 
 } catch ( Throwable e ) { 
 throw new ObjectServerError ( ErrorCode . UNKNOWN , e ) ; 
 } 
 + throw error ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 index 919c1ed . . 2b5ae1e 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / OkHttpAuthenticationServer . java 
 @ @ - 52 , 7 + 52 , 7 @ @ public class OkHttpAuthenticationServer implements AuthenticationServer { 
 String requestBody = AuthenticateRequest . userLogin ( credentials ) . toJson ( ) ; 
 return authenticate ( authenticationUrl , requestBody ) ; 
 } catch ( Exception e ) { 
 - return AuthenticateResponse . from ( new ObjectServerError ( ErrorCode . OTHER _ ERROR , Util . getStackTrace ( e ) ) ) ; 
 + return AuthenticateResponse . from ( new ObjectServerError ( ErrorCode . UNKNOWN , e ) ) ; 
 } 
 } 

