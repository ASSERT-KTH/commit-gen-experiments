BLEU SCORE: 0.040583489434387374

TEST MSG: Give async related vars better names
GENERATED MSG: Remove generic parameter from RealmObject

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> index 95715d9 . . 5f8f7a1 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> @ @ - 701 , 7 + 701 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> } ; <nl> realm . setHandler ( handler ) ; <nl> - Realm . asyncQueryExecutor . pause ( ) ; <nl> + Realm . asyncTaskExecutor . pause ( ) ; <nl> <nl> / / Create async queries and check they haven ' t completed <nl> final RealmResults < AllTypes > realmResults1 = realm . where ( AllTypes . class ) <nl> @ @ - 725 , 7 + 725 , 7 @ @ public class RealmAsyncQueryTests { <nl> realm . commitTransaction ( ) ; <nl> } <nl> } . awaitOrFail ( ) ; <nl> - Realm . asyncQueryExecutor . resume ( ) ; <nl> + Realm . asyncTaskExecutor . resume ( ) ; <nl> <nl> / / Setup change listeners <nl> final Runnable signalCallbackDone = new Runnable ( ) { <nl> @ @ - 1025 , 7 + 1025 , 7 @ @ public class RealmAsyncQueryTests { <nl> } ; <nl> realm . setHandler ( handler ) ; <nl> <nl> - / / 3 . This will add a task to the paused asyncQueryExecutor <nl> + / / 3 . This will add a task to the paused asyncTaskExecutor <nl> final RealmResults < AllTypes > realmResults = realm . where ( AllTypes . class ) <nl> . between ( " columnLong " , 4 , 8 ) <nl> . findAllSortedAsync ( " columnString " , Sort . ASCENDING ) ; <nl> @ @ - 1410 , 7 + 1410 , 7 @ @ public class RealmAsyncQueryTests { <nl> public void combiningAsyncAndSync ( ) { <nl> populateTestRealm ( looperThread . realm , 10 ) ; <nl> <nl> - Realm . asyncQueryExecutor . pause ( ) ; <nl> + Realm . asyncTaskExecutor . pause ( ) ; <nl> final RealmResults < AllTypes > allTypesAsync = looperThread . realm . where ( AllTypes . class ) . greaterThan ( " columnLong " , 5 ) . findAllAsync ( ) ; <nl> final RealmResults < AllTypes > allTypesSync = allTypesAsync . where ( ) . greaterThan ( " columnLong " , 3 ) . findAll ( ) ; <nl> <nl> @ @ - 1424 , 7 + 1424 , 7 @ @ public class RealmAsyncQueryTests { <nl> looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> - Realm . asyncQueryExecutor . resume ( ) ; <nl> + Realm . asyncTaskExecutor . resume ( ) ; <nl> looperThread . keepStrongReference . add ( allTypesAsync ) ; <nl> } <nl> <nl> @ @ - 1789 , 7 + 1789 , 7 @ @ public class RealmAsyncQueryTests { <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> <nl> populateTestRealm ( looperThread . realm , 10 ) ; <nl> - Realm . asyncQueryExecutor . pause ( ) ; <nl> + Realm . asyncTaskExecutor . pause ( ) ; <nl> <nl> final AllTypes firstAsync = looperThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; <nl> firstAsync . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { <nl> @ @ - 1809 , 7 + 1809 , 7 @ @ public class RealmAsyncQueryTests { <nl> / / Advancing the Realm without generating notifications <nl> bgRealm . sharedGroupManager . promoteToWrite ( ) ; <nl> bgRealm . sharedGroupManager . commitAndContinueAsRead ( ) ; <nl> - Realm . asyncQueryExecutor . resume ( ) ; <nl> + Realm . asyncTaskExecutor . resume ( ) ; <nl> bgRealm . close ( ) ; <nl> signalClosedRealm . countDown ( ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> index a4af1d2 . . 5255240 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java <nl> @ @ - 2359 , 7 + 2359 , 7 @ @ public class RealmQueryTests { <nl> <nl> Realm asyncRealm = null ; <nl> try { <nl> - Realm . asyncQueryExecutor . pause ( ) ; <nl> + Realm . asyncTaskExecutor . pause ( ) ; <nl> asyncRealm = openRealmInstance ( " testDistinctAsyncQueryWithNull " ) ; <nl> final long numberOfBlocks = 25 ; <nl> final long numberOfObjects = 10 ; / / must be greater than 1 <nl> @ @ - 2376 , 7 + 2376 , 7 @ @ public class RealmQueryTests { <nl> assertTrue ( distinctString . isValid ( ) ) ; <nl> assertTrue ( distinctString . isEmpty ( ) ) ; <nl> <nl> - Realm . asyncQueryExecutor . resume ( ) ; <nl> + Realm . asyncTaskExecutor . resume ( ) ; <nl> <nl> distinctDate . addChangeListener ( new RealmChangeListener < RealmResults < AnnotationIndexTypes > > ( ) { <nl> @ Override <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> index 7961395 . . ce5f00c 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> @ @ - 951 , 7 + 951 , 7 @ @ public class TestHelper { <nl> * @ param executor { @ link RealmThreadPoolExecutor } that should replace the current one <nl> * / <nl> public static RealmThreadPoolExecutor replaceRealmThreadExectutor ( RealmThreadPoolExecutor executor ) throws NoSuchFieldException , IllegalAccessException { <nl> - Field field = BaseRealm . class . getDeclaredField ( " asyncQueryExecutor " ) ; <nl> + Field field = BaseRealm . class . getDeclaredField ( " asyncTaskExecutor " ) ; <nl> field . setAccessible ( true ) ; <nl> RealmThreadPoolExecutor oldExecutor = ( RealmThreadPoolExecutor ) field . get ( null ) ; <nl> field . set ( field , executor ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 5c832b8 . . 074bc81 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 58 , 7 + 58 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> protected static final Map < Handler , String > handlers = new ConcurrentHashMap < Handler , String > ( ) ; <nl> <nl> / / Thread pool for all async operations ( Query & transaction ) <nl> - static final RealmThreadPoolExecutor asyncQueryExecutor = RealmThreadPoolExecutor . newDefaultExecutor ( ) ; <nl> + static final RealmThreadPoolExecutor asyncTaskExecutor = RealmThreadPoolExecutor . newDefaultExecutor ( ) ; <nl> <nl> final long threadId ; <nl> protected RealmConfiguration configuration ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / HandlerController . java b / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> index 424c207 . . fbce366 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> @ @ - 235 , 7 + 235 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> while ( iterator . hasNext ( ) ) { <nl> Map . Entry < WeakReference < RealmObjectProxy > , RealmQuery < ? > > next = iterator . next ( ) ; <nl> if ( next . getKey ( ) . get ( ) ! = null ) { <nl> - Realm . asyncQueryExecutor <nl> + Realm . asyncTaskExecutor <nl> . submit ( QueryUpdateTask . newBuilder ( ) <nl> . realmConfiguration ( realm . getConfiguration ( ) ) <nl> . addObject ( next . getKey ( ) , <nl> @ @ - 326 , 7 + 326 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> if ( updateAsyncQueriesTask ! = null & & ! updateAsyncQueriesTask . isDone ( ) ) { <nl> / / try to cancel any pending update since we ' re submitting a new one anyway <nl> updateAsyncQueriesTask . cancel ( true ) ; <nl> - Realm . asyncQueryExecutor . getQueue ( ) . remove ( updateAsyncQueriesTask ) ; <nl> + Realm . asyncTaskExecutor . getQueue ( ) . remove ( updateAsyncQueriesTask ) ; <nl> RealmLog . d ( " REALM _ CHANGED realm : " + HandlerController . this + " cancelling pending COMPLETED _ UPDATE _ ASYNC _ QUERIES updates " ) ; <nl> } <nl> RealmLog . d ( " REALM _ CHANGED realm : " + HandlerController . this + " updating async queries , total : " + asyncRealmResults . size ( ) ) ; <nl> @ @ - 363 , 7 + 363 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> QueryUpdateTask queryUpdateTask = realmResultsQueryStep <nl> . sendToHandler ( realm . handler , COMPLETED _ UPDATE _ ASYNC _ QUERIES ) <nl> . build ( ) ; <nl> - updateAsyncQueriesTask = Realm . asyncQueryExecutor . submit ( queryUpdateTask ) ; <nl> + updateAsyncQueriesTask = Realm . asyncTaskExecutor . submit ( queryUpdateTask ) ; <nl> } <nl> } <nl> <nl> @ @ - 428 , 7 + 428 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> . sendToHandler ( realm . handler , COMPLETED _ ASYNC _ REALM _ RESULTS ) <nl> . build ( ) ; <nl> <nl> - Realm . asyncQueryExecutor . submit ( queryUpdateTask ) ; <nl> + Realm . asyncTaskExecutor . submit ( queryUpdateTask ) ; <nl> <nl> } else { <nl> / / UC covered by this test : RealmAsyncQueryTests # testFindAllCallerIsAdvanced <nl> @ @ - 556 , 7 + 556 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> . sendToHandler ( realm . handler , COMPLETED _ ASYNC _ REALM _ OBJECT ) <nl> . build ( ) ; <nl> <nl> - Realm . asyncQueryExecutor . submit ( queryUpdateTask ) ; <nl> + Realm . asyncTaskExecutor . submit ( queryUpdateTask ) ; <nl> } <nl> } else { <nl> / / should not happen , since the the background thread position itself against the provided version <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index c43883b . . c8926b4 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 1128 , 7 + 1128 , 7 @ @ public final class Realm extends BaseRealm { <nl> / / to perform the transaction <nl> final RealmConfiguration realmConfiguration = getConfiguration ( ) ; <nl> <nl> - final Future < ? > pendingQuery = asyncQueryExecutor . submit ( new Runnable ( ) { <nl> + final Future < ? > pendingTransaction = asyncTaskExecutor . submit ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> if ( Thread . currentThread ( ) . isInterrupted ( ) ) { <nl> @ @ - 1192 , 7 + 1192 , 7 @ @ public final class Realm extends BaseRealm { <nl> } <nl> } ) ; <nl> <nl> - return new RealmAsyncTask ( pendingQuery ) ; <nl> + return new RealmAsyncTask ( pendingTransaction ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1269 , 7 + 1269 , 7 @ @ public final class Realm extends BaseRealm { <nl> / / to perform the transaction <nl> final RealmConfiguration realmConfiguration = getConfiguration ( ) ; <nl> <nl> - final Future < ? > pendingQuery = asyncQueryExecutor . submit ( new Runnable ( ) { <nl> + final Future < ? > pendingTransaction = asyncTaskExecutor . submit ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> if ( Thread . currentThread ( ) . isInterrupted ( ) ) { <nl> @ @ - 1363 , 7 + 1363 , 7 @ @ public final class Realm extends BaseRealm { <nl> } <nl> } ) ; <nl> <nl> - return new RealmAsyncTask ( pendingQuery ) ; <nl> + return new RealmAsyncTask ( pendingTransaction ) ; <nl> } <nl> <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmAsyncTask . java b / realm / realm - library / src / main / java / io / realm / RealmAsyncTask . java <nl> index 3f6492f . . aa53c0c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmAsyncTask . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmAsyncTask . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ public final class RealmAsyncTask { <nl> / / first thread is attempting to purge the queue the attempt to purge <nl> / / the queue fails and the cancelled object remain in the queue . <nl> / / A better way to cancel objects with thread pools is to use the remove ( ) <nl> - Realm . asyncQueryExecutor . getQueue ( ) . remove ( pendingQuery ) ; <nl> + Realm . asyncTaskExecutor . getQueue ( ) . remove ( pendingQuery ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index d70a648 . . a955dfd 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1162 , 7 + 1162 , 7 @ @ public final class RealmQuery < E extends RealmModel > { <nl> <nl> final WeakReference < RealmResults < ? extends RealmModel > > weakRealmResults = realm . handlerController . addToAsyncRealmResults ( realmResults , this ) ; <nl> <nl> - final Future < Long > pendingQuery = Realm . asyncQueryExecutor . submit ( new Callable < Long > ( ) { <nl> + final Future < Long > pendingQuery = Realm . asyncTaskExecutor . submit ( new Callable < Long > ( ) { <nl> @ Override <nl> public Long call ( ) throws Exception { <nl> if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { <nl> @ @ - 1469 , 7 + 1469 , 7 @ @ public final class RealmQuery < E extends RealmModel > { <nl> <nl> final WeakReference < RealmResults < ? extends RealmModel > > weakRealmResults = realm . handlerController . addToAsyncRealmResults ( realmResults , this ) ; <nl> <nl> - final Future < Long > pendingQuery = Realm . asyncQueryExecutor . submit ( new Callable < Long > ( ) { <nl> + final Future < Long > pendingQuery = Realm . asyncTaskExecutor . submit ( new Callable < Long > ( ) { <nl> @ Override <nl> public Long call ( ) throws Exception { <nl> if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { <nl> @ @ - 1587 , 7 + 1587 , 7 @ @ public final class RealmQuery < E extends RealmModel > { <nl> final WeakReference < RealmResults < ? extends RealmModel > > weakRealmResults = <nl> realm . handlerController . addToAsyncRealmResults ( realmResults , this ) ; <nl> <nl> - final Future < Long > pendingQuery = Realm . asyncQueryExecutor . submit ( new Callable < Long > ( ) { <nl> + final Future < Long > pendingQuery = Realm . asyncTaskExecutor . submit ( new Callable < Long > ( ) { <nl> @ Override <nl> public Long call ( ) throws Exception { <nl> if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { <nl> @ @ - 1760 , 7 + 1760 , 7 @ @ public final class RealmQuery < E extends RealmModel > { <nl> <nl> final WeakReference < RealmResults < ? extends RealmModel > > weakRealmResults = realm . handlerController . addToAsyncRealmResults ( realmResults , this ) ; <nl> <nl> - final Future < Long > pendingQuery = Realm . asyncQueryExecutor . submit ( new Callable < Long > ( ) { <nl> + final Future < Long > pendingQuery = Realm . asyncTaskExecutor . submit ( new Callable < Long > ( ) { <nl> @ Override <nl> public Long call ( ) throws Exception { <nl> if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { <nl> @ @ - 1920 , 7 + 1920 , 7 @ @ public final class RealmQuery < E extends RealmModel > { <nl> proxy . realmGet $ proxyState ( ) . setRealm $ realm ( realm ) ; <nl> proxy . realmGet $ proxyState ( ) . setRow $ realm ( Row . EMPTY _ ROW ) ; <nl> <nl> - final Future < Long > pendingQuery = Realm . asyncQueryExecutor . submit ( new Callable < Long > ( ) { <nl> + final Future < Long > pendingQuery = Realm . asyncTaskExecutor . submit ( new Callable < Long > ( ) { <nl> @ Override <nl> public Long call ( ) throws Exception { <nl> if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) {
NEAREST DIFF (one line): diff - - git a / examples / rxJavaExample / README . md b / examples / rxJavaExample / README . md <nl> index 3f33bfa . . ea203c2 100644 <nl> - - - a / examples / rxJavaExample / README . md <nl> + + + b / examples / rxJavaExample / README . md <nl> @ @ - 5 , 13 + 5 , 17 @ @ <nl> - Observables might have a default Scheduler they operate on that is <nl> different than the one the RealmObject was created on . <nl> <nl> - - RealmObjects auto - update . Observables that operate on multiple " versions " <nl> + - RealmObjects are live objects that automatically staty up to date . Observables that operate on multiple " versions " <nl> will most likely not work as expected . <nl> <nl> - Retrofit automatically offload to a worker thread . <nl> <nl> - Use Realm async API instead of subscribeOn to offload Realm work . <nl> <nl> + - You can use Realm . copyFromRealm to make a copy of Realm data <nl> + <nl> + <nl> + <nl> <nl> # # Resources ( TODO ) <nl> - http : / / www . grahamlea . com / 2014 / 07 / rxjava - threading - examples / <nl> \ No newline at end of file <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> index 12a0c4a . . ff099ad 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ public class RxJavaTests extends AndroidTestCase { <nl> realm . commitTransaction ( ) ; <nl> <nl> final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> @ Override <nl> public void call ( AllTypes rxObject ) { <nl> assertTrue ( rxObject = = obj ) ; <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class RxJavaTests extends AndroidTestCase { <nl> final AllTypes obj = realm . createObject ( AllTypes . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> @ Override <nl> public void call ( AllTypes rxObject ) { <nl> subscriberCalled . addAndGet ( 1 ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index a3e5103 . . 4e420ec 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 25 , 15 + 25 , 12 @ @ import java . lang . ref . ReferenceQueue ; <nl> import java . lang . ref . WeakReference ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> - import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> - import java . util . Set ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> - import java . util . concurrent . CopyOnWriteArraySet ; <nl> <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> import io . realm . internal . SharedGroupManager ; <nl> @ @ - 44 , 7 + 41 , 6 @ @ import io . realm . internal . android . DebugAndroidLogger ; <nl> import io . realm . internal . android . ReleaseAndroidLogger ; <nl> import io . realm . internal . async . RealmThreadPoolExecutor ; <nl> import io . realm . internal . log . RealmLog ; <nl> - import io . realm . rx . RxObservableFactory ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 53 , 7 + 49 , 7 @ @ import rx . Observable ; <nl> * @ see io . realm . Realm <nl> * @ see io . realm . DynamicRealm <nl> * / <nl> - public abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> + public abstract class BaseRealm < T extends BaseRealm < T > > implements Closeable { <nl> protected static final long UNVERSIONED = - 1 ; <nl> private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; <nl> private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; <nl> @ @ - 203 , 8 + 199 , 8 @ @ public abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public Observable < E > observable ( ) { <nl> - return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; <nl> + public Observable < T > observable ( ) { <nl> + return ( Observable < T > ) configuration . getRxFactory ( ) . from ( this ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> index f979667 . . 627ac4a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ import io . realm . internal . TableView ; <nl> * @ see Realm <nl> * @ see RealmSchema <nl> * / <nl> - public final class DynamicRealm extends BaseRealm { <nl> + public final class DynamicRealm extends BaseRealm < DynamicRealm > { <nl> <nl> private DynamicRealm ( RealmConfiguration configuration , boolean autoRefresh ) { <nl> super ( configuration , autoRefresh ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> index 40ad05a . . 318e9e9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ import io . realm . internal . android . JsonUtils ; <nl> * Class that wraps a normal RealmObject in order to allow dynamic access instead of a typed interface . <nl> * Using a DynamicRealmObject is slower than using the regular RealmObject class . <nl> * / <nl> - public final class DynamicRealmObject extends RealmObject < DynamicRealmObject > { <nl> + public final class DynamicRealmObject extends RealmObject { <nl> <nl> / * * <nl> * Creates a dynamic Realm object based on an existing object . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> index 5283cb5 . . 24824b6 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ class RealmCache { <nl> * @ param realmClass class of { @ link Realm } or { @ link DynamicRealm } to be created in or gotten from the cache . <nl> * @ return the { @ link Realm } or { @ link DynamicRealm } instance . <nl> * / <nl> - static synchronized < E extends BaseRealm > E createRealmOrGetFromCache ( RealmConfiguration configuration , <nl> + static synchronized < E extends BaseRealm < E > > E createRealmOrGetFromCache ( RealmConfiguration configuration , <nl> Class < E > realmClass ) { <nl> boolean isCacheInMap = true ; <nl> RealmCache cache = cachesMap . get ( configuration . getPath ( ) ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 3978bfc . . 34960d0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ import rx . Observable ; <nl> * / <nl> <nl> @ RealmClass <nl> - public abstract class RealmObject < E extends RealmObject > { <nl> + public abstract class RealmObject { <nl> <nl> protected Row row ; <nl> protected BaseRealm realm ; <nl> @ @ - 255 , 7 + 255 , 10 @ @ public abstract class RealmObject < E extends RealmObject > { <nl> * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public Observable < E > observable ( ) { <nl> + public < E extends RealmObject > Observable < E > observable ( Class < E > type ) { <nl> + if ( ! this . getClass ( ) . isInstance ( type ) ) { <nl> + throw new IllegalArgumentException ( " This RealmObject cannot be cast to the desired type : " + type ) ; <nl> + } <nl> return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 89274ba . . fde3390 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1719 , 86 + 1719 , 16 @ @ public class RealmQuery < E extends RealmObject > { <nl> * @ return the object found or { @ code null } if no object matches the query conditions . <nl> * @ see io . realm . RealmObject <nl> * / <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public E findFirst ( ) { <nl> checkQueryIsNotReused ( ) ; <nl> long rowIndex = this . query . find ( ) ; <nl> if ( rowIndex > = 0 ) { <nl> - return ( E ) realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; <nl> + return realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; <nl> } else { <nl> return null ; <nl> } <nl> } <nl> <nl> - / / FIXME Replace with Schema when it is available <nl> - private static class DynamicColumnMap implements Map < String , Long > { <nl> - private final Table table ; <nl> - <nl> - public DynamicColumnMap ( Table table ) { <nl> - this . table = table ; <nl> - } <nl> - <nl> - @ Override <nl> - public Long get ( Object key ) { <nl> - return table . getColumnIndex ( ( String ) key ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void clear ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean containsKey ( Object key ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean containsValue ( Object value ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Set < Entry < String , Long > > entrySet ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isEmpty ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Set < String > keySet ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Long put ( String key , Long value ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void putAll ( Map < ? extends String , ? extends Long > map ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Long remove ( Object key ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int size ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Collection < Long > values ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Similar to { @ link # findFirst ( ) } but runs asynchronously on a worker thread <nl> * This method is only available from a Looper thread . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index db09759 . . 3629486 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 157 , 15 + 157 , 14 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> * @ throws IndexOutOfBoundsException if { @ code location < 0 | | location > = size ( ) } . <nl> * / <nl> @ Override <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public E get ( int location ) { <nl> E obj ; <nl> realm . checkIfValid ( ) ; <nl> TableOrView table = getTable ( ) ; <nl> if ( table instanceof TableView ) { <nl> - obj = ( E ) realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; <nl> + obj = realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; <nl> } else { <nl> - obj = ( E ) realm . get ( classSpec , className , location ) ; <nl> + obj = realm . get ( classSpec , className , location ) ; <nl> } <nl> <nl> return obj ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> index 718e705 . . 940f217 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ public final class RealmObservableFactory implements RxObservableFactory { <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> + public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> checkRxJavaAvailable ( ) ; <nl> return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> @ Override <nl> @ @ - 106 , 13 + 106 , 13 @ @ public final class RealmObservableFactory implements RxObservableFactory { <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> + public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> checkRxJavaAvailable ( ) ; <nl> throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject < E > > Observable < E > from ( final E object ) { <nl> + public < E extends RealmObject > Observable < E > from ( final E object ) { <nl> checkRxJavaAvailable ( ) ; <nl> return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> @ Override <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> index 0984f85 . . 14fd548 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ public interface RxObservableFactory { <nl> * @ param results RealmResults to listen to changes for . <nl> * @ param < E > Type of RealmObject <nl> * / <nl> - < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> + < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> <nl> / * * <nl> * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each <nl> @ @ - 41 , 7 + 41 , 7 @ @ public interface RxObservableFactory { <nl> * @ param list RealmObject to listen to changes for . <nl> * @ param < E > Type of RealmObject <nl> * / <nl> - < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> + < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> <nl> <nl> / * * <nl> @ @ - 53 , 5 + 53 , 5 @ @ public interface RxObservableFactory { <nl> * @ param object RealmObject to listen to changes for . <nl> * @ param < E > Type of RealmObject <nl> * / <nl> - < E extends RealmObject < E > > Observable < E > from ( E object ) ; <nl> + < E extends RealmObject > Observable < E > from ( E object ) ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 index 95715d9 . . 5f8f7a1 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 @ @ - 701 , 7 + 701 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 } ; 
 realm . setHandler ( handler ) ; 
 - Realm . asyncQueryExecutor . pause ( ) ; 
 + Realm . asyncTaskExecutor . pause ( ) ; 
 
 / / Create async queries and check they haven ' t completed 
 final RealmResults < AllTypes > realmResults1 = realm . where ( AllTypes . class ) 
 @ @ - 725 , 7 + 725 , 7 @ @ public class RealmAsyncQueryTests { 
 realm . commitTransaction ( ) ; 
 } 
 } . awaitOrFail ( ) ; 
 - Realm . asyncQueryExecutor . resume ( ) ; 
 + Realm . asyncTaskExecutor . resume ( ) ; 
 
 / / Setup change listeners 
 final Runnable signalCallbackDone = new Runnable ( ) { 
 @ @ - 1025 , 7 + 1025 , 7 @ @ public class RealmAsyncQueryTests { 
 } ; 
 realm . setHandler ( handler ) ; 
 
 - / / 3 . This will add a task to the paused asyncQueryExecutor 
 + / / 3 . This will add a task to the paused asyncTaskExecutor 
 final RealmResults < AllTypes > realmResults = realm . where ( AllTypes . class ) 
 . between ( " columnLong " , 4 , 8 ) 
 . findAllSortedAsync ( " columnString " , Sort . ASCENDING ) ; 
 @ @ - 1410 , 7 + 1410 , 7 @ @ public class RealmAsyncQueryTests { 
 public void combiningAsyncAndSync ( ) { 
 populateTestRealm ( looperThread . realm , 10 ) ; 
 
 - Realm . asyncQueryExecutor . pause ( ) ; 
 + Realm . asyncTaskExecutor . pause ( ) ; 
 final RealmResults < AllTypes > allTypesAsync = looperThread . realm . where ( AllTypes . class ) . greaterThan ( " columnLong " , 5 ) . findAllAsync ( ) ; 
 final RealmResults < AllTypes > allTypesSync = allTypesAsync . where ( ) . greaterThan ( " columnLong " , 3 ) . findAll ( ) ; 
 
 @ @ - 1424 , 7 + 1424 , 7 @ @ public class RealmAsyncQueryTests { 
 looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 - Realm . asyncQueryExecutor . resume ( ) ; 
 + Realm . asyncTaskExecutor . resume ( ) ; 
 looperThread . keepStrongReference . add ( allTypesAsync ) ; 
 } 
 
 @ @ - 1789 , 7 + 1789 , 7 @ @ public class RealmAsyncQueryTests { 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 
 populateTestRealm ( looperThread . realm , 10 ) ; 
 - Realm . asyncQueryExecutor . pause ( ) ; 
 + Realm . asyncTaskExecutor . pause ( ) ; 
 
 final AllTypes firstAsync = looperThread . realm . where ( AllTypes . class ) . findFirstAsync ( ) ; 
 firstAsync . addChangeListener ( new RealmChangeListener < AllTypes > ( ) { 
 @ @ - 1809 , 7 + 1809 , 7 @ @ public class RealmAsyncQueryTests { 
 / / Advancing the Realm without generating notifications 
 bgRealm . sharedGroupManager . promoteToWrite ( ) ; 
 bgRealm . sharedGroupManager . commitAndContinueAsRead ( ) ; 
 - Realm . asyncQueryExecutor . resume ( ) ; 
 + Realm . asyncTaskExecutor . resume ( ) ; 
 bgRealm . close ( ) ; 
 signalClosedRealm . countDown ( ) ; 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 index a4af1d2 . . 5255240 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTests . java 
 @ @ - 2359 , 7 + 2359 , 7 @ @ public class RealmQueryTests { 
 
 Realm asyncRealm = null ; 
 try { 
 - Realm . asyncQueryExecutor . pause ( ) ; 
 + Realm . asyncTaskExecutor . pause ( ) ; 
 asyncRealm = openRealmInstance ( " testDistinctAsyncQueryWithNull " ) ; 
 final long numberOfBlocks = 25 ; 
 final long numberOfObjects = 10 ; / / must be greater than 1 
 @ @ - 2376 , 7 + 2376 , 7 @ @ public class RealmQueryTests { 
 assertTrue ( distinctString . isValid ( ) ) ; 
 assertTrue ( distinctString . isEmpty ( ) ) ; 
 
 - Realm . asyncQueryExecutor . resume ( ) ; 
 + Realm . asyncTaskExecutor . resume ( ) ; 
 
 distinctDate . addChangeListener ( new RealmChangeListener < RealmResults < AnnotationIndexTypes > > ( ) { 
 @ Override 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 index 7961395 . . ce5f00c 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 @ @ - 951 , 7 + 951 , 7 @ @ public class TestHelper { 
 * @ param executor { @ link RealmThreadPoolExecutor } that should replace the current one 
 * / 
 public static RealmThreadPoolExecutor replaceRealmThreadExectutor ( RealmThreadPoolExecutor executor ) throws NoSuchFieldException , IllegalAccessException { 
 - Field field = BaseRealm . class . getDeclaredField ( " asyncQueryExecutor " ) ; 
 + Field field = BaseRealm . class . getDeclaredField ( " asyncTaskExecutor " ) ; 
 field . setAccessible ( true ) ; 
 RealmThreadPoolExecutor oldExecutor = ( RealmThreadPoolExecutor ) field . get ( null ) ; 
 field . set ( field , executor ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 5c832b8 . . 074bc81 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 58 , 7 + 58 , 7 @ @ abstract class BaseRealm implements Closeable { 
 protected static final Map < Handler , String > handlers = new ConcurrentHashMap < Handler , String > ( ) ; 
 
 / / Thread pool for all async operations ( Query & transaction ) 
 - static final RealmThreadPoolExecutor asyncQueryExecutor = RealmThreadPoolExecutor . newDefaultExecutor ( ) ; 
 + static final RealmThreadPoolExecutor asyncTaskExecutor = RealmThreadPoolExecutor . newDefaultExecutor ( ) ; 
 
 final long threadId ; 
 protected RealmConfiguration configuration ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / HandlerController . java b / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 index 424c207 . . fbce366 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 + + + b / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 @ @ - 235 , 7 + 235 , 7 @ @ final class HandlerController implements Handler . Callback { 
 while ( iterator . hasNext ( ) ) { 
 Map . Entry < WeakReference < RealmObjectProxy > , RealmQuery < ? > > next = iterator . next ( ) ; 
 if ( next . getKey ( ) . get ( ) ! = null ) { 
 - Realm . asyncQueryExecutor 
 + Realm . asyncTaskExecutor 
 . submit ( QueryUpdateTask . newBuilder ( ) 
 . realmConfiguration ( realm . getConfiguration ( ) ) 
 . addObject ( next . getKey ( ) , 
 @ @ - 326 , 7 + 326 , 7 @ @ final class HandlerController implements Handler . Callback { 
 if ( updateAsyncQueriesTask ! = null & & ! updateAsyncQueriesTask . isDone ( ) ) { 
 / / try to cancel any pending update since we ' re submitting a new one anyway 
 updateAsyncQueriesTask . cancel ( true ) ; 
 - Realm . asyncQueryExecutor . getQueue ( ) . remove ( updateAsyncQueriesTask ) ; 
 + Realm . asyncTaskExecutor . getQueue ( ) . remove ( updateAsyncQueriesTask ) ; 
 RealmLog . d ( " REALM _ CHANGED realm : " + HandlerController . this + " cancelling pending COMPLETED _ UPDATE _ ASYNC _ QUERIES updates " ) ; 
 } 
 RealmLog . d ( " REALM _ CHANGED realm : " + HandlerController . this + " updating async queries , total : " + asyncRealmResults . size ( ) ) ; 
 @ @ - 363 , 7 + 363 , 7 @ @ final class HandlerController implements Handler . Callback { 
 QueryUpdateTask queryUpdateTask = realmResultsQueryStep 
 . sendToHandler ( realm . handler , COMPLETED _ UPDATE _ ASYNC _ QUERIES ) 
 . build ( ) ; 
 - updateAsyncQueriesTask = Realm . asyncQueryExecutor . submit ( queryUpdateTask ) ; 
 + updateAsyncQueriesTask = Realm . asyncTaskExecutor . submit ( queryUpdateTask ) ; 
 } 
 } 
 
 @ @ - 428 , 7 + 428 , 7 @ @ final class HandlerController implements Handler . Callback { 
 . sendToHandler ( realm . handler , COMPLETED _ ASYNC _ REALM _ RESULTS ) 
 . build ( ) ; 
 
 - Realm . asyncQueryExecutor . submit ( queryUpdateTask ) ; 
 + Realm . asyncTaskExecutor . submit ( queryUpdateTask ) ; 
 
 } else { 
 / / UC covered by this test : RealmAsyncQueryTests # testFindAllCallerIsAdvanced 
 @ @ - 556 , 7 + 556 , 7 @ @ final class HandlerController implements Handler . Callback { 
 . sendToHandler ( realm . handler , COMPLETED _ ASYNC _ REALM _ OBJECT ) 
 . build ( ) ; 
 
 - Realm . asyncQueryExecutor . submit ( queryUpdateTask ) ; 
 + Realm . asyncTaskExecutor . submit ( queryUpdateTask ) ; 
 } 
 } else { 
 / / should not happen , since the the background thread position itself against the provided version 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index c43883b . . c8926b4 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 1128 , 7 + 1128 , 7 @ @ public final class Realm extends BaseRealm { 
 / / to perform the transaction 
 final RealmConfiguration realmConfiguration = getConfiguration ( ) ; 
 
 - final Future < ? > pendingQuery = asyncQueryExecutor . submit ( new Runnable ( ) { 
 + final Future < ? > pendingTransaction = asyncTaskExecutor . submit ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 if ( Thread . currentThread ( ) . isInterrupted ( ) ) { 
 @ @ - 1192 , 7 + 1192 , 7 @ @ public final class Realm extends BaseRealm { 
 } 
 } ) ; 
 
 - return new RealmAsyncTask ( pendingQuery ) ; 
 + return new RealmAsyncTask ( pendingTransaction ) ; 
 } 
 
 / * * 
 @ @ - 1269 , 7 + 1269 , 7 @ @ public final class Realm extends BaseRealm { 
 / / to perform the transaction 
 final RealmConfiguration realmConfiguration = getConfiguration ( ) ; 
 
 - final Future < ? > pendingQuery = asyncQueryExecutor . submit ( new Runnable ( ) { 
 + final Future < ? > pendingTransaction = asyncTaskExecutor . submit ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 if ( Thread . currentThread ( ) . isInterrupted ( ) ) { 
 @ @ - 1363 , 7 + 1363 , 7 @ @ public final class Realm extends BaseRealm { 
 } 
 } ) ; 
 
 - return new RealmAsyncTask ( pendingQuery ) ; 
 + return new RealmAsyncTask ( pendingTransaction ) ; 
 } 
 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmAsyncTask . java b / realm / realm - library / src / main / java / io / realm / RealmAsyncTask . java 
 index 3f6492f . . aa53c0c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmAsyncTask . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmAsyncTask . java 
 @ @ - 49 , 7 + 49 , 7 @ @ public final class RealmAsyncTask { 
 / / first thread is attempting to purge the queue the attempt to purge 
 / / the queue fails and the cancelled object remain in the queue . 
 / / A better way to cancel objects with thread pools is to use the remove ( ) 
 - Realm . asyncQueryExecutor . getQueue ( ) . remove ( pendingQuery ) ; 
 + Realm . asyncTaskExecutor . getQueue ( ) . remove ( pendingQuery ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index d70a648 . . a955dfd 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1162 , 7 + 1162 , 7 @ @ public final class RealmQuery < E extends RealmModel > { 
 
 final WeakReference < RealmResults < ? extends RealmModel > > weakRealmResults = realm . handlerController . addToAsyncRealmResults ( realmResults , this ) ; 
 
 - final Future < Long > pendingQuery = Realm . asyncQueryExecutor . submit ( new Callable < Long > ( ) { 
 + final Future < Long > pendingQuery = Realm . asyncTaskExecutor . submit ( new Callable < Long > ( ) { 
 @ Override 
 public Long call ( ) throws Exception { 
 if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { 
 @ @ - 1469 , 7 + 1469 , 7 @ @ public final class RealmQuery < E extends RealmModel > { 
 
 final WeakReference < RealmResults < ? extends RealmModel > > weakRealmResults = realm . handlerController . addToAsyncRealmResults ( realmResults , this ) ; 
 
 - final Future < Long > pendingQuery = Realm . asyncQueryExecutor . submit ( new Callable < Long > ( ) { 
 + final Future < Long > pendingQuery = Realm . asyncTaskExecutor . submit ( new Callable < Long > ( ) { 
 @ Override 
 public Long call ( ) throws Exception { 
 if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { 
 @ @ - 1587 , 7 + 1587 , 7 @ @ public final class RealmQuery < E extends RealmModel > { 
 final WeakReference < RealmResults < ? extends RealmModel > > weakRealmResults = 
 realm . handlerController . addToAsyncRealmResults ( realmResults , this ) ; 
 
 - final Future < Long > pendingQuery = Realm . asyncQueryExecutor . submit ( new Callable < Long > ( ) { 
 + final Future < Long > pendingQuery = Realm . asyncTaskExecutor . submit ( new Callable < Long > ( ) { 
 @ Override 
 public Long call ( ) throws Exception { 
 if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { 
 @ @ - 1760 , 7 + 1760 , 7 @ @ public final class RealmQuery < E extends RealmModel > { 
 
 final WeakReference < RealmResults < ? extends RealmModel > > weakRealmResults = realm . handlerController . addToAsyncRealmResults ( realmResults , this ) ; 
 
 - final Future < Long > pendingQuery = Realm . asyncQueryExecutor . submit ( new Callable < Long > ( ) { 
 + final Future < Long > pendingQuery = Realm . asyncTaskExecutor . submit ( new Callable < Long > ( ) { 
 @ Override 
 public Long call ( ) throws Exception { 
 if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { 
 @ @ - 1920 , 7 + 1920 , 7 @ @ public final class RealmQuery < E extends RealmModel > { 
 proxy . realmGet $ proxyState ( ) . setRealm $ realm ( realm ) ; 
 proxy . realmGet $ proxyState ( ) . setRow $ realm ( Row . EMPTY _ ROW ) ; 
 
 - final Future < Long > pendingQuery = Realm . asyncQueryExecutor . submit ( new Callable < Long > ( ) { 
 + final Future < Long > pendingQuery = Realm . asyncTaskExecutor . submit ( new Callable < Long > ( ) { 
 @ Override 
 public Long call ( ) throws Exception { 
 if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) {

NEAREST DIFF:
diff - - git a / examples / rxJavaExample / README . md b / examples / rxJavaExample / README . md 
 index 3f33bfa . . ea203c2 100644 
 - - - a / examples / rxJavaExample / README . md 
 + + + b / examples / rxJavaExample / README . md 
 @ @ - 5 , 13 + 5 , 17 @ @ 
 - Observables might have a default Scheduler they operate on that is 
 different than the one the RealmObject was created on . 
 
 - - RealmObjects auto - update . Observables that operate on multiple " versions " 
 + - RealmObjects are live objects that automatically staty up to date . Observables that operate on multiple " versions " 
 will most likely not work as expected . 
 
 - Retrofit automatically offload to a worker thread . 
 
 - Use Realm async API instead of subscribeOn to offload Realm work . 
 
 + - You can use Realm . copyFromRealm to make a copy of Realm data 
 + 
 + 
 + 
 
 # # Resources ( TODO ) 
 - http : / / www . grahamlea . com / 2014 / 07 / rxjava - threading - examples / 
 \ No newline at end of file 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 index 12a0c4a . . ff099ad 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 @ @ - 31 , 7 + 31 , 7 @ @ public class RxJavaTests extends AndroidTestCase { 
 realm . commitTransaction ( ) ; 
 
 final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { 
 @ Override 
 public void call ( AllTypes rxObject ) { 
 assertTrue ( rxObject = = obj ) ; 
 @ @ - 74 , 7 + 74 , 7 @ @ public class RxJavaTests extends AndroidTestCase { 
 final AllTypes obj = realm . createObject ( AllTypes . class ) ; 
 realm . commitTransaction ( ) ; 
 
 - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { 
 @ Override 
 public void call ( AllTypes rxObject ) { 
 subscriberCalled . addAndGet ( 1 ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index a3e5103 . . 4e420ec 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 25 , 15 + 25 , 12 @ @ import java . lang . ref . ReferenceQueue ; 
 import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 - import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 - import java . util . Set ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 - import java . util . concurrent . CopyOnWriteArraySet ; 
 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 import io . realm . internal . SharedGroupManager ; 
 @ @ - 44 , 7 + 41 , 6 @ @ import io . realm . internal . android . DebugAndroidLogger ; 
 import io . realm . internal . android . ReleaseAndroidLogger ; 
 import io . realm . internal . async . RealmThreadPoolExecutor ; 
 import io . realm . internal . log . RealmLog ; 
 - import io . realm . rx . RxObservableFactory ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 53 , 7 + 49 , 7 @ @ import rx . Observable ; 
 * @ see io . realm . Realm 
 * @ see io . realm . DynamicRealm 
 * / 
 - public abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 + public abstract class BaseRealm < T extends BaseRealm < T > > implements Closeable { 
 protected static final long UNVERSIONED = - 1 ; 
 private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; 
 private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; 
 @ @ - 203 , 8 + 199 , 8 @ @ public abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 @ SuppressWarnings ( " unchecked " ) 
 - public Observable < E > observable ( ) { 
 - return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; 
 + public Observable < T > observable ( ) { 
 + return ( Observable < T > ) configuration . getRxFactory ( ) . from ( this ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 index f979667 . . 627ac4a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 @ @ - 42 , 7 + 42 , 7 @ @ import io . realm . internal . TableView ; 
 * @ see Realm 
 * @ see RealmSchema 
 * / 
 - public final class DynamicRealm extends BaseRealm { 
 + public final class DynamicRealm extends BaseRealm < DynamicRealm > { 
 
 private DynamicRealm ( RealmConfiguration configuration , boolean autoRefresh ) { 
 super ( configuration , autoRefresh ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 index 40ad05a . . 318e9e9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 @ @ - 29 , 7 + 29 , 7 @ @ import io . realm . internal . android . JsonUtils ; 
 * Class that wraps a normal RealmObject in order to allow dynamic access instead of a typed interface . 
 * Using a DynamicRealmObject is slower than using the regular RealmObject class . 
 * / 
 - public final class DynamicRealmObject extends RealmObject < DynamicRealmObject > { 
 + public final class DynamicRealmObject extends RealmObject { 
 
 / * * 
 * Creates a dynamic Realm object based on an existing object . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 index 5283cb5 . . 24824b6 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 @ @ - 89 , 7 + 89 , 7 @ @ class RealmCache { 
 * @ param realmClass class of { @ link Realm } or { @ link DynamicRealm } to be created in or gotten from the cache . 
 * @ return the { @ link Realm } or { @ link DynamicRealm } instance . 
 * / 
 - static synchronized < E extends BaseRealm > E createRealmOrGetFromCache ( RealmConfiguration configuration , 
 + static synchronized < E extends BaseRealm < E > > E createRealmOrGetFromCache ( RealmConfiguration configuration , 
 Class < E > realmClass ) { 
 boolean isCacheInMap = true ; 
 RealmCache cache = cachesMap . get ( configuration . getPath ( ) ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 3978bfc . . 34960d0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 79 , 7 + 79 , 7 @ @ import rx . Observable ; 
 * / 
 
 @ RealmClass 
 - public abstract class RealmObject < E extends RealmObject > { 
 + public abstract class RealmObject { 
 
 protected Row row ; 
 protected BaseRealm realm ; 
 @ @ - 255 , 7 + 255 , 10 @ @ public abstract class RealmObject < E extends RealmObject > { 
 * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 @ SuppressWarnings ( " unchecked " ) 
 - public Observable < E > observable ( ) { 
 + public < E extends RealmObject > Observable < E > observable ( Class < E > type ) { 
 + if ( ! this . getClass ( ) . isInstance ( type ) ) { 
 + throw new IllegalArgumentException ( " This RealmObject cannot be cast to the desired type : " + type ) ; 
 + } 
 return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 89274ba . . fde3390 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1719 , 86 + 1719 , 16 @ @ public class RealmQuery < E extends RealmObject > { 
 * @ return the object found or { @ code null } if no object matches the query conditions . 
 * @ see io . realm . RealmObject 
 * / 
 - @ SuppressWarnings ( " unchecked " ) 
 public E findFirst ( ) { 
 checkQueryIsNotReused ( ) ; 
 long rowIndex = this . query . find ( ) ; 
 if ( rowIndex > = 0 ) { 
 - return ( E ) realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; 
 + return realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; 
 } else { 
 return null ; 
 } 
 } 
 
 - / / FIXME Replace with Schema when it is available 
 - private static class DynamicColumnMap implements Map < String , Long > { 
 - private final Table table ; 
 - 
 - public DynamicColumnMap ( Table table ) { 
 - this . table = table ; 
 - } 
 - 
 - @ Override 
 - public Long get ( Object key ) { 
 - return table . getColumnIndex ( ( String ) key ) ; 
 - } 
 - 
 - @ Override 
 - public void clear ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean containsKey ( Object key ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean containsValue ( Object value ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Set < Entry < String , Long > > entrySet ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean isEmpty ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Set < String > keySet ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Long put ( String key , Long value ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public void putAll ( Map < ? extends String , ? extends Long > map ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Long remove ( Object key ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public int size ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Collection < Long > values ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - } 
 - 
 / * * 
 * Similar to { @ link # findFirst ( ) } but runs asynchronously on a worker thread 
 * This method is only available from a Looper thread . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index db09759 . . 3629486 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 157 , 15 + 157 , 14 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 * @ throws IndexOutOfBoundsException if { @ code location < 0 | | location > = size ( ) } . 
 * / 
 @ Override 
 - @ SuppressWarnings ( " unchecked " ) 
 public E get ( int location ) { 
 E obj ; 
 realm . checkIfValid ( ) ; 
 TableOrView table = getTable ( ) ; 
 if ( table instanceof TableView ) { 
 - obj = ( E ) realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; 
 + obj = realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; 
 } else { 
 - obj = ( E ) realm . get ( classSpec , className , location ) ; 
 + obj = realm . get ( classSpec , className , location ) ; 
 } 
 
 return obj ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 index 718e705 . . 940f217 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 @ @ - 79 , 7 + 79 , 7 @ @ public final class RealmObservableFactory implements RxObservableFactory { 
 } 
 
 @ Override 
 - public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 + public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 checkRxJavaAvailable ( ) ; 
 return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 @ Override 
 @ @ - 106 , 13 + 106 , 13 @ @ public final class RealmObservableFactory implements RxObservableFactory { 
 } 
 
 @ Override 
 - public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 + public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 checkRxJavaAvailable ( ) ; 
 throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 } 
 
 @ Override 
 - public < E extends RealmObject < E > > Observable < E > from ( final E object ) { 
 + public < E extends RealmObject > Observable < E > from ( final E object ) { 
 checkRxJavaAvailable ( ) ; 
 return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 @ Override 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 index 0984f85 . . 14fd548 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 @ @ - 30 , 7 + 30 , 7 @ @ public interface RxObservableFactory { 
 * @ param results RealmResults to listen to changes for . 
 * @ param < E > Type of RealmObject 
 * / 
 - < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 + < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 
 / * * 
 * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each 
 @ @ - 41 , 7 + 41 , 7 @ @ public interface RxObservableFactory { 
 * @ param list RealmObject to listen to changes for . 
 * @ param < E > Type of RealmObject 
 * / 
 - < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 + < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 
 
 / * * 
 @ @ - 53 , 5 + 53 , 5 @ @ public interface RxObservableFactory { 
 * @ param object RealmObject to listen to changes for . 
 * @ param < E > Type of RealmObject 
 * / 
 - < E extends RealmObject < E > > Observable < E > from ( E object ) ; 
 + < E extends RealmObject > Observable < E > from ( E object ) ; 
 }
