BLEU SCORE: 0.021566939693939927

TEST MSG: Convert IOSRealmTests and JNITransaction tests
GENERATED MSG: Added tests for reading iOS realms . Added option for custom schemas .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / IOSRealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / IOSRealmTests . java <nl> index 753afd8 . . 48b9347 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / IOSRealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / IOSRealmTests . java <nl> @ @ - 16 , 7 + 16 , 15 @ @ <nl> <nl> package io . realm ; <nl> <nl> - import android . test . AndroidTestCase ; <nl> + import android . content . Context ; <nl> + import android . support . test . InstrumentationRegistry ; <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> + <nl> + import org . junit . After ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> <nl> import java . io . IOException ; <nl> import java . util . Date ; <nl> @ @ - 24 , 31 + 32 , 42 @ @ import java . util . Date ; <nl> import io . realm . entities . IOSAllTypes ; <nl> import io . realm . entities . IOSChild ; <nl> import io . realm . internal . Table ; <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNull ; <nl> + <nl> <nl> import static io . realm . internal . test . ExtraTests . assertArrayEquals ; <nl> <nl> / * * <nl> * This class test interoperability with Realms created on iOS . <nl> * / <nl> - public class IOSRealmTests extends AndroidTestCase { <nl> + @ RunWith ( AndroidJUnit4 . class ) <nl> + public class IOSRealmTests { <nl> + <nl> + @ Rule <nl> + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> <nl> private static final String [ ] IOS _ VERSIONS = new String [ ] { " 0 . 96 . 2 " } ; <nl> private static final String REALM _ NAME = " alltypes . realm " ; <nl> private Realm realm ; <nl> + private Context context ; <nl> <nl> - @ Override <nl> - protected void setUp ( ) throws Exception { <nl> - super . setUp ( ) ; <nl> - RealmConfiguration defaultConfiguration = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + @ Before <nl> + public void setUp ( ) { <nl> + RealmConfiguration defaultConfiguration = configFactory . createConfigurationBuilder ( ) <nl> . name ( REALM _ NAME ) <nl> . schema ( IOSAllTypes . class , IOSChild . class ) <nl> . build ( ) ; <nl> Realm . setDefaultConfiguration ( defaultConfiguration ) ; <nl> + context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> } <nl> <nl> - @ Override <nl> - protected void tearDown ( ) throws Exception { <nl> - super . tearDown ( ) ; <nl> + @ After <nl> + public void tearDown ( ) { <nl> Realm . removeDefaultConfiguration ( ) ; <nl> if ( realm ! = null ) { <nl> realm . close ( ) ; <nl> @ @ - 56 , 9 + 75 , 11 @ @ public class IOSRealmTests extends AndroidTestCase { <nl> } <nl> <nl> / / Test relationships and that data in general can be retrieved from an iOS realm <nl> - public void testIOSDatatypes ( ) throws IOException { <nl> + @ Test <nl> + public void iOSDataTypes ( ) throws IOException { <nl> for ( String iosVersion : IOS _ VERSIONS ) { <nl> - TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / " + iosVersion + " - alltypes . realm " , REALM _ NAME ) ; <nl> + configFactory . copyRealmFromAssets ( context , <nl> + " ios / " + iosVersion + " - alltypes . realm " , REALM _ NAME ) ; <nl> realm = Realm . getDefaultInstance ( ) ; <nl> RealmResults < IOSAllTypes > result = realm . allObjectsSorted ( IOSAllTypes . class , " id " , Sort . ASCENDING ) ; <nl> <nl> @ @ - 72 , 8 + 93 , 8 @ @ public class IOSRealmTests extends AndroidTestCase { <nl> assertEquals ( 2 , obj . getShortCol ( ) ) ; <nl> assertEquals ( 11 , obj . getIntCol ( ) ) ; <nl> assertEquals ( 101L , obj . getLongCol ( ) ) ; <nl> - assertEquals ( 2 . 23F , obj . getFloatCol ( ) ) ; <nl> - assertEquals ( 2 . 234D , obj . getDoubleCol ( ) ) ; <nl> + assertEquals ( 2 . 23F , obj . getFloatCol ( ) , 0F ) ; <nl> + assertEquals ( 2 . 234D , obj . getDoubleCol ( ) , 0D ) ; <nl> assertArrayEquals ( new byte [ ] { 1 , 2 , 3 } , obj . getByteCol ( ) ) ; <nl> assertEquals ( " String 1 " , obj . getStringCol ( ) ) ; <nl> assertEquals ( new Date ( 1001 * 1000 ) , obj . getDateCol ( ) ) ; <nl> @ @ - 84 , 9 + 105 , 11 @ @ public class IOSRealmTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testIOSDatatypesDefaultValues ( ) throws IOException { <nl> + @ Test <nl> + public void sOSDataTypesDefaultValues ( ) throws IOException { <nl> for ( String iosVersion : IOS _ VERSIONS ) { <nl> - TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / " + iosVersion + " - alltypes - default . realm " , REALM _ NAME ) ; <nl> + configFactory . copyRealmFromAssets ( context , <nl> + " ios / " + iosVersion + " - alltypes - default . realm " , REALM _ NAME ) ; <nl> realm = Realm . getDefaultInstance ( ) ; <nl> <nl> IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; <nl> @ @ - 94 , 8 + 117 , 8 @ @ public class IOSRealmTests extends AndroidTestCase { <nl> assertEquals ( 0 , obj . getShortCol ( ) ) ; <nl> assertEquals ( 0 , obj . getIntCol ( ) ) ; <nl> assertEquals ( 0L , obj . getLongCol ( ) ) ; <nl> - assertEquals ( 0 . 0F , obj . getFloatCol ( ) ) ; <nl> - assertEquals ( 0 . 0D , obj . getDoubleCol ( ) ) ; <nl> + assertEquals ( 0 . 0F , obj . getFloatCol ( ) , 0F ) ; <nl> + assertEquals ( 0 . 0D , obj . getDoubleCol ( ) , 0D ) ; <nl> assertArrayEquals ( new byte [ 0 ] , obj . getByteCol ( ) ) ; <nl> assertEquals ( " " , obj . getStringCol ( ) ) ; <nl> assertEquals ( new Date ( 0 ) , obj . getDateCol ( ) ) ; <nl> @ @ - 104 , 38 + 127 , 44 @ @ public class IOSRealmTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testIOSDatatypesMinimumValues ( ) throws IOException { <nl> + @ Test <nl> + public void iOSDataTypesMinimumValues ( ) throws IOException { <nl> for ( String iosVersion : IOS _ VERSIONS ) { <nl> - TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / " + iosVersion + " - alltypes - min . realm " , REALM _ NAME ) ; <nl> + configFactory . copyRealmFromAssets ( context , <nl> + " ios / " + iosVersion + " - alltypes - min . realm " , REALM _ NAME ) ; <nl> realm = Realm . getDefaultInstance ( ) ; <nl> <nl> IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; <nl> assertEquals ( Short . MIN _ VALUE , obj . getShortCol ( ) ) ; <nl> assertEquals ( Integer . MIN _ VALUE , obj . getIntCol ( ) ) ; <nl> assertEquals ( Long . MIN _ VALUE , obj . getLongCol ( ) ) ; <nl> - assertEquals ( Float . MIN _ NORMAL , obj . getFloatCol ( ) ) ; <nl> - assertEquals ( Double . MIN _ NORMAL , obj . getDoubleCol ( ) ) ; <nl> + assertEquals ( Float . MIN _ NORMAL , obj . getFloatCol ( ) , 0F ) ; <nl> + assertEquals ( Double . MIN _ NORMAL , obj . getDoubleCol ( ) , 0D ) ; <nl> } <nl> } <nl> <nl> - public void testIOSDatatypesMaximumValues ( ) throws IOException { <nl> + @ Test <nl> + public void iOSDataTypesMaximumValues ( ) throws IOException { <nl> for ( String iosVersion : IOS _ VERSIONS ) { <nl> - TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / " + iosVersion + " - alltypes - max . realm " , REALM _ NAME ) ; <nl> + configFactory . copyRealmFromAssets ( context , <nl> + " ios / " + iosVersion + " - alltypes - max . realm " , REALM _ NAME ) ; <nl> realm = Realm . getDefaultInstance ( ) ; <nl> <nl> IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; <nl> assertEquals ( Short . MAX _ VALUE , obj . getShortCol ( ) ) ; <nl> assertEquals ( Integer . MAX _ VALUE , obj . getIntCol ( ) ) ; <nl> assertEquals ( Long . MAX _ VALUE , obj . getLongCol ( ) ) ; <nl> - assertEquals ( Float . MAX _ VALUE , obj . getFloatCol ( ) ) ; <nl> - assertEquals ( Double . MAX _ VALUE , obj . getDoubleCol ( ) ) ; <nl> + assertEquals ( Float . MAX _ VALUE , obj . getFloatCol ( ) , 0F ) ; <nl> + assertEquals ( Double . MAX _ VALUE , obj . getDoubleCol ( ) , 0D ) ; <nl> } <nl> } <nl> <nl> - public void testIOSEncryptedRealm ( ) throws IOException { <nl> + @ Test <nl> + public void iOSEncryptedRealm ( ) throws IOException { <nl> for ( String iosVersion : IOS _ VERSIONS ) { <nl> - TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / " + iosVersion + " - alltypes - default - encrypted . realm " , REALM _ NAME ) ; <nl> - RealmConfiguration realmConfig = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + configFactory . copyRealmFromAssets ( context , <nl> + " ios / " + iosVersion + " - alltypes - default - encrypted . realm " , REALM _ NAME ) ; <nl> + RealmConfiguration realmConfig = configFactory . createConfigurationBuilder ( ) <nl> . name ( REALM _ NAME ) <nl> . encryptionKey ( getIOSKey ( ) ) <nl> . schema ( IOSAllTypes . class , IOSChild . class ) <nl> @ @ - 147 , 8 + 176 , 8 @ @ public class IOSRealmTests extends AndroidTestCase { <nl> assertEquals ( 0 , obj . getShortCol ( ) ) ; <nl> assertEquals ( 0 , obj . getIntCol ( ) ) ; <nl> assertEquals ( 0L , obj . getLongCol ( ) ) ; <nl> - assertEquals ( 0 . 0F , obj . getFloatCol ( ) ) ; <nl> - assertEquals ( 0 . 0D , obj . getDoubleCol ( ) ) ; <nl> + assertEquals ( 0 . 0F , obj . getFloatCol ( ) , 0F ) ; <nl> + assertEquals ( 0 . 0D , obj . getDoubleCol ( ) , 0D ) ; <nl> assertArrayEquals ( new byte [ 0 ] , obj . getByteCol ( ) ) ; <nl> assertEquals ( " " , obj . getStringCol ( ) ) ; <nl> assertEquals ( new Date ( 0 ) , obj . getDateCol ( ) ) ; <nl> @ @ - 157 , 7 + 186 , 7 @ @ public class IOSRealmTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public byte [ ] getIOSKey ( ) { <nl> + private byte [ ] getIOSKey ( ) { <nl> byte [ ] keyData = new byte [ 64 ] ; <nl> for ( int i = 0 ; i < keyData . length ; i + + ) { <nl> keyData [ i ] = 1 ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> index 53d40c2 . . 056f4c6 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> @ @ - 128 , 21 + 128 , 6 @ @ public class TestHelper { <nl> return new ByteArrayInputStream ( str . getBytes ( Charset . forName ( " UTF - 8 " ) ) ) ; <nl> } <nl> <nl> - / / Copies a Realm file from assets to app files dir <nl> - public static void copyRealmFromAssets ( Context context , String realmPath , String newName ) throws IOException { <nl> - AssetManager assetManager = context . getAssets ( ) ; <nl> - InputStream is = assetManager . open ( realmPath ) ; <nl> - File file = new File ( context . getFilesDir ( ) , newName ) ; <nl> - FileOutputStream outputStream = new FileOutputStream ( file ) ; <nl> - byte [ ] buf = new byte [ 1024 ] ; <nl> - int bytesRead ; <nl> - while ( ( bytesRead = is . read ( buf ) ) > - 1 ) { <nl> - outputStream . write ( buf , 0 , bytesRead ) ; <nl> - } <nl> - outputStream . close ( ) ; <nl> - is . close ( ) ; <nl> - } <nl> - <nl> / / Creates a simple migration step in order to support null <nl> / / FIXME : generate a new encrypted . realm will null support <nl> public static RealmMigration prepareMigrationToNullSupportStep ( ) { <nl> @ @ - 156 , 13 + 141 , 6 @ @ public class TestHelper { <nl> return realmMigration ; <nl> } <nl> <nl> - <nl> - / / Deletes the old database and copies a new one into its place <nl> - public static void prepareDatabaseFromAssets ( Context context , String realmPath , String newName ) throws IOException { <nl> - Realm . deleteRealm ( createConfiguration ( context , newName ) ) ; <nl> - TestHelper . copyRealmFromAssets ( context , realmPath , newName ) ; <nl> - } <nl> - <nl> / / Returns a random key used by encrypted Realms . <nl> public static byte [ ] getRandomKey ( ) { <nl> byte [ ] key = new byte [ 64 ] ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITransactions . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITransactions . java <nl> index 4652101 . . b4cff1b 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITransactions . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITransactions . java <nl> @ @ - 16 , 46 + 16 , 47 @ @ <nl> <nl> package io . realm . internal ; <nl> <nl> + import android . support . test . InstrumentationRegistry ; <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> <nl> - import android . test . AndroidTestCase ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Date ; <nl> import java . util . List ; <nl> <nl> import io . realm . Realm ; <nl> - import io . realm . TestHelper ; <nl> import io . realm . RealmFieldType ; <nl> import io . realm . exceptions . RealmException ; <nl> import io . realm . exceptions . RealmPrimaryKeyConstraintException ; <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> <nl> - public class JNITransactions extends AndroidTestCase { <nl> - <nl> - String testFile ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> - @ Override <nl> - protected void setUp ( ) throws Exception { <nl> - createDBFileName ( ) ; <nl> - } <nl> + @ RunWith ( AndroidJUnit4 . class ) <nl> + public class JNITransactions { <nl> <nl> - @ Override <nl> - public void tearDown ( ) throws IOException { <nl> - deleteFile ( testFile ) ; <nl> - } <nl> + @ Rule <nl> + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> <nl> - protected void deleteFile ( String filename ) throws IOException { <nl> - for ( String filePath : Arrays . asList ( filename , filename + " . lock " ) ) { <nl> - File f = new File ( filePath ) ; <nl> - if ( f . exists ( ) ) { <nl> - boolean result = f . delete ( ) ; <nl> - if ( ! result ) { <nl> - throw new java . io . IOException ( " Could not delete " + filePath ) ; <nl> - } <nl> - } <nl> - } <nl> + private String testFile ; <nl> + private android . content . Context context ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws Exception { <nl> + testFile = new File ( <nl> + configFactory . getRoot ( ) , <nl> + System . currentTimeMillis ( ) + " _ transact . realm " ) . getAbsolutePath ( ) ; <nl> + context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> + RealmCore . loadLibrary ( context ) ; <nl> } <nl> <nl> private Table getTableWithStringPrimaryKey ( ) { <nl> @ @ - 76 , 12 + 77 , 6 @ @ public class JNITransactions extends AndroidTestCase { <nl> return t ; <nl> } <nl> <nl> - private void createDBFileName ( ) { <nl> - testFile = new File ( <nl> - this . getContext ( ) . getFilesDir ( ) , <nl> - System . currentTimeMillis ( ) + " _ transact . realm " ) . toString ( ) ; <nl> - } <nl> - <nl> protected void writeOneTransaction ( SharedGroup db , long rows ) { <nl> WriteTransaction trans = db . beginWrite ( ) ; <nl> Table tbl = trans . getTable ( " EmployeeTable " ) ; <nl> @ @ - 115 , 20 + 110 , 22 @ @ public class JNITransactions extends AndroidTestCase { <nl> <nl> / / TODO : tests should be done both for all Durability options <nl> <nl> - public void testMustWriteAndReadEmpty ( ) { <nl> + @ Test <nl> + public void mustWriteAndReadEmpty ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> writeOneTransaction ( db , 0 ) ; <nl> checkRead ( db , 0 ) ; <nl> } <nl> <nl> - public void testMustWriteCommit ( ) { <nl> + @ Test <nl> + public void mustWriteCommit ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> writeOneTransaction ( db , 10 ) ; <nl> checkRead ( db , 10 ) ; <nl> } <nl> <nl> - <nl> - public void testShouldThrowExceptionAfterClosedReadTransaction ( ) { <nl> + @ Test <nl> + public void shouldThrowExceptionAfterClosedReadTransaction ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> writeOneTransaction ( db , 10 ) ; <nl> ReadTransaction rt = db . beginRead ( ) ; <nl> @ @ - 139 , 17 + 136 , 15 @ @ public class JNITransactions extends AndroidTestCase { <nl> try { <nl> tbl . getColumnCount ( ) ; / / Should throw exception , the table is invalid when transaction has been closed <nl> fail ( ) ; <nl> - } catch ( IllegalStateException e ) { <nl> - assert ( false ) ; <nl> - / / assertNotNull ( e ) ; <nl> + } catch ( IllegalStateException ignored ) { <nl> } <nl> } finally { <nl> rt . endRead ( ) ; <nl> } <nl> } <nl> <nl> - <nl> - public void testShouldThrowExceptionAfterClosedReadTransactionWhenWriting ( ) { <nl> + @ Test <nl> + public void shouldThrowExceptionAfterClosedReadTransactionWhenWriting ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> writeOneTransaction ( db , 10 ) ; <nl> ReadTransaction rt = db . beginRead ( ) ; <nl> @ @ - 168 , 8 + 163 , 8 @ @ public class JNITransactions extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - <nl> - public void testShouldThrowExceptionWhenWritingInReadTrans ( ) { <nl> + @ Test <nl> + public void shouldThrowExceptionWhenWritingInReadTrans ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> ReadTransaction rt = db . beginRead ( ) ; <nl> <nl> @ @ - 185 , 8 + 180 , 8 @ @ public class JNITransactions extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - <nl> - public void testOnlyOneCommit ( ) { <nl> + @ Test <nl> + public void onlyOneCommit ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> WriteTransaction trans = db . beginWrite ( ) ; <nl> <nl> @ @ - 206 , 7 + 201 , 8 @ @ public class JNITransactions extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testMustRollback ( ) { <nl> + @ Test <nl> + public void mustRollback ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> writeOneTransaction ( db , 1 ) ; <nl> WriteTransaction trans = db . beginWrite ( ) ; <nl> @ @ - 219 , 7 + 215 , 8 @ @ public class JNITransactions extends AndroidTestCase { <nl> checkRead ( db , 1 ) ; / / Only 1 row now . <nl> } <nl> <nl> - public void testMustAllowDoubleCommitAndRollback ( ) { <nl> + @ Test <nl> + public void mustAllowDoubleCommitAndRollback ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> { <nl> WriteTransaction trans = db . beginWrite ( ) ; <nl> @ @ - 256 , 7 + 253 , 8 @ @ public class JNITransactions extends AndroidTestCase { <nl> / / Test : above in custom Typed Tables <nl> / / TableQuery . . . . in ReadTransactions <nl> <nl> - public void testMustFailOnWriteInReadTransactions ( ) { <nl> + @ Test <nl> + public void mustFailOnWriteInReadTransactions ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> <nl> writeOneTransaction ( db , 1 ) ; <nl> @ @ - 300 , 7 + 298 , 8 @ @ public class JNITransactions extends AndroidTestCase { <nl> } <nl> <nl> / / Test that primary key constraints are actually removed <nl> - public void testRemovingPrimaryKeyRemovesConstraint ( ) { <nl> + @ Test <nl> + public void removingPrimaryKeyRemovesConstraint ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> <nl> WriteTransaction trans = db . beginWrite ( ) ; <nl> @ @ - 327 , 7 + 326 , 8 @ @ public class JNITransactions extends AndroidTestCase { <nl> } <nl> <nl> / / Test that primary key constraints are actually removed <nl> - public void testRemovingPrimaryKeyRemovesConstraint _ typeSetters ( ) { <nl> + @ Test <nl> + public void removingPrimaryKeyRemovesConstraint _ typeSetters ( ) { <nl> SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; <nl> <nl> WriteTransaction trans = db . beginWrite ( ) ; <nl> @ @ - 354 , 50 + 354 , 57 @ @ public class JNITransactions extends AndroidTestCase { <nl> fail ( " Primary key not enforced . " ) ; <nl> } <nl> <nl> - public void testAddEmptyRowWithPrimaryKeyWrongTypeStringThrows ( ) { <nl> + @ Test <nl> + public void addEmptyRowWithPrimaryKeyWrongTypeStringThrows ( ) { <nl> Table t = getTableWithStringPrimaryKey ( ) ; <nl> try { <nl> t . addEmptyRowWithPrimaryKey ( 42 ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalArgumentException expected ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> <nl> - public void testAddEmptyRowWithPrimaryKeyNullStringThrows ( ) { <nl> + @ Test <nl> + public void addEmptyRowWithPrimaryKeyNullStringThrows ( ) { <nl> Table t = getTableWithStringPrimaryKey ( ) ; <nl> try { <nl> t . addEmptyRowWithPrimaryKey ( null ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalArgumentException expected ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> <nl> - public void testAddEmptyRowWithPrimaryKeyWrongTypeIntegerThrows ( ) { <nl> + @ Test <nl> + public void addEmptyRowWithPrimaryKeyWrongTypeIntegerThrows ( ) { <nl> Table t = getTableWithIntegerPrimaryKey ( ) ; <nl> try { <nl> t . addEmptyRowWithPrimaryKey ( " Foo " ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalArgumentException expected ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> <nl> - public void testAddEmptyRowWithPrimaryKeyString ( ) { <nl> + @ Test <nl> + public void addEmptyRowWithPrimaryKeyString ( ) { <nl> Table t = getTableWithStringPrimaryKey ( ) ; <nl> long rowIndex = t . addEmptyRowWithPrimaryKey ( " Foo " ) ; <nl> assertEquals ( 1 , t . size ( ) ) ; <nl> assertEquals ( " Foo " , t . getUncheckedRow ( rowIndex ) . getString ( 0 ) ) ; <nl> } <nl> <nl> - public void testAddEmptyRowWithPrimaryKeyLong ( ) { <nl> + @ Test <nl> + public void addEmptyRowWithPrimaryKeyLong ( ) { <nl> Table t = getTableWithIntegerPrimaryKey ( ) ; <nl> long rowIndex = t . addEmptyRowWithPrimaryKey ( 42 ) ; <nl> assertEquals ( 1 , t . size ( ) ) ; <nl> assertEquals ( 42 , t . getUncheckedRow ( rowIndex ) . getLong ( 0 ) ) ; <nl> } <nl> <nl> - public void testFirstPrimaryKeyTableMigration ( ) throws IOException { <nl> - TestHelper . copyRealmFromAssets ( getContext ( ) , " 080 _ annotationtypes . realm " , " default . realm " ) ; <nl> - SharedGroup db = new SharedGroup ( new File ( getContext ( ) . getFilesDir ( ) , Realm . DEFAULT _ REALM _ NAME ) . getAbsolutePath ( ) , SharedGroup . Durability . FULL , null ) ; <nl> + @ Test <nl> + public void firstPrimaryKeyTableMigration ( ) throws IOException { <nl> + configFactory . copyRealmFromAssets ( context , " 080 _ annotationtypes . realm " , " default . realm " ) ; <nl> + SharedGroup db = new SharedGroup ( new File ( configFactory . getRoot ( ) , <nl> + Realm . DEFAULT _ REALM _ NAME ) . getAbsolutePath ( ) , SharedGroup . Durability . FULL , null ) ; <nl> ImplicitTransaction tr = db . beginImplicitTransaction ( ) ; <nl> Table t = tr . getTable ( " class _ AnnotationTypes " ) ; <nl> assertEquals ( t . getColumnIndex ( " id " ) , t . getPrimaryKey ( ) ) ; <nl> @ @ - 406 , 9 + 413 , 11 @ @ public class JNITransactions extends AndroidTestCase { <nl> db . close ( ) ; <nl> } <nl> <nl> - public void testSecondPrimaryKeyTableMigration ( ) throws IOException { <nl> - TestHelper . copyRealmFromAssets ( getContext ( ) , " 0841 _ annotationtypes . realm " , " default . realm " ) ; <nl> - SharedGroup db = new SharedGroup ( new File ( getContext ( ) . getFilesDir ( ) , Realm . DEFAULT _ REALM _ NAME ) . getAbsolutePath ( ) , SharedGroup . Durability . FULL , null ) ; <nl> + @ Test <nl> + public void secondPrimaryKeyTableMigration ( ) throws IOException { <nl> + configFactory . copyRealmFromAssets ( context , " 0841 _ annotationtypes . realm " , " default . realm " ) ; <nl> + SharedGroup db = new SharedGroup ( new File ( configFactory . getRoot ( ) , <nl> + Realm . DEFAULT _ REALM _ NAME ) . getAbsolutePath ( ) , SharedGroup . Durability . FULL , null ) ; <nl> ImplicitTransaction tr = db . beginImplicitTransaction ( ) ; <nl> Table t = tr . getTable ( " class _ AnnotationTypes " ) ; <nl> assertEquals ( t . getColumnIndex ( " id " ) , t . getPrimaryKey ( ) ) ; <nl> @ @ - 423 , 13 + 432 , 14 @ @ public class JNITransactions extends AndroidTestCase { <nl> / / In 0 . 84 . 2 , the class names in pk table has been renamed to some incorrect names like " Thclass " , " Mclass " , <nl> / / " NClass " , " Meclass " and etc . . <nl> / / The 0841 _ pk _ migration . realm is made to produce the issue . <nl> - public void testPrimaryKeyTableMigratedWithRightName ( ) throws IOException { <nl> + @ Test <nl> + public void primaryKeyTableMigratedWithRightName ( ) throws IOException { <nl> List < String > tableNames = Arrays . asList ( <nl> " ChatList " , " Drafts " , " Member " , " Message " , " Notifs " , " NotifyLink " , " PopularPost " , <nl> " Post " , " Tags " , " Threads " , " User " ) ; <nl> <nl> - TestHelper . copyRealmFromAssets ( getContext ( ) , " 0841 _ pk _ migration . realm " , " default . realm " ) ; <nl> - SharedGroup db = new SharedGroup ( new File ( getContext ( ) . getFilesDir ( ) , <nl> + configFactory . copyRealmFromAssets ( context , " 0841 _ pk _ migration . realm " , " default . realm " ) ; <nl> + SharedGroup db = new SharedGroup ( new File ( configFactory . getRoot ( ) , <nl> Realm . DEFAULT _ REALM _ NAME ) . getAbsolutePath ( ) , SharedGroup . Durability . FULL , null ) ; <nl> <nl> ImplicitTransaction tr = db . beginImplicitTransaction ( ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> index 8837c97 . . 77b8e69 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> @ @ - 120 , 6 + 120 , 12 @ @ public class TestRealmConfigurationFactory extends TemporaryFolder { <nl> / / Copies a Realm file from assets to temp dir <nl> public void copyRealmFromAssets ( Context context , String realmPath , String newName ) <nl> throws IOException { <nl> + / / Delete the existing file before copy <nl> + RealmConfiguration configToDelete = new RealmConfiguration . Builder ( getRoot ( ) ) <nl> + . name ( newName ) <nl> + . build ( ) ; <nl> + Realm . deleteRealm ( configToDelete ) ; <nl> + <nl> AssetManager assetManager = context . getAssets ( ) ; <nl> InputStream is = assetManager . open ( realmPath ) ; <nl> File file = new File ( getRoot ( ) , newName ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - default . realm b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - default . realm <nl> new file mode 100644 <nl> index 0000000 . . d049e3b <nl> Binary files / dev / null and b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - default . realm differ <nl> diff - - git a / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - max . realm b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - max . realm <nl> new file mode 100644 <nl> index 0000000 . . 0660c84 <nl> Binary files / dev / null and b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - max . realm differ <nl> diff - - git a / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - min . realm b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - min . realm <nl> new file mode 100644 <nl> index 0000000 . . 1002549 <nl> Binary files / dev / null and b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - min . realm differ <nl> diff - - git a / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes . realm b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes . realm <nl> new file mode 100644 <nl> index 0000000 . . 3f32700 <nl> Binary files / dev / null and b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes . realm differ <nl> diff - - git a / realm / src / androidTest / assets / ios / README b / realm / src / androidTest / assets / ios / README <nl> new file mode 100644 <nl> index 0000000 . . 0f30efc <nl> - - - / dev / null <nl> + + + b / realm / src / androidTest / assets / ios / README <nl> @ @ - 0 , 0 + 1 , 149 @ @ <nl> + This folder contains various Realm databases created on iOS and can be used to test interop with <nl> + Realm - Android . <nl> + <nl> + The databases are generated using the following iOS code : <nl> + <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / <nl> + / / Copyright 2014 Realm Inc . <nl> + / / <nl> + / / Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + / / you may not use this file except in compliance with the License . <nl> + / / You may obtain a copy of the License at <nl> + / / <nl> + / / http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + / / <nl> + / / Unless required by applicable law or agreed to in writing , software <nl> + / / distributed under the License is distributed on an " AS IS " BASIS , <nl> + / / WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + / / See the License for the specific language governing permissions and <nl> + / / limitations under the License . <nl> + / / <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + # import " AppDelegate . h " <nl> + # import < Realm / Realm . h > <nl> + <nl> + @ interface IOSChild : RLMObject <nl> + @ property NSString * name ; <nl> + @ end <nl> + RLM _ ARRAY _ TYPE ( IOSChild ) <nl> + <nl> + @ implementation IOSChild <nl> + @ end <nl> + <nl> + @ interface IOSAllTypes : RLMObject <nl> + @ property bool boolCol ; <nl> + @ property short shortCol ; <nl> + @ property int intCol ; <nl> + @ property long longCol ; <nl> + @ property float floatCol ; <nl> + @ property double doubleCol ; <nl> + @ property NSData * byteCol ; <nl> + @ property NSString * stringCol ; <nl> + @ property NSDate * dateCol ; <nl> + @ property IOSChild * child ; <nl> + @ property RLMArray < IOSChild > * children ; <nl> + @ end <nl> + RLM _ ARRAY _ TYPE ( AllTypes ) <nl> + <nl> + @ implementation IOSAllTypes <nl> + / / + ( NSString * ) primaryKey { <nl> + / / return @ " longCol " ; <nl> + / / } <nl> + @ end <nl> + <nl> + @ implementation AppDelegate <nl> + <nl> + - ( BOOL ) application : ( UIApplication * ) application didFinishLaunchingWithOptions : ( NSDictionary * ) launchOptions <nl> + { <nl> + self . window = [ [ UIWindow alloc ] initWithFrame : [ [ UIScreen mainScreen ] bounds ] ] ; <nl> + self . window . rootViewController = [ [ UIViewController alloc ] init ] ; <nl> + [ self . window makeKeyAndVisible ] ; <nl> + <nl> + const unsigned char no _ bytes [ ] = { } ; <nl> + const unsigned char bytes [ ] = { 1 , 2 , 3 } ; <nl> + <nl> + [ AppDelegate setDefaultRealm : @ " 0 . 90 . 4 - alltypes . realm " ] ; <nl> + RLMRealm * realm = [ RLMRealm defaultRealm ] ; <nl> + [ realm beginWriteTransaction ] ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + IOSAllTypes * obj = [ [ IOSAllTypes alloc ] init ] ; <nl> + obj . boolCol = TRUE ; <nl> + obj . shortCol = 1 + i ; <nl> + obj . intCol = 10 + i ; <nl> + obj . longCol = 100 + i ; <nl> + obj . floatCol = 1 . 23 + i ; <nl> + obj . doubleCol = 1 . 234 + i ; <nl> + obj . byteCol = [ NSData dataWithBytes : bytes length : sizeof ( bytes ) ] ; <nl> + obj . stringCol = [ NSString stringWithFormat : @ " % @ % d " , @ " String " , i ] ; <nl> + obj . dateCol = [ NSDate dateWithTimeIntervalSince1970 : ( 1000 + i ) ] ; <nl> + <nl> + obj . child = [ [ IOSChild alloc ] init ] ; <nl> + obj . child . name = @ " Foo " ; <nl> + for ( int j = 0 ; j < 10 ; j + + ) { <nl> + IOSChild * c = [ [ IOSChild alloc ] init ] ; <nl> + c . name = [ NSString stringWithFormat : @ " Name : % d " , i ] ; <nl> + [ obj . children addObject : c ] ; <nl> + } <nl> + [ realm addObject : obj ] ; <nl> + } <nl> + [ realm commitWriteTransaction ] ; <nl> + <nl> + <nl> + [ AppDelegate setDefaultRealm : @ " 0 . 90 . 4 - alltypes - default . realm " ] ; <nl> + realm = [ RLMRealm defaultRealm ] ; <nl> + [ realm beginWriteTransaction ] ; <nl> + IOSAllTypes * obj = [ [ IOSAllTypes alloc ] init ] ; <nl> + obj . byteCol = [ NSData dataWithBytes : no _ bytes length : sizeof ( no _ bytes ) ] ; <nl> + obj . stringCol = @ " " ; <nl> + obj . dateCol = [ NSDate dateWithTimeIntervalSince1970 : 0 ] ; <nl> + [ realm addObject : obj ] ; <nl> + [ realm commitWriteTransaction ] ; <nl> + <nl> + <nl> + [ AppDelegate setDefaultRealm : @ " 0 . 90 . 4 - alltypes - min . realm " ] ; <nl> + realm = [ RLMRealm defaultRealm ] ; <nl> + [ realm beginWriteTransaction ] ; <nl> + obj = [ [ IOSAllTypes alloc ] init ] ; <nl> + obj . boolCol = FALSE ; <nl> + obj . shortCol = SHRT _ MIN ; <nl> + obj . intCol = INT _ MIN ; <nl> + obj . longCol = LONG _ MIN ; <nl> + obj . floatCol = FLT _ MIN ; <nl> + obj . doubleCol = DBL _ MIN ; <nl> + obj . byteCol = [ NSData dataWithBytes : no _ bytes length : sizeof ( no _ bytes ) ] ; <nl> + obj . stringCol = @ " " ; <nl> + obj . dateCol = [ NSDate dateWithTimeIntervalSince1970 : 0 ] ; <nl> + [ realm addObject : obj ] ; <nl> + [ realm commitWriteTransaction ] ; <nl> + <nl> + <nl> + [ AppDelegate setDefaultRealm : @ " 0 . 90 . 4 - alltypes - max . realm " ] ; <nl> + realm = [ RLMRealm defaultRealm ] ; <nl> + [ realm beginWriteTransaction ] ; <nl> + obj = [ [ IOSAllTypes alloc ] init ] ; <nl> + obj . boolCol = TRUE ; <nl> + obj . shortCol = SHRT _ MAX ; <nl> + obj . intCol = INT _ MAX ; <nl> + obj . longCol = LONG _ MAX ; <nl> + obj . floatCol = FLT _ MAX ; <nl> + obj . doubleCol = DBL _ MAX ; <nl> + obj . byteCol = [ NSData dataWithBytes : no _ bytes length : sizeof ( no _ bytes ) ] ; <nl> + obj . stringCol = @ " " ; <nl> + obj . dateCol = [ NSDate dateWithTimeIntervalSince1970 : LONG _ MAX ] ; <nl> + [ realm addObject : obj ] ; <nl> + [ realm commitWriteTransaction ] ; <nl> + <nl> + NSLog ( @ " Done " ) ; <nl> + return YES ; <nl> + } <nl> + <nl> + + ( void ) setDefaultRealm : ( NSString * ) realmName <nl> + { <nl> + NSString * documentsDirectory = [ NSSearchPathForDirectoriesInDomains ( NSDocumentDirectory , NSUserDomainMask , YES ) objectAtIndex : 0 ] ; <nl> + NSString * allTypesRealm = [ documentsDirectory stringByAppendingPathComponent : realmName ] ; <nl> + [ RLMRealm setDefaultRealmPath : allTypesRealm ] ; <nl> + [ [ NSFileManager defaultManager ] removeItemAtPath : [ RLMRealm defaultRealmPath ] error : nil ] ; <nl> + } <nl> + @ end <nl> diff - - git a / realm / src / androidTest / java / io / realm / IOSRealmTests . java b / realm / src / androidTest / java / io / realm / IOSRealmTests . java <nl> new file mode 100644 <nl> index 0000000 . . c89aa0d <nl> - - - / dev / null <nl> + + + b / realm / src / androidTest / java / io / realm / IOSRealmTests . java <nl> @ @ - 0 , 0 + 1 , 99 @ @ <nl> + package io . realm ; <nl> + <nl> + import android . test . AndroidTestCase ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . Date ; <nl> + <nl> + import io . realm . entities . IOSAllTypes ; <nl> + import io . realm . entities . IOSChild ; <nl> + <nl> + import static io . realm . internal . test . ExtraTests . assertArrayEquals ; <nl> + <nl> + / * * <nl> + * This class test interoperability with Realms created on iOS . <nl> + * / <nl> + public class IOSRealmTests extends AndroidTestCase { <nl> + <nl> + private static final String REALM _ NAME = " alltypes . realm " ; <nl> + private Realm realm ; <nl> + <nl> + @ Override <nl> + protected void setUp ( ) throws Exception { <nl> + super . setUp ( ) ; <nl> + Realm . setSchema ( IOSAllTypes . class , IOSChild . class ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void tearDown ( ) throws Exception { <nl> + super . tearDown ( ) ; <nl> + Realm . setSchema ( null ) ; <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + } <nl> + } <nl> + <nl> + / / Test relationships and that data in general can be retrieved from an iOS realm <nl> + public void testIOSDatatypes ( ) throws IOException { <nl> + TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / 0 . 90 . 4 - alltypes . realm " , REALM _ NAME ) ; <nl> + realm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; <nl> + RealmResults < IOSAllTypes > result = realm . allObjectsSorted ( IOSAllTypes . class , " longCol " , RealmResults . SORT _ ORDER _ ASCENDING ) ; <nl> + <nl> + IOSAllTypes obj = result . get ( 1 ) ; <nl> + assertTrue ( obj . isBoolCol ( ) ) ; <nl> + assertEquals ( 2 , obj . getShortCol ( ) ) ; <nl> + assertEquals ( 11 , obj . getIntCol ( ) ) ; <nl> + assertEquals ( 101L , obj . getLongCol ( ) ) ; <nl> + assertEquals ( 2 . 23F , obj . getFloatCol ( ) ) ; <nl> + assertEquals ( 2 . 234D , obj . getDoubleCol ( ) ) ; <nl> + assertArrayEquals ( new byte [ ] { 1 , 2 , 3 } , obj . getByteCol ( ) ) ; <nl> + assertEquals ( " String 1 " , obj . getStringCol ( ) ) ; <nl> + assertEquals ( new Date ( 1001 * 1000 ) , obj . getDateCol ( ) ) ; <nl> + assertEquals ( " Foo " , result . get ( 1 ) . getChild ( ) . getName ( ) ) ; <nl> + assertEquals ( 10 , result . size ( ) ) ; <nl> + assertEquals ( 10 , result . get ( 1 ) . getChildren ( ) . size ( ) ) ; <nl> + assertEquals ( " Name : 1 " , result . get ( 1 ) . getChildren ( ) . get ( 1 ) . getName ( ) ) ; <nl> + } <nl> + <nl> + public void testIOSDatatypesDefaultValues ( ) throws IOException { <nl> + TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / 0 . 90 . 4 - alltypes - default . realm " , REALM _ NAME ) ; <nl> + realm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; <nl> + <nl> + IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; <nl> + assertFalse ( obj . isBoolCol ( ) ) ; <nl> + assertEquals ( 0 , obj . getShortCol ( ) ) ; <nl> + assertEquals ( 0 , obj . getIntCol ( ) ) ; <nl> + assertEquals ( 0L , obj . getLongCol ( ) ) ; <nl> + assertEquals ( 0 . 0F , obj . getFloatCol ( ) ) ; <nl> + assertEquals ( 0 . 0D , obj . getDoubleCol ( ) ) ; <nl> + assertArrayEquals ( new byte [ 0 ] , obj . getByteCol ( ) ) ; <nl> + assertEquals ( " " , obj . getStringCol ( ) ) ; <nl> + assertEquals ( new Date ( 0 ) , obj . getDateCol ( ) ) ; <nl> + assertNull ( obj . getChild ( ) ) ; <nl> + assertEquals ( 0 , obj . getChildren ( ) . size ( ) ) ; <nl> + } <nl> + <nl> + public void testIOSDatatypesMinimumValues ( ) throws IOException { <nl> + TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / 0 . 90 . 4 - alltypes - min . realm " , REALM _ NAME ) ; <nl> + realm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; <nl> + <nl> + IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; <nl> + assertEquals ( Short . MIN _ VALUE , obj . getShortCol ( ) ) ; <nl> + assertEquals ( Integer . MIN _ VALUE , obj . getIntCol ( ) ) ; <nl> + assertEquals ( Long . MIN _ VALUE , obj . getLongCol ( ) ) ; <nl> + assertEquals ( Float . MIN _ NORMAL , obj . getFloatCol ( ) ) ; <nl> + assertEquals ( Double . MIN _ NORMAL , obj . getDoubleCol ( ) ) ; <nl> + } <nl> + <nl> + public void testIOSDatatypesMaximumValues ( ) throws IOException { <nl> + TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / 0 . 90 . 4 - alltypes - max . realm " , REALM _ NAME ) ; <nl> + realm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; <nl> + <nl> + IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; <nl> + assertEquals ( Short . MAX _ VALUE , obj . getShortCol ( ) ) ; <nl> + assertEquals ( Integer . MAX _ VALUE , obj . getIntCol ( ) ) ; <nl> + assertEquals ( Long . MAX _ VALUE , obj . getLongCol ( ) ) ; <nl> + assertEquals ( Float . MAX _ VALUE , obj . getFloatCol ( ) ) ; <nl> + assertEquals ( Double . MAX _ VALUE , obj . getDoubleCol ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> index c798a35 . . 680965a 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> @ @ - 1 , 37 + 1 , 18 @ @ <nl> package io . realm ; <nl> <nl> - import android . content . res . AssetManager ; <nl> import android . test . AndroidTestCase ; <nl> <nl> - import java . io . File ; <nl> - import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> - import java . io . InputStream ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> <nl> public class RealmMigrationTests extends AndroidTestCase { <nl> <nl> - / / Copies a Realm file from assets to app files dir <nl> - private void copyRealmFromAssets ( String fileName ) throws IOException { <nl> - AssetManager assetManager = getContext ( ) . getAssets ( ) ; <nl> - InputStream is = assetManager . open ( fileName ) ; <nl> - File file = new File ( getContext ( ) . getFilesDir ( ) , fileName ) ; <nl> - FileOutputStream outputStream = new FileOutputStream ( file ) ; <nl> - byte [ ] buf = new byte [ 1024 ] ; <nl> - int bytesRead ; <nl> - while ( ( bytesRead = is . read ( buf ) ) > - 1 ) { <nl> - outputStream . write ( buf , 0 , bytesRead ) ; <nl> - } <nl> - outputStream . close ( ) ; <nl> - is . close ( ) ; <nl> - } <nl> - <nl> public void testRealmClosedAfterMigrationException ( ) throws IOException { <nl> String REALM _ NAME = " default0 . realm " ; <nl> Realm . deleteRealmFile ( getContext ( ) , REALM _ NAME ) ; <nl> - copyRealmFromAssets ( REALM _ NAME ) ; <nl> + TestHelper . copyRealmFromAssets ( getContext ( ) , REALM _ NAME , REALM _ NAME ) ; <nl> try { <nl> Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; <nl> fail ( " A migration should be triggered " ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / TestHelper . java b / realm / src / androidTest / java / io / realm / TestHelper . java <nl> index fb2bd93 . . 5d1d27a 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / TestHelper . java <nl> + + + b / realm / src / androidTest / java / io / realm / TestHelper . java <nl> @ @ - 16 , 6 + 16 , 14 @ @ <nl> <nl> package io . realm ; <nl> <nl> + import android . content . Context ; <nl> + import android . content . res . AssetManager ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + <nl> import io . realm . entities . AllTypes ; <nl> <nl> public class TestHelper { <nl> @ @ - 35 , 4 + 43 , 25 @ @ public class TestHelper { <nl> object3 . setColumnString ( " Adam " ) ; <nl> testRealm . commitTransaction ( ) ; <nl> } <nl> + <nl> + / / Copies a Realm file from assets to app files dir <nl> + public static void copyRealmFromAssets ( Context context , String realmPath , String newName ) throws IOException { <nl> + AssetManager assetManager = context . getAssets ( ) ; <nl> + InputStream is = assetManager . open ( realmPath ) ; <nl> + File file = new File ( context . getFilesDir ( ) , newName ) ; <nl> + FileOutputStream outputStream = new FileOutputStream ( file ) ; <nl> + byte [ ] buf = new byte [ 1024 ] ; <nl> + int bytesRead ; <nl> + while ( ( bytesRead = is . read ( buf ) ) > - 1 ) { <nl> + outputStream . write ( buf , 0 , bytesRead ) ; <nl> + } <nl> + outputStream . close ( ) ; <nl> + is . close ( ) ; <nl> + } <nl> + <nl> + / / Deletes the old database and copies a new one into its place <nl> + public static void prepareDatabaseFromAssets ( Context context , String realmPath , String newName ) throws IOException { <nl> + Realm . deleteRealmFile ( context , newName ) ; <nl> + TestHelper . copyRealmFromAssets ( context , realmPath , newName ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / androidTest / java / io / realm / entities / IOSAllTypes . java b / realm / src / androidTest / java / io / realm / entities / IOSAllTypes . java <nl> new file mode 100644 <nl> index 0000000 . . 14fb439 <nl> - - - / dev / null <nl> + + + b / realm / src / androidTest / java / io / realm / entities / IOSAllTypes . java <nl> @ @ - 0 , 0 + 1 , 109 @ @ <nl> + package io . realm . entities ; <nl> + <nl> + import java . util . Date ; <nl> + <nl> + import io . realm . RealmList ; <nl> + import io . realm . RealmObject ; <nl> + <nl> + public class IOSAllTypes extends RealmObject { <nl> + <nl> + private boolean boolCol ; <nl> + private short shortCol ; <nl> + private int intCol ; <nl> + private long longCol ; <nl> + private float floatCol ; <nl> + private double doubleCol ; <nl> + private byte [ ] byteCol ; <nl> + private String stringCol ; <nl> + private Date dateCol ; <nl> + private IOSChild child ; <nl> + private RealmList < IOSChild > children ; <nl> + <nl> + public boolean isBoolCol ( ) { <nl> + return boolCol ; <nl> + } <nl> + <nl> + public void setBoolCol ( boolean boolCol ) { <nl> + this . boolCol = boolCol ; <nl> + } <nl> + <nl> + public short getShortCol ( ) { <nl> + return shortCol ; <nl> + } <nl> + <nl> + public void setShortCol ( short shortCol ) { <nl> + this . shortCol = shortCol ; <nl> + } <nl> + <nl> + public int getIntCol ( ) { <nl> + return intCol ; <nl> + } <nl> + <nl> + public void setIntCol ( int intCol ) { <nl> + this . intCol = intCol ; <nl> + } <nl> + <nl> + public long getLongCol ( ) { <nl> + return longCol ; <nl> + } <nl> + <nl> + public void setLongCol ( long longCol ) { <nl> + this . longCol = longCol ; <nl> + } <nl> + <nl> + public float getFloatCol ( ) { <nl> + return floatCol ; <nl> + } <nl> + <nl> + public void setFloatCol ( float floatCol ) { <nl> + this . floatCol = floatCol ; <nl> + } <nl> + <nl> + public double getDoubleCol ( ) { <nl> + return doubleCol ; <nl> + } <nl> + <nl> + public void setDoubleCol ( double doubleCol ) { <nl> + this . doubleCol = doubleCol ; <nl> + } <nl> + <nl> + public byte [ ] getByteCol ( ) { <nl> + return byteCol ; <nl> + } <nl> + <nl> + public void setByteCol ( byte [ ] byteCol ) { <nl> + this . byteCol = byteCol ; <nl> + } <nl> + <nl> + public String getStringCol ( ) { <nl> + return stringCol ; <nl> + } <nl> + <nl> + public void setStringCol ( String stringCol ) { <nl> + this . stringCol = stringCol ; <nl> + } <nl> + <nl> + public Date getDateCol ( ) { <nl> + return dateCol ; <nl> + } <nl> + <nl> + public void setDateCol ( Date dateCol ) { <nl> + this . dateCol = dateCol ; <nl> + } <nl> + <nl> + public IOSChild getChild ( ) { <nl> + return child ; <nl> + } <nl> + <nl> + public void setChild ( IOSChild child ) { <nl> + this . child = child ; <nl> + } <nl> + <nl> + public RealmList < IOSChild > getChildren ( ) { <nl> + return children ; <nl> + } <nl> + <nl> + public void setChildren ( RealmList < IOSChild > children ) { <nl> + this . children = children ; <nl> + } <nl> + } <nl> diff - - git a / realm / src / androidTest / java / io / realm / entities / IOSChild . java b / realm / src / androidTest / java / io / realm / entities / IOSChild . java <nl> new file mode 100644 <nl> index 0000000 . . f041de1 <nl> - - - / dev / null <nl> + + + b / realm / src / androidTest / java / io / realm / entities / IOSChild . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package io . realm . entities ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + <nl> + public class IOSChild extends RealmObject { <nl> + private String name ; <nl> + <nl> + public String getName ( ) { <nl> + return name ; <nl> + } <nl> + <nl> + public void setName ( String name ) { <nl> + this . name = name ; <nl> + } <nl> + } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 389e5c8 . . ffd4696 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 40 , 8 + 40 , 10 @ @ import java . lang . reflect . Method ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . UUID ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> @ @ - 164 , 6 + 166 , 7 @ @ public final class Realm implements Closeable { <nl> private final Map < Class < ? > , Constructor > generatedConstructors = new HashMap < Class < ? > , Constructor > ( ) ; <nl> private final List < RealmChangeListener > changeListeners = new ArrayList < RealmChangeListener > ( ) ; <nl> private final Map < Class < ? > , Table > tables = new HashMap < Class < ? > , Table > ( ) ; <nl> + private static final Set < Class < ? extends RealmObject > > customSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; <nl> private static final long UNVERSIONED = - 1 ; <nl> <nl> / / Package protected to be reachable by proxy classes <nl> @ @ - 539 , 6 + 542 , 14 @ @ public final class Realm implements Closeable { <nl> throw new RealmException ( " An exception was thrown in the getProxyClasses method in the ValidationList class : " + APT _ NOT _ EXECUTED _ MESSAGE ) ; <nl> } <nl> <nl> + / / Custom schema overrides any schema already defined <nl> + if ( customSchema . size ( ) > 0 ) { <nl> + proxyClasses = new ArrayList < String > ( ) ; <nl> + for ( Class < ? extends RealmObject > clazz : customSchema ) { <nl> + proxyClasses . add ( clazz . getName ( ) ) ; <nl> + } <nl> + } <nl> + <nl> long version = realm . getVersion ( ) ; <nl> boolean commitNeeded = false ; <nl> try { <nl> @ @ - 1538 , 6 + 1549 , 25 @ @ public final class Realm implements Closeable { <nl> return path ; <nl> } <nl> <nl> + <nl> + / * * <nl> + * Override the standard behavior of all classes extended RealmObject being part of the schema . <nl> + * Use this method to define the schema as only the classes given here . <nl> + * <nl> + * This class must be called before calling { @ link # getInstance ( android . content . Context ) } <nl> + * <nl> + * If { @ code null } is given as parameter , the Schema is reset to use all known classes . <nl> + * <nl> + * / <nl> + public static void setSchema ( Class < ? extends RealmObject > . . . schemaClass ) { <nl> + customSchema . clear ( ) ; <nl> + if ( schemaClass ! = null ) { <nl> + for ( int i = 0 ; i < schemaClass . length ; i + + ) { <nl> + customSchema . add ( schemaClass [ i ] ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Encapsulates a Realm transaction . <nl> * <nl> diff - - git a / settings . gradle b / settings . gradle <nl> index d0eb928 . . 698a425 100644 <nl> - - - a / settings . gradle <nl> + + + b / settings . gradle <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> / / Realm projects <nl> - include ' realm ' <nl> + include ' realm ' , ' : realm - annotations - processor ' <nl> <nl> / / Example projects <nl> include ' : introExample ' ,

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / IOSRealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / IOSRealmTests . java 
 index 753afd8 . . 48b9347 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / IOSRealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / IOSRealmTests . java 
 @ @ - 16 , 7 + 16 , 15 @ @ 
 
 package io . realm ; 
 
 - import android . test . AndroidTestCase ; 
 + import android . content . Context ; 
 + import android . support . test . InstrumentationRegistry ; 
 + import android . support . test . runner . AndroidJUnit4 ; 
 + 
 + import org . junit . After ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 
 import java . io . IOException ; 
 import java . util . Date ; 
 @ @ - 24 , 31 + 32 , 42 @ @ import java . util . Date ; 
 import io . realm . entities . IOSAllTypes ; 
 import io . realm . entities . IOSChild ; 
 import io . realm . internal . Table ; 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNull ; 
 + 
 
 import static io . realm . internal . test . ExtraTests . assertArrayEquals ; 
 
 / * * 
 * This class test interoperability with Realms created on iOS . 
 * / 
 - public class IOSRealmTests extends AndroidTestCase { 
 + @ RunWith ( AndroidJUnit4 . class ) 
 + public class IOSRealmTests { 
 + 
 + @ Rule 
 + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 
 private static final String [ ] IOS _ VERSIONS = new String [ ] { " 0 . 96 . 2 " } ; 
 private static final String REALM _ NAME = " alltypes . realm " ; 
 private Realm realm ; 
 + private Context context ; 
 
 - @ Override 
 - protected void setUp ( ) throws Exception { 
 - super . setUp ( ) ; 
 - RealmConfiguration defaultConfiguration = new RealmConfiguration . Builder ( getContext ( ) ) 
 + @ Before 
 + public void setUp ( ) { 
 + RealmConfiguration defaultConfiguration = configFactory . createConfigurationBuilder ( ) 
 . name ( REALM _ NAME ) 
 . schema ( IOSAllTypes . class , IOSChild . class ) 
 . build ( ) ; 
 Realm . setDefaultConfiguration ( defaultConfiguration ) ; 
 + context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 } 
 
 - @ Override 
 - protected void tearDown ( ) throws Exception { 
 - super . tearDown ( ) ; 
 + @ After 
 + public void tearDown ( ) { 
 Realm . removeDefaultConfiguration ( ) ; 
 if ( realm ! = null ) { 
 realm . close ( ) ; 
 @ @ - 56 , 9 + 75 , 11 @ @ public class IOSRealmTests extends AndroidTestCase { 
 } 
 
 / / Test relationships and that data in general can be retrieved from an iOS realm 
 - public void testIOSDatatypes ( ) throws IOException { 
 + @ Test 
 + public void iOSDataTypes ( ) throws IOException { 
 for ( String iosVersion : IOS _ VERSIONS ) { 
 - TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / " + iosVersion + " - alltypes . realm " , REALM _ NAME ) ; 
 + configFactory . copyRealmFromAssets ( context , 
 + " ios / " + iosVersion + " - alltypes . realm " , REALM _ NAME ) ; 
 realm = Realm . getDefaultInstance ( ) ; 
 RealmResults < IOSAllTypes > result = realm . allObjectsSorted ( IOSAllTypes . class , " id " , Sort . ASCENDING ) ; 
 
 @ @ - 72 , 8 + 93 , 8 @ @ public class IOSRealmTests extends AndroidTestCase { 
 assertEquals ( 2 , obj . getShortCol ( ) ) ; 
 assertEquals ( 11 , obj . getIntCol ( ) ) ; 
 assertEquals ( 101L , obj . getLongCol ( ) ) ; 
 - assertEquals ( 2 . 23F , obj . getFloatCol ( ) ) ; 
 - assertEquals ( 2 . 234D , obj . getDoubleCol ( ) ) ; 
 + assertEquals ( 2 . 23F , obj . getFloatCol ( ) , 0F ) ; 
 + assertEquals ( 2 . 234D , obj . getDoubleCol ( ) , 0D ) ; 
 assertArrayEquals ( new byte [ ] { 1 , 2 , 3 } , obj . getByteCol ( ) ) ; 
 assertEquals ( " String 1 " , obj . getStringCol ( ) ) ; 
 assertEquals ( new Date ( 1001 * 1000 ) , obj . getDateCol ( ) ) ; 
 @ @ - 84 , 9 + 105 , 11 @ @ public class IOSRealmTests extends AndroidTestCase { 
 } 
 } 
 
 - public void testIOSDatatypesDefaultValues ( ) throws IOException { 
 + @ Test 
 + public void sOSDataTypesDefaultValues ( ) throws IOException { 
 for ( String iosVersion : IOS _ VERSIONS ) { 
 - TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / " + iosVersion + " - alltypes - default . realm " , REALM _ NAME ) ; 
 + configFactory . copyRealmFromAssets ( context , 
 + " ios / " + iosVersion + " - alltypes - default . realm " , REALM _ NAME ) ; 
 realm = Realm . getDefaultInstance ( ) ; 
 
 IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; 
 @ @ - 94 , 8 + 117 , 8 @ @ public class IOSRealmTests extends AndroidTestCase { 
 assertEquals ( 0 , obj . getShortCol ( ) ) ; 
 assertEquals ( 0 , obj . getIntCol ( ) ) ; 
 assertEquals ( 0L , obj . getLongCol ( ) ) ; 
 - assertEquals ( 0 . 0F , obj . getFloatCol ( ) ) ; 
 - assertEquals ( 0 . 0D , obj . getDoubleCol ( ) ) ; 
 + assertEquals ( 0 . 0F , obj . getFloatCol ( ) , 0F ) ; 
 + assertEquals ( 0 . 0D , obj . getDoubleCol ( ) , 0D ) ; 
 assertArrayEquals ( new byte [ 0 ] , obj . getByteCol ( ) ) ; 
 assertEquals ( " " , obj . getStringCol ( ) ) ; 
 assertEquals ( new Date ( 0 ) , obj . getDateCol ( ) ) ; 
 @ @ - 104 , 38 + 127 , 44 @ @ public class IOSRealmTests extends AndroidTestCase { 
 } 
 } 
 
 - public void testIOSDatatypesMinimumValues ( ) throws IOException { 
 + @ Test 
 + public void iOSDataTypesMinimumValues ( ) throws IOException { 
 for ( String iosVersion : IOS _ VERSIONS ) { 
 - TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / " + iosVersion + " - alltypes - min . realm " , REALM _ NAME ) ; 
 + configFactory . copyRealmFromAssets ( context , 
 + " ios / " + iosVersion + " - alltypes - min . realm " , REALM _ NAME ) ; 
 realm = Realm . getDefaultInstance ( ) ; 
 
 IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; 
 assertEquals ( Short . MIN _ VALUE , obj . getShortCol ( ) ) ; 
 assertEquals ( Integer . MIN _ VALUE , obj . getIntCol ( ) ) ; 
 assertEquals ( Long . MIN _ VALUE , obj . getLongCol ( ) ) ; 
 - assertEquals ( Float . MIN _ NORMAL , obj . getFloatCol ( ) ) ; 
 - assertEquals ( Double . MIN _ NORMAL , obj . getDoubleCol ( ) ) ; 
 + assertEquals ( Float . MIN _ NORMAL , obj . getFloatCol ( ) , 0F ) ; 
 + assertEquals ( Double . MIN _ NORMAL , obj . getDoubleCol ( ) , 0D ) ; 
 } 
 } 
 
 - public void testIOSDatatypesMaximumValues ( ) throws IOException { 
 + @ Test 
 + public void iOSDataTypesMaximumValues ( ) throws IOException { 
 for ( String iosVersion : IOS _ VERSIONS ) { 
 - TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / " + iosVersion + " - alltypes - max . realm " , REALM _ NAME ) ; 
 + configFactory . copyRealmFromAssets ( context , 
 + " ios / " + iosVersion + " - alltypes - max . realm " , REALM _ NAME ) ; 
 realm = Realm . getDefaultInstance ( ) ; 
 
 IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; 
 assertEquals ( Short . MAX _ VALUE , obj . getShortCol ( ) ) ; 
 assertEquals ( Integer . MAX _ VALUE , obj . getIntCol ( ) ) ; 
 assertEquals ( Long . MAX _ VALUE , obj . getLongCol ( ) ) ; 
 - assertEquals ( Float . MAX _ VALUE , obj . getFloatCol ( ) ) ; 
 - assertEquals ( Double . MAX _ VALUE , obj . getDoubleCol ( ) ) ; 
 + assertEquals ( Float . MAX _ VALUE , obj . getFloatCol ( ) , 0F ) ; 
 + assertEquals ( Double . MAX _ VALUE , obj . getDoubleCol ( ) , 0D ) ; 
 } 
 } 
 
 - public void testIOSEncryptedRealm ( ) throws IOException { 
 + @ Test 
 + public void iOSEncryptedRealm ( ) throws IOException { 
 for ( String iosVersion : IOS _ VERSIONS ) { 
 - TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / " + iosVersion + " - alltypes - default - encrypted . realm " , REALM _ NAME ) ; 
 - RealmConfiguration realmConfig = new RealmConfiguration . Builder ( getContext ( ) ) 
 + configFactory . copyRealmFromAssets ( context , 
 + " ios / " + iosVersion + " - alltypes - default - encrypted . realm " , REALM _ NAME ) ; 
 + RealmConfiguration realmConfig = configFactory . createConfigurationBuilder ( ) 
 . name ( REALM _ NAME ) 
 . encryptionKey ( getIOSKey ( ) ) 
 . schema ( IOSAllTypes . class , IOSChild . class ) 
 @ @ - 147 , 8 + 176 , 8 @ @ public class IOSRealmTests extends AndroidTestCase { 
 assertEquals ( 0 , obj . getShortCol ( ) ) ; 
 assertEquals ( 0 , obj . getIntCol ( ) ) ; 
 assertEquals ( 0L , obj . getLongCol ( ) ) ; 
 - assertEquals ( 0 . 0F , obj . getFloatCol ( ) ) ; 
 - assertEquals ( 0 . 0D , obj . getDoubleCol ( ) ) ; 
 + assertEquals ( 0 . 0F , obj . getFloatCol ( ) , 0F ) ; 
 + assertEquals ( 0 . 0D , obj . getDoubleCol ( ) , 0D ) ; 
 assertArrayEquals ( new byte [ 0 ] , obj . getByteCol ( ) ) ; 
 assertEquals ( " " , obj . getStringCol ( ) ) ; 
 assertEquals ( new Date ( 0 ) , obj . getDateCol ( ) ) ; 
 @ @ - 157 , 7 + 186 , 7 @ @ public class IOSRealmTests extends AndroidTestCase { 
 } 
 } 
 
 - public byte [ ] getIOSKey ( ) { 
 + private byte [ ] getIOSKey ( ) { 
 byte [ ] keyData = new byte [ 64 ] ; 
 for ( int i = 0 ; i < keyData . length ; i + + ) { 
 keyData [ i ] = 1 ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 index 53d40c2 . . 056f4c6 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 @ @ - 128 , 21 + 128 , 6 @ @ public class TestHelper { 
 return new ByteArrayInputStream ( str . getBytes ( Charset . forName ( " UTF - 8 " ) ) ) ; 
 } 
 
 - / / Copies a Realm file from assets to app files dir 
 - public static void copyRealmFromAssets ( Context context , String realmPath , String newName ) throws IOException { 
 - AssetManager assetManager = context . getAssets ( ) ; 
 - InputStream is = assetManager . open ( realmPath ) ; 
 - File file = new File ( context . getFilesDir ( ) , newName ) ; 
 - FileOutputStream outputStream = new FileOutputStream ( file ) ; 
 - byte [ ] buf = new byte [ 1024 ] ; 
 - int bytesRead ; 
 - while ( ( bytesRead = is . read ( buf ) ) > - 1 ) { 
 - outputStream . write ( buf , 0 , bytesRead ) ; 
 - } 
 - outputStream . close ( ) ; 
 - is . close ( ) ; 
 - } 
 - 
 / / Creates a simple migration step in order to support null 
 / / FIXME : generate a new encrypted . realm will null support 
 public static RealmMigration prepareMigrationToNullSupportStep ( ) { 
 @ @ - 156 , 13 + 141 , 6 @ @ public class TestHelper { 
 return realmMigration ; 
 } 
 
 - 
 - / / Deletes the old database and copies a new one into its place 
 - public static void prepareDatabaseFromAssets ( Context context , String realmPath , String newName ) throws IOException { 
 - Realm . deleteRealm ( createConfiguration ( context , newName ) ) ; 
 - TestHelper . copyRealmFromAssets ( context , realmPath , newName ) ; 
 - } 
 - 
 / / Returns a random key used by encrypted Realms . 
 public static byte [ ] getRandomKey ( ) { 
 byte [ ] key = new byte [ 64 ] ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITransactions . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITransactions . java 
 index 4652101 . . b4cff1b 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITransactions . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITransactions . java 
 @ @ - 16 , 46 + 16 , 47 @ @ 
 
 package io . realm . internal ; 
 
 + import android . support . test . InstrumentationRegistry ; 
 + import android . support . test . runner . AndroidJUnit4 ; 
 
 - import android . test . AndroidTestCase ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 - import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Date ; 
 import java . util . List ; 
 
 import io . realm . Realm ; 
 - import io . realm . TestHelper ; 
 import io . realm . RealmFieldType ; 
 import io . realm . exceptions . RealmException ; 
 import io . realm . exceptions . RealmPrimaryKeyConstraintException ; 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 
 - public class JNITransactions extends AndroidTestCase { 
 - 
 - String testFile ; 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . fail ; 
 
 - @ Override 
 - protected void setUp ( ) throws Exception { 
 - createDBFileName ( ) ; 
 - } 
 + @ RunWith ( AndroidJUnit4 . class ) 
 + public class JNITransactions { 
 
 - @ Override 
 - public void tearDown ( ) throws IOException { 
 - deleteFile ( testFile ) ; 
 - } 
 + @ Rule 
 + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 
 - protected void deleteFile ( String filename ) throws IOException { 
 - for ( String filePath : Arrays . asList ( filename , filename + " . lock " ) ) { 
 - File f = new File ( filePath ) ; 
 - if ( f . exists ( ) ) { 
 - boolean result = f . delete ( ) ; 
 - if ( ! result ) { 
 - throw new java . io . IOException ( " Could not delete " + filePath ) ; 
 - } 
 - } 
 - } 
 + private String testFile ; 
 + private android . content . Context context ; 
 + 
 + @ Before 
 + public void setUp ( ) throws Exception { 
 + testFile = new File ( 
 + configFactory . getRoot ( ) , 
 + System . currentTimeMillis ( ) + " _ transact . realm " ) . getAbsolutePath ( ) ; 
 + context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 + RealmCore . loadLibrary ( context ) ; 
 } 
 
 private Table getTableWithStringPrimaryKey ( ) { 
 @ @ - 76 , 12 + 77 , 6 @ @ public class JNITransactions extends AndroidTestCase { 
 return t ; 
 } 
 
 - private void createDBFileName ( ) { 
 - testFile = new File ( 
 - this . getContext ( ) . getFilesDir ( ) , 
 - System . currentTimeMillis ( ) + " _ transact . realm " ) . toString ( ) ; 
 - } 
 - 
 protected void writeOneTransaction ( SharedGroup db , long rows ) { 
 WriteTransaction trans = db . beginWrite ( ) ; 
 Table tbl = trans . getTable ( " EmployeeTable " ) ; 
 @ @ - 115 , 20 + 110 , 22 @ @ public class JNITransactions extends AndroidTestCase { 
 
 / / TODO : tests should be done both for all Durability options 
 
 - public void testMustWriteAndReadEmpty ( ) { 
 + @ Test 
 + public void mustWriteAndReadEmpty ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 writeOneTransaction ( db , 0 ) ; 
 checkRead ( db , 0 ) ; 
 } 
 
 - public void testMustWriteCommit ( ) { 
 + @ Test 
 + public void mustWriteCommit ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 writeOneTransaction ( db , 10 ) ; 
 checkRead ( db , 10 ) ; 
 } 
 
 - 
 - public void testShouldThrowExceptionAfterClosedReadTransaction ( ) { 
 + @ Test 
 + public void shouldThrowExceptionAfterClosedReadTransaction ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 writeOneTransaction ( db , 10 ) ; 
 ReadTransaction rt = db . beginRead ( ) ; 
 @ @ - 139 , 17 + 136 , 15 @ @ public class JNITransactions extends AndroidTestCase { 
 try { 
 tbl . getColumnCount ( ) ; / / Should throw exception , the table is invalid when transaction has been closed 
 fail ( ) ; 
 - } catch ( IllegalStateException e ) { 
 - assert ( false ) ; 
 - / / assertNotNull ( e ) ; 
 + } catch ( IllegalStateException ignored ) { 
 } 
 } finally { 
 rt . endRead ( ) ; 
 } 
 } 
 
 - 
 - public void testShouldThrowExceptionAfterClosedReadTransactionWhenWriting ( ) { 
 + @ Test 
 + public void shouldThrowExceptionAfterClosedReadTransactionWhenWriting ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 writeOneTransaction ( db , 10 ) ; 
 ReadTransaction rt = db . beginRead ( ) ; 
 @ @ - 168 , 8 + 163 , 8 @ @ public class JNITransactions extends AndroidTestCase { 
 } 
 } 
 
 - 
 - public void testShouldThrowExceptionWhenWritingInReadTrans ( ) { 
 + @ Test 
 + public void shouldThrowExceptionWhenWritingInReadTrans ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 ReadTransaction rt = db . beginRead ( ) ; 
 
 @ @ - 185 , 8 + 180 , 8 @ @ public class JNITransactions extends AndroidTestCase { 
 } 
 } 
 
 - 
 - public void testOnlyOneCommit ( ) { 
 + @ Test 
 + public void onlyOneCommit ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 WriteTransaction trans = db . beginWrite ( ) ; 
 
 @ @ - 206 , 7 + 201 , 8 @ @ public class JNITransactions extends AndroidTestCase { 
 } 
 } 
 
 - public void testMustRollback ( ) { 
 + @ Test 
 + public void mustRollback ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 writeOneTransaction ( db , 1 ) ; 
 WriteTransaction trans = db . beginWrite ( ) ; 
 @ @ - 219 , 7 + 215 , 8 @ @ public class JNITransactions extends AndroidTestCase { 
 checkRead ( db , 1 ) ; / / Only 1 row now . 
 } 
 
 - public void testMustAllowDoubleCommitAndRollback ( ) { 
 + @ Test 
 + public void mustAllowDoubleCommitAndRollback ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 { 
 WriteTransaction trans = db . beginWrite ( ) ; 
 @ @ - 256 , 7 + 253 , 8 @ @ public class JNITransactions extends AndroidTestCase { 
 / / Test : above in custom Typed Tables 
 / / TableQuery . . . . in ReadTransactions 
 
 - public void testMustFailOnWriteInReadTransactions ( ) { 
 + @ Test 
 + public void mustFailOnWriteInReadTransactions ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 
 writeOneTransaction ( db , 1 ) ; 
 @ @ - 300 , 7 + 298 , 8 @ @ public class JNITransactions extends AndroidTestCase { 
 } 
 
 / / Test that primary key constraints are actually removed 
 - public void testRemovingPrimaryKeyRemovesConstraint ( ) { 
 + @ Test 
 + public void removingPrimaryKeyRemovesConstraint ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 
 WriteTransaction trans = db . beginWrite ( ) ; 
 @ @ - 327 , 7 + 326 , 8 @ @ public class JNITransactions extends AndroidTestCase { 
 } 
 
 / / Test that primary key constraints are actually removed 
 - public void testRemovingPrimaryKeyRemovesConstraint _ typeSetters ( ) { 
 + @ Test 
 + public void removingPrimaryKeyRemovesConstraint _ typeSetters ( ) { 
 SharedGroup db = new SharedGroup ( testFile , SharedGroup . Durability . FULL , null ) ; 
 
 WriteTransaction trans = db . beginWrite ( ) ; 
 @ @ - 354 , 50 + 354 , 57 @ @ public class JNITransactions extends AndroidTestCase { 
 fail ( " Primary key not enforced . " ) ; 
 } 
 
 - public void testAddEmptyRowWithPrimaryKeyWrongTypeStringThrows ( ) { 
 + @ Test 
 + public void addEmptyRowWithPrimaryKeyWrongTypeStringThrows ( ) { 
 Table t = getTableWithStringPrimaryKey ( ) ; 
 try { 
 t . addEmptyRowWithPrimaryKey ( 42 ) ; 
 fail ( ) ; 
 - } catch ( IllegalArgumentException expected ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 
 - public void testAddEmptyRowWithPrimaryKeyNullStringThrows ( ) { 
 + @ Test 
 + public void addEmptyRowWithPrimaryKeyNullStringThrows ( ) { 
 Table t = getTableWithStringPrimaryKey ( ) ; 
 try { 
 t . addEmptyRowWithPrimaryKey ( null ) ; 
 fail ( ) ; 
 - } catch ( IllegalArgumentException expected ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 
 - public void testAddEmptyRowWithPrimaryKeyWrongTypeIntegerThrows ( ) { 
 + @ Test 
 + public void addEmptyRowWithPrimaryKeyWrongTypeIntegerThrows ( ) { 
 Table t = getTableWithIntegerPrimaryKey ( ) ; 
 try { 
 t . addEmptyRowWithPrimaryKey ( " Foo " ) ; 
 fail ( ) ; 
 - } catch ( IllegalArgumentException expected ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 
 - public void testAddEmptyRowWithPrimaryKeyString ( ) { 
 + @ Test 
 + public void addEmptyRowWithPrimaryKeyString ( ) { 
 Table t = getTableWithStringPrimaryKey ( ) ; 
 long rowIndex = t . addEmptyRowWithPrimaryKey ( " Foo " ) ; 
 assertEquals ( 1 , t . size ( ) ) ; 
 assertEquals ( " Foo " , t . getUncheckedRow ( rowIndex ) . getString ( 0 ) ) ; 
 } 
 
 - public void testAddEmptyRowWithPrimaryKeyLong ( ) { 
 + @ Test 
 + public void addEmptyRowWithPrimaryKeyLong ( ) { 
 Table t = getTableWithIntegerPrimaryKey ( ) ; 
 long rowIndex = t . addEmptyRowWithPrimaryKey ( 42 ) ; 
 assertEquals ( 1 , t . size ( ) ) ; 
 assertEquals ( 42 , t . getUncheckedRow ( rowIndex ) . getLong ( 0 ) ) ; 
 } 
 
 - public void testFirstPrimaryKeyTableMigration ( ) throws IOException { 
 - TestHelper . copyRealmFromAssets ( getContext ( ) , " 080 _ annotationtypes . realm " , " default . realm " ) ; 
 - SharedGroup db = new SharedGroup ( new File ( getContext ( ) . getFilesDir ( ) , Realm . DEFAULT _ REALM _ NAME ) . getAbsolutePath ( ) , SharedGroup . Durability . FULL , null ) ; 
 + @ Test 
 + public void firstPrimaryKeyTableMigration ( ) throws IOException { 
 + configFactory . copyRealmFromAssets ( context , " 080 _ annotationtypes . realm " , " default . realm " ) ; 
 + SharedGroup db = new SharedGroup ( new File ( configFactory . getRoot ( ) , 
 + Realm . DEFAULT _ REALM _ NAME ) . getAbsolutePath ( ) , SharedGroup . Durability . FULL , null ) ; 
 ImplicitTransaction tr = db . beginImplicitTransaction ( ) ; 
 Table t = tr . getTable ( " class _ AnnotationTypes " ) ; 
 assertEquals ( t . getColumnIndex ( " id " ) , t . getPrimaryKey ( ) ) ; 
 @ @ - 406 , 9 + 413 , 11 @ @ public class JNITransactions extends AndroidTestCase { 
 db . close ( ) ; 
 } 
 
 - public void testSecondPrimaryKeyTableMigration ( ) throws IOException { 
 - TestHelper . copyRealmFromAssets ( getContext ( ) , " 0841 _ annotationtypes . realm " , " default . realm " ) ; 
 - SharedGroup db = new SharedGroup ( new File ( getContext ( ) . getFilesDir ( ) , Realm . DEFAULT _ REALM _ NAME ) . getAbsolutePath ( ) , SharedGroup . Durability . FULL , null ) ; 
 + @ Test 
 + public void secondPrimaryKeyTableMigration ( ) throws IOException { 
 + configFactory . copyRealmFromAssets ( context , " 0841 _ annotationtypes . realm " , " default . realm " ) ; 
 + SharedGroup db = new SharedGroup ( new File ( configFactory . getRoot ( ) , 
 + Realm . DEFAULT _ REALM _ NAME ) . getAbsolutePath ( ) , SharedGroup . Durability . FULL , null ) ; 
 ImplicitTransaction tr = db . beginImplicitTransaction ( ) ; 
 Table t = tr . getTable ( " class _ AnnotationTypes " ) ; 
 assertEquals ( t . getColumnIndex ( " id " ) , t . getPrimaryKey ( ) ) ; 
 @ @ - 423 , 13 + 432 , 14 @ @ public class JNITransactions extends AndroidTestCase { 
 / / In 0 . 84 . 2 , the class names in pk table has been renamed to some incorrect names like " Thclass " , " Mclass " , 
 / / " NClass " , " Meclass " and etc . . 
 / / The 0841 _ pk _ migration . realm is made to produce the issue . 
 - public void testPrimaryKeyTableMigratedWithRightName ( ) throws IOException { 
 + @ Test 
 + public void primaryKeyTableMigratedWithRightName ( ) throws IOException { 
 List < String > tableNames = Arrays . asList ( 
 " ChatList " , " Drafts " , " Member " , " Message " , " Notifs " , " NotifyLink " , " PopularPost " , 
 " Post " , " Tags " , " Threads " , " User " ) ; 
 
 - TestHelper . copyRealmFromAssets ( getContext ( ) , " 0841 _ pk _ migration . realm " , " default . realm " ) ; 
 - SharedGroup db = new SharedGroup ( new File ( getContext ( ) . getFilesDir ( ) , 
 + configFactory . copyRealmFromAssets ( context , " 0841 _ pk _ migration . realm " , " default . realm " ) ; 
 + SharedGroup db = new SharedGroup ( new File ( configFactory . getRoot ( ) , 
 Realm . DEFAULT _ REALM _ NAME ) . getAbsolutePath ( ) , SharedGroup . Durability . FULL , null ) ; 
 
 ImplicitTransaction tr = db . beginImplicitTransaction ( ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 index 8837c97 . . 77b8e69 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 @ @ - 120 , 6 + 120 , 12 @ @ public class TestRealmConfigurationFactory extends TemporaryFolder { 
 / / Copies a Realm file from assets to temp dir 
 public void copyRealmFromAssets ( Context context , String realmPath , String newName ) 
 throws IOException { 
 + / / Delete the existing file before copy 
 + RealmConfiguration configToDelete = new RealmConfiguration . Builder ( getRoot ( ) ) 
 + . name ( newName ) 
 + . build ( ) ; 
 + Realm . deleteRealm ( configToDelete ) ; 
 + 
 AssetManager assetManager = context . getAssets ( ) ; 
 InputStream is = assetManager . open ( realmPath ) ; 
 File file = new File ( getRoot ( ) , newName ) ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - default . realm b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - default . realm 
 new file mode 100644 
 index 0000000 . . d049e3b 
 Binary files / dev / null and b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - default . realm differ 
 diff - - git a / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - max . realm b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - max . realm 
 new file mode 100644 
 index 0000000 . . 0660c84 
 Binary files / dev / null and b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - max . realm differ 
 diff - - git a / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - min . realm b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - min . realm 
 new file mode 100644 
 index 0000000 . . 1002549 
 Binary files / dev / null and b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes - min . realm differ 
 diff - - git a / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes . realm b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes . realm 
 new file mode 100644 
 index 0000000 . . 3f32700 
 Binary files / dev / null and b / realm / src / androidTest / assets / ios / 0 . 90 . 4 - alltypes . realm differ 
 diff - - git a / realm / src / androidTest / assets / ios / README b / realm / src / androidTest / assets / ios / README 
 new file mode 100644 
 index 0000000 . . 0f30efc 
 - - - / dev / null 
 + + + b / realm / src / androidTest / assets / ios / README 
 @ @ - 0 , 0 + 1 , 149 @ @ 
 + This folder contains various Realm databases created on iOS and can be used to test interop with 
 + Realm - Android . 
 + 
 + The databases are generated using the following iOS code : 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / 
 + / / Copyright 2014 Realm Inc . 
 + / / 
 + / / Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + / / you may not use this file except in compliance with the License . 
 + / / You may obtain a copy of the License at 
 + / / 
 + / / http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + / / 
 + / / Unless required by applicable law or agreed to in writing , software 
 + / / distributed under the License is distributed on an " AS IS " BASIS , 
 + / / WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + / / See the License for the specific language governing permissions and 
 + / / limitations under the License . 
 + / / 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + # import " AppDelegate . h " 
 + # import < Realm / Realm . h > 
 + 
 + @ interface IOSChild : RLMObject 
 + @ property NSString * name ; 
 + @ end 
 + RLM _ ARRAY _ TYPE ( IOSChild ) 
 + 
 + @ implementation IOSChild 
 + @ end 
 + 
 + @ interface IOSAllTypes : RLMObject 
 + @ property bool boolCol ; 
 + @ property short shortCol ; 
 + @ property int intCol ; 
 + @ property long longCol ; 
 + @ property float floatCol ; 
 + @ property double doubleCol ; 
 + @ property NSData * byteCol ; 
 + @ property NSString * stringCol ; 
 + @ property NSDate * dateCol ; 
 + @ property IOSChild * child ; 
 + @ property RLMArray < IOSChild > * children ; 
 + @ end 
 + RLM _ ARRAY _ TYPE ( AllTypes ) 
 + 
 + @ implementation IOSAllTypes 
 + / / + ( NSString * ) primaryKey { 
 + / / return @ " longCol " ; 
 + / / } 
 + @ end 
 + 
 + @ implementation AppDelegate 
 + 
 + - ( BOOL ) application : ( UIApplication * ) application didFinishLaunchingWithOptions : ( NSDictionary * ) launchOptions 
 + { 
 + self . window = [ [ UIWindow alloc ] initWithFrame : [ [ UIScreen mainScreen ] bounds ] ] ; 
 + self . window . rootViewController = [ [ UIViewController alloc ] init ] ; 
 + [ self . window makeKeyAndVisible ] ; 
 + 
 + const unsigned char no _ bytes [ ] = { } ; 
 + const unsigned char bytes [ ] = { 1 , 2 , 3 } ; 
 + 
 + [ AppDelegate setDefaultRealm : @ " 0 . 90 . 4 - alltypes . realm " ] ; 
 + RLMRealm * realm = [ RLMRealm defaultRealm ] ; 
 + [ realm beginWriteTransaction ] ; 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + IOSAllTypes * obj = [ [ IOSAllTypes alloc ] init ] ; 
 + obj . boolCol = TRUE ; 
 + obj . shortCol = 1 + i ; 
 + obj . intCol = 10 + i ; 
 + obj . longCol = 100 + i ; 
 + obj . floatCol = 1 . 23 + i ; 
 + obj . doubleCol = 1 . 234 + i ; 
 + obj . byteCol = [ NSData dataWithBytes : bytes length : sizeof ( bytes ) ] ; 
 + obj . stringCol = [ NSString stringWithFormat : @ " % @ % d " , @ " String " , i ] ; 
 + obj . dateCol = [ NSDate dateWithTimeIntervalSince1970 : ( 1000 + i ) ] ; 
 + 
 + obj . child = [ [ IOSChild alloc ] init ] ; 
 + obj . child . name = @ " Foo " ; 
 + for ( int j = 0 ; j < 10 ; j + + ) { 
 + IOSChild * c = [ [ IOSChild alloc ] init ] ; 
 + c . name = [ NSString stringWithFormat : @ " Name : % d " , i ] ; 
 + [ obj . children addObject : c ] ; 
 + } 
 + [ realm addObject : obj ] ; 
 + } 
 + [ realm commitWriteTransaction ] ; 
 + 
 + 
 + [ AppDelegate setDefaultRealm : @ " 0 . 90 . 4 - alltypes - default . realm " ] ; 
 + realm = [ RLMRealm defaultRealm ] ; 
 + [ realm beginWriteTransaction ] ; 
 + IOSAllTypes * obj = [ [ IOSAllTypes alloc ] init ] ; 
 + obj . byteCol = [ NSData dataWithBytes : no _ bytes length : sizeof ( no _ bytes ) ] ; 
 + obj . stringCol = @ " " ; 
 + obj . dateCol = [ NSDate dateWithTimeIntervalSince1970 : 0 ] ; 
 + [ realm addObject : obj ] ; 
 + [ realm commitWriteTransaction ] ; 
 + 
 + 
 + [ AppDelegate setDefaultRealm : @ " 0 . 90 . 4 - alltypes - min . realm " ] ; 
 + realm = [ RLMRealm defaultRealm ] ; 
 + [ realm beginWriteTransaction ] ; 
 + obj = [ [ IOSAllTypes alloc ] init ] ; 
 + obj . boolCol = FALSE ; 
 + obj . shortCol = SHRT _ MIN ; 
 + obj . intCol = INT _ MIN ; 
 + obj . longCol = LONG _ MIN ; 
 + obj . floatCol = FLT _ MIN ; 
 + obj . doubleCol = DBL _ MIN ; 
 + obj . byteCol = [ NSData dataWithBytes : no _ bytes length : sizeof ( no _ bytes ) ] ; 
 + obj . stringCol = @ " " ; 
 + obj . dateCol = [ NSDate dateWithTimeIntervalSince1970 : 0 ] ; 
 + [ realm addObject : obj ] ; 
 + [ realm commitWriteTransaction ] ; 
 + 
 + 
 + [ AppDelegate setDefaultRealm : @ " 0 . 90 . 4 - alltypes - max . realm " ] ; 
 + realm = [ RLMRealm defaultRealm ] ; 
 + [ realm beginWriteTransaction ] ; 
 + obj = [ [ IOSAllTypes alloc ] init ] ; 
 + obj . boolCol = TRUE ; 
 + obj . shortCol = SHRT _ MAX ; 
 + obj . intCol = INT _ MAX ; 
 + obj . longCol = LONG _ MAX ; 
 + obj . floatCol = FLT _ MAX ; 
 + obj . doubleCol = DBL _ MAX ; 
 + obj . byteCol = [ NSData dataWithBytes : no _ bytes length : sizeof ( no _ bytes ) ] ; 
 + obj . stringCol = @ " " ; 
 + obj . dateCol = [ NSDate dateWithTimeIntervalSince1970 : LONG _ MAX ] ; 
 + [ realm addObject : obj ] ; 
 + [ realm commitWriteTransaction ] ; 
 + 
 + NSLog ( @ " Done " ) ; 
 + return YES ; 
 + } 
 + 
 + + ( void ) setDefaultRealm : ( NSString * ) realmName 
 + { 
 + NSString * documentsDirectory = [ NSSearchPathForDirectoriesInDomains ( NSDocumentDirectory , NSUserDomainMask , YES ) objectAtIndex : 0 ] ; 
 + NSString * allTypesRealm = [ documentsDirectory stringByAppendingPathComponent : realmName ] ; 
 + [ RLMRealm setDefaultRealmPath : allTypesRealm ] ; 
 + [ [ NSFileManager defaultManager ] removeItemAtPath : [ RLMRealm defaultRealmPath ] error : nil ] ; 
 + } 
 + @ end 
 diff - - git a / realm / src / androidTest / java / io / realm / IOSRealmTests . java b / realm / src / androidTest / java / io / realm / IOSRealmTests . java 
 new file mode 100644 
 index 0000000 . . c89aa0d 
 - - - / dev / null 
 + + + b / realm / src / androidTest / java / io / realm / IOSRealmTests . java 
 @ @ - 0 , 0 + 1 , 99 @ @ 
 + package io . realm ; 
 + 
 + import android . test . AndroidTestCase ; 
 + 
 + import java . io . IOException ; 
 + import java . util . Date ; 
 + 
 + import io . realm . entities . IOSAllTypes ; 
 + import io . realm . entities . IOSChild ; 
 + 
 + import static io . realm . internal . test . ExtraTests . assertArrayEquals ; 
 + 
 + / * * 
 + * This class test interoperability with Realms created on iOS . 
 + * / 
 + public class IOSRealmTests extends AndroidTestCase { 
 + 
 + private static final String REALM _ NAME = " alltypes . realm " ; 
 + private Realm realm ; 
 + 
 + @ Override 
 + protected void setUp ( ) throws Exception { 
 + super . setUp ( ) ; 
 + Realm . setSchema ( IOSAllTypes . class , IOSChild . class ) ; 
 + } 
 + 
 + @ Override 
 + protected void tearDown ( ) throws Exception { 
 + super . tearDown ( ) ; 
 + Realm . setSchema ( null ) ; 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + } 
 + } 
 + 
 + / / Test relationships and that data in general can be retrieved from an iOS realm 
 + public void testIOSDatatypes ( ) throws IOException { 
 + TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / 0 . 90 . 4 - alltypes . realm " , REALM _ NAME ) ; 
 + realm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; 
 + RealmResults < IOSAllTypes > result = realm . allObjectsSorted ( IOSAllTypes . class , " longCol " , RealmResults . SORT _ ORDER _ ASCENDING ) ; 
 + 
 + IOSAllTypes obj = result . get ( 1 ) ; 
 + assertTrue ( obj . isBoolCol ( ) ) ; 
 + assertEquals ( 2 , obj . getShortCol ( ) ) ; 
 + assertEquals ( 11 , obj . getIntCol ( ) ) ; 
 + assertEquals ( 101L , obj . getLongCol ( ) ) ; 
 + assertEquals ( 2 . 23F , obj . getFloatCol ( ) ) ; 
 + assertEquals ( 2 . 234D , obj . getDoubleCol ( ) ) ; 
 + assertArrayEquals ( new byte [ ] { 1 , 2 , 3 } , obj . getByteCol ( ) ) ; 
 + assertEquals ( " String 1 " , obj . getStringCol ( ) ) ; 
 + assertEquals ( new Date ( 1001 * 1000 ) , obj . getDateCol ( ) ) ; 
 + assertEquals ( " Foo " , result . get ( 1 ) . getChild ( ) . getName ( ) ) ; 
 + assertEquals ( 10 , result . size ( ) ) ; 
 + assertEquals ( 10 , result . get ( 1 ) . getChildren ( ) . size ( ) ) ; 
 + assertEquals ( " Name : 1 " , result . get ( 1 ) . getChildren ( ) . get ( 1 ) . getName ( ) ) ; 
 + } 
 + 
 + public void testIOSDatatypesDefaultValues ( ) throws IOException { 
 + TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / 0 . 90 . 4 - alltypes - default . realm " , REALM _ NAME ) ; 
 + realm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; 
 + 
 + IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; 
 + assertFalse ( obj . isBoolCol ( ) ) ; 
 + assertEquals ( 0 , obj . getShortCol ( ) ) ; 
 + assertEquals ( 0 , obj . getIntCol ( ) ) ; 
 + assertEquals ( 0L , obj . getLongCol ( ) ) ; 
 + assertEquals ( 0 . 0F , obj . getFloatCol ( ) ) ; 
 + assertEquals ( 0 . 0D , obj . getDoubleCol ( ) ) ; 
 + assertArrayEquals ( new byte [ 0 ] , obj . getByteCol ( ) ) ; 
 + assertEquals ( " " , obj . getStringCol ( ) ) ; 
 + assertEquals ( new Date ( 0 ) , obj . getDateCol ( ) ) ; 
 + assertNull ( obj . getChild ( ) ) ; 
 + assertEquals ( 0 , obj . getChildren ( ) . size ( ) ) ; 
 + } 
 + 
 + public void testIOSDatatypesMinimumValues ( ) throws IOException { 
 + TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / 0 . 90 . 4 - alltypes - min . realm " , REALM _ NAME ) ; 
 + realm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; 
 + 
 + IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; 
 + assertEquals ( Short . MIN _ VALUE , obj . getShortCol ( ) ) ; 
 + assertEquals ( Integer . MIN _ VALUE , obj . getIntCol ( ) ) ; 
 + assertEquals ( Long . MIN _ VALUE , obj . getLongCol ( ) ) ; 
 + assertEquals ( Float . MIN _ NORMAL , obj . getFloatCol ( ) ) ; 
 + assertEquals ( Double . MIN _ NORMAL , obj . getDoubleCol ( ) ) ; 
 + } 
 + 
 + public void testIOSDatatypesMaximumValues ( ) throws IOException { 
 + TestHelper . prepareDatabaseFromAssets ( getContext ( ) , " ios / 0 . 90 . 4 - alltypes - max . realm " , REALM _ NAME ) ; 
 + realm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; 
 + 
 + IOSAllTypes obj = realm . allObjects ( IOSAllTypes . class ) . first ( ) ; 
 + assertEquals ( Short . MAX _ VALUE , obj . getShortCol ( ) ) ; 
 + assertEquals ( Integer . MAX _ VALUE , obj . getIntCol ( ) ) ; 
 + assertEquals ( Long . MAX _ VALUE , obj . getLongCol ( ) ) ; 
 + assertEquals ( Float . MAX _ VALUE , obj . getFloatCol ( ) ) ; 
 + assertEquals ( Double . MAX _ VALUE , obj . getDoubleCol ( ) ) ; 
 + } 
 + } 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / src / androidTest / java / io / realm / RealmMigrationTests . java 
 index c798a35 . . 680965a 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmMigrationTests . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmMigrationTests . java 
 @ @ - 1 , 37 + 1 , 18 @ @ 
 package io . realm ; 
 
 - import android . content . res . AssetManager ; 
 import android . test . AndroidTestCase ; 
 
 - import java . io . File ; 
 - import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 - import java . io . InputStream ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 
 public class RealmMigrationTests extends AndroidTestCase { 
 
 - / / Copies a Realm file from assets to app files dir 
 - private void copyRealmFromAssets ( String fileName ) throws IOException { 
 - AssetManager assetManager = getContext ( ) . getAssets ( ) ; 
 - InputStream is = assetManager . open ( fileName ) ; 
 - File file = new File ( getContext ( ) . getFilesDir ( ) , fileName ) ; 
 - FileOutputStream outputStream = new FileOutputStream ( file ) ; 
 - byte [ ] buf = new byte [ 1024 ] ; 
 - int bytesRead ; 
 - while ( ( bytesRead = is . read ( buf ) ) > - 1 ) { 
 - outputStream . write ( buf , 0 , bytesRead ) ; 
 - } 
 - outputStream . close ( ) ; 
 - is . close ( ) ; 
 - } 
 - 
 public void testRealmClosedAfterMigrationException ( ) throws IOException { 
 String REALM _ NAME = " default0 . realm " ; 
 Realm . deleteRealmFile ( getContext ( ) , REALM _ NAME ) ; 
 - copyRealmFromAssets ( REALM _ NAME ) ; 
 + TestHelper . copyRealmFromAssets ( getContext ( ) , REALM _ NAME , REALM _ NAME ) ; 
 try { 
 Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; 
 fail ( " A migration should be triggered " ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / TestHelper . java b / realm / src / androidTest / java / io / realm / TestHelper . java 
 index fb2bd93 . . 5d1d27a 100644 
 - - - a / realm / src / androidTest / java / io / realm / TestHelper . java 
 + + + b / realm / src / androidTest / java / io / realm / TestHelper . java 
 @ @ - 16 , 6 + 16 , 14 @ @ 
 
 package io . realm ; 
 
 + import android . content . Context ; 
 + import android . content . res . AssetManager ; 
 + 
 + import java . io . File ; 
 + import java . io . FileOutputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + 
 import io . realm . entities . AllTypes ; 
 
 public class TestHelper { 
 @ @ - 35 , 4 + 43 , 25 @ @ public class TestHelper { 
 object3 . setColumnString ( " Adam " ) ; 
 testRealm . commitTransaction ( ) ; 
 } 
 + 
 + / / Copies a Realm file from assets to app files dir 
 + public static void copyRealmFromAssets ( Context context , String realmPath , String newName ) throws IOException { 
 + AssetManager assetManager = context . getAssets ( ) ; 
 + InputStream is = assetManager . open ( realmPath ) ; 
 + File file = new File ( context . getFilesDir ( ) , newName ) ; 
 + FileOutputStream outputStream = new FileOutputStream ( file ) ; 
 + byte [ ] buf = new byte [ 1024 ] ; 
 + int bytesRead ; 
 + while ( ( bytesRead = is . read ( buf ) ) > - 1 ) { 
 + outputStream . write ( buf , 0 , bytesRead ) ; 
 + } 
 + outputStream . close ( ) ; 
 + is . close ( ) ; 
 + } 
 + 
 + / / Deletes the old database and copies a new one into its place 
 + public static void prepareDatabaseFromAssets ( Context context , String realmPath , String newName ) throws IOException { 
 + Realm . deleteRealmFile ( context , newName ) ; 
 + TestHelper . copyRealmFromAssets ( context , realmPath , newName ) ; 
 + } 
 } 
 diff - - git a / realm / src / androidTest / java / io / realm / entities / IOSAllTypes . java b / realm / src / androidTest / java / io / realm / entities / IOSAllTypes . java 
 new file mode 100644 
 index 0000000 . . 14fb439 
 - - - / dev / null 
 + + + b / realm / src / androidTest / java / io / realm / entities / IOSAllTypes . java 
 @ @ - 0 , 0 + 1 , 109 @ @ 
 + package io . realm . entities ; 
 + 
 + import java . util . Date ; 
 + 
 + import io . realm . RealmList ; 
 + import io . realm . RealmObject ; 
 + 
 + public class IOSAllTypes extends RealmObject { 
 + 
 + private boolean boolCol ; 
 + private short shortCol ; 
 + private int intCol ; 
 + private long longCol ; 
 + private float floatCol ; 
 + private double doubleCol ; 
 + private byte [ ] byteCol ; 
 + private String stringCol ; 
 + private Date dateCol ; 
 + private IOSChild child ; 
 + private RealmList < IOSChild > children ; 
 + 
 + public boolean isBoolCol ( ) { 
 + return boolCol ; 
 + } 
 + 
 + public void setBoolCol ( boolean boolCol ) { 
 + this . boolCol = boolCol ; 
 + } 
 + 
 + public short getShortCol ( ) { 
 + return shortCol ; 
 + } 
 + 
 + public void setShortCol ( short shortCol ) { 
 + this . shortCol = shortCol ; 
 + } 
 + 
 + public int getIntCol ( ) { 
 + return intCol ; 
 + } 
 + 
 + public void setIntCol ( int intCol ) { 
 + this . intCol = intCol ; 
 + } 
 + 
 + public long getLongCol ( ) { 
 + return longCol ; 
 + } 
 + 
 + public void setLongCol ( long longCol ) { 
 + this . longCol = longCol ; 
 + } 
 + 
 + public float getFloatCol ( ) { 
 + return floatCol ; 
 + } 
 + 
 + public void setFloatCol ( float floatCol ) { 
 + this . floatCol = floatCol ; 
 + } 
 + 
 + public double getDoubleCol ( ) { 
 + return doubleCol ; 
 + } 
 + 
 + public void setDoubleCol ( double doubleCol ) { 
 + this . doubleCol = doubleCol ; 
 + } 
 + 
 + public byte [ ] getByteCol ( ) { 
 + return byteCol ; 
 + } 
 + 
 + public void setByteCol ( byte [ ] byteCol ) { 
 + this . byteCol = byteCol ; 
 + } 
 + 
 + public String getStringCol ( ) { 
 + return stringCol ; 
 + } 
 + 
 + public void setStringCol ( String stringCol ) { 
 + this . stringCol = stringCol ; 
 + } 
 + 
 + public Date getDateCol ( ) { 
 + return dateCol ; 
 + } 
 + 
 + public void setDateCol ( Date dateCol ) { 
 + this . dateCol = dateCol ; 
 + } 
 + 
 + public IOSChild getChild ( ) { 
 + return child ; 
 + } 
 + 
 + public void setChild ( IOSChild child ) { 
 + this . child = child ; 
 + } 
 + 
 + public RealmList < IOSChild > getChildren ( ) { 
 + return children ; 
 + } 
 + 
 + public void setChildren ( RealmList < IOSChild > children ) { 
 + this . children = children ; 
 + } 
 + } 
 diff - - git a / realm / src / androidTest / java / io / realm / entities / IOSChild . java b / realm / src / androidTest / java / io / realm / entities / IOSChild . java 
 new file mode 100644 
 index 0000000 . . f041de1 
 - - - / dev / null 
 + + + b / realm / src / androidTest / java / io / realm / entities / IOSChild . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package io . realm . entities ; 
 + 
 + import io . realm . RealmObject ; 
 + 
 + public class IOSChild extends RealmObject { 
 + private String name ; 
 + 
 + public String getName ( ) { 
 + return name ; 
 + } 
 + 
 + public void setName ( String name ) { 
 + this . name = name ; 
 + } 
 + } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 389e5c8 . . ffd4696 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 40 , 8 + 40 , 10 @ @ import java . lang . reflect . Method ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . HashMap ; 
 + import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . UUID ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 @ @ - 164 , 6 + 166 , 7 @ @ public final class Realm implements Closeable { 
 private final Map < Class < ? > , Constructor > generatedConstructors = new HashMap < Class < ? > , Constructor > ( ) ; 
 private final List < RealmChangeListener > changeListeners = new ArrayList < RealmChangeListener > ( ) ; 
 private final Map < Class < ? > , Table > tables = new HashMap < Class < ? > , Table > ( ) ; 
 + private static final Set < Class < ? extends RealmObject > > customSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; 
 private static final long UNVERSIONED = - 1 ; 
 
 / / Package protected to be reachable by proxy classes 
 @ @ - 539 , 6 + 542 , 14 @ @ public final class Realm implements Closeable { 
 throw new RealmException ( " An exception was thrown in the getProxyClasses method in the ValidationList class : " + APT _ NOT _ EXECUTED _ MESSAGE ) ; 
 } 
 
 + / / Custom schema overrides any schema already defined 
 + if ( customSchema . size ( ) > 0 ) { 
 + proxyClasses = new ArrayList < String > ( ) ; 
 + for ( Class < ? extends RealmObject > clazz : customSchema ) { 
 + proxyClasses . add ( clazz . getName ( ) ) ; 
 + } 
 + } 
 + 
 long version = realm . getVersion ( ) ; 
 boolean commitNeeded = false ; 
 try { 
 @ @ - 1538 , 6 + 1549 , 25 @ @ public final class Realm implements Closeable { 
 return path ; 
 } 
 
 + 
 + / * * 
 + * Override the standard behavior of all classes extended RealmObject being part of the schema . 
 + * Use this method to define the schema as only the classes given here . 
 + * 
 + * This class must be called before calling { @ link # getInstance ( android . content . Context ) } 
 + * 
 + * If { @ code null } is given as parameter , the Schema is reset to use all known classes . 
 + * 
 + * / 
 + public static void setSchema ( Class < ? extends RealmObject > . . . schemaClass ) { 
 + customSchema . clear ( ) ; 
 + if ( schemaClass ! = null ) { 
 + for ( int i = 0 ; i < schemaClass . length ; i + + ) { 
 + customSchema . add ( schemaClass [ i ] ) ; 
 + } 
 + } 
 + } 
 + 
 / * * 
 * Encapsulates a Realm transaction . 
 * 
 diff - - git a / settings . gradle b / settings . gradle 
 index d0eb928 . . 698a425 100644 
 - - - a / settings . gradle 
 + + + b / settings . gradle 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 / / Realm projects 
 - include ' realm ' 
 + include ' realm ' , ' : realm - annotations - processor ' 
 
 / / Example projects 
 include ' : introExample ' ,
