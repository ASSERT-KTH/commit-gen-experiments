BLEU SCORE: 0.08310415003234632

TEST MSG: fix failing tests
GENERATED MSG: Take latches for RunInLooperThread . testComplete

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> index 8210be8 . . 95e84c9 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> @ @ - 188 , 6 + 188 , 8 @ @ public class RealmSchemaTests { <nl> assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> <nl> + realmSchema . remove ( validClassName ) ; <nl> + <nl> / / Nullable <nl> realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , String . class ) ; <nl> objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> @ @ - 222 , 6 + 224 , 8 @ @ public class RealmSchemaTests { <nl> assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> <nl> + realmSchema . remove ( validClassName ) ; <nl> + <nl> / / Nullable <nl> realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class ) ; <nl> objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> @ @ - 256 , 6 + 260 , 8 @ @ public class RealmSchemaTests { <nl> assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> <nl> + realmSchema . remove ( validClassName ) ; <nl> + <nl> / / Nullable <nl> realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class ) ; <nl> objectSchema = realmSchema . getSchemaForClass ( validClassName ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> index 0c9df91 . . de19df8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> @ @ - 1616 , 6 + 1616 , 7 @ @ public class RealmAsyncQueryTests { <nl> looperThread . keepStrongReference . add ( findDistinct ) ; <nl> <nl> final CountDownLatch queriesCompleted = new CountDownLatch ( 4 ) ; <nl> + final CountDownLatch bgRealmClosedLatch = new CountDownLatch ( 1 ) ; <nl> final AtomicInteger batchUpdateCompleted = new AtomicInteger ( 0 ) ; <nl> final AtomicInteger findAllAsyncInvocation = new AtomicInteger ( 0 ) ; <nl> final AtomicInteger findAllSortedInvocation = new AtomicInteger ( 0 ) ; <nl> @ @ - 1632 , 7 + 1633 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> case 2 : { <nl> if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { <nl> - looperThread . testComplete ( ) ; <nl> + looperThread . testComplete ( bgRealmClosedLatch ) ; <nl> } <nl> break ; <nl> } <nl> @ @ - 1650 , 7 + 1651 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> case 2 : { <nl> if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { <nl> - looperThread . testComplete ( ) ; <nl> + looperThread . testComplete ( bgRealmClosedLatch ) ; <nl> } <nl> break ; <nl> } <nl> @ @ - 1668 , 7 + 1669 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> case 2 : { <nl> if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { <nl> - looperThread . testComplete ( ) ; <nl> + looperThread . testComplete ( bgRealmClosedLatch ) ; <nl> } <nl> break ; <nl> } <nl> @ @ - 1686 , 7 + 1687 , 7 @ @ public class RealmAsyncQueryTests { <nl> } <nl> case 2 : { <nl> if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { <nl> - looperThread . testComplete ( ) ; <nl> + looperThread . testComplete ( bgRealmClosedLatch ) ; <nl> } <nl> break ; <nl> } <nl> @ @ - 1709 , 6 + 1710 , 7 @ @ public class RealmAsyncQueryTests { <nl> bgRealm . commitTransaction ( ) ; <nl> <nl> bgRealm . close ( ) ; <nl> + bgRealmClosedLatch . countDown ( ) ; <nl> } catch ( InterruptedException e ) { <nl> fail ( e . getMessage ( ) ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> index 725fde8 . . 5b6b5a8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> @ @ - 1288 , 6 + 1288 , 7 @ @ public class TypeBasedNotificationsTests { <nl> typebasedCommitInvocations . incrementAndGet ( ) ; <nl> if ( typebasedCommitInvocations . get ( ) = = 1 ) { <nl> / / COMPLETED _ ASYNC _ REALM _ RESULTS arrived <nl> + thread . start ( ) ; <nl> try { <nl> thread . join ( ) ; <nl> } catch ( InterruptedException e ) { <nl> @ @ - 1296 , 8 + 1297 , 6 @ @ public class TypeBasedNotificationsTests { <nl> } <nl> } <nl> } ) ; <nl> - <nl> - thread . start ( ) ; <nl> } <nl> <nl> / / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * / / <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> index 2b5d7a3 . . 8420c4c 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> @ @ - 164 , 6 + 164 , 18 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { <nl> } <nl> <nl> / * * <nl> + * Signal that the test has completed . <nl> + * <nl> + * @ param latches additional latches to wait before set the test completed flag . <nl> + * / <nl> + public void testComplete ( CountDownLatch . . . latches ) { <nl> + for ( CountDownLatch latch : latches ) { <nl> + TestHelper . awaitOrFail ( latch ) ; <nl> + } <nl> + signalTestCompleted . countDown ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Posts a runnable to this worker threads looper . <nl> * / <nl> public void postRunnable ( Runnable runnable ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 index 8210be8 . . 95e84c9 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 @ @ - 188 , 6 + 188 , 8 @ @ public class RealmSchemaTests { 
 assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 
 + realmSchema . remove ( validClassName ) ; 
 + 
 / / Nullable 
 realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , String . class ) ; 
 objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 @ @ - 222 , 6 + 224 , 8 @ @ public class RealmSchemaTests { 
 assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 
 + realmSchema . remove ( validClassName ) ; 
 + 
 / / Nullable 
 realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class ) ; 
 objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 @ @ - 256 , 6 + 260 , 8 @ @ public class RealmSchemaTests { 
 assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 
 + realmSchema . remove ( validClassName ) ; 
 + 
 / / Nullable 
 realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class ) ; 
 objectSchema = realmSchema . getSchemaForClass ( validClassName ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 index 0c9df91 . . de19df8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 @ @ - 1616 , 6 + 1616 , 7 @ @ public class RealmAsyncQueryTests { 
 looperThread . keepStrongReference . add ( findDistinct ) ; 
 
 final CountDownLatch queriesCompleted = new CountDownLatch ( 4 ) ; 
 + final CountDownLatch bgRealmClosedLatch = new CountDownLatch ( 1 ) ; 
 final AtomicInteger batchUpdateCompleted = new AtomicInteger ( 0 ) ; 
 final AtomicInteger findAllAsyncInvocation = new AtomicInteger ( 0 ) ; 
 final AtomicInteger findAllSortedInvocation = new AtomicInteger ( 0 ) ; 
 @ @ - 1632 , 7 + 1633 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 case 2 : { 
 if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { 
 - looperThread . testComplete ( ) ; 
 + looperThread . testComplete ( bgRealmClosedLatch ) ; 
 } 
 break ; 
 } 
 @ @ - 1650 , 7 + 1651 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 case 2 : { 
 if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { 
 - looperThread . testComplete ( ) ; 
 + looperThread . testComplete ( bgRealmClosedLatch ) ; 
 } 
 break ; 
 } 
 @ @ - 1668 , 7 + 1669 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 case 2 : { 
 if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { 
 - looperThread . testComplete ( ) ; 
 + looperThread . testComplete ( bgRealmClosedLatch ) ; 
 } 
 break ; 
 } 
 @ @ - 1686 , 7 + 1687 , 7 @ @ public class RealmAsyncQueryTests { 
 } 
 case 2 : { 
 if ( batchUpdateCompleted . incrementAndGet ( ) = = 4 ) { 
 - looperThread . testComplete ( ) ; 
 + looperThread . testComplete ( bgRealmClosedLatch ) ; 
 } 
 break ; 
 } 
 @ @ - 1709 , 6 + 1710 , 7 @ @ public class RealmAsyncQueryTests { 
 bgRealm . commitTransaction ( ) ; 
 
 bgRealm . close ( ) ; 
 + bgRealmClosedLatch . countDown ( ) ; 
 } catch ( InterruptedException e ) { 
 fail ( e . getMessage ( ) ) ; 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 index 725fde8 . . 5b6b5a8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 @ @ - 1288 , 6 + 1288 , 7 @ @ public class TypeBasedNotificationsTests { 
 typebasedCommitInvocations . incrementAndGet ( ) ; 
 if ( typebasedCommitInvocations . get ( ) = = 1 ) { 
 / / COMPLETED _ ASYNC _ REALM _ RESULTS arrived 
 + thread . start ( ) ; 
 try { 
 thread . join ( ) ; 
 } catch ( InterruptedException e ) { 
 @ @ - 1296 , 8 + 1297 , 6 @ @ public class TypeBasedNotificationsTests { 
 } 
 } 
 } ) ; 
 - 
 - thread . start ( ) ; 
 } 
 
 / / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * / / 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 index 2b5d7a3 . . 8420c4c 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 @ @ - 164 , 6 + 164 , 18 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { 
 } 
 
 / * * 
 + * Signal that the test has completed . 
 + * 
 + * @ param latches additional latches to wait before set the test completed flag . 
 + * / 
 + public void testComplete ( CountDownLatch . . . latches ) { 
 + for ( CountDownLatch latch : latches ) { 
 + TestHelper . awaitOrFail ( latch ) ; 
 + } 
 + signalTestCompleted . countDown ( ) ; 
 + } 
 + 
 + / * * 
 * Posts a runnable to this worker threads looper . 
 * / 
 public void postRunnable ( Runnable runnable ) {
