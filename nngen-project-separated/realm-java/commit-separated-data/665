BLEU SCORE: 0.021906016114066472

TEST MSG: Updated beginTransaction doc
GENERATED MSG: Don ' t use < p / > in javadoc

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 16cc744 . . 3de7695 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 309 , 8 + 309 , 27 @ @ abstract class BaseRealm implements Closeable { <nl> * { @ link io . realm . Realm # cancelTransaction ( ) } . Transactions are used to atomically create , update and delete objects <nl> * within a Realm . <nl> * < p > <nl> - * Before beginning the transaction , { @ link io . realm . Realm # beginTransaction ( ) } updates the Realm in the case of <nl> - * pending updates from other threads . <nl> + * Before beginning a transaction , the Realm instance is updated to the latest version in order to include all <nl> + * changes from other threads . This update does not trigger any registered { @ link RealmChangeListener } . <nl> + * < p > <nl> + * It is therefore recommended to query for the items that should be modified from inside the transaction . Otherwise <nl> + * there is a risk that some of the results have been deleted or modified when the transaction begins . <nl> + * < p > <nl> + * < pre > <nl> + * { @ code <nl> + * / / Don ' t do this <nl> + * RealmResults < Person > persons = realm . where ( Person . class ) . findAll ( ) ; <nl> + * realm . beginTransaction ( ) ; <nl> + * persons . first ( ) . setName ( " John " ) ; <nl> + * realm . commitTransaction ; <nl> + * <nl> + * / / Do this instead <nl> + * realm . beginTransaction ( ) ; <nl> + * RealmResults < Person > persons = realm . where ( Person . class ) . findAll ( ) ; <nl> + * persons . first ( ) . setName ( " John " ) ; <nl> + * realm . commitTransaction ; <nl> + * } <nl> + * < / pre > <nl> * < p > <nl> * Notice : it is not possible to nest transactions . If you start a transaction within a transaction an exception is <nl> * thrown .
NEAREST DIFF (one line): diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index d5491a0 . . 0e1644a 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 47 , 10 + 47 , 10 @ @ import io . realm . internal . android . LooperThread ; <nl> * The Realm class is the storage and transactional manager of your object persistent store . Objects <nl> * are created . Objects within a Realm can be queried and read at any time . Creating , <nl> * modifying , and deleting objects must be done through transactions . <nl> - * < p / > <nl> + * < br > <nl> * The transactions ensure that multiple instances ( on multiple threads ) can access the objects <nl> * in a consistent state with full ACID guaranties . <nl> - * < p / > <nl> + * < br > <nl> * The instances of a Realm will be automatically updated when one instance commits a <nl> * change ( create , modify or delete an object ) . <nl> * / <nl> @ @ - 566 , 13 + 566 , 13 @ @ public class Realm { <nl> * Starts a write transaction , this must be closed with { @ link io . realm . Realm # commitTransaction ( ) } <nl> * or aborted by @ { link io . realm . Realm # cancelTransaction ( ) } . Write transactions are used to <nl> * atomically create , update and delete objects within a realm . <nl> - * < p / > <nl> + * < br > <nl> * Before beginning the write transaction , @ { link io . realm . Realm # beginTransaction ( ) } updates the <nl> * realm in the case of pending updates from other threads . <nl> - * < p / > <nl> + * < br > <nl> * Notice : it is not possible to nest write transactions . If you start a write <nl> * transaction within a write transaction an exception is thrown . <nl> - * < p / > <nl> + * < br > <nl> * @ throws java . lang . IllegalStateException If already in a write transaction . <nl> * <nl> * / <nl> @ @ - 605 , 9 + 605 , 9 @ @ public class Realm { <nl> / * * <nl> * Revert all writes ( created , updated , or deleted objects ) made in the current write <nl> * transaction and end the transaction . <nl> - * < p / > <nl> + * < br > <nl> * The realm reverts back to read - only . <nl> - * < p / > <nl> + * < br > <nl> * Calling this when not in a write transaction will throw an exception . <nl> * <nl> * @ throws java . lang . IllegalStateException If the write transaction is an invalid state or <nl> diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java <nl> index 7bc592a . . 0a69e12 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / src / main / java / io / realm / RealmObject . java <nl> @ @ - 23 , 11 + 23 , 11 @ @ import io . realm . annotations . RealmClass ; <nl> * In Realm you define your model classes by subclassing RealmObject and adding fields to be <nl> * persisted . You then create your objects within a Realm , and use your custom subclasses instead <nl> * of using the RealmObject class directly . <nl> - * < p / > <nl> + * < br > <nl> * An annotation processor will create a proxy class for your RealmObject subclass . The getters and <nl> * setters should not contain any custom code of logic as they are overridden as part of the annotation <nl> * process . <nl> - * < p / > <nl> + * < br > <nl> * @ see Realm # createObject ( Class ) <nl> * / <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 16cc744 . . 3de7695 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 309 , 8 + 309 , 27 @ @ abstract class BaseRealm implements Closeable { 
 * { @ link io . realm . Realm # cancelTransaction ( ) } . Transactions are used to atomically create , update and delete objects 
 * within a Realm . 
 * < p > 
 - * Before beginning the transaction , { @ link io . realm . Realm # beginTransaction ( ) } updates the Realm in the case of 
 - * pending updates from other threads . 
 + * Before beginning a transaction , the Realm instance is updated to the latest version in order to include all 
 + * changes from other threads . This update does not trigger any registered { @ link RealmChangeListener } . 
 + * < p > 
 + * It is therefore recommended to query for the items that should be modified from inside the transaction . Otherwise 
 + * there is a risk that some of the results have been deleted or modified when the transaction begins . 
 + * < p > 
 + * < pre > 
 + * { @ code 
 + * / / Don ' t do this 
 + * RealmResults < Person > persons = realm . where ( Person . class ) . findAll ( ) ; 
 + * realm . beginTransaction ( ) ; 
 + * persons . first ( ) . setName ( " John " ) ; 
 + * realm . commitTransaction ; 
 + * 
 + * / / Do this instead 
 + * realm . beginTransaction ( ) ; 
 + * RealmResults < Person > persons = realm . where ( Person . class ) . findAll ( ) ; 
 + * persons . first ( ) . setName ( " John " ) ; 
 + * realm . commitTransaction ; 
 + * } 
 + * < / pre > 
 * < p > 
 * Notice : it is not possible to nest transactions . If you start a transaction within a transaction an exception is 
 * thrown .

NEAREST DIFF:
diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index d5491a0 . . 0e1644a 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 47 , 10 + 47 , 10 @ @ import io . realm . internal . android . LooperThread ; 
 * The Realm class is the storage and transactional manager of your object persistent store . Objects 
 * are created . Objects within a Realm can be queried and read at any time . Creating , 
 * modifying , and deleting objects must be done through transactions . 
 - * < p / > 
 + * < br > 
 * The transactions ensure that multiple instances ( on multiple threads ) can access the objects 
 * in a consistent state with full ACID guaranties . 
 - * < p / > 
 + * < br > 
 * The instances of a Realm will be automatically updated when one instance commits a 
 * change ( create , modify or delete an object ) . 
 * / 
 @ @ - 566 , 13 + 566 , 13 @ @ public class Realm { 
 * Starts a write transaction , this must be closed with { @ link io . realm . Realm # commitTransaction ( ) } 
 * or aborted by @ { link io . realm . Realm # cancelTransaction ( ) } . Write transactions are used to 
 * atomically create , update and delete objects within a realm . 
 - * < p / > 
 + * < br > 
 * Before beginning the write transaction , @ { link io . realm . Realm # beginTransaction ( ) } updates the 
 * realm in the case of pending updates from other threads . 
 - * < p / > 
 + * < br > 
 * Notice : it is not possible to nest write transactions . If you start a write 
 * transaction within a write transaction an exception is thrown . 
 - * < p / > 
 + * < br > 
 * @ throws java . lang . IllegalStateException If already in a write transaction . 
 * 
 * / 
 @ @ - 605 , 9 + 605 , 9 @ @ public class Realm { 
 / * * 
 * Revert all writes ( created , updated , or deleted objects ) made in the current write 
 * transaction and end the transaction . 
 - * < p / > 
 + * < br > 
 * The realm reverts back to read - only . 
 - * < p / > 
 + * < br > 
 * Calling this when not in a write transaction will throw an exception . 
 * 
 * @ throws java . lang . IllegalStateException If the write transaction is an invalid state or 
 diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java 
 index 7bc592a . . 0a69e12 100644 
 - - - a / realm / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / src / main / java / io / realm / RealmObject . java 
 @ @ - 23 , 11 + 23 , 11 @ @ import io . realm . annotations . RealmClass ; 
 * In Realm you define your model classes by subclassing RealmObject and adding fields to be 
 * persisted . You then create your objects within a Realm , and use your custom subclasses instead 
 * of using the RealmObject class directly . 
 - * < p / > 
 + * < br > 
 * An annotation processor will create a proxy class for your RealmObject subclass . The getters and 
 * setters should not contain any custom code of logic as they are overridden as part of the annotation 
 * process . 
 - * < p / > 
 + * < br > 
 * @ see Realm # createObject ( Class ) 
 * / 

