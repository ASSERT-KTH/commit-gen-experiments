BLEU SCORE: 0.026341919627252283

TEST MSG: Fix listIterator _ add test
GENERATED MSG: make a test of RealmObject . hashCode ( ) path independent .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java b / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java <nl> index 706182e . . b173530 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ import io . realm . rule . TestRealmConfigurationFactory ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotEquals ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 615 , 21 + 616 , 23 @ @ public class OrderedRealmCollectionIteratorTests extends CollectionTests { <nl> <nl> @ Test <nl> public void listIterator _ add ( ) { <nl> - if ( skipTest ( CollectionClass . REALMRESULTS ) ) { <nl> + if ( skipTest ( CollectionClass . REALMRESULTS , CollectionClass . REALMRESULTS _ SNAPSHOT _ RESULTS _ BASE , <nl> + CollectionClass . REALMRESULTS _ SNAPSHOT _ LIST _ BASE ) ) { <nl> return ; <nl> } <nl> <nl> realm . beginTransaction ( ) ; <nl> ListIterator < AllJavaTypes > it = collection . listIterator ( ) ; <nl> <nl> - / / Calling set ( ) before next ( ) should throw . <nl> - try { <nl> - it . add ( new AllJavaTypes ( ) ) ; <nl> - fail ( ) ; <nl> - } catch ( IllegalStateException ignored ) { <nl> - } <nl> + / / The element is inserted immediately before the element that would be returned by next ( ) , if any , and after <nl> + / / the element that would be returned by previous ( ) , if any . ( If the list contains no elements , the new element <nl> + / / becomes the sole element on the list . ) <nl> + it . add ( new AllJavaTypes ( 4242 ) ) ; <nl> + AllJavaTypes obj = collection . first ( ) ; <nl> + assertNotNull ( obj ) ; <nl> + assertEquals ( 4242 , obj . getFieldLong ( ) ) ; <nl> <nl> - AllJavaTypes obj = it . next ( ) ; <nl> + obj = it . next ( ) ; <nl> assertEquals ( 0 , obj . getFieldLong ( ) ) ; <nl> it . add ( new AllJavaTypes ( 42 ) ) ; <nl> obj = it . previous ( ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> index 9328d26 . . a0e2530 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java <nl> @ @ - 16 , 7 + 16 , 6 @ @ <nl> <nl> package io . realm ; <nl> <nl> - import android . support . test . InstrumentationRegistry ; <nl> import android . support . test . runner . AndroidJUnit4 ; <nl> <nl> import org . junit . After ; <nl> @ @ - 26 , 6 + 25 , 7 @ @ import org . junit . Test ; <nl> import org . junit . rules . ExpectedException ; <nl> import org . junit . runner . RunWith ; <nl> <nl> + import java . io . File ; <nl> import java . util . Calendar ; <nl> import java . util . Date ; <nl> import java . util . HashSet ; <nl> @ @ - 51 , 6 + 51 , 7 @ @ import io . realm . rule . TestRealmConfigurationFactory ; <nl> import static io . realm . internal . test . ExtraTests . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> @ @ - 411 , 18 + 412 , 59 @ @ public class RealmObjectTests { <nl> <nl> @ Test <nl> public void hashCode _ cyclicObject ( ) { <nl> - / / Don ' t use the configFactory as we need absolute control over the path to be able to calculate the hashCode <nl> - realm . close ( ) ; <nl> - RealmConfiguration realmConfig = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; <nl> - realm = Realm . getInstance ( realmConfig ) ; <nl> - <nl> realm . beginTransaction ( ) ; <nl> - CyclicType foo = createCyclicData ( ) ; <nl> + final CyclicType foo = createCyclicData ( ) ; <nl> realm . commitTransaction ( ) ; <nl> - assertEquals ( 1344723738 , foo . hashCode ( ) ) ; <nl> + <nl> + / / Check that the hash code is always the same between multiple calls . <nl> + assertEquals ( foo . hashCode ( ) , foo . hashCode ( ) ) ; <nl> + / / Check that the hash code is the same among same object <nl> + assertEquals ( foo . hashCode ( ) , realm . where ( CyclicType . class ) . equalTo ( " name " , foo . getName ( ) ) . findFirst ( ) . hashCode ( ) ) ; <nl> + / / hash code is different from other objects . <nl> + assertNotEquals ( foo . getObject ( ) . hashCode ( ) , foo . hashCode ( ) ) ; <nl> + <nl> + final int originalHashCode = foo . hashCode ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + foo . setName ( foo . getName ( ) + " 1234 " ) ; <nl> + } <nl> + } ) ; <nl> + / / Check that Updating the value of its field does not affect the hash code . <nl> + assertEquals ( originalHashCode , foo . hashCode ( ) ) ; <nl> + <nl> + / / Check the hash code of the object from a Realm in different file name . <nl> + RealmConfiguration realmConfig _ differentName = configFactory . createConfiguration ( <nl> + " another _ " + realmConfig . getRealmFileName ( ) ) ; <nl> + Realm realm _ differentName = Realm . getInstance ( realmConfig _ differentName ) ; <nl> + / / noinspection TryFinallyCanBeTryWithResources <nl> + try { <nl> + realm _ differentName . beginTransaction ( ) ; <nl> + CyclicType fooFromDifferentName = createCyclicData ( realm _ differentName ) ; <nl> + realm _ differentName . commitTransaction ( ) ; <nl> + <nl> + assertNotEquals ( fooFromDifferentName . hashCode ( ) , foo . hashCode ( ) ) ; <nl> + } finally { <nl> + realm _ differentName . close ( ) ; <nl> + } <nl> + <nl> + / / Check the hash code of the object from a Realm in different folder . <nl> + RealmConfiguration realmConfig _ differentPath = configFactory . createConfiguration ( <nl> + " anotherDir " , realmConfig . getRealmFileName ( ) ) ; <nl> + Realm realm _ differentPath = Realm . getInstance ( realmConfig _ differentPath ) ; <nl> + / / noinspection TryFinallyCanBeTryWithResources <nl> + try { <nl> + realm _ differentPath . beginTransaction ( ) ; <nl> + CyclicType fooFromDifferentPath = createCyclicData ( realm _ differentPath ) ; <nl> + realm _ differentPath . commitTransaction ( ) ; <nl> + <nl> + assertNotEquals ( fooFromDifferentPath . hashCode ( ) , foo . hashCode ( ) ) ; <nl> + } finally { <nl> + realm _ differentPath . close ( ) ; <nl> + } <nl> } <nl> <nl> - private CyclicType createCyclicData ( ) { <nl> + private CyclicType createCyclicData ( Realm realm ) { <nl> CyclicType foo = realm . createObject ( CyclicType . class ) ; <nl> foo . setName ( " Foo " ) ; <nl> CyclicType bar = realm . createObject ( CyclicType . class ) ; <nl> @ @ - 434 , 6 + 476 , 10 @ @ public class RealmObjectTests { <nl> return foo ; <nl> } <nl> <nl> + private CyclicType createCyclicData ( ) { <nl> + return createCyclicData ( realm ) ; <nl> + } <nl> + <nl> @ Test <nl> public void dateType ( ) { <nl> long testDatesValid [ ] = { - 1000 , 0 , 1000 } ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> index 77b8e69 . . 2681563 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> @ @ - 35 , 6 + 35 , 8 @ @ import java . util . concurrent . ConcurrentHashMap ; <nl> import io . realm . Realm ; <nl> import io . realm . RealmConfiguration ; <nl> <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> / * * <nl> * Rule that creates the { @ link RealmConfiguration } in a temporary directory and deletes the Realm created with that <nl> * configuration once the test finishes . Be sure to close all Realm instances before finishing the test . Otherwise <nl> @ @ - 94 , 6 + 96 , 17 @ @ public class TestRealmConfigurationFactory extends TemporaryFolder { <nl> return configuration ; <nl> } <nl> <nl> + public RealmConfiguration createConfiguration ( String subDir , String name ) { <nl> + final File folder = new File ( getRoot ( ) , subDir ) ; <nl> + assertTrue ( folder . mkdirs ( ) ) ; <nl> + RealmConfiguration configuration = new RealmConfiguration . Builder ( folder ) <nl> + . name ( name ) <nl> + . build ( ) ; <nl> + <nl> + configurations . add ( configuration ) ; <nl> + return configuration ; <nl> + } <nl> + <nl> public RealmConfiguration createConfiguration ( String name ) { <nl> RealmConfiguration configuration = new RealmConfiguration . Builder ( getRoot ( ) ) <nl> . name ( name )

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java b / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java 
 index 706182e . . b173530 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / OrderedRealmCollectionIteratorTests . java 
 @ @ - 42 , 6 + 42 , 7 @ @ import io . realm . rule . TestRealmConfigurationFactory ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotEquals ; 
 + import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 615 , 21 + 616 , 23 @ @ public class OrderedRealmCollectionIteratorTests extends CollectionTests { 
 
 @ Test 
 public void listIterator _ add ( ) { 
 - if ( skipTest ( CollectionClass . REALMRESULTS ) ) { 
 + if ( skipTest ( CollectionClass . REALMRESULTS , CollectionClass . REALMRESULTS _ SNAPSHOT _ RESULTS _ BASE , 
 + CollectionClass . REALMRESULTS _ SNAPSHOT _ LIST _ BASE ) ) { 
 return ; 
 } 
 
 realm . beginTransaction ( ) ; 
 ListIterator < AllJavaTypes > it = collection . listIterator ( ) ; 
 
 - / / Calling set ( ) before next ( ) should throw . 
 - try { 
 - it . add ( new AllJavaTypes ( ) ) ; 
 - fail ( ) ; 
 - } catch ( IllegalStateException ignored ) { 
 - } 
 + / / The element is inserted immediately before the element that would be returned by next ( ) , if any , and after 
 + / / the element that would be returned by previous ( ) , if any . ( If the list contains no elements , the new element 
 + / / becomes the sole element on the list . ) 
 + it . add ( new AllJavaTypes ( 4242 ) ) ; 
 + AllJavaTypes obj = collection . first ( ) ; 
 + assertNotNull ( obj ) ; 
 + assertEquals ( 4242 , obj . getFieldLong ( ) ) ; 
 
 - AllJavaTypes obj = it . next ( ) ; 
 + obj = it . next ( ) ; 
 assertEquals ( 0 , obj . getFieldLong ( ) ) ; 
 it . add ( new AllJavaTypes ( 42 ) ) ; 
 obj = it . previous ( ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 index 9328d26 . . a0e2530 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmObjectTests . java 
 @ @ - 16 , 7 + 16 , 6 @ @ 
 
 package io . realm ; 
 
 - import android . support . test . InstrumentationRegistry ; 
 import android . support . test . runner . AndroidJUnit4 ; 
 
 import org . junit . After ; 
 @ @ - 26 , 6 + 25 , 7 @ @ import org . junit . Test ; 
 import org . junit . rules . ExpectedException ; 
 import org . junit . runner . RunWith ; 
 
 + import java . io . File ; 
 import java . util . Calendar ; 
 import java . util . Date ; 
 import java . util . HashSet ; 
 @ @ - 51 , 6 + 51 , 7 @ @ import io . realm . rule . TestRealmConfigurationFactory ; 
 import static io . realm . internal . test . ExtraTests . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 @ @ - 411 , 18 + 412 , 59 @ @ public class RealmObjectTests { 
 
 @ Test 
 public void hashCode _ cyclicObject ( ) { 
 - / / Don ' t use the configFactory as we need absolute control over the path to be able to calculate the hashCode 
 - realm . close ( ) ; 
 - RealmConfiguration realmConfig = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; 
 - realm = Realm . getInstance ( realmConfig ) ; 
 - 
 realm . beginTransaction ( ) ; 
 - CyclicType foo = createCyclicData ( ) ; 
 + final CyclicType foo = createCyclicData ( ) ; 
 realm . commitTransaction ( ) ; 
 - assertEquals ( 1344723738 , foo . hashCode ( ) ) ; 
 + 
 + / / Check that the hash code is always the same between multiple calls . 
 + assertEquals ( foo . hashCode ( ) , foo . hashCode ( ) ) ; 
 + / / Check that the hash code is the same among same object 
 + assertEquals ( foo . hashCode ( ) , realm . where ( CyclicType . class ) . equalTo ( " name " , foo . getName ( ) ) . findFirst ( ) . hashCode ( ) ) ; 
 + / / hash code is different from other objects . 
 + assertNotEquals ( foo . getObject ( ) . hashCode ( ) , foo . hashCode ( ) ) ; 
 + 
 + final int originalHashCode = foo . hashCode ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + foo . setName ( foo . getName ( ) + " 1234 " ) ; 
 + } 
 + } ) ; 
 + / / Check that Updating the value of its field does not affect the hash code . 
 + assertEquals ( originalHashCode , foo . hashCode ( ) ) ; 
 + 
 + / / Check the hash code of the object from a Realm in different file name . 
 + RealmConfiguration realmConfig _ differentName = configFactory . createConfiguration ( 
 + " another _ " + realmConfig . getRealmFileName ( ) ) ; 
 + Realm realm _ differentName = Realm . getInstance ( realmConfig _ differentName ) ; 
 + / / noinspection TryFinallyCanBeTryWithResources 
 + try { 
 + realm _ differentName . beginTransaction ( ) ; 
 + CyclicType fooFromDifferentName = createCyclicData ( realm _ differentName ) ; 
 + realm _ differentName . commitTransaction ( ) ; 
 + 
 + assertNotEquals ( fooFromDifferentName . hashCode ( ) , foo . hashCode ( ) ) ; 
 + } finally { 
 + realm _ differentName . close ( ) ; 
 + } 
 + 
 + / / Check the hash code of the object from a Realm in different folder . 
 + RealmConfiguration realmConfig _ differentPath = configFactory . createConfiguration ( 
 + " anotherDir " , realmConfig . getRealmFileName ( ) ) ; 
 + Realm realm _ differentPath = Realm . getInstance ( realmConfig _ differentPath ) ; 
 + / / noinspection TryFinallyCanBeTryWithResources 
 + try { 
 + realm _ differentPath . beginTransaction ( ) ; 
 + CyclicType fooFromDifferentPath = createCyclicData ( realm _ differentPath ) ; 
 + realm _ differentPath . commitTransaction ( ) ; 
 + 
 + assertNotEquals ( fooFromDifferentPath . hashCode ( ) , foo . hashCode ( ) ) ; 
 + } finally { 
 + realm _ differentPath . close ( ) ; 
 + } 
 } 
 
 - private CyclicType createCyclicData ( ) { 
 + private CyclicType createCyclicData ( Realm realm ) { 
 CyclicType foo = realm . createObject ( CyclicType . class ) ; 
 foo . setName ( " Foo " ) ; 
 CyclicType bar = realm . createObject ( CyclicType . class ) ; 
 @ @ - 434 , 6 + 476 , 10 @ @ public class RealmObjectTests { 
 return foo ; 
 } 
 
 + private CyclicType createCyclicData ( ) { 
 + return createCyclicData ( realm ) ; 
 + } 
 + 
 @ Test 
 public void dateType ( ) { 
 long testDatesValid [ ] = { - 1000 , 0 , 1000 } ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 index 77b8e69 . . 2681563 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 @ @ - 35 , 6 + 35 , 8 @ @ import java . util . concurrent . ConcurrentHashMap ; 
 import io . realm . Realm ; 
 import io . realm . RealmConfiguration ; 
 
 + import static org . junit . Assert . assertTrue ; 
 + 
 / * * 
 * Rule that creates the { @ link RealmConfiguration } in a temporary directory and deletes the Realm created with that 
 * configuration once the test finishes . Be sure to close all Realm instances before finishing the test . Otherwise 
 @ @ - 94 , 6 + 96 , 17 @ @ public class TestRealmConfigurationFactory extends TemporaryFolder { 
 return configuration ; 
 } 
 
 + public RealmConfiguration createConfiguration ( String subDir , String name ) { 
 + final File folder = new File ( getRoot ( ) , subDir ) ; 
 + assertTrue ( folder . mkdirs ( ) ) ; 
 + RealmConfiguration configuration = new RealmConfiguration . Builder ( folder ) 
 + . name ( name ) 
 + . build ( ) ; 
 + 
 + configurations . add ( configuration ) ; 
 + return configuration ; 
 + } 
 + 
 public RealmConfiguration createConfiguration ( String name ) { 
 RealmConfiguration configuration = new RealmConfiguration . Builder ( getRoot ( ) ) 
 . name ( name )
