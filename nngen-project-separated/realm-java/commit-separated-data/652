BLEU SCORE: 0.03283637368030199

TEST MSG: Forward all throwables but not only excpetions
GENERATED MSG: Implement Realm static constructors

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 02b4dd9 . . 091ab02 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> # # # Bug fixes <nl> <nl> * Fixed a wrong JNI method declaration which might cause " method not found " crash on some devices . <nl> + * Fixed a bug that ` Error ` in the background async thread is not forwared to the caller thread . <nl> <nl> # # 1 . 1 . 0 <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> index aaa191c . . 1e791b8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import io . realm . entities . PrimaryKeyAsBoxedInteger ; <nl> import io . realm . entities . PrimaryKeyAsBoxedLong ; <nl> import io . realm . entities . PrimaryKeyAsBoxedShort ; <nl> import io . realm . entities . PrimaryKeyAsString ; <nl> + import io . realm . internal . HandlerControllerConstants ; <nl> import io . realm . internal . log . RealmLog ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . rule . RunTestInLooperThread ; <nl> @ @ - 521 , 7 + 522 , 7 @ @ public class DynamicRealmTests { <nl> @ Override <nl> public boolean onInterceptInMessage ( int what ) { <nl> switch ( what ) { <nl> - case HandlerController . COMPLETED _ ASYNC _ REALM _ OBJECT : { <nl> + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT : { <nl> post ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> index cd80dd8 . . 7ccb8ba 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ import io . realm . entities . Dog ; <nl> import io . realm . entities . NonLatinFieldNames ; <nl> import io . realm . entities . Owner ; <nl> import io . realm . instrumentation . MockActivityManager ; <nl> + import io . realm . internal . HandlerControllerConstants ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . async . RealmThreadPoolExecutor ; <nl> import io . realm . internal . log . RealmLog ; <nl> @ @ - 488 , 7 + 489 , 7 @ @ public class RealmAsyncQueryTests { <nl> switch ( what ) { <nl> / / 5 . Intercept all messages from other threads . On the first complete , we advance the tread <nl> / / which will cause the async query to rerun instead of triggering the change listener . <nl> - case HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS : <nl> + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : <nl> if ( intercepts = = 1 ) { <nl> / / We advance the Realm so we can simulate a retry <nl> realm . beginTransaction ( ) ; <nl> @ @ - 545 , 7 + 546 , 7 @ @ public class RealmAsyncQueryTests { <nl> @ Override <nl> public boolean onInterceptInMessage ( int what ) { <nl> int intercepts = numberOfIntercept . getAndIncrement ( ) ; <nl> - if ( what = = HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS & & intercepts = = 1 ) { <nl> + if ( what = = HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS & & intercepts = = 1 ) { <nl> / / 4 . The first time the async queries complete we start an update from <nl> / / another background thread . This will cause queries to rerun when the <nl> / / background thread notifies this thread . <nl> @ @ - 652 , 7 + 653 , 7 @ @ public class RealmAsyncQueryTests { <nl> / / Intercepts in order [ QueryCompleted , RealmChanged , QueryUpdated ] <nl> int intercepts = numberOfIntercept . incrementAndGet ( ) ; <nl> switch ( what ) { <nl> - case HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS : { <nl> + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : { <nl> / / we advance the Realm so we can simulate a retry <nl> if ( intercepts = = 1 ) { <nl> realm . beginTransaction ( ) ; <nl> @ @ - 710 , 7 + 711 , 7 @ @ public class RealmAsyncQueryTests { <nl> @ Override <nl> public boolean onInterceptInMessage ( int what ) { <nl> switch ( what ) { <nl> - case HandlerController . REALM _ CHANGED : { <nl> + case HandlerControllerConstants . REALM _ CHANGED : { <nl> / / should only intercept the first REALM _ CHANGED coming from the <nl> / / background update thread <nl> <nl> @ @ - 720 , 11 + 721 , 11 @ @ public class RealmAsyncQueryTests { <nl> / / upcoming REALM _ CHANGED to batch update all async queries <nl> return numberOfInterceptedChangeMessage . getAndIncrement ( ) = = 0 ; <nl> } <nl> - case HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS : { <nl> + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : { <nl> if ( numberOfCompletedAsyncQuery . incrementAndGet ( ) = = 2 ) { <nl> / / both queries have completed now ( & their results should be ignored ) <nl> / / now send the REALM _ CHANGED event that should batch update all queries <nl> - sendEmptyMessage ( HandlerController . REALM _ CHANGED ) ; <nl> + sendEmptyMessage ( HandlerControllerConstants . REALM _ CHANGED ) ; <nl> } <nl> } <nl> } <nl> @ @ - 944 , 7 + 945 , 7 @ @ public class RealmAsyncQueryTests { <nl> public boolean onInterceptInMessage ( int what ) { <nl> int intercepts = numberOfIntercept . incrementAndGet ( ) ; <nl> switch ( what ) { <nl> - case HandlerController . COMPLETED _ ASYNC _ REALM _ OBJECT : { <nl> + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT : { <nl> if ( intercepts = = 1 ) { <nl> / / we advance the Realm so we can simulate a retry <nl> realm . beginTransaction ( ) ; <nl> @ @ - 1040 , 7 + 1041 , 7 @ @ public class RealmAsyncQueryTests { <nl> / / In order [ QueryCompleted , RealmChanged , QueryUpdated ] <nl> int intercepts = numberOfIntercept . incrementAndGet ( ) ; <nl> switch ( what ) { <nl> - case HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS : { <nl> + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : { <nl> if ( intercepts = = 1 ) { <nl> / / We advance the Realm so we can simulate a retry before listeners are <nl> / / called . <nl> @ @ - 1103 , 7 + 1104 , 7 @ @ public class RealmAsyncQueryTests { <nl> @ Override <nl> public boolean onInterceptInMessage ( int what ) { <nl> switch ( what ) { <nl> - case HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS : { <nl> + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : { <nl> if ( numberOfIntercept . incrementAndGet ( ) = = 1 ) { <nl> / / 6 . The first time the async queries complete we start an update from <nl> / / another background thread . This will cause queries to rerun when the <nl> @ @ - 1240 , 7 + 1241 , 7 @ @ public class RealmAsyncQueryTests { <nl> @ Override <nl> public boolean onInterceptInMessage ( int what ) { <nl> int intercepts = numberOfIntercept . incrementAndGet ( ) ; <nl> - if ( what = = HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS & & intercepts = = 1 ) { <nl> + if ( what = = HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS & & intercepts = = 1 ) { <nl> / / 6 . The first time the async queries complete we start an update from <nl> / / another background thread . This will cause queries to rerun when the <nl> / / background thread notifies this thread . <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> index 3eb26ed . . a7313db 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> @ @ - 117 , 9 + 117 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { <nl> } <nl> unitTestFailed = true ; <nl> } <nl> - if ( signalTestCompleted . getCount ( ) > 0 ) { <nl> - signalTestCompleted . countDown ( ) ; <nl> - } <nl> + signalTestCompleted . countDown ( ) ; <nl> if ( realm ! = null ) { <nl> realm . close ( ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 10765ae . . 3780cfe 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import java . util . concurrent . atomic . AtomicBoolean ; <nl> <nl> import io . realm . annotations . internal . OptionalAPI ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> + import io . realm . internal . HandlerControllerConstants ; <nl> import io . realm . internal . InvalidRow ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . SharedGroupManager ; <nl> @ @ - 410 , 14 + 411 , 14 @ @ abstract class BaseRealm implements Closeable { <nl> / / that behaviour indicate a user bug . Previously this would be hidden as the UI would still <nl> / / be responsive . <nl> Message msg = Message . obtain ( ) ; <nl> - msg . what = HandlerController . LOCAL _ COMMIT ; <nl> - if ( ! handler . hasMessages ( HandlerController . LOCAL _ COMMIT ) ) { <nl> - handler . removeMessages ( HandlerController . REALM _ CHANGED ) ; <nl> + msg . what = HandlerControllerConstants . LOCAL _ COMMIT ; <nl> + if ( ! handler . hasMessages ( HandlerControllerConstants . LOCAL _ COMMIT ) ) { <nl> + handler . removeMessages ( HandlerControllerConstants . REALM _ CHANGED ) ; <nl> messageHandled = handler . sendMessageAtFrontOfQueue ( msg ) ; <nl> } <nl> } else { <nl> - if ( ! handler . hasMessages ( HandlerController . REALM _ CHANGED ) ) { <nl> - messageHandled = handler . sendEmptyMessage ( HandlerController . REALM _ CHANGED ) ; <nl> + if ( ! handler . hasMessages ( HandlerControllerConstants . REALM _ CHANGED ) ) { <nl> + messageHandled = handler . sendEmptyMessage ( HandlerControllerConstants . REALM _ CHANGED ) ; <nl> } <nl> } <nl> if ( ! messageHandled ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / HandlerController . java b / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> index b1e4762 . . 591858a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . Future ; <nl> <nl> + import io . realm . internal . HandlerControllerConstants ; <nl> import io . realm . internal . IdentitySet ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> @ @ - 46 , 13 + 47 , 6 @ @ import io . realm . internal . log . RealmLog ; <nl> * / <nl> final class HandlerController implements Handler . Callback { <nl> <nl> - static final int REALM _ CHANGED = 14930352 ; / / Hopefully it won ' t clash with other message IDs . <nl> - static final int COMPLETED _ UPDATE _ ASYNC _ QUERIES = 24157817 ; <nl> - static final int COMPLETED _ ASYNC _ REALM _ RESULTS = 39088169 ; <nl> - static final int COMPLETED _ ASYNC _ REALM _ OBJECT = 63245986 ; <nl> - static final int REALM _ ASYNC _ BACKGROUND _ EXCEPTION = 102334155 ; <nl> - static final int LOCAL _ COMMIT = 165580141 ; <nl> - <nl> private final static Boolean NO _ REALM _ QUERY = Boolean . TRUE ; <nl> <nl> / / Keep a strong reference to the registered RealmChangeListener <nl> @ @ - 119 , 28 + 113 , 28 @ @ final class HandlerController implements Handler . Callback { <nl> QueryUpdateTask . Result result ; <nl> switch ( message . what ) { <nl> <nl> - case LOCAL _ COMMIT : <nl> - case REALM _ CHANGED : <nl> - realmChanged ( message . what = = LOCAL _ COMMIT ) ; <nl> + case HandlerControllerConstants . LOCAL _ COMMIT : <nl> + case HandlerControllerConstants . REALM _ CHANGED : <nl> + realmChanged ( message . what = = HandlerControllerConstants . LOCAL _ COMMIT ) ; <nl> break ; <nl> <nl> - case COMPLETED _ ASYNC _ REALM _ RESULTS : <nl> + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : <nl> result = ( QueryUpdateTask . Result ) message . obj ; <nl> completedAsyncRealmResults ( result ) ; <nl> break ; <nl> <nl> - case COMPLETED _ ASYNC _ REALM _ OBJECT : <nl> + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT : <nl> result = ( QueryUpdateTask . Result ) message . obj ; <nl> completedAsyncRealmObject ( result ) ; <nl> break ; <nl> <nl> - case COMPLETED _ UPDATE _ ASYNC _ QUERIES : <nl> + case HandlerControllerConstants . COMPLETED _ UPDATE _ ASYNC _ QUERIES : <nl> / / this is called once the background thread completed the update of the async queries <nl> result = ( QueryUpdateTask . Result ) message . obj ; <nl> completedAsyncQueriesUpdate ( result ) ; <nl> break ; <nl> <nl> - case REALM _ ASYNC _ BACKGROUND _ EXCEPTION : <nl> + case HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION : <nl> / / Don ' t fail silently in the background in case of Core exception <nl> throw ( Error ) message . obj ; <nl> <nl> @ @ - 277 , 7 + 271 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> . addObject ( next . getKey ( ) , <nl> next . getValue ( ) . handoverQueryPointer ( ) , <nl> next . getValue ( ) . getArgument ( ) ) <nl> - . sendToHandler ( realm . handler , COMPLETED _ ASYNC _ REALM _ OBJECT ) <nl> + . sendToHandler ( realm . handler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT ) <nl> . build ( ) ) ; <nl> <nl> } else { <nl> @ @ - 418 , 7 + 412 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> } <nl> if ( realmResultsQueryStep ! = null ) { <nl> QueryUpdateTask queryUpdateTask = realmResultsQueryStep <nl> - . sendToHandler ( realm . handler , COMPLETED _ UPDATE _ ASYNC _ QUERIES ) <nl> + . sendToHandler ( realm . handler , HandlerControllerConstants . COMPLETED _ UPDATE _ ASYNC _ QUERIES ) <nl> . build ( ) ; <nl> updateAsyncQueriesTask = Realm . asyncTaskExecutor . submitQueryUpdate ( queryUpdateTask ) ; <nl> } <nl> @ @ - 501 , 7 + 495 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> . add ( weakRealmResults , <nl> query . handoverQueryPointer ( ) , <nl> query . getArgument ( ) ) <nl> - . sendToHandler ( realm . handler , COMPLETED _ ASYNC _ REALM _ RESULTS ) <nl> + . sendToHandler ( realm . handler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS ) <nl> . build ( ) ; <nl> <nl> Realm . asyncTaskExecutor . submitQueryUpdate ( queryUpdateTask ) ; <nl> @ @ - 643 , 7 + 637 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> . addObject ( realmObjectWeakReference , <nl> realmQuery . handoverQueryPointer ( ) , <nl> realmQuery . getArgument ( ) ) <nl> - . sendToHandler ( realm . handler , COMPLETED _ ASYNC _ REALM _ OBJECT ) <nl> + . sendToHandler ( realm . handler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT ) <nl> . build ( ) ; <nl> <nl> Realm . asyncTaskExecutor . submitQueryUpdate ( queryUpdateTask ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index d60e7a8 . . 7f0494b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . util . concurrent . Callable ; <nl> import java . util . concurrent . Future ; <nl> <nl> import io . realm . annotations . Required ; <nl> + import io . realm . internal . HandlerControllerConstants ; <nl> import io . realm . internal . LinkView ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> @ @ - 1184 , 13 + 1185 , 13 @ @ public final class RealmQuery < E extends RealmModel > { <nl> result . updatedTableViews . put ( weakRealmResults , handoverTableViewPointer ) ; <nl> result . versionID = sharedGroup . getVersion ( ) ; <nl> closeSharedGroupAndSendMessageToHandler ( sharedGroup , <nl> - weakHandler , HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; <nl> + weakHandler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; <nl> <nl> return handoverTableViewPointer ; <nl> - } catch ( Exception e ) { <nl> + } catch ( Throwable e ) { <nl> RealmLog . e ( e . getMessage ( ) , e ) ; <nl> closeSharedGroupAndSendMessageToHandler ( sharedGroup , <nl> - weakHandler , HandlerController . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; <nl> + weakHandler , HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; <nl> <nl> } finally { <nl> if ( sharedGroup ! = null & & ! sharedGroup . isClosed ( ) ) { <nl> @ @ - 1491 , 7 + 1492 , 7 @ @ public final class RealmQuery < E extends RealmModel > { <nl> result . updatedTableViews . put ( weakRealmResults , handoverTableViewPointer ) ; <nl> result . versionID = sharedGroup . getVersion ( ) ; <nl> closeSharedGroupAndSendMessageToHandler ( sharedGroup , <nl> - weakHandler , HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; <nl> + weakHandler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; <nl> <nl> return handoverTableViewPointer ; <nl> <nl> @ @ - 1500 , 10 + 1501 , 10 @ @ public final class RealmQuery < E extends RealmModel > { <nl> RealmLog . d ( " findAllAsync handover could not complete due to a BadVersionException . " + <nl> " Retry is scheduled by a REALM _ CHANGED event . " ) ; <nl> <nl> - } catch ( Exception e ) { <nl> + } catch ( Throwable e ) { <nl> RealmLog . e ( e . getMessage ( ) , e ) ; <nl> closeSharedGroupAndSendMessageToHandler ( sharedGroup , <nl> - weakHandler , HandlerController . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; <nl> + weakHandler , HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; <nl> <nl> } finally { <nl> if ( sharedGroup ! = null & & ! sharedGroup . isClosed ( ) ) { <nl> @ @ - 1610 , 7 + 1611 , 7 @ @ public final class RealmQuery < E extends RealmModel > { <nl> result . updatedTableViews . put ( weakRealmResults , handoverTableViewPointer ) ; <nl> result . versionID = sharedGroup . getVersion ( ) ; <nl> closeSharedGroupAndSendMessageToHandler ( sharedGroup , <nl> - weakHandler , HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; <nl> + weakHandler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; <nl> <nl> return handoverTableViewPointer ; <nl> } catch ( BadVersionException e ) { <nl> @ @ - 1618 , 10 + 1619 , 10 @ @ public final class RealmQuery < E extends RealmModel > { <nl> RealmLog . d ( " findAllSortedAsync handover could not complete due to a BadVersionException . " + <nl> " Retry is scheduled by a REALM _ CHANGED event . " ) ; <nl> <nl> - } catch ( Exception e ) { <nl> + } catch ( Throwable e ) { <nl> RealmLog . e ( e . getMessage ( ) , e ) ; <nl> closeSharedGroupAndSendMessageToHandler ( sharedGroup , <nl> - weakHandler , HandlerController . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; <nl> + weakHandler , HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; <nl> <nl> } finally { <nl> if ( sharedGroup ! = null & & ! sharedGroup . isClosed ( ) ) { <nl> @ @ - 1783 , 7 + 1784 , 7 @ @ public final class RealmQuery < E extends RealmModel > { <nl> result . updatedTableViews . put ( weakRealmResults , handoverTableViewPointer ) ; <nl> result . versionID = sharedGroup . getVersion ( ) ; <nl> closeSharedGroupAndSendMessageToHandler ( sharedGroup , <nl> - weakHandler , HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; <nl> + weakHandler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; <nl> <nl> return handoverTableViewPointer ; <nl> } catch ( BadVersionException e ) { <nl> @ @ - 1791 , 10 + 1792 , 10 @ @ public final class RealmQuery < E extends RealmModel > { <nl> RealmLog . d ( " findAllSortedAsync handover could not complete due to a BadVersionException . " + <nl> " Retry is scheduled by a REALM _ CHANGED event . " ) ; <nl> <nl> - } catch ( Exception e ) { <nl> + } catch ( Throwable e ) { <nl> RealmLog . e ( e . getMessage ( ) , e ) ; <nl> closeSharedGroupAndSendMessageToHandler ( sharedGroup , <nl> - weakHandler , HandlerController . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; <nl> + weakHandler , HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; <nl> <nl> } finally { <nl> if ( sharedGroup ! = null & & ! sharedGroup . isClosed ( ) ) { <nl> @ @ - 1926 , 15 + 1927 , 15 @ @ public final class RealmQuery < E extends RealmModel > { <nl> result . updatedRow . put ( realmObjectWeakReference , handoverRowPointer ) ; <nl> result . versionID = sharedGroup . getVersion ( ) ; <nl> closeSharedGroupAndSendMessageToHandler ( sharedGroup , <nl> - weakHandler , HandlerController . COMPLETED _ ASYNC _ REALM _ OBJECT , result ) ; <nl> + weakHandler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT , result ) ; <nl> <nl> return handoverRowPointer ; <nl> <nl> - } catch ( Exception e ) { <nl> + } catch ( Throwable e ) { <nl> RealmLog . e ( e . getMessage ( ) , e ) ; <nl> / / handler can ' t throw a checked exception need to wrap it into unchecked Exception <nl> closeSharedGroupAndSendMessageToHandler ( sharedGroup , <nl> - weakHandler , HandlerController . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; <nl> + weakHandler , HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; <nl> <nl> } finally { <nl> if ( sharedGroup ! = null & & ! sharedGroup . isClosed ( ) ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / HandlerControllerConstants . java b / realm / realm - library / src / main / java / io / realm / internal / HandlerControllerConstants . java <nl> new file mode 100644 <nl> index 0000000 . . 029c91b <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / HandlerControllerConstants . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . internal ; <nl> + <nl> + / * * <nl> + * This class is to share some Android handler related constants between package { @ link io . realm } and <nl> + * { @ link io . realm . internal . async } . <nl> + * / <nl> + public final class HandlerControllerConstants { <nl> + public static final int REALM _ CHANGED = 14930352 ; / / Hopefully it won ' t clash with other message IDs . <nl> + public static final int COMPLETED _ UPDATE _ ASYNC _ QUERIES = 24157817 ; <nl> + public static final int COMPLETED _ ASYNC _ REALM _ RESULTS = 39088169 ; <nl> + public static final int COMPLETED _ ASYNC _ REALM _ OBJECT = 63245986 ; <nl> + public static final int REALM _ ASYNC _ BACKGROUND _ EXCEPTION = 102334155 ; <nl> + public static final int LOCAL _ COMMIT = 165580141 ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / async / QueryUpdateTask . java b / realm / realm - library / src / main / java / io / realm / internal / async / QueryUpdateTask . java <nl> index 179a839 . . a7be9d9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / async / QueryUpdateTask . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / async / QueryUpdateTask . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . List ; <nl> import io . realm . RealmConfiguration ; <nl> import io . realm . RealmModel ; <nl> import io . realm . RealmResults ; <nl> + import io . realm . internal . HandlerControllerConstants ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . SharedGroup ; <nl> import io . realm . internal . Table ; <nl> @ @ - 100 , 8 + 101 , 17 @ @ public class QueryUpdateTask implements Runnable { <nl> handler . obtainMessage ( message , result ) . sendToTarget ( ) ; <nl> } <nl> <nl> - } catch ( Exception e ) { <nl> + } catch ( BadVersionException e ) { <nl> + / / In some rare race conditions , this can happen . In that case , just ignore the error . <nl> + RealmLog . d ( " Query update task could not complete due to a BadVersionException . " + <nl> + " Retry is scheduled by a REALM _ CHANGED event . " ) ; <nl> + <nl> + } catch ( Throwable e ) { <nl> RealmLog . e ( e . getMessage ( ) , e ) ; <nl> + Handler handler = callerHandler . get ( ) ; <nl> + if ( handler ! = null & & handler . getLooper ( ) . getThread ( ) . isAlive ( ) ) { <nl> + handler . obtainMessage ( HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) . sendToTarget ( ) ; <nl> + } <nl> <nl> } finally { <nl> if ( sharedGroup ! = null ) {
NEAREST DIFF (one line): diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java <nl> index f24f3e3 . . 8024608 100755 <nl> - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java <nl> + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java <nl> @ @ - 8 , 9 + 8 , 11 @ @ import android . util . Log ; <nl> import com . google . gson . Gson ; <nl> import com . google . gson . reflect . TypeToken ; <nl> <nl> + import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> + import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> import io . realm . Realm ; <nl> @ @ - 53 , 13 + 55 , 25 @ @ public class CityLoader extends AsyncTaskLoader < List < City > > { <nl> <nl> dataIsReady = true ; <nl> <nl> + / / Delete realm files <nl> + File writablePath = context . getFilesDir ( ) ; <nl> + for ( File file : Arrays . asList ( <nl> + new File ( writablePath , Realm . DEFAULT _ REALM _ NAME ) , <nl> + new File ( writablePath , Realm . DEFAULT _ REALM _ NAME + " . lock " ) ) ) { <nl> + if ( file . exists ( ) ) { <nl> + boolean deleteResult = file . delete ( ) ; <nl> + if ( ! deleteResult ) { <nl> + throw new AssertionError ( " Could not delete file : " + file . getAbsolutePath ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> / / Store the retrieved items to the Realm <nl> - Realm realm = new Realm ( context ) ; <nl> - realm . clear ( ) ; / / Delete the Realm ( in the event of a Reset ) <nl> + Realm realm = Realm . create ( context ) ; <nl> <nl> realm . beginWrite ( ) ; <nl> for ( City city : items ) { <nl> - City realmCity = realm . create ( City . class ) ; <nl> + City realmCity = realm . createObject ( City . class ) ; <nl> realmCity . setName ( city . getName ( ) ) ; <nl> realmCity . setVotes ( city . getVotes ( ) ) ; <nl> } <nl> diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> index 71ae952 . . 7e8feb3 100644 <nl> - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load <nl> } <nl> <nl> public void updateCities ( ) { <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> RealmResults < City > cities = realm . where ( City . class ) . findAll ( ) ; <nl> mAdapter . setData ( cities ) ; <nl> <nl> @ @ - 104 , 7 + 104 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load <nl> City modifiedCity = ( City ) mAdapter . getItem ( position ) ; <nl> <nl> / / Update the realm object affected by the user <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> RealmQuery < City > query = realm . where ( City . class ) . beginsWith ( " name " , modifiedCity . getName ( ) ) ; <nl> City city = query . findFirst ( ) ; <nl> realm . beginWrite ( ) ; <nl> diff - - git a / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java b / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java <nl> index cc41ef1 . . a97cb09 100644 <nl> - - - a / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java <nl> + + + b / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java <nl> @ @ - 66 , 11 + 66 , 11 @ @ public class RealmIntroExampleActivity extends Activity { <nl> showStatus ( " Performing basic Read / Write operation . . . " ) ; <nl> <nl> / / Open a default realm <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> <nl> / / Add a person in a write transaction <nl> realm . beginWrite ( ) ; <nl> - Person person = realm . create ( Person . class ) ; <nl> + Person person = realm . createObject ( Person . class ) ; <nl> person . setName ( " Happy Person " ) ; <nl> person . setAge ( 14 ) ; <nl> realm . commit ( ) ; <nl> @ @ - 83 , 7 + 83 , 7 @ @ public class RealmIntroExampleActivity extends Activity { <nl> private void basicQuery ( ) throws java . io . IOException { <nl> showStatus ( " \ nPerforming basic Query operation . . . " ) ; <nl> <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; <nl> RealmResults < Person > results = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; <nl> showStatus ( " Size of result set : " + results . size ( ) ) ; <nl> @ @ - 93 , 7 + 93 , 7 @ @ public class RealmIntroExampleActivity extends Activity { <nl> showStatus ( " \ nPerforming basic Update operation . . . " ) ; <nl> <nl> / / Open a default realm <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> <nl> / / Get the first object <nl> Person person = realm . where ( Person . class ) . findFirst ( ) ; <nl> @ @ - 118 , 19 + 118 , 19 @ @ public class RealmIntroExampleActivity extends Activity { <nl> String status = " \ nPerforming complex Read / Write operation . . . " ; <nl> <nl> / / Open a default realm <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> <nl> / / Add ten persons in one write transaction <nl> realm . beginWrite ( ) ; <nl> - Dog fido = realm . create ( Dog . class ) ; <nl> + Dog fido = realm . createObject ( Dog . class ) ; <nl> fido . setName ( " fido " ) ; <nl> for ( int i = 0 ; i < 10 ; i + + ) { <nl> - Person person = realm . create ( Person . class ) ; <nl> + Person person = realm . createObject ( Person . class ) ; <nl> person . setName ( " Person no . " + i ) ; <nl> person . setAge ( i ) ; <nl> person . setDog ( fido ) ; <nl> for ( int j = 0 ; j < i ; j + + ) { <nl> - Cat cat = realm . create ( Cat . class ) ; <nl> + Cat cat = realm . createObject ( Cat . class ) ; <nl> cat . setName ( " Cat _ " + j ) ; <nl> person . getCats ( ) . add ( cat ) ; <nl> } <nl> @ @ - 157 , 7 + 157 , 7 @ @ public class RealmIntroExampleActivity extends Activity { <nl> private String complexQuery ( ) throws IOException { <nl> String status = " \ n \ nPerforming complex Query operation . . . " ; <nl> <nl> - Realm realm = new Realm ( this ) ; <nl> + Realm realm = Realm . create ( this ) ; <nl> status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; <nl> <nl> / / Find all persons where age between 7 and 9 and name begins with " Person " . <nl> diff - - git a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> index 851cdda . . e4e91e8 100644 <nl> - - - a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> + + + b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> @ @ - 83 , 15 + 83 , 14 @ @ public class PerformanceTask extends AsyncTask < Integer , String , String > { <nl> System . out . println ( " # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Testing new interface " ) ; <nl> <nl> Realm . setDefaultDurability ( SharedGroup . Durability . FULL ) ; <nl> - Realm realm = new Realm ( activity ) ; <nl> - realm . clear ( ) ; <nl> + Realm realm = Realm . create ( activity ) ; <nl> <nl> timer = System . currentTimeMillis ( ) ; <nl> try { <nl> / / Debug . startMethodTracing ( " writes " ) ; <nl> realm . beginWrite ( ) ; <nl> for ( int i = 0 ; i < listSize ; i + + ) { <nl> - User user = realm . create ( User . class ) ; <nl> + User user = realm . createObject ( User . class ) ; <nl> <nl> user . setId ( i ) ; <nl> user . setName ( " John Doe " ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> new file mode 100644 <nl> index 0000000 . . 74cc428 <nl> - - - / dev / null <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package io . realm ; <nl> + <nl> + import android . test . AndroidTestCase ; <nl> + <nl> + public class RealmTest extends AndroidTestCase { <nl> + <nl> + public void testRealmThreadCachingSpeed ( ) { <nl> + long tic1 = System . currentTimeMillis ( ) ; <nl> + Realm realm1 = Realm . create ( this . getContext ( ) ) ; <nl> + long toc1 = System . currentTimeMillis ( ) ; <nl> + long t1 = toc1 - tic1 ; <nl> + <nl> + long tic2 = System . currentTimeMillis ( ) ; <nl> + Realm realm2 = Realm . create ( this . getContext ( ) ) ; <nl> + long toc2 = System . currentTimeMillis ( ) ; <nl> + long t2 = toc2 - tic2 ; <nl> + <nl> + / / At least 5 times faster ? <nl> + assertTrue ( t2 < ( t1 / 5 ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 0e10436 . . 782ddca 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ package io . realm ; <nl> import android . content . Context ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> + import java . lang . ref . SoftReference ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 40 , 13 + 40 , 15 @ @ import io . realm . internal . Table ; <nl> public class Realm { <nl> <nl> private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; <nl> + public static final String DEFAULT _ REALM _ NAME = " default . realm " ; <nl> + private static final Map < String , ThreadRealm > realms = new HashMap < String , ThreadRealm > ( ) ; <nl> <nl> - private SharedGroup sg ; <nl> + private SharedGroup sharedGroup ; <nl> private ImplicitTransaction transaction ; <nl> private String filePath ; <nl> private int version ; <nl> - private File bytecodeCache ; <nl> - private ScheduledExecutorService ses = Executors . newSingleThreadScheduledExecutor ( ) ; <nl> + private ScheduledExecutorService scheduledExecutorService <nl> + = Executors . newSingleThreadScheduledExecutor ( ) ; <nl> <nl> private Map < Class < ? > , String > generatedClassNames = new HashMap < Class < ? > , String > ( ) ; <nl> private Map < Class < ? > , String > simpleClassNames = new HashMap < Class < ? > , String > ( ) ; <nl> @ @ - 59 , 31 + 61 , 17 @ @ public class Realm { <nl> private List < RealmChangeListener > changeListeners = new ArrayList < RealmChangeListener > ( ) ; <nl> boolean runEventHandler = false ; <nl> <nl> - public Realm ( Context context ) { <nl> - File filesDir = context . getFilesDir ( ) ; <nl> - this . filePath = new File ( filesDir , " default . realm " ) . getAbsolutePath ( ) ; <nl> - init ( ) ; <nl> - } <nl> - <nl> - public Realm ( Context context , String filePath ) { <nl> - File filesDir = context . getFilesDir ( ) ; <nl> - this . filePath = new File ( filesDir , filePath ) . getAbsolutePath ( ) ; <nl> - init ( ) ; <nl> - } <nl> - <nl> - public Realm ( File writeablePath ) throws IOException { <nl> - this ( writeablePath , " default . realm " ) ; <nl> - } <nl> - <nl> - public Realm ( File writeablePath , String filePath ) { <nl> - this . filePath = new File ( writeablePath , filePath ) . getAbsolutePath ( ) ; <nl> - init ( ) ; <nl> + / / The constructor in private to enforce the use of the static one <nl> + private Realm ( String absolutePath ) { <nl> + this . filePath = absolutePath ; <nl> + this . sharedGroup = new SharedGroup ( filePath , defaultDurability ) ; <nl> + this . transaction = sharedGroup . beginImplicitTransaction ( ) ; <nl> } <nl> <nl> private void startEventHandler ( ) { <nl> runEventHandler = true ; <nl> RealmEventHandler realmEventHandler = new RealmEventHandler ( this ) ; <nl> - ses . scheduleWithFixedDelay ( realmEventHandler , 0 , 100 , TimeUnit . MILLISECONDS ) ; <nl> + scheduledExecutorService . scheduleWithFixedDelay ( realmEventHandler , 0 , 100 , TimeUnit . MILLISECONDS ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 92 , 11 + 80 , 6 @ @ public class Realm { <nl> super . finalize ( ) ; <nl> } <nl> <nl> - private void init ( ) { <nl> - this . sg = new SharedGroup ( filePath , defaultDurability ) ; <nl> - this . transaction = sg . beginImplicitTransaction ( ) ; <nl> - } <nl> - <nl> public static void setDefaultDurability ( SharedGroup . Durability durability ) { <nl> defaultDurability = durability ; <nl> } <nl> @ @ - 112 , 13 + 95 , 63 @ @ public class Realm { <nl> return transaction . getTable ( simpleClassName ) ; <nl> } <nl> <nl> + public static Realm create ( Context context ) { <nl> + return Realm . create ( context , DEFAULT _ REALM _ NAME ) ; <nl> + } <nl> + <nl> + public static Realm create ( Context context , String fileName ) { <nl> + return Realm . create ( context . getFilesDir ( ) , fileName ) ; <nl> + } <nl> + <nl> + public static Realm create ( File writeableFolder ) { <nl> + return Realm . create ( writeableFolder , DEFAULT _ REALM _ NAME ) ; <nl> + } <nl> + <nl> + public static Realm create ( File writableFolder , String filename ) { <nl> + String absolutePath = new File ( writableFolder , filename ) . getAbsolutePath ( ) ; <nl> + return create ( absolutePath ) ; <nl> + } <nl> + <nl> + private static Realm create ( String absolutePath ) { <nl> + ThreadRealm threadRealm = realms . get ( absolutePath ) ; <nl> + if ( threadRealm = = null ) { <nl> + threadRealm = new ThreadRealm ( absolutePath ) ; <nl> + realms . put ( absolutePath , threadRealm ) ; <nl> + } <nl> + SoftReference < Realm > realmSoftReference = threadRealm . get ( ) ; <nl> + Realm realm = realmSoftReference . get ( ) ; <nl> + if ( realm = = null ) { <nl> + / / The garbage collector decided to get rid of the realm instance <nl> + threadRealm = new ThreadRealm ( absolutePath ) ; <nl> + realms . put ( absolutePath , threadRealm ) ; <nl> + realmSoftReference = threadRealm . get ( ) ; <nl> + realm = realmSoftReference . get ( ) ; <nl> + } <nl> + return realm ; <nl> + } <nl> + <nl> + / / This class stores soft - references to realm objects per thread per realm file <nl> + private static class ThreadRealm extends ThreadLocal < SoftReference < Realm > > { <nl> + private String absolutePath ; <nl> + <nl> + private ThreadRealm ( String absolutePath ) { <nl> + this . absolutePath = absolutePath ; <nl> + } <nl> + <nl> + @ Override <nl> + protected SoftReference < Realm > initialValue ( ) { <nl> + Realm realm = new Realm ( absolutePath ) ; <nl> + return new SoftReference < Realm > ( realm ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Instantiates and adds a new object to the realm <nl> * <nl> * @ return The new object <nl> * @ param < E > <nl> * / <nl> - public < E extends RealmObject > E create ( Class < E > clazz ) { <nl> + public < E extends RealmObject > E createObject ( Class < E > clazz ) { <nl> Table table ; <nl> table = tables . get ( clazz ) ; <nl> if ( table = = null ) { <nl> @ @ - 464 , 7 + 497 , 7 @ @ public class Realm { <nl> } <nl> <nl> boolean hasChanged ( ) { <nl> - return sg . hasChanged ( ) ; <nl> + return sharedGroup . hasChanged ( ) ; <nl> } <nl> <nl> / / Transactions <nl> @ @ - 479 , 7 + 512 , 7 @ @ public class Realm { <nl> public void beginWrite ( ) { <nl> <nl> / / If we are moving the transaction forward , send local notifications <nl> - if ( sg . hasChanged ( ) ) { <nl> + if ( sharedGroup . hasChanged ( ) ) { <nl> sendNotifications ( ) ; <nl> } <nl> <nl> @ @ - 501 , 14 + 534 , 6 @ @ public class Realm { <nl> getTable ( classSpec ) . clear ( ) ; <nl> } <nl> <nl> - public void clear ( ) { <nl> - transaction . endRead ( ) ; <nl> - sg . close ( ) ; <nl> - new File ( filePath ) . delete ( ) ; <nl> - new File ( filePath + " . lock " ) . delete ( ) ; <nl> - init ( ) ; <nl> - } <nl> - <nl> public int getVersion ( ) { <nl> return version ; <nl> } <nl> @ @ - 517 , 8 + 542 , 7 @ @ public class Realm { <nl> this . version = version ; <nl> } <nl> <nl> - private File getBytecodeCache ( ) { <nl> - return bytecodeCache ; <nl> + public String getFilePath ( ) { <nl> + return filePath ; <nl> } <nl> - <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmEventHandler . java b / realm / src / main / java / io / realm / RealmEventHandler . java <nl> index d6be5fd . . 08b2df0 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmEventHandler . java <nl> + + + b / realm / src / main / java / io / realm / RealmEventHandler . java <nl> @ @ - 20 , 22 + 20 , 16 @ @ import java . lang . ref . WeakReference ; <nl> <nl> public class RealmEventHandler implements Runnable { <nl> <nl> - private static int count = 0 ; <nl> - private int myCount ; <nl> private WeakReference < Realm > realmRef ; <nl> <nl> public RealmEventHandler ( Realm realm ) { <nl> realmRef = new WeakReference < Realm > ( realm ) ; <nl> - myCount = count + + ; <nl> } <nl> <nl> @ Override <nl> public void run ( ) { <nl> - <nl> Realm realm = realmRef . get ( ) ; <nl> - <nl> if ( realm ! = null & & realm . runEventHandler ) { <nl> - <nl> if ( realm . hasChanged ( ) ) { <nl> realm . sendNotifications ( ) ; <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java <nl> index 25785a2 . . 179691e 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / src / main / java / io / realm / RealmObject . java <nl> @ @ - 23 , 7 + 23 , 7 @ @ import io . realm . annotations . RealmClass ; <nl> public abstract class RealmObject { <nl> <nl> protected Row row ; <nl> - protected Realm realm = null ; <nl> + protected Realm realm ; <nl> <nl> protected Realm getRealm ( ) { <nl> return realm ; <nl> @ @ - 41 , 6 + 41 , 7 @ @ public abstract class RealmObject { <nl> this . row = row ; <nl> } <nl> <nl> + <nl> / / Creating objects <nl> <nl> / / / * *

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 02b4dd9 . . 091ab02 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 # # # Bug fixes 
 
 * Fixed a wrong JNI method declaration which might cause " method not found " crash on some devices . 
 + * Fixed a bug that ` Error ` in the background async thread is not forwared to the caller thread . 
 
 # # 1 . 1 . 0 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 index aaa191c . . 1e791b8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import io . realm . entities . PrimaryKeyAsBoxedInteger ; 
 import io . realm . entities . PrimaryKeyAsBoxedLong ; 
 import io . realm . entities . PrimaryKeyAsBoxedShort ; 
 import io . realm . entities . PrimaryKeyAsString ; 
 + import io . realm . internal . HandlerControllerConstants ; 
 import io . realm . internal . log . RealmLog ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . rule . RunTestInLooperThread ; 
 @ @ - 521 , 7 + 522 , 7 @ @ public class DynamicRealmTests { 
 @ Override 
 public boolean onInterceptInMessage ( int what ) { 
 switch ( what ) { 
 - case HandlerController . COMPLETED _ ASYNC _ REALM _ OBJECT : { 
 + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT : { 
 post ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 index cd80dd8 . . 7ccb8ba 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 @ @ - 42 , 6 + 42 , 7 @ @ import io . realm . entities . Dog ; 
 import io . realm . entities . NonLatinFieldNames ; 
 import io . realm . entities . Owner ; 
 import io . realm . instrumentation . MockActivityManager ; 
 + import io . realm . internal . HandlerControllerConstants ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . async . RealmThreadPoolExecutor ; 
 import io . realm . internal . log . RealmLog ; 
 @ @ - 488 , 7 + 489 , 7 @ @ public class RealmAsyncQueryTests { 
 switch ( what ) { 
 / / 5 . Intercept all messages from other threads . On the first complete , we advance the tread 
 / / which will cause the async query to rerun instead of triggering the change listener . 
 - case HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS : 
 + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : 
 if ( intercepts = = 1 ) { 
 / / We advance the Realm so we can simulate a retry 
 realm . beginTransaction ( ) ; 
 @ @ - 545 , 7 + 546 , 7 @ @ public class RealmAsyncQueryTests { 
 @ Override 
 public boolean onInterceptInMessage ( int what ) { 
 int intercepts = numberOfIntercept . getAndIncrement ( ) ; 
 - if ( what = = HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS & & intercepts = = 1 ) { 
 + if ( what = = HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS & & intercepts = = 1 ) { 
 / / 4 . The first time the async queries complete we start an update from 
 / / another background thread . This will cause queries to rerun when the 
 / / background thread notifies this thread . 
 @ @ - 652 , 7 + 653 , 7 @ @ public class RealmAsyncQueryTests { 
 / / Intercepts in order [ QueryCompleted , RealmChanged , QueryUpdated ] 
 int intercepts = numberOfIntercept . incrementAndGet ( ) ; 
 switch ( what ) { 
 - case HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS : { 
 + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : { 
 / / we advance the Realm so we can simulate a retry 
 if ( intercepts = = 1 ) { 
 realm . beginTransaction ( ) ; 
 @ @ - 710 , 7 + 711 , 7 @ @ public class RealmAsyncQueryTests { 
 @ Override 
 public boolean onInterceptInMessage ( int what ) { 
 switch ( what ) { 
 - case HandlerController . REALM _ CHANGED : { 
 + case HandlerControllerConstants . REALM _ CHANGED : { 
 / / should only intercept the first REALM _ CHANGED coming from the 
 / / background update thread 
 
 @ @ - 720 , 11 + 721 , 11 @ @ public class RealmAsyncQueryTests { 
 / / upcoming REALM _ CHANGED to batch update all async queries 
 return numberOfInterceptedChangeMessage . getAndIncrement ( ) = = 0 ; 
 } 
 - case HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS : { 
 + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : { 
 if ( numberOfCompletedAsyncQuery . incrementAndGet ( ) = = 2 ) { 
 / / both queries have completed now ( & their results should be ignored ) 
 / / now send the REALM _ CHANGED event that should batch update all queries 
 - sendEmptyMessage ( HandlerController . REALM _ CHANGED ) ; 
 + sendEmptyMessage ( HandlerControllerConstants . REALM _ CHANGED ) ; 
 } 
 } 
 } 
 @ @ - 944 , 7 + 945 , 7 @ @ public class RealmAsyncQueryTests { 
 public boolean onInterceptInMessage ( int what ) { 
 int intercepts = numberOfIntercept . incrementAndGet ( ) ; 
 switch ( what ) { 
 - case HandlerController . COMPLETED _ ASYNC _ REALM _ OBJECT : { 
 + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT : { 
 if ( intercepts = = 1 ) { 
 / / we advance the Realm so we can simulate a retry 
 realm . beginTransaction ( ) ; 
 @ @ - 1040 , 7 + 1041 , 7 @ @ public class RealmAsyncQueryTests { 
 / / In order [ QueryCompleted , RealmChanged , QueryUpdated ] 
 int intercepts = numberOfIntercept . incrementAndGet ( ) ; 
 switch ( what ) { 
 - case HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS : { 
 + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : { 
 if ( intercepts = = 1 ) { 
 / / We advance the Realm so we can simulate a retry before listeners are 
 / / called . 
 @ @ - 1103 , 7 + 1104 , 7 @ @ public class RealmAsyncQueryTests { 
 @ Override 
 public boolean onInterceptInMessage ( int what ) { 
 switch ( what ) { 
 - case HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS : { 
 + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : { 
 if ( numberOfIntercept . incrementAndGet ( ) = = 1 ) { 
 / / 6 . The first time the async queries complete we start an update from 
 / / another background thread . This will cause queries to rerun when the 
 @ @ - 1240 , 7 + 1241 , 7 @ @ public class RealmAsyncQueryTests { 
 @ Override 
 public boolean onInterceptInMessage ( int what ) { 
 int intercepts = numberOfIntercept . incrementAndGet ( ) ; 
 - if ( what = = HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS & & intercepts = = 1 ) { 
 + if ( what = = HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS & & intercepts = = 1 ) { 
 / / 6 . The first time the async queries complete we start an update from 
 / / another background thread . This will cause queries to rerun when the 
 / / background thread notifies this thread . 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 index 3eb26ed . . a7313db 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 @ @ - 117 , 9 + 117 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { 
 } 
 unitTestFailed = true ; 
 } 
 - if ( signalTestCompleted . getCount ( ) > 0 ) { 
 - signalTestCompleted . countDown ( ) ; 
 - } 
 + signalTestCompleted . countDown ( ) ; 
 if ( realm ! = null ) { 
 realm . close ( ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 10765ae . . 3780cfe 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import java . util . concurrent . atomic . AtomicBoolean ; 
 
 import io . realm . annotations . internal . OptionalAPI ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 + import io . realm . internal . HandlerControllerConstants ; 
 import io . realm . internal . InvalidRow ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . SharedGroupManager ; 
 @ @ - 410 , 14 + 411 , 14 @ @ abstract class BaseRealm implements Closeable { 
 / / that behaviour indicate a user bug . Previously this would be hidden as the UI would still 
 / / be responsive . 
 Message msg = Message . obtain ( ) ; 
 - msg . what = HandlerController . LOCAL _ COMMIT ; 
 - if ( ! handler . hasMessages ( HandlerController . LOCAL _ COMMIT ) ) { 
 - handler . removeMessages ( HandlerController . REALM _ CHANGED ) ; 
 + msg . what = HandlerControllerConstants . LOCAL _ COMMIT ; 
 + if ( ! handler . hasMessages ( HandlerControllerConstants . LOCAL _ COMMIT ) ) { 
 + handler . removeMessages ( HandlerControllerConstants . REALM _ CHANGED ) ; 
 messageHandled = handler . sendMessageAtFrontOfQueue ( msg ) ; 
 } 
 } else { 
 - if ( ! handler . hasMessages ( HandlerController . REALM _ CHANGED ) ) { 
 - messageHandled = handler . sendEmptyMessage ( HandlerController . REALM _ CHANGED ) ; 
 + if ( ! handler . hasMessages ( HandlerControllerConstants . REALM _ CHANGED ) ) { 
 + messageHandled = handler . sendEmptyMessage ( HandlerControllerConstants . REALM _ CHANGED ) ; 
 } 
 } 
 if ( ! messageHandled ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / HandlerController . java b / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 index b1e4762 . . 591858a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 + + + b / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . Future ; 
 
 + import io . realm . internal . HandlerControllerConstants ; 
 import io . realm . internal . IdentitySet ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 @ @ - 46 , 13 + 47 , 6 @ @ import io . realm . internal . log . RealmLog ; 
 * / 
 final class HandlerController implements Handler . Callback { 
 
 - static final int REALM _ CHANGED = 14930352 ; / / Hopefully it won ' t clash with other message IDs . 
 - static final int COMPLETED _ UPDATE _ ASYNC _ QUERIES = 24157817 ; 
 - static final int COMPLETED _ ASYNC _ REALM _ RESULTS = 39088169 ; 
 - static final int COMPLETED _ ASYNC _ REALM _ OBJECT = 63245986 ; 
 - static final int REALM _ ASYNC _ BACKGROUND _ EXCEPTION = 102334155 ; 
 - static final int LOCAL _ COMMIT = 165580141 ; 
 - 
 private final static Boolean NO _ REALM _ QUERY = Boolean . TRUE ; 
 
 / / Keep a strong reference to the registered RealmChangeListener 
 @ @ - 119 , 28 + 113 , 28 @ @ final class HandlerController implements Handler . Callback { 
 QueryUpdateTask . Result result ; 
 switch ( message . what ) { 
 
 - case LOCAL _ COMMIT : 
 - case REALM _ CHANGED : 
 - realmChanged ( message . what = = LOCAL _ COMMIT ) ; 
 + case HandlerControllerConstants . LOCAL _ COMMIT : 
 + case HandlerControllerConstants . REALM _ CHANGED : 
 + realmChanged ( message . what = = HandlerControllerConstants . LOCAL _ COMMIT ) ; 
 break ; 
 
 - case COMPLETED _ ASYNC _ REALM _ RESULTS : 
 + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS : 
 result = ( QueryUpdateTask . Result ) message . obj ; 
 completedAsyncRealmResults ( result ) ; 
 break ; 
 
 - case COMPLETED _ ASYNC _ REALM _ OBJECT : 
 + case HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT : 
 result = ( QueryUpdateTask . Result ) message . obj ; 
 completedAsyncRealmObject ( result ) ; 
 break ; 
 
 - case COMPLETED _ UPDATE _ ASYNC _ QUERIES : 
 + case HandlerControllerConstants . COMPLETED _ UPDATE _ ASYNC _ QUERIES : 
 / / this is called once the background thread completed the update of the async queries 
 result = ( QueryUpdateTask . Result ) message . obj ; 
 completedAsyncQueriesUpdate ( result ) ; 
 break ; 
 
 - case REALM _ ASYNC _ BACKGROUND _ EXCEPTION : 
 + case HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION : 
 / / Don ' t fail silently in the background in case of Core exception 
 throw ( Error ) message . obj ; 
 
 @ @ - 277 , 7 + 271 , 7 @ @ final class HandlerController implements Handler . Callback { 
 . addObject ( next . getKey ( ) , 
 next . getValue ( ) . handoverQueryPointer ( ) , 
 next . getValue ( ) . getArgument ( ) ) 
 - . sendToHandler ( realm . handler , COMPLETED _ ASYNC _ REALM _ OBJECT ) 
 + . sendToHandler ( realm . handler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT ) 
 . build ( ) ) ; 
 
 } else { 
 @ @ - 418 , 7 + 412 , 7 @ @ final class HandlerController implements Handler . Callback { 
 } 
 if ( realmResultsQueryStep ! = null ) { 
 QueryUpdateTask queryUpdateTask = realmResultsQueryStep 
 - . sendToHandler ( realm . handler , COMPLETED _ UPDATE _ ASYNC _ QUERIES ) 
 + . sendToHandler ( realm . handler , HandlerControllerConstants . COMPLETED _ UPDATE _ ASYNC _ QUERIES ) 
 . build ( ) ; 
 updateAsyncQueriesTask = Realm . asyncTaskExecutor . submitQueryUpdate ( queryUpdateTask ) ; 
 } 
 @ @ - 501 , 7 + 495 , 7 @ @ final class HandlerController implements Handler . Callback { 
 . add ( weakRealmResults , 
 query . handoverQueryPointer ( ) , 
 query . getArgument ( ) ) 
 - . sendToHandler ( realm . handler , COMPLETED _ ASYNC _ REALM _ RESULTS ) 
 + . sendToHandler ( realm . handler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS ) 
 . build ( ) ; 
 
 Realm . asyncTaskExecutor . submitQueryUpdate ( queryUpdateTask ) ; 
 @ @ - 643 , 7 + 637 , 7 @ @ final class HandlerController implements Handler . Callback { 
 . addObject ( realmObjectWeakReference , 
 realmQuery . handoverQueryPointer ( ) , 
 realmQuery . getArgument ( ) ) 
 - . sendToHandler ( realm . handler , COMPLETED _ ASYNC _ REALM _ OBJECT ) 
 + . sendToHandler ( realm . handler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT ) 
 . build ( ) ; 
 
 Realm . asyncTaskExecutor . submitQueryUpdate ( queryUpdateTask ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index d60e7a8 . . 7f0494b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . util . concurrent . Callable ; 
 import java . util . concurrent . Future ; 
 
 import io . realm . annotations . Required ; 
 + import io . realm . internal . HandlerControllerConstants ; 
 import io . realm . internal . LinkView ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 @ @ - 1184 , 13 + 1185 , 13 @ @ public final class RealmQuery < E extends RealmModel > { 
 result . updatedTableViews . put ( weakRealmResults , handoverTableViewPointer ) ; 
 result . versionID = sharedGroup . getVersion ( ) ; 
 closeSharedGroupAndSendMessageToHandler ( sharedGroup , 
 - weakHandler , HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; 
 + weakHandler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; 
 
 return handoverTableViewPointer ; 
 - } catch ( Exception e ) { 
 + } catch ( Throwable e ) { 
 RealmLog . e ( e . getMessage ( ) , e ) ; 
 closeSharedGroupAndSendMessageToHandler ( sharedGroup , 
 - weakHandler , HandlerController . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; 
 + weakHandler , HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; 
 
 } finally { 
 if ( sharedGroup ! = null & & ! sharedGroup . isClosed ( ) ) { 
 @ @ - 1491 , 7 + 1492 , 7 @ @ public final class RealmQuery < E extends RealmModel > { 
 result . updatedTableViews . put ( weakRealmResults , handoverTableViewPointer ) ; 
 result . versionID = sharedGroup . getVersion ( ) ; 
 closeSharedGroupAndSendMessageToHandler ( sharedGroup , 
 - weakHandler , HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; 
 + weakHandler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; 
 
 return handoverTableViewPointer ; 
 
 @ @ - 1500 , 10 + 1501 , 10 @ @ public final class RealmQuery < E extends RealmModel > { 
 RealmLog . d ( " findAllAsync handover could not complete due to a BadVersionException . " + 
 " Retry is scheduled by a REALM _ CHANGED event . " ) ; 
 
 - } catch ( Exception e ) { 
 + } catch ( Throwable e ) { 
 RealmLog . e ( e . getMessage ( ) , e ) ; 
 closeSharedGroupAndSendMessageToHandler ( sharedGroup , 
 - weakHandler , HandlerController . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; 
 + weakHandler , HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; 
 
 } finally { 
 if ( sharedGroup ! = null & & ! sharedGroup . isClosed ( ) ) { 
 @ @ - 1610 , 7 + 1611 , 7 @ @ public final class RealmQuery < E extends RealmModel > { 
 result . updatedTableViews . put ( weakRealmResults , handoverTableViewPointer ) ; 
 result . versionID = sharedGroup . getVersion ( ) ; 
 closeSharedGroupAndSendMessageToHandler ( sharedGroup , 
 - weakHandler , HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; 
 + weakHandler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; 
 
 return handoverTableViewPointer ; 
 } catch ( BadVersionException e ) { 
 @ @ - 1618 , 10 + 1619 , 10 @ @ public final class RealmQuery < E extends RealmModel > { 
 RealmLog . d ( " findAllSortedAsync handover could not complete due to a BadVersionException . " + 
 " Retry is scheduled by a REALM _ CHANGED event . " ) ; 
 
 - } catch ( Exception e ) { 
 + } catch ( Throwable e ) { 
 RealmLog . e ( e . getMessage ( ) , e ) ; 
 closeSharedGroupAndSendMessageToHandler ( sharedGroup , 
 - weakHandler , HandlerController . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; 
 + weakHandler , HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; 
 
 } finally { 
 if ( sharedGroup ! = null & & ! sharedGroup . isClosed ( ) ) { 
 @ @ - 1783 , 7 + 1784 , 7 @ @ public final class RealmQuery < E extends RealmModel > { 
 result . updatedTableViews . put ( weakRealmResults , handoverTableViewPointer ) ; 
 result . versionID = sharedGroup . getVersion ( ) ; 
 closeSharedGroupAndSendMessageToHandler ( sharedGroup , 
 - weakHandler , HandlerController . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; 
 + weakHandler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) ; 
 
 return handoverTableViewPointer ; 
 } catch ( BadVersionException e ) { 
 @ @ - 1791 , 10 + 1792 , 10 @ @ public final class RealmQuery < E extends RealmModel > { 
 RealmLog . d ( " findAllSortedAsync handover could not complete due to a BadVersionException . " + 
 " Retry is scheduled by a REALM _ CHANGED event . " ) ; 
 
 - } catch ( Exception e ) { 
 + } catch ( Throwable e ) { 
 RealmLog . e ( e . getMessage ( ) , e ) ; 
 closeSharedGroupAndSendMessageToHandler ( sharedGroup , 
 - weakHandler , HandlerController . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; 
 + weakHandler , HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; 
 
 } finally { 
 if ( sharedGroup ! = null & & ! sharedGroup . isClosed ( ) ) { 
 @ @ - 1926 , 15 + 1927 , 15 @ @ public final class RealmQuery < E extends RealmModel > { 
 result . updatedRow . put ( realmObjectWeakReference , handoverRowPointer ) ; 
 result . versionID = sharedGroup . getVersion ( ) ; 
 closeSharedGroupAndSendMessageToHandler ( sharedGroup , 
 - weakHandler , HandlerController . COMPLETED _ ASYNC _ REALM _ OBJECT , result ) ; 
 + weakHandler , HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT , result ) ; 
 
 return handoverRowPointer ; 
 
 - } catch ( Exception e ) { 
 + } catch ( Throwable e ) { 
 RealmLog . e ( e . getMessage ( ) , e ) ; 
 / / handler can ' t throw a checked exception need to wrap it into unchecked Exception 
 closeSharedGroupAndSendMessageToHandler ( sharedGroup , 
 - weakHandler , HandlerController . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; 
 + weakHandler , HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) ; 
 
 } finally { 
 if ( sharedGroup ! = null & & ! sharedGroup . isClosed ( ) ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / HandlerControllerConstants . java b / realm / realm - library / src / main / java / io / realm / internal / HandlerControllerConstants . java 
 new file mode 100644 
 index 0000000 . . 029c91b 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / HandlerControllerConstants . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . internal ; 
 + 
 + / * * 
 + * This class is to share some Android handler related constants between package { @ link io . realm } and 
 + * { @ link io . realm . internal . async } . 
 + * / 
 + public final class HandlerControllerConstants { 
 + public static final int REALM _ CHANGED = 14930352 ; / / Hopefully it won ' t clash with other message IDs . 
 + public static final int COMPLETED _ UPDATE _ ASYNC _ QUERIES = 24157817 ; 
 + public static final int COMPLETED _ ASYNC _ REALM _ RESULTS = 39088169 ; 
 + public static final int COMPLETED _ ASYNC _ REALM _ OBJECT = 63245986 ; 
 + public static final int REALM _ ASYNC _ BACKGROUND _ EXCEPTION = 102334155 ; 
 + public static final int LOCAL _ COMMIT = 165580141 ; 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / async / QueryUpdateTask . java b / realm / realm - library / src / main / java / io / realm / internal / async / QueryUpdateTask . java 
 index 179a839 . . a7be9d9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / async / QueryUpdateTask . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / async / QueryUpdateTask . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . List ; 
 import io . realm . RealmConfiguration ; 
 import io . realm . RealmModel ; 
 import io . realm . RealmResults ; 
 + import io . realm . internal . HandlerControllerConstants ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . SharedGroup ; 
 import io . realm . internal . Table ; 
 @ @ - 100 , 8 + 101 , 17 @ @ public class QueryUpdateTask implements Runnable { 
 handler . obtainMessage ( message , result ) . sendToTarget ( ) ; 
 } 
 
 - } catch ( Exception e ) { 
 + } catch ( BadVersionException e ) { 
 + / / In some rare race conditions , this can happen . In that case , just ignore the error . 
 + RealmLog . d ( " Query update task could not complete due to a BadVersionException . " + 
 + " Retry is scheduled by a REALM _ CHANGED event . " ) ; 
 + 
 + } catch ( Throwable e ) { 
 RealmLog . e ( e . getMessage ( ) , e ) ; 
 + Handler handler = callerHandler . get ( ) ; 
 + if ( handler ! = null & & handler . getLooper ( ) . getThread ( ) . isAlive ( ) ) { 
 + handler . obtainMessage ( HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( e ) ) . sendToTarget ( ) ; 
 + } 
 
 } finally { 
 if ( sharedGroup ! = null ) {

NEAREST DIFF:
diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java 
 index f24f3e3 . . 8024608 100755 
 - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java 
 + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityLoader . java 
 @ @ - 8 , 9 + 8 , 11 @ @ import android . util . Log ; 
 import com . google . gson . Gson ; 
 import com . google . gson . reflect . TypeToken ; 
 
 + import java . io . File ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 + import java . util . Arrays ; 
 import java . util . List ; 
 
 import io . realm . Realm ; 
 @ @ - 53 , 13 + 55 , 25 @ @ public class CityLoader extends AsyncTaskLoader < List < City > > { 
 
 dataIsReady = true ; 
 
 + / / Delete realm files 
 + File writablePath = context . getFilesDir ( ) ; 
 + for ( File file : Arrays . asList ( 
 + new File ( writablePath , Realm . DEFAULT _ REALM _ NAME ) , 
 + new File ( writablePath , Realm . DEFAULT _ REALM _ NAME + " . lock " ) ) ) { 
 + if ( file . exists ( ) ) { 
 + boolean deleteResult = file . delete ( ) ; 
 + if ( ! deleteResult ) { 
 + throw new AssertionError ( " Could not delete file : " + file . getAbsolutePath ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 / / Store the retrieved items to the Realm 
 - Realm realm = new Realm ( context ) ; 
 - realm . clear ( ) ; / / Delete the Realm ( in the event of a Reset ) 
 + Realm realm = Realm . create ( context ) ; 
 
 realm . beginWrite ( ) ; 
 for ( City city : items ) { 
 - City realmCity = realm . create ( City . class ) ; 
 + City realmCity = realm . createObject ( City . class ) ; 
 realmCity . setName ( city . getName ( ) ) ; 
 realmCity . setVotes ( city . getVotes ( ) ) ; 
 } 
 diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 index 71ae952 . . 7e8feb3 100644 
 - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load 
 } 
 
 public void updateCities ( ) { 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 RealmResults < City > cities = realm . where ( City . class ) . findAll ( ) ; 
 mAdapter . setData ( cities ) ; 
 
 @ @ - 104 , 7 + 104 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load 
 City modifiedCity = ( City ) mAdapter . getItem ( position ) ; 
 
 / / Update the realm object affected by the user 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 RealmQuery < City > query = realm . where ( City . class ) . beginsWith ( " name " , modifiedCity . getName ( ) ) ; 
 City city = query . findFirst ( ) ; 
 realm . beginWrite ( ) ; 
 diff - - git a / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java b / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java 
 index cc41ef1 . . a97cb09 100644 
 - - - a / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java 
 + + + b / distribution / RealmIntroExample / app / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java 
 @ @ - 66 , 11 + 66 , 11 @ @ public class RealmIntroExampleActivity extends Activity { 
 showStatus ( " Performing basic Read / Write operation . . . " ) ; 
 
 / / Open a default realm 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 
 / / Add a person in a write transaction 
 realm . beginWrite ( ) ; 
 - Person person = realm . create ( Person . class ) ; 
 + Person person = realm . createObject ( Person . class ) ; 
 person . setName ( " Happy Person " ) ; 
 person . setAge ( 14 ) ; 
 realm . commit ( ) ; 
 @ @ - 83 , 7 + 83 , 7 @ @ public class RealmIntroExampleActivity extends Activity { 
 private void basicQuery ( ) throws java . io . IOException { 
 showStatus ( " \ nPerforming basic Query operation . . . " ) ; 
 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; 
 RealmResults < Person > results = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; 
 showStatus ( " Size of result set : " + results . size ( ) ) ; 
 @ @ - 93 , 7 + 93 , 7 @ @ public class RealmIntroExampleActivity extends Activity { 
 showStatus ( " \ nPerforming basic Update operation . . . " ) ; 
 
 / / Open a default realm 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 
 / / Get the first object 
 Person person = realm . where ( Person . class ) . findFirst ( ) ; 
 @ @ - 118 , 19 + 118 , 19 @ @ public class RealmIntroExampleActivity extends Activity { 
 String status = " \ nPerforming complex Read / Write operation . . . " ; 
 
 / / Open a default realm 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 
 / / Add ten persons in one write transaction 
 realm . beginWrite ( ) ; 
 - Dog fido = realm . create ( Dog . class ) ; 
 + Dog fido = realm . createObject ( Dog . class ) ; 
 fido . setName ( " fido " ) ; 
 for ( int i = 0 ; i < 10 ; i + + ) { 
 - Person person = realm . create ( Person . class ) ; 
 + Person person = realm . createObject ( Person . class ) ; 
 person . setName ( " Person no . " + i ) ; 
 person . setAge ( i ) ; 
 person . setDog ( fido ) ; 
 for ( int j = 0 ; j < i ; j + + ) { 
 - Cat cat = realm . create ( Cat . class ) ; 
 + Cat cat = realm . createObject ( Cat . class ) ; 
 cat . setName ( " Cat _ " + j ) ; 
 person . getCats ( ) . add ( cat ) ; 
 } 
 @ @ - 157 , 7 + 157 , 7 @ @ public class RealmIntroExampleActivity extends Activity { 
 private String complexQuery ( ) throws IOException { 
 String status = " \ n \ nPerforming complex Query operation . . . " ; 
 
 - Realm realm = new Realm ( this ) ; 
 + Realm realm = Realm . create ( this ) ; 
 status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; 
 
 / / Find all persons where age between 7 and 9 and name begins with " Person " . 
 diff - - git a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 index 851cdda . . e4e91e8 100644 
 - - - a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 + + + b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 @ @ - 83 , 15 + 83 , 14 @ @ public class PerformanceTask extends AsyncTask < Integer , String , String > { 
 System . out . println ( " # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Testing new interface " ) ; 
 
 Realm . setDefaultDurability ( SharedGroup . Durability . FULL ) ; 
 - Realm realm = new Realm ( activity ) ; 
 - realm . clear ( ) ; 
 + Realm realm = Realm . create ( activity ) ; 
 
 timer = System . currentTimeMillis ( ) ; 
 try { 
 / / Debug . startMethodTracing ( " writes " ) ; 
 realm . beginWrite ( ) ; 
 for ( int i = 0 ; i < listSize ; i + + ) { 
 - User user = realm . create ( User . class ) ; 
 + User user = realm . createObject ( User . class ) ; 
 
 user . setId ( i ) ; 
 user . setName ( " John Doe " ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 new file mode 100644 
 index 0000000 . . 74cc428 
 - - - / dev / null 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package io . realm ; 
 + 
 + import android . test . AndroidTestCase ; 
 + 
 + public class RealmTest extends AndroidTestCase { 
 + 
 + public void testRealmThreadCachingSpeed ( ) { 
 + long tic1 = System . currentTimeMillis ( ) ; 
 + Realm realm1 = Realm . create ( this . getContext ( ) ) ; 
 + long toc1 = System . currentTimeMillis ( ) ; 
 + long t1 = toc1 - tic1 ; 
 + 
 + long tic2 = System . currentTimeMillis ( ) ; 
 + Realm realm2 = Realm . create ( this . getContext ( ) ) ; 
 + long toc2 = System . currentTimeMillis ( ) ; 
 + long t2 = toc2 - tic2 ; 
 + 
 + / / At least 5 times faster ? 
 + assertTrue ( t2 < ( t1 / 5 ) ) ; 
 + } 
 + } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 0e10436 . . 782ddca 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 19 , 7 + 19 , 7 @ @ package io . realm ; 
 import android . content . Context ; 
 
 import java . io . File ; 
 - import java . io . IOException ; 
 + import java . lang . ref . SoftReference ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 @ @ - 40 , 13 + 40 , 15 @ @ import io . realm . internal . Table ; 
 public class Realm { 
 
 private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; 
 + public static final String DEFAULT _ REALM _ NAME = " default . realm " ; 
 + private static final Map < String , ThreadRealm > realms = new HashMap < String , ThreadRealm > ( ) ; 
 
 - private SharedGroup sg ; 
 + private SharedGroup sharedGroup ; 
 private ImplicitTransaction transaction ; 
 private String filePath ; 
 private int version ; 
 - private File bytecodeCache ; 
 - private ScheduledExecutorService ses = Executors . newSingleThreadScheduledExecutor ( ) ; 
 + private ScheduledExecutorService scheduledExecutorService 
 + = Executors . newSingleThreadScheduledExecutor ( ) ; 
 
 private Map < Class < ? > , String > generatedClassNames = new HashMap < Class < ? > , String > ( ) ; 
 private Map < Class < ? > , String > simpleClassNames = new HashMap < Class < ? > , String > ( ) ; 
 @ @ - 59 , 31 + 61 , 17 @ @ public class Realm { 
 private List < RealmChangeListener > changeListeners = new ArrayList < RealmChangeListener > ( ) ; 
 boolean runEventHandler = false ; 
 
 - public Realm ( Context context ) { 
 - File filesDir = context . getFilesDir ( ) ; 
 - this . filePath = new File ( filesDir , " default . realm " ) . getAbsolutePath ( ) ; 
 - init ( ) ; 
 - } 
 - 
 - public Realm ( Context context , String filePath ) { 
 - File filesDir = context . getFilesDir ( ) ; 
 - this . filePath = new File ( filesDir , filePath ) . getAbsolutePath ( ) ; 
 - init ( ) ; 
 - } 
 - 
 - public Realm ( File writeablePath ) throws IOException { 
 - this ( writeablePath , " default . realm " ) ; 
 - } 
 - 
 - public Realm ( File writeablePath , String filePath ) { 
 - this . filePath = new File ( writeablePath , filePath ) . getAbsolutePath ( ) ; 
 - init ( ) ; 
 + / / The constructor in private to enforce the use of the static one 
 + private Realm ( String absolutePath ) { 
 + this . filePath = absolutePath ; 
 + this . sharedGroup = new SharedGroup ( filePath , defaultDurability ) ; 
 + this . transaction = sharedGroup . beginImplicitTransaction ( ) ; 
 } 
 
 private void startEventHandler ( ) { 
 runEventHandler = true ; 
 RealmEventHandler realmEventHandler = new RealmEventHandler ( this ) ; 
 - ses . scheduleWithFixedDelay ( realmEventHandler , 0 , 100 , TimeUnit . MILLISECONDS ) ; 
 + scheduledExecutorService . scheduleWithFixedDelay ( realmEventHandler , 0 , 100 , TimeUnit . MILLISECONDS ) ; 
 } 
 
 @ Override 
 @ @ - 92 , 11 + 80 , 6 @ @ public class Realm { 
 super . finalize ( ) ; 
 } 
 
 - private void init ( ) { 
 - this . sg = new SharedGroup ( filePath , defaultDurability ) ; 
 - this . transaction = sg . beginImplicitTransaction ( ) ; 
 - } 
 - 
 public static void setDefaultDurability ( SharedGroup . Durability durability ) { 
 defaultDurability = durability ; 
 } 
 @ @ - 112 , 13 + 95 , 63 @ @ public class Realm { 
 return transaction . getTable ( simpleClassName ) ; 
 } 
 
 + public static Realm create ( Context context ) { 
 + return Realm . create ( context , DEFAULT _ REALM _ NAME ) ; 
 + } 
 + 
 + public static Realm create ( Context context , String fileName ) { 
 + return Realm . create ( context . getFilesDir ( ) , fileName ) ; 
 + } 
 + 
 + public static Realm create ( File writeableFolder ) { 
 + return Realm . create ( writeableFolder , DEFAULT _ REALM _ NAME ) ; 
 + } 
 + 
 + public static Realm create ( File writableFolder , String filename ) { 
 + String absolutePath = new File ( writableFolder , filename ) . getAbsolutePath ( ) ; 
 + return create ( absolutePath ) ; 
 + } 
 + 
 + private static Realm create ( String absolutePath ) { 
 + ThreadRealm threadRealm = realms . get ( absolutePath ) ; 
 + if ( threadRealm = = null ) { 
 + threadRealm = new ThreadRealm ( absolutePath ) ; 
 + realms . put ( absolutePath , threadRealm ) ; 
 + } 
 + SoftReference < Realm > realmSoftReference = threadRealm . get ( ) ; 
 + Realm realm = realmSoftReference . get ( ) ; 
 + if ( realm = = null ) { 
 + / / The garbage collector decided to get rid of the realm instance 
 + threadRealm = new ThreadRealm ( absolutePath ) ; 
 + realms . put ( absolutePath , threadRealm ) ; 
 + realmSoftReference = threadRealm . get ( ) ; 
 + realm = realmSoftReference . get ( ) ; 
 + } 
 + return realm ; 
 + } 
 + 
 + / / This class stores soft - references to realm objects per thread per realm file 
 + private static class ThreadRealm extends ThreadLocal < SoftReference < Realm > > { 
 + private String absolutePath ; 
 + 
 + private ThreadRealm ( String absolutePath ) { 
 + this . absolutePath = absolutePath ; 
 + } 
 + 
 + @ Override 
 + protected SoftReference < Realm > initialValue ( ) { 
 + Realm realm = new Realm ( absolutePath ) ; 
 + return new SoftReference < Realm > ( realm ) ; 
 + } 
 + } 
 + 
 / * * 
 * Instantiates and adds a new object to the realm 
 * 
 * @ return The new object 
 * @ param < E > 
 * / 
 - public < E extends RealmObject > E create ( Class < E > clazz ) { 
 + public < E extends RealmObject > E createObject ( Class < E > clazz ) { 
 Table table ; 
 table = tables . get ( clazz ) ; 
 if ( table = = null ) { 
 @ @ - 464 , 7 + 497 , 7 @ @ public class Realm { 
 } 
 
 boolean hasChanged ( ) { 
 - return sg . hasChanged ( ) ; 
 + return sharedGroup . hasChanged ( ) ; 
 } 
 
 / / Transactions 
 @ @ - 479 , 7 + 512 , 7 @ @ public class Realm { 
 public void beginWrite ( ) { 
 
 / / If we are moving the transaction forward , send local notifications 
 - if ( sg . hasChanged ( ) ) { 
 + if ( sharedGroup . hasChanged ( ) ) { 
 sendNotifications ( ) ; 
 } 
 
 @ @ - 501 , 14 + 534 , 6 @ @ public class Realm { 
 getTable ( classSpec ) . clear ( ) ; 
 } 
 
 - public void clear ( ) { 
 - transaction . endRead ( ) ; 
 - sg . close ( ) ; 
 - new File ( filePath ) . delete ( ) ; 
 - new File ( filePath + " . lock " ) . delete ( ) ; 
 - init ( ) ; 
 - } 
 - 
 public int getVersion ( ) { 
 return version ; 
 } 
 @ @ - 517 , 8 + 542 , 7 @ @ public class Realm { 
 this . version = version ; 
 } 
 
 - private File getBytecodeCache ( ) { 
 - return bytecodeCache ; 
 + public String getFilePath ( ) { 
 + return filePath ; 
 } 
 - 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmEventHandler . java b / realm / src / main / java / io / realm / RealmEventHandler . java 
 index d6be5fd . . 08b2df0 100644 
 - - - a / realm / src / main / java / io / realm / RealmEventHandler . java 
 + + + b / realm / src / main / java / io / realm / RealmEventHandler . java 
 @ @ - 20 , 22 + 20 , 16 @ @ import java . lang . ref . WeakReference ; 
 
 public class RealmEventHandler implements Runnable { 
 
 - private static int count = 0 ; 
 - private int myCount ; 
 private WeakReference < Realm > realmRef ; 
 
 public RealmEventHandler ( Realm realm ) { 
 realmRef = new WeakReference < Realm > ( realm ) ; 
 - myCount = count + + ; 
 } 
 
 @ Override 
 public void run ( ) { 
 - 
 Realm realm = realmRef . get ( ) ; 
 - 
 if ( realm ! = null & & realm . runEventHandler ) { 
 - 
 if ( realm . hasChanged ( ) ) { 
 realm . sendNotifications ( ) ; 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java 
 index 25785a2 . . 179691e 100644 
 - - - a / realm / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / src / main / java / io / realm / RealmObject . java 
 @ @ - 23 , 7 + 23 , 7 @ @ import io . realm . annotations . RealmClass ; 
 public abstract class RealmObject { 
 
 protected Row row ; 
 - protected Realm realm = null ; 
 + protected Realm realm ; 
 
 protected Realm getRealm ( ) { 
 return realm ; 
 @ @ - 41 , 6 + 41 , 7 @ @ public abstract class RealmObject { 
 this . row = row ; 
 } 
 
 + 
 / / Creating objects 
 
 / / / * *
