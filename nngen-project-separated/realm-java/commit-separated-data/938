BLEU SCORE: 0.04844232281716619

TEST MSG: Adding some documentation .
GENERATED MSG: loadLibrary should be a synchronized operation

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java <nl> index df6626d . . acffc7a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java <nl> @ @ - 99 , 6 + 99 , 10 @ @ public class RealmCore { <nl> <nl> / / Although loadLibrary is synchronized internally from AOSP 4 . 3 , for the compatibility reason , <nl> / / KEEP synchronized here for the old devices ! <nl> + <nl> + / * * <nl> + * Loads the . so file . This method is useful for static blocks as it does not rely on access to a Context . <nl> + * / <nl> public static synchronized void loadLibrary ( ) { <nl> if ( libraryIsLoaded ) { <nl> / / The java native should ensure only load the lib once , but we met some problems before . <nl> @ @ - 125 , 6 + 129 , 12 @ @ public class RealmCore { <nl> Version . coreLibVersionCompatible ( true ) ; <nl> } <nl> <nl> + / * * <nl> + * Loads the . so file . Typically , the . so file is installed and can be found by System . loadLibrary ( ) but <nl> + * can be damaged or missing . This happens for the Android installer , especially when apps are installed <nl> + * through other means than the official Play store . In this case , the . so file can be found in the . apk . <nl> + * In other to access the . apk , a Context much be provided . <nl> + * / <nl> public static synchronized void loadLibrary ( Context context ) { <nl> if ( libraryIsLoaded ) { <nl> return ;
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index e6cd27e . . 652cb7a 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> 0 . 83 <nl> * BREAKING CHANGE : Removed deprecated methods and constructors from the Realm class . <nl> + * Fixed a bug which might cause failure when loading the native library . <nl> <nl> 0 . 82 . 1 <nl> * Fixed a bug where using the wrong encryption key first caused the right key to be seen as invalid . <nl> diff - - git a / realm / src / main / java / io / realm / internal / RealmCore . java b / realm / src / main / java / io / realm / internal / RealmCore . java <nl> index a2fac95 . . e1e7515 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / RealmCore . java <nl> + + + b / realm / src / main / java / io / realm / internal / RealmCore . java <nl> @ @ - 25 , 7 + 25 , 6 @ @ import java . io . Serializable ; <nl> import java . lang . reflect . Field ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . Locale ; <nl> - import java . util . concurrent . atomic . AtomicBoolean ; <nl> <nl> / * * <nl> * Utility methods for Realm Core . <nl> @ @ - 39 , 7 + 38 , 7 @ @ public class RealmCore { <nl> private static final String JAVA _ LIBRARY _ PATH = " java . library . path " ; <nl> / / * / <nl> <nl> - private static AtomicBoolean libraryIsLoaded = new AtomicBoolean ( false ) ; <nl> + private static volatile boolean libraryIsLoaded = false ; <nl> <nl> / * <nl> private static String getJniFileName ( ) <nl> @ @ - 94 , 10 + 93 , 14 @ @ public class RealmCore { <nl> } <nl> * / <nl> <nl> - public static void loadLibrary ( ) { <nl> - if ( libraryIsLoaded . get ( ) ) <nl> - / / only load library once <nl> + / / Although loadLibrary is synchronized internally from AOSP 4 . 3 , for the compatibility reason , <nl> + / / KEEP synchronized here for the old devices ! <nl> + public static synchronized void loadLibrary ( ) { <nl> + if ( libraryIsLoaded ) { <nl> + / / The java native should ensure only load the lib once , but we met some problems before . <nl> + / / So keep the flag . <nl> return ; <nl> + } <nl> <nl> if ( osIsWindows ( ) ) { <nl> loadLibraryWindows ( ) ; <nl> @ @ - 113 , 7 + 116 , 7 @ @ public class RealmCore { <nl> } <nl> System . loadLibrary ( jnilib ) ; <nl> } <nl> - libraryIsLoaded . set ( true ) ; <nl> + libraryIsLoaded = true ; <nl> <nl> Version . coreLibVersionCompatible ( true ) ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java 
 index df6626d . . acffc7a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java 
 @ @ - 99 , 6 + 99 , 10 @ @ public class RealmCore { 
 
 / / Although loadLibrary is synchronized internally from AOSP 4 . 3 , for the compatibility reason , 
 / / KEEP synchronized here for the old devices ! 
 + 
 + / * * 
 + * Loads the . so file . This method is useful for static blocks as it does not rely on access to a Context . 
 + * / 
 public static synchronized void loadLibrary ( ) { 
 if ( libraryIsLoaded ) { 
 / / The java native should ensure only load the lib once , but we met some problems before . 
 @ @ - 125 , 6 + 129 , 12 @ @ public class RealmCore { 
 Version . coreLibVersionCompatible ( true ) ; 
 } 
 
 + / * * 
 + * Loads the . so file . Typically , the . so file is installed and can be found by System . loadLibrary ( ) but 
 + * can be damaged or missing . This happens for the Android installer , especially when apps are installed 
 + * through other means than the official Play store . In this case , the . so file can be found in the . apk . 
 + * In other to access the . apk , a Context much be provided . 
 + * / 
 public static synchronized void loadLibrary ( Context context ) { 
 if ( libraryIsLoaded ) { 
 return ;

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index e6cd27e . . 652cb7a 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 0 . 83 
 * BREAKING CHANGE : Removed deprecated methods and constructors from the Realm class . 
 + * Fixed a bug which might cause failure when loading the native library . 
 
 0 . 82 . 1 
 * Fixed a bug where using the wrong encryption key first caused the right key to be seen as invalid . 
 diff - - git a / realm / src / main / java / io / realm / internal / RealmCore . java b / realm / src / main / java / io / realm / internal / RealmCore . java 
 index a2fac95 . . e1e7515 100644 
 - - - a / realm / src / main / java / io / realm / internal / RealmCore . java 
 + + + b / realm / src / main / java / io / realm / internal / RealmCore . java 
 @ @ - 25 , 7 + 25 , 6 @ @ import java . io . Serializable ; 
 import java . lang . reflect . Field ; 
 import java . nio . ByteBuffer ; 
 import java . util . Locale ; 
 - import java . util . concurrent . atomic . AtomicBoolean ; 
 
 / * * 
 * Utility methods for Realm Core . 
 @ @ - 39 , 7 + 38 , 7 @ @ public class RealmCore { 
 private static final String JAVA _ LIBRARY _ PATH = " java . library . path " ; 
 / / * / 
 
 - private static AtomicBoolean libraryIsLoaded = new AtomicBoolean ( false ) ; 
 + private static volatile boolean libraryIsLoaded = false ; 
 
 / * 
 private static String getJniFileName ( ) 
 @ @ - 94 , 10 + 93 , 14 @ @ public class RealmCore { 
 } 
 * / 
 
 - public static void loadLibrary ( ) { 
 - if ( libraryIsLoaded . get ( ) ) 
 - / / only load library once 
 + / / Although loadLibrary is synchronized internally from AOSP 4 . 3 , for the compatibility reason , 
 + / / KEEP synchronized here for the old devices ! 
 + public static synchronized void loadLibrary ( ) { 
 + if ( libraryIsLoaded ) { 
 + / / The java native should ensure only load the lib once , but we met some problems before . 
 + / / So keep the flag . 
 return ; 
 + } 
 
 if ( osIsWindows ( ) ) { 
 loadLibraryWindows ( ) ; 
 @ @ - 113 , 7 + 116 , 7 @ @ public class RealmCore { 
 } 
 System . loadLibrary ( jnilib ) ; 
 } 
 - libraryIsLoaded . set ( true ) ; 
 + libraryIsLoaded = true ; 
 
 Version . coreLibVersionCompatible ( true ) ; 
 }
