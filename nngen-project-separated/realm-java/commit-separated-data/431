BLEU SCORE: 0.019648763141608138

TEST MSG: Fix lots of minor issues
GENERATED MSG: Disallow listeners for Results & Object on non - looper

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java <nl> index 2fbff84 . . 3b82038 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java <nl> @ @ - 126 , 7 + 126 , 7 @ @ public class SortDescriptorTests { <nl> for ( RealmFieldType type : RealmFieldType . values ( ) ) { <nl> if ( ! SortDescriptor . validFieldTypesForDistinct . contains ( type ) & & <nl> type ! = RealmFieldType . UNSUPPORTED _ DATE & & <nl> - type ! = RealmFieldType . UNSUPPORTED _ TABLE & & <nl> + type ! = RealmFieldType . UNSUPPORTED _ TABLE & & <nl> type ! = RealmFieldType . UNSUPPORTED _ MIXED ) { <nl> if ( type = = RealmFieldType . LIST | | type = = RealmFieldType . OBJECT ) { <nl> table . addColumnLink ( type , type . name ( ) , table ) ; <nl> @ @ - 228 , 8 + 228 , 8 @ @ public class SortDescriptorTests { <nl> <nl> thrown . expect ( IllegalArgumentException . class ) ; <nl> thrown . expectMessage ( " Number of fields and sort orders do not match . " ) ; <nl> - SortDescriptor . getInstanceForSort ( table , new String [ ] { <nl> - stringType . name ( ) , intType . name ( ) } , new Sort [ ] { Sort . ASCENDING } ) ; <nl> + SortDescriptor . getInstanceForSort ( table , <nl> + new String [ ] { stringType . name ( ) , intType . name ( ) } , new Sort [ ] { Sort . ASCENDING } ) ; <nl> <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> index 1784321 . . 188adf8 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> @ @ - 449 , 7 + 449 , 7 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeSetAutoRefresh ( JNIEnv * env , jclass , jlo <nl> TR _ ENTER _ PTR ( shared _ realm _ ptr ) <nl> try { <nl> auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; <nl> - shared _ realm - > set _ auto _ refresh ( enabled ) ; <nl> + shared _ realm - > set _ auto _ refresh ( to _ bool ( enabled ) ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> @ @ - 459 , 7 + 459 , 7 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeIsAutoRefresh ( JNIEnv * env , jclass , jlon <nl> TR _ ENTER _ PTR ( shared _ realm _ ptr ) <nl> try { <nl> auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; <nl> - return static _ cast < jboolean > ( shared _ realm - > auto _ refresh ( ) ) ; <nl> + return to _ jbool ( shared _ realm - > auto _ refresh ( ) ) ; <nl> } CATCH _ STD ( ) <nl> return JNI _ FALSE ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 66298e0 . . 49ebc4b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 59 , 7 + 59 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> " This Realm instance has already been closed , making it unusable . " ; <nl> private static final String NOT _ IN _ TRANSACTION _ MESSAGE = <nl> " Changing Realm data can only be done from inside a transaction . " ; <nl> - private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; <nl> + static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; <nl> <nl> <nl> volatile static Context applicationContext ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 487a6ea . . d295111 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 66 , 7 + 66 , 6 @ @ import rx . Observable ; <nl> <nl> @ RealmClass <nl> public abstract class RealmObject implements RealmModel { <nl> - private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; <nl> <nl> / * * <nl> * Deletes the object from the Realm it is currently associated to . <nl> @ @ - 159 , 7 + 158 , 7 @ @ public abstract class RealmObject implements RealmModel { <nl> * didn ' t find any object matching the query parameters . In this case the { @ link RealmObject } will <nl> * become a " null " object . <nl> * <nl> - * " Null " objects represents { @ code null } . An exception is throw if any accessor is called , so it is important to also <nl> + * " Null " objects represent { @ code null } . An exception is thrown if any accessor is called , so it is important to also <nl> * check { @ link # isValid ( ) } before calling any methods . A common pattern is : <nl> * <nl> * < pre > <nl> @ @ - 348 , 7 + 347 , 7 @ @ public abstract class RealmObject implements RealmModel { <nl> RealmObjectProxy proxy = ( RealmObjectProxy ) object ; <nl> BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; <nl> realm . checkIfValid ( ) ; <nl> - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> / / noinspection unchecked <nl> proxy . realmGet $ proxyState ( ) . addChangeListener ( listener ) ; <nl> } else { <nl> @ @ - 388 , 7 + 387 , 7 @ @ public abstract class RealmObject implements RealmModel { <nl> RealmObjectProxy proxy = ( RealmObjectProxy ) object ; <nl> BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; <nl> realm . checkIfValid ( ) ; <nl> - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> / / noinspection unchecked <nl> proxy . realmGet $ proxyState ( ) . removeChangeListener ( listener ) ; <nl> } else { <nl> @ @ - 414 , 7 + 413 , 7 @ @ public abstract class RealmObject implements RealmModel { <nl> RealmObjectProxy proxy = ( RealmObjectProxy ) object ; <nl> BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; <nl> realm . checkIfValid ( ) ; <nl> - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> proxy . realmGet $ proxyState ( ) . removeAllChangeListeners ( ) ; <nl> } else { <nl> throw new IllegalArgumentException ( " Cannot remove listeners from this unmanaged RealmObject ( created outside of Realm ) " ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 6ff652c . . e24cdc7 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1548 , 7 + 1548 , 7 @ @ public class RealmQuery < E extends RealmModel > { <nl> <nl> / * * <nl> * Similar to { @ link # findAllSorted ( String , Sort ) } but runs asynchronously on a worker thread <nl> - * ( Need a Realm opened from a looper thread to work ) . <nl> + * ( need a Realm opened from a looper thread to work ) . <nl> * <nl> * @ return immediately an empty { @ link RealmResults } . Users need to register a listener <nl> * { @ link io . realm . RealmResults # addChangeListener ( RealmChangeListener ) } to be notified when the query completes . <nl> @ @ - 1579 , 7 + 1579 , 7 @ @ public class RealmQuery < E extends RealmModel > { <nl> } <nl> <nl> / * * <nl> - * Similar to { @ link # findAllSorted ( String ) } but runs asynchronously on a worker thread <nl> + * Similar to { @ link # findAllSorted ( String ) } but runs asynchronously on a worker thread . <nl> * This method is only available from a Looper thread . <nl> * <nl> * @ return immediately an empty { @ link RealmResults } . Users need to register a listener <nl> @ @ - 1614 , 7 + 1614 , 7 @ @ public class RealmQuery < E extends RealmModel > { <nl> } <nl> <nl> / * * <nl> - * Similar to { @ link # findAllSorted ( String [ ] , Sort [ ] ) } but runs asynchronously <nl> + * Similar to { @ link # findAllSorted ( String [ ] , Sort [ ] ) } but runs asynchronously . <nl> * from a worker thread . <nl> * This method is only available from a Looper thread . <nl> * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index b2aef35 . . ea19abc 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 66 , 7 + 66 , 6 @ @ import rx . Observable ; <nl> public class RealmResults < E extends RealmModel > extends AbstractList < E > implements OrderedRealmCollection < E > { <nl> <nl> private final static String NOT _ SUPPORTED _ MESSAGE = " This method is not supported by RealmResults . " ; <nl> - private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; <nl> <nl> final BaseRealm realm ; <nl> Class < E > classSpec ; / / Return type <nl> @ @ - 759 , 7 + 758 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> realm . checkIfValid ( ) ; <nl> - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> collection . addListener ( this , listener ) ; <nl> } <nl> <nl> @ @ - 775 , 7 + 774 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> realm . checkIfValid ( ) ; <nl> - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> collection . removeListener ( this , listener ) ; <nl> } <nl> <nl> @ @ - 784 , 7 + 783 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen <nl> * / <nl> public void removeChangeListeners ( ) { <nl> realm . checkIfValid ( ) ; <nl> - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> collection . removeAllListeners ( ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java b / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java <nl> index abfff3d . . 6f89710 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ <nl> package io . realm . internal ; <nl> <nl> / * * <nl> - * To describe what does the Realm instance can do associated with the thread it is created on . <nl> + * To describe what the Realm instance can do associated with the thread it is created on . <nl> * The capabilities are determined when the Realm gets created . This interface could be called from another thread which <nl> * is different from where the Realm is created on . <nl> * /
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index d203332 . . 7340cf5 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 58 , 8 + 58 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> " This Realm instance has already been closed , making it unusable . " ; <nl> private static final String NOT _ IN _ TRANSACTION _ MESSAGE = <nl> " Changing Realm data can only be done from inside a transaction . " ; <nl> - private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = <nl> - " Listeners cannot be used on current thread . " ; <nl> + private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; <nl> <nl> <nl> volatile static Context applicationContext ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 7462444 . . 2923c8a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 67 , 6 + 67 , 7 @ @ import rx . Observable ; <nl> <nl> @ RealmClass <nl> public abstract class RealmObject implements RealmModel { <nl> + private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; <nl> <nl> / * * <nl> * Deletes the object from the Realm it is currently associated to . <nl> @ @ - 271 , 7 + 272 , 7 @ @ public abstract class RealmObject implements RealmModel { <nl> RealmObjectProxy proxy = ( RealmObjectProxy ) object ; <nl> BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; <nl> realm . checkIfValid ( ) ; <nl> - realm . sharedRealm . capabilities . checkCanDeliverNotification ( " Listener cannot be added . " ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> / / noinspection unchecked <nl> proxy . realmGet $ proxyState ( ) . addChangeListener ( listener ) ; <nl> } else { <nl> @ @ - 309 , 7 + 310 , 10 @ @ public abstract class RealmObject implements RealmModel { <nl> } <nl> if ( object instanceof RealmObjectProxy ) { <nl> RealmObjectProxy proxy = ( RealmObjectProxy ) object ; <nl> - proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) . checkIfValid ( ) ; <nl> + BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; <nl> + realm . checkIfValid ( ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> + / / FIXME : Below doesn ' t seem to be correct ? <nl> proxy . realmGet $ proxyState ( ) . getListeners $ realm ( ) . remove ( listener ) ; <nl> } else { <nl> throw new IllegalArgumentException ( " Cannot remove listener from this unmanaged RealmObject ( created outside of Realm ) " ) ; <nl> @ @ - 332 , 7 + 336 , 9 @ @ public abstract class RealmObject implements RealmModel { <nl> public static < E extends RealmModel > void removeChangeListeners ( E object ) { <nl> if ( object instanceof RealmObjectProxy ) { <nl> RealmObjectProxy proxy = ( RealmObjectProxy ) object ; <nl> - proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) . checkIfValid ( ) ; <nl> + BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; <nl> + realm . checkIfValid ( ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> proxy . realmGet $ proxyState ( ) . getListeners $ realm ( ) . clear ( ) ; <nl> } else { <nl> throw new IllegalArgumentException ( " Cannot remove listeners from this unmanaged RealmObject ( created outside of Realm ) " ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 822172e . . b5304de 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 66 , 6 + 66 , 7 @ @ import rx . Observable ; <nl> public class RealmResults < E extends RealmModel > extends AbstractList < E > implements OrderedRealmCollection < E > { <nl> <nl> private final static String NOT _ SUPPORTED _ MESSAGE = " This method is not supported by RealmResults . " ; <nl> + private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; <nl> <nl> final BaseRealm realm ; <nl> Class < E > classSpec ; / / Return type <nl> @ @ - 766 , 6 + 767 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> realm . checkIfValid ( ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> collection . addListener ( this , listener ) ; <nl> } <nl> <nl> @ @ - 781 , 6 + 783 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> realm . checkIfValid ( ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> collection . removeListener ( this , listener ) ; <nl> } <nl> <nl> @ @ - 789 , 6 + 792 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen <nl> * / <nl> public void removeChangeListeners ( ) { <nl> realm . checkIfValid ( ) ; <nl> + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> collection . removeAllListeners ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java 
 index 2fbff84 . . 3b82038 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java 
 @ @ - 126 , 7 + 126 , 7 @ @ public class SortDescriptorTests { 
 for ( RealmFieldType type : RealmFieldType . values ( ) ) { 
 if ( ! SortDescriptor . validFieldTypesForDistinct . contains ( type ) & & 
 type ! = RealmFieldType . UNSUPPORTED _ DATE & & 
 - type ! = RealmFieldType . UNSUPPORTED _ TABLE & & 
 + type ! = RealmFieldType . UNSUPPORTED _ TABLE & & 
 type ! = RealmFieldType . UNSUPPORTED _ MIXED ) { 
 if ( type = = RealmFieldType . LIST | | type = = RealmFieldType . OBJECT ) { 
 table . addColumnLink ( type , type . name ( ) , table ) ; 
 @ @ - 228 , 8 + 228 , 8 @ @ public class SortDescriptorTests { 
 
 thrown . expect ( IllegalArgumentException . class ) ; 
 thrown . expectMessage ( " Number of fields and sort orders do not match . " ) ; 
 - SortDescriptor . getInstanceForSort ( table , new String [ ] { 
 - stringType . name ( ) , intType . name ( ) } , new Sort [ ] { Sort . ASCENDING } ) ; 
 + SortDescriptor . getInstanceForSort ( table , 
 + new String [ ] { stringType . name ( ) , intType . name ( ) } , new Sort [ ] { Sort . ASCENDING } ) ; 
 
 } 
 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 index 1784321 . . 188adf8 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 @ @ - 449 , 7 + 449 , 7 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeSetAutoRefresh ( JNIEnv * env , jclass , jlo 
 TR _ ENTER _ PTR ( shared _ realm _ ptr ) 
 try { 
 auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; 
 - shared _ realm - > set _ auto _ refresh ( enabled ) ; 
 + shared _ realm - > set _ auto _ refresh ( to _ bool ( enabled ) ) ; 
 } CATCH _ STD ( ) 
 } 
 
 @ @ - 459 , 7 + 459 , 7 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeIsAutoRefresh ( JNIEnv * env , jclass , jlon 
 TR _ ENTER _ PTR ( shared _ realm _ ptr ) 
 try { 
 auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; 
 - return static _ cast < jboolean > ( shared _ realm - > auto _ refresh ( ) ) ; 
 + return to _ jbool ( shared _ realm - > auto _ refresh ( ) ) ; 
 } CATCH _ STD ( ) 
 return JNI _ FALSE ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 66298e0 . . 49ebc4b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 59 , 7 + 59 , 7 @ @ abstract class BaseRealm implements Closeable { 
 " This Realm instance has already been closed , making it unusable . " ; 
 private static final String NOT _ IN _ TRANSACTION _ MESSAGE = 
 " Changing Realm data can only be done from inside a transaction . " ; 
 - private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; 
 + static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; 
 
 
 volatile static Context applicationContext ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 487a6ea . . d295111 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 66 , 7 + 66 , 6 @ @ import rx . Observable ; 
 
 @ RealmClass 
 public abstract class RealmObject implements RealmModel { 
 - private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; 
 
 / * * 
 * Deletes the object from the Realm it is currently associated to . 
 @ @ - 159 , 7 + 158 , 7 @ @ public abstract class RealmObject implements RealmModel { 
 * didn ' t find any object matching the query parameters . In this case the { @ link RealmObject } will 
 * become a " null " object . 
 * 
 - * " Null " objects represents { @ code null } . An exception is throw if any accessor is called , so it is important to also 
 + * " Null " objects represent { @ code null } . An exception is thrown if any accessor is called , so it is important to also 
 * check { @ link # isValid ( ) } before calling any methods . A common pattern is : 
 * 
 * < pre > 
 @ @ - 348 , 7 + 347 , 7 @ @ public abstract class RealmObject implements RealmModel { 
 RealmObjectProxy proxy = ( RealmObjectProxy ) object ; 
 BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; 
 realm . checkIfValid ( ) ; 
 - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 / / noinspection unchecked 
 proxy . realmGet $ proxyState ( ) . addChangeListener ( listener ) ; 
 } else { 
 @ @ - 388 , 7 + 387 , 7 @ @ public abstract class RealmObject implements RealmModel { 
 RealmObjectProxy proxy = ( RealmObjectProxy ) object ; 
 BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; 
 realm . checkIfValid ( ) ; 
 - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 / / noinspection unchecked 
 proxy . realmGet $ proxyState ( ) . removeChangeListener ( listener ) ; 
 } else { 
 @ @ - 414 , 7 + 413 , 7 @ @ public abstract class RealmObject implements RealmModel { 
 RealmObjectProxy proxy = ( RealmObjectProxy ) object ; 
 BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; 
 realm . checkIfValid ( ) ; 
 - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 proxy . realmGet $ proxyState ( ) . removeAllChangeListeners ( ) ; 
 } else { 
 throw new IllegalArgumentException ( " Cannot remove listeners from this unmanaged RealmObject ( created outside of Realm ) " ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 6ff652c . . e24cdc7 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1548 , 7 + 1548 , 7 @ @ public class RealmQuery < E extends RealmModel > { 
 
 / * * 
 * Similar to { @ link # findAllSorted ( String , Sort ) } but runs asynchronously on a worker thread 
 - * ( Need a Realm opened from a looper thread to work ) . 
 + * ( need a Realm opened from a looper thread to work ) . 
 * 
 * @ return immediately an empty { @ link RealmResults } . Users need to register a listener 
 * { @ link io . realm . RealmResults # addChangeListener ( RealmChangeListener ) } to be notified when the query completes . 
 @ @ - 1579 , 7 + 1579 , 7 @ @ public class RealmQuery < E extends RealmModel > { 
 } 
 
 / * * 
 - * Similar to { @ link # findAllSorted ( String ) } but runs asynchronously on a worker thread 
 + * Similar to { @ link # findAllSorted ( String ) } but runs asynchronously on a worker thread . 
 * This method is only available from a Looper thread . 
 * 
 * @ return immediately an empty { @ link RealmResults } . Users need to register a listener 
 @ @ - 1614 , 7 + 1614 , 7 @ @ public class RealmQuery < E extends RealmModel > { 
 } 
 
 / * * 
 - * Similar to { @ link # findAllSorted ( String [ ] , Sort [ ] ) } but runs asynchronously 
 + * Similar to { @ link # findAllSorted ( String [ ] , Sort [ ] ) } but runs asynchronously . 
 * from a worker thread . 
 * This method is only available from a Looper thread . 
 * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index b2aef35 . . ea19abc 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 66 , 7 + 66 , 6 @ @ import rx . Observable ; 
 public class RealmResults < E extends RealmModel > extends AbstractList < E > implements OrderedRealmCollection < E > { 
 
 private final static String NOT _ SUPPORTED _ MESSAGE = " This method is not supported by RealmResults . " ; 
 - private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; 
 
 final BaseRealm realm ; 
 Class < E > classSpec ; / / Return type 
 @ @ - 759 , 7 + 758 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 realm . checkIfValid ( ) ; 
 - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 collection . addListener ( this , listener ) ; 
 } 
 
 @ @ - 775 , 7 + 774 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 realm . checkIfValid ( ) ; 
 - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 collection . removeListener ( this , listener ) ; 
 } 
 
 @ @ - 784 , 7 + 783 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen 
 * / 
 public void removeChangeListeners ( ) { 
 realm . checkIfValid ( ) ; 
 - realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( BaseRealm . LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 collection . removeAllListeners ( ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java b / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java 
 index abfff3d . . 6f89710 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java 
 @ @ - 17 , 7 + 17 , 7 @ @ 
 package io . realm . internal ; 
 
 / * * 
 - * To describe what does the Realm instance can do associated with the thread it is created on . 
 + * To describe what the Realm instance can do associated with the thread it is created on . 
 * The capabilities are determined when the Realm gets created . This interface could be called from another thread which 
 * is different from where the Realm is created on . 
 * /

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index d203332 . . 7340cf5 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 58 , 8 + 58 , 7 @ @ abstract class BaseRealm implements Closeable { 
 " This Realm instance has already been closed , making it unusable . " ; 
 private static final String NOT _ IN _ TRANSACTION _ MESSAGE = 
 " Changing Realm data can only be done from inside a transaction . " ; 
 - private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = 
 - " Listeners cannot be used on current thread . " ; 
 + private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; 
 
 
 volatile static Context applicationContext ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 7462444 . . 2923c8a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 67 , 6 + 67 , 7 @ @ import rx . Observable ; 
 
 @ RealmClass 
 public abstract class RealmObject implements RealmModel { 
 + private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; 
 
 / * * 
 * Deletes the object from the Realm it is currently associated to . 
 @ @ - 271 , 7 + 272 , 7 @ @ public abstract class RealmObject implements RealmModel { 
 RealmObjectProxy proxy = ( RealmObjectProxy ) object ; 
 BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; 
 realm . checkIfValid ( ) ; 
 - realm . sharedRealm . capabilities . checkCanDeliverNotification ( " Listener cannot be added . " ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 / / noinspection unchecked 
 proxy . realmGet $ proxyState ( ) . addChangeListener ( listener ) ; 
 } else { 
 @ @ - 309 , 7 + 310 , 10 @ @ public abstract class RealmObject implements RealmModel { 
 } 
 if ( object instanceof RealmObjectProxy ) { 
 RealmObjectProxy proxy = ( RealmObjectProxy ) object ; 
 - proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) . checkIfValid ( ) ; 
 + BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; 
 + realm . checkIfValid ( ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 + / / FIXME : Below doesn ' t seem to be correct ? 
 proxy . realmGet $ proxyState ( ) . getListeners $ realm ( ) . remove ( listener ) ; 
 } else { 
 throw new IllegalArgumentException ( " Cannot remove listener from this unmanaged RealmObject ( created outside of Realm ) " ) ; 
 @ @ - 332 , 7 + 336 , 9 @ @ public abstract class RealmObject implements RealmModel { 
 public static < E extends RealmModel > void removeChangeListeners ( E object ) { 
 if ( object instanceof RealmObjectProxy ) { 
 RealmObjectProxy proxy = ( RealmObjectProxy ) object ; 
 - proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) . checkIfValid ( ) ; 
 + BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; 
 + realm . checkIfValid ( ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 proxy . realmGet $ proxyState ( ) . getListeners $ realm ( ) . clear ( ) ; 
 } else { 
 throw new IllegalArgumentException ( " Cannot remove listeners from this unmanaged RealmObject ( created outside of Realm ) " ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 822172e . . b5304de 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 66 , 6 + 66 , 7 @ @ import rx . Observable ; 
 public class RealmResults < E extends RealmModel > extends AbstractList < E > implements OrderedRealmCollection < E > { 
 
 private final static String NOT _ SUPPORTED _ MESSAGE = " This method is not supported by RealmResults . " ; 
 + private static final String LISTENER _ NOT _ ALLOWED _ MESSAGE = " Listeners cannot be used on current thread . " ; 
 
 final BaseRealm realm ; 
 Class < E > classSpec ; / / Return type 
 @ @ - 766 , 6 + 767 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 realm . checkIfValid ( ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 collection . addListener ( this , listener ) ; 
 } 
 
 @ @ - 781 , 6 + 783 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 realm . checkIfValid ( ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 collection . removeListener ( this , listener ) ; 
 } 
 
 @ @ - 789 , 6 + 792 , 7 @ @ public class RealmResults < E extends RealmModel > extends AbstractList < E > implemen 
 * / 
 public void removeChangeListeners ( ) { 
 realm . checkIfValid ( ) ; 
 + realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 collection . removeAllListeners ( ) ; 
 } 

