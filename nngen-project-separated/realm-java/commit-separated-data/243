BLEU SCORE: 0.007228376004244835

TEST MSG: Fix wrong javadoc in RealmConfiguration
GENERATED MSG: fix Javadoc documentation about encryption key length ( 64 bit - > 64 bytes )

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index cafcd4a . . f30d96c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 52 , 7 + 52 , 7 @ @ import io . realm . rx . RxObservableFactory ; <nl> * < p > <nl> * A minimal configuration can be created using : <nl> * < p > <nl> - * { @ code RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) . build ( ) ) } <nl> + * { @ code RealmConfiguration config = new RealmConfiguration . Builder ( ) . build ( ) } <nl> * < p > <nl> * This will create a RealmConfiguration with the following properties . <nl> * < ul >
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 4f7a8c0 . . 10523e6 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 443 , 7 + 443 , 7 @ @ public final class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Sets the 64 bit key used to encrypt and decrypt the Realm file . <nl> + * Sets the { @ value io . realm . RealmConfiguration # KEY _ LENGTH } bytes key used to encrypt and decrypt the Realm file . <nl> * / <nl> public Builder encryptionKey ( byte [ ] key ) { <nl> if ( key = = null ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index cafcd4a . . f30d96c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 52 , 7 + 52 , 7 @ @ import io . realm . rx . RxObservableFactory ; 
 * < p > 
 * A minimal configuration can be created using : 
 * < p > 
 - * { @ code RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) . build ( ) ) } 
 + * { @ code RealmConfiguration config = new RealmConfiguration . Builder ( ) . build ( ) } 
 * < p > 
 * This will create a RealmConfiguration with the following properties . 
 * < ul >

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 4f7a8c0 . . 10523e6 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 443 , 7 + 443 , 7 @ @ public final class RealmConfiguration { 
 } 
 
 / * * 
 - * Sets the 64 bit key used to encrypt and decrypt the Realm file . 
 + * Sets the { @ value io . realm . RealmConfiguration # KEY _ LENGTH } bytes key used to encrypt and decrypt the Realm file . 
 * / 
 public Builder encryptionKey ( byte [ ] key ) { 
 if ( key = = null ) {
