BLEU SCORE: 0.010738456044579523

TEST MSG: If serverUrl is too long ( > 255 characters ) , MD5 of the URL is used instead
GENERATED MSG: Asset file as an initial dataset

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> index 24d1fc3 . . 9a2456d 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> @ @ - 31 , 9 + 31 , 11 @ @ import java . io . File ; <nl> <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> - import io . realm . util . SyncTestUtils ; <nl> <nl> + import static io . realm . util . SyncTestUtils . createTestUser ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ RunWith ( AndroidJUnit4 . class ) <nl> @ @ - 74 , 7 + 76 , 7 @ @ public class SyncConfigurationTests { <nl> } catch ( IllegalArgumentException ignore ) { <nl> } <nl> <nl> - User user = SyncTestUtils . createTestUser ( 0 ) ; / / Create user that has expired credentials <nl> + User user = createTestUser ( 0 ) ; / / Create user that has expired credentials <nl> try { <nl> builder . user ( user ) ; <nl> } catch ( IllegalArgumentException ignore ) { <nl> @ @ - 83 , 7 + 85 , 7 @ @ public class SyncConfigurationTests { <nl> <nl> @ Test <nl> public void serverUrl _ setsFolderAndFileName ( ) { <nl> - User user = SyncTestUtils . createTestUser ( ) ; <nl> + User user = createTestUser ( ) ; <nl> String [ ] [ ] validUrls = { <nl> / / < URL > , < Folder > , < FileName > <nl> { " realm : / / objectserver . realm . io / ~ / default " , " realm - object - server / " + user . getIdentity ( ) , " default " } , <nl> @ @ - 127 , 6 + 129 , 39 @ @ public class SyncConfigurationTests { <nl> } <nl> } <nl> <nl> + private String makeServerUrl ( int len ) { <nl> + StringBuilder builder = new StringBuilder ( " realm : / / objectserver . realm . io / ~ / " ) ; <nl> + for ( int i = 0 ; i < len ; i + + ) { <nl> + builder . append ( ' A ' ) ; <nl> + } <nl> + return builder . toString ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void serverUrl _ length ( ) { <nl> + int [ ] lengths = { 1 , SyncConfiguration . MAX _ FILE _ NAME _ LENGTH - 1 , <nl> + SyncConfiguration . MAX _ FILE _ NAME _ LENGTH , SyncConfiguration . MAX _ FILE _ NAME _ LENGTH + 1 , 1000 } ; <nl> + <nl> + for ( int len : lengths ) { <nl> + SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) <nl> + . serverUrl ( makeServerUrl ( len ) ) <nl> + . user ( createTestUser ( ) ) ; <nl> + <nl> + SyncConfiguration config = builder . build ( ) ; <nl> + assertTrue ( " Length : " + len , config . getRealmFileName ( ) . length ( ) < = SyncConfiguration . MAX _ FILE _ NAME _ LENGTH ) ; <nl> + assertTrue ( " Length : " + len , config . getPath ( ) . length ( ) < = SyncConfiguration . MAX _ FULL _ PATH _ LENGTH ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void serverUrl _ invalidChars ( ) { <nl> + SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) <nl> + . serverUrl ( " realm : / / objectserver . realm . io / ~ / ? " ) <nl> + . user ( createTestUser ( ) ) ; <nl> + SyncConfiguration config = builder . build ( ) ; <nl> + assertFalse ( config . getRealmFileName ( ) . contains ( " ? " ) ) ; <nl> + } <nl> + <nl> @ Test <nl> public void userAndServerUrlRequired ( ) { <nl> SyncConfiguration . Builder builder ; <nl> @ @ - 140 , 7 + 175 , 7 @ @ public class SyncConfigurationTests { <nl> <nl> builder = new SyncConfiguration . Builder ( context ) ; <nl> try { <nl> - builder . user ( SyncTestUtils . createTestUser ( Long . MAX _ VALUE ) ) . build ( ) ; <nl> + builder . user ( createTestUser ( Long . MAX _ VALUE ) ) . build ( ) ; <nl> } catch ( IllegalStateException ignore ) { <nl> } <nl> <nl> @ @ - 156 , 7 + 191 , 7 @ @ public class SyncConfigurationTests { <nl> public void errorHandler ( ) { <nl> SyncConfiguration . Builder builder ; <nl> builder = new SyncConfiguration . Builder ( context ) <nl> - . user ( SyncTestUtils . createTestUser ( ) ) <nl> + . user ( createTestUser ( ) ) <nl> . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; <nl> <nl> Session . ErrorHandler errorHandler = new Session . ErrorHandler ( ) { <nl> @ @ - 183 , 7 + 218 , 7 @ @ public class SyncConfigurationTests { <nl> <nl> / / Create configuration using the default handler <nl> SyncConfiguration config = new SyncConfiguration . Builder ( context ) <nl> - . user ( SyncTestUtils . createTestUser ( ) ) <nl> + . user ( createTestUser ( ) ) <nl> . serverUrl ( " realm : / / objectserver . realm . io / default " ) <nl> . build ( ) ; <nl> assertEquals ( errorHandler , config . getErrorHandler ( ) ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> index a6891d9 . . d97ed95 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> @ @ - 19 , 12 + 19 , 16 @ @ package io . realm ; <nl> import android . content . Context ; <nl> <nl> import java . io . File ; <nl> + import java . io . UnsupportedEncodingException ; <nl> import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> + import java . security . MessageDigest ; <nl> + import java . security . NoSuchAlgorithmException ; <nl> import java . util . Arrays ; <nl> import java . util . HashSet ; <nl> <nl> import io . realm . annotations . RealmModule ; <nl> + import io . realm . exceptions . RealmException ; <nl> import io . realm . internal . RealmProxyMediator ; <nl> import io . realm . internal . SharedRealm ; <nl> import io . realm . internal . syncpolicy . AutomaticSyncPolicy ; <nl> @ @ - 64 , 6 + 68 , 12 @ @ import io . realm . rx . RxObservableFactory ; <nl> * / <nl> public final class SyncConfiguration extends RealmConfiguration { <nl> <nl> + / / The FAT file system has limitations of length . Also , not all characters are permitted . <nl> + / / https : / / msdn . microsoft . com / en - us / library / aa365247 ( VS . 85 ) . aspx <nl> + public static final int MAX _ FULL _ PATH _ LENGTH = 256 ; <nl> + public static final int MAX _ FILE _ NAME _ LENGTH = 255 ; <nl> + private static final char [ ] INVALID _ CHARS = { ' < ' , ' > ' , ' : ' , ' " ' , ' / ' , ' \ \ ' , ' | ' , ' ? ' , ' * ' } ; <nl> + <nl> private final URI serverUrl ; <nl> private final User user ; <nl> private final SyncPolicy syncPolicy ; <nl> @ @ - 380 , 6 + 390 , 11 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> * <nl> * This behaviour can be overwritten using { @ link # name ( String ) } and { @ link # directory ( File ) } . <nl> * <nl> + * Many Android devices are using FAT32 file systems . FAT32 file systems have a limitation that <nl> + * file name cannot be longer than 255 characters . Moreover , the entire URL should not exceed 256 characters . <nl> + * If file name and underlying path are too long to handle for FAT32 , a shorter unique name will be generated . <nl> + * See also @ { link https : / / msdn . microsoft . com / en - us / library / aa365247 ( VS . 85 ) . aspx } . <nl> + * <nl> * @ param url URL identifying the Realm . <nl> * @ throws IllegalArgumentException if the URL is not valid . <nl> * / <nl> @ @ - 459 , 6 + 474 , 22 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> return this ; <nl> } <nl> <nl> + private String MD5 ( String in ) { <nl> + try { <nl> + MessageDigest digest = MessageDigest . getInstance ( " MD5 " ) ; <nl> + byte [ ] buf = digest . digest ( in . getBytes ( " UTF - 8 " ) ) ; <nl> + StringBuilder builder = new StringBuilder ( ) ; <nl> + for ( byte b : buf ) { <nl> + builder . append ( String . format ( " % 02X " , b ) ) ; <nl> + } <nl> + return builder . toString ( ) ; <nl> + } catch ( NoSuchAlgorithmException e ) { <nl> + throw new RealmException ( e . getMessage ( ) ) ; <nl> + } catch ( UnsupportedEncodingException e ) { <nl> + throw new RealmException ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Setting this will cause the local Realm file used to synchronize changes to be deleted if the { @ link User } <nl> * defined by { @ link # user ( User ) } logs out from the device using { @ link User # logout ( ) } . <nl> @ @ - 495 , 11 + 526 , 39 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> File rootDir = overrideDefaultFolder ? directory : defaultFolder ; <nl> String realmPathFromRootDir = getServerPath ( resolvedServerUrl ) ; <nl> File realmFileDirectory = new File ( rootDir , realmPathFromRootDir ) ; <nl> + <nl> + String realmFileName = overrideDefaultLocalFileName ? fileName : defaultLocalFileName ; <nl> + String fullPathName = realmFileDirectory . getAbsolutePath ( ) + File . pathSeparator + realmFileName ; <nl> + / / full path must not exceed 256 characters ( on FAT ) <nl> + if ( fullPathName . length ( ) > MAX _ FULL _ PATH _ LENGTH ) { <nl> + / / path is too long , so we make the file name shorter <nl> + realmFileName = MD5 ( realmFileName ) ; <nl> + fullPathName = realmFileDirectory . getAbsolutePath ( ) + File . pathSeparator + realmFileName ; <nl> + if ( fullPathName . length ( ) > MAX _ FULL _ PATH _ LENGTH ) { <nl> + / / use rootDir / userIdentify as directory instead as it is shorter <nl> + realmFileDirectory = new File ( rootDir , user . getIdentity ( ) ) ; <nl> + fullPathName = realmFileDirectory . getAbsolutePath ( ) + File . pathSeparator + realmFileName ; <nl> + if ( fullPathName . length ( ) > MAX _ FULL _ PATH _ LENGTH ) { / / we are out of ideas <nl> + throw new IllegalStateException ( String . format ( " Full path name must not exceed % d characters : % s " , <nl> + MAX _ FULL _ PATH _ LENGTH , fullPathName ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + if ( realmFileName . length ( ) > MAX _ FILE _ NAME _ LENGTH ) { <nl> + throw new IllegalStateException ( String . format ( " File name exceed % d characters : % d " , MAX _ FILE _ NAME _ LENGTH , <nl> + realmFileName . length ( ) ) ) ; <nl> + } <nl> + <nl> + / / substitute invalid characters <nl> + for ( char c : INVALID _ CHARS ) { <nl> + realmFileName = realmFileName . replace ( c , ' _ ' ) ; <nl> + } <nl> + <nl> / / Create the folder on disk ( if needed ) <nl> if ( ! realmFileDirectory . exists ( ) & & ! realmFileDirectory . mkdirs ( ) ) { <nl> throw new IllegalStateException ( " Could not create directory for saving the Realm : " + realmFileDirectory ) ; <nl> } <nl> - String realmFileName = overrideDefaultLocalFileName ? fileName : defaultLocalFileName ; <nl> <nl> return new SyncConfiguration ( <nl> / / Realm Configuration options
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / assets / asset _ file . realm b / realm / realm - library / src / androidTest / assets / asset _ file . realm <nl> new file mode 100644 <nl> index 0000000 . . 1539f77 <nl> Binary files / dev / null and b / realm / realm - library / src / androidTest / assets / asset _ file . realm differ <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> index cb720cf . . d799572 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> @ @ - 16 , 17 + 16 , 17 @ @ <nl> <nl> package io . realm ; <nl> <nl> - import android . content . Context ; <nl> - import android . support . test . InstrumentationRegistry ; <nl> - import android . support . test . runner . AndroidJUnit4 ; <nl> - import android . test . MoreAsserts ; <nl> - <nl> import org . junit . After ; <nl> import org . junit . Before ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> + import android . content . Context ; <nl> + import android . support . test . InstrumentationRegistry ; <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> + import android . test . MoreAsserts ; <nl> + <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . lang . reflect . Field ; <nl> @ @ - 41 , 6 + 41 , 8 @ @ import io . realm . entities . CyclicType ; <nl> import io . realm . entities . Dog ; <nl> import io . realm . entities . HumanModule ; <nl> import io . realm . entities . Owner ; <nl> + import io . realm . exceptions . RealmException ; <nl> + import io . realm . exceptions . RealmIOException ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> import io . realm . internal . modules . CompositeMediator ; <nl> import io . realm . internal . modules . FilterableMediator ; <nl> @ @ - 764 , 14 + 766 , 11 @ @ public class RealmConfigurationTests { <nl> Realm . deleteRealm ( defaultConfig ) ; <nl> <nl> Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> - configFactory . copyRealmFromAssets ( context , " default - before - migration . realm " , Realm . DEFAULT _ REALM _ NAME ) ; <nl> + configFactory . copyRealmFromAssets ( context , " asset _ file . realm " , Realm . DEFAULT _ REALM _ NAME ) ; <nl> assertTrue ( new File ( configFactory . getRoot ( ) , Realm . DEFAULT _ REALM _ NAME ) . exists ( ) ) ; <nl> <nl> Realm . Transaction transaction = mock ( Realm . Transaction . class ) ; <nl> RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) <nl> - / / Just reuse existing file and set right schema <nl> - . schemaVersion ( 0 ) <nl> - . schema ( AllTypes . class ) <nl> . initialData ( transaction ) <nl> . build ( ) ; <nl> <nl> @ @ - 780 , 6 + 779 , 83 @ @ public class RealmConfigurationTests { <nl> verify ( transaction , never ( ) ) . execute ( realm ) ; <nl> } <nl> <nl> + @ Test <nl> + public void assetFileNullAndEmptyFileName ( ) { <nl> + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> + try { <nl> + new RealmConfiguration . Builder ( context ) . assetFile ( context , null ) . build ( ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> + <nl> + try { <nl> + new RealmConfiguration . Builder ( context ) . assetFile ( context , " " ) . build ( ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void assetFileWithInMemoryConfig ( ) { <nl> + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> + <nl> + / / Ensure that there is no data <nl> + Realm . deleteRealm ( new RealmConfiguration . Builder ( context ) . build ( ) ) ; <nl> + <nl> + try { <nl> + new RealmConfiguration . Builder ( context ) . assetFile ( context , " asset _ file . realm " ) . inMemory ( ) . build ( ) ; <nl> + fail ( ) ; <nl> + } catch ( RealmException ignored ) { <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void assetFileFakeFile ( ) { <nl> + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> + <nl> + / / Ensure that there is no data <nl> + Realm . deleteRealm ( new RealmConfiguration . Builder ( context ) . build ( ) ) ; <nl> + <nl> + RealmConfiguration configuration = new RealmConfiguration . Builder ( context ) . assetFile ( context , " no _ file " ) . build ( ) ; <nl> + try { <nl> + Realm . getInstance ( configuration ) ; <nl> + fail ( ) ; <nl> + } catch ( RealmIOException ignored ) { <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void assetFileValidFile ( ) throws IOException { <nl> + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> + <nl> + / / Ensure that there is no data <nl> + Realm . deleteRealm ( new RealmConfiguration . Builder ( context ) . build ( ) ) ; <nl> + <nl> + RealmConfiguration configuration = new RealmConfiguration . Builder ( context ) . assetFile ( context , " asset _ file . realm " ) <nl> + . build ( ) ; <nl> + Realm . deleteRealm ( configuration ) ; <nl> + <nl> + File realmFile = new File ( configuration . getPath ( ) ) ; <nl> + assertFalse ( realmFile . exists ( ) ) ; <nl> + <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + assertTrue ( realmFile . exists ( ) ) ; <nl> + <nl> + / / Asset file has 10 Owners and 10 Cats , check if data is present <nl> + assertEquals ( 10 , realm . where ( Owner . class ) . count ( ) ) ; <nl> + assertEquals ( 10 , realm . where ( Cat . class ) . count ( ) ) ; <nl> + <nl> + realm . close ( ) ; <nl> + <nl> + / / Copy original file to another location <nl> + configFactory . copyRealmFromAssets ( context , " asset _ file . realm " , " asset _ file _ copy . realm " ) ; <nl> + File copyFromAsset = new File ( configFactory . getRoot ( ) , " asset _ file _ copy . realm " ) ; <nl> + assertTrue ( copyFromAsset . exists ( ) ) ; <nl> + <nl> + Realm . deleteRealm ( configuration ) ; <nl> + assertFalse ( realmFile . exists ( ) ) ; <nl> + } <nl> + <nl> private static class MigrationWithNoEquals implements RealmMigration { <nl> @ Override <nl> public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> index 35b554d . . 824f7fb 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> @ @ - 15 , 11 + 15 , 16 @ @ <nl> * / <nl> package io . realm ; <nl> <nl> + import java . io . File ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . util . Arrays ; <nl> import java . util . EnumMap ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> + import io . realm . exceptions . RealmIOException ; <nl> import io . realm . internal . ColumnIndices ; <nl> import io . realm . internal . log . RealmLog ; <nl> <nl> @ @ - 102 , 6 + 107 , 8 @ @ final class RealmCache { <nl> cache = new RealmCache ( configuration ) ; <nl> / / The new cache should be added to the map later . <nl> isCacheInMap = false ; <nl> + <nl> + copyAssetFileIfNeeded ( configuration ) ; <nl> } else { <nl> / / Throw the exception if validation failed . <nl> cache . validateConfiguration ( configuration ) ; <nl> @ @ - 113 , 6 + 120 , 7 @ @ final class RealmCache { <nl> / / Create a new local Realm instance <nl> BaseRealm realm ; <nl> <nl> + <nl> if ( realmClass = = Realm . class ) { <nl> / / RealmMigrationNeededException might be thrown here . <nl> realm = Realm . createInstance ( configuration , cache . typedColumnIndices ) ; <nl> @ @ - 266 , 7 + 274 , 7 @ @ final class RealmCache { <nl> callback . onResult ( totalRefCount ) ; <nl> } <nl> <nl> - / * * <nl> + / * * <nl> * Runs the callback function with synchronization on { @ class RealmCache } . <nl> * <nl> * @ param callback the callback will be executed . <nl> @ @ - 274 , 4 + 282 , 53 @ @ final class RealmCache { <nl> static synchronized void invokeWithLock ( Callback0 callback ) { <nl> callback . onCall ( ) ; <nl> } <nl> + <nl> + / * * <nl> + * Copies Realm database file from Android asset directory to the directory given in the { @ link RealmConfiguration } . <nl> + * Copy is performed only at the first time when there is no Realm database file . <nl> + * <nl> + * @ param configuration configuration object for Realm instance . <nl> + * @ throws IOException if copying the file fails . <nl> + * / <nl> + private static void copyAssetFileIfNeeded ( RealmConfiguration configuration ) { <nl> + if ( configuration . hasAssetFile ( ) ) { <nl> + File realmFile = new File ( configuration . getRealmFolder ( ) , configuration . getRealmFileName ( ) ) ; <nl> + if ( realmFile . exists ( ) ) { <nl> + return ; <nl> + } <nl> + <nl> + InputStream inputStream = null ; <nl> + FileOutputStream outputStream = null ; <nl> + try { <nl> + inputStream = configuration . getAssetFile ( ) ; <nl> + if ( inputStream = = null ) { <nl> + throw new RealmIOException ( " Invalid input stream to asset file . " ) ; <nl> + } <nl> + <nl> + outputStream = new FileOutputStream ( realmFile ) ; <nl> + byte [ ] buf = new byte [ 4096 ] ; <nl> + int bytesRead ; <nl> + while ( ( bytesRead = inputStream . read ( buf ) ) > - 1 ) { <nl> + outputStream . write ( buf , 0 , bytesRead ) ; <nl> + } <nl> + } catch ( IOException e ) { <nl> + throw new RealmIOException ( " Could not resolve the path to the Realm asset file . " , e ) ; <nl> + } finally { <nl> + if ( inputStream ! = null ) { <nl> + try { <nl> + inputStream . close ( ) ; <nl> + } catch ( IOException e ) { <nl> + / / Ignore this exception because any significant errors should already have been handled <nl> + } <nl> + } <nl> + if ( outputStream ! = null ) { <nl> + try { <nl> + outputStream . close ( ) ; <nl> + } catch ( IOException e ) { <nl> + throw new RealmIOException ( " Invalid output stream to " + realmFile . getPath ( ) , e ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 6b978ec . . d4a85d3 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 17 , 8 + 17 , 12 @ @ <nl> package io . realm ; <nl> <nl> import android . content . Context ; <nl> + import android . text . TextUtils ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . lang . ref . WeakReference ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . util . Arrays ; <nl> @ @ - 81 , 6 + 85 , 7 @ @ public final class RealmConfiguration { <nl> private final File realmFolder ; <nl> private final String realmFileName ; <nl> private final String canonicalPath ; <nl> + private final String assetFilePath ; <nl> private final byte [ ] key ; <nl> private final long schemaVersion ; <nl> private final RealmMigration migration ; <nl> @ @ - 89 , 11 + 94 , 13 @ @ public final class RealmConfiguration { <nl> private final RealmProxyMediator schemaMediator ; <nl> private final RxObservableFactory rxObservableFactory ; <nl> private final Realm . Transaction initialDataTransaction ; <nl> + private final WeakReference < Context > contextWeakRef ; <nl> <nl> private RealmConfiguration ( Builder builder ) { <nl> this . realmFolder = builder . folder ; <nl> this . realmFileName = builder . fileName ; <nl> this . canonicalPath = Realm . getCanonicalPath ( new File ( realmFolder , realmFileName ) ) ; <nl> + this . assetFilePath = builder . assetFilePath ; <nl> this . key = builder . key ; <nl> this . schemaVersion = builder . schemaVersion ; <nl> this . deleteRealmIfMigrationNeeded = builder . deleteRealmIfMigrationNeeded ; <nl> @ @ - 102 , 6 + 109 , 7 @ @ public final class RealmConfiguration { <nl> this . schemaMediator = createSchemaMediator ( builder ) ; <nl> this . rxObservableFactory = builder . rxFactory ; <nl> this . initialDataTransaction = builder . initialDataTransaction ; <nl> + this . contextWeakRef = builder . contextWeakRef ; <nl> } <nl> <nl> public File getRealmFolder ( ) { <nl> @ @ - 151 , 6 + 159 , 30 @ @ public final class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> + * Indicates if there is available asset file for copy action . <nl> + * <nl> + * @ return true if there is asset file , false otherwise . <nl> + * / <nl> + boolean hasAssetFile ( ) { <nl> + return ! TextUtils . isEmpty ( assetFilePath ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns input stream object to the Realm asset file . <nl> + * <nl> + * @ return input stream to the asset file . <nl> + * @ throws IOException if copying the file fails . <nl> + * / <nl> + InputStream getAssetFile ( ) throws IOException { <nl> + Context context = contextWeakRef . get ( ) ; <nl> + if ( context ! = null ) { <nl> + return context . getAssets ( ) . open ( assetFilePath ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( " Context should not be null . Use Application Context instead of Activity Context . " ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the unmodifiable { @ link Set } of model classes that make up the schema for this Realm . <nl> * <nl> * @ return unmodifiable { @ link Set } of model classes . <nl> @ @ - 314 , 6 + 346 , 7 @ @ public final class RealmConfiguration { <nl> public static final class Builder { <nl> private File folder ; <nl> private String fileName ; <nl> + private String assetFilePath ; <nl> private byte [ ] key ; <nl> private long schemaVersion ; <nl> private RealmMigration migration ; <nl> @ @ - 321 , 6 + 354 , 7 @ @ public final class RealmConfiguration { <nl> private SharedGroup . Durability durability ; <nl> private HashSet < Object > modules = new HashSet < Object > ( ) ; <nl> private HashSet < Class < ? extends RealmModel > > debugSchema = new HashSet < Class < ? extends RealmModel > > ( ) ; <nl> + private WeakReference < Context > contextWeakRef ; <nl> private RxObservableFactory rxFactory ; <nl> private Realm . Transaction initialDataTransaction ; <nl> <nl> @ @ - 339 , 7 + 373 , 7 @ @ public final class RealmConfiguration { <nl> / * * <nl> * Creates an instance of the Builder for the RealmConfiguration . <nl> * <nl> - * This will use the apps own internal directory for storing the Realm file . This does not require any <nl> + * This will use the app ' s own internal directory for storing the Realm file . This does not require any <nl> * additional permissions . The default location is { @ code / data / data / < packagename > / files } , but can <nl> * change depending on vendor implementations of Android . <nl> * <nl> @ @ - 453 , 7 + 487 , 12 @ @ public final class RealmConfiguration { <nl> * reference to the in - memory Realm object with the specific name as long as you want the data to last . <nl> * / <nl> public Builder inMemory ( ) { <nl> + if ( ! TextUtils . isEmpty ( assetFilePath ) ) { <nl> + throw new RealmException ( " Realm can not use in - memory configuration if asset file is present . " ) ; <nl> + } <nl> + <nl> this . durability = SharedGroup . Durability . MEM _ ONLY ; <nl> + <nl> return this ; <nl> } <nl> <nl> @ @ - 506 , 6 + 545 , 33 @ @ public final class RealmConfiguration { <nl> return this ; <nl> } <nl> <nl> + / * * <nl> + * Copies the Realm file from the given asset file path . <nl> + * <nl> + * When opening the Realm for the first time , instead of creating an empty file , <nl> + * the Realm file will be copied from the provided assets file and used instead . <nl> + * WARNING : This could potentially be a lengthy operation so should ideally be done on a background thread . <nl> + * <nl> + * @ param context Android application context . <nl> + * @ param assetFile path to the asset database file . <nl> + * / <nl> + public Builder assetFile ( Context context , final String assetFile ) { <nl> + if ( context = = null ) { <nl> + throw new IllegalArgumentException ( " A non - null Context must be provided " ) ; <nl> + } <nl> + if ( TextUtils . isEmpty ( assetFile ) ) { <nl> + throw new IllegalArgumentException ( " A non - empty asset file path must be provided " ) ; <nl> + } <nl> + if ( durability = = SharedGroup . Durability . MEM _ ONLY ) { <nl> + throw new RealmException ( " Realm can not use in - memory configuration if asset file is present . " ) ; <nl> + } <nl> + <nl> + this . contextWeakRef = new WeakReference < > ( context ) ; <nl> + this . assetFilePath = assetFile ; <nl> + <nl> + return this ; <nl> + } <nl> + <nl> private void addModule ( Object module ) { <nl> if ( module ! = null ) { <nl> checkModule ( module ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 index 24d1fc3 . . 9a2456d 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 @ @ - 31 , 9 + 31 , 11 @ @ import java . io . File ; 
 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 - import io . realm . util . SyncTestUtils ; 
 
 + import static io . realm . util . SyncTestUtils . createTestUser ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ RunWith ( AndroidJUnit4 . class ) 
 @ @ - 74 , 7 + 76 , 7 @ @ public class SyncConfigurationTests { 
 } catch ( IllegalArgumentException ignore ) { 
 } 
 
 - User user = SyncTestUtils . createTestUser ( 0 ) ; / / Create user that has expired credentials 
 + User user = createTestUser ( 0 ) ; / / Create user that has expired credentials 
 try { 
 builder . user ( user ) ; 
 } catch ( IllegalArgumentException ignore ) { 
 @ @ - 83 , 7 + 85 , 7 @ @ public class SyncConfigurationTests { 
 
 @ Test 
 public void serverUrl _ setsFolderAndFileName ( ) { 
 - User user = SyncTestUtils . createTestUser ( ) ; 
 + User user = createTestUser ( ) ; 
 String [ ] [ ] validUrls = { 
 / / < URL > , < Folder > , < FileName > 
 { " realm : / / objectserver . realm . io / ~ / default " , " realm - object - server / " + user . getIdentity ( ) , " default " } , 
 @ @ - 127 , 6 + 129 , 39 @ @ public class SyncConfigurationTests { 
 } 
 } 
 
 + private String makeServerUrl ( int len ) { 
 + StringBuilder builder = new StringBuilder ( " realm : / / objectserver . realm . io / ~ / " ) ; 
 + for ( int i = 0 ; i < len ; i + + ) { 
 + builder . append ( ' A ' ) ; 
 + } 
 + return builder . toString ( ) ; 
 + } 
 + 
 + @ Test 
 + public void serverUrl _ length ( ) { 
 + int [ ] lengths = { 1 , SyncConfiguration . MAX _ FILE _ NAME _ LENGTH - 1 , 
 + SyncConfiguration . MAX _ FILE _ NAME _ LENGTH , SyncConfiguration . MAX _ FILE _ NAME _ LENGTH + 1 , 1000 } ; 
 + 
 + for ( int len : lengths ) { 
 + SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) 
 + . serverUrl ( makeServerUrl ( len ) ) 
 + . user ( createTestUser ( ) ) ; 
 + 
 + SyncConfiguration config = builder . build ( ) ; 
 + assertTrue ( " Length : " + len , config . getRealmFileName ( ) . length ( ) < = SyncConfiguration . MAX _ FILE _ NAME _ LENGTH ) ; 
 + assertTrue ( " Length : " + len , config . getPath ( ) . length ( ) < = SyncConfiguration . MAX _ FULL _ PATH _ LENGTH ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void serverUrl _ invalidChars ( ) { 
 + SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) 
 + . serverUrl ( " realm : / / objectserver . realm . io / ~ / ? " ) 
 + . user ( createTestUser ( ) ) ; 
 + SyncConfiguration config = builder . build ( ) ; 
 + assertFalse ( config . getRealmFileName ( ) . contains ( " ? " ) ) ; 
 + } 
 + 
 @ Test 
 public void userAndServerUrlRequired ( ) { 
 SyncConfiguration . Builder builder ; 
 @ @ - 140 , 7 + 175 , 7 @ @ public class SyncConfigurationTests { 
 
 builder = new SyncConfiguration . Builder ( context ) ; 
 try { 
 - builder . user ( SyncTestUtils . createTestUser ( Long . MAX _ VALUE ) ) . build ( ) ; 
 + builder . user ( createTestUser ( Long . MAX _ VALUE ) ) . build ( ) ; 
 } catch ( IllegalStateException ignore ) { 
 } 
 
 @ @ - 156 , 7 + 191 , 7 @ @ public class SyncConfigurationTests { 
 public void errorHandler ( ) { 
 SyncConfiguration . Builder builder ; 
 builder = new SyncConfiguration . Builder ( context ) 
 - . user ( SyncTestUtils . createTestUser ( ) ) 
 + . user ( createTestUser ( ) ) 
 . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; 
 
 Session . ErrorHandler errorHandler = new Session . ErrorHandler ( ) { 
 @ @ - 183 , 7 + 218 , 7 @ @ public class SyncConfigurationTests { 
 
 / / Create configuration using the default handler 
 SyncConfiguration config = new SyncConfiguration . Builder ( context ) 
 - . user ( SyncTestUtils . createTestUser ( ) ) 
 + . user ( createTestUser ( ) ) 
 . serverUrl ( " realm : / / objectserver . realm . io / default " ) 
 . build ( ) ; 
 assertEquals ( errorHandler , config . getErrorHandler ( ) ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 index a6891d9 . . d97ed95 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 @ @ - 19 , 12 + 19 , 16 @ @ package io . realm ; 
 import android . content . Context ; 
 
 import java . io . File ; 
 + import java . io . UnsupportedEncodingException ; 
 import java . net . URI ; 
 import java . net . URISyntaxException ; 
 + import java . security . MessageDigest ; 
 + import java . security . NoSuchAlgorithmException ; 
 import java . util . Arrays ; 
 import java . util . HashSet ; 
 
 import io . realm . annotations . RealmModule ; 
 + import io . realm . exceptions . RealmException ; 
 import io . realm . internal . RealmProxyMediator ; 
 import io . realm . internal . SharedRealm ; 
 import io . realm . internal . syncpolicy . AutomaticSyncPolicy ; 
 @ @ - 64 , 6 + 68 , 12 @ @ import io . realm . rx . RxObservableFactory ; 
 * / 
 public final class SyncConfiguration extends RealmConfiguration { 
 
 + / / The FAT file system has limitations of length . Also , not all characters are permitted . 
 + / / https : / / msdn . microsoft . com / en - us / library / aa365247 ( VS . 85 ) . aspx 
 + public static final int MAX _ FULL _ PATH _ LENGTH = 256 ; 
 + public static final int MAX _ FILE _ NAME _ LENGTH = 255 ; 
 + private static final char [ ] INVALID _ CHARS = { ' < ' , ' > ' , ' : ' , ' " ' , ' / ' , ' \ \ ' , ' | ' , ' ? ' , ' * ' } ; 
 + 
 private final URI serverUrl ; 
 private final User user ; 
 private final SyncPolicy syncPolicy ; 
 @ @ - 380 , 6 + 390 , 11 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 * 
 * This behaviour can be overwritten using { @ link # name ( String ) } and { @ link # directory ( File ) } . 
 * 
 + * Many Android devices are using FAT32 file systems . FAT32 file systems have a limitation that 
 + * file name cannot be longer than 255 characters . Moreover , the entire URL should not exceed 256 characters . 
 + * If file name and underlying path are too long to handle for FAT32 , a shorter unique name will be generated . 
 + * See also @ { link https : / / msdn . microsoft . com / en - us / library / aa365247 ( VS . 85 ) . aspx } . 
 + * 
 * @ param url URL identifying the Realm . 
 * @ throws IllegalArgumentException if the URL is not valid . 
 * / 
 @ @ - 459 , 6 + 474 , 22 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 return this ; 
 } 
 
 + private String MD5 ( String in ) { 
 + try { 
 + MessageDigest digest = MessageDigest . getInstance ( " MD5 " ) ; 
 + byte [ ] buf = digest . digest ( in . getBytes ( " UTF - 8 " ) ) ; 
 + StringBuilder builder = new StringBuilder ( ) ; 
 + for ( byte b : buf ) { 
 + builder . append ( String . format ( " % 02X " , b ) ) ; 
 + } 
 + return builder . toString ( ) ; 
 + } catch ( NoSuchAlgorithmException e ) { 
 + throw new RealmException ( e . getMessage ( ) ) ; 
 + } catch ( UnsupportedEncodingException e ) { 
 + throw new RealmException ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 / * * 
 * Setting this will cause the local Realm file used to synchronize changes to be deleted if the { @ link User } 
 * defined by { @ link # user ( User ) } logs out from the device using { @ link User # logout ( ) } . 
 @ @ - 495 , 11 + 526 , 39 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 File rootDir = overrideDefaultFolder ? directory : defaultFolder ; 
 String realmPathFromRootDir = getServerPath ( resolvedServerUrl ) ; 
 File realmFileDirectory = new File ( rootDir , realmPathFromRootDir ) ; 
 + 
 + String realmFileName = overrideDefaultLocalFileName ? fileName : defaultLocalFileName ; 
 + String fullPathName = realmFileDirectory . getAbsolutePath ( ) + File . pathSeparator + realmFileName ; 
 + / / full path must not exceed 256 characters ( on FAT ) 
 + if ( fullPathName . length ( ) > MAX _ FULL _ PATH _ LENGTH ) { 
 + / / path is too long , so we make the file name shorter 
 + realmFileName = MD5 ( realmFileName ) ; 
 + fullPathName = realmFileDirectory . getAbsolutePath ( ) + File . pathSeparator + realmFileName ; 
 + if ( fullPathName . length ( ) > MAX _ FULL _ PATH _ LENGTH ) { 
 + / / use rootDir / userIdentify as directory instead as it is shorter 
 + realmFileDirectory = new File ( rootDir , user . getIdentity ( ) ) ; 
 + fullPathName = realmFileDirectory . getAbsolutePath ( ) + File . pathSeparator + realmFileName ; 
 + if ( fullPathName . length ( ) > MAX _ FULL _ PATH _ LENGTH ) { / / we are out of ideas 
 + throw new IllegalStateException ( String . format ( " Full path name must not exceed % d characters : % s " , 
 + MAX _ FULL _ PATH _ LENGTH , fullPathName ) ) ; 
 + } 
 + } 
 + } 
 + 
 + if ( realmFileName . length ( ) > MAX _ FILE _ NAME _ LENGTH ) { 
 + throw new IllegalStateException ( String . format ( " File name exceed % d characters : % d " , MAX _ FILE _ NAME _ LENGTH , 
 + realmFileName . length ( ) ) ) ; 
 + } 
 + 
 + / / substitute invalid characters 
 + for ( char c : INVALID _ CHARS ) { 
 + realmFileName = realmFileName . replace ( c , ' _ ' ) ; 
 + } 
 + 
 / / Create the folder on disk ( if needed ) 
 if ( ! realmFileDirectory . exists ( ) & & ! realmFileDirectory . mkdirs ( ) ) { 
 throw new IllegalStateException ( " Could not create directory for saving the Realm : " + realmFileDirectory ) ; 
 } 
 - String realmFileName = overrideDefaultLocalFileName ? fileName : defaultLocalFileName ; 
 
 return new SyncConfiguration ( 
 / / Realm Configuration options

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / assets / asset _ file . realm b / realm / realm - library / src / androidTest / assets / asset _ file . realm 
 new file mode 100644 
 index 0000000 . . 1539f77 
 Binary files / dev / null and b / realm / realm - library / src / androidTest / assets / asset _ file . realm differ 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 index cb720cf . . d799572 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 @ @ - 16 , 17 + 16 , 17 @ @ 
 
 package io . realm ; 
 
 - import android . content . Context ; 
 - import android . support . test . InstrumentationRegistry ; 
 - import android . support . test . runner . AndroidJUnit4 ; 
 - import android . test . MoreAsserts ; 
 - 
 import org . junit . After ; 
 import org . junit . Before ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 + import android . content . Context ; 
 + import android . support . test . InstrumentationRegistry ; 
 + import android . support . test . runner . AndroidJUnit4 ; 
 + import android . test . MoreAsserts ; 
 + 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . lang . reflect . Field ; 
 @ @ - 41 , 6 + 41 , 8 @ @ import io . realm . entities . CyclicType ; 
 import io . realm . entities . Dog ; 
 import io . realm . entities . HumanModule ; 
 import io . realm . entities . Owner ; 
 + import io . realm . exceptions . RealmException ; 
 + import io . realm . exceptions . RealmIOException ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 import io . realm . internal . modules . CompositeMediator ; 
 import io . realm . internal . modules . FilterableMediator ; 
 @ @ - 764 , 14 + 766 , 11 @ @ public class RealmConfigurationTests { 
 Realm . deleteRealm ( defaultConfig ) ; 
 
 Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 - configFactory . copyRealmFromAssets ( context , " default - before - migration . realm " , Realm . DEFAULT _ REALM _ NAME ) ; 
 + configFactory . copyRealmFromAssets ( context , " asset _ file . realm " , Realm . DEFAULT _ REALM _ NAME ) ; 
 assertTrue ( new File ( configFactory . getRoot ( ) , Realm . DEFAULT _ REALM _ NAME ) . exists ( ) ) ; 
 
 Realm . Transaction transaction = mock ( Realm . Transaction . class ) ; 
 RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) 
 - / / Just reuse existing file and set right schema 
 - . schemaVersion ( 0 ) 
 - . schema ( AllTypes . class ) 
 . initialData ( transaction ) 
 . build ( ) ; 
 
 @ @ - 780 , 6 + 779 , 83 @ @ public class RealmConfigurationTests { 
 verify ( transaction , never ( ) ) . execute ( realm ) ; 
 } 
 
 + @ Test 
 + public void assetFileNullAndEmptyFileName ( ) { 
 + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 + try { 
 + new RealmConfiguration . Builder ( context ) . assetFile ( context , null ) . build ( ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 + 
 + try { 
 + new RealmConfiguration . Builder ( context ) . assetFile ( context , " " ) . build ( ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 + } 
 + 
 + @ Test 
 + public void assetFileWithInMemoryConfig ( ) { 
 + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 + 
 + / / Ensure that there is no data 
 + Realm . deleteRealm ( new RealmConfiguration . Builder ( context ) . build ( ) ) ; 
 + 
 + try { 
 + new RealmConfiguration . Builder ( context ) . assetFile ( context , " asset _ file . realm " ) . inMemory ( ) . build ( ) ; 
 + fail ( ) ; 
 + } catch ( RealmException ignored ) { 
 + } 
 + } 
 + 
 + @ Test 
 + public void assetFileFakeFile ( ) { 
 + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 + 
 + / / Ensure that there is no data 
 + Realm . deleteRealm ( new RealmConfiguration . Builder ( context ) . build ( ) ) ; 
 + 
 + RealmConfiguration configuration = new RealmConfiguration . Builder ( context ) . assetFile ( context , " no _ file " ) . build ( ) ; 
 + try { 
 + Realm . getInstance ( configuration ) ; 
 + fail ( ) ; 
 + } catch ( RealmIOException ignored ) { 
 + } 
 + } 
 + 
 + @ Test 
 + public void assetFileValidFile ( ) throws IOException { 
 + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 + 
 + / / Ensure that there is no data 
 + Realm . deleteRealm ( new RealmConfiguration . Builder ( context ) . build ( ) ) ; 
 + 
 + RealmConfiguration configuration = new RealmConfiguration . Builder ( context ) . assetFile ( context , " asset _ file . realm " ) 
 + . build ( ) ; 
 + Realm . deleteRealm ( configuration ) ; 
 + 
 + File realmFile = new File ( configuration . getPath ( ) ) ; 
 + assertFalse ( realmFile . exists ( ) ) ; 
 + 
 + realm = Realm . getInstance ( configuration ) ; 
 + assertTrue ( realmFile . exists ( ) ) ; 
 + 
 + / / Asset file has 10 Owners and 10 Cats , check if data is present 
 + assertEquals ( 10 , realm . where ( Owner . class ) . count ( ) ) ; 
 + assertEquals ( 10 , realm . where ( Cat . class ) . count ( ) ) ; 
 + 
 + realm . close ( ) ; 
 + 
 + / / Copy original file to another location 
 + configFactory . copyRealmFromAssets ( context , " asset _ file . realm " , " asset _ file _ copy . realm " ) ; 
 + File copyFromAsset = new File ( configFactory . getRoot ( ) , " asset _ file _ copy . realm " ) ; 
 + assertTrue ( copyFromAsset . exists ( ) ) ; 
 + 
 + Realm . deleteRealm ( configuration ) ; 
 + assertFalse ( realmFile . exists ( ) ) ; 
 + } 
 + 
 private static class MigrationWithNoEquals implements RealmMigration { 
 @ Override 
 public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 index 35b554d . . 824f7fb 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 @ @ - 15 , 11 + 15 , 16 @ @ 
 * / 
 package io . realm ; 
 
 + import java . io . File ; 
 + import java . io . FileOutputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . util . Arrays ; 
 import java . util . EnumMap ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 + import io . realm . exceptions . RealmIOException ; 
 import io . realm . internal . ColumnIndices ; 
 import io . realm . internal . log . RealmLog ; 
 
 @ @ - 102 , 6 + 107 , 8 @ @ final class RealmCache { 
 cache = new RealmCache ( configuration ) ; 
 / / The new cache should be added to the map later . 
 isCacheInMap = false ; 
 + 
 + copyAssetFileIfNeeded ( configuration ) ; 
 } else { 
 / / Throw the exception if validation failed . 
 cache . validateConfiguration ( configuration ) ; 
 @ @ - 113 , 6 + 120 , 7 @ @ final class RealmCache { 
 / / Create a new local Realm instance 
 BaseRealm realm ; 
 
 + 
 if ( realmClass = = Realm . class ) { 
 / / RealmMigrationNeededException might be thrown here . 
 realm = Realm . createInstance ( configuration , cache . typedColumnIndices ) ; 
 @ @ - 266 , 7 + 274 , 7 @ @ final class RealmCache { 
 callback . onResult ( totalRefCount ) ; 
 } 
 
 - / * * 
 + / * * 
 * Runs the callback function with synchronization on { @ class RealmCache } . 
 * 
 * @ param callback the callback will be executed . 
 @ @ - 274 , 4 + 282 , 53 @ @ final class RealmCache { 
 static synchronized void invokeWithLock ( Callback0 callback ) { 
 callback . onCall ( ) ; 
 } 
 + 
 + / * * 
 + * Copies Realm database file from Android asset directory to the directory given in the { @ link RealmConfiguration } . 
 + * Copy is performed only at the first time when there is no Realm database file . 
 + * 
 + * @ param configuration configuration object for Realm instance . 
 + * @ throws IOException if copying the file fails . 
 + * / 
 + private static void copyAssetFileIfNeeded ( RealmConfiguration configuration ) { 
 + if ( configuration . hasAssetFile ( ) ) { 
 + File realmFile = new File ( configuration . getRealmFolder ( ) , configuration . getRealmFileName ( ) ) ; 
 + if ( realmFile . exists ( ) ) { 
 + return ; 
 + } 
 + 
 + InputStream inputStream = null ; 
 + FileOutputStream outputStream = null ; 
 + try { 
 + inputStream = configuration . getAssetFile ( ) ; 
 + if ( inputStream = = null ) { 
 + throw new RealmIOException ( " Invalid input stream to asset file . " ) ; 
 + } 
 + 
 + outputStream = new FileOutputStream ( realmFile ) ; 
 + byte [ ] buf = new byte [ 4096 ] ; 
 + int bytesRead ; 
 + while ( ( bytesRead = inputStream . read ( buf ) ) > - 1 ) { 
 + outputStream . write ( buf , 0 , bytesRead ) ; 
 + } 
 + } catch ( IOException e ) { 
 + throw new RealmIOException ( " Could not resolve the path to the Realm asset file . " , e ) ; 
 + } finally { 
 + if ( inputStream ! = null ) { 
 + try { 
 + inputStream . close ( ) ; 
 + } catch ( IOException e ) { 
 + / / Ignore this exception because any significant errors should already have been handled 
 + } 
 + } 
 + if ( outputStream ! = null ) { 
 + try { 
 + outputStream . close ( ) ; 
 + } catch ( IOException e ) { 
 + throw new RealmIOException ( " Invalid output stream to " + realmFile . getPath ( ) , e ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 6b978ec . . d4a85d3 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 17 , 8 + 17 , 12 @ @ 
 package io . realm ; 
 
 import android . content . Context ; 
 + import android . text . TextUtils ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . lang . ref . WeakReference ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . util . Arrays ; 
 @ @ - 81 , 6 + 85 , 7 @ @ public final class RealmConfiguration { 
 private final File realmFolder ; 
 private final String realmFileName ; 
 private final String canonicalPath ; 
 + private final String assetFilePath ; 
 private final byte [ ] key ; 
 private final long schemaVersion ; 
 private final RealmMigration migration ; 
 @ @ - 89 , 11 + 94 , 13 @ @ public final class RealmConfiguration { 
 private final RealmProxyMediator schemaMediator ; 
 private final RxObservableFactory rxObservableFactory ; 
 private final Realm . Transaction initialDataTransaction ; 
 + private final WeakReference < Context > contextWeakRef ; 
 
 private RealmConfiguration ( Builder builder ) { 
 this . realmFolder = builder . folder ; 
 this . realmFileName = builder . fileName ; 
 this . canonicalPath = Realm . getCanonicalPath ( new File ( realmFolder , realmFileName ) ) ; 
 + this . assetFilePath = builder . assetFilePath ; 
 this . key = builder . key ; 
 this . schemaVersion = builder . schemaVersion ; 
 this . deleteRealmIfMigrationNeeded = builder . deleteRealmIfMigrationNeeded ; 
 @ @ - 102 , 6 + 109 , 7 @ @ public final class RealmConfiguration { 
 this . schemaMediator = createSchemaMediator ( builder ) ; 
 this . rxObservableFactory = builder . rxFactory ; 
 this . initialDataTransaction = builder . initialDataTransaction ; 
 + this . contextWeakRef = builder . contextWeakRef ; 
 } 
 
 public File getRealmFolder ( ) { 
 @ @ - 151 , 6 + 159 , 30 @ @ public final class RealmConfiguration { 
 } 
 
 / * * 
 + * Indicates if there is available asset file for copy action . 
 + * 
 + * @ return true if there is asset file , false otherwise . 
 + * / 
 + boolean hasAssetFile ( ) { 
 + return ! TextUtils . isEmpty ( assetFilePath ) ; 
 + } 
 + 
 + / * * 
 + * Returns input stream object to the Realm asset file . 
 + * 
 + * @ return input stream to the asset file . 
 + * @ throws IOException if copying the file fails . 
 + * / 
 + InputStream getAssetFile ( ) throws IOException { 
 + Context context = contextWeakRef . get ( ) ; 
 + if ( context ! = null ) { 
 + return context . getAssets ( ) . open ( assetFilePath ) ; 
 + } else { 
 + throw new IllegalArgumentException ( " Context should not be null . Use Application Context instead of Activity Context . " ) ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the unmodifiable { @ link Set } of model classes that make up the schema for this Realm . 
 * 
 * @ return unmodifiable { @ link Set } of model classes . 
 @ @ - 314 , 6 + 346 , 7 @ @ public final class RealmConfiguration { 
 public static final class Builder { 
 private File folder ; 
 private String fileName ; 
 + private String assetFilePath ; 
 private byte [ ] key ; 
 private long schemaVersion ; 
 private RealmMigration migration ; 
 @ @ - 321 , 6 + 354 , 7 @ @ public final class RealmConfiguration { 
 private SharedGroup . Durability durability ; 
 private HashSet < Object > modules = new HashSet < Object > ( ) ; 
 private HashSet < Class < ? extends RealmModel > > debugSchema = new HashSet < Class < ? extends RealmModel > > ( ) ; 
 + private WeakReference < Context > contextWeakRef ; 
 private RxObservableFactory rxFactory ; 
 private Realm . Transaction initialDataTransaction ; 
 
 @ @ - 339 , 7 + 373 , 7 @ @ public final class RealmConfiguration { 
 / * * 
 * Creates an instance of the Builder for the RealmConfiguration . 
 * 
 - * This will use the apps own internal directory for storing the Realm file . This does not require any 
 + * This will use the app ' s own internal directory for storing the Realm file . This does not require any 
 * additional permissions . The default location is { @ code / data / data / < packagename > / files } , but can 
 * change depending on vendor implementations of Android . 
 * 
 @ @ - 453 , 7 + 487 , 12 @ @ public final class RealmConfiguration { 
 * reference to the in - memory Realm object with the specific name as long as you want the data to last . 
 * / 
 public Builder inMemory ( ) { 
 + if ( ! TextUtils . isEmpty ( assetFilePath ) ) { 
 + throw new RealmException ( " Realm can not use in - memory configuration if asset file is present . " ) ; 
 + } 
 + 
 this . durability = SharedGroup . Durability . MEM _ ONLY ; 
 + 
 return this ; 
 } 
 
 @ @ - 506 , 6 + 545 , 33 @ @ public final class RealmConfiguration { 
 return this ; 
 } 
 
 + / * * 
 + * Copies the Realm file from the given asset file path . 
 + * 
 + * When opening the Realm for the first time , instead of creating an empty file , 
 + * the Realm file will be copied from the provided assets file and used instead . 
 + * WARNING : This could potentially be a lengthy operation so should ideally be done on a background thread . 
 + * 
 + * @ param context Android application context . 
 + * @ param assetFile path to the asset database file . 
 + * / 
 + public Builder assetFile ( Context context , final String assetFile ) { 
 + if ( context = = null ) { 
 + throw new IllegalArgumentException ( " A non - null Context must be provided " ) ; 
 + } 
 + if ( TextUtils . isEmpty ( assetFile ) ) { 
 + throw new IllegalArgumentException ( " A non - empty asset file path must be provided " ) ; 
 + } 
 + if ( durability = = SharedGroup . Durability . MEM _ ONLY ) { 
 + throw new RealmException ( " Realm can not use in - memory configuration if asset file is present . " ) ; 
 + } 
 + 
 + this . contextWeakRef = new WeakReference < > ( context ) ; 
 + this . assetFilePath = assetFile ; 
 + 
 + return this ; 
 + } 
 + 
 private void addModule ( Object module ) { 
 if ( module ! = null ) { 
 checkModule ( module ) ;
