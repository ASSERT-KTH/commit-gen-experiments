BLEU SCORE: 0.027611988917697356

TEST MSG: Remove unused defs of build . gradle .
GENERATED MSG: Improve NDK and SDK management

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index b086592 . . 4f756b4 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 20 , 30 + 20 , 6 @ @ props . each { key , val - > <nl> project . set ( key , val ) <nl> } <nl> <nl> - def getSdk ( ) { <nl> - if ( ! System . env . ANDROID _ HOME ) { <nl> - throw new GradleException ( ' The ANDROID _ HOME environment variable is not set . ' ) <nl> - } <nl> - def sdkDir = file ( System . env . ANDROID _ HOME ) <nl> - if ( ! sdkDir . directory ) { <nl> - throw new GradleException ( ' The path provided in the ANDROID _ HOME environment variable is not a folder . ' ) <nl> - } <nl> - return sdkDir <nl> - } <nl> - <nl> - def getNdk ( ) { <nl> - if ( ! System . env . NDK _ HOME ) { <nl> - throw new GradleException ( ' The NDK _ HOME environment variable is not set . ' ) <nl> - } <nl> - def ndkDir = file ( System . env . NDK _ HOME ) <nl> - if ( ! ndkDir . directory ) { <nl> - throw new GradleException ( ' The path provided in the NDK _ HOME environment variable is not a folder . ' ) <nl> - } else if ( ! file ( " $ { sdndkDirkDir } / RELEASE . TXT " ) . file ) { <nl> - throw new GradleException ( ' The path provided in the NDK _ HOME environment variable does not seem to be an Android NDK . ' ) <nl> - } <nl> - return ndkDir <nl> - } <nl> - <nl> task assembleGradlePlugin ( type : GradleBuild ) { <nl> group = ' Build ' <nl> description = ' Assemble the Realm Gradle plugin '
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index cab6731 . . 4f85302 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 14 , 30 + 14 , 30 @ @ apply plugin : ' com . jfrog . artifactory ' <nl> apply plugin : ' com . jfrog . bintray ' <nl> apply plugin : ' ch . netzwerg . release ' <nl> <nl> - def currentVersion = new File ( " $ { projectDir } / version . txt " ) . text . trim ( ) ; <nl> + def currentVersion = file ( " $ { projectDir } / version . txt " ) . text . trim ( ) ; <nl> <nl> - task checkEnvironment ( group : ' check ' , description : ' Check the user provided gradle . properties ' ) < < { <nl> - def ndkDir = System . env . NDK _ HOME <nl> - if ( ! ndkDir ) { <nl> + def getSdk ( ) { <nl> + if ( ! System . env . ANDROID _ HOME ) { <nl> + throw new GradleException ( ' The ANDROID _ HOME environment variable is not set . ' ) <nl> + } <nl> + def sdkDir = file ( System . env . ANDROID _ HOME ) <nl> + if ( ! sdkDir . directory ) { <nl> + throw new GradleException ( ' The path provided in the ANDROID _ HOME environment variable is not a folder . ' ) <nl> + } <nl> + return sdkDir <nl> + } <nl> + <nl> + def getNdk ( ) { <nl> + if ( ! System . env . NDK _ HOME ) { <nl> throw new GradleException ( ' The NDK _ HOME environment variable is not set . ' ) <nl> - } else if ( ndkDir . endsWith ( ' / ' ) ) { <nl> - throw new GradleException ( ' The NDK _ HOME environment variable ends with / ' ) <nl> - } else if ( ! file ( ndkDir ) . directory ) { <nl> + } <nl> + def ndkDir = file ( System . env . NDK _ HOME ) <nl> + if ( ! ndkDir . directory ) { <nl> throw new GradleException ( ' The path provided in the NDK _ HOME environment variable is not a folder . ' ) <nl> - } else if ( ! file ( new File ( ndkDir , ' RELEASE . TXT ' ) ) . file ) { <nl> + } else if ( ! file ( " $ { sdndkDirkDir } / RELEASE . TXT " ) . file ) { <nl> throw new GradleException ( ' The path provided in the NDK _ HOME environment variable does not seem to be an Android NDK . ' ) <nl> } <nl> - <nl> - def sdkDir = System . env . ANDROID _ HOME <nl> - if ( ! sdkDir ) { <nl> - throw new GradleException ( ' The ANDROID _ HOME environment variable is not set . ' ) <nl> - } else if ( sdkDir . endsWith ( ' / ' ) ) { <nl> - throw new GradleException ( ' The ANDROID _ HOME environment variable ends with / ' ) <nl> - } else if ( ! file ( sdkDir ) . directory ) { <nl> - throw new GradleException ( ' The path provided in the ANDROID _ HOME environment variable is not a folder . ' ) <nl> - } else if ( ! file ( new File ( sdkDir , ' RELEASE . TXT ' ) ) . file ) { <nl> - throw new GradleException ( ' The path provided in the ANDROID _ HOME environment variable does not seem to be an Android NDK . ' ) <nl> - } <nl> + return ndkDir <nl> } <nl> <nl> task assembleGradlePlugin ( type : GradleBuild ) { <nl> @ @ - 162 , 8 + 162 , 7 @ @ task cleanExamples ( type : GradleBuild ) { <nl> task cleanLocalMavenRepos ( type : Delete ) { <nl> description = ' Remove any Realm artifacts from the local Maven repositories ' <nl> group = ' Clean ' <nl> - dependsOn checkEnvironment <nl> - delete " $ { System . env . ANDROID _ HOME } / extras / android / m2repository / io / realm " <nl> + delete " $ { getSdk ( ) } / extras / android / m2repository / io / realm " <nl> delete " $ { System . env . HOME } / . m2 / repository / io / realm " <nl> } <nl> <nl> diff - - git a / realm / realm - jni / build . gradle b / realm / realm - jni / build . gradle <nl> index 54e2eca . . 06a326a 100644 <nl> - - - a / realm / realm - jni / build . gradle <nl> + + + b / realm / realm - jni / build . gradle <nl> @ @ - 82 , 42 + 82 , 22 @ @ if ( project . forceDownloadCore instanceof String ) { <nl> ext . forceDownloadCore = Boolean . parseBoolean ( project . forceDownloadCore ) <nl> } <nl> <nl> - def getNdkDir ( ) { <nl> - def ndkDir = null <nl> - if ( project . hasProperty ( ' ndk . dir ' ) ) { <nl> - ndkDir = project . ext [ ' ndk . dir ' ] <nl> - } else if ( System . getenv ( ' NDK _ HOME ' ) ) { <nl> - ndkDir = System . getenv ( ' NDK _ HOME ' ) <nl> + def getNdk ( ) { <nl> + if ( ! System . env . NDK _ HOME ) { <nl> + throw new GradleException ( ' The NDK _ HOME environment variable is not set . ' ) <nl> } <nl> - if ( ndkDir ) { <nl> - if ( ndkDir [ - 1 ] = = " / " ) { <nl> - ndkDir = ndkDir [ 0 . . - 2 ] <nl> - } <nl> - } else { <nl> - throw new GradleException ( ' The ndk . dir property in the local . properties file or NDK _ HOME is not set . One of them should be set . ' ) <nl> - } <nl> - if ( ! file ( ndkDir ) . directory ) { <nl> - throw new GradleException ( ' The path provided in the ndk . dir property in the local . properties or NDK _ HOME is not a folder . ' ) <nl> + def ndkDir = file ( System . env . NDK _ HOME ) <nl> + if ( ! ndkDir . directory ) { <nl> + throw new GradleException ( ' The path provided in the NDK _ HOME environment variable is not a folder . ' ) <nl> } <nl> - return ndkDir <nl> - } <nl> - <nl> - def verifyNdk ( ndkDir ) { <nl> - def releaseFile = file ( " $ { ndkDir } / RELEASE . TXT " ) <nl> - if ( ! releaseFile . file ) { <nl> - throw new GradleException ( ' The path provided in the ndk . dir property in the local . properties or NDK _ HOME does not seem to be an Android NDK . ' ) <nl> + if ( ! file ( " $ { ndkDir } / RELEASE . TXT " ) . file ) { <nl> + throw new GradleException ( ' The path provided in the NDK _ HOME environment variable does not seem to be an Android NDK . ' ) <nl> } <nl> - def ndkVersion = releaseFile . getText ( ' UTF - 8 ' ) . split ( ) [ 0 ] <nl> + def ndkVersion = file ( " $ { ndkDir } / RELEASE . TXT " ) . text . trim ( ) . split ( ) [ 0 ] <nl> if ( ndkVersion ! = properNdkVersion ) { <nl> throw new GradleException ( " Your NDK version : $ { ndkVersion } . Realm JNI should be compiled with the version $ { properNdkVersion } of NDK . " ) <nl> } <nl> - } <nl> - <nl> - task checkProperties ( group : ' check ' , description : ' Check the user provided gradle . properties ' ) < < { <nl> - verifyNdk ( getNdkDir ( ) ) <nl> - if ( project . ext . has ( ' encryption ' ) & & project . ext [ ' encryption ' ] = = ' true ' ) { <nl> - project . coreVersion + = ' - encryption ' <nl> - } <nl> + return ndkDir <nl> } <nl> <nl> ext . coreArchiveFile = project . file ( " . . / core - android - $ { project . coreVersion } . tar . gz " ) <nl> @ @ - 221 , 11 + 201 , 10 @ @ task deployCore ( group : ' build setup ' , description : ' Deploy the latest version of <nl> } <nl> <nl> toolchains . each { toolchain - > <nl> - def ndkDir = getNdkDir ( ) <nl> + def ndkDir = getNdk ( ) <nl> task " generateNdkToolchain $ { toolchain . name . capitalize ( ) } " ( type : Exec ) { <nl> group ' build setup ' <nl> description " Generate the NDK standalone toolchain for the $ { toolchain . name . capitalize ( ) } platform " <nl> - dependsOn { checkProperties } <nl> outputs . dir file ( " $ { buildDir } / standalone - toolchains / $ { toolchain . name } " ) <nl> commandLine = [ <nl> " bash " ,

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index b086592 . . 4f756b4 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 20 , 30 + 20 , 6 @ @ props . each { key , val - > 
 project . set ( key , val ) 
 } 
 
 - def getSdk ( ) { 
 - if ( ! System . env . ANDROID _ HOME ) { 
 - throw new GradleException ( ' The ANDROID _ HOME environment variable is not set . ' ) 
 - } 
 - def sdkDir = file ( System . env . ANDROID _ HOME ) 
 - if ( ! sdkDir . directory ) { 
 - throw new GradleException ( ' The path provided in the ANDROID _ HOME environment variable is not a folder . ' ) 
 - } 
 - return sdkDir 
 - } 
 - 
 - def getNdk ( ) { 
 - if ( ! System . env . NDK _ HOME ) { 
 - throw new GradleException ( ' The NDK _ HOME environment variable is not set . ' ) 
 - } 
 - def ndkDir = file ( System . env . NDK _ HOME ) 
 - if ( ! ndkDir . directory ) { 
 - throw new GradleException ( ' The path provided in the NDK _ HOME environment variable is not a folder . ' ) 
 - } else if ( ! file ( " $ { sdndkDirkDir } / RELEASE . TXT " ) . file ) { 
 - throw new GradleException ( ' The path provided in the NDK _ HOME environment variable does not seem to be an Android NDK . ' ) 
 - } 
 - return ndkDir 
 - } 
 - 
 task assembleGradlePlugin ( type : GradleBuild ) { 
 group = ' Build ' 
 description = ' Assemble the Realm Gradle plugin '

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index cab6731 . . 4f85302 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 14 , 30 + 14 , 30 @ @ apply plugin : ' com . jfrog . artifactory ' 
 apply plugin : ' com . jfrog . bintray ' 
 apply plugin : ' ch . netzwerg . release ' 
 
 - def currentVersion = new File ( " $ { projectDir } / version . txt " ) . text . trim ( ) ; 
 + def currentVersion = file ( " $ { projectDir } / version . txt " ) . text . trim ( ) ; 
 
 - task checkEnvironment ( group : ' check ' , description : ' Check the user provided gradle . properties ' ) < < { 
 - def ndkDir = System . env . NDK _ HOME 
 - if ( ! ndkDir ) { 
 + def getSdk ( ) { 
 + if ( ! System . env . ANDROID _ HOME ) { 
 + throw new GradleException ( ' The ANDROID _ HOME environment variable is not set . ' ) 
 + } 
 + def sdkDir = file ( System . env . ANDROID _ HOME ) 
 + if ( ! sdkDir . directory ) { 
 + throw new GradleException ( ' The path provided in the ANDROID _ HOME environment variable is not a folder . ' ) 
 + } 
 + return sdkDir 
 + } 
 + 
 + def getNdk ( ) { 
 + if ( ! System . env . NDK _ HOME ) { 
 throw new GradleException ( ' The NDK _ HOME environment variable is not set . ' ) 
 - } else if ( ndkDir . endsWith ( ' / ' ) ) { 
 - throw new GradleException ( ' The NDK _ HOME environment variable ends with / ' ) 
 - } else if ( ! file ( ndkDir ) . directory ) { 
 + } 
 + def ndkDir = file ( System . env . NDK _ HOME ) 
 + if ( ! ndkDir . directory ) { 
 throw new GradleException ( ' The path provided in the NDK _ HOME environment variable is not a folder . ' ) 
 - } else if ( ! file ( new File ( ndkDir , ' RELEASE . TXT ' ) ) . file ) { 
 + } else if ( ! file ( " $ { sdndkDirkDir } / RELEASE . TXT " ) . file ) { 
 throw new GradleException ( ' The path provided in the NDK _ HOME environment variable does not seem to be an Android NDK . ' ) 
 } 
 - 
 - def sdkDir = System . env . ANDROID _ HOME 
 - if ( ! sdkDir ) { 
 - throw new GradleException ( ' The ANDROID _ HOME environment variable is not set . ' ) 
 - } else if ( sdkDir . endsWith ( ' / ' ) ) { 
 - throw new GradleException ( ' The ANDROID _ HOME environment variable ends with / ' ) 
 - } else if ( ! file ( sdkDir ) . directory ) { 
 - throw new GradleException ( ' The path provided in the ANDROID _ HOME environment variable is not a folder . ' ) 
 - } else if ( ! file ( new File ( sdkDir , ' RELEASE . TXT ' ) ) . file ) { 
 - throw new GradleException ( ' The path provided in the ANDROID _ HOME environment variable does not seem to be an Android NDK . ' ) 
 - } 
 + return ndkDir 
 } 
 
 task assembleGradlePlugin ( type : GradleBuild ) { 
 @ @ - 162 , 8 + 162 , 7 @ @ task cleanExamples ( type : GradleBuild ) { 
 task cleanLocalMavenRepos ( type : Delete ) { 
 description = ' Remove any Realm artifacts from the local Maven repositories ' 
 group = ' Clean ' 
 - dependsOn checkEnvironment 
 - delete " $ { System . env . ANDROID _ HOME } / extras / android / m2repository / io / realm " 
 + delete " $ { getSdk ( ) } / extras / android / m2repository / io / realm " 
 delete " $ { System . env . HOME } / . m2 / repository / io / realm " 
 } 
 
 diff - - git a / realm / realm - jni / build . gradle b / realm / realm - jni / build . gradle 
 index 54e2eca . . 06a326a 100644 
 - - - a / realm / realm - jni / build . gradle 
 + + + b / realm / realm - jni / build . gradle 
 @ @ - 82 , 42 + 82 , 22 @ @ if ( project . forceDownloadCore instanceof String ) { 
 ext . forceDownloadCore = Boolean . parseBoolean ( project . forceDownloadCore ) 
 } 
 
 - def getNdkDir ( ) { 
 - def ndkDir = null 
 - if ( project . hasProperty ( ' ndk . dir ' ) ) { 
 - ndkDir = project . ext [ ' ndk . dir ' ] 
 - } else if ( System . getenv ( ' NDK _ HOME ' ) ) { 
 - ndkDir = System . getenv ( ' NDK _ HOME ' ) 
 + def getNdk ( ) { 
 + if ( ! System . env . NDK _ HOME ) { 
 + throw new GradleException ( ' The NDK _ HOME environment variable is not set . ' ) 
 } 
 - if ( ndkDir ) { 
 - if ( ndkDir [ - 1 ] = = " / " ) { 
 - ndkDir = ndkDir [ 0 . . - 2 ] 
 - } 
 - } else { 
 - throw new GradleException ( ' The ndk . dir property in the local . properties file or NDK _ HOME is not set . One of them should be set . ' ) 
 - } 
 - if ( ! file ( ndkDir ) . directory ) { 
 - throw new GradleException ( ' The path provided in the ndk . dir property in the local . properties or NDK _ HOME is not a folder . ' ) 
 + def ndkDir = file ( System . env . NDK _ HOME ) 
 + if ( ! ndkDir . directory ) { 
 + throw new GradleException ( ' The path provided in the NDK _ HOME environment variable is not a folder . ' ) 
 } 
 - return ndkDir 
 - } 
 - 
 - def verifyNdk ( ndkDir ) { 
 - def releaseFile = file ( " $ { ndkDir } / RELEASE . TXT " ) 
 - if ( ! releaseFile . file ) { 
 - throw new GradleException ( ' The path provided in the ndk . dir property in the local . properties or NDK _ HOME does not seem to be an Android NDK . ' ) 
 + if ( ! file ( " $ { ndkDir } / RELEASE . TXT " ) . file ) { 
 + throw new GradleException ( ' The path provided in the NDK _ HOME environment variable does not seem to be an Android NDK . ' ) 
 } 
 - def ndkVersion = releaseFile . getText ( ' UTF - 8 ' ) . split ( ) [ 0 ] 
 + def ndkVersion = file ( " $ { ndkDir } / RELEASE . TXT " ) . text . trim ( ) . split ( ) [ 0 ] 
 if ( ndkVersion ! = properNdkVersion ) { 
 throw new GradleException ( " Your NDK version : $ { ndkVersion } . Realm JNI should be compiled with the version $ { properNdkVersion } of NDK . " ) 
 } 
 - } 
 - 
 - task checkProperties ( group : ' check ' , description : ' Check the user provided gradle . properties ' ) < < { 
 - verifyNdk ( getNdkDir ( ) ) 
 - if ( project . ext . has ( ' encryption ' ) & & project . ext [ ' encryption ' ] = = ' true ' ) { 
 - project . coreVersion + = ' - encryption ' 
 - } 
 + return ndkDir 
 } 
 
 ext . coreArchiveFile = project . file ( " . . / core - android - $ { project . coreVersion } . tar . gz " ) 
 @ @ - 221 , 11 + 201 , 10 @ @ task deployCore ( group : ' build setup ' , description : ' Deploy the latest version of 
 } 
 
 toolchains . each { toolchain - > 
 - def ndkDir = getNdkDir ( ) 
 + def ndkDir = getNdk ( ) 
 task " generateNdkToolchain $ { toolchain . name . capitalize ( ) } " ( type : Exec ) { 
 group ' build setup ' 
 description " Generate the NDK standalone toolchain for the $ { toolchain . name . capitalize ( ) } platform " 
 - dependsOn { checkProperties } 
 outputs . dir file ( " $ { buildDir } / standalone - toolchains / $ { toolchain . name } " ) 
 commandLine = [ 
 " bash " ,
