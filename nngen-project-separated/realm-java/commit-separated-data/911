BLEU SCORE: 0.03689111847432511

TEST MSG: Update API , Javadoc and unit tests .
GENERATED MSG: Create RxJava factory interface , and add it to RealmConfiguration . Reworded Javadoc .

TEST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index f9f2f5f . . 81f83d2 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 5 + 1 , 7 @ @ <nl> 0 . 87 . 0 <nl> * Added Realm . copyFromRealm ( ) for creating detached copies of Realm objects . <nl> + * Added Realm . asObservable ( ) , RealmResults . asObservable ( ) , RealmObject . asObservable ( ) , DynamicRealm . asObservable ( ) and DynamicRealmObject . asObservable ( ) . <nl> + * Added RealmConfiguration . Builder . rxFactory ( ) and RxObservableFactory for custom RxJava observable factory classes . <nl> <nl> 0 . 86 . 0 <nl> * BREAKING CHANGE : The Migration API has been replaced with a new API . <nl> diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index a68d8ec . . 2d05a93 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 20 , 7 + 20 , 7 @ @ android { <nl> } <nl> <nl> dependencies { <nl> - provided ' io . reactivex : rxjava : 1 . 0 . 16s ' <nl> + provided ' io . reactivex : rxjava : 1 . 0 . 16 ' <nl> compile project ( ' : realm - annotations ' ) <nl> <nl> androidTestApt project ( ' : realm - annotations - processor ' ) <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> index fdff7b9 . . c6a8f2f 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> @ @ - 7 , 7 + 7 , 6 @ @ import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import rx . functions . Action1 ; <nl> - import rx . functions . Func1 ; <nl> <nl> public class RxJavaTests extends AndroidTestCase { <nl> <nl> @ @ - 32 , 7 + 31 , 7 @ @ public class RxJavaTests extends AndroidTestCase { <nl> realm . commitTransaction ( ) ; <nl> <nl> final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + obj . asObservable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> @ Override <nl> public void call ( AllTypes rxObject ) { <nl> assertTrue ( rxObject = = obj ) ; <nl> @ @ - 42 , 23 + 41 , 66 @ @ public class RxJavaTests extends AndroidTestCase { <nl> assertTrue ( subscribedNotified . get ( ) ) ; <nl> } <nl> <nl> - public void testAsyncRealmResultsEmittedOnSubscribe ( ) { <nl> + public void testObjectEmittedOnUpdate ( ) { <nl> + final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; <nl> + realm . beginTransaction ( ) ; <nl> + final AllTypes obj = realm . createObject ( AllTypes . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + obj . asObservable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + @ Override <nl> + public void call ( AllTypes rxObject ) { <nl> + subscriberCalled . addAndGet ( 1 ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + obj . setColumnLong ( 1 ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + assertEquals ( 2 , subscriberCalled . get ( ) ) ; <nl> + } <nl> + <nl> + public void testAsyncObjectEmittedOnSubscribe ( ) { <nl> + realm . beginTransaction ( ) ; <nl> + realm . createObject ( AllTypes . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> - final RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllAsync ( ) ; <nl> - results . observable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { <nl> + final AllTypes asyncObj = realm . where ( AllTypes . class ) . findFirst ( ) ; <nl> + asyncObj . asObservable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> @ Override <nl> - public void call ( RealmResults < AllTypes > rxResults ) { <nl> - assertTrue ( rxResults = = results ) ; <nl> + public void call ( AllTypes rxObject ) { <nl> + assertTrue ( rxObject = = asyncObj ) ; <nl> subscribedNotified . set ( true ) ; <nl> } <nl> } ) ; <nl> assertTrue ( subscribedNotified . get ( ) ) ; <nl> } <nl> <nl> + public void testAsyncObjectEmittedOnUpdate ( ) { <nl> + final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; <nl> + realm . beginTransaction ( ) ; <nl> + AllTypes obj = realm . createObject ( AllTypes . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + realm . where ( AllTypes . class ) . findFirst ( ) . asObservable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + @ Override <nl> + public void call ( AllTypes rxObject ) { <nl> + subscriberCalled . addAndGet ( 1 ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + obj . setColumnLong ( 1 ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + assertEquals ( 2 , subscriberCalled . get ( ) ) ; <nl> + } <nl> + <nl> public void testRealmResultsEmittedOnSubscribe ( ) { <nl> final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> final RealmResults < AllTypes > results = realm . allObjects ( AllTypes . class ) ; <nl> - results . observable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { <nl> + results . asObservable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> public void call ( RealmResults < AllTypes > rxResults ) { <nl> assertTrue ( rxResults = = results ) ; <nl> @ @ - 68 , 37 + 110 , 72 @ @ public class RxJavaTests extends AndroidTestCase { <nl> assertTrue ( subscribedNotified . get ( ) ) ; <nl> } <nl> <nl> - public void testObjectEmittedOnUpdate ( ) { <nl> + public void testResultsEmittedOnUpdate ( ) { <nl> final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; <nl> - <nl> realm . beginTransaction ( ) ; <nl> - final AllTypes obj = realm . createObject ( AllTypes . class ) ; <nl> + RealmResults < AllTypes > results = realm . allObjects ( AllTypes . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + results . asObservable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { <nl> @ Override <nl> - public void call ( AllTypes rxObject ) { <nl> + public void call ( RealmResults < AllTypes > allTypes ) { <nl> subscriberCalled . addAndGet ( 1 ) ; <nl> } <nl> } ) ; <nl> <nl> realm . beginTransaction ( ) ; <nl> - obj . setColumnLong ( 1 ) ; <nl> + realm . createObject ( AllTypes . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> assertEquals ( 2 , subscriberCalled . get ( ) ) ; <nl> } <nl> <nl> - public void testResultsEmittedOnUpdate ( ) { <nl> + public void testAsyncRealmResultsEmittedOnSubscribe ( ) { <nl> + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> + final RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllAsync ( ) ; <nl> + results . asObservable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { <nl> + @ Override <nl> + public void call ( RealmResults < AllTypes > rxResults ) { <nl> + assertTrue ( rxResults = = results ) ; <nl> + subscribedNotified . set ( true ) ; <nl> + } <nl> + } ) ; <nl> + assertTrue ( subscribedNotified . get ( ) ) ; <nl> + } <nl> + <nl> + public void testAsyncResultsEmittedOnUpdate ( ) { <nl> final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; <nl> + realm . allObjects ( AllTypes . class ) . asObservable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { <nl> + @ Override <nl> + public void call ( RealmResults < AllTypes > rxResults ) { <nl> + subscriberCalled . addAndGet ( 1 ) ; <nl> + } <nl> + } ) ; <nl> <nl> realm . beginTransaction ( ) ; <nl> - RealmResults < AllTypes > results = realm . allObjects ( AllTypes . class ) ; <nl> + realm . createObject ( AllTypes . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> - results . observable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { <nl> + assertEquals ( 2 , subscriberCalled . get ( ) ) ; <nl> + } <nl> + <nl> + public void testRealmEmittedOnSubscribe ( ) { <nl> + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> + realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { <nl> @ Override <nl> - public void call ( RealmResults < AllTypes > allTypes ) { <nl> + public void call ( Realm rxRealm ) { <nl> + assertTrue ( rxRealm = = realm ) ; <nl> + subscribedNotified . set ( true ) ; <nl> + } <nl> + } ) ; <nl> + assertTrue ( subscribedNotified . get ( ) ) ; <nl> + } <nl> + <nl> + public void testRealmEmittedOnUpdate ( ) { <nl> + final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; <nl> + realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { <nl> + @ Override <nl> + public void call ( Realm rxRealm ) { <nl> subscriberCalled . addAndGet ( 1 ) ; <nl> } <nl> } ) ; <nl> @ @ - 109 , 4 + 186 , 43 @ @ public class RxJavaTests extends AndroidTestCase { <nl> <nl> assertEquals ( 2 , subscriberCalled . get ( ) ) ; <nl> } <nl> + <nl> + public void testDynamicRealmEmittedOnSubscribe ( ) { <nl> + final DynamicRealm dynamicRealm = DynamicRealm . createInstance ( realm . getConfiguration ( ) ) ; <nl> + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> + dynamicRealm . asObservable ( ) . subscribe ( new Action1 < DynamicRealm > ( ) { <nl> + @ Override <nl> + public void call ( DynamicRealm rxRealm ) { <nl> + assertTrue ( rxRealm = = dynamicRealm ) ; <nl> + subscribedNotified . set ( true ) ; <nl> + } <nl> + } ) ; <nl> + assertTrue ( subscribedNotified . get ( ) ) ; <nl> + dynamicRealm . close ( ) ; <nl> + } <nl> + <nl> + public void testDynamicRealmEmittedOnUpdate ( ) { <nl> + final DynamicRealm dynamicRealm = DynamicRealm . createInstance ( realm . getConfiguration ( ) ) ; <nl> + final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; <nl> + dynamicRealm . asObservable ( ) . subscribe ( new Action1 < DynamicRealm > ( ) { <nl> + @ Override <nl> + public void call ( DynamicRealm rxRealm ) { <nl> + subscriberCalled . addAndGet ( 1 ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + dynamicRealm . beginTransaction ( ) ; <nl> + dynamicRealm . createObject ( " AllTypes " ) ; <nl> + dynamicRealm . commitTransaction ( ) ; <nl> + <nl> + assertEquals ( 2 , subscriberCalled . get ( ) ) ; <nl> + dynamicRealm . close ( ) ; <nl> + } <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 060772a . . fb32c48 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 169 , 7 + 169 , 7 @ @ public abstract class BaseRealm implements Closeable { <nl> * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> - public abstract Observable observable ( ) ; <nl> + public abstract Observable asObservable ( ) ; <nl> <nl> / * * <nl> * Removes all user - defined change listeners . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> index 4a37e1c . . 423d67b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> @ @ - 285 , 7 + 285 , 7 @ @ public final class DynamicRealm extends BaseRealm { <nl> * { @ inheritDoc } <nl> * / <nl> @ Override <nl> - public Observable < DynamicRealm > observable ( ) { <nl> + public Observable < DynamicRealm > asObservable ( ) { <nl> return configuration . getRxFactory ( ) . from ( this ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 212e3d9 . . 32235bd 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 130 , 7 + 130 , 7 @ @ public final class Realm extends BaseRealm { <nl> * { @ inheritDoc } <nl> * / <nl> @ Override <nl> - public Observable < Realm > observable ( ) { <nl> + public Observable < Realm > asObservable ( ) { <nl> return configuration . getRxFactory ( ) . from ( this ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 2e1f4de . . 990e8fc 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 271 , 7 + 271 , 7 @ @ public abstract class RealmObject < E extends RealmObject > { <nl> * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> - public Observable < E > observable ( ) { <nl> + public Observable < E > asObservable ( ) { <nl> return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 8c8d25f . . ffe12a4 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 836 , 7 + 836 , 7 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> - public Observable < RealmResults < E > > observable ( ) { <nl> + public Observable < RealmResults < E > > asObservable ( ) { <nl> return realm . configuration . getRxFactory ( ) . from ( this ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 9f91233 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java <nl> @ @ - 0 , 0 + 1 , 71 @ @ <nl> + package io . realm . rx ; <nl> + <nl> + import io . realm . BaseRealm ; <nl> + import io . realm . DynamicRealm ; <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmList ; <nl> + import io . realm . RealmObject ; <nl> + import io . realm . RealmResults ; <nl> + import rx . Observable ; <nl> + <nl> + / * * <nl> + * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects before <nl> + * emitting them . This is effectively a snapshot of the Realm data at a given point in time . <nl> + * <nl> + * This has the following implications : <nl> + * <nl> + * - Increased memory usage , as all fields including references are copied to the Java heap . <nl> + * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm , but <nl> + * the object will no longer automatically update either . <nl> + * - All guarantees of staying consistent with other data from persisted Realm objects are gone . <nl> + * - The object is no longer thread - confined and can be parsed between threads . <nl> + * <nl> + * @ see { @ link io . realm . Realm # copyFromRealm ( RealmObject ) } <nl> + * / <nl> + public class DetachedCopyObservableFactory implements RxObservableFactory { <nl> + <nl> + private final int maxDepth ; <nl> + <nl> + / * * <nl> + * Creates an instance of this factory class . Detached objects also copy all referenced objects . <nl> + * / <nl> + public DetachedCopyObservableFactory ( ) { <nl> + this ( Integer . MAX _ VALUE ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates an instance of this factory class . Detached copies only contain references up to { @ code maxDepth } away . <nl> + * <nl> + * @ param maxDepth maximum distance from root object that objects are copied . References above this limit will be <nl> + * { @ code null } . <nl> + * @ see io . realm . Realm # copyFromRealm ( RealmObject , int ) <nl> + * / <nl> + public DetachedCopyObservableFactory ( int maxDepth ) { <nl> + this . maxDepth = maxDepth ; <nl> + } <nl> + <nl> + @ Override <nl> + public Observable < Realm > from ( Realm realm ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public Observable < DynamicRealm > from ( DynamicRealm realm ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject > Observable < E > from ( E object ) { <nl> + return null ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> index 940f217 . . 9919f3c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> @ @ - 32 , 11 + 32 , 11 @ @ import rx . subscriptions . Subscriptions ; <nl> / * * <nl> * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . <nl> * <nl> - * @ see Realm # observable ( ) <nl> - * @ see RealmObject # observable ( ) <nl> - * @ see RealmResults # observable ( ) <nl> - * @ see DynamicRealm # observable ( ) <nl> - * @ see DynamicRealmObject # observable ( ) <nl> + * @ see Realm # asObservable ( ) <nl> + * @ see RealmObject # asObservable ( ) <nl> + * @ see RealmResults # asObservable ( ) <nl> + * @ see DynamicRealm # asObservable ( ) <nl> + * @ see DynamicRealmObject # asObservable ( ) <nl> * / <nl> public final class RealmObservableFactory implements RxObservableFactory { <nl> <nl> @ @ - 52 , 11 + 52 , 38 @ @ public final class RealmObservableFactory implements RxObservableFactory { <nl> } <nl> <nl> @ Override <nl> - public < E extends BaseRealm > Observable < E > from ( final E realm ) { <nl> + public Observable < Realm > from ( final Realm realm ) { <nl> checkRxJavaAvailable ( ) ; <nl> - return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> + return Observable . create ( new Observable . OnSubscribe < Realm > ( ) { <nl> @ Override <nl> - public void call ( final Subscriber < ? super E > subscriber ) { <nl> + public void call ( final Subscriber < ? super Realm > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> + } ; <nl> + realm . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + realm . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Observable < DynamicRealm > from ( final DynamicRealm realm ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < DynamicRealm > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super DynamicRealm > subscriber ) { <nl> final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> index 14fd548 . . 8b7386d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package io . realm . rx ; <nl> <nl> - import io . realm . BaseRealm ; <nl> + import io . realm . DynamicRealm ; <nl> + import io . realm . Realm ; <nl> import io . realm . RealmList ; <nl> import io . realm . RealmObject ; <nl> import io . realm . RealmResults ; <nl> @ @ - 12 , 14 + 13 , 24 @ @ import rx . Observable ; <nl> public interface RxObservableFactory { <nl> <nl> / * * <nl> - * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each <nl> - * update to the Realm . <nl> + * Creates an Observable for a { @ link Realm } . It should emit the initial state of the Realm when subscribed to and <nl> + * on each update to the Realm . <nl> * <nl> * Realm observables are effectively hot observables as Realms auto - update . <nl> * <nl> - * @ param realm RealmResults to listen to changes for . <nl> + * @ param realm { @ link Realm } to listen to changes for . <nl> * / <nl> - < E extends BaseRealm > Observable < E > from ( E realm ) ; <nl> + Observable < Realm > from ( Realm realm ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a { @ link DynamicRealm } . It should emit the initial state of the Realm when subscribed <nl> + * to and on each update to the Realm . <nl> + * <nl> + * Realm observables are effectively hot observables as Realms auto - update . <nl> + * <nl> + * @ param realm { @ link DynamicRealm } to listen to changes for . <nl> + * / <nl> + Observable < DynamicRealm > from ( DynamicRealm realm ) ; <nl> <nl> / * * <nl> * Creates an Observable for a { @ link RealmResults } . It should emit the initial results when subscribed to and on <nl> @ @ - 27 , 31 + 38 , 32 @ @ public interface RxObservableFactory { <nl> * <nl> * RealmResults observables are effectively hot observables as RealmObjects auto - update . <nl> * <nl> - * @ param results RealmResults to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> + * @ param results { @ link RealmResults } to listen to changes for . <nl> + * @ param < E > type of RealmObject <nl> * / <nl> < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> <nl> / * * <nl> - * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each <nl> + * Creates an Observable for a { @ link RealmList } . It should emit the initial list when subscribed to and on each <nl> * update to the list . <nl> * <nl> * RealmList observables are effectively hot observables as RealmLists auto - update . <nl> * <nl> + * Note : { @ link io . realm . RealmChangeListener } is currently not supported on RealmLists . <nl> + * <nl> * @ param list RealmObject to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> + * @ param < E > type of RealmObject <nl> * / <nl> < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> <nl> - <nl> / * * <nl> - * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update <nl> + * Creates an Observable for a { @ link RealmObject } . It should emit the initial object when subscribed to and on each update <nl> * to the object . <nl> * <nl> * RealmObject observables are effectively hot observables as RealmObjects auto - update . <nl> * <nl> * @ param object RealmObject to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> + * @ param < E > type of RealmObject <nl> * / <nl> < E extends RealmObject > Observable < E > from ( E object ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 5869db2 . . f11d3fa 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 44 , 13 + 44 , 14 @ @ import io . realm . internal . android . DebugAndroidLogger ; <nl> import io . realm . internal . android . ReleaseAndroidLogger ; <nl> import io . realm . internal . async . RealmThreadPoolExecutor ; <nl> import io . realm . internal . log . RealmLog ; <nl> + import rx . Observable ; <nl> <nl> / * * <nl> * Base class for all Realm instances . <nl> * <nl> * @ see io . realm . Realm <nl> * / <nl> - abstract class BaseRealm implements Closeable { <nl> + abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> protected static final long UNVERSIONED = - 1 ; <nl> private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; <nl> private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; <nl> @ @ - 179 , 6 + 180 , 19 @ @ abstract class BaseRealm implements Closeable { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Returns an Rx Observable that monitors changes to this realm . It will output the last state when <nl> + * subscribed to . <nl> + * <nl> + * @ return RxJava Observable <nl> + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> + * @ see < a href = " " > RxJava and Realm < / a > <nl> + * / <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public Observable < E > observable ( ) { <nl> + return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; <nl> + } <nl> + <nl> void setHandler ( Handler handler ) { <nl> / / remove the old one <nl> handlers . remove ( this . handler ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 94faa6c . . 0026c7c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 110 , 7 + 110 , 7 @ @ import io . realm . internal . log . RealmLog ; <nl> * @ see < a href = " http : / / en . wikipedia . org / wiki / ACID " > ACID < / a > <nl> * @ see < a href = " https : / / github . com / realm / realm - java / tree / master / examples " > Examples using Realm < / a > <nl> * / <nl> - public final class Realm extends BaseRealm { <nl> + public final class Realm extends BaseRealm < Realm > { <nl> <nl> public static final String DEFAULT _ REALM _ NAME = RealmConfiguration . DEFAULT _ REALM _ NAME ; <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 02b20df . . 47221ff 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 77 , 6 + 77 , 7 @ @ public class RealmConfiguration { <nl> private final boolean deleteRealmIfMigrationNeeded ; <nl> private final SharedGroup . Durability durability ; <nl> private final RealmProxyMediator schemaMediator ; <nl> + private final RxJavaFactory rxObservableFactory ; <nl> <nl> private RealmConfiguration ( Builder builder ) { <nl> this . realmFolder = builder . folder ; <nl> @ @ - 88 , 6 + 89 , 7 @ @ public class RealmConfiguration { <nl> this . migration = builder . migration ; <nl> this . durability = builder . durability ; <nl> this . schemaMediator = createSchemaMediator ( builder ) ; <nl> + this . rxObservableFactory = new RxJavaFactory ( ) ; <nl> } <nl> <nl> public File getRealmFolder ( ) { <nl> @ @ - 126 , 6 + 128 , 10 @ @ public class RealmConfiguration { <nl> return canonicalPath ; <nl> } <nl> <nl> + RxObservableFactory getRxFactory ( ) { <nl> + return rxObservableFactory ; <nl> + } <nl> + <nl> @ Override <nl> public boolean equals ( Object obj ) { <nl> if ( this = = obj ) return true ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 2de77d6 . . 65b88ff 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import io . realm . internal . Row ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableQuery ; <nl> import io . realm . internal . log . RealmLog ; <nl> - import io . realm . rx . RxObservableFactory ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 272 , 15 + 271 , 16 @ @ public abstract class RealmObject < E extends RealmObject > { <nl> } <nl> <nl> / * * <nl> - * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when <nl> + * Returns an Rx Observable that monitors changes to this RealmObject . It will output the object when <nl> * subscribed to . <nl> * <nl> * @ return RxJava Observable <nl> - * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . <nl> + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> + * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> + @ SuppressWarnings ( " unchecked " ) <nl> public Observable < E > observable ( ) { <nl> - / / noinspection unchecked <nl> - return RxObservableFactory . from ( ( E ) this ) ; <nl> + return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 8726922 . . 8cd91f7 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 34 , 7 + 34 , 6 @ @ import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableQuery ; <nl> import io . realm . internal . TableView ; <nl> import io . realm . internal . log . RealmLog ; <nl> - import io . realm . rx . RxObservableFactory ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 811 , 15 + 810 , 15 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> <nl> / * * <nl> - * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when <nl> + * Returns an Rx Observable that monitors changes to this RealmResults . It will output the last results when <nl> * subscribed to . <nl> * <nl> * @ return RxJava Observable <nl> - * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . <nl> + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> + * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> public Observable < RealmResults < E > > observable ( ) { <nl> - / / noinspection unchecked <nl> - return RxObservableFactory . from ( this ) ; <nl> + return realm . configuration . getRxFactory ( ) . from ( this ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 06402e2 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java <nl> @ @ - 0 , 0 + 1 , 134 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm ; <nl> + <nl> + import rx . Observable ; <nl> + import rx . Subscriber ; <nl> + import rx . functions . Action0 ; <nl> + import rx . subscriptions . Subscriptions ; <nl> + <nl> + / * * <nl> + * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . <nl> + * TODO Test compatibility with RxJava2 / RxMobile <nl> + * / <nl> + public class RxJavaFactory implements RxObservableFactory { <nl> + <nl> + private boolean rxJavaAvailble ; <nl> + <nl> + public RxJavaFactory ( ) { <nl> + try { <nl> + Class . forName ( " rx . Observable " ) ; <nl> + rxJavaAvailble = true ; <nl> + } catch ( ClassNotFoundException ignore ) { <nl> + rxJavaAvailble = false ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends BaseRealm > Observable < E > from ( final E realm ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super E > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> + } ; <nl> + realm . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + realm . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( results ) ; <nl> + } <nl> + } ; <nl> + results . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + results . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( results ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < E > from ( final E object ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super E > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( object ) ; <nl> + } <nl> + } ; <nl> + object . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + object . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( object ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private void checkRxJavaAvailable ( ) { <nl> + if ( rxJavaAvailble ) { <nl> + throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + <nl> + " Remember to add it as a compile dependency . See XXX for more details . " ) ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 0977392 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java <nl> @ @ - 0 , 0 + 1 , 53 @ @ <nl> + package io . realm ; <nl> + <nl> + import rx . Observable ; <nl> + <nl> + / * * <nl> + * Factory interface for creating Rx Observables from Realm classes . <nl> + * / <nl> + public interface RxObservableFactory { <nl> + <nl> + / * * <nl> + * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each <nl> + * update to the Realm . <nl> + * <nl> + * Realm observables are effectively hot observables as Realms auto - update . <nl> + * <nl> + * @ param realm RealmResults to listen to changes for . <nl> + * / <nl> + < E extends BaseRealm > Observable < E > from ( E realm ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmResults . It should emit the initial results when subscribed to and on each <nl> + * update to the results . <nl> + * <nl> + * RealmResults observables are effectively hot observables as RealmObjects auto - update . <nl> + * <nl> + * @ param results RealmResults to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each <nl> + * update to the list . <nl> + * <nl> + * RealmList observables are effectively hot observables as RealmLists auto - update . <nl> + * <nl> + * @ param list RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> + <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update <nl> + * to the object . <nl> + * <nl> + * RealmObject observables are effectively hot observables as RealmObjects auto - update . <nl> + * <nl> + * @ param object RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < E > from ( E object ) ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> deleted file mode 100644 <nl> index b5e7da5 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 114 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . rx ; <nl> - <nl> - import io . realm . RealmChangeListener ; <nl> - import io . realm . RealmList ; <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import rx . Observable ; <nl> - import rx . Subscriber ; <nl> - import rx . functions . Action0 ; <nl> - import rx . subjects . BehaviorSubject ; <nl> - import rx . subscriptions . Subscriptions ; <nl> - <nl> - / / TODO Would it be better ( = more efficient ) to try to reuse RealmChangeListeners across observables ? <nl> - / / TODO Extract factory interface <nl> - / / TODO Convert this class to non - static . Add Configuration option for injecting factory instances , RealmConfiguration is kinda meh . <nl> - public class RxObservableFactory { <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmObject . It will emit the initial object when subscribed to and on each update <nl> - * to the object . <nl> - * <nl> - * RealmObject observables are effectively hot observables as RealmObjects auto - update . <nl> - * <nl> - * @ param object RealmObject to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - public static < E extends RealmObject > Observable < E > from ( final E object ) { <nl> - return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super E > subscriber ) { <nl> - final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - subscriber . onNext ( object ) ; <nl> - } <nl> - } ; <nl> - object . addChangeListener ( listener ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - object . removeChangeListener ( listener ) ; <nl> - } <nl> - } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . This mimics a BehaviorSubject . <nl> - subscriber . onNext ( object ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmResults . It will emit the initial results when subscribed to and on each <nl> - * update to the results . <nl> - * <nl> - * RealmResults observables are effectively hot observables as RealmObjects auto - update . <nl> - * <nl> - * @ param results RealmResults to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - public static < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> - return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> - final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - subscriber . onNext ( results ) ; <nl> - } <nl> - } ; <nl> - results . addChangeListener ( listener ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - results . removeChangeListener ( listener ) ; <nl> - } <nl> - } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . This mimics a BehaviorSubject . <nl> - subscriber . onNext ( results ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmResults . It will emit the initial list when subscribed to and on each <nl> - * update to the list . <nl> - * <nl> - * @ param list RealmObject to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - public static < E extends RealmObject > Observable < RealmList < E > > from ( final RealmList < E > list ) { <nl> - final BehaviorSubject < RealmList < E > > subject = BehaviorSubject . create ( list ) ; <nl> - / / TODO Need to add ChangeListener to RealmList . Require fine - grained notifications . <nl> - throw new RuntimeException ( " Not supported yet " ) ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index f9f2f5f . . 81f83d2 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 0 . 87 . 0 
 * Added Realm . copyFromRealm ( ) for creating detached copies of Realm objects . 
 + * Added Realm . asObservable ( ) , RealmResults . asObservable ( ) , RealmObject . asObservable ( ) , DynamicRealm . asObservable ( ) and DynamicRealmObject . asObservable ( ) . 
 + * Added RealmConfiguration . Builder . rxFactory ( ) and RxObservableFactory for custom RxJava observable factory classes . 
 
 0 . 86 . 0 
 * BREAKING CHANGE : The Migration API has been replaced with a new API . 
 diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index a68d8ec . . 2d05a93 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 20 , 7 + 20 , 7 @ @ android { 
 } 
 
 dependencies { 
 - provided ' io . reactivex : rxjava : 1 . 0 . 16s ' 
 + provided ' io . reactivex : rxjava : 1 . 0 . 16 ' 
 compile project ( ' : realm - annotations ' ) 
 
 androidTestApt project ( ' : realm - annotations - processor ' ) 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 index fdff7b9 . . c6a8f2f 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 @ @ - 7 , 7 + 7 , 6 @ @ import java . util . concurrent . atomic . AtomicInteger ; 
 
 import io . realm . entities . AllTypes ; 
 import rx . functions . Action1 ; 
 - import rx . functions . Func1 ; 
 
 public class RxJavaTests extends AndroidTestCase { 
 
 @ @ - 32 , 7 + 31 , 7 @ @ public class RxJavaTests extends AndroidTestCase { 
 realm . commitTransaction ( ) ; 
 
 final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + obj . asObservable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 @ Override 
 public void call ( AllTypes rxObject ) { 
 assertTrue ( rxObject = = obj ) ; 
 @ @ - 42 , 23 + 41 , 66 @ @ public class RxJavaTests extends AndroidTestCase { 
 assertTrue ( subscribedNotified . get ( ) ) ; 
 } 
 
 - public void testAsyncRealmResultsEmittedOnSubscribe ( ) { 
 + public void testObjectEmittedOnUpdate ( ) { 
 + final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; 
 + realm . beginTransaction ( ) ; 
 + final AllTypes obj = realm . createObject ( AllTypes . class ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + obj . asObservable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + @ Override 
 + public void call ( AllTypes rxObject ) { 
 + subscriberCalled . addAndGet ( 1 ) ; 
 + } 
 + } ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + obj . setColumnLong ( 1 ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + assertEquals ( 2 , subscriberCalled . get ( ) ) ; 
 + } 
 + 
 + public void testAsyncObjectEmittedOnSubscribe ( ) { 
 + realm . beginTransaction ( ) ; 
 + realm . createObject ( AllTypes . class ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 - final RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllAsync ( ) ; 
 - results . observable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { 
 + final AllTypes asyncObj = realm . where ( AllTypes . class ) . findFirst ( ) ; 
 + asyncObj . asObservable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 @ Override 
 - public void call ( RealmResults < AllTypes > rxResults ) { 
 - assertTrue ( rxResults = = results ) ; 
 + public void call ( AllTypes rxObject ) { 
 + assertTrue ( rxObject = = asyncObj ) ; 
 subscribedNotified . set ( true ) ; 
 } 
 } ) ; 
 assertTrue ( subscribedNotified . get ( ) ) ; 
 } 
 
 + public void testAsyncObjectEmittedOnUpdate ( ) { 
 + final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; 
 + realm . beginTransaction ( ) ; 
 + AllTypes obj = realm . createObject ( AllTypes . class ) ; 
 + realm . commitTransaction ( ) ; 
 + realm . where ( AllTypes . class ) . findFirst ( ) . asObservable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + @ Override 
 + public void call ( AllTypes rxObject ) { 
 + subscriberCalled . addAndGet ( 1 ) ; 
 + } 
 + } ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + obj . setColumnLong ( 1 ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + assertEquals ( 2 , subscriberCalled . get ( ) ) ; 
 + } 
 + 
 public void testRealmResultsEmittedOnSubscribe ( ) { 
 final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 final RealmResults < AllTypes > results = realm . allObjects ( AllTypes . class ) ; 
 - results . observable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { 
 + results . asObservable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { 
 @ Override 
 public void call ( RealmResults < AllTypes > rxResults ) { 
 assertTrue ( rxResults = = results ) ; 
 @ @ - 68 , 37 + 110 , 72 @ @ public class RxJavaTests extends AndroidTestCase { 
 assertTrue ( subscribedNotified . get ( ) ) ; 
 } 
 
 - public void testObjectEmittedOnUpdate ( ) { 
 + public void testResultsEmittedOnUpdate ( ) { 
 final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; 
 - 
 realm . beginTransaction ( ) ; 
 - final AllTypes obj = realm . createObject ( AllTypes . class ) ; 
 + RealmResults < AllTypes > results = realm . allObjects ( AllTypes . class ) ; 
 realm . commitTransaction ( ) ; 
 
 - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + results . asObservable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { 
 @ Override 
 - public void call ( AllTypes rxObject ) { 
 + public void call ( RealmResults < AllTypes > allTypes ) { 
 subscriberCalled . addAndGet ( 1 ) ; 
 } 
 } ) ; 
 
 realm . beginTransaction ( ) ; 
 - obj . setColumnLong ( 1 ) ; 
 + realm . createObject ( AllTypes . class ) ; 
 realm . commitTransaction ( ) ; 
 
 assertEquals ( 2 , subscriberCalled . get ( ) ) ; 
 } 
 
 - public void testResultsEmittedOnUpdate ( ) { 
 + public void testAsyncRealmResultsEmittedOnSubscribe ( ) { 
 + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 + final RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllAsync ( ) ; 
 + results . asObservable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { 
 + @ Override 
 + public void call ( RealmResults < AllTypes > rxResults ) { 
 + assertTrue ( rxResults = = results ) ; 
 + subscribedNotified . set ( true ) ; 
 + } 
 + } ) ; 
 + assertTrue ( subscribedNotified . get ( ) ) ; 
 + } 
 + 
 + public void testAsyncResultsEmittedOnUpdate ( ) { 
 final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; 
 + realm . allObjects ( AllTypes . class ) . asObservable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { 
 + @ Override 
 + public void call ( RealmResults < AllTypes > rxResults ) { 
 + subscriberCalled . addAndGet ( 1 ) ; 
 + } 
 + } ) ; 
 
 realm . beginTransaction ( ) ; 
 - RealmResults < AllTypes > results = realm . allObjects ( AllTypes . class ) ; 
 + realm . createObject ( AllTypes . class ) ; 
 realm . commitTransaction ( ) ; 
 
 - results . observable ( ) . subscribe ( new Action1 < RealmResults < AllTypes > > ( ) { 
 + assertEquals ( 2 , subscriberCalled . get ( ) ) ; 
 + } 
 + 
 + public void testRealmEmittedOnSubscribe ( ) { 
 + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 + realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { 
 @ Override 
 - public void call ( RealmResults < AllTypes > allTypes ) { 
 + public void call ( Realm rxRealm ) { 
 + assertTrue ( rxRealm = = realm ) ; 
 + subscribedNotified . set ( true ) ; 
 + } 
 + } ) ; 
 + assertTrue ( subscribedNotified . get ( ) ) ; 
 + } 
 + 
 + public void testRealmEmittedOnUpdate ( ) { 
 + final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; 
 + realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { 
 + @ Override 
 + public void call ( Realm rxRealm ) { 
 subscriberCalled . addAndGet ( 1 ) ; 
 } 
 } ) ; 
 @ @ - 109 , 4 + 186 , 43 @ @ public class RxJavaTests extends AndroidTestCase { 
 
 assertEquals ( 2 , subscriberCalled . get ( ) ) ; 
 } 
 + 
 + public void testDynamicRealmEmittedOnSubscribe ( ) { 
 + final DynamicRealm dynamicRealm = DynamicRealm . createInstance ( realm . getConfiguration ( ) ) ; 
 + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 + dynamicRealm . asObservable ( ) . subscribe ( new Action1 < DynamicRealm > ( ) { 
 + @ Override 
 + public void call ( DynamicRealm rxRealm ) { 
 + assertTrue ( rxRealm = = dynamicRealm ) ; 
 + subscribedNotified . set ( true ) ; 
 + } 
 + } ) ; 
 + assertTrue ( subscribedNotified . get ( ) ) ; 
 + dynamicRealm . close ( ) ; 
 + } 
 + 
 + public void testDynamicRealmEmittedOnUpdate ( ) { 
 + final DynamicRealm dynamicRealm = DynamicRealm . createInstance ( realm . getConfiguration ( ) ) ; 
 + final AtomicInteger subscriberCalled = new AtomicInteger ( 0 ) ; 
 + dynamicRealm . asObservable ( ) . subscribe ( new Action1 < DynamicRealm > ( ) { 
 + @ Override 
 + public void call ( DynamicRealm rxRealm ) { 
 + subscriberCalled . addAndGet ( 1 ) ; 
 + } 
 + } ) ; 
 + 
 + dynamicRealm . beginTransaction ( ) ; 
 + dynamicRealm . createObject ( " AllTypes " ) ; 
 + dynamicRealm . commitTransaction ( ) ; 
 + 
 + assertEquals ( 2 , subscriberCalled . get ( ) ) ; 
 + dynamicRealm . close ( ) ; 
 + } 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 060772a . . fb32c48 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 169 , 7 + 169 , 7 @ @ public abstract class BaseRealm implements Closeable { 
 * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 - public abstract Observable observable ( ) ; 
 + public abstract Observable asObservable ( ) ; 
 
 / * * 
 * Removes all user - defined change listeners . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 index 4a37e1c . . 423d67b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 @ @ - 285 , 7 + 285 , 7 @ @ public final class DynamicRealm extends BaseRealm { 
 * { @ inheritDoc } 
 * / 
 @ Override 
 - public Observable < DynamicRealm > observable ( ) { 
 + public Observable < DynamicRealm > asObservable ( ) { 
 return configuration . getRxFactory ( ) . from ( this ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 212e3d9 . . 32235bd 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 130 , 7 + 130 , 7 @ @ public final class Realm extends BaseRealm { 
 * { @ inheritDoc } 
 * / 
 @ Override 
 - public Observable < Realm > observable ( ) { 
 + public Observable < Realm > asObservable ( ) { 
 return configuration . getRxFactory ( ) . from ( this ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 2e1f4de . . 990e8fc 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 271 , 7 + 271 , 7 @ @ public abstract class RealmObject < E extends RealmObject > { 
 * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 - public Observable < E > observable ( ) { 
 + public Observable < E > asObservable ( ) { 
 return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 8c8d25f . . ffe12a4 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 836 , 7 + 836 , 7 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 - public Observable < RealmResults < E > > observable ( ) { 
 + public Observable < RealmResults < E > > asObservable ( ) { 
 return realm . configuration . getRxFactory ( ) . from ( this ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java 
 new file mode 100644 
 index 0000000 . . 9f91233 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java 
 @ @ - 0 , 0 + 1 , 71 @ @ 
 + package io . realm . rx ; 
 + 
 + import io . realm . BaseRealm ; 
 + import io . realm . DynamicRealm ; 
 + import io . realm . Realm ; 
 + import io . realm . RealmList ; 
 + import io . realm . RealmObject ; 
 + import io . realm . RealmResults ; 
 + import rx . Observable ; 
 + 
 + / * * 
 + * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects before 
 + * emitting them . This is effectively a snapshot of the Realm data at a given point in time . 
 + * 
 + * This has the following implications : 
 + * 
 + * - Increased memory usage , as all fields including references are copied to the Java heap . 
 + * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm , but 
 + * the object will no longer automatically update either . 
 + * - All guarantees of staying consistent with other data from persisted Realm objects are gone . 
 + * - The object is no longer thread - confined and can be parsed between threads . 
 + * 
 + * @ see { @ link io . realm . Realm # copyFromRealm ( RealmObject ) } 
 + * / 
 + public class DetachedCopyObservableFactory implements RxObservableFactory { 
 + 
 + private final int maxDepth ; 
 + 
 + / * * 
 + * Creates an instance of this factory class . Detached objects also copy all referenced objects . 
 + * / 
 + public DetachedCopyObservableFactory ( ) { 
 + this ( Integer . MAX _ VALUE ) ; 
 + } 
 + 
 + / * * 
 + * Creates an instance of this factory class . Detached copies only contain references up to { @ code maxDepth } away . 
 + * 
 + * @ param maxDepth maximum distance from root object that objects are copied . References above this limit will be 
 + * { @ code null } . 
 + * @ see io . realm . Realm # copyFromRealm ( RealmObject , int ) 
 + * / 
 + public DetachedCopyObservableFactory ( int maxDepth ) { 
 + this . maxDepth = maxDepth ; 
 + } 
 + 
 + @ Override 
 + public Observable < Realm > from ( Realm realm ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public Observable < DynamicRealm > from ( DynamicRealm realm ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject > Observable < E > from ( E object ) { 
 + return null ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 index 940f217 . . 9919f3c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 @ @ - 32 , 11 + 32 , 11 @ @ import rx . subscriptions . Subscriptions ; 
 / * * 
 * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . 
 * 
 - * @ see Realm # observable ( ) 
 - * @ see RealmObject # observable ( ) 
 - * @ see RealmResults # observable ( ) 
 - * @ see DynamicRealm # observable ( ) 
 - * @ see DynamicRealmObject # observable ( ) 
 + * @ see Realm # asObservable ( ) 
 + * @ see RealmObject # asObservable ( ) 
 + * @ see RealmResults # asObservable ( ) 
 + * @ see DynamicRealm # asObservable ( ) 
 + * @ see DynamicRealmObject # asObservable ( ) 
 * / 
 public final class RealmObservableFactory implements RxObservableFactory { 
 
 @ @ - 52 , 11 + 52 , 38 @ @ public final class RealmObservableFactory implements RxObservableFactory { 
 } 
 
 @ Override 
 - public < E extends BaseRealm > Observable < E > from ( final E realm ) { 
 + public Observable < Realm > from ( final Realm realm ) { 
 checkRxJavaAvailable ( ) ; 
 - return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 + return Observable . create ( new Observable . OnSubscribe < Realm > ( ) { 
 @ Override 
 - public void call ( final Subscriber < ? super E > subscriber ) { 
 + public void call ( final Subscriber < ? super Realm > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( realm ) ; 
 + } 
 + } ; 
 + realm . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + realm . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( realm ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public Observable < DynamicRealm > from ( final DynamicRealm realm ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < DynamicRealm > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super DynamicRealm > subscriber ) { 
 final RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 index 14fd548 . . 8b7386d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package io . realm . rx ; 
 
 - import io . realm . BaseRealm ; 
 + import io . realm . DynamicRealm ; 
 + import io . realm . Realm ; 
 import io . realm . RealmList ; 
 import io . realm . RealmObject ; 
 import io . realm . RealmResults ; 
 @ @ - 12 , 14 + 13 , 24 @ @ import rx . Observable ; 
 public interface RxObservableFactory { 
 
 / * * 
 - * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each 
 - * update to the Realm . 
 + * Creates an Observable for a { @ link Realm } . It should emit the initial state of the Realm when subscribed to and 
 + * on each update to the Realm . 
 * 
 * Realm observables are effectively hot observables as Realms auto - update . 
 * 
 - * @ param realm RealmResults to listen to changes for . 
 + * @ param realm { @ link Realm } to listen to changes for . 
 * / 
 - < E extends BaseRealm > Observable < E > from ( E realm ) ; 
 + Observable < Realm > from ( Realm realm ) ; 
 + 
 + / * * 
 + * Creates an Observable for a { @ link DynamicRealm } . It should emit the initial state of the Realm when subscribed 
 + * to and on each update to the Realm . 
 + * 
 + * Realm observables are effectively hot observables as Realms auto - update . 
 + * 
 + * @ param realm { @ link DynamicRealm } to listen to changes for . 
 + * / 
 + Observable < DynamicRealm > from ( DynamicRealm realm ) ; 
 
 / * * 
 * Creates an Observable for a { @ link RealmResults } . It should emit the initial results when subscribed to and on 
 @ @ - 27 , 31 + 38 , 32 @ @ public interface RxObservableFactory { 
 * 
 * RealmResults observables are effectively hot observables as RealmObjects auto - update . 
 * 
 - * @ param results RealmResults to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 + * @ param results { @ link RealmResults } to listen to changes for . 
 + * @ param < E > type of RealmObject 
 * / 
 < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 
 / * * 
 - * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each 
 + * Creates an Observable for a { @ link RealmList } . It should emit the initial list when subscribed to and on each 
 * update to the list . 
 * 
 * RealmList observables are effectively hot observables as RealmLists auto - update . 
 * 
 + * Note : { @ link io . realm . RealmChangeListener } is currently not supported on RealmLists . 
 + * 
 * @ param list RealmObject to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 + * @ param < E > type of RealmObject 
 * / 
 < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 
 - 
 / * * 
 - * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update 
 + * Creates an Observable for a { @ link RealmObject } . It should emit the initial object when subscribed to and on each update 
 * to the object . 
 * 
 * RealmObject observables are effectively hot observables as RealmObjects auto - update . 
 * 
 * @ param object RealmObject to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 + * @ param < E > type of RealmObject 
 * / 
 < E extends RealmObject > Observable < E > from ( E object ) ; 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 5869db2 . . f11d3fa 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 44 , 13 + 44 , 14 @ @ import io . realm . internal . android . DebugAndroidLogger ; 
 import io . realm . internal . android . ReleaseAndroidLogger ; 
 import io . realm . internal . async . RealmThreadPoolExecutor ; 
 import io . realm . internal . log . RealmLog ; 
 + import rx . Observable ; 
 
 / * * 
 * Base class for all Realm instances . 
 * 
 * @ see io . realm . Realm 
 * / 
 - abstract class BaseRealm implements Closeable { 
 + abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 protected static final long UNVERSIONED = - 1 ; 
 private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; 
 private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; 
 @ @ - 179 , 6 + 180 , 19 @ @ abstract class BaseRealm implements Closeable { 
 } 
 } 
 
 + / * * 
 + * Returns an Rx Observable that monitors changes to this realm . It will output the last state when 
 + * subscribed to . 
 + * 
 + * @ return RxJava Observable 
 + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 + * @ see < a href = " " > RxJava and Realm < / a > 
 + * / 
 + @ SuppressWarnings ( " unchecked " ) 
 + public Observable < E > observable ( ) { 
 + return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; 
 + } 
 + 
 void setHandler ( Handler handler ) { 
 / / remove the old one 
 handlers . remove ( this . handler ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 94faa6c . . 0026c7c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 110 , 7 + 110 , 7 @ @ import io . realm . internal . log . RealmLog ; 
 * @ see < a href = " http : / / en . wikipedia . org / wiki / ACID " > ACID < / a > 
 * @ see < a href = " https : / / github . com / realm / realm - java / tree / master / examples " > Examples using Realm < / a > 
 * / 
 - public final class Realm extends BaseRealm { 
 + public final class Realm extends BaseRealm < Realm > { 
 
 public static final String DEFAULT _ REALM _ NAME = RealmConfiguration . DEFAULT _ REALM _ NAME ; 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 02b20df . . 47221ff 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 77 , 6 + 77 , 7 @ @ public class RealmConfiguration { 
 private final boolean deleteRealmIfMigrationNeeded ; 
 private final SharedGroup . Durability durability ; 
 private final RealmProxyMediator schemaMediator ; 
 + private final RxJavaFactory rxObservableFactory ; 
 
 private RealmConfiguration ( Builder builder ) { 
 this . realmFolder = builder . folder ; 
 @ @ - 88 , 6 + 89 , 7 @ @ public class RealmConfiguration { 
 this . migration = builder . migration ; 
 this . durability = builder . durability ; 
 this . schemaMediator = createSchemaMediator ( builder ) ; 
 + this . rxObservableFactory = new RxJavaFactory ( ) ; 
 } 
 
 public File getRealmFolder ( ) { 
 @ @ - 126 , 6 + 128 , 10 @ @ public class RealmConfiguration { 
 return canonicalPath ; 
 } 
 
 + RxObservableFactory getRxFactory ( ) { 
 + return rxObservableFactory ; 
 + } 
 + 
 @ Override 
 public boolean equals ( Object obj ) { 
 if ( this = = obj ) return true ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 2de77d6 . . 65b88ff 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import io . realm . internal . Row ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableQuery ; 
 import io . realm . internal . log . RealmLog ; 
 - import io . realm . rx . RxObservableFactory ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 272 , 15 + 271 , 16 @ @ public abstract class RealmObject < E extends RealmObject > { 
 } 
 
 / * * 
 - * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when 
 + * Returns an Rx Observable that monitors changes to this RealmObject . It will output the object when 
 * subscribed to . 
 * 
 * @ return RxJava Observable 
 - * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . 
 + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 + * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 + @ SuppressWarnings ( " unchecked " ) 
 public Observable < E > observable ( ) { 
 - / / noinspection unchecked 
 - return RxObservableFactory . from ( ( E ) this ) ; 
 + return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 8726922 . . 8cd91f7 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 34 , 7 + 34 , 6 @ @ import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableQuery ; 
 import io . realm . internal . TableView ; 
 import io . realm . internal . log . RealmLog ; 
 - import io . realm . rx . RxObservableFactory ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 811 , 15 + 810 , 15 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 } 
 
 / * * 
 - * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when 
 + * Returns an Rx Observable that monitors changes to this RealmResults . It will output the last results when 
 * subscribed to . 
 * 
 * @ return RxJava Observable 
 - * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . 
 + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 + * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 public Observable < RealmResults < E > > observable ( ) { 
 - / / noinspection unchecked 
 - return RxObservableFactory . from ( this ) ; 
 + return realm . configuration . getRxFactory ( ) . from ( this ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java 
 new file mode 100644 
 index 0000000 . . 06402e2 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java 
 @ @ - 0 , 0 + 1 , 134 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm ; 
 + 
 + import rx . Observable ; 
 + import rx . Subscriber ; 
 + import rx . functions . Action0 ; 
 + import rx . subscriptions . Subscriptions ; 
 + 
 + / * * 
 + * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . 
 + * TODO Test compatibility with RxJava2 / RxMobile 
 + * / 
 + public class RxJavaFactory implements RxObservableFactory { 
 + 
 + private boolean rxJavaAvailble ; 
 + 
 + public RxJavaFactory ( ) { 
 + try { 
 + Class . forName ( " rx . Observable " ) ; 
 + rxJavaAvailble = true ; 
 + } catch ( ClassNotFoundException ignore ) { 
 + rxJavaAvailble = false ; 
 + } 
 + } 
 + 
 + @ Override 
 + public < E extends BaseRealm > Observable < E > from ( final E realm ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super E > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( realm ) ; 
 + } 
 + } ; 
 + realm . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + realm . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( realm ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( results ) ; 
 + } 
 + } ; 
 + results . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + results . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( results ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 + checkRxJavaAvailable ( ) ; 
 + throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < E > from ( final E object ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super E > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( object ) ; 
 + } 
 + } ; 
 + object . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + object . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( object ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private void checkRxJavaAvailable ( ) { 
 + if ( rxJavaAvailble ) { 
 + throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + 
 + " Remember to add it as a compile dependency . See XXX for more details . " ) ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java 
 new file mode 100644 
 index 0000000 . . 0977392 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + package io . realm ; 
 + 
 + import rx . Observable ; 
 + 
 + / * * 
 + * Factory interface for creating Rx Observables from Realm classes . 
 + * / 
 + public interface RxObservableFactory { 
 + 
 + / * * 
 + * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each 
 + * update to the Realm . 
 + * 
 + * Realm observables are effectively hot observables as Realms auto - update . 
 + * 
 + * @ param realm RealmResults to listen to changes for . 
 + * / 
 + < E extends BaseRealm > Observable < E > from ( E realm ) ; 
 + 
 + / * * 
 + * Creates an Observable for a RealmResults . It should emit the initial results when subscribed to and on each 
 + * update to the results . 
 + * 
 + * RealmResults observables are effectively hot observables as RealmObjects auto - update . 
 + * 
 + * @ param results RealmResults to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 + 
 + / * * 
 + * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each 
 + * update to the list . 
 + * 
 + * RealmList observables are effectively hot observables as RealmLists auto - update . 
 + * 
 + * @ param list RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 + 
 + 
 + / * * 
 + * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update 
 + * to the object . 
 + * 
 + * RealmObject observables are effectively hot observables as RealmObjects auto - update . 
 + * 
 + * @ param object RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < E > from ( E object ) ; 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 deleted file mode 100644 
 index b5e7da5 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 + + + / dev / null 
 @ @ - 1 , 114 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . rx ; 
 - 
 - import io . realm . RealmChangeListener ; 
 - import io . realm . RealmList ; 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import rx . Observable ; 
 - import rx . Subscriber ; 
 - import rx . functions . Action0 ; 
 - import rx . subjects . BehaviorSubject ; 
 - import rx . subscriptions . Subscriptions ; 
 - 
 - / / TODO Would it be better ( = more efficient ) to try to reuse RealmChangeListeners across observables ? 
 - / / TODO Extract factory interface 
 - / / TODO Convert this class to non - static . Add Configuration option for injecting factory instances , RealmConfiguration is kinda meh . 
 - public class RxObservableFactory { 
 - 
 - / * * 
 - * Creates an Observable for a RealmObject . It will emit the initial object when subscribed to and on each update 
 - * to the object . 
 - * 
 - * RealmObject observables are effectively hot observables as RealmObjects auto - update . 
 - * 
 - * @ param object RealmObject to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - public static < E extends RealmObject > Observable < E > from ( final E object ) { 
 - return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super E > subscriber ) { 
 - final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - subscriber . onNext ( object ) ; 
 - } 
 - } ; 
 - object . addChangeListener ( listener ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - object . removeChangeListener ( listener ) ; 
 - } 
 - } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . This mimics a BehaviorSubject . 
 - subscriber . onNext ( object ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - / * * 
 - * Creates an Observable for a RealmResults . It will emit the initial results when subscribed to and on each 
 - * update to the results . 
 - * 
 - * RealmResults observables are effectively hot observables as RealmObjects auto - update . 
 - * 
 - * @ param results RealmResults to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - public static < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 - return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 - final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - subscriber . onNext ( results ) ; 
 - } 
 - } ; 
 - results . addChangeListener ( listener ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - results . removeChangeListener ( listener ) ; 
 - } 
 - } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . This mimics a BehaviorSubject . 
 - subscriber . onNext ( results ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - / * * 
 - * Creates an Observable for a RealmResults . It will emit the initial list when subscribed to and on each 
 - * update to the list . 
 - * 
 - * @ param list RealmObject to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - public static < E extends RealmObject > Observable < RealmList < E > > from ( final RealmList < E > list ) { 
 - final BehaviorSubject < RealmList < E > > subject = BehaviorSubject . create ( list ) ; 
 - / / TODO Need to add ChangeListener to RealmList . Require fine - grained notifications . 
 - throw new RuntimeException ( " Not supported yet " ) ; 
 - } 
 - }
