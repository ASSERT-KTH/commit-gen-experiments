BLEU SCORE: 0.04923026124015933

TEST MSG: Use a local copy of ReLinker
GENERATED MSG: Improving . so loading by using the ReLinker library

TEST DIFF (one line): diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> index f5f9419 . . 0536847 100644 <nl> - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> @ @ - 49 , 7 + 49 , 6 @ @ class Realm implements Plugin < Project > { <nl> <nl> project . android . registerTransform ( new RealmTransformer ( ) ) <nl> project . repositories . add ( project . getRepositories ( ) . jcenter ( ) ) <nl> - project . repositories . add ( project . repositories . maven { url " https : / / jitpack . io " } ) <nl> project . dependencies . add ( " compile " , " io . realm : realm - android - library : $ { Version . VERSION } " ) <nl> project . dependencies . add ( " compile " , " io . realm : realm - annotations : $ { Version . VERSION } " ) <nl> if ( isKotlinProject ) { <nl> diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index e99a451 . . d9a1ff1 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 43 , 7 + 43 , 6 @ @ repositories { <nl> dependencies { <nl> provided ' io . reactivex : rxjava : 1 . 1 . 0 ' <nl> compile " io . realm : realm - annotations : $ { version } " <nl> - compile ' com . github . KeepSafe : ReLinker : 1 . 1 ' <nl> <nl> androidTestCompile ' io . reactivex : rxjava : 1 . 1 . 0 ' <nl> androidTestCompile ' com . android . support : support - annotations : 23 . 1 . 1 ' <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java <nl> index 78deddf . . 670184b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ package io . realm . internal ; <nl> <nl> import android . content . Context ; <nl> <nl> - import com . getkeepsafe . relinker . ReLinker ; <nl> + import io . realm . internal . android . ReLinker ; <nl> <nl> import java . io . File ; <nl> import java . lang . reflect . Field ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / android / ReLinker . java b / realm / realm - library / src / main / java / io / realm / internal / android / ReLinker . java <nl> new file mode 100644 <nl> index 0000000 . . 715dc80 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / android / ReLinker . java <nl> @ @ - 0 , 0 + 1 , 229 @ @ <nl> + / * * <nl> + * Copyright 2015 KeepSafe Software , Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package io . realm . internal . android ; <nl> + <nl> + import android . content . Context ; <nl> + import android . content . pm . ApplicationInfo ; <nl> + import android . os . Build ; <nl> + import android . text . TextUtils ; <nl> + <nl> + import java . io . Closeable ; <nl> + import java . io . File ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . io . OutputStream ; <nl> + import java . util . zip . ZipEntry ; <nl> + import java . util . zip . ZipFile ; <nl> + <nl> + / * * <nl> + * ReLinker is a small library to help alleviate { @ link UnsatisfiedLinkError } exceptions thrown due <nl> + * to Android ' s inability to properly install / load native libraries for Android versions before <nl> + * API 21 <nl> + * / <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + public class ReLinker { <nl> + private static final String LIB _ DIR = " lib " ; <nl> + private static final int MAX _ TRIES = 5 ; <nl> + private static final int COPY _ BUFFER _ SIZE = 4096 ; <nl> + <nl> + private ReLinker ( ) { <nl> + / / No instances <nl> + } <nl> + <nl> + / * * <nl> + * Utilizes the regular system call to attempt to load a native library . If a failure occurs , <nl> + * then the function extracts native . so library out of the app ' s APK and attempts to load it . <nl> + * < p > <nl> + * < strong > Note : This is a synchronous operation < / strong > <nl> + * / <nl> + public static void loadLibrary ( final Context context , final String library ) { <nl> + if ( context = = null ) { <nl> + throw new IllegalArgumentException ( " Given context is null " ) ; <nl> + } <nl> + <nl> + if ( TextUtils . isEmpty ( library ) ) { <nl> + throw new IllegalArgumentException ( " Given library is either null or empty " ) ; <nl> + } <nl> + <nl> + try { <nl> + System . loadLibrary ( library ) ; <nl> + return ; <nl> + } catch ( final UnsatisfiedLinkError ignored ) { <nl> + / / : - ( <nl> + } <nl> + <nl> + final File workaroundFile = getWorkaroundLibFile ( context , library ) ; <nl> + if ( ! workaroundFile . exists ( ) ) { <nl> + unpackLibrary ( context , library ) ; <nl> + } <nl> + <nl> + System . load ( workaroundFile . getAbsolutePath ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param context { @ link Context } to describe the location of it ' s private directories <nl> + * @ return A { @ link File } locating the directory that can store extracted libraries <nl> + * for later use <nl> + * / <nl> + private static File getWorkaroundLibDir ( final Context context ) { <nl> + return context . getDir ( LIB _ DIR , Context . MODE _ PRIVATE ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param context { @ link Context } to retrieve the workaround directory from <nl> + * @ param library The name of the library to load <nl> + * @ return A { @ link File } locating the workaround library file to load <nl> + * / <nl> + private static File getWorkaroundLibFile ( final Context context , final String library ) { <nl> + final String libName = System . mapLibraryName ( library ) ; <nl> + return new File ( getWorkaroundLibDir ( context ) , libName ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Attempts to unpack the given library to the workaround directory . Implements retry logic for <nl> + * IO operations to ensure they succeed . <nl> + * <nl> + * @ param context { @ link Context } to describe the location of the installed APK file <nl> + * @ param library The name of the library to load <nl> + * / <nl> + @ SuppressWarnings ( " ResultOfMethodCallIgnored " ) <nl> + private static void unpackLibrary ( final Context context , final String library ) { <nl> + ZipFile zipFile = null ; <nl> + try { <nl> + final ApplicationInfo appInfo = context . getApplicationInfo ( ) ; <nl> + int tries = 0 ; <nl> + while ( tries + + < MAX _ TRIES ) { <nl> + try { <nl> + zipFile = new ZipFile ( new File ( appInfo . sourceDir ) , ZipFile . OPEN _ READ ) ; <nl> + break ; <nl> + } catch ( IOException ignored ) { } <nl> + } <nl> + <nl> + if ( zipFile = = null ) { <nl> + return ; <nl> + } <nl> + <nl> + tries = 0 ; <nl> + while ( tries + + < MAX _ TRIES ) { <nl> + String jniNameInApk = null ; <nl> + ZipEntry libraryEntry = null ; <nl> + <nl> + if ( Build . VERSION . SDK _ INT > = 21 & & Build . SUPPORTED _ ABIS . length > 0 ) { <nl> + for ( final String ABI : Build . SUPPORTED _ ABIS ) { <nl> + jniNameInApk = " lib / " + ABI + " / " + System . mapLibraryName ( library ) ; <nl> + libraryEntry = zipFile . getEntry ( jniNameInApk ) ; <nl> + <nl> + if ( libraryEntry ! = null ) { <nl> + break ; <nl> + } <nl> + } <nl> + } else { <nl> + / / noinspection deprecation <nl> + jniNameInApk = " lib / " + Build . CPU _ ABI + " / " + System . mapLibraryName ( library ) ; <nl> + libraryEntry = zipFile . getEntry ( jniNameInApk ) ; <nl> + } <nl> + <nl> + if ( libraryEntry = = null ) { <nl> + / / Does not exist in the APK <nl> + if ( jniNameInApk ! = null ) { <nl> + throw new MissingLibraryException ( jniNameInApk ) ; <nl> + } else { <nl> + throw new MissingLibraryException ( library ) ; <nl> + } <nl> + } <nl> + <nl> + final File outputFile = getWorkaroundLibFile ( context , library ) ; <nl> + outputFile . delete ( ) ; / / Remove any old file that might exist <nl> + <nl> + try { <nl> + if ( ! outputFile . createNewFile ( ) ) { <nl> + continue ; <nl> + } <nl> + } catch ( IOException ignored ) { <nl> + / / Try again <nl> + continue ; <nl> + } <nl> + <nl> + InputStream inputStream = null ; <nl> + FileOutputStream fileOut = null ; <nl> + try { <nl> + inputStream = zipFile . getInputStream ( libraryEntry ) ; <nl> + fileOut = new FileOutputStream ( outputFile ) ; <nl> + copy ( inputStream , fileOut ) ; <nl> + } catch ( FileNotFoundException e ) { <nl> + / / Try again <nl> + continue ; <nl> + } catch ( IOException e ) { <nl> + / / Try again <nl> + continue ; <nl> + } finally { <nl> + closeSilently ( inputStream ) ; <nl> + closeSilently ( fileOut ) ; <nl> + } <nl> + <nl> + / / Change permission to rwxr - xr - x <nl> + outputFile . setReadable ( true , false ) ; <nl> + outputFile . setExecutable ( true , false ) ; <nl> + outputFile . setWritable ( true ) ; <nl> + break ; <nl> + } <nl> + } finally { <nl> + try { <nl> + if ( zipFile ! = null ) { <nl> + zipFile . close ( ) ; <nl> + } <nl> + } catch ( IOException ignored ) { } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Copies all data from an { @ link InputStream } to an { @ link OutputStream } . <nl> + * <nl> + * @ param in The stream to read from . <nl> + * @ param out The stream to write to . <nl> + * @ throws IOException when a stream operation fails . <nl> + * / <nl> + private static void copy ( InputStream in , OutputStream out ) throws IOException { <nl> + byte [ ] buf = new byte [ COPY _ BUFFER _ SIZE ] ; <nl> + while ( true ) { <nl> + int read = in . read ( buf ) ; <nl> + if ( read = = - 1 ) { <nl> + break ; <nl> + } <nl> + out . write ( buf , 0 , read ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Closes a { @ link Closeable } silently ( without throwing or handling any exceptions ) <nl> + * @ param closeable { @ link Closeable } to close <nl> + * / <nl> + private static void closeSilently ( final Closeable closeable ) { <nl> + try { <nl> + if ( closeable ! = null ) { <nl> + closeable . close ( ) ; <nl> + } <nl> + } catch ( IOException ignored ) { } <nl> + } <nl> + <nl> + private static class MissingLibraryException extends RuntimeException { <nl> + public MissingLibraryException ( final String library ) { <nl> + super ( library ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIBinaryTypeTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIBinaryTypeTest . java <nl> index 50ac578 . . 9d68b63 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIBinaryTypeTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIBinaryTypeTest . java <nl> @ @ - 37 , 6 + 37 , 4 @ @ public class JNIBinaryTypeTest extends TestCase { <nl> / / table . close ( ) ; <nl> table = null ; <nl> } <nl> - <nl> - <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> index cacebc9 . . 2efa610 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import static io . realm . internal . ColumnType . * ; <nl> <nl> public class JNITableTest extends AndroidTestCase { <nl> <nl> - Table t = new Table ( ) ; <nl> + Table t ; <nl> <nl> Table createTestTable ( ) { <nl> Table t = new Table ( ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / PivotTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / PivotTest . java <nl> index 1ea8d3f . . fc4b53c 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / PivotTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / PivotTest . java <nl> @ @ - 22 , 61 + 22 , 62 @ @ import io . realm . internal . TableOrView . PivotType ; <nl> <nl> public class PivotTest extends TestCase { <nl> <nl> - Table t = new Table ( ) ; <nl> + Table t ; <nl> long colIndexSex ; <nl> long colIndexAge ; <nl> long colIndexHired ; <nl> - <nl> + <nl> @ Override <nl> - public void setUp ( ) { <nl> + public void setUp ( ) { <nl> + t = new Table ( ) ; <nl> colIndexSex = t . addColumn ( ColumnType . STRING , " sex " ) ; <nl> colIndexAge = t . addColumn ( ColumnType . INTEGER , " age " ) ; <nl> colIndexHired = t . addColumn ( ColumnType . BOOLEAN , " hired " ) ; <nl> - <nl> + <nl> for ( long i = 0 ; i < 50000 ; i + + ) { <nl> String sex = i % 2 = = 0 ? " Male " : " Female " ; <nl> t . add ( sex , 20 + ( i % 20 ) , true ) ; <nl> } <nl> } <nl> - <nl> + <nl> public void testPivotTable ( ) { <nl> - <nl> + <nl> Table resultCount = t . pivot ( colIndexSex , colIndexAge , PivotType . COUNT ) ; <nl> assertEquals ( 2 , resultCount . size ( ) ) ; <nl> assertEquals ( 25000 , resultCount . getLong ( 1 , 0 ) ) ; <nl> assertEquals ( 25000 , resultCount . getLong ( 1 , 1 ) ) ; <nl> - <nl> + <nl> Table resultMin = t . pivot ( colIndexSex , colIndexAge , PivotType . MIN ) ; <nl> assertEquals ( 20 , resultMin . getLong ( 1 , 0 ) ) ; <nl> assertEquals ( 21 , resultMin . getLong ( 1 , 1 ) ) ; <nl> - <nl> + <nl> Table resultMax = t . pivot ( colIndexSex , colIndexAge , PivotType . MAX ) ; <nl> assertEquals ( 38 , resultMax . getLong ( 1 , 0 ) ) ; <nl> assertEquals ( 39 , resultMax . getLong ( 1 , 1 ) ) ; <nl> - <nl> + <nl> try { t . pivot ( colIndexHired , colIndexAge , PivotType . SUM ) ; fail ( " Group by not a String column " ) ; } catch ( UnsupportedOperationException e ) { } <nl> try { t . pivot ( colIndexSex , colIndexHired , PivotType . SUM ) ; fail ( " Aggregation not an int column " ) ; } catch ( UnsupportedOperationException e ) { } <nl> } <nl> - <nl> - <nl> + <nl> + <nl> public void testPivotTableView ( ) { <nl> - <nl> + <nl> TableView view = t . getSortedView ( colIndexAge ) ; <nl> - <nl> + <nl> Table resultCount = view . pivot ( colIndexSex , colIndexAge , PivotType . COUNT ) ; <nl> assertEquals ( 2 , resultCount . size ( ) ) ; <nl> assertEquals ( 25000 , resultCount . getLong ( 1 , 0 ) ) ; <nl> assertEquals ( 25000 , resultCount . getLong ( 1 , 1 ) ) ; <nl> - <nl> + <nl> Table resultMin = view . pivot ( colIndexSex , colIndexAge , PivotType . MIN ) ; <nl> assertEquals ( 20 , resultMin . getLong ( 1 , 0 ) ) ; <nl> assertEquals ( 21 , resultMin . getLong ( 1 , 1 ) ) ; <nl> - <nl> + <nl> Table resultMax = view . pivot ( colIndexSex , colIndexAge , PivotType . MAX ) ; <nl> assertEquals ( 38 , resultMax . getLong ( 1 , 0 ) ) ; <nl> assertEquals ( 39 , resultMax . getLong ( 1 , 1 ) ) ; <nl> - <nl> - <nl> + <nl> + <nl> try { view . pivot ( colIndexHired , colIndexAge , PivotType . SUM ) ; fail ( " Group by not a String column " ) ; } catch ( UnsupportedOperationException e ) { } <nl> try { view . pivot ( colIndexSex , colIndexHired , PivotType . SUM ) ; fail ( " Aggregation not an int column " ) ; } catch ( UnsupportedOperationException e ) { } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / com / getkeepsafe / relinker / ReLinker . java b / realm / realm - library / src / main / java / com / getkeepsafe / relinker / ReLinker . java <nl> new file mode 100644 <nl> index 0000000 . . d99a77a <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / com / getkeepsafe / relinker / ReLinker . java <nl> @ @ - 0 , 0 + 1 , 219 @ @ <nl> + / * * <nl> + * Copyright 2015 KeepSafe Software , Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package com . getkeepsafe . relinker ; <nl> + <nl> + import android . content . Context ; <nl> + import android . content . pm . ApplicationInfo ; <nl> + import android . os . Build ; <nl> + import android . text . TextUtils ; <nl> + <nl> + import java . io . Closeable ; <nl> + import java . io . File ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . io . OutputStream ; <nl> + import java . util . zip . ZipEntry ; <nl> + import java . util . zip . ZipFile ; <nl> + <nl> + / * * <nl> + * ReLinker is a small library to help alleviate { @ link UnsatisfiedLinkError } exceptions thrown due <nl> + * to Android ' s inability to properly install / load native libraries for Android versions before <nl> + * API 21 <nl> + * / <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + public class ReLinker { <nl> + private static final String LIB _ DIR = " lib " ; <nl> + private static final int MAX _ TRIES = 5 ; <nl> + private static final int COPY _ BUFFER _ SIZE = 4096 ; <nl> + <nl> + private ReLinker ( ) { <nl> + / / No instances <nl> + } <nl> + <nl> + / * * <nl> + * Utilizes the regular system call to attempt to load a native library . If a failure occurs , <nl> + * then the function extracts native . so library out of the app ' s APK and attempts to load it . <nl> + * < p > <nl> + * < strong > Note : This is a synchronous operation < / strong > <nl> + * / <nl> + public static void loadLibrary ( final Context context , final String library ) { <nl> + if ( context = = null ) { <nl> + throw new IllegalArgumentException ( " Given context is null " ) ; <nl> + } <nl> + <nl> + if ( TextUtils . isEmpty ( library ) ) { <nl> + throw new IllegalArgumentException ( " Given library is either null or empty " ) ; <nl> + } <nl> + <nl> + try { <nl> + System . loadLibrary ( library ) ; <nl> + return ; <nl> + } catch ( final UnsatisfiedLinkError ignored ) { <nl> + / / : - ( <nl> + } <nl> + <nl> + final File workaroundFile = getWorkaroundLibFile ( context , library ) ; <nl> + if ( ! workaroundFile . exists ( ) ) { <nl> + unpackLibrary ( context , library ) ; <nl> + } <nl> + <nl> + System . load ( workaroundFile . getAbsolutePath ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param context { @ link Context } to describe the location of it ' s private directories <nl> + * @ return A { @ link File } locating the directory that can store extracted libraries <nl> + * for later use <nl> + * / <nl> + private static File getWorkaroundLibDir ( final Context context ) { <nl> + return context . getDir ( LIB _ DIR , Context . MODE _ PRIVATE ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param context { @ link Context } to retrieve the workaround directory from <nl> + * @ param library The name of the library to load <nl> + * @ return A { @ link File } locating the workaround library file to load <nl> + * / <nl> + private static File getWorkaroundLibFile ( final Context context , final String library ) { <nl> + final String libName = System . mapLibraryName ( library ) ; <nl> + return new File ( getWorkaroundLibDir ( context ) , libName ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Attempts to unpack the given library to the workaround directory . Implements retry logic for <nl> + * IO operations to ensure they succeed . <nl> + * <nl> + * @ param context { @ link Context } to describe the location of the installed APK file <nl> + * @ param library The name of the library to load <nl> + * / <nl> + @ SuppressWarnings ( " ResultOfMethodCallIgnored " ) <nl> + private static void unpackLibrary ( final Context context , final String library ) { <nl> + ZipFile zipFile = null ; <nl> + try { <nl> + final ApplicationInfo appInfo = context . getApplicationInfo ( ) ; <nl> + int tries = 0 ; <nl> + while ( tries + + < MAX _ TRIES ) { <nl> + try { <nl> + zipFile = new ZipFile ( new File ( appInfo . sourceDir ) , ZipFile . OPEN _ READ ) ; <nl> + break ; <nl> + } catch ( IOException ignored ) { } <nl> + } <nl> + <nl> + if ( zipFile = = null ) { <nl> + return ; <nl> + } <nl> + <nl> + tries = 0 ; <nl> + while ( tries + + < MAX _ TRIES ) { <nl> + String jniNameInApk ; <nl> + ZipEntry libraryEntry = null ; <nl> + <nl> + if ( Build . VERSION . SDK _ INT > = 21 ) { <nl> + for ( final String ABI : Build . SUPPORTED _ ABIS ) { <nl> + jniNameInApk = " lib / " + ABI + " / " + System . mapLibraryName ( library ) ; <nl> + libraryEntry = zipFile . getEntry ( jniNameInApk ) ; <nl> + <nl> + if ( libraryEntry ! = null ) { <nl> + break ; <nl> + } <nl> + } <nl> + } else { <nl> + / / noinspection deprecation <nl> + jniNameInApk = " lib / " + Build . CPU _ ABI + " / " + System . mapLibraryName ( library ) ; <nl> + libraryEntry = zipFile . getEntry ( jniNameInApk ) ; <nl> + } <nl> + <nl> + if ( libraryEntry = = null ) { <nl> + / / Does not exist in the APK <nl> + break ; <nl> + } <nl> + <nl> + final File outputFile = getWorkaroundLibFile ( context , library ) ; <nl> + outputFile . delete ( ) ; / / Remove any old file that might exist <nl> + <nl> + try { <nl> + if ( ! outputFile . createNewFile ( ) ) { <nl> + continue ; <nl> + } <nl> + } catch ( IOException ignored ) { <nl> + / / Try again <nl> + continue ; <nl> + } <nl> + <nl> + InputStream inputStream = null ; <nl> + FileOutputStream fileOut = null ; <nl> + try { <nl> + inputStream = zipFile . getInputStream ( libraryEntry ) ; <nl> + fileOut = new FileOutputStream ( outputFile ) ; <nl> + copy ( inputStream , fileOut ) ; <nl> + } catch ( FileNotFoundException e ) { <nl> + / / Try again <nl> + continue ; <nl> + } catch ( IOException e ) { <nl> + / / Try again <nl> + continue ; <nl> + } finally { <nl> + closeSilently ( inputStream ) ; <nl> + closeSilently ( fileOut ) ; <nl> + } <nl> + <nl> + / / Change permission to rwxr - xr - x <nl> + outputFile . setReadable ( true , false ) ; <nl> + outputFile . setExecutable ( true , false ) ; <nl> + outputFile . setWritable ( true ) ; <nl> + break ; <nl> + } <nl> + } finally { <nl> + try { <nl> + if ( zipFile ! = null ) { <nl> + zipFile . close ( ) ; <nl> + } <nl> + } catch ( IOException ignored ) { } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Copies all data from an { @ link InputStream } to an { @ link OutputStream } . <nl> + * <nl> + * @ param in The stream to read from . <nl> + * @ param out The stream to write to . <nl> + * @ throws IOException when a stream operation fails . <nl> + * / <nl> + private static void copy ( InputStream in , OutputStream out ) throws IOException { <nl> + byte [ ] buf = new byte [ COPY _ BUFFER _ SIZE ] ; <nl> + while ( true ) { <nl> + int read = in . read ( buf ) ; <nl> + if ( read = = - 1 ) { <nl> + break ; <nl> + } <nl> + out . write ( buf , 0 , read ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Closes a { @ link Closeable } silently ( without throwing or handling any exceptions ) <nl> + * @ param closeable { @ link Closeable } to close <nl> + * / <nl> + private static void closeSilently ( final Closeable closeable ) { <nl> + try { <nl> + if ( closeable ! = null ) { <nl> + closeable . close ( ) ; <nl> + } <nl> + } catch ( IOException ignored ) { } <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index d3a66b3 . . 93d798e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ package io . realm ; <nl> <nl> import android . content . Context ; <nl> <nl> + import com . getkeepsafe . relinker . ReLinker ; <nl> + <nl> import java . io . File ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> @ @ - 244 , 6 + 246 , 8 @ @ public class RealmConfiguration { <nl> throw new IllegalArgumentException ( " A non - null Context must be provided " ) ; <nl> } <nl> initializeBuilder ( context . getFilesDir ( ) ) ; <nl> + / / FIXME : Using ReLinker to load . so file adds a string Android dependency <nl> + ReLinker . loadLibrary ( context , " realm - jni " ) ; <nl> } <nl> <nl> / / Setup builder in its initial state <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Group . java b / realm / realm - library / src / main / java / io / realm / internal / Group . java <nl> index c740f01 . . 98be587 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Group . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Group . java <nl> @ @ - 35 , 10 + 35 , 6 @ @ public class Group implements Closeable { <nl> protected boolean immutable ; <nl> private final Context context ; <nl> <nl> - static { <nl> - RealmCore . loadLibrary ( ) ; <nl> - } <nl> - <nl> private void checkNativePtrNotZero ( ) { <nl> if ( this . nativePtr = = 0 ) <nl> / / FIXME : It is wrong to assume that a null pointer means ' out <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedGroup . java b / realm / realm - library / src / main / java / io / realm / internal / SharedGroup . java <nl> index 61c93ab . . 586899b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedGroup . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedGroup . java <nl> @ @ - 38 , 10 + 38 , 6 @ @ public class SharedGroup implements Closeable { <nl> private boolean activeTransaction ; <nl> private final Context context ; <nl> <nl> - static { <nl> - RealmCore . loadLibrary ( ) ; <nl> - } <nl> - <nl> public enum Durability { <nl> FULL ( 0 ) , <nl> MEM _ ONLY ( 1 ) ; <nl> @ @ - 249 , 7 + 245 , 7 @ @ public class SharedGroup implements Closeable { <nl> return new VersionID ( versionId [ 0 ] , versionId [ 1 ] ) ; <nl> <nl> } <nl> - <nl> + <nl> public static class VersionID implements Comparable < VersionID > { <nl> final long version ; <nl> final long index ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Util . java b / realm / realm - library / src / main / java / io / realm / internal / Util . java <nl> index 85cf216 . . 698d645 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Util . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Util . java <nl> @ @ - 20 , 10 + 20 , 6 @ @ import io . realm . RealmObject ; <nl> <nl> public class Util { <nl> <nl> - static { <nl> - RealmCore . loadLibrary ( ) ; <nl> - } <nl> - <nl> public static long getNativeMemUsage ( ) { <nl> return nativeGetMemUsage ( ) ; <nl> }

TEST DIFF:
diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 index f5f9419 . . 0536847 100644 
 - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 @ @ - 49 , 7 + 49 , 6 @ @ class Realm implements Plugin < Project > { 
 
 project . android . registerTransform ( new RealmTransformer ( ) ) 
 project . repositories . add ( project . getRepositories ( ) . jcenter ( ) ) 
 - project . repositories . add ( project . repositories . maven { url " https : / / jitpack . io " } ) 
 project . dependencies . add ( " compile " , " io . realm : realm - android - library : $ { Version . VERSION } " ) 
 project . dependencies . add ( " compile " , " io . realm : realm - annotations : $ { Version . VERSION } " ) 
 if ( isKotlinProject ) { 
 diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index e99a451 . . d9a1ff1 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 43 , 7 + 43 , 6 @ @ repositories { 
 dependencies { 
 provided ' io . reactivex : rxjava : 1 . 1 . 0 ' 
 compile " io . realm : realm - annotations : $ { version } " 
 - compile ' com . github . KeepSafe : ReLinker : 1 . 1 ' 
 
 androidTestCompile ' io . reactivex : rxjava : 1 . 1 . 0 ' 
 androidTestCompile ' com . android . support : support - annotations : 23 . 1 . 1 ' 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java 
 index 78deddf . . 670184b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java 
 @ @ - 18 , 7 + 18 , 7 @ @ package io . realm . internal ; 
 
 import android . content . Context ; 
 
 - import com . getkeepsafe . relinker . ReLinker ; 
 + import io . realm . internal . android . ReLinker ; 
 
 import java . io . File ; 
 import java . lang . reflect . Field ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / android / ReLinker . java b / realm / realm - library / src / main / java / io / realm / internal / android / ReLinker . java 
 new file mode 100644 
 index 0000000 . . 715dc80 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / android / ReLinker . java 
 @ @ - 0 , 0 + 1 , 229 @ @ 
 + / * * 
 + * Copyright 2015 KeepSafe Software , Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package io . realm . internal . android ; 
 + 
 + import android . content . Context ; 
 + import android . content . pm . ApplicationInfo ; 
 + import android . os . Build ; 
 + import android . text . TextUtils ; 
 + 
 + import java . io . Closeable ; 
 + import java . io . File ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . FileOutputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . io . OutputStream ; 
 + import java . util . zip . ZipEntry ; 
 + import java . util . zip . ZipFile ; 
 + 
 + / * * 
 + * ReLinker is a small library to help alleviate { @ link UnsatisfiedLinkError } exceptions thrown due 
 + * to Android ' s inability to properly install / load native libraries for Android versions before 
 + * API 21 
 + * / 
 + @ SuppressWarnings ( " deprecation " ) 
 + public class ReLinker { 
 + private static final String LIB _ DIR = " lib " ; 
 + private static final int MAX _ TRIES = 5 ; 
 + private static final int COPY _ BUFFER _ SIZE = 4096 ; 
 + 
 + private ReLinker ( ) { 
 + / / No instances 
 + } 
 + 
 + / * * 
 + * Utilizes the regular system call to attempt to load a native library . If a failure occurs , 
 + * then the function extracts native . so library out of the app ' s APK and attempts to load it . 
 + * < p > 
 + * < strong > Note : This is a synchronous operation < / strong > 
 + * / 
 + public static void loadLibrary ( final Context context , final String library ) { 
 + if ( context = = null ) { 
 + throw new IllegalArgumentException ( " Given context is null " ) ; 
 + } 
 + 
 + if ( TextUtils . isEmpty ( library ) ) { 
 + throw new IllegalArgumentException ( " Given library is either null or empty " ) ; 
 + } 
 + 
 + try { 
 + System . loadLibrary ( library ) ; 
 + return ; 
 + } catch ( final UnsatisfiedLinkError ignored ) { 
 + / / : - ( 
 + } 
 + 
 + final File workaroundFile = getWorkaroundLibFile ( context , library ) ; 
 + if ( ! workaroundFile . exists ( ) ) { 
 + unpackLibrary ( context , library ) ; 
 + } 
 + 
 + System . load ( workaroundFile . getAbsolutePath ( ) ) ; 
 + } 
 + 
 + / * * 
 + * @ param context { @ link Context } to describe the location of it ' s private directories 
 + * @ return A { @ link File } locating the directory that can store extracted libraries 
 + * for later use 
 + * / 
 + private static File getWorkaroundLibDir ( final Context context ) { 
 + return context . getDir ( LIB _ DIR , Context . MODE _ PRIVATE ) ; 
 + } 
 + 
 + / * * 
 + * @ param context { @ link Context } to retrieve the workaround directory from 
 + * @ param library The name of the library to load 
 + * @ return A { @ link File } locating the workaround library file to load 
 + * / 
 + private static File getWorkaroundLibFile ( final Context context , final String library ) { 
 + final String libName = System . mapLibraryName ( library ) ; 
 + return new File ( getWorkaroundLibDir ( context ) , libName ) ; 
 + } 
 + 
 + / * * 
 + * Attempts to unpack the given library to the workaround directory . Implements retry logic for 
 + * IO operations to ensure they succeed . 
 + * 
 + * @ param context { @ link Context } to describe the location of the installed APK file 
 + * @ param library The name of the library to load 
 + * / 
 + @ SuppressWarnings ( " ResultOfMethodCallIgnored " ) 
 + private static void unpackLibrary ( final Context context , final String library ) { 
 + ZipFile zipFile = null ; 
 + try { 
 + final ApplicationInfo appInfo = context . getApplicationInfo ( ) ; 
 + int tries = 0 ; 
 + while ( tries + + < MAX _ TRIES ) { 
 + try { 
 + zipFile = new ZipFile ( new File ( appInfo . sourceDir ) , ZipFile . OPEN _ READ ) ; 
 + break ; 
 + } catch ( IOException ignored ) { } 
 + } 
 + 
 + if ( zipFile = = null ) { 
 + return ; 
 + } 
 + 
 + tries = 0 ; 
 + while ( tries + + < MAX _ TRIES ) { 
 + String jniNameInApk = null ; 
 + ZipEntry libraryEntry = null ; 
 + 
 + if ( Build . VERSION . SDK _ INT > = 21 & & Build . SUPPORTED _ ABIS . length > 0 ) { 
 + for ( final String ABI : Build . SUPPORTED _ ABIS ) { 
 + jniNameInApk = " lib / " + ABI + " / " + System . mapLibraryName ( library ) ; 
 + libraryEntry = zipFile . getEntry ( jniNameInApk ) ; 
 + 
 + if ( libraryEntry ! = null ) { 
 + break ; 
 + } 
 + } 
 + } else { 
 + / / noinspection deprecation 
 + jniNameInApk = " lib / " + Build . CPU _ ABI + " / " + System . mapLibraryName ( library ) ; 
 + libraryEntry = zipFile . getEntry ( jniNameInApk ) ; 
 + } 
 + 
 + if ( libraryEntry = = null ) { 
 + / / Does not exist in the APK 
 + if ( jniNameInApk ! = null ) { 
 + throw new MissingLibraryException ( jniNameInApk ) ; 
 + } else { 
 + throw new MissingLibraryException ( library ) ; 
 + } 
 + } 
 + 
 + final File outputFile = getWorkaroundLibFile ( context , library ) ; 
 + outputFile . delete ( ) ; / / Remove any old file that might exist 
 + 
 + try { 
 + if ( ! outputFile . createNewFile ( ) ) { 
 + continue ; 
 + } 
 + } catch ( IOException ignored ) { 
 + / / Try again 
 + continue ; 
 + } 
 + 
 + InputStream inputStream = null ; 
 + FileOutputStream fileOut = null ; 
 + try { 
 + inputStream = zipFile . getInputStream ( libraryEntry ) ; 
 + fileOut = new FileOutputStream ( outputFile ) ; 
 + copy ( inputStream , fileOut ) ; 
 + } catch ( FileNotFoundException e ) { 
 + / / Try again 
 + continue ; 
 + } catch ( IOException e ) { 
 + / / Try again 
 + continue ; 
 + } finally { 
 + closeSilently ( inputStream ) ; 
 + closeSilently ( fileOut ) ; 
 + } 
 + 
 + / / Change permission to rwxr - xr - x 
 + outputFile . setReadable ( true , false ) ; 
 + outputFile . setExecutable ( true , false ) ; 
 + outputFile . setWritable ( true ) ; 
 + break ; 
 + } 
 + } finally { 
 + try { 
 + if ( zipFile ! = null ) { 
 + zipFile . close ( ) ; 
 + } 
 + } catch ( IOException ignored ) { } 
 + } 
 + } 
 + 
 + / * * 
 + * Copies all data from an { @ link InputStream } to an { @ link OutputStream } . 
 + * 
 + * @ param in The stream to read from . 
 + * @ param out The stream to write to . 
 + * @ throws IOException when a stream operation fails . 
 + * / 
 + private static void copy ( InputStream in , OutputStream out ) throws IOException { 
 + byte [ ] buf = new byte [ COPY _ BUFFER _ SIZE ] ; 
 + while ( true ) { 
 + int read = in . read ( buf ) ; 
 + if ( read = = - 1 ) { 
 + break ; 
 + } 
 + out . write ( buf , 0 , read ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Closes a { @ link Closeable } silently ( without throwing or handling any exceptions ) 
 + * @ param closeable { @ link Closeable } to close 
 + * / 
 + private static void closeSilently ( final Closeable closeable ) { 
 + try { 
 + if ( closeable ! = null ) { 
 + closeable . close ( ) ; 
 + } 
 + } catch ( IOException ignored ) { } 
 + } 
 + 
 + private static class MissingLibraryException extends RuntimeException { 
 + public MissingLibraryException ( final String library ) { 
 + super ( library ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIBinaryTypeTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIBinaryTypeTest . java 
 index 50ac578 . . 9d68b63 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNIBinaryTypeTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNIBinaryTypeTest . java 
 @ @ - 37 , 6 + 37 , 4 @ @ public class JNIBinaryTypeTest extends TestCase { 
 / / table . close ( ) ; 
 table = null ; 
 } 
 - 
 - 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 index cacebc9 . . 2efa610 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import static io . realm . internal . ColumnType . * ; 
 
 public class JNITableTest extends AndroidTestCase { 
 
 - Table t = new Table ( ) ; 
 + Table t ; 
 
 Table createTestTable ( ) { 
 Table t = new Table ( ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / PivotTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / PivotTest . java 
 index 1ea8d3f . . fc4b53c 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / PivotTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / PivotTest . java 
 @ @ - 22 , 61 + 22 , 62 @ @ import io . realm . internal . TableOrView . PivotType ; 
 
 public class PivotTest extends TestCase { 
 
 - Table t = new Table ( ) ; 
 + Table t ; 
 long colIndexSex ; 
 long colIndexAge ; 
 long colIndexHired ; 
 - 
 + 
 @ Override 
 - public void setUp ( ) { 
 + public void setUp ( ) { 
 + t = new Table ( ) ; 
 colIndexSex = t . addColumn ( ColumnType . STRING , " sex " ) ; 
 colIndexAge = t . addColumn ( ColumnType . INTEGER , " age " ) ; 
 colIndexHired = t . addColumn ( ColumnType . BOOLEAN , " hired " ) ; 
 - 
 + 
 for ( long i = 0 ; i < 50000 ; i + + ) { 
 String sex = i % 2 = = 0 ? " Male " : " Female " ; 
 t . add ( sex , 20 + ( i % 20 ) , true ) ; 
 } 
 } 
 - 
 + 
 public void testPivotTable ( ) { 
 - 
 + 
 Table resultCount = t . pivot ( colIndexSex , colIndexAge , PivotType . COUNT ) ; 
 assertEquals ( 2 , resultCount . size ( ) ) ; 
 assertEquals ( 25000 , resultCount . getLong ( 1 , 0 ) ) ; 
 assertEquals ( 25000 , resultCount . getLong ( 1 , 1 ) ) ; 
 - 
 + 
 Table resultMin = t . pivot ( colIndexSex , colIndexAge , PivotType . MIN ) ; 
 assertEquals ( 20 , resultMin . getLong ( 1 , 0 ) ) ; 
 assertEquals ( 21 , resultMin . getLong ( 1 , 1 ) ) ; 
 - 
 + 
 Table resultMax = t . pivot ( colIndexSex , colIndexAge , PivotType . MAX ) ; 
 assertEquals ( 38 , resultMax . getLong ( 1 , 0 ) ) ; 
 assertEquals ( 39 , resultMax . getLong ( 1 , 1 ) ) ; 
 - 
 + 
 try { t . pivot ( colIndexHired , colIndexAge , PivotType . SUM ) ; fail ( " Group by not a String column " ) ; } catch ( UnsupportedOperationException e ) { } 
 try { t . pivot ( colIndexSex , colIndexHired , PivotType . SUM ) ; fail ( " Aggregation not an int column " ) ; } catch ( UnsupportedOperationException e ) { } 
 } 
 - 
 - 
 + 
 + 
 public void testPivotTableView ( ) { 
 - 
 + 
 TableView view = t . getSortedView ( colIndexAge ) ; 
 - 
 + 
 Table resultCount = view . pivot ( colIndexSex , colIndexAge , PivotType . COUNT ) ; 
 assertEquals ( 2 , resultCount . size ( ) ) ; 
 assertEquals ( 25000 , resultCount . getLong ( 1 , 0 ) ) ; 
 assertEquals ( 25000 , resultCount . getLong ( 1 , 1 ) ) ; 
 - 
 + 
 Table resultMin = view . pivot ( colIndexSex , colIndexAge , PivotType . MIN ) ; 
 assertEquals ( 20 , resultMin . getLong ( 1 , 0 ) ) ; 
 assertEquals ( 21 , resultMin . getLong ( 1 , 1 ) ) ; 
 - 
 + 
 Table resultMax = view . pivot ( colIndexSex , colIndexAge , PivotType . MAX ) ; 
 assertEquals ( 38 , resultMax . getLong ( 1 , 0 ) ) ; 
 assertEquals ( 39 , resultMax . getLong ( 1 , 1 ) ) ; 
 - 
 - 
 + 
 + 
 try { view . pivot ( colIndexHired , colIndexAge , PivotType . SUM ) ; fail ( " Group by not a String column " ) ; } catch ( UnsupportedOperationException e ) { } 
 try { view . pivot ( colIndexSex , colIndexHired , PivotType . SUM ) ; fail ( " Aggregation not an int column " ) ; } catch ( UnsupportedOperationException e ) { } 
 } 
 diff - - git a / realm / realm - library / src / main / java / com / getkeepsafe / relinker / ReLinker . java b / realm / realm - library / src / main / java / com / getkeepsafe / relinker / ReLinker . java 
 new file mode 100644 
 index 0000000 . . d99a77a 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / com / getkeepsafe / relinker / ReLinker . java 
 @ @ - 0 , 0 + 1 , 219 @ @ 
 + / * * 
 + * Copyright 2015 KeepSafe Software , Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package com . getkeepsafe . relinker ; 
 + 
 + import android . content . Context ; 
 + import android . content . pm . ApplicationInfo ; 
 + import android . os . Build ; 
 + import android . text . TextUtils ; 
 + 
 + import java . io . Closeable ; 
 + import java . io . File ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . FileOutputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . io . OutputStream ; 
 + import java . util . zip . ZipEntry ; 
 + import java . util . zip . ZipFile ; 
 + 
 + / * * 
 + * ReLinker is a small library to help alleviate { @ link UnsatisfiedLinkError } exceptions thrown due 
 + * to Android ' s inability to properly install / load native libraries for Android versions before 
 + * API 21 
 + * / 
 + @ SuppressWarnings ( " deprecation " ) 
 + public class ReLinker { 
 + private static final String LIB _ DIR = " lib " ; 
 + private static final int MAX _ TRIES = 5 ; 
 + private static final int COPY _ BUFFER _ SIZE = 4096 ; 
 + 
 + private ReLinker ( ) { 
 + / / No instances 
 + } 
 + 
 + / * * 
 + * Utilizes the regular system call to attempt to load a native library . If a failure occurs , 
 + * then the function extracts native . so library out of the app ' s APK and attempts to load it . 
 + * < p > 
 + * < strong > Note : This is a synchronous operation < / strong > 
 + * / 
 + public static void loadLibrary ( final Context context , final String library ) { 
 + if ( context = = null ) { 
 + throw new IllegalArgumentException ( " Given context is null " ) ; 
 + } 
 + 
 + if ( TextUtils . isEmpty ( library ) ) { 
 + throw new IllegalArgumentException ( " Given library is either null or empty " ) ; 
 + } 
 + 
 + try { 
 + System . loadLibrary ( library ) ; 
 + return ; 
 + } catch ( final UnsatisfiedLinkError ignored ) { 
 + / / : - ( 
 + } 
 + 
 + final File workaroundFile = getWorkaroundLibFile ( context , library ) ; 
 + if ( ! workaroundFile . exists ( ) ) { 
 + unpackLibrary ( context , library ) ; 
 + } 
 + 
 + System . load ( workaroundFile . getAbsolutePath ( ) ) ; 
 + } 
 + 
 + / * * 
 + * @ param context { @ link Context } to describe the location of it ' s private directories 
 + * @ return A { @ link File } locating the directory that can store extracted libraries 
 + * for later use 
 + * / 
 + private static File getWorkaroundLibDir ( final Context context ) { 
 + return context . getDir ( LIB _ DIR , Context . MODE _ PRIVATE ) ; 
 + } 
 + 
 + / * * 
 + * @ param context { @ link Context } to retrieve the workaround directory from 
 + * @ param library The name of the library to load 
 + * @ return A { @ link File } locating the workaround library file to load 
 + * / 
 + private static File getWorkaroundLibFile ( final Context context , final String library ) { 
 + final String libName = System . mapLibraryName ( library ) ; 
 + return new File ( getWorkaroundLibDir ( context ) , libName ) ; 
 + } 
 + 
 + / * * 
 + * Attempts to unpack the given library to the workaround directory . Implements retry logic for 
 + * IO operations to ensure they succeed . 
 + * 
 + * @ param context { @ link Context } to describe the location of the installed APK file 
 + * @ param library The name of the library to load 
 + * / 
 + @ SuppressWarnings ( " ResultOfMethodCallIgnored " ) 
 + private static void unpackLibrary ( final Context context , final String library ) { 
 + ZipFile zipFile = null ; 
 + try { 
 + final ApplicationInfo appInfo = context . getApplicationInfo ( ) ; 
 + int tries = 0 ; 
 + while ( tries + + < MAX _ TRIES ) { 
 + try { 
 + zipFile = new ZipFile ( new File ( appInfo . sourceDir ) , ZipFile . OPEN _ READ ) ; 
 + break ; 
 + } catch ( IOException ignored ) { } 
 + } 
 + 
 + if ( zipFile = = null ) { 
 + return ; 
 + } 
 + 
 + tries = 0 ; 
 + while ( tries + + < MAX _ TRIES ) { 
 + String jniNameInApk ; 
 + ZipEntry libraryEntry = null ; 
 + 
 + if ( Build . VERSION . SDK _ INT > = 21 ) { 
 + for ( final String ABI : Build . SUPPORTED _ ABIS ) { 
 + jniNameInApk = " lib / " + ABI + " / " + System . mapLibraryName ( library ) ; 
 + libraryEntry = zipFile . getEntry ( jniNameInApk ) ; 
 + 
 + if ( libraryEntry ! = null ) { 
 + break ; 
 + } 
 + } 
 + } else { 
 + / / noinspection deprecation 
 + jniNameInApk = " lib / " + Build . CPU _ ABI + " / " + System . mapLibraryName ( library ) ; 
 + libraryEntry = zipFile . getEntry ( jniNameInApk ) ; 
 + } 
 + 
 + if ( libraryEntry = = null ) { 
 + / / Does not exist in the APK 
 + break ; 
 + } 
 + 
 + final File outputFile = getWorkaroundLibFile ( context , library ) ; 
 + outputFile . delete ( ) ; / / Remove any old file that might exist 
 + 
 + try { 
 + if ( ! outputFile . createNewFile ( ) ) { 
 + continue ; 
 + } 
 + } catch ( IOException ignored ) { 
 + / / Try again 
 + continue ; 
 + } 
 + 
 + InputStream inputStream = null ; 
 + FileOutputStream fileOut = null ; 
 + try { 
 + inputStream = zipFile . getInputStream ( libraryEntry ) ; 
 + fileOut = new FileOutputStream ( outputFile ) ; 
 + copy ( inputStream , fileOut ) ; 
 + } catch ( FileNotFoundException e ) { 
 + / / Try again 
 + continue ; 
 + } catch ( IOException e ) { 
 + / / Try again 
 + continue ; 
 + } finally { 
 + closeSilently ( inputStream ) ; 
 + closeSilently ( fileOut ) ; 
 + } 
 + 
 + / / Change permission to rwxr - xr - x 
 + outputFile . setReadable ( true , false ) ; 
 + outputFile . setExecutable ( true , false ) ; 
 + outputFile . setWritable ( true ) ; 
 + break ; 
 + } 
 + } finally { 
 + try { 
 + if ( zipFile ! = null ) { 
 + zipFile . close ( ) ; 
 + } 
 + } catch ( IOException ignored ) { } 
 + } 
 + } 
 + 
 + / * * 
 + * Copies all data from an { @ link InputStream } to an { @ link OutputStream } . 
 + * 
 + * @ param in The stream to read from . 
 + * @ param out The stream to write to . 
 + * @ throws IOException when a stream operation fails . 
 + * / 
 + private static void copy ( InputStream in , OutputStream out ) throws IOException { 
 + byte [ ] buf = new byte [ COPY _ BUFFER _ SIZE ] ; 
 + while ( true ) { 
 + int read = in . read ( buf ) ; 
 + if ( read = = - 1 ) { 
 + break ; 
 + } 
 + out . write ( buf , 0 , read ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Closes a { @ link Closeable } silently ( without throwing or handling any exceptions ) 
 + * @ param closeable { @ link Closeable } to close 
 + * / 
 + private static void closeSilently ( final Closeable closeable ) { 
 + try { 
 + if ( closeable ! = null ) { 
 + closeable . close ( ) ; 
 + } 
 + } catch ( IOException ignored ) { } 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index d3a66b3 . . 93d798e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 18 , 6 + 18 , 8 @ @ package io . realm ; 
 
 import android . content . Context ; 
 
 + import com . getkeepsafe . relinker . ReLinker ; 
 + 
 import java . io . File ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 @ @ - 244 , 6 + 246 , 8 @ @ public class RealmConfiguration { 
 throw new IllegalArgumentException ( " A non - null Context must be provided " ) ; 
 } 
 initializeBuilder ( context . getFilesDir ( ) ) ; 
 + / / FIXME : Using ReLinker to load . so file adds a string Android dependency 
 + ReLinker . loadLibrary ( context , " realm - jni " ) ; 
 } 
 
 / / Setup builder in its initial state 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Group . java b / realm / realm - library / src / main / java / io / realm / internal / Group . java 
 index c740f01 . . 98be587 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Group . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Group . java 
 @ @ - 35 , 10 + 35 , 6 @ @ public class Group implements Closeable { 
 protected boolean immutable ; 
 private final Context context ; 
 
 - static { 
 - RealmCore . loadLibrary ( ) ; 
 - } 
 - 
 private void checkNativePtrNotZero ( ) { 
 if ( this . nativePtr = = 0 ) 
 / / FIXME : It is wrong to assume that a null pointer means ' out 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedGroup . java b / realm / realm - library / src / main / java / io / realm / internal / SharedGroup . java 
 index 61c93ab . . 586899b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedGroup . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedGroup . java 
 @ @ - 38 , 10 + 38 , 6 @ @ public class SharedGroup implements Closeable { 
 private boolean activeTransaction ; 
 private final Context context ; 
 
 - static { 
 - RealmCore . loadLibrary ( ) ; 
 - } 
 - 
 public enum Durability { 
 FULL ( 0 ) , 
 MEM _ ONLY ( 1 ) ; 
 @ @ - 249 , 7 + 245 , 7 @ @ public class SharedGroup implements Closeable { 
 return new VersionID ( versionId [ 0 ] , versionId [ 1 ] ) ; 
 
 } 
 - 
 + 
 public static class VersionID implements Comparable < VersionID > { 
 final long version ; 
 final long index ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Util . java b / realm / realm - library / src / main / java / io / realm / internal / Util . java 
 index 85cf216 . . 698d645 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Util . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Util . java 
 @ @ - 20 , 10 + 20 , 6 @ @ import io . realm . RealmObject ; 
 
 public class Util { 
 
 - static { 
 - RealmCore . loadLibrary ( ) ; 
 - } 
 - 
 public static long getNativeMemUsage ( ) { 
 return nativeGetMemUsage ( ) ; 
 }
