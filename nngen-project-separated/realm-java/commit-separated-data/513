BLEU SCORE: 0.04873498938813619

TEST MSG: Move TableOrView . NO _ MATCH to Table
GENERATED MSG: Call set _ xxx _ unique for primary keys

TEST DIFF (one line): diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index f87f679 . . 2939fcf 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 73 , 7 + 73 , 6 @ @ public class RealmProxyClassGenerator { <nl> imports . add ( " io . realm . internal . RealmObjectProxy " ) ; <nl> imports . add ( " io . realm . internal . Row " ) ; <nl> imports . add ( " io . realm . internal . Table " ) ; <nl> - imports . add ( " io . realm . internal . TableOrView " ) ; <nl> imports . add ( " io . realm . internal . SharedRealm " ) ; <nl> imports . add ( " io . realm . internal . LinkView " ) ; <nl> imports . add ( " io . realm . internal . android . JsonUtils " ) ; <nl> @ @ - 715 , 7 + 714 , 7 @ @ public class RealmProxyClassGenerator { <nl> / / check before migrating a nullable field containing null value to not - nullable PrimaryKey field for Realm version 0 . 89 + <nl> if ( metadata . isPrimaryKey ( field ) ) { <nl> writer <nl> - . beginControlFlow ( " if ( table . isColumnNullable ( % s ) & & table . findFirstNull ( % s ) ! = TableOrView . NO _ MATCH ) " , <nl> + . beginControlFlow ( " if ( table . isColumnNullable ( % s ) & & table . findFirstNull ( % s ) ! = Table . NO _ MATCH ) " , <nl> fieldIndexVariableReference ( field ) , fieldIndexVariableReference ( field ) ) <nl> . emitStatement ( " throw new IllegalStateException ( \ " Cannot migrate an object with null value in field ' % s ' . " + <nl> " Either maintain the same type for primary key field ' % s ' , or remove the object with null value before migration . \ " ) " , <nl> @ @ - 863 , 7 + 862 , 7 @ @ public class RealmProxyClassGenerator { <nl> if ( Utils . isString ( primaryKeyElement ) ) { <nl> writer <nl> . emitStatement ( " String value = ( ( % s ) object ) . % s ( ) " , interfaceName , primaryKeyGetter ) <nl> - . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) <nl> + . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) <nl> . beginControlFlow ( " if ( value = = null ) " ) <nl> . emitStatement ( " rowIndex = table . findFirstNull ( pkColumnIndex ) " ) <nl> . nextControlFlow ( " else " ) <nl> @ @ - 872 , 7 + 871 , 7 @ @ public class RealmProxyClassGenerator { <nl> } else { <nl> writer <nl> . emitStatement ( " Number value = ( ( % s ) object ) . % s ( ) " , interfaceName , primaryKeyGetter ) <nl> - . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) <nl> + . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) <nl> . beginControlFlow ( " if ( value = = null ) " ) <nl> . emitStatement ( " rowIndex = table . findFirstNull ( pkColumnIndex ) " ) <nl> . nextControlFlow ( " else " ) <nl> @ @ - 886 , 7 + 885 , 7 @ @ public class RealmProxyClassGenerator { <nl> } <nl> <nl> writer <nl> - . beginControlFlow ( " if ( rowIndex ! = TableOrView . NO _ MATCH ) " ) <nl> + . beginControlFlow ( " if ( rowIndex ! = Table . NO _ MATCH ) " ) <nl> . beginControlFlow ( " try " ) <nl> . emitStatement ( " objectContext . set ( realm , table . getUncheckedRow ( rowIndex ) , " + <nl> " realm . schema . getColumnInfo ( % s . class ) , " + <nl> @ @ - 1334 , 7 + 1333 , 7 @ @ public class RealmProxyClassGenerator { <nl> if ( Utils . isString ( primaryKeyElement ) ) { <nl> writer <nl> . emitStatement ( " String primaryKeyValue = ( ( % s ) object ) . % s ( ) " , interfaceName , primaryKeyGetter ) <nl> - . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) <nl> + . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) <nl> . beginControlFlow ( " if ( primaryKeyValue = = null ) " ) <nl> . emitStatement ( " rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) " ) <nl> . nextControlFlow ( " else " ) <nl> @ @ - 1343 , 7 + 1342 , 7 @ @ public class RealmProxyClassGenerator { <nl> } else { <nl> writer <nl> . emitStatement ( " Object primaryKeyValue = ( ( % s ) object ) . % s ( ) " , interfaceName , primaryKeyGetter ) <nl> - . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) <nl> + . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) <nl> . beginControlFlow ( " if ( primaryKeyValue = = null ) " ) <nl> . emitStatement ( " rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) " ) <nl> . nextControlFlow ( " else " ) <nl> @ @ - 1351 , 7 + 1350 , 7 @ @ public class RealmProxyClassGenerator { <nl> . endControlFlow ( ) ; <nl> } <nl> } else { <nl> - writer . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) ; <nl> + writer . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) ; <nl> writer . emitStatement ( " Object primaryKeyValue = ( ( % s ) object ) . % s ( ) " , interfaceName , primaryKeyGetter ) ; <nl> writer . beginControlFlow ( " if ( primaryKeyValue ! = null ) " ) ; <nl> <nl> @ @ - 1363 , 7 + 1362 , 7 @ @ public class RealmProxyClassGenerator { <nl> writer . endControlFlow ( ) ; <nl> } <nl> <nl> - writer . beginControlFlow ( " if ( rowIndex = = TableOrView . NO _ MATCH ) " ) ; <nl> + writer . beginControlFlow ( " if ( rowIndex = = Table . NO _ MATCH ) " ) ; <nl> if ( Utils . isString ( metadata . getPrimaryKey ( ) ) ) { <nl> writer . emitStatement ( " rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) " ) ; <nl> } else { <nl> @ @ - 1732 , 7 + 1731 , 7 @ @ public class RealmProxyClassGenerator { <nl> . beginControlFlow ( " if ( update ) " ) <nl> . emitStatement ( " Table table = realm . getTable ( % s . class ) " , qualifiedClassName ) <nl> . emitStatement ( " long pkColumnIndex = table . getPrimaryKey ( ) " ) <nl> - . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) ; <nl> + . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) ; <nl> if ( metadata . isNullable ( metadata . getPrimaryKey ( ) ) ) { <nl> writer <nl> . beginControlFlow ( " if ( json . isNull ( \ " % s \ " ) ) " , metadata . getPrimaryKey ( ) . getSimpleName ( ) ) <nl> @ @ - 1749 , 7 + 1748 , 7 @ @ public class RealmProxyClassGenerator { <nl> . endControlFlow ( ) ; <nl> } <nl> writer <nl> - . beginControlFlow ( " if ( rowIndex ! = TableOrView . NO _ MATCH ) " ) <nl> + . beginControlFlow ( " if ( rowIndex ! = Table . NO _ MATCH ) " ) <nl> . emitStatement ( " final BaseRealm . RealmObjectContext objectContext = BaseRealm . objectContext . get ( ) " ) <nl> . beginControlFlow ( " try " ) <nl> . emitStatement ( " objectContext . set ( realm , table . getUncheckedRow ( rowIndex ) , " + <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> index d67ccc9 . . 09d5c21 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> @ @ - 14 , 7 + 14 , 6 @ @ import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> import io . realm . internal . SharedRealm ; <nl> import io . realm . internal . Table ; <nl> - import io . realm . internal . TableOrView ; <nl> import io . realm . internal . android . JsonUtils ; <nl> import io . realm . log . RealmLog ; <nl> import java . io . IOException ; <nl> @ @ - 650 , 13 + 649 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> if ( update ) { <nl> Table table = realm . getTable ( some . test . AllTypes . class ) ; <nl> long pkColumnIndex = table . getPrimaryKey ( ) ; <nl> - long rowIndex = TableOrView . NO _ MATCH ; <nl> + long rowIndex = Table . NO _ MATCH ; <nl> if ( json . isNull ( " columnString " ) ) { <nl> rowIndex = table . findFirstNull ( pkColumnIndex ) ; <nl> } else { <nl> rowIndex = table . findFirstString ( pkColumnIndex , json . getString ( " columnString " ) ) ; <nl> } <nl> - if ( rowIndex ! = TableOrView . NO _ MATCH ) { <nl> + if ( rowIndex ! = Table . NO _ MATCH ) { <nl> final BaseRealm . RealmObjectContext objectContext = BaseRealm . objectContext . get ( ) ; <nl> try { <nl> objectContext . set ( realm , table . getUncheckedRow ( rowIndex ) , realm . schema . getColumnInfo ( some . test . AllTypes . class ) , false , Collections . < String > emptyList ( ) ) ; <nl> @ @ - 868 , 13 + 867 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> Table table = realm . getTable ( some . test . AllTypes . class ) ; <nl> long pkColumnIndex = table . getPrimaryKey ( ) ; <nl> String value = ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnString ( ) ; <nl> - long rowIndex = TableOrView . NO _ MATCH ; <nl> + long rowIndex = Table . NO _ MATCH ; <nl> if ( value = = null ) { <nl> rowIndex = table . findFirstNull ( pkColumnIndex ) ; <nl> } else { <nl> rowIndex = table . findFirstString ( pkColumnIndex , value ) ; <nl> } <nl> - if ( rowIndex ! = TableOrView . NO _ MATCH ) { <nl> + if ( rowIndex ! = Table . NO _ MATCH ) { <nl> try { <nl> objectContext . set ( realm , table . getUncheckedRow ( rowIndex ) , realm . schema . getColumnInfo ( some . test . AllTypes . class ) , false , Collections . < String > emptyList ( ) ) ; <nl> realmObject = new io . realm . AllTypesRealmProxy ( ) ; <nl> @ @ - 949 , 13 + 948 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> AllTypesColumnInfo columnInfo = ( AllTypesColumnInfo ) realm . schema . getColumnInfo ( some . test . AllTypes . class ) ; <nl> long pkColumnIndex = table . getPrimaryKey ( ) ; <nl> String primaryKeyValue = ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnString ( ) ; <nl> - long rowIndex = TableOrView . NO _ MATCH ; <nl> + long rowIndex = Table . NO _ MATCH ; <nl> if ( primaryKeyValue = = null ) { <nl> rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) ; <nl> } else { <nl> rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; <nl> } <nl> - if ( rowIndex = = TableOrView . NO _ MATCH ) { <nl> + if ( rowIndex = = Table . NO _ MATCH ) { <nl> rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; <nl> } else { <nl> Table . throwDuplicatePrimaryKeyException ( primaryKeyValue ) ; <nl> @ @ - 1012 , 13 + 1011 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> continue ; <nl> } <nl> String primaryKeyValue = ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnString ( ) ; <nl> - long rowIndex = TableOrView . NO _ MATCH ; <nl> + long rowIndex = Table . NO _ MATCH ; <nl> if ( primaryKeyValue = = null ) { <nl> rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) ; <nl> } else { <nl> rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; <nl> } <nl> - if ( rowIndex = = TableOrView . NO _ MATCH ) { <nl> + if ( rowIndex = = Table . NO _ MATCH ) { <nl> rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; <nl> } else { <nl> Table . throwDuplicatePrimaryKeyException ( primaryKeyValue ) ; <nl> @ @ - 1071 , 13 + 1070 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> AllTypesColumnInfo columnInfo = ( AllTypesColumnInfo ) realm . schema . getColumnInfo ( some . test . AllTypes . class ) ; <nl> long pkColumnIndex = table . getPrimaryKey ( ) ; <nl> String primaryKeyValue = ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnString ( ) ; <nl> - long rowIndex = TableOrView . NO _ MATCH ; <nl> + long rowIndex = Table . NO _ MATCH ; <nl> if ( primaryKeyValue = = null ) { <nl> rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) ; <nl> } else { <nl> rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; <nl> } <nl> - if ( rowIndex = = TableOrView . NO _ MATCH ) { <nl> + if ( rowIndex = = Table . NO _ MATCH ) { <nl> rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; <nl> } <nl> cache . put ( object , rowIndex ) ; <nl> @ @ - 1139 , 13 + 1138 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> continue ; <nl> } <nl> String primaryKeyValue = ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnString ( ) ; <nl> - long rowIndex = TableOrView . NO _ MATCH ; <nl> + long rowIndex = Table . NO _ MATCH ; <nl> if ( primaryKeyValue = = null ) { <nl> rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) ; <nl> } else { <nl> rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; <nl> } <nl> - if ( rowIndex = = TableOrView . NO _ MATCH ) { <nl> + if ( rowIndex = = Table . NO _ MATCH ) { <nl> rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; <nl> } <nl> cache . put ( object , rowIndex ) ; <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> index 7200c4e . . 7323ad2 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> @ @ - 14 , 7 + 14 , 6 @ @ import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> import io . realm . internal . SharedRealm ; <nl> import io . realm . internal . Table ; <nl> - import io . realm . internal . TableOrView ; <nl> import io . realm . internal . android . JsonUtils ; <nl> import io . realm . log . RealmLog ; <nl> import java . io . IOException ; <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java <nl> index 608868b . . ee1b354 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java <nl> @ @ - 14 , 7 + 14 , 6 @ @ import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> import io . realm . internal . SharedRealm ; <nl> import io . realm . internal . Table ; <nl> - import io . realm . internal . TableOrView ; <nl> import io . realm . internal . android . JsonUtils ; <nl> import io . realm . log . RealmLog ; <nl> import java . io . IOException ; <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> index 3dc59b6 . . a1e7952 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> @ @ - 14 , 7 + 14 , 6 @ @ import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> import io . realm . internal . SharedRealm ; <nl> import io . realm . internal . Table ; <nl> - import io . realm . internal . TableOrView ; <nl> import io . realm . internal . android . JsonUtils ; <nl> import io . realm . log . RealmLog ; <nl> import java . io . IOException ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java <nl> index febc7e8 . . d74833f 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import java . util . Set ; <nl> <nl> import io . realm . annotations . Required ; <nl> import io . realm . internal . Table ; <nl> - import io . realm . internal . TableOrView ; <nl> <nl> / * * <nl> * Class for interacting with the schema for a given RealmObject class . This makes it possible to <nl> @ @ - 332 , 7 + 331 , 7 @ @ public final class RealmObjectSchema { <nl> * @ return { @ code true } if the field exists , { @ code false } otherwise . <nl> * / <nl> public boolean hasField ( String fieldName ) { <nl> - return table . getColumnIndex ( fieldName ) ! = TableOrView . NO _ MATCH ; <nl> + return table . getColumnIndex ( fieldName ) ! = Table . NO _ MATCH ; <nl> } <nl> <nl> / * * <nl> @ @ - 632 , 13 + 631 , 13 @ @ public final class RealmObjectSchema { <nl> } <nl> <nl> private void checkFieldNameIsAvailable ( String fieldName ) { <nl> - if ( table . getColumnIndex ( fieldName ) ! = TableOrView . NO _ MATCH ) { <nl> + if ( table . getColumnIndex ( fieldName ) ! = Table . NO _ MATCH ) { <nl> throw new IllegalArgumentException ( " Field already exists in ' " + getClassName ( ) + " ' : " + fieldName ) ; <nl> } <nl> } <nl> <nl> private void checkFieldExists ( String fieldName ) { <nl> - if ( table . getColumnIndex ( fieldName ) = = TableOrView . NO _ MATCH ) { <nl> + if ( table . getColumnIndex ( fieldName ) = = Table . NO _ MATCH ) { <nl> throw new IllegalArgumentException ( " Field name doesn ' t exist on object ' " + getClassName ( ) + " ' : " + fieldName ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index d9ee232 . . 281fa7d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> import io . realm . internal . SharedRealm ; <nl> import io . realm . internal . SortDescriptor ; <nl> - import io . realm . internal . TableOrView ; <nl> + import io . realm . internal . Table ; <nl> import io . realm . internal . TableQuery ; <nl> import io . realm . internal . async . ArgumentsHolder ; <nl> import io . realm . internal . async . QueryUpdateTask ; <nl> @ @ - 61 , 7 + 61 , 7 @ @ public final class RealmQuery < E extends RealmModel > { <nl> private BaseRealm realm ; <nl> private Class < E > clazz ; <nl> private String className ; <nl> - private TableOrView table ; <nl> + private Table table ; <nl> private RealmObjectSchema schema ; <nl> private LinkView linkView ; <nl> private TableQuery query ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 9bfe605 . . e65f5eb 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ import io . realm . internal . InvalidRow ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> import io . realm . internal . SortDescriptor ; <nl> - import io . realm . internal . TableOrView ; <nl> + import io . realm . internal . Table ; <nl> import io . realm . internal . Collection ; <nl> import io . realm . internal . UncheckedRow ; <nl> import rx . Observable ; <nl> @ @ - 88 , 7 + 88 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> this . collection = collection ; <nl> } <nl> <nl> - TableOrView getTable ( ) { <nl> + Table getTable ( ) { <nl> return collection . getTable ( ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / LinkView . java b / realm / realm - library / src / main / java / io / realm / internal / LinkView . java <nl> index f6718b4 . . 2218a9e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / LinkView . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / LinkView . java <nl> @ @ - 113 , 7 + 113 , 7 @ @ public class LinkView implements NativeObject { <nl> <nl> public boolean contains ( long tableRowIndex ) { <nl> long index = nativeFind ( nativePtr , tableRowIndex ) ; <nl> - return ( index ! = TableOrView . NO _ MATCH ) ; <nl> + return ( index ! = Table . NO _ MATCH ) ; <nl> } <nl> <nl> public long size ( ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> index ca0a0b1 . . 1a0f628 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ public class Table implements TableOrView , TableSchema , NativeObject { <nl> public static final long INFINITE = - 1 ; <nl> public static final boolean NULLABLE = true ; <nl> public static final boolean NOT _ NULLABLE = false ; <nl> + public static final int NO _ MATCH = - 1 ; <nl> <nl> private static final String PRIMARY _ KEY _ TABLE _ NAME = " pk " ; <nl> private static final String PRIMARY _ KEY _ CLASS _ COLUMN _ NAME = " pk _ table " ; <nl> @ @ - 621 , 7 + 622 , 7 @ @ public class Table implements TableOrView , TableSchema , NativeObject { <nl> void checkStringValueIsLegal ( long columnIndex , long rowToUpdate , String value ) { <nl> if ( isPrimaryKey ( columnIndex ) ) { <nl> long rowIndex = findFirstString ( columnIndex , value ) ; <nl> - if ( rowIndex ! = rowToUpdate & & rowIndex ! = TableOrView . NO _ MATCH ) { <nl> + if ( rowIndex ! = rowToUpdate & & rowIndex ! = NO _ MATCH ) { <nl> throwDuplicatePrimaryKeyException ( value ) ; <nl> } <nl> } <nl> @ @ - 630 , 7 + 631 , 7 @ @ public class Table implements TableOrView , TableSchema , NativeObject { <nl> void checkIntValueIsLegal ( long columnIndex , long rowToUpdate , long value ) { <nl> if ( isPrimaryKeyColumn ( columnIndex ) ) { <nl> long rowIndex = findFirstLong ( columnIndex , value ) ; <nl> - if ( rowIndex ! = rowToUpdate & & rowIndex ! = TableOrView . NO _ MATCH ) { <nl> + if ( rowIndex ! = rowToUpdate & & rowIndex ! = NO _ MATCH ) { <nl> throwDuplicatePrimaryKeyException ( value ) ; <nl> } <nl> } <nl> @ @ - 644 , 7 + 645 , 7 @ @ public class Table implements TableOrView , TableSchema , NativeObject { <nl> case STRING : <nl> case INTEGER : <nl> long rowIndex = findFirstNull ( columnIndex ) ; <nl> - if ( rowIndex ! = rowToUpdate & & rowIndex ! = TableOrView . NO _ MATCH ) { <nl> + if ( rowIndex ! = rowToUpdate & & rowIndex ! = NO _ MATCH ) { <nl> throwDuplicatePrimaryKeyException ( " null " ) ; <nl> } <nl> break ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableOrView . java b / realm / realm - library / src / main / java / io / realm / internal / TableOrView . java <nl> index 58404ee . . a45ad13 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / TableOrView . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / TableOrView . java <nl> @ @ - 26 , 8 + 26 , 6 @ @ import io . realm . RealmFieldType ; <nl> * / <nl> public interface TableOrView { <nl> <nl> - int NO _ MATCH = - 1 ; <nl> - <nl> void clear ( ) ; <nl> <nl> / * * <nl> @ @ - 257 , 7 + 255 , 7 @ @ public interface TableOrView { <nl> * <nl> * @ param columnIndex the column to search in . <nl> * @ param value the value to search for . <nl> - * @ return the row index for the first match found or { @ link # NO _ MATCH } . <nl> + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . <nl> * / <nl> long findFirstLong ( long columnIndex , long value ) ; <nl> <nl> @ @ - 266 , 7 + 264 , 7 @ @ public interface TableOrView { <nl> * <nl> * @ param columnIndex the column to search in . <nl> * @ param value the alue to search for . <nl> - * @ return the row index for the first match found or { @ link # NO _ MATCH } . <nl> + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . <nl> * / <nl> long findFirstBoolean ( long columnIndex , boolean value ) ; <nl> <nl> @ @ - 275 , 7 + 273 , 7 @ @ public interface TableOrView { <nl> * <nl> * @ param columnIndex the column to search in . <nl> * @ param value the value to search for . <nl> - * @ return the row index for the first match found or { @ link # NO _ MATCH } . <nl> + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . <nl> * / <nl> long findFirstFloat ( long columnIndex , float value ) ; <nl> <nl> @ @ - 284 , 7 + 282 , 7 @ @ public interface TableOrView { <nl> * <nl> * @ param columnIndex the column to search in . <nl> * @ param value the value to search for . <nl> - * @ return the row index for the first match found or { @ link # NO _ MATCH } . <nl> + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . <nl> * / <nl> long findFirstDouble ( long columnIndex , double value ) ; <nl> <nl> @ @ - 293 , 7 + 291 , 7 @ @ public interface TableOrView { <nl> * <nl> * @ param columnIndex the column to search in . <nl> * @ param value the value to search for . <nl> - * @ return the row index for the first match found or { @ link # NO _ MATCH } . <nl> + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . <nl> * / <nl> long findFirstDate ( long columnIndex , Date value ) ; <nl> <nl> @ @ - 302 , 7 + 300 , 7 @ @ public interface TableOrView { <nl> * <nl> * @ param columnIndex the column to search in . <nl> * @ param value the value to search for . <nl> - * @ return the row index for the first match found or { @ link # NO _ MATCH } . <nl> + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . <nl> * / <nl> long findFirstString ( long columnIndex , String value ) ; <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableView . java b / realm / realm - library / src / main / java / io / realm / internal / TableView . java <nl> index 3f54675 . . 1a5cd59 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / TableView . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / TableView . java <nl> @ @ - 450 , 7 + 450 , 7 @ @ public class TableView implements TableOrView , NativeObject { <nl> @ Override <nl> public long findFirstDate ( long columnIndex , Date date ) { <nl> / / FIXME : waiting for implementation <nl> - return NO _ MATCH ; <nl> + return Table . NO _ MATCH ; <nl> / / return nativeFindFirstDate ( nativePtr , columnIndex , date . getTime ( ) ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 83c2d43 . . 5eff1c6 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 1124 , 15 + 1124 , 11 @ @ public class RealmProxyClassGenerator { <nl> } <nl> <nl> writer . beginControlFlow ( " if ( rowIndex = = TableOrView . NO _ MATCH ) " ) ; <nl> - writer . emitStatement ( " rowIndex = Table . nativeAddEmptyRow ( tableNativePtr , 1 ) " ) ; <nl> if ( Utils . isString ( metadata . getPrimaryKey ( ) ) ) { <nl> - writer . beginControlFlow ( " if ( primaryKeyValue ! = null ) " ) ; <nl> - writer . emitStatement ( " Table . nativeSetString ( tableNativePtr , pkColumnIndex , rowIndex , ( String ) primaryKeyValue ) " ) ; <nl> - writer . endControlFlow ( ) ; <nl> + writer . emitStatement ( " rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) " ) ; <nl> } else { <nl> - writer . beginControlFlow ( " if ( primaryKeyValue ! = null ) " ) ; <nl> - writer . emitStatement ( " Table . nativeSetLong ( tableNativePtr , pkColumnIndex , rowIndex , ( ( % s ) object ) . % s ( ) ) " , interfaceName , primaryKeyGetter ) ; <nl> - writer . endControlFlow ( ) ; <nl> + writer . emitStatement ( " rowIndex = table . addEmptyRowWithPrimaryKey ( ( ( % s ) object ) . % s ( ) , false ) " , <nl> + interfaceName , primaryKeyGetter ) ; <nl> } <nl> <nl> if ( throwIfPrimaryKeyDuplicate ) { <nl> @ @ - 1632 , 6 + 1628 , 7 @ @ public class RealmProxyClassGenerator { <nl> writer . emitStatement ( " return obj " ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> + <nl> } <nl> <nl> private String columnInfoClassName ( ) { <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> index cca4d4a . . c5c43b8 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> @ @ - 690 , 10 + 690 , 7 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; <nl> } <nl> if ( rowIndex = = TableOrView . NO _ MATCH ) { <nl> - rowIndex = Table . nativeAddEmptyRow ( tableNativePtr , 1 ) ; <nl> - if ( primaryKeyValue ! = null ) { <nl> - Table . nativeSetString ( tableNativePtr , pkColumnIndex , rowIndex , ( String ) primaryKeyValue ) ; <nl> - } <nl> + rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; <nl> } else { <nl> Table . throwDuplicatePrimaryKeyException ( primaryKeyValue ) ; <nl> } <nl> @ @ - 757 , 10 + 754 , 7 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; <nl> } <nl> if ( rowIndex = = TableOrView . NO _ MATCH ) { <nl> - rowIndex = Table . nativeAddEmptyRow ( tableNativePtr , 1 ) ; <nl> - if ( primaryKeyValue ! = null ) { <nl> - Table . nativeSetString ( tableNativePtr , pkColumnIndex , rowIndex , ( String ) primaryKeyValue ) ; <nl> - } <nl> + rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; <nl> } else { <nl> Table . throwDuplicatePrimaryKeyException ( primaryKeyValue ) ; <nl> } <nl> @ @ - 820 , 10 + 814 , 7 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; <nl> } <nl> if ( rowIndex = = TableOrView . NO _ MATCH ) { <nl> - rowIndex = Table . nativeAddEmptyRow ( tableNativePtr , 1 ) ; <nl> - if ( primaryKeyValue ! = null ) { <nl> - Table . nativeSetString ( tableNativePtr , pkColumnIndex , rowIndex , ( String ) primaryKeyValue ) ; <nl> - } <nl> + rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; <nl> } <nl> cache . put ( object , rowIndex ) ; <nl> Table . nativeSetLong ( tableNativePtr , columnInfo . columnLongIndex , rowIndex , ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnLong ( ) ) ; <nl> @ @ - 892 , 10 + 883 , 7 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; <nl> } <nl> if ( rowIndex = = TableOrView . NO _ MATCH ) { <nl> - rowIndex = Table . nativeAddEmptyRow ( tableNativePtr , 1 ) ; <nl> - if ( primaryKeyValue ! = null ) { <nl> - Table . nativeSetString ( tableNativePtr , pkColumnIndex , rowIndex , ( String ) primaryKeyValue ) ; <nl> - } <nl> + rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; <nl> } <nl> cache . put ( object , rowIndex ) ; <nl> Table . nativeSetLong ( tableNativePtr , columnInfo . columnLongIndex , rowIndex , ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnLong ( ) ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> index 719d6e5 . . 0f1eb70 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> @ @ - 638 , 6 + 638 , 17 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetLong ( <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> + JNIEXPORT void JNICALL <nl> + Java _ io _ realm _ internal _ Table _ nativeSetLongUnique ( JNIEnv * env , jclass , jlong nativeTablePtr , jlong columnIndex , <nl> + jlong rowIndex , jlong value ) <nl> + { <nl> + if ( ! TBL _ AND _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , rowIndex , type _ Int ) ) <nl> + return ; <nl> + try { <nl> + TBL ( nativeTablePtr ) - > set _ int _ unique ( S ( columnIndex ) , S ( rowIndex ) , value ) ; <nl> + } CATCH _ STD ( ) <nl> + } <nl> + <nl> JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetBoolean ( <nl> JNIEnv * env , jclass , jlong nativeTablePtr , jlong columnIndex , jlong rowIndex , jboolean value ) <nl> { <nl> @ @ - 684 , 6 + 695 , 24 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetString ( <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> + JNIEXPORT void JNICALL <nl> + Java _ io _ realm _ internal _ Table _ nativeSetStringUnique ( JNIEnv * env , jclass , jlong nativeTablePtr , jlong columnIndex , <nl> + jlong rowIndex , jstring value ) <nl> + { <nl> + if ( ! TBL _ AND _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , rowIndex , type _ String ) ) <nl> + return ; <nl> + try { <nl> + if ( value = = NULL ) { <nl> + if ( ! TBL _ AND _ COL _ NULLABLE ( env , TBL ( nativeTablePtr ) , columnIndex ) ) { <nl> + return ; <nl> + } <nl> + } <nl> + JStringAccessor value2 ( env , value ) ; / / throws <nl> + / / FIXME : Check if we need to call set _ null _ unique when core support it . <nl> + TBL ( nativeTablePtr ) - > set _ string _ unique ( S ( columnIndex ) , S ( rowIndex ) , value2 ) ; <nl> + } CATCH _ STD ( ) <nl> + } <nl> + <nl> JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetTimestamp ( <nl> JNIEnv * env , jclass , jlong nativeTablePtr , jlong columnIndex , jlong rowIndex , jlong timestampValue ) <nl> { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> index 8e4dd14 . . b831ef5 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> @ @ - 385 , 9 + 385 , 30 @ @ public class Table implements TableOrView , TableSchema { <nl> return nativeAddEmptyRow ( nativePtr , 1 ) ; <nl> } <nl> <nl> + / * * <nl> + * Add an empty row to the table and set the primary key with the given value . Equivalent to call <nl> + * { @ link # addEmptyRowWithPrimaryKey ( Object , boolean ) } with { @ code validation = true } . <nl> + * <nl> + * @ param primaryKeyValue the primary key value <nl> + * @ return the row index . <nl> + * / <nl> public long addEmptyRowWithPrimaryKey ( Object primaryKeyValue ) { <nl> - checkImmutable ( ) ; <nl> - checkHasPrimaryKey ( ) ; <nl> + return addEmptyRowWithPrimaryKey ( primaryKeyValue , true ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Add an empty row to the table and set the primary key with the given value . <nl> + * <nl> + * @ param primaryKeyValue the primary key value . <nl> + * @ param validation set to { @ code false } to skip all validations . This is currently used by bulk insert which <nl> + * has its own validations . <nl> + * @ return the row index . <nl> + * / <nl> + public long addEmptyRowWithPrimaryKey ( Object primaryKeyValue , boolean validation ) { <nl> + if ( validation ) { <nl> + checkImmutable ( ) ; <nl> + checkHasPrimaryKey ( ) ; <nl> + } <nl> <nl> long primaryKeyColumnIndex = getPrimaryKey ( ) ; <nl> RealmFieldType type = getColumnType ( primaryKeyColumnIndex ) ; <nl> @ @ - 399 , 11 + 420 , 12 @ @ public class Table implements TableOrView , TableSchema { <nl> switch ( type ) { <nl> case STRING : <nl> case INTEGER : <nl> - if ( findFirstNull ( primaryKeyColumnIndex ) ! = NO _ MATCH ) { <nl> + if ( validation & & findFirstNull ( primaryKeyColumnIndex ) ! = NO _ MATCH ) { <nl> throwDuplicatePrimaryKeyException ( " null " ) ; <nl> } <nl> rowIndex = nativeAddEmptyRow ( nativePtr , 1 ) ; <nl> row = getUncheckedRow ( rowIndex ) ; <nl> + / / FIXME : Use core ' s set _ null _ unique when core supports it . <nl> row . setNull ( primaryKeyColumnIndex ) ; <nl> break ; <nl> <nl> @ @ - 417 , 12 + 439 , 11 @ @ public class Table implements TableOrView , TableSchema { <nl> if ( ! ( primaryKeyValue instanceof String ) ) { <nl> throw new IllegalArgumentException ( " Primary key value is not a String : " + primaryKeyValue ) ; <nl> } <nl> - if ( findFirstString ( primaryKeyColumnIndex , ( String ) primaryKeyValue ) ! = NO _ MATCH ) { <nl> + if ( validation & & findFirstString ( primaryKeyColumnIndex , ( String ) primaryKeyValue ) ! = NO _ MATCH ) { <nl> throwDuplicatePrimaryKeyException ( primaryKeyValue ) ; <nl> } <nl> rowIndex = nativeAddEmptyRow ( nativePtr , 1 ) ; <nl> - row = getUncheckedRow ( rowIndex ) ; <nl> - row . setString ( primaryKeyColumnIndex , ( String ) primaryKeyValue ) ; <nl> + nativeSetStringUnique ( nativePtr , primaryKeyColumnIndex , rowIndex , ( String ) primaryKeyValue ) ; <nl> break ; <nl> <nl> case INTEGER : <nl> @ @ - 432 , 12 + 453 , 11 @ @ public class Table implements TableOrView , TableSchema { <nl> } catch ( RuntimeException e ) { <nl> throw new IllegalArgumentException ( " Primary key value is not a long : " + primaryKeyValue ) ; <nl> } <nl> - if ( findFirstLong ( primaryKeyColumnIndex , pkValue ) ! = NO _ MATCH ) { <nl> + if ( validation & & findFirstLong ( primaryKeyColumnIndex , pkValue ) ! = NO _ MATCH ) { <nl> throwDuplicatePrimaryKeyException ( pkValue ) ; <nl> } <nl> rowIndex = nativeAddEmptyRow ( nativePtr , 1 ) ; <nl> - row = getUncheckedRow ( rowIndex ) ; <nl> - row . setLong ( primaryKeyColumnIndex , pkValue ) ; <nl> + nativeSetLongUnique ( nativePtr , primaryKeyColumnIndex , rowIndex , pkValue ) ; <nl> break ; <nl> <nl> default : <nl> @ @ - 1315 , 11 + 1335 , 13 @ @ public class Table implements TableOrView , TableSchema { <nl> private native long nativeGetLinkTarget ( long nativePtr , long columnIndex ) ; <nl> native long nativeGetRowPtr ( long nativePtr , long index ) ; <nl> public static native void nativeSetLong ( long nativeTablePtr , long columnIndex , long rowIndex , long value ) ; <nl> + public static native void nativeSetLongUnique ( long nativeTablePtr , long columnIndex , long rowIndex , long value ) ; <nl> public static native void nativeSetBoolean ( long nativeTablePtr , long columnIndex , long rowIndex , boolean value ) ; <nl> public static native void nativeSetFloat ( long nativeTablePtr , long columnIndex , long rowIndex , float value ) ; <nl> public static native void nativeSetDouble ( long nativeTablePtr , long columnIndex , long rowIndex , double value ) ; <nl> public static native void nativeSetTimestamp ( long nativeTablePtr , long columnIndex , long rowIndex , long dateTimeValue ) ; <nl> public static native void nativeSetString ( long nativeTablePtr , long columnIndex , long rowIndex , String value ) ; <nl> + public static native void nativeSetStringUnique ( long nativeTablePtr , long columnIndex , long rowIndex , String value ) ; <nl> public static native void nativeSetNull ( long nativeTablePtr , long columnIndex , long rowIndex ) ; <nl> public static native void nativeSetByteArray ( long nativePtr , long columnIndex , long rowIndex , byte [ ] data ) ; <nl> public static native void nativeSetLink ( long nativeTablePtr , long columnIndex , long rowIndex , long value ) ;

TEST DIFF:
diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index f87f679 . . 2939fcf 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 73 , 7 + 73 , 6 @ @ public class RealmProxyClassGenerator { 
 imports . add ( " io . realm . internal . RealmObjectProxy " ) ; 
 imports . add ( " io . realm . internal . Row " ) ; 
 imports . add ( " io . realm . internal . Table " ) ; 
 - imports . add ( " io . realm . internal . TableOrView " ) ; 
 imports . add ( " io . realm . internal . SharedRealm " ) ; 
 imports . add ( " io . realm . internal . LinkView " ) ; 
 imports . add ( " io . realm . internal . android . JsonUtils " ) ; 
 @ @ - 715 , 7 + 714 , 7 @ @ public class RealmProxyClassGenerator { 
 / / check before migrating a nullable field containing null value to not - nullable PrimaryKey field for Realm version 0 . 89 + 
 if ( metadata . isPrimaryKey ( field ) ) { 
 writer 
 - . beginControlFlow ( " if ( table . isColumnNullable ( % s ) & & table . findFirstNull ( % s ) ! = TableOrView . NO _ MATCH ) " , 
 + . beginControlFlow ( " if ( table . isColumnNullable ( % s ) & & table . findFirstNull ( % s ) ! = Table . NO _ MATCH ) " , 
 fieldIndexVariableReference ( field ) , fieldIndexVariableReference ( field ) ) 
 . emitStatement ( " throw new IllegalStateException ( \ " Cannot migrate an object with null value in field ' % s ' . " + 
 " Either maintain the same type for primary key field ' % s ' , or remove the object with null value before migration . \ " ) " , 
 @ @ - 863 , 7 + 862 , 7 @ @ public class RealmProxyClassGenerator { 
 if ( Utils . isString ( primaryKeyElement ) ) { 
 writer 
 . emitStatement ( " String value = ( ( % s ) object ) . % s ( ) " , interfaceName , primaryKeyGetter ) 
 - . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) 
 + . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) 
 . beginControlFlow ( " if ( value = = null ) " ) 
 . emitStatement ( " rowIndex = table . findFirstNull ( pkColumnIndex ) " ) 
 . nextControlFlow ( " else " ) 
 @ @ - 872 , 7 + 871 , 7 @ @ public class RealmProxyClassGenerator { 
 } else { 
 writer 
 . emitStatement ( " Number value = ( ( % s ) object ) . % s ( ) " , interfaceName , primaryKeyGetter ) 
 - . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) 
 + . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) 
 . beginControlFlow ( " if ( value = = null ) " ) 
 . emitStatement ( " rowIndex = table . findFirstNull ( pkColumnIndex ) " ) 
 . nextControlFlow ( " else " ) 
 @ @ - 886 , 7 + 885 , 7 @ @ public class RealmProxyClassGenerator { 
 } 
 
 writer 
 - . beginControlFlow ( " if ( rowIndex ! = TableOrView . NO _ MATCH ) " ) 
 + . beginControlFlow ( " if ( rowIndex ! = Table . NO _ MATCH ) " ) 
 . beginControlFlow ( " try " ) 
 . emitStatement ( " objectContext . set ( realm , table . getUncheckedRow ( rowIndex ) , " + 
 " realm . schema . getColumnInfo ( % s . class ) , " + 
 @ @ - 1334 , 7 + 1333 , 7 @ @ public class RealmProxyClassGenerator { 
 if ( Utils . isString ( primaryKeyElement ) ) { 
 writer 
 . emitStatement ( " String primaryKeyValue = ( ( % s ) object ) . % s ( ) " , interfaceName , primaryKeyGetter ) 
 - . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) 
 + . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) 
 . beginControlFlow ( " if ( primaryKeyValue = = null ) " ) 
 . emitStatement ( " rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) " ) 
 . nextControlFlow ( " else " ) 
 @ @ - 1343 , 7 + 1342 , 7 @ @ public class RealmProxyClassGenerator { 
 } else { 
 writer 
 . emitStatement ( " Object primaryKeyValue = ( ( % s ) object ) . % s ( ) " , interfaceName , primaryKeyGetter ) 
 - . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) 
 + . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) 
 . beginControlFlow ( " if ( primaryKeyValue = = null ) " ) 
 . emitStatement ( " rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) " ) 
 . nextControlFlow ( " else " ) 
 @ @ - 1351 , 7 + 1350 , 7 @ @ public class RealmProxyClassGenerator { 
 . endControlFlow ( ) ; 
 } 
 } else { 
 - writer . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) ; 
 + writer . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) ; 
 writer . emitStatement ( " Object primaryKeyValue = ( ( % s ) object ) . % s ( ) " , interfaceName , primaryKeyGetter ) ; 
 writer . beginControlFlow ( " if ( primaryKeyValue ! = null ) " ) ; 
 
 @ @ - 1363 , 7 + 1362 , 7 @ @ public class RealmProxyClassGenerator { 
 writer . endControlFlow ( ) ; 
 } 
 
 - writer . beginControlFlow ( " if ( rowIndex = = TableOrView . NO _ MATCH ) " ) ; 
 + writer . beginControlFlow ( " if ( rowIndex = = Table . NO _ MATCH ) " ) ; 
 if ( Utils . isString ( metadata . getPrimaryKey ( ) ) ) { 
 writer . emitStatement ( " rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) " ) ; 
 } else { 
 @ @ - 1732 , 7 + 1731 , 7 @ @ public class RealmProxyClassGenerator { 
 . beginControlFlow ( " if ( update ) " ) 
 . emitStatement ( " Table table = realm . getTable ( % s . class ) " , qualifiedClassName ) 
 . emitStatement ( " long pkColumnIndex = table . getPrimaryKey ( ) " ) 
 - . emitStatement ( " long rowIndex = TableOrView . NO _ MATCH " ) ; 
 + . emitStatement ( " long rowIndex = Table . NO _ MATCH " ) ; 
 if ( metadata . isNullable ( metadata . getPrimaryKey ( ) ) ) { 
 writer 
 . beginControlFlow ( " if ( json . isNull ( \ " % s \ " ) ) " , metadata . getPrimaryKey ( ) . getSimpleName ( ) ) 
 @ @ - 1749 , 7 + 1748 , 7 @ @ public class RealmProxyClassGenerator { 
 . endControlFlow ( ) ; 
 } 
 writer 
 - . beginControlFlow ( " if ( rowIndex ! = TableOrView . NO _ MATCH ) " ) 
 + . beginControlFlow ( " if ( rowIndex ! = Table . NO _ MATCH ) " ) 
 . emitStatement ( " final BaseRealm . RealmObjectContext objectContext = BaseRealm . objectContext . get ( ) " ) 
 . beginControlFlow ( " try " ) 
 . emitStatement ( " objectContext . set ( realm , table . getUncheckedRow ( rowIndex ) , " + 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 index d67ccc9 . . 09d5c21 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 @ @ - 14 , 7 + 14 , 6 @ @ import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 import io . realm . internal . SharedRealm ; 
 import io . realm . internal . Table ; 
 - import io . realm . internal . TableOrView ; 
 import io . realm . internal . android . JsonUtils ; 
 import io . realm . log . RealmLog ; 
 import java . io . IOException ; 
 @ @ - 650 , 13 + 649 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 if ( update ) { 
 Table table = realm . getTable ( some . test . AllTypes . class ) ; 
 long pkColumnIndex = table . getPrimaryKey ( ) ; 
 - long rowIndex = TableOrView . NO _ MATCH ; 
 + long rowIndex = Table . NO _ MATCH ; 
 if ( json . isNull ( " columnString " ) ) { 
 rowIndex = table . findFirstNull ( pkColumnIndex ) ; 
 } else { 
 rowIndex = table . findFirstString ( pkColumnIndex , json . getString ( " columnString " ) ) ; 
 } 
 - if ( rowIndex ! = TableOrView . NO _ MATCH ) { 
 + if ( rowIndex ! = Table . NO _ MATCH ) { 
 final BaseRealm . RealmObjectContext objectContext = BaseRealm . objectContext . get ( ) ; 
 try { 
 objectContext . set ( realm , table . getUncheckedRow ( rowIndex ) , realm . schema . getColumnInfo ( some . test . AllTypes . class ) , false , Collections . < String > emptyList ( ) ) ; 
 @ @ - 868 , 13 + 867 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 Table table = realm . getTable ( some . test . AllTypes . class ) ; 
 long pkColumnIndex = table . getPrimaryKey ( ) ; 
 String value = ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnString ( ) ; 
 - long rowIndex = TableOrView . NO _ MATCH ; 
 + long rowIndex = Table . NO _ MATCH ; 
 if ( value = = null ) { 
 rowIndex = table . findFirstNull ( pkColumnIndex ) ; 
 } else { 
 rowIndex = table . findFirstString ( pkColumnIndex , value ) ; 
 } 
 - if ( rowIndex ! = TableOrView . NO _ MATCH ) { 
 + if ( rowIndex ! = Table . NO _ MATCH ) { 
 try { 
 objectContext . set ( realm , table . getUncheckedRow ( rowIndex ) , realm . schema . getColumnInfo ( some . test . AllTypes . class ) , false , Collections . < String > emptyList ( ) ) ; 
 realmObject = new io . realm . AllTypesRealmProxy ( ) ; 
 @ @ - 949 , 13 + 948 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 AllTypesColumnInfo columnInfo = ( AllTypesColumnInfo ) realm . schema . getColumnInfo ( some . test . AllTypes . class ) ; 
 long pkColumnIndex = table . getPrimaryKey ( ) ; 
 String primaryKeyValue = ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnString ( ) ; 
 - long rowIndex = TableOrView . NO _ MATCH ; 
 + long rowIndex = Table . NO _ MATCH ; 
 if ( primaryKeyValue = = null ) { 
 rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) ; 
 } else { 
 rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; 
 } 
 - if ( rowIndex = = TableOrView . NO _ MATCH ) { 
 + if ( rowIndex = = Table . NO _ MATCH ) { 
 rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; 
 } else { 
 Table . throwDuplicatePrimaryKeyException ( primaryKeyValue ) ; 
 @ @ - 1012 , 13 + 1011 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 continue ; 
 } 
 String primaryKeyValue = ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnString ( ) ; 
 - long rowIndex = TableOrView . NO _ MATCH ; 
 + long rowIndex = Table . NO _ MATCH ; 
 if ( primaryKeyValue = = null ) { 
 rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) ; 
 } else { 
 rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; 
 } 
 - if ( rowIndex = = TableOrView . NO _ MATCH ) { 
 + if ( rowIndex = = Table . NO _ MATCH ) { 
 rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; 
 } else { 
 Table . throwDuplicatePrimaryKeyException ( primaryKeyValue ) ; 
 @ @ - 1071 , 13 + 1070 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 AllTypesColumnInfo columnInfo = ( AllTypesColumnInfo ) realm . schema . getColumnInfo ( some . test . AllTypes . class ) ; 
 long pkColumnIndex = table . getPrimaryKey ( ) ; 
 String primaryKeyValue = ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnString ( ) ; 
 - long rowIndex = TableOrView . NO _ MATCH ; 
 + long rowIndex = Table . NO _ MATCH ; 
 if ( primaryKeyValue = = null ) { 
 rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) ; 
 } else { 
 rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; 
 } 
 - if ( rowIndex = = TableOrView . NO _ MATCH ) { 
 + if ( rowIndex = = Table . NO _ MATCH ) { 
 rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; 
 } 
 cache . put ( object , rowIndex ) ; 
 @ @ - 1139 , 13 + 1138 , 13 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 continue ; 
 } 
 String primaryKeyValue = ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnString ( ) ; 
 - long rowIndex = TableOrView . NO _ MATCH ; 
 + long rowIndex = Table . NO _ MATCH ; 
 if ( primaryKeyValue = = null ) { 
 rowIndex = Table . nativeFindFirstNull ( tableNativePtr , pkColumnIndex ) ; 
 } else { 
 rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; 
 } 
 - if ( rowIndex = = TableOrView . NO _ MATCH ) { 
 + if ( rowIndex = = Table . NO _ MATCH ) { 
 rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; 
 } 
 cache . put ( object , rowIndex ) ; 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 index 7200c4e . . 7323ad2 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 @ @ - 14 , 7 + 14 , 6 @ @ import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 import io . realm . internal . SharedRealm ; 
 import io . realm . internal . Table ; 
 - import io . realm . internal . TableOrView ; 
 import io . realm . internal . android . JsonUtils ; 
 import io . realm . log . RealmLog ; 
 import java . io . IOException ; 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java 
 index 608868b . . ee1b354 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java 
 @ @ - 14 , 7 + 14 , 6 @ @ import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 import io . realm . internal . SharedRealm ; 
 import io . realm . internal . Table ; 
 - import io . realm . internal . TableOrView ; 
 import io . realm . internal . android . JsonUtils ; 
 import io . realm . log . RealmLog ; 
 import java . io . IOException ; 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 index 3dc59b6 . . a1e7952 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 @ @ - 14 , 7 + 14 , 6 @ @ import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 import io . realm . internal . SharedRealm ; 
 import io . realm . internal . Table ; 
 - import io . realm . internal . TableOrView ; 
 import io . realm . internal . android . JsonUtils ; 
 import io . realm . log . RealmLog ; 
 import java . io . IOException ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java 
 index febc7e8 . . d74833f 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import java . util . Set ; 
 
 import io . realm . annotations . Required ; 
 import io . realm . internal . Table ; 
 - import io . realm . internal . TableOrView ; 
 
 / * * 
 * Class for interacting with the schema for a given RealmObject class . This makes it possible to 
 @ @ - 332 , 7 + 331 , 7 @ @ public final class RealmObjectSchema { 
 * @ return { @ code true } if the field exists , { @ code false } otherwise . 
 * / 
 public boolean hasField ( String fieldName ) { 
 - return table . getColumnIndex ( fieldName ) ! = TableOrView . NO _ MATCH ; 
 + return table . getColumnIndex ( fieldName ) ! = Table . NO _ MATCH ; 
 } 
 
 / * * 
 @ @ - 632 , 13 + 631 , 13 @ @ public final class RealmObjectSchema { 
 } 
 
 private void checkFieldNameIsAvailable ( String fieldName ) { 
 - if ( table . getColumnIndex ( fieldName ) ! = TableOrView . NO _ MATCH ) { 
 + if ( table . getColumnIndex ( fieldName ) ! = Table . NO _ MATCH ) { 
 throw new IllegalArgumentException ( " Field already exists in ' " + getClassName ( ) + " ' : " + fieldName ) ; 
 } 
 } 
 
 private void checkFieldExists ( String fieldName ) { 
 - if ( table . getColumnIndex ( fieldName ) = = TableOrView . NO _ MATCH ) { 
 + if ( table . getColumnIndex ( fieldName ) = = Table . NO _ MATCH ) { 
 throw new IllegalArgumentException ( " Field name doesn ' t exist on object ' " + getClassName ( ) + " ' : " + fieldName ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index d9ee232 . . 281fa7d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 32 , 7 + 32 , 7 @ @ import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 import io . realm . internal . SharedRealm ; 
 import io . realm . internal . SortDescriptor ; 
 - import io . realm . internal . TableOrView ; 
 + import io . realm . internal . Table ; 
 import io . realm . internal . TableQuery ; 
 import io . realm . internal . async . ArgumentsHolder ; 
 import io . realm . internal . async . QueryUpdateTask ; 
 @ @ - 61 , 7 + 61 , 7 @ @ public final class RealmQuery < E extends RealmModel > { 
 private BaseRealm realm ; 
 private Class < E > clazz ; 
 private String className ; 
 - private TableOrView table ; 
 + private Table table ; 
 private RealmObjectSchema schema ; 
 private LinkView linkView ; 
 private TableQuery query ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 9bfe605 . . e65f5eb 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 31 , 7 + 31 , 7 @ @ import io . realm . internal . InvalidRow ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 import io . realm . internal . SortDescriptor ; 
 - import io . realm . internal . TableOrView ; 
 + import io . realm . internal . Table ; 
 import io . realm . internal . Collection ; 
 import io . realm . internal . UncheckedRow ; 
 import rx . Observable ; 
 @ @ - 88 , 7 + 88 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 this . collection = collection ; 
 } 
 
 - TableOrView getTable ( ) { 
 + Table getTable ( ) { 
 return collection . getTable ( ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / LinkView . java b / realm / realm - library / src / main / java / io / realm / internal / LinkView . java 
 index f6718b4 . . 2218a9e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / LinkView . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / LinkView . java 
 @ @ - 113 , 7 + 113 , 7 @ @ public class LinkView implements NativeObject { 
 
 public boolean contains ( long tableRowIndex ) { 
 long index = nativeFind ( nativePtr , tableRowIndex ) ; 
 - return ( index ! = TableOrView . NO _ MATCH ) ; 
 + return ( index ! = Table . NO _ MATCH ) ; 
 } 
 
 public long size ( ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 index ca0a0b1 . . 1a0f628 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 @ @ - 35 , 6 + 35 , 7 @ @ public class Table implements TableOrView , TableSchema , NativeObject { 
 public static final long INFINITE = - 1 ; 
 public static final boolean NULLABLE = true ; 
 public static final boolean NOT _ NULLABLE = false ; 
 + public static final int NO _ MATCH = - 1 ; 
 
 private static final String PRIMARY _ KEY _ TABLE _ NAME = " pk " ; 
 private static final String PRIMARY _ KEY _ CLASS _ COLUMN _ NAME = " pk _ table " ; 
 @ @ - 621 , 7 + 622 , 7 @ @ public class Table implements TableOrView , TableSchema , NativeObject { 
 void checkStringValueIsLegal ( long columnIndex , long rowToUpdate , String value ) { 
 if ( isPrimaryKey ( columnIndex ) ) { 
 long rowIndex = findFirstString ( columnIndex , value ) ; 
 - if ( rowIndex ! = rowToUpdate & & rowIndex ! = TableOrView . NO _ MATCH ) { 
 + if ( rowIndex ! = rowToUpdate & & rowIndex ! = NO _ MATCH ) { 
 throwDuplicatePrimaryKeyException ( value ) ; 
 } 
 } 
 @ @ - 630 , 7 + 631 , 7 @ @ public class Table implements TableOrView , TableSchema , NativeObject { 
 void checkIntValueIsLegal ( long columnIndex , long rowToUpdate , long value ) { 
 if ( isPrimaryKeyColumn ( columnIndex ) ) { 
 long rowIndex = findFirstLong ( columnIndex , value ) ; 
 - if ( rowIndex ! = rowToUpdate & & rowIndex ! = TableOrView . NO _ MATCH ) { 
 + if ( rowIndex ! = rowToUpdate & & rowIndex ! = NO _ MATCH ) { 
 throwDuplicatePrimaryKeyException ( value ) ; 
 } 
 } 
 @ @ - 644 , 7 + 645 , 7 @ @ public class Table implements TableOrView , TableSchema , NativeObject { 
 case STRING : 
 case INTEGER : 
 long rowIndex = findFirstNull ( columnIndex ) ; 
 - if ( rowIndex ! = rowToUpdate & & rowIndex ! = TableOrView . NO _ MATCH ) { 
 + if ( rowIndex ! = rowToUpdate & & rowIndex ! = NO _ MATCH ) { 
 throwDuplicatePrimaryKeyException ( " null " ) ; 
 } 
 break ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableOrView . java b / realm / realm - library / src / main / java / io / realm / internal / TableOrView . java 
 index 58404ee . . a45ad13 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / TableOrView . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / TableOrView . java 
 @ @ - 26 , 8 + 26 , 6 @ @ import io . realm . RealmFieldType ; 
 * / 
 public interface TableOrView { 
 
 - int NO _ MATCH = - 1 ; 
 - 
 void clear ( ) ; 
 
 / * * 
 @ @ - 257 , 7 + 255 , 7 @ @ public interface TableOrView { 
 * 
 * @ param columnIndex the column to search in . 
 * @ param value the value to search for . 
 - * @ return the row index for the first match found or { @ link # NO _ MATCH } . 
 + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . 
 * / 
 long findFirstLong ( long columnIndex , long value ) ; 
 
 @ @ - 266 , 7 + 264 , 7 @ @ public interface TableOrView { 
 * 
 * @ param columnIndex the column to search in . 
 * @ param value the alue to search for . 
 - * @ return the row index for the first match found or { @ link # NO _ MATCH } . 
 + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . 
 * / 
 long findFirstBoolean ( long columnIndex , boolean value ) ; 
 
 @ @ - 275 , 7 + 273 , 7 @ @ public interface TableOrView { 
 * 
 * @ param columnIndex the column to search in . 
 * @ param value the value to search for . 
 - * @ return the row index for the first match found or { @ link # NO _ MATCH } . 
 + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . 
 * / 
 long findFirstFloat ( long columnIndex , float value ) ; 
 
 @ @ - 284 , 7 + 282 , 7 @ @ public interface TableOrView { 
 * 
 * @ param columnIndex the column to search in . 
 * @ param value the value to search for . 
 - * @ return the row index for the first match found or { @ link # NO _ MATCH } . 
 + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . 
 * / 
 long findFirstDouble ( long columnIndex , double value ) ; 
 
 @ @ - 293 , 7 + 291 , 7 @ @ public interface TableOrView { 
 * 
 * @ param columnIndex the column to search in . 
 * @ param value the value to search for . 
 - * @ return the row index for the first match found or { @ link # NO _ MATCH } . 
 + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . 
 * / 
 long findFirstDate ( long columnIndex , Date value ) ; 
 
 @ @ - 302 , 7 + 300 , 7 @ @ public interface TableOrView { 
 * 
 * @ param columnIndex the column to search in . 
 * @ param value the value to search for . 
 - * @ return the row index for the first match found or { @ link # NO _ MATCH } . 
 + * @ return the row index for the first match found or { @ link Table # NO _ MATCH } . 
 * / 
 long findFirstString ( long columnIndex , String value ) ; 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableView . java b / realm / realm - library / src / main / java / io / realm / internal / TableView . java 
 index 3f54675 . . 1a5cd59 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / TableView . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / TableView . java 
 @ @ - 450 , 7 + 450 , 7 @ @ public class TableView implements TableOrView , NativeObject { 
 @ Override 
 public long findFirstDate ( long columnIndex , Date date ) { 
 / / FIXME : waiting for implementation 
 - return NO _ MATCH ; 
 + return Table . NO _ MATCH ; 
 / / return nativeFindFirstDate ( nativePtr , columnIndex , date . getTime ( ) ) ; 
 } 


NEAREST DIFF:
diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 83c2d43 . . 5eff1c6 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 1124 , 15 + 1124 , 11 @ @ public class RealmProxyClassGenerator { 
 } 
 
 writer . beginControlFlow ( " if ( rowIndex = = TableOrView . NO _ MATCH ) " ) ; 
 - writer . emitStatement ( " rowIndex = Table . nativeAddEmptyRow ( tableNativePtr , 1 ) " ) ; 
 if ( Utils . isString ( metadata . getPrimaryKey ( ) ) ) { 
 - writer . beginControlFlow ( " if ( primaryKeyValue ! = null ) " ) ; 
 - writer . emitStatement ( " Table . nativeSetString ( tableNativePtr , pkColumnIndex , rowIndex , ( String ) primaryKeyValue ) " ) ; 
 - writer . endControlFlow ( ) ; 
 + writer . emitStatement ( " rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) " ) ; 
 } else { 
 - writer . beginControlFlow ( " if ( primaryKeyValue ! = null ) " ) ; 
 - writer . emitStatement ( " Table . nativeSetLong ( tableNativePtr , pkColumnIndex , rowIndex , ( ( % s ) object ) . % s ( ) ) " , interfaceName , primaryKeyGetter ) ; 
 - writer . endControlFlow ( ) ; 
 + writer . emitStatement ( " rowIndex = table . addEmptyRowWithPrimaryKey ( ( ( % s ) object ) . % s ( ) , false ) " , 
 + interfaceName , primaryKeyGetter ) ; 
 } 
 
 if ( throwIfPrimaryKeyDuplicate ) { 
 @ @ - 1632 , 6 + 1628 , 7 @ @ public class RealmProxyClassGenerator { 
 writer . emitStatement ( " return obj " ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 + 
 } 
 
 private String columnInfoClassName ( ) { 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 index cca4d4a . . c5c43b8 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 @ @ - 690 , 10 + 690 , 7 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; 
 } 
 if ( rowIndex = = TableOrView . NO _ MATCH ) { 
 - rowIndex = Table . nativeAddEmptyRow ( tableNativePtr , 1 ) ; 
 - if ( primaryKeyValue ! = null ) { 
 - Table . nativeSetString ( tableNativePtr , pkColumnIndex , rowIndex , ( String ) primaryKeyValue ) ; 
 - } 
 + rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; 
 } else { 
 Table . throwDuplicatePrimaryKeyException ( primaryKeyValue ) ; 
 } 
 @ @ - 757 , 10 + 754 , 7 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; 
 } 
 if ( rowIndex = = TableOrView . NO _ MATCH ) { 
 - rowIndex = Table . nativeAddEmptyRow ( tableNativePtr , 1 ) ; 
 - if ( primaryKeyValue ! = null ) { 
 - Table . nativeSetString ( tableNativePtr , pkColumnIndex , rowIndex , ( String ) primaryKeyValue ) ; 
 - } 
 + rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; 
 } else { 
 Table . throwDuplicatePrimaryKeyException ( primaryKeyValue ) ; 
 } 
 @ @ - 820 , 10 + 814 , 7 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; 
 } 
 if ( rowIndex = = TableOrView . NO _ MATCH ) { 
 - rowIndex = Table . nativeAddEmptyRow ( tableNativePtr , 1 ) ; 
 - if ( primaryKeyValue ! = null ) { 
 - Table . nativeSetString ( tableNativePtr , pkColumnIndex , rowIndex , ( String ) primaryKeyValue ) ; 
 - } 
 + rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; 
 } 
 cache . put ( object , rowIndex ) ; 
 Table . nativeSetLong ( tableNativePtr , columnInfo . columnLongIndex , rowIndex , ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnLong ( ) ) ; 
 @ @ - 892 , 10 + 883 , 7 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 rowIndex = Table . nativeFindFirstString ( tableNativePtr , pkColumnIndex , primaryKeyValue ) ; 
 } 
 if ( rowIndex = = TableOrView . NO _ MATCH ) { 
 - rowIndex = Table . nativeAddEmptyRow ( tableNativePtr , 1 ) ; 
 - if ( primaryKeyValue ! = null ) { 
 - Table . nativeSetString ( tableNativePtr , pkColumnIndex , rowIndex , ( String ) primaryKeyValue ) ; 
 - } 
 + rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue , false ) ; 
 } 
 cache . put ( object , rowIndex ) ; 
 Table . nativeSetLong ( tableNativePtr , columnInfo . columnLongIndex , rowIndex , ( ( AllTypesRealmProxyInterface ) object ) . realmGet $ columnLong ( ) ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 index 719d6e5 . . 0f1eb70 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 @ @ - 638 , 6 + 638 , 17 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetLong ( 
 } CATCH _ STD ( ) 
 } 
 
 + JNIEXPORT void JNICALL 
 + Java _ io _ realm _ internal _ Table _ nativeSetLongUnique ( JNIEnv * env , jclass , jlong nativeTablePtr , jlong columnIndex , 
 + jlong rowIndex , jlong value ) 
 + { 
 + if ( ! TBL _ AND _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , rowIndex , type _ Int ) ) 
 + return ; 
 + try { 
 + TBL ( nativeTablePtr ) - > set _ int _ unique ( S ( columnIndex ) , S ( rowIndex ) , value ) ; 
 + } CATCH _ STD ( ) 
 + } 
 + 
 JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetBoolean ( 
 JNIEnv * env , jclass , jlong nativeTablePtr , jlong columnIndex , jlong rowIndex , jboolean value ) 
 { 
 @ @ - 684 , 6 + 695 , 24 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetString ( 
 } CATCH _ STD ( ) 
 } 
 
 + JNIEXPORT void JNICALL 
 + Java _ io _ realm _ internal _ Table _ nativeSetStringUnique ( JNIEnv * env , jclass , jlong nativeTablePtr , jlong columnIndex , 
 + jlong rowIndex , jstring value ) 
 + { 
 + if ( ! TBL _ AND _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , rowIndex , type _ String ) ) 
 + return ; 
 + try { 
 + if ( value = = NULL ) { 
 + if ( ! TBL _ AND _ COL _ NULLABLE ( env , TBL ( nativeTablePtr ) , columnIndex ) ) { 
 + return ; 
 + } 
 + } 
 + JStringAccessor value2 ( env , value ) ; / / throws 
 + / / FIXME : Check if we need to call set _ null _ unique when core support it . 
 + TBL ( nativeTablePtr ) - > set _ string _ unique ( S ( columnIndex ) , S ( rowIndex ) , value2 ) ; 
 + } CATCH _ STD ( ) 
 + } 
 + 
 JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeSetTimestamp ( 
 JNIEnv * env , jclass , jlong nativeTablePtr , jlong columnIndex , jlong rowIndex , jlong timestampValue ) 
 { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 index 8e4dd14 . . b831ef5 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 @ @ - 385 , 9 + 385 , 30 @ @ public class Table implements TableOrView , TableSchema { 
 return nativeAddEmptyRow ( nativePtr , 1 ) ; 
 } 
 
 + / * * 
 + * Add an empty row to the table and set the primary key with the given value . Equivalent to call 
 + * { @ link # addEmptyRowWithPrimaryKey ( Object , boolean ) } with { @ code validation = true } . 
 + * 
 + * @ param primaryKeyValue the primary key value 
 + * @ return the row index . 
 + * / 
 public long addEmptyRowWithPrimaryKey ( Object primaryKeyValue ) { 
 - checkImmutable ( ) ; 
 - checkHasPrimaryKey ( ) ; 
 + return addEmptyRowWithPrimaryKey ( primaryKeyValue , true ) ; 
 + } 
 + 
 + / * * 
 + * Add an empty row to the table and set the primary key with the given value . 
 + * 
 + * @ param primaryKeyValue the primary key value . 
 + * @ param validation set to { @ code false } to skip all validations . This is currently used by bulk insert which 
 + * has its own validations . 
 + * @ return the row index . 
 + * / 
 + public long addEmptyRowWithPrimaryKey ( Object primaryKeyValue , boolean validation ) { 
 + if ( validation ) { 
 + checkImmutable ( ) ; 
 + checkHasPrimaryKey ( ) ; 
 + } 
 
 long primaryKeyColumnIndex = getPrimaryKey ( ) ; 
 RealmFieldType type = getColumnType ( primaryKeyColumnIndex ) ; 
 @ @ - 399 , 11 + 420 , 12 @ @ public class Table implements TableOrView , TableSchema { 
 switch ( type ) { 
 case STRING : 
 case INTEGER : 
 - if ( findFirstNull ( primaryKeyColumnIndex ) ! = NO _ MATCH ) { 
 + if ( validation & & findFirstNull ( primaryKeyColumnIndex ) ! = NO _ MATCH ) { 
 throwDuplicatePrimaryKeyException ( " null " ) ; 
 } 
 rowIndex = nativeAddEmptyRow ( nativePtr , 1 ) ; 
 row = getUncheckedRow ( rowIndex ) ; 
 + / / FIXME : Use core ' s set _ null _ unique when core supports it . 
 row . setNull ( primaryKeyColumnIndex ) ; 
 break ; 
 
 @ @ - 417 , 12 + 439 , 11 @ @ public class Table implements TableOrView , TableSchema { 
 if ( ! ( primaryKeyValue instanceof String ) ) { 
 throw new IllegalArgumentException ( " Primary key value is not a String : " + primaryKeyValue ) ; 
 } 
 - if ( findFirstString ( primaryKeyColumnIndex , ( String ) primaryKeyValue ) ! = NO _ MATCH ) { 
 + if ( validation & & findFirstString ( primaryKeyColumnIndex , ( String ) primaryKeyValue ) ! = NO _ MATCH ) { 
 throwDuplicatePrimaryKeyException ( primaryKeyValue ) ; 
 } 
 rowIndex = nativeAddEmptyRow ( nativePtr , 1 ) ; 
 - row = getUncheckedRow ( rowIndex ) ; 
 - row . setString ( primaryKeyColumnIndex , ( String ) primaryKeyValue ) ; 
 + nativeSetStringUnique ( nativePtr , primaryKeyColumnIndex , rowIndex , ( String ) primaryKeyValue ) ; 
 break ; 
 
 case INTEGER : 
 @ @ - 432 , 12 + 453 , 11 @ @ public class Table implements TableOrView , TableSchema { 
 } catch ( RuntimeException e ) { 
 throw new IllegalArgumentException ( " Primary key value is not a long : " + primaryKeyValue ) ; 
 } 
 - if ( findFirstLong ( primaryKeyColumnIndex , pkValue ) ! = NO _ MATCH ) { 
 + if ( validation & & findFirstLong ( primaryKeyColumnIndex , pkValue ) ! = NO _ MATCH ) { 
 throwDuplicatePrimaryKeyException ( pkValue ) ; 
 } 
 rowIndex = nativeAddEmptyRow ( nativePtr , 1 ) ; 
 - row = getUncheckedRow ( rowIndex ) ; 
 - row . setLong ( primaryKeyColumnIndex , pkValue ) ; 
 + nativeSetLongUnique ( nativePtr , primaryKeyColumnIndex , rowIndex , pkValue ) ; 
 break ; 
 
 default : 
 @ @ - 1315 , 11 + 1335 , 13 @ @ public class Table implements TableOrView , TableSchema { 
 private native long nativeGetLinkTarget ( long nativePtr , long columnIndex ) ; 
 native long nativeGetRowPtr ( long nativePtr , long index ) ; 
 public static native void nativeSetLong ( long nativeTablePtr , long columnIndex , long rowIndex , long value ) ; 
 + public static native void nativeSetLongUnique ( long nativeTablePtr , long columnIndex , long rowIndex , long value ) ; 
 public static native void nativeSetBoolean ( long nativeTablePtr , long columnIndex , long rowIndex , boolean value ) ; 
 public static native void nativeSetFloat ( long nativeTablePtr , long columnIndex , long rowIndex , float value ) ; 
 public static native void nativeSetDouble ( long nativeTablePtr , long columnIndex , long rowIndex , double value ) ; 
 public static native void nativeSetTimestamp ( long nativeTablePtr , long columnIndex , long rowIndex , long dateTimeValue ) ; 
 public static native void nativeSetString ( long nativeTablePtr , long columnIndex , long rowIndex , String value ) ; 
 + public static native void nativeSetStringUnique ( long nativeTablePtr , long columnIndex , long rowIndex , String value ) ; 
 public static native void nativeSetNull ( long nativeTablePtr , long columnIndex , long rowIndex ) ; 
 public static native void nativeSetByteArray ( long nativePtr , long columnIndex , long rowIndex , byte [ ] data ) ; 
 public static native void nativeSetLink ( long nativeTablePtr , long columnIndex , long rowIndex , long value ) ;
