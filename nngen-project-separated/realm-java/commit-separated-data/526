BLEU SCORE: 0.03283637368030199

TEST MSG: Use Results for typed Query . findAll
GENERATED MSG: Adding where ( ) to RealmList

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 566a050 . . 593dc65 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1650 , 7 + 1650 , 8 @ @ public final class RealmQuery < E extends RealmModel > { <nl> if ( isDynamicQuery ( ) ) { <nl> realmResults = ( RealmResults < E > ) RealmResults . createFromDynamicTableOrView ( realm , query . findAll ( ) , className ) ; <nl> } else { <nl> - realmResults = RealmResults . createFromTableOrView ( realm , query . findAll ( ) , clazz ) ; <nl> + / / realmResults = RealmResults . createFromTableOrView ( realm , query . findAll ( ) , clazz ) ; <nl> + realmResults = RealmResults . createFromQuery ( realm , query , clazz , null , null ) ; <nl> } <nl> return realmResults ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 109a222 . . b0d118e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 129 , 15 + 129 , 19 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> this . classSpec = clazz ; <nl> this . query = query ; <nl> <nl> - if ( sortOrder . length ! = fieldNames . length ) { <nl> - throw new IllegalArgumentException ( " Number of field names and sort orders does not match " ) ; <nl> - } <nl> - <nl> - boolean [ ] order = new boolean [ sortOrder . length ] ; <nl> - long [ ] indices = new long [ sortOrder . length ] ; <nl> - for ( int i = 0 ; i < sortOrder . length ; i + + ) { <nl> - order [ i ] = sortOrder [ i ] = = Sort . ASCENDING ; <nl> - indices [ i ] = getColumnIndexForSort ( fieldNames [ i ] ) ; <nl> + boolean [ ] order = null ; <nl> + long [ ] indices = null ; <nl> + <nl> + if ( fieldNames ! = null & & sortOrder ! = null ) { <nl> + order = new boolean [ sortOrder . length ] ; <nl> + indices = new long [ sortOrder . length ] ; <nl> + if ( sortOrder . length ! = fieldNames . length ) { <nl> + throw new IllegalArgumentException ( " Number of field names and sort orders does not match " ) ; <nl> + } <nl> + for ( int i = 0 ; i < sortOrder . length ; i + + ) { <nl> + order [ i ] = sortOrder [ i ] = = Sort . ASCENDING ; <nl> + indices [ i ] = getColumnIndexForSort ( fieldNames [ i ] ) ; <nl> + } <nl> } <nl> <nl> this . nativePtr = nativeCreateResults ( realm . sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , indices , order ) ;
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index 666bd17 . . 3d708b9 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> 0 . 74 . 0 ( ? ? ) <nl> * Adding case sensitive versions of string comparison operators equalTo and notEqualTo <nl> - <nl> + * Adding where ( ) to RealmList to initiate queries <nl> <nl> 0 . 73 . 1 ( 05 Nov 2014 ) <nl> * Fixed a bug that would send infinite notifications in some instances <nl> diff - - git a / realm - jni / src / io _ realm _ internal _ LinkView . cpp b / realm - jni / src / io _ realm _ internal _ LinkView . cpp <nl> index 80e946b . . 3dd3468 100644 <nl> - - - a / realm - jni / src / io _ realm _ internal _ LinkView . cpp <nl> + + + b / realm - jni / src / io _ realm _ internal _ LinkView . cpp <nl> @ @ - 15 , 6 + 15 , 7 @ @ <nl> * / <nl> <nl> # include " io _ realm _ internal _ LinkView . h " <nl> + # include " tablequery . hpp " <nl> # include " util . hpp " <nl> <nl> using namespace tightdb ; <nl> @ @ - 119 , 3 + 120 , 15 @ @ JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ LinkView _ nativeIsEmpty <nl> } CATCH _ STD ( ) <nl> return 0 ; <nl> } <nl> + <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeWhere <nl> + ( JNIEnv * env , jobject , jlong nativeLinkViewPtr ) <nl> + { <nl> + try { <nl> + LinkView * lv = LV ( nativeLinkViewPtr ) ; <nl> + Query query = lv - > get _ origin _ table ( ) . where ( lv ) ; <nl> + TableQuery * queryPtr = new TableQuery ( query ) ; <nl> + return reinterpret _ cast < jlong > ( queryPtr ) ; <nl> + } CATCH _ STD ( ) <nl> + return 0 ; <nl> + } <nl> diff - - git a / realm - jni / src / io _ realm _ internal _ LinkView . h b / realm - jni / src / io _ realm _ internal _ LinkView . h <nl> index f639794 . . 0b5f810 100644 <nl> - - - a / realm - jni / src / io _ realm _ internal _ LinkView . h <nl> + + + b / realm - jni / src / io _ realm _ internal _ LinkView . h <nl> @ @ - 95 , 6 + 95 , 14 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeSize <nl> JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ LinkView _ nativeIsEmpty <nl> ( JNIEnv * , jobject , jlong ) ; <nl> <nl> + / * <nl> + * Class : io _ realm _ internal _ LinkView <nl> + * Method : nativeWhere <nl> + * Signature : ( J ) J <nl> + * / <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeWhere <nl> + ( JNIEnv * , jobject , jlong ) ; <nl> + <nl> # ifdef _ _ cplusplus <nl> } <nl> # endif <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> index 8162400 . . 43ea5c6 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 136 , 6 + 136 , 8 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> * @ see io . realm . RealmQuery <nl> * / <nl> public RealmQuery < E > where ( ) { <nl> + <nl> + <nl> return null ; <nl> } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / internal / LinkView . java b / realm / src / main / java / io / realm / internal / LinkView . java <nl> index 1ffb0ce . . 4b45a04 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / LinkView . java <nl> + + + b / realm / src / main / java / io / realm / internal / LinkView . java <nl> @ @ - 82 , 4 + 82 , 18 @ @ public class LinkView { <nl> return nativeIsEmpty ( nativeLinkViewPtr ) ; <nl> } <nl> private native boolean nativeIsEmpty ( long nativeLinkViewPtr ) ; <nl> + <nl> + public TableQuery where ( ) { <nl> + / / Execute the disposal of abandoned realm objects each time a new realm object is created <nl> + this . context . executeDelayedDisposal ( ) ; <nl> + long nativeQueryPtr = nativeWhere ( nativeLinkViewPtr ) ; <nl> + try { <nl> + return new TableQuery ( this . context , this . parent , nativeQueryPtr ) ; <nl> + } catch ( RuntimeException e ) { <nl> + TableQuery . nativeClose ( nativeQueryPtr ) ; <nl> + throw e ; <nl> + } <nl> + } <nl> + <nl> + protected native long nativeWhere ( long nativeLinkViewPtr ) ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 566a050 . . 593dc65 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1650 , 7 + 1650 , 8 @ @ public final class RealmQuery < E extends RealmModel > { 
 if ( isDynamicQuery ( ) ) { 
 realmResults = ( RealmResults < E > ) RealmResults . createFromDynamicTableOrView ( realm , query . findAll ( ) , className ) ; 
 } else { 
 - realmResults = RealmResults . createFromTableOrView ( realm , query . findAll ( ) , clazz ) ; 
 + / / realmResults = RealmResults . createFromTableOrView ( realm , query . findAll ( ) , clazz ) ; 
 + realmResults = RealmResults . createFromQuery ( realm , query , clazz , null , null ) ; 
 } 
 return realmResults ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 109a222 . . b0d118e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 129 , 15 + 129 , 19 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 this . classSpec = clazz ; 
 this . query = query ; 
 
 - if ( sortOrder . length ! = fieldNames . length ) { 
 - throw new IllegalArgumentException ( " Number of field names and sort orders does not match " ) ; 
 - } 
 - 
 - boolean [ ] order = new boolean [ sortOrder . length ] ; 
 - long [ ] indices = new long [ sortOrder . length ] ; 
 - for ( int i = 0 ; i < sortOrder . length ; i + + ) { 
 - order [ i ] = sortOrder [ i ] = = Sort . ASCENDING ; 
 - indices [ i ] = getColumnIndexForSort ( fieldNames [ i ] ) ; 
 + boolean [ ] order = null ; 
 + long [ ] indices = null ; 
 + 
 + if ( fieldNames ! = null & & sortOrder ! = null ) { 
 + order = new boolean [ sortOrder . length ] ; 
 + indices = new long [ sortOrder . length ] ; 
 + if ( sortOrder . length ! = fieldNames . length ) { 
 + throw new IllegalArgumentException ( " Number of field names and sort orders does not match " ) ; 
 + } 
 + for ( int i = 0 ; i < sortOrder . length ; i + + ) { 
 + order [ i ] = sortOrder [ i ] = = Sort . ASCENDING ; 
 + indices [ i ] = getColumnIndexForSort ( fieldNames [ i ] ) ; 
 + } 
 } 
 
 this . nativePtr = nativeCreateResults ( realm . sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , indices , order ) ;

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index 666bd17 . . 3d708b9 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 0 . 74 . 0 ( ? ? ) 
 * Adding case sensitive versions of string comparison operators equalTo and notEqualTo 
 - 
 + * Adding where ( ) to RealmList to initiate queries 
 
 0 . 73 . 1 ( 05 Nov 2014 ) 
 * Fixed a bug that would send infinite notifications in some instances 
 diff - - git a / realm - jni / src / io _ realm _ internal _ LinkView . cpp b / realm - jni / src / io _ realm _ internal _ LinkView . cpp 
 index 80e946b . . 3dd3468 100644 
 - - - a / realm - jni / src / io _ realm _ internal _ LinkView . cpp 
 + + + b / realm - jni / src / io _ realm _ internal _ LinkView . cpp 
 @ @ - 15 , 6 + 15 , 7 @ @ 
 * / 
 
 # include " io _ realm _ internal _ LinkView . h " 
 + # include " tablequery . hpp " 
 # include " util . hpp " 
 
 using namespace tightdb ; 
 @ @ - 119 , 3 + 120 , 15 @ @ JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ LinkView _ nativeIsEmpty 
 } CATCH _ STD ( ) 
 return 0 ; 
 } 
 + 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeWhere 
 + ( JNIEnv * env , jobject , jlong nativeLinkViewPtr ) 
 + { 
 + try { 
 + LinkView * lv = LV ( nativeLinkViewPtr ) ; 
 + Query query = lv - > get _ origin _ table ( ) . where ( lv ) ; 
 + TableQuery * queryPtr = new TableQuery ( query ) ; 
 + return reinterpret _ cast < jlong > ( queryPtr ) ; 
 + } CATCH _ STD ( ) 
 + return 0 ; 
 + } 
 diff - - git a / realm - jni / src / io _ realm _ internal _ LinkView . h b / realm - jni / src / io _ realm _ internal _ LinkView . h 
 index f639794 . . 0b5f810 100644 
 - - - a / realm - jni / src / io _ realm _ internal _ LinkView . h 
 + + + b / realm - jni / src / io _ realm _ internal _ LinkView . h 
 @ @ - 95 , 6 + 95 , 14 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeSize 
 JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ LinkView _ nativeIsEmpty 
 ( JNIEnv * , jobject , jlong ) ; 
 
 + / * 
 + * Class : io _ realm _ internal _ LinkView 
 + * Method : nativeWhere 
 + * Signature : ( J ) J 
 + * / 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ LinkView _ nativeWhere 
 + ( JNIEnv * , jobject , jlong ) ; 
 + 
 # ifdef _ _ cplusplus 
 } 
 # endif 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 index 8162400 . . 43ea5c6 100644 
 - - - a / realm / src / main / java / io / realm / RealmList . java 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 136 , 6 + 136 , 8 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 * @ see io . realm . RealmQuery 
 * / 
 public RealmQuery < E > where ( ) { 
 + 
 + 
 return null ; 
 } 
 } 
 diff - - git a / realm / src / main / java / io / realm / internal / LinkView . java b / realm / src / main / java / io / realm / internal / LinkView . java 
 index 1ffb0ce . . 4b45a04 100644 
 - - - a / realm / src / main / java / io / realm / internal / LinkView . java 
 + + + b / realm / src / main / java / io / realm / internal / LinkView . java 
 @ @ - 82 , 4 + 82 , 18 @ @ public class LinkView { 
 return nativeIsEmpty ( nativeLinkViewPtr ) ; 
 } 
 private native boolean nativeIsEmpty ( long nativeLinkViewPtr ) ; 
 + 
 + public TableQuery where ( ) { 
 + / / Execute the disposal of abandoned realm objects each time a new realm object is created 
 + this . context . executeDelayedDisposal ( ) ; 
 + long nativeQueryPtr = nativeWhere ( nativeLinkViewPtr ) ; 
 + try { 
 + return new TableQuery ( this . context , this . parent , nativeQueryPtr ) ; 
 + } catch ( RuntimeException e ) { 
 + TableQuery . nativeClose ( nativeQueryPtr ) ; 
 + throw e ; 
 + } 
 + } 
 + 
 + protected native long nativeWhere ( long nativeLinkViewPtr ) ; 
 }
