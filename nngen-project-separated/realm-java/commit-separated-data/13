BLEU SCORE: 1.0

TEST MSG: Fix Gradle cache not working in parallel builds
GENERATED MSG: Fix Gradle cache not working in parallel builds

TEST DIFF (one line): diff - - git a / Jenkinsfile b / Jenkinsfile <nl> index e65e707 . . 800b636 100644 <nl> - - - a / Jenkinsfile <nl> + + + b / Jenkinsfile <nl> @ @ - 59 , 52 + 59 , 56 @ @ try { <nl> " - v $ { env . HOME } / ccache : / tmp / . ccache " + <nl> " - e REALM _ CORE _ DOWNLOAD _ DIR = / tmp / . gradle " + <nl> " - - network container : $ { rosContainer . id } " ) { <nl> - stage ( ' JVM tests ' ) { <nl> - try { <nl> - withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { <nl> - sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } $ { abiFilter } - - stacktrace " <nl> + <nl> + / / Lock required around all usages of Gradle as it isn ' t <nl> + / / able to share its cache between builds . <nl> + lock ( " $ { env . NODE _ NAME } - android " ) { <nl> + <nl> + stage ( ' JVM tests ' ) { <nl> + try { <nl> + withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { <nl> + sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } $ { abiFilter } - - stacktrace " <nl> + } <nl> + } finally { <nl> + storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' <nl> + storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' <nl> + step ( [ $ class : ' LintPublisher ' ] ) <nl> } <nl> - } finally { <nl> - storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' <nl> - storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' <nl> - step ( [ $ class : ' LintPublisher ' ] ) <nl> } <nl> - } <nl> <nl> - stage ( ' Gradle plugin tests ' ) { <nl> - try { <nl> - gradle ( ' gradle - plugin ' , ' check ' ) <nl> - } finally { <nl> - storeJunitResults ' gradle - plugin / build / test - results / test / TEST - * . xml ' <nl> + stage ( ' Gradle plugin tests ' ) { <nl> + try { <nl> + gradle ( ' gradle - plugin ' , ' check ' ) <nl> + } finally { <nl> + storeJunitResults ' gradle - plugin / build / test - results / test / TEST - * . xml ' <nl> + } <nl> } <nl> - } <nl> <nl> - stage ( ' Realm Transformer tests ' ) { <nl> - try { <nl> - gradle ( ' realm - transformer ' , ' check ' ) <nl> - } finally { <nl> - storeJunitResults ' realm - transformer / build / test - results / test / TEST - * . xml ' <nl> + stage ( ' Realm Transformer tests ' ) { <nl> + try { <nl> + gradle ( ' realm - transformer ' , ' check ' ) <nl> + } finally { <nl> + storeJunitResults ' realm - transformer / build / test - results / test / TEST - * . xml ' <nl> + } <nl> } <nl> - } <nl> <nl> - stage ( ' Static code analysis ' ) { <nl> - try { <nl> - gradle ( ' realm ' , " findbugs pmd checkstyle $ { abiFilter } " ) <nl> - } finally { <nl> - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) <nl> - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) <nl> - step ( [ $ class : ' CheckStylePublisher ' , <nl> - canComputeNew : false , <nl> - defaultEncoding : ' ' , <nl> - healthy : ' ' , <nl> - pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , <nl> - unHealthy : ' ' <nl> - ] ) <nl> + stage ( ' Static code analysis ' ) { <nl> + try { <nl> + gradle ( ' realm ' , " findbugs pmd checkstyle $ { abiFilter } " ) <nl> + } finally { <nl> + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) <nl> + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) <nl> + step ( [ $ class : ' CheckStylePublisher ' , <nl> + canComputeNew : false , <nl> + defaultEncoding : ' ' , <nl> + healthy : ' ' , <nl> + pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , <nl> + unHealthy : ' ' <nl> + ] ) <nl> + } <nl> } <nl> - } <nl> <nl> - stage ( ' Run instrumented tests ' ) { <nl> - lock ( " $ { env . NODE _ NAME } - android " ) { <nl> + stage ( ' Run instrumented tests ' ) { <nl> String backgroundPid <nl> try { <nl> backgroundPid = startLogCatCollector ( ) <nl> @ @ - 116 , 20 + 120 , 20 @ @ try { <nl> storeJunitResults ' realm / kotlin - extensions / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' <nl> } <nl> } <nl> - } <nl> <nl> - / / TODO : add support for running monkey on the example apps <nl> + / / TODO : add support for running monkey on the example apps <nl> <nl> - if ( [ ' master ' ] . contains ( env . BRANCH _ NAME ) ) { <nl> - stage ( ' Collect metrics ' ) { <nl> - collectAarMetrics ( ) <nl> + if ( [ ' master ' ] . contains ( env . BRANCH _ NAME ) ) { <nl> + stage ( ' Collect metrics ' ) { <nl> + collectAarMetrics ( ) <nl> + } <nl> } <nl> - } <nl> <nl> - if ( [ ' master ' , ' next - major ' ] . contains ( env . BRANCH _ NAME ) ) { <nl> - stage ( ' Publish to OJO ' ) { <nl> - withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { <nl> - sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " <nl> + if ( [ ' master ' , ' next - major ' ] . contains ( env . BRANCH _ NAME ) ) { <nl> + stage ( ' Publish to OJO ' ) { <nl> + withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { <nl> + sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " <nl> + } <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / Jenkinsfile b / Jenkinsfile <nl> index e65e707 . . 800b636 100644 <nl> - - - a / Jenkinsfile <nl> + + + b / Jenkinsfile <nl> @ @ - 59 , 52 + 59 , 56 @ @ try { <nl> " - v $ { env . HOME } / ccache : / tmp / . ccache " + <nl> " - e REALM _ CORE _ DOWNLOAD _ DIR = / tmp / . gradle " + <nl> " - - network container : $ { rosContainer . id } " ) { <nl> - stage ( ' JVM tests ' ) { <nl> - try { <nl> - withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { <nl> - sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } $ { abiFilter } - - stacktrace " <nl> + <nl> + / / Lock required around all usages of Gradle as it isn ' t <nl> + / / able to share its cache between builds . <nl> + lock ( " $ { env . NODE _ NAME } - android " ) { <nl> + <nl> + stage ( ' JVM tests ' ) { <nl> + try { <nl> + withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { <nl> + sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } $ { abiFilter } - - stacktrace " <nl> + } <nl> + } finally { <nl> + storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' <nl> + storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' <nl> + step ( [ $ class : ' LintPublisher ' ] ) <nl> } <nl> - } finally { <nl> - storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' <nl> - storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' <nl> - step ( [ $ class : ' LintPublisher ' ] ) <nl> } <nl> - } <nl> <nl> - stage ( ' Gradle plugin tests ' ) { <nl> - try { <nl> - gradle ( ' gradle - plugin ' , ' check ' ) <nl> - } finally { <nl> - storeJunitResults ' gradle - plugin / build / test - results / test / TEST - * . xml ' <nl> + stage ( ' Gradle plugin tests ' ) { <nl> + try { <nl> + gradle ( ' gradle - plugin ' , ' check ' ) <nl> + } finally { <nl> + storeJunitResults ' gradle - plugin / build / test - results / test / TEST - * . xml ' <nl> + } <nl> } <nl> - } <nl> <nl> - stage ( ' Realm Transformer tests ' ) { <nl> - try { <nl> - gradle ( ' realm - transformer ' , ' check ' ) <nl> - } finally { <nl> - storeJunitResults ' realm - transformer / build / test - results / test / TEST - * . xml ' <nl> + stage ( ' Realm Transformer tests ' ) { <nl> + try { <nl> + gradle ( ' realm - transformer ' , ' check ' ) <nl> + } finally { <nl> + storeJunitResults ' realm - transformer / build / test - results / test / TEST - * . xml ' <nl> + } <nl> } <nl> - } <nl> <nl> - stage ( ' Static code analysis ' ) { <nl> - try { <nl> - gradle ( ' realm ' , " findbugs pmd checkstyle $ { abiFilter } " ) <nl> - } finally { <nl> - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) <nl> - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) <nl> - step ( [ $ class : ' CheckStylePublisher ' , <nl> - canComputeNew : false , <nl> - defaultEncoding : ' ' , <nl> - healthy : ' ' , <nl> - pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , <nl> - unHealthy : ' ' <nl> - ] ) <nl> + stage ( ' Static code analysis ' ) { <nl> + try { <nl> + gradle ( ' realm ' , " findbugs pmd checkstyle $ { abiFilter } " ) <nl> + } finally { <nl> + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) <nl> + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) <nl> + step ( [ $ class : ' CheckStylePublisher ' , <nl> + canComputeNew : false , <nl> + defaultEncoding : ' ' , <nl> + healthy : ' ' , <nl> + pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , <nl> + unHealthy : ' ' <nl> + ] ) <nl> + } <nl> } <nl> - } <nl> <nl> - stage ( ' Run instrumented tests ' ) { <nl> - lock ( " $ { env . NODE _ NAME } - android " ) { <nl> + stage ( ' Run instrumented tests ' ) { <nl> String backgroundPid <nl> try { <nl> backgroundPid = startLogCatCollector ( ) <nl> @ @ - 116 , 20 + 120 , 20 @ @ try { <nl> storeJunitResults ' realm / kotlin - extensions / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' <nl> } <nl> } <nl> - } <nl> <nl> - / / TODO : add support for running monkey on the example apps <nl> + / / TODO : add support for running monkey on the example apps <nl> <nl> - if ( [ ' master ' ] . contains ( env . BRANCH _ NAME ) ) { <nl> - stage ( ' Collect metrics ' ) { <nl> - collectAarMetrics ( ) <nl> + if ( [ ' master ' ] . contains ( env . BRANCH _ NAME ) ) { <nl> + stage ( ' Collect metrics ' ) { <nl> + collectAarMetrics ( ) <nl> + } <nl> } <nl> - } <nl> <nl> - if ( [ ' master ' , ' next - major ' ] . contains ( env . BRANCH _ NAME ) ) { <nl> - stage ( ' Publish to OJO ' ) { <nl> - withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { <nl> - sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " <nl> + if ( [ ' master ' , ' next - major ' ] . contains ( env . BRANCH _ NAME ) ) { <nl> + stage ( ' Publish to OJO ' ) { <nl> + withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { <nl> + sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " <nl> + } <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / Jenkinsfile b / Jenkinsfile 
 index e65e707 . . 800b636 100644 
 - - - a / Jenkinsfile 
 + + + b / Jenkinsfile 
 @ @ - 59 , 52 + 59 , 56 @ @ try { 
 " - v $ { env . HOME } / ccache : / tmp / . ccache " + 
 " - e REALM _ CORE _ DOWNLOAD _ DIR = / tmp / . gradle " + 
 " - - network container : $ { rosContainer . id } " ) { 
 - stage ( ' JVM tests ' ) { 
 - try { 
 - withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { 
 - sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } $ { abiFilter } - - stacktrace " 
 + 
 + / / Lock required around all usages of Gradle as it isn ' t 
 + / / able to share its cache between builds . 
 + lock ( " $ { env . NODE _ NAME } - android " ) { 
 + 
 + stage ( ' JVM tests ' ) { 
 + try { 
 + withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { 
 + sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } $ { abiFilter } - - stacktrace " 
 + } 
 + } finally { 
 + storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' 
 + storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' 
 + step ( [ $ class : ' LintPublisher ' ] ) 
 } 
 - } finally { 
 - storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' 
 - storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' 
 - step ( [ $ class : ' LintPublisher ' ] ) 
 } 
 - } 
 
 - stage ( ' Gradle plugin tests ' ) { 
 - try { 
 - gradle ( ' gradle - plugin ' , ' check ' ) 
 - } finally { 
 - storeJunitResults ' gradle - plugin / build / test - results / test / TEST - * . xml ' 
 + stage ( ' Gradle plugin tests ' ) { 
 + try { 
 + gradle ( ' gradle - plugin ' , ' check ' ) 
 + } finally { 
 + storeJunitResults ' gradle - plugin / build / test - results / test / TEST - * . xml ' 
 + } 
 } 
 - } 
 
 - stage ( ' Realm Transformer tests ' ) { 
 - try { 
 - gradle ( ' realm - transformer ' , ' check ' ) 
 - } finally { 
 - storeJunitResults ' realm - transformer / build / test - results / test / TEST - * . xml ' 
 + stage ( ' Realm Transformer tests ' ) { 
 + try { 
 + gradle ( ' realm - transformer ' , ' check ' ) 
 + } finally { 
 + storeJunitResults ' realm - transformer / build / test - results / test / TEST - * . xml ' 
 + } 
 } 
 - } 
 
 - stage ( ' Static code analysis ' ) { 
 - try { 
 - gradle ( ' realm ' , " findbugs pmd checkstyle $ { abiFilter } " ) 
 - } finally { 
 - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) 
 - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) 
 - step ( [ $ class : ' CheckStylePublisher ' , 
 - canComputeNew : false , 
 - defaultEncoding : ' ' , 
 - healthy : ' ' , 
 - pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , 
 - unHealthy : ' ' 
 - ] ) 
 + stage ( ' Static code analysis ' ) { 
 + try { 
 + gradle ( ' realm ' , " findbugs pmd checkstyle $ { abiFilter } " ) 
 + } finally { 
 + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) 
 + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) 
 + step ( [ $ class : ' CheckStylePublisher ' , 
 + canComputeNew : false , 
 + defaultEncoding : ' ' , 
 + healthy : ' ' , 
 + pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , 
 + unHealthy : ' ' 
 + ] ) 
 + } 
 } 
 - } 
 
 - stage ( ' Run instrumented tests ' ) { 
 - lock ( " $ { env . NODE _ NAME } - android " ) { 
 + stage ( ' Run instrumented tests ' ) { 
 String backgroundPid 
 try { 
 backgroundPid = startLogCatCollector ( ) 
 @ @ - 116 , 20 + 120 , 20 @ @ try { 
 storeJunitResults ' realm / kotlin - extensions / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' 
 } 
 } 
 - } 
 
 - / / TODO : add support for running monkey on the example apps 
 + / / TODO : add support for running monkey on the example apps 
 
 - if ( [ ' master ' ] . contains ( env . BRANCH _ NAME ) ) { 
 - stage ( ' Collect metrics ' ) { 
 - collectAarMetrics ( ) 
 + if ( [ ' master ' ] . contains ( env . BRANCH _ NAME ) ) { 
 + stage ( ' Collect metrics ' ) { 
 + collectAarMetrics ( ) 
 + } 
 } 
 - } 
 
 - if ( [ ' master ' , ' next - major ' ] . contains ( env . BRANCH _ NAME ) ) { 
 - stage ( ' Publish to OJO ' ) { 
 - withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { 
 - sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " 
 + if ( [ ' master ' , ' next - major ' ] . contains ( env . BRANCH _ NAME ) ) { 
 + stage ( ' Publish to OJO ' ) { 
 + withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { 
 + sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " 
 + } 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / Jenkinsfile b / Jenkinsfile 
 index e65e707 . . 800b636 100644 
 - - - a / Jenkinsfile 
 + + + b / Jenkinsfile 
 @ @ - 59 , 52 + 59 , 56 @ @ try { 
 " - v $ { env . HOME } / ccache : / tmp / . ccache " + 
 " - e REALM _ CORE _ DOWNLOAD _ DIR = / tmp / . gradle " + 
 " - - network container : $ { rosContainer . id } " ) { 
 - stage ( ' JVM tests ' ) { 
 - try { 
 - withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { 
 - sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } $ { abiFilter } - - stacktrace " 
 + 
 + / / Lock required around all usages of Gradle as it isn ' t 
 + / / able to share its cache between builds . 
 + lock ( " $ { env . NODE _ NAME } - android " ) { 
 + 
 + stage ( ' JVM tests ' ) { 
 + try { 
 + withCredentials ( [ [ $ class : ' FileBinding ' , credentialsId : ' c0cc8f9e - c3f1 - 4e22 - b22f - 6568392e26ae ' , variable : ' S3CFG ' ] ] ) { 
 + sh " chmod + x gradlew & & . / gradlew assemble check javadoc - Ps3cfg = $ { env . S3CFG } $ { abiFilter } - - stacktrace " 
 + } 
 + } finally { 
 + storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' 
 + storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' 
 + step ( [ $ class : ' LintPublisher ' ] ) 
 } 
 - } finally { 
 - storeJunitResults ' realm / realm - annotations - processor / build / test - results / test / TEST - * . xml ' 
 - storeJunitResults ' examples / unitTestExample / build / test - results / * * / TEST - * . xml ' 
 - step ( [ $ class : ' LintPublisher ' ] ) 
 } 
 - } 
 
 - stage ( ' Gradle plugin tests ' ) { 
 - try { 
 - gradle ( ' gradle - plugin ' , ' check ' ) 
 - } finally { 
 - storeJunitResults ' gradle - plugin / build / test - results / test / TEST - * . xml ' 
 + stage ( ' Gradle plugin tests ' ) { 
 + try { 
 + gradle ( ' gradle - plugin ' , ' check ' ) 
 + } finally { 
 + storeJunitResults ' gradle - plugin / build / test - results / test / TEST - * . xml ' 
 + } 
 } 
 - } 
 
 - stage ( ' Realm Transformer tests ' ) { 
 - try { 
 - gradle ( ' realm - transformer ' , ' check ' ) 
 - } finally { 
 - storeJunitResults ' realm - transformer / build / test - results / test / TEST - * . xml ' 
 + stage ( ' Realm Transformer tests ' ) { 
 + try { 
 + gradle ( ' realm - transformer ' , ' check ' ) 
 + } finally { 
 + storeJunitResults ' realm - transformer / build / test - results / test / TEST - * . xml ' 
 + } 
 } 
 - } 
 
 - stage ( ' Static code analysis ' ) { 
 - try { 
 - gradle ( ' realm ' , " findbugs pmd checkstyle $ { abiFilter } " ) 
 - } finally { 
 - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) 
 - publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) 
 - step ( [ $ class : ' CheckStylePublisher ' , 
 - canComputeNew : false , 
 - defaultEncoding : ' ' , 
 - healthy : ' ' , 
 - pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , 
 - unHealthy : ' ' 
 - ] ) 
 + stage ( ' Static code analysis ' ) { 
 + try { 
 + gradle ( ' realm ' , " findbugs pmd checkstyle $ { abiFilter } " ) 
 + } finally { 
 + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / findbugs ' , reportFiles : ' findbugs - output . html ' , reportName : ' Findbugs issues ' ] ) 
 + publishHTML ( target : [ allowMissing : false , alwaysLinkToLastBuild : false , keepAll : true , reportDir : ' realm / realm - library / build / reports / pmd ' , reportFiles : ' pmd . html ' , reportName : ' PMD Issues ' ] ) 
 + step ( [ $ class : ' CheckStylePublisher ' , 
 + canComputeNew : false , 
 + defaultEncoding : ' ' , 
 + healthy : ' ' , 
 + pattern : ' realm / realm - library / build / reports / checkstyle / checkstyle . xml ' , 
 + unHealthy : ' ' 
 + ] ) 
 + } 
 } 
 - } 
 
 - stage ( ' Run instrumented tests ' ) { 
 - lock ( " $ { env . NODE _ NAME } - android " ) { 
 + stage ( ' Run instrumented tests ' ) { 
 String backgroundPid 
 try { 
 backgroundPid = startLogCatCollector ( ) 
 @ @ - 116 , 20 + 120 , 20 @ @ try { 
 storeJunitResults ' realm / kotlin - extensions / build / outputs / androidTest - results / connected / * * / TEST - * . xml ' 
 } 
 } 
 - } 
 
 - / / TODO : add support for running monkey on the example apps 
 + / / TODO : add support for running monkey on the example apps 
 
 - if ( [ ' master ' ] . contains ( env . BRANCH _ NAME ) ) { 
 - stage ( ' Collect metrics ' ) { 
 - collectAarMetrics ( ) 
 + if ( [ ' master ' ] . contains ( env . BRANCH _ NAME ) ) { 
 + stage ( ' Collect metrics ' ) { 
 + collectAarMetrics ( ) 
 + } 
 } 
 - } 
 
 - if ( [ ' master ' , ' next - major ' ] . contains ( env . BRANCH _ NAME ) ) { 
 - stage ( ' Publish to OJO ' ) { 
 - withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { 
 - sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " 
 + if ( [ ' master ' , ' next - major ' ] . contains ( env . BRANCH _ NAME ) ) { 
 + stage ( ' Publish to OJO ' ) { 
 + withCredentials ( [ [ $ class : ' UsernamePasswordMultiBinding ' , credentialsId : ' bintray ' , passwordVariable : ' BINTRAY _ KEY ' , usernameVariable : ' BINTRAY _ USER ' ] ] ) { 
 + sh " chmod + x gradlew & & . / gradlew - PbintrayUser = $ { env . BINTRAY _ USER } - PbintrayKey = $ { env . BINTRAY _ KEY } assemble ojoUpload - - stacktrace " 
 + } 
 } 
 } 
 }
