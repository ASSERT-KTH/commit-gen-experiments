BLEU SCORE: 0.027611988917697356

TEST MSG: Fix LinkView based RealmResults ' s tests behaviour
GENERATED MSG: Don â€™ t send messages to self

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> index 357aa84 . . 5664434 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import java . util . concurrent . atomic . AtomicInteger ; <nl> import io . realm . entities . AllJavaTypes ; <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . AnnotationIndexTypes ; <nl> - import io . realm . entities . CyclicType ; <nl> import io . realm . entities . DefaultValueOfField ; <nl> import io . realm . entities . Dog ; <nl> import io . realm . entities . NonLatinFieldNames ; <nl> @ @ - 45 , 13 + 44 , 11 @ @ import io . realm . entities . Owner ; <nl> import io . realm . entities . RandomPrimaryKey ; <nl> import io . realm . entities . StringOnly ; <nl> import io . realm . internal . Collection ; <nl> - import io . realm . internal . Table ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . rule . RunTestInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 685 , 97 + 682 , 150 @ @ public class RealmResultsTests extends CollectionTests { <nl> } <nl> } <nl> <nl> - private RealmResults < Dog > populateRealmResultsOnDeletedLinkView ( ) { <nl> + private RealmResults < Dog > populateRealmResultsOnLinkView ( Realm realm ) { <nl> realm . beginTransaction ( ) ; <nl> Owner owner = realm . createObject ( Owner . class ) ; <nl> for ( int i = 0 ; i < 10 ; i + + ) { <nl> Dog dog = new Dog ( ) ; <nl> dog . setName ( " name _ " + i ) ; <nl> dog . setOwner ( owner ) ; <nl> + dog . setAge ( i ) ; <nl> + dog . setBirthday ( new Date ( i ) ) ; <nl> owner . getDogs ( ) . add ( dog ) ; <nl> } <nl> realm . commitTransaction ( ) ; <nl> <nl> <nl> - RealmResults < Dog > dogs = owner . getDogs ( ) . where ( ) . equalTo ( Dog . FIELD _ NAME , " name _ 0 " ) . findAll ( ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - owner . deleteFromRealm ( ) ; <nl> - realm . commitTransaction ( ) ; <nl> - return dogs ; <nl> + return owner . getDogs ( ) . where ( ) . lessThan ( Dog . FIELD _ AGE , 5 ) . findAll ( ) ; <nl> } <nl> <nl> - / / It will still be treated as valid table view in core , just always be empty . <nl> + / / If a RealmResults is built on a link view , when the link view is deleted on the same thread , within the same <nl> + / / event loop , the RealmResults stays without changes since it is detached until the next event loop . In the next <nl> + / / event loop , the results will be empty because of the parent link view is deleted . <nl> + / / 1 . Create results from link view . <nl> + / / 2 . Delete the parent link view by a local transaction . <nl> + / / 3 . Within the same event loop , the results stays the same . <nl> + / / 4 . The results change listener called , the results becomes empty . <nl> @ Test <nl> - public void isValid _ resultsBuiltOnDeletedLinkView ( ) { <nl> - assertEquals ( true , populateRealmResultsOnDeletedLinkView ( ) . isValid ( ) ) ; <nl> - } <nl> + @ RunTestInLooperThread <nl> + public void accessors _ resultsBuiltOnDeletedLinkView _ deletionAsALocalCommit ( ) { <nl> + Realm realm = looperThread . realm ; <nl> + / / Step 1 <nl> + RealmResults < Dog > dogs = populateRealmResultsOnLinkView ( realm ) ; <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> + dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> + @ Override <nl> + public void onChange ( RealmResults < Dog > dogs ) { <nl> + / / Step 4 . <nl> + / / The results is still valid , but empty . <nl> + assertEquals ( true , dogs . isValid ( ) ) ; <nl> + assertEquals ( true , dogs . isEmpty ( ) ) ; <nl> + assertEquals ( 0 , dogs . size ( ) ) ; <nl> + try { <nl> + dogs . first ( ) ; <nl> + fail ( ) ; <nl> + } catch ( IndexOutOfBoundsException ignored ) { <nl> + } <nl> <nl> - @ Test <nl> - public void size _ resultsBuiltOnDeletedLinkView ( ) { <nl> - assertEquals ( 0 , populateRealmResultsOnDeletedLinkView ( ) . size ( ) ) ; <nl> - } <nl> + assertEquals ( 0 , dogs . sum ( Dog . FIELD _ AGE ) . intValue ( ) ) ; <nl> + assertEquals ( 0f , dogs . sum ( Dog . FIELD _ HEIGHT ) . floatValue ( ) , 0f ) ; <nl> + assertEquals ( 0d , dogs . sum ( Dog . FIELD _ WEIGHT ) . doubleValue ( ) , 0d ) ; <nl> + assertEquals ( 0d , dogs . average ( Dog . FIELD _ AGE ) , 0d ) ; <nl> + assertEquals ( 0d , dogs . average ( Dog . FIELD _ HEIGHT ) , 0d ) ; <nl> + assertEquals ( 0d , dogs . average ( Dog . FIELD _ WEIGHT ) , 0d ) ; <nl> + assertEquals ( null , dogs . min ( Dog . FIELD _ AGE ) ) ; <nl> + assertEquals ( null , dogs . max ( Dog . FIELD _ AGE ) ) ; <nl> + assertEquals ( null , dogs . minDate ( Dog . FIELD _ BIRTHDAY ) ) ; <nl> + assertEquals ( null , dogs . maxDate ( Dog . FIELD _ BIRTHDAY ) ) ; <nl> <nl> - @ Test <nl> - public void first _ resultsBuiltOnDeletedLinkView ( ) { <nl> - try { <nl> - populateRealmResultsOnDeletedLinkView ( ) . first ( ) ; <nl> - } catch ( IndexOutOfBoundsException ignored ) { <nl> - } <nl> - } <nl> + / / FIXME : Enable this when https : / / github . com / realm / realm - core / issues / 2378 fixed . <nl> + / / assertEquals ( 0 , dogs . where ( ) . findAll ( ) . size ( ) ) ; <nl> <nl> - @ Test <nl> - public void last _ resultsBuiltOnDeletedLinkView ( ) { <nl> - try { <nl> - populateRealmResultsOnDeletedLinkView ( ) . last ( ) ; <nl> - } catch ( IndexOutOfBoundsException ignored ) { <nl> - } <nl> - } <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> <nl> - @ Test <nl> - public void sum _ resultsBuiltOnDeletedLinkView ( ) { <nl> - RealmResults < Dog > dogs = populateRealmResultsOnDeletedLinkView ( ) ; <nl> - assertEquals ( 0 , dogs . sum ( Dog . FIELD _ AGE ) . intValue ( ) ) ; <nl> - assertEquals ( 0f , dogs . sum ( Dog . FIELD _ HEIGHT ) . floatValue ( ) , 0f ) ; <nl> - assertEquals ( 0d , dogs . sum ( Dog . FIELD _ WEIGHT ) . doubleValue ( ) , 0d ) ; <nl> - } <nl> + / / Step 2 <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . where ( Owner . class ) . findAll ( ) . deleteAllFromRealm ( ) ; <nl> + } <nl> + } ) ; <nl> <nl> - @ Test <nl> - public void average _ resultsBuiltOnDeletedLinkView ( ) { <nl> - RealmResults < Dog > dogs = populateRealmResultsOnDeletedLinkView ( ) ; <nl> - assertEquals ( 0d , dogs . average ( Dog . FIELD _ AGE ) , 0d ) ; <nl> - assertEquals ( 0d , dogs . average ( Dog . FIELD _ HEIGHT ) , 0d ) ; <nl> - assertEquals ( 0d , dogs . average ( Dog . FIELD _ WEIGHT ) , 0d ) ; <nl> + / / Step 3 <nl> + assertEquals ( true , dogs . isValid ( ) ) ; <nl> + assertEquals ( 5 , dogs . size ( ) ) ; <nl> + assertEquals ( " name _ 0 " , dogs . first ( ) . getName ( ) ) ; <nl> + assertEquals ( " name _ 4 " , dogs . last ( ) . getName ( ) ) ; <nl> + assertEquals ( 0 , dogs . min ( Dog . FIELD _ AGE ) . intValue ( ) ) ; <nl> + assertEquals ( 4 , dogs . max ( Dog . FIELD _ AGE ) . intValue ( ) ) ; <nl> + assertEquals ( new Date ( 0 ) , dogs . minDate ( Dog . FIELD _ BIRTHDAY ) ) ; <nl> + assertEquals ( new Date ( 4 ) , dogs . maxDate ( Dog . FIELD _ BIRTHDAY ) ) ; <nl> + / / The link view has been deleted . <nl> + assertEquals ( 0 , dogs . where ( ) . findAll ( ) . size ( ) ) ; <nl> } <nl> <nl> + / / If a RealmResults is built on a link view , when the link view is deleted on a remote thread , within the same <nl> + / / event loop , the RealmResults stays without changes since the Realm version doesn ' t change . In the next <nl> + / / event loop , the results will be empty because of the parent link view is deleted . <nl> + / / 1 . Create results from link view . <nl> + / / 2 . Delete the parent link view by a remote transaction . <nl> + / / 3 . Within the same event loop , the results stays the same . <nl> + / / 4 . The results change listener called , the results becomes empty . <nl> @ Test <nl> - public void where _ resultsBuiltOnDeletedLinkView ( ) { <nl> - OrderedRealmCollection < CyclicType > results = populateCollectionOnDeletedLinkView ( realm , ManagedCollection . REALMRESULTS ) ; <nl> - assertEquals ( 0 , results . where ( ) . findAll ( ) . size ( ) ) ; <nl> - } <nl> + @ RunTestInLooperThread <nl> + public void accessors _ resultsBuiltOnDeletedLinkView _ deletionAsARemoteCommit ( ) { <nl> + / / Step 1 <nl> + Realm realm = looperThread . realm ; <nl> + RealmResults < Dog > dogs = populateRealmResultsOnLinkView ( realm ) ; <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> + dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> + @ Override <nl> + public void onChange ( RealmResults < Dog > dogs ) { <nl> + / / Step 4 <nl> + / / The results is still valid , but empty . <nl> + assertEquals ( true , dogs . isValid ( ) ) ; <nl> + assertEquals ( true , dogs . isEmpty ( ) ) ; <nl> + assertEquals ( 0 , dogs . size ( ) ) ; <nl> + try { <nl> + dogs . first ( ) ; <nl> + fail ( ) ; <nl> + } catch ( IndexOutOfBoundsException ignored ) { <nl> + } <nl> <nl> - @ Test <nl> - public void min _ resultsBuiltOnDeletedLinkView ( ) { <nl> - OrderedRealmCollection < CyclicType > results = populateCollectionOnDeletedLinkView ( realm , ManagedCollection . REALMRESULTS ) ; <nl> - assertNull ( results . min ( CyclicType . FIELD _ ID ) ) ; <nl> - } <nl> + assertEquals ( 0 , dogs . sum ( Dog . FIELD _ AGE ) . intValue ( ) ) ; <nl> + assertEquals ( 0f , dogs . sum ( Dog . FIELD _ HEIGHT ) . floatValue ( ) , 0f ) ; <nl> + assertEquals ( 0d , dogs . sum ( Dog . FIELD _ WEIGHT ) . doubleValue ( ) , 0d ) ; <nl> + assertEquals ( 0d , dogs . average ( Dog . FIELD _ AGE ) , 0d ) ; <nl> + assertEquals ( 0d , dogs . average ( Dog . FIELD _ HEIGHT ) , 0d ) ; <nl> + assertEquals ( 0d , dogs . average ( Dog . FIELD _ WEIGHT ) , 0d ) ; <nl> + assertEquals ( null , dogs . min ( Dog . FIELD _ AGE ) ) ; <nl> + assertEquals ( null , dogs . max ( Dog . FIELD _ AGE ) ) ; <nl> + assertEquals ( null , dogs . minDate ( Dog . FIELD _ BIRTHDAY ) ) ; <nl> + assertEquals ( null , dogs . maxDate ( Dog . FIELD _ BIRTHDAY ) ) ; <nl> <nl> - @ Test <nl> - public void min _ dateResultsBuiltOnDeletedLinkView ( ) { <nl> - OrderedRealmCollection < CyclicType > results = populateCollectionOnDeletedLinkView ( realm , ManagedCollection . REALMRESULTS ) ; <nl> - assertEquals ( null , results . minDate ( CyclicType . FIELD _ DATE ) ) ; <nl> - } <nl> + / / FIXME : Enable this when https : / / github . com / realm / realm - core / issues / 2378 fixed . <nl> + / / assertEquals ( 0 , dogs . where ( ) . findAll ( ) . size ( ) ) ; <nl> <nl> - @ Test <nl> - public void max _ dateResultsBuiltOnDeletedLinkView ( ) { <nl> - OrderedRealmCollection < CyclicType > results = populateCollectionOnDeletedLinkView ( realm , ManagedCollection . REALMRESULTS ) ; <nl> - assertEquals ( null , results . maxDate ( CyclicType . FIELD _ DATE ) ) ; <nl> - } <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> <nl> - @ Test <nl> - public void max _ resultsBuiltOnDeletedLinkView ( ) { <nl> - OrderedRealmCollection < CyclicType > results = populateCollectionOnDeletedLinkView ( realm , ManagedCollection . REALMRESULTS ) ; <nl> - assertNull ( results . max ( CyclicType . FIELD _ ID ) ) ; <nl> + <nl> + / / Step 2 <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . where ( Owner . class ) . findAll ( ) . deleteAllFromRealm ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + / / Step 3 <nl> + assertEquals ( true , dogs . isValid ( ) ) ; <nl> + assertEquals ( 5 , dogs . size ( ) ) ; <nl> + / / The link view still exists <nl> + assertEquals ( 5 , dogs . where ( ) . findAll ( ) . size ( ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 482d48b . . 7b808ae 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 15 , 200 + 15 , 129 @ @ <nl> * / <nl> package io . realm ; <nl> <nl> - import android . os . Handler ; <nl> - import android . os . HandlerThread ; <nl> import android . os . Looper ; <nl> import android . test . AndroidTestCase ; <nl> <nl> - import java . util . Queue ; <nl> - import java . util . concurrent . ConcurrentLinkedQueue ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . concurrent . Callable ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Executors ; <nl> + import java . util . concurrent . Future ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + import java . util . concurrent . TimeoutException ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import io . realm . entities . Dog ; <nl> <nl> public class NotificationsTest extends AndroidTestCase { <nl> - public void testFailureOnNonLooperThread ( ) { <nl> - Thread thread = new Thread ( ) { <nl> + <nl> + public void testFailureOnNonLooperThread ( ) throws InterruptedException , ExecutionException { <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> + public Boolean call ( ) throws Exception { <nl> try { <nl> @ SuppressWarnings ( " UnusedDeclaration " ) Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - fail ( " The Realm instantiations should have thrown an exception " ) ; <nl> - } catch ( IllegalStateException ignored ) { } <nl> - } <nl> - } ; <nl> - thread . start ( ) ; <nl> - try { <nl> - thread . join ( ) ; <nl> - } catch ( InterruptedException e ) { <nl> - fail ( ) ; <nl> - } <nl> - } <nl> - <nl> - public void testNotifications ( ) { <nl> - final AtomicBoolean changed = new AtomicBoolean ( false ) ; <nl> - <nl> - Thread listenerThread = new Thread ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - Looper . prepare ( ) ; <nl> - Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - realm . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - changed . set ( true ) ; <nl> - Looper . myLooper ( ) . quit ( ) ; <nl> - } <nl> - } ) ; <nl> - Looper . loop ( ) ; <nl> - } <nl> - } ; <nl> - listenerThread . start ( ) ; <nl> - <nl> - Thread writerThread = new Thread ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - Realm realm = Realm . getInstance ( getContext ( ) , false ) ; <nl> - realm . beginTransaction ( ) ; <nl> - Dog dog = realm . createObject ( Dog . class ) ; <nl> - dog . setName ( " Rex " ) ; <nl> - realm . commitTransaction ( ) ; <nl> + return false ; <nl> + } catch ( IllegalStateException ignored ) { <nl> + return true ; <nl> + } <nl> } <nl> - } ; <nl> - writerThread . start ( ) ; <nl> - <nl> - try { <nl> - writerThread . join ( ) ; <nl> - listenerThread . join ( 2000 ) ; <nl> - } catch ( InterruptedException e ) { <nl> - fail ( ) ; <nl> - } <nl> + } ) ; <nl> <nl> - assertEquals ( true , changed . get ( ) ) ; <nl> + Boolean result = future . get ( ) ; <nl> + assertTrue ( result ) ; <nl> } <nl> <nl> - public void testNotificationsPlusSelfReceive ( ) { <nl> - final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> - final Queue < Handler > handlers = new ConcurrentLinkedQueue < Handler > ( ) ; <nl> - <nl> - Thread listenerThread = new Thread ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - Looper . prepare ( ) ; <nl> - Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - realm . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - counter . incrementAndGet ( ) ; <nl> - Looper . myLooper ( ) . quit ( ) ; <nl> - } <nl> - } ) ; <nl> - Looper . loop ( ) ; <nl> - } <nl> - } ; <nl> - listenerThread . start ( ) ; <nl> + public void testNotifications ( ) throws InterruptedException , ExecutionException { <nl> + ExecutorService executorService = Executors . newFixedThreadPool ( 2 ) ; <nl> <nl> - Thread writerThread = new Thread ( ) { <nl> + final AtomicInteger changed = new AtomicInteger ( 0 ) ; <nl> <nl> + List < Callable < Void > > callables = new ArrayList < Callable < Void > > ( ) ; <nl> + callables . add ( new Callable < Void > ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> + public Void call ( ) throws Exception { <nl> Looper . prepare ( ) ; <nl> - Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; / / This does not sent a message to itself [ 0 ] <nl> realm . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> - counter . incrementAndGet ( ) ; <nl> + changed . incrementAndGet ( ) ; <nl> } <nl> } ) ; <nl> - Handler handler = new Handler ( ) ; <nl> - handlers . add ( handler ) ; <nl> Looper . loop ( ) ; <nl> + return null ; <nl> } <nl> - } ; <nl> - writerThread . start ( ) ; <nl> - while ( handlers . isEmpty ( ) ) { <nl> - try { <nl> - Thread . sleep ( 10 ) ; <nl> - } catch ( InterruptedException e ) { <nl> - fail ( ) ; <nl> - } <nl> - } <nl> - Handler handler = handlers . poll ( ) ; <nl> - handler . post ( new Runnable ( ) { <nl> + } ) ; <nl> + callables . add ( new Callable < Void > ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> - Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + public Void call ( ) throws Exception { <nl> + Realm realm = Realm . getInstance ( getContext ( ) , false ) ; / / This will notify the other thread [ 1 ] <nl> realm . beginTransaction ( ) ; <nl> Dog dog = realm . createObject ( Dog . class ) ; <nl> dog . setName ( " Rex " ) ; <nl> - realm . commitTransaction ( ) ; <nl> - Looper . myLooper ( ) . quit ( ) ; <nl> + realm . commitTransaction ( ) ; / / This will notify the other thread [ 2 ] <nl> + return null ; <nl> } <nl> } ) ; <nl> <nl> - try { <nl> - writerThread . join ( ) ; <nl> - listenerThread . join ( 2000 ) ; <nl> - } catch ( InterruptedException e ) { <nl> - fail ( ) ; <nl> - } <nl> + executorService . invokeAll ( callables , 2 , TimeUnit . SECONDS ) ; <nl> <nl> - assertEquals ( 2 , counter . get ( ) ) ; <nl> + assertEquals ( 2 , changed . get ( ) ) ; <nl> } <nl> <nl> - public void testFailingSetAutoRefreshOnNonLooperThread ( ) { <nl> - final AtomicBoolean done = new AtomicBoolean ( false ) ; <nl> - Thread thread = new Thread ( ) { <nl> + public void testFailingSetAutoRefreshOnNonLooperThread ( ) throws ExecutionException , InterruptedException { <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> + public Boolean call ( ) throws Exception { <nl> Realm realm = Realm . getInstance ( getContext ( ) , false ) ; <nl> boolean autoRefresh = realm . isAutoRefresh ( ) ; <nl> assertFalse ( autoRefresh ) ; <nl> try { <nl> realm . setAutoRefresh ( true ) ; <nl> - fail ( ) ; <nl> - } catch ( IllegalStateException ignored ) { } <nl> - done . set ( true ) ; <nl> + return false ; <nl> + } catch ( IllegalStateException ignored ) { <nl> + return true ; <nl> + } <nl> } <nl> - } ; <nl> - thread . start ( ) ; <nl> - try { <nl> - thread . join ( 1000 ) ; <nl> - } catch ( InterruptedException e ) { <nl> - fail ( ) ; <nl> - } <nl> - assertTrue ( done . get ( ) ) ; <nl> + } ) ; <nl> + assertTrue ( future . get ( ) ) ; <nl> } <nl> <nl> - public void testSetAutoRefreshOnHandlerThread ( ) { <nl> - final AtomicBoolean done = new AtomicBoolean ( false ) ; <nl> - HandlerThread thread = new HandlerThread ( " TestThread " ) { <nl> + public void testSetAutoRefreshOnHandlerThread ( ) throws ExecutionException , InterruptedException { <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ Override <nl> - protected void onLooperPrepared ( ) { <nl> + public Boolean call ( ) throws Exception { <nl> + Looper . prepare ( ) ; <nl> Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> assertTrue ( realm . isAutoRefresh ( ) ) ; <nl> realm . setAutoRefresh ( false ) ; <nl> assertFalse ( realm . isAutoRefresh ( ) ) ; <nl> realm . setAutoRefresh ( true ) ; <nl> assertTrue ( realm . isAutoRefresh ( ) ) ; <nl> - done . set ( true ) ; <nl> + return true ; <nl> } <nl> - } ; <nl> - thread . start ( ) ; <nl> - try { <nl> - thread . join ( 1000 ) ; <nl> - } catch ( InterruptedException e ) { <nl> - fail ( ) ; <nl> - } <nl> - assertTrue ( done . get ( ) ) ; <nl> + } ) ; <nl> + assertTrue ( future . get ( ) ) ; <nl> } <nl> <nl> - public void testNotificationsNumber ( ) throws InterruptedException { <nl> + public void testNotificationsNumber ( ) throws InterruptedException , ExecutionException { <nl> final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> - HandlerThread thread = new HandlerThread ( " Receiver " ) { <nl> + final AtomicBoolean isReady = new AtomicBoolean ( false ) ; <nl> + <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ Override <nl> - protected void onLooperPrepared ( ) { <nl> + public Boolean call ( ) throws Exception { <nl> + Looper . prepare ( ) ; <nl> Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> realm . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> @ @ - 216 , 9 + 145 , 15 @ @ public class NotificationsTest extends AndroidTestCase { <nl> counter . incrementAndGet ( ) ; <nl> } <nl> } ) ; <nl> + isReady . set ( true ) ; <nl> + Looper . loop ( ) ; <nl> + return true ; <nl> } <nl> - } ; <nl> - thread . start ( ) ; <nl> + } ) ; <nl> + <nl> + while ( ! isReady . get ( ) ) { <nl> + Thread . sleep ( 5 ) ; <nl> + } <nl> <nl> Realm realm = Realm . getInstance ( getContext ( ) , false ) ; <nl> realm . beginTransaction ( ) ; <nl> @ @ - 226 , 59 + 161 , 52 @ @ public class NotificationsTest extends AndroidTestCase { <nl> dog . setName ( " Rex " ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> - Thread . sleep ( 100 ) ; <nl> - <nl> - assertEquals ( 1 , counter . get ( ) ) ; <nl> + try { <nl> + future . get ( 1 , TimeUnit . SECONDS ) ; <nl> + } catch ( TimeoutException ignore ) { } <nl> <nl> - thread . join ( 1 ) ; <nl> + assertEquals ( 2 , counter . get ( ) ) ; <nl> } <nl> <nl> - public void testAutoUpdateRealmResults ( ) { <nl> + public void testAutoUpdateRealmResults ( ) throws InterruptedException , ExecutionException { <nl> final int TEST _ SIZE = 10 ; <nl> - final AtomicBoolean cantRun = new AtomicBoolean ( true ) ; <nl> final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> + final AtomicBoolean isReady = new AtomicBoolean ( false ) ; <nl> + final Map < Integer , Integer > results = new ConcurrentHashMap < Integer , Integer > ( ) ; <nl> <nl> - <nl> - Realm . deleteRealmFile ( getContext ( ) ) ; <nl> - Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - / / assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> - <nl> - Thread listenerThread = new Thread ( ) { <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> + public Boolean call ( ) throws Exception { <nl> Looper . prepare ( ) ; <nl> Realm . deleteRealmFile ( getContext ( ) ) ; <nl> - Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; <nl> + final Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + final RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; <nl> assertEquals ( 0 , dogs . size ( ) ) ; <nl> realm . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> - / / Re - instatiation on each notification is intentional <nl> - Realm r = Realm . getInstance ( getContext ( ) ) ; <nl> - counter . incrementAndGet ( ) ; <nl> + int c = counter . incrementAndGet ( ) ; <nl> + if ( c = = 1 ) { / / initTable <nl> + results . put ( c , dogs . size ( ) ) ; <nl> + } else if ( c = = 2 ) { / / commit <nl> + results . put ( c , dogs . size ( ) ) ; <nl> + } else { <nl> + results . put ( c , dogs . size ( ) ) ; <nl> + } <nl> } <nl> } ) ; <nl> - cantRun . set ( false ) ; <nl> + isReady . set ( true ) ; <nl> Looper . loop ( ) ; <nl> + return true ; <nl> } <nl> - } ; <nl> - listenerThread . start ( ) ; <nl> + } ) ; <nl> <nl> - while ( cantRun . get ( ) ) { <nl> - try { <nl> - Thread . sleep ( 100 ) ; <nl> - } <nl> - catch ( InterruptedException ignored ) { <nl> - fail ( ) ; <nl> - } <nl> - } <nl> - try { <nl> - Thread . sleep ( 1000 ) ; <nl> - } catch ( InterruptedException e ) { <nl> - e . printStackTrace ( ) ; <nl> + while ( ! isReady . get ( ) ) { <nl> + Thread . sleep ( 5 ) ; <nl> } <nl> <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> realm . beginTransaction ( ) ; <nl> for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { <nl> Dog dog = realm . createObject ( Dog . class ) ; <nl> @ @ - 288 , 11 + 216 , 16 @ @ public class NotificationsTest extends AndroidTestCase { <nl> assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> <nl> try { <nl> - listenerThread . join ( 2000 ) ; <nl> - } catch ( InterruptedException ignored ) { <nl> - fail ( ) ; <nl> - } <nl> - / / one for initTable and one for the commit <nl> + future . get ( 2 , TimeUnit . SECONDS ) ; <nl> + } catch ( TimeoutException ignore ) { } <nl> + <nl> + assertEquals ( 2 , results . size ( ) ) ; <nl> + <nl> + assertTrue ( results . containsKey ( 1 ) ) ; <nl> + assertEquals ( 0 , results . get ( 1 ) . intValue ( ) ) ; <nl> + assertTrue ( results . containsKey ( 2 ) ) ; <nl> + assertEquals ( 10 , results . get ( 2 ) . intValue ( ) ) ; <nl> + <nl> assertEquals ( 2 , counter . get ( ) ) ; <nl> } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index e80dec2 . . e0f1392 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 359 , 13 + 359 , 14 @ @ public class Realm { <nl> Map < String , Realm > realms = realmsCache . get ( ) ; <nl> Realm realm = realms . get ( absolutePath ) ; <nl> <nl> - if ( realm = = null ) { <nl> - realm = new Realm ( absolutePath , key , autoRefresh ) ; <nl> - realms . put ( absolutePath , realm ) ; <nl> - realmsCache . set ( realms ) ; <nl> - } else { <nl> + if ( realm ! = null ) { <nl> return realm ; <nl> } <nl> + <nl> + realm = new Realm ( absolutePath , key , autoRefresh ) ; <nl> + realms . put ( absolutePath , realm ) ; <nl> + realmsCache . set ( realms ) ; <nl> + <nl> if ( validateSchema ) { <nl> Class < ? > validationClass ; <nl> try { <nl> @ @ - 724 , 6 + 725 , 7 @ @ public class Realm { <nl> realmId = = id / / It ' s the right realm <nl> & & ! handler . hasMessages ( REALM _ CHANGED ) / / The right message <nl> & & handler . getLooper ( ) . getThread ( ) . isAlive ( ) / / The receiving thread is alive <nl> + & & ! handler . equals ( this . handler ) / / Don ' t notify yourself <nl> ) { <nl> handler . sendEmptyMessage ( REALM _ CHANGED ) ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 index 357aa84 . . 5664434 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import java . util . concurrent . atomic . AtomicInteger ; 
 import io . realm . entities . AllJavaTypes ; 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . AnnotationIndexTypes ; 
 - import io . realm . entities . CyclicType ; 
 import io . realm . entities . DefaultValueOfField ; 
 import io . realm . entities . Dog ; 
 import io . realm . entities . NonLatinFieldNames ; 
 @ @ - 45 , 13 + 44 , 11 @ @ import io . realm . entities . Owner ; 
 import io . realm . entities . RandomPrimaryKey ; 
 import io . realm . entities . StringOnly ; 
 import io . realm . internal . Collection ; 
 - import io . realm . internal . Table ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . rule . RunTestInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 
 import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 @ @ - 685 , 97 + 682 , 150 @ @ public class RealmResultsTests extends CollectionTests { 
 } 
 } 
 
 - private RealmResults < Dog > populateRealmResultsOnDeletedLinkView ( ) { 
 + private RealmResults < Dog > populateRealmResultsOnLinkView ( Realm realm ) { 
 realm . beginTransaction ( ) ; 
 Owner owner = realm . createObject ( Owner . class ) ; 
 for ( int i = 0 ; i < 10 ; i + + ) { 
 Dog dog = new Dog ( ) ; 
 dog . setName ( " name _ " + i ) ; 
 dog . setOwner ( owner ) ; 
 + dog . setAge ( i ) ; 
 + dog . setBirthday ( new Date ( i ) ) ; 
 owner . getDogs ( ) . add ( dog ) ; 
 } 
 realm . commitTransaction ( ) ; 
 
 
 - RealmResults < Dog > dogs = owner . getDogs ( ) . where ( ) . equalTo ( Dog . FIELD _ NAME , " name _ 0 " ) . findAll ( ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - owner . deleteFromRealm ( ) ; 
 - realm . commitTransaction ( ) ; 
 - return dogs ; 
 + return owner . getDogs ( ) . where ( ) . lessThan ( Dog . FIELD _ AGE , 5 ) . findAll ( ) ; 
 } 
 
 - / / It will still be treated as valid table view in core , just always be empty . 
 + / / If a RealmResults is built on a link view , when the link view is deleted on the same thread , within the same 
 + / / event loop , the RealmResults stays without changes since it is detached until the next event loop . In the next 
 + / / event loop , the results will be empty because of the parent link view is deleted . 
 + / / 1 . Create results from link view . 
 + / / 2 . Delete the parent link view by a local transaction . 
 + / / 3 . Within the same event loop , the results stays the same . 
 + / / 4 . The results change listener called , the results becomes empty . 
 @ Test 
 - public void isValid _ resultsBuiltOnDeletedLinkView ( ) { 
 - assertEquals ( true , populateRealmResultsOnDeletedLinkView ( ) . isValid ( ) ) ; 
 - } 
 + @ RunTestInLooperThread 
 + public void accessors _ resultsBuiltOnDeletedLinkView _ deletionAsALocalCommit ( ) { 
 + Realm realm = looperThread . realm ; 
 + / / Step 1 
 + RealmResults < Dog > dogs = populateRealmResultsOnLinkView ( realm ) ; 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 + dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 + @ Override 
 + public void onChange ( RealmResults < Dog > dogs ) { 
 + / / Step 4 . 
 + / / The results is still valid , but empty . 
 + assertEquals ( true , dogs . isValid ( ) ) ; 
 + assertEquals ( true , dogs . isEmpty ( ) ) ; 
 + assertEquals ( 0 , dogs . size ( ) ) ; 
 + try { 
 + dogs . first ( ) ; 
 + fail ( ) ; 
 + } catch ( IndexOutOfBoundsException ignored ) { 
 + } 
 
 - @ Test 
 - public void size _ resultsBuiltOnDeletedLinkView ( ) { 
 - assertEquals ( 0 , populateRealmResultsOnDeletedLinkView ( ) . size ( ) ) ; 
 - } 
 + assertEquals ( 0 , dogs . sum ( Dog . FIELD _ AGE ) . intValue ( ) ) ; 
 + assertEquals ( 0f , dogs . sum ( Dog . FIELD _ HEIGHT ) . floatValue ( ) , 0f ) ; 
 + assertEquals ( 0d , dogs . sum ( Dog . FIELD _ WEIGHT ) . doubleValue ( ) , 0d ) ; 
 + assertEquals ( 0d , dogs . average ( Dog . FIELD _ AGE ) , 0d ) ; 
 + assertEquals ( 0d , dogs . average ( Dog . FIELD _ HEIGHT ) , 0d ) ; 
 + assertEquals ( 0d , dogs . average ( Dog . FIELD _ WEIGHT ) , 0d ) ; 
 + assertEquals ( null , dogs . min ( Dog . FIELD _ AGE ) ) ; 
 + assertEquals ( null , dogs . max ( Dog . FIELD _ AGE ) ) ; 
 + assertEquals ( null , dogs . minDate ( Dog . FIELD _ BIRTHDAY ) ) ; 
 + assertEquals ( null , dogs . maxDate ( Dog . FIELD _ BIRTHDAY ) ) ; 
 
 - @ Test 
 - public void first _ resultsBuiltOnDeletedLinkView ( ) { 
 - try { 
 - populateRealmResultsOnDeletedLinkView ( ) . first ( ) ; 
 - } catch ( IndexOutOfBoundsException ignored ) { 
 - } 
 - } 
 + / / FIXME : Enable this when https : / / github . com / realm / realm - core / issues / 2378 fixed . 
 + / / assertEquals ( 0 , dogs . where ( ) . findAll ( ) . size ( ) ) ; 
 
 - @ Test 
 - public void last _ resultsBuiltOnDeletedLinkView ( ) { 
 - try { 
 - populateRealmResultsOnDeletedLinkView ( ) . last ( ) ; 
 - } catch ( IndexOutOfBoundsException ignored ) { 
 - } 
 - } 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 
 - @ Test 
 - public void sum _ resultsBuiltOnDeletedLinkView ( ) { 
 - RealmResults < Dog > dogs = populateRealmResultsOnDeletedLinkView ( ) ; 
 - assertEquals ( 0 , dogs . sum ( Dog . FIELD _ AGE ) . intValue ( ) ) ; 
 - assertEquals ( 0f , dogs . sum ( Dog . FIELD _ HEIGHT ) . floatValue ( ) , 0f ) ; 
 - assertEquals ( 0d , dogs . sum ( Dog . FIELD _ WEIGHT ) . doubleValue ( ) , 0d ) ; 
 - } 
 + / / Step 2 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . where ( Owner . class ) . findAll ( ) . deleteAllFromRealm ( ) ; 
 + } 
 + } ) ; 
 
 - @ Test 
 - public void average _ resultsBuiltOnDeletedLinkView ( ) { 
 - RealmResults < Dog > dogs = populateRealmResultsOnDeletedLinkView ( ) ; 
 - assertEquals ( 0d , dogs . average ( Dog . FIELD _ AGE ) , 0d ) ; 
 - assertEquals ( 0d , dogs . average ( Dog . FIELD _ HEIGHT ) , 0d ) ; 
 - assertEquals ( 0d , dogs . average ( Dog . FIELD _ WEIGHT ) , 0d ) ; 
 + / / Step 3 
 + assertEquals ( true , dogs . isValid ( ) ) ; 
 + assertEquals ( 5 , dogs . size ( ) ) ; 
 + assertEquals ( " name _ 0 " , dogs . first ( ) . getName ( ) ) ; 
 + assertEquals ( " name _ 4 " , dogs . last ( ) . getName ( ) ) ; 
 + assertEquals ( 0 , dogs . min ( Dog . FIELD _ AGE ) . intValue ( ) ) ; 
 + assertEquals ( 4 , dogs . max ( Dog . FIELD _ AGE ) . intValue ( ) ) ; 
 + assertEquals ( new Date ( 0 ) , dogs . minDate ( Dog . FIELD _ BIRTHDAY ) ) ; 
 + assertEquals ( new Date ( 4 ) , dogs . maxDate ( Dog . FIELD _ BIRTHDAY ) ) ; 
 + / / The link view has been deleted . 
 + assertEquals ( 0 , dogs . where ( ) . findAll ( ) . size ( ) ) ; 
 } 
 
 + / / If a RealmResults is built on a link view , when the link view is deleted on a remote thread , within the same 
 + / / event loop , the RealmResults stays without changes since the Realm version doesn ' t change . In the next 
 + / / event loop , the results will be empty because of the parent link view is deleted . 
 + / / 1 . Create results from link view . 
 + / / 2 . Delete the parent link view by a remote transaction . 
 + / / 3 . Within the same event loop , the results stays the same . 
 + / / 4 . The results change listener called , the results becomes empty . 
 @ Test 
 - public void where _ resultsBuiltOnDeletedLinkView ( ) { 
 - OrderedRealmCollection < CyclicType > results = populateCollectionOnDeletedLinkView ( realm , ManagedCollection . REALMRESULTS ) ; 
 - assertEquals ( 0 , results . where ( ) . findAll ( ) . size ( ) ) ; 
 - } 
 + @ RunTestInLooperThread 
 + public void accessors _ resultsBuiltOnDeletedLinkView _ deletionAsARemoteCommit ( ) { 
 + / / Step 1 
 + Realm realm = looperThread . realm ; 
 + RealmResults < Dog > dogs = populateRealmResultsOnLinkView ( realm ) ; 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 + dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 + @ Override 
 + public void onChange ( RealmResults < Dog > dogs ) { 
 + / / Step 4 
 + / / The results is still valid , but empty . 
 + assertEquals ( true , dogs . isValid ( ) ) ; 
 + assertEquals ( true , dogs . isEmpty ( ) ) ; 
 + assertEquals ( 0 , dogs . size ( ) ) ; 
 + try { 
 + dogs . first ( ) ; 
 + fail ( ) ; 
 + } catch ( IndexOutOfBoundsException ignored ) { 
 + } 
 
 - @ Test 
 - public void min _ resultsBuiltOnDeletedLinkView ( ) { 
 - OrderedRealmCollection < CyclicType > results = populateCollectionOnDeletedLinkView ( realm , ManagedCollection . REALMRESULTS ) ; 
 - assertNull ( results . min ( CyclicType . FIELD _ ID ) ) ; 
 - } 
 + assertEquals ( 0 , dogs . sum ( Dog . FIELD _ AGE ) . intValue ( ) ) ; 
 + assertEquals ( 0f , dogs . sum ( Dog . FIELD _ HEIGHT ) . floatValue ( ) , 0f ) ; 
 + assertEquals ( 0d , dogs . sum ( Dog . FIELD _ WEIGHT ) . doubleValue ( ) , 0d ) ; 
 + assertEquals ( 0d , dogs . average ( Dog . FIELD _ AGE ) , 0d ) ; 
 + assertEquals ( 0d , dogs . average ( Dog . FIELD _ HEIGHT ) , 0d ) ; 
 + assertEquals ( 0d , dogs . average ( Dog . FIELD _ WEIGHT ) , 0d ) ; 
 + assertEquals ( null , dogs . min ( Dog . FIELD _ AGE ) ) ; 
 + assertEquals ( null , dogs . max ( Dog . FIELD _ AGE ) ) ; 
 + assertEquals ( null , dogs . minDate ( Dog . FIELD _ BIRTHDAY ) ) ; 
 + assertEquals ( null , dogs . maxDate ( Dog . FIELD _ BIRTHDAY ) ) ; 
 
 - @ Test 
 - public void min _ dateResultsBuiltOnDeletedLinkView ( ) { 
 - OrderedRealmCollection < CyclicType > results = populateCollectionOnDeletedLinkView ( realm , ManagedCollection . REALMRESULTS ) ; 
 - assertEquals ( null , results . minDate ( CyclicType . FIELD _ DATE ) ) ; 
 - } 
 + / / FIXME : Enable this when https : / / github . com / realm / realm - core / issues / 2378 fixed . 
 + / / assertEquals ( 0 , dogs . where ( ) . findAll ( ) . size ( ) ) ; 
 
 - @ Test 
 - public void max _ dateResultsBuiltOnDeletedLinkView ( ) { 
 - OrderedRealmCollection < CyclicType > results = populateCollectionOnDeletedLinkView ( realm , ManagedCollection . REALMRESULTS ) ; 
 - assertEquals ( null , results . maxDate ( CyclicType . FIELD _ DATE ) ) ; 
 - } 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 
 - @ Test 
 - public void max _ resultsBuiltOnDeletedLinkView ( ) { 
 - OrderedRealmCollection < CyclicType > results = populateCollectionOnDeletedLinkView ( realm , ManagedCollection . REALMRESULTS ) ; 
 - assertNull ( results . max ( CyclicType . FIELD _ ID ) ) ; 
 + 
 + / / Step 2 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . where ( Owner . class ) . findAll ( ) . deleteAllFromRealm ( ) ; 
 + } 
 + } ) ; 
 + 
 + / / Step 3 
 + assertEquals ( true , dogs . isValid ( ) ) ; 
 + assertEquals ( 5 , dogs . size ( ) ) ; 
 + / / The link view still exists 
 + assertEquals ( 5 , dogs . where ( ) . findAll ( ) . size ( ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 index 482d48b . . 7b808ae 100644 
 - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 15 , 200 + 15 , 129 @ @ 
 * / 
 package io . realm ; 
 
 - import android . os . Handler ; 
 - import android . os . HandlerThread ; 
 import android . os . Looper ; 
 import android . test . AndroidTestCase ; 
 
 - import java . util . Queue ; 
 - import java . util . concurrent . ConcurrentLinkedQueue ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . concurrent . Callable ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 + import java . util . concurrent . ExecutionException ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . Executors ; 
 + import java . util . concurrent . Future ; 
 + import java . util . concurrent . TimeUnit ; 
 + import java . util . concurrent . TimeoutException ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 import io . realm . entities . Dog ; 
 
 public class NotificationsTest extends AndroidTestCase { 
 - public void testFailureOnNonLooperThread ( ) { 
 - Thread thread = new Thread ( ) { 
 + 
 + public void testFailureOnNonLooperThread ( ) throws InterruptedException , ExecutionException { 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ Override 
 - public void run ( ) { 
 + public Boolean call ( ) throws Exception { 
 try { 
 @ SuppressWarnings ( " UnusedDeclaration " ) Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - fail ( " The Realm instantiations should have thrown an exception " ) ; 
 - } catch ( IllegalStateException ignored ) { } 
 - } 
 - } ; 
 - thread . start ( ) ; 
 - try { 
 - thread . join ( ) ; 
 - } catch ( InterruptedException e ) { 
 - fail ( ) ; 
 - } 
 - } 
 - 
 - public void testNotifications ( ) { 
 - final AtomicBoolean changed = new AtomicBoolean ( false ) ; 
 - 
 - Thread listenerThread = new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - Looper . prepare ( ) ; 
 - Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - realm . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - changed . set ( true ) ; 
 - Looper . myLooper ( ) . quit ( ) ; 
 - } 
 - } ) ; 
 - Looper . loop ( ) ; 
 - } 
 - } ; 
 - listenerThread . start ( ) ; 
 - 
 - Thread writerThread = new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - Realm realm = Realm . getInstance ( getContext ( ) , false ) ; 
 - realm . beginTransaction ( ) ; 
 - Dog dog = realm . createObject ( Dog . class ) ; 
 - dog . setName ( " Rex " ) ; 
 - realm . commitTransaction ( ) ; 
 + return false ; 
 + } catch ( IllegalStateException ignored ) { 
 + return true ; 
 + } 
 } 
 - } ; 
 - writerThread . start ( ) ; 
 - 
 - try { 
 - writerThread . join ( ) ; 
 - listenerThread . join ( 2000 ) ; 
 - } catch ( InterruptedException e ) { 
 - fail ( ) ; 
 - } 
 + } ) ; 
 
 - assertEquals ( true , changed . get ( ) ) ; 
 + Boolean result = future . get ( ) ; 
 + assertTrue ( result ) ; 
 } 
 
 - public void testNotificationsPlusSelfReceive ( ) { 
 - final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 - final Queue < Handler > handlers = new ConcurrentLinkedQueue < Handler > ( ) ; 
 - 
 - Thread listenerThread = new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - Looper . prepare ( ) ; 
 - Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - realm . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - counter . incrementAndGet ( ) ; 
 - Looper . myLooper ( ) . quit ( ) ; 
 - } 
 - } ) ; 
 - Looper . loop ( ) ; 
 - } 
 - } ; 
 - listenerThread . start ( ) ; 
 + public void testNotifications ( ) throws InterruptedException , ExecutionException { 
 + ExecutorService executorService = Executors . newFixedThreadPool ( 2 ) ; 
 
 - Thread writerThread = new Thread ( ) { 
 + final AtomicInteger changed = new AtomicInteger ( 0 ) ; 
 
 + List < Callable < Void > > callables = new ArrayList < Callable < Void > > ( ) ; 
 + callables . add ( new Callable < Void > ( ) { 
 @ Override 
 - public void run ( ) { 
 + public Void call ( ) throws Exception { 
 Looper . prepare ( ) ; 
 - Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; / / This does not sent a message to itself [ 0 ] 
 realm . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 - counter . incrementAndGet ( ) ; 
 + changed . incrementAndGet ( ) ; 
 } 
 } ) ; 
 - Handler handler = new Handler ( ) ; 
 - handlers . add ( handler ) ; 
 Looper . loop ( ) ; 
 + return null ; 
 } 
 - } ; 
 - writerThread . start ( ) ; 
 - while ( handlers . isEmpty ( ) ) { 
 - try { 
 - Thread . sleep ( 10 ) ; 
 - } catch ( InterruptedException e ) { 
 - fail ( ) ; 
 - } 
 - } 
 - Handler handler = handlers . poll ( ) ; 
 - handler . post ( new Runnable ( ) { 
 + } ) ; 
 + callables . add ( new Callable < Void > ( ) { 
 @ Override 
 - public void run ( ) { 
 - Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + public Void call ( ) throws Exception { 
 + Realm realm = Realm . getInstance ( getContext ( ) , false ) ; / / This will notify the other thread [ 1 ] 
 realm . beginTransaction ( ) ; 
 Dog dog = realm . createObject ( Dog . class ) ; 
 dog . setName ( " Rex " ) ; 
 - realm . commitTransaction ( ) ; 
 - Looper . myLooper ( ) . quit ( ) ; 
 + realm . commitTransaction ( ) ; / / This will notify the other thread [ 2 ] 
 + return null ; 
 } 
 } ) ; 
 
 - try { 
 - writerThread . join ( ) ; 
 - listenerThread . join ( 2000 ) ; 
 - } catch ( InterruptedException e ) { 
 - fail ( ) ; 
 - } 
 + executorService . invokeAll ( callables , 2 , TimeUnit . SECONDS ) ; 
 
 - assertEquals ( 2 , counter . get ( ) ) ; 
 + assertEquals ( 2 , changed . get ( ) ) ; 
 } 
 
 - public void testFailingSetAutoRefreshOnNonLooperThread ( ) { 
 - final AtomicBoolean done = new AtomicBoolean ( false ) ; 
 - Thread thread = new Thread ( ) { 
 + public void testFailingSetAutoRefreshOnNonLooperThread ( ) throws ExecutionException , InterruptedException { 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ Override 
 - public void run ( ) { 
 + public Boolean call ( ) throws Exception { 
 Realm realm = Realm . getInstance ( getContext ( ) , false ) ; 
 boolean autoRefresh = realm . isAutoRefresh ( ) ; 
 assertFalse ( autoRefresh ) ; 
 try { 
 realm . setAutoRefresh ( true ) ; 
 - fail ( ) ; 
 - } catch ( IllegalStateException ignored ) { } 
 - done . set ( true ) ; 
 + return false ; 
 + } catch ( IllegalStateException ignored ) { 
 + return true ; 
 + } 
 } 
 - } ; 
 - thread . start ( ) ; 
 - try { 
 - thread . join ( 1000 ) ; 
 - } catch ( InterruptedException e ) { 
 - fail ( ) ; 
 - } 
 - assertTrue ( done . get ( ) ) ; 
 + } ) ; 
 + assertTrue ( future . get ( ) ) ; 
 } 
 
 - public void testSetAutoRefreshOnHandlerThread ( ) { 
 - final AtomicBoolean done = new AtomicBoolean ( false ) ; 
 - HandlerThread thread = new HandlerThread ( " TestThread " ) { 
 + public void testSetAutoRefreshOnHandlerThread ( ) throws ExecutionException , InterruptedException { 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ Override 
 - protected void onLooperPrepared ( ) { 
 + public Boolean call ( ) throws Exception { 
 + Looper . prepare ( ) ; 
 Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 assertTrue ( realm . isAutoRefresh ( ) ) ; 
 realm . setAutoRefresh ( false ) ; 
 assertFalse ( realm . isAutoRefresh ( ) ) ; 
 realm . setAutoRefresh ( true ) ; 
 assertTrue ( realm . isAutoRefresh ( ) ) ; 
 - done . set ( true ) ; 
 + return true ; 
 } 
 - } ; 
 - thread . start ( ) ; 
 - try { 
 - thread . join ( 1000 ) ; 
 - } catch ( InterruptedException e ) { 
 - fail ( ) ; 
 - } 
 - assertTrue ( done . get ( ) ) ; 
 + } ) ; 
 + assertTrue ( future . get ( ) ) ; 
 } 
 
 - public void testNotificationsNumber ( ) throws InterruptedException { 
 + public void testNotificationsNumber ( ) throws InterruptedException , ExecutionException { 
 final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 - HandlerThread thread = new HandlerThread ( " Receiver " ) { 
 + final AtomicBoolean isReady = new AtomicBoolean ( false ) ; 
 + 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ Override 
 - protected void onLooperPrepared ( ) { 
 + public Boolean call ( ) throws Exception { 
 + Looper . prepare ( ) ; 
 Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 realm . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 @ @ - 216 , 9 + 145 , 15 @ @ public class NotificationsTest extends AndroidTestCase { 
 counter . incrementAndGet ( ) ; 
 } 
 } ) ; 
 + isReady . set ( true ) ; 
 + Looper . loop ( ) ; 
 + return true ; 
 } 
 - } ; 
 - thread . start ( ) ; 
 + } ) ; 
 + 
 + while ( ! isReady . get ( ) ) { 
 + Thread . sleep ( 5 ) ; 
 + } 
 
 Realm realm = Realm . getInstance ( getContext ( ) , false ) ; 
 realm . beginTransaction ( ) ; 
 @ @ - 226 , 59 + 161 , 52 @ @ public class NotificationsTest extends AndroidTestCase { 
 dog . setName ( " Rex " ) ; 
 realm . commitTransaction ( ) ; 
 
 - Thread . sleep ( 100 ) ; 
 - 
 - assertEquals ( 1 , counter . get ( ) ) ; 
 + try { 
 + future . get ( 1 , TimeUnit . SECONDS ) ; 
 + } catch ( TimeoutException ignore ) { } 
 
 - thread . join ( 1 ) ; 
 + assertEquals ( 2 , counter . get ( ) ) ; 
 } 
 
 - public void testAutoUpdateRealmResults ( ) { 
 + public void testAutoUpdateRealmResults ( ) throws InterruptedException , ExecutionException { 
 final int TEST _ SIZE = 10 ; 
 - final AtomicBoolean cantRun = new AtomicBoolean ( true ) ; 
 final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 + final AtomicBoolean isReady = new AtomicBoolean ( false ) ; 
 + final Map < Integer , Integer > results = new ConcurrentHashMap < Integer , Integer > ( ) ; 
 
 - 
 - Realm . deleteRealmFile ( getContext ( ) ) ; 
 - Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - / / assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 - 
 - Thread listenerThread = new Thread ( ) { 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ Override 
 - public void run ( ) { 
 + public Boolean call ( ) throws Exception { 
 Looper . prepare ( ) ; 
 Realm . deleteRealmFile ( getContext ( ) ) ; 
 - Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; 
 + final Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + final RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; 
 assertEquals ( 0 , dogs . size ( ) ) ; 
 realm . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 - / / Re - instatiation on each notification is intentional 
 - Realm r = Realm . getInstance ( getContext ( ) ) ; 
 - counter . incrementAndGet ( ) ; 
 + int c = counter . incrementAndGet ( ) ; 
 + if ( c = = 1 ) { / / initTable 
 + results . put ( c , dogs . size ( ) ) ; 
 + } else if ( c = = 2 ) { / / commit 
 + results . put ( c , dogs . size ( ) ) ; 
 + } else { 
 + results . put ( c , dogs . size ( ) ) ; 
 + } 
 } 
 } ) ; 
 - cantRun . set ( false ) ; 
 + isReady . set ( true ) ; 
 Looper . loop ( ) ; 
 + return true ; 
 } 
 - } ; 
 - listenerThread . start ( ) ; 
 + } ) ; 
 
 - while ( cantRun . get ( ) ) { 
 - try { 
 - Thread . sleep ( 100 ) ; 
 - } 
 - catch ( InterruptedException ignored ) { 
 - fail ( ) ; 
 - } 
 - } 
 - try { 
 - Thread . sleep ( 1000 ) ; 
 - } catch ( InterruptedException e ) { 
 - e . printStackTrace ( ) ; 
 + while ( ! isReady . get ( ) ) { 
 + Thread . sleep ( 5 ) ; 
 } 
 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 realm . beginTransaction ( ) ; 
 for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { 
 Dog dog = realm . createObject ( Dog . class ) ; 
 @ @ - 288 , 11 + 216 , 16 @ @ public class NotificationsTest extends AndroidTestCase { 
 assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 
 try { 
 - listenerThread . join ( 2000 ) ; 
 - } catch ( InterruptedException ignored ) { 
 - fail ( ) ; 
 - } 
 - / / one for initTable and one for the commit 
 + future . get ( 2 , TimeUnit . SECONDS ) ; 
 + } catch ( TimeoutException ignore ) { } 
 + 
 + assertEquals ( 2 , results . size ( ) ) ; 
 + 
 + assertTrue ( results . containsKey ( 1 ) ) ; 
 + assertEquals ( 0 , results . get ( 1 ) . intValue ( ) ) ; 
 + assertTrue ( results . containsKey ( 2 ) ) ; 
 + assertEquals ( 10 , results . get ( 2 ) . intValue ( ) ) ; 
 + 
 assertEquals ( 2 , counter . get ( ) ) ; 
 } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index e80dec2 . . e0f1392 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 359 , 13 + 359 , 14 @ @ public class Realm { 
 Map < String , Realm > realms = realmsCache . get ( ) ; 
 Realm realm = realms . get ( absolutePath ) ; 
 
 - if ( realm = = null ) { 
 - realm = new Realm ( absolutePath , key , autoRefresh ) ; 
 - realms . put ( absolutePath , realm ) ; 
 - realmsCache . set ( realms ) ; 
 - } else { 
 + if ( realm ! = null ) { 
 return realm ; 
 } 
 + 
 + realm = new Realm ( absolutePath , key , autoRefresh ) ; 
 + realms . put ( absolutePath , realm ) ; 
 + realmsCache . set ( realms ) ; 
 + 
 if ( validateSchema ) { 
 Class < ? > validationClass ; 
 try { 
 @ @ - 724 , 6 + 725 , 7 @ @ public class Realm { 
 realmId = = id / / It ' s the right realm 
 & & ! handler . hasMessages ( REALM _ CHANGED ) / / The right message 
 & & handler . getLooper ( ) . getThread ( ) . isAlive ( ) / / The receiving thread is alive 
 + & & ! handler . equals ( this . handler ) / / Don ' t notify yourself 
 ) { 
 handler . sendEmptyMessage ( REALM _ CHANGED ) ; 
 }
