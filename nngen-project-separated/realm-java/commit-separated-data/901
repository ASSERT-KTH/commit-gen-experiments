BLEU SCORE: 0.02383853510228548

TEST MSG: Splitting RealmQuery + advanced support into its own branch
GENERATED MSG: Make Rx factory public .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> index 04ec43b . . 06a8f55 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package io . realm ; <nl> import android . test . AndroidTestCase ; <nl> <nl> import java . util . List ; <nl> + import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> @ @ - 224 , 31 + 225 , 6 @ @ public class RxJavaTests extends AndroidTestCase { <nl> dynamicRealm . close ( ) ; <nl> } <nl> <nl> - public void testRealmQueryObservable ( ) { <nl> - final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> - realm . beginTransaction ( ) ; <nl> - realm . createObject ( AllTypes . class ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - Subscription subscription = realm . where ( AllTypes . class ) . asObservable ( ) <nl> - . map ( new Func1 < RealmQuery < AllTypes > , List < AllTypes > > ( ) { <nl> - @ Override <nl> - public List < AllTypes > call ( RealmQuery < AllTypes > query ) { <nl> - return query . findAll ( ) ; <nl> - } <nl> - } ) <nl> - . subscribeOn ( Schedulers . computation ( ) ) <nl> - . subscribe ( new Action1 < List < AllTypes > > ( ) { <nl> - @ Override <nl> - public void call ( List < AllTypes > allTypes ) { <nl> - assertEquals ( 1 , allTypes . size ( ) ) ; <nl> - subscribedNotified . set ( true ) ; <nl> - } <nl> - } ) ; <nl> - subscription . unsubscribe ( ) ; <nl> - assertTrue ( subscribedNotified . get ( ) ) ; <nl> - } <nl> - <nl> public void testUnsubscribe ( ) { <nl> final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> Subscription subscription = realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { <nl> @ @ - 263 , 4 + 239 , 32 @ @ public class RxJavaTests extends AndroidTestCase { <nl> assertEquals ( 0 , realm . handlerController . changeListeners . size ( ) ) ; <nl> } <nl> <nl> + public void testUnsubscribeFromOtherThreadFails ( ) { <nl> + final CountDownLatch unsubscribeCompleted = new CountDownLatch ( 1 ) ; <nl> + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> + final Subscription subscription = realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { <nl> + @ Override <nl> + public void call ( Realm rxRealm ) { <nl> + assertTrue ( rxRealm = = realm ) ; <nl> + subscribedNotified . set ( true ) ; <nl> + } <nl> + } ) ; <nl> + assertEquals ( 1 , realm . handlerController . changeListeners . size ( ) ) ; <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + try { <nl> + subscription . unsubscribe ( ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalStateException ignored ) { <nl> + } <nl> + unsubscribeCompleted . countDown ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + TestHelper . awaitOrFail ( unsubscribeCompleted ) ; <nl> + assertEquals ( 1 , realm . handlerController . changeListeners . size ( ) ) ; <nl> + } <nl> + <nl> + <nl> + <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 35211e7 . . 91640b1 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ import rx . Observable ; <nl> * @ see Realm # where ( Class ) <nl> * @ see RealmResults # where ( ) <nl> * / <nl> - public class RealmQuery < E extends RealmObject > implements { <nl> + public class RealmQuery < E extends RealmObject > { <nl> <nl> private BaseRealm realm ; <nl> private Class < E > clazz ; <nl> @ @ - 127 , 27 + 127 , 6 @ @ public class RealmQuery < E extends RealmObject > implements { <nl> } <nl> } <nl> <nl> - / * * <nl> - * Copies an existing query to another Realm instance . <nl> - * This method is threadsafe and can be used to copy a { @ link RealmQuery } between threads . <nl> - * <nl> - * @ param realm Realm to run the copied query on <nl> - * @ param query query to copy <nl> - * @ param < E > type of elements in the query <nl> - * @ return the copied query instance . <nl> - * / <nl> - public static < E extends RealmObject > RealmQuery < E > copyQuery ( Realm realm , RealmQuery < E > query ) { <nl> - RealmQuery < E > copiedQuery = new RealmQuery < E > ( realm , query . clazz ) ; <nl> - query . handoverTo ( copiedQuery ) ; <nl> - return copiedQuery ; <nl> - } <nl> - <nl> - public static RealmQuery < DynamicRealmObject > copyDynamicQuery ( DynamicRealm realm , RealmQuery < DynamicRealmObject > query ) { <nl> - RealmQuery < DynamicRealmObject > copiedQuery = new RealmQuery < DynamicRealmObject > ( realm , query . className ) ; <nl> - query . handoverTo ( copiedQuery ) ; <nl> - return copiedQuery ; <nl> - } <nl> - <nl> private RealmQuery ( Realm realm , Class < E > clazz ) { <nl> this . realm = realm ; <nl> this . clazz = clazz ; <nl> @ @ - 1907 , 15 + 1886 , 7 @ @ public class RealmQuery < E extends RealmObject > implements { <nl> } <nl> } <nl> <nl> - / * * <nl> - * Move this query to another query object . That query object is allowed to be on another thread . <nl> - * / <nl> - private void handoverTo ( RealmQuery < E > copiedQuery ) { <nl> - long handoverQuery = query . handoverQuery ( realm . sharedGroupManager . getNativePointer ( ) ) ; <nl> - copiedQuery . query . acceptHandoverQuery ( handoverQuery ) ; <nl> - } <nl> - <nl> - sprivate long getSourceRowIndexForFirstObject ( ) { <nl> + private long getSourceRowIndexForFirstObject ( ) { <nl> long rowIndex = this . query . find ( ) ; <nl> if ( rowIndex < 0 ) { <nl> return rowIndex ; <nl> @ @ - 1941 , 30 + 1912 , 4 @ @ public class RealmQuery < E extends RealmObject > implements { <nl> long handoverQueryPointer ( ) { <nl> return query . handoverQuery ( realm . sharedGroupManager . getNativePointer ( ) ) ; <nl> } <nl> - <nl> - / * * <nl> - * Returns an Rx Observable that emits the RealmQuery and then completes . <nl> - * <nl> - * @ return RxJava Observable <nl> - * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> - * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > <nl> - * / <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - public Observable < RealmQuery < E > > asObservable ( ) { <nl> - if ( realm instanceof Realm ) { <nl> - return realm . configuration . getRxFactory ( ) . from ( ( Realm ) realm , this ) ; <nl> - } else if ( realm instanceof DynamicRealm ) { <nl> - DynamicRealm dynamicRealm = ( DynamicRealm ) realm ; <nl> - RealmQuery < DynamicRealmObject > dynamicQuery = ( RealmQuery < DynamicRealmObject > ) this ; <nl> - @ SuppressWarnings ( " UnnecessaryLocalVariable " ) <nl> - Observable results = realm . configuration . getRxFactory ( ) . from ( dynamicRealm , dynamicQuery ) ; <nl> - return results ; <nl> - } else { <nl> - throw new UnsupportedOperationException ( realm . getClass ( ) + " not supported " ) ; <nl> - } <nl> - } <nl> - <nl> - public RealmQuery < E > clone ( ) { <nl> - return new RealmQuery < E > ( this ) ; <nl> - } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java <nl> deleted file mode 100644 <nl> index d6c24e6 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 219 + 0 , 0 @ @ <nl> - / / package io . realm . rx ; <nl> - / / <nl> - / / import io . realm . DynamicRealm ; <nl> - / / import io . realm . DynamicRealmObject ; <nl> - / / import io . realm . Realm ; <nl> - / / import io . realm . RealmChangeListener ; <nl> - / / import io . realm . RealmList ; <nl> - / / import io . realm . RealmObject ; <nl> - / / import io . realm . RealmQuery ; <nl> - / / import io . realm . RealmResults ; <nl> - / / import rx . Observable ; <nl> - / / import rx . Subscriber ; <nl> - / / import rx . functions . Action0 ; <nl> - / / import rx . subscriptions . Subscriptions ; <nl> - / / <nl> - / / / * * <nl> - / / * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects <nl> - / / * before emitting them . This is effectively a snapshot of the Realm data at a given point in time . <nl> - / / * <nl> - / / * This has the following implications : <nl> - / / * <nl> - / / * - Increased memory usage , as all fields including references are copied to the Java heap . <nl> - / / * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm and the <nl> - / / * object will no longer automatically update either . <nl> - / / * - All guarantees of staying consistent with other data from persisted Realm objects are gone . <nl> - / / * - The object is no longer thread - confined and can be parsed between threads . <nl> - / / * <nl> - / / * @ see { @ link io . realm . Realm # copyFromRealm ( RealmObject ) } <nl> - / / * / <nl> - / / public class DetachedCopyObservableFactory implements RxObservableFactory { <nl> - / / <nl> - / / private final int maxDepth ; <nl> - / / private boolean rxJavaAvailble ; <nl> - / / <nl> - / / / * * <nl> - / / * Creates an instance of this factory class . Detached objects also copy all referenced objects . <nl> - / / * / <nl> - / / public DetachedCopyObservableFactory ( ) { <nl> - / / this ( Integer . MAX _ VALUE ) ; <nl> - / / } <nl> - / / <nl> - / / / * * <nl> - / / * Creates an instance of this factory class . Detached copies only contain references up to { @ code maxDepth } away . <nl> - / / * <nl> - / / * @ param maxDepth maximum distance from root object that objects are copied . References above this limit will be <nl> - / / * { @ code null } . <nl> - / / * @ see io . realm . Realm # copyFromRealm ( RealmObject , int ) <nl> - / / * / <nl> - / / public DetachedCopyObservableFactory ( int maxDepth ) { <nl> - / / this . maxDepth = maxDepth ; <nl> - / / try { <nl> - / / Class . forName ( " rx . Observable " ) ; <nl> - / / rxJavaAvailble = true ; <nl> - / / } catch ( ClassNotFoundException ignore ) { <nl> - / / rxJavaAvailble = false ; <nl> - / / } <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public Observable < Realm > from ( final Realm realm ) { <nl> - / / checkRxJavaAvailable ( ) ; <nl> - / / return Observable . create ( new Observable . OnSubscribe < Realm > ( ) { <nl> - / / @ Override <nl> - / / public void call ( final Subscriber < ? super Realm > subscriber ) { <nl> - / / final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - / / @ Override <nl> - / / public void onChange ( ) { <nl> - / / subscriber . onNext ( realm ) ; <nl> - / / } <nl> - / / } ; <nl> - / / realm . addChangeListener ( listener ) ; <nl> - / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - / / @ Override <nl> - / / public void call ( ) { <nl> - / / realm . removeChangeListener ( listener ) ; <nl> - / / } <nl> - / / } ) ) ; <nl> - / / <nl> - / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / / / value . <nl> - / / subscriber . onNext ( realm ) ; <nl> - / / } <nl> - / / } ) ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public Observable < DynamicRealm > from ( final DynamicRealm realm ) { <nl> - / / checkRxJavaAvailable ( ) ; <nl> - / / return Observable . create ( new Observable . OnSubscribe < DynamicRealm > ( ) { <nl> - / / @ Override <nl> - / / public void call ( final Subscriber < ? super DynamicRealm > subscriber ) { <nl> - / / final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - / / @ Override <nl> - / / public void onChange ( ) { <nl> - / / subscriber . onNext ( realm ) ; <nl> - / / } <nl> - / / } ; <nl> - / / realm . addChangeListener ( listener ) ; <nl> - / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - / / @ Override <nl> - / / public void call ( ) { <nl> - / / realm . removeChangeListener ( listener ) ; <nl> - / / } <nl> - / / } ) ) ; <nl> - / / <nl> - / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / / / value . <nl> - / / subscriber . onNext ( realm ) ; <nl> - / / } <nl> - / / } ) ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public < E extends RealmObject > Observable < RealmResults < E > > from ( Realm realm , RealmResults < E > results ) { <nl> - / / return null ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public Observable < RealmResults < DynamicRealmObject > > from ( DynamicRealm realm , RealmResults < DynamicRealmObject > results ) { <nl> - / / return null ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public < E extends RealmObject > Observable < RealmList < E > > from ( Realm realm , RealmList < E > list ) { <nl> - / / return null ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public Observable < RealmList < DynamicRealmObject > > from ( DynamicRealm realm , RealmList < DynamicRealmObject > list ) { <nl> - / / return null ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public < E extends RealmObject > Observable < E > from ( Realm realm , E object ) { <nl> - / / return null ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public Observable < DynamicRealmObject > from ( DynamicRealm realm , DynamicRealmObject object ) { <nl> - / / return null ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public < E extends RealmObject > Observable < RealmQuery < E > > from ( Realm realm , RealmQuery < E > query ) { <nl> - / / return null ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public Observable < RealmQuery < DynamicRealmObject > > from ( DynamicRealm realm , RealmQuery < DynamicRealmObject > query ) { <nl> - / / return null ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> - / / checkRxJavaAvailable ( ) ; <nl> - / / return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> - / / @ Override <nl> - / / public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> - / / final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - / / @ Override <nl> - / / public void onChange ( ) { <nl> - / / subscriber . onNext ( results ) ; <nl> - / / } <nl> - / / } ; <nl> - / / results . addChangeListener ( listener ) ; <nl> - / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - / / @ Override <nl> - / / public void call ( ) { <nl> - / / results . removeChangeListener ( listener ) ; <nl> - / / } <nl> - / / } ) ) ; <nl> - / / <nl> - / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / / / value . <nl> - / / subscriber . onNext ( results ) ; <nl> - / / } <nl> - / / } ) ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> - / / checkRxJavaAvailable ( ) ; <nl> - / / throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> - / / } <nl> - / / <nl> - / / @ Override <nl> - / / public < E extends RealmObject > Observable < E > from ( final E object ) { <nl> - / / checkRxJavaAvailable ( ) ; <nl> - / / return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> - / / @ Override <nl> - / / public void call ( final Subscriber < ? super E > subscriber ) { <nl> - / / final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - / / @ Override <nl> - / / public void onChange ( ) { <nl> - / / subscriber . onNext ( object ) ; <nl> - / / } <nl> - / / } ; <nl> - / / object . addChangeListener ( listener ) ; <nl> - / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - / / @ Override <nl> - / / public void call ( ) { <nl> - / / object . removeChangeListener ( listener ) ; <nl> - / / } <nl> - / / } ) ) ; <nl> - / / <nl> - / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / / / value . <nl> - / / subscriber . onNext ( object ) ; <nl> - / / } <nl> - / / } ) ; <nl> - / / } <nl> - / / <nl> - / / private void checkRxJavaAvailable ( ) { <nl> - / / if ( ! rxJavaAvailble ) { <nl> - / / throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + <nl> - / / " Remember to add it as a compile dependency . See https : / / realm . io / docs / java / latest / # rxjava for more details . " ) ; <nl> - / / } <nl> - / / } <nl> - / / } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> index 76bb47f . . c743de2 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> @ @ - 35 , 7 + 35 , 6 @ @ import rx . subscriptions . Subscriptions ; <nl> * @ see Realm # asObservable ( ) <nl> * @ see RealmObject # asObservable ( ) <nl> * @ see RealmResults # asObservable ( ) <nl> - * @ see RealmQuery # asObservable ( ) <nl> * @ see DynamicRealm # asObservable ( ) <nl> * @ see DynamicRealmObject # asObservable ( ) <nl> * / <nl> @ @ - 61 , 7 + 60 , 9 @ @ public class RealmObservableFactory implements RxObservableFactory { <nl> final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> - subscriber . onNext ( realm ) ; <nl> + if ( ! subscriber . isUnsubscribed ( ) ) { <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> } <nl> } ; <nl> realm . addChangeListener ( listener ) ; <nl> @ @ - 71 , 9 + 72 , 6 @ @ public class RealmObservableFactory implements RxObservableFactory { <nl> realm . removeChangeListener ( listener ) ; <nl> } <nl> } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . <nl> subscriber . onNext ( realm ) ; <nl> } <nl> } ) ; <nl> @ @ - 88 , 7 + 86 , 9 @ @ public class RealmObservableFactory implements RxObservableFactory { <nl> final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> - subscriber . onNext ( realm ) ; <nl> + if ( ! subscriber . isUnsubscribed ( ) ) { <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> } <nl> } ; <nl> realm . addChangeListener ( listener ) ; <nl> @ @ - 125 , 7 + 125 , 9 @ @ public class RealmObservableFactory implements RxObservableFactory { <nl> final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> - subscriber . onNext ( results ) ; <nl> + if ( ! subscriber . isUnsubscribed ( ) ) { <nl> + subscriber . onNext ( results ) ; <nl> + } <nl> } <nl> } ; <nl> results . addChangeListener ( listener ) ; <nl> @ @ - 178 , 7 + 180 , 9 @ @ public class RealmObservableFactory implements RxObservableFactory { <nl> final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> - subscriber . onNext ( object ) ; <nl> + if ( ! subscriber . isUnsubscribed ( ) ) { <nl> + subscriber . onNext ( object ) ; <nl> + } <nl> } <nl> } ; <nl> object . addChangeListener ( listener ) ; <nl> @ @ - 198 , 47 + 202 , 12 @ @ public class RealmObservableFactory implements RxObservableFactory { <nl> <nl> @ Override <nl> public < E extends RealmObject > Observable < RealmQuery < E > > from ( final Realm realm , final RealmQuery < E > query ) { <nl> - checkRxJavaAvailable ( ) ; <nl> - / / Create copy of the RealmQuery on the current thread and prepare it for handover <nl> - final RealmQuery < E > queryCopy = query . clone ( ) ; <nl> - <nl> - return Observable . create ( new Observable . OnSubscribe < RealmQuery < E > > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super RealmQuery < E > > subscriber ) { <nl> - / / Create an Realm instance that is open for as long as the subscription is alive . <nl> - final Realm subscriberRealm = Realm . getInstance ( realm . getConfiguration ( ) ) ; <nl> - RealmQuery < E > queryClone = RealmQuery . copyQuery ( subscriberRealm , query ) ; / / TODO Can I steal it ? <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - subscriberRealm . close ( ) ; <nl> - } <nl> - } ) ) ; <nl> - subscriber . onNext ( queryClone ) ; <nl> - subscriber . onCompleted ( ) ; <nl> - } <nl> - } ) ; <nl> + throw new RuntimeException ( " RealmQuery not supported yet . " ) ; <nl> } <nl> <nl> @ Override <nl> public Observable < RealmQuery < DynamicRealmObject > > from ( final DynamicRealm realm , final RealmQuery < DynamicRealmObject > query ) { <nl> - checkRxJavaAvailable ( ) ; <nl> - return Observable . create ( new Observable . OnSubscribe < RealmQuery < DynamicRealmObject > > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super RealmQuery < DynamicRealmObject > > subscriber ) { <nl> - / / Create an Realm instance that is open for as long as the subscription is alive . <nl> - final DynamicRealm subscriberRealm = DynamicRealm . getInstance ( realm . getConfiguration ( ) ) ; <nl> - RealmQuery < DynamicRealmObject > queryClone = RealmQuery . copyDynamicQuery ( subscriberRealm , query ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - subscriberRealm . close ( ) ; <nl> - } <nl> - } ) ) ; <nl> - subscriber . onNext ( queryClone ) ; <nl> - subscriber . onCompleted ( ) ; <nl> - } <nl> - } ) ; <nl> + throw new RuntimeException ( " RealmQuery not supported yet . " ) ; <nl> } <nl> <nl> private void checkRxJavaAvailable ( ) {
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index fd932b2 . . a3e5103 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 44 , 28 + 44 , 22 @ @ import io . realm . internal . android . DebugAndroidLogger ; <nl> import io . realm . internal . android . ReleaseAndroidLogger ; <nl> import io . realm . internal . async . RealmThreadPoolExecutor ; <nl> import io . realm . internal . log . RealmLog ; <nl> + import io . realm . rx . RxObservableFactory ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> * Base class for all Realm instances . <nl> * <nl> * @ see io . realm . Realm <nl> + * @ see io . realm . DynamicRealm <nl> * / <nl> - abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> + public abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> protected static final long UNVERSIONED = - 1 ; <nl> private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; <nl> private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; <nl> private static final String CLOSED _ REALM _ MESSAGE = " This Realm instance has already been closed , making it unusable . " ; <nl> - private static final String DIFFERENT _ KEY _ MESSAGE = " Wrong key used to decrypt Realm . " ; <nl> private static final String CANNOT _ REFRESH _ INSIDE _ OF _ TRANSACTION _ MESSAGE = " Cannot refresh inside of a transaction . " ; <nl> <nl> - / / Map between all Realm file paths and all known configurations pointing to that file . <nl> - protected static final Map < String , List < RealmConfiguration > > globalPathConfigurationCache = <nl> - new HashMap < String , List < RealmConfiguration > > ( ) ; <nl> - <nl> - / / Reference count on currently open Realm instances ( both normal and dynamic ) . <nl> - protected static final Map < String , Integer > globalRealmFileReferenceCounter = new HashMap < String , Integer > ( ) ; <nl> - <nl> / / Map between a Handler and the canonical path to a Realm file <nl> protected static final Map < Handler , String > handlers = new ConcurrentHashMap < Handler , String > ( ) ; <nl> <nl> @ @ - 198 , 6 + 192 , 8 @ @ abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> public void removeChangeListener ( RealmChangeListener listener ) { <nl> checkIfValid ( ) ; <nl> changeListeners . remove ( listener ) ; <nl> + } <nl> + <nl> / * * <nl> * Returns an Rx Observable that monitors changes to this realm . It will output the last state when <nl> * subscribed to . <nl> @ @ - 211 , 8 + 207 , 6 @ @ abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; <nl> } <nl> <nl> - } <nl> - <nl> / * * <nl> * Removes all user - defined change listeners . <nl> * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 2f8ae48 . . 3231ff9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 32 , 6 + 32 , 8 @ @ import io . realm . internal . RealmProxyMediator ; <nl> import io . realm . internal . SharedGroup ; <nl> import io . realm . internal . modules . CompositeMediator ; <nl> import io . realm . internal . modules . FilterableMediator ; <nl> + import io . realm . rx . RealmObservableFactory ; <nl> + import io . realm . rx . RxObservableFactory ; <nl> <nl> / * * <nl> * A RealmConfiguration is used to setup a specific Realm instance . <nl> @ @ - 77 , 7 + 79 , 7 @ @ public class RealmConfiguration { <nl> private final boolean deleteRealmIfMigrationNeeded ; <nl> private final SharedGroup . Durability durability ; <nl> private final RealmProxyMediator schemaMediator ; <nl> - private final RxJavaFactory rxObservableFactory ; <nl> + private final RxObservableFactory rxObservableFactory ; <nl> <nl> private RealmConfiguration ( Builder builder ) { <nl> this . realmFolder = builder . folder ; <nl> @ @ - 89 , 7 + 91 , 7 @ @ public class RealmConfiguration { <nl> this . migration = builder . migration ; <nl> this . durability = builder . durability ; <nl> this . schemaMediator = createSchemaMediator ( builder ) ; <nl> - this . rxObservableFactory = new RxJavaFactory ( ) ; <nl> + this . rxObservableFactory = builder . rxFactory ; <nl> } <nl> <nl> public File getRealmFolder ( ) { <nl> @ @ - 145 , 7 + 147 , 12 @ @ public class RealmConfiguration { <nl> return canonicalPath ; <nl> } <nl> <nl> - RxObservableFactory getRxFactory ( ) { <nl> + / * * <nl> + * Returns the { @ link RxObservableFactory } used to create Rx Observables from Realm . <nl> + * <nl> + * @ return the factory instance used to create Rx Observables . <nl> + * / <nl> + public RxObservableFactory getRxFactory ( ) { <nl> return rxObservableFactory ; <nl> } <nl> <nl> @ @ - 164 , 6 + 171 , 7 @ @ public class RealmConfiguration { <nl> if ( ! Arrays . equals ( key , that . key ) ) return false ; <nl> if ( ! durability . equals ( that . durability ) ) return false ; <nl> if ( migration ! = null ? ! migration . equals ( that . migration ) : that . migration ! = null ) return false ; <nl> + if ( ! rxObservableFactory . equals ( that . rxObservableFactory ) ) return false ; <nl> return schemaMediator . equals ( that . schemaMediator ) ; <nl> } <nl> <nl> @ @ - 268 , 6 + 276 , 7 @ @ public class RealmConfiguration { <nl> private SharedGroup . Durability durability ; <nl> private HashSet < Object > modules = new HashSet < Object > ( ) ; <nl> private HashSet < Class < ? extends RealmObject > > debugSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; <nl> + private RxObservableFactory rxFactory = new RealmObservableFactory ( ) ; <nl> <nl> / * * <nl> * Creates an instance of the Builder for the RealmConfiguration . <nl> @ @ - 427 , 6 + 436 , 17 @ @ public class RealmConfiguration { <nl> return this ; <nl> } <nl> <nl> + / * * <nl> + * Sets the { @ link RxObservableFactory } used to create RxObservables from Realm . <nl> + * The default factory is { @ link RealmObservableFactory } . <nl> + * <nl> + * @ param factory factory to use . <nl> + * / <nl> + public Builder rxFactory ( RxObservableFactory factory ) { <nl> + rxFactory = factory ; <nl> + return this ; <nl> + } <nl> + <nl> private void addModule ( Object module ) { <nl> if ( module ! = null ) { <nl> checkModule ( module ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java <nl> deleted file mode 100644 <nl> index 5142cb2 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 134 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2015 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - import rx . Observable ; <nl> - import rx . Subscriber ; <nl> - import rx . functions . Action0 ; <nl> - import rx . subscriptions . Subscriptions ; <nl> - <nl> - / * * <nl> - * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . <nl> - * TODO Test compatibility with RxJava2 / RxMobile <nl> - * / <nl> - public class RxJavaFactory implements RxObservableFactory { <nl> - <nl> - private boolean rxJavaAvailble ; <nl> - <nl> - public RxJavaFactory ( ) { <nl> - try { <nl> - Class . forName ( " rx . Observable " ) ; <nl> - rxJavaAvailble = true ; <nl> - } catch ( ClassNotFoundException ignore ) { <nl> - rxJavaAvailble = false ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends BaseRealm > Observable < E > from ( final E realm ) { <nl> - checkRxJavaAvailable ( ) ; <nl> - return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super E > subscriber ) { <nl> - final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - subscriber . onNext ( realm ) ; <nl> - } <nl> - } ; <nl> - realm . addChangeListener ( listener ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - realm . removeChangeListener ( listener ) ; <nl> - } <nl> - } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . <nl> - subscriber . onNext ( realm ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> - checkRxJavaAvailable ( ) ; <nl> - return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> - final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - subscriber . onNext ( results ) ; <nl> - } <nl> - } ; <nl> - results . addChangeListener ( listener ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - results . removeChangeListener ( listener ) ; <nl> - } <nl> - } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . <nl> - subscriber . onNext ( results ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> - checkRxJavaAvailable ( ) ; <nl> - throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends RealmObject < E > > Observable < E > from ( final E object ) { <nl> - checkRxJavaAvailable ( ) ; <nl> - return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super E > subscriber ) { <nl> - final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - subscriber . onNext ( object ) ; <nl> - } <nl> - } ; <nl> - object . addChangeListener ( listener ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - object . removeChangeListener ( listener ) ; <nl> - } <nl> - } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . <nl> - subscriber . onNext ( object ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - private void checkRxJavaAvailable ( ) { <nl> - if ( ! rxJavaAvailble ) { <nl> - throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + <nl> - " Remember to add it as a compile dependency . See XXX for more details . " ) ; <nl> - } <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java <nl> deleted file mode 100644 <nl> index 0977392 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 53 + 0 , 0 @ @ <nl> - package io . realm ; <nl> - <nl> - import rx . Observable ; <nl> - <nl> - / * * <nl> - * Factory interface for creating Rx Observables from Realm classes . <nl> - * / <nl> - public interface RxObservableFactory { <nl> - <nl> - / * * <nl> - * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each <nl> - * update to the Realm . <nl> - * <nl> - * Realm observables are effectively hot observables as Realms auto - update . <nl> - * <nl> - * @ param realm RealmResults to listen to changes for . <nl> - * / <nl> - < E extends BaseRealm > Observable < E > from ( E realm ) ; <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmResults . It should emit the initial results when subscribed to and on each <nl> - * update to the results . <nl> - * <nl> - * RealmResults observables are effectively hot observables as RealmObjects auto - update . <nl> - * <nl> - * @ param results RealmResults to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each <nl> - * update to the list . <nl> - * <nl> - * RealmList observables are effectively hot observables as RealmLists auto - update . <nl> - * <nl> - * @ param list RealmObject to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> - <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update <nl> - * to the object . <nl> - * <nl> - * RealmObject observables are effectively hot observables as RealmObjects auto - update . <nl> - * <nl> - * @ param object RealmObject to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - < E extends RealmObject < E > > Observable < E > from ( E object ) ; <nl> - } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 718e705 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> @ @ - 0 , 0 + 1 , 147 @ @ <nl> + / * <nl> + * Copyright 2015 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . rx ; <nl> + <nl> + import io . realm . BaseRealm ; <nl> + import io . realm . DynamicRealm ; <nl> + import io . realm . DynamicRealmObject ; <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmChangeListener ; <nl> + import io . realm . RealmList ; <nl> + import io . realm . RealmObject ; <nl> + import io . realm . RealmResults ; <nl> + import rx . Observable ; <nl> + import rx . Subscriber ; <nl> + import rx . functions . Action0 ; <nl> + import rx . subscriptions . Subscriptions ; <nl> + <nl> + / * * <nl> + * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . <nl> + * <nl> + * @ see Realm # observable ( ) <nl> + * @ see RealmObject # observable ( ) <nl> + * @ see RealmResults # observable ( ) <nl> + * @ see DynamicRealm # observable ( ) <nl> + * @ see DynamicRealmObject # observable ( ) <nl> + * / <nl> + public final class RealmObservableFactory implements RxObservableFactory { <nl> + <nl> + private boolean rxJavaAvailble ; <nl> + <nl> + public RealmObservableFactory ( ) { <nl> + try { <nl> + Class . forName ( " rx . Observable " ) ; <nl> + rxJavaAvailble = true ; <nl> + } catch ( ClassNotFoundException ignore ) { <nl> + rxJavaAvailble = false ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends BaseRealm > Observable < E > from ( final E realm ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super E > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> + } ; <nl> + realm . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + realm . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( results ) ; <nl> + } <nl> + } ; <nl> + results . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + results . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( results ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < E > from ( final E object ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super E > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( object ) ; <nl> + } <nl> + } ; <nl> + object . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + object . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( object ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private void checkRxJavaAvailable ( ) { <nl> + if ( ! rxJavaAvailble ) { <nl> + throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + <nl> + " Remember to add it as a compile dependency . See https : / / realm . io / docs / java / latest / # rxjava for more details . " ) ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 0984f85 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> @ @ - 0 , 0 + 1 , 57 @ @ <nl> + package io . realm . rx ; <nl> + <nl> + import io . realm . BaseRealm ; <nl> + import io . realm . RealmList ; <nl> + import io . realm . RealmObject ; <nl> + import io . realm . RealmResults ; <nl> + import rx . Observable ; <nl> + <nl> + / * * <nl> + * Factory interface for creating Rx Observables from Realm classes . <nl> + * / <nl> + public interface RxObservableFactory { <nl> + <nl> + / * * <nl> + * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each <nl> + * update to the Realm . <nl> + * <nl> + * Realm observables are effectively hot observables as Realms auto - update . <nl> + * <nl> + * @ param realm RealmResults to listen to changes for . <nl> + * / <nl> + < E extends BaseRealm > Observable < E > from ( E realm ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a { @ link RealmResults } . It should emit the initial results when subscribed to and on <nl> + * each update to the results . <nl> + * <nl> + * RealmResults observables are effectively hot observables as RealmObjects auto - update . <nl> + * <nl> + * @ param results RealmResults to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each <nl> + * update to the list . <nl> + * <nl> + * RealmList observables are effectively hot observables as RealmLists auto - update . <nl> + * <nl> + * @ param list RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> + <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update <nl> + * to the object . <nl> + * <nl> + * RealmObject observables are effectively hot observables as RealmObjects auto - update . <nl> + * <nl> + * @ param object RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < E > from ( E object ) ; <nl> + }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 index 04ec43b . . 06a8f55 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 @ @ - 3 , 6 + 3 , 7 @ @ package io . realm ; 
 import android . test . AndroidTestCase ; 
 
 import java . util . List ; 
 + import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 @ @ - 224 , 31 + 225 , 6 @ @ public class RxJavaTests extends AndroidTestCase { 
 dynamicRealm . close ( ) ; 
 } 
 
 - public void testRealmQueryObservable ( ) { 
 - final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 - realm . beginTransaction ( ) ; 
 - realm . createObject ( AllTypes . class ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 - Subscription subscription = realm . where ( AllTypes . class ) . asObservable ( ) 
 - . map ( new Func1 < RealmQuery < AllTypes > , List < AllTypes > > ( ) { 
 - @ Override 
 - public List < AllTypes > call ( RealmQuery < AllTypes > query ) { 
 - return query . findAll ( ) ; 
 - } 
 - } ) 
 - . subscribeOn ( Schedulers . computation ( ) ) 
 - . subscribe ( new Action1 < List < AllTypes > > ( ) { 
 - @ Override 
 - public void call ( List < AllTypes > allTypes ) { 
 - assertEquals ( 1 , allTypes . size ( ) ) ; 
 - subscribedNotified . set ( true ) ; 
 - } 
 - } ) ; 
 - subscription . unsubscribe ( ) ; 
 - assertTrue ( subscribedNotified . get ( ) ) ; 
 - } 
 - 
 public void testUnsubscribe ( ) { 
 final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 Subscription subscription = realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { 
 @ @ - 263 , 4 + 239 , 32 @ @ public class RxJavaTests extends AndroidTestCase { 
 assertEquals ( 0 , realm . handlerController . changeListeners . size ( ) ) ; 
 } 
 
 + public void testUnsubscribeFromOtherThreadFails ( ) { 
 + final CountDownLatch unsubscribeCompleted = new CountDownLatch ( 1 ) ; 
 + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 + final Subscription subscription = realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { 
 + @ Override 
 + public void call ( Realm rxRealm ) { 
 + assertTrue ( rxRealm = = realm ) ; 
 + subscribedNotified . set ( true ) ; 
 + } 
 + } ) ; 
 + assertEquals ( 1 , realm . handlerController . changeListeners . size ( ) ) ; 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + subscription . unsubscribe ( ) ; 
 + fail ( ) ; 
 + } catch ( IllegalStateException ignored ) { 
 + } 
 + unsubscribeCompleted . countDown ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + TestHelper . awaitOrFail ( unsubscribeCompleted ) ; 
 + assertEquals ( 1 , realm . handlerController . changeListeners . size ( ) ) ; 
 + } 
 + 
 + 
 + 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 35211e7 . . 91640b1 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 56 , 7 + 56 , 7 @ @ import rx . Observable ; 
 * @ see Realm # where ( Class ) 
 * @ see RealmResults # where ( ) 
 * / 
 - public class RealmQuery < E extends RealmObject > implements { 
 + public class RealmQuery < E extends RealmObject > { 
 
 private BaseRealm realm ; 
 private Class < E > clazz ; 
 @ @ - 127 , 27 + 127 , 6 @ @ public class RealmQuery < E extends RealmObject > implements { 
 } 
 } 
 
 - / * * 
 - * Copies an existing query to another Realm instance . 
 - * This method is threadsafe and can be used to copy a { @ link RealmQuery } between threads . 
 - * 
 - * @ param realm Realm to run the copied query on 
 - * @ param query query to copy 
 - * @ param < E > type of elements in the query 
 - * @ return the copied query instance . 
 - * / 
 - public static < E extends RealmObject > RealmQuery < E > copyQuery ( Realm realm , RealmQuery < E > query ) { 
 - RealmQuery < E > copiedQuery = new RealmQuery < E > ( realm , query . clazz ) ; 
 - query . handoverTo ( copiedQuery ) ; 
 - return copiedQuery ; 
 - } 
 - 
 - public static RealmQuery < DynamicRealmObject > copyDynamicQuery ( DynamicRealm realm , RealmQuery < DynamicRealmObject > query ) { 
 - RealmQuery < DynamicRealmObject > copiedQuery = new RealmQuery < DynamicRealmObject > ( realm , query . className ) ; 
 - query . handoverTo ( copiedQuery ) ; 
 - return copiedQuery ; 
 - } 
 - 
 private RealmQuery ( Realm realm , Class < E > clazz ) { 
 this . realm = realm ; 
 this . clazz = clazz ; 
 @ @ - 1907 , 15 + 1886 , 7 @ @ public class RealmQuery < E extends RealmObject > implements { 
 } 
 } 
 
 - / * * 
 - * Move this query to another query object . That query object is allowed to be on another thread . 
 - * / 
 - private void handoverTo ( RealmQuery < E > copiedQuery ) { 
 - long handoverQuery = query . handoverQuery ( realm . sharedGroupManager . getNativePointer ( ) ) ; 
 - copiedQuery . query . acceptHandoverQuery ( handoverQuery ) ; 
 - } 
 - 
 - sprivate long getSourceRowIndexForFirstObject ( ) { 
 + private long getSourceRowIndexForFirstObject ( ) { 
 long rowIndex = this . query . find ( ) ; 
 if ( rowIndex < 0 ) { 
 return rowIndex ; 
 @ @ - 1941 , 30 + 1912 , 4 @ @ public class RealmQuery < E extends RealmObject > implements { 
 long handoverQueryPointer ( ) { 
 return query . handoverQuery ( realm . sharedGroupManager . getNativePointer ( ) ) ; 
 } 
 - 
 - / * * 
 - * Returns an Rx Observable that emits the RealmQuery and then completes . 
 - * 
 - * @ return RxJava Observable 
 - * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 - * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > 
 - * / 
 - @ SuppressWarnings ( " unchecked " ) 
 - public Observable < RealmQuery < E > > asObservable ( ) { 
 - if ( realm instanceof Realm ) { 
 - return realm . configuration . getRxFactory ( ) . from ( ( Realm ) realm , this ) ; 
 - } else if ( realm instanceof DynamicRealm ) { 
 - DynamicRealm dynamicRealm = ( DynamicRealm ) realm ; 
 - RealmQuery < DynamicRealmObject > dynamicQuery = ( RealmQuery < DynamicRealmObject > ) this ; 
 - @ SuppressWarnings ( " UnnecessaryLocalVariable " ) 
 - Observable results = realm . configuration . getRxFactory ( ) . from ( dynamicRealm , dynamicQuery ) ; 
 - return results ; 
 - } else { 
 - throw new UnsupportedOperationException ( realm . getClass ( ) + " not supported " ) ; 
 - } 
 - } 
 - 
 - public RealmQuery < E > clone ( ) { 
 - return new RealmQuery < E > ( this ) ; 
 - } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java 
 deleted file mode 100644 
 index d6c24e6 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java 
 + + + / dev / null 
 @ @ - 1 , 219 + 0 , 0 @ @ 
 - / / package io . realm . rx ; 
 - / / 
 - / / import io . realm . DynamicRealm ; 
 - / / import io . realm . DynamicRealmObject ; 
 - / / import io . realm . Realm ; 
 - / / import io . realm . RealmChangeListener ; 
 - / / import io . realm . RealmList ; 
 - / / import io . realm . RealmObject ; 
 - / / import io . realm . RealmQuery ; 
 - / / import io . realm . RealmResults ; 
 - / / import rx . Observable ; 
 - / / import rx . Subscriber ; 
 - / / import rx . functions . Action0 ; 
 - / / import rx . subscriptions . Subscriptions ; 
 - / / 
 - / / / * * 
 - / / * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects 
 - / / * before emitting them . This is effectively a snapshot of the Realm data at a given point in time . 
 - / / * 
 - / / * This has the following implications : 
 - / / * 
 - / / * - Increased memory usage , as all fields including references are copied to the Java heap . 
 - / / * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm and the 
 - / / * object will no longer automatically update either . 
 - / / * - All guarantees of staying consistent with other data from persisted Realm objects are gone . 
 - / / * - The object is no longer thread - confined and can be parsed between threads . 
 - / / * 
 - / / * @ see { @ link io . realm . Realm # copyFromRealm ( RealmObject ) } 
 - / / * / 
 - / / public class DetachedCopyObservableFactory implements RxObservableFactory { 
 - / / 
 - / / private final int maxDepth ; 
 - / / private boolean rxJavaAvailble ; 
 - / / 
 - / / / * * 
 - / / * Creates an instance of this factory class . Detached objects also copy all referenced objects . 
 - / / * / 
 - / / public DetachedCopyObservableFactory ( ) { 
 - / / this ( Integer . MAX _ VALUE ) ; 
 - / / } 
 - / / 
 - / / / * * 
 - / / * Creates an instance of this factory class . Detached copies only contain references up to { @ code maxDepth } away . 
 - / / * 
 - / / * @ param maxDepth maximum distance from root object that objects are copied . References above this limit will be 
 - / / * { @ code null } . 
 - / / * @ see io . realm . Realm # copyFromRealm ( RealmObject , int ) 
 - / / * / 
 - / / public DetachedCopyObservableFactory ( int maxDepth ) { 
 - / / this . maxDepth = maxDepth ; 
 - / / try { 
 - / / Class . forName ( " rx . Observable " ) ; 
 - / / rxJavaAvailble = true ; 
 - / / } catch ( ClassNotFoundException ignore ) { 
 - / / rxJavaAvailble = false ; 
 - / / } 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public Observable < Realm > from ( final Realm realm ) { 
 - / / checkRxJavaAvailable ( ) ; 
 - / / return Observable . create ( new Observable . OnSubscribe < Realm > ( ) { 
 - / / @ Override 
 - / / public void call ( final Subscriber < ? super Realm > subscriber ) { 
 - / / final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - / / @ Override 
 - / / public void onChange ( ) { 
 - / / subscriber . onNext ( realm ) ; 
 - / / } 
 - / / } ; 
 - / / realm . addChangeListener ( listener ) ; 
 - / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - / / @ Override 
 - / / public void call ( ) { 
 - / / realm . removeChangeListener ( listener ) ; 
 - / / } 
 - / / } ) ) ; 
 - / / 
 - / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / / / value . 
 - / / subscriber . onNext ( realm ) ; 
 - / / } 
 - / / } ) ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public Observable < DynamicRealm > from ( final DynamicRealm realm ) { 
 - / / checkRxJavaAvailable ( ) ; 
 - / / return Observable . create ( new Observable . OnSubscribe < DynamicRealm > ( ) { 
 - / / @ Override 
 - / / public void call ( final Subscriber < ? super DynamicRealm > subscriber ) { 
 - / / final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - / / @ Override 
 - / / public void onChange ( ) { 
 - / / subscriber . onNext ( realm ) ; 
 - / / } 
 - / / } ; 
 - / / realm . addChangeListener ( listener ) ; 
 - / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - / / @ Override 
 - / / public void call ( ) { 
 - / / realm . removeChangeListener ( listener ) ; 
 - / / } 
 - / / } ) ) ; 
 - / / 
 - / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / / / value . 
 - / / subscriber . onNext ( realm ) ; 
 - / / } 
 - / / } ) ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public < E extends RealmObject > Observable < RealmResults < E > > from ( Realm realm , RealmResults < E > results ) { 
 - / / return null ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public Observable < RealmResults < DynamicRealmObject > > from ( DynamicRealm realm , RealmResults < DynamicRealmObject > results ) { 
 - / / return null ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public < E extends RealmObject > Observable < RealmList < E > > from ( Realm realm , RealmList < E > list ) { 
 - / / return null ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public Observable < RealmList < DynamicRealmObject > > from ( DynamicRealm realm , RealmList < DynamicRealmObject > list ) { 
 - / / return null ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public < E extends RealmObject > Observable < E > from ( Realm realm , E object ) { 
 - / / return null ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public Observable < DynamicRealmObject > from ( DynamicRealm realm , DynamicRealmObject object ) { 
 - / / return null ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public < E extends RealmObject > Observable < RealmQuery < E > > from ( Realm realm , RealmQuery < E > query ) { 
 - / / return null ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public Observable < RealmQuery < DynamicRealmObject > > from ( DynamicRealm realm , RealmQuery < DynamicRealmObject > query ) { 
 - / / return null ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 - / / checkRxJavaAvailable ( ) ; 
 - / / return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 - / / @ Override 
 - / / public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 - / / final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - / / @ Override 
 - / / public void onChange ( ) { 
 - / / subscriber . onNext ( results ) ; 
 - / / } 
 - / / } ; 
 - / / results . addChangeListener ( listener ) ; 
 - / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - / / @ Override 
 - / / public void call ( ) { 
 - / / results . removeChangeListener ( listener ) ; 
 - / / } 
 - / / } ) ) ; 
 - / / 
 - / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / / / value . 
 - / / subscriber . onNext ( results ) ; 
 - / / } 
 - / / } ) ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 - / / checkRxJavaAvailable ( ) ; 
 - / / throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public < E extends RealmObject > Observable < E > from ( final E object ) { 
 - / / checkRxJavaAvailable ( ) ; 
 - / / return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 - / / @ Override 
 - / / public void call ( final Subscriber < ? super E > subscriber ) { 
 - / / final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - / / @ Override 
 - / / public void onChange ( ) { 
 - / / subscriber . onNext ( object ) ; 
 - / / } 
 - / / } ; 
 - / / object . addChangeListener ( listener ) ; 
 - / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - / / @ Override 
 - / / public void call ( ) { 
 - / / object . removeChangeListener ( listener ) ; 
 - / / } 
 - / / } ) ) ; 
 - / / 
 - / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / / / value . 
 - / / subscriber . onNext ( object ) ; 
 - / / } 
 - / / } ) ; 
 - / / } 
 - / / 
 - / / private void checkRxJavaAvailable ( ) { 
 - / / if ( ! rxJavaAvailble ) { 
 - / / throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + 
 - / / " Remember to add it as a compile dependency . See https : / / realm . io / docs / java / latest / # rxjava for more details . " ) ; 
 - / / } 
 - / / } 
 - / / } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 index 76bb47f . . c743de2 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 @ @ - 35 , 7 + 35 , 6 @ @ import rx . subscriptions . Subscriptions ; 
 * @ see Realm # asObservable ( ) 
 * @ see RealmObject # asObservable ( ) 
 * @ see RealmResults # asObservable ( ) 
 - * @ see RealmQuery # asObservable ( ) 
 * @ see DynamicRealm # asObservable ( ) 
 * @ see DynamicRealmObject # asObservable ( ) 
 * / 
 @ @ - 61 , 7 + 60 , 9 @ @ public class RealmObservableFactory implements RxObservableFactory { 
 final RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 - subscriber . onNext ( realm ) ; 
 + if ( ! subscriber . isUnsubscribed ( ) ) { 
 + subscriber . onNext ( realm ) ; 
 + } 
 } 
 } ; 
 realm . addChangeListener ( listener ) ; 
 @ @ - 71 , 9 + 72 , 6 @ @ public class RealmObservableFactory implements RxObservableFactory { 
 realm . removeChangeListener ( listener ) ; 
 } 
 } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . 
 subscriber . onNext ( realm ) ; 
 } 
 } ) ; 
 @ @ - 88 , 7 + 86 , 9 @ @ public class RealmObservableFactory implements RxObservableFactory { 
 final RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 - subscriber . onNext ( realm ) ; 
 + if ( ! subscriber . isUnsubscribed ( ) ) { 
 + subscriber . onNext ( realm ) ; 
 + } 
 } 
 } ; 
 realm . addChangeListener ( listener ) ; 
 @ @ - 125 , 7 + 125 , 9 @ @ public class RealmObservableFactory implements RxObservableFactory { 
 final RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 - subscriber . onNext ( results ) ; 
 + if ( ! subscriber . isUnsubscribed ( ) ) { 
 + subscriber . onNext ( results ) ; 
 + } 
 } 
 } ; 
 results . addChangeListener ( listener ) ; 
 @ @ - 178 , 7 + 180 , 9 @ @ public class RealmObservableFactory implements RxObservableFactory { 
 final RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 - subscriber . onNext ( object ) ; 
 + if ( ! subscriber . isUnsubscribed ( ) ) { 
 + subscriber . onNext ( object ) ; 
 + } 
 } 
 } ; 
 object . addChangeListener ( listener ) ; 
 @ @ - 198 , 47 + 202 , 12 @ @ public class RealmObservableFactory implements RxObservableFactory { 
 
 @ Override 
 public < E extends RealmObject > Observable < RealmQuery < E > > from ( final Realm realm , final RealmQuery < E > query ) { 
 - checkRxJavaAvailable ( ) ; 
 - / / Create copy of the RealmQuery on the current thread and prepare it for handover 
 - final RealmQuery < E > queryCopy = query . clone ( ) ; 
 - 
 - return Observable . create ( new Observable . OnSubscribe < RealmQuery < E > > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super RealmQuery < E > > subscriber ) { 
 - / / Create an Realm instance that is open for as long as the subscription is alive . 
 - final Realm subscriberRealm = Realm . getInstance ( realm . getConfiguration ( ) ) ; 
 - RealmQuery < E > queryClone = RealmQuery . copyQuery ( subscriberRealm , query ) ; / / TODO Can I steal it ? 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - subscriberRealm . close ( ) ; 
 - } 
 - } ) ) ; 
 - subscriber . onNext ( queryClone ) ; 
 - subscriber . onCompleted ( ) ; 
 - } 
 - } ) ; 
 + throw new RuntimeException ( " RealmQuery not supported yet . " ) ; 
 } 
 
 @ Override 
 public Observable < RealmQuery < DynamicRealmObject > > from ( final DynamicRealm realm , final RealmQuery < DynamicRealmObject > query ) { 
 - checkRxJavaAvailable ( ) ; 
 - return Observable . create ( new Observable . OnSubscribe < RealmQuery < DynamicRealmObject > > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super RealmQuery < DynamicRealmObject > > subscriber ) { 
 - / / Create an Realm instance that is open for as long as the subscription is alive . 
 - final DynamicRealm subscriberRealm = DynamicRealm . getInstance ( realm . getConfiguration ( ) ) ; 
 - RealmQuery < DynamicRealmObject > queryClone = RealmQuery . copyDynamicQuery ( subscriberRealm , query ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - subscriberRealm . close ( ) ; 
 - } 
 - } ) ) ; 
 - subscriber . onNext ( queryClone ) ; 
 - subscriber . onCompleted ( ) ; 
 - } 
 - } ) ; 
 + throw new RuntimeException ( " RealmQuery not supported yet . " ) ; 
 } 
 
 private void checkRxJavaAvailable ( ) {

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index fd932b2 . . a3e5103 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 44 , 28 + 44 , 22 @ @ import io . realm . internal . android . DebugAndroidLogger ; 
 import io . realm . internal . android . ReleaseAndroidLogger ; 
 import io . realm . internal . async . RealmThreadPoolExecutor ; 
 import io . realm . internal . log . RealmLog ; 
 + import io . realm . rx . RxObservableFactory ; 
 import rx . Observable ; 
 
 / * * 
 * Base class for all Realm instances . 
 * 
 * @ see io . realm . Realm 
 + * @ see io . realm . DynamicRealm 
 * / 
 - abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 + public abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 protected static final long UNVERSIONED = - 1 ; 
 private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; 
 private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; 
 private static final String CLOSED _ REALM _ MESSAGE = " This Realm instance has already been closed , making it unusable . " ; 
 - private static final String DIFFERENT _ KEY _ MESSAGE = " Wrong key used to decrypt Realm . " ; 
 private static final String CANNOT _ REFRESH _ INSIDE _ OF _ TRANSACTION _ MESSAGE = " Cannot refresh inside of a transaction . " ; 
 
 - / / Map between all Realm file paths and all known configurations pointing to that file . 
 - protected static final Map < String , List < RealmConfiguration > > globalPathConfigurationCache = 
 - new HashMap < String , List < RealmConfiguration > > ( ) ; 
 - 
 - / / Reference count on currently open Realm instances ( both normal and dynamic ) . 
 - protected static final Map < String , Integer > globalRealmFileReferenceCounter = new HashMap < String , Integer > ( ) ; 
 - 
 / / Map between a Handler and the canonical path to a Realm file 
 protected static final Map < Handler , String > handlers = new ConcurrentHashMap < Handler , String > ( ) ; 
 
 @ @ - 198 , 6 + 192 , 8 @ @ abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 public void removeChangeListener ( RealmChangeListener listener ) { 
 checkIfValid ( ) ; 
 changeListeners . remove ( listener ) ; 
 + } 
 + 
 / * * 
 * Returns an Rx Observable that monitors changes to this realm . It will output the last state when 
 * subscribed to . 
 @ @ - 211 , 8 + 207 , 6 @ @ abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; 
 } 
 
 - } 
 - 
 / * * 
 * Removes all user - defined change listeners . 
 * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 2f8ae48 . . 3231ff9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 32 , 6 + 32 , 8 @ @ import io . realm . internal . RealmProxyMediator ; 
 import io . realm . internal . SharedGroup ; 
 import io . realm . internal . modules . CompositeMediator ; 
 import io . realm . internal . modules . FilterableMediator ; 
 + import io . realm . rx . RealmObservableFactory ; 
 + import io . realm . rx . RxObservableFactory ; 
 
 / * * 
 * A RealmConfiguration is used to setup a specific Realm instance . 
 @ @ - 77 , 7 + 79 , 7 @ @ public class RealmConfiguration { 
 private final boolean deleteRealmIfMigrationNeeded ; 
 private final SharedGroup . Durability durability ; 
 private final RealmProxyMediator schemaMediator ; 
 - private final RxJavaFactory rxObservableFactory ; 
 + private final RxObservableFactory rxObservableFactory ; 
 
 private RealmConfiguration ( Builder builder ) { 
 this . realmFolder = builder . folder ; 
 @ @ - 89 , 7 + 91 , 7 @ @ public class RealmConfiguration { 
 this . migration = builder . migration ; 
 this . durability = builder . durability ; 
 this . schemaMediator = createSchemaMediator ( builder ) ; 
 - this . rxObservableFactory = new RxJavaFactory ( ) ; 
 + this . rxObservableFactory = builder . rxFactory ; 
 } 
 
 public File getRealmFolder ( ) { 
 @ @ - 145 , 7 + 147 , 12 @ @ public class RealmConfiguration { 
 return canonicalPath ; 
 } 
 
 - RxObservableFactory getRxFactory ( ) { 
 + / * * 
 + * Returns the { @ link RxObservableFactory } used to create Rx Observables from Realm . 
 + * 
 + * @ return the factory instance used to create Rx Observables . 
 + * / 
 + public RxObservableFactory getRxFactory ( ) { 
 return rxObservableFactory ; 
 } 
 
 @ @ - 164 , 6 + 171 , 7 @ @ public class RealmConfiguration { 
 if ( ! Arrays . equals ( key , that . key ) ) return false ; 
 if ( ! durability . equals ( that . durability ) ) return false ; 
 if ( migration ! = null ? ! migration . equals ( that . migration ) : that . migration ! = null ) return false ; 
 + if ( ! rxObservableFactory . equals ( that . rxObservableFactory ) ) return false ; 
 return schemaMediator . equals ( that . schemaMediator ) ; 
 } 
 
 @ @ - 268 , 6 + 276 , 7 @ @ public class RealmConfiguration { 
 private SharedGroup . Durability durability ; 
 private HashSet < Object > modules = new HashSet < Object > ( ) ; 
 private HashSet < Class < ? extends RealmObject > > debugSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; 
 + private RxObservableFactory rxFactory = new RealmObservableFactory ( ) ; 
 
 / * * 
 * Creates an instance of the Builder for the RealmConfiguration . 
 @ @ - 427 , 6 + 436 , 17 @ @ public class RealmConfiguration { 
 return this ; 
 } 
 
 + / * * 
 + * Sets the { @ link RxObservableFactory } used to create RxObservables from Realm . 
 + * The default factory is { @ link RealmObservableFactory } . 
 + * 
 + * @ param factory factory to use . 
 + * / 
 + public Builder rxFactory ( RxObservableFactory factory ) { 
 + rxFactory = factory ; 
 + return this ; 
 + } 
 + 
 private void addModule ( Object module ) { 
 if ( module ! = null ) { 
 checkModule ( module ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java 
 deleted file mode 100644 
 index 5142cb2 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java 
 + + + / dev / null 
 @ @ - 1 , 134 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2015 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - import rx . Observable ; 
 - import rx . Subscriber ; 
 - import rx . functions . Action0 ; 
 - import rx . subscriptions . Subscriptions ; 
 - 
 - / * * 
 - * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . 
 - * TODO Test compatibility with RxJava2 / RxMobile 
 - * / 
 - public class RxJavaFactory implements RxObservableFactory { 
 - 
 - private boolean rxJavaAvailble ; 
 - 
 - public RxJavaFactory ( ) { 
 - try { 
 - Class . forName ( " rx . Observable " ) ; 
 - rxJavaAvailble = true ; 
 - } catch ( ClassNotFoundException ignore ) { 
 - rxJavaAvailble = false ; 
 - } 
 - } 
 - 
 - @ Override 
 - public < E extends BaseRealm > Observable < E > from ( final E realm ) { 
 - checkRxJavaAvailable ( ) ; 
 - return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super E > subscriber ) { 
 - final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - subscriber . onNext ( realm ) ; 
 - } 
 - } ; 
 - realm . addChangeListener ( listener ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - realm . removeChangeListener ( listener ) ; 
 - } 
 - } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . 
 - subscriber . onNext ( realm ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 - checkRxJavaAvailable ( ) ; 
 - return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 - final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - subscriber . onNext ( results ) ; 
 - } 
 - } ; 
 - results . addChangeListener ( listener ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - results . removeChangeListener ( listener ) ; 
 - } 
 - } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . 
 - subscriber . onNext ( results ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 - checkRxJavaAvailable ( ) ; 
 - throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 - } 
 - 
 - @ Override 
 - public < E extends RealmObject < E > > Observable < E > from ( final E object ) { 
 - checkRxJavaAvailable ( ) ; 
 - return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super E > subscriber ) { 
 - final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - subscriber . onNext ( object ) ; 
 - } 
 - } ; 
 - object . addChangeListener ( listener ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - object . removeChangeListener ( listener ) ; 
 - } 
 - } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . 
 - subscriber . onNext ( object ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - private void checkRxJavaAvailable ( ) { 
 - if ( ! rxJavaAvailble ) { 
 - throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + 
 - " Remember to add it as a compile dependency . See XXX for more details . " ) ; 
 - } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java 
 deleted file mode 100644 
 index 0977392 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java 
 + + + / dev / null 
 @ @ - 1 , 53 + 0 , 0 @ @ 
 - package io . realm ; 
 - 
 - import rx . Observable ; 
 - 
 - / * * 
 - * Factory interface for creating Rx Observables from Realm classes . 
 - * / 
 - public interface RxObservableFactory { 
 - 
 - / * * 
 - * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each 
 - * update to the Realm . 
 - * 
 - * Realm observables are effectively hot observables as Realms auto - update . 
 - * 
 - * @ param realm RealmResults to listen to changes for . 
 - * / 
 - < E extends BaseRealm > Observable < E > from ( E realm ) ; 
 - 
 - / * * 
 - * Creates an Observable for a RealmResults . It should emit the initial results when subscribed to and on each 
 - * update to the results . 
 - * 
 - * RealmResults observables are effectively hot observables as RealmObjects auto - update . 
 - * 
 - * @ param results RealmResults to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 - 
 - / * * 
 - * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each 
 - * update to the list . 
 - * 
 - * RealmList observables are effectively hot observables as RealmLists auto - update . 
 - * 
 - * @ param list RealmObject to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 - 
 - 
 - / * * 
 - * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update 
 - * to the object . 
 - * 
 - * RealmObject observables are effectively hot observables as RealmObjects auto - update . 
 - * 
 - * @ param object RealmObject to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - < E extends RealmObject < E > > Observable < E > from ( E object ) ; 
 - } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 new file mode 100644 
 index 0000000 . . 718e705 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 @ @ - 0 , 0 + 1 , 147 @ @ 
 + / * 
 + * Copyright 2015 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . rx ; 
 + 
 + import io . realm . BaseRealm ; 
 + import io . realm . DynamicRealm ; 
 + import io . realm . DynamicRealmObject ; 
 + import io . realm . Realm ; 
 + import io . realm . RealmChangeListener ; 
 + import io . realm . RealmList ; 
 + import io . realm . RealmObject ; 
 + import io . realm . RealmResults ; 
 + import rx . Observable ; 
 + import rx . Subscriber ; 
 + import rx . functions . Action0 ; 
 + import rx . subscriptions . Subscriptions ; 
 + 
 + / * * 
 + * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . 
 + * 
 + * @ see Realm # observable ( ) 
 + * @ see RealmObject # observable ( ) 
 + * @ see RealmResults # observable ( ) 
 + * @ see DynamicRealm # observable ( ) 
 + * @ see DynamicRealmObject # observable ( ) 
 + * / 
 + public final class RealmObservableFactory implements RxObservableFactory { 
 + 
 + private boolean rxJavaAvailble ; 
 + 
 + public RealmObservableFactory ( ) { 
 + try { 
 + Class . forName ( " rx . Observable " ) ; 
 + rxJavaAvailble = true ; 
 + } catch ( ClassNotFoundException ignore ) { 
 + rxJavaAvailble = false ; 
 + } 
 + } 
 + 
 + @ Override 
 + public < E extends BaseRealm > Observable < E > from ( final E realm ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super E > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( realm ) ; 
 + } 
 + } ; 
 + realm . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + realm . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( realm ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( results ) ; 
 + } 
 + } ; 
 + results . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + results . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( results ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 + checkRxJavaAvailable ( ) ; 
 + throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < E > from ( final E object ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super E > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( object ) ; 
 + } 
 + } ; 
 + object . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + object . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( object ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private void checkRxJavaAvailable ( ) { 
 + if ( ! rxJavaAvailble ) { 
 + throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + 
 + " Remember to add it as a compile dependency . See https : / / realm . io / docs / java / latest / # rxjava for more details . " ) ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 new file mode 100644 
 index 0000000 . . 0984f85 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package io . realm . rx ; 
 + 
 + import io . realm . BaseRealm ; 
 + import io . realm . RealmList ; 
 + import io . realm . RealmObject ; 
 + import io . realm . RealmResults ; 
 + import rx . Observable ; 
 + 
 + / * * 
 + * Factory interface for creating Rx Observables from Realm classes . 
 + * / 
 + public interface RxObservableFactory { 
 + 
 + / * * 
 + * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each 
 + * update to the Realm . 
 + * 
 + * Realm observables are effectively hot observables as Realms auto - update . 
 + * 
 + * @ param realm RealmResults to listen to changes for . 
 + * / 
 + < E extends BaseRealm > Observable < E > from ( E realm ) ; 
 + 
 + / * * 
 + * Creates an Observable for a { @ link RealmResults } . It should emit the initial results when subscribed to and on 
 + * each update to the results . 
 + * 
 + * RealmResults observables are effectively hot observables as RealmObjects auto - update . 
 + * 
 + * @ param results RealmResults to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 + 
 + / * * 
 + * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each 
 + * update to the list . 
 + * 
 + * RealmList observables are effectively hot observables as RealmLists auto - update . 
 + * 
 + * @ param list RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 + 
 + 
 + / * * 
 + * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update 
 + * to the object . 
 + * 
 + * RealmObject observables are effectively hot observables as RealmObjects auto - update . 
 + * 
 + * @ param object RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < E > from ( E object ) ; 
 + }
