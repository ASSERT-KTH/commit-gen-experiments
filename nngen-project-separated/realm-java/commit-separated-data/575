BLEU SCORE: 0.03283637368030199

TEST MSG: move SyncObjectServerFacade . java to objectserver directory
GENERATED MSG: Make BaseRealm package protected again

TEST DIFF (one line): diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / SyncObjectServerFacade . java b / realm / realm - library / src / objectServer / java / io / realm / internal / SyncObjectServerFacade . java <nl> deleted file mode 100644 <nl> index 5b925e9 . . 0000000 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / SyncObjectServerFacade . java <nl> + + + / dev / null <nl> @ @ - 1 , 100 + 0 , 0 @ @ <nl> - package io . realm . internal . objectserver ; <nl> - <nl> - <nl> - import android . annotation . SuppressLint ; <nl> - import android . content . Context ; <nl> - <nl> - import java . lang . reflect . InvocationTargetException ; <nl> - import java . lang . reflect . Method ; <nl> - <nl> - import io . realm . RealmConfiguration ; <nl> - import io . realm . Session ; <nl> - import io . realm . SyncConfiguration ; <nl> - import io . realm . SyncManager ; <nl> - import io . realm . exceptions . RealmException ; <nl> - import io . realm . internal . Keep ; <nl> - import io . realm . internal . ObjectServerFacade ; <nl> - <nl> - @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade <nl> - @ Keep <nl> - public class SyncObjectServerFacade extends ObjectServerFacade { <nl> - <nl> - private static final String WRONG _ TYPE _ OF _ CONFIGURATION = <nl> - " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; <nl> - @ SuppressLint ( " StaticFieldLeak " ) / / <nl> - private static Context applicationContext ; <nl> - <nl> - @ Override <nl> - public void init ( Context context ) { <nl> - / / Trying to keep things out the public API is no fun : / <nl> - / / Just use reflection on init . It is a one - time method call so should be acceptable . <nl> - / / noinspection TryWithIdenticalCatches <nl> - try { <nl> - / / FIXME : Reflection can be avoided by moving some functions of SyncManager and ObjectServer out of public <nl> - Class < ? > syncManager = Class . forName ( " io . realm . ObjectServer " ) ; <nl> - Method method = syncManager . getDeclaredMethod ( " init " , Context . class ) ; <nl> - method . setAccessible ( true ) ; <nl> - method . invoke ( null , context ) ; <nl> - } catch ( NoSuchMethodException e ) { <nl> - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> - } catch ( InvocationTargetException e ) { <nl> - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> - } catch ( IllegalAccessException e ) { <nl> - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> - } catch ( ClassNotFoundException e ) { <nl> - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> - } <nl> - if ( applicationContext = = null ) { <nl> - applicationContext = context ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { <nl> - if ( configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . notifyCommit ( lastSnapshotVersion ) ; <nl> - } else { <nl> - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void realmClosed ( RealmConfiguration configuration ) { <nl> - if ( configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . getSyncPolicy ( ) . onRealmClosed ( session ) ; <nl> - } else { <nl> - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void realmOpened ( RealmConfiguration configuration ) { <nl> - if ( configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . getSyncPolicy ( ) . onRealmOpened ( session ) ; <nl> - } else { <nl> - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { <nl> - if ( config instanceof SyncConfiguration ) { <nl> - SyncConfiguration syncConfig = ( SyncConfiguration ) config ; <nl> - String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; <nl> - String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; <nl> - return new String [ ] { rosServerUrl , rosUserToken } ; <nl> - } else { <nl> - return new String [ 2 ] ; <nl> - } <nl> - } <nl> - <nl> - static Context getApplicationContext ( ) { <nl> - return applicationContext ; <nl> - } <nl> - } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncObjectServerFacade . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncObjectServerFacade . java <nl> new file mode 100644 <nl> index 0000000 . . b8d10af <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncObjectServerFacade . java <nl> @ @ - 0 , 0 + 1 , 115 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . internal . objectserver ; <nl> + <nl> + import android . annotation . SuppressLint ; <nl> + import android . content . Context ; <nl> + <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + import java . lang . reflect . Method ; <nl> + <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . Session ; <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncManager ; <nl> + import io . realm . exceptions . RealmException ; <nl> + import io . realm . internal . Keep ; <nl> + import io . realm . internal . ObjectServerFacade ; <nl> + <nl> + @ SuppressWarnings ( { " unused " , " WeakerAccess " } ) / / Used through reflection . See ObjectServerFacade <nl> + @ Keep <nl> + public class SyncObjectServerFacade extends ObjectServerFacade { <nl> + <nl> + private static final String WRONG _ TYPE _ OF _ CONFIGURATION = <nl> + " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; <nl> + @ SuppressLint ( " StaticFieldLeak " ) / / <nl> + private static Context applicationContext ; <nl> + <nl> + @ Override <nl> + public void init ( Context context ) { <nl> + / / Trying to keep things out the public API is no fun : / <nl> + / / Just use reflection on init . It is a one - time method call so should be acceptable . <nl> + / / noinspection TryWithIdenticalCatches <nl> + try { <nl> + / / FIXME : Reflection can be avoided by moving some functions of SyncManager and ObjectServer out of public <nl> + Class < ? > syncManager = Class . forName ( " io . realm . ObjectServer " ) ; <nl> + Method method = syncManager . getDeclaredMethod ( " init " , Context . class ) ; <nl> + method . setAccessible ( true ) ; <nl> + method . invoke ( null , context ) ; <nl> + } catch ( NoSuchMethodException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } catch ( InvocationTargetException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } catch ( IllegalAccessException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } catch ( ClassNotFoundException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } <nl> + if ( applicationContext = = null ) { <nl> + applicationContext = context ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . notifyCommit ( lastSnapshotVersion ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void realmClosed ( RealmConfiguration configuration ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . getSyncPolicy ( ) . onRealmClosed ( session ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void realmOpened ( RealmConfiguration configuration ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . getSyncPolicy ( ) . onRealmOpened ( session ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { <nl> + if ( config instanceof SyncConfiguration ) { <nl> + SyncConfiguration syncConfig = ( SyncConfiguration ) config ; <nl> + String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; <nl> + String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; <nl> + return new String [ ] { rosServerUrl , rosUserToken } ; <nl> + } else { <nl> + return new String [ 2 ] ; <nl> + } <nl> + } <nl> + <nl> + static Context getApplicationContext ( ) { <nl> + return applicationContext ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index e4b8fae . . 56cf037 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ import rx . Observable ; <nl> * @ see io . realm . DynamicRealm <nl> * / <nl> @ SuppressWarnings ( " WeakerAccess " ) <nl> - public abstract class BaseRealm implements Closeable { <nl> + abstract class BaseRealm implements Closeable { <nl> protected static final long UNVERSIONED = - 1 ; <nl> private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = <nl> " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; <nl> @ @ - 61 , 7 + 61 , 7 @ @ public abstract class BaseRealm implements Closeable { <nl> " Changing Realm data can only be done from inside a transaction . " ; <nl> <nl> / / Thread pool for all async operations ( Query & transaction ) <nl> - public volatile static Context applicationContext ; <nl> + volatile static Context applicationContext ; <nl> <nl> / / Thread pool for all async operations ( Query & transaction ) <nl> static final RealmThreadPoolExecutor asyncTaskExecutor = RealmThreadPoolExecutor . newDefaultExecutor ( ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java <nl> index 5422735 . . c750708 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ public class ObjectServerFacade { <nl> static { <nl> / / noinspection TryWithIdenticalCatches <nl> try { <nl> - Class syncFacadeClass = Class . forName ( " io . realm . internal . SyncObjectServerFacade " ) ; <nl> + Class syncFacadeClass = Class . forName ( " io . realm . internal . objectserver . SyncObjectServerFacade " ) ; <nl> syncFacade = ( ObjectServerFacade ) syncFacadeClass . newInstance ( ) ; <nl> } catch ( ClassNotFoundException ignored ) { <nl> } catch ( InstantiationException e ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java <nl> deleted file mode 100644 <nl> index 7ea800c . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java <nl> + + + / dev / null <nl> @ @ - 1 , 88 + 0 , 0 @ @ <nl> - package io . realm . internal ; <nl> - <nl> - <nl> - import android . content . Context ; <nl> - <nl> - import java . lang . reflect . InvocationTargetException ; <nl> - import java . lang . reflect . Method ; <nl> - <nl> - import io . realm . RealmConfiguration ; <nl> - import io . realm . Session ; <nl> - import io . realm . SyncConfiguration ; <nl> - import io . realm . SyncManager ; <nl> - import io . realm . exceptions . RealmException ; <nl> - import io . realm . internal . objectserver . SessionStore ; <nl> - import io . realm . internal . objectserver . SyncSession ; <nl> - <nl> - @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade <nl> - @ Keep <nl> - public class SyncObjectServerFacade extends ObjectServerFacade { <nl> - <nl> - private static final String WRONG _ TYPE _ OF _ CONFIGURATION = <nl> - " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; <nl> - <nl> - @ Override <nl> - public void init ( Context context ) { <nl> - / / Trying to keep things out the public API is no fun : / <nl> - / / Just use reflection on init . It is a one - time method call so should be acceptable . <nl> - try { <nl> - Class < ? > syncManager = Class . forName ( " io . realm . ObjectServer " ) ; <nl> - Method method = syncManager . getDeclaredMethod ( " init " , Context . class ) ; <nl> - method . setAccessible ( true ) ; <nl> - method . invoke ( null , context ) ; <nl> - } catch ( NoSuchMethodException e ) { <nl> - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> - } catch ( InvocationTargetException e ) { <nl> - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> - } catch ( IllegalAccessException e ) { <nl> - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> - } catch ( ClassNotFoundException e ) { <nl> - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { <nl> - if ( configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . notifyCommit ( lastSnapshotVersion ) ; <nl> - } else { <nl> - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void realmClosed ( RealmConfiguration configuration ) { <nl> - if ( configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . getSyncPolicy ( ) . onRealmClosed ( session ) ; <nl> - } else { <nl> - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void realmOpened ( RealmConfiguration configuration ) { <nl> - if ( configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . getSyncPolicy ( ) . onRealmOpened ( session ) ; <nl> - } else { <nl> - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { <nl> - if ( config instanceof SyncConfiguration ) { <nl> - SyncConfiguration syncConfig = ( SyncConfiguration ) config ; <nl> - String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; <nl> - String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; <nl> - return new String [ ] { rosServerUrl , rosUserToken } ; <nl> - } else { <nl> - return new String [ 2 ] ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / AuthenticatingState . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / AuthenticatingState . java <nl> index d05c9a3 . . e742799 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / objectserver / AuthenticatingState . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / objectserver / AuthenticatingState . java <nl> @ @ - 16 , 7 + 16 , 6 @ @ <nl> <nl> package io . realm . internal . objectserver ; <nl> <nl> - import io . realm . BaseRealm ; <nl> import io . realm . ObjectServerError ; <nl> import io . realm . Session ; <nl> import io . realm . SessionState ; <nl> @ @ - 48 , 7 + 47 , 7 @ @ class AuthenticatingState extends FsmState { <nl> <nl> @ Override <nl> public void onEnterState ( ) { <nl> - if ( NetworkStateReceiver . isOnline ( BaseRealm . applicationContext ) ) { <nl> + if ( NetworkStateReceiver . isOnline ( SyncObjectServerFacade . getApplicationContext ( ) ) ) { <nl> authenticate ( session ) ; <nl> } else { <nl> / / Wait for connection to become available , before trying again . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java <nl> new file mode 100644 <nl> index 0000000 . . 5b925e9 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java <nl> @ @ - 0 , 0 + 1 , 100 @ @ <nl> + package io . realm . internal . objectserver ; <nl> + <nl> + <nl> + import android . annotation . SuppressLint ; <nl> + import android . content . Context ; <nl> + <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + import java . lang . reflect . Method ; <nl> + <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . Session ; <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncManager ; <nl> + import io . realm . exceptions . RealmException ; <nl> + import io . realm . internal . Keep ; <nl> + import io . realm . internal . ObjectServerFacade ; <nl> + <nl> + @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade <nl> + @ Keep <nl> + public class SyncObjectServerFacade extends ObjectServerFacade { <nl> + <nl> + private static final String WRONG _ TYPE _ OF _ CONFIGURATION = <nl> + " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; <nl> + @ SuppressLint ( " StaticFieldLeak " ) / / <nl> + private static Context applicationContext ; <nl> + <nl> + @ Override <nl> + public void init ( Context context ) { <nl> + / / Trying to keep things out the public API is no fun : / <nl> + / / Just use reflection on init . It is a one - time method call so should be acceptable . <nl> + / / noinspection TryWithIdenticalCatches <nl> + try { <nl> + / / FIXME : Reflection can be avoided by moving some functions of SyncManager and ObjectServer out of public <nl> + Class < ? > syncManager = Class . forName ( " io . realm . ObjectServer " ) ; <nl> + Method method = syncManager . getDeclaredMethod ( " init " , Context . class ) ; <nl> + method . setAccessible ( true ) ; <nl> + method . invoke ( null , context ) ; <nl> + } catch ( NoSuchMethodException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } catch ( InvocationTargetException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } catch ( IllegalAccessException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } catch ( ClassNotFoundException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } <nl> + if ( applicationContext = = null ) { <nl> + applicationContext = context ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . notifyCommit ( lastSnapshotVersion ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void realmClosed ( RealmConfiguration configuration ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . getSyncPolicy ( ) . onRealmClosed ( session ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void realmOpened ( RealmConfiguration configuration ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . getSyncPolicy ( ) . onRealmOpened ( session ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { <nl> + if ( config instanceof SyncConfiguration ) { <nl> + SyncConfiguration syncConfig = ( SyncConfiguration ) config ; <nl> + String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; <nl> + String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; <nl> + return new String [ ] { rosServerUrl , rosUserToken } ; <nl> + } else { <nl> + return new String [ 2 ] ; <nl> + } <nl> + } <nl> + <nl> + static Context getApplicationContext ( ) { <nl> + return applicationContext ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / SyncObjectServerFacade . java b / realm / realm - library / src / objectServer / java / io / realm / internal / SyncObjectServerFacade . java 
 deleted file mode 100644 
 index 5b925e9 . . 0000000 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / SyncObjectServerFacade . java 
 + + + / dev / null 
 @ @ - 1 , 100 + 0 , 0 @ @ 
 - package io . realm . internal . objectserver ; 
 - 
 - 
 - import android . annotation . SuppressLint ; 
 - import android . content . Context ; 
 - 
 - import java . lang . reflect . InvocationTargetException ; 
 - import java . lang . reflect . Method ; 
 - 
 - import io . realm . RealmConfiguration ; 
 - import io . realm . Session ; 
 - import io . realm . SyncConfiguration ; 
 - import io . realm . SyncManager ; 
 - import io . realm . exceptions . RealmException ; 
 - import io . realm . internal . Keep ; 
 - import io . realm . internal . ObjectServerFacade ; 
 - 
 - @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade 
 - @ Keep 
 - public class SyncObjectServerFacade extends ObjectServerFacade { 
 - 
 - private static final String WRONG _ TYPE _ OF _ CONFIGURATION = 
 - " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; 
 - @ SuppressLint ( " StaticFieldLeak " ) / / 
 - private static Context applicationContext ; 
 - 
 - @ Override 
 - public void init ( Context context ) { 
 - / / Trying to keep things out the public API is no fun : / 
 - / / Just use reflection on init . It is a one - time method call so should be acceptable . 
 - / / noinspection TryWithIdenticalCatches 
 - try { 
 - / / FIXME : Reflection can be avoided by moving some functions of SyncManager and ObjectServer out of public 
 - Class < ? > syncManager = Class . forName ( " io . realm . ObjectServer " ) ; 
 - Method method = syncManager . getDeclaredMethod ( " init " , Context . class ) ; 
 - method . setAccessible ( true ) ; 
 - method . invoke ( null , context ) ; 
 - } catch ( NoSuchMethodException e ) { 
 - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 - } catch ( InvocationTargetException e ) { 
 - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 - } catch ( IllegalAccessException e ) { 
 - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 - } catch ( ClassNotFoundException e ) { 
 - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 - } 
 - if ( applicationContext = = null ) { 
 - applicationContext = context ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { 
 - if ( configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . notifyCommit ( lastSnapshotVersion ) ; 
 - } else { 
 - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void realmClosed ( RealmConfiguration configuration ) { 
 - if ( configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . getSyncPolicy ( ) . onRealmClosed ( session ) ; 
 - } else { 
 - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void realmOpened ( RealmConfiguration configuration ) { 
 - if ( configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . getSyncPolicy ( ) . onRealmOpened ( session ) ; 
 - } else { 
 - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { 
 - if ( config instanceof SyncConfiguration ) { 
 - SyncConfiguration syncConfig = ( SyncConfiguration ) config ; 
 - String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; 
 - String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; 
 - return new String [ ] { rosServerUrl , rosUserToken } ; 
 - } else { 
 - return new String [ 2 ] ; 
 - } 
 - } 
 - 
 - static Context getApplicationContext ( ) { 
 - return applicationContext ; 
 - } 
 - } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncObjectServerFacade . java b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncObjectServerFacade . java 
 new file mode 100644 
 index 0000000 . . b8d10af 
 - - - / dev / null 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / objectserver / SyncObjectServerFacade . java 
 @ @ - 0 , 0 + 1 , 115 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . internal . objectserver ; 
 + 
 + import android . annotation . SuppressLint ; 
 + import android . content . Context ; 
 + 
 + import java . lang . reflect . InvocationTargetException ; 
 + import java . lang . reflect . Method ; 
 + 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . Session ; 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . SyncManager ; 
 + import io . realm . exceptions . RealmException ; 
 + import io . realm . internal . Keep ; 
 + import io . realm . internal . ObjectServerFacade ; 
 + 
 + @ SuppressWarnings ( { " unused " , " WeakerAccess " } ) / / Used through reflection . See ObjectServerFacade 
 + @ Keep 
 + public class SyncObjectServerFacade extends ObjectServerFacade { 
 + 
 + private static final String WRONG _ TYPE _ OF _ CONFIGURATION = 
 + " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; 
 + @ SuppressLint ( " StaticFieldLeak " ) / / 
 + private static Context applicationContext ; 
 + 
 + @ Override 
 + public void init ( Context context ) { 
 + / / Trying to keep things out the public API is no fun : / 
 + / / Just use reflection on init . It is a one - time method call so should be acceptable . 
 + / / noinspection TryWithIdenticalCatches 
 + try { 
 + / / FIXME : Reflection can be avoided by moving some functions of SyncManager and ObjectServer out of public 
 + Class < ? > syncManager = Class . forName ( " io . realm . ObjectServer " ) ; 
 + Method method = syncManager . getDeclaredMethod ( " init " , Context . class ) ; 
 + method . setAccessible ( true ) ; 
 + method . invoke ( null , context ) ; 
 + } catch ( NoSuchMethodException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } catch ( InvocationTargetException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } catch ( IllegalAccessException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } catch ( ClassNotFoundException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } 
 + if ( applicationContext = = null ) { 
 + applicationContext = context ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . notifyCommit ( lastSnapshotVersion ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void realmClosed ( RealmConfiguration configuration ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . getSyncPolicy ( ) . onRealmClosed ( session ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void realmOpened ( RealmConfiguration configuration ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . getSyncPolicy ( ) . onRealmOpened ( session ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { 
 + if ( config instanceof SyncConfiguration ) { 
 + SyncConfiguration syncConfig = ( SyncConfiguration ) config ; 
 + String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; 
 + String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; 
 + return new String [ ] { rosServerUrl , rosUserToken } ; 
 + } else { 
 + return new String [ 2 ] ; 
 + } 
 + } 
 + 
 + static Context getApplicationContext ( ) { 
 + return applicationContext ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index e4b8fae . . 56cf037 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 49 , 7 + 49 , 7 @ @ import rx . Observable ; 
 * @ see io . realm . DynamicRealm 
 * / 
 @ SuppressWarnings ( " WeakerAccess " ) 
 - public abstract class BaseRealm implements Closeable { 
 + abstract class BaseRealm implements Closeable { 
 protected static final long UNVERSIONED = - 1 ; 
 private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = 
 " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; 
 @ @ - 61 , 7 + 61 , 7 @ @ public abstract class BaseRealm implements Closeable { 
 " Changing Realm data can only be done from inside a transaction . " ; 
 
 / / Thread pool for all async operations ( Query & transaction ) 
 - public volatile static Context applicationContext ; 
 + volatile static Context applicationContext ; 
 
 / / Thread pool for all async operations ( Query & transaction ) 
 static final RealmThreadPoolExecutor asyncTaskExecutor = RealmThreadPoolExecutor . newDefaultExecutor ( ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java 
 index 5422735 . . c750708 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java 
 @ @ - 17 , 7 + 17 , 7 @ @ public class ObjectServerFacade { 
 static { 
 / / noinspection TryWithIdenticalCatches 
 try { 
 - Class syncFacadeClass = Class . forName ( " io . realm . internal . SyncObjectServerFacade " ) ; 
 + Class syncFacadeClass = Class . forName ( " io . realm . internal . objectserver . SyncObjectServerFacade " ) ; 
 syncFacade = ( ObjectServerFacade ) syncFacadeClass . newInstance ( ) ; 
 } catch ( ClassNotFoundException ignored ) { 
 } catch ( InstantiationException e ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java 
 deleted file mode 100644 
 index 7ea800c . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java 
 + + + / dev / null 
 @ @ - 1 , 88 + 0 , 0 @ @ 
 - package io . realm . internal ; 
 - 
 - 
 - import android . content . Context ; 
 - 
 - import java . lang . reflect . InvocationTargetException ; 
 - import java . lang . reflect . Method ; 
 - 
 - import io . realm . RealmConfiguration ; 
 - import io . realm . Session ; 
 - import io . realm . SyncConfiguration ; 
 - import io . realm . SyncManager ; 
 - import io . realm . exceptions . RealmException ; 
 - import io . realm . internal . objectserver . SessionStore ; 
 - import io . realm . internal . objectserver . SyncSession ; 
 - 
 - @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade 
 - @ Keep 
 - public class SyncObjectServerFacade extends ObjectServerFacade { 
 - 
 - private static final String WRONG _ TYPE _ OF _ CONFIGURATION = 
 - " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; 
 - 
 - @ Override 
 - public void init ( Context context ) { 
 - / / Trying to keep things out the public API is no fun : / 
 - / / Just use reflection on init . It is a one - time method call so should be acceptable . 
 - try { 
 - Class < ? > syncManager = Class . forName ( " io . realm . ObjectServer " ) ; 
 - Method method = syncManager . getDeclaredMethod ( " init " , Context . class ) ; 
 - method . setAccessible ( true ) ; 
 - method . invoke ( null , context ) ; 
 - } catch ( NoSuchMethodException e ) { 
 - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 - } catch ( InvocationTargetException e ) { 
 - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 - } catch ( IllegalAccessException e ) { 
 - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 - } catch ( ClassNotFoundException e ) { 
 - throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { 
 - if ( configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . notifyCommit ( lastSnapshotVersion ) ; 
 - } else { 
 - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void realmClosed ( RealmConfiguration configuration ) { 
 - if ( configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . getSyncPolicy ( ) . onRealmClosed ( session ) ; 
 - } else { 
 - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void realmOpened ( RealmConfiguration configuration ) { 
 - if ( configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . getSyncPolicy ( ) . onRealmOpened ( session ) ; 
 - } else { 
 - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { 
 - if ( config instanceof SyncConfiguration ) { 
 - SyncConfiguration syncConfig = ( SyncConfiguration ) config ; 
 - String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; 
 - String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; 
 - return new String [ ] { rosServerUrl , rosUserToken } ; 
 - } else { 
 - return new String [ 2 ] ; 
 - } 
 - } 
 - } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / AuthenticatingState . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / AuthenticatingState . java 
 index d05c9a3 . . e742799 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / objectserver / AuthenticatingState . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / objectserver / AuthenticatingState . java 
 @ @ - 16 , 7 + 16 , 6 @ @ 
 
 package io . realm . internal . objectserver ; 
 
 - import io . realm . BaseRealm ; 
 import io . realm . ObjectServerError ; 
 import io . realm . Session ; 
 import io . realm . SessionState ; 
 @ @ - 48 , 7 + 47 , 7 @ @ class AuthenticatingState extends FsmState { 
 
 @ Override 
 public void onEnterState ( ) { 
 - if ( NetworkStateReceiver . isOnline ( BaseRealm . applicationContext ) ) { 
 + if ( NetworkStateReceiver . isOnline ( SyncObjectServerFacade . getApplicationContext ( ) ) ) { 
 authenticate ( session ) ; 
 } else { 
 / / Wait for connection to become available , before trying again . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java 
 new file mode 100644 
 index 0000000 . . 5b925e9 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java 
 @ @ - 0 , 0 + 1 , 100 @ @ 
 + package io . realm . internal . objectserver ; 
 + 
 + 
 + import android . annotation . SuppressLint ; 
 + import android . content . Context ; 
 + 
 + import java . lang . reflect . InvocationTargetException ; 
 + import java . lang . reflect . Method ; 
 + 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . Session ; 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . SyncManager ; 
 + import io . realm . exceptions . RealmException ; 
 + import io . realm . internal . Keep ; 
 + import io . realm . internal . ObjectServerFacade ; 
 + 
 + @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade 
 + @ Keep 
 + public class SyncObjectServerFacade extends ObjectServerFacade { 
 + 
 + private static final String WRONG _ TYPE _ OF _ CONFIGURATION = 
 + " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; 
 + @ SuppressLint ( " StaticFieldLeak " ) / / 
 + private static Context applicationContext ; 
 + 
 + @ Override 
 + public void init ( Context context ) { 
 + / / Trying to keep things out the public API is no fun : / 
 + / / Just use reflection on init . It is a one - time method call so should be acceptable . 
 + / / noinspection TryWithIdenticalCatches 
 + try { 
 + / / FIXME : Reflection can be avoided by moving some functions of SyncManager and ObjectServer out of public 
 + Class < ? > syncManager = Class . forName ( " io . realm . ObjectServer " ) ; 
 + Method method = syncManager . getDeclaredMethod ( " init " , Context . class ) ; 
 + method . setAccessible ( true ) ; 
 + method . invoke ( null , context ) ; 
 + } catch ( NoSuchMethodException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } catch ( InvocationTargetException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } catch ( IllegalAccessException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } catch ( ClassNotFoundException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } 
 + if ( applicationContext = = null ) { 
 + applicationContext = context ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . notifyCommit ( lastSnapshotVersion ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void realmClosed ( RealmConfiguration configuration ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . getSyncPolicy ( ) . onRealmClosed ( session ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void realmOpened ( RealmConfiguration configuration ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . getSyncPolicy ( ) . onRealmOpened ( session ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { 
 + if ( config instanceof SyncConfiguration ) { 
 + SyncConfiguration syncConfig = ( SyncConfiguration ) config ; 
 + String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; 
 + String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; 
 + return new String [ ] { rosServerUrl , rosUserToken } ; 
 + } else { 
 + return new String [ 2 ] ; 
 + } 
 + } 
 + 
 + static Context getApplicationContext ( ) { 
 + return applicationContext ; 
 + } 
 + }
