BLEU SCORE: 0.03283637368030199

TEST MSG: Note about empty constructor with no arguments
GENERATED MSG: Update RealmObject javadoc .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index fa63632 . . 8a91e74 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import io . realm . internal . Row ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> - * In Realm you define your RealmObject classes by sub - classing RealmObject and adding fields to be persisted . You then <nl> + * In Realm you define your RealmObject classes by sub - classing RealmObject and adding fields to be persisted . You then <nl> * create your objects within a Realm , and use your custom subclasses instead of using the RealmObject class directly . <nl> * < p > <nl> * An annotation processor will create a proxy class for your RealmObject subclass . <nl> @ @ - 49 , 7 + 49 , 8 @ @ import rx . Observable ; <nl> * within a Realm . <nl> * < p > <nl> * The only restriction a RealmObject has is that fields are not allowed to be final , transient ' or volatile . <nl> - * Any method as well as public fields are allowed . <nl> + * Any method as well as public fields are allowed . When providing custom constructors , a public constructor with <nl> + * no arguments must be declared and be empty . <nl> * < p > <nl> * Fields annotated with { @ link io . realm . annotations . Ignore } don ' t have these restrictions and don ' t require either a <nl> * getter or setter . <nl> @ @ - 78 , 7 + 79 , 7 @ @ public abstract class RealmObject implements RealmModel { <nl> public final void deleteFromRealm ( ) { <nl> deleteFromRealm ( this ) ; <nl> } <nl> - <nl> + <nl> / * * <nl> * Deletes the object from the Realm it is currently associated with . <nl> * < p >
NEAREST DIFF (one line): diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java <nl> index e4fd723 . . 10022ec 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / src / main / java / io / realm / RealmObject . java <nl> @ @ - 31 , 12 + 31 , 37 @ @ import io . realm . internal . Row ; <nl> * In Realm you define your model classes by sub - classing RealmObject and adding fields to be <nl> * persisted . You then create your objects within a Realm , and use your custom subclasses instead <nl> * of using the RealmObject class directly . <nl> - * < br > <nl> + * <nl> * An annotation processor will create a proxy class for your RealmObject subclass . The getters and <nl> * setters should not contain any custom code of logic as they are overridden as part of the annotation <nl> * process . <nl> - * < br > <nl> + * <nl> + * A RealmObject is currently limited to the following : <nl> + * <nl> + * - Private fields . <nl> + * - Getter and setters for these fields . <nl> + * - Static methods . <nl> + * <nl> + * The following field data types are supported : <nl> + * - boolean <nl> + * - short <nl> + * - int <nl> + * - long <nl> + * - float <nl> + * - long <nl> + * - byte [ ] <nl> + * - String <nl> + * - Date <nl> + * - Any RealmObject subclass <nl> + * - RealmList <nl> + * <nl> + * All fields that are not annotated with { @ link io . realm . annotations . Ignore } require both a <nl> + * getter and setter . Getter and setter names must have the name { @ code getXXX } or { @ code setXXX } if <nl> + * the field name is { @ code XXX } . Getters for fields of type boolean can be called { @ code isXXX } as <nl> + * well . <nl> + * <nl> * @ see Realm # createObject ( Class ) <nl> + * @ see Realm # copyToRealm ( RealmObject ) <nl> * / <nl> <nl> @ RealmClass

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index fa63632 . . 8a91e74 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import io . realm . internal . Row ; 
 import rx . Observable ; 
 
 / * * 
 - * In Realm you define your RealmObject classes by sub - classing RealmObject and adding fields to be persisted . You then 
 + * In Realm you define your RealmObject classes by sub - classing RealmObject and adding fields to be persisted . You then 
 * create your objects within a Realm , and use your custom subclasses instead of using the RealmObject class directly . 
 * < p > 
 * An annotation processor will create a proxy class for your RealmObject subclass . 
 @ @ - 49 , 7 + 49 , 8 @ @ import rx . Observable ; 
 * within a Realm . 
 * < p > 
 * The only restriction a RealmObject has is that fields are not allowed to be final , transient ' or volatile . 
 - * Any method as well as public fields are allowed . 
 + * Any method as well as public fields are allowed . When providing custom constructors , a public constructor with 
 + * no arguments must be declared and be empty . 
 * < p > 
 * Fields annotated with { @ link io . realm . annotations . Ignore } don ' t have these restrictions and don ' t require either a 
 * getter or setter . 
 @ @ - 78 , 7 + 79 , 7 @ @ public abstract class RealmObject implements RealmModel { 
 public final void deleteFromRealm ( ) { 
 deleteFromRealm ( this ) ; 
 } 
 - 
 + 
 / * * 
 * Deletes the object from the Realm it is currently associated with . 
 * < p >

NEAREST DIFF:
diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java 
 index e4fd723 . . 10022ec 100644 
 - - - a / realm / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / src / main / java / io / realm / RealmObject . java 
 @ @ - 31 , 12 + 31 , 37 @ @ import io . realm . internal . Row ; 
 * In Realm you define your model classes by sub - classing RealmObject and adding fields to be 
 * persisted . You then create your objects within a Realm , and use your custom subclasses instead 
 * of using the RealmObject class directly . 
 - * < br > 
 + * 
 * An annotation processor will create a proxy class for your RealmObject subclass . The getters and 
 * setters should not contain any custom code of logic as they are overridden as part of the annotation 
 * process . 
 - * < br > 
 + * 
 + * A RealmObject is currently limited to the following : 
 + * 
 + * - Private fields . 
 + * - Getter and setters for these fields . 
 + * - Static methods . 
 + * 
 + * The following field data types are supported : 
 + * - boolean 
 + * - short 
 + * - int 
 + * - long 
 + * - float 
 + * - long 
 + * - byte [ ] 
 + * - String 
 + * - Date 
 + * - Any RealmObject subclass 
 + * - RealmList 
 + * 
 + * All fields that are not annotated with { @ link io . realm . annotations . Ignore } require both a 
 + * getter and setter . Getter and setter names must have the name { @ code getXXX } or { @ code setXXX } if 
 + * the field name is { @ code XXX } . Getters for fields of type boolean can be called { @ code isXXX } as 
 + * well . 
 + * 
 * @ see Realm # createObject ( Class ) 
 + * @ see Realm # copyToRealm ( RealmObject ) 
 * / 
 
 @ RealmClass
