BLEU SCORE: 0.040583489434387374

TEST MSG: correct expected and actual in assertion
GENERATED MSG: canceltransaction posts to reattach collections

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> index fa33ca5 . . e9c7a2d 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> @ @ - 196 , 12 + 196 , 12 @ @ public class CollectionTests { <nl> <nl> @ Test <nl> public void clear ( ) { <nl> - assertEquals ( table . size ( ) , 4 ) ; <nl> + assertEquals ( 4 , table . size ( ) ) ; <nl> Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> sharedRealm . beginTransaction ( ) ; <nl> collection . clear ( ) ; <nl> sharedRealm . commitTransaction ( ) ; <nl> - assertEquals ( table . size ( ) , 0 ) ; <nl> + assertEquals ( 0 , table . size ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 217 , 7 + 217 , 7 @ @ public class CollectionTests { <nl> <nl> Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; <nl> UncheckedRow row = table . getUncheckedRow ( 0 ) ; <nl> - assertEquals ( collection . indexOf ( row ) , 3 ) ; <nl> + assertEquals ( 3 , collection . indexOf ( row ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 225 , 7 + 225 , 7 @ @ public class CollectionTests { <nl> SortDescriptor sortDescriptor = new SortDescriptor ( table , new long [ ] { 2 } ) ; <nl> <nl> Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; <nl> - assertEquals ( collection . indexOf ( 0 ) , 3 ) ; <nl> + assertEquals ( 3 , collection . indexOf ( 0 ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 240 , 8 + 240 , 8 @ @ public class CollectionTests { <nl> assertEquals ( 3 , collection . size ( ) ) ; <nl> assertEquals ( 2 , collection2 . size ( ) ) ; <nl> <nl> - assertEquals ( collection2 . getUncheckedRow ( 0 ) . getLong ( 2 ) , 3 ) ; <nl> - assertEquals ( collection2 . getUncheckedRow ( 1 ) . getLong ( 2 ) , 1 ) ; <nl> + assertEquals ( 3 , collection2 . getUncheckedRow ( 0 ) . getLong ( 2 ) ) ; <nl> + assertEquals ( 1 , collection2 . getUncheckedRow ( 1 ) . getLong ( 2 ) ) ; <nl> } <nl> <nl> / / 1 . Create a results and add listener . <nl> @ @ - 257 , 8 + 257 , 8 @ @ public class CollectionTests { <nl> collection . addListener ( collection , new RealmChangeListener < Collection > ( ) { <nl> @ Override <nl> public void onChange ( Collection collection1 ) { <nl> - assertEquals ( collection1 , collection ) ; <nl> - assertEquals ( collection1 . size ( ) , 4 ) ; <nl> + assertEquals ( collection , collection1 ) ; <nl> + assertEquals ( 4 , collection1 . size ( ) ) ; <nl> sharedRealm . close ( ) ; <nl> looperThread . testComplete ( ) ; <nl> } <nl> @ @ - 277 , 8 + 277 , 8 @ @ public class CollectionTests { <nl> collection . addListener ( collection , new RealmChangeListener < Collection > ( ) { <nl> @ Override <nl> public void onChange ( Collection collection1 ) { <nl> - assertEquals ( collection1 , collection ) ; <nl> - assertEquals ( collection1 . size ( ) , 4 ) ; <nl> + assertEquals ( collection , collection1 ) ; <nl> + assertEquals ( 4 , collection1 . size ( ) ) ; <nl> sharedRealm . close ( ) ; <nl> onChangeCalled . set ( true ) ; <nl> } <nl> @ @ - 323 , 7 + 323 , 7 @ @ public class CollectionTests { <nl> collection . addListener ( collection , new RealmChangeListener < Collection > ( ) { <nl> @ Override <nl> public void onChange ( Collection element ) { <nl> - assertEquals ( latch . getCount ( ) , 1 ) ; <nl> + assertEquals ( 1 , latch . getCount ( ) ) ; <nl> latch . countDown ( ) ; <nl> } <nl> } ) ; <nl> @ @ - 346 , 8 + 346 , 8 @ @ public class CollectionTests { <nl> collection . addListener ( collection , new RealmChangeListener < Collection > ( ) { <nl> @ Override <nl> public void onChange ( Collection collection1 ) { <nl> - assertEquals ( collection1 , collection ) ; <nl> - assertEquals ( collection1 . size ( ) , 5 ) ; <nl> + assertEquals ( collection , collection1 ) ; <nl> + assertEquals ( 5 , collection1 . size ( ) ) ; <nl> sharedRealm . close ( ) ; <nl> looperThread . testComplete ( ) ; <nl> } <nl> @ @ - 368 , 8 + 368 , 8 @ @ public class CollectionTests { <nl> collection . addListener ( collection , new RealmChangeListener < Collection > ( ) { <nl> @ Override <nl> public void onChange ( Collection collection1 ) { <nl> - assertEquals ( collection1 , collection ) ; <nl> - assertEquals ( collection1 . size ( ) , 5 ) ; <nl> + assertEquals ( collection , collection1 ) ; <nl> + assertEquals ( 5 , collection1 . size ( ) ) ; <nl> sharedRealm . close ( ) ; <nl> looperThread . testComplete ( ) ; <nl> } <nl> @ @ - 394 , 10 + 394 , 10 @ @ public class CollectionTests { <nl> public void onChange ( Collection collection1 ) { <nl> switch ( listenerCounter . getAndIncrement ( ) ) { <nl> case 0 : <nl> - assertEquals ( collection1 . size ( ) , 4 ) ; <nl> + assertEquals ( 4 , collection1 . size ( ) ) ; <nl> break ; <nl> case 1 : <nl> - assertEquals ( collection1 . size ( ) , 5 ) ; <nl> + assertEquals ( 5 , collection1 . size ( ) ) ; <nl> sharedRealm . close ( ) ; <nl> break ; <nl> default :
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> index ce6d6b7 . . 227401d 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> @ @ - 470 , 12 + 470 , 11 @ @ public class CollectionTests { <nl> } <nl> <nl> @ Test <nl> - public void reattach _ byCancelTransaction ( ) { <nl> + public void detach _ cancelTransactionWontReattach ( ) { <nl> final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> sharedRealm . beginTransaction ( ) ; <nl> - assertTrue ( collection . isDetached ( ) ) ; <nl> sharedRealm . cancelTransaction ( ) ; <nl> - assertFalse ( collection . isDetached ( ) ) ; <nl> + assertTrue ( collection . isDetached ( ) ) ; <nl> assertEquals ( collection . size ( ) , 4 ) ; <nl> } <nl> <nl> @ @ - 574 , 23 + 573 , 40 @ @ public class CollectionTests { <nl> public void reattach _ looperThread _ shouldHappenBeforeAnyOtherLoopEventWithLocalTransactionCanceled ( ) { <nl> final SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> Table table = sharedRealm . getTable ( " test _ table " ) ; <nl> - final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; <nl> - looperThread . keepStrongReference . add ( collection ) ; <nl> - assertEquals ( collection . size ( ) , 4 ) ; <nl> + final Collection [ ] collections = new Collection [ 2 ] ; <nl> + collections [ 0 ] = new Collection ( sharedRealm , table . where ( ) ) ; <nl> + looperThread . keepStrongReference . add ( collections [ 0 ] ) ; <nl> + assertEquals ( collections [ 0 ] . size ( ) , 4 ) ; <nl> looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> / / The results is switched back to the original Results . <nl> - assertFalse ( collection . isDetached ( ) ) ; <nl> - assertEquals ( collection . size ( ) , 4 ) ; <nl> + assertFalse ( collections [ 0 ] . isDetached ( ) ) ; <nl> + assertEquals ( collections [ 0 ] . size ( ) , 4 ) ; <nl> + assertFalse ( collections [ 1 ] . isDetached ( ) ) ; <nl> + assertEquals ( collections [ 1 ] . size ( ) , 4 ) ; <nl> + <nl> sharedRealm . close ( ) ; <nl> looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> sharedRealm . beginTransaction ( ) ; <nl> / / The results is backed by snapshot now . <nl> - assertTrue ( collection . isDetached ( ) ) ; <nl> - assertEquals ( collection . size ( ) , 4 ) ; <nl> + assertTrue ( collections [ 0 ] . isDetached ( ) ) ; <nl> + assertEquals ( collections [ 0 ] . size ( ) , 4 ) ; <nl> + <nl> + table . addEmptyRow ( ) ; <nl> + collections [ 1 ] = new Collection ( sharedRealm , table . where ( ) ) ; <nl> + UncheckedRow row = collections [ 1 ] . getUncheckedRow ( 4 ) ; <nl> + assertTrue ( row . isAttached ( ) ) ; <nl> + assertEquals ( collections [ 1 ] . size ( ) , 5 ) ; <nl> sharedRealm . cancelTransaction ( ) ; <nl> + <nl> + / / The results is still backed by snapshot . <nl> + assertTrue ( collections [ 0 ] . isDetached ( ) ) ; <nl> + assertEquals ( collections [ 0 ] . size ( ) , 4 ) ; <nl> + assertEquals ( collections [ 1 ] . size ( ) , 5 ) ; <nl> + row = collections [ 1 ] . getUncheckedRow ( 4 ) ; <nl> + assertFalse ( row . isAttached ( ) ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index 42a0164 . . bcbc82e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 252 , 21 + 252 , 12 @ @ public final class SharedRealm implements Closeable { <nl> <nl> public void commitTransaction ( ) { <nl> nativeCommitTransaction ( nativePtr ) ; <nl> - if ( realmNotifier ! = null & & ! collections . isEmpty ( ) & & ! disableSnapshotPosted ) { <nl> - disableSnapshotPosted = true ; <nl> - realmNotifier . postAtFrontOfQueue ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - disableSnapshotPosted = false ; <nl> - disableCollectionSnapshot ( ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> + postToReattachCollections ( ) ; <nl> } <nl> <nl> public void cancelTransaction ( ) { <nl> nativeCancelTransaction ( nativePtr ) ; <nl> - disableCollectionSnapshot ( ) ; <nl> + postToReattachCollections ( ) ; <nl> } <nl> <nl> public boolean isInTransaction ( ) { <nl> @ @ - 321 , 7 + 312 , 6 @ @ public final class SharedRealm implements Closeable { <nl> public void refresh ( ) { <nl> nativeRefresh ( nativePtr ) ; <nl> invokeSchemaChangeListenerIfSchemaChanged ( ) ; <nl> - disableCollectionSnapshot ( ) ; <nl> } <nl> <nl> public SharedRealm . VersionID getVersionID ( ) { <nl> @ @ - 428 , 6 + 418 , 11 @ @ public final class SharedRealm implements Closeable { <nl> } <nl> <nl> void disableCollectionSnapshot ( ) { <nl> + if ( isInTransaction ( ) ) { <nl> + / / This should never happen . <nl> + throw new IllegalStateException ( " Collection cannot be reattached if the Realm is in transaction . " + <nl> + " Please remember to commit or cancel transaction before finishing the current event loop . " ) ; <nl> + } <nl> for ( WeakReference < Collection > collectionRef : collections ) { <nl> Collection collection = collectionRef . get ( ) ; <nl> if ( collection = = null ) { <nl> @ @ - 438 , 6 + 433 , 19 @ @ public final class SharedRealm implements Closeable { <nl> } <nl> } <nl> <nl> + private void postToReattachCollections ( ) { <nl> + if ( realmNotifier ! = null & & ! collections . isEmpty ( ) & & ! disableSnapshotPosted ) { <nl> + disableSnapshotPosted = true ; <nl> + realmNotifier . postAtFrontOfQueue ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + disableSnapshotPosted = false ; <nl> + disableCollectionSnapshot ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + <nl> private static native void nativeInit ( String temporaryDirectoryPath ) ; <nl> private static native long nativeCreateConfig ( String realmPath , byte [ ] key , byte schemaMode , boolean inMemory , <nl> boolean cache , boolean disableFormatUpgrade ,

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 index fa33ca5 . . e9c7a2d 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 @ @ - 196 , 12 + 196 , 12 @ @ public class CollectionTests { 
 
 @ Test 
 public void clear ( ) { 
 - assertEquals ( table . size ( ) , 4 ) ; 
 + assertEquals ( 4 , table . size ( ) ) ; 
 Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 sharedRealm . beginTransaction ( ) ; 
 collection . clear ( ) ; 
 sharedRealm . commitTransaction ( ) ; 
 - assertEquals ( table . size ( ) , 0 ) ; 
 + assertEquals ( 0 , table . size ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 217 , 7 + 217 , 7 @ @ public class CollectionTests { 
 
 Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; 
 UncheckedRow row = table . getUncheckedRow ( 0 ) ; 
 - assertEquals ( collection . indexOf ( row ) , 3 ) ; 
 + assertEquals ( 3 , collection . indexOf ( row ) ) ; 
 } 
 
 @ Test 
 @ @ - 225 , 7 + 225 , 7 @ @ public class CollectionTests { 
 SortDescriptor sortDescriptor = new SortDescriptor ( table , new long [ ] { 2 } ) ; 
 
 Collection collection = new Collection ( sharedRealm , table . where ( ) , sortDescriptor ) ; 
 - assertEquals ( collection . indexOf ( 0 ) , 3 ) ; 
 + assertEquals ( 3 , collection . indexOf ( 0 ) ) ; 
 } 
 
 @ Test 
 @ @ - 240 , 8 + 240 , 8 @ @ public class CollectionTests { 
 assertEquals ( 3 , collection . size ( ) ) ; 
 assertEquals ( 2 , collection2 . size ( ) ) ; 
 
 - assertEquals ( collection2 . getUncheckedRow ( 0 ) . getLong ( 2 ) , 3 ) ; 
 - assertEquals ( collection2 . getUncheckedRow ( 1 ) . getLong ( 2 ) , 1 ) ; 
 + assertEquals ( 3 , collection2 . getUncheckedRow ( 0 ) . getLong ( 2 ) ) ; 
 + assertEquals ( 1 , collection2 . getUncheckedRow ( 1 ) . getLong ( 2 ) ) ; 
 } 
 
 / / 1 . Create a results and add listener . 
 @ @ - 257 , 8 + 257 , 8 @ @ public class CollectionTests { 
 collection . addListener ( collection , new RealmChangeListener < Collection > ( ) { 
 @ Override 
 public void onChange ( Collection collection1 ) { 
 - assertEquals ( collection1 , collection ) ; 
 - assertEquals ( collection1 . size ( ) , 4 ) ; 
 + assertEquals ( collection , collection1 ) ; 
 + assertEquals ( 4 , collection1 . size ( ) ) ; 
 sharedRealm . close ( ) ; 
 looperThread . testComplete ( ) ; 
 } 
 @ @ - 277 , 8 + 277 , 8 @ @ public class CollectionTests { 
 collection . addListener ( collection , new RealmChangeListener < Collection > ( ) { 
 @ Override 
 public void onChange ( Collection collection1 ) { 
 - assertEquals ( collection1 , collection ) ; 
 - assertEquals ( collection1 . size ( ) , 4 ) ; 
 + assertEquals ( collection , collection1 ) ; 
 + assertEquals ( 4 , collection1 . size ( ) ) ; 
 sharedRealm . close ( ) ; 
 onChangeCalled . set ( true ) ; 
 } 
 @ @ - 323 , 7 + 323 , 7 @ @ public class CollectionTests { 
 collection . addListener ( collection , new RealmChangeListener < Collection > ( ) { 
 @ Override 
 public void onChange ( Collection element ) { 
 - assertEquals ( latch . getCount ( ) , 1 ) ; 
 + assertEquals ( 1 , latch . getCount ( ) ) ; 
 latch . countDown ( ) ; 
 } 
 } ) ; 
 @ @ - 346 , 8 + 346 , 8 @ @ public class CollectionTests { 
 collection . addListener ( collection , new RealmChangeListener < Collection > ( ) { 
 @ Override 
 public void onChange ( Collection collection1 ) { 
 - assertEquals ( collection1 , collection ) ; 
 - assertEquals ( collection1 . size ( ) , 5 ) ; 
 + assertEquals ( collection , collection1 ) ; 
 + assertEquals ( 5 , collection1 . size ( ) ) ; 
 sharedRealm . close ( ) ; 
 looperThread . testComplete ( ) ; 
 } 
 @ @ - 368 , 8 + 368 , 8 @ @ public class CollectionTests { 
 collection . addListener ( collection , new RealmChangeListener < Collection > ( ) { 
 @ Override 
 public void onChange ( Collection collection1 ) { 
 - assertEquals ( collection1 , collection ) ; 
 - assertEquals ( collection1 . size ( ) , 5 ) ; 
 + assertEquals ( collection , collection1 ) ; 
 + assertEquals ( 5 , collection1 . size ( ) ) ; 
 sharedRealm . close ( ) ; 
 looperThread . testComplete ( ) ; 
 } 
 @ @ - 394 , 10 + 394 , 10 @ @ public class CollectionTests { 
 public void onChange ( Collection collection1 ) { 
 switch ( listenerCounter . getAndIncrement ( ) ) { 
 case 0 : 
 - assertEquals ( collection1 . size ( ) , 4 ) ; 
 + assertEquals ( 4 , collection1 . size ( ) ) ; 
 break ; 
 case 1 : 
 - assertEquals ( collection1 . size ( ) , 5 ) ; 
 + assertEquals ( 5 , collection1 . size ( ) ) ; 
 sharedRealm . close ( ) ; 
 break ; 
 default :

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 index ce6d6b7 . . 227401d 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 @ @ - 470 , 12 + 470 , 11 @ @ public class CollectionTests { 
 } 
 
 @ Test 
 - public void reattach _ byCancelTransaction ( ) { 
 + public void detach _ cancelTransactionWontReattach ( ) { 
 final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 sharedRealm . beginTransaction ( ) ; 
 - assertTrue ( collection . isDetached ( ) ) ; 
 sharedRealm . cancelTransaction ( ) ; 
 - assertFalse ( collection . isDetached ( ) ) ; 
 + assertTrue ( collection . isDetached ( ) ) ; 
 assertEquals ( collection . size ( ) , 4 ) ; 
 } 
 
 @ @ - 574 , 23 + 573 , 40 @ @ public class CollectionTests { 
 public void reattach _ looperThread _ shouldHappenBeforeAnyOtherLoopEventWithLocalTransactionCanceled ( ) { 
 final SharedRealm sharedRealm = getSharedRealm ( ) ; 
 Table table = sharedRealm . getTable ( " test _ table " ) ; 
 - final Collection collection = new Collection ( sharedRealm , table . where ( ) ) ; 
 - looperThread . keepStrongReference . add ( collection ) ; 
 - assertEquals ( collection . size ( ) , 4 ) ; 
 + final Collection [ ] collections = new Collection [ 2 ] ; 
 + collections [ 0 ] = new Collection ( sharedRealm , table . where ( ) ) ; 
 + looperThread . keepStrongReference . add ( collections [ 0 ] ) ; 
 + assertEquals ( collections [ 0 ] . size ( ) , 4 ) ; 
 looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 / / The results is switched back to the original Results . 
 - assertFalse ( collection . isDetached ( ) ) ; 
 - assertEquals ( collection . size ( ) , 4 ) ; 
 + assertFalse ( collections [ 0 ] . isDetached ( ) ) ; 
 + assertEquals ( collections [ 0 ] . size ( ) , 4 ) ; 
 + assertFalse ( collections [ 1 ] . isDetached ( ) ) ; 
 + assertEquals ( collections [ 1 ] . size ( ) , 4 ) ; 
 + 
 sharedRealm . close ( ) ; 
 looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 sharedRealm . beginTransaction ( ) ; 
 / / The results is backed by snapshot now . 
 - assertTrue ( collection . isDetached ( ) ) ; 
 - assertEquals ( collection . size ( ) , 4 ) ; 
 + assertTrue ( collections [ 0 ] . isDetached ( ) ) ; 
 + assertEquals ( collections [ 0 ] . size ( ) , 4 ) ; 
 + 
 + table . addEmptyRow ( ) ; 
 + collections [ 1 ] = new Collection ( sharedRealm , table . where ( ) ) ; 
 + UncheckedRow row = collections [ 1 ] . getUncheckedRow ( 4 ) ; 
 + assertTrue ( row . isAttached ( ) ) ; 
 + assertEquals ( collections [ 1 ] . size ( ) , 5 ) ; 
 sharedRealm . cancelTransaction ( ) ; 
 + 
 + / / The results is still backed by snapshot . 
 + assertTrue ( collections [ 0 ] . isDetached ( ) ) ; 
 + assertEquals ( collections [ 0 ] . size ( ) , 4 ) ; 
 + assertEquals ( collections [ 1 ] . size ( ) , 5 ) ; 
 + row = collections [ 1 ] . getUncheckedRow ( 4 ) ; 
 + assertFalse ( row . isAttached ( ) ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index 42a0164 . . bcbc82e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 252 , 21 + 252 , 12 @ @ public final class SharedRealm implements Closeable { 
 
 public void commitTransaction ( ) { 
 nativeCommitTransaction ( nativePtr ) ; 
 - if ( realmNotifier ! = null & & ! collections . isEmpty ( ) & & ! disableSnapshotPosted ) { 
 - disableSnapshotPosted = true ; 
 - realmNotifier . postAtFrontOfQueue ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - disableSnapshotPosted = false ; 
 - disableCollectionSnapshot ( ) ; 
 - } 
 - } ) ; 
 - } 
 + postToReattachCollections ( ) ; 
 } 
 
 public void cancelTransaction ( ) { 
 nativeCancelTransaction ( nativePtr ) ; 
 - disableCollectionSnapshot ( ) ; 
 + postToReattachCollections ( ) ; 
 } 
 
 public boolean isInTransaction ( ) { 
 @ @ - 321 , 7 + 312 , 6 @ @ public final class SharedRealm implements Closeable { 
 public void refresh ( ) { 
 nativeRefresh ( nativePtr ) ; 
 invokeSchemaChangeListenerIfSchemaChanged ( ) ; 
 - disableCollectionSnapshot ( ) ; 
 } 
 
 public SharedRealm . VersionID getVersionID ( ) { 
 @ @ - 428 , 6 + 418 , 11 @ @ public final class SharedRealm implements Closeable { 
 } 
 
 void disableCollectionSnapshot ( ) { 
 + if ( isInTransaction ( ) ) { 
 + / / This should never happen . 
 + throw new IllegalStateException ( " Collection cannot be reattached if the Realm is in transaction . " + 
 + " Please remember to commit or cancel transaction before finishing the current event loop . " ) ; 
 + } 
 for ( WeakReference < Collection > collectionRef : collections ) { 
 Collection collection = collectionRef . get ( ) ; 
 if ( collection = = null ) { 
 @ @ - 438 , 6 + 433 , 19 @ @ public final class SharedRealm implements Closeable { 
 } 
 } 
 
 + private void postToReattachCollections ( ) { 
 + if ( realmNotifier ! = null & & ! collections . isEmpty ( ) & & ! disableSnapshotPosted ) { 
 + disableSnapshotPosted = true ; 
 + realmNotifier . postAtFrontOfQueue ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + disableSnapshotPosted = false ; 
 + disableCollectionSnapshot ( ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + 
 private static native void nativeInit ( String temporaryDirectoryPath ) ; 
 private static native long nativeCreateConfig ( String realmPath , byte [ ] key , byte schemaMode , boolean inMemory , 
 boolean cache , boolean disableFormatUpgrade ,
