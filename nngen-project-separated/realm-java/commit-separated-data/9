BLEU SCORE: 0.005774363155184915

TEST MSG: Remove Java8 bytecode
GENERATED MSG: Added unit tests for RealmList . Throw better errors if not used correctly .

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 8983a73 . . d7ecceb 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 4 , 7 + 4 , 7 @ @ <nl> * None <nl> <nl> # # # Fixed <nl> - * ? ? ( Issue [ # ? ? ] ( https : / / github . com / realm / realm - java / issues / ? ? ) , since ? ? ) . <nl> + * Removed Java 8 bytecode . Resulted in errors like ` D8 : Invoke - customs are only supported starting with Android O ( - - min - api 26 ) ` if not compiled with Java 8 . ( Issue [ # 6300 ] ( https : / / github . com / realm / realm - java / issues / 6300 ) , since 5 . 8 . 0 ) . <nl> <nl> # # # Compatibility <nl> * Realm Object Server : 3 . 11 . 0 or later . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 3f80013 . . eac557b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 475 , 7 + 475 , 7 @ @ public class RealmResults < E > extends OrderedRealmCollectionImpl < E > { <nl> case LIST : <nl> checkTypeOfListElements ( list , RealmModel . class ) ; <nl> checkRealmObjectConstraints ( fieldName , ( RealmModel ) list . first ( null ) ) ; <nl> - osResults . setModelList ( fieldName , ( RealmList < ? extends RealmModel > ) list ) ; <nl> + osResults . setModelList ( fieldName , ( RealmList < RealmModel > ) list ) ; <nl> break ; <nl> case INTEGER _ LIST : <nl> / / Integers are a bit annoying as they are all stored as the same type in Core <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / OsResults . java b / realm / realm - library / src / main / java / io / realm / internal / OsResults . java <nl> index 590f65d . . 47925d1 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / OsResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / OsResults . java <nl> @ @ - 473 , 68 + 473 , 101 @ @ public class OsResults implements NativeObject , ObservableCollection { <nl> } <nl> <nl> public void setStringList ( String fieldName , RealmList < String > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addStringList ( 0 , lst ) ; <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < String > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < String > list ) { <nl> + builder . addStringList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> public void setByteList ( String fieldName , RealmList < Byte > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addByteList ( 0 , lst ) ; <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Byte > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < Byte > list ) { <nl> + builder . addByteList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> public void setShortList ( String fieldName , RealmList < Short > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addShortList ( 0 , lst ) ; <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Short > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < Short > list ) { <nl> + builder . addShortList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> public void setIntegerList ( String fieldName , RealmList < Integer > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addIntegerList ( 0 , lst ) ; <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Integer > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < Integer > list ) { <nl> + builder . addIntegerList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> public void setLongList ( String fieldName , RealmList < Long > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addLongList ( 0 , lst ) ; <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Long > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < Long > list ) { <nl> + builder . addLongList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> public void setBooleanList ( String fieldName , RealmList < Boolean > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addBooleanList ( 0 , lst ) ; <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Boolean > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < Boolean > list ) { <nl> + builder . addBooleanList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> public void setByteArrayList ( String fieldName , RealmList < byte [ ] > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addByteArrayList ( 0 , lst ) ; <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < byte [ ] > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < byte [ ] > list ) { <nl> + builder . addByteArrayList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> public void setDateList ( String fieldName , RealmList < Date > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addDateList ( 0 , lst ) ; <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Date > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < Date > list ) { <nl> + builder . addDateList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> public void setFloatList ( String fieldName , RealmList < Float > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addFloatList ( 0 , lst ) ; <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Float > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < Float > list ) { <nl> + builder . addFloatList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> public void setDoubleList ( String fieldName , RealmList < Double > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addDoubleList ( 0 , lst ) ; <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Double > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < Double > list ) { <nl> + builder . addDoubleList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> - public void setModelList ( String fieldName , RealmList < ? extends RealmModel > list ) { <nl> - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { <nl> - builder . addObjectList ( 0 , lst ) ; <nl> + public void setModelList ( String fieldName , RealmList < RealmModel > list ) { <nl> + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < RealmModel > ( ) { <nl> + @ Override <nl> + public void addList ( OsObjectBuilder builder , RealmList < RealmModel > list ) { <nl> + builder . addObjectList ( 0 , list ) ; <nl> + } <nl> } ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmListTest . java b / realm / src / androidTest / java / io / realm / RealmListTest . java <nl> index 8bbac40 . . f1cb68a 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmListTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmListTest . java <nl> @ @ - 53 , 4 + 53 , 122 @ @ public class RealmListTest extends AndroidTestCase { <nl> } catch ( RealmException ignore ) { <nl> } <nl> } <nl> - } <nl> + <nl> + public void testAddNonManagedMode ( ) { <nl> + RealmList list = new RealmList ( ) ; <nl> + AllTypes object = new AllTypes ( ) ; <nl> + object . setColumnString ( " String " ) ; <nl> + list . add ( object ) ; <nl> + assertEquals ( 1 , list . size ( ) ) ; <nl> + assertEquals ( object , list . get ( 0 ) ) ; <nl> + } <nl> + <nl> + public void testAddNullNonManagedMode ( ) { <nl> + RealmList list = new RealmList ( ) ; <nl> + try { <nl> + list . add ( null ) ; <nl> + fail ( " Adding null should not be be allowed " ) ; <nl> + } catch ( NullPointerException ignore ) { <nl> + } <nl> + } <nl> + <nl> + public void testAddManagedObject _ nonManagedMode ( ) { <nl> + RealmList list = new RealmList ( ) ; <nl> + testRealm . beginTransaction ( ) ; <nl> + AllTypes managedAllTypes = testRealm . createObject ( AllTypes . class ) ; <nl> + testRealm . commitTransaction ( ) ; <nl> + try { <nl> + list . add ( managedAllTypes ) ; <nl> + fail ( " Adding managed objects to non - managed lists should fail " ) ; <nl> + } catch ( IllegalStateException ignore ) { <nl> + } <nl> + } <nl> + <nl> + public void testAddAtIndex _ nonManagedMode ( ) { <nl> + RealmList list = new RealmList ( ) ; <nl> + AllTypes object = new AllTypes ( ) ; <nl> + object . setColumnString ( " String " ) ; <nl> + list . add ( 0 , object ) ; <nl> + assertEquals ( 1 , list . size ( ) ) ; <nl> + assertEquals ( object , list . get ( 0 ) ) ; <nl> + } <nl> + <nl> + public void testAddManagedObjectAtIndex _ nonManagedMode ( ) { <nl> + RealmList list = new RealmList ( ) ; <nl> + testRealm . beginTransaction ( ) ; <nl> + AllTypes managedAllTypes = testRealm . createObject ( AllTypes . class ) ; <nl> + testRealm . commitTransaction ( ) ; <nl> + try { <nl> + list . add ( 5 , managedAllTypes ) ; <nl> + fail ( " Adding managed objects to non - managed lists should fail " ) ; <nl> + } catch ( IllegalStateException ignore ) { <nl> + } <nl> + } <nl> + <nl> + public void testAddNullAtIndex _ nonManagedMode ( ) { <nl> + RealmList list = new RealmList ( ) ; <nl> + try { <nl> + list . add ( null ) ; <nl> + fail ( " Adding null should not be be allowed " ) ; <nl> + } catch ( NullPointerException ignore ) { <nl> + } <nl> + } <nl> + <nl> + public void testSet _ nonManagedMode ( ) { <nl> + RealmList list = new RealmList ( ) ; <nl> + list . add ( new AllTypes ( ) ) ; <nl> + list . set ( 0 , new AllTypes ( ) ) ; <nl> + assertEquals ( 1 , list . size ( ) ) ; <nl> + } <nl> + <nl> + public void testSetNull _ nonManagedMode ( ) { <nl> + RealmList list = new RealmList ( ) ; <nl> + try { <nl> + list . set ( 5 , null ) ; <nl> + fail ( " Setting a null value should result in a exception " ) ; <nl> + } catch ( NullPointerException ignore ) { <nl> + } <nl> + } <nl> + <nl> + public void testSetManagedObject _ nonManagedMode ( ) { <nl> + RealmList list = new RealmList ( ) ; <nl> + testRealm . beginTransaction ( ) ; <nl> + AllTypes managedAllTypes = testRealm . createObject ( AllTypes . class ) ; <nl> + testRealm . commitTransaction ( ) ; <nl> + try { <nl> + list . set ( 5 , managedAllTypes ) ; <nl> + fail ( " Setting managed objects to non - managed lists should fail " ) ; <nl> + } catch ( IllegalStateException ignore ) { <nl> + } <nl> + } <nl> + <nl> + public void testClear _ nonManagedMode ( ) { <nl> + RealmList list = new RealmList ( ) ; <nl> + list . add ( new AllTypes ( ) ) ; <nl> + assertEquals ( 1 , list . size ( ) ) ; <nl> + list . clear ( ) ; <nl> + assertTrue ( list . isEmpty ( ) ) ; <nl> + } <nl> + <nl> + public void testRemove _ nonManagedMode ( ) { <nl> + RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; <nl> + AllTypes object1 = new AllTypes ( ) ; <nl> + list . add ( object1 ) ; <nl> + AllTypes object2 = list . remove ( 0 ) ; <nl> + assertEquals ( object1 , object2 ) ; <nl> + } <nl> + <nl> + public void testGet _ nonManagedMode ( ) { <nl> + RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; <nl> + AllTypes object1 = new AllTypes ( ) ; <nl> + list . add ( object1 ) ; <nl> + AllTypes object2 = list . get ( 0 ) ; <nl> + assertEquals ( object1 , object2 ) ; <nl> + } <nl> + <nl> + public void testSize _ nonManagedMode ( ) { <nl> + RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; <nl> + list . add ( new AllTypes ( ) ) ; <nl> + assertEquals ( 1 , list . size ( ) ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> index adf3473 . . 67f36e0 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 35 , 6 + 35 , 8 @ @ import io . realm . internal . TableQuery ; <nl> public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> <nl> private static final String ONLY _ IN _ MANAGED _ MODE _ MESSAGE = " This method is only available in managed mode " ; <nl> + private static final String NULL _ OBJECTS _ NOT _ ALLOWED _ MESSAGE = " RealmList does not accept null values " ; <nl> + public static final String MANAGED _ OBJECTS _ NOT _ ALLOWED _ MESSAGE = " RealmObjects already managed by Realm cannot be added to RealmList in non - managed mode . " ; <nl> <nl> private final boolean managedMode ; <nl> private Class < E > clazz ; <nl> @ @ - 77 , 6 + 79 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> if ( managedMode ) { <nl> view . insert ( location , object . row . getIndex ( ) ) ; <nl> } else { <nl> + assertValidObjectInNonManagedMode ( object ) ; <nl> nonManagedList . add ( location , object ) ; <nl> } <nl> } <nl> @ @ - 89 , 6 + 92 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> if ( managedMode ) { <nl> view . add ( object . row . getIndex ( ) ) ; <nl> } else { <nl> + assertValidObjectInNonManagedMode ( object ) ; <nl> nonManagedList . add ( object ) ; <nl> } <nl> return true ; <nl> @ @ - 102 , 6 + 106 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> if ( managedMode ) { <nl> view . set ( location , object . row . getIndex ( ) ) ; <nl> } else { <nl> + assertValidObjectInNonManagedMode ( object ) ; <nl> nonManagedList . set ( location , object ) ; <nl> } <nl> return object ; <nl> @ @ - 116 , 6 + 121 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> if ( managedMode ) { <nl> view . move ( oldPos , newPos ) ; <nl> } else { <nl> + / / TODO Should we support this ? <nl> throw new RealmException ( ONLY _ IN _ MANAGED _ MODE _ MESSAGE ) ; <nl> } <nl> } <nl> @ @ - 212 , 10 + 218 , 19 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> } <nl> <nl> + private void assertValidObjectInNonManagedMode ( E object ) { <nl> + if ( object = = null ) { <nl> + throw new NullPointerException ( NULL _ OBJECTS _ NOT _ ALLOWED _ MESSAGE ) ; <nl> + } <nl> + if ( object . realm ! = null ) { <nl> + throw new IllegalStateException ( MANAGED _ OBJECTS _ NOT _ ALLOWED _ MESSAGE ) ; <nl> + } <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) { <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> - sb . append ( clazz . getSimpleName ( ) ) ; <nl> + sb . append ( managedMode ? clazz . getSimpleName ( ) : getClass ( ) . getSimpleName ( ) ) ; <nl> sb . append ( " @ [ " ) ; <nl> for ( int i = 0 ; i < size ( ) ; i + + ) { <nl> if ( managedMode ) {

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 8983a73 . . d7ecceb 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 4 , 7 + 4 , 7 @ @ 
 * None 
 
 # # # Fixed 
 - * ? ? ( Issue [ # ? ? ] ( https : / / github . com / realm / realm - java / issues / ? ? ) , since ? ? ) . 
 + * Removed Java 8 bytecode . Resulted in errors like ` D8 : Invoke - customs are only supported starting with Android O ( - - min - api 26 ) ` if not compiled with Java 8 . ( Issue [ # 6300 ] ( https : / / github . com / realm / realm - java / issues / 6300 ) , since 5 . 8 . 0 ) . 
 
 # # # Compatibility 
 * Realm Object Server : 3 . 11 . 0 or later . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 3f80013 . . eac557b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 475 , 7 + 475 , 7 @ @ public class RealmResults < E > extends OrderedRealmCollectionImpl < E > { 
 case LIST : 
 checkTypeOfListElements ( list , RealmModel . class ) ; 
 checkRealmObjectConstraints ( fieldName , ( RealmModel ) list . first ( null ) ) ; 
 - osResults . setModelList ( fieldName , ( RealmList < ? extends RealmModel > ) list ) ; 
 + osResults . setModelList ( fieldName , ( RealmList < RealmModel > ) list ) ; 
 break ; 
 case INTEGER _ LIST : 
 / / Integers are a bit annoying as they are all stored as the same type in Core 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / OsResults . java b / realm / realm - library / src / main / java / io / realm / internal / OsResults . java 
 index 590f65d . . 47925d1 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / OsResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / OsResults . java 
 @ @ - 473 , 68 + 473 , 101 @ @ public class OsResults implements NativeObject , ObservableCollection { 
 } 
 
 public void setStringList ( String fieldName , RealmList < String > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addStringList ( 0 , lst ) ; 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < String > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < String > list ) { 
 + builder . addStringList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 
 
 public void setByteList ( String fieldName , RealmList < Byte > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addByteList ( 0 , lst ) ; 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Byte > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < Byte > list ) { 
 + builder . addByteList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 
 
 public void setShortList ( String fieldName , RealmList < Short > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addShortList ( 0 , lst ) ; 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Short > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < Short > list ) { 
 + builder . addShortList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 
 
 public void setIntegerList ( String fieldName , RealmList < Integer > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addIntegerList ( 0 , lst ) ; 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Integer > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < Integer > list ) { 
 + builder . addIntegerList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 
 
 public void setLongList ( String fieldName , RealmList < Long > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addLongList ( 0 , lst ) ; 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Long > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < Long > list ) { 
 + builder . addLongList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 
 
 public void setBooleanList ( String fieldName , RealmList < Boolean > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addBooleanList ( 0 , lst ) ; 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Boolean > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < Boolean > list ) { 
 + builder . addBooleanList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 
 
 public void setByteArrayList ( String fieldName , RealmList < byte [ ] > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addByteArrayList ( 0 , lst ) ; 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < byte [ ] > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < byte [ ] > list ) { 
 + builder . addByteArrayList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 
 
 public void setDateList ( String fieldName , RealmList < Date > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addDateList ( 0 , lst ) ; 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Date > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < Date > list ) { 
 + builder . addDateList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 
 
 public void setFloatList ( String fieldName , RealmList < Float > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addFloatList ( 0 , lst ) ; 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Float > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < Float > list ) { 
 + builder . addFloatList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 
 
 public void setDoubleList ( String fieldName , RealmList < Double > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addDoubleList ( 0 , lst ) ; 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < Double > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < Double > list ) { 
 + builder . addDoubleList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 
 
 - public void setModelList ( String fieldName , RealmList < ? extends RealmModel > list ) { 
 - addTypeSpecificList ( fieldName , list , ( builder , lst ) - > { 
 - builder . addObjectList ( 0 , lst ) ; 
 + public void setModelList ( String fieldName , RealmList < RealmModel > list ) { 
 + addTypeSpecificList ( fieldName , list , new AddListTypeDelegate < RealmModel > ( ) { 
 + @ Override 
 + public void addList ( OsObjectBuilder builder , RealmList < RealmModel > list ) { 
 + builder . addObjectList ( 0 , list ) ; 
 + } 
 } ) ; 
 } 


NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmListTest . java b / realm / src / androidTest / java / io / realm / RealmListTest . java 
 index 8bbac40 . . f1cb68a 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmListTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmListTest . java 
 @ @ - 53 , 4 + 53 , 122 @ @ public class RealmListTest extends AndroidTestCase { 
 } catch ( RealmException ignore ) { 
 } 
 } 
 - } 
 + 
 + public void testAddNonManagedMode ( ) { 
 + RealmList list = new RealmList ( ) ; 
 + AllTypes object = new AllTypes ( ) ; 
 + object . setColumnString ( " String " ) ; 
 + list . add ( object ) ; 
 + assertEquals ( 1 , list . size ( ) ) ; 
 + assertEquals ( object , list . get ( 0 ) ) ; 
 + } 
 + 
 + public void testAddNullNonManagedMode ( ) { 
 + RealmList list = new RealmList ( ) ; 
 + try { 
 + list . add ( null ) ; 
 + fail ( " Adding null should not be be allowed " ) ; 
 + } catch ( NullPointerException ignore ) { 
 + } 
 + } 
 + 
 + public void testAddManagedObject _ nonManagedMode ( ) { 
 + RealmList list = new RealmList ( ) ; 
 + testRealm . beginTransaction ( ) ; 
 + AllTypes managedAllTypes = testRealm . createObject ( AllTypes . class ) ; 
 + testRealm . commitTransaction ( ) ; 
 + try { 
 + list . add ( managedAllTypes ) ; 
 + fail ( " Adding managed objects to non - managed lists should fail " ) ; 
 + } catch ( IllegalStateException ignore ) { 
 + } 
 + } 
 + 
 + public void testAddAtIndex _ nonManagedMode ( ) { 
 + RealmList list = new RealmList ( ) ; 
 + AllTypes object = new AllTypes ( ) ; 
 + object . setColumnString ( " String " ) ; 
 + list . add ( 0 , object ) ; 
 + assertEquals ( 1 , list . size ( ) ) ; 
 + assertEquals ( object , list . get ( 0 ) ) ; 
 + } 
 + 
 + public void testAddManagedObjectAtIndex _ nonManagedMode ( ) { 
 + RealmList list = new RealmList ( ) ; 
 + testRealm . beginTransaction ( ) ; 
 + AllTypes managedAllTypes = testRealm . createObject ( AllTypes . class ) ; 
 + testRealm . commitTransaction ( ) ; 
 + try { 
 + list . add ( 5 , managedAllTypes ) ; 
 + fail ( " Adding managed objects to non - managed lists should fail " ) ; 
 + } catch ( IllegalStateException ignore ) { 
 + } 
 + } 
 + 
 + public void testAddNullAtIndex _ nonManagedMode ( ) { 
 + RealmList list = new RealmList ( ) ; 
 + try { 
 + list . add ( null ) ; 
 + fail ( " Adding null should not be be allowed " ) ; 
 + } catch ( NullPointerException ignore ) { 
 + } 
 + } 
 + 
 + public void testSet _ nonManagedMode ( ) { 
 + RealmList list = new RealmList ( ) ; 
 + list . add ( new AllTypes ( ) ) ; 
 + list . set ( 0 , new AllTypes ( ) ) ; 
 + assertEquals ( 1 , list . size ( ) ) ; 
 + } 
 + 
 + public void testSetNull _ nonManagedMode ( ) { 
 + RealmList list = new RealmList ( ) ; 
 + try { 
 + list . set ( 5 , null ) ; 
 + fail ( " Setting a null value should result in a exception " ) ; 
 + } catch ( NullPointerException ignore ) { 
 + } 
 + } 
 + 
 + public void testSetManagedObject _ nonManagedMode ( ) { 
 + RealmList list = new RealmList ( ) ; 
 + testRealm . beginTransaction ( ) ; 
 + AllTypes managedAllTypes = testRealm . createObject ( AllTypes . class ) ; 
 + testRealm . commitTransaction ( ) ; 
 + try { 
 + list . set ( 5 , managedAllTypes ) ; 
 + fail ( " Setting managed objects to non - managed lists should fail " ) ; 
 + } catch ( IllegalStateException ignore ) { 
 + } 
 + } 
 + 
 + public void testClear _ nonManagedMode ( ) { 
 + RealmList list = new RealmList ( ) ; 
 + list . add ( new AllTypes ( ) ) ; 
 + assertEquals ( 1 , list . size ( ) ) ; 
 + list . clear ( ) ; 
 + assertTrue ( list . isEmpty ( ) ) ; 
 + } 
 + 
 + public void testRemove _ nonManagedMode ( ) { 
 + RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; 
 + AllTypes object1 = new AllTypes ( ) ; 
 + list . add ( object1 ) ; 
 + AllTypes object2 = list . remove ( 0 ) ; 
 + assertEquals ( object1 , object2 ) ; 
 + } 
 + 
 + public void testGet _ nonManagedMode ( ) { 
 + RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; 
 + AllTypes object1 = new AllTypes ( ) ; 
 + list . add ( object1 ) ; 
 + AllTypes object2 = list . get ( 0 ) ; 
 + assertEquals ( object1 , object2 ) ; 
 + } 
 + 
 + public void testSize _ nonManagedMode ( ) { 
 + RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; 
 + list . add ( new AllTypes ( ) ) ; 
 + assertEquals ( 1 , list . size ( ) ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 index adf3473 . . 67f36e0 100644 
 - - - a / realm / src / main / java / io / realm / RealmList . java 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 35 , 6 + 35 , 8 @ @ import io . realm . internal . TableQuery ; 
 public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 
 private static final String ONLY _ IN _ MANAGED _ MODE _ MESSAGE = " This method is only available in managed mode " ; 
 + private static final String NULL _ OBJECTS _ NOT _ ALLOWED _ MESSAGE = " RealmList does not accept null values " ; 
 + public static final String MANAGED _ OBJECTS _ NOT _ ALLOWED _ MESSAGE = " RealmObjects already managed by Realm cannot be added to RealmList in non - managed mode . " ; 
 
 private final boolean managedMode ; 
 private Class < E > clazz ; 
 @ @ - 77 , 6 + 79 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 if ( managedMode ) { 
 view . insert ( location , object . row . getIndex ( ) ) ; 
 } else { 
 + assertValidObjectInNonManagedMode ( object ) ; 
 nonManagedList . add ( location , object ) ; 
 } 
 } 
 @ @ - 89 , 6 + 92 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 if ( managedMode ) { 
 view . add ( object . row . getIndex ( ) ) ; 
 } else { 
 + assertValidObjectInNonManagedMode ( object ) ; 
 nonManagedList . add ( object ) ; 
 } 
 return true ; 
 @ @ - 102 , 6 + 106 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 if ( managedMode ) { 
 view . set ( location , object . row . getIndex ( ) ) ; 
 } else { 
 + assertValidObjectInNonManagedMode ( object ) ; 
 nonManagedList . set ( location , object ) ; 
 } 
 return object ; 
 @ @ - 116 , 6 + 121 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 if ( managedMode ) { 
 view . move ( oldPos , newPos ) ; 
 } else { 
 + / / TODO Should we support this ? 
 throw new RealmException ( ONLY _ IN _ MANAGED _ MODE _ MESSAGE ) ; 
 } 
 } 
 @ @ - 212 , 10 + 218 , 19 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 } 
 } 
 
 + private void assertValidObjectInNonManagedMode ( E object ) { 
 + if ( object = = null ) { 
 + throw new NullPointerException ( NULL _ OBJECTS _ NOT _ ALLOWED _ MESSAGE ) ; 
 + } 
 + if ( object . realm ! = null ) { 
 + throw new IllegalStateException ( MANAGED _ OBJECTS _ NOT _ ALLOWED _ MESSAGE ) ; 
 + } 
 + } 
 + 
 @ Override 
 public String toString ( ) { 
 StringBuilder sb = new StringBuilder ( ) ; 
 - sb . append ( clazz . getSimpleName ( ) ) ; 
 + sb . append ( managedMode ? clazz . getSimpleName ( ) : getClass ( ) . getSimpleName ( ) ) ; 
 sb . append ( " @ [ " ) ; 
 for ( int i = 0 ; i < size ( ) ; i + + ) { 
 if ( managedMode ) {
