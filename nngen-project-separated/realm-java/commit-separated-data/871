BLEU SCORE: 0.00915781944436709

TEST MSG: testProcessLocalListenersAfterRefresh fix
GENERATED MSG: Add Realm . isClose ( ) method . # 1431

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> index c1b2164 . . b7d4f81 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 1216 , 7 + 1216 , 7 @ @ public class RealmTest { <nl> } <nl> <nl> @ Test <nl> - public void testCopManagedObjectToOtherRealm ( ) { <nl> + public void testCopyManagedObjectToOtherRealm ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; <nl> allTypes . setColumnString ( " Test " ) ; <nl> @ @ - 2127 , 6 + 2127 , 7 @ @ public class RealmTest { <nl> / / Used by the background thread to wait for the main thread to do the write operation <nl> final CountDownLatch bgThreadLatch = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch bgClosedLatch = new CountDownLatch ( 1 ) ; <nl> + final CountDownLatch bgThreadReadyLatch = new CountDownLatch ( 1 ) ; <nl> <nl> Thread backgroundThread = new Thread ( ) { <nl> @ Override <nl> @ @ - 2153 , 20 + 2154 , 29 @ @ public class RealmTest { <nl> } <nl> } ) ; <nl> <nl> + bgThreadReadyLatch . countDown ( ) ; <nl> bgThreadLatch . await ( ) ; / / Wait for the main thread to do a write operation <nl> bgRealm . refresh ( ) ; / / This should call the listener <nl> assertTrue ( listenerWasCalled . get ( ) ) ; <nl> assertTrue ( typeListenerWasCalled . get ( ) ) ; <nl> - } catch ( InterruptedException e ) { <nl> - fail ( ) ; <nl> - } finally { <nl> bgRealm . close ( ) ; <nl> + bgRealm = null ; <nl> + / / DON ' T count down in the final block ! The test will fail silently ! ! ! <nl> bgClosedLatch . countDown ( ) ; <nl> + } catch ( InterruptedException e ) { <nl> + fail ( e . getMessage ( ) ) ; <nl> + } finally { <nl> + if ( bgRealm ! = null ) { <nl> + bgRealm . close ( ) ; <nl> + } <nl> } <nl> } <nl> } ; <nl> backgroundThread . start ( ) ; <nl> <nl> + / / Wait until bgThread finishes adding listener to the RealmResults . Otherwise same TableView version won ' t <nl> + / / trigger the listener . <nl> + bgThreadReadyLatch . await ( ) ; <nl> testRealm . beginTransaction ( ) ; <nl> testRealm . createObject ( Dog . class ) ; <nl> testRealm . commitTransaction ( ) ;
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index 6ee1add . . 11ace1a 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 3 + 1 , 6 @ @ <nl> + 0 . 84 <nl> + * Added Realm . isClosed ( ) method . <nl> + <nl> 0 . 83 <nl> * BREAKING CHANGE : Database file format update . The Realm file created by this version cannot be used by previous versions of Realm . <nl> * BREAKING CHANGE : Removed deprecated methods and constructors from the Realm class . <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 8cac915 . . 6a2996f 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 1812 , 6 + 1812 , 42 @ @ public class RealmTest extends AndroidTestCase { <nl> testRealm . close ( ) ; <nl> } <nl> <nl> + public void testRealmIsClosed ( ) { <nl> + assertFalse ( testRealm . isClosed ( ) ) ; <nl> + testRealm . close ( ) ; <nl> + assertTrue ( testRealm . isClosed ( ) ) ; <nl> + } <nl> + <nl> + / / Test Realm # isClosed ( ) in another thread different from where it is created . <nl> + public void testRealmIsClosedInDifferentThread ( ) throws InterruptedException { <nl> + final CountDownLatch latch = new CountDownLatch ( 1 ) ; <nl> + final AssertionFailedError threadAssertionError [ ] = new AssertionFailedError [ 1 ] ; <nl> + <nl> + final Thread thatThread = new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + try { <nl> + testRealm . isClosed ( ) ; <nl> + threadAssertionError [ 0 ] = new AssertionFailedError ( <nl> + " Call isClosed ( ) of Realm instance in a different thread should throw IllegalStateException . " ) ; <nl> + } catch ( IllegalStateException ignored ) { <nl> + } <nl> + latch . countDown ( ) ; <nl> + } <nl> + } ) ; <nl> + thatThread . start ( ) ; <nl> + <nl> + / / Timeout should never happen <nl> + latch . await ( ) ; <nl> + if ( threadAssertionError [ 0 ] ! = null ) { <nl> + throw threadAssertionError [ 0 ] ; <nl> + } <nl> + / / After exception thrown in another thread , nothing should be changed to the realm in this thread . <nl> + testRealm . checkIfValid ( ) ; <nl> + assertFalse ( testRealm . isClosed ( ) ) ; <nl> + testRealm . close ( ) ; <nl> + } <nl> + <nl> / / We should not cache wrong configurations <nl> public void testDontCacheWrongConfigurations ( ) throws IOException { <nl> testRealm . close ( ) ; <nl> diff - - git a / realm / src / main / java / io / realm / BaseRealm . java b / realm / src / main / java / io / realm / BaseRealm . java <nl> index 754916e . . c62605d 100644 <nl> - - - a / realm / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 415 , 6 + 415 , 19 @ @ abstract class BaseRealm implements Closeable { <nl> } <nl> <nl> / * * <nl> + * Check if the { @ link io . realm . Realm } instance has already been closed . <nl> + * <nl> + * @ return { @ code true } if closed , { @ code false } otherwise . <nl> + * / <nl> + public boolean isClosed ( ) { <nl> + if ( this . threadId ! = Thread . currentThread ( ) . getId ( ) ) { <nl> + throw new IllegalStateException ( INCORRECT _ THREAD _ MESSAGE ) ; <nl> + } <nl> + <nl> + return sharedGroupManager = = null | | ! sharedGroupManager . isOpen ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Returns the ThreadLocal reference counter for this Realm . <nl> * / <nl> protected abstract Map < RealmConfiguration , Integer > getLocalReferenceCount ( ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 index c1b2164 . . b7d4f81 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 1216 , 7 + 1216 , 7 @ @ public class RealmTest { 
 } 
 
 @ Test 
 - public void testCopManagedObjectToOtherRealm ( ) { 
 + public void testCopyManagedObjectToOtherRealm ( ) { 
 testRealm . beginTransaction ( ) ; 
 AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; 
 allTypes . setColumnString ( " Test " ) ; 
 @ @ - 2127 , 6 + 2127 , 7 @ @ public class RealmTest { 
 / / Used by the background thread to wait for the main thread to do the write operation 
 final CountDownLatch bgThreadLatch = new CountDownLatch ( 1 ) ; 
 final CountDownLatch bgClosedLatch = new CountDownLatch ( 1 ) ; 
 + final CountDownLatch bgThreadReadyLatch = new CountDownLatch ( 1 ) ; 
 
 Thread backgroundThread = new Thread ( ) { 
 @ Override 
 @ @ - 2153 , 20 + 2154 , 29 @ @ public class RealmTest { 
 } 
 } ) ; 
 
 + bgThreadReadyLatch . countDown ( ) ; 
 bgThreadLatch . await ( ) ; / / Wait for the main thread to do a write operation 
 bgRealm . refresh ( ) ; / / This should call the listener 
 assertTrue ( listenerWasCalled . get ( ) ) ; 
 assertTrue ( typeListenerWasCalled . get ( ) ) ; 
 - } catch ( InterruptedException e ) { 
 - fail ( ) ; 
 - } finally { 
 bgRealm . close ( ) ; 
 + bgRealm = null ; 
 + / / DON ' T count down in the final block ! The test will fail silently ! ! ! 
 bgClosedLatch . countDown ( ) ; 
 + } catch ( InterruptedException e ) { 
 + fail ( e . getMessage ( ) ) ; 
 + } finally { 
 + if ( bgRealm ! = null ) { 
 + bgRealm . close ( ) ; 
 + } 
 } 
 } 
 } ; 
 backgroundThread . start ( ) ; 
 
 + / / Wait until bgThread finishes adding listener to the RealmResults . Otherwise same TableView version won ' t 
 + / / trigger the listener . 
 + bgThreadReadyLatch . await ( ) ; 
 testRealm . beginTransaction ( ) ; 
 testRealm . createObject ( Dog . class ) ; 
 testRealm . commitTransaction ( ) ;

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index 6ee1add . . 11ace1a 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 3 + 1 , 6 @ @ 
 + 0 . 84 
 + * Added Realm . isClosed ( ) method . 
 + 
 0 . 83 
 * BREAKING CHANGE : Database file format update . The Realm file created by this version cannot be used by previous versions of Realm . 
 * BREAKING CHANGE : Removed deprecated methods and constructors from the Realm class . 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 8cac915 . . 6a2996f 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 1812 , 6 + 1812 , 42 @ @ public class RealmTest extends AndroidTestCase { 
 testRealm . close ( ) ; 
 } 
 
 + public void testRealmIsClosed ( ) { 
 + assertFalse ( testRealm . isClosed ( ) ) ; 
 + testRealm . close ( ) ; 
 + assertTrue ( testRealm . isClosed ( ) ) ; 
 + } 
 + 
 + / / Test Realm # isClosed ( ) in another thread different from where it is created . 
 + public void testRealmIsClosedInDifferentThread ( ) throws InterruptedException { 
 + final CountDownLatch latch = new CountDownLatch ( 1 ) ; 
 + final AssertionFailedError threadAssertionError [ ] = new AssertionFailedError [ 1 ] ; 
 + 
 + final Thread thatThread = new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + testRealm . isClosed ( ) ; 
 + threadAssertionError [ 0 ] = new AssertionFailedError ( 
 + " Call isClosed ( ) of Realm instance in a different thread should throw IllegalStateException . " ) ; 
 + } catch ( IllegalStateException ignored ) { 
 + } 
 + latch . countDown ( ) ; 
 + } 
 + } ) ; 
 + thatThread . start ( ) ; 
 + 
 + / / Timeout should never happen 
 + latch . await ( ) ; 
 + if ( threadAssertionError [ 0 ] ! = null ) { 
 + throw threadAssertionError [ 0 ] ; 
 + } 
 + / / After exception thrown in another thread , nothing should be changed to the realm in this thread . 
 + testRealm . checkIfValid ( ) ; 
 + assertFalse ( testRealm . isClosed ( ) ) ; 
 + testRealm . close ( ) ; 
 + } 
 + 
 / / We should not cache wrong configurations 
 public void testDontCacheWrongConfigurations ( ) throws IOException { 
 testRealm . close ( ) ; 
 diff - - git a / realm / src / main / java / io / realm / BaseRealm . java b / realm / src / main / java / io / realm / BaseRealm . java 
 index 754916e . . c62605d 100644 
 - - - a / realm / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / src / main / java / io / realm / BaseRealm . java 
 @ @ - 415 , 6 + 415 , 19 @ @ abstract class BaseRealm implements Closeable { 
 } 
 
 / * * 
 + * Check if the { @ link io . realm . Realm } instance has already been closed . 
 + * 
 + * @ return { @ code true } if closed , { @ code false } otherwise . 
 + * / 
 + public boolean isClosed ( ) { 
 + if ( this . threadId ! = Thread . currentThread ( ) . getId ( ) ) { 
 + throw new IllegalStateException ( INCORRECT _ THREAD _ MESSAGE ) ; 
 + } 
 + 
 + return sharedGroupManager = = null | | ! sharedGroupManager . isOpen ( ) ; 
 + } 
 + 
 + / * * 
 * Returns the ThreadLocal reference counter for this Realm . 
 * / 
 protected abstract Map < RealmConfiguration , Integer > getLocalReferenceCount ( ) ;
