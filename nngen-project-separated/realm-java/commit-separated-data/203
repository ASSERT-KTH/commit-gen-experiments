BLEU SCORE: 0.019833734500134766

TEST MSG: Add support for ` RunInHandlerThread ` to emulate the Main thread
GENERATED MSG: No longer caches configurations with a encryption key before it has been validated the key is correct .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / AndroidCapabilitiesTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / AndroidCapabilitiesTest . java <nl> new file mode 100644 <nl> index 0000000 . . b3ca055 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / AndroidCapabilitiesTest . java <nl> @ @ - 0 , 0 + 1 , 51 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package io . realm . internal ; <nl> + <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> + <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import io . realm . internal . android . AndroidCapabilities ; <nl> + import io . realm . rule . RunInLooperThread ; <nl> + import io . realm . rule . RunTestInLooperThread ; <nl> + <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + @ RunWith ( AndroidJUnit4 . class ) <nl> + public class AndroidCapabilitiesTest { <nl> + <nl> + @ Rule <nl> + public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread ( ) <nl> + public void emulateMainThread _ false ( ) { <nl> + assertFalse ( new AndroidCapabilities ( ) . isMainThread ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread ( emulateMainThread = true ) <nl> + public void emulateMainThread _ true ( ) { <nl> + assertTrue ( new AndroidCapabilities ( ) . isMainThread ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> index e5b6d65 . . c5325a0 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> @ @ - 40 , 6 + 40 , 7 @ @ import java . util . concurrent . ThreadFactory ; <nl> import io . realm . Realm ; <nl> import io . realm . RealmConfiguration ; <nl> import io . realm . TestHelper ; <nl> + import io . realm . internal . android . AndroidCapabilities ; <nl> <nl> <nl> / * * <nl> @ @ - 281 , 7 + 282 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { <nl> / / Wait for all async tasks to have completed to ensure a successful deleteRealm call . <nl> / / If it times out , it will throw . <nl> TestHelper . waitRealmThreadExecutorFinish ( ) ; <nl> - <nl> + AndroidCapabilities . EMULATE _ MAIN _ THREAD = false ; <nl> super . after ( ) ; <nl> <nl> / / probably belt * and * suspenders . . . <nl> @ @ - 376 , 6 + 377 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { <nl> runnableBefore . newInstance ( ) . run ( getConfiguration ( ) ) ; <nl> } <nl> <nl> + AndroidCapabilities . EMULATE _ MAIN _ THREAD = annotation . emulateMainThread ( ) ; <nl> runTest ( annotation . threadName ( ) ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunTestInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunTestInLooperThread . java <nl> index c24c085 . . 6413757 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunTestInLooperThread . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunTestInLooperThread . java <nl> @ @ - 33 , 4 + 33 , 5 @ @ import static java . lang . annotation . RetentionPolicy . RUNTIME ; <nl> public @ interface RunTestInLooperThread { <nl> String threadName ( ) default " RunTestInLooperThread " ; <nl> Class < ? extends RunInLooperThread . RunnableBefore > before ( ) default RunInLooperThread . RunnableBefore . class ; <nl> + boolean emulateMainThread ( ) default false ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java <nl> index c7f08f7 . . 73bedd8 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ package io . realm . internal . android ; <nl> <nl> import android . os . Looper ; <nl> <nl> + import edu . umd . cs . findbugs . annotations . SuppressFBWarnings ; <nl> import io . realm . internal . Capabilities ; <nl> <nl> <nl> @ @ - 25 , 6 + 26 , 13 @ @ import io . realm . internal . Capabilities ; <nl> * / <nl> public class AndroidCapabilities implements Capabilities { <nl> <nl> + / / Public so it can be set from tests . <nl> + / / If set , it will treat the current looper thread as the main thread . <nl> + / / It is up to the caller to handle any race conditions around this . Right now only <nl> + / / RunInLooperThread . java does this as part of setting up the test . <nl> + @ SuppressFBWarnings ( " MS _ SHOULD _ BE _ FINAL " ) <nl> + public static boolean EMULATE _ MAIN _ THREAD = false ; <nl> + <nl> private final Looper looper ; <nl> private final boolean isIntentServiceThread ; <nl> <nl> @ @ - 52 , 7 + 60 , 7 @ @ public class AndroidCapabilities implements Capabilities { <nl> <nl> @ Override <nl> public boolean isMainThread ( ) { <nl> - return looper ! = null & & looper = = Looper . getMainLooper ( ) ; <nl> + return looper ! = null & & ( EMULATE _ MAIN _ THREAD | | looper = = Looper . getMainLooper ( ) ) ; <nl> } <nl> <nl> private boolean hasLooper ( ) {
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index f2fdb5a . . e8ca7da 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 0 . 82 . 1 <nl> + * Fixed a bug where using the wrong encryption key first caused the right key to be seen as invalid . <nl> * Fixed a bug where String fields were ignored when updating objects from JSON with null values . <nl> * Fixed a bug when calling System . exit ( 0 ) , the process might hang . <nl> <nl> diff - - git a / realm / src / androidTest / assets / encrypted . realm b / realm / src / androidTest / assets / encrypted . realm <nl> new file mode 100644 <nl> index 0000000 . . d61e567 <nl> Binary files / dev / null and b / realm / src / androidTest / assets / encrypted . realm differ <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 8b9fd14 . . 27db2c6 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 1770 , 4 + 1770 , 31 @ @ public class RealmTest extends AndroidTestCase { <nl> testRealm . checkIfValid ( ) ; <nl> testRealm . close ( ) ; <nl> } <nl> + <nl> + / / We should not cache wrong configurations <nl> + public void testDontCacheWrongConfigurations ( ) throws IOException { <nl> + String REALM _ NAME = " encrypted . realm " ; <nl> + TestHelper . copyRealmFromAssets ( getContext ( ) , REALM _ NAME , REALM _ NAME ) ; <nl> + <nl> + RealmConfiguration wrongConfig = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . name ( REALM _ NAME ) <nl> + . encryptionKey ( TestHelper . SHA512 ( " foo " ) ) <nl> + . build ( ) ; <nl> + <nl> + RealmConfiguration rightConfig = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . name ( REALM _ NAME ) <nl> + . encryptionKey ( TestHelper . SHA512 ( " realm " ) ) <nl> + . build ( ) ; <nl> + <nl> + / / Open Realm with wrong key <nl> + try { <nl> + testRealm = Realm . getInstance ( wrongConfig ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> + <nl> + / / Try again with proper key <nl> + testRealm = Realm . getInstance ( rightConfig ) ; <nl> + assertNotNull ( testRealm ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / androidTest / java / io / realm / TestHelper . java b / realm / src / androidTest / java / io / realm / TestHelper . java <nl> index 16459ca . . ec22535 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / TestHelper . java <nl> + + + b / realm / src / androidTest / java / io / realm / TestHelper . java <nl> @ @ - 26 , 7 + 26 , 10 @ @ import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> + import java . io . UnsupportedEncodingException ; <nl> import java . nio . charset . Charset ; <nl> + import java . security . MessageDigest ; <nl> + import java . security . NoSuchAlgorithmException ; <nl> import java . util . Random ; <nl> <nl> public class TestHelper { <nl> @ @ - 113 , 4 + 116 , 17 @ @ public class TestHelper { <nl> <nl> return garbage ; <nl> } <nl> + <nl> + / / Creates SHA512 hash of a String . Can be used as password for encrypted Realms . <nl> + public static byte [ ] SHA512 ( String str ) { <nl> + try { <nl> + MessageDigest md = MessageDigest . getInstance ( " SHA - 512 " ) ; <nl> + md . update ( str . getBytes ( " UTF - 8 " ) , 0 , str . length ( ) ) ; <nl> + return md . digest ( ) ; <nl> + } catch ( NoSuchAlgorithmException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } catch ( UnsupportedEncodingException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index bfb33ad . . 72cd867 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 192 , 7 + 192 , 13 @ @ public final class Realm implements Closeable { <nl> } <nl> } <nl> <nl> - / / The constructor in private to enforce the use of the static one <nl> + / * * <nl> + * The constructor is private to enforce the use of the static one . <nl> + * <nl> + * @ param configuration Configuration used to open the Realm . <nl> + * @ param autoRefresh { @ code true } if Realm should auto - refresh . { @ code false } otherwise . <nl> + * @ throws IllegalArgumentException if trying to open an encrypted Realm with the wrong key . <nl> + * / <nl> private Realm ( RealmConfiguration configuration , boolean autoRefresh ) { <nl> this . threadId = Thread . currentThread ( ) . getId ( ) ; <nl> this . configuration = configuration ; <nl> @ @ - 578 , 11 + 584 , 11 @ @ public final class Realm implements Closeable { <nl> return realm ; <nl> } <nl> <nl> - <nl> / / Create new Realm and cache it . All exception code paths must close the Realm otherwise we risk serving <nl> / / faulty cache data . <nl> validateAgainstExistingConfigurations ( configuration ) ; <nl> realm = new Realm ( configuration , autoRefresh ) ; <nl> + globalPathConfigurationCache . get ( canonicalPath ) . add ( configuration ) ; <nl> realms . put ( configuration , realm ) ; <nl> localRefCount . put ( configuration , references + 1 ) ; <nl> <nl> @ @ - 665 , 9 + 671 , 6 @ @ public final class Realm implements Closeable { <nl> " configurations pointing to " + newConfiguration . getPath ( ) + " are being used . " ) ; <nl> } <nl> } <nl> - <nl> - / / The new configuration doesn ' t violate existing configurations . Cache it . <nl> - pathConfigurationCache . add ( newConfiguration ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " )

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / AndroidCapabilitiesTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / AndroidCapabilitiesTest . java 
 new file mode 100644 
 index 0000000 . . b3ca055 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / AndroidCapabilitiesTest . java 
 @ @ - 0 , 0 + 1 , 51 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package io . realm . internal ; 
 + 
 + import android . support . test . runner . AndroidJUnit4 ; 
 + 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import io . realm . internal . android . AndroidCapabilities ; 
 + import io . realm . rule . RunInLooperThread ; 
 + import io . realm . rule . RunTestInLooperThread ; 
 + 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + @ RunWith ( AndroidJUnit4 . class ) 
 + public class AndroidCapabilitiesTest { 
 + 
 + @ Rule 
 + public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; 
 + 
 + @ Test 
 + @ RunTestInLooperThread ( ) 
 + public void emulateMainThread _ false ( ) { 
 + assertFalse ( new AndroidCapabilities ( ) . isMainThread ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread ( emulateMainThread = true ) 
 + public void emulateMainThread _ true ( ) { 
 + assertTrue ( new AndroidCapabilities ( ) . isMainThread ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + 
 + } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 index e5b6d65 . . c5325a0 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 @ @ - 40 , 6 + 40 , 7 @ @ import java . util . concurrent . ThreadFactory ; 
 import io . realm . Realm ; 
 import io . realm . RealmConfiguration ; 
 import io . realm . TestHelper ; 
 + import io . realm . internal . android . AndroidCapabilities ; 
 
 
 / * * 
 @ @ - 281 , 7 + 282 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { 
 / / Wait for all async tasks to have completed to ensure a successful deleteRealm call . 
 / / If it times out , it will throw . 
 TestHelper . waitRealmThreadExecutorFinish ( ) ; 
 - 
 + AndroidCapabilities . EMULATE _ MAIN _ THREAD = false ; 
 super . after ( ) ; 
 
 / / probably belt * and * suspenders . . . 
 @ @ - 376 , 6 + 377 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { 
 runnableBefore . newInstance ( ) . run ( getConfiguration ( ) ) ; 
 } 
 
 + AndroidCapabilities . EMULATE _ MAIN _ THREAD = annotation . emulateMainThread ( ) ; 
 runTest ( annotation . threadName ( ) ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunTestInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunTestInLooperThread . java 
 index c24c085 . . 6413757 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunTestInLooperThread . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunTestInLooperThread . java 
 @ @ - 33 , 4 + 33 , 5 @ @ import static java . lang . annotation . RetentionPolicy . RUNTIME ; 
 public @ interface RunTestInLooperThread { 
 String threadName ( ) default " RunTestInLooperThread " ; 
 Class < ? extends RunInLooperThread . RunnableBefore > before ( ) default RunInLooperThread . RunnableBefore . class ; 
 + boolean emulateMainThread ( ) default false ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java 
 index c7f08f7 . . 73bedd8 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java 
 @ @ - 17 , 6 + 17 , 7 @ @ package io . realm . internal . android ; 
 
 import android . os . Looper ; 
 
 + import edu . umd . cs . findbugs . annotations . SuppressFBWarnings ; 
 import io . realm . internal . Capabilities ; 
 
 
 @ @ - 25 , 6 + 26 , 13 @ @ import io . realm . internal . Capabilities ; 
 * / 
 public class AndroidCapabilities implements Capabilities { 
 
 + / / Public so it can be set from tests . 
 + / / If set , it will treat the current looper thread as the main thread . 
 + / / It is up to the caller to handle any race conditions around this . Right now only 
 + / / RunInLooperThread . java does this as part of setting up the test . 
 + @ SuppressFBWarnings ( " MS _ SHOULD _ BE _ FINAL " ) 
 + public static boolean EMULATE _ MAIN _ THREAD = false ; 
 + 
 private final Looper looper ; 
 private final boolean isIntentServiceThread ; 
 
 @ @ - 52 , 7 + 60 , 7 @ @ public class AndroidCapabilities implements Capabilities { 
 
 @ Override 
 public boolean isMainThread ( ) { 
 - return looper ! = null & & looper = = Looper . getMainLooper ( ) ; 
 + return looper ! = null & & ( EMULATE _ MAIN _ THREAD | | looper = = Looper . getMainLooper ( ) ) ; 
 } 
 
 private boolean hasLooper ( ) {

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index f2fdb5a . . e8ca7da 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 0 . 82 . 1 
 + * Fixed a bug where using the wrong encryption key first caused the right key to be seen as invalid . 
 * Fixed a bug where String fields were ignored when updating objects from JSON with null values . 
 * Fixed a bug when calling System . exit ( 0 ) , the process might hang . 
 
 diff - - git a / realm / src / androidTest / assets / encrypted . realm b / realm / src / androidTest / assets / encrypted . realm 
 new file mode 100644 
 index 0000000 . . d61e567 
 Binary files / dev / null and b / realm / src / androidTest / assets / encrypted . realm differ 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 8b9fd14 . . 27db2c6 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 1770 , 4 + 1770 , 31 @ @ public class RealmTest extends AndroidTestCase { 
 testRealm . checkIfValid ( ) ; 
 testRealm . close ( ) ; 
 } 
 + 
 + / / We should not cache wrong configurations 
 + public void testDontCacheWrongConfigurations ( ) throws IOException { 
 + String REALM _ NAME = " encrypted . realm " ; 
 + TestHelper . copyRealmFromAssets ( getContext ( ) , REALM _ NAME , REALM _ NAME ) ; 
 + 
 + RealmConfiguration wrongConfig = new RealmConfiguration . Builder ( getContext ( ) ) 
 + . name ( REALM _ NAME ) 
 + . encryptionKey ( TestHelper . SHA512 ( " foo " ) ) 
 + . build ( ) ; 
 + 
 + RealmConfiguration rightConfig = new RealmConfiguration . Builder ( getContext ( ) ) 
 + . name ( REALM _ NAME ) 
 + . encryptionKey ( TestHelper . SHA512 ( " realm " ) ) 
 + . build ( ) ; 
 + 
 + / / Open Realm with wrong key 
 + try { 
 + testRealm = Realm . getInstance ( wrongConfig ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 + 
 + / / Try again with proper key 
 + testRealm = Realm . getInstance ( rightConfig ) ; 
 + assertNotNull ( testRealm ) ; 
 + } 
 } 
 diff - - git a / realm / src / androidTest / java / io / realm / TestHelper . java b / realm / src / androidTest / java / io / realm / TestHelper . java 
 index 16459ca . . ec22535 100644 
 - - - a / realm / src / androidTest / java / io / realm / TestHelper . java 
 + + + b / realm / src / androidTest / java / io / realm / TestHelper . java 
 @ @ - 26 , 7 + 26 , 10 @ @ import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 + import java . io . UnsupportedEncodingException ; 
 import java . nio . charset . Charset ; 
 + import java . security . MessageDigest ; 
 + import java . security . NoSuchAlgorithmException ; 
 import java . util . Random ; 
 
 public class TestHelper { 
 @ @ - 113 , 4 + 116 , 17 @ @ public class TestHelper { 
 
 return garbage ; 
 } 
 + 
 + / / Creates SHA512 hash of a String . Can be used as password for encrypted Realms . 
 + public static byte [ ] SHA512 ( String str ) { 
 + try { 
 + MessageDigest md = MessageDigest . getInstance ( " SHA - 512 " ) ; 
 + md . update ( str . getBytes ( " UTF - 8 " ) , 0 , str . length ( ) ) ; 
 + return md . digest ( ) ; 
 + } catch ( NoSuchAlgorithmException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } catch ( UnsupportedEncodingException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index bfb33ad . . 72cd867 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 192 , 7 + 192 , 13 @ @ public final class Realm implements Closeable { 
 } 
 } 
 
 - / / The constructor in private to enforce the use of the static one 
 + / * * 
 + * The constructor is private to enforce the use of the static one . 
 + * 
 + * @ param configuration Configuration used to open the Realm . 
 + * @ param autoRefresh { @ code true } if Realm should auto - refresh . { @ code false } otherwise . 
 + * @ throws IllegalArgumentException if trying to open an encrypted Realm with the wrong key . 
 + * / 
 private Realm ( RealmConfiguration configuration , boolean autoRefresh ) { 
 this . threadId = Thread . currentThread ( ) . getId ( ) ; 
 this . configuration = configuration ; 
 @ @ - 578 , 11 + 584 , 11 @ @ public final class Realm implements Closeable { 
 return realm ; 
 } 
 
 - 
 / / Create new Realm and cache it . All exception code paths must close the Realm otherwise we risk serving 
 / / faulty cache data . 
 validateAgainstExistingConfigurations ( configuration ) ; 
 realm = new Realm ( configuration , autoRefresh ) ; 
 + globalPathConfigurationCache . get ( canonicalPath ) . add ( configuration ) ; 
 realms . put ( configuration , realm ) ; 
 localRefCount . put ( configuration , references + 1 ) ; 
 
 @ @ - 665 , 9 + 671 , 6 @ @ public final class Realm implements Closeable { 
 " configurations pointing to " + newConfiguration . getPath ( ) + " are being used . " ) ; 
 } 
 } 
 - 
 - / / The new configuration doesn ' t violate existing configurations . Cache it . 
 - pathConfigurationCache . add ( newConfiguration ) ; 
 } 
 
 @ SuppressWarnings ( " unchecked " )
