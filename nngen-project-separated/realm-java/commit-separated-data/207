BLEU SCORE: 0.08549161846379198

TEST MSG: Better detection of when ROS is running . Upgrade ROS used by integration tests .
GENERATED MSG: Better control of ROS instance used by the integration tests

TEST DIFF (one line): diff - - git a / dependencies . list b / dependencies . list <nl> index a732c8e . . 7a8215f 100644 <nl> - - - a / dependencies . list <nl> + + + b / dependencies . list <nl> @ @ - 10 , 4 + 10 , 4 @ @ REALM _ SYNC _ SHA256 = c93caa9b0ff1391550ce6b68ab3822fea7e6ae921498a3ebf3a5e6b17c56fa <nl> # / tools / sync _ test _ server / Dockerfile specify which repo ( apt ) we should <nl> # install / use between ' realm ' and ' realm - testing ' , the version below should <nl> # correspond to an existing version on the * specified * repo . <nl> - REALM _ OBJECT _ SERVER _ DE _ VERSION = 1 . 8 . 1 - 149 <nl> + REALM _ OBJECT _ SERVER _ DE _ VERSION = 1 . 8 . 3 - 83 <nl> diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js <nl> index 18d2139 . . 8905ec3 100755 <nl> - - - a / tools / sync _ test _ server / ros - testing - server . js <nl> + + + b / tools / sync _ test _ server / ros - testing - server . js <nl> @ @ - 7 , 6 + 7 , 26 @ @ const exec = require ( ' child _ process ' ) . exec ; <nl> var http = require ( ' http ' ) ; <nl> var dispatcher = require ( ' httpdispatcher ' ) ; <nl> <nl> + / / this query is used to check if ROS has started <nl> + / / while waiting for a permanante fix in https : / / github . com / realm / realm - object - server / issues / 1297 . <nl> + / / query should return 200 with the JSON payload Ex : { " version " : " 1 . 8 . 1 " , " flavor " : " developer " , " setupRequired " : true } <nl> + var options = { <nl> + hostname : ' 127 . 0 . 0 . 1 ' , <nl> + port : 9080 , <nl> + path : ' / api / info ' , <nl> + method : ' GET ' <nl> + } ; <nl> + <nl> + function tryUntilROSStart ( options , callback ) { <nl> + var req = http . request ( options , function ( res ) { <nl> + callback ( null , res ) ; <nl> + } ) ; <nl> + req . on ( ' error ' , function ( e ) { <nl> + tryUntilROSStart ( options , callback ) ; <nl> + } ) ; <nl> + req . end ( ) ; <nl> + } <nl> + <nl> / / Automatically track and cleanup files at exit <nl> temp . track ( ) ; <nl> <nl> @ @ - 34 , 12 + 54 , 6 @ @ function handleRequest ( request , response ) { <nl> var syncServerChildProcess = null ; <nl> <nl> function startRealmObjectServer ( done ) { <nl> - / / Hack for checking the ROS is fully initialized . <nl> - / / Consider the ROS is initialized fully only if log below shows twice <nl> - / / " client : Closing Realm file : / tmp / ros117521 - 7 - 1eiqt7a / internal _ data / permission / _ _ auth . realm " <nl> - / / https : / / github . com / realm / realm - object - server / issues / 1297 <nl> - var logFindingCounter = 2 <nl> - <nl> stopRealmObjectServer ( function ( err ) { <nl> if ( err ) { <nl> return ; <nl> @ @ - 56 , 12 + 70 , 6 @ @ function startRealmObjectServer ( done ) { <nl> { env : env , cwd : path } ) ; <nl> / / local config : <nl> syncServerChildProcess . stdout . on ( ' data ' , ( data ) = > { <nl> - if ( logFindingCounter ! = 0 & & / client : Closing Realm file : . * _ _ auth . realm / . test ( data ) ) { <nl> - if ( logFindingCounter = = 1 ) { <nl> - done ( ) <nl> - } <nl> - logFindingCounter - - <nl> - } <nl> winston . info ( ` stdout : $ { data } ` ) ; <nl> } ) ; <nl> <nl> @ @ - 72 , 6 + 80 , 11 @ @ function startRealmObjectServer ( done ) { <nl> syncServerChildProcess . on ( ' close ' , ( code ) = > { <nl> winston . info ( ` child process exited with code $ { code } ` ) ; <nl> } ) ; <nl> + <nl> + tryUntilROSStart ( options , function ( err , resp ) { <nl> + winston . info ( ' > > > > > > > > > > > > > > > > > > > [ ROS ] server started < < < < < < < < < < < < < < < < < < < ' ) ; <nl> + done ( ) <nl> + } ) ; <nl> } <nl> } ) ; <nl> } ) ; <nl> @ @ - 94 , 7 + 107 , 7 @ @ function stopRealmObjectServer ( callback ) { <nl> dispatcher . onGet ( " / start " , function ( req , res ) { <nl> startRealmObjectServer ( ( ) = > { <nl> res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; <nl> - res . end ( ' Starting a server ' ) ; <nl> + res . end ( ' Server started ' ) ; <nl> } ) <nl> } ) ; <nl>
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / BaseIntegrationTest . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / BaseIntegrationTest . java <nl> index 9f86b32 . . 8faa03f 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / BaseIntegrationTest . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / BaseIntegrationTest . java <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class BaseIntegrationTest { <nl> public final ExpectedException thrown = ExpectedException . none ( ) ; <nl> <nl> @ BeforeClass <nl> - public static void setUp ( ) throws Exception { <nl> + public static void setupTestClass ( ) throws Exception { <nl> SyncManager . Debug . skipOnlineChecking = true ; <nl> try { <nl> HttpUtils . startSyncServer ( ) ; <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class BaseIntegrationTest { <nl> } <nl> <nl> @ AfterClass <nl> - public static void tearDown ( ) throws Exception { <nl> + public static void tearDownTestClass ( ) throws Exception { <nl> try { <nl> HttpUtils . stopSyncServer ( ) ; <nl> } catch ( Exception e ) { <nl> @ @ - 77 , 8 + 77 , 6 @ @ public class BaseIntegrationTest { <nl> <nl> @ Before <nl> public void setupTest ( ) throws IOException { <nl> - / / TODO We should implement a more consistent reset method for all of Sync that reset <nl> - / / everything completely including deleting all files . <nl> deleteRosFiles ( ) ; <nl> if ( BaseRealm . applicationContext ! = null ) { <nl> / / Realm was already initialized . Reset all internal state <nl> @ @ - 98 , 21 + 96 , 28 @ @ public class BaseIntegrationTest { <nl> } <nl> <nl> @ After <nl> - public void tearDownTest ( ) throws IOException { <nl> + public void teardownTest ( ) { <nl> if ( looperThread . isTestComplete ( ) ) { <nl> / / Non - looper tests can reset here <nl> - RealmLog . setLevel ( originalLogLevel ) ; <nl> + resetTestEnvironment ( ) ; <nl> } else { <nl> / / Otherwise we need to wait for the test to complete <nl> looperThread . runAfterTest ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> - RealmLog . setLevel ( originalLogLevel ) ; <nl> + resetTestEnvironment ( ) ; <nl> } <nl> } ) ; <nl> } <nl> } <nl> <nl> + private void resetTestEnvironment ( ) { <nl> + for ( SyncUser syncUser : SyncUser . all ( ) . values ( ) ) { <nl> + syncUser . logout ( ) ; <nl> + } <nl> + RealmLog . setLevel ( originalLogLevel ) ; <nl> + } <nl> + <nl> / / Cleanup filesystem to make sure nothing lives for the next test . <nl> / / Failing to do so might lead to DIVERGENT _ HISTORY errors being thrown if Realms from <nl> / / previous tests are being accessed . <nl> diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js <nl> index 9cfdda3 . . 18d2139 100755 <nl> - - - a / tools / sync _ test _ server / ros - testing - server . js <nl> + + + b / tools / sync _ test _ server / ros - testing - server . js <nl> @ @ - 40 , 50 + 40 , 52 @ @ function startRealmObjectServer ( done ) { <nl> / / https : / / github . com / realm / realm - object - server / issues / 1297 <nl> var logFindingCounter = 2 <nl> <nl> - stopRealmObjectServer ( ) ; <nl> - temp . mkdir ( ' ros ' , function ( err , path ) { <nl> - if ( ! err ) { <nl> - winston . info ( " Starting sync server in " , path ) ; <nl> - var env = Object . create ( process . env ) ; <nl> - winston . info ( env . NODE _ ENV ) ; <nl> - env . NODE _ ENV = ' development ' ; <nl> - syncServerChildProcess = spawn ( ' realm - object - server ' , <nl> - [ ' - - root ' , path , <nl> - ' - - configuration ' , ' / configuration . yml ' ] , <nl> - { env : env } ) ; <nl> - / / local config : <nl> - syncServerChildProcess . stdout . on ( ' data ' , ( data ) = > { <nl> - if ( logFindingCounter ! = 0 & & / client : Closing Realm file : . * _ _ auth . realm / . test ( data ) ) { <nl> - if ( logFindingCounter = = 1 ) { <nl> - done ( ) <nl> + stopRealmObjectServer ( function ( err ) { <nl> + if ( err ) { <nl> + return ; <nl> + } <nl> + temp . mkdir ( ' ros ' , function ( err , path ) { <nl> + if ( ! err ) { <nl> + winston . info ( " Starting sync server in " , path ) ; <nl> + var env = Object . create ( process . env ) ; <nl> + winston . info ( env . NODE _ ENV ) ; <nl> + env . NODE _ ENV = ' development ' ; <nl> + syncServerChildProcess = spawn ( ' realm - object - server ' , <nl> + [ ' - - root ' , path , <nl> + ' - - configuration ' , ' / configuration . yml ' ] , <nl> + { env : env , cwd : path } ) ; <nl> + / / local config : <nl> + syncServerChildProcess . stdout . on ( ' data ' , ( data ) = > { <nl> + if ( logFindingCounter ! = 0 & & / client : Closing Realm file : . * _ _ auth . realm / . test ( data ) ) { <nl> + if ( logFindingCounter = = 1 ) { <nl> + done ( ) <nl> + } <nl> + logFindingCounter - - <nl> } <nl> - logFindingCounter - - <nl> - } <nl> - winston . info ( ` stdout : $ { data } ` ) ; <nl> - } ) ; <nl> + winston . info ( ` stdout : $ { data } ` ) ; <nl> + } ) ; <nl> <nl> - syncServerChildProcess . stderr . on ( ' data ' , ( data ) = > { <nl> - winston . info ( ` stderr : $ { data } ` ) ; <nl> - } ) ; <nl> + syncServerChildProcess . stderr . on ( ' data ' , ( data ) = > { <nl> + winston . info ( ` stderr : $ { data } ` ) ; <nl> + } ) ; <nl> <nl> - syncServerChildProcess . on ( ' close ' , ( code ) = > { <nl> - winston . info ( ` child process exited with code $ { code } ` ) ; <nl> - } ) ; <nl> - } <nl> + syncServerChildProcess . on ( ' close ' , ( code ) = > { <nl> + winston . info ( ` child process exited with code $ { code } ` ) ; <nl> + } ) ; <nl> + } <nl> + } ) ; <nl> } ) ; <nl> } <nl> <nl> - function stopRealmObjectServer ( ) { <nl> + function stopRealmObjectServer ( callback ) { <nl> if ( syncServerChildProcess ) { <nl> - syncServerChildProcess . kill ( ) ; <nl> - syncServerChildProcess = null ; <nl> - exec ( ' rm - r ' + ' realm - object - server ' , function ( err , stdout , stderr ) { <nl> - if ( err ) { <nl> - winston . error ( err ) ; <nl> - } else { <nl> - winston . info ( " realm - object - server directory deleted " ) ; <nl> - } <nl> + syncServerChildProcess . on ( ' exit ' , function ( ) { <nl> + syncServerChildProcess = null ; <nl> + callback ( ) ; <nl> } ) ; <nl> + syncServerChildProcess . kill ( ) ; <nl> + } else { <nl> + callback ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 98 , 10 + 100 , 11 @ @ dispatcher . onGet ( " / start " , function ( req , res ) { <nl> <nl> / / stop a previously started sync server <nl> dispatcher . onGet ( " / stop " , function ( req , res ) { <nl> - stopRealmObjectServer ( ) ; <nl> - winston . info ( " Sync server stopped " ) ; <nl> - res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; <nl> - res . end ( ' Stopping the server ' ) ; <nl> + stopRealmObjectServer ( function ( ) { <nl> + winston . info ( " Sync server stopped " ) ; <nl> + res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; <nl> + res . end ( ' Stopping the server ' ) ; <nl> + } ) ; <nl> } ) ; <nl> <nl> / / Create and start the Http server

TEST DIFF:
diff - - git a / dependencies . list b / dependencies . list 
 index a732c8e . . 7a8215f 100644 
 - - - a / dependencies . list 
 + + + b / dependencies . list 
 @ @ - 10 , 4 + 10 , 4 @ @ REALM _ SYNC _ SHA256 = c93caa9b0ff1391550ce6b68ab3822fea7e6ae921498a3ebf3a5e6b17c56fa 
 # / tools / sync _ test _ server / Dockerfile specify which repo ( apt ) we should 
 # install / use between ' realm ' and ' realm - testing ' , the version below should 
 # correspond to an existing version on the * specified * repo . 
 - REALM _ OBJECT _ SERVER _ DE _ VERSION = 1 . 8 . 1 - 149 
 + REALM _ OBJECT _ SERVER _ DE _ VERSION = 1 . 8 . 3 - 83 
 diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js 
 index 18d2139 . . 8905ec3 100755 
 - - - a / tools / sync _ test _ server / ros - testing - server . js 
 + + + b / tools / sync _ test _ server / ros - testing - server . js 
 @ @ - 7 , 6 + 7 , 26 @ @ const exec = require ( ' child _ process ' ) . exec ; 
 var http = require ( ' http ' ) ; 
 var dispatcher = require ( ' httpdispatcher ' ) ; 
 
 + / / this query is used to check if ROS has started 
 + / / while waiting for a permanante fix in https : / / github . com / realm / realm - object - server / issues / 1297 . 
 + / / query should return 200 with the JSON payload Ex : { " version " : " 1 . 8 . 1 " , " flavor " : " developer " , " setupRequired " : true } 
 + var options = { 
 + hostname : ' 127 . 0 . 0 . 1 ' , 
 + port : 9080 , 
 + path : ' / api / info ' , 
 + method : ' GET ' 
 + } ; 
 + 
 + function tryUntilROSStart ( options , callback ) { 
 + var req = http . request ( options , function ( res ) { 
 + callback ( null , res ) ; 
 + } ) ; 
 + req . on ( ' error ' , function ( e ) { 
 + tryUntilROSStart ( options , callback ) ; 
 + } ) ; 
 + req . end ( ) ; 
 + } 
 + 
 / / Automatically track and cleanup files at exit 
 temp . track ( ) ; 
 
 @ @ - 34 , 12 + 54 , 6 @ @ function handleRequest ( request , response ) { 
 var syncServerChildProcess = null ; 
 
 function startRealmObjectServer ( done ) { 
 - / / Hack for checking the ROS is fully initialized . 
 - / / Consider the ROS is initialized fully only if log below shows twice 
 - / / " client : Closing Realm file : / tmp / ros117521 - 7 - 1eiqt7a / internal _ data / permission / _ _ auth . realm " 
 - / / https : / / github . com / realm / realm - object - server / issues / 1297 
 - var logFindingCounter = 2 
 - 
 stopRealmObjectServer ( function ( err ) { 
 if ( err ) { 
 return ; 
 @ @ - 56 , 12 + 70 , 6 @ @ function startRealmObjectServer ( done ) { 
 { env : env , cwd : path } ) ; 
 / / local config : 
 syncServerChildProcess . stdout . on ( ' data ' , ( data ) = > { 
 - if ( logFindingCounter ! = 0 & & / client : Closing Realm file : . * _ _ auth . realm / . test ( data ) ) { 
 - if ( logFindingCounter = = 1 ) { 
 - done ( ) 
 - } 
 - logFindingCounter - - 
 - } 
 winston . info ( ` stdout : $ { data } ` ) ; 
 } ) ; 
 
 @ @ - 72 , 6 + 80 , 11 @ @ function startRealmObjectServer ( done ) { 
 syncServerChildProcess . on ( ' close ' , ( code ) = > { 
 winston . info ( ` child process exited with code $ { code } ` ) ; 
 } ) ; 
 + 
 + tryUntilROSStart ( options , function ( err , resp ) { 
 + winston . info ( ' > > > > > > > > > > > > > > > > > > > [ ROS ] server started < < < < < < < < < < < < < < < < < < < ' ) ; 
 + done ( ) 
 + } ) ; 
 } 
 } ) ; 
 } ) ; 
 @ @ - 94 , 7 + 107 , 7 @ @ function stopRealmObjectServer ( callback ) { 
 dispatcher . onGet ( " / start " , function ( req , res ) { 
 startRealmObjectServer ( ( ) = > { 
 res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; 
 - res . end ( ' Starting a server ' ) ; 
 + res . end ( ' Server started ' ) ; 
 } ) 
 } ) ; 


NEAREST DIFF:
diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / BaseIntegrationTest . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / BaseIntegrationTest . java 
 index 9f86b32 . . 8faa03f 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / BaseIntegrationTest . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / BaseIntegrationTest . java 
 @ @ - 55 , 7 + 55 , 7 @ @ public class BaseIntegrationTest { 
 public final ExpectedException thrown = ExpectedException . none ( ) ; 
 
 @ BeforeClass 
 - public static void setUp ( ) throws Exception { 
 + public static void setupTestClass ( ) throws Exception { 
 SyncManager . Debug . skipOnlineChecking = true ; 
 try { 
 HttpUtils . startSyncServer ( ) ; 
 @ @ - 67 , 7 + 67 , 7 @ @ public class BaseIntegrationTest { 
 } 
 
 @ AfterClass 
 - public static void tearDown ( ) throws Exception { 
 + public static void tearDownTestClass ( ) throws Exception { 
 try { 
 HttpUtils . stopSyncServer ( ) ; 
 } catch ( Exception e ) { 
 @ @ - 77 , 8 + 77 , 6 @ @ public class BaseIntegrationTest { 
 
 @ Before 
 public void setupTest ( ) throws IOException { 
 - / / TODO We should implement a more consistent reset method for all of Sync that reset 
 - / / everything completely including deleting all files . 
 deleteRosFiles ( ) ; 
 if ( BaseRealm . applicationContext ! = null ) { 
 / / Realm was already initialized . Reset all internal state 
 @ @ - 98 , 21 + 96 , 28 @ @ public class BaseIntegrationTest { 
 } 
 
 @ After 
 - public void tearDownTest ( ) throws IOException { 
 + public void teardownTest ( ) { 
 if ( looperThread . isTestComplete ( ) ) { 
 / / Non - looper tests can reset here 
 - RealmLog . setLevel ( originalLogLevel ) ; 
 + resetTestEnvironment ( ) ; 
 } else { 
 / / Otherwise we need to wait for the test to complete 
 looperThread . runAfterTest ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 - RealmLog . setLevel ( originalLogLevel ) ; 
 + resetTestEnvironment ( ) ; 
 } 
 } ) ; 
 } 
 } 
 
 + private void resetTestEnvironment ( ) { 
 + for ( SyncUser syncUser : SyncUser . all ( ) . values ( ) ) { 
 + syncUser . logout ( ) ; 
 + } 
 + RealmLog . setLevel ( originalLogLevel ) ; 
 + } 
 + 
 / / Cleanup filesystem to make sure nothing lives for the next test . 
 / / Failing to do so might lead to DIVERGENT _ HISTORY errors being thrown if Realms from 
 / / previous tests are being accessed . 
 diff - - git a / tools / sync _ test _ server / ros - testing - server . js b / tools / sync _ test _ server / ros - testing - server . js 
 index 9cfdda3 . . 18d2139 100755 
 - - - a / tools / sync _ test _ server / ros - testing - server . js 
 + + + b / tools / sync _ test _ server / ros - testing - server . js 
 @ @ - 40 , 50 + 40 , 52 @ @ function startRealmObjectServer ( done ) { 
 / / https : / / github . com / realm / realm - object - server / issues / 1297 
 var logFindingCounter = 2 
 
 - stopRealmObjectServer ( ) ; 
 - temp . mkdir ( ' ros ' , function ( err , path ) { 
 - if ( ! err ) { 
 - winston . info ( " Starting sync server in " , path ) ; 
 - var env = Object . create ( process . env ) ; 
 - winston . info ( env . NODE _ ENV ) ; 
 - env . NODE _ ENV = ' development ' ; 
 - syncServerChildProcess = spawn ( ' realm - object - server ' , 
 - [ ' - - root ' , path , 
 - ' - - configuration ' , ' / configuration . yml ' ] , 
 - { env : env } ) ; 
 - / / local config : 
 - syncServerChildProcess . stdout . on ( ' data ' , ( data ) = > { 
 - if ( logFindingCounter ! = 0 & & / client : Closing Realm file : . * _ _ auth . realm / . test ( data ) ) { 
 - if ( logFindingCounter = = 1 ) { 
 - done ( ) 
 + stopRealmObjectServer ( function ( err ) { 
 + if ( err ) { 
 + return ; 
 + } 
 + temp . mkdir ( ' ros ' , function ( err , path ) { 
 + if ( ! err ) { 
 + winston . info ( " Starting sync server in " , path ) ; 
 + var env = Object . create ( process . env ) ; 
 + winston . info ( env . NODE _ ENV ) ; 
 + env . NODE _ ENV = ' development ' ; 
 + syncServerChildProcess = spawn ( ' realm - object - server ' , 
 + [ ' - - root ' , path , 
 + ' - - configuration ' , ' / configuration . yml ' ] , 
 + { env : env , cwd : path } ) ; 
 + / / local config : 
 + syncServerChildProcess . stdout . on ( ' data ' , ( data ) = > { 
 + if ( logFindingCounter ! = 0 & & / client : Closing Realm file : . * _ _ auth . realm / . test ( data ) ) { 
 + if ( logFindingCounter = = 1 ) { 
 + done ( ) 
 + } 
 + logFindingCounter - - 
 } 
 - logFindingCounter - - 
 - } 
 - winston . info ( ` stdout : $ { data } ` ) ; 
 - } ) ; 
 + winston . info ( ` stdout : $ { data } ` ) ; 
 + } ) ; 
 
 - syncServerChildProcess . stderr . on ( ' data ' , ( data ) = > { 
 - winston . info ( ` stderr : $ { data } ` ) ; 
 - } ) ; 
 + syncServerChildProcess . stderr . on ( ' data ' , ( data ) = > { 
 + winston . info ( ` stderr : $ { data } ` ) ; 
 + } ) ; 
 
 - syncServerChildProcess . on ( ' close ' , ( code ) = > { 
 - winston . info ( ` child process exited with code $ { code } ` ) ; 
 - } ) ; 
 - } 
 + syncServerChildProcess . on ( ' close ' , ( code ) = > { 
 + winston . info ( ` child process exited with code $ { code } ` ) ; 
 + } ) ; 
 + } 
 + } ) ; 
 } ) ; 
 } 
 
 - function stopRealmObjectServer ( ) { 
 + function stopRealmObjectServer ( callback ) { 
 if ( syncServerChildProcess ) { 
 - syncServerChildProcess . kill ( ) ; 
 - syncServerChildProcess = null ; 
 - exec ( ' rm - r ' + ' realm - object - server ' , function ( err , stdout , stderr ) { 
 - if ( err ) { 
 - winston . error ( err ) ; 
 - } else { 
 - winston . info ( " realm - object - server directory deleted " ) ; 
 - } 
 + syncServerChildProcess . on ( ' exit ' , function ( ) { 
 + syncServerChildProcess = null ; 
 + callback ( ) ; 
 } ) ; 
 + syncServerChildProcess . kill ( ) ; 
 + } else { 
 + callback ( ) ; 
 } 
 } 
 
 @ @ - 98 , 10 + 100 , 11 @ @ dispatcher . onGet ( " / start " , function ( req , res ) { 
 
 / / stop a previously started sync server 
 dispatcher . onGet ( " / stop " , function ( req , res ) { 
 - stopRealmObjectServer ( ) ; 
 - winston . info ( " Sync server stopped " ) ; 
 - res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; 
 - res . end ( ' Stopping the server ' ) ; 
 + stopRealmObjectServer ( function ( ) { 
 + winston . info ( " Sync server stopped " ) ; 
 + res . writeHead ( 200 , { ' Content - Type ' : ' text / plain ' } ) ; 
 + res . end ( ' Stopping the server ' ) ; 
 + } ) ; 
 } ) ; 
 
 / / Create and start the Http server
