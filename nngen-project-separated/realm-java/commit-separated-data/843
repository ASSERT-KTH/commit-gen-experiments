BLEU SCORE: 0.04767707020457096

TEST MSG: Clarify how to check exceptions in unit tests .
GENERATED MSG: Add gotchas to readme

TEST DIFF (one line): diff - - git a / CONTRIBUTING . md b / CONTRIBUTING . md <nl> index 49d4a5e . . ffba767 100644 <nl> - - - a / CONTRIBUTING . md <nl> + + + b / CONTRIBUTING . md <nl> @ @ - 62 , 8 + 62 , 9 @ @ When writing unit tests , use the following guide lines : <nl> if it fails , it should be clear why it failed . E . g . you can group related tests with the same setup like negative <nl> tests . If you do so , make sure to separate each " subtest " with a comment stating what you test . <nl> <nl> - 8 ) Use only ` @ Test ( expected = xxx . class ) ` or the ` ExceptedException ` rule to detect exceptions if it is the last <nl> - line of the test that is expected to throw . Otherwise use the following : <nl> + 8 ) Use only ` @ Test ( expected = xxx . class ) ` if the test case contains one line . If the test contains multiple <nl> + lines and it is the last line that is tested , use the ` ExceptedException ` rule instead . In all other cases , use <nl> + the following pattern : <nl> <nl> try { <nl> somethingThatThrowsIllegalArgument ( ) ;
NEAREST DIFF (one line): diff - - git a / README . md b / README . md <nl> index 834e5b4 . . c5f800e 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 76 , 12 + 76 , 24 @ @ That command will generate : <nl> * a jar file for the annotations processor <nl> <nl> # # # Other Commands <nl> + <nl> * ` . / gradlew tasks ` will show all the available tasks <nl> * ` . / gradlew javadoc ` will generate the Javadocs <nl> * ` . / gradlew monkeyExamples ` will run the monkey tests on all the examples <nl> <nl> Generating the Javadoc using the command above will report a large number of warnings . The Javadoc is generated , and we will fix the issue in the near future . <nl> <nl> + # # # Gotchas <nl> + <nl> + The repository is organized in four Gradle projects : <nl> + <nl> + * ` realm ` : it contains the actual library ( including the JNI layer ) , the annotations and the annotations processor . <nl> + * ` gradle - plugin ` : it contains the Gradle plugin . <nl> + * ` examples ` : it contains the example projects . This project directly depends on ` gradle - plugin ` which adds a dependency to the artifacts produced by ` realm ` . <nl> + * The root folder is another Gradle project and all it does is orchestrating the other jobs <nl> + <nl> + This means that ` . / gradlew clean ` and ` . / gradlew cleanExamples ` will fail if ` assembleExamples ` has not been executed first . <nl> + <nl> # # Contributing <nl> <nl> See [ CONTRIBUTING . md ] ( CONTRIBUTING . md ) for more details !

TEST DIFF:
diff - - git a / CONTRIBUTING . md b / CONTRIBUTING . md 
 index 49d4a5e . . ffba767 100644 
 - - - a / CONTRIBUTING . md 
 + + + b / CONTRIBUTING . md 
 @ @ - 62 , 8 + 62 , 9 @ @ When writing unit tests , use the following guide lines : 
 if it fails , it should be clear why it failed . E . g . you can group related tests with the same setup like negative 
 tests . If you do so , make sure to separate each " subtest " with a comment stating what you test . 
 
 - 8 ) Use only ` @ Test ( expected = xxx . class ) ` or the ` ExceptedException ` rule to detect exceptions if it is the last 
 - line of the test that is expected to throw . Otherwise use the following : 
 + 8 ) Use only ` @ Test ( expected = xxx . class ) ` if the test case contains one line . If the test contains multiple 
 + lines and it is the last line that is tested , use the ` ExceptedException ` rule instead . In all other cases , use 
 + the following pattern : 
 
 try { 
 somethingThatThrowsIllegalArgument ( ) ;

NEAREST DIFF:
diff - - git a / README . md b / README . md 
 index 834e5b4 . . c5f800e 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 76 , 12 + 76 , 24 @ @ That command will generate : 
 * a jar file for the annotations processor 
 
 # # # Other Commands 
 + 
 * ` . / gradlew tasks ` will show all the available tasks 
 * ` . / gradlew javadoc ` will generate the Javadocs 
 * ` . / gradlew monkeyExamples ` will run the monkey tests on all the examples 
 
 Generating the Javadoc using the command above will report a large number of warnings . The Javadoc is generated , and we will fix the issue in the near future . 
 
 + # # # Gotchas 
 + 
 + The repository is organized in four Gradle projects : 
 + 
 + * ` realm ` : it contains the actual library ( including the JNI layer ) , the annotations and the annotations processor . 
 + * ` gradle - plugin ` : it contains the Gradle plugin . 
 + * ` examples ` : it contains the example projects . This project directly depends on ` gradle - plugin ` which adds a dependency to the artifacts produced by ` realm ` . 
 + * The root folder is another Gradle project and all it does is orchestrating the other jobs 
 + 
 + This means that ` . / gradlew clean ` and ` . / gradlew cleanExamples ` will fail if ` assembleExamples ` has not been executed first . 
 + 
 # # Contributing 
 
 See [ CONTRIBUTING . md ] ( CONTRIBUTING . md ) for more details !
