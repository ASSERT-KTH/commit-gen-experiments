BLEU SCORE: 0.08116697886877475

TEST MSG: Clear the memory ownership for RowNotifier
GENERATED MSG: Use OS notification for RealmObject

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> index 76eaf93 . . b113701 100644 <nl> - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> @ @ - 16 , 11 + 16 , 15 @ @ <nl> <nl> # include " java _ binding _ context . hpp " <nl> <nl> - # include " util / format . hpp " <nl> - # include " util . hpp " <nl> - <nl> using namespace realm ; <nl> using namespace realm : : _ impl ; <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + JniMethod JavaBindingContext : : m _ realm _ notifier _ on _ change _ method ; <nl> + JniMethod JavaBindingContext : : m _ get _ observers _ method ; <nl> + JniMethod JavaBindingContext : : m _ get _ observed _ row _ ptrs _ method ; <nl> + JniMethod JavaBindingContext : : m _ clear _ row _ refs _ method ; <nl> + JniMethod JavaBindingContext : : m _ row _ observer _ pair _ on _ change _ method ; <nl> <nl> JavaBindingContext : : JavaBindingContext ( const ConcreteJavaBindContext & concrete _ context ) <nl> : m _ local _ jni _ env ( concrete _ context . jni _ env ) <nl> @ @ - 29 , 23 + 33 , 33 @ @ JavaBindingContext : : JavaBindingContext ( const ConcreteJavaBindContext & concrete _ c <nl> if ( ret ! = 0 ) { <nl> throw std : : runtime _ error ( util : : format ( " Failed to get Java vm . Error : % d " , ret ) ) ; <nl> } <nl> + <nl> if ( concrete _ context . realm _ notifier ) { <nl> m _ realm _ notifier = m _ local _ jni _ env - > NewWeakGlobalRef ( concrete _ context . realm _ notifier ) ; <nl> - jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ realm _ notifier ) ; <nl> - m _ notify _ by _ other _ method = m _ local _ jni _ env - > GetMethodID ( cls , " notifyCommitByOtherThread " , " ( ) V " ) ; <nl> + if ( ! m _ realm _ notifier _ on _ change _ method ) { <nl> + m _ realm _ notifier _ on _ change _ method = JniMethod ( m _ local _ jni _ env , m _ realm _ notifier , <nl> + " onChange " , " ( ) V " ) ; <nl> + } <nl> } else { <nl> m _ realm _ notifier = nullptr ; <nl> } <nl> + <nl> if ( concrete _ context . row _ notifier ) { <nl> m _ row _ notifier = m _ local _ jni _ env - > NewWeakGlobalRef ( concrete _ context . row _ notifier ) ; <nl> - jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ row _ notifier ) ; <nl> - m _ get _ observers _ method = m _ local _ jni _ env - > GetMethodID ( cls , " getObservers " , <nl> - " ( ) [ Lio / realm / internal / RowNotifier $ Observer ; " ) ; <nl> - m _ get _ observed _ row _ ptrs _ method = m _ local _ jni _ env - > GetMethodID ( cls , " getObservedRowPtrs " , <nl> - " ( [ Lio / realm / internal / RowNotifier $ Observer ; ) [ J " ) ; <nl> - m _ clear _ row _ refs = m _ local _ jni _ env - > GetMethodID ( cls , " clearRowRefs " , " ( ) V " ) ; <nl> - jclass observer _ cls = GetClass ( m _ local _ jni _ env , " io / realm / internal / RowNotifier $ Observer " ) ; <nl> - m _ observer _ notify _ listener = m _ local _ jni _ env - > GetMethodID ( observer _ cls , " notifyListener " , " ( ) V " ) ; <nl> + if ( ! m _ get _ observers _ method | | ! m _ get _ observed _ row _ ptrs _ method | | ! m _ clear _ row _ refs _ method ) { <nl> + / / They should be false or true all together <nl> + jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ row _ notifier ) ; <nl> + m _ get _ observers _ method = JniMethod ( m _ local _ jni _ env , cls , <nl> + " getObservers " , " ( ) [ Lio / realm / internal / RowNotifier $ RowObserverPair ; " ) ; <nl> + m _ get _ observed _ row _ ptrs _ method = JniMethod ( m _ local _ jni _ env , cls , " getObservedRowPtrs " , <nl> + " ( [ Lio / realm / internal / RowNotifier $ RowObserverPair ; ) [ J " ) ; <nl> + m _ clear _ row _ refs _ method = JniMethod ( m _ local _ jni _ env , cls , " clearRowRefs " , " ( ) V " ) ; <nl> + m _ local _ jni _ env - > DeleteLocalRef ( cls ) ; <nl> + } <nl> + if ( ! m _ row _ observer _ pair _ on _ change _ method ) { <nl> + m _ row _ observer _ pair _ on _ change _ method = <nl> + JniMethod ( m _ local _ jni _ env , " io / realm / internal / RowNotifier $ RowObserverPair " , " onChange " , " ( ) V " ) ; <nl> + } <nl> } else { <nl> m _ row _ notifier = nullptr ; <nl> } <nl> @ @ - 53 , 25 + 67 , 19 @ @ JavaBindingContext : : JavaBindingContext ( const ConcreteJavaBindContext & concrete _ c <nl> <nl> JavaBindingContext : : ~ JavaBindingContext ( ) <nl> { <nl> - if ( m _ realm _ notifier ) { <nl> + if ( m _ realm _ notifier | | m _ row _ notifier ) { <nl> / / Always try to attach here since this may be called in the finalizer / phantom thread where m _ local _ jni _ env <nl> / / should not be used on . No need to call DetachCurrentThread since this thread should always be created by <nl> / / JVM . <nl> JNIEnv * env ; <nl> m _ jvm - > AttachCurrentThread ( & env , nullptr ) ; <nl> - env - > DeleteWeakGlobalRef ( m _ realm _ notifier ) ; <nl> - } <nl> - } <nl> - <nl> - void JavaBindingContext : : changes _ available ( ) <nl> - { <nl> - / * <nl> - jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; <nl> - if ( notifier ) { <nl> - m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ notify _ by _ other _ method ) ; <nl> - m _ local _ jni _ env - > DeleteLocalRef ( notifier ) ; <nl> + if ( m _ realm _ notifier ) { <nl> + env - > DeleteWeakGlobalRef ( m _ realm _ notifier ) ; <nl> + } <nl> + if ( m _ row _ notifier ) { <nl> + env - > DeleteWeakGlobalRef ( m _ row _ notifier ) ; <nl> + } <nl> } <nl> - * / <nl> } <nl> <nl> std : : vector < BindingContext : : ObserverState > JavaBindingContext : : get _ observed _ rows ( ) <nl> @ @ - 107 , 17 + 115 , 17 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c <nl> for ( auto state : observer _ state _ list ) { <nl> jobject observer = reinterpret _ cast < jobject > ( state . info ) ; <nl> / / if ( ! state . changes . empty ( ) ) { <nl> - m _ local _ jni _ env - > CallVoidMethod ( observer , m _ observer _ notify _ listener ) ; <nl> + m _ local _ jni _ env - > CallVoidMethod ( observer , m _ row _ observer _ pair _ on _ change _ method ) ; <nl> / / } <nl> } <nl> for ( auto deleted _ row _ observer : invalidated ) { <nl> jobject observer = reinterpret _ cast < jobject > ( deleted _ row _ observer ) ; <nl> - m _ local _ jni _ env - > CallVoidMethod ( observer , m _ observer _ notify _ listener ) ; <nl> + m _ local _ jni _ env - > CallVoidMethod ( observer , m _ row _ observer _ pair _ on _ change _ method ) ; <nl> } <nl> - m _ local _ jni _ env - > CallVoidMethod ( m _ row _ notifier , m _ clear _ row _ refs ) ; <nl> + m _ local _ jni _ env - > CallVoidMethod ( m _ row _ notifier , m _ clear _ row _ refs _ method ) ; <nl> jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; <nl> if ( notifier ) { <nl> - m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ notify _ by _ other _ method ) ; <nl> + m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ realm _ notifier _ on _ change _ method ) ; <nl> m _ local _ jni _ env - > DeleteLocalRef ( notifier ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp <nl> index 0a338dd . . 38e195c 100644 <nl> - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp <nl> + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp <nl> @ @ - 22 , 6 + 22 , 8 @ @ <nl> <nl> # include " binding _ context . hpp " <nl> <nl> + # include " jni _ util / method . hpp " <nl> + <nl> namespace realm { <nl> <nl> namespace _ impl { <nl> @ @ - 43 , 29 + 45 , 29 @ @ private : <nl> / / A weak global ref to the implementation of RealmNotifier <nl> / / Java should hold a strong ref to it as long as the SharedRealm lives <nl> jobject m _ realm _ notifier ; <nl> - / / Method IDs from RealmNotifier implementation . Cache them as member vars . <nl> - jmethodID m _ notify _ by _ other _ method ; <nl> - jmethodID m _ realm _ notifier _ on _ change ; <nl> <nl> / / A weak global ref to the RowNotifier object . Java should hold a strong ref to it . <nl> jobject m _ row _ notifier ; <nl> + <nl> + / / Cache the method IDs <nl> + / / RealmNotifier . onChange ( ) <nl> + static realm : : jni _ util : : JniMethod m _ realm _ notifier _ on _ change _ method ; <nl> / / RowNotifier . getObservers ( ) <nl> - jmethodID m _ get _ observers _ method ; <nl> + static realm : : jni _ util : : JniMethod m _ get _ observers _ method ; <nl> / / RowNotifier . getObservedRowPtrs ( Observer [ ] ) <nl> - jmethodID m _ get _ observed _ row _ ptrs _ method ; <nl> + static realm : : jni _ util : : JniMethod m _ get _ observed _ row _ ptrs _ method ; <nl> / / RowNotifier . clearRowRefs ( ) <nl> - jmethodID m _ clear _ row _ refs ; <nl> - jmethodID m _ observer _ notify _ listener ; <nl> + static realm : : jni _ util : : JniMethod m _ clear _ row _ refs _ method ; <nl> + / / RowNotifier . RowObserverPair . onChange ( ) <nl> + static realm : : jni _ util : : JniMethod m _ row _ observer _ pair _ on _ change _ method ; <nl> <nl> public : <nl> virtual ~ JavaBindingContext ( ) ; <nl> - virtual void changes _ available ( ) ; <nl> virtual std : : vector < ObserverState > get _ observed _ rows ( ) ; <nl> virtual void did _ change ( std : : vector < ObserverState > const & observers , <nl> std : : vector < void * > const & invalidated , <nl> bool version _ changed = true ) ; <nl> <nl> - <nl> explicit JavaBindingContext ( const ConcreteJavaBindContext & ) ; <nl> JavaBindingContext ( const JavaBindingContext & ) = delete ; <nl> JavaBindingContext & operator = ( const JavaBindingContext & ) = delete ; <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / method . hpp b / realm / realm - library / src / main / cpp / jni _ util / method . hpp <nl> index e56e9ed . . c464ca4 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / method . hpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / method . hpp <nl> @ @ - 25 , 15 + 25 , 24 @ @ namespace jni _ util { <nl> <nl> class JniMethod { <nl> public : <nl> - JniMethod ( JNIEnv * env , jobject obj , const char * method _ name , const char * signature ) { <nl> + JniMethod ( ) : m _ method _ id ( nullptr ) { } <nl> + <nl> + JniMethod ( JNIEnv * env , jclass cls , const char * method _ name , const char * signature ) <nl> + { <nl> + m _ method _ id = env - > GetMethodID ( cls , method _ name , signature ) ; <nl> + } <nl> + <nl> + JniMethod ( JNIEnv * env , jobject obj , const char * method _ name , const char * signature ) <nl> + { <nl> jclass cls = env - > GetObjectClass ( obj ) ; <nl> m _ method _ id = env - > GetMethodID ( cls , method _ name , signature ) ; <nl> env - > DeleteLocalRef ( cls ) ; <nl> } <nl> <nl> - JniMethod ( JNIEnv * env , const char * class _ name , const char * method _ name , const char * signature ) { <nl> + JniMethod ( JNIEnv * env , const char * class _ name , const char * method _ name , const char * signature ) <nl> + { <nl> jclass cls = env - > FindClass ( class _ name ) ; <nl> - if ( cls = = NULL ) { <nl> + if ( cls = = nullptr ) { <nl> / / TODO : Throw a cpp exception instead . <nl> ThrowException ( env , ClassNotFound , class _ name ) ; <nl> m _ method _ id = nullptr ; <nl> @ @ - 44 , 7 + 53 , 12 @ @ public : <nl> <nl> ~ JniMethod ( ) { } <nl> <nl> - inline operator jmethodID & ( ) const { return m _ method _ id ; } <nl> + operator bool ( ) const noexcept <nl> + { <nl> + return m _ method _ id ! = nullptr ; <nl> + } <nl> + <nl> + inline operator const jmethodID & ( ) const { return m _ method _ id ; } <nl> <nl> private : <nl> jmethodID m _ method _ id ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 72952a2 . . 44d3237 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 122 , 12 + 122 , 13 @ @ abstract class BaseRealm implements Closeable { <nl> return sharedRealm . isInTransaction ( ) ; <nl> } <nl> <nl> - protected void addListener ( RealmChangeListener < ? extends BaseRealm > listener ) { <nl> + protected < T extends BaseRealm > void addListener ( RealmChangeListener < T > listener ) { <nl> if ( listener = = null ) { <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> checkIfValid ( ) ; <nl> - sharedRealm . realmNotifier . addChangeListener ( this , listener ) ; <nl> + / / noinspection unchecked <nl> + sharedRealm . realmNotifier . addChangeListener ( ( T ) this , listener ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 138 , 12 + 139 , 13 @ @ abstract class BaseRealm implements Closeable { <nl> * @ throws IllegalStateException if you try to remove a listener from a non - Looper Thread . <nl> * @ see io . realm . RealmChangeListener <nl> * / <nl> - public void removeChangeListener ( RealmChangeListener < ? extends BaseRealm > listener ) { <nl> + public < T extends BaseRealm > void removeChangeListener ( RealmChangeListener < T > listener ) { <nl> if ( listener = = null ) { <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> checkIfValid ( ) ; <nl> - sharedRealm . realmNotifier . removeChangeListener ( this , listener ) ; <nl> + / / noinspection unchecked <nl> + sharedRealm . realmNotifier . removeChangeListener ( ( T ) this , listener ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / ProxyState . java b / realm / realm - library / src / main / java / io / realm / ProxyState . java <nl> index 41bd384 . . 799bbea 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / ProxyState . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / ProxyState . java <nl> @ @ - 101 , 12 + 101 , 12 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE <nl> } <nl> if ( row instanceof UncheckedRow ) { <nl> RowNotifier rowNotifier = realm . sharedRealm . rowNotifier ; <nl> - rowNotifier . registerListener ( ( UncheckedRow ) row , new RealmChangeListener < ProxyState < E > > ( ) { <nl> + rowNotifier . registerListener ( ( UncheckedRow ) row , this , new RealmChangeListener < ProxyState < E > > ( ) { <nl> @ Override <nl> public void onChange ( ProxyState < E > proxyState ) { <nl> proxyState . notifyChangeListeners $ realm ( ) ; <nl> } <nl> - } , this ) ; <nl> + } ) ; <nl> } <nl> } <nl> <nl> @ @ - 137 , 11 + 137 , 11 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE <nl> return ; <nl> } <nl> RowNotifier rowNotifier = realm . sharedRealm . rowNotifier ; <nl> - rowNotifier . registerListener ( ( UncheckedRow ) row , new RealmChangeListener < ProxyState < E > > ( ) { <nl> + rowNotifier . registerListener ( ( UncheckedRow ) row , this , new RealmChangeListener < ProxyState < E > > ( ) { <nl> @ Override <nl> public void onChange ( ProxyState < E > proxyState ) { <nl> proxyState . notifyChangeListeners $ realm ( ) ; <nl> } <nl> - } , this ) ; <nl> + } ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java b / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java <nl> index 190f8fd . . 7082139 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java <nl> @ @ - 2 , 13 + 2 , 13 @ @ package io . realm . internal ; <nl> <nl> import java . lang . ref . WeakReference ; <nl> <nl> - public abstract class ObserverPair < T > { <nl> - public final T listener ; <nl> - public final WeakReference < Object > observerRef ; <nl> + public abstract class ObserverPair < T , S > { <nl> + public final WeakReference < T > observerRef ; <nl> + public final S listener ; <nl> <nl> - public ObserverPair ( T listener , Object objectRef ) { <nl> + public ObserverPair ( T observer , S listener ) { <nl> this . listener = listener ; <nl> - this . observerRef = new WeakReference < Object > ( objectRef ) ; <nl> + this . observerRef = new WeakReference < T > ( observer ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> index 689d8b9 . . f6b9cfd 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ <nl> <nl> package io . realm . internal ; <nl> <nl> + import java . io . Closeable ; <nl> import java . util . List ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> <nl> @ @ - 26 , 16 + 27 , 15 @ @ import io . realm . RealmChangeListener ; <nl> * other thread / process changes the Realm file . <nl> * / <nl> @ Keep <nl> - public class RealmNotifier { <nl> + public class RealmNotifier implements Closeable { <nl> <nl> - private static class RealmObserverPair extends ObserverPair < RealmChangeListener > { <nl> - <nl> - public RealmObserverPair ( Object observer , RealmChangeListener listener ) { <nl> - super ( listener , observer ) ; <nl> + private static class RealmObserverPair < T > extends ObserverPair < T , RealmChangeListener < T > > { <nl> + public RealmObserverPair ( T observer , RealmChangeListener < T > listener ) { <nl> + super ( observer , listener ) ; <nl> } <nl> <nl> private void onChange ( ) { <nl> - Object observer = observerRef . get ( ) ; <nl> + T observer = observerRef . get ( ) ; <nl> if ( observer ! = null ) { <nl> listener . onChange ( observer ) ; <nl> } <nl> @ @ - 61 , 7 + 61 , 7 @ @ public class RealmNotifier { <nl> * other thread . The changes on the same thread should not trigger this call . <nl> * / <nl> @ SuppressWarnings ( " unused " ) / / called from java _ binding _ context . cpp <nl> - void notifyCommitByOtherThread ( ) { <nl> + void onChange ( ) { <nl> for ( RealmObserverPair observerPair : realmObserverPairs ) { <nl> Object observer = observerPair . observerRef . get ( ) ; <nl> if ( observer = = null ) { <nl> @ @ - 75 , 19 + 75 , 20 @ @ public class RealmNotifier { <nl> / * * <nl> * Called when close SharedRealm to clean up any event left in to queue . <nl> * / <nl> + @ Override <nl> public void close ( ) { <nl> removeAllChangeListeners ( ) ; <nl> } <nl> <nl> - public void addChangeListener ( Object observer , RealmChangeListener realmChangeListener ) { <nl> - RealmObserverPair observerPair = new RealmObserverPair ( observer , realmChangeListener ) ; <nl> + public < T > void addChangeListener ( T observer , RealmChangeListener < T > realmChangeListener ) { <nl> + RealmObserverPair observerPair = new RealmObserverPair < T > ( observer , realmChangeListener ) ; <nl> if ( ! realmObserverPairs . contains ( observerPair ) ) { <nl> realmObserverPairs . add ( observerPair ) ; <nl> } <nl> } <nl> <nl> - public void removeChangeListener ( Object observer , RealmChangeListener realmChangeListener ) { <nl> - RealmObserverPair observerPair = new RealmObserverPair ( observer , realmChangeListener ) ; <nl> + public < E > void removeChangeListener ( E observer , RealmChangeListener < E > realmChangeListener ) { <nl> + RealmObserverPair observerPair = new RealmObserverPair < E > ( observer , realmChangeListener ) ; <nl> realmObserverPairs . remove ( observerPair ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java <nl> index b0de844 . . 5e1db36 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java <nl> @ @ - 16 , 58 + 16 , 110 @ @ <nl> <nl> package io . realm . internal ; <nl> <nl> - import java . util . HashMap ; <nl> - import java . util . Map ; <nl> + import java . lang . ref . WeakReference ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . CopyOnWriteArrayList ; <nl> <nl> import io . realm . RealmChangeListener ; <nl> <nl> + / * * <nl> + * To bridge object store ' s row notification to java . { @ link SharedRealm } is supposed to hold a instance of this class <nl> + * and pass it to JavaBindingContext . Row notifications callback will be executed when there are changes on a specific <nl> + * row . <nl> + * / <nl> @ Keep <nl> public class RowNotifier { <nl> - <nl> @ Keep <nl> - private static class Observer { <nl> - final RealmChangeListener listener ; <nl> - final Object object ; <nl> + private static class RowObserverPair < T > extends ObserverPair < T , RealmChangeListener < T > > { <nl> + final WeakReference < UncheckedRow > rowRef ; <nl> + / / Keep a strong ref to row when getRowRefs called and set it to null in clearRowRefs . <nl> + / / This is to avoid the row gets GCed in between . <nl> UncheckedRow row ; <nl> - Observer ( RealmChangeListener listener , Object object ) { <nl> - this . listener = listener ; <nl> - this . object = object ; <nl> - this . row = null ; <nl> + public RowObserverPair ( UncheckedRow row , T observer , RealmChangeListener < T > listener ) { <nl> + super ( observer , listener ) ; <nl> + this . rowRef = new WeakReference < UncheckedRow > ( row ) ; <nl> } <nl> <nl> - / / Called by JNI <nl> + / / Called by JNI in JavaBindingContext : : did _ change ( ) . <nl> @ SuppressWarnings ( " unused " ) <nl> - public void notifyListener ( ) { <nl> - listener . onChange ( object ) ; <nl> + private void onChange ( ) { <nl> + T observer = observerRef . get ( ) ; <nl> + if ( observer ! = null ) { <nl> + listener . onChange ( observer ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object obj ) { <nl> + if ( this = = obj ) { <nl> + return true ; <nl> + } <nl> + <nl> + if ( obj instanceof ObserverPair ) { <nl> + RowObserverPair anotherPair = ( RowObserverPair ) obj ; <nl> + return listener . equals ( anotherPair . listener ) & & <nl> + observerRef . get ( ) = = anotherPair . observerRef . get ( ) & & <nl> + rowRef . get ( ) = = anotherPair . rowRef . get ( ) ; <nl> + } <nl> + return false ; <nl> } <nl> } <nl> <nl> - / / FIXME : Use weak ref for the key . And make the memory ownership clear in the doc . <nl> - Map < UncheckedRow , Observer > rowObserverMap = new HashMap < > ( ) ; <nl> + / / We don ' t take care of the duplicated rows here . The duplicated rows means the same Row object or different <nl> + / / Row objects point to the same row in the same table . The duplicated rows will all get notifications but there are <nl> + / / overheads when duplicated rows added since they all need to be processed to compute the differences for the row <nl> + / / level fine grained notifications in the object store . <nl> + private CopyOnWriteArrayList < RowObserverPair > rowObserverPairs = new CopyOnWriteArrayList < RowObserverPair > ( ) ; <nl> <nl> - public void registerListener ( UncheckedRow row , RealmChangeListener listener , Object object ) { <nl> - Observer observer = new Observer ( listener , object ) ; <nl> - rowObserverMap . put ( row , observer ) ; <nl> + / * * <nl> + * Register a listener on a row . <nl> + * <nl> + * @ param row row to be observed . <nl> + * @ param observer the observer which will be passed back in the { @ link RealmChangeListener # onChange ( Object ) } . <nl> + * @ param listener the listener . <nl> + * @ param < T > observer class . <nl> + * / <nl> + public < T > void registerListener ( UncheckedRow row , T observer , RealmChangeListener < T > listener ) { <nl> + RowObserverPair rowObserverPair = new RowObserverPair < T > ( row , observer , listener ) ; <nl> + if ( ! rowObserverPairs . contains ( rowObserverPair ) ) { <nl> + rowObserverPairs . add ( rowObserverPair ) ; <nl> + } <nl> } <nl> <nl> + <nl> + / / The calling orders in JNI : <nl> + / / 1 . getObservers ( ) to get the array of current ObserverPair . ( called in BindingContext : : get _ observed _ rows ) <nl> + / / 2 . getObservedRowPtrs ( ) with return value from step 1 . To get an array of Row pointers . ( called in <nl> + / / BindingContext : : get _ observed _ rows ) <nl> + / / 3 . Every RowObserverPair . onChange ( ) deliver the changes to java . ( called in BindingContext : : did _ change ( ) ) <nl> + / / 4 . clearRowRefs ( ) to reset the strong reference we hold in the ObserverPair . ( called in <nl> + / / BindingContext : : did _ change ( ) ) <nl> / / Called by JNI <nl> @ SuppressWarnings ( " unused " ) <nl> - private Observer [ ] getObservers ( ) { <nl> - Observer [ ] observers = new Observer [ rowObserverMap . size ( ) ] ; <nl> - int i = 0 ; <nl> - for ( Map . Entry < UncheckedRow , Observer > entry : rowObserverMap . entrySet ( ) ) { <nl> - observers [ i ] = entry . getValue ( ) ; <nl> - observers [ i ] . row = entry . getKey ( ) ; <nl> + private RowObserverPair [ ] getObservers ( ) { <nl> + List < RowObserverPair > pairList = new ArrayList < RowObserverPair > ( rowObserverPairs . size ( ) ) ; <nl> + for ( RowObserverPair pair : rowObserverPairs ) { <nl> + / / FIXME : Anyone could tell me why wo we have to cast it here ? <nl> + UncheckedRow uncheckedRow = ( UncheckedRow ) pair . rowRef . get ( ) ; <nl> + if ( pair . observerRef . get ( ) = = null | | uncheckedRow = = null | | ! uncheckedRow . isAttached ( ) ) { <nl> + / / The observer object or the row get GCed . Remove it . <nl> + rowObserverPairs . remove ( pair ) ; <nl> + } else { <nl> + / / Keep a strong ref of the row ! in case it gets GCed before clearRowRefs ! <nl> + pair . row = uncheckedRow ; <nl> + pairList . add ( pair ) ; <nl> + } <nl> } <nl> - return observers ; <nl> + return pairList . toArray ( new RowObserverPair [ pairList . size ( ) ] ) ; <nl> } <nl> <nl> / / Called by JNI <nl> @ SuppressWarnings ( " unused " ) <nl> - private long [ ] getObservedRowPtrs ( Observer [ ] observers ) { <nl> - long [ ] ptrs = new long [ observers . length ] ; <nl> - for ( int i = 0 ; i < observers . length ; i + + ) { <nl> - ptrs [ i ] = observers [ i ] . row . getNativePtr ( ) ; <nl> + private long [ ] getObservedRowPtrs ( RowObserverPair [ ] observerPairs ) { <nl> + long [ ] ptrs = new long [ observerPairs . length ] ; <nl> + for ( int i = 0 ; i < observerPairs . length ; i + + ) { <nl> + ptrs [ i ] = observerPairs [ i ] . row . getNativePtr ( ) ; <nl> } <nl> return ptrs ; <nl> } <nl> @ @ - 75 , 8 + 127 , 8 @ @ public class RowNotifier { <nl> / / Called by JNI <nl> @ SuppressWarnings ( " unused " ) <nl> private void clearRowRefs ( ) { <nl> - for ( Observer observer : rowObserverMap . values ( ) ) { <nl> - observer . row = null ; <nl> + for ( RowObserverPair observerPair : rowObserverPairs ) { <nl> + observerPair . row = null ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> index 730a7f7 . . 497a52c 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> @ @ - 97 , 14 + 97 , 15 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeCloseConfig ( JNIEnv * , jclass , jlong conf <nl> } <nl> <nl> JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ internal _ SharedRealm _ nativeGetSharedRealm ( JNIEnv * env , jclass , jlong config _ ptr , jobject notifier ) <nl> + Java _ io _ realm _ internal _ SharedRealm _ nativeGetSharedRealm ( JNIEnv * env , jclass , jlong config _ ptr , jobject realm _ notifier , <nl> + jobject row _ notifier ) <nl> { <nl> TR _ ENTER _ PTR ( config _ ptr ) <nl> <nl> auto config = reinterpret _ cast < realm : : Realm : : Config * > ( config _ ptr ) ; <nl> try { <nl> auto shared _ realm = Realm : : get _ shared _ realm ( * config ) ; <nl> - shared _ realm - > m _ binding _ context = JavaBindingContext : : create ( env , notifier ) ; <nl> + shared _ realm - > m _ binding _ context = JavaBindingContext : : create ( env , realm _ notifier , row _ notifier ) ; <nl> / / FIXME : Disabled for the collection notifications . There might be some places still need it . <nl> / / advance _ read needs to be handled by Java because of async query . <nl> / / shared _ realm - > set _ auto _ refresh ( false ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> index b8954ca . . 4a9270c 100644 <nl> - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> # include " java _ binding _ context . hpp " <nl> <nl> # include " util / format . hpp " <nl> + # include " util . hpp " <nl> <nl> using namespace realm ; <nl> using namespace realm : : _ impl ; <nl> @ @ - 28 , 33 + 29 , 89 @ @ JavaBindingContext : : JavaBindingContext ( const ConcreteJavaBindContext & concrete _ c <nl> if ( ret ! = 0 ) { <nl> throw std : : runtime _ error ( util : : format ( " Failed to get Java vm . Error : % d " , ret ) ) ; <nl> } <nl> - if ( concrete _ context . java _ notifier ) { <nl> - m _ java _ notifier = m _ local _ jni _ env - > NewWeakGlobalRef ( concrete _ context . java _ notifier ) ; <nl> - jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ java _ notifier ) ; <nl> + if ( concrete _ context . realm _ notifier ) { <nl> + m _ realm _ notifier = m _ local _ jni _ env - > NewWeakGlobalRef ( concrete _ context . realm _ notifier ) ; <nl> + jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ realm _ notifier ) ; <nl> m _ notify _ by _ other _ method = m _ local _ jni _ env - > GetMethodID ( cls , " notifyCommitByOtherThread " , " ( ) V " ) ; <nl> } else { <nl> - m _ java _ notifier = nullptr ; <nl> + m _ realm _ notifier = nullptr ; <nl> + } <nl> + if ( concrete _ context . row _ notifier ) { <nl> + m _ row _ notifier = m _ local _ jni _ env - > NewWeakGlobalRef ( concrete _ context . row _ notifier ) ; <nl> + jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ row _ notifier ) ; <nl> + m _ get _ observers _ method = m _ local _ jni _ env - > GetMethodID ( cls , " getObservers " , <nl> + " ( ) [ Lio / realm / internal / RowNotifier $ Observer ; " ) ; <nl> + m _ get _ observed _ row _ ptrs _ method = m _ local _ jni _ env - > GetMethodID ( cls , " getObservedRowPtrs " , <nl> + " ( [ Lio / realm / internal / RowNotifier $ Observer ; ) [ J " ) ; <nl> + m _ clear _ row _ refs = m _ local _ jni _ env - > GetMethodID ( cls , " clearRowRefs " , " ( ) V " ) ; <nl> + jclass observer _ cls = GetClass ( m _ local _ jni _ env , " io / realm / internal / RowNotifier $ Observer " ) ; <nl> + m _ observer _ notify _ listener = m _ local _ jni _ env - > GetMethodID ( observer _ cls , " notifyListener " , " ( ) V " ) ; <nl> + } else { <nl> + m _ row _ notifier = nullptr ; <nl> } <nl> } <nl> <nl> JavaBindingContext : : ~ JavaBindingContext ( ) <nl> { <nl> - if ( m _ java _ notifier ) { <nl> + if ( m _ realm _ notifier ) { <nl> / / Always try to attach here since this may be called in the finalizer / phantom thread where m _ local _ jni _ env <nl> / / should not be used on . No need to call DetachCurrentThread since this thread should always be created by <nl> / / JVM . <nl> JNIEnv * env ; <nl> m _ jvm - > AttachCurrentThread ( & env , nullptr ) ; <nl> - env - > DeleteWeakGlobalRef ( m _ java _ notifier ) ; <nl> + env - > DeleteWeakGlobalRef ( m _ realm _ notifier ) ; <nl> } <nl> } <nl> <nl> void JavaBindingContext : : changes _ available ( ) <nl> { <nl> - jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ java _ notifier ) ; <nl> + jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; <nl> if ( notifier ) { <nl> - m _ local _ jni _ env - > CallVoidMethod ( m _ java _ notifier , m _ notify _ by _ other _ method ) ; <nl> + m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ notify _ by _ other _ method ) ; <nl> m _ local _ jni _ env - > DeleteLocalRef ( notifier ) ; <nl> } <nl> } <nl> <nl> + std : : vector < BindingContext : : ObserverState > JavaBindingContext : : get _ observed _ rows ( ) <nl> + { <nl> + jobject row _ notifier = m _ local _ jni _ env - > NewLocalRef ( m _ row _ notifier ) ; <nl> + if ( ! row _ notifier ) { <nl> + / / The row notifier got GCed <nl> + return { } ; <nl> + } <nl> + <nl> + jobjectArray observers = static _ cast < jobjectArray > ( <nl> + m _ local _ jni _ env - > CallObjectMethod ( row _ notifier , m _ get _ observers _ method ) ) ; <nl> + jlongArray row _ ptr _ jarray = static _ cast < jlongArray > ( <nl> + m _ local _ jni _ env - > CallObjectMethod ( row _ notifier , m _ get _ observed _ row _ ptrs _ method , observers ) ) ; <nl> + JniLongArray row _ ptrs ( m _ local _ jni _ env , row _ ptr _ jarray ) ; <nl> + <nl> + std : : vector < BindingContext : : ObserverState > state _ list ; <nl> + for ( jsize i = 0 ; i < row _ ptrs . len ( ) ; + + i ) { <nl> + BindingContext : : ObserverState observer _ state ; <nl> + Row * row = reinterpret _ cast < Row * > ( row _ ptrs [ i ] ) ; <nl> + observer _ state . table _ ndx = row - > get _ table ( ) - > get _ index _ in _ group ( ) ; <nl> + observer _ state . row _ ndx = row - > get _ index ( ) ; <nl> + observer _ state . info = m _ local _ jni _ env - > GetObjectArrayElement ( observers , i ) ; <nl> + state _ list . push _ back ( std : : move ( observer _ state ) ) ; <nl> + } <nl> + return state _ list ; <nl> + } <nl> + <nl> + void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > const & observer _ state _ list , <nl> + std : : vector < void * > const & invalidated , <nl> + bool / * version _ changed * / ) <nl> + { <nl> + for ( auto state : observer _ state _ list ) { <nl> + jobject observer = reinterpret _ cast < jobject > ( state . info ) ; <nl> + / / if ( ! state . changes . empty ( ) ) { <nl> + m _ local _ jni _ env - > CallVoidMethod ( observer , m _ observer _ notify _ listener ) ; <nl> + / / } <nl> + } <nl> + for ( auto deleted _ row _ observer : invalidated ) { <nl> + jobject observer = reinterpret _ cast < jobject > ( deleted _ row _ observer ) ; <nl> + m _ local _ jni _ env - > CallVoidMethod ( observer , m _ observer _ notify _ listener ) ; <nl> + } <nl> + m _ local _ jni _ env - > CallVoidMethod ( m _ row _ notifier , m _ clear _ row _ refs ) ; <nl> + } <nl> + <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp <nl> index a058691 . . 2632cd3 100644 <nl> - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp <nl> + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp <nl> @ @ - 31 , 9 + 31 , 8 @ @ class JavaBindingContext final : public BindingContext { <nl> private : <nl> struct ConcreteJavaBindContext { <nl> JNIEnv * jni _ env ; <nl> - jobject java _ notifier ; <nl> - explicit ConcreteJavaBindContext ( JNIEnv * env , jobject notifier ) <nl> - : jni _ env ( env ) , java _ notifier ( notifier ) { } <nl> + jobject realm _ notifier ; <nl> + jobject row _ notifier ; <nl> } ; <nl> <nl> / / The JNIEnv for the thread which creates the Realm . This should only be used on the current thread . <nl> @ @ - 43 , 13 + 42 , 27 @ @ private : <nl> JavaVM * m _ jvm ; <nl> / / A weak global ref to the implementation of RealmNotifier <nl> / / Java should hold a strong ref to it as long as the SharedRealm lives <nl> - jobject m _ java _ notifier ; <nl> + jobject m _ realm _ notifier ; <nl> / / Method IDs from RealmNotifier implementation . Cache them as member vars . <nl> jmethodID m _ notify _ by _ other _ method ; <nl> + / / A weak global ref to the RowNotifier object . Java should hold a strong ref to it . <nl> + jobject m _ row _ notifier ; <nl> + / / RowNotifier . getObservers ( ) <nl> + jmethodID m _ get _ observers _ method ; <nl> + / / RowNotifier . getObservedRowPtrs ( Observer [ ] ) <nl> + jmethodID m _ get _ observed _ row _ ptrs _ method ; <nl> + / / RowNotifier . clearRowRefs ( ) <nl> + jmethodID m _ clear _ row _ refs ; <nl> + jmethodID m _ observer _ notify _ listener ; <nl> <nl> public : <nl> virtual ~ JavaBindingContext ( ) ; <nl> virtual void changes _ available ( ) ; <nl> + virtual std : : vector < ObserverState > get _ observed _ rows ( ) ; <nl> + virtual void did _ change ( std : : vector < ObserverState > const & observers , <nl> + std : : vector < void * > const & invalidated , <nl> + bool version _ changed = true ) ; <nl> + <nl> <nl> explicit JavaBindingContext ( const ConcreteJavaBindContext & ) ; <nl> JavaBindingContext ( const JavaBindingContext & ) = delete ; <nl> @ @ - 57 , 9 + 70 , 9 @ @ public : <nl> JavaBindingContext ( JavaBindingContext & & ) = delete ; <nl> JavaBindingContext & operator = ( JavaBindingContext & & ) = delete ; <nl> <nl> - static inline std : : unique _ ptr < JavaBindingContext > create ( JNIEnv * env , jobject notifier ) <nl> + static inline std : : unique _ ptr < JavaBindingContext > create ( JNIEnv * env , jobject notifier , jobject row _ notifier ) <nl> { <nl> - return std : : make _ unique < JavaBindingContext > ( ConcreteJavaBindContext { env , notifier } ) ; <nl> + return std : : make _ unique < JavaBindingContext > ( ConcreteJavaBindContext { env , notifier , row _ notifier } ) ; <nl> } ; <nl> } ; <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java b / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java <nl> index adc0c06 . . c294952 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java <nl> @ @ - 55 , 12 + 55 , 14 @ @ class AndroidNotifier implements RealmNotifier { <nl> / / event starved as it only starts handling Realm events instead . This is an acceptable risk as <nl> / / that behaviour indicate a user bug . Previously this would be hidden as the UI would still <nl> / / be responsive . <nl> + / * <nl> Message msg = Message . obtain ( ) ; <nl> msg . what = HandlerControllerConstants . LOCAL _ COMMIT ; <nl> if ( ! handler . hasMessages ( HandlerControllerConstants . LOCAL _ COMMIT ) ) { <nl> handler . removeMessages ( HandlerControllerConstants . REALM _ CHANGED ) ; <nl> handler . sendMessageAtFrontOfQueue ( msg ) ; <nl> } <nl> + * / <nl> } <nl> <nl> / / This is called by OS when other thread / process changes the Realm . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / HandlerController . java b / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> index 752fdc1 . . a0b06bc 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> @ @ - 164 , 7 + 164 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> if ( onSuccess ! = null ) { <nl> pendingOnSuccessAsyncTransactionCallbacks . add ( onSuccess ) ; <nl> } <nl> - realmChanged ( false ) ; <nl> + / / realmChanged ( false ) ; <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / ProxyState . java b / realm / realm - library / src / main / java / io / realm / ProxyState . java <nl> index 3e67066 . . c36f12d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / ProxyState . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / ProxyState . java <nl> @ @ - 22 , 8 + 22 , 10 @ @ import java . util . concurrent . Future ; <nl> <nl> import io . realm . internal . PendingRow ; <nl> import io . realm . internal . Row ; <nl> + import io . realm . internal . RowNotifier ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableQuery ; <nl> + import io . realm . internal . UncheckedRow ; <nl> import io . realm . log . RealmLog ; <nl> <nl> / * * <nl> @ @ - 170 , 6 + 172 , 21 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE <nl> } <nl> } <nl> <nl> + public void addChangeListener ( RealmChangeListener < E > listener ) { <nl> + if ( ! listeners . contains ( listener ) ) { <nl> + listeners . add ( listener ) ; <nl> + } <nl> + if ( row instanceof UncheckedRow ) { <nl> + RowNotifier rowNotifier = realm . sharedRealm . rowNotifier ; <nl> + rowNotifier . registerListener ( ( UncheckedRow ) row , new RealmChangeListener < ProxyState < E > > ( ) { <nl> + @ Override <nl> + public void onChange ( ProxyState < E > proxyState ) { <nl> + proxyState . notifyChangeListeners $ realm ( ) ; <nl> + } <nl> + } , this ) ; <nl> + } <nl> + } <nl> + <nl> public void setTableVersion $ realm ( ) { <nl> if ( row . getTable ( ) ! = null ) { <nl> currentTableVersion = row . getTable ( ) . getVersion ( ) ; <nl> @ @ - 208 , 5 + 225 , 16 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE <nl> if ( asyncQuery ) { <nl> notifyChangeListeners $ realm ( ) ; <nl> } <nl> + / / FIXME : Figure out why this can be null . <nl> + if ( realm . sharedRealm = = null ) { <nl> + return ; <nl> + } <nl> + RowNotifier rowNotifier = realm . sharedRealm . rowNotifier ; <nl> + rowNotifier . registerListener ( ( UncheckedRow ) row , new RealmChangeListener < ProxyState < E > > ( ) { <nl> + @ Override <nl> + public void onChange ( ProxyState < E > proxyState ) { <nl> + proxyState . notifyChangeListeners $ realm ( ) ; <nl> + } <nl> + } , this ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index ed03ec6 . . 4d3a6b0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 355 , 16 + 355 , 8 @ @ public abstract class RealmObject implements RealmModel { <nl> if ( ! realm . handlerController . isAutoRefreshEnabled ( ) ) { <nl> throw new IllegalStateException ( " You can ' t register a listener from a non - Looper thread or IntentService thread . " ) ; <nl> } <nl> - List < RealmChangeListener > listeners = proxy . realmGet $ proxyState ( ) . getListeners $ realm ( ) ; <nl> - if ( ! listeners . contains ( listener ) ) { <nl> - listeners . add ( listener ) ; <nl> - } <nl> - if ( isLoaded ( proxy ) ) { <nl> - / / Try to add this object to the realmObjects if it has already been loaded . <nl> - / / For newly created async objects , it will be handled in RealmQuery . findFirstAsync & <nl> - / / HandlerController . completedAsyncRealmObject . <nl> - realm . handlerController . addToRealmObjects ( proxy ) ; <nl> - } <nl> + / / noinspection unchecked <nl> + proxy . realmGet $ proxyState ( ) . addChangeListener ( listener ) ; <nl> } else { <nl> throw new IllegalArgumentException ( " Cannot add listener from this unmanaged RealmObject ( created outside of Realm ) " ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 0e20605 . . 337e72d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import io . realm . internal . LinkView ; <nl> import io . realm . internal . PendingRow ; <nl> import io . realm . internal . RealmNotifier ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> + import io . realm . internal . Row ; <nl> import io . realm . internal . SharedRealm ; <nl> import io . realm . internal . SortDescriptor ; <nl> import io . realm . internal . Table ; <nl> @ @ - 1647 , 24 + 1648 , 34 @ @ public final class RealmQuery < E extends RealmModel > { <nl> public E findFirst ( ) { <nl> checkQueryIsNotReused ( ) ; <nl> <nl> - / / TODO : The performance by the pending query will be a little bit worse than directly calling core ' s <nl> - / / Query . find ( ) . The overhead comes with core needs to add all the row indices to the vector . However this can <nl> - / / be optimized by adding support of limit in OS ' s Results which is supported by core already . <nl> - PendingRow pendingRow = new PendingRow ( realm . sharedRealm , query , null ) ; <nl> - / / prepare an empty reference of the RealmObject , so we can return it immediately ( promise ) <nl> - / / then update it once the query complete in the background . <nl> + Row row ; <nl> + if ( realm . isInTransaction ( ) ) { <nl> + / / It is not possible to create async query inside a transaction . So immediately query the first object . <nl> + / / See OS Results : : prepare _ async ( ) <nl> + row = new Collection ( realm . sharedRealm , query ) . firstUncheckedRow ( ) ; <nl> + } else { <nl> + / / prepare an empty reference of the RealmObject which is backed by a pending query , <nl> + / / then update it once the query complete in the background . <nl> + <nl> + / / TODO : The performance by the pending query will be a little bit worse than directly calling core ' s <nl> + / / Query . find ( ) . The overhead comes with core needs to add all the row indices to the vector . However this <nl> + / / can be optimized by adding support of limit in OS ' s Results which is supported by core already . <nl> + row = new PendingRow ( realm . sharedRealm , query , null ) ; <nl> + } <nl> final E result ; <nl> if ( isDynamicQuery ( ) ) { <nl> / / noinspection unchecked <nl> - result = ( E ) new DynamicRealmObject ( className , realm , pendingRow ) ; <nl> + result = ( E ) new DynamicRealmObject ( className , realm , row ) ; <nl> } else { <nl> result = realm . getConfiguration ( ) . getSchemaMediator ( ) . newInstance ( <nl> - clazz , realm , pendingRow , realm . getSchema ( ) . getColumnInfo ( clazz ) , <nl> + clazz , realm , row , realm . getSchema ( ) . getColumnInfo ( clazz ) , <nl> false , Collections . < String > emptyList ( ) ) ; <nl> } <nl> <nl> - final RealmObjectProxy proxy = ( RealmObjectProxy ) result ; <nl> - pendingRow . setFrontEnd ( proxy . realmGet $ proxyState ( ) ) ; <nl> + if ( row instanceof PendingRow ) { <nl> + final RealmObjectProxy proxy = ( RealmObjectProxy ) result ; <nl> + ( ( PendingRow ) row ) . setFrontEnd ( proxy . realmGet $ proxyState ( ) ) ; <nl> + } <nl> <nl> return result ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java <nl> new file mode 100644 <nl> index 0000000 . . 4e6f2b7 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java <nl> @ @ - 0 , 0 + 1 , 78 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . internal ; <nl> + <nl> + import java . lang . ref . WeakReference ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import io . realm . RealmChangeListener ; <nl> + <nl> + public class RowNotifier { <nl> + <nl> + private static class Observer { <nl> + final RealmChangeListener listener ; <nl> + final Object object ; <nl> + UncheckedRow row ; <nl> + Observer ( RealmChangeListener listener , Object object ) { <nl> + this . listener = listener ; <nl> + this . object = object ; <nl> + this . row = null ; <nl> + } <nl> + public void notifyListener ( ) { <nl> + listener . onChange ( object ) ; <nl> + } <nl> + } <nl> + <nl> + / / FIXME : Use weak ref for the key . And make the memory ownership clear in the doc . <nl> + Map < UncheckedRow , Observer > rowObserverMap = new HashMap < > ( ) ; <nl> + <nl> + public void registerListener ( UncheckedRow row , RealmChangeListener listener , Object object ) { <nl> + Observer observer = new Observer ( listener , object ) ; <nl> + rowObserverMap . put ( row , observer ) ; <nl> + } <nl> + <nl> + / / Called by JNI <nl> + @ SuppressWarnings ( " unused " ) <nl> + private Observer [ ] getObservers ( ) { <nl> + Observer [ ] observers = new Observer [ rowObserverMap . size ( ) ] ; <nl> + int i = 0 ; <nl> + for ( Map . Entry < UncheckedRow , Observer > entry : rowObserverMap . entrySet ( ) ) { <nl> + observers [ i ] = entry . getValue ( ) ; <nl> + observers [ i ] . row = entry . getKey ( ) ; <nl> + } <nl> + return observers ; <nl> + } <nl> + <nl> + / / Called by JNI <nl> + @ SuppressWarnings ( " unused " ) <nl> + private long [ ] getObservedRowPtrs ( Observer [ ] observers ) { <nl> + long [ ] ptrs = new long [ observers . length ] ; <nl> + for ( int i = 0 ; i < observers . length ; i + + ) { <nl> + ptrs [ i ] = observers [ i ] . row . getNativePtr ( ) ; <nl> + } <nl> + return ptrs ; <nl> + } <nl> + <nl> + / / Called by JNI <nl> + @ SuppressWarnings ( " unused " ) <nl> + private void clearRowRefs ( ) { <nl> + for ( Observer observer : rowObserverMap . values ( ) ) { <nl> + observer . row = null ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index 9f9cf2d . . 74110fb 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 102 , 6 + 102 , 7 @ @ public final class SharedRealm implements Closeable { <nl> <nl> / / JNI will only hold a weak global ref to this . <nl> public final RealmNotifier realmNotifier ; <nl> + public final RowNotifier rowNotifier ; <nl> public final ObjectServerFacade objectServerFacade ; <nl> <nl> public static class VersionID implements Comparable < VersionID > { <nl> @ @ - 168 , 10 + 169 , 11 @ @ public final class SharedRealm implements Closeable { <nl> private final SchemaVersionListener schemaChangeListener ; <nl> <nl> private SharedRealm ( long nativePtr , RealmConfiguration configuration , RealmNotifier notifier , <nl> - SchemaVersionListener schemaVersionListener ) { <nl> + RowNotifier rowNotifier , SchemaVersionListener schemaVersionListener ) { <nl> this . nativePtr = nativePtr ; <nl> this . configuration = configuration ; <nl> this . realmNotifier = notifier ; <nl> + this . rowNotifier = rowNotifier ; <nl> this . schemaChangeListener = schemaVersionListener ; <nl> context = new Context ( ) ; <nl> this . lastSchemaVersion = schemaVersionListener = = null ? - 1L : getSchemaVersion ( ) ; <nl> @ @ - 200 , 11 + 202 , 13 @ @ public final class SharedRealm implements Closeable { <nl> autoChangeNotifications , <nl> rosServerUrl , <nl> rosUserToken ) ; <nl> + RowNotifier rowNotifier = new RowNotifier ( ) ; <nl> try { <nl> return new SharedRealm ( <nl> - nativeGetSharedRealm ( nativeConfigPtr , realmNotifier ) , <nl> + nativeGetSharedRealm ( nativeConfigPtr , realmNotifier , rowNotifier ) , <nl> config , <nl> realmNotifier , <nl> + rowNotifier , <nl> schemaVersionListener ) ; <nl> } finally { <nl> nativeCloseConfig ( nativeConfigPtr ) ; <nl> @ @ - 374 , 7 + 378 , 8 @ @ public final class SharedRealm implements Closeable { <nl> boolean autoChangeNotification , <nl> String syncServerURL , String syncUserToken ) ; <nl> private static native void nativeCloseConfig ( long nativeConfigPtr ) ; <nl> - private static native long nativeGetSharedRealm ( long nativeConfigPtr , RealmNotifier notifier ) ; <nl> + private static native long nativeGetSharedRealm ( long nativeConfigPtr , RealmNotifier notifier , <nl> + RowNotifier rowNotifier ) ; <nl> private static native void nativeCloseSharedRealm ( long nativeSharedRealmPtr ) ; <nl> private static native boolean nativeIsClosed ( long nativeSharedRealmPtr ) ; <nl> private static native void nativeBeginTransaction ( long nativeSharedRealmPtr ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 index 76eaf93 . . b113701 100644 
 - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 @ @ - 16 , 11 + 16 , 15 @ @ 
 
 # include " java _ binding _ context . hpp " 
 
 - # include " util / format . hpp " 
 - # include " util . hpp " 
 - 
 using namespace realm ; 
 using namespace realm : : _ impl ; 
 + using namespace realm : : jni _ util ; 
 + 
 + JniMethod JavaBindingContext : : m _ realm _ notifier _ on _ change _ method ; 
 + JniMethod JavaBindingContext : : m _ get _ observers _ method ; 
 + JniMethod JavaBindingContext : : m _ get _ observed _ row _ ptrs _ method ; 
 + JniMethod JavaBindingContext : : m _ clear _ row _ refs _ method ; 
 + JniMethod JavaBindingContext : : m _ row _ observer _ pair _ on _ change _ method ; 
 
 JavaBindingContext : : JavaBindingContext ( const ConcreteJavaBindContext & concrete _ context ) 
 : m _ local _ jni _ env ( concrete _ context . jni _ env ) 
 @ @ - 29 , 23 + 33 , 33 @ @ JavaBindingContext : : JavaBindingContext ( const ConcreteJavaBindContext & concrete _ c 
 if ( ret ! = 0 ) { 
 throw std : : runtime _ error ( util : : format ( " Failed to get Java vm . Error : % d " , ret ) ) ; 
 } 
 + 
 if ( concrete _ context . realm _ notifier ) { 
 m _ realm _ notifier = m _ local _ jni _ env - > NewWeakGlobalRef ( concrete _ context . realm _ notifier ) ; 
 - jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ realm _ notifier ) ; 
 - m _ notify _ by _ other _ method = m _ local _ jni _ env - > GetMethodID ( cls , " notifyCommitByOtherThread " , " ( ) V " ) ; 
 + if ( ! m _ realm _ notifier _ on _ change _ method ) { 
 + m _ realm _ notifier _ on _ change _ method = JniMethod ( m _ local _ jni _ env , m _ realm _ notifier , 
 + " onChange " , " ( ) V " ) ; 
 + } 
 } else { 
 m _ realm _ notifier = nullptr ; 
 } 
 + 
 if ( concrete _ context . row _ notifier ) { 
 m _ row _ notifier = m _ local _ jni _ env - > NewWeakGlobalRef ( concrete _ context . row _ notifier ) ; 
 - jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ row _ notifier ) ; 
 - m _ get _ observers _ method = m _ local _ jni _ env - > GetMethodID ( cls , " getObservers " , 
 - " ( ) [ Lio / realm / internal / RowNotifier $ Observer ; " ) ; 
 - m _ get _ observed _ row _ ptrs _ method = m _ local _ jni _ env - > GetMethodID ( cls , " getObservedRowPtrs " , 
 - " ( [ Lio / realm / internal / RowNotifier $ Observer ; ) [ J " ) ; 
 - m _ clear _ row _ refs = m _ local _ jni _ env - > GetMethodID ( cls , " clearRowRefs " , " ( ) V " ) ; 
 - jclass observer _ cls = GetClass ( m _ local _ jni _ env , " io / realm / internal / RowNotifier $ Observer " ) ; 
 - m _ observer _ notify _ listener = m _ local _ jni _ env - > GetMethodID ( observer _ cls , " notifyListener " , " ( ) V " ) ; 
 + if ( ! m _ get _ observers _ method | | ! m _ get _ observed _ row _ ptrs _ method | | ! m _ clear _ row _ refs _ method ) { 
 + / / They should be false or true all together 
 + jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ row _ notifier ) ; 
 + m _ get _ observers _ method = JniMethod ( m _ local _ jni _ env , cls , 
 + " getObservers " , " ( ) [ Lio / realm / internal / RowNotifier $ RowObserverPair ; " ) ; 
 + m _ get _ observed _ row _ ptrs _ method = JniMethod ( m _ local _ jni _ env , cls , " getObservedRowPtrs " , 
 + " ( [ Lio / realm / internal / RowNotifier $ RowObserverPair ; ) [ J " ) ; 
 + m _ clear _ row _ refs _ method = JniMethod ( m _ local _ jni _ env , cls , " clearRowRefs " , " ( ) V " ) ; 
 + m _ local _ jni _ env - > DeleteLocalRef ( cls ) ; 
 + } 
 + if ( ! m _ row _ observer _ pair _ on _ change _ method ) { 
 + m _ row _ observer _ pair _ on _ change _ method = 
 + JniMethod ( m _ local _ jni _ env , " io / realm / internal / RowNotifier $ RowObserverPair " , " onChange " , " ( ) V " ) ; 
 + } 
 } else { 
 m _ row _ notifier = nullptr ; 
 } 
 @ @ - 53 , 25 + 67 , 19 @ @ JavaBindingContext : : JavaBindingContext ( const ConcreteJavaBindContext & concrete _ c 
 
 JavaBindingContext : : ~ JavaBindingContext ( ) 
 { 
 - if ( m _ realm _ notifier ) { 
 + if ( m _ realm _ notifier | | m _ row _ notifier ) { 
 / / Always try to attach here since this may be called in the finalizer / phantom thread where m _ local _ jni _ env 
 / / should not be used on . No need to call DetachCurrentThread since this thread should always be created by 
 / / JVM . 
 JNIEnv * env ; 
 m _ jvm - > AttachCurrentThread ( & env , nullptr ) ; 
 - env - > DeleteWeakGlobalRef ( m _ realm _ notifier ) ; 
 - } 
 - } 
 - 
 - void JavaBindingContext : : changes _ available ( ) 
 - { 
 - / * 
 - jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; 
 - if ( notifier ) { 
 - m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ notify _ by _ other _ method ) ; 
 - m _ local _ jni _ env - > DeleteLocalRef ( notifier ) ; 
 + if ( m _ realm _ notifier ) { 
 + env - > DeleteWeakGlobalRef ( m _ realm _ notifier ) ; 
 + } 
 + if ( m _ row _ notifier ) { 
 + env - > DeleteWeakGlobalRef ( m _ row _ notifier ) ; 
 + } 
 } 
 - * / 
 } 
 
 std : : vector < BindingContext : : ObserverState > JavaBindingContext : : get _ observed _ rows ( ) 
 @ @ - 107 , 17 + 115 , 17 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c 
 for ( auto state : observer _ state _ list ) { 
 jobject observer = reinterpret _ cast < jobject > ( state . info ) ; 
 / / if ( ! state . changes . empty ( ) ) { 
 - m _ local _ jni _ env - > CallVoidMethod ( observer , m _ observer _ notify _ listener ) ; 
 + m _ local _ jni _ env - > CallVoidMethod ( observer , m _ row _ observer _ pair _ on _ change _ method ) ; 
 / / } 
 } 
 for ( auto deleted _ row _ observer : invalidated ) { 
 jobject observer = reinterpret _ cast < jobject > ( deleted _ row _ observer ) ; 
 - m _ local _ jni _ env - > CallVoidMethod ( observer , m _ observer _ notify _ listener ) ; 
 + m _ local _ jni _ env - > CallVoidMethod ( observer , m _ row _ observer _ pair _ on _ change _ method ) ; 
 } 
 - m _ local _ jni _ env - > CallVoidMethod ( m _ row _ notifier , m _ clear _ row _ refs ) ; 
 + m _ local _ jni _ env - > CallVoidMethod ( m _ row _ notifier , m _ clear _ row _ refs _ method ) ; 
 jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; 
 if ( notifier ) { 
 - m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ notify _ by _ other _ method ) ; 
 + m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ realm _ notifier _ on _ change _ method ) ; 
 m _ local _ jni _ env - > DeleteLocalRef ( notifier ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp 
 index 0a338dd . . 38e195c 100644 
 - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp 
 + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp 
 @ @ - 22 , 6 + 22 , 8 @ @ 
 
 # include " binding _ context . hpp " 
 
 + # include " jni _ util / method . hpp " 
 + 
 namespace realm { 
 
 namespace _ impl { 
 @ @ - 43 , 29 + 45 , 29 @ @ private : 
 / / A weak global ref to the implementation of RealmNotifier 
 / / Java should hold a strong ref to it as long as the SharedRealm lives 
 jobject m _ realm _ notifier ; 
 - / / Method IDs from RealmNotifier implementation . Cache them as member vars . 
 - jmethodID m _ notify _ by _ other _ method ; 
 - jmethodID m _ realm _ notifier _ on _ change ; 
 
 / / A weak global ref to the RowNotifier object . Java should hold a strong ref to it . 
 jobject m _ row _ notifier ; 
 + 
 + / / Cache the method IDs 
 + / / RealmNotifier . onChange ( ) 
 + static realm : : jni _ util : : JniMethod m _ realm _ notifier _ on _ change _ method ; 
 / / RowNotifier . getObservers ( ) 
 - jmethodID m _ get _ observers _ method ; 
 + static realm : : jni _ util : : JniMethod m _ get _ observers _ method ; 
 / / RowNotifier . getObservedRowPtrs ( Observer [ ] ) 
 - jmethodID m _ get _ observed _ row _ ptrs _ method ; 
 + static realm : : jni _ util : : JniMethod m _ get _ observed _ row _ ptrs _ method ; 
 / / RowNotifier . clearRowRefs ( ) 
 - jmethodID m _ clear _ row _ refs ; 
 - jmethodID m _ observer _ notify _ listener ; 
 + static realm : : jni _ util : : JniMethod m _ clear _ row _ refs _ method ; 
 + / / RowNotifier . RowObserverPair . onChange ( ) 
 + static realm : : jni _ util : : JniMethod m _ row _ observer _ pair _ on _ change _ method ; 
 
 public : 
 virtual ~ JavaBindingContext ( ) ; 
 - virtual void changes _ available ( ) ; 
 virtual std : : vector < ObserverState > get _ observed _ rows ( ) ; 
 virtual void did _ change ( std : : vector < ObserverState > const & observers , 
 std : : vector < void * > const & invalidated , 
 bool version _ changed = true ) ; 
 
 - 
 explicit JavaBindingContext ( const ConcreteJavaBindContext & ) ; 
 JavaBindingContext ( const JavaBindingContext & ) = delete ; 
 JavaBindingContext & operator = ( const JavaBindingContext & ) = delete ; 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / method . hpp b / realm / realm - library / src / main / cpp / jni _ util / method . hpp 
 index e56e9ed . . c464ca4 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / method . hpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / method . hpp 
 @ @ - 25 , 15 + 25 , 24 @ @ namespace jni _ util { 
 
 class JniMethod { 
 public : 
 - JniMethod ( JNIEnv * env , jobject obj , const char * method _ name , const char * signature ) { 
 + JniMethod ( ) : m _ method _ id ( nullptr ) { } 
 + 
 + JniMethod ( JNIEnv * env , jclass cls , const char * method _ name , const char * signature ) 
 + { 
 + m _ method _ id = env - > GetMethodID ( cls , method _ name , signature ) ; 
 + } 
 + 
 + JniMethod ( JNIEnv * env , jobject obj , const char * method _ name , const char * signature ) 
 + { 
 jclass cls = env - > GetObjectClass ( obj ) ; 
 m _ method _ id = env - > GetMethodID ( cls , method _ name , signature ) ; 
 env - > DeleteLocalRef ( cls ) ; 
 } 
 
 - JniMethod ( JNIEnv * env , const char * class _ name , const char * method _ name , const char * signature ) { 
 + JniMethod ( JNIEnv * env , const char * class _ name , const char * method _ name , const char * signature ) 
 + { 
 jclass cls = env - > FindClass ( class _ name ) ; 
 - if ( cls = = NULL ) { 
 + if ( cls = = nullptr ) { 
 / / TODO : Throw a cpp exception instead . 
 ThrowException ( env , ClassNotFound , class _ name ) ; 
 m _ method _ id = nullptr ; 
 @ @ - 44 , 7 + 53 , 12 @ @ public : 
 
 ~ JniMethod ( ) { } 
 
 - inline operator jmethodID & ( ) const { return m _ method _ id ; } 
 + operator bool ( ) const noexcept 
 + { 
 + return m _ method _ id ! = nullptr ; 
 + } 
 + 
 + inline operator const jmethodID & ( ) const { return m _ method _ id ; } 
 
 private : 
 jmethodID m _ method _ id ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 72952a2 . . 44d3237 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 122 , 12 + 122 , 13 @ @ abstract class BaseRealm implements Closeable { 
 return sharedRealm . isInTransaction ( ) ; 
 } 
 
 - protected void addListener ( RealmChangeListener < ? extends BaseRealm > listener ) { 
 + protected < T extends BaseRealm > void addListener ( RealmChangeListener < T > listener ) { 
 if ( listener = = null ) { 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 checkIfValid ( ) ; 
 - sharedRealm . realmNotifier . addChangeListener ( this , listener ) ; 
 + / / noinspection unchecked 
 + sharedRealm . realmNotifier . addChangeListener ( ( T ) this , listener ) ; 
 } 
 
 / * * 
 @ @ - 138 , 12 + 139 , 13 @ @ abstract class BaseRealm implements Closeable { 
 * @ throws IllegalStateException if you try to remove a listener from a non - Looper Thread . 
 * @ see io . realm . RealmChangeListener 
 * / 
 - public void removeChangeListener ( RealmChangeListener < ? extends BaseRealm > listener ) { 
 + public < T extends BaseRealm > void removeChangeListener ( RealmChangeListener < T > listener ) { 
 if ( listener = = null ) { 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 checkIfValid ( ) ; 
 - sharedRealm . realmNotifier . removeChangeListener ( this , listener ) ; 
 + / / noinspection unchecked 
 + sharedRealm . realmNotifier . removeChangeListener ( ( T ) this , listener ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / ProxyState . java b / realm / realm - library / src / main / java / io / realm / ProxyState . java 
 index 41bd384 . . 799bbea 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / ProxyState . java 
 + + + b / realm / realm - library / src / main / java / io / realm / ProxyState . java 
 @ @ - 101 , 12 + 101 , 12 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE 
 } 
 if ( row instanceof UncheckedRow ) { 
 RowNotifier rowNotifier = realm . sharedRealm . rowNotifier ; 
 - rowNotifier . registerListener ( ( UncheckedRow ) row , new RealmChangeListener < ProxyState < E > > ( ) { 
 + rowNotifier . registerListener ( ( UncheckedRow ) row , this , new RealmChangeListener < ProxyState < E > > ( ) { 
 @ Override 
 public void onChange ( ProxyState < E > proxyState ) { 
 proxyState . notifyChangeListeners $ realm ( ) ; 
 } 
 - } , this ) ; 
 + } ) ; 
 } 
 } 
 
 @ @ - 137 , 11 + 137 , 11 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE 
 return ; 
 } 
 RowNotifier rowNotifier = realm . sharedRealm . rowNotifier ; 
 - rowNotifier . registerListener ( ( UncheckedRow ) row , new RealmChangeListener < ProxyState < E > > ( ) { 
 + rowNotifier . registerListener ( ( UncheckedRow ) row , this , new RealmChangeListener < ProxyState < E > > ( ) { 
 @ Override 
 public void onChange ( ProxyState < E > proxyState ) { 
 proxyState . notifyChangeListeners $ realm ( ) ; 
 } 
 - } , this ) ; 
 + } ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java b / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java 
 index 190f8fd . . 7082139 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java 
 @ @ - 2 , 13 + 2 , 13 @ @ package io . realm . internal ; 
 
 import java . lang . ref . WeakReference ; 
 
 - public abstract class ObserverPair < T > { 
 - public final T listener ; 
 - public final WeakReference < Object > observerRef ; 
 + public abstract class ObserverPair < T , S > { 
 + public final WeakReference < T > observerRef ; 
 + public final S listener ; 
 
 - public ObserverPair ( T listener , Object objectRef ) { 
 + public ObserverPair ( T observer , S listener ) { 
 this . listener = listener ; 
 - this . observerRef = new WeakReference < Object > ( objectRef ) ; 
 + this . observerRef = new WeakReference < T > ( observer ) ; 
 } 
 
 @ Override 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 index 689d8b9 . . f6b9cfd 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 @ @ - 16 , 6 + 16 , 7 @ @ 
 
 package io . realm . internal ; 
 
 + import java . io . Closeable ; 
 import java . util . List ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 
 @ @ - 26 , 16 + 27 , 15 @ @ import io . realm . RealmChangeListener ; 
 * other thread / process changes the Realm file . 
 * / 
 @ Keep 
 - public class RealmNotifier { 
 + public class RealmNotifier implements Closeable { 
 
 - private static class RealmObserverPair extends ObserverPair < RealmChangeListener > { 
 - 
 - public RealmObserverPair ( Object observer , RealmChangeListener listener ) { 
 - super ( listener , observer ) ; 
 + private static class RealmObserverPair < T > extends ObserverPair < T , RealmChangeListener < T > > { 
 + public RealmObserverPair ( T observer , RealmChangeListener < T > listener ) { 
 + super ( observer , listener ) ; 
 } 
 
 private void onChange ( ) { 
 - Object observer = observerRef . get ( ) ; 
 + T observer = observerRef . get ( ) ; 
 if ( observer ! = null ) { 
 listener . onChange ( observer ) ; 
 } 
 @ @ - 61 , 7 + 61 , 7 @ @ public class RealmNotifier { 
 * other thread . The changes on the same thread should not trigger this call . 
 * / 
 @ SuppressWarnings ( " unused " ) / / called from java _ binding _ context . cpp 
 - void notifyCommitByOtherThread ( ) { 
 + void onChange ( ) { 
 for ( RealmObserverPair observerPair : realmObserverPairs ) { 
 Object observer = observerPair . observerRef . get ( ) ; 
 if ( observer = = null ) { 
 @ @ - 75 , 19 + 75 , 20 @ @ public class RealmNotifier { 
 / * * 
 * Called when close SharedRealm to clean up any event left in to queue . 
 * / 
 + @ Override 
 public void close ( ) { 
 removeAllChangeListeners ( ) ; 
 } 
 
 - public void addChangeListener ( Object observer , RealmChangeListener realmChangeListener ) { 
 - RealmObserverPair observerPair = new RealmObserverPair ( observer , realmChangeListener ) ; 
 + public < T > void addChangeListener ( T observer , RealmChangeListener < T > realmChangeListener ) { 
 + RealmObserverPair observerPair = new RealmObserverPair < T > ( observer , realmChangeListener ) ; 
 if ( ! realmObserverPairs . contains ( observerPair ) ) { 
 realmObserverPairs . add ( observerPair ) ; 
 } 
 } 
 
 - public void removeChangeListener ( Object observer , RealmChangeListener realmChangeListener ) { 
 - RealmObserverPair observerPair = new RealmObserverPair ( observer , realmChangeListener ) ; 
 + public < E > void removeChangeListener ( E observer , RealmChangeListener < E > realmChangeListener ) { 
 + RealmObserverPair observerPair = new RealmObserverPair < E > ( observer , realmChangeListener ) ; 
 realmObserverPairs . remove ( observerPair ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java 
 index b0de844 . . 5e1db36 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java 
 @ @ - 16 , 58 + 16 , 110 @ @ 
 
 package io . realm . internal ; 
 
 - import java . util . HashMap ; 
 - import java . util . Map ; 
 + import java . lang . ref . WeakReference ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . concurrent . CopyOnWriteArrayList ; 
 
 import io . realm . RealmChangeListener ; 
 
 + / * * 
 + * To bridge object store ' s row notification to java . { @ link SharedRealm } is supposed to hold a instance of this class 
 + * and pass it to JavaBindingContext . Row notifications callback will be executed when there are changes on a specific 
 + * row . 
 + * / 
 @ Keep 
 public class RowNotifier { 
 - 
 @ Keep 
 - private static class Observer { 
 - final RealmChangeListener listener ; 
 - final Object object ; 
 + private static class RowObserverPair < T > extends ObserverPair < T , RealmChangeListener < T > > { 
 + final WeakReference < UncheckedRow > rowRef ; 
 + / / Keep a strong ref to row when getRowRefs called and set it to null in clearRowRefs . 
 + / / This is to avoid the row gets GCed in between . 
 UncheckedRow row ; 
 - Observer ( RealmChangeListener listener , Object object ) { 
 - this . listener = listener ; 
 - this . object = object ; 
 - this . row = null ; 
 + public RowObserverPair ( UncheckedRow row , T observer , RealmChangeListener < T > listener ) { 
 + super ( observer , listener ) ; 
 + this . rowRef = new WeakReference < UncheckedRow > ( row ) ; 
 } 
 
 - / / Called by JNI 
 + / / Called by JNI in JavaBindingContext : : did _ change ( ) . 
 @ SuppressWarnings ( " unused " ) 
 - public void notifyListener ( ) { 
 - listener . onChange ( object ) ; 
 + private void onChange ( ) { 
 + T observer = observerRef . get ( ) ; 
 + if ( observer ! = null ) { 
 + listener . onChange ( observer ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object obj ) { 
 + if ( this = = obj ) { 
 + return true ; 
 + } 
 + 
 + if ( obj instanceof ObserverPair ) { 
 + RowObserverPair anotherPair = ( RowObserverPair ) obj ; 
 + return listener . equals ( anotherPair . listener ) & & 
 + observerRef . get ( ) = = anotherPair . observerRef . get ( ) & & 
 + rowRef . get ( ) = = anotherPair . rowRef . get ( ) ; 
 + } 
 + return false ; 
 } 
 } 
 
 - / / FIXME : Use weak ref for the key . And make the memory ownership clear in the doc . 
 - Map < UncheckedRow , Observer > rowObserverMap = new HashMap < > ( ) ; 
 + / / We don ' t take care of the duplicated rows here . The duplicated rows means the same Row object or different 
 + / / Row objects point to the same row in the same table . The duplicated rows will all get notifications but there are 
 + / / overheads when duplicated rows added since they all need to be processed to compute the differences for the row 
 + / / level fine grained notifications in the object store . 
 + private CopyOnWriteArrayList < RowObserverPair > rowObserverPairs = new CopyOnWriteArrayList < RowObserverPair > ( ) ; 
 
 - public void registerListener ( UncheckedRow row , RealmChangeListener listener , Object object ) { 
 - Observer observer = new Observer ( listener , object ) ; 
 - rowObserverMap . put ( row , observer ) ; 
 + / * * 
 + * Register a listener on a row . 
 + * 
 + * @ param row row to be observed . 
 + * @ param observer the observer which will be passed back in the { @ link RealmChangeListener # onChange ( Object ) } . 
 + * @ param listener the listener . 
 + * @ param < T > observer class . 
 + * / 
 + public < T > void registerListener ( UncheckedRow row , T observer , RealmChangeListener < T > listener ) { 
 + RowObserverPair rowObserverPair = new RowObserverPair < T > ( row , observer , listener ) ; 
 + if ( ! rowObserverPairs . contains ( rowObserverPair ) ) { 
 + rowObserverPairs . add ( rowObserverPair ) ; 
 + } 
 } 
 
 + 
 + / / The calling orders in JNI : 
 + / / 1 . getObservers ( ) to get the array of current ObserverPair . ( called in BindingContext : : get _ observed _ rows ) 
 + / / 2 . getObservedRowPtrs ( ) with return value from step 1 . To get an array of Row pointers . ( called in 
 + / / BindingContext : : get _ observed _ rows ) 
 + / / 3 . Every RowObserverPair . onChange ( ) deliver the changes to java . ( called in BindingContext : : did _ change ( ) ) 
 + / / 4 . clearRowRefs ( ) to reset the strong reference we hold in the ObserverPair . ( called in 
 + / / BindingContext : : did _ change ( ) ) 
 / / Called by JNI 
 @ SuppressWarnings ( " unused " ) 
 - private Observer [ ] getObservers ( ) { 
 - Observer [ ] observers = new Observer [ rowObserverMap . size ( ) ] ; 
 - int i = 0 ; 
 - for ( Map . Entry < UncheckedRow , Observer > entry : rowObserverMap . entrySet ( ) ) { 
 - observers [ i ] = entry . getValue ( ) ; 
 - observers [ i ] . row = entry . getKey ( ) ; 
 + private RowObserverPair [ ] getObservers ( ) { 
 + List < RowObserverPair > pairList = new ArrayList < RowObserverPair > ( rowObserverPairs . size ( ) ) ; 
 + for ( RowObserverPair pair : rowObserverPairs ) { 
 + / / FIXME : Anyone could tell me why wo we have to cast it here ? 
 + UncheckedRow uncheckedRow = ( UncheckedRow ) pair . rowRef . get ( ) ; 
 + if ( pair . observerRef . get ( ) = = null | | uncheckedRow = = null | | ! uncheckedRow . isAttached ( ) ) { 
 + / / The observer object or the row get GCed . Remove it . 
 + rowObserverPairs . remove ( pair ) ; 
 + } else { 
 + / / Keep a strong ref of the row ! in case it gets GCed before clearRowRefs ! 
 + pair . row = uncheckedRow ; 
 + pairList . add ( pair ) ; 
 + } 
 } 
 - return observers ; 
 + return pairList . toArray ( new RowObserverPair [ pairList . size ( ) ] ) ; 
 } 
 
 / / Called by JNI 
 @ SuppressWarnings ( " unused " ) 
 - private long [ ] getObservedRowPtrs ( Observer [ ] observers ) { 
 - long [ ] ptrs = new long [ observers . length ] ; 
 - for ( int i = 0 ; i < observers . length ; i + + ) { 
 - ptrs [ i ] = observers [ i ] . row . getNativePtr ( ) ; 
 + private long [ ] getObservedRowPtrs ( RowObserverPair [ ] observerPairs ) { 
 + long [ ] ptrs = new long [ observerPairs . length ] ; 
 + for ( int i = 0 ; i < observerPairs . length ; i + + ) { 
 + ptrs [ i ] = observerPairs [ i ] . row . getNativePtr ( ) ; 
 } 
 return ptrs ; 
 } 
 @ @ - 75 , 8 + 127 , 8 @ @ public class RowNotifier { 
 / / Called by JNI 
 @ SuppressWarnings ( " unused " ) 
 private void clearRowRefs ( ) { 
 - for ( Observer observer : rowObserverMap . values ( ) ) { 
 - observer . row = null ; 
 + for ( RowObserverPair observerPair : rowObserverPairs ) { 
 + observerPair . row = null ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 index 730a7f7 . . 497a52c 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 @ @ - 97 , 14 + 97 , 15 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeCloseConfig ( JNIEnv * , jclass , jlong conf 
 } 
 
 JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ internal _ SharedRealm _ nativeGetSharedRealm ( JNIEnv * env , jclass , jlong config _ ptr , jobject notifier ) 
 + Java _ io _ realm _ internal _ SharedRealm _ nativeGetSharedRealm ( JNIEnv * env , jclass , jlong config _ ptr , jobject realm _ notifier , 
 + jobject row _ notifier ) 
 { 
 TR _ ENTER _ PTR ( config _ ptr ) 
 
 auto config = reinterpret _ cast < realm : : Realm : : Config * > ( config _ ptr ) ; 
 try { 
 auto shared _ realm = Realm : : get _ shared _ realm ( * config ) ; 
 - shared _ realm - > m _ binding _ context = JavaBindingContext : : create ( env , notifier ) ; 
 + shared _ realm - > m _ binding _ context = JavaBindingContext : : create ( env , realm _ notifier , row _ notifier ) ; 
 / / FIXME : Disabled for the collection notifications . There might be some places still need it . 
 / / advance _ read needs to be handled by Java because of async query . 
 / / shared _ realm - > set _ auto _ refresh ( false ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 index b8954ca . . 4a9270c 100644 
 - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 # include " java _ binding _ context . hpp " 
 
 # include " util / format . hpp " 
 + # include " util . hpp " 
 
 using namespace realm ; 
 using namespace realm : : _ impl ; 
 @ @ - 28 , 33 + 29 , 89 @ @ JavaBindingContext : : JavaBindingContext ( const ConcreteJavaBindContext & concrete _ c 
 if ( ret ! = 0 ) { 
 throw std : : runtime _ error ( util : : format ( " Failed to get Java vm . Error : % d " , ret ) ) ; 
 } 
 - if ( concrete _ context . java _ notifier ) { 
 - m _ java _ notifier = m _ local _ jni _ env - > NewWeakGlobalRef ( concrete _ context . java _ notifier ) ; 
 - jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ java _ notifier ) ; 
 + if ( concrete _ context . realm _ notifier ) { 
 + m _ realm _ notifier = m _ local _ jni _ env - > NewWeakGlobalRef ( concrete _ context . realm _ notifier ) ; 
 + jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ realm _ notifier ) ; 
 m _ notify _ by _ other _ method = m _ local _ jni _ env - > GetMethodID ( cls , " notifyCommitByOtherThread " , " ( ) V " ) ; 
 } else { 
 - m _ java _ notifier = nullptr ; 
 + m _ realm _ notifier = nullptr ; 
 + } 
 + if ( concrete _ context . row _ notifier ) { 
 + m _ row _ notifier = m _ local _ jni _ env - > NewWeakGlobalRef ( concrete _ context . row _ notifier ) ; 
 + jclass cls = m _ local _ jni _ env - > GetObjectClass ( m _ row _ notifier ) ; 
 + m _ get _ observers _ method = m _ local _ jni _ env - > GetMethodID ( cls , " getObservers " , 
 + " ( ) [ Lio / realm / internal / RowNotifier $ Observer ; " ) ; 
 + m _ get _ observed _ row _ ptrs _ method = m _ local _ jni _ env - > GetMethodID ( cls , " getObservedRowPtrs " , 
 + " ( [ Lio / realm / internal / RowNotifier $ Observer ; ) [ J " ) ; 
 + m _ clear _ row _ refs = m _ local _ jni _ env - > GetMethodID ( cls , " clearRowRefs " , " ( ) V " ) ; 
 + jclass observer _ cls = GetClass ( m _ local _ jni _ env , " io / realm / internal / RowNotifier $ Observer " ) ; 
 + m _ observer _ notify _ listener = m _ local _ jni _ env - > GetMethodID ( observer _ cls , " notifyListener " , " ( ) V " ) ; 
 + } else { 
 + m _ row _ notifier = nullptr ; 
 } 
 } 
 
 JavaBindingContext : : ~ JavaBindingContext ( ) 
 { 
 - if ( m _ java _ notifier ) { 
 + if ( m _ realm _ notifier ) { 
 / / Always try to attach here since this may be called in the finalizer / phantom thread where m _ local _ jni _ env 
 / / should not be used on . No need to call DetachCurrentThread since this thread should always be created by 
 / / JVM . 
 JNIEnv * env ; 
 m _ jvm - > AttachCurrentThread ( & env , nullptr ) ; 
 - env - > DeleteWeakGlobalRef ( m _ java _ notifier ) ; 
 + env - > DeleteWeakGlobalRef ( m _ realm _ notifier ) ; 
 } 
 } 
 
 void JavaBindingContext : : changes _ available ( ) 
 { 
 - jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ java _ notifier ) ; 
 + jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; 
 if ( notifier ) { 
 - m _ local _ jni _ env - > CallVoidMethod ( m _ java _ notifier , m _ notify _ by _ other _ method ) ; 
 + m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ notify _ by _ other _ method ) ; 
 m _ local _ jni _ env - > DeleteLocalRef ( notifier ) ; 
 } 
 } 
 
 + std : : vector < BindingContext : : ObserverState > JavaBindingContext : : get _ observed _ rows ( ) 
 + { 
 + jobject row _ notifier = m _ local _ jni _ env - > NewLocalRef ( m _ row _ notifier ) ; 
 + if ( ! row _ notifier ) { 
 + / / The row notifier got GCed 
 + return { } ; 
 + } 
 + 
 + jobjectArray observers = static _ cast < jobjectArray > ( 
 + m _ local _ jni _ env - > CallObjectMethod ( row _ notifier , m _ get _ observers _ method ) ) ; 
 + jlongArray row _ ptr _ jarray = static _ cast < jlongArray > ( 
 + m _ local _ jni _ env - > CallObjectMethod ( row _ notifier , m _ get _ observed _ row _ ptrs _ method , observers ) ) ; 
 + JniLongArray row _ ptrs ( m _ local _ jni _ env , row _ ptr _ jarray ) ; 
 + 
 + std : : vector < BindingContext : : ObserverState > state _ list ; 
 + for ( jsize i = 0 ; i < row _ ptrs . len ( ) ; + + i ) { 
 + BindingContext : : ObserverState observer _ state ; 
 + Row * row = reinterpret _ cast < Row * > ( row _ ptrs [ i ] ) ; 
 + observer _ state . table _ ndx = row - > get _ table ( ) - > get _ index _ in _ group ( ) ; 
 + observer _ state . row _ ndx = row - > get _ index ( ) ; 
 + observer _ state . info = m _ local _ jni _ env - > GetObjectArrayElement ( observers , i ) ; 
 + state _ list . push _ back ( std : : move ( observer _ state ) ) ; 
 + } 
 + return state _ list ; 
 + } 
 + 
 + void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > const & observer _ state _ list , 
 + std : : vector < void * > const & invalidated , 
 + bool / * version _ changed * / ) 
 + { 
 + for ( auto state : observer _ state _ list ) { 
 + jobject observer = reinterpret _ cast < jobject > ( state . info ) ; 
 + / / if ( ! state . changes . empty ( ) ) { 
 + m _ local _ jni _ env - > CallVoidMethod ( observer , m _ observer _ notify _ listener ) ; 
 + / / } 
 + } 
 + for ( auto deleted _ row _ observer : invalidated ) { 
 + jobject observer = reinterpret _ cast < jobject > ( deleted _ row _ observer ) ; 
 + m _ local _ jni _ env - > CallVoidMethod ( observer , m _ observer _ notify _ listener ) ; 
 + } 
 + m _ local _ jni _ env - > CallVoidMethod ( m _ row _ notifier , m _ clear _ row _ refs ) ; 
 + } 
 + 
 diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp 
 index a058691 . . 2632cd3 100644 
 - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp 
 + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp 
 @ @ - 31 , 9 + 31 , 8 @ @ class JavaBindingContext final : public BindingContext { 
 private : 
 struct ConcreteJavaBindContext { 
 JNIEnv * jni _ env ; 
 - jobject java _ notifier ; 
 - explicit ConcreteJavaBindContext ( JNIEnv * env , jobject notifier ) 
 - : jni _ env ( env ) , java _ notifier ( notifier ) { } 
 + jobject realm _ notifier ; 
 + jobject row _ notifier ; 
 } ; 
 
 / / The JNIEnv for the thread which creates the Realm . This should only be used on the current thread . 
 @ @ - 43 , 13 + 42 , 27 @ @ private : 
 JavaVM * m _ jvm ; 
 / / A weak global ref to the implementation of RealmNotifier 
 / / Java should hold a strong ref to it as long as the SharedRealm lives 
 - jobject m _ java _ notifier ; 
 + jobject m _ realm _ notifier ; 
 / / Method IDs from RealmNotifier implementation . Cache them as member vars . 
 jmethodID m _ notify _ by _ other _ method ; 
 + / / A weak global ref to the RowNotifier object . Java should hold a strong ref to it . 
 + jobject m _ row _ notifier ; 
 + / / RowNotifier . getObservers ( ) 
 + jmethodID m _ get _ observers _ method ; 
 + / / RowNotifier . getObservedRowPtrs ( Observer [ ] ) 
 + jmethodID m _ get _ observed _ row _ ptrs _ method ; 
 + / / RowNotifier . clearRowRefs ( ) 
 + jmethodID m _ clear _ row _ refs ; 
 + jmethodID m _ observer _ notify _ listener ; 
 
 public : 
 virtual ~ JavaBindingContext ( ) ; 
 virtual void changes _ available ( ) ; 
 + virtual std : : vector < ObserverState > get _ observed _ rows ( ) ; 
 + virtual void did _ change ( std : : vector < ObserverState > const & observers , 
 + std : : vector < void * > const & invalidated , 
 + bool version _ changed = true ) ; 
 + 
 
 explicit JavaBindingContext ( const ConcreteJavaBindContext & ) ; 
 JavaBindingContext ( const JavaBindingContext & ) = delete ; 
 @ @ - 57 , 9 + 70 , 9 @ @ public : 
 JavaBindingContext ( JavaBindingContext & & ) = delete ; 
 JavaBindingContext & operator = ( JavaBindingContext & & ) = delete ; 
 
 - static inline std : : unique _ ptr < JavaBindingContext > create ( JNIEnv * env , jobject notifier ) 
 + static inline std : : unique _ ptr < JavaBindingContext > create ( JNIEnv * env , jobject notifier , jobject row _ notifier ) 
 { 
 - return std : : make _ unique < JavaBindingContext > ( ConcreteJavaBindContext { env , notifier } ) ; 
 + return std : : make _ unique < JavaBindingContext > ( ConcreteJavaBindContext { env , notifier , row _ notifier } ) ; 
 } ; 
 } ; 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java b / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java 
 index adc0c06 . . c294952 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java 
 @ @ - 55 , 12 + 55 , 14 @ @ class AndroidNotifier implements RealmNotifier { 
 / / event starved as it only starts handling Realm events instead . This is an acceptable risk as 
 / / that behaviour indicate a user bug . Previously this would be hidden as the UI would still 
 / / be responsive . 
 + / * 
 Message msg = Message . obtain ( ) ; 
 msg . what = HandlerControllerConstants . LOCAL _ COMMIT ; 
 if ( ! handler . hasMessages ( HandlerControllerConstants . LOCAL _ COMMIT ) ) { 
 handler . removeMessages ( HandlerControllerConstants . REALM _ CHANGED ) ; 
 handler . sendMessageAtFrontOfQueue ( msg ) ; 
 } 
 + * / 
 } 
 
 / / This is called by OS when other thread / process changes the Realm . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / HandlerController . java b / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 index 752fdc1 . . a0b06bc 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 + + + b / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 @ @ - 164 , 7 + 164 , 7 @ @ final class HandlerController implements Handler . Callback { 
 if ( onSuccess ! = null ) { 
 pendingOnSuccessAsyncTransactionCallbacks . add ( onSuccess ) ; 
 } 
 - realmChanged ( false ) ; 
 + / / realmChanged ( false ) ; 
 } 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / ProxyState . java b / realm / realm - library / src / main / java / io / realm / ProxyState . java 
 index 3e67066 . . c36f12d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / ProxyState . java 
 + + + b / realm / realm - library / src / main / java / io / realm / ProxyState . java 
 @ @ - 22 , 8 + 22 , 10 @ @ import java . util . concurrent . Future ; 
 
 import io . realm . internal . PendingRow ; 
 import io . realm . internal . Row ; 
 + import io . realm . internal . RowNotifier ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableQuery ; 
 + import io . realm . internal . UncheckedRow ; 
 import io . realm . log . RealmLog ; 
 
 / * * 
 @ @ - 170 , 6 + 172 , 21 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE 
 } 
 } 
 
 + public void addChangeListener ( RealmChangeListener < E > listener ) { 
 + if ( ! listeners . contains ( listener ) ) { 
 + listeners . add ( listener ) ; 
 + } 
 + if ( row instanceof UncheckedRow ) { 
 + RowNotifier rowNotifier = realm . sharedRealm . rowNotifier ; 
 + rowNotifier . registerListener ( ( UncheckedRow ) row , new RealmChangeListener < ProxyState < E > > ( ) { 
 + @ Override 
 + public void onChange ( ProxyState < E > proxyState ) { 
 + proxyState . notifyChangeListeners $ realm ( ) ; 
 + } 
 + } , this ) ; 
 + } 
 + } 
 + 
 public void setTableVersion $ realm ( ) { 
 if ( row . getTable ( ) ! = null ) { 
 currentTableVersion = row . getTable ( ) . getVersion ( ) ; 
 @ @ - 208 , 5 + 225 , 16 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE 
 if ( asyncQuery ) { 
 notifyChangeListeners $ realm ( ) ; 
 } 
 + / / FIXME : Figure out why this can be null . 
 + if ( realm . sharedRealm = = null ) { 
 + return ; 
 + } 
 + RowNotifier rowNotifier = realm . sharedRealm . rowNotifier ; 
 + rowNotifier . registerListener ( ( UncheckedRow ) row , new RealmChangeListener < ProxyState < E > > ( ) { 
 + @ Override 
 + public void onChange ( ProxyState < E > proxyState ) { 
 + proxyState . notifyChangeListeners $ realm ( ) ; 
 + } 
 + } , this ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index ed03ec6 . . 4d3a6b0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 355 , 16 + 355 , 8 @ @ public abstract class RealmObject implements RealmModel { 
 if ( ! realm . handlerController . isAutoRefreshEnabled ( ) ) { 
 throw new IllegalStateException ( " You can ' t register a listener from a non - Looper thread or IntentService thread . " ) ; 
 } 
 - List < RealmChangeListener > listeners = proxy . realmGet $ proxyState ( ) . getListeners $ realm ( ) ; 
 - if ( ! listeners . contains ( listener ) ) { 
 - listeners . add ( listener ) ; 
 - } 
 - if ( isLoaded ( proxy ) ) { 
 - / / Try to add this object to the realmObjects if it has already been loaded . 
 - / / For newly created async objects , it will be handled in RealmQuery . findFirstAsync & 
 - / / HandlerController . completedAsyncRealmObject . 
 - realm . handlerController . addToRealmObjects ( proxy ) ; 
 - } 
 + / / noinspection unchecked 
 + proxy . realmGet $ proxyState ( ) . addChangeListener ( listener ) ; 
 } else { 
 throw new IllegalArgumentException ( " Cannot add listener from this unmanaged RealmObject ( created outside of Realm ) " ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 0e20605 . . 337e72d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import io . realm . internal . LinkView ; 
 import io . realm . internal . PendingRow ; 
 import io . realm . internal . RealmNotifier ; 
 import io . realm . internal . RealmObjectProxy ; 
 + import io . realm . internal . Row ; 
 import io . realm . internal . SharedRealm ; 
 import io . realm . internal . SortDescriptor ; 
 import io . realm . internal . Table ; 
 @ @ - 1647 , 24 + 1648 , 34 @ @ public final class RealmQuery < E extends RealmModel > { 
 public E findFirst ( ) { 
 checkQueryIsNotReused ( ) ; 
 
 - / / TODO : The performance by the pending query will be a little bit worse than directly calling core ' s 
 - / / Query . find ( ) . The overhead comes with core needs to add all the row indices to the vector . However this can 
 - / / be optimized by adding support of limit in OS ' s Results which is supported by core already . 
 - PendingRow pendingRow = new PendingRow ( realm . sharedRealm , query , null ) ; 
 - / / prepare an empty reference of the RealmObject , so we can return it immediately ( promise ) 
 - / / then update it once the query complete in the background . 
 + Row row ; 
 + if ( realm . isInTransaction ( ) ) { 
 + / / It is not possible to create async query inside a transaction . So immediately query the first object . 
 + / / See OS Results : : prepare _ async ( ) 
 + row = new Collection ( realm . sharedRealm , query ) . firstUncheckedRow ( ) ; 
 + } else { 
 + / / prepare an empty reference of the RealmObject which is backed by a pending query , 
 + / / then update it once the query complete in the background . 
 + 
 + / / TODO : The performance by the pending query will be a little bit worse than directly calling core ' s 
 + / / Query . find ( ) . The overhead comes with core needs to add all the row indices to the vector . However this 
 + / / can be optimized by adding support of limit in OS ' s Results which is supported by core already . 
 + row = new PendingRow ( realm . sharedRealm , query , null ) ; 
 + } 
 final E result ; 
 if ( isDynamicQuery ( ) ) { 
 / / noinspection unchecked 
 - result = ( E ) new DynamicRealmObject ( className , realm , pendingRow ) ; 
 + result = ( E ) new DynamicRealmObject ( className , realm , row ) ; 
 } else { 
 result = realm . getConfiguration ( ) . getSchemaMediator ( ) . newInstance ( 
 - clazz , realm , pendingRow , realm . getSchema ( ) . getColumnInfo ( clazz ) , 
 + clazz , realm , row , realm . getSchema ( ) . getColumnInfo ( clazz ) , 
 false , Collections . < String > emptyList ( ) ) ; 
 } 
 
 - final RealmObjectProxy proxy = ( RealmObjectProxy ) result ; 
 - pendingRow . setFrontEnd ( proxy . realmGet $ proxyState ( ) ) ; 
 + if ( row instanceof PendingRow ) { 
 + final RealmObjectProxy proxy = ( RealmObjectProxy ) result ; 
 + ( ( PendingRow ) row ) . setFrontEnd ( proxy . realmGet $ proxyState ( ) ) ; 
 + } 
 
 return result ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java 
 new file mode 100644 
 index 0000000 . . 4e6f2b7 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . internal ; 
 + 
 + import java . lang . ref . WeakReference ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import io . realm . RealmChangeListener ; 
 + 
 + public class RowNotifier { 
 + 
 + private static class Observer { 
 + final RealmChangeListener listener ; 
 + final Object object ; 
 + UncheckedRow row ; 
 + Observer ( RealmChangeListener listener , Object object ) { 
 + this . listener = listener ; 
 + this . object = object ; 
 + this . row = null ; 
 + } 
 + public void notifyListener ( ) { 
 + listener . onChange ( object ) ; 
 + } 
 + } 
 + 
 + / / FIXME : Use weak ref for the key . And make the memory ownership clear in the doc . 
 + Map < UncheckedRow , Observer > rowObserverMap = new HashMap < > ( ) ; 
 + 
 + public void registerListener ( UncheckedRow row , RealmChangeListener listener , Object object ) { 
 + Observer observer = new Observer ( listener , object ) ; 
 + rowObserverMap . put ( row , observer ) ; 
 + } 
 + 
 + / / Called by JNI 
 + @ SuppressWarnings ( " unused " ) 
 + private Observer [ ] getObservers ( ) { 
 + Observer [ ] observers = new Observer [ rowObserverMap . size ( ) ] ; 
 + int i = 0 ; 
 + for ( Map . Entry < UncheckedRow , Observer > entry : rowObserverMap . entrySet ( ) ) { 
 + observers [ i ] = entry . getValue ( ) ; 
 + observers [ i ] . row = entry . getKey ( ) ; 
 + } 
 + return observers ; 
 + } 
 + 
 + / / Called by JNI 
 + @ SuppressWarnings ( " unused " ) 
 + private long [ ] getObservedRowPtrs ( Observer [ ] observers ) { 
 + long [ ] ptrs = new long [ observers . length ] ; 
 + for ( int i = 0 ; i < observers . length ; i + + ) { 
 + ptrs [ i ] = observers [ i ] . row . getNativePtr ( ) ; 
 + } 
 + return ptrs ; 
 + } 
 + 
 + / / Called by JNI 
 + @ SuppressWarnings ( " unused " ) 
 + private void clearRowRefs ( ) { 
 + for ( Observer observer : rowObserverMap . values ( ) ) { 
 + observer . row = null ; 
 + } 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index 9f9cf2d . . 74110fb 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 102 , 6 + 102 , 7 @ @ public final class SharedRealm implements Closeable { 
 
 / / JNI will only hold a weak global ref to this . 
 public final RealmNotifier realmNotifier ; 
 + public final RowNotifier rowNotifier ; 
 public final ObjectServerFacade objectServerFacade ; 
 
 public static class VersionID implements Comparable < VersionID > { 
 @ @ - 168 , 10 + 169 , 11 @ @ public final class SharedRealm implements Closeable { 
 private final SchemaVersionListener schemaChangeListener ; 
 
 private SharedRealm ( long nativePtr , RealmConfiguration configuration , RealmNotifier notifier , 
 - SchemaVersionListener schemaVersionListener ) { 
 + RowNotifier rowNotifier , SchemaVersionListener schemaVersionListener ) { 
 this . nativePtr = nativePtr ; 
 this . configuration = configuration ; 
 this . realmNotifier = notifier ; 
 + this . rowNotifier = rowNotifier ; 
 this . schemaChangeListener = schemaVersionListener ; 
 context = new Context ( ) ; 
 this . lastSchemaVersion = schemaVersionListener = = null ? - 1L : getSchemaVersion ( ) ; 
 @ @ - 200 , 11 + 202 , 13 @ @ public final class SharedRealm implements Closeable { 
 autoChangeNotifications , 
 rosServerUrl , 
 rosUserToken ) ; 
 + RowNotifier rowNotifier = new RowNotifier ( ) ; 
 try { 
 return new SharedRealm ( 
 - nativeGetSharedRealm ( nativeConfigPtr , realmNotifier ) , 
 + nativeGetSharedRealm ( nativeConfigPtr , realmNotifier , rowNotifier ) , 
 config , 
 realmNotifier , 
 + rowNotifier , 
 schemaVersionListener ) ; 
 } finally { 
 nativeCloseConfig ( nativeConfigPtr ) ; 
 @ @ - 374 , 7 + 378 , 8 @ @ public final class SharedRealm implements Closeable { 
 boolean autoChangeNotification , 
 String syncServerURL , String syncUserToken ) ; 
 private static native void nativeCloseConfig ( long nativeConfigPtr ) ; 
 - private static native long nativeGetSharedRealm ( long nativeConfigPtr , RealmNotifier notifier ) ; 
 + private static native long nativeGetSharedRealm ( long nativeConfigPtr , RealmNotifier notifier , 
 + RowNotifier rowNotifier ) ; 
 private static native void nativeCloseSharedRealm ( long nativeSharedRealmPtr ) ; 
 private static native boolean nativeIsClosed ( long nativeSharedRealmPtr ) ; 
 private static native void nativeBeginTransaction ( long nativeSharedRealmPtr ) ;
