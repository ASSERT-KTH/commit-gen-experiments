BLEU SCORE: 0.020980574531482755

TEST MSG: Allow multiple tasks to run after test is complete .
GENERATED MSG: Not throw always in TestRealmConfigurationFactory

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> index f44a42e . . e5b6d65 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { <nl> <nl> / / Runnable guaranteed to trigger after the test either succeeded or failed . <nl> / / Access guarded by ' lock ' <nl> - private Runnable runAfterTestIsComplete ; <nl> + private List < Runnable > runAfterTestIsComplete = new ArrayList < > ( ) ; <nl> <nl> / * * <nl> * Get the configuration for the test realm . <nl> @ @ - 162 , 7 + 162 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { <nl> * / <nl> public void runAfterTest ( Runnable task ) { <nl> synchronized ( lock ) { <nl> - runAfterTestIsComplete = task ; <nl> + runAfterTestIsComplete . add ( task ) ; <nl> } <nl> } <nl> <nl> @ @ - 485 , 8 + 485 , 8 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { <nl> try { <nl> looperTearDown ( ) ; <nl> closeResources ( ) ; <nl> - if ( runAfterTestIsComplete ! = null ) { <nl> - runAfterTestIsComplete . run ( ) ; <nl> + for ( Runnable task : runAfterTestIsComplete ) { <nl> + task . run ( ) ; <nl> } <nl> } catch ( Throwable t ) { <nl> setAssertionError ( t ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> index d87d16a . . 7a439b8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> package io . realm . rule ; <nl> <nl> import org . junit . rules . TemporaryFolder ; <nl> + import org . junit . runner . Description ; <nl> + import org . junit . runners . model . Statement ; <nl> <nl> import java . util . Collections ; <nl> import java . util . Map ; <nl> @ @ - 35 , 6 + 37 , 25 @ @ import io . realm . RealmConfiguration ; <nl> public class TestRealmConfigurationFactory extends TemporaryFolder { <nl> private Map < RealmConfiguration , Boolean > map = new ConcurrentHashMap < RealmConfiguration , Boolean > ( ) ; <nl> private Set < RealmConfiguration > configurations = Collections . newSetFromMap ( map ) ; <nl> + private boolean unitTestFailed = false ; <nl> + <nl> + @ Override <nl> + public Statement apply ( final Statement base , Description description ) { <nl> + return new Statement ( ) { <nl> + @ Override <nl> + public void evaluate ( ) throws Throwable { <nl> + before ( ) ; <nl> + try { <nl> + base . evaluate ( ) ; <nl> + } catch ( Throwable throwable ) { <nl> + unitTestFailed = true ; <nl> + throw throwable ; <nl> + } finally { <nl> + after ( ) ; <nl> + } <nl> + } <nl> + } ; <nl> + } <nl> <nl> @ Override <nl> protected void before ( ) throws Throwable { <nl> @ @ - 47 , 6 + 68 , 11 @ @ public class TestRealmConfigurationFactory extends TemporaryFolder { <nl> for ( RealmConfiguration configuration : configurations ) { <nl> Realm . deleteRealm ( configuration ) ; <nl> } <nl> + } catch ( IllegalStateException e ) { <nl> + / / Only throw the exception caused by deleting the opened Realm if the test case itself doesn ' t throw . <nl> + if ( ! unitTestFailed ) { <nl> + throw e ; <nl> + } <nl> } finally { <nl> / / This will delete the temp folder . <nl> super . after ( ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 index f44a42e . . e5b6d65 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { 
 
 / / Runnable guaranteed to trigger after the test either succeeded or failed . 
 / / Access guarded by ' lock ' 
 - private Runnable runAfterTestIsComplete ; 
 + private List < Runnable > runAfterTestIsComplete = new ArrayList < > ( ) ; 
 
 / * * 
 * Get the configuration for the test realm . 
 @ @ - 162 , 7 + 162 , 7 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { 
 * / 
 public void runAfterTest ( Runnable task ) { 
 synchronized ( lock ) { 
 - runAfterTestIsComplete = task ; 
 + runAfterTestIsComplete . add ( task ) ; 
 } 
 } 
 
 @ @ - 485 , 8 + 485 , 8 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { 
 try { 
 looperTearDown ( ) ; 
 closeResources ( ) ; 
 - if ( runAfterTestIsComplete ! = null ) { 
 - runAfterTestIsComplete . run ( ) ; 
 + for ( Runnable task : runAfterTestIsComplete ) { 
 + task . run ( ) ; 
 } 
 } catch ( Throwable t ) { 
 setAssertionError ( t ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 index d87d16a . . 7a439b8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 package io . realm . rule ; 
 
 import org . junit . rules . TemporaryFolder ; 
 + import org . junit . runner . Description ; 
 + import org . junit . runners . model . Statement ; 
 
 import java . util . Collections ; 
 import java . util . Map ; 
 @ @ - 35 , 6 + 37 , 25 @ @ import io . realm . RealmConfiguration ; 
 public class TestRealmConfigurationFactory extends TemporaryFolder { 
 private Map < RealmConfiguration , Boolean > map = new ConcurrentHashMap < RealmConfiguration , Boolean > ( ) ; 
 private Set < RealmConfiguration > configurations = Collections . newSetFromMap ( map ) ; 
 + private boolean unitTestFailed = false ; 
 + 
 + @ Override 
 + public Statement apply ( final Statement base , Description description ) { 
 + return new Statement ( ) { 
 + @ Override 
 + public void evaluate ( ) throws Throwable { 
 + before ( ) ; 
 + try { 
 + base . evaluate ( ) ; 
 + } catch ( Throwable throwable ) { 
 + unitTestFailed = true ; 
 + throw throwable ; 
 + } finally { 
 + after ( ) ; 
 + } 
 + } 
 + } ; 
 + } 
 
 @ Override 
 protected void before ( ) throws Throwable { 
 @ @ - 47 , 6 + 68 , 11 @ @ public class TestRealmConfigurationFactory extends TemporaryFolder { 
 for ( RealmConfiguration configuration : configurations ) { 
 Realm . deleteRealm ( configuration ) ; 
 } 
 + } catch ( IllegalStateException e ) { 
 + / / Only throw the exception caused by deleting the opened Realm if the test case itself doesn ' t throw . 
 + if ( ! unitTestFailed ) { 
 + throw e ; 
 + } 
 } finally { 
 / / This will delete the temp folder . 
 super . after ( ) ;
