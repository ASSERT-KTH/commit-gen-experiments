BLEU SCORE: 0.008058772966335387

TEST MSG: Disallow final fields
GENERATED MSG: Fixed issue in annotation processor with field names called " name " .

TEST DIFF (one line): diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> index 0e79776 . . c203bcc 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> @ @ - 114 , 10 + 114 , 22 @ @ public class ClassMetaData { <nl> if ( ! categorizeClassElements ( ) ) return false ; <nl> if ( ! checkListTypes ( ) ) return false ; <nl> if ( ! checkDefaultConstructor ( ) ) return false ; <nl> + if ( ! checkForFinalFields ( ) ) return false ; <nl> <nl> return true ; / / Meta data was successfully generated <nl> } <nl> <nl> + private boolean checkForFinalFields ( ) { <nl> + for ( VariableElement field : fields ) { <nl> + if ( field . getModifiers ( ) . contains ( Modifier . FINAL ) ) { <nl> + Utils . error ( " Final fields are not allowed . Class : " + className + " , Field : " + field . getSimpleName ( ) <nl> + . toString ( ) ) ; <nl> + return false ; <nl> + } <nl> + } <nl> + return true ; <nl> + } <nl> + <nl> private boolean checkListTypes ( ) { <nl> for ( VariableElement field : fields ) { <nl> if ( Utils . isRealmList ( field ) ) { <nl> diff - - git a / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> index d1d66c2 . . 2e922ee 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> + + + b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class RealmProcessorTest { <nl> private JavaFileObject booleansModel = JavaFileObjects . forResource ( " some / test / Booleans . java " ) ; <nl> private JavaFileObject booleansProxy = JavaFileObjects . forResource ( " io / realm / BooleansRealmProxy . java " ) ; <nl> private JavaFileObject emptyModel = JavaFileObjects . forResource ( " some / test / Empty . java " ) ; <nl> - private JavaFileObject noAccessorsModel = JavaFileObjects . forResource ( " some / test / NoAccessors . java " ) ; <nl> + private JavaFileObject finalModel = JavaFileObjects . forResource ( " some / test / Final . java " ) ; <nl> private JavaFileObject fieldNamesModel = JavaFileObjects . forResource ( " some / test / FieldNames . java " ) ; <nl> private JavaFileObject customAccessorModel = JavaFileObjects . forResource ( " some / test / CustomAccessor . java " ) ; <nl> private JavaFileObject nullTypesModel = JavaFileObjects . forResource ( " some / test / NullTypes . java " ) ; <nl> @ @ - 351 , 4 + 351 , 12 @ @ public class RealmProcessorTest { <nl> . failsToCompile ( ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void failOnFinalFields ( ) throws Exception { <nl> + ASSERT . about ( javaSource ( ) ) <nl> + . that ( finalModel ) <nl> + . processedWith ( new RealmProcessor ( ) ) <nl> + . failsToCompile ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Final . java b / realm / realm - annotations - processor / src / test / resources / some / test / Final . java <nl> new file mode 100644 <nl> index 0000000 . . bbbfac0 <nl> - - - / dev / null <nl> + + + b / realm / realm - annotations - processor / src / test / resources / some / test / Final . java <nl> @ @ - 0 , 0 + 1 , 84 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package some . test ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + <nl> + public class Final extends RealmObject { <nl> + private final String name ; <nl> + private int age ; <nl> + <nl> + public String getName ( ) { <nl> + return realmGetter $ name ( ) ; <nl> + } <nl> + <nl> + public void setName ( String name ) { <nl> + realmSetter $ name ( name ) ; <nl> + } <nl> + <nl> + public String realmGetter $ name ( ) { <nl> + return name ; <nl> + } <nl> + <nl> + public void realmSetter $ name ( String name ) { <nl> + this . name = name ; <nl> + } <nl> + <nl> + public int getAge ( ) { <nl> + return realmGetter $ age ( ) ; <nl> + } <nl> + <nl> + public void setAge ( int age ) { <nl> + realmSetter $ age ( age ) ; <nl> + } <nl> + <nl> + public int realmGetter $ age ( ) { <nl> + return age ; <nl> + } <nl> + <nl> + public void realmSetter $ age ( int age ) { <nl> + this . age = age ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return " Simple { " + <nl> + " name = ' " + name + ' \ ' ' + <nl> + " , age = " + age + <nl> + ' } ' ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) { <nl> + if ( this = = o ) return true ; <nl> + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; <nl> + <nl> + Simple simple = ( Simple ) o ; <nl> + <nl> + if ( age ! = simple . age ) return false ; <nl> + if ( name ! = null ? ! name . equals ( simple . name ) : simple . name ! = null ) return false ; <nl> + <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) { <nl> + int result = name ! = null ? name . hashCode ( ) : 0 ; <nl> + result = 31 * result + age ; <nl> + return result ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java <nl> index 04bf801 . . d774f04 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java <nl> @ @ - 133 , 9 + 133 , 9 @ @ public class RealmJsonTypeHelper { <nl> <nl> public static void emitFillRealmObjectFromStream ( String setter , String fieldName , String fieldTypeCanonicalName , String proxyClass , JavaWriter writer ) throws IOException { <nl> writer <nl> - . emitStatement ( " % s % s = standalone ? new % s ( ) : obj . realm . createObject ( % s . class ) " , fieldTypeCanonicalName , fieldName , fieldTypeCanonicalName , fieldTypeCanonicalName ) <nl> - . emitStatement ( " % s . populateUsingJsonStream ( % s , reader ) " , proxyClass , fieldName ) <nl> - . emitStatement ( " obj . % s ( % s ) " , setter , fieldName ) ; <nl> + . emitStatement ( " % s % sObj = standalone ? new % s ( ) : obj . realm . createObject ( % s . class ) " , fieldTypeCanonicalName , fieldName , fieldTypeCanonicalName , fieldTypeCanonicalName ) <nl> + . emitStatement ( " % s . populateUsingJsonStream ( % sObj , reader ) " , proxyClass , fieldName ) <nl> + . emitStatement ( " obj . % s ( % sObj ) " , setter , fieldName ) ; <nl> } <nl> <nl> public static void emitFillRealmListFromStream ( String getter , String setter , String fieldTypeCanonicalName , String proxyClass , JavaWriter writer ) throws IOException { <nl> diff - - git a / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java b / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> index 81dc751 . . ce9a258 100644 <nl> - - - a / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> + + + b / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ public class RealmProcessorTest { <nl> private JavaFileObject booleansProxy = JavaFileObjects . forResource ( " io / realm / BooleansRealmProxy . java " ) ; <nl> private JavaFileObject emptyModel = JavaFileObjects . forResource ( " some / test / Empty . java " ) ; <nl> private JavaFileObject noAccessorsModel = JavaFileObjects . forResource ( " some / test / NoAccessors . java " ) ; <nl> + private JavaFileObject fieldNamesModel = JavaFileObjects . forResource ( " some / test / FieldNames . java " ) ; <nl> <nl> @ Test <nl> public void compileSimpleFile ( ) { <nl> @ @ - 153 , 4 + 154 , 12 @ @ public class RealmProcessorTest { <nl> . processedWith ( new RealmProcessor ( ) ) <nl> . failsToCompile ( ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void compileFieldNamesFiles ( ) { <nl> + ASSERT . about ( javaSource ( ) ) <nl> + . that ( fieldNamesModel ) <nl> + . processedWith ( new RealmProcessor ( ) ) <nl> + . compilesWithoutError ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm - annotations - processor / src / test / resources / some / test / FieldNames . java b / realm - annotations - processor / src / test / resources / some / test / FieldNames . java <nl> new file mode 100644 <nl> index 0000000 . . f188c7d <nl> - - - / dev / null <nl> + + + b / realm - annotations - processor / src / test / resources / some / test / FieldNames . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package some . test ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + import some . test . Simple ; <nl> + <nl> + / * * <nl> + * All field names should be allowed . This means that annnotation processor <nl> + * should add a suffix to all fieldNames to avoid naming conflict with <nl> + * internal processor variabels . <nl> + * <nl> + * This class list field names that has caused problems . <nl> + * / <nl> + public class FieldNames extends RealmObject { <nl> + <nl> + private Simple name ; <nl> + <nl> + public Simple getName ( ) { <nl> + return name ; <nl> + } <nl> + <nl> + public void setName ( Simple name ) { <nl> + this . name = name ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 index 0e79776 . . c203bcc 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 @ @ - 114 , 10 + 114 , 22 @ @ public class ClassMetaData { 
 if ( ! categorizeClassElements ( ) ) return false ; 
 if ( ! checkListTypes ( ) ) return false ; 
 if ( ! checkDefaultConstructor ( ) ) return false ; 
 + if ( ! checkForFinalFields ( ) ) return false ; 
 
 return true ; / / Meta data was successfully generated 
 } 
 
 + private boolean checkForFinalFields ( ) { 
 + for ( VariableElement field : fields ) { 
 + if ( field . getModifiers ( ) . contains ( Modifier . FINAL ) ) { 
 + Utils . error ( " Final fields are not allowed . Class : " + className + " , Field : " + field . getSimpleName ( ) 
 + . toString ( ) ) ; 
 + return false ; 
 + } 
 + } 
 + return true ; 
 + } 
 + 
 private boolean checkListTypes ( ) { 
 for ( VariableElement field : fields ) { 
 if ( Utils . isRealmList ( field ) ) { 
 diff - - git a / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 index d1d66c2 . . 2e922ee 100644 
 - - - a / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 + + + b / realm / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 @ @ - 40 , 7 + 40 , 7 @ @ public class RealmProcessorTest { 
 private JavaFileObject booleansModel = JavaFileObjects . forResource ( " some / test / Booleans . java " ) ; 
 private JavaFileObject booleansProxy = JavaFileObjects . forResource ( " io / realm / BooleansRealmProxy . java " ) ; 
 private JavaFileObject emptyModel = JavaFileObjects . forResource ( " some / test / Empty . java " ) ; 
 - private JavaFileObject noAccessorsModel = JavaFileObjects . forResource ( " some / test / NoAccessors . java " ) ; 
 + private JavaFileObject finalModel = JavaFileObjects . forResource ( " some / test / Final . java " ) ; 
 private JavaFileObject fieldNamesModel = JavaFileObjects . forResource ( " some / test / FieldNames . java " ) ; 
 private JavaFileObject customAccessorModel = JavaFileObjects . forResource ( " some / test / CustomAccessor . java " ) ; 
 private JavaFileObject nullTypesModel = JavaFileObjects . forResource ( " some / test / NullTypes . java " ) ; 
 @ @ - 351 , 4 + 351 , 12 @ @ public class RealmProcessorTest { 
 . failsToCompile ( ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void failOnFinalFields ( ) throws Exception { 
 + ASSERT . about ( javaSource ( ) ) 
 + . that ( finalModel ) 
 + . processedWith ( new RealmProcessor ( ) ) 
 + . failsToCompile ( ) ; 
 + } 
 } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / some / test / Final . java b / realm / realm - annotations - processor / src / test / resources / some / test / Final . java 
 new file mode 100644 
 index 0000000 . . bbbfac0 
 - - - / dev / null 
 + + + b / realm / realm - annotations - processor / src / test / resources / some / test / Final . java 
 @ @ - 0 , 0 + 1 , 84 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package some . test ; 
 + 
 + import io . realm . RealmObject ; 
 + 
 + public class Final extends RealmObject { 
 + private final String name ; 
 + private int age ; 
 + 
 + public String getName ( ) { 
 + return realmGetter $ name ( ) ; 
 + } 
 + 
 + public void setName ( String name ) { 
 + realmSetter $ name ( name ) ; 
 + } 
 + 
 + public String realmGetter $ name ( ) { 
 + return name ; 
 + } 
 + 
 + public void realmSetter $ name ( String name ) { 
 + this . name = name ; 
 + } 
 + 
 + public int getAge ( ) { 
 + return realmGetter $ age ( ) ; 
 + } 
 + 
 + public void setAge ( int age ) { 
 + realmSetter $ age ( age ) ; 
 + } 
 + 
 + public int realmGetter $ age ( ) { 
 + return age ; 
 + } 
 + 
 + public void realmSetter $ age ( int age ) { 
 + this . age = age ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return " Simple { " + 
 + " name = ' " + name + ' \ ' ' + 
 + " , age = " + age + 
 + ' } ' ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object o ) { 
 + if ( this = = o ) return true ; 
 + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; 
 + 
 + Simple simple = ( Simple ) o ; 
 + 
 + if ( age ! = simple . age ) return false ; 
 + if ( name ! = null ? ! name . equals ( simple . name ) : simple . name ! = null ) return false ; 
 + 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) { 
 + int result = name ! = null ? name . hashCode ( ) : 0 ; 
 + result = 31 * result + age ; 
 + return result ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java 
 index 04bf801 . . d774f04 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmJsonTypeHelper . java 
 @ @ - 133 , 9 + 133 , 9 @ @ public class RealmJsonTypeHelper { 
 
 public static void emitFillRealmObjectFromStream ( String setter , String fieldName , String fieldTypeCanonicalName , String proxyClass , JavaWriter writer ) throws IOException { 
 writer 
 - . emitStatement ( " % s % s = standalone ? new % s ( ) : obj . realm . createObject ( % s . class ) " , fieldTypeCanonicalName , fieldName , fieldTypeCanonicalName , fieldTypeCanonicalName ) 
 - . emitStatement ( " % s . populateUsingJsonStream ( % s , reader ) " , proxyClass , fieldName ) 
 - . emitStatement ( " obj . % s ( % s ) " , setter , fieldName ) ; 
 + . emitStatement ( " % s % sObj = standalone ? new % s ( ) : obj . realm . createObject ( % s . class ) " , fieldTypeCanonicalName , fieldName , fieldTypeCanonicalName , fieldTypeCanonicalName ) 
 + . emitStatement ( " % s . populateUsingJsonStream ( % sObj , reader ) " , proxyClass , fieldName ) 
 + . emitStatement ( " obj . % s ( % sObj ) " , setter , fieldName ) ; 
 } 
 
 public static void emitFillRealmListFromStream ( String getter , String setter , String fieldTypeCanonicalName , String proxyClass , JavaWriter writer ) throws IOException { 
 diff - - git a / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java b / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 index 81dc751 . . ce9a258 100644 
 - - - a / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 + + + b / realm - annotations - processor / src / test / java / io / realm / processor / RealmProcessorTest . java 
 @ @ - 34 , 6 + 34 , 7 @ @ public class RealmProcessorTest { 
 private JavaFileObject booleansProxy = JavaFileObjects . forResource ( " io / realm / BooleansRealmProxy . java " ) ; 
 private JavaFileObject emptyModel = JavaFileObjects . forResource ( " some / test / Empty . java " ) ; 
 private JavaFileObject noAccessorsModel = JavaFileObjects . forResource ( " some / test / NoAccessors . java " ) ; 
 + private JavaFileObject fieldNamesModel = JavaFileObjects . forResource ( " some / test / FieldNames . java " ) ; 
 
 @ Test 
 public void compileSimpleFile ( ) { 
 @ @ - 153 , 4 + 154 , 12 @ @ public class RealmProcessorTest { 
 . processedWith ( new RealmProcessor ( ) ) 
 . failsToCompile ( ) ; 
 } 
 + 
 + @ Test 
 + public void compileFieldNamesFiles ( ) { 
 + ASSERT . about ( javaSource ( ) ) 
 + . that ( fieldNamesModel ) 
 + . processedWith ( new RealmProcessor ( ) ) 
 + . compilesWithoutError ( ) ; 
 + } 
 } 
 diff - - git a / realm - annotations - processor / src / test / resources / some / test / FieldNames . java b / realm - annotations - processor / src / test / resources / some / test / FieldNames . java 
 new file mode 100644 
 index 0000000 . . f188c7d 
 - - - / dev / null 
 + + + b / realm - annotations - processor / src / test / resources / some / test / FieldNames . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package some . test ; 
 + 
 + import io . realm . RealmObject ; 
 + import some . test . Simple ; 
 + 
 + / * * 
 + * All field names should be allowed . This means that annnotation processor 
 + * should add a suffix to all fieldNames to avoid naming conflict with 
 + * internal processor variabels . 
 + * 
 + * This class list field names that has caused problems . 
 + * / 
 + public class FieldNames extends RealmObject { 
 + 
 + private Simple name ; 
 + 
 + public Simple getName ( ) { 
 + return name ; 
 + } 
 + 
 + public void setName ( Simple name ) { 
 + this . name = name ; 
 + } 
 + } 
 \ No newline at end of file
