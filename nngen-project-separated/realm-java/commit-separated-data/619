BLEU SCORE: 0.5169731539571706

TEST MSG: revive the version check of ndk ( # 3354 )
GENERATED MSG: revive the version check of ndk

TEST DIFF (one line): diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index 502601c . . 87d8e41 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 429 , 3 + 429 , 69 @ @ if ( project . hasProperty ( ' dontCleanJniFiles ' ) ) { <nl> } <nl> clean . dependsOn cleanExternalBuildFiles <nl> } <nl> + <nl> + project . afterEvaluate { <nl> + android . libraryVariants . all { variant - > <nl> + variant . externalNativeBuildTasks [ 0 ] . dependsOn ( checkNdk ) <nl> + } <nl> + } <nl> + <nl> + task checkNdk ( ) < < { <nl> + def ndkPathInEnvVariable = System . env . ANDROID _ NDK _ HOME <nl> + if ( ! ndkPathInEnvVariable ) { <nl> + throw new GradleException ( " The environment variable ' ANDROID _ NDK _ HOME ' must be set . " ) <nl> + } <nl> + checkNdk ( ndkPathInEnvVariable ) <nl> + <nl> + def localPropFile = rootProject . file ( ' local . properties ' ) <nl> + if ( ! localPropFile . exists ( ) ) { <nl> + / / we can skip the checks since ' ANDROID _ NDK _ HOME ' will be used instead . <nl> + } else { <nl> + def String ndkPathInLocalProperties = getValueFromPropertiesFile ( localPropFile , ' ndk . dir ' ) <nl> + if ( ! ndkPathInLocalProperties ) { <nl> + throw new GradleException ( " ' ndk . dir ' must be set in $ { localPropFile . getAbsolutePath ( ) } . " ) <nl> + } <nl> + checkNdk ( ndkPathInLocalProperties ) <nl> + if ( new File ( ndkPathInLocalProperties ) . getCanonicalPath ( ) <nl> + ! = new File ( ndkPathInEnvVariable ) . getCanonicalPath ( ) ) { <nl> + throw new GradleException ( <nl> + " The value of environment variable ' ANDROID _ NDK _ HOME ' ( $ { ndkPathInEnvVariable } ) and " <nl> + + " ' ndk . dir ' in ' local . properties ' ( $ { ndkPathInLocalProperties } ) " <nl> + + ' must point the same directory . ' ) <nl> + } <nl> + } <nl> + } <nl> + <nl> + def checkNdk ( String ndkPath ) { <nl> + def detectedNdkVersion <nl> + def releaseFile = new File ( ndkPath , ' RELEASE . TXT ' ) <nl> + def propertyFile = new File ( ndkPath , ' source . properties ' ) <nl> + if ( releaseFile . isFile ( ) ) { <nl> + detectedNdkVersion = releaseFile . text . trim ( ) . split ( ) [ 0 ] . split ( ' - ' ) [ 0 ] <nl> + } else if ( propertyFile . isFile ( ) ) { <nl> + detectedNdkVersion = getValueFromPropertiesFile ( propertyFile , ' Pkg . Revision ' ) <nl> + if ( detectedNdkVersion = = null ) { <nl> + throw new GradleException ( " Failed to obtain the NDK version information from $ { ndkPath } / source . properties " ) <nl> + } <nl> + } else { <nl> + throw new GradleException ( " Neither $ { releaseFile . getAbsolutePath ( ) } nor $ { propertyFile . getAbsolutePath ( ) } is a file . " ) <nl> + } <nl> + if ( detectedNdkVersion ! = project . ndkVersion ) { <nl> + throw new GradleException ( " Your NDK version : $ { detectedNdkVersion } . " <nl> + + " Realm JNI must be compiled with the version $ { project . ndkVersion } of NDK . " ) <nl> + } <nl> + } <nl> + <nl> + def getValueFromPropertiesFile ( File propFile , String key ) { <nl> + if ( ! propFile . isFile ( ) | | ! propFile . canRead ( ) ) { <nl> + return null <nl> + } <nl> + def prop = new Properties ( ) <nl> + def reader = propFile . newReader ( ) <nl> + try { <nl> + prop . load ( reader ) <nl> + } finally { <nl> + reader . close ( ) <nl> + } <nl> + return prop . get ( key ) <nl> + }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index 2e122d0 . . e2f3cb2 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 430 , 3 + 430 , 69 @ @ if ( project . hasProperty ( ' dontCleanJniFiles ' ) ) { <nl> } <nl> clean . dependsOn cleanExternalBuildFiles <nl> } <nl> + <nl> + project . afterEvaluate { <nl> + android . libraryVariants . all { variant - > <nl> + variant . externalNativeBuildTasks [ 0 ] . dependsOn ( checkNdk ) <nl> + } <nl> + } <nl> + <nl> + task checkNdk ( ) < < { <nl> + def ndkPathInEnvVariable = System . env . ANDROID _ NDK _ HOME <nl> + if ( ! ndkPathInEnvVariable ) { <nl> + throw new GradleException ( " The environment variable ' ANDROID _ NDK _ HOME ' must be set . " ) <nl> + } <nl> + checkNdk ( ndkPathInEnvVariable ) <nl> + <nl> + def localPropFile = rootProject . file ( ' local . properties ' ) <nl> + if ( ! localPropFile . exists ( ) ) { <nl> + / / we can skip the checks since ' ANDROID _ NDK _ HOME ' will be used instead . <nl> + } else { <nl> + def String ndkPathInLocalProperties = getValueFromPropertiesFile ( localPropFile , ' ndk . dir ' ) <nl> + if ( ! ndkPathInLocalProperties ) { <nl> + throw new GradleException ( " ' ndk . dir ' must be set in $ { localPropFile . getAbsolutePath ( ) } . " ) <nl> + } <nl> + checkNdk ( ndkPathInLocalProperties ) <nl> + if ( new File ( ndkPathInLocalProperties ) . getCanonicalPath ( ) <nl> + ! = new File ( ndkPathInEnvVariable ) . getCanonicalPath ( ) ) { <nl> + throw new GradleException ( <nl> + " The value of environment variable ' ANDROID _ NDK _ HOME ' ( $ { ndkPathInEnvVariable } ) and " <nl> + + " ' ndk . dir ' in ' local . properties ' ( $ { ndkPathInLocalProperties } ) " <nl> + + ' must point the same directory . ' ) <nl> + } <nl> + } <nl> + } <nl> + <nl> + def checkNdk ( String ndkPath ) { <nl> + def detectedNdkVersion <nl> + def releaseFile = new File ( ndkPath , ' RELEASE . TXT ' ) <nl> + def propertyFile = new File ( ndkPath , ' source . properties ' ) <nl> + if ( releaseFile . isFile ( ) ) { <nl> + detectedNdkVersion = releaseFile . text . trim ( ) . split ( ) [ 0 ] . split ( ' - ' ) [ 0 ] <nl> + } else if ( propertyFile . isFile ( ) ) { <nl> + detectedNdkVersion = getValueFromPropertiesFile ( propertyFile , ' Pkg . Revision ' ) <nl> + if ( detectedNdkVersion = = null ) { <nl> + throw new GradleException ( " Failed to obtain the NDK version information from $ { ndkPath } / source . properties " ) <nl> + } <nl> + } else { <nl> + throw new GradleException ( " Neither $ { releaseFile . getAbsolutePath ( ) } nor $ { propertyFile . getAbsolutePath ( ) } is a file . " ) <nl> + } <nl> + if ( detectedNdkVersion ! = project . ndkVersion ) { <nl> + throw new GradleException ( " Your NDK version : $ { detectedNdkVersion } . " <nl> + + " Realm JNI must be compiled with the version $ { project . ndkVersion } of NDK . " ) <nl> + } <nl> + } <nl> + <nl> + def getValueFromPropertiesFile ( File propFile , String key ) { <nl> + if ( ! propFile . isFile ( ) | | ! propFile . canRead ( ) ) { <nl> + return null <nl> + } <nl> + def prop = new Properties ( ) <nl> + def reader = propFile . newReader ( ) <nl> + try { <nl> + prop . load ( reader ) <nl> + } finally { <nl> + reader . close ( ) <nl> + } <nl> + return prop . get ( key ) <nl> + }

TEST DIFF:
diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index 502601c . . 87d8e41 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 429 , 3 + 429 , 69 @ @ if ( project . hasProperty ( ' dontCleanJniFiles ' ) ) { 
 } 
 clean . dependsOn cleanExternalBuildFiles 
 } 
 + 
 + project . afterEvaluate { 
 + android . libraryVariants . all { variant - > 
 + variant . externalNativeBuildTasks [ 0 ] . dependsOn ( checkNdk ) 
 + } 
 + } 
 + 
 + task checkNdk ( ) < < { 
 + def ndkPathInEnvVariable = System . env . ANDROID _ NDK _ HOME 
 + if ( ! ndkPathInEnvVariable ) { 
 + throw new GradleException ( " The environment variable ' ANDROID _ NDK _ HOME ' must be set . " ) 
 + } 
 + checkNdk ( ndkPathInEnvVariable ) 
 + 
 + def localPropFile = rootProject . file ( ' local . properties ' ) 
 + if ( ! localPropFile . exists ( ) ) { 
 + / / we can skip the checks since ' ANDROID _ NDK _ HOME ' will be used instead . 
 + } else { 
 + def String ndkPathInLocalProperties = getValueFromPropertiesFile ( localPropFile , ' ndk . dir ' ) 
 + if ( ! ndkPathInLocalProperties ) { 
 + throw new GradleException ( " ' ndk . dir ' must be set in $ { localPropFile . getAbsolutePath ( ) } . " ) 
 + } 
 + checkNdk ( ndkPathInLocalProperties ) 
 + if ( new File ( ndkPathInLocalProperties ) . getCanonicalPath ( ) 
 + ! = new File ( ndkPathInEnvVariable ) . getCanonicalPath ( ) ) { 
 + throw new GradleException ( 
 + " The value of environment variable ' ANDROID _ NDK _ HOME ' ( $ { ndkPathInEnvVariable } ) and " 
 + + " ' ndk . dir ' in ' local . properties ' ( $ { ndkPathInLocalProperties } ) " 
 + + ' must point the same directory . ' ) 
 + } 
 + } 
 + } 
 + 
 + def checkNdk ( String ndkPath ) { 
 + def detectedNdkVersion 
 + def releaseFile = new File ( ndkPath , ' RELEASE . TXT ' ) 
 + def propertyFile = new File ( ndkPath , ' source . properties ' ) 
 + if ( releaseFile . isFile ( ) ) { 
 + detectedNdkVersion = releaseFile . text . trim ( ) . split ( ) [ 0 ] . split ( ' - ' ) [ 0 ] 
 + } else if ( propertyFile . isFile ( ) ) { 
 + detectedNdkVersion = getValueFromPropertiesFile ( propertyFile , ' Pkg . Revision ' ) 
 + if ( detectedNdkVersion = = null ) { 
 + throw new GradleException ( " Failed to obtain the NDK version information from $ { ndkPath } / source . properties " ) 
 + } 
 + } else { 
 + throw new GradleException ( " Neither $ { releaseFile . getAbsolutePath ( ) } nor $ { propertyFile . getAbsolutePath ( ) } is a file . " ) 
 + } 
 + if ( detectedNdkVersion ! = project . ndkVersion ) { 
 + throw new GradleException ( " Your NDK version : $ { detectedNdkVersion } . " 
 + + " Realm JNI must be compiled with the version $ { project . ndkVersion } of NDK . " ) 
 + } 
 + } 
 + 
 + def getValueFromPropertiesFile ( File propFile , String key ) { 
 + if ( ! propFile . isFile ( ) | | ! propFile . canRead ( ) ) { 
 + return null 
 + } 
 + def prop = new Properties ( ) 
 + def reader = propFile . newReader ( ) 
 + try { 
 + prop . load ( reader ) 
 + } finally { 
 + reader . close ( ) 
 + } 
 + return prop . get ( key ) 
 + }

NEAREST DIFF:
diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index 2e122d0 . . e2f3cb2 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 430 , 3 + 430 , 69 @ @ if ( project . hasProperty ( ' dontCleanJniFiles ' ) ) { 
 } 
 clean . dependsOn cleanExternalBuildFiles 
 } 
 + 
 + project . afterEvaluate { 
 + android . libraryVariants . all { variant - > 
 + variant . externalNativeBuildTasks [ 0 ] . dependsOn ( checkNdk ) 
 + } 
 + } 
 + 
 + task checkNdk ( ) < < { 
 + def ndkPathInEnvVariable = System . env . ANDROID _ NDK _ HOME 
 + if ( ! ndkPathInEnvVariable ) { 
 + throw new GradleException ( " The environment variable ' ANDROID _ NDK _ HOME ' must be set . " ) 
 + } 
 + checkNdk ( ndkPathInEnvVariable ) 
 + 
 + def localPropFile = rootProject . file ( ' local . properties ' ) 
 + if ( ! localPropFile . exists ( ) ) { 
 + / / we can skip the checks since ' ANDROID _ NDK _ HOME ' will be used instead . 
 + } else { 
 + def String ndkPathInLocalProperties = getValueFromPropertiesFile ( localPropFile , ' ndk . dir ' ) 
 + if ( ! ndkPathInLocalProperties ) { 
 + throw new GradleException ( " ' ndk . dir ' must be set in $ { localPropFile . getAbsolutePath ( ) } . " ) 
 + } 
 + checkNdk ( ndkPathInLocalProperties ) 
 + if ( new File ( ndkPathInLocalProperties ) . getCanonicalPath ( ) 
 + ! = new File ( ndkPathInEnvVariable ) . getCanonicalPath ( ) ) { 
 + throw new GradleException ( 
 + " The value of environment variable ' ANDROID _ NDK _ HOME ' ( $ { ndkPathInEnvVariable } ) and " 
 + + " ' ndk . dir ' in ' local . properties ' ( $ { ndkPathInLocalProperties } ) " 
 + + ' must point the same directory . ' ) 
 + } 
 + } 
 + } 
 + 
 + def checkNdk ( String ndkPath ) { 
 + def detectedNdkVersion 
 + def releaseFile = new File ( ndkPath , ' RELEASE . TXT ' ) 
 + def propertyFile = new File ( ndkPath , ' source . properties ' ) 
 + if ( releaseFile . isFile ( ) ) { 
 + detectedNdkVersion = releaseFile . text . trim ( ) . split ( ) [ 0 ] . split ( ' - ' ) [ 0 ] 
 + } else if ( propertyFile . isFile ( ) ) { 
 + detectedNdkVersion = getValueFromPropertiesFile ( propertyFile , ' Pkg . Revision ' ) 
 + if ( detectedNdkVersion = = null ) { 
 + throw new GradleException ( " Failed to obtain the NDK version information from $ { ndkPath } / source . properties " ) 
 + } 
 + } else { 
 + throw new GradleException ( " Neither $ { releaseFile . getAbsolutePath ( ) } nor $ { propertyFile . getAbsolutePath ( ) } is a file . " ) 
 + } 
 + if ( detectedNdkVersion ! = project . ndkVersion ) { 
 + throw new GradleException ( " Your NDK version : $ { detectedNdkVersion } . " 
 + + " Realm JNI must be compiled with the version $ { project . ndkVersion } of NDK . " ) 
 + } 
 + } 
 + 
 + def getValueFromPropertiesFile ( File propFile , String key ) { 
 + if ( ! propFile . isFile ( ) | | ! propFile . canRead ( ) ) { 
 + return null 
 + } 
 + def prop = new Properties ( ) 
 + def reader = propFile . newReader ( ) 
 + try { 
 + prop . load ( reader ) 
 + } finally { 
 + reader . close ( ) 
 + } 
 + return prop . get ( key ) 
 + }
