BLEU SCORE: 0.03089055318156698

TEST MSG: Use more precise and consistent machine identifiers for Mac , Linux and Windows
GENERATED MSG: Changed and tested working version

TEST DIFF (one line): diff - - git a / realm - transformer / src / main / java / io / realm / transformer / ComputerIdentifierGenerator . java b / realm - transformer / src / main / java / io / realm / transformer / ComputerIdentifierGenerator . java <nl> new file mode 100644 <nl> index 0000000 . . a151800 <nl> - - - / dev / null <nl> + + + b / realm - transformer / src / main / java / io / realm / transformer / ComputerIdentifierGenerator . java <nl> @ @ - 0 , 0 + 1 , 116 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . transformer ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . net . NetworkInterface ; <nl> + import java . net . SocketException ; <nl> + import java . security . NoSuchAlgorithmException ; <nl> + import java . util . Scanner ; <nl> + <nl> + / * * <nl> + * Generate a unique identifier for a computer . The method being used depends on the platform : <nl> + * - OS X : Mac address of en0 <nl> + * - Windows : BIOS identifier <nl> + * - Linux : Machine ID provided by the OS <nl> + * / <nl> + public class ComputerIdentifierGenerator { <nl> + <nl> + private static final String UNKNOWN = " unknown " ; <nl> + <nl> + private static String OS = System . getProperty ( " os . name " ) . toLowerCase ( ) ; <nl> + <nl> + public static String get ( ) { <nl> + try { <nl> + if ( isWindows ( ) ) { <nl> + return getWindowsIdentifier ( ) ; <nl> + } else if ( isMac ( ) ) { <nl> + return getMacOsIdentifier ( ) ; <nl> + } else if ( isLinux ( ) ) { <nl> + return getLinuxMacAddress ( ) ; <nl> + } else { <nl> + return UNKNOWN ; <nl> + } <nl> + } catch ( Exception e ) { <nl> + return UNKNOWN ; <nl> + } <nl> + } <nl> + <nl> + private static boolean isWindows ( ) { <nl> + return ( OS . contains ( " win " ) ) ; <nl> + } <nl> + <nl> + private static boolean isMac ( ) { <nl> + return ( OS . contains ( " mac " ) ) ; <nl> + } <nl> + <nl> + private static boolean isLinux ( ) { <nl> + return ( OS . contains ( " inux " ) ) ; <nl> + } <nl> + <nl> + private static String getLinuxMacAddress ( ) throws FileNotFoundException , NoSuchAlgorithmException { <nl> + File machineId = new File ( " / var / lib / dbus / machine - id " ) ; <nl> + if ( ! machineId . exists ( ) ) { <nl> + machineId = new File ( " / etc / machine - id " ) ; <nl> + } <nl> + if ( ! machineId . exists ( ) ) { <nl> + return UNKNOWN ; <nl> + } <nl> + <nl> + Scanner scanner = null ; <nl> + try { <nl> + scanner = new Scanner ( machineId ) ; <nl> + String id = scanner . useDelimiter ( " \ \ A " ) . next ( ) ; <nl> + return Utils . hexStringify ( Utils . sha256Hash ( id . getBytes ( ) ) ) ; <nl> + } finally { <nl> + if ( scanner ! = null ) { <nl> + scanner . close ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static String getMacOsIdentifier ( ) throws SocketException , NoSuchAlgorithmException { <nl> + NetworkInterface networkInterface = NetworkInterface . getByName ( " en0 " ) ; <nl> + byte [ ] hardwareAddress = networkInterface . getHardwareAddress ( ) ; <nl> + return Utils . hexStringify ( Utils . sha256Hash ( hardwareAddress ) ) ; <nl> + } <nl> + <nl> + private static String getWindowsIdentifier ( ) throws IOException , NoSuchAlgorithmException { <nl> + Runtime runtime = Runtime . getRuntime ( ) ; <nl> + Process process = runtime . exec ( new String [ ] { " wmic " , " bios " , " get " , " serialnumber " } ) ; <nl> + <nl> + String result = null ; <nl> + InputStream is = process . getInputStream ( ) ; <nl> + Scanner sc = new Scanner ( process . getInputStream ( ) ) ; <nl> + try { <nl> + while ( sc . hasNext ( ) ) { <nl> + String next = sc . next ( ) ; <nl> + if ( " SerialNumber " . equals ( next ) ) { <nl> + result = sc . next ( ) . trim ( ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } finally { <nl> + is . close ( ) ; <nl> + } <nl> + <nl> + return result = = null ? UNKNOWN : Utils . hexStringify ( Utils . sha256Hash ( result . getBytes ( ) ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java <nl> index a791be2 . . bd17094 100644 <nl> - - - a / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java <nl> + + + b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java <nl> @ @ - 133 , 7 + 133 , 7 @ @ public class RealmAnalytics { <nl> return JSON _ TEMPLATE <nl> . replaceAll ( " % EVENT % " , EVENT _ NAME ) <nl> . replaceAll ( " % TOKEN % " , TOKEN ) <nl> - . replaceAll ( " % USER _ ID % " , getAnonymousUserId ( ) ) <nl> + . replaceAll ( " % USER _ ID % " , ComputerIdentifierGenerator . get ( ) ) <nl> . replaceAll ( " % APP _ ID % " , getAnonymousAppId ( ) ) <nl> . replaceAll ( " % LANGUAGE % " , usesKotlin ? " kotlin " : " java " ) <nl> . replaceAll ( " % REALM _ VERSION % " , Version . VERSION ) <nl> @ @ - 142 , 25 + 142 , 6 @ @ public class RealmAnalytics { <nl> } <nl> <nl> / * * <nl> - * Computes an anonymous user id from the hashed MAC address of the first network interface <nl> - * @ return the anonymous user id <nl> - * @ throws NoSuchAlgorithmException <nl> - * @ throws SocketException <nl> - * / <nl> - public static String getAnonymousUserId ( ) throws NoSuchAlgorithmException , SocketException { <nl> - Enumeration < NetworkInterface > networkInterfaces = NetworkInterface . getNetworkInterfaces ( ) ; <nl> - <nl> - if ( ! networkInterfaces . hasMoreElements ( ) ) { <nl> - throw new IllegalStateException ( " No network interfaces detected " ) ; <nl> - } <nl> - <nl> - NetworkInterface networkInterface = networkInterfaces . nextElement ( ) ; <nl> - byte [ ] hardwareAddress = networkInterface . getHardwareAddress ( ) ; / / Normally this is the MAC address <nl> - <nl> - return Utils . hexStringify ( Utils . sha256Hash ( hardwareAddress ) ) ; <nl> - } <nl> - <nl> - / * * <nl> * Computes an anonymous app / library id from the packages containing RealmObject classes <nl> * @ return the anonymous app / library id <nl> * @ throws NoSuchAlgorithmException
NEAREST DIFF (one line): diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> index 47d70a3 . . 5ab63c6 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> @ @ - 41 , 8 + 41 , 8 @ @ public class RealmProcessor extends AbstractProcessor { <nl> @ Override <nl> public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { <nl> <nl> - 	 RealmUpdateChecker updateChecker = new RealmUpdateChecker ( ) ; <nl> - 	 updateChecker . executeRealmVersionUpdate ( ) ; <nl> + RealmVersionChecker updateChecker = new RealmVersionChecker ( ) ; <nl> + updateChecker . executeRealmVersionUpdate ( ) ; <nl> <nl> for ( Element classElement : roundEnv . getElementsAnnotatedWith ( RealmClass . class ) ) { <nl> String className ; <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmUpdateChecker . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmUpdateChecker . java <nl> deleted file mode 100644 <nl> index c33455e . . 0000000 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmUpdateChecker . java <nl> + + + / dev / null <nl> @ @ - 1 , 96 + 0 , 0 @ @ <nl> - package io . realm . processor ; <nl> - <nl> - import java . io . BufferedReader ; <nl> - import java . io . FileInputStream ; <nl> - import java . io . FileNotFoundException ; <nl> - import java . io . IOException ; <nl> - import java . io . InputStream ; <nl> - import java . io . InputStreamReader ; <nl> - import java . io . PrintWriter ; <nl> - import java . net . URL ; <nl> - import java . net . URLConnection ; <nl> - import java . nio . charset . Charset ; <nl> - <nl> - public class RealmUpdateChecker { <nl> - <nl> - public static final String UPDATE _ FILE = " last _ realm _ version " ; <nl> - <nl> - private static final String versionUrlStr = " http : / / static . realm . io / update / java ? " ; <nl> - / / The version value would ideally be pulled from a build file <nl> - private static final String REALM _ VERSION = " 0 . 70 . 0 " ; <nl> - <nl> - private void launchRealmCheck ( ) { <nl> - long lastRealmUpdate = readRealmStat ( ) ; <nl> - <nl> - if ( ( lastRealmUpdate + ( 24 * 60 * 60 * 1000 ) ) < System . currentTimeMillis ( ) ) { <nl> - updateLastRealmStat ( ) ; <nl> - / / Check Realm version server <nl> - String latestVersionStr = checkLatestVersion ( ) ; <nl> - <nl> - if ( ! latestVersionStr . equals ( REALM _ VERSION ) ) { <nl> - System . out . println ( " Version " + latestVersionStr + " of Realm is now available : http : / / static . realm . io / downloads / android / latest " ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - public void executeRealmVersionUpdate ( ) { <nl> - new Thread ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - launchRealmCheck ( ) ; <nl> - } <nl> - } ) . start ( ) ; <nl> - } <nl> - <nl> - private Long readRealmStat ( ) { <nl> - InputStream in = null ; <nl> - BufferedReader reader = null ; <nl> - <nl> - String lastVersionStr = null ; <nl> - try { <nl> - in = new FileInputStream ( UPDATE _ FILE ) ; <nl> - reader = new BufferedReader ( new InputStreamReader ( in , Charset . forName ( " UTF - 8 " ) ) ) ; <nl> - lastVersionStr = reader . readLine ( ) ; <nl> - in . close ( ) ; <nl> - } catch ( FileNotFoundException f ) { <nl> - / / f . printStackTrace ( ) ; <nl> - return 0L ; <nl> - } catch ( IOException e ) { <nl> - / / e . printStackTrace ( ) ; <nl> - return 0L ; <nl> - } <nl> - <nl> - try { <nl> - long retL = new Long ( lastVersionStr ) ; <nl> - return retL ; <nl> - } catch ( NumberFormatException ne ) { <nl> - return 0L ; <nl> - } <nl> - } <nl> - <nl> - private void updateLastRealmStat ( ) { <nl> - PrintWriter writer = null ; <nl> - try { <nl> - writer = new PrintWriter ( UPDATE _ FILE , " UTF - 8 " ) ; <nl> - writer . println ( System . currentTimeMillis ( ) ) ; <nl> - writer . close ( ) ; <nl> - } catch ( IOException e ) { <nl> - / / e . printStackTrace ( ) ; <nl> - } <nl> - } <nl> - <nl> - private String checkLatestVersion ( ) { <nl> - String result = REALM _ VERSION ; <nl> - try { <nl> - URL url = new URL ( versionUrlStr ) ; <nl> - URLConnection conn = url . openConnection ( ) ; <nl> - BufferedReader rd = new BufferedReader ( new InputStreamReader ( conn . getInputStream ( ) ) ) ; <nl> - result = rd . readLine ( ) ; <nl> - rd . close ( ) ; <nl> - } catch ( Exception e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - System . out . println ( " Latest version : " + result ) ; <nl> - return result ; <nl> - } <nl> - } <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java <nl> new file mode 100644 <nl> index 0000000 . . cd1890a <nl> - - - / dev / null <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java <nl> @ @ - 0 , 0 + 1 , 120 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . processor ; <nl> + <nl> + import java . io . BufferedReader ; <nl> + import java . io . FileInputStream ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . io . InputStreamReader ; <nl> + import java . io . PrintWriter ; <nl> + import java . net . URL ; <nl> + import java . net . HttpURLConnection ; <nl> + import java . nio . charset . Charset ; <nl> + <nl> + public class RealmVersionChecker { <nl> + <nl> + public static final String UPDATE _ FILE _ NAME = " realm _ version _ check . timestmp " ; <nl> + public static final String REALM _ ANDROID _ DOWNLOAD _ URL = " http : / / static . realm . io / downloads / android / latest " ; <nl> + <nl> + private static final String versionUrlStr = " http : / / static . realm . io / update / java ? " ; <nl> + / / The version value would ideally be pulled from a build file <nl> + private static final String REALM _ VERSION = " 0 . 50 . 0 " ; <nl> + <nl> + private void launchRealmCheck ( ) { <nl> + long lastRealmUpdate = readRealmStat ( ) ; <nl> + <nl> + if ( ( lastRealmUpdate + ( 24 * 60 * 60 * 1000 ) ) < System . currentTimeMillis ( ) ) { <nl> + updateLastRealmStat ( ) ; <nl> + / / Check Realm version server <nl> + String latestVersionStr = checkLatestVersion ( ) ; <nl> + <nl> + if ( ! latestVersionStr . equals ( REALM _ VERSION ) ) { <nl> + System . out . println ( " Version " + latestVersionStr + " of Realm is now available : " + REALM _ ANDROID _ DOWNLOAD _ URL ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public void executeRealmVersionUpdate ( ) { <nl> + Thread bgT = new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + launchRealmCheck ( ) ; <nl> + } <nl> + } ) ; <nl> + bgT . start ( ) ; <nl> + try { <nl> + bgT . join ( ) ; <nl> + } catch ( InterruptedException e ) { <nl> + / / e . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + <nl> + private Long readRealmStat ( ) { <nl> + InputStream in = null ; <nl> + BufferedReader reader = null ; <nl> + <nl> + String lastVersionStr = null ; <nl> + try { <nl> + in = new FileInputStream ( UPDATE _ FILE _ NAME ) ; <nl> + reader = new BufferedReader ( new InputStreamReader ( in , Charset . forName ( " UTF - 8 " ) ) ) ; <nl> + lastVersionStr = reader . readLine ( ) ; <nl> + in . close ( ) ; <nl> + } catch ( FileNotFoundException f ) { <nl> + / / f . printStackTrace ( ) ; <nl> + return 0L ; <nl> + } catch ( IOException e ) { <nl> + / / e . printStackTrace ( ) ; <nl> + return 0L ; <nl> + } <nl> + <nl> + try { <nl> + long retL = new Long ( lastVersionStr ) ; <nl> + / / System . out . println ( " Stored version found : " + retL ) ; <nl> + return retL ; <nl> + } catch ( NumberFormatException ne ) { <nl> + return 0L ; <nl> + } <nl> + } <nl> + <nl> + private void updateLastRealmStat ( ) { <nl> + PrintWriter writer = null ; <nl> + try { <nl> + writer = new PrintWriter ( UPDATE _ FILE _ NAME , " UTF - 8 " ) ; <nl> + writer . println ( System . currentTimeMillis ( ) ) ; <nl> + writer . close ( ) ; <nl> + } catch ( IOException e ) { <nl> + / / e . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + <nl> + private String checkLatestVersion ( ) { <nl> + String result = REALM _ VERSION ; <nl> + try { <nl> + URL url = new URL ( versionUrlStr + REALM _ VERSION ) ; <nl> + HttpURLConnection conn = ( HttpURLConnection ) url . openConnection ( ) ; <nl> + BufferedReader rd = new BufferedReader ( new InputStreamReader ( conn . getInputStream ( ) ) ) ; <nl> + result = rd . readLine ( ) ; <nl> + rd . close ( ) ; <nl> + } catch ( Exception e ) { <nl> + / / e . printStackTrace ( ) ; <nl> + } <nl> + / / System . out . println ( " Latest version found : " + result ) ; <nl> + return result ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / realm - transformer / src / main / java / io / realm / transformer / ComputerIdentifierGenerator . java b / realm - transformer / src / main / java / io / realm / transformer / ComputerIdentifierGenerator . java 
 new file mode 100644 
 index 0000000 . . a151800 
 - - - / dev / null 
 + + + b / realm - transformer / src / main / java / io / realm / transformer / ComputerIdentifierGenerator . java 
 @ @ - 0 , 0 + 1 , 116 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . transformer ; 
 + 
 + import java . io . File ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . NetworkInterface ; 
 + import java . net . SocketException ; 
 + import java . security . NoSuchAlgorithmException ; 
 + import java . util . Scanner ; 
 + 
 + / * * 
 + * Generate a unique identifier for a computer . The method being used depends on the platform : 
 + * - OS X : Mac address of en0 
 + * - Windows : BIOS identifier 
 + * - Linux : Machine ID provided by the OS 
 + * / 
 + public class ComputerIdentifierGenerator { 
 + 
 + private static final String UNKNOWN = " unknown " ; 
 + 
 + private static String OS = System . getProperty ( " os . name " ) . toLowerCase ( ) ; 
 + 
 + public static String get ( ) { 
 + try { 
 + if ( isWindows ( ) ) { 
 + return getWindowsIdentifier ( ) ; 
 + } else if ( isMac ( ) ) { 
 + return getMacOsIdentifier ( ) ; 
 + } else if ( isLinux ( ) ) { 
 + return getLinuxMacAddress ( ) ; 
 + } else { 
 + return UNKNOWN ; 
 + } 
 + } catch ( Exception e ) { 
 + return UNKNOWN ; 
 + } 
 + } 
 + 
 + private static boolean isWindows ( ) { 
 + return ( OS . contains ( " win " ) ) ; 
 + } 
 + 
 + private static boolean isMac ( ) { 
 + return ( OS . contains ( " mac " ) ) ; 
 + } 
 + 
 + private static boolean isLinux ( ) { 
 + return ( OS . contains ( " inux " ) ) ; 
 + } 
 + 
 + private static String getLinuxMacAddress ( ) throws FileNotFoundException , NoSuchAlgorithmException { 
 + File machineId = new File ( " / var / lib / dbus / machine - id " ) ; 
 + if ( ! machineId . exists ( ) ) { 
 + machineId = new File ( " / etc / machine - id " ) ; 
 + } 
 + if ( ! machineId . exists ( ) ) { 
 + return UNKNOWN ; 
 + } 
 + 
 + Scanner scanner = null ; 
 + try { 
 + scanner = new Scanner ( machineId ) ; 
 + String id = scanner . useDelimiter ( " \ \ A " ) . next ( ) ; 
 + return Utils . hexStringify ( Utils . sha256Hash ( id . getBytes ( ) ) ) ; 
 + } finally { 
 + if ( scanner ! = null ) { 
 + scanner . close ( ) ; 
 + } 
 + } 
 + } 
 + 
 + private static String getMacOsIdentifier ( ) throws SocketException , NoSuchAlgorithmException { 
 + NetworkInterface networkInterface = NetworkInterface . getByName ( " en0 " ) ; 
 + byte [ ] hardwareAddress = networkInterface . getHardwareAddress ( ) ; 
 + return Utils . hexStringify ( Utils . sha256Hash ( hardwareAddress ) ) ; 
 + } 
 + 
 + private static String getWindowsIdentifier ( ) throws IOException , NoSuchAlgorithmException { 
 + Runtime runtime = Runtime . getRuntime ( ) ; 
 + Process process = runtime . exec ( new String [ ] { " wmic " , " bios " , " get " , " serialnumber " } ) ; 
 + 
 + String result = null ; 
 + InputStream is = process . getInputStream ( ) ; 
 + Scanner sc = new Scanner ( process . getInputStream ( ) ) ; 
 + try { 
 + while ( sc . hasNext ( ) ) { 
 + String next = sc . next ( ) ; 
 + if ( " SerialNumber " . equals ( next ) ) { 
 + result = sc . next ( ) . trim ( ) ; 
 + break ; 
 + } 
 + } 
 + } finally { 
 + is . close ( ) ; 
 + } 
 + 
 + return result = = null ? UNKNOWN : Utils . hexStringify ( Utils . sha256Hash ( result . getBytes ( ) ) ) ; 
 + } 
 + } 
 diff - - git a / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java 
 index a791be2 . . bd17094 100644 
 - - - a / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java 
 + + + b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java 
 @ @ - 133 , 7 + 133 , 7 @ @ public class RealmAnalytics { 
 return JSON _ TEMPLATE 
 . replaceAll ( " % EVENT % " , EVENT _ NAME ) 
 . replaceAll ( " % TOKEN % " , TOKEN ) 
 - . replaceAll ( " % USER _ ID % " , getAnonymousUserId ( ) ) 
 + . replaceAll ( " % USER _ ID % " , ComputerIdentifierGenerator . get ( ) ) 
 . replaceAll ( " % APP _ ID % " , getAnonymousAppId ( ) ) 
 . replaceAll ( " % LANGUAGE % " , usesKotlin ? " kotlin " : " java " ) 
 . replaceAll ( " % REALM _ VERSION % " , Version . VERSION ) 
 @ @ - 142 , 25 + 142 , 6 @ @ public class RealmAnalytics { 
 } 
 
 / * * 
 - * Computes an anonymous user id from the hashed MAC address of the first network interface 
 - * @ return the anonymous user id 
 - * @ throws NoSuchAlgorithmException 
 - * @ throws SocketException 
 - * / 
 - public static String getAnonymousUserId ( ) throws NoSuchAlgorithmException , SocketException { 
 - Enumeration < NetworkInterface > networkInterfaces = NetworkInterface . getNetworkInterfaces ( ) ; 
 - 
 - if ( ! networkInterfaces . hasMoreElements ( ) ) { 
 - throw new IllegalStateException ( " No network interfaces detected " ) ; 
 - } 
 - 
 - NetworkInterface networkInterface = networkInterfaces . nextElement ( ) ; 
 - byte [ ] hardwareAddress = networkInterface . getHardwareAddress ( ) ; / / Normally this is the MAC address 
 - 
 - return Utils . hexStringify ( Utils . sha256Hash ( hardwareAddress ) ) ; 
 - } 
 - 
 - / * * 
 * Computes an anonymous app / library id from the packages containing RealmObject classes 
 * @ return the anonymous app / library id 
 * @ throws NoSuchAlgorithmException

NEAREST DIFF:
diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 index 47d70a3 . . 5ab63c6 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 @ @ - 41 , 8 + 41 , 8 @ @ public class RealmProcessor extends AbstractProcessor { 
 @ Override 
 public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { 
 
 - 	 RealmUpdateChecker updateChecker = new RealmUpdateChecker ( ) ; 
 - 	 updateChecker . executeRealmVersionUpdate ( ) ; 
 + RealmVersionChecker updateChecker = new RealmVersionChecker ( ) ; 
 + updateChecker . executeRealmVersionUpdate ( ) ; 
 
 for ( Element classElement : roundEnv . getElementsAnnotatedWith ( RealmClass . class ) ) { 
 String className ; 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmUpdateChecker . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmUpdateChecker . java 
 deleted file mode 100644 
 index c33455e . . 0000000 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmUpdateChecker . java 
 + + + / dev / null 
 @ @ - 1 , 96 + 0 , 0 @ @ 
 - package io . realm . processor ; 
 - 
 - import java . io . BufferedReader ; 
 - import java . io . FileInputStream ; 
 - import java . io . FileNotFoundException ; 
 - import java . io . IOException ; 
 - import java . io . InputStream ; 
 - import java . io . InputStreamReader ; 
 - import java . io . PrintWriter ; 
 - import java . net . URL ; 
 - import java . net . URLConnection ; 
 - import java . nio . charset . Charset ; 
 - 
 - public class RealmUpdateChecker { 
 - 
 - public static final String UPDATE _ FILE = " last _ realm _ version " ; 
 - 
 - private static final String versionUrlStr = " http : / / static . realm . io / update / java ? " ; 
 - / / The version value would ideally be pulled from a build file 
 - private static final String REALM _ VERSION = " 0 . 70 . 0 " ; 
 - 
 - private void launchRealmCheck ( ) { 
 - long lastRealmUpdate = readRealmStat ( ) ; 
 - 
 - if ( ( lastRealmUpdate + ( 24 * 60 * 60 * 1000 ) ) < System . currentTimeMillis ( ) ) { 
 - updateLastRealmStat ( ) ; 
 - / / Check Realm version server 
 - String latestVersionStr = checkLatestVersion ( ) ; 
 - 
 - if ( ! latestVersionStr . equals ( REALM _ VERSION ) ) { 
 - System . out . println ( " Version " + latestVersionStr + " of Realm is now available : http : / / static . realm . io / downloads / android / latest " ) ; 
 - } 
 - } 
 - } 
 - 
 - public void executeRealmVersionUpdate ( ) { 
 - new Thread ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - launchRealmCheck ( ) ; 
 - } 
 - } ) . start ( ) ; 
 - } 
 - 
 - private Long readRealmStat ( ) { 
 - InputStream in = null ; 
 - BufferedReader reader = null ; 
 - 
 - String lastVersionStr = null ; 
 - try { 
 - in = new FileInputStream ( UPDATE _ FILE ) ; 
 - reader = new BufferedReader ( new InputStreamReader ( in , Charset . forName ( " UTF - 8 " ) ) ) ; 
 - lastVersionStr = reader . readLine ( ) ; 
 - in . close ( ) ; 
 - } catch ( FileNotFoundException f ) { 
 - / / f . printStackTrace ( ) ; 
 - return 0L ; 
 - } catch ( IOException e ) { 
 - / / e . printStackTrace ( ) ; 
 - return 0L ; 
 - } 
 - 
 - try { 
 - long retL = new Long ( lastVersionStr ) ; 
 - return retL ; 
 - } catch ( NumberFormatException ne ) { 
 - return 0L ; 
 - } 
 - } 
 - 
 - private void updateLastRealmStat ( ) { 
 - PrintWriter writer = null ; 
 - try { 
 - writer = new PrintWriter ( UPDATE _ FILE , " UTF - 8 " ) ; 
 - writer . println ( System . currentTimeMillis ( ) ) ; 
 - writer . close ( ) ; 
 - } catch ( IOException e ) { 
 - / / e . printStackTrace ( ) ; 
 - } 
 - } 
 - 
 - private String checkLatestVersion ( ) { 
 - String result = REALM _ VERSION ; 
 - try { 
 - URL url = new URL ( versionUrlStr ) ; 
 - URLConnection conn = url . openConnection ( ) ; 
 - BufferedReader rd = new BufferedReader ( new InputStreamReader ( conn . getInputStream ( ) ) ) ; 
 - result = rd . readLine ( ) ; 
 - rd . close ( ) ; 
 - } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - System . out . println ( " Latest version : " + result ) ; 
 - return result ; 
 - } 
 - } 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java 
 new file mode 100644 
 index 0000000 . . cd1890a 
 - - - / dev / null 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java 
 @ @ - 0 , 0 + 1 , 120 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . processor ; 
 + 
 + import java . io . BufferedReader ; 
 + import java . io . FileInputStream ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . io . InputStreamReader ; 
 + import java . io . PrintWriter ; 
 + import java . net . URL ; 
 + import java . net . HttpURLConnection ; 
 + import java . nio . charset . Charset ; 
 + 
 + public class RealmVersionChecker { 
 + 
 + public static final String UPDATE _ FILE _ NAME = " realm _ version _ check . timestmp " ; 
 + public static final String REALM _ ANDROID _ DOWNLOAD _ URL = " http : / / static . realm . io / downloads / android / latest " ; 
 + 
 + private static final String versionUrlStr = " http : / / static . realm . io / update / java ? " ; 
 + / / The version value would ideally be pulled from a build file 
 + private static final String REALM _ VERSION = " 0 . 50 . 0 " ; 
 + 
 + private void launchRealmCheck ( ) { 
 + long lastRealmUpdate = readRealmStat ( ) ; 
 + 
 + if ( ( lastRealmUpdate + ( 24 * 60 * 60 * 1000 ) ) < System . currentTimeMillis ( ) ) { 
 + updateLastRealmStat ( ) ; 
 + / / Check Realm version server 
 + String latestVersionStr = checkLatestVersion ( ) ; 
 + 
 + if ( ! latestVersionStr . equals ( REALM _ VERSION ) ) { 
 + System . out . println ( " Version " + latestVersionStr + " of Realm is now available : " + REALM _ ANDROID _ DOWNLOAD _ URL ) ; 
 + } 
 + } 
 + } 
 + 
 + public void executeRealmVersionUpdate ( ) { 
 + Thread bgT = new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + launchRealmCheck ( ) ; 
 + } 
 + } ) ; 
 + bgT . start ( ) ; 
 + try { 
 + bgT . join ( ) ; 
 + } catch ( InterruptedException e ) { 
 + / / e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + private Long readRealmStat ( ) { 
 + InputStream in = null ; 
 + BufferedReader reader = null ; 
 + 
 + String lastVersionStr = null ; 
 + try { 
 + in = new FileInputStream ( UPDATE _ FILE _ NAME ) ; 
 + reader = new BufferedReader ( new InputStreamReader ( in , Charset . forName ( " UTF - 8 " ) ) ) ; 
 + lastVersionStr = reader . readLine ( ) ; 
 + in . close ( ) ; 
 + } catch ( FileNotFoundException f ) { 
 + / / f . printStackTrace ( ) ; 
 + return 0L ; 
 + } catch ( IOException e ) { 
 + / / e . printStackTrace ( ) ; 
 + return 0L ; 
 + } 
 + 
 + try { 
 + long retL = new Long ( lastVersionStr ) ; 
 + / / System . out . println ( " Stored version found : " + retL ) ; 
 + return retL ; 
 + } catch ( NumberFormatException ne ) { 
 + return 0L ; 
 + } 
 + } 
 + 
 + private void updateLastRealmStat ( ) { 
 + PrintWriter writer = null ; 
 + try { 
 + writer = new PrintWriter ( UPDATE _ FILE _ NAME , " UTF - 8 " ) ; 
 + writer . println ( System . currentTimeMillis ( ) ) ; 
 + writer . close ( ) ; 
 + } catch ( IOException e ) { 
 + / / e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + private String checkLatestVersion ( ) { 
 + String result = REALM _ VERSION ; 
 + try { 
 + URL url = new URL ( versionUrlStr + REALM _ VERSION ) ; 
 + HttpURLConnection conn = ( HttpURLConnection ) url . openConnection ( ) ; 
 + BufferedReader rd = new BufferedReader ( new InputStreamReader ( conn . getInputStream ( ) ) ) ; 
 + result = rd . readLine ( ) ; 
 + rd . close ( ) ; 
 + } catch ( Exception e ) { 
 + / / e . printStackTrace ( ) ; 
 + } 
 + / / System . out . println ( " Latest version found : " + result ) ; 
 + return result ; 
 + } 
 + }
