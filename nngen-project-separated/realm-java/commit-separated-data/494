BLEU SCORE: 0.24880469496253566

TEST MSG: Fix wrong thread test
GENERATED MSG: Prevent transaction on wrong thread

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java <nl> index 0c40da4 . . e5b49b7 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java <nl> @ @ - 699 , 15 + 699 , 19 @ @ public class ManagedRealmCollectionTests extends CollectionTests { <nl> <nl> @ Test <nl> public void methodsThrowOnWrongThread ( ) throws ExecutionException , InterruptedException { <nl> + realm . beginTransaction ( ) ; <nl> + AllJavaTypes allJavaTypes = realm . createObject ( AllJavaTypes . class , 42 ) ; <nl> + realm . commitTransaction ( ) ; <nl> for ( RealmCollectionMethod method : RealmCollectionMethod . values ( ) ) { <nl> assertTrue ( method + " failed " , runMethodOnWrongThread ( method ) ) ; <nl> } <nl> for ( CollectionMethod method : CollectionMethod . values ( ) ) { <nl> - assertTrue ( method + " failed " , runMethodOnWrongThread ( method ) ) ; <nl> + assertTrue ( method + " failed " , runMethodOnWrongThread ( method , allJavaTypes ) ) ; <nl> } <nl> } <nl> <nl> - private boolean runMethodOnWrongThread ( final RealmCollectionMethod method ) throws ExecutionException , InterruptedException { <nl> + private boolean runMethodOnWrongThread ( final RealmCollectionMethod method ) <nl> + throws ExecutionException , InterruptedException { <nl> realm . beginTransaction ( ) ; <nl> ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ @ - 737 , 7 + 741 , 8 @ @ public class ManagedRealmCollectionTests extends CollectionTests { <nl> return result ; <nl> } <nl> <nl> - private boolean runMethodOnWrongThread ( final CollectionMethod method ) throws ExecutionException , InterruptedException { <nl> + private boolean runMethodOnWrongThread ( final CollectionMethod method , final AllJavaTypes tempObject ) <nl> + throws ExecutionException , InterruptedException { <nl> realm . beginTransaction ( ) ; <nl> ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ @ - 762 , 8 + 767 , 9 @ @ public class ManagedRealmCollectionTests extends CollectionTests { <nl> switch ( method ) { <nl> case ADD _ OBJECT : collection . add ( new AllJavaTypes ( ) ) ; break ; <nl> case ADD _ ALL _ OBJECTS : collection . addAll ( Collections . singletonList ( new AllJavaTypes ( ) ) ) ; break ; <nl> - case CLEAR : collection . clear ( ) ; case CONTAINS : <nl> - case CONTAINS _ ALL : collection . containsAll ( Collections . singletonList ( new AllJavaTypes ( ) ) ) ; break ; <nl> + case CLEAR : collection . clear ( ) ; <nl> + case CONTAINS : <nl> + case CONTAINS _ ALL : collection . containsAll ( Collections . singletonList ( tempObject ) ) ; break ; <nl> case EQUALS : collection . equals ( createCollection ( collectionClass ) ) ; break ; <nl> case HASHCODE : <nl> / / noinspection ResultOfMethodCallIgnored
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index f6e6b46 . . d56a97f 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 626 , 6 + 626 , 28 @ @ public class RealmTest extends AndroidTestCase { <nl> assertEquals ( " Change has not been committed " , TEST _ DATA _ SIZE + 1 , resultList . size ( ) ) ; <nl> } <nl> <nl> + / / Committing a transaction on the wrong thread will fail <nl> + public void testCommitTransactionWrongThread ( ) throws InterruptedException , ExecutionException { <nl> + final Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + realm . beginTransaction ( ) ; <nl> + <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> + @ Override <nl> + public Boolean call ( ) throws Exception { <nl> + try { <nl> + realm . commitTransaction ( ) ; <nl> + return false ; <nl> + } catch ( IllegalStateException ignored ) { <nl> + return true ; <nl> + } <nl> + } <nl> + } ) ; <nl> + <nl> + Boolean result = future . get ( ) ; <nl> + assertTrue ( result ) ; <nl> + } <nl> + <nl> public void testCancelTransaction ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; <nl> @ @ - 638 , 6 + 660 , 29 @ @ public class RealmTest extends AndroidTestCase { <nl> } catch ( IllegalStateException ignored ) { } <nl> } <nl> <nl> + / / Cancelling a transaction on the wrong thread will fail <nl> + public void testCancelTransactionWrongThread ( ) throws InterruptedException , ExecutionException { <nl> + final Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + realm . beginTransaction ( ) ; <nl> + <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> + @ Override <nl> + public Boolean call ( ) throws Exception { <nl> + try { <nl> + realm . cancelTransaction ( ) ; <nl> + return false ; <nl> + } catch ( IllegalStateException ignored ) { <nl> + return true ; <nl> + } <nl> + } <nl> + } ) ; <nl> + <nl> + Boolean result = future . get ( ) ; <nl> + assertTrue ( result ) ; <nl> + } <nl> + <nl> + <nl> / / void clear ( Class < ? > classSpec ) <nl> public void testClassClear ( ) { <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java 
 index 0c40da4 . . e5b49b7 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / ManagedRealmCollectionTests . java 
 @ @ - 699 , 15 + 699 , 19 @ @ public class ManagedRealmCollectionTests extends CollectionTests { 
 
 @ Test 
 public void methodsThrowOnWrongThread ( ) throws ExecutionException , InterruptedException { 
 + realm . beginTransaction ( ) ; 
 + AllJavaTypes allJavaTypes = realm . createObject ( AllJavaTypes . class , 42 ) ; 
 + realm . commitTransaction ( ) ; 
 for ( RealmCollectionMethod method : RealmCollectionMethod . values ( ) ) { 
 assertTrue ( method + " failed " , runMethodOnWrongThread ( method ) ) ; 
 } 
 for ( CollectionMethod method : CollectionMethod . values ( ) ) { 
 - assertTrue ( method + " failed " , runMethodOnWrongThread ( method ) ) ; 
 + assertTrue ( method + " failed " , runMethodOnWrongThread ( method , allJavaTypes ) ) ; 
 } 
 } 
 
 - private boolean runMethodOnWrongThread ( final RealmCollectionMethod method ) throws ExecutionException , InterruptedException { 
 + private boolean runMethodOnWrongThread ( final RealmCollectionMethod method ) 
 + throws ExecutionException , InterruptedException { 
 realm . beginTransaction ( ) ; 
 ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ @ - 737 , 7 + 741 , 8 @ @ public class ManagedRealmCollectionTests extends CollectionTests { 
 return result ; 
 } 
 
 - private boolean runMethodOnWrongThread ( final CollectionMethod method ) throws ExecutionException , InterruptedException { 
 + private boolean runMethodOnWrongThread ( final CollectionMethod method , final AllJavaTypes tempObject ) 
 + throws ExecutionException , InterruptedException { 
 realm . beginTransaction ( ) ; 
 ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ @ - 762 , 8 + 767 , 9 @ @ public class ManagedRealmCollectionTests extends CollectionTests { 
 switch ( method ) { 
 case ADD _ OBJECT : collection . add ( new AllJavaTypes ( ) ) ; break ; 
 case ADD _ ALL _ OBJECTS : collection . addAll ( Collections . singletonList ( new AllJavaTypes ( ) ) ) ; break ; 
 - case CLEAR : collection . clear ( ) ; case CONTAINS : 
 - case CONTAINS _ ALL : collection . containsAll ( Collections . singletonList ( new AllJavaTypes ( ) ) ) ; break ; 
 + case CLEAR : collection . clear ( ) ; 
 + case CONTAINS : 
 + case CONTAINS _ ALL : collection . containsAll ( Collections . singletonList ( tempObject ) ) ; break ; 
 case EQUALS : collection . equals ( createCollection ( collectionClass ) ) ; break ; 
 case HASHCODE : 
 / / noinspection ResultOfMethodCallIgnored

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index f6e6b46 . . d56a97f 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 626 , 6 + 626 , 28 @ @ public class RealmTest extends AndroidTestCase { 
 assertEquals ( " Change has not been committed " , TEST _ DATA _ SIZE + 1 , resultList . size ( ) ) ; 
 } 
 
 + / / Committing a transaction on the wrong thread will fail 
 + public void testCommitTransactionWrongThread ( ) throws InterruptedException , ExecutionException { 
 + final Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + realm . beginTransaction ( ) ; 
 + 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 + @ Override 
 + public Boolean call ( ) throws Exception { 
 + try { 
 + realm . commitTransaction ( ) ; 
 + return false ; 
 + } catch ( IllegalStateException ignored ) { 
 + return true ; 
 + } 
 + } 
 + } ) ; 
 + 
 + Boolean result = future . get ( ) ; 
 + assertTrue ( result ) ; 
 + } 
 + 
 public void testCancelTransaction ( ) { 
 testRealm . beginTransaction ( ) ; 
 AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; 
 @ @ - 638 , 6 + 660 , 29 @ @ public class RealmTest extends AndroidTestCase { 
 } catch ( IllegalStateException ignored ) { } 
 } 
 
 + / / Cancelling a transaction on the wrong thread will fail 
 + public void testCancelTransactionWrongThread ( ) throws InterruptedException , ExecutionException { 
 + final Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + realm . beginTransaction ( ) ; 
 + 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 + @ Override 
 + public Boolean call ( ) throws Exception { 
 + try { 
 + realm . cancelTransaction ( ) ; 
 + return false ; 
 + } catch ( IllegalStateException ignored ) { 
 + return true ; 
 + } 
 + } 
 + } ) ; 
 + 
 + Boolean result = future . get ( ) ; 
 + assertTrue ( result ) ; 
 + } 
 + 
 + 
 / / void clear ( Class < ? > classSpec ) 
 public void testClassClear ( ) { 

