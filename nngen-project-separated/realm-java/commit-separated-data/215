BLEU SCORE: 0.021597011339333432

TEST MSG: Fix a bug that RealmSchema . remove ( ) and RealmSchema . rename ( ) don ' t update internal cache
GENERATED MSG: Handlers are now properly removed when a Realm is closed .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> index d1306b0 . . 0106d8a 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> @ @ - 42 , 7 + 42 , 9 @ @ import io . realm . rule . TestRealmConfigurationFactory ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertNotSame ; <nl> import static org . junit . Assert . assertNull ; <nl> + import static org . junit . Assert . assertSame ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 322 , 4 + 324 , 48 @ @ public class RealmSchemaTests { <nl> objectSchema . addPrimaryKey ( PrimaryKeyAsString . FIELD _ PRIMARY _ KEY ) ; <nl> assertEquals ( PrimaryKeyAsString . FIELD _ PRIMARY _ KEY , objectSchema . getPrimaryKey ( ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void remove _ shouldClearDynamicCache ( ) { <nl> + if ( type = = SchemaType . IMMUTABLE ) { <nl> + return ; <nl> + } <nl> + <nl> + realmSchema . create ( " foo " ) ; <nl> + / / getSchemaForClass is an internal method , but used from DynamicRealmObject and RealmQuery <nl> + final RealmObjectSchema previousFoo = realmSchema . getSchemaForClass ( " foo " ) ; <nl> + <nl> + realmSchema . remove ( " foo " ) ; <nl> + <nl> + realmSchema . create ( " foo " ) ; <nl> + final RealmObjectSchema newFoo = realmSchema . getSchemaForClass ( " foo " ) ; <nl> + <nl> + assertNotSame ( previousFoo , newFoo ) ; <nl> + <nl> + try { <nl> + previousFoo . getClassName ( ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalStateException ignored ) { <nl> + } <nl> + <nl> + assertEquals ( " foo " , newFoo . getClassName ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void rename _ shouldUpdateDynamicCache ( ) { <nl> + if ( type = = SchemaType . IMMUTABLE ) { <nl> + return ; <nl> + } <nl> + <nl> + realmSchema . create ( " foo " ) ; <nl> + / / getSchemaForClass is an internal method , but used from DynamicRealmObject and RealmQuery <nl> + final RealmObjectSchema foo = realmSchema . getSchemaForClass ( " foo " ) ; <nl> + <nl> + realmSchema . rename ( " foo " , " bar " ) ; <nl> + <nl> + final RealmObjectSchema bar = realmSchema . getSchemaForClass ( " bar " ) ; <nl> + <nl> + assertSame ( foo , bar ) ; <nl> + assertEquals ( " bar " , bar . getClassName ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / MutableRealmSchema . java b / realm / realm - library / src / main / java / io / realm / MutableRealmSchema . java <nl> index fbc8f34 . . 0de3679 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / MutableRealmSchema . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / MutableRealmSchema . java <nl> @ @ - 66 , 6 + 66 , 7 @ @ class MutableRealmSchema extends RealmSchema { <nl> table . setPrimaryKey ( null ) ; <nl> } <nl> realm . getSharedRealm ( ) . removeTable ( internalTableName ) ; <nl> + removeFromClassNameToSchemaMap ( internalTableName ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 96 , 6 + 97 , 12 @ @ class MutableRealmSchema extends RealmSchema { <nl> table . setPrimaryKey ( pkField ) ; <nl> } <nl> <nl> - return new MutableRealmObjectSchema ( realm , this , table ) ; <nl> + RealmObjectSchema objectSchema = removeFromClassNameToSchemaMap ( oldInternalName ) ; <nl> + if ( objectSchema = = null | | ! objectSchema . getTable ( ) . isValid ( ) | | ! objectSchema . getClassName ( ) . equals ( newClassName ) ) { <nl> + objectSchema = new MutableRealmObjectSchema ( realm , this , table ) ; <nl> + } <nl> + putToClassNameToSchemaMap ( newInternalName , objectSchema ) ; <nl> + <nl> + return objectSchema ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> index d083475 . . b4cfd3c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> @ @ - 356 , 7 + 356 , 7 @ @ final class RealmCache { <nl> <nl> if ( realmClass = = Realm . class & & refAndCount . globalCount = = 0 ) { <nl> / / Stores a copy of local ColumnIndices as a global cache . <nl> - RealmCache . storeColumnIndices ( typedColumnIndicesArray , realm . getSchema ( ) . getImmutableColumnIndicies ( ) ) ; <nl> + RealmCache . storeColumnIndices ( typedColumnIndicesArray , realm . getSchema ( ) . getImmutableColumnIndices ( ) ) ; <nl> } <nl> / / This is the first instance in current thread , increase the global count . <nl> refAndCount . globalCount + + ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmSchema . java b / realm / realm - library / src / main / java / io / realm / RealmSchema . java <nl> index 837bb11 . . 45cd688 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmSchema . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmSchema . java <nl> @ @ - 207 , 7 + 207 , 7 @ @ public abstract class RealmSchema { <nl> RealmObjectSchema getSchemaForClass ( String className ) { <nl> String tableName = Table . getTableNameForClass ( className ) ; <nl> RealmObjectSchema dynamicSchema = dynamicClassToSchema . get ( tableName ) ; <nl> - if ( dynamicSchema = = null ) { <nl> + if ( dynamicSchema = = null | | ! dynamicSchema . getTable ( ) . isValid ( ) | | ! dynamicSchema . getClassName ( ) . equals ( className ) ) { <nl> if ( ! realm . getSharedRealm ( ) . hasTable ( tableName ) ) { <nl> throw new IllegalArgumentException ( " The class " + className + " doesn ' t exist in this Realm . " ) ; <nl> } <nl> @ @ - 265 , 7 + 265 , 7 @ @ public abstract class RealmSchema { <nl> * @ return a new , thread - safe copy of this Schema ' s ColumnIndices . <nl> * @ see ColumnIndices for the effectively final contract . <nl> * / <nl> - final ColumnIndices getImmutableColumnIndicies ( ) { <nl> + final ColumnIndices getImmutableColumnIndices ( ) { <nl> checkIndices ( ) ; <nl> return new ColumnIndices ( columnIndices , false ) ; <nl> } <nl> @ @ - 289 , 6 + 289 , 14 @ @ public abstract class RealmSchema { <nl> return columnIndices . getColumnInfo ( className ) ; <nl> } <nl> <nl> + final void putToClassNameToSchemaMap ( String name , RealmObjectSchema objectSchema ) { <nl> + dynamicClassToSchema . put ( name , objectSchema ) ; <nl> + } <nl> + <nl> + final RealmObjectSchema removeFromClassNameToSchemaMap ( String name ) { <nl> + return dynamicClassToSchema . remove ( name ) ; <nl> + } <nl> + <nl> private void checkIndices ( ) { <nl> if ( ! haveColumnInfo ( ) ) { <nl> throw new IllegalStateException ( " Attempt to use column index before set . " ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index d8afa0f . . fe8626b 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 111 , 6 + 111 , 25 @ @ public class RealmTest extends AndroidTestCase { <nl> newRealm . close ( ) ; <nl> } <nl> <nl> + public void testInternalRealmChangedHandlersRemoved ( ) throws InterruptedException { <nl> + final String REALM _ NAME = " test - threads " ; <nl> + Realm . deleteRealmFile ( getContext ( ) , REALM _ NAME ) ; <nl> + Realm . handlers . clear ( ) ; / / Make sure that handlers from other unit tests doesn ' t interfere . <nl> + <nl> + / / Open and close first instance of a Realm <nl> + Realm uiRealm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; <nl> + assertEquals ( 1 , Realm . handlers . size ( ) ) ; <nl> + uiRealm . close ( ) ; <nl> + <nl> + / / All Realms closed . No handlers should be alive . <nl> + assertEquals ( 0 , Realm . handlers . size ( ) ) ; <nl> + <nl> + / / Open instance the 2nd time . Old handler should now be gone <nl> + uiRealm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; <nl> + assertEquals ( 1 , Realm . handlers . size ( ) ) ; <nl> + uiRealm . close ( ) ; <nl> + } <nl> + <nl> public void testShouldCreateRealm ( ) { <nl> assertNotNull ( " Realm . getInstance unexpectedly returns null " , testRealm ) ; <nl> assertTrue ( " Realm . getInstance does not contain expected table " , testRealm . contains ( AllTypes . class ) ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java b / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java <nl> index c05436e . . 99e48f8 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java <nl> @ @ - 64 , 4 + 64 , 24 @ @ public class JNIImplicitTransactionsTest extends AndroidTestCase { <nl> <nl> } <nl> <nl> + public void testCannotUseClosedImplicitTransaction ( ) { <nl> + SharedGroup sg = new SharedGroup ( testFile , true , null ) ; <nl> + WriteTransaction wt = sg . beginWrite ( ) ; <nl> + if ( ! wt . hasTable ( " test " ) ) { <nl> + Table table = wt . getTable ( " test " ) ; <nl> + table . addColumn ( ColumnType . INTEGER , " integer " ) ; <nl> + table . addEmptyRow ( ) ; <nl> + } <nl> + wt . commit ( ) ; <nl> + ImplicitTransaction t = sg . beginImplicitTransaction ( ) ; <nl> + <nl> + sg . close ( ) ; <nl> + try { <nl> + t . advanceRead ( ) ; <nl> + } catch ( IllegalStateException e ) { <nl> + return ; <nl> + } <nl> + <nl> + fail ( " It should not be possible to advanceRead on a transaction which SharedGroup is closed " ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 3b01d6a . . bfd888d 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class Realm implements Closeable { <nl> } <nl> } ; <nl> private static final int REALM _ CHANGED = 14930352 ; / / Just a nice big Fibonacci number . For no reason : ) <nl> - private static final Map < Handler , Integer > handlers = new ConcurrentHashMap < Handler , Integer > ( ) ; <nl> + protected static final Map < Handler , Integer > handlers = new ConcurrentHashMap < Handler , Integer > ( ) ; <nl> private static final String APT _ NOT _ EXECUTED _ MESSAGE = " Annotation processor may not have been executed . " ; <nl> private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they where created . " ; <nl> private static final String CLOSED _ REALM = " This Realm instance has already been closed , making it unusable . " ; <nl> @ @ - 173 , 6 + 173 , 10 @ @ public class Realm implements Closeable { <nl> } <nl> localRefCount . put ( id , references - 1 ) ; <nl> referenceCount . set ( localRefCount ) ; <nl> + <nl> + if ( handler ! = null ) { <nl> + handlers . remove ( handler ) ; <nl> + } <nl> } <nl> <nl> private class RealmCallback implements Handler . Callback { <nl> diff - - git a / realm / src / main / java / io / realm / internal / Group . java b / realm / src / main / java / io / realm / internal / Group . java <nl> index c5a7194 . . 38ce9f2 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / Group . java <nl> + + + b / realm / src / main / java / io / realm / internal / Group . java <nl> @ @ - 135 , 7 + 135 , 16 @ @ public class Group implements Closeable { <nl> } <nl> <nl> protected static native void nativeClose ( long nativeGroupPtr ) ; <nl> - <nl> + <nl> + / * * <nl> + * Checks if a groups has been closed and can no longer be used . <nl> + * <nl> + * @ return True if closed , false otherwise . <nl> + * / <nl> + public boolean isClosed ( ) { <nl> + return nativePtr = = 0 ; <nl> + } <nl> + <nl> protected void finalize ( ) { <nl> synchronized ( context ) { <nl> if ( nativePtr ! = 0 ) { <nl> diff - - git a / realm / src / main / java / io / realm / internal / ImplicitTransaction . java b / realm / src / main / java / io / realm / internal / ImplicitTransaction . java <nl> index d436743 . . 90f223d 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / ImplicitTransaction . java <nl> + + + b / realm / src / main / java / io / realm / internal / ImplicitTransaction . java <nl> @ @ - 26 , 10 + 26 , 12 @ @ public class ImplicitTransaction extends Group { <nl> } <nl> <nl> public void advanceRead ( ) { <nl> + assertNotClosed ( ) ; <nl> parent . advanceRead ( ) ; <nl> } <nl> <nl> public void promoteToWrite ( ) { <nl> + assertNotClosed ( ) ; <nl> if ( immutable ) { <nl> immutable = false ; <nl> parent . promoteToWrite ( ) ; <nl> @ @ - 39 , 15 + 41 , 18 @ @ public class ImplicitTransaction extends Group { <nl> } <nl> <nl> public void commitAndContinueAsRead ( ) { <nl> + assertNotClosed ( ) ; <nl> parent . commitAndContinueAsRead ( ) ; <nl> immutable = true ; <nl> } <nl> <nl> public void endRead ( ) { <nl> + assertNotClosed ( ) ; <nl> parent . endRead ( ) ; <nl> } <nl> <nl> public void rollbackAndContinueAsRead ( ) { <nl> + assertNotClosed ( ) ; <nl> if ( ! immutable ) { <nl> parent . rollbackAndContinueAsRead ( ) ; <nl> immutable = true ; <nl> @ @ - 56 , 6 + 61 , 11 @ @ public class ImplicitTransaction extends Group { <nl> } <nl> } <nl> <nl> - protected void finalize ( ) { } / / Nullify the actions of Group . finalize ( ) <nl> + private void assertNotClosed ( ) { <nl> + if ( isClosed ( ) | | parent . isClosed ( ) ) { <nl> + throw new IllegalStateException ( " Cannot use ImplicitTransaction after it or its parent has been closed . " ) ; <nl> + } <nl> + } <nl> <nl> + protected void finalize ( ) { } / / Nullify the actions of Group . finalize ( ) <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / internal / SharedGroup . java b / realm / src / main / java / io / realm / internal / SharedGroup . java <nl> index 9001f54 . . fe0f767 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / SharedGroup . java <nl> + + + b / realm / src / main / java / io / realm / internal / SharedGroup . java <nl> @ @ - 206 , 7 + 206 , 7 @ @ public class SharedGroup implements Closeable { <nl> } <nl> <nl> <nl> - private boolean isClosed ( ) { <nl> + public boolean isClosed ( ) { <nl> return nativePtr = = 0 ; <nl> } <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 index d1306b0 . . 0106d8a 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 @ @ - 42 , 7 + 42 , 9 @ @ import io . realm . rule . TestRealmConfigurationFactory ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertNotSame ; 
 import static org . junit . Assert . assertNull ; 
 + import static org . junit . Assert . assertSame ; 
 import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 @ @ - 322 , 4 + 324 , 48 @ @ public class RealmSchemaTests { 
 objectSchema . addPrimaryKey ( PrimaryKeyAsString . FIELD _ PRIMARY _ KEY ) ; 
 assertEquals ( PrimaryKeyAsString . FIELD _ PRIMARY _ KEY , objectSchema . getPrimaryKey ( ) ) ; 
 } 
 + 
 + @ Test 
 + public void remove _ shouldClearDynamicCache ( ) { 
 + if ( type = = SchemaType . IMMUTABLE ) { 
 + return ; 
 + } 
 + 
 + realmSchema . create ( " foo " ) ; 
 + / / getSchemaForClass is an internal method , but used from DynamicRealmObject and RealmQuery 
 + final RealmObjectSchema previousFoo = realmSchema . getSchemaForClass ( " foo " ) ; 
 + 
 + realmSchema . remove ( " foo " ) ; 
 + 
 + realmSchema . create ( " foo " ) ; 
 + final RealmObjectSchema newFoo = realmSchema . getSchemaForClass ( " foo " ) ; 
 + 
 + assertNotSame ( previousFoo , newFoo ) ; 
 + 
 + try { 
 + previousFoo . getClassName ( ) ; 
 + fail ( ) ; 
 + } catch ( IllegalStateException ignored ) { 
 + } 
 + 
 + assertEquals ( " foo " , newFoo . getClassName ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void rename _ shouldUpdateDynamicCache ( ) { 
 + if ( type = = SchemaType . IMMUTABLE ) { 
 + return ; 
 + } 
 + 
 + realmSchema . create ( " foo " ) ; 
 + / / getSchemaForClass is an internal method , but used from DynamicRealmObject and RealmQuery 
 + final RealmObjectSchema foo = realmSchema . getSchemaForClass ( " foo " ) ; 
 + 
 + realmSchema . rename ( " foo " , " bar " ) ; 
 + 
 + final RealmObjectSchema bar = realmSchema . getSchemaForClass ( " bar " ) ; 
 + 
 + assertSame ( foo , bar ) ; 
 + assertEquals ( " bar " , bar . getClassName ( ) ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / MutableRealmSchema . java b / realm / realm - library / src / main / java / io / realm / MutableRealmSchema . java 
 index fbc8f34 . . 0de3679 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / MutableRealmSchema . java 
 + + + b / realm / realm - library / src / main / java / io / realm / MutableRealmSchema . java 
 @ @ - 66 , 6 + 66 , 7 @ @ class MutableRealmSchema extends RealmSchema { 
 table . setPrimaryKey ( null ) ; 
 } 
 realm . getSharedRealm ( ) . removeTable ( internalTableName ) ; 
 + removeFromClassNameToSchemaMap ( internalTableName ) ; 
 } 
 
 @ Override 
 @ @ - 96 , 6 + 97 , 12 @ @ class MutableRealmSchema extends RealmSchema { 
 table . setPrimaryKey ( pkField ) ; 
 } 
 
 - return new MutableRealmObjectSchema ( realm , this , table ) ; 
 + RealmObjectSchema objectSchema = removeFromClassNameToSchemaMap ( oldInternalName ) ; 
 + if ( objectSchema = = null | | ! objectSchema . getTable ( ) . isValid ( ) | | ! objectSchema . getClassName ( ) . equals ( newClassName ) ) { 
 + objectSchema = new MutableRealmObjectSchema ( realm , this , table ) ; 
 + } 
 + putToClassNameToSchemaMap ( newInternalName , objectSchema ) ; 
 + 
 + return objectSchema ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 index d083475 . . b4cfd3c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 @ @ - 356 , 7 + 356 , 7 @ @ final class RealmCache { 
 
 if ( realmClass = = Realm . class & & refAndCount . globalCount = = 0 ) { 
 / / Stores a copy of local ColumnIndices as a global cache . 
 - RealmCache . storeColumnIndices ( typedColumnIndicesArray , realm . getSchema ( ) . getImmutableColumnIndicies ( ) ) ; 
 + RealmCache . storeColumnIndices ( typedColumnIndicesArray , realm . getSchema ( ) . getImmutableColumnIndices ( ) ) ; 
 } 
 / / This is the first instance in current thread , increase the global count . 
 refAndCount . globalCount + + ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmSchema . java b / realm / realm - library / src / main / java / io / realm / RealmSchema . java 
 index 837bb11 . . 45cd688 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmSchema . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmSchema . java 
 @ @ - 207 , 7 + 207 , 7 @ @ public abstract class RealmSchema { 
 RealmObjectSchema getSchemaForClass ( String className ) { 
 String tableName = Table . getTableNameForClass ( className ) ; 
 RealmObjectSchema dynamicSchema = dynamicClassToSchema . get ( tableName ) ; 
 - if ( dynamicSchema = = null ) { 
 + if ( dynamicSchema = = null | | ! dynamicSchema . getTable ( ) . isValid ( ) | | ! dynamicSchema . getClassName ( ) . equals ( className ) ) { 
 if ( ! realm . getSharedRealm ( ) . hasTable ( tableName ) ) { 
 throw new IllegalArgumentException ( " The class " + className + " doesn ' t exist in this Realm . " ) ; 
 } 
 @ @ - 265 , 7 + 265 , 7 @ @ public abstract class RealmSchema { 
 * @ return a new , thread - safe copy of this Schema ' s ColumnIndices . 
 * @ see ColumnIndices for the effectively final contract . 
 * / 
 - final ColumnIndices getImmutableColumnIndicies ( ) { 
 + final ColumnIndices getImmutableColumnIndices ( ) { 
 checkIndices ( ) ; 
 return new ColumnIndices ( columnIndices , false ) ; 
 } 
 @ @ - 289 , 6 + 289 , 14 @ @ public abstract class RealmSchema { 
 return columnIndices . getColumnInfo ( className ) ; 
 } 
 
 + final void putToClassNameToSchemaMap ( String name , RealmObjectSchema objectSchema ) { 
 + dynamicClassToSchema . put ( name , objectSchema ) ; 
 + } 
 + 
 + final RealmObjectSchema removeFromClassNameToSchemaMap ( String name ) { 
 + return dynamicClassToSchema . remove ( name ) ; 
 + } 
 + 
 private void checkIndices ( ) { 
 if ( ! haveColumnInfo ( ) ) { 
 throw new IllegalStateException ( " Attempt to use column index before set . " ) ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index d8afa0f . . fe8626b 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 111 , 6 + 111 , 25 @ @ public class RealmTest extends AndroidTestCase { 
 newRealm . close ( ) ; 
 } 
 
 + public void testInternalRealmChangedHandlersRemoved ( ) throws InterruptedException { 
 + final String REALM _ NAME = " test - threads " ; 
 + Realm . deleteRealmFile ( getContext ( ) , REALM _ NAME ) ; 
 + Realm . handlers . clear ( ) ; / / Make sure that handlers from other unit tests doesn ' t interfere . 
 + 
 + / / Open and close first instance of a Realm 
 + Realm uiRealm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; 
 + assertEquals ( 1 , Realm . handlers . size ( ) ) ; 
 + uiRealm . close ( ) ; 
 + 
 + / / All Realms closed . No handlers should be alive . 
 + assertEquals ( 0 , Realm . handlers . size ( ) ) ; 
 + 
 + / / Open instance the 2nd time . Old handler should now be gone 
 + uiRealm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; 
 + assertEquals ( 1 , Realm . handlers . size ( ) ) ; 
 + uiRealm . close ( ) ; 
 + } 
 + 
 public void testShouldCreateRealm ( ) { 
 assertNotNull ( " Realm . getInstance unexpectedly returns null " , testRealm ) ; 
 assertTrue ( " Realm . getInstance does not contain expected table " , testRealm . contains ( AllTypes . class ) ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java b / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java 
 index c05436e . . 99e48f8 100644 
 - - - a / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java 
 @ @ - 64 , 4 + 64 , 24 @ @ public class JNIImplicitTransactionsTest extends AndroidTestCase { 
 
 } 
 
 + public void testCannotUseClosedImplicitTransaction ( ) { 
 + SharedGroup sg = new SharedGroup ( testFile , true , null ) ; 
 + WriteTransaction wt = sg . beginWrite ( ) ; 
 + if ( ! wt . hasTable ( " test " ) ) { 
 + Table table = wt . getTable ( " test " ) ; 
 + table . addColumn ( ColumnType . INTEGER , " integer " ) ; 
 + table . addEmptyRow ( ) ; 
 + } 
 + wt . commit ( ) ; 
 + ImplicitTransaction t = sg . beginImplicitTransaction ( ) ; 
 + 
 + sg . close ( ) ; 
 + try { 
 + t . advanceRead ( ) ; 
 + } catch ( IllegalStateException e ) { 
 + return ; 
 + } 
 + 
 + fail ( " It should not be possible to advanceRead on a transaction which SharedGroup is closed " ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 3b01d6a . . bfd888d 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 99 , 7 + 99 , 7 @ @ public class Realm implements Closeable { 
 } 
 } ; 
 private static final int REALM _ CHANGED = 14930352 ; / / Just a nice big Fibonacci number . For no reason : ) 
 - private static final Map < Handler , Integer > handlers = new ConcurrentHashMap < Handler , Integer > ( ) ; 
 + protected static final Map < Handler , Integer > handlers = new ConcurrentHashMap < Handler , Integer > ( ) ; 
 private static final String APT _ NOT _ EXECUTED _ MESSAGE = " Annotation processor may not have been executed . " ; 
 private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they where created . " ; 
 private static final String CLOSED _ REALM = " This Realm instance has already been closed , making it unusable . " ; 
 @ @ - 173 , 6 + 173 , 10 @ @ public class Realm implements Closeable { 
 } 
 localRefCount . put ( id , references - 1 ) ; 
 referenceCount . set ( localRefCount ) ; 
 + 
 + if ( handler ! = null ) { 
 + handlers . remove ( handler ) ; 
 + } 
 } 
 
 private class RealmCallback implements Handler . Callback { 
 diff - - git a / realm / src / main / java / io / realm / internal / Group . java b / realm / src / main / java / io / realm / internal / Group . java 
 index c5a7194 . . 38ce9f2 100644 
 - - - a / realm / src / main / java / io / realm / internal / Group . java 
 + + + b / realm / src / main / java / io / realm / internal / Group . java 
 @ @ - 135 , 7 + 135 , 16 @ @ public class Group implements Closeable { 
 } 
 
 protected static native void nativeClose ( long nativeGroupPtr ) ; 
 - 
 + 
 + / * * 
 + * Checks if a groups has been closed and can no longer be used . 
 + * 
 + * @ return True if closed , false otherwise . 
 + * / 
 + public boolean isClosed ( ) { 
 + return nativePtr = = 0 ; 
 + } 
 + 
 protected void finalize ( ) { 
 synchronized ( context ) { 
 if ( nativePtr ! = 0 ) { 
 diff - - git a / realm / src / main / java / io / realm / internal / ImplicitTransaction . java b / realm / src / main / java / io / realm / internal / ImplicitTransaction . java 
 index d436743 . . 90f223d 100644 
 - - - a / realm / src / main / java / io / realm / internal / ImplicitTransaction . java 
 + + + b / realm / src / main / java / io / realm / internal / ImplicitTransaction . java 
 @ @ - 26 , 10 + 26 , 12 @ @ public class ImplicitTransaction extends Group { 
 } 
 
 public void advanceRead ( ) { 
 + assertNotClosed ( ) ; 
 parent . advanceRead ( ) ; 
 } 
 
 public void promoteToWrite ( ) { 
 + assertNotClosed ( ) ; 
 if ( immutable ) { 
 immutable = false ; 
 parent . promoteToWrite ( ) ; 
 @ @ - 39 , 15 + 41 , 18 @ @ public class ImplicitTransaction extends Group { 
 } 
 
 public void commitAndContinueAsRead ( ) { 
 + assertNotClosed ( ) ; 
 parent . commitAndContinueAsRead ( ) ; 
 immutable = true ; 
 } 
 
 public void endRead ( ) { 
 + assertNotClosed ( ) ; 
 parent . endRead ( ) ; 
 } 
 
 public void rollbackAndContinueAsRead ( ) { 
 + assertNotClosed ( ) ; 
 if ( ! immutable ) { 
 parent . rollbackAndContinueAsRead ( ) ; 
 immutable = true ; 
 @ @ - 56 , 6 + 61 , 11 @ @ public class ImplicitTransaction extends Group { 
 } 
 } 
 
 - protected void finalize ( ) { } / / Nullify the actions of Group . finalize ( ) 
 + private void assertNotClosed ( ) { 
 + if ( isClosed ( ) | | parent . isClosed ( ) ) { 
 + throw new IllegalStateException ( " Cannot use ImplicitTransaction after it or its parent has been closed . " ) ; 
 + } 
 + } 
 
 + protected void finalize ( ) { } / / Nullify the actions of Group . finalize ( ) 
 } 
 diff - - git a / realm / src / main / java / io / realm / internal / SharedGroup . java b / realm / src / main / java / io / realm / internal / SharedGroup . java 
 index 9001f54 . . fe0f767 100644 
 - - - a / realm / src / main / java / io / realm / internal / SharedGroup . java 
 + + + b / realm / src / main / java / io / realm / internal / SharedGroup . java 
 @ @ - 206 , 7 + 206 , 7 @ @ public class SharedGroup implements Closeable { 
 } 
 
 
 - private boolean isClosed ( ) { 
 + public boolean isClosed ( ) { 
 return nativePtr = = 0 ; 
 } 

