BLEU SCORE: 0.014199193612838947

TEST MSG: Explicitly specify Locale for String . format ( ) instead of implicit current Locale
GENERATED MSG: Remove generic parameter from RealmObject

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> index 27dc64e . . f69c1ad 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> @ @ - 16 , 6 + 16 , 8 @ @ <nl> <nl> package io . realm ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> import io . realm . exceptions . RealmException ; <nl> import io . realm . exceptions . RealmFileException ; <nl> import io . realm . internal . CheckedRow ; <nl> @ @ - 105 , 7 + 107 , 8 @ @ public class DynamicRealm extends BaseRealm { <nl> Table table = schema . getTable ( className ) ; <nl> / / Check and throw the exception earlier for a better exception message . <nl> if ( table . hasPrimaryKey ( ) ) { <nl> - throw new RealmException ( String . format ( " ' % s ' has a primary key , use " + <nl> + throw new RealmException ( String . format ( Locale . US , <nl> + " ' % s ' has a primary key , use " + <nl> " ' createObject ( String , Object ) ' instead . " , className ) ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> index e3b2634 . . edc6f6a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> @ @ - 454 , 7 + 454 , 8 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy <nl> value = JsonUtils . stringToDate ( strValue ) ; <nl> break ; <nl> default : <nl> - throw new IllegalArgumentException ( String . format ( " Field % s is not a String field , " + <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + " Field % s is not a String field , " + <nl> " and the provide value could not be automatically converted : % s . Use a typed " + <nl> " setter instead " , fieldName , value ) ) ; <nl> } <nl> @ @ - 679 , 7 + 680 , 8 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy <nl> Table table = proxyState . getRow $ realm ( ) . getTable ( ) . getLinkTarget ( columnIndex ) ; <nl> Table inputTable = value . proxyState . getRow $ realm ( ) . getTable ( ) ; <nl> if ( ! table . hasSameSchema ( inputTable ) ) { <nl> - throw new IllegalArgumentException ( String . format ( " Type of object is wrong . Was % s , expected % s " , <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + " Type of object is wrong . Was % s , expected % s " , <nl> inputTable . getName ( ) , table . getName ( ) ) ) ; <nl> } <nl> proxyState . getRow $ realm ( ) . setLink ( columnIndex , value . proxyState . getRow $ realm ( ) . getIndex ( ) ) ; <nl> @ @ - 716 , 7 + 718 , 7 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy <nl> String listType = list . className ! = null ? list . className <nl> : proxyState . getRealm $ realm ( ) . getSchema ( ) . getTable ( list . clazz ) . getClassName ( ) ; <nl> if ( ! linkTargetTableName . equals ( listType ) ) { <nl> - throw new IllegalArgumentException ( String . format ( Locale . ENGLISH , <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> " The elements in the list are not the proper type . " + <nl> " Was % s expected % s . " , listType , linkTargetTableName ) ) ; <nl> } <nl> @ @ - 732 , 7 + 734 , 7 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy <nl> throw new IllegalArgumentException ( " Each element in ' list ' must belong to the same Realm instance . " ) ; <nl> } <nl> if ( ! typeValidated & & ! linkTargetTable . hasSameSchema ( obj . realmGet $ proxyState ( ) . getRow $ realm ( ) . getTable ( ) ) ) { <nl> - throw new IllegalArgumentException ( String . format ( Locale . ENGLISH , <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> " Element at index % d is not the proper type . " + <nl> " Was ' % s ' expected ' % s ' . " , <nl> i , <nl> @ @ - 803 , 7 + 805 , 8 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy <nl> if ( columnType = = RealmFieldType . INTEGER | | columnType = = RealmFieldType . OBJECT ) { <nl> columnTypeIndefiniteVowel = " n " ; <nl> } <nl> - throw new IllegalArgumentException ( String . format ( " ' % s ' is not a % s ' % s ' , but a % s ' % s ' . " , <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + " ' % s ' is not a % s ' % s ' , but a % s ' % s ' . " , <nl> fieldName , expectedIndefiniteVowel , expectedType , columnTypeIndefiniteVowel , columnType ) ) ; <nl> } <nl> } <nl> @ @ - 910 , 7 + 913 , 7 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy <nl> break ; <nl> case LIST : <nl> String targetClassName = proxyState . getRow $ realm ( ) . getTable ( ) . getLinkTarget ( columnIndex ) . getClassName ( ) ; <nl> - sb . append ( String . format ( " RealmList < % s > [ % s ] " , targetClassName , proxyState . getRow $ realm ( ) . getLinkList ( columnIndex ) . size ( ) ) ) ; <nl> + sb . append ( String . format ( Locale . US , " RealmList < % s > [ % s ] " , targetClassName , proxyState . getRow $ realm ( ) . getLinkList ( columnIndex ) . size ( ) ) ) ; <nl> break ; <nl> case UNSUPPORTED _ TABLE : <nl> case UNSUPPORTED _ MIXED : <nl> @ @ - 960 , 7 + 963 , 7 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy <nl> <nl> final RealmFieldType fieldType = realmObjectSchema . getFieldType ( srcFieldName ) ; / / throws IAE if not found <nl> if ( fieldType ! = RealmFieldType . OBJECT & & fieldType ! = RealmFieldType . LIST ) { <nl> - throw new IllegalArgumentException ( String . format ( Locale . ENGLISH , <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> " Unexpected field type : % 1 $ s . Field type should be either % 2 $ s . % 3 $ s or % 2 $ s . % 4 $ s . " , <nl> fieldType . name ( ) , <nl> RealmFieldType . class . getSimpleName ( ) , <nl> @ @ - 984 , 7 + 987 , 7 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy <nl> private void checkIsPrimaryKey ( String fieldName ) { <nl> RealmObjectSchema objectSchema = proxyState . getRealm $ realm ( ) . getSchema ( ) . getSchemaForClass ( getType ( ) ) ; <nl> if ( objectSchema . hasPrimaryKey ( ) & & objectSchema . getPrimaryKey ( ) . equals ( fieldName ) ) { <nl> - throw new IllegalArgumentException ( String . format ( <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> " Primary key field ' % s ' cannot be changed after object was created . " , fieldName ) ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionImpl . java b / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionImpl . java <nl> index 194aa13 . . b8725ec 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionImpl . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionImpl . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import java . util . ConcurrentModificationException ; <nl> import java . util . Date ; <nl> import java . util . Iterator ; <nl> import java . util . ListIterator ; <nl> + import java . util . Locale ; <nl> <nl> import io . realm . internal . Collection ; <nl> import io . realm . internal . InvalidRow ; <nl> @ @ - 246 , 7 + 247 , 7 @ @ abstract class OrderedRealmCollectionImpl < E extends RealmModel > <nl> } <nl> long columnIndex = collection . getTable ( ) . getColumnIndex ( fieldName ) ; <nl> if ( columnIndex < 0 ) { <nl> - throw new IllegalArgumentException ( String . format ( " Field ' % s ' does not exist . " , fieldName ) ) ; <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , " Field ' % s ' does not exist . " , fieldName ) ) ; <nl> } <nl> return columnIndex ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionSnapshot . java b / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionSnapshot . java <nl> index 4912423 . . 6a29896 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionSnapshot . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionSnapshot . java <nl> @ @ - 16 , 6 + 16 , 8 @ @ <nl> <nl> package io . realm ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> import io . realm . internal . Collection ; <nl> import io . realm . internal . UncheckedRow ; <nl> <nl> @ @ - 128 , 7 + 130 , 7 @ @ public class OrderedRealmCollectionSnapshot < E extends RealmModel > extends Ordere <nl> <nl> private UnsupportedOperationException getUnsupportedException ( String methodName ) { <nl> return new UnsupportedOperationException ( <nl> - String . format ( " ' % s ( ) ' is not supported by OrderedRealmCollectionSnapshot . " + <nl> + String . format ( Locale . US , " ' % s ( ) ' is not supported by OrderedRealmCollectionSnapshot . " + <nl> " Call ' % s ( ) ' on the original ' RealmCollection ' instead . " , methodName , methodName ) ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index babed1e . . 263bfe9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . Scanner ; <nl> import java . util . Set ; <nl> @ @ - 407 , 12 + 408 , 12 @ @ public class Realm extends BaseRealm { <nl> realm . doClose ( ) ; <nl> throw new RealmMigrationNeededException ( <nl> configuration . getPath ( ) , <nl> - String . format ( " Realm on disk need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; <nl> + String . format ( Locale . US , " Realm on disk need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; <nl> } <nl> if ( requiredVersion < currentVersion ) { <nl> realm . doClose ( ) ; <nl> throw new IllegalArgumentException ( <nl> - String . format ( " Realm on disk is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; <nl> + String . format ( Locale . US , " Realm on disk is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 998 , 7 + 999 , 7 @ @ public class Realm extends BaseRealm { <nl> Table table = schema . getTable ( clazz ) ; <nl> / / Checks and throws the exception earlier for a better exception message . <nl> if ( table . hasPrimaryKey ( ) ) { <nl> - throw new RealmException ( String . format ( " ' % s ' has a primary key , use " + <nl> + throw new RealmException ( String . format ( Locale . US , " ' % s ' has a primary key , use " + <nl> " ' createObject ( Class < E > , Object ) ' instead . " , table . getClassName ( ) ) ) ; <nl> } <nl> return configuration . getSchemaMediator ( ) . newInstance ( clazz , this , <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 55a3f7c . . cafcd4a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . lang . reflect . InvocationTargetException ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . HashSet ; <nl> + import java . util . Locale ; <nl> import java . util . Set ; <nl> <nl> import io . realm . annotations . RealmModule ; <nl> @ @ - 322 , 7 + 323 , 7 @ @ public class RealmConfiguration { <nl> private static RealmProxyMediator getModuleMediator ( String fullyQualifiedModuleClassName ) { <nl> String [ ] moduleNameParts = fullyQualifiedModuleClassName . split ( " \ \ . " ) ; <nl> String moduleSimpleName = moduleNameParts [ moduleNameParts . length - 1 ] ; <nl> - String mediatorName = String . format ( " io . realm . % s % s " , moduleSimpleName , " Mediator " ) ; <nl> + String mediatorName = String . format ( Locale . US , " io . realm . % s % s " , moduleSimpleName , " Mediator " ) ; <nl> Class < ? > clazz ; <nl> / / noinspection TryWithIdenticalCatches <nl> try { <nl> @ @ - 500 , 7 + 501 , 8 @ @ public class RealmConfiguration { <nl> throw new IllegalArgumentException ( " A non - null key must be provided " ) ; <nl> } <nl> if ( key . length ! = KEY _ LENGTH ) { <nl> - throw new IllegalArgumentException ( String . format ( " The provided key must be % s bytes . Yours was : % s " , <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + " The provided key must be % s bytes . Yours was : % s " , <nl> KEY _ LENGTH , key . length ) ) ; <nl> } <nl> this . key = Arrays . copyOf ( key , key . length ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmList . java b / realm / realm - library / src / main / java / io / realm / RealmList . java <nl> index 4380fee . . 12903d0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmList . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . Date ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . ListIterator ; <nl> + import java . util . Locale ; <nl> import java . util . NoSuchElementException ; <nl> <nl> import io . realm . internal . InvalidRow ; <nl> @ @ - 254 , 7 + 255 , 8 @ @ public class RealmList < E extends RealmModel > extends AbstractList < E > implements <nl> return object ; <nl> } else { <nl> / / Different target table <nl> - throw new IllegalArgumentException ( String . format ( " The object has a different type from list ' s . " + <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + " The object has a different type from list ' s . " + <nl> " Type of the list is ' % s ' , type of object is ' % s ' . " , listClassName , objectClassName ) ) ; <nl> } <nl> } else if ( realm . threadId = = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) . threadId ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmMigration . java b / realm / realm - library / src / main / java / io / realm / RealmMigration . java <nl> index 5140a3b . . 44e98f3 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmMigration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmMigration . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ package io . realm ; <nl> * } <nl> * <nl> * if ( oldVersion < newVersion ) { <nl> - * throw new IllegalStateException ( String . format ( " Migration missing from v % d to v % d " , oldVersion , newVersion ) ) ; <nl> + * throw new IllegalStateException ( String . format ( Locale . US , " Migration missing from v % d to v % d " , oldVersion , newVersion ) ) ; <nl> * } <nl> * } <nl> * } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index f0c45e5 . . 49b4e77 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package io . realm ; <nl> <nl> import java . util . Collections ; <nl> import java . util . Date ; <nl> + import java . util . Locale ; <nl> <nl> import io . realm . annotations . Required ; <nl> import io . realm . internal . Collection ; <nl> @ @ - 1600 , 7 + 1601 , 8 @ @ public class RealmQuery < E extends RealmModel > { <nl> case DOUBLE : <nl> return query . sumDouble ( columnIndex ) ; <nl> default : <nl> - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 1626 , 7 + 1628 , 8 @ @ public class RealmQuery < E extends RealmModel > { <nl> case FLOAT : <nl> return query . averageFloat ( columnIndex ) ; <nl> default : <nl> - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 1651 , 7 + 1654 , 8 @ @ public class RealmQuery < E extends RealmModel > { <nl> case DOUBLE : <nl> return this . query . minimumDouble ( columnIndex ) ; <nl> default : <nl> - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 1692 , 7 + 1696 , 8 @ @ public class RealmQuery < E extends RealmModel > { <nl> case DOUBLE : <nl> return this . query . maximumDouble ( columnIndex ) ; <nl> default : <nl> - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / StandardRealmObjectSchema . java b / realm / realm - library / src / main / java / io / realm / StandardRealmObjectSchema . java <nl> index e09cc80 . . e22f773 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / StandardRealmObjectSchema . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / StandardRealmObjectSchema . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ import java . util . Collections ; <nl> import java . util . Date ; <nl> import java . util . HashMap ; <nl> import java . util . LinkedHashSet ; <nl> + import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> @ @ - 176 , 7 + 177 , 8 @ @ class StandardRealmObjectSchema extends RealmObjectSchema { <nl> if ( SUPPORTED _ LINKED _ FIELDS . containsKey ( fieldType ) ) { <nl> throw new IllegalArgumentException ( " Use addRealmObjectField ( ) instead to add fields that link to other RealmObjects : " + fieldName ) ; <nl> } else { <nl> - throw new IllegalArgumentException ( String . format ( " Realm doesn ' t support this field type : % s ( % s ) " , <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + " Realm doesn ' t support this field type : % s ( % s ) " , <nl> fieldName , fieldType ) ) ; <nl> } <nl> } <nl> @ @ - 678 , 7 + 680 , 8 @ @ class StandardRealmObjectSchema extends RealmObjectSchema { <nl> long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> if ( columnIndex = = - 1 ) { <nl> throw new IllegalArgumentException ( <nl> - String . format ( " Field name ' % s ' does not exist on schema for ' % s ' " , <nl> + String . format ( Locale . US , <nl> + " Field name ' % s ' does not exist on schema for ' % s ' " , <nl> fieldName , getClassName ( ) <nl> ) ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java b / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java <nl> index bad9719 . . 07e6b86 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java <nl> @ @ - 15 , 6 + 15 , 8 @ @ <nl> * / <nl> package io . realm . exceptions ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> import io . realm . internal . Keep ; <nl> import io . realm . internal . SharedRealm ; <nl> <nl> @ @ - 118 , 6 + 120 , 6 @ @ public class RealmFileException extends RuntimeException { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - return String . format ( " % s Kind : % s . " , super . toString ( ) , kind ) ; <nl> + return String . format ( Locale . US , " % s Kind : % s . " , super . toString ( ) , kind ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> index 273d3ef . . 3936d36 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package io . realm . internal ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . HashSet ; <nl> + import java . util . Locale ; <nl> import java . util . Set ; <nl> <nl> import io . realm . RealmFieldType ; <nl> @ @ - 103 , 7 + 104 , 7 @ @ public class SortDescriptor { <nl> / / could do this in the field descriptor , but this provides a better error message <nl> private static void checkFieldType ( FieldDescriptor descriptor , Set < RealmFieldType > legalTerminalTypes , String message , String fieldDescriptions ) { <nl> if ( ! legalTerminalTypes . contains ( descriptor . getFinalColumnType ( ) ) ) { <nl> - throw new IllegalArgumentException ( String . format ( <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> " % s on ' % s ' field ' % s ' in ' % s ' . " , message , descriptor . getFinalColumnType ( ) , descriptor . getFinalColumnName ( ) , fieldDescriptions ) ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / fields / CachedFieldDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / fields / CachedFieldDescriptor . java <nl> index a5b7f6c . . d919d1e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / fields / CachedFieldDescriptor . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / fields / CachedFieldDescriptor . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ package io . realm . internal . fields ; <nl> * / <nl> <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . Set ; <nl> <nl> import io . realm . RealmFieldType ; <nl> @ @ - 69 , 13 + 70 , 13 @ @ class CachedFieldDescriptor extends FieldDescriptor { <nl> tableInfo = schema . getColumnInfo ( currentTable ) ; <nl> if ( tableInfo = = null ) { <nl> throw new IllegalArgumentException ( <nl> - String . format ( " Invalid query : table ' % s ' not found in this schema . " , currentTable ) ) ; <nl> + String . format ( Locale . US , " Invalid query : table ' % s ' not found in this schema . " , currentTable ) ) ; <nl> } <nl> <nl> columnIndex = tableInfo . getColumnIndex ( columnName ) ; <nl> if ( columnIndex < 0 ) { <nl> throw new IllegalArgumentException ( <nl> - String . format ( " Invalid query : field ' % s ' not found in table ' % s ' . " , columnName , currentTable ) ) ; <nl> + String . format ( Locale . US , " Invalid query : field ' % s ' not found in table ' % s ' . " , columnName , currentTable ) ) ; <nl> } <nl> <nl> columnType = tableInfo . getColumnType ( columnName ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / fields / DynamicFieldDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / fields / DynamicFieldDescriptor . java <nl> index 55995f9 . . 80dc911 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / fields / DynamicFieldDescriptor . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / fields / DynamicFieldDescriptor . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ package io . realm . internal . fields ; <nl> * / <nl> <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . Set ; <nl> <nl> import io . realm . RealmFieldType ; <nl> @ @ - 64 , 7 + 65 , 7 @ @ class DynamicFieldDescriptor extends FieldDescriptor { <nl> columnIndex = currentTable . getColumnIndex ( columnName ) ; <nl> if ( columnIndex < 0 ) { <nl> throw new IllegalArgumentException ( <nl> - String . format ( " Invalid query : field ' % s ' not found in table ' % s ' . " , columnName , tableName ) ) ; <nl> + String . format ( Locale . US , " Invalid query : field ' % s ' not found in table ' % s ' . " , columnName , tableName ) ) ; <nl> } <nl> <nl> columnType = currentTable . getColumnType ( columnIndex ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / fields / FieldDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / fields / FieldDescriptor . java <nl> index 6a17af9 . . 4ed1bca 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / fields / FieldDescriptor . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / fields / FieldDescriptor . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . Set ; <nl> <nl> import io . realm . RealmFieldType ; <nl> @ @ - 273 , 7 + 274 , 7 @ @ public abstract class FieldDescriptor { <nl> <nl> private void verifyColumnType ( String tableName , String columnName , RealmFieldType columnType , Set < RealmFieldType > validTypes ) { <nl> if ( ! validTypes . contains ( columnType ) ) { <nl> - throw new IllegalArgumentException ( String . format ( <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> " Invalid query : field ' % s ' in table ' % s ' is of invalid type ' % s ' . " , <nl> columnName , tableName , columnType . toString ( ) ) ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / log / RealmLog . java b / realm / realm - library / src / main / java / io / realm / log / RealmLog . java <nl> index 80bde88 . . f6f33ca 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / log / RealmLog . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / log / RealmLog . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ package io . realm . log ; <nl> <nl> import android . util . Log ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> <nl> / * * <nl> * Global logger used by all Realm components . <nl> @ @ - 275 , 7 + 277 , 7 @ @ public final class RealmLog { <nl> <nl> StringBuilder stringBuilder = new StringBuilder ( ) ; <nl> if ( args ! = null & & args . length > 0 ) { <nl> - message = String . format ( message , args ) ; <nl> + message = String . format ( Locale . US , message , args ) ; <nl> } <nl> if ( throwable ! = null ) { <nl> stringBuilder . append ( Log . getStackTraceString ( throwable ) ) ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> index 29e7fae . . 401a01f 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import android . content . pm . PackageInfo ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . util . Locale ; <nl> <nl> import io . realm . internal . Keep ; <nl> <nl> @ @ - 50 , 10 + 51 , 12 @ @ class ObjectServer { <nl> File dir = File . createTempFile ( " remote _ sync _ " , " _ " + android . os . Process . myPid ( ) , <nl> context . getFilesDir ( ) ) ; <nl> if ( ! dir . delete ( ) ) { <nl> - throw new IllegalStateException ( String . format ( " Temp file ' % s ' cannot be deleted . " , dir . getPath ( ) ) ) ; <nl> + throw new IllegalStateException ( String . format ( Locale . US , <nl> + " Temp file ' % s ' cannot be deleted . " , dir . getPath ( ) ) ) ; <nl> } <nl> if ( ! dir . mkdir ( ) ) { <nl> - throw new IllegalStateException ( String . format ( " Directory ' % s ' for SyncManager cannot be created . " , <nl> + throw new IllegalStateException ( String . format ( Locale . US , <nl> + " Directory ' % s ' for SyncManager cannot be created . " , <nl> dir . getPath ( ) ) ) ; <nl> } <nl> SyncManager . nativeInitializeSyncManager ( dir . getPath ( ) ) ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> index 4724b9c . . 234a3ec 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . security . NoSuchAlgorithmException ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . HashSet ; <nl> + import java . util . Locale ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> @ @ - 511 , 7 + 512 , 8 @ @ public class SyncConfiguration extends RealmConfiguration { <nl> throw new IllegalArgumentException ( " A non - null key must be provided " ) ; <nl> } <nl> if ( key . length ! = KEY _ LENGTH ) { <nl> - throw new IllegalArgumentException ( String . format ( " The provided key must be % s bytes . Yours was : % s " , <nl> + throw new IllegalArgumentException ( String . format ( Locale . US , <nl> + " The provided key must be % s bytes . Yours was : % s " , <nl> KEY _ LENGTH , key . length ) ) ; <nl> } <nl> this . key = Arrays . copyOf ( key , key . length ) ; <nl> @ @ - 720 , 7 + 722 , 7 @ @ public class SyncConfiguration extends RealmConfiguration { <nl> byte [ ] buf = digest . digest ( in . getBytes ( " UTF - 8 " ) ) ; <nl> StringBuilder builder = new StringBuilder ( ) ; <nl> for ( byte b : buf ) { <nl> - builder . append ( String . format ( " % 02X " , b ) ) ; <nl> + builder . append ( String . format ( Locale . US , " % 02X " , b ) ) ; <nl> } <nl> return builder . toString ( ) ; <nl> } catch ( NoSuchAlgorithmException e ) { <nl> @ @ - 799 , 14 + 801 , 16 @ @ public class SyncConfiguration extends RealmConfiguration { <nl> realmFileDirectory = new File ( rootDir , user . getIdentity ( ) ) ; <nl> fullPathName = realmFileDirectory . getAbsolutePath ( ) + File . pathSeparator + realmFileName ; <nl> if ( fullPathName . length ( ) > MAX _ FULL _ PATH _ LENGTH ) { / / we are out of ideas <nl> - throw new IllegalStateException ( String . format ( " Full path name must not exceed % d characters : % s " , <nl> + throw new IllegalStateException ( String . format ( Locale . US , <nl> + " Full path name must not exceed % d characters : % s " , <nl> MAX _ FULL _ PATH _ LENGTH , fullPathName ) ) ; <nl> } <nl> } <nl> } <nl> <nl> if ( realmFileName . length ( ) > MAX _ FILE _ NAME _ LENGTH ) { <nl> - throw new IllegalStateException ( String . format ( " File name exceed % d characters : % d " , MAX _ FILE _ NAME _ LENGTH , <nl> + throw new IllegalStateException ( String . format ( Locale . US , <nl> + " File name exceed % d characters : % d " , MAX _ FILE _ NAME _ LENGTH , <nl> realmFileName . length ( ) ) ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> index 8e070e1 . . e99a35d 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ <nl> <nl> package io . realm ; <nl> <nl> + import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . concurrent . ArrayBlockingQueue ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> @ @ - 81 , 7 + 82 , 7 @ @ public class SyncManager { <nl> return ; <nl> } <nl> <nl> - String errorMsg = String . format ( " Session Error [ % s ] : % s " , <nl> + String errorMsg = String . format ( Locale . US , " Session Error [ % s ] : % s " , <nl> session . getConfiguration ( ) . getServerUrl ( ) , <nl> error . toString ( ) ) ; <nl> switch ( error . getErrorCode ( ) . getCategory ( ) ) { <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncSession . java b / realm / realm - library / src / objectServer / java / io / realm / SyncSession . java <nl> index 846f79f . . 2a0438f 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncSession . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncSession . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ import java . net . URI ; <nl> import java . util . HashMap ; <nl> import java . util . IdentityHashMap ; <nl> import java . util . Iterator ; <nl> + import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . Future ; <nl> @ @ - 635 , 7 + 636 , 8 @ @ public class SyncSession { <nl> * / <nl> public void throwExceptionIfNeeded ( ) { <nl> if ( resultReceived & & errorCode ! = null ) { <nl> - throw new ObjectServerError ( ErrorCode . UNKNOWN , String . format ( " Internal error ( % d ) : % s " , errorCode , errorMessage ) ) ; <nl> + throw new ObjectServerError ( ErrorCode . UNKNOWN , <nl> + String . format ( Locale . US , " Internal error ( % d ) : % s " , errorCode , errorMessage ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> index 245a287 . . 94ea8c6 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . net . URL ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> + import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . ThreadPoolExecutor ; <nl> @ @ - 75 , 7 + 76 , 8 @ @ public class SyncUser { <nl> if ( error . getErrorCode ( ) = = ErrorCode . CLIENT _ RESET ) { <nl> RealmLog . error ( " Client Reset required for user ' s management Realm : " + user . toString ( ) ) ; <nl> } else { <nl> - RealmLog . error ( String . format ( " Unexpected error with % s ' s management Realm : % s " , <nl> + RealmLog . error ( String . format ( Locale . US , <nl> + " Unexpected error with % s ' s management Realm : % s " , <nl> user . getIdentity ( ) , <nl> error . toString ( ) ) ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> index 1fdaa9f . . cf9c8d8 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ import org . json . JSONException ; <nl> import org . json . JSONObject ; <nl> <nl> import java . io . IOException ; <nl> + import java . util . Locale ; <nl> <nl> import io . realm . ErrorCode ; <nl> import io . realm . ObjectServerError ; <nl> @ @ - 132 , 14 + 133 , 14 @ @ public class AuthenticateResponse extends AuthServerResponse { <nl> if ( accessToken = = null ) { <nl> message = " accessToken = null " ; <nl> } else { <nl> - message = String . format ( " Identity % s ; Path % s " , accessToken . identity ( ) , accessToken . path ( ) ) ; <nl> + message = String . format ( Locale . US , " Identity % s ; Path % s " , accessToken . identity ( ) , accessToken . path ( ) ) ; <nl> } <nl> } catch ( JSONException ex ) { <nl> accessToken = null ; <nl> refreshToken = null ; <nl> / / noinspection ThrowableInstanceNeverThrown <nl> error = new ObjectServerError ( ErrorCode . JSON _ EXCEPTION , ex ) ; <nl> - message = String . format ( " Error % s " , error . getErrorMessage ( ) ) ; <nl> + message = String . format ( Locale . US , " Error % s " , error . getErrorMessage ( ) ) ; <nl> } <nl> RealmLog . debug ( " AuthenticateResponse . " + message ) ; <nl> setError ( error ) ;
NEAREST DIFF (one line): diff - - git a / examples / rxJavaExample / README . md b / examples / rxJavaExample / README . md <nl> index 3f33bfa . . ea203c2 100644 <nl> - - - a / examples / rxJavaExample / README . md <nl> + + + b / examples / rxJavaExample / README . md <nl> @ @ - 5 , 13 + 5 , 17 @ @ <nl> - Observables might have a default Scheduler they operate on that is <nl> different than the one the RealmObject was created on . <nl> <nl> - - RealmObjects auto - update . Observables that operate on multiple " versions " <nl> + - RealmObjects are live objects that automatically staty up to date . Observables that operate on multiple " versions " <nl> will most likely not work as expected . <nl> <nl> - Retrofit automatically offload to a worker thread . <nl> <nl> - Use Realm async API instead of subscribeOn to offload Realm work . <nl> <nl> + - You can use Realm . copyFromRealm to make a copy of Realm data <nl> + <nl> + <nl> + <nl> <nl> # # Resources ( TODO ) <nl> - http : / / www . grahamlea . com / 2014 / 07 / rxjava - threading - examples / <nl> \ No newline at end of file <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> index 12a0c4a . . ff099ad 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ public class RxJavaTests extends AndroidTestCase { <nl> realm . commitTransaction ( ) ; <nl> <nl> final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> @ Override <nl> public void call ( AllTypes rxObject ) { <nl> assertTrue ( rxObject = = obj ) ; <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class RxJavaTests extends AndroidTestCase { <nl> final AllTypes obj = realm . createObject ( AllTypes . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> @ Override <nl> public void call ( AllTypes rxObject ) { <nl> subscriberCalled . addAndGet ( 1 ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index a3e5103 . . 4e420ec 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 25 , 15 + 25 , 12 @ @ import java . lang . ref . ReferenceQueue ; <nl> import java . lang . ref . WeakReference ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> - import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> - import java . util . Set ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> - import java . util . concurrent . CopyOnWriteArraySet ; <nl> <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> import io . realm . internal . SharedGroupManager ; <nl> @ @ - 44 , 7 + 41 , 6 @ @ import io . realm . internal . android . DebugAndroidLogger ; <nl> import io . realm . internal . android . ReleaseAndroidLogger ; <nl> import io . realm . internal . async . RealmThreadPoolExecutor ; <nl> import io . realm . internal . log . RealmLog ; <nl> - import io . realm . rx . RxObservableFactory ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 53 , 7 + 49 , 7 @ @ import rx . Observable ; <nl> * @ see io . realm . Realm <nl> * @ see io . realm . DynamicRealm <nl> * / <nl> - public abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> + public abstract class BaseRealm < T extends BaseRealm < T > > implements Closeable { <nl> protected static final long UNVERSIONED = - 1 ; <nl> private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; <nl> private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; <nl> @ @ - 203 , 8 + 199 , 8 @ @ public abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public Observable < E > observable ( ) { <nl> - return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; <nl> + public Observable < T > observable ( ) { <nl> + return ( Observable < T > ) configuration . getRxFactory ( ) . from ( this ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> index f979667 . . 627ac4a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ import io . realm . internal . TableView ; <nl> * @ see Realm <nl> * @ see RealmSchema <nl> * / <nl> - public final class DynamicRealm extends BaseRealm { <nl> + public final class DynamicRealm extends BaseRealm < DynamicRealm > { <nl> <nl> private DynamicRealm ( RealmConfiguration configuration , boolean autoRefresh ) { <nl> super ( configuration , autoRefresh ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> index 40ad05a . . 318e9e9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ import io . realm . internal . android . JsonUtils ; <nl> * Class that wraps a normal RealmObject in order to allow dynamic access instead of a typed interface . <nl> * Using a DynamicRealmObject is slower than using the regular RealmObject class . <nl> * / <nl> - public final class DynamicRealmObject extends RealmObject < DynamicRealmObject > { <nl> + public final class DynamicRealmObject extends RealmObject { <nl> <nl> / * * <nl> * Creates a dynamic Realm object based on an existing object . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> index 5283cb5 . . 24824b6 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ class RealmCache { <nl> * @ param realmClass class of { @ link Realm } or { @ link DynamicRealm } to be created in or gotten from the cache . <nl> * @ return the { @ link Realm } or { @ link DynamicRealm } instance . <nl> * / <nl> - static synchronized < E extends BaseRealm > E createRealmOrGetFromCache ( RealmConfiguration configuration , <nl> + static synchronized < E extends BaseRealm < E > > E createRealmOrGetFromCache ( RealmConfiguration configuration , <nl> Class < E > realmClass ) { <nl> boolean isCacheInMap = true ; <nl> RealmCache cache = cachesMap . get ( configuration . getPath ( ) ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 3978bfc . . 34960d0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ import rx . Observable ; <nl> * / <nl> <nl> @ RealmClass <nl> - public abstract class RealmObject < E extends RealmObject > { <nl> + public abstract class RealmObject { <nl> <nl> protected Row row ; <nl> protected BaseRealm realm ; <nl> @ @ - 255 , 7 + 255 , 10 @ @ public abstract class RealmObject < E extends RealmObject > { <nl> * @ see < a href = " " > RxJava and Realm < / a > <nl> * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public Observable < E > observable ( ) { <nl> + public < E extends RealmObject > Observable < E > observable ( Class < E > type ) { <nl> + if ( ! this . getClass ( ) . isInstance ( type ) ) { <nl> + throw new IllegalArgumentException ( " This RealmObject cannot be cast to the desired type : " + type ) ; <nl> + } <nl> return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 89274ba . . fde3390 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1719 , 86 + 1719 , 16 @ @ public class RealmQuery < E extends RealmObject > { <nl> * @ return the object found or { @ code null } if no object matches the query conditions . <nl> * @ see io . realm . RealmObject <nl> * / <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public E findFirst ( ) { <nl> checkQueryIsNotReused ( ) ; <nl> long rowIndex = this . query . find ( ) ; <nl> if ( rowIndex > = 0 ) { <nl> - return ( E ) realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; <nl> + return realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; <nl> } else { <nl> return null ; <nl> } <nl> } <nl> <nl> - / / FIXME Replace with Schema when it is available <nl> - private static class DynamicColumnMap implements Map < String , Long > { <nl> - private final Table table ; <nl> - <nl> - public DynamicColumnMap ( Table table ) { <nl> - this . table = table ; <nl> - } <nl> - <nl> - @ Override <nl> - public Long get ( Object key ) { <nl> - return table . getColumnIndex ( ( String ) key ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void clear ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean containsKey ( Object key ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean containsValue ( Object value ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Set < Entry < String , Long > > entrySet ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isEmpty ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Set < String > keySet ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Long put ( String key , Long value ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void putAll ( Map < ? extends String , ? extends Long > map ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Long remove ( Object key ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int size ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Collection < Long > values ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Similar to { @ link # findFirst ( ) } but runs asynchronously on a worker thread <nl> * This method is only available from a Looper thread . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index db09759 . . 3629486 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 157 , 15 + 157 , 14 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> * @ throws IndexOutOfBoundsException if { @ code location < 0 | | location > = size ( ) } . <nl> * / <nl> @ Override <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public E get ( int location ) { <nl> E obj ; <nl> realm . checkIfValid ( ) ; <nl> TableOrView table = getTable ( ) ; <nl> if ( table instanceof TableView ) { <nl> - obj = ( E ) realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; <nl> + obj = realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; <nl> } else { <nl> - obj = ( E ) realm . get ( classSpec , className , location ) ; <nl> + obj = realm . get ( classSpec , className , location ) ; <nl> } <nl> <nl> return obj ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> index 718e705 . . 940f217 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ public final class RealmObservableFactory implements RxObservableFactory { <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> + public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> checkRxJavaAvailable ( ) ; <nl> return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> @ Override <nl> @ @ - 106 , 13 + 106 , 13 @ @ public final class RealmObservableFactory implements RxObservableFactory { <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> + public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> checkRxJavaAvailable ( ) ; <nl> throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject < E > > Observable < E > from ( final E object ) { <nl> + public < E extends RealmObject > Observable < E > from ( final E object ) { <nl> checkRxJavaAvailable ( ) ; <nl> return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> @ Override <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> index 0984f85 . . 14fd548 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ public interface RxObservableFactory { <nl> * @ param results RealmResults to listen to changes for . <nl> * @ param < E > Type of RealmObject <nl> * / <nl> - < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> + < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> <nl> / * * <nl> * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each <nl> @ @ - 41 , 7 + 41 , 7 @ @ public interface RxObservableFactory { <nl> * @ param list RealmObject to listen to changes for . <nl> * @ param < E > Type of RealmObject <nl> * / <nl> - < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> + < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> <nl> <nl> / * * <nl> @ @ - 53 , 5 + 53 , 5 @ @ public interface RxObservableFactory { <nl> * @ param object RealmObject to listen to changes for . <nl> * @ param < E > Type of RealmObject <nl> * / <nl> - < E extends RealmObject < E > > Observable < E > from ( E object ) ; <nl> + < E extends RealmObject > Observable < E > from ( E object ) ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 index 27dc64e . . f69c1ad 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 @ @ - 16 , 6 + 16 , 8 @ @ 
 
 package io . realm ; 
 
 + import java . util . Locale ; 
 + 
 import io . realm . exceptions . RealmException ; 
 import io . realm . exceptions . RealmFileException ; 
 import io . realm . internal . CheckedRow ; 
 @ @ - 105 , 7 + 107 , 8 @ @ public class DynamicRealm extends BaseRealm { 
 Table table = schema . getTable ( className ) ; 
 / / Check and throw the exception earlier for a better exception message . 
 if ( table . hasPrimaryKey ( ) ) { 
 - throw new RealmException ( String . format ( " ' % s ' has a primary key , use " + 
 + throw new RealmException ( String . format ( Locale . US , 
 + " ' % s ' has a primary key , use " + 
 " ' createObject ( String , Object ) ' instead . " , className ) ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 index e3b2634 . . edc6f6a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 @ @ - 454 , 7 + 454 , 8 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy 
 value = JsonUtils . stringToDate ( strValue ) ; 
 break ; 
 default : 
 - throw new IllegalArgumentException ( String . format ( " Field % s is not a String field , " + 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + " Field % s is not a String field , " + 
 " and the provide value could not be automatically converted : % s . Use a typed " + 
 " setter instead " , fieldName , value ) ) ; 
 } 
 @ @ - 679 , 7 + 680 , 8 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy 
 Table table = proxyState . getRow $ realm ( ) . getTable ( ) . getLinkTarget ( columnIndex ) ; 
 Table inputTable = value . proxyState . getRow $ realm ( ) . getTable ( ) ; 
 if ( ! table . hasSameSchema ( inputTable ) ) { 
 - throw new IllegalArgumentException ( String . format ( " Type of object is wrong . Was % s , expected % s " , 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + " Type of object is wrong . Was % s , expected % s " , 
 inputTable . getName ( ) , table . getName ( ) ) ) ; 
 } 
 proxyState . getRow $ realm ( ) . setLink ( columnIndex , value . proxyState . getRow $ realm ( ) . getIndex ( ) ) ; 
 @ @ - 716 , 7 + 718 , 7 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy 
 String listType = list . className ! = null ? list . className 
 : proxyState . getRealm $ realm ( ) . getSchema ( ) . getTable ( list . clazz ) . getClassName ( ) ; 
 if ( ! linkTargetTableName . equals ( listType ) ) { 
 - throw new IllegalArgumentException ( String . format ( Locale . ENGLISH , 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 " The elements in the list are not the proper type . " + 
 " Was % s expected % s . " , listType , linkTargetTableName ) ) ; 
 } 
 @ @ - 732 , 7 + 734 , 7 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy 
 throw new IllegalArgumentException ( " Each element in ' list ' must belong to the same Realm instance . " ) ; 
 } 
 if ( ! typeValidated & & ! linkTargetTable . hasSameSchema ( obj . realmGet $ proxyState ( ) . getRow $ realm ( ) . getTable ( ) ) ) { 
 - throw new IllegalArgumentException ( String . format ( Locale . ENGLISH , 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 " Element at index % d is not the proper type . " + 
 " Was ' % s ' expected ' % s ' . " , 
 i , 
 @ @ - 803 , 7 + 805 , 8 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy 
 if ( columnType = = RealmFieldType . INTEGER | | columnType = = RealmFieldType . OBJECT ) { 
 columnTypeIndefiniteVowel = " n " ; 
 } 
 - throw new IllegalArgumentException ( String . format ( " ' % s ' is not a % s ' % s ' , but a % s ' % s ' . " , 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + " ' % s ' is not a % s ' % s ' , but a % s ' % s ' . " , 
 fieldName , expectedIndefiniteVowel , expectedType , columnTypeIndefiniteVowel , columnType ) ) ; 
 } 
 } 
 @ @ - 910 , 7 + 913 , 7 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy 
 break ; 
 case LIST : 
 String targetClassName = proxyState . getRow $ realm ( ) . getTable ( ) . getLinkTarget ( columnIndex ) . getClassName ( ) ; 
 - sb . append ( String . format ( " RealmList < % s > [ % s ] " , targetClassName , proxyState . getRow $ realm ( ) . getLinkList ( columnIndex ) . size ( ) ) ) ; 
 + sb . append ( String . format ( Locale . US , " RealmList < % s > [ % s ] " , targetClassName , proxyState . getRow $ realm ( ) . getLinkList ( columnIndex ) . size ( ) ) ) ; 
 break ; 
 case UNSUPPORTED _ TABLE : 
 case UNSUPPORTED _ MIXED : 
 @ @ - 960 , 7 + 963 , 7 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy 
 
 final RealmFieldType fieldType = realmObjectSchema . getFieldType ( srcFieldName ) ; / / throws IAE if not found 
 if ( fieldType ! = RealmFieldType . OBJECT & & fieldType ! = RealmFieldType . LIST ) { 
 - throw new IllegalArgumentException ( String . format ( Locale . ENGLISH , 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 " Unexpected field type : % 1 $ s . Field type should be either % 2 $ s . % 3 $ s or % 2 $ s . % 4 $ s . " , 
 fieldType . name ( ) , 
 RealmFieldType . class . getSimpleName ( ) , 
 @ @ - 984 , 7 + 987 , 7 @ @ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy 
 private void checkIsPrimaryKey ( String fieldName ) { 
 RealmObjectSchema objectSchema = proxyState . getRealm $ realm ( ) . getSchema ( ) . getSchemaForClass ( getType ( ) ) ; 
 if ( objectSchema . hasPrimaryKey ( ) & & objectSchema . getPrimaryKey ( ) . equals ( fieldName ) ) { 
 - throw new IllegalArgumentException ( String . format ( 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 " Primary key field ' % s ' cannot be changed after object was created . " , fieldName ) ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionImpl . java b / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionImpl . java 
 index 194aa13 . . b8725ec 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionImpl . java 
 + + + b / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionImpl . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . util . ConcurrentModificationException ; 
 import java . util . Date ; 
 import java . util . Iterator ; 
 import java . util . ListIterator ; 
 + import java . util . Locale ; 
 
 import io . realm . internal . Collection ; 
 import io . realm . internal . InvalidRow ; 
 @ @ - 246 , 7 + 247 , 7 @ @ abstract class OrderedRealmCollectionImpl < E extends RealmModel > 
 } 
 long columnIndex = collection . getTable ( ) . getColumnIndex ( fieldName ) ; 
 if ( columnIndex < 0 ) { 
 - throw new IllegalArgumentException ( String . format ( " Field ' % s ' does not exist . " , fieldName ) ) ; 
 + throw new IllegalArgumentException ( String . format ( Locale . US , " Field ' % s ' does not exist . " , fieldName ) ) ; 
 } 
 return columnIndex ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionSnapshot . java b / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionSnapshot . java 
 index 4912423 . . 6a29896 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionSnapshot . java 
 + + + b / realm / realm - library / src / main / java / io / realm / OrderedRealmCollectionSnapshot . java 
 @ @ - 16 , 6 + 16 , 8 @ @ 
 
 package io . realm ; 
 
 + import java . util . Locale ; 
 + 
 import io . realm . internal . Collection ; 
 import io . realm . internal . UncheckedRow ; 
 
 @ @ - 128 , 7 + 130 , 7 @ @ public class OrderedRealmCollectionSnapshot < E extends RealmModel > extends Ordere 
 
 private UnsupportedOperationException getUnsupportedException ( String methodName ) { 
 return new UnsupportedOperationException ( 
 - String . format ( " ' % s ( ) ' is not supported by OrderedRealmCollectionSnapshot . " + 
 + String . format ( Locale . US , " ' % s ( ) ' is not supported by OrderedRealmCollectionSnapshot . " + 
 " Call ' % s ( ) ' on the original ' RealmCollection ' instead . " , methodName , methodName ) ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index babed1e . . 263bfe9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . Scanner ; 
 import java . util . Set ; 
 @ @ - 407 , 12 + 408 , 12 @ @ public class Realm extends BaseRealm { 
 realm . doClose ( ) ; 
 throw new RealmMigrationNeededException ( 
 configuration . getPath ( ) , 
 - String . format ( " Realm on disk need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; 
 + String . format ( Locale . US , " Realm on disk need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; 
 } 
 if ( requiredVersion < currentVersion ) { 
 realm . doClose ( ) ; 
 throw new IllegalArgumentException ( 
 - String . format ( " Realm on disk is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; 
 + String . format ( Locale . US , " Realm on disk is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; 
 } 
 } 
 
 @ @ - 998 , 7 + 999 , 7 @ @ public class Realm extends BaseRealm { 
 Table table = schema . getTable ( clazz ) ; 
 / / Checks and throws the exception earlier for a better exception message . 
 if ( table . hasPrimaryKey ( ) ) { 
 - throw new RealmException ( String . format ( " ' % s ' has a primary key , use " + 
 + throw new RealmException ( String . format ( Locale . US , " ' % s ' has a primary key , use " + 
 " ' createObject ( Class < E > , Object ) ' instead . " , table . getClassName ( ) ) ) ; 
 } 
 return configuration . getSchemaMediator ( ) . newInstance ( clazz , this , 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 55a3f7c . . cafcd4a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . lang . reflect . InvocationTargetException ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . HashSet ; 
 + import java . util . Locale ; 
 import java . util . Set ; 
 
 import io . realm . annotations . RealmModule ; 
 @ @ - 322 , 7 + 323 , 7 @ @ public class RealmConfiguration { 
 private static RealmProxyMediator getModuleMediator ( String fullyQualifiedModuleClassName ) { 
 String [ ] moduleNameParts = fullyQualifiedModuleClassName . split ( " \ \ . " ) ; 
 String moduleSimpleName = moduleNameParts [ moduleNameParts . length - 1 ] ; 
 - String mediatorName = String . format ( " io . realm . % s % s " , moduleSimpleName , " Mediator " ) ; 
 + String mediatorName = String . format ( Locale . US , " io . realm . % s % s " , moduleSimpleName , " Mediator " ) ; 
 Class < ? > clazz ; 
 / / noinspection TryWithIdenticalCatches 
 try { 
 @ @ - 500 , 7 + 501 , 8 @ @ public class RealmConfiguration { 
 throw new IllegalArgumentException ( " A non - null key must be provided " ) ; 
 } 
 if ( key . length ! = KEY _ LENGTH ) { 
 - throw new IllegalArgumentException ( String . format ( " The provided key must be % s bytes . Yours was : % s " , 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + " The provided key must be % s bytes . Yours was : % s " , 
 KEY _ LENGTH , key . length ) ) ; 
 } 
 this . key = Arrays . copyOf ( key , key . length ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmList . java b / realm / realm - library / src / main / java / io / realm / RealmList . java 
 index 4380fee . . 12903d0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmList . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmList . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . Date ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . ListIterator ; 
 + import java . util . Locale ; 
 import java . util . NoSuchElementException ; 
 
 import io . realm . internal . InvalidRow ; 
 @ @ - 254 , 7 + 255 , 8 @ @ public class RealmList < E extends RealmModel > extends AbstractList < E > implements 
 return object ; 
 } else { 
 / / Different target table 
 - throw new IllegalArgumentException ( String . format ( " The object has a different type from list ' s . " + 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + " The object has a different type from list ' s . " + 
 " Type of the list is ' % s ' , type of object is ' % s ' . " , listClassName , objectClassName ) ) ; 
 } 
 } else if ( realm . threadId = = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) . threadId ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmMigration . java b / realm / realm - library / src / main / java / io / realm / RealmMigration . java 
 index 5140a3b . . 44e98f3 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmMigration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmMigration . java 
 @ @ - 42 , 7 + 42 , 7 @ @ package io . realm ; 
 * } 
 * 
 * if ( oldVersion < newVersion ) { 
 - * throw new IllegalStateException ( String . format ( " Migration missing from v % d to v % d " , oldVersion , newVersion ) ) ; 
 + * throw new IllegalStateException ( String . format ( Locale . US , " Migration missing from v % d to v % d " , oldVersion , newVersion ) ) ; 
 * } 
 * } 
 * } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index f0c45e5 . . 49b4e77 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package io . realm ; 
 
 import java . util . Collections ; 
 import java . util . Date ; 
 + import java . util . Locale ; 
 
 import io . realm . annotations . Required ; 
 import io . realm . internal . Collection ; 
 @ @ - 1600 , 7 + 1601 , 8 @ @ public class RealmQuery < E extends RealmModel > { 
 case DOUBLE : 
 return query . sumDouble ( columnIndex ) ; 
 default : 
 - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 } 
 } 
 
 @ @ - 1626 , 7 + 1628 , 8 @ @ public class RealmQuery < E extends RealmModel > { 
 case FLOAT : 
 return query . averageFloat ( columnIndex ) ; 
 default : 
 - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 } 
 } 
 
 @ @ - 1651 , 7 + 1654 , 8 @ @ public class RealmQuery < E extends RealmModel > { 
 case DOUBLE : 
 return this . query . minimumDouble ( columnIndex ) ; 
 default : 
 - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 } 
 } 
 
 @ @ - 1692 , 7 + 1696 , 8 @ @ public class RealmQuery < E extends RealmModel > { 
 case DOUBLE : 
 return this . query . maximumDouble ( columnIndex ) ; 
 default : 
 - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 } 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / StandardRealmObjectSchema . java b / realm / realm - library / src / main / java / io / realm / StandardRealmObjectSchema . java 
 index e09cc80 . . e22f773 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / StandardRealmObjectSchema . java 
 + + + b / realm / realm - library / src / main / java / io / realm / StandardRealmObjectSchema . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import java . util . Collections ; 
 import java . util . Date ; 
 import java . util . HashMap ; 
 import java . util . LinkedHashSet ; 
 + import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . Set ; 
 
 @ @ - 176 , 7 + 177 , 8 @ @ class StandardRealmObjectSchema extends RealmObjectSchema { 
 if ( SUPPORTED _ LINKED _ FIELDS . containsKey ( fieldType ) ) { 
 throw new IllegalArgumentException ( " Use addRealmObjectField ( ) instead to add fields that link to other RealmObjects : " + fieldName ) ; 
 } else { 
 - throw new IllegalArgumentException ( String . format ( " Realm doesn ' t support this field type : % s ( % s ) " , 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + " Realm doesn ' t support this field type : % s ( % s ) " , 
 fieldName , fieldType ) ) ; 
 } 
 } 
 @ @ - 678 , 7 + 680 , 8 @ @ class StandardRealmObjectSchema extends RealmObjectSchema { 
 long columnIndex = table . getColumnIndex ( fieldName ) ; 
 if ( columnIndex = = - 1 ) { 
 throw new IllegalArgumentException ( 
 - String . format ( " Field name ' % s ' does not exist on schema for ' % s ' " , 
 + String . format ( Locale . US , 
 + " Field name ' % s ' does not exist on schema for ' % s ' " , 
 fieldName , getClassName ( ) 
 ) ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java b / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java 
 index bad9719 . . 07e6b86 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java 
 + + + b / realm / realm - library / src / main / java / io / realm / exceptions / RealmFileException . java 
 @ @ - 15 , 6 + 15 , 8 @ @ 
 * / 
 package io . realm . exceptions ; 
 
 + import java . util . Locale ; 
 + 
 import io . realm . internal . Keep ; 
 import io . realm . internal . SharedRealm ; 
 
 @ @ - 118 , 6 + 120 , 6 @ @ public class RealmFileException extends RuntimeException { 
 
 @ Override 
 public String toString ( ) { 
 - return String . format ( " % s Kind : % s . " , super . toString ( ) , kind ) ; 
 + return String . format ( Locale . US , " % s Kind : % s . " , super . toString ( ) , kind ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 index 273d3ef . . 3936d36 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package io . realm . internal ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . HashSet ; 
 + import java . util . Locale ; 
 import java . util . Set ; 
 
 import io . realm . RealmFieldType ; 
 @ @ - 103 , 7 + 104 , 7 @ @ public class SortDescriptor { 
 / / could do this in the field descriptor , but this provides a better error message 
 private static void checkFieldType ( FieldDescriptor descriptor , Set < RealmFieldType > legalTerminalTypes , String message , String fieldDescriptions ) { 
 if ( ! legalTerminalTypes . contains ( descriptor . getFinalColumnType ( ) ) ) { 
 - throw new IllegalArgumentException ( String . format ( 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 " % s on ' % s ' field ' % s ' in ' % s ' . " , message , descriptor . getFinalColumnType ( ) , descriptor . getFinalColumnName ( ) , fieldDescriptions ) ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / fields / CachedFieldDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / fields / CachedFieldDescriptor . java 
 index a5b7f6c . . d919d1e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / fields / CachedFieldDescriptor . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / fields / CachedFieldDescriptor . java 
 @ @ - 16 , 6 + 16 , 7 @ @ package io . realm . internal . fields ; 
 * / 
 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . Set ; 
 
 import io . realm . RealmFieldType ; 
 @ @ - 69 , 13 + 70 , 13 @ @ class CachedFieldDescriptor extends FieldDescriptor { 
 tableInfo = schema . getColumnInfo ( currentTable ) ; 
 if ( tableInfo = = null ) { 
 throw new IllegalArgumentException ( 
 - String . format ( " Invalid query : table ' % s ' not found in this schema . " , currentTable ) ) ; 
 + String . format ( Locale . US , " Invalid query : table ' % s ' not found in this schema . " , currentTable ) ) ; 
 } 
 
 columnIndex = tableInfo . getColumnIndex ( columnName ) ; 
 if ( columnIndex < 0 ) { 
 throw new IllegalArgumentException ( 
 - String . format ( " Invalid query : field ' % s ' not found in table ' % s ' . " , columnName , currentTable ) ) ; 
 + String . format ( Locale . US , " Invalid query : field ' % s ' not found in table ' % s ' . " , columnName , currentTable ) ) ; 
 } 
 
 columnType = tableInfo . getColumnType ( columnName ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / fields / DynamicFieldDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / fields / DynamicFieldDescriptor . java 
 index 55995f9 . . 80dc911 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / fields / DynamicFieldDescriptor . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / fields / DynamicFieldDescriptor . java 
 @ @ - 16 , 6 + 16 , 7 @ @ package io . realm . internal . fields ; 
 * / 
 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . Set ; 
 
 import io . realm . RealmFieldType ; 
 @ @ - 64 , 7 + 65 , 7 @ @ class DynamicFieldDescriptor extends FieldDescriptor { 
 columnIndex = currentTable . getColumnIndex ( columnName ) ; 
 if ( columnIndex < 0 ) { 
 throw new IllegalArgumentException ( 
 - String . format ( " Invalid query : field ' % s ' not found in table ' % s ' . " , columnName , tableName ) ) ; 
 + String . format ( Locale . US , " Invalid query : field ' % s ' not found in table ' % s ' . " , columnName , tableName ) ) ; 
 } 
 
 columnType = currentTable . getColumnType ( columnIndex ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / fields / FieldDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / fields / FieldDescriptor . java 
 index 6a17af9 . . 4ed1bca 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / fields / FieldDescriptor . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / fields / FieldDescriptor . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . Set ; 
 
 import io . realm . RealmFieldType ; 
 @ @ - 273 , 7 + 274 , 7 @ @ public abstract class FieldDescriptor { 
 
 private void verifyColumnType ( String tableName , String columnName , RealmFieldType columnType , Set < RealmFieldType > validTypes ) { 
 if ( ! validTypes . contains ( columnType ) ) { 
 - throw new IllegalArgumentException ( String . format ( 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 " Invalid query : field ' % s ' in table ' % s ' is of invalid type ' % s ' . " , 
 columnName , tableName , columnType . toString ( ) ) ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / log / RealmLog . java b / realm / realm - library / src / main / java / io / realm / log / RealmLog . java 
 index 80bde88 . . f6f33ca 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / log / RealmLog . java 
 + + + b / realm / realm - library / src / main / java / io / realm / log / RealmLog . java 
 @ @ - 18 , 6 + 18 , 8 @ @ package io . realm . log ; 
 
 import android . util . Log ; 
 
 + import java . util . Locale ; 
 + 
 
 / * * 
 * Global logger used by all Realm components . 
 @ @ - 275 , 7 + 277 , 7 @ @ public final class RealmLog { 
 
 StringBuilder stringBuilder = new StringBuilder ( ) ; 
 if ( args ! = null & & args . length > 0 ) { 
 - message = String . format ( message , args ) ; 
 + message = String . format ( Locale . US , message , args ) ; 
 } 
 if ( throwable ! = null ) { 
 stringBuilder . append ( Log . getStackTraceString ( throwable ) ) ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 index 29e7fae . . 401a01f 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import android . content . pm . PackageInfo ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . util . Locale ; 
 
 import io . realm . internal . Keep ; 
 
 @ @ - 50 , 10 + 51 , 12 @ @ class ObjectServer { 
 File dir = File . createTempFile ( " remote _ sync _ " , " _ " + android . os . Process . myPid ( ) , 
 context . getFilesDir ( ) ) ; 
 if ( ! dir . delete ( ) ) { 
 - throw new IllegalStateException ( String . format ( " Temp file ' % s ' cannot be deleted . " , dir . getPath ( ) ) ) ; 
 + throw new IllegalStateException ( String . format ( Locale . US , 
 + " Temp file ' % s ' cannot be deleted . " , dir . getPath ( ) ) ) ; 
 } 
 if ( ! dir . mkdir ( ) ) { 
 - throw new IllegalStateException ( String . format ( " Directory ' % s ' for SyncManager cannot be created . " , 
 + throw new IllegalStateException ( String . format ( Locale . US , 
 + " Directory ' % s ' for SyncManager cannot be created . " , 
 dir . getPath ( ) ) ) ; 
 } 
 SyncManager . nativeInitializeSyncManager ( dir . getPath ( ) ) ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 index 4724b9c . . 234a3ec 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . security . NoSuchAlgorithmException ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . HashSet ; 
 + import java . util . Locale ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 @ @ - 511 , 7 + 512 , 8 @ @ public class SyncConfiguration extends RealmConfiguration { 
 throw new IllegalArgumentException ( " A non - null key must be provided " ) ; 
 } 
 if ( key . length ! = KEY _ LENGTH ) { 
 - throw new IllegalArgumentException ( String . format ( " The provided key must be % s bytes . Yours was : % s " , 
 + throw new IllegalArgumentException ( String . format ( Locale . US , 
 + " The provided key must be % s bytes . Yours was : % s " , 
 KEY _ LENGTH , key . length ) ) ; 
 } 
 this . key = Arrays . copyOf ( key , key . length ) ; 
 @ @ - 720 , 7 + 722 , 7 @ @ public class SyncConfiguration extends RealmConfiguration { 
 byte [ ] buf = digest . digest ( in . getBytes ( " UTF - 8 " ) ) ; 
 StringBuilder builder = new StringBuilder ( ) ; 
 for ( byte b : buf ) { 
 - builder . append ( String . format ( " % 02X " , b ) ) ; 
 + builder . append ( String . format ( Locale . US , " % 02X " , b ) ) ; 
 } 
 return builder . toString ( ) ; 
 } catch ( NoSuchAlgorithmException e ) { 
 @ @ - 799 , 14 + 801 , 16 @ @ public class SyncConfiguration extends RealmConfiguration { 
 realmFileDirectory = new File ( rootDir , user . getIdentity ( ) ) ; 
 fullPathName = realmFileDirectory . getAbsolutePath ( ) + File . pathSeparator + realmFileName ; 
 if ( fullPathName . length ( ) > MAX _ FULL _ PATH _ LENGTH ) { / / we are out of ideas 
 - throw new IllegalStateException ( String . format ( " Full path name must not exceed % d characters : % s " , 
 + throw new IllegalStateException ( String . format ( Locale . US , 
 + " Full path name must not exceed % d characters : % s " , 
 MAX _ FULL _ PATH _ LENGTH , fullPathName ) ) ; 
 } 
 } 
 } 
 
 if ( realmFileName . length ( ) > MAX _ FILE _ NAME _ LENGTH ) { 
 - throw new IllegalStateException ( String . format ( " File name exceed % d characters : % d " , MAX _ FILE _ NAME _ LENGTH , 
 + throw new IllegalStateException ( String . format ( Locale . US , 
 + " File name exceed % d characters : % d " , MAX _ FILE _ NAME _ LENGTH , 
 realmFileName . length ( ) ) ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 index 8e070e1 . . e99a35d 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 @ @ - 16 , 6 + 16 , 7 @ @ 
 
 package io . realm ; 
 
 + import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . concurrent . ArrayBlockingQueue ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 @ @ - 81 , 7 + 82 , 7 @ @ public class SyncManager { 
 return ; 
 } 
 
 - String errorMsg = String . format ( " Session Error [ % s ] : % s " , 
 + String errorMsg = String . format ( Locale . US , " Session Error [ % s ] : % s " , 
 session . getConfiguration ( ) . getServerUrl ( ) , 
 error . toString ( ) ) ; 
 switch ( error . getErrorCode ( ) . getCategory ( ) ) { 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncSession . java b / realm / realm - library / src / objectServer / java / io / realm / SyncSession . java 
 index 846f79f . . 2a0438f 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncSession . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncSession . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import java . net . URI ; 
 import java . util . HashMap ; 
 import java . util . IdentityHashMap ; 
 import java . util . Iterator ; 
 + import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . Future ; 
 @ @ - 635 , 7 + 636 , 8 @ @ public class SyncSession { 
 * / 
 public void throwExceptionIfNeeded ( ) { 
 if ( resultReceived & & errorCode ! = null ) { 
 - throw new ObjectServerError ( ErrorCode . UNKNOWN , String . format ( " Internal error ( % d ) : % s " , errorCode , errorMessage ) ) ; 
 + throw new ObjectServerError ( ErrorCode . UNKNOWN , 
 + String . format ( Locale . US , " Internal error ( % d ) : % s " , errorCode , errorMessage ) ) ; 
 } 
 } 
 } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 index 245a287 . . 94ea8c6 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncUser . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . net . URL ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 + import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . ThreadPoolExecutor ; 
 @ @ - 75 , 7 + 76 , 8 @ @ public class SyncUser { 
 if ( error . getErrorCode ( ) = = ErrorCode . CLIENT _ RESET ) { 
 RealmLog . error ( " Client Reset required for user ' s management Realm : " + user . toString ( ) ) ; 
 } else { 
 - RealmLog . error ( String . format ( " Unexpected error with % s ' s management Realm : % s " , 
 + RealmLog . error ( String . format ( Locale . US , 
 + " Unexpected error with % s ' s management Realm : % s " , 
 user . getIdentity ( ) , 
 error . toString ( ) ) ) ; 
 } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 index 1fdaa9f . . cf9c8d8 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / internal / network / AuthenticateResponse . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import org . json . JSONException ; 
 import org . json . JSONObject ; 
 
 import java . io . IOException ; 
 + import java . util . Locale ; 
 
 import io . realm . ErrorCode ; 
 import io . realm . ObjectServerError ; 
 @ @ - 132 , 14 + 133 , 14 @ @ public class AuthenticateResponse extends AuthServerResponse { 
 if ( accessToken = = null ) { 
 message = " accessToken = null " ; 
 } else { 
 - message = String . format ( " Identity % s ; Path % s " , accessToken . identity ( ) , accessToken . path ( ) ) ; 
 + message = String . format ( Locale . US , " Identity % s ; Path % s " , accessToken . identity ( ) , accessToken . path ( ) ) ; 
 } 
 } catch ( JSONException ex ) { 
 accessToken = null ; 
 refreshToken = null ; 
 / / noinspection ThrowableInstanceNeverThrown 
 error = new ObjectServerError ( ErrorCode . JSON _ EXCEPTION , ex ) ; 
 - message = String . format ( " Error % s " , error . getErrorMessage ( ) ) ; 
 + message = String . format ( Locale . US , " Error % s " , error . getErrorMessage ( ) ) ; 
 } 
 RealmLog . debug ( " AuthenticateResponse . " + message ) ; 
 setError ( error ) ;

NEAREST DIFF:
diff - - git a / examples / rxJavaExample / README . md b / examples / rxJavaExample / README . md 
 index 3f33bfa . . ea203c2 100644 
 - - - a / examples / rxJavaExample / README . md 
 + + + b / examples / rxJavaExample / README . md 
 @ @ - 5 , 13 + 5 , 17 @ @ 
 - Observables might have a default Scheduler they operate on that is 
 different than the one the RealmObject was created on . 
 
 - - RealmObjects auto - update . Observables that operate on multiple " versions " 
 + - RealmObjects are live objects that automatically staty up to date . Observables that operate on multiple " versions " 
 will most likely not work as expected . 
 
 - Retrofit automatically offload to a worker thread . 
 
 - Use Realm async API instead of subscribeOn to offload Realm work . 
 
 + - You can use Realm . copyFromRealm to make a copy of Realm data 
 + 
 + 
 + 
 
 # # Resources ( TODO ) 
 - http : / / www . grahamlea . com / 2014 / 07 / rxjava - threading - examples / 
 \ No newline at end of file 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 index 12a0c4a . . ff099ad 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 @ @ - 31 , 7 + 31 , 7 @ @ public class RxJavaTests extends AndroidTestCase { 
 realm . commitTransaction ( ) ; 
 
 final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { 
 @ Override 
 public void call ( AllTypes rxObject ) { 
 assertTrue ( rxObject = = obj ) ; 
 @ @ - 74 , 7 + 74 , 7 @ @ public class RxJavaTests extends AndroidTestCase { 
 final AllTypes obj = realm . createObject ( AllTypes . class ) ; 
 realm . commitTransaction ( ) ; 
 
 - obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + obj . observable ( AllTypes . class ) . subscribe ( new Action1 < AllTypes > ( ) { 
 @ Override 
 public void call ( AllTypes rxObject ) { 
 subscriberCalled . addAndGet ( 1 ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index a3e5103 . . 4e420ec 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 25 , 15 + 25 , 12 @ @ import java . lang . ref . ReferenceQueue ; 
 import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 - import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 - import java . util . Set ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 - import java . util . concurrent . CopyOnWriteArraySet ; 
 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 import io . realm . internal . SharedGroupManager ; 
 @ @ - 44 , 7 + 41 , 6 @ @ import io . realm . internal . android . DebugAndroidLogger ; 
 import io . realm . internal . android . ReleaseAndroidLogger ; 
 import io . realm . internal . async . RealmThreadPoolExecutor ; 
 import io . realm . internal . log . RealmLog ; 
 - import io . realm . rx . RxObservableFactory ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 53 , 7 + 49 , 7 @ @ import rx . Observable ; 
 * @ see io . realm . Realm 
 * @ see io . realm . DynamicRealm 
 * / 
 - public abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 + public abstract class BaseRealm < T extends BaseRealm < T > > implements Closeable { 
 protected static final long UNVERSIONED = - 1 ; 
 private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; 
 private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; 
 @ @ - 203 , 8 + 199 , 8 @ @ public abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 @ SuppressWarnings ( " unchecked " ) 
 - public Observable < E > observable ( ) { 
 - return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; 
 + public Observable < T > observable ( ) { 
 + return ( Observable < T > ) configuration . getRxFactory ( ) . from ( this ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 index f979667 . . 627ac4a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 @ @ - 42 , 7 + 42 , 7 @ @ import io . realm . internal . TableView ; 
 * @ see Realm 
 * @ see RealmSchema 
 * / 
 - public final class DynamicRealm extends BaseRealm { 
 + public final class DynamicRealm extends BaseRealm < DynamicRealm > { 
 
 private DynamicRealm ( RealmConfiguration configuration , boolean autoRefresh ) { 
 super ( configuration , autoRefresh ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 index 40ad05a . . 318e9e9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 @ @ - 29 , 7 + 29 , 7 @ @ import io . realm . internal . android . JsonUtils ; 
 * Class that wraps a normal RealmObject in order to allow dynamic access instead of a typed interface . 
 * Using a DynamicRealmObject is slower than using the regular RealmObject class . 
 * / 
 - public final class DynamicRealmObject extends RealmObject < DynamicRealmObject > { 
 + public final class DynamicRealmObject extends RealmObject { 
 
 / * * 
 * Creates a dynamic Realm object based on an existing object . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmCache . java b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 index 5283cb5 . . 24824b6 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmCache . java 
 @ @ - 89 , 7 + 89 , 7 @ @ class RealmCache { 
 * @ param realmClass class of { @ link Realm } or { @ link DynamicRealm } to be created in or gotten from the cache . 
 * @ return the { @ link Realm } or { @ link DynamicRealm } instance . 
 * / 
 - static synchronized < E extends BaseRealm > E createRealmOrGetFromCache ( RealmConfiguration configuration , 
 + static synchronized < E extends BaseRealm < E > > E createRealmOrGetFromCache ( RealmConfiguration configuration , 
 Class < E > realmClass ) { 
 boolean isCacheInMap = true ; 
 RealmCache cache = cachesMap . get ( configuration . getPath ( ) ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 3978bfc . . 34960d0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 79 , 7 + 79 , 7 @ @ import rx . Observable ; 
 * / 
 
 @ RealmClass 
 - public abstract class RealmObject < E extends RealmObject > { 
 + public abstract class RealmObject { 
 
 protected Row row ; 
 protected BaseRealm realm ; 
 @ @ - 255 , 7 + 255 , 10 @ @ public abstract class RealmObject < E extends RealmObject > { 
 * @ see < a href = " " > RxJava and Realm < / a > 
 * / 
 @ SuppressWarnings ( " unchecked " ) 
 - public Observable < E > observable ( ) { 
 + public < E extends RealmObject > Observable < E > observable ( Class < E > type ) { 
 + if ( ! this . getClass ( ) . isInstance ( type ) ) { 
 + throw new IllegalArgumentException ( " This RealmObject cannot be cast to the desired type : " + type ) ; 
 + } 
 return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 89274ba . . fde3390 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1719 , 86 + 1719 , 16 @ @ public class RealmQuery < E extends RealmObject > { 
 * @ return the object found or { @ code null } if no object matches the query conditions . 
 * @ see io . realm . RealmObject 
 * / 
 - @ SuppressWarnings ( " unchecked " ) 
 public E findFirst ( ) { 
 checkQueryIsNotReused ( ) ; 
 long rowIndex = this . query . find ( ) ; 
 if ( rowIndex > = 0 ) { 
 - return ( E ) realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; 
 + return realm . get ( clazz , className , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; 
 } else { 
 return null ; 
 } 
 } 
 
 - / / FIXME Replace with Schema when it is available 
 - private static class DynamicColumnMap implements Map < String , Long > { 
 - private final Table table ; 
 - 
 - public DynamicColumnMap ( Table table ) { 
 - this . table = table ; 
 - } 
 - 
 - @ Override 
 - public Long get ( Object key ) { 
 - return table . getColumnIndex ( ( String ) key ) ; 
 - } 
 - 
 - @ Override 
 - public void clear ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean containsKey ( Object key ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean containsValue ( Object value ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Set < Entry < String , Long > > entrySet ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean isEmpty ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Set < String > keySet ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Long put ( String key , Long value ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public void putAll ( Map < ? extends String , ? extends Long > map ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Long remove ( Object key ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public int size ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - public Collection < Long > values ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - } 
 - 
 / * * 
 * Similar to { @ link # findFirst ( ) } but runs asynchronously on a worker thread 
 * This method is only available from a Looper thread . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index db09759 . . 3629486 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 157 , 15 + 157 , 14 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 * @ throws IndexOutOfBoundsException if { @ code location < 0 | | location > = size ( ) } . 
 * / 
 @ Override 
 - @ SuppressWarnings ( " unchecked " ) 
 public E get ( int location ) { 
 E obj ; 
 realm . checkIfValid ( ) ; 
 TableOrView table = getTable ( ) ; 
 if ( table instanceof TableView ) { 
 - obj = ( E ) realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; 
 + obj = realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; 
 } else { 
 - obj = ( E ) realm . get ( classSpec , className , location ) ; 
 + obj = realm . get ( classSpec , className , location ) ; 
 } 
 
 return obj ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 index 718e705 . . 940f217 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 @ @ - 79 , 7 + 79 , 7 @ @ public final class RealmObservableFactory implements RxObservableFactory { 
 } 
 
 @ Override 
 - public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 + public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 checkRxJavaAvailable ( ) ; 
 return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 @ Override 
 @ @ - 106 , 13 + 106 , 13 @ @ public final class RealmObservableFactory implements RxObservableFactory { 
 } 
 
 @ Override 
 - public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 + public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 checkRxJavaAvailable ( ) ; 
 throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 } 
 
 @ Override 
 - public < E extends RealmObject < E > > Observable < E > from ( final E object ) { 
 + public < E extends RealmObject > Observable < E > from ( final E object ) { 
 checkRxJavaAvailable ( ) ; 
 return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 @ Override 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 index 0984f85 . . 14fd548 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 @ @ - 30 , 7 + 30 , 7 @ @ public interface RxObservableFactory { 
 * @ param results RealmResults to listen to changes for . 
 * @ param < E > Type of RealmObject 
 * / 
 - < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 + < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 
 / * * 
 * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each 
 @ @ - 41 , 7 + 41 , 7 @ @ public interface RxObservableFactory { 
 * @ param list RealmObject to listen to changes for . 
 * @ param < E > Type of RealmObject 
 * / 
 - < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 + < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 
 
 / * * 
 @ @ - 53 , 5 + 53 , 5 @ @ public interface RxObservableFactory { 
 * @ param object RealmObject to listen to changes for . 
 * @ param < E > Type of RealmObject 
 * / 
 - < E extends RealmObject < E > > Observable < E > from ( E object ) ; 
 + < E extends RealmObject > Observable < E > from ( E object ) ; 
 }
