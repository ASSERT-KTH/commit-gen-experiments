BLEU SCORE: 0.037477767366779206

TEST MSG: Unit test to compare with negative numbers . Closes # 1773
GENERATED MSG: with greek characters

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java <nl> index e7b9357 . . 67269e5 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java <nl> @ @ - 1126 , 4 + 1126 , 24 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> testRealm . close ( ) ; <nl> assertFalse ( results . isValid ( ) ) ; <nl> } <nl> + <nl> + / / Triggered an ARM bug <nl> + public void testComparisons ( ) { <nl> + testRealm . beginTransaction ( ) ; <nl> + testRealm . clear ( AllTypes . class ) ; <nl> + long id = - 1 ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; <nl> + allTypes . setColumnLong ( id - - ) ; <nl> + } <nl> + testRealm . commitTransaction ( ) ; <nl> + <nl> + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . between ( AllTypes . FIELD _ LONG , - 10 , - 1 ) . findAll ( ) . size ( ) ) ; <nl> + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . greaterThan ( AllTypes . FIELD _ LONG , - 11 ) . findAll ( ) . size ( ) ) ; <nl> + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . greaterThanOrEqualTo ( AllTypes . FIELD _ LONG , - 10 ) . findAll ( ) . size ( ) ) ; <nl> + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . lessThan ( AllTypes . FIELD _ LONG , 128 ) . findAll ( ) . size ( ) ) ; <nl> + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . lessThan ( AllTypes . FIELD _ LONG , 127 ) . findAll ( ) . size ( ) ) ; <nl> + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . lessThanOrEqualTo ( AllTypes . FIELD _ LONG , - 1 ) . findAll ( ) . size ( ) ) ; <nl> + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . lessThan ( AllTypes . FIELD _ LONG , 0 ) . findAll ( ) . size ( ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index fc1c29d . . b50a665 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 586 , 6 + 586 , 33 @ @ public class RealmTest extends AndroidTestCase { <nl> assertEquals ( TEST _ DATA _ SIZE , resultList . size ( ) ) ; <nl> } <nl> <nl> + public void testRealmQueryContainsAndCaseSensitiveWithNonLatinCharacters ( ) { <nl> + testRealm . beginTransaction ( ) ; <nl> + testRealm . clear ( AllTypes . class ) ; <nl> + AllTypes at1 = testRealm . createObject ( AllTypes . class ) ; <nl> + at1 . setColumnString ( " Α λ φ α " ) ; <nl> + AllTypes at2 = testRealm . createObject ( AllTypes . class ) ; <nl> + at2 . setColumnString ( " β ή τ α " ) ; <nl> + AllTypes at3 = testRealm . createObject ( AllTypes . class ) ; <nl> + at3 . setColumnString ( " δ έ λ τ α " ) ; <nl> + testRealm . commitTransaction ( ) ; <nl> + <nl> + RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . beginGroup ( ) . contains ( " columnString " , " Α " , false ) . or ( ) . contains ( " columnString " , " δ " ) . endGroup ( ) . findAll ( ) ; <nl> + / / Without case sensitive there is 3 , Α = α <nl> + / / assertEquals ( 3 , resultList . size ( ) ) ; <nl> + assertEquals ( 2 , resultList . size ( ) ) ; <nl> + <nl> + resultList = testRealm . where ( AllTypes . class ) . contains ( " columnString " , " α " ) . findAll ( ) ; <nl> + assertEquals ( 3 , resultList . size ( ) ) ; <nl> + <nl> + resultList = testRealm . where ( AllTypes . class ) . contains ( " columnString " , " Δ " ) . findAll ( ) ; <nl> + assertEquals ( 0 , resultList . size ( ) ) ; <nl> + / / Without case sensitive there is 1 , Δ = δ <nl> + / / assertEquals ( 1 , resultList . size ( ) ) ; <nl> + resultList = testRealm . where ( AllTypes . class ) . contains ( " columnString " , " Δ " , false ) . findAll ( ) ; <nl> + assertEquals ( 0 , resultList . size ( ) ) ; <nl> + } <nl> + <nl> public void testQueryWithNonExistingField ( ) { <nl> try { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . equalTo ( " NotAField " , 13 ) . findAll ( ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java 
 index e7b9357 . . 67269e5 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java 
 @ @ - 1126 , 4 + 1126 , 24 @ @ public class RealmResultsTest extends AndroidTestCase { 
 testRealm . close ( ) ; 
 assertFalse ( results . isValid ( ) ) ; 
 } 
 + 
 + / / Triggered an ARM bug 
 + public void testComparisons ( ) { 
 + testRealm . beginTransaction ( ) ; 
 + testRealm . clear ( AllTypes . class ) ; 
 + long id = - 1 ; 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; 
 + allTypes . setColumnLong ( id - - ) ; 
 + } 
 + testRealm . commitTransaction ( ) ; 
 + 
 + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . between ( AllTypes . FIELD _ LONG , - 10 , - 1 ) . findAll ( ) . size ( ) ) ; 
 + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . greaterThan ( AllTypes . FIELD _ LONG , - 11 ) . findAll ( ) . size ( ) ) ; 
 + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . greaterThanOrEqualTo ( AllTypes . FIELD _ LONG , - 10 ) . findAll ( ) . size ( ) ) ; 
 + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . lessThan ( AllTypes . FIELD _ LONG , 128 ) . findAll ( ) . size ( ) ) ; 
 + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . lessThan ( AllTypes . FIELD _ LONG , 127 ) . findAll ( ) . size ( ) ) ; 
 + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . lessThanOrEqualTo ( AllTypes . FIELD _ LONG , - 1 ) . findAll ( ) . size ( ) ) ; 
 + assertEquals ( 10 , testRealm . where ( AllTypes . class ) . lessThan ( AllTypes . FIELD _ LONG , 0 ) . findAll ( ) . size ( ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index fc1c29d . . b50a665 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 586 , 6 + 586 , 33 @ @ public class RealmTest extends AndroidTestCase { 
 assertEquals ( TEST _ DATA _ SIZE , resultList . size ( ) ) ; 
 } 
 
 + public void testRealmQueryContainsAndCaseSensitiveWithNonLatinCharacters ( ) { 
 + testRealm . beginTransaction ( ) ; 
 + testRealm . clear ( AllTypes . class ) ; 
 + AllTypes at1 = testRealm . createObject ( AllTypes . class ) ; 
 + at1 . setColumnString ( " Α λ φ α " ) ; 
 + AllTypes at2 = testRealm . createObject ( AllTypes . class ) ; 
 + at2 . setColumnString ( " β ή τ α " ) ; 
 + AllTypes at3 = testRealm . createObject ( AllTypes . class ) ; 
 + at3 . setColumnString ( " δ έ λ τ α " ) ; 
 + testRealm . commitTransaction ( ) ; 
 + 
 + RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . beginGroup ( ) . contains ( " columnString " , " Α " , false ) . or ( ) . contains ( " columnString " , " δ " ) . endGroup ( ) . findAll ( ) ; 
 + / / Without case sensitive there is 3 , Α = α 
 + / / assertEquals ( 3 , resultList . size ( ) ) ; 
 + assertEquals ( 2 , resultList . size ( ) ) ; 
 + 
 + resultList = testRealm . where ( AllTypes . class ) . contains ( " columnString " , " α " ) . findAll ( ) ; 
 + assertEquals ( 3 , resultList . size ( ) ) ; 
 + 
 + resultList = testRealm . where ( AllTypes . class ) . contains ( " columnString " , " Δ " ) . findAll ( ) ; 
 + assertEquals ( 0 , resultList . size ( ) ) ; 
 + / / Without case sensitive there is 1 , Δ = δ 
 + / / assertEquals ( 1 , resultList . size ( ) ) ; 
 + resultList = testRealm . where ( AllTypes . class ) . contains ( " columnString " , " Δ " , false ) . findAll ( ) ; 
 + assertEquals ( 0 , resultList . size ( ) ) ; 
 + } 
 + 
 public void testQueryWithNonExistingField ( ) { 
 try { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . equalTo ( " NotAField " , 13 ) . findAll ( ) ;
