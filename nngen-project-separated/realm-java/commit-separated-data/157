BLEU SCORE: 0.021906016114066472

TEST MSG: Fix wrong Javadoc
GENERATED MSG: Grammar + added description of @ Index to RealmObject .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index a87ff88 . . 97b5aeb 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1763 , 8 + 1763 , 7 @ @ public class RealmQuery < E extends RealmModel > { <nl> } <nl> <nl> / * * <nl> - * Finds all objects that fulfill the query conditions and sorted by specific field name . <nl> - * This method is only available from a Looper thread . <nl> + * Finds all objects that fulfill the query conditions . This method is only available from a Looper thread . <nl> * <nl> * @ return immediately an empty { @ link RealmResults } . Users need to register a listener <nl> * { @ link io . realm . RealmResults # addChangeListener ( RealmChangeListener ) } to be notified when the query completes .
NEAREST DIFF (one line): diff - - git a / realm / src / main / java / io / realm / RealmBaseAdapter . java b / realm / src / main / java / io / realm / RealmBaseAdapter . java <nl> index 4c7d794 . . 24580e0 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmBaseAdapter . java <nl> + + + b / realm / src / main / java / io / realm / RealmBaseAdapter . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public abstract class RealmBaseAdapter < T extends RealmObject > extends BaseAdapte <nl> } <nl> <nl> / * * <nl> - * Returns the current ID for a item . Note that item ID ' s are not stable so you cannot rely on <nl> + * Returns the current ID for an item . Note that item IDs are not stable so you cannot rely on <nl> * the item ID being the same after { @ link # notifyDataSetChanged ( ) } or <nl> * { @ link # updateRealmResults ( RealmResults ) } has been called . <nl> * <nl> diff - - git a / realm / src / main / java / io / realm / RealmChangeListener . java b / realm / src / main / java / io / realm / RealmChangeListener . java <nl> index 0a338e4 . . ba44d13 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmChangeListener . java <nl> + + + b / realm / src / main / java / io / realm / RealmChangeListener . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ package io . realm ; <nl> / * * <nl> * Using RealmChangeListener , it is possible to be notified when a Realm instance has been updated . <nl> * <nl> - * Realm instances on a thread without a { @ link android . os . Looper } ( almost all background threads ) <nl> + * Realm instances on a thread without an { @ link android . os . Looper } ( almost all background threads ) <nl> * don ' t get updated automatically , but have to call { @ link Realm # refresh ( ) } manually . This will <nl> * in turn trigger the RealmChangeListener for that background thread . <nl> * <nl> diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java <nl> index e1ccba3 . . 93032ae 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / src / main / java / io / realm / RealmObject . java <nl> @ @ - 62 , 6 + 62 , 9 @ @ import io . realm . internal . Row ; <nl> * Fields annotated with { @ link io . realm . annotations . Ignore } don ' t have these restrictions and <nl> * don ' t require either a getter or setter . <nl> * <nl> + * Realm will created indexes for fields annotated with { @ link io . realm . annotations . Index } . This <nl> + * will speedup queries but will have a negative impact on inserts and updates . <nl> + * * <nl> * A RealmObject cannot be passed between different threads . <nl> * <nl> * @ see Realm # createObject ( Class ) <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index c7c8a42 . . 9704558 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 29 , 12 + 29 , 12 @ @ import io . realm . internal . TableQuery ; <nl> import io . realm . internal . TableView ; <nl> <nl> / * * <nl> - * A RealmQuery encapsulates a query on a { @ link io . realm . Realm } or a { @ link io . realm . RealmResults } <nl> + * A RealmQuery encapsulates a query on an { @ link io . realm . Realm } or an { @ link io . realm . RealmResults } <nl> * using the Builder pattern . The query is executed using either { @ link # findAll ( ) } or <nl> * { @ link # findFirst ( ) } <nl> * <nl> * The input to many of the query functions take a field name as as String . Note that this is not <nl> - * type safe , so if a model class is refactored care has to be taken to not break any queries . <nl> + * type safe . If a model class is refactored care has to be taken to not break any queries . <nl> * <nl> * A { @ link io . realm . Realm } is unordered , which means that there is no guarantee that querying a <nl> * Realm will return the objects in the order they where inserted . Use

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index a87ff88 . . 97b5aeb 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1763 , 8 + 1763 , 7 @ @ public class RealmQuery < E extends RealmModel > { 
 } 
 
 / * * 
 - * Finds all objects that fulfill the query conditions and sorted by specific field name . 
 - * This method is only available from a Looper thread . 
 + * Finds all objects that fulfill the query conditions . This method is only available from a Looper thread . 
 * 
 * @ return immediately an empty { @ link RealmResults } . Users need to register a listener 
 * { @ link io . realm . RealmResults # addChangeListener ( RealmChangeListener ) } to be notified when the query completes .

NEAREST DIFF:
diff - - git a / realm / src / main / java / io / realm / RealmBaseAdapter . java b / realm / src / main / java / io / realm / RealmBaseAdapter . java 
 index 4c7d794 . . 24580e0 100644 
 - - - a / realm / src / main / java / io / realm / RealmBaseAdapter . java 
 + + + b / realm / src / main / java / io / realm / RealmBaseAdapter . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public abstract class RealmBaseAdapter < T extends RealmObject > extends BaseAdapte 
 } 
 
 / * * 
 - * Returns the current ID for a item . Note that item ID ' s are not stable so you cannot rely on 
 + * Returns the current ID for an item . Note that item IDs are not stable so you cannot rely on 
 * the item ID being the same after { @ link # notifyDataSetChanged ( ) } or 
 * { @ link # updateRealmResults ( RealmResults ) } has been called . 
 * 
 diff - - git a / realm / src / main / java / io / realm / RealmChangeListener . java b / realm / src / main / java / io / realm / RealmChangeListener . java 
 index 0a338e4 . . ba44d13 100644 
 - - - a / realm / src / main / java / io / realm / RealmChangeListener . java 
 + + + b / realm / src / main / java / io / realm / RealmChangeListener . java 
 @ @ - 19 , 7 + 19 , 7 @ @ package io . realm ; 
 / * * 
 * Using RealmChangeListener , it is possible to be notified when a Realm instance has been updated . 
 * 
 - * Realm instances on a thread without a { @ link android . os . Looper } ( almost all background threads ) 
 + * Realm instances on a thread without an { @ link android . os . Looper } ( almost all background threads ) 
 * don ' t get updated automatically , but have to call { @ link Realm # refresh ( ) } manually . This will 
 * in turn trigger the RealmChangeListener for that background thread . 
 * 
 diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java 
 index e1ccba3 . . 93032ae 100644 
 - - - a / realm / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / src / main / java / io / realm / RealmObject . java 
 @ @ - 62 , 6 + 62 , 9 @ @ import io . realm . internal . Row ; 
 * Fields annotated with { @ link io . realm . annotations . Ignore } don ' t have these restrictions and 
 * don ' t require either a getter or setter . 
 * 
 + * Realm will created indexes for fields annotated with { @ link io . realm . annotations . Index } . This 
 + * will speedup queries but will have a negative impact on inserts and updates . 
 + * * 
 * A RealmObject cannot be passed between different threads . 
 * 
 * @ see Realm # createObject ( Class ) 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index c7c8a42 . . 9704558 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 29 , 12 + 29 , 12 @ @ import io . realm . internal . TableQuery ; 
 import io . realm . internal . TableView ; 
 
 / * * 
 - * A RealmQuery encapsulates a query on a { @ link io . realm . Realm } or a { @ link io . realm . RealmResults } 
 + * A RealmQuery encapsulates a query on an { @ link io . realm . Realm } or an { @ link io . realm . RealmResults } 
 * using the Builder pattern . The query is executed using either { @ link # findAll ( ) } or 
 * { @ link # findFirst ( ) } 
 * 
 * The input to many of the query functions take a field name as as String . Note that this is not 
 - * type safe , so if a model class is refactored care has to be taken to not break any queries . 
 + * type safe . If a model class is refactored care has to be taken to not break any queries . 
 * 
 * A { @ link io . realm . Realm } is unordered , which means that there is no guarantee that querying a 
 * Realm will return the objects in the order they where inserted . Use
