BLEU SCORE: 0.027611988917697356

TEST MSG: Deliver global notification through OS did _ change
GENERATED MSG: Rename the lists

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> index cca89c9 . . 98756f6 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java <nl> @ @ - 563 , 7 + 563 , 7 @ @ public class DynamicRealmTests { <nl> } <nl> } ; <nl> <nl> - dynamicRealm . setHandler ( handler ) ; <nl> + / / dynamicRealm . setHandler ( handler ) ; <nl> dynamicRealmObject [ 0 ] = dynamicRealm . where ( AllTypes . CLASS _ NAME ) <nl> . between ( AllTypes . FIELD _ LONG , 4 , 9 ) <nl> . findFirstAsync ( ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> index 9375d6e . . 0244095 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> @ @ - 505 , 7 + 505 , 7 @ @ public class RealmAsyncQueryTests { <nl> return false ; <nl> } <nl> } ; <nl> - realm . setHandler ( handler ) ; <nl> + / / realm . setHandler ( handler ) ; <nl> <nl> / / 3 . Create a async query <nl> final RealmResults < AllTypes > realmResults = realm . where ( AllTypes . class ) <nl> @ @ - 573 , 7 + 573 , 7 @ @ public class RealmAsyncQueryTests { <nl> return false ; <nl> } <nl> } ; <nl> - realm . setHandler ( handler ) ; <nl> + / / realm . setHandler ( handler ) ; <nl> <nl> / / 2 . Create 2 async queries and check they are not loaded <nl> final RealmResults < AllTypes > realmResults1 = realm . where ( AllTypes . class ) . findAllAsync ( ) ; <nl> @ @ - 674 , 7 + 674 , 7 @ @ public class RealmAsyncQueryTests { <nl> return false ; <nl> } <nl> } ; <nl> - realm . setHandler ( handler ) ; <nl> + / / realm . setHandler ( handler ) ; <nl> <nl> / / Create async query and verify it has not been loaded . <nl> final RealmResults < AllTypes > realmResults = realm . where ( AllTypes . class ) <nl> @ @ - 743 , 7 + 743 , 7 @ @ public class RealmAsyncQueryTests { <nl> return false ; <nl> } <nl> } ; <nl> - realm . setHandler ( handler ) ; <nl> + / / realm . setHandler ( handler ) ; <nl> Realm . asyncTaskExecutor . pause ( ) ; <nl> <nl> / / Create async queries and check they haven ' t completed <nl> @ @ - 977 , 7 + 977 , 7 @ @ public class RealmAsyncQueryTests { <nl> return false ; <nl> } <nl> } ; <nl> - realm . setHandler ( handler ) ; <nl> + / / realm . setHandler ( handler ) ; <nl> <nl> / / Create a async query and verify it is not still loaded . <nl> final AllTypes realmResults = realm . where ( AllTypes . class ) <nl> @ @ - 1074 , 7 + 1074 , 7 @ @ public class RealmAsyncQueryTests { <nl> return false ; <nl> } <nl> } ; <nl> - realm . setHandler ( handler ) ; <nl> + / / realm . setHandler ( handler ) ; <nl> <nl> / / 3 . This will add a task to the paused asyncTaskExecutor <nl> final RealmResults < AllTypes > realmResults = realm . where ( AllTypes . class ) <nl> @ @ - 1151 , 7 + 1151 , 7 @ @ public class RealmAsyncQueryTests { <nl> return false ; <nl> } <nl> } ; <nl> - realm . setHandler ( handler ) ; <nl> + / / realm . setHandler ( handler ) ; <nl> <nl> / / 3 . Create 2 async queries <nl> final RealmResults < AllTypes > realmResults1 = realm . where ( AllTypes . class ) <nl> @ @ - 1290 , 7 + 1290 , 7 @ @ public class RealmAsyncQueryTests { <nl> return false ; <nl> } <nl> } ; <nl> - realm . setHandler ( handler ) ; <nl> + / / realm . setHandler ( handler ) ; <nl> <nl> / / 3 . Create 2 async queries <nl> final RealmResults < AllTypes > realmResults1 = realm . where ( AllTypes . class ) <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> index cb50a83 . . ebb0a0b 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> @ @ - 29 , 6 + 29 , 8 @ @ import io . realm . entities . AllTypes ; <nl> import io . realm . entities . Cat ; <nl> import io . realm . entities . Dog ; <nl> import io . realm . entities . pojo . AllTypesRealmModel ; <nl> + import io . realm . log . LogLevel ; <nl> + import io . realm . log . RealmLog ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . rule . RunTestInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> @ @ - 146 , 11 + 148 , 21 @ @ public class RealmChangeListenerTests { <nl> cat . addChangeListener ( new RealmChangeListener < Cat > ( ) { <nl> @ Override <nl> public void onChange ( Cat object ) { <nl> - assertEquals ( " cat1 " , object . getName ( ) ) ; <nl> - looperThread . testComplete ( ) ; <nl> + / / assertEquals ( " cat1 " , object . getName ( ) ) ; <nl> + / / looperThread . testComplete ( ) ; <nl> + Cat cat = object ; <nl> } <nl> } ) ; <nl> + cat . getAge ( ) ; <nl> <nl> + / * <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . where ( Cat . class ) . findFirst ( ) . setName ( " cat1 " ) ; <nl> + } <nl> + } ) ; <nl> + * / <nl> realm . beginTransaction ( ) ; <nl> cat . setName ( " cat1 " ) ; <nl> realm . commitTransaction ( ) ; <nl> @ @ - 232 , 13 + 244 , 23 @ @ public class RealmChangeListenerTests { <nl> / / FIXME : Used for DEV . Remove before merge <nl> public void myTest ( ) { <nl> Realm realm = looperThread . realm ; <nl> + RealmLog . setLevel ( LogLevel . ALL ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . createObject ( AllTypes . class ) ; <nl> + } <nl> + } ) ; <nl> final RealmResults < Cat > cats = realm . where ( Cat . class ) . findAll ( ) ; <nl> final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; <nl> + final RealmResults < AllTypes > allTypes = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> + double avg = allTypes . average ( AllTypes . FIELD _ DOUBLE ) ; <nl> looperThread . keepStrongReference . add ( cats ) ; <nl> looperThread . keepStrongReference . add ( dogs ) ; <nl> cats . addChangeListener ( new RealmChangeListener < RealmResults < Cat > > ( ) { <nl> @ Override <nl> public void onChange ( RealmResults < Cat > result ) { <nl> + Cat cat = result . first ( ) ; <nl> assertEquals ( " cat1 " , result . first ( ) . getName ( ) ) ; <nl> assertEquals ( " dog1 " , dogs . first ( ) . getName ( ) ) ; <nl> looperThread . testComplete ( ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> index 4a9270c . . 76eaf93 100644 <nl> - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> @ @ - 65 , 11 + 65 , 13 @ @ JavaBindingContext : : ~ JavaBindingContext ( ) <nl> <nl> void JavaBindingContext : : changes _ available ( ) <nl> { <nl> + / * <nl> jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; <nl> if ( notifier ) { <nl> m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ notify _ by _ other _ method ) ; <nl> m _ local _ jni _ env - > DeleteLocalRef ( notifier ) ; <nl> } <nl> + * / <nl> } <nl> <nl> std : : vector < BindingContext : : ObserverState > JavaBindingContext : : get _ observed _ rows ( ) <nl> @ @ - 113 , 5 + 115 , 10 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c <nl> m _ local _ jni _ env - > CallVoidMethod ( observer , m _ observer _ notify _ listener ) ; <nl> } <nl> m _ local _ jni _ env - > CallVoidMethod ( m _ row _ notifier , m _ clear _ row _ refs ) ; <nl> + jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; <nl> + if ( notifier ) { <nl> + m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ notify _ by _ other _ method ) ; <nl> + m _ local _ jni _ env - > DeleteLocalRef ( notifier ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp <nl> index 2632cd3 . . 0a338dd 100644 <nl> - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp <nl> + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp <nl> @ @ - 45 , 6 + 45 , 8 @ @ private : <nl> jobject m _ realm _ notifier ; <nl> / / Method IDs from RealmNotifier implementation . Cache them as member vars . <nl> jmethodID m _ notify _ by _ other _ method ; <nl> + jmethodID m _ realm _ notifier _ on _ change ; <nl> + <nl> / / A weak global ref to the RowNotifier object . Java should hold a strong ref to it . <nl> jobject m _ row _ notifier ; <nl> / / RowNotifier . getObservers ( ) <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / method . hpp b / realm / realm - library / src / main / cpp / jni _ util / method . hpp <nl> new file mode 100644 <nl> index 0000000 . . e56e9ed <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / method . hpp <nl> @ @ - 0 , 0 + 1 , 56 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # ifndef REALM _ JNI _ UTIL _ METHOD _ HPP <nl> + # define REALM _ JNI _ UTIL _ METHOD _ HPP <nl> + <nl> + # include < jni . h > <nl> + # include < util . hpp > <nl> + <nl> + namespace realm { <nl> + namespace jni _ util { <nl> + <nl> + class JniMethod { <nl> + public : <nl> + JniMethod ( JNIEnv * env , jobject obj , const char * method _ name , const char * signature ) { <nl> + jclass cls = env - > GetObjectClass ( obj ) ; <nl> + m _ method _ id = env - > GetMethodID ( cls , method _ name , signature ) ; <nl> + env - > DeleteLocalRef ( cls ) ; <nl> + } <nl> + <nl> + JniMethod ( JNIEnv * env , const char * class _ name , const char * method _ name , const char * signature ) { <nl> + jclass cls = env - > FindClass ( class _ name ) ; <nl> + if ( cls = = NULL ) { <nl> + / / TODO : Throw a cpp exception instead . <nl> + ThrowException ( env , ClassNotFound , class _ name ) ; <nl> + m _ method _ id = nullptr ; <nl> + } else { <nl> + m _ method _ id = env - > GetMethodID ( cls , method _ name , signature ) ; <nl> + } <nl> + } <nl> + <nl> + ~ JniMethod ( ) { } <nl> + <nl> + inline operator jmethodID & ( ) const { return m _ method _ id ; } <nl> + <nl> + private : <nl> + jmethodID m _ method _ id ; <nl> + } ; <nl> + <nl> + } / / namespace realm <nl> + } / / namespace jni _ util <nl> + <nl> + # endif / / REALM _ JNI _ UTIL _ METHOD _ HPP <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java b / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java <nl> deleted file mode 100644 <nl> index c294952 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java <nl> + + + / dev / null <nl> @ @ - 1 , 171 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2016 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - import android . os . Handler ; <nl> - import android . os . Looper ; <nl> - import android . os . Message ; <nl> - <nl> - import io . realm . internal . HandlerControllerConstants ; <nl> - import io . realm . internal . RealmNotifier ; <nl> - import io . realm . internal . async . QueryUpdateTask ; <nl> - import io . realm . log . RealmLog ; <nl> - <nl> - / * * <nl> - * Implementation of { @ link RealmNotifier } for Android based on { @ link Handler } . <nl> - * / <nl> - class AndroidNotifier implements RealmNotifier { <nl> - private Handler handler ; <nl> - <nl> - public AndroidNotifier ( HandlerController handlerController ) { <nl> - if ( isAutoRefreshAvailable ( ) ) { <nl> - handler = new Handler ( handlerController ) ; <nl> - } <nl> - } <nl> - <nl> - / / Called by Java when transaction committed to send LOCAL _ COMMIT to current thread ' s handler . <nl> - @ Override <nl> - public void notifyCommitByLocalThread ( ) { <nl> - if ( handler = = null ) { <nl> - return ; <nl> - } <nl> - <nl> - / / Force any updates on the current thread to the front the queue . Doing this is mostly <nl> - / / relevant on the UI thread where it could otherwise process a motion event before the <nl> - / / REALM _ CHANGED event . This could in turn cause a UI component like ListView to crash . See <nl> - / / https : / / github . com / realm / realm - android - adapters / issues / 11 for such a case . <nl> - / / Other Looper threads could process similar events . For that reason all looper threads will <nl> - / / prioritize local commits . <nl> - / / <nl> - / / If a user is doing commits inside a RealmChangeListener this can cause the Looper thread to get <nl> - / / event starved as it only starts handling Realm events instead . This is an acceptable risk as <nl> - / / that behaviour indicate a user bug . Previously this would be hidden as the UI would still <nl> - / / be responsive . <nl> - / * <nl> - Message msg = Message . obtain ( ) ; <nl> - msg . what = HandlerControllerConstants . LOCAL _ COMMIT ; <nl> - if ( ! handler . hasMessages ( HandlerControllerConstants . LOCAL _ COMMIT ) ) { <nl> - handler . removeMessages ( HandlerControllerConstants . REALM _ CHANGED ) ; <nl> - handler . sendMessageAtFrontOfQueue ( msg ) ; <nl> - } <nl> - * / <nl> - } <nl> - <nl> - / / This is called by OS when other thread / process changes the Realm . <nl> - / / This is getting called on the same thread which created the Realm . <nl> - / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | <nl> - / / | Thread A | Thread B | Daemon Thread | <nl> - / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | <nl> - / / | | Make changes | | <nl> - / / | | | Detect and notify thread A through JNI ALooper | <nl> - / / | Call OS ' s Realm : : notify ( ) from OS ' s ALooper callback | | | <nl> - / / | Realm : : notify ( ) calls JavaBindingContext : change _ available ( ) | | | <nl> - / / | change _ available calls into this method to send REALM _ CHANGED | | | <nl> - / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | <nl> - @ Override <nl> - public void notifyCommitByOtherThread ( ) { <nl> - / * <nl> - if ( handler = = null ) { <nl> - return ; <nl> - } <nl> - <nl> - / / Note there is a race condition with handler . hasMessages ( ) and handler . sendEmptyMessage ( ) <nl> - / / as the target thread consumes messages at the same time . In this case it is not a problem as worst <nl> - / / case we end up with two REALM _ CHANGED messages in the queue . <nl> - boolean messageHandled = true ; <nl> - if ( ! handler . hasMessages ( HandlerControllerConstants . REALM _ CHANGED ) & & <nl> - ! handler . hasMessages ( HandlerControllerConstants . LOCAL _ COMMIT ) ) { <nl> - messageHandled = handler . sendEmptyMessage ( HandlerControllerConstants . REALM _ CHANGED ) ; <nl> - } <nl> - if ( ! messageHandled ) { <nl> - RealmLog . warn ( " Cannot update Looper threads when the Looper has quit . Use realm . setAutoRefresh ( false ) " + <nl> - " to prevent this . " ) ; <nl> - } <nl> - * / <nl> - } <nl> - <nl> - @ Override <nl> - public void post ( Runnable runnable ) { <nl> - Looper looper = handler . getLooper ( ) ; <nl> - if ( looper . getThread ( ) . isAlive ( ) ) { / / The receiving thread is alive <nl> - handler . post ( runnable ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isValid ( ) { <nl> - return handler ! = null ; <nl> - } <nl> - <nl> - @ Override <nl> - public void close ( ) { <nl> - if ( handler ! = null ) { <nl> - handler . removeCallbacksAndMessages ( null ) ; <nl> - handler = null ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void completeAsyncResults ( QueryUpdateTask . Result result ) { <nl> - Looper looper = handler . getLooper ( ) ; <nl> - if ( looper . getThread ( ) . isAlive ( ) ) { / / The receiving thread is alive <nl> - handler . obtainMessage ( HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) . sendToTarget ( ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void completeAsyncObject ( QueryUpdateTask . Result result ) { <nl> - Looper looper = handler . getLooper ( ) ; <nl> - if ( looper . getThread ( ) . isAlive ( ) ) { / / The receiving thread is alive <nl> - handler . obtainMessage ( HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT , result ) . sendToTarget ( ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void throwBackgroundException ( Throwable throwable ) { <nl> - Looper looper = handler . getLooper ( ) ; <nl> - if ( looper . getThread ( ) . isAlive ( ) ) { / / The receiving thread is alive <nl> - handler . obtainMessage ( <nl> - HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( throwable ) ) . sendToTarget ( ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void completeUpdateAsyncQueries ( QueryUpdateTask . Result result ) { <nl> - Looper looper = handler . getLooper ( ) ; <nl> - if ( looper . getThread ( ) . isAlive ( ) ) { / / The receiving thread is alive <nl> - handler . obtainMessage ( HandlerControllerConstants . COMPLETED _ UPDATE _ ASYNC _ QUERIES , result ) . sendToTarget ( ) ; <nl> - } <nl> - } <nl> - <nl> - private static boolean isAutoRefreshAvailable ( ) { <nl> - return ( Looper . myLooper ( ) ! = null & & ! isIntentServiceThread ( ) ) ; <nl> - } <nl> - <nl> - private static boolean isIntentServiceThread ( ) { <nl> - / / Tries to determine if a thread is an IntentService thread . No public API can detect this , <nl> - / / so use the thread name as a heuristic : <nl> - / / https : / / android . googlesource . com / platform / frameworks / base / + / master / core / java / android / app / IntentService . java # 108 <nl> - String threadName = Thread . currentThread ( ) . getName ( ) ; <nl> - return threadName ! = null & & threadName . startsWith ( " IntentService [ " ) ; <nl> - } <nl> - <nl> - / / For testing purpose only . Should be removed ideally . <nl> - public void setHandler ( Handler handler ) { <nl> - this . handler = handler ; <nl> - } <nl> - } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index a32f249 . . 89604e5 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import java . util . concurrent . atomic . AtomicBoolean ; <nl> import io . realm . exceptions . RealmFileException ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> import io . realm . internal . InvalidRow ; <nl> + import io . realm . internal . RealmNotifier ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . SharedRealm ; <nl> import io . realm . internal . ColumnInfo ; <nl> @ @ - 79 , 7 + 80 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> this . configuration = configuration ; <nl> <nl> this . handlerController = new HandlerController ( this ) ; <nl> - this . sharedRealm = SharedRealm . getInstance ( configuration , new AndroidNotifier ( this . handlerController ) , <nl> + this . sharedRealm = SharedRealm . getInstance ( configuration , new RealmNotifier ( ) , <nl> ! ( this instanceof Realm ) ? null : <nl> new SharedRealm . SchemaVersionListener ( ) { <nl> @ Override <nl> @ @ - 138 , 7 + 139 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> if ( ! handlerController . isAutoRefreshEnabled ( ) ) { <nl> throw new IllegalStateException ( " You can ' t register a listener from a non - Looper or IntentService thread . " ) ; <nl> } <nl> - handlerController . addChangeListener ( listener ) ; <nl> + sharedRealm . realmNotifier . addChangeListener ( this , listener ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 157 , 7 + 158 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> if ( ! handlerController . isAutoRefreshEnabled ( ) ) { <nl> throw new IllegalStateException ( " You can ' t remove a listener from a non - Looper thread " ) ; <nl> } <nl> - handlerController . removeChangeListener ( listener ) ; <nl> + sharedRealm . realmNotifier . removeChangeListener ( this , listener ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 191 , 16 + 192 , 9 @ @ abstract class BaseRealm implements Closeable { <nl> if ( ! handlerController . isAutoRefreshEnabled ( ) ) { <nl> throw new IllegalStateException ( " You can ' t remove listeners from a non - Looper thread " ) ; <nl> } <nl> - handlerController . removeAllChangeListeners ( ) ; <nl> + sharedRealm . realmNotifier . removeAllChangeListeners ( ) ; <nl> } <nl> <nl> - / / WARNING : If this method is used after calling any async method , the old handler will still be used . <nl> - / / package private , for test purpose only <nl> - void setHandler ( Handler handler ) { <nl> - ( ( AndroidNotifier ) sharedRealm . realmNotifier ) . setHandler ( handler ) ; <nl> - } <nl> - <nl> - <nl> / * * <nl> * Writes a compacted copy of the Realm to the given destination File . <nl> * < p > <nl> @ @ - 350 , 11 + 344 , 14 @ @ abstract class BaseRealm implements Closeable { <nl> ObjectServerFacade . getFacade ( configuration . isSyncConfiguration ( ) ) <nl> . notifyCommit ( configuration , sharedRealm . getLastSnapshotVersion ( ) ) ; <nl> <nl> + / / FIXME : Check if this is still needed . <nl> / / Sometimes we don ' t want to notify the local thread about commits , e . g . creating a completely new Realm <nl> / / file will make a commit in order to create the schema . Users should not be notified about that . <nl> + / * <nl> if ( notifyLocalThread ) { <nl> sharedRealm . realmNotifier . notifyCommitByLocalThread ( ) ; <nl> } <nl> + * / <nl> } <nl> <nl> / * * <nl> @ @ - 663 , 11 + 660 , 6 @ @ abstract class BaseRealm implements Closeable { <nl> } <nl> } <nl> <nl> - / / Return true if this Realm can receive notifications . <nl> - boolean hasValidNotifier ( ) { <nl> - return sharedRealm . realmNotifier ! = null & & sharedRealm . realmNotifier . isValid ( ) ; <nl> - } <nl> - <nl> @ Override <nl> protected void finalize ( ) throws Throwable { <nl> if ( sharedRealm ! = null & & ! sharedRealm . isClosed ( ) ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / HandlerController . java b / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> index a0b06bc . . b3c28c8 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / HandlerController . java <nl> @ @ - 267 , 6 + 267 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> } <nl> <nl> private void updateAsyncEmptyRealmObject ( ) { <nl> + / * <nl> Iterator < Map . Entry < WeakReference < RealmObjectProxy > , RealmQuery < ? > > > iterator = emptyAsyncRealmObject . entrySet ( ) . iterator ( ) ; <nl> while ( iterator . hasNext ( ) ) { <nl> Map . Entry < WeakReference < RealmObjectProxy > , RealmQuery < ? > > next = iterator . next ( ) ; <nl> @ @ - 285 , 6 + 286 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> iterator . remove ( ) ; <nl> } <nl> } <nl> + * / <nl> } <nl> <nl> / * * <nl> @ @ - 382 , 6 + 384 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> } <nl> <nl> private void updateAsyncQueries ( ) { <nl> + / * <nl> if ( updateAsyncQueriesTask ! = null & & ! updateAsyncQueriesTask . isDone ( ) ) { <nl> / / try to cancel any pending update since we ' re submitting a new one anyway <nl> updateAsyncQueriesTask . cancel ( true ) ; <nl> @ @ - 425 , 6 + 428 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> . build ( ) ; <nl> updateAsyncQueriesTask = Realm . asyncTaskExecutor . submitQueryUpdate ( queryUpdateTask ) ; <nl> } <nl> + * / <nl> } <nl> <nl> private void realmChanged ( boolean localCommit ) { <nl> @ @ - 458 , 6 + 462 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> } <nl> <nl> private void completedAsyncRealmResults ( QueryUpdateTask . Result result ) { <nl> + / * <nl> Set < WeakReference < RealmResults < ? extends RealmModel > > > updatedTableViewsKeys = result . updatedTableViews . keySet ( ) ; <nl> if ( updatedTableViewsKeys . size ( ) > 0 ) { <nl> WeakReference < RealmResults < ? extends RealmModel > > weakRealmResults = updatedTableViewsKeys . iterator ( ) . next ( ) ; <nl> @ @ - 526 , 6 + 531 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> } <nl> } <nl> } <nl> + * / <nl> } <nl> <nl> private void completedAsyncQueriesUpdate ( QueryUpdateTask . Result result ) { <nl> @ @ - 604 , 6 + 610 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> } <nl> <nl> private void completedAsyncRealmObject ( QueryUpdateTask . Result result ) { <nl> + / * <nl> Set < WeakReference < RealmObjectProxy > > updatedRowKey = result . updatedRow . keySet ( ) ; <nl> if ( updatedRowKey . size ( ) > 0 ) { <nl> WeakReference < RealmObjectProxy > realmObjectWeakReference = updatedRowKey . iterator ( ) . next ( ) ; <nl> @ @ - 664 , 6 + 671 , 7 @ @ final class HandlerController implements Handler . Callback { <nl> } <nl> } / / else : element GC ' d in the meanwhile <nl> } <nl> + * / <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 506266a . . dab358d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 1327 , 10 + 1327 , 13 @ @ public final class Realm extends BaseRealm { <nl> <nl> / / If the user provided a Callback then we make sure , the current Realm has a Handler <nl> / / we can use to deliver the result <nl> + / / FIXME : Implement checking here . <nl> + / * <nl> if ( ( onSuccess ! = null | | onError ! = null ) & & ! hasValidNotifier ( ) ) { <nl> throw new IllegalStateException ( " Your Realm is opened from a thread without a Looper " + <nl> " and you provided a callback , we need a Handler to invoke your callback " ) ; <nl> } <nl> + * / <nl> <nl> / / We need to use the same configuration to open a background SharedRealm ( i . e Realm ) <nl> / / to perform the transaction <nl> @ @ - 1370 , 12 + 1373 , 14 @ @ public final class Realm extends BaseRealm { <nl> bgRealm . close ( ) ; <nl> } <nl> <nl> + / / This will be treated like a special REALM _ CHANGED event <nl> + / / FIXME : Find a way to deliver the callback with current architecture <nl> + / * <nl> final Throwable backgroundException = exception [ 0 ] ; <nl> / / Send response as the final step to ensure the bg thread quit before others get the response ! <nl> if ( hasValidNotifier ( ) & & ! Thread . currentThread ( ) . isInterrupted ( ) ) { <nl> <nl> if ( transactionCommitted ) { <nl> - / / This will be treated like a special REALM _ CHANGED event <nl> sharedRealm . realmNotifier . post ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> @ @ - 1429 , 6 + 1434 , 7 @ @ public final class Realm extends BaseRealm { <nl> } <nl> } <nl> } <nl> + * / <nl> } <nl> } <nl> } ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 337e72d . . 6b93e71 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 66 , 10 + 66 , 6 @ @ public final class RealmQuery < E extends RealmModel > { <nl> private static final String TYPE _ MISMATCH = " Field ' % s ' : type mismatch - % s expected . " ; <nl> private static final String EMPTY _ VALUES = " Non - empty ' values ' must be provided . " ; <nl> <nl> - <nl> - private final static Long INVALID _ NATIVE _ POINTER = 0L ; <nl> - private ArgumentsHolder argumentsHolder ; <nl> - <nl> / * * <nl> * Creates a query for objects of a given class from a { @ link Realm } . <nl> * <nl> @ @ - 1326 , 7 + 1322 , 6 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * is not indexed , or points to linked fields . <nl> * / <nl> public RealmResults < E > distinct ( String fieldName ) { <nl> - checkQueryIsNotReused ( ) ; <nl> SortDescriptor distinctDescriptor = SortDescriptor . getInstanceForDistinct ( query . getTable ( ) , fieldName ) ; <nl> Collection collection = new Collection ( realm . sharedRealm , query , null , distinctDescriptor ) ; <nl> return createRealmResults ( collection ) ; <nl> @ @ - 1352 , 7 + 1347 , 6 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * is an unsupported type , or points to a linked field . <nl> * / <nl> public RealmResults < E > distinct ( String firstFieldName , String . . . remainingFieldNames ) { <nl> - checkQueryIsNotReused ( ) ; <nl> String [ ] fieldNames = new String [ 1 + remainingFieldNames . length ] ; <nl> <nl> fieldNames [ 0 ] = firstFieldName ; <nl> @ @ - 1513 , 7 + 1507 , 6 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> public RealmResults < E > findAll ( ) { <nl> - checkQueryIsNotReused ( ) ; <nl> Collection collection = new Collection ( realm . sharedRealm , query ) ; <nl> return createRealmResults ( collection ) ; <nl> } <nl> @ @ - 1540 , 7 + 1533 , 6 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> public RealmResults < E > findAllSorted ( String fieldName , Sort sortOrder ) { <nl> - checkQueryIsNotReused ( ) ; <nl> SortDescriptor sortDescriptor = SortDescriptor . getInstanceForSort ( query . getTable ( ) , fieldName , sortOrder ) ; <nl> <nl> Collection collection = new Collection ( realm . sharedRealm , query , sortDescriptor ) ; <nl> @ @ - 1592 , 8 + 1584 , 6 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * { @ link RealmObject } or a child { @ link RealmList } . <nl> * / <nl> public RealmResults < E > findAllSorted ( String fieldNames [ ] , Sort sortOrders [ ] ) { <nl> - checkQueryIsNotReused ( ) ; <nl> - <nl> SortDescriptor sortDescriptor = SortDescriptor . getInstanceForSort ( query . getTable ( ) , fieldNames , sortOrders ) ; <nl> <nl> Collection collection = new Collection ( realm . sharedRealm , query , sortDescriptor ) ; <nl> @ @ - 1646 , 8 + 1636 , 6 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * @ see io . realm . RealmObject <nl> * / <nl> public E findFirst ( ) { <nl> - checkQueryIsNotReused ( ) ; <nl> - <nl> Row row ; <nl> if ( realm . isInTransaction ( ) ) { <nl> / / It is not possible to create async query inside a transaction . So immediately query the first object . <nl> @ @ - 1701 , 74 + 1689 , 6 @ @ public final class RealmQuery < E extends RealmModel > { <nl> } <nl> } <nl> <nl> - private WeakReference < RealmNotifier > getWeakReferenceNotifier ( ) { <nl> - if ( realm . sharedRealm . realmNotifier = = null | | ! realm . sharedRealm . realmNotifier . isValid ( ) ) { <nl> - throw new IllegalStateException ( " Your Realm is opened from a thread without a Looper . " + <nl> - " Async queries need a Handler to send results of your query " ) ; <nl> - } <nl> - return new WeakReference < RealmNotifier > ( realm . sharedRealm . realmNotifier ) ; / / use caller Realm ' s Looper <nl> - } <nl> - <nl> - / / The shared group needs to be closed before sending the message to other threads to avoid timing problems . <nl> - / / eg . : The other thread wants to delete Realm when getting notified . <nl> - private void closeSharedRealmAndSendEventToNotifier ( SharedRealm sharedRealm , <nl> - WeakReference < RealmNotifier > weakNotifier , <nl> - QueryUpdateTask . NotifyEvent event , Object obj ) { <nl> - if ( sharedRealm ! = null ) { <nl> - sharedRealm . close ( ) ; <nl> - } <nl> - <nl> - RealmNotifier notifier = weakNotifier . get ( ) ; <nl> - if ( notifier ! = null ) { <nl> - switch ( event ) { <nl> - case COMPLETE _ ASYNC _ RESULTS : <nl> - notifier . completeAsyncResults ( ( QueryUpdateTask . Result ) obj ) ; <nl> - break ; <nl> - case COMPLETE _ ASYNC _ OBJECT : <nl> - notifier . completeAsyncObject ( ( QueryUpdateTask . Result ) obj ) ; <nl> - break ; <nl> - case THROW _ BACKGROUND _ EXCEPTION : <nl> - notifier . throwBackgroundException ( ( Throwable ) obj ) ; <nl> - break ; <nl> - default : <nl> - / / Should not get here . <nl> - throw new IllegalStateException ( String . format ( " % s is not handled here . " , event ) ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - / / We need to prevent the user from using the query again ( mostly for async ) <nl> - / / Ex : if the first query fail with findFirstAsync , if the user reuse the same RealmQuery <nl> - / / with findAllSorted , argumentsHolder of the first query will be overridden , <nl> - / / which cause any retry to use the findAllSorted argumentsHolder . <nl> - private void checkQueryIsNotReused ( ) { <nl> - if ( argumentsHolder ! = null ) { <nl> - throw new IllegalStateException ( " This RealmQuery is already used by a find * query , please create a new query " ) ; <nl> - } <nl> - } <nl> - <nl> - private long getSourceRowIndexForFirstObject ( ) { <nl> - long tableRowIndex = this . query . find ( ) ; <nl> - return tableRowIndex ; <nl> - } <nl> - / / Get the column index for sorting related functions . A proper exception will be thrown if the field doesn ' t exist <nl> - / / or it belongs to the child object . <nl> - private long getColumnIndexForSort ( String fieldName ) { <nl> - if ( fieldName = = null | | fieldName . isEmpty ( ) ) { <nl> - throw new IllegalArgumentException ( " Non - empty fieldname required . " ) ; <nl> - } <nl> - if ( fieldName . contains ( " . " ) ) { <nl> - throw new IllegalArgumentException ( " Sorting using child object fields is not supported : " + fieldName ) ; <nl> - } <nl> - <nl> - Long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - if ( columnIndex = = null ) { <nl> - throw new IllegalArgumentException ( String . format ( " Field name ' % s ' does not exist . " , fieldName ) ) ; <nl> - } <nl> - <nl> - return columnIndex ; <nl> - } <nl> - <nl> private RealmResults < E > createRealmResults ( Collection collection ) { <nl> if ( isDynamicQuery ( ) ) { <nl> return new RealmResults < E > ( realm , collection , className ) ; <nl> @ @ - 1776 , 17 + 1696 , 4 @ @ public final class RealmQuery < E extends RealmModel > { <nl> return new RealmResults < E > ( realm , collection , clazz ) ; <nl> } <nl> } <nl> - <nl> - public ArgumentsHolder getArgument ( ) { <nl> - return argumentsHolder ; <nl> - } <nl> - <nl> - / * * <nl> - * Exports & handovers the query to be used by a worker thread . <nl> - * <nl> - * @ return the exported handover pointer for this RealmQuery . <nl> - * / <nl> - long handoverQueryPointer ( ) { <nl> - return query . handoverQuery ( realm . sharedRealm ) ; <nl> - } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java b / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java <nl> new file mode 100644 <nl> index 0000000 . . 230c17c <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . internal ; <nl> + <nl> + public interface Capabilities { <nl> + boolean canDeliverNotification ( ) ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java b / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java <nl> new file mode 100644 <nl> index 0000000 . . 190f8fd <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package io . realm . internal ; <nl> + <nl> + import java . lang . ref . WeakReference ; <nl> + <nl> + public abstract class ObserverPair < T > { <nl> + public final T listener ; <nl> + public final WeakReference < Object > observerRef ; <nl> + <nl> + public ObserverPair ( T listener , Object objectRef ) { <nl> + this . listener = listener ; <nl> + this . observerRef = new WeakReference < Object > ( objectRef ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object obj ) { <nl> + if ( this = = obj ) { <nl> + return true ; <nl> + } <nl> + <nl> + if ( obj instanceof ObserverPair ) { <nl> + ObserverPair anotherPair = ( ObserverPair ) obj ; <nl> + return listener . equals ( anotherPair . listener ) & & <nl> + observerRef . get ( ) = = anotherPair . observerRef . get ( ) ; <nl> + } <nl> + return false ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> index aaf97b6 . . 689d8b9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> @ @ - 16 , 50 + 16 , 82 @ @ <nl> <nl> package io . realm . internal ; <nl> <nl> - import io . realm . internal . async . QueryUpdateTask ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . CopyOnWriteArrayList ; <nl> + <nl> + import io . realm . RealmChangeListener ; <nl> <nl> / * * <nl> * This interface needs to be implemented by Java and pass to Realm Object Store in order to get notifications when <nl> * other thread / process changes the Realm file . <nl> * / <nl> @ Keep <nl> - public interface RealmNotifier { <nl> - / * * <nl> - * This is called from Java when the changes have been made on the same thread . <nl> - * / <nl> - void notifyCommitByLocalThread ( ) ; <nl> + public class RealmNotifier { <nl> + <nl> + private static class RealmObserverPair extends ObserverPair < RealmChangeListener > { <nl> + <nl> + public RealmObserverPair ( Object observer , RealmChangeListener listener ) { <nl> + super ( listener , observer ) ; <nl> + } <nl> + <nl> + private void onChange ( ) { <nl> + Object observer = observerRef . get ( ) ; <nl> + if ( observer ! = null ) { <nl> + listener . onChange ( observer ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private List < RealmObserverPair > realmObserverPairs = new CopyOnWriteArrayList < RealmObserverPair > ( ) ; <nl> <nl> + / / This is called by OS when other thread / process changes the Realm . <nl> + / / This is getting called on the same thread which created the Realm . <nl> + / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | <nl> + / / | Thread A | Thread B | Daemon Thread | <nl> + / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | <nl> + / / | | Make changes | | <nl> + / / | | | Detect and notify thread A through JNI ALooper | <nl> + / / | Call OS ' s Realm : : notify ( ) from OS ' s ALooper callback | | | <nl> + / / | Realm : : notify ( ) calls JavaBindingContext : change _ available ( ) | | | <nl> + / / | change _ available calls into this method to send REALM _ CHANGED | | | <nl> + / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | <nl> / * * <nl> * This is called in Realm Object Store ' s JavaBindingContext : : changes _ available . <nl> * This is getting called on the same thread which created this Realm when the same Realm file has been changed by <nl> * other thread . The changes on the same thread should not trigger this call . <nl> * / <nl> @ SuppressWarnings ( " unused " ) / / called from java _ binding _ context . cpp <nl> - void notifyCommitByOtherThread ( ) ; <nl> + void notifyCommitByOtherThread ( ) { <nl> + for ( RealmObserverPair observerPair : realmObserverPairs ) { <nl> + Object observer = observerPair . observerRef . get ( ) ; <nl> + if ( observer = = null ) { <nl> + realmObserverPairs . remove ( observerPair ) ; <nl> + } else { <nl> + observerPair . onChange ( ) ; <nl> + } <nl> + } <nl> + } <nl> <nl> / * * <nl> - * Post a runnable to be run in the next event loop on the thread which creates the corresponding Realm . <nl> - * <nl> - * @ param runnable to be posted . <nl> + * Called when close SharedRealm to clean up any event left in to queue . <nl> * / <nl> - void post ( Runnable runnable ) ; <nl> + public void close ( ) { <nl> + removeAllChangeListeners ( ) ; <nl> + } <nl> <nl> - / * * <nl> - * Is the current notifier valid ? eg . Notifier created on non - looper thread cannot be notified . <nl> - * <nl> - * @ return { @ code true } if the thread which owns this notifier can be notified . Otherwise { @ code false } <nl> - * / <nl> - boolean isValid ( ) ; <nl> + public void addChangeListener ( Object observer , RealmChangeListener realmChangeListener ) { <nl> + RealmObserverPair observerPair = new RealmObserverPair ( observer , realmChangeListener ) ; <nl> + if ( ! realmObserverPairs . contains ( observerPair ) ) { <nl> + realmObserverPairs . add ( observerPair ) ; <nl> + } <nl> + } <nl> <nl> - / * * <nl> - * Called when close SharedRealm to clean up any event left in to queue . <nl> - * / <nl> - void close ( ) ; <nl> + public void removeChangeListener ( Object observer , RealmChangeListener realmChangeListener ) { <nl> + RealmObserverPair observerPair = new RealmObserverPair ( observer , realmChangeListener ) ; <nl> + realmObserverPairs . remove ( observerPair ) ; <nl> + } <nl> <nl> - / / FIXME : These are for decoupling handler from async query . Async query needs refactor to either adapt the OS or <nl> - / / abstract the logic from Android handlers . <nl> - void completeAsyncResults ( QueryUpdateTask . Result result ) ; <nl> - void completeAsyncObject ( QueryUpdateTask . Result result ) ; <nl> - void throwBackgroundException ( Throwable throwable ) ; <nl> - void completeUpdateAsyncQueries ( QueryUpdateTask . Result result ) ; <nl> + public void removeAllChangeListeners ( ) { <nl> + realmObserverPairs . clear ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java <nl> index 4e6f2b7 . . b0de844 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java <nl> @ @ - 16 , 14 + 16 , 15 @ @ <nl> <nl> package io . realm . internal ; <nl> <nl> - import java . lang . ref . WeakReference ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> import io . realm . RealmChangeListener ; <nl> <nl> + @ Keep <nl> public class RowNotifier { <nl> <nl> + @ Keep <nl> private static class Observer { <nl> final RealmChangeListener listener ; <nl> final Object object ; <nl> @ @ - 33 , 6 + 34 , 9 @ @ public class RowNotifier { <nl> this . object = object ; <nl> this . row = null ; <nl> } <nl> + <nl> + / / Called by JNI <nl> + @ SuppressWarnings ( " unused " ) <nl> public void notifyListener ( ) { <nl> listener . onChange ( object ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java <nl> new file mode 100644 <nl> index 0000000 . . d043867 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package io . realm . internal . android ; <nl> + <nl> + import android . os . Looper ; <nl> + <nl> + import io . realm . internal . Capabilities ; <nl> + <nl> + public class AndroidCapabilities implements Capabilities { <nl> + <nl> + @ Override <nl> + public boolean canDeliverNotification ( ) { <nl> + return ( Looper . myLooper ( ) ! = null & & ! isIntentServiceThread ( ) ) ; <nl> + } <nl> + <nl> + private static boolean isIntentServiceThread ( ) { <nl> + / / Tries to determine if a thread is an IntentService thread . No public API can detect this , <nl> + / / so use the thread name as a heuristic : <nl> + / / https : / / android . googlesource . com / platform / frameworks / base / + / master / core / java / android / app / IntentService . java # 108 <nl> + String threadName = Thread . currentThread ( ) . getName ( ) ; <nl> + return threadName ! = null & & threadName . startsWith ( " IntentService [ " ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java <nl> index f2b05d5 . . 632552f 100644 <nl> - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java <nl> + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import android . widget . TextView ; <nl> import java . io . IOException ; <nl> <nl> import io . realm . Realm ; <nl> - import io . realm . ResultList ; <nl> + import io . realm . RealmResults ; <nl> import io . realm . examples . realmintroexample . model . Cat ; <nl> import io . realm . examples . realmintroexample . model . Dog ; <nl> import io . realm . examples . realmintroexample . model . Person ; <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class RealmBasicExampleActivity extends Activity { <nl> <nl> Realm realm = new Realm ( this ) ; <nl> showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; <nl> - ResultList < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; <nl> + RealmResults < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; <nl> showStatus ( " Size of result set : " + result . size ( ) ) ; <nl> } <nl> <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class RealmBasicExampleActivity extends Activity { <nl> Realm realm = new Realm ( this ) ; <nl> status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; <nl> / / Find all persons where age > 5 <nl> - ResultList < Person > result = realm . where ( Person . class ) <nl> + RealmResults < Person > result = realm . where ( Person . class ) <nl> . greaterThan ( " age " , 5 ) . between ( " age " , 7 , 9 ) . beginsWith ( " name " , " Person " ) . findAll ( ) ; <nl> status + = " \ nSize of result set : " + result . size ( ) ; <nl> return status ; <nl> diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> index 6129e54 . . 33a6375 100644 <nl> - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package io . realm . examples . realmintroexample . model ; <nl> <nl> - import io . realm . RelationList ; <nl> + import io . realm . RealmList ; <nl> import io . realm . RealmObject ; <nl> <nl> public class Person extends RealmObject { <nl> @ @ - 8 , 7 + 8 , 7 @ @ public class Person extends RealmObject { <nl> private String name ; <nl> private int age ; <nl> private Dog dog ; <nl> - private RelationList < Cat > cats ; <nl> + private RealmList < Cat > cats ; <nl> <nl> public String getName ( ) { <nl> return name ; <nl> @ @ - 34 , 11 + 34 , 11 @ @ public class Person extends RealmObject { <nl> this . dog = dog ; <nl> } <nl> <nl> - public RelationList < Cat > getCats ( ) { <nl> + public RealmList < Cat > getCats ( ) { <nl> return cats ; <nl> } <nl> <nl> - public void setCats ( RelationList < Cat > cats ) { <nl> + public void setCats ( RealmList < Cat > cats ) { <nl> this . cats = cats ; <nl> } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java <nl> index a684c2d . . 0146782 100755 <nl> - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java <nl> + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import android . view . ViewGroup ; <nl> import android . widget . BaseAdapter ; <nl> import android . widget . TextView ; <nl> <nl> - import io . realm . ResultList ; <nl> + import java . util . List ; <nl> <nl> public class CityAdapter extends BaseAdapter { <nl> <nl> @ @ - 15 , 13 + 15 , 13 @ @ public class CityAdapter extends BaseAdapter { <nl> <nl> private LayoutInflater inflater ; <nl> <nl> - private ResultList < City > cities = null ; <nl> + private List < City > cities = null ; <nl> <nl> public CityAdapter ( Context context ) { <nl> inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT _ INFLATER _ SERVICE ) ; <nl> } <nl> <nl> - public void setData ( ResultList < City > details ) { <nl> + public void setData ( List < City > details ) { <nl> this . cities = details ; <nl> } <nl> <nl> diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> index d7b98cd . . 71ae952 100644 <nl> - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ import java . util . List ; <nl> <nl> import io . realm . Realm ; <nl> import io . realm . RealmQuery ; <nl> - import io . realm . ResultList ; <nl> + import io . realm . RealmResults ; <nl> <nl> public class RealmExampleActivity extends Activity implements LoaderManager . LoaderCallbacks < List < City > > , AdapterView . OnItemClickListener { <nl> <nl> @ @ - 64 , 7 + 64 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load <nl> <nl> public void updateCities ( ) { <nl> Realm realm = new Realm ( this ) ; <nl> - ResultList < City > cities = realm . where ( City . class ) . findAll ( ) ; <nl> + RealmResults < City > cities = realm . where ( City . class ) . findAll ( ) ; <nl> mAdapter . setData ( cities ) ; <nl> <nl> mAdapter . notifyDataSetChanged ( ) ; <nl> diff - - git a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> index 3f62975 . . 851cdda 100644 <nl> - - - a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> + + + b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import io . realm . Realm ; <nl> - import io . realm . ResultList ; <nl> + import io . realm . RealmResults ; <nl> import io . realm . internal . ColumnType ; <nl> import io . realm . internal . ReadTransaction ; <nl> import io . realm . internal . SharedGroup ; <nl> @ @ - 111 , 7 + 111 , 7 @ @ public class PerformanceTask extends AsyncTask < Integer , String , String > { <nl> <nl> timer = System . currentTimeMillis ( ) ; <nl> / / Debug . startMethodTracing ( " reads " ) ; <nl> - ResultList < User > realmList = realm . where ( User . class ) . findAll ( ) ; <nl> + RealmResults < User > realmList = realm . where ( User . class ) . findAll ( ) ; <nl> for ( int i = 0 ; i < listSize ; i + + ) { <nl> / / IUser u = realmList . getTest ( i , IUser . class ) ; <nl> User u = realmList . get ( i ) ; <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java <nl> index cc295fc . . 9bb0e96 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class RealmSourceCodeGenerator { <nl> Types typeUtils = processingEnvironment . getTypeUtils ( ) ; <nl> <nl> TypeMirror realmObject = elementUtils . getTypeElement ( " io . realm . RealmObject " ) . asType ( ) ; <nl> - DeclaredType relationList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RelationList " ) , typeUtils . getWildcardType ( null , null ) ) ; <nl> + DeclaredType realmList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; <nl> <nl> / / Set source code indent to 4 spaces <nl> writer . setIndent ( " " ) ; <nl> @ @ - 134 , 7 + 134 , 7 @ @ public class RealmSourceCodeGenerator { <nl> " io . realm . internal . ImplicitTransaction " , <nl> " io . realm . internal . Row " , <nl> " io . realm . internal . LinkView " , <nl> - " io . realm . RelationList " , <nl> + " io . realm . RealmList " , <nl> " io . realm . RealmObject " ) <nl> . emitEmptyLine ( ) ; <nl> <nl> @ @ - 203 , 7 + 203 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . endControlFlow ( ) ; <nl> writer . emitStatement ( " realmGetRow ( ) . setLink ( % d , value . realmGetRow ( ) . getIndex ( ) ) " , columnNumber ) ; <nl> writer . endMethod ( ) ; <nl> - } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { <nl> + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> / * * <nl> * LinkLists <nl> * / <nl> @ @ - 219 , 7 + 219 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( fieldTypeCanonicalName , " get " + capitaliseFirstChar ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; <nl> writer . emitStatement ( <nl> - " return new RelationList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , <nl> + " return new RealmList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , <nl> genericType , columnNumber ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> @ @ - 231 , 7 + 231 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . beginControlFlow ( " if ( value = = null ) " ) ; <nl> writer . emitStatement ( " return " ) ; / / TODO : delete all the links instead <nl> writer . endControlFlow ( ) ; <nl> - writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RelationList < ? extends RealmObject > ) value ) " ) ; <nl> + writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RealmList < ? extends RealmObject > ) value ) " ) ; <nl> writer . emitStatement ( " links . add ( linkedObject . realmGetRow ( ) . getIndex ( ) ) " ) ; <nl> writer . endControlFlow ( ) ; <nl> writer . endMethod ( ) ; <nl> @ @ - 275 , 7 + 275 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . endControlFlow ( ) ; <nl> writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK , \ " % s \ " , transaction . getTable ( \ " % s \ " ) ) " , <nl> fieldName . toLowerCase ( Locale . getDefault ( ) ) , fieldTypeName ) ; <nl> - } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { <nl> + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; <nl> String genericType ; <nl> if ( genericCanonicalType . contains ( " . " ) ) { <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index ccce5d2 . . 3cbbacd 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 424 , 7 + 424 , 7 @ @ public class Realm { <nl> } <nl> <nl> <nl> - public < E extends RealmObject > ResultList < E > allObjects ( Class < E > clazz ) { <nl> + public < E extends RealmObject > RealmResults < E > allObjects ( Class < E > clazz ) { <nl> return where ( clazz ) . findAll ( ) ; <nl> } <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> new file mode 100644 <nl> index 0000000 . . f2944de <nl> - - - / dev / null <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 0 , 0 + 1 , 89 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm ; <nl> + <nl> + import java . util . AbstractList ; <nl> + <nl> + import io . realm . internal . LinkView ; <nl> + <nl> + public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> + <nl> + private Class < E > clazz ; <nl> + private LinkView view ; <nl> + private Realm realm ; <nl> + <nl> + public RealmList ( Class < E > clazz , LinkView view , Realm realm ) { <nl> + this . clazz = clazz ; <nl> + this . view = view ; <nl> + this . realm = realm ; <nl> + } <nl> + <nl> + @ Override <nl> + public void add ( int location , E object ) { <nl> + view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public E set ( int location , E object ) { <nl> + view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; <nl> + return object ; <nl> + } <nl> + <nl> + public void move ( int oldPos , int newPos ) { <nl> + view . move ( oldPos , newPos ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void clear ( ) { <nl> + view . clear ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public E remove ( int location ) { <nl> + view . remove ( location ) ; <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public E get ( int i ) { <nl> + return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; <nl> + } <nl> + <nl> + public E first ( ) { <nl> + if ( ! view . isEmpty ( ) ) { <nl> + return get ( 0 ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + public E last ( ) { <nl> + if ( ! view . isEmpty ( ) ) { <nl> + return get ( size ( ) - 1 ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public int size ( ) { <nl> + return ( ( Long ) view . size ( ) ) . intValue ( ) ; <nl> + } <nl> + <nl> + public RealmQuery < E > where ( ) { <nl> + return null ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index 68ebcb2 . . 97ee1f5 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import io . realm . internal . TableQuery ; <nl> * / <nl> public class RealmQuery < E extends RealmObject > { <nl> <nl> - private ResultList realmList ; <nl> + private RealmResults realmList ; <nl> private Realm realm ; <nl> private TableQuery query ; <nl> private Map < String , Integer > columns = new HashMap < String , Integer > ( ) ; <nl> @ @ - 48 , 7 + 48 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> } <nl> } <nl> <nl> - public RealmQuery ( ResultList realmList , Class < E > clazz ) { <nl> + public RealmQuery ( RealmResults realmList , Class < E > clazz ) { <nl> this . realmList = realmList ; <nl> <nl> this . realm = realmList . getRealm ( ) ; <nl> @ @ - 454 , 12 + 454 , 12 @ @ public class RealmQuery < E extends RealmObject > { <nl> <nl> / / Execute <nl> <nl> - public ResultList < E > findAll ( ) { <nl> - return new ResultList < E > ( realm , query . findAll ( ) , clazz ) ; <nl> + public RealmResults < E > findAll ( ) { <nl> + return new RealmResults < E > ( realm , query . findAll ( ) , clazz ) ; <nl> } <nl> <nl> public E findFirst ( ) { <nl> - ResultList < E > result = findAll ( ) ; <nl> + RealmResults < E > result = findAll ( ) ; <nl> if ( result . size ( ) > 0 ) { <nl> return findAll ( ) . get ( 0 ) ; <nl> } else { <nl> diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java <nl> new file mode 100644 <nl> index 0000000 . . d1d8c30 <nl> - - - / dev / null <nl> + + + b / realm / src / main / java / io / realm / RealmResults . java <nl> @ @ - 0 , 0 + 1 , 273 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm ; <nl> + <nl> + <nl> + import java . util . AbstractList ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import io . realm . internal . TableOrView ; <nl> + import io . realm . internal . TableView ; <nl> + <nl> + / * * <nl> + * <nl> + * @ param < E > The class of objects in this list <nl> + * / <nl> + public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> + <nl> + private Class < E > classSpec ; <nl> + private Realm realm ; <nl> + private TableOrView table = null ; <nl> + <nl> + RealmResults ( Realm realm , Class < E > classSpec ) { <nl> + this . realm = realm ; <nl> + this . classSpec = classSpec ; <nl> + } <nl> + <nl> + RealmResults ( Realm realm , TableOrView table , Class < E > classSpec ) { <nl> + this ( realm , classSpec ) ; <nl> + this . table = table ; <nl> + } <nl> + <nl> + Realm getRealm ( ) { <nl> + return realm ; <nl> + } <nl> + <nl> + TableOrView getTable ( ) { <nl> + <nl> + if ( table = = null ) { <nl> + return realm . getTable ( classSpec ) ; <nl> + } else { <nl> + return table ; <nl> + } <nl> + } <nl> + <nl> + Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; <nl> + <nl> + <nl> + public RealmQuery < E > where ( ) { <nl> + return new RealmQuery < E > ( this , classSpec ) ; <nl> + } <nl> + <nl> + <nl> + @ Override <nl> + public E get ( int rowIndex ) { <nl> + <nl> + E obj ; <nl> + <nl> + TableOrView table = getTable ( ) ; <nl> + if ( table instanceof TableView ) { <nl> + obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; <nl> + } else { <nl> + obj = realm . get ( classSpec , rowIndex ) ; <nl> + } <nl> + <nl> + return obj ; <nl> + } <nl> + <nl> + public E first ( ) { <nl> + return get ( 0 ) ; <nl> + } <nl> + <nl> + public E last ( ) { <nl> + return get ( size ( ) - 1 ) ; <nl> + } <nl> + <nl> + / / Sorting <nl> + <nl> + / / public static enum Order { <nl> + / / ASCENDING , DESCENDING <nl> + / / } <nl> + / / <nl> + / / / * * <nl> + / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . <nl> + / / * <nl> + / / * @ param fieldName The field name to sort by . <nl> + / / * @ return A sorted RealmList <nl> + / / * / <nl> + / / public RealmList < E > sort ( String fieldName ) { <nl> + / / return sort ( fieldName , Order . ASCENDING ) ; <nl> + / / } <nl> + / / <nl> + / / / * * <nl> + / / * Get a sorted RealmList from an existing RealmList . <nl> + / / * <nl> + / / * @ param fieldName The field name to sort by . <nl> + / / * @ param sortOrder The direction to sort by . <nl> + / / * @ return A sorted RealmList . <nl> + / / * / <nl> + / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { <nl> + / / throw new NoSuchMethodError ( ) ; <nl> + / / } <nl> + <nl> + <nl> + / / Aggregates <nl> + <nl> + @ Override <nl> + public int size ( ) { <nl> + return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Find the minimum value of a field . <nl> + * <nl> + * @ param fieldName The field to look for a minimum on . Only int , float , and double <nl> + * are supported . <nl> + * @ return <nl> + * / <nl> + public Number min ( String fieldName ) { <nl> + / / TODO : Date <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . minimumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . minimumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . minimumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Find the maximum value of a field . <nl> + * <nl> + * @ param fieldName The field to look for a maximum on . Only int , float , and double <nl> + * are supported . <nl> + * @ return The maximum value . <nl> + * / <nl> + public Number max ( String fieldName ) { <nl> + / / TODO : Date <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . maximumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . maximumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . maximumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Calculate the sum of a field . <nl> + * <nl> + * @ param fieldName The field to sum . Only int , float , and double are supported . <nl> + * @ return The sum . <nl> + * / <nl> + <nl> + public Number sum ( String fieldName ) { <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . sumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . sumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . sumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Returns the average of a given field for objects in a RealmList . <nl> + * <nl> + * @ param fieldName The field to calculate average on . Only properties of type int , <nl> + * float and double are supported . <nl> + * @ return The average for the given field amongst objects in an RealmList . This <nl> + * will be of type double for both float and double field . <nl> + * / <nl> + public double average ( String fieldName ) { <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . averageLong ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . averageDouble ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . averageFloat ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / / Deleting <nl> + <nl> + / * * <nl> + * Removes an object at a given index . <nl> + * <nl> + * @ param index The array index identifying the object to be removed . <nl> + * @ return Always return null . <nl> + * / <nl> + @ Override <nl> + public E remove ( int index ) { <nl> + TableOrView table = getTable ( ) ; <nl> + table . remove ( index ) ; <nl> + return null ; <nl> + } <nl> + <nl> + / * * <nl> + * Removes the last object in a RealmList . <nl> + * <nl> + * / <nl> + public void removeLast ( ) { <nl> + TableOrView table = getTable ( ) ; <nl> + table . removeLast ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Removes all objects from a RealmList . <nl> + * <nl> + * / <nl> + public void clear ( ) { <nl> + TableOrView table = getTable ( ) ; <nl> + table . clear ( ) ; <nl> + } <nl> + <nl> + / / Adding objects <nl> + <nl> + @ Override <nl> + @ Deprecated <nl> + public boolean add ( E element ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Deprecated <nl> + public void add ( int index , E element ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + / / <nl> + / / / * * <nl> + / / * Replaces an object at the given index with a new object . <nl> + / / * <nl> + / / * @ param index The array index of the object to be replaced . <nl> + / / * @ param element An object . <nl> + / / * / <nl> + / / public void replace ( int index , E element ) { <nl> + / / throw new NoSuchMethodError ( ) ; <nl> + / / } <nl> + } <nl> diff - - git a / realm / src / main / java / io / realm / RelationList . java b / realm / src / main / java / io / realm / RelationList . java <nl> deleted file mode 100644 <nl> index 3616353 . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / RelationList . java <nl> + + + / dev / null <nl> @ @ - 1 , 89 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - import java . util . AbstractList ; <nl> - <nl> - import io . realm . internal . LinkView ; <nl> - <nl> - public class RelationList < E extends RealmObject > extends AbstractList < E > { <nl> - <nl> - private Class < E > clazz ; <nl> - private LinkView view ; <nl> - private Realm realm ; <nl> - <nl> - public RelationList ( Class < E > clazz , LinkView view , Realm realm ) { <nl> - this . clazz = clazz ; <nl> - this . view = view ; <nl> - this . realm = realm ; <nl> - } <nl> - <nl> - @ Override <nl> - public void add ( int location , E object ) { <nl> - view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public E set ( int location , E object ) { <nl> - view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; <nl> - return object ; <nl> - } <nl> - <nl> - public void move ( int oldPos , int newPos ) { <nl> - view . move ( oldPos , newPos ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void clear ( ) { <nl> - view . clear ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public E remove ( int location ) { <nl> - view . remove ( location ) ; <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public E get ( int i ) { <nl> - return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; <nl> - } <nl> - <nl> - public E first ( ) { <nl> - if ( ! view . isEmpty ( ) ) { <nl> - return get ( 0 ) ; <nl> - } <nl> - return null ; <nl> - } <nl> - <nl> - public E last ( ) { <nl> - if ( ! view . isEmpty ( ) ) { <nl> - return get ( size ( ) - 1 ) ; <nl> - } <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public int size ( ) { <nl> - return ( ( Long ) view . size ( ) ) . intValue ( ) ; <nl> - } <nl> - <nl> - public RealmQuery < E > where ( ) { <nl> - return null ; <nl> - } <nl> - <nl> - } <nl> diff - - git a / realm / src / main / java / io / realm / ResultList . java b / realm / src / main / java / io / realm / ResultList . java <nl> deleted file mode 100644 <nl> index c92a51b . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / ResultList . java <nl> + + + / dev / null <nl> @ @ - 1 , 273 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - <nl> - import java . util . AbstractList ; <nl> - import java . util . HashMap ; <nl> - import java . util . Map ; <nl> - <nl> - import io . realm . internal . TableOrView ; <nl> - import io . realm . internal . TableView ; <nl> - <nl> - / * * <nl> - * <nl> - * @ param < E > The class of objects in this list <nl> - * / <nl> - public class ResultList < E extends RealmObject > extends AbstractList < E > { <nl> - <nl> - private Class < E > classSpec ; <nl> - private Realm realm ; <nl> - private TableOrView table = null ; <nl> - <nl> - ResultList ( Realm realm , Class < E > classSpec ) { <nl> - this . realm = realm ; <nl> - this . classSpec = classSpec ; <nl> - } <nl> - <nl> - ResultList ( Realm realm , TableOrView table , Class < E > classSpec ) { <nl> - this ( realm , classSpec ) ; <nl> - this . table = table ; <nl> - } <nl> - <nl> - Realm getRealm ( ) { <nl> - return realm ; <nl> - } <nl> - <nl> - TableOrView getTable ( ) { <nl> - <nl> - if ( table = = null ) { <nl> - return realm . getTable ( classSpec ) ; <nl> - } else { <nl> - return table ; <nl> - } <nl> - } <nl> - <nl> - Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; <nl> - <nl> - <nl> - public RealmQuery < E > where ( ) { <nl> - return new RealmQuery < E > ( this , classSpec ) ; <nl> - } <nl> - <nl> - <nl> - @ Override <nl> - public E get ( int rowIndex ) { <nl> - <nl> - E obj ; <nl> - <nl> - TableOrView table = getTable ( ) ; <nl> - if ( table instanceof TableView ) { <nl> - obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; <nl> - } else { <nl> - obj = realm . get ( classSpec , rowIndex ) ; <nl> - } <nl> - <nl> - return obj ; <nl> - } <nl> - <nl> - public E first ( ) { <nl> - return get ( 0 ) ; <nl> - } <nl> - <nl> - public E last ( ) { <nl> - return get ( size ( ) - 1 ) ; <nl> - } <nl> - <nl> - / / Sorting <nl> - <nl> - / / public static enum Order { <nl> - / / ASCENDING , DESCENDING <nl> - / / } <nl> - / / <nl> - / / / * * <nl> - / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . <nl> - / / * <nl> - / / * @ param fieldName The field name to sort by . <nl> - / / * @ return A sorted RealmList <nl> - / / * / <nl> - / / public RealmList < E > sort ( String fieldName ) { <nl> - / / return sort ( fieldName , Order . ASCENDING ) ; <nl> - / / } <nl> - / / <nl> - / / / * * <nl> - / / * Get a sorted RealmList from an existing RealmList . <nl> - / / * <nl> - / / * @ param fieldName The field name to sort by . <nl> - / / * @ param sortOrder The direction to sort by . <nl> - / / * @ return A sorted RealmList . <nl> - / / * / <nl> - / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { <nl> - / / throw new NoSuchMethodError ( ) ; <nl> - / / } <nl> - <nl> - <nl> - / / Aggregates <nl> - <nl> - @ Override <nl> - public int size ( ) { <nl> - return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Find the minimum value of a field . <nl> - * <nl> - * @ param fieldName The field to look for a minimum on . Only int , float , and double <nl> - * are supported . <nl> - * @ return <nl> - * / <nl> - public Number min ( String fieldName ) { <nl> - / / TODO : Date <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . minimumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . minimumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . minimumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * Find the maximum value of a field . <nl> - * <nl> - * @ param fieldName The field to look for a maximum on . Only int , float , and double <nl> - * are supported . <nl> - * @ return The maximum value . <nl> - * / <nl> - public Number max ( String fieldName ) { <nl> - / / TODO : Date <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . maximumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . maximumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . maximumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * Calculate the sum of a field . <nl> - * <nl> - * @ param fieldName The field to sum . Only int , float , and double are supported . <nl> - * @ return The sum . <nl> - * / <nl> - <nl> - public Number sum ( String fieldName ) { <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . sumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . sumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . sumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * Returns the average of a given field for objects in a RealmList . <nl> - * <nl> - * @ param fieldName The field to calculate average on . Only properties of type int , <nl> - * float and double are supported . <nl> - * @ return The average for the given field amongst objects in an RealmList . This <nl> - * will be of type double for both float and double field . <nl> - * / <nl> - public double average ( String fieldName ) { <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . averageLong ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . averageDouble ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . averageFloat ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / / Deleting <nl> - <nl> - / * * <nl> - * Removes an object at a given index . <nl> - * <nl> - * @ param index The array index identifying the object to be removed . <nl> - * @ return Always return null . <nl> - * / <nl> - @ Override <nl> - public E remove ( int index ) { <nl> - TableOrView table = getTable ( ) ; <nl> - table . remove ( index ) ; <nl> - return null ; <nl> - } <nl> - <nl> - / * * <nl> - * Removes the last object in a RealmList . <nl> - * <nl> - * / <nl> - public void removeLast ( ) { <nl> - TableOrView table = getTable ( ) ; <nl> - table . removeLast ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Removes all objects from a RealmList . <nl> - * <nl> - * / <nl> - public void clear ( ) { <nl> - TableOrView table = getTable ( ) ; <nl> - table . clear ( ) ; <nl> - } <nl> - <nl> - / / Adding objects <nl> - <nl> - @ Override <nl> - @ Deprecated <nl> - public boolean add ( E element ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - @ Deprecated <nl> - public void add ( int index , E element ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - / / <nl> - / / / * * <nl> - / / * Replaces an object at the given index with a new object . <nl> - / / * <nl> - / / * @ param index The array index of the object to be replaced . <nl> - / / * @ param element An object . <nl> - / / * / <nl> - / / public void replace ( int index , E element ) { <nl> - / / throw new NoSuchMethodError ( ) ; <nl> - / / } <nl> - }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 index cca89c9 . . 98756f6 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / DynamicRealmTests . java 
 @ @ - 563 , 7 + 563 , 7 @ @ public class DynamicRealmTests { 
 } 
 } ; 
 
 - dynamicRealm . setHandler ( handler ) ; 
 + / / dynamicRealm . setHandler ( handler ) ; 
 dynamicRealmObject [ 0 ] = dynamicRealm . where ( AllTypes . CLASS _ NAME ) 
 . between ( AllTypes . FIELD _ LONG , 4 , 9 ) 
 . findFirstAsync ( ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 index 9375d6e . . 0244095 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 @ @ - 505 , 7 + 505 , 7 @ @ public class RealmAsyncQueryTests { 
 return false ; 
 } 
 } ; 
 - realm . setHandler ( handler ) ; 
 + / / realm . setHandler ( handler ) ; 
 
 / / 3 . Create a async query 
 final RealmResults < AllTypes > realmResults = realm . where ( AllTypes . class ) 
 @ @ - 573 , 7 + 573 , 7 @ @ public class RealmAsyncQueryTests { 
 return false ; 
 } 
 } ; 
 - realm . setHandler ( handler ) ; 
 + / / realm . setHandler ( handler ) ; 
 
 / / 2 . Create 2 async queries and check they are not loaded 
 final RealmResults < AllTypes > realmResults1 = realm . where ( AllTypes . class ) . findAllAsync ( ) ; 
 @ @ - 674 , 7 + 674 , 7 @ @ public class RealmAsyncQueryTests { 
 return false ; 
 } 
 } ; 
 - realm . setHandler ( handler ) ; 
 + / / realm . setHandler ( handler ) ; 
 
 / / Create async query and verify it has not been loaded . 
 final RealmResults < AllTypes > realmResults = realm . where ( AllTypes . class ) 
 @ @ - 743 , 7 + 743 , 7 @ @ public class RealmAsyncQueryTests { 
 return false ; 
 } 
 } ; 
 - realm . setHandler ( handler ) ; 
 + / / realm . setHandler ( handler ) ; 
 Realm . asyncTaskExecutor . pause ( ) ; 
 
 / / Create async queries and check they haven ' t completed 
 @ @ - 977 , 7 + 977 , 7 @ @ public class RealmAsyncQueryTests { 
 return false ; 
 } 
 } ; 
 - realm . setHandler ( handler ) ; 
 + / / realm . setHandler ( handler ) ; 
 
 / / Create a async query and verify it is not still loaded . 
 final AllTypes realmResults = realm . where ( AllTypes . class ) 
 @ @ - 1074 , 7 + 1074 , 7 @ @ public class RealmAsyncQueryTests { 
 return false ; 
 } 
 } ; 
 - realm . setHandler ( handler ) ; 
 + / / realm . setHandler ( handler ) ; 
 
 / / 3 . This will add a task to the paused asyncTaskExecutor 
 final RealmResults < AllTypes > realmResults = realm . where ( AllTypes . class ) 
 @ @ - 1151 , 7 + 1151 , 7 @ @ public class RealmAsyncQueryTests { 
 return false ; 
 } 
 } ; 
 - realm . setHandler ( handler ) ; 
 + / / realm . setHandler ( handler ) ; 
 
 / / 3 . Create 2 async queries 
 final RealmResults < AllTypes > realmResults1 = realm . where ( AllTypes . class ) 
 @ @ - 1290 , 7 + 1290 , 7 @ @ public class RealmAsyncQueryTests { 
 return false ; 
 } 
 } ; 
 - realm . setHandler ( handler ) ; 
 + / / realm . setHandler ( handler ) ; 
 
 / / 3 . Create 2 async queries 
 final RealmResults < AllTypes > realmResults1 = realm . where ( AllTypes . class ) 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 index cb50a83 . . ebb0a0b 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 @ @ - 29 , 6 + 29 , 8 @ @ import io . realm . entities . AllTypes ; 
 import io . realm . entities . Cat ; 
 import io . realm . entities . Dog ; 
 import io . realm . entities . pojo . AllTypesRealmModel ; 
 + import io . realm . log . LogLevel ; 
 + import io . realm . log . RealmLog ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . rule . RunTestInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 @ @ - 146 , 11 + 148 , 21 @ @ public class RealmChangeListenerTests { 
 cat . addChangeListener ( new RealmChangeListener < Cat > ( ) { 
 @ Override 
 public void onChange ( Cat object ) { 
 - assertEquals ( " cat1 " , object . getName ( ) ) ; 
 - looperThread . testComplete ( ) ; 
 + / / assertEquals ( " cat1 " , object . getName ( ) ) ; 
 + / / looperThread . testComplete ( ) ; 
 + Cat cat = object ; 
 } 
 } ) ; 
 + cat . getAge ( ) ; 
 
 + / * 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . where ( Cat . class ) . findFirst ( ) . setName ( " cat1 " ) ; 
 + } 
 + } ) ; 
 + * / 
 realm . beginTransaction ( ) ; 
 cat . setName ( " cat1 " ) ; 
 realm . commitTransaction ( ) ; 
 @ @ - 232 , 13 + 244 , 23 @ @ public class RealmChangeListenerTests { 
 / / FIXME : Used for DEV . Remove before merge 
 public void myTest ( ) { 
 Realm realm = looperThread . realm ; 
 + RealmLog . setLevel ( LogLevel . ALL ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . createObject ( AllTypes . class ) ; 
 + } 
 + } ) ; 
 final RealmResults < Cat > cats = realm . where ( Cat . class ) . findAll ( ) ; 
 final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; 
 + final RealmResults < AllTypes > allTypes = realm . where ( AllTypes . class ) . findAll ( ) ; 
 + double avg = allTypes . average ( AllTypes . FIELD _ DOUBLE ) ; 
 looperThread . keepStrongReference . add ( cats ) ; 
 looperThread . keepStrongReference . add ( dogs ) ; 
 cats . addChangeListener ( new RealmChangeListener < RealmResults < Cat > > ( ) { 
 @ Override 
 public void onChange ( RealmResults < Cat > result ) { 
 + Cat cat = result . first ( ) ; 
 assertEquals ( " cat1 " , result . first ( ) . getName ( ) ) ; 
 assertEquals ( " dog1 " , dogs . first ( ) . getName ( ) ) ; 
 looperThread . testComplete ( ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 index 4a9270c . . 76eaf93 100644 
 - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 @ @ - 65 , 11 + 65 , 13 @ @ JavaBindingContext : : ~ JavaBindingContext ( ) 
 
 void JavaBindingContext : : changes _ available ( ) 
 { 
 + / * 
 jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; 
 if ( notifier ) { 
 m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ notify _ by _ other _ method ) ; 
 m _ local _ jni _ env - > DeleteLocalRef ( notifier ) ; 
 } 
 + * / 
 } 
 
 std : : vector < BindingContext : : ObserverState > JavaBindingContext : : get _ observed _ rows ( ) 
 @ @ - 113 , 5 + 115 , 10 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c 
 m _ local _ jni _ env - > CallVoidMethod ( observer , m _ observer _ notify _ listener ) ; 
 } 
 m _ local _ jni _ env - > CallVoidMethod ( m _ row _ notifier , m _ clear _ row _ refs ) ; 
 + jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; 
 + if ( notifier ) { 
 + m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ notify _ by _ other _ method ) ; 
 + m _ local _ jni _ env - > DeleteLocalRef ( notifier ) ; 
 + } 
 } 
 
 diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp 
 index 2632cd3 . . 0a338dd 100644 
 - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . hpp 
 + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . hpp 
 @ @ - 45 , 6 + 45 , 8 @ @ private : 
 jobject m _ realm _ notifier ; 
 / / Method IDs from RealmNotifier implementation . Cache them as member vars . 
 jmethodID m _ notify _ by _ other _ method ; 
 + jmethodID m _ realm _ notifier _ on _ change ; 
 + 
 / / A weak global ref to the RowNotifier object . Java should hold a strong ref to it . 
 jobject m _ row _ notifier ; 
 / / RowNotifier . getObservers ( ) 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / method . hpp b / realm / realm - library / src / main / cpp / jni _ util / method . hpp 
 new file mode 100644 
 index 0000000 . . e56e9ed 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / method . hpp 
 @ @ - 0 , 0 + 1 , 56 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # ifndef REALM _ JNI _ UTIL _ METHOD _ HPP 
 + # define REALM _ JNI _ UTIL _ METHOD _ HPP 
 + 
 + # include < jni . h > 
 + # include < util . hpp > 
 + 
 + namespace realm { 
 + namespace jni _ util { 
 + 
 + class JniMethod { 
 + public : 
 + JniMethod ( JNIEnv * env , jobject obj , const char * method _ name , const char * signature ) { 
 + jclass cls = env - > GetObjectClass ( obj ) ; 
 + m _ method _ id = env - > GetMethodID ( cls , method _ name , signature ) ; 
 + env - > DeleteLocalRef ( cls ) ; 
 + } 
 + 
 + JniMethod ( JNIEnv * env , const char * class _ name , const char * method _ name , const char * signature ) { 
 + jclass cls = env - > FindClass ( class _ name ) ; 
 + if ( cls = = NULL ) { 
 + / / TODO : Throw a cpp exception instead . 
 + ThrowException ( env , ClassNotFound , class _ name ) ; 
 + m _ method _ id = nullptr ; 
 + } else { 
 + m _ method _ id = env - > GetMethodID ( cls , method _ name , signature ) ; 
 + } 
 + } 
 + 
 + ~ JniMethod ( ) { } 
 + 
 + inline operator jmethodID & ( ) const { return m _ method _ id ; } 
 + 
 + private : 
 + jmethodID m _ method _ id ; 
 + } ; 
 + 
 + } / / namespace realm 
 + } / / namespace jni _ util 
 + 
 + # endif / / REALM _ JNI _ UTIL _ METHOD _ HPP 
 diff - - git a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java b / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java 
 deleted file mode 100644 
 index c294952 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java 
 + + + / dev / null 
 @ @ - 1 , 171 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2016 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - import android . os . Handler ; 
 - import android . os . Looper ; 
 - import android . os . Message ; 
 - 
 - import io . realm . internal . HandlerControllerConstants ; 
 - import io . realm . internal . RealmNotifier ; 
 - import io . realm . internal . async . QueryUpdateTask ; 
 - import io . realm . log . RealmLog ; 
 - 
 - / * * 
 - * Implementation of { @ link RealmNotifier } for Android based on { @ link Handler } . 
 - * / 
 - class AndroidNotifier implements RealmNotifier { 
 - private Handler handler ; 
 - 
 - public AndroidNotifier ( HandlerController handlerController ) { 
 - if ( isAutoRefreshAvailable ( ) ) { 
 - handler = new Handler ( handlerController ) ; 
 - } 
 - } 
 - 
 - / / Called by Java when transaction committed to send LOCAL _ COMMIT to current thread ' s handler . 
 - @ Override 
 - public void notifyCommitByLocalThread ( ) { 
 - if ( handler = = null ) { 
 - return ; 
 - } 
 - 
 - / / Force any updates on the current thread to the front the queue . Doing this is mostly 
 - / / relevant on the UI thread where it could otherwise process a motion event before the 
 - / / REALM _ CHANGED event . This could in turn cause a UI component like ListView to crash . See 
 - / / https : / / github . com / realm / realm - android - adapters / issues / 11 for such a case . 
 - / / Other Looper threads could process similar events . For that reason all looper threads will 
 - / / prioritize local commits . 
 - / / 
 - / / If a user is doing commits inside a RealmChangeListener this can cause the Looper thread to get 
 - / / event starved as it only starts handling Realm events instead . This is an acceptable risk as 
 - / / that behaviour indicate a user bug . Previously this would be hidden as the UI would still 
 - / / be responsive . 
 - / * 
 - Message msg = Message . obtain ( ) ; 
 - msg . what = HandlerControllerConstants . LOCAL _ COMMIT ; 
 - if ( ! handler . hasMessages ( HandlerControllerConstants . LOCAL _ COMMIT ) ) { 
 - handler . removeMessages ( HandlerControllerConstants . REALM _ CHANGED ) ; 
 - handler . sendMessageAtFrontOfQueue ( msg ) ; 
 - } 
 - * / 
 - } 
 - 
 - / / This is called by OS when other thread / process changes the Realm . 
 - / / This is getting called on the same thread which created the Realm . 
 - / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | 
 - / / | Thread A | Thread B | Daemon Thread | 
 - / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | 
 - / / | | Make changes | | 
 - / / | | | Detect and notify thread A through JNI ALooper | 
 - / / | Call OS ' s Realm : : notify ( ) from OS ' s ALooper callback | | | 
 - / / | Realm : : notify ( ) calls JavaBindingContext : change _ available ( ) | | | 
 - / / | change _ available calls into this method to send REALM _ CHANGED | | | 
 - / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | 
 - @ Override 
 - public void notifyCommitByOtherThread ( ) { 
 - / * 
 - if ( handler = = null ) { 
 - return ; 
 - } 
 - 
 - / / Note there is a race condition with handler . hasMessages ( ) and handler . sendEmptyMessage ( ) 
 - / / as the target thread consumes messages at the same time . In this case it is not a problem as worst 
 - / / case we end up with two REALM _ CHANGED messages in the queue . 
 - boolean messageHandled = true ; 
 - if ( ! handler . hasMessages ( HandlerControllerConstants . REALM _ CHANGED ) & & 
 - ! handler . hasMessages ( HandlerControllerConstants . LOCAL _ COMMIT ) ) { 
 - messageHandled = handler . sendEmptyMessage ( HandlerControllerConstants . REALM _ CHANGED ) ; 
 - } 
 - if ( ! messageHandled ) { 
 - RealmLog . warn ( " Cannot update Looper threads when the Looper has quit . Use realm . setAutoRefresh ( false ) " + 
 - " to prevent this . " ) ; 
 - } 
 - * / 
 - } 
 - 
 - @ Override 
 - public void post ( Runnable runnable ) { 
 - Looper looper = handler . getLooper ( ) ; 
 - if ( looper . getThread ( ) . isAlive ( ) ) { / / The receiving thread is alive 
 - handler . post ( runnable ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public boolean isValid ( ) { 
 - return handler ! = null ; 
 - } 
 - 
 - @ Override 
 - public void close ( ) { 
 - if ( handler ! = null ) { 
 - handler . removeCallbacksAndMessages ( null ) ; 
 - handler = null ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void completeAsyncResults ( QueryUpdateTask . Result result ) { 
 - Looper looper = handler . getLooper ( ) ; 
 - if ( looper . getThread ( ) . isAlive ( ) ) { / / The receiving thread is alive 
 - handler . obtainMessage ( HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ RESULTS , result ) . sendToTarget ( ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void completeAsyncObject ( QueryUpdateTask . Result result ) { 
 - Looper looper = handler . getLooper ( ) ; 
 - if ( looper . getThread ( ) . isAlive ( ) ) { / / The receiving thread is alive 
 - handler . obtainMessage ( HandlerControllerConstants . COMPLETED _ ASYNC _ REALM _ OBJECT , result ) . sendToTarget ( ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void throwBackgroundException ( Throwable throwable ) { 
 - Looper looper = handler . getLooper ( ) ; 
 - if ( looper . getThread ( ) . isAlive ( ) ) { / / The receiving thread is alive 
 - handler . obtainMessage ( 
 - HandlerControllerConstants . REALM _ ASYNC _ BACKGROUND _ EXCEPTION , new Error ( throwable ) ) . sendToTarget ( ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void completeUpdateAsyncQueries ( QueryUpdateTask . Result result ) { 
 - Looper looper = handler . getLooper ( ) ; 
 - if ( looper . getThread ( ) . isAlive ( ) ) { / / The receiving thread is alive 
 - handler . obtainMessage ( HandlerControllerConstants . COMPLETED _ UPDATE _ ASYNC _ QUERIES , result ) . sendToTarget ( ) ; 
 - } 
 - } 
 - 
 - private static boolean isAutoRefreshAvailable ( ) { 
 - return ( Looper . myLooper ( ) ! = null & & ! isIntentServiceThread ( ) ) ; 
 - } 
 - 
 - private static boolean isIntentServiceThread ( ) { 
 - / / Tries to determine if a thread is an IntentService thread . No public API can detect this , 
 - / / so use the thread name as a heuristic : 
 - / / https : / / android . googlesource . com / platform / frameworks / base / + / master / core / java / android / app / IntentService . java # 108 
 - String threadName = Thread . currentThread ( ) . getName ( ) ; 
 - return threadName ! = null & & threadName . startsWith ( " IntentService [ " ) ; 
 - } 
 - 
 - / / For testing purpose only . Should be removed ideally . 
 - public void setHandler ( Handler handler ) { 
 - this . handler = handler ; 
 - } 
 - } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index a32f249 . . 89604e5 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import java . util . concurrent . atomic . AtomicBoolean ; 
 import io . realm . exceptions . RealmFileException ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 import io . realm . internal . InvalidRow ; 
 + import io . realm . internal . RealmNotifier ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . SharedRealm ; 
 import io . realm . internal . ColumnInfo ; 
 @ @ - 79 , 7 + 80 , 7 @ @ abstract class BaseRealm implements Closeable { 
 this . configuration = configuration ; 
 
 this . handlerController = new HandlerController ( this ) ; 
 - this . sharedRealm = SharedRealm . getInstance ( configuration , new AndroidNotifier ( this . handlerController ) , 
 + this . sharedRealm = SharedRealm . getInstance ( configuration , new RealmNotifier ( ) , 
 ! ( this instanceof Realm ) ? null : 
 new SharedRealm . SchemaVersionListener ( ) { 
 @ Override 
 @ @ - 138 , 7 + 139 , 7 @ @ abstract class BaseRealm implements Closeable { 
 if ( ! handlerController . isAutoRefreshEnabled ( ) ) { 
 throw new IllegalStateException ( " You can ' t register a listener from a non - Looper or IntentService thread . " ) ; 
 } 
 - handlerController . addChangeListener ( listener ) ; 
 + sharedRealm . realmNotifier . addChangeListener ( this , listener ) ; 
 } 
 
 / * * 
 @ @ - 157 , 7 + 158 , 7 @ @ abstract class BaseRealm implements Closeable { 
 if ( ! handlerController . isAutoRefreshEnabled ( ) ) { 
 throw new IllegalStateException ( " You can ' t remove a listener from a non - Looper thread " ) ; 
 } 
 - handlerController . removeChangeListener ( listener ) ; 
 + sharedRealm . realmNotifier . removeChangeListener ( this , listener ) ; 
 } 
 
 / * * 
 @ @ - 191 , 16 + 192 , 9 @ @ abstract class BaseRealm implements Closeable { 
 if ( ! handlerController . isAutoRefreshEnabled ( ) ) { 
 throw new IllegalStateException ( " You can ' t remove listeners from a non - Looper thread " ) ; 
 } 
 - handlerController . removeAllChangeListeners ( ) ; 
 + sharedRealm . realmNotifier . removeAllChangeListeners ( ) ; 
 } 
 
 - / / WARNING : If this method is used after calling any async method , the old handler will still be used . 
 - / / package private , for test purpose only 
 - void setHandler ( Handler handler ) { 
 - ( ( AndroidNotifier ) sharedRealm . realmNotifier ) . setHandler ( handler ) ; 
 - } 
 - 
 - 
 / * * 
 * Writes a compacted copy of the Realm to the given destination File . 
 * < p > 
 @ @ - 350 , 11 + 344 , 14 @ @ abstract class BaseRealm implements Closeable { 
 ObjectServerFacade . getFacade ( configuration . isSyncConfiguration ( ) ) 
 . notifyCommit ( configuration , sharedRealm . getLastSnapshotVersion ( ) ) ; 
 
 + / / FIXME : Check if this is still needed . 
 / / Sometimes we don ' t want to notify the local thread about commits , e . g . creating a completely new Realm 
 / / file will make a commit in order to create the schema . Users should not be notified about that . 
 + / * 
 if ( notifyLocalThread ) { 
 sharedRealm . realmNotifier . notifyCommitByLocalThread ( ) ; 
 } 
 + * / 
 } 
 
 / * * 
 @ @ - 663 , 11 + 660 , 6 @ @ abstract class BaseRealm implements Closeable { 
 } 
 } 
 
 - / / Return true if this Realm can receive notifications . 
 - boolean hasValidNotifier ( ) { 
 - return sharedRealm . realmNotifier ! = null & & sharedRealm . realmNotifier . isValid ( ) ; 
 - } 
 - 
 @ Override 
 protected void finalize ( ) throws Throwable { 
 if ( sharedRealm ! = null & & ! sharedRealm . isClosed ( ) ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / HandlerController . java b / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 index a0b06bc . . b3c28c8 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 + + + b / realm / realm - library / src / main / java / io / realm / HandlerController . java 
 @ @ - 267 , 6 + 267 , 7 @ @ final class HandlerController implements Handler . Callback { 
 } 
 
 private void updateAsyncEmptyRealmObject ( ) { 
 + / * 
 Iterator < Map . Entry < WeakReference < RealmObjectProxy > , RealmQuery < ? > > > iterator = emptyAsyncRealmObject . entrySet ( ) . iterator ( ) ; 
 while ( iterator . hasNext ( ) ) { 
 Map . Entry < WeakReference < RealmObjectProxy > , RealmQuery < ? > > next = iterator . next ( ) ; 
 @ @ - 285 , 6 + 286 , 7 @ @ final class HandlerController implements Handler . Callback { 
 iterator . remove ( ) ; 
 } 
 } 
 + * / 
 } 
 
 / * * 
 @ @ - 382 , 6 + 384 , 7 @ @ final class HandlerController implements Handler . Callback { 
 } 
 
 private void updateAsyncQueries ( ) { 
 + / * 
 if ( updateAsyncQueriesTask ! = null & & ! updateAsyncQueriesTask . isDone ( ) ) { 
 / / try to cancel any pending update since we ' re submitting a new one anyway 
 updateAsyncQueriesTask . cancel ( true ) ; 
 @ @ - 425 , 6 + 428 , 7 @ @ final class HandlerController implements Handler . Callback { 
 . build ( ) ; 
 updateAsyncQueriesTask = Realm . asyncTaskExecutor . submitQueryUpdate ( queryUpdateTask ) ; 
 } 
 + * / 
 } 
 
 private void realmChanged ( boolean localCommit ) { 
 @ @ - 458 , 6 + 462 , 7 @ @ final class HandlerController implements Handler . Callback { 
 } 
 
 private void completedAsyncRealmResults ( QueryUpdateTask . Result result ) { 
 + / * 
 Set < WeakReference < RealmResults < ? extends RealmModel > > > updatedTableViewsKeys = result . updatedTableViews . keySet ( ) ; 
 if ( updatedTableViewsKeys . size ( ) > 0 ) { 
 WeakReference < RealmResults < ? extends RealmModel > > weakRealmResults = updatedTableViewsKeys . iterator ( ) . next ( ) ; 
 @ @ - 526 , 6 + 531 , 7 @ @ final class HandlerController implements Handler . Callback { 
 } 
 } 
 } 
 + * / 
 } 
 
 private void completedAsyncQueriesUpdate ( QueryUpdateTask . Result result ) { 
 @ @ - 604 , 6 + 610 , 7 @ @ final class HandlerController implements Handler . Callback { 
 } 
 
 private void completedAsyncRealmObject ( QueryUpdateTask . Result result ) { 
 + / * 
 Set < WeakReference < RealmObjectProxy > > updatedRowKey = result . updatedRow . keySet ( ) ; 
 if ( updatedRowKey . size ( ) > 0 ) { 
 WeakReference < RealmObjectProxy > realmObjectWeakReference = updatedRowKey . iterator ( ) . next ( ) ; 
 @ @ - 664 , 6 + 671 , 7 @ @ final class HandlerController implements Handler . Callback { 
 } 
 } / / else : element GC ' d in the meanwhile 
 } 
 + * / 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 506266a . . dab358d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 1327 , 10 + 1327 , 13 @ @ public final class Realm extends BaseRealm { 
 
 / / If the user provided a Callback then we make sure , the current Realm has a Handler 
 / / we can use to deliver the result 
 + / / FIXME : Implement checking here . 
 + / * 
 if ( ( onSuccess ! = null | | onError ! = null ) & & ! hasValidNotifier ( ) ) { 
 throw new IllegalStateException ( " Your Realm is opened from a thread without a Looper " + 
 " and you provided a callback , we need a Handler to invoke your callback " ) ; 
 } 
 + * / 
 
 / / We need to use the same configuration to open a background SharedRealm ( i . e Realm ) 
 / / to perform the transaction 
 @ @ - 1370 , 12 + 1373 , 14 @ @ public final class Realm extends BaseRealm { 
 bgRealm . close ( ) ; 
 } 
 
 + / / This will be treated like a special REALM _ CHANGED event 
 + / / FIXME : Find a way to deliver the callback with current architecture 
 + / * 
 final Throwable backgroundException = exception [ 0 ] ; 
 / / Send response as the final step to ensure the bg thread quit before others get the response ! 
 if ( hasValidNotifier ( ) & & ! Thread . currentThread ( ) . isInterrupted ( ) ) { 
 
 if ( transactionCommitted ) { 
 - / / This will be treated like a special REALM _ CHANGED event 
 sharedRealm . realmNotifier . post ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 @ @ - 1429 , 6 + 1434 , 7 @ @ public final class Realm extends BaseRealm { 
 } 
 } 
 } 
 + * / 
 } 
 } 
 } ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 337e72d . . 6b93e71 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 66 , 10 + 66 , 6 @ @ public final class RealmQuery < E extends RealmModel > { 
 private static final String TYPE _ MISMATCH = " Field ' % s ' : type mismatch - % s expected . " ; 
 private static final String EMPTY _ VALUES = " Non - empty ' values ' must be provided . " ; 
 
 - 
 - private final static Long INVALID _ NATIVE _ POINTER = 0L ; 
 - private ArgumentsHolder argumentsHolder ; 
 - 
 / * * 
 * Creates a query for objects of a given class from a { @ link Realm } . 
 * 
 @ @ - 1326 , 7 + 1322 , 6 @ @ public final class RealmQuery < E extends RealmModel > { 
 * is not indexed , or points to linked fields . 
 * / 
 public RealmResults < E > distinct ( String fieldName ) { 
 - checkQueryIsNotReused ( ) ; 
 SortDescriptor distinctDescriptor = SortDescriptor . getInstanceForDistinct ( query . getTable ( ) , fieldName ) ; 
 Collection collection = new Collection ( realm . sharedRealm , query , null , distinctDescriptor ) ; 
 return createRealmResults ( collection ) ; 
 @ @ - 1352 , 7 + 1347 , 6 @ @ public final class RealmQuery < E extends RealmModel > { 
 * is an unsupported type , or points to a linked field . 
 * / 
 public RealmResults < E > distinct ( String firstFieldName , String . . . remainingFieldNames ) { 
 - checkQueryIsNotReused ( ) ; 
 String [ ] fieldNames = new String [ 1 + remainingFieldNames . length ] ; 
 
 fieldNames [ 0 ] = firstFieldName ; 
 @ @ - 1513 , 7 + 1507 , 6 @ @ public final class RealmQuery < E extends RealmModel > { 
 * / 
 @ SuppressWarnings ( " unchecked " ) 
 public RealmResults < E > findAll ( ) { 
 - checkQueryIsNotReused ( ) ; 
 Collection collection = new Collection ( realm . sharedRealm , query ) ; 
 return createRealmResults ( collection ) ; 
 } 
 @ @ - 1540 , 7 + 1533 , 6 @ @ public final class RealmQuery < E extends RealmModel > { 
 * / 
 @ SuppressWarnings ( " unchecked " ) 
 public RealmResults < E > findAllSorted ( String fieldName , Sort sortOrder ) { 
 - checkQueryIsNotReused ( ) ; 
 SortDescriptor sortDescriptor = SortDescriptor . getInstanceForSort ( query . getTable ( ) , fieldName , sortOrder ) ; 
 
 Collection collection = new Collection ( realm . sharedRealm , query , sortDescriptor ) ; 
 @ @ - 1592 , 8 + 1584 , 6 @ @ public final class RealmQuery < E extends RealmModel > { 
 * { @ link RealmObject } or a child { @ link RealmList } . 
 * / 
 public RealmResults < E > findAllSorted ( String fieldNames [ ] , Sort sortOrders [ ] ) { 
 - checkQueryIsNotReused ( ) ; 
 - 
 SortDescriptor sortDescriptor = SortDescriptor . getInstanceForSort ( query . getTable ( ) , fieldNames , sortOrders ) ; 
 
 Collection collection = new Collection ( realm . sharedRealm , query , sortDescriptor ) ; 
 @ @ - 1646 , 8 + 1636 , 6 @ @ public final class RealmQuery < E extends RealmModel > { 
 * @ see io . realm . RealmObject 
 * / 
 public E findFirst ( ) { 
 - checkQueryIsNotReused ( ) ; 
 - 
 Row row ; 
 if ( realm . isInTransaction ( ) ) { 
 / / It is not possible to create async query inside a transaction . So immediately query the first object . 
 @ @ - 1701 , 74 + 1689 , 6 @ @ public final class RealmQuery < E extends RealmModel > { 
 } 
 } 
 
 - private WeakReference < RealmNotifier > getWeakReferenceNotifier ( ) { 
 - if ( realm . sharedRealm . realmNotifier = = null | | ! realm . sharedRealm . realmNotifier . isValid ( ) ) { 
 - throw new IllegalStateException ( " Your Realm is opened from a thread without a Looper . " + 
 - " Async queries need a Handler to send results of your query " ) ; 
 - } 
 - return new WeakReference < RealmNotifier > ( realm . sharedRealm . realmNotifier ) ; / / use caller Realm ' s Looper 
 - } 
 - 
 - / / The shared group needs to be closed before sending the message to other threads to avoid timing problems . 
 - / / eg . : The other thread wants to delete Realm when getting notified . 
 - private void closeSharedRealmAndSendEventToNotifier ( SharedRealm sharedRealm , 
 - WeakReference < RealmNotifier > weakNotifier , 
 - QueryUpdateTask . NotifyEvent event , Object obj ) { 
 - if ( sharedRealm ! = null ) { 
 - sharedRealm . close ( ) ; 
 - } 
 - 
 - RealmNotifier notifier = weakNotifier . get ( ) ; 
 - if ( notifier ! = null ) { 
 - switch ( event ) { 
 - case COMPLETE _ ASYNC _ RESULTS : 
 - notifier . completeAsyncResults ( ( QueryUpdateTask . Result ) obj ) ; 
 - break ; 
 - case COMPLETE _ ASYNC _ OBJECT : 
 - notifier . completeAsyncObject ( ( QueryUpdateTask . Result ) obj ) ; 
 - break ; 
 - case THROW _ BACKGROUND _ EXCEPTION : 
 - notifier . throwBackgroundException ( ( Throwable ) obj ) ; 
 - break ; 
 - default : 
 - / / Should not get here . 
 - throw new IllegalStateException ( String . format ( " % s is not handled here . " , event ) ) ; 
 - } 
 - } 
 - } 
 - 
 - / / We need to prevent the user from using the query again ( mostly for async ) 
 - / / Ex : if the first query fail with findFirstAsync , if the user reuse the same RealmQuery 
 - / / with findAllSorted , argumentsHolder of the first query will be overridden , 
 - / / which cause any retry to use the findAllSorted argumentsHolder . 
 - private void checkQueryIsNotReused ( ) { 
 - if ( argumentsHolder ! = null ) { 
 - throw new IllegalStateException ( " This RealmQuery is already used by a find * query , please create a new query " ) ; 
 - } 
 - } 
 - 
 - private long getSourceRowIndexForFirstObject ( ) { 
 - long tableRowIndex = this . query . find ( ) ; 
 - return tableRowIndex ; 
 - } 
 - / / Get the column index for sorting related functions . A proper exception will be thrown if the field doesn ' t exist 
 - / / or it belongs to the child object . 
 - private long getColumnIndexForSort ( String fieldName ) { 
 - if ( fieldName = = null | | fieldName . isEmpty ( ) ) { 
 - throw new IllegalArgumentException ( " Non - empty fieldname required . " ) ; 
 - } 
 - if ( fieldName . contains ( " . " ) ) { 
 - throw new IllegalArgumentException ( " Sorting using child object fields is not supported : " + fieldName ) ; 
 - } 
 - 
 - Long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - if ( columnIndex = = null ) { 
 - throw new IllegalArgumentException ( String . format ( " Field name ' % s ' does not exist . " , fieldName ) ) ; 
 - } 
 - 
 - return columnIndex ; 
 - } 
 - 
 private RealmResults < E > createRealmResults ( Collection collection ) { 
 if ( isDynamicQuery ( ) ) { 
 return new RealmResults < E > ( realm , collection , className ) ; 
 @ @ - 1776 , 17 + 1696 , 4 @ @ public final class RealmQuery < E extends RealmModel > { 
 return new RealmResults < E > ( realm , collection , clazz ) ; 
 } 
 } 
 - 
 - public ArgumentsHolder getArgument ( ) { 
 - return argumentsHolder ; 
 - } 
 - 
 - / * * 
 - * Exports & handovers the query to be used by a worker thread . 
 - * 
 - * @ return the exported handover pointer for this RealmQuery . 
 - * / 
 - long handoverQueryPointer ( ) { 
 - return query . handoverQuery ( realm . sharedRealm ) ; 
 - } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java b / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java 
 new file mode 100644 
 index 0000000 . . 230c17c 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Capabilities . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . internal ; 
 + 
 + public interface Capabilities { 
 + boolean canDeliverNotification ( ) ; 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java b / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java 
 new file mode 100644 
 index 0000000 . . 190f8fd 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / ObserverPair . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package io . realm . internal ; 
 + 
 + import java . lang . ref . WeakReference ; 
 + 
 + public abstract class ObserverPair < T > { 
 + public final T listener ; 
 + public final WeakReference < Object > observerRef ; 
 + 
 + public ObserverPair ( T listener , Object objectRef ) { 
 + this . listener = listener ; 
 + this . observerRef = new WeakReference < Object > ( objectRef ) ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object obj ) { 
 + if ( this = = obj ) { 
 + return true ; 
 + } 
 + 
 + if ( obj instanceof ObserverPair ) { 
 + ObserverPair anotherPair = ( ObserverPair ) obj ; 
 + return listener . equals ( anotherPair . listener ) & & 
 + observerRef . get ( ) = = anotherPair . observerRef . get ( ) ; 
 + } 
 + return false ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 index aaf97b6 . . 689d8b9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 @ @ - 16 , 50 + 16 , 82 @ @ 
 
 package io . realm . internal ; 
 
 - import io . realm . internal . async . QueryUpdateTask ; 
 + import java . util . List ; 
 + import java . util . concurrent . CopyOnWriteArrayList ; 
 + 
 + import io . realm . RealmChangeListener ; 
 
 / * * 
 * This interface needs to be implemented by Java and pass to Realm Object Store in order to get notifications when 
 * other thread / process changes the Realm file . 
 * / 
 @ Keep 
 - public interface RealmNotifier { 
 - / * * 
 - * This is called from Java when the changes have been made on the same thread . 
 - * / 
 - void notifyCommitByLocalThread ( ) ; 
 + public class RealmNotifier { 
 + 
 + private static class RealmObserverPair extends ObserverPair < RealmChangeListener > { 
 + 
 + public RealmObserverPair ( Object observer , RealmChangeListener listener ) { 
 + super ( listener , observer ) ; 
 + } 
 + 
 + private void onChange ( ) { 
 + Object observer = observerRef . get ( ) ; 
 + if ( observer ! = null ) { 
 + listener . onChange ( observer ) ; 
 + } 
 + } 
 + } 
 + 
 + private List < RealmObserverPair > realmObserverPairs = new CopyOnWriteArrayList < RealmObserverPair > ( ) ; 
 
 + / / This is called by OS when other thread / process changes the Realm . 
 + / / This is getting called on the same thread which created the Realm . 
 + / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | 
 + / / | Thread A | Thread B | Daemon Thread | 
 + / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | 
 + / / | | Make changes | | 
 + / / | | | Detect and notify thread A through JNI ALooper | 
 + / / | Call OS ' s Realm : : notify ( ) from OS ' s ALooper callback | | | 
 + / / | Realm : : notify ( ) calls JavaBindingContext : change _ available ( ) | | | 
 + / / | change _ available calls into this method to send REALM _ CHANGED | | | 
 + / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | 
 / * * 
 * This is called in Realm Object Store ' s JavaBindingContext : : changes _ available . 
 * This is getting called on the same thread which created this Realm when the same Realm file has been changed by 
 * other thread . The changes on the same thread should not trigger this call . 
 * / 
 @ SuppressWarnings ( " unused " ) / / called from java _ binding _ context . cpp 
 - void notifyCommitByOtherThread ( ) ; 
 + void notifyCommitByOtherThread ( ) { 
 + for ( RealmObserverPair observerPair : realmObserverPairs ) { 
 + Object observer = observerPair . observerRef . get ( ) ; 
 + if ( observer = = null ) { 
 + realmObserverPairs . remove ( observerPair ) ; 
 + } else { 
 + observerPair . onChange ( ) ; 
 + } 
 + } 
 + } 
 
 / * * 
 - * Post a runnable to be run in the next event loop on the thread which creates the corresponding Realm . 
 - * 
 - * @ param runnable to be posted . 
 + * Called when close SharedRealm to clean up any event left in to queue . 
 * / 
 - void post ( Runnable runnable ) ; 
 + public void close ( ) { 
 + removeAllChangeListeners ( ) ; 
 + } 
 
 - / * * 
 - * Is the current notifier valid ? eg . Notifier created on non - looper thread cannot be notified . 
 - * 
 - * @ return { @ code true } if the thread which owns this notifier can be notified . Otherwise { @ code false } 
 - * / 
 - boolean isValid ( ) ; 
 + public void addChangeListener ( Object observer , RealmChangeListener realmChangeListener ) { 
 + RealmObserverPair observerPair = new RealmObserverPair ( observer , realmChangeListener ) ; 
 + if ( ! realmObserverPairs . contains ( observerPair ) ) { 
 + realmObserverPairs . add ( observerPair ) ; 
 + } 
 + } 
 
 - / * * 
 - * Called when close SharedRealm to clean up any event left in to queue . 
 - * / 
 - void close ( ) ; 
 + public void removeChangeListener ( Object observer , RealmChangeListener realmChangeListener ) { 
 + RealmObserverPair observerPair = new RealmObserverPair ( observer , realmChangeListener ) ; 
 + realmObserverPairs . remove ( observerPair ) ; 
 + } 
 
 - / / FIXME : These are for decoupling handler from async query . Async query needs refactor to either adapt the OS or 
 - / / abstract the logic from Android handlers . 
 - void completeAsyncResults ( QueryUpdateTask . Result result ) ; 
 - void completeAsyncObject ( QueryUpdateTask . Result result ) ; 
 - void throwBackgroundException ( Throwable throwable ) ; 
 - void completeUpdateAsyncQueries ( QueryUpdateTask . Result result ) ; 
 + public void removeAllChangeListeners ( ) { 
 + realmObserverPairs . clear ( ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java 
 index 4e6f2b7 . . b0de844 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RowNotifier . java 
 @ @ - 16 , 14 + 16 , 15 @ @ 
 
 package io . realm . internal ; 
 
 - import java . lang . ref . WeakReference ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 import io . realm . RealmChangeListener ; 
 
 + @ Keep 
 public class RowNotifier { 
 
 + @ Keep 
 private static class Observer { 
 final RealmChangeListener listener ; 
 final Object object ; 
 @ @ - 33 , 6 + 34 , 9 @ @ public class RowNotifier { 
 this . object = object ; 
 this . row = null ; 
 } 
 + 
 + / / Called by JNI 
 + @ SuppressWarnings ( " unused " ) 
 public void notifyListener ( ) { 
 listener . onChange ( object ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java 
 new file mode 100644 
 index 0000000 . . d043867 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / android / AndroidCapabilities . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package io . realm . internal . android ; 
 + 
 + import android . os . Looper ; 
 + 
 + import io . realm . internal . Capabilities ; 
 + 
 + public class AndroidCapabilities implements Capabilities { 
 + 
 + @ Override 
 + public boolean canDeliverNotification ( ) { 
 + return ( Looper . myLooper ( ) ! = null & & ! isIntentServiceThread ( ) ) ; 
 + } 
 + 
 + private static boolean isIntentServiceThread ( ) { 
 + / / Tries to determine if a thread is an IntentService thread . No public API can detect this , 
 + / / so use the thread name as a heuristic : 
 + / / https : / / android . googlesource . com / platform / frameworks / base / + / master / core / java / android / app / IntentService . java # 108 
 + String threadName = Thread . currentThread ( ) . getName ( ) ; 
 + return threadName ! = null & & threadName . startsWith ( " IntentService [ " ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java 
 index f2b05d5 . . 632552f 100644 
 - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java 
 + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java 
 @ @ - 10 , 7 + 10 , 7 @ @ import android . widget . TextView ; 
 import java . io . IOException ; 
 
 import io . realm . Realm ; 
 - import io . realm . ResultList ; 
 + import io . realm . RealmResults ; 
 import io . realm . examples . realmintroexample . model . Cat ; 
 import io . realm . examples . realmintroexample . model . Dog ; 
 import io . realm . examples . realmintroexample . model . Person ; 
 @ @ - 85 , 7 + 85 , 7 @ @ public class RealmBasicExampleActivity extends Activity { 
 
 Realm realm = new Realm ( this ) ; 
 showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; 
 - ResultList < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; 
 + RealmResults < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; 
 showStatus ( " Size of result set : " + result . size ( ) ) ; 
 } 
 
 @ @ - 160 , 7 + 160 , 7 @ @ public class RealmBasicExampleActivity extends Activity { 
 Realm realm = new Realm ( this ) ; 
 status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; 
 / / Find all persons where age > 5 
 - ResultList < Person > result = realm . where ( Person . class ) 
 + RealmResults < Person > result = realm . where ( Person . class ) 
 . greaterThan ( " age " , 5 ) . between ( " age " , 7 , 9 ) . beginsWith ( " name " , " Person " ) . findAll ( ) ; 
 status + = " \ nSize of result set : " + result . size ( ) ; 
 return status ; 
 diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 index 6129e54 . . 33a6375 100644 
 - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package io . realm . examples . realmintroexample . model ; 
 
 - import io . realm . RelationList ; 
 + import io . realm . RealmList ; 
 import io . realm . RealmObject ; 
 
 public class Person extends RealmObject { 
 @ @ - 8 , 7 + 8 , 7 @ @ public class Person extends RealmObject { 
 private String name ; 
 private int age ; 
 private Dog dog ; 
 - private RelationList < Cat > cats ; 
 + private RealmList < Cat > cats ; 
 
 public String getName ( ) { 
 return name ; 
 @ @ - 34 , 11 + 34 , 11 @ @ public class Person extends RealmObject { 
 this . dog = dog ; 
 } 
 
 - public RelationList < Cat > getCats ( ) { 
 + public RealmList < Cat > getCats ( ) { 
 return cats ; 
 } 
 
 - public void setCats ( RelationList < Cat > cats ) { 
 + public void setCats ( RealmList < Cat > cats ) { 
 this . cats = cats ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java 
 index a684c2d . . 0146782 100755 
 - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java 
 + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java 
 @ @ - 7 , 7 + 7 , 7 @ @ import android . view . ViewGroup ; 
 import android . widget . BaseAdapter ; 
 import android . widget . TextView ; 
 
 - import io . realm . ResultList ; 
 + import java . util . List ; 
 
 public class CityAdapter extends BaseAdapter { 
 
 @ @ - 15 , 13 + 15 , 13 @ @ public class CityAdapter extends BaseAdapter { 
 
 private LayoutInflater inflater ; 
 
 - private ResultList < City > cities = null ; 
 + private List < City > cities = null ; 
 
 public CityAdapter ( Context context ) { 
 inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT _ INFLATER _ SERVICE ) ; 
 } 
 
 - public void setData ( ResultList < City > details ) { 
 + public void setData ( List < City > details ) { 
 this . cities = details ; 
 } 
 
 diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 index d7b98cd . . 71ae952 100644 
 - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 @ @ - 15 , 7 + 15 , 7 @ @ import java . util . List ; 
 
 import io . realm . Realm ; 
 import io . realm . RealmQuery ; 
 - import io . realm . ResultList ; 
 + import io . realm . RealmResults ; 
 
 public class RealmExampleActivity extends Activity implements LoaderManager . LoaderCallbacks < List < City > > , AdapterView . OnItemClickListener { 
 
 @ @ - 64 , 7 + 64 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load 
 
 public void updateCities ( ) { 
 Realm realm = new Realm ( this ) ; 
 - ResultList < City > cities = realm . where ( City . class ) . findAll ( ) ; 
 + RealmResults < City > cities = realm . where ( City . class ) . findAll ( ) ; 
 mAdapter . setData ( cities ) ; 
 
 mAdapter . notifyDataSetChanged ( ) ; 
 diff - - git a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 index 3f62975 . . 851cdda 100644 
 - - - a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 + + + b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 @ @ - 31 , 7 + 31 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 
 import io . realm . Realm ; 
 - import io . realm . ResultList ; 
 + import io . realm . RealmResults ; 
 import io . realm . internal . ColumnType ; 
 import io . realm . internal . ReadTransaction ; 
 import io . realm . internal . SharedGroup ; 
 @ @ - 111 , 7 + 111 , 7 @ @ public class PerformanceTask extends AsyncTask < Integer , String , String > { 
 
 timer = System . currentTimeMillis ( ) ; 
 / / Debug . startMethodTracing ( " reads " ) ; 
 - ResultList < User > realmList = realm . where ( User . class ) . findAll ( ) ; 
 + RealmResults < User > realmList = realm . where ( User . class ) . findAll ( ) ; 
 for ( int i = 0 ; i < listSize ; i + + ) { 
 / / IUser u = realmList . getTest ( i , IUser . class ) ; 
 User u = realmList . get ( i ) ; 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java 
 index cc295fc . . 9bb0e96 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java 
 @ @ - 120 , 7 + 120 , 7 @ @ public class RealmSourceCodeGenerator { 
 Types typeUtils = processingEnvironment . getTypeUtils ( ) ; 
 
 TypeMirror realmObject = elementUtils . getTypeElement ( " io . realm . RealmObject " ) . asType ( ) ; 
 - DeclaredType relationList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RelationList " ) , typeUtils . getWildcardType ( null , null ) ) ; 
 + DeclaredType realmList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; 
 
 / / Set source code indent to 4 spaces 
 writer . setIndent ( " " ) ; 
 @ @ - 134 , 7 + 134 , 7 @ @ public class RealmSourceCodeGenerator { 
 " io . realm . internal . ImplicitTransaction " , 
 " io . realm . internal . Row " , 
 " io . realm . internal . LinkView " , 
 - " io . realm . RelationList " , 
 + " io . realm . RealmList " , 
 " io . realm . RealmObject " ) 
 . emitEmptyLine ( ) ; 
 
 @ @ - 203 , 7 + 203 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . endControlFlow ( ) ; 
 writer . emitStatement ( " realmGetRow ( ) . setLink ( % d , value . realmGetRow ( ) . getIndex ( ) ) " , columnNumber ) ; 
 writer . endMethod ( ) ; 
 - } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { 
 + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 / * * 
 * LinkLists 
 * / 
 @ @ - 219 , 7 + 219 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( fieldTypeCanonicalName , " get " + capitaliseFirstChar ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; 
 writer . emitStatement ( 
 - " return new RelationList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , 
 + " return new RealmList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , 
 genericType , columnNumber ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 @ @ - 231 , 7 + 231 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . beginControlFlow ( " if ( value = = null ) " ) ; 
 writer . emitStatement ( " return " ) ; / / TODO : delete all the links instead 
 writer . endControlFlow ( ) ; 
 - writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RelationList < ? extends RealmObject > ) value ) " ) ; 
 + writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RealmList < ? extends RealmObject > ) value ) " ) ; 
 writer . emitStatement ( " links . add ( linkedObject . realmGetRow ( ) . getIndex ( ) ) " ) ; 
 writer . endControlFlow ( ) ; 
 writer . endMethod ( ) ; 
 @ @ - 275 , 7 + 275 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . endControlFlow ( ) ; 
 writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK , \ " % s \ " , transaction . getTable ( \ " % s \ " ) ) " , 
 fieldName . toLowerCase ( Locale . getDefault ( ) ) , fieldTypeName ) ; 
 - } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { 
 + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; 
 String genericType ; 
 if ( genericCanonicalType . contains ( " . " ) ) { 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index ccce5d2 . . 3cbbacd 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 424 , 7 + 424 , 7 @ @ public class Realm { 
 } 
 
 
 - public < E extends RealmObject > ResultList < E > allObjects ( Class < E > clazz ) { 
 + public < E extends RealmObject > RealmResults < E > allObjects ( Class < E > clazz ) { 
 return where ( clazz ) . findAll ( ) ; 
 } 
 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 new file mode 100644 
 index 0000000 . . f2944de 
 - - - / dev / null 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm ; 
 + 
 + import java . util . AbstractList ; 
 + 
 + import io . realm . internal . LinkView ; 
 + 
 + public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 + 
 + private Class < E > clazz ; 
 + private LinkView view ; 
 + private Realm realm ; 
 + 
 + public RealmList ( Class < E > clazz , LinkView view , Realm realm ) { 
 + this . clazz = clazz ; 
 + this . view = view ; 
 + this . realm = realm ; 
 + } 
 + 
 + @ Override 
 + public void add ( int location , E object ) { 
 + view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public E set ( int location , E object ) { 
 + view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; 
 + return object ; 
 + } 
 + 
 + public void move ( int oldPos , int newPos ) { 
 + view . move ( oldPos , newPos ) ; 
 + } 
 + 
 + @ Override 
 + public void clear ( ) { 
 + view . clear ( ) ; 
 + } 
 + 
 + @ Override 
 + public E remove ( int location ) { 
 + view . remove ( location ) ; 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public E get ( int i ) { 
 + return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; 
 + } 
 + 
 + public E first ( ) { 
 + if ( ! view . isEmpty ( ) ) { 
 + return get ( 0 ) ; 
 + } 
 + return null ; 
 + } 
 + 
 + public E last ( ) { 
 + if ( ! view . isEmpty ( ) ) { 
 + return get ( size ( ) - 1 ) ; 
 + } 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public int size ( ) { 
 + return ( ( Long ) view . size ( ) ) . intValue ( ) ; 
 + } 
 + 
 + public RealmQuery < E > where ( ) { 
 + return null ; 
 + } 
 + 
 + } 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index 68ebcb2 . . 97ee1f5 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 30 , 7 + 30 , 7 @ @ import io . realm . internal . TableQuery ; 
 * / 
 public class RealmQuery < E extends RealmObject > { 
 
 - private ResultList realmList ; 
 + private RealmResults realmList ; 
 private Realm realm ; 
 private TableQuery query ; 
 private Map < String , Integer > columns = new HashMap < String , Integer > ( ) ; 
 @ @ - 48 , 7 + 48 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 } 
 } 
 
 - public RealmQuery ( ResultList realmList , Class < E > clazz ) { 
 + public RealmQuery ( RealmResults realmList , Class < E > clazz ) { 
 this . realmList = realmList ; 
 
 this . realm = realmList . getRealm ( ) ; 
 @ @ - 454 , 12 + 454 , 12 @ @ public class RealmQuery < E extends RealmObject > { 
 
 / / Execute 
 
 - public ResultList < E > findAll ( ) { 
 - return new ResultList < E > ( realm , query . findAll ( ) , clazz ) ; 
 + public RealmResults < E > findAll ( ) { 
 + return new RealmResults < E > ( realm , query . findAll ( ) , clazz ) ; 
 } 
 
 public E findFirst ( ) { 
 - ResultList < E > result = findAll ( ) ; 
 + RealmResults < E > result = findAll ( ) ; 
 if ( result . size ( ) > 0 ) { 
 return findAll ( ) . get ( 0 ) ; 
 } else { 
 diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java 
 new file mode 100644 
 index 0000000 . . d1d8c30 
 - - - / dev / null 
 + + + b / realm / src / main / java / io / realm / RealmResults . java 
 @ @ - 0 , 0 + 1 , 273 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm ; 
 + 
 + 
 + import java . util . AbstractList ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import io . realm . internal . TableOrView ; 
 + import io . realm . internal . TableView ; 
 + 
 + / * * 
 + * 
 + * @ param < E > The class of objects in this list 
 + * / 
 + public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 + 
 + private Class < E > classSpec ; 
 + private Realm realm ; 
 + private TableOrView table = null ; 
 + 
 + RealmResults ( Realm realm , Class < E > classSpec ) { 
 + this . realm = realm ; 
 + this . classSpec = classSpec ; 
 + } 
 + 
 + RealmResults ( Realm realm , TableOrView table , Class < E > classSpec ) { 
 + this ( realm , classSpec ) ; 
 + this . table = table ; 
 + } 
 + 
 + Realm getRealm ( ) { 
 + return realm ; 
 + } 
 + 
 + TableOrView getTable ( ) { 
 + 
 + if ( table = = null ) { 
 + return realm . getTable ( classSpec ) ; 
 + } else { 
 + return table ; 
 + } 
 + } 
 + 
 + Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; 
 + 
 + 
 + public RealmQuery < E > where ( ) { 
 + return new RealmQuery < E > ( this , classSpec ) ; 
 + } 
 + 
 + 
 + @ Override 
 + public E get ( int rowIndex ) { 
 + 
 + E obj ; 
 + 
 + TableOrView table = getTable ( ) ; 
 + if ( table instanceof TableView ) { 
 + obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; 
 + } else { 
 + obj = realm . get ( classSpec , rowIndex ) ; 
 + } 
 + 
 + return obj ; 
 + } 
 + 
 + public E first ( ) { 
 + return get ( 0 ) ; 
 + } 
 + 
 + public E last ( ) { 
 + return get ( size ( ) - 1 ) ; 
 + } 
 + 
 + / / Sorting 
 + 
 + / / public static enum Order { 
 + / / ASCENDING , DESCENDING 
 + / / } 
 + / / 
 + / / / * * 
 + / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . 
 + / / * 
 + / / * @ param fieldName The field name to sort by . 
 + / / * @ return A sorted RealmList 
 + / / * / 
 + / / public RealmList < E > sort ( String fieldName ) { 
 + / / return sort ( fieldName , Order . ASCENDING ) ; 
 + / / } 
 + / / 
 + / / / * * 
 + / / * Get a sorted RealmList from an existing RealmList . 
 + / / * 
 + / / * @ param fieldName The field name to sort by . 
 + / / * @ param sortOrder The direction to sort by . 
 + / / * @ return A sorted RealmList . 
 + / / * / 
 + / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { 
 + / / throw new NoSuchMethodError ( ) ; 
 + / / } 
 + 
 + 
 + / / Aggregates 
 + 
 + @ Override 
 + public int size ( ) { 
 + return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; 
 + } 
 + 
 + / * * 
 + * Find the minimum value of a field . 
 + * 
 + * @ param fieldName The field to look for a minimum on . Only int , float , and double 
 + * are supported . 
 + * @ return 
 + * / 
 + public Number min ( String fieldName ) { 
 + / / TODO : Date 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . minimumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . minimumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . minimumDouble ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Find the maximum value of a field . 
 + * 
 + * @ param fieldName The field to look for a maximum on . Only int , float , and double 
 + * are supported . 
 + * @ return The maximum value . 
 + * / 
 + public Number max ( String fieldName ) { 
 + / / TODO : Date 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . maximumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . maximumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . maximumDouble ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Calculate the sum of a field . 
 + * 
 + * @ param fieldName The field to sum . Only int , float , and double are supported . 
 + * @ return The sum . 
 + * / 
 + 
 + public Number sum ( String fieldName ) { 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . sumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . sumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . sumDouble ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Returns the average of a given field for objects in a RealmList . 
 + * 
 + * @ param fieldName The field to calculate average on . Only properties of type int , 
 + * float and double are supported . 
 + * @ return The average for the given field amongst objects in an RealmList . This 
 + * will be of type double for both float and double field . 
 + * / 
 + public double average ( String fieldName ) { 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . averageLong ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . averageDouble ( columnIndex ) ; 
 + case FLOAT : 
 + return table . averageFloat ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / / Deleting 
 + 
 + / * * 
 + * Removes an object at a given index . 
 + * 
 + * @ param index The array index identifying the object to be removed . 
 + * @ return Always return null . 
 + * / 
 + @ Override 
 + public E remove ( int index ) { 
 + TableOrView table = getTable ( ) ; 
 + table . remove ( index ) ; 
 + return null ; 
 + } 
 + 
 + / * * 
 + * Removes the last object in a RealmList . 
 + * 
 + * / 
 + public void removeLast ( ) { 
 + TableOrView table = getTable ( ) ; 
 + table . removeLast ( ) ; 
 + } 
 + 
 + / * * 
 + * Removes all objects from a RealmList . 
 + * 
 + * / 
 + public void clear ( ) { 
 + TableOrView table = getTable ( ) ; 
 + table . clear ( ) ; 
 + } 
 + 
 + / / Adding objects 
 + 
 + @ Override 
 + @ Deprecated 
 + public boolean add ( E element ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 + @ Override 
 + @ Deprecated 
 + public void add ( int index , E element ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + / / 
 + / / / * * 
 + / / * Replaces an object at the given index with a new object . 
 + / / * 
 + / / * @ param index The array index of the object to be replaced . 
 + / / * @ param element An object . 
 + / / * / 
 + / / public void replace ( int index , E element ) { 
 + / / throw new NoSuchMethodError ( ) ; 
 + / / } 
 + } 
 diff - - git a / realm / src / main / java / io / realm / RelationList . java b / realm / src / main / java / io / realm / RelationList . java 
 deleted file mode 100644 
 index 3616353 . . 0000000 
 - - - a / realm / src / main / java / io / realm / RelationList . java 
 + + + / dev / null 
 @ @ - 1 , 89 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - import java . util . AbstractList ; 
 - 
 - import io . realm . internal . LinkView ; 
 - 
 - public class RelationList < E extends RealmObject > extends AbstractList < E > { 
 - 
 - private Class < E > clazz ; 
 - private LinkView view ; 
 - private Realm realm ; 
 - 
 - public RelationList ( Class < E > clazz , LinkView view , Realm realm ) { 
 - this . clazz = clazz ; 
 - this . view = view ; 
 - this . realm = realm ; 
 - } 
 - 
 - @ Override 
 - public void add ( int location , E object ) { 
 - view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; 
 - } 
 - 
 - @ Override 
 - public E set ( int location , E object ) { 
 - view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; 
 - return object ; 
 - } 
 - 
 - public void move ( int oldPos , int newPos ) { 
 - view . move ( oldPos , newPos ) ; 
 - } 
 - 
 - @ Override 
 - public void clear ( ) { 
 - view . clear ( ) ; 
 - } 
 - 
 - @ Override 
 - public E remove ( int location ) { 
 - view . remove ( location ) ; 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public E get ( int i ) { 
 - return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; 
 - } 
 - 
 - public E first ( ) { 
 - if ( ! view . isEmpty ( ) ) { 
 - return get ( 0 ) ; 
 - } 
 - return null ; 
 - } 
 - 
 - public E last ( ) { 
 - if ( ! view . isEmpty ( ) ) { 
 - return get ( size ( ) - 1 ) ; 
 - } 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public int size ( ) { 
 - return ( ( Long ) view . size ( ) ) . intValue ( ) ; 
 - } 
 - 
 - public RealmQuery < E > where ( ) { 
 - return null ; 
 - } 
 - 
 - } 
 diff - - git a / realm / src / main / java / io / realm / ResultList . java b / realm / src / main / java / io / realm / ResultList . java 
 deleted file mode 100644 
 index c92a51b . . 0000000 
 - - - a / realm / src / main / java / io / realm / ResultList . java 
 + + + / dev / null 
 @ @ - 1 , 273 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - 
 - import java . util . AbstractList ; 
 - import java . util . HashMap ; 
 - import java . util . Map ; 
 - 
 - import io . realm . internal . TableOrView ; 
 - import io . realm . internal . TableView ; 
 - 
 - / * * 
 - * 
 - * @ param < E > The class of objects in this list 
 - * / 
 - public class ResultList < E extends RealmObject > extends AbstractList < E > { 
 - 
 - private Class < E > classSpec ; 
 - private Realm realm ; 
 - private TableOrView table = null ; 
 - 
 - ResultList ( Realm realm , Class < E > classSpec ) { 
 - this . realm = realm ; 
 - this . classSpec = classSpec ; 
 - } 
 - 
 - ResultList ( Realm realm , TableOrView table , Class < E > classSpec ) { 
 - this ( realm , classSpec ) ; 
 - this . table = table ; 
 - } 
 - 
 - Realm getRealm ( ) { 
 - return realm ; 
 - } 
 - 
 - TableOrView getTable ( ) { 
 - 
 - if ( table = = null ) { 
 - return realm . getTable ( classSpec ) ; 
 - } else { 
 - return table ; 
 - } 
 - } 
 - 
 - Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; 
 - 
 - 
 - public RealmQuery < E > where ( ) { 
 - return new RealmQuery < E > ( this , classSpec ) ; 
 - } 
 - 
 - 
 - @ Override 
 - public E get ( int rowIndex ) { 
 - 
 - E obj ; 
 - 
 - TableOrView table = getTable ( ) ; 
 - if ( table instanceof TableView ) { 
 - obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; 
 - } else { 
 - obj = realm . get ( classSpec , rowIndex ) ; 
 - } 
 - 
 - return obj ; 
 - } 
 - 
 - public E first ( ) { 
 - return get ( 0 ) ; 
 - } 
 - 
 - public E last ( ) { 
 - return get ( size ( ) - 1 ) ; 
 - } 
 - 
 - / / Sorting 
 - 
 - / / public static enum Order { 
 - / / ASCENDING , DESCENDING 
 - / / } 
 - / / 
 - / / / * * 
 - / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . 
 - / / * 
 - / / * @ param fieldName The field name to sort by . 
 - / / * @ return A sorted RealmList 
 - / / * / 
 - / / public RealmList < E > sort ( String fieldName ) { 
 - / / return sort ( fieldName , Order . ASCENDING ) ; 
 - / / } 
 - / / 
 - / / / * * 
 - / / * Get a sorted RealmList from an existing RealmList . 
 - / / * 
 - / / * @ param fieldName The field name to sort by . 
 - / / * @ param sortOrder The direction to sort by . 
 - / / * @ return A sorted RealmList . 
 - / / * / 
 - / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { 
 - / / throw new NoSuchMethodError ( ) ; 
 - / / } 
 - 
 - 
 - / / Aggregates 
 - 
 - @ Override 
 - public int size ( ) { 
 - return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; 
 - } 
 - 
 - / * * 
 - * Find the minimum value of a field . 
 - * 
 - * @ param fieldName The field to look for a minimum on . Only int , float , and double 
 - * are supported . 
 - * @ return 
 - * / 
 - public Number min ( String fieldName ) { 
 - / / TODO : Date 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . minimumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . minimumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . minimumDouble ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / * * 
 - * Find the maximum value of a field . 
 - * 
 - * @ param fieldName The field to look for a maximum on . Only int , float , and double 
 - * are supported . 
 - * @ return The maximum value . 
 - * / 
 - public Number max ( String fieldName ) { 
 - / / TODO : Date 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . maximumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . maximumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . maximumDouble ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / * * 
 - * Calculate the sum of a field . 
 - * 
 - * @ param fieldName The field to sum . Only int , float , and double are supported . 
 - * @ return The sum . 
 - * / 
 - 
 - public Number sum ( String fieldName ) { 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . sumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . sumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . sumDouble ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / * * 
 - * Returns the average of a given field for objects in a RealmList . 
 - * 
 - * @ param fieldName The field to calculate average on . Only properties of type int , 
 - * float and double are supported . 
 - * @ return The average for the given field amongst objects in an RealmList . This 
 - * will be of type double for both float and double field . 
 - * / 
 - public double average ( String fieldName ) { 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . averageLong ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . averageDouble ( columnIndex ) ; 
 - case FLOAT : 
 - return table . averageFloat ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / / Deleting 
 - 
 - / * * 
 - * Removes an object at a given index . 
 - * 
 - * @ param index The array index identifying the object to be removed . 
 - * @ return Always return null . 
 - * / 
 - @ Override 
 - public E remove ( int index ) { 
 - TableOrView table = getTable ( ) ; 
 - table . remove ( index ) ; 
 - return null ; 
 - } 
 - 
 - / * * 
 - * Removes the last object in a RealmList . 
 - * 
 - * / 
 - public void removeLast ( ) { 
 - TableOrView table = getTable ( ) ; 
 - table . removeLast ( ) ; 
 - } 
 - 
 - / * * 
 - * Removes all objects from a RealmList . 
 - * 
 - * / 
 - public void clear ( ) { 
 - TableOrView table = getTable ( ) ; 
 - table . clear ( ) ; 
 - } 
 - 
 - / / Adding objects 
 - 
 - @ Override 
 - @ Deprecated 
 - public boolean add ( E element ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - @ Deprecated 
 - public void add ( int index , E element ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - / / 
 - / / / * * 
 - / / * Replaces an object at the given index with a new object . 
 - / / * 
 - / / * @ param index The array index of the object to be replaced . 
 - / / * @ param element An object . 
 - / / * / 
 - / / public void replace ( int index , E element ) { 
 - / / throw new NoSuchMethodError ( ) ; 
 - / / } 
 - }
