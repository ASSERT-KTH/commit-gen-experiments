BLEU SCORE: 0.034353182138500235

TEST MSG: Transaction should not block opening Realm
GENERATED MSG: Added a unit test for notifications count

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index 0f513bd . . 86d949f 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 2801 , 4 + 2801 , 25 @ @ public class RealmTests { <nl> assertEquals ( 0 , realm . where ( Cat . class ) . count ( ) ) ; <nl> assertTrue ( realm . isEmpty ( ) ) ; <nl> } <nl> + <nl> + / / When there is a transaction holding by a typed Realm in one thread , getInstance from the <nl> + / / other thread should not be blocked since we have cached the schemas already . <nl> + @ Test <nl> + public void getInstance _ shouldNotBeBlockedByTransactionInAnotherThread ( ) <nl> + throws InterruptedException { <nl> + final CountDownLatch latch = new CountDownLatch ( 1 ) ; <nl> + realm . beginTransaction ( ) ; <nl> + <nl> + Thread thread = new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> + realm . close ( ) ; <nl> + latch . countDown ( ) ; <nl> + } <nl> + } ) ; <nl> + thread . start ( ) ; <nl> + TestHelper . awaitOrFail ( latch ) ; <nl> + realm . cancelTransaction ( ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 31b6850 . . 66a1518 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 203 , 4 + 203 , 33 @ @ public class NotificationsTest extends AndroidTestCase { <nl> } <nl> assertTrue ( done . get ( ) ) ; <nl> } <nl> + <nl> + public void testNotificationsNumber ( ) throws InterruptedException { <nl> + final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> + HandlerThread thread = new HandlerThread ( " Receiver " ) { <nl> + @ Override <nl> + protected void onLooperPrepared ( ) { <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + realm . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + counter . incrementAndGet ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } ; <nl> + thread . start ( ) ; <nl> + <nl> + Realm realm = Realm . getInstance ( getContext ( ) , false ) ; <nl> + realm . beginTransaction ( ) ; <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setName ( " Rex " ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + Thread . sleep ( 100 ) ; <nl> + <nl> + assertEquals ( 1 , counter . get ( ) ) ; <nl> + <nl> + thread . join ( 1 ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index 0f513bd . . 86d949f 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 2801 , 4 + 2801 , 25 @ @ public class RealmTests { 
 assertEquals ( 0 , realm . where ( Cat . class ) . count ( ) ) ; 
 assertTrue ( realm . isEmpty ( ) ) ; 
 } 
 + 
 + / / When there is a transaction holding by a typed Realm in one thread , getInstance from the 
 + / / other thread should not be blocked since we have cached the schemas already . 
 + @ Test 
 + public void getInstance _ shouldNotBeBlockedByTransactionInAnotherThread ( ) 
 + throws InterruptedException { 
 + final CountDownLatch latch = new CountDownLatch ( 1 ) ; 
 + realm . beginTransaction ( ) ; 
 + 
 + Thread thread = new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 + realm . close ( ) ; 
 + latch . countDown ( ) ; 
 + } 
 + } ) ; 
 + thread . start ( ) ; 
 + TestHelper . awaitOrFail ( latch ) ; 
 + realm . cancelTransaction ( ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 index 31b6850 . . 66a1518 100644 
 - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 203 , 4 + 203 , 33 @ @ public class NotificationsTest extends AndroidTestCase { 
 } 
 assertTrue ( done . get ( ) ) ; 
 } 
 + 
 + public void testNotificationsNumber ( ) throws InterruptedException { 
 + final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 + HandlerThread thread = new HandlerThread ( " Receiver " ) { 
 + @ Override 
 + protected void onLooperPrepared ( ) { 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + realm . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + counter . incrementAndGet ( ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + thread . start ( ) ; 
 + 
 + Realm realm = Realm . getInstance ( getContext ( ) , false ) ; 
 + realm . beginTransaction ( ) ; 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setName ( " Rex " ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + Thread . sleep ( 100 ) ; 
 + 
 + assertEquals ( 1 , counter . get ( ) ) ; 
 + 
 + thread . join ( 1 ) ; 
 + } 
 }
