BLEU SCORE: 0.01295111245998798

TEST MSG: Javadoc cleanup
GENERATED MSG: Language cleanup + added missing info to public classes .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> index c6a8f2f . . 6acd7df 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> @ @ - 219 , 10 + 219 , 4 @ @ public class RxJavaTests extends AndroidTestCase { <nl> dynamicRealm . close ( ) ; <nl> } <nl> <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index fb32c48 . . 2a21508 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 162 , 12 + 162 , 12 @ @ public abstract class BaseRealm implements Closeable { <nl> } <nl> <nl> / * * <nl> - * Returns an Rx Observable that monitors changes to this Realm . It will output the last state when <nl> - * subscribed to . <nl> + * Returns an Rx Observable that monitors changes to this Realm . It will emit the current state when subscribed <nl> + * to . <nl> * <nl> * @ return RxJava Observable <nl> * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> - * @ see < a href = " " > RxJava and Realm < / a > <nl> + * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > <nl> * / <nl> public abstract Observable asObservable ( ) ; <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 3231ff9 . . f57e9aa 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 148 , 7 + 148 , 7 @ @ public class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Returns the { @ link RxObservableFactory } used to create Rx Observables from Realm . <nl> + * Returns the { @ link RxObservableFactory } that is used to create Rx Observables from Realm objects . <nl> * <nl> * @ return the factory instance used to create Rx Observables . <nl> * / <nl> @ @ - 437 , 7 + 437 , 7 @ @ public class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Sets the { @ link RxObservableFactory } used to create RxObservables from Realm . <nl> + * Sets the { @ link RxObservableFactory } used to create Rx Observables from Realm objects . <nl> * The default factory is { @ link RealmObservableFactory } . <nl> * <nl> * @ param factory factory to use . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 990e8fc . . 54c1ebf 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 264 , 12 + 264 , 12 @ @ public abstract class RealmObject < E extends RealmObject > { <nl> } <nl> <nl> / * * <nl> - * Returns an Rx Observable that monitors changes to this RealmObject . It will output the object when <nl> + * Returns an Rx Observable that monitors changes to this RealmObject . It will emit the current object when <nl> * subscribed to . <nl> * <nl> * @ return RxJava Observable <nl> * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> - * @ see < a href = " " > RxJava and Realm < / a > <nl> + * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > <nl> * / <nl> public Observable < E > asObservable ( ) { <nl> return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index ffe12a4 . . bd17130 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 829 , 12 + 829 , 12 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> <nl> / * * <nl> - * Returns an Rx Observable that monitors changes to this RealmResults . It will output the last results when <nl> + * Returns an Rx Observable that monitors changes to this RealmResults . It will emit the current RealmResults when <nl> * subscribed to . <nl> * <nl> * @ return RxJava Observable <nl> * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> - * @ see < a href = " " > RxJava and Realm < / a > <nl> + * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > <nl> * / <nl> public Observable < RealmResults < E > > asObservable ( ) { <nl> return realm . configuration . getRxFactory ( ) . from ( this ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java <nl> index 9f91233 . . 88919d3 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package io . realm . rx ; <nl> <nl> - import io . realm . BaseRealm ; <nl> import io . realm . DynamicRealm ; <nl> import io . realm . Realm ; <nl> import io . realm . RealmList ; <nl> @ @ - 9 , 14 + 8 , 14 @ @ import io . realm . RealmResults ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> - * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects before <nl> - * emitting them . This is effectively a snapshot of the Realm data at a given point in time . <nl> + * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects <nl> + * before emitting them . This is effectively a snapshot of the Realm data at a given point in time . <nl> * <nl> * This has the following implications : <nl> * <nl> * - Increased memory usage , as all fields including references are copied to the Java heap . <nl> - * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm , but <nl> - * the object will no longer automatically update either . <nl> + * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm and the <nl> + * object will no longer automatically update either . <nl> * - All guarantees of staying consistent with other data from persisted Realm objects are gone . <nl> * - The object is no longer thread - confined and can be parsed between threads . <nl> * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> index 9919f3c . . 8b5853e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> @ @ - 16 , 7 + 16 , 6 @ @ <nl> <nl> package io . realm . rx ; <nl> <nl> - import io . realm . BaseRealm ; <nl> import io . realm . DynamicRealm ; <nl> import io . realm . DynamicRealmObject ; <nl> import io . realm . Realm ; <nl> @ @ - 30 , 7 + 29 , 7 @ @ import rx . functions . Action0 ; <nl> import rx . subscriptions . Subscriptions ; <nl> <nl> / * * <nl> - * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . <nl> + * Factory class for creating Observables for RxJava ( < = 1 . 0 . * ) . <nl> * <nl> * @ see Realm # asObservable ( ) <nl> * @ see RealmObject # asObservable ( ) <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> index 8b7386d . . 32c8ae0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> @ @ - 8 , 15 + 8 , 15 @ @ import io . realm . RealmResults ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> - * Factory interface for creating Rx Observables from Realm classes . <nl> + * Factory interface for creating Rx Observables for Realm classes . <nl> * / <nl> public interface RxObservableFactory { <nl> <nl> / * * <nl> * Creates an Observable for a { @ link Realm } . It should emit the initial state of the Realm when subscribed to and <nl> - * on each update to the Realm . <nl> + * on each subsequent update of the Realm . <nl> * <nl> - * Realm observables are effectively hot observables as Realms auto - update . <nl> + * Realm observables are hot observables as Realms automatically are kept up to date . <nl> * <nl> * @ param realm { @ link Realm } to listen to changes for . <nl> * / <nl> @ @ - 24 , 19 + 24 , 19 @ @ public interface RxObservableFactory { <nl> <nl> / * * <nl> * Creates an Observable for a { @ link DynamicRealm } . It should emit the initial state of the Realm when subscribed <nl> - * to and on each update to the Realm . <nl> + * to and on each subsequent update of the Realm . <nl> * <nl> - * Realm observables are effectively hot observables as Realms auto - update . <nl> + * Realm observables are hot observables as Realms automatically are kept up to date . <nl> * <nl> * @ param realm { @ link DynamicRealm } to listen to changes for . <nl> * / <nl> Observable < DynamicRealm > from ( DynamicRealm realm ) ; <nl> <nl> / * * <nl> - * Creates an Observable for a { @ link RealmResults } . It should emit the initial results when subscribed to and on <nl> - * each update to the results . <nl> + * Creates an Observable for a { @ link RealmResults } . It should emit the initial RealmResult when subscribed to and <nl> + * on each subsequent update of the RealmResults . <nl> * <nl> - * RealmResults observables are effectively hot observables as RealmObjects auto - update . <nl> + * Realm observables are hot observables as RealmResults are automatically kept up to date . <nl> * <nl> * @ param results { @ link RealmResults } to listen to changes for . <nl> * @ param < E > type of RealmObject <nl> @ @ - 45 , 9 + 45 , 9 @ @ public interface RxObservableFactory { <nl> <nl> / * * <nl> * Creates an Observable for a { @ link RealmList } . It should emit the initial list when subscribed to and on each <nl> - * update to the list . <nl> + * subsequent update of the RealmList . <nl> * <nl> - * RealmList observables are effectively hot observables as RealmLists auto - update . <nl> + * Realm observables are hot observables as Realms automatically are kept up to date . <nl> * <nl> * Note : { @ link io . realm . RealmChangeListener } is currently not supported on RealmLists . <nl> * <nl> @ @ - 57 , 10 + 57 , 10 @ @ public interface RxObservableFactory { <nl> < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> <nl> / * * <nl> - * Creates an Observable for a { @ link RealmObject } . It should emit the initial object when subscribed to and on each update <nl> - * to the object . <nl> + * Creates an Observable for a { @ link RealmObject } . It should emit the initial object when subscribed to and on each <nl> + * subsequent update of the object . <nl> * <nl> - * RealmObject observables are effectively hot observables as RealmObjects auto - update . <nl> + * Realm observables are hot observables as Realms automatically are kept up to date . <nl> * <nl> * @ param object RealmObject to listen to changes for . <nl> * @ param < E > type of RealmObject
NEAREST DIFF (one line): diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index e8a9425 . . 00934ea 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 73 , 11 + 73 , 11 @ @ import io . realm . internal . log . RealmLog ; <nl> * instance . Failing to do so can lead to { @ link java . lang . OutOfMemoryError } as the native <nl> * resources cannot be freed . <nl> * <nl> - * Realm instances cannot be used across different threads , which means you have to open an instance <nl> - * pr . thread . Realm instances are cached automatically per thread using reference counting , so as <nl> - * long as the reference count doesn ' t reach zero , calling <nl> - * { @ link # getInstance ( android . content . Context ) } will just return the cached Realm which and should <nl> - * be considered a lightweight operation . <nl> + * Realm instances cannot be used across different threads . This means that you have to open an <nl> + * instance on each thread you want to use Realm . Realm instances are cached automatically per <nl> + * thread using reference counting , so as long as the reference count doesn ' t reach zero , calling <nl> + * { @ link # getInstance ( android . content . Context ) } will just return the cached Realm and should be <nl> + * considered a lightweight operation . <nl> * <nl> * For the UI thread this means that opening and closing Realms should occur in either <nl> * onCreate / onDestroy or onStart / onStop . onResume / onPause do not overlap between new activities , <nl> @ @ - 88 , 7 + 88 , 7 @ @ import io . realm . internal . log . RealmLog ; <nl> * mechanism . This also mean that Realm instances on threads without a { @ link android . os . Looper } <nl> * doesn ' t get updated unless { @ link # refresh ( ) } is manually called . <nl> * <nl> - * A standard pattern for working with Realm in Android activities is below : <nl> + * A standard pattern for working with Realm in Android activities can be seen below : <nl> * <nl> * < pre > <nl> * public class RealmActivity extends Activity { <nl> @ @ - 113 , 7 + 113 , 7 @ @ import io . realm . internal . log . RealmLog ; <nl> * Realm support String and byte fields containing up to 16 MB . <nl> * <nl> * @ see < a href = " http : / / en . wikipedia . org / wiki / ACID " > ACID < / a > <nl> - * @ see < a href = " https : / / github . com / realm / realm - java / tree / master / examples " > More Realm examples < / a > <nl> + * @ see < a href = " https : / / github . com / realm / realm - java / tree / master / examples " > Examples using Realm < / a > <nl> * / <nl> public final class Realm implements Closeable { <nl> public static final String DEFAULT _ REALM _ NAME = " default . realm " ; <nl> diff - - git a / realm / src / main / java / io / realm / RealmBaseAdapter . java b / realm / src / main / java / io / realm / RealmBaseAdapter . java <nl> index 6d63eab . . 4c7d794 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmBaseAdapter . java <nl> + + + b / realm / src / main / java / io / realm / RealmBaseAdapter . java <nl> @ @ - 27 , 8 + 27 , 9 @ @ import android . widget . BaseAdapter ; <nl> * This adapter will automatically handle any updates to its data and call <nl> * { @ link # notifyDataSetChanged ( ) } as appropriate . <nl> * <nl> - * The RealmAdapter will no longer get any updates and will throw an error if it is accessed after <nl> - * the Realm instance from where the RealmResults came is closed . <nl> + * The RealmAdapter will stop receiving updates if the Realm instance providing the <nl> + * { @ link io . realm . RealmResults } is closed . Trying to access read objects , will at this point also <nl> + * result in a { @ link io . realm . exceptions . RealmException } . <nl> * / <nl> public abstract class RealmBaseAdapter < T extends RealmObject > extends BaseAdapter { <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmChangeListener . java b / realm / src / main / java / io / realm / RealmChangeListener . java <nl> index e04fd4b . . a0183c4 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmChangeListener . java <nl> + + + b / realm / src / main / java / io / realm / RealmChangeListener . java <nl> @ @ - 19 , 11 + 19 , 11 @ @ package io . realm ; <nl> / * * <nl> * Using RealmChangeListener , it is possible to be notified when a Realm instance has been updated . <nl> * <nl> - * Realm instances on a thread without a Looper ( almost all background threads ) doesn ' t get <nl> - * updated automatically , but have to call { @ link Realm # refresh ( ) } manually . This will in turn trigger <nl> - * the RealmChangeListener for that background thread . <nl> + * Realm instances on a thread without a { @ link android . os . Looper } ( almost all background threads ) <nl> + * doesn ' t get updated automatically , but have to call { @ link Realm # refresh ( ) } manually . This will <nl> + * in turn trigger the RealmChangeListener for that background thread . <nl> * <nl> - * All { @ link io . realm . RealmObject } s and { @ link io . realm . RealmResults } will automatically contain <nl> + * All { @ link io . realm . RealmObject } and { @ link io . realm . RealmResults } will automatically contain <nl> * their new values when the { @ link # onChange ( ) } method is called . Normally this means that it <nl> * isn ' t necessary to query again for those objects , but just invalidate any UI elements that are <nl> * using them . If there is a chance that a object has been been deleted , it can be verified <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> index 912d4c2 . . 83e1455 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 27 , 16 + 27 , 16 @ @ import io . realm . internal . TableQuery ; <nl> / * * <nl> * RealmList is used to model one - to - many relationships in a { @ link io . realm . RealmObject } . <nl> * RealmList has two modes : A managed and non - managed mode . In managed mode all objects are persisted <nl> - * inside a Realm , in non - managed mode it functions as an normal ArrayList . <nl> + * inside a Realm , in non - managed mode it works as an normal ArrayList . <nl> * <nl> - * Only Realm can create managed RealmList ' s . Managed RealmList ' s will automatically update its <nl> + * Only Realm can create managed RealmLists . Managed RealmLists will automatically update its <nl> * content whenever the underlying Realm is updated , and can only be accessed using the getter <nl> * from a { @ link io . realm . RealmObject } . <nl> * <nl> * Non - managed RealmLists can be created by the user and can contain both managed and non - managed <nl> * RealmObjects . This is useful eg . when dealing with JSON deserializers like GSON or other <nl> * frameworks that inject values into a class . Non - managed elements in this list can be added to a <nl> - * Realm using { @ link Realm # copyToRealm ( Iterable ) } . <nl> + * Realm using the { @ link Realm # copyToRealm ( Iterable ) } method . <nl> * <nl> * @ param < E > The class of objects in list . <nl> * / <nl> diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java <nl> index 1956ad2 . . a97f049 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / src / main / java / io / realm / RealmObject . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ import io . realm . internal . Row ; <nl> * - Getter and setters for these fields . <nl> * - Static methods . <nl> * <nl> - * The following field data types are supported : <nl> + * The following field data types are supported ( No boxed types ) : <nl> * - boolean <nl> * - short <nl> * - int <nl> @ @ - 55 , 11 + 55 , 13 @ @ import io . realm . internal . Row ; <nl> * - Any RealmObject subclass <nl> * - RealmList <nl> * <nl> - * All fields that are not annotated with { @ link io . realm . annotations . Ignore } require both a <nl> - * getter and setter . Getter and setter names must have the name { @ code getXXX } or { @ code setXXX } if <nl> + * Getter and setter names must have the name { @ code getXXX } or { @ code setXXX } if <nl> * the field name is { @ code XXX } . Getters for fields of type boolean can be called { @ code isXXX } as <nl> * well . <nl> * <nl> + * Fields annotated with { @ link io . realm . annotations . Ignore } doesn ' t have these restrictions and <nl> + * don ' t require either a getter or setter . <nl> + * <nl> * A RealmObject cannot be parsed between different threads . <nl> * <nl> * @ see Realm # createObject ( Class ) <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index 40369c5 . . 6959bac 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 37 , 6 + 37 , 10 @ @ import io . realm . internal . TableView ; <nl> * type safe , so if a model class is refactored care has to be taken to not break any queries . <nl> * This is not optimal , but it is our current best compromise between ease of use and type safety . <nl> * <nl> + * A { @ link io . realm . Realm } is unordered , which means that there is no guarantee that querying a <nl> + * Realm will return the objects in the order they where inserted . Use <nl> + * { @ link # findAllSorted ( String ) } and similar methods if a specific order is required . <nl> + * <nl> * A RealmQuery cannot be parsed between different threads . <nl> * <nl> * @ param < E > The class of the objects to be queried . <nl> diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java <nl> index 3e4b93f . . ca60ba4 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / src / main / java / io / realm / RealmResults . java <nl> @ @ - 33 , 10 + 33 , 10 @ @ import io . realm . internal . TableView ; <nl> / * * <nl> * This class holds all the matches of a { @ link io . realm . RealmQuery } for a given Realm . The objects <nl> * are not copied from the Realm to the RealmResults list , but are just referenced from the <nl> - * RealmResult instead . This saves memory and increase speed . <nl> + * RealmResult instead . This saves memory and increases speed . <nl> * <nl> - * Updates to RealmObjects from a RealmResults list must be done within a transaction and the <nl> - * modified objects are persisted to the backing Realm file during the commit of the transaction . <nl> + * Updates to RealmObjects from a RealmResults list must be done from within a transaction and the <nl> + * modified objects are persisted to the Realm file during the commit of the transaction . <nl> * <nl> * A RealmResults object cannot be parsed between different threads . <nl> *

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 index c6a8f2f . . 6acd7df 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 @ @ - 219 , 10 + 219 , 4 @ @ public class RxJavaTests extends AndroidTestCase { 
 dynamicRealm . close ( ) ; 
 } 
 
 - 
 - 
 - 
 - 
 - 
 - 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index fb32c48 . . 2a21508 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 162 , 12 + 162 , 12 @ @ public abstract class BaseRealm implements Closeable { 
 } 
 
 / * * 
 - * Returns an Rx Observable that monitors changes to this Realm . It will output the last state when 
 - * subscribed to . 
 + * Returns an Rx Observable that monitors changes to this Realm . It will emit the current state when subscribed 
 + * to . 
 * 
 * @ return RxJava Observable 
 * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 - * @ see < a href = " " > RxJava and Realm < / a > 
 + * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > 
 * / 
 public abstract Observable asObservable ( ) ; 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 3231ff9 . . f57e9aa 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 148 , 7 + 148 , 7 @ @ public class RealmConfiguration { 
 } 
 
 / * * 
 - * Returns the { @ link RxObservableFactory } used to create Rx Observables from Realm . 
 + * Returns the { @ link RxObservableFactory } that is used to create Rx Observables from Realm objects . 
 * 
 * @ return the factory instance used to create Rx Observables . 
 * / 
 @ @ - 437 , 7 + 437 , 7 @ @ public class RealmConfiguration { 
 } 
 
 / * * 
 - * Sets the { @ link RxObservableFactory } used to create RxObservables from Realm . 
 + * Sets the { @ link RxObservableFactory } used to create Rx Observables from Realm objects . 
 * The default factory is { @ link RealmObservableFactory } . 
 * 
 * @ param factory factory to use . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 990e8fc . . 54c1ebf 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 264 , 12 + 264 , 12 @ @ public abstract class RealmObject < E extends RealmObject > { 
 } 
 
 / * * 
 - * Returns an Rx Observable that monitors changes to this RealmObject . It will output the object when 
 + * Returns an Rx Observable that monitors changes to this RealmObject . It will emit the current object when 
 * subscribed to . 
 * 
 * @ return RxJava Observable 
 * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 - * @ see < a href = " " > RxJava and Realm < / a > 
 + * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > 
 * / 
 public Observable < E > asObservable ( ) { 
 return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index ffe12a4 . . bd17130 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 829 , 12 + 829 , 12 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 } 
 
 / * * 
 - * Returns an Rx Observable that monitors changes to this RealmResults . It will output the last results when 
 + * Returns an Rx Observable that monitors changes to this RealmResults . It will emit the current RealmResults when 
 * subscribed to . 
 * 
 * @ return RxJava Observable 
 * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 - * @ see < a href = " " > RxJava and Realm < / a > 
 + * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > 
 * / 
 public Observable < RealmResults < E > > asObservable ( ) { 
 return realm . configuration . getRxFactory ( ) . from ( this ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java 
 index 9f91233 . . 88919d3 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package io . realm . rx ; 
 
 - import io . realm . BaseRealm ; 
 import io . realm . DynamicRealm ; 
 import io . realm . Realm ; 
 import io . realm . RealmList ; 
 @ @ - 9 , 14 + 8 , 14 @ @ import io . realm . RealmResults ; 
 import rx . Observable ; 
 
 / * * 
 - * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects before 
 - * emitting them . This is effectively a snapshot of the Realm data at a given point in time . 
 + * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects 
 + * before emitting them . This is effectively a snapshot of the Realm data at a given point in time . 
 * 
 * This has the following implications : 
 * 
 * - Increased memory usage , as all fields including references are copied to the Java heap . 
 - * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm , but 
 - * the object will no longer automatically update either . 
 + * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm and the 
 + * object will no longer automatically update either . 
 * - All guarantees of staying consistent with other data from persisted Realm objects are gone . 
 * - The object is no longer thread - confined and can be parsed between threads . 
 * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 index 9919f3c . . 8b5853e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 @ @ - 16 , 7 + 16 , 6 @ @ 
 
 package io . realm . rx ; 
 
 - import io . realm . BaseRealm ; 
 import io . realm . DynamicRealm ; 
 import io . realm . DynamicRealmObject ; 
 import io . realm . Realm ; 
 @ @ - 30 , 7 + 29 , 7 @ @ import rx . functions . Action0 ; 
 import rx . subscriptions . Subscriptions ; 
 
 / * * 
 - * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . 
 + * Factory class for creating Observables for RxJava ( < = 1 . 0 . * ) . 
 * 
 * @ see Realm # asObservable ( ) 
 * @ see RealmObject # asObservable ( ) 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 index 8b7386d . . 32c8ae0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 @ @ - 8 , 15 + 8 , 15 @ @ import io . realm . RealmResults ; 
 import rx . Observable ; 
 
 / * * 
 - * Factory interface for creating Rx Observables from Realm classes . 
 + * Factory interface for creating Rx Observables for Realm classes . 
 * / 
 public interface RxObservableFactory { 
 
 / * * 
 * Creates an Observable for a { @ link Realm } . It should emit the initial state of the Realm when subscribed to and 
 - * on each update to the Realm . 
 + * on each subsequent update of the Realm . 
 * 
 - * Realm observables are effectively hot observables as Realms auto - update . 
 + * Realm observables are hot observables as Realms automatically are kept up to date . 
 * 
 * @ param realm { @ link Realm } to listen to changes for . 
 * / 
 @ @ - 24 , 19 + 24 , 19 @ @ public interface RxObservableFactory { 
 
 / * * 
 * Creates an Observable for a { @ link DynamicRealm } . It should emit the initial state of the Realm when subscribed 
 - * to and on each update to the Realm . 
 + * to and on each subsequent update of the Realm . 
 * 
 - * Realm observables are effectively hot observables as Realms auto - update . 
 + * Realm observables are hot observables as Realms automatically are kept up to date . 
 * 
 * @ param realm { @ link DynamicRealm } to listen to changes for . 
 * / 
 Observable < DynamicRealm > from ( DynamicRealm realm ) ; 
 
 / * * 
 - * Creates an Observable for a { @ link RealmResults } . It should emit the initial results when subscribed to and on 
 - * each update to the results . 
 + * Creates an Observable for a { @ link RealmResults } . It should emit the initial RealmResult when subscribed to and 
 + * on each subsequent update of the RealmResults . 
 * 
 - * RealmResults observables are effectively hot observables as RealmObjects auto - update . 
 + * Realm observables are hot observables as RealmResults are automatically kept up to date . 
 * 
 * @ param results { @ link RealmResults } to listen to changes for . 
 * @ param < E > type of RealmObject 
 @ @ - 45 , 9 + 45 , 9 @ @ public interface RxObservableFactory { 
 
 / * * 
 * Creates an Observable for a { @ link RealmList } . It should emit the initial list when subscribed to and on each 
 - * update to the list . 
 + * subsequent update of the RealmList . 
 * 
 - * RealmList observables are effectively hot observables as RealmLists auto - update . 
 + * Realm observables are hot observables as Realms automatically are kept up to date . 
 * 
 * Note : { @ link io . realm . RealmChangeListener } is currently not supported on RealmLists . 
 * 
 @ @ - 57 , 10 + 57 , 10 @ @ public interface RxObservableFactory { 
 < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 
 / * * 
 - * Creates an Observable for a { @ link RealmObject } . It should emit the initial object when subscribed to and on each update 
 - * to the object . 
 + * Creates an Observable for a { @ link RealmObject } . It should emit the initial object when subscribed to and on each 
 + * subsequent update of the object . 
 * 
 - * RealmObject observables are effectively hot observables as RealmObjects auto - update . 
 + * Realm observables are hot observables as Realms automatically are kept up to date . 
 * 
 * @ param object RealmObject to listen to changes for . 
 * @ param < E > type of RealmObject

NEAREST DIFF:
diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index e8a9425 . . 00934ea 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 73 , 11 + 73 , 11 @ @ import io . realm . internal . log . RealmLog ; 
 * instance . Failing to do so can lead to { @ link java . lang . OutOfMemoryError } as the native 
 * resources cannot be freed . 
 * 
 - * Realm instances cannot be used across different threads , which means you have to open an instance 
 - * pr . thread . Realm instances are cached automatically per thread using reference counting , so as 
 - * long as the reference count doesn ' t reach zero , calling 
 - * { @ link # getInstance ( android . content . Context ) } will just return the cached Realm which and should 
 - * be considered a lightweight operation . 
 + * Realm instances cannot be used across different threads . This means that you have to open an 
 + * instance on each thread you want to use Realm . Realm instances are cached automatically per 
 + * thread using reference counting , so as long as the reference count doesn ' t reach zero , calling 
 + * { @ link # getInstance ( android . content . Context ) } will just return the cached Realm and should be 
 + * considered a lightweight operation . 
 * 
 * For the UI thread this means that opening and closing Realms should occur in either 
 * onCreate / onDestroy or onStart / onStop . onResume / onPause do not overlap between new activities , 
 @ @ - 88 , 7 + 88 , 7 @ @ import io . realm . internal . log . RealmLog ; 
 * mechanism . This also mean that Realm instances on threads without a { @ link android . os . Looper } 
 * doesn ' t get updated unless { @ link # refresh ( ) } is manually called . 
 * 
 - * A standard pattern for working with Realm in Android activities is below : 
 + * A standard pattern for working with Realm in Android activities can be seen below : 
 * 
 * < pre > 
 * public class RealmActivity extends Activity { 
 @ @ - 113 , 7 + 113 , 7 @ @ import io . realm . internal . log . RealmLog ; 
 * Realm support String and byte fields containing up to 16 MB . 
 * 
 * @ see < a href = " http : / / en . wikipedia . org / wiki / ACID " > ACID < / a > 
 - * @ see < a href = " https : / / github . com / realm / realm - java / tree / master / examples " > More Realm examples < / a > 
 + * @ see < a href = " https : / / github . com / realm / realm - java / tree / master / examples " > Examples using Realm < / a > 
 * / 
 public final class Realm implements Closeable { 
 public static final String DEFAULT _ REALM _ NAME = " default . realm " ; 
 diff - - git a / realm / src / main / java / io / realm / RealmBaseAdapter . java b / realm / src / main / java / io / realm / RealmBaseAdapter . java 
 index 6d63eab . . 4c7d794 100644 
 - - - a / realm / src / main / java / io / realm / RealmBaseAdapter . java 
 + + + b / realm / src / main / java / io / realm / RealmBaseAdapter . java 
 @ @ - 27 , 8 + 27 , 9 @ @ import android . widget . BaseAdapter ; 
 * This adapter will automatically handle any updates to its data and call 
 * { @ link # notifyDataSetChanged ( ) } as appropriate . 
 * 
 - * The RealmAdapter will no longer get any updates and will throw an error if it is accessed after 
 - * the Realm instance from where the RealmResults came is closed . 
 + * The RealmAdapter will stop receiving updates if the Realm instance providing the 
 + * { @ link io . realm . RealmResults } is closed . Trying to access read objects , will at this point also 
 + * result in a { @ link io . realm . exceptions . RealmException } . 
 * / 
 public abstract class RealmBaseAdapter < T extends RealmObject > extends BaseAdapter { 
 
 diff - - git a / realm / src / main / java / io / realm / RealmChangeListener . java b / realm / src / main / java / io / realm / RealmChangeListener . java 
 index e04fd4b . . a0183c4 100644 
 - - - a / realm / src / main / java / io / realm / RealmChangeListener . java 
 + + + b / realm / src / main / java / io / realm / RealmChangeListener . java 
 @ @ - 19 , 11 + 19 , 11 @ @ package io . realm ; 
 / * * 
 * Using RealmChangeListener , it is possible to be notified when a Realm instance has been updated . 
 * 
 - * Realm instances on a thread without a Looper ( almost all background threads ) doesn ' t get 
 - * updated automatically , but have to call { @ link Realm # refresh ( ) } manually . This will in turn trigger 
 - * the RealmChangeListener for that background thread . 
 + * Realm instances on a thread without a { @ link android . os . Looper } ( almost all background threads ) 
 + * doesn ' t get updated automatically , but have to call { @ link Realm # refresh ( ) } manually . This will 
 + * in turn trigger the RealmChangeListener for that background thread . 
 * 
 - * All { @ link io . realm . RealmObject } s and { @ link io . realm . RealmResults } will automatically contain 
 + * All { @ link io . realm . RealmObject } and { @ link io . realm . RealmResults } will automatically contain 
 * their new values when the { @ link # onChange ( ) } method is called . Normally this means that it 
 * isn ' t necessary to query again for those objects , but just invalidate any UI elements that are 
 * using them . If there is a chance that a object has been been deleted , it can be verified 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 index 912d4c2 . . 83e1455 100644 
 - - - a / realm / src / main / java / io / realm / RealmList . java 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 27 , 16 + 27 , 16 @ @ import io . realm . internal . TableQuery ; 
 / * * 
 * RealmList is used to model one - to - many relationships in a { @ link io . realm . RealmObject } . 
 * RealmList has two modes : A managed and non - managed mode . In managed mode all objects are persisted 
 - * inside a Realm , in non - managed mode it functions as an normal ArrayList . 
 + * inside a Realm , in non - managed mode it works as an normal ArrayList . 
 * 
 - * Only Realm can create managed RealmList ' s . Managed RealmList ' s will automatically update its 
 + * Only Realm can create managed RealmLists . Managed RealmLists will automatically update its 
 * content whenever the underlying Realm is updated , and can only be accessed using the getter 
 * from a { @ link io . realm . RealmObject } . 
 * 
 * Non - managed RealmLists can be created by the user and can contain both managed and non - managed 
 * RealmObjects . This is useful eg . when dealing with JSON deserializers like GSON or other 
 * frameworks that inject values into a class . Non - managed elements in this list can be added to a 
 - * Realm using { @ link Realm # copyToRealm ( Iterable ) } . 
 + * Realm using the { @ link Realm # copyToRealm ( Iterable ) } method . 
 * 
 * @ param < E > The class of objects in list . 
 * / 
 diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java 
 index 1956ad2 . . a97f049 100644 
 - - - a / realm / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / src / main / java / io / realm / RealmObject . java 
 @ @ - 42 , 7 + 42 , 7 @ @ import io . realm . internal . Row ; 
 * - Getter and setters for these fields . 
 * - Static methods . 
 * 
 - * The following field data types are supported : 
 + * The following field data types are supported ( No boxed types ) : 
 * - boolean 
 * - short 
 * - int 
 @ @ - 55 , 11 + 55 , 13 @ @ import io . realm . internal . Row ; 
 * - Any RealmObject subclass 
 * - RealmList 
 * 
 - * All fields that are not annotated with { @ link io . realm . annotations . Ignore } require both a 
 - * getter and setter . Getter and setter names must have the name { @ code getXXX } or { @ code setXXX } if 
 + * Getter and setter names must have the name { @ code getXXX } or { @ code setXXX } if 
 * the field name is { @ code XXX } . Getters for fields of type boolean can be called { @ code isXXX } as 
 * well . 
 * 
 + * Fields annotated with { @ link io . realm . annotations . Ignore } doesn ' t have these restrictions and 
 + * don ' t require either a getter or setter . 
 + * 
 * A RealmObject cannot be parsed between different threads . 
 * 
 * @ see Realm # createObject ( Class ) 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index 40369c5 . . 6959bac 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 37 , 6 + 37 , 10 @ @ import io . realm . internal . TableView ; 
 * type safe , so if a model class is refactored care has to be taken to not break any queries . 
 * This is not optimal , but it is our current best compromise between ease of use and type safety . 
 * 
 + * A { @ link io . realm . Realm } is unordered , which means that there is no guarantee that querying a 
 + * Realm will return the objects in the order they where inserted . Use 
 + * { @ link # findAllSorted ( String ) } and similar methods if a specific order is required . 
 + * 
 * A RealmQuery cannot be parsed between different threads . 
 * 
 * @ param < E > The class of the objects to be queried . 
 diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java 
 index 3e4b93f . . ca60ba4 100644 
 - - - a / realm / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / src / main / java / io / realm / RealmResults . java 
 @ @ - 33 , 10 + 33 , 10 @ @ import io . realm . internal . TableView ; 
 / * * 
 * This class holds all the matches of a { @ link io . realm . RealmQuery } for a given Realm . The objects 
 * are not copied from the Realm to the RealmResults list , but are just referenced from the 
 - * RealmResult instead . This saves memory and increase speed . 
 + * RealmResult instead . This saves memory and increases speed . 
 * 
 - * Updates to RealmObjects from a RealmResults list must be done within a transaction and the 
 - * modified objects are persisted to the backing Realm file during the commit of the transaction . 
 + * Updates to RealmObjects from a RealmResults list must be done from within a transaction and the 
 + * modified objects are persisted to the Realm file during the commit of the transaction . 
 * 
 * A RealmResults object cannot be parsed between different threads . 
 *
