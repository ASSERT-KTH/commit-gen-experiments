BLEU SCORE: 0.02383853510228548

TEST MSG: Nh / add secure token android key store files
GENERATED MSG: Cleanup examples .

TEST DIFF (one line): diff - - git a / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MainActivity . java b / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MainActivity . java <nl> new file mode 100644 <nl> index 0000000 . . c4b618b <nl> - - - / dev / null <nl> + + + b / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MainActivity . java <nl> @ @ - 0 , 0 + 1 , 137 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . examples . securetokenandroidkeystore ; <nl> + <nl> + import android . os . Bundle ; <nl> + import android . support . v4 . content . ContextCompat ; <nl> + import android . support . v7 . app . AppCompatActivity ; <nl> + import android . widget . TextView ; <nl> + <nl> + import com . example . securetokenandroidkeystore . R ; <nl> + <nl> + import org . json . JSONArray ; <nl> + import org . json . JSONException ; <nl> + import org . json . JSONObject ; <nl> + <nl> + import java . security . KeyStoreException ; <nl> + import java . util . UUID ; <nl> + <nl> + import io . realm . android . CipherClient ; <nl> + import io . realm . android . SecureUserStore ; <nl> + import io . realm . SyncUser ; <nl> + import io . realm . android . SecureUserStore ; <nl> + import io . realm . SyncManager ; <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . Realm ; <nl> + import io . realm . internal . objectserver . Token ; <nl> + import io . realm . internal . objectserver . ObjectServerUser ; <nl> + <nl> + / * * <nl> + * Activity responsible of unlocking the KeyStore <nl> + * before using the { @ link realm . io . android . SecureUserStore } to encrypt <nl> + * the Token we get from the session <nl> + * / <nl> + public class MainActivity extends AppCompatActivity { <nl> + private CipherClient cryptoClient ; <nl> + private TextView txtKeystoreState ; <nl> + @ Override <nl> + protected void onCreate ( Bundle savedInstanceState ) { <nl> + super . onCreate ( savedInstanceState ) ; <nl> + setContentView ( R . layout . activity _ main ) ; <nl> + txtKeystoreState = ( TextView ) findViewById ( R . id . txtLabelKeyStore ) ; <nl> + <nl> + try { <nl> + cryptoClient = new CipherClient ( this ) ; <nl> + if ( cryptoClient . isKeystoreUnlocked ( ) ) { <nl> + buildSyncConf ( ) ; <nl> + keystoreUnlockedMessage ( ) ; <nl> + } else { <nl> + cryptoClient . unlockKeystore ( ) ; <nl> + } <nl> + } catch ( KeyStoreException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + protected void onResume ( ) { <nl> + super . onResume ( ) ; <nl> + try { <nl> + / / We return to the app after the KeyStore is unlocked or not . <nl> + if ( cryptoClient . isKeystoreUnlocked ( ) ) { <nl> + buildSyncConf ( ) ; <nl> + keystoreUnlockedMessage ( ) ; <nl> + } else { <nl> + keystoreLockedMessage ( ) ; <nl> + } <nl> + } catch ( KeyStoreException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + <nl> + / / build SyncConfiguration with a user store to store encrypted Token . <nl> + private void buildSyncConf ( ) { <nl> + try { <nl> + SyncManager . setUserStore ( new SecureUserStore ( MainActivity . this ) ) ; <nl> + / / the rest of Sync logic . . . <nl> + SyncUser user = createTestUser ( 0 ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + SyncConfiguration secureConfig = new SyncConfiguration . Builder ( user , url ) . build ( ) ; <nl> + Realm realm = Realm . getInstance ( secureConfig ) ; <nl> + / / . . . <nl> + <nl> + } catch ( KeyStoreException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + / / Helpers <nl> + private final static String USER _ TOKEN = UUID . randomUUID ( ) . toString ( ) ; <nl> + private final static String REALM _ TOKEN = UUID . randomUUID ( ) . toString ( ) ; <nl> + <nl> + private static SyncUser createTestUser ( long expires ) { <nl> + Token userToken = new Token ( USER _ TOKEN , " JohnDoe " , null , expires , null ) ; <nl> + Token accessToken = new Token ( REALM _ TOKEN , " JohnDoe " , " / foo " , expires , new Token . Permission [ ] { Token . Permission . DOWNLOAD } ) ; <nl> + ObjectServerUser . AccessDescription desc = new ObjectServerUser . AccessDescription ( accessToken , " / data / data / myapp / files / default " , false ) ; <nl> + <nl> + JSONObject obj = new JSONObject ( ) ; <nl> + try { <nl> + JSONArray realmList = new JSONArray ( ) ; <nl> + JSONObject realmDesc = new JSONObject ( ) ; <nl> + realmDesc . put ( " uri " , " realm : / / objectserver . realm . io / default " ) ; <nl> + realmDesc . put ( " description " , desc . toJson ( ) ) ; <nl> + realmList . put ( realmDesc ) ; <nl> + <nl> + obj . put ( " authUrl " , " http : / / objectserver . realm . io / auth " ) ; <nl> + obj . put ( " userToken " , userToken . toJson ( ) ) ; <nl> + obj . put ( " realms " , realmList ) ; <nl> + return SyncUser . fromJson ( obj . toString ( ) ) ; <nl> + } catch ( JSONException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private void keystoreLockedMessage ( ) { <nl> + txtKeystoreState . setBackgroundColor ( ContextCompat . getColor ( this , R . color . colorLocked ) ) ; <nl> + txtKeystoreState . setText ( R . string . locked _ text ) ; <nl> + } <nl> + <nl> + private void keystoreUnlockedMessage ( ) { <nl> + txtKeystoreState . setBackgroundColor ( ContextCompat . getColor ( this , R . color . colorActivated ) ) ; <nl> + txtKeystoreState . setText ( R . string . unlocked _ text ) ; <nl> + } <nl> + } <nl> + <nl> diff - - git a / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MyApplication . java b / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MyApplication . java <nl> new file mode 100644 <nl> index 0000000 . . 8af6658 <nl> - - - / dev / null <nl> + + + b / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MyApplication . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . examples . securetokenandroidkeystore ; <nl> + <nl> + import android . app . Application ; <nl> + <nl> + import io . realm . Realm ; <nl> + <nl> + public class MyApplication extends Application { <nl> + <nl> + @ Override <nl> + public void onCreate ( ) { <nl> + super . onCreate ( ) ; <nl> + / / Initialize Realm . Should only be done once when the application starts . <nl> + Realm . init ( this ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / examples / concurrencyExample / src / main / AndroidManifest . xml b / examples / concurrencyExample / src / main / AndroidManifest . xml <nl> index 2a1322c . . 95caacb 100644 <nl> - - - a / examples / concurrencyExample / src / main / AndroidManifest . xml <nl> + + + b / examples / concurrencyExample / src / main / AndroidManifest . xml <nl> @ @ - 9 , 7 + 9 , 7 @ @ <nl> android : theme = " @ style / AppTheme " > <nl> <nl> < activity <nl> - android : name = " . ConcurrencyExampleaActivity " <nl> + android : name = " . ConcurrencyExampleActivity " <nl> android : configChanges = " keyboardHidden | orientation | screenSize " <nl> android : label = " @ string / app _ name " > <nl> < intent - filter > <nl> diff - - git a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleActivity . java b / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleActivity . java <nl> new file mode 100644 <nl> index 0000000 . . d5f5cf5 <nl> - - - / dev / null <nl> + + + b / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleActivity . java <nl> @ @ - 0 , 0 + 1 , 163 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . examples . concurrency ; <nl> + <nl> + import android . app . Activity ; <nl> + import android . content . Intent ; <nl> + import android . os . Bundle ; <nl> + import android . util . Log ; <nl> + import android . view . View ; <nl> + import android . widget . RadioGroup ; <nl> + import android . widget . TextView ; <nl> + <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmList ; <nl> + import io . realm . examples . concurrency . model . Cat ; <nl> + import io . realm . examples . concurrency . model . Dog ; <nl> + import io . realm . examples . concurrency . model . Person ; <nl> + import io . realm . examples . concurrency . services . SpawningService ; <nl> + import io . realm . examples . concurrency . services . TransactionService ; <nl> + <nl> + public class ConcurrencyExampleActivity extends Activity implements View . OnClickListener { <nl> + <nl> + @ SuppressWarnings ( " UnusedDeclaration " ) <nl> + public static final String TAG = ConcurrencyExampleActivity . class . getName ( ) ; <nl> + <nl> + private Realm realm ; <nl> + <nl> + @ Override <nl> + protected void onCreate ( Bundle savedInstanceState ) { <nl> + super . onCreate ( savedInstanceState ) ; <nl> + setContentView ( R . layout . activity _ realm _ example ) ; <nl> + <nl> + findViewById ( R . id . insert _ record _ button ) . setOnClickListener ( this ) ; <nl> + findViewById ( R . id . quit _ button ) . setOnClickListener ( new View . OnClickListener ( ) { <nl> + @ Override <nl> + public void onClick ( View view ) { <nl> + stopTests ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + / / Reset the realm data before starting the tests <nl> + Realm . deleteRealmFile ( this ) ; <nl> + <nl> + / / Acquire a realm object <nl> + realm = Realm . getInstance ( this ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onResume ( ) { <nl> + super . onResume ( ) ; <nl> + startTests ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onStop ( ) { <nl> + super . onStop ( ) ; <nl> + stopTests ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void onDestroy ( ) { <nl> + super . onDestroy ( ) ; <nl> + realm . close ( ) ; / / Remember to close Realm when done . <nl> + } <nl> + <nl> + private void startTests ( ) { <nl> + startSpawnTests ( ) ; <nl> + / / Alternatively can use transaction tests here . . . <nl> + / / startTransactionTests ( ) ; <nl> + } <nl> + <nl> + private void stopTests ( ) { <nl> + stopSpawnTests ( ) ; <nl> + / / Alternatively can use transaction tests here . . . <nl> + / / stopTransactionTests ( ) ; <nl> + } <nl> + <nl> + / / Using the screen form the user can inject into the Realm <nl> + / / even if other threads are creating transactions . <nl> + @ Override <nl> + public void onClick ( View v ) { <nl> + String personName = ( ( TextView ) findViewById ( R . id . name ) ) . getText ( ) . toString ( ) ; <nl> + String personAge = ( ( TextView ) findViewById ( R . id . age ) ) . getText ( ) . toString ( ) ; <nl> + String petName = ( ( TextView ) findViewById ( R . id . pets _ name ) ) . getText ( ) . toString ( ) ; <nl> + <nl> + Integer parseAge ; <nl> + try { <nl> + parseAge = Integer . parseInt ( personAge ) ; <nl> + } catch ( NumberFormatException ignored ) { <nl> + Log . d ( TAG , " Age for a person invalid " ) ; <nl> + return ; <nl> + } <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + Person person = realm . createObject ( Person . class ) ; <nl> + person . setName ( personName ) ; <nl> + person . setAge ( parseAge ) ; <nl> + <nl> + int checkedId = ( ( RadioGroup ) findViewById ( R . id . petType ) ) . getCheckedRadioButtonId ( ) ; <nl> + if ( checkedId = = R . id . hasCat ) { <nl> + Cat cat = realm . createObject ( Cat . class ) ; <nl> + cat . setName ( petName ) ; <nl> + RealmList < Cat > cats = person . getCats ( ) ; <nl> + cats . add ( cat ) ; <nl> + } else if ( checkedId = = R . id . hasDog ) { <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setName ( petName ) ; <nl> + person . setDog ( dog ) ; <nl> + } <nl> + <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + } <nl> + <nl> + / / The transaction tests are one IntentService running multiple Writes <nl> + / / to a Realm in either a multiple transaction or single transaction loop <nl> + private void startTransactionTests ( ) { <nl> + Intent serviceIntent = new Intent ( this , TransactionService . class ) ; <nl> + serviceIntent . putExtra ( TransactionService . REALM _ TESTTYPE _ EXTRA , <nl> + TransactionService . TestType . MANY _ TRANSACTIONS ) ; <nl> + serviceIntent . putExtra ( TransactionService . ITERATION _ COUNT , 10000000 ) ; <nl> + this . startService ( serviceIntent ) ; <nl> + } <nl> + <nl> + private void stopTransactionTests ( ) { <nl> + Intent serviceIntent = new Intent ( this , TransactionService . class ) ; <nl> + this . stopService ( serviceIntent ) ; <nl> + } <nl> + <nl> + / / The Spawned tests create multiple threads of type Reader or Writer <nl> + / / which loop for a specified count <nl> + private void startSpawnTests ( ) { <nl> + Intent serviceIntent = new Intent ( this , SpawningService . class ) ; <nl> + serviceIntent . putExtra ( SpawningService . REALM _ INSERT _ COUNT _ EXTRA , 10000000 ) ; <nl> + serviceIntent . putExtra ( SpawningService . REALM _ READ _ COUNT _ EXTRA , 10000000 ) ; <nl> + this . startService ( serviceIntent ) ; <nl> + } <nl> + <nl> + private void stopSpawnTests ( ) { <nl> + Intent serviceIntent = new Intent ( this , SpawningService . class ) ; <nl> + this . stopService ( serviceIntent ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " UnusedDeclaration " ) <nl> + private void restartTests ( ) { <nl> + stopTransactionTests ( ) ; <nl> + startTransactionTests ( ) ; <nl> + } <nl> + } <nl> diff - - git a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleaActivity . java b / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleaActivity . java <nl> deleted file mode 100644 <nl> index 2fdb867 . . 0000000 <nl> - - - a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleaActivity . java <nl> + + + / dev / null <nl> @ @ - 1 , 163 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . examples . concurrency ; <nl> - <nl> - import android . app . Activity ; <nl> - import android . content . Intent ; <nl> - import android . os . Bundle ; <nl> - import android . util . Log ; <nl> - import android . view . View ; <nl> - import android . widget . RadioGroup ; <nl> - import android . widget . TextView ; <nl> - <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmList ; <nl> - import io . realm . examples . concurrency . model . Cat ; <nl> - import io . realm . examples . concurrency . model . Dog ; <nl> - import io . realm . examples . concurrency . model . Person ; <nl> - import io . realm . examples . concurrency . services . SpawningService ; <nl> - import io . realm . examples . concurrency . services . TransactionService ; <nl> - <nl> - public class ConcurrencyExampleaActivity extends Activity implements View . OnClickListener { <nl> - <nl> - @ SuppressWarnings ( " UnusedDeclaration " ) <nl> - public static final String TAG = ConcurrencyExampleaActivity . class . getName ( ) ; <nl> - <nl> - private Realm realm ; <nl> - <nl> - @ Override <nl> - protected void onCreate ( Bundle savedInstanceState ) { <nl> - super . onCreate ( savedInstanceState ) ; <nl> - setContentView ( R . layout . activity _ realm _ example ) ; <nl> - <nl> - findViewById ( R . id . insert _ record _ button ) . setOnClickListener ( this ) ; <nl> - findViewById ( R . id . quit _ button ) . setOnClickListener ( new View . OnClickListener ( ) { <nl> - @ Override <nl> - public void onClick ( View view ) { <nl> - stopTests ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - / / Reset the realm data before starting the tests <nl> - Realm . deleteRealmFile ( this ) ; <nl> - <nl> - / / Acquire a realm object <nl> - realm = Realm . getInstance ( this ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void onResume ( ) { <nl> - super . onResume ( ) ; <nl> - startTests ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void onStop ( ) { <nl> - super . onStop ( ) ; <nl> - stopTests ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void onDestroy ( ) { <nl> - super . onDestroy ( ) ; <nl> - realm . close ( ) ; / / Remember to close Realm when done . <nl> - } <nl> - <nl> - private void startTests ( ) { <nl> - startSpawnTests ( ) ; <nl> - / / Alternatively can use transaction tests here . . . <nl> - / / startTransactionTests ( ) ; <nl> - } <nl> - <nl> - private void stopTests ( ) { <nl> - stopSpawnTests ( ) ; <nl> - / / Alternatively can use transaction tests here . . . <nl> - / / stopTransactionTests ( ) ; <nl> - } <nl> - <nl> - / / Using the screen form the user can inject into the Realm <nl> - / / even if other threads are creating transactions . <nl> - @ Override <nl> - public void onClick ( View v ) { <nl> - String personName = ( ( TextView ) findViewById ( R . id . name ) ) . getText ( ) . toString ( ) ; <nl> - String personAge = ( ( TextView ) findViewById ( R . id . age ) ) . getText ( ) . toString ( ) ; <nl> - String petName = ( ( TextView ) findViewById ( R . id . pets _ name ) ) . getText ( ) . toString ( ) ; <nl> - <nl> - Integer parseAge ; <nl> - try { <nl> - parseAge = Integer . parseInt ( personAge ) ; <nl> - } catch ( NumberFormatException ignored ) { <nl> - Log . d ( TAG , " Age for a person invalid " ) ; <nl> - return ; <nl> - } <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - Person person = realm . createObject ( Person . class ) ; <nl> - person . setName ( personName ) ; <nl> - person . setAge ( parseAge ) ; <nl> - <nl> - int checkedId = ( ( RadioGroup ) findViewById ( R . id . petType ) ) . getCheckedRadioButtonId ( ) ; <nl> - if ( checkedId = = R . id . hasCat ) { <nl> - Cat cat = realm . createObject ( Cat . class ) ; <nl> - cat . setName ( petName ) ; <nl> - RealmList < Cat > cats = person . getCats ( ) ; <nl> - cats . add ( cat ) ; <nl> - } else if ( checkedId = = R . id . hasDog ) { <nl> - Dog dog = realm . createObject ( Dog . class ) ; <nl> - dog . setName ( petName ) ; <nl> - person . setDog ( dog ) ; <nl> - } <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } <nl> - <nl> - / / The transaction tests are one IntentService running multiple Writes <nl> - / / to a Realm in either a multiple transaction or single transaction loop <nl> - private void startTransactionTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; <nl> - serviceIntent . putExtra ( TransactionService . REALM _ TESTTYPE _ EXTRA , <nl> - TransactionService . TestType . MANY _ TRANSACTIONS ) ; <nl> - serviceIntent . putExtra ( TransactionService . ITERATION _ COUNT , 10000000 ) ; <nl> - this . startService ( serviceIntent ) ; <nl> - } <nl> - <nl> - private void stopTransactionTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; <nl> - this . stopService ( serviceIntent ) ; <nl> - } <nl> - <nl> - / / The Spawned tests create multiple threads of type Reader or Writer <nl> - / / which loop for a specified count <nl> - private void startSpawnTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; <nl> - serviceIntent . putExtra ( SpawningService . REALM _ INSERT _ COUNT _ EXTRA , 10000000 ) ; <nl> - serviceIntent . putExtra ( SpawningService . REALM _ READ _ COUNT _ EXTRA , 10000000 ) ; <nl> - this . startService ( serviceIntent ) ; <nl> - } <nl> - <nl> - private void stopSpawnTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; <nl> - this . stopService ( serviceIntent ) ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( " UnusedDeclaration " ) <nl> - private void restartTests ( ) { <nl> - stopTransactionTests ( ) ; <nl> - startTransactionTests ( ) ; <nl> - } <nl> - } <nl> diff - - git a / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java b / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java <nl> index 2d9ba42 . . cea77fb 100644 <nl> - - - a / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java <nl> + + + b / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java <nl> @ @ - 31 , 7 + 31 , 6 @ @ import javax . crypto . spec . SecretKeySpec ; <nl> import javax . security . auth . x500 . X500Principal ; <nl> <nl> import io . realm . Realm ; <nl> - import io . realm . internal . IOException ; <nl> <nl> public class EncryptionExampleActivity extends Activity { <nl> <nl> @ @ - 47 , 15 + 46 , 10 @ @ public class EncryptionExampleActivity extends Activity { <nl> / / Throws UnsupportedOperator if not using a copy of Realm with encryption enabled <nl> try { <nl> realm = Realm . getInstance ( this , getKey ( ) ) ; <nl> - } catch ( io . realm . internal . IOException e ) { <nl> - e . printStackTrace ( ) ; <nl> - return ; <nl> - } catch ( java . io . IOException ie ) { <nl> - ie . printStackTrace ( ) ; <nl> - return ; <nl> } catch ( GeneralSecurityException e ) { <nl> e . printStackTrace ( ) ; <nl> - return ; <nl> + } catch ( IOException e ) { <nl> + e . printStackTrace ( ) ; <nl> } <nl> <nl> / / Everything continues to work as normal except for that the file is encrypted on disk <nl> diff - - git a / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java b / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java <nl> index 1550b7b . . 02c4947 100644 <nl> - - - a / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java <nl> + + + b / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class GridViewExampleActivity extends Activity implements AdapterView . OnI <nl> / / Clear the realm from last time <nl> Realm . deleteRealmFile ( this ) ; <nl> <nl> - / / Create a new instance empty instance of Realm <nl> + / / Create a new empty instance of Realm <nl> realm = Realm . getInstance ( this ) ; <nl> } <nl> <nl> diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> index d8166f3 . . e772d42 100644 <nl> - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> @ @ - 63 , 23 + 63 , 25 @ @ public class MigrationExampleActivity extends Activity { <nl> Log . i ( TAG , " Excellent ! This is expected . " ) ; <nl> } <nl> <nl> + Realm realm ; <nl> + <nl> / / So you migrate your data <nl> Realm . migrateRealmAtPath ( path1 , new Migration ( ) ) ; <nl> - Realm realm1 = Realm . getInstance ( this , " default1 " ) ; <nl> - showStatus ( realm1 ) ; <nl> - realm1 . close ( ) ; <nl> + realm = Realm . getInstance ( this , " default1 " ) ; <nl> + showStatus ( realm ) ; <nl> + realm . close ( ) ; <nl> <nl> / / Another migration test <nl> Realm . migrateRealmAtPath ( path2 , new Migration ( ) ) ; <nl> - Realm realm2 = Realm . getInstance ( this , " default2 " ) ; <nl> - showStatus ( realm2 ) ; <nl> - realm2 . close ( ) ; <nl> + realm = Realm . getInstance ( this , " default2 " ) ; <nl> + showStatus ( realm ) ; <nl> + realm . close ( ) ; <nl> <nl> / / and a third : <nl> Realm . migrateRealmAtPath ( path3 , new Migration ( ) ) ; <nl> - Realm realm3 = Realm . getInstance ( this , " default0 " ) ; <nl> - showStatus ( realm3 ) ; <nl> - realm3 . close ( ) ; <nl> + realm = Realm . getInstance ( this , " default3 " ) ; <nl> + showStatus ( realm ) ; <nl> + realm . close ( ) ; <nl> } <nl> <nl> private String copyBundledRealmFile ( InputStream inputStream , String outFileName ) {

TEST DIFF:
diff - - git a / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MainActivity . java b / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MainActivity . java 
 new file mode 100644 
 index 0000000 . . c4b618b 
 - - - / dev / null 
 + + + b / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MainActivity . java 
 @ @ - 0 , 0 + 1 , 137 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . examples . securetokenandroidkeystore ; 
 + 
 + import android . os . Bundle ; 
 + import android . support . v4 . content . ContextCompat ; 
 + import android . support . v7 . app . AppCompatActivity ; 
 + import android . widget . TextView ; 
 + 
 + import com . example . securetokenandroidkeystore . R ; 
 + 
 + import org . json . JSONArray ; 
 + import org . json . JSONException ; 
 + import org . json . JSONObject ; 
 + 
 + import java . security . KeyStoreException ; 
 + import java . util . UUID ; 
 + 
 + import io . realm . android . CipherClient ; 
 + import io . realm . android . SecureUserStore ; 
 + import io . realm . SyncUser ; 
 + import io . realm . android . SecureUserStore ; 
 + import io . realm . SyncManager ; 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . Realm ; 
 + import io . realm . internal . objectserver . Token ; 
 + import io . realm . internal . objectserver . ObjectServerUser ; 
 + 
 + / * * 
 + * Activity responsible of unlocking the KeyStore 
 + * before using the { @ link realm . io . android . SecureUserStore } to encrypt 
 + * the Token we get from the session 
 + * / 
 + public class MainActivity extends AppCompatActivity { 
 + private CipherClient cryptoClient ; 
 + private TextView txtKeystoreState ; 
 + @ Override 
 + protected void onCreate ( Bundle savedInstanceState ) { 
 + super . onCreate ( savedInstanceState ) ; 
 + setContentView ( R . layout . activity _ main ) ; 
 + txtKeystoreState = ( TextView ) findViewById ( R . id . txtLabelKeyStore ) ; 
 + 
 + try { 
 + cryptoClient = new CipherClient ( this ) ; 
 + if ( cryptoClient . isKeystoreUnlocked ( ) ) { 
 + buildSyncConf ( ) ; 
 + keystoreUnlockedMessage ( ) ; 
 + } else { 
 + cryptoClient . unlockKeystore ( ) ; 
 + } 
 + } catch ( KeyStoreException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + protected void onResume ( ) { 
 + super . onResume ( ) ; 
 + try { 
 + / / We return to the app after the KeyStore is unlocked or not . 
 + if ( cryptoClient . isKeystoreUnlocked ( ) ) { 
 + buildSyncConf ( ) ; 
 + keystoreUnlockedMessage ( ) ; 
 + } else { 
 + keystoreLockedMessage ( ) ; 
 + } 
 + } catch ( KeyStoreException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + / / build SyncConfiguration with a user store to store encrypted Token . 
 + private void buildSyncConf ( ) { 
 + try { 
 + SyncManager . setUserStore ( new SecureUserStore ( MainActivity . this ) ) ; 
 + / / the rest of Sync logic . . . 
 + SyncUser user = createTestUser ( 0 ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + SyncConfiguration secureConfig = new SyncConfiguration . Builder ( user , url ) . build ( ) ; 
 + Realm realm = Realm . getInstance ( secureConfig ) ; 
 + / / . . . 
 + 
 + } catch ( KeyStoreException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + / / Helpers 
 + private final static String USER _ TOKEN = UUID . randomUUID ( ) . toString ( ) ; 
 + private final static String REALM _ TOKEN = UUID . randomUUID ( ) . toString ( ) ; 
 + 
 + private static SyncUser createTestUser ( long expires ) { 
 + Token userToken = new Token ( USER _ TOKEN , " JohnDoe " , null , expires , null ) ; 
 + Token accessToken = new Token ( REALM _ TOKEN , " JohnDoe " , " / foo " , expires , new Token . Permission [ ] { Token . Permission . DOWNLOAD } ) ; 
 + ObjectServerUser . AccessDescription desc = new ObjectServerUser . AccessDescription ( accessToken , " / data / data / myapp / files / default " , false ) ; 
 + 
 + JSONObject obj = new JSONObject ( ) ; 
 + try { 
 + JSONArray realmList = new JSONArray ( ) ; 
 + JSONObject realmDesc = new JSONObject ( ) ; 
 + realmDesc . put ( " uri " , " realm : / / objectserver . realm . io / default " ) ; 
 + realmDesc . put ( " description " , desc . toJson ( ) ) ; 
 + realmList . put ( realmDesc ) ; 
 + 
 + obj . put ( " authUrl " , " http : / / objectserver . realm . io / auth " ) ; 
 + obj . put ( " userToken " , userToken . toJson ( ) ) ; 
 + obj . put ( " realms " , realmList ) ; 
 + return SyncUser . fromJson ( obj . toString ( ) ) ; 
 + } catch ( JSONException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private void keystoreLockedMessage ( ) { 
 + txtKeystoreState . setBackgroundColor ( ContextCompat . getColor ( this , R . color . colorLocked ) ) ; 
 + txtKeystoreState . setText ( R . string . locked _ text ) ; 
 + } 
 + 
 + private void keystoreUnlockedMessage ( ) { 
 + txtKeystoreState . setBackgroundColor ( ContextCompat . getColor ( this , R . color . colorActivated ) ) ; 
 + txtKeystoreState . setText ( R . string . unlocked _ text ) ; 
 + } 
 + } 
 + 
 diff - - git a / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MyApplication . java b / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MyApplication . java 
 new file mode 100644 
 index 0000000 . . 8af6658 
 - - - / dev / null 
 + + + b / examples / secureTokenAndroidKeyStore / src / main / java / io / realm / examples / securetokenandroidkeystore / MyApplication . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . examples . securetokenandroidkeystore ; 
 + 
 + import android . app . Application ; 
 + 
 + import io . realm . Realm ; 
 + 
 + public class MyApplication extends Application { 
 + 
 + @ Override 
 + public void onCreate ( ) { 
 + super . onCreate ( ) ; 
 + / / Initialize Realm . Should only be done once when the application starts . 
 + Realm . init ( this ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / examples / concurrencyExample / src / main / AndroidManifest . xml b / examples / concurrencyExample / src / main / AndroidManifest . xml 
 index 2a1322c . . 95caacb 100644 
 - - - a / examples / concurrencyExample / src / main / AndroidManifest . xml 
 + + + b / examples / concurrencyExample / src / main / AndroidManifest . xml 
 @ @ - 9 , 7 + 9 , 7 @ @ 
 android : theme = " @ style / AppTheme " > 
 
 < activity 
 - android : name = " . ConcurrencyExampleaActivity " 
 + android : name = " . ConcurrencyExampleActivity " 
 android : configChanges = " keyboardHidden | orientation | screenSize " 
 android : label = " @ string / app _ name " > 
 < intent - filter > 
 diff - - git a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleActivity . java b / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleActivity . java 
 new file mode 100644 
 index 0000000 . . d5f5cf5 
 - - - / dev / null 
 + + + b / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleActivity . java 
 @ @ - 0 , 0 + 1 , 163 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . examples . concurrency ; 
 + 
 + import android . app . Activity ; 
 + import android . content . Intent ; 
 + import android . os . Bundle ; 
 + import android . util . Log ; 
 + import android . view . View ; 
 + import android . widget . RadioGroup ; 
 + import android . widget . TextView ; 
 + 
 + import io . realm . Realm ; 
 + import io . realm . RealmList ; 
 + import io . realm . examples . concurrency . model . Cat ; 
 + import io . realm . examples . concurrency . model . Dog ; 
 + import io . realm . examples . concurrency . model . Person ; 
 + import io . realm . examples . concurrency . services . SpawningService ; 
 + import io . realm . examples . concurrency . services . TransactionService ; 
 + 
 + public class ConcurrencyExampleActivity extends Activity implements View . OnClickListener { 
 + 
 + @ SuppressWarnings ( " UnusedDeclaration " ) 
 + public static final String TAG = ConcurrencyExampleActivity . class . getName ( ) ; 
 + 
 + private Realm realm ; 
 + 
 + @ Override 
 + protected void onCreate ( Bundle savedInstanceState ) { 
 + super . onCreate ( savedInstanceState ) ; 
 + setContentView ( R . layout . activity _ realm _ example ) ; 
 + 
 + findViewById ( R . id . insert _ record _ button ) . setOnClickListener ( this ) ; 
 + findViewById ( R . id . quit _ button ) . setOnClickListener ( new View . OnClickListener ( ) { 
 + @ Override 
 + public void onClick ( View view ) { 
 + stopTests ( ) ; 
 + } 
 + } ) ; 
 + 
 + / / Reset the realm data before starting the tests 
 + Realm . deleteRealmFile ( this ) ; 
 + 
 + / / Acquire a realm object 
 + realm = Realm . getInstance ( this ) ; 
 + } 
 + 
 + @ Override 
 + public void onResume ( ) { 
 + super . onResume ( ) ; 
 + startTests ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onStop ( ) { 
 + super . onStop ( ) ; 
 + stopTests ( ) ; 
 + } 
 + 
 + @ Override 
 + protected void onDestroy ( ) { 
 + super . onDestroy ( ) ; 
 + realm . close ( ) ; / / Remember to close Realm when done . 
 + } 
 + 
 + private void startTests ( ) { 
 + startSpawnTests ( ) ; 
 + / / Alternatively can use transaction tests here . . . 
 + / / startTransactionTests ( ) ; 
 + } 
 + 
 + private void stopTests ( ) { 
 + stopSpawnTests ( ) ; 
 + / / Alternatively can use transaction tests here . . . 
 + / / stopTransactionTests ( ) ; 
 + } 
 + 
 + / / Using the screen form the user can inject into the Realm 
 + / / even if other threads are creating transactions . 
 + @ Override 
 + public void onClick ( View v ) { 
 + String personName = ( ( TextView ) findViewById ( R . id . name ) ) . getText ( ) . toString ( ) ; 
 + String personAge = ( ( TextView ) findViewById ( R . id . age ) ) . getText ( ) . toString ( ) ; 
 + String petName = ( ( TextView ) findViewById ( R . id . pets _ name ) ) . getText ( ) . toString ( ) ; 
 + 
 + Integer parseAge ; 
 + try { 
 + parseAge = Integer . parseInt ( personAge ) ; 
 + } catch ( NumberFormatException ignored ) { 
 + Log . d ( TAG , " Age for a person invalid " ) ; 
 + return ; 
 + } 
 + 
 + realm . beginTransaction ( ) ; 
 + Person person = realm . createObject ( Person . class ) ; 
 + person . setName ( personName ) ; 
 + person . setAge ( parseAge ) ; 
 + 
 + int checkedId = ( ( RadioGroup ) findViewById ( R . id . petType ) ) . getCheckedRadioButtonId ( ) ; 
 + if ( checkedId = = R . id . hasCat ) { 
 + Cat cat = realm . createObject ( Cat . class ) ; 
 + cat . setName ( petName ) ; 
 + RealmList < Cat > cats = person . getCats ( ) ; 
 + cats . add ( cat ) ; 
 + } else if ( checkedId = = R . id . hasDog ) { 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setName ( petName ) ; 
 + person . setDog ( dog ) ; 
 + } 
 + 
 + realm . commitTransaction ( ) ; 
 + 
 + } 
 + 
 + / / The transaction tests are one IntentService running multiple Writes 
 + / / to a Realm in either a multiple transaction or single transaction loop 
 + private void startTransactionTests ( ) { 
 + Intent serviceIntent = new Intent ( this , TransactionService . class ) ; 
 + serviceIntent . putExtra ( TransactionService . REALM _ TESTTYPE _ EXTRA , 
 + TransactionService . TestType . MANY _ TRANSACTIONS ) ; 
 + serviceIntent . putExtra ( TransactionService . ITERATION _ COUNT , 10000000 ) ; 
 + this . startService ( serviceIntent ) ; 
 + } 
 + 
 + private void stopTransactionTests ( ) { 
 + Intent serviceIntent = new Intent ( this , TransactionService . class ) ; 
 + this . stopService ( serviceIntent ) ; 
 + } 
 + 
 + / / The Spawned tests create multiple threads of type Reader or Writer 
 + / / which loop for a specified count 
 + private void startSpawnTests ( ) { 
 + Intent serviceIntent = new Intent ( this , SpawningService . class ) ; 
 + serviceIntent . putExtra ( SpawningService . REALM _ INSERT _ COUNT _ EXTRA , 10000000 ) ; 
 + serviceIntent . putExtra ( SpawningService . REALM _ READ _ COUNT _ EXTRA , 10000000 ) ; 
 + this . startService ( serviceIntent ) ; 
 + } 
 + 
 + private void stopSpawnTests ( ) { 
 + Intent serviceIntent = new Intent ( this , SpawningService . class ) ; 
 + this . stopService ( serviceIntent ) ; 
 + } 
 + 
 + @ SuppressWarnings ( " UnusedDeclaration " ) 
 + private void restartTests ( ) { 
 + stopTransactionTests ( ) ; 
 + startTransactionTests ( ) ; 
 + } 
 + } 
 diff - - git a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleaActivity . java b / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleaActivity . java 
 deleted file mode 100644 
 index 2fdb867 . . 0000000 
 - - - a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / ConcurrencyExampleaActivity . java 
 + + + / dev / null 
 @ @ - 1 , 163 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . examples . concurrency ; 
 - 
 - import android . app . Activity ; 
 - import android . content . Intent ; 
 - import android . os . Bundle ; 
 - import android . util . Log ; 
 - import android . view . View ; 
 - import android . widget . RadioGroup ; 
 - import android . widget . TextView ; 
 - 
 - import io . realm . Realm ; 
 - import io . realm . RealmList ; 
 - import io . realm . examples . concurrency . model . Cat ; 
 - import io . realm . examples . concurrency . model . Dog ; 
 - import io . realm . examples . concurrency . model . Person ; 
 - import io . realm . examples . concurrency . services . SpawningService ; 
 - import io . realm . examples . concurrency . services . TransactionService ; 
 - 
 - public class ConcurrencyExampleaActivity extends Activity implements View . OnClickListener { 
 - 
 - @ SuppressWarnings ( " UnusedDeclaration " ) 
 - public static final String TAG = ConcurrencyExampleaActivity . class . getName ( ) ; 
 - 
 - private Realm realm ; 
 - 
 - @ Override 
 - protected void onCreate ( Bundle savedInstanceState ) { 
 - super . onCreate ( savedInstanceState ) ; 
 - setContentView ( R . layout . activity _ realm _ example ) ; 
 - 
 - findViewById ( R . id . insert _ record _ button ) . setOnClickListener ( this ) ; 
 - findViewById ( R . id . quit _ button ) . setOnClickListener ( new View . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( View view ) { 
 - stopTests ( ) ; 
 - } 
 - } ) ; 
 - 
 - / / Reset the realm data before starting the tests 
 - Realm . deleteRealmFile ( this ) ; 
 - 
 - / / Acquire a realm object 
 - realm = Realm . getInstance ( this ) ; 
 - } 
 - 
 - @ Override 
 - public void onResume ( ) { 
 - super . onResume ( ) ; 
 - startTests ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onStop ( ) { 
 - super . onStop ( ) ; 
 - stopTests ( ) ; 
 - } 
 - 
 - @ Override 
 - protected void onDestroy ( ) { 
 - super . onDestroy ( ) ; 
 - realm . close ( ) ; / / Remember to close Realm when done . 
 - } 
 - 
 - private void startTests ( ) { 
 - startSpawnTests ( ) ; 
 - / / Alternatively can use transaction tests here . . . 
 - / / startTransactionTests ( ) ; 
 - } 
 - 
 - private void stopTests ( ) { 
 - stopSpawnTests ( ) ; 
 - / / Alternatively can use transaction tests here . . . 
 - / / stopTransactionTests ( ) ; 
 - } 
 - 
 - / / Using the screen form the user can inject into the Realm 
 - / / even if other threads are creating transactions . 
 - @ Override 
 - public void onClick ( View v ) { 
 - String personName = ( ( TextView ) findViewById ( R . id . name ) ) . getText ( ) . toString ( ) ; 
 - String personAge = ( ( TextView ) findViewById ( R . id . age ) ) . getText ( ) . toString ( ) ; 
 - String petName = ( ( TextView ) findViewById ( R . id . pets _ name ) ) . getText ( ) . toString ( ) ; 
 - 
 - Integer parseAge ; 
 - try { 
 - parseAge = Integer . parseInt ( personAge ) ; 
 - } catch ( NumberFormatException ignored ) { 
 - Log . d ( TAG , " Age for a person invalid " ) ; 
 - return ; 
 - } 
 - 
 - realm . beginTransaction ( ) ; 
 - Person person = realm . createObject ( Person . class ) ; 
 - person . setName ( personName ) ; 
 - person . setAge ( parseAge ) ; 
 - 
 - int checkedId = ( ( RadioGroup ) findViewById ( R . id . petType ) ) . getCheckedRadioButtonId ( ) ; 
 - if ( checkedId = = R . id . hasCat ) { 
 - Cat cat = realm . createObject ( Cat . class ) ; 
 - cat . setName ( petName ) ; 
 - RealmList < Cat > cats = person . getCats ( ) ; 
 - cats . add ( cat ) ; 
 - } else if ( checkedId = = R . id . hasDog ) { 
 - Dog dog = realm . createObject ( Dog . class ) ; 
 - dog . setName ( petName ) ; 
 - person . setDog ( dog ) ; 
 - } 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - } 
 - 
 - / / The transaction tests are one IntentService running multiple Writes 
 - / / to a Realm in either a multiple transaction or single transaction loop 
 - private void startTransactionTests ( ) { 
 - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; 
 - serviceIntent . putExtra ( TransactionService . REALM _ TESTTYPE _ EXTRA , 
 - TransactionService . TestType . MANY _ TRANSACTIONS ) ; 
 - serviceIntent . putExtra ( TransactionService . ITERATION _ COUNT , 10000000 ) ; 
 - this . startService ( serviceIntent ) ; 
 - } 
 - 
 - private void stopTransactionTests ( ) { 
 - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; 
 - this . stopService ( serviceIntent ) ; 
 - } 
 - 
 - / / The Spawned tests create multiple threads of type Reader or Writer 
 - / / which loop for a specified count 
 - private void startSpawnTests ( ) { 
 - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; 
 - serviceIntent . putExtra ( SpawningService . REALM _ INSERT _ COUNT _ EXTRA , 10000000 ) ; 
 - serviceIntent . putExtra ( SpawningService . REALM _ READ _ COUNT _ EXTRA , 10000000 ) ; 
 - this . startService ( serviceIntent ) ; 
 - } 
 - 
 - private void stopSpawnTests ( ) { 
 - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; 
 - this . stopService ( serviceIntent ) ; 
 - } 
 - 
 - @ SuppressWarnings ( " UnusedDeclaration " ) 
 - private void restartTests ( ) { 
 - stopTransactionTests ( ) ; 
 - startTransactionTests ( ) ; 
 - } 
 - } 
 diff - - git a / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java b / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java 
 index 2d9ba42 . . cea77fb 100644 
 - - - a / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java 
 + + + b / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java 
 @ @ - 31 , 7 + 31 , 6 @ @ import javax . crypto . spec . SecretKeySpec ; 
 import javax . security . auth . x500 . X500Principal ; 
 
 import io . realm . Realm ; 
 - import io . realm . internal . IOException ; 
 
 public class EncryptionExampleActivity extends Activity { 
 
 @ @ - 47 , 15 + 46 , 10 @ @ public class EncryptionExampleActivity extends Activity { 
 / / Throws UnsupportedOperator if not using a copy of Realm with encryption enabled 
 try { 
 realm = Realm . getInstance ( this , getKey ( ) ) ; 
 - } catch ( io . realm . internal . IOException e ) { 
 - e . printStackTrace ( ) ; 
 - return ; 
 - } catch ( java . io . IOException ie ) { 
 - ie . printStackTrace ( ) ; 
 - return ; 
 } catch ( GeneralSecurityException e ) { 
 e . printStackTrace ( ) ; 
 - return ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 } 
 
 / / Everything continues to work as normal except for that the file is encrypted on disk 
 diff - - git a / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java b / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java 
 index 1550b7b . . 02c4947 100644 
 - - - a / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java 
 + + + b / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java 
 @ @ - 52 , 7 + 52 , 7 @ @ public class GridViewExampleActivity extends Activity implements AdapterView . OnI 
 / / Clear the realm from last time 
 Realm . deleteRealmFile ( this ) ; 
 
 - / / Create a new instance empty instance of Realm 
 + / / Create a new empty instance of Realm 
 realm = Realm . getInstance ( this ) ; 
 } 
 
 diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 index d8166f3 . . e772d42 100644 
 - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 @ @ - 63 , 23 + 63 , 25 @ @ public class MigrationExampleActivity extends Activity { 
 Log . i ( TAG , " Excellent ! This is expected . " ) ; 
 } 
 
 + Realm realm ; 
 + 
 / / So you migrate your data 
 Realm . migrateRealmAtPath ( path1 , new Migration ( ) ) ; 
 - Realm realm1 = Realm . getInstance ( this , " default1 " ) ; 
 - showStatus ( realm1 ) ; 
 - realm1 . close ( ) ; 
 + realm = Realm . getInstance ( this , " default1 " ) ; 
 + showStatus ( realm ) ; 
 + realm . close ( ) ; 
 
 / / Another migration test 
 Realm . migrateRealmAtPath ( path2 , new Migration ( ) ) ; 
 - Realm realm2 = Realm . getInstance ( this , " default2 " ) ; 
 - showStatus ( realm2 ) ; 
 - realm2 . close ( ) ; 
 + realm = Realm . getInstance ( this , " default2 " ) ; 
 + showStatus ( realm ) ; 
 + realm . close ( ) ; 
 
 / / and a third : 
 Realm . migrateRealmAtPath ( path3 , new Migration ( ) ) ; 
 - Realm realm3 = Realm . getInstance ( this , " default0 " ) ; 
 - showStatus ( realm3 ) ; 
 - realm3 . close ( ) ; 
 + realm = Realm . getInstance ( this , " default3 " ) ; 
 + showStatus ( realm ) ; 
 + realm . close ( ) ; 
 } 
 
 private String copyBundledRealmFile ( InputStream inputStream , String outFileName ) {
