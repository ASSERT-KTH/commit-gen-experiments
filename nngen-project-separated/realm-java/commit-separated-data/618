BLEU SCORE: 0.008418013465838444

TEST MSG: Build with sync core
GENERATED MSG: Updating version number now always require a migration block . Updated MigrationExample .

TEST DIFF (one line): diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index 78f3dc3 . . eb3d8a7 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 12 , 9 + 12 , 9 @ @ apply plugin : ' checkstyle ' <nl> apply plugin : ' com . github . kt3k . coveralls ' <nl> apply plugin : ' de . undercouch . download ' <nl> <nl> - ext . coreVersion = ' 1 . 5 . 1 ' <nl> + ext . coreVersion = ' 0 . 28 . 0 ' <nl> / / empty or comment out this to disable hash checking <nl> - ext . coreSha256Hash = ' a034d3250c820a15126721142d168a2ac4a12223b75bb324958ca2a70442720d ' <nl> + ext . coreSha256Hash = ' e4d8ed7342824a1574449700b16cd36f663f4d6768fc09c1aca986f19e27162b ' <nl> ext . forceDownloadCore = <nl> project . hasProperty ( ' forceDownloadCore ' ) ? project . getProperty ( ' forceDownloadCore ' ) . toBoolean ( ) : false <nl> / / Set the core source code path . By setting this , the core will be built from source . And coreVersion will be read from <nl> @ @ - 326 , 13 + 326 , 15 @ @ artifacts { <nl> <nl> def coreDownloaded = false <nl> <nl> - task downloadCore ( group : ' build setup ' , description : ' Download the latest version of Realm Core ' ) { <nl> + task downloadCore ( ) { <nl> + group = ' build setup ' <nl> + description = ' Download the latest version of Realm Core ' <nl> def isHashCheckingEnabled = { <nl> return project . hasProperty ( ' coreSha256Hash ' ) & & ! project . coreSha256Hash . empty <nl> } <nl> <nl> def calcSha256Hash = { File targetFile - > <nl> - MessageDigest sha = MessageDigest . getInstance ( " SHA - 256 " ) ; <nl> + MessageDigest sha = MessageDigest . getInstance ( " SHA - 256 " ) <nl> Formatter hexHash = new Formatter ( ) <nl> sha . digest ( targetFile . bytes ) . each { b - > hexHash . format ( ' % 02x ' , b ) } <nl> return hexHash . toString ( ) <nl> @ @ - 362 , 10 + 364 , 12 @ @ task downloadCore ( group : ' build setup ' , description : ' Download the latest versio <nl> <nl> doLast { <nl> if ( shouldDownloadCore ( ) ) { <nl> - download { <nl> - src " http : / / static . realm . io / downloads / core / realm - core - android - $ { project . coreVersion } . tar . gz " <nl> - dest project . coreArchiveFile <nl> - onlyIfNewer false <nl> + / / CI artifacts are only available if on the internal network or VPN <nl> + def downloadUrl = " s3 : / / realm - ci - artifacts / sync / $ { project . coreVersion } / android / sync - core - $ { project . coreVersion } . tar . gz " <nl> + <nl> + println " Downloading $ { downloadUrl } " <nl> + exec { <nl> + commandLine ' s3cmd ' , ' - c ' , project . s3cfg , ' - f ' , ' get ' , " $ { downloadUrl } " , " $ { project . coreArchiveFile } " <nl> } <nl> coreDownloaded = true <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> index b4f9210 . . f6be360 100644 <nl> - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> @ @ - 27 , 6 + 27 , 7 @ @ create _ javah ( TARGET jni _ headers <nl> CLASSES io . realm . internal . Table io . realm . internal . TableView io . realm . internal . CheckedRow <nl> io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow <nl> io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil <nl> + io . realm . sync . SyncManager <nl> <nl> CLASSPATH $ { classes _ PATH } <nl> OUTPUT _ DIR $ { CMAKE _ SOURCE _ DIR } / jni _ include <nl> @ @ - 58 , 6 + 59 , 23 @ @ endif ( ) <nl> add _ library ( lib _ realm _ core STATIC IMPORTED ) <nl> set _ target _ properties ( lib _ realm _ core PROPERTIES IMPORTED _ LOCATION $ { core _ lib _ PATH } ) <nl> <nl> + # Sync static library <nl> + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - $ { ANDROID _ ABI } . a ) <nl> + # Workaround for old core ' s funny ABI nicknames <nl> + if ( NOT EXISTS $ { sync _ lib _ PATH } ) <nl> + if ( ARMEABI ) <nl> + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm . a ) <nl> + elseif ( ARMEABI _ V7A ) <nl> + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm - v7a . a ) <nl> + elseif ( ARM64 _ V8A ) <nl> + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm64 . a ) <nl> + else ( ) <nl> + message ( FATAL _ ERROR " Cannot find core lib file : $ { core _ lib _ PATH } " ) <nl> + endif ( ) <nl> + endif ( ) <nl> + add _ library ( lib _ realm _ sync STATIC IMPORTED ) <nl> + set _ target _ properties ( lib _ realm _ sync PROPERTIES IMPORTED _ LOCATION $ { sync _ lib _ PATH } ) <nl> + <nl> # build application ' s shared lib <nl> include _ directories ( $ { REALM _ CORE _ DIST _ DIR } / include <nl> $ { CMAKE _ SOURCE _ DIR } <nl> @ @ - 65 , 6 + 83 , 8 @ @ include _ directories ( $ { REALM _ CORE _ DIST _ DIR } / include <nl> $ { CMAKE _ SOURCE _ DIR } / object - store / src ) <nl> <nl> set ( ANDROID _ STL " gnustl _ static " ) <nl> + set ( ANDROID _ NO _ UNDEFINED OFF ) <nl> + set ( ANDROID _ SO _ UNDEFINED ON ) <nl> <nl> if ( ARMEABI ) <nl> set ( ABI _ CXX _ FLAGS " - mthumb " ) <nl> @ @ - 76 , 16 + 96 , 16 @ @ endif ( ) <nl> # d . init ( ValueBase : : m _ from _ link _ list , ValueBase : : m _ values , D { } ) ; <nl> # FIXME maybe - uninitialized is reported by table _ view . cpp : 272 : 15 : <nl> # ' best . m _ nanoseconds ' was declared here <nl> - set ( WARNING _ CXX _ FLAGS " - Werror - Wall - Wextra - pedantic - Wno - long - long - Wno - variadic - macros \ <nl> + set ( WARNING _ CXX _ FLAGS " - Wall - Wextra - pedantic - Wno - long - long - Wno - variadic - macros \ <nl> - Wno - missing - field - initializers - Wmissing - declarations - Wno - error = uninitialized - Wno - error = maybe - uninitialized " ) <nl> - set ( REALM _ COMMON _ CXX _ FLAGS " - DREALM _ ANDROID - DREALM _ HAVE _ CONFIG - DPIC - pthread - fvisibility = hidden - std = c + + 14 " ) <nl> + set ( REALM _ COMMON _ CXX _ FLAGS " - DREALM _ ANDROID - DREALM _ HAVE _ CONFIG - DPIC - pthread - fvisibility = hidden - std = c + + 14 - fsigned - char " ) <nl> set ( CMAKE _ CXX _ FLAGS _ RELEASE " - Os - DNDEBUG - flto " ) <nl> # - ggdb doesn ' t play well with - flto <nl> set ( CMAKE _ CXX _ FLAGS _ DEBUG " - ggdb - Os - DNDEBUG " ) <nl> set ( CMAKE _ CXX _ FLAGS " $ { CMAKE _ CXX _ FLAGS } $ { REALM _ COMMON _ CXX _ FLAGS } $ { WARNING _ CXX _ FLAGS } $ { ABI _ CXX _ FLAGS } " ) <nl> <nl> # Set link flags <nl> - set ( REALM _ LINKER _ FLAGS " " ) <nl> + set ( REALM _ LINKER _ FLAGS " - lz " ) <nl> set ( CMAKE _ SHARED _ LINKER _ FLAGS " $ { CMAKE _ SHARED _ LINKER _ FLAGS } $ { REALM _ LINKER _ FLAGS } " ) <nl> <nl> file ( GLOB jni _ SRC <nl> @ @ - 100 , 7 + 120 , 8 @ @ file ( GLOB objectstore _ SRC <nl> add _ library ( realm - jni SHARED $ { jni _ SRC } $ { objectstore _ SRC } ) <nl> add _ dependencies ( realm - jni jni _ headers ) <nl> # - latomic is not set by default for mips . See https : / / code . google . com / p / android / issues / detail ? id = 182094 <nl> - target _ link _ libraries ( realm - jni log android atomic lib _ realm _ core ) <nl> + # FIXME : The order matters ! lib _ realm _ sync needs to be in front of lib _ realm _ core ! ! Find out why ! ! <nl> + target _ link _ libraries ( realm - jni log android atomic lib _ realm _ sync lib _ realm _ core ) <nl> <nl> # Strip the release so files and backup the unstripped versions <nl> if ( CMAKE _ BUILD _ TYPE STREQUAL " Release " )
NEAREST DIFF (one line): diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> index e772d42 . . a1f69e4 100644 <nl> - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . io . IOException ; <nl> import java . io . InputStream ; <nl> <nl> import io . realm . Realm ; <nl> + import io . realm . RealmConfiguration ; <nl> import io . realm . examples . realmmigrationexample . model . Migration ; <nl> import io . realm . examples . realmmigrationexample . model . Person ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> @ @ - 41 , 6 + 42 , 7 @ @ public class MigrationExampleActivity extends Activity { <nl> public static final String TAG = MigrationExampleActivity . class . getName ( ) ; <nl> <nl> private LinearLayout rootLayout = null ; <nl> + private Realm realm ; <nl> <nl> @ Override <nl> protected void onCreate ( Bundle savedInstanceState ) { <nl> @ @ - 51 , 35 + 53 , 47 @ @ public class MigrationExampleActivity extends Activity { <nl> rootLayout . removeAllViews ( ) ; <nl> <nl> / / 3 versions of the databases for testing . Normally you would only have one . <nl> - String path3 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; <nl> - String path1 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; <nl> - String path2 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; <nl> - <nl> - / / If you try to open a file that doesn ' t match your model an exception is thrown : <nl> - try { <nl> - / / should throw as migration is required <nl> - Realm . getInstance ( this , " default1 " ) ; <nl> - } catch ( RealmMigrationNeededException ex ) { <nl> - Log . i ( TAG , " Excellent ! This is expected . " ) ; <nl> - } <nl> - <nl> - Realm realm ; <nl> - <nl> - / / So you migrate your data <nl> - Realm . migrateRealmAtPath ( path1 , new Migration ( ) ) ; <nl> - realm = Realm . getInstance ( this , " default1 " ) ; <nl> + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; <nl> + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; <nl> + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; <nl> + <nl> + / / When you create a RealmConfiguration you can specify the version of the schema . <nl> + / / If the schema does not have that version a RealmMigrationNeededException will be thrown . <nl> + RealmConfiguration config0 = new RealmConfiguration . Builder ( this ) <nl> + . name ( " default0 " ) <nl> + . schemaVersion ( 3 ) <nl> + . build ( ) ; <nl> + <nl> + / / You can then manually call Realm . migrateRealm ( ) . <nl> + Realm . migrateRealm ( config0 , new Migration ( ) ) ; <nl> + realm = Realm . getInstance ( config0 ) ; <nl> + showStatus ( " Default0 " ) ; <nl> showStatus ( realm ) ; <nl> realm . close ( ) ; <nl> <nl> - / / Another migration test <nl> - Realm . migrateRealmAtPath ( path2 , new Migration ( ) ) ; <nl> - realm = Realm . getInstance ( this , " default2 " ) ; <nl> + / / Or you can add the migration code to the configuration . This will run the migration code without throwing <nl> + / / a RealmMigrationNeededException . <nl> + RealmConfiguration config1 = new RealmConfiguration . Builder ( this ) <nl> + . name ( " default1 " ) <nl> + . schemaVersion ( 3 ) <nl> + . migration ( new Migration ( ) ) <nl> + . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( config1 ) ; / / Automatically run migration if needed <nl> + showStatus ( " Default1 " ) ; <nl> showStatus ( realm ) ; <nl> realm . close ( ) ; <nl> <nl> - / / and a third : <nl> - Realm . migrateRealmAtPath ( path3 , new Migration ( ) ) ; <nl> - realm = Realm . getInstance ( this , " default3 " ) ; <nl> + / / or you can set . deleteRealmIfMigrationNeeded ( ) if you don ' t want to bother with migrations . <nl> + / / WARNING : This will delete all data in the Realm though . <nl> + RealmConfiguration config2 = new RealmConfiguration . Builder ( this ) <nl> + . name ( " default2 " ) <nl> + . schemaVersion ( 3 ) <nl> + . deleteRealmIfMigrationNeeded ( ) <nl> + . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( config2 ) ; <nl> + showStatus ( " default2 " ) ; <nl> showStatus ( realm ) ; <nl> realm . close ( ) ; <nl> } <nl> @ @ - 106 , 11 + 120 , 15 @ @ public class MigrationExampleActivity extends Activity { <nl> for ( Person person : realm . allObjects ( Person . class ) ) { <nl> stringBuilder . append ( person . toString ( ) ) . append ( " \ n " ) ; <nl> } <nl> - return stringBuilder . toString ( ) ; <nl> + <nl> + return ( stringBuilder . length ( ) = = 0 ) ? " < empty > " : stringBuilder . toString ( ) ; <nl> } <nl> <nl> private void showStatus ( Realm realm ) { <nl> - String txt = realmString ( realm ) ; <nl> + showStatus ( realmString ( realm ) ) ; <nl> + } <nl> + <nl> + private void showStatus ( String txt ) { <nl> Log . i ( TAG , txt ) ; <nl> TextView tv = new TextView ( this ) ; <nl> tv . setText ( txt ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> index 208e469 . . 99afd50 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> @ @ - 270 , 7 + 270 , 11 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> assertEquals ( 0 , realm . getVersion ( ) ) ; <nl> realm . close ( ) ; <nl> <nl> - / / Version upgrades should happen automatically if possible <nl> - realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; <nl> + / / Version upgrades should always require a migration . <nl> + try { <nl> + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; <nl> + fail ( ) ; <nl> + } catch ( RealmMigrationNeededException expected ) { <nl> + } <nl> } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 4b3ce71 . . 7aaacf6 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 64 , 7 + 64 , 6 @ @ import io . realm . internal . Util ; <nl> import io . realm . internal . android . DebugAndroidLogger ; <nl> import io . realm . internal . android . ReleaseAndroidLogger ; <nl> import io . realm . internal . log . RealmLog ; <nl> - import io . realm . internal . migration . SetVersionNumberMigration ; <nl> <nl> <nl> / * * <nl> @ @ - 1547 , 31 + 1546 , 37 @ @ public final class Realm implements Closeable { <nl> * @ param configuration <nl> * / <nl> public static synchronized void migrateRealm ( RealmConfiguration configuration ) { <nl> - if ( configuration . getMigration ( ) = = null ) { <nl> - migrateRealm ( configuration , new SetVersionNumberMigration ( configuration . getSchemaVersion ( ) ) ) ; <nl> - } else { <nl> - migrateRealm ( configuration , configuration . getMigration ( ) ) ; <nl> - } <nl> + migrateRealm ( configuration , null ) ; <nl> } <nl> <nl> / * * <nl> * Manually trigger a migration on a RealmMigration . <nl> * <nl> * @ param configuration { @ link RealmConfiguration } <nl> - * @ param migration { @ link RealmMigration } to run on the Realm . <nl> + * @ param migration { @ link RealmMigration } to run on the Realm . This will override any migration set on the <nl> + * configuration . <nl> * / <nl> public static void migrateRealm ( RealmConfiguration configuration , RealmMigration migration ) { <nl> - if ( migration = = null ) { <nl> - return ; <nl> + if ( configuration = = null ) { <nl> + throw new IllegalArgumentException ( " RealmConfiguration must be provided " ) ; <nl> + } <nl> + if ( migration = = null & & configuration . getMigration ( ) = = null ) { <nl> + throw new RealmMigrationNeededException ( configuration . getPath ( ) , " RealmMigration must be provided " ) ; <nl> } <nl> <nl> - Realm realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; <nl> - realm . beginTransaction ( ) ; <nl> - realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> - realm . commitTransaction ( ) ; <nl> - realm . close ( ) ; <nl> - <nl> - realmsCache . remove ( ) ; <nl> + RealmMigration realmMigration = ( migration = = null ) ? configuration . getMigration ( ) : migration ; <nl> + Realm realm = null ; <nl> + try { <nl> + realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . setVersion ( realmMigration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + realmsCache . remove ( ) ; <nl> + } <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java b / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java <nl> deleted file mode 100644 <nl> index 3c5784c . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2015 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . internal . migration ; <nl> - <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmMigration ; <nl> - <nl> - / * * <nl> - * Utility migration for automatically upgrading the version number of a Realm . <nl> - * / <nl> - public class SetVersionNumberMigration implements RealmMigration { <nl> - <nl> - private final int newVersion ; <nl> - <nl> - public SetVersionNumberMigration ( int newVersion ) { <nl> - this . newVersion = newVersion ; <nl> - } <nl> - <nl> - @ Override <nl> - public long execute ( Realm realm , long version ) { <nl> - return newVersion ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index 78f3dc3 . . eb3d8a7 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 12 , 9 + 12 , 9 @ @ apply plugin : ' checkstyle ' 
 apply plugin : ' com . github . kt3k . coveralls ' 
 apply plugin : ' de . undercouch . download ' 
 
 - ext . coreVersion = ' 1 . 5 . 1 ' 
 + ext . coreVersion = ' 0 . 28 . 0 ' 
 / / empty or comment out this to disable hash checking 
 - ext . coreSha256Hash = ' a034d3250c820a15126721142d168a2ac4a12223b75bb324958ca2a70442720d ' 
 + ext . coreSha256Hash = ' e4d8ed7342824a1574449700b16cd36f663f4d6768fc09c1aca986f19e27162b ' 
 ext . forceDownloadCore = 
 project . hasProperty ( ' forceDownloadCore ' ) ? project . getProperty ( ' forceDownloadCore ' ) . toBoolean ( ) : false 
 / / Set the core source code path . By setting this , the core will be built from source . And coreVersion will be read from 
 @ @ - 326 , 13 + 326 , 15 @ @ artifacts { 
 
 def coreDownloaded = false 
 
 - task downloadCore ( group : ' build setup ' , description : ' Download the latest version of Realm Core ' ) { 
 + task downloadCore ( ) { 
 + group = ' build setup ' 
 + description = ' Download the latest version of Realm Core ' 
 def isHashCheckingEnabled = { 
 return project . hasProperty ( ' coreSha256Hash ' ) & & ! project . coreSha256Hash . empty 
 } 
 
 def calcSha256Hash = { File targetFile - > 
 - MessageDigest sha = MessageDigest . getInstance ( " SHA - 256 " ) ; 
 + MessageDigest sha = MessageDigest . getInstance ( " SHA - 256 " ) 
 Formatter hexHash = new Formatter ( ) 
 sha . digest ( targetFile . bytes ) . each { b - > hexHash . format ( ' % 02x ' , b ) } 
 return hexHash . toString ( ) 
 @ @ - 362 , 10 + 364 , 12 @ @ task downloadCore ( group : ' build setup ' , description : ' Download the latest versio 
 
 doLast { 
 if ( shouldDownloadCore ( ) ) { 
 - download { 
 - src " http : / / static . realm . io / downloads / core / realm - core - android - $ { project . coreVersion } . tar . gz " 
 - dest project . coreArchiveFile 
 - onlyIfNewer false 
 + / / CI artifacts are only available if on the internal network or VPN 
 + def downloadUrl = " s3 : / / realm - ci - artifacts / sync / $ { project . coreVersion } / android / sync - core - $ { project . coreVersion } . tar . gz " 
 + 
 + println " Downloading $ { downloadUrl } " 
 + exec { 
 + commandLine ' s3cmd ' , ' - c ' , project . s3cfg , ' - f ' , ' get ' , " $ { downloadUrl } " , " $ { project . coreArchiveFile } " 
 } 
 coreDownloaded = true 
 
 diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 index b4f9210 . . f6be360 100644 
 - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt 
 + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 @ @ - 27 , 6 + 27 , 7 @ @ create _ javah ( TARGET jni _ headers 
 CLASSES io . realm . internal . Table io . realm . internal . TableView io . realm . internal . CheckedRow 
 io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow 
 io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil 
 + io . realm . sync . SyncManager 
 
 CLASSPATH $ { classes _ PATH } 
 OUTPUT _ DIR $ { CMAKE _ SOURCE _ DIR } / jni _ include 
 @ @ - 58 , 6 + 59 , 23 @ @ endif ( ) 
 add _ library ( lib _ realm _ core STATIC IMPORTED ) 
 set _ target _ properties ( lib _ realm _ core PROPERTIES IMPORTED _ LOCATION $ { core _ lib _ PATH } ) 
 
 + # Sync static library 
 + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - $ { ANDROID _ ABI } . a ) 
 + # Workaround for old core ' s funny ABI nicknames 
 + if ( NOT EXISTS $ { sync _ lib _ PATH } ) 
 + if ( ARMEABI ) 
 + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm . a ) 
 + elseif ( ARMEABI _ V7A ) 
 + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm - v7a . a ) 
 + elseif ( ARM64 _ V8A ) 
 + set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm64 . a ) 
 + else ( ) 
 + message ( FATAL _ ERROR " Cannot find core lib file : $ { core _ lib _ PATH } " ) 
 + endif ( ) 
 + endif ( ) 
 + add _ library ( lib _ realm _ sync STATIC IMPORTED ) 
 + set _ target _ properties ( lib _ realm _ sync PROPERTIES IMPORTED _ LOCATION $ { sync _ lib _ PATH } ) 
 + 
 # build application ' s shared lib 
 include _ directories ( $ { REALM _ CORE _ DIST _ DIR } / include 
 $ { CMAKE _ SOURCE _ DIR } 
 @ @ - 65 , 6 + 83 , 8 @ @ include _ directories ( $ { REALM _ CORE _ DIST _ DIR } / include 
 $ { CMAKE _ SOURCE _ DIR } / object - store / src ) 
 
 set ( ANDROID _ STL " gnustl _ static " ) 
 + set ( ANDROID _ NO _ UNDEFINED OFF ) 
 + set ( ANDROID _ SO _ UNDEFINED ON ) 
 
 if ( ARMEABI ) 
 set ( ABI _ CXX _ FLAGS " - mthumb " ) 
 @ @ - 76 , 16 + 96 , 16 @ @ endif ( ) 
 # d . init ( ValueBase : : m _ from _ link _ list , ValueBase : : m _ values , D { } ) ; 
 # FIXME maybe - uninitialized is reported by table _ view . cpp : 272 : 15 : 
 # ' best . m _ nanoseconds ' was declared here 
 - set ( WARNING _ CXX _ FLAGS " - Werror - Wall - Wextra - pedantic - Wno - long - long - Wno - variadic - macros \ 
 + set ( WARNING _ CXX _ FLAGS " - Wall - Wextra - pedantic - Wno - long - long - Wno - variadic - macros \ 
 - Wno - missing - field - initializers - Wmissing - declarations - Wno - error = uninitialized - Wno - error = maybe - uninitialized " ) 
 - set ( REALM _ COMMON _ CXX _ FLAGS " - DREALM _ ANDROID - DREALM _ HAVE _ CONFIG - DPIC - pthread - fvisibility = hidden - std = c + + 14 " ) 
 + set ( REALM _ COMMON _ CXX _ FLAGS " - DREALM _ ANDROID - DREALM _ HAVE _ CONFIG - DPIC - pthread - fvisibility = hidden - std = c + + 14 - fsigned - char " ) 
 set ( CMAKE _ CXX _ FLAGS _ RELEASE " - Os - DNDEBUG - flto " ) 
 # - ggdb doesn ' t play well with - flto 
 set ( CMAKE _ CXX _ FLAGS _ DEBUG " - ggdb - Os - DNDEBUG " ) 
 set ( CMAKE _ CXX _ FLAGS " $ { CMAKE _ CXX _ FLAGS } $ { REALM _ COMMON _ CXX _ FLAGS } $ { WARNING _ CXX _ FLAGS } $ { ABI _ CXX _ FLAGS } " ) 
 
 # Set link flags 
 - set ( REALM _ LINKER _ FLAGS " " ) 
 + set ( REALM _ LINKER _ FLAGS " - lz " ) 
 set ( CMAKE _ SHARED _ LINKER _ FLAGS " $ { CMAKE _ SHARED _ LINKER _ FLAGS } $ { REALM _ LINKER _ FLAGS } " ) 
 
 file ( GLOB jni _ SRC 
 @ @ - 100 , 7 + 120 , 8 @ @ file ( GLOB objectstore _ SRC 
 add _ library ( realm - jni SHARED $ { jni _ SRC } $ { objectstore _ SRC } ) 
 add _ dependencies ( realm - jni jni _ headers ) 
 # - latomic is not set by default for mips . See https : / / code . google . com / p / android / issues / detail ? id = 182094 
 - target _ link _ libraries ( realm - jni log android atomic lib _ realm _ core ) 
 + # FIXME : The order matters ! lib _ realm _ sync needs to be in front of lib _ realm _ core ! ! Find out why ! ! 
 + target _ link _ libraries ( realm - jni log android atomic lib _ realm _ sync lib _ realm _ core ) 
 
 # Strip the release so files and backup the unstripped versions 
 if ( CMAKE _ BUILD _ TYPE STREQUAL " Release " )

NEAREST DIFF:
diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 index e772d42 . . a1f69e4 100644 
 - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . io . IOException ; 
 import java . io . InputStream ; 
 
 import io . realm . Realm ; 
 + import io . realm . RealmConfiguration ; 
 import io . realm . examples . realmmigrationexample . model . Migration ; 
 import io . realm . examples . realmmigrationexample . model . Person ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 @ @ - 41 , 6 + 42 , 7 @ @ public class MigrationExampleActivity extends Activity { 
 public static final String TAG = MigrationExampleActivity . class . getName ( ) ; 
 
 private LinearLayout rootLayout = null ; 
 + private Realm realm ; 
 
 @ Override 
 protected void onCreate ( Bundle savedInstanceState ) { 
 @ @ - 51 , 35 + 53 , 47 @ @ public class MigrationExampleActivity extends Activity { 
 rootLayout . removeAllViews ( ) ; 
 
 / / 3 versions of the databases for testing . Normally you would only have one . 
 - String path3 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; 
 - String path1 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; 
 - String path2 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; 
 - 
 - / / If you try to open a file that doesn ' t match your model an exception is thrown : 
 - try { 
 - / / should throw as migration is required 
 - Realm . getInstance ( this , " default1 " ) ; 
 - } catch ( RealmMigrationNeededException ex ) { 
 - Log . i ( TAG , " Excellent ! This is expected . " ) ; 
 - } 
 - 
 - Realm realm ; 
 - 
 - / / So you migrate your data 
 - Realm . migrateRealmAtPath ( path1 , new Migration ( ) ) ; 
 - realm = Realm . getInstance ( this , " default1 " ) ; 
 + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; 
 + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; 
 + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; 
 + 
 + / / When you create a RealmConfiguration you can specify the version of the schema . 
 + / / If the schema does not have that version a RealmMigrationNeededException will be thrown . 
 + RealmConfiguration config0 = new RealmConfiguration . Builder ( this ) 
 + . name ( " default0 " ) 
 + . schemaVersion ( 3 ) 
 + . build ( ) ; 
 + 
 + / / You can then manually call Realm . migrateRealm ( ) . 
 + Realm . migrateRealm ( config0 , new Migration ( ) ) ; 
 + realm = Realm . getInstance ( config0 ) ; 
 + showStatus ( " Default0 " ) ; 
 showStatus ( realm ) ; 
 realm . close ( ) ; 
 
 - / / Another migration test 
 - Realm . migrateRealmAtPath ( path2 , new Migration ( ) ) ; 
 - realm = Realm . getInstance ( this , " default2 " ) ; 
 + / / Or you can add the migration code to the configuration . This will run the migration code without throwing 
 + / / a RealmMigrationNeededException . 
 + RealmConfiguration config1 = new RealmConfiguration . Builder ( this ) 
 + . name ( " default1 " ) 
 + . schemaVersion ( 3 ) 
 + . migration ( new Migration ( ) ) 
 + . build ( ) ; 
 + 
 + realm = Realm . getInstance ( config1 ) ; / / Automatically run migration if needed 
 + showStatus ( " Default1 " ) ; 
 showStatus ( realm ) ; 
 realm . close ( ) ; 
 
 - / / and a third : 
 - Realm . migrateRealmAtPath ( path3 , new Migration ( ) ) ; 
 - realm = Realm . getInstance ( this , " default3 " ) ; 
 + / / or you can set . deleteRealmIfMigrationNeeded ( ) if you don ' t want to bother with migrations . 
 + / / WARNING : This will delete all data in the Realm though . 
 + RealmConfiguration config2 = new RealmConfiguration . Builder ( this ) 
 + . name ( " default2 " ) 
 + . schemaVersion ( 3 ) 
 + . deleteRealmIfMigrationNeeded ( ) 
 + . build ( ) ; 
 + 
 + realm = Realm . getInstance ( config2 ) ; 
 + showStatus ( " default2 " ) ; 
 showStatus ( realm ) ; 
 realm . close ( ) ; 
 } 
 @ @ - 106 , 11 + 120 , 15 @ @ public class MigrationExampleActivity extends Activity { 
 for ( Person person : realm . allObjects ( Person . class ) ) { 
 stringBuilder . append ( person . toString ( ) ) . append ( " \ n " ) ; 
 } 
 - return stringBuilder . toString ( ) ; 
 + 
 + return ( stringBuilder . length ( ) = = 0 ) ? " < empty > " : stringBuilder . toString ( ) ; 
 } 
 
 private void showStatus ( Realm realm ) { 
 - String txt = realmString ( realm ) ; 
 + showStatus ( realmString ( realm ) ) ; 
 + } 
 + 
 + private void showStatus ( String txt ) { 
 Log . i ( TAG , txt ) ; 
 TextView tv = new TextView ( this ) ; 
 tv . setText ( txt ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 index 208e469 . . 99afd50 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 @ @ - 270 , 7 + 270 , 11 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 assertEquals ( 0 , realm . getVersion ( ) ) ; 
 realm . close ( ) ; 
 
 - / / Version upgrades should happen automatically if possible 
 - realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; 
 + / / Version upgrades should always require a migration . 
 + try { 
 + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; 
 + fail ( ) ; 
 + } catch ( RealmMigrationNeededException expected ) { 
 + } 
 } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 4b3ce71 . . 7aaacf6 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 64 , 7 + 64 , 6 @ @ import io . realm . internal . Util ; 
 import io . realm . internal . android . DebugAndroidLogger ; 
 import io . realm . internal . android . ReleaseAndroidLogger ; 
 import io . realm . internal . log . RealmLog ; 
 - import io . realm . internal . migration . SetVersionNumberMigration ; 
 
 
 / * * 
 @ @ - 1547 , 31 + 1546 , 37 @ @ public final class Realm implements Closeable { 
 * @ param configuration 
 * / 
 public static synchronized void migrateRealm ( RealmConfiguration configuration ) { 
 - if ( configuration . getMigration ( ) = = null ) { 
 - migrateRealm ( configuration , new SetVersionNumberMigration ( configuration . getSchemaVersion ( ) ) ) ; 
 - } else { 
 - migrateRealm ( configuration , configuration . getMigration ( ) ) ; 
 - } 
 + migrateRealm ( configuration , null ) ; 
 } 
 
 / * * 
 * Manually trigger a migration on a RealmMigration . 
 * 
 * @ param configuration { @ link RealmConfiguration } 
 - * @ param migration { @ link RealmMigration } to run on the Realm . 
 + * @ param migration { @ link RealmMigration } to run on the Realm . This will override any migration set on the 
 + * configuration . 
 * / 
 public static void migrateRealm ( RealmConfiguration configuration , RealmMigration migration ) { 
 - if ( migration = = null ) { 
 - return ; 
 + if ( configuration = = null ) { 
 + throw new IllegalArgumentException ( " RealmConfiguration must be provided " ) ; 
 + } 
 + if ( migration = = null & & configuration . getMigration ( ) = = null ) { 
 + throw new RealmMigrationNeededException ( configuration . getPath ( ) , " RealmMigration must be provided " ) ; 
 } 
 
 - Realm realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; 
 - realm . beginTransaction ( ) ; 
 - realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; 
 - realm . commitTransaction ( ) ; 
 - realm . close ( ) ; 
 - 
 - realmsCache . remove ( ) ; 
 + RealmMigration realmMigration = ( migration = = null ) ? configuration . getMigration ( ) : migration ; 
 + Realm realm = null ; 
 + try { 
 + realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . setVersion ( realmMigration . execute ( realm , realm . getVersion ( ) ) ) ; 
 + realm . commitTransaction ( ) ; 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + realmsCache . remove ( ) ; 
 + } 
 + } 
 } 
 
 / * * 
 diff - - git a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java b / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java 
 deleted file mode 100644 
 index 3c5784c . . 0000000 
 - - - a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2015 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . internal . migration ; 
 - 
 - import io . realm . Realm ; 
 - import io . realm . RealmMigration ; 
 - 
 - / * * 
 - * Utility migration for automatically upgrading the version number of a Realm . 
 - * / 
 - public class SetVersionNumberMigration implements RealmMigration { 
 - 
 - private final int newVersion ; 
 - 
 - public SetVersionNumberMigration ( int newVersion ) { 
 - this . newVersion = newVersion ; 
 - } 
 - 
 - @ Override 
 - public long execute ( Realm realm , long version ) { 
 - return newVersion ; 
 - } 
 - }
