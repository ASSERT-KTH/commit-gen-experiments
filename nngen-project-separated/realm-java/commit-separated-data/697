BLEU SCORE: 0.02399905349559606

TEST MSG: Examples should use transaction blocks
GENERATED MSG: Updated intro example . And a little more .

TEST DIFF (one line): diff - - git a / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java b / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java <nl> index 7b70163 . . edf66fd 100644 <nl> - - - a / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java <nl> + + + b / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java <nl> @ @ - 53 , 13 + 53 , 16 @ @ public class EncryptionExampleActivity extends Activity { <nl> realm = Realm . getInstance ( realmConfiguration ) ; <nl> <nl> / / Everything continues to work as normal except for that the file is encrypted on disk <nl> - realm . beginTransaction ( ) ; <nl> - Person person = realm . createObject ( Person . class ) ; <nl> - person . setName ( " Happy Person " ) ; <nl> - person . setAge ( 14 ) ; <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + Person person = realm . createObject ( Person . class ) ; <nl> + person . setName ( " Happy Person " ) ; <nl> + person . setAge ( 14 ) ; <nl> + } <nl> + } ) ; <nl> <nl> - person = realm . where ( Person . class ) . findFirst ( ) ; <nl> + Person person = realm . where ( Person . class ) . findFirst ( ) ; <nl> Log . i ( TAG , String . format ( " Person name : % s " , person . getName ( ) ) ) ; <nl> } <nl> <nl> diff - - git a / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java b / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java <nl> index c308278 . . 759b451 100644 <nl> - - - a / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java <nl> + + + b / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java <nl> @ @ - 129 , 12 + 129 , 15 @ @ public class GridViewExampleActivity extends Activity implements AdapterView . OnI <nl> City modifiedCity = ( City ) mAdapter . getItem ( position ) ; <nl> <nl> / / Acquire the RealmObject matching the name of the clicked City . <nl> - City city = realm . where ( City . class ) . equalTo ( " name " , modifiedCity . getName ( ) ) . findFirst ( ) ; <nl> + final City city = realm . where ( City . class ) . equalTo ( " name " , modifiedCity . getName ( ) ) . findFirst ( ) ; <nl> <nl> / / Create a transaction to increment the vote count for the selected City in the realm <nl> - realm . beginTransaction ( ) ; <nl> - city . setVotes ( city . getVotes ( ) + 1 ) ; <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + city . setVotes ( city . getVotes ( ) + 1 ) ; <nl> + } <nl> + } ) ; <nl> <nl> updateCities ( ) ; <nl> } <nl> diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java b / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java <nl> index 13f6b1b . . 15b420b 100644 <nl> - - - a / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java <nl> + + + b / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java <nl> @ @ - 92 , 32 + 92 , 40 @ @ public class IntroExampleActivity extends Activity { <nl> showStatus ( " Perform basic Create / Read / Update / Delete ( CRUD ) operations . . . " ) ; <nl> <nl> / / All writes must be wrapped in a transaction to facilitate safe multi threading <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - / / Add a person <nl> - Person person = realm . createObject ( Person . class ) ; <nl> - person . setId ( 1 ) ; <nl> - person . setName ( " Young Person " ) ; <nl> - person . setAge ( 14 ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + / / Add a person <nl> + Person person = realm . createObject ( Person . class ) ; <nl> + person . setId ( 1 ) ; <nl> + person . setName ( " Young Person " ) ; <nl> + person . setAge ( 14 ) ; <nl> <nl> - / / When the transaction is committed , all changes a synced to disk . <nl> - realm . commitTransaction ( ) ; <nl> + } <nl> + } ) ; <nl> <nl> / / Find the first person ( no query conditions ) and read a field <nl> - person = realm . where ( Person . class ) . findFirst ( ) ; <nl> + final Person person = realm . where ( Person . class ) . findFirst ( ) ; <nl> showStatus ( person . getName ( ) + " : " + person . getAge ( ) ) ; <nl> <nl> / / Update person in a transaction <nl> - realm . beginTransaction ( ) ; <nl> - person . setName ( " Senior Person " ) ; <nl> - person . setAge ( 99 ) ; <nl> - showStatus ( person . getName ( ) + " got older : " + person . getAge ( ) ) ; <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + person . setName ( " Senior Person " ) ; <nl> + person . setAge ( 99 ) ; <nl> + showStatus ( person . getName ( ) + " got older : " + person . getAge ( ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + } <nl> + } ) ; <nl> <nl> / / Delete all persons <nl> - realm . beginTransaction ( ) ; <nl> - realm . allObjects ( Person . class ) . deleteAllFromRealm ( ) ; <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . allObjects ( Person . class ) . deleteAllFromRealm ( ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> private void basicQuery ( Realm realm ) { <nl> @ @ - 146 , 29 + 154 , 32 @ @ public class IntroExampleActivity extends Activity { <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> <nl> / / Add ten persons in one transaction <nl> - realm . beginTransaction ( ) ; <nl> - Dog fido = realm . createObject ( Dog . class ) ; <nl> - fido . name = " fido " ; <nl> - for ( int i = 0 ; i < 10 ; i + + ) { <nl> - Person person = realm . createObject ( Person . class ) ; <nl> - person . setId ( i ) ; <nl> - person . setName ( " Person no . " + i ) ; <nl> - person . setAge ( i ) ; <nl> - person . setDog ( fido ) ; <nl> - <nl> - / / The field tempReference is annotated with @ Ignore . <nl> - / / This means setTempReference sets the Person tempReference <nl> - / / field directly . The tempReference is NOT saved as part of <nl> - / / the RealmObject : <nl> - person . setTempReference ( 42 ) ; <nl> - <nl> - for ( int j = 0 ; j < i ; j + + ) { <nl> - Cat cat = realm . createObject ( Cat . class ) ; <nl> - cat . name = " Cat _ " + j ; <nl> - person . getCats ( ) . add ( cat ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + Dog fido = realm . createObject ( Dog . class ) ; <nl> + fido . name = " fido " ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + Person person = realm . createObject ( Person . class ) ; <nl> + person . setId ( i ) ; <nl> + person . setName ( " Person no . " + i ) ; <nl> + person . setAge ( i ) ; <nl> + person . setDog ( fido ) ; <nl> + <nl> + / / The field tempReference is annotated with @ Ignore . <nl> + / / This means setTempReference sets the Person tempReference <nl> + / / field directly . The tempReference is NOT saved as part of <nl> + / / the RealmObject : <nl> + person . setTempReference ( 42 ) ; <nl> + <nl> + for ( int j = 0 ; j < i ; j + + ) { <nl> + Cat cat = realm . createObject ( Cat . class ) ; <nl> + cat . name = " Cat _ " + j ; <nl> + person . getCats ( ) . add ( cat ) ; <nl> + } <nl> + } <nl> } <nl> - } <nl> - realm . commitTransaction ( ) ; <nl> + } ) ; <nl> <nl> / / Implicit read transactions allow you to access your objects <nl> status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; <nl> diff - - git a / examples / jsonExample / src / main / java / io / realm / examples / json / JsonExampleActivity . java b / examples / jsonExample / src / main / java / io / realm / examples / json / JsonExampleActivity . java <nl> index e2fbb7b . . 62fd7a1 100644 <nl> - - - a / examples / jsonExample / src / main / java / io / realm / examples / json / JsonExampleActivity . java <nl> + + + b / examples / jsonExample / src / main / java / io / realm / examples / json / JsonExampleActivity . java <nl> @ @ - 115 , 18 + 115 , 24 @ @ public class JsonExampleActivity extends Activity { <nl> Map < String , String > city = new HashMap < String , String > ( ) ; <nl> city . put ( " name " , " K Ã¸ benhavn " ) ; <nl> city . put ( " votes " , " 9 " ) ; <nl> - JSONObject json = new JSONObject ( city ) ; <nl> + final JSONObject json = new JSONObject ( city ) ; <nl> <nl> - realm . beginTransaction ( ) ; <nl> - realm . createObjectFromJson ( City . class , json ) ; <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . createObjectFromJson ( City . class , json ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> private void loadJsonFromString ( ) { <nl> - String json = " { name : \ " Aarhus \ " , votes : 99 } " ; <nl> + final String json = " { name : \ " Aarhus \ " , votes : 99 } " ; <nl> <nl> - realm . beginTransaction ( ) ; <nl> - realm . createObjectFromJson ( City . class , json ) ; <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . createObjectFromJson ( City . class , json ) ; <nl> + } <nl> + } ) ; <nl> } <nl> } <nl> diff - - git a / examples / kotlinExample / build . gradle b / examples / kotlinExample / build . gradle <nl> index 3e35bbf . . b29632d 100644 <nl> - - - a / examples / kotlinExample / build . gradle <nl> + + + b / examples / kotlinExample / build . gradle <nl> @ @ - 2 , 6 + 2 , 7 @ @ buildscript { <nl> ext . kotlin _ version = ' 1 . 0 . 1 - 2 ' <nl> repositories { <nl> jcenter ( ) <nl> + mavenCentral ( ) <nl> } <nl> dependencies { <nl> classpath " org . jetbrains . kotlin : kotlin - gradle - plugin : $ kotlin _ version " <nl> diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> index 37c16e3 . . 4f71f7e 100644 <nl> - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt <nl> @ @ - 98 , 27 + 98 , 24 @ @ class KotlinExampleActivity : Activity ( ) { <nl> showStatus ( " Perform basic Create / Read / Update / Delete ( CRUD ) operations . . . " ) <nl> <nl> / / All writes must be wrapped in a transaction to facilitate safe multi threading <nl> - realm . beginTransaction ( ) <nl> - <nl> - / / Add a person <nl> - var person = realm . createObject ( Person : : class . java ) <nl> - person . id = 1 <nl> - person . name = " Young Person " <nl> - person . age = 14 <nl> - <nl> - / / When the transaction is committed , all changes a synced to disk . <nl> - realm . commitTransaction ( ) <nl> + realm . executeTransaction { <nl> + / / Add a person <nl> + var person = realm . createObject ( Person : : class . java ) <nl> + person . id = 1 <nl> + person . name = " Young Person " <nl> + person . age = 14 <nl> + } <nl> <nl> / / Find the first person ( no query conditions ) and read a field <nl> - person = realm . where ( Person : : class . java ) . findFirst ( ) <nl> + var person = realm . where ( Person : : class . java ) . findFirst ( ) <nl> showStatus ( person . name + " : " + person . age ) <nl> <nl> / / Update person in a transaction <nl> - realm . beginTransaction ( ) <nl> - person . name = " Senior Person " <nl> - person . age = 99 <nl> - showStatus ( person . name + " got older : " + person . age ) <nl> - realm . commitTransaction ( ) <nl> + realm . executeTransaction { <nl> + person . name = " Senior Person " <nl> + person . age = 99 <nl> + showStatus ( person . name + " got older : " + person . age ) <nl> + } <nl> } <nl> <nl> private fun basicQuery ( realm : Realm ) { <nl> @ @ - 147 , 29 + 144 , 29 @ @ class KotlinExampleActivity : Activity ( ) { <nl> val realm = Realm . getInstance ( realmConfig ) <nl> <nl> / / Add ten persons in one transaction <nl> - realm . beginTransaction ( ) <nl> - val fido = realm . createObject ( Dog : : class . java ) <nl> - fido . name = " fido " <nl> - for ( i in 0 . . 9 ) { <nl> - val person = realm . createObject ( Person : : class . java ) <nl> - person . id = i . toLong ( ) <nl> - person . name = " Person no . $ i " <nl> - person . age = i <nl> - person . dog = fido <nl> - <nl> - / / The field tempReference is annotated with @ Ignore . <nl> - / / This means setTempReference sets the Person tempReference <nl> - / / field directly . The tempReference is NOT saved as part of <nl> - / / the RealmObject : <nl> - person . tempReference = 42 <nl> - <nl> - for ( j in 0 . . i - 1 ) { <nl> - val cat = realm . createObject ( Cat : : class . java ) <nl> - cat . name = " Cat _ $ j " <nl> - person . cats . add ( cat ) <nl> + realm . executeTransaction { <nl> + val fido = realm . createObject ( Dog : : class . java ) <nl> + fido . name = " fido " <nl> + for ( i in 0 . . 9 ) { <nl> + val person = realm . createObject ( Person : : class . java ) <nl> + person . id = i . toLong ( ) <nl> + person . name = " Person no . $ i " <nl> + person . age = i <nl> + person . dog = fido <nl> + <nl> + / / The field tempReference is annotated with @ Ignore . <nl> + / / This means setTempReference sets the Person tempReference <nl> + / / field directly . The tempReference is NOT saved as part of <nl> + / / the RealmObject : <nl> + person . tempReference = 42 <nl> + <nl> + for ( j in 0 . . i - 1 ) { <nl> + val cat = realm . createObject ( Cat : : class . java ) <nl> + cat . name = " Cat _ $ j " <nl> + person . cats . add ( cat ) <nl> + } <nl> } <nl> } <nl> - realm . commitTransaction ( ) <nl> <nl> / / Implicit read transactions allow you to access your objects <nl> status + = " \ nNumber of persons : $ { realm . allObjects ( Person : : class . java ) . size } " <nl> diff - - git a / examples / moduleExample / app / src / main / java / io / realm / examples / appmodules / ModulesExampleActivity . java b / examples / moduleExample / app / src / main / java / io / realm / examples / appmodules / ModulesExampleActivity . java <nl> index 1d36960 . . 12d4c01 100644 <nl> - - - a / examples / moduleExample / app / src / main / java / io / realm / examples / appmodules / ModulesExampleActivity . java <nl> + + + b / examples / moduleExample / app / src / main / java / io / realm / examples / appmodules / ModulesExampleActivity . java <nl> @ @ - 78 , 7 + 78 , 7 @ @ public class ModulesExampleActivity extends Activity { <nl> / / Multiple Realms can be open at the same time <nl> showStatus ( " Opening multiple Realms " ) ; <nl> Realm defaultRealm = Realm . getInstance ( defaultConfig ) ; <nl> - Realm farmRealm = Realm . getInstance ( farmAnimalsConfig ) ; <nl> + final Realm farmRealm = Realm . getInstance ( farmAnimalsConfig ) ; <nl> Realm exoticRealm = Realm . getInstance ( exoticAnimalsConfig ) ; <nl> <nl> / / Objects can be added to each Realm independantly <nl> @ @ - 120 , 10 + 120 , 14 @ @ public class ModulesExampleActivity extends Activity { <nl> showStatus ( " Copy objects between Realms " ) ; <nl> showStatus ( " Number of pigs on the farm : " + farmRealm . where ( Pig . class ) . count ( ) ) ; <nl> showStatus ( " Copy pig from defaultRealm to farmRealm " ) ; <nl> - Pig defaultPig = defaultRealm . where ( Pig . class ) . findFirst ( ) ; <nl> - farmRealm . beginTransaction ( ) ; <nl> - farmRealm . copyToRealm ( defaultPig ) ; <nl> - farmRealm . commitTransaction ( ) ; <nl> + final Pig defaultPig = defaultRealm . where ( Pig . class ) . findFirst ( ) ; <nl> + farmRealm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . copyToRealm ( defaultPig ) ; <nl> + } <nl> + } ) ; <nl> + <nl> showStatus ( " Number of pigs on the farm : " + farmRealm . where ( Pig . class ) . count ( ) ) ; <nl> <nl> / / Each Realm is restricted to only accept the classes in their schema . <nl> diff - - git a / examples / moduleExample / library / src / main / java / io / realm / examples / librarymodules / Zoo . java b / examples / moduleExample / library / src / main / java / io / realm / examples / librarymodules / Zoo . java <nl> index 9e19a30 . . f33c90c 100644 <nl> - - - a / examples / moduleExample / library / src / main / java / io / realm / examples / librarymodules / Zoo . java <nl> + + + b / examples / moduleExample / library / src / main / java / io / realm / examples / librarymodules / Zoo . java <nl> @ @ - 52 , 13 + 52 , 16 @ @ public class Zoo { <nl> return realm . where ( Cat . class ) . count ( ) ; <nl> } <nl> <nl> - public void addAnimals ( int count ) { <nl> - realm . beginTransaction ( ) ; <nl> - for ( int i = 0 ; i < count ; i + + ) { <nl> - Cat cat = realm . createObject ( Cat . class ) ; <nl> - cat . setName ( " Cat " + i ) ; <nl> - } <nl> - realm . commitTransaction ( ) ; <nl> + public void addAnimals ( final int count ) { <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + for ( int i = 0 ; i < count ; i + + ) { <nl> + Cat cat = realm . createObject ( Cat . class ) ; <nl> + cat . setName ( " Cat " + i ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> } <nl> <nl> public void close ( ) { <nl> diff - - git a / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java b / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java <nl> index 73a177e . . 4f335a3 100644 <nl> - - - a / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java <nl> + + + b / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java <nl> @ @ - 86 , 15 + 86 , 18 @ @ public class AsyncTaskFragment extends Fragment { <nl> protected Integer doInBackground ( Void . . . params ) { <nl> Realm realm = Realm . getDefaultInstance ( ) ; <nl> <nl> - realm . beginTransaction ( ) ; <nl> - realm . clear ( Score . class ) ; <nl> - for ( int i = 0 ; i < TEST _ OBJECTS ; i + + ) { <nl> - if ( isCancelled ( ) ) break ; <nl> - Score score = realm . createObject ( Score . class ) ; <nl> - score . setName ( " Name " + i ) ; <nl> - score . setScore ( i ) ; <nl> - } <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . clear ( Score . class ) ; <nl> + for ( int i = 0 ; i < TEST _ OBJECTS ; i + + ) { <nl> + if ( isCancelled ( ) ) break ; <nl> + Score score = realm . createObject ( Score . class ) ; <nl> + score . setName ( " Name " + i ) ; <nl> + score . setScore ( i ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> <nl> Number sum = realm . allObjects ( Score . class ) . sum ( " score " ) ; <nl> realm . close ( ) ; <nl> diff - - git a / examples / threadExample / src / main / java / io / realm / examples / threads / PassingObjectsFragment . java b / examples / threadExample / src / main / java / io / realm / examples / threads / PassingObjectsFragment . java <nl> index 8ce4838 . . d10e719 100644 <nl> - - - a / examples / threadExample / src / main / java / io / realm / examples / threads / PassingObjectsFragment . java <nl> + + + b / examples / threadExample / src / main / java / io / realm / examples / threads / PassingObjectsFragment . java <nl> @ @ - 97 , 13 + 97 , 15 @ @ public class PassingObjectsFragment extends Fragment { <nl> super . onActivityCreated ( savedInstanceState ) ; <nl> <nl> realm = Realm . getDefaultInstance ( ) ; <nl> - realm . beginTransaction ( ) ; <nl> - person = realm . createObject ( Person . class ) ; <nl> - person . setName ( " Jane " ) ; <nl> - person . setAge ( 42 ) ; <nl> - person . setId ( UUID . randomUUID ( ) . toString ( ) ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + person = realm . createObject ( Person . class ) ; <nl> + person . setName ( " Jane " ) ; <nl> + person . setAge ( 42 ) ; <nl> + person . setId ( UUID . randomUUID ( ) . toString ( ) ) ; <nl> + } <nl> + } ) ; <nl> textContent . setText ( person . toString ( ) ) ; <nl> } <nl> <nl> diff - - git a / examples / threadExample / src / main / java / io / realm / examples / threads / ThreadFragment . java b / examples / threadExample / src / main / java / io / realm / examples / threads / ThreadFragment . java <nl> index bc63963 . . 551d4ec 100644 <nl> - - - a / examples / threadExample / src / main / java / io / realm / examples / threads / ThreadFragment . java <nl> + + + b / examples / threadExample / src / main / java / io / realm / examples / threads / ThreadFragment . java <nl> @ @ - 76 , 18 + 76 , 24 @ @ public class ThreadFragment extends Fragment { <nl> switch ( item . getItemId ( ) ) { <nl> case R . id . action _ add _ dot : <nl> / / Add blue dot from the UI thread <nl> - realm . beginTransaction ( ) ; <nl> - Dot dot = realm . createObject ( Dot . class ) ; <nl> - dot . setX ( random . nextInt ( 100 ) ) ; <nl> - dot . setY ( random . nextInt ( 100 ) ) ; <nl> - dot . setColor ( getResources ( ) . getColor ( R . color . realm _ blue ) ) ; <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + Dot dot = realm . createObject ( Dot . class ) ; <nl> + dot . setX ( random . nextInt ( 100 ) ) ; <nl> + dot . setY ( random . nextInt ( 100 ) ) ; <nl> + dot . setColor ( getResources ( ) . getColor ( R . color . realm _ blue ) ) ; <nl> + } <nl> + } ) ; <nl> return true ; <nl> <nl> case R . id . action _ clear : <nl> - realm . beginTransaction ( ) ; <nl> - realm . clear ( Dot . class ) ; <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . clear ( Dot . class ) ; <nl> + } <nl> + } ) ; <nl> return true ; <nl> <nl> default : <nl> @ @ - 125 , 17 + 131 , 19 @ @ public class ThreadFragment extends Fragment { <nl> public void run ( ) { <nl> / / Realm instances cannot be shared between threads , so we need to create a new <nl> / / instance on the background thread . <nl> - int redColor = getResources ( ) . getColor ( R . color . realm _ red ) ; <nl> - Realm backgroundThreadRealm = Realm . getDefaultInstance ( ) ; <nl> + final int redColor = getResources ( ) . getColor ( R . color . realm _ red ) ; <nl> + final Realm backgroundThreadRealm = Realm . getDefaultInstance ( ) ; <nl> while ( ! backgroundThread . isInterrupted ( ) ) { <nl> - backgroundThreadRealm . beginTransaction ( ) ; <nl> - <nl> - / / Add red dot from the background thread <nl> - Dot dot = backgroundThreadRealm . createObject ( Dot . class ) ; <nl> - dot . setX ( random . nextInt ( 100 ) ) ; <nl> - dot . setY ( random . nextInt ( 100 ) ) ; <nl> - dot . setColor ( redColor ) ; <nl> - backgroundThreadRealm . commitTransaction ( ) ; <nl> + backgroundThreadRealm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + / / Add red dot from the background thread <nl> + Dot dot = backgroundThreadRealm . createObject ( Dot . class ) ; <nl> + dot . setX ( random . nextInt ( 100 ) ) ; <nl> + dot . setY ( random . nextInt ( 100 ) ) ; <nl> + dot . setColor ( redColor ) ; <nl> + } <nl> + } ) ; <nl> <nl> / / Wait 0 . 5 sec . before adding the next dot . <nl> SystemClock . sleep ( 500 ) ; <nl> diff - - git a / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / ExampleActivity . java b / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / ExampleActivity . java <nl> index 757f0f5 . . ad9dec4 100644 <nl> - - - a / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / ExampleActivity . java <nl> + + + b / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / ExampleActivity . java <nl> @ @ - 85 , 9 + 85 , 12 @ @ public class ExampleActivity extends Activity { <nl> <nl> private void cleanUp ( ) { <nl> / / Delete all persons <nl> - realm . beginTransaction ( ) ; <nl> - realm . allObjects ( Person . class ) . deleteAllFromRealm ( ) ; <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . allObjects ( Person . class ) . deleteAllFromRealm ( ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 107 , 40 + 110 , 45 @ @ public class ExampleActivity extends Activity { <nl> showStatus ( " Perform basic Create / Read / Update / Delete ( CRUD ) operations . . . " ) ; <nl> <nl> / / All writes must be wrapped in a transaction to facilitate safe multi threading <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - / / Add a person <nl> - Person person = realm . createObject ( Person . class ) ; <nl> - person . setId ( 1 ) ; <nl> - person . setName ( " John Young " ) ; <nl> - person . setAge ( 14 ) ; <nl> - <nl> - / / When the transaction is committed , all changes a synced to disk . <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + / / Add a person <nl> + Person person = realm . createObject ( Person . class ) ; <nl> + person . setId ( 1 ) ; <nl> + person . setName ( " John Young " ) ; <nl> + person . setAge ( 14 ) ; <nl> + } <nl> + } ) ; <nl> <nl> / / Find the first person ( no query conditions ) and read a field <nl> - person = realm . where ( Person . class ) . findFirst ( ) ; <nl> + final Person person = realm . where ( Person . class ) . findFirst ( ) ; <nl> showStatus ( person . getName ( ) + " : " + person . getAge ( ) ) ; <nl> <nl> / / Update person in a transaction <nl> - realm . beginTransaction ( ) ; <nl> - person . setName ( " John Senior " ) ; <nl> - person . setAge ( 89 ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + person . setName ( " John Senior " ) ; <nl> + person . setAge ( 89 ) ; <nl> + } <nl> + } ) ; <nl> + <nl> showStatus ( person . getName ( ) + " got older : " + person . getAge ( ) ) ; <nl> - realm . commitTransaction ( ) ; <nl> <nl> / / Add two more people <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - Person jane = realm . createObject ( Person . class ) ; <nl> - jane . setName ( " Jane " ) ; <nl> - jane . setAge ( 27 ) ; <nl> - <nl> - Person doug = realm . createObject ( Person . class ) ; <nl> - doug . setName ( " Robert " ) ; <nl> - doug . setAge ( 42 ) ; <nl> - <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + Person jane = realm . createObject ( Person . class ) ; <nl> + jane . setName ( " Jane " ) ; <nl> + jane . setAge ( 27 ) ; <nl> + <nl> + Person doug = realm . createObject ( Person . class ) ; <nl> + doug . setName ( " Robert " ) ; <nl> + doug . setAge ( 42 ) ; <nl> + } <nl> + } ) ; <nl> <nl> RealmResults < Person > people = realm . where ( Person . class ) . findAll ( ) ; <nl> showStatus ( String . format ( " Found % s people " , people . size ( ) ) ) ; <nl> diff - - git a / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / repository / DogRepositoryImpl . java b / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / repository / DogRepositoryImpl . java <nl> index d9ba05e . . 60ff3b2 100644 <nl> - - - a / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / repository / DogRepositoryImpl . java <nl> + + + b / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / repository / DogRepositoryImpl . java <nl> @ @ - 22 , 12 + 22 , 15 @ @ import io . realm . examples . unittesting . model . Dog ; <nl> <nl> public class DogRepositoryImpl implements DogRepository { <nl> @ Override <nl> - public void createDog ( String name ) { <nl> + public void createDog ( final String name ) { <nl> Realm realm = Realm . getDefaultInstance ( ) ; <nl> - realm . beginTransaction ( ) ; <nl> - Dog dog = realm . createObject ( Dog . class ) ; <nl> - dog . setName ( name ) ; <nl> - realm . commitTransaction ( ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setName ( name ) ; <nl> + } <nl> + } ) ; <nl> realm . close ( ) ; <nl> } <nl> } <nl> diff - - git a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java <nl> index 1abe525 . . 104c041 100644 <nl> - - - a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java <nl> + + + b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import org . junit . Before ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> + import org . mockito . Mockito ; <nl> import org . powermock . core . classloader . annotations . PowerMockIgnore ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . rule . PowerMockRule ; <nl> @ @ - 30 , 7 + 31 , 6 @ @ import org . robolectric . RobolectricGradleTestRunner ; <nl> import org . robolectric . annotation . Config ; <nl> import org . robolectric . util . ActivityController ; <nl> <nl> - import java . lang . Exception ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> @ @ - 42 , 20 + 42 , 20 @ @ import io . realm . RealmResults ; <nl> import io . realm . examples . unittesting . model . Person ; <nl> import io . realm . internal . RealmCore ; <nl> <nl> - <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . mockito . Matchers . any ; <nl> import static org . mockito . Matchers . anyInt ; <nl> import static org . mockito . Matchers . anyString ; <nl> + import static org . mockito . Mockito . doCallRealMethod ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . mockito . Mockito . verify ; <nl> + import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mock ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> import static org . powermock . api . mockito . PowerMockito . whenNew ; <nl> - import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> <nl> @ RunWith ( RobolectricGradleTestRunner . class ) <nl> @ Config ( constants = BuildConfig . class , sdk = 21 ) <nl> @ @ - 167 , 6 + 167 , 8 @ @ public class ExampleActivityTest { <nl> <nl> @ Test <nl> public void shouldBeAbleToAccessActivityAndVerifyRealmInteractions ( ) { <nl> + doCallRealMethod ( ) . when ( mockRealm ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; <nl> + <nl> / / Create activity <nl> ActivityController < ExampleActivity > controller = <nl> Robolectric . buildActivity ( ExampleActivity . class ) . setup ( ) ; <nl> @ @ - 179 , 15 + 181 , 15 @ @ public class ExampleActivityTest { <nl> Realm . getInstance ( any ( RealmConfiguration . class ) ) ; <nl> <nl> / / verify that we have four begin and commit transaction calls <nl> - verify ( mockRealm , times ( 4 ) ) . beginTransaction ( ) ; <nl> - verify ( mockRealm , times ( 4 ) ) . commitTransaction ( ) ; <nl> + / / Do not verify partial mock invocation count : https : / / github . com / jayway / powermock / issues / 649 <nl> + / / verify ( mockRealm , times ( 4 ) ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; <nl> <nl> / / Click the clean up button <nl> activity . findViewById ( R . id . clean _ up ) . performClick ( ) ; <nl> <nl> / / Verify that begin and commit transaction were called ( been called a total of 5 times now ) <nl> - verify ( mockRealm , times ( 5 ) ) . beginTransaction ( ) ; <nl> - verify ( mockRealm , times ( 5 ) ) . commitTransaction ( ) ; <nl> + / / Do not verify partial mock invocation count : https : / / github . com / jayway / powermock / issues / 649 <nl> + / / verify ( mockRealm , times ( 5 ) ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; <nl> <nl> / / Verify that we queried for all Person instance two times in this run ( in the original <nl> / / onCreate , and then again in the button click ) . Was called two times previously in the <nl> @ @ - 206 , 6 + 208 , 44 @ @ public class ExampleActivityTest { <nl> verify ( mockRealm , times ( 2 ) ) . close ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Have to verify the transaction execution in a different test because <nl> + * of a problem with Powermock : https : / / github . com / jayway / powermock / issues / 649 <nl> + * / <nl> + @ Test <nl> + public void shouldBeAbleToVerifyTransactionCalls ( ) { <nl> + <nl> + / / Create activity <nl> + ActivityController < ExampleActivity > controller = <nl> + Robolectric . buildActivity ( ExampleActivity . class ) . setup ( ) ; <nl> + ExampleActivity activity = controller . get ( ) ; <nl> + <nl> + assertThat ( activity . getTitle ( ) . toString ( ) , is ( " Unit Test Example " ) ) ; <nl> + <nl> + / / Verify that two Realm . getInstance ( ) calls took place . <nl> + verifyStatic ( times ( 2 ) ) ; <nl> + Realm . getInstance ( any ( RealmConfiguration . class ) ) ; <nl> + <nl> + / / verify that we have four begin and commit transaction calls <nl> + / / Do not verify partial mock invocation count : https : / / github . com / jayway / powermock / issues / 649 <nl> + verify ( mockRealm , times ( 4 ) ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; <nl> + <nl> + / / Click the clean up button <nl> + activity . findViewById ( R . id . clean _ up ) . performClick ( ) ; <nl> + <nl> + / / Verify that begin and commit transaction were called ( been called a total of 5 times now ) <nl> + / / Do not verify partial mock invocation count : https : / / github . com / jayway / powermock / issues / 649 <nl> + verify ( mockRealm , times ( 5 ) ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; <nl> + <nl> + / / Call the destroy method so we can verify that the . close ( ) method was called ( below ) <nl> + controller . destroy ( ) ; <nl> + <nl> + / / Verify that the realm got closed 2 separate times . Once in the AsyncTask , once <nl> + / / in onDestroy <nl> + verify ( mockRealm , times ( 2 ) ) . close ( ) ; <nl> + } <nl> + <nl> + <nl> @ SuppressWarnings ( " unchecked " ) <nl> private < T extends RealmObject > RealmQuery < T > mockRealmQuery ( ) { <nl> return mock ( RealmQuery . class ) ; <nl> diff - - git a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleRealmTest . java b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleRealmTest . java <nl> index 8aef626 . . e7be410 100644 <nl> - - - a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleRealmTest . java <nl> + + + b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleRealmTest . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import static org . junit . Assert . assertThat ; <nl> import static org . mockito . Mockito . mock ; <nl> import static org . mockito . Mockito . verify ; <nl> import static org . mockito . internal . verification . VerificationModeFactory . times ; <nl> + import static org . powermock . api . mockito . PowerMockito . doCallRealMethod ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> @ @ - 91 , 7 + 92 , 9 @ @ public class ExampleRealmTest { <nl> * This test verifies the behavior in the { @ link DogRepositoryImpl } class . <nl> * / <nl> @ Test <nl> - public void shouldVerifyTransactionWasCreated ( ) { <nl> + public void shouldVerifyThatDogWasCreated ( ) { <nl> + <nl> + doCallRealMethod ( ) . when ( mockRealm ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; <nl> <nl> Dog dog = mock ( Dog . class ) ; <nl> when ( mockRealm . createObject ( Dog . class ) ) . thenReturn ( dog ) ; <nl> @ @ - 99 , 8 + 102 , 12 @ @ public class ExampleRealmTest { <nl> DogRepository dogRepo = new DogRepositoryImpl ( ) ; <nl> dogRepo . createDog ( " Spot " ) ; <nl> <nl> - / / Verify that the begin transaction was called only once <nl> - verify ( mockRealm , times ( 1 ) ) . beginTransaction ( ) ; <nl> + / / Attempting to verify that a method was called ( executeTransaction ) on a partial <nl> + / / mock will return unexpected resultes due to the partial mock . For example , <nl> + / / verifying that ` executeTransaction ` was called only once will fail as Powermock <nl> + / / actually calls the method 3 times for some reason . I cannot determine why at this <nl> + / / point . <nl> + <nl> <nl> / / Verify that Realm # createObject was called only once <nl> verify ( mockRealm , times ( 1 ) ) . createObject ( Dog . class ) ; / / Verify that a Dog was in fact created . <nl> @ @ - 108 , 8 + 115 , 22 @ @ public class ExampleRealmTest { <nl> / / Verify that Dog # setName ( ) is called only once <nl> verify ( dog , times ( 1 ) ) . setName ( Mockito . anyString ( ) ) ; / / Any string will do <nl> <nl> - / / Verify that the transaction was committed only once <nl> - verify ( mockRealm , times ( 1 ) ) . commitTransaction ( ) ; <nl> + / / Verify that the Realm was closed only once . <nl> + verify ( mockRealm , times ( 1 ) ) . close ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Have to verify the { @ link Realm # executeTransaction ( Realm . Transaction ) } call in a different <nl> + * test because of a problem with Powermock : https : / / github . com / jayway / powermock / issues / 649 <nl> + * / <nl> + @ Test <nl> + public void shouldVerifyThatTransactionWasExecuted ( ) { <nl> + <nl> + DogRepository dogRepo = new DogRepositoryImpl ( ) ; <nl> + dogRepo . createDog ( " Spot " ) ; <nl> + <nl> + / / Verify that the begin transaction was called only once <nl> + verify ( mockRealm , times ( 1 ) ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; <nl> <nl> / / Verify that the Realm was closed only once . <nl> verify ( mockRealm , times ( 1 ) ) . close ( ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index c8926b4 . . 22e5a80 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 57 , 7 + 57 , 7 @ @ import rx . Observable ; <nl> / * * <nl> * The Realm class is the storage and transactional manager of your object persistent store . It is in charge of creating <nl> * instances of your RealmObjects . Objects within a Realm can be queried and read at any time . Creating , modifying , and <nl> - * deleting objects must be done while inside a transaction . See { @ link # beginTransaction ( ) } <nl> + * deleting objects must be done while inside a transaction . See { @ link # executeTransaction ( Transaction ) } <nl> * < p > <nl> * The transactions ensure that multiple instances ( on multiple threads ) can access the same objects in a consistent <nl> * state with full ACID guarantees . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 43dd87c . . 8b15469 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 65 , 7 + 65 , 7 @ @ import rx . Observable ; <nl> * @ param < E > The class of objects in this list . <nl> * @ see RealmQuery # findAll ( ) <nl> * @ see Realm # allObjects ( Class ) <nl> - * @ see io . realm . Realm # beginTransaction ( ) <nl> + * @ see io . realm . Realm # executeTransaction ( Realm . Transaction ) <nl> * / <nl> public final class RealmResults < E extends RealmModel > extends AbstractList < E > implements OrderedRealmCollection < E > { <nl>
NEAREST DIFF (one line): diff - - git a / examples / concurrencyExample / build . gradle b / examples / concurrencyExample / build . gradle <nl> index fa5e003 . . 7d080b3 100644 <nl> - - - a / examples / concurrencyExample / build . gradle <nl> + + + b / examples / concurrencyExample / build . gradle <nl> @ @ - 13 , 9 + 13 , 8 @ @ apply plugin : ' android - apt ' <nl> android { <nl> compileSdkVersion 19 <nl> buildToolsVersion " 20 . 0 . 0 " <nl> - <nl> defaultConfig { <nl> - applicationId " examples . realm . io . concurrency " <nl> + applicationId ' examples . realm . io . concurrencyExample ' <nl> minSdkVersion 15 <nl> targetSdkVersion 19 <nl> versionCode 1 <nl> @ @ - 27 , 6 + 26 , 8 @ @ android { <nl> / / proguardFiles getDefaultProguardFile ( ' proguard - android . txt ' ) , ' proguard - rules . pro ' <nl> } <nl> } <nl> + productFlavors { <nl> + } <nl> } <nl> <nl> task buildApt ( type : GradleBuild ) { <nl> diff - - git a / examples / encryptionExample / build . gradle b / examples / encryptionExample / build . gradle <nl> index 1ec668f . . 70a58a8 100644 <nl> - - - a / examples / encryptionExample / build . gradle <nl> + + + b / examples / encryptionExample / build . gradle <nl> @ @ - 14 , 7 + 14 , 7 @ @ android { <nl> compileSdkVersion 19 <nl> buildToolsVersion ' 20 . 0 . 0 ' <nl> defaultConfig { <nl> - applicationId ' examples . realm . io . encryption ' <nl> + applicationId ' examples . realm . io . encryptionExample ' <nl> minSdkVersion 19 <nl> targetSdkVersion 19 <nl> versionCode 1 <nl> @ @ - 30 , 6 + 30 , 8 @ @ android { <nl> / / proguardFiles getDefaultProguardFile ( ' proguard - android . txt ' ) , ' proguard - rules . pro ' <nl> } <nl> } <nl> + productFlavors { <nl> + } <nl> } <nl> <nl> task buildApt ( type : GradleBuild ) { <nl> diff - - git a / examples / gridViewExample / build . gradle b / examples / gridViewExample / build . gradle <nl> index 82bfbef . . f87635b 100644 <nl> - - - a / examples / gridViewExample / build . gradle <nl> + + + b / examples / gridViewExample / build . gradle <nl> @ @ - 13 , 9 + 13 , 8 @ @ apply plugin : ' android - apt ' <nl> android { <nl> compileSdkVersion 19 <nl> buildToolsVersion " 20 . 0 . 0 " <nl> - <nl> defaultConfig { <nl> - applicationId " examples . realm . io . intro " <nl> + applicationId ' examples . realm . io . gridViewExample ' <nl> minSdkVersion 15 <nl> targetSdkVersion 19 <nl> versionCode 1 <nl> @ @ - 27 , 6 + 26 , 8 @ @ android { <nl> / / proguardFiles getDefaultProguardFile ( ' proguard - android . txt ' ) , ' proguard - rules . pro ' <nl> } <nl> } <nl> + productFlavors { <nl> + } <nl> } <nl> <nl> task buildApt ( type : GradleBuild ) { <nl> diff - - git a / examples / introExample / build . gradle b / examples / introExample / build . gradle <nl> index 1ef80dd . . 8460630 100644 <nl> - - - a / examples / introExample / build . gradle <nl> + + + b / examples / introExample / build . gradle <nl> @ @ - 13 , 9 + 13 , 8 @ @ apply plugin : ' android - apt ' <nl> android { <nl> compileSdkVersion 19 <nl> buildToolsVersion " 20 . 0 . 0 " <nl> - <nl> defaultConfig { <nl> - applicationId " examples . realm . io . gridview " <nl> + applicationId ' examples . realm . io . introExample ' <nl> minSdkVersion 15 <nl> targetSdkVersion 19 <nl> versionCode 1 <nl> @ @ - 27 , 6 + 26 , 8 @ @ android { <nl> / / proguardFiles getDefaultProguardFile ( ' proguard - android . txt ' ) , ' proguard - rules . pro ' <nl> } <nl> } <nl> + productFlavors { <nl> + } <nl> } <nl> <nl> task buildApt ( type : GradleBuild ) { <nl> diff - - git a / examples / introExample / src / main / AndroidManifest . xml b / examples / introExample / src / main / AndroidManifest . xml <nl> index a3c5fdc . . b9d26d4 100644 <nl> - - - a / examples / introExample / src / main / AndroidManifest . xml <nl> + + + b / examples / introExample / src / main / AndroidManifest . xml <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> < ? xml version = " 1 . 0 " encoding = " utf - 8 " ? > <nl> < manifest xmlns : android = " http : / / schemas . android . com / apk / res / android " <nl> - package = " io . realm . examples . realmintroexample " > <nl> + package = " io . realm . examples . intro " > <nl> <nl> < application <nl> android : allowBackup = " true " <nl> @ @ - 8 , 7 + 8 , 7 @ @ <nl> android : label = " @ string / app _ name " <nl> android : theme = " @ style / AppTheme " > <nl> < activity <nl> - android : name = " . RealmIntroExampleActivity " <nl> + android : name = " io . realm . examples . intro . RealmIntroExampleActivity " <nl> android : label = " @ string / app _ name " > <nl> < intent - filter > <nl> < action android : name = " android . intent . action . MAIN " / > <nl> diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / RealmIntroExampleActivity . java b / examples / introExample / src / main / java / io / realm / examples / intro / RealmIntroExampleActivity . java <nl> new file mode 100644 <nl> index 0000000 . . 469b134 <nl> - - - / dev / null <nl> + + + b / examples / introExample / src / main / java / io / realm / examples / intro / RealmIntroExampleActivity . java <nl> @ @ - 0 , 0 + 1 , 195 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . examples . intro ; <nl> + <nl> + import android . app . Activity ; <nl> + import android . os . AsyncTask ; <nl> + import android . os . Bundle ; <nl> + import android . util . Log ; <nl> + import android . widget . LinearLayout ; <nl> + import android . widget . TextView ; <nl> + <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmResults ; <nl> + import io . realm . examples . intro . model . Cat ; <nl> + import io . realm . examples . intro . model . Dog ; <nl> + import io . realm . examples . intro . model . Person ; <nl> + <nl> + <nl> + public class RealmIntroExampleActivity extends Activity { <nl> + <nl> + private void realmExamples ( ) { <nl> + <nl> + / / These operations are small enough that <nl> + / / we can generally safely run them on the UI thread . <nl> + <nl> + / / Open the default realm ones for the UI thread . <nl> + Realm realm = Realm . getInstance ( this ) ; <nl> + <nl> + basicCRUD ( realm ) ; <nl> + basicQuery ( realm ) ; <nl> + <nl> + / / More complex operations can be executed on another thread . <nl> + new AsyncTask < Void , Void , String > ( ) { <nl> + @ Override <nl> + protected String doInBackground ( Void . . . voids ) { <nl> + String info = null ; <nl> + info = complexReadWrite ( ) ; <nl> + info + = complexQuery ( ) ; <nl> + return info ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void onPostExecute ( String result ) { <nl> + showStatus ( result ) ; <nl> + } <nl> + } . execute ( ) ; <nl> + <nl> + } <nl> + <nl> + private void basicCRUD ( Realm realm ) { <nl> + showStatus ( " Perform basic Create / Read / Update / Delete ( CRUD ) operations . . . " ) ; <nl> + <nl> + / / All writes must be wrapped in a transaction to facilitate safe multi threading <nl> + realm . beginTransaction ( ) ; <nl> + <nl> + / / Add a person <nl> + Person person = realm . createObject ( Person . class ) ; <nl> + person . setName ( " Young Person " ) ; <nl> + person . setAge ( 14 ) ; <nl> + <nl> + / / When the write transaction is committed , all changes a synced to disk . <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + / / Find the first person ( no query conditions ) and read a field <nl> + person = realm . where ( Person . class ) . findFirst ( ) ; <nl> + showStatus ( person . getName ( ) + " : " + person . getAge ( ) ) ; <nl> + <nl> + / / Update person in a write transaction <nl> + realm . beginTransaction ( ) ; <nl> + person . setName ( " Senior Person " ) ; <nl> + person . setAge ( 99 ) ; <nl> + showStatus ( person . getName ( ) + " got older : " + person . getAge ( ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + / / Delete all persons <nl> + realm . beginTransaction ( ) ; <nl> + realm . allObjects ( Person . class ) . clear ( ) ; <nl> + realm . commitTransaction ( ) ; <nl> + } <nl> + <nl> + private void basicQuery ( Realm realm ) { <nl> + showStatus ( " \ nPerforming basic Query operation . . . " ) ; <nl> + showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; <nl> + <nl> + RealmResults < Person > results = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; <nl> + <nl> + showStatus ( " Size of result set : " + results . size ( ) ) ; <nl> + } <nl> + <nl> + <nl> + private String complexReadWrite ( ) { <nl> + String status = " \ nPerforming complex Read / Write operation . . . " ; <nl> + <nl> + / / Open the default realm . All threads must use it ' s own reference to the realm . <nl> + / / Those can not be transferred across threads . <nl> + Realm realm = Realm . getInstance ( this ) ; <nl> + <nl> + / / Add ten persons in one write transaction <nl> + realm . beginTransaction ( ) ; <nl> + Dog fido = realm . createObject ( Dog . class ) ; <nl> + fido . setName ( " fido " ) ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + Person person = realm . createObject ( Person . class ) ; <nl> + person . setName ( " Person no . " + i ) ; <nl> + person . setAge ( i ) ; <nl> + person . setDog ( fido ) ; <nl> + <nl> + / / The field tempReference is annotated with @ Ignore . <nl> + / / This means setTempReference sets the Person tempReference <nl> + / / field directly . The tempReference is NOT saved as part of <nl> + / / the RealmObject : <nl> + person . setTempReference ( 42 ) ; <nl> + <nl> + for ( int j = 0 ; j < i ; j + + ) { <nl> + Cat cat = realm . createObject ( Cat . class ) ; <nl> + cat . setName ( " Cat _ " + j ) ; <nl> + person . getCats ( ) . add ( cat ) ; <nl> + } <nl> + } <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + / / Implicit read transactions allow you to access your objects <nl> + status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; <nl> + <nl> + / / Iterate over all objects <nl> + for ( Person pers : realm . allObjects ( Person . class ) ) { <nl> + String dogName ; <nl> + if ( pers . getDog ( ) = = null ) { <nl> + dogName = " None " ; <nl> + } else { <nl> + dogName = pers . getDog ( ) . getName ( ) ; <nl> + } <nl> + status + = " \ n " + pers . getName ( ) + " : " + pers . getAge ( ) + " : " + dogName + " : " + pers . getCats ( ) . size ( ) ; <nl> + <nl> + / / The field tempReference is annotated with @ Ignore <nl> + / / Though we initially set its value to 42 , it has <nl> + / / not been saved as part of the Person RealmObject : <nl> + assert ( pers . getTempReference ( ) = = 0 ) ; <nl> + } <nl> + <nl> + return status ; <nl> + } <nl> + <nl> + private String complexQuery ( ) { <nl> + String status = " \ n \ nPerforming complex Query operation . . . " ; <nl> + <nl> + Realm realm = Realm . getInstance ( this ) ; <nl> + status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; <nl> + <nl> + / / Find all persons where age between 7 and 9 and name begins with " Person " . <nl> + RealmResults < Person > results = realm . where ( Person . class ) <nl> + . between ( " age " , 7 , 9 ) / / Notice implicit " and " operation <nl> + . beginsWith ( " name " , " Person " ) . findAll ( ) ; <nl> + status + = " \ nSize of result set : " + results . size ( ) ; <nl> + return status ; <nl> + } <nl> + <nl> + <nl> + / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + / / Non Realm <nl> + <nl> + public static final String TAG = RealmIntroExampleActivity . class . getName ( ) ; <nl> + private LinearLayout rootLayout = null ; <nl> + <nl> + @ Override <nl> + protected void onCreate ( Bundle savedInstanceState ) { <nl> + super . onCreate ( savedInstanceState ) ; <nl> + setContentView ( R . layout . activity _ realm _ basic _ example ) ; <nl> + rootLayout = ( ( LinearLayout ) findViewById ( R . id . container ) ) ; <nl> + rootLayout . removeAllViews ( ) ; <nl> + <nl> + realmExamples ( ) ; <nl> + } <nl> + <nl> + private void showStatus ( String txt ) { <nl> + Log . i ( TAG , txt ) ; <nl> + TextView tv = new TextView ( this ) ; <nl> + tv . setText ( txt ) ; <nl> + rootLayout . addView ( tv ) ; <nl> + } <nl> + } <nl> diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / model / Cat . java b / examples / introExample / src / main / java / io / realm / examples / intro / model / Cat . java <nl> new file mode 100644 <nl> index 0000000 . . 6488037 <nl> - - - / dev / null <nl> + + + b / examples / introExample / src / main / java / io / realm / examples / intro / model / Cat . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . examples . intro . model ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + <nl> + public class Cat extends RealmObject { <nl> + private String name ; <nl> + <nl> + public String getName ( ) { <nl> + return name ; <nl> + } <nl> + <nl> + public void setName ( String name ) { <nl> + this . name = name ; <nl> + } <nl> + } <nl> diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / model / Dog . java b / examples / introExample / src / main / java / io / realm / examples / intro / model / Dog . java <nl> new file mode 100644 <nl> index 0000000 . . 8701f1d <nl> - - - / dev / null <nl> + + + b / examples / introExample / src / main / java / io / realm / examples / intro / model / Dog . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . examples . intro . model ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + <nl> + public class Dog extends RealmObject { <nl> + private String name ; <nl> + <nl> + public String getName ( ) { <nl> + return name ; <nl> + } <nl> + <nl> + public void setName ( String name ) { <nl> + this . name = name ; <nl> + } <nl> + } <nl> diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / model / Person . java b / examples / introExample / src / main / java / io / realm / examples / intro / model / Person . java <nl> new file mode 100644 <nl> index 0000000 . . e971744 <nl> - - - / dev / null <nl> + + + b / examples / introExample / src / main / java / io / realm / examples / intro / model / Person . java <nl> @ @ - 0 , 0 + 1 , 85 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . examples . intro . model ; <nl> + <nl> + import io . realm . RealmList ; <nl> + import io . realm . RealmObject ; <nl> + import io . realm . annotations . Ignore ; <nl> + <nl> + / / Your model just have to extend RealmObject . <nl> + / / This will inherit an annotation which produces proxy getters and setters for all fields . <nl> + <nl> + public class Person extends RealmObject { <nl> + <nl> + / / All fields are by default persisted . <nl> + private String name ; <nl> + private int age ; <nl> + <nl> + / / Other objects in a one - to - one relation must also subclass RealmObject <nl> + private Dog dog ; <nl> + <nl> + / / One - to - many relations is simply a RealmList of the objects which also subclass RealmObject <nl> + private RealmList < Cat > cats ; <nl> + <nl> + / / You can instruct Realm to ignore a field and not persist it . <nl> + @ Ignore <nl> + private int tempReference ; <nl> + <nl> + / / The standard getters and setters your IDE generates are fine . <nl> + / / Realm will overload them and code inside them is ignored . <nl> + / / So if you prefer you can also just have empty abstract methods . <nl> + <nl> + public String getName ( ) { <nl> + return name ; <nl> + } <nl> + <nl> + public void setName ( String name ) { <nl> + this . name = name ; <nl> + } <nl> + <nl> + public int getAge ( ) { <nl> + return age ; <nl> + } <nl> + <nl> + public void setAge ( int age ) { <nl> + this . age = age ; <nl> + } <nl> + <nl> + public Dog getDog ( ) { <nl> + return dog ; <nl> + } <nl> + <nl> + public void setDog ( Dog dog ) { <nl> + this . dog = dog ; <nl> + } <nl> + <nl> + public RealmList < Cat > getCats ( ) { <nl> + return cats ; <nl> + } <nl> + <nl> + public void setCats ( RealmList < Cat > cats ) { <nl> + this . cats = cats ; <nl> + } <nl> + <nl> + public int getTempReference ( ) { <nl> + return tempReference ; <nl> + } <nl> + <nl> + public void setTempReference ( int tempReference ) { <nl> + this . tempReference = tempReference ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java b / examples / introExample / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java <nl> deleted file mode 100644 <nl> index 988d560 . . 0000000 <nl> - - - a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java <nl> + + + / dev / null <nl> @ @ - 1 , 199 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . examples . realmintroexample ; <nl> - <nl> - import android . app . Activity ; <nl> - import android . os . AsyncTask ; <nl> - import android . os . Bundle ; <nl> - import android . util . Log ; <nl> - import android . widget . LinearLayout ; <nl> - import android . widget . TextView ; <nl> - <nl> - import java . io . IOException ; <nl> - <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . examples . realmintroexample . model . Cat ; <nl> - import io . realm . examples . realmintroexample . model . Dog ; <nl> - import io . realm . examples . realmintroexample . model . Person ; <nl> - <nl> - <nl> - public class RealmIntroExampleActivity extends Activity { <nl> - <nl> - public static final String TAG = RealmIntroExampleActivity . class . getName ( ) ; <nl> - <nl> - private LinearLayout rootLayout = null ; <nl> - <nl> - @ Override <nl> - protected void onCreate ( Bundle savedInstanceState ) { <nl> - super . onCreate ( savedInstanceState ) ; <nl> - setContentView ( R . layout . activity _ realm _ basic _ example ) ; <nl> - <nl> - rootLayout = ( ( LinearLayout ) findViewById ( R . id . container ) ) ; <nl> - rootLayout . removeAllViews ( ) ; <nl> - <nl> - try { <nl> - / / These operations are small enough that <nl> - / / we can generally safely run them on the UI thread . <nl> - basicReadWrite ( ) ; <nl> - basicUpdate ( ) ; <nl> - basicQuery ( ) ; <nl> - } catch ( IOException e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - <nl> - / / More complex operations should not be <nl> - / / executed on the UI thread . <nl> - new AsyncTask < Void , Void , String > ( ) { <nl> - @ Override <nl> - protected String doInBackground ( Void . . . voids ) { <nl> - String info = null ; <nl> - try { <nl> - info = complexReadWrite ( ) ; <nl> - info + = complexQuery ( ) ; <nl> - } catch ( IOException e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - return info ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void onPostExecute ( String result ) { <nl> - showStatus ( result ) ; <nl> - } <nl> - } . execute ( ) ; <nl> - } <nl> - <nl> - private void basicReadWrite ( ) throws IOException { <nl> - showStatus ( " Performing basic Read / Write operation . . . " ) ; <nl> - <nl> - / / Open a default realm <nl> - Realm realm = Realm . getInstance ( this ) ; <nl> - <nl> - / / Add a person in a write transaction <nl> - realm . beginTransaction ( ) ; <nl> - Person person = realm . createObject ( Person . class ) ; <nl> - person . setName ( " Happy Person " ) ; <nl> - person . setAge ( 14 ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - / / Find first person <nl> - person = realm . where ( Person . class ) . findFirst ( ) ; <nl> - showStatus ( person . getName ( ) + " : " + person . getAge ( ) ) ; <nl> - } <nl> - <nl> - private void basicQuery ( ) throws IOException { <nl> - showStatus ( " \ nPerforming basic Query operation . . . " ) ; <nl> - <nl> - Realm realm = Realm . getInstance ( this ) ; <nl> - showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; <nl> - RealmResults < Person > results = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; <nl> - showStatus ( " Size of result set : " + results . size ( ) ) ; <nl> - } <nl> - <nl> - private void basicUpdate ( ) throws IOException { <nl> - showStatus ( " \ nPerforming basic Update operation . . . " ) ; <nl> - <nl> - / / Open a default realm <nl> - Realm realm = Realm . getInstance ( this ) ; <nl> - <nl> - / / Get the first object <nl> - Person person = realm . where ( Person . class ) . findFirst ( ) ; <nl> - <nl> - / / Update person in a write transaction <nl> - realm . beginTransaction ( ) ; <nl> - person . setName ( " Senior Person " ) ; <nl> - person . setAge ( 99 ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - showStatus ( person . getName ( ) + " : " + person . getAge ( ) ) ; <nl> - } <nl> - <nl> - private void showStatus ( String txt ) { <nl> - Log . i ( TAG , txt ) ; <nl> - TextView tv = new TextView ( this ) ; <nl> - tv . setText ( txt ) ; <nl> - rootLayout . addView ( tv ) ; <nl> - } <nl> - <nl> - private String complexReadWrite ( ) throws IOException { <nl> - String status = " \ nPerforming complex Read / Write operation . . . " ; <nl> - <nl> - / / Open a default realm <nl> - Realm realm = Realm . getInstance ( this ) ; <nl> - <nl> - / / Add ten persons in one write transaction <nl> - realm . beginTransaction ( ) ; <nl> - Dog fido = realm . createObject ( Dog . class ) ; <nl> - fido . setName ( " fido " ) ; <nl> - for ( int i = 0 ; i < 10 ; i + + ) { <nl> - Person person = realm . createObject ( Person . class ) ; <nl> - person . setName ( " Person no . " + i ) ; <nl> - person . setAge ( i ) ; <nl> - person . setDog ( fido ) ; <nl> - <nl> - / / The field tempReference is annotated with @ Ignore . <nl> - / / This means setTempReference sets the Person tempReference <nl> - / / field directly . The tempReference is NOT saved as part of <nl> - / / the RealmObject : <nl> - person . setTempReference ( 42 ) ; <nl> - <nl> - for ( int j = 0 ; j < i ; j + + ) { <nl> - Cat cat = realm . createObject ( Cat . class ) ; <nl> - cat . setName ( " Cat _ " + j ) ; <nl> - person . getCats ( ) . add ( cat ) ; <nl> - } <nl> - } <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - / / Implicit read transactions allow you to access your objects <nl> - status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; <nl> - <nl> - / / Iterate over all objects <nl> - for ( Person pers : realm . allObjects ( Person . class ) ) { <nl> - String dogName ; <nl> - if ( pers . getDog ( ) = = null ) { <nl> - dogName = " None " ; <nl> - } else { <nl> - dogName = pers . getDog ( ) . getName ( ) ; <nl> - } <nl> - status + = " \ n " + pers . getName ( ) + " : " + pers . getAge ( ) + " : " + dogName + " : " + pers . getCats ( ) . size ( ) ; <nl> - <nl> - / / The field tempReference is annotated with @ Ignore <nl> - / / Though we initially set its value to 42 , it has <nl> - / / not been saved as part of the Person RealmObject : <nl> - assert ( pers . getTempReference ( ) = = 0 ) ; <nl> - <nl> - } <nl> - <nl> - return status ; <nl> - } <nl> - <nl> - private String complexQuery ( ) throws IOException { <nl> - String status = " \ n \ nPerforming complex Query operation . . . " ; <nl> - <nl> - Realm realm = Realm . getInstance ( this ) ; <nl> - status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; <nl> - <nl> - / / Find all persons where age between 7 and 9 and name begins with " Person " . <nl> - RealmResults < Person > results = realm . where ( Person . class ) <nl> - . between ( " age " , 7 , 9 ) / / Notice implicit " and " operation <nl> - . beginsWith ( " name " , " Person " ) . findAll ( ) ; <nl> - status + = " \ nSize of result set : " + results . size ( ) ; <nl> - return status ; <nl> - } <nl> - } <nl> diff - - git a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Cat . java b / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Cat . java <nl> deleted file mode 100644 <nl> index eec3726 . . 0000000 <nl> - - - a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Cat . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . examples . realmintroexample . model ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - <nl> - public class Cat extends RealmObject { <nl> - private String name ; <nl> - <nl> - public String getName ( ) { <nl> - return name ; <nl> - } <nl> - <nl> - public void setName ( String name ) { <nl> - this . name = name ; <nl> - } <nl> - } <nl> diff - - git a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Dog . java b / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Dog . java <nl> deleted file mode 100644 <nl> index 1c6d9e4 . . 0000000 <nl> - - - a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Dog . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . examples . realmintroexample . model ; <nl> - <nl> - import io . realm . RealmObject ; <nl> - <nl> - public class Dog extends RealmObject { <nl> - private String name ; <nl> - <nl> - public String getName ( ) { <nl> - return name ; <nl> - } <nl> - <nl> - public void setName ( String name ) { <nl> - this . name = name ; <nl> - } <nl> - } <nl> diff - - git a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Person . java b / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> deleted file mode 100644 <nl> index 99b758c . . 0000000 <nl> - - - a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> + + + / dev / null <nl> @ @ - 1 , 74 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . examples . realmintroexample . model ; <nl> - <nl> - import io . realm . RealmList ; <nl> - import io . realm . RealmObject ; <nl> - import io . realm . annotations . Ignore ; <nl> - <nl> - public class Person extends RealmObject { <nl> - <nl> - private String name ; <nl> - private int age ; <nl> - private Dog dog ; <nl> - private RealmList < Cat > cats ; <nl> - <nl> - @ Ignore <nl> - private int tempReference ; <nl> - <nl> - public String getName ( ) { <nl> - return name ; <nl> - } <nl> - <nl> - public void setName ( String name ) { <nl> - this . name = name ; <nl> - } <nl> - <nl> - public int getAge ( ) { <nl> - return age ; <nl> - } <nl> - <nl> - public void setAge ( int age ) { <nl> - this . age = age ; <nl> - } <nl> - <nl> - public Dog getDog ( ) { <nl> - return dog ; <nl> - } <nl> - <nl> - public void setDog ( Dog dog ) { <nl> - this . dog = dog ; <nl> - } <nl> - <nl> - public RealmList < Cat > getCats ( ) { <nl> - return cats ; <nl> - } <nl> - <nl> - public void setCats ( RealmList < Cat > cats ) { <nl> - this . cats = cats ; <nl> - } <nl> - <nl> - public int getTempReference ( ) { <nl> - return tempReference ; <nl> - } <nl> - <nl> - public void setTempReference ( int tempReference ) { <nl> - this . tempReference = tempReference ; <nl> - } <nl> - <nl> - <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / examples / performance / build . gradle b / examples / performance / build . gradle <nl> index 548fb0d . . 66de262 100644 <nl> - - - a / examples / performance / build . gradle <nl> + + + b / examples / performance / build . gradle <nl> @ @ - 13 , 9 + 13 , 8 @ @ apply plugin : ' android - apt ' <nl> android { <nl> compileSdkVersion 19 <nl> buildToolsVersion " 20 . 0 . 0 " <nl> - <nl> defaultConfig { <nl> - applicationId " performance . realm . io . performance " <nl> + applicationId ' examples . realm . io . performance ' <nl> minSdkVersion 15 <nl> targetSdkVersion 19 <nl> versionCode 1 <nl> @ @ - 27 , 6 + 26 , 8 @ @ android { <nl> / / proguardFiles getDefaultProguardFile ( ' proguard - android . txt ' ) , ' proguard - rules . pro ' <nl> } <nl> } <nl> + productFlavors { <nl> + } <nl> } <nl> <nl> task buildApt ( type : GradleBuild ) {

TEST DIFF:
diff - - git a / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java b / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java 
 index 7b70163 . . edf66fd 100644 
 - - - a / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java 
 + + + b / examples / encryptionExample / src / main / java / io / realm / examples / encryptionexample / EncryptionExampleActivity . java 
 @ @ - 53 , 13 + 53 , 16 @ @ public class EncryptionExampleActivity extends Activity { 
 realm = Realm . getInstance ( realmConfiguration ) ; 
 
 / / Everything continues to work as normal except for that the file is encrypted on disk 
 - realm . beginTransaction ( ) ; 
 - Person person = realm . createObject ( Person . class ) ; 
 - person . setName ( " Happy Person " ) ; 
 - person . setAge ( 14 ) ; 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + Person person = realm . createObject ( Person . class ) ; 
 + person . setName ( " Happy Person " ) ; 
 + person . setAge ( 14 ) ; 
 + } 
 + } ) ; 
 
 - person = realm . where ( Person . class ) . findFirst ( ) ; 
 + Person person = realm . where ( Person . class ) . findFirst ( ) ; 
 Log . i ( TAG , String . format ( " Person name : % s " , person . getName ( ) ) ) ; 
 } 
 
 diff - - git a / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java b / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java 
 index c308278 . . 759b451 100644 
 - - - a / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java 
 + + + b / examples / gridViewExample / src / main / java / io / realm / examples / realmgridview / GridViewExampleActivity . java 
 @ @ - 129 , 12 + 129 , 15 @ @ public class GridViewExampleActivity extends Activity implements AdapterView . OnI 
 City modifiedCity = ( City ) mAdapter . getItem ( position ) ; 
 
 / / Acquire the RealmObject matching the name of the clicked City . 
 - City city = realm . where ( City . class ) . equalTo ( " name " , modifiedCity . getName ( ) ) . findFirst ( ) ; 
 + final City city = realm . where ( City . class ) . equalTo ( " name " , modifiedCity . getName ( ) ) . findFirst ( ) ; 
 
 / / Create a transaction to increment the vote count for the selected City in the realm 
 - realm . beginTransaction ( ) ; 
 - city . setVotes ( city . getVotes ( ) + 1 ) ; 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + city . setVotes ( city . getVotes ( ) + 1 ) ; 
 + } 
 + } ) ; 
 
 updateCities ( ) ; 
 } 
 diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java b / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java 
 index 13f6b1b . . 15b420b 100644 
 - - - a / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java 
 + + + b / examples / introExample / src / main / java / io / realm / examples / intro / IntroExampleActivity . java 
 @ @ - 92 , 32 + 92 , 40 @ @ public class IntroExampleActivity extends Activity { 
 showStatus ( " Perform basic Create / Read / Update / Delete ( CRUD ) operations . . . " ) ; 
 
 / / All writes must be wrapped in a transaction to facilitate safe multi threading 
 - realm . beginTransaction ( ) ; 
 - 
 - / / Add a person 
 - Person person = realm . createObject ( Person . class ) ; 
 - person . setId ( 1 ) ; 
 - person . setName ( " Young Person " ) ; 
 - person . setAge ( 14 ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + / / Add a person 
 + Person person = realm . createObject ( Person . class ) ; 
 + person . setId ( 1 ) ; 
 + person . setName ( " Young Person " ) ; 
 + person . setAge ( 14 ) ; 
 
 - / / When the transaction is committed , all changes a synced to disk . 
 - realm . commitTransaction ( ) ; 
 + } 
 + } ) ; 
 
 / / Find the first person ( no query conditions ) and read a field 
 - person = realm . where ( Person . class ) . findFirst ( ) ; 
 + final Person person = realm . where ( Person . class ) . findFirst ( ) ; 
 showStatus ( person . getName ( ) + " : " + person . getAge ( ) ) ; 
 
 / / Update person in a transaction 
 - realm . beginTransaction ( ) ; 
 - person . setName ( " Senior Person " ) ; 
 - person . setAge ( 99 ) ; 
 - showStatus ( person . getName ( ) + " got older : " + person . getAge ( ) ) ; 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + person . setName ( " Senior Person " ) ; 
 + person . setAge ( 99 ) ; 
 + showStatus ( person . getName ( ) + " got older : " + person . getAge ( ) ) ; 
 + realm . commitTransaction ( ) ; 
 + } 
 + } ) ; 
 
 / / Delete all persons 
 - realm . beginTransaction ( ) ; 
 - realm . allObjects ( Person . class ) . deleteAllFromRealm ( ) ; 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . allObjects ( Person . class ) . deleteAllFromRealm ( ) ; 
 + } 
 + } ) ; 
 } 
 
 private void basicQuery ( Realm realm ) { 
 @ @ - 146 , 29 + 154 , 32 @ @ public class IntroExampleActivity extends Activity { 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 
 / / Add ten persons in one transaction 
 - realm . beginTransaction ( ) ; 
 - Dog fido = realm . createObject ( Dog . class ) ; 
 - fido . name = " fido " ; 
 - for ( int i = 0 ; i < 10 ; i + + ) { 
 - Person person = realm . createObject ( Person . class ) ; 
 - person . setId ( i ) ; 
 - person . setName ( " Person no . " + i ) ; 
 - person . setAge ( i ) ; 
 - person . setDog ( fido ) ; 
 - 
 - / / The field tempReference is annotated with @ Ignore . 
 - / / This means setTempReference sets the Person tempReference 
 - / / field directly . The tempReference is NOT saved as part of 
 - / / the RealmObject : 
 - person . setTempReference ( 42 ) ; 
 - 
 - for ( int j = 0 ; j < i ; j + + ) { 
 - Cat cat = realm . createObject ( Cat . class ) ; 
 - cat . name = " Cat _ " + j ; 
 - person . getCats ( ) . add ( cat ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + Dog fido = realm . createObject ( Dog . class ) ; 
 + fido . name = " fido " ; 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + Person person = realm . createObject ( Person . class ) ; 
 + person . setId ( i ) ; 
 + person . setName ( " Person no . " + i ) ; 
 + person . setAge ( i ) ; 
 + person . setDog ( fido ) ; 
 + 
 + / / The field tempReference is annotated with @ Ignore . 
 + / / This means setTempReference sets the Person tempReference 
 + / / field directly . The tempReference is NOT saved as part of 
 + / / the RealmObject : 
 + person . setTempReference ( 42 ) ; 
 + 
 + for ( int j = 0 ; j < i ; j + + ) { 
 + Cat cat = realm . createObject ( Cat . class ) ; 
 + cat . name = " Cat _ " + j ; 
 + person . getCats ( ) . add ( cat ) ; 
 + } 
 + } 
 } 
 - } 
 - realm . commitTransaction ( ) ; 
 + } ) ; 
 
 / / Implicit read transactions allow you to access your objects 
 status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; 
 diff - - git a / examples / jsonExample / src / main / java / io / realm / examples / json / JsonExampleActivity . java b / examples / jsonExample / src / main / java / io / realm / examples / json / JsonExampleActivity . java 
 index e2fbb7b . . 62fd7a1 100644 
 - - - a / examples / jsonExample / src / main / java / io / realm / examples / json / JsonExampleActivity . java 
 + + + b / examples / jsonExample / src / main / java / io / realm / examples / json / JsonExampleActivity . java 
 @ @ - 115 , 18 + 115 , 24 @ @ public class JsonExampleActivity extends Activity { 
 Map < String , String > city = new HashMap < String , String > ( ) ; 
 city . put ( " name " , " K Ã¸ benhavn " ) ; 
 city . put ( " votes " , " 9 " ) ; 
 - JSONObject json = new JSONObject ( city ) ; 
 + final JSONObject json = new JSONObject ( city ) ; 
 
 - realm . beginTransaction ( ) ; 
 - realm . createObjectFromJson ( City . class , json ) ; 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . createObjectFromJson ( City . class , json ) ; 
 + } 
 + } ) ; 
 } 
 
 private void loadJsonFromString ( ) { 
 - String json = " { name : \ " Aarhus \ " , votes : 99 } " ; 
 + final String json = " { name : \ " Aarhus \ " , votes : 99 } " ; 
 
 - realm . beginTransaction ( ) ; 
 - realm . createObjectFromJson ( City . class , json ) ; 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . createObjectFromJson ( City . class , json ) ; 
 + } 
 + } ) ; 
 } 
 } 
 diff - - git a / examples / kotlinExample / build . gradle b / examples / kotlinExample / build . gradle 
 index 3e35bbf . . b29632d 100644 
 - - - a / examples / kotlinExample / build . gradle 
 + + + b / examples / kotlinExample / build . gradle 
 @ @ - 2 , 6 + 2 , 7 @ @ buildscript { 
 ext . kotlin _ version = ' 1 . 0 . 1 - 2 ' 
 repositories { 
 jcenter ( ) 
 + mavenCentral ( ) 
 } 
 dependencies { 
 classpath " org . jetbrains . kotlin : kotlin - gradle - plugin : $ kotlin _ version " 
 diff - - git a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 index 37c16e3 . . 4f71f7e 100644 
 - - - a / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 + + + b / examples / kotlinExample / src / main / kotlin / io / realm / examples / kotlin / KotlinExampleActivity . kt 
 @ @ - 98 , 27 + 98 , 24 @ @ class KotlinExampleActivity : Activity ( ) { 
 showStatus ( " Perform basic Create / Read / Update / Delete ( CRUD ) operations . . . " ) 
 
 / / All writes must be wrapped in a transaction to facilitate safe multi threading 
 - realm . beginTransaction ( ) 
 - 
 - / / Add a person 
 - var person = realm . createObject ( Person : : class . java ) 
 - person . id = 1 
 - person . name = " Young Person " 
 - person . age = 14 
 - 
 - / / When the transaction is committed , all changes a synced to disk . 
 - realm . commitTransaction ( ) 
 + realm . executeTransaction { 
 + / / Add a person 
 + var person = realm . createObject ( Person : : class . java ) 
 + person . id = 1 
 + person . name = " Young Person " 
 + person . age = 14 
 + } 
 
 / / Find the first person ( no query conditions ) and read a field 
 - person = realm . where ( Person : : class . java ) . findFirst ( ) 
 + var person = realm . where ( Person : : class . java ) . findFirst ( ) 
 showStatus ( person . name + " : " + person . age ) 
 
 / / Update person in a transaction 
 - realm . beginTransaction ( ) 
 - person . name = " Senior Person " 
 - person . age = 99 
 - showStatus ( person . name + " got older : " + person . age ) 
 - realm . commitTransaction ( ) 
 + realm . executeTransaction { 
 + person . name = " Senior Person " 
 + person . age = 99 
 + showStatus ( person . name + " got older : " + person . age ) 
 + } 
 } 
 
 private fun basicQuery ( realm : Realm ) { 
 @ @ - 147 , 29 + 144 , 29 @ @ class KotlinExampleActivity : Activity ( ) { 
 val realm = Realm . getInstance ( realmConfig ) 
 
 / / Add ten persons in one transaction 
 - realm . beginTransaction ( ) 
 - val fido = realm . createObject ( Dog : : class . java ) 
 - fido . name = " fido " 
 - for ( i in 0 . . 9 ) { 
 - val person = realm . createObject ( Person : : class . java ) 
 - person . id = i . toLong ( ) 
 - person . name = " Person no . $ i " 
 - person . age = i 
 - person . dog = fido 
 - 
 - / / The field tempReference is annotated with @ Ignore . 
 - / / This means setTempReference sets the Person tempReference 
 - / / field directly . The tempReference is NOT saved as part of 
 - / / the RealmObject : 
 - person . tempReference = 42 
 - 
 - for ( j in 0 . . i - 1 ) { 
 - val cat = realm . createObject ( Cat : : class . java ) 
 - cat . name = " Cat _ $ j " 
 - person . cats . add ( cat ) 
 + realm . executeTransaction { 
 + val fido = realm . createObject ( Dog : : class . java ) 
 + fido . name = " fido " 
 + for ( i in 0 . . 9 ) { 
 + val person = realm . createObject ( Person : : class . java ) 
 + person . id = i . toLong ( ) 
 + person . name = " Person no . $ i " 
 + person . age = i 
 + person . dog = fido 
 + 
 + / / The field tempReference is annotated with @ Ignore . 
 + / / This means setTempReference sets the Person tempReference 
 + / / field directly . The tempReference is NOT saved as part of 
 + / / the RealmObject : 
 + person . tempReference = 42 
 + 
 + for ( j in 0 . . i - 1 ) { 
 + val cat = realm . createObject ( Cat : : class . java ) 
 + cat . name = " Cat _ $ j " 
 + person . cats . add ( cat ) 
 + } 
 } 
 } 
 - realm . commitTransaction ( ) 
 
 / / Implicit read transactions allow you to access your objects 
 status + = " \ nNumber of persons : $ { realm . allObjects ( Person : : class . java ) . size } " 
 diff - - git a / examples / moduleExample / app / src / main / java / io / realm / examples / appmodules / ModulesExampleActivity . java b / examples / moduleExample / app / src / main / java / io / realm / examples / appmodules / ModulesExampleActivity . java 
 index 1d36960 . . 12d4c01 100644 
 - - - a / examples / moduleExample / app / src / main / java / io / realm / examples / appmodules / ModulesExampleActivity . java 
 + + + b / examples / moduleExample / app / src / main / java / io / realm / examples / appmodules / ModulesExampleActivity . java 
 @ @ - 78 , 7 + 78 , 7 @ @ public class ModulesExampleActivity extends Activity { 
 / / Multiple Realms can be open at the same time 
 showStatus ( " Opening multiple Realms " ) ; 
 Realm defaultRealm = Realm . getInstance ( defaultConfig ) ; 
 - Realm farmRealm = Realm . getInstance ( farmAnimalsConfig ) ; 
 + final Realm farmRealm = Realm . getInstance ( farmAnimalsConfig ) ; 
 Realm exoticRealm = Realm . getInstance ( exoticAnimalsConfig ) ; 
 
 / / Objects can be added to each Realm independantly 
 @ @ - 120 , 10 + 120 , 14 @ @ public class ModulesExampleActivity extends Activity { 
 showStatus ( " Copy objects between Realms " ) ; 
 showStatus ( " Number of pigs on the farm : " + farmRealm . where ( Pig . class ) . count ( ) ) ; 
 showStatus ( " Copy pig from defaultRealm to farmRealm " ) ; 
 - Pig defaultPig = defaultRealm . where ( Pig . class ) . findFirst ( ) ; 
 - farmRealm . beginTransaction ( ) ; 
 - farmRealm . copyToRealm ( defaultPig ) ; 
 - farmRealm . commitTransaction ( ) ; 
 + final Pig defaultPig = defaultRealm . where ( Pig . class ) . findFirst ( ) ; 
 + farmRealm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . copyToRealm ( defaultPig ) ; 
 + } 
 + } ) ; 
 + 
 showStatus ( " Number of pigs on the farm : " + farmRealm . where ( Pig . class ) . count ( ) ) ; 
 
 / / Each Realm is restricted to only accept the classes in their schema . 
 diff - - git a / examples / moduleExample / library / src / main / java / io / realm / examples / librarymodules / Zoo . java b / examples / moduleExample / library / src / main / java / io / realm / examples / librarymodules / Zoo . java 
 index 9e19a30 . . f33c90c 100644 
 - - - a / examples / moduleExample / library / src / main / java / io / realm / examples / librarymodules / Zoo . java 
 + + + b / examples / moduleExample / library / src / main / java / io / realm / examples / librarymodules / Zoo . java 
 @ @ - 52 , 13 + 52 , 16 @ @ public class Zoo { 
 return realm . where ( Cat . class ) . count ( ) ; 
 } 
 
 - public void addAnimals ( int count ) { 
 - realm . beginTransaction ( ) ; 
 - for ( int i = 0 ; i < count ; i + + ) { 
 - Cat cat = realm . createObject ( Cat . class ) ; 
 - cat . setName ( " Cat " + i ) ; 
 - } 
 - realm . commitTransaction ( ) ; 
 + public void addAnimals ( final int count ) { 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + for ( int i = 0 ; i < count ; i + + ) { 
 + Cat cat = realm . createObject ( Cat . class ) ; 
 + cat . setName ( " Cat " + i ) ; 
 + } 
 + } 
 + } ) ; 
 } 
 
 public void close ( ) { 
 diff - - git a / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java b / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java 
 index 73a177e . . 4f335a3 100644 
 - - - a / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java 
 + + + b / examples / threadExample / src / main / java / io / realm / examples / threads / AsyncTaskFragment . java 
 @ @ - 86 , 15 + 86 , 18 @ @ public class AsyncTaskFragment extends Fragment { 
 protected Integer doInBackground ( Void . . . params ) { 
 Realm realm = Realm . getDefaultInstance ( ) ; 
 
 - realm . beginTransaction ( ) ; 
 - realm . clear ( Score . class ) ; 
 - for ( int i = 0 ; i < TEST _ OBJECTS ; i + + ) { 
 - if ( isCancelled ( ) ) break ; 
 - Score score = realm . createObject ( Score . class ) ; 
 - score . setName ( " Name " + i ) ; 
 - score . setScore ( i ) ; 
 - } 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . clear ( Score . class ) ; 
 + for ( int i = 0 ; i < TEST _ OBJECTS ; i + + ) { 
 + if ( isCancelled ( ) ) break ; 
 + Score score = realm . createObject ( Score . class ) ; 
 + score . setName ( " Name " + i ) ; 
 + score . setScore ( i ) ; 
 + } 
 + } 
 + } ) ; 
 
 Number sum = realm . allObjects ( Score . class ) . sum ( " score " ) ; 
 realm . close ( ) ; 
 diff - - git a / examples / threadExample / src / main / java / io / realm / examples / threads / PassingObjectsFragment . java b / examples / threadExample / src / main / java / io / realm / examples / threads / PassingObjectsFragment . java 
 index 8ce4838 . . d10e719 100644 
 - - - a / examples / threadExample / src / main / java / io / realm / examples / threads / PassingObjectsFragment . java 
 + + + b / examples / threadExample / src / main / java / io / realm / examples / threads / PassingObjectsFragment . java 
 @ @ - 97 , 13 + 97 , 15 @ @ public class PassingObjectsFragment extends Fragment { 
 super . onActivityCreated ( savedInstanceState ) ; 
 
 realm = Realm . getDefaultInstance ( ) ; 
 - realm . beginTransaction ( ) ; 
 - person = realm . createObject ( Person . class ) ; 
 - person . setName ( " Jane " ) ; 
 - person . setAge ( 42 ) ; 
 - person . setId ( UUID . randomUUID ( ) . toString ( ) ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + person = realm . createObject ( Person . class ) ; 
 + person . setName ( " Jane " ) ; 
 + person . setAge ( 42 ) ; 
 + person . setId ( UUID . randomUUID ( ) . toString ( ) ) ; 
 + } 
 + } ) ; 
 textContent . setText ( person . toString ( ) ) ; 
 } 
 
 diff - - git a / examples / threadExample / src / main / java / io / realm / examples / threads / ThreadFragment . java b / examples / threadExample / src / main / java / io / realm / examples / threads / ThreadFragment . java 
 index bc63963 . . 551d4ec 100644 
 - - - a / examples / threadExample / src / main / java / io / realm / examples / threads / ThreadFragment . java 
 + + + b / examples / threadExample / src / main / java / io / realm / examples / threads / ThreadFragment . java 
 @ @ - 76 , 18 + 76 , 24 @ @ public class ThreadFragment extends Fragment { 
 switch ( item . getItemId ( ) ) { 
 case R . id . action _ add _ dot : 
 / / Add blue dot from the UI thread 
 - realm . beginTransaction ( ) ; 
 - Dot dot = realm . createObject ( Dot . class ) ; 
 - dot . setX ( random . nextInt ( 100 ) ) ; 
 - dot . setY ( random . nextInt ( 100 ) ) ; 
 - dot . setColor ( getResources ( ) . getColor ( R . color . realm _ blue ) ) ; 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + Dot dot = realm . createObject ( Dot . class ) ; 
 + dot . setX ( random . nextInt ( 100 ) ) ; 
 + dot . setY ( random . nextInt ( 100 ) ) ; 
 + dot . setColor ( getResources ( ) . getColor ( R . color . realm _ blue ) ) ; 
 + } 
 + } ) ; 
 return true ; 
 
 case R . id . action _ clear : 
 - realm . beginTransaction ( ) ; 
 - realm . clear ( Dot . class ) ; 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . clear ( Dot . class ) ; 
 + } 
 + } ) ; 
 return true ; 
 
 default : 
 @ @ - 125 , 17 + 131 , 19 @ @ public class ThreadFragment extends Fragment { 
 public void run ( ) { 
 / / Realm instances cannot be shared between threads , so we need to create a new 
 / / instance on the background thread . 
 - int redColor = getResources ( ) . getColor ( R . color . realm _ red ) ; 
 - Realm backgroundThreadRealm = Realm . getDefaultInstance ( ) ; 
 + final int redColor = getResources ( ) . getColor ( R . color . realm _ red ) ; 
 + final Realm backgroundThreadRealm = Realm . getDefaultInstance ( ) ; 
 while ( ! backgroundThread . isInterrupted ( ) ) { 
 - backgroundThreadRealm . beginTransaction ( ) ; 
 - 
 - / / Add red dot from the background thread 
 - Dot dot = backgroundThreadRealm . createObject ( Dot . class ) ; 
 - dot . setX ( random . nextInt ( 100 ) ) ; 
 - dot . setY ( random . nextInt ( 100 ) ) ; 
 - dot . setColor ( redColor ) ; 
 - backgroundThreadRealm . commitTransaction ( ) ; 
 + backgroundThreadRealm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + / / Add red dot from the background thread 
 + Dot dot = backgroundThreadRealm . createObject ( Dot . class ) ; 
 + dot . setX ( random . nextInt ( 100 ) ) ; 
 + dot . setY ( random . nextInt ( 100 ) ) ; 
 + dot . setColor ( redColor ) ; 
 + } 
 + } ) ; 
 
 / / Wait 0 . 5 sec . before adding the next dot . 
 SystemClock . sleep ( 500 ) ; 
 diff - - git a / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / ExampleActivity . java b / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / ExampleActivity . java 
 index 757f0f5 . . ad9dec4 100644 
 - - - a / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / ExampleActivity . java 
 + + + b / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / ExampleActivity . java 
 @ @ - 85 , 9 + 85 , 12 @ @ public class ExampleActivity extends Activity { 
 
 private void cleanUp ( ) { 
 / / Delete all persons 
 - realm . beginTransaction ( ) ; 
 - realm . allObjects ( Person . class ) . deleteAllFromRealm ( ) ; 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . allObjects ( Person . class ) . deleteAllFromRealm ( ) ; 
 + } 
 + } ) ; 
 } 
 
 @ Override 
 @ @ - 107 , 40 + 110 , 45 @ @ public class ExampleActivity extends Activity { 
 showStatus ( " Perform basic Create / Read / Update / Delete ( CRUD ) operations . . . " ) ; 
 
 / / All writes must be wrapped in a transaction to facilitate safe multi threading 
 - realm . beginTransaction ( ) ; 
 - 
 - / / Add a person 
 - Person person = realm . createObject ( Person . class ) ; 
 - person . setId ( 1 ) ; 
 - person . setName ( " John Young " ) ; 
 - person . setAge ( 14 ) ; 
 - 
 - / / When the transaction is committed , all changes a synced to disk . 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + / / Add a person 
 + Person person = realm . createObject ( Person . class ) ; 
 + person . setId ( 1 ) ; 
 + person . setName ( " John Young " ) ; 
 + person . setAge ( 14 ) ; 
 + } 
 + } ) ; 
 
 / / Find the first person ( no query conditions ) and read a field 
 - person = realm . where ( Person . class ) . findFirst ( ) ; 
 + final Person person = realm . where ( Person . class ) . findFirst ( ) ; 
 showStatus ( person . getName ( ) + " : " + person . getAge ( ) ) ; 
 
 / / Update person in a transaction 
 - realm . beginTransaction ( ) ; 
 - person . setName ( " John Senior " ) ; 
 - person . setAge ( 89 ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + person . setName ( " John Senior " ) ; 
 + person . setAge ( 89 ) ; 
 + } 
 + } ) ; 
 + 
 showStatus ( person . getName ( ) + " got older : " + person . getAge ( ) ) ; 
 - realm . commitTransaction ( ) ; 
 
 / / Add two more people 
 - realm . beginTransaction ( ) ; 
 - 
 - Person jane = realm . createObject ( Person . class ) ; 
 - jane . setName ( " Jane " ) ; 
 - jane . setAge ( 27 ) ; 
 - 
 - Person doug = realm . createObject ( Person . class ) ; 
 - doug . setName ( " Robert " ) ; 
 - doug . setAge ( 42 ) ; 
 - 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + Person jane = realm . createObject ( Person . class ) ; 
 + jane . setName ( " Jane " ) ; 
 + jane . setAge ( 27 ) ; 
 + 
 + Person doug = realm . createObject ( Person . class ) ; 
 + doug . setName ( " Robert " ) ; 
 + doug . setAge ( 42 ) ; 
 + } 
 + } ) ; 
 
 RealmResults < Person > people = realm . where ( Person . class ) . findAll ( ) ; 
 showStatus ( String . format ( " Found % s people " , people . size ( ) ) ) ; 
 diff - - git a / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / repository / DogRepositoryImpl . java b / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / repository / DogRepositoryImpl . java 
 index d9ba05e . . 60ff3b2 100644 
 - - - a / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / repository / DogRepositoryImpl . java 
 + + + b / examples / unitTestExample / src / main / java / io / realm / examples / unittesting / repository / DogRepositoryImpl . java 
 @ @ - 22 , 12 + 22 , 15 @ @ import io . realm . examples . unittesting . model . Dog ; 
 
 public class DogRepositoryImpl implements DogRepository { 
 @ Override 
 - public void createDog ( String name ) { 
 + public void createDog ( final String name ) { 
 Realm realm = Realm . getDefaultInstance ( ) ; 
 - realm . beginTransaction ( ) ; 
 - Dog dog = realm . createObject ( Dog . class ) ; 
 - dog . setName ( name ) ; 
 - realm . commitTransaction ( ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setName ( name ) ; 
 + } 
 + } ) ; 
 realm . close ( ) ; 
 } 
 } 
 diff - - git a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java 
 index 1abe525 . . 104c041 100644 
 - - - a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java 
 + + + b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import org . junit . Before ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 + import org . mockito . Mockito ; 
 import org . powermock . core . classloader . annotations . PowerMockIgnore ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . rule . PowerMockRule ; 
 @ @ - 30 , 7 + 31 , 6 @ @ import org . robolectric . RobolectricGradleTestRunner ; 
 import org . robolectric . annotation . Config ; 
 import org . robolectric . util . ActivityController ; 
 
 - import java . lang . Exception ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 
 @ @ - 42 , 20 + 42 , 20 @ @ import io . realm . RealmResults ; 
 import io . realm . examples . unittesting . model . Person ; 
 import io . realm . internal . RealmCore ; 
 
 - 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 import static org . mockito . Matchers . any ; 
 import static org . mockito . Matchers . anyInt ; 
 import static org . mockito . Matchers . anyString ; 
 + import static org . mockito . Mockito . doCallRealMethod ; 
 import static org . mockito . Mockito . times ; 
 import static org . mockito . Mockito . verify ; 
 + import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mock ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 import static org . powermock . api . mockito . PowerMockito . whenNew ; 
 - import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 
 @ RunWith ( RobolectricGradleTestRunner . class ) 
 @ Config ( constants = BuildConfig . class , sdk = 21 ) 
 @ @ - 167 , 6 + 167 , 8 @ @ public class ExampleActivityTest { 
 
 @ Test 
 public void shouldBeAbleToAccessActivityAndVerifyRealmInteractions ( ) { 
 + doCallRealMethod ( ) . when ( mockRealm ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; 
 + 
 / / Create activity 
 ActivityController < ExampleActivity > controller = 
 Robolectric . buildActivity ( ExampleActivity . class ) . setup ( ) ; 
 @ @ - 179 , 15 + 181 , 15 @ @ public class ExampleActivityTest { 
 Realm . getInstance ( any ( RealmConfiguration . class ) ) ; 
 
 / / verify that we have four begin and commit transaction calls 
 - verify ( mockRealm , times ( 4 ) ) . beginTransaction ( ) ; 
 - verify ( mockRealm , times ( 4 ) ) . commitTransaction ( ) ; 
 + / / Do not verify partial mock invocation count : https : / / github . com / jayway / powermock / issues / 649 
 + / / verify ( mockRealm , times ( 4 ) ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; 
 
 / / Click the clean up button 
 activity . findViewById ( R . id . clean _ up ) . performClick ( ) ; 
 
 / / Verify that begin and commit transaction were called ( been called a total of 5 times now ) 
 - verify ( mockRealm , times ( 5 ) ) . beginTransaction ( ) ; 
 - verify ( mockRealm , times ( 5 ) ) . commitTransaction ( ) ; 
 + / / Do not verify partial mock invocation count : https : / / github . com / jayway / powermock / issues / 649 
 + / / verify ( mockRealm , times ( 5 ) ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; 
 
 / / Verify that we queried for all Person instance two times in this run ( in the original 
 / / onCreate , and then again in the button click ) . Was called two times previously in the 
 @ @ - 206 , 6 + 208 , 44 @ @ public class ExampleActivityTest { 
 verify ( mockRealm , times ( 2 ) ) . close ( ) ; 
 } 
 
 + / * * 
 + * Have to verify the transaction execution in a different test because 
 + * of a problem with Powermock : https : / / github . com / jayway / powermock / issues / 649 
 + * / 
 + @ Test 
 + public void shouldBeAbleToVerifyTransactionCalls ( ) { 
 + 
 + / / Create activity 
 + ActivityController < ExampleActivity > controller = 
 + Robolectric . buildActivity ( ExampleActivity . class ) . setup ( ) ; 
 + ExampleActivity activity = controller . get ( ) ; 
 + 
 + assertThat ( activity . getTitle ( ) . toString ( ) , is ( " Unit Test Example " ) ) ; 
 + 
 + / / Verify that two Realm . getInstance ( ) calls took place . 
 + verifyStatic ( times ( 2 ) ) ; 
 + Realm . getInstance ( any ( RealmConfiguration . class ) ) ; 
 + 
 + / / verify that we have four begin and commit transaction calls 
 + / / Do not verify partial mock invocation count : https : / / github . com / jayway / powermock / issues / 649 
 + verify ( mockRealm , times ( 4 ) ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; 
 + 
 + / / Click the clean up button 
 + activity . findViewById ( R . id . clean _ up ) . performClick ( ) ; 
 + 
 + / / Verify that begin and commit transaction were called ( been called a total of 5 times now ) 
 + / / Do not verify partial mock invocation count : https : / / github . com / jayway / powermock / issues / 649 
 + verify ( mockRealm , times ( 5 ) ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; 
 + 
 + / / Call the destroy method so we can verify that the . close ( ) method was called ( below ) 
 + controller . destroy ( ) ; 
 + 
 + / / Verify that the realm got closed 2 separate times . Once in the AsyncTask , once 
 + / / in onDestroy 
 + verify ( mockRealm , times ( 2 ) ) . close ( ) ; 
 + } 
 + 
 + 
 @ SuppressWarnings ( " unchecked " ) 
 private < T extends RealmObject > RealmQuery < T > mockRealmQuery ( ) { 
 return mock ( RealmQuery . class ) ; 
 diff - - git a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleRealmTest . java b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleRealmTest . java 
 index 8aef626 . . e7be410 100644 
 - - - a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleRealmTest . java 
 + + + b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleRealmTest . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import static org . junit . Assert . assertThat ; 
 import static org . mockito . Mockito . mock ; 
 import static org . mockito . Mockito . verify ; 
 import static org . mockito . internal . verification . VerificationModeFactory . times ; 
 + import static org . powermock . api . mockito . PowerMockito . doCallRealMethod ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 
 @ @ - 91 , 7 + 92 , 9 @ @ public class ExampleRealmTest { 
 * This test verifies the behavior in the { @ link DogRepositoryImpl } class . 
 * / 
 @ Test 
 - public void shouldVerifyTransactionWasCreated ( ) { 
 + public void shouldVerifyThatDogWasCreated ( ) { 
 + 
 + doCallRealMethod ( ) . when ( mockRealm ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; 
 
 Dog dog = mock ( Dog . class ) ; 
 when ( mockRealm . createObject ( Dog . class ) ) . thenReturn ( dog ) ; 
 @ @ - 99 , 8 + 102 , 12 @ @ public class ExampleRealmTest { 
 DogRepository dogRepo = new DogRepositoryImpl ( ) ; 
 dogRepo . createDog ( " Spot " ) ; 
 
 - / / Verify that the begin transaction was called only once 
 - verify ( mockRealm , times ( 1 ) ) . beginTransaction ( ) ; 
 + / / Attempting to verify that a method was called ( executeTransaction ) on a partial 
 + / / mock will return unexpected resultes due to the partial mock . For example , 
 + / / verifying that ` executeTransaction ` was called only once will fail as Powermock 
 + / / actually calls the method 3 times for some reason . I cannot determine why at this 
 + / / point . 
 + 
 
 / / Verify that Realm # createObject was called only once 
 verify ( mockRealm , times ( 1 ) ) . createObject ( Dog . class ) ; / / Verify that a Dog was in fact created . 
 @ @ - 108 , 8 + 115 , 22 @ @ public class ExampleRealmTest { 
 / / Verify that Dog # setName ( ) is called only once 
 verify ( dog , times ( 1 ) ) . setName ( Mockito . anyString ( ) ) ; / / Any string will do 
 
 - / / Verify that the transaction was committed only once 
 - verify ( mockRealm , times ( 1 ) ) . commitTransaction ( ) ; 
 + / / Verify that the Realm was closed only once . 
 + verify ( mockRealm , times ( 1 ) ) . close ( ) ; 
 + } 
 + 
 + / * * 
 + * Have to verify the { @ link Realm # executeTransaction ( Realm . Transaction ) } call in a different 
 + * test because of a problem with Powermock : https : / / github . com / jayway / powermock / issues / 649 
 + * / 
 + @ Test 
 + public void shouldVerifyThatTransactionWasExecuted ( ) { 
 + 
 + DogRepository dogRepo = new DogRepositoryImpl ( ) ; 
 + dogRepo . createDog ( " Spot " ) ; 
 + 
 + / / Verify that the begin transaction was called only once 
 + verify ( mockRealm , times ( 1 ) ) . executeTransaction ( Mockito . any ( Realm . Transaction . class ) ) ; 
 
 / / Verify that the Realm was closed only once . 
 verify ( mockRealm , times ( 1 ) ) . close ( ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index c8926b4 . . 22e5a80 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 57 , 7 + 57 , 7 @ @ import rx . Observable ; 
 / * * 
 * The Realm class is the storage and transactional manager of your object persistent store . It is in charge of creating 
 * instances of your RealmObjects . Objects within a Realm can be queried and read at any time . Creating , modifying , and 
 - * deleting objects must be done while inside a transaction . See { @ link # beginTransaction ( ) } 
 + * deleting objects must be done while inside a transaction . See { @ link # executeTransaction ( Transaction ) } 
 * < p > 
 * The transactions ensure that multiple instances ( on multiple threads ) can access the same objects in a consistent 
 * state with full ACID guarantees . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 43dd87c . . 8b15469 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 65 , 7 + 65 , 7 @ @ import rx . Observable ; 
 * @ param < E > The class of objects in this list . 
 * @ see RealmQuery # findAll ( ) 
 * @ see Realm # allObjects ( Class ) 
 - * @ see io . realm . Realm # beginTransaction ( ) 
 + * @ see io . realm . Realm # executeTransaction ( Realm . Transaction ) 
 * / 
 public final class RealmResults < E extends RealmModel > extends AbstractList < E > implements OrderedRealmCollection < E > { 


NEAREST DIFF:
diff - - git a / examples / concurrencyExample / build . gradle b / examples / concurrencyExample / build . gradle 
 index fa5e003 . . 7d080b3 100644 
 - - - a / examples / concurrencyExample / build . gradle 
 + + + b / examples / concurrencyExample / build . gradle 
 @ @ - 13 , 9 + 13 , 8 @ @ apply plugin : ' android - apt ' 
 android { 
 compileSdkVersion 19 
 buildToolsVersion " 20 . 0 . 0 " 
 - 
 defaultConfig { 
 - applicationId " examples . realm . io . concurrency " 
 + applicationId ' examples . realm . io . concurrencyExample ' 
 minSdkVersion 15 
 targetSdkVersion 19 
 versionCode 1 
 @ @ - 27 , 6 + 26 , 8 @ @ android { 
 / / proguardFiles getDefaultProguardFile ( ' proguard - android . txt ' ) , ' proguard - rules . pro ' 
 } 
 } 
 + productFlavors { 
 + } 
 } 
 
 task buildApt ( type : GradleBuild ) { 
 diff - - git a / examples / encryptionExample / build . gradle b / examples / encryptionExample / build . gradle 
 index 1ec668f . . 70a58a8 100644 
 - - - a / examples / encryptionExample / build . gradle 
 + + + b / examples / encryptionExample / build . gradle 
 @ @ - 14 , 7 + 14 , 7 @ @ android { 
 compileSdkVersion 19 
 buildToolsVersion ' 20 . 0 . 0 ' 
 defaultConfig { 
 - applicationId ' examples . realm . io . encryption ' 
 + applicationId ' examples . realm . io . encryptionExample ' 
 minSdkVersion 19 
 targetSdkVersion 19 
 versionCode 1 
 @ @ - 30 , 6 + 30 , 8 @ @ android { 
 / / proguardFiles getDefaultProguardFile ( ' proguard - android . txt ' ) , ' proguard - rules . pro ' 
 } 
 } 
 + productFlavors { 
 + } 
 } 
 
 task buildApt ( type : GradleBuild ) { 
 diff - - git a / examples / gridViewExample / build . gradle b / examples / gridViewExample / build . gradle 
 index 82bfbef . . f87635b 100644 
 - - - a / examples / gridViewExample / build . gradle 
 + + + b / examples / gridViewExample / build . gradle 
 @ @ - 13 , 9 + 13 , 8 @ @ apply plugin : ' android - apt ' 
 android { 
 compileSdkVersion 19 
 buildToolsVersion " 20 . 0 . 0 " 
 - 
 defaultConfig { 
 - applicationId " examples . realm . io . intro " 
 + applicationId ' examples . realm . io . gridViewExample ' 
 minSdkVersion 15 
 targetSdkVersion 19 
 versionCode 1 
 @ @ - 27 , 6 + 26 , 8 @ @ android { 
 / / proguardFiles getDefaultProguardFile ( ' proguard - android . txt ' ) , ' proguard - rules . pro ' 
 } 
 } 
 + productFlavors { 
 + } 
 } 
 
 task buildApt ( type : GradleBuild ) { 
 diff - - git a / examples / introExample / build . gradle b / examples / introExample / build . gradle 
 index 1ef80dd . . 8460630 100644 
 - - - a / examples / introExample / build . gradle 
 + + + b / examples / introExample / build . gradle 
 @ @ - 13 , 9 + 13 , 8 @ @ apply plugin : ' android - apt ' 
 android { 
 compileSdkVersion 19 
 buildToolsVersion " 20 . 0 . 0 " 
 - 
 defaultConfig { 
 - applicationId " examples . realm . io . gridview " 
 + applicationId ' examples . realm . io . introExample ' 
 minSdkVersion 15 
 targetSdkVersion 19 
 versionCode 1 
 @ @ - 27 , 6 + 26 , 8 @ @ android { 
 / / proguardFiles getDefaultProguardFile ( ' proguard - android . txt ' ) , ' proguard - rules . pro ' 
 } 
 } 
 + productFlavors { 
 + } 
 } 
 
 task buildApt ( type : GradleBuild ) { 
 diff - - git a / examples / introExample / src / main / AndroidManifest . xml b / examples / introExample / src / main / AndroidManifest . xml 
 index a3c5fdc . . b9d26d4 100644 
 - - - a / examples / introExample / src / main / AndroidManifest . xml 
 + + + b / examples / introExample / src / main / AndroidManifest . xml 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 < ? xml version = " 1 . 0 " encoding = " utf - 8 " ? > 
 < manifest xmlns : android = " http : / / schemas . android . com / apk / res / android " 
 - package = " io . realm . examples . realmintroexample " > 
 + package = " io . realm . examples . intro " > 
 
 < application 
 android : allowBackup = " true " 
 @ @ - 8 , 7 + 8 , 7 @ @ 
 android : label = " @ string / app _ name " 
 android : theme = " @ style / AppTheme " > 
 < activity 
 - android : name = " . RealmIntroExampleActivity " 
 + android : name = " io . realm . examples . intro . RealmIntroExampleActivity " 
 android : label = " @ string / app _ name " > 
 < intent - filter > 
 < action android : name = " android . intent . action . MAIN " / > 
 diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / RealmIntroExampleActivity . java b / examples / introExample / src / main / java / io / realm / examples / intro / RealmIntroExampleActivity . java 
 new file mode 100644 
 index 0000000 . . 469b134 
 - - - / dev / null 
 + + + b / examples / introExample / src / main / java / io / realm / examples / intro / RealmIntroExampleActivity . java 
 @ @ - 0 , 0 + 1 , 195 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . examples . intro ; 
 + 
 + import android . app . Activity ; 
 + import android . os . AsyncTask ; 
 + import android . os . Bundle ; 
 + import android . util . Log ; 
 + import android . widget . LinearLayout ; 
 + import android . widget . TextView ; 
 + 
 + import io . realm . Realm ; 
 + import io . realm . RealmResults ; 
 + import io . realm . examples . intro . model . Cat ; 
 + import io . realm . examples . intro . model . Dog ; 
 + import io . realm . examples . intro . model . Person ; 
 + 
 + 
 + public class RealmIntroExampleActivity extends Activity { 
 + 
 + private void realmExamples ( ) { 
 + 
 + / / These operations are small enough that 
 + / / we can generally safely run them on the UI thread . 
 + 
 + / / Open the default realm ones for the UI thread . 
 + Realm realm = Realm . getInstance ( this ) ; 
 + 
 + basicCRUD ( realm ) ; 
 + basicQuery ( realm ) ; 
 + 
 + / / More complex operations can be executed on another thread . 
 + new AsyncTask < Void , Void , String > ( ) { 
 + @ Override 
 + protected String doInBackground ( Void . . . voids ) { 
 + String info = null ; 
 + info = complexReadWrite ( ) ; 
 + info + = complexQuery ( ) ; 
 + return info ; 
 + } 
 + 
 + @ Override 
 + protected void onPostExecute ( String result ) { 
 + showStatus ( result ) ; 
 + } 
 + } . execute ( ) ; 
 + 
 + } 
 + 
 + private void basicCRUD ( Realm realm ) { 
 + showStatus ( " Perform basic Create / Read / Update / Delete ( CRUD ) operations . . . " ) ; 
 + 
 + / / All writes must be wrapped in a transaction to facilitate safe multi threading 
 + realm . beginTransaction ( ) ; 
 + 
 + / / Add a person 
 + Person person = realm . createObject ( Person . class ) ; 
 + person . setName ( " Young Person " ) ; 
 + person . setAge ( 14 ) ; 
 + 
 + / / When the write transaction is committed , all changes a synced to disk . 
 + realm . commitTransaction ( ) ; 
 + 
 + / / Find the first person ( no query conditions ) and read a field 
 + person = realm . where ( Person . class ) . findFirst ( ) ; 
 + showStatus ( person . getName ( ) + " : " + person . getAge ( ) ) ; 
 + 
 + / / Update person in a write transaction 
 + realm . beginTransaction ( ) ; 
 + person . setName ( " Senior Person " ) ; 
 + person . setAge ( 99 ) ; 
 + showStatus ( person . getName ( ) + " got older : " + person . getAge ( ) ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + / / Delete all persons 
 + realm . beginTransaction ( ) ; 
 + realm . allObjects ( Person . class ) . clear ( ) ; 
 + realm . commitTransaction ( ) ; 
 + } 
 + 
 + private void basicQuery ( Realm realm ) { 
 + showStatus ( " \ nPerforming basic Query operation . . . " ) ; 
 + showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; 
 + 
 + RealmResults < Person > results = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; 
 + 
 + showStatus ( " Size of result set : " + results . size ( ) ) ; 
 + } 
 + 
 + 
 + private String complexReadWrite ( ) { 
 + String status = " \ nPerforming complex Read / Write operation . . . " ; 
 + 
 + / / Open the default realm . All threads must use it ' s own reference to the realm . 
 + / / Those can not be transferred across threads . 
 + Realm realm = Realm . getInstance ( this ) ; 
 + 
 + / / Add ten persons in one write transaction 
 + realm . beginTransaction ( ) ; 
 + Dog fido = realm . createObject ( Dog . class ) ; 
 + fido . setName ( " fido " ) ; 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + Person person = realm . createObject ( Person . class ) ; 
 + person . setName ( " Person no . " + i ) ; 
 + person . setAge ( i ) ; 
 + person . setDog ( fido ) ; 
 + 
 + / / The field tempReference is annotated with @ Ignore . 
 + / / This means setTempReference sets the Person tempReference 
 + / / field directly . The tempReference is NOT saved as part of 
 + / / the RealmObject : 
 + person . setTempReference ( 42 ) ; 
 + 
 + for ( int j = 0 ; j < i ; j + + ) { 
 + Cat cat = realm . createObject ( Cat . class ) ; 
 + cat . setName ( " Cat _ " + j ) ; 
 + person . getCats ( ) . add ( cat ) ; 
 + } 
 + } 
 + realm . commitTransaction ( ) ; 
 + 
 + / / Implicit read transactions allow you to access your objects 
 + status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; 
 + 
 + / / Iterate over all objects 
 + for ( Person pers : realm . allObjects ( Person . class ) ) { 
 + String dogName ; 
 + if ( pers . getDog ( ) = = null ) { 
 + dogName = " None " ; 
 + } else { 
 + dogName = pers . getDog ( ) . getName ( ) ; 
 + } 
 + status + = " \ n " + pers . getName ( ) + " : " + pers . getAge ( ) + " : " + dogName + " : " + pers . getCats ( ) . size ( ) ; 
 + 
 + / / The field tempReference is annotated with @ Ignore 
 + / / Though we initially set its value to 42 , it has 
 + / / not been saved as part of the Person RealmObject : 
 + assert ( pers . getTempReference ( ) = = 0 ) ; 
 + } 
 + 
 + return status ; 
 + } 
 + 
 + private String complexQuery ( ) { 
 + String status = " \ n \ nPerforming complex Query operation . . . " ; 
 + 
 + Realm realm = Realm . getInstance ( this ) ; 
 + status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; 
 + 
 + / / Find all persons where age between 7 and 9 and name begins with " Person " . 
 + RealmResults < Person > results = realm . where ( Person . class ) 
 + . between ( " age " , 7 , 9 ) / / Notice implicit " and " operation 
 + . beginsWith ( " name " , " Person " ) . findAll ( ) ; 
 + status + = " \ nSize of result set : " + results . size ( ) ; 
 + return status ; 
 + } 
 + 
 + 
 + / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + / / Non Realm 
 + 
 + public static final String TAG = RealmIntroExampleActivity . class . getName ( ) ; 
 + private LinearLayout rootLayout = null ; 
 + 
 + @ Override 
 + protected void onCreate ( Bundle savedInstanceState ) { 
 + super . onCreate ( savedInstanceState ) ; 
 + setContentView ( R . layout . activity _ realm _ basic _ example ) ; 
 + rootLayout = ( ( LinearLayout ) findViewById ( R . id . container ) ) ; 
 + rootLayout . removeAllViews ( ) ; 
 + 
 + realmExamples ( ) ; 
 + } 
 + 
 + private void showStatus ( String txt ) { 
 + Log . i ( TAG , txt ) ; 
 + TextView tv = new TextView ( this ) ; 
 + tv . setText ( txt ) ; 
 + rootLayout . addView ( tv ) ; 
 + } 
 + } 
 diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / model / Cat . java b / examples / introExample / src / main / java / io / realm / examples / intro / model / Cat . java 
 new file mode 100644 
 index 0000000 . . 6488037 
 - - - / dev / null 
 + + + b / examples / introExample / src / main / java / io / realm / examples / intro / model / Cat . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . examples . intro . model ; 
 + 
 + import io . realm . RealmObject ; 
 + 
 + public class Cat extends RealmObject { 
 + private String name ; 
 + 
 + public String getName ( ) { 
 + return name ; 
 + } 
 + 
 + public void setName ( String name ) { 
 + this . name = name ; 
 + } 
 + } 
 diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / model / Dog . java b / examples / introExample / src / main / java / io / realm / examples / intro / model / Dog . java 
 new file mode 100644 
 index 0000000 . . 8701f1d 
 - - - / dev / null 
 + + + b / examples / introExample / src / main / java / io / realm / examples / intro / model / Dog . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . examples . intro . model ; 
 + 
 + import io . realm . RealmObject ; 
 + 
 + public class Dog extends RealmObject { 
 + private String name ; 
 + 
 + public String getName ( ) { 
 + return name ; 
 + } 
 + 
 + public void setName ( String name ) { 
 + this . name = name ; 
 + } 
 + } 
 diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / model / Person . java b / examples / introExample / src / main / java / io / realm / examples / intro / model / Person . java 
 new file mode 100644 
 index 0000000 . . e971744 
 - - - / dev / null 
 + + + b / examples / introExample / src / main / java / io / realm / examples / intro / model / Person . java 
 @ @ - 0 , 0 + 1 , 85 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . examples . intro . model ; 
 + 
 + import io . realm . RealmList ; 
 + import io . realm . RealmObject ; 
 + import io . realm . annotations . Ignore ; 
 + 
 + / / Your model just have to extend RealmObject . 
 + / / This will inherit an annotation which produces proxy getters and setters for all fields . 
 + 
 + public class Person extends RealmObject { 
 + 
 + / / All fields are by default persisted . 
 + private String name ; 
 + private int age ; 
 + 
 + / / Other objects in a one - to - one relation must also subclass RealmObject 
 + private Dog dog ; 
 + 
 + / / One - to - many relations is simply a RealmList of the objects which also subclass RealmObject 
 + private RealmList < Cat > cats ; 
 + 
 + / / You can instruct Realm to ignore a field and not persist it . 
 + @ Ignore 
 + private int tempReference ; 
 + 
 + / / The standard getters and setters your IDE generates are fine . 
 + / / Realm will overload them and code inside them is ignored . 
 + / / So if you prefer you can also just have empty abstract methods . 
 + 
 + public String getName ( ) { 
 + return name ; 
 + } 
 + 
 + public void setName ( String name ) { 
 + this . name = name ; 
 + } 
 + 
 + public int getAge ( ) { 
 + return age ; 
 + } 
 + 
 + public void setAge ( int age ) { 
 + this . age = age ; 
 + } 
 + 
 + public Dog getDog ( ) { 
 + return dog ; 
 + } 
 + 
 + public void setDog ( Dog dog ) { 
 + this . dog = dog ; 
 + } 
 + 
 + public RealmList < Cat > getCats ( ) { 
 + return cats ; 
 + } 
 + 
 + public void setCats ( RealmList < Cat > cats ) { 
 + this . cats = cats ; 
 + } 
 + 
 + public int getTempReference ( ) { 
 + return tempReference ; 
 + } 
 + 
 + public void setTempReference ( int tempReference ) { 
 + this . tempReference = tempReference ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java b / examples / introExample / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java 
 deleted file mode 100644 
 index 988d560 . . 0000000 
 - - - a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / RealmIntroExampleActivity . java 
 + + + / dev / null 
 @ @ - 1 , 199 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . examples . realmintroexample ; 
 - 
 - import android . app . Activity ; 
 - import android . os . AsyncTask ; 
 - import android . os . Bundle ; 
 - import android . util . Log ; 
 - import android . widget . LinearLayout ; 
 - import android . widget . TextView ; 
 - 
 - import java . io . IOException ; 
 - 
 - import io . realm . Realm ; 
 - import io . realm . RealmResults ; 
 - import io . realm . examples . realmintroexample . model . Cat ; 
 - import io . realm . examples . realmintroexample . model . Dog ; 
 - import io . realm . examples . realmintroexample . model . Person ; 
 - 
 - 
 - public class RealmIntroExampleActivity extends Activity { 
 - 
 - public static final String TAG = RealmIntroExampleActivity . class . getName ( ) ; 
 - 
 - private LinearLayout rootLayout = null ; 
 - 
 - @ Override 
 - protected void onCreate ( Bundle savedInstanceState ) { 
 - super . onCreate ( savedInstanceState ) ; 
 - setContentView ( R . layout . activity _ realm _ basic _ example ) ; 
 - 
 - rootLayout = ( ( LinearLayout ) findViewById ( R . id . container ) ) ; 
 - rootLayout . removeAllViews ( ) ; 
 - 
 - try { 
 - / / These operations are small enough that 
 - / / we can generally safely run them on the UI thread . 
 - basicReadWrite ( ) ; 
 - basicUpdate ( ) ; 
 - basicQuery ( ) ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - 
 - / / More complex operations should not be 
 - / / executed on the UI thread . 
 - new AsyncTask < Void , Void , String > ( ) { 
 - @ Override 
 - protected String doInBackground ( Void . . . voids ) { 
 - String info = null ; 
 - try { 
 - info = complexReadWrite ( ) ; 
 - info + = complexQuery ( ) ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - return info ; 
 - } 
 - 
 - @ Override 
 - protected void onPostExecute ( String result ) { 
 - showStatus ( result ) ; 
 - } 
 - } . execute ( ) ; 
 - } 
 - 
 - private void basicReadWrite ( ) throws IOException { 
 - showStatus ( " Performing basic Read / Write operation . . . " ) ; 
 - 
 - / / Open a default realm 
 - Realm realm = Realm . getInstance ( this ) ; 
 - 
 - / / Add a person in a write transaction 
 - realm . beginTransaction ( ) ; 
 - Person person = realm . createObject ( Person . class ) ; 
 - person . setName ( " Happy Person " ) ; 
 - person . setAge ( 14 ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 - / / Find first person 
 - person = realm . where ( Person . class ) . findFirst ( ) ; 
 - showStatus ( person . getName ( ) + " : " + person . getAge ( ) ) ; 
 - } 
 - 
 - private void basicQuery ( ) throws IOException { 
 - showStatus ( " \ nPerforming basic Query operation . . . " ) ; 
 - 
 - Realm realm = Realm . getInstance ( this ) ; 
 - showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; 
 - RealmResults < Person > results = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; 
 - showStatus ( " Size of result set : " + results . size ( ) ) ; 
 - } 
 - 
 - private void basicUpdate ( ) throws IOException { 
 - showStatus ( " \ nPerforming basic Update operation . . . " ) ; 
 - 
 - / / Open a default realm 
 - Realm realm = Realm . getInstance ( this ) ; 
 - 
 - / / Get the first object 
 - Person person = realm . where ( Person . class ) . findFirst ( ) ; 
 - 
 - / / Update person in a write transaction 
 - realm . beginTransaction ( ) ; 
 - person . setName ( " Senior Person " ) ; 
 - person . setAge ( 99 ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 - showStatus ( person . getName ( ) + " : " + person . getAge ( ) ) ; 
 - } 
 - 
 - private void showStatus ( String txt ) { 
 - Log . i ( TAG , txt ) ; 
 - TextView tv = new TextView ( this ) ; 
 - tv . setText ( txt ) ; 
 - rootLayout . addView ( tv ) ; 
 - } 
 - 
 - private String complexReadWrite ( ) throws IOException { 
 - String status = " \ nPerforming complex Read / Write operation . . . " ; 
 - 
 - / / Open a default realm 
 - Realm realm = Realm . getInstance ( this ) ; 
 - 
 - / / Add ten persons in one write transaction 
 - realm . beginTransaction ( ) ; 
 - Dog fido = realm . createObject ( Dog . class ) ; 
 - fido . setName ( " fido " ) ; 
 - for ( int i = 0 ; i < 10 ; i + + ) { 
 - Person person = realm . createObject ( Person . class ) ; 
 - person . setName ( " Person no . " + i ) ; 
 - person . setAge ( i ) ; 
 - person . setDog ( fido ) ; 
 - 
 - / / The field tempReference is annotated with @ Ignore . 
 - / / This means setTempReference sets the Person tempReference 
 - / / field directly . The tempReference is NOT saved as part of 
 - / / the RealmObject : 
 - person . setTempReference ( 42 ) ; 
 - 
 - for ( int j = 0 ; j < i ; j + + ) { 
 - Cat cat = realm . createObject ( Cat . class ) ; 
 - cat . setName ( " Cat _ " + j ) ; 
 - person . getCats ( ) . add ( cat ) ; 
 - } 
 - } 
 - realm . commitTransaction ( ) ; 
 - 
 - / / Implicit read transactions allow you to access your objects 
 - status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; 
 - 
 - / / Iterate over all objects 
 - for ( Person pers : realm . allObjects ( Person . class ) ) { 
 - String dogName ; 
 - if ( pers . getDog ( ) = = null ) { 
 - dogName = " None " ; 
 - } else { 
 - dogName = pers . getDog ( ) . getName ( ) ; 
 - } 
 - status + = " \ n " + pers . getName ( ) + " : " + pers . getAge ( ) + " : " + dogName + " : " + pers . getCats ( ) . size ( ) ; 
 - 
 - / / The field tempReference is annotated with @ Ignore 
 - / / Though we initially set its value to 42 , it has 
 - / / not been saved as part of the Person RealmObject : 
 - assert ( pers . getTempReference ( ) = = 0 ) ; 
 - 
 - } 
 - 
 - return status ; 
 - } 
 - 
 - private String complexQuery ( ) throws IOException { 
 - String status = " \ n \ nPerforming complex Query operation . . . " ; 
 - 
 - Realm realm = Realm . getInstance ( this ) ; 
 - status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; 
 - 
 - / / Find all persons where age between 7 and 9 and name begins with " Person " . 
 - RealmResults < Person > results = realm . where ( Person . class ) 
 - . between ( " age " , 7 , 9 ) / / Notice implicit " and " operation 
 - . beginsWith ( " name " , " Person " ) . findAll ( ) ; 
 - status + = " \ nSize of result set : " + results . size ( ) ; 
 - return status ; 
 - } 
 - } 
 diff - - git a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Cat . java b / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Cat . java 
 deleted file mode 100644 
 index eec3726 . . 0000000 
 - - - a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Cat . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . examples . realmintroexample . model ; 
 - 
 - import io . realm . RealmObject ; 
 - 
 - public class Cat extends RealmObject { 
 - private String name ; 
 - 
 - public String getName ( ) { 
 - return name ; 
 - } 
 - 
 - public void setName ( String name ) { 
 - this . name = name ; 
 - } 
 - } 
 diff - - git a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Dog . java b / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Dog . java 
 deleted file mode 100644 
 index 1c6d9e4 . . 0000000 
 - - - a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Dog . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . examples . realmintroexample . model ; 
 - 
 - import io . realm . RealmObject ; 
 - 
 - public class Dog extends RealmObject { 
 - private String name ; 
 - 
 - public String getName ( ) { 
 - return name ; 
 - } 
 - 
 - public void setName ( String name ) { 
 - this . name = name ; 
 - } 
 - } 
 diff - - git a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Person . java b / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 deleted file mode 100644 
 index 99b758c . . 0000000 
 - - - a / examples / introExample / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 + + + / dev / null 
 @ @ - 1 , 74 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . examples . realmintroexample . model ; 
 - 
 - import io . realm . RealmList ; 
 - import io . realm . RealmObject ; 
 - import io . realm . annotations . Ignore ; 
 - 
 - public class Person extends RealmObject { 
 - 
 - private String name ; 
 - private int age ; 
 - private Dog dog ; 
 - private RealmList < Cat > cats ; 
 - 
 - @ Ignore 
 - private int tempReference ; 
 - 
 - public String getName ( ) { 
 - return name ; 
 - } 
 - 
 - public void setName ( String name ) { 
 - this . name = name ; 
 - } 
 - 
 - public int getAge ( ) { 
 - return age ; 
 - } 
 - 
 - public void setAge ( int age ) { 
 - this . age = age ; 
 - } 
 - 
 - public Dog getDog ( ) { 
 - return dog ; 
 - } 
 - 
 - public void setDog ( Dog dog ) { 
 - this . dog = dog ; 
 - } 
 - 
 - public RealmList < Cat > getCats ( ) { 
 - return cats ; 
 - } 
 - 
 - public void setCats ( RealmList < Cat > cats ) { 
 - this . cats = cats ; 
 - } 
 - 
 - public int getTempReference ( ) { 
 - return tempReference ; 
 - } 
 - 
 - public void setTempReference ( int tempReference ) { 
 - this . tempReference = tempReference ; 
 - } 
 - 
 - 
 - } 
 \ No newline at end of file 
 diff - - git a / examples / performance / build . gradle b / examples / performance / build . gradle 
 index 548fb0d . . 66de262 100644 
 - - - a / examples / performance / build . gradle 
 + + + b / examples / performance / build . gradle 
 @ @ - 13 , 9 + 13 , 8 @ @ apply plugin : ' android - apt ' 
 android { 
 compileSdkVersion 19 
 buildToolsVersion " 20 . 0 . 0 " 
 - 
 defaultConfig { 
 - applicationId " performance . realm . io . performance " 
 + applicationId ' examples . realm . io . performance ' 
 minSdkVersion 15 
 targetSdkVersion 19 
 versionCode 1 
 @ @ - 27 , 6 + 26 , 8 @ @ android { 
 / / proguardFiles getDefaultProguardFile ( ' proguard - android . txt ' ) , ' proguard - rules . pro ' 
 } 
 } 
 + productFlavors { 
 + } 
 } 
 
 task buildApt ( type : GradleBuild ) {
