BLEU SCORE: 0.12440234748126781

TEST MSG: Unit tests for SyncConfiguration
GENERATED MSG: aAInitial dataset for a Realm

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> index 81685ee . . 8d8200b 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> @ @ - 24 , 19 + 24 , 24 @ @ import org . junit . After ; <nl> import org . junit . Before ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> + import org . junit . rules . ExpectedException ; <nl> import org . junit . rules . TemporaryFolder ; <nl> import org . junit . runner . RunWith ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> + import io . realm . entities . StringOnly ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> <nl> import static io . realm . util . SyncTestUtils . createTestUser ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotEquals ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 51 , 6 + 56 , 9 @ @ public class SyncConfigurationTests { <nl> @ Rule <nl> public final TemporaryFolder tempFolder = new TemporaryFolder ( ) ; <nl> <nl> + @ Rule <nl> + public final ExpectedException thrown = ExpectedException . none ( ) ; <nl> + <nl> private Context context ; <nl> <nl> @ Before <nl> @ @ - 217 , 4 + 225 , 153 @ @ public class SyncConfigurationTests { <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void equals ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) <nl> + . build ( ) ; <nl> + assertTrue ( config . equals ( config ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void not _ equals _ same ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + SyncConfiguration config1 = new SyncConfiguration . Builder ( user , url ) . build ( ) ; <nl> + SyncConfiguration config2 = new SyncConfiguration . Builder ( user , url ) . build ( ) ; <nl> + <nl> + assertFalse ( config1 . equals ( config2 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void equals _ not ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url1 = " realm : / / objectserver . realm . io / default1 " ; <nl> + String url2 = " realm : / / objectserver . realm . io / default2 " ; <nl> + SyncConfiguration config1 = new SyncConfiguration . Builder ( user , url1 ) . build ( ) ; <nl> + SyncConfiguration config2 = new SyncConfiguration . Builder ( user , url2 ) . build ( ) ; <nl> + assertFalse ( config1 . equals ( config2 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void hashCode _ equal ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) <nl> + . build ( ) ; <nl> + <nl> + assertEquals ( config . hashCode ( ) , config . hashCode ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void hashCode _ notEquals ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url1 = " realm : / / objectserver . realm . io / default1 " ; <nl> + String url2 = " realm : / / objectserver . realm . io / default2 " ; <nl> + SyncConfiguration config1 = new SyncConfiguration . Builder ( user , url1 ) . build ( ) ; <nl> + SyncConfiguration config2 = new SyncConfiguration . Builder ( user , url2 ) . build ( ) ; <nl> + assertNotEquals ( config1 . hashCode ( ) , config2 . hashCode ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void get _ syncSpecificValues ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) . build ( ) ; <nl> + assertTrue ( user . equals ( config . getUser ( ) ) ) ; <nl> + assertEquals ( " realm : / / objectserver . realm . io : 80 / default " , config . getServerUrl ( ) . toString ( ) ) ; <nl> + assertFalse ( config . shouldDeleteRealmOnLogout ( ) ) ; <nl> + assertTrue ( config . isSyncConfiguration ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void encryption ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) <nl> + . encryptionKey ( TestHelper . getRandomKey ( ) ) <nl> + . build ( ) ; <nl> + assertNotNull ( config . getEncryptionKey ( ) ) ; <nl> + } <nl> + <nl> + @ Test ( expected = IllegalArgumentException . class ) <nl> + public void encryption _ invalid _ null ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + <nl> + new SyncConfiguration . Builder ( user , url ) . encryptionKey ( null ) ; <nl> + } <nl> + <nl> + @ Test ( expected = IllegalArgumentException . class ) <nl> + public void encryption _ invalid _ wrong _ length ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + <nl> + new SyncConfiguration . Builder ( user , url ) . encryptionKey ( new byte [ ] { 1 , 2 , 3 } ) ; <nl> + } <nl> + <nl> + @ Test ( expected = IllegalArgumentException . class ) <nl> + public void directory _ null ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + new SyncConfiguration . Builder ( user , url ) . directory ( null ) ; <nl> + } <nl> + <nl> + @ Test ( expected = IllegalArgumentException . class ) <nl> + public void directory _ writeProtectedDir ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + <nl> + File dir = new File ( " / " ) ; <nl> + new SyncConfiguration . Builder ( user , url ) . directory ( dir ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void directory _ dirIsAFile ( ) throws IOException { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + <nl> + File dir = configFactory . getRoot ( ) ; <nl> + File file = new File ( dir , " dummyfile " ) ; <nl> + assertTrue ( file . createNewFile ( ) ) ; <nl> + thrown . expect ( IllegalArgumentException . class ) ; <nl> + new SyncConfiguration . Builder ( user , url ) . directory ( file ) ; <nl> + file . delete ( ) ; / / clean up <nl> + } <nl> + <nl> + @ Test <nl> + public void deleteOnLogout ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) <nl> + . deleteRealmOnLogout ( ) <nl> + . build ( ) ; <nl> + assertTrue ( config . shouldDeleteRealmOnLogout ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void initialData ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) <nl> + . initialData ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + StringOnly stringOnly = realm . createObject ( StringOnly . class ) ; <nl> + stringOnly . setChars ( " TEST 42 " ) ; <nl> + } <nl> + } ) <nl> + . build ( ) ; <nl> + <nl> + assertNotNull ( config . getInitialDataTransaction ( ) ) ; <nl> + <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + RealmResults < StringOnly > results = realm . where ( StringOnly . class ) . findAll ( ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + assertEquals ( " TEST 42 " , results . first ( ) . getChars ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index c549ae6 . . a10443a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 357 , 11 + 357 , 16 @ @ public final class Realm extends BaseRealm { <nl> ( version = = UNVERSIONED ) ? realm . configuration . getSchemaVersion ( ) : version , <nl> columnInfoMap ) ; <nl> <nl> - if ( version = = UNVERSIONED & & ! syncAvailable ) { <nl> + if ( version = = UNVERSIONED ) { <nl> final Transaction transaction = realm . getConfiguration ( ) . getInitialDataTransaction ( ) ; <nl> if ( transaction ! = null ) { <nl> - transaction . execute ( realm ) ; <nl> + if ( syncAvailable ) { <nl> + realm . executeTransaction ( transaction ) ; <nl> + } else { <nl> + transaction . execute ( realm ) ; <nl> + } <nl> } <nl> + <nl> } <nl> } finally { <nl> if ( ! syncAvailable ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> index 8e45107 . . 1600cd2 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> @ @ - 157 , 8 + 157 , 8 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> if ( ! serverUrl . equals ( that . serverUrl ) ) return false ; <nl> if ( ! user . equals ( that . user ) ) return false ; <nl> if ( ! syncPolicy . equals ( that . syncPolicy ) ) return false ; <nl> - return errorHandler . equals ( that . errorHandler ) ; <nl> - <nl> + if ( ! errorHandler . equals ( that . errorHandler ) ) return false ; <nl> + return true ; <nl> } <nl> <nl> @ Override <nl> @ @ - 166 , 9 + 166 , 9 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> int result = super . hashCode ( ) ; <nl> result = 31 * result + serverUrl . hashCode ( ) ; <nl> result = 31 * result + user . hashCode ( ) ; <nl> + result = 31 * result + ( deleteRealmOnLogout ? 1 : 0 ) ; <nl> result = 31 * result + syncPolicy . hashCode ( ) ; <nl> result = 31 * result + errorHandler . hashCode ( ) ; <nl> - result = 31 * result + ( deleteRealmOnLogout ? 1 : 0 ) ; <nl> return result ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> index 780834a . . 87e4106 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> @ @ - 16 , 6 + 16 , 8 @ @ <nl> <nl> package io . realm ; <nl> <nl> + import android . content . Context ; <nl> + import android . support . test . InstrumentationRegistry ; <nl> import android . support . test . runner . AndroidJUnit4 ; <nl> import android . test . MoreAsserts ; <nl> <nl> @ @ - 52 , 8 + 54 , 13 @ @ import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertNotSame ; <nl> + import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> + import static org . mockito . Mockito . verify ; <nl> + import static org . mockito . Mockito . never ; <nl> + import static org . mockito . Mockito . times ; <nl> + import static org . mockito . Mockito . mock ; <nl> <nl> @ RunWith ( AndroidJUnit4 . class ) <nl> public class RealmConfigurationTests { <nl> @ @ - 673 , 4 + 680 , 103 @ @ public class RealmConfigurationTests { <nl> assertNotNull ( configuration2 . getRxFactory ( ) ) ; <nl> assertFalse ( configuration2 . getRxFactory ( ) = = dummyFactory ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void initialDataTransactionEqual ( ) { <nl> + final Realm . Transaction transaction = new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( final Realm realm ) { <nl> + } <nl> + } ; <nl> + <nl> + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) <nl> + . initialData ( transaction ) <nl> + . build ( ) ; <nl> + <nl> + assertEquals ( transaction , configuration . getInitialDataTransaction ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void initialDataTransactionNull ( ) { <nl> + assertNull ( defaultConfig . getInitialDataTransaction ( ) ) ; <nl> + <nl> + realm = Realm . getInstance ( defaultConfig ) ; <nl> + assertTrue ( realm . isEmpty ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void initialDataTransactionNotNull ( ) { <nl> + / / Remove default instance <nl> + Realm . deleteRealm ( defaultConfig ) ; <nl> + <nl> + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) <nl> + . initialData ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( final Realm realm ) { <nl> + realm . createObject ( AllTypes . class ) ; <nl> + realm . createObject ( Owner . class ) . setCat ( realm . createObject ( Cat . class ) ) ; <nl> + } <nl> + } ) . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + <nl> + / / First time check for initial data <nl> + assertEquals ( 1 , realm . where ( AllTypes . class ) . count ( ) ) ; <nl> + assertEquals ( 1 , realm . where ( Owner . class ) . count ( ) ) ; <nl> + assertEquals ( 1 , realm . where ( Cat . class ) . count ( ) ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + realm . delete ( AllTypes . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + assertEquals ( 0 , realm . where ( AllTypes . class ) . count ( ) ) ; <nl> + <nl> + realm . close ( ) ; <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + / / Check if there is still the same data <nl> + assertEquals ( 0 , realm . where ( AllTypes . class ) . count ( ) ) ; <nl> + assertEquals ( 1 , realm . where ( Owner . class ) . count ( ) ) ; <nl> + assertEquals ( 1 , realm . where ( Cat . class ) . count ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void initialDataTransactionExecutionCount ( ) { <nl> + / / Remove default instance <nl> + Realm . deleteRealm ( defaultConfig ) ; <nl> + <nl> + Realm . Transaction transaction = mock ( Realm . Transaction . class ) ; <nl> + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) <nl> + . initialData ( transaction ) <nl> + . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + realm . close ( ) ; <nl> + verify ( transaction , times ( 1 ) ) . execute ( realm ) ; <nl> + <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + realm . close ( ) ; <nl> + verify ( transaction , never ( ) ) . execute ( realm ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void initialDataTransactionAssetFile ( ) throws IOException { <nl> + / / Remove default instance <nl> + Realm . deleteRealm ( defaultConfig ) ; <nl> + <nl> + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> + configFactory . copyRealmFromAssets ( context , " default - before - migration . realm " , Realm . DEFAULT _ REALM _ NAME ) ; <nl> + assertTrue ( new File ( configFactory . getRoot ( ) , Realm . DEFAULT _ REALM _ NAME ) . exists ( ) ) ; <nl> + <nl> + Realm . Transaction transaction = mock ( Realm . Transaction . class ) ; <nl> + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) <nl> + / / Just reuse existing file and set right schema <nl> + . schemaVersion ( 0 ) <nl> + . schema ( AllTypes . class ) <nl> + . initialData ( transaction ) <nl> + . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + realm . close ( ) ; <nl> + verify ( transaction , never ( ) ) . execute ( realm ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index ead89af . . c79abe9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 316 , 6 + 316 , 13 @ @ public final class Realm extends BaseRealm { <nl> columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedGroupManager . getTransaction ( ) ) ) ; <nl> } <nl> realm . schema . columnIndices = new ColumnIndices ( columnInfoMap ) ; <nl> + <nl> + if ( version = = UNVERSIONED ) { <nl> + final Transaction transaction = realm . getConfiguration ( ) . getInitialDataTransaction ( ) ; <nl> + if ( transaction ! = null ) { <nl> + transaction . execute ( realm ) ; <nl> + } <nl> + } <nl> } finally { <nl> if ( commitNeeded ) { <nl> realm . commitTransaction ( false , null ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 4e36603 . . a0789ee 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 88 , 6 + 88 , 7 @ @ public class RealmConfiguration { <nl> private final SharedGroup . Durability durability ; <nl> private final RealmProxyMediator schemaMediator ; <nl> private final RxObservableFactory rxObservableFactory ; <nl> + private final Realm . Transaction initialDataTransaction ; <nl> <nl> private RealmConfiguration ( Builder builder ) { <nl> this . realmFolder = builder . folder ; <nl> @ @ - 100 , 6 + 101 , 7 @ @ public class RealmConfiguration { <nl> this . durability = builder . durability ; <nl> this . schemaMediator = createSchemaMediator ( builder ) ; <nl> this . rxObservableFactory = builder . rxFactory ; <nl> + this . initialDataTransaction = builder . initialDataTransaction ; <nl> } <nl> <nl> public File getRealmFolder ( ) { <nl> @ @ - 140 , 6 + 142 , 15 @ @ public class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> + * Returns the transaction instance with initial data . <nl> + * <nl> + * @ return the initial data transaction . <nl> + * / <nl> + Realm . Transaction getInitialDataTransaction ( ) { <nl> + return initialDataTransaction ; <nl> + } <nl> + <nl> + / * * <nl> * Returns the unmodifiable { @ link Set } of model classes that make up the schema for this Realm . <nl> * <nl> * @ return unmodifiable { @ link Set } of model classes . <nl> @ @ - 185 , 6 + 196 , 7 @ @ public class RealmConfiguration { <nl> if ( migration ! = null ? ! migration . equals ( that . migration ) : that . migration ! = null ) return false ; <nl> / / noinspection SimplifiableIfStatement <nl> if ( rxObservableFactory ! = null ? ! rxObservableFactory . equals ( that . rxObservableFactory ) : that . rxObservableFactory ! = null ) return false ; <nl> + if ( initialDataTransaction ! = null ? ! initialDataTransaction . equals ( that . initialDataTransaction ) : that . initialDataTransaction ! = null ) return false ; <nl> return schemaMediator . equals ( that . schemaMediator ) ; <nl> } <nl> <nl> @ @ - 200 , 6 + 212 , 7 @ @ public class RealmConfiguration { <nl> result = 31 * result + schemaMediator . hashCode ( ) ; <nl> result = 31 * result + durability . hashCode ( ) ; <nl> result = 31 * result + ( rxObservableFactory ! = null ? rxObservableFactory . hashCode ( ) : 0 ) ; <nl> + result = 31 * result + ( initialDataTransaction ! = null ? initialDataTransaction . hashCode ( ) : 0 ) ; <nl> <nl> return result ; <nl> } <nl> @ @ - 309 , 6 + 322 , 7 @ @ public class RealmConfiguration { <nl> private HashSet < Object > modules = new HashSet < Object > ( ) ; <nl> private HashSet < Class < ? extends RealmObject > > debugSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; <nl> private RxObservableFactory rxFactory ; <nl> + private Realm . Transaction initialDataTransaction ; <nl> <nl> / * * <nl> * Creates an instance of the Builder for the RealmConfiguration . <nl> @ @ - 481 , 6 + 495 , 17 @ @ public class RealmConfiguration { <nl> return this ; <nl> } <nl> <nl> + / * * <nl> + * Sets the initial data in { @ link io . realm . Realm } . This transaction will be executed only for the first time <nl> + * when database file is created or while migrating the data when { @ link Builder # deleteRealmIfMigrationNeeded ( ) } is set . <nl> + * <nl> + * @ param transaction transaction to execute . <nl> + * / <nl> + public Builder initialData ( Realm . Transaction transaction ) { <nl> + initialDataTransaction = transaction ; <nl> + return this ; <nl> + } <nl> + <nl> private void addModule ( Object module ) { <nl> if ( module ! = null ) { <nl> checkModule ( module ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 index 81685ee . . 8d8200b 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 @ @ - 24 , 19 + 24 , 24 @ @ import org . junit . After ; 
 import org . junit . Before ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 + import org . junit . rules . ExpectedException ; 
 import org . junit . rules . TemporaryFolder ; 
 import org . junit . runner . RunWith ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 + import io . realm . entities . StringOnly ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 
 import static io . realm . util . SyncTestUtils . createTestUser ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotEquals ; 
 + import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 51 , 6 + 56 , 9 @ @ public class SyncConfigurationTests { 
 @ Rule 
 public final TemporaryFolder tempFolder = new TemporaryFolder ( ) ; 
 
 + @ Rule 
 + public final ExpectedException thrown = ExpectedException . none ( ) ; 
 + 
 private Context context ; 
 
 @ Before 
 @ @ - 217 , 4 + 225 , 153 @ @ public class SyncConfigurationTests { 
 } 
 } 
 
 + @ Test 
 + public void equals ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) 
 + . build ( ) ; 
 + assertTrue ( config . equals ( config ) ) ; 
 + } 
 + 
 + @ Test 
 + public void not _ equals _ same ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + SyncConfiguration config1 = new SyncConfiguration . Builder ( user , url ) . build ( ) ; 
 + SyncConfiguration config2 = new SyncConfiguration . Builder ( user , url ) . build ( ) ; 
 + 
 + assertFalse ( config1 . equals ( config2 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void equals _ not ( ) { 
 + User user = createTestUser ( ) ; 
 + String url1 = " realm : / / objectserver . realm . io / default1 " ; 
 + String url2 = " realm : / / objectserver . realm . io / default2 " ; 
 + SyncConfiguration config1 = new SyncConfiguration . Builder ( user , url1 ) . build ( ) ; 
 + SyncConfiguration config2 = new SyncConfiguration . Builder ( user , url2 ) . build ( ) ; 
 + assertFalse ( config1 . equals ( config2 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void hashCode _ equal ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) 
 + . build ( ) ; 
 + 
 + assertEquals ( config . hashCode ( ) , config . hashCode ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void hashCode _ notEquals ( ) { 
 + User user = createTestUser ( ) ; 
 + String url1 = " realm : / / objectserver . realm . io / default1 " ; 
 + String url2 = " realm : / / objectserver . realm . io / default2 " ; 
 + SyncConfiguration config1 = new SyncConfiguration . Builder ( user , url1 ) . build ( ) ; 
 + SyncConfiguration config2 = new SyncConfiguration . Builder ( user , url2 ) . build ( ) ; 
 + assertNotEquals ( config1 . hashCode ( ) , config2 . hashCode ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void get _ syncSpecificValues ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) . build ( ) ; 
 + assertTrue ( user . equals ( config . getUser ( ) ) ) ; 
 + assertEquals ( " realm : / / objectserver . realm . io : 80 / default " , config . getServerUrl ( ) . toString ( ) ) ; 
 + assertFalse ( config . shouldDeleteRealmOnLogout ( ) ) ; 
 + assertTrue ( config . isSyncConfiguration ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void encryption ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) 
 + . encryptionKey ( TestHelper . getRandomKey ( ) ) 
 + . build ( ) ; 
 + assertNotNull ( config . getEncryptionKey ( ) ) ; 
 + } 
 + 
 + @ Test ( expected = IllegalArgumentException . class ) 
 + public void encryption _ invalid _ null ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + 
 + new SyncConfiguration . Builder ( user , url ) . encryptionKey ( null ) ; 
 + } 
 + 
 + @ Test ( expected = IllegalArgumentException . class ) 
 + public void encryption _ invalid _ wrong _ length ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + 
 + new SyncConfiguration . Builder ( user , url ) . encryptionKey ( new byte [ ] { 1 , 2 , 3 } ) ; 
 + } 
 + 
 + @ Test ( expected = IllegalArgumentException . class ) 
 + public void directory _ null ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + new SyncConfiguration . Builder ( user , url ) . directory ( null ) ; 
 + } 
 + 
 + @ Test ( expected = IllegalArgumentException . class ) 
 + public void directory _ writeProtectedDir ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + 
 + File dir = new File ( " / " ) ; 
 + new SyncConfiguration . Builder ( user , url ) . directory ( dir ) ; 
 + } 
 + 
 + @ Test 
 + public void directory _ dirIsAFile ( ) throws IOException { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + 
 + File dir = configFactory . getRoot ( ) ; 
 + File file = new File ( dir , " dummyfile " ) ; 
 + assertTrue ( file . createNewFile ( ) ) ; 
 + thrown . expect ( IllegalArgumentException . class ) ; 
 + new SyncConfiguration . Builder ( user , url ) . directory ( file ) ; 
 + file . delete ( ) ; / / clean up 
 + } 
 + 
 + @ Test 
 + public void deleteOnLogout ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) 
 + . deleteRealmOnLogout ( ) 
 + . build ( ) ; 
 + assertTrue ( config . shouldDeleteRealmOnLogout ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void initialData ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) 
 + . initialData ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + StringOnly stringOnly = realm . createObject ( StringOnly . class ) ; 
 + stringOnly . setChars ( " TEST 42 " ) ; 
 + } 
 + } ) 
 + . build ( ) ; 
 + 
 + assertNotNull ( config . getInitialDataTransaction ( ) ) ; 
 + 
 + Realm realm = Realm . getInstance ( config ) ; 
 + RealmResults < StringOnly > results = realm . where ( StringOnly . class ) . findAll ( ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + assertEquals ( " TEST 42 " , results . first ( ) . getChars ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index c549ae6 . . a10443a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 357 , 11 + 357 , 16 @ @ public final class Realm extends BaseRealm { 
 ( version = = UNVERSIONED ) ? realm . configuration . getSchemaVersion ( ) : version , 
 columnInfoMap ) ; 
 
 - if ( version = = UNVERSIONED & & ! syncAvailable ) { 
 + if ( version = = UNVERSIONED ) { 
 final Transaction transaction = realm . getConfiguration ( ) . getInitialDataTransaction ( ) ; 
 if ( transaction ! = null ) { 
 - transaction . execute ( realm ) ; 
 + if ( syncAvailable ) { 
 + realm . executeTransaction ( transaction ) ; 
 + } else { 
 + transaction . execute ( realm ) ; 
 + } 
 } 
 + 
 } 
 } finally { 
 if ( ! syncAvailable ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 index 8e45107 . . 1600cd2 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 @ @ - 157 , 8 + 157 , 8 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 if ( ! serverUrl . equals ( that . serverUrl ) ) return false ; 
 if ( ! user . equals ( that . user ) ) return false ; 
 if ( ! syncPolicy . equals ( that . syncPolicy ) ) return false ; 
 - return errorHandler . equals ( that . errorHandler ) ; 
 - 
 + if ( ! errorHandler . equals ( that . errorHandler ) ) return false ; 
 + return true ; 
 } 
 
 @ Override 
 @ @ - 166 , 9 + 166 , 9 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 int result = super . hashCode ( ) ; 
 result = 31 * result + serverUrl . hashCode ( ) ; 
 result = 31 * result + user . hashCode ( ) ; 
 + result = 31 * result + ( deleteRealmOnLogout ? 1 : 0 ) ; 
 result = 31 * result + syncPolicy . hashCode ( ) ; 
 result = 31 * result + errorHandler . hashCode ( ) ; 
 - result = 31 * result + ( deleteRealmOnLogout ? 1 : 0 ) ; 
 return result ; 
 } 


NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 index 780834a . . 87e4106 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 @ @ - 16 , 6 + 16 , 8 @ @ 
 
 package io . realm ; 
 
 + import android . content . Context ; 
 + import android . support . test . InstrumentationRegistry ; 
 import android . support . test . runner . AndroidJUnit4 ; 
 import android . test . MoreAsserts ; 
 
 @ @ - 52 , 8 + 54 , 13 @ @ import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertNotSame ; 
 + import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 + import static org . mockito . Mockito . verify ; 
 + import static org . mockito . Mockito . never ; 
 + import static org . mockito . Mockito . times ; 
 + import static org . mockito . Mockito . mock ; 
 
 @ RunWith ( AndroidJUnit4 . class ) 
 public class RealmConfigurationTests { 
 @ @ - 673 , 4 + 680 , 103 @ @ public class RealmConfigurationTests { 
 assertNotNull ( configuration2 . getRxFactory ( ) ) ; 
 assertFalse ( configuration2 . getRxFactory ( ) = = dummyFactory ) ; 
 } 
 + 
 + @ Test 
 + public void initialDataTransactionEqual ( ) { 
 + final Realm . Transaction transaction = new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( final Realm realm ) { 
 + } 
 + } ; 
 + 
 + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) 
 + . initialData ( transaction ) 
 + . build ( ) ; 
 + 
 + assertEquals ( transaction , configuration . getInitialDataTransaction ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void initialDataTransactionNull ( ) { 
 + assertNull ( defaultConfig . getInitialDataTransaction ( ) ) ; 
 + 
 + realm = Realm . getInstance ( defaultConfig ) ; 
 + assertTrue ( realm . isEmpty ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void initialDataTransactionNotNull ( ) { 
 + / / Remove default instance 
 + Realm . deleteRealm ( defaultConfig ) ; 
 + 
 + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) 
 + . initialData ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( final Realm realm ) { 
 + realm . createObject ( AllTypes . class ) ; 
 + realm . createObject ( Owner . class ) . setCat ( realm . createObject ( Cat . class ) ) ; 
 + } 
 + } ) . build ( ) ; 
 + 
 + realm = Realm . getInstance ( configuration ) ; 
 + 
 + / / First time check for initial data 
 + assertEquals ( 1 , realm . where ( AllTypes . class ) . count ( ) ) ; 
 + assertEquals ( 1 , realm . where ( Owner . class ) . count ( ) ) ; 
 + assertEquals ( 1 , realm . where ( Cat . class ) . count ( ) ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + realm . delete ( AllTypes . class ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + assertEquals ( 0 , realm . where ( AllTypes . class ) . count ( ) ) ; 
 + 
 + realm . close ( ) ; 
 + realm = Realm . getInstance ( configuration ) ; 
 + / / Check if there is still the same data 
 + assertEquals ( 0 , realm . where ( AllTypes . class ) . count ( ) ) ; 
 + assertEquals ( 1 , realm . where ( Owner . class ) . count ( ) ) ; 
 + assertEquals ( 1 , realm . where ( Cat . class ) . count ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void initialDataTransactionExecutionCount ( ) { 
 + / / Remove default instance 
 + Realm . deleteRealm ( defaultConfig ) ; 
 + 
 + Realm . Transaction transaction = mock ( Realm . Transaction . class ) ; 
 + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) 
 + . initialData ( transaction ) 
 + . build ( ) ; 
 + 
 + realm = Realm . getInstance ( configuration ) ; 
 + realm . close ( ) ; 
 + verify ( transaction , times ( 1 ) ) . execute ( realm ) ; 
 + 
 + realm = Realm . getInstance ( configuration ) ; 
 + realm . close ( ) ; 
 + verify ( transaction , never ( ) ) . execute ( realm ) ; 
 + } 
 + 
 + @ Test 
 + public void initialDataTransactionAssetFile ( ) throws IOException { 
 + / / Remove default instance 
 + Realm . deleteRealm ( defaultConfig ) ; 
 + 
 + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 + configFactory . copyRealmFromAssets ( context , " default - before - migration . realm " , Realm . DEFAULT _ REALM _ NAME ) ; 
 + assertTrue ( new File ( configFactory . getRoot ( ) , Realm . DEFAULT _ REALM _ NAME ) . exists ( ) ) ; 
 + 
 + Realm . Transaction transaction = mock ( Realm . Transaction . class ) ; 
 + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) 
 + / / Just reuse existing file and set right schema 
 + . schemaVersion ( 0 ) 
 + . schema ( AllTypes . class ) 
 + . initialData ( transaction ) 
 + . build ( ) ; 
 + 
 + realm = Realm . getInstance ( configuration ) ; 
 + realm . close ( ) ; 
 + verify ( transaction , never ( ) ) . execute ( realm ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index ead89af . . c79abe9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 316 , 6 + 316 , 13 @ @ public final class Realm extends BaseRealm { 
 columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedGroupManager . getTransaction ( ) ) ) ; 
 } 
 realm . schema . columnIndices = new ColumnIndices ( columnInfoMap ) ; 
 + 
 + if ( version = = UNVERSIONED ) { 
 + final Transaction transaction = realm . getConfiguration ( ) . getInitialDataTransaction ( ) ; 
 + if ( transaction ! = null ) { 
 + transaction . execute ( realm ) ; 
 + } 
 + } 
 } finally { 
 if ( commitNeeded ) { 
 realm . commitTransaction ( false , null ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 4e36603 . . a0789ee 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 88 , 6 + 88 , 7 @ @ public class RealmConfiguration { 
 private final SharedGroup . Durability durability ; 
 private final RealmProxyMediator schemaMediator ; 
 private final RxObservableFactory rxObservableFactory ; 
 + private final Realm . Transaction initialDataTransaction ; 
 
 private RealmConfiguration ( Builder builder ) { 
 this . realmFolder = builder . folder ; 
 @ @ - 100 , 6 + 101 , 7 @ @ public class RealmConfiguration { 
 this . durability = builder . durability ; 
 this . schemaMediator = createSchemaMediator ( builder ) ; 
 this . rxObservableFactory = builder . rxFactory ; 
 + this . initialDataTransaction = builder . initialDataTransaction ; 
 } 
 
 public File getRealmFolder ( ) { 
 @ @ - 140 , 6 + 142 , 15 @ @ public class RealmConfiguration { 
 } 
 
 / * * 
 + * Returns the transaction instance with initial data . 
 + * 
 + * @ return the initial data transaction . 
 + * / 
 + Realm . Transaction getInitialDataTransaction ( ) { 
 + return initialDataTransaction ; 
 + } 
 + 
 + / * * 
 * Returns the unmodifiable { @ link Set } of model classes that make up the schema for this Realm . 
 * 
 * @ return unmodifiable { @ link Set } of model classes . 
 @ @ - 185 , 6 + 196 , 7 @ @ public class RealmConfiguration { 
 if ( migration ! = null ? ! migration . equals ( that . migration ) : that . migration ! = null ) return false ; 
 / / noinspection SimplifiableIfStatement 
 if ( rxObservableFactory ! = null ? ! rxObservableFactory . equals ( that . rxObservableFactory ) : that . rxObservableFactory ! = null ) return false ; 
 + if ( initialDataTransaction ! = null ? ! initialDataTransaction . equals ( that . initialDataTransaction ) : that . initialDataTransaction ! = null ) return false ; 
 return schemaMediator . equals ( that . schemaMediator ) ; 
 } 
 
 @ @ - 200 , 6 + 212 , 7 @ @ public class RealmConfiguration { 
 result = 31 * result + schemaMediator . hashCode ( ) ; 
 result = 31 * result + durability . hashCode ( ) ; 
 result = 31 * result + ( rxObservableFactory ! = null ? rxObservableFactory . hashCode ( ) : 0 ) ; 
 + result = 31 * result + ( initialDataTransaction ! = null ? initialDataTransaction . hashCode ( ) : 0 ) ; 
 
 return result ; 
 } 
 @ @ - 309 , 6 + 322 , 7 @ @ public class RealmConfiguration { 
 private HashSet < Object > modules = new HashSet < Object > ( ) ; 
 private HashSet < Class < ? extends RealmObject > > debugSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; 
 private RxObservableFactory rxFactory ; 
 + private Realm . Transaction initialDataTransaction ; 
 
 / * * 
 * Creates an instance of the Builder for the RealmConfiguration . 
 @ @ - 481 , 6 + 495 , 17 @ @ public class RealmConfiguration { 
 return this ; 
 } 
 
 + / * * 
 + * Sets the initial data in { @ link io . realm . Realm } . This transaction will be executed only for the first time 
 + * when database file is created or while migrating the data when { @ link Builder # deleteRealmIfMigrationNeeded ( ) } is set . 
 + * 
 + * @ param transaction transaction to execute . 
 + * / 
 + public Builder initialData ( Realm . Transaction transaction ) { 
 + initialDataTransaction = transaction ; 
 + return this ; 
 + } 
 + 
 private void addModule ( Object module ) { 
 if ( module ! = null ) { 
 checkModule ( module ) ;
