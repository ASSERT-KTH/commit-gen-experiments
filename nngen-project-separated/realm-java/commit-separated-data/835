BLEU SCORE: 0.026341919627252283

TEST MSG: NotificationTests converted to use TestRealmConfigurationFactory
GENERATED MSG: Modify the unit tests to comply to Realm . close ( )

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 8290024 . . 313ceae 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 16 , 11 + 16 , 9 @ @ <nl> <nl> package io . realm ; <nl> <nl> - import android . content . Context ; <nl> import android . os . Handler ; <nl> import android . os . HandlerThread ; <nl> import android . os . Looper ; <nl> - import android . support . test . InstrumentationRegistry ; <nl> import android . support . test . annotation . UiThreadTest ; <nl> import android . support . test . rule . UiThreadTestRule ; <nl> import android . support . test . runner . AndroidJUnit4 ; <nl> @ @ - 52 , 6 + 50 , 7 @ @ import io . realm . entities . AllTypes ; <nl> import io . realm . entities . Dog ; <nl> import io . realm . internal . log . Logger ; <nl> import io . realm . internal . log . RealmLog ; <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> @ @ - 63 , 34 + 62 , 33 @ @ import static org . junit . Assert . fail ; <nl> @ RunWith ( AndroidJUnit4 . class ) <nl> public class NotificationsTest { <nl> <nl> - private Realm realm ; <nl> @ Rule <nl> public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule ( ) ; <nl> - private Context context ; <nl> + @ Rule <nl> + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> <nl> - @ Before <nl> - public void setUp ( ) throws Exception { <nl> - / / Injecting the Instrumentation instance is required <nl> - / / for your test to run with AndroidJUnitRunner . <nl> - context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> + private Realm realm ; <nl> + private RealmConfiguration realmConfig ; <nl> <nl> - Realm . deleteRealm ( TestHelper . createConfiguration ( context ) ) ; <nl> + @ Before <nl> + public void setUp ( ) { <nl> + realmConfig = configFactory . createConfiguration ( ) ; <nl> } <nl> <nl> @ After <nl> - public void tearDown ( ) throws Exception { <nl> + public void tearDown ( ) { <nl> if ( realm ! = null ) { <nl> realm . close ( ) ; <nl> } <nl> } <nl> <nl> @ Test <nl> - public void testFailingSetAutoRefreshOnNonLooperThread ( ) throws ExecutionException , InterruptedException { <nl> + public void failingSetAutoRefreshOnNonLooperThread ( ) throws ExecutionException , InterruptedException { <nl> ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ Override <nl> public Boolean call ( ) throws Exception { <nl> - Realm realm = Realm . getInstance ( context ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> boolean autoRefresh = realm . isAutoRefresh ( ) ; <nl> assertFalse ( autoRefresh ) ; <nl> try { <nl> @ @ - 105 , 18 + 103 , 17 @ @ public class NotificationsTest { <nl> } ) ; <nl> <nl> assertTrue ( future . get ( ) ) ; <nl> - RealmCache . invokeWithGlobalRefCount ( new RealmConfiguration . Builder ( context ) . build ( ) , <nl> - new TestHelper . ExpectedCountCallback ( 0 ) ) ; <nl> + RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; <nl> } <nl> <nl> @ Test <nl> - public void testSetAutoRefreshOnHandlerThread ( ) throws ExecutionException , InterruptedException { <nl> + public void setAutoRefresh _ onHandlerThread ( ) throws ExecutionException , InterruptedException { <nl> ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ Override <nl> public Boolean call ( ) throws Exception { <nl> Looper . prepare ( ) ; <nl> - Realm realm = Realm . getInstance ( context ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> assertTrue ( realm . isAutoRefresh ( ) ) ; <nl> realm . setAutoRefresh ( false ) ; <nl> assertFalse ( realm . isAutoRefresh ( ) ) ; <nl> @ @ - 126 , 14 + 123 , 14 @ @ public class NotificationsTest { <nl> return true ; <nl> } <nl> } ) ; <nl> + <nl> assertTrue ( future . get ( ) ) ; <nl> - RealmCache . invokeWithGlobalRefCount ( new RealmConfiguration . Builder ( context ) . build ( ) , <nl> - new TestHelper . ExpectedCountCallback ( 0 ) ) ; <nl> + RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; <nl> } <nl> <nl> @ Test <nl> @ UiThreadTest <nl> - public void testRemoveNotifications ( ) throws InterruptedException , ExecutionException { <nl> + public void removeChangeListener ( ) throws InterruptedException , ExecutionException { <nl> final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> @ @ - 142 , 7 + 139 , 7 @ @ public class NotificationsTest { <nl> } <nl> } ; <nl> <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> realm . addChangeListener ( listener ) ; <nl> realm . removeChangeListener ( listener ) ; <nl> <nl> @ @ - 155 , 7 + 152 , 7 @ @ public class NotificationsTest { <nl> <nl> @ Test <nl> @ UiThreadTest <nl> - public void testAddDuplicatedListener ( ) { <nl> + public void addChangeListener _ duplicatedListener ( ) { <nl> final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> @ @ - 164 , 7 + 161 , 7 @ @ public class NotificationsTest { <nl> } <nl> } ; <nl> <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> realm . addChangeListener ( listener ) ; <nl> realm . addChangeListener ( listener ) ; <nl> <nl> @ @ - 176 , 7 + 173 , 7 @ @ public class NotificationsTest { <nl> } <nl> <nl> @ Test <nl> - public void testNotificationsNumber ( ) throws InterruptedException , ExecutionException { <nl> + public void notificationsNumber ( ) throws InterruptedException , ExecutionException { <nl> final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> final AtomicBoolean isReady = new AtomicBoolean ( false ) ; <nl> final Looper [ ] looper = new Looper [ 1 ] ; <nl> @ @ - 196 , 7 + 193 , 7 @ @ public class NotificationsTest { <nl> try { <nl> Looper . prepare ( ) ; <nl> looper [ 0 ] = Looper . myLooper ( ) ; <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> realm . addChangeListener ( listener ) ; <nl> isReady . set ( true ) ; <nl> Looper . loop ( ) ; <nl> @ @ - 217 , 7 + 214 , 7 @ @ public class NotificationsTest { <nl> Thread . sleep ( 100 ) ; <nl> <nl> / / Trigger OnRealmChanged on background thread <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> realm . beginTransaction ( ) ; <nl> Dog dog = realm . createObject ( Dog . class ) ; <nl> dog . setName ( " Rex " ) ; <nl> @ @ - 237 , 12 + 234 , 11 @ @ public class NotificationsTest { <nl> } <nl> <nl> assertEquals ( 1 , counter . get ( ) ) ; <nl> - RealmCache . invokeWithGlobalRefCount ( new RealmConfiguration . Builder ( context ) . build ( ) , <nl> - new TestHelper . ExpectedCountCallback ( 0 ) ) ; <nl> + RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; <nl> } <nl> <nl> @ Test <nl> - public void testAutoUpdateRealmResults ( ) throws InterruptedException , ExecutionException { <nl> + public void autoUpdateRealmResults ( ) throws InterruptedException , ExecutionException { <nl> final int TEST _ SIZE = 10 ; <nl> final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> final AtomicBoolean isReady = new AtomicBoolean ( false ) ; <nl> @ @ - 260 , 7 + 256 , 7 @ @ public class NotificationsTest { <nl> looper [ 0 ] = Looper . myLooper ( ) ; <nl> Realm realm = null ; <nl> try { <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> final RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; <nl> assertEquals ( 0 , dogs . size ( ) ) ; <nl> listener [ 0 ] = new RealmChangeListener ( ) { <nl> @ @ - 289 , 7 + 285 , 7 @ @ public class NotificationsTest { <nl> } <nl> Thread . sleep ( 100 ) ; <nl> <nl> - Realm realm = Realm . getInstance ( context ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . beginTransaction ( ) ; <nl> for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { <nl> Dog dog = realm . createObject ( Dog . class ) ; <nl> @ @ - 317 , 12 + 313 , 11 @ @ public class NotificationsTest { <nl> assertEquals ( TEST _ SIZE , results . get ( 1 ) . intValue ( ) ) ; <nl> <nl> assertEquals ( 1 , counter . get ( ) ) ; <nl> - RealmCache . invokeWithGlobalRefCount ( new RealmConfiguration . Builder ( context ) . build ( ) , <nl> - new TestHelper . ExpectedCountCallback ( 0 ) ) ; <nl> + RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; <nl> } <nl> <nl> - / / TODO Disabled until we can figure out why this times out so often on the build server <nl> - public void DISABLEDtestCloseClearingHandlerMessages ( ) throws InterruptedException , TimeoutException , ExecutionException { <nl> + @ Test <nl> + public void closeClearingHandlerMessages ( ) throws InterruptedException , TimeoutException , ExecutionException { <nl> final int TEST _ SIZE = 10 ; <nl> final CountDownLatch backgroundLooperStarted = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch addHandlerMessages = new CountDownLatch ( 1 ) ; <nl> @ @ - 332 , 7 + 327 , 7 @ @ public class NotificationsTest { <nl> @ Override <nl> public Boolean call ( ) throws Exception { <nl> Looper . prepare ( ) ; / / Fake background thread with a looper , eg . a IntentService <nl> - Realm realm = Realm . getInstance ( context ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> backgroundLooperStarted . countDown ( ) ; <nl> <nl> / / Random operation in the client code <nl> @ @ - 355 , 7 + 350 , 7 @ @ public class NotificationsTest { <nl> threadHandler . post ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> - Looper . myLooper ( ) . quit ( ) ; <nl> + TestHelper . quitLooperOrFail ( ) ; <nl> } <nl> } ) ; <nl> <nl> @ @ - 372 , 7 + 367 , 7 @ @ public class NotificationsTest { <nl> backgroundLooperStarted . await ( 1 , TimeUnit . SECONDS ) ; <nl> <nl> / / Execute a transaction that will trigger a Realm update <nl> - Realm realm = Realm . getInstance ( context ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . beginTransaction ( ) ; <nl> for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { <nl> Dog dog = realm . createObject ( Dog . class ) ; <nl> @ @ - 392 , 8 + 387 , 8 @ @ public class NotificationsTest { <nl> <nl> @ Test <nl> @ UiThreadTest <nl> - public void testHandlerNotRemovedToSoon ( ) { <nl> - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , " private - realm " ) ; <nl> + public void handlerNotRemovedToSoon ( ) { <nl> + RealmConfiguration realmConfig = configFactory . createConfiguration ( " private - realm " ) ; <nl> Realm . deleteRealm ( realmConfig ) ; <nl> Realm instance1 = Realm . getInstance ( realmConfig ) ; <nl> Realm instance2 = Realm . getInstance ( realmConfig ) ; <nl> @ @ - 410 , 10 + 405 , 10 @ @ public class NotificationsTest { <nl> <nl> @ Test <nl> @ UiThreadTest <nl> - public void testImmediateNotificationsOnSameThread ( ) { <nl> + public void immediateNotificationsOnSameThread ( ) { <nl> final AtomicBoolean success = new AtomicBoolean ( false ) ; <nl> final RealmChangeListener listener [ ] = new RealmChangeListener [ 1 ] ; <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> listener [ 0 ] = new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> @ @ - 431 , 7 + 426 , 7 @ @ public class NotificationsTest { <nl> <nl> @ Test <nl> @ UiThreadTest <nl> - public void testEmptyCommitTriggerChangeListener ( ) { <nl> + public void emptyCommitTriggerChangeListener ( ) { <nl> final AtomicBoolean success = new AtomicBoolean ( false ) ; <nl> final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> @ @ - 439 , 7 + 434 , 7 @ @ public class NotificationsTest { <nl> success . set ( true ) ; <nl> } <nl> } ; <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> realm . addChangeListener ( listener ) ; <nl> realm . beginTransaction ( ) ; <nl> realm . commitTransaction ( ) ; <nl> @ @ - 448 , 7 + 443 , 7 @ @ public class NotificationsTest { <nl> <nl> @ Test <nl> @ UiThreadTest <nl> - public void testAddRemoveListenerConcurrency ( ) { <nl> + public void addRemoveListenerConcurrency ( ) { <nl> final AtomicInteger counter1 = new AtomicInteger ( 0 ) ; <nl> final AtomicInteger counter2 = new AtomicInteger ( 0 ) ; <nl> final AtomicInteger counter3 = new AtomicInteger ( 0 ) ; <nl> @ @ - 482 , 7 + 477 , 7 @ @ public class NotificationsTest { <nl> } <nl> } ; <nl> <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> realm . addChangeListener ( listener2 ) ; <nl> realm . addChangeListener ( listener3 ) ; <nl> <nl> @ @ - 513 , 9 + 508 , 9 @ @ public class NotificationsTest { <nl> <nl> @ Test <nl> @ UiThreadTest <nl> - public void testWeakReferenceListener ( ) throws InterruptedException { <nl> + public void weakReferenceListener ( ) throws InterruptedException { <nl> final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> @ @ - 544 , 9 + 539 , 9 @ @ public class NotificationsTest { <nl> / / without throwing an exception . <nl> @ Test <nl> @ UiThreadTest <nl> - public void testRemovingWeakReferenceListener ( ) throws InterruptedException { <nl> + public void removingWeakReferenceListener ( ) throws InterruptedException { <nl> final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> - realm = Realm . getInstance ( context ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> RealmChangeListener listenerA = new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> @ @ - 581 , 11 + 576 , 8 @ @ public class NotificationsTest { <nl> / / Tests that if the same configuration is used on 2 different Looper threads that each gets its own Handler . This <nl> / / prevents commitTransaction from accidentally posting messages to Handlers which might reference a closed Realm . <nl> @ Test <nl> - public void testDoNotUseClosedHandler ( ) throws InterruptedException { <nl> - final RealmConfiguration realmConfiguration = TestHelper . createConfiguration ( context ) ; <nl> + public void doNotUseClosedHandler ( ) throws InterruptedException { <nl> final AssertionFailedError [ ] threadAssertionError = new AssertionFailedError [ 1 ] ; / / Keep track of errors in test threads . <nl> - Realm . deleteRealm ( realmConfiguration ) ; <nl> - <nl> final CountDownLatch handlerNotified = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch backgroundThreadClosed = new CountDownLatch ( 1 ) ; <nl> <nl> @ @ - 595 , 7 + 587 , 7 @ @ public class NotificationsTest { <nl> @ Override <nl> public void run ( ) { <nl> Looper . prepare ( ) ; <nl> - final Realm realm = Realm . getInstance ( realmConfiguration ) ; <nl> + final Realm realm = Realm . getInstance ( realmConfig ) ; <nl> RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> @ @ - 613 , 7 + 605 , 7 @ @ public class NotificationsTest { <nl> @ Override <nl> public void run ( ) { <nl> Looper . prepare ( ) ; <nl> - Realm realm = Realm . getInstance ( realmConfiguration ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> RealmChangeListener listener = new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> @ @ - 635 , 7 + 627 , 7 @ @ public class NotificationsTest { <nl> <nl> / / Any REALM _ CHANGED message should now only reach the open Handler on Thread1 <nl> backgroundThreadClosed . await ( ) ; <nl> - Realm realm = Realm . getInstance ( realmConfiguration ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . beginTransaction ( ) ; <nl> realm . commitTransaction ( ) ; <nl> try { <nl> @ @ - 654 , 10 + 646 , 7 @ @ public class NotificationsTest { <nl> / / Test that we handle a Looper thread quiting it ' s looper before it is done executing the current loop ( = Realm . close ( ) <nl> / / isn ' t called yet ) . <nl> @ Test <nl> - public void testLooperThreadQuitsLooperEarly ( ) throws InterruptedException { <nl> - RealmConfiguration config = TestHelper . createConfiguration ( context ) ; <nl> - Realm . deleteRealm ( config ) ; <nl> - <nl> + public void looperThreadQuitsLooperEarly ( ) throws InterruptedException { <nl> final CountDownLatch backgroundLooperStartedAndStopped = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch mainThreadCommitCompleted = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch backgroundThreadStopped = new CountDownLatch ( 1 ) ; <nl> @ @ - 669 , 9 + 658 , 9 @ @ public class NotificationsTest { <nl> public void run ( ) { <nl> Looper . prepare ( ) ; / / Fake background thread with a looper , eg . a IntentService <nl> <nl> - Realm realm = Realm . getInstance ( context ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . setAutoRefresh ( false ) ; <nl> - Looper . myLooper ( ) . quit ( ) ; <nl> + TestHelper . quitLooperOrFail ( ) ; <nl> backgroundLooperStartedAndStopped . countDown ( ) ; <nl> try { <nl> mainThreadCommitCompleted . await ( ) ; <nl> @ @ - 685 , 7 + 674 , 7 @ @ public class NotificationsTest { <nl> <nl> / / Create a commit on another thread <nl> TestHelper . awaitOrFail ( backgroundLooperStartedAndStopped ) ; <nl> - Realm realm = Realm . getInstance ( config ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> Logger logger = TestHelper . getFailureLogger ( Log . WARN ) ; <nl> RealmLog . add ( logger ) ; <nl> <nl> @ @ - 699 , 7 + 688 , 7 @ @ public class NotificationsTest { <nl> } <nl> <nl> @ Test <nl> - public void testHandlerThreadShouldReceiveNotification ( ) throws ExecutionException , InterruptedException { <nl> + public void handlerThreadShouldReceiveNotification ( ) throws ExecutionException , InterruptedException { <nl> final AssertionFailedError [ ] assertionFailedErrors = new AssertionFailedError [ 1 ] ; <nl> final CountDownLatch backgroundThreadReady = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch numberOfInvocation = new CountDownLatch ( 1 ) ; <nl> @ @ - 715 , 7 + 704 , 7 @ @ public class NotificationsTest { <nl> } catch ( AssertionFailedError e ) { <nl> assertionFailedErrors [ 0 ] = e ; <nl> } <nl> - final Realm backgroundRealm = Realm . getInstance ( context ) ; <nl> + final Realm backgroundRealm = Realm . getInstance ( realmConfig ) ; <nl> backgroundRealm . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> @ @ - 729 , 7 + 718 , 7 @ @ public class NotificationsTest { <nl> TestHelper . awaitOrFail ( backgroundThreadReady ) ; <nl> / / At this point the background thread started & registered the listener <nl> <nl> - Realm realm = Realm . getInstance ( context ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . beginTransaction ( ) ; <nl> realm . createObject ( AllTypes . class ) ; <nl> realm . commitTransaction ( ) ; <nl> @ @ - 743 , 14 + 732 , 14 @ @ public class NotificationsTest { <nl> } <nl> <nl> @ Test <nl> - public void testNonLooperThreadShouldNotifyLooperThreadAboutCommit ( ) throws Throwable { <nl> + public void nonLooperThreadShouldNotifyLooperThreadAboutCommit ( ) throws Throwable { <nl> final CountDownLatch mainThreadReady = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch numberOfInvocation = new CountDownLatch ( 1 ) ; <nl> Thread thread = new Thread ( ) { <nl> @ Override <nl> public void run ( ) { <nl> TestHelper . awaitOrFail ( mainThreadReady ) ; <nl> - Realm realm = Realm . getInstance ( context ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . beginTransaction ( ) ; <nl> realm . createObject ( AllTypes . class ) ; <nl> realm . commitTransaction ( ) ; <nl> @ @ - 765 , 7 + 754 , 7 @ @ public class NotificationsTest { <nl> handler . post ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> - final Realm mainRealm = Realm . getInstance ( context ) ; <nl> + final Realm mainRealm = Realm . getInstance ( realmConfig ) ; <nl> mainRealm . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> @ @ - 785 , 7 + 774 , 7 @ @ public class NotificationsTest { <nl> / / to advance to the latest version . We make sure in this test that all Realm listeners will be notified <nl> / / regardless of the presence of an async RealmResults that will delay the ` REALM _ CHANGE ` sometimes <nl> @ Test <nl> - public void testAsyncRealmResultsShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { <nl> + public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { <nl> final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger ( 0 ) ; <nl> final AtomicInteger numberOfAsyncRealmResultsCallbackInvocation = new AtomicInteger ( 0 ) ; <nl> final CountDownLatch signalTestFinished = new CountDownLatch ( 2 ) ; <nl> @ @ - 801 , 11 + 790 , 11 @ @ public class NotificationsTest { <nl> backgroundLooper [ 0 ] = Looper . myLooper ( ) ; <nl> <nl> try { <nl> - realm [ 0 ] = Realm . getInstance ( context ) ; <nl> + realm [ 0 ] = Realm . getInstance ( realmConfig ) ; <nl> realm [ 0 ] . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> - RealmResults < Dog > dogs = null ; / / to keep it as a strong reference <nl> + RealmResults < Dog > dogs ; / / to keep it as a strong reference <nl> switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { <nl> case 1 : { <nl> / / first commit <nl> @ @ - 821 , 7 + 810 , 7 @ @ public class NotificationsTest { <nl> new Thread ( ) { <nl> @ Override <nl> public void run ( ) { <nl> - Realm realm = Realm . getInstance ( context ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . beginTransaction ( ) ; <nl> realm . createObject ( Dog . class ) ; <nl> realm . commitTransaction ( ) ; <nl> @ @ - 873 , 7 + 862 , 7 @ @ public class NotificationsTest { <nl> / / to advance to the latest version . We make sure in this test that all Realm listeners will be notified <nl> / / regardless of the presence of an async RealmObject that will delay the ` REALM _ CHANGE ` sometimes <nl> @ Test <nl> - public void testAsyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { <nl> + public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { <nl> final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger ( 0 ) ; <nl> final AtomicInteger numberOfAsyncRealmObjectCallbackInvocation = new AtomicInteger ( 0 ) ; <nl> final CountDownLatch signalTestFinished = new CountDownLatch ( 1 ) ; <nl> @ @ - 889 , 11 + 878 , 11 @ @ public class NotificationsTest { <nl> backgroundLooper [ 0 ] = Looper . myLooper ( ) ; <nl> <nl> try { <nl> - realm [ 0 ] = Realm . getInstance ( context ) ; <nl> + realm [ 0 ] = Realm . getInstance ( realmConfig ) ; <nl> realm [ 0 ] . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> public void onChange ( ) { <nl> - Dog dog = null ; / / to keep it as a strong reference <nl> + Dog dog ; / / to keep it as a strong reference <nl> switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { <nl> case 1 : { <nl> / / first commit <nl> @ @ - 909 , 7 + 898 , 7 @ @ public class NotificationsTest { <nl> new Thread ( ) { <nl> @ Override <nl> public void run ( ) { <nl> - Realm realm = Realm . getInstance ( context ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . beginTransaction ( ) ; <nl> realm . createObject ( Dog . class ) ; <nl> realm . commitTransaction ( ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> index 50afc46 . . 53d40c2 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> @ @ - 21 , 6 + 21 , 8 @ @ import android . content . res . AssetManager ; <nl> import android . os . Looper ; <nl> import android . util . Log ; <nl> <nl> + import org . junit . Assert ; <nl> + <nl> import java . io . BufferedReader ; <nl> import java . io . ByteArrayInputStream ; <nl> import java . io . File ; <nl> @ @ - 706 , 4 + 708 , 13 @ @ public class TestHelper { <nl> AssetManager assetManager = context . getAssets ( ) ; <nl> return assetManager . open ( file ) ; <nl> } <nl> + <nl> + public static void quitLooperOrFail ( ) { <nl> + Looper looper = Looper . myLooper ( ) ; <nl> + if ( looper ! = null ) { <nl> + looper . quit ( ) ; <nl> + } else { <nl> + Assert . fail ( ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 5104807 . . 2874dd1 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 18 , 8 + 18 , 6 @ @ package io . realm ; <nl> import android . os . Looper ; <nl> import android . test . AndroidTestCase ; <nl> <nl> - import java . util . ArrayList ; <nl> - import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . concurrent . Callable ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> @ @ - 38 , 7 + 36 , 6 @ @ public class NotificationsTest extends AndroidTestCase { <nl> <nl> @ Override <nl> protected void setUp ( ) throws Exception { <nl> - Realm . realmsCache . remove ( ) ; <nl> Realm . deleteRealmFile ( getContext ( ) ) ; <nl> } <nl> <nl> @ @ - 48 , 7 + 45 , 8 @ @ public class NotificationsTest extends AndroidTestCase { <nl> @ Override <nl> public Boolean call ( ) throws Exception { <nl> try { <nl> - @ SuppressWarnings ( " UnusedDeclaration " ) Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + realm . close ( ) ; <nl> return false ; <nl> } catch ( IllegalStateException ignored ) { <nl> return true ; <nl> @ @ - 58 , 44 + 56 , 7 @ @ public class NotificationsTest extends AndroidTestCase { <nl> <nl> Boolean result = future . get ( ) ; <nl> assertTrue ( result ) ; <nl> - } <nl> - <nl> - public void testNotifications ( ) throws InterruptedException , ExecutionException { <nl> - ExecutorService executorService = Executors . newFixedThreadPool ( 2 ) ; <nl> - <nl> - final AtomicInteger changed = new AtomicInteger ( 0 ) ; <nl> - <nl> - List < Callable < Void > > callables = new ArrayList < Callable < Void > > ( ) ; <nl> - callables . add ( new Callable < Void > ( ) { <nl> - @ Override <nl> - public Void call ( ) throws Exception { <nl> - Looper . prepare ( ) ; <nl> - Realm realm = Realm . getInstance ( getContext ( ) ) ; / / This does not sent a message to itself [ 0 ] <nl> - realm . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - changed . incrementAndGet ( ) ; <nl> - } <nl> - } ) ; <nl> - Looper . loop ( ) ; <nl> - return null ; <nl> - } <nl> - } ) ; <nl> - callables . add ( new Callable < Void > ( ) { <nl> - @ Override <nl> - public Void call ( ) throws Exception { <nl> - Realm realm = Realm . getInstance ( getContext ( ) , false ) ; / / This will notify the other thread [ 1 ] <nl> - realm . beginTransaction ( ) ; <nl> - Dog dog = realm . createObject ( Dog . class ) ; <nl> - dog . setName ( " Rex " ) ; <nl> - realm . commitTransaction ( ) ; / / This will notify the other thread [ 2 ] <nl> - return null ; <nl> - } <nl> - } ) ; <nl> - <nl> - executorService . invokeAll ( callables , 2 , TimeUnit . SECONDS ) ; <nl> - <nl> - assertEquals ( 2 , changed . get ( ) ) ; <nl> + assertTrue ( Realm . realmsCache . get ( ) . isEmpty ( ) ) ; <nl> } <nl> <nl> public void testFailingSetAutoRefreshOnNonLooperThread ( ) throws ExecutionException , InterruptedException { <nl> @ @ - 108 , 13 + 69 , 16 @ @ public class NotificationsTest extends AndroidTestCase { <nl> assertFalse ( autoRefresh ) ; <nl> try { <nl> realm . setAutoRefresh ( true ) ; <nl> + realm . close ( ) ; <nl> return false ; <nl> } catch ( IllegalStateException ignored ) { <nl> + realm . close ( ) ; <nl> return true ; <nl> } <nl> } <nl> } ) ; <nl> assertTrue ( future . get ( ) ) ; <nl> + assertTrue ( Realm . realmsCache . get ( ) . isEmpty ( ) ) ; <nl> } <nl> <nl> public void testSetAutoRefreshOnHandlerThread ( ) throws ExecutionException , InterruptedException { <nl> @ @ - 129 , 10 + 93 , 12 @ @ public class NotificationsTest extends AndroidTestCase { <nl> assertFalse ( realm . isAutoRefresh ( ) ) ; <nl> realm . setAutoRefresh ( true ) ; <nl> assertTrue ( realm . isAutoRefresh ( ) ) ; <nl> + realm . close ( ) ; <nl> return true ; <nl> } <nl> } ) ; <nl> assertTrue ( future . get ( ) ) ; <nl> + assertTrue ( Realm . realmsCache . get ( ) . isEmpty ( ) ) ; <nl> } <nl> <nl> public void testNotificationsNumber ( ) throws InterruptedException , ExecutionException { <nl> @ @ - 143 , 16 + 109 , 23 @ @ public class NotificationsTest extends AndroidTestCase { <nl> Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ Override <nl> public Boolean call ( ) throws Exception { <nl> - Looper . prepare ( ) ; <nl> - Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - realm . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - counter . incrementAndGet ( ) ; <nl> + Realm realm = null ; <nl> + try { <nl> + Looper . prepare ( ) ; <nl> + realm = Realm . getInstance ( getContext ( ) ) ; <nl> + realm . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + counter . incrementAndGet ( ) ; <nl> + } <nl> + } ) ; <nl> + isReady . set ( true ) ; <nl> + Looper . loop ( ) ; <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> } <nl> - } ) ; <nl> - isReady . set ( true ) ; <nl> - Looper . loop ( ) ; <nl> + } <nl> return true ; <nl> } <nl> } ) ; <nl> @ @ - 168 , 12 + 141 , 14 @ @ public class NotificationsTest extends AndroidTestCase { <nl> Dog dog = realm . createObject ( Dog . class ) ; <nl> dog . setName ( " Rex " ) ; <nl> realm . commitTransaction ( ) ; <nl> + realm . close ( ) ; <nl> <nl> try { <nl> future . get ( 1 , TimeUnit . SECONDS ) ; <nl> } catch ( TimeoutException ignore ) { } <nl> <nl> assertEquals ( 1 , counter . get ( ) ) ; <nl> + assertTrue ( Realm . realmsCache . get ( ) . isEmpty ( ) ) ; <nl> } <nl> <nl> public void testAutoUpdateRealmResults ( ) throws InterruptedException , ExecutionException { <nl> @ @ - 187 , 19 + 162 , 25 @ @ public class NotificationsTest extends AndroidTestCase { <nl> @ Override <nl> public Boolean call ( ) throws Exception { <nl> Looper . prepare ( ) ; <nl> - Realm . deleteRealmFile ( getContext ( ) ) ; <nl> - final Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - final RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; <nl> - assertEquals ( 0 , dogs . size ( ) ) ; <nl> - realm . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - int c = counter . incrementAndGet ( ) ; <nl> - results . put ( c , dogs . size ( ) ) ; <nl> + Realm realm = null ; <nl> + try { <nl> + realm = Realm . getInstance ( getContext ( ) ) ; <nl> + final RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; <nl> + assertEquals ( 0 , dogs . size ( ) ) ; <nl> + realm . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + int c = counter . incrementAndGet ( ) ; <nl> + results . put ( c , dogs . size ( ) ) ; <nl> + } <nl> + } ) ; <nl> + isReady . set ( true ) ; <nl> + Looper . loop ( ) ; <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> } <nl> - } ) ; <nl> - isReady . set ( true ) ; <nl> - Looper . loop ( ) ; <nl> + } <nl> return true ; <nl> } <nl> } ) ; <nl> @ @ - 218 , 6 + 199 , 7 @ @ public class NotificationsTest extends AndroidTestCase { <nl> } <nl> realm . commitTransaction ( ) ; <nl> assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> + realm . close ( ) ; <nl> <nl> try { <nl> future . get ( 2 , TimeUnit . SECONDS ) ; <nl> @ @ - 226 , 8 + 208 , 9 @ @ public class NotificationsTest extends AndroidTestCase { <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> <nl> assertTrue ( results . containsKey ( 1 ) ) ; <nl> - assertEquals ( 10 , results . get ( 1 ) . intValue ( ) ) ; <nl> + assertEquals ( TEST _ SIZE , results . get ( 1 ) . intValue ( ) ) ; <nl> <nl> assertEquals ( 1 , counter . get ( ) ) ; <nl> + assertTrue ( Realm . realmsCache . get ( ) . isEmpty ( ) ) ; <nl> } <nl> } <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmAnnotationTest . java b / realm / src / androidTest / java / io / realm / RealmAnnotationTest . java <nl> index a061d5e . . 9e2ed23 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmAnnotationTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmAnnotationTest . java <nl> @ @ - 36 , 6 + 36 , 11 @ @ public class RealmAnnotationTest extends AndroidTestCase { <nl> testRealm . commitTransaction ( ) ; <nl> } <nl> <nl> + @ Override <nl> + protected void tearDown ( ) throws Exception { <nl> + testRealm . close ( ) ; <nl> + } <nl> + <nl> public void testIgnore ( ) { <nl> Table table = testRealm . getTable ( AnnotationTypes . class ) ; <nl> assertEquals ( - 1 , table . getColumnIndex ( " ignoreString " ) ) ; <nl> @ @ - 46 , 4 + 51 , 4 @ @ public class RealmAnnotationTest extends AndroidTestCase { <nl> assertTrue ( table . hasIndex ( table . getColumnIndex ( " indexString " ) ) ) ; <nl> assertFalse ( table . hasIndex ( table . getColumnIndex ( " notIndexString " ) ) ) ; <nl> } <nl> - } <nl> \ No newline at end of file <nl> + } <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmLinkTests . java b / realm / src / androidTest / java / io / realm / RealmLinkTests . java <nl> index 4d9786f . . 38b7724 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmLinkTests . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmLinkTests . java <nl> @ @ - 74 , 6 + 74 , 11 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> testRealm . commitTransaction ( ) ; <nl> } <nl> <nl> + @ Override <nl> + protected void tearDown ( ) throws Exception { <nl> + testRealm . close ( ) ; <nl> + } <nl> + <nl> public void testObjects ( ) { <nl> RealmResults < Owner > owners = testRealm . allObjects ( Owner . class ) ; <nl> assertEquals ( 1 , owners . size ( ) ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmObjectTest . java b / realm / src / androidTest / java / io / realm / RealmObjectTest . java <nl> index f1b93ec . . 46ac1aa 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmObjectTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmObjectTest . java <nl> @ @ - 36 , 9 + 36 , 11 @ @ import io . realm . internal . Row ; <nl> <nl> public class RealmObjectTest extends AndroidTestCase { <nl> <nl> - protected Realm testRealm ; <nl> + private Realm testRealm ; <nl> <nl> - private int TEST _ SIZE = 5 ; <nl> + private static final int TEST _ SIZE = 5 ; <nl> + private static final boolean REMOVE _ FIRST = true ; <nl> + private static final boolean REMOVE _ LAST = false ; <nl> <nl> @ Override <nl> protected void setUp ( ) throws Exception { <nl> @ @ - 46 , 6 + 48 , 10 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> testRealm = Realm . getInstance ( getContext ( ) ) ; <nl> } <nl> <nl> + @ Override <nl> + protected void tearDown ( ) throws Exception { <nl> + testRealm . close ( ) ; <nl> + } <nl> <nl> / / test io . realm . RealmObject Api <nl> <nl> @ @ - 107 , 16 + 113 , 19 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> fido . getName ( ) ; <nl> try { <nl> rex . getName ( ) ; <nl> + realm . close ( ) ; <nl> fail ( ) ; <nl> } catch ( IllegalStateException ignored ) { } <nl> <nl> / / deleting rex twice should fail <nl> realm . beginTransaction ( ) ; <nl> try { <nl> - rex . removeFromRealm ( ) ; <nl> + rex . removeFromRealm ( ) ; <nl> + realm . close ( ) ; <nl> fail ( ) ; <nl> } catch ( IllegalStateException ignored ) { } <nl> realm . commitTransaction ( ) ; <nl> + realm . close ( ) ; <nl> } <nl> <nl> / / query for an object , remove it and see it has been removed from realm <nl> @ @ - 139 , 14 + 148 , 17 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> try { <nl> dogToAdd . getName ( ) ; <nl> + realm . close ( ) ; <nl> fail ( ) ; <nl> } <nl> catch ( IllegalStateException ignored ) { } <nl> try { <nl> dogToRemove . getName ( ) ; <nl> + realm . close ( ) ; <nl> fail ( ) ; <nl> } <nl> catch ( IllegalStateException ignored ) { } <nl> + realm . close ( ) ; <nl> } <nl> <nl> public void removeOneByOne ( boolean atFirst ) { <nl> @ @ - 156 , 7 + 168 , 7 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { <nl> Dog dog = testRealm . createObject ( Dog . class ) ; <nl> dog . setAge ( i ) ; <nl> - ages . add ( new Long ( i ) ) ; <nl> + ages . add ( ( long ) i ) ; <nl> } <nl> testRealm . commitTransaction ( ) ; <nl> <nl> @ @ - 171 , 7 + 183 , 7 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> } else { <nl> dogToRemove = dogs . last ( ) ; <nl> } <nl> - ages . remove ( new Long ( dogToRemove . getAge ( ) ) ) ; <nl> + ages . remove ( Long . valueOf ( dogToRemove . getAge ( ) ) ) ; <nl> dogToRemove . removeFromRealm ( ) ; <nl> <nl> / / object is no longer valid <nl> @ @ - 187 , 14 + 199 , 12 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> RealmResults < Dog > remainingDogs = testRealm . allObjects ( Dog . class ) ; <nl> assertEquals ( TEST _ SIZE - i - 1 , remainingDogs . size ( ) ) ; <nl> for ( Dog dog : remainingDogs ) { <nl> - assertTrue ( ages . contains ( new Long ( dog . getAge ( ) ) ) ) ; <nl> + assertTrue ( ages . contains ( Long . valueOf ( dog . getAge ( ) ) ) ) ; <nl> } <nl> } <nl> } <nl> <nl> public void testRemoveFromRealmAtPosition ( ) { <nl> - boolean REMOVE _ FIRST = true ; <nl> - boolean REMOVE _ LAST = false ; <nl> removeOneByOne ( REMOVE _ FIRST ) ; <nl> removeOneByOne ( REMOVE _ LAST ) ; <nl> } <nl> @ @ - 222 , 7 + 232 , 9 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> } <nl> } ) ; <nl> <nl> - return future . get ( ) ; <nl> + Boolean result = future . get ( ) ; <nl> + realm . close ( ) ; <nl> + return result ; <nl> } <nl> <nl> public void testGetSetWrongThread ( ) throws ExecutionException , InterruptedException { <nl> @ @ - 295 , 7 + 307 , 7 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> testRealm . commitTransaction ( ) ; <nl> <nl> AllTypes object = testRealm . allObjects ( AllTypes . class ) . first ( ) ; <nl> - assertEquals ( 1000 * ( date . getTime ( ) / 1000 ) , 1000 * ( object . getColumnDate ( ) . getTime ( ) / 1000 ) ) ; / / Realm does not support millisec precision <nl> + assertEquals ( 1000 * ( date . getTime ( ) / 1000 ) , 1000 * ( object . getColumnDate ( ) . getTime ( ) / 1000 ) ) ; / / Realm does not support millisec precision <nl> } <nl> <nl> public void testDate ( ) { <nl> @ @ - 345 , 5 + 357 , 6 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> assertEquals ( 2 , anc2 . getmObject ( ) ) ; <nl> assertEquals ( 3 , anc2 . getObject _ id ( ) ) ; <nl> assertTrue ( anc2 . isObject ( ) ) ; <nl> + realm . close ( ) ; <nl> } <nl> } <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> index 778996a . . 294835d 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> @ @ - 44 , 13 + 44 , 12 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> private final static String FIELD _ DATE = " columnDate " ; <nl> private final static String FIELD _ KOREAN _ CHAR = " 델 타 " ; <nl> private final static String FIELD _ GREEK _ CHAR = " Δ έ λ τ α " ; <nl> - private final static String FIELD _ BYTE = " columnBinary " ; <nl> - private final static String FIELD _ DOG = " columnRealmObject " ; <nl> + / / private final static String FIELD _ BYTE = " columnBinary " ; <nl> + / / private final static String FIELD _ DOG = " columnRealmObject " ; <nl> <nl> @ Override <nl> protected void setUp ( ) throws InterruptedException { <nl> - boolean result = Realm . deleteRealmFile ( getContext ( ) ) ; <nl> - assertTrue ( result ) ; <nl> + Realm . deleteRealmFile ( getContext ( ) ) ; <nl> <nl> testRealm = Realm . getInstance ( getContext ( ) ) ; <nl> <nl> @ @ - 74 , 6 + 73 , 11 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> testRealm . commitTransaction ( ) ; <nl> } <nl> <nl> + @ Override <nl> + protected void tearDown ( ) throws Exception { <nl> + testRealm . close ( ) ; <nl> + } <nl> + <nl> private enum Method { <nl> METHOD _ MIN , <nl> METHOD _ MAX , <nl> @ @ - 83 , 8 + 87 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> METHOD _ WHERE <nl> } <nl> <nl> - ; <nl> - <nl> public boolean methodWrongThread ( final Method method ) throws ExecutionException , InterruptedException { <nl> final RealmResults < AllTypes > allTypeses = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> @ @ - 121 , 6 + 123 , 12 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> return future . get ( ) ; <nl> } <nl> <nl> + public void testMinWrongThread ( ) throws ExecutionException , InterruptedException { <nl> + for ( Method method : Method . values ( ) ) { <nl> + assertTrue ( methodWrongThread ( method ) ) ; <nl> + } <nl> + } <nl> + <nl> / / test io . realm . ResultList Api <nl> <nl> / / void clear ( Class < ? > classSpec ) <nl> @ @ - 389 , 9 + 397 , 9 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> public void testSortOnNonExistingColumn ( ) { <nl> try { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> - RealmResults < AllTypes > sortedList = resultList . sort ( " Non - existing " ) ; <nl> + resultList . sort ( " Non - existing " ) ; <nl> fail ( " Column should not exist " ) ; <nl> - } catch ( ArrayIndexOutOfBoundsException e ) { <nl> + } catch ( ArrayIndexOutOfBoundsException ignored ) { <nl> } <nl> } <nl> <nl> @ @ - 522 , 7 + 530 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> allTypes3 . setColumnString ( " work " ) ; <nl> try { <nl> RealmResults < AllTypes > result = testRealm . allObjects ( AllTypes . class ) ; <nl> - RealmResults < AllTypes > sortedResult = result . sort ( FIELD _ STRING ) ; <nl> + result . sort ( FIELD _ STRING ) ; <nl> } catch ( IllegalArgumentException e ) { <nl> fail ( " Failed to sort with two kinds of alphabets " ) ; <nl> } <nl> @ @ - 533 , 7 + 541 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> testRealm . clear ( AllTypes . class ) ; <nl> testRealm . commitTransaction ( ) ; <nl> try { <nl> - RealmResults < AllTypes > sortResult = testRealm . where ( AllTypes . class ) . findAll ( ) . sort ( FIELD _ STRING ) ; <nl> + testRealm . where ( AllTypes . class ) . findAll ( ) . sort ( FIELD _ STRING ) ; <nl> } catch ( IllegalArgumentException e ) { <nl> fail ( " Failed to sort an empty RealmResults " ) ; <nl> } <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 353e97d . . 59085b5 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 619 , 9 + 619 , 6 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - <nl> - / * NOTE : This is commented out while we fix the other unit tests to be good citizens in Closeable land : ) <nl> - <nl> public void testReferenceCounting ( ) { <nl> / / At this point reference count should be one because of the setUp method <nl> try { <nl> @ @ - 654 , 5 + 651 , 4 @ @ public class RealmTest extends AndroidTestCase { <nl> } catch ( IllegalStateException ignored ) { <nl> } <nl> } <nl> - * / <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 index 8290024 . . 313ceae 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 16 , 11 + 16 , 9 @ @ 
 
 package io . realm ; 
 
 - import android . content . Context ; 
 import android . os . Handler ; 
 import android . os . HandlerThread ; 
 import android . os . Looper ; 
 - import android . support . test . InstrumentationRegistry ; 
 import android . support . test . annotation . UiThreadTest ; 
 import android . support . test . rule . UiThreadTestRule ; 
 import android . support . test . runner . AndroidJUnit4 ; 
 @ @ - 52 , 6 + 50 , 7 @ @ import io . realm . entities . AllTypes ; 
 import io . realm . entities . Dog ; 
 import io . realm . internal . log . Logger ; 
 import io . realm . internal . log . RealmLog ; 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 @ @ - 63 , 34 + 62 , 33 @ @ import static org . junit . Assert . fail ; 
 @ RunWith ( AndroidJUnit4 . class ) 
 public class NotificationsTest { 
 
 - private Realm realm ; 
 @ Rule 
 public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule ( ) ; 
 - private Context context ; 
 + @ Rule 
 + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 
 - @ Before 
 - public void setUp ( ) throws Exception { 
 - / / Injecting the Instrumentation instance is required 
 - / / for your test to run with AndroidJUnitRunner . 
 - context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 + private Realm realm ; 
 + private RealmConfiguration realmConfig ; 
 
 - Realm . deleteRealm ( TestHelper . createConfiguration ( context ) ) ; 
 + @ Before 
 + public void setUp ( ) { 
 + realmConfig = configFactory . createConfiguration ( ) ; 
 } 
 
 @ After 
 - public void tearDown ( ) throws Exception { 
 + public void tearDown ( ) { 
 if ( realm ! = null ) { 
 realm . close ( ) ; 
 } 
 } 
 
 @ Test 
 - public void testFailingSetAutoRefreshOnNonLooperThread ( ) throws ExecutionException , InterruptedException { 
 + public void failingSetAutoRefreshOnNonLooperThread ( ) throws ExecutionException , InterruptedException { 
 ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ Override 
 public Boolean call ( ) throws Exception { 
 - Realm realm = Realm . getInstance ( context ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 boolean autoRefresh = realm . isAutoRefresh ( ) ; 
 assertFalse ( autoRefresh ) ; 
 try { 
 @ @ - 105 , 18 + 103 , 17 @ @ public class NotificationsTest { 
 } ) ; 
 
 assertTrue ( future . get ( ) ) ; 
 - RealmCache . invokeWithGlobalRefCount ( new RealmConfiguration . Builder ( context ) . build ( ) , 
 - new TestHelper . ExpectedCountCallback ( 0 ) ) ; 
 + RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; 
 } 
 
 @ Test 
 - public void testSetAutoRefreshOnHandlerThread ( ) throws ExecutionException , InterruptedException { 
 + public void setAutoRefresh _ onHandlerThread ( ) throws ExecutionException , InterruptedException { 
 ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ Override 
 public Boolean call ( ) throws Exception { 
 Looper . prepare ( ) ; 
 - Realm realm = Realm . getInstance ( context ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 assertTrue ( realm . isAutoRefresh ( ) ) ; 
 realm . setAutoRefresh ( false ) ; 
 assertFalse ( realm . isAutoRefresh ( ) ) ; 
 @ @ - 126 , 14 + 123 , 14 @ @ public class NotificationsTest { 
 return true ; 
 } 
 } ) ; 
 + 
 assertTrue ( future . get ( ) ) ; 
 - RealmCache . invokeWithGlobalRefCount ( new RealmConfiguration . Builder ( context ) . build ( ) , 
 - new TestHelper . ExpectedCountCallback ( 0 ) ) ; 
 + RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; 
 } 
 
 @ Test 
 @ UiThreadTest 
 - public void testRemoveNotifications ( ) throws InterruptedException , ExecutionException { 
 + public void removeChangeListener ( ) throws InterruptedException , ExecutionException { 
 final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 @ @ - 142 , 7 + 139 , 7 @ @ public class NotificationsTest { 
 } 
 } ; 
 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 realm . addChangeListener ( listener ) ; 
 realm . removeChangeListener ( listener ) ; 
 
 @ @ - 155 , 7 + 152 , 7 @ @ public class NotificationsTest { 
 
 @ Test 
 @ UiThreadTest 
 - public void testAddDuplicatedListener ( ) { 
 + public void addChangeListener _ duplicatedListener ( ) { 
 final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 @ @ - 164 , 7 + 161 , 7 @ @ public class NotificationsTest { 
 } 
 } ; 
 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 realm . addChangeListener ( listener ) ; 
 realm . addChangeListener ( listener ) ; 
 
 @ @ - 176 , 7 + 173 , 7 @ @ public class NotificationsTest { 
 } 
 
 @ Test 
 - public void testNotificationsNumber ( ) throws InterruptedException , ExecutionException { 
 + public void notificationsNumber ( ) throws InterruptedException , ExecutionException { 
 final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 final AtomicBoolean isReady = new AtomicBoolean ( false ) ; 
 final Looper [ ] looper = new Looper [ 1 ] ; 
 @ @ - 196 , 7 + 193 , 7 @ @ public class NotificationsTest { 
 try { 
 Looper . prepare ( ) ; 
 looper [ 0 ] = Looper . myLooper ( ) ; 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 realm . addChangeListener ( listener ) ; 
 isReady . set ( true ) ; 
 Looper . loop ( ) ; 
 @ @ - 217 , 7 + 214 , 7 @ @ public class NotificationsTest { 
 Thread . sleep ( 100 ) ; 
 
 / / Trigger OnRealmChanged on background thread 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 realm . beginTransaction ( ) ; 
 Dog dog = realm . createObject ( Dog . class ) ; 
 dog . setName ( " Rex " ) ; 
 @ @ - 237 , 12 + 234 , 11 @ @ public class NotificationsTest { 
 } 
 
 assertEquals ( 1 , counter . get ( ) ) ; 
 - RealmCache . invokeWithGlobalRefCount ( new RealmConfiguration . Builder ( context ) . build ( ) , 
 - new TestHelper . ExpectedCountCallback ( 0 ) ) ; 
 + RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; 
 } 
 
 @ Test 
 - public void testAutoUpdateRealmResults ( ) throws InterruptedException , ExecutionException { 
 + public void autoUpdateRealmResults ( ) throws InterruptedException , ExecutionException { 
 final int TEST _ SIZE = 10 ; 
 final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 final AtomicBoolean isReady = new AtomicBoolean ( false ) ; 
 @ @ - 260 , 7 + 256 , 7 @ @ public class NotificationsTest { 
 looper [ 0 ] = Looper . myLooper ( ) ; 
 Realm realm = null ; 
 try { 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 final RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; 
 assertEquals ( 0 , dogs . size ( ) ) ; 
 listener [ 0 ] = new RealmChangeListener ( ) { 
 @ @ - 289 , 7 + 285 , 7 @ @ public class NotificationsTest { 
 } 
 Thread . sleep ( 100 ) ; 
 
 - Realm realm = Realm . getInstance ( context ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . beginTransaction ( ) ; 
 for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { 
 Dog dog = realm . createObject ( Dog . class ) ; 
 @ @ - 317 , 12 + 313 , 11 @ @ public class NotificationsTest { 
 assertEquals ( TEST _ SIZE , results . get ( 1 ) . intValue ( ) ) ; 
 
 assertEquals ( 1 , counter . get ( ) ) ; 
 - RealmCache . invokeWithGlobalRefCount ( new RealmConfiguration . Builder ( context ) . build ( ) , 
 - new TestHelper . ExpectedCountCallback ( 0 ) ) ; 
 + RealmCache . invokeWithGlobalRefCount ( realmConfig , new TestHelper . ExpectedCountCallback ( 0 ) ) ; 
 } 
 
 - / / TODO Disabled until we can figure out why this times out so often on the build server 
 - public void DISABLEDtestCloseClearingHandlerMessages ( ) throws InterruptedException , TimeoutException , ExecutionException { 
 + @ Test 
 + public void closeClearingHandlerMessages ( ) throws InterruptedException , TimeoutException , ExecutionException { 
 final int TEST _ SIZE = 10 ; 
 final CountDownLatch backgroundLooperStarted = new CountDownLatch ( 1 ) ; 
 final CountDownLatch addHandlerMessages = new CountDownLatch ( 1 ) ; 
 @ @ - 332 , 7 + 327 , 7 @ @ public class NotificationsTest { 
 @ Override 
 public Boolean call ( ) throws Exception { 
 Looper . prepare ( ) ; / / Fake background thread with a looper , eg . a IntentService 
 - Realm realm = Realm . getInstance ( context ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 backgroundLooperStarted . countDown ( ) ; 
 
 / / Random operation in the client code 
 @ @ - 355 , 7 + 350 , 7 @ @ public class NotificationsTest { 
 threadHandler . post ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 - Looper . myLooper ( ) . quit ( ) ; 
 + TestHelper . quitLooperOrFail ( ) ; 
 } 
 } ) ; 
 
 @ @ - 372 , 7 + 367 , 7 @ @ public class NotificationsTest { 
 backgroundLooperStarted . await ( 1 , TimeUnit . SECONDS ) ; 
 
 / / Execute a transaction that will trigger a Realm update 
 - Realm realm = Realm . getInstance ( context ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . beginTransaction ( ) ; 
 for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { 
 Dog dog = realm . createObject ( Dog . class ) ; 
 @ @ - 392 , 8 + 387 , 8 @ @ public class NotificationsTest { 
 
 @ Test 
 @ UiThreadTest 
 - public void testHandlerNotRemovedToSoon ( ) { 
 - RealmConfiguration realmConfig = TestHelper . createConfiguration ( context , " private - realm " ) ; 
 + public void handlerNotRemovedToSoon ( ) { 
 + RealmConfiguration realmConfig = configFactory . createConfiguration ( " private - realm " ) ; 
 Realm . deleteRealm ( realmConfig ) ; 
 Realm instance1 = Realm . getInstance ( realmConfig ) ; 
 Realm instance2 = Realm . getInstance ( realmConfig ) ; 
 @ @ - 410 , 10 + 405 , 10 @ @ public class NotificationsTest { 
 
 @ Test 
 @ UiThreadTest 
 - public void testImmediateNotificationsOnSameThread ( ) { 
 + public void immediateNotificationsOnSameThread ( ) { 
 final AtomicBoolean success = new AtomicBoolean ( false ) ; 
 final RealmChangeListener listener [ ] = new RealmChangeListener [ 1 ] ; 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 listener [ 0 ] = new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 @ @ - 431 , 7 + 426 , 7 @ @ public class NotificationsTest { 
 
 @ Test 
 @ UiThreadTest 
 - public void testEmptyCommitTriggerChangeListener ( ) { 
 + public void emptyCommitTriggerChangeListener ( ) { 
 final AtomicBoolean success = new AtomicBoolean ( false ) ; 
 final RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 @ @ - 439 , 7 + 434 , 7 @ @ public class NotificationsTest { 
 success . set ( true ) ; 
 } 
 } ; 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 realm . addChangeListener ( listener ) ; 
 realm . beginTransaction ( ) ; 
 realm . commitTransaction ( ) ; 
 @ @ - 448 , 7 + 443 , 7 @ @ public class NotificationsTest { 
 
 @ Test 
 @ UiThreadTest 
 - public void testAddRemoveListenerConcurrency ( ) { 
 + public void addRemoveListenerConcurrency ( ) { 
 final AtomicInteger counter1 = new AtomicInteger ( 0 ) ; 
 final AtomicInteger counter2 = new AtomicInteger ( 0 ) ; 
 final AtomicInteger counter3 = new AtomicInteger ( 0 ) ; 
 @ @ - 482 , 7 + 477 , 7 @ @ public class NotificationsTest { 
 } 
 } ; 
 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 realm . addChangeListener ( listener2 ) ; 
 realm . addChangeListener ( listener3 ) ; 
 
 @ @ - 513 , 9 + 508 , 9 @ @ public class NotificationsTest { 
 
 @ Test 
 @ UiThreadTest 
 - public void testWeakReferenceListener ( ) throws InterruptedException { 
 + public void weakReferenceListener ( ) throws InterruptedException { 
 final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 @ @ - 544 , 9 + 539 , 9 @ @ public class NotificationsTest { 
 / / without throwing an exception . 
 @ Test 
 @ UiThreadTest 
 - public void testRemovingWeakReferenceListener ( ) throws InterruptedException { 
 + public void removingWeakReferenceListener ( ) throws InterruptedException { 
 final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 - realm = Realm . getInstance ( context ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 RealmChangeListener listenerA = new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 @ @ - 581 , 11 + 576 , 8 @ @ public class NotificationsTest { 
 / / Tests that if the same configuration is used on 2 different Looper threads that each gets its own Handler . This 
 / / prevents commitTransaction from accidentally posting messages to Handlers which might reference a closed Realm . 
 @ Test 
 - public void testDoNotUseClosedHandler ( ) throws InterruptedException { 
 - final RealmConfiguration realmConfiguration = TestHelper . createConfiguration ( context ) ; 
 + public void doNotUseClosedHandler ( ) throws InterruptedException { 
 final AssertionFailedError [ ] threadAssertionError = new AssertionFailedError [ 1 ] ; / / Keep track of errors in test threads . 
 - Realm . deleteRealm ( realmConfiguration ) ; 
 - 
 final CountDownLatch handlerNotified = new CountDownLatch ( 1 ) ; 
 final CountDownLatch backgroundThreadClosed = new CountDownLatch ( 1 ) ; 
 
 @ @ - 595 , 7 + 587 , 7 @ @ public class NotificationsTest { 
 @ Override 
 public void run ( ) { 
 Looper . prepare ( ) ; 
 - final Realm realm = Realm . getInstance ( realmConfiguration ) ; 
 + final Realm realm = Realm . getInstance ( realmConfig ) ; 
 RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 @ @ - 613 , 7 + 605 , 7 @ @ public class NotificationsTest { 
 @ Override 
 public void run ( ) { 
 Looper . prepare ( ) ; 
 - Realm realm = Realm . getInstance ( realmConfiguration ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 RealmChangeListener listener = new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 @ @ - 635 , 7 + 627 , 7 @ @ public class NotificationsTest { 
 
 / / Any REALM _ CHANGED message should now only reach the open Handler on Thread1 
 backgroundThreadClosed . await ( ) ; 
 - Realm realm = Realm . getInstance ( realmConfiguration ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . beginTransaction ( ) ; 
 realm . commitTransaction ( ) ; 
 try { 
 @ @ - 654 , 10 + 646 , 7 @ @ public class NotificationsTest { 
 / / Test that we handle a Looper thread quiting it ' s looper before it is done executing the current loop ( = Realm . close ( ) 
 / / isn ' t called yet ) . 
 @ Test 
 - public void testLooperThreadQuitsLooperEarly ( ) throws InterruptedException { 
 - RealmConfiguration config = TestHelper . createConfiguration ( context ) ; 
 - Realm . deleteRealm ( config ) ; 
 - 
 + public void looperThreadQuitsLooperEarly ( ) throws InterruptedException { 
 final CountDownLatch backgroundLooperStartedAndStopped = new CountDownLatch ( 1 ) ; 
 final CountDownLatch mainThreadCommitCompleted = new CountDownLatch ( 1 ) ; 
 final CountDownLatch backgroundThreadStopped = new CountDownLatch ( 1 ) ; 
 @ @ - 669 , 9 + 658 , 9 @ @ public class NotificationsTest { 
 public void run ( ) { 
 Looper . prepare ( ) ; / / Fake background thread with a looper , eg . a IntentService 
 
 - Realm realm = Realm . getInstance ( context ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . setAutoRefresh ( false ) ; 
 - Looper . myLooper ( ) . quit ( ) ; 
 + TestHelper . quitLooperOrFail ( ) ; 
 backgroundLooperStartedAndStopped . countDown ( ) ; 
 try { 
 mainThreadCommitCompleted . await ( ) ; 
 @ @ - 685 , 7 + 674 , 7 @ @ public class NotificationsTest { 
 
 / / Create a commit on another thread 
 TestHelper . awaitOrFail ( backgroundLooperStartedAndStopped ) ; 
 - Realm realm = Realm . getInstance ( config ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 Logger logger = TestHelper . getFailureLogger ( Log . WARN ) ; 
 RealmLog . add ( logger ) ; 
 
 @ @ - 699 , 7 + 688 , 7 @ @ public class NotificationsTest { 
 } 
 
 @ Test 
 - public void testHandlerThreadShouldReceiveNotification ( ) throws ExecutionException , InterruptedException { 
 + public void handlerThreadShouldReceiveNotification ( ) throws ExecutionException , InterruptedException { 
 final AssertionFailedError [ ] assertionFailedErrors = new AssertionFailedError [ 1 ] ; 
 final CountDownLatch backgroundThreadReady = new CountDownLatch ( 1 ) ; 
 final CountDownLatch numberOfInvocation = new CountDownLatch ( 1 ) ; 
 @ @ - 715 , 7 + 704 , 7 @ @ public class NotificationsTest { 
 } catch ( AssertionFailedError e ) { 
 assertionFailedErrors [ 0 ] = e ; 
 } 
 - final Realm backgroundRealm = Realm . getInstance ( context ) ; 
 + final Realm backgroundRealm = Realm . getInstance ( realmConfig ) ; 
 backgroundRealm . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 @ @ - 729 , 7 + 718 , 7 @ @ public class NotificationsTest { 
 TestHelper . awaitOrFail ( backgroundThreadReady ) ; 
 / / At this point the background thread started & registered the listener 
 
 - Realm realm = Realm . getInstance ( context ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . beginTransaction ( ) ; 
 realm . createObject ( AllTypes . class ) ; 
 realm . commitTransaction ( ) ; 
 @ @ - 743 , 14 + 732 , 14 @ @ public class NotificationsTest { 
 } 
 
 @ Test 
 - public void testNonLooperThreadShouldNotifyLooperThreadAboutCommit ( ) throws Throwable { 
 + public void nonLooperThreadShouldNotifyLooperThreadAboutCommit ( ) throws Throwable { 
 final CountDownLatch mainThreadReady = new CountDownLatch ( 1 ) ; 
 final CountDownLatch numberOfInvocation = new CountDownLatch ( 1 ) ; 
 Thread thread = new Thread ( ) { 
 @ Override 
 public void run ( ) { 
 TestHelper . awaitOrFail ( mainThreadReady ) ; 
 - Realm realm = Realm . getInstance ( context ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . beginTransaction ( ) ; 
 realm . createObject ( AllTypes . class ) ; 
 realm . commitTransaction ( ) ; 
 @ @ - 765 , 7 + 754 , 7 @ @ public class NotificationsTest { 
 handler . post ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 - final Realm mainRealm = Realm . getInstance ( context ) ; 
 + final Realm mainRealm = Realm . getInstance ( realmConfig ) ; 
 mainRealm . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 @ @ - 785 , 7 + 774 , 7 @ @ public class NotificationsTest { 
 / / to advance to the latest version . We make sure in this test that all Realm listeners will be notified 
 / / regardless of the presence of an async RealmResults that will delay the ` REALM _ CHANGE ` sometimes 
 @ Test 
 - public void testAsyncRealmResultsShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { 
 + public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { 
 final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger ( 0 ) ; 
 final AtomicInteger numberOfAsyncRealmResultsCallbackInvocation = new AtomicInteger ( 0 ) ; 
 final CountDownLatch signalTestFinished = new CountDownLatch ( 2 ) ; 
 @ @ - 801 , 11 + 790 , 11 @ @ public class NotificationsTest { 
 backgroundLooper [ 0 ] = Looper . myLooper ( ) ; 
 
 try { 
 - realm [ 0 ] = Realm . getInstance ( context ) ; 
 + realm [ 0 ] = Realm . getInstance ( realmConfig ) ; 
 realm [ 0 ] . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 - RealmResults < Dog > dogs = null ; / / to keep it as a strong reference 
 + RealmResults < Dog > dogs ; / / to keep it as a strong reference 
 switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { 
 case 1 : { 
 / / first commit 
 @ @ - 821 , 7 + 810 , 7 @ @ public class NotificationsTest { 
 new Thread ( ) { 
 @ Override 
 public void run ( ) { 
 - Realm realm = Realm . getInstance ( context ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . beginTransaction ( ) ; 
 realm . createObject ( Dog . class ) ; 
 realm . commitTransaction ( ) ; 
 @ @ - 873 , 7 + 862 , 7 @ @ public class NotificationsTest { 
 / / to advance to the latest version . We make sure in this test that all Realm listeners will be notified 
 / / regardless of the presence of an async RealmObject that will delay the ` REALM _ CHANGE ` sometimes 
 @ Test 
 - public void testAsyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { 
 + public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { 
 final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger ( 0 ) ; 
 final AtomicInteger numberOfAsyncRealmObjectCallbackInvocation = new AtomicInteger ( 0 ) ; 
 final CountDownLatch signalTestFinished = new CountDownLatch ( 1 ) ; 
 @ @ - 889 , 11 + 878 , 11 @ @ public class NotificationsTest { 
 backgroundLooper [ 0 ] = Looper . myLooper ( ) ; 
 
 try { 
 - realm [ 0 ] = Realm . getInstance ( context ) ; 
 + realm [ 0 ] = Realm . getInstance ( realmConfig ) ; 
 realm [ 0 ] . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 public void onChange ( ) { 
 - Dog dog = null ; / / to keep it as a strong reference 
 + Dog dog ; / / to keep it as a strong reference 
 switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { 
 case 1 : { 
 / / first commit 
 @ @ - 909 , 7 + 898 , 7 @ @ public class NotificationsTest { 
 new Thread ( ) { 
 @ Override 
 public void run ( ) { 
 - Realm realm = Realm . getInstance ( context ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . beginTransaction ( ) ; 
 realm . createObject ( Dog . class ) ; 
 realm . commitTransaction ( ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 index 50afc46 . . 53d40c2 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 @ @ - 21 , 6 + 21 , 8 @ @ import android . content . res . AssetManager ; 
 import android . os . Looper ; 
 import android . util . Log ; 
 
 + import org . junit . Assert ; 
 + 
 import java . io . BufferedReader ; 
 import java . io . ByteArrayInputStream ; 
 import java . io . File ; 
 @ @ - 706 , 4 + 708 , 13 @ @ public class TestHelper { 
 AssetManager assetManager = context . getAssets ( ) ; 
 return assetManager . open ( file ) ; 
 } 
 + 
 + public static void quitLooperOrFail ( ) { 
 + Looper looper = Looper . myLooper ( ) ; 
 + if ( looper ! = null ) { 
 + looper . quit ( ) ; 
 + } else { 
 + Assert . fail ( ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 index 5104807 . . 2874dd1 100644 
 - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 18 , 8 + 18 , 6 @ @ package io . realm ; 
 import android . os . Looper ; 
 import android . test . AndroidTestCase ; 
 
 - import java . util . ArrayList ; 
 - import java . util . List ; 
 import java . util . Map ; 
 import java . util . concurrent . Callable ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 @ @ - 38 , 7 + 36 , 6 @ @ public class NotificationsTest extends AndroidTestCase { 
 
 @ Override 
 protected void setUp ( ) throws Exception { 
 - Realm . realmsCache . remove ( ) ; 
 Realm . deleteRealmFile ( getContext ( ) ) ; 
 } 
 
 @ @ - 48 , 7 + 45 , 8 @ @ public class NotificationsTest extends AndroidTestCase { 
 @ Override 
 public Boolean call ( ) throws Exception { 
 try { 
 - @ SuppressWarnings ( " UnusedDeclaration " ) Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + realm . close ( ) ; 
 return false ; 
 } catch ( IllegalStateException ignored ) { 
 return true ; 
 @ @ - 58 , 44 + 56 , 7 @ @ public class NotificationsTest extends AndroidTestCase { 
 
 Boolean result = future . get ( ) ; 
 assertTrue ( result ) ; 
 - } 
 - 
 - public void testNotifications ( ) throws InterruptedException , ExecutionException { 
 - ExecutorService executorService = Executors . newFixedThreadPool ( 2 ) ; 
 - 
 - final AtomicInteger changed = new AtomicInteger ( 0 ) ; 
 - 
 - List < Callable < Void > > callables = new ArrayList < Callable < Void > > ( ) ; 
 - callables . add ( new Callable < Void > ( ) { 
 - @ Override 
 - public Void call ( ) throws Exception { 
 - Looper . prepare ( ) ; 
 - Realm realm = Realm . getInstance ( getContext ( ) ) ; / / This does not sent a message to itself [ 0 ] 
 - realm . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - changed . incrementAndGet ( ) ; 
 - } 
 - } ) ; 
 - Looper . loop ( ) ; 
 - return null ; 
 - } 
 - } ) ; 
 - callables . add ( new Callable < Void > ( ) { 
 - @ Override 
 - public Void call ( ) throws Exception { 
 - Realm realm = Realm . getInstance ( getContext ( ) , false ) ; / / This will notify the other thread [ 1 ] 
 - realm . beginTransaction ( ) ; 
 - Dog dog = realm . createObject ( Dog . class ) ; 
 - dog . setName ( " Rex " ) ; 
 - realm . commitTransaction ( ) ; / / This will notify the other thread [ 2 ] 
 - return null ; 
 - } 
 - } ) ; 
 - 
 - executorService . invokeAll ( callables , 2 , TimeUnit . SECONDS ) ; 
 - 
 - assertEquals ( 2 , changed . get ( ) ) ; 
 + assertTrue ( Realm . realmsCache . get ( ) . isEmpty ( ) ) ; 
 } 
 
 public void testFailingSetAutoRefreshOnNonLooperThread ( ) throws ExecutionException , InterruptedException { 
 @ @ - 108 , 13 + 69 , 16 @ @ public class NotificationsTest extends AndroidTestCase { 
 assertFalse ( autoRefresh ) ; 
 try { 
 realm . setAutoRefresh ( true ) ; 
 + realm . close ( ) ; 
 return false ; 
 } catch ( IllegalStateException ignored ) { 
 + realm . close ( ) ; 
 return true ; 
 } 
 } 
 } ) ; 
 assertTrue ( future . get ( ) ) ; 
 + assertTrue ( Realm . realmsCache . get ( ) . isEmpty ( ) ) ; 
 } 
 
 public void testSetAutoRefreshOnHandlerThread ( ) throws ExecutionException , InterruptedException { 
 @ @ - 129 , 10 + 93 , 12 @ @ public class NotificationsTest extends AndroidTestCase { 
 assertFalse ( realm . isAutoRefresh ( ) ) ; 
 realm . setAutoRefresh ( true ) ; 
 assertTrue ( realm . isAutoRefresh ( ) ) ; 
 + realm . close ( ) ; 
 return true ; 
 } 
 } ) ; 
 assertTrue ( future . get ( ) ) ; 
 + assertTrue ( Realm . realmsCache . get ( ) . isEmpty ( ) ) ; 
 } 
 
 public void testNotificationsNumber ( ) throws InterruptedException , ExecutionException { 
 @ @ - 143 , 16 + 109 , 23 @ @ public class NotificationsTest extends AndroidTestCase { 
 Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ Override 
 public Boolean call ( ) throws Exception { 
 - Looper . prepare ( ) ; 
 - Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - realm . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - counter . incrementAndGet ( ) ; 
 + Realm realm = null ; 
 + try { 
 + Looper . prepare ( ) ; 
 + realm = Realm . getInstance ( getContext ( ) ) ; 
 + realm . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + counter . incrementAndGet ( ) ; 
 + } 
 + } ) ; 
 + isReady . set ( true ) ; 
 + Looper . loop ( ) ; 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 } 
 - } ) ; 
 - isReady . set ( true ) ; 
 - Looper . loop ( ) ; 
 + } 
 return true ; 
 } 
 } ) ; 
 @ @ - 168 , 12 + 141 , 14 @ @ public class NotificationsTest extends AndroidTestCase { 
 Dog dog = realm . createObject ( Dog . class ) ; 
 dog . setName ( " Rex " ) ; 
 realm . commitTransaction ( ) ; 
 + realm . close ( ) ; 
 
 try { 
 future . get ( 1 , TimeUnit . SECONDS ) ; 
 } catch ( TimeoutException ignore ) { } 
 
 assertEquals ( 1 , counter . get ( ) ) ; 
 + assertTrue ( Realm . realmsCache . get ( ) . isEmpty ( ) ) ; 
 } 
 
 public void testAutoUpdateRealmResults ( ) throws InterruptedException , ExecutionException { 
 @ @ - 187 , 19 + 162 , 25 @ @ public class NotificationsTest extends AndroidTestCase { 
 @ Override 
 public Boolean call ( ) throws Exception { 
 Looper . prepare ( ) ; 
 - Realm . deleteRealmFile ( getContext ( ) ) ; 
 - final Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - final RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; 
 - assertEquals ( 0 , dogs . size ( ) ) ; 
 - realm . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - int c = counter . incrementAndGet ( ) ; 
 - results . put ( c , dogs . size ( ) ) ; 
 + Realm realm = null ; 
 + try { 
 + realm = Realm . getInstance ( getContext ( ) ) ; 
 + final RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; 
 + assertEquals ( 0 , dogs . size ( ) ) ; 
 + realm . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + int c = counter . incrementAndGet ( ) ; 
 + results . put ( c , dogs . size ( ) ) ; 
 + } 
 + } ) ; 
 + isReady . set ( true ) ; 
 + Looper . loop ( ) ; 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 } 
 - } ) ; 
 - isReady . set ( true ) ; 
 - Looper . loop ( ) ; 
 + } 
 return true ; 
 } 
 } ) ; 
 @ @ - 218 , 6 + 199 , 7 @ @ public class NotificationsTest extends AndroidTestCase { 
 } 
 realm . commitTransaction ( ) ; 
 assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 + realm . close ( ) ; 
 
 try { 
 future . get ( 2 , TimeUnit . SECONDS ) ; 
 @ @ - 226 , 8 + 208 , 9 @ @ public class NotificationsTest extends AndroidTestCase { 
 assertEquals ( 1 , results . size ( ) ) ; 
 
 assertTrue ( results . containsKey ( 1 ) ) ; 
 - assertEquals ( 10 , results . get ( 1 ) . intValue ( ) ) ; 
 + assertEquals ( TEST _ SIZE , results . get ( 1 ) . intValue ( ) ) ; 
 
 assertEquals ( 1 , counter . get ( ) ) ; 
 + assertTrue ( Realm . realmsCache . get ( ) . isEmpty ( ) ) ; 
 } 
 } 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmAnnotationTest . java b / realm / src / androidTest / java / io / realm / RealmAnnotationTest . java 
 index a061d5e . . 9e2ed23 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmAnnotationTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmAnnotationTest . java 
 @ @ - 36 , 6 + 36 , 11 @ @ public class RealmAnnotationTest extends AndroidTestCase { 
 testRealm . commitTransaction ( ) ; 
 } 
 
 + @ Override 
 + protected void tearDown ( ) throws Exception { 
 + testRealm . close ( ) ; 
 + } 
 + 
 public void testIgnore ( ) { 
 Table table = testRealm . getTable ( AnnotationTypes . class ) ; 
 assertEquals ( - 1 , table . getColumnIndex ( " ignoreString " ) ) ; 
 @ @ - 46 , 4 + 51 , 4 @ @ public class RealmAnnotationTest extends AndroidTestCase { 
 assertTrue ( table . hasIndex ( table . getColumnIndex ( " indexString " ) ) ) ; 
 assertFalse ( table . hasIndex ( table . getColumnIndex ( " notIndexString " ) ) ) ; 
 } 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmLinkTests . java b / realm / src / androidTest / java / io / realm / RealmLinkTests . java 
 index 4d9786f . . 38b7724 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmLinkTests . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmLinkTests . java 
 @ @ - 74 , 6 + 74 , 11 @ @ public class RealmLinkTests extends AndroidTestCase { 
 testRealm . commitTransaction ( ) ; 
 } 
 
 + @ Override 
 + protected void tearDown ( ) throws Exception { 
 + testRealm . close ( ) ; 
 + } 
 + 
 public void testObjects ( ) { 
 RealmResults < Owner > owners = testRealm . allObjects ( Owner . class ) ; 
 assertEquals ( 1 , owners . size ( ) ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmObjectTest . java b / realm / src / androidTest / java / io / realm / RealmObjectTest . java 
 index f1b93ec . . 46ac1aa 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmObjectTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmObjectTest . java 
 @ @ - 36 , 9 + 36 , 11 @ @ import io . realm . internal . Row ; 
 
 public class RealmObjectTest extends AndroidTestCase { 
 
 - protected Realm testRealm ; 
 + private Realm testRealm ; 
 
 - private int TEST _ SIZE = 5 ; 
 + private static final int TEST _ SIZE = 5 ; 
 + private static final boolean REMOVE _ FIRST = true ; 
 + private static final boolean REMOVE _ LAST = false ; 
 
 @ Override 
 protected void setUp ( ) throws Exception { 
 @ @ - 46 , 6 + 48 , 10 @ @ public class RealmObjectTest extends AndroidTestCase { 
 testRealm = Realm . getInstance ( getContext ( ) ) ; 
 } 
 
 + @ Override 
 + protected void tearDown ( ) throws Exception { 
 + testRealm . close ( ) ; 
 + } 
 
 / / test io . realm . RealmObject Api 
 
 @ @ - 107 , 16 + 113 , 19 @ @ public class RealmObjectTest extends AndroidTestCase { 
 fido . getName ( ) ; 
 try { 
 rex . getName ( ) ; 
 + realm . close ( ) ; 
 fail ( ) ; 
 } catch ( IllegalStateException ignored ) { } 
 
 / / deleting rex twice should fail 
 realm . beginTransaction ( ) ; 
 try { 
 - rex . removeFromRealm ( ) ; 
 + rex . removeFromRealm ( ) ; 
 + realm . close ( ) ; 
 fail ( ) ; 
 } catch ( IllegalStateException ignored ) { } 
 realm . commitTransaction ( ) ; 
 + realm . close ( ) ; 
 } 
 
 / / query for an object , remove it and see it has been removed from realm 
 @ @ - 139 , 14 + 148 , 17 @ @ public class RealmObjectTest extends AndroidTestCase { 
 assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 try { 
 dogToAdd . getName ( ) ; 
 + realm . close ( ) ; 
 fail ( ) ; 
 } 
 catch ( IllegalStateException ignored ) { } 
 try { 
 dogToRemove . getName ( ) ; 
 + realm . close ( ) ; 
 fail ( ) ; 
 } 
 catch ( IllegalStateException ignored ) { } 
 + realm . close ( ) ; 
 } 
 
 public void removeOneByOne ( boolean atFirst ) { 
 @ @ - 156 , 7 + 168 , 7 @ @ public class RealmObjectTest extends AndroidTestCase { 
 for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { 
 Dog dog = testRealm . createObject ( Dog . class ) ; 
 dog . setAge ( i ) ; 
 - ages . add ( new Long ( i ) ) ; 
 + ages . add ( ( long ) i ) ; 
 } 
 testRealm . commitTransaction ( ) ; 
 
 @ @ - 171 , 7 + 183 , 7 @ @ public class RealmObjectTest extends AndroidTestCase { 
 } else { 
 dogToRemove = dogs . last ( ) ; 
 } 
 - ages . remove ( new Long ( dogToRemove . getAge ( ) ) ) ; 
 + ages . remove ( Long . valueOf ( dogToRemove . getAge ( ) ) ) ; 
 dogToRemove . removeFromRealm ( ) ; 
 
 / / object is no longer valid 
 @ @ - 187 , 14 + 199 , 12 @ @ public class RealmObjectTest extends AndroidTestCase { 
 RealmResults < Dog > remainingDogs = testRealm . allObjects ( Dog . class ) ; 
 assertEquals ( TEST _ SIZE - i - 1 , remainingDogs . size ( ) ) ; 
 for ( Dog dog : remainingDogs ) { 
 - assertTrue ( ages . contains ( new Long ( dog . getAge ( ) ) ) ) ; 
 + assertTrue ( ages . contains ( Long . valueOf ( dog . getAge ( ) ) ) ) ; 
 } 
 } 
 } 
 
 public void testRemoveFromRealmAtPosition ( ) { 
 - boolean REMOVE _ FIRST = true ; 
 - boolean REMOVE _ LAST = false ; 
 removeOneByOne ( REMOVE _ FIRST ) ; 
 removeOneByOne ( REMOVE _ LAST ) ; 
 } 
 @ @ - 222 , 7 + 232 , 9 @ @ public class RealmObjectTest extends AndroidTestCase { 
 } 
 } ) ; 
 
 - return future . get ( ) ; 
 + Boolean result = future . get ( ) ; 
 + realm . close ( ) ; 
 + return result ; 
 } 
 
 public void testGetSetWrongThread ( ) throws ExecutionException , InterruptedException { 
 @ @ - 295 , 7 + 307 , 7 @ @ public class RealmObjectTest extends AndroidTestCase { 
 testRealm . commitTransaction ( ) ; 
 
 AllTypes object = testRealm . allObjects ( AllTypes . class ) . first ( ) ; 
 - assertEquals ( 1000 * ( date . getTime ( ) / 1000 ) , 1000 * ( object . getColumnDate ( ) . getTime ( ) / 1000 ) ) ; / / Realm does not support millisec precision 
 + assertEquals ( 1000 * ( date . getTime ( ) / 1000 ) , 1000 * ( object . getColumnDate ( ) . getTime ( ) / 1000 ) ) ; / / Realm does not support millisec precision 
 } 
 
 public void testDate ( ) { 
 @ @ - 345 , 5 + 357 , 6 @ @ public class RealmObjectTest extends AndroidTestCase { 
 assertEquals ( 2 , anc2 . getmObject ( ) ) ; 
 assertEquals ( 3 , anc2 . getObject _ id ( ) ) ; 
 assertTrue ( anc2 . isObject ( ) ) ; 
 + realm . close ( ) ; 
 } 
 } 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 index 778996a . . 294835d 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 @ @ - 44 , 13 + 44 , 12 @ @ public class RealmResultsTest extends AndroidTestCase { 
 private final static String FIELD _ DATE = " columnDate " ; 
 private final static String FIELD _ KOREAN _ CHAR = " 델 타 " ; 
 private final static String FIELD _ GREEK _ CHAR = " Δ έ λ τ α " ; 
 - private final static String FIELD _ BYTE = " columnBinary " ; 
 - private final static String FIELD _ DOG = " columnRealmObject " ; 
 + / / private final static String FIELD _ BYTE = " columnBinary " ; 
 + / / private final static String FIELD _ DOG = " columnRealmObject " ; 
 
 @ Override 
 protected void setUp ( ) throws InterruptedException { 
 - boolean result = Realm . deleteRealmFile ( getContext ( ) ) ; 
 - assertTrue ( result ) ; 
 + Realm . deleteRealmFile ( getContext ( ) ) ; 
 
 testRealm = Realm . getInstance ( getContext ( ) ) ; 
 
 @ @ - 74 , 6 + 73 , 11 @ @ public class RealmResultsTest extends AndroidTestCase { 
 testRealm . commitTransaction ( ) ; 
 } 
 
 + @ Override 
 + protected void tearDown ( ) throws Exception { 
 + testRealm . close ( ) ; 
 + } 
 + 
 private enum Method { 
 METHOD _ MIN , 
 METHOD _ MAX , 
 @ @ - 83 , 8 + 87 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { 
 METHOD _ WHERE 
 } 
 
 - ; 
 - 
 public boolean methodWrongThread ( final Method method ) throws ExecutionException , InterruptedException { 
 final RealmResults < AllTypes > allTypeses = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 @ @ - 121 , 6 + 123 , 12 @ @ public class RealmResultsTest extends AndroidTestCase { 
 return future . get ( ) ; 
 } 
 
 + public void testMinWrongThread ( ) throws ExecutionException , InterruptedException { 
 + for ( Method method : Method . values ( ) ) { 
 + assertTrue ( methodWrongThread ( method ) ) ; 
 + } 
 + } 
 + 
 / / test io . realm . ResultList Api 
 
 / / void clear ( Class < ? > classSpec ) 
 @ @ - 389 , 9 + 397 , 9 @ @ public class RealmResultsTest extends AndroidTestCase { 
 public void testSortOnNonExistingColumn ( ) { 
 try { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 - RealmResults < AllTypes > sortedList = resultList . sort ( " Non - existing " ) ; 
 + resultList . sort ( " Non - existing " ) ; 
 fail ( " Column should not exist " ) ; 
 - } catch ( ArrayIndexOutOfBoundsException e ) { 
 + } catch ( ArrayIndexOutOfBoundsException ignored ) { 
 } 
 } 
 
 @ @ - 522 , 7 + 530 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 allTypes3 . setColumnString ( " work " ) ; 
 try { 
 RealmResults < AllTypes > result = testRealm . allObjects ( AllTypes . class ) ; 
 - RealmResults < AllTypes > sortedResult = result . sort ( FIELD _ STRING ) ; 
 + result . sort ( FIELD _ STRING ) ; 
 } catch ( IllegalArgumentException e ) { 
 fail ( " Failed to sort with two kinds of alphabets " ) ; 
 } 
 @ @ - 533 , 7 + 541 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 testRealm . clear ( AllTypes . class ) ; 
 testRealm . commitTransaction ( ) ; 
 try { 
 - RealmResults < AllTypes > sortResult = testRealm . where ( AllTypes . class ) . findAll ( ) . sort ( FIELD _ STRING ) ; 
 + testRealm . where ( AllTypes . class ) . findAll ( ) . sort ( FIELD _ STRING ) ; 
 } catch ( IllegalArgumentException e ) { 
 fail ( " Failed to sort an empty RealmResults " ) ; 
 } 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 353e97d . . 59085b5 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 619 , 9 + 619 , 6 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 } 
 
 - 
 - / * NOTE : This is commented out while we fix the other unit tests to be good citizens in Closeable land : ) 
 - 
 public void testReferenceCounting ( ) { 
 / / At this point reference count should be one because of the setUp method 
 try { 
 @ @ - 654 , 5 + 651 , 4 @ @ public class RealmTest extends AndroidTestCase { 
 } catch ( IllegalStateException ignored ) { 
 } 
 } 
 - * / 
 }
