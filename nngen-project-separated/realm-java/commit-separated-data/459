BLEU SCORE: 0.10014525608798037

TEST MSG: Remove warnIfMixingSyncWritesAndAsyncQueries test
GENERATED MSG: Added a unit test for notifications count

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 383999a . . 8fb3a5c 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 1097 , 38 + 1097 , 6 @ @ public class NotificationsTest { <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void warnIfMixingSyncWritesAndAsyncQueries ( ) { <nl> - final Realm realm = looperThread . realm ; <nl> - final AtomicBoolean warningLogged = new AtomicBoolean ( false ) ; <nl> - final TestHelper . TestLogger testLogger = new TestHelper . TestLogger ( ) { <nl> - @ Override <nl> - public void log ( int level , String tag , Throwable throwable , String message ) { <nl> - assertTrue ( message . contains ( " Mixing asynchronous queries with local writes should be avoided . " ) ) ; <nl> - if ( level = = LogLevel . WARN ) { <nl> - warningLogged . set ( true ) ; <nl> - } <nl> - } <nl> - } ; <nl> - RealmLog . add ( testLogger ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - realm . createObject ( AllTypes . class ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllAsync ( ) ; <nl> - looperThread . keepStrongReference . add ( results ) ; <nl> - results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> - @ Override <nl> - public void onChange ( RealmResults < AllTypes > element ) { <nl> - RealmLog . remove ( testLogger ) ; <nl> - assertTrue ( warningLogged . get ( ) ) ; <nl> - looperThread . testComplete ( ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - @ Test <nl> - @ RunTestInLooperThread <nl> public void accessingSyncRealmResultInsideAsyncResultListener ( ) { <nl> final Realm realm = looperThread . realm ; <nl> final AtomicInteger asyncResultCallback = new AtomicInteger ( 0 ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 31b6850 . . 66a1518 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 203 , 4 + 203 , 33 @ @ public class NotificationsTest extends AndroidTestCase { <nl> } <nl> assertTrue ( done . get ( ) ) ; <nl> } <nl> + <nl> + public void testNotificationsNumber ( ) throws InterruptedException { <nl> + final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> + HandlerThread thread = new HandlerThread ( " Receiver " ) { <nl> + @ Override <nl> + protected void onLooperPrepared ( ) { <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + realm . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + counter . incrementAndGet ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } ; <nl> + thread . start ( ) ; <nl> + <nl> + Realm realm = Realm . getInstance ( getContext ( ) , false ) ; <nl> + realm . beginTransaction ( ) ; <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setName ( " Rex " ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + Thread . sleep ( 100 ) ; <nl> + <nl> + assertEquals ( 1 , counter . get ( ) ) ; <nl> + <nl> + thread . join ( 1 ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 index 383999a . . 8fb3a5c 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 1097 , 38 + 1097 , 6 @ @ public class NotificationsTest { 
 
 @ Test 
 @ RunTestInLooperThread 
 - public void warnIfMixingSyncWritesAndAsyncQueries ( ) { 
 - final Realm realm = looperThread . realm ; 
 - final AtomicBoolean warningLogged = new AtomicBoolean ( false ) ; 
 - final TestHelper . TestLogger testLogger = new TestHelper . TestLogger ( ) { 
 - @ Override 
 - public void log ( int level , String tag , Throwable throwable , String message ) { 
 - assertTrue ( message . contains ( " Mixing asynchronous queries with local writes should be avoided . " ) ) ; 
 - if ( level = = LogLevel . WARN ) { 
 - warningLogged . set ( true ) ; 
 - } 
 - } 
 - } ; 
 - RealmLog . add ( testLogger ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - realm . createObject ( AllTypes . class ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 - RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllAsync ( ) ; 
 - looperThread . keepStrongReference . add ( results ) ; 
 - results . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 - @ Override 
 - public void onChange ( RealmResults < AllTypes > element ) { 
 - RealmLog . remove ( testLogger ) ; 
 - assertTrue ( warningLogged . get ( ) ) ; 
 - looperThread . testComplete ( ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Test 
 - @ RunTestInLooperThread 
 public void accessingSyncRealmResultInsideAsyncResultListener ( ) { 
 final Realm realm = looperThread . realm ; 
 final AtomicInteger asyncResultCallback = new AtomicInteger ( 0 ) ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 index 31b6850 . . 66a1518 100644 
 - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 203 , 4 + 203 , 33 @ @ public class NotificationsTest extends AndroidTestCase { 
 } 
 assertTrue ( done . get ( ) ) ; 
 } 
 + 
 + public void testNotificationsNumber ( ) throws InterruptedException { 
 + final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 + HandlerThread thread = new HandlerThread ( " Receiver " ) { 
 + @ Override 
 + protected void onLooperPrepared ( ) { 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + realm . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + counter . incrementAndGet ( ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + thread . start ( ) ; 
 + 
 + Realm realm = Realm . getInstance ( getContext ( ) , false ) ; 
 + realm . beginTransaction ( ) ; 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setName ( " Rex " ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + Thread . sleep ( 100 ) ; 
 + 
 + assertEquals ( 1 , counter . get ( ) ) ; 
 + 
 + thread . join ( 1 ) ; 
 + } 
 }
