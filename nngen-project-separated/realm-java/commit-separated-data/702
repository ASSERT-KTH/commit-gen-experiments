BLEU SCORE: 0.0167475178542289

TEST MSG: Print path info of File : : AccessError
GENERATED MSG: Move C + + - > Java exception mapping to a function

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 60cc269 . . 42dfc3c 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 7 , 6 + 7 , 10 @ @ <nl> * Opening a Realm while closing a Realm in another thread could lead to a race condition . <nl> * Automatic migration to the new file format could in rare circumstances lead to a crash . <nl> <nl> + # # # Enhancements <nl> + <nl> + * Prints path when file related exceptions thrown . <nl> + <nl> # # 0 . 90 . 0 <nl> <nl> * Updated Realm Core to 0 . 100 . 0 . <nl> diff - - git a / realm / realm - jni / src / util . cpp b / realm / realm - jni / src / util . cpp <nl> index a2daeae . . df5762c 100644 <nl> - - - a / realm / realm - jni / src / util . cpp <nl> + + + b / realm / realm - jni / src / util . cpp <nl> @ @ - 57 , 6 + 57 , 10 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) <nl> ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> ThrowException ( env , IllegalArgument , ss . str ( ) ) ; <nl> } <nl> + catch ( File : : AccessError & e ) { <nl> + ss < < e . what ( ) < < " path : " < < e . get _ path ( ) < < " in " < < file < < " line " < < line ; <nl> + ThrowException ( env , IllegalArgument , ss . str ( ) ) ; <nl> + } <nl> catch ( exception & e ) { <nl> ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> ThrowException ( env , FatalError , ss . str ( ) ) ; <nl> diff - - git a / realm / realm - jni / src / util . hpp b / realm / realm - jni / src / util . hpp <nl> index 8a7af2a . . 702b14b 100644 <nl> - - - a / realm / realm - jni / src / util . hpp <nl> + + + b / realm / realm - jni / src / util . hpp <nl> @ @ - 62 , 13 + 62 , 16 @ @ JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * reserved ) ; <nl> ThrowException ( env , IllegalArgument , " Invalid format of Realm file . " ) ; \ <nl> } \ <nl> catch ( util : : File : : PermissionDenied & e ) { \ <nl> - ThrowException ( env , IOFailed , string ( fileName ) , string ( " Permission denied . " ) + e . what ( ) ) ; \ <nl> + ThrowException ( env , IOFailed , string ( fileName ) , \ <nl> + std : : string ( e . what ( ) ) + " path : " + e . get _ path ( ) ) ; \ <nl> } \ <nl> - catch ( util : : File : : NotFound & ) { \ <nl> - ThrowException ( env , FileNotFound , string ( fileName ) . data ( ) ) ; \ <nl> + catch ( util : : File : : NotFound & e ) { \ <nl> + ThrowException ( env , FileNotFound , string ( fileName ) , \ <nl> + std : : string ( e . what ( ) ) + " path : " + e . get _ path ( ) ) ; \ <nl> } \ <nl> catch ( util : : File : : AccessError & e ) { \ <nl> - ThrowException ( env , FileAccessError , string ( fileName ) , e . what ( ) ) ; \ <nl> + ThrowException ( env , FileAccessError , string ( fileName ) , \ <nl> + std : : string ( e . what ( ) ) + " path : " + e . get _ path ( ) ) ; \ <nl> } <nl> <nl> # define CATCH _ STD ( ) \
NEAREST DIFF (one line): diff - - git a / realm - jni / src / util . cpp b / realm - jni / src / util . cpp <nl> index 4976b29 . . 6028f4b 100644 <nl> - - - a / realm - jni / src / util . cpp <nl> + + + b / realm - jni / src / util . cpp <nl> @ @ - 27 , 7 + 27 , 29 @ @ using namespace std ; <nl> using namespace tightdb ; <nl> using namespace tightdb : : util ; <nl> <nl> - void ThrowException ( JNIEnv * env , ExceptionKind exception , std : : string classStr , std : : string itemStr ) <nl> + void ConvertException ( JNIEnv * env , const char * file , int line ) <nl> + { <nl> + std : : ostringstream ss ; <nl> + try { <nl> + throw ; <nl> + } <nl> + catch ( std : : bad _ alloc & e ) { <nl> + ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> + ThrowException ( env , OutOfMemory , ss . str ( ) ) ; <nl> + } <nl> + catch ( std : : exception & e ) { <nl> + ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> + ThrowException ( env , Unspecified , ss . str ( ) ) ; <nl> + } <nl> + catch ( . . . ) { \ <nl> + TIGHTDB _ ASSERT ( false ) ; <nl> + ss < < " Exception in " < < file < < " line " < < line ; <nl> + ThrowException ( env , RuntimeError , ss . str ( ) ) ; <nl> + } <nl> + / * above ( . . . ) is not needed if we only throw exceptions derived from std : : exception * / <nl> + } <nl> + <nl> + void ThrowException ( JNIEnv * env , ExceptionKind exception , const std : : string & classStr , const std : : string & itemStr ) <nl> { <nl> std : : string message ; <nl> jclass jExceptionClass = NULL ; <nl> diff - - git a / realm - jni / src / util . hpp b / realm - jni / src / util . hpp <nl> index 99a146f . . 2e8db92 100644 <nl> - - - a / realm - jni / src / util . hpp <nl> + + + b / realm - jni / src / util . hpp <nl> @ @ - 67 , 22 + 67 , 9 @ @ JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * reserved ) ; <nl> } <nl> <nl> # define CATCH _ STD ( ) \ <nl> - catch ( std : : bad _ alloc & e ) { \ <nl> - ThrowException ( env , OutOfMemory , e . what ( ) + std : : string ( " in " ) + std : : string ( _ _ FILE _ _ ) + \ <nl> - std : : string ( " line " ) + std : : string ( STRINGIZE ( _ _ LINE _ _ ) ) ) ; \ <nl> - } \ <nl> - catch ( std : : exception & e ) { \ <nl> - ThrowException ( env , Unspecified , e . what ( ) + std : : string ( " in " ) + std : : string ( _ _ FILE _ _ ) + \ <nl> - std : : string ( " line " ) + std : : string ( STRINGIZE ( _ _ LINE _ _ ) ) ) ; \ <nl> - } \ <nl> catch ( . . . ) { \ <nl> - TIGHTDB _ ASSERT ( false ) ; \ <nl> - ThrowException ( env , RuntimeError , std : : string ( " Exception in " ) + \ <nl> - std : : string ( _ _ FILE _ _ ) + std : : string ( " line " ) \ <nl> - + std : : string ( STRINGIZE ( _ _ LINE _ _ ) ) ) ; \ <nl> + ConvertException ( env , _ _ FILE _ _ , _ _ LINE _ _ ) ; \ <nl> } <nl> - / * above ( . . . ) is not needed if we only throw exceptions derived from std : : exception * / <nl> - <nl> <nl> template < typename T > <nl> std : : string num _ to _ string ( T pNumber ) <nl> @ @ - 129 , 9 + 116 , 10 @ @ enum ExceptionKind { <nl> RowInvalid = 13 <nl> } ; <nl> <nl> - extern void ThrowException ( JNIEnv * env , ExceptionKind exception , std : : string classStr , std : : string itemStr = " " ) ; <nl> + void ConvertException ( JNIEnv * env , const char * file , int line ) ; <nl> + void ThrowException ( JNIEnv * env , ExceptionKind exception , std : : string classStr , std : : string itemStr = " " ) ; <nl> <nl> - extern jclass GetClass ( JNIEnv * env , const char * classStr ) ; <nl> + jclass GetClass ( JNIEnv * env , const char * classStr ) ; <nl> <nl> <nl> / / Debug trace

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 60cc269 . . 42dfc3c 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 7 , 6 + 7 , 10 @ @ 
 * Opening a Realm while closing a Realm in another thread could lead to a race condition . 
 * Automatic migration to the new file format could in rare circumstances lead to a crash . 
 
 + # # # Enhancements 
 + 
 + * Prints path when file related exceptions thrown . 
 + 
 # # 0 . 90 . 0 
 
 * Updated Realm Core to 0 . 100 . 0 . 
 diff - - git a / realm / realm - jni / src / util . cpp b / realm / realm - jni / src / util . cpp 
 index a2daeae . . df5762c 100644 
 - - - a / realm / realm - jni / src / util . cpp 
 + + + b / realm / realm - jni / src / util . cpp 
 @ @ - 57 , 6 + 57 , 10 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) 
 ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 ThrowException ( env , IllegalArgument , ss . str ( ) ) ; 
 } 
 + catch ( File : : AccessError & e ) { 
 + ss < < e . what ( ) < < " path : " < < e . get _ path ( ) < < " in " < < file < < " line " < < line ; 
 + ThrowException ( env , IllegalArgument , ss . str ( ) ) ; 
 + } 
 catch ( exception & e ) { 
 ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 ThrowException ( env , FatalError , ss . str ( ) ) ; 
 diff - - git a / realm / realm - jni / src / util . hpp b / realm / realm - jni / src / util . hpp 
 index 8a7af2a . . 702b14b 100644 
 - - - a / realm / realm - jni / src / util . hpp 
 + + + b / realm / realm - jni / src / util . hpp 
 @ @ - 62 , 13 + 62 , 16 @ @ JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * reserved ) ; 
 ThrowException ( env , IllegalArgument , " Invalid format of Realm file . " ) ; \ 
 } \ 
 catch ( util : : File : : PermissionDenied & e ) { \ 
 - ThrowException ( env , IOFailed , string ( fileName ) , string ( " Permission denied . " ) + e . what ( ) ) ; \ 
 + ThrowException ( env , IOFailed , string ( fileName ) , \ 
 + std : : string ( e . what ( ) ) + " path : " + e . get _ path ( ) ) ; \ 
 } \ 
 - catch ( util : : File : : NotFound & ) { \ 
 - ThrowException ( env , FileNotFound , string ( fileName ) . data ( ) ) ; \ 
 + catch ( util : : File : : NotFound & e ) { \ 
 + ThrowException ( env , FileNotFound , string ( fileName ) , \ 
 + std : : string ( e . what ( ) ) + " path : " + e . get _ path ( ) ) ; \ 
 } \ 
 catch ( util : : File : : AccessError & e ) { \ 
 - ThrowException ( env , FileAccessError , string ( fileName ) , e . what ( ) ) ; \ 
 + ThrowException ( env , FileAccessError , string ( fileName ) , \ 
 + std : : string ( e . what ( ) ) + " path : " + e . get _ path ( ) ) ; \ 
 } 
 
 # define CATCH _ STD ( ) \

NEAREST DIFF:
diff - - git a / realm - jni / src / util . cpp b / realm - jni / src / util . cpp 
 index 4976b29 . . 6028f4b 100644 
 - - - a / realm - jni / src / util . cpp 
 + + + b / realm - jni / src / util . cpp 
 @ @ - 27 , 7 + 27 , 29 @ @ using namespace std ; 
 using namespace tightdb ; 
 using namespace tightdb : : util ; 
 
 - void ThrowException ( JNIEnv * env , ExceptionKind exception , std : : string classStr , std : : string itemStr ) 
 + void ConvertException ( JNIEnv * env , const char * file , int line ) 
 + { 
 + std : : ostringstream ss ; 
 + try { 
 + throw ; 
 + } 
 + catch ( std : : bad _ alloc & e ) { 
 + ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 + ThrowException ( env , OutOfMemory , ss . str ( ) ) ; 
 + } 
 + catch ( std : : exception & e ) { 
 + ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 + ThrowException ( env , Unspecified , ss . str ( ) ) ; 
 + } 
 + catch ( . . . ) { \ 
 + TIGHTDB _ ASSERT ( false ) ; 
 + ss < < " Exception in " < < file < < " line " < < line ; 
 + ThrowException ( env , RuntimeError , ss . str ( ) ) ; 
 + } 
 + / * above ( . . . ) is not needed if we only throw exceptions derived from std : : exception * / 
 + } 
 + 
 + void ThrowException ( JNIEnv * env , ExceptionKind exception , const std : : string & classStr , const std : : string & itemStr ) 
 { 
 std : : string message ; 
 jclass jExceptionClass = NULL ; 
 diff - - git a / realm - jni / src / util . hpp b / realm - jni / src / util . hpp 
 index 99a146f . . 2e8db92 100644 
 - - - a / realm - jni / src / util . hpp 
 + + + b / realm - jni / src / util . hpp 
 @ @ - 67 , 22 + 67 , 9 @ @ JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * reserved ) ; 
 } 
 
 # define CATCH _ STD ( ) \ 
 - catch ( std : : bad _ alloc & e ) { \ 
 - ThrowException ( env , OutOfMemory , e . what ( ) + std : : string ( " in " ) + std : : string ( _ _ FILE _ _ ) + \ 
 - std : : string ( " line " ) + std : : string ( STRINGIZE ( _ _ LINE _ _ ) ) ) ; \ 
 - } \ 
 - catch ( std : : exception & e ) { \ 
 - ThrowException ( env , Unspecified , e . what ( ) + std : : string ( " in " ) + std : : string ( _ _ FILE _ _ ) + \ 
 - std : : string ( " line " ) + std : : string ( STRINGIZE ( _ _ LINE _ _ ) ) ) ; \ 
 - } \ 
 catch ( . . . ) { \ 
 - TIGHTDB _ ASSERT ( false ) ; \ 
 - ThrowException ( env , RuntimeError , std : : string ( " Exception in " ) + \ 
 - std : : string ( _ _ FILE _ _ ) + std : : string ( " line " ) \ 
 - + std : : string ( STRINGIZE ( _ _ LINE _ _ ) ) ) ; \ 
 + ConvertException ( env , _ _ FILE _ _ , _ _ LINE _ _ ) ; \ 
 } 
 - / * above ( . . . ) is not needed if we only throw exceptions derived from std : : exception * / 
 - 
 
 template < typename T > 
 std : : string num _ to _ string ( T pNumber ) 
 @ @ - 129 , 9 + 116 , 10 @ @ enum ExceptionKind { 
 RowInvalid = 13 
 } ; 
 
 - extern void ThrowException ( JNIEnv * env , ExceptionKind exception , std : : string classStr , std : : string itemStr = " " ) ; 
 + void ConvertException ( JNIEnv * env , const char * file , int line ) ; 
 + void ThrowException ( JNIEnv * env , ExceptionKind exception , std : : string classStr , std : : string itemStr = " " ) ; 
 
 - extern jclass GetClass ( JNIEnv * env , const char * classStr ) ; 
 + jclass GetClass ( JNIEnv * env , const char * classStr ) ; 
 
 
 / / Debug trace
