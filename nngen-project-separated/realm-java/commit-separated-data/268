BLEU SCORE: 0.02383853510228548

TEST MSG: Local ref needs to be cleaned on client thread
GENERATED MSG: Clean up Collection related code

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index f033363 . . 5f2496e 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 14 , 6 + 14 , 8 @ @ <nl> <nl> # # # Bug Fixes <nl> <nl> + * [ ObjectServer ] Fixed a bug which may crash when the JNI local reference limitation was reached on sync client thread . <nl> + <nl> # # # Internal <nl> <nl> * Upgraded to Realm Sync 1 . 10 . 1 <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncSession . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncSession . cpp <nl> index 8a132d0 . . 5dde2c6 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncSession . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncSession . cpp <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> <nl> # include " util . hpp " <nl> # include " jni _ util / java _ global _ ref . hpp " <nl> + # include " jni _ util / java _ local _ ref . hpp " <nl> # include " jni _ util / java _ method . hpp " <nl> # include " jni _ util / java _ class . hpp " <nl> # include " jni _ util / jni _ utils . hpp " <nl> @ @ - 98 , 9 + 99 , 10 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ SyncSession _ nativeAddProgressListener ( JNIE <nl> uint64 _ t transferred , uint64 _ t transferrable ) { <nl> JNIEnv * local _ env = jni _ util : : JniUtils : : get _ env ( true ) ; <nl> <nl> - auto path = to _ jstring ( local _ env , local _ realm _ path ) ; <nl> - local _ env - > CallStaticVoidMethod ( java _ syncmanager _ class , java _ notify _ progress _ listener , path , listener _ id , <nl> - static _ cast < jlong > ( transferred ) , static _ cast < jlong > ( transferrable ) ) ; <nl> + JavaLocalRef < jstring > path ( local _ env , to _ jstring ( local _ env , local _ realm _ path ) ) ; <nl> + local _ env - > CallStaticVoidMethod ( java _ syncmanager _ class , java _ notify _ progress _ listener , path . get ( ) , <nl> + listener _ id , static _ cast < jlong > ( transferred ) , <nl> + static _ cast < jlong > ( transferrable ) ) ; <nl> <nl> / / All exceptions will be caught on the Java side of handlers , but Errors will still end <nl> / / up here , so we need to do something sensible with them . <nl> @ @ - 111 , 10 + 113 , 6 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ SyncSession _ nativeAddProgressListener ( JNIE <nl> local _ env - > ExceptionDescribe ( ) ; <nl> throw std : : runtime _ error ( " An unexpected Error was thrown from Java . See LogCat " ) ; <nl> } <nl> - <nl> - / / Callback happens on a thread not controlled by the JVM . So manual cleanup is <nl> - / / required . <nl> - local _ env - > DeleteLocalRef ( path ) ; <nl> } ; <nl> uint64 _ t token = session - > register _ progress _ notifier ( callback , type , to _ bool ( is _ streaming ) ) ; <nl> return static _ cast < jlong > ( token ) ; <nl> @ @ - 155 , 14 + 153 , 14 @ @ JNIEXPORT jboolean JNICALL Java _ io _ realm _ SyncSession _ nativeWaitForDownloadComple <nl> bool listener _ registered = <nl> session - > wait _ for _ download _ completion ( [ java _ session _ object _ ref ] ( std : : error _ code error ) { <nl> JNIEnv * env = JniUtils : : get _ env ( true ) ; <nl> - jobject java _ error _ code = nullptr ; <nl> - jstring java _ error _ message = nullptr ; <nl> + JavaLocalRef < jobject > java _ error _ code ; <nl> + JavaLocalRef < jstring > java _ error _ message ; <nl> if ( error ! = std : : error _ code { } ) { <nl> - java _ error _ code = NewLong ( env , error . value ( ) ) ; <nl> - java _ error _ message = env - > NewStringUTF ( error . message ( ) . c _ str ( ) ) ; <nl> + java _ error _ code = JavaLocalRef < jobject > ( env , NewLong ( env , error . value ( ) ) ) ; <nl> + java _ error _ message = JavaLocalRef < jstring > ( env , env - > NewStringUTF ( error . message ( ) . c _ str ( ) ) ) ; <nl> } <nl> - env - > CallVoidMethod ( java _ session _ object _ ref . get ( ) , java _ notify _ result _ method , java _ error _ code , <nl> - java _ error _ message ) ; <nl> + env - > CallVoidMethod ( java _ session _ object _ ref . get ( ) , java _ notify _ result _ method , java _ error _ code . get ( ) , <nl> + java _ error _ message . get ( ) ) ; <nl> } ) ; <nl> <nl> return to _ jbool ( listener _ registered ) ; <nl> @ @ - 197 , 4 + 195 , 4 @ @ JNIEXPORT jbyte JNICALL Java _ io _ realm _ SyncSession _ nativeGetState ( JNIEnv * env , jc <nl> } <nl> CATCH _ STD ( ) <nl> return - 1 ; <nl> - } <nl> \ No newline at end of file <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ local _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ local _ ref . hpp <nl> index 4a57062 . . 0417887 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ local _ ref . hpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ local _ ref . hpp <nl> @ @ - 33 , 17 + 33 , 22 @ @ static constexpr NeedToCreateLocalRef need _ to _ create _ local _ ref { } ; <nl> template < typename T > <nl> class JavaLocalRef { <nl> public : <nl> - / / need _ to _ create is useful when acquire a local ref from a global weak ref . <nl> + inline JavaLocalRef ( ) noexcept <nl> + : m _ jobject ( nullptr ) <nl> + , m _ env ( nullptr ) { } ; <nl> inline JavaLocalRef ( JNIEnv * env , T obj ) noexcept <nl> : m _ jobject ( obj ) <nl> , m _ env ( env ) { } ; <nl> + / / need _ to _ create is useful when acquire a local ref from a global weak ref . <nl> inline JavaLocalRef ( JNIEnv * env , T obj , NeedToCreateLocalRef ) noexcept <nl> : m _ jobject ( env - > NewLocalRef ( obj ) ) <nl> , m _ env ( env ) { } ; <nl> <nl> inline ~ JavaLocalRef ( ) <nl> { <nl> - m _ env - > DeleteLocalRef ( m _ jobject ) ; <nl> + if ( m _ jobject ) { <nl> + m _ env - > DeleteLocalRef ( m _ jobject ) ; <nl> + } <nl> } <nl> <nl> JavaLocalRef & operator = ( JavaLocalRef & & rhs ) <nl> @ @ - 54 , 9 + 59 , 11 @ @ public : <nl> } <nl> <nl> inline JavaLocalRef ( JavaLocalRef & & rhs ) <nl> - : m _ env ( rhs . m _ env ) , m _ jobject ( rhs . m _ jobject ) <nl> + : m _ jobject ( rhs . m _ jobject ) <nl> + , m _ env ( rhs . m _ env ) <nl> { <nl> rhs . m _ jobject = nullptr ; <nl> + rhs . m _ env = nullptr ; <nl> } <nl> <nl> inline operator bool ( ) const noexcept
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> index 1a89734 . . 05ad2e5 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> @ @ - 124 , 13 + 124 , 6 @ @ public class CollectionTests { <nl> sharedRealm . commitTransaction ( ) ; <nl> } <nl> <nl> - private void removeRow ( SharedRealm sharedRealm ) { <nl> - sharedRealm . beginTransaction ( ) ; <nl> - table = sharedRealm . getTable ( " test _ table " ) ; <nl> - table . remove ( 0 ) ; <nl> - sharedRealm . commitTransaction ( ) ; <nl> - } <nl> - <nl> @ Test <nl> public void constructor _ withDistinct ( ) { <nl> SortDescriptor distinctDescriptor = SortDescriptor . getInstanceForDistinct ( table , " firstName " ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index 9c6ca14 . . 27f727b 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 17 , 15 + 17 , 16 @ @ <nl> # include < jni . h > <nl> # include " io _ realm _ internal _ Collection . h " <nl> <nl> - # include < vector > <nl> + # include < realm / util / assert . hpp > <nl> <nl> # include < shared _ realm . hpp > <nl> # include < results . hpp > <nl> <nl> - # include " util . hpp " <nl> # include " java _ sort _ descriptor . hpp " <nl> - # include " jni _ util / java _ method . hpp " <nl> + # include " util . hpp " <nl> + <nl> # include " jni _ util / java _ global _ weak _ ref . hpp " <nl> + # include " jni _ util / java _ method . hpp " <nl> <nl> using namespace realm ; <nl> using namespace realm : : jni _ util ; <nl> @ @ - 126 , 18 + 127 , 6 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> } <nl> <nl> - JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ internal _ Collection _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> - { <nl> - TR _ ENTER _ PTR ( native _ ptr ) <nl> - try { <nl> - auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> - auto snapshot = wrapper - > get _ original _ results ( ) ; <nl> - return reinterpret _ cast < jlong > ( new Results ( snapshot ) ) ; <nl> - } CATCH _ STD ( ) <nl> - return reinterpret _ cast < jlong > ( nullptr ) ; <nl> - } <nl> - <nl> JNIEXPORT jboolean JNICALL <nl> Java _ io _ realm _ internal _ Collection _ nativeContains ( JNIEnv * env , jclass , jlong native _ ptr , jlong native _ row _ ptr ) <nl> { <nl> @ @ - 308 , 11 + 297 , 12 @ @ Java _ io _ realm _ internal _ Collection _ nativeStartListening ( JNIEnv * env , jobject inst <nl> / / OS will call all notifiers ' callback in one run , so check the Java exception first ! ! <nl> if ( env - > ExceptionCheck ( ) ) return ; <nl> <nl> - / / if ( ! wrapper - > is _ detached ( ) ) { <nl> + / / It should have been reattached before the callback . <nl> + REALM _ ASSERT _ DEBUG ( ! wrapper - > is _ detached ( ) ) ; <nl> + <nl> wrapper - > m _ collection _ weak _ ref . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * local _ env , jobject collection _ obj ) { <nl> local _ env - > CallVoidMethod ( collection _ obj , notify _ change _ listeners , changes . empty ( ) ) ; <nl> } ) ; <nl> - / / } <nl> } ; <nl> <nl> wrapper - > m _ notification _ token = wrapper - > get _ original _ results ( ) . add _ notification _ callback ( cb ) ; <nl> @ @ - 419 , 7 + 409 , 6 @ @ Java _ io _ realm _ internal _ Collection _ nativeDeleteLast ( JNIEnv * env , jclass , jlong na <nl> return JNI _ TRUE ; <nl> } <nl> } CATCH _ STD ( ) <nl> - <nl> return JNI _ FALSE ; <nl> } <nl> <nl> @ @ - 437 , 7 + 426 , 6 @ @ Java _ io _ realm _ internal _ Collection _ nativeDeleteFirst ( JNIEnv * env , jclass , jlong n <nl> return JNI _ TRUE ; <nl> } <nl> } CATCH _ STD ( ) <nl> - <nl> return JNI _ FALSE ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index bf0e120 . . 6e54703 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 26 , 9 + 26 , 9 @ @ import io . realm . RealmChangeListener ; <nl> <nl> / * * <nl> * Java wrapper of OS Results class . <nl> - * It is supposed to be the backend of binding ' s query results , link list and back links . <nl> + * It is the backend of binding ' s query results , link list and back links . <nl> * / <nl> - @ KeepMember <nl> + @ Keep <nl> public class Collection implements NativeObject { <nl> <nl> private class CollectionObserverPair < T > extends ObserverPairList . ObserverPair < T , RealmChangeListener < T > > { <nl> @ @ - 93 , 7 + 93 , 6 @ @ public class Collection implements NativeObject { <nl> public static final byte AGGREGATE _ FUNCTION _ AVERAGE = 3 ; <nl> @ SuppressWarnings ( " WeakerAccess " ) <nl> public static final byte AGGREGATE _ FUNCTION _ SUM = 4 ; <nl> - <nl> public enum Aggregate { <nl> MINIMUM ( AGGREGATE _ FUNCTION _ MINIMUM ) , <nl> MAXIMUM ( AGGREGATE _ FUNCTION _ MAXIMUM ) , <nl> @ @ - 121 , 7 + 120 , 6 @ @ public class Collection implements NativeObject { <nl> public static final byte MODE _ LINKVIEW = 3 ; <nl> @ SuppressWarnings ( " WeakerAccess " ) <nl> public static final byte MODE _ TABLEVIEW = 4 ; <nl> - <nl> public enum Mode { <nl> EMPTY , / / Backed by nothing ( for missing tables ) <nl> TABLE , / / Backed directly by a Table <nl> @ @ - 298 , 7 + 296 , 6 @ @ public class Collection implements NativeObject { <nl> } <nl> <nl> / / Called by JNI <nl> - @ KeepMember <nl> @ SuppressWarnings ( " unused " ) <nl> private void notifyChangeListeners ( boolean emptyChanges ) { <nl> if ( isDetached ( ) ) return ; <nl> @ @ - 309 , 8 + 306 , 7 @ @ public class Collection implements NativeObject { <nl> return Mode . getByValue ( nativeGetMode ( nativePtr ) ) ; <nl> } <nl> <nl> - / / Turns this collection to be backed by a snapshot results . <nl> - / / A snapshot results will never be auto - updated . <nl> + / / Turns this collection to be backed by a snapshot results . A snapshot results will never be auto - updated . <nl> void detach ( ) { <nl> nativeDetach ( nativePtr ) ; <nl> } <nl> @ @ - 330 , 8 + 326 , 6 @ @ public class Collection implements NativeObject { <nl> private static native long nativeGetFinalizerPtr ( ) ; <nl> private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , <nl> SortDescriptor sortDesc , SortDescriptor distinctDesc ) ; <nl> - @ SuppressWarnings ( " unused " ) / / Not used for now <nl> - private static native long nativeCreateSnapshot ( long nativePtr ) ; <nl> private static native long nativeGetRow ( long nativePtr , int index ) ; <nl> private static native long nativeFirstRow ( long nativePtr ) ; <nl> private static native long nativeLastRow ( long nativePtr ) ;

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index f033363 . . 5f2496e 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 14 , 6 + 14 , 8 @ @ 
 
 # # # Bug Fixes 
 
 + * [ ObjectServer ] Fixed a bug which may crash when the JNI local reference limitation was reached on sync client thread . 
 + 
 # # # Internal 
 
 * Upgraded to Realm Sync 1 . 10 . 1 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncSession . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncSession . cpp 
 index 8a132d0 . . 5dde2c6 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncSession . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncSession . cpp 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 
 # include " util . hpp " 
 # include " jni _ util / java _ global _ ref . hpp " 
 + # include " jni _ util / java _ local _ ref . hpp " 
 # include " jni _ util / java _ method . hpp " 
 # include " jni _ util / java _ class . hpp " 
 # include " jni _ util / jni _ utils . hpp " 
 @ @ - 98 , 9 + 99 , 10 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ SyncSession _ nativeAddProgressListener ( JNIE 
 uint64 _ t transferred , uint64 _ t transferrable ) { 
 JNIEnv * local _ env = jni _ util : : JniUtils : : get _ env ( true ) ; 
 
 - auto path = to _ jstring ( local _ env , local _ realm _ path ) ; 
 - local _ env - > CallStaticVoidMethod ( java _ syncmanager _ class , java _ notify _ progress _ listener , path , listener _ id , 
 - static _ cast < jlong > ( transferred ) , static _ cast < jlong > ( transferrable ) ) ; 
 + JavaLocalRef < jstring > path ( local _ env , to _ jstring ( local _ env , local _ realm _ path ) ) ; 
 + local _ env - > CallStaticVoidMethod ( java _ syncmanager _ class , java _ notify _ progress _ listener , path . get ( ) , 
 + listener _ id , static _ cast < jlong > ( transferred ) , 
 + static _ cast < jlong > ( transferrable ) ) ; 
 
 / / All exceptions will be caught on the Java side of handlers , but Errors will still end 
 / / up here , so we need to do something sensible with them . 
 @ @ - 111 , 10 + 113 , 6 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ SyncSession _ nativeAddProgressListener ( JNIE 
 local _ env - > ExceptionDescribe ( ) ; 
 throw std : : runtime _ error ( " An unexpected Error was thrown from Java . See LogCat " ) ; 
 } 
 - 
 - / / Callback happens on a thread not controlled by the JVM . So manual cleanup is 
 - / / required . 
 - local _ env - > DeleteLocalRef ( path ) ; 
 } ; 
 uint64 _ t token = session - > register _ progress _ notifier ( callback , type , to _ bool ( is _ streaming ) ) ; 
 return static _ cast < jlong > ( token ) ; 
 @ @ - 155 , 14 + 153 , 14 @ @ JNIEXPORT jboolean JNICALL Java _ io _ realm _ SyncSession _ nativeWaitForDownloadComple 
 bool listener _ registered = 
 session - > wait _ for _ download _ completion ( [ java _ session _ object _ ref ] ( std : : error _ code error ) { 
 JNIEnv * env = JniUtils : : get _ env ( true ) ; 
 - jobject java _ error _ code = nullptr ; 
 - jstring java _ error _ message = nullptr ; 
 + JavaLocalRef < jobject > java _ error _ code ; 
 + JavaLocalRef < jstring > java _ error _ message ; 
 if ( error ! = std : : error _ code { } ) { 
 - java _ error _ code = NewLong ( env , error . value ( ) ) ; 
 - java _ error _ message = env - > NewStringUTF ( error . message ( ) . c _ str ( ) ) ; 
 + java _ error _ code = JavaLocalRef < jobject > ( env , NewLong ( env , error . value ( ) ) ) ; 
 + java _ error _ message = JavaLocalRef < jstring > ( env , env - > NewStringUTF ( error . message ( ) . c _ str ( ) ) ) ; 
 } 
 - env - > CallVoidMethod ( java _ session _ object _ ref . get ( ) , java _ notify _ result _ method , java _ error _ code , 
 - java _ error _ message ) ; 
 + env - > CallVoidMethod ( java _ session _ object _ ref . get ( ) , java _ notify _ result _ method , java _ error _ code . get ( ) , 
 + java _ error _ message . get ( ) ) ; 
 } ) ; 
 
 return to _ jbool ( listener _ registered ) ; 
 @ @ - 197 , 4 + 195 , 4 @ @ JNIEXPORT jbyte JNICALL Java _ io _ realm _ SyncSession _ nativeGetState ( JNIEnv * env , jc 
 } 
 CATCH _ STD ( ) 
 return - 1 ; 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ local _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ local _ ref . hpp 
 index 4a57062 . . 0417887 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ local _ ref . hpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ local _ ref . hpp 
 @ @ - 33 , 17 + 33 , 22 @ @ static constexpr NeedToCreateLocalRef need _ to _ create _ local _ ref { } ; 
 template < typename T > 
 class JavaLocalRef { 
 public : 
 - / / need _ to _ create is useful when acquire a local ref from a global weak ref . 
 + inline JavaLocalRef ( ) noexcept 
 + : m _ jobject ( nullptr ) 
 + , m _ env ( nullptr ) { } ; 
 inline JavaLocalRef ( JNIEnv * env , T obj ) noexcept 
 : m _ jobject ( obj ) 
 , m _ env ( env ) { } ; 
 + / / need _ to _ create is useful when acquire a local ref from a global weak ref . 
 inline JavaLocalRef ( JNIEnv * env , T obj , NeedToCreateLocalRef ) noexcept 
 : m _ jobject ( env - > NewLocalRef ( obj ) ) 
 , m _ env ( env ) { } ; 
 
 inline ~ JavaLocalRef ( ) 
 { 
 - m _ env - > DeleteLocalRef ( m _ jobject ) ; 
 + if ( m _ jobject ) { 
 + m _ env - > DeleteLocalRef ( m _ jobject ) ; 
 + } 
 } 
 
 JavaLocalRef & operator = ( JavaLocalRef & & rhs ) 
 @ @ - 54 , 9 + 59 , 11 @ @ public : 
 } 
 
 inline JavaLocalRef ( JavaLocalRef & & rhs ) 
 - : m _ env ( rhs . m _ env ) , m _ jobject ( rhs . m _ jobject ) 
 + : m _ jobject ( rhs . m _ jobject ) 
 + , m _ env ( rhs . m _ env ) 
 { 
 rhs . m _ jobject = nullptr ; 
 + rhs . m _ env = nullptr ; 
 } 
 
 inline operator bool ( ) const noexcept

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 index 1a89734 . . 05ad2e5 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 @ @ - 124 , 13 + 124 , 6 @ @ public class CollectionTests { 
 sharedRealm . commitTransaction ( ) ; 
 } 
 
 - private void removeRow ( SharedRealm sharedRealm ) { 
 - sharedRealm . beginTransaction ( ) ; 
 - table = sharedRealm . getTable ( " test _ table " ) ; 
 - table . remove ( 0 ) ; 
 - sharedRealm . commitTransaction ( ) ; 
 - } 
 - 
 @ Test 
 public void constructor _ withDistinct ( ) { 
 SortDescriptor distinctDescriptor = SortDescriptor . getInstanceForDistinct ( table , " firstName " ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index 9c6ca14 . . 27f727b 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 17 , 15 + 17 , 16 @ @ 
 # include < jni . h > 
 # include " io _ realm _ internal _ Collection . h " 
 
 - # include < vector > 
 + # include < realm / util / assert . hpp > 
 
 # include < shared _ realm . hpp > 
 # include < results . hpp > 
 
 - # include " util . hpp " 
 # include " java _ sort _ descriptor . hpp " 
 - # include " jni _ util / java _ method . hpp " 
 + # include " util . hpp " 
 + 
 # include " jni _ util / java _ global _ weak _ ref . hpp " 
 + # include " jni _ util / java _ method . hpp " 
 
 using namespace realm ; 
 using namespace realm : : jni _ util ; 
 @ @ - 126 , 18 + 127 , 6 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 } 
 
 - JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ internal _ Collection _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) 
 - { 
 - TR _ ENTER _ PTR ( native _ ptr ) 
 - try { 
 - auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 - auto snapshot = wrapper - > get _ original _ results ( ) ; 
 - return reinterpret _ cast < jlong > ( new Results ( snapshot ) ) ; 
 - } CATCH _ STD ( ) 
 - return reinterpret _ cast < jlong > ( nullptr ) ; 
 - } 
 - 
 JNIEXPORT jboolean JNICALL 
 Java _ io _ realm _ internal _ Collection _ nativeContains ( JNIEnv * env , jclass , jlong native _ ptr , jlong native _ row _ ptr ) 
 { 
 @ @ - 308 , 11 + 297 , 12 @ @ Java _ io _ realm _ internal _ Collection _ nativeStartListening ( JNIEnv * env , jobject inst 
 / / OS will call all notifiers ' callback in one run , so check the Java exception first ! ! 
 if ( env - > ExceptionCheck ( ) ) return ; 
 
 - / / if ( ! wrapper - > is _ detached ( ) ) { 
 + / / It should have been reattached before the callback . 
 + REALM _ ASSERT _ DEBUG ( ! wrapper - > is _ detached ( ) ) ; 
 + 
 wrapper - > m _ collection _ weak _ ref . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * local _ env , jobject collection _ obj ) { 
 local _ env - > CallVoidMethod ( collection _ obj , notify _ change _ listeners , changes . empty ( ) ) ; 
 } ) ; 
 - / / } 
 } ; 
 
 wrapper - > m _ notification _ token = wrapper - > get _ original _ results ( ) . add _ notification _ callback ( cb ) ; 
 @ @ - 419 , 7 + 409 , 6 @ @ Java _ io _ realm _ internal _ Collection _ nativeDeleteLast ( JNIEnv * env , jclass , jlong na 
 return JNI _ TRUE ; 
 } 
 } CATCH _ STD ( ) 
 - 
 return JNI _ FALSE ; 
 } 
 
 @ @ - 437 , 7 + 426 , 6 @ @ Java _ io _ realm _ internal _ Collection _ nativeDeleteFirst ( JNIEnv * env , jclass , jlong n 
 return JNI _ TRUE ; 
 } 
 } CATCH _ STD ( ) 
 - 
 return JNI _ FALSE ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index bf0e120 . . 6e54703 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 26 , 9 + 26 , 9 @ @ import io . realm . RealmChangeListener ; 
 
 / * * 
 * Java wrapper of OS Results class . 
 - * It is supposed to be the backend of binding ' s query results , link list and back links . 
 + * It is the backend of binding ' s query results , link list and back links . 
 * / 
 - @ KeepMember 
 + @ Keep 
 public class Collection implements NativeObject { 
 
 private class CollectionObserverPair < T > extends ObserverPairList . ObserverPair < T , RealmChangeListener < T > > { 
 @ @ - 93 , 7 + 93 , 6 @ @ public class Collection implements NativeObject { 
 public static final byte AGGREGATE _ FUNCTION _ AVERAGE = 3 ; 
 @ SuppressWarnings ( " WeakerAccess " ) 
 public static final byte AGGREGATE _ FUNCTION _ SUM = 4 ; 
 - 
 public enum Aggregate { 
 MINIMUM ( AGGREGATE _ FUNCTION _ MINIMUM ) , 
 MAXIMUM ( AGGREGATE _ FUNCTION _ MAXIMUM ) , 
 @ @ - 121 , 7 + 120 , 6 @ @ public class Collection implements NativeObject { 
 public static final byte MODE _ LINKVIEW = 3 ; 
 @ SuppressWarnings ( " WeakerAccess " ) 
 public static final byte MODE _ TABLEVIEW = 4 ; 
 - 
 public enum Mode { 
 EMPTY , / / Backed by nothing ( for missing tables ) 
 TABLE , / / Backed directly by a Table 
 @ @ - 298 , 7 + 296 , 6 @ @ public class Collection implements NativeObject { 
 } 
 
 / / Called by JNI 
 - @ KeepMember 
 @ SuppressWarnings ( " unused " ) 
 private void notifyChangeListeners ( boolean emptyChanges ) { 
 if ( isDetached ( ) ) return ; 
 @ @ - 309 , 8 + 306 , 7 @ @ public class Collection implements NativeObject { 
 return Mode . getByValue ( nativeGetMode ( nativePtr ) ) ; 
 } 
 
 - / / Turns this collection to be backed by a snapshot results . 
 - / / A snapshot results will never be auto - updated . 
 + / / Turns this collection to be backed by a snapshot results . A snapshot results will never be auto - updated . 
 void detach ( ) { 
 nativeDetach ( nativePtr ) ; 
 } 
 @ @ - 330 , 8 + 326 , 6 @ @ public class Collection implements NativeObject { 
 private static native long nativeGetFinalizerPtr ( ) ; 
 private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , 
 SortDescriptor sortDesc , SortDescriptor distinctDesc ) ; 
 - @ SuppressWarnings ( " unused " ) / / Not used for now 
 - private static native long nativeCreateSnapshot ( long nativePtr ) ; 
 private static native long nativeGetRow ( long nativePtr , int index ) ; 
 private static native long nativeFirstRow ( long nativePtr ) ; 
 private static native long nativeLastRow ( long nativePtr ) ;
