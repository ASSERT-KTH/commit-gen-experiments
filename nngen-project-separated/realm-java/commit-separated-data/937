BLEU SCORE: 0.016932492841722675

TEST MSG: Add tests of aggregation methods in ReqlmQuery for the nullable columans .
GENERATED MSG: Remove unneeded throws

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTest . java <nl> index a186ffb . . d2a08f0 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTest . java <nl> @ @ - 1011 , 8 + 1011 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> assertNull ( query . minimumDate ( NullTypes . FIELD _ DATE _ NULL ) ) ; <nl> } <nl> <nl> - / / Test min on columns with partial null rows <nl> - public void testMinGivesCorrectValueForAllNonNullRows ( ) { <nl> + / / Test min on columns with all non - null rows <nl> + public void testMinForAllNonNullRows ( ) { <nl> TestHelper . populateAllNonNullRowsForNumericTesting ( testRealm ) ; <nl> RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; <nl> <nl> @ @ - 1023 , 7 + 1023 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> } <nl> <nl> / / Test min on columns with partial null rows <nl> - public void testMinGivesCorrectValueForPartialNullRows ( ) { <nl> + public void testMinForPartialNullRows ( ) { <nl> TestHelper . populatePartialNullRowsForNumericTesting ( testRealm ) ; <nl> RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; <nl> <nl> @ @ - 1052 , 8 + 1052 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> assertNull ( query . maximumDate ( NullTypes . FIELD _ DATE _ NULL ) ) ; <nl> } <nl> <nl> - / / Test max on columns with partial null rows <nl> - public void testMaxGivesCorrectValueForAllNonNullRows ( ) { <nl> + / / Test max on columns with all non - null rows <nl> + public void testMaxForAllNonNullRows ( ) { <nl> TestHelper . populateAllNonNullRowsForNumericTesting ( testRealm ) ; <nl> RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; <nl> <nl> @ @ - 1064 , 7 + 1064 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> } <nl> <nl> / / Test max on columns with partial null rows <nl> - public void testMaxGivesCorrectValueForPartialNullRows ( ) { <nl> + public void testMaxForPartialNullRows ( ) { <nl> TestHelper . populatePartialNullRowsForNumericTesting ( testRealm ) ; <nl> RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; <nl> <nl> @ @ - 1092 , 8 + 1092 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> assertEquals ( 0d , query . average ( NullTypes . FIELD _ DOUBLE _ NULL ) , 0d ) ; <nl> } <nl> <nl> - / / Test average on columns with partial null rows <nl> - public void testAvgGivesCorrectValueForAllNonNullRows ( ) { <nl> + / / Test average on columns with all non - null rows <nl> + public void testAvgForAllNonNullRows ( ) { <nl> TestHelper . populateAllNonNullRowsForNumericTesting ( testRealm ) ; <nl> RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; <nl> <nl> @ @ - 1104 , 7 + 1104 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> } <nl> <nl> / / Test average on columns with partial null rows <nl> - public void testAvgGivesCorrectValueForPartialNullRows ( ) { <nl> + public void testAvgForPartialNullRows ( ) { <nl> TestHelper . populatePartialNullRowsForNumericTesting ( testRealm ) ; <nl> RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; <nl> <nl> @ @ - 1132 , 8 + 1132 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> assertEquals ( 0d , query . sum ( NullTypes . FIELD _ DOUBLE _ NULL ) . doubleValue ( ) , 0d ) ; <nl> } <nl> <nl> - / / Test sum on columns with partial null rows <nl> - public void testSumGivesCorrectValueForAllNonNullRows ( ) { <nl> + / / Test sum on columns with all non - null rows <nl> + public void testSumForAllNonNullRows ( ) { <nl> TestHelper . populateAllNonNullRowsForNumericTesting ( testRealm ) ; <nl> RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; <nl> <nl> @ @ - 1143 , 7 + 1143 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> } <nl> <nl> / / Test sum on columns with partial null rows <nl> - public void testSumGivesCorrectValueForPartialNullRows ( ) { <nl> + public void testSumForPartialNullRows ( ) { <nl> TestHelper . populatePartialNullRowsForNumericTesting ( testRealm ) ; <nl> RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java <nl> index 1ac19a9 . . 8d16ebe 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java <nl> @ @ - 333 , 7 + 333 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertEquals ( 3d , results . max ( NullTypes . FIELD _ DOUBLE _ NULL ) . doubleValue ( ) , 0d ) ; <nl> } <nl> <nl> - public void testSumGivesCorrectValue ( ) { <nl> + public void testSum ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> Number sum = resultList . sum ( FIELD _ LONG ) ; <nl> @ @ - 342 , 7 + 342 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> } <nl> <nl> / / Test sum on nullable rows with all null values <nl> - public void testSumGivesCorrectValueForAllNullRows ( ) { <nl> + public void testSumForAllNullRows ( ) { <nl> TestHelper . populateAllNullRowsForNumericTesting ( testRealm ) ; <nl> <nl> RealmResults < NullTypes > resultList = testRealm . where ( NullTypes . class ) . findAll ( ) ; <nl> @ @ - 352 , 7 + 352 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> } <nl> <nl> / / Test sum on nullable rows with partial null values <nl> - public void testSumGivesCorrectValueForPartialNullRows ( ) { <nl> + public void testSumForPartialNullRows ( ) { <nl> populatePartialNullRowsForNumericTesting ( ) ; <nl> RealmResults < NullTypes > resultList = testRealm . where ( NullTypes . class ) . findAll ( ) ; <nl> <nl> @ @ - 361 , 7 + 361 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertEquals ( 3d , resultList . sum ( NullTypes . FIELD _ DOUBLE _ NULL ) . doubleValue ( ) , 0d ) ; <nl> } <nl> <nl> - public void testSumGivesCorrectValueWithNonLatinColumnNames ( ) { <nl> + public void testSumWithNonLatinColumnNames ( ) { <nl> RealmResults < NonLatinFieldNames > resultList = testRealm . where ( NonLatinFieldNames . class ) . findAll ( ) ; <nl> <nl> Number sum = resultList . sum ( FIELD _ KOREAN _ CHAR ) ; <nl> @ @ - 373 , 7 + 373 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertEquals ( ( TEST _ DATA _ SIZE - 1 ) * TEST _ DATA _ SIZE / 2 , sum . intValue ( ) ) ; <nl> } <nl> <nl> - public void testAvgGivesCorrectValue ( ) { <nl> + public void testAvg ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> double N = ( double ) TEST _ DATA _ SIZE ; <nl> <nl> @ @ - 402 , 7 + 402 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> } <nl> <nl> / / Test average on empty columns <nl> - public void testAvgGivesCorrectValueForEmptyColumns ( ) { <nl> + public void testAvgForEmptyColumns ( ) { <nl> RealmResults < NullTypes > resultList = testRealm . where ( NullTypes . class ) . findAll ( ) ; <nl> <nl> assertEquals ( 0d , resultList . average ( NullTypes . FIELD _ INTEGER _ NOT _ NULL ) , 0d ) ; <nl> @ @ - 411 , 7 + 411 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> } <nl> <nl> / / Test average on nullable rows with all null values <nl> - public void testAvgGivesCorrectValueForAllNullRows ( ) { <nl> + public void testAvgForAllNullRows ( ) { <nl> TestHelper . populateAllNullRowsForNumericTesting ( testRealm ) ; <nl> <nl> RealmResults < NullTypes > resultList = testRealm . where ( NullTypes . class ) . findAll ( ) ; <nl> @ @ - 421 , 7 + 421 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> } <nl> <nl> / / Test average on nullable rows with partial null values <nl> - public void testAvgGivesCorrectValueForPartialNullRows ( ) { <nl> + public void testAvgForPartialNullRows ( ) { <nl> populatePartialNullRowsForNumericTesting ( ) ; <nl> RealmResults < NullTypes > resultList = testRealm . where ( NullTypes . class ) . findAll ( ) ; <nl>
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> index 3891e22 . . cc7992a 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> @ @ - 18 , 7 + 18 , 6 @ @ package io . realm ; <nl> <nl> import android . test . AndroidTestCase ; <nl> <nl> - import java . io . IOException ; <nl> import java . util . Date ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> @ @ - 31 , 7 + 30 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> protected Realm testRealm ; <nl> <nl> @ Override <nl> - protected void setUp ( ) throws Exception { <nl> + protected void setUp ( ) { <nl> Realm . deleteRealmFile ( getContext ( ) ) ; <nl> testRealm = Realm . getInstance ( getContext ( ) ) ; <nl> <nl> @ @ - 56 , 7 + 55 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> / / test io . realm . ResultList Api <nl> <nl> / / void clear ( Class < ? > classSpec ) <nl> - public void testClearEmptiesTable ( ) throws IOException { <nl> + public void testClearEmptiesTable ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> @ @ - 78 , 14 + 77 , 14 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> <nl> <nl> / / void clear ( Class < ? > classSpec ) <nl> - public void testIsResultListSizeOk ( ) throws IOException { <nl> + public void testIsResultListSizeOk ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> assertNotNull ( " ResultList . where has returned null " , resultList ) ; <nl> assertEquals ( " ResultList . where unexpected number of objects returned " , TEST _ DATA _ SIZE , resultList . size ( ) ) ; <nl> } <nl> <nl> <nl> - public void testResultListFirstIsFirst ( ) throws IOException { <nl> + public void testResultListFirstIsFirst ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> AllTypes allTypes = resultList . first ( ) ; <nl> @ @ - 93 , 7 + 92 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertTrue ( " ResultList . first returned invalid data " , allTypes . getColumnString ( ) . startsWith ( " test data 0 " ) ) ; <nl> } <nl> <nl> - public void testResultListLastIsLast ( ) throws IOException { <nl> + public void testResultListLastIsLast ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> AllTypes allTypes = resultList . last ( ) ; <nl> @ @ - 101 , 21 + 100 , 21 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertEquals ( " ResultList . last returned invalid data " , ( TEST _ DATA _ SIZE - 1 ) , allTypes . getColumnLong ( ) ) ; <nl> } <nl> <nl> - public void testMinValueIsMinValue ( ) throws IOException { <nl> + public void testMinValueIsMinValue ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> Number minimum = resultList . min ( " columnLong " ) ; <nl> assertEquals ( " ResultList . min returned wrong value " , 0 , minimum . intValue ( ) ) ; <nl> } <nl> <nl> - public void testMaxValueIsMaxValue ( ) throws IOException { <nl> + public void testMaxValueIsMaxValue ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> Number maximum = resultList . max ( " columnLong " ) ; <nl> assertEquals ( " ResultList . max returned wrong value " , TEST _ DATA _ SIZE - 1 , maximum . intValue ( ) ) ; <nl> } <nl> <nl> - public void testSumGivesCorrectValue ( ) throws IOException { <nl> + public void testSumGivesCorrectValue ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> Number sum = resultList . sum ( " columnLong " ) ; <nl> @ @ - 127 , 7 + 126 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertEquals ( " ResultList . sum returned wrong sum " , checkSum , sum . intValue ( ) ) ; <nl> } <nl> <nl> - public void testAvgGivesCorrectValue ( ) throws IOException { <nl> + public void testAvgGivesCorrectValue ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> Double avg = Math . round ( resultList . average ( " columnDouble " ) * 10000 . 0 ) / 10000 . 0 ; <nl> @ @ - 137 , 7 + 136 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> <nl> <nl> / / void clear ( Class < ? > classSpec ) <nl> - public void testRemoveIsResultListSizeOk ( ) throws IOException { <nl> + public void testRemoveIsResultListSizeOk ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> @ @ - 152 , 7 + 151 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertTrue ( " ResultList . remove unexpected first record " , allTypes . getColumnLong ( ) = = 1 ) ; <nl> } <nl> <nl> - public void testIsResultRemoveLastListSizeOk ( ) throws IOException { <nl> + public void testIsResultRemoveLastListSizeOk ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> testRealm . beginTransaction ( ) ; <nl> @ @ - 171 , 14 + 170 , 14 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> <nl> } <nl> <nl> - public void testSort ( ) throws IOException { <nl> + public void testSort ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> RealmResults < AllTypes > sortedList = resultList . sort ( " columnLong " , RealmResults . SORT _ ORDER _ DECENDING ) ; <nl> assertEquals ( " Should have same size " , resultList . size ( ) , sortedList . size ( ) ) ; <nl> assertEquals ( " First excepted to be last " , resultList . first ( ) . getColumnString ( ) , sortedList . last ( ) . getColumnString ( ) ) ; <nl> } <nl> <nl> - public void testCount ( ) throws IOException { <nl> + public void testCount ( ) { <nl> assertEquals ( TEST _ DATA _ SIZE , testRealm . where ( AllTypes . class ) . count ( ) ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTest . java 
 index a186ffb . . d2a08f0 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmQueryTest . java 
 @ @ - 1011 , 8 + 1011 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { 
 assertNull ( query . minimumDate ( NullTypes . FIELD _ DATE _ NULL ) ) ; 
 } 
 
 - / / Test min on columns with partial null rows 
 - public void testMinGivesCorrectValueForAllNonNullRows ( ) { 
 + / / Test min on columns with all non - null rows 
 + public void testMinForAllNonNullRows ( ) { 
 TestHelper . populateAllNonNullRowsForNumericTesting ( testRealm ) ; 
 RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; 
 
 @ @ - 1023 , 7 + 1023 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { 
 } 
 
 / / Test min on columns with partial null rows 
 - public void testMinGivesCorrectValueForPartialNullRows ( ) { 
 + public void testMinForPartialNullRows ( ) { 
 TestHelper . populatePartialNullRowsForNumericTesting ( testRealm ) ; 
 RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; 
 
 @ @ - 1052 , 8 + 1052 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { 
 assertNull ( query . maximumDate ( NullTypes . FIELD _ DATE _ NULL ) ) ; 
 } 
 
 - / / Test max on columns with partial null rows 
 - public void testMaxGivesCorrectValueForAllNonNullRows ( ) { 
 + / / Test max on columns with all non - null rows 
 + public void testMaxForAllNonNullRows ( ) { 
 TestHelper . populateAllNonNullRowsForNumericTesting ( testRealm ) ; 
 RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; 
 
 @ @ - 1064 , 7 + 1064 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { 
 } 
 
 / / Test max on columns with partial null rows 
 - public void testMaxGivesCorrectValueForPartialNullRows ( ) { 
 + public void testMaxForPartialNullRows ( ) { 
 TestHelper . populatePartialNullRowsForNumericTesting ( testRealm ) ; 
 RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; 
 
 @ @ - 1092 , 8 + 1092 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { 
 assertEquals ( 0d , query . average ( NullTypes . FIELD _ DOUBLE _ NULL ) , 0d ) ; 
 } 
 
 - / / Test average on columns with partial null rows 
 - public void testAvgGivesCorrectValueForAllNonNullRows ( ) { 
 + / / Test average on columns with all non - null rows 
 + public void testAvgForAllNonNullRows ( ) { 
 TestHelper . populateAllNonNullRowsForNumericTesting ( testRealm ) ; 
 RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; 
 
 @ @ - 1104 , 7 + 1104 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { 
 } 
 
 / / Test average on columns with partial null rows 
 - public void testAvgGivesCorrectValueForPartialNullRows ( ) { 
 + public void testAvgForPartialNullRows ( ) { 
 TestHelper . populatePartialNullRowsForNumericTesting ( testRealm ) ; 
 RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; 
 
 @ @ - 1132 , 8 + 1132 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { 
 assertEquals ( 0d , query . sum ( NullTypes . FIELD _ DOUBLE _ NULL ) . doubleValue ( ) , 0d ) ; 
 } 
 
 - / / Test sum on columns with partial null rows 
 - public void testSumGivesCorrectValueForAllNonNullRows ( ) { 
 + / / Test sum on columns with all non - null rows 
 + public void testSumForAllNonNullRows ( ) { 
 TestHelper . populateAllNonNullRowsForNumericTesting ( testRealm ) ; 
 RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; 
 
 @ @ - 1143 , 7 + 1143 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { 
 } 
 
 / / Test sum on columns with partial null rows 
 - public void testSumGivesCorrectValueForPartialNullRows ( ) { 
 + public void testSumForPartialNullRows ( ) { 
 TestHelper . populatePartialNullRowsForNumericTesting ( testRealm ) ; 
 RealmQuery < NullTypes > query = testRealm . where ( NullTypes . class ) ; 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java 
 index 1ac19a9 . . 8d16ebe 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTest . java 
 @ @ - 333 , 7 + 333 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertEquals ( 3d , results . max ( NullTypes . FIELD _ DOUBLE _ NULL ) . doubleValue ( ) , 0d ) ; 
 } 
 
 - public void testSumGivesCorrectValue ( ) { 
 + public void testSum ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 
 Number sum = resultList . sum ( FIELD _ LONG ) ; 
 @ @ - 342 , 7 + 342 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 } 
 
 / / Test sum on nullable rows with all null values 
 - public void testSumGivesCorrectValueForAllNullRows ( ) { 
 + public void testSumForAllNullRows ( ) { 
 TestHelper . populateAllNullRowsForNumericTesting ( testRealm ) ; 
 
 RealmResults < NullTypes > resultList = testRealm . where ( NullTypes . class ) . findAll ( ) ; 
 @ @ - 352 , 7 + 352 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 } 
 
 / / Test sum on nullable rows with partial null values 
 - public void testSumGivesCorrectValueForPartialNullRows ( ) { 
 + public void testSumForPartialNullRows ( ) { 
 populatePartialNullRowsForNumericTesting ( ) ; 
 RealmResults < NullTypes > resultList = testRealm . where ( NullTypes . class ) . findAll ( ) ; 
 
 @ @ - 361 , 7 + 361 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertEquals ( 3d , resultList . sum ( NullTypes . FIELD _ DOUBLE _ NULL ) . doubleValue ( ) , 0d ) ; 
 } 
 
 - public void testSumGivesCorrectValueWithNonLatinColumnNames ( ) { 
 + public void testSumWithNonLatinColumnNames ( ) { 
 RealmResults < NonLatinFieldNames > resultList = testRealm . where ( NonLatinFieldNames . class ) . findAll ( ) ; 
 
 Number sum = resultList . sum ( FIELD _ KOREAN _ CHAR ) ; 
 @ @ - 373 , 7 + 373 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertEquals ( ( TEST _ DATA _ SIZE - 1 ) * TEST _ DATA _ SIZE / 2 , sum . intValue ( ) ) ; 
 } 
 
 - public void testAvgGivesCorrectValue ( ) { 
 + public void testAvg ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 double N = ( double ) TEST _ DATA _ SIZE ; 
 
 @ @ - 402 , 7 + 402 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 } 
 
 / / Test average on empty columns 
 - public void testAvgGivesCorrectValueForEmptyColumns ( ) { 
 + public void testAvgForEmptyColumns ( ) { 
 RealmResults < NullTypes > resultList = testRealm . where ( NullTypes . class ) . findAll ( ) ; 
 
 assertEquals ( 0d , resultList . average ( NullTypes . FIELD _ INTEGER _ NOT _ NULL ) , 0d ) ; 
 @ @ - 411 , 7 + 411 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 } 
 
 / / Test average on nullable rows with all null values 
 - public void testAvgGivesCorrectValueForAllNullRows ( ) { 
 + public void testAvgForAllNullRows ( ) { 
 TestHelper . populateAllNullRowsForNumericTesting ( testRealm ) ; 
 
 RealmResults < NullTypes > resultList = testRealm . where ( NullTypes . class ) . findAll ( ) ; 
 @ @ - 421 , 7 + 421 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 } 
 
 / / Test average on nullable rows with partial null values 
 - public void testAvgGivesCorrectValueForPartialNullRows ( ) { 
 + public void testAvgForPartialNullRows ( ) { 
 populatePartialNullRowsForNumericTesting ( ) ; 
 RealmResults < NullTypes > resultList = testRealm . where ( NullTypes . class ) . findAll ( ) ; 


NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 index 3891e22 . . cc7992a 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 @ @ - 18 , 7 + 18 , 6 @ @ package io . realm ; 
 
 import android . test . AndroidTestCase ; 
 
 - import java . io . IOException ; 
 import java . util . Date ; 
 
 import io . realm . entities . AllTypes ; 
 @ @ - 31 , 7 + 30 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 protected Realm testRealm ; 
 
 @ Override 
 - protected void setUp ( ) throws Exception { 
 + protected void setUp ( ) { 
 Realm . deleteRealmFile ( getContext ( ) ) ; 
 testRealm = Realm . getInstance ( getContext ( ) ) ; 
 
 @ @ - 56 , 7 + 55 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 / / test io . realm . ResultList Api 
 
 / / void clear ( Class < ? > classSpec ) 
 - public void testClearEmptiesTable ( ) throws IOException { 
 + public void testClearEmptiesTable ( ) { 
 testRealm . beginTransaction ( ) ; 
 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 @ @ - 78 , 14 + 77 , 14 @ @ public class RealmResultsTest extends AndroidTestCase { 
 
 
 / / void clear ( Class < ? > classSpec ) 
 - public void testIsResultListSizeOk ( ) throws IOException { 
 + public void testIsResultListSizeOk ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 assertNotNull ( " ResultList . where has returned null " , resultList ) ; 
 assertEquals ( " ResultList . where unexpected number of objects returned " , TEST _ DATA _ SIZE , resultList . size ( ) ) ; 
 } 
 
 
 - public void testResultListFirstIsFirst ( ) throws IOException { 
 + public void testResultListFirstIsFirst ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 
 AllTypes allTypes = resultList . first ( ) ; 
 @ @ - 93 , 7 + 92 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertTrue ( " ResultList . first returned invalid data " , allTypes . getColumnString ( ) . startsWith ( " test data 0 " ) ) ; 
 } 
 
 - public void testResultListLastIsLast ( ) throws IOException { 
 + public void testResultListLastIsLast ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 
 AllTypes allTypes = resultList . last ( ) ; 
 @ @ - 101 , 21 + 100 , 21 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertEquals ( " ResultList . last returned invalid data " , ( TEST _ DATA _ SIZE - 1 ) , allTypes . getColumnLong ( ) ) ; 
 } 
 
 - public void testMinValueIsMinValue ( ) throws IOException { 
 + public void testMinValueIsMinValue ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 
 Number minimum = resultList . min ( " columnLong " ) ; 
 assertEquals ( " ResultList . min returned wrong value " , 0 , minimum . intValue ( ) ) ; 
 } 
 
 - public void testMaxValueIsMaxValue ( ) throws IOException { 
 + public void testMaxValueIsMaxValue ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 
 Number maximum = resultList . max ( " columnLong " ) ; 
 assertEquals ( " ResultList . max returned wrong value " , TEST _ DATA _ SIZE - 1 , maximum . intValue ( ) ) ; 
 } 
 
 - public void testSumGivesCorrectValue ( ) throws IOException { 
 + public void testSumGivesCorrectValue ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 
 Number sum = resultList . sum ( " columnLong " ) ; 
 @ @ - 127 , 7 + 126 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertEquals ( " ResultList . sum returned wrong sum " , checkSum , sum . intValue ( ) ) ; 
 } 
 
 - public void testAvgGivesCorrectValue ( ) throws IOException { 
 + public void testAvgGivesCorrectValue ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 
 Double avg = Math . round ( resultList . average ( " columnDouble " ) * 10000 . 0 ) / 10000 . 0 ; 
 @ @ - 137 , 7 + 136 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 
 
 / / void clear ( Class < ? > classSpec ) 
 - public void testRemoveIsResultListSizeOk ( ) throws IOException { 
 + public void testRemoveIsResultListSizeOk ( ) { 
 testRealm . beginTransaction ( ) ; 
 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 @ @ - 152 , 7 + 151 , 7 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertTrue ( " ResultList . remove unexpected first record " , allTypes . getColumnLong ( ) = = 1 ) ; 
 } 
 
 - public void testIsResultRemoveLastListSizeOk ( ) throws IOException { 
 + public void testIsResultRemoveLastListSizeOk ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 
 testRealm . beginTransaction ( ) ; 
 @ @ - 171 , 14 + 170 , 14 @ @ public class RealmResultsTest extends AndroidTestCase { 
 
 } 
 
 - public void testSort ( ) throws IOException { 
 + public void testSort ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 RealmResults < AllTypes > sortedList = resultList . sort ( " columnLong " , RealmResults . SORT _ ORDER _ DECENDING ) ; 
 assertEquals ( " Should have same size " , resultList . size ( ) , sortedList . size ( ) ) ; 
 assertEquals ( " First excepted to be last " , resultList . first ( ) . getColumnString ( ) , sortedList . last ( ) . getColumnString ( ) ) ; 
 } 
 
 - public void testCount ( ) throws IOException { 
 + public void testCount ( ) { 
 assertEquals ( TEST _ DATA _ SIZE , testRealm . where ( AllTypes . class ) . count ( ) ) ; 
 } 
 }
