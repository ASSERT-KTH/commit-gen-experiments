BLEU SCORE: 0.018914995614939308

TEST MSG: Fix flaky test
GENERATED MSG: adding unit test to expose the fixed issue in Core # 1717

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> index 0bc84aa . . 725fde8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> @ @ - 601 , 6 + 601 , 9 @ @ public class TypeBasedNotificationsTests { <nl> looperThread1 . start ( ) ; <nl> looperThread2 . start ( ) ; <nl> looperThread3 . start ( ) ; <nl> + final Handler looperHandler1 = new Handler ( looperThread1 . getLooper ( ) ) ; <nl> + final Handler looperHandler2 = new Handler ( looperThread2 . getLooper ( ) ) ; <nl> + final Handler looperHandler3 = new Handler ( looperThread3 . getLooper ( ) ) ; <nl> final Realm realm = looperThread . realm ; <nl> realm . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> @ @ - 615 , 19 + 618 , 47 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( ) { <nl> switch ( typebasedCommitInvocations . incrementAndGet ( ) ) { <nl> - case 1 : / / triggered by COMPLETED _ ASYNC _ REALM _ OBJECT from caling dog . load ( ) <nl> + case 1 : / / triggered by COMPLETED _ ASYNC _ REALM _ OBJECT from calling dog . load ( ) <nl> + assertTrue ( dog . isLoaded ( ) ) ; <nl> + assertFalse ( dog . isValid ( ) ) ; <nl> + <nl> + looperHandler1 . post ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm realmLooperThread1 = Realm . getInstance ( realm . getConfiguration ( ) ) ; <nl> + realmLooperThread1 . beginTransaction ( ) ; <nl> + realmLooperThread1 . commitTransaction ( ) ; <nl> + realmLooperThread1 . close ( ) ; <nl> + looperThread1Done . countDown ( ) ; <nl> + } <nl> + } ) ; <nl> + break ; <nl> case 2 : / / triggered by the irrelevant commit ( not affecting Dog table ) from LooperThread1 <nl> assertTrue ( dog . isLoaded ( ) ) ; <nl> assertFalse ( dog . isValid ( ) ) ; <nl> + <nl> + looperHandler2 . post ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm realmLooperThread2 = Realm . getInstance ( realm . getConfiguration ( ) ) ; <nl> + / / trigger first callback invocation <nl> + realmLooperThread2 . beginTransaction ( ) ; <nl> + Dog dog = realmLooperThread2 . createObject ( Dog . class ) ; <nl> + dog . setName ( " Akamaru " ) ; <nl> + realmLooperThread2 . commitTransaction ( ) ; <nl> + realmLooperThread2 . close ( ) ; <nl> + looperThread2Done . countDown ( ) ; <nl> + } <nl> + } ) ; <nl> break ; <nl> <nl> - case 3 : / / triggered by relevant commmit from LooperThread2 <nl> + case 3 : / / triggered by relevant commit from LooperThread2 <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> realm . handler . post ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> / / trigger second callback invocation <nl> - new Handler ( looperThread3 . getLooper ( ) ) . post ( new Runnable ( ) { <nl> + looperHandler3 . post ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> Realm realmLooperThread3 = Realm . getInstance ( realm . getConfiguration ( ) ) ; <nl> @ @ - 666 , 41 + 697 , 13 @ @ public class TypeBasedNotificationsTests { <nl> } <nl> } ) ; <nl> <nl> - new Handler ( looperThread1 . getLooper ( ) ) . post ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - Realm realmLooperThread1 = Realm . getInstance ( realm . getConfiguration ( ) ) ; <nl> - realmLooperThread1 . beginTransaction ( ) ; <nl> - realmLooperThread1 . commitTransaction ( ) ; <nl> - realmLooperThread1 . close ( ) ; <nl> - looperThread1Done . countDown ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - new Handler ( looperThread2 . getLooper ( ) ) . post ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - TestHelper . awaitOrFail ( looperThread1Done ) ; <nl> - Realm realmLooperThread2 = Realm . getInstance ( realm . getConfiguration ( ) ) ; <nl> - / / trigger first callback invocation <nl> - realmLooperThread2 . beginTransaction ( ) ; <nl> - Dog dog = realmLooperThread2 . createObject ( Dog . class ) ; <nl> - dog . setName ( " Akamaru " ) ; <nl> - realmLooperThread2 . commitTransaction ( ) ; <nl> - realmLooperThread2 . close ( ) ; <nl> - looperThread2Done . countDown ( ) ; <nl> - } <nl> - } ) ; <nl> } <nl> <nl> / / UC 1 Async RealmObject <nl> @ Test <nl> @ RunTestInLooperThread <nl> public void callback _ with _ relevant _ commit _ from _ different _ non _ looper _ realmobject _ async ( ) throws Throwable { <nl> - final CountDownLatch asyncQueryComplete = new CountDownLatch ( 1 ) ; <nl> - final CountDownLatch nonRelevantCommitComplete = new CountDownLatch ( 1 ) ; <nl> - final CountDownLatch dogCreatedCompelte = new CountDownLatch ( 1 ) ; <nl> - <nl> + final CountDownLatch nonLooperThread3CloseLatch = new CountDownLatch ( 1 ) ; <nl> final Realm realm = looperThread . realm ; <nl> realm . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> @ @ - 753 , 6 + 756 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realmNonLooperThread3 . where ( Dog . class ) . findFirst ( ) . setAge ( 17 ) ; <nl> realmNonLooperThread3 . commitTransaction ( ) ; <nl> realmNonLooperThread3 . close ( ) ; <nl> + nonLooperThread3CloseLatch . countDown ( ) ; <nl> } <nl> } . start ( ) ; <nl> } <nl> @ @ - 770 , 6 + 774 , 7 @ @ public class TypeBasedNotificationsTests { <nl> public void run ( ) { <nl> assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; <nl> assertEquals ( 4 , typebasedCommitInvocations . get ( ) ) ; <nl> + TestHelper . awaitOrFail ( nonLooperThread3CloseLatch ) ; <nl> looperThread . testComplete ( ) ; <nl> } <nl> } ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> index 3afbce9 . . 9a044a3 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> @ @ - 2772 , 6 + 2772 , 98 @ @ public class RealmAsyncQueryTests extends InstrumentationTestCase { <nl> } <nl> } <nl> <nl> + / / this test make sure that Async queries update when using link <nl> + public void testQueryingLinkHandover ( ) throws Throwable { <nl> + final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> + final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> + final AtomicInteger numberOfInvocations = new AtomicInteger ( 0 ) ; <nl> + final Realm [ ] realm = new Realm [ 1 ] ; <nl> + final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> + final Looper [ ] backgroundLooper = new Looper [ 1 ] ; <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + executorService . submit ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Looper . prepare ( ) ; <nl> + backgroundLooper [ 0 ] = Looper . myLooper ( ) ; <nl> + <nl> + try { <nl> + realm [ 0 ] = openRealmInstance ( " testQueryingLinkHandover " ) ; <nl> + <nl> + final RealmResults < Dog > allAsync = realm [ 0 ] . where ( Dog . class ) . equalTo ( " owner . name " , " kiba " ) . findAllAsync ( ) ; <nl> + allAsync . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + switch ( numberOfInvocations . incrementAndGet ( ) ) { <nl> + case 1 : { <nl> + assertEquals ( 0 , allAsync . size ( ) ) ; <nl> + assertTrue ( allAsync . isLoaded ( ) ) ; <nl> + assertTrue ( allAsync . isValid ( ) ) ; <nl> + assertTrue ( allAsync . isEmpty ( ) ) ; <nl> + final CountDownLatch wait = new CountDownLatch ( 1 ) ; <nl> + final RealmConfiguration configuration = realm [ 0 ] . getConfiguration ( ) ; <nl> + new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm instance = Realm . getInstance ( configuration ) ; <nl> + instance . beginTransaction ( ) ; <nl> + Dog dog = instance . createObject ( Dog . class ) ; <nl> + dog . setAge ( 10 ) ; <nl> + dog . setName ( " Akamaru " ) ; <nl> + Owner kiba = instance . createObject ( Owner . class ) ; <nl> + kiba . setName ( " kiba " ) ; <nl> + dog . setOwner ( kiba ) ; <nl> + instance . commitTransaction ( ) ; <nl> + wait . countDown ( ) ; <nl> + } <nl> + } . start ( ) ; <nl> + try { <nl> + wait . await ( ) ; <nl> + } catch ( InterruptedException e ) { <nl> + fail ( e . getMessage ( ) ) ; <nl> + } <nl> + break ; <nl> + } <nl> + case 2 : { <nl> + assertEquals ( 1 , realm [ 0 ] . allObjects ( Dog . class ) . size ( ) ) ; <nl> + assertEquals ( 1 , realm [ 0 ] . allObjects ( Owner . class ) . size ( ) ) ; <nl> + assertEquals ( 1 , allAsync . size ( ) ) ; <nl> + assertTrue ( allAsync . isLoaded ( ) ) ; <nl> + assertTrue ( allAsync . isValid ( ) ) ; <nl> + assertFalse ( allAsync . isEmpty ( ) ) ; <nl> + assertEquals ( 1 , allAsync . size ( ) ) ; <nl> + assertEquals ( " Akamaru " , allAsync . get ( 0 ) . getName ( ) ) ; <nl> + assertEquals ( " kiba " , allAsync . get ( 0 ) . getOwner ( ) . getName ( ) ) ; <nl> + signalCallbackFinished . countDown ( ) ; <nl> + break ; <nl> + } <nl> + default : <nl> + throw new IllegalStateException ( " invalid number of invocation " ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + <nl> + Looper . loop ( ) ; <nl> + <nl> + } catch ( Throwable e ) { <nl> + e . printStackTrace ( ) ; <nl> + threadAssertionError [ 0 ] = e ; <nl> + <nl> + } finally { <nl> + if ( signalCallbackFinished . getCount ( ) > 0 ) { <nl> + signalCallbackFinished . countDown ( ) ; <nl> + } <nl> + if ( realm . length > 0 & & realm [ 0 ] ! = null ) { <nl> + realm [ 0 ] . close ( ) ; <nl> + } <nl> + signalClosedRealm . countDown ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + <nl> + TestHelper . exitOrThrow ( executorService , signalCallbackFinished , signalClosedRealm , backgroundLooper , threadAssertionError ) ; <nl> + } <nl> + <nl> / / * * * Helper methods * * * <nl> <nl> / / This could be done from # setUp but then we can ' t control

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 index 0bc84aa . . 725fde8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 @ @ - 601 , 6 + 601 , 9 @ @ public class TypeBasedNotificationsTests { 
 looperThread1 . start ( ) ; 
 looperThread2 . start ( ) ; 
 looperThread3 . start ( ) ; 
 + final Handler looperHandler1 = new Handler ( looperThread1 . getLooper ( ) ) ; 
 + final Handler looperHandler2 = new Handler ( looperThread2 . getLooper ( ) ) ; 
 + final Handler looperHandler3 = new Handler ( looperThread3 . getLooper ( ) ) ; 
 final Realm realm = looperThread . realm ; 
 realm . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 @ @ - 615 , 19 + 618 , 47 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( ) { 
 switch ( typebasedCommitInvocations . incrementAndGet ( ) ) { 
 - case 1 : / / triggered by COMPLETED _ ASYNC _ REALM _ OBJECT from caling dog . load ( ) 
 + case 1 : / / triggered by COMPLETED _ ASYNC _ REALM _ OBJECT from calling dog . load ( ) 
 + assertTrue ( dog . isLoaded ( ) ) ; 
 + assertFalse ( dog . isValid ( ) ) ; 
 + 
 + looperHandler1 . post ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm realmLooperThread1 = Realm . getInstance ( realm . getConfiguration ( ) ) ; 
 + realmLooperThread1 . beginTransaction ( ) ; 
 + realmLooperThread1 . commitTransaction ( ) ; 
 + realmLooperThread1 . close ( ) ; 
 + looperThread1Done . countDown ( ) ; 
 + } 
 + } ) ; 
 + break ; 
 case 2 : / / triggered by the irrelevant commit ( not affecting Dog table ) from LooperThread1 
 assertTrue ( dog . isLoaded ( ) ) ; 
 assertFalse ( dog . isValid ( ) ) ; 
 + 
 + looperHandler2 . post ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm realmLooperThread2 = Realm . getInstance ( realm . getConfiguration ( ) ) ; 
 + / / trigger first callback invocation 
 + realmLooperThread2 . beginTransaction ( ) ; 
 + Dog dog = realmLooperThread2 . createObject ( Dog . class ) ; 
 + dog . setName ( " Akamaru " ) ; 
 + realmLooperThread2 . commitTransaction ( ) ; 
 + realmLooperThread2 . close ( ) ; 
 + looperThread2Done . countDown ( ) ; 
 + } 
 + } ) ; 
 break ; 
 
 - case 3 : / / triggered by relevant commmit from LooperThread2 
 + case 3 : / / triggered by relevant commit from LooperThread2 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 realm . handler . post ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 / / trigger second callback invocation 
 - new Handler ( looperThread3 . getLooper ( ) ) . post ( new Runnable ( ) { 
 + looperHandler3 . post ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 Realm realmLooperThread3 = Realm . getInstance ( realm . getConfiguration ( ) ) ; 
 @ @ - 666 , 41 + 697 , 13 @ @ public class TypeBasedNotificationsTests { 
 } 
 } ) ; 
 
 - new Handler ( looperThread1 . getLooper ( ) ) . post ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - Realm realmLooperThread1 = Realm . getInstance ( realm . getConfiguration ( ) ) ; 
 - realmLooperThread1 . beginTransaction ( ) ; 
 - realmLooperThread1 . commitTransaction ( ) ; 
 - realmLooperThread1 . close ( ) ; 
 - looperThread1Done . countDown ( ) ; 
 - } 
 - } ) ; 
 - 
 - new Handler ( looperThread2 . getLooper ( ) ) . post ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - TestHelper . awaitOrFail ( looperThread1Done ) ; 
 - Realm realmLooperThread2 = Realm . getInstance ( realm . getConfiguration ( ) ) ; 
 - / / trigger first callback invocation 
 - realmLooperThread2 . beginTransaction ( ) ; 
 - Dog dog = realmLooperThread2 . createObject ( Dog . class ) ; 
 - dog . setName ( " Akamaru " ) ; 
 - realmLooperThread2 . commitTransaction ( ) ; 
 - realmLooperThread2 . close ( ) ; 
 - looperThread2Done . countDown ( ) ; 
 - } 
 - } ) ; 
 } 
 
 / / UC 1 Async RealmObject 
 @ Test 
 @ RunTestInLooperThread 
 public void callback _ with _ relevant _ commit _ from _ different _ non _ looper _ realmobject _ async ( ) throws Throwable { 
 - final CountDownLatch asyncQueryComplete = new CountDownLatch ( 1 ) ; 
 - final CountDownLatch nonRelevantCommitComplete = new CountDownLatch ( 1 ) ; 
 - final CountDownLatch dogCreatedCompelte = new CountDownLatch ( 1 ) ; 
 - 
 + final CountDownLatch nonLooperThread3CloseLatch = new CountDownLatch ( 1 ) ; 
 final Realm realm = looperThread . realm ; 
 realm . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 @ @ - 753 , 6 + 756 , 7 @ @ public class TypeBasedNotificationsTests { 
 realmNonLooperThread3 . where ( Dog . class ) . findFirst ( ) . setAge ( 17 ) ; 
 realmNonLooperThread3 . commitTransaction ( ) ; 
 realmNonLooperThread3 . close ( ) ; 
 + nonLooperThread3CloseLatch . countDown ( ) ; 
 } 
 } . start ( ) ; 
 } 
 @ @ - 770 , 6 + 774 , 7 @ @ public class TypeBasedNotificationsTests { 
 public void run ( ) { 
 assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; 
 assertEquals ( 4 , typebasedCommitInvocations . get ( ) ) ; 
 + TestHelper . awaitOrFail ( nonLooperThread3CloseLatch ) ; 
 looperThread . testComplete ( ) ; 
 } 
 } ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 index 3afbce9 . . 9a044a3 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 @ @ - 2772 , 6 + 2772 , 98 @ @ public class RealmAsyncQueryTests extends InstrumentationTestCase { 
 } 
 } 
 
 + / / this test make sure that Async queries update when using link 
 + public void testQueryingLinkHandover ( ) throws Throwable { 
 + final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 + final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 + final AtomicInteger numberOfInvocations = new AtomicInteger ( 0 ) ; 
 + final Realm [ ] realm = new Realm [ 1 ] ; 
 + final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 + final Looper [ ] backgroundLooper = new Looper [ 1 ] ; 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + executorService . submit ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Looper . prepare ( ) ; 
 + backgroundLooper [ 0 ] = Looper . myLooper ( ) ; 
 + 
 + try { 
 + realm [ 0 ] = openRealmInstance ( " testQueryingLinkHandover " ) ; 
 + 
 + final RealmResults < Dog > allAsync = realm [ 0 ] . where ( Dog . class ) . equalTo ( " owner . name " , " kiba " ) . findAllAsync ( ) ; 
 + allAsync . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + switch ( numberOfInvocations . incrementAndGet ( ) ) { 
 + case 1 : { 
 + assertEquals ( 0 , allAsync . size ( ) ) ; 
 + assertTrue ( allAsync . isLoaded ( ) ) ; 
 + assertTrue ( allAsync . isValid ( ) ) ; 
 + assertTrue ( allAsync . isEmpty ( ) ) ; 
 + final CountDownLatch wait = new CountDownLatch ( 1 ) ; 
 + final RealmConfiguration configuration = realm [ 0 ] . getConfiguration ( ) ; 
 + new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm instance = Realm . getInstance ( configuration ) ; 
 + instance . beginTransaction ( ) ; 
 + Dog dog = instance . createObject ( Dog . class ) ; 
 + dog . setAge ( 10 ) ; 
 + dog . setName ( " Akamaru " ) ; 
 + Owner kiba = instance . createObject ( Owner . class ) ; 
 + kiba . setName ( " kiba " ) ; 
 + dog . setOwner ( kiba ) ; 
 + instance . commitTransaction ( ) ; 
 + wait . countDown ( ) ; 
 + } 
 + } . start ( ) ; 
 + try { 
 + wait . await ( ) ; 
 + } catch ( InterruptedException e ) { 
 + fail ( e . getMessage ( ) ) ; 
 + } 
 + break ; 
 + } 
 + case 2 : { 
 + assertEquals ( 1 , realm [ 0 ] . allObjects ( Dog . class ) . size ( ) ) ; 
 + assertEquals ( 1 , realm [ 0 ] . allObjects ( Owner . class ) . size ( ) ) ; 
 + assertEquals ( 1 , allAsync . size ( ) ) ; 
 + assertTrue ( allAsync . isLoaded ( ) ) ; 
 + assertTrue ( allAsync . isValid ( ) ) ; 
 + assertFalse ( allAsync . isEmpty ( ) ) ; 
 + assertEquals ( 1 , allAsync . size ( ) ) ; 
 + assertEquals ( " Akamaru " , allAsync . get ( 0 ) . getName ( ) ) ; 
 + assertEquals ( " kiba " , allAsync . get ( 0 ) . getOwner ( ) . getName ( ) ) ; 
 + signalCallbackFinished . countDown ( ) ; 
 + break ; 
 + } 
 + default : 
 + throw new IllegalStateException ( " invalid number of invocation " ) ; 
 + } 
 + } 
 + } ) ; 
 + 
 + Looper . loop ( ) ; 
 + 
 + } catch ( Throwable e ) { 
 + e . printStackTrace ( ) ; 
 + threadAssertionError [ 0 ] = e ; 
 + 
 + } finally { 
 + if ( signalCallbackFinished . getCount ( ) > 0 ) { 
 + signalCallbackFinished . countDown ( ) ; 
 + } 
 + if ( realm . length > 0 & & realm [ 0 ] ! = null ) { 
 + realm [ 0 ] . close ( ) ; 
 + } 
 + signalClosedRealm . countDown ( ) ; 
 + } 
 + } 
 + } ) ; 
 + 
 + TestHelper . exitOrThrow ( executorService , signalCallbackFinished , signalClosedRealm , backgroundLooper , threadAssertionError ) ; 
 + } 
 + 
 / / * * * Helper methods * * * 
 
 / / This could be done from # setUp but then we can ' t control
