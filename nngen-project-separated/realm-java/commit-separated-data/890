BLEU SCORE: 0.035802380724744266

TEST MSG: reimplement copy method with reflection
GENERATED MSG: Cyclic data structures no longer crash copyToRealm

TEST DIFF (one line): diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 82a6c75 . . 1081782 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 620 , 16 + 620 , 31 @ @ public class RealmProxyClassGenerator { <nl> className , / / Return type <nl> " copy " , / / Method name <nl> EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers <nl> - " Realm " , " realm " , className , " newObject " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , " cache " ) ; / / Argument type & argument name <nl> + " Realm " , " realm " , className , " from " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , " cache " ) ; / / Argument type & argument name <nl> <nl> if ( metadata . hasPrimaryKey ( ) ) { <nl> - writer . emitStatement ( " % sRealmProxy realmObject = ( % sRealmProxy ) realm . createObject ( % s . class , newObject . % s ( ) ) " , <nl> + writer . emitStatement ( " % sRealmProxy to = ( % sRealmProxy ) realm . createObject ( % s . class , from . % s ( ) ) " , <nl> className , className , className , metadata . getPrimaryKeyGetter ( ) ) ; <nl> } else { <nl> - writer . emitStatement ( " % sRealmProxy realmObject = ( % sRealmProxy ) realm . createObject ( % s . class ) " , <nl> + writer . emitStatement ( " % sRealmProxy to = ( % sRealmProxy ) realm . createObject ( % s . class ) " , <nl> className , className , className ) ; <nl> } <nl> - writer . emitStatement ( " cache . put ( newObject , ( RealmObjectProxy ) realmObject ) " ) ; <nl> + writer . emitStatement ( " cache . put ( from , ( RealmObjectProxy ) to ) " ) ; <nl> + writer . emitEmptyLine ( ) ; <nl> + <nl> + writer . emitStatement ( " final boolean isStandalone = ! ( from instanceof % sRealmProxy ) " , className ) ; <nl> + writer . emitStatement ( " Class < ? extends % s > clazz " , className ) ; <nl> + writer <nl> + . beginControlFlow ( " if ( isStandalone ) " ) <nl> + . emitStatement ( " clazz = from . getClass ( ) " ) <nl> + . nextControlFlow ( " else " ) <nl> + . emitStatement ( " clazz = null " ) <nl> + . endControlFlow ( ) ; <nl> + writer . emitStatement ( " Field field = null " ) ; <nl> + writer . emitEmptyLine ( ) ; <nl> + <nl> + writer . beginControlFlow ( " try " ) ; <nl> + <nl> for ( VariableElement field : metadata . getFields ( ) ) { <nl> String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> String fieldType = field . asType ( ) . toString ( ) ; <nl> @ @ - 637 , 50 + 652 , 84 @ @ public class RealmProxyClassGenerator { <nl> String getter = metadata . getGetter ( fieldName ) ; <nl> <nl> if ( Utils . isRealmObject ( field ) ) { <nl> + writer . emitEmptyLine ( ) ; <nl> + writer . beginControlFlow ( " " ) ; <nl> + <nl> + writer . emitStatement ( " % s % sObj " , fieldType , fieldName ) ; <nl> + writer <nl> + . beginControlFlow ( " if ( isStandalone ) " ) <nl> + . emitStatement ( " field = clazz . getDeclaredField ( \ " % s \ " ) " , fieldName ) <nl> + . emitStatement ( " field . setAccessible ( true ) " ) <nl> + . emitStatement ( " % sObj = ( % s ) field . get ( from ) " , fieldName , fieldType ) <nl> + . nextControlFlow ( " else " ) <nl> + . emitStatement ( " % sObj = from . % s ( ) " , fieldName , getter ) <nl> + . endControlFlow ( ) ; <nl> + <nl> writer <nl> - . emitEmptyLine ( ) <nl> - . emitStatement ( " % s % sObj = ( ( % sRealmProxy ) newObject ) . % s ( ) " , <nl> - fieldType , fieldName , className , getter ) <nl> . beginControlFlow ( " if ( % sObj ! = null ) " , fieldName ) <nl> . emitStatement ( " % s cache % s = ( % s ) cache . get ( % sObj ) " , fieldType , fieldName , fieldType , fieldName ) <nl> . beginControlFlow ( " if ( cache % s ! = null ) " , fieldName ) <nl> - . emitStatement ( " realmObject . % s ( cache % s ) " , setter , fieldName ) <nl> + . emitStatement ( " to . % s ( cache % s ) " , setter , fieldName ) <nl> . nextControlFlow ( " else " ) <nl> - . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % sObj , update , cache ) ) " , <nl> - metadata . getSetter ( fieldName ) , <nl> - Utils . getProxyClassSimpleName ( field ) , <nl> - fieldName ) <nl> + . emitStatement ( " to . % s ( % s . copyOrUpdate ( realm , % sObj , update , cache ) ) " , <nl> + metadata . getSetter ( fieldName ) , Utils . getProxyClassSimpleName ( field ) , fieldName ) <nl> . endControlFlow ( ) <nl> . nextControlFlow ( " else " ) <nl> / / No need to throw exception here if the field is not nullable . A exception will be thrown in setter . <nl> - . emitStatement ( " realmObject . % s ( null ) " , setter ) <nl> + . emitStatement ( " to . % s ( null ) " , setter ) <nl> . endControlFlow ( ) ; <nl> + <nl> + writer . endControlFlow ( ) ; <nl> } else if ( Utils . isRealmList ( field ) ) { <nl> + writer . emitEmptyLine ( ) ; <nl> + writer . beginControlFlow ( " " ) ; <nl> + <nl> + writer . emitStatement ( " RealmList < % s > % sList " , Utils . getGenericType ( field ) , fieldName ) ; <nl> + writer <nl> + . beginControlFlow ( " if ( isStandalone ) " ) <nl> + . emitStatement ( " field = clazz . getDeclaredField ( \ " % s \ " ) " , fieldName ) <nl> + . emitStatement ( " field . setAccessible ( true ) " ) <nl> + . emitStatement ( " % sList = ( RealmList < % s > ) field . get ( from ) " , <nl> + fieldName , Utils . getGenericType ( field ) ) <nl> + . nextControlFlow ( " else " ) <nl> + . emitStatement ( " % sList = from . % s ( ) " , fieldName , getter ) <nl> + . endControlFlow ( ) ; <nl> + <nl> writer <nl> - . emitEmptyLine ( ) <nl> - . emitStatement ( " RealmList < % s > % sList = ( ( % sRealmProxy ) newObject ) . % s ( ) " , Utils . getGenericType <nl> - ( field ) , fieldName , className , getter ) <nl> . beginControlFlow ( " if ( % sList ! = null ) " , fieldName ) <nl> - . emitStatement ( " RealmList < % s > % sRealmList = realmObject . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getter ) <nl> + . emitStatement ( " RealmList < % s > % sRealmList = to . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getter ) <nl> . beginControlFlow ( " for ( int i = 0 ; i < % sList . size ( ) ; i + + ) " , fieldName ) <nl> - . emitStatement ( " % s % sItem = % sList . get ( i ) " , Utils . getGenericType ( field ) , fieldName , fieldName ) <nl> - . emitStatement ( " % s cache % s = ( % s ) cache . get ( % sItem ) " , Utils . getGenericType ( field ) , fieldName , Utils . getGenericType ( field ) , fieldName ) <nl> - . beginControlFlow ( " if ( cache % s ! = null ) " , fieldName ) <nl> - . emitStatement ( " % sRealmList . add ( cache % s ) " , fieldName , fieldName ) <nl> - . nextControlFlow ( " else " ) <nl> - . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , update , cache ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) <nl> - . endControlFlow ( ) <nl> + . emitStatement ( " % s % sItem = % sList . get ( i ) " , Utils . getGenericType ( field ) , fieldName , fieldName ) <nl> + . emitStatement ( " % s cache % s = ( % s ) cache . get ( % sItem ) " , Utils . getGenericType ( field ) , fieldName , Utils . getGenericType ( field ) , fieldName ) <nl> + . beginControlFlow ( " if ( cache % s ! = null ) " , fieldName ) <nl> + . emitStatement ( " % sRealmList . add ( cache % s ) " , fieldName , fieldName ) <nl> + . nextControlFlow ( " else " ) <nl> + . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , update , cache ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) <nl> + . endControlFlow ( ) <nl> . endControlFlow ( ) <nl> - . endControlFlow ( ) <nl> - . emitEmptyLine ( ) ; <nl> + . endControlFlow ( ) ; <nl> <nl> + writer . endControlFlow ( ) ; <nl> } else { <nl> - writer . emitStatement ( " realmObject . % s ( ( ( % sRealmProxy ) newObject ) . % s ( ) ) " , metadata . getSetter ( fieldName ) <nl> - , className , getter ) ; <nl> + writer <nl> + . beginControlFlow ( " if ( isStandalone ) " ) <nl> + . emitStatement ( " field = clazz . getDeclaredField ( \ " % s \ " ) " , fieldName ) <nl> + . emitStatement ( " field . setAccessible ( true ) " ) <nl> + . emitStatement ( " to . % s ( ( % s ) field . get ( from ) ) " , metadata . getSetter ( fieldName ) , fieldType ) <nl> + . nextControlFlow ( " else " ) <nl> + . emitStatement ( " to . % s ( from . % s ( ) ) " , metadata . getSetter ( fieldName ) , getter ) <nl> + . endControlFlow ( ) ; <nl> } <nl> } <nl> <nl> - writer . emitStatement ( " return realmObject " ) ; <nl> + writer <nl> + . nextControlFlow ( " catch ( NoSuchFieldException e ) " ) <nl> + . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) <nl> + . nextControlFlow ( " catch ( IllegalAccessException e ) " ) <nl> + . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) <nl> + . endControlFlow ( ) ; <nl> + <nl> + writer . emitStatement ( " return to " ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index ec7c166 . . e41ce11 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 478 , 11 + 478 , 11 @ @ public class RealmProxyClassGenerator { <nl> className , / / Return type <nl> " copyOrUpdate " , / / Method name <nl> EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers <nl> - " Realm " , " realm " , className , " object " , " boolean " , " update " / / Argument type & argument name <nl> + " Realm " , " realm " , className , " object " , " boolean " , " update " , " Map < Object , RealmObject > " , " cache " / / Argument type & argument name <nl> ) ; <nl> <nl> if ( primaryKey = = null ) { <nl> - writer . emitStatement ( " return copy ( realm , object , false ) " ) ; <nl> + writer . emitStatement ( " return copy ( realm , object , false , cache ) " ) ; <nl> } else { <nl> writer <nl> . emitStatement ( " % s realmObject = null " , className ) <nl> @ @ - 504 , 6 + 504 , 7 @ @ public class RealmProxyClassGenerator { <nl> . emitStatement ( " realmObject = new % s ( ) " , Utils . getProxyClassName ( className ) ) <nl> . emitStatement ( " realmObject . realm = realm " ) <nl> . emitStatement ( " realmObject . row = table . getRow ( rowIndex ) " ) <nl> + . emitStatement ( " cache . put ( object , realmObject ) " ) <nl> . nextControlFlow ( " else " ) <nl> . emitStatement ( " canUpdate = false " ) <nl> . endControlFlow ( ) ; <nl> @ @ - 513 , 9 + 514 , 9 @ @ public class RealmProxyClassGenerator { <nl> writer <nl> . emitEmptyLine ( ) <nl> . beginControlFlow ( " if ( canUpdate ) " ) <nl> - . emitStatement ( " return update ( realm , realmObject , object ) " ) <nl> + . emitStatement ( " return update ( realm , realmObject , object , cache ) " ) <nl> . nextControlFlow ( " else " ) <nl> - . emitStatement ( " return copy ( realm , object , update ) " ) <nl> + . emitStatement ( " return copy ( realm , object , update , cache ) " ) <nl> . endControlFlow ( ) ; <nl> } <nl> <nl> @ @ - 528 , 20 + 529 , 26 @ @ public class RealmProxyClassGenerator { <nl> className , / / Return type <nl> " copy " , / / Method name <nl> EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers <nl> - " Realm " , " realm " , className , " newObject " , " boolean " , " update " ) ; / / Argument type & argument name <nl> + " Realm " , " realm " , className , " newObject " , " boolean " , " update " , " Map < Object , RealmObject > " , " cache " ) ; / / Argument type & argument name <nl> <nl> writer . emitStatement ( " % s realmObject = realm . createObject ( % s . class ) " , className , className ) ; <nl> + writer . emitStatement ( " cache . put ( newObject , realmObject ) " ) ; <nl> for ( VariableElement field : fields ) { <nl> String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> + String fieldType = field . asType ( ) . toString ( ) ; <nl> if ( typeUtils . isAssignable ( field . asType ( ) , realmObject ) ) { <nl> writer <nl> . emitEmptyLine ( ) <nl> - . emitStatement ( " % s % s = newObject . % s ( ) " , Utils . getFieldTypeSimpleName ( field ) , fieldName , getters . get ( fieldName ) ) <nl> + . emitStatement ( " % s % s = newObject . % s ( ) " , fieldType , fieldName , getters . get ( fieldName ) ) <nl> . beginControlFlow ( " if ( % s ! = null ) " , fieldName ) <nl> - . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , update ) ) " , <nl> - setters . get ( fieldName ) , <nl> - Utils . getProxyClassSimpleName ( field ) , <nl> - fieldName ) <nl> + . beginControlFlow ( " if ( cache . containsKey ( % s ) ) " , fieldName ) <nl> + . emitStatement ( " realmObject . % s ( ( % s ) cache . get ( % s ) ) " , setters . get ( fieldName ) , fieldType , fieldName ) <nl> + . nextControlFlow ( " else " ) <nl> + . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , update , cache ) ) " , <nl> + setters . get ( fieldName ) , <nl> + Utils . getProxyClassSimpleName ( field ) , <nl> + fieldName ) <nl> + . endControlFlow ( ) <nl> . endControlFlow ( ) ; <nl> } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> writer <nl> @ @ - 550 , 13 + 557 , 17 @ @ public class RealmProxyClassGenerator { <nl> . beginControlFlow ( " if ( % sList ! = null ) " , fieldName ) <nl> . emitStatement ( " RealmList < % s > % sRealmList = realmObject . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getters . get ( fieldName ) ) <nl> . beginControlFlow ( " for ( int i = 0 ; i < % sList . size ( ) ; i + + ) " , fieldName ) <nl> - . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , update ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) <nl> + . emitStatement ( " % s % sItem = % sList . get ( i ) " , Utils . getGenericType ( field ) , fieldName , fieldName ) <nl> + . beginControlFlow ( " if ( cache . containsKey ( % sItem ) ) " , fieldName ) <nl> + . emitStatement ( " % sRealmList . add ( ( % s ) cache . get ( % sItem ) ) " , fieldName , Utils . getGenericType ( field ) , fieldName ) <nl> + . nextControlFlow ( " else " ) <nl> + . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , update , cache ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) <nl> + . endControlFlow ( ) <nl> . endControlFlow ( ) <nl> . endControlFlow ( ) <nl> . emitEmptyLine ( ) ; <nl> <nl> } else { <nl> - String fieldType = field . asType ( ) . toString ( ) ; <nl> if ( NULLABLE _ JAVA _ TYPES . containsKey ( fieldType ) ) { <nl> writer . emitStatement ( " realmObject . % s ( newObject . % s ( ) ! = null ? newObject . % s ( ) : % s ) " , <nl> setters . get ( fieldName ) , <nl> @ @ - 580 , 7 + 591 , 7 @ @ public class RealmProxyClassGenerator { <nl> className , / / Return type <nl> " update " , / / Method name <nl> EnumSet . of ( Modifier . STATIC ) , / / Modifiers <nl> - " Realm " , " realm " , className , " realmObject " , className , " newObject " ) ; / / Argument type & argument name <nl> + " Realm " , " realm " , className , " realmObject " , className , " newObject " , " Map < Object , RealmObject > " , " cache " ) ; / / Argument type & argument name <nl> <nl> for ( VariableElement field : fields ) { <nl> String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> @ @ - 588 , 12 + 599 , 16 @ @ public class RealmProxyClassGenerator { <nl> writer <nl> . emitStatement ( " % s % s = newObject . % s ( ) " , Utils . getFieldTypeSimpleName ( field ) , fieldName , getters . get ( fieldName ) ) <nl> . beginControlFlow ( " if ( % s ! = null ) " , fieldName ) <nl> - . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , realm . getTable ( % s . class ) . hasPrimaryKey ( ) ) ) " , <nl> - setters . get ( fieldName ) , <nl> - Utils . getProxyClassSimpleName ( field ) , <nl> - fieldName , <nl> - Utils . getFieldTypeSimpleName ( field ) <nl> - ) <nl> + . beginControlFlow ( " if ( cache . containsKey ( % s ) ) " , fieldName ) <nl> + . emitStatement ( " realmObject . % s ( ( % s ) cache . get ( % s ) ) " , setters . get ( fieldName ) , Utils . getFieldTypeSimpleName ( field ) , fieldName ) <nl> + . nextControlFlow ( " else " ) <nl> + . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , realm . getTable ( % s . class ) . hasPrimaryKey ( ) , cache ) ) " , <nl> + setters . get ( fieldName ) , <nl> + Utils . getProxyClassSimpleName ( field ) , <nl> + fieldName , <nl> + Utils . getFieldTypeSimpleName ( field ) <nl> + ) <nl> + . endControlFlow ( ) <nl> . nextControlFlow ( " else " ) <nl> . emitStatement ( " realmObject . % s ( null ) " , setters . get ( fieldName ) ) <nl> . endControlFlow ( ) ; <nl> @ @ - 604 , 7 + 619 , 12 @ @ public class RealmProxyClassGenerator { <nl> . emitStatement ( " % sRealmList . clear ( ) " , fieldName ) <nl> . beginControlFlow ( " if ( % sList ! = null ) " , fieldName ) <nl> . beginControlFlow ( " for ( int i = 0 ; i < % sList . size ( ) ; i + + ) " , fieldName ) <nl> - . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , true ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) <nl> + . emitStatement ( " % s % sItem = % sList . get ( i ) " , Utils . getGenericType ( field ) , fieldName , fieldName ) <nl> + . beginControlFlow ( " if ( cache . containsKey ( % sItem ) ) " , fieldName ) <nl> + . emitStatement ( " % sRealmList . add ( ( % s ) cache . get ( % sItem ) ) " , fieldName , Utils . getGenericType ( field ) , fieldName ) <nl> + . nextControlFlow ( " else " ) <nl> + . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , true , cache ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) <nl> + . endControlFlow ( ) <nl> . endControlFlow ( ) <nl> . endControlFlow ( ) ; <nl> <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index f3e2368 . . 2193f0f 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 1018 , 6 + 1018 , 22 @ @ public class RealmTest extends AndroidTestCase { <nl> assertEquals ( 2 , testRealm . allObjects ( CyclicType . class ) . size ( ) ) ; <nl> } <nl> <nl> + public void testCopyToRealmCyclicList ( ) { <nl> + CyclicType oneCyclicType = new CyclicType ( ) ; <nl> + oneCyclicType . setName ( " One " ) ; <nl> + CyclicType anotherCyclicType = new CyclicType ( ) ; <nl> + anotherCyclicType . setName ( " Two " ) ; <nl> + oneCyclicType . setObjects ( new RealmList ( anotherCyclicType ) ) ; <nl> + anotherCyclicType . setObjects ( new RealmList ( oneCyclicType ) ) ; <nl> + <nl> + testRealm . beginTransaction ( ) ; <nl> + CyclicType realmObject = testRealm . copyToRealm ( oneCyclicType ) ; <nl> + testRealm . commitTransaction ( ) ; <nl> + <nl> + assertEquals ( " One " , realmObject . getName ( ) ) ; <nl> + assertEquals ( 2 , testRealm . allObjects ( CyclicType . class ) . size ( ) ) ; <nl> + } <nl> + <nl> / / Check that if a field has a null value it gets converted to the default value for that type <nl> public void testCopyToRealmDefaultValues ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 22baba9 . . 17dcacb 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 1605 , 14 + 1605 , 14 @ @ public final class Realm implements Closeable { <nl> Method method = insertOrUpdateMethods . get ( realmClass ) ; <nl> if ( method = = null ) { <nl> try { <nl> - method = proxyClass . getMethod ( " copyOrUpdate " , new Class [ ] { Realm . class , realmClass , boolean . class } ) ; <nl> + method = proxyClass . getMethod ( " copyOrUpdate " , new Class [ ] { Realm . class , realmClass , boolean . class , Map . class } ) ; <nl> } catch ( NoSuchMethodException e ) { <nl> throw new RealmException ( " Could not find the copyOrUpdate ( ) method in generated proxy class for " + proxyClass . getName ( ) + " : " + APT _ NOT _ EXECUTED _ MESSAGE , e ) ; <nl> } <nl> insertOrUpdateMethods . put ( proxyClass , method ) ; <nl> } <nl> try { <nl> - Object result = method . invoke ( null , this , object , update ) ; <nl> + Object result = method . invoke ( null , this , object , update , new HashMap < Integer , RealmObject > ( ) ) ; <nl> return ( E ) result ; <nl> } catch ( IllegalAccessException e ) { <nl> throw new RealmException ( " Could not execute the copyToRealm method : " + APT _ NOT _ EXECUTED _ MESSAGE , e ) ;

TEST DIFF:
diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 82a6c75 . . 1081782 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 620 , 16 + 620 , 31 @ @ public class RealmProxyClassGenerator { 
 className , / / Return type 
 " copy " , / / Method name 
 EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers 
 - " Realm " , " realm " , className , " newObject " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , " cache " ) ; / / Argument type & argument name 
 + " Realm " , " realm " , className , " from " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , " cache " ) ; / / Argument type & argument name 
 
 if ( metadata . hasPrimaryKey ( ) ) { 
 - writer . emitStatement ( " % sRealmProxy realmObject = ( % sRealmProxy ) realm . createObject ( % s . class , newObject . % s ( ) ) " , 
 + writer . emitStatement ( " % sRealmProxy to = ( % sRealmProxy ) realm . createObject ( % s . class , from . % s ( ) ) " , 
 className , className , className , metadata . getPrimaryKeyGetter ( ) ) ; 
 } else { 
 - writer . emitStatement ( " % sRealmProxy realmObject = ( % sRealmProxy ) realm . createObject ( % s . class ) " , 
 + writer . emitStatement ( " % sRealmProxy to = ( % sRealmProxy ) realm . createObject ( % s . class ) " , 
 className , className , className ) ; 
 } 
 - writer . emitStatement ( " cache . put ( newObject , ( RealmObjectProxy ) realmObject ) " ) ; 
 + writer . emitStatement ( " cache . put ( from , ( RealmObjectProxy ) to ) " ) ; 
 + writer . emitEmptyLine ( ) ; 
 + 
 + writer . emitStatement ( " final boolean isStandalone = ! ( from instanceof % sRealmProxy ) " , className ) ; 
 + writer . emitStatement ( " Class < ? extends % s > clazz " , className ) ; 
 + writer 
 + . beginControlFlow ( " if ( isStandalone ) " ) 
 + . emitStatement ( " clazz = from . getClass ( ) " ) 
 + . nextControlFlow ( " else " ) 
 + . emitStatement ( " clazz = null " ) 
 + . endControlFlow ( ) ; 
 + writer . emitStatement ( " Field field = null " ) ; 
 + writer . emitEmptyLine ( ) ; 
 + 
 + writer . beginControlFlow ( " try " ) ; 
 + 
 for ( VariableElement field : metadata . getFields ( ) ) { 
 String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 String fieldType = field . asType ( ) . toString ( ) ; 
 @ @ - 637 , 50 + 652 , 84 @ @ public class RealmProxyClassGenerator { 
 String getter = metadata . getGetter ( fieldName ) ; 
 
 if ( Utils . isRealmObject ( field ) ) { 
 + writer . emitEmptyLine ( ) ; 
 + writer . beginControlFlow ( " " ) ; 
 + 
 + writer . emitStatement ( " % s % sObj " , fieldType , fieldName ) ; 
 + writer 
 + . beginControlFlow ( " if ( isStandalone ) " ) 
 + . emitStatement ( " field = clazz . getDeclaredField ( \ " % s \ " ) " , fieldName ) 
 + . emitStatement ( " field . setAccessible ( true ) " ) 
 + . emitStatement ( " % sObj = ( % s ) field . get ( from ) " , fieldName , fieldType ) 
 + . nextControlFlow ( " else " ) 
 + . emitStatement ( " % sObj = from . % s ( ) " , fieldName , getter ) 
 + . endControlFlow ( ) ; 
 + 
 writer 
 - . emitEmptyLine ( ) 
 - . emitStatement ( " % s % sObj = ( ( % sRealmProxy ) newObject ) . % s ( ) " , 
 - fieldType , fieldName , className , getter ) 
 . beginControlFlow ( " if ( % sObj ! = null ) " , fieldName ) 
 . emitStatement ( " % s cache % s = ( % s ) cache . get ( % sObj ) " , fieldType , fieldName , fieldType , fieldName ) 
 . beginControlFlow ( " if ( cache % s ! = null ) " , fieldName ) 
 - . emitStatement ( " realmObject . % s ( cache % s ) " , setter , fieldName ) 
 + . emitStatement ( " to . % s ( cache % s ) " , setter , fieldName ) 
 . nextControlFlow ( " else " ) 
 - . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % sObj , update , cache ) ) " , 
 - metadata . getSetter ( fieldName ) , 
 - Utils . getProxyClassSimpleName ( field ) , 
 - fieldName ) 
 + . emitStatement ( " to . % s ( % s . copyOrUpdate ( realm , % sObj , update , cache ) ) " , 
 + metadata . getSetter ( fieldName ) , Utils . getProxyClassSimpleName ( field ) , fieldName ) 
 . endControlFlow ( ) 
 . nextControlFlow ( " else " ) 
 / / No need to throw exception here if the field is not nullable . A exception will be thrown in setter . 
 - . emitStatement ( " realmObject . % s ( null ) " , setter ) 
 + . emitStatement ( " to . % s ( null ) " , setter ) 
 . endControlFlow ( ) ; 
 + 
 + writer . endControlFlow ( ) ; 
 } else if ( Utils . isRealmList ( field ) ) { 
 + writer . emitEmptyLine ( ) ; 
 + writer . beginControlFlow ( " " ) ; 
 + 
 + writer . emitStatement ( " RealmList < % s > % sList " , Utils . getGenericType ( field ) , fieldName ) ; 
 + writer 
 + . beginControlFlow ( " if ( isStandalone ) " ) 
 + . emitStatement ( " field = clazz . getDeclaredField ( \ " % s \ " ) " , fieldName ) 
 + . emitStatement ( " field . setAccessible ( true ) " ) 
 + . emitStatement ( " % sList = ( RealmList < % s > ) field . get ( from ) " , 
 + fieldName , Utils . getGenericType ( field ) ) 
 + . nextControlFlow ( " else " ) 
 + . emitStatement ( " % sList = from . % s ( ) " , fieldName , getter ) 
 + . endControlFlow ( ) ; 
 + 
 writer 
 - . emitEmptyLine ( ) 
 - . emitStatement ( " RealmList < % s > % sList = ( ( % sRealmProxy ) newObject ) . % s ( ) " , Utils . getGenericType 
 - ( field ) , fieldName , className , getter ) 
 . beginControlFlow ( " if ( % sList ! = null ) " , fieldName ) 
 - . emitStatement ( " RealmList < % s > % sRealmList = realmObject . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getter ) 
 + . emitStatement ( " RealmList < % s > % sRealmList = to . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getter ) 
 . beginControlFlow ( " for ( int i = 0 ; i < % sList . size ( ) ; i + + ) " , fieldName ) 
 - . emitStatement ( " % s % sItem = % sList . get ( i ) " , Utils . getGenericType ( field ) , fieldName , fieldName ) 
 - . emitStatement ( " % s cache % s = ( % s ) cache . get ( % sItem ) " , Utils . getGenericType ( field ) , fieldName , Utils . getGenericType ( field ) , fieldName ) 
 - . beginControlFlow ( " if ( cache % s ! = null ) " , fieldName ) 
 - . emitStatement ( " % sRealmList . add ( cache % s ) " , fieldName , fieldName ) 
 - . nextControlFlow ( " else " ) 
 - . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , update , cache ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) 
 - . endControlFlow ( ) 
 + . emitStatement ( " % s % sItem = % sList . get ( i ) " , Utils . getGenericType ( field ) , fieldName , fieldName ) 
 + . emitStatement ( " % s cache % s = ( % s ) cache . get ( % sItem ) " , Utils . getGenericType ( field ) , fieldName , Utils . getGenericType ( field ) , fieldName ) 
 + . beginControlFlow ( " if ( cache % s ! = null ) " , fieldName ) 
 + . emitStatement ( " % sRealmList . add ( cache % s ) " , fieldName , fieldName ) 
 + . nextControlFlow ( " else " ) 
 + . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , update , cache ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) 
 + . endControlFlow ( ) 
 . endControlFlow ( ) 
 - . endControlFlow ( ) 
 - . emitEmptyLine ( ) ; 
 + . endControlFlow ( ) ; 
 
 + writer . endControlFlow ( ) ; 
 } else { 
 - writer . emitStatement ( " realmObject . % s ( ( ( % sRealmProxy ) newObject ) . % s ( ) ) " , metadata . getSetter ( fieldName ) 
 - , className , getter ) ; 
 + writer 
 + . beginControlFlow ( " if ( isStandalone ) " ) 
 + . emitStatement ( " field = clazz . getDeclaredField ( \ " % s \ " ) " , fieldName ) 
 + . emitStatement ( " field . setAccessible ( true ) " ) 
 + . emitStatement ( " to . % s ( ( % s ) field . get ( from ) ) " , metadata . getSetter ( fieldName ) , fieldType ) 
 + . nextControlFlow ( " else " ) 
 + . emitStatement ( " to . % s ( from . % s ( ) ) " , metadata . getSetter ( fieldName ) , getter ) 
 + . endControlFlow ( ) ; 
 } 
 } 
 
 - writer . emitStatement ( " return realmObject " ) ; 
 + writer 
 + . nextControlFlow ( " catch ( NoSuchFieldException e ) " ) 
 + . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) 
 + . nextControlFlow ( " catch ( IllegalAccessException e ) " ) 
 + . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) 
 + . endControlFlow ( ) ; 
 + 
 + writer . emitStatement ( " return to " ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 }

NEAREST DIFF:
diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index ec7c166 . . e41ce11 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 478 , 11 + 478 , 11 @ @ public class RealmProxyClassGenerator { 
 className , / / Return type 
 " copyOrUpdate " , / / Method name 
 EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers 
 - " Realm " , " realm " , className , " object " , " boolean " , " update " / / Argument type & argument name 
 + " Realm " , " realm " , className , " object " , " boolean " , " update " , " Map < Object , RealmObject > " , " cache " / / Argument type & argument name 
 ) ; 
 
 if ( primaryKey = = null ) { 
 - writer . emitStatement ( " return copy ( realm , object , false ) " ) ; 
 + writer . emitStatement ( " return copy ( realm , object , false , cache ) " ) ; 
 } else { 
 writer 
 . emitStatement ( " % s realmObject = null " , className ) 
 @ @ - 504 , 6 + 504 , 7 @ @ public class RealmProxyClassGenerator { 
 . emitStatement ( " realmObject = new % s ( ) " , Utils . getProxyClassName ( className ) ) 
 . emitStatement ( " realmObject . realm = realm " ) 
 . emitStatement ( " realmObject . row = table . getRow ( rowIndex ) " ) 
 + . emitStatement ( " cache . put ( object , realmObject ) " ) 
 . nextControlFlow ( " else " ) 
 . emitStatement ( " canUpdate = false " ) 
 . endControlFlow ( ) ; 
 @ @ - 513 , 9 + 514 , 9 @ @ public class RealmProxyClassGenerator { 
 writer 
 . emitEmptyLine ( ) 
 . beginControlFlow ( " if ( canUpdate ) " ) 
 - . emitStatement ( " return update ( realm , realmObject , object ) " ) 
 + . emitStatement ( " return update ( realm , realmObject , object , cache ) " ) 
 . nextControlFlow ( " else " ) 
 - . emitStatement ( " return copy ( realm , object , update ) " ) 
 + . emitStatement ( " return copy ( realm , object , update , cache ) " ) 
 . endControlFlow ( ) ; 
 } 
 
 @ @ - 528 , 20 + 529 , 26 @ @ public class RealmProxyClassGenerator { 
 className , / / Return type 
 " copy " , / / Method name 
 EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers 
 - " Realm " , " realm " , className , " newObject " , " boolean " , " update " ) ; / / Argument type & argument name 
 + " Realm " , " realm " , className , " newObject " , " boolean " , " update " , " Map < Object , RealmObject > " , " cache " ) ; / / Argument type & argument name 
 
 writer . emitStatement ( " % s realmObject = realm . createObject ( % s . class ) " , className , className ) ; 
 + writer . emitStatement ( " cache . put ( newObject , realmObject ) " ) ; 
 for ( VariableElement field : fields ) { 
 String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 + String fieldType = field . asType ( ) . toString ( ) ; 
 if ( typeUtils . isAssignable ( field . asType ( ) , realmObject ) ) { 
 writer 
 . emitEmptyLine ( ) 
 - . emitStatement ( " % s % s = newObject . % s ( ) " , Utils . getFieldTypeSimpleName ( field ) , fieldName , getters . get ( fieldName ) ) 
 + . emitStatement ( " % s % s = newObject . % s ( ) " , fieldType , fieldName , getters . get ( fieldName ) ) 
 . beginControlFlow ( " if ( % s ! = null ) " , fieldName ) 
 - . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , update ) ) " , 
 - setters . get ( fieldName ) , 
 - Utils . getProxyClassSimpleName ( field ) , 
 - fieldName ) 
 + . beginControlFlow ( " if ( cache . containsKey ( % s ) ) " , fieldName ) 
 + . emitStatement ( " realmObject . % s ( ( % s ) cache . get ( % s ) ) " , setters . get ( fieldName ) , fieldType , fieldName ) 
 + . nextControlFlow ( " else " ) 
 + . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , update , cache ) ) " , 
 + setters . get ( fieldName ) , 
 + Utils . getProxyClassSimpleName ( field ) , 
 + fieldName ) 
 + . endControlFlow ( ) 
 . endControlFlow ( ) ; 
 } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 writer 
 @ @ - 550 , 13 + 557 , 17 @ @ public class RealmProxyClassGenerator { 
 . beginControlFlow ( " if ( % sList ! = null ) " , fieldName ) 
 . emitStatement ( " RealmList < % s > % sRealmList = realmObject . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getters . get ( fieldName ) ) 
 . beginControlFlow ( " for ( int i = 0 ; i < % sList . size ( ) ; i + + ) " , fieldName ) 
 - . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , update ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) 
 + . emitStatement ( " % s % sItem = % sList . get ( i ) " , Utils . getGenericType ( field ) , fieldName , fieldName ) 
 + . beginControlFlow ( " if ( cache . containsKey ( % sItem ) ) " , fieldName ) 
 + . emitStatement ( " % sRealmList . add ( ( % s ) cache . get ( % sItem ) ) " , fieldName , Utils . getGenericType ( field ) , fieldName ) 
 + . nextControlFlow ( " else " ) 
 + . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , update , cache ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) 
 + . endControlFlow ( ) 
 . endControlFlow ( ) 
 . endControlFlow ( ) 
 . emitEmptyLine ( ) ; 
 
 } else { 
 - String fieldType = field . asType ( ) . toString ( ) ; 
 if ( NULLABLE _ JAVA _ TYPES . containsKey ( fieldType ) ) { 
 writer . emitStatement ( " realmObject . % s ( newObject . % s ( ) ! = null ? newObject . % s ( ) : % s ) " , 
 setters . get ( fieldName ) , 
 @ @ - 580 , 7 + 591 , 7 @ @ public class RealmProxyClassGenerator { 
 className , / / Return type 
 " update " , / / Method name 
 EnumSet . of ( Modifier . STATIC ) , / / Modifiers 
 - " Realm " , " realm " , className , " realmObject " , className , " newObject " ) ; / / Argument type & argument name 
 + " Realm " , " realm " , className , " realmObject " , className , " newObject " , " Map < Object , RealmObject > " , " cache " ) ; / / Argument type & argument name 
 
 for ( VariableElement field : fields ) { 
 String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 @ @ - 588 , 12 + 599 , 16 @ @ public class RealmProxyClassGenerator { 
 writer 
 . emitStatement ( " % s % s = newObject . % s ( ) " , Utils . getFieldTypeSimpleName ( field ) , fieldName , getters . get ( fieldName ) ) 
 . beginControlFlow ( " if ( % s ! = null ) " , fieldName ) 
 - . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , realm . getTable ( % s . class ) . hasPrimaryKey ( ) ) ) " , 
 - setters . get ( fieldName ) , 
 - Utils . getProxyClassSimpleName ( field ) , 
 - fieldName , 
 - Utils . getFieldTypeSimpleName ( field ) 
 - ) 
 + . beginControlFlow ( " if ( cache . containsKey ( % s ) ) " , fieldName ) 
 + . emitStatement ( " realmObject . % s ( ( % s ) cache . get ( % s ) ) " , setters . get ( fieldName ) , Utils . getFieldTypeSimpleName ( field ) , fieldName ) 
 + . nextControlFlow ( " else " ) 
 + . emitStatement ( " realmObject . % s ( % s . copyOrUpdate ( realm , % s , realm . getTable ( % s . class ) . hasPrimaryKey ( ) , cache ) ) " , 
 + setters . get ( fieldName ) , 
 + Utils . getProxyClassSimpleName ( field ) , 
 + fieldName , 
 + Utils . getFieldTypeSimpleName ( field ) 
 + ) 
 + . endControlFlow ( ) 
 . nextControlFlow ( " else " ) 
 . emitStatement ( " realmObject . % s ( null ) " , setters . get ( fieldName ) ) 
 . endControlFlow ( ) ; 
 @ @ - 604 , 7 + 619 , 12 @ @ public class RealmProxyClassGenerator { 
 . emitStatement ( " % sRealmList . clear ( ) " , fieldName ) 
 . beginControlFlow ( " if ( % sList ! = null ) " , fieldName ) 
 . beginControlFlow ( " for ( int i = 0 ; i < % sList . size ( ) ; i + + ) " , fieldName ) 
 - . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , true ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) 
 + . emitStatement ( " % s % sItem = % sList . get ( i ) " , Utils . getGenericType ( field ) , fieldName , fieldName ) 
 + . beginControlFlow ( " if ( cache . containsKey ( % sItem ) ) " , fieldName ) 
 + . emitStatement ( " % sRealmList . add ( ( % s ) cache . get ( % sItem ) ) " , fieldName , Utils . getGenericType ( field ) , fieldName ) 
 + . nextControlFlow ( " else " ) 
 + . emitStatement ( " % sRealmList . add ( % s . copyOrUpdate ( realm , % sList . get ( i ) , true , cache ) ) " , fieldName , Utils . getProxyClassSimpleName ( field ) , fieldName ) 
 + . endControlFlow ( ) 
 . endControlFlow ( ) 
 . endControlFlow ( ) ; 
 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index f3e2368 . . 2193f0f 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 1018 , 6 + 1018 , 22 @ @ public class RealmTest extends AndroidTestCase { 
 assertEquals ( 2 , testRealm . allObjects ( CyclicType . class ) . size ( ) ) ; 
 } 
 
 + public void testCopyToRealmCyclicList ( ) { 
 + CyclicType oneCyclicType = new CyclicType ( ) ; 
 + oneCyclicType . setName ( " One " ) ; 
 + CyclicType anotherCyclicType = new CyclicType ( ) ; 
 + anotherCyclicType . setName ( " Two " ) ; 
 + oneCyclicType . setObjects ( new RealmList ( anotherCyclicType ) ) ; 
 + anotherCyclicType . setObjects ( new RealmList ( oneCyclicType ) ) ; 
 + 
 + testRealm . beginTransaction ( ) ; 
 + CyclicType realmObject = testRealm . copyToRealm ( oneCyclicType ) ; 
 + testRealm . commitTransaction ( ) ; 
 + 
 + assertEquals ( " One " , realmObject . getName ( ) ) ; 
 + assertEquals ( 2 , testRealm . allObjects ( CyclicType . class ) . size ( ) ) ; 
 + } 
 + 
 / / Check that if a field has a null value it gets converted to the default value for that type 
 public void testCopyToRealmDefaultValues ( ) { 
 testRealm . beginTransaction ( ) ; 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 22baba9 . . 17dcacb 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 1605 , 14 + 1605 , 14 @ @ public final class Realm implements Closeable { 
 Method method = insertOrUpdateMethods . get ( realmClass ) ; 
 if ( method = = null ) { 
 try { 
 - method = proxyClass . getMethod ( " copyOrUpdate " , new Class [ ] { Realm . class , realmClass , boolean . class } ) ; 
 + method = proxyClass . getMethod ( " copyOrUpdate " , new Class [ ] { Realm . class , realmClass , boolean . class , Map . class } ) ; 
 } catch ( NoSuchMethodException e ) { 
 throw new RealmException ( " Could not find the copyOrUpdate ( ) method in generated proxy class for " + proxyClass . getName ( ) + " : " + APT _ NOT _ EXECUTED _ MESSAGE , e ) ; 
 } 
 insertOrUpdateMethods . put ( proxyClass , method ) ; 
 } 
 try { 
 - Object result = method . invoke ( null , this , object , update ) ; 
 + Object result = method . invoke ( null , this , object , update , new HashMap < Integer , RealmObject > ( ) ) ; 
 return ( E ) result ; 
 } catch ( IllegalAccessException e ) { 
 throw new RealmException ( " Could not execute the copyToRealm method : " + APT _ NOT _ EXECUTED _ MESSAGE , e ) ;
