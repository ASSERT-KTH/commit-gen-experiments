BLEU SCORE: 0.16186478197091597

TEST MSG: Update object store
GENERATED MSG: Call SyncManager . notifyErrorHandler

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> index 04a18ef . . 39c456f 100644 <nl> - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> @ @ - 158 , 7 + 158 , 7 @ @ file ( GLOB objectstore _ SRC <nl> if ( build _ SYNC ) <nl> file ( GLOB objectstore _ sync _ SRC <nl> " object - store / src / sync _ manager . cpp " <nl> - " object - store / src / impl / sync _ session . cpp " ) <nl> + " object - store / src / sync _ session . cpp " ) <nl> endif ( ) <nl> <nl> add _ library ( realm - jni SHARED $ { jni _ SRC } $ { objectstore _ SRC } $ { objectstore _ sync _ SRC } ) <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> index 9c00c09 . . 30fca15 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> @ @ - 1 , 3 + 1 , 4 @ @ <nl> + # include < object - store / src / sync _ manager . hpp > <nl> # include " io _ realm _ internal _ SharedRealm . h " <nl> <nl> # include " object _ store . hpp " <nl> @ @ - 45 , 9 + 46 , 7 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeCreateConfig ( JNIEnv * env , jclass , jstri <nl> if ( sync _ server _ url ) { <nl> JStringAccessor url ( env , sync _ server _ url ) ; <nl> JStringAccessor token ( env , sync _ user _ token ) ; <nl> - config - > sync _ config = std : : make _ shared < SyncConfig > ( ) ; <nl> - config - > sync _ config - > user _ tag = token ; <nl> - config - > sync _ config - > realm _ url = url ; <nl> + config - > sync _ config = std : : make _ shared < SyncConfig > ( token , url , nullptr , SyncSessionStopPolicy : : Immediately ) ; <nl> / / FIXME : Sync session is handled by java now . Remove this when adapt to OS sync implementation . <nl> config - > sync _ config - > create _ session = false ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store <nl> index b297230 . . a0ab785 160000 <nl> - - - a / realm / realm - library / src / main / cpp / object - store <nl> + + + b / realm / realm - library / src / main / cpp / object - store <nl> @ @ - 1 + 1 @ @ <nl> - Subproject commit b297230bde4370301948055014453323898198fe <nl> + Subproject commit a0ab785896b3e362e9703c798b8db729a49c9fda
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> index c397fea . . f513c03 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> @ @ - 73 , 13 + 73 , 28 @ @ struct AndroidLoggerFactory : public realm : : SyncLoggerFactory { <nl> } s _ logger _ factory ; <nl> <nl> / / TODO : Move to a better place & not needed after moving to OS <nl> - AndroidLogger & AndroidLogger : : shared ( ) noexcept { <nl> + AndroidLogger & AndroidLogger : : shared ( ) noexcept <nl> + { <nl> static AndroidLogger logger ; <nl> return logger ; <nl> } <nl> <nl> + static jclass sync _ manager = nullptr ; <nl> + static jmethodID sync _ manager _ notify _ error _ handler = nullptr ; <nl> + <nl> + static void error _ handler ( int error _ code , std : : string message ) <nl> + { <nl> + JNIEnv * env ; <nl> + if ( g _ vm - > GetEnv ( ( void * * ) & env , JNI _ VERSION _ 1 _ 6 ) ! = JNI _ OK ) { <nl> + throw std : : runtime _ error ( " JVM is not attached to this thread . Called in error _ handler . " ) ; <nl> + } <nl> + <nl> + env - > CallStaticVoidMethod ( sync _ manager , <nl> + sync _ manager _ notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; <nl> + } <nl> + <nl> JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient <nl> - ( JNIEnv * env , jclass ) <nl> + ( JNIEnv * env , jclass sync _ manager _ class ) <nl> { <nl> TR _ ENTER ( env ) <nl> if ( sync _ client ) return ; <nl> @ @ - 90 , 13 + 105 , 19 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient <nl> sync : : Client : : Config config ; <nl> config . logger = & AndroidLogger : : shared ( ) ; <nl> sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws <nl> - / / FIXME setup error handler for client <nl> + <nl> + / / This function should only be called once , so below is safe . <nl> + sync _ manager = sync _ manager _ class ; <nl> + sync _ manager _ notify _ error _ handler = env - > GetStaticMethodID ( sync _ manager , <nl> + " notifyErrorHandler " , " ( ILjava / lang / String ; ) V " ) ; <nl> + sync _ client - > set _ error _ handler ( error _ handler ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> / / Create the thread from java side to avoid some strange errors when native throws . <nl> JNIEXPORT void JNICALL <nl> - Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) { <nl> + Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) <nl> + { <nl> try { <nl> sync _ client - > run ( ) ; <nl> } CATCH _ STD ( ) <nl> diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp <nl> index 2c571bd . . eb00c1a 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / util . cpp <nl> @ @ - 38 , 8 + 38 , 6 @ @ jclass java _ lang _ float ; <nl> jmethodID java _ lang _ float _ init ; <nl> jclass java _ lang _ double ; <nl> jmethodID java _ lang _ double _ init ; <nl> - jclass sync _ manager ; <nl> - jmethodID sync _ manager _ notify _ error _ handler ; <nl> jclass session _ class _ ref ; <nl> jmethodID session _ error _ handler ; <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp <nl> index 7cadba4 . . 9db3763 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . hpp <nl> + + + b / realm / realm - library / src / main / cpp / util . hpp <nl> @ @ - 713 , 8 + 713 , 6 @ @ extern jclass java _ lang _ double ; <nl> extern jmethodID java _ lang _ double _ init ; <nl> <nl> / / FIXME Move to own library <nl> - extern jclass sync _ manager ; <nl> - extern jmethodID sync _ manager _ notify _ error _ handler ; <nl> extern jclass session _ class _ ref ; <nl> extern jmethodID session _ error _ handler ; <nl> <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> index 56dfad5 . . 01891b6 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> @ @ - 206 , 6 + 206 , 7 @ @ public final class SyncManager { <nl> / / This is called from SyncManager . cpp from the worker thread the Sync Client is running on <nl> / / Right now Core doesn ' t send these errors to the proper session , so instead we need to notify all sessions <nl> / / from here . This can be removed once better error propagation is implemented in Sync Core . <nl> + @ SuppressWarnings ( " unused " ) <nl> private static void notifyErrorHandler ( int errorCode , String errorMessage ) { <nl> ObjectServerError error = new ObjectServerError ( ErrorCode . fromInt ( errorCode ) , errorMessage ) ; <nl> for ( SyncSession session : SessionStore . getAllSessions ( ) ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 index 04a18ef . . 39c456f 100644 
 - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt 
 + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 @ @ - 158 , 7 + 158 , 7 @ @ file ( GLOB objectstore _ SRC 
 if ( build _ SYNC ) 
 file ( GLOB objectstore _ sync _ SRC 
 " object - store / src / sync _ manager . cpp " 
 - " object - store / src / impl / sync _ session . cpp " ) 
 + " object - store / src / sync _ session . cpp " ) 
 endif ( ) 
 
 add _ library ( realm - jni SHARED $ { jni _ SRC } $ { objectstore _ SRC } $ { objectstore _ sync _ SRC } ) 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 index 9c00c09 . . 30fca15 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 @ @ - 1 , 3 + 1 , 4 @ @ 
 + # include < object - store / src / sync _ manager . hpp > 
 # include " io _ realm _ internal _ SharedRealm . h " 
 
 # include " object _ store . hpp " 
 @ @ - 45 , 9 + 46 , 7 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeCreateConfig ( JNIEnv * env , jclass , jstri 
 if ( sync _ server _ url ) { 
 JStringAccessor url ( env , sync _ server _ url ) ; 
 JStringAccessor token ( env , sync _ user _ token ) ; 
 - config - > sync _ config = std : : make _ shared < SyncConfig > ( ) ; 
 - config - > sync _ config - > user _ tag = token ; 
 - config - > sync _ config - > realm _ url = url ; 
 + config - > sync _ config = std : : make _ shared < SyncConfig > ( token , url , nullptr , SyncSessionStopPolicy : : Immediately ) ; 
 / / FIXME : Sync session is handled by java now . Remove this when adapt to OS sync implementation . 
 config - > sync _ config - > create _ session = false ; 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store 
 index b297230 . . a0ab785 160000 
 - - - a / realm / realm - library / src / main / cpp / object - store 
 + + + b / realm / realm - library / src / main / cpp / object - store 
 @ @ - 1 + 1 @ @ 
 - Subproject commit b297230bde4370301948055014453323898198fe 
 + Subproject commit a0ab785896b3e362e9703c798b8db729a49c9fda

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 index c397fea . . f513c03 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 @ @ - 73 , 13 + 73 , 28 @ @ struct AndroidLoggerFactory : public realm : : SyncLoggerFactory { 
 } s _ logger _ factory ; 
 
 / / TODO : Move to a better place & not needed after moving to OS 
 - AndroidLogger & AndroidLogger : : shared ( ) noexcept { 
 + AndroidLogger & AndroidLogger : : shared ( ) noexcept 
 + { 
 static AndroidLogger logger ; 
 return logger ; 
 } 
 
 + static jclass sync _ manager = nullptr ; 
 + static jmethodID sync _ manager _ notify _ error _ handler = nullptr ; 
 + 
 + static void error _ handler ( int error _ code , std : : string message ) 
 + { 
 + JNIEnv * env ; 
 + if ( g _ vm - > GetEnv ( ( void * * ) & env , JNI _ VERSION _ 1 _ 6 ) ! = JNI _ OK ) { 
 + throw std : : runtime _ error ( " JVM is not attached to this thread . Called in error _ handler . " ) ; 
 + } 
 + 
 + env - > CallStaticVoidMethod ( sync _ manager , 
 + sync _ manager _ notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; 
 + } 
 + 
 JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient 
 - ( JNIEnv * env , jclass ) 
 + ( JNIEnv * env , jclass sync _ manager _ class ) 
 { 
 TR _ ENTER ( env ) 
 if ( sync _ client ) return ; 
 @ @ - 90 , 13 + 105 , 19 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient 
 sync : : Client : : Config config ; 
 config . logger = & AndroidLogger : : shared ( ) ; 
 sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws 
 - / / FIXME setup error handler for client 
 + 
 + / / This function should only be called once , so below is safe . 
 + sync _ manager = sync _ manager _ class ; 
 + sync _ manager _ notify _ error _ handler = env - > GetStaticMethodID ( sync _ manager , 
 + " notifyErrorHandler " , " ( ILjava / lang / String ; ) V " ) ; 
 + sync _ client - > set _ error _ handler ( error _ handler ) ; 
 } CATCH _ STD ( ) 
 } 
 
 / / Create the thread from java side to avoid some strange errors when native throws . 
 JNIEXPORT void JNICALL 
 - Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) { 
 + Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) 
 + { 
 try { 
 sync _ client - > run ( ) ; 
 } CATCH _ STD ( ) 
 diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp 
 index 2c571bd . . eb00c1a 100644 
 - - - a / realm / realm - library / src / main / cpp / util . cpp 
 + + + b / realm / realm - library / src / main / cpp / util . cpp 
 @ @ - 38 , 8 + 38 , 6 @ @ jclass java _ lang _ float ; 
 jmethodID java _ lang _ float _ init ; 
 jclass java _ lang _ double ; 
 jmethodID java _ lang _ double _ init ; 
 - jclass sync _ manager ; 
 - jmethodID sync _ manager _ notify _ error _ handler ; 
 jclass session _ class _ ref ; 
 jmethodID session _ error _ handler ; 
 
 diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp 
 index 7cadba4 . . 9db3763 100644 
 - - - a / realm / realm - library / src / main / cpp / util . hpp 
 + + + b / realm / realm - library / src / main / cpp / util . hpp 
 @ @ - 713 , 8 + 713 , 6 @ @ extern jclass java _ lang _ double ; 
 extern jmethodID java _ lang _ double _ init ; 
 
 / / FIXME Move to own library 
 - extern jclass sync _ manager ; 
 - extern jmethodID sync _ manager _ notify _ error _ handler ; 
 extern jclass session _ class _ ref ; 
 extern jmethodID session _ error _ handler ; 
 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 index 56dfad5 . . 01891b6 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 @ @ - 206 , 6 + 206 , 7 @ @ public final class SyncManager { 
 / / This is called from SyncManager . cpp from the worker thread the Sync Client is running on 
 / / Right now Core doesn ' t send these errors to the proper session , so instead we need to notify all sessions 
 / / from here . This can be removed once better error propagation is implemented in Sync Core . 
 + @ SuppressWarnings ( " unused " ) 
 private static void notifyErrorHandler ( int errorCode , String errorMessage ) { 
 ObjectServerError error = new ObjectServerError ( ErrorCode . fromInt ( errorCode ) , errorMessage ) ; 
 for ( SyncSession session : SessionStore . getAllSessions ( ) ) {
