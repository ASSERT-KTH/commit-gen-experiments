BLEU SCORE: 0.06567274736060397

TEST MSG: Only trigger realm notifier when version changed
GENERATED MSG: Check java excpetion before notifier callback

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> index 4d7d253 . . 7e7d387 100644 <nl> - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> @ @ - 71 , 7 + 71 , 7 @ @ void JavaBindingContext : : changes _ available ( ) <nl> <nl> void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > const & observer _ state _ list , <nl> std : : vector < void * > const & invalidated , <nl> - bool / * version _ changed * / ) <nl> + bool version _ changed ) <nl> { <nl> auto env = JniUtils : : get _ env ( ) ; <nl> static JavaMethod row _ observer _ pair _ on _ change _ method ( env , <nl> @ @ - 100 , 12 + 100 , 11 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c <nl> } ) ; <nl> <nl> if ( env - > ExceptionCheck ( ) ) return ; <nl> - m _ java _ notifier . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * , jobject notifier _ obj ) { <nl> - static JavaMethod realm _ notifier _ did _ change _ method ( env , <nl> - notifier _ obj , <nl> - " didChange " , " ( ) V " ) ; <nl> - <nl> - env - > CallVoidMethod ( notifier _ obj , realm _ notifier _ did _ change _ method ) ; <nl> - } ) ; <nl> + if ( version _ changed ) { <nl> + m _ java _ notifier . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * , jobject notifier _ obj ) { <nl> + static JavaMethod realm _ notifier _ did _ change _ method ( env , notifier _ obj , " didChange " , " ( ) V " ) ; <nl> + env - > CallVoidMethod ( notifier _ obj , realm _ notifier _ did _ change _ method ) ; <nl> + } ) ; <nl> + } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index c6c089c . . 36bebfc 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 229 , 6 + 229 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeAddListener ( JNIEnv * env , jobject instanc <nl> <nl> auto cb = [ = ] ( realm : : CollectionChangeSet const & changes , <nl> std : : exception _ ptr err ) { <nl> + / / OS will call all notifiers ' callback in one run , so check the Java excpetion first ! ! <nl> + if ( env - > ExceptionCheck ( ) ) return ; <nl> + <nl> jclass results _ class = env - > GetObjectClass ( weak _ results ) ; <nl> jmethodID notify _ method = env - > GetMethodID ( results _ class , " notifyChangeListeners " , " ( ) V " ) ; <nl> env - > CallVoidMethod ( weak _ results , notify _ method ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> index b113701 . . bbda5f3 100644 <nl> - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> @ @ - 113 , 16 + 113 , 23 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c <nl> bool / * version _ changed * / ) <nl> { <nl> for ( auto state : observer _ state _ list ) { <nl> + if ( m _ local _ jni _ env - > ExceptionCheck ( ) ) return ; <nl> + <nl> jobject observer = reinterpret _ cast < jobject > ( state . info ) ; <nl> / / if ( ! state . changes . empty ( ) ) { <nl> m _ local _ jni _ env - > CallVoidMethod ( observer , m _ row _ observer _ pair _ on _ change _ method ) ; <nl> / / } <nl> } <nl> for ( auto deleted _ row _ observer : invalidated ) { <nl> + if ( m _ local _ jni _ env - > ExceptionCheck ( ) ) return ; <nl> + <nl> jobject observer = reinterpret _ cast < jobject > ( deleted _ row _ observer ) ; <nl> m _ local _ jni _ env - > CallVoidMethod ( observer , m _ row _ observer _ pair _ on _ change _ method ) ; <nl> } <nl> + <nl> m _ local _ jni _ env - > CallVoidMethod ( m _ row _ notifier , m _ clear _ row _ refs _ method ) ; <nl> + <nl> + if ( m _ local _ jni _ env - > ExceptionCheck ( ) ) return ; <nl> jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; <nl> if ( notifier ) { <nl> m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ realm _ notifier _ on _ change _ method ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 index 4d7d253 . . 7e7d387 100644 
 - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 @ @ - 71 , 7 + 71 , 7 @ @ void JavaBindingContext : : changes _ available ( ) 
 
 void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > const & observer _ state _ list , 
 std : : vector < void * > const & invalidated , 
 - bool / * version _ changed * / ) 
 + bool version _ changed ) 
 { 
 auto env = JniUtils : : get _ env ( ) ; 
 static JavaMethod row _ observer _ pair _ on _ change _ method ( env , 
 @ @ - 100 , 12 + 100 , 11 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c 
 } ) ; 
 
 if ( env - > ExceptionCheck ( ) ) return ; 
 - m _ java _ notifier . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * , jobject notifier _ obj ) { 
 - static JavaMethod realm _ notifier _ did _ change _ method ( env , 
 - notifier _ obj , 
 - " didChange " , " ( ) V " ) ; 
 - 
 - env - > CallVoidMethod ( notifier _ obj , realm _ notifier _ did _ change _ method ) ; 
 - } ) ; 
 + if ( version _ changed ) { 
 + m _ java _ notifier . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * , jobject notifier _ obj ) { 
 + static JavaMethod realm _ notifier _ did _ change _ method ( env , notifier _ obj , " didChange " , " ( ) V " ) ; 
 + env - > CallVoidMethod ( notifier _ obj , realm _ notifier _ did _ change _ method ) ; 
 + } ) ; 
 + } 
 } 


NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index c6c089c . . 36bebfc 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 229 , 6 + 229 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeAddListener ( JNIEnv * env , jobject instanc 
 
 auto cb = [ = ] ( realm : : CollectionChangeSet const & changes , 
 std : : exception _ ptr err ) { 
 + / / OS will call all notifiers ' callback in one run , so check the Java excpetion first ! ! 
 + if ( env - > ExceptionCheck ( ) ) return ; 
 + 
 jclass results _ class = env - > GetObjectClass ( weak _ results ) ; 
 jmethodID notify _ method = env - > GetMethodID ( results _ class , " notifyChangeListeners " , " ( ) V " ) ; 
 env - > CallVoidMethod ( weak _ results , notify _ method ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 index b113701 . . bbda5f3 100644 
 - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 @ @ - 113 , 16 + 113 , 23 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c 
 bool / * version _ changed * / ) 
 { 
 for ( auto state : observer _ state _ list ) { 
 + if ( m _ local _ jni _ env - > ExceptionCheck ( ) ) return ; 
 + 
 jobject observer = reinterpret _ cast < jobject > ( state . info ) ; 
 / / if ( ! state . changes . empty ( ) ) { 
 m _ local _ jni _ env - > CallVoidMethod ( observer , m _ row _ observer _ pair _ on _ change _ method ) ; 
 / / } 
 } 
 for ( auto deleted _ row _ observer : invalidated ) { 
 + if ( m _ local _ jni _ env - > ExceptionCheck ( ) ) return ; 
 + 
 jobject observer = reinterpret _ cast < jobject > ( deleted _ row _ observer ) ; 
 m _ local _ jni _ env - > CallVoidMethod ( observer , m _ row _ observer _ pair _ on _ change _ method ) ; 
 } 
 + 
 m _ local _ jni _ env - > CallVoidMethod ( m _ row _ notifier , m _ clear _ row _ refs _ method ) ; 
 + 
 + if ( m _ local _ jni _ env - > ExceptionCheck ( ) ) return ; 
 jobject notifier = m _ local _ jni _ env - > NewLocalRef ( m _ realm _ notifier ) ; 
 if ( notifier ) { 
 m _ local _ jni _ env - > CallVoidMethod ( m _ realm _ notifier , m _ realm _ notifier _ on _ change _ method ) ;
