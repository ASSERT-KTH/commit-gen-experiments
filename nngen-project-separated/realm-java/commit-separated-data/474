BLEU SCORE: 0.035802380724744266

TEST MSG: Remove tests for deprecated distinctAsync
GENERATED MSG: Updating JavaDoc . Splitting unit test .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> index 734c129 . . 357aa84 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> @ @ - 522 , 70 + 522 , 6 @ @ public class RealmResultsTests extends CollectionTests { <nl> } <nl> <nl> @ Test <nl> - public void distinctAsync _ notIndexedFields ( ) { <nl> - final long numberOfBlocks = 25 ; <nl> - final long numberOfObjects = 10 ; <nl> - populateForDistinct ( realm , numberOfBlocks , numberOfObjects , false ) ; <nl> - <nl> - for ( String field : AnnotationIndexTypes . NOT _ INDEX _ FIELDS ) { <nl> - try { <nl> - realm . where ( AnnotationIndexTypes . class ) . findAll ( ) . distinctAsync ( field ) ; <nl> - fail ( field ) ; <nl> - } catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void distinctAsync _ doesNotExist ( ) { <nl> - final long numberOfBlocks = 25 ; <nl> - final long numberOfObjects = 10 ; <nl> - populateForDistinct ( realm , numberOfBlocks , numberOfObjects , false ) ; <nl> - <nl> - try { <nl> - realm . where ( AnnotationIndexTypes . class ) . findAll ( ) . distinctAsync ( " doesNotExist " ) ; <nl> - } catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void distinctAsync _ invalidTypes ( ) { <nl> - populateTestRealm ( realm , TEST _ DATA _ SIZE ) ; <nl> - <nl> - for ( String field : new String [ ] { AllTypes . FIELD _ REALMOBJECT , AllTypes . FIELD _ REALMLIST , AllTypes . FIELD _ DOUBLE , AllTypes . FIELD _ FLOAT } ) { <nl> - try { <nl> - realm . where ( AllTypes . class ) . findAll ( ) . distinctAsync ( field ) ; <nl> - } catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void distinctAsync _ indexedLinkedFields ( ) { <nl> - final long numberOfBlocks = 25 ; <nl> - final long numberOfObjects = 10 ; <nl> - populateForDistinct ( realm , numberOfBlocks , numberOfObjects , false ) ; <nl> - <nl> - for ( String field : AnnotationIndexTypes . INDEX _ FIELDS ) { <nl> - try { <nl> - realm . where ( AnnotationIndexTypes . class ) . findAll ( ) . distinctAsync ( AnnotationIndexTypes . FIELD _ OBJECT + " . " + field ) ; <nl> - fail ( " Unsupported " + field + " linked field " ) ; <nl> - } catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void distinctAsync _ notIndexedLinkedFields ( ) { <nl> - populateForDistinctInvalidTypesLinked ( realm ) ; <nl> - <nl> - try { <nl> - realm . where ( AllJavaTypes . class ) . findAll ( ) . distinctAsync ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ BINARY ) ; <nl> - } catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> public void distinctMultiArgs ( ) { <nl> final long numberOfBlocks = 25 ; <nl> final long numberOfObjects = 10 ; / / must be greater than 1
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index bea1b2c . . 6e19907 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 2059 , 14 + 2059 , 11 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - / / Realm . distinct ( ) : requires indexing , and type = boolean , integer , date , string <nl> - public void testDistinct ( ) { <nl> - final long numberOfBlocks = 25 ; <nl> - final long numberOfObjects = 10 ; / / must be greater than 1 <nl> - testRealm . beginTransaction ( ) ; <nl> + private void populateForDistinct ( Realm realm , long numberOfBlocks , long numberOfObjects ) { <nl> + realm . beginTransaction ( ) ; <nl> for ( int i = 0 ; i < numberOfObjects * numberOfBlocks ; i + + ) { <nl> for ( int j = 0 ; j < numberOfBlocks ; j + + ) { <nl> - AnnotationIndexTypes obj = testRealm . createObject ( AnnotationIndexTypes . class ) ; <nl> + AnnotationIndexTypes obj = realm . createObject ( AnnotationIndexTypes . class ) ; <nl> obj . setIndexBoolean ( j % 2 = = 0 ) ; <nl> obj . setIndexLong ( j ) ; <nl> obj . setIndexDate ( new Date ( 1000 * j ) ) ; <nl> @ @ - 2077 , 7 + 2074 , 15 @ @ public class RealmTest extends AndroidTestCase { <nl> obj . setNotIndexString ( " Test " + j ) ; <nl> } <nl> } <nl> - testRealm . commitTransaction ( ) ; <nl> + realm . commitTransaction ( ) ; <nl> + } <nl> + <nl> + / / Realm . distinct ( ) : requires indexing , and type = boolean , integer , date , string <nl> + public void testDistinct ( ) { <nl> + final long numberOfBlocks = 25 ; <nl> + final long numberOfObjects = 10 ; / / must be greater than 1 <nl> + <nl> + populateForDistinct ( testRealm , numberOfBlocks , numberOfObjects ) ; <nl> <nl> RealmResults < AnnotationIndexTypes > distinctBool = testRealm . distinct ( AnnotationIndexTypes . class , " indexBoolean " ) ; <nl> assertEquals ( 2 , distinctBool . size ( ) ) ; <nl> @ @ - 2086 , 6 + 2091 , 13 @ @ public class RealmTest extends AndroidTestCase { <nl> RealmResults < AnnotationIndexTypes > distinct = testRealm . distinct ( AnnotationIndexTypes . class , " index " + fieldName ) ; <nl> assertEquals ( " index " + fieldName , numberOfBlocks , distinct . size ( ) ) ; <nl> } <nl> + } <nl> + <nl> + public void testDistinctNotIndexedFields ( ) { <nl> + final long numberOfBlocks = 25 ; <nl> + final long numberOfObjects = 10 ; / / must be greater than 1 <nl> + <nl> + populateForDistinct ( testRealm , numberOfBlocks , numberOfObjects ) ; <nl> <nl> for ( String fieldName : new String [ ] { " Boolean " , " Long " , " Date " , " String " } ) { <nl> try { <nl> @ @ - 2094 , 6 + 2106 , 13 @ @ public class RealmTest extends AndroidTestCase { <nl> } catch ( UnsupportedOperationException ignore ) { <nl> } <nl> } <nl> + } <nl> + <nl> + public void testDistinctDoesNotExist ( ) { <nl> + final long numberOfBlocks = 25 ; <nl> + final long numberOfObjects = 10 ; / / must be greater than 1 <nl> + <nl> + populateForDistinct ( testRealm , numberOfBlocks , numberOfObjects ) ; <nl> <nl> try { <nl> testRealm . distinct ( AnnotationIndexTypes . class , " doesNotExist " ) ; <nl> @ @ - 2101 , 4 + 2120 , 16 @ @ public class RealmTest extends AndroidTestCase { <nl> } catch ( IllegalArgumentException ignore ) { <nl> } <nl> } <nl> + <nl> + public void testDistinctInvalidTypes ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> + for ( String field : new String [ ] { " columnRealmObject " , " columnRealmList " , " columnDouble " , " columnFloat " } ) { <nl> + try { <nl> + testRealm . distinct ( AllTypes . class , field ) ; <nl> + fail ( field ) ; <nl> + } catch ( UnsupportedOperationException ignore ) { <nl> + } <nl> + } <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 8da6dad . . ac31106 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 948 , 7 + 948 , 9 @ @ public final class Realm extends BaseRealm { <nl> / * * <nl> * Return a distinct set of objects of a specific class . If no objects exist , the <nl> * returned { @ link RealmResults } will not be @ { code null } . The RealmResults . size ( ) to check the <nl> - * number of objects instead . <nl> + * number of objects instead . As a Realm is unordered , it is undefined which objects are <nl> + * returned if cases of multiple occurrencies . <nl> + * <nl> * @ param clazz the Class to get objects of . <nl> * @ param fieldName the field name . <nl> * @ return A RealmResults containing objects .

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 index 734c129 . . 357aa84 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 @ @ - 522 , 70 + 522 , 6 @ @ public class RealmResultsTests extends CollectionTests { 
 } 
 
 @ Test 
 - public void distinctAsync _ notIndexedFields ( ) { 
 - final long numberOfBlocks = 25 ; 
 - final long numberOfObjects = 10 ; 
 - populateForDistinct ( realm , numberOfBlocks , numberOfObjects , false ) ; 
 - 
 - for ( String field : AnnotationIndexTypes . NOT _ INDEX _ FIELDS ) { 
 - try { 
 - realm . where ( AnnotationIndexTypes . class ) . findAll ( ) . distinctAsync ( field ) ; 
 - fail ( field ) ; 
 - } catch ( IllegalArgumentException ignored ) { 
 - } 
 - } 
 - } 
 - 
 - @ Test 
 - public void distinctAsync _ doesNotExist ( ) { 
 - final long numberOfBlocks = 25 ; 
 - final long numberOfObjects = 10 ; 
 - populateForDistinct ( realm , numberOfBlocks , numberOfObjects , false ) ; 
 - 
 - try { 
 - realm . where ( AnnotationIndexTypes . class ) . findAll ( ) . distinctAsync ( " doesNotExist " ) ; 
 - } catch ( IllegalArgumentException ignored ) { 
 - } 
 - } 
 - 
 - @ Test 
 - public void distinctAsync _ invalidTypes ( ) { 
 - populateTestRealm ( realm , TEST _ DATA _ SIZE ) ; 
 - 
 - for ( String field : new String [ ] { AllTypes . FIELD _ REALMOBJECT , AllTypes . FIELD _ REALMLIST , AllTypes . FIELD _ DOUBLE , AllTypes . FIELD _ FLOAT } ) { 
 - try { 
 - realm . where ( AllTypes . class ) . findAll ( ) . distinctAsync ( field ) ; 
 - } catch ( IllegalArgumentException ignored ) { 
 - } 
 - } 
 - } 
 - 
 - @ Test 
 - public void distinctAsync _ indexedLinkedFields ( ) { 
 - final long numberOfBlocks = 25 ; 
 - final long numberOfObjects = 10 ; 
 - populateForDistinct ( realm , numberOfBlocks , numberOfObjects , false ) ; 
 - 
 - for ( String field : AnnotationIndexTypes . INDEX _ FIELDS ) { 
 - try { 
 - realm . where ( AnnotationIndexTypes . class ) . findAll ( ) . distinctAsync ( AnnotationIndexTypes . FIELD _ OBJECT + " . " + field ) ; 
 - fail ( " Unsupported " + field + " linked field " ) ; 
 - } catch ( IllegalArgumentException ignored ) { 
 - } 
 - } 
 - } 
 - 
 - @ Test 
 - public void distinctAsync _ notIndexedLinkedFields ( ) { 
 - populateForDistinctInvalidTypesLinked ( realm ) ; 
 - 
 - try { 
 - realm . where ( AllJavaTypes . class ) . findAll ( ) . distinctAsync ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ BINARY ) ; 
 - } catch ( IllegalArgumentException ignored ) { 
 - } 
 - } 
 - 
 - @ Test 
 public void distinctMultiArgs ( ) { 
 final long numberOfBlocks = 25 ; 
 final long numberOfObjects = 10 ; / / must be greater than 1

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index bea1b2c . . 6e19907 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 2059 , 14 + 2059 , 11 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 } 
 
 - / / Realm . distinct ( ) : requires indexing , and type = boolean , integer , date , string 
 - public void testDistinct ( ) { 
 - final long numberOfBlocks = 25 ; 
 - final long numberOfObjects = 10 ; / / must be greater than 1 
 - testRealm . beginTransaction ( ) ; 
 + private void populateForDistinct ( Realm realm , long numberOfBlocks , long numberOfObjects ) { 
 + realm . beginTransaction ( ) ; 
 for ( int i = 0 ; i < numberOfObjects * numberOfBlocks ; i + + ) { 
 for ( int j = 0 ; j < numberOfBlocks ; j + + ) { 
 - AnnotationIndexTypes obj = testRealm . createObject ( AnnotationIndexTypes . class ) ; 
 + AnnotationIndexTypes obj = realm . createObject ( AnnotationIndexTypes . class ) ; 
 obj . setIndexBoolean ( j % 2 = = 0 ) ; 
 obj . setIndexLong ( j ) ; 
 obj . setIndexDate ( new Date ( 1000 * j ) ) ; 
 @ @ - 2077 , 7 + 2074 , 15 @ @ public class RealmTest extends AndroidTestCase { 
 obj . setNotIndexString ( " Test " + j ) ; 
 } 
 } 
 - testRealm . commitTransaction ( ) ; 
 + realm . commitTransaction ( ) ; 
 + } 
 + 
 + / / Realm . distinct ( ) : requires indexing , and type = boolean , integer , date , string 
 + public void testDistinct ( ) { 
 + final long numberOfBlocks = 25 ; 
 + final long numberOfObjects = 10 ; / / must be greater than 1 
 + 
 + populateForDistinct ( testRealm , numberOfBlocks , numberOfObjects ) ; 
 
 RealmResults < AnnotationIndexTypes > distinctBool = testRealm . distinct ( AnnotationIndexTypes . class , " indexBoolean " ) ; 
 assertEquals ( 2 , distinctBool . size ( ) ) ; 
 @ @ - 2086 , 6 + 2091 , 13 @ @ public class RealmTest extends AndroidTestCase { 
 RealmResults < AnnotationIndexTypes > distinct = testRealm . distinct ( AnnotationIndexTypes . class , " index " + fieldName ) ; 
 assertEquals ( " index " + fieldName , numberOfBlocks , distinct . size ( ) ) ; 
 } 
 + } 
 + 
 + public void testDistinctNotIndexedFields ( ) { 
 + final long numberOfBlocks = 25 ; 
 + final long numberOfObjects = 10 ; / / must be greater than 1 
 + 
 + populateForDistinct ( testRealm , numberOfBlocks , numberOfObjects ) ; 
 
 for ( String fieldName : new String [ ] { " Boolean " , " Long " , " Date " , " String " } ) { 
 try { 
 @ @ - 2094 , 6 + 2106 , 13 @ @ public class RealmTest extends AndroidTestCase { 
 } catch ( UnsupportedOperationException ignore ) { 
 } 
 } 
 + } 
 + 
 + public void testDistinctDoesNotExist ( ) { 
 + final long numberOfBlocks = 25 ; 
 + final long numberOfObjects = 10 ; / / must be greater than 1 
 + 
 + populateForDistinct ( testRealm , numberOfBlocks , numberOfObjects ) ; 
 
 try { 
 testRealm . distinct ( AnnotationIndexTypes . class , " doesNotExist " ) ; 
 @ @ - 2101 , 4 + 2120 , 16 @ @ public class RealmTest extends AndroidTestCase { 
 } catch ( IllegalArgumentException ignore ) { 
 } 
 } 
 + 
 + public void testDistinctInvalidTypes ( ) { 
 + populateTestRealm ( ) ; 
 + 
 + for ( String field : new String [ ] { " columnRealmObject " , " columnRealmList " , " columnDouble " , " columnFloat " } ) { 
 + try { 
 + testRealm . distinct ( AllTypes . class , field ) ; 
 + fail ( field ) ; 
 + } catch ( UnsupportedOperationException ignore ) { 
 + } 
 + } 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 8da6dad . . ac31106 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 948 , 7 + 948 , 9 @ @ public final class Realm extends BaseRealm { 
 / * * 
 * Return a distinct set of objects of a specific class . If no objects exist , the 
 * returned { @ link RealmResults } will not be @ { code null } . The RealmResults . size ( ) to check the 
 - * number of objects instead . 
 + * number of objects instead . As a Realm is unordered , it is undefined which objects are 
 + * returned if cases of multiple occurrencies . 
 + * 
 * @ param clazz the Class to get objects of . 
 * @ param fieldName the field name . 
 * @ return A RealmResults containing objects .
