BLEU SCORE: 0.04372912656590315

TEST MSG: Separated dir for remote SyncManager
GENERATED MSG: remove duplicate init of the metadata

TEST DIFF (one line): diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> index 272ead6 . . 29e7fae 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ package io . realm ; <nl> import android . content . Context ; <nl> import android . content . pm . PackageInfo ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import io . realm . internal . Keep ; <nl> <nl> / * * <nl> @ @ - 41 , 7 + 44 , 25 @ @ class ObjectServer { <nl> / / init the " sync _ manager . cpp " metadata Realm , this is also needed later , when re try <nl> / / to schedule a client reset . in realm - java # master this is already done , when initialising <nl> / / the RealmFileUserStore ( not available now on releases ) <nl> - SyncManager . nativeInitializeSyncManager ( context . getFilesDir ( ) . getPath ( ) ) ; <nl> + if ( SyncManager . Debug . separatedDirForSyncManager ) { <nl> + try { <nl> + / / Files . createTempDirectory is not available on JDK 6 . <nl> + File dir = File . createTempFile ( " remote _ sync _ " , " _ " + android . os . Process . myPid ( ) , <nl> + context . getFilesDir ( ) ) ; <nl> + if ( ! dir . delete ( ) ) { <nl> + throw new IllegalStateException ( String . format ( " Temp file ' % s ' cannot be deleted . " , dir . getPath ( ) ) ) ; <nl> + } <nl> + if ( ! dir . mkdir ( ) ) { <nl> + throw new IllegalStateException ( String . format ( " Directory ' % s ' for SyncManager cannot be created . " , <nl> + dir . getPath ( ) ) ) ; <nl> + } <nl> + SyncManager . nativeInitializeSyncManager ( dir . getPath ( ) ) ; <nl> + } catch ( IOException e ) { <nl> + throw new IllegalStateException ( e ) ; <nl> + } <nl> + } else { <nl> + SyncManager . nativeInitializeSyncManager ( context . getFilesDir ( ) . getPath ( ) ) ; <nl> + } <nl> <nl> / / Configure default UserStore <nl> UserStore userStore = new RealmFileUserStore ( ) ; <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> index 63ef781 . . 8e070e1 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> @ @ - 56 , 6 + 56 , 11 @ @ public class SyncManager { <nl> * / <nl> public static boolean skipOnlineChecking = false ; <nl> <nl> + / * * <nl> + * Set this to true to init a SyncManager with a directory named by the process ID . This is useful for <nl> + * integration tests which are emulating multiple sync client by using multiple processes . <nl> + * / <nl> + public static boolean separatedDirForSyncManager = false ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / RemoteIntegrationTestService . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / RemoteIntegrationTestService . java <nl> index 872b108 . . d80d79a 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / RemoteIntegrationTestService . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / RemoteIntegrationTestService . java <nl> @ @ - 24 , 5 + 24 , 6 @ @ public class RemoteIntegrationTestService extends RemoteTestService { <nl> public RemoteIntegrationTestService ( ) { <nl> super ( ) ; <nl> SyncManager . Debug . skipOnlineChecking = true ; <nl> + SyncManager . Debug . separatedDirForSyncManager = true ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> index 27f92b0 . . 116fab3 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java <nl> @ @ - 57 , 7 + 57 , 7 @ @ public class SyncUserTests { <nl> @ BeforeClass <nl> public static void initUserStore ( ) { <nl> Realm . init ( InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ) ; <nl> - UserStore userStore = new RealmFileUserStore ( InstrumentationRegistry . getTargetContext ( ) . getFilesDir ( ) . getPath ( ) ) ; <nl> + UserStore userStore = new RealmFileUserStore ( ) ; <nl> SyncManager . setUserStore ( userStore ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ RealmFileUserStore . cpp b / realm / realm - library / src / main / cpp / io _ realm _ RealmFileUserStore . cpp <nl> index e4a0a4a . . 076fb54 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ RealmFileUserStore . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ RealmFileUserStore . cpp <nl> @ @ - 85 , 16 + 85 , 6 @ @ Java _ io _ realm _ RealmFileUserStore _ nativeLogoutUser ( JNIEnv * env , jclass , jstring <nl> } <nl> <nl> <nl> - JNIEXPORT void JNICALL <nl> - Java _ io _ realm _ RealmFileUserStore _ nativeConfigureMetaDataSystem ( JNIEnv * env , jclass , jstring baseFile ) <nl> - { <nl> - TR _ ENTER ( ) <nl> - try { <nl> - JStringAccessor base _ file _ path ( env , baseFile ) ; / / throws <nl> - SyncManager : : shared ( ) . configure _ file _ system ( base _ file _ path , SyncManager : : MetadataMode : : NoEncryption ) ; <nl> - } CATCH _ STD ( ) <nl> - } <nl> - <nl> JNIEXPORT jobjectArray JNICALL <nl> Java _ io _ realm _ RealmFileUserStore _ nativeGetAllUsers ( JNIEnv * env , jclass ) <nl> { <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> index 5ab8d01 . . fcf681a 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java <nl> @ @ - 38 , 14 + 38 , 14 @ @ class ObjectServer { <nl> } catch ( Exception ignore ) { <nl> } <nl> <nl> - / / Configure default UserStore <nl> - UserStore userStore = new RealmFileUserStore ( context . getFilesDir ( ) . getPath ( ) ) ; <nl> - <nl> - SyncManager . init ( appId , userStore ) ; <nl> - <nl> / / init the " sync _ manager . cpp " metadata Realm , this is also needed later , when re try <nl> / / to schedule a client reset . in realm - java # master this is already done , when initialising <nl> / / the RealmFileUserStore ( not available now on releases ) <nl> SyncManager . nativeConfigureMetaDataSystem ( context . getFilesDir ( ) . getPath ( ) ) ; <nl> + <nl> + / / Configure default UserStore <nl> + UserStore userStore = new RealmFileUserStore ( ) ; <nl> + <nl> + SyncManager . init ( appId , userStore ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / RealmFileUserStore . java b / realm / realm - library / src / objectServer / java / io / realm / RealmFileUserStore . java <nl> index 9ba14bf . . 61a3ad2 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / RealmFileUserStore . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / RealmFileUserStore . java <nl> @ @ - 24 , 9 + 24 , 6 @ @ import java . util . Collections ; <nl> * A User Store backed by a Realm file to store user . <nl> * / <nl> public class RealmFileUserStore implements UserStore { <nl> - protected RealmFileUserStore ( String path ) { <nl> - nativeConfigureMetaDataSystem ( path ) ; <nl> - } <nl> <nl> / * * <nl> * { @ inheritDoc } <nl> @ @ - 87 , 9 + 84 , 6 @ @ public class RealmFileUserStore implements UserStore { <nl> return SyncUser . fromJson ( userJson ) ; <nl> } <nl> <nl> - / / init and load the Metadata Realm containing SyncUsers <nl> - protected static native void nativeConfigureMetaDataSystem ( String baseFile ) ; <nl> - <nl> / / returns json data ( token ) of the current logged in user <nl> protected static native String nativeGetCurrentUser ( ) ; <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 index 272ead6 . . 29e7fae 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 @ @ - 19 , 6 + 19 , 9 @ @ package io . realm ; 
 import android . content . Context ; 
 import android . content . pm . PackageInfo ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import io . realm . internal . Keep ; 
 
 / * * 
 @ @ - 41 , 7 + 44 , 25 @ @ class ObjectServer { 
 / / init the " sync _ manager . cpp " metadata Realm , this is also needed later , when re try 
 / / to schedule a client reset . in realm - java # master this is already done , when initialising 
 / / the RealmFileUserStore ( not available now on releases ) 
 - SyncManager . nativeInitializeSyncManager ( context . getFilesDir ( ) . getPath ( ) ) ; 
 + if ( SyncManager . Debug . separatedDirForSyncManager ) { 
 + try { 
 + / / Files . createTempDirectory is not available on JDK 6 . 
 + File dir = File . createTempFile ( " remote _ sync _ " , " _ " + android . os . Process . myPid ( ) , 
 + context . getFilesDir ( ) ) ; 
 + if ( ! dir . delete ( ) ) { 
 + throw new IllegalStateException ( String . format ( " Temp file ' % s ' cannot be deleted . " , dir . getPath ( ) ) ) ; 
 + } 
 + if ( ! dir . mkdir ( ) ) { 
 + throw new IllegalStateException ( String . format ( " Directory ' % s ' for SyncManager cannot be created . " , 
 + dir . getPath ( ) ) ) ; 
 + } 
 + SyncManager . nativeInitializeSyncManager ( dir . getPath ( ) ) ; 
 + } catch ( IOException e ) { 
 + throw new IllegalStateException ( e ) ; 
 + } 
 + } else { 
 + SyncManager . nativeInitializeSyncManager ( context . getFilesDir ( ) . getPath ( ) ) ; 
 + } 
 
 / / Configure default UserStore 
 UserStore userStore = new RealmFileUserStore ( ) ; 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 index 63ef781 . . 8e070e1 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 @ @ - 56 , 6 + 56 , 11 @ @ public class SyncManager { 
 * / 
 public static boolean skipOnlineChecking = false ; 
 
 + / * * 
 + * Set this to true to init a SyncManager with a directory named by the process ID . This is useful for 
 + * integration tests which are emulating multiple sync client by using multiple processes . 
 + * / 
 + public static boolean separatedDirForSyncManager = false ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / RemoteIntegrationTestService . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / RemoteIntegrationTestService . java 
 index 872b108 . . d80d79a 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / RemoteIntegrationTestService . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / utils / RemoteIntegrationTestService . java 
 @ @ - 24 , 5 + 24 , 6 @ @ public class RemoteIntegrationTestService extends RemoteTestService { 
 public RemoteIntegrationTestService ( ) { 
 super ( ) ; 
 SyncManager . Debug . skipOnlineChecking = true ; 
 + SyncManager . Debug . separatedDirForSyncManager = true ; 
 } 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 index 27f92b0 . . 116fab3 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncUserTests . java 
 @ @ - 57 , 7 + 57 , 7 @ @ public class SyncUserTests { 
 @ BeforeClass 
 public static void initUserStore ( ) { 
 Realm . init ( InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ) ; 
 - UserStore userStore = new RealmFileUserStore ( InstrumentationRegistry . getTargetContext ( ) . getFilesDir ( ) . getPath ( ) ) ; 
 + UserStore userStore = new RealmFileUserStore ( ) ; 
 SyncManager . setUserStore ( userStore ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ RealmFileUserStore . cpp b / realm / realm - library / src / main / cpp / io _ realm _ RealmFileUserStore . cpp 
 index e4a0a4a . . 076fb54 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ RealmFileUserStore . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ RealmFileUserStore . cpp 
 @ @ - 85 , 16 + 85 , 6 @ @ Java _ io _ realm _ RealmFileUserStore _ nativeLogoutUser ( JNIEnv * env , jclass , jstring 
 } 
 
 
 - JNIEXPORT void JNICALL 
 - Java _ io _ realm _ RealmFileUserStore _ nativeConfigureMetaDataSystem ( JNIEnv * env , jclass , jstring baseFile ) 
 - { 
 - TR _ ENTER ( ) 
 - try { 
 - JStringAccessor base _ file _ path ( env , baseFile ) ; / / throws 
 - SyncManager : : shared ( ) . configure _ file _ system ( base _ file _ path , SyncManager : : MetadataMode : : NoEncryption ) ; 
 - } CATCH _ STD ( ) 
 - } 
 - 
 JNIEXPORT jobjectArray JNICALL 
 Java _ io _ realm _ RealmFileUserStore _ nativeGetAllUsers ( JNIEnv * env , jclass ) 
 { 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 index 5ab8d01 . . fcf681a 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / ObjectServer . java 
 @ @ - 38 , 14 + 38 , 14 @ @ class ObjectServer { 
 } catch ( Exception ignore ) { 
 } 
 
 - / / Configure default UserStore 
 - UserStore userStore = new RealmFileUserStore ( context . getFilesDir ( ) . getPath ( ) ) ; 
 - 
 - SyncManager . init ( appId , userStore ) ; 
 - 
 / / init the " sync _ manager . cpp " metadata Realm , this is also needed later , when re try 
 / / to schedule a client reset . in realm - java # master this is already done , when initialising 
 / / the RealmFileUserStore ( not available now on releases ) 
 SyncManager . nativeConfigureMetaDataSystem ( context . getFilesDir ( ) . getPath ( ) ) ; 
 + 
 + / / Configure default UserStore 
 + UserStore userStore = new RealmFileUserStore ( ) ; 
 + 
 + SyncManager . init ( appId , userStore ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / RealmFileUserStore . java b / realm / realm - library / src / objectServer / java / io / realm / RealmFileUserStore . java 
 index 9ba14bf . . 61a3ad2 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / RealmFileUserStore . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / RealmFileUserStore . java 
 @ @ - 24 , 9 + 24 , 6 @ @ import java . util . Collections ; 
 * A User Store backed by a Realm file to store user . 
 * / 
 public class RealmFileUserStore implements UserStore { 
 - protected RealmFileUserStore ( String path ) { 
 - nativeConfigureMetaDataSystem ( path ) ; 
 - } 
 
 / * * 
 * { @ inheritDoc } 
 @ @ - 87 , 9 + 84 , 6 @ @ public class RealmFileUserStore implements UserStore { 
 return SyncUser . fromJson ( userJson ) ; 
 } 
 
 - / / init and load the Metadata Realm containing SyncUsers 
 - protected static native void nativeConfigureMetaDataSystem ( String baseFile ) ; 
 - 
 / / returns json data ( token ) of the current logged in user 
 protected static native String nativeGetCurrentUser ( ) ; 

