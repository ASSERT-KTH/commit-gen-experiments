BLEU SCORE: 0.034353182138500235

TEST MSG: Fix cleared check in ObserverPairList iteration
GENERATED MSG: Links to other classes and methods .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java b / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java <nl> index b3d3d2d . . 5ac8e05 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java <nl> @ @ - 22 , 8 + 22 , 8 @ @ import java . util . List ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> <nl> / * * <nl> - * An ObserverPairList holds a list of ObserverPairs . An { @ link ObserverPair } is pair contains an observer and a <nl> - * listener . The observer is the object to react to the changes through the listener . The observer is saved as an weak <nl> + * An ObserverPairList holds a list of ObserverPairs . An { @ link ObserverPair } is pair containing an observer and a <nl> + * listener . The observer is the object to react to the changes through the listener . The observer is saved as a weak <nl> * reference in the pair to control the life cycle of the listener . When the observer gets GCed , the corresponding pair <nl> * will be removed from the list . So DO NOT keep a strong reference to the observer in the subclass of listener since it <nl> * will cause leaks ! <nl> @ @ - 98 , 13 + 98 , 15 @ @ public class ObserverPairList < T extends ObserverPairList . ObserverPair > { <nl> * / <nl> public void foreach ( Callback < T > callback ) { <nl> for ( T pair : pairs ) { <nl> - Object observer = pair . observerRef . get ( ) ; <nl> - if ( observer = = null ) { <nl> - pairs . remove ( pair ) ; <nl> - } else if ( cleared ) { <nl> + if ( cleared ) { <nl> break ; <nl> - } else if ( ! pair . removed ) { <nl> - callback . onCalled ( pair , observer ) ; <nl> + } else { <nl> + Object observer = pair . observerRef . get ( ) ; <nl> + if ( observer = = null ) { <nl> + pairs . remove ( pair ) ; <nl> + } else if ( ! pair . removed ) { <nl> + callback . onCalled ( pair , observer ) ; <nl> + } <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 2b5dbf0 . . d5491a0 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 139 , 7 + 139 , 7 @ @ public class Realm { <nl> / * * <nl> * Realm static constructor for the default realm " default . realm " <nl> * <nl> - * @ param context an Android context <nl> + * @ param context an Android { @ link android . content . Context } <nl> * @ return an instance of the Realm class <nl> * @ throws RealmMigrationNeededException The model classes have been changed and the Realm <nl> * must be migrated <nl> @ @ - 153 , 7 + 153 , 7 @ @ public class Realm { <nl> / * * <nl> * Realm static constructor <nl> * <nl> - * @ param context an Android context <nl> + * @ param context an Android { @ link android . content . Context } <nl> * @ param fileName the name of the file to save the Realm to <nl> * @ return an instance of the Realm class <nl> * @ throws RealmMigrationNeededException The model classes have been changed and the Realm <nl> @ @ - 169 , 7 + 169 , 7 @ @ public class Realm { <nl> / * * <nl> * Realm static constructor <nl> * <nl> - * @ param context an Android context <nl> + * @ param context an Android { @ link android . content . Context } <nl> * @ param key a 32 - byte encryption key <nl> * @ return an instance of the Realm class <nl> * @ throws RealmMigrationNeededException The model classes have been changed and the Realm <nl> @ @ - 185 , 7 + 185 , 7 @ @ public class Realm { <nl> / * * <nl> * Realm static constructor <nl> * <nl> - * @ param context an Android context <nl> + * @ param context an Android { @ link android . content . Context } <nl> * @ param fileName the name of the file to save the Realm to <nl> * @ param key a 32 - byte encryption key <nl> * @ return an instance of the Realm class <nl> @ @ - 563 , 16 + 563 , 16 @ @ public class Realm { <nl> / / } <nl> <nl> / * * <nl> - * Starts a write transaction , this must be closed with commitTransaction ( ) or aborted <nl> - * by cancelTransaction ( ) . Write transactions are used to atomically create , update and delete <nl> - * objects within a realm . <nl> - * <nl> - * Before beginning the write transaction , beginTransaction ( ) updates the <nl> + * Starts a write transaction , this must be closed with { @ link io . realm . Realm # commitTransaction ( ) } <nl> + * or aborted by @ { link io . realm . Realm # cancelTransaction ( ) } . Write transactions are used to <nl> + * atomically create , update and delete objects within a realm . <nl> + * < p / > <nl> + * Before beginning the write transaction , @ { link io . realm . Realm # beginTransaction ( ) } updates the <nl> * realm in the case of pending updates from other threads . <nl> - * <nl> + * < p / > <nl> * Notice : it is not possible to nest write transactions . If you start a write <nl> * transaction within a write transaction an exception is thrown . <nl> - * <nl> + * < p / > <nl> * @ throws java . lang . IllegalStateException If already in a write transaction . <nl> * <nl> * / <nl> @ @ - 581 , 9 + 581 , 10 @ @ public class Realm { <nl> } <nl> <nl> / * * <nl> - * All changes since beginTransaction ( ) are persisted to disk and the realm reverts back to being read - only , <nl> - * An event is sent to notify all other realm instances that a change has occured . <nl> - * When the event is received , the other realms will get their objects and RealmResults updated to reflect <nl> + * All changes since @ { link io . realm . Realm # beginTransaction ( ) } are persisted to disk and the <nl> + * realm reverts back to being read - only . An event is sent to notify all other realm instances <nl> + * that a change has occurred . When the event is received , the other realms will get their <nl> + * objects and @ { link io . realm . RealmResults } updated to reflect <nl> * the changes from this commit . <nl> * <nl> * @ throws java . lang . IllegalStateException If the write transaction is in an invalid state . <nl> @ @ - 604 , 9 + 605 , 9 @ @ public class Realm { <nl> / * * <nl> * Revert all writes ( created , updated , or deleted objects ) made in the current write <nl> * transaction and end the transaction . <nl> - * <nl> + * < p / > <nl> * The realm reverts back to read - only . <nl> - * <nl> + * < p / > <nl> * Calling this when not in a write transaction will throw an exception . <nl> * <nl> * @ throws java . lang . IllegalStateException If the write transaction is an invalid state or <nl> @ @ - 617 , 7 + 618 , 7 @ @ public class Realm { <nl> } <nl> <nl> / * * <nl> - * Remove all objects of the specified class <nl> + * Remove all objects of the specified class . <nl> * <nl> * @ param classSpec The class which objects should be removed <nl> * @ throws java . lang . RuntimeException Any other error <nl> @ @ - 677 , 7 + 678 , 7 @ @ public class Realm { <nl> * Delete the Realm file from the filesystem for a custom named Realm . <nl> * The realm must be unused and closed before calling this method . <nl> * <nl> - * @ param context an Android context . <nl> + * @ param context an Android @ { { @ link android . content . Context } . <nl> * @ param fileName the name of the custom Realm ( i . e . " myCustomRealm . realm " ) . <nl> * @ return false if a file could not be deleted . The failing file will be logged . <nl> * / <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> index ccf8523 . . eb1e029 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 99 , 7 + 99 , 8 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> <nl> / * * <nl> - * Find the first object <nl> + * Find the first object . <nl> + * <nl> * @ return The first object <nl> * / <nl> public E first ( ) { <nl> @ @ - 110 , 7 + 111 , 8 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> <nl> / * * <nl> - * Find the last object <nl> + * Find the last object . <nl> + * <nl> * @ return The last object <nl> * / <nl> public E last ( ) { <nl> diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java <nl> index 85019d2 . . 7bc592a 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / src / main / java / io / realm / RealmObject . java <nl> @ @ - 23 , 11 + 23 , 11 @ @ import io . realm . annotations . RealmClass ; <nl> * In Realm you define your model classes by subclassing RealmObject and adding fields to be <nl> * persisted . You then create your objects within a Realm , and use your custom subclasses instead <nl> * of using the RealmObject class directly . <nl> - * <nl> + * < p / > <nl> * An annotation processor will create a proxy class for your RealmObject subclass . The getters and <nl> * setters should not contain any custom code of logic as they are overridden as part of the annotation <nl> * process . <nl> - * <nl> + * < p / > <nl> * @ see Realm # createObject ( Class ) <nl> * / <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index 027074f . . f7d240c 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 41 , 10 + 41 , 11 @ @ public class RealmQuery < E extends RealmObject > { <nl> private static final String LINK _ NOT _ SUPPORTED _ METHOD = " ' % s ' is not supported for link queries " ; <nl> <nl> / * * <nl> - * Creating a RealmQuery instance <nl> - * @ param realm The realm to query within <nl> - * @ param clazz The class to query <nl> - * @ throws java . lang . RuntimeException Any other error <nl> + * Creating a RealmQuery instance . <nl> + * <nl> + * @ param realm The realm to query within . <nl> + * @ param clazz The class to query . <nl> + * @ throws java . lang . RuntimeException Any other error . <nl> * / <nl> public RealmQuery ( Realm realm , Class < E > clazz ) { <nl> this . realm = realm ; <nl> @ @ - 59 , 8 + 60 , 8 @ @ public class RealmQuery < E extends RealmObject > { <nl> } <nl> <nl> / * * <nl> - * Create a RealmQuery instance from a RealmResults <nl> - * @ param realmList The RealmResults to query <nl> + * Create a RealmQuery instance from a @ { link io . realm . RealmResults } . <nl> + * @ param realmList The @ { link io . realm . RealmResults } to query <nl> * @ param clazz The class to query <nl> * @ throws java . lang . RuntimeException Any other error <nl> * / <nl> @ @ - 1040 , 7 + 1041 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> * @ return The maximum value <nl> * @ throws java . lang . UnsupportedOperationException The query is not valid ( " syntax error " ) <nl> * / <nl> - public double maximuDouble ( String fieldName ) { <nl> + public double maximumDouble ( String fieldName ) { <nl> int columnIndex = columns . get ( fieldName ) ; <nl> return this . query . maximumDouble ( columnIndex ) ; <nl> } <nl> @ @ - 1051 , 7 + 1052 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> * @ return The maximum value <nl> * @ throws java . lang . UnsupportedOperationException The query is not valid ( " syntax error " ) <nl> * / <nl> - public float maximuFloat ( String fieldName ) { <nl> + public float maximumFloat ( String fieldName ) { <nl> int columnIndex = columns . get ( fieldName ) ; <nl> return this . query . maximumFloat ( columnIndex ) ; <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java <nl> index bf93ba6 . . c15d258 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / src / main / java / io / realm / RealmResults . java <nl> @ @ - 74 , 7 + 74 , 8 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; <nl> <nl> / * * <nl> - * Returns a typed RealmQuery , which can be used to query for specific objects of this type <nl> + * Returns a typed @ { link io . realm . RealmQuery } , which can be used to query for specific <nl> + * objects of this type . <nl> * <nl> * @ return A typed RealmQuery <nl> * @ see io . realm . RealmQuery <nl> @ @ - 120 , 7 + 121 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> / / Sorting <nl> <nl> / * * <nl> - * Get a sorted ( ascending ) RealmList from an existing RealmList . <nl> + * Get a sorted ( ascending ) RealmList from an existing @ { link io . realm . RealmList } . <nl> * Only fields of type boolean , short , int , long , float , double , Date , and String are supported . <nl> * <nl> * @ param fieldName The field name to sort by . <nl> @ @ - 131 , 7 + 132 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> <nl> / * * <nl> - * Get a sorted RealmList from an existing RealmList . <nl> + * Get a sorted RealmList from an existing @ { link io . realm . RealmList } . <nl> * Only fields of type boolean , short , int , long , float , double , Date , and String are supported . <nl> * <nl> * @ param fieldName The field name to sort by .

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java b / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java 
 index b3d3d2d . . 5ac8e05 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java 
 @ @ - 22 , 8 + 22 , 8 @ @ import java . util . List ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 
 / * * 
 - * An ObserverPairList holds a list of ObserverPairs . An { @ link ObserverPair } is pair contains an observer and a 
 - * listener . The observer is the object to react to the changes through the listener . The observer is saved as an weak 
 + * An ObserverPairList holds a list of ObserverPairs . An { @ link ObserverPair } is pair containing an observer and a 
 + * listener . The observer is the object to react to the changes through the listener . The observer is saved as a weak 
 * reference in the pair to control the life cycle of the listener . When the observer gets GCed , the corresponding pair 
 * will be removed from the list . So DO NOT keep a strong reference to the observer in the subclass of listener since it 
 * will cause leaks ! 
 @ @ - 98 , 13 + 98 , 15 @ @ public class ObserverPairList < T extends ObserverPairList . ObserverPair > { 
 * / 
 public void foreach ( Callback < T > callback ) { 
 for ( T pair : pairs ) { 
 - Object observer = pair . observerRef . get ( ) ; 
 - if ( observer = = null ) { 
 - pairs . remove ( pair ) ; 
 - } else if ( cleared ) { 
 + if ( cleared ) { 
 break ; 
 - } else if ( ! pair . removed ) { 
 - callback . onCalled ( pair , observer ) ; 
 + } else { 
 + Object observer = pair . observerRef . get ( ) ; 
 + if ( observer = = null ) { 
 + pairs . remove ( pair ) ; 
 + } else if ( ! pair . removed ) { 
 + callback . onCalled ( pair , observer ) ; 
 + } 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 2b5dbf0 . . d5491a0 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 139 , 7 + 139 , 7 @ @ public class Realm { 
 / * * 
 * Realm static constructor for the default realm " default . realm " 
 * 
 - * @ param context an Android context 
 + * @ param context an Android { @ link android . content . Context } 
 * @ return an instance of the Realm class 
 * @ throws RealmMigrationNeededException The model classes have been changed and the Realm 
 * must be migrated 
 @ @ - 153 , 7 + 153 , 7 @ @ public class Realm { 
 / * * 
 * Realm static constructor 
 * 
 - * @ param context an Android context 
 + * @ param context an Android { @ link android . content . Context } 
 * @ param fileName the name of the file to save the Realm to 
 * @ return an instance of the Realm class 
 * @ throws RealmMigrationNeededException The model classes have been changed and the Realm 
 @ @ - 169 , 7 + 169 , 7 @ @ public class Realm { 
 / * * 
 * Realm static constructor 
 * 
 - * @ param context an Android context 
 + * @ param context an Android { @ link android . content . Context } 
 * @ param key a 32 - byte encryption key 
 * @ return an instance of the Realm class 
 * @ throws RealmMigrationNeededException The model classes have been changed and the Realm 
 @ @ - 185 , 7 + 185 , 7 @ @ public class Realm { 
 / * * 
 * Realm static constructor 
 * 
 - * @ param context an Android context 
 + * @ param context an Android { @ link android . content . Context } 
 * @ param fileName the name of the file to save the Realm to 
 * @ param key a 32 - byte encryption key 
 * @ return an instance of the Realm class 
 @ @ - 563 , 16 + 563 , 16 @ @ public class Realm { 
 / / } 
 
 / * * 
 - * Starts a write transaction , this must be closed with commitTransaction ( ) or aborted 
 - * by cancelTransaction ( ) . Write transactions are used to atomically create , update and delete 
 - * objects within a realm . 
 - * 
 - * Before beginning the write transaction , beginTransaction ( ) updates the 
 + * Starts a write transaction , this must be closed with { @ link io . realm . Realm # commitTransaction ( ) } 
 + * or aborted by @ { link io . realm . Realm # cancelTransaction ( ) } . Write transactions are used to 
 + * atomically create , update and delete objects within a realm . 
 + * < p / > 
 + * Before beginning the write transaction , @ { link io . realm . Realm # beginTransaction ( ) } updates the 
 * realm in the case of pending updates from other threads . 
 - * 
 + * < p / > 
 * Notice : it is not possible to nest write transactions . If you start a write 
 * transaction within a write transaction an exception is thrown . 
 - * 
 + * < p / > 
 * @ throws java . lang . IllegalStateException If already in a write transaction . 
 * 
 * / 
 @ @ - 581 , 9 + 581 , 10 @ @ public class Realm { 
 } 
 
 / * * 
 - * All changes since beginTransaction ( ) are persisted to disk and the realm reverts back to being read - only , 
 - * An event is sent to notify all other realm instances that a change has occured . 
 - * When the event is received , the other realms will get their objects and RealmResults updated to reflect 
 + * All changes since @ { link io . realm . Realm # beginTransaction ( ) } are persisted to disk and the 
 + * realm reverts back to being read - only . An event is sent to notify all other realm instances 
 + * that a change has occurred . When the event is received , the other realms will get their 
 + * objects and @ { link io . realm . RealmResults } updated to reflect 
 * the changes from this commit . 
 * 
 * @ throws java . lang . IllegalStateException If the write transaction is in an invalid state . 
 @ @ - 604 , 9 + 605 , 9 @ @ public class Realm { 
 / * * 
 * Revert all writes ( created , updated , or deleted objects ) made in the current write 
 * transaction and end the transaction . 
 - * 
 + * < p / > 
 * The realm reverts back to read - only . 
 - * 
 + * < p / > 
 * Calling this when not in a write transaction will throw an exception . 
 * 
 * @ throws java . lang . IllegalStateException If the write transaction is an invalid state or 
 @ @ - 617 , 7 + 618 , 7 @ @ public class Realm { 
 } 
 
 / * * 
 - * Remove all objects of the specified class 
 + * Remove all objects of the specified class . 
 * 
 * @ param classSpec The class which objects should be removed 
 * @ throws java . lang . RuntimeException Any other error 
 @ @ - 677 , 7 + 678 , 7 @ @ public class Realm { 
 * Delete the Realm file from the filesystem for a custom named Realm . 
 * The realm must be unused and closed before calling this method . 
 * 
 - * @ param context an Android context . 
 + * @ param context an Android @ { { @ link android . content . Context } . 
 * @ param fileName the name of the custom Realm ( i . e . " myCustomRealm . realm " ) . 
 * @ return false if a file could not be deleted . The failing file will be logged . 
 * / 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 index ccf8523 . . eb1e029 100644 
 - - - a / realm / src / main / java / io / realm / RealmList . java 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 99 , 7 + 99 , 8 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 } 
 
 / * * 
 - * Find the first object 
 + * Find the first object . 
 + * 
 * @ return The first object 
 * / 
 public E first ( ) { 
 @ @ - 110 , 7 + 111 , 8 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 } 
 
 / * * 
 - * Find the last object 
 + * Find the last object . 
 + * 
 * @ return The last object 
 * / 
 public E last ( ) { 
 diff - - git a / realm / src / main / java / io / realm / RealmObject . java b / realm / src / main / java / io / realm / RealmObject . java 
 index 85019d2 . . 7bc592a 100644 
 - - - a / realm / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / src / main / java / io / realm / RealmObject . java 
 @ @ - 23 , 11 + 23 , 11 @ @ import io . realm . annotations . RealmClass ; 
 * In Realm you define your model classes by subclassing RealmObject and adding fields to be 
 * persisted . You then create your objects within a Realm , and use your custom subclasses instead 
 * of using the RealmObject class directly . 
 - * 
 + * < p / > 
 * An annotation processor will create a proxy class for your RealmObject subclass . The getters and 
 * setters should not contain any custom code of logic as they are overridden as part of the annotation 
 * process . 
 - * 
 + * < p / > 
 * @ see Realm # createObject ( Class ) 
 * / 
 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index 027074f . . f7d240c 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 41 , 10 + 41 , 11 @ @ public class RealmQuery < E extends RealmObject > { 
 private static final String LINK _ NOT _ SUPPORTED _ METHOD = " ' % s ' is not supported for link queries " ; 
 
 / * * 
 - * Creating a RealmQuery instance 
 - * @ param realm The realm to query within 
 - * @ param clazz The class to query 
 - * @ throws java . lang . RuntimeException Any other error 
 + * Creating a RealmQuery instance . 
 + * 
 + * @ param realm The realm to query within . 
 + * @ param clazz The class to query . 
 + * @ throws java . lang . RuntimeException Any other error . 
 * / 
 public RealmQuery ( Realm realm , Class < E > clazz ) { 
 this . realm = realm ; 
 @ @ - 59 , 8 + 60 , 8 @ @ public class RealmQuery < E extends RealmObject > { 
 } 
 
 / * * 
 - * Create a RealmQuery instance from a RealmResults 
 - * @ param realmList The RealmResults to query 
 + * Create a RealmQuery instance from a @ { link io . realm . RealmResults } . 
 + * @ param realmList The @ { link io . realm . RealmResults } to query 
 * @ param clazz The class to query 
 * @ throws java . lang . RuntimeException Any other error 
 * / 
 @ @ - 1040 , 7 + 1041 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 * @ return The maximum value 
 * @ throws java . lang . UnsupportedOperationException The query is not valid ( " syntax error " ) 
 * / 
 - public double maximuDouble ( String fieldName ) { 
 + public double maximumDouble ( String fieldName ) { 
 int columnIndex = columns . get ( fieldName ) ; 
 return this . query . maximumDouble ( columnIndex ) ; 
 } 
 @ @ - 1051 , 7 + 1052 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 * @ return The maximum value 
 * @ throws java . lang . UnsupportedOperationException The query is not valid ( " syntax error " ) 
 * / 
 - public float maximuFloat ( String fieldName ) { 
 + public float maximumFloat ( String fieldName ) { 
 int columnIndex = columns . get ( fieldName ) ; 
 return this . query . maximumFloat ( columnIndex ) ; 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java 
 index bf93ba6 . . c15d258 100644 
 - - - a / realm / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / src / main / java / io / realm / RealmResults . java 
 @ @ - 74 , 7 + 74 , 8 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; 
 
 / * * 
 - * Returns a typed RealmQuery , which can be used to query for specific objects of this type 
 + * Returns a typed @ { link io . realm . RealmQuery } , which can be used to query for specific 
 + * objects of this type . 
 * 
 * @ return A typed RealmQuery 
 * @ see io . realm . RealmQuery 
 @ @ - 120 , 7 + 121 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 / / Sorting 
 
 / * * 
 - * Get a sorted ( ascending ) RealmList from an existing RealmList . 
 + * Get a sorted ( ascending ) RealmList from an existing @ { link io . realm . RealmList } . 
 * Only fields of type boolean , short , int , long , float , double , Date , and String are supported . 
 * 
 * @ param fieldName The field name to sort by . 
 @ @ - 131 , 7 + 132 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 } 
 
 / * * 
 - * Get a sorted RealmList from an existing RealmList . 
 + * Get a sorted RealmList from an existing @ { link io . realm . RealmList } . 
 * Only fields of type boolean , short , int , long , float , double , Date , and String are supported . 
 * 
 * @ param fieldName The field name to sort by .
