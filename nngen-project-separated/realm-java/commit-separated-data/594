BLEU SCORE: 0.029381754016308166

TEST MSG: Fix s3uploads missing dependencies
GENERATED MSG: Update core to v0 . 89 . 8

TEST DIFF (one line): diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index fcb4080 . . a016047 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 267 , 6 + 267 , 19 @ @ publishing { <nl> artifact file ( " $ { rootDir } / realm - library / build / outputs / aar / realm - android - library - release . aar " ) <nl> artifact sourcesJar <nl> artifact javadocJar <nl> + <nl> + / / The publication doesn ' t know about our dependencies , so we have to manually add them to the pom <nl> + pom . withXml { <nl> + def dependenciesNode = asNode ( ) . appendNode ( ' dependencies ' ) <nl> + <nl> + / / Iterate over the compile dependencies ( we don ' t want the test ones ) , adding a < dependency > node for each <nl> + configurations . compile . allDependencies . each { <nl> + def dependencyNode = dependenciesNode . appendNode ( ' dependency ' ) <nl> + dependencyNode . appendNode ( ' groupId ' , it . group ) <nl> + dependencyNode . appendNode ( ' artifactId ' , it . name ) <nl> + dependencyNode . appendNode ( ' version ' , it . version ) <nl> + } <nl> + } <nl> } <nl> } <nl> repositories { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / User . java b / realm / realm - library / src / main / java / io / realm / User . java <nl> index 8414517 . . be2a111 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / User . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / User . java <nl> @ @ - 46 , 10 + 46 , 10 @ @ import io . realm . internal . network . LogoutResponse ; <nl> / * * <nl> * This class represents a user on the Realm Object Server . The credentials are provided by various 3rd party <nl> * providers ( Facebook , Google , etc . ) . <nl> - * < p / > <nl> + * < p > <nl> * A user can log in to the Realm Object Server , and if access is granted , it is possible to synchronize the local <nl> * and the remote Realm . Moreover , synchronization is halted when the user is logged out . <nl> - * < p / > <nl> + * < p > <nl> * It is possible to persist a user . By retrieving a user , there is no need to log in to the 3rd party provider again . <nl> * Persisting a user between sessions , the user ' s credentials are stored locally on the device , and should be treated <nl> * as sensitive data .
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index 6bda332 . . b023e5c 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 3 , 10 + 3 , 11 @ @ <nl> * Fixed a bug which might cause failure when loading the native library . <nl> * Fixed a bug which might trigger a timeout in Context . finalize ( ) . <nl> * Fixed a bug which might cause RealmObject . isValid ( ) to throw an exception if the object is deleted . <nl> - * Updated Realm core to version 0 . 89 . 7 <nl> - - fixed a potential stack overflow issue which might cause a crash when encryption was used . <nl> - - embedded crypto functions from OpenSSL into Realm dynamic lib to avoid random issues on some devices . <nl> * Fixed an issue preventing the call of listeners on refresh ( ) . <nl> + * Updated Realm core to version 0 . 89 . 8 <nl> + - Fixed a potential stack overflow issue which might cause a crash when encryption was used . <nl> + - Embedded crypto functions into Realm dynamic lib to avoid random issues on some devices . <nl> + - Throw RealmEncryptionNotSupportedException if the device doesn ' t support Realm encryption . At least one device type ( HTX One X ) contains system bugs that prevents Realm ' s encryption from functioning properly . This is now detected , and an exception is thrown when trying to open / create an encrypted Realm file . It ' s up to the application to catch this and decide if it ' s OK to proceed without encryption instead . <nl> <nl> 0 . 82 . 1 <nl> * Fixed a bug where using the wrong encryption key first caused the right key to be seen as invalid . <nl> diff - - git a / realm - jni / build . gradle b / realm - jni / build . gradle <nl> index 065ba0b . . 46de5eb 100644 <nl> - - - a / realm - jni / build . gradle <nl> + + + b / realm - jni / build . gradle <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - ext . coreVersion = ' 0 . 89 . 7 ' <nl> + ext . coreVersion = ' 0 . 89 . 8 ' <nl> ext . clang = false / / gcc is default for the NDK . It also produces smaller binaries <nl> <nl> def commonCflags = [ ' - std = c + + 11 ' , ' - ffunction - sections ' , ' - fdata - sections ' , ' - flto ' ] <nl> diff - - git a / realm - jni / src / io _ realm _ internal _ Util . cpp b / realm - jni / src / io _ realm _ internal _ Util . cpp <nl> index 77e1ce5 . . aac1a54 100644 <nl> - - - a / realm - jni / src / io _ realm _ internal _ Util . cpp <nl> + + + b / realm - jni / src / io _ realm _ internal _ Util . cpp <nl> @ @ - 102 , 7 + 102 , 6 @ @ JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Util _ nativeTestcase ( <nl> if ( dotest ) <nl> ThrowException ( env , UnsupportedOperation , " parm1 " , " parm2 " ) ; <nl> break ; <nl> - ThrowException ( env , OutOfMemory , " parm1 " , " parm2 " ) ; <nl> case OutOfMemory : <nl> expect = " io . realm . internal . OutOfMemoryError : parm1 parm2 " ; <nl> if ( dotest ) <nl> @ @ - 121 , 7 + 120 , 12 @ @ JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Util _ nativeTestcase ( <nl> case RowInvalid : <nl> expect = " java . lang . IllegalStateException : Illegal State : parm1 " ; <nl> if ( dotest ) <nl> - ThrowException ( env , TableInvalid , " parm1 " , " parm2 " ) ; <nl> + ThrowException ( env , RowInvalid , " parm1 " , " parm2 " ) ; <nl> + break ; <nl> + case EncryptionNotSupported : <nl> + expect = " io . realm . exceptions . RealmEncryptionNotSupportedException : parm1 " ; <nl> + if ( dotest ) <nl> + ThrowException ( env , EncryptionNotSupported , " parm1 " , " parm2 " ) ; <nl> break ; <nl> } <nl> if ( dotest ) { <nl> diff - - git a / realm - jni / src / util . cpp b / realm - jni / src / util . cpp <nl> index 70b22e9 . . 3028e57 100644 <nl> - - - a / realm - jni / src / util . cpp <nl> + + + b / realm - jni / src / util . cpp <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> # include < stdexcept > <nl> <nl> # include < realm / util / assert . hpp > <nl> + # include < realm / util / encryption _ not _ supported _ exception . hpp > <nl> # include " utf8 . hpp " <nl> <nl> # include " util . hpp " <nl> @ @ - 33 , 6 + 34 , 10 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) <nl> try { <nl> throw ; <nl> } <nl> + catch ( realm : : util : : EncryptionNotSupportedOnThisDevice & e ) { <nl> + ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> + ThrowException ( env , EncryptionNotSupported , ss . str ( ) ) ; <nl> + } <nl> catch ( std : : bad _ alloc & e ) { <nl> ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> ThrowException ( env , OutOfMemory , ss . str ( ) ) ; <nl> @ @ - 126 , 6 + 131 , 11 @ @ void ThrowException ( JNIEnv * env , ExceptionKind exception , const std : : string & cla <nl> jExceptionClass = env - > FindClass ( " java / lang / IllegalStateException " ) ; <nl> message = " Illegal State : " + classStr ; <nl> break ; <nl> + <nl> + case EncryptionNotSupported : <nl> + jExceptionClass = env - > FindClass ( " io / realm / exceptions / RealmEncryptionNotSupportedException " ) ; <nl> + message = classStr ; <nl> + break ; <nl> } <nl> if ( jExceptionClass ! = NULL ) { <nl> env - > ThrowNew ( jExceptionClass , message . c _ str ( ) ) ; <nl> diff - - git a / realm - jni / src / util . hpp b / realm - jni / src / util . hpp <nl> index 9023b72 . . 22dfb3f 100644 <nl> - - - a / realm - jni / src / util . hpp <nl> + + + b / realm - jni / src / util . hpp <nl> @ @ - 102 , 7 + 102 , 6 @ @ std : : string num _ to _ string ( T pNumber ) <nl> # define ROW ( x ) reinterpret _ cast < realm : : Row * > ( x ) <nl> <nl> / / Exception handling <nl> - <nl> enum ExceptionKind { <nl> ClassNotFound = 0 , <nl> NoSuchField = 1 , <nl> @ @ - 118 , 7 + 117 , 9 @ @ enum ExceptionKind { <nl> OutOfMemory = 10 , <nl> FatalError = 11 , <nl> RuntimeError = 12 , <nl> - RowInvalid = 13 <nl> + RowInvalid = 13 , <nl> + EncryptionNotSupported = 14 <nl> + / / NOTE ! ! ! ! : Please also add test cases to Util . java when introducing a new exception kind . <nl> } ; <nl> <nl> void ConvertException ( JNIEnv * env , const char * file , int line ) ; <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 8284a1c . . 22b34d9 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ import java . util . concurrent . atomic . AtomicInteger ; <nl> import io . realm . exceptions . RealmException ; <nl> import io . realm . exceptions . RealmIOException ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> + import io . realm . exceptions . RealmEncryptionNotSupportedException ; <nl> import io . realm . internal . ColumnIndices ; <nl> import io . realm . internal . ColumnType ; <nl> import io . realm . internal . ImplicitTransaction ; <nl> @ @ - 198 , 6 + 199 , 7 @ @ public final class Realm implements Closeable { <nl> * @ param configuration Configuration used to open the Realm . <nl> * @ param autoRefresh { @ code true } if Realm should auto - refresh . { @ code false } otherwise . <nl> * @ throws IllegalArgumentException if trying to open an encrypted Realm with the wrong key . <nl> + * @ throws RealmEncryptionNotSupportedException if the device doesn ' t support Realm encryption . <nl> * / <nl> private Realm ( RealmConfiguration configuration , boolean autoRefresh ) { <nl> this . threadId = Thread . currentThread ( ) . getId ( ) ; <nl> @ @ - 375 , 6 + 377 , 7 @ @ public final class Realm implements Closeable { <nl> * <nl> * @ throws RealmMigrationNeededException If no migration has been provided by the configuration and the <nl> * model classes or version has has changed so a migration is required . <nl> + * @ throws RealmEncryptionNotSupportedException if the device doesn ' t support Realm encryption . <nl> * @ see RealmConfiguration for details on how to configure a Realm . <nl> * / <nl> public static Realm getInstance ( RealmConfiguration configuration ) { <nl> diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> index 4e530e2 . . fcf0b67 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 281 , 6 + 281 , 10 @ @ public class RealmConfiguration { <nl> <nl> / * * <nl> * Sets the 64 bit key used to encrypt and decrypt the Realm file . <nl> + * < p > <nl> + * Note that a few older devices do not support the encryption used by Realm . These devices will instead throw a <nl> + * { @ link io . realm . exceptions . RealmEncryptionNotSupportedException } when the Realm is opened . See <nl> + * { @ link io . realm . exceptions . RealmEncryptionNotSupportedException } for further details . <nl> * / <nl> public Builder encryptionKey ( byte [ ] key ) { <nl> if ( key = = null ) { <nl> diff - - git a / realm / src / main / java / io / realm / exceptions / RealmEncryptionNotSupportedException . java b / realm / src / main / java / io / realm / exceptions / RealmEncryptionNotSupportedException . java <nl> new file mode 100644 <nl> index 0000000 . . 97393d1 <nl> - - - / dev / null <nl> + + + b / realm / src / main / java / io / realm / exceptions / RealmEncryptionNotSupportedException . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * <nl> + * Copyright 2015 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . exceptions ; <nl> + <nl> + / * * <nl> + * On some devices ( HTC One X for example ) , for some reason , the system doesn ' t pass the right <nl> + * parameter ( siginfo _ t . si _ addr ) to the segfault signal handler which our encryption mechanism <nl> + * relies on . Realm will try to detect if this problem exists on the device when an encrypted <nl> + * Realm is being created / opened . A RealmEncryptionNotSupportedException will be thrown if this <nl> + * problem exists which means that encryption cannot be used on this device . <nl> + * / <nl> + @ SuppressWarnings ( " unused " ) / / Thrown by JNI <nl> + public class RealmEncryptionNotSupportedException extends RuntimeException { <nl> + public RealmEncryptionNotSupportedException ( String message ) { <nl> + super ( message ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / src / main / java / io / realm / internal / Util . java b / realm / src / main / java / io / realm / internal / Util . java <nl> index 17037ad . . 0b0e611 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / Util . java <nl> + + + b / realm / src / main / java / io / realm / internal / Util . java <nl> @ @ - 56 , 7 + 56 , 8 @ @ public class Util { <nl> Exception _ OutOfMemory ( 10 ) , <nl> Exception _ FatalError ( 11 ) , <nl> Exception _ RuntimeError ( 12 ) , <nl> - Exception _ RowInvalid ( 13 ) ; <nl> + Exception _ RowInvalid ( 13 ) , <nl> + Exception _ EncryptionNotSupported ( 14 ) ; <nl> <nl> private final int nativeTestcase ; <nl> Testcase ( int nativeValue ) {

TEST DIFF:
diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index fcb4080 . . a016047 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 267 , 6 + 267 , 19 @ @ publishing { 
 artifact file ( " $ { rootDir } / realm - library / build / outputs / aar / realm - android - library - release . aar " ) 
 artifact sourcesJar 
 artifact javadocJar 
 + 
 + / / The publication doesn ' t know about our dependencies , so we have to manually add them to the pom 
 + pom . withXml { 
 + def dependenciesNode = asNode ( ) . appendNode ( ' dependencies ' ) 
 + 
 + / / Iterate over the compile dependencies ( we don ' t want the test ones ) , adding a < dependency > node for each 
 + configurations . compile . allDependencies . each { 
 + def dependencyNode = dependenciesNode . appendNode ( ' dependency ' ) 
 + dependencyNode . appendNode ( ' groupId ' , it . group ) 
 + dependencyNode . appendNode ( ' artifactId ' , it . name ) 
 + dependencyNode . appendNode ( ' version ' , it . version ) 
 + } 
 + } 
 } 
 } 
 repositories { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / User . java b / realm / realm - library / src / main / java / io / realm / User . java 
 index 8414517 . . be2a111 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / User . java 
 + + + b / realm / realm - library / src / main / java / io / realm / User . java 
 @ @ - 46 , 10 + 46 , 10 @ @ import io . realm . internal . network . LogoutResponse ; 
 / * * 
 * This class represents a user on the Realm Object Server . The credentials are provided by various 3rd party 
 * providers ( Facebook , Google , etc . ) . 
 - * < p / > 
 + * < p > 
 * A user can log in to the Realm Object Server , and if access is granted , it is possible to synchronize the local 
 * and the remote Realm . Moreover , synchronization is halted when the user is logged out . 
 - * < p / > 
 + * < p > 
 * It is possible to persist a user . By retrieving a user , there is no need to log in to the 3rd party provider again . 
 * Persisting a user between sessions , the user ' s credentials are stored locally on the device , and should be treated 
 * as sensitive data .

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index 6bda332 . . b023e5c 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 3 , 10 + 3 , 11 @ @ 
 * Fixed a bug which might cause failure when loading the native library . 
 * Fixed a bug which might trigger a timeout in Context . finalize ( ) . 
 * Fixed a bug which might cause RealmObject . isValid ( ) to throw an exception if the object is deleted . 
 - * Updated Realm core to version 0 . 89 . 7 
 - - fixed a potential stack overflow issue which might cause a crash when encryption was used . 
 - - embedded crypto functions from OpenSSL into Realm dynamic lib to avoid random issues on some devices . 
 * Fixed an issue preventing the call of listeners on refresh ( ) . 
 + * Updated Realm core to version 0 . 89 . 8 
 + - Fixed a potential stack overflow issue which might cause a crash when encryption was used . 
 + - Embedded crypto functions into Realm dynamic lib to avoid random issues on some devices . 
 + - Throw RealmEncryptionNotSupportedException if the device doesn ' t support Realm encryption . At least one device type ( HTX One X ) contains system bugs that prevents Realm ' s encryption from functioning properly . This is now detected , and an exception is thrown when trying to open / create an encrypted Realm file . It ' s up to the application to catch this and decide if it ' s OK to proceed without encryption instead . 
 
 0 . 82 . 1 
 * Fixed a bug where using the wrong encryption key first caused the right key to be seen as invalid . 
 diff - - git a / realm - jni / build . gradle b / realm - jni / build . gradle 
 index 065ba0b . . 46de5eb 100644 
 - - - a / realm - jni / build . gradle 
 + + + b / realm - jni / build . gradle 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - ext . coreVersion = ' 0 . 89 . 7 ' 
 + ext . coreVersion = ' 0 . 89 . 8 ' 
 ext . clang = false / / gcc is default for the NDK . It also produces smaller binaries 
 
 def commonCflags = [ ' - std = c + + 11 ' , ' - ffunction - sections ' , ' - fdata - sections ' , ' - flto ' ] 
 diff - - git a / realm - jni / src / io _ realm _ internal _ Util . cpp b / realm - jni / src / io _ realm _ internal _ Util . cpp 
 index 77e1ce5 . . aac1a54 100644 
 - - - a / realm - jni / src / io _ realm _ internal _ Util . cpp 
 + + + b / realm - jni / src / io _ realm _ internal _ Util . cpp 
 @ @ - 102 , 7 + 102 , 6 @ @ JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Util _ nativeTestcase ( 
 if ( dotest ) 
 ThrowException ( env , UnsupportedOperation , " parm1 " , " parm2 " ) ; 
 break ; 
 - ThrowException ( env , OutOfMemory , " parm1 " , " parm2 " ) ; 
 case OutOfMemory : 
 expect = " io . realm . internal . OutOfMemoryError : parm1 parm2 " ; 
 if ( dotest ) 
 @ @ - 121 , 7 + 120 , 12 @ @ JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Util _ nativeTestcase ( 
 case RowInvalid : 
 expect = " java . lang . IllegalStateException : Illegal State : parm1 " ; 
 if ( dotest ) 
 - ThrowException ( env , TableInvalid , " parm1 " , " parm2 " ) ; 
 + ThrowException ( env , RowInvalid , " parm1 " , " parm2 " ) ; 
 + break ; 
 + case EncryptionNotSupported : 
 + expect = " io . realm . exceptions . RealmEncryptionNotSupportedException : parm1 " ; 
 + if ( dotest ) 
 + ThrowException ( env , EncryptionNotSupported , " parm1 " , " parm2 " ) ; 
 break ; 
 } 
 if ( dotest ) { 
 diff - - git a / realm - jni / src / util . cpp b / realm - jni / src / util . cpp 
 index 70b22e9 . . 3028e57 100644 
 - - - a / realm - jni / src / util . cpp 
 + + + b / realm - jni / src / util . cpp 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 # include < stdexcept > 
 
 # include < realm / util / assert . hpp > 
 + # include < realm / util / encryption _ not _ supported _ exception . hpp > 
 # include " utf8 . hpp " 
 
 # include " util . hpp " 
 @ @ - 33 , 6 + 34 , 10 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) 
 try { 
 throw ; 
 } 
 + catch ( realm : : util : : EncryptionNotSupportedOnThisDevice & e ) { 
 + ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 + ThrowException ( env , EncryptionNotSupported , ss . str ( ) ) ; 
 + } 
 catch ( std : : bad _ alloc & e ) { 
 ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 ThrowException ( env , OutOfMemory , ss . str ( ) ) ; 
 @ @ - 126 , 6 + 131 , 11 @ @ void ThrowException ( JNIEnv * env , ExceptionKind exception , const std : : string & cla 
 jExceptionClass = env - > FindClass ( " java / lang / IllegalStateException " ) ; 
 message = " Illegal State : " + classStr ; 
 break ; 
 + 
 + case EncryptionNotSupported : 
 + jExceptionClass = env - > FindClass ( " io / realm / exceptions / RealmEncryptionNotSupportedException " ) ; 
 + message = classStr ; 
 + break ; 
 } 
 if ( jExceptionClass ! = NULL ) { 
 env - > ThrowNew ( jExceptionClass , message . c _ str ( ) ) ; 
 diff - - git a / realm - jni / src / util . hpp b / realm - jni / src / util . hpp 
 index 9023b72 . . 22dfb3f 100644 
 - - - a / realm - jni / src / util . hpp 
 + + + b / realm - jni / src / util . hpp 
 @ @ - 102 , 7 + 102 , 6 @ @ std : : string num _ to _ string ( T pNumber ) 
 # define ROW ( x ) reinterpret _ cast < realm : : Row * > ( x ) 
 
 / / Exception handling 
 - 
 enum ExceptionKind { 
 ClassNotFound = 0 , 
 NoSuchField = 1 , 
 @ @ - 118 , 7 + 117 , 9 @ @ enum ExceptionKind { 
 OutOfMemory = 10 , 
 FatalError = 11 , 
 RuntimeError = 12 , 
 - RowInvalid = 13 
 + RowInvalid = 13 , 
 + EncryptionNotSupported = 14 
 + / / NOTE ! ! ! ! : Please also add test cases to Util . java when introducing a new exception kind . 
 } ; 
 
 void ConvertException ( JNIEnv * env , const char * file , int line ) ; 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 8284a1c . . 22b34d9 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 50 , 6 + 50 , 7 @ @ import java . util . concurrent . atomic . AtomicInteger ; 
 import io . realm . exceptions . RealmException ; 
 import io . realm . exceptions . RealmIOException ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 + import io . realm . exceptions . RealmEncryptionNotSupportedException ; 
 import io . realm . internal . ColumnIndices ; 
 import io . realm . internal . ColumnType ; 
 import io . realm . internal . ImplicitTransaction ; 
 @ @ - 198 , 6 + 199 , 7 @ @ public final class Realm implements Closeable { 
 * @ param configuration Configuration used to open the Realm . 
 * @ param autoRefresh { @ code true } if Realm should auto - refresh . { @ code false } otherwise . 
 * @ throws IllegalArgumentException if trying to open an encrypted Realm with the wrong key . 
 + * @ throws RealmEncryptionNotSupportedException if the device doesn ' t support Realm encryption . 
 * / 
 private Realm ( RealmConfiguration configuration , boolean autoRefresh ) { 
 this . threadId = Thread . currentThread ( ) . getId ( ) ; 
 @ @ - 375 , 6 + 377 , 7 @ @ public final class Realm implements Closeable { 
 * 
 * @ throws RealmMigrationNeededException If no migration has been provided by the configuration and the 
 * model classes or version has has changed so a migration is required . 
 + * @ throws RealmEncryptionNotSupportedException if the device doesn ' t support Realm encryption . 
 * @ see RealmConfiguration for details on how to configure a Realm . 
 * / 
 public static Realm getInstance ( RealmConfiguration configuration ) { 
 diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java 
 index 4e530e2 . . fcf0b67 100644 
 - - - a / realm / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 281 , 6 + 281 , 10 @ @ public class RealmConfiguration { 
 
 / * * 
 * Sets the 64 bit key used to encrypt and decrypt the Realm file . 
 + * < p > 
 + * Note that a few older devices do not support the encryption used by Realm . These devices will instead throw a 
 + * { @ link io . realm . exceptions . RealmEncryptionNotSupportedException } when the Realm is opened . See 
 + * { @ link io . realm . exceptions . RealmEncryptionNotSupportedException } for further details . 
 * / 
 public Builder encryptionKey ( byte [ ] key ) { 
 if ( key = = null ) { 
 diff - - git a / realm / src / main / java / io / realm / exceptions / RealmEncryptionNotSupportedException . java b / realm / src / main / java / io / realm / exceptions / RealmEncryptionNotSupportedException . java 
 new file mode 100644 
 index 0000000 . . 97393d1 
 - - - / dev / null 
 + + + b / realm / src / main / java / io / realm / exceptions / RealmEncryptionNotSupportedException . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * 
 + * Copyright 2015 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . exceptions ; 
 + 
 + / * * 
 + * On some devices ( HTC One X for example ) , for some reason , the system doesn ' t pass the right 
 + * parameter ( siginfo _ t . si _ addr ) to the segfault signal handler which our encryption mechanism 
 + * relies on . Realm will try to detect if this problem exists on the device when an encrypted 
 + * Realm is being created / opened . A RealmEncryptionNotSupportedException will be thrown if this 
 + * problem exists which means that encryption cannot be used on this device . 
 + * / 
 + @ SuppressWarnings ( " unused " ) / / Thrown by JNI 
 + public class RealmEncryptionNotSupportedException extends RuntimeException { 
 + public RealmEncryptionNotSupportedException ( String message ) { 
 + super ( message ) ; 
 + } 
 + } 
 diff - - git a / realm / src / main / java / io / realm / internal / Util . java b / realm / src / main / java / io / realm / internal / Util . java 
 index 17037ad . . 0b0e611 100644 
 - - - a / realm / src / main / java / io / realm / internal / Util . java 
 + + + b / realm / src / main / java / io / realm / internal / Util . java 
 @ @ - 56 , 7 + 56 , 8 @ @ public class Util { 
 Exception _ OutOfMemory ( 10 ) , 
 Exception _ FatalError ( 11 ) , 
 Exception _ RuntimeError ( 12 ) , 
 - Exception _ RowInvalid ( 13 ) ; 
 + Exception _ RowInvalid ( 13 ) , 
 + Exception _ EncryptionNotSupported ( 14 ) ; 
 
 private final int nativeTestcase ; 
 Testcase ( int nativeValue ) {
