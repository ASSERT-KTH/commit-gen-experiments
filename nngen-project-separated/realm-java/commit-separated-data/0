BLEU SCORE: 0.034353182138500235

TEST MSG: Add support for incremental annotation processors
GENERATED MSG: Initial commit of the current code .

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index cbb0178 . . 3924864 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 1 , 36 + 1 , 53 @ @ <nl> + # # 5 . 11 . 0 ( YYYY - MM - DD ) <nl> + <nl> + # # # Enhancements <nl> + * Added support for incremental annotation processing added in Gradle 4 . 7 . ( Issue [ # 5906 ] ( https : / / github . com / realm / realm - java / issues / 5906 ) ) . <nl> + <nl> + # # # Fixed <nl> + * None . <nl> + <nl> + # # # Compatibility <nl> + * Realm Object Server : 3 . 11 . 0 or later . <nl> + * File format : Generates Realms with format v9 ( Reads and upgrades all previous formats ) . <nl> + * APIs are backwards compatible with all previous release of realm - java in the 5 . x . y series . <nl> + <nl> + # # # Internal <nl> + * None . <nl> + <nl> + <nl> # # 5 . 10 . 1 ( YYYY - MM - DD ) <nl> <nl> - # # Enhancements <nl> - * None <nl> + # # # Enhancements <nl> + * None . <nl> <nl> - # # Fixed <nl> + # # # Fixed <nl> * Native crash happening if bulk updating a field in a ` RealmResult ` would cause the object to no longer be part of the query result . ( Issue [ # 6478 ] ( https : / / github . com / realm / realm - java / issues / 6478 ) , since 5 . 8 . 0 ) . <nl> <nl> - # # Compatibility <nl> + # # # Compatibility <nl> * Realm Object Server : 3 . 11 . 0 or later . <nl> * File format : Generates Realms with format v9 ( Reads and upgrades all previous formats ) . <nl> * APIs are backwards compatible with all previous release of realm - java in the 5 . x . y series . <nl> <nl> - # # Internal <nl> + # # # Internal <nl> * Updated to Object Store commit : cc3db611b1c10d2b890a92fa0f4b8291bc0f3ba2 <nl> <nl> <nl> # # 5 . 10 . 0 ( 2019 - 03 - 22 ) <nl> <nl> - # # Enhancements <nl> + # # # Enhancements <nl> * [ ObjectServer ] Added 4 new fields to query - based Subscriptions : ` createdAt ` , ` updatedAt ` , ` expiresAt ` and ` timeToLive ` . These make it possible to better reason about and control current subscriptions . ( Issue [ # 6453 ] ( https : / / github . com / realm / realm - java / issues / 6453 ) ) <nl> * [ ObjectServer ] Added the option of updating the query controlled by a Subscription using either ` RealmQuery . findAllAsync ( String name , boolean update ) ` , ` RealmQuery . subscribe ( String name , boolean update ) ` or ` Subscription . setQuery ( RealmQuery query ) ` . ( Issue [ # 6453 ] ( https : / / github . com / realm / realm - java / issues / 6453 ) ) <nl> * [ ObjectServer ] Added the option of setting a time - to - live for subscriptions . Setting this will automatically delete the subscription after the provided TTL has expired and the subscription hasn ' t been used . ( Issue [ # 6453 ] ( https : / / github . com / realm / realm - java / issues / 6453 ) ) <nl> <nl> - # # Fixed <nl> + # # # Fixed <nl> * Dates returned from the Realm file no longer overflow or underflow if they exceed ` Long . MAX _ VALUE ` or ` Long . MIN _ VALUE ` but instead clamp to their respective value . ( Issue [ # 2722 ] ( https : / / github . com / realm / realm - java / issues / 2722 ) ) <nl> <nl> - # # Compatibility <nl> + # # # Compatibility <nl> * Realm Object Server : 3 . 11 . 0 or later . <nl> * File format : Generates Realms with format v9 ( Reads and upgrades all previous formats ) . <nl> * APIs are backwards compatible with all previous release of realm - java in the 5 . x . y series . <nl> <nl> - # # Internal <nl> + # # # Internal <nl> * Updated to Object Store commit : e9819ed9c77ed87b5d7bed416a76cd5bcf255802 <nl> <nl> <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> index 4eba7a2 . . 5f8d53a 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ package io . realm . processor ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> - import java . util . HashSet ; <nl> import java . util . LinkedHashSet ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> @ @ - 400 , 7 + 399 , 7 @ @ public class ClassMetaData { <nl> private boolean checkRealmListType ( VariableElement field ) { <nl> / / Check for missing generic ( default back to Object ) <nl> if ( Utils . getGenericTypeQualifiedName ( field ) = = null ) { <nl> - Utils . error ( " No generic type supplied for field " , field ) ; <nl> + Utils . error ( getFieldErrorSuffix ( field ) + " No generic type supplied for field " , field ) ; <nl> return false ; <nl> } <nl> <nl> @ @ - 411 , 7 + 410 , 7 @ @ public class ClassMetaData { <nl> TypeElement elementTypeElement = ( TypeElement ) ( ( DeclaredType ) elementTypeMirror ) . asElement ( ) ; <nl> if ( elementTypeElement . getSuperclass ( ) . getKind ( ) = = TypeKind . NONE ) { <nl> Utils . error ( <nl> - " Only concrete Realm classes are allowed in RealmLists . " <nl> + getFieldErrorSuffix ( field ) + " Only concrete Realm classes are allowed in RealmLists . " <nl> + " Neither interfaces nor abstract classes are allowed . " , <nl> field ) ; <nl> return false ; <nl> @ @ - 419 , 9 + 418 , 9 @ @ public class ClassMetaData { <nl> } <nl> <nl> / / Check if the actual value class is acceptable <nl> - if ( ! validListValueTypes . contains ( elementTypeMirror ) & & ! Utils . isRealmModel ( elementTypeMirror ) ) { <nl> + if ( ! containsType ( validListValueTypes , elementTypeMirror ) & & ! Utils . isRealmModel ( elementTypeMirror ) ) { <nl> final StringBuilder messageBuilder = new StringBuilder ( <nl> - " Element type of RealmList must be a class implementing ' RealmModel ' or one of the " ) ; <nl> + getFieldErrorSuffix ( field ) + " Element type of RealmList must be a class implementing ' RealmModel ' or one of " ) ; <nl> final String separator = " , " ; <nl> for ( TypeMirror type : validListValueTypes ) { <nl> messageBuilder . append ( ' \ ' ' ) . append ( type . toString ( ) ) . append ( ' \ ' ' ) . append ( separator ) ; <nl> @ @ - 440 , 7 + 439 , 7 @ @ public class ClassMetaData { <nl> <nl> / / Check for missing generic ( default back to Object ) <nl> if ( Utils . getGenericTypeQualifiedName ( field ) = = null ) { <nl> - Utils . error ( " No generic type supplied for field " , field ) ; <nl> + Utils . error ( getFieldErrorSuffix ( field ) + " No generic type supplied for field " , field ) ; <nl> return false ; <nl> } <nl> <nl> @ @ - 459 , 13 + 458 , 17 @ @ public class ClassMetaData { <nl> <nl> / / Check if the actual value class is acceptable <nl> if ( ! Utils . isRealmModel ( elementTypeMirror ) ) { <nl> - Utils . error ( " Element type of RealmResults must be a class implementing ' RealmModel ' . " , field ) ; <nl> + Utils . error ( getFieldErrorSuffix ( field ) + " Element type of RealmResults must be a class implementing ' RealmModel ' . " , field ) ; <nl> return false ; <nl> } <nl> <nl> return true ; <nl> } <nl> <nl> + private String getFieldErrorSuffix ( VariableElement field ) { <nl> + return javaClassName + " . " + field . getSimpleName ( ) + " : " ; <nl> + } <nl> + <nl> private boolean checkReferenceTypes ( ) { <nl> for ( VariableElement field : fields ) { <nl> if ( Utils . isRealmModel ( field ) ) { <nl> @ @ - 776 , 6 + 779 , 16 @ @ public class ClassMetaData { <nl> return false ; <nl> } <nl> <nl> + private boolean containsType ( List < TypeMirror > listOfTypes , TypeMirror type ) { <nl> + for ( int i = 0 ; i < listOfTypes . size ( ) ; i + + ) { <nl> + / / Comparing TypeMirror ' s using ` equals ( ) ` breaks when using incremental annotation processing . <nl> + if ( typeUtils . isSameType ( listOfTypes . get ( i ) , type ) ) { <nl> + return true ; <nl> + } <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> public Element getClassElement ( ) { <nl> return classType ; <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 9e3aca4 . . 8e6304e 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 622 , 26 + 622 , 30 @ @ public class RealmProxyClassGenerator { <nl> @ SuppressWarnings ( " SameParameterValue " ) String osListVariableName , <nl> @ SuppressWarnings ( " SameParameterValue " ) String valueVariableName , <nl> TypeMirror elementTypeMirror ) { <nl> - if ( elementTypeMirror = = typeMirrors . STRING _ MIRROR ) { <nl> + <nl> + Types typeUtils = processingEnvironment . getTypeUtils ( ) ; <nl> + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . STRING _ MIRROR ) ) { <nl> return osListVariableName + " . addString ( " + valueVariableName + " ) " ; <nl> } <nl> - if ( elementTypeMirror = = typeMirrors . LONG _ MIRROR | | elementTypeMirror = = typeMirrors . INTEGER _ MIRROR <nl> - | | elementTypeMirror = = typeMirrors . SHORT _ MIRROR | | elementTypeMirror = = typeMirrors . BYTE _ MIRROR ) { <nl> + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . LONG _ MIRROR ) <nl> + | | typeUtils . isSameType ( elementTypeMirror , typeMirrors . INTEGER _ MIRROR ) <nl> + | | typeUtils . isSameType ( elementTypeMirror , typeMirrors . SHORT _ MIRROR ) <nl> + | | typeUtils . isSameType ( elementTypeMirror , typeMirrors . BYTE _ MIRROR ) ) { <nl> return osListVariableName + " . addLong ( " + valueVariableName + " . longValue ( ) ) " ; <nl> } <nl> - if ( elementTypeMirror . equals ( typeMirrors . BINARY _ MIRROR ) ) { <nl> + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . BINARY _ MIRROR ) ) { <nl> return osListVariableName + " . addBinary ( " + valueVariableName + " ) " ; <nl> } <nl> - if ( elementTypeMirror = = typeMirrors . DATE _ MIRROR ) { <nl> + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . DATE _ MIRROR ) ) { <nl> return osListVariableName + " . addDate ( " + valueVariableName + " ) " ; <nl> } <nl> - if ( elementTypeMirror = = typeMirrors . BOOLEAN _ MIRROR ) { <nl> + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . BOOLEAN _ MIRROR ) ) { <nl> return osListVariableName + " . addBoolean ( " + valueVariableName + " ) " ; <nl> } <nl> - if ( elementTypeMirror = = typeMirrors . DOUBLE _ MIRROR ) { <nl> + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . DOUBLE _ MIRROR ) ) { <nl> return osListVariableName + " . addDouble ( " + valueVariableName + " . doubleValue ( ) ) " ; <nl> } <nl> - if ( elementTypeMirror = = typeMirrors . FLOAT _ MIRROR ) { <nl> + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . FLOAT _ MIRROR ) ) { <nl> return osListVariableName + " . addFloat ( " + valueVariableName + " . floatValue ( ) ) " ; <nl> } <nl> throw new RuntimeException ( " unexpected element type : " + elementTypeMirror . toString ( ) ) ; <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / TypeMirrors . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / TypeMirrors . java <nl> index 8182828 . . d6a0c84 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / TypeMirrors . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / TypeMirrors . java <nl> @ @ - 30 , 6 + 30 , 9 @ @ import javax . lang . model . util . Types ; <nl> <nl> / * * <nl> * This class provides { @ link TypeMirror } instances used in annotation processor . <nl> + * <nl> + * WARNING : Comparing type mirrors using either ` = = ` or ` equal ( ) ` can break when using incremental <nl> + * annotation processing . Always use ` Types . isSameType ( ) ` instead when comparing them . <nl> * / <nl> class TypeMirrors { <nl> final TypeMirror STRING _ MIRROR ; <nl> diff - - git a / realm / realm - annotations - processor / src / main / resources / META - INF / gradle / incremental . annotation . processors b / realm / realm - annotations - processor / src / main / resources / META - INF / gradle / incremental . annotation . processors <nl> new file mode 100644 <nl> index 0000000 . . 78b92db <nl> - - - / dev / null <nl> + + + b / realm / realm - annotations - processor / src / main / resources / META - INF / gradle / incremental . annotation . processors <nl> @ @ - 0 , 0 + 1 @ @ <nl> + io . realm . processor . RealmProcessor , aggregating <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / com / tigthdb / example / Example . java b / src / com / tigthdb / example / Example . java <nl> new file mode 100644 <nl> index 0000000 . . fea8b2c <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / example / Example . java <nl> @ @ - 0 , 0 + 1 , 84 @ @ <nl> + package com . tigthdb . example ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + import com . tigthdb . example . generated . Person ; <nl> + import com . tigthdb . example . generated . PersonTable ; <nl> + import com . tigthdb . lib . Table ; <nl> + <nl> + public class Example { <nl> + <nl> + 	 public static void main ( String [ ] args ) { <nl> + <nl> + 	 	 @ Table <nl> + 	 	 class phoneTable { <nl> + 	 	 	 String type ; <nl> + 	 	 	 String number ; <nl> + 	 	 } <nl> + <nl> + 	 	 @ Table <nl> + 	 	 class personTable { <nl> + 	 	 	 String firstName ; <nl> + 	 	 	 String lastName ; <nl> + 	 	 	 int salary ; <nl> + 	 	 	 phoneTable phones ; <nl> + 	 	 } <nl> + <nl> + 	 	 PersonTable persons = new PersonTable ( ) ; <nl> + <nl> + 	 	 Person john = persons . add ( " John " , " Doe " , 23000 ) ; <nl> + 	 	 john . phones . add ( " home " , " 123456 " ) ; <nl> + 	 	 john . phones . add ( " mobile " , " 333444 " ) ; <nl> + <nl> + 	 	 persons . insert ( 0 , " Nikolche " , " Mihajlovski " , 28000 ) ; <nl> + <nl> + 	 	 String name = persons . at ( 0 ) . firstName . get ( ) ; <nl> + 	 	 persons . at ( 1 ) . lastName . set ( " NewName " ) ; <nl> + <nl> + 	 	 persons . remove ( 0 ) ; <nl> + <nl> + 	 	 Person johnDoe = persons . firstName . is ( " John " ) . findUnique ( ) ; <nl> + <nl> + 	 	 List < Person > allRich = persons . salary . greaterThan ( 100000 ) . findAll ( ) ; <nl> + <nl> + 	 	 / / using explicit OR <nl> + 	 	 Person johnny = persons . firstName . is ( " Johnny " ) . or ( ) . salary . is ( 10000 ) . findFirst ( ) ; <nl> + <nl> + 	 	 / / using implicit AND <nl> + 	 	 Person johnnyB = persons . firstName . is ( " Johnny " ) . lastName . startsWith ( " B " ) . findUnique ( ) ; <nl> + <nl> + 	 	 persons . firstName . is ( " John " ) . findLast ( ) . salary . set ( 30000 ) ; <nl> + <nl> + 	 	 List < Person > nikolches = persons . firstName . is ( " Nikolche " ) . findAll ( ) ; <nl> + <nl> + 	 	 / / projection and aggregation of the salary <nl> + 	 	 int salarySum = persons . salary . sum ( ) ; <nl> + <nl> + 	 	 / / lazy iteration through the table - now simpler <nl> + 	 	 for ( Person person : persons ) { <nl> + 	 	 	 person . salary . set ( 50000 ) ; <nl> + 	 	 } <nl> + 	 	 <nl> + 	 	 / / using lazy list of results - as moving a cursor through a view <nl> + 	 	 for ( Person person : persons . salary . greaterThan ( 123 ) . findAll ( ) ) { <nl> + 	 	 	 <nl> + 	 	 	 System . out . println ( person ) ; <nl> + 	 	 } <nl> + 	 	 / / TODO : view . salary . max ( ) ; <nl> + <nl> + 	 	 / / Various combinations : <nl> + 	 	 <nl> + 	 	 int sum = persons . firstName . is ( " X " ) . or ( ) . salary . is ( 5 ) . salary . sum ( ) ; <nl> + 	 	 persons . firstName . is ( " Y " ) . salary . is ( 6 ) . lastName . set ( " Z " ) ; <nl> + 	 	 persons . salary . greaterThan ( 1234 ) . remove ( ) ; <nl> + <nl> + 	 	 / / TODO : <nl> + 	 	 / * <nl> + 	 	 for ( String phone : persons . phones . type . is ( " mobile " ) . findAll ( ) . phone . all ( ) ) { <nl> + 	 	 	 System . out . println ( phone ) ; <nl> + 	 	 } <nl> + 	 	 * / <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / src / com / tigthdb / example / generated / Person . java b / src / com / tigthdb / example / generated / Person . java <nl> new file mode 100644 <nl> index 0000000 . . eea3c75 <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / example / generated / Person . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . tigthdb . example . generated ; <nl> + <nl> + import com . tigthdb . lib . IntegerColumn ; <nl> + import com . tigthdb . lib . StringColumn ; <nl> + <nl> + public class Person { <nl> + <nl> + 	 public final StringColumn < Person , PersonQuery > firstName = null ; <nl> + <nl> + 	 public final StringColumn < Person , PersonQuery > lastName = null ; <nl> + <nl> + 	 public final IntegerColumn < Person , PersonQuery > salary = null ; <nl> + <nl> + 	 public final PhoneTable phones = null ; <nl> + <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / com / tigthdb / example / generated / PersonQuery . java b / src / com / tigthdb / example / generated / PersonQuery . java <nl> new file mode 100644 <nl> index 0000000 . . 9094a5d <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / example / generated / PersonQuery . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package com . tigthdb . example . generated ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import com . tigthdb . lib . IntegerColumn ; <nl> + import com . tigthdb . lib . StringColumn ; <nl> + <nl> + public class PersonQuery { <nl> + <nl> + 	 public final StringColumn < Person , PersonQuery > firstName = null ; <nl> + <nl> + 	 public final StringColumn < Person , PersonQuery > lastName = null ; <nl> + <nl> + 	 public final IntegerColumn < Person , PersonQuery > salary = null ; <nl> + <nl> + 	 public List < Person > findAll ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Person findFirst ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Person findLast ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Person or ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Person findUnique ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public long remove ( ) { <nl> + 	 	 return 0 ; <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / src / com / tigthdb / example / generated / PersonTable . java b / src / com / tigthdb / example / generated / PersonTable . java <nl> new file mode 100644 <nl> index 0000000 . . 0e289c3 <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / example / generated / PersonTable . java <nl> @ @ - 0 , 0 + 1 , 38 @ @ <nl> + package com . tigthdb . example . generated ; <nl> + <nl> + import java . util . Iterator ; <nl> + <nl> + import com . tigthdb . lib . IntegerColumn ; <nl> + import com . tigthdb . lib . StringColumn ; <nl> + <nl> + public class PersonTable implements Iterable < Person > { <nl> + <nl> + 	 public final StringColumn < Person , PersonQuery > firstName = new StringColumn < Person , PersonQuery > ( ) ; <nl> + <nl> + 	 public final StringColumn < Person , PersonQuery > lastName = new StringColumn < Person , PersonQuery > ( ) ; <nl> + <nl> + 	 public final IntegerColumn < Person , PersonQuery > salary = new IntegerColumn < Person , PersonQuery > ( ) ; <nl> + 	 <nl> + 	 public final PhoneTable phones = new PhoneTable ( ) ; <nl> + <nl> + 	 public Person add ( String firstName , String lastName , int salary ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Person insert ( long position , String firstName , String lastName , int salary ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Person at ( long position ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public void remove ( long id ) { <nl> + <nl> + 	 } <nl> + <nl> + 	 public Iterator < Person > iterator ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / src / com / tigthdb / example / generated / Phone . java b / src / com / tigthdb / example / generated / Phone . java <nl> new file mode 100644 <nl> index 0000000 . . 54120c8 <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / example / generated / Phone . java <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + package com . tigthdb . example . generated ; <nl> + <nl> + import com . tigthdb . lib . StringColumn ; <nl> + <nl> + public class Phone { <nl> + <nl> + 	 public final StringColumn < Phone , PhoneQuery > type = null ; <nl> + <nl> + 	 public final StringColumn < Phone , PhoneQuery > phone = null ; <nl> + <nl> + } <nl> diff - - git a / src / com / tigthdb / example / generated / PhoneQuery . java b / src / com / tigthdb / example / generated / PhoneQuery . java <nl> new file mode 100644 <nl> index 0000000 . . 5591398 <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / example / generated / PhoneQuery . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package com . tigthdb . example . generated ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import com . tigthdb . lib . StringColumn ; <nl> + <nl> + public class PhoneQuery { <nl> + <nl> + 	 public final StringColumn < Phone , PhoneQuery > type = null ; <nl> + <nl> + 	 public final StringColumn < Phone , PhoneQuery > phone = null ; <nl> + <nl> + 	 public List < Phone > findAll ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Phone findFirst ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Phone findLast ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Phone or ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Phone findUnique ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public long remove ( ) { <nl> + 	 	 return 0 ; <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / src / com / tigthdb / example / generated / PhoneTable . java b / src / com / tigthdb / example / generated / PhoneTable . java <nl> new file mode 100644 <nl> index 0000000 . . d437f59 <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / example / generated / PhoneTable . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . tigthdb . example . generated ; <nl> + <nl> + import java . util . Iterator ; <nl> + <nl> + import com . tigthdb . lib . StringColumn ; <nl> + <nl> + public class PhoneTable implements Iterable < Phone > { <nl> + <nl> + 	 public final StringColumn < Phone , PhoneQuery > type = new StringColumn < Phone , PhoneQuery > ( ) ; <nl> + <nl> + 	 public final StringColumn < Phone , PhoneQuery > number = new StringColumn < Phone , PhoneQuery > ( ) ; <nl> + <nl> + 	 public Phone add ( String type , String number ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Phone insert ( long position , String type , String number ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public Phone at ( long position ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public void remove ( long id ) { <nl> + <nl> + 	 } <nl> + <nl> + 	 public Iterator < Phone > iterator ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / src / com / tigthdb / lib / AbstractColumn . java b / src / com / tigthdb / lib / AbstractColumn . java <nl> new file mode 100644 <nl> index 0000000 . . 0dfd174 <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / lib / AbstractColumn . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + package com . tigthdb . lib ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + public class AbstractColumn < T , M > { <nl> + <nl> + 	 public T get ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public List < T > getAll ( ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public void set ( T value ) { <nl> + <nl> + 	 } <nl> + <nl> + 	 public M is ( T value ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / src / com / tigthdb / lib / IntegerColumn . java b / src / com / tigthdb / lib / IntegerColumn . java <nl> new file mode 100644 <nl> index 0000000 . . 95a3c6f <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / lib / IntegerColumn . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . tigthdb . lib ; <nl> + <nl> + public class IntegerColumn < T , M > extends AbstractColumn < Integer , M > { <nl> + <nl> + 	 public M greaterThan ( int value ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + 	 public int sum ( ) { <nl> + 	 	 return 0 ; <nl> + 	 } <nl> + <nl> + 	 public int average ( ) { <nl> + 	 	 return 0 ; <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / src / com / tigthdb / lib / StringColumn . java b / src / com / tigthdb / lib / StringColumn . java <nl> new file mode 100644 <nl> index 0000000 . . 047add1 <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / lib / StringColumn . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . tigthdb . lib ; <nl> + <nl> + public class StringColumn < T , M > extends AbstractColumn < String , M > { <nl> + <nl> + 	 public M startsWith ( String value ) { <nl> + 	 	 return null ; <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / src / com / tigthdb / lib / Table . java b / src / com / tigthdb / lib / Table . java <nl> new file mode 100644 <nl> index 0000000 . . 39422d4 <nl> - - - / dev / null <nl> + + + b / src / com / tigthdb / lib / Table . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + package com . tigthdb . lib ; <nl> + <nl> + public @ interface Table { <nl> + <nl> + }

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index cbb0178 . . 3924864 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 1 , 36 + 1 , 53 @ @ 
 + # # 5 . 11 . 0 ( YYYY - MM - DD ) 
 + 
 + # # # Enhancements 
 + * Added support for incremental annotation processing added in Gradle 4 . 7 . ( Issue [ # 5906 ] ( https : / / github . com / realm / realm - java / issues / 5906 ) ) . 
 + 
 + # # # Fixed 
 + * None . 
 + 
 + # # # Compatibility 
 + * Realm Object Server : 3 . 11 . 0 or later . 
 + * File format : Generates Realms with format v9 ( Reads and upgrades all previous formats ) . 
 + * APIs are backwards compatible with all previous release of realm - java in the 5 . x . y series . 
 + 
 + # # # Internal 
 + * None . 
 + 
 + 
 # # 5 . 10 . 1 ( YYYY - MM - DD ) 
 
 - # # Enhancements 
 - * None 
 + # # # Enhancements 
 + * None . 
 
 - # # Fixed 
 + # # # Fixed 
 * Native crash happening if bulk updating a field in a ` RealmResult ` would cause the object to no longer be part of the query result . ( Issue [ # 6478 ] ( https : / / github . com / realm / realm - java / issues / 6478 ) , since 5 . 8 . 0 ) . 
 
 - # # Compatibility 
 + # # # Compatibility 
 * Realm Object Server : 3 . 11 . 0 or later . 
 * File format : Generates Realms with format v9 ( Reads and upgrades all previous formats ) . 
 * APIs are backwards compatible with all previous release of realm - java in the 5 . x . y series . 
 
 - # # Internal 
 + # # # Internal 
 * Updated to Object Store commit : cc3db611b1c10d2b890a92fa0f4b8291bc0f3ba2 
 
 
 # # 5 . 10 . 0 ( 2019 - 03 - 22 ) 
 
 - # # Enhancements 
 + # # # Enhancements 
 * [ ObjectServer ] Added 4 new fields to query - based Subscriptions : ` createdAt ` , ` updatedAt ` , ` expiresAt ` and ` timeToLive ` . These make it possible to better reason about and control current subscriptions . ( Issue [ # 6453 ] ( https : / / github . com / realm / realm - java / issues / 6453 ) ) 
 * [ ObjectServer ] Added the option of updating the query controlled by a Subscription using either ` RealmQuery . findAllAsync ( String name , boolean update ) ` , ` RealmQuery . subscribe ( String name , boolean update ) ` or ` Subscription . setQuery ( RealmQuery query ) ` . ( Issue [ # 6453 ] ( https : / / github . com / realm / realm - java / issues / 6453 ) ) 
 * [ ObjectServer ] Added the option of setting a time - to - live for subscriptions . Setting this will automatically delete the subscription after the provided TTL has expired and the subscription hasn ' t been used . ( Issue [ # 6453 ] ( https : / / github . com / realm / realm - java / issues / 6453 ) ) 
 
 - # # Fixed 
 + # # # Fixed 
 * Dates returned from the Realm file no longer overflow or underflow if they exceed ` Long . MAX _ VALUE ` or ` Long . MIN _ VALUE ` but instead clamp to their respective value . ( Issue [ # 2722 ] ( https : / / github . com / realm / realm - java / issues / 2722 ) ) 
 
 - # # Compatibility 
 + # # # Compatibility 
 * Realm Object Server : 3 . 11 . 0 or later . 
 * File format : Generates Realms with format v9 ( Reads and upgrades all previous formats ) . 
 * APIs are backwards compatible with all previous release of realm - java in the 5 . x . y series . 
 
 - # # Internal 
 + # # # Internal 
 * Updated to Object Store commit : e9819ed9c77ed87b5d7bed416a76cd5bcf255802 
 
 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 index 4eba7a2 . . 5f8d53a 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 @ @ - 19 , 7 + 19 , 6 @ @ package io . realm . processor ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 - import java . util . HashSet ; 
 import java . util . LinkedHashSet ; 
 import java . util . List ; 
 import java . util . Locale ; 
 @ @ - 400 , 7 + 399 , 7 @ @ public class ClassMetaData { 
 private boolean checkRealmListType ( VariableElement field ) { 
 / / Check for missing generic ( default back to Object ) 
 if ( Utils . getGenericTypeQualifiedName ( field ) = = null ) { 
 - Utils . error ( " No generic type supplied for field " , field ) ; 
 + Utils . error ( getFieldErrorSuffix ( field ) + " No generic type supplied for field " , field ) ; 
 return false ; 
 } 
 
 @ @ - 411 , 7 + 410 , 7 @ @ public class ClassMetaData { 
 TypeElement elementTypeElement = ( TypeElement ) ( ( DeclaredType ) elementTypeMirror ) . asElement ( ) ; 
 if ( elementTypeElement . getSuperclass ( ) . getKind ( ) = = TypeKind . NONE ) { 
 Utils . error ( 
 - " Only concrete Realm classes are allowed in RealmLists . " 
 + getFieldErrorSuffix ( field ) + " Only concrete Realm classes are allowed in RealmLists . " 
 + " Neither interfaces nor abstract classes are allowed . " , 
 field ) ; 
 return false ; 
 @ @ - 419 , 9 + 418 , 9 @ @ public class ClassMetaData { 
 } 
 
 / / Check if the actual value class is acceptable 
 - if ( ! validListValueTypes . contains ( elementTypeMirror ) & & ! Utils . isRealmModel ( elementTypeMirror ) ) { 
 + if ( ! containsType ( validListValueTypes , elementTypeMirror ) & & ! Utils . isRealmModel ( elementTypeMirror ) ) { 
 final StringBuilder messageBuilder = new StringBuilder ( 
 - " Element type of RealmList must be a class implementing ' RealmModel ' or one of the " ) ; 
 + getFieldErrorSuffix ( field ) + " Element type of RealmList must be a class implementing ' RealmModel ' or one of " ) ; 
 final String separator = " , " ; 
 for ( TypeMirror type : validListValueTypes ) { 
 messageBuilder . append ( ' \ ' ' ) . append ( type . toString ( ) ) . append ( ' \ ' ' ) . append ( separator ) ; 
 @ @ - 440 , 7 + 439 , 7 @ @ public class ClassMetaData { 
 
 / / Check for missing generic ( default back to Object ) 
 if ( Utils . getGenericTypeQualifiedName ( field ) = = null ) { 
 - Utils . error ( " No generic type supplied for field " , field ) ; 
 + Utils . error ( getFieldErrorSuffix ( field ) + " No generic type supplied for field " , field ) ; 
 return false ; 
 } 
 
 @ @ - 459 , 13 + 458 , 17 @ @ public class ClassMetaData { 
 
 / / Check if the actual value class is acceptable 
 if ( ! Utils . isRealmModel ( elementTypeMirror ) ) { 
 - Utils . error ( " Element type of RealmResults must be a class implementing ' RealmModel ' . " , field ) ; 
 + Utils . error ( getFieldErrorSuffix ( field ) + " Element type of RealmResults must be a class implementing ' RealmModel ' . " , field ) ; 
 return false ; 
 } 
 
 return true ; 
 } 
 
 + private String getFieldErrorSuffix ( VariableElement field ) { 
 + return javaClassName + " . " + field . getSimpleName ( ) + " : " ; 
 + } 
 + 
 private boolean checkReferenceTypes ( ) { 
 for ( VariableElement field : fields ) { 
 if ( Utils . isRealmModel ( field ) ) { 
 @ @ - 776 , 6 + 779 , 16 @ @ public class ClassMetaData { 
 return false ; 
 } 
 
 + private boolean containsType ( List < TypeMirror > listOfTypes , TypeMirror type ) { 
 + for ( int i = 0 ; i < listOfTypes . size ( ) ; i + + ) { 
 + / / Comparing TypeMirror ' s using ` equals ( ) ` breaks when using incremental annotation processing . 
 + if ( typeUtils . isSameType ( listOfTypes . get ( i ) , type ) ) { 
 + return true ; 
 + } 
 + } 
 + return false ; 
 + } 
 + 
 public Element getClassElement ( ) { 
 return classType ; 
 } 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 9e3aca4 . . 8e6304e 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 622 , 26 + 622 , 30 @ @ public class RealmProxyClassGenerator { 
 @ SuppressWarnings ( " SameParameterValue " ) String osListVariableName , 
 @ SuppressWarnings ( " SameParameterValue " ) String valueVariableName , 
 TypeMirror elementTypeMirror ) { 
 - if ( elementTypeMirror = = typeMirrors . STRING _ MIRROR ) { 
 + 
 + Types typeUtils = processingEnvironment . getTypeUtils ( ) ; 
 + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . STRING _ MIRROR ) ) { 
 return osListVariableName + " . addString ( " + valueVariableName + " ) " ; 
 } 
 - if ( elementTypeMirror = = typeMirrors . LONG _ MIRROR | | elementTypeMirror = = typeMirrors . INTEGER _ MIRROR 
 - | | elementTypeMirror = = typeMirrors . SHORT _ MIRROR | | elementTypeMirror = = typeMirrors . BYTE _ MIRROR ) { 
 + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . LONG _ MIRROR ) 
 + | | typeUtils . isSameType ( elementTypeMirror , typeMirrors . INTEGER _ MIRROR ) 
 + | | typeUtils . isSameType ( elementTypeMirror , typeMirrors . SHORT _ MIRROR ) 
 + | | typeUtils . isSameType ( elementTypeMirror , typeMirrors . BYTE _ MIRROR ) ) { 
 return osListVariableName + " . addLong ( " + valueVariableName + " . longValue ( ) ) " ; 
 } 
 - if ( elementTypeMirror . equals ( typeMirrors . BINARY _ MIRROR ) ) { 
 + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . BINARY _ MIRROR ) ) { 
 return osListVariableName + " . addBinary ( " + valueVariableName + " ) " ; 
 } 
 - if ( elementTypeMirror = = typeMirrors . DATE _ MIRROR ) { 
 + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . DATE _ MIRROR ) ) { 
 return osListVariableName + " . addDate ( " + valueVariableName + " ) " ; 
 } 
 - if ( elementTypeMirror = = typeMirrors . BOOLEAN _ MIRROR ) { 
 + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . BOOLEAN _ MIRROR ) ) { 
 return osListVariableName + " . addBoolean ( " + valueVariableName + " ) " ; 
 } 
 - if ( elementTypeMirror = = typeMirrors . DOUBLE _ MIRROR ) { 
 + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . DOUBLE _ MIRROR ) ) { 
 return osListVariableName + " . addDouble ( " + valueVariableName + " . doubleValue ( ) ) " ; 
 } 
 - if ( elementTypeMirror = = typeMirrors . FLOAT _ MIRROR ) { 
 + if ( typeUtils . isSameType ( elementTypeMirror , typeMirrors . FLOAT _ MIRROR ) ) { 
 return osListVariableName + " . addFloat ( " + valueVariableName + " . floatValue ( ) ) " ; 
 } 
 throw new RuntimeException ( " unexpected element type : " + elementTypeMirror . toString ( ) ) ; 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / TypeMirrors . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / TypeMirrors . java 
 index 8182828 . . d6a0c84 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / TypeMirrors . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / TypeMirrors . java 
 @ @ - 30 , 6 + 30 , 9 @ @ import javax . lang . model . util . Types ; 
 
 / * * 
 * This class provides { @ link TypeMirror } instances used in annotation processor . 
 + * 
 + * WARNING : Comparing type mirrors using either ` = = ` or ` equal ( ) ` can break when using incremental 
 + * annotation processing . Always use ` Types . isSameType ( ) ` instead when comparing them . 
 * / 
 class TypeMirrors { 
 final TypeMirror STRING _ MIRROR ; 
 diff - - git a / realm / realm - annotations - processor / src / main / resources / META - INF / gradle / incremental . annotation . processors b / realm / realm - annotations - processor / src / main / resources / META - INF / gradle / incremental . annotation . processors 
 new file mode 100644 
 index 0000000 . . 78b92db 
 - - - / dev / null 
 + + + b / realm / realm - annotations - processor / src / main / resources / META - INF / gradle / incremental . annotation . processors 
 @ @ - 0 , 0 + 1 @ @ 
 + io . realm . processor . RealmProcessor , aggregating 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / com / tigthdb / example / Example . java b / src / com / tigthdb / example / Example . java 
 new file mode 100644 
 index 0000000 . . fea8b2c 
 - - - / dev / null 
 + + + b / src / com / tigthdb / example / Example . java 
 @ @ - 0 , 0 + 1 , 84 @ @ 
 + package com . tigthdb . example ; 
 + 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + import com . tigthdb . example . generated . Person ; 
 + import com . tigthdb . example . generated . PersonTable ; 
 + import com . tigthdb . lib . Table ; 
 + 
 + public class Example { 
 + 
 + 	 public static void main ( String [ ] args ) { 
 + 
 + 	 	 @ Table 
 + 	 	 class phoneTable { 
 + 	 	 	 String type ; 
 + 	 	 	 String number ; 
 + 	 	 } 
 + 
 + 	 	 @ Table 
 + 	 	 class personTable { 
 + 	 	 	 String firstName ; 
 + 	 	 	 String lastName ; 
 + 	 	 	 int salary ; 
 + 	 	 	 phoneTable phones ; 
 + 	 	 } 
 + 
 + 	 	 PersonTable persons = new PersonTable ( ) ; 
 + 
 + 	 	 Person john = persons . add ( " John " , " Doe " , 23000 ) ; 
 + 	 	 john . phones . add ( " home " , " 123456 " ) ; 
 + 	 	 john . phones . add ( " mobile " , " 333444 " ) ; 
 + 
 + 	 	 persons . insert ( 0 , " Nikolche " , " Mihajlovski " , 28000 ) ; 
 + 
 + 	 	 String name = persons . at ( 0 ) . firstName . get ( ) ; 
 + 	 	 persons . at ( 1 ) . lastName . set ( " NewName " ) ; 
 + 
 + 	 	 persons . remove ( 0 ) ; 
 + 
 + 	 	 Person johnDoe = persons . firstName . is ( " John " ) . findUnique ( ) ; 
 + 
 + 	 	 List < Person > allRich = persons . salary . greaterThan ( 100000 ) . findAll ( ) ; 
 + 
 + 	 	 / / using explicit OR 
 + 	 	 Person johnny = persons . firstName . is ( " Johnny " ) . or ( ) . salary . is ( 10000 ) . findFirst ( ) ; 
 + 
 + 	 	 / / using implicit AND 
 + 	 	 Person johnnyB = persons . firstName . is ( " Johnny " ) . lastName . startsWith ( " B " ) . findUnique ( ) ; 
 + 
 + 	 	 persons . firstName . is ( " John " ) . findLast ( ) . salary . set ( 30000 ) ; 
 + 
 + 	 	 List < Person > nikolches = persons . firstName . is ( " Nikolche " ) . findAll ( ) ; 
 + 
 + 	 	 / / projection and aggregation of the salary 
 + 	 	 int salarySum = persons . salary . sum ( ) ; 
 + 
 + 	 	 / / lazy iteration through the table - now simpler 
 + 	 	 for ( Person person : persons ) { 
 + 	 	 	 person . salary . set ( 50000 ) ; 
 + 	 	 } 
 + 	 	 
 + 	 	 / / using lazy list of results - as moving a cursor through a view 
 + 	 	 for ( Person person : persons . salary . greaterThan ( 123 ) . findAll ( ) ) { 
 + 	 	 	 
 + 	 	 	 System . out . println ( person ) ; 
 + 	 	 } 
 + 	 	 / / TODO : view . salary . max ( ) ; 
 + 
 + 	 	 / / Various combinations : 
 + 	 	 
 + 	 	 int sum = persons . firstName . is ( " X " ) . or ( ) . salary . is ( 5 ) . salary . sum ( ) ; 
 + 	 	 persons . firstName . is ( " Y " ) . salary . is ( 6 ) . lastName . set ( " Z " ) ; 
 + 	 	 persons . salary . greaterThan ( 1234 ) . remove ( ) ; 
 + 
 + 	 	 / / TODO : 
 + 	 	 / * 
 + 	 	 for ( String phone : persons . phones . type . is ( " mobile " ) . findAll ( ) . phone . all ( ) ) { 
 + 	 	 	 System . out . println ( phone ) ; 
 + 	 	 } 
 + 	 	 * / 
 + 	 } 
 + 
 + } 
 diff - - git a / src / com / tigthdb / example / generated / Person . java b / src / com / tigthdb / example / generated / Person . java 
 new file mode 100644 
 index 0000000 . . eea3c75 
 - - - / dev / null 
 + + + b / src / com / tigthdb / example / generated / Person . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . tigthdb . example . generated ; 
 + 
 + import com . tigthdb . lib . IntegerColumn ; 
 + import com . tigthdb . lib . StringColumn ; 
 + 
 + public class Person { 
 + 
 + 	 public final StringColumn < Person , PersonQuery > firstName = null ; 
 + 
 + 	 public final StringColumn < Person , PersonQuery > lastName = null ; 
 + 
 + 	 public final IntegerColumn < Person , PersonQuery > salary = null ; 
 + 
 + 	 public final PhoneTable phones = null ; 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / src / com / tigthdb / example / generated / PersonQuery . java b / src / com / tigthdb / example / generated / PersonQuery . java 
 new file mode 100644 
 index 0000000 . . 9094a5d 
 - - - / dev / null 
 + + + b / src / com / tigthdb / example / generated / PersonQuery . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package com . tigthdb . example . generated ; 
 + 
 + import java . util . List ; 
 + 
 + import com . tigthdb . lib . IntegerColumn ; 
 + import com . tigthdb . lib . StringColumn ; 
 + 
 + public class PersonQuery { 
 + 
 + 	 public final StringColumn < Person , PersonQuery > firstName = null ; 
 + 
 + 	 public final StringColumn < Person , PersonQuery > lastName = null ; 
 + 
 + 	 public final IntegerColumn < Person , PersonQuery > salary = null ; 
 + 
 + 	 public List < Person > findAll ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Person findFirst ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Person findLast ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Person or ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Person findUnique ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public long remove ( ) { 
 + 	 	 return 0 ; 
 + 	 } 
 + 
 + } 
 diff - - git a / src / com / tigthdb / example / generated / PersonTable . java b / src / com / tigthdb / example / generated / PersonTable . java 
 new file mode 100644 
 index 0000000 . . 0e289c3 
 - - - / dev / null 
 + + + b / src / com / tigthdb / example / generated / PersonTable . java 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + package com . tigthdb . example . generated ; 
 + 
 + import java . util . Iterator ; 
 + 
 + import com . tigthdb . lib . IntegerColumn ; 
 + import com . tigthdb . lib . StringColumn ; 
 + 
 + public class PersonTable implements Iterable < Person > { 
 + 
 + 	 public final StringColumn < Person , PersonQuery > firstName = new StringColumn < Person , PersonQuery > ( ) ; 
 + 
 + 	 public final StringColumn < Person , PersonQuery > lastName = new StringColumn < Person , PersonQuery > ( ) ; 
 + 
 + 	 public final IntegerColumn < Person , PersonQuery > salary = new IntegerColumn < Person , PersonQuery > ( ) ; 
 + 	 
 + 	 public final PhoneTable phones = new PhoneTable ( ) ; 
 + 
 + 	 public Person add ( String firstName , String lastName , int salary ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Person insert ( long position , String firstName , String lastName , int salary ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Person at ( long position ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public void remove ( long id ) { 
 + 
 + 	 } 
 + 
 + 	 public Iterator < Person > iterator ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + } 
 diff - - git a / src / com / tigthdb / example / generated / Phone . java b / src / com / tigthdb / example / generated / Phone . java 
 new file mode 100644 
 index 0000000 . . 54120c8 
 - - - / dev / null 
 + + + b / src / com / tigthdb / example / generated / Phone . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package com . tigthdb . example . generated ; 
 + 
 + import com . tigthdb . lib . StringColumn ; 
 + 
 + public class Phone { 
 + 
 + 	 public final StringColumn < Phone , PhoneQuery > type = null ; 
 + 
 + 	 public final StringColumn < Phone , PhoneQuery > phone = null ; 
 + 
 + } 
 diff - - git a / src / com / tigthdb / example / generated / PhoneQuery . java b / src / com / tigthdb / example / generated / PhoneQuery . java 
 new file mode 100644 
 index 0000000 . . 5591398 
 - - - / dev / null 
 + + + b / src / com / tigthdb / example / generated / PhoneQuery . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package com . tigthdb . example . generated ; 
 + 
 + import java . util . List ; 
 + 
 + import com . tigthdb . lib . StringColumn ; 
 + 
 + public class PhoneQuery { 
 + 
 + 	 public final StringColumn < Phone , PhoneQuery > type = null ; 
 + 
 + 	 public final StringColumn < Phone , PhoneQuery > phone = null ; 
 + 
 + 	 public List < Phone > findAll ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Phone findFirst ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Phone findLast ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Phone or ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Phone findUnique ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public long remove ( ) { 
 + 	 	 return 0 ; 
 + 	 } 
 + 
 + } 
 diff - - git a / src / com / tigthdb / example / generated / PhoneTable . java b / src / com / tigthdb / example / generated / PhoneTable . java 
 new file mode 100644 
 index 0000000 . . d437f59 
 - - - / dev / null 
 + + + b / src / com / tigthdb / example / generated / PhoneTable . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . tigthdb . example . generated ; 
 + 
 + import java . util . Iterator ; 
 + 
 + import com . tigthdb . lib . StringColumn ; 
 + 
 + public class PhoneTable implements Iterable < Phone > { 
 + 
 + 	 public final StringColumn < Phone , PhoneQuery > type = new StringColumn < Phone , PhoneQuery > ( ) ; 
 + 
 + 	 public final StringColumn < Phone , PhoneQuery > number = new StringColumn < Phone , PhoneQuery > ( ) ; 
 + 
 + 	 public Phone add ( String type , String number ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Phone insert ( long position , String type , String number ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public Phone at ( long position ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public void remove ( long id ) { 
 + 
 + 	 } 
 + 
 + 	 public Iterator < Phone > iterator ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + } 
 diff - - git a / src / com / tigthdb / lib / AbstractColumn . java b / src / com / tigthdb / lib / AbstractColumn . java 
 new file mode 100644 
 index 0000000 . . 0dfd174 
 - - - / dev / null 
 + + + b / src / com / tigthdb / lib / AbstractColumn . java 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + package com . tigthdb . lib ; 
 + 
 + import java . util . List ; 
 + 
 + public class AbstractColumn < T , M > { 
 + 
 + 	 public T get ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public List < T > getAll ( ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public void set ( T value ) { 
 + 
 + 	 } 
 + 
 + 	 public M is ( T value ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + } 
 diff - - git a / src / com / tigthdb / lib / IntegerColumn . java b / src / com / tigthdb / lib / IntegerColumn . java 
 new file mode 100644 
 index 0000000 . . 95a3c6f 
 - - - / dev / null 
 + + + b / src / com / tigthdb / lib / IntegerColumn . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package com . tigthdb . lib ; 
 + 
 + public class IntegerColumn < T , M > extends AbstractColumn < Integer , M > { 
 + 
 + 	 public M greaterThan ( int value ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + 	 public int sum ( ) { 
 + 	 	 return 0 ; 
 + 	 } 
 + 
 + 	 public int average ( ) { 
 + 	 	 return 0 ; 
 + 	 } 
 + 
 + } 
 diff - - git a / src / com / tigthdb / lib / StringColumn . java b / src / com / tigthdb / lib / StringColumn . java 
 new file mode 100644 
 index 0000000 . . 047add1 
 - - - / dev / null 
 + + + b / src / com / tigthdb / lib / StringColumn . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . tigthdb . lib ; 
 + 
 + public class StringColumn < T , M > extends AbstractColumn < String , M > { 
 + 
 + 	 public M startsWith ( String value ) { 
 + 	 	 return null ; 
 + 	 } 
 + 
 + } 
 diff - - git a / src / com / tigthdb / lib / Table . java b / src / com / tigthdb / lib / Table . java 
 new file mode 100644 
 index 0000000 . . 39422d4 
 - - - / dev / null 
 + + + b / src / com / tigthdb / lib / Table . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package com . tigthdb . lib ; 
 + 
 + public @ interface Table { 
 + 
 + }
