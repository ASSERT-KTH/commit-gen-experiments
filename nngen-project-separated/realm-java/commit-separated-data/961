BLEU SCORE: 0.11156508007421491

TEST MSG: Fix typo
GENERATED MSG: Updates due to PR feedback

TEST DIFF (one line): diff - - git a / realm / realm - jni / src / util . hpp b / realm / realm - jni / src / util . hpp <nl> index 47a5ff7 . . 0ae812d 100644 <nl> - - - a / realm / realm - jni / src / util . hpp <nl> + + + b / realm / realm - jni / src / util . hpp <nl> @ @ - 433 , 7 + 433 , 7 @ @ inline bool ColIsNullable ( JNIEnv * env , T * pTable , jlong columnIndex ) <nl> } <nl> <nl> TR _ ERR ( " Expected nullable column type " ) <nl> - ThrowException ( env , IllegalArgument , " This filed is not nullable . " ) ; <nl> + ThrowException ( env , IllegalArgument , " This field is not nullable . " ) ; <nl> return false ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmObjectTest . java b / realm / src / androidTest / java / io / realm / RealmObjectTest . java <nl> index f064efb . . 747c37a 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmObjectTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmObjectTest . java <nl> @ @ - 129 , 11 + 129 , 8 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> return future . get ( ) ; <nl> } <nl> <nl> - public void testGetWrongThread ( ) throws ExecutionException , InterruptedException { <nl> + public void testGetSetWrongThread ( ) throws ExecutionException , InterruptedException { <nl> assertTrue ( methodWrongThread ( true ) ) ; <nl> - } <nl> - <nl> - public void testSetWrong ( ) throws ExecutionException , InterruptedException { <nl> assertTrue ( methodWrongThread ( false ) ) ; <nl> } <nl> } <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> index 7cf06be . . 9e78b3a 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> @ @ - 67 , 13 + 67 , 16 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> testRealm . commitTransaction ( ) ; <nl> } <nl> <nl> - private static final int METHOD _ MIN = 1 ; <nl> - private static final int METHOD _ MAX = 2 ; <nl> - private static final int METHOD _ SUM = 3 ; <nl> - private static final int METHOD _ AVG = 4 ; <nl> - private static final int METHOD _ SORT = 5 ; <nl> - private static final int METHOD _ WHERE = 6 ; <nl> - public boolean methodWrongThread ( final int method ) throws ExecutionException , InterruptedException { <nl> + private enum Method { <nl> + METHOD _ MIN , <nl> + METHOD _ MAX , <nl> + METHOD _ SUM , <nl> + METHOD _ AVG , <nl> + METHOD _ SORT , <nl> + METHOD _ WHERE <nl> + } ; <nl> + <nl> + public boolean methodWrongThread ( final Method method ) throws ExecutionException , InterruptedException { <nl> final RealmResults < AllTypes > allTypeses = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ @ - 109 , 7 + 112 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> return future . get ( ) ; <nl> } <nl> <nl> - <nl> / / test io . realm . ResultList Api <nl> <nl> / / void clear ( Class < ? > classSpec ) <nl> @ @ - 178 , 16 + 180 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertEquals ( 0 , minimum . intValue ( ) ) ; <nl> } <nl> <nl> - public void testMinMaxDate ( ) { <nl> - RealmResults < AllTypes > results = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> - assertEquals ( new Date ( 0 ) , results . minDate ( FIELD _ DATE ) ) ; <nl> - assertEquals ( new Date ( 1000 * ( TEST _ DATA _ SIZE - 1 ) ) , results . maxDate ( FIELD _ DATE ) ) ; <nl> - } <nl> - <nl> - public void testMinWrongThread ( ) throws ExecutionException , InterruptedException { <nl> - assertTrue ( methodWrongThread ( METHOD _ MIN ) ) ; <nl> - } <nl> - <nl> public void testMaxValueIsMaxValue ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> @ @ - 195 , 10 + 187 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertEquals ( TEST _ DATA _ SIZE - 1 , maximum . intValue ( ) ) ; <nl> } <nl> <nl> - public void testMaxWrongThread ( ) throws ExecutionException , InterruptedException { <nl> - assertTrue ( methodWrongThread ( METHOD _ MAX ) ) ; <nl> - } <nl> - <nl> public void testSumGivesCorrectValue ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> @ @ - 207 , 10 + 195 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertEquals ( ( TEST _ DATA _ SIZE - 1 ) * TEST _ DATA _ SIZE / 2 , sum . intValue ( ) ) ; <nl> } <nl> <nl> - public void testSumWrongThread ( ) throws ExecutionException , InterruptedException { <nl> - assertTrue ( methodWrongThread ( METHOD _ SUM ) ) ; <nl> - } <nl> - <nl> public void testAvgGivesCorrectValue ( ) { <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> double N = ( double ) TEST _ DATA _ SIZE ; <nl> @ @ - 239 , 10 + 223 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> assertEquals ( 1 . 234567 + 0 . 5 * ( N - 1 . 0 ) , resultList . average ( FIELD _ FLOAT ) , 0 . 0001 ) ; <nl> } <nl> <nl> - public void testAverageWrongThread ( ) throws ExecutionException , InterruptedException { <nl> - assertTrue ( methodWrongThread ( METHOD _ AVG ) ) ; <nl> - } <nl> - <nl> / / void clear ( Class < ? > classSpec ) <nl> public void testRemoveIsResultListSizeOk ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> @ @ - 394 , 10 + 374 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testSortWrongThread ( ) throws ExecutionException , InterruptedException { <nl> - assertTrue ( methodWrongThread ( METHOD _ SORT ) ) ; <nl> - } <nl> - <nl> public void testCount ( ) { <nl> assertEquals ( TEST _ DATA _ SIZE , testRealm . where ( AllTypes . class ) . count ( ) ) ; <nl> } <nl> @ @ - 425 , 8 + 401 , 4 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> RealmQuery < AllTypes > query = testRealm . where ( AllTypes . class ) . findAll ( ) . where ( ) ; <nl> assertNotNull ( query ) ; <nl> } <nl> - <nl> - public void testWhereWrongThread ( ) throws ExecutionException , InterruptedException { <nl> - assertTrue ( methodWrongThread ( METHOD _ WHERE ) ) ; <nl> - } <nl> } <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index d351cae . . 1686b71 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 323 , 16 + 323 , 36 @ @ public class RealmTest extends AndroidTestCase { <nl> testRealm . commitTransaction ( ) ; <nl> } <nl> <nl> + private enum TransactionMethod { <nl> + METHOD _ BEGIN , <nl> + METHOD _ COMMIT , <nl> + METHOD _ CANCEL <nl> + } <nl> + <nl> / / Starting a transaction on the wrong thread will fail <nl> - public void testBeginTransactionWrongThread ( ) throws InterruptedException , ExecutionException { <nl> + public boolean transactionMethodWrongThread ( final TransactionMethod method ) throws InterruptedException , ExecutionException { <nl> final Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> <nl> + if ( method ! = TransactionMethod . METHOD _ BEGIN ) { <nl> + realm . beginTransaction ( ) ; <nl> + Dog dog = realm . createObject ( Dog . class ) ; / / FIXME : Empty transactions cannot be cancelled <nl> + } <nl> ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ Override <nl> public Boolean call ( ) throws Exception { <nl> try { <nl> - realm . beginTransaction ( ) ; <nl> + switch ( method ) { <nl> + case METHOD _ BEGIN : <nl> + realm . beginTransaction ( ) ; <nl> + break ; <nl> + case METHOD _ COMMIT : <nl> + realm . commitTransaction ( ) ; <nl> + break ; <nl> + case METHOD _ CANCEL : <nl> + realm . cancelTransaction ( ) ; <nl> + break ; <nl> + } <nl> return false ; <nl> } catch ( IllegalStateException ignored ) { <nl> return true ; <nl> @ @ - 340 , 8 + 360 , 17 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> } ) ; <nl> <nl> - Boolean result = future . get ( ) ; <nl> - assertTrue ( result ) ; <nl> + boolean result = future . get ( ) ; <nl> + if ( result & & method ! = TransactionMethod . METHOD _ BEGIN ) { <nl> + realm . cancelTransaction ( ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + public void testTransactionWrongThread ( ) throws ExecutionException , InterruptedException { <nl> + for ( TransactionMethod method : TransactionMethod . values ( ) ) { <nl> + assertTrue ( method . toString ( ) , transactionMethodWrongThread ( method ) ) ; <nl> + } <nl> } <nl> <nl> / / void commitTransaction ( ) <nl> @ @ - 355 , 27 + 384 , 6 @ @ public class RealmTest extends AndroidTestCase { <nl> assertEquals ( " Change has not been committed " , TEST _ DATA _ SIZE + 1 , resultList . size ( ) ) ; <nl> } <nl> <nl> - / / Committing a transaction on the wrong thread will fail <nl> - public void testCommitTransactionWrongThread ( ) throws InterruptedException , ExecutionException { <nl> - final Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> - Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> - @ Override <nl> - public Boolean call ( ) throws Exception { <nl> - try { <nl> - realm . commitTransaction ( ) ; <nl> - return false ; <nl> - } catch ( IllegalStateException ignored ) { <nl> - return true ; <nl> - } <nl> - } <nl> - } ) ; <nl> - <nl> - Boolean result = future . get ( ) ; <nl> - assertTrue ( result ) ; <nl> - } <nl> <nl> public void testCancelTransaction ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> @ @ - 389 , 29 + 397 , 6 @ @ public class RealmTest extends AndroidTestCase { <nl> } catch ( IllegalStateException ignored ) { } <nl> } <nl> <nl> - / / Cancelling a transaction on the wrong thread will fail <nl> - public void testCancelTransactionWrongThread ( ) throws InterruptedException , ExecutionException { <nl> - final Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> - Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> - @ Override <nl> - public Boolean call ( ) throws Exception { <nl> - try { <nl> - realm . cancelTransaction ( ) ; <nl> - return false ; <nl> - } catch ( IllegalStateException ignored ) { <nl> - return true ; <nl> - } <nl> - } <nl> - } ) ; <nl> - <nl> - Boolean result = future . get ( ) ; <nl> - assertTrue ( result ) ; <nl> - } <nl> - <nl> - <nl> / / void clear ( Class < ? > classSpec ) <nl> public void testClassClear ( ) { <nl> <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 50e4e75 . . 3adc877 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class Realm { <nl> static final Map < String , Map < String , Long > > columnIndices = new HashMap < String , Map < String , Long > > ( ) ; <nl> <nl> protected void assertThread ( ) { <nl> - if ( realmsCache . get ( ) . get ( new Integer ( this . id ) ) = = null ) { <nl> + if ( realmsCache . get ( ) . get ( this . id ) ! = this ) { <nl> throw new IllegalStateException ( INCORRECT _ THREAD _ MESSAGE ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / realm / realm - jni / src / util . hpp b / realm / realm - jni / src / util . hpp 
 index 47a5ff7 . . 0ae812d 100644 
 - - - a / realm / realm - jni / src / util . hpp 
 + + + b / realm / realm - jni / src / util . hpp 
 @ @ - 433 , 7 + 433 , 7 @ @ inline bool ColIsNullable ( JNIEnv * env , T * pTable , jlong columnIndex ) 
 } 
 
 TR _ ERR ( " Expected nullable column type " ) 
 - ThrowException ( env , IllegalArgument , " This filed is not nullable . " ) ; 
 + ThrowException ( env , IllegalArgument , " This field is not nullable . " ) ; 
 return false ; 
 } 


NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmObjectTest . java b / realm / src / androidTest / java / io / realm / RealmObjectTest . java 
 index f064efb . . 747c37a 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmObjectTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmObjectTest . java 
 @ @ - 129 , 11 + 129 , 8 @ @ public class RealmObjectTest extends AndroidTestCase { 
 return future . get ( ) ; 
 } 
 
 - public void testGetWrongThread ( ) throws ExecutionException , InterruptedException { 
 + public void testGetSetWrongThread ( ) throws ExecutionException , InterruptedException { 
 assertTrue ( methodWrongThread ( true ) ) ; 
 - } 
 - 
 - public void testSetWrong ( ) throws ExecutionException , InterruptedException { 
 assertTrue ( methodWrongThread ( false ) ) ; 
 } 
 } 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 index 7cf06be . . 9e78b3a 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 @ @ - 67 , 13 + 67 , 16 @ @ public class RealmResultsTest extends AndroidTestCase { 
 testRealm . commitTransaction ( ) ; 
 } 
 
 - private static final int METHOD _ MIN = 1 ; 
 - private static final int METHOD _ MAX = 2 ; 
 - private static final int METHOD _ SUM = 3 ; 
 - private static final int METHOD _ AVG = 4 ; 
 - private static final int METHOD _ SORT = 5 ; 
 - private static final int METHOD _ WHERE = 6 ; 
 - public boolean methodWrongThread ( final int method ) throws ExecutionException , InterruptedException { 
 + private enum Method { 
 + METHOD _ MIN , 
 + METHOD _ MAX , 
 + METHOD _ SUM , 
 + METHOD _ AVG , 
 + METHOD _ SORT , 
 + METHOD _ WHERE 
 + } ; 
 + 
 + public boolean methodWrongThread ( final Method method ) throws ExecutionException , InterruptedException { 
 final RealmResults < AllTypes > allTypeses = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ @ - 109 , 7 + 112 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { 
 return future . get ( ) ; 
 } 
 
 - 
 / / test io . realm . ResultList Api 
 
 / / void clear ( Class < ? > classSpec ) 
 @ @ - 178 , 16 + 180 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertEquals ( 0 , minimum . intValue ( ) ) ; 
 } 
 
 - public void testMinMaxDate ( ) { 
 - RealmResults < AllTypes > results = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 - assertEquals ( new Date ( 0 ) , results . minDate ( FIELD _ DATE ) ) ; 
 - assertEquals ( new Date ( 1000 * ( TEST _ DATA _ SIZE - 1 ) ) , results . maxDate ( FIELD _ DATE ) ) ; 
 - } 
 - 
 - public void testMinWrongThread ( ) throws ExecutionException , InterruptedException { 
 - assertTrue ( methodWrongThread ( METHOD _ MIN ) ) ; 
 - } 
 - 
 public void testMaxValueIsMaxValue ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 
 @ @ - 195 , 10 + 187 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertEquals ( TEST _ DATA _ SIZE - 1 , maximum . intValue ( ) ) ; 
 } 
 
 - public void testMaxWrongThread ( ) throws ExecutionException , InterruptedException { 
 - assertTrue ( methodWrongThread ( METHOD _ MAX ) ) ; 
 - } 
 - 
 public void testSumGivesCorrectValue ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 
 @ @ - 207 , 10 + 195 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertEquals ( ( TEST _ DATA _ SIZE - 1 ) * TEST _ DATA _ SIZE / 2 , sum . intValue ( ) ) ; 
 } 
 
 - public void testSumWrongThread ( ) throws ExecutionException , InterruptedException { 
 - assertTrue ( methodWrongThread ( METHOD _ SUM ) ) ; 
 - } 
 - 
 public void testAvgGivesCorrectValue ( ) { 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 double N = ( double ) TEST _ DATA _ SIZE ; 
 @ @ - 239 , 10 + 223 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { 
 assertEquals ( 1 . 234567 + 0 . 5 * ( N - 1 . 0 ) , resultList . average ( FIELD _ FLOAT ) , 0 . 0001 ) ; 
 } 
 
 - public void testAverageWrongThread ( ) throws ExecutionException , InterruptedException { 
 - assertTrue ( methodWrongThread ( METHOD _ AVG ) ) ; 
 - } 
 - 
 / / void clear ( Class < ? > classSpec ) 
 public void testRemoveIsResultListSizeOk ( ) { 
 testRealm . beginTransaction ( ) ; 
 @ @ - 394 , 10 + 374 , 6 @ @ public class RealmResultsTest extends AndroidTestCase { 
 } 
 } 
 
 - public void testSortWrongThread ( ) throws ExecutionException , InterruptedException { 
 - assertTrue ( methodWrongThread ( METHOD _ SORT ) ) ; 
 - } 
 - 
 public void testCount ( ) { 
 assertEquals ( TEST _ DATA _ SIZE , testRealm . where ( AllTypes . class ) . count ( ) ) ; 
 } 
 @ @ - 425 , 8 + 401 , 4 @ @ public class RealmResultsTest extends AndroidTestCase { 
 RealmQuery < AllTypes > query = testRealm . where ( AllTypes . class ) . findAll ( ) . where ( ) ; 
 assertNotNull ( query ) ; 
 } 
 - 
 - public void testWhereWrongThread ( ) throws ExecutionException , InterruptedException { 
 - assertTrue ( methodWrongThread ( METHOD _ WHERE ) ) ; 
 - } 
 } 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index d351cae . . 1686b71 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 323 , 16 + 323 , 36 @ @ public class RealmTest extends AndroidTestCase { 
 testRealm . commitTransaction ( ) ; 
 } 
 
 + private enum TransactionMethod { 
 + METHOD _ BEGIN , 
 + METHOD _ COMMIT , 
 + METHOD _ CANCEL 
 + } 
 + 
 / / Starting a transaction on the wrong thread will fail 
 - public void testBeginTransactionWrongThread ( ) throws InterruptedException , ExecutionException { 
 + public boolean transactionMethodWrongThread ( final TransactionMethod method ) throws InterruptedException , ExecutionException { 
 final Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 
 + if ( method ! = TransactionMethod . METHOD _ BEGIN ) { 
 + realm . beginTransaction ( ) ; 
 + Dog dog = realm . createObject ( Dog . class ) ; / / FIXME : Empty transactions cannot be cancelled 
 + } 
 ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ Override 
 public Boolean call ( ) throws Exception { 
 try { 
 - realm . beginTransaction ( ) ; 
 + switch ( method ) { 
 + case METHOD _ BEGIN : 
 + realm . beginTransaction ( ) ; 
 + break ; 
 + case METHOD _ COMMIT : 
 + realm . commitTransaction ( ) ; 
 + break ; 
 + case METHOD _ CANCEL : 
 + realm . cancelTransaction ( ) ; 
 + break ; 
 + } 
 return false ; 
 } catch ( IllegalStateException ignored ) { 
 return true ; 
 @ @ - 340 , 8 + 360 , 17 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 } ) ; 
 
 - Boolean result = future . get ( ) ; 
 - assertTrue ( result ) ; 
 + boolean result = future . get ( ) ; 
 + if ( result & & method ! = TransactionMethod . METHOD _ BEGIN ) { 
 + realm . cancelTransaction ( ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + public void testTransactionWrongThread ( ) throws ExecutionException , InterruptedException { 
 + for ( TransactionMethod method : TransactionMethod . values ( ) ) { 
 + assertTrue ( method . toString ( ) , transactionMethodWrongThread ( method ) ) ; 
 + } 
 } 
 
 / / void commitTransaction ( ) 
 @ @ - 355 , 27 + 384 , 6 @ @ public class RealmTest extends AndroidTestCase { 
 assertEquals ( " Change has not been committed " , TEST _ DATA _ SIZE + 1 , resultList . size ( ) ) ; 
 } 
 
 - / / Committing a transaction on the wrong thread will fail 
 - public void testCommitTransactionWrongThread ( ) throws InterruptedException , ExecutionException { 
 - final Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - realm . beginTransaction ( ) ; 
 - 
 - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 - Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 - @ Override 
 - public Boolean call ( ) throws Exception { 
 - try { 
 - realm . commitTransaction ( ) ; 
 - return false ; 
 - } catch ( IllegalStateException ignored ) { 
 - return true ; 
 - } 
 - } 
 - } ) ; 
 - 
 - Boolean result = future . get ( ) ; 
 - assertTrue ( result ) ; 
 - } 
 
 public void testCancelTransaction ( ) { 
 testRealm . beginTransaction ( ) ; 
 @ @ - 389 , 29 + 397 , 6 @ @ public class RealmTest extends AndroidTestCase { 
 } catch ( IllegalStateException ignored ) { } 
 } 
 
 - / / Cancelling a transaction on the wrong thread will fail 
 - public void testCancelTransactionWrongThread ( ) throws InterruptedException , ExecutionException { 
 - final Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - realm . beginTransaction ( ) ; 
 - 
 - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 - Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 - @ Override 
 - public Boolean call ( ) throws Exception { 
 - try { 
 - realm . cancelTransaction ( ) ; 
 - return false ; 
 - } catch ( IllegalStateException ignored ) { 
 - return true ; 
 - } 
 - } 
 - } ) ; 
 - 
 - Boolean result = future . get ( ) ; 
 - assertTrue ( result ) ; 
 - } 
 - 
 - 
 / / void clear ( Class < ? > classSpec ) 
 public void testClassClear ( ) { 
 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 50e4e75 . . 3adc877 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 106 , 7 + 106 , 7 @ @ public class Realm { 
 static final Map < String , Map < String , Long > > columnIndices = new HashMap < String , Map < String , Long > > ( ) ; 
 
 protected void assertThread ( ) { 
 - if ( realmsCache . get ( ) . get ( new Integer ( this . id ) ) = = null ) { 
 + if ( realmsCache . get ( ) . get ( this . id ) ! = this ) { 
 throw new IllegalStateException ( INCORRECT _ THREAD _ MESSAGE ) ; 
 } 
 }
