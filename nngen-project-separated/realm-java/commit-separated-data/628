BLEU SCORE: 0.04540013809283727

TEST MSG: Remove the dependency of Realm . Handler from tests
GENERATED MSG: Notify listeners of async RealmObject even if the result is empty

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> index f4707f7 . . f2ea3c8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> @ @ - 1534 , 7 + 1534 , 7 @ @ public class RealmAsyncQueryTests { <nl> } ) ; <nl> looperThread . keepStrongReference . add ( allAsync ) ; <nl> <nl> - looperThread . realm . handler . postDelayed ( new Runnable ( ) { <nl> + looperThread . postRunnableDelayed ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> backgroundThread . start ( ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> index 34cbeef . . b3784cb 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( DynamicRealm object ) { <nl> if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> realm . close ( ) ; <nl> @ @ - 166 , 7 + 166 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 206 , 7 + 206 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 255 , 7 + 255 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 305 , 7 + 305 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 361 , 7 + 361 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 426 , 7 + 426 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 518 , 7 + 518 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> case 3 : <nl> / / Step 5 : Complete test <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 584 , 7 + 584 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> case 3 : <nl> / / Step 5 : Complete test <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; <nl> @ @ - 665 , 7 + 665 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> case 3 : / / triggered by relevant commit from LooperThread2 <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> / / trigger second callback invocation <nl> @ @ - 689 , 7 + 689 , 7 @ @ public class TypeBasedNotificationsTests { <nl> / / posting as an event will give the handler a chance <nl> / / to deliver the notification for globalCommitInvocations <nl> / / otherwise , test will exit before the callback get a chance to be invoked <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; <nl> @ @ - 756 , 7 + 756 , 7 @ @ public class TypeBasedNotificationsTests { <nl> } <nl> case 3 : { <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> - realm . handler . postDelayed ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> / / trigger second callback invocation <nl> @ @ - 772 , 7 + 772 , 7 @ @ public class TypeBasedNotificationsTests { <nl> } <nl> } . start ( ) ; <nl> } <nl> - } , TimeUnit . SECONDS . toMillis ( 0 ) ) ; <nl> + } ) ; <nl> break ; <nl> } <nl> case 4 : { <nl> @ @ - 781 , 7 + 781 , 7 @ @ public class TypeBasedNotificationsTests { <nl> / / posting as an event will give the handler a chance <nl> / / to deliver the notification for globalCommitInvocations <nl> / / otherwise , test will exit before the callback get a chance to be invoked <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; <nl> @ @ - 842 , 7 + 842 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> case 3 : <nl> / / Step 5 : Complete test <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 905 , 7 + 905 , 7 @ @ public class TypeBasedNotificationsTests { <nl> <nl> case 3 : <nl> / / Step 5 : Complete test <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 930 , 7 + 930 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( NUMBER _ OF _ LISTENERS , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 969 , 7 + 969 , 7 @ @ public class TypeBasedNotificationsTests { <nl> RealmChangeListener < Realm > listener = new RealmChangeListener < Realm > ( ) { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( NUMBER _ OF _ LISTENERS , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 1011 , 7 + 1011 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( NUMBER _ OF _ LISTENERS , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 1050 , 7 + 1050 , 7 @ @ public class TypeBasedNotificationsTests { <nl> realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( NUMBER _ OF _ LISTENERS , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 1099 , 7 + 1099 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> if ( realm . where ( Dog . class ) . count ( ) = = 2 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 1154 , 7 + 1154 , 7 @ @ public class TypeBasedNotificationsTests { <nl> public void onChange ( Realm object ) { <nl> / / Check if the 2nd transaction is committed . <nl> if ( realm . where ( Dog . class ) . count ( ) = = 2 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; <nl> @ @ - 1219 , 7 + 1219 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> if ( realm . where ( Dog . class ) . count ( ) = = 2 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( typebasedCommitInvocations . get ( ) , 1 ) ; <nl> @ @ - 1274 , 7 + 1274 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> if ( realm . where ( Dog . class ) . count ( ) = = 2 ) { <nl> - realm . handler . post ( new Runnable ( ) { <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> index a7313db . . 7119ae5 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java <nl> @ @ - 195 , 6 + 195 , 13 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { <nl> } <nl> <nl> / * * <nl> + * Posts a runnable to this worker threads looper with a delay in milli second . <nl> + * / <nl> + public void postRunnableDelayed ( Runnable runnable , long delayMillis ) { <nl> + backgroundHandler . postDelayed ( runnable , delayMillis ) ; <nl> + } <nl> + <nl> + / * * <nl> * Tear down logic which is guaranteed to run after the looper test has either completed or failed . <nl> * This will run on the same thread as the looper test . <nl> * /
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> index 8858a5d . . 4806316 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> @ @ - 539 , 7 + 539 , 11 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( ) { <nl> switch ( typebasedCommitInvocations . incrementAndGet ( ) ) { <nl> - case 1 : { <nl> + case 1 : <nl> + assertTrue ( dog . isLoaded ( ) ) ; <nl> + assertFalse ( dog . isValid ( ) ) ; <nl> + break ; <nl> + case 2 : <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> realm . handler . post ( new Runnable ( ) { <nl> @ Override <nl> @ @ - 551 , 8 + 555 , 7 @ @ public class TypeBasedNotificationsTests { <nl> } <nl> } ) ; <nl> break ; <nl> - } <nl> - case 2 : { <nl> + case 3 : <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> assertEquals ( 17 , dog . getAge ( ) ) ; <nl> / / posting as an event will give the handler a chance <nl> @ @ - 562 , 12 + 565 , 11 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; <nl> - assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; <nl> + assertEquals ( 3 , typebasedCommitInvocations . get ( ) ) ; <nl> looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> break ; <nl> - } <nl> } <nl> } <nl> } ) ; <nl> @ @ - 619 , 7 + 621 , 12 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( ) { <nl> switch ( typebasedCommitInvocations . incrementAndGet ( ) ) { <nl> - case 1 : { <nl> + case 1 : / / triggered by COMPLETED _ ASYNC _ REALM _ OBJECT <nl> + case 2 : / / triggered by the irrelevant commit ( not affecting Dog table ) <nl> + assertTrue ( dog . isLoaded ( ) ) ; <nl> + assertFalse ( dog . isValid ( ) ) ; <nl> + break ; <nl> + case 3 : <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> realm . handler . post ( new Runnable ( ) { <nl> @ Override <nl> @ @ - 639 , 8 + 646 , 7 @ @ public class TypeBasedNotificationsTests { <nl> } <nl> } ) ; <nl> break ; <nl> - } <nl> - case 2 : { <nl> + case 4 : <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> assertEquals ( 17 , dog . getAge ( ) ) ; <nl> / / posting as an event will give the handler a chance <nl> @ @ - 650 , 7 + 656 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; <nl> - assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; <nl> + assertEquals ( 4 , typebasedCommitInvocations . get ( ) ) ; <nl> looperThread1 . quit ( ) ; <nl> looperThread2 . quit ( ) ; <nl> looperThread3 . quit ( ) ; <nl> @ @ - 661 , 7 + 667 , 6 @ @ public class TypeBasedNotificationsTests { <nl> } <nl> } ) ; <nl> break ; <nl> - } <nl> } <nl> } <nl> } ) ; <nl> @ @ - 711 , 7 + 716 , 13 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void onChange ( ) { <nl> switch ( typebasedCommitInvocations . incrementAndGet ( ) ) { <nl> - case 1 : { <nl> + case 1 : / / triggered by COMPLETED _ ASYNC _ REALM _ OBJECT <nl> + case 2 : { / / triggered by the irrelevant commit ( not affecting Dog table ) <nl> + assertTrue ( dog . isLoaded ( ) ) ; <nl> + assertFalse ( dog . isValid ( ) ) ; <nl> + break ; <nl> + } <nl> + case 3 : { <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> realm . handler . postDelayed ( new Runnable ( ) { <nl> @ Override <nl> @ @ - 732 , 7 + 743 , 7 @ @ public class TypeBasedNotificationsTests { <nl> } , TimeUnit . SECONDS . toMillis ( 0 ) ) ; <nl> break ; <nl> } <nl> - case 2 : { <nl> + case 4 : { <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> assertEquals ( 17 , dog . getAge ( ) ) ; <nl> / / posting as an event will give the handler a chance <nl> @ @ - 742 , 7 + 753 , 7 @ @ public class TypeBasedNotificationsTests { <nl> @ Override <nl> public void run ( ) { <nl> assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; <nl> - assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; <nl> + assertEquals ( 4 , typebasedCommitInvocations . get ( ) ) ; <nl> looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 7aeaebc . . 1d18fb7 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 309 , 11 + 309 , 24 @ @ public abstract class RealmObject { <nl> * / <nl> void notifyChangeListeners ( ) { <nl> if ( listeners ! = null & & ! listeners . isEmpty ( ) ) { <nl> - if ( row . getTable ( ) = = null ) return ; <nl> + boolean notify = false ; <nl> <nl> - long version = row . getTable ( ) . version ( ) ; <nl> - if ( currentTableVersion ! = version ) { <nl> - currentTableVersion = version ; <nl> + Table table = row . getTable ( ) ; <nl> + if ( table = = null ) { <nl> + / / Completed async queries might result in ` table = = null ` , ` isCompleted = = true ` and ` row = = Row . EMPTY _ ROW ` <nl> + / / We still want to trigger change notifications for these cases . <nl> + / / isLoaded / isValid should be considered properties on RealmObjects as well so any change to these <nl> + / / should trigger a RealmChangeListener . <nl> + notify = true ; <nl> + } else { <nl> + long version = table . version ( ) ; <nl> + if ( currentTableVersion ! = version ) { <nl> + currentTableVersion = version ; <nl> + notify = true ; <nl> + } <nl> + } <nl> + <nl> + if ( notify ) { <nl> for ( RealmChangeListener listener : listeners ) { <nl> listener . onChange ( ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index c85e2a6 . . b0a6265 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1822 , 7 + 1822 , 9 @ @ public class RealmQuery < E extends RealmObject > { <nl> * @ return immediately an empty { @ link RealmObject } . Trying to access any field on the returned object <nl> * before it is loaded will throw an { @ code IllegalStateException } . Use { @ link RealmObject # isLoaded ( ) } to check if <nl> * the object is fully loaded or register a listener { @ link io . realm . RealmObject # addChangeListener } <nl> - * to be notified when the query completes . <nl> + * to be notified when the query completes . If no RealmObject was found after the query completed , the returned <nl> + * RealmObject will have { @ link RealmObject # isLoaded ( ) } set to { @ code true } and { @ link RealmObject # isValid ( ) } set to <nl> + * { @ code false } . <nl> * / <nl> public E findFirstAsync ( ) { <nl> checkQueryIsNotReused ( ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Row . java b / realm / realm - library / src / main / java / io / realm / internal / Row . java <nl> index 9195042 . . d61a0bc 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Row . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Row . java <nl> @ @ - 120 , 7 + 120 , 7 @ @ public interface Row { <nl> <nl> Row EMPTY _ ROW = new Row ( ) { <nl> private final static String UNLOADED _ ROW _ MESSAGE = " Can ' t access a row that hasn ' t been loaded , make sure the instance " + <nl> - " is loaded by calling RealmObject . isLoaded " ; <nl> + " is loaded by calling RealmObject . isLoaded ( ) . " ; <nl> <nl> @ Override <nl> public long getColumnCount ( ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 index f4707f7 . . f2ea3c8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 @ @ - 1534 , 7 + 1534 , 7 @ @ public class RealmAsyncQueryTests { 
 } ) ; 
 looperThread . keepStrongReference . add ( allAsync ) ; 
 
 - looperThread . realm . handler . postDelayed ( new Runnable ( ) { 
 + looperThread . postRunnableDelayed ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 backgroundThread . start ( ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 index 34cbeef . . b3784cb 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( Realm object ) { 
 if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 127 , 7 + 127 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( DynamicRealm object ) { 
 if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 realm . close ( ) ; 
 @ @ - 166 , 7 + 166 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( Realm object ) { 
 if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 206 , 7 + 206 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( Realm object ) { 
 if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 255 , 7 + 255 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( Realm object ) { 
 if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 305 , 7 + 305 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( Realm object ) { 
 if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 361 , 7 + 361 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( Realm object ) { 
 if ( globalCommitInvocations . incrementAndGet ( ) = = 1 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 426 , 7 + 426 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 @ Override 
 public void onChange ( Realm object ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 518 , 7 + 518 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 case 3 : 
 / / Step 5 : Complete test 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 584 , 7 + 584 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 case 3 : 
 / / Step 5 : Complete test 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; 
 @ @ - 665 , 7 + 665 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 case 3 : / / triggered by relevant commit from LooperThread2 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 / / trigger second callback invocation 
 @ @ - 689 , 7 + 689 , 7 @ @ public class TypeBasedNotificationsTests { 
 / / posting as an event will give the handler a chance 
 / / to deliver the notification for globalCommitInvocations 
 / / otherwise , test will exit before the callback get a chance to be invoked 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; 
 @ @ - 756 , 7 + 756 , 7 @ @ public class TypeBasedNotificationsTests { 
 } 
 case 3 : { 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 - realm . handler . postDelayed ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 / / trigger second callback invocation 
 @ @ - 772 , 7 + 772 , 7 @ @ public class TypeBasedNotificationsTests { 
 } 
 } . start ( ) ; 
 } 
 - } , TimeUnit . SECONDS . toMillis ( 0 ) ) ; 
 + } ) ; 
 break ; 
 } 
 case 4 : { 
 @ @ - 781 , 7 + 781 , 7 @ @ public class TypeBasedNotificationsTests { 
 / / posting as an event will give the handler a chance 
 / / to deliver the notification for globalCommitInvocations 
 / / otherwise , test will exit before the callback get a chance to be invoked 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; 
 @ @ - 842 , 7 + 842 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 case 3 : 
 / / Step 5 : Complete test 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 905 , 7 + 905 , 7 @ @ public class TypeBasedNotificationsTests { 
 
 case 3 : 
 / / Step 5 : Complete test 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 930 , 7 + 930 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 @ Override 
 public void onChange ( Realm object ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( NUMBER _ OF _ LISTENERS , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 969 , 7 + 969 , 7 @ @ public class TypeBasedNotificationsTests { 
 RealmChangeListener < Realm > listener = new RealmChangeListener < Realm > ( ) { 
 @ Override 
 public void onChange ( Realm object ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( NUMBER _ OF _ LISTENERS , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 1011 , 7 + 1011 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 @ Override 
 public void onChange ( Realm object ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( NUMBER _ OF _ LISTENERS , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 1050 , 7 + 1050 , 7 @ @ public class TypeBasedNotificationsTests { 
 realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 @ Override 
 public void onChange ( Realm object ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( NUMBER _ OF _ LISTENERS , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 1099 , 7 + 1099 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( Realm object ) { 
 if ( realm . where ( Dog . class ) . count ( ) = = 2 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 1154 , 7 + 1154 , 7 @ @ public class TypeBasedNotificationsTests { 
 public void onChange ( Realm object ) { 
 / / Check if the 2nd transaction is committed . 
 if ( realm . where ( Dog . class ) . count ( ) = = 2 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; 
 @ @ - 1219 , 7 + 1219 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( Realm object ) { 
 if ( realm . where ( Dog . class ) . count ( ) = = 2 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( typebasedCommitInvocations . get ( ) , 1 ) ; 
 @ @ - 1274 , 7 + 1274 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( Realm object ) { 
 if ( realm . where ( Dog . class ) . count ( ) = = 2 ) { 
 - realm . handler . post ( new Runnable ( ) { 
 + looperThread . postRunnable ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 index a7313db . . 7119ae5 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / RunInLooperThread . java 
 @ @ - 195 , 6 + 195 , 13 @ @ public class RunInLooperThread extends TestRealmConfigurationFactory { 
 } 
 
 / * * 
 + * Posts a runnable to this worker threads looper with a delay in milli second . 
 + * / 
 + public void postRunnableDelayed ( Runnable runnable , long delayMillis ) { 
 + backgroundHandler . postDelayed ( runnable , delayMillis ) ; 
 + } 
 + 
 + / * * 
 * Tear down logic which is guaranteed to run after the looper test has either completed or failed . 
 * This will run on the same thread as the looper test . 
 * /

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 index 8858a5d . . 4806316 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 @ @ - 539 , 7 + 539 , 11 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( ) { 
 switch ( typebasedCommitInvocations . incrementAndGet ( ) ) { 
 - case 1 : { 
 + case 1 : 
 + assertTrue ( dog . isLoaded ( ) ) ; 
 + assertFalse ( dog . isValid ( ) ) ; 
 + break ; 
 + case 2 : 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 realm . handler . post ( new Runnable ( ) { 
 @ Override 
 @ @ - 551 , 8 + 555 , 7 @ @ public class TypeBasedNotificationsTests { 
 } 
 } ) ; 
 break ; 
 - } 
 - case 2 : { 
 + case 3 : 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 assertEquals ( 17 , dog . getAge ( ) ) ; 
 / / posting as an event will give the handler a chance 
 @ @ - 562 , 12 + 565 , 11 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; 
 - assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; 
 + assertEquals ( 3 , typebasedCommitInvocations . get ( ) ) ; 
 looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 break ; 
 - } 
 } 
 } 
 } ) ; 
 @ @ - 619 , 7 + 621 , 12 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( ) { 
 switch ( typebasedCommitInvocations . incrementAndGet ( ) ) { 
 - case 1 : { 
 + case 1 : / / triggered by COMPLETED _ ASYNC _ REALM _ OBJECT 
 + case 2 : / / triggered by the irrelevant commit ( not affecting Dog table ) 
 + assertTrue ( dog . isLoaded ( ) ) ; 
 + assertFalse ( dog . isValid ( ) ) ; 
 + break ; 
 + case 3 : 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 realm . handler . post ( new Runnable ( ) { 
 @ Override 
 @ @ - 639 , 8 + 646 , 7 @ @ public class TypeBasedNotificationsTests { 
 } 
 } ) ; 
 break ; 
 - } 
 - case 2 : { 
 + case 4 : 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 assertEquals ( 17 , dog . getAge ( ) ) ; 
 / / posting as an event will give the handler a chance 
 @ @ - 650 , 7 + 656 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; 
 - assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; 
 + assertEquals ( 4 , typebasedCommitInvocations . get ( ) ) ; 
 looperThread1 . quit ( ) ; 
 looperThread2 . quit ( ) ; 
 looperThread3 . quit ( ) ; 
 @ @ - 661 , 7 + 667 , 6 @ @ public class TypeBasedNotificationsTests { 
 } 
 } ) ; 
 break ; 
 - } 
 } 
 } 
 } ) ; 
 @ @ - 711 , 7 + 716 , 13 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void onChange ( ) { 
 switch ( typebasedCommitInvocations . incrementAndGet ( ) ) { 
 - case 1 : { 
 + case 1 : / / triggered by COMPLETED _ ASYNC _ REALM _ OBJECT 
 + case 2 : { / / triggered by the irrelevant commit ( not affecting Dog table ) 
 + assertTrue ( dog . isLoaded ( ) ) ; 
 + assertFalse ( dog . isValid ( ) ) ; 
 + break ; 
 + } 
 + case 3 : { 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 realm . handler . postDelayed ( new Runnable ( ) { 
 @ Override 
 @ @ - 732 , 7 + 743 , 7 @ @ public class TypeBasedNotificationsTests { 
 } , TimeUnit . SECONDS . toMillis ( 0 ) ) ; 
 break ; 
 } 
 - case 2 : { 
 + case 4 : { 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 assertEquals ( 17 , dog . getAge ( ) ) ; 
 / / posting as an event will give the handler a chance 
 @ @ - 742 , 7 + 753 , 7 @ @ public class TypeBasedNotificationsTests { 
 @ Override 
 public void run ( ) { 
 assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; 
 - assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; 
 + assertEquals ( 4 , typebasedCommitInvocations . get ( ) ) ; 
 looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 7aeaebc . . 1d18fb7 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 309 , 11 + 309 , 24 @ @ public abstract class RealmObject { 
 * / 
 void notifyChangeListeners ( ) { 
 if ( listeners ! = null & & ! listeners . isEmpty ( ) ) { 
 - if ( row . getTable ( ) = = null ) return ; 
 + boolean notify = false ; 
 
 - long version = row . getTable ( ) . version ( ) ; 
 - if ( currentTableVersion ! = version ) { 
 - currentTableVersion = version ; 
 + Table table = row . getTable ( ) ; 
 + if ( table = = null ) { 
 + / / Completed async queries might result in ` table = = null ` , ` isCompleted = = true ` and ` row = = Row . EMPTY _ ROW ` 
 + / / We still want to trigger change notifications for these cases . 
 + / / isLoaded / isValid should be considered properties on RealmObjects as well so any change to these 
 + / / should trigger a RealmChangeListener . 
 + notify = true ; 
 + } else { 
 + long version = table . version ( ) ; 
 + if ( currentTableVersion ! = version ) { 
 + currentTableVersion = version ; 
 + notify = true ; 
 + } 
 + } 
 + 
 + if ( notify ) { 
 for ( RealmChangeListener listener : listeners ) { 
 listener . onChange ( ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index c85e2a6 . . b0a6265 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1822 , 7 + 1822 , 9 @ @ public class RealmQuery < E extends RealmObject > { 
 * @ return immediately an empty { @ link RealmObject } . Trying to access any field on the returned object 
 * before it is loaded will throw an { @ code IllegalStateException } . Use { @ link RealmObject # isLoaded ( ) } to check if 
 * the object is fully loaded or register a listener { @ link io . realm . RealmObject # addChangeListener } 
 - * to be notified when the query completes . 
 + * to be notified when the query completes . If no RealmObject was found after the query completed , the returned 
 + * RealmObject will have { @ link RealmObject # isLoaded ( ) } set to { @ code true } and { @ link RealmObject # isValid ( ) } set to 
 + * { @ code false } . 
 * / 
 public E findFirstAsync ( ) { 
 checkQueryIsNotReused ( ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Row . java b / realm / realm - library / src / main / java / io / realm / internal / Row . java 
 index 9195042 . . d61a0bc 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Row . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Row . java 
 @ @ - 120 , 7 + 120 , 7 @ @ public interface Row { 
 
 Row EMPTY _ ROW = new Row ( ) { 
 private final static String UNLOADED _ ROW _ MESSAGE = " Can ' t access a row that hasn ' t been loaded , make sure the instance " + 
 - " is loaded by calling RealmObject . isLoaded " ; 
 + " is loaded by calling RealmObject . isLoaded ( ) . " ; 
 
 @ Override 
 public long getColumnCount ( ) {
