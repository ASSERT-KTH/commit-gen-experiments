BLEU SCORE: 0.016074772865287294

TEST MSG: Disable distinct on link ' s field
GENERATED MSG: Querying RealmResults with where ( ) returns a query object but resolving

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java <nl> index 017cd19 . . 2fbff84 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java <nl> @ @ - 80 , 24 + 80 , 15 @ @ public class SortDescriptorTests { <nl> } <nl> <nl> @ Test <nl> - public void getInstanceForDistinct _ linkField ( ) { <nl> - for ( RealmFieldType type : SortDescriptor . validFieldTypesForDistinct ) { <nl> - long column = table . addColumn ( type , type . name ( ) ) ; <nl> - table . addSearchIndex ( column ) ; <nl> - } <nl> + public void getInstanceForDistinct _ shouldThrowOnLinkField ( ) { <nl> + RealmFieldType type = RealmFieldType . STRING ; <nl> RealmFieldType objectType = RealmFieldType . OBJECT ; <nl> - long columnLink = table . addColumnLink ( objectType , objectType . name ( ) , table ) ; <nl> + table . addColumn ( type , type . name ( ) ) ; <nl> + table . addColumnLink ( objectType , objectType . name ( ) , table ) ; <nl> <nl> - long i = 0 ; <nl> - for ( RealmFieldType type : SortDescriptor . validFieldTypesForDistinct ) { <nl> - SortDescriptor sortDescriptor = SortDescriptor . getInstanceForDistinct ( table , <nl> - String . format ( " % s . % s " , objectType . name ( ) , type . name ( ) ) ) ; <nl> - assertEquals ( 2 , sortDescriptor . getColumnIndices ( ) [ 0 ] . length ) ; <nl> - assertEquals ( columnLink , sortDescriptor . getColumnIndices ( ) [ 0 ] [ 0 ] ) ; <nl> - assertEquals ( i , sortDescriptor . getColumnIndices ( ) [ 0 ] [ 1 ] ) ; <nl> - assertNull ( sortDescriptor . getAscendings ( ) ) ; <nl> - i + + ; <nl> - } <nl> + thrown . expect ( IllegalArgumentException . class ) ; <nl> + thrown . expectMessage ( " is not a supported link field " ) ; <nl> + SortDescriptor . getInstanceForDistinct ( table , String . format ( " % s . % s " , objectType . name ( ) , type . name ( ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 117 , 7 + 108 , 6 @ @ public class SortDescriptorTests { <nl> assertEquals ( stringColumn , sortDescriptor . getColumnIndices ( ) [ 0 ] [ 0 ] ) ; <nl> assertEquals ( 1 , sortDescriptor . getColumnIndices ( ) [ 1 ] . length ) ; <nl> assertEquals ( intColumn , sortDescriptor . getColumnIndices ( ) [ 1 ] [ 0 ] ) ; <nl> - <nl> } <nl> <nl> @ Test <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java <nl> index 9d19680 . . 56a9f1c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class FieldDescriptor { <nl> private String fieldName ; <nl> private boolean searchIndex ; <nl> <nl> - public FieldDescriptor ( Table table , String fieldDescription , boolean allowList ) { <nl> + public FieldDescriptor ( Table table , String fieldDescription , boolean allowLink , boolean allowList ) { <nl> if ( fieldDescription = = null | | fieldDescription . isEmpty ( ) ) { <nl> throw new IllegalArgumentException ( " Non - empty field name must be provided " ) ; <nl> } <nl> @ @ - 42 , 12 + 42 , 15 @ @ public class FieldDescriptor { <nl> String . format ( " Invalid field name : ' % s ' does not refer to a class . " , names [ i ] ) ) ; <nl> } <nl> RealmFieldType type = table . getColumnType ( index ) ; <nl> - if ( type = = RealmFieldType . OBJECT | | ( allowList & & type = = RealmFieldType . LIST ) ) { <nl> - table = table . getLinkTarget ( index ) ; <nl> - columnIndices [ i ] = index ; <nl> + if ( ! allowLink & & type = = RealmFieldType . OBJECT ) { <nl> + throw new IllegalArgumentException ( <nl> + String . format ( " ' RealmObject ' field ' % s ' is not a supported link field here . " , names [ i ] ) ) ; <nl> } else if ( ! allowList & & type = = RealmFieldType . LIST ) { <nl> throw new IllegalArgumentException ( <nl> String . format ( " ' RealmList ' field ' % s ' is not a supported link field here . " , names [ i ] ) ) ; <nl> + } else if ( type = = RealmFieldType . OBJECT | | type = = RealmFieldType . LIST ) { <nl> + table = table . getLinkTarget ( index ) ; <nl> + columnIndices [ i ] = index ; <nl> } else { <nl> throw new IllegalArgumentException ( <nl> String . format ( " Invalid field name : ' % s ' does not refer to a class . " , names [ i ] ) ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> index 051149f . . 94a0d2a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ public class SortDescriptor { <nl> <nl> long [ ] [ ] columnIndices = new long [ fieldDescriptions . length ] [ ] ; <nl> for ( int i = 0 ; i < fieldDescriptions . length ; i + + ) { <nl> - FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , false ) ; <nl> + FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , true , false ) ; <nl> checkFieldTypeForSort ( descriptor , fieldDescriptions [ i ] ) ; <nl> columnIndices [ i ] = descriptor . getColumnIndices ( ) ; <nl> } <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class SortDescriptor { <nl> <nl> long [ ] [ ] columnIndices = new long [ fieldDescriptions . length ] [ ] ; <nl> for ( int i = 0 ; i < fieldDescriptions . length ; i + + ) { <nl> - FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , false ) ; <nl> + FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , false , false ) ; <nl> checkFieldTypeForDistinct ( descriptor , fieldDescriptions [ i ] ) ; <nl> columnIndices [ i ] = descriptor . getColumnIndices ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index d1f2f3d . . 426644a 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> 0 . 75 . 0 ( ? ? ) <nl> * Bug fixed in Exception text when field names was not matching the database <nl> - <nl> + * Bug fixed in RealmResults which prevents subquerying <nl> + <nl> 0 . 74 . 0 ( 19 Nov 2014 ) <nl> * Added support for more field / accessors naming conventions <nl> * Allow static methods in model classes <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> index de3eddd . . 4b80484 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> @ @ - 430 , 4 + 430 , 15 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> RealmQuery < AllTypes > query = testRealm . where ( AllTypes . class ) . findAll ( ) . where ( ) ; <nl> assertNotNull ( query ) ; <nl> } <nl> + <nl> + public void testQueryResult ( ) { <nl> + RealmResults < AllTypes > allTypeses = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> + assertEquals ( TEST _ DATA _ SIZE , allTypeses . size ( ) ) ; <nl> + RealmResults < AllTypes > onedigits = allTypeses . where ( ) . lessThan ( FIELD _ LONG , 10 ) . findAll ( ) ; <nl> + assertEquals ( Math . min ( 10 , TEST _ DATA _ SIZE ) , onedigits . size ( ) ) ; <nl> + <nl> + RealmResults < AllTypes > none = allTypeses . where ( ) . greaterThan ( FIELD _ LONG , TEST _ DATA _ SIZE ) . findAll ( ) ; <nl> + assertEquals ( 0 , none . size ( ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index 4343e02 . . 1c3d9ae 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import io . realm . internal . ColumnType ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableQuery ; <nl> + import io . realm . internal . TableView ; <nl> <nl> / * * <nl> * <nl> @ @ - 133 , 16 + 134 , 24 @ @ public class RealmQuery < E extends RealmObject > { <nl> / / TODO : consider another caching strategy to linked classes are <nl> / / included in the cache . <nl> private long [ ] getColumnIndices ( String fieldName , ColumnType fieldType ) { <nl> - Table table = ( Table ) getTable ( ) ; <nl> + Table table ; <nl> + TableOrView tableOrView = getTable ( ) ; <nl> + if ( tableOrView instanceof TableView ) { <nl> + TableView tableView = ( TableView ) tableOrView ; <nl> + table = tableView . getTable ( ) ; <nl> + } else { <nl> + table = ( Table ) tableOrView ; <nl> + } <nl> + <nl> if ( containsDot ( fieldName ) ) { <nl> String [ ] names = splitString ( fieldName ) ; / / fieldName . split ( " \ \ . " ) ; <nl> long [ ] columnIndices = new long [ names . length ] ; <nl> for ( int i = 0 ; i < names . length - 1 ; i + + ) { <nl> - long index = table . getColumnIndex ( names [ i ] ) ; <nl> + long index = tableOrView . getColumnIndex ( names [ i ] ) ; <nl> if ( index < 0 ) { <nl> throw new IllegalArgumentException ( " Invalid query : " + names [ i ] + " does not refer to a class . " ) ; <nl> } <nl> - ColumnType type = table . getColumnType ( index ) ; <nl> + ColumnType type = tableOrView . getColumnType ( index ) ; <nl> if ( type = = ColumnType . LINK | | type = = ColumnType . LINK _ LIST ) { <nl> table = table . getLinkTarget ( index ) ; <nl> columnIndices [ i ] = index ; <nl> diff - - git a / realm / src / main / java / io / realm / internal / TableView . java b / realm / src / main / java / io / realm / internal / TableView . java <nl> index ed7b015 . . 0ff6294 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / TableView . java <nl> + + + b / realm / src / main / java / io / realm / internal / TableView . java <nl> @ @ - 79 , 6 + 79 , 10 @ @ public class TableView implements TableOrView , Closeable { <nl> this . nativePtr = nativePtr ; <nl> } <nl> <nl> + public Table getTable ( ) { <nl> + return parent ; <nl> + } <nl> + <nl> @ Override <nl> public void close ( ) { <nl> synchronized ( context ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java 
 index 017cd19 . . 2fbff84 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / SortDescriptorTests . java 
 @ @ - 80 , 24 + 80 , 15 @ @ public class SortDescriptorTests { 
 } 
 
 @ Test 
 - public void getInstanceForDistinct _ linkField ( ) { 
 - for ( RealmFieldType type : SortDescriptor . validFieldTypesForDistinct ) { 
 - long column = table . addColumn ( type , type . name ( ) ) ; 
 - table . addSearchIndex ( column ) ; 
 - } 
 + public void getInstanceForDistinct _ shouldThrowOnLinkField ( ) { 
 + RealmFieldType type = RealmFieldType . STRING ; 
 RealmFieldType objectType = RealmFieldType . OBJECT ; 
 - long columnLink = table . addColumnLink ( objectType , objectType . name ( ) , table ) ; 
 + table . addColumn ( type , type . name ( ) ) ; 
 + table . addColumnLink ( objectType , objectType . name ( ) , table ) ; 
 
 - long i = 0 ; 
 - for ( RealmFieldType type : SortDescriptor . validFieldTypesForDistinct ) { 
 - SortDescriptor sortDescriptor = SortDescriptor . getInstanceForDistinct ( table , 
 - String . format ( " % s . % s " , objectType . name ( ) , type . name ( ) ) ) ; 
 - assertEquals ( 2 , sortDescriptor . getColumnIndices ( ) [ 0 ] . length ) ; 
 - assertEquals ( columnLink , sortDescriptor . getColumnIndices ( ) [ 0 ] [ 0 ] ) ; 
 - assertEquals ( i , sortDescriptor . getColumnIndices ( ) [ 0 ] [ 1 ] ) ; 
 - assertNull ( sortDescriptor . getAscendings ( ) ) ; 
 - i + + ; 
 - } 
 + thrown . expect ( IllegalArgumentException . class ) ; 
 + thrown . expectMessage ( " is not a supported link field " ) ; 
 + SortDescriptor . getInstanceForDistinct ( table , String . format ( " % s . % s " , objectType . name ( ) , type . name ( ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 117 , 7 + 108 , 6 @ @ public class SortDescriptorTests { 
 assertEquals ( stringColumn , sortDescriptor . getColumnIndices ( ) [ 0 ] [ 0 ] ) ; 
 assertEquals ( 1 , sortDescriptor . getColumnIndices ( ) [ 1 ] . length ) ; 
 assertEquals ( intColumn , sortDescriptor . getColumnIndices ( ) [ 1 ] [ 0 ] ) ; 
 - 
 } 
 
 @ Test 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java 
 index 9d19680 . . 56a9f1c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java 
 @ @ - 24 , 7 + 24 , 7 @ @ public class FieldDescriptor { 
 private String fieldName ; 
 private boolean searchIndex ; 
 
 - public FieldDescriptor ( Table table , String fieldDescription , boolean allowList ) { 
 + public FieldDescriptor ( Table table , String fieldDescription , boolean allowLink , boolean allowList ) { 
 if ( fieldDescription = = null | | fieldDescription . isEmpty ( ) ) { 
 throw new IllegalArgumentException ( " Non - empty field name must be provided " ) ; 
 } 
 @ @ - 42 , 12 + 42 , 15 @ @ public class FieldDescriptor { 
 String . format ( " Invalid field name : ' % s ' does not refer to a class . " , names [ i ] ) ) ; 
 } 
 RealmFieldType type = table . getColumnType ( index ) ; 
 - if ( type = = RealmFieldType . OBJECT | | ( allowList & & type = = RealmFieldType . LIST ) ) { 
 - table = table . getLinkTarget ( index ) ; 
 - columnIndices [ i ] = index ; 
 + if ( ! allowLink & & type = = RealmFieldType . OBJECT ) { 
 + throw new IllegalArgumentException ( 
 + String . format ( " ' RealmObject ' field ' % s ' is not a supported link field here . " , names [ i ] ) ) ; 
 } else if ( ! allowList & & type = = RealmFieldType . LIST ) { 
 throw new IllegalArgumentException ( 
 String . format ( " ' RealmList ' field ' % s ' is not a supported link field here . " , names [ i ] ) ) ; 
 + } else if ( type = = RealmFieldType . OBJECT | | type = = RealmFieldType . LIST ) { 
 + table = table . getLinkTarget ( index ) ; 
 + columnIndices [ i ] = index ; 
 } else { 
 throw new IllegalArgumentException ( 
 String . format ( " Invalid field name : ' % s ' does not refer to a class . " , names [ i ] ) ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 index 051149f . . 94a0d2a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 @ @ - 79 , 7 + 79 , 7 @ @ public class SortDescriptor { 
 
 long [ ] [ ] columnIndices = new long [ fieldDescriptions . length ] [ ] ; 
 for ( int i = 0 ; i < fieldDescriptions . length ; i + + ) { 
 - FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , false ) ; 
 + FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , true , false ) ; 
 checkFieldTypeForSort ( descriptor , fieldDescriptions [ i ] ) ; 
 columnIndices [ i ] = descriptor . getColumnIndices ( ) ; 
 } 
 @ @ - 98 , 7 + 98 , 7 @ @ public class SortDescriptor { 
 
 long [ ] [ ] columnIndices = new long [ fieldDescriptions . length ] [ ] ; 
 for ( int i = 0 ; i < fieldDescriptions . length ; i + + ) { 
 - FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , false ) ; 
 + FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , false , false ) ; 
 checkFieldTypeForDistinct ( descriptor , fieldDescriptions [ i ] ) ; 
 columnIndices [ i ] = descriptor . getColumnIndices ( ) ; 
 }

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index d1f2f3d . . 426644a 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 0 . 75 . 0 ( ? ? ) 
 * Bug fixed in Exception text when field names was not matching the database 
 - 
 + * Bug fixed in RealmResults which prevents subquerying 
 + 
 0 . 74 . 0 ( 19 Nov 2014 ) 
 * Added support for more field / accessors naming conventions 
 * Allow static methods in model classes 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 index de3eddd . . 4b80484 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 @ @ - 430 , 4 + 430 , 15 @ @ public class RealmResultsTest extends AndroidTestCase { 
 RealmQuery < AllTypes > query = testRealm . where ( AllTypes . class ) . findAll ( ) . where ( ) ; 
 assertNotNull ( query ) ; 
 } 
 + 
 + public void testQueryResult ( ) { 
 + RealmResults < AllTypes > allTypeses = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 + assertEquals ( TEST _ DATA _ SIZE , allTypeses . size ( ) ) ; 
 + RealmResults < AllTypes > onedigits = allTypeses . where ( ) . lessThan ( FIELD _ LONG , 10 ) . findAll ( ) ; 
 + assertEquals ( Math . min ( 10 , TEST _ DATA _ SIZE ) , onedigits . size ( ) ) ; 
 + 
 + RealmResults < AllTypes > none = allTypeses . where ( ) . greaterThan ( FIELD _ LONG , TEST _ DATA _ SIZE ) . findAll ( ) ; 
 + assertEquals ( 0 , none . size ( ) ) ; 
 + } 
 + 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index 4343e02 . . 1c3d9ae 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import io . realm . internal . ColumnType ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableQuery ; 
 + import io . realm . internal . TableView ; 
 
 / * * 
 * 
 @ @ - 133 , 16 + 134 , 24 @ @ public class RealmQuery < E extends RealmObject > { 
 / / TODO : consider another caching strategy to linked classes are 
 / / included in the cache . 
 private long [ ] getColumnIndices ( String fieldName , ColumnType fieldType ) { 
 - Table table = ( Table ) getTable ( ) ; 
 + Table table ; 
 + TableOrView tableOrView = getTable ( ) ; 
 + if ( tableOrView instanceof TableView ) { 
 + TableView tableView = ( TableView ) tableOrView ; 
 + table = tableView . getTable ( ) ; 
 + } else { 
 + table = ( Table ) tableOrView ; 
 + } 
 + 
 if ( containsDot ( fieldName ) ) { 
 String [ ] names = splitString ( fieldName ) ; / / fieldName . split ( " \ \ . " ) ; 
 long [ ] columnIndices = new long [ names . length ] ; 
 for ( int i = 0 ; i < names . length - 1 ; i + + ) { 
 - long index = table . getColumnIndex ( names [ i ] ) ; 
 + long index = tableOrView . getColumnIndex ( names [ i ] ) ; 
 if ( index < 0 ) { 
 throw new IllegalArgumentException ( " Invalid query : " + names [ i ] + " does not refer to a class . " ) ; 
 } 
 - ColumnType type = table . getColumnType ( index ) ; 
 + ColumnType type = tableOrView . getColumnType ( index ) ; 
 if ( type = = ColumnType . LINK | | type = = ColumnType . LINK _ LIST ) { 
 table = table . getLinkTarget ( index ) ; 
 columnIndices [ i ] = index ; 
 diff - - git a / realm / src / main / java / io / realm / internal / TableView . java b / realm / src / main / java / io / realm / internal / TableView . java 
 index ed7b015 . . 0ff6294 100644 
 - - - a / realm / src / main / java / io / realm / internal / TableView . java 
 + + + b / realm / src / main / java / io / realm / internal / TableView . java 
 @ @ - 79 , 6 + 79 , 10 @ @ public class TableView implements TableOrView , Closeable { 
 this . nativePtr = nativePtr ; 
 } 
 
 + public Table getTable ( ) { 
 + return parent ; 
 + } 
 + 
 @ Override 
 public void close ( ) { 
 synchronized ( context ) {
