BLEU SCORE: 0.05341087579952926

TEST MSG: Add support for detached objects
GENERATED MSG: validate classes on realm creation

TEST DIFF (one line): diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / Constants . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / Constants . java <nl> index 1c11eaf . . cb746c7 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / Constants . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / Constants . java <nl> @ @ - 71 , 4 + 71 , 26 @ @ public class Constants { <nl> JAVA _ TO _ COLUMN _ TYPES . put ( " java . util . Date " , " RealmFieldType . DATE " ) ; <nl> JAVA _ TO _ COLUMN _ TYPES . put ( " byte [ ] " , " RealmFieldType . BINARY " ) ; <nl> } <nl> + <nl> + static final Map < String , String > JAVA _ TO _ FIELD _ SETTER ; <nl> + static { <nl> + JAVA _ TO _ FIELD _ SETTER = new HashMap < String , String > ( ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " byte " , " setByte " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " short " , " setShort " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " int " , " setInt " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " long " , " setLong " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " float " , " setFloat " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " double " , " setDouble " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " boolean " , " setBoolean " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Byte " , " set " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Short " , " set " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Integer " , " set " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Long " , " set " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Float " , " set " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Double " , " set " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Boolean " , " set " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . String " , " set " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " java . util . Date " , " set " ) ; <nl> + JAVA _ TO _ FIELD _ SETTER . put ( " byte [ ] " , " set " ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 59ad6fd . . 82a6c75 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 59 , 6 + 59 , 7 @ @ public class RealmProxyClassGenerator { <nl> imports . add ( " android . util . JsonReader " ) ; <nl> imports . add ( " android . util . JsonToken " ) ; <nl> imports . add ( " io . realm . RealmFieldType " ) ; <nl> + imports . add ( " io . realm . exceptions . RealmException " ) ; <nl> imports . add ( " io . realm . exceptions . RealmMigrationNeededException " ) ; <nl> imports . add ( " io . realm . internal . ColumnInfo " ) ; <nl> imports . add ( " io . realm . internal . RealmObjectProxy " ) ; <nl> @ @ - 68 , 6 + 69 , 7 @ @ public class RealmProxyClassGenerator { <nl> imports . add ( " io . realm . internal . LinkView " ) ; <nl> imports . add ( " io . realm . internal . android . JsonUtils " ) ; <nl> imports . add ( " java . io . IOException " ) ; <nl> + imports . add ( " java . lang . reflect . Field " ) ; <nl> imports . add ( " java . util . ArrayList " ) ; <nl> imports . add ( " java . util . Collections " ) ; <nl> imports . add ( " java . util . List " ) ; <nl> @ @ - 708 , 27 + 710 , 50 @ @ public class RealmProxyClassGenerator { <nl> . emitStatement ( " cache . put ( realmObject , new RealmObjectProxy . CacheData < RealmObject > ( currentDepth , standaloneObject ) ) " ) <nl> . endControlFlow ( ) ; <nl> <nl> + writer . emitStatement ( " Class < ? > clazz = standaloneObject . getClass ( ) " ) ; <nl> + writer . emitStatement ( " Field field = null " ) ; <nl> + <nl> for ( VariableElement field : metadata . getFields ( ) ) { <nl> String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> - String setter = metadata . getSetter ( fieldName ) ; <nl> String getter = metadata . getGetter ( fieldName ) ; <nl> <nl> + writer . beginControlFlow ( " try " ) ; <nl> + writer . emitStatement ( " field = clazz . getDeclaredField ( \ " % s \ " ) " , fieldName ) ; <nl> + writer . nextControlFlow ( " catch ( NoSuchFieldException e ) " ) ; <nl> + writer . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) ; <nl> + writer . endControlFlow ( ) ; <nl> + writer . emitStatement ( " field . setAccessible ( true ) " ) ; <nl> + <nl> if ( Utils . isRealmObject ( field ) ) { <nl> writer <nl> . emitEmptyLine ( ) <nl> . emitSingleLineComment ( " Deep copy of % s " , fieldName ) <nl> - . emitStatement ( " standaloneObject . % s ( % s . createDetachedCopy ( realmObject . % s ( ) , currentDepth + 1 , maxDepth , cache ) ) " , <nl> - setter , Utils . getProxyClassSimpleName ( field ) , getter ) ; <nl> + . beginControlFlow ( " try " ) <nl> + . emitStatement ( " field . set ( standaloneObject , % s . createDetachedCopy ( ( ( % sRealmProxy ) " + <nl> + " realmObject ) . % s ( ) , currentDepth + 1 , maxDepth , cache ) ) " , <nl> + Utils . getProxyClassSimpleName ( field ) , className , getter ) <nl> + . nextControlFlow ( " catch ( IllegalAccessException e ) " ) <nl> + . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) <nl> + . endControlFlow ( ) ; <nl> } else if ( Utils . isRealmList ( field ) ) { <nl> writer <nl> . emitEmptyLine ( ) <nl> . emitSingleLineComment ( " Deep copy of % s " , fieldName ) <nl> . beginControlFlow ( " if ( currentDepth = = maxDepth ) " ) <nl> - . emitStatement ( " standaloneObject . % s ( null ) " , setter ) <nl> + . beginControlFlow ( " try " ) <nl> + . emitStatement ( " field . set ( standaloneObject , null ) " ) <nl> + . nextControlFlow ( " catch ( IllegalAccessException e ) " ) <nl> + . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) <nl> + . endControlFlow ( ) <nl> . nextControlFlow ( " else " ) <nl> - . emitStatement ( " RealmList < % s > managed % sList = realmObject . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getter ) <nl> + . emitStatement ( " RealmList < % s > managed % sList = ( ( % sRealmProxy ) realmObject ) . % s ( ) " , <nl> + Utils . getGenericType ( field ) , fieldName , className , getter ) <nl> . emitStatement ( " RealmList < % 1 $ s > standalone % 2 $ sList = new RealmList < % 1 $ s > ( ) " , Utils . getGenericType ( field ) , fieldName ) <nl> - . emitStatement ( " standaloneObject . % s ( standalone % sList ) " , setter , fieldName ) <nl> + . beginControlFlow ( " try " ) <nl> + . emitStatement ( " field . set ( standaloneObject , standalone % sList ) " , fieldName ) <nl> + . nextControlFlow ( " catch ( IllegalAccessException e ) " ) <nl> + . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) <nl> + . endControlFlow ( ) <nl> . emitStatement ( " int nextDepth = currentDepth + 1 " ) <nl> . emitStatement ( " int size = managed % sList . size ( ) " , fieldName ) <nl> . beginControlFlow ( " for ( int i = 0 ; i < size ; i + + ) " ) <nl> @ @ - 738 , 7 + 763 , 13 @ @ public class RealmProxyClassGenerator { <nl> . endControlFlow ( ) <nl> . endControlFlow ( ) ; <nl> } else { <nl> - writer . emitStatement ( " standaloneObject . % s ( realmObject . % s ( ) ) " , metadata . getSetter ( fieldName ) , getter ) ; <nl> + writer . beginControlFlow ( " try " ) ; <nl> + writer . emitStatement ( " field . % s ( standaloneObject , ( ( % sRealmProxy ) realmObject ) . % s ( ) ) " , <nl> + Constants . JAVA _ TO _ FIELD _ SETTER . get ( field . asType ( ) . toString ( ) ) , className , getter ) ; <nl> + writer . nextControlFlow ( " catch ( IllegalAccessException e ) " ) ; <nl> + writer . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) ; <nl> + writer . endControlFlow ( ) ; <nl> + <nl> } <nl> } <nl> <nl> @ @ - 906 , 7 + 937 , 7 @ @ public class RealmProxyClassGenerator { <nl> " createOrUpdateUsingJsonObject " , <nl> EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , <nl> Arrays . asList ( " Realm " , " realm " , " JSONObject " , " json " , " boolean " , " update " ) , <nl> - Arrays . asList ( " JSONException " ) ) ; <nl> + Collections . singletonList ( " JSONException " ) ) ; <nl> <nl> if ( ! metadata . hasPrimaryKey ( ) ) { <nl> writer . emitStatement ( " % sRealmProxy obj = ( % sRealmProxy ) realm . createObject ( % s . class ) " , className , <nl> @ @ - 981 , 7 + 1012 , 7 @ @ public class RealmProxyClassGenerator { <nl> " createUsingJsonStream " , <nl> EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , <nl> Arrays . asList ( " Realm " , " realm " , " JsonReader " , " reader " ) , <nl> - Arrays . asList ( " IOException " ) ) ; <nl> + Collections . singletonList ( " IOException " ) ) ; <nl> <nl> writer . emitStatement ( " % sRealmProxy obj = ( % sRealmProxy ) realm . createObject ( % s . class ) " , className , className , <nl> className ) ;
NEAREST DIFF (one line): diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> index d58f14f . . 4aafcf2 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> @ @ - 35 , 8 + 35 , 8 @ @ import java . util . Set ; <nl> @ SupportedAnnotationTypes ( { " io . realm . annotations . RealmClass " , " io . realm . annotations . Ignore " } ) <nl> @ SupportedSourceVersion ( javax . lang . model . SourceVersion . RELEASE _ 6 ) <nl> public class RealmProcessor extends AbstractProcessor { <nl> - Set < String > classesToValidate = new HashSet < > ( ) ; <nl> - boolean done = false ; <nl> + static HashSet < String > classesToValidate = new HashSet < > ( ) ; <nl> + static boolean done = false ; <nl> <nl> @ Override <nl> public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 4f04d39 . . 2d5c060 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 31 , 7 + 31 , 6 @ @ import java . io . IOException ; <nl> import java . lang . String ; <nl> import java . util . * ; <nl> <nl> - <nl> public class RealmProxyClassGenerator { <nl> private ProcessingEnvironment processingEnvironment ; <nl> private String className ; <nl> @ @ - 221 , 6 + 220 , 7 @ @ public class RealmProxyClassGenerator { <nl> " io . realm . RealmObject " , <nl> " java . util . Date " , <nl> " java . util . Arrays " , <nl> + " java . util . HashMap " , <nl> packageName + " . * " ) <nl> . emitEmptyLine ( ) ; <nl> <nl> @ @ - 384 , 6 + 384 , 75 @ @ public class RealmProxyClassGenerator { <nl> writer . emitEmptyLine ( ) ; <nl> <nl> / * * <nl> + * validateTable method <nl> + * / <nl> + writer . beginMethod ( <nl> + " void " , / / Return type <nl> + " validateTable " , / / Method name <nl> + EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers <nl> + " ImplicitTransaction " , " transaction " ) ; / / Argument type & argument name <nl> + <nl> + writer . beginControlFlow ( " if ( transaction . hasTable ( \ " " + tablePrefix + this . className + " \ " ) ) " ) ; <nl> + writer . emitStatement ( " Table table = transaction . getTable ( \ " % s % s \ " ) " , tablePrefix , this . className ) ; <nl> + <nl> + / / verify number of columns <nl> + writer . beginControlFlow ( " if ( table . getColumnCount ( ) ! = " + fields . size ( ) + " ) " ) ; <nl> + writer . emitStatement ( " throw new IllegalStateException ( \ " Column count does not match \ " ) " ) ; <nl> + writer . endControlFlow ( ) ; <nl> + <nl> + / / create type dictionary for lookup <nl> + writer . emitStatement ( " HashMap < String , ColumnType > columnTypes = new HashMap < String , ColumnType > ( ) " ) ; <nl> + writer . beginControlFlow ( " for ( long i = 0 ; i < " + fields . size ( ) + " ; i + + ) " ) ; <nl> + writer . emitStatement ( " columnTypes . put ( table . getColumnName ( i ) , table . getColumnType ( i ) ) " ) ; <nl> + writer . endControlFlow ( ) ; <nl> + <nl> + / / For each field verfiy there is a corresponding column <nl> + for ( VariableElement field : fields ) { <nl> + String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> + String fieldTypeCanonicalName = field . asType ( ) . toString ( ) ; <nl> + String fieldTypeName ; <nl> + if ( fieldTypeCanonicalName . contains ( " . " ) ) { <nl> + fieldTypeName = fieldTypeCanonicalName . substring ( fieldTypeCanonicalName . lastIndexOf ( ' . ' ) + 1 ) ; <nl> + } else { <nl> + fieldTypeName = fieldTypeCanonicalName ; <nl> + } <nl> + <nl> + / / make sure types align <nl> + writer . beginControlFlow ( " if ( ! columnTypes . containsKey ( \ " % s \ " ) ) " , fieldName ) ; <nl> + writer . emitStatement ( " throw new IllegalStateException ( \ " Missing column for ' % s ' \ " ) " , fieldName ) ; <nl> + writer . endControlFlow ( ) ; <nl> + writer . beginControlFlow ( " if ( columnTypes . get ( \ " % s \ " ) ! = % s ) " , fieldName , JAVA _ TO _ COLUMN _ TYPES . get ( fieldTypeCanonicalName ) ) ; <nl> + writer . emitStatement ( " throw new IllegalStateException ( \ " Invalid type ' % s ' for column for ' % s ' \ " ) " , <nl> + fieldName , fieldTypeName ) ; <nl> + writer . endControlFlow ( ) ; <nl> + <nl> + / * FIXME - add validatoin for link and array types by comparing link targets <nl> + if ( typeUtils . isAssignable ( field . asType ( ) , realmObject ) ) { <nl> + writer . beginControlFlow ( " if ( ! transaction . hasTable ( \ " % s % s \ " ) ) " , tablePrefix , fieldTypeName ) ; <nl> + writer . emitStatement ( " % sRealmProxy . initTable ( transaction ) " , fieldTypeName ) ; <nl> + writer . endControlFlow ( ) ; <nl> + writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK , \ " % s \ " , transaction . getTable ( \ " % s % s \ " ) ) " , <nl> + fieldName . toLowerCase ( Locale . getDefault ( ) ) , tablePrefix , fieldTypeName ) ; <nl> + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> + String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; <nl> + String genericType ; <nl> + if ( genericCanonicalType . contains ( " . " ) ) { <nl> + genericType = genericCanonicalType . substring ( genericCanonicalType . lastIndexOf ( ' . ' ) + 1 ) ; <nl> + } else { <nl> + genericType = genericCanonicalType ; <nl> + } <nl> + writer . beginControlFlow ( " if ( ! transaction . hasTable ( \ " % s % s \ " ) ) " , tablePrefix , genericType ) ; <nl> + writer . emitStatement ( " % sRealmProxy . initTable ( transaction ) " , genericType ) ; <nl> + writer . endControlFlow ( ) ; <nl> + writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK _ LIST , \ " % s \ " , transaction . getTable ( \ " % s % s \ " ) ) " , <nl> + fieldName . toLowerCase ( Locale . getDefault ( ) ) , tablePrefix , genericType ) ; <nl> + } * / <nl> + } <nl> + writer . endControlFlow ( ) ; <nl> + writer . endMethod ( ) ; <nl> + writer . emitEmptyLine ( ) ; <nl> + <nl> + / * * <nl> * toString method <nl> * / <nl> writer . emitAnnotation ( " Override " ) ; <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index b323bd6 . . bb0727b 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ public class Realm { <nl> private static final Map < String , ThreadRealm > realms = new HashMap < String , ThreadRealm > ( ) ; <nl> private static final String TAG = " REALM " ; <nl> private static final String TABLE _ PREFIX = " class _ " ; <nl> + private static boolean validated = false ; <nl> <nl> private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; <nl> <nl> @ @ - 148 , 10 + 149 , 10 @ @ public class Realm { <nl> * / <nl> public static Realm create ( File writableFolder , String filename ) { <nl> String absolutePath = new File ( writableFolder , filename ) . getAbsolutePath ( ) ; <nl> - return create ( absolutePath ) ; <nl> + return createAndValidate ( absolutePath , true ) ; <nl> } <nl> <nl> - private static Realm create ( String absolutePath ) { <nl> + private static Realm createAndValidate ( String absolutePath , boolean validateSchema ) { <nl> ThreadRealm threadRealm = realms . get ( absolutePath ) ; <nl> if ( threadRealm = = null ) { <nl> threadRealm = new ThreadRealm ( absolutePath ) ; <nl> @ @ - 166 , 6 + 167 , 34 @ @ public class Realm { <nl> realmSoftReference = threadRealm . get ( ) ; <nl> realm = realmSoftReference . get ( ) ; <nl> } <nl> + if ( validateSchema ) { <nl> + / / FIXME - thread safety <nl> + if ( ! validated ) { <nl> + try { <nl> + Class < ? > validationClass = Class . forName ( " io . realm . ValidationList " ) ; <nl> + Method getProxyClassesMethod = validationClass . getMethod ( " getProxyClasses " ) ; <nl> + List < String > proxyClasses = ( List < String > ) getProxyClassesMethod . invoke ( null ) ; <nl> + for ( String className : proxyClasses ) { <nl> + Class < ? > modelClass = Class . forName ( className ) ; <nl> + Method validateMethod = modelClass . getMethod ( " validateTable " ) ; <nl> + validateMethod . invoke ( null , realm . transaction ) ; <nl> + } <nl> + } catch ( ClassNotFoundException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return null ; / / TODO : throw RealmException <nl> + } catch ( NoSuchMethodException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return null ; / / TODO : throw RealmException <nl> + } catch ( IllegalAccessException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return null ; / / TODO : throw RealmException <nl> + } catch ( InvocationTargetException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return null ; / / TODO : throw RealmException <nl> + } <nl> + validated = true ; <nl> + } <nl> + } <nl> return realm ; <nl> } <nl> <nl> @ @ - 479 , 11 + 508 , 6 @ @ public class Realm { <nl> return where ( clazz ) . findAll ( ) ; <nl> } <nl> <nl> - / / Migration <nl> - public void ensureRealmAtVersion ( int version , RealmMigration migration ) { <nl> - migration . execute ( this , version ) ; <nl> - } <nl> - <nl> / / Notifications <nl> public void addChangeListener ( RealmChangeListener listener ) { <nl> changeListeners . add ( listener ) ; <nl> @ @ - 541 , 11 + 565 , 11 @ @ public class Realm { <nl> getTable ( classSpec ) . clear ( ) ; <nl> } <nl> <nl> - public int getVersion ( ) { <nl> + private int getVersion ( ) { <nl> return version ; <nl> } <nl> <nl> - public void setVersion ( int version ) { <nl> + private void setVersion ( int version ) { <nl> this . version = version ; <nl> } <nl> <nl> @ @ - 555 , 6 + 579 , 16 @ @ public class Realm { <nl> * @ param context an Android context . <nl> * @ return false if a file could not be deleted . The failing file will be logged . <nl> * / <nl> + public void migrateRealmAtPath ( String realmPath , RealmMigration migration ) { <nl> + migration . execute ( this , version ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Delete the Realm file from the filesystem for the default Realm ( named " default . realm " ) . <nl> + * The realm must be unused and closed before calling this method . <nl> + * @ param context an Android context . <nl> + * @ return false if a file could not be deleted . The failing file will be logged . <nl> + * / <nl> public static boolean deleteRealmFile ( Context context ) { <nl> return deleteRealmFile ( context , DEFAULT _ REALM _ NAME ) ; <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmMigration . java b / realm / src / main / java / io / realm / RealmMigration . java <nl> index 2e7df7f . . e7dae52 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmMigration . java <nl> + + + b / realm / src / main / java / io / realm / RealmMigration . java <nl> @ @ - 18 , 6 + 18 , 11 @ @ package io . realm ; <nl> <nl> public interface RealmMigration { <nl> <nl> - public void execute ( Realm realm , int version ) ; <nl> - <nl> + / * * <nl> + * Implement this method in your sublcass to perform <nl> + * @ return The version of the Realm after executing the migration <nl> + * @ param realm The Realm on which to perform the migration <nl> + * @ param version The version of the Realm at the start of the migration <nl> + * / <nl> + public int execute ( Realm realm , int version ) ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / Constants . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / Constants . java 
 index 1c11eaf . . cb746c7 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / Constants . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / Constants . java 
 @ @ - 71 , 4 + 71 , 26 @ @ public class Constants { 
 JAVA _ TO _ COLUMN _ TYPES . put ( " java . util . Date " , " RealmFieldType . DATE " ) ; 
 JAVA _ TO _ COLUMN _ TYPES . put ( " byte [ ] " , " RealmFieldType . BINARY " ) ; 
 } 
 + 
 + static final Map < String , String > JAVA _ TO _ FIELD _ SETTER ; 
 + static { 
 + JAVA _ TO _ FIELD _ SETTER = new HashMap < String , String > ( ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " byte " , " setByte " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " short " , " setShort " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " int " , " setInt " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " long " , " setLong " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " float " , " setFloat " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " double " , " setDouble " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " boolean " , " setBoolean " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Byte " , " set " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Short " , " set " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Integer " , " set " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Long " , " set " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Float " , " set " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Double " , " set " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . Boolean " , " set " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " java . lang . String " , " set " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " java . util . Date " , " set " ) ; 
 + JAVA _ TO _ FIELD _ SETTER . put ( " byte [ ] " , " set " ) ; 
 + } 
 } 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 59ad6fd . . 82a6c75 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 59 , 6 + 59 , 7 @ @ public class RealmProxyClassGenerator { 
 imports . add ( " android . util . JsonReader " ) ; 
 imports . add ( " android . util . JsonToken " ) ; 
 imports . add ( " io . realm . RealmFieldType " ) ; 
 + imports . add ( " io . realm . exceptions . RealmException " ) ; 
 imports . add ( " io . realm . exceptions . RealmMigrationNeededException " ) ; 
 imports . add ( " io . realm . internal . ColumnInfo " ) ; 
 imports . add ( " io . realm . internal . RealmObjectProxy " ) ; 
 @ @ - 68 , 6 + 69 , 7 @ @ public class RealmProxyClassGenerator { 
 imports . add ( " io . realm . internal . LinkView " ) ; 
 imports . add ( " io . realm . internal . android . JsonUtils " ) ; 
 imports . add ( " java . io . IOException " ) ; 
 + imports . add ( " java . lang . reflect . Field " ) ; 
 imports . add ( " java . util . ArrayList " ) ; 
 imports . add ( " java . util . Collections " ) ; 
 imports . add ( " java . util . List " ) ; 
 @ @ - 708 , 27 + 710 , 50 @ @ public class RealmProxyClassGenerator { 
 . emitStatement ( " cache . put ( realmObject , new RealmObjectProxy . CacheData < RealmObject > ( currentDepth , standaloneObject ) ) " ) 
 . endControlFlow ( ) ; 
 
 + writer . emitStatement ( " Class < ? > clazz = standaloneObject . getClass ( ) " ) ; 
 + writer . emitStatement ( " Field field = null " ) ; 
 + 
 for ( VariableElement field : metadata . getFields ( ) ) { 
 String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 - String setter = metadata . getSetter ( fieldName ) ; 
 String getter = metadata . getGetter ( fieldName ) ; 
 
 + writer . beginControlFlow ( " try " ) ; 
 + writer . emitStatement ( " field = clazz . getDeclaredField ( \ " % s \ " ) " , fieldName ) ; 
 + writer . nextControlFlow ( " catch ( NoSuchFieldException e ) " ) ; 
 + writer . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) ; 
 + writer . endControlFlow ( ) ; 
 + writer . emitStatement ( " field . setAccessible ( true ) " ) ; 
 + 
 if ( Utils . isRealmObject ( field ) ) { 
 writer 
 . emitEmptyLine ( ) 
 . emitSingleLineComment ( " Deep copy of % s " , fieldName ) 
 - . emitStatement ( " standaloneObject . % s ( % s . createDetachedCopy ( realmObject . % s ( ) , currentDepth + 1 , maxDepth , cache ) ) " , 
 - setter , Utils . getProxyClassSimpleName ( field ) , getter ) ; 
 + . beginControlFlow ( " try " ) 
 + . emitStatement ( " field . set ( standaloneObject , % s . createDetachedCopy ( ( ( % sRealmProxy ) " + 
 + " realmObject ) . % s ( ) , currentDepth + 1 , maxDepth , cache ) ) " , 
 + Utils . getProxyClassSimpleName ( field ) , className , getter ) 
 + . nextControlFlow ( " catch ( IllegalAccessException e ) " ) 
 + . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) 
 + . endControlFlow ( ) ; 
 } else if ( Utils . isRealmList ( field ) ) { 
 writer 
 . emitEmptyLine ( ) 
 . emitSingleLineComment ( " Deep copy of % s " , fieldName ) 
 . beginControlFlow ( " if ( currentDepth = = maxDepth ) " ) 
 - . emitStatement ( " standaloneObject . % s ( null ) " , setter ) 
 + . beginControlFlow ( " try " ) 
 + . emitStatement ( " field . set ( standaloneObject , null ) " ) 
 + . nextControlFlow ( " catch ( IllegalAccessException e ) " ) 
 + . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) 
 + . endControlFlow ( ) 
 . nextControlFlow ( " else " ) 
 - . emitStatement ( " RealmList < % s > managed % sList = realmObject . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getter ) 
 + . emitStatement ( " RealmList < % s > managed % sList = ( ( % sRealmProxy ) realmObject ) . % s ( ) " , 
 + Utils . getGenericType ( field ) , fieldName , className , getter ) 
 . emitStatement ( " RealmList < % 1 $ s > standalone % 2 $ sList = new RealmList < % 1 $ s > ( ) " , Utils . getGenericType ( field ) , fieldName ) 
 - . emitStatement ( " standaloneObject . % s ( standalone % sList ) " , setter , fieldName ) 
 + . beginControlFlow ( " try " ) 
 + . emitStatement ( " field . set ( standaloneObject , standalone % sList ) " , fieldName ) 
 + . nextControlFlow ( " catch ( IllegalAccessException e ) " ) 
 + . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) 
 + . endControlFlow ( ) 
 . emitStatement ( " int nextDepth = currentDepth + 1 " ) 
 . emitStatement ( " int size = managed % sList . size ( ) " , fieldName ) 
 . beginControlFlow ( " for ( int i = 0 ; i < size ; i + + ) " ) 
 @ @ - 738 , 7 + 763 , 13 @ @ public class RealmProxyClassGenerator { 
 . endControlFlow ( ) 
 . endControlFlow ( ) ; 
 } else { 
 - writer . emitStatement ( " standaloneObject . % s ( realmObject . % s ( ) ) " , metadata . getSetter ( fieldName ) , getter ) ; 
 + writer . beginControlFlow ( " try " ) ; 
 + writer . emitStatement ( " field . % s ( standaloneObject , ( ( % sRealmProxy ) realmObject ) . % s ( ) ) " , 
 + Constants . JAVA _ TO _ FIELD _ SETTER . get ( field . asType ( ) . toString ( ) ) , className , getter ) ; 
 + writer . nextControlFlow ( " catch ( IllegalAccessException e ) " ) ; 
 + writer . emitStatement ( " throw new RealmException ( e . getMessage ( ) ) " ) ; 
 + writer . endControlFlow ( ) ; 
 + 
 } 
 } 
 
 @ @ - 906 , 7 + 937 , 7 @ @ public class RealmProxyClassGenerator { 
 " createOrUpdateUsingJsonObject " , 
 EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , 
 Arrays . asList ( " Realm " , " realm " , " JSONObject " , " json " , " boolean " , " update " ) , 
 - Arrays . asList ( " JSONException " ) ) ; 
 + Collections . singletonList ( " JSONException " ) ) ; 
 
 if ( ! metadata . hasPrimaryKey ( ) ) { 
 writer . emitStatement ( " % sRealmProxy obj = ( % sRealmProxy ) realm . createObject ( % s . class ) " , className , 
 @ @ - 981 , 7 + 1012 , 7 @ @ public class RealmProxyClassGenerator { 
 " createUsingJsonStream " , 
 EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , 
 Arrays . asList ( " Realm " , " realm " , " JsonReader " , " reader " ) , 
 - Arrays . asList ( " IOException " ) ) ; 
 + Collections . singletonList ( " IOException " ) ) ; 
 
 writer . emitStatement ( " % sRealmProxy obj = ( % sRealmProxy ) realm . createObject ( % s . class ) " , className , className , 
 className ) ;

NEAREST DIFF:
diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 index d58f14f . . 4aafcf2 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 @ @ - 35 , 8 + 35 , 8 @ @ import java . util . Set ; 
 @ SupportedAnnotationTypes ( { " io . realm . annotations . RealmClass " , " io . realm . annotations . Ignore " } ) 
 @ SupportedSourceVersion ( javax . lang . model . SourceVersion . RELEASE _ 6 ) 
 public class RealmProcessor extends AbstractProcessor { 
 - Set < String > classesToValidate = new HashSet < > ( ) ; 
 - boolean done = false ; 
 + static HashSet < String > classesToValidate = new HashSet < > ( ) ; 
 + static boolean done = false ; 
 
 @ Override 
 public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 4f04d39 . . 2d5c060 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 31 , 7 + 31 , 6 @ @ import java . io . IOException ; 
 import java . lang . String ; 
 import java . util . * ; 
 
 - 
 public class RealmProxyClassGenerator { 
 private ProcessingEnvironment processingEnvironment ; 
 private String className ; 
 @ @ - 221 , 6 + 220 , 7 @ @ public class RealmProxyClassGenerator { 
 " io . realm . RealmObject " , 
 " java . util . Date " , 
 " java . util . Arrays " , 
 + " java . util . HashMap " , 
 packageName + " . * " ) 
 . emitEmptyLine ( ) ; 
 
 @ @ - 384 , 6 + 384 , 75 @ @ public class RealmProxyClassGenerator { 
 writer . emitEmptyLine ( ) ; 
 
 / * * 
 + * validateTable method 
 + * / 
 + writer . beginMethod ( 
 + " void " , / / Return type 
 + " validateTable " , / / Method name 
 + EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers 
 + " ImplicitTransaction " , " transaction " ) ; / / Argument type & argument name 
 + 
 + writer . beginControlFlow ( " if ( transaction . hasTable ( \ " " + tablePrefix + this . className + " \ " ) ) " ) ; 
 + writer . emitStatement ( " Table table = transaction . getTable ( \ " % s % s \ " ) " , tablePrefix , this . className ) ; 
 + 
 + / / verify number of columns 
 + writer . beginControlFlow ( " if ( table . getColumnCount ( ) ! = " + fields . size ( ) + " ) " ) ; 
 + writer . emitStatement ( " throw new IllegalStateException ( \ " Column count does not match \ " ) " ) ; 
 + writer . endControlFlow ( ) ; 
 + 
 + / / create type dictionary for lookup 
 + writer . emitStatement ( " HashMap < String , ColumnType > columnTypes = new HashMap < String , ColumnType > ( ) " ) ; 
 + writer . beginControlFlow ( " for ( long i = 0 ; i < " + fields . size ( ) + " ; i + + ) " ) ; 
 + writer . emitStatement ( " columnTypes . put ( table . getColumnName ( i ) , table . getColumnType ( i ) ) " ) ; 
 + writer . endControlFlow ( ) ; 
 + 
 + / / For each field verfiy there is a corresponding column 
 + for ( VariableElement field : fields ) { 
 + String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 + String fieldTypeCanonicalName = field . asType ( ) . toString ( ) ; 
 + String fieldTypeName ; 
 + if ( fieldTypeCanonicalName . contains ( " . " ) ) { 
 + fieldTypeName = fieldTypeCanonicalName . substring ( fieldTypeCanonicalName . lastIndexOf ( ' . ' ) + 1 ) ; 
 + } else { 
 + fieldTypeName = fieldTypeCanonicalName ; 
 + } 
 + 
 + / / make sure types align 
 + writer . beginControlFlow ( " if ( ! columnTypes . containsKey ( \ " % s \ " ) ) " , fieldName ) ; 
 + writer . emitStatement ( " throw new IllegalStateException ( \ " Missing column for ' % s ' \ " ) " , fieldName ) ; 
 + writer . endControlFlow ( ) ; 
 + writer . beginControlFlow ( " if ( columnTypes . get ( \ " % s \ " ) ! = % s ) " , fieldName , JAVA _ TO _ COLUMN _ TYPES . get ( fieldTypeCanonicalName ) ) ; 
 + writer . emitStatement ( " throw new IllegalStateException ( \ " Invalid type ' % s ' for column for ' % s ' \ " ) " , 
 + fieldName , fieldTypeName ) ; 
 + writer . endControlFlow ( ) ; 
 + 
 + / * FIXME - add validatoin for link and array types by comparing link targets 
 + if ( typeUtils . isAssignable ( field . asType ( ) , realmObject ) ) { 
 + writer . beginControlFlow ( " if ( ! transaction . hasTable ( \ " % s % s \ " ) ) " , tablePrefix , fieldTypeName ) ; 
 + writer . emitStatement ( " % sRealmProxy . initTable ( transaction ) " , fieldTypeName ) ; 
 + writer . endControlFlow ( ) ; 
 + writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK , \ " % s \ " , transaction . getTable ( \ " % s % s \ " ) ) " , 
 + fieldName . toLowerCase ( Locale . getDefault ( ) ) , tablePrefix , fieldTypeName ) ; 
 + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 + String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; 
 + String genericType ; 
 + if ( genericCanonicalType . contains ( " . " ) ) { 
 + genericType = genericCanonicalType . substring ( genericCanonicalType . lastIndexOf ( ' . ' ) + 1 ) ; 
 + } else { 
 + genericType = genericCanonicalType ; 
 + } 
 + writer . beginControlFlow ( " if ( ! transaction . hasTable ( \ " % s % s \ " ) ) " , tablePrefix , genericType ) ; 
 + writer . emitStatement ( " % sRealmProxy . initTable ( transaction ) " , genericType ) ; 
 + writer . endControlFlow ( ) ; 
 + writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK _ LIST , \ " % s \ " , transaction . getTable ( \ " % s % s \ " ) ) " , 
 + fieldName . toLowerCase ( Locale . getDefault ( ) ) , tablePrefix , genericType ) ; 
 + } * / 
 + } 
 + writer . endControlFlow ( ) ; 
 + writer . endMethod ( ) ; 
 + writer . emitEmptyLine ( ) ; 
 + 
 + / * * 
 * toString method 
 * / 
 writer . emitAnnotation ( " Override " ) ; 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index b323bd6 . . bb0727b 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 45 , 6 + 45 , 7 @ @ public class Realm { 
 private static final Map < String , ThreadRealm > realms = new HashMap < String , ThreadRealm > ( ) ; 
 private static final String TAG = " REALM " ; 
 private static final String TABLE _ PREFIX = " class _ " ; 
 + private static boolean validated = false ; 
 
 private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; 
 
 @ @ - 148 , 10 + 149 , 10 @ @ public class Realm { 
 * / 
 public static Realm create ( File writableFolder , String filename ) { 
 String absolutePath = new File ( writableFolder , filename ) . getAbsolutePath ( ) ; 
 - return create ( absolutePath ) ; 
 + return createAndValidate ( absolutePath , true ) ; 
 } 
 
 - private static Realm create ( String absolutePath ) { 
 + private static Realm createAndValidate ( String absolutePath , boolean validateSchema ) { 
 ThreadRealm threadRealm = realms . get ( absolutePath ) ; 
 if ( threadRealm = = null ) { 
 threadRealm = new ThreadRealm ( absolutePath ) ; 
 @ @ - 166 , 6 + 167 , 34 @ @ public class Realm { 
 realmSoftReference = threadRealm . get ( ) ; 
 realm = realmSoftReference . get ( ) ; 
 } 
 + if ( validateSchema ) { 
 + / / FIXME - thread safety 
 + if ( ! validated ) { 
 + try { 
 + Class < ? > validationClass = Class . forName ( " io . realm . ValidationList " ) ; 
 + Method getProxyClassesMethod = validationClass . getMethod ( " getProxyClasses " ) ; 
 + List < String > proxyClasses = ( List < String > ) getProxyClassesMethod . invoke ( null ) ; 
 + for ( String className : proxyClasses ) { 
 + Class < ? > modelClass = Class . forName ( className ) ; 
 + Method validateMethod = modelClass . getMethod ( " validateTable " ) ; 
 + validateMethod . invoke ( null , realm . transaction ) ; 
 + } 
 + } catch ( ClassNotFoundException e ) { 
 + e . printStackTrace ( ) ; 
 + return null ; / / TODO : throw RealmException 
 + } catch ( NoSuchMethodException e ) { 
 + e . printStackTrace ( ) ; 
 + return null ; / / TODO : throw RealmException 
 + } catch ( IllegalAccessException e ) { 
 + e . printStackTrace ( ) ; 
 + return null ; / / TODO : throw RealmException 
 + } catch ( InvocationTargetException e ) { 
 + e . printStackTrace ( ) ; 
 + return null ; / / TODO : throw RealmException 
 + } 
 + validated = true ; 
 + } 
 + } 
 return realm ; 
 } 
 
 @ @ - 479 , 11 + 508 , 6 @ @ public class Realm { 
 return where ( clazz ) . findAll ( ) ; 
 } 
 
 - / / Migration 
 - public void ensureRealmAtVersion ( int version , RealmMigration migration ) { 
 - migration . execute ( this , version ) ; 
 - } 
 - 
 / / Notifications 
 public void addChangeListener ( RealmChangeListener listener ) { 
 changeListeners . add ( listener ) ; 
 @ @ - 541 , 11 + 565 , 11 @ @ public class Realm { 
 getTable ( classSpec ) . clear ( ) ; 
 } 
 
 - public int getVersion ( ) { 
 + private int getVersion ( ) { 
 return version ; 
 } 
 
 - public void setVersion ( int version ) { 
 + private void setVersion ( int version ) { 
 this . version = version ; 
 } 
 
 @ @ - 555 , 6 + 579 , 16 @ @ public class Realm { 
 * @ param context an Android context . 
 * @ return false if a file could not be deleted . The failing file will be logged . 
 * / 
 + public void migrateRealmAtPath ( String realmPath , RealmMigration migration ) { 
 + migration . execute ( this , version ) ; 
 + } 
 + 
 + / * * 
 + * Delete the Realm file from the filesystem for the default Realm ( named " default . realm " ) . 
 + * The realm must be unused and closed before calling this method . 
 + * @ param context an Android context . 
 + * @ return false if a file could not be deleted . The failing file will be logged . 
 + * / 
 public static boolean deleteRealmFile ( Context context ) { 
 return deleteRealmFile ( context , DEFAULT _ REALM _ NAME ) ; 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmMigration . java b / realm / src / main / java / io / realm / RealmMigration . java 
 index 2e7df7f . . e7dae52 100644 
 - - - a / realm / src / main / java / io / realm / RealmMigration . java 
 + + + b / realm / src / main / java / io / realm / RealmMigration . java 
 @ @ - 18 , 6 + 18 , 11 @ @ package io . realm ; 
 
 public interface RealmMigration { 
 
 - public void execute ( Realm realm , int version ) ; 
 - 
 + / * * 
 + * Implement this method in your sublcass to perform 
 + * @ return The version of the Realm after executing the migration 
 + * @ param realm The Realm on which to perform the migration 
 + * @ param version The version of the Realm at the start of the migration 
 + * / 
 + public int execute ( Realm realm , int version ) ; 
 }
