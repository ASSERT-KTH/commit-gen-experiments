BLEU SCORE: 0.029381754016308166

TEST MSG: Expose schemaVersion in SyncConfig
GENERATED MSG: Make Sync API take advantage of global init

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> index cb8a1c6 . . 8bec3bf 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java <nl> @ @ - 142 , 25 + 142 , 39 @ @ public class TestRealmConfigurationFactory extends TemporaryFolder { <nl> } <nl> <nl> / / Copies a Realm file from assets to temp dir <nl> - public void copyRealmFromAssets ( Context context , String realmPath , String newName ) <nl> - throws IOException { <nl> - / / Delete the existing file before copy <nl> - RealmConfiguration configToDelete = new RealmConfiguration . Builder ( ) <nl> + public void copyRealmFromAssets ( Context context , String realmPath , String newName ) throws IOException { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( ) <nl> . directory ( getRoot ( ) ) <nl> . name ( newName ) <nl> . build ( ) ; <nl> - Realm . deleteRealm ( configToDelete ) ; <nl> - <nl> - AssetManager assetManager = context . getAssets ( ) ; <nl> - InputStream is = assetManager . open ( realmPath ) ; <nl> - File file = new File ( getRoot ( ) , newName ) ; <nl> - FileOutputStream outputStream = new FileOutputStream ( file ) ; <nl> - byte [ ] buf = new byte [ 1024 ] ; <nl> - int bytesRead ; <nl> - while ( ( bytesRead = is . read ( buf ) ) > - 1 ) { <nl> - outputStream . write ( buf , 0 , bytesRead ) ; <nl> + <nl> + copyRealmFromAssets ( context , realmPath , config ) ; <nl> + } <nl> + <nl> + public void copyRealmFromAssets ( Context context , String realmPath , RealmConfiguration config ) throws IOException { <nl> + / / Delete the existing file before copy <nl> + Realm . deleteRealm ( config ) ; <nl> + <nl> + File outFile = new File ( config . getRealmDirectory ( ) , config . getRealmFileName ( ) ) ; <nl> + <nl> + InputStream is = null ; <nl> + FileOutputStream os = null ; <nl> + try { <nl> + is = context . getAssets ( ) . open ( realmPath ) ; <nl> + os = new FileOutputStream ( outFile ) ; <nl> + <nl> + byte [ ] buf = new byte [ 1024 ] ; <nl> + int bytesRead ; <nl> + while ( ( bytesRead = is . read ( buf ) ) > - 1 ) { <nl> + os . write ( buf , 0 , bytesRead ) ; <nl> + } <nl> + } finally { <nl> + if ( is ! = null ) { <nl> + try { is . close ( ) ; } catch ( IOException ignore ) { } <nl> + } <nl> + if ( os ! = null ) { <nl> + try { os . close ( ) ; } catch ( IOException ignore ) { } <nl> + } <nl> } <nl> - outputStream . close ( ) ; <nl> - is . close ( ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / assets / schemaversion _ v1 . realm b / realm / realm - library / src / androidTestObjectServer / assets / schemaversion _ v1 . realm <nl> new file mode 100644 <nl> index 0000000 . . d2dac44 <nl> Binary files / dev / null and b / realm / realm - library / src / androidTestObjectServer / assets / schemaversion _ v1 . realm differ <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / assets / versionTest . realm b / realm / realm - library / src / androidTestObjectServer / assets / versionTest . realm <nl> new file mode 100644 <nl> index 0000000 . . 85cd0c4 <nl> Binary files / dev / null and b / realm / realm - library / src / androidTestObjectServer / assets / versionTest . realm differ <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java <nl> index 92f70f2 . . 58203b7 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java <nl> @ @ - 33 , 13 + 33 , 14 @ @ import java . io . IOException ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> + import io . realm . entities . AllJavaTypes ; <nl> import io . realm . entities . StringOnly ; <nl> import io . realm . rule . RunInLooperThread ; <nl> - import io . realm . rule . TestRealmConfigurationFactory ; <nl> + import io . realm . rule . TestSyncConfigurationFactory ; <nl> <nl> import static io . realm . util . SyncTestUtils . createNamedTestUser ; <nl> import static io . realm . util . SyncTestUtils . createTestUser ; <nl> - import static junit . framework . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> @ @ - 49 , 7 + 50 , 7 @ @ import static org . junit . Assert . fail ; <nl> @ RunWith ( AndroidJUnit4 . class ) <nl> public class SyncConfigurationTests { <nl> @ Rule <nl> - public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> + public final TestSyncConfigurationFactory configFactory = new TestSyncConfigurationFactory ( ) ; <nl> <nl> @ Rule <nl> public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; <nl> @ @ - 360 , 7 + 361 , 8 @ @ public class SyncConfigurationTests { <nl> SyncUser user = createTestUser ( ) ; <nl> String url = " realm : / / objectserver . realm . io / default " ; <nl> <nl> - SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) <nl> + SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( user , url ) <nl> + . schema ( StringOnly . class ) <nl> . initialData ( new Realm . Transaction ( ) { <nl> @ Override <nl> public void execute ( Realm realm ) { <nl> @ @ - 414 , 6 + 416 , 88 @ @ public class SyncConfigurationTests { <nl> Realm . compactRealm ( config ) ; <nl> } <nl> <nl> + @ Test <nl> + public void schemaVersion _ throwsIfLessThanCurrentVersion ( ) throws IOException { <nl> + SyncUser user = createTestUser ( ) ; <nl> + String url = " realm : / / ros . realm . io / ~ / default " ; <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( user , url ) <nl> + . schema ( AllJavaTypes . class , StringOnly . class ) <nl> + . name ( " schemaversion _ v1 . realm " ) <nl> + . schemaVersion ( 0 ) <nl> + . build ( ) ; <nl> + <nl> + / / Add v1 of the Realm to the filsystem <nl> + configFactory . copyRealmFromAssets ( context , " schemaversion _ v1 . realm " , config ) ; <nl> + <nl> + / / Opening the Realm should throw an exception since the schema version is less than the one in the file . <nl> + Realm realm = null ; <nl> + try { <nl> + realm = Realm . getInstance ( config ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException ignore ) { <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void schemaVersion _ bumpWhenUpgradingSchema ( ) throws IOException { <nl> + SyncUser user = createTestUser ( ) ; <nl> + String url = " realm : / / ros . realm . io / ~ / default " ; <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( user , url ) <nl> + . schema ( AllJavaTypes . class , StringOnly . class ) <nl> + . name ( " schemaversion _ v1 . realm " ) <nl> + . schemaVersion ( 2 ) <nl> + . build ( ) ; <nl> + <nl> + / / Add v1 of the Realm to the file system . v1 is missing the class ` StringOnly ` <nl> + configFactory . copyRealmFromAssets ( context , " schemaversion _ v1 . realm " , config ) ; <nl> + <nl> + / / Opening the Realm should automatically upgrade the schema and version <nl> + Realm realm = null ; <nl> + try { <nl> + realm = Realm . getInstance ( config ) ; <nl> + assertEquals ( 2 , realm . getVersion ( ) ) ; <nl> + assertTrue ( realm . getSchema ( ) . contains ( StringOnly . class . getSimpleName ( ) ) ) ; <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void schemaVersion _ throwsIfNotUpdatedForSchemaUpgrade ( ) throws IOException { <nl> + SyncUser user = createTestUser ( ) ; <nl> + String url = " realm : / / ros . realm . io / ~ / default " ; <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( user , url ) <nl> + . schema ( AllJavaTypes . class , StringOnly . class ) <nl> + . name ( " schemaversion _ v1 . realm " ) <nl> + . schemaVersion ( 1 ) <nl> + . build ( ) ; <nl> + <nl> + / / Add v1 of the Realm to the file system . v1 is missing the class ` StringOnly ` <nl> + configFactory . copyRealmFromAssets ( context , " schemaversion _ v1 . realm " , config ) ; <nl> + <nl> + / / Opening the Realm should throw an exception since the schema changed , but the provided schema version is <nl> + / / the same . <nl> + Realm realm = null ; <nl> + try { <nl> + realm = Realm . getInstance ( config ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException ignore ) { <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> / / Check that it is possible for multiple users to reference the same Realm URL while each user still use their <nl> / / own copy on the filesystem . This is e . g . what happens if a Realm is shared using a PermissionOffer . <nl> @ Test <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / rule / TestSyncConfigurationFactory . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / rule / TestSyncConfigurationFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 23b8f90 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / rule / TestSyncConfigurationFactory . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . rule ; <nl> + <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncUser ; <nl> + <nl> + / * * <nl> + * Test rule used for creating SyncConfigurations . Will ensure that any Realm files are deleted when the <nl> + * test ends . <nl> + * / <nl> + public class TestSyncConfigurationFactory extends TestRealmConfigurationFactory { <nl> + <nl> + public SyncConfiguration . Builder createSyncConfigurationBuilder ( SyncUser user , String url ) { <nl> + return new SyncConfiguration . Builder ( user , url ) . directory ( getRoot ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> index 37614dd . . 76cfd7a 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> @ @ - 42 , 7 + 42 , 7 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeInit ( JNIEnv * env , jclass , jstring tempo <nl> <nl> JNIEXPORT jlong JNICALL <nl> Java _ io _ realm _ internal _ SharedRealm _ nativeCreateConfig ( JNIEnv * env , jclass , jstring realm _ path , jbyteArray key , <nl> - jbyte schema _ mode , jboolean in _ memory , jboolean cache , jboolean disable _ format _ upgrade , <nl> + jbyte schema _ mode , jboolean in _ memory , jboolean cache , jlong / * schema _ version * / , jboolean disable _ format _ upgrade , <nl> jboolean auto _ change _ notification , REALM _ UNUSED jstring sync _ server _ url , jstring / * sync _ user _ token * / ) <nl> { <nl> TR _ ENTER ( ) <nl> @ @ - 52 , 6 + 52 , 7 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeCreateConfig ( JNIEnv * env , jclass , jstri <nl> JniByteArray key _ array ( env , key ) ; <nl> Realm : : Config * config = new Realm : : Config ( ) ; <nl> config - > path = path ; <nl> + / / config - > schema _ version = schema _ version ; TODO : Disabled until we remove version handling from Java <nl> config - > encryption _ key = key _ array ; <nl> config - > schema _ mode = static _ cast < SchemaMode > ( schema _ mode ) ; <nl> config - > in _ memory = in _ memory ; <nl> @ @ - 436 , 9 + 437 , 24 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeUpdateSchema ( JNIEnv * env , jclass , jlong <nl> try { <nl> auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( nativePtr ) ) ; <nl> auto * schema = reinterpret _ cast < Schema * > ( nativeSchemaPtr ) ; <nl> - shared _ realm - > update _ schema ( * schema , static _ cast < uint64 _ t > ( version ) ) ; <nl> + shared _ realm - > update _ schema ( * schema , static _ cast < uint64 _ t > ( version ) , nullptr , true ) ; <nl> } <nl> CATCH _ STD ( ) <nl> } <nl> <nl> + JNIEXPORT jboolean JNICALL <nl> + Java _ io _ realm _ internal _ SharedRealm _ nativeRequiresMigration ( JNIEnv * env , jclass , jlong nativePtr , <nl> + jlong nativeSchemaPtr ) { <nl> + <nl> + TR _ ENTER ( ) <nl> + try { <nl> + auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( nativePtr ) ) ; <nl> + auto * schema = reinterpret _ cast < Schema * > ( nativeSchemaPtr ) ; <nl> + const std : : vector < SchemaChange > & change _ list = shared _ realm - > schema ( ) . compare ( * schema ) ; <nl> + return static _ cast < jboolean > ( ! change _ list . empty ( ) ) ; <nl> + } <nl> + CATCH _ STD ( ) <nl> + return JNI _ FALSE ; <nl> + } <nl> + <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 0c02c40 . . f03be41 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 29 , 17 + 29 , 17 @ @ import java . util . concurrent . atomic . AtomicBoolean ; <nl> <nl> import io . realm . exceptions . RealmFileException ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> + import io . realm . internal . ColumnInfo ; <nl> import io . realm . internal . InvalidRow ; <nl> + import io . realm . internal . ObjectServerFacade ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> - import io . realm . internal . SharedRealm ; <nl> - import io . realm . internal . ColumnInfo ; <nl> import io . realm . internal . Row ; <nl> + import io . realm . internal . SharedRealm ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . UncheckedRow ; <nl> import io . realm . internal . Util ; <nl> import io . realm . internal . async . RealmThreadPoolExecutor ; <nl> import io . realm . log . RealmLog ; <nl> - import io . realm . internal . ObjectServerFacade ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> @ @ - 60 , 7 + 60 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> private static final String NOT _ IN _ TRANSACTION _ MESSAGE = <nl> " Changing Realm data can only be done from inside a transaction . " ; <nl> <nl> - <nl> + <nl> volatile static Context applicationContext ; <nl> <nl> / / Thread pool for all async operations ( Query & transaction ) <nl> @ @ - 591 , 7 + 591 , 8 @ @ abstract class BaseRealm implements Closeable { <nl> / * * <nl> * Migrates the Realm file defined by the given configuration using the provided migration block . <nl> * <nl> - * @ param configuration configuration for the Realm that should be migrated . <nl> + * @ param configuration configuration for the Realm that should be migrated . If this is a SyncConfiguration this <nl> + * method does nothing . <nl> * @ param migration if set , this migration block will override what is set in { @ link RealmConfiguration } . <nl> * @ param callback callback for specific Realm type behaviors . <nl> * @ param cause which triggers this migration . <nl> @ @ - 600 , 9 + 601 , 13 @ @ abstract class BaseRealm implements Closeable { <nl> protected static void migrateRealm ( final RealmConfiguration configuration , final RealmMigration migration , <nl> final MigrationCallback callback , final RealmMigrationNeededException cause ) <nl> throws FileNotFoundException { <nl> + <nl> if ( configuration = = null ) { <nl> throw new IllegalArgumentException ( " RealmConfiguration must be provided " ) ; <nl> } <nl> + if ( configuration . isSyncConfiguration ( ) ) { <nl> + return ; <nl> + } <nl> if ( migration = = null & & configuration . getMigration ( ) = = null ) { <nl> throw new RealmMigrationNeededException ( configuration . getPath ( ) , " RealmMigration must be provided " , cause ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index fffb1f5 . . 0152938 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 149 , 7 + 149 , 7 @ @ public class Realm extends BaseRealm { <nl> / * * <nl> * Initializes the Realm library and creates a default configuration that is ready to use . It is required to call <nl> * this method before interacting with any other of the Realm API ' s . <nl> - * <nl> + * < p > <nl> * A good place is in an { @ link android . app . Application } subclass : <nl> * < pre > <nl> * { @ code <nl> @ @ - 162 , 7 + 162 , 7 @ @ public class Realm extends BaseRealm { <nl> * } <nl> * } <nl> * < / pre > <nl> - * <nl> + * < p > <nl> * Remember to register it in the { @ code AndroidManifest . xml } file : <nl> * < pre > <nl> * { @ code <nl> @ @ - 281 , 103 + 281 , 147 @ @ public class Realm extends BaseRealm { <nl> <nl> static Realm createAndValidate ( RealmConfiguration configuration , ColumnIndices [ ] globalCacheArray ) { <nl> Realm realm = new Realm ( configuration ) ; <nl> - long currentVersion = realm . getVersion ( ) ; <nl> - long requiredVersion = configuration . getSchemaVersion ( ) ; <nl> + <nl> + final long currentVersion = realm . getVersion ( ) ; <nl> + final long requiredVersion = configuration . getSchemaVersion ( ) ; <nl> + <nl> final ColumnIndices columnIndices = RealmCache . findColumnIndices ( globalCacheArray , requiredVersion ) ; <nl> - if ( currentVersion ! = UNVERSIONED & & currentVersion < requiredVersion & & columnIndices = = null ) { <nl> - realm . doClose ( ) ; <nl> - throw new RealmMigrationNeededException ( configuration . getPath ( ) , String . format ( " Realm on disk need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; <nl> - } <nl> - if ( currentVersion ! = UNVERSIONED & & requiredVersion < currentVersion & & columnIndices = = null ) { <nl> - realm . doClose ( ) ; <nl> - throw new IllegalArgumentException ( String . format ( " Realm on disk is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; <nl> - } <nl> <nl> - / / Initialize Realm schema if needed <nl> - if ( columnIndices = = null ) { <nl> + if ( columnIndices ! = null ) { <nl> + / / copy global cache as a Realm local indices cache <nl> + realm . schema . columnIndices = columnIndices . clone ( ) ; <nl> + } else { <nl> + final boolean syncingConfig = configuration . isSyncConfiguration ( ) ; <nl> + <nl> + if ( ! syncingConfig & & ( currentVersion ! = UNVERSIONED ) ) { <nl> + if ( currentVersion < requiredVersion ) { <nl> + realm . doClose ( ) ; <nl> + throw new RealmMigrationNeededException ( <nl> + configuration . getPath ( ) , <nl> + String . format ( " Realm on disk need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; <nl> + } <nl> + if ( requiredVersion < currentVersion ) { <nl> + realm . doClose ( ) ; <nl> + throw new IllegalArgumentException ( <nl> + String . format ( " Realm on disk is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; <nl> + } <nl> + } <nl> + <nl> + / / Initialize Realm schema if needed <nl> try { <nl> - initializeRealm ( realm ) ; <nl> + if ( ! syncingConfig ) { <nl> + initializeRealm ( realm ) ; <nl> + } else { <nl> + initializeSyncedRealm ( realm ) ; <nl> + } <nl> } catch ( RuntimeException e ) { <nl> realm . doClose ( ) ; <nl> throw e ; <nl> } <nl> - } else { <nl> - / / copy global cache as a Realm local indices cache <nl> - realm . schema . columnIndices = columnIndices . clone ( ) ; <nl> } <nl> <nl> return realm ; <nl> } <nl> <nl> - @ SuppressWarnings ( " unchecked " ) <nl> private static void initializeRealm ( Realm realm ) { <nl> - long version = realm . getVersion ( ) ; <nl> - boolean commitNeeded = false ; <nl> - boolean syncAvailable = realm . configuration . isSyncConfiguration ( ) ; <nl> - <nl> + / / Everything in this method needs to be behind a transaction lock to prevent multi - process interaction while <nl> + / / the Realm is initialized . <nl> + boolean commitChanges = false ; <nl> try { <nl> - if ( ! syncAvailable ) { <nl> - realm . beginTransaction ( ) ; <nl> - if ( version = = UNVERSIONED ) { <nl> - commitNeeded = true ; <nl> - realm . setVersion ( realm . configuration . getSchemaVersion ( ) ) ; <nl> - } <nl> - } <nl> + realm . beginTransaction ( ) ; <nl> + long currentVersion = realm . getVersion ( ) ; <nl> + boolean unversioned = currentVersion = = UNVERSIONED ; <nl> + commitChanges = unversioned ; <nl> <nl> - RealmProxyMediator mediator = realm . configuration . getSchemaMediator ( ) ; <nl> + if ( unversioned ) { <nl> + realm . setVersion ( realm . configuration . getSchemaVersion ( ) ) ; <nl> + } <nl> + final RealmProxyMediator mediator = realm . configuration . getSchemaMediator ( ) ; <nl> final Set < Class < ? extends RealmModel > > modelClasses = mediator . getModelClasses ( ) ; <nl> - final Map < Class < ? extends RealmModel > , ColumnInfo > columnInfoMap ; <nl> - columnInfoMap = new HashMap < Class < ? extends RealmModel > , ColumnInfo > ( modelClasses . size ( ) ) ; <nl> - ArrayList < RealmObjectSchema > realmObjectSchemas = new ArrayList < > ( ) ; <nl> - RealmSchema realmSchemaCache = new RealmSchema ( ) ; <nl> + <nl> + final Map < Class < ? extends RealmModel > , ColumnInfo > columnInfoMap = new HashMap < > ( modelClasses . size ( ) ) ; <nl> for ( Class < ? extends RealmModel > modelClass : modelClasses ) { <nl> / / Create and validate table <nl> - if ( version = = UNVERSIONED & & ! syncAvailable ) { <nl> + if ( unversioned ) { <nl> mediator . createTable ( modelClass , realm . sharedRealm ) ; <nl> } <nl> - if ( syncAvailable ) { <nl> - RealmObjectSchema realmObjectSchema = mediator . createRealmObjectSchema ( modelClass , realmSchemaCache ) ; <nl> - realmObjectSchemas . add ( realmObjectSchema ) ; <nl> - } else { <nl> - columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedRealm , false ) ) ; <nl> + columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedRealm , false ) ) ; <nl> + } <nl> + <nl> + realm . schema . columnIndices = new ColumnIndices ( <nl> + ( unversioned ) ? realm . configuration . getSchemaVersion ( ) : currentVersion , columnInfoMap ) ; <nl> + <nl> + if ( unversioned ) { <nl> + final Transaction transaction = realm . configuration . getInitialDataTransaction ( ) ; <nl> + if ( transaction ! = null ) { <nl> + transaction . execute ( realm ) ; <nl> } <nl> } <nl> - if ( syncAvailable ) { <nl> - RealmSchema schema = new RealmSchema ( realmObjectSchemas ) ; <nl> - / / Assumption : when SyncConfiguration then additive schema update mode <nl> - realm . sharedRealm . updateSchema ( schema , version ) ; <nl> - for ( Class < ? extends RealmModel > modelClass : modelClasses ) { <nl> - columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedRealm , false ) ) ; <nl> + } catch ( Exception e ) { <nl> + commitChanges = false ; <nl> + throw e ; <nl> + } finally { <nl> + if ( commitChanges ) { <nl> + realm . commitTransaction ( false ) ; <nl> + } else { <nl> + realm . cancelTransaction ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void initializeSyncedRealm ( Realm realm ) { <nl> + / / Everything in this method needs to be behind a transaction lock to prevent multi - process interaction while <nl> + / / the Realm is initialized . <nl> + boolean commitChanges = false ; <nl> + try { <nl> + realm . beginTransaction ( ) ; <nl> + long currentVersion = realm . getVersion ( ) ; <nl> + final boolean unversioned = ( currentVersion = = UNVERSIONED ) ; <nl> + <nl> + final RealmProxyMediator mediator = realm . configuration . getSchemaMediator ( ) ; <nl> + final Set < Class < ? extends RealmModel > > modelClasses = mediator . getModelClasses ( ) ; <nl> + <nl> + final ArrayList < RealmObjectSchema > realmObjectSchemas = new ArrayList < > ( ) ; <nl> + final RealmSchema realmSchemaCache = new RealmSchema ( ) ; <nl> + for ( Class < ? extends RealmModel > modelClass : modelClasses ) { <nl> + RealmObjectSchema realmObjectSchema = mediator . createRealmObjectSchema ( modelClass , realmSchemaCache ) ; <nl> + realmObjectSchemas . add ( realmObjectSchema ) ; <nl> + } <nl> + <nl> + / / Assumption : when SyncConfiguration then additive schema update mode <nl> + final RealmSchema schema = new RealmSchema ( realmObjectSchemas ) ; <nl> + long newVersion = realm . configuration . getSchemaVersion ( ) ; <nl> + if ( realm . sharedRealm . requiresMigration ( schema ) ) { <nl> + if ( currentVersion > = newVersion ) { <nl> + throw new IllegalArgumentException ( String . format ( " The schema was changed but the schema version " + <nl> + " was not updated . The configured schema version ( % d ) must be higher than the one in the Realm " + <nl> + " file ( % d ) in order to update the schema . " , newVersion , currentVersion ) ) ; <nl> } <nl> + realm . sharedRealm . updateSchema ( schema , newVersion ) ; <nl> + / / The OS currently does not handle setting the schema version . We have to do it manually . <nl> + realm . setVersion ( newVersion ) ; <nl> + commitChanges = true ; <nl> } <nl> - realm . schema . columnIndices = new ColumnIndices ( <nl> - ( version = = UNVERSIONED ) ? realm . configuration . getSchemaVersion ( ) : version , <nl> - columnInfoMap ) ; <nl> <nl> - if ( version = = UNVERSIONED ) { <nl> - final Transaction transaction = realm . getConfiguration ( ) . getInitialDataTransaction ( ) ; <nl> + final Map < Class < ? extends RealmModel > , ColumnInfo > columnInfoMap = new HashMap < > ( modelClasses . size ( ) ) ; <nl> + for ( Class < ? extends RealmModel > modelClass : modelClasses ) { <nl> + columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedRealm , false ) ) ; <nl> + } <nl> + <nl> + realm . schema . columnIndices = new ColumnIndices ( ( unversioned ) ? newVersion : currentVersion , columnInfoMap ) ; <nl> + <nl> + if ( unversioned ) { <nl> + final Transaction transaction = realm . configuration . getInitialDataTransaction ( ) ; <nl> if ( transaction ! = null ) { <nl> - if ( syncAvailable ) { <nl> - realm . executeTransaction ( transaction ) ; <nl> - realm . executeTransaction ( new Transaction ( ) { <nl> - @ Override <nl> - public void execute ( Realm realm ) { <nl> - realm . setVersion ( realm . configuration . getSchemaVersion ( ) ) ; <nl> - } <nl> - } ) ; <nl> - } else { <nl> - transaction . execute ( realm ) ; <nl> - } <nl> + transaction . execute ( realm ) ; <nl> } <nl> - <nl> } <nl> + } catch ( Exception e ) { <nl> + commitChanges = false ; <nl> + throw e ; <nl> } finally { <nl> - if ( ! syncAvailable ) { <nl> - if ( commitNeeded ) { <nl> - realm . commitTransaction ( false ) ; <nl> - } else { <nl> - realm . cancelTransaction ( ) ; <nl> - } <nl> + if ( commitChanges ) { <nl> + realm . commitTransaction ( false ) ; <nl> } <nl> } <nl> } <nl> @ @ - 798 , 7 + 842 , 7 @ @ public class Realm extends BaseRealm { <nl> * / <nl> public < E extends RealmModel > E createObject ( Class < E > clazz ) { <nl> checkIfValid ( ) ; <nl> - return createObjectInternal ( clazz , true , Collections . < String > emptyList ( ) ) ; <nl> + return createObjectInternal ( clazz , true , Collections . < String > emptyList ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 811 , 9 + 855 , 10 @ @ public class Realm extends BaseRealm { <nl> * @ throws RealmException if the primary key is defined in the model class or an object cannot be created . <nl> * / <nl> / / called from proxy classes <nl> - < E extends RealmModel > E createObjectInternal ( Class < E > clazz , <nl> - boolean acceptDefaultValue , <nl> - List < String > excludeFields ) { <nl> + < E extends RealmModel > E createObjectInternal ( <nl> + Class < E > clazz , <nl> + boolean acceptDefaultValue , <nl> + List < String > excludeFields ) { <nl> Table table = schema . getTable ( clazz ) ; <nl> / / Check and throw the exception earlier for a better exception message . <nl> if ( table . hasPrimaryKey ( ) ) { <nl> @ @ - 841 , 7 + 886 , 7 @ @ public class Realm extends BaseRealm { <nl> * / <nl> public < E extends RealmModel > E createObject ( Class < E > clazz , Object primaryKeyValue ) { <nl> checkIfValid ( ) ; <nl> - return createObjectInternal ( clazz , primaryKeyValue , true , Collections . < String > emptyList ( ) ) ; <nl> + return createObjectInternal ( clazz , primaryKeyValue , true , Collections . < String > emptyList ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 857 , 9 + 902 , 11 @ @ public class Realm extends BaseRealm { <nl> * @ throws IllegalArgumentException if the { @ code primaryKeyValue } doesn ' t have a value that can be converted to the <nl> * / <nl> / / called from proxy classes <nl> - < E extends RealmModel > E createObjectInternal ( Class < E > clazz , Object primaryKeyValue , <nl> - boolean acceptDefaultValue , <nl> - List < String > excludeFields ) { <nl> + < E extends RealmModel > E createObjectInternal ( <nl> + Class < E > clazz , <nl> + Object primaryKeyValue , <nl> + boolean acceptDefaultValue , <nl> + List < String > excludeFields ) { <nl> Table table = schema . getTable ( clazz ) ; <nl> long rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue ) ; <nl> return get ( clazz , rowIndex , acceptDefaultValue , excludeFields ) ; <nl> @ @ - 894 , 7 + 941 , 7 @ @ public class Realm extends BaseRealm { <nl> * @ param object { @ link io . realm . RealmObject } to copy or update . <nl> * @ return the new or updated RealmObject with all its properties backed by the Realm . <nl> * @ throws java . lang . IllegalArgumentException if the object is { @ code null } or doesn ' t have a Primary key defined <nl> - * or it belongs to a Realm instance in a different thread . <nl> + * or it belongs to a Realm instance in a different thread . <nl> * @ see # copyToRealm ( RealmModel ) <nl> * / <nl> public < E extends RealmModel > E copyToRealmOrUpdate ( E object ) { <nl> @ @ - 984 , 9 + 1031 , 9 @ @ public class Realm extends BaseRealm { <nl> * <nl> * @ param object RealmObjects to insert . <nl> * @ throws IllegalStateException if the corresponding Realm is closed , called from an incorrect thread or not in a <nl> - * transaction . <nl> + * transaction . <nl> * @ throws io . realm . exceptions . RealmPrimaryKeyConstraintException if two objects with the same primary key is <nl> - * inserted or if a primary key value already exists in the Realm . <nl> + * inserted or if a primary key value already exists in the Realm . <nl> * @ see # copyToRealm ( RealmModel ) <nl> * / <nl> public void insert ( RealmModel object ) { <nl> @ @ - 1021 , 7 + 1068 , 6 @ @ public class Realm extends BaseRealm { <nl> * transaction . <nl> * @ throws io . realm . exceptions . RealmPrimaryKeyConstraintException if two objects with the same primary key is <nl> * inserted or if a primary key value already exists in the Realm . <nl> - * <nl> * @ see # copyToRealmOrUpdate ( Iterable ) <nl> * / <nl> public void insertOrUpdate ( Collection < ? extends RealmModel > objects ) { <nl> @ @ - 1134 , 7 + 1180 , 7 @ @ public class Realm extends BaseRealm { <nl> * @ param < E > type of object . <nl> * @ return an in - memory detached copy of the RealmObjects . <nl> * @ throws IllegalArgumentException if { @ code maxDepth < 0 } , the RealmObject is no longer accessible or it is a <nl> - * { @ link DynamicRealmObject } . <nl> + * { @ link DynamicRealmObject } . <nl> * @ see # copyToRealmOrUpdate ( Iterable ) <nl> * / <nl> public < E extends RealmModel > List < E > copyFromRealm ( Iterable < E > realmObjects , int maxDepth ) { <nl> @ @ - 1192 , 7 + 1238 , 7 @ @ public class Realm extends BaseRealm { <nl> * @ param < E > type of object . <nl> * @ return an in - memory detached copy of the managed { @ link RealmObject } . <nl> * @ throws IllegalArgumentException if { @ code maxDepth < 0 } , the RealmObject is no longer accessible or it is a <nl> - * { @ link DynamicRealmObject } . <nl> + * { @ link DynamicRealmObject } . <nl> * @ see # copyToRealmOrUpdate ( RealmModel ) <nl> * / <nl> public < E extends RealmModel > E copyFromRealm ( E realmObject , int maxDepth ) { <nl> @ @ - 1327 , 7 + 1373 , 7 @ @ public class Realm extends BaseRealm { <nl> <nl> / / If the user provided a Callback then we make sure , the current Realm has a Handler <nl> / / we can use to deliver the result <nl> - if ( ( onSuccess ! = null | | onError ! = null ) & & ! hasValidNotifier ( ) ) { <nl> + if ( ( onSuccess ! = null | | onError ! = null ) & & ! hasValidNotifier ( ) ) { <nl> throw new IllegalStateException ( " Your Realm is opened from a thread without a Looper " + <nl> " and you provided a callback , we need a Handler to invoke your callback " ) ; <nl> } <nl> @ @ - 1576 , 7 + 1622 , 7 @ @ public class Realm extends BaseRealm { <nl> * @ param globalCacheArray global cache of column indices . If it contains an entry for current <nl> * schema version , this method only copies the indices information in the entry . <nl> * @ return newly created indices information for current schema version . Or { @ code null } if <nl> - * { @ code globalCacheArray } already contains the entry for current schema version . <nl> + * { @ code globalCacheArray } already contains the entry for current schema version . <nl> * / <nl> ColumnIndices updateSchemaCache ( ColumnIndices [ ] globalCacheArray ) { <nl> final long currentSchemaVersion = sharedRealm . getSchemaVersion ( ) ; <nl> @ @ - 1681 , 6 + 1727 , 7 @ @ public class Realm extends BaseRealm { <nl> * / <nl> class Callback { <nl> public void onSuccess ( ) { } <nl> + <nl> public void onError ( Exception e ) { } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 7cd6d6f . . fcec729 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 66 , 7 + 66 , 7 @ @ public class RealmConfiguration { <nl> public static final int KEY _ LENGTH = 64 ; <nl> <nl> private static final Object DEFAULT _ MODULE ; <nl> - private static final RealmProxyMediator DEFAULT _ MODULE _ MEDIATOR ; <nl> + protected static final RealmProxyMediator DEFAULT _ MODULE _ MEDIATOR ; <nl> private static Boolean rxJavaAvailable ; <nl> <nl> static { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index cc3f528 . . 82aca6f 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 199 , 6 + 199 , 7 @ @ public final class SharedRealm implements Closeable { <nl> rosServerUrl ! = null ? SchemaMode . SCHEMA _ MODE _ ADDITIVE . getNativeValue ( ) : SchemaMode . SCHEMA _ MODE _ MANUAL . getNativeValue ( ) , <nl> config . getDurability ( ) = = Durability . MEM _ ONLY , <nl> enable _ caching , <nl> + config . getSchemaVersion ( ) , <nl> disableFormatUpgrade , <nl> autoChangeNotifications , <nl> rosServerUrl , <nl> @ @ - 326 , 10 + 327 , 18 @ @ public final class SharedRealm implements Closeable { <nl> return nativeCompact ( nativePtr ) ; <nl> } <nl> <nl> + / * * <nl> + * Update the underlying schema based on the schema description . <nl> + * Calling this method must be done from inside a write transaction . <nl> + * / <nl> public void updateSchema ( RealmSchema schema , long version ) { <nl> nativeUpdateSchema ( nativePtr , schema . getNativePtr ( ) , version ) ; <nl> } <nl> <nl> + public boolean requiresMigration ( RealmSchema schema ) { <nl> + return nativeRequiresMigration ( nativePtr , schema . getNativePtr ( ) ) ; <nl> + } <nl> + <nl> @ Override <nl> public void close ( ) { <nl> if ( realmNotifier ! = null ) { <nl> @ @ - 372 , 7 + 381 , 7 @ @ public final class SharedRealm implements Closeable { <nl> <nl> private static native void nativeInit ( String temporaryDirectoryPath ) ; <nl> private static native long nativeCreateConfig ( String realmPath , byte [ ] key , byte schemaMode , boolean inMemory , <nl> - boolean cache , boolean disableFormatUpgrade , <nl> + boolean cache , long schemaVersion , boolean disableFormatUpgrade , <nl> boolean autoChangeNotification , <nl> String syncServerURL , String syncUserToken ) ; <nl> private static native void nativeCloseConfig ( long nativeConfigPtr ) ; <nl> @ @ - 402 , 4 + 411 , 5 @ @ public final class SharedRealm implements Closeable { <nl> private static native void nativeStopWaitForChange ( long nativeSharedRealmPtr ) ; <nl> private static native boolean nativeCompact ( long nativeSharedRealmPtr ) ; <nl> private static native void nativeUpdateSchema ( long nativePtr , long nativeSchemaPtr , long version ) ; <nl> + private static native boolean nativeRequiresMigration ( long nativePtr , long nativeSchemaPtr ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> index c7804ae . . 9ee7b0f 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . net . URISyntaxException ; <nl> import java . security . MessageDigest ; <nl> import java . security . NoSuchAlgorithmException ; <nl> import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> import java . util . HashSet ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> @ @ - 238 , 6 + 239 , 7 @ @ public class SyncConfiguration extends RealmConfiguration { <nl> private String fileName ; <nl> private boolean overrideDefaultLocalFileName = false ; <nl> private byte [ ] key ; <nl> + private long schemaVersion = 0 ; <nl> private HashSet < Object > modules = new HashSet < Object > ( ) ; <nl> private HashSet < Class < ? extends RealmModel > > debugSchema = new HashSet < Class < ? extends RealmModel > > ( ) ; <nl> private RxObservableFactory rxFactory ; <nl> @ @ - 424 , 6 + 426 , 40 @ @ public class SyncConfiguration extends RealmConfiguration { <nl> } <nl> <nl> / * * <nl> + * DEBUG method . This restricts the Realm schema to only consist of the provided classes without having to <nl> + * create a module . These classes must be available in the default module . Calling this will remove any <nl> + * previously configured modules . <nl> + * / <nl> + SyncConfiguration . Builder schema ( Class < ? extends RealmModel > firstClass , Class < ? extends RealmModel > . . . additionalClasses ) { <nl> + if ( firstClass = = null ) { <nl> + throw new IllegalArgumentException ( " A non - null class must be provided " ) ; <nl> + } <nl> + modules . clear ( ) ; <nl> + modules . add ( DEFAULT _ MODULE _ MEDIATOR ) ; <nl> + debugSchema . add ( firstClass ) ; <nl> + if ( additionalClasses ! = null ) { <nl> + Collections . addAll ( debugSchema , additionalClasses ) ; <nl> + } <nl> + <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets the schema version of the Realm . This must be equal to or higher than the schema version of the existing <nl> + * Realm file , if any . If the schema version is higher than the already existing Realm , a migration is needed . <nl> + * <nl> + * @ param schemaVersion the schema version . <nl> + * @ throws IllegalArgumentException if schema version is invalid . <nl> + * / <nl> + public Builder schemaVersion ( long schemaVersion ) { <nl> + if ( schemaVersion < 0 ) { <nl> + throw new IllegalArgumentException ( " Realm schema version numbers must be 0 ( zero ) or higher . Yours was : " + schemaVersion ) ; <nl> + } <nl> + this . schemaVersion = schemaVersion ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> * Replaces the existing module ( s ) with one or more { @ link RealmModule } s . Using this method will replace the <nl> * current schema for this Realm with the schema defined by the provided modules . <nl> * < p > <nl> @ @ - 616 , 7 + 652 , 7 @ @ public class SyncConfiguration extends RealmConfiguration { <nl> getCanonicalPath ( new File ( realmFileDirectory , realmFileName ) ) , <nl> null , / / assetFile not supported by Sync . See https : / / github . com / realm / realm - sync / issues / 241 <nl> key , <nl> - 0 , <nl> + schemaVersion , <nl> null , / / Custom migrations not supported <nl> false , / / MigrationNeededException is never thrown <nl> durability ,
NEAREST DIFF (one line): diff - - git a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java <nl> index c7ce08f . . 4ba665f 100644 <nl> - - - a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java <nl> + + + b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java <nl> @ @ - 37 , 10 + 37 , 13 @ @ import io . realm . User ; <nl> <nl> public class CounterActivity extends AppCompatActivity { <nl> <nl> + private static final String REALM _ URL = " realm : / / " + MyApplication . OBJECT _ SERVER _ IP + " / ~ / default " ; <nl> + <nl> private Realm realm ; <nl> private RealmResults < CounterOperation > counter ; <nl> private User user ; <nl> <nl> + <nl> @ BindView ( R . id . text _ counter ) TextView counterView ; <nl> <nl> @ Override <nl> @ @ - 61 , 15 + 64 , 13 @ @ public class CounterActivity extends AppCompatActivity { <nl> if ( User . currentUser ( ) ! = null ) { <nl> user = User . currentUser ( ) ; <nl> / / Create a RealmConfiguration for our user <nl> - SyncConfiguration config = new SyncConfiguration . Builder ( ) <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , REALM _ URL ) <nl> . initialData ( new Realm . Transaction ( ) { <nl> @ Override <nl> public void execute ( Realm realm ) { <nl> realm . createObject ( CRDTCounter . class , 1 ) ; <nl> } <nl> } ) <nl> - . user ( user ) <nl> - . serverUrl ( " realm : / / " + MyApplication . OBJECT _ SERVER _ IP + " / ~ / default " ) <nl> . build ( ) ; <nl> <nl> / / This will automatically sync all changes in the background for as long as the Realm is open <nl> diff - - git a / realm / config / findbugs / findbugs - filter . xml b / realm / config / findbugs / findbugs - filter . xml <nl> index b6503d5 . . 2911aec 100644 <nl> - - - a / realm / config / findbugs / findbugs - filter . xml <nl> + + + b / realm / config / findbugs / findbugs - filter . xml <nl> @ @ - 27 , 6 + 27 , 11 @ @ <nl> < Field name = " minDepth " / > <nl> < Bug pattern = " URF _ UNREAD _ PUBLIC _ OR _ PROTECTED _ FIELD " / > <nl> < / Match > <nl> + < Match > <nl> + < Class name = " io . realm . SyncManager " / > <nl> + < Field name = " APP _ ID " / > <nl> + < Bug pattern = " MS _ SHOULD _ BE _ FINAL " / > <nl> + < / Match > <nl> <nl> < ! - - Unit tests - - > <nl> < Match > <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / SchemaTests . java <nl> index 8394607 . . 8dc0c1e 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / SchemaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / SchemaTests . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ <nl> package io . realm ; <nl> <nl> <nl> - import android . content . Context ; <nl> import android . support . test . InstrumentationRegistry ; <nl> import android . support . test . runner . AndroidJUnit4 ; <nl> <nl> @ @ - 41 , 17 + 40 , 12 @ @ public class SchemaTests { <nl> @ Rule <nl> public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> <nl> - private Context context ; <nl> private SyncConfiguration config ; <nl> <nl> @ Before <nl> public void setUp ( ) { <nl> - context = InstrumentationRegistry . getContext ( ) ; <nl> User user = SyncTestUtils . createTestUser ( ) ; <nl> - config = new SyncConfiguration . Builder ( context ) <nl> - . user ( user ) <nl> - . serverUrl ( " realm : / / objectserver . realm . io / ~ / default " ) <nl> - . build ( ) ; <nl> + config = new SyncConfiguration . Builder ( user , " realm : / / objectserver . realm . io / ~ / default " ) . build ( ) ; <nl> } <nl> <nl> @ After <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> index 457637c . . 81685ee 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> @ @ - 71 , 16 + 71 , 14 @ @ public class SyncConfigurationTests { <nl> <nl> @ Test <nl> public void user _ invalidUserThrows ( ) { <nl> - SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) ; <nl> - <nl> try { <nl> - builder . user ( null ) ; <nl> + new SyncConfiguration . Builder ( null , " realm : / / ros . realm . io / default " ) ; <nl> } catch ( IllegalArgumentException ignore ) { <nl> } <nl> <nl> User user = createTestUser ( 0 ) ; / / Create user that has expired credentials <nl> try { <nl> - builder . user ( user ) ; <nl> + new SyncConfiguration . Builder ( user , " realm : / / ros . realm . io / default " ) ; <nl> } catch ( IllegalArgumentException ignore ) { <nl> } <nl> } <nl> @ @ - 99 , 10 + 97 , 7 @ @ public class SyncConfigurationTests { <nl> String expectedFolder = validUrl [ 1 ] ; <nl> String expectedFileName = validUrl [ 2 ] ; <nl> <nl> - SyncConfiguration config = new SyncConfiguration . Builder ( context ) <nl> - . serverUrl ( serverUrl ) <nl> - . user ( user ) <nl> - . build ( ) ; <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , serverUrl ) . build ( ) ; <nl> <nl> assertEquals ( new File ( context . getFilesDir ( ) , expectedFolder ) , config . getRealmDirectory ( ) ) ; <nl> assertEquals ( expectedFileName , config . getRealmFileName ( ) ) ; <nl> @ @ - 127 , 10 + 122 , 9 @ @ public class SyncConfigurationTests { <nl> " http : / / objectserver . realm . io / ~ / default " , / / wrong scheme <nl> } ; <nl> <nl> - SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) ; <nl> for ( String invalidUrl : invalidUrls ) { <nl> try { <nl> - builder . serverUrl ( invalidUrl ) ; <nl> + new SyncConfiguration . Builder ( createTestUser ( ) , invalidUrl ) ; <nl> fail ( invalidUrl + " should have failed . " ) ; <nl> } catch ( IllegalArgumentException ignore ) { <nl> } <nl> @ @ - 151 , 11 + 145 , 7 @ @ public class SyncConfigurationTests { <nl> SyncConfiguration . MAX _ FILE _ NAME _ LENGTH , SyncConfiguration . MAX _ FILE _ NAME _ LENGTH + 1 , 1000 } ; <nl> <nl> for ( int len : lengths ) { <nl> - SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) <nl> - . serverUrl ( makeServerUrl ( len ) ) <nl> - . user ( createTestUser ( ) ) ; <nl> - <nl> - SyncConfiguration config = builder . build ( ) ; <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( createTestUser ( ) , makeServerUrl ( len ) ) . build ( ) ; <nl> assertTrue ( " Length : " + len , config . getRealmFileName ( ) . length ( ) < = SyncConfiguration . MAX _ FILE _ NAME _ LENGTH ) ; <nl> assertTrue ( " Length : " + len , config . getPath ( ) . length ( ) < = SyncConfiguration . MAX _ FULL _ PATH _ LENGTH ) ; <nl> } <nl> @ @ - 163 , 9 + 153 , 7 @ @ public class SyncConfigurationTests { <nl> <nl> @ Test <nl> public void serverUrl _ invalidChars ( ) { <nl> - SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) <nl> - . serverUrl ( " realm : / / objectserver . realm . io / ~ / ? " ) <nl> - . user ( createTestUser ( ) ) ; <nl> + SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( createTestUser ( ) , " realm : / / objectserver . realm . io / ~ / ? " ) ; <nl> SyncConfiguration config = builder . build ( ) ; <nl> assertFalse ( config . getRealmFileName ( ) . contains ( " ? " ) ) ; <nl> } <nl> @ @ - 179 , 53 + 167 , 20 @ @ public class SyncConfigurationTests { <nl> urlPort . put ( " realms : / / objectserver . realm . io : 2443 / ~ / default " , 2443 ) ; <nl> <nl> for ( String url : urlPort . keySet ( ) ) { <nl> - SyncConfiguration config = new SyncConfiguration . Builder ( context ) <nl> - . serverUrl ( url ) <nl> - . user ( createTestUser ( ) ) <nl> - . build ( ) ; <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( createTestUser ( ) , url ) . build ( ) ; <nl> assertEquals ( urlPort . get ( url ) . intValue ( ) , config . getServerUrl ( ) . getPort ( ) ) ; <nl> } <nl> } <nl> <nl> @ Test <nl> - public void userAndServerUrlRequired ( ) { <nl> - SyncConfiguration . Builder builder ; <nl> - <nl> - / / Both missing <nl> - builder = new SyncConfiguration . Builder ( context ) ; <nl> - try { <nl> - builder . build ( ) ; <nl> - } catch ( IllegalStateException ignore ) { <nl> - } <nl> - <nl> - builder = new SyncConfiguration . Builder ( context ) ; <nl> - try { <nl> - builder . user ( createTestUser ( Long . MAX _ VALUE ) ) . build ( ) ; <nl> - } catch ( IllegalStateException ignore ) { <nl> - } <nl> - <nl> - / / user missing <nl> - builder = new SyncConfiguration . Builder ( context ) ; <nl> - try { <nl> - builder . serverUrl ( " realm : / / foo . bar / ~ / default " ) . build ( ) ; <nl> - } catch ( IllegalStateException ignore ) { <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> public void errorHandler ( ) { <nl> - SyncConfiguration . Builder builder ; <nl> - builder = new SyncConfiguration . Builder ( context ) <nl> - . user ( createTestUser ( ) ) <nl> - . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; <nl> - <nl> + SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( createTestUser ( ) , " realm : / / objectserver . realm . io / default " ) ; <nl> Session . ErrorHandler errorHandler = new Session . ErrorHandler ( ) { <nl> @ Override <nl> public void onError ( Session session , ObjectServerError error ) { <nl> <nl> } <nl> } ; <nl> - <nl> SyncConfiguration config = builder . errorHandler ( errorHandler ) . build ( ) ; <nl> assertEquals ( errorHandler , config . getErrorHandler ( ) ) ; <nl> } <nl> @ @ - 242 , 10 + 197 , 9 @ @ public class SyncConfigurationTests { <nl> SyncManager . setDefaultSessionErrorHandler ( errorHandler ) ; <nl> <nl> / / Create configuration using the default handler <nl> - SyncConfiguration config = new SyncConfiguration . Builder ( context ) <nl> - . user ( createTestUser ( ) ) <nl> - . serverUrl ( " realm : / / objectserver . realm . io / default " ) <nl> - . build ( ) ; <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) . build ( ) ; <nl> assertEquals ( errorHandler , config . getErrorHandler ( ) ) ; <nl> SyncManager . setDefaultSessionErrorHandler ( null ) ; <nl> } <nl> @ @ - 253 , 8 + 207 , 9 @ @ public class SyncConfigurationTests { <nl> <nl> @ Test <nl> public void errorHandler _ nullThrows ( ) { <nl> - SyncConfiguration . Builder builder ; <nl> - builder = new SyncConfiguration . Builder ( context ) ; <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( user , url ) ; <nl> <nl> try { <nl> builder . errorHandler ( null ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / ObjectServer . java b / realm / realm - library / src / main / java / io / realm / ObjectServer . java <nl> new file mode 100644 <nl> index 0000000 . . b859929 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / ObjectServer . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package io . realm ; <nl> + <nl> + import android . content . Context ; <nl> + import android . content . pm . PackageInfo ; <nl> + <nl> + import io . realm . android . SharedPrefsUserStore ; <nl> + import io . realm . internal . Keep ; <nl> + <nl> + / * * <nl> + * Internal initializer class for the Object Server . <nl> + * Use to keep the ` SyncManager ` free from Android dependencies <nl> + * / <nl> + @ SuppressWarnings ( " unused " ) <nl> + @ Keep <nl> + class ObjectServer { <nl> + <nl> + public static void init ( Context context ) { <nl> + / / Setup AppID <nl> + String appId = " unknown " ; <nl> + try { <nl> + PackageInfo pi = context . getPackageManager ( ) . getPackageInfo ( context . getPackageName ( ) , 0 ) ; <nl> + appId = pi . packageName ; <nl> + } catch ( Exception ignore ) { <nl> + } <nl> + <nl> + / / Configure default UserStore <nl> + UserStore userStore = new SharedPrefsUserStore ( context ) ; <nl> + <nl> + SyncManager . init ( appId , userStore ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 5c7cbeb . . 4bc0c25 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 52 , 6 + 52 , 7 @ @ import io . realm . exceptions . RealmFileException ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> import io . realm . internal . ColumnIndices ; <nl> import io . realm . internal . ColumnInfo ; <nl> + import io . realm . internal . ObjectServerFacade ; <nl> import io . realm . internal . RealmCore ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . RealmProxyMediator ; <nl> @ @ - 188 , 6 + 189 , 7 @ @ public final class Realm extends BaseRealm { <nl> RealmCore . loadLibrary ( context ) ; <nl> RealmLog . add ( BuildConfig . DEBUG ? new AndroidLogger ( Log . DEBUG ) : new AndroidLogger ( Log . WARN ) ) ; <nl> defaultConfiguration = new RealmConfiguration . Builder ( context ) . build ( ) ; <nl> + ObjectServerFacade . getSyncFacadeIfPossible ( ) . init ( context ) ; <nl> BaseRealm . applicationContext = context . getApplicationContext ( ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> index e8cb2b0 . . 7d964ed 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> @ @ - 245 , 15 + 245 , 34 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> / * * <nl> * Creates an instance of the Builder for the SyncConfiguration . <nl> * < p > <nl> - * This will use the app ' s own internal directory for storing the Realm file . This does not require any <nl> - * additional permissions . The default location is { @ code / data / data / < packagename > / files / realm - object - server } , <nl> - * but can change depending on vendor implementations of Android . <nl> + * Opening a synchronized Realm requires a valid user and an unique URL that identifies that Realm . In URL ' s , <nl> + * { @ code / ~ / } can be used as a placeholder for a user ID in case the Realm should only be available to one <nl> + * user , e . g . { @ code " realm : / / objectserver . realm . io / ~ / default " } <nl> + * < p > <nl> + * The URL cannot end with { @ code . realm } . <nl> + * < p > <nl> + * The ` / ~ / ` will automatically be replaced with the user ID when creating the { @ link SyncConfiguration } . <nl> + * < p > <nl> + * The URL also defines the local location on disk . The default location of a synchronized Realm file is <nl> + * { @ code / data / data / < packageName > / files / realm - object - server / < user - id > / < last - path - segment > } , but this behaviour <nl> + * can be overwritten using { @ link # name ( String ) } and { @ link # directory ( File ) } . <nl> + * < p > <nl> + * Many Android devices are using FAT32 file systems . FAT32 file systems have a limitation that <nl> + * file name cannot be longer than 255 characters . Moreover , the entire URL should not exceed 256 characters . <nl> + * If file name and underlying path are too long to handle for FAT32 , a shorter unique name will be generated . <nl> + * See also @ { link https : / / msdn . microsoft . com / en - us / library / aa365247 ( VS . 85 ) . aspx } . <nl> + * <nl> + * @ param user Set the user for this Realm . An authenticated { @ link User } is required to open any Realm managed <nl> + * by a Realm Object Server . <nl> + * @ param url URL identifying the Realm . <nl> + * <nl> + * @ see User # isValid ( ) <nl> * / <nl> - public Builder ( ) { <nl> - this ( BaseRealm . applicationContext ) ; <nl> + public Builder ( User user , String url ) { <nl> + this ( BaseRealm . applicationContext , user , url ) ; <nl> } <nl> <nl> - Builder ( Context context ) { <nl> + Builder ( Context context , User user , String url ) { <nl> if ( context = = null ) { <nl> throw new IllegalStateException ( " Call ` Realm . init ( Context ) ` before creating a SyncConfiguration " ) ; <nl> } <nl> @ @ - 261 , 11 + 280 , 89 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> if ( Realm . getDefaultModule ( ) ! = null ) { <nl> this . modules . add ( Realm . getDefaultModule ( ) ) ; <nl> } <nl> + <nl> + validateAndSet ( user ) ; <nl> + validateAndSet ( url ) ; <nl> + } <nl> + <nl> + private void validateAndSet ( User user ) { <nl> + if ( user = = null ) { <nl> + throw new IllegalArgumentException ( " Non - null ` user ` required . " ) ; <nl> + } <nl> + if ( ! user . isValid ( ) ) { <nl> + throw new IllegalArgumentException ( " User not authenticated or authentication expired . " ) ; <nl> + } <nl> + this . user = user ; <nl> + } <nl> + <nl> + private void validateAndSet ( String url ) { <nl> + if ( url = = null ) { <nl> + throw new IllegalArgumentException ( " Non - null ' url ' required . " ) ; <nl> + } <nl> + <nl> + try { <nl> + serverUrl = new URI ( url ) ; <nl> + } catch ( URISyntaxException e ) { <nl> + throw new IllegalArgumentException ( " Invalid url : " + url , e ) ; <nl> + } <nl> + <nl> + / / scheme must be realm or realms <nl> + String scheme = serverUrl . getScheme ( ) ; <nl> + if ( ! scheme . equals ( " realm " ) & & ! scheme . equals ( " realms " ) ) { <nl> + throw new IllegalArgumentException ( " Invalid scheme : " + scheme ) ; <nl> + } <nl> + <nl> + / / set port if not set by user <nl> + int port ; <nl> + int currentPort = serverUrl . getPort ( ) ; <nl> + if ( currentPort = = - 1 ) { <nl> + port = scheme . equals ( " realm " ) ? PORT _ REALM : PORT _ REALMS ; <nl> + } else { <nl> + port = currentPort ; <nl> + } <nl> + <nl> + / / Detect last path segment as it is the default file name <nl> + String path = serverUrl . getPath ( ) ; <nl> + if ( path = = null ) { <nl> + throw new IllegalArgumentException ( " Invalid url : " + url ) ; <nl> + } <nl> + <nl> + String [ ] pathSegments = path . split ( " / " ) ; <nl> + for ( int i = 1 ; i < pathSegments . length ; i + + ) { <nl> + String segment = pathSegments [ i ] ; <nl> + if ( segment . equals ( " ~ " ) ) { <nl> + continue ; <nl> + } <nl> + if ( segment . equals ( " . . " ) | | segment . equals ( " . " ) ) { <nl> + throw new IllegalArgumentException ( " The URL has an invalid segment : " + segment ) ; <nl> + } <nl> + Matcher m = pattern . matcher ( segment ) ; <nl> + if ( ! m . matches ( ) ) { <nl> + throw new IllegalArgumentException ( " The URL must only contain characters 0 - 9 , a - z , A - Z , . , _ , and - : " + segment ) ; <nl> + } <nl> + } <nl> + <nl> + this . defaultLocalFileName = pathSegments [ pathSegments . length - 1 ] ; <nl> + <nl> + / / Validate filename <nl> + / / TODO Lift this restriction on the Object Server <nl> + if ( defaultLocalFileName . endsWith ( " . realm " ) <nl> + | | defaultLocalFileName . endsWith ( " . realm . lock " ) <nl> + | | defaultLocalFileName . endsWith ( " . realm . management " ) ) { <nl> + throw new IllegalArgumentException ( " The URL must not end with ' . realm ' , ' . realm . lock ' or ' . realm . management : " + url ) ; <nl> + } <nl> + <nl> + try { <nl> + this . serverUrl = new URI ( scheme , serverUrl . getUserInfo ( ) , serverUrl . getHost ( ) , <nl> + port , serverUrl . getPath ( ) , serverUrl . getQuery ( ) , serverUrl . getFragment ( ) ) ; <nl> + } catch ( URISyntaxException e ) { <nl> + throw new IllegalArgumentException ( " Cannot reconstruct url : " + url , e ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> * Sets the local filename for the Realm . <nl> - * This will override the default name defined by the { @ link # serverUrl ( String ) } <nl> + * This will override the default name defined by the the Realm URL . <nl> * <nl> * @ param filename name of the local file on disk . <nl> * / <nl> @ @ - 282 , 7 + 379 , 7 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> * Sets the local root directory where synchronized Realm files can be saved . <nl> * <nl> * Synchronized Realms will not be saved directly in the provided directory , but instead in a <nl> - * subfolder that matches the path defined by { @ link # serverUrl ( String ) } . As Realm server URLs are unique <nl> + * subfolder that matches the path defined by Realm URL . As Realm server URLs are unique <nl> * this means that multiple users can save their Realms on disk without the risk of them overriding each other . <nl> * <nl> * The default location is { @ code context . getFilesDir ( ) } . <nl> @ @ - 390 , 110 + 487 , 6 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Enable server side synchronization for this Realm . The name should be a unique URL that identifies the Realm . <nl> - * { @ code / ~ / } can be used as a placeholder for a user ID in case the Realm should only be available to one <nl> - * user , e . g . { @ code " realm : / / objectserver . realm . io / ~ / default " } <nl> - * <nl> - * The ` / ~ / ` will automatically be replaced with the user ID when creating the { @ link SyncConfiguration } . <nl> - * <nl> - * The URL also defines the local location on the device . The default location of a synchronized Realm file is <nl> - * { @ code / data / data / < packageName > / files / realm - object - server / < user - id > / < last - path - segment > } . <nl> - * <nl> - * This behaviour can be overwritten using { @ link # name ( String ) } and { @ link # directory ( File ) } . <nl> - * <nl> - * Many Android devices are using FAT32 file systems . FAT32 file systems have a limitation that <nl> - * file name cannot be longer than 255 characters . Moreover , the entire URL should not exceed 256 characters . <nl> - * If file name and underlying path are too long to handle for FAT32 , a shorter unique name will be generated . <nl> - * See also @ { link https : / / msdn . microsoft . com / en - us / library / aa365247 ( VS . 85 ) . aspx } . <nl> - * <nl> - * @ param url URL identifying the Realm . <nl> - * @ throws IllegalArgumentException if the URL is not valid . <nl> - * / <nl> - public Builder serverUrl ( String url ) { <nl> - if ( url = = null ) { <nl> - throw new IllegalArgumentException ( " Non - null ' url ' required . " ) ; <nl> - } <nl> - <nl> - URI serverUrl ; <nl> - try { <nl> - serverUrl = new URI ( url ) ; <nl> - } catch ( URISyntaxException e ) { <nl> - throw new IllegalArgumentException ( " Invalid url : " + url , e ) ; <nl> - } <nl> - <nl> - / / scheme must be realm or realms <nl> - String scheme = serverUrl . getScheme ( ) ; <nl> - if ( ! scheme . equals ( " realm " ) & & ! scheme . equals ( " realms " ) ) { <nl> - throw new IllegalArgumentException ( " Invalid scheme : " + scheme ) ; <nl> - } <nl> - <nl> - / / set port if not set by user <nl> - int port ; <nl> - int currentPort = serverUrl . getPort ( ) ; <nl> - if ( currentPort = = - 1 ) { <nl> - port = scheme . equals ( " realm " ) ? PORT _ REALM : PORT _ REALMS ; <nl> - } else { <nl> - port = currentPort ; <nl> - } <nl> - <nl> - / / Detect last path segment as it is the default file name <nl> - String path = serverUrl . getPath ( ) ; <nl> - if ( path = = null ) { <nl> - throw new IllegalArgumentException ( " Invalid url : " + url ) ; <nl> - } <nl> - <nl> - String [ ] pathSegments = path . split ( " / " ) ; <nl> - for ( int i = 1 ; i < pathSegments . length ; i + + ) { <nl> - String segment = pathSegments [ i ] ; <nl> - if ( segment . equals ( " ~ " ) ) { <nl> - continue ; <nl> - } <nl> - if ( segment . equals ( " . . " ) | | segment . equals ( " . " ) ) { <nl> - throw new IllegalArgumentException ( " The URL has an invalid segment : " + segment ) ; <nl> - } <nl> - Matcher m = pattern . matcher ( segment ) ; <nl> - if ( ! m . matches ( ) ) { <nl> - throw new IllegalArgumentException ( " The URL must only contain characters 0 - 9 , a - z , A - Z , . , _ , and - : " + segment ) ; <nl> - } <nl> - } <nl> - <nl> - this . defaultLocalFileName = pathSegments [ pathSegments . length - 1 ] ; <nl> - <nl> - / / Validate filename <nl> - / / TODO Lift this restriction on the Object Server <nl> - if ( defaultLocalFileName . endsWith ( " . realm " ) <nl> - | | defaultLocalFileName . endsWith ( " . realm . lock " ) <nl> - | | defaultLocalFileName . endsWith ( " . realm . management " ) ) { <nl> - throw new IllegalArgumentException ( " The URL must not end with ' . realm ' , ' . realm . lock ' or ' . realm . management : " + url ) ; <nl> - } <nl> - <nl> - try { <nl> - this . serverUrl = new URI ( scheme , serverUrl . getUserInfo ( ) , serverUrl . getHost ( ) , <nl> - port , serverUrl . getPath ( ) , serverUrl . getQuery ( ) , serverUrl . getFragment ( ) ) ; <nl> - } catch ( URISyntaxException e ) { <nl> - throw new IllegalArgumentException ( " Cannot reconstruct url : " + url , e ) ; <nl> - } <nl> - return this ; <nl> - } <nl> - <nl> - / * * <nl> - * Set the user for this Realm . An authenticated { @ link User } is required to open any Realm managed by a <nl> - * Realm Object Server . <nl> - * <nl> - * @ param user { @ link User } who wants to access this Realm . <nl> - * / <nl> - public Builder user ( User user ) { <nl> - if ( user = = null ) { <nl> - throw new IllegalArgumentException ( " Non - null ` user ` required . " ) ; <nl> - } <nl> - if ( ! user . isValid ( ) ) { <nl> - throw new IllegalArgumentException ( " User not authenticated or authentication expired . " ) ; <nl> - } <nl> - this . user = user ; <nl> - return this ; <nl> - } <nl> - <nl> - / * * <nl> * Sets the { @ link SyncPolicy } used to control when changes should be synchronized with the remote Realm . <nl> * The default policy is { @ link AutomaticSyncPolicy } . <nl> * <nl> @ @ - 542 , 10 + 535 , 10 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> <nl> / * * <nl> * Setting this will cause the local Realm file used to synchronize changes to be deleted if the { @ link User } <nl> - * defined by { @ link # user ( User ) } logs out from the device using { @ link User # logout ( ) } . <nl> + * owning this Realm logs out from the device using { @ link User # logout ( ) } . <nl> * <nl> - * The default behaviour is that the Realm file is allowed to stay behind , making it faster for users to log in <nl> - * again and have access to their data faster . <nl> + * The default behaviour is that the Realm file is allowed to stay behind , making it possible for users to log <nl> + * in again and have access to their data faster . <nl> * / <nl> public Builder deleteRealmOnLogout ( ) { <nl> this . deleteRealmOnLogout = true ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / SyncManager . java b / realm / realm - library / src / main / java / io / realm / SyncManager . java <nl> index ce61081 . . 5230a25 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / SyncManager . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / SyncManager . java <nl> @ @ - 22 , 11 + 22 , 10 @ @ import java . util . concurrent . ThreadPoolExecutor ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import io . realm . internal . Keep ; <nl> - import io . realm . internal . RealmCore ; <nl> - import io . realm . internal . objectserver . SyncSession ; <nl> - import io . realm . internal . objectserver . SessionStore ; <nl> import io . realm . internal . network . AuthenticationServer ; <nl> import io . realm . internal . network . OkHttpAuthenticationServer ; <nl> + import io . realm . internal . objectserver . SessionStore ; <nl> + import io . realm . internal . objectserver . SyncSession ; <nl> import io . realm . log . RealmLog ; <nl> <nl> / * * <nl> @ @ - 39 , 7 + 38 , 11 @ @ import io . realm . log . RealmLog ; <nl> @ Keep <nl> public final class SyncManager { <nl> <nl> - public static final String APP _ ID = " foo " ; / / FIXME Find a way to get an application ID <nl> + / * * <nl> + * APP ID sent to the Realm Object Server . Is automatically initialized to the package name for the app . <nl> + * / <nl> + public static String APP _ ID = null ; <nl> + <nl> / / Thread pool used when doing network requests against the Realm Authentication Server . <nl> / / FIXME Set proper parameters <nl> public static final ThreadPoolExecutor NETWORK _ POOL _ EXECUTOR = new ThreadPoolExecutor ( <nl> @ @ - 74 , 11 + 77 , 15 @ @ public final class SyncManager { <nl> @ SuppressWarnings ( " FieldCanBeLocal " ) <nl> private static Thread clientThread ; <nl> <nl> - / / FIXME This should be called by a method in Realm . init ( ) otherwise the ClassLoader might call this first . <nl> - static { <nl> + / / Called from SyncObjectServerFacade using reflection <nl> + @ SuppressWarnings ( " unused " ) <nl> + static void init ( String appId , UserStore userStore ) { <nl> + <nl> + / / Initialize underlying Sync Network Client <nl> nativeInitializeSyncClient ( ) ; <nl> - / / Create the client thread in java to avoid strange problem when error happens . And anyway we need to attach <nl> - / / to the jvm for logger . <nl> + <nl> + / / Create the client thread in java to avoid problems when exceptions are being thrown . We need to attach <nl> + / / any thread to the JVM anyway in order to send back log events . <nl> clientThread = new Thread ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / User . java b / realm / realm - library / src / main / java / io / realm / User . java <nl> index 14cba00 . . 8b89636 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / User . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / User . java <nl> @ @ - 101 , 8 + 101 , 6 @ @ public class User { <nl> * @ param credentials credentials to use . <nl> * @ param authenticationUrl Server that can authenticate against . <nl> * @ throws ObjectServerError if the login failed . <nl> - * <nl> - * @ see SyncConfiguration . Builder # user ( User ) <nl> * / <nl> public static User login ( final Credentials credentials , final String authenticationUrl ) throws ObjectServerError { <nl> final URL authUrl ; <nl> @ @ - 140 , 8 + 138 , 6 @ @ public class User { <nl> * @ param credentials credentials to use . <nl> * @ param authenticationUrl Server that can authenticate against . <nl> * @ param callback callback when login has completed or failed . This callback will always happen on the UI thread . <nl> - * <nl> - * @ see SyncConfiguration . Builder # user ( User ) <nl> * / <nl> public static RealmAsyncTask loginAsync ( final Credentials credentials , final String authenticationUrl , final Callback callback ) { <nl> if ( Looper . myLooper ( ) = = null ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java <nl> index 331ea7d . . 5422735 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java <nl> @ @ - 1 , 5 + 1 , 7 @ @ <nl> package io . realm . internal ; <nl> <nl> + import android . content . Context ; <nl> + <nl> import io . realm . RealmConfiguration ; <nl> import io . realm . exceptions . RealmException ; <nl> <nl> @ @ - 15 , 7 + 17 , 7 @ @ public class ObjectServerFacade { <nl> static { <nl> / / noinspection TryWithIdenticalCatches <nl> try { <nl> - Class syncFacadeClass = Class . forName ( " io . realm . internal . objectserver . SyncObjectServerFacade " ) ; <nl> + Class syncFacadeClass = Class . forName ( " io . realm . internal . SyncObjectServerFacade " ) ; <nl> syncFacade = ( ObjectServerFacade ) syncFacadeClass . newInstance ( ) ; <nl> } catch ( ClassNotFoundException ignored ) { <nl> } catch ( InstantiationException e ) { <nl> @ @ - 26 , 14 + 28 , 27 @ @ public class ObjectServerFacade { <nl> } <nl> <nl> / * * <nl> + * Initialize the Object Server library <nl> + * @ param context <nl> + * / <nl> + public void init ( Context context ) { <nl> + } <nl> + <nl> + / * * <nl> * Notify the session for this configuration that a local commit was made . <nl> * / <nl> public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { <nl> } <nl> <nl> + / * * <nl> + * The first instance of this Realm was opened . <nl> + * / <nl> public void realmClosed ( RealmConfiguration configuration ) { <nl> } <nl> <nl> + / * * <nl> + * The last instance of this Realm was closed . <nl> + * / <nl> public void realmOpened ( RealmConfiguration configuration ) { <nl> } <nl> <nl> @ @ - 49 , 7 + 64 , 7 @ @ public class ObjectServerFacade { <nl> } <nl> <nl> / / Returns a SyncObjectServerFacade instance if the class exists . Otherwise returns a non - sync one . <nl> - static ObjectServerFacade getSyncFacadeIfPossible ( ) { <nl> + public static ObjectServerFacade getSyncFacadeIfPossible ( ) { <nl> if ( syncFacade ! = null ) { <nl> return syncFacade ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java <nl> new file mode 100644 <nl> index 0000000 . . 7ea800c <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java <nl> @ @ - 0 , 0 + 1 , 88 @ @ <nl> + package io . realm . internal ; <nl> + <nl> + <nl> + import android . content . Context ; <nl> + <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + import java . lang . reflect . Method ; <nl> + <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . Session ; <nl> + import io . realm . SyncConfiguration ; <nl> + import io . realm . SyncManager ; <nl> + import io . realm . exceptions . RealmException ; <nl> + import io . realm . internal . objectserver . SessionStore ; <nl> + import io . realm . internal . objectserver . SyncSession ; <nl> + <nl> + @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade <nl> + @ Keep <nl> + public class SyncObjectServerFacade extends ObjectServerFacade { <nl> + <nl> + private static final String WRONG _ TYPE _ OF _ CONFIGURATION = <nl> + " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; <nl> + <nl> + @ Override <nl> + public void init ( Context context ) { <nl> + / / Trying to keep things out the public API is no fun : / <nl> + / / Just use reflection on init . It is a one - time method call so should be acceptable . <nl> + try { <nl> + Class < ? > syncManager = Class . forName ( " io . realm . ObjectServer " ) ; <nl> + Method method = syncManager . getDeclaredMethod ( " init " , Context . class ) ; <nl> + method . setAccessible ( true ) ; <nl> + method . invoke ( null , context ) ; <nl> + } catch ( NoSuchMethodException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } catch ( InvocationTargetException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } catch ( IllegalAccessException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } catch ( ClassNotFoundException e ) { <nl> + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . notifyCommit ( lastSnapshotVersion ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void realmClosed ( RealmConfiguration configuration ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . getSyncPolicy ( ) . onRealmClosed ( session ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void realmOpened ( RealmConfiguration configuration ) { <nl> + if ( configuration instanceof SyncConfiguration ) { <nl> + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> + session . getSyncPolicy ( ) . onRealmOpened ( session ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { <nl> + if ( config instanceof SyncConfiguration ) { <nl> + SyncConfiguration syncConfig = ( SyncConfiguration ) config ; <nl> + String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; <nl> + String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; <nl> + return new String [ ] { rosServerUrl , rosUserToken } ; <nl> + } else { <nl> + return new String [ 2 ] ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java <nl> deleted file mode 100644 <nl> index 5740a20 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java <nl> + + + / dev / null <nl> @ @ - 1 , 60 + 0 , 0 @ @ <nl> - package io . realm . internal . objectserver ; <nl> - <nl> - <nl> - import io . realm . RealmConfiguration ; <nl> - import io . realm . Session ; <nl> - import io . realm . SyncConfiguration ; <nl> - import io . realm . SyncManager ; <nl> - import io . realm . internal . ObjectServerFacade ; <nl> - <nl> - @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade <nl> - public class SyncObjectServerFacade extends ObjectServerFacade { <nl> - <nl> - private static final String WRONG _ TYPE _ OF _ CONFIGURATION = <nl> - " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; <nl> - <nl> - @ Override <nl> - public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { <nl> - if ( configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . notifyCommit ( lastSnapshotVersion ) ; <nl> - } else { <nl> - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void realmClosed ( RealmConfiguration configuration ) { <nl> - if ( configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . getSyncPolicy ( ) . onRealmClosed ( session ) ; <nl> - } else { <nl> - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void realmOpened ( RealmConfiguration configuration ) { <nl> - if ( configuration instanceof SyncConfiguration ) { <nl> - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; <nl> - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; <nl> - session . getSyncPolicy ( ) . onRealmOpened ( session ) ; <nl> - } else { <nl> - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { <nl> - if ( config instanceof SyncConfiguration ) { <nl> - SyncConfiguration syncConfig = ( SyncConfiguration ) config ; <nl> - String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; <nl> - String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; <nl> - return new String [ ] { rosServerUrl , rosUserToken } ; <nl> - } else { <nl> - return new String [ 2 ] ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncSession . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncSession . java <nl> index 7a42631 . . 49cbf98 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncSession . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncSession . java <nl> @ @ - 329 , 17 + 329 , 17 @ @ public final class SyncSession { <nl> / * * <nl> * Notify session that a commit on the device has happened . <nl> * / <nl> - void notifyCommit ( long version ) { <nl> + public void notifyCommit ( long version ) { <nl> if ( isBound ( ) ) { <nl> nativeNotifyCommitHappened ( nativeSessionPointer , version ) ; <nl> } <nl> } <nl> <nl> - SyncPolicy getSyncPolicy ( ) { <nl> + public SyncPolicy getSyncPolicy ( ) { <nl> return syncPolicy ; <nl> } <nl> <nl> - Session getUserSession ( ) { <nl> + public Session getUserSession ( ) { <nl> return userSession ; <nl> } <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 index cb8a1c6 . . 8bec3bf 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / rule / TestRealmConfigurationFactory . java 
 @ @ - 142 , 25 + 142 , 39 @ @ public class TestRealmConfigurationFactory extends TemporaryFolder { 
 } 
 
 / / Copies a Realm file from assets to temp dir 
 - public void copyRealmFromAssets ( Context context , String realmPath , String newName ) 
 - throws IOException { 
 - / / Delete the existing file before copy 
 - RealmConfiguration configToDelete = new RealmConfiguration . Builder ( ) 
 + public void copyRealmFromAssets ( Context context , String realmPath , String newName ) throws IOException { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( ) 
 . directory ( getRoot ( ) ) 
 . name ( newName ) 
 . build ( ) ; 
 - Realm . deleteRealm ( configToDelete ) ; 
 - 
 - AssetManager assetManager = context . getAssets ( ) ; 
 - InputStream is = assetManager . open ( realmPath ) ; 
 - File file = new File ( getRoot ( ) , newName ) ; 
 - FileOutputStream outputStream = new FileOutputStream ( file ) ; 
 - byte [ ] buf = new byte [ 1024 ] ; 
 - int bytesRead ; 
 - while ( ( bytesRead = is . read ( buf ) ) > - 1 ) { 
 - outputStream . write ( buf , 0 , bytesRead ) ; 
 + 
 + copyRealmFromAssets ( context , realmPath , config ) ; 
 + } 
 + 
 + public void copyRealmFromAssets ( Context context , String realmPath , RealmConfiguration config ) throws IOException { 
 + / / Delete the existing file before copy 
 + Realm . deleteRealm ( config ) ; 
 + 
 + File outFile = new File ( config . getRealmDirectory ( ) , config . getRealmFileName ( ) ) ; 
 + 
 + InputStream is = null ; 
 + FileOutputStream os = null ; 
 + try { 
 + is = context . getAssets ( ) . open ( realmPath ) ; 
 + os = new FileOutputStream ( outFile ) ; 
 + 
 + byte [ ] buf = new byte [ 1024 ] ; 
 + int bytesRead ; 
 + while ( ( bytesRead = is . read ( buf ) ) > - 1 ) { 
 + os . write ( buf , 0 , bytesRead ) ; 
 + } 
 + } finally { 
 + if ( is ! = null ) { 
 + try { is . close ( ) ; } catch ( IOException ignore ) { } 
 + } 
 + if ( os ! = null ) { 
 + try { os . close ( ) ; } catch ( IOException ignore ) { } 
 + } 
 } 
 - outputStream . close ( ) ; 
 - is . close ( ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / assets / schemaversion _ v1 . realm b / realm / realm - library / src / androidTestObjectServer / assets / schemaversion _ v1 . realm 
 new file mode 100644 
 index 0000000 . . d2dac44 
 Binary files / dev / null and b / realm / realm - library / src / androidTestObjectServer / assets / schemaversion _ v1 . realm differ 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / assets / versionTest . realm b / realm / realm - library / src / androidTestObjectServer / assets / versionTest . realm 
 new file mode 100644 
 index 0000000 . . 85cd0c4 
 Binary files / dev / null and b / realm / realm - library / src / androidTestObjectServer / assets / versionTest . realm differ 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java 
 index 92f70f2 . . 58203b7 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncConfigurationTests . java 
 @ @ - 33 , 13 + 33 , 14 @ @ import java . io . IOException ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 + import io . realm . entities . AllJavaTypes ; 
 import io . realm . entities . StringOnly ; 
 import io . realm . rule . RunInLooperThread ; 
 - import io . realm . rule . TestRealmConfigurationFactory ; 
 + import io . realm . rule . TestSyncConfigurationFactory ; 
 
 import static io . realm . util . SyncTestUtils . createNamedTestUser ; 
 import static io . realm . util . SyncTestUtils . createTestUser ; 
 - import static junit . framework . Assert . assertEquals ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 @ @ - 49 , 7 + 50 , 7 @ @ import static org . junit . Assert . fail ; 
 @ RunWith ( AndroidJUnit4 . class ) 
 public class SyncConfigurationTests { 
 @ Rule 
 - public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 + public final TestSyncConfigurationFactory configFactory = new TestSyncConfigurationFactory ( ) ; 
 
 @ Rule 
 public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; 
 @ @ - 360 , 7 + 361 , 8 @ @ public class SyncConfigurationTests { 
 SyncUser user = createTestUser ( ) ; 
 String url = " realm : / / objectserver . realm . io / default " ; 
 
 - SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) 
 + SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( user , url ) 
 + . schema ( StringOnly . class ) 
 . initialData ( new Realm . Transaction ( ) { 
 @ Override 
 public void execute ( Realm realm ) { 
 @ @ - 414 , 6 + 416 , 88 @ @ public class SyncConfigurationTests { 
 Realm . compactRealm ( config ) ; 
 } 
 
 + @ Test 
 + public void schemaVersion _ throwsIfLessThanCurrentVersion ( ) throws IOException { 
 + SyncUser user = createTestUser ( ) ; 
 + String url = " realm : / / ros . realm . io / ~ / default " ; 
 + @ SuppressWarnings ( " unchecked " ) 
 + SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( user , url ) 
 + . schema ( AllJavaTypes . class , StringOnly . class ) 
 + . name ( " schemaversion _ v1 . realm " ) 
 + . schemaVersion ( 0 ) 
 + . build ( ) ; 
 + 
 + / / Add v1 of the Realm to the filsystem 
 + configFactory . copyRealmFromAssets ( context , " schemaversion _ v1 . realm " , config ) ; 
 + 
 + / / Opening the Realm should throw an exception since the schema version is less than the one in the file . 
 + Realm realm = null ; 
 + try { 
 + realm = Realm . getInstance ( config ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException ignore ) { 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Test 
 + public void schemaVersion _ bumpWhenUpgradingSchema ( ) throws IOException { 
 + SyncUser user = createTestUser ( ) ; 
 + String url = " realm : / / ros . realm . io / ~ / default " ; 
 + @ SuppressWarnings ( " unchecked " ) 
 + SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( user , url ) 
 + . schema ( AllJavaTypes . class , StringOnly . class ) 
 + . name ( " schemaversion _ v1 . realm " ) 
 + . schemaVersion ( 2 ) 
 + . build ( ) ; 
 + 
 + / / Add v1 of the Realm to the file system . v1 is missing the class ` StringOnly ` 
 + configFactory . copyRealmFromAssets ( context , " schemaversion _ v1 . realm " , config ) ; 
 + 
 + / / Opening the Realm should automatically upgrade the schema and version 
 + Realm realm = null ; 
 + try { 
 + realm = Realm . getInstance ( config ) ; 
 + assertEquals ( 2 , realm . getVersion ( ) ) ; 
 + assertTrue ( realm . getSchema ( ) . contains ( StringOnly . class . getSimpleName ( ) ) ) ; 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Test 
 + public void schemaVersion _ throwsIfNotUpdatedForSchemaUpgrade ( ) throws IOException { 
 + SyncUser user = createTestUser ( ) ; 
 + String url = " realm : / / ros . realm . io / ~ / default " ; 
 + @ SuppressWarnings ( " unchecked " ) 
 + SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( user , url ) 
 + . schema ( AllJavaTypes . class , StringOnly . class ) 
 + . name ( " schemaversion _ v1 . realm " ) 
 + . schemaVersion ( 1 ) 
 + . build ( ) ; 
 + 
 + / / Add v1 of the Realm to the file system . v1 is missing the class ` StringOnly ` 
 + configFactory . copyRealmFromAssets ( context , " schemaversion _ v1 . realm " , config ) ; 
 + 
 + / / Opening the Realm should throw an exception since the schema changed , but the provided schema version is 
 + / / the same . 
 + Realm realm = null ; 
 + try { 
 + realm = Realm . getInstance ( config ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException ignore ) { 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + } 
 + } 
 + } 
 + 
 / / Check that it is possible for multiple users to reference the same Realm URL while each user still use their 
 / / own copy on the filesystem . This is e . g . what happens if a Realm is shared using a PermissionOffer . 
 @ Test 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / rule / TestSyncConfigurationFactory . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / rule / TestSyncConfigurationFactory . java 
 new file mode 100644 
 index 0000000 . . 23b8f90 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / rule / TestSyncConfigurationFactory . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . rule ; 
 + 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . SyncUser ; 
 + 
 + / * * 
 + * Test rule used for creating SyncConfigurations . Will ensure that any Realm files are deleted when the 
 + * test ends . 
 + * / 
 + public class TestSyncConfigurationFactory extends TestRealmConfigurationFactory { 
 + 
 + public SyncConfiguration . Builder createSyncConfigurationBuilder ( SyncUser user , String url ) { 
 + return new SyncConfiguration . Builder ( user , url ) . directory ( getRoot ( ) ) ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 index 37614dd . . 76cfd7a 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 @ @ - 42 , 7 + 42 , 7 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeInit ( JNIEnv * env , jclass , jstring tempo 
 
 JNIEXPORT jlong JNICALL 
 Java _ io _ realm _ internal _ SharedRealm _ nativeCreateConfig ( JNIEnv * env , jclass , jstring realm _ path , jbyteArray key , 
 - jbyte schema _ mode , jboolean in _ memory , jboolean cache , jboolean disable _ format _ upgrade , 
 + jbyte schema _ mode , jboolean in _ memory , jboolean cache , jlong / * schema _ version * / , jboolean disable _ format _ upgrade , 
 jboolean auto _ change _ notification , REALM _ UNUSED jstring sync _ server _ url , jstring / * sync _ user _ token * / ) 
 { 
 TR _ ENTER ( ) 
 @ @ - 52 , 6 + 52 , 7 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeCreateConfig ( JNIEnv * env , jclass , jstri 
 JniByteArray key _ array ( env , key ) ; 
 Realm : : Config * config = new Realm : : Config ( ) ; 
 config - > path = path ; 
 + / / config - > schema _ version = schema _ version ; TODO : Disabled until we remove version handling from Java 
 config - > encryption _ key = key _ array ; 
 config - > schema _ mode = static _ cast < SchemaMode > ( schema _ mode ) ; 
 config - > in _ memory = in _ memory ; 
 @ @ - 436 , 9 + 437 , 24 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeUpdateSchema ( JNIEnv * env , jclass , jlong 
 try { 
 auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( nativePtr ) ) ; 
 auto * schema = reinterpret _ cast < Schema * > ( nativeSchemaPtr ) ; 
 - shared _ realm - > update _ schema ( * schema , static _ cast < uint64 _ t > ( version ) ) ; 
 + shared _ realm - > update _ schema ( * schema , static _ cast < uint64 _ t > ( version ) , nullptr , true ) ; 
 } 
 CATCH _ STD ( ) 
 } 
 
 + JNIEXPORT jboolean JNICALL 
 + Java _ io _ realm _ internal _ SharedRealm _ nativeRequiresMigration ( JNIEnv * env , jclass , jlong nativePtr , 
 + jlong nativeSchemaPtr ) { 
 + 
 + TR _ ENTER ( ) 
 + try { 
 + auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( nativePtr ) ) ; 
 + auto * schema = reinterpret _ cast < Schema * > ( nativeSchemaPtr ) ; 
 + const std : : vector < SchemaChange > & change _ list = shared _ realm - > schema ( ) . compare ( * schema ) ; 
 + return static _ cast < jboolean > ( ! change _ list . empty ( ) ) ; 
 + } 
 + CATCH _ STD ( ) 
 + return JNI _ FALSE ; 
 + } 
 + 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 0c02c40 . . f03be41 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 29 , 17 + 29 , 17 @ @ import java . util . concurrent . atomic . AtomicBoolean ; 
 
 import io . realm . exceptions . RealmFileException ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 + import io . realm . internal . ColumnInfo ; 
 import io . realm . internal . InvalidRow ; 
 + import io . realm . internal . ObjectServerFacade ; 
 import io . realm . internal . RealmObjectProxy ; 
 - import io . realm . internal . SharedRealm ; 
 - import io . realm . internal . ColumnInfo ; 
 import io . realm . internal . Row ; 
 + import io . realm . internal . SharedRealm ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . UncheckedRow ; 
 import io . realm . internal . Util ; 
 import io . realm . internal . async . RealmThreadPoolExecutor ; 
 import io . realm . log . RealmLog ; 
 - import io . realm . internal . ObjectServerFacade ; 
 import rx . Observable ; 
 
 / * * 
 @ @ - 60 , 7 + 60 , 7 @ @ abstract class BaseRealm implements Closeable { 
 private static final String NOT _ IN _ TRANSACTION _ MESSAGE = 
 " Changing Realm data can only be done from inside a transaction . " ; 
 
 - 
 + 
 volatile static Context applicationContext ; 
 
 / / Thread pool for all async operations ( Query & transaction ) 
 @ @ - 591 , 7 + 591 , 8 @ @ abstract class BaseRealm implements Closeable { 
 / * * 
 * Migrates the Realm file defined by the given configuration using the provided migration block . 
 * 
 - * @ param configuration configuration for the Realm that should be migrated . 
 + * @ param configuration configuration for the Realm that should be migrated . If this is a SyncConfiguration this 
 + * method does nothing . 
 * @ param migration if set , this migration block will override what is set in { @ link RealmConfiguration } . 
 * @ param callback callback for specific Realm type behaviors . 
 * @ param cause which triggers this migration . 
 @ @ - 600 , 9 + 601 , 13 @ @ abstract class BaseRealm implements Closeable { 
 protected static void migrateRealm ( final RealmConfiguration configuration , final RealmMigration migration , 
 final MigrationCallback callback , final RealmMigrationNeededException cause ) 
 throws FileNotFoundException { 
 + 
 if ( configuration = = null ) { 
 throw new IllegalArgumentException ( " RealmConfiguration must be provided " ) ; 
 } 
 + if ( configuration . isSyncConfiguration ( ) ) { 
 + return ; 
 + } 
 if ( migration = = null & & configuration . getMigration ( ) = = null ) { 
 throw new RealmMigrationNeededException ( configuration . getPath ( ) , " RealmMigration must be provided " , cause ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index fffb1f5 . . 0152938 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 149 , 7 + 149 , 7 @ @ public class Realm extends BaseRealm { 
 / * * 
 * Initializes the Realm library and creates a default configuration that is ready to use . It is required to call 
 * this method before interacting with any other of the Realm API ' s . 
 - * 
 + * < p > 
 * A good place is in an { @ link android . app . Application } subclass : 
 * < pre > 
 * { @ code 
 @ @ - 162 , 7 + 162 , 7 @ @ public class Realm extends BaseRealm { 
 * } 
 * } 
 * < / pre > 
 - * 
 + * < p > 
 * Remember to register it in the { @ code AndroidManifest . xml } file : 
 * < pre > 
 * { @ code 
 @ @ - 281 , 103 + 281 , 147 @ @ public class Realm extends BaseRealm { 
 
 static Realm createAndValidate ( RealmConfiguration configuration , ColumnIndices [ ] globalCacheArray ) { 
 Realm realm = new Realm ( configuration ) ; 
 - long currentVersion = realm . getVersion ( ) ; 
 - long requiredVersion = configuration . getSchemaVersion ( ) ; 
 + 
 + final long currentVersion = realm . getVersion ( ) ; 
 + final long requiredVersion = configuration . getSchemaVersion ( ) ; 
 + 
 final ColumnIndices columnIndices = RealmCache . findColumnIndices ( globalCacheArray , requiredVersion ) ; 
 - if ( currentVersion ! = UNVERSIONED & & currentVersion < requiredVersion & & columnIndices = = null ) { 
 - realm . doClose ( ) ; 
 - throw new RealmMigrationNeededException ( configuration . getPath ( ) , String . format ( " Realm on disk need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; 
 - } 
 - if ( currentVersion ! = UNVERSIONED & & requiredVersion < currentVersion & & columnIndices = = null ) { 
 - realm . doClose ( ) ; 
 - throw new IllegalArgumentException ( String . format ( " Realm on disk is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; 
 - } 
 
 - / / Initialize Realm schema if needed 
 - if ( columnIndices = = null ) { 
 + if ( columnIndices ! = null ) { 
 + / / copy global cache as a Realm local indices cache 
 + realm . schema . columnIndices = columnIndices . clone ( ) ; 
 + } else { 
 + final boolean syncingConfig = configuration . isSyncConfiguration ( ) ; 
 + 
 + if ( ! syncingConfig & & ( currentVersion ! = UNVERSIONED ) ) { 
 + if ( currentVersion < requiredVersion ) { 
 + realm . doClose ( ) ; 
 + throw new RealmMigrationNeededException ( 
 + configuration . getPath ( ) , 
 + String . format ( " Realm on disk need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; 
 + } 
 + if ( requiredVersion < currentVersion ) { 
 + realm . doClose ( ) ; 
 + throw new IllegalArgumentException ( 
 + String . format ( " Realm on disk is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; 
 + } 
 + } 
 + 
 + / / Initialize Realm schema if needed 
 try { 
 - initializeRealm ( realm ) ; 
 + if ( ! syncingConfig ) { 
 + initializeRealm ( realm ) ; 
 + } else { 
 + initializeSyncedRealm ( realm ) ; 
 + } 
 } catch ( RuntimeException e ) { 
 realm . doClose ( ) ; 
 throw e ; 
 } 
 - } else { 
 - / / copy global cache as a Realm local indices cache 
 - realm . schema . columnIndices = columnIndices . clone ( ) ; 
 } 
 
 return realm ; 
 } 
 
 - @ SuppressWarnings ( " unchecked " ) 
 private static void initializeRealm ( Realm realm ) { 
 - long version = realm . getVersion ( ) ; 
 - boolean commitNeeded = false ; 
 - boolean syncAvailable = realm . configuration . isSyncConfiguration ( ) ; 
 - 
 + / / Everything in this method needs to be behind a transaction lock to prevent multi - process interaction while 
 + / / the Realm is initialized . 
 + boolean commitChanges = false ; 
 try { 
 - if ( ! syncAvailable ) { 
 - realm . beginTransaction ( ) ; 
 - if ( version = = UNVERSIONED ) { 
 - commitNeeded = true ; 
 - realm . setVersion ( realm . configuration . getSchemaVersion ( ) ) ; 
 - } 
 - } 
 + realm . beginTransaction ( ) ; 
 + long currentVersion = realm . getVersion ( ) ; 
 + boolean unversioned = currentVersion = = UNVERSIONED ; 
 + commitChanges = unversioned ; 
 
 - RealmProxyMediator mediator = realm . configuration . getSchemaMediator ( ) ; 
 + if ( unversioned ) { 
 + realm . setVersion ( realm . configuration . getSchemaVersion ( ) ) ; 
 + } 
 + final RealmProxyMediator mediator = realm . configuration . getSchemaMediator ( ) ; 
 final Set < Class < ? extends RealmModel > > modelClasses = mediator . getModelClasses ( ) ; 
 - final Map < Class < ? extends RealmModel > , ColumnInfo > columnInfoMap ; 
 - columnInfoMap = new HashMap < Class < ? extends RealmModel > , ColumnInfo > ( modelClasses . size ( ) ) ; 
 - ArrayList < RealmObjectSchema > realmObjectSchemas = new ArrayList < > ( ) ; 
 - RealmSchema realmSchemaCache = new RealmSchema ( ) ; 
 + 
 + final Map < Class < ? extends RealmModel > , ColumnInfo > columnInfoMap = new HashMap < > ( modelClasses . size ( ) ) ; 
 for ( Class < ? extends RealmModel > modelClass : modelClasses ) { 
 / / Create and validate table 
 - if ( version = = UNVERSIONED & & ! syncAvailable ) { 
 + if ( unversioned ) { 
 mediator . createTable ( modelClass , realm . sharedRealm ) ; 
 } 
 - if ( syncAvailable ) { 
 - RealmObjectSchema realmObjectSchema = mediator . createRealmObjectSchema ( modelClass , realmSchemaCache ) ; 
 - realmObjectSchemas . add ( realmObjectSchema ) ; 
 - } else { 
 - columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedRealm , false ) ) ; 
 + columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedRealm , false ) ) ; 
 + } 
 + 
 + realm . schema . columnIndices = new ColumnIndices ( 
 + ( unversioned ) ? realm . configuration . getSchemaVersion ( ) : currentVersion , columnInfoMap ) ; 
 + 
 + if ( unversioned ) { 
 + final Transaction transaction = realm . configuration . getInitialDataTransaction ( ) ; 
 + if ( transaction ! = null ) { 
 + transaction . execute ( realm ) ; 
 } 
 } 
 - if ( syncAvailable ) { 
 - RealmSchema schema = new RealmSchema ( realmObjectSchemas ) ; 
 - / / Assumption : when SyncConfiguration then additive schema update mode 
 - realm . sharedRealm . updateSchema ( schema , version ) ; 
 - for ( Class < ? extends RealmModel > modelClass : modelClasses ) { 
 - columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedRealm , false ) ) ; 
 + } catch ( Exception e ) { 
 + commitChanges = false ; 
 + throw e ; 
 + } finally { 
 + if ( commitChanges ) { 
 + realm . commitTransaction ( false ) ; 
 + } else { 
 + realm . cancelTransaction ( ) ; 
 + } 
 + } 
 + } 
 + 
 + private static void initializeSyncedRealm ( Realm realm ) { 
 + / / Everything in this method needs to be behind a transaction lock to prevent multi - process interaction while 
 + / / the Realm is initialized . 
 + boolean commitChanges = false ; 
 + try { 
 + realm . beginTransaction ( ) ; 
 + long currentVersion = realm . getVersion ( ) ; 
 + final boolean unversioned = ( currentVersion = = UNVERSIONED ) ; 
 + 
 + final RealmProxyMediator mediator = realm . configuration . getSchemaMediator ( ) ; 
 + final Set < Class < ? extends RealmModel > > modelClasses = mediator . getModelClasses ( ) ; 
 + 
 + final ArrayList < RealmObjectSchema > realmObjectSchemas = new ArrayList < > ( ) ; 
 + final RealmSchema realmSchemaCache = new RealmSchema ( ) ; 
 + for ( Class < ? extends RealmModel > modelClass : modelClasses ) { 
 + RealmObjectSchema realmObjectSchema = mediator . createRealmObjectSchema ( modelClass , realmSchemaCache ) ; 
 + realmObjectSchemas . add ( realmObjectSchema ) ; 
 + } 
 + 
 + / / Assumption : when SyncConfiguration then additive schema update mode 
 + final RealmSchema schema = new RealmSchema ( realmObjectSchemas ) ; 
 + long newVersion = realm . configuration . getSchemaVersion ( ) ; 
 + if ( realm . sharedRealm . requiresMigration ( schema ) ) { 
 + if ( currentVersion > = newVersion ) { 
 + throw new IllegalArgumentException ( String . format ( " The schema was changed but the schema version " + 
 + " was not updated . The configured schema version ( % d ) must be higher than the one in the Realm " + 
 + " file ( % d ) in order to update the schema . " , newVersion , currentVersion ) ) ; 
 } 
 + realm . sharedRealm . updateSchema ( schema , newVersion ) ; 
 + / / The OS currently does not handle setting the schema version . We have to do it manually . 
 + realm . setVersion ( newVersion ) ; 
 + commitChanges = true ; 
 } 
 - realm . schema . columnIndices = new ColumnIndices ( 
 - ( version = = UNVERSIONED ) ? realm . configuration . getSchemaVersion ( ) : version , 
 - columnInfoMap ) ; 
 
 - if ( version = = UNVERSIONED ) { 
 - final Transaction transaction = realm . getConfiguration ( ) . getInitialDataTransaction ( ) ; 
 + final Map < Class < ? extends RealmModel > , ColumnInfo > columnInfoMap = new HashMap < > ( modelClasses . size ( ) ) ; 
 + for ( Class < ? extends RealmModel > modelClass : modelClasses ) { 
 + columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedRealm , false ) ) ; 
 + } 
 + 
 + realm . schema . columnIndices = new ColumnIndices ( ( unversioned ) ? newVersion : currentVersion , columnInfoMap ) ; 
 + 
 + if ( unversioned ) { 
 + final Transaction transaction = realm . configuration . getInitialDataTransaction ( ) ; 
 if ( transaction ! = null ) { 
 - if ( syncAvailable ) { 
 - realm . executeTransaction ( transaction ) ; 
 - realm . executeTransaction ( new Transaction ( ) { 
 - @ Override 
 - public void execute ( Realm realm ) { 
 - realm . setVersion ( realm . configuration . getSchemaVersion ( ) ) ; 
 - } 
 - } ) ; 
 - } else { 
 - transaction . execute ( realm ) ; 
 - } 
 + transaction . execute ( realm ) ; 
 } 
 - 
 } 
 + } catch ( Exception e ) { 
 + commitChanges = false ; 
 + throw e ; 
 } finally { 
 - if ( ! syncAvailable ) { 
 - if ( commitNeeded ) { 
 - realm . commitTransaction ( false ) ; 
 - } else { 
 - realm . cancelTransaction ( ) ; 
 - } 
 + if ( commitChanges ) { 
 + realm . commitTransaction ( false ) ; 
 } 
 } 
 } 
 @ @ - 798 , 7 + 842 , 7 @ @ public class Realm extends BaseRealm { 
 * / 
 public < E extends RealmModel > E createObject ( Class < E > clazz ) { 
 checkIfValid ( ) ; 
 - return createObjectInternal ( clazz , true , Collections . < String > emptyList ( ) ) ; 
 + return createObjectInternal ( clazz , true , Collections . < String > emptyList ( ) ) ; 
 } 
 
 / * * 
 @ @ - 811 , 9 + 855 , 10 @ @ public class Realm extends BaseRealm { 
 * @ throws RealmException if the primary key is defined in the model class or an object cannot be created . 
 * / 
 / / called from proxy classes 
 - < E extends RealmModel > E createObjectInternal ( Class < E > clazz , 
 - boolean acceptDefaultValue , 
 - List < String > excludeFields ) { 
 + < E extends RealmModel > E createObjectInternal ( 
 + Class < E > clazz , 
 + boolean acceptDefaultValue , 
 + List < String > excludeFields ) { 
 Table table = schema . getTable ( clazz ) ; 
 / / Check and throw the exception earlier for a better exception message . 
 if ( table . hasPrimaryKey ( ) ) { 
 @ @ - 841 , 7 + 886 , 7 @ @ public class Realm extends BaseRealm { 
 * / 
 public < E extends RealmModel > E createObject ( Class < E > clazz , Object primaryKeyValue ) { 
 checkIfValid ( ) ; 
 - return createObjectInternal ( clazz , primaryKeyValue , true , Collections . < String > emptyList ( ) ) ; 
 + return createObjectInternal ( clazz , primaryKeyValue , true , Collections . < String > emptyList ( ) ) ; 
 } 
 
 / * * 
 @ @ - 857 , 9 + 902 , 11 @ @ public class Realm extends BaseRealm { 
 * @ throws IllegalArgumentException if the { @ code primaryKeyValue } doesn ' t have a value that can be converted to the 
 * / 
 / / called from proxy classes 
 - < E extends RealmModel > E createObjectInternal ( Class < E > clazz , Object primaryKeyValue , 
 - boolean acceptDefaultValue , 
 - List < String > excludeFields ) { 
 + < E extends RealmModel > E createObjectInternal ( 
 + Class < E > clazz , 
 + Object primaryKeyValue , 
 + boolean acceptDefaultValue , 
 + List < String > excludeFields ) { 
 Table table = schema . getTable ( clazz ) ; 
 long rowIndex = table . addEmptyRowWithPrimaryKey ( primaryKeyValue ) ; 
 return get ( clazz , rowIndex , acceptDefaultValue , excludeFields ) ; 
 @ @ - 894 , 7 + 941 , 7 @ @ public class Realm extends BaseRealm { 
 * @ param object { @ link io . realm . RealmObject } to copy or update . 
 * @ return the new or updated RealmObject with all its properties backed by the Realm . 
 * @ throws java . lang . IllegalArgumentException if the object is { @ code null } or doesn ' t have a Primary key defined 
 - * or it belongs to a Realm instance in a different thread . 
 + * or it belongs to a Realm instance in a different thread . 
 * @ see # copyToRealm ( RealmModel ) 
 * / 
 public < E extends RealmModel > E copyToRealmOrUpdate ( E object ) { 
 @ @ - 984 , 9 + 1031 , 9 @ @ public class Realm extends BaseRealm { 
 * 
 * @ param object RealmObjects to insert . 
 * @ throws IllegalStateException if the corresponding Realm is closed , called from an incorrect thread or not in a 
 - * transaction . 
 + * transaction . 
 * @ throws io . realm . exceptions . RealmPrimaryKeyConstraintException if two objects with the same primary key is 
 - * inserted or if a primary key value already exists in the Realm . 
 + * inserted or if a primary key value already exists in the Realm . 
 * @ see # copyToRealm ( RealmModel ) 
 * / 
 public void insert ( RealmModel object ) { 
 @ @ - 1021 , 7 + 1068 , 6 @ @ public class Realm extends BaseRealm { 
 * transaction . 
 * @ throws io . realm . exceptions . RealmPrimaryKeyConstraintException if two objects with the same primary key is 
 * inserted or if a primary key value already exists in the Realm . 
 - * 
 * @ see # copyToRealmOrUpdate ( Iterable ) 
 * / 
 public void insertOrUpdate ( Collection < ? extends RealmModel > objects ) { 
 @ @ - 1134 , 7 + 1180 , 7 @ @ public class Realm extends BaseRealm { 
 * @ param < E > type of object . 
 * @ return an in - memory detached copy of the RealmObjects . 
 * @ throws IllegalArgumentException if { @ code maxDepth < 0 } , the RealmObject is no longer accessible or it is a 
 - * { @ link DynamicRealmObject } . 
 + * { @ link DynamicRealmObject } . 
 * @ see # copyToRealmOrUpdate ( Iterable ) 
 * / 
 public < E extends RealmModel > List < E > copyFromRealm ( Iterable < E > realmObjects , int maxDepth ) { 
 @ @ - 1192 , 7 + 1238 , 7 @ @ public class Realm extends BaseRealm { 
 * @ param < E > type of object . 
 * @ return an in - memory detached copy of the managed { @ link RealmObject } . 
 * @ throws IllegalArgumentException if { @ code maxDepth < 0 } , the RealmObject is no longer accessible or it is a 
 - * { @ link DynamicRealmObject } . 
 + * { @ link DynamicRealmObject } . 
 * @ see # copyToRealmOrUpdate ( RealmModel ) 
 * / 
 public < E extends RealmModel > E copyFromRealm ( E realmObject , int maxDepth ) { 
 @ @ - 1327 , 7 + 1373 , 7 @ @ public class Realm extends BaseRealm { 
 
 / / If the user provided a Callback then we make sure , the current Realm has a Handler 
 / / we can use to deliver the result 
 - if ( ( onSuccess ! = null | | onError ! = null ) & & ! hasValidNotifier ( ) ) { 
 + if ( ( onSuccess ! = null | | onError ! = null ) & & ! hasValidNotifier ( ) ) { 
 throw new IllegalStateException ( " Your Realm is opened from a thread without a Looper " + 
 " and you provided a callback , we need a Handler to invoke your callback " ) ; 
 } 
 @ @ - 1576 , 7 + 1622 , 7 @ @ public class Realm extends BaseRealm { 
 * @ param globalCacheArray global cache of column indices . If it contains an entry for current 
 * schema version , this method only copies the indices information in the entry . 
 * @ return newly created indices information for current schema version . Or { @ code null } if 
 - * { @ code globalCacheArray } already contains the entry for current schema version . 
 + * { @ code globalCacheArray } already contains the entry for current schema version . 
 * / 
 ColumnIndices updateSchemaCache ( ColumnIndices [ ] globalCacheArray ) { 
 final long currentSchemaVersion = sharedRealm . getSchemaVersion ( ) ; 
 @ @ - 1681 , 6 + 1727 , 7 @ @ public class Realm extends BaseRealm { 
 * / 
 class Callback { 
 public void onSuccess ( ) { } 
 + 
 public void onError ( Exception e ) { } 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 7cd6d6f . . fcec729 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 66 , 7 + 66 , 7 @ @ public class RealmConfiguration { 
 public static final int KEY _ LENGTH = 64 ; 
 
 private static final Object DEFAULT _ MODULE ; 
 - private static final RealmProxyMediator DEFAULT _ MODULE _ MEDIATOR ; 
 + protected static final RealmProxyMediator DEFAULT _ MODULE _ MEDIATOR ; 
 private static Boolean rxJavaAvailable ; 
 
 static { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index cc3f528 . . 82aca6f 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 199 , 6 + 199 , 7 @ @ public final class SharedRealm implements Closeable { 
 rosServerUrl ! = null ? SchemaMode . SCHEMA _ MODE _ ADDITIVE . getNativeValue ( ) : SchemaMode . SCHEMA _ MODE _ MANUAL . getNativeValue ( ) , 
 config . getDurability ( ) = = Durability . MEM _ ONLY , 
 enable _ caching , 
 + config . getSchemaVersion ( ) , 
 disableFormatUpgrade , 
 autoChangeNotifications , 
 rosServerUrl , 
 @ @ - 326 , 10 + 327 , 18 @ @ public final class SharedRealm implements Closeable { 
 return nativeCompact ( nativePtr ) ; 
 } 
 
 + / * * 
 + * Update the underlying schema based on the schema description . 
 + * Calling this method must be done from inside a write transaction . 
 + * / 
 public void updateSchema ( RealmSchema schema , long version ) { 
 nativeUpdateSchema ( nativePtr , schema . getNativePtr ( ) , version ) ; 
 } 
 
 + public boolean requiresMigration ( RealmSchema schema ) { 
 + return nativeRequiresMigration ( nativePtr , schema . getNativePtr ( ) ) ; 
 + } 
 + 
 @ Override 
 public void close ( ) { 
 if ( realmNotifier ! = null ) { 
 @ @ - 372 , 7 + 381 , 7 @ @ public final class SharedRealm implements Closeable { 
 
 private static native void nativeInit ( String temporaryDirectoryPath ) ; 
 private static native long nativeCreateConfig ( String realmPath , byte [ ] key , byte schemaMode , boolean inMemory , 
 - boolean cache , boolean disableFormatUpgrade , 
 + boolean cache , long schemaVersion , boolean disableFormatUpgrade , 
 boolean autoChangeNotification , 
 String syncServerURL , String syncUserToken ) ; 
 private static native void nativeCloseConfig ( long nativeConfigPtr ) ; 
 @ @ - 402 , 4 + 411 , 5 @ @ public final class SharedRealm implements Closeable { 
 private static native void nativeStopWaitForChange ( long nativeSharedRealmPtr ) ; 
 private static native boolean nativeCompact ( long nativeSharedRealmPtr ) ; 
 private static native void nativeUpdateSchema ( long nativePtr , long nativeSchemaPtr , long version ) ; 
 + private static native boolean nativeRequiresMigration ( long nativePtr , long nativeSchemaPtr ) ; 
 } 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 index c7804ae . . 9ee7b0f 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncConfiguration . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . net . URISyntaxException ; 
 import java . security . MessageDigest ; 
 import java . security . NoSuchAlgorithmException ; 
 import java . util . Arrays ; 
 + import java . util . Collections ; 
 import java . util . HashSet ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 @ @ - 238 , 6 + 239 , 7 @ @ public class SyncConfiguration extends RealmConfiguration { 
 private String fileName ; 
 private boolean overrideDefaultLocalFileName = false ; 
 private byte [ ] key ; 
 + private long schemaVersion = 0 ; 
 private HashSet < Object > modules = new HashSet < Object > ( ) ; 
 private HashSet < Class < ? extends RealmModel > > debugSchema = new HashSet < Class < ? extends RealmModel > > ( ) ; 
 private RxObservableFactory rxFactory ; 
 @ @ - 424 , 6 + 426 , 40 @ @ public class SyncConfiguration extends RealmConfiguration { 
 } 
 
 / * * 
 + * DEBUG method . This restricts the Realm schema to only consist of the provided classes without having to 
 + * create a module . These classes must be available in the default module . Calling this will remove any 
 + * previously configured modules . 
 + * / 
 + SyncConfiguration . Builder schema ( Class < ? extends RealmModel > firstClass , Class < ? extends RealmModel > . . . additionalClasses ) { 
 + if ( firstClass = = null ) { 
 + throw new IllegalArgumentException ( " A non - null class must be provided " ) ; 
 + } 
 + modules . clear ( ) ; 
 + modules . add ( DEFAULT _ MODULE _ MEDIATOR ) ; 
 + debugSchema . add ( firstClass ) ; 
 + if ( additionalClasses ! = null ) { 
 + Collections . addAll ( debugSchema , additionalClasses ) ; 
 + } 
 + 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Sets the schema version of the Realm . This must be equal to or higher than the schema version of the existing 
 + * Realm file , if any . If the schema version is higher than the already existing Realm , a migration is needed . 
 + * 
 + * @ param schemaVersion the schema version . 
 + * @ throws IllegalArgumentException if schema version is invalid . 
 + * / 
 + public Builder schemaVersion ( long schemaVersion ) { 
 + if ( schemaVersion < 0 ) { 
 + throw new IllegalArgumentException ( " Realm schema version numbers must be 0 ( zero ) or higher . Yours was : " + schemaVersion ) ; 
 + } 
 + this . schemaVersion = schemaVersion ; 
 + return this ; 
 + } 
 + 
 + / * * 
 * Replaces the existing module ( s ) with one or more { @ link RealmModule } s . Using this method will replace the 
 * current schema for this Realm with the schema defined by the provided modules . 
 * < p > 
 @ @ - 616 , 7 + 652 , 7 @ @ public class SyncConfiguration extends RealmConfiguration { 
 getCanonicalPath ( new File ( realmFileDirectory , realmFileName ) ) , 
 null , / / assetFile not supported by Sync . See https : / / github . com / realm / realm - sync / issues / 241 
 key , 
 - 0 , 
 + schemaVersion , 
 null , / / Custom migrations not supported 
 false , / / MigrationNeededException is never thrown 
 durability ,

NEAREST DIFF:
diff - - git a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java 
 index c7ce08f . . 4ba665f 100644 
 - - - a / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java 
 + + + b / examples / objectServerExample / src / main / java / io / realm / examples / objectserver / CounterActivity . java 
 @ @ - 37 , 10 + 37 , 13 @ @ import io . realm . User ; 
 
 public class CounterActivity extends AppCompatActivity { 
 
 + private static final String REALM _ URL = " realm : / / " + MyApplication . OBJECT _ SERVER _ IP + " / ~ / default " ; 
 + 
 private Realm realm ; 
 private RealmResults < CounterOperation > counter ; 
 private User user ; 
 
 + 
 @ BindView ( R . id . text _ counter ) TextView counterView ; 
 
 @ Override 
 @ @ - 61 , 15 + 64 , 13 @ @ public class CounterActivity extends AppCompatActivity { 
 if ( User . currentUser ( ) ! = null ) { 
 user = User . currentUser ( ) ; 
 / / Create a RealmConfiguration for our user 
 - SyncConfiguration config = new SyncConfiguration . Builder ( ) 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , REALM _ URL ) 
 . initialData ( new Realm . Transaction ( ) { 
 @ Override 
 public void execute ( Realm realm ) { 
 realm . createObject ( CRDTCounter . class , 1 ) ; 
 } 
 } ) 
 - . user ( user ) 
 - . serverUrl ( " realm : / / " + MyApplication . OBJECT _ SERVER _ IP + " / ~ / default " ) 
 . build ( ) ; 
 
 / / This will automatically sync all changes in the background for as long as the Realm is open 
 diff - - git a / realm / config / findbugs / findbugs - filter . xml b / realm / config / findbugs / findbugs - filter . xml 
 index b6503d5 . . 2911aec 100644 
 - - - a / realm / config / findbugs / findbugs - filter . xml 
 + + + b / realm / config / findbugs / findbugs - filter . xml 
 @ @ - 27 , 6 + 27 , 11 @ @ 
 < Field name = " minDepth " / > 
 < Bug pattern = " URF _ UNREAD _ PUBLIC _ OR _ PROTECTED _ FIELD " / > 
 < / Match > 
 + < Match > 
 + < Class name = " io . realm . SyncManager " / > 
 + < Field name = " APP _ ID " / > 
 + < Bug pattern = " MS _ SHOULD _ BE _ FINAL " / > 
 + < / Match > 
 
 < ! - - Unit tests - - > 
 < Match > 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / SchemaTests . java 
 index 8394607 . . 8dc0c1e 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / SchemaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / SchemaTests . java 
 @ @ - 17 , 7 + 17 , 6 @ @ 
 package io . realm ; 
 
 
 - import android . content . Context ; 
 import android . support . test . InstrumentationRegistry ; 
 import android . support . test . runner . AndroidJUnit4 ; 
 
 @ @ - 41 , 17 + 40 , 12 @ @ public class SchemaTests { 
 @ Rule 
 public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 
 - private Context context ; 
 private SyncConfiguration config ; 
 
 @ Before 
 public void setUp ( ) { 
 - context = InstrumentationRegistry . getContext ( ) ; 
 User user = SyncTestUtils . createTestUser ( ) ; 
 - config = new SyncConfiguration . Builder ( context ) 
 - . user ( user ) 
 - . serverUrl ( " realm : / / objectserver . realm . io / ~ / default " ) 
 - . build ( ) ; 
 + config = new SyncConfiguration . Builder ( user , " realm : / / objectserver . realm . io / ~ / default " ) . build ( ) ; 
 } 
 
 @ After 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 index 457637c . . 81685ee 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 @ @ - 71 , 16 + 71 , 14 @ @ public class SyncConfigurationTests { 
 
 @ Test 
 public void user _ invalidUserThrows ( ) { 
 - SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) ; 
 - 
 try { 
 - builder . user ( null ) ; 
 + new SyncConfiguration . Builder ( null , " realm : / / ros . realm . io / default " ) ; 
 } catch ( IllegalArgumentException ignore ) { 
 } 
 
 User user = createTestUser ( 0 ) ; / / Create user that has expired credentials 
 try { 
 - builder . user ( user ) ; 
 + new SyncConfiguration . Builder ( user , " realm : / / ros . realm . io / default " ) ; 
 } catch ( IllegalArgumentException ignore ) { 
 } 
 } 
 @ @ - 99 , 10 + 97 , 7 @ @ public class SyncConfigurationTests { 
 String expectedFolder = validUrl [ 1 ] ; 
 String expectedFileName = validUrl [ 2 ] ; 
 
 - SyncConfiguration config = new SyncConfiguration . Builder ( context ) 
 - . serverUrl ( serverUrl ) 
 - . user ( user ) 
 - . build ( ) ; 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , serverUrl ) . build ( ) ; 
 
 assertEquals ( new File ( context . getFilesDir ( ) , expectedFolder ) , config . getRealmDirectory ( ) ) ; 
 assertEquals ( expectedFileName , config . getRealmFileName ( ) ) ; 
 @ @ - 127 , 10 + 122 , 9 @ @ public class SyncConfigurationTests { 
 " http : / / objectserver . realm . io / ~ / default " , / / wrong scheme 
 } ; 
 
 - SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) ; 
 for ( String invalidUrl : invalidUrls ) { 
 try { 
 - builder . serverUrl ( invalidUrl ) ; 
 + new SyncConfiguration . Builder ( createTestUser ( ) , invalidUrl ) ; 
 fail ( invalidUrl + " should have failed . " ) ; 
 } catch ( IllegalArgumentException ignore ) { 
 } 
 @ @ - 151 , 11 + 145 , 7 @ @ public class SyncConfigurationTests { 
 SyncConfiguration . MAX _ FILE _ NAME _ LENGTH , SyncConfiguration . MAX _ FILE _ NAME _ LENGTH + 1 , 1000 } ; 
 
 for ( int len : lengths ) { 
 - SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) 
 - . serverUrl ( makeServerUrl ( len ) ) 
 - . user ( createTestUser ( ) ) ; 
 - 
 - SyncConfiguration config = builder . build ( ) ; 
 + SyncConfiguration config = new SyncConfiguration . Builder ( createTestUser ( ) , makeServerUrl ( len ) ) . build ( ) ; 
 assertTrue ( " Length : " + len , config . getRealmFileName ( ) . length ( ) < = SyncConfiguration . MAX _ FILE _ NAME _ LENGTH ) ; 
 assertTrue ( " Length : " + len , config . getPath ( ) . length ( ) < = SyncConfiguration . MAX _ FULL _ PATH _ LENGTH ) ; 
 } 
 @ @ - 163 , 9 + 153 , 7 @ @ public class SyncConfigurationTests { 
 
 @ Test 
 public void serverUrl _ invalidChars ( ) { 
 - SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) 
 - . serverUrl ( " realm : / / objectserver . realm . io / ~ / ? " ) 
 - . user ( createTestUser ( ) ) ; 
 + SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( createTestUser ( ) , " realm : / / objectserver . realm . io / ~ / ? " ) ; 
 SyncConfiguration config = builder . build ( ) ; 
 assertFalse ( config . getRealmFileName ( ) . contains ( " ? " ) ) ; 
 } 
 @ @ - 179 , 53 + 167 , 20 @ @ public class SyncConfigurationTests { 
 urlPort . put ( " realms : / / objectserver . realm . io : 2443 / ~ / default " , 2443 ) ; 
 
 for ( String url : urlPort . keySet ( ) ) { 
 - SyncConfiguration config = new SyncConfiguration . Builder ( context ) 
 - . serverUrl ( url ) 
 - . user ( createTestUser ( ) ) 
 - . build ( ) ; 
 + SyncConfiguration config = new SyncConfiguration . Builder ( createTestUser ( ) , url ) . build ( ) ; 
 assertEquals ( urlPort . get ( url ) . intValue ( ) , config . getServerUrl ( ) . getPort ( ) ) ; 
 } 
 } 
 
 @ Test 
 - public void userAndServerUrlRequired ( ) { 
 - SyncConfiguration . Builder builder ; 
 - 
 - / / Both missing 
 - builder = new SyncConfiguration . Builder ( context ) ; 
 - try { 
 - builder . build ( ) ; 
 - } catch ( IllegalStateException ignore ) { 
 - } 
 - 
 - builder = new SyncConfiguration . Builder ( context ) ; 
 - try { 
 - builder . user ( createTestUser ( Long . MAX _ VALUE ) ) . build ( ) ; 
 - } catch ( IllegalStateException ignore ) { 
 - } 
 - 
 - / / user missing 
 - builder = new SyncConfiguration . Builder ( context ) ; 
 - try { 
 - builder . serverUrl ( " realm : / / foo . bar / ~ / default " ) . build ( ) ; 
 - } catch ( IllegalStateException ignore ) { 
 - } 
 - } 
 - 
 - @ Test 
 public void errorHandler ( ) { 
 - SyncConfiguration . Builder builder ; 
 - builder = new SyncConfiguration . Builder ( context ) 
 - . user ( createTestUser ( ) ) 
 - . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; 
 - 
 + SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( createTestUser ( ) , " realm : / / objectserver . realm . io / default " ) ; 
 Session . ErrorHandler errorHandler = new Session . ErrorHandler ( ) { 
 @ Override 
 public void onError ( Session session , ObjectServerError error ) { 
 
 } 
 } ; 
 - 
 SyncConfiguration config = builder . errorHandler ( errorHandler ) . build ( ) ; 
 assertEquals ( errorHandler , config . getErrorHandler ( ) ) ; 
 } 
 @ @ - 242 , 10 + 197 , 9 @ @ public class SyncConfigurationTests { 
 SyncManager . setDefaultSessionErrorHandler ( errorHandler ) ; 
 
 / / Create configuration using the default handler 
 - SyncConfiguration config = new SyncConfiguration . Builder ( context ) 
 - . user ( createTestUser ( ) ) 
 - . serverUrl ( " realm : / / objectserver . realm . io / default " ) 
 - . build ( ) ; 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) . build ( ) ; 
 assertEquals ( errorHandler , config . getErrorHandler ( ) ) ; 
 SyncManager . setDefaultSessionErrorHandler ( null ) ; 
 } 
 @ @ - 253 , 8 + 207 , 9 @ @ public class SyncConfigurationTests { 
 
 @ Test 
 public void errorHandler _ nullThrows ( ) { 
 - SyncConfiguration . Builder builder ; 
 - builder = new SyncConfiguration . Builder ( context ) ; 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( user , url ) ; 
 
 try { 
 builder . errorHandler ( null ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / ObjectServer . java b / realm / realm - library / src / main / java / io / realm / ObjectServer . java 
 new file mode 100644 
 index 0000000 . . b859929 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / ObjectServer . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package io . realm ; 
 + 
 + import android . content . Context ; 
 + import android . content . pm . PackageInfo ; 
 + 
 + import io . realm . android . SharedPrefsUserStore ; 
 + import io . realm . internal . Keep ; 
 + 
 + / * * 
 + * Internal initializer class for the Object Server . 
 + * Use to keep the ` SyncManager ` free from Android dependencies 
 + * / 
 + @ SuppressWarnings ( " unused " ) 
 + @ Keep 
 + class ObjectServer { 
 + 
 + public static void init ( Context context ) { 
 + / / Setup AppID 
 + String appId = " unknown " ; 
 + try { 
 + PackageInfo pi = context . getPackageManager ( ) . getPackageInfo ( context . getPackageName ( ) , 0 ) ; 
 + appId = pi . packageName ; 
 + } catch ( Exception ignore ) { 
 + } 
 + 
 + / / Configure default UserStore 
 + UserStore userStore = new SharedPrefsUserStore ( context ) ; 
 + 
 + SyncManager . init ( appId , userStore ) ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 5c7cbeb . . 4bc0c25 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 52 , 6 + 52 , 7 @ @ import io . realm . exceptions . RealmFileException ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 import io . realm . internal . ColumnIndices ; 
 import io . realm . internal . ColumnInfo ; 
 + import io . realm . internal . ObjectServerFacade ; 
 import io . realm . internal . RealmCore ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . RealmProxyMediator ; 
 @ @ - 188 , 6 + 189 , 7 @ @ public final class Realm extends BaseRealm { 
 RealmCore . loadLibrary ( context ) ; 
 RealmLog . add ( BuildConfig . DEBUG ? new AndroidLogger ( Log . DEBUG ) : new AndroidLogger ( Log . WARN ) ) ; 
 defaultConfiguration = new RealmConfiguration . Builder ( context ) . build ( ) ; 
 + ObjectServerFacade . getSyncFacadeIfPossible ( ) . init ( context ) ; 
 BaseRealm . applicationContext = context . getApplicationContext ( ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 index e8cb2b0 . . 7d964ed 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 @ @ - 245 , 15 + 245 , 34 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 / * * 
 * Creates an instance of the Builder for the SyncConfiguration . 
 * < p > 
 - * This will use the app ' s own internal directory for storing the Realm file . This does not require any 
 - * additional permissions . The default location is { @ code / data / data / < packagename > / files / realm - object - server } , 
 - * but can change depending on vendor implementations of Android . 
 + * Opening a synchronized Realm requires a valid user and an unique URL that identifies that Realm . In URL ' s , 
 + * { @ code / ~ / } can be used as a placeholder for a user ID in case the Realm should only be available to one 
 + * user , e . g . { @ code " realm : / / objectserver . realm . io / ~ / default " } 
 + * < p > 
 + * The URL cannot end with { @ code . realm } . 
 + * < p > 
 + * The ` / ~ / ` will automatically be replaced with the user ID when creating the { @ link SyncConfiguration } . 
 + * < p > 
 + * The URL also defines the local location on disk . The default location of a synchronized Realm file is 
 + * { @ code / data / data / < packageName > / files / realm - object - server / < user - id > / < last - path - segment > } , but this behaviour 
 + * can be overwritten using { @ link # name ( String ) } and { @ link # directory ( File ) } . 
 + * < p > 
 + * Many Android devices are using FAT32 file systems . FAT32 file systems have a limitation that 
 + * file name cannot be longer than 255 characters . Moreover , the entire URL should not exceed 256 characters . 
 + * If file name and underlying path are too long to handle for FAT32 , a shorter unique name will be generated . 
 + * See also @ { link https : / / msdn . microsoft . com / en - us / library / aa365247 ( VS . 85 ) . aspx } . 
 + * 
 + * @ param user Set the user for this Realm . An authenticated { @ link User } is required to open any Realm managed 
 + * by a Realm Object Server . 
 + * @ param url URL identifying the Realm . 
 + * 
 + * @ see User # isValid ( ) 
 * / 
 - public Builder ( ) { 
 - this ( BaseRealm . applicationContext ) ; 
 + public Builder ( User user , String url ) { 
 + this ( BaseRealm . applicationContext , user , url ) ; 
 } 
 
 - Builder ( Context context ) { 
 + Builder ( Context context , User user , String url ) { 
 if ( context = = null ) { 
 throw new IllegalStateException ( " Call ` Realm . init ( Context ) ` before creating a SyncConfiguration " ) ; 
 } 
 @ @ - 261 , 11 + 280 , 89 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 if ( Realm . getDefaultModule ( ) ! = null ) { 
 this . modules . add ( Realm . getDefaultModule ( ) ) ; 
 } 
 + 
 + validateAndSet ( user ) ; 
 + validateAndSet ( url ) ; 
 + } 
 + 
 + private void validateAndSet ( User user ) { 
 + if ( user = = null ) { 
 + throw new IllegalArgumentException ( " Non - null ` user ` required . " ) ; 
 + } 
 + if ( ! user . isValid ( ) ) { 
 + throw new IllegalArgumentException ( " User not authenticated or authentication expired . " ) ; 
 + } 
 + this . user = user ; 
 + } 
 + 
 + private void validateAndSet ( String url ) { 
 + if ( url = = null ) { 
 + throw new IllegalArgumentException ( " Non - null ' url ' required . " ) ; 
 + } 
 + 
 + try { 
 + serverUrl = new URI ( url ) ; 
 + } catch ( URISyntaxException e ) { 
 + throw new IllegalArgumentException ( " Invalid url : " + url , e ) ; 
 + } 
 + 
 + / / scheme must be realm or realms 
 + String scheme = serverUrl . getScheme ( ) ; 
 + if ( ! scheme . equals ( " realm " ) & & ! scheme . equals ( " realms " ) ) { 
 + throw new IllegalArgumentException ( " Invalid scheme : " + scheme ) ; 
 + } 
 + 
 + / / set port if not set by user 
 + int port ; 
 + int currentPort = serverUrl . getPort ( ) ; 
 + if ( currentPort = = - 1 ) { 
 + port = scheme . equals ( " realm " ) ? PORT _ REALM : PORT _ REALMS ; 
 + } else { 
 + port = currentPort ; 
 + } 
 + 
 + / / Detect last path segment as it is the default file name 
 + String path = serverUrl . getPath ( ) ; 
 + if ( path = = null ) { 
 + throw new IllegalArgumentException ( " Invalid url : " + url ) ; 
 + } 
 + 
 + String [ ] pathSegments = path . split ( " / " ) ; 
 + for ( int i = 1 ; i < pathSegments . length ; i + + ) { 
 + String segment = pathSegments [ i ] ; 
 + if ( segment . equals ( " ~ " ) ) { 
 + continue ; 
 + } 
 + if ( segment . equals ( " . . " ) | | segment . equals ( " . " ) ) { 
 + throw new IllegalArgumentException ( " The URL has an invalid segment : " + segment ) ; 
 + } 
 + Matcher m = pattern . matcher ( segment ) ; 
 + if ( ! m . matches ( ) ) { 
 + throw new IllegalArgumentException ( " The URL must only contain characters 0 - 9 , a - z , A - Z , . , _ , and - : " + segment ) ; 
 + } 
 + } 
 + 
 + this . defaultLocalFileName = pathSegments [ pathSegments . length - 1 ] ; 
 + 
 + / / Validate filename 
 + / / TODO Lift this restriction on the Object Server 
 + if ( defaultLocalFileName . endsWith ( " . realm " ) 
 + | | defaultLocalFileName . endsWith ( " . realm . lock " ) 
 + | | defaultLocalFileName . endsWith ( " . realm . management " ) ) { 
 + throw new IllegalArgumentException ( " The URL must not end with ' . realm ' , ' . realm . lock ' or ' . realm . management : " + url ) ; 
 + } 
 + 
 + try { 
 + this . serverUrl = new URI ( scheme , serverUrl . getUserInfo ( ) , serverUrl . getHost ( ) , 
 + port , serverUrl . getPath ( ) , serverUrl . getQuery ( ) , serverUrl . getFragment ( ) ) ; 
 + } catch ( URISyntaxException e ) { 
 + throw new IllegalArgumentException ( " Cannot reconstruct url : " + url , e ) ; 
 + } 
 } 
 
 / * * 
 * Sets the local filename for the Realm . 
 - * This will override the default name defined by the { @ link # serverUrl ( String ) } 
 + * This will override the default name defined by the the Realm URL . 
 * 
 * @ param filename name of the local file on disk . 
 * / 
 @ @ - 282 , 7 + 379 , 7 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 * Sets the local root directory where synchronized Realm files can be saved . 
 * 
 * Synchronized Realms will not be saved directly in the provided directory , but instead in a 
 - * subfolder that matches the path defined by { @ link # serverUrl ( String ) } . As Realm server URLs are unique 
 + * subfolder that matches the path defined by Realm URL . As Realm server URLs are unique 
 * this means that multiple users can save their Realms on disk without the risk of them overriding each other . 
 * 
 * The default location is { @ code context . getFilesDir ( ) } . 
 @ @ - 390 , 110 + 487 , 6 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 } 
 
 / * * 
 - * Enable server side synchronization for this Realm . The name should be a unique URL that identifies the Realm . 
 - * { @ code / ~ / } can be used as a placeholder for a user ID in case the Realm should only be available to one 
 - * user , e . g . { @ code " realm : / / objectserver . realm . io / ~ / default " } 
 - * 
 - * The ` / ~ / ` will automatically be replaced with the user ID when creating the { @ link SyncConfiguration } . 
 - * 
 - * The URL also defines the local location on the device . The default location of a synchronized Realm file is 
 - * { @ code / data / data / < packageName > / files / realm - object - server / < user - id > / < last - path - segment > } . 
 - * 
 - * This behaviour can be overwritten using { @ link # name ( String ) } and { @ link # directory ( File ) } . 
 - * 
 - * Many Android devices are using FAT32 file systems . FAT32 file systems have a limitation that 
 - * file name cannot be longer than 255 characters . Moreover , the entire URL should not exceed 256 characters . 
 - * If file name and underlying path are too long to handle for FAT32 , a shorter unique name will be generated . 
 - * See also @ { link https : / / msdn . microsoft . com / en - us / library / aa365247 ( VS . 85 ) . aspx } . 
 - * 
 - * @ param url URL identifying the Realm . 
 - * @ throws IllegalArgumentException if the URL is not valid . 
 - * / 
 - public Builder serverUrl ( String url ) { 
 - if ( url = = null ) { 
 - throw new IllegalArgumentException ( " Non - null ' url ' required . " ) ; 
 - } 
 - 
 - URI serverUrl ; 
 - try { 
 - serverUrl = new URI ( url ) ; 
 - } catch ( URISyntaxException e ) { 
 - throw new IllegalArgumentException ( " Invalid url : " + url , e ) ; 
 - } 
 - 
 - / / scheme must be realm or realms 
 - String scheme = serverUrl . getScheme ( ) ; 
 - if ( ! scheme . equals ( " realm " ) & & ! scheme . equals ( " realms " ) ) { 
 - throw new IllegalArgumentException ( " Invalid scheme : " + scheme ) ; 
 - } 
 - 
 - / / set port if not set by user 
 - int port ; 
 - int currentPort = serverUrl . getPort ( ) ; 
 - if ( currentPort = = - 1 ) { 
 - port = scheme . equals ( " realm " ) ? PORT _ REALM : PORT _ REALMS ; 
 - } else { 
 - port = currentPort ; 
 - } 
 - 
 - / / Detect last path segment as it is the default file name 
 - String path = serverUrl . getPath ( ) ; 
 - if ( path = = null ) { 
 - throw new IllegalArgumentException ( " Invalid url : " + url ) ; 
 - } 
 - 
 - String [ ] pathSegments = path . split ( " / " ) ; 
 - for ( int i = 1 ; i < pathSegments . length ; i + + ) { 
 - String segment = pathSegments [ i ] ; 
 - if ( segment . equals ( " ~ " ) ) { 
 - continue ; 
 - } 
 - if ( segment . equals ( " . . " ) | | segment . equals ( " . " ) ) { 
 - throw new IllegalArgumentException ( " The URL has an invalid segment : " + segment ) ; 
 - } 
 - Matcher m = pattern . matcher ( segment ) ; 
 - if ( ! m . matches ( ) ) { 
 - throw new IllegalArgumentException ( " The URL must only contain characters 0 - 9 , a - z , A - Z , . , _ , and - : " + segment ) ; 
 - } 
 - } 
 - 
 - this . defaultLocalFileName = pathSegments [ pathSegments . length - 1 ] ; 
 - 
 - / / Validate filename 
 - / / TODO Lift this restriction on the Object Server 
 - if ( defaultLocalFileName . endsWith ( " . realm " ) 
 - | | defaultLocalFileName . endsWith ( " . realm . lock " ) 
 - | | defaultLocalFileName . endsWith ( " . realm . management " ) ) { 
 - throw new IllegalArgumentException ( " The URL must not end with ' . realm ' , ' . realm . lock ' or ' . realm . management : " + url ) ; 
 - } 
 - 
 - try { 
 - this . serverUrl = new URI ( scheme , serverUrl . getUserInfo ( ) , serverUrl . getHost ( ) , 
 - port , serverUrl . getPath ( ) , serverUrl . getQuery ( ) , serverUrl . getFragment ( ) ) ; 
 - } catch ( URISyntaxException e ) { 
 - throw new IllegalArgumentException ( " Cannot reconstruct url : " + url , e ) ; 
 - } 
 - return this ; 
 - } 
 - 
 - / * * 
 - * Set the user for this Realm . An authenticated { @ link User } is required to open any Realm managed by a 
 - * Realm Object Server . 
 - * 
 - * @ param user { @ link User } who wants to access this Realm . 
 - * / 
 - public Builder user ( User user ) { 
 - if ( user = = null ) { 
 - throw new IllegalArgumentException ( " Non - null ` user ` required . " ) ; 
 - } 
 - if ( ! user . isValid ( ) ) { 
 - throw new IllegalArgumentException ( " User not authenticated or authentication expired . " ) ; 
 - } 
 - this . user = user ; 
 - return this ; 
 - } 
 - 
 - / * * 
 * Sets the { @ link SyncPolicy } used to control when changes should be synchronized with the remote Realm . 
 * The default policy is { @ link AutomaticSyncPolicy } . 
 * 
 @ @ - 542 , 10 + 535 , 10 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 
 / * * 
 * Setting this will cause the local Realm file used to synchronize changes to be deleted if the { @ link User } 
 - * defined by { @ link # user ( User ) } logs out from the device using { @ link User # logout ( ) } . 
 + * owning this Realm logs out from the device using { @ link User # logout ( ) } . 
 * 
 - * The default behaviour is that the Realm file is allowed to stay behind , making it faster for users to log in 
 - * again and have access to their data faster . 
 + * The default behaviour is that the Realm file is allowed to stay behind , making it possible for users to log 
 + * in again and have access to their data faster . 
 * / 
 public Builder deleteRealmOnLogout ( ) { 
 this . deleteRealmOnLogout = true ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / SyncManager . java b / realm / realm - library / src / main / java / io / realm / SyncManager . java 
 index ce61081 . . 5230a25 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / SyncManager . java 
 + + + b / realm / realm - library / src / main / java / io / realm / SyncManager . java 
 @ @ - 22 , 11 + 22 , 10 @ @ import java . util . concurrent . ThreadPoolExecutor ; 
 import java . util . concurrent . TimeUnit ; 
 
 import io . realm . internal . Keep ; 
 - import io . realm . internal . RealmCore ; 
 - import io . realm . internal . objectserver . SyncSession ; 
 - import io . realm . internal . objectserver . SessionStore ; 
 import io . realm . internal . network . AuthenticationServer ; 
 import io . realm . internal . network . OkHttpAuthenticationServer ; 
 + import io . realm . internal . objectserver . SessionStore ; 
 + import io . realm . internal . objectserver . SyncSession ; 
 import io . realm . log . RealmLog ; 
 
 / * * 
 @ @ - 39 , 7 + 38 , 11 @ @ import io . realm . log . RealmLog ; 
 @ Keep 
 public final class SyncManager { 
 
 - public static final String APP _ ID = " foo " ; / / FIXME Find a way to get an application ID 
 + / * * 
 + * APP ID sent to the Realm Object Server . Is automatically initialized to the package name for the app . 
 + * / 
 + public static String APP _ ID = null ; 
 + 
 / / Thread pool used when doing network requests against the Realm Authentication Server . 
 / / FIXME Set proper parameters 
 public static final ThreadPoolExecutor NETWORK _ POOL _ EXECUTOR = new ThreadPoolExecutor ( 
 @ @ - 74 , 11 + 77 , 15 @ @ public final class SyncManager { 
 @ SuppressWarnings ( " FieldCanBeLocal " ) 
 private static Thread clientThread ; 
 
 - / / FIXME This should be called by a method in Realm . init ( ) otherwise the ClassLoader might call this first . 
 - static { 
 + / / Called from SyncObjectServerFacade using reflection 
 + @ SuppressWarnings ( " unused " ) 
 + static void init ( String appId , UserStore userStore ) { 
 + 
 + / / Initialize underlying Sync Network Client 
 nativeInitializeSyncClient ( ) ; 
 - / / Create the client thread in java to avoid strange problem when error happens . And anyway we need to attach 
 - / / to the jvm for logger . 
 + 
 + / / Create the client thread in java to avoid problems when exceptions are being thrown . We need to attach 
 + / / any thread to the JVM anyway in order to send back log events . 
 clientThread = new Thread ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / User . java b / realm / realm - library / src / main / java / io / realm / User . java 
 index 14cba00 . . 8b89636 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / User . java 
 + + + b / realm / realm - library / src / main / java / io / realm / User . java 
 @ @ - 101 , 8 + 101 , 6 @ @ public class User { 
 * @ param credentials credentials to use . 
 * @ param authenticationUrl Server that can authenticate against . 
 * @ throws ObjectServerError if the login failed . 
 - * 
 - * @ see SyncConfiguration . Builder # user ( User ) 
 * / 
 public static User login ( final Credentials credentials , final String authenticationUrl ) throws ObjectServerError { 
 final URL authUrl ; 
 @ @ - 140 , 8 + 138 , 6 @ @ public class User { 
 * @ param credentials credentials to use . 
 * @ param authenticationUrl Server that can authenticate against . 
 * @ param callback callback when login has completed or failed . This callback will always happen on the UI thread . 
 - * 
 - * @ see SyncConfiguration . Builder # user ( User ) 
 * / 
 public static RealmAsyncTask loginAsync ( final Credentials credentials , final String authenticationUrl , final Callback callback ) { 
 if ( Looper . myLooper ( ) = = null ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java 
 index 331ea7d . . 5422735 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / ObjectServerFacade . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package io . realm . internal ; 
 
 + import android . content . Context ; 
 + 
 import io . realm . RealmConfiguration ; 
 import io . realm . exceptions . RealmException ; 
 
 @ @ - 15 , 7 + 17 , 7 @ @ public class ObjectServerFacade { 
 static { 
 / / noinspection TryWithIdenticalCatches 
 try { 
 - Class syncFacadeClass = Class . forName ( " io . realm . internal . objectserver . SyncObjectServerFacade " ) ; 
 + Class syncFacadeClass = Class . forName ( " io . realm . internal . SyncObjectServerFacade " ) ; 
 syncFacade = ( ObjectServerFacade ) syncFacadeClass . newInstance ( ) ; 
 } catch ( ClassNotFoundException ignored ) { 
 } catch ( InstantiationException e ) { 
 @ @ - 26 , 14 + 28 , 27 @ @ public class ObjectServerFacade { 
 } 
 
 / * * 
 + * Initialize the Object Server library 
 + * @ param context 
 + * / 
 + public void init ( Context context ) { 
 + } 
 + 
 + / * * 
 * Notify the session for this configuration that a local commit was made . 
 * / 
 public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { 
 } 
 
 + / * * 
 + * The first instance of this Realm was opened . 
 + * / 
 public void realmClosed ( RealmConfiguration configuration ) { 
 } 
 
 + / * * 
 + * The last instance of this Realm was closed . 
 + * / 
 public void realmOpened ( RealmConfiguration configuration ) { 
 } 
 
 @ @ - 49 , 7 + 64 , 7 @ @ public class ObjectServerFacade { 
 } 
 
 / / Returns a SyncObjectServerFacade instance if the class exists . Otherwise returns a non - sync one . 
 - static ObjectServerFacade getSyncFacadeIfPossible ( ) { 
 + public static ObjectServerFacade getSyncFacadeIfPossible ( ) { 
 if ( syncFacade ! = null ) { 
 return syncFacade ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java 
 new file mode 100644 
 index 0000000 . . 7ea800c 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SyncObjectServerFacade . java 
 @ @ - 0 , 0 + 1 , 88 @ @ 
 + package io . realm . internal ; 
 + 
 + 
 + import android . content . Context ; 
 + 
 + import java . lang . reflect . InvocationTargetException ; 
 + import java . lang . reflect . Method ; 
 + 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . Session ; 
 + import io . realm . SyncConfiguration ; 
 + import io . realm . SyncManager ; 
 + import io . realm . exceptions . RealmException ; 
 + import io . realm . internal . objectserver . SessionStore ; 
 + import io . realm . internal . objectserver . SyncSession ; 
 + 
 + @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade 
 + @ Keep 
 + public class SyncObjectServerFacade extends ObjectServerFacade { 
 + 
 + private static final String WRONG _ TYPE _ OF _ CONFIGURATION = 
 + " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; 
 + 
 + @ Override 
 + public void init ( Context context ) { 
 + / / Trying to keep things out the public API is no fun : / 
 + / / Just use reflection on init . It is a one - time method call so should be acceptable . 
 + try { 
 + Class < ? > syncManager = Class . forName ( " io . realm . ObjectServer " ) ; 
 + Method method = syncManager . getDeclaredMethod ( " init " , Context . class ) ; 
 + method . setAccessible ( true ) ; 
 + method . invoke ( null , context ) ; 
 + } catch ( NoSuchMethodException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } catch ( InvocationTargetException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } catch ( IllegalAccessException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } catch ( ClassNotFoundException e ) { 
 + throw new RealmException ( " Could not initialize the Realm Object Server " , e ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . notifyCommit ( lastSnapshotVersion ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void realmClosed ( RealmConfiguration configuration ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . getSyncPolicy ( ) . onRealmClosed ( session ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void realmOpened ( RealmConfiguration configuration ) { 
 + if ( configuration instanceof SyncConfiguration ) { 
 + Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 + SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 + session . getSyncPolicy ( ) . onRealmOpened ( session ) ; 
 + } else { 
 + throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { 
 + if ( config instanceof SyncConfiguration ) { 
 + SyncConfiguration syncConfig = ( SyncConfiguration ) config ; 
 + String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; 
 + String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; 
 + return new String [ ] { rosServerUrl , rosUserToken } ; 
 + } else { 
 + return new String [ 2 ] ; 
 + } 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java 
 deleted file mode 100644 
 index 5740a20 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncObjectServerFacade . java 
 + + + / dev / null 
 @ @ - 1 , 60 + 0 , 0 @ @ 
 - package io . realm . internal . objectserver ; 
 - 
 - 
 - import io . realm . RealmConfiguration ; 
 - import io . realm . Session ; 
 - import io . realm . SyncConfiguration ; 
 - import io . realm . SyncManager ; 
 - import io . realm . internal . ObjectServerFacade ; 
 - 
 - @ SuppressWarnings ( " unused " ) / / Used through reflection . See ObjectServerFacade 
 - public class SyncObjectServerFacade extends ObjectServerFacade { 
 - 
 - private static final String WRONG _ TYPE _ OF _ CONFIGURATION = 
 - " ' configuration ' has to be an instance of ' SyncConfiguration ' . " ; 
 - 
 - @ Override 
 - public void notifyCommit ( RealmConfiguration configuration , long lastSnapshotVersion ) { 
 - if ( configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . notifyCommit ( lastSnapshotVersion ) ; 
 - } else { 
 - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void realmClosed ( RealmConfiguration configuration ) { 
 - if ( configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . getSyncPolicy ( ) . onRealmClosed ( session ) ; 
 - } else { 
 - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void realmOpened ( RealmConfiguration configuration ) { 
 - if ( configuration instanceof SyncConfiguration ) { 
 - Session publicSession = SyncManager . getSession ( ( SyncConfiguration ) configuration ) ; 
 - SyncSession session = SessionStore . getPrivateSession ( publicSession ) ; 
 - session . getSyncPolicy ( ) . onRealmOpened ( session ) ; 
 - } else { 
 - throw new IllegalArgumentException ( WRONG _ TYPE _ OF _ CONFIGURATION ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public String [ ] getUserAndServerUrl ( RealmConfiguration config ) { 
 - if ( config instanceof SyncConfiguration ) { 
 - SyncConfiguration syncConfig = ( SyncConfiguration ) config ; 
 - String rosServerUrl = syncConfig . getServerUrl ( ) . toString ( ) ; 
 - String rosUserToken = syncConfig . getUser ( ) . getAccessToken ( ) ; 
 - return new String [ ] { rosServerUrl , rosUserToken } ; 
 - } else { 
 - return new String [ 2 ] ; 
 - } 
 - } 
 - } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncSession . java b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncSession . java 
 index 7a42631 . . 49cbf98 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncSession . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / objectserver / SyncSession . java 
 @ @ - 329 , 17 + 329 , 17 @ @ public final class SyncSession { 
 / * * 
 * Notify session that a commit on the device has happened . 
 * / 
 - void notifyCommit ( long version ) { 
 + public void notifyCommit ( long version ) { 
 if ( isBound ( ) ) { 
 nativeNotifyCommitHappened ( nativeSessionPointer , version ) ; 
 } 
 } 
 
 - SyncPolicy getSyncPolicy ( ) { 
 + public SyncPolicy getSyncPolicy ( ) { 
 return syncPolicy ; 
 } 
 
 - Session getUserSession ( ) { 
 + public Session getUserSession ( ) { 
 return userSession ; 
 } 

