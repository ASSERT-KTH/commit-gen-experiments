BLEU SCORE: 0.06567274736060397

TEST MSG: Helper class for throwing java exception from JNI
GENERATED MSG: Add JNI helper class JavaGlabalRef and JavaClass

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmNullPrimaryKeyTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmNullPrimaryKeyTests . java <nl> index 74e6df8 . . 5ad88f0 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmNullPrimaryKeyTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmNullPrimaryKeyTests . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import io . realm . objectid . NullPrimaryKey ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ RunWith ( Parameterized . class ) <nl> @ @ - 202 , 7 + 203 , 8 @ @ public class RealmNullPrimaryKeyTests { <nl> realm . createObject ( testClazz , null ) ; <nl> fail ( " Null value as primary key already exists . " ) ; <nl> } catch ( RealmPrimaryKeyConstraintException expected ) { <nl> - assertEquals ( " Primary key value already exists : ' null ' . " , expected . getMessage ( ) ) ; <nl> + assertTrue ( " Exception message is : " + expected . getMessage ( ) , <nl> + expected . getMessage ( ) . contains ( " Primary key value already exists : ' null ' . " ) ) ; <nl> } finally { <nl> realm . cancelTransaction ( ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index df3d0ad . . a7e3847 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 1308 , 7 + 1308 , 8 @ @ public class RealmTests { <nl> } <nl> fail ( " Null value as primary key already exists . " ) ; <nl> } catch ( RealmPrimaryKeyConstraintException expected ) { <nl> - assertEquals ( " Primary key value already exists : ' null ' . " , expected . getMessage ( ) ) ; <nl> + assertTrue ( " Exception message is : " + expected . getMessage ( ) , <nl> + expected . getMessage ( ) . contains ( " Primary key value already exists : ' null ' . " ) ) ; <nl> } finally { <nl> realm . cancelTransaction ( ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsObject . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsObject . cpp <nl> index f6b0406 . . 4c6da84 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsObject . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsObject . cpp <nl> @ @ - 26 , 11 + 26 , 15 @ @ <nl> # include " jni _ util / java _ global _ weak _ ref . hpp " <nl> # include " jni _ util / java _ method . hpp " <nl> # include " jni _ util / java _ class . hpp " <nl> + # include " jni _ util / java _ exception _ thrower . hpp " <nl> <nl> using namespace realm ; <nl> using namespace realm : : jni _ util ; <nl> using namespace realm : : _ impl ; <nl> <nl> + static const char * PK _ CONSTRAINT _ EXCEPTION _ CLASS = " io / realm / exceptions / RealmPrimaryKeyConstraintException " ; <nl> + static const char * PK _ EXCEPTION _ MSG _ FORMAT = " Primary key value already exists : % 1 . " ; <nl> + <nl> / / We need to control the life cycle of Object , weak ref of Java OsObject and the NotificationToken . <nl> / / Wrap all three together , so when the Java object gets GCed , all three of them will be invalidated . <nl> struct ObjectWrapper { <nl> @ @ - 163 , 13 + 167 , 6 @ @ static inline size _ t do _ create _ row ( jlong shared _ realm _ ptr , jlong table _ ptr ) <nl> return table . add _ empty _ row ( ) ; <nl> } <nl> <nl> - template < class T > <nl> - static void throw _ duplicated _ primary _ key _ exception ( JNIEnv * env , T value ) <nl> - { <nl> - static JavaClass dup _ pk _ exception ( env , " io / realm / exceptions / RealmPrimaryKeyConstraintException " ) ; <nl> - env - > ThrowNew ( dup _ pk _ exception , format ( " Primary key value already exists : % 1 . " , value ) . c _ str ( ) ) ; <nl> - } <nl> - <nl> static inline size _ t do _ create _ row _ with _ primary _ key ( JNIEnv * env , jlong shared _ realm _ ptr , jlong table _ ptr , <nl> jlong pk _ column _ ndx , jlong pk _ value , jboolean is _ pk _ null ) <nl> { <nl> @ @ - 181 , 15 + 178 , 14 @ @ static inline size _ t do _ create _ row _ with _ primary _ key ( JNIEnv * env , jlong shared _ re <nl> } <nl> <nl> if ( is _ pk _ null ) { <nl> - if ( table . find _ first _ null ( pk _ column _ ndx ) ! = realm : : npos ) { <nl> - throw _ duplicated _ primary _ key _ exception ( env , " ' null ' " ) ; <nl> - return realm : : npos ; <nl> + if ( table . find _ first _ null ( pk _ column _ ndx ) ! = npos ) { <nl> + THROW _ JAVA _ EXCEPTION ( env , PK _ CONSTRAINT _ EXCEPTION _ CLASS , format ( PK _ EXCEPTION _ MSG _ FORMAT , " ' null ' " ) ) ; <nl> } <nl> } <nl> else { <nl> - if ( table . find _ first _ int ( pk _ column _ ndx , pk _ value ) ! = realm : : npos ) { <nl> - throw _ duplicated _ primary _ key _ exception ( env , reinterpret _ cast < long long > ( pk _ value ) ) ; <nl> - return realm : : npos ; <nl> + if ( table . find _ first _ int ( pk _ column _ ndx , pk _ value ) ! = npos ) { <nl> + THROW _ JAVA _ EXCEPTION ( env , PK _ CONSTRAINT _ EXCEPTION _ CLASS , <nl> + format ( PK _ EXCEPTION _ MSG _ FORMAT , reinterpret _ cast < long long > ( pk _ value ) ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 216 , 15 + 212 , 14 @ @ static inline size _ t do _ create _ row _ with _ primary _ key ( JNIEnv * env , jlong shared _ re <nl> } <nl> <nl> if ( pk _ value ) { <nl> - if ( table . find _ first _ string ( pk _ column _ ndx , str _ accessor ) ! = realm : : npos ) { <nl> - throw _ duplicated _ primary _ key _ exception ( env , str _ accessor . operator std : : string ( ) ) ; <nl> - return realm : : npos ; <nl> + if ( table . find _ first _ string ( pk _ column _ ndx , str _ accessor ) ! = npos ) { <nl> + THROW _ JAVA _ EXCEPTION ( env , PK _ CONSTRAINT _ EXCEPTION _ CLASS , <nl> + format ( PK _ EXCEPTION _ MSG _ FORMAT , str _ accessor . operator std : : string ( ) ) ) ; <nl> } <nl> } <nl> else { <nl> - if ( table . find _ first _ null ( pk _ column _ ndx ) ! = realm : : npos ) { <nl> - throw _ duplicated _ primary _ key _ exception ( env , " ' null ' " ) ; <nl> - return realm : : npos ; <nl> + if ( table . find _ first _ null ( pk _ column _ ndx ) ! = npos ) { <nl> + THROW _ JAVA _ EXCEPTION ( env , PK _ CONSTRAINT _ EXCEPTION _ CLASS , format ( PK _ EXCEPTION _ MSG _ FORMAT , " ' null ' " ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp <nl> index eaf526e . . 6d5d89d 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp <nl> @ @ - 31 , 6 + 31 , 13 @ @ JavaClass : : JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload ) <nl> } <nl> } <nl> <nl> + JavaClass : : JavaClass ( JavaClass & & rhs ) <nl> + : m _ ref _ owner ( std : : move ( rhs . m _ ref _ owner ) ) <nl> + , m _ class ( rhs . m _ class ) <nl> + { <nl> + rhs . m _ class = nullptr ; <nl> + } <nl> + <nl> JavaGlobalRef JavaClass : : get _ jclass ( JNIEnv * env , const char * class _ name ) <nl> { <nl> jclass cls = env - > FindClass ( class _ name ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp <nl> index c95dce2 . . 7aaf3a0 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp <nl> @ @ - 35 , 6 + 35 , 8 @ @ public : <nl> { <nl> } <nl> <nl> + JavaClass ( JavaClass & & ) ; <nl> + <nl> inline jclass get ( ) noexcept <nl> { <nl> return m _ class ; <nl> @ @ - 46 , 7 + 48 , 6 @ @ public : <nl> } <nl> <nl> / / Not implemented for now . <nl> - JavaClass ( JavaClass & & ) = delete ; <nl> JavaClass ( JavaClass & ) = delete ; <nl> JavaClass & operator = ( JavaClass & & ) = delete ; <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . cpp <nl> new file mode 100644 <nl> index 0000000 . . 63cd8a9 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . cpp <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # include " java _ exception _ thrower . hpp " <nl> + # include " log . hpp " <nl> + <nl> + # include < util / format . hpp > <nl> + <nl> + using namespace realm : : util ; <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + JavaExceptionThrower : : JavaExceptionThrower ( JNIEnv * env , const char * class _ name , std : : string message , <nl> + const char * file _ path , int line _ num ) <nl> + : std : : runtime _ error ( std : : move ( message ) ) <nl> + , m _ exception _ class ( env , class _ name , false ) <nl> + , m _ file _ path ( file _ path ) <nl> + , m _ line _ num ( line _ num ) <nl> + { <nl> + } <nl> + <nl> + void JavaExceptionThrower : : throw _ java _ exception ( JNIEnv * env ) <nl> + { <nl> + std : : string message = format ( " % 1 \ n ( % 2 : % 3 ) " , what ( ) , m _ file _ path , m _ line _ num ) ; <nl> + Log : : w ( message . c _ str ( ) ) ; <nl> + env - > ThrowNew ( m _ exception _ class , message . c _ str ( ) ) ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . hpp <nl> new file mode 100644 <nl> index 0000000 . . 1d5bcdd <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . hpp <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # ifndef REALM _ JNI _ UTIL _ JAVA _ EXCEPTION _ THROWER _ HPP <nl> + # define REALM _ JNI _ UTIL _ JAVA _ EXCEPTION _ THROWER _ HPP <nl> + <nl> + # include < jni . h > <nl> + <nl> + # include < stdexcept > <nl> + <nl> + # include " java _ class . hpp " <nl> + <nl> + namespace realm { <nl> + namespace jni _ util { <nl> + <nl> + # define THROW _ JAVA _ EXCEPTION ( env , class _ name , message ) \ <nl> + throw realm : : jni _ util : : JavaExceptionThrower ( env , class _ name , message , _ _ FILE _ _ , _ _ LINE _ _ ) <nl> + <nl> + / / Class to help throw a Java exception from JNI code . <nl> + / / This exception will be called from CATCH _ STD and throw a Java exception there . <nl> + class JavaExceptionThrower : public std : : runtime _ error { <nl> + public : <nl> + JavaExceptionThrower ( JNIEnv * env , const char * class _ name , std : : string message , const char * file _ path , <nl> + int line _ num ) ; <nl> + <nl> + virtual void throw _ java _ exception ( JNIEnv * env ) ; <nl> + <nl> + private : <nl> + JavaClass m _ exception _ class ; <nl> + const char * m _ file _ path ; <nl> + int m _ line _ num ; <nl> + } ; <nl> + <nl> + } / / namespace realm <nl> + } / / namesapce jni _ util <nl> + <nl> + # endif / / REALM _ JNI _ UTIL _ JAVA _ EXCEPTION _ THROWER _ HPP <nl> diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp <nl> index e562c12 . . 41ab64d 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / util . cpp <nl> @ @ - 28 , 6 + 28 , 8 @ @ <nl> # include " shared _ realm . hpp " <nl> # include " results . hpp " <nl> <nl> + # include " jni _ util / java _ exception _ thrower . hpp " <nl> + <nl> using namespace std ; <nl> using namespace realm ; <nl> using namespace realm : : util ; <nl> @ @ - 52 , 6 + 54 , 9 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) <nl> try { <nl> throw ; <nl> } <nl> + catch ( JavaExceptionThrower & e ) { <nl> + e . throw _ java _ exception ( env ) ; <nl> + } <nl> catch ( bad _ alloc & e ) { <nl> ss < < e . what ( ) < < " in " < < file < < " line " < < line ; <nl> ThrowException ( env , OutOfMemory , ss . str ( ) ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> index 531611f . . 1c5fcc2 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> @ @ - 28 , 6 + 28 , 7 @ @ <nl> # include " util . hpp " <nl> <nl> # include " jni _ util / java _ method . hpp " <nl> + # include " jni _ util / java _ class . hpp " <nl> <nl> using namespace realm ; <nl> using namespace realm : : _ impl ; <nl> @ @ - 74 , 11 + 75 , 12 @ @ public : <nl> : m _ config ( std : : move ( config ) ) <nl> { <nl> # if REALM _ ENABLE _ SYNC <nl> + static JavaClass sync _ manager _ class ( env , " io / realm / SyncManager " ) ; <nl> / / Doing the methods lookup from the thread that loaded the lib , to avoid <nl> / / https : / / developer . android . com / training / articles / perf - jni . html # faq _ FindClass <nl> - static JavaMethod java _ error _ callback _ method ( env , java _ syncmanager , " notifyErrorHandler " , <nl> + static JavaMethod java _ error _ callback _ method ( env , sync _ manager _ class , " notifyErrorHandler " , <nl> " ( ILjava / lang / String ; Ljava / lang / String ; ) V " , true ) ; <nl> - static JavaMethod java _ bind _ session _ method ( env , java _ syncmanager , " bindSessionWithConfig " , <nl> + static JavaMethod java _ bind _ session _ method ( env , sync _ manager _ class , " bindSessionWithConfig " , <nl> " ( Ljava / lang / String ; ) Ljava / lang / String ; " , true ) ; <nl> <nl> / / error handler will be called form the sync client thread <nl> @ @ - 96 , 7 + 98 , 7 @ @ public : <nl> } <nl> <nl> JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; <nl> - env - > CallStaticVoidMethod ( java _ syncmanager , java _ error _ callback _ method , error _ code , <nl> + env - > CallStaticVoidMethod ( sync _ manager _ class , java _ error _ callback _ method , error _ code , <nl> to _ jstring ( env , error _ message ) , to _ jstring ( env , session . get ( ) - > path ( ) ) ) ; <nl> } ; <nl> <nl> @ @ - 110 , 7 + 112 , 7 @ @ public : <nl> JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; <nl> <nl> jstring access _ token _ string = ( jstring ) env - > CallStaticObjectMethod ( <nl> - java _ syncmanager , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; <nl> + sync _ manager _ class , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; <nl> if ( access _ token _ string ) { <nl> / / reusing cached valid token <nl> JStringAccessor access _ token ( env , access _ token _ string ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> index 070de20 . . 48e47cf 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> @ @ - 53 , 9 + 53 , 6 @ @ JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * ) <nl> java _ lang _ double _ init = env - > GetMethodID ( java _ lang _ double , " < init > " , " ( D ) V " ) ; <nl> java _ util _ date = GetClass ( env , " java / util / Date " ) ; <nl> java _ util _ date _ init = env - > GetMethodID ( java _ util _ date , " < init > " , " ( J ) V " ) ; <nl> - # if REALM _ ENABLE _ SYNC <nl> - java _ syncmanager = GetClass ( env , " io / realm / SyncManager " ) ; <nl> - # endif <nl> } <nl> <nl> return JNI _ VERSION _ 1 _ 6 ; <nl> @ @ - 73 , 9 + 70 , 7 @ @ JNIEXPORT void JNI _ OnUnload ( JavaVM * vm , void * ) <nl> env - > DeleteGlobalRef ( java _ lang _ double ) ; <nl> env - > DeleteGlobalRef ( java _ util _ date ) ; <nl> env - > DeleteGlobalRef ( java _ lang _ string ) ; <nl> - # if REALM _ ENABLE _ SYNC <nl> - env - > DeleteGlobalRef ( java _ syncmanager ) ; <nl> - # endif <nl> + JniUtils : : release ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp <nl> new file mode 100644 <nl> index 0000000 . . f0bb753 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # include " java _ class . hpp " <nl> + # include " jni _ utils . hpp " <nl> + <nl> + # include < realm / util / assert . hpp > <nl> + <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + JavaClass : : JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload ) <nl> + : m _ ref _ owner ( get _ jclass ( env , class _ name ) ) <nl> + , m _ class ( reinterpret _ cast < jclass > ( m _ ref _ owner . get ( ) ) ) <nl> + { <nl> + if ( free _ on _ unload ) { <nl> + / / Move the ownership of global ref to JNIUtils which will be released when JNI _ OnUnload . <nl> + JniUtils : : keep _ global _ ref ( m _ ref _ owner ) ; <nl> + } <nl> + } <nl> + <nl> + JavaGlobalRef JavaClass : : get _ jclass ( JNIEnv * env , const char * class _ name ) <nl> + { <nl> + jclass cls = env - > FindClass ( class _ name ) ; <nl> + REALM _ ASSERT _ DEBUG ( cls ) ; <nl> + <nl> + JavaGlobalRef cls _ ref ( env , cls ) ; <nl> + env - > DeleteLocalRef ( cls ) ; <nl> + return cls _ ref ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp <nl> new file mode 100644 <nl> index 0000000 . . c95dce2 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # ifndef REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP <nl> + # define REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP <nl> + <nl> + # include < jni . h > <nl> + <nl> + # include " java _ global _ ref . hpp " <nl> + <nl> + namespace realm { <nl> + namespace jni _ util { <nl> + <nl> + / / To find the jclass and manage the lifecycle for the jclass ' s global ref . <nl> + class JavaClass { <nl> + public : <nl> + / / when free _ on _ unload is true , the jclass ' s global ref will be released when JNI _ OnUnload called . This is useful <nl> + / / when the JavaClass instance is static . Otherwise the jclass ' s global ref will be released when this object is <nl> + / / deleted . <nl> + JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload = true ) ; <nl> + ~ JavaClass ( ) <nl> + { <nl> + } <nl> + <nl> + inline jclass get ( ) noexcept <nl> + { <nl> + return m _ class ; <nl> + } <nl> + <nl> + inline operator jclass ( ) const noexcept <nl> + { <nl> + return m _ class ; <nl> + } <nl> + <nl> + / / Not implemented for now . <nl> + JavaClass ( JavaClass & & ) = delete ; <nl> + JavaClass ( JavaClass & ) = delete ; <nl> + JavaClass & operator = ( JavaClass & & ) = delete ; <nl> + <nl> + private : <nl> + JavaGlobalRef m _ ref _ owner ; <nl> + jclass m _ class ; <nl> + static JavaGlobalRef get _ jclass ( JNIEnv * env , const char * class _ name ) ; <nl> + } ; <nl> + <nl> + } / / jni _ util <nl> + } / / realm <nl> + <nl> + # endif <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp <nl> new file mode 100644 <nl> index 0000000 . . fd6036c <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # include " java _ global _ ref . hpp " <nl> + # include " jni _ utils . hpp " <nl> + <nl> + # include < memory > <nl> + <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + JavaGlobalRef : : ~ JavaGlobalRef ( ) <nl> + { <nl> + if ( m _ ref ) { <nl> + JniUtils : : get _ env ( ) - > DeleteGlobalRef ( m _ ref ) ; <nl> + } <nl> + } <nl> + <nl> + JavaGlobalRef & JavaGlobalRef : : operator = ( JavaGlobalRef & & rhs ) <nl> + { <nl> + this - > ~ JavaGlobalRef ( ) ; <nl> + new ( this ) JavaGlobalRef ( std : : move ( rhs ) ) ; <nl> + return * this ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp <nl> new file mode 100644 <nl> index 0000000 . . a08aad4 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp <nl> @ @ - 0 , 0 + 1 , 64 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # ifndef REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP <nl> + # define REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP <nl> + <nl> + # include < jni . h > <nl> + <nl> + namespace realm { <nl> + namespace jni _ util { <nl> + <nl> + / / Manage the lifecycle of jobject ' s global ref . <nl> + class JavaGlobalRef { <nl> + public : <nl> + JavaGlobalRef ( ) <nl> + : m _ ref ( nullptr ) <nl> + { <nl> + } <nl> + JavaGlobalRef ( JNIEnv * env , jobject obj ) <nl> + : m _ ref ( obj ? env - > NewGlobalRef ( obj ) : nullptr ) <nl> + { <nl> + } <nl> + JavaGlobalRef ( JavaGlobalRef & & rhs ) <nl> + : m _ ref ( rhs . m _ ref ) <nl> + { <nl> + rhs . m _ ref = nullptr ; <nl> + } <nl> + ~ JavaGlobalRef ( ) ; <nl> + <nl> + JavaGlobalRef & operator = ( JavaGlobalRef & & rhs ) ; <nl> + <nl> + inline operator bool ( ) const noexcept <nl> + { <nl> + return m _ ref ! = nullptr ; <nl> + } <nl> + <nl> + inline jobject get ( ) noexcept <nl> + { <nl> + return m _ ref ; <nl> + } <nl> + <nl> + / / Not implemented for now . <nl> + JavaGlobalRef ( JavaGlobalRef & ) = delete ; <nl> + <nl> + private : <nl> + jobject m _ ref ; <nl> + } ; <nl> + } <nl> + } <nl> + <nl> + # endif / / REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp <nl> index 88a23eb . . 0ca6f52 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp <nl> @ @ - 31 , 6 + 31 , 12 @ @ void JniUtils : : initialize ( JavaVM * vm , jint vm _ version ) noexcept <nl> s _ instance = std : : unique _ ptr < JniUtils > ( new JniUtils ( vm , vm _ version ) ) ; <nl> } <nl> <nl> + void JniUtils : : release ( ) <nl> + { <nl> + REALM _ ASSERT _ DEBUG ( s _ instance ) ; <nl> + s _ instance . release ( ) ; <nl> + } <nl> + <nl> JNIEnv * JniUtils : : get _ env ( bool attach _ if _ needed ) <nl> { <nl> REALM _ ASSERT _ DEBUG ( s _ instance ) ; <nl> @ @ - 53 , 3 + 59 , 9 @ @ void JniUtils : : detach _ current _ thread ( ) <nl> { <nl> s _ instance - > m _ vm - > DetachCurrentThread ( ) ; <nl> } <nl> + <nl> + void JniUtils : : keep _ global _ ref ( JavaGlobalRef & ref ) <nl> + { <nl> + s _ instance - > m _ global _ refs . push _ back ( std : : move ( ref ) ) ; <nl> + } <nl> + <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp <nl> index 7d2bcf4 . . 689aa12 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp <nl> @ @ - 19 , 6 + 19 , 10 @ @ <nl> <nl> # include < jni . h > <nl> <nl> + # include < vector > <nl> + <nl> + # include " java _ global _ ref . hpp " <nl> + <nl> namespace realm { <nl> namespace jni _ util { <nl> <nl> @ @ - 31 , 12 + 35 , 16 @ @ public : <nl> <nl> / / Call this only once in JNI _ OnLoad . <nl> static void initialize ( JavaVM * vm , jint vm _ version ) noexcept ; <nl> + / / Call this in JNI _ OnUnload . <nl> + static void release ( ) ; <nl> / / When attach _ if _ needed is false , returns the JNIEnv if there is one attached to this thread . Assert if there is <nl> / / none . When attach _ if _ needed is true , try to attach and return a JNIEnv if necessary . <nl> static JNIEnv * get _ env ( bool attach _ if _ needed = false ) ; <nl> / / Detach the current thread from the JVM . Only required for C + + threads that where attached in the first place . <nl> / / Failing to do so is a resource leak . <nl> static void detach _ current _ thread ( ) ; <nl> + / / Keep the given global reference until JNI _ OnUnload is called . <nl> + static void keep _ global _ ref ( JavaGlobalRef & ref ) ; <nl> <nl> private : <nl> JniUtils ( JavaVM * vm , jint vm _ version ) noexcept <nl> @ @ - 47 , 6 + 55 , 7 @ @ private : <nl> <nl> JavaVM * m _ vm ; <nl> jint m _ vm _ version ; <nl> + std : : vector < JavaGlobalRef > m _ global _ refs ; <nl> } ; <nl> <nl> } / / namespace realm

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmNullPrimaryKeyTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmNullPrimaryKeyTests . java 
 index 74e6df8 . . 5ad88f0 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmNullPrimaryKeyTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmNullPrimaryKeyTests . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import io . realm . objectid . NullPrimaryKey ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ RunWith ( Parameterized . class ) 
 @ @ - 202 , 7 + 203 , 8 @ @ public class RealmNullPrimaryKeyTests { 
 realm . createObject ( testClazz , null ) ; 
 fail ( " Null value as primary key already exists . " ) ; 
 } catch ( RealmPrimaryKeyConstraintException expected ) { 
 - assertEquals ( " Primary key value already exists : ' null ' . " , expected . getMessage ( ) ) ; 
 + assertTrue ( " Exception message is : " + expected . getMessage ( ) , 
 + expected . getMessage ( ) . contains ( " Primary key value already exists : ' null ' . " ) ) ; 
 } finally { 
 realm . cancelTransaction ( ) ; 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index df3d0ad . . a7e3847 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 1308 , 7 + 1308 , 8 @ @ public class RealmTests { 
 } 
 fail ( " Null value as primary key already exists . " ) ; 
 } catch ( RealmPrimaryKeyConstraintException expected ) { 
 - assertEquals ( " Primary key value already exists : ' null ' . " , expected . getMessage ( ) ) ; 
 + assertTrue ( " Exception message is : " + expected . getMessage ( ) , 
 + expected . getMessage ( ) . contains ( " Primary key value already exists : ' null ' . " ) ) ; 
 } finally { 
 realm . cancelTransaction ( ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsObject . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsObject . cpp 
 index f6b0406 . . 4c6da84 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsObject . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ OsObject . cpp 
 @ @ - 26 , 11 + 26 , 15 @ @ 
 # include " jni _ util / java _ global _ weak _ ref . hpp " 
 # include " jni _ util / java _ method . hpp " 
 # include " jni _ util / java _ class . hpp " 
 + # include " jni _ util / java _ exception _ thrower . hpp " 
 
 using namespace realm ; 
 using namespace realm : : jni _ util ; 
 using namespace realm : : _ impl ; 
 
 + static const char * PK _ CONSTRAINT _ EXCEPTION _ CLASS = " io / realm / exceptions / RealmPrimaryKeyConstraintException " ; 
 + static const char * PK _ EXCEPTION _ MSG _ FORMAT = " Primary key value already exists : % 1 . " ; 
 + 
 / / We need to control the life cycle of Object , weak ref of Java OsObject and the NotificationToken . 
 / / Wrap all three together , so when the Java object gets GCed , all three of them will be invalidated . 
 struct ObjectWrapper { 
 @ @ - 163 , 13 + 167 , 6 @ @ static inline size _ t do _ create _ row ( jlong shared _ realm _ ptr , jlong table _ ptr ) 
 return table . add _ empty _ row ( ) ; 
 } 
 
 - template < class T > 
 - static void throw _ duplicated _ primary _ key _ exception ( JNIEnv * env , T value ) 
 - { 
 - static JavaClass dup _ pk _ exception ( env , " io / realm / exceptions / RealmPrimaryKeyConstraintException " ) ; 
 - env - > ThrowNew ( dup _ pk _ exception , format ( " Primary key value already exists : % 1 . " , value ) . c _ str ( ) ) ; 
 - } 
 - 
 static inline size _ t do _ create _ row _ with _ primary _ key ( JNIEnv * env , jlong shared _ realm _ ptr , jlong table _ ptr , 
 jlong pk _ column _ ndx , jlong pk _ value , jboolean is _ pk _ null ) 
 { 
 @ @ - 181 , 15 + 178 , 14 @ @ static inline size _ t do _ create _ row _ with _ primary _ key ( JNIEnv * env , jlong shared _ re 
 } 
 
 if ( is _ pk _ null ) { 
 - if ( table . find _ first _ null ( pk _ column _ ndx ) ! = realm : : npos ) { 
 - throw _ duplicated _ primary _ key _ exception ( env , " ' null ' " ) ; 
 - return realm : : npos ; 
 + if ( table . find _ first _ null ( pk _ column _ ndx ) ! = npos ) { 
 + THROW _ JAVA _ EXCEPTION ( env , PK _ CONSTRAINT _ EXCEPTION _ CLASS , format ( PK _ EXCEPTION _ MSG _ FORMAT , " ' null ' " ) ) ; 
 } 
 } 
 else { 
 - if ( table . find _ first _ int ( pk _ column _ ndx , pk _ value ) ! = realm : : npos ) { 
 - throw _ duplicated _ primary _ key _ exception ( env , reinterpret _ cast < long long > ( pk _ value ) ) ; 
 - return realm : : npos ; 
 + if ( table . find _ first _ int ( pk _ column _ ndx , pk _ value ) ! = npos ) { 
 + THROW _ JAVA _ EXCEPTION ( env , PK _ CONSTRAINT _ EXCEPTION _ CLASS , 
 + format ( PK _ EXCEPTION _ MSG _ FORMAT , reinterpret _ cast < long long > ( pk _ value ) ) ) ; 
 } 
 } 
 
 @ @ - 216 , 15 + 212 , 14 @ @ static inline size _ t do _ create _ row _ with _ primary _ key ( JNIEnv * env , jlong shared _ re 
 } 
 
 if ( pk _ value ) { 
 - if ( table . find _ first _ string ( pk _ column _ ndx , str _ accessor ) ! = realm : : npos ) { 
 - throw _ duplicated _ primary _ key _ exception ( env , str _ accessor . operator std : : string ( ) ) ; 
 - return realm : : npos ; 
 + if ( table . find _ first _ string ( pk _ column _ ndx , str _ accessor ) ! = npos ) { 
 + THROW _ JAVA _ EXCEPTION ( env , PK _ CONSTRAINT _ EXCEPTION _ CLASS , 
 + format ( PK _ EXCEPTION _ MSG _ FORMAT , str _ accessor . operator std : : string ( ) ) ) ; 
 } 
 } 
 else { 
 - if ( table . find _ first _ null ( pk _ column _ ndx ) ! = realm : : npos ) { 
 - throw _ duplicated _ primary _ key _ exception ( env , " ' null ' " ) ; 
 - return realm : : npos ; 
 + if ( table . find _ first _ null ( pk _ column _ ndx ) ! = npos ) { 
 + THROW _ JAVA _ EXCEPTION ( env , PK _ CONSTRAINT _ EXCEPTION _ CLASS , format ( PK _ EXCEPTION _ MSG _ FORMAT , " ' null ' " ) ) ; 
 } 
 } 
 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp 
 index eaf526e . . 6d5d89d 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp 
 @ @ - 31 , 6 + 31 , 13 @ @ JavaClass : : JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload ) 
 } 
 } 
 
 + JavaClass : : JavaClass ( JavaClass & & rhs ) 
 + : m _ ref _ owner ( std : : move ( rhs . m _ ref _ owner ) ) 
 + , m _ class ( rhs . m _ class ) 
 + { 
 + rhs . m _ class = nullptr ; 
 + } 
 + 
 JavaGlobalRef JavaClass : : get _ jclass ( JNIEnv * env , const char * class _ name ) 
 { 
 jclass cls = env - > FindClass ( class _ name ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp 
 index c95dce2 . . 7aaf3a0 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp 
 @ @ - 35 , 6 + 35 , 8 @ @ public : 
 { 
 } 
 
 + JavaClass ( JavaClass & & ) ; 
 + 
 inline jclass get ( ) noexcept 
 { 
 return m _ class ; 
 @ @ - 46 , 7 + 48 , 6 @ @ public : 
 } 
 
 / / Not implemented for now . 
 - JavaClass ( JavaClass & & ) = delete ; 
 JavaClass ( JavaClass & ) = delete ; 
 JavaClass & operator = ( JavaClass & & ) = delete ; 
 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . cpp 
 new file mode 100644 
 index 0000000 . . 63cd8a9 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . cpp 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # include " java _ exception _ thrower . hpp " 
 + # include " log . hpp " 
 + 
 + # include < util / format . hpp > 
 + 
 + using namespace realm : : util ; 
 + using namespace realm : : jni _ util ; 
 + 
 + JavaExceptionThrower : : JavaExceptionThrower ( JNIEnv * env , const char * class _ name , std : : string message , 
 + const char * file _ path , int line _ num ) 
 + : std : : runtime _ error ( std : : move ( message ) ) 
 + , m _ exception _ class ( env , class _ name , false ) 
 + , m _ file _ path ( file _ path ) 
 + , m _ line _ num ( line _ num ) 
 + { 
 + } 
 + 
 + void JavaExceptionThrower : : throw _ java _ exception ( JNIEnv * env ) 
 + { 
 + std : : string message = format ( " % 1 \ n ( % 2 : % 3 ) " , what ( ) , m _ file _ path , m _ line _ num ) ; 
 + Log : : w ( message . c _ str ( ) ) ; 
 + env - > ThrowNew ( m _ exception _ class , message . c _ str ( ) ) ; 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . hpp 
 new file mode 100644 
 index 0000000 . . 1d5bcdd 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ exception _ thrower . hpp 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # ifndef REALM _ JNI _ UTIL _ JAVA _ EXCEPTION _ THROWER _ HPP 
 + # define REALM _ JNI _ UTIL _ JAVA _ EXCEPTION _ THROWER _ HPP 
 + 
 + # include < jni . h > 
 + 
 + # include < stdexcept > 
 + 
 + # include " java _ class . hpp " 
 + 
 + namespace realm { 
 + namespace jni _ util { 
 + 
 + # define THROW _ JAVA _ EXCEPTION ( env , class _ name , message ) \ 
 + throw realm : : jni _ util : : JavaExceptionThrower ( env , class _ name , message , _ _ FILE _ _ , _ _ LINE _ _ ) 
 + 
 + / / Class to help throw a Java exception from JNI code . 
 + / / This exception will be called from CATCH _ STD and throw a Java exception there . 
 + class JavaExceptionThrower : public std : : runtime _ error { 
 + public : 
 + JavaExceptionThrower ( JNIEnv * env , const char * class _ name , std : : string message , const char * file _ path , 
 + int line _ num ) ; 
 + 
 + virtual void throw _ java _ exception ( JNIEnv * env ) ; 
 + 
 + private : 
 + JavaClass m _ exception _ class ; 
 + const char * m _ file _ path ; 
 + int m _ line _ num ; 
 + } ; 
 + 
 + } / / namespace realm 
 + } / / namesapce jni _ util 
 + 
 + # endif / / REALM _ JNI _ UTIL _ JAVA _ EXCEPTION _ THROWER _ HPP 
 diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp 
 index e562c12 . . 41ab64d 100644 
 - - - a / realm / realm - library / src / main / cpp / util . cpp 
 + + + b / realm / realm - library / src / main / cpp / util . cpp 
 @ @ - 28 , 6 + 28 , 8 @ @ 
 # include " shared _ realm . hpp " 
 # include " results . hpp " 
 
 + # include " jni _ util / java _ exception _ thrower . hpp " 
 + 
 using namespace std ; 
 using namespace realm ; 
 using namespace realm : : util ; 
 @ @ - 52 , 6 + 54 , 9 @ @ void ConvertException ( JNIEnv * env , const char * file , int line ) 
 try { 
 throw ; 
 } 
 + catch ( JavaExceptionThrower & e ) { 
 + e . throw _ java _ exception ( env ) ; 
 + } 
 catch ( bad _ alloc & e ) { 
 ss < < e . what ( ) < < " in " < < file < < " line " < < line ; 
 ThrowException ( env , OutOfMemory , ss . str ( ) ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 index 531611f . . 1c5fcc2 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 @ @ - 28 , 6 + 28 , 7 @ @ 
 # include " util . hpp " 
 
 # include " jni _ util / java _ method . hpp " 
 + # include " jni _ util / java _ class . hpp " 
 
 using namespace realm ; 
 using namespace realm : : _ impl ; 
 @ @ - 74 , 11 + 75 , 12 @ @ public : 
 : m _ config ( std : : move ( config ) ) 
 { 
 # if REALM _ ENABLE _ SYNC 
 + static JavaClass sync _ manager _ class ( env , " io / realm / SyncManager " ) ; 
 / / Doing the methods lookup from the thread that loaded the lib , to avoid 
 / / https : / / developer . android . com / training / articles / perf - jni . html # faq _ FindClass 
 - static JavaMethod java _ error _ callback _ method ( env , java _ syncmanager , " notifyErrorHandler " , 
 + static JavaMethod java _ error _ callback _ method ( env , sync _ manager _ class , " notifyErrorHandler " , 
 " ( ILjava / lang / String ; Ljava / lang / String ; ) V " , true ) ; 
 - static JavaMethod java _ bind _ session _ method ( env , java _ syncmanager , " bindSessionWithConfig " , 
 + static JavaMethod java _ bind _ session _ method ( env , sync _ manager _ class , " bindSessionWithConfig " , 
 " ( Ljava / lang / String ; ) Ljava / lang / String ; " , true ) ; 
 
 / / error handler will be called form the sync client thread 
 @ @ - 96 , 7 + 98 , 7 @ @ public : 
 } 
 
 JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; 
 - env - > CallStaticVoidMethod ( java _ syncmanager , java _ error _ callback _ method , error _ code , 
 + env - > CallStaticVoidMethod ( sync _ manager _ class , java _ error _ callback _ method , error _ code , 
 to _ jstring ( env , error _ message ) , to _ jstring ( env , session . get ( ) - > path ( ) ) ) ; 
 } ; 
 
 @ @ - 110 , 7 + 112 , 7 @ @ public : 
 JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; 
 
 jstring access _ token _ string = ( jstring ) env - > CallStaticObjectMethod ( 
 - java _ syncmanager , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; 
 + sync _ manager _ class , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; 
 if ( access _ token _ string ) { 
 / / reusing cached valid token 
 JStringAccessor access _ token ( env , access _ token _ string ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 index 070de20 . . 48e47cf 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 @ @ - 53 , 9 + 53 , 6 @ @ JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * ) 
 java _ lang _ double _ init = env - > GetMethodID ( java _ lang _ double , " < init > " , " ( D ) V " ) ; 
 java _ util _ date = GetClass ( env , " java / util / Date " ) ; 
 java _ util _ date _ init = env - > GetMethodID ( java _ util _ date , " < init > " , " ( J ) V " ) ; 
 - # if REALM _ ENABLE _ SYNC 
 - java _ syncmanager = GetClass ( env , " io / realm / SyncManager " ) ; 
 - # endif 
 } 
 
 return JNI _ VERSION _ 1 _ 6 ; 
 @ @ - 73 , 9 + 70 , 7 @ @ JNIEXPORT void JNI _ OnUnload ( JavaVM * vm , void * ) 
 env - > DeleteGlobalRef ( java _ lang _ double ) ; 
 env - > DeleteGlobalRef ( java _ util _ date ) ; 
 env - > DeleteGlobalRef ( java _ lang _ string ) ; 
 - # if REALM _ ENABLE _ SYNC 
 - env - > DeleteGlobalRef ( java _ syncmanager ) ; 
 - # endif 
 + JniUtils : : release ( ) ; 
 } 
 } 
 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp 
 new file mode 100644 
 index 0000000 . . f0bb753 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # include " java _ class . hpp " 
 + # include " jni _ utils . hpp " 
 + 
 + # include < realm / util / assert . hpp > 
 + 
 + using namespace realm : : jni _ util ; 
 + 
 + JavaClass : : JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload ) 
 + : m _ ref _ owner ( get _ jclass ( env , class _ name ) ) 
 + , m _ class ( reinterpret _ cast < jclass > ( m _ ref _ owner . get ( ) ) ) 
 + { 
 + if ( free _ on _ unload ) { 
 + / / Move the ownership of global ref to JNIUtils which will be released when JNI _ OnUnload . 
 + JniUtils : : keep _ global _ ref ( m _ ref _ owner ) ; 
 + } 
 + } 
 + 
 + JavaGlobalRef JavaClass : : get _ jclass ( JNIEnv * env , const char * class _ name ) 
 + { 
 + jclass cls = env - > FindClass ( class _ name ) ; 
 + REALM _ ASSERT _ DEBUG ( cls ) ; 
 + 
 + JavaGlobalRef cls _ ref ( env , cls ) ; 
 + env - > DeleteLocalRef ( cls ) ; 
 + return cls _ ref ; 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp 
 new file mode 100644 
 index 0000000 . . c95dce2 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # ifndef REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP 
 + # define REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP 
 + 
 + # include < jni . h > 
 + 
 + # include " java _ global _ ref . hpp " 
 + 
 + namespace realm { 
 + namespace jni _ util { 
 + 
 + / / To find the jclass and manage the lifecycle for the jclass ' s global ref . 
 + class JavaClass { 
 + public : 
 + / / when free _ on _ unload is true , the jclass ' s global ref will be released when JNI _ OnUnload called . This is useful 
 + / / when the JavaClass instance is static . Otherwise the jclass ' s global ref will be released when this object is 
 + / / deleted . 
 + JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload = true ) ; 
 + ~ JavaClass ( ) 
 + { 
 + } 
 + 
 + inline jclass get ( ) noexcept 
 + { 
 + return m _ class ; 
 + } 
 + 
 + inline operator jclass ( ) const noexcept 
 + { 
 + return m _ class ; 
 + } 
 + 
 + / / Not implemented for now . 
 + JavaClass ( JavaClass & & ) = delete ; 
 + JavaClass ( JavaClass & ) = delete ; 
 + JavaClass & operator = ( JavaClass & & ) = delete ; 
 + 
 + private : 
 + JavaGlobalRef m _ ref _ owner ; 
 + jclass m _ class ; 
 + static JavaGlobalRef get _ jclass ( JNIEnv * env , const char * class _ name ) ; 
 + } ; 
 + 
 + } / / jni _ util 
 + } / / realm 
 + 
 + # endif 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp 
 new file mode 100644 
 index 0000000 . . fd6036c 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # include " java _ global _ ref . hpp " 
 + # include " jni _ utils . hpp " 
 + 
 + # include < memory > 
 + 
 + using namespace realm : : jni _ util ; 
 + 
 + JavaGlobalRef : : ~ JavaGlobalRef ( ) 
 + { 
 + if ( m _ ref ) { 
 + JniUtils : : get _ env ( ) - > DeleteGlobalRef ( m _ ref ) ; 
 + } 
 + } 
 + 
 + JavaGlobalRef & JavaGlobalRef : : operator = ( JavaGlobalRef & & rhs ) 
 + { 
 + this - > ~ JavaGlobalRef ( ) ; 
 + new ( this ) JavaGlobalRef ( std : : move ( rhs ) ) ; 
 + return * this ; 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp 
 new file mode 100644 
 index 0000000 . . a08aad4 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp 
 @ @ - 0 , 0 + 1 , 64 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # ifndef REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP 
 + # define REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP 
 + 
 + # include < jni . h > 
 + 
 + namespace realm { 
 + namespace jni _ util { 
 + 
 + / / Manage the lifecycle of jobject ' s global ref . 
 + class JavaGlobalRef { 
 + public : 
 + JavaGlobalRef ( ) 
 + : m _ ref ( nullptr ) 
 + { 
 + } 
 + JavaGlobalRef ( JNIEnv * env , jobject obj ) 
 + : m _ ref ( obj ? env - > NewGlobalRef ( obj ) : nullptr ) 
 + { 
 + } 
 + JavaGlobalRef ( JavaGlobalRef & & rhs ) 
 + : m _ ref ( rhs . m _ ref ) 
 + { 
 + rhs . m _ ref = nullptr ; 
 + } 
 + ~ JavaGlobalRef ( ) ; 
 + 
 + JavaGlobalRef & operator = ( JavaGlobalRef & & rhs ) ; 
 + 
 + inline operator bool ( ) const noexcept 
 + { 
 + return m _ ref ! = nullptr ; 
 + } 
 + 
 + inline jobject get ( ) noexcept 
 + { 
 + return m _ ref ; 
 + } 
 + 
 + / / Not implemented for now . 
 + JavaGlobalRef ( JavaGlobalRef & ) = delete ; 
 + 
 + private : 
 + jobject m _ ref ; 
 + } ; 
 + } 
 + } 
 + 
 + # endif / / REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp 
 index 88a23eb . . 0ca6f52 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp 
 @ @ - 31 , 6 + 31 , 12 @ @ void JniUtils : : initialize ( JavaVM * vm , jint vm _ version ) noexcept 
 s _ instance = std : : unique _ ptr < JniUtils > ( new JniUtils ( vm , vm _ version ) ) ; 
 } 
 
 + void JniUtils : : release ( ) 
 + { 
 + REALM _ ASSERT _ DEBUG ( s _ instance ) ; 
 + s _ instance . release ( ) ; 
 + } 
 + 
 JNIEnv * JniUtils : : get _ env ( bool attach _ if _ needed ) 
 { 
 REALM _ ASSERT _ DEBUG ( s _ instance ) ; 
 @ @ - 53 , 3 + 59 , 9 @ @ void JniUtils : : detach _ current _ thread ( ) 
 { 
 s _ instance - > m _ vm - > DetachCurrentThread ( ) ; 
 } 
 + 
 + void JniUtils : : keep _ global _ ref ( JavaGlobalRef & ref ) 
 + { 
 + s _ instance - > m _ global _ refs . push _ back ( std : : move ( ref ) ) ; 
 + } 
 + 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp 
 index 7d2bcf4 . . 689aa12 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp 
 @ @ - 19 , 6 + 19 , 10 @ @ 
 
 # include < jni . h > 
 
 + # include < vector > 
 + 
 + # include " java _ global _ ref . hpp " 
 + 
 namespace realm { 
 namespace jni _ util { 
 
 @ @ - 31 , 12 + 35 , 16 @ @ public : 
 
 / / Call this only once in JNI _ OnLoad . 
 static void initialize ( JavaVM * vm , jint vm _ version ) noexcept ; 
 + / / Call this in JNI _ OnUnload . 
 + static void release ( ) ; 
 / / When attach _ if _ needed is false , returns the JNIEnv if there is one attached to this thread . Assert if there is 
 / / none . When attach _ if _ needed is true , try to attach and return a JNIEnv if necessary . 
 static JNIEnv * get _ env ( bool attach _ if _ needed = false ) ; 
 / / Detach the current thread from the JVM . Only required for C + + threads that where attached in the first place . 
 / / Failing to do so is a resource leak . 
 static void detach _ current _ thread ( ) ; 
 + / / Keep the given global reference until JNI _ OnUnload is called . 
 + static void keep _ global _ ref ( JavaGlobalRef & ref ) ; 
 
 private : 
 JniUtils ( JavaVM * vm , jint vm _ version ) noexcept 
 @ @ - 47 , 6 + 55 , 7 @ @ private : 
 
 JavaVM * m _ vm ; 
 jint m _ vm _ version ; 
 + std : : vector < JavaGlobalRef > m _ global _ refs ; 
 } ; 
 
 } / / namespace realm
