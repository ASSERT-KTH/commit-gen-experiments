BLEU SCORE: 0.03283637368030199

TEST MSG: Expose the per - user private role
GENERATED MSG: Enabling client reset test

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 107656b . . 31f208c 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 10 , 7 + 10 , 8 @ @ <nl> <nl> # # # Enhancements <nl> <nl> - * [ ObjectServer ] ` SyncConfiguration . automatic ( ) ` will make use of the host port to work out the default Realm URL . <nl> + * [ ObjectServer ] ` SyncConfiguration . automatic ( ) ` will make use of the host port to work out the default Realm URL . <nl> + * [ ObjectServer ] A role is now automatically created for each user with that user as its only member . This simplifies the common use case of restricting access to specific objects to a single user . This role can be accessed at ` PermissionUser . getRole ( ) ` . <nl> <nl> # # # Bug Fixes <nl> <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / ObjectLevelPermissionsTest . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / ObjectLevelPermissionsTest . java <nl> index 111733a . . 045f290 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / ObjectLevelPermissionsTest . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / ObjectLevelPermissionsTest . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import io . realm . sync . permissions . ClassPermissions ; <nl> import io . realm . sync . permissions . ClassPrivileges ; <nl> import io . realm . sync . permissions . ObjectPrivileges ; <nl> import io . realm . sync . permissions . Permission ; <nl> + import io . realm . sync . permissions . PermissionUser ; <nl> import io . realm . sync . permissions . RealmPermissions ; <nl> import io . realm . sync . permissions . RealmPrivileges ; <nl> import io . realm . sync . permissions . Role ; <nl> @ @ - 39 , 6 + 40 , 8 @ @ import io . realm . sync . permissions . Role ; <nl> import static io . realm . util . SyncTestUtils . createTestUser ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 431 , 6 + 434 , 33 @ @ public class ObjectLevelPermissionsTest { <nl> } <nl> <nl> @ Test <nl> + public void userPrivateRole ( ) { <nl> + RealmResults < PermissionUser > permissionUsers = realm . where ( PermissionUser . class ) . findAll ( ) ; <nl> + assertEquals ( 1 , permissionUsers . size ( ) ) ; <nl> + <nl> + PermissionUser permissionUser = permissionUsers . get ( 0 ) ; <nl> + assertNotNull ( permissionUser ) ; <nl> + Role role = permissionUser . getPrivateRole ( ) ; <nl> + assertNotNull ( role ) ; <nl> + <nl> + assertEquals ( " _ _ User : " + user . getIdentity ( ) , role . getName ( ) ) ; <nl> + assertTrue ( role . hasMember ( user . getIdentity ( ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void userPrivateRoleNotAvailableBeforeSyncClientCreated ( ) { <nl> + realm . beginTransaction ( ) ; <nl> + PermissionUser permissionUser = realm . createObject ( PermissionUser . class , " id123 " ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + Role builtInRole = permissionUser . getPrivateRole ( ) ; <nl> + assertNull ( builtInRole ) ; <nl> + permissionUser = realm . where ( PermissionUser . class ) . equalTo ( " id " , " id123 " ) . findFirst ( ) ; <nl> + assertNull ( permissionUser . getPrivateRole ( ) ) ; <nl> + assertTrue ( permissionUser . getRoles ( ) . isEmpty ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void getRoles ( ) { <nl> RealmResults < Role > roles = realm . getRoles ( ) ; <nl> assertEquals ( 2 , roles . size ( ) ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / sync / permissions / PermissionUser . java b / realm / realm - library / src / main / java / io / realm / sync / permissions / PermissionUser . java <nl> index 7be7f16 . . 1146f94 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / sync / permissions / PermissionUser . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / sync / permissions / PermissionUser . java <nl> @ @ - 39 , 6 + 39 , 8 @ @ public class PermissionUser extends RealmObject { <nl> @ Required <nl> private String id ; <nl> <nl> + private Role role ; <nl> + <nl> @ LinkingObjects ( " members " ) <nl> final RealmResults < Role > roles = null ; <nl> <nl> @ @ - 72 , 4 + 74 , 14 @ @ public class PermissionUser extends RealmObject { <nl> public @ Nullable RealmResults < Role > getRoles ( ) { <nl> return roles ; <nl> } <nl> + <nl> + / * * <nl> + * The user ' s private role . This will be initialized to a role named for the user ' s <nl> + * identity that contains this user as its only member . <nl> + * <nl> + * @ return User private { @ link Role } . <nl> + * / <nl> + public Role getPrivateRole ( ) { <nl> + return role ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java <nl> index b275913 . . f4dc71a 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java <nl> @ @ - 21 , 13 + 21 , 10 @ @ import android . support . test . rule . UiThreadTestRule ; <nl> import android . support . test . runner . AndroidJUnit4 ; <nl> <nl> import org . junit . Before ; <nl> - import org . junit . Ignore ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> - import java . util . concurrent . atomic . AtomicReference ; <nl> - <nl> import io . realm . entities . StringOnly ; <nl> import io . realm . exceptions . RealmFileException ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> @ @ - 196 , 56 + 193 , 6 @ @ public class SessionTests { <nl> SyncManager . simulateClientReset ( SyncManager . getSession ( config ) ) ; <nl> } <nl> <nl> - / / Check that if we manually trigger a Client Reset , then it should be possible to start <nl> - / / downloading the Realm immediately after . <nl> - @ Test <nl> - @ RunTestInLooperThread <nl> - @ Ignore ( " https : / / github . com / realm / realm - java / issues / 5143 " ) <nl> - public void clientReset _ manualTriggerAllowSessionToRestart ( ) { <nl> - SyncUser user = createTestUser ( ) ; <nl> - String url = " realm : / / objectserver . realm . io / ~ / myrealm " ; <nl> - final AtomicReference < SyncConfiguration > configRef = new AtomicReference < > ( null ) ; <nl> - final SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( user , url ) <nl> - . errorHandler ( new SyncSession . ErrorHandler ( ) { <nl> - @ Override <nl> - public void onError ( SyncSession session , ObjectServerError error ) { <nl> - final ClientResetRequiredError handler = ( ClientResetRequiredError ) error ; <nl> - <nl> - / / Execute Client Reset <nl> - looperThread . closeTestRealms ( ) ; <nl> - handler . executeClientReset ( ) ; <nl> - <nl> - / / Try to re - open Realm and download it again <nl> - looperThread . postRunnable ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - / / Validate that files have been moved <nl> - assertFalse ( handler . getOriginalFile ( ) . exists ( ) ) ; <nl> - assertTrue ( handler . getBackupFile ( ) . exists ( ) ) ; <nl> - <nl> - SyncConfiguration config = configRef . get ( ) ; <nl> - Realm instance = Realm . getInstance ( config ) ; <nl> - looperThread . addTestRealm ( instance ) ; <nl> - try { <nl> - SyncManager . getSession ( config ) . downloadAllServerChanges ( ) ; <nl> - looperThread . testComplete ( ) ; <nl> - } catch ( InterruptedException e ) { <nl> - fail ( e . toString ( ) ) ; <nl> - } <nl> - } <nl> - } ) ; <nl> - } <nl> - } ) <nl> - . build ( ) ; <nl> - configRef . set ( config ) ; <nl> - <nl> - Realm realm = Realm . getInstance ( config ) ; <nl> - looperThread . addTestRealm ( realm ) ; <nl> - <nl> - / / Trigger error <nl> - SyncManager . simulateClientReset ( SyncManager . getSession ( config ) ) ; <nl> - } <nl> - <nl> / / Check that we can use the backup SyncConfiguration to open the Realm . <nl> @ Test <nl> @ RunTestInLooperThread <nl> diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store <nl> index 0d0615c . . 8a38785 160000 <nl> - - - a / realm / realm - library / src / main / cpp / object - store <nl> + + + b / realm / realm - library / src / main / cpp / object - store <nl> @ @ - 1 + 1 @ @ <nl> - Subproject commit 0d0615caaf0df6dbccca3f86a05303892c3a7a2e <nl> + Subproject commit 8a387856db0beb6a95e385546d1752188aff14a6 <nl> diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / SyncSessionTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / SyncSessionTests . java <nl> index f2fb6af . . 21399cc 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / SyncSessionTests . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / SyncSessionTests . java <nl> @ @ - 14 , 6 + 14 , 7 @ @ import org . junit . runner . RunWith ; <nl> import java . util . Arrays ; <nl> import java . util . UUID ; <nl> import java . util . concurrent . CountDownLatch ; <nl> + import java . util . concurrent . atomic . AtomicReference ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . StringOnly ; <nl> @ @ - 21 , 6 + 22 , 7 @ @ import io . realm . internal . OsRealmConfig ; <nl> import io . realm . objectserver . utils . Constants ; <nl> import io . realm . objectserver . utils . StringOnlyModule ; <nl> import io . realm . objectserver . utils . UserFactory ; <nl> + import io . realm . rule . RunTestInLooperThread ; <nl> import io . realm . util . SyncTestUtils ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> @ @ - 445 , 4 + 447 , 54 @ @ public class SyncSessionTests extends StandardIntegrationTest { <nl> realm . close ( ) ; <nl> } <nl> <nl> + / / Check that if we manually trigger a Client Reset , then it should be possible to start <nl> + / / downloading the Realm immediately after . <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void clientReset _ manualTriggerAllowSessionToRestart ( ) { <nl> + final String uniqueName = UUID . randomUUID ( ) . toString ( ) ; <nl> + SyncCredentials credentials = SyncCredentials . usernamePassword ( uniqueName , " password " , true ) ; <nl> + SyncUser user = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; <nl> + <nl> + final AtomicReference < SyncConfiguration > configRef = new AtomicReference < > ( null ) ; <nl> + final SyncConfiguration config = new SyncConfiguration . Builder ( user , Constants . USER _ REALM ) . directory ( looperThread . getRoot ( ) ) <nl> + <nl> + . errorHandler ( new SyncSession . ErrorHandler ( ) { <nl> + @ Override <nl> + public void onError ( SyncSession session , ObjectServerError error ) { <nl> + final ClientResetRequiredError handler = ( ClientResetRequiredError ) error ; <nl> + / / Execute Client Reset <nl> + looperThread . closeTestRealms ( ) ; <nl> + handler . executeClientReset ( ) ; <nl> + <nl> + / / Try to re - open Realm and download it again <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + / / Validate that files have been moved <nl> + assertFalse ( handler . getOriginalFile ( ) . exists ( ) ) ; <nl> + assertTrue ( handler . getBackupFile ( ) . exists ( ) ) ; <nl> + <nl> + SyncConfiguration config = configRef . get ( ) ; <nl> + Realm instance = Realm . getInstance ( config ) ; <nl> + looperThread . addTestRealm ( instance ) ; <nl> + try { <nl> + SyncManager . getSession ( config ) . downloadAllServerChanges ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } catch ( InterruptedException e ) { <nl> + fail ( e . toString ( ) ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + } ) <nl> + . build ( ) ; <nl> + configRef . set ( config ) ; <nl> + <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + looperThread . addTestRealm ( realm ) ; <nl> + / / Trigger error <nl> + SyncManager . simulateClientReset ( SyncManager . getSession ( config ) ) ; <nl> + } <nl> + <nl> }

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 107656b . . 31f208c 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 10 , 7 + 10 , 8 @ @ 
 
 # # # Enhancements 
 
 - * [ ObjectServer ] ` SyncConfiguration . automatic ( ) ` will make use of the host port to work out the default Realm URL . 
 + * [ ObjectServer ] ` SyncConfiguration . automatic ( ) ` will make use of the host port to work out the default Realm URL . 
 + * [ ObjectServer ] A role is now automatically created for each user with that user as its only member . This simplifies the common use case of restricting access to specific objects to a single user . This role can be accessed at ` PermissionUser . getRole ( ) ` . 
 
 # # # Bug Fixes 
 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / ObjectLevelPermissionsTest . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / ObjectLevelPermissionsTest . java 
 index 111733a . . 045f290 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / ObjectLevelPermissionsTest . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / ObjectLevelPermissionsTest . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import io . realm . sync . permissions . ClassPermissions ; 
 import io . realm . sync . permissions . ClassPrivileges ; 
 import io . realm . sync . permissions . ObjectPrivileges ; 
 import io . realm . sync . permissions . Permission ; 
 + import io . realm . sync . permissions . PermissionUser ; 
 import io . realm . sync . permissions . RealmPermissions ; 
 import io . realm . sync . permissions . RealmPrivileges ; 
 import io . realm . sync . permissions . Role ; 
 @ @ - 39 , 6 + 40 , 8 @ @ import io . realm . sync . permissions . Role ; 
 import static io . realm . util . SyncTestUtils . createTestUser ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 431 , 6 + 434 , 33 @ @ public class ObjectLevelPermissionsTest { 
 } 
 
 @ Test 
 + public void userPrivateRole ( ) { 
 + RealmResults < PermissionUser > permissionUsers = realm . where ( PermissionUser . class ) . findAll ( ) ; 
 + assertEquals ( 1 , permissionUsers . size ( ) ) ; 
 + 
 + PermissionUser permissionUser = permissionUsers . get ( 0 ) ; 
 + assertNotNull ( permissionUser ) ; 
 + Role role = permissionUser . getPrivateRole ( ) ; 
 + assertNotNull ( role ) ; 
 + 
 + assertEquals ( " _ _ User : " + user . getIdentity ( ) , role . getName ( ) ) ; 
 + assertTrue ( role . hasMember ( user . getIdentity ( ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void userPrivateRoleNotAvailableBeforeSyncClientCreated ( ) { 
 + realm . beginTransaction ( ) ; 
 + PermissionUser permissionUser = realm . createObject ( PermissionUser . class , " id123 " ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + Role builtInRole = permissionUser . getPrivateRole ( ) ; 
 + assertNull ( builtInRole ) ; 
 + permissionUser = realm . where ( PermissionUser . class ) . equalTo ( " id " , " id123 " ) . findFirst ( ) ; 
 + assertNull ( permissionUser . getPrivateRole ( ) ) ; 
 + assertTrue ( permissionUser . getRoles ( ) . isEmpty ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void getRoles ( ) { 
 RealmResults < Role > roles = realm . getRoles ( ) ; 
 assertEquals ( 2 , roles . size ( ) ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / sync / permissions / PermissionUser . java b / realm / realm - library / src / main / java / io / realm / sync / permissions / PermissionUser . java 
 index 7be7f16 . . 1146f94 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / sync / permissions / PermissionUser . java 
 + + + b / realm / realm - library / src / main / java / io / realm / sync / permissions / PermissionUser . java 
 @ @ - 39 , 6 + 39 , 8 @ @ public class PermissionUser extends RealmObject { 
 @ Required 
 private String id ; 
 
 + private Role role ; 
 + 
 @ LinkingObjects ( " members " ) 
 final RealmResults < Role > roles = null ; 
 
 @ @ - 72 , 4 + 74 , 14 @ @ public class PermissionUser extends RealmObject { 
 public @ Nullable RealmResults < Role > getRoles ( ) { 
 return roles ; 
 } 
 + 
 + / * * 
 + * The user ' s private role . This will be initialized to a role named for the user ' s 
 + * identity that contains this user as its only member . 
 + * 
 + * @ return User private { @ link Role } . 
 + * / 
 + public Role getPrivateRole ( ) { 
 + return role ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java 
 index b275913 . . f4dc71a 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SessionTests . java 
 @ @ - 21 , 13 + 21 , 10 @ @ import android . support . test . rule . UiThreadTestRule ; 
 import android . support . test . runner . AndroidJUnit4 ; 
 
 import org . junit . Before ; 
 - import org . junit . Ignore ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 - import java . util . concurrent . atomic . AtomicReference ; 
 - 
 import io . realm . entities . StringOnly ; 
 import io . realm . exceptions . RealmFileException ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 @ @ - 196 , 56 + 193 , 6 @ @ public class SessionTests { 
 SyncManager . simulateClientReset ( SyncManager . getSession ( config ) ) ; 
 } 
 
 - / / Check that if we manually trigger a Client Reset , then it should be possible to start 
 - / / downloading the Realm immediately after . 
 - @ Test 
 - @ RunTestInLooperThread 
 - @ Ignore ( " https : / / github . com / realm / realm - java / issues / 5143 " ) 
 - public void clientReset _ manualTriggerAllowSessionToRestart ( ) { 
 - SyncUser user = createTestUser ( ) ; 
 - String url = " realm : / / objectserver . realm . io / ~ / myrealm " ; 
 - final AtomicReference < SyncConfiguration > configRef = new AtomicReference < > ( null ) ; 
 - final SyncConfiguration config = configFactory . createSyncConfigurationBuilder ( user , url ) 
 - . errorHandler ( new SyncSession . ErrorHandler ( ) { 
 - @ Override 
 - public void onError ( SyncSession session , ObjectServerError error ) { 
 - final ClientResetRequiredError handler = ( ClientResetRequiredError ) error ; 
 - 
 - / / Execute Client Reset 
 - looperThread . closeTestRealms ( ) ; 
 - handler . executeClientReset ( ) ; 
 - 
 - / / Try to re - open Realm and download it again 
 - looperThread . postRunnable ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - / / Validate that files have been moved 
 - assertFalse ( handler . getOriginalFile ( ) . exists ( ) ) ; 
 - assertTrue ( handler . getBackupFile ( ) . exists ( ) ) ; 
 - 
 - SyncConfiguration config = configRef . get ( ) ; 
 - Realm instance = Realm . getInstance ( config ) ; 
 - looperThread . addTestRealm ( instance ) ; 
 - try { 
 - SyncManager . getSession ( config ) . downloadAllServerChanges ( ) ; 
 - looperThread . testComplete ( ) ; 
 - } catch ( InterruptedException e ) { 
 - fail ( e . toString ( ) ) ; 
 - } 
 - } 
 - } ) ; 
 - } 
 - } ) 
 - . build ( ) ; 
 - configRef . set ( config ) ; 
 - 
 - Realm realm = Realm . getInstance ( config ) ; 
 - looperThread . addTestRealm ( realm ) ; 
 - 
 - / / Trigger error 
 - SyncManager . simulateClientReset ( SyncManager . getSession ( config ) ) ; 
 - } 
 - 
 / / Check that we can use the backup SyncConfiguration to open the Realm . 
 @ Test 
 @ RunTestInLooperThread 
 diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store 
 index 0d0615c . . 8a38785 160000 
 - - - a / realm / realm - library / src / main / cpp / object - store 
 + + + b / realm / realm - library / src / main / cpp / object - store 
 @ @ - 1 + 1 @ @ 
 - Subproject commit 0d0615caaf0df6dbccca3f86a05303892c3a7a2e 
 + Subproject commit 8a387856db0beb6a95e385546d1752188aff14a6 
 diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / SyncSessionTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / SyncSessionTests . java 
 index f2fb6af . . 21399cc 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / SyncSessionTests . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / SyncSessionTests . java 
 @ @ - 14 , 6 + 14 , 7 @ @ import org . junit . runner . RunWith ; 
 import java . util . Arrays ; 
 import java . util . UUID ; 
 import java . util . concurrent . CountDownLatch ; 
 + import java . util . concurrent . atomic . AtomicReference ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . StringOnly ; 
 @ @ - 21 , 6 + 22 , 7 @ @ import io . realm . internal . OsRealmConfig ; 
 import io . realm . objectserver . utils . Constants ; 
 import io . realm . objectserver . utils . StringOnlyModule ; 
 import io . realm . objectserver . utils . UserFactory ; 
 + import io . realm . rule . RunTestInLooperThread ; 
 import io . realm . util . SyncTestUtils ; 
 
 import static org . junit . Assert . assertEquals ; 
 @ @ - 445 , 4 + 447 , 54 @ @ public class SyncSessionTests extends StandardIntegrationTest { 
 realm . close ( ) ; 
 } 
 
 + / / Check that if we manually trigger a Client Reset , then it should be possible to start 
 + / / downloading the Realm immediately after . 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void clientReset _ manualTriggerAllowSessionToRestart ( ) { 
 + final String uniqueName = UUID . randomUUID ( ) . toString ( ) ; 
 + SyncCredentials credentials = SyncCredentials . usernamePassword ( uniqueName , " password " , true ) ; 
 + SyncUser user = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; 
 + 
 + final AtomicReference < SyncConfiguration > configRef = new AtomicReference < > ( null ) ; 
 + final SyncConfiguration config = new SyncConfiguration . Builder ( user , Constants . USER _ REALM ) . directory ( looperThread . getRoot ( ) ) 
 + 
 + . errorHandler ( new SyncSession . ErrorHandler ( ) { 
 + @ Override 
 + public void onError ( SyncSession session , ObjectServerError error ) { 
 + final ClientResetRequiredError handler = ( ClientResetRequiredError ) error ; 
 + / / Execute Client Reset 
 + looperThread . closeTestRealms ( ) ; 
 + handler . executeClientReset ( ) ; 
 + 
 + / / Try to re - open Realm and download it again 
 + looperThread . postRunnable ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + / / Validate that files have been moved 
 + assertFalse ( handler . getOriginalFile ( ) . exists ( ) ) ; 
 + assertTrue ( handler . getBackupFile ( ) . exists ( ) ) ; 
 + 
 + SyncConfiguration config = configRef . get ( ) ; 
 + Realm instance = Realm . getInstance ( config ) ; 
 + looperThread . addTestRealm ( instance ) ; 
 + try { 
 + SyncManager . getSession ( config ) . downloadAllServerChanges ( ) ; 
 + looperThread . testComplete ( ) ; 
 + } catch ( InterruptedException e ) { 
 + fail ( e . toString ( ) ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + } ) 
 + . build ( ) ; 
 + configRef . set ( config ) ; 
 + 
 + Realm realm = Realm . getInstance ( config ) ; 
 + looperThread . addTestRealm ( realm ) ; 
 + / / Trigger error 
 + SyncManager . simulateClientReset ( SyncManager . getSession ( config ) ) ; 
 + } 
 + 
 }
