BLEU SCORE: 0.2722230298303347

TEST MSG: Tests for RealmNotififier
GENERATED MSG: Add support for microbenchmarks

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java <nl> new file mode 100644 <nl> index 0000000 . . 14d10c0 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java <nl> @ @ - 0 , 0 + 1 , 136 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package io . realm . internal ; <nl> + <nl> + <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> + <nl> + import org . junit . After ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import io . realm . RealmChangeListener ; <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . internal . android . AndroidRealmNotifier ; <nl> + import io . realm . rule . RunInLooperThread ; <nl> + import io . realm . rule . RunTestInLooperThread ; <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> + <nl> + import static junit . framework . Assert . assertTrue ; <nl> + import static junit . framework . Assert . fail ; <nl> + <nl> + @ RunWith ( AndroidJUnit4 . class ) <nl> + public class RealmNotifierTests { <nl> + @ Rule <nl> + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> + @ Rule <nl> + public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; <nl> + <nl> + private RealmConfiguration config ; <nl> + Capabilities capabilitiesCanDeliver = new Capabilities ( ) { <nl> + @ Override <nl> + public boolean canDeliverNotification ( ) { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public void checkCanDeliverNotification ( String exceptionMessage ) { <nl> + } <nl> + } ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws Exception { <nl> + config = configFactory . createConfiguration ( ) ; <nl> + } <nl> + <nl> + @ After <nl> + public void tearDown ( ) { <nl> + } <nl> + <nl> + private SharedRealm getSharedRealm ( ) { <nl> + return SharedRealm . getInstance ( config , null , true ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void post ( ) { <nl> + RealmNotifier notifier = new AndroidRealmNotifier ( capabilitiesCanDeliver ) ; <nl> + notifier . post ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void postAtFrontOfQueue ( ) { <nl> + RealmNotifier notifier = new AndroidRealmNotifier ( capabilitiesCanDeliver ) ; <nl> + notifier . post ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + fail ( ) ; <nl> + } <nl> + } ) ; <nl> + notifier . postAtFrontOfQueue ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void addChangeListener _ byLocalChanges ( ) { <nl> + SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> + sharedRealm . realmNotifier . addChangeListener ( sharedRealm , new RealmChangeListener < SharedRealm > ( ) { <nl> + @ Override <nl> + public void onChange ( SharedRealm sharedRealm ) { <nl> + / / Transaction has been committed in core , but commitTransaction hasn ' t returned in java . <nl> + / / Need a flag in java . <nl> + / / assertTrue ( sharedRealm . isInTransaction ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + sharedRealm . beginTransaction ( ) ; <nl> + sharedRealm . commitTransaction ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void addChangeListener _ byRemoteChanges ( ) { <nl> + SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> + sharedRealm . realmNotifier . addChangeListener ( sharedRealm , new RealmChangeListener < SharedRealm > ( ) { <nl> + @ Override <nl> + public void onChange ( SharedRealm sharedRealm ) { <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> + sharedRealm . beginTransaction ( ) ; <nl> + sharedRealm . commitTransaction ( ) ; <nl> + sharedRealm . close ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> index ba5e728 . . 4d7d253 100644 <nl> - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp <nl> @ @ - 55 , 12 + 55 , 15 @ @ std : : vector < BindingContext : : ObserverState > JavaBindingContext : : get _ observed _ rows <nl> <nl> return state _ list ; <nl> } <nl> + <nl> void JavaBindingContext : : changes _ available ( ) <nl> { <nl> if ( m _ java _ notifier ) { <nl> m _ java _ notifier . call _ with _ local _ ref ( [ & ] ( JNIEnv * env , jobject notifier _ obj ) { <nl> / / Method IDs from RealmNotifier implementation . Cache them as member vars . <nl> - static JavaMethod notify _ by _ other _ method ( env , notifier _ obj , " changesAvailable " , " ( ) V " ) ; <nl> + static JavaMethod notify _ by _ other _ method ( env , <nl> + notifier _ obj , <nl> + " changesAvailable " , " ( ) V " ) ; <nl> env - > CallVoidMethod ( notifier _ obj , notify _ by _ other _ method ) ; <nl> } ) ; <nl> } <nl> @ @ - 73 , 8 + 76 , 7 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c <nl> auto env = JniUtils : : get _ env ( ) ; <nl> static JavaMethod row _ observer _ pair _ on _ change _ method ( env , <nl> " io / realm / internal / RowNotifier $ RowObserverPair " , <nl> - " onChange " , <nl> - " ( ) V " ) ; <nl> + " onChange " , " ( ) V " ) ; <nl> <nl> for ( auto state : observer _ state _ list ) { <nl> if ( env - > ExceptionCheck ( ) ) return ; <nl> @ @ - 99 , 8 + 101 , 9 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c <nl> <nl> if ( env - > ExceptionCheck ( ) ) return ; <nl> m _ java _ notifier . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * , jobject notifier _ obj ) { <nl> - static JavaMethod realm _ notifier _ did _ change _ method ( env , notifier _ obj , <nl> - " didChange " , " ( ) V " ) ; <nl> + static JavaMethod realm _ notifier _ did _ change _ method ( env , <nl> + notifier _ obj , <nl> + " didChange " , " ( ) V " ) ; <nl> <nl> env - > CallVoidMethod ( notifier _ obj , realm _ notifier _ did _ change _ method ) ; <nl> } ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> index 826bfe8 . . 5a7703e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> @ @ - 78 , 8 + 78 , 9 @ @ public abstract class RealmNotifier implements Closeable { <nl> * This is getting called on the same thread which created this Realm when the same Realm file has been changed by <nl> * other thread . The changes on the same thread should not trigger this call . <nl> * / <nl> + / / Package protected to avoid finding class by name in JNI . <nl> @ SuppressWarnings ( " unused " ) / / called from java _ binding _ context . cpp <nl> - protected void didChange ( ) { <nl> + void didChange ( ) { <nl> realmObserverPairs . foreach ( onChangeCallBack ) ; <nl> for ( Runnable runnable : transactionCallbacks ) { <nl> runnable . run ( ) ; <nl> @ @ - 88 , 7 + 89 , 8 @ @ public abstract class RealmNotifier implements Closeable { <nl> } <nl> <nl> @ SuppressWarnings ( " unused " ) / / called from java _ binding _ context . cpp <nl> - protected void changesAvailable ( ) { <nl> + / / Package protected to avoid finding class by name in JNI . <nl> + void changesAvailable ( ) { <nl> sharedRealm . disableCollectionSnapshot ( ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index dca876a . . 42f14b4 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 28 , 6 + 28 , 17 @ @ android { <nl> } <nl> } <nl> <nl> + sourceSets { <nl> + androidTest { <nl> + java . srcDirs + = ' src / benchmarks / java ' <nl> + } <nl> + } <nl> + <nl> + packagingOptions { <nl> + exclude ' META - INF / NOTICE . txt ' <nl> + exclude ' META - INF / LICENSE . txt ' <nl> + } <nl> + <nl> lintOptions { <nl> abortOnError false <nl> } <nl> @ @ - 55 , 6 + 66 , 8 @ @ dependencies { <nl> androidTestCompile ' com . android . support . test : rules : 0 . 4 . 1 ' <nl> androidTestCompile ' com . google . dexmaker : dexmaker : 1 . 2 ' <nl> androidTestCompile ' com . google . dexmaker : dexmaker - mockito : 1 . 2 ' <nl> + androidTestCompile ' com . opencsv : opencsv : 3 . 4 ' <nl> + androidTestCompile ' dk . ilios : spanner : 0 . 6 . 0 ' <nl> <nl> androidTestApt project ( ' : realm - annotations - processor ' ) <nl> } <nl> @ @ - 149 , 6 + 162 , 24 @ @ task checkstyle ( type : Checkstyle ) { <nl> classpath = files ( ) <nl> } <nl> <nl> + / / Configuration options can be found here : <nl> + / / http : / / developer . android . com / reference / android / support / test / runner / AndroidJUnitRunner . html <nl> + task connectedBenchmarks ( type : GradleBuild ) { <nl> + description = ' Run all benchmarks on connected devices ' <nl> + group = ' Verification ' <nl> + buildFile = file ( " $ { projectDir } / build . gradle " ) <nl> + startParameter . getProjectProperties ( ) . put ( ' android . testInstrumentationRunnerArguments . package ' , ' io . realm . benchmarks ' ) <nl> + tasks = [ ' connectedCheck ' ] <nl> + } <nl> + <nl> + task connectedUnitTests ( type : GradleBuild ) { <nl> + description = ' Run all unit tests on connected devices ' <nl> + group = ' Verification ' <nl> + buildFile = file ( " $ { projectDir } / build . gradle " ) <nl> + startParameter . getProjectProperties ( ) . put ( ' android . testInstrumentationRunnerArguments . notPackage ' , ' io . realm . benchmarks ' ) <nl> + tasks = [ ' connectedAndroidTest ' ] <nl> + } <nl> + <nl> install { <nl> repositories . mavenInstaller { <nl> pom { <nl> diff - - git a / realm / realm - library / src / androidTest / AndroidManifest . xml b / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> index d7fa5a8 . . 357f8f7 100644 <nl> - - - a / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> + + + b / realm / realm - library / src / androidTest / AndroidManifest . xml <nl> @ @ - 1 , 16 + 1 , 23 @ @ <nl> < ? xml version = " 1 . 0 " encoding = " utf - 8 " ? > <nl> - < manifest xmlns : android = " http : / / schemas . android . com / apk / res / android " <nl> - package = " io . realm " > <nl> + < manifest package = " io . realm " <nl> + xmlns : android = " http : / / schemas . android . com / apk / res / android " <nl> + xmlns : tools = " http : / / schemas . android . com / tools " > <nl> <nl> - < uses - sdk android : minSdkVersion = " 16 " android : targetSdkVersion = " 22 " / > <nl> + < uses - permission android : name = " android . permission . WRITE _ EXTERNAL _ STORAGE " / > <nl> + < uses - permission android : name = " android . permission . READ _ EXTERNAL _ STORAGE " / > <nl> + <nl> + < uses - sdk tools : overrideLibrary = " dk . ilios . spanner " / > <nl> + < uses - sdk <nl> + android : minSdkVersion = " 16 " <nl> + android : targetSdkVersion = " 22 " / > <nl> <nl> < application > <nl> - < uses - library android : name = " android . test . runner " / > <nl> + < uses - library android : name = " android . test . runner " / > <nl> < service <nl> android : name = " . services . RemoteProcessService " <nl> android : enabled = " true " <nl> android : exported = " true " <nl> - android : process = " : remote " > <nl> + android : process = " : remote " > <nl> < / service > <nl> < / application > <nl> <nl> diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmBenchmarks . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmBenchmarks . java <nl> new file mode 100644 <nl> index 0000000 . . dd23f1f <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmBenchmarks . java <nl> @ @ - 0 , 0 + 1 , 82 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . benchmarks ; <nl> + <nl> + import android . support . test . InstrumentationRegistry ; <nl> + <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import dk . ilios . spanner . AfterExperiment ; <nl> + import dk . ilios . spanner . BeforeExperiment ; <nl> + import dk . ilios . spanner . Benchmark ; <nl> + import dk . ilios . spanner . BenchmarkConfiguration ; <nl> + import dk . ilios . spanner . SpannerConfig ; <nl> + import dk . ilios . spanner . junit . SpannerRunner ; <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . benchmarks . config . BenchmarkConfig ; <nl> + import io . realm . entities . AllTypes ; <nl> + <nl> + @ RunWith ( SpannerRunner . class ) <nl> + public class RealmBenchmarks { <nl> + <nl> + @ BenchmarkConfiguration <nl> + public SpannerConfig configuration = BenchmarkConfig . getConfiguration ( this . getClass ( ) . getCanonicalName ( ) ) ; <nl> + <nl> + private Realm realm ; <nl> + private AllTypes readObject ; <nl> + private RealmConfiguration coldConfig ; <nl> + <nl> + @ BeforeExperiment <nl> + public void before ( ) { <nl> + coldConfig = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . name ( " cold " ) . build ( ) ; <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; <nl> + Realm . deleteRealm ( coldConfig ) ; <nl> + Realm . deleteRealm ( config ) ; <nl> + realm = Realm . getInstance ( config ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + readObject = realm . createObject ( AllTypes . class ) ; <nl> + readObject . setColumnString ( " Foo " ) ; <nl> + readObject . setColumnLong ( 42 ) ; <nl> + readObject . setColumnDouble ( 1 . 234D ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ AfterExperiment <nl> + public void after ( ) { <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void coldCreateAndClose ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + Realm realm = Realm . getInstance ( coldConfig ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void emptyTransaction ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + realm . beginTransaction ( ) ; <nl> + realm . commitTransaction ( ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectReadBenchmarks . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectReadBenchmarks . java <nl> new file mode 100644 <nl> index 0000000 . . e26c003 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectReadBenchmarks . java <nl> @ @ - 0 , 0 + 1 , 84 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . benchmarks ; <nl> + <nl> + import android . support . test . InstrumentationRegistry ; <nl> + <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import dk . ilios . spanner . AfterExperiment ; <nl> + import dk . ilios . spanner . BeforeExperiment ; <nl> + import dk . ilios . spanner . Benchmark ; <nl> + import dk . ilios . spanner . BenchmarkConfiguration ; <nl> + import dk . ilios . spanner . SpannerConfig ; <nl> + import dk . ilios . spanner . junit . SpannerRunner ; <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . benchmarks . config . BenchmarkConfig ; <nl> + import io . realm . entities . AllTypes ; <nl> + <nl> + @ RunWith ( SpannerRunner . class ) <nl> + public class RealmObjectReadBenchmarks { <nl> + <nl> + @ BenchmarkConfiguration <nl> + public SpannerConfig configuration = BenchmarkConfig . getConfiguration ( this . getClass ( ) . getCanonicalName ( ) ) ; <nl> + <nl> + private Realm realm ; <nl> + private AllTypes readObject ; <nl> + <nl> + @ BeforeExperiment <nl> + public void before ( ) { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; <nl> + Realm . deleteRealm ( config ) ; <nl> + realm = Realm . getInstance ( config ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + readObject = realm . createObject ( AllTypes . class ) ; <nl> + readObject . setColumnString ( " Foo " ) ; <nl> + readObject . setColumnLong ( 42 ) ; <nl> + readObject . setColumnDouble ( 1 . 234D ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ AfterExperiment <nl> + public void after ( ) { <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void readString ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + String value = readObject . getColumnString ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void readLong ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + long value = readObject . getColumnLong ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void readDouble ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + double value = readObject . getColumnDouble ( ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectWriteBenchmarks . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectWriteBenchmarks . java <nl> new file mode 100644 <nl> index 0000000 . . 73df749 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectWriteBenchmarks . java <nl> @ @ - 0 , 0 + 1 , 78 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . benchmarks ; <nl> + <nl> + import android . support . test . InstrumentationRegistry ; <nl> + <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import dk . ilios . spanner . AfterExperiment ; <nl> + import dk . ilios . spanner . BeforeExperiment ; <nl> + import dk . ilios . spanner . Benchmark ; <nl> + import dk . ilios . spanner . BenchmarkConfiguration ; <nl> + import dk . ilios . spanner . SpannerConfig ; <nl> + import dk . ilios . spanner . junit . SpannerRunner ; <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . benchmarks . config . BenchmarkConfig ; <nl> + import io . realm . entities . AllTypes ; <nl> + <nl> + @ RunWith ( SpannerRunner . class ) <nl> + public class RealmObjectWriteBenchmarks { <nl> + <nl> + @ BenchmarkConfiguration <nl> + public SpannerConfig configuration = BenchmarkConfig . getConfiguration ( this . getClass ( ) . getCanonicalName ( ) ) ; <nl> + <nl> + private Realm realm ; <nl> + private AllTypes writeObject ; <nl> + <nl> + @ BeforeExperiment <nl> + public void before ( ) { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; <nl> + Realm . deleteRealm ( config ) ; <nl> + realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + writeObject = realm . createObject ( AllTypes . class ) ; <nl> + } <nl> + <nl> + @ AfterExperiment <nl> + public void after ( ) { <nl> + realm . cancelTransaction ( ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void writeString ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + writeObject . setColumnString ( " Foo " ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void writeLong ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + writeObject . setColumnLong ( 42 ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void writeDouble ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + writeObject . setColumnDouble ( 1 . 234D ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmQueryBenchmarks . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmQueryBenchmarks . java <nl> new file mode 100644 <nl> index 0000000 . . 9117d55 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmQueryBenchmarks . java <nl> @ @ - 0 , 0 + 1 , 94 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . benchmarks ; <nl> + <nl> + import android . support . test . InstrumentationRegistry ; <nl> + <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import dk . ilios . spanner . AfterExperiment ; <nl> + import dk . ilios . spanner . BeforeExperiment ; <nl> + import dk . ilios . spanner . Benchmark ; <nl> + import dk . ilios . spanner . BenchmarkConfiguration ; <nl> + import dk . ilios . spanner . SpannerConfig ; <nl> + import dk . ilios . spanner . junit . SpannerRunner ; <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . RealmResults ; <nl> + import io . realm . Sort ; <nl> + import io . realm . benchmarks . config . BenchmarkConfig ; <nl> + import io . realm . entities . AllTypes ; <nl> + <nl> + @ RunWith ( SpannerRunner . class ) <nl> + public class RealmQueryBenchmarks { <nl> + <nl> + private static final int DATA _ SIZE = 1000 ; <nl> + <nl> + @ BenchmarkConfiguration <nl> + public SpannerConfig configuration = BenchmarkConfig . getConfiguration ( this . getClass ( ) . getCanonicalName ( ) ) ; <nl> + <nl> + private Realm realm ; <nl> + <nl> + @ BeforeExperiment <nl> + public void before ( ) { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; <nl> + Realm . deleteRealm ( config ) ; <nl> + realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + for ( int i = 0 ; i < DATA _ SIZE ; i + + ) { <nl> + AllTypes obj = realm . createObject ( AllTypes . class ) ; <nl> + obj . setColumnLong ( i ) ; <nl> + obj . setColumnBoolean ( i % 2 = = 0 ) ; <nl> + obj . setColumnString ( " Foo " + i ) ; <nl> + obj . setColumnDouble ( i + 1 . 234D ) ; <nl> + } <nl> + realm . commitTransaction ( ) ; <nl> + } <nl> + <nl> + @ AfterExperiment <nl> + public void after ( ) { <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void containsQuery ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + RealmResults < AllTypes > realmResults = realm . where ( AllTypes . class ) . contains ( AllTypes . FIELD _ STRING , " Foo 1 " ) . findAll ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void count ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + long size = realm . where ( AllTypes . class ) . count ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void findAll ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void findAllSortedOneField ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ STRING , Sort . ASCENDING ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmResultsBenchmarks . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmResultsBenchmarks . java <nl> new file mode 100644 <nl> index 0000000 . . 88010f9 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmResultsBenchmarks . java <nl> @ @ - 0 , 0 + 1 , 109 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . benchmarks ; <nl> + <nl> + import android . support . test . InstrumentationRegistry ; <nl> + <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import dk . ilios . spanner . AfterExperiment ; <nl> + import dk . ilios . spanner . BeforeExperiment ; <nl> + import dk . ilios . spanner . Benchmark ; <nl> + import dk . ilios . spanner . BenchmarkConfiguration ; <nl> + import dk . ilios . spanner . SpannerConfig ; <nl> + import dk . ilios . spanner . junit . SpannerRunner ; <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . RealmResults ; <nl> + import io . realm . benchmarks . config . BenchmarkConfig ; <nl> + import io . realm . entities . AllTypes ; <nl> + <nl> + @ RunWith ( SpannerRunner . class ) <nl> + public class RealmResultsBenchmarks { <nl> + <nl> + private static final int DATA _ SIZE = 1000 ; <nl> + <nl> + @ BenchmarkConfiguration <nl> + public SpannerConfig configuration = BenchmarkConfig . getConfiguration ( this . getClass ( ) . getCanonicalName ( ) ) ; <nl> + <nl> + private Realm realm ; <nl> + private RealmResults < AllTypes > results ; <nl> + <nl> + @ BeforeExperiment <nl> + public void before ( ) { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; <nl> + Realm . deleteRealm ( config ) ; <nl> + realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + for ( int i = 0 ; i < DATA _ SIZE ; i + + ) { <nl> + AllTypes obj = realm . createObject ( AllTypes . class ) ; <nl> + obj . setColumnLong ( i ) ; <nl> + obj . setColumnBoolean ( i % 2 = = 0 ) ; <nl> + obj . setColumnString ( " Foo " + i ) ; <nl> + obj . setColumnDouble ( i + 1 . 234D ) ; <nl> + } <nl> + realm . commitTransaction ( ) ; <nl> + results = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> + } <nl> + <nl> + @ AfterExperiment <nl> + public void after ( ) { <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void get ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + AllTypes item = results . get ( 0 ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void size ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + long size = results . size ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void min ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + Number min = results . min ( AllTypes . FIELD _ LONG ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void max ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + Number max = results . max ( AllTypes . FIELD _ LONG ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void average ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + Number average = results . average ( AllTypes . FIELD _ LONG ) ; <nl> + } <nl> + } <nl> + <nl> + @ Benchmark <nl> + public void sum ( long reps ) { <nl> + for ( long i = 0 ; i < reps ; i + + ) { <nl> + Number sum = results . sum ( AllTypes . FIELD _ LONG ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / BenchmarkConfig . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / BenchmarkConfig . java <nl> new file mode 100644 <nl> index 0000000 . . 47a1136 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / BenchmarkConfig . java <nl> @ @ - 0 , 0 + 1 , 76 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . benchmarks . config ; <nl> + <nl> + import android . os . Environment ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import dk . ilios . spanner . SpannerConfig ; <nl> + import dk . ilios . spanner . config . RuntimeInstrumentConfig ; <nl> + import dk . ilios . spanner . output . ResultProcessor ; <nl> + <nl> + / * * <nl> + * Static helper class for creating benchmark configurations <nl> + * * / <nl> + public class BenchmarkConfig { <nl> + <nl> + public static SpannerConfig getConfiguration ( String className ) { <nl> + / / Document folder is located at : / sdcard / realm - benchmarks <nl> + / / Benchmarks results should be saved in < documentFolder > / results / < className > . json <nl> + / / Baseline data should be found in < documentFolder > / baselines / < className > . json <nl> + / / Custom CSV files should be found in < documentFolder > / csv / < className > . csv <nl> + File externalDocuments = new File ( Environment . getExternalStorageDirectory ( ) , " realm - benchmarks " ) ; <nl> + if ( ! externalDocuments . exists ( ) & & ! externalDocuments . mkdir ( ) ) { <nl> + throw new RuntimeException ( " Could not create benchmark folder : " + externalDocuments ) ; <nl> + } <nl> + File resultsDir = new File ( externalDocuments , " results " ) ; <nl> + File baselineDir = new File ( externalDocuments , " baselines " ) ; <nl> + File baselineFile = new File ( baselineDir , className + " . json " ) ; <nl> + File csvDir = new File ( externalDocuments , " csv " ) ; <nl> + csvDir . mkdir ( ) ; <nl> + File csvFile = new File ( csvDir , className + " . csv " ) ; <nl> + ResultProcessor csvResultProcessor = new CSVResultProcessor ( csvFile ) ; <nl> + <nl> + / / General configuration for running benchmarks . <nl> + / / Always save result files . CI will determine if it wants to store them . <nl> + SpannerConfig . Builder builder = new SpannerConfig . Builder ( ) <nl> + . saveResults ( resultsDir , className + " . json " ) <nl> + . trialsPrExperiment ( 1 ) <nl> + . maxBenchmarkThreads ( 1 ) <nl> + . addInstrument ( new RuntimeInstrumentConfig . Builder ( ) <nl> + . gcBeforeEachMeasurement ( true ) <nl> + . warmupTime ( 0 , TimeUnit . SECONDS ) <nl> + . timingInterval ( 500 , TimeUnit . MILLISECONDS ) <nl> + . measurements ( 9 ) <nl> + . build ( ) <nl> + ) <nl> + . addResultProcessor ( csvResultProcessor ) ; <nl> + <nl> + / / Only use baseline file if it exists <nl> + if ( baselineFile . exists ( ) ) { <nl> + builder . useBaseline ( baselineFile ) ; <nl> + / / Test that 25 . , 50 . and 75 . percentile don ' t change by more than 15 % <nl> + builder . percentileFailureLimit ( 25f , 0 . 15f ) ; <nl> + builder . percentileFailureLimit ( 50f , 0 . 15f ) ; <nl> + builder . percentileFailureLimit ( 75f , 0 . 15f ) ; <nl> + } <nl> + <nl> + return builder . build ( ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / CSVResultProcessor . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / CSVResultProcessor . java <nl> new file mode 100644 <nl> index 0000000 . . 9a11c14 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / CSVResultProcessor . java <nl> @ @ - 0 , 0 + 1 , 106 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . benchmarks . config ; <nl> + <nl> + import com . google . common . io . Files ; <nl> + import com . opencsv . CSVWriter ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . FileWriter ; <nl> + import java . io . IOException ; <nl> + import java . text . DecimalFormat ; <nl> + <nl> + import dk . ilios . spanner . model . Trial ; <nl> + import dk . ilios . spanner . output . ResultProcessor ; <nl> + <nl> + / * * <nl> + * Converts the result of a benchmark to CSV for easier processing by other data / graph programs . <nl> + * <nl> + * Output is the following . <nl> + * methodname , trialNumber , params , measurements , min , max , average , 25pct , 50pct , 75pct <nl> + * / <nl> + public class CSVResultProcessor implements ResultProcessor { <nl> + <nl> + private static final boolean APPLY _ QUOTES = true ; <nl> + private static final DecimalFormat decimalFormater = new DecimalFormat ( " # . 00 " ) ; <nl> + <nl> + private final File resultFile ; <nl> + private final File workFile ; <nl> + private final CSVWriter writer ; <nl> + <nl> + public CSVResultProcessor ( File resultFile ) { <nl> + this . resultFile = resultFile ; <nl> + this . workFile = new File ( resultFile . getPath ( ) + " . tmp " ) ; <nl> + try { <nl> + writer = new CSVWriter ( new FileWriter ( resultFile ) ) ; <nl> + addLabels ( ) ; <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private void addLabels ( ) { <nl> + String [ ] labels = new String [ ] { <nl> + " Method name " , <nl> + " Trial " , <nl> + " Measurements " , <nl> + " Min . " , <nl> + " Max . " , <nl> + " Mean " , <nl> + " 25pct . " , <nl> + " 50pct . " , <nl> + " 75pct . " , <nl> + } ; <nl> + <nl> + writer . writeNext ( labels , APPLY _ QUOTES ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void processTrial ( Trial trial ) { <nl> + String methodName = trial . experiment ( ) . instrumentation ( ) . benchmarkMethod ( ) . getName ( ) ; <nl> + int trialNo = trial . getTrialNumber ( ) ; <nl> + int measurements = trial . measurements ( ) . size ( ) ; <nl> + double min = trial . getMin ( ) ; <nl> + double max = trial . getMax ( ) ; <nl> + double mean = trial . getMean ( ) ; <nl> + double percentile25 = trial . getPercentile ( 25 ) ; <nl> + double percentile50 = trial . getMedian ( ) ; <nl> + double percentile75 = trial . getPercentile ( 75 ) ; <nl> + <nl> + String [ ] resultLine = new String [ ] { <nl> + methodName , <nl> + Integer . toString ( trialNo ) , <nl> + Integer . toString ( measurements ) , <nl> + decimalFormater . format ( min ) , <nl> + decimalFormater . format ( max ) , <nl> + decimalFormater . format ( mean ) , <nl> + decimalFormater . format ( percentile25 ) , <nl> + decimalFormater . format ( percentile50 ) , <nl> + decimalFormater . format ( percentile75 ) <nl> + } ; <nl> + <nl> + writer . writeNext ( resultLine ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void close ( ) throws IOException { <nl> + writer . close ( ) ; <nl> + if ( workFile . exists ( ) ) { <nl> + Files . move ( workFile , resultFile ) ; <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java 
 new file mode 100644 
 index 0000000 . . 14d10c0 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java 
 @ @ - 0 , 0 + 1 , 136 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package io . realm . internal ; 
 + 
 + 
 + import android . support . test . runner . AndroidJUnit4 ; 
 + 
 + import org . junit . After ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import io . realm . RealmChangeListener ; 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . internal . android . AndroidRealmNotifier ; 
 + import io . realm . rule . RunInLooperThread ; 
 + import io . realm . rule . RunTestInLooperThread ; 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 + 
 + import static junit . framework . Assert . assertTrue ; 
 + import static junit . framework . Assert . fail ; 
 + 
 + @ RunWith ( AndroidJUnit4 . class ) 
 + public class RealmNotifierTests { 
 + @ Rule 
 + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 + @ Rule 
 + public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; 
 + 
 + private RealmConfiguration config ; 
 + Capabilities capabilitiesCanDeliver = new Capabilities ( ) { 
 + @ Override 
 + public boolean canDeliverNotification ( ) { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public void checkCanDeliverNotification ( String exceptionMessage ) { 
 + } 
 + } ; 
 + 
 + @ Before 
 + public void setUp ( ) throws Exception { 
 + config = configFactory . createConfiguration ( ) ; 
 + } 
 + 
 + @ After 
 + public void tearDown ( ) { 
 + } 
 + 
 + private SharedRealm getSharedRealm ( ) { 
 + return SharedRealm . getInstance ( config , null , true ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void post ( ) { 
 + RealmNotifier notifier = new AndroidRealmNotifier ( capabilitiesCanDeliver ) ; 
 + notifier . post ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void postAtFrontOfQueue ( ) { 
 + RealmNotifier notifier = new AndroidRealmNotifier ( capabilitiesCanDeliver ) ; 
 + notifier . post ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + fail ( ) ; 
 + } 
 + } ) ; 
 + notifier . postAtFrontOfQueue ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void addChangeListener _ byLocalChanges ( ) { 
 + SharedRealm sharedRealm = getSharedRealm ( ) ; 
 + sharedRealm . realmNotifier . addChangeListener ( sharedRealm , new RealmChangeListener < SharedRealm > ( ) { 
 + @ Override 
 + public void onChange ( SharedRealm sharedRealm ) { 
 + / / Transaction has been committed in core , but commitTransaction hasn ' t returned in java . 
 + / / Need a flag in java . 
 + / / assertTrue ( sharedRealm . isInTransaction ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + sharedRealm . beginTransaction ( ) ; 
 + sharedRealm . commitTransaction ( ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void addChangeListener _ byRemoteChanges ( ) { 
 + SharedRealm sharedRealm = getSharedRealm ( ) ; 
 + sharedRealm . realmNotifier . addChangeListener ( sharedRealm , new RealmChangeListener < SharedRealm > ( ) { 
 + @ Override 
 + public void onChange ( SharedRealm sharedRealm ) { 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + SharedRealm sharedRealm = getSharedRealm ( ) ; 
 + sharedRealm . beginTransaction ( ) ; 
 + sharedRealm . commitTransaction ( ) ; 
 + sharedRealm . close ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 index ba5e728 . . 4d7d253 100644 
 - - - a / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 + + + b / realm / realm - library / src / main / cpp / java _ binding _ context . cpp 
 @ @ - 55 , 12 + 55 , 15 @ @ std : : vector < BindingContext : : ObserverState > JavaBindingContext : : get _ observed _ rows 
 
 return state _ list ; 
 } 
 + 
 void JavaBindingContext : : changes _ available ( ) 
 { 
 if ( m _ java _ notifier ) { 
 m _ java _ notifier . call _ with _ local _ ref ( [ & ] ( JNIEnv * env , jobject notifier _ obj ) { 
 / / Method IDs from RealmNotifier implementation . Cache them as member vars . 
 - static JavaMethod notify _ by _ other _ method ( env , notifier _ obj , " changesAvailable " , " ( ) V " ) ; 
 + static JavaMethod notify _ by _ other _ method ( env , 
 + notifier _ obj , 
 + " changesAvailable " , " ( ) V " ) ; 
 env - > CallVoidMethod ( notifier _ obj , notify _ by _ other _ method ) ; 
 } ) ; 
 } 
 @ @ - 73 , 8 + 76 , 7 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c 
 auto env = JniUtils : : get _ env ( ) ; 
 static JavaMethod row _ observer _ pair _ on _ change _ method ( env , 
 " io / realm / internal / RowNotifier $ RowObserverPair " , 
 - " onChange " , 
 - " ( ) V " ) ; 
 + " onChange " , " ( ) V " ) ; 
 
 for ( auto state : observer _ state _ list ) { 
 if ( env - > ExceptionCheck ( ) ) return ; 
 @ @ - 99 , 8 + 101 , 9 @ @ void JavaBindingContext : : did _ change ( std : : vector < BindingContext : : ObserverState > c 
 
 if ( env - > ExceptionCheck ( ) ) return ; 
 m _ java _ notifier . call _ with _ local _ ref ( env , [ & ] ( JNIEnv * , jobject notifier _ obj ) { 
 - static JavaMethod realm _ notifier _ did _ change _ method ( env , notifier _ obj , 
 - " didChange " , " ( ) V " ) ; 
 + static JavaMethod realm _ notifier _ did _ change _ method ( env , 
 + notifier _ obj , 
 + " didChange " , " ( ) V " ) ; 
 
 env - > CallVoidMethod ( notifier _ obj , realm _ notifier _ did _ change _ method ) ; 
 } ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 index 826bfe8 . . 5a7703e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 @ @ - 78 , 8 + 78 , 9 @ @ public abstract class RealmNotifier implements Closeable { 
 * This is getting called on the same thread which created this Realm when the same Realm file has been changed by 
 * other thread . The changes on the same thread should not trigger this call . 
 * / 
 + / / Package protected to avoid finding class by name in JNI . 
 @ SuppressWarnings ( " unused " ) / / called from java _ binding _ context . cpp 
 - protected void didChange ( ) { 
 + void didChange ( ) { 
 realmObserverPairs . foreach ( onChangeCallBack ) ; 
 for ( Runnable runnable : transactionCallbacks ) { 
 runnable . run ( ) ; 
 @ @ - 88 , 7 + 89 , 8 @ @ public abstract class RealmNotifier implements Closeable { 
 } 
 
 @ SuppressWarnings ( " unused " ) / / called from java _ binding _ context . cpp 
 - protected void changesAvailable ( ) { 
 + / / Package protected to avoid finding class by name in JNI . 
 + void changesAvailable ( ) { 
 sharedRealm . disableCollectionSnapshot ( ) ; 
 } 


NEAREST DIFF:
diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index dca876a . . 42f14b4 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 28 , 6 + 28 , 17 @ @ android { 
 } 
 } 
 
 + sourceSets { 
 + androidTest { 
 + java . srcDirs + = ' src / benchmarks / java ' 
 + } 
 + } 
 + 
 + packagingOptions { 
 + exclude ' META - INF / NOTICE . txt ' 
 + exclude ' META - INF / LICENSE . txt ' 
 + } 
 + 
 lintOptions { 
 abortOnError false 
 } 
 @ @ - 55 , 6 + 66 , 8 @ @ dependencies { 
 androidTestCompile ' com . android . support . test : rules : 0 . 4 . 1 ' 
 androidTestCompile ' com . google . dexmaker : dexmaker : 1 . 2 ' 
 androidTestCompile ' com . google . dexmaker : dexmaker - mockito : 1 . 2 ' 
 + androidTestCompile ' com . opencsv : opencsv : 3 . 4 ' 
 + androidTestCompile ' dk . ilios : spanner : 0 . 6 . 0 ' 
 
 androidTestApt project ( ' : realm - annotations - processor ' ) 
 } 
 @ @ - 149 , 6 + 162 , 24 @ @ task checkstyle ( type : Checkstyle ) { 
 classpath = files ( ) 
 } 
 
 + / / Configuration options can be found here : 
 + / / http : / / developer . android . com / reference / android / support / test / runner / AndroidJUnitRunner . html 
 + task connectedBenchmarks ( type : GradleBuild ) { 
 + description = ' Run all benchmarks on connected devices ' 
 + group = ' Verification ' 
 + buildFile = file ( " $ { projectDir } / build . gradle " ) 
 + startParameter . getProjectProperties ( ) . put ( ' android . testInstrumentationRunnerArguments . package ' , ' io . realm . benchmarks ' ) 
 + tasks = [ ' connectedCheck ' ] 
 + } 
 + 
 + task connectedUnitTests ( type : GradleBuild ) { 
 + description = ' Run all unit tests on connected devices ' 
 + group = ' Verification ' 
 + buildFile = file ( " $ { projectDir } / build . gradle " ) 
 + startParameter . getProjectProperties ( ) . put ( ' android . testInstrumentationRunnerArguments . notPackage ' , ' io . realm . benchmarks ' ) 
 + tasks = [ ' connectedAndroidTest ' ] 
 + } 
 + 
 install { 
 repositories . mavenInstaller { 
 pom { 
 diff - - git a / realm / realm - library / src / androidTest / AndroidManifest . xml b / realm / realm - library / src / androidTest / AndroidManifest . xml 
 index d7fa5a8 . . 357f8f7 100644 
 - - - a / realm / realm - library / src / androidTest / AndroidManifest . xml 
 + + + b / realm / realm - library / src / androidTest / AndroidManifest . xml 
 @ @ - 1 , 16 + 1 , 23 @ @ 
 < ? xml version = " 1 . 0 " encoding = " utf - 8 " ? > 
 - < manifest xmlns : android = " http : / / schemas . android . com / apk / res / android " 
 - package = " io . realm " > 
 + < manifest package = " io . realm " 
 + xmlns : android = " http : / / schemas . android . com / apk / res / android " 
 + xmlns : tools = " http : / / schemas . android . com / tools " > 
 
 - < uses - sdk android : minSdkVersion = " 16 " android : targetSdkVersion = " 22 " / > 
 + < uses - permission android : name = " android . permission . WRITE _ EXTERNAL _ STORAGE " / > 
 + < uses - permission android : name = " android . permission . READ _ EXTERNAL _ STORAGE " / > 
 + 
 + < uses - sdk tools : overrideLibrary = " dk . ilios . spanner " / > 
 + < uses - sdk 
 + android : minSdkVersion = " 16 " 
 + android : targetSdkVersion = " 22 " / > 
 
 < application > 
 - < uses - library android : name = " android . test . runner " / > 
 + < uses - library android : name = " android . test . runner " / > 
 < service 
 android : name = " . services . RemoteProcessService " 
 android : enabled = " true " 
 android : exported = " true " 
 - android : process = " : remote " > 
 + android : process = " : remote " > 
 < / service > 
 < / application > 
 
 diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmBenchmarks . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmBenchmarks . java 
 new file mode 100644 
 index 0000000 . . dd23f1f 
 - - - / dev / null 
 + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmBenchmarks . java 
 @ @ - 0 , 0 + 1 , 82 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . benchmarks ; 
 + 
 + import android . support . test . InstrumentationRegistry ; 
 + 
 + import org . junit . runner . RunWith ; 
 + 
 + import dk . ilios . spanner . AfterExperiment ; 
 + import dk . ilios . spanner . BeforeExperiment ; 
 + import dk . ilios . spanner . Benchmark ; 
 + import dk . ilios . spanner . BenchmarkConfiguration ; 
 + import dk . ilios . spanner . SpannerConfig ; 
 + import dk . ilios . spanner . junit . SpannerRunner ; 
 + import io . realm . Realm ; 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . benchmarks . config . BenchmarkConfig ; 
 + import io . realm . entities . AllTypes ; 
 + 
 + @ RunWith ( SpannerRunner . class ) 
 + public class RealmBenchmarks { 
 + 
 + @ BenchmarkConfiguration 
 + public SpannerConfig configuration = BenchmarkConfig . getConfiguration ( this . getClass ( ) . getCanonicalName ( ) ) ; 
 + 
 + private Realm realm ; 
 + private AllTypes readObject ; 
 + private RealmConfiguration coldConfig ; 
 + 
 + @ BeforeExperiment 
 + public void before ( ) { 
 + coldConfig = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . name ( " cold " ) . build ( ) ; 
 + RealmConfiguration config = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; 
 + Realm . deleteRealm ( coldConfig ) ; 
 + Realm . deleteRealm ( config ) ; 
 + realm = Realm . getInstance ( config ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + readObject = realm . createObject ( AllTypes . class ) ; 
 + readObject . setColumnString ( " Foo " ) ; 
 + readObject . setColumnLong ( 42 ) ; 
 + readObject . setColumnDouble ( 1 . 234D ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ AfterExperiment 
 + public void after ( ) { 
 + realm . close ( ) ; 
 + } 
 + 
 + @ Benchmark 
 + public void coldCreateAndClose ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + Realm realm = Realm . getInstance ( coldConfig ) ; 
 + realm . close ( ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void emptyTransaction ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + realm . beginTransaction ( ) ; 
 + realm . commitTransaction ( ) ; 
 + } 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectReadBenchmarks . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectReadBenchmarks . java 
 new file mode 100644 
 index 0000000 . . e26c003 
 - - - / dev / null 
 + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectReadBenchmarks . java 
 @ @ - 0 , 0 + 1 , 84 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . benchmarks ; 
 + 
 + import android . support . test . InstrumentationRegistry ; 
 + 
 + import org . junit . runner . RunWith ; 
 + 
 + import dk . ilios . spanner . AfterExperiment ; 
 + import dk . ilios . spanner . BeforeExperiment ; 
 + import dk . ilios . spanner . Benchmark ; 
 + import dk . ilios . spanner . BenchmarkConfiguration ; 
 + import dk . ilios . spanner . SpannerConfig ; 
 + import dk . ilios . spanner . junit . SpannerRunner ; 
 + import io . realm . Realm ; 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . benchmarks . config . BenchmarkConfig ; 
 + import io . realm . entities . AllTypes ; 
 + 
 + @ RunWith ( SpannerRunner . class ) 
 + public class RealmObjectReadBenchmarks { 
 + 
 + @ BenchmarkConfiguration 
 + public SpannerConfig configuration = BenchmarkConfig . getConfiguration ( this . getClass ( ) . getCanonicalName ( ) ) ; 
 + 
 + private Realm realm ; 
 + private AllTypes readObject ; 
 + 
 + @ BeforeExperiment 
 + public void before ( ) { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; 
 + Realm . deleteRealm ( config ) ; 
 + realm = Realm . getInstance ( config ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + readObject = realm . createObject ( AllTypes . class ) ; 
 + readObject . setColumnString ( " Foo " ) ; 
 + readObject . setColumnLong ( 42 ) ; 
 + readObject . setColumnDouble ( 1 . 234D ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ AfterExperiment 
 + public void after ( ) { 
 + realm . close ( ) ; 
 + } 
 + 
 + @ Benchmark 
 + public void readString ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + String value = readObject . getColumnString ( ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void readLong ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + long value = readObject . getColumnLong ( ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void readDouble ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + double value = readObject . getColumnDouble ( ) ; 
 + } 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectWriteBenchmarks . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectWriteBenchmarks . java 
 new file mode 100644 
 index 0000000 . . 73df749 
 - - - / dev / null 
 + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmObjectWriteBenchmarks . java 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . benchmarks ; 
 + 
 + import android . support . test . InstrumentationRegistry ; 
 + 
 + import org . junit . runner . RunWith ; 
 + 
 + import dk . ilios . spanner . AfterExperiment ; 
 + import dk . ilios . spanner . BeforeExperiment ; 
 + import dk . ilios . spanner . Benchmark ; 
 + import dk . ilios . spanner . BenchmarkConfiguration ; 
 + import dk . ilios . spanner . SpannerConfig ; 
 + import dk . ilios . spanner . junit . SpannerRunner ; 
 + import io . realm . Realm ; 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . benchmarks . config . BenchmarkConfig ; 
 + import io . realm . entities . AllTypes ; 
 + 
 + @ RunWith ( SpannerRunner . class ) 
 + public class RealmObjectWriteBenchmarks { 
 + 
 + @ BenchmarkConfiguration 
 + public SpannerConfig configuration = BenchmarkConfig . getConfiguration ( this . getClass ( ) . getCanonicalName ( ) ) ; 
 + 
 + private Realm realm ; 
 + private AllTypes writeObject ; 
 + 
 + @ BeforeExperiment 
 + public void before ( ) { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; 
 + Realm . deleteRealm ( config ) ; 
 + realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + writeObject = realm . createObject ( AllTypes . class ) ; 
 + } 
 + 
 + @ AfterExperiment 
 + public void after ( ) { 
 + realm . cancelTransaction ( ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + @ Benchmark 
 + public void writeString ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + writeObject . setColumnString ( " Foo " ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void writeLong ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + writeObject . setColumnLong ( 42 ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void writeDouble ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + writeObject . setColumnDouble ( 1 . 234D ) ; 
 + } 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmQueryBenchmarks . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmQueryBenchmarks . java 
 new file mode 100644 
 index 0000000 . . 9117d55 
 - - - / dev / null 
 + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmQueryBenchmarks . java 
 @ @ - 0 , 0 + 1 , 94 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . benchmarks ; 
 + 
 + import android . support . test . InstrumentationRegistry ; 
 + 
 + import org . junit . runner . RunWith ; 
 + 
 + import dk . ilios . spanner . AfterExperiment ; 
 + import dk . ilios . spanner . BeforeExperiment ; 
 + import dk . ilios . spanner . Benchmark ; 
 + import dk . ilios . spanner . BenchmarkConfiguration ; 
 + import dk . ilios . spanner . SpannerConfig ; 
 + import dk . ilios . spanner . junit . SpannerRunner ; 
 + import io . realm . Realm ; 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . RealmResults ; 
 + import io . realm . Sort ; 
 + import io . realm . benchmarks . config . BenchmarkConfig ; 
 + import io . realm . entities . AllTypes ; 
 + 
 + @ RunWith ( SpannerRunner . class ) 
 + public class RealmQueryBenchmarks { 
 + 
 + private static final int DATA _ SIZE = 1000 ; 
 + 
 + @ BenchmarkConfiguration 
 + public SpannerConfig configuration = BenchmarkConfig . getConfiguration ( this . getClass ( ) . getCanonicalName ( ) ) ; 
 + 
 + private Realm realm ; 
 + 
 + @ BeforeExperiment 
 + public void before ( ) { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; 
 + Realm . deleteRealm ( config ) ; 
 + realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + for ( int i = 0 ; i < DATA _ SIZE ; i + + ) { 
 + AllTypes obj = realm . createObject ( AllTypes . class ) ; 
 + obj . setColumnLong ( i ) ; 
 + obj . setColumnBoolean ( i % 2 = = 0 ) ; 
 + obj . setColumnString ( " Foo " + i ) ; 
 + obj . setColumnDouble ( i + 1 . 234D ) ; 
 + } 
 + realm . commitTransaction ( ) ; 
 + } 
 + 
 + @ AfterExperiment 
 + public void after ( ) { 
 + realm . close ( ) ; 
 + } 
 + 
 + @ Benchmark 
 + public void containsQuery ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + RealmResults < AllTypes > realmResults = realm . where ( AllTypes . class ) . contains ( AllTypes . FIELD _ STRING , " Foo 1 " ) . findAll ( ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void count ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + long size = realm . where ( AllTypes . class ) . count ( ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void findAll ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAll ( ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void findAllSortedOneField ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + RealmResults < AllTypes > results = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ STRING , Sort . ASCENDING ) ; 
 + } 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmResultsBenchmarks . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmResultsBenchmarks . java 
 new file mode 100644 
 index 0000000 . . 88010f9 
 - - - / dev / null 
 + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / RealmResultsBenchmarks . java 
 @ @ - 0 , 0 + 1 , 109 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . benchmarks ; 
 + 
 + import android . support . test . InstrumentationRegistry ; 
 + 
 + import org . junit . runner . RunWith ; 
 + 
 + import dk . ilios . spanner . AfterExperiment ; 
 + import dk . ilios . spanner . BeforeExperiment ; 
 + import dk . ilios . spanner . Benchmark ; 
 + import dk . ilios . spanner . BenchmarkConfiguration ; 
 + import dk . ilios . spanner . SpannerConfig ; 
 + import dk . ilios . spanner . junit . SpannerRunner ; 
 + import io . realm . Realm ; 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . RealmResults ; 
 + import io . realm . benchmarks . config . BenchmarkConfig ; 
 + import io . realm . entities . AllTypes ; 
 + 
 + @ RunWith ( SpannerRunner . class ) 
 + public class RealmResultsBenchmarks { 
 + 
 + private static final int DATA _ SIZE = 1000 ; 
 + 
 + @ BenchmarkConfiguration 
 + public SpannerConfig configuration = BenchmarkConfig . getConfiguration ( this . getClass ( ) . getCanonicalName ( ) ) ; 
 + 
 + private Realm realm ; 
 + private RealmResults < AllTypes > results ; 
 + 
 + @ BeforeExperiment 
 + public void before ( ) { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( InstrumentationRegistry . getTargetContext ( ) ) . build ( ) ; 
 + Realm . deleteRealm ( config ) ; 
 + realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + for ( int i = 0 ; i < DATA _ SIZE ; i + + ) { 
 + AllTypes obj = realm . createObject ( AllTypes . class ) ; 
 + obj . setColumnLong ( i ) ; 
 + obj . setColumnBoolean ( i % 2 = = 0 ) ; 
 + obj . setColumnString ( " Foo " + i ) ; 
 + obj . setColumnDouble ( i + 1 . 234D ) ; 
 + } 
 + realm . commitTransaction ( ) ; 
 + results = realm . where ( AllTypes . class ) . findAll ( ) ; 
 + } 
 + 
 + @ AfterExperiment 
 + public void after ( ) { 
 + realm . close ( ) ; 
 + } 
 + 
 + @ Benchmark 
 + public void get ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + AllTypes item = results . get ( 0 ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void size ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + long size = results . size ( ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void min ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + Number min = results . min ( AllTypes . FIELD _ LONG ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void max ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + Number max = results . max ( AllTypes . FIELD _ LONG ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void average ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + Number average = results . average ( AllTypes . FIELD _ LONG ) ; 
 + } 
 + } 
 + 
 + @ Benchmark 
 + public void sum ( long reps ) { 
 + for ( long i = 0 ; i < reps ; i + + ) { 
 + Number sum = results . sum ( AllTypes . FIELD _ LONG ) ; 
 + } 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / BenchmarkConfig . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / BenchmarkConfig . java 
 new file mode 100644 
 index 0000000 . . 47a1136 
 - - - / dev / null 
 + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / BenchmarkConfig . java 
 @ @ - 0 , 0 + 1 , 76 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . benchmarks . config ; 
 + 
 + import android . os . Environment ; 
 + 
 + import java . io . File ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import dk . ilios . spanner . SpannerConfig ; 
 + import dk . ilios . spanner . config . RuntimeInstrumentConfig ; 
 + import dk . ilios . spanner . output . ResultProcessor ; 
 + 
 + / * * 
 + * Static helper class for creating benchmark configurations 
 + * * / 
 + public class BenchmarkConfig { 
 + 
 + public static SpannerConfig getConfiguration ( String className ) { 
 + / / Document folder is located at : / sdcard / realm - benchmarks 
 + / / Benchmarks results should be saved in < documentFolder > / results / < className > . json 
 + / / Baseline data should be found in < documentFolder > / baselines / < className > . json 
 + / / Custom CSV files should be found in < documentFolder > / csv / < className > . csv 
 + File externalDocuments = new File ( Environment . getExternalStorageDirectory ( ) , " realm - benchmarks " ) ; 
 + if ( ! externalDocuments . exists ( ) & & ! externalDocuments . mkdir ( ) ) { 
 + throw new RuntimeException ( " Could not create benchmark folder : " + externalDocuments ) ; 
 + } 
 + File resultsDir = new File ( externalDocuments , " results " ) ; 
 + File baselineDir = new File ( externalDocuments , " baselines " ) ; 
 + File baselineFile = new File ( baselineDir , className + " . json " ) ; 
 + File csvDir = new File ( externalDocuments , " csv " ) ; 
 + csvDir . mkdir ( ) ; 
 + File csvFile = new File ( csvDir , className + " . csv " ) ; 
 + ResultProcessor csvResultProcessor = new CSVResultProcessor ( csvFile ) ; 
 + 
 + / / General configuration for running benchmarks . 
 + / / Always save result files . CI will determine if it wants to store them . 
 + SpannerConfig . Builder builder = new SpannerConfig . Builder ( ) 
 + . saveResults ( resultsDir , className + " . json " ) 
 + . trialsPrExperiment ( 1 ) 
 + . maxBenchmarkThreads ( 1 ) 
 + . addInstrument ( new RuntimeInstrumentConfig . Builder ( ) 
 + . gcBeforeEachMeasurement ( true ) 
 + . warmupTime ( 0 , TimeUnit . SECONDS ) 
 + . timingInterval ( 500 , TimeUnit . MILLISECONDS ) 
 + . measurements ( 9 ) 
 + . build ( ) 
 + ) 
 + . addResultProcessor ( csvResultProcessor ) ; 
 + 
 + / / Only use baseline file if it exists 
 + if ( baselineFile . exists ( ) ) { 
 + builder . useBaseline ( baselineFile ) ; 
 + / / Test that 25 . , 50 . and 75 . percentile don ' t change by more than 15 % 
 + builder . percentileFailureLimit ( 25f , 0 . 15f ) ; 
 + builder . percentileFailureLimit ( 50f , 0 . 15f ) ; 
 + builder . percentileFailureLimit ( 75f , 0 . 15f ) ; 
 + } 
 + 
 + return builder . build ( ) ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / CSVResultProcessor . java b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / CSVResultProcessor . java 
 new file mode 100644 
 index 0000000 . . 9a11c14 
 - - - / dev / null 
 + + + b / realm / realm - library / src / benchmarks / java / io / realm / benchmarks / config / CSVResultProcessor . java 
 @ @ - 0 , 0 + 1 , 106 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . benchmarks . config ; 
 + 
 + import com . google . common . io . Files ; 
 + import com . opencsv . CSVWriter ; 
 + 
 + import java . io . File ; 
 + import java . io . FileWriter ; 
 + import java . io . IOException ; 
 + import java . text . DecimalFormat ; 
 + 
 + import dk . ilios . spanner . model . Trial ; 
 + import dk . ilios . spanner . output . ResultProcessor ; 
 + 
 + / * * 
 + * Converts the result of a benchmark to CSV for easier processing by other data / graph programs . 
 + * 
 + * Output is the following . 
 + * methodname , trialNumber , params , measurements , min , max , average , 25pct , 50pct , 75pct 
 + * / 
 + public class CSVResultProcessor implements ResultProcessor { 
 + 
 + private static final boolean APPLY _ QUOTES = true ; 
 + private static final DecimalFormat decimalFormater = new DecimalFormat ( " # . 00 " ) ; 
 + 
 + private final File resultFile ; 
 + private final File workFile ; 
 + private final CSVWriter writer ; 
 + 
 + public CSVResultProcessor ( File resultFile ) { 
 + this . resultFile = resultFile ; 
 + this . workFile = new File ( resultFile . getPath ( ) + " . tmp " ) ; 
 + try { 
 + writer = new CSVWriter ( new FileWriter ( resultFile ) ) ; 
 + addLabels ( ) ; 
 + } catch ( IOException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private void addLabels ( ) { 
 + String [ ] labels = new String [ ] { 
 + " Method name " , 
 + " Trial " , 
 + " Measurements " , 
 + " Min . " , 
 + " Max . " , 
 + " Mean " , 
 + " 25pct . " , 
 + " 50pct . " , 
 + " 75pct . " , 
 + } ; 
 + 
 + writer . writeNext ( labels , APPLY _ QUOTES ) ; 
 + } 
 + 
 + @ Override 
 + public void processTrial ( Trial trial ) { 
 + String methodName = trial . experiment ( ) . instrumentation ( ) . benchmarkMethod ( ) . getName ( ) ; 
 + int trialNo = trial . getTrialNumber ( ) ; 
 + int measurements = trial . measurements ( ) . size ( ) ; 
 + double min = trial . getMin ( ) ; 
 + double max = trial . getMax ( ) ; 
 + double mean = trial . getMean ( ) ; 
 + double percentile25 = trial . getPercentile ( 25 ) ; 
 + double percentile50 = trial . getMedian ( ) ; 
 + double percentile75 = trial . getPercentile ( 75 ) ; 
 + 
 + String [ ] resultLine = new String [ ] { 
 + methodName , 
 + Integer . toString ( trialNo ) , 
 + Integer . toString ( measurements ) , 
 + decimalFormater . format ( min ) , 
 + decimalFormater . format ( max ) , 
 + decimalFormater . format ( mean ) , 
 + decimalFormater . format ( percentile25 ) , 
 + decimalFormater . format ( percentile50 ) , 
 + decimalFormater . format ( percentile75 ) 
 + } ; 
 + 
 + writer . writeNext ( resultLine ) ; 
 + } 
 + 
 + @ Override 
 + public void close ( ) throws IOException { 
 + writer . close ( ) ; 
 + if ( workFile . exists ( ) ) { 
 + Files . move ( workFile , resultFile ) ; 
 + } 
 + } 
 + }
