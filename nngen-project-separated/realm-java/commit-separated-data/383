BLEU SCORE: 0.021504238591261653

TEST MSG: Fix default values crashing if calling another constructor
GENERATED MSG: Add a check whether transformer was applied or not .

TEST DIFF (one line): diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> index 4850279 . . d64572e 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> @ @ - 85 , 11 + 85 , 12 @ @ class BytecodeModifier { <nl> clazz . addInterface ( proxyInterface ) <nl> } <nl> <nl> - public static void callInjectObjectContextFromDefaultConstructor ( CtClass clazz ) { <nl> - def defaultConstructor = clazz . getDeclaredConstructor ( ) <nl> - defaultConstructor . insertBeforeBody ( ' if ( $ 0 instanceof io . realm . internal . RealmObjectProxy ) { ' + <nl> - ' ( ( io . realm . internal . RealmObjectProxy ) $ 0 ) . realm $ injectObjectContext ( ) ; ' + <nl> - ' } ' ) <nl> + public static void callInjectObjectContextFromConstructors ( CtClass clazz ) { <nl> + clazz . getConstructors ( ) . each { <nl> + it . insertBeforeBody ( ' if ( $ 0 instanceof io . realm . internal . RealmObjectProxy ) { ' + <nl> + ' ( ( io . realm . internal . RealmObjectProxy ) $ 0 ) . realm $ injectObjectContext ( ) ; ' + <nl> + ' } ' ) <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> index 6755543 . . d7ca24a 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> @ @ - 26 , 7 + 26 , 6 @ @ import io . realm . annotations . Ignore <nl> import io . realm . annotations . RealmClass <nl> import javassist . ClassPool <nl> import javassist . CtClass <nl> - import javassist . LoaderClassPath <nl> import org . gradle . api . Project <nl> import org . slf4j . Logger <nl> import org . slf4j . LoggerFactory <nl> @ @ - 131 , 7 + 130 , 7 @ @ class RealmTransformer extends Transform { <nl> inputModelClasses . each { <nl> BytecodeModifier . addRealmAccessors ( it ) <nl> BytecodeModifier . addRealmProxyInterface ( it , classPool ) <nl> - BytecodeModifier . callInjectObjectContextFromDefaultConstructor ( it ) <nl> + BytecodeModifier . callInjectObjectContextFromConstructors ( it ) <nl> } <nl> <nl> / / Use accessors instead of direct field access <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 294b78a . . 6aa0cf7 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 480 , 6 + 480 , 9 @ @ public class RealmProxyClassGenerator { <nl> EnumSet . of ( Modifier . PUBLIC ) / / Modifiers <nl> ) ; / / Argument type & argument name <nl> <nl> + writer . beginControlFlow ( " if ( this . proxyState ! = null ) " ) ; <nl> + writer . emitStatement ( " return " ) ; <nl> + writer . endControlFlow ( ) ; <nl> writer . emitStatement ( " final BaseRealm . RealmObjectContext context = BaseRealm . objectContext . get ( ) " ) ; <nl> writer . emitStatement ( " this . columnInfo = ( % 1 $ s ) context . getColumnInfo ( ) " , columnInfoClassName ( ) ) ; <nl> writer . emitStatement ( " this . proxyState = new ProxyState < % 1 $ s > ( this ) " , qualifiedClassName ) ; <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> index dba539a . . 7666014 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> @ @ - 114 , 6 + 114 , 9 @ @ public class AllTypesRealmProxy extends some . test . AllTypes <nl> <nl> @ Override <nl> public void realm $ injectObjectContext ( ) { <nl> + if ( this . proxyState ! = null ) { <nl> + return ; <nl> + } <nl> final BaseRealm . RealmObjectContext context = BaseRealm . objectContext . get ( ) ; <nl> this . columnInfo = ( AllTypesColumnInfo ) context . getColumnInfo ( ) ; <nl> this . proxyState = new ProxyState < some . test . AllTypes > ( this ) ; <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> index 2b6e7c0 . . 8906eb9 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> @ @ - 88 , 6 + 88 , 9 @ @ public class BooleansRealmProxy extends some . test . Booleans <nl> <nl> @ Override <nl> public void realm $ injectObjectContext ( ) { <nl> + if ( this . proxyState ! = null ) { <nl> + return ; <nl> + } <nl> final BaseRealm . RealmObjectContext context = BaseRealm . objectContext . get ( ) ; <nl> this . columnInfo = ( BooleansColumnInfo ) context . getColumnInfo ( ) ; <nl> this . proxyState = new ProxyState < some . test . Booleans > ( this ) ; <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java <nl> index 7e7c40a . . a541004 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java <nl> @ @ - 173 , 6 + 173 , 9 @ @ public class NullTypesRealmProxy extends some . test . NullTypes <nl> <nl> @ Override <nl> public void realm $ injectObjectContext ( ) { <nl> + if ( this . proxyState ! = null ) { <nl> + return ; <nl> + } <nl> final BaseRealm . RealmObjectContext context = BaseRealm . objectContext . get ( ) ; <nl> this . columnInfo = ( NullTypesColumnInfo ) context . getColumnInfo ( ) ; <nl> this . proxyState = new ProxyState < some . test . NullTypes > ( this ) ; <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> index b26a76d . . 694515e 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> @ @ - 78 , 6 + 78 , 9 @ @ public class SimpleRealmProxy extends some . test . Simple <nl> <nl> @ Override <nl> public void realm $ injectObjectContext ( ) { <nl> + if ( this . proxyState ! = null ) { <nl> + return ; <nl> + } <nl> final BaseRealm . RealmObjectContext context = BaseRealm . objectContext . get ( ) ; <nl> this . columnInfo = ( SimpleColumnInfo ) context . getColumnInfo ( ) ; <nl> this . proxyState = new ProxyState < some . test . Simple > ( this ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index 40320d9 . . 37aaa12 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 67 , 6 + 67 , 7 @ @ import io . realm . entities . Cat ; <nl> import io . realm . entities . CyclicType ; <nl> import io . realm . entities . CyclicTypePrimaryKey ; <nl> import io . realm . entities . DefaultValueConstructor ; <nl> + import io . realm . entities . DefaultValueFromOtherConstructor ; <nl> import io . realm . entities . DefaultValueOfField ; <nl> import io . realm . entities . DefaultValueOverwriteNullLink ; <nl> import io . realm . entities . DefaultValueSetter ; <nl> @ @ - 2426 , 6 + 2427 , 15 @ @ public class RealmTests { <nl> } <nl> <nl> @ Test <nl> + public void createObject _ defaultValueFromOtherConstructor ( ) { <nl> + realm . beginTransaction ( ) ; <nl> + DefaultValueFromOtherConstructor obj = realm . createObject ( DefaultValueFromOtherConstructor . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + assertEquals ( 42 , obj . getFieldLong ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void copyToRealm _ defaultValuesAreIgnored ( ) { <nl> final String fieldIgnoredValue = DefaultValueOfField . FIELD _ IGNORED _ DEFAULT _ VALUE + " . modified " ; <nl> final String fieldStringValue = DefaultValueOfField . FIELD _ STRING _ DEFAULT _ VALUE + " . modified " ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / entities / DefaultValueFromOtherConstructor . java b / realm / realm - library / src / androidTest / java / io / realm / entities / DefaultValueFromOtherConstructor . java <nl> new file mode 100644 <nl> index 0000000 . . 3ce4078 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / entities / DefaultValueFromOtherConstructor . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . entities ; <nl> + <nl> + import io . realm . RealmObject ; <nl> + <nl> + public class DefaultValueFromOtherConstructor extends RealmObject { <nl> + <nl> + public static final String CLASS _ NAME = " DefaultValueOfField " ; <nl> + public static String FIELD _ LONG = " fieldLong " ; <nl> + <nl> + private long fieldLong ; <nl> + <nl> + public DefaultValueFromOtherConstructor ( ) { <nl> + this ( 42 ) ; <nl> + } <nl> + <nl> + public DefaultValueFromOtherConstructor ( long fieldLong ) { <nl> + this . fieldLong = fieldLong ; <nl> + } <nl> + <nl> + public long getFieldLong ( ) { <nl> + return fieldLong ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> index db7909a . . 5953849 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> @ @ - 117 , 4 + 117 , 19 @ @ class BytecodeModifier { <nl> } <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Adds a method to indicate that Realm transformer has been applied . <nl> + * <nl> + * @ param clazz The CtClass to modify . <nl> + * / <nl> + public static void overrideTransformedMarker ( CtClass clazz ) { <nl> + logger . info " Realm : Marking as transformed $ { clazz . simpleName } " <nl> + try { <nl> + clazz . getDeclaredMethod ( " transformerApplied " , new CtClass [ 0 ] ) <nl> + } catch ( NotFoundException ignored ) { <nl> + clazz . addMethod ( CtNewMethod . make ( Modifier . PUBLIC , CtClass . booleanType , " transformerApplied " , <nl> + new CtClass [ 0 ] , new CtClass [ 0 ] , " { return true ; } " , clazz ) ) <nl> + } <nl> + } <nl> } <nl> diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> index 2ba0216 . . 804523a 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> @ @ - 28 , 6 + 28 , 7 @ @ import org . slf4j . LoggerFactory <nl> <nl> import java . lang . reflect . Modifier <nl> import java . util . jar . JarFile <nl> + import java . util . regex . Pattern <nl> <nl> import static com . android . build . api . transform . QualifiedContent . * <nl> / * * <nl> @ @ - 78 , 6 + 79 , 18 @ @ class RealmTransformer extends Transform { <nl> <nl> logger . info " ClassPool contains Realm classes : $ { classPool . getOrNull ( ' io . realm . RealmList ' ) ! = null } " <nl> <nl> + / / mark as transformed <nl> + def baseProxyMediator = classPool . get ( ' io . realm . internal . RealmProxyMediator ' ) <nl> + def mediatorPattern = Pattern . compile ( ' ^ io \ \ . realm \ \ . [ ^ . ] + Mediator $ ' ) <nl> + def proxyMediatorClasses = classNames <nl> + . findAll { it . matches ( mediatorPattern ) } <nl> + . collect { classPool . getCtClass ( it ) } <nl> + . findAll { it . superclass ? . equals ( baseProxyMediator ) } <nl> + logger . info " Proxy Mediator Classes : $ { proxyMediatorClasses * . name } " <nl> + proxyMediatorClasses . each { <nl> + BytecodeModifier . overrideTransformedMarker ( it ) ; <nl> + } <nl> + <nl> / / Find the model classes <nl> def realmObject = classPool . get ( ' io . realm . RealmObject ' ) <nl> def modelClasses = classNames <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java b / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java <nl> index 8cf5a09 . . 5bc28ca 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java <nl> @ @ - 82 , 4 + 82 , 9 @ @ public class MediatorTest extends AndroidTestCase { <nl> assertFalse ( mediator . getModelClasses ( ) . contains ( Dog . class ) ) ; <nl> assertFalse ( mediator . getModelClasses ( ) . contains ( AllTypes . class ) ) ; <nl> } <nl> + <nl> + public void testDefaultMediatorWasTransformed ( ) { <nl> + final DefaultRealmModuleMediator defaultMediator = new DefaultRealmModuleMediator ( ) ; <nl> + assertTrue ( defaultMediator . transformerApplied ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 38f4672 . . 03e237a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 65 , 7 + 65 , 13 @ @ public class RealmConfiguration { <nl> static { <nl> DEFAULT _ MODULE = Realm . getDefaultModule ( ) ; <nl> if ( DEFAULT _ MODULE ! = null ) { <nl> - DEFAULT _ MODULE _ MEDIATOR = getModuleMediator ( DEFAULT _ MODULE . getClass ( ) . getCanonicalName ( ) ) ; <nl> + final RealmProxyMediator mediator = getModuleMediator ( DEFAULT _ MODULE . getClass ( ) . getCanonicalName ( ) ) ; <nl> + if ( ! mediator . transformerApplied ( ) ) { <nl> + throw new ExceptionInInitializerError ( " RealmTransformer doesn ' t seem to be applied . " + <nl> + " Please update the project configuration to use the Realm Gradle plugin . " + <nl> + " See https : / / realm . io / news / android - installation - change / " ) ; <nl> + } <nl> + DEFAULT _ MODULE _ MEDIATOR = mediator ; <nl> } else { <nl> DEFAULT _ MODULE _ MEDIATOR = null ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java b / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java <nl> index 893ceef . . 636d45e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java <nl> @ @ - 138 , 6 + 138 , 17 @ @ public abstract class RealmProxyMediator { <nl> * / <nl> public abstract < E extends RealmObject > E createDetachedCopy ( E realmObject , int maxDepth , Map < RealmObject , RealmObjectProxy . CacheData < RealmObject > > cache ) ; <nl> <nl> + / * * <nl> + * Returns whether Realm transformer has been applied or not . Subclasses of this class are <nl> + * created by the annotation processor and the Realm transformer will add an override of <nl> + * this method that always return { @ code true } if the transform was successful . <nl> + * <nl> + * @ return { @ code true } if Realm transformer was applied , { @ code false } otherwise . <nl> + * / <nl> + public boolean transformerApplied ( ) { <nl> + return false ; <nl> + } <nl> + <nl> @ Override <nl> public boolean equals ( Object o ) { <nl> if ( ! ( o instanceof RealmProxyMediator ) ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java b / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java <nl> index c5e7284 . . 1c66547 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java <nl> @ @ - 115 , 6 + 115 , 16 @ @ public class CompositeMediator extends RealmProxyMediator { <nl> return mediator . createDetachedCopy ( realmObject , maxDepth , cache ) ; <nl> } <nl> <nl> + @ Override <nl> + public boolean transformerApplied ( ) { <nl> + for ( Map . Entry < Class < ? extends RealmObject > , RealmProxyMediator > entry : mediators . entrySet ( ) ) { <nl> + if ( ! entry . getValue ( ) . transformerApplied ( ) ) { <nl> + return false ; <nl> + } <nl> + } <nl> + return true ; <nl> + } <nl> + <nl> / / Returns the mediator for a given model class ( not RealmProxy ) or throws exception <nl> private RealmProxyMediator getMediator ( Class < ? extends RealmObject > clazz ) { <nl> RealmProxyMediator mediator = mediators . get ( clazz ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java b / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java <nl> index 369b1c3 . . c200323 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java <nl> @ @ - 131 , 6 + 131 , 15 @ @ public class FilterableMediator extends RealmProxyMediator { <nl> return originalMediator . createDetachedCopy ( realmObject , maxDepth , cache ) ; <nl> } <nl> <nl> + @ Override <nl> + public boolean transformerApplied ( ) { <nl> + / / noinspection SimplifiableIfStatement <nl> + if ( originalMediator = = null ) { <nl> + return true ; <nl> + } <nl> + return originalMediator . transformerApplied ( ) ; <nl> + } <nl> + <nl> / / Validate if a model class ( not RealmProxy ) is part of this Schema . <nl> private void checkSchemaHasClass ( Class < ? extends RealmObject > clazz ) { <nl> if ( ! allowedClasses . contains ( clazz ) ) {

TEST DIFF:
diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 index 4850279 . . d64572e 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 @ @ - 85 , 11 + 85 , 12 @ @ class BytecodeModifier { 
 clazz . addInterface ( proxyInterface ) 
 } 
 
 - public static void callInjectObjectContextFromDefaultConstructor ( CtClass clazz ) { 
 - def defaultConstructor = clazz . getDeclaredConstructor ( ) 
 - defaultConstructor . insertBeforeBody ( ' if ( $ 0 instanceof io . realm . internal . RealmObjectProxy ) { ' + 
 - ' ( ( io . realm . internal . RealmObjectProxy ) $ 0 ) . realm $ injectObjectContext ( ) ; ' + 
 - ' } ' ) 
 + public static void callInjectObjectContextFromConstructors ( CtClass clazz ) { 
 + clazz . getConstructors ( ) . each { 
 + it . insertBeforeBody ( ' if ( $ 0 instanceof io . realm . internal . RealmObjectProxy ) { ' + 
 + ' ( ( io . realm . internal . RealmObjectProxy ) $ 0 ) . realm $ injectObjectContext ( ) ; ' + 
 + ' } ' ) 
 + } 
 } 
 
 / * * 
 diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 index 6755543 . . d7ca24a 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 @ @ - 26 , 7 + 26 , 6 @ @ import io . realm . annotations . Ignore 
 import io . realm . annotations . RealmClass 
 import javassist . ClassPool 
 import javassist . CtClass 
 - import javassist . LoaderClassPath 
 import org . gradle . api . Project 
 import org . slf4j . Logger 
 import org . slf4j . LoggerFactory 
 @ @ - 131 , 7 + 130 , 7 @ @ class RealmTransformer extends Transform { 
 inputModelClasses . each { 
 BytecodeModifier . addRealmAccessors ( it ) 
 BytecodeModifier . addRealmProxyInterface ( it , classPool ) 
 - BytecodeModifier . callInjectObjectContextFromDefaultConstructor ( it ) 
 + BytecodeModifier . callInjectObjectContextFromConstructors ( it ) 
 } 
 
 / / Use accessors instead of direct field access 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 294b78a . . 6aa0cf7 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 480 , 6 + 480 , 9 @ @ public class RealmProxyClassGenerator { 
 EnumSet . of ( Modifier . PUBLIC ) / / Modifiers 
 ) ; / / Argument type & argument name 
 
 + writer . beginControlFlow ( " if ( this . proxyState ! = null ) " ) ; 
 + writer . emitStatement ( " return " ) ; 
 + writer . endControlFlow ( ) ; 
 writer . emitStatement ( " final BaseRealm . RealmObjectContext context = BaseRealm . objectContext . get ( ) " ) ; 
 writer . emitStatement ( " this . columnInfo = ( % 1 $ s ) context . getColumnInfo ( ) " , columnInfoClassName ( ) ) ; 
 writer . emitStatement ( " this . proxyState = new ProxyState < % 1 $ s > ( this ) " , qualifiedClassName ) ; 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 index dba539a . . 7666014 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 @ @ - 114 , 6 + 114 , 9 @ @ public class AllTypesRealmProxy extends some . test . AllTypes 
 
 @ Override 
 public void realm $ injectObjectContext ( ) { 
 + if ( this . proxyState ! = null ) { 
 + return ; 
 + } 
 final BaseRealm . RealmObjectContext context = BaseRealm . objectContext . get ( ) ; 
 this . columnInfo = ( AllTypesColumnInfo ) context . getColumnInfo ( ) ; 
 this . proxyState = new ProxyState < some . test . AllTypes > ( this ) ; 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 index 2b6e7c0 . . 8906eb9 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 @ @ - 88 , 6 + 88 , 9 @ @ public class BooleansRealmProxy extends some . test . Booleans 
 
 @ Override 
 public void realm $ injectObjectContext ( ) { 
 + if ( this . proxyState ! = null ) { 
 + return ; 
 + } 
 final BaseRealm . RealmObjectContext context = BaseRealm . objectContext . get ( ) ; 
 this . columnInfo = ( BooleansColumnInfo ) context . getColumnInfo ( ) ; 
 this . proxyState = new ProxyState < some . test . Booleans > ( this ) ; 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java 
 index 7e7c40a . . a541004 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java 
 @ @ - 173 , 6 + 173 , 9 @ @ public class NullTypesRealmProxy extends some . test . NullTypes 
 
 @ Override 
 public void realm $ injectObjectContext ( ) { 
 + if ( this . proxyState ! = null ) { 
 + return ; 
 + } 
 final BaseRealm . RealmObjectContext context = BaseRealm . objectContext . get ( ) ; 
 this . columnInfo = ( NullTypesColumnInfo ) context . getColumnInfo ( ) ; 
 this . proxyState = new ProxyState < some . test . NullTypes > ( this ) ; 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 index b26a76d . . 694515e 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 @ @ - 78 , 6 + 78 , 9 @ @ public class SimpleRealmProxy extends some . test . Simple 
 
 @ Override 
 public void realm $ injectObjectContext ( ) { 
 + if ( this . proxyState ! = null ) { 
 + return ; 
 + } 
 final BaseRealm . RealmObjectContext context = BaseRealm . objectContext . get ( ) ; 
 this . columnInfo = ( SimpleColumnInfo ) context . getColumnInfo ( ) ; 
 this . proxyState = new ProxyState < some . test . Simple > ( this ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index 40320d9 . . 37aaa12 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 67 , 6 + 67 , 7 @ @ import io . realm . entities . Cat ; 
 import io . realm . entities . CyclicType ; 
 import io . realm . entities . CyclicTypePrimaryKey ; 
 import io . realm . entities . DefaultValueConstructor ; 
 + import io . realm . entities . DefaultValueFromOtherConstructor ; 
 import io . realm . entities . DefaultValueOfField ; 
 import io . realm . entities . DefaultValueOverwriteNullLink ; 
 import io . realm . entities . DefaultValueSetter ; 
 @ @ - 2426 , 6 + 2427 , 15 @ @ public class RealmTests { 
 } 
 
 @ Test 
 + public void createObject _ defaultValueFromOtherConstructor ( ) { 
 + realm . beginTransaction ( ) ; 
 + DefaultValueFromOtherConstructor obj = realm . createObject ( DefaultValueFromOtherConstructor . class ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + assertEquals ( 42 , obj . getFieldLong ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void copyToRealm _ defaultValuesAreIgnored ( ) { 
 final String fieldIgnoredValue = DefaultValueOfField . FIELD _ IGNORED _ DEFAULT _ VALUE + " . modified " ; 
 final String fieldStringValue = DefaultValueOfField . FIELD _ STRING _ DEFAULT _ VALUE + " . modified " ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / entities / DefaultValueFromOtherConstructor . java b / realm / realm - library / src / androidTest / java / io / realm / entities / DefaultValueFromOtherConstructor . java 
 new file mode 100644 
 index 0000000 . . 3ce4078 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / entities / DefaultValueFromOtherConstructor . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . entities ; 
 + 
 + import io . realm . RealmObject ; 
 + 
 + public class DefaultValueFromOtherConstructor extends RealmObject { 
 + 
 + public static final String CLASS _ NAME = " DefaultValueOfField " ; 
 + public static String FIELD _ LONG = " fieldLong " ; 
 + 
 + private long fieldLong ; 
 + 
 + public DefaultValueFromOtherConstructor ( ) { 
 + this ( 42 ) ; 
 + } 
 + 
 + public DefaultValueFromOtherConstructor ( long fieldLong ) { 
 + this . fieldLong = fieldLong ; 
 + } 
 + 
 + public long getFieldLong ( ) { 
 + return fieldLong ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 index db7909a . . 5953849 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 @ @ - 117 , 4 + 117 , 19 @ @ class BytecodeModifier { 
 } 
 } 
 } 
 + 
 + / * * 
 + * Adds a method to indicate that Realm transformer has been applied . 
 + * 
 + * @ param clazz The CtClass to modify . 
 + * / 
 + public static void overrideTransformedMarker ( CtClass clazz ) { 
 + logger . info " Realm : Marking as transformed $ { clazz . simpleName } " 
 + try { 
 + clazz . getDeclaredMethod ( " transformerApplied " , new CtClass [ 0 ] ) 
 + } catch ( NotFoundException ignored ) { 
 + clazz . addMethod ( CtNewMethod . make ( Modifier . PUBLIC , CtClass . booleanType , " transformerApplied " , 
 + new CtClass [ 0 ] , new CtClass [ 0 ] , " { return true ; } " , clazz ) ) 
 + } 
 + } 
 } 
 diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 index 2ba0216 . . 804523a 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 @ @ - 28 , 6 + 28 , 7 @ @ import org . slf4j . LoggerFactory 
 
 import java . lang . reflect . Modifier 
 import java . util . jar . JarFile 
 + import java . util . regex . Pattern 
 
 import static com . android . build . api . transform . QualifiedContent . * 
 / * * 
 @ @ - 78 , 6 + 79 , 18 @ @ class RealmTransformer extends Transform { 
 
 logger . info " ClassPool contains Realm classes : $ { classPool . getOrNull ( ' io . realm . RealmList ' ) ! = null } " 
 
 + / / mark as transformed 
 + def baseProxyMediator = classPool . get ( ' io . realm . internal . RealmProxyMediator ' ) 
 + def mediatorPattern = Pattern . compile ( ' ^ io \ \ . realm \ \ . [ ^ . ] + Mediator $ ' ) 
 + def proxyMediatorClasses = classNames 
 + . findAll { it . matches ( mediatorPattern ) } 
 + . collect { classPool . getCtClass ( it ) } 
 + . findAll { it . superclass ? . equals ( baseProxyMediator ) } 
 + logger . info " Proxy Mediator Classes : $ { proxyMediatorClasses * . name } " 
 + proxyMediatorClasses . each { 
 + BytecodeModifier . overrideTransformedMarker ( it ) ; 
 + } 
 + 
 / / Find the model classes 
 def realmObject = classPool . get ( ' io . realm . RealmObject ' ) 
 def modelClasses = classNames 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java b / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java 
 index 8cf5a09 . . 5bc28ca 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java 
 @ @ - 82 , 4 + 82 , 9 @ @ public class MediatorTest extends AndroidTestCase { 
 assertFalse ( mediator . getModelClasses ( ) . contains ( Dog . class ) ) ; 
 assertFalse ( mediator . getModelClasses ( ) . contains ( AllTypes . class ) ) ; 
 } 
 + 
 + public void testDefaultMediatorWasTransformed ( ) { 
 + final DefaultRealmModuleMediator defaultMediator = new DefaultRealmModuleMediator ( ) ; 
 + assertTrue ( defaultMediator . transformerApplied ( ) ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 38f4672 . . 03e237a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 65 , 7 + 65 , 13 @ @ public class RealmConfiguration { 
 static { 
 DEFAULT _ MODULE = Realm . getDefaultModule ( ) ; 
 if ( DEFAULT _ MODULE ! = null ) { 
 - DEFAULT _ MODULE _ MEDIATOR = getModuleMediator ( DEFAULT _ MODULE . getClass ( ) . getCanonicalName ( ) ) ; 
 + final RealmProxyMediator mediator = getModuleMediator ( DEFAULT _ MODULE . getClass ( ) . getCanonicalName ( ) ) ; 
 + if ( ! mediator . transformerApplied ( ) ) { 
 + throw new ExceptionInInitializerError ( " RealmTransformer doesn ' t seem to be applied . " + 
 + " Please update the project configuration to use the Realm Gradle plugin . " + 
 + " See https : / / realm . io / news / android - installation - change / " ) ; 
 + } 
 + DEFAULT _ MODULE _ MEDIATOR = mediator ; 
 } else { 
 DEFAULT _ MODULE _ MEDIATOR = null ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java b / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java 
 index 893ceef . . 636d45e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java 
 @ @ - 138 , 6 + 138 , 17 @ @ public abstract class RealmProxyMediator { 
 * / 
 public abstract < E extends RealmObject > E createDetachedCopy ( E realmObject , int maxDepth , Map < RealmObject , RealmObjectProxy . CacheData < RealmObject > > cache ) ; 
 
 + / * * 
 + * Returns whether Realm transformer has been applied or not . Subclasses of this class are 
 + * created by the annotation processor and the Realm transformer will add an override of 
 + * this method that always return { @ code true } if the transform was successful . 
 + * 
 + * @ return { @ code true } if Realm transformer was applied , { @ code false } otherwise . 
 + * / 
 + public boolean transformerApplied ( ) { 
 + return false ; 
 + } 
 + 
 @ Override 
 public boolean equals ( Object o ) { 
 if ( ! ( o instanceof RealmProxyMediator ) ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java b / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java 
 index c5e7284 . . 1c66547 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java 
 @ @ - 115 , 6 + 115 , 16 @ @ public class CompositeMediator extends RealmProxyMediator { 
 return mediator . createDetachedCopy ( realmObject , maxDepth , cache ) ; 
 } 
 
 + @ Override 
 + public boolean transformerApplied ( ) { 
 + for ( Map . Entry < Class < ? extends RealmObject > , RealmProxyMediator > entry : mediators . entrySet ( ) ) { 
 + if ( ! entry . getValue ( ) . transformerApplied ( ) ) { 
 + return false ; 
 + } 
 + } 
 + return true ; 
 + } 
 + 
 / / Returns the mediator for a given model class ( not RealmProxy ) or throws exception 
 private RealmProxyMediator getMediator ( Class < ? extends RealmObject > clazz ) { 
 RealmProxyMediator mediator = mediators . get ( clazz ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java b / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java 
 index 369b1c3 . . c200323 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java 
 @ @ - 131 , 6 + 131 , 15 @ @ public class FilterableMediator extends RealmProxyMediator { 
 return originalMediator . createDetachedCopy ( realmObject , maxDepth , cache ) ; 
 } 
 
 + @ Override 
 + public boolean transformerApplied ( ) { 
 + / / noinspection SimplifiableIfStatement 
 + if ( originalMediator = = null ) { 
 + return true ; 
 + } 
 + return originalMediator . transformerApplied ( ) ; 
 + } 
 + 
 / / Validate if a model class ( not RealmProxy ) is part of this Schema . 
 private void checkSchemaHasClass ( Class < ? extends RealmObject > clazz ) { 
 if ( ! allowedClasses . contains ( clazz ) ) {
