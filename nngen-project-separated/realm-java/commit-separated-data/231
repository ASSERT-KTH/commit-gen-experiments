BLEU SCORE: 0.2259005009024612

TEST MSG: fix failing tests
GENERATED MSG: Some fixes

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SchemaTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SchemaTests . java <nl> index decb93e . . 4221aca 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SchemaTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SchemaTests . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import io . realm . rule . TestSyncConfigurationFactory ; <nl> import io . realm . util . SyncTestUtils ; <nl> <nl> import static junit . framework . Assert . assertEquals ; <nl> + import static junit . framework . Assert . assertNotNull ; <nl> import static junit . framework . Assert . assertTrue ; <nl> import static junit . framework . TestCase . assertFalse ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 130 , 10 + 131 , 12 @ @ public class SchemaTests { <nl> DynamicRealm realm = DynamicRealm . getInstance ( config ) ; <nl> String className = " StringOnly " ; <nl> String fieldName = " chars " ; <nl> + final RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( className ) ; <nl> + assertNotNull ( objectSchema ) ; <nl> realm . beginTransaction ( ) ; <nl> - assertTrue ( realm . getSchema ( ) . get ( className ) . hasField ( fieldName ) ) ; <nl> + assertTrue ( objectSchema . hasField ( fieldName ) ) ; <nl> try { <nl> - realm . getSchema ( ) . get ( className ) . removeField ( fieldName ) ; <nl> + objectSchema . removeField ( fieldName ) ; <nl> fail ( ) ; <nl> } catch ( IllegalArgumentException ignored ) { <nl> } finally { <nl> @ @ - 149 , 11 + 152 , 13 @ @ public class SchemaTests { <nl> String className = " StringOnly " ; <nl> <nl> DynamicRealm realm = DynamicRealm . getInstance ( config ) ; <nl> + final RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( className ) ; <nl> + assertNotNull ( objectSchema ) ; <nl> realm . beginTransaction ( ) ; <nl> - realm . getSchema ( ) . get ( className ) . addField ( " foo " , String . class ) ; <nl> + objectSchema . addField ( " foo " , String . class ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> - assertTrue ( realm . getSchema ( ) . get ( className ) . hasField ( " foo " ) ) ; <nl> + assertTrue ( objectSchema . hasField ( " foo " ) ) ; <nl> <nl> realm . close ( ) ; <nl> } <nl> @ @ - 161 , 10 + 166 , 11 @ @ public class SchemaTests { <nl> @ Test <nl> public void addPrimaryKey _ notAllowed ( ) { <nl> String className = " StringOnly " ; <nl> - Realm realm = Realm . getInstance ( config ) ; <nl> + DynamicRealm realm = DynamicRealm . getInstance ( config ) ; <nl> <nl> realm . beginTransaction ( ) ; <nl> RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( className ) ; <nl> + assertNotNull ( objectSchema ) ; <nl> objectSchema . addField ( " foo " , String . class ) ; <nl> <nl> try { <nl> @ @ - 180 , 10 + 186 , 11 @ @ public class SchemaTests { <nl> @ Test <nl> public void addField _ withPrimaryKeyModifier _ notAllowed ( ) { <nl> String className = " StringOnly " ; <nl> - Realm realm = Realm . getInstance ( config ) ; <nl> + DynamicRealm realm = DynamicRealm . getInstance ( config ) ; <nl> <nl> realm . beginTransaction ( ) ; <nl> RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( className ) ; <nl> + assertNotNull ( objectSchema ) ; <nl> <nl> try { <nl> objectSchema . addField ( " foo " , String . class , FieldAttribute . PRIMARY _ KEY ) ; <nl> @ @ - 202 , 6 + 209 , 7 @ @ public class SchemaTests { <nl> Realm realm = Realm . getInstance ( config ) ; <nl> <nl> RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( className ) ; <nl> + assertNotNull ( objectSchema ) ; <nl> Set < String > names = objectSchema . getFieldNames ( ) ; <nl> assertEquals ( 1 , names . size ( ) ) ; <nl> assertEquals ( StringOnly . FIELD _ CHARS , names . iterator ( ) . next ( ) ) ;
NEAREST DIFF (one line): diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java <nl> index dd34264 . . 085ded7 100644 <nl> - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java <nl> + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package io . realm . examples . realmmigrationexample ; <nl> <nl> import android . app . Activity ; <nl> - import android . os . AsyncTask ; <nl> import android . os . Bundle ; <nl> import android . util . Log ; <nl> import android . widget . LinearLayout ; <nl> @ @ - 14 , 8 + 13 , 8 @ @ import java . io . InputStream ; <nl> <nl> import io . realm . Realm ; <nl> import io . realm . examples . realmmigrationexample . model . Migration ; <nl> - import io . realm . examples . realmmigrationexample . model . Pet ; <nl> import io . realm . examples . realmmigrationexample . model . Person ; <nl> + import io . realm . exceptions . RealmMigrationNeededException ; <nl> <nl> <nl> public class RealmMigrationExampleActivity extends Activity { <nl> @ @ - 38 , 11 + 37 , 9 @ @ public class RealmMigrationExampleActivity extends Activity { <nl> <nl> try { <nl> / / should throw as migration is required <nl> - Realm realm = Realm . getInstance ( this , " default0 " ) ; <nl> - } <nl> - catch ( Exception ex ) { <nl> - ex . printStackTrace ( ) ; <nl> - / / FIXME - catch the proper exception <nl> + Realm . getInstance ( this , " default0 " ) ; <nl> + } catch ( RealmMigrationNeededException ex ) { <nl> + Log . i ( TAG , " Excellent ! This is expected . " ) ; <nl> } <nl> <nl> Realm . migrateRealmAtPath ( path0 , new Migration ( ) ) ; <nl> @ @ - 76 , 14 + 73 , 11 @ @ public class RealmMigrationExampleActivity extends Activity { <nl> } <nl> <nl> private String realmString ( Realm realm ) { <nl> - String string = " " ; <nl> - for ( Person p : realm . allObjects ( Person . class ) ) { <nl> - string + = " name : " + p . getFullName ( ) + " \ n " ; <nl> - string + = " age : " + p . getAge ( ) + " \ n " ; <nl> - string + = " pets : " + p . getPets ( ) . size ( ) + " \ n " ; <nl> - / / FIXME - print out pet info <nl> + StringBuilder stringBuilder = new StringBuilder ( ) ; <nl> + for ( Person person : realm . allObjects ( Person . class ) ) { <nl> + stringBuilder . append ( person . toString ( ) ) . append ( " \ n " ) ; <nl> } <nl> - return string ; <nl> + return stringBuilder . toString ( ) ; <nl> } <nl> <nl> private void showStatus ( Realm realm ) { <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 58c3d7e . . 18ab3ae 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 23 , 11 + 23 , 10 @ @ import android . os . Message ; <nl> import android . util . Log ; <nl> <nl> import com . google . common . base . Splitter ; <nl> - import com . google . common . collect . Iterables ; <nl> import com . google . common . base . Throwables ; <nl> + import com . google . common . collect . Iterables ; <nl> <nl> import java . io . File ; <nl> - import java . lang . ref . SoftReference ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 56 , 6 + 55 , 12 @ @ public class Realm { <nl> private static final String TAG = " REALM " ; <nl> private static final String TABLE _ PREFIX = " class _ " ; <nl> private static final Set < String > validatedPaths = Collections . synchronizedSet ( new HashSet < String > ( ) ) ; <nl> + private static final ThreadLocal < Map < String , Realm > > realmsCache = new ThreadLocal < Map < String , Realm > > ( ) { <nl> + @ Override <nl> + protected Map < String , Realm > initialValue ( ) { <nl> + return new HashMap < String , Realm > ( ) ; <nl> + } <nl> + } ; <nl> <nl> private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; <nl> private static boolean autoRefresh = true ; <nl> @ @ - 162 , 14 + 167 , 12 @ @ public class Realm { <nl> } <nl> <nl> private static Realm createAndValidate ( String absolutePath , boolean validateSchema ) { <nl> - ThreadRealm threadRealm = new ThreadRealm ( absolutePath ) ; <nl> - SoftReference < Realm > realmSoftReference = threadRealm . get ( ) ; <nl> - Realm realm = realmSoftReference . get ( ) ; <nl> + Map < String , Realm > realms = realmsCache . get ( ) ; <nl> + Realm realm = realms . get ( absolutePath ) ; <nl> if ( realm = = null ) { <nl> - / / The garbage collector decided to get rid of the realm instance <nl> - Realm newRealm = new Realm ( absolutePath ) ; <nl> - threadRealm . set ( new SoftReference < Realm > ( newRealm ) ) ; <nl> - realm = newRealm ; <nl> + realm = new Realm ( absolutePath ) ; <nl> + realms . put ( absolutePath , realm ) ; <nl> + realmsCache . set ( realms ) ; <nl> } <nl> if ( validateSchema ) { <nl> / / FIXME - get rid fo validatedPaths - only validate if we don ' t have a cached realm <nl> @ @ - 197 , 10 + 200 , 11 @ @ public class Realm { <nl> <nl> realm . beginTransaction ( ) ; <nl> long version = realm . getVersion ( ) ; <nl> + realm . commitTransaction ( ) ; <nl> for ( String className : proxyClasses ) { <nl> String modelClassName = Iterables . getLast ( Splitter . on ( " . " ) . split ( className ) ) ; <nl> String generatedClassName = " io . realm . " + modelClassName + " RealmProxy " ; <nl> - Class < ? > generatedClass = null ; <nl> + Class < ? > generatedClass ; <nl> try { <nl> generatedClass = Class . forName ( generatedClassName ) ; <nl> } catch ( ClassNotFoundException e ) { <nl> @ @ - 214 , 14 + 218 , 17 @ @ public class Realm { <nl> throw new RealmException ( " Could not find the initTable method in the generated " + generatedClassName + " class " ) ; <nl> } <nl> try { <nl> + realm . beginTransaction ( ) ; <nl> initTableMethod . invoke ( null , realm . transaction ) ; <nl> } catch ( IllegalAccessException e ) { <nl> throw new RealmException ( " Could not execute the initTable method in the " + generatedClassName + " class " ) ; <nl> } catch ( InvocationTargetException e ) { <nl> throw new RealmException ( " An exception was thrown in the initTable method in the " + generatedClassName + " class " ) ; <nl> + } finally { <nl> + realm . commitTransaction ( ) ; <nl> } <nl> } <nl> - Method validateMethod = null ; <nl> + Method validateMethod ; <nl> try { <nl> validateMethod = generatedClass . getMethod ( " validateTable " , new Class [ ] { ImplicitTransaction . class } ) ; <nl> } catch ( NoSuchMethodException e ) { <nl> @ @ - 236 , 9 + 243 , 11 @ @ public class Realm { <nl> } <nl> } <nl> if ( version = = - 1 ) { <nl> + realm . beginTransaction ( ) ; <nl> realm . setVersion ( 0 ) ; <nl> + realm . commitTransaction ( ) ; <nl> } <nl> - realm . commitTransaction ( ) ; <nl> + <nl> validatedPaths . add ( absolutePath ) ; <nl> } <nl> } <nl> @ @ - 246 , 17 + 255 , 10 @ @ public class Realm { <nl> } <nl> <nl> / / This class stores soft - references to realm objects per thread per realm file <nl> - private static class ThreadRealm extends ThreadLocal < SoftReference < Realm > > { <nl> - private String absolutePath ; <nl> - <nl> - private ThreadRealm ( String absolutePath ) { <nl> - this . absolutePath = absolutePath ; <nl> - } <nl> - <nl> + private static class ThreadRealm extends ThreadLocal < Map < String , Realm > > { <nl> @ Override <nl> - protected SoftReference < Realm > initialValue ( ) { <nl> - Realm realm = new Realm ( absolutePath ) ; <nl> - return new SoftReference < Realm > ( realm ) ; <nl> + protected Map < String , Realm > initialValue ( ) { <nl> + return new HashMap < String , Realm > ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 458 , 7 + 460 , 11 @ @ public class Realm { <nl> Message message = Message . obtain ( ) ; <nl> message . arg1 = LooperThread . REALM _ CHANGED ; <nl> message . arg2 = id ; <nl> - looperThread . handler . sendMessage ( message ) ; <nl> + if ( looperThread . handler ! = null ) { <nl> + looperThread . handler . sendMessage ( message ) ; <nl> + } else { <nl> + Log . i ( TAG , " The LooperThread is not up and running yet . Commit message not sent " ) ; <nl> + } <nl> } <nl> <nl> public void clear ( Class < ? > classSpec ) { <nl> @ @ - 487 , 6 + 493 , 10 @ @ public class Realm { <nl> realm . beginTransaction ( ) ; <nl> realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> realm . commitTransaction ( ) ; <nl> + / / Update the cache <nl> + Map < String , Realm > realms = realmsCache . get ( ) ; <nl> + realms . put ( realmPath , new Realm ( realmPath ) ) ; <nl> + realmsCache . set ( realms ) ; <nl> } <nl> <nl> / * *

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SchemaTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SchemaTests . java 
 index decb93e . . 4221aca 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SchemaTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SchemaTests . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import io . realm . rule . TestSyncConfigurationFactory ; 
 import io . realm . util . SyncTestUtils ; 
 
 import static junit . framework . Assert . assertEquals ; 
 + import static junit . framework . Assert . assertNotNull ; 
 import static junit . framework . Assert . assertTrue ; 
 import static junit . framework . TestCase . assertFalse ; 
 import static org . junit . Assert . fail ; 
 @ @ - 130 , 10 + 131 , 12 @ @ public class SchemaTests { 
 DynamicRealm realm = DynamicRealm . getInstance ( config ) ; 
 String className = " StringOnly " ; 
 String fieldName = " chars " ; 
 + final RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( className ) ; 
 + assertNotNull ( objectSchema ) ; 
 realm . beginTransaction ( ) ; 
 - assertTrue ( realm . getSchema ( ) . get ( className ) . hasField ( fieldName ) ) ; 
 + assertTrue ( objectSchema . hasField ( fieldName ) ) ; 
 try { 
 - realm . getSchema ( ) . get ( className ) . removeField ( fieldName ) ; 
 + objectSchema . removeField ( fieldName ) ; 
 fail ( ) ; 
 } catch ( IllegalArgumentException ignored ) { 
 } finally { 
 @ @ - 149 , 11 + 152 , 13 @ @ public class SchemaTests { 
 String className = " StringOnly " ; 
 
 DynamicRealm realm = DynamicRealm . getInstance ( config ) ; 
 + final RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( className ) ; 
 + assertNotNull ( objectSchema ) ; 
 realm . beginTransaction ( ) ; 
 - realm . getSchema ( ) . get ( className ) . addField ( " foo " , String . class ) ; 
 + objectSchema . addField ( " foo " , String . class ) ; 
 realm . commitTransaction ( ) ; 
 
 - assertTrue ( realm . getSchema ( ) . get ( className ) . hasField ( " foo " ) ) ; 
 + assertTrue ( objectSchema . hasField ( " foo " ) ) ; 
 
 realm . close ( ) ; 
 } 
 @ @ - 161 , 10 + 166 , 11 @ @ public class SchemaTests { 
 @ Test 
 public void addPrimaryKey _ notAllowed ( ) { 
 String className = " StringOnly " ; 
 - Realm realm = Realm . getInstance ( config ) ; 
 + DynamicRealm realm = DynamicRealm . getInstance ( config ) ; 
 
 realm . beginTransaction ( ) ; 
 RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( className ) ; 
 + assertNotNull ( objectSchema ) ; 
 objectSchema . addField ( " foo " , String . class ) ; 
 
 try { 
 @ @ - 180 , 10 + 186 , 11 @ @ public class SchemaTests { 
 @ Test 
 public void addField _ withPrimaryKeyModifier _ notAllowed ( ) { 
 String className = " StringOnly " ; 
 - Realm realm = Realm . getInstance ( config ) ; 
 + DynamicRealm realm = DynamicRealm . getInstance ( config ) ; 
 
 realm . beginTransaction ( ) ; 
 RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( className ) ; 
 + assertNotNull ( objectSchema ) ; 
 
 try { 
 objectSchema . addField ( " foo " , String . class , FieldAttribute . PRIMARY _ KEY ) ; 
 @ @ - 202 , 6 + 209 , 7 @ @ public class SchemaTests { 
 Realm realm = Realm . getInstance ( config ) ; 
 
 RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( className ) ; 
 + assertNotNull ( objectSchema ) ; 
 Set < String > names = objectSchema . getFieldNames ( ) ; 
 assertEquals ( 1 , names . size ( ) ) ; 
 assertEquals ( StringOnly . FIELD _ CHARS , names . iterator ( ) . next ( ) ) ;

NEAREST DIFF:
diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java 
 index dd34264 . . 085ded7 100644 
 - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java 
 + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / RealmMigrationExampleActivity . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package io . realm . examples . realmmigrationexample ; 
 
 import android . app . Activity ; 
 - import android . os . AsyncTask ; 
 import android . os . Bundle ; 
 import android . util . Log ; 
 import android . widget . LinearLayout ; 
 @ @ - 14 , 8 + 13 , 8 @ @ import java . io . InputStream ; 
 
 import io . realm . Realm ; 
 import io . realm . examples . realmmigrationexample . model . Migration ; 
 - import io . realm . examples . realmmigrationexample . model . Pet ; 
 import io . realm . examples . realmmigrationexample . model . Person ; 
 + import io . realm . exceptions . RealmMigrationNeededException ; 
 
 
 public class RealmMigrationExampleActivity extends Activity { 
 @ @ - 38 , 11 + 37 , 9 @ @ public class RealmMigrationExampleActivity extends Activity { 
 
 try { 
 / / should throw as migration is required 
 - Realm realm = Realm . getInstance ( this , " default0 " ) ; 
 - } 
 - catch ( Exception ex ) { 
 - ex . printStackTrace ( ) ; 
 - / / FIXME - catch the proper exception 
 + Realm . getInstance ( this , " default0 " ) ; 
 + } catch ( RealmMigrationNeededException ex ) { 
 + Log . i ( TAG , " Excellent ! This is expected . " ) ; 
 } 
 
 Realm . migrateRealmAtPath ( path0 , new Migration ( ) ) ; 
 @ @ - 76 , 14 + 73 , 11 @ @ public class RealmMigrationExampleActivity extends Activity { 
 } 
 
 private String realmString ( Realm realm ) { 
 - String string = " " ; 
 - for ( Person p : realm . allObjects ( Person . class ) ) { 
 - string + = " name : " + p . getFullName ( ) + " \ n " ; 
 - string + = " age : " + p . getAge ( ) + " \ n " ; 
 - string + = " pets : " + p . getPets ( ) . size ( ) + " \ n " ; 
 - / / FIXME - print out pet info 
 + StringBuilder stringBuilder = new StringBuilder ( ) ; 
 + for ( Person person : realm . allObjects ( Person . class ) ) { 
 + stringBuilder . append ( person . toString ( ) ) . append ( " \ n " ) ; 
 } 
 - return string ; 
 + return stringBuilder . toString ( ) ; 
 } 
 
 private void showStatus ( Realm realm ) { 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 58c3d7e . . 18ab3ae 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 23 , 11 + 23 , 10 @ @ import android . os . Message ; 
 import android . util . Log ; 
 
 import com . google . common . base . Splitter ; 
 - import com . google . common . collect . Iterables ; 
 import com . google . common . base . Throwables ; 
 + import com . google . common . collect . Iterables ; 
 
 import java . io . File ; 
 - import java . lang . ref . SoftReference ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 @ @ - 56 , 6 + 55 , 12 @ @ public class Realm { 
 private static final String TAG = " REALM " ; 
 private static final String TABLE _ PREFIX = " class _ " ; 
 private static final Set < String > validatedPaths = Collections . synchronizedSet ( new HashSet < String > ( ) ) ; 
 + private static final ThreadLocal < Map < String , Realm > > realmsCache = new ThreadLocal < Map < String , Realm > > ( ) { 
 + @ Override 
 + protected Map < String , Realm > initialValue ( ) { 
 + return new HashMap < String , Realm > ( ) ; 
 + } 
 + } ; 
 
 private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; 
 private static boolean autoRefresh = true ; 
 @ @ - 162 , 14 + 167 , 12 @ @ public class Realm { 
 } 
 
 private static Realm createAndValidate ( String absolutePath , boolean validateSchema ) { 
 - ThreadRealm threadRealm = new ThreadRealm ( absolutePath ) ; 
 - SoftReference < Realm > realmSoftReference = threadRealm . get ( ) ; 
 - Realm realm = realmSoftReference . get ( ) ; 
 + Map < String , Realm > realms = realmsCache . get ( ) ; 
 + Realm realm = realms . get ( absolutePath ) ; 
 if ( realm = = null ) { 
 - / / The garbage collector decided to get rid of the realm instance 
 - Realm newRealm = new Realm ( absolutePath ) ; 
 - threadRealm . set ( new SoftReference < Realm > ( newRealm ) ) ; 
 - realm = newRealm ; 
 + realm = new Realm ( absolutePath ) ; 
 + realms . put ( absolutePath , realm ) ; 
 + realmsCache . set ( realms ) ; 
 } 
 if ( validateSchema ) { 
 / / FIXME - get rid fo validatedPaths - only validate if we don ' t have a cached realm 
 @ @ - 197 , 10 + 200 , 11 @ @ public class Realm { 
 
 realm . beginTransaction ( ) ; 
 long version = realm . getVersion ( ) ; 
 + realm . commitTransaction ( ) ; 
 for ( String className : proxyClasses ) { 
 String modelClassName = Iterables . getLast ( Splitter . on ( " . " ) . split ( className ) ) ; 
 String generatedClassName = " io . realm . " + modelClassName + " RealmProxy " ; 
 - Class < ? > generatedClass = null ; 
 + Class < ? > generatedClass ; 
 try { 
 generatedClass = Class . forName ( generatedClassName ) ; 
 } catch ( ClassNotFoundException e ) { 
 @ @ - 214 , 14 + 218 , 17 @ @ public class Realm { 
 throw new RealmException ( " Could not find the initTable method in the generated " + generatedClassName + " class " ) ; 
 } 
 try { 
 + realm . beginTransaction ( ) ; 
 initTableMethod . invoke ( null , realm . transaction ) ; 
 } catch ( IllegalAccessException e ) { 
 throw new RealmException ( " Could not execute the initTable method in the " + generatedClassName + " class " ) ; 
 } catch ( InvocationTargetException e ) { 
 throw new RealmException ( " An exception was thrown in the initTable method in the " + generatedClassName + " class " ) ; 
 + } finally { 
 + realm . commitTransaction ( ) ; 
 } 
 } 
 - Method validateMethod = null ; 
 + Method validateMethod ; 
 try { 
 validateMethod = generatedClass . getMethod ( " validateTable " , new Class [ ] { ImplicitTransaction . class } ) ; 
 } catch ( NoSuchMethodException e ) { 
 @ @ - 236 , 9 + 243 , 11 @ @ public class Realm { 
 } 
 } 
 if ( version = = - 1 ) { 
 + realm . beginTransaction ( ) ; 
 realm . setVersion ( 0 ) ; 
 + realm . commitTransaction ( ) ; 
 } 
 - realm . commitTransaction ( ) ; 
 + 
 validatedPaths . add ( absolutePath ) ; 
 } 
 } 
 @ @ - 246 , 17 + 255 , 10 @ @ public class Realm { 
 } 
 
 / / This class stores soft - references to realm objects per thread per realm file 
 - private static class ThreadRealm extends ThreadLocal < SoftReference < Realm > > { 
 - private String absolutePath ; 
 - 
 - private ThreadRealm ( String absolutePath ) { 
 - this . absolutePath = absolutePath ; 
 - } 
 - 
 + private static class ThreadRealm extends ThreadLocal < Map < String , Realm > > { 
 @ Override 
 - protected SoftReference < Realm > initialValue ( ) { 
 - Realm realm = new Realm ( absolutePath ) ; 
 - return new SoftReference < Realm > ( realm ) ; 
 + protected Map < String , Realm > initialValue ( ) { 
 + return new HashMap < String , Realm > ( ) ; 
 } 
 } 
 
 @ @ - 458 , 7 + 460 , 11 @ @ public class Realm { 
 Message message = Message . obtain ( ) ; 
 message . arg1 = LooperThread . REALM _ CHANGED ; 
 message . arg2 = id ; 
 - looperThread . handler . sendMessage ( message ) ; 
 + if ( looperThread . handler ! = null ) { 
 + looperThread . handler . sendMessage ( message ) ; 
 + } else { 
 + Log . i ( TAG , " The LooperThread is not up and running yet . Commit message not sent " ) ; 
 + } 
 } 
 
 public void clear ( Class < ? > classSpec ) { 
 @ @ - 487 , 6 + 493 , 10 @ @ public class Realm { 
 realm . beginTransaction ( ) ; 
 realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; 
 realm . commitTransaction ( ) ; 
 + / / Update the cache 
 + Map < String , Realm > realms = realmsCache . get ( ) ; 
 + realms . put ( realmPath , new Realm ( realmPath ) ) ; 
 + realmsCache . set ( realms ) ; 
 } 
 
 / * *
