BLEU SCORE: 0.07986788803078405

TEST MSG: Fix type based tests
GENERATED MSG: One more flaky test

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> index db0404e . . dc9656c 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java <nl> @ @ - 486 , 7 + 486 , 7 @ @ public class TypeBasedNotificationsTests { <nl> public void callback _ with _ relevant _ commit _ realmobject _ sync ( ) { <nl> final Realm realm = looperThread . realm ; <nl> <nl> - / / Step 1 : Trigger global Realm change listener <nl> + / / Step 1 : Create object <nl> realm . beginTransaction ( ) ; <nl> final Dog akamaru = realm . createObject ( Dog . class ) ; <nl> akamaru . setName ( " Akamaru " ) ; <nl> @ @ - 501 , 38 + 501 , 21 @ @ public class TypeBasedNotificationsTests { <nl> typebasedCommitInvocations . incrementAndGet ( ) ; <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> assertEquals ( 17 , dog . getAge ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> <nl> - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> + / / Step 2 : Trigger non - related commit <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> @ Override <nl> - public void onChange ( Realm object ) { <nl> - int commits = globalCommitInvocations . incrementAndGet ( ) ; <nl> - switch ( commits ) { <nl> - case 1 : <nl> - / / Step 2 : Trigger non - related commit <nl> - realm . beginTransaction ( ) ; <nl> - realm . commitTransaction ( ) ; <nl> - break ; <nl> - <nl> - case 2 : <nl> - / / Step 3 : Trigger related commit <nl> - realm . beginTransaction ( ) ; <nl> - akamaru . setAge ( 17 ) ; <nl> - realm . commitTransaction ( ) ; <nl> - break ; <nl> - <nl> - case 3 : <nl> - / / Step 5 : Complete test <nl> - looperThread . postRunnable ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> - looperThread . testComplete ( ) ; <nl> - } <nl> - } ) ; <nl> + public void execute ( Realm realm ) { <nl> + } <nl> + } ) ; <nl> <nl> - } <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . where ( Dog . class ) . findFirst ( ) . setAge ( 17 ) ; <nl> } <nl> } ) ; <nl> } <nl> @ @ - 543 , 7 + 526 , 7 @ @ public class TypeBasedNotificationsTests { <nl> public void callback _ with _ relevant _ commit _ realmobject _ async ( ) { <nl> final Realm realm = looperThread . realm ; <nl> <nl> - / / Step 1 : Trigger global Realm change listener <nl> + / / Step 1 : Create object <nl> realm . beginTransaction ( ) ; <nl> final Dog akamaru = realm . createObject ( Dog . class ) ; <nl> akamaru . setName ( " Akamaru " ) ; <nl> @ @ - 558 , 47 + 541 , 33 @ @ public class TypeBasedNotificationsTests { <nl> public void onChange ( Dog object ) { <nl> switch ( typebasedCommitInvocations . incrementAndGet ( ) ) { <nl> case 1 : <nl> + / / Async query returns . <nl> assertEquals ( " Akamaru " , dog . getName ( ) ) ; <nl> assertEquals ( 0 , dog . getAge ( ) ) ; <nl> - break ; <nl> <nl> - case 2 : <nl> - / / Step 4 : Respond to relevant change <nl> - assertEquals ( 17 , dog . getAge ( ) ) ; <nl> - break ; <nl> - } <nl> - } <nl> - } ) ; <nl> - <nl> - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> - @ Override <nl> - public void onChange ( Realm object ) { <nl> - int commits = globalCommitInvocations . incrementAndGet ( ) ; <nl> - switch ( commits ) { <nl> - case 1 : <nl> / / Step 2 : Trigger non - related commit <nl> - realm . beginTransaction ( ) ; <nl> - realm . commitTransaction ( ) ; <nl> - break ; <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + } <nl> + } ) ; <nl> <nl> - case 2 : <nl> / / Step 3 : Trigger related commit <nl> - realm . beginTransaction ( ) ; <nl> - akamaru . setAge ( 17 ) ; <nl> - realm . commitTransaction ( ) ; <nl> - break ; <nl> - <nl> - case 3 : <nl> - / / Step 5 : Complete test <nl> - looperThread . postRunnable ( new Runnable ( ) { <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> - assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; <nl> - assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; <nl> - looperThread . testComplete ( ) ; <nl> + public void execute ( Realm realm ) { <nl> + realm . where ( Dog . class ) . findFirst ( ) . setAge ( 17 ) ; <nl> } <nl> } ) ; <nl> + break ; <nl> <nl> + case 2 : <nl> + / / Step 4 : Respond to relevant change <nl> + assertEquals ( 17 , dog . getAge ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> + break ; <nl> + default : <nl> + fail ( ) ; <nl> } <nl> } <nl> } ) ; <nl> @ @ - 809 , 13 + 778 , 15 @ @ public class TypeBasedNotificationsTests { <nl> public void callback _ with _ relevant _ commit _ realmresults _ sync ( ) { <nl> final Realm realm = looperThread . realm ; <nl> <nl> - / / Step 1 : Trigger global Realm change listener <nl> + / / Step 1 : Create object <nl> realm . beginTransaction ( ) ; <nl> final Dog akamaru = realm . createObject ( Dog . class ) ; <nl> akamaru . setName ( " Akamaru " ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; <nl> + / / Execute the query . <nl> + assertEquals ( 1 , dogs . size ( ) ) ; <nl> looperThread . keepStrongReference . add ( dogs ) ; <nl> dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> @ @ - 825 , 37 + 796 , 22 @ @ public class TypeBasedNotificationsTests { <nl> assertEquals ( 1 , dogs . size ( ) ) ; <nl> assertEquals ( " Akamaru " , dogs . get ( 0 ) . getName ( ) ) ; <nl> assertEquals ( 17 , dogs . get ( 0 ) . getAge ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> <nl> - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> + / / Step 2 : Trigger non - related commit . If this triggered the results listener , assertion will happen there . <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> @ Override <nl> - public void onChange ( Realm object ) { <nl> - int commits = globalCommitInvocations . incrementAndGet ( ) ; <nl> - switch ( commits ) { <nl> - case 1 : <nl> - / / Step 2 : Trigger non - related commit <nl> - realm . beginTransaction ( ) ; <nl> - realm . commitTransaction ( ) ; <nl> - break ; <nl> - <nl> - case 2 : <nl> - / / Step 3 : Trigger related commit <nl> - realm . beginTransaction ( ) ; <nl> - akamaru . setAge ( 17 ) ; <nl> - realm . commitTransaction ( ) ; <nl> - break ; <nl> + public void execute ( Realm realm ) { <nl> + } <nl> + } ) ; <nl> <nl> - case 3 : <nl> - / / Step 5 : Complete test <nl> - looperThread . postRunnable ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; <nl> - looperThread . testComplete ( ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> + / / Step 3 : Trigger related commit <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . where ( Dog . class ) . findFirst ( ) . setAge ( 17 ) ; <nl> } <nl> } ) ; <nl> } <nl> @ @ - 866 , 14 + 822 , 13 @ @ public class TypeBasedNotificationsTests { <nl> public void callback _ with _ relevant _ commit _ realmresults _ async ( ) { <nl> final Realm realm = looperThread . realm ; <nl> <nl> - / / Step 1 : Trigger global Realm change listener <nl> + / / Step 1 : Create object <nl> realm . beginTransaction ( ) ; <nl> final Dog akamaru = realm . createObject ( Dog . class ) ; <nl> akamaru . setName ( " Akamaru " ) ; <nl> realm . commitTransaction ( ) ; <nl> <nl> - final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAllAsync ( ) ; <nl> - assertTrue ( dogs . load ( ) ) ; <nl> + final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; <nl> looperThread . keepStrongReference . add ( dogs ) ; <nl> dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { <nl> @ Override <nl> @ @ - 881 , 43 + 836 , 32 @ @ public class TypeBasedNotificationsTests { <nl> / / Step 4 : Respond to relevant change <nl> int commits = typebasedCommitInvocations . incrementAndGet ( ) ; <nl> switch ( commits ) { <nl> - case 2 : <nl> - assertEquals ( 17 , dogs . get ( 0 ) . getAge ( ) ) ; <nl> case 1 : <nl> + / / Async query returns . <nl> assertEquals ( 1 , dogs . size ( ) ) ; <nl> assertEquals ( " Akamaru " , dogs . get ( 0 ) . getName ( ) ) ; <nl> + / / Step 2 : Trigger non - related commit . If this triggered the results listener , <nl> + / / assertion will happen there . <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + } <nl> + } ) ; <nl> <nl> - } <nl> - } <nl> - } ) ; <nl> - <nl> - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> - @ Override <nl> - public void onChange ( Realm object ) { <nl> - int commits = globalCommitInvocations . incrementAndGet ( ) ; <nl> - switch ( commits ) { <nl> - case 1 : <nl> - / / Step 2 : Trigger non - related commit <nl> - realm . beginTransaction ( ) ; <nl> - realm . commitTransaction ( ) ; <nl> - break ; <nl> - <nl> - case 2 : <nl> / / Step 3 : Trigger related commit <nl> - realm . beginTransaction ( ) ; <nl> - akamaru . setAge ( 17 ) ; <nl> - realm . commitTransaction ( ) ; <nl> - break ; <nl> - <nl> - case 3 : <nl> - / / Step 5 : Complete test <nl> - looperThread . postRunnable ( new Runnable ( ) { <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> - assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; <nl> - looperThread . testComplete ( ) ; <nl> + public void execute ( Realm realm ) { <nl> + realm . where ( Dog . class ) . findFirst ( ) . setAge ( 17 ) ; <nl> } <nl> } ) ; <nl> + break ; <nl> + case 2 : <nl> + assertEquals ( 17 , dogs . get ( 0 ) . getAge ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> + break ; <nl> + default : <nl> + fail ( ) ; <nl> } <nl> } <nl> } ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> index fbfda7f . . 422b8b8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 940 , 87 + 940 , 56 @ @ public class NotificationsTest { <nl> / / to advance to the latest version . We make sure in this test that all Realm listeners will be notified <nl> / / regardless of the presence of an async RealmObject that will delay the ` REALM _ CHANGE ` sometimes <nl> @ Test <nl> - public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { <nl> + @ RunTestInLooperThread <nl> + public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) { <nl> final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger ( 0 ) ; <nl> - final AtomicInteger numberOfAsyncRealmObjectCallbackInvocation = new AtomicInteger ( 0 ) ; <nl> - final CountDownLatch signalTestFinished = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; <nl> - final Realm [ ] realm = new Realm [ 1 ] ; <nl> - final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; / / to catch both Exception & AssertionError <nl> - final Looper [ ] backgroundLooper = new Looper [ 1 ] ; <nl> - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> - executorService . submit ( new Runnable ( ) { <nl> + looperThread . realm . addChangeListener ( new RealmChangeListener ( ) { <nl> @ Override <nl> - public void run ( ) { <nl> - Looper . prepare ( ) ; <nl> - backgroundLooper [ 0 ] = Looper . myLooper ( ) ; <nl> - <nl> - try { <nl> - realm [ 0 ] = Realm . getInstance ( realmConfig ) ; <nl> - realm [ 0 ] . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - Dog dog ; / / to keep it as a strong reference <nl> - switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { <nl> - case 1 : { <nl> - / / first commit <nl> - dog = realm [ 0 ] . where ( Dog . class ) . findFirstAsync ( ) ; <nl> - assertTrue ( dog . load ( ) ) ; <nl> - dog . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - numberOfAsyncRealmObjectCallbackInvocation . incrementAndGet ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - new Thread ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - Realm realm = Realm . getInstance ( realmConfig ) ; <nl> - realm . beginTransaction ( ) ; <nl> - realm . createObject ( Dog . class ) ; <nl> - realm . commitTransaction ( ) ; <nl> - realm . close ( ) ; <nl> - } <nl> - } . start ( ) ; <nl> - break ; <nl> - } <nl> - case 2 : { <nl> - / / finish test <nl> - signalTestFinished . countDown ( ) ; <nl> - break ; <nl> - } <nl> + public void onChange ( ) { <nl> + switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { <nl> + case 1 : { <nl> + / / first commit <nl> + Dog dog = looperThread . realm . where ( Dog . class ) . findFirstAsync ( ) ; <nl> + assertTrue ( dog . load ( ) ) ; <nl> + dog . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> } <nl> - } <nl> - } ) ; <nl> - <nl> - realm [ 0 ] . handler . post ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - realm [ 0 ] . beginTransaction ( ) ; <nl> - realm [ 0 ] . createObject ( Dog . class ) ; <nl> - realm [ 0 ] . commitTransaction ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - Looper . loop ( ) ; <nl> - <nl> - } catch ( Throwable e ) { <nl> - threadAssertionError [ 0 ] = e ; <nl> - <nl> - } finally { <nl> - if ( signalTestFinished . getCount ( ) > 0 ) { <nl> - signalTestFinished . countDown ( ) ; <nl> + } ) ; <nl> + looperThread . keepStrongReference . add ( dog ) ; <nl> + <nl> + new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm realm = Realm . getInstance ( looperThread . realmConfiguration ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . createObject ( Dog . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + realm . close ( ) ; <nl> + signalClosedRealm . countDown ( ) ; <nl> + } <nl> + } . start ( ) ; <nl> + break ; <nl> } <nl> - if ( realm . length > 0 & & realm [ 0 ] ! = null ) { <nl> - realm [ 0 ] . close ( ) ; <nl> + case 2 : { <nl> + / / finish test <nl> + TestHelper . awaitOrFail ( signalClosedRealm ) ; <nl> + looperThread . testComplete ( ) ; <nl> + break ; <nl> } <nl> - signalClosedRealm . countDown ( ) ; <nl> } <nl> } <nl> } ) ; <nl> <nl> - TestHelper . exitOrThrow ( executorService , signalTestFinished , signalClosedRealm , backgroundLooper , threadAssertionError ) ; <nl> + looperThread . postRunnable ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + looperThread . realm . beginTransaction ( ) ; <nl> + looperThread . realm . createObject ( Dog . class ) ; <nl> + looperThread . realm . commitTransaction ( ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> @ Test

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 index db0404e . . dc9656c 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TypeBasedNotificationsTests . java 
 @ @ - 486 , 7 + 486 , 7 @ @ public class TypeBasedNotificationsTests { 
 public void callback _ with _ relevant _ commit _ realmobject _ sync ( ) { 
 final Realm realm = looperThread . realm ; 
 
 - / / Step 1 : Trigger global Realm change listener 
 + / / Step 1 : Create object 
 realm . beginTransaction ( ) ; 
 final Dog akamaru = realm . createObject ( Dog . class ) ; 
 akamaru . setName ( " Akamaru " ) ; 
 @ @ - 501 , 38 + 501 , 21 @ @ public class TypeBasedNotificationsTests { 
 typebasedCommitInvocations . incrementAndGet ( ) ; 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 assertEquals ( 17 , dog . getAge ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 
 - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 + / / Step 2 : Trigger non - related commit 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 @ Override 
 - public void onChange ( Realm object ) { 
 - int commits = globalCommitInvocations . incrementAndGet ( ) ; 
 - switch ( commits ) { 
 - case 1 : 
 - / / Step 2 : Trigger non - related commit 
 - realm . beginTransaction ( ) ; 
 - realm . commitTransaction ( ) ; 
 - break ; 
 - 
 - case 2 : 
 - / / Step 3 : Trigger related commit 
 - realm . beginTransaction ( ) ; 
 - akamaru . setAge ( 17 ) ; 
 - realm . commitTransaction ( ) ; 
 - break ; 
 - 
 - case 3 : 
 - / / Step 5 : Complete test 
 - looperThread . postRunnable ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 - looperThread . testComplete ( ) ; 
 - } 
 - } ) ; 
 + public void execute ( Realm realm ) { 
 + } 
 + } ) ; 
 
 - } 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . where ( Dog . class ) . findFirst ( ) . setAge ( 17 ) ; 
 } 
 } ) ; 
 } 
 @ @ - 543 , 7 + 526 , 7 @ @ public class TypeBasedNotificationsTests { 
 public void callback _ with _ relevant _ commit _ realmobject _ async ( ) { 
 final Realm realm = looperThread . realm ; 
 
 - / / Step 1 : Trigger global Realm change listener 
 + / / Step 1 : Create object 
 realm . beginTransaction ( ) ; 
 final Dog akamaru = realm . createObject ( Dog . class ) ; 
 akamaru . setName ( " Akamaru " ) ; 
 @ @ - 558 , 47 + 541 , 33 @ @ public class TypeBasedNotificationsTests { 
 public void onChange ( Dog object ) { 
 switch ( typebasedCommitInvocations . incrementAndGet ( ) ) { 
 case 1 : 
 + / / Async query returns . 
 assertEquals ( " Akamaru " , dog . getName ( ) ) ; 
 assertEquals ( 0 , dog . getAge ( ) ) ; 
 - break ; 
 
 - case 2 : 
 - / / Step 4 : Respond to relevant change 
 - assertEquals ( 17 , dog . getAge ( ) ) ; 
 - break ; 
 - } 
 - } 
 - } ) ; 
 - 
 - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 - @ Override 
 - public void onChange ( Realm object ) { 
 - int commits = globalCommitInvocations . incrementAndGet ( ) ; 
 - switch ( commits ) { 
 - case 1 : 
 / / Step 2 : Trigger non - related commit 
 - realm . beginTransaction ( ) ; 
 - realm . commitTransaction ( ) ; 
 - break ; 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + } 
 + } ) ; 
 
 - case 2 : 
 / / Step 3 : Trigger related commit 
 - realm . beginTransaction ( ) ; 
 - akamaru . setAge ( 17 ) ; 
 - realm . commitTransaction ( ) ; 
 - break ; 
 - 
 - case 3 : 
 - / / Step 5 : Complete test 
 - looperThread . postRunnable ( new Runnable ( ) { 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 @ Override 
 - public void run ( ) { 
 - assertEquals ( 3 , globalCommitInvocations . get ( ) ) ; 
 - assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; 
 - looperThread . testComplete ( ) ; 
 + public void execute ( Realm realm ) { 
 + realm . where ( Dog . class ) . findFirst ( ) . setAge ( 17 ) ; 
 } 
 } ) ; 
 + break ; 
 
 + case 2 : 
 + / / Step 4 : Respond to relevant change 
 + assertEquals ( 17 , dog . getAge ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 + break ; 
 + default : 
 + fail ( ) ; 
 } 
 } 
 } ) ; 
 @ @ - 809 , 13 + 778 , 15 @ @ public class TypeBasedNotificationsTests { 
 public void callback _ with _ relevant _ commit _ realmresults _ sync ( ) { 
 final Realm realm = looperThread . realm ; 
 
 - / / Step 1 : Trigger global Realm change listener 
 + / / Step 1 : Create object 
 realm . beginTransaction ( ) ; 
 final Dog akamaru = realm . createObject ( Dog . class ) ; 
 akamaru . setName ( " Akamaru " ) ; 
 realm . commitTransaction ( ) ; 
 
 final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; 
 + / / Execute the query . 
 + assertEquals ( 1 , dogs . size ( ) ) ; 
 looperThread . keepStrongReference . add ( dogs ) ; 
 dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 @ @ - 825 , 37 + 796 , 22 @ @ public class TypeBasedNotificationsTests { 
 assertEquals ( 1 , dogs . size ( ) ) ; 
 assertEquals ( " Akamaru " , dogs . get ( 0 ) . getName ( ) ) ; 
 assertEquals ( 17 , dogs . get ( 0 ) . getAge ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 
 - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 + / / Step 2 : Trigger non - related commit . If this triggered the results listener , assertion will happen there . 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 @ Override 
 - public void onChange ( Realm object ) { 
 - int commits = globalCommitInvocations . incrementAndGet ( ) ; 
 - switch ( commits ) { 
 - case 1 : 
 - / / Step 2 : Trigger non - related commit 
 - realm . beginTransaction ( ) ; 
 - realm . commitTransaction ( ) ; 
 - break ; 
 - 
 - case 2 : 
 - / / Step 3 : Trigger related commit 
 - realm . beginTransaction ( ) ; 
 - akamaru . setAge ( 17 ) ; 
 - realm . commitTransaction ( ) ; 
 - break ; 
 + public void execute ( Realm realm ) { 
 + } 
 + } ) ; 
 
 - case 3 : 
 - / / Step 5 : Complete test 
 - looperThread . postRunnable ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - assertEquals ( 1 , typebasedCommitInvocations . get ( ) ) ; 
 - looperThread . testComplete ( ) ; 
 - } 
 - } ) ; 
 - } 
 + / / Step 3 : Trigger related commit 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . where ( Dog . class ) . findFirst ( ) . setAge ( 17 ) ; 
 } 
 } ) ; 
 } 
 @ @ - 866 , 14 + 822 , 13 @ @ public class TypeBasedNotificationsTests { 
 public void callback _ with _ relevant _ commit _ realmresults _ async ( ) { 
 final Realm realm = looperThread . realm ; 
 
 - / / Step 1 : Trigger global Realm change listener 
 + / / Step 1 : Create object 
 realm . beginTransaction ( ) ; 
 final Dog akamaru = realm . createObject ( Dog . class ) ; 
 akamaru . setName ( " Akamaru " ) ; 
 realm . commitTransaction ( ) ; 
 
 - final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAllAsync ( ) ; 
 - assertTrue ( dogs . load ( ) ) ; 
 + final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; 
 looperThread . keepStrongReference . add ( dogs ) ; 
 dogs . addChangeListener ( new RealmChangeListener < RealmResults < Dog > > ( ) { 
 @ Override 
 @ @ - 881 , 43 + 836 , 32 @ @ public class TypeBasedNotificationsTests { 
 / / Step 4 : Respond to relevant change 
 int commits = typebasedCommitInvocations . incrementAndGet ( ) ; 
 switch ( commits ) { 
 - case 2 : 
 - assertEquals ( 17 , dogs . get ( 0 ) . getAge ( ) ) ; 
 case 1 : 
 + / / Async query returns . 
 assertEquals ( 1 , dogs . size ( ) ) ; 
 assertEquals ( " Akamaru " , dogs . get ( 0 ) . getName ( ) ) ; 
 + / / Step 2 : Trigger non - related commit . If this triggered the results listener , 
 + / / assertion will happen there . 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + } 
 + } ) ; 
 
 - } 
 - } 
 - } ) ; 
 - 
 - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 - @ Override 
 - public void onChange ( Realm object ) { 
 - int commits = globalCommitInvocations . incrementAndGet ( ) ; 
 - switch ( commits ) { 
 - case 1 : 
 - / / Step 2 : Trigger non - related commit 
 - realm . beginTransaction ( ) ; 
 - realm . commitTransaction ( ) ; 
 - break ; 
 - 
 - case 2 : 
 / / Step 3 : Trigger related commit 
 - realm . beginTransaction ( ) ; 
 - akamaru . setAge ( 17 ) ; 
 - realm . commitTransaction ( ) ; 
 - break ; 
 - 
 - case 3 : 
 - / / Step 5 : Complete test 
 - looperThread . postRunnable ( new Runnable ( ) { 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 @ Override 
 - public void run ( ) { 
 - assertEquals ( 2 , typebasedCommitInvocations . get ( ) ) ; 
 - looperThread . testComplete ( ) ; 
 + public void execute ( Realm realm ) { 
 + realm . where ( Dog . class ) . findFirst ( ) . setAge ( 17 ) ; 
 } 
 } ) ; 
 + break ; 
 + case 2 : 
 + assertEquals ( 17 , dogs . get ( 0 ) . getAge ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 + break ; 
 + default : 
 + fail ( ) ; 
 } 
 } 
 } ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 index fbfda7f . . 422b8b8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 940 , 87 + 940 , 56 @ @ public class NotificationsTest { 
 / / to advance to the latest version . We make sure in this test that all Realm listeners will be notified 
 / / regardless of the presence of an async RealmObject that will delay the ` REALM _ CHANGE ` sometimes 
 @ Test 
 - public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) throws Throwable { 
 + @ RunTestInLooperThread 
 + public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification ( ) { 
 final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger ( 0 ) ; 
 - final AtomicInteger numberOfAsyncRealmObjectCallbackInvocation = new AtomicInteger ( 0 ) ; 
 - final CountDownLatch signalTestFinished = new CountDownLatch ( 1 ) ; 
 final CountDownLatch signalClosedRealm = new CountDownLatch ( 1 ) ; 
 - final Realm [ ] realm = new Realm [ 1 ] ; 
 - final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; / / to catch both Exception & AssertionError 
 - final Looper [ ] backgroundLooper = new Looper [ 1 ] ; 
 - ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 - executorService . submit ( new Runnable ( ) { 
 + looperThread . realm . addChangeListener ( new RealmChangeListener ( ) { 
 @ Override 
 - public void run ( ) { 
 - Looper . prepare ( ) ; 
 - backgroundLooper [ 0 ] = Looper . myLooper ( ) ; 
 - 
 - try { 
 - realm [ 0 ] = Realm . getInstance ( realmConfig ) ; 
 - realm [ 0 ] . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - Dog dog ; / / to keep it as a strong reference 
 - switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { 
 - case 1 : { 
 - / / first commit 
 - dog = realm [ 0 ] . where ( Dog . class ) . findFirstAsync ( ) ; 
 - assertTrue ( dog . load ( ) ) ; 
 - dog . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - numberOfAsyncRealmObjectCallbackInvocation . incrementAndGet ( ) ; 
 - } 
 - } ) ; 
 - 
 - new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - Realm realm = Realm . getInstance ( realmConfig ) ; 
 - realm . beginTransaction ( ) ; 
 - realm . createObject ( Dog . class ) ; 
 - realm . commitTransaction ( ) ; 
 - realm . close ( ) ; 
 - } 
 - } . start ( ) ; 
 - break ; 
 - } 
 - case 2 : { 
 - / / finish test 
 - signalTestFinished . countDown ( ) ; 
 - break ; 
 - } 
 + public void onChange ( ) { 
 + switch ( numberOfRealmCallbackInvocation . incrementAndGet ( ) ) { 
 + case 1 : { 
 + / / first commit 
 + Dog dog = looperThread . realm . where ( Dog . class ) . findFirstAsync ( ) ; 
 + assertTrue ( dog . load ( ) ) ; 
 + dog . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 } 
 - } 
 - } ) ; 
 - 
 - realm [ 0 ] . handler . post ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - realm [ 0 ] . beginTransaction ( ) ; 
 - realm [ 0 ] . createObject ( Dog . class ) ; 
 - realm [ 0 ] . commitTransaction ( ) ; 
 - } 
 - } ) ; 
 - 
 - Looper . loop ( ) ; 
 - 
 - } catch ( Throwable e ) { 
 - threadAssertionError [ 0 ] = e ; 
 - 
 - } finally { 
 - if ( signalTestFinished . getCount ( ) > 0 ) { 
 - signalTestFinished . countDown ( ) ; 
 + } ) ; 
 + looperThread . keepStrongReference . add ( dog ) ; 
 + 
 + new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm realm = Realm . getInstance ( looperThread . realmConfiguration ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . createObject ( Dog . class ) ; 
 + realm . commitTransaction ( ) ; 
 + realm . close ( ) ; 
 + signalClosedRealm . countDown ( ) ; 
 + } 
 + } . start ( ) ; 
 + break ; 
 } 
 - if ( realm . length > 0 & & realm [ 0 ] ! = null ) { 
 - realm [ 0 ] . close ( ) ; 
 + case 2 : { 
 + / / finish test 
 + TestHelper . awaitOrFail ( signalClosedRealm ) ; 
 + looperThread . testComplete ( ) ; 
 + break ; 
 } 
 - signalClosedRealm . countDown ( ) ; 
 } 
 } 
 } ) ; 
 
 - TestHelper . exitOrThrow ( executorService , signalTestFinished , signalClosedRealm , backgroundLooper , threadAssertionError ) ; 
 + looperThread . postRunnable ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + looperThread . realm . beginTransaction ( ) ; 
 + looperThread . realm . createObject ( Dog . class ) ; 
 + looperThread . realm . commitTransaction ( ) ; 
 + } 
 + } ) ; 
 } 
 
 @ Test
