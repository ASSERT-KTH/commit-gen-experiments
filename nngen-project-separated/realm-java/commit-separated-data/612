BLEU SCORE: 0.04027248192421852

TEST MSG: Added proper javadoc and tests for not allowing setting manual migrations .
GENERATED MSG: Fixed last tests .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java <nl> index 8d307ba . . 79f1b0e 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java <nl> @ @ - 31 , 11 + 31 , 17 @ @ import org . junit . rules . TemporaryFolder ; <nl> import org . junit . runner . RunWith ; <nl> <nl> import java . io . File ; <nl> + import java . net . URL ; <nl> import java . util . Locale ; <nl> import java . util . UUID ; <nl> <nl> + import io . realm . DynamicRealm ; <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmMigration ; <nl> + import io . realm . objectserver . android . SharedPrefsUserStore ; <nl> import io . realm . objectserver . internal . Token ; <nl> import io . realm . rule . RunInLooperThread ; <nl> + import io . realm . rule . RunTestInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> @ @ - 210 , 17 + 216 , 29 @ @ public class SyncConfigurationTests { <nl> } <nl> <nl> @ Test <nl> - public void syncPolicy ( ) { <nl> + public void migration _ alwaysThrows ( ) { <nl> + SyncConfiguration . Builder builder ; <nl> + builder = new SyncConfiguration . Builder ( context ) <nl> + . user ( User . createLocal ( ) ) <nl> + . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; <nl> <nl> - } <nl> + try { <nl> + builder . migration ( null ) ; <nl> + } catch ( IllegalArgumentException ignore ) { <nl> + } <nl> <nl> - @ Test <nl> - public void syncPolicy _ nullThrows ( ) { <nl> - / / User user = User . createLocal ( ) ; <nl> - / / user . add ( con ) ; <nl> - / / <nl> + try { <nl> + builder . migration ( new RealmMigration ( ) { <nl> + @ Override <nl> + public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { <nl> + / / Nothing <nl> + } <nl> + } ) ; <nl> + } catch ( IllegalArgumentException ignore ) { <nl> + } <nl> } <nl> <nl> + <nl> / / @ Ignore ( " Only used for quick testing without needing to spin up a full integration test " ) <nl> / / @ Test <nl> / / @ RunTestInLooperThread <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / objectserver / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / objectserver / SyncConfiguration . java <nl> index 742c812 . . 428de05 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / objectserver / SyncConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / objectserver / SyncConfiguration . java <nl> @ @ - 326 , 14 + 326 , 14 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Manual migrations are not supported ( yet ) for Realms that can be synced using the Realm Object Server <nl> + * Manual migrations are not supported for Realms that can be synced using the Realm Object Server <nl> * Only additive changes are allowed , and these will be detected and applied automatically . <nl> * <nl> * @ throws IllegalArgumentException always . <nl> * / <nl> @ Override <nl> public Builder migration ( RealmMigration migration ) { <nl> - throw new IllegalArgumentException ( " Migrations are not supported for Realms that can be synchronized using the Realm Mobile Platform " ) ; <nl> + throw new IllegalArgumentException ( " Manual migrations are not supported for Realms that can be synchronized using the Realm Object Server " ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java <nl> index 2954bd2 . . dd1d323 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java <nl> @ @ - 16 , 6 + 16 , 9 @ @ <nl> <nl> package io . realm . tests . api ; <nl> <nl> + import android . content . Context ; <nl> + <nl> + import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> import io . realm . Realm ; <nl> @ @ - 46 , 30 + 49 , 22 @ @ public class RealmTest extends RealmSetupTests { <nl> } <nl> } <nl> <nl> - public void testShouldFailCreateRealmWithNullDir ( ) { <nl> + public void testShouldNotFailCreateRealmWithNullDir ( ) { <nl> setupSharedGroup ( ) ; <nl> <nl> - try { <nl> - Realm realm = new Realm ( null ) ; <nl> - fail ( " Expected IOException " ) ; <nl> - } catch ( IOException ioe ) { <nl> - / / Expected exception <nl> - } catch ( Exception ex ) { <nl> - fail ( " Unexpected exception : " + ex . getMessage ( ) ) ; <nl> - } <nl> + File f = null ; <nl> + Realm realm = new Realm ( f ) ; <nl> } <nl> <nl> - public void testShouldFailWithNullFileName ( ) { <nl> + public void testShouldNotFailCreateRealmWithNullContext ( ) { <nl> setupSharedGroup ( ) ; <nl> + Context c = null ; <nl> + Realm realm = new Realm ( c ) ; <nl> + } <nl> <nl> - try { <nl> - Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) , null ) ; <nl> - fail ( " Expected Exception " ) ; <nl> - } catch ( Exception ex ) { <nl> - if ( ! ( ex instanceof IOException ) ) { <nl> - fail ( " Unexpected exception : " + ex . getMessage ( ) ) ; <nl> - } <nl> - } <nl> + public void testShouldNotFailWithNullFileName ( ) { <nl> + setupSharedGroup ( ) ; <nl> + Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) , null ) ; <nl> } <nl> <nl> <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index ccce5d2 . . cc7719c 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ package io . realm ; <nl> import android . content . Context ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 71 , 7 + 70 , 7 @ @ public class Realm { <nl> init ( ) ; <nl> } <nl> <nl> - public Realm ( File writeablePath ) throws IOException { <nl> + public Realm ( File writeablePath ) { <nl> this ( writeablePath , " default . realm " ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java 
 index 8d307ba . . 79f1b0e 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / objectserver / SyncConfigurationTests . java 
 @ @ - 31 , 11 + 31 , 17 @ @ import org . junit . rules . TemporaryFolder ; 
 import org . junit . runner . RunWith ; 
 
 import java . io . File ; 
 + import java . net . URL ; 
 import java . util . Locale ; 
 import java . util . UUID ; 
 
 + import io . realm . DynamicRealm ; 
 + import io . realm . Realm ; 
 + import io . realm . RealmMigration ; 
 + import io . realm . objectserver . android . SharedPrefsUserStore ; 
 import io . realm . objectserver . internal . Token ; 
 import io . realm . rule . RunInLooperThread ; 
 + import io . realm . rule . RunTestInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 
 import static org . junit . Assert . assertEquals ; 
 @ @ - 210 , 17 + 216 , 29 @ @ public class SyncConfigurationTests { 
 } 
 
 @ Test 
 - public void syncPolicy ( ) { 
 + public void migration _ alwaysThrows ( ) { 
 + SyncConfiguration . Builder builder ; 
 + builder = new SyncConfiguration . Builder ( context ) 
 + . user ( User . createLocal ( ) ) 
 + . serverUrl ( " realm : / / objectserver . realm . io / default " ) ; 
 
 - } 
 + try { 
 + builder . migration ( null ) ; 
 + } catch ( IllegalArgumentException ignore ) { 
 + } 
 
 - @ Test 
 - public void syncPolicy _ nullThrows ( ) { 
 - / / User user = User . createLocal ( ) ; 
 - / / user . add ( con ) ; 
 - / / 
 + try { 
 + builder . migration ( new RealmMigration ( ) { 
 + @ Override 
 + public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { 
 + / / Nothing 
 + } 
 + } ) ; 
 + } catch ( IllegalArgumentException ignore ) { 
 + } 
 } 
 
 + 
 / / @ Ignore ( " Only used for quick testing without needing to spin up a full integration test " ) 
 / / @ Test 
 / / @ RunTestInLooperThread 
 diff - - git a / realm / realm - library / src / main / java / io / realm / objectserver / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / objectserver / SyncConfiguration . java 
 index 742c812 . . 428de05 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / objectserver / SyncConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / objectserver / SyncConfiguration . java 
 @ @ - 326 , 14 + 326 , 14 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 } 
 
 / * * 
 - * Manual migrations are not supported ( yet ) for Realms that can be synced using the Realm Object Server 
 + * Manual migrations are not supported for Realms that can be synced using the Realm Object Server 
 * Only additive changes are allowed , and these will be detected and applied automatically . 
 * 
 * @ throws IllegalArgumentException always . 
 * / 
 @ Override 
 public Builder migration ( RealmMigration migration ) { 
 - throw new IllegalArgumentException ( " Migrations are not supported for Realms that can be synchronized using the Realm Mobile Platform " ) ; 
 + throw new IllegalArgumentException ( " Manual migrations are not supported for Realms that can be synchronized using the Realm Object Server " ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java 
 index 2954bd2 . . dd1d323 100644 
 - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java 
 @ @ - 16 , 6 + 16 , 9 @ @ 
 
 package io . realm . tests . api ; 
 
 + import android . content . Context ; 
 + 
 + import java . io . File ; 
 import java . io . IOException ; 
 
 import io . realm . Realm ; 
 @ @ - 46 , 30 + 49 , 22 @ @ public class RealmTest extends RealmSetupTests { 
 } 
 } 
 
 - public void testShouldFailCreateRealmWithNullDir ( ) { 
 + public void testShouldNotFailCreateRealmWithNullDir ( ) { 
 setupSharedGroup ( ) ; 
 
 - try { 
 - Realm realm = new Realm ( null ) ; 
 - fail ( " Expected IOException " ) ; 
 - } catch ( IOException ioe ) { 
 - / / Expected exception 
 - } catch ( Exception ex ) { 
 - fail ( " Unexpected exception : " + ex . getMessage ( ) ) ; 
 - } 
 + File f = null ; 
 + Realm realm = new Realm ( f ) ; 
 } 
 
 - public void testShouldFailWithNullFileName ( ) { 
 + public void testShouldNotFailCreateRealmWithNullContext ( ) { 
 setupSharedGroup ( ) ; 
 + Context c = null ; 
 + Realm realm = new Realm ( c ) ; 
 + } 
 
 - try { 
 - Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) , null ) ; 
 - fail ( " Expected Exception " ) ; 
 - } catch ( Exception ex ) { 
 - if ( ! ( ex instanceof IOException ) ) { 
 - fail ( " Unexpected exception : " + ex . getMessage ( ) ) ; 
 - } 
 - } 
 + public void testShouldNotFailWithNullFileName ( ) { 
 + setupSharedGroup ( ) ; 
 + Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) , null ) ; 
 } 
 
 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index ccce5d2 . . cc7719c 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 19 , 7 + 19 , 6 @ @ package io . realm ; 
 import android . content . Context ; 
 
 import java . io . File ; 
 - import java . io . IOException ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 @ @ - 71 , 7 + 70 , 7 @ @ public class Realm { 
 init ( ) ; 
 } 
 
 - public Realm ( File writeablePath ) throws IOException { 
 + public Realm ( File writeablePath ) { 
 this ( writeablePath , " default . realm " ) ; 
 } 

