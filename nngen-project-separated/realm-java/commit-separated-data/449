BLEU SCORE: 0.02931251013275449

TEST MSG: Remove ignored test cases .
GENERATED MSG: Includes fix in case of re - instantiation

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 9b64283 . . 4b1092d 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 46 , 7 + 46 , 6 @ @ import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . Dog ; <nl> - import io . realm . log . LogLevel ; <nl> import io . realm . log . RealmLogger ; <nl> import io . realm . log . RealmLog ; <nl> import io . realm . rule . RunInLooperThread ; <nl> @ @ - 56 , 7 + 55 , 6 @ @ import io . realm . rule . TestRealmConfigurationFactory ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> - import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 1174 , 47 + 1172 , 4 @ @ public class NotificationsTest { <nl> } catch ( IllegalStateException ignored ) { <nl> } <nl> } <nl> - <nl> - <nl> - @ Test <nl> - @ Ignore ( " Listeners for non - looper thread are not allowed for now " ) <nl> - public void globalListener _ nonLooperThread _ triggeredByWaitForChange ( ) { <nl> - realm = Realm . getInstance ( realmConfig ) ; <nl> - final CountDownLatch latch = new CountDownLatch ( 1 ) ; <nl> - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> - @ Override <nl> - public void onChange ( Realm element ) { <nl> - latch . countDown ( ) ; <nl> - } <nl> - } ) ; <nl> - realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> - @ Override <nl> - public void execute ( Realm realm ) { <nl> - realm . createObject ( AllTypes . class ) ; <nl> - } <nl> - } ) ; <nl> - realm . waitForChange ( ) ; <nl> - TestHelper . awaitOrFail ( latch ) ; <nl> - } <nl> - <nl> - @ Test <nl> - @ Ignore ( " Listeners for non - looper thread are not allowed for now " ) <nl> - public void globalListener _ nonLooperThread _ triggeredByLocalCommit ( ) { <nl> - realm = Realm . getInstance ( realmConfig ) ; <nl> - final CountDownLatch latch = new CountDownLatch ( 1 ) ; <nl> - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> - @ Override <nl> - public void onChange ( Realm element ) { <nl> - latch . countDown ( ) ; <nl> - } <nl> - } ) ; <nl> - realm . executeTransaction ( new Realm . Transaction ( ) { <nl> - @ Override <nl> - public void execute ( Realm realm ) { <nl> - realm . createObject ( AllTypes . class ) ; <nl> - } <nl> - } ) ; <nl> - TestHelper . awaitOrFail ( latch ) ; <nl> - } <nl> - <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 66a1518 . . 482d48b 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 232 , 4 + 232 , 67 @ @ public class NotificationsTest extends AndroidTestCase { <nl> <nl> thread . join ( 1 ) ; <nl> } <nl> + <nl> + public void testAutoUpdateRealmResults ( ) { <nl> + final int TEST _ SIZE = 10 ; <nl> + final AtomicBoolean cantRun = new AtomicBoolean ( true ) ; <nl> + final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> + <nl> + <nl> + Realm . deleteRealmFile ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + / / assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> + <nl> + Thread listenerThread = new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Looper . prepare ( ) ; <nl> + Realm . deleteRealmFile ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; <nl> + assertEquals ( 0 , dogs . size ( ) ) ; <nl> + realm . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + / / Re - instatiation on each notification is intentional <nl> + Realm r = Realm . getInstance ( getContext ( ) ) ; <nl> + counter . incrementAndGet ( ) ; <nl> + } <nl> + } ) ; <nl> + cantRun . set ( false ) ; <nl> + Looper . loop ( ) ; <nl> + } <nl> + } ; <nl> + listenerThread . start ( ) ; <nl> + <nl> + while ( cantRun . get ( ) ) { <nl> + try { <nl> + Thread . sleep ( 100 ) ; <nl> + } <nl> + catch ( InterruptedException ignored ) { <nl> + fail ( ) ; <nl> + } <nl> + } <nl> + try { <nl> + Thread . sleep ( 1000 ) ; <nl> + } catch ( InterruptedException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setName ( " Rex " + i ) ; <nl> + } <nl> + realm . commitTransaction ( ) ; <nl> + assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> + <nl> + try { <nl> + listenerThread . join ( 2000 ) ; <nl> + } catch ( InterruptedException ignored ) { <nl> + fail ( ) ; <nl> + } <nl> + / / one for initTable and one for the commit <nl> + assertEquals ( 2 , counter . get ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 2cedd8d . . e80dec2 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 363 , 6 + 363 , 8 @ @ public class Realm { <nl> realm = new Realm ( absolutePath , key , autoRefresh ) ; <nl> realms . put ( absolutePath , realm ) ; <nl> realmsCache . set ( realms ) ; <nl> + } else { <nl> + return realm ; <nl> } <nl> if ( validateSchema ) { <nl> Class < ? > validationClass ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 index 9b64283 . . 4b1092d 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 46 , 7 + 46 , 6 @ @ import java . util . concurrent . atomic . AtomicInteger ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . Dog ; 
 - import io . realm . log . LogLevel ; 
 import io . realm . log . RealmLogger ; 
 import io . realm . log . RealmLog ; 
 import io . realm . rule . RunInLooperThread ; 
 @ @ - 56 , 7 + 55 , 6 @ @ import io . realm . rule . TestRealmConfigurationFactory ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 - import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 1174 , 47 + 1172 , 4 @ @ public class NotificationsTest { 
 } catch ( IllegalStateException ignored ) { 
 } 
 } 
 - 
 - 
 - @ Test 
 - @ Ignore ( " Listeners for non - looper thread are not allowed for now " ) 
 - public void globalListener _ nonLooperThread _ triggeredByWaitForChange ( ) { 
 - realm = Realm . getInstance ( realmConfig ) ; 
 - final CountDownLatch latch = new CountDownLatch ( 1 ) ; 
 - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 - @ Override 
 - public void onChange ( Realm element ) { 
 - latch . countDown ( ) ; 
 - } 
 - } ) ; 
 - realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 - @ Override 
 - public void execute ( Realm realm ) { 
 - realm . createObject ( AllTypes . class ) ; 
 - } 
 - } ) ; 
 - realm . waitForChange ( ) ; 
 - TestHelper . awaitOrFail ( latch ) ; 
 - } 
 - 
 - @ Test 
 - @ Ignore ( " Listeners for non - looper thread are not allowed for now " ) 
 - public void globalListener _ nonLooperThread _ triggeredByLocalCommit ( ) { 
 - realm = Realm . getInstance ( realmConfig ) ; 
 - final CountDownLatch latch = new CountDownLatch ( 1 ) ; 
 - realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 - @ Override 
 - public void onChange ( Realm element ) { 
 - latch . countDown ( ) ; 
 - } 
 - } ) ; 
 - realm . executeTransaction ( new Realm . Transaction ( ) { 
 - @ Override 
 - public void execute ( Realm realm ) { 
 - realm . createObject ( AllTypes . class ) ; 
 - } 
 - } ) ; 
 - TestHelper . awaitOrFail ( latch ) ; 
 - } 
 - 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 index 66a1518 . . 482d48b 100644 
 - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 232 , 4 + 232 , 67 @ @ public class NotificationsTest extends AndroidTestCase { 
 
 thread . join ( 1 ) ; 
 } 
 + 
 + public void testAutoUpdateRealmResults ( ) { 
 + final int TEST _ SIZE = 10 ; 
 + final AtomicBoolean cantRun = new AtomicBoolean ( true ) ; 
 + final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 + 
 + 
 + Realm . deleteRealmFile ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + / / assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 + 
 + Thread listenerThread = new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Looper . prepare ( ) ; 
 + Realm . deleteRealmFile ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; 
 + assertEquals ( 0 , dogs . size ( ) ) ; 
 + realm . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + / / Re - instatiation on each notification is intentional 
 + Realm r = Realm . getInstance ( getContext ( ) ) ; 
 + counter . incrementAndGet ( ) ; 
 + } 
 + } ) ; 
 + cantRun . set ( false ) ; 
 + Looper . loop ( ) ; 
 + } 
 + } ; 
 + listenerThread . start ( ) ; 
 + 
 + while ( cantRun . get ( ) ) { 
 + try { 
 + Thread . sleep ( 100 ) ; 
 + } 
 + catch ( InterruptedException ignored ) { 
 + fail ( ) ; 
 + } 
 + } 
 + try { 
 + Thread . sleep ( 1000 ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + realm . beginTransaction ( ) ; 
 + for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setName ( " Rex " + i ) ; 
 + } 
 + realm . commitTransaction ( ) ; 
 + assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 + 
 + try { 
 + listenerThread . join ( 2000 ) ; 
 + } catch ( InterruptedException ignored ) { 
 + fail ( ) ; 
 + } 
 + / / one for initTable and one for the commit 
 + assertEquals ( 2 , counter . get ( ) ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 2cedd8d . . e80dec2 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 363 , 6 + 363 , 8 @ @ public class Realm { 
 realm = new Realm ( absolutePath , key , autoRefresh ) ; 
 realms . put ( absolutePath , realm ) ; 
 realmsCache . set ( realms ) ; 
 + } else { 
 + return realm ; 
 } 
 if ( validateSchema ) { 
 Class < ? > validationClass ;
