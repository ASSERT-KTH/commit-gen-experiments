BLEU SCORE: 0.07160476144948855

TEST MSG: Fix unit test example mocks
GENERATED MSG: Remove unused Activity from the concurrency example

TEST DIFF (one line): diff - - git a / examples / unitTestExample / build . gradle b / examples / unitTestExample / build . gradle <nl> index 276abae . . b2a09b1 100644 <nl> - - - a / examples / unitTestExample / build . gradle <nl> + + + b / examples / unitTestExample / build . gradle <nl> @ @ - 40 , 10 + 40 , 10 @ @ dependencies { <nl> testCompile " org . mockito : mockito - core : 1 . 10 . 19 " <nl> testCompile ' org . robolectric : shadows - support - v4 : 3 . 0 ' <nl> <nl> - testCompile " org . powermock : powermock - module - junit4 : 1 . 6 . 2 " <nl> - testCompile " org . powermock : powermock - module - junit4 - rule : 1 . 6 . 2 " <nl> - testCompile " org . powermock : powermock - api - mockito : 1 . 6 . 2 " <nl> - testCompile " org . powermock : powermock - classloading - xstream : 1 . 6 . 2 " <nl> + testCompile " org . powermock : powermock - module - junit4 : 1 . 6 . 4 " <nl> + testCompile " org . powermock : powermock - module - junit4 - rule : 1 . 6 . 4 " <nl> + testCompile " org . powermock : powermock - api - mockito : 1 . 6 . 4 " <nl> + testCompile " org . powermock : powermock - classloading - xstream : 1 . 6 . 4 " <nl> <nl> <nl> androidTestCompile ' com . android . support . test : runner : 0 . 4 . 1 ' <nl> diff - - git a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java <nl> index 283c8c4 . . 83c5e3c 100644 <nl> - - - a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java <nl> + + + b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java <nl> @ @ - 28 , 7 + 28 , 9 @ @ import org . powermock . modules . junit4 . rule . PowerMockRule ; <nl> import org . robolectric . Robolectric ; <nl> import org . robolectric . RobolectricGradleTestRunner ; <nl> import org . robolectric . annotation . Config ; <nl> + import org . robolectric . util . ActivityController ; <nl> <nl> + import java . lang . Exception ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> @ @ - 37 , 7 + 39 , 9 @ @ import io . realm . RealmConfiguration ; <nl> import io . realm . RealmObject ; <nl> import io . realm . RealmQuery ; <nl> import io . realm . RealmResults ; <nl> + import io . realm . examples . unittesting . ExampleActivity ; <nl> import io . realm . examples . unittesting . model . Person ; <nl> + import io . realm . internal . RealmCore ; <nl> <nl> <nl> import static org . hamcrest . CoreMatchers . is ; <nl> @ @ - 51 , 11 + 55 , 13 @ @ import static org . powermock . api . mockito . PowerMockito . mock ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> + import static org . powermock . api . mockito . PowerMockito . whenNew ; <nl> + import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> <nl> @ RunWith ( RobolectricGradleTestRunner . class ) <nl> @ Config ( constants = BuildConfig . class , sdk = 21 ) <nl> @ PowerMockIgnore ( { " org . mockito . * " , " org . robolectric . * " , " android . * " } ) <nl> - @ PrepareForTest ( { Realm . class , RealmResults . class } ) <nl> + @ PrepareForTest ( { Realm . class , RealmConfiguration . class , RealmResults . class , RealmCore . class } ) <nl> public class ExampleActivityTest { <nl> <nl> / / Robolectric , Using Power Mock https : / / github . com / robolectric / robolectric / wiki / Using - PowerMock <nl> @ @ - 64 , 20 + 70 , 31 @ @ public class ExampleActivityTest { <nl> public PowerMockRule rule = new PowerMockRule ( ) ; <nl> <nl> private Realm mockRealm ; <nl> - private ExampleActivity activity ; <nl> private RealmResults < Person > people ; <nl> <nl> @ Before <nl> - public void setup ( ) { <nl> + public void setup ( ) throws Exception { <nl> <nl> / / Setup Realm to be mocked <nl> mockStatic ( Realm . class ) ; <nl> + mockStatic ( RealmConfiguration . class ) ; <nl> + mockStatic ( RealmCore . class ) ; <nl> <nl> / / Create the mock <nl> final Realm mockRealm = mock ( Realm . class ) ; <nl> + final RealmConfiguration mockRealmConfig = mock ( RealmConfiguration . class ) ; <nl> + <nl> + / / TODO : Better solution would be just mock the RealmConfiguration . Builder class . But it seems there is some <nl> + / / problems for powermock to mock it ( static inner class ) . We just mock the RealmCore . loadLibrary ( Context ) which <nl> + / / will be called by RealmConfiguration . Builder ' s constructor . <nl> + doNothing ( ) . when ( RealmCore . class ) ; <nl> + RealmCore . loadLibrary ( any ( Context . class ) ) ; <nl> + <nl> + / / TODO : Mock the RealmConfiguration ' s constructor . If the RealmConfiguration . Builder . build can be mocked , this <nl> + / / is not necessary anymore . <nl> + whenNew ( RealmConfiguration . class ) . withAnyArguments ( ) . thenReturn ( mockRealmConfig ) ; <nl> <nl> / / Anytime getInstance is called with any configuration , then return the mockRealm <nl> - / / FIXME : Final class Realm cannot be mocked by Mockito ! https : / / github . com / realm / realm - java / issues / 2303 <nl> when ( Realm . getInstance ( any ( RealmConfiguration . class ) ) ) . thenReturn ( mockRealm ) ; <nl> <nl> / / Anytime we ask Realm to create a Person , return a new instance . <nl> @ @ - 146 , 14 + 163 , 16 @ @ public class ExampleActivityTest { <nl> <nl> this . mockRealm = mockRealm ; <nl> this . people = people ; <nl> - <nl> - / / Get the activity so we can start testing <nl> - activity = Robolectric . setupActivity ( ExampleActivity . class ) ; <nl> } <nl> <nl> <nl> @ Test <nl> public void shouldBeAbleToAccessActivityAndVerifyRealmInteractions ( ) { <nl> + / / Create activity <nl> + ActivityController < ExampleActivity > controller = <nl> + Robolectric . buildActivity ( ExampleActivity . class ) . setup ( ) ; <nl> + ExampleActivity activity = controller . get ( ) ; <nl> + <nl> assertThat ( activity . getTitle ( ) . toString ( ) , is ( " Unit Test Example " ) ) ; <nl> <nl> / / Verify that two Realm . getInstance ( ) calls took place . <nl> @ @ - 181 , 7 + 200 , 7 @ @ public class ExampleActivityTest { <nl> verify ( people , times ( 2 ) ) . clear ( ) ; <nl> <nl> / / Call the destroy method so we can verify that the . close ( ) method was called ( below ) <nl> - activity . onDestroy ( ) ; <nl> + controller . destroy ( ) ; <nl> <nl> / / Verify that the realm got closed 2 separate times . Once in the AsyncTask , once <nl> / / in onDestroy
NEAREST DIFF (one line): diff - - git a / examples / concurrencyExample / src / main / AndroidManifest . xml b / examples / concurrencyExample / src / main / AndroidManifest . xml <nl> index 7486172 . . 427caed 100644 <nl> - - - a / examples / concurrencyExample / src / main / AndroidManifest . xml <nl> + + + b / examples / concurrencyExample / src / main / AndroidManifest . xml <nl> @ @ - 18 , 12 + 18 , 6 @ @ <nl> < / intent - filter > <nl> < / activity > <nl> <nl> - < activity <nl> - android : name = " . RealmResultsExampleActivity " <nl> - android : configChanges = " keyboardHidden | orientation | screenSize " <nl> - android : label = " @ string / app _ name " > <nl> - < / activity > <nl> - <nl> < service <nl> android : name = " . services . SpawningService " <nl> android : configChanges = " keyboardHidden | orientation | screenSize " <nl> diff - - git a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java b / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java <nl> deleted file mode 100644 <nl> index 52c2e94 . . 0000000 <nl> - - - a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java <nl> + + + / dev / null <nl> @ @ - 1 , 186 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . examples . concurrency ; <nl> - <nl> - import android . app . Activity ; <nl> - import android . content . Intent ; <nl> - import android . os . Bundle ; <nl> - import android . util . Log ; <nl> - import android . view . View ; <nl> - import android . widget . ListView ; <nl> - import android . widget . RadioGroup ; <nl> - import android . widget . TextView ; <nl> - <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmChangeListener ; <nl> - import io . realm . RealmList ; <nl> - import io . realm . RealmResults ; <nl> - import io . realm . examples . concurrency . adapters . RealmSimpleExampleAdapter ; <nl> - import io . realm . examples . concurrency . model . Cat ; <nl> - import io . realm . examples . concurrency . model . Dog ; <nl> - import io . realm . examples . concurrency . model . Person ; <nl> - import io . realm . examples . concurrency . services . SpawningService ; <nl> - import io . realm . examples . concurrency . services . TransactionService ; <nl> - <nl> - public class RealmResultsExampleActivity extends Activity implements View . OnClickListener { <nl> - <nl> - @ SuppressWarnings ( " UnusedDeclaration " ) <nl> - public static final String TAG = RealmResultsExampleActivity . class . getName ( ) ; <nl> - <nl> - private Realm realm = null ; <nl> - <nl> - private RealmSimpleExampleAdapter < Person > mAdapter = null ; <nl> - private ListView mListView = null ; <nl> - <nl> - private TextView mTextUpdate ; <nl> - <nl> - @ Override <nl> - protected void onCreate ( Bundle savedInstanceState ) { <nl> - super . onCreate ( savedInstanceState ) ; <nl> - setContentView ( R . layout . activity _ realm _ resultsexample ) ; <nl> - <nl> - findViewById ( R . id . insert _ record _ button ) . setOnClickListener ( this ) ; <nl> - findViewById ( R . id . quit _ button ) . setOnClickListener ( new View . OnClickListener ( ) { <nl> - @ Override <nl> - public void onClick ( View view ) { <nl> - stopTests ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - mListView = ( ListView ) findViewById ( R . id . items _ list ) ; <nl> - mTextUpdate = ( TextView ) findViewById ( R . id . size _ status ) ; <nl> - / / Reset the realm data before starting the tests <nl> - Realm . deleteRealmFile ( this ) ; <nl> - <nl> - / / Acquire a realm object <nl> - realm = Realm . getInstance ( this ) ; <nl> - <nl> - realm . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - updateList ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - mAdapter = new RealmSimpleExampleAdapter < Person > ( this , R . layout . simplelistitem , realm . allObjects ( Person . class ) ) ; <nl> - mListView . setAdapter ( mAdapter ) ; <nl> - } <nl> - <nl> - private void updateList ( ) { <nl> - RealmResults < Person > realmResults = realm . allObjects ( Person . class ) ; <nl> - if ( realmResults ! = null ) { <nl> - mTextUpdate . setText ( realmResults . size ( ) + " " ) ; <nl> - mAdapter . notifyDataSetChanged ( ) ; <nl> - } <nl> - mListView . invalidate ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void onResume ( ) { <nl> - super . onResume ( ) ; <nl> - startTests ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void onStop ( ) { <nl> - super . onStop ( ) ; <nl> - stopTests ( ) ; <nl> - } <nl> - <nl> - private void startTests ( ) { <nl> - startSpawnTests ( ) ; <nl> - / / Alternatively can use transaction tests here . . . <nl> - / / startTransactionTests ( ) ; <nl> - } <nl> - <nl> - private void stopTests ( ) { <nl> - stopSpawnTests ( ) ; <nl> - / / Alternatively can use transaction tests here . . . <nl> - / / stopTransactionTests ( ) ; <nl> - } <nl> - <nl> - / / Using the screen form the user can inject into the Realm <nl> - / / even if other threads are creating transactions . <nl> - @ Override <nl> - public void onClick ( View v ) { <nl> - String personName = ( ( TextView ) findViewById ( R . id . name ) ) . getText ( ) . toString ( ) ; <nl> - String personAge = ( ( TextView ) findViewById ( R . id . age ) ) . getText ( ) . toString ( ) ; <nl> - String petName = ( ( TextView ) findViewById ( R . id . pets _ name ) ) . getText ( ) . toString ( ) ; <nl> - <nl> - Integer parseAge = 0 ; <nl> - try { <nl> - parseAge = Integer . parseInt ( personAge ) ; <nl> - } catch ( NumberFormatException ignored ) { <nl> - 	 Log . d ( TAG , " Age for a person invalid " ) ; <nl> - 	 return ; <nl> - } <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - Person person = realm . createObject ( Person . class ) ; <nl> - person . setName ( personName ) ; <nl> - person . setAge ( parseAge ) ; <nl> - <nl> - int checkedId = ( ( RadioGroup ) findViewById ( R . id . petType ) ) . getCheckedRadioButtonId ( ) ; <nl> - if ( checkedId = = R . id . hasCat ) { <nl> - Cat cat = realm . createObject ( Cat . class ) ; <nl> - cat . setName ( petName ) ; <nl> - RealmList < Cat > cats = person . getCats ( ) ; <nl> - cats . add ( cat ) ; <nl> - } else if ( checkedId = = R . id . hasDog ) { <nl> - Dog dog = realm . createObject ( Dog . class ) ; <nl> - dog . setName ( petName ) ; <nl> - person . setDog ( dog ) ; <nl> - } <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - } <nl> - <nl> - / / The transaction tests are one IntentService running multiple Writes <nl> - / / to a Realm in either a multiple transaction or single transaction loop <nl> - private void startTransactionTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; <nl> - serviceIntent . putExtra ( TransactionService . REALM _ TESTTYPE _ EXTRA , <nl> - TransactionService . TestType . MANY _ TRANSACTIONS ) ; <nl> - serviceIntent . putExtra ( TransactionService . ITERATION _ COUNT , 10000000 ) ; <nl> - this . startService ( serviceIntent ) ; <nl> - } <nl> - <nl> - private void stopTransactionTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; <nl> - this . stopService ( serviceIntent ) ; <nl> - } <nl> - <nl> - / / The Spawned tests create multiple threads of type Reader or Writer <nl> - / / which loop for a specified count <nl> - private void startSpawnTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; <nl> - serviceIntent . putExtra ( SpawningService . REALM _ INSERTCOUNT _ EXTRA , 10000000 ) ; <nl> - serviceIntent . putExtra ( SpawningService . REALM _ READCOUNT _ EXTRA , 10000000 ) ; <nl> - this . startService ( serviceIntent ) ; <nl> - } <nl> - <nl> - private void stopSpawnTests ( ) { <nl> - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; <nl> - this . stopService ( serviceIntent ) ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( " UnusedDeclaration " ) <nl> - private void restartTests ( ) { <nl> - stopTransactionTests ( ) ; <nl> - startTransactionTests ( ) ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / examples / unitTestExample / build . gradle b / examples / unitTestExample / build . gradle 
 index 276abae . . b2a09b1 100644 
 - - - a / examples / unitTestExample / build . gradle 
 + + + b / examples / unitTestExample / build . gradle 
 @ @ - 40 , 10 + 40 , 10 @ @ dependencies { 
 testCompile " org . mockito : mockito - core : 1 . 10 . 19 " 
 testCompile ' org . robolectric : shadows - support - v4 : 3 . 0 ' 
 
 - testCompile " org . powermock : powermock - module - junit4 : 1 . 6 . 2 " 
 - testCompile " org . powermock : powermock - module - junit4 - rule : 1 . 6 . 2 " 
 - testCompile " org . powermock : powermock - api - mockito : 1 . 6 . 2 " 
 - testCompile " org . powermock : powermock - classloading - xstream : 1 . 6 . 2 " 
 + testCompile " org . powermock : powermock - module - junit4 : 1 . 6 . 4 " 
 + testCompile " org . powermock : powermock - module - junit4 - rule : 1 . 6 . 4 " 
 + testCompile " org . powermock : powermock - api - mockito : 1 . 6 . 4 " 
 + testCompile " org . powermock : powermock - classloading - xstream : 1 . 6 . 4 " 
 
 
 androidTestCompile ' com . android . support . test : runner : 0 . 4 . 1 ' 
 diff - - git a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java 
 index 283c8c4 . . 83c5e3c 100644 
 - - - a / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java 
 + + + b / examples / unitTestExample / src / test / java / io / realm / examples / unittesting / ExampleActivityTest . java 
 @ @ - 28 , 7 + 28 , 9 @ @ import org . powermock . modules . junit4 . rule . PowerMockRule ; 
 import org . robolectric . Robolectric ; 
 import org . robolectric . RobolectricGradleTestRunner ; 
 import org . robolectric . annotation . Config ; 
 + import org . robolectric . util . ActivityController ; 
 
 + import java . lang . Exception ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 
 @ @ - 37 , 7 + 39 , 9 @ @ import io . realm . RealmConfiguration ; 
 import io . realm . RealmObject ; 
 import io . realm . RealmQuery ; 
 import io . realm . RealmResults ; 
 + import io . realm . examples . unittesting . ExampleActivity ; 
 import io . realm . examples . unittesting . model . Person ; 
 + import io . realm . internal . RealmCore ; 
 
 
 import static org . hamcrest . CoreMatchers . is ; 
 @ @ - 51 , 11 + 55 , 13 @ @ import static org . powermock . api . mockito . PowerMockito . mock ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 + import static org . powermock . api . mockito . PowerMockito . whenNew ; 
 + import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 
 @ RunWith ( RobolectricGradleTestRunner . class ) 
 @ Config ( constants = BuildConfig . class , sdk = 21 ) 
 @ PowerMockIgnore ( { " org . mockito . * " , " org . robolectric . * " , " android . * " } ) 
 - @ PrepareForTest ( { Realm . class , RealmResults . class } ) 
 + @ PrepareForTest ( { Realm . class , RealmConfiguration . class , RealmResults . class , RealmCore . class } ) 
 public class ExampleActivityTest { 
 
 / / Robolectric , Using Power Mock https : / / github . com / robolectric / robolectric / wiki / Using - PowerMock 
 @ @ - 64 , 20 + 70 , 31 @ @ public class ExampleActivityTest { 
 public PowerMockRule rule = new PowerMockRule ( ) ; 
 
 private Realm mockRealm ; 
 - private ExampleActivity activity ; 
 private RealmResults < Person > people ; 
 
 @ Before 
 - public void setup ( ) { 
 + public void setup ( ) throws Exception { 
 
 / / Setup Realm to be mocked 
 mockStatic ( Realm . class ) ; 
 + mockStatic ( RealmConfiguration . class ) ; 
 + mockStatic ( RealmCore . class ) ; 
 
 / / Create the mock 
 final Realm mockRealm = mock ( Realm . class ) ; 
 + final RealmConfiguration mockRealmConfig = mock ( RealmConfiguration . class ) ; 
 + 
 + / / TODO : Better solution would be just mock the RealmConfiguration . Builder class . But it seems there is some 
 + / / problems for powermock to mock it ( static inner class ) . We just mock the RealmCore . loadLibrary ( Context ) which 
 + / / will be called by RealmConfiguration . Builder ' s constructor . 
 + doNothing ( ) . when ( RealmCore . class ) ; 
 + RealmCore . loadLibrary ( any ( Context . class ) ) ; 
 + 
 + / / TODO : Mock the RealmConfiguration ' s constructor . If the RealmConfiguration . Builder . build can be mocked , this 
 + / / is not necessary anymore . 
 + whenNew ( RealmConfiguration . class ) . withAnyArguments ( ) . thenReturn ( mockRealmConfig ) ; 
 
 / / Anytime getInstance is called with any configuration , then return the mockRealm 
 - / / FIXME : Final class Realm cannot be mocked by Mockito ! https : / / github . com / realm / realm - java / issues / 2303 
 when ( Realm . getInstance ( any ( RealmConfiguration . class ) ) ) . thenReturn ( mockRealm ) ; 
 
 / / Anytime we ask Realm to create a Person , return a new instance . 
 @ @ - 146 , 14 + 163 , 16 @ @ public class ExampleActivityTest { 
 
 this . mockRealm = mockRealm ; 
 this . people = people ; 
 - 
 - / / Get the activity so we can start testing 
 - activity = Robolectric . setupActivity ( ExampleActivity . class ) ; 
 } 
 
 
 @ Test 
 public void shouldBeAbleToAccessActivityAndVerifyRealmInteractions ( ) { 
 + / / Create activity 
 + ActivityController < ExampleActivity > controller = 
 + Robolectric . buildActivity ( ExampleActivity . class ) . setup ( ) ; 
 + ExampleActivity activity = controller . get ( ) ; 
 + 
 assertThat ( activity . getTitle ( ) . toString ( ) , is ( " Unit Test Example " ) ) ; 
 
 / / Verify that two Realm . getInstance ( ) calls took place . 
 @ @ - 181 , 7 + 200 , 7 @ @ public class ExampleActivityTest { 
 verify ( people , times ( 2 ) ) . clear ( ) ; 
 
 / / Call the destroy method so we can verify that the . close ( ) method was called ( below ) 
 - activity . onDestroy ( ) ; 
 + controller . destroy ( ) ; 
 
 / / Verify that the realm got closed 2 separate times . Once in the AsyncTask , once 
 / / in onDestroy

NEAREST DIFF:
diff - - git a / examples / concurrencyExample / src / main / AndroidManifest . xml b / examples / concurrencyExample / src / main / AndroidManifest . xml 
 index 7486172 . . 427caed 100644 
 - - - a / examples / concurrencyExample / src / main / AndroidManifest . xml 
 + + + b / examples / concurrencyExample / src / main / AndroidManifest . xml 
 @ @ - 18 , 12 + 18 , 6 @ @ 
 < / intent - filter > 
 < / activity > 
 
 - < activity 
 - android : name = " . RealmResultsExampleActivity " 
 - android : configChanges = " keyboardHidden | orientation | screenSize " 
 - android : label = " @ string / app _ name " > 
 - < / activity > 
 - 
 < service 
 android : name = " . services . SpawningService " 
 android : configChanges = " keyboardHidden | orientation | screenSize " 
 diff - - git a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java b / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java 
 deleted file mode 100644 
 index 52c2e94 . . 0000000 
 - - - a / examples / concurrencyExample / src / main / java / io / realm / examples / concurrency / RealmResultsExampleActivity . java 
 + + + / dev / null 
 @ @ - 1 , 186 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . examples . concurrency ; 
 - 
 - import android . app . Activity ; 
 - import android . content . Intent ; 
 - import android . os . Bundle ; 
 - import android . util . Log ; 
 - import android . view . View ; 
 - import android . widget . ListView ; 
 - import android . widget . RadioGroup ; 
 - import android . widget . TextView ; 
 - 
 - import io . realm . Realm ; 
 - import io . realm . RealmChangeListener ; 
 - import io . realm . RealmList ; 
 - import io . realm . RealmResults ; 
 - import io . realm . examples . concurrency . adapters . RealmSimpleExampleAdapter ; 
 - import io . realm . examples . concurrency . model . Cat ; 
 - import io . realm . examples . concurrency . model . Dog ; 
 - import io . realm . examples . concurrency . model . Person ; 
 - import io . realm . examples . concurrency . services . SpawningService ; 
 - import io . realm . examples . concurrency . services . TransactionService ; 
 - 
 - public class RealmResultsExampleActivity extends Activity implements View . OnClickListener { 
 - 
 - @ SuppressWarnings ( " UnusedDeclaration " ) 
 - public static final String TAG = RealmResultsExampleActivity . class . getName ( ) ; 
 - 
 - private Realm realm = null ; 
 - 
 - private RealmSimpleExampleAdapter < Person > mAdapter = null ; 
 - private ListView mListView = null ; 
 - 
 - private TextView mTextUpdate ; 
 - 
 - @ Override 
 - protected void onCreate ( Bundle savedInstanceState ) { 
 - super . onCreate ( savedInstanceState ) ; 
 - setContentView ( R . layout . activity _ realm _ resultsexample ) ; 
 - 
 - findViewById ( R . id . insert _ record _ button ) . setOnClickListener ( this ) ; 
 - findViewById ( R . id . quit _ button ) . setOnClickListener ( new View . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( View view ) { 
 - stopTests ( ) ; 
 - } 
 - } ) ; 
 - 
 - mListView = ( ListView ) findViewById ( R . id . items _ list ) ; 
 - mTextUpdate = ( TextView ) findViewById ( R . id . size _ status ) ; 
 - / / Reset the realm data before starting the tests 
 - Realm . deleteRealmFile ( this ) ; 
 - 
 - / / Acquire a realm object 
 - realm = Realm . getInstance ( this ) ; 
 - 
 - realm . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - updateList ( ) ; 
 - } 
 - } ) ; 
 - 
 - mAdapter = new RealmSimpleExampleAdapter < Person > ( this , R . layout . simplelistitem , realm . allObjects ( Person . class ) ) ; 
 - mListView . setAdapter ( mAdapter ) ; 
 - } 
 - 
 - private void updateList ( ) { 
 - RealmResults < Person > realmResults = realm . allObjects ( Person . class ) ; 
 - if ( realmResults ! = null ) { 
 - mTextUpdate . setText ( realmResults . size ( ) + " " ) ; 
 - mAdapter . notifyDataSetChanged ( ) ; 
 - } 
 - mListView . invalidate ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onResume ( ) { 
 - super . onResume ( ) ; 
 - startTests ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onStop ( ) { 
 - super . onStop ( ) ; 
 - stopTests ( ) ; 
 - } 
 - 
 - private void startTests ( ) { 
 - startSpawnTests ( ) ; 
 - / / Alternatively can use transaction tests here . . . 
 - / / startTransactionTests ( ) ; 
 - } 
 - 
 - private void stopTests ( ) { 
 - stopSpawnTests ( ) ; 
 - / / Alternatively can use transaction tests here . . . 
 - / / stopTransactionTests ( ) ; 
 - } 
 - 
 - / / Using the screen form the user can inject into the Realm 
 - / / even if other threads are creating transactions . 
 - @ Override 
 - public void onClick ( View v ) { 
 - String personName = ( ( TextView ) findViewById ( R . id . name ) ) . getText ( ) . toString ( ) ; 
 - String personAge = ( ( TextView ) findViewById ( R . id . age ) ) . getText ( ) . toString ( ) ; 
 - String petName = ( ( TextView ) findViewById ( R . id . pets _ name ) ) . getText ( ) . toString ( ) ; 
 - 
 - Integer parseAge = 0 ; 
 - try { 
 - parseAge = Integer . parseInt ( personAge ) ; 
 - } catch ( NumberFormatException ignored ) { 
 - 	 Log . d ( TAG , " Age for a person invalid " ) ; 
 - 	 return ; 
 - } 
 - 
 - realm . beginTransaction ( ) ; 
 - Person person = realm . createObject ( Person . class ) ; 
 - person . setName ( personName ) ; 
 - person . setAge ( parseAge ) ; 
 - 
 - int checkedId = ( ( RadioGroup ) findViewById ( R . id . petType ) ) . getCheckedRadioButtonId ( ) ; 
 - if ( checkedId = = R . id . hasCat ) { 
 - Cat cat = realm . createObject ( Cat . class ) ; 
 - cat . setName ( petName ) ; 
 - RealmList < Cat > cats = person . getCats ( ) ; 
 - cats . add ( cat ) ; 
 - } else if ( checkedId = = R . id . hasDog ) { 
 - Dog dog = realm . createObject ( Dog . class ) ; 
 - dog . setName ( petName ) ; 
 - person . setDog ( dog ) ; 
 - } 
 - 
 - realm . commitTransaction ( ) ; 
 - } 
 - 
 - / / The transaction tests are one IntentService running multiple Writes 
 - / / to a Realm in either a multiple transaction or single transaction loop 
 - private void startTransactionTests ( ) { 
 - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; 
 - serviceIntent . putExtra ( TransactionService . REALM _ TESTTYPE _ EXTRA , 
 - TransactionService . TestType . MANY _ TRANSACTIONS ) ; 
 - serviceIntent . putExtra ( TransactionService . ITERATION _ COUNT , 10000000 ) ; 
 - this . startService ( serviceIntent ) ; 
 - } 
 - 
 - private void stopTransactionTests ( ) { 
 - Intent serviceIntent = new Intent ( this , TransactionService . class ) ; 
 - this . stopService ( serviceIntent ) ; 
 - } 
 - 
 - / / The Spawned tests create multiple threads of type Reader or Writer 
 - / / which loop for a specified count 
 - private void startSpawnTests ( ) { 
 - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; 
 - serviceIntent . putExtra ( SpawningService . REALM _ INSERTCOUNT _ EXTRA , 10000000 ) ; 
 - serviceIntent . putExtra ( SpawningService . REALM _ READCOUNT _ EXTRA , 10000000 ) ; 
 - this . startService ( serviceIntent ) ; 
 - } 
 - 
 - private void stopSpawnTests ( ) { 
 - Intent serviceIntent = new Intent ( this , SpawningService . class ) ; 
 - this . stopService ( serviceIntent ) ; 
 - } 
 - 
 - @ SuppressWarnings ( " UnusedDeclaration " ) 
 - private void restartTests ( ) { 
 - stopTransactionTests ( ) ; 
 - startTransactionTests ( ) ; 
 - } 
 - }
