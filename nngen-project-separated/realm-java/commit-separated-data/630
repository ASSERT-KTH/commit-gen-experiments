BLEU SCORE: 0.03635358866852297

TEST MSG: removed io . realm . internal . Version class
GENERATED MSG: Updating version number now always require a migration block . Updated MigrationExample .

TEST DIFF (one line): diff - - git a / realm / realm - jni / generate - jni - headers . sh b / realm / realm - jni / generate - jni - headers . sh <nl> index f3abf1a . . a112b7c 100755 <nl> - - - a / realm / realm - jni / generate - jni - headers . sh <nl> + + + b / realm / realm - jni / generate - jni - headers . sh <nl> @ @ - 12 , 7 + 12 , 7 @ @ CLASSDIR = " $ ( pwd ) / . . / realm / build / intermediates / classes / release / " <nl> JNIDIR = " $ ( pwd ) / src " <nl> <nl> # Generate the headers <nl> - ( cd " $ CLASSDIR " & & javah - jni - classpath " $ CLASSDIR " - d " $ JNIDIR " io . realm . internal . Group io . realm . internal . LinkView io . realm . internal . Row io . realm . internal . SharedGroup io . realm . internal . Table io . realm . internal . TableQuery io . realm . internal . TableView io . realm . internal . Util io . realm . internal . Version ) <nl> + ( cd " $ CLASSDIR " & & javah - jni - classpath " $ CLASSDIR " - d " $ JNIDIR " io . realm . internal . Group io . realm . internal . LinkView io . realm . internal . Row io . realm . internal . SharedGroup io . realm . internal . Table io . realm . internal . TableQuery io . realm . internal . TableView io . realm . internal . Util ) <nl> <nl> # Remove " empty " header files ( they have 13 lines ) <nl> wc - l " $ JNIDIR " / * . h | grep " 13 " | awk ' { print $ 2 } ' | xargs rm - f <nl> diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Version . cpp b / realm / realm - jni / src / io _ realm _ internal _ Version . cpp <nl> deleted file mode 100644 <nl> index 4fc4bc5 . . 0000000 <nl> - - - a / realm / realm - jni / src / io _ realm _ internal _ Version . cpp <nl> + + + / dev / null <nl> @ @ - 1 , 66 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - # include < sstream > <nl> - # include < string > <nl> - <nl> - # include " util . hpp " <nl> - # include " io _ realm _ internal _ Version . h " <nl> - # include < realm / version . hpp > <nl> - # include < realm / string _ data . hpp > <nl> - <nl> - static int realm _ jni _ version = 23 ; <nl> - <nl> - <nl> - using namespace realm ; <nl> - <nl> - JNIEXPORT jint JNICALL Java _ io _ realm _ internal _ Version _ nativeGetAPIVersion ( JNIEnv * , jclass ) <nl> - { <nl> - return realm _ jni _ version ; <nl> - } <nl> - <nl> - JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Version _ nativeGetVersion ( JNIEnv * env , jclass ) <nl> - { <nl> - try { <nl> - std : : string str ( Version : : get _ version ( ) ) ; <nl> - StringData sd ( str ) ; <nl> - return to _ jstring ( env , sd ) ; <nl> - } <nl> - CATCH _ STD ( ) ; <nl> - return NULL ; <nl> - } <nl> - <nl> - JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Version _ nativeHasFeature ( JNIEnv * env , jclass , jint feature ) <nl> - { <nl> - switch ( feature ) { <nl> - case 0 : <nl> - return Version : : has _ feature ( feature _ Debug ) ; <nl> - case 1 : <nl> - return Version : : has _ feature ( feature _ Replication ) ; <nl> - default : { <nl> - std : : ostringstream ss ; <nl> - ss < < " Unknown feature code : " < < feature ; <nl> - ThrowException ( env , RuntimeError , ss . str ( ) ) ; <nl> - } <nl> - } <nl> - return false ; <nl> - } <nl> - <nl> - JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Version _ nativeIsAtLeast ( JNIEnv * , jclass , <nl> - jint major , jint minor , jint patch ) <nl> - { <nl> - return Version : : is _ at _ least ( major , minor , patch ) ; <nl> - } <nl> diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Version . h b / realm / realm - jni / src / io _ realm _ internal _ Version . h <nl> deleted file mode 100644 <nl> index 8bbe942 . . 0000000 <nl> - - - a / realm / realm - jni / src / io _ realm _ internal _ Version . h <nl> + + + / dev / null <nl> @ @ - 1 , 53 + 0 , 0 @ @ <nl> - / * DO NOT EDIT THIS FILE - it is machine generated * / <nl> - # include < jni . h > <nl> - / * Header for class io _ realm _ internal _ Version * / <nl> - <nl> - # ifndef _ Included _ io _ realm _ internal _ Version <nl> - # define _ Included _ io _ realm _ internal _ Version <nl> - # ifdef _ _ cplusplus <nl> - extern " C " { <nl> - # endif <nl> - # undef io _ realm _ internal _ Version _ CORE _ MIN _ MAJOR <nl> - # define io _ realm _ internal _ Version _ CORE _ MIN _ MAJOR 0L <nl> - # undef io _ realm _ internal _ Version _ CORE _ MIN _ MINOR <nl> - # define io _ realm _ internal _ Version _ CORE _ MIN _ MINOR 1L <nl> - # undef io _ realm _ internal _ Version _ CORE _ MIN _ PATCH <nl> - # define io _ realm _ internal _ Version _ CORE _ MIN _ PATCH 6L <nl> - # undef io _ realm _ internal _ Version _ REQUIRED _ JNI _ VERSION <nl> - # define io _ realm _ internal _ Version _ REQUIRED _ JNI _ VERSION 23L <nl> - / * <nl> - * Class : io _ realm _ internal _ Version <nl> - * Method : nativeGetVersion <nl> - * Signature : ( ) Ljava / lang / String ; <nl> - * / <nl> - JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Version _ nativeGetVersion <nl> - ( JNIEnv * , jclass ) ; <nl> - <nl> - / * <nl> - * Class : io _ realm _ internal _ Version <nl> - * Method : nativeHasFeature <nl> - * Signature : ( I ) Z <nl> - * / <nl> - JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Version _ nativeHasFeature <nl> - ( JNIEnv * , jclass , jint ) ; <nl> - <nl> - / * <nl> - * Class : io _ realm _ internal _ Version <nl> - * Method : nativeIsAtLeast <nl> - * Signature : ( III ) Z <nl> - * / <nl> - JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Version _ nativeIsAtLeast <nl> - ( JNIEnv * , jclass , jint , jint , jint ) ; <nl> - <nl> - / * <nl> - * Class : io _ realm _ internal _ Version <nl> - * Method : nativeGetAPIVersion <nl> - * Signature : ( ) I <nl> - * / <nl> - JNIEXPORT jint JNICALL Java _ io _ realm _ internal _ Version _ nativeGetAPIVersion <nl> - ( JNIEnv * , jclass ) ; <nl> - <nl> - # ifdef _ _ cplusplus <nl> - } <nl> - # endif <nl> - # endif <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java <nl> index 78deddf . . b89e49e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java <nl> @ @ - 69 , 8 + 69 , 6 @ @ public class RealmCore { <nl> System . loadLibrary ( jnilib ) ; <nl> } <nl> libraryIsLoaded = true ; <nl> - <nl> - Version . coreLibVersionCompatible ( true ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Version . java b / realm / realm - library / src / main / java / io / realm / internal / Version . java <nl> deleted file mode 100644 <nl> index fa47bb3 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Version . java <nl> + + + / dev / null <nl> @ @ - 1 , 79 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . internal ; <nl> - <nl> - public class Version { <nl> - <nl> - static final int CORE _ MIN _ MAJOR = 0 ; <nl> - static final int CORE _ MIN _ MINOR = 1 ; <nl> - static final int CORE _ MIN _ PATCH = 6 ; <nl> - static final int REQUIRED _ JNI _ VERSION = 23 ; <nl> - <nl> - public enum Feature { <nl> - Feature _ Debug ( 0 ) , <nl> - Feature _ Replication ( 1 ) ; <nl> - <nl> - Feature ( int nativeValue ) { <nl> - this . nativeFeature = nativeValue ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( " unused " ) <nl> - private final int nativeFeature ; <nl> - } <nl> - <nl> - public static String getCoreVersion ( ) { <nl> - return nativeGetVersion ( ) ; <nl> - } <nl> - <nl> - public static String getVersion ( ) { <nl> - / / Currently Core version and Java version is the same <nl> - return getCoreVersion ( ) ; <nl> - } <nl> - <nl> - public static boolean hasFeature ( Feature feature ) { <nl> - return nativeHasFeature ( feature . ordinal ( ) ) ; <nl> - } <nl> - <nl> - public static boolean coreLibVersionCompatible ( boolean throwIfNot ) { <nl> - String errTxt ; <nl> - boolean compatible = nativeIsAtLeast ( CORE _ MIN _ MAJOR , CORE _ MIN _ MINOR , CORE _ MIN _ PATCH ) ; <nl> - if ( ! compatible ) { <nl> - errTxt = " Version mismatch between realm . jar ( " <nl> - + CORE _ MIN _ MAJOR + " . " + CORE _ MIN _ MINOR + " . " + CORE _ MIN _ PATCH <nl> - + " ) and native core library ( " + getCoreVersion ( ) + " ) " ; <nl> - if ( throwIfNot ) <nl> - throw new RuntimeException ( errTxt ) ; <nl> - System . err . println ( errTxt ) ; <nl> - return false ; <nl> - } <nl> - <nl> - compatible = ( nativeGetAPIVersion ( ) = = REQUIRED _ JNI _ VERSION ) ; <nl> - if ( ! compatible ) { <nl> - errTxt = " Native lib API is version " + nativeGetAPIVersion ( ) <nl> - + " ! = " + REQUIRED _ JNI _ VERSION + " which is expected by the jar . " ; <nl> - if ( throwIfNot ) <nl> - throw new RuntimeException ( errTxt ) ; <nl> - System . err . println ( errTxt ) ; <nl> - } <nl> - return compatible ; <nl> - } <nl> - <nl> - static native String nativeGetVersion ( ) ; <nl> - static native boolean nativeHasFeature ( int feature ) ; <nl> - static native boolean nativeIsAtLeast ( int major , int minor , int patch ) ; <nl> - static native int nativeGetAPIVersion ( ) ; <nl> - }
NEAREST DIFF (one line): diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> index e772d42 . . a1f69e4 100644 <nl> - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . io . IOException ; <nl> import java . io . InputStream ; <nl> <nl> import io . realm . Realm ; <nl> + import io . realm . RealmConfiguration ; <nl> import io . realm . examples . realmmigrationexample . model . Migration ; <nl> import io . realm . examples . realmmigrationexample . model . Person ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> @ @ - 41 , 6 + 42 , 7 @ @ public class MigrationExampleActivity extends Activity { <nl> public static final String TAG = MigrationExampleActivity . class . getName ( ) ; <nl> <nl> private LinearLayout rootLayout = null ; <nl> + private Realm realm ; <nl> <nl> @ Override <nl> protected void onCreate ( Bundle savedInstanceState ) { <nl> @ @ - 51 , 35 + 53 , 47 @ @ public class MigrationExampleActivity extends Activity { <nl> rootLayout . removeAllViews ( ) ; <nl> <nl> / / 3 versions of the databases for testing . Normally you would only have one . <nl> - String path3 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; <nl> - String path1 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; <nl> - String path2 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; <nl> - <nl> - / / If you try to open a file that doesn ' t match your model an exception is thrown : <nl> - try { <nl> - / / should throw as migration is required <nl> - Realm . getInstance ( this , " default1 " ) ; <nl> - } catch ( RealmMigrationNeededException ex ) { <nl> - Log . i ( TAG , " Excellent ! This is expected . " ) ; <nl> - } <nl> - <nl> - Realm realm ; <nl> - <nl> - / / So you migrate your data <nl> - Realm . migrateRealmAtPath ( path1 , new Migration ( ) ) ; <nl> - realm = Realm . getInstance ( this , " default1 " ) ; <nl> + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; <nl> + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; <nl> + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; <nl> + <nl> + / / When you create a RealmConfiguration you can specify the version of the schema . <nl> + / / If the schema does not have that version a RealmMigrationNeededException will be thrown . <nl> + RealmConfiguration config0 = new RealmConfiguration . Builder ( this ) <nl> + . name ( " default0 " ) <nl> + . schemaVersion ( 3 ) <nl> + . build ( ) ; <nl> + <nl> + / / You can then manually call Realm . migrateRealm ( ) . <nl> + Realm . migrateRealm ( config0 , new Migration ( ) ) ; <nl> + realm = Realm . getInstance ( config0 ) ; <nl> + showStatus ( " Default0 " ) ; <nl> showStatus ( realm ) ; <nl> realm . close ( ) ; <nl> <nl> - / / Another migration test <nl> - Realm . migrateRealmAtPath ( path2 , new Migration ( ) ) ; <nl> - realm = Realm . getInstance ( this , " default2 " ) ; <nl> + / / Or you can add the migration code to the configuration . This will run the migration code without throwing <nl> + / / a RealmMigrationNeededException . <nl> + RealmConfiguration config1 = new RealmConfiguration . Builder ( this ) <nl> + . name ( " default1 " ) <nl> + . schemaVersion ( 3 ) <nl> + . migration ( new Migration ( ) ) <nl> + . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( config1 ) ; / / Automatically run migration if needed <nl> + showStatus ( " Default1 " ) ; <nl> showStatus ( realm ) ; <nl> realm . close ( ) ; <nl> <nl> - / / and a third : <nl> - Realm . migrateRealmAtPath ( path3 , new Migration ( ) ) ; <nl> - realm = Realm . getInstance ( this , " default3 " ) ; <nl> + / / or you can set . deleteRealmIfMigrationNeeded ( ) if you don ' t want to bother with migrations . <nl> + / / WARNING : This will delete all data in the Realm though . <nl> + RealmConfiguration config2 = new RealmConfiguration . Builder ( this ) <nl> + . name ( " default2 " ) <nl> + . schemaVersion ( 3 ) <nl> + . deleteRealmIfMigrationNeeded ( ) <nl> + . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( config2 ) ; <nl> + showStatus ( " default2 " ) ; <nl> showStatus ( realm ) ; <nl> realm . close ( ) ; <nl> } <nl> @ @ - 106 , 11 + 120 , 15 @ @ public class MigrationExampleActivity extends Activity { <nl> for ( Person person : realm . allObjects ( Person . class ) ) { <nl> stringBuilder . append ( person . toString ( ) ) . append ( " \ n " ) ; <nl> } <nl> - return stringBuilder . toString ( ) ; <nl> + <nl> + return ( stringBuilder . length ( ) = = 0 ) ? " < empty > " : stringBuilder . toString ( ) ; <nl> } <nl> <nl> private void showStatus ( Realm realm ) { <nl> - String txt = realmString ( realm ) ; <nl> + showStatus ( realmString ( realm ) ) ; <nl> + } <nl> + <nl> + private void showStatus ( String txt ) { <nl> Log . i ( TAG , txt ) ; <nl> TextView tv = new TextView ( this ) ; <nl> tv . setText ( txt ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> index 208e469 . . 99afd50 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> @ @ - 270 , 7 + 270 , 11 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> assertEquals ( 0 , realm . getVersion ( ) ) ; <nl> realm . close ( ) ; <nl> <nl> - / / Version upgrades should happen automatically if possible <nl> - realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; <nl> + / / Version upgrades should always require a migration . <nl> + try { <nl> + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; <nl> + fail ( ) ; <nl> + } catch ( RealmMigrationNeededException expected ) { <nl> + } <nl> } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 4b3ce71 . . 7aaacf6 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 64 , 7 + 64 , 6 @ @ import io . realm . internal . Util ; <nl> import io . realm . internal . android . DebugAndroidLogger ; <nl> import io . realm . internal . android . ReleaseAndroidLogger ; <nl> import io . realm . internal . log . RealmLog ; <nl> - import io . realm . internal . migration . SetVersionNumberMigration ; <nl> <nl> <nl> / * * <nl> @ @ - 1547 , 31 + 1546 , 37 @ @ public final class Realm implements Closeable { <nl> * @ param configuration <nl> * / <nl> public static synchronized void migrateRealm ( RealmConfiguration configuration ) { <nl> - if ( configuration . getMigration ( ) = = null ) { <nl> - migrateRealm ( configuration , new SetVersionNumberMigration ( configuration . getSchemaVersion ( ) ) ) ; <nl> - } else { <nl> - migrateRealm ( configuration , configuration . getMigration ( ) ) ; <nl> - } <nl> + migrateRealm ( configuration , null ) ; <nl> } <nl> <nl> / * * <nl> * Manually trigger a migration on a RealmMigration . <nl> * <nl> * @ param configuration { @ link RealmConfiguration } <nl> - * @ param migration { @ link RealmMigration } to run on the Realm . <nl> + * @ param migration { @ link RealmMigration } to run on the Realm . This will override any migration set on the <nl> + * configuration . <nl> * / <nl> public static void migrateRealm ( RealmConfiguration configuration , RealmMigration migration ) { <nl> - if ( migration = = null ) { <nl> - return ; <nl> + if ( configuration = = null ) { <nl> + throw new IllegalArgumentException ( " RealmConfiguration must be provided " ) ; <nl> + } <nl> + if ( migration = = null & & configuration . getMigration ( ) = = null ) { <nl> + throw new RealmMigrationNeededException ( configuration . getPath ( ) , " RealmMigration must be provided " ) ; <nl> } <nl> <nl> - Realm realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; <nl> - realm . beginTransaction ( ) ; <nl> - realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> - realm . commitTransaction ( ) ; <nl> - realm . close ( ) ; <nl> - <nl> - realmsCache . remove ( ) ; <nl> + RealmMigration realmMigration = ( migration = = null ) ? configuration . getMigration ( ) : migration ; <nl> + Realm realm = null ; <nl> + try { <nl> + realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . setVersion ( realmMigration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + realmsCache . remove ( ) ; <nl> + } <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java b / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java <nl> deleted file mode 100644 <nl> index 3c5784c . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2015 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . internal . migration ; <nl> - <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmMigration ; <nl> - <nl> - / * * <nl> - * Utility migration for automatically upgrading the version number of a Realm . <nl> - * / <nl> - public class SetVersionNumberMigration implements RealmMigration { <nl> - <nl> - private final int newVersion ; <nl> - <nl> - public SetVersionNumberMigration ( int newVersion ) { <nl> - this . newVersion = newVersion ; <nl> - } <nl> - <nl> - @ Override <nl> - public long execute ( Realm realm , long version ) { <nl> - return newVersion ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / realm / realm - jni / generate - jni - headers . sh b / realm / realm - jni / generate - jni - headers . sh 
 index f3abf1a . . a112b7c 100755 
 - - - a / realm / realm - jni / generate - jni - headers . sh 
 + + + b / realm / realm - jni / generate - jni - headers . sh 
 @ @ - 12 , 7 + 12 , 7 @ @ CLASSDIR = " $ ( pwd ) / . . / realm / build / intermediates / classes / release / " 
 JNIDIR = " $ ( pwd ) / src " 
 
 # Generate the headers 
 - ( cd " $ CLASSDIR " & & javah - jni - classpath " $ CLASSDIR " - d " $ JNIDIR " io . realm . internal . Group io . realm . internal . LinkView io . realm . internal . Row io . realm . internal . SharedGroup io . realm . internal . Table io . realm . internal . TableQuery io . realm . internal . TableView io . realm . internal . Util io . realm . internal . Version ) 
 + ( cd " $ CLASSDIR " & & javah - jni - classpath " $ CLASSDIR " - d " $ JNIDIR " io . realm . internal . Group io . realm . internal . LinkView io . realm . internal . Row io . realm . internal . SharedGroup io . realm . internal . Table io . realm . internal . TableQuery io . realm . internal . TableView io . realm . internal . Util ) 
 
 # Remove " empty " header files ( they have 13 lines ) 
 wc - l " $ JNIDIR " / * . h | grep " 13 " | awk ' { print $ 2 } ' | xargs rm - f 
 diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Version . cpp b / realm / realm - jni / src / io _ realm _ internal _ Version . cpp 
 deleted file mode 100644 
 index 4fc4bc5 . . 0000000 
 - - - a / realm / realm - jni / src / io _ realm _ internal _ Version . cpp 
 + + + / dev / null 
 @ @ - 1 , 66 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - # include < sstream > 
 - # include < string > 
 - 
 - # include " util . hpp " 
 - # include " io _ realm _ internal _ Version . h " 
 - # include < realm / version . hpp > 
 - # include < realm / string _ data . hpp > 
 - 
 - static int realm _ jni _ version = 23 ; 
 - 
 - 
 - using namespace realm ; 
 - 
 - JNIEXPORT jint JNICALL Java _ io _ realm _ internal _ Version _ nativeGetAPIVersion ( JNIEnv * , jclass ) 
 - { 
 - return realm _ jni _ version ; 
 - } 
 - 
 - JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Version _ nativeGetVersion ( JNIEnv * env , jclass ) 
 - { 
 - try { 
 - std : : string str ( Version : : get _ version ( ) ) ; 
 - StringData sd ( str ) ; 
 - return to _ jstring ( env , sd ) ; 
 - } 
 - CATCH _ STD ( ) ; 
 - return NULL ; 
 - } 
 - 
 - JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Version _ nativeHasFeature ( JNIEnv * env , jclass , jint feature ) 
 - { 
 - switch ( feature ) { 
 - case 0 : 
 - return Version : : has _ feature ( feature _ Debug ) ; 
 - case 1 : 
 - return Version : : has _ feature ( feature _ Replication ) ; 
 - default : { 
 - std : : ostringstream ss ; 
 - ss < < " Unknown feature code : " < < feature ; 
 - ThrowException ( env , RuntimeError , ss . str ( ) ) ; 
 - } 
 - } 
 - return false ; 
 - } 
 - 
 - JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Version _ nativeIsAtLeast ( JNIEnv * , jclass , 
 - jint major , jint minor , jint patch ) 
 - { 
 - return Version : : is _ at _ least ( major , minor , patch ) ; 
 - } 
 diff - - git a / realm / realm - jni / src / io _ realm _ internal _ Version . h b / realm / realm - jni / src / io _ realm _ internal _ Version . h 
 deleted file mode 100644 
 index 8bbe942 . . 0000000 
 - - - a / realm / realm - jni / src / io _ realm _ internal _ Version . h 
 + + + / dev / null 
 @ @ - 1 , 53 + 0 , 0 @ @ 
 - / * DO NOT EDIT THIS FILE - it is machine generated * / 
 - # include < jni . h > 
 - / * Header for class io _ realm _ internal _ Version * / 
 - 
 - # ifndef _ Included _ io _ realm _ internal _ Version 
 - # define _ Included _ io _ realm _ internal _ Version 
 - # ifdef _ _ cplusplus 
 - extern " C " { 
 - # endif 
 - # undef io _ realm _ internal _ Version _ CORE _ MIN _ MAJOR 
 - # define io _ realm _ internal _ Version _ CORE _ MIN _ MAJOR 0L 
 - # undef io _ realm _ internal _ Version _ CORE _ MIN _ MINOR 
 - # define io _ realm _ internal _ Version _ CORE _ MIN _ MINOR 1L 
 - # undef io _ realm _ internal _ Version _ CORE _ MIN _ PATCH 
 - # define io _ realm _ internal _ Version _ CORE _ MIN _ PATCH 6L 
 - # undef io _ realm _ internal _ Version _ REQUIRED _ JNI _ VERSION 
 - # define io _ realm _ internal _ Version _ REQUIRED _ JNI _ VERSION 23L 
 - / * 
 - * Class : io _ realm _ internal _ Version 
 - * Method : nativeGetVersion 
 - * Signature : ( ) Ljava / lang / String ; 
 - * / 
 - JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ Version _ nativeGetVersion 
 - ( JNIEnv * , jclass ) ; 
 - 
 - / * 
 - * Class : io _ realm _ internal _ Version 
 - * Method : nativeHasFeature 
 - * Signature : ( I ) Z 
 - * / 
 - JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Version _ nativeHasFeature 
 - ( JNIEnv * , jclass , jint ) ; 
 - 
 - / * 
 - * Class : io _ realm _ internal _ Version 
 - * Method : nativeIsAtLeast 
 - * Signature : ( III ) Z 
 - * / 
 - JNIEXPORT jboolean JNICALL Java _ io _ realm _ internal _ Version _ nativeIsAtLeast 
 - ( JNIEnv * , jclass , jint , jint , jint ) ; 
 - 
 - / * 
 - * Class : io _ realm _ internal _ Version 
 - * Method : nativeGetAPIVersion 
 - * Signature : ( ) I 
 - * / 
 - JNIEXPORT jint JNICALL Java _ io _ realm _ internal _ Version _ nativeGetAPIVersion 
 - ( JNIEnv * , jclass ) ; 
 - 
 - # ifdef _ _ cplusplus 
 - } 
 - # endif 
 - # endif 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java 
 index 78deddf . . b89e49e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmCore . java 
 @ @ - 69 , 8 + 69 , 6 @ @ public class RealmCore { 
 System . loadLibrary ( jnilib ) ; 
 } 
 libraryIsLoaded = true ; 
 - 
 - Version . coreLibVersionCompatible ( true ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Version . java b / realm / realm - library / src / main / java / io / realm / internal / Version . java 
 deleted file mode 100644 
 index fa47bb3 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Version . java 
 + + + / dev / null 
 @ @ - 1 , 79 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . internal ; 
 - 
 - public class Version { 
 - 
 - static final int CORE _ MIN _ MAJOR = 0 ; 
 - static final int CORE _ MIN _ MINOR = 1 ; 
 - static final int CORE _ MIN _ PATCH = 6 ; 
 - static final int REQUIRED _ JNI _ VERSION = 23 ; 
 - 
 - public enum Feature { 
 - Feature _ Debug ( 0 ) , 
 - Feature _ Replication ( 1 ) ; 
 - 
 - Feature ( int nativeValue ) { 
 - this . nativeFeature = nativeValue ; 
 - } 
 - 
 - @ SuppressWarnings ( " unused " ) 
 - private final int nativeFeature ; 
 - } 
 - 
 - public static String getCoreVersion ( ) { 
 - return nativeGetVersion ( ) ; 
 - } 
 - 
 - public static String getVersion ( ) { 
 - / / Currently Core version and Java version is the same 
 - return getCoreVersion ( ) ; 
 - } 
 - 
 - public static boolean hasFeature ( Feature feature ) { 
 - return nativeHasFeature ( feature . ordinal ( ) ) ; 
 - } 
 - 
 - public static boolean coreLibVersionCompatible ( boolean throwIfNot ) { 
 - String errTxt ; 
 - boolean compatible = nativeIsAtLeast ( CORE _ MIN _ MAJOR , CORE _ MIN _ MINOR , CORE _ MIN _ PATCH ) ; 
 - if ( ! compatible ) { 
 - errTxt = " Version mismatch between realm . jar ( " 
 - + CORE _ MIN _ MAJOR + " . " + CORE _ MIN _ MINOR + " . " + CORE _ MIN _ PATCH 
 - + " ) and native core library ( " + getCoreVersion ( ) + " ) " ; 
 - if ( throwIfNot ) 
 - throw new RuntimeException ( errTxt ) ; 
 - System . err . println ( errTxt ) ; 
 - return false ; 
 - } 
 - 
 - compatible = ( nativeGetAPIVersion ( ) = = REQUIRED _ JNI _ VERSION ) ; 
 - if ( ! compatible ) { 
 - errTxt = " Native lib API is version " + nativeGetAPIVersion ( ) 
 - + " ! = " + REQUIRED _ JNI _ VERSION + " which is expected by the jar . " ; 
 - if ( throwIfNot ) 
 - throw new RuntimeException ( errTxt ) ; 
 - System . err . println ( errTxt ) ; 
 - } 
 - return compatible ; 
 - } 
 - 
 - static native String nativeGetVersion ( ) ; 
 - static native boolean nativeHasFeature ( int feature ) ; 
 - static native boolean nativeIsAtLeast ( int major , int minor , int patch ) ; 
 - static native int nativeGetAPIVersion ( ) ; 
 - }

NEAREST DIFF:
diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 index e772d42 . . a1f69e4 100644 
 - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . io . IOException ; 
 import java . io . InputStream ; 
 
 import io . realm . Realm ; 
 + import io . realm . RealmConfiguration ; 
 import io . realm . examples . realmmigrationexample . model . Migration ; 
 import io . realm . examples . realmmigrationexample . model . Person ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 @ @ - 41 , 6 + 42 , 7 @ @ public class MigrationExampleActivity extends Activity { 
 public static final String TAG = MigrationExampleActivity . class . getName ( ) ; 
 
 private LinearLayout rootLayout = null ; 
 + private Realm realm ; 
 
 @ Override 
 protected void onCreate ( Bundle savedInstanceState ) { 
 @ @ - 51 , 35 + 53 , 47 @ @ public class MigrationExampleActivity extends Activity { 
 rootLayout . removeAllViews ( ) ; 
 
 / / 3 versions of the databases for testing . Normally you would only have one . 
 - String path3 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; 
 - String path1 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; 
 - String path2 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; 
 - 
 - / / If you try to open a file that doesn ' t match your model an exception is thrown : 
 - try { 
 - / / should throw as migration is required 
 - Realm . getInstance ( this , " default1 " ) ; 
 - } catch ( RealmMigrationNeededException ex ) { 
 - Log . i ( TAG , " Excellent ! This is expected . " ) ; 
 - } 
 - 
 - Realm realm ; 
 - 
 - / / So you migrate your data 
 - Realm . migrateRealmAtPath ( path1 , new Migration ( ) ) ; 
 - realm = Realm . getInstance ( this , " default1 " ) ; 
 + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; 
 + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; 
 + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; 
 + 
 + / / When you create a RealmConfiguration you can specify the version of the schema . 
 + / / If the schema does not have that version a RealmMigrationNeededException will be thrown . 
 + RealmConfiguration config0 = new RealmConfiguration . Builder ( this ) 
 + . name ( " default0 " ) 
 + . schemaVersion ( 3 ) 
 + . build ( ) ; 
 + 
 + / / You can then manually call Realm . migrateRealm ( ) . 
 + Realm . migrateRealm ( config0 , new Migration ( ) ) ; 
 + realm = Realm . getInstance ( config0 ) ; 
 + showStatus ( " Default0 " ) ; 
 showStatus ( realm ) ; 
 realm . close ( ) ; 
 
 - / / Another migration test 
 - Realm . migrateRealmAtPath ( path2 , new Migration ( ) ) ; 
 - realm = Realm . getInstance ( this , " default2 " ) ; 
 + / / Or you can add the migration code to the configuration . This will run the migration code without throwing 
 + / / a RealmMigrationNeededException . 
 + RealmConfiguration config1 = new RealmConfiguration . Builder ( this ) 
 + . name ( " default1 " ) 
 + . schemaVersion ( 3 ) 
 + . migration ( new Migration ( ) ) 
 + . build ( ) ; 
 + 
 + realm = Realm . getInstance ( config1 ) ; / / Automatically run migration if needed 
 + showStatus ( " Default1 " ) ; 
 showStatus ( realm ) ; 
 realm . close ( ) ; 
 
 - / / and a third : 
 - Realm . migrateRealmAtPath ( path3 , new Migration ( ) ) ; 
 - realm = Realm . getInstance ( this , " default3 " ) ; 
 + / / or you can set . deleteRealmIfMigrationNeeded ( ) if you don ' t want to bother with migrations . 
 + / / WARNING : This will delete all data in the Realm though . 
 + RealmConfiguration config2 = new RealmConfiguration . Builder ( this ) 
 + . name ( " default2 " ) 
 + . schemaVersion ( 3 ) 
 + . deleteRealmIfMigrationNeeded ( ) 
 + . build ( ) ; 
 + 
 + realm = Realm . getInstance ( config2 ) ; 
 + showStatus ( " default2 " ) ; 
 showStatus ( realm ) ; 
 realm . close ( ) ; 
 } 
 @ @ - 106 , 11 + 120 , 15 @ @ public class MigrationExampleActivity extends Activity { 
 for ( Person person : realm . allObjects ( Person . class ) ) { 
 stringBuilder . append ( person . toString ( ) ) . append ( " \ n " ) ; 
 } 
 - return stringBuilder . toString ( ) ; 
 + 
 + return ( stringBuilder . length ( ) = = 0 ) ? " < empty > " : stringBuilder . toString ( ) ; 
 } 
 
 private void showStatus ( Realm realm ) { 
 - String txt = realmString ( realm ) ; 
 + showStatus ( realmString ( realm ) ) ; 
 + } 
 + 
 + private void showStatus ( String txt ) { 
 Log . i ( TAG , txt ) ; 
 TextView tv = new TextView ( this ) ; 
 tv . setText ( txt ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 index 208e469 . . 99afd50 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 @ @ - 270 , 7 + 270 , 11 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 assertEquals ( 0 , realm . getVersion ( ) ) ; 
 realm . close ( ) ; 
 
 - / / Version upgrades should happen automatically if possible 
 - realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; 
 + / / Version upgrades should always require a migration . 
 + try { 
 + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; 
 + fail ( ) ; 
 + } catch ( RealmMigrationNeededException expected ) { 
 + } 
 } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 4b3ce71 . . 7aaacf6 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 64 , 7 + 64 , 6 @ @ import io . realm . internal . Util ; 
 import io . realm . internal . android . DebugAndroidLogger ; 
 import io . realm . internal . android . ReleaseAndroidLogger ; 
 import io . realm . internal . log . RealmLog ; 
 - import io . realm . internal . migration . SetVersionNumberMigration ; 
 
 
 / * * 
 @ @ - 1547 , 31 + 1546 , 37 @ @ public final class Realm implements Closeable { 
 * @ param configuration 
 * / 
 public static synchronized void migrateRealm ( RealmConfiguration configuration ) { 
 - if ( configuration . getMigration ( ) = = null ) { 
 - migrateRealm ( configuration , new SetVersionNumberMigration ( configuration . getSchemaVersion ( ) ) ) ; 
 - } else { 
 - migrateRealm ( configuration , configuration . getMigration ( ) ) ; 
 - } 
 + migrateRealm ( configuration , null ) ; 
 } 
 
 / * * 
 * Manually trigger a migration on a RealmMigration . 
 * 
 * @ param configuration { @ link RealmConfiguration } 
 - * @ param migration { @ link RealmMigration } to run on the Realm . 
 + * @ param migration { @ link RealmMigration } to run on the Realm . This will override any migration set on the 
 + * configuration . 
 * / 
 public static void migrateRealm ( RealmConfiguration configuration , RealmMigration migration ) { 
 - if ( migration = = null ) { 
 - return ; 
 + if ( configuration = = null ) { 
 + throw new IllegalArgumentException ( " RealmConfiguration must be provided " ) ; 
 + } 
 + if ( migration = = null & & configuration . getMigration ( ) = = null ) { 
 + throw new RealmMigrationNeededException ( configuration . getPath ( ) , " RealmMigration must be provided " ) ; 
 } 
 
 - Realm realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; 
 - realm . beginTransaction ( ) ; 
 - realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; 
 - realm . commitTransaction ( ) ; 
 - realm . close ( ) ; 
 - 
 - realmsCache . remove ( ) ; 
 + RealmMigration realmMigration = ( migration = = null ) ? configuration . getMigration ( ) : migration ; 
 + Realm realm = null ; 
 + try { 
 + realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . setVersion ( realmMigration . execute ( realm , realm . getVersion ( ) ) ) ; 
 + realm . commitTransaction ( ) ; 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + realmsCache . remove ( ) ; 
 + } 
 + } 
 } 
 
 / * * 
 diff - - git a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java b / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java 
 deleted file mode 100644 
 index 3c5784c . . 0000000 
 - - - a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2015 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . internal . migration ; 
 - 
 - import io . realm . Realm ; 
 - import io . realm . RealmMigration ; 
 - 
 - / * * 
 - * Utility migration for automatically upgrading the version number of a Realm . 
 - * / 
 - public class SetVersionNumberMigration implements RealmMigration { 
 - 
 - private final int newVersion ; 
 - 
 - public SetVersionNumberMigration ( int newVersion ) { 
 - this . newVersion = newVersion ; 
 - } 
 - 
 - @ Override 
 - public long execute ( Realm realm , long version ) { 
 - return newVersion ; 
 - } 
 - }
