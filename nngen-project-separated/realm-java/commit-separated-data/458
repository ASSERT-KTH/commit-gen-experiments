BLEU SCORE: 0.04266709328925954

TEST MSG: Discard temp tests
GENERATED MSG: Includes fix in case of re - instantiation

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> index ebb0a0b . . b058f33 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> @ @ - 27 , 10 + 27 , 7 @ @ import org . junit . runner . RunWith ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . Cat ; <nl> - import io . realm . entities . Dog ; <nl> import io . realm . entities . pojo . AllTypesRealmModel ; <nl> - import io . realm . log . LogLevel ; <nl> - import io . realm . log . RealmLog ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . rule . RunTestInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> @ @ - 148 , 21 + 145 , 11 @ @ public class RealmChangeListenerTests { <nl> cat . addChangeListener ( new RealmChangeListener < Cat > ( ) { <nl> @ Override <nl> public void onChange ( Cat object ) { <nl> - / / assertEquals ( " cat1 " , object . getName ( ) ) ; <nl> - / / looperThread . testComplete ( ) ; <nl> - Cat cat = object ; <nl> + assertEquals ( " cat1 " , object . getName ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> - cat . getAge ( ) ; <nl> <nl> - / * <nl> - realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> - @ Override <nl> - public void execute ( Realm realm ) { <nl> - realm . where ( Cat . class ) . findFirst ( ) . setName ( " cat1 " ) ; <nl> - } <nl> - } ) ; <nl> - * / <nl> realm . beginTransaction ( ) ; <nl> cat . setName ( " cat1 " ) ; <nl> realm . commitTransaction ( ) ; <nl> @ @ - 238 , 44 + 225 , 4 @ @ public class RealmChangeListenerTests { <nl> allTypes . setString ( AllTypes . FIELD _ STRING , " test data 1 " ) ; <nl> dynamicRealm . commitTransaction ( ) ; <nl> } <nl> - <nl> - @ Test <nl> - @ RunTestInLooperThread <nl> - / / FIXME : Used for DEV . Remove before merge <nl> - public void myTest ( ) { <nl> - Realm realm = looperThread . realm ; <nl> - RealmLog . setLevel ( LogLevel . ALL ) ; <nl> - realm . executeTransaction ( new Realm . Transaction ( ) { <nl> - @ Override <nl> - public void execute ( Realm realm ) { <nl> - realm . createObject ( AllTypes . class ) ; <nl> - } <nl> - } ) ; <nl> - final RealmResults < Cat > cats = realm . where ( Cat . class ) . findAll ( ) ; <nl> - final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; <nl> - final RealmResults < AllTypes > allTypes = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> - double avg = allTypes . average ( AllTypes . FIELD _ DOUBLE ) ; <nl> - looperThread . keepStrongReference . add ( cats ) ; <nl> - looperThread . keepStrongReference . add ( dogs ) ; <nl> - cats . addChangeListener ( new RealmChangeListener < RealmResults < Cat > > ( ) { <nl> - @ Override <nl> - public void onChange ( RealmResults < Cat > result ) { <nl> - Cat cat = result . first ( ) ; <nl> - assertEquals ( " cat1 " , result . first ( ) . getName ( ) ) ; <nl> - assertEquals ( " dog1 " , dogs . first ( ) . getName ( ) ) ; <nl> - looperThread . testComplete ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> - @ Override <nl> - public void execute ( Realm realm ) { <nl> - Cat cat = realm . createObject ( Cat . class ) ; <nl> - cat . setName ( " cat1 " ) ; <nl> - <nl> - Dog dog = realm . createObject ( Dog . class ) ; <nl> - dog . setName ( " dog1 " ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 66a1518 . . 482d48b 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 232 , 4 + 232 , 67 @ @ public class NotificationsTest extends AndroidTestCase { <nl> <nl> thread . join ( 1 ) ; <nl> } <nl> + <nl> + public void testAutoUpdateRealmResults ( ) { <nl> + final int TEST _ SIZE = 10 ; <nl> + final AtomicBoolean cantRun = new AtomicBoolean ( true ) ; <nl> + final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> + <nl> + <nl> + Realm . deleteRealmFile ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + / / assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> + <nl> + Thread listenerThread = new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Looper . prepare ( ) ; <nl> + Realm . deleteRealmFile ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; <nl> + assertEquals ( 0 , dogs . size ( ) ) ; <nl> + realm . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + / / Re - instatiation on each notification is intentional <nl> + Realm r = Realm . getInstance ( getContext ( ) ) ; <nl> + counter . incrementAndGet ( ) ; <nl> + } <nl> + } ) ; <nl> + cantRun . set ( false ) ; <nl> + Looper . loop ( ) ; <nl> + } <nl> + } ; <nl> + listenerThread . start ( ) ; <nl> + <nl> + while ( cantRun . get ( ) ) { <nl> + try { <nl> + Thread . sleep ( 100 ) ; <nl> + } <nl> + catch ( InterruptedException ignored ) { <nl> + fail ( ) ; <nl> + } <nl> + } <nl> + try { <nl> + Thread . sleep ( 1000 ) ; <nl> + } catch ( InterruptedException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setName ( " Rex " + i ) ; <nl> + } <nl> + realm . commitTransaction ( ) ; <nl> + assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> + <nl> + try { <nl> + listenerThread . join ( 2000 ) ; <nl> + } catch ( InterruptedException ignored ) { <nl> + fail ( ) ; <nl> + } <nl> + / / one for initTable and one for the commit <nl> + assertEquals ( 2 , counter . get ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 2cedd8d . . e80dec2 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 363 , 6 + 363 , 8 @ @ public class Realm { <nl> realm = new Realm ( absolutePath , key , autoRefresh ) ; <nl> realms . put ( absolutePath , realm ) ; <nl> realmsCache . set ( realms ) ; <nl> + } else { <nl> + return realm ; <nl> } <nl> if ( validateSchema ) { <nl> Class < ? > validationClass ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 index ebb0a0b . . b058f33 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 @ @ - 27 , 10 + 27 , 7 @ @ import org . junit . runner . RunWith ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . Cat ; 
 - import io . realm . entities . Dog ; 
 import io . realm . entities . pojo . AllTypesRealmModel ; 
 - import io . realm . log . LogLevel ; 
 - import io . realm . log . RealmLog ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . rule . RunTestInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 @ @ - 148 , 21 + 145 , 11 @ @ public class RealmChangeListenerTests { 
 cat . addChangeListener ( new RealmChangeListener < Cat > ( ) { 
 @ Override 
 public void onChange ( Cat object ) { 
 - / / assertEquals ( " cat1 " , object . getName ( ) ) ; 
 - / / looperThread . testComplete ( ) ; 
 - Cat cat = object ; 
 + assertEquals ( " cat1 " , object . getName ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 - cat . getAge ( ) ; 
 
 - / * 
 - realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 - @ Override 
 - public void execute ( Realm realm ) { 
 - realm . where ( Cat . class ) . findFirst ( ) . setName ( " cat1 " ) ; 
 - } 
 - } ) ; 
 - * / 
 realm . beginTransaction ( ) ; 
 cat . setName ( " cat1 " ) ; 
 realm . commitTransaction ( ) ; 
 @ @ - 238 , 44 + 225 , 4 @ @ public class RealmChangeListenerTests { 
 allTypes . setString ( AllTypes . FIELD _ STRING , " test data 1 " ) ; 
 dynamicRealm . commitTransaction ( ) ; 
 } 
 - 
 - @ Test 
 - @ RunTestInLooperThread 
 - / / FIXME : Used for DEV . Remove before merge 
 - public void myTest ( ) { 
 - Realm realm = looperThread . realm ; 
 - RealmLog . setLevel ( LogLevel . ALL ) ; 
 - realm . executeTransaction ( new Realm . Transaction ( ) { 
 - @ Override 
 - public void execute ( Realm realm ) { 
 - realm . createObject ( AllTypes . class ) ; 
 - } 
 - } ) ; 
 - final RealmResults < Cat > cats = realm . where ( Cat . class ) . findAll ( ) ; 
 - final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; 
 - final RealmResults < AllTypes > allTypes = realm . where ( AllTypes . class ) . findAll ( ) ; 
 - double avg = allTypes . average ( AllTypes . FIELD _ DOUBLE ) ; 
 - looperThread . keepStrongReference . add ( cats ) ; 
 - looperThread . keepStrongReference . add ( dogs ) ; 
 - cats . addChangeListener ( new RealmChangeListener < RealmResults < Cat > > ( ) { 
 - @ Override 
 - public void onChange ( RealmResults < Cat > result ) { 
 - Cat cat = result . first ( ) ; 
 - assertEquals ( " cat1 " , result . first ( ) . getName ( ) ) ; 
 - assertEquals ( " dog1 " , dogs . first ( ) . getName ( ) ) ; 
 - looperThread . testComplete ( ) ; 
 - } 
 - } ) ; 
 - 
 - realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 - @ Override 
 - public void execute ( Realm realm ) { 
 - Cat cat = realm . createObject ( Cat . class ) ; 
 - cat . setName ( " cat1 " ) ; 
 - 
 - Dog dog = realm . createObject ( Dog . class ) ; 
 - dog . setName ( " dog1 " ) ; 
 - } 
 - } ) ; 
 - } 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 index 66a1518 . . 482d48b 100644 
 - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 232 , 4 + 232 , 67 @ @ public class NotificationsTest extends AndroidTestCase { 
 
 thread . join ( 1 ) ; 
 } 
 + 
 + public void testAutoUpdateRealmResults ( ) { 
 + final int TEST _ SIZE = 10 ; 
 + final AtomicBoolean cantRun = new AtomicBoolean ( true ) ; 
 + final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 + 
 + 
 + Realm . deleteRealmFile ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + / / assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 + 
 + Thread listenerThread = new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Looper . prepare ( ) ; 
 + Realm . deleteRealmFile ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; 
 + assertEquals ( 0 , dogs . size ( ) ) ; 
 + realm . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + / / Re - instatiation on each notification is intentional 
 + Realm r = Realm . getInstance ( getContext ( ) ) ; 
 + counter . incrementAndGet ( ) ; 
 + } 
 + } ) ; 
 + cantRun . set ( false ) ; 
 + Looper . loop ( ) ; 
 + } 
 + } ; 
 + listenerThread . start ( ) ; 
 + 
 + while ( cantRun . get ( ) ) { 
 + try { 
 + Thread . sleep ( 100 ) ; 
 + } 
 + catch ( InterruptedException ignored ) { 
 + fail ( ) ; 
 + } 
 + } 
 + try { 
 + Thread . sleep ( 1000 ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + realm . beginTransaction ( ) ; 
 + for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setName ( " Rex " + i ) ; 
 + } 
 + realm . commitTransaction ( ) ; 
 + assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 + 
 + try { 
 + listenerThread . join ( 2000 ) ; 
 + } catch ( InterruptedException ignored ) { 
 + fail ( ) ; 
 + } 
 + / / one for initTable and one for the commit 
 + assertEquals ( 2 , counter . get ( ) ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 2cedd8d . . e80dec2 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 363 , 6 + 363 , 8 @ @ public class Realm { 
 realm = new Realm ( absolutePath , key , autoRefresh ) ; 
 realms . put ( absolutePath , realm ) ; 
 realmsCache . set ( realms ) ; 
 + } else { 
 + return realm ; 
 } 
 if ( validateSchema ) { 
 Class < ? > validationClass ;
