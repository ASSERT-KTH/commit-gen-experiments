BLEU SCORE: 0.022882533035912193

TEST MSG: Remove unnecessary array allocations
GENERATED MSG: add test for closed Realm . removed dead code

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index a61d98c . . 7df9649 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 1421 , 8 + 1421 , 8 @ @ public class Realm extends BaseRealm { <nl> return ; <nl> } <nl> <nl> - final SharedRealm . VersionID [ ] versionID = new SharedRealm . VersionID [ 1 ] ; <nl> - final Throwable [ ] exception = new Throwable [ 1 ] ; <nl> + SharedRealm . VersionID versionID = null ; <nl> + Throwable exception = null ; <nl> <nl> final Realm bgRealm = Realm . getInstance ( realmConfiguration ) ; <nl> bgRealm . beginTransaction ( ) ; <nl> @ @ - 1436 , 18 + 1436 , 19 @ @ public class Realm extends BaseRealm { <nl> bgRealm . commitTransaction ( ) ; <nl> / / The bgRealm needs to be closed before post event to caller ' s handler to avoid concurrency <nl> / / problem . This is currently guaranteed by posting callbacks later below . <nl> - versionID [ 0 ] = bgRealm . sharedRealm . getVersionID ( ) ; <nl> + versionID = bgRealm . sharedRealm . getVersionID ( ) ; <nl> } catch ( final Throwable e ) { <nl> - exception [ 0 ] = e ; <nl> + exception = e ; <nl> } finally { <nl> / / SharedGroup : : close ( ) will cancel the transaction if needed . <nl> bgRealm . close ( ) ; <nl> } <nl> <nl> - final Throwable backgroundException = exception [ 0 ] ; <nl> + final Throwable backgroundException = exception ; <nl> + final SharedRealm . VersionID backgroundVersionID = versionID ; <nl> / / Cannot be interrupted anymore . <nl> if ( canDeliverNotification ) { <nl> - if ( versionID [ 0 ] ! = null & & onSuccess ! = null ) { <nl> + if ( backgroundVersionID ! = null & & onSuccess ! = null ) { <nl> realmNotifier . post ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> @ @ - 1458 , 7 + 1459 , 7 @ @ public class Realm extends BaseRealm { <nl> return ; <nl> } <nl> <nl> - if ( sharedRealm . getVersionID ( ) . compareTo ( versionID [ 0 ] ) < 0 ) { <nl> + if ( sharedRealm . getVersionID ( ) . compareTo ( backgroundVersionID ) < 0 ) { <nl> sharedRealm . realmNotifier . addTransactionCallback ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) {
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> index e2469fc . . 4e7ea04 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmAsyncQueryTests . java <nl> @ @ - 135 , 6 + 135 , 67 @ @ public class RealmAsyncQueryTests extends InstrumentationTestCase { <nl> } <nl> } <nl> <nl> + / / async query on closed Realm <nl> + public void testFindAllOnClosedRealm ( ) throws Throwable { <nl> + setDebugModeForAsyncRealmQuery ( ADVANCE _ ONE _ READ , RetryPolicy . MODE _ INDEFINITELY , RETRY _ NUMBER _ NOT _ APPLICABLE ) ; <nl> + final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; <nl> + final Looper [ ] looper = new Looper [ 1 ] ; <nl> + final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> + executorService . submit ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Looper . prepare ( ) ; <nl> + looper [ 0 ] = Looper . myLooper ( ) ; <nl> + Realm realm = null ; <nl> + try { <nl> + realm = openRealmInstance ( " test _ find _ all _ closed _ realm " ) ; <nl> + populateTestRealm ( realm , 10 ) ; <nl> + <nl> + / / async query ( will run on different thread ) <nl> + realm . where ( AllTypes . class ) <nl> + . between ( " columnLong " , 0 , 9 ) <nl> + . findAll ( new Realm . DebugRealmResultsQueryCallback < AllTypes > ( ) { <nl> + @ Override <nl> + public void onSuccess ( RealmResults < AllTypes > results ) { <nl> + signalCallbackFinished . countDown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onError ( Exception t ) { <nl> + t . printStackTrace ( ) ; <nl> + threadAssertionError [ 0 ] = t ; <nl> + signalCallbackFinished . countDown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onBackgroundQueryCompleted ( Realm realm ) { <nl> + realm . close ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + Looper . loop ( ) ; / / ready to receive callback <nl> + <nl> + } finally { <nl> + if ( signalCallbackFinished . getCount ( ) > 0 ) { <nl> + signalCallbackFinished . countDown ( ) ; <nl> + } <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + } <nl> + } <nl> + } <nl> + } ) ; <nl> + <nl> + / / wait until the callback of our async query proceed <nl> + signalCallbackFinished . await ( ) ; <nl> + looper [ 0 ] . quit ( ) ; <nl> + executorService . shutdownNow ( ) ; <nl> + if ( null = = threadAssertionError [ 0 ] | | ! ( threadAssertionError [ 0 ] instanceof RuntimeException ) ) { <nl> + fail ( " Expecting RuntimeException : Unspecified exception . Detached accessor in io _ realm _ internal _ TableQuery . cpp " ) ; <nl> + } <nl> + } <nl> + <nl> / / async query that should fail , because the caller thread has advanced <nl> / / the version of the Realm , which is different from the one used by <nl> / / the background thread . Since no retry policy was defined , we should fail . <nl> @ @ - 168 , 11 + 229 , 7 @ @ public class RealmAsyncQueryTests extends InstrumentationTestCase { <nl> <nl> @ Override <nl> public void onError ( Exception t ) { <nl> - try { <nl> - threadAssertionError [ 0 ] = t ; <nl> - } finally { <nl> - signalCallbackFinished . countDown ( ) ; <nl> - } <nl> + threadAssertionError [ 0 ] = t ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 12ac423 . . 63c510e 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 1917 , 13 + 1917 , 4 @ @ public final class Realm implements Closeable { <nl> public long getSharedGroupPointer ( ) { <nl> return sharedGroup . getNativePointer ( ) ; <nl> } <nl> - <nl> - / / FIXME this method should be available only within RealmImpl ( see above comment ) <nl> - public long [ ] getSharedGroupVersion ( ) { <nl> - return sharedGroup . getVersionID ( ) ; <nl> - } <nl> - <nl> - public void setSharedGroupAtVersion ( long [ ] callerSharedGroupVersion ) { <nl> - sharedGroup . beginReadAtVersionID ( callerSharedGroupVersion ) ; <nl> - } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index fdb10f7 . . 0066c39 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1846 , 7 + 1846 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> <nl> @ Override <nl> public void handleMessage ( Message msg ) { <nl> - if ( ! asyncRequest . isCancelled ( ) ) { <nl> + if ( ! asyncRequest . isCancelled ( ) ) { / / FIXME check if realm is still open / valid <nl> try { <nl> switch ( msg . what ) { <nl> case MSG _ SUCCESS :

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index a61d98c . . 7df9649 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 1421 , 8 + 1421 , 8 @ @ public class Realm extends BaseRealm { 
 return ; 
 } 
 
 - final SharedRealm . VersionID [ ] versionID = new SharedRealm . VersionID [ 1 ] ; 
 - final Throwable [ ] exception = new Throwable [ 1 ] ; 
 + SharedRealm . VersionID versionID = null ; 
 + Throwable exception = null ; 
 
 final Realm bgRealm = Realm . getInstance ( realmConfiguration ) ; 
 bgRealm . beginTransaction ( ) ; 
 @ @ - 1436 , 18 + 1436 , 19 @ @ public class Realm extends BaseRealm { 
 bgRealm . commitTransaction ( ) ; 
 / / The bgRealm needs to be closed before post event to caller ' s handler to avoid concurrency 
 / / problem . This is currently guaranteed by posting callbacks later below . 
 - versionID [ 0 ] = bgRealm . sharedRealm . getVersionID ( ) ; 
 + versionID = bgRealm . sharedRealm . getVersionID ( ) ; 
 } catch ( final Throwable e ) { 
 - exception [ 0 ] = e ; 
 + exception = e ; 
 } finally { 
 / / SharedGroup : : close ( ) will cancel the transaction if needed . 
 bgRealm . close ( ) ; 
 } 
 
 - final Throwable backgroundException = exception [ 0 ] ; 
 + final Throwable backgroundException = exception ; 
 + final SharedRealm . VersionID backgroundVersionID = versionID ; 
 / / Cannot be interrupted anymore . 
 if ( canDeliverNotification ) { 
 - if ( versionID [ 0 ] ! = null & & onSuccess ! = null ) { 
 + if ( backgroundVersionID ! = null & & onSuccess ! = null ) { 
 realmNotifier . post ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 @ @ - 1458 , 7 + 1459 , 7 @ @ public class Realm extends BaseRealm { 
 return ; 
 } 
 
 - if ( sharedRealm . getVersionID ( ) . compareTo ( versionID [ 0 ] ) < 0 ) { 
 + if ( sharedRealm . getVersionID ( ) . compareTo ( backgroundVersionID ) < 0 ) { 
 sharedRealm . realmNotifier . addTransactionCallback ( new Runnable ( ) { 
 @ Override 
 public void run ( ) {

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmAsyncQueryTests . java b / realm / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 index e2469fc . . 4e7ea04 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmAsyncQueryTests . java 
 @ @ - 135 , 6 + 135 , 67 @ @ public class RealmAsyncQueryTests extends InstrumentationTestCase { 
 } 
 } 
 
 + / / async query on closed Realm 
 + public void testFindAllOnClosedRealm ( ) throws Throwable { 
 + setDebugModeForAsyncRealmQuery ( ADVANCE _ ONE _ READ , RetryPolicy . MODE _ INDEFINITELY , RETRY _ NUMBER _ NOT _ APPLICABLE ) ; 
 + final CountDownLatch signalCallbackFinished = new CountDownLatch ( 1 ) ; 
 + final Looper [ ] looper = new Looper [ 1 ] ; 
 + final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 + ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 + executorService . submit ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Looper . prepare ( ) ; 
 + looper [ 0 ] = Looper . myLooper ( ) ; 
 + Realm realm = null ; 
 + try { 
 + realm = openRealmInstance ( " test _ find _ all _ closed _ realm " ) ; 
 + populateTestRealm ( realm , 10 ) ; 
 + 
 + / / async query ( will run on different thread ) 
 + realm . where ( AllTypes . class ) 
 + . between ( " columnLong " , 0 , 9 ) 
 + . findAll ( new Realm . DebugRealmResultsQueryCallback < AllTypes > ( ) { 
 + @ Override 
 + public void onSuccess ( RealmResults < AllTypes > results ) { 
 + signalCallbackFinished . countDown ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception t ) { 
 + t . printStackTrace ( ) ; 
 + threadAssertionError [ 0 ] = t ; 
 + signalCallbackFinished . countDown ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onBackgroundQueryCompleted ( Realm realm ) { 
 + realm . close ( ) ; 
 + } 
 + } ) ; 
 + 
 + Looper . loop ( ) ; / / ready to receive callback 
 + 
 + } finally { 
 + if ( signalCallbackFinished . getCount ( ) > 0 ) { 
 + signalCallbackFinished . countDown ( ) ; 
 + } 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + } 
 + } 
 + } 
 + } ) ; 
 + 
 + / / wait until the callback of our async query proceed 
 + signalCallbackFinished . await ( ) ; 
 + looper [ 0 ] . quit ( ) ; 
 + executorService . shutdownNow ( ) ; 
 + if ( null = = threadAssertionError [ 0 ] | | ! ( threadAssertionError [ 0 ] instanceof RuntimeException ) ) { 
 + fail ( " Expecting RuntimeException : Unspecified exception . Detached accessor in io _ realm _ internal _ TableQuery . cpp " ) ; 
 + } 
 + } 
 + 
 / / async query that should fail , because the caller thread has advanced 
 / / the version of the Realm , which is different from the one used by 
 / / the background thread . Since no retry policy was defined , we should fail . 
 @ @ - 168 , 11 + 229 , 7 @ @ public class RealmAsyncQueryTests extends InstrumentationTestCase { 
 
 @ Override 
 public void onError ( Exception t ) { 
 - try { 
 - threadAssertionError [ 0 ] = t ; 
 - } finally { 
 - signalCallbackFinished . countDown ( ) ; 
 - } 
 + threadAssertionError [ 0 ] = t ; 
 } 
 
 @ Override 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 12ac423 . . 63c510e 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 1917 , 13 + 1917 , 4 @ @ public final class Realm implements Closeable { 
 public long getSharedGroupPointer ( ) { 
 return sharedGroup . getNativePointer ( ) ; 
 } 
 - 
 - / / FIXME this method should be available only within RealmImpl ( see above comment ) 
 - public long [ ] getSharedGroupVersion ( ) { 
 - return sharedGroup . getVersionID ( ) ; 
 - } 
 - 
 - public void setSharedGroupAtVersion ( long [ ] callerSharedGroupVersion ) { 
 - sharedGroup . beginReadAtVersionID ( callerSharedGroupVersion ) ; 
 - } 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index fdb10f7 . . 0066c39 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1846 , 7 + 1846 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 
 @ Override 
 public void handleMessage ( Message msg ) { 
 - if ( ! asyncRequest . isCancelled ( ) ) { 
 + if ( ! asyncRequest . isCancelled ( ) ) { / / FIXME check if realm is still open / valid 
 try { 
 switch ( msg . what ) { 
 case MSG _ SUCCESS :
