BLEU SCORE: 0.03283637368030199

TEST MSG: Remove set _ auto _ refresh FIXME
GENERATED MSG: Refresh snapshot when Collection . clear

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> index 188adf8 . . 1897c5e 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> @ @ - 101 , 9 + 101 , 6 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeGetSharedRealm ( JNIEnv * env , jclass , jlo <nl> try { <nl> auto shared _ realm = Realm : : get _ shared _ realm ( * config ) ; <nl> shared _ realm - > m _ binding _ context = JavaBindingContext : : create ( env , realm _ notifier ) ; <nl> - / / FIXME : Disabled for the collection notifications . There might be some places still need it . <nl> - / / advance _ read needs to be handled by Java because of async query . <nl> - / / shared _ realm - > set _ auto _ refresh ( false ) ; <nl> return reinterpret _ cast < jlong > ( new SharedRealm ( std : : move ( shared _ realm ) ) ) ; <nl> } CATCH _ STD ( ) <nl> return static _ cast < jlong > ( NULL ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index e1a1ba7 . . df64a65 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 191 , 6 + 191 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeClear ( JNIEnv * env , jclass , jlong native _ <nl> try { <nl> auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> wrapper - > get _ results ( ) . clear ( ) ; <nl> + / / Refresh snapshot <nl> + wrapper - > switch _ to _ snapshot ( ) ; <nl> } CATCH _ STD ( ) <nl> } <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 index 188adf8 . . 1897c5e 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 @ @ - 101 , 9 + 101 , 6 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeGetSharedRealm ( JNIEnv * env , jclass , jlo 
 try { 
 auto shared _ realm = Realm : : get _ shared _ realm ( * config ) ; 
 shared _ realm - > m _ binding _ context = JavaBindingContext : : create ( env , realm _ notifier ) ; 
 - / / FIXME : Disabled for the collection notifications . There might be some places still need it . 
 - / / advance _ read needs to be handled by Java because of async query . 
 - / / shared _ realm - > set _ auto _ refresh ( false ) ; 
 return reinterpret _ cast < jlong > ( new SharedRealm ( std : : move ( shared _ realm ) ) ) ; 
 } CATCH _ STD ( ) 
 return static _ cast < jlong > ( NULL ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index e1a1ba7 . . df64a65 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 191 , 6 + 191 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeClear ( JNIEnv * env , jclass , jlong native _ 
 try { 
 auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 wrapper - > get _ results ( ) . clear ( ) ; 
 + / / Refresh snapshot 
 + wrapper - > switch _ to _ snapshot ( ) ; 
 } CATCH _ STD ( ) 
 } 

