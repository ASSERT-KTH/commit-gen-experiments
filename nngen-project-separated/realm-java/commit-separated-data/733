BLEU SCORE: 0.037477767366779206

TEST MSG: Move the analytics collection from the AP to the transformer .
GENERATED MSG: Add analytics on annotation

TEST DIFF (one line): diff - - git a / realm - transformer / build . gradle b / realm - transformer / build . gradle <nl> index 0871dca . . c9ee011 100644 <nl> - - - a / realm - transformer / build . gradle <nl> + + + b / realm - transformer / build . gradle <nl> @ @ - 9 , 6 + 9 , 7 @ @ buildscript { <nl> } <nl> <nl> apply plugin : ' groovy ' <nl> + apply plugin : ' java ' <nl> apply plugin : ' maven ' <nl> apply plugin : ' maven - publish ' <nl> apply plugin : ' com . jfrog . artifactory ' <nl> @ @ - 30 , 9 + 31 , 13 @ @ configurations { <nl> compile . extendsFrom provided <nl> } <nl> <nl> + / / Include the generated Version file <nl> sourceSets { <nl> main { <nl> compileClasspath + = configurations . provided <nl> + java { <nl> + srcDir ' build / generated - src / main / java ' <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 48 , 6 + 53 , 18 @ @ dependencies { <nl> } <nl> } <nl> <nl> + / / for Ant filter <nl> + import org . apache . tools . ant . filters . ReplaceTokens <nl> + <nl> + task generateVersionClass ( type : Copy ) { <nl> + from ' src / main / templates / Version . java ' <nl> + into ' build / generated - src / main / java / io / realm / transformer ' <nl> + filter ( ReplaceTokens , tokens : [ version : version ] ) <nl> + outputs . upToDateWhen { false } <nl> + } <nl> + <nl> + compileJava . dependsOn generateVersionClass <nl> + <nl> def commonPom = { <nl> licenses { <nl> license { <nl> diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> index 2cee782 . . 1e9ec46 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> @ @ - 24 , 6 + 24 , 7 @ @ import com . google . common . io . Files <nl> import groovy . io . FileType <nl> import io . realm . annotations . Ignore <nl> import javassist . ClassPool <nl> + import javassist . CtClass <nl> import javassist . LoaderClassPath <nl> import org . slf4j . Logger <nl> import org . slf4j . LoggerFactory <nl> @ @ - 135 , 6 + 136 , 41 @ @ class RealmTransformer extends Transform { <nl> <nl> def toc = System . currentTimeMillis ( ) <nl> logger . info " Realm Transform time : $ { toc - tic } milliseconds " <nl> + <nl> + sendAnalytics ( inputs , inputModelClasses ) <nl> + } <nl> + <nl> + / * * <nl> + * Sends the analytics <nl> + * @ param inputs the inputs provided by the Transform API <nl> + * @ param inputModelClasses a list of ctClasses describing the Realm models <nl> + * / <nl> + private static sendAnalytics ( Collection < TransformInput > inputs , List < CtClass > inputModelClasses ) { <nl> + def containsKotlin = false <nl> + inputs . each { <nl> + it . directoryInputs . each { <nl> + def path = it . file . absolutePath <nl> + def index = path . indexOf ( ' build ' + File . separator + ' intermediates ' + File . separator + ' classes ' ) <nl> + if ( index ! = - 1 ) { <nl> + def projectPath = path . substring ( 0 , index ) <nl> + def buildFile = new File ( projectPath + ' build . gradle ' ) <nl> + if ( buildFile . exists ( ) & & buildFile . text . contains ( ' kotlin ' ) ) { <nl> + containsKotlin = true <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + def packages = inputModelClasses . collect { <nl> + it . getPackageName ( ) <nl> + } <nl> + <nl> + def env = System . getenv ( ) <nl> + def disableAnalytics = env [ " REALM _ DISABLE _ ANALYTICS " ] <nl> + if ( disableAnalytics = = null | | disableAnalytics ! = " true " ) { <nl> + def analytics = RealmAnalytics . getInstance ( packages as Set , containsKotlin ) <nl> + analytics . execute ( ) <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 241 , 4 + 277 , 5 @ @ class RealmTransformer extends Transform { <nl> merged . addAll ( set2 ) <nl> return merged ; <nl> } <nl> + <nl> } <nl> diff - - git a / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java <nl> new file mode 100644 <nl> index 0000000 . . a791be2 <nl> - - - / dev / null <nl> + + + b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java <nl> @ @ - 0 , 0 + 1 , 177 @ @ <nl> + / * <nl> + * Copyright 2015 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . transformer ; <nl> + <nl> + import java . io . UnsupportedEncodingException ; <nl> + import java . net . HttpURLConnection ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . NetworkInterface ; <nl> + import java . net . SocketException ; <nl> + import java . net . URL ; <nl> + import java . security . NoSuchAlgorithmException ; <nl> + import java . util . Enumeration ; <nl> + import java . util . Set ; <nl> + <nl> + / / Asynchronously submits build information to Realm when the annotation <nl> + / / processor is running <nl> + / / <nl> + / / To be clear : this does * not * run when your app is in production or on <nl> + / / your end - user ' s devices ; it will only run when you build your app from source . <nl> + / / <nl> + / / Why are we doing this ? Because it helps us build a better product for you . <nl> + / / None of the data personally identifies you , your employer or your app , but it <nl> + / / * will * help us understand what Realm version you use , what host OS you use , <nl> + / / etc . Having this info will help with prioritizing our time , adding new <nl> + / / features and deprecating old features . Collecting an anonymized bundle & <nl> + / / anonymized MAC is the only way for us to count actual usage of the other <nl> + / / metrics accurately . If we don ' t have a way to deduplicate the info reported , <nl> + / / it will be useless , as a single developer building their app on Windows ten <nl> + / / times would report 10 times more than a single developer that only builds <nl> + / / once from Mac OS X , making the data all but useless . No one likes sharing <nl> + / / data unless it ' s necessary , we get it , and we ' ve debated adding this for a <nl> + / / long long time . Since Realm is a free product without an email signup , we <nl> + / / feel this is a necessary step so we can collect relevant data to build a <nl> + / / better product for you . <nl> + / / <nl> + / / Currently the following information is reported : <nl> + / / - What version of Realm is being used <nl> + / / - What OS you are running on <nl> + / / - An anonymized MAC address and bundle ID to aggregate the other information on . <nl> + public class RealmAnalytics { <nl> + private static RealmAnalytics instance ; <nl> + private static final int READ _ TIMEOUT = 2000 ; <nl> + private static final int CONNECT _ TIMEOUT = 4000 ; <nl> + private static final String ADDRESS _ PREFIX = " https : / / api . mixpanel . com / track / ? data = " ; <nl> + private static final String ADDRESS _ SUFFIX = " & ip = 1 " ; <nl> + private static final String TOKEN = " ce0fac19508f6c8f20066d345d360fd0 " ; <nl> + private static final String EVENT _ NAME = " Run " ; <nl> + private static final String JSON _ TEMPLATE <nl> + = " { \ n " <nl> + + " \ " event \ " : \ " % EVENT % \ " , \ n " <nl> + + " \ " properties \ " : { \ n " <nl> + + " \ " token \ " : \ " % TOKEN % \ " , \ n " <nl> + + " \ " distinct _ id \ " : \ " % USER _ ID % \ " , \ n " <nl> + + " \ " Anonymized MAC Address \ " : \ " % USER _ ID % \ " , \ n " <nl> + + " \ " Anonymized Bundle ID \ " : \ " % APP _ ID % \ " , \ n " <nl> + + " \ " Binding \ " : \ " java \ " , \ n " <nl> + + " \ " Language \ " : \ " % LANGUAGE % \ " , \ n " <nl> + + " \ " Realm Version \ " : \ " % REALM _ VERSION % \ " , \ n " <nl> + + " \ " Host OS Type \ " : \ " % OS _ TYPE % \ " , \ n " <nl> + + " \ " Host OS Version \ " : \ " % OS _ VERSION % \ " , \ n " <nl> + + " \ " Target OS Type \ " : \ " android \ " \ n " <nl> + + " } \ n " <nl> + + " } " ; <nl> + <nl> + / / The list of packages the model classes reside in <nl> + private Set < String > packages ; <nl> + <nl> + private boolean usesKotlin ; <nl> + <nl> + private RealmAnalytics ( Set < String > packages , boolean usesKotlin ) { <nl> + this . packages = packages ; <nl> + this . usesKotlin = usesKotlin ; <nl> + } <nl> + <nl> + public static RealmAnalytics getInstance ( Set < String > packages , boolean usesKotlin ) { <nl> + if ( instance = = null ) { <nl> + instance = new RealmAnalytics ( packages , usesKotlin ) ; <nl> + } <nl> + return instance ; <nl> + } <nl> + <nl> + private void send ( ) { <nl> + try { <nl> + URL url = getUrl ( ) ; <nl> + HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; <nl> + connection . setRequestMethod ( " GET " ) ; <nl> + connection . connect ( ) ; <nl> + connection . getResponseCode ( ) ; <nl> + } catch ( Exception ignored ) { <nl> + } <nl> + } <nl> + <nl> + public void execute ( ) { <nl> + Thread backgroundThread = new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + send ( ) ; <nl> + } <nl> + } ) ; <nl> + backgroundThread . start ( ) ; <nl> + try { <nl> + backgroundThread . join ( CONNECT _ TIMEOUT + READ _ TIMEOUT ) ; <nl> + } catch ( InterruptedException ignored ) { <nl> + / / We ignore this exception on purpose not to break the build system if this class fails <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + / / We ignore this exception on purpose not to break the build system if this class fails <nl> + } <nl> + } <nl> + <nl> + public URL getUrl ( ) throws <nl> + MalformedURLException , <nl> + SocketException , <nl> + NoSuchAlgorithmException , <nl> + UnsupportedEncodingException { <nl> + return new URL ( ADDRESS _ PREFIX + Utils . base64Encode ( generateJson ( ) ) + ADDRESS _ SUFFIX ) ; <nl> + } <nl> + <nl> + public String generateJson ( ) throws SocketException , NoSuchAlgorithmException { <nl> + return JSON _ TEMPLATE <nl> + . replaceAll ( " % EVENT % " , EVENT _ NAME ) <nl> + . replaceAll ( " % TOKEN % " , TOKEN ) <nl> + . replaceAll ( " % USER _ ID % " , getAnonymousUserId ( ) ) <nl> + . replaceAll ( " % APP _ ID % " , getAnonymousAppId ( ) ) <nl> + . replaceAll ( " % LANGUAGE % " , usesKotlin ? " kotlin " : " java " ) <nl> + . replaceAll ( " % REALM _ VERSION % " , Version . VERSION ) <nl> + . replaceAll ( " % OS _ TYPE % " , System . getProperty ( " os . name " ) ) <nl> + . replaceAll ( " % OS _ VERSION % " , System . getProperty ( " os . version " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Computes an anonymous user id from the hashed MAC address of the first network interface <nl> + * @ return the anonymous user id <nl> + * @ throws NoSuchAlgorithmException <nl> + * @ throws SocketException <nl> + * / <nl> + public static String getAnonymousUserId ( ) throws NoSuchAlgorithmException , SocketException { <nl> + Enumeration < NetworkInterface > networkInterfaces = NetworkInterface . getNetworkInterfaces ( ) ; <nl> + <nl> + if ( ! networkInterfaces . hasMoreElements ( ) ) { <nl> + throw new IllegalStateException ( " No network interfaces detected " ) ; <nl> + } <nl> + <nl> + NetworkInterface networkInterface = networkInterfaces . nextElement ( ) ; <nl> + byte [ ] hardwareAddress = networkInterface . getHardwareAddress ( ) ; / / Normally this is the MAC address <nl> + <nl> + return Utils . hexStringify ( Utils . sha256Hash ( hardwareAddress ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Computes an anonymous app / library id from the packages containing RealmObject classes <nl> + * @ return the anonymous app / library id <nl> + * @ throws NoSuchAlgorithmException <nl> + * / <nl> + public String getAnonymousAppId ( ) throws NoSuchAlgorithmException { <nl> + StringBuilder stringBuilder = new StringBuilder ( ) ; <nl> + for ( String modelPackage : packages ) { <nl> + stringBuilder . append ( modelPackage ) . append ( " : " ) ; <nl> + } <nl> + byte [ ] packagesBytes = stringBuilder . toString ( ) . getBytes ( ) ; <nl> + <nl> + return Utils . hexStringify ( Utils . sha256Hash ( packagesBytes ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm - transformer / src / main / java / io / realm / transformer / Utils . java b / realm - transformer / src / main / java / io / realm / transformer / Utils . java <nl> new file mode 100644 <nl> index 0000000 . . a6647b9 <nl> - - - / dev / null <nl> + + + b / realm - transformer / src / main / java / io / realm / transformer / Utils . java <nl> @ @ - 0 , 0 + 1 , 60 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . transformer ; <nl> + <nl> + import javax . xml . bind . DatatypeConverter ; <nl> + import java . io . UnsupportedEncodingException ; <nl> + import java . security . MessageDigest ; <nl> + import java . security . NoSuchAlgorithmException ; <nl> + <nl> + public class Utils { <nl> + <nl> + / * * <nl> + * Encode the given string with Base64 <nl> + * @ param data the string to encode <nl> + * @ return the encoded string <nl> + * @ throws UnsupportedEncodingException <nl> + * / <nl> + public static String base64Encode ( String data ) throws UnsupportedEncodingException { <nl> + return DatatypeConverter . printBase64Binary ( data . getBytes ( " UTF - 8 " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Compute the SHA - 256 hash of the given byte array <nl> + * @ param data the byte array to hash <nl> + * @ return the hashed byte array <nl> + * @ throws NoSuchAlgorithmException <nl> + * / <nl> + public static byte [ ] sha256Hash ( byte [ ] data ) throws NoSuchAlgorithmException { <nl> + MessageDigest messageDigest = MessageDigest . getInstance ( " SHA - 256 " ) ; <nl> + return messageDigest . digest ( data ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Convert a byte array to its hex - string <nl> + * @ param data the byte array to convert <nl> + * @ return the hex - string of the byte array <nl> + * / <nl> + public static String hexStringify ( byte [ ] data ) { <nl> + StringBuilder stringBuilder = new StringBuilder ( ) ; <nl> + for ( byte singleByte : data ) { <nl> + stringBuilder . append ( Integer . toString ( ( singleByte & 0xff ) + 0x100 , 16 ) . substring ( 1 ) ) ; <nl> + } <nl> + <nl> + return stringBuilder . toString ( ) ; <nl> + } <nl> + } <nl> diff - - git a / realm - transformer / src / main / templates / Version . java b / realm - transformer / src / main / templates / Version . java <nl> new file mode 100644 <nl> index 0000000 . . e1d6208 <nl> - - - / dev / null <nl> + + + b / realm - transformer / src / main / templates / Version . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + package io . realm . transformer ; <nl> + <nl> + public class Version { <nl> + public static final String VERSION = " @ version @ " ; <nl> + } <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java <nl> deleted file mode 100644 <nl> index 111bf39 . . 0000000 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java <nl> + + + / dev / null <nl> @ @ - 1 , 172 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2015 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . processor ; <nl> - <nl> - import java . io . UnsupportedEncodingException ; <nl> - import java . net . HttpURLConnection ; <nl> - import java . net . MalformedURLException ; <nl> - import java . net . NetworkInterface ; <nl> - import java . net . SocketException ; <nl> - import java . net . URL ; <nl> - import java . security . NoSuchAlgorithmException ; <nl> - import java . util . Enumeration ; <nl> - import java . util . Set ; <nl> - <nl> - / / Asynchronously submits build information to Realm when the annotation <nl> - / / processor is running <nl> - / / <nl> - / / To be clear : this does * not * run when your app is in production or on <nl> - / / your end - user ' s devices ; it will only run when you build your app from source . <nl> - / / <nl> - / / Why are we doing this ? Because it helps us build a better product for you . <nl> - / / None of the data personally identifies you , your employer or your app , but it <nl> - / / * will * help us understand what Realm version you use , what host OS you use , <nl> - / / etc . Having this info will help with prioritizing our time , adding new <nl> - / / features and deprecating old features . Collecting an anonymized bundle & <nl> - / / anonymized MAC is the only way for us to count actual usage of the other <nl> - / / metrics accurately . If we don ' t have a way to deduplicate the info reported , <nl> - / / it will be useless , as a single developer building their app on Windows ten <nl> - / / times would report 10 times more than a single developer that only builds <nl> - / / once from Mac OS X , making the data all but useless . No one likes sharing <nl> - / / data unless it ' s necessary , we get it , and we ' ve debated adding this for a <nl> - / / long long time . Since Realm is a free product without an email signup , we <nl> - / / feel this is a necessary step so we can collect relevant data to build a <nl> - / / better product for you . <nl> - / / <nl> - / / Currently the following information is reported : <nl> - / / - What version of Realm is being used <nl> - / / - What OS you are running on <nl> - / / - An anonymized MAC address and bundle ID to aggregate the other information on . <nl> - public class RealmAnalytics { <nl> - private static RealmAnalytics instance ; <nl> - private static final int READ _ TIMEOUT = 2000 ; <nl> - private static final int CONNECT _ TIMEOUT = 4000 ; <nl> - private static final String ADDRESS _ PREFIX = " https : / / api . mixpanel . com / track / ? data = " ; <nl> - private static final String ADDRESS _ SUFFIX = " & ip = 1 " ; <nl> - private static final String TOKEN = " ce0fac19508f6c8f20066d345d360fd0 " ; <nl> - private static final String EVENT _ NAME = " Run " ; <nl> - private static final String JSON _ TEMPLATE <nl> - = " { \ n " <nl> - + " \ " event \ " : \ " % EVENT % \ " , \ n " <nl> - + " \ " properties \ " : { \ n " <nl> - + " \ " token \ " : \ " % TOKEN % \ " , \ n " <nl> - + " \ " distinct _ id \ " : \ " % USER _ ID % \ " , \ n " <nl> - + " \ " Anonymized MAC Address \ " : \ " % USER _ ID % \ " , \ n " <nl> - + " \ " Anonymized Bundle ID \ " : \ " % APP _ ID % \ " , \ n " <nl> - + " \ " Binding \ " : \ " java \ " , \ n " <nl> - + " \ " Realm Version \ " : \ " % REALM _ VERSION % \ " , \ n " <nl> - + " \ " Host OS Type \ " : \ " % OS _ TYPE % \ " , \ n " <nl> - + " \ " Host OS Version \ " : \ " % OS _ VERSION % \ " , \ n " <nl> - + " \ " Target OS Type \ " : \ " android \ " \ n " <nl> - + " } \ n " <nl> - + " } " ; <nl> - <nl> - / / The list of packages the model classes reside in <nl> - private Set < String > packages ; <nl> - <nl> - private RealmAnalytics ( Set < String > packages ) { <nl> - this . packages = packages ; <nl> - } <nl> - <nl> - public static RealmAnalytics getInstance ( Set < String > packages ) { <nl> - if ( instance = = null ) { <nl> - instance = new RealmAnalytics ( packages ) ; <nl> - } <nl> - return instance ; <nl> - } <nl> - <nl> - private void send ( ) { <nl> - try { <nl> - URL url = getUrl ( ) ; <nl> - HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; <nl> - connection . setRequestMethod ( " GET " ) ; <nl> - connection . connect ( ) ; <nl> - connection . getResponseCode ( ) ; <nl> - } catch ( Exception ignored ) { <nl> - } <nl> - } <nl> - <nl> - public void execute ( ) { <nl> - Thread backgroundThread = new Thread ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - send ( ) ; <nl> - } <nl> - } ) ; <nl> - backgroundThread . start ( ) ; <nl> - try { <nl> - backgroundThread . join ( CONNECT _ TIMEOUT + READ _ TIMEOUT ) ; <nl> - } catch ( InterruptedException ignored ) { <nl> - / / We ignore this exception on purpose not to break the build system if this class fails <nl> - } catch ( IllegalArgumentException ignored ) { <nl> - / / We ignore this exception on purpose not to break the build system if this class fails <nl> - } <nl> - } <nl> - <nl> - public URL getUrl ( ) throws <nl> - MalformedURLException , <nl> - SocketException , <nl> - NoSuchAlgorithmException , <nl> - UnsupportedEncodingException { <nl> - return new URL ( ADDRESS _ PREFIX + Utils . base64Encode ( generateJson ( ) ) + ADDRESS _ SUFFIX ) ; <nl> - } <nl> - <nl> - public String generateJson ( ) throws SocketException , NoSuchAlgorithmException { <nl> - return JSON _ TEMPLATE <nl> - . replaceAll ( " % EVENT % " , EVENT _ NAME ) <nl> - . replaceAll ( " % TOKEN % " , TOKEN ) <nl> - . replaceAll ( " % USER _ ID % " , getAnonymousUserId ( ) ) <nl> - . replaceAll ( " % APP _ ID % " , getAnonymousAppId ( ) ) <nl> - . replaceAll ( " % REALM _ VERSION % " , Version . VERSION ) <nl> - . replaceAll ( " % OS _ TYPE % " , System . getProperty ( " os . name " ) ) <nl> - . replaceAll ( " % OS _ VERSION % " , System . getProperty ( " os . version " ) ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Computes an anonymous user id from the hashed MAC address of the first network interface <nl> - * @ return the anonymous user id <nl> - * @ throws NoSuchAlgorithmException <nl> - * @ throws SocketException <nl> - * / <nl> - public static String getAnonymousUserId ( ) throws NoSuchAlgorithmException , SocketException { <nl> - Enumeration < NetworkInterface > networkInterfaces = NetworkInterface . getNetworkInterfaces ( ) ; <nl> - <nl> - if ( ! networkInterfaces . hasMoreElements ( ) ) { <nl> - throw new IllegalStateException ( " No network interfaces detected " ) ; <nl> - } <nl> - <nl> - NetworkInterface networkInterface = networkInterfaces . nextElement ( ) ; <nl> - byte [ ] hardwareAddress = networkInterface . getHardwareAddress ( ) ; / / Normally this is the MAC address <nl> - <nl> - return Utils . hexStringify ( Utils . sha256Hash ( hardwareAddress ) ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Computes an anonymous app / library id from the packages containing RealmObject classes <nl> - * @ return the anonymous app / library id <nl> - * @ throws NoSuchAlgorithmException <nl> - * / <nl> - public String getAnonymousAppId ( ) throws NoSuchAlgorithmException { <nl> - StringBuilder stringBuilder = new StringBuilder ( ) ; <nl> - for ( String modelPackage : packages ) { <nl> - stringBuilder . append ( modelPackage ) . append ( " : " ) ; <nl> - } <nl> - byte [ ] packagesBytes = stringBuilder . toString ( ) . getBytes ( ) ; <nl> - <nl> - return Utils . hexStringify ( Utils . sha256Hash ( packagesBytes ) ) ; <nl> - } <nl> - } <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> index d23c164 . . ffacfe4 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> @ @ - 157 , 12 + 157 , 6 @ @ public class RealmProcessor extends AbstractProcessor { <nl> } <nl> } <nl> <nl> - String environmentVariable = System . getenv ( " REALM _ DISABLE _ ANALYTICS " ) ; <nl> - if ( environmentVariable = = null | | ! environmentVariable . equals ( " true " ) ) { <nl> - RealmAnalytics analytics = RealmAnalytics . getInstance ( packages ) ; <nl> - analytics . execute ( ) ; <nl> - } <nl> - <nl> hasProcessedModules = true ; <nl> return processModules ( roundEnv ) ; <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java <nl> index 592e1bf . . 8eccdaf 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java <nl> @ @ - 211 , 41 + 211 , 6 @ @ public class Utils { <nl> return typeUtils . asElement ( classType . getSuperclass ( ) ) ; <nl> } <nl> <nl> - / * * <nl> - * Encodes the given string with Base64 <nl> - * @ param data the string to encode <nl> - * @ return the encoded string <nl> - * @ throws UnsupportedEncodingException <nl> - * / <nl> - public static String base64Encode ( String data ) throws UnsupportedEncodingException { <nl> - return DatatypeConverter . printBase64Binary ( data . getBytes ( " UTF - 8 " ) ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Computes the SHA - 256 hash of the given byte array <nl> - * @ param data the byte array to hash <nl> - * @ return the hashed byte array <nl> - * @ throws NoSuchAlgorithmException <nl> - * / <nl> - public static byte [ ] sha256Hash ( byte [ ] data ) throws NoSuchAlgorithmException { <nl> - MessageDigest messageDigest = MessageDigest . getInstance ( " SHA - 256 " ) ; <nl> - return messageDigest . digest ( data ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Converts a byte array to its hex - string <nl> - * @ param data the byte array to convert <nl> - * @ return the hex - string of the byte array <nl> - * / <nl> - public static String hexStringify ( byte [ ] data ) { <nl> - StringBuilder stringBuilder = new StringBuilder ( ) ; <nl> - for ( byte singleByte : data ) { <nl> - stringBuilder . append ( Integer . toString ( ( singleByte & 0xff ) + 0x100 , 16 ) . substring ( 1 ) ) ; <nl> - } <nl> - <nl> - return stringBuilder . toString ( ) ; <nl> - } <nl> - <nl> public static String getProxyInterfaceName ( String className ) { <nl> return className + Constants . INTERFACE _ SUFFIX ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> index bc7fc4e . . bfe3cd5 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> @ @ - 16 , 30 + 16 , 17 @ @ <nl> <nl> package io . realm . processor ; <nl> <nl> - import java . util . ArrayList ; <nl> - import java . util . Arrays ; <nl> - import java . util . HashMap ; <nl> - import java . util . HashSet ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - import java . util . Set ; <nl> + import io . realm . annotations . Ignore ; <nl> + import io . realm . annotations . Index ; <nl> + import io . realm . annotations . PrimaryKey ; <nl> <nl> import javax . annotation . processing . ProcessingEnvironment ; <nl> - import javax . lang . model . element . Element ; <nl> - import javax . lang . model . element . ElementKind ; <nl> - import javax . lang . model . element . ExecutableElement ; <nl> - import javax . lang . model . element . Modifier ; <nl> - import javax . lang . model . element . PackageElement ; <nl> - import javax . lang . model . element . TypeElement ; <nl> - import javax . lang . model . element . VariableElement ; <nl> + import javax . lang . model . element . * ; <nl> import javax . lang . model . type . DeclaredType ; <nl> import javax . lang . model . type . TypeKind ; <nl> import javax . lang . model . type . TypeMirror ; <nl> import javax . lang . model . util . Types ; <nl> - <nl> - import io . realm . annotations . Ignore ; <nl> - import io . realm . annotations . Index ; <nl> - import io . realm . annotations . PrimaryKey ; <nl> + import java . util . * ; <nl> <nl> / * * <nl> * Utility class for holding metadata for RealmProxy classes . <nl> @ @ - 377 , 6 + 364 , 10 @ @ public class ClassMetaData { <nl> return ( ! type . endsWith ( " . RealmObject " ) & & ! type . endsWith ( " RealmProxy " ) ) ; <nl> } <nl> <nl> + public String getPackageName ( ) { <nl> + return packageName ; <nl> + } <nl> + <nl> public String getFullyQualifiedClassName ( ) { <nl> return packageName + " . " + className ; <nl> } <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java <nl> new file mode 100644 <nl> index 0000000 . . 34503bc <nl> - - - / dev / null <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java <nl> @ @ - 0 , 0 + 1 , 151 @ @ <nl> + / * <nl> + * Copyright 2015 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . processor ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . UnsupportedEncodingException ; <nl> + import java . net . * ; <nl> + import java . security . NoSuchAlgorithmException ; <nl> + import java . util . Enumeration ; <nl> + import java . util . List ; <nl> + <nl> + / / Asynchronously submits build information to Realm when the annotation <nl> + / / processor is running <nl> + / / <nl> + / / To be clear : this does * not * run when your app is in production or on <nl> + / / your end - user ’ s devices ; it will only run when you build your app from source . <nl> + / / <nl> + / / Why are we doing this ? Because it helps us build a better product for you . <nl> + / / None of the data personally identifies you , your employer or your app , but it <nl> + / / * will * help us understand what language you use , what Android versions you <nl> + / / target , etc . Having this info will help prioritizing our time , adding new <nl> + / / features and deprecating old features . Collecting an anonymized bundle & <nl> + / / anonymized MAC is the only way for us to count actual usage of the other <nl> + / / metrics accurately . If we don ’ t have a way to deduplicate the info reported , <nl> + / / it will be useless , as a single developer building their Android app 10 times <nl> + / / would report 10 times more than a single developer that only <nl> + / / builds once , making the data all but useless . No one likes sharing data <nl> + / / unless it ’ s necessary , we get it , and we ’ ve debated adding this for a long <nl> + / / long time . Since Realm is a free product without an email signup , we feel <nl> + / / this is a necessary step so we can collect relevant data to build a better <nl> + / / product for you . <nl> + / / <nl> + / / Currently the following information is reported : <nl> + / / - What version of Realm is being used <nl> + / / - What OS you are running on <nl> + / / - An anonymous MAC address and bundle ID to aggregate the other information on . <nl> + public class RealmAnalytics { <nl> + private static RealmAnalytics INSTANCE ; <nl> + private static final String ADDRESS _ PREFIX = " http : / / api . mixpanel . com / track / ? data = " ; <nl> + private static final String ADDRESS _ SUFFIX = " & ip = 1 " ; <nl> + private static final String TOKEN = " ce0fac19508f6c8f20066d345d360fd0 " ; <nl> + private static final String EVENT _ NAME = " Run " ; <nl> + private static final String JSON _ TEMPLATE <nl> + = " { \ n " <nl> + + " \ " event \ " : \ " % EVENT % \ " , \ n " <nl> + + " \ " properties \ " : { \ n " <nl> + + " \ " token \ " : \ " % TOKEN % \ " , \ n " <nl> + + " \ " distinct _ id \ " : \ " % USER _ ID % \ " , \ n " <nl> + + " \ " Anonymized MAC Address \ " : \ " % USER _ ID % \ " , \ n " <nl> + + " \ " Anonymized Bundle ID \ " : \ " % APP _ ID % \ " , \ n " <nl> + + " \ " Binding \ " : \ " java \ " , \ n " <nl> + + " \ " Realm Version \ " : \ " % REALM _ VERSION % \ " , \ n " <nl> + + " \ " Host OS Type \ " : \ " % OS _ TYPE % \ " , \ n " <nl> + + " \ " Host OS Version \ " : \ " % OS _ VERSION % \ " \ n " <nl> + + " \ " Target OS Type \ " : \ " android \ " \ n " <nl> + + " } \ n " <nl> + + " } " ; <nl> + <nl> + / / The list of packages the model classes reside in <nl> + private List < String > packages ; <nl> + <nl> + private RealmAnalytics ( List < String > packages ) { <nl> + this . packages = packages ; <nl> + } <nl> + <nl> + public static RealmAnalytics getInstance ( List < String > packages ) { <nl> + if ( INSTANCE = = null ) { <nl> + INSTANCE = new RealmAnalytics ( packages ) ; <nl> + } <nl> + return INSTANCE ; <nl> + } <nl> + <nl> + public void send ( ) { <nl> + try { <nl> + URL url = getUrl ( ) ; <nl> + HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; <nl> + connection . setRequestMethod ( " GET " ) ; <nl> + connection . connect ( ) ; <nl> + connection . getResponseCode ( ) ; <nl> + } catch ( IOException ignored ) { <nl> + } catch ( NoSuchAlgorithmException ignored ) { <nl> + } <nl> + } <nl> + <nl> + public URL getUrl ( ) throws <nl> + MalformedURLException , <nl> + SocketException , <nl> + NoSuchAlgorithmException , <nl> + UnsupportedEncodingException { <nl> + return new URL ( ADDRESS _ PREFIX + Utils . base64Encode ( generateJson ( ) ) + ADDRESS _ SUFFIX ) ; <nl> + } <nl> + <nl> + public String generateJson ( ) throws SocketException , NoSuchAlgorithmException { <nl> + return JSON _ TEMPLATE <nl> + . replaceAll ( " % EVENT % " , EVENT _ NAME ) <nl> + . replaceAll ( " % TOKEN % " , TOKEN ) <nl> + . replaceAll ( " % USER _ ID % " , getAnonymousUserId ( ) ) <nl> + . replaceAll ( " % APP _ ID % " , getAnonymousAppId ( ) ) <nl> + . replaceAll ( " % REALM _ VERSION % " , Version . VERSION ) <nl> + . replaceAll ( " % OS _ TYPE % " , System . getProperty ( " os . name " ) ) <nl> + . replaceAll ( " % OS _ VERSION % " , System . getProperty ( " os . version " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Compute an anonymous user id from the hashed MAC address of the first network interface <nl> + * @ return the anonymous user id <nl> + * @ throws NoSuchAlgorithmException <nl> + * @ throws SocketException <nl> + * / <nl> + public static String getAnonymousUserId ( ) throws NoSuchAlgorithmException , SocketException { <nl> + Enumeration < NetworkInterface > networkInterfaces = NetworkInterface . getNetworkInterfaces ( ) ; <nl> + <nl> + if ( ! networkInterfaces . hasMoreElements ( ) ) { <nl> + throw new IllegalStateException ( " No network interfaces detected " ) ; <nl> + } <nl> + <nl> + NetworkInterface networkInterface = networkInterfaces . nextElement ( ) ; <nl> + byte [ ] hardwareAddress = networkInterface . getHardwareAddress ( ) ; / / Normally this is the MAC address <nl> + <nl> + return Utils . hexStringify ( Utils . sha256Hash ( hardwareAddress ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Compute an anonymous app / library id from the packages containing Realm model classes <nl> + * @ return the anonymous app / library id <nl> + * @ throws NoSuchAlgorithmException <nl> + * / <nl> + public String getAnonymousAppId ( ) throws NoSuchAlgorithmException { <nl> + StringBuilder stringBuilder = new StringBuilder ( ) ; <nl> + for ( String modelPackage : packages ) { <nl> + stringBuilder . append ( modelPackage ) . append ( " : " ) ; <nl> + } <nl> + byte [ ] packagesBytes = stringBuilder . toString ( ) . getBytes ( ) ; <nl> + <nl> + return Utils . hexStringify ( Utils . sha256Hash ( packagesBytes ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> index f7dd18c . . b1a1d7e 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> @ @ - 16 , 10 + 16 , 7 @ @ <nl> <nl> package io . realm . processor ; <nl> <nl> - import java . io . IOException ; <nl> - import java . util . HashSet ; <nl> - import java . util . Map ; <nl> - import java . util . Set ; <nl> + import io . realm . annotations . RealmClass ; <nl> <nl> import javax . annotation . processing . AbstractProcessor ; <nl> import javax . annotation . processing . RoundEnvironment ; <nl> @ @ - 28 , 8 + 25 , 8 @ @ import javax . lang . model . SourceVersion ; <nl> import javax . lang . model . element . Element ; <nl> import javax . lang . model . element . ElementKind ; <nl> import javax . lang . model . element . TypeElement ; <nl> - <nl> - import io . realm . annotations . RealmClass ; <nl> + import java . io . IOException ; <nl> + import java . util . * ; <nl> <nl> / * * <nl> * The RealmProcessor is responsible for creating the plumbing that connects the RealmObjects to a Realm . The process <nl> @ @ - 111 , 10 + 108 , 14 @ @ public class RealmProcessor extends AbstractProcessor { <nl> if ( hasProcessedModules ) { <nl> return true ; <nl> } <nl> + <nl> RealmVersionChecker updateChecker = RealmVersionChecker . getInstance ( processingEnv ) ; <nl> updateChecker . executeRealmVersionUpdate ( ) ; <nl> + <nl> Utils . initialize ( processingEnv ) ; <nl> <nl> + List < String > packages = new ArrayList < String > ( ) ; <nl> + <nl> / / Create all proxy classes <nl> for ( Element classElement : roundEnv . getElementsAnnotatedWith ( RealmClass . class ) ) { <nl> <nl> @ @ - 127 , 6 + 128 , 7 @ @ public class RealmProcessor extends AbstractProcessor { <nl> continue ; <nl> } <nl> Utils . note ( " Processing class " + metadata . getSimpleClassName ( ) ) ; <nl> + packages . add ( metadata . getPackageName ( ) ) ; <nl> boolean success = metadata . generate ( ) ; <nl> if ( ! success ) { <nl> return true ; / / Abort processing by claiming all annotations <nl> @ @ - 143 , 6 + 145 , 9 @ @ public class RealmProcessor extends AbstractProcessor { <nl> } <nl> 	 } <nl> <nl> + RealmAnalytics analytics = RealmAnalytics . getInstance ( packages ) ; <nl> + analytics . send ( ) ; <nl> + <nl> hasProcessedModules = true ; <nl> return processModules ( roundEnv ) ; <nl> } <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java b / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java <nl> index b2ba192 . . 510c2b0 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java <nl> @ @ - 1 , 19 + 1 , 17 @ @ <nl> package io . realm . processor ; <nl> <nl> - import java . lang . reflect . ParameterizedType ; <nl> - import java . util . List ; <nl> - <nl> import javax . annotation . processing . Messager ; <nl> import javax . annotation . processing . ProcessingEnvironment ; <nl> - import javax . lang . model . element . Element ; <nl> - import javax . lang . model . element . ExecutableElement ; <nl> - import javax . lang . model . element . Modifier ; <nl> - import javax . lang . model . element . TypeElement ; <nl> - import javax . lang . model . element . VariableElement ; <nl> + import javax . lang . model . element . * ; <nl> import javax . lang . model . type . DeclaredType ; <nl> import javax . lang . model . type . TypeMirror ; <nl> import javax . lang . model . util . Types ; <nl> import javax . tools . Diagnostic ; <nl> + import javax . xml . bind . DatatypeConverter ; <nl> + import java . io . UnsupportedEncodingException ; <nl> + import java . security . MessageDigest ; <nl> + import java . security . NoSuchAlgorithmException ; <nl> + import java . util . List ; <nl> <nl> / * * <nl> * Utility methods working with the Realm processor . <nl> @ @ - 129 , 4 + 127 , 39 @ @ public class Utils { <nl> public static Element getSuperClass ( TypeElement classType ) { <nl> return typeUtils . asElement ( classType . getSuperclass ( ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * Encode the given string with Base64 <nl> + * @ param data the string to encode <nl> + * @ return the encoded string <nl> + * @ throws UnsupportedEncodingException <nl> + * / <nl> + public static String base64Encode ( String data ) throws UnsupportedEncodingException { <nl> + return DatatypeConverter . printBase64Binary ( data . getBytes ( " UTF - 8 " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Compute the SHA - 256 hash of the given byte array <nl> + * @ param data the byte array to hash <nl> + * @ return the hashed byte array <nl> + * @ throws NoSuchAlgorithmException <nl> + * / <nl> + public static byte [ ] sha256Hash ( byte [ ] data ) throws NoSuchAlgorithmException { <nl> + MessageDigest messageDigest = MessageDigest . getInstance ( " SHA - 256 " ) ; <nl> + return messageDigest . digest ( data ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Convert a byte array to its hex - string <nl> + * @ param data the byte array to convert <nl> + * @ return the hex - string of the byte array <nl> + * / <nl> + public static String hexStringify ( byte [ ] data ) { <nl> + StringBuilder stringBuilder = new StringBuilder ( ) ; <nl> + for ( byte singleByte : data ) { <nl> + stringBuilder . append ( Integer . toString ( ( singleByte & 0xff ) + 0x100 , 16 ) . substring ( 1 ) ) ; <nl> + } <nl> + <nl> + return stringBuilder . toString ( ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / realm - transformer / build . gradle b / realm - transformer / build . gradle 
 index 0871dca . . c9ee011 100644 
 - - - a / realm - transformer / build . gradle 
 + + + b / realm - transformer / build . gradle 
 @ @ - 9 , 6 + 9 , 7 @ @ buildscript { 
 } 
 
 apply plugin : ' groovy ' 
 + apply plugin : ' java ' 
 apply plugin : ' maven ' 
 apply plugin : ' maven - publish ' 
 apply plugin : ' com . jfrog . artifactory ' 
 @ @ - 30 , 9 + 31 , 13 @ @ configurations { 
 compile . extendsFrom provided 
 } 
 
 + / / Include the generated Version file 
 sourceSets { 
 main { 
 compileClasspath + = configurations . provided 
 + java { 
 + srcDir ' build / generated - src / main / java ' 
 + } 
 } 
 } 
 
 @ @ - 48 , 6 + 53 , 18 @ @ dependencies { 
 } 
 } 
 
 + / / for Ant filter 
 + import org . apache . tools . ant . filters . ReplaceTokens 
 + 
 + task generateVersionClass ( type : Copy ) { 
 + from ' src / main / templates / Version . java ' 
 + into ' build / generated - src / main / java / io / realm / transformer ' 
 + filter ( ReplaceTokens , tokens : [ version : version ] ) 
 + outputs . upToDateWhen { false } 
 + } 
 + 
 + compileJava . dependsOn generateVersionClass 
 + 
 def commonPom = { 
 licenses { 
 license { 
 diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 index 2cee782 . . 1e9ec46 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 @ @ - 24 , 6 + 24 , 7 @ @ import com . google . common . io . Files 
 import groovy . io . FileType 
 import io . realm . annotations . Ignore 
 import javassist . ClassPool 
 + import javassist . CtClass 
 import javassist . LoaderClassPath 
 import org . slf4j . Logger 
 import org . slf4j . LoggerFactory 
 @ @ - 135 , 6 + 136 , 41 @ @ class RealmTransformer extends Transform { 
 
 def toc = System . currentTimeMillis ( ) 
 logger . info " Realm Transform time : $ { toc - tic } milliseconds " 
 + 
 + sendAnalytics ( inputs , inputModelClasses ) 
 + } 
 + 
 + / * * 
 + * Sends the analytics 
 + * @ param inputs the inputs provided by the Transform API 
 + * @ param inputModelClasses a list of ctClasses describing the Realm models 
 + * / 
 + private static sendAnalytics ( Collection < TransformInput > inputs , List < CtClass > inputModelClasses ) { 
 + def containsKotlin = false 
 + inputs . each { 
 + it . directoryInputs . each { 
 + def path = it . file . absolutePath 
 + def index = path . indexOf ( ' build ' + File . separator + ' intermediates ' + File . separator + ' classes ' ) 
 + if ( index ! = - 1 ) { 
 + def projectPath = path . substring ( 0 , index ) 
 + def buildFile = new File ( projectPath + ' build . gradle ' ) 
 + if ( buildFile . exists ( ) & & buildFile . text . contains ( ' kotlin ' ) ) { 
 + containsKotlin = true 
 + } 
 + } 
 + } 
 + } 
 + 
 + def packages = inputModelClasses . collect { 
 + it . getPackageName ( ) 
 + } 
 + 
 + def env = System . getenv ( ) 
 + def disableAnalytics = env [ " REALM _ DISABLE _ ANALYTICS " ] 
 + if ( disableAnalytics = = null | | disableAnalytics ! = " true " ) { 
 + def analytics = RealmAnalytics . getInstance ( packages as Set , containsKotlin ) 
 + analytics . execute ( ) 
 + } 
 } 
 
 / * * 
 @ @ - 241 , 4 + 277 , 5 @ @ class RealmTransformer extends Transform { 
 merged . addAll ( set2 ) 
 return merged ; 
 } 
 + 
 } 
 diff - - git a / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java 
 new file mode 100644 
 index 0000000 . . a791be2 
 - - - / dev / null 
 + + + b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java 
 @ @ - 0 , 0 + 1 , 177 @ @ 
 + / * 
 + * Copyright 2015 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . transformer ; 
 + 
 + import java . io . UnsupportedEncodingException ; 
 + import java . net . HttpURLConnection ; 
 + import java . net . MalformedURLException ; 
 + import java . net . NetworkInterface ; 
 + import java . net . SocketException ; 
 + import java . net . URL ; 
 + import java . security . NoSuchAlgorithmException ; 
 + import java . util . Enumeration ; 
 + import java . util . Set ; 
 + 
 + / / Asynchronously submits build information to Realm when the annotation 
 + / / processor is running 
 + / / 
 + / / To be clear : this does * not * run when your app is in production or on 
 + / / your end - user ' s devices ; it will only run when you build your app from source . 
 + / / 
 + / / Why are we doing this ? Because it helps us build a better product for you . 
 + / / None of the data personally identifies you , your employer or your app , but it 
 + / / * will * help us understand what Realm version you use , what host OS you use , 
 + / / etc . Having this info will help with prioritizing our time , adding new 
 + / / features and deprecating old features . Collecting an anonymized bundle & 
 + / / anonymized MAC is the only way for us to count actual usage of the other 
 + / / metrics accurately . If we don ' t have a way to deduplicate the info reported , 
 + / / it will be useless , as a single developer building their app on Windows ten 
 + / / times would report 10 times more than a single developer that only builds 
 + / / once from Mac OS X , making the data all but useless . No one likes sharing 
 + / / data unless it ' s necessary , we get it , and we ' ve debated adding this for a 
 + / / long long time . Since Realm is a free product without an email signup , we 
 + / / feel this is a necessary step so we can collect relevant data to build a 
 + / / better product for you . 
 + / / 
 + / / Currently the following information is reported : 
 + / / - What version of Realm is being used 
 + / / - What OS you are running on 
 + / / - An anonymized MAC address and bundle ID to aggregate the other information on . 
 + public class RealmAnalytics { 
 + private static RealmAnalytics instance ; 
 + private static final int READ _ TIMEOUT = 2000 ; 
 + private static final int CONNECT _ TIMEOUT = 4000 ; 
 + private static final String ADDRESS _ PREFIX = " https : / / api . mixpanel . com / track / ? data = " ; 
 + private static final String ADDRESS _ SUFFIX = " & ip = 1 " ; 
 + private static final String TOKEN = " ce0fac19508f6c8f20066d345d360fd0 " ; 
 + private static final String EVENT _ NAME = " Run " ; 
 + private static final String JSON _ TEMPLATE 
 + = " { \ n " 
 + + " \ " event \ " : \ " % EVENT % \ " , \ n " 
 + + " \ " properties \ " : { \ n " 
 + + " \ " token \ " : \ " % TOKEN % \ " , \ n " 
 + + " \ " distinct _ id \ " : \ " % USER _ ID % \ " , \ n " 
 + + " \ " Anonymized MAC Address \ " : \ " % USER _ ID % \ " , \ n " 
 + + " \ " Anonymized Bundle ID \ " : \ " % APP _ ID % \ " , \ n " 
 + + " \ " Binding \ " : \ " java \ " , \ n " 
 + + " \ " Language \ " : \ " % LANGUAGE % \ " , \ n " 
 + + " \ " Realm Version \ " : \ " % REALM _ VERSION % \ " , \ n " 
 + + " \ " Host OS Type \ " : \ " % OS _ TYPE % \ " , \ n " 
 + + " \ " Host OS Version \ " : \ " % OS _ VERSION % \ " , \ n " 
 + + " \ " Target OS Type \ " : \ " android \ " \ n " 
 + + " } \ n " 
 + + " } " ; 
 + 
 + / / The list of packages the model classes reside in 
 + private Set < String > packages ; 
 + 
 + private boolean usesKotlin ; 
 + 
 + private RealmAnalytics ( Set < String > packages , boolean usesKotlin ) { 
 + this . packages = packages ; 
 + this . usesKotlin = usesKotlin ; 
 + } 
 + 
 + public static RealmAnalytics getInstance ( Set < String > packages , boolean usesKotlin ) { 
 + if ( instance = = null ) { 
 + instance = new RealmAnalytics ( packages , usesKotlin ) ; 
 + } 
 + return instance ; 
 + } 
 + 
 + private void send ( ) { 
 + try { 
 + URL url = getUrl ( ) ; 
 + HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; 
 + connection . setRequestMethod ( " GET " ) ; 
 + connection . connect ( ) ; 
 + connection . getResponseCode ( ) ; 
 + } catch ( Exception ignored ) { 
 + } 
 + } 
 + 
 + public void execute ( ) { 
 + Thread backgroundThread = new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + send ( ) ; 
 + } 
 + } ) ; 
 + backgroundThread . start ( ) ; 
 + try { 
 + backgroundThread . join ( CONNECT _ TIMEOUT + READ _ TIMEOUT ) ; 
 + } catch ( InterruptedException ignored ) { 
 + / / We ignore this exception on purpose not to break the build system if this class fails 
 + } catch ( IllegalArgumentException ignored ) { 
 + / / We ignore this exception on purpose not to break the build system if this class fails 
 + } 
 + } 
 + 
 + public URL getUrl ( ) throws 
 + MalformedURLException , 
 + SocketException , 
 + NoSuchAlgorithmException , 
 + UnsupportedEncodingException { 
 + return new URL ( ADDRESS _ PREFIX + Utils . base64Encode ( generateJson ( ) ) + ADDRESS _ SUFFIX ) ; 
 + } 
 + 
 + public String generateJson ( ) throws SocketException , NoSuchAlgorithmException { 
 + return JSON _ TEMPLATE 
 + . replaceAll ( " % EVENT % " , EVENT _ NAME ) 
 + . replaceAll ( " % TOKEN % " , TOKEN ) 
 + . replaceAll ( " % USER _ ID % " , getAnonymousUserId ( ) ) 
 + . replaceAll ( " % APP _ ID % " , getAnonymousAppId ( ) ) 
 + . replaceAll ( " % LANGUAGE % " , usesKotlin ? " kotlin " : " java " ) 
 + . replaceAll ( " % REALM _ VERSION % " , Version . VERSION ) 
 + . replaceAll ( " % OS _ TYPE % " , System . getProperty ( " os . name " ) ) 
 + . replaceAll ( " % OS _ VERSION % " , System . getProperty ( " os . version " ) ) ; 
 + } 
 + 
 + / * * 
 + * Computes an anonymous user id from the hashed MAC address of the first network interface 
 + * @ return the anonymous user id 
 + * @ throws NoSuchAlgorithmException 
 + * @ throws SocketException 
 + * / 
 + public static String getAnonymousUserId ( ) throws NoSuchAlgorithmException , SocketException { 
 + Enumeration < NetworkInterface > networkInterfaces = NetworkInterface . getNetworkInterfaces ( ) ; 
 + 
 + if ( ! networkInterfaces . hasMoreElements ( ) ) { 
 + throw new IllegalStateException ( " No network interfaces detected " ) ; 
 + } 
 + 
 + NetworkInterface networkInterface = networkInterfaces . nextElement ( ) ; 
 + byte [ ] hardwareAddress = networkInterface . getHardwareAddress ( ) ; / / Normally this is the MAC address 
 + 
 + return Utils . hexStringify ( Utils . sha256Hash ( hardwareAddress ) ) ; 
 + } 
 + 
 + / * * 
 + * Computes an anonymous app / library id from the packages containing RealmObject classes 
 + * @ return the anonymous app / library id 
 + * @ throws NoSuchAlgorithmException 
 + * / 
 + public String getAnonymousAppId ( ) throws NoSuchAlgorithmException { 
 + StringBuilder stringBuilder = new StringBuilder ( ) ; 
 + for ( String modelPackage : packages ) { 
 + stringBuilder . append ( modelPackage ) . append ( " : " ) ; 
 + } 
 + byte [ ] packagesBytes = stringBuilder . toString ( ) . getBytes ( ) ; 
 + 
 + return Utils . hexStringify ( Utils . sha256Hash ( packagesBytes ) ) ; 
 + } 
 + } 
 diff - - git a / realm - transformer / src / main / java / io / realm / transformer / Utils . java b / realm - transformer / src / main / java / io / realm / transformer / Utils . java 
 new file mode 100644 
 index 0000000 . . a6647b9 
 - - - / dev / null 
 + + + b / realm - transformer / src / main / java / io / realm / transformer / Utils . java 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . transformer ; 
 + 
 + import javax . xml . bind . DatatypeConverter ; 
 + import java . io . UnsupportedEncodingException ; 
 + import java . security . MessageDigest ; 
 + import java . security . NoSuchAlgorithmException ; 
 + 
 + public class Utils { 
 + 
 + / * * 
 + * Encode the given string with Base64 
 + * @ param data the string to encode 
 + * @ return the encoded string 
 + * @ throws UnsupportedEncodingException 
 + * / 
 + public static String base64Encode ( String data ) throws UnsupportedEncodingException { 
 + return DatatypeConverter . printBase64Binary ( data . getBytes ( " UTF - 8 " ) ) ; 
 + } 
 + 
 + / * * 
 + * Compute the SHA - 256 hash of the given byte array 
 + * @ param data the byte array to hash 
 + * @ return the hashed byte array 
 + * @ throws NoSuchAlgorithmException 
 + * / 
 + public static byte [ ] sha256Hash ( byte [ ] data ) throws NoSuchAlgorithmException { 
 + MessageDigest messageDigest = MessageDigest . getInstance ( " SHA - 256 " ) ; 
 + return messageDigest . digest ( data ) ; 
 + } 
 + 
 + / * * 
 + * Convert a byte array to its hex - string 
 + * @ param data the byte array to convert 
 + * @ return the hex - string of the byte array 
 + * / 
 + public static String hexStringify ( byte [ ] data ) { 
 + StringBuilder stringBuilder = new StringBuilder ( ) ; 
 + for ( byte singleByte : data ) { 
 + stringBuilder . append ( Integer . toString ( ( singleByte & 0xff ) + 0x100 , 16 ) . substring ( 1 ) ) ; 
 + } 
 + 
 + return stringBuilder . toString ( ) ; 
 + } 
 + } 
 diff - - git a / realm - transformer / src / main / templates / Version . java b / realm - transformer / src / main / templates / Version . java 
 new file mode 100644 
 index 0000000 . . e1d6208 
 - - - / dev / null 
 + + + b / realm - transformer / src / main / templates / Version . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package io . realm . transformer ; 
 + 
 + public class Version { 
 + public static final String VERSION = " @ version @ " ; 
 + } 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java 
 deleted file mode 100644 
 index 111bf39 . . 0000000 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java 
 + + + / dev / null 
 @ @ - 1 , 172 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2015 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . processor ; 
 - 
 - import java . io . UnsupportedEncodingException ; 
 - import java . net . HttpURLConnection ; 
 - import java . net . MalformedURLException ; 
 - import java . net . NetworkInterface ; 
 - import java . net . SocketException ; 
 - import java . net . URL ; 
 - import java . security . NoSuchAlgorithmException ; 
 - import java . util . Enumeration ; 
 - import java . util . Set ; 
 - 
 - / / Asynchronously submits build information to Realm when the annotation 
 - / / processor is running 
 - / / 
 - / / To be clear : this does * not * run when your app is in production or on 
 - / / your end - user ' s devices ; it will only run when you build your app from source . 
 - / / 
 - / / Why are we doing this ? Because it helps us build a better product for you . 
 - / / None of the data personally identifies you , your employer or your app , but it 
 - / / * will * help us understand what Realm version you use , what host OS you use , 
 - / / etc . Having this info will help with prioritizing our time , adding new 
 - / / features and deprecating old features . Collecting an anonymized bundle & 
 - / / anonymized MAC is the only way for us to count actual usage of the other 
 - / / metrics accurately . If we don ' t have a way to deduplicate the info reported , 
 - / / it will be useless , as a single developer building their app on Windows ten 
 - / / times would report 10 times more than a single developer that only builds 
 - / / once from Mac OS X , making the data all but useless . No one likes sharing 
 - / / data unless it ' s necessary , we get it , and we ' ve debated adding this for a 
 - / / long long time . Since Realm is a free product without an email signup , we 
 - / / feel this is a necessary step so we can collect relevant data to build a 
 - / / better product for you . 
 - / / 
 - / / Currently the following information is reported : 
 - / / - What version of Realm is being used 
 - / / - What OS you are running on 
 - / / - An anonymized MAC address and bundle ID to aggregate the other information on . 
 - public class RealmAnalytics { 
 - private static RealmAnalytics instance ; 
 - private static final int READ _ TIMEOUT = 2000 ; 
 - private static final int CONNECT _ TIMEOUT = 4000 ; 
 - private static final String ADDRESS _ PREFIX = " https : / / api . mixpanel . com / track / ? data = " ; 
 - private static final String ADDRESS _ SUFFIX = " & ip = 1 " ; 
 - private static final String TOKEN = " ce0fac19508f6c8f20066d345d360fd0 " ; 
 - private static final String EVENT _ NAME = " Run " ; 
 - private static final String JSON _ TEMPLATE 
 - = " { \ n " 
 - + " \ " event \ " : \ " % EVENT % \ " , \ n " 
 - + " \ " properties \ " : { \ n " 
 - + " \ " token \ " : \ " % TOKEN % \ " , \ n " 
 - + " \ " distinct _ id \ " : \ " % USER _ ID % \ " , \ n " 
 - + " \ " Anonymized MAC Address \ " : \ " % USER _ ID % \ " , \ n " 
 - + " \ " Anonymized Bundle ID \ " : \ " % APP _ ID % \ " , \ n " 
 - + " \ " Binding \ " : \ " java \ " , \ n " 
 - + " \ " Realm Version \ " : \ " % REALM _ VERSION % \ " , \ n " 
 - + " \ " Host OS Type \ " : \ " % OS _ TYPE % \ " , \ n " 
 - + " \ " Host OS Version \ " : \ " % OS _ VERSION % \ " , \ n " 
 - + " \ " Target OS Type \ " : \ " android \ " \ n " 
 - + " } \ n " 
 - + " } " ; 
 - 
 - / / The list of packages the model classes reside in 
 - private Set < String > packages ; 
 - 
 - private RealmAnalytics ( Set < String > packages ) { 
 - this . packages = packages ; 
 - } 
 - 
 - public static RealmAnalytics getInstance ( Set < String > packages ) { 
 - if ( instance = = null ) { 
 - instance = new RealmAnalytics ( packages ) ; 
 - } 
 - return instance ; 
 - } 
 - 
 - private void send ( ) { 
 - try { 
 - URL url = getUrl ( ) ; 
 - HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; 
 - connection . setRequestMethod ( " GET " ) ; 
 - connection . connect ( ) ; 
 - connection . getResponseCode ( ) ; 
 - } catch ( Exception ignored ) { 
 - } 
 - } 
 - 
 - public void execute ( ) { 
 - Thread backgroundThread = new Thread ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - send ( ) ; 
 - } 
 - } ) ; 
 - backgroundThread . start ( ) ; 
 - try { 
 - backgroundThread . join ( CONNECT _ TIMEOUT + READ _ TIMEOUT ) ; 
 - } catch ( InterruptedException ignored ) { 
 - / / We ignore this exception on purpose not to break the build system if this class fails 
 - } catch ( IllegalArgumentException ignored ) { 
 - / / We ignore this exception on purpose not to break the build system if this class fails 
 - } 
 - } 
 - 
 - public URL getUrl ( ) throws 
 - MalformedURLException , 
 - SocketException , 
 - NoSuchAlgorithmException , 
 - UnsupportedEncodingException { 
 - return new URL ( ADDRESS _ PREFIX + Utils . base64Encode ( generateJson ( ) ) + ADDRESS _ SUFFIX ) ; 
 - } 
 - 
 - public String generateJson ( ) throws SocketException , NoSuchAlgorithmException { 
 - return JSON _ TEMPLATE 
 - . replaceAll ( " % EVENT % " , EVENT _ NAME ) 
 - . replaceAll ( " % TOKEN % " , TOKEN ) 
 - . replaceAll ( " % USER _ ID % " , getAnonymousUserId ( ) ) 
 - . replaceAll ( " % APP _ ID % " , getAnonymousAppId ( ) ) 
 - . replaceAll ( " % REALM _ VERSION % " , Version . VERSION ) 
 - . replaceAll ( " % OS _ TYPE % " , System . getProperty ( " os . name " ) ) 
 - . replaceAll ( " % OS _ VERSION % " , System . getProperty ( " os . version " ) ) ; 
 - } 
 - 
 - / * * 
 - * Computes an anonymous user id from the hashed MAC address of the first network interface 
 - * @ return the anonymous user id 
 - * @ throws NoSuchAlgorithmException 
 - * @ throws SocketException 
 - * / 
 - public static String getAnonymousUserId ( ) throws NoSuchAlgorithmException , SocketException { 
 - Enumeration < NetworkInterface > networkInterfaces = NetworkInterface . getNetworkInterfaces ( ) ; 
 - 
 - if ( ! networkInterfaces . hasMoreElements ( ) ) { 
 - throw new IllegalStateException ( " No network interfaces detected " ) ; 
 - } 
 - 
 - NetworkInterface networkInterface = networkInterfaces . nextElement ( ) ; 
 - byte [ ] hardwareAddress = networkInterface . getHardwareAddress ( ) ; / / Normally this is the MAC address 
 - 
 - return Utils . hexStringify ( Utils . sha256Hash ( hardwareAddress ) ) ; 
 - } 
 - 
 - / * * 
 - * Computes an anonymous app / library id from the packages containing RealmObject classes 
 - * @ return the anonymous app / library id 
 - * @ throws NoSuchAlgorithmException 
 - * / 
 - public String getAnonymousAppId ( ) throws NoSuchAlgorithmException { 
 - StringBuilder stringBuilder = new StringBuilder ( ) ; 
 - for ( String modelPackage : packages ) { 
 - stringBuilder . append ( modelPackage ) . append ( " : " ) ; 
 - } 
 - byte [ ] packagesBytes = stringBuilder . toString ( ) . getBytes ( ) ; 
 - 
 - return Utils . hexStringify ( Utils . sha256Hash ( packagesBytes ) ) ; 
 - } 
 - } 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 index d23c164 . . ffacfe4 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 @ @ - 157 , 12 + 157 , 6 @ @ public class RealmProcessor extends AbstractProcessor { 
 } 
 } 
 
 - String environmentVariable = System . getenv ( " REALM _ DISABLE _ ANALYTICS " ) ; 
 - if ( environmentVariable = = null | | ! environmentVariable . equals ( " true " ) ) { 
 - RealmAnalytics analytics = RealmAnalytics . getInstance ( packages ) ; 
 - analytics . execute ( ) ; 
 - } 
 - 
 hasProcessedModules = true ; 
 return processModules ( roundEnv ) ; 
 } 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java 
 index 592e1bf . . 8eccdaf 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java 
 @ @ - 211 , 41 + 211 , 6 @ @ public class Utils { 
 return typeUtils . asElement ( classType . getSuperclass ( ) ) ; 
 } 
 
 - / * * 
 - * Encodes the given string with Base64 
 - * @ param data the string to encode 
 - * @ return the encoded string 
 - * @ throws UnsupportedEncodingException 
 - * / 
 - public static String base64Encode ( String data ) throws UnsupportedEncodingException { 
 - return DatatypeConverter . printBase64Binary ( data . getBytes ( " UTF - 8 " ) ) ; 
 - } 
 - 
 - / * * 
 - * Computes the SHA - 256 hash of the given byte array 
 - * @ param data the byte array to hash 
 - * @ return the hashed byte array 
 - * @ throws NoSuchAlgorithmException 
 - * / 
 - public static byte [ ] sha256Hash ( byte [ ] data ) throws NoSuchAlgorithmException { 
 - MessageDigest messageDigest = MessageDigest . getInstance ( " SHA - 256 " ) ; 
 - return messageDigest . digest ( data ) ; 
 - } 
 - 
 - / * * 
 - * Converts a byte array to its hex - string 
 - * @ param data the byte array to convert 
 - * @ return the hex - string of the byte array 
 - * / 
 - public static String hexStringify ( byte [ ] data ) { 
 - StringBuilder stringBuilder = new StringBuilder ( ) ; 
 - for ( byte singleByte : data ) { 
 - stringBuilder . append ( Integer . toString ( ( singleByte & 0xff ) + 0x100 , 16 ) . substring ( 1 ) ) ; 
 - } 
 - 
 - return stringBuilder . toString ( ) ; 
 - } 
 - 
 public static String getProxyInterfaceName ( String className ) { 
 return className + Constants . INTERFACE _ SUFFIX ; 
 }

NEAREST DIFF:
diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 index bc7fc4e . . bfe3cd5 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 @ @ - 16 , 30 + 16 , 17 @ @ 
 
 package io . realm . processor ; 
 
 - import java . util . ArrayList ; 
 - import java . util . Arrays ; 
 - import java . util . HashMap ; 
 - import java . util . HashSet ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - import java . util . Set ; 
 + import io . realm . annotations . Ignore ; 
 + import io . realm . annotations . Index ; 
 + import io . realm . annotations . PrimaryKey ; 
 
 import javax . annotation . processing . ProcessingEnvironment ; 
 - import javax . lang . model . element . Element ; 
 - import javax . lang . model . element . ElementKind ; 
 - import javax . lang . model . element . ExecutableElement ; 
 - import javax . lang . model . element . Modifier ; 
 - import javax . lang . model . element . PackageElement ; 
 - import javax . lang . model . element . TypeElement ; 
 - import javax . lang . model . element . VariableElement ; 
 + import javax . lang . model . element . * ; 
 import javax . lang . model . type . DeclaredType ; 
 import javax . lang . model . type . TypeKind ; 
 import javax . lang . model . type . TypeMirror ; 
 import javax . lang . model . util . Types ; 
 - 
 - import io . realm . annotations . Ignore ; 
 - import io . realm . annotations . Index ; 
 - import io . realm . annotations . PrimaryKey ; 
 + import java . util . * ; 
 
 / * * 
 * Utility class for holding metadata for RealmProxy classes . 
 @ @ - 377 , 6 + 364 , 10 @ @ public class ClassMetaData { 
 return ( ! type . endsWith ( " . RealmObject " ) & & ! type . endsWith ( " RealmProxy " ) ) ; 
 } 
 
 + public String getPackageName ( ) { 
 + return packageName ; 
 + } 
 + 
 public String getFullyQualifiedClassName ( ) { 
 return packageName + " . " + className ; 
 } 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java 
 new file mode 100644 
 index 0000000 . . 34503bc 
 - - - / dev / null 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmAnalytics . java 
 @ @ - 0 , 0 + 1 , 151 @ @ 
 + / * 
 + * Copyright 2015 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . processor ; 
 + 
 + import java . io . IOException ; 
 + import java . io . UnsupportedEncodingException ; 
 + import java . net . * ; 
 + import java . security . NoSuchAlgorithmException ; 
 + import java . util . Enumeration ; 
 + import java . util . List ; 
 + 
 + / / Asynchronously submits build information to Realm when the annotation 
 + / / processor is running 
 + / / 
 + / / To be clear : this does * not * run when your app is in production or on 
 + / / your end - user ’ s devices ; it will only run when you build your app from source . 
 + / / 
 + / / Why are we doing this ? Because it helps us build a better product for you . 
 + / / None of the data personally identifies you , your employer or your app , but it 
 + / / * will * help us understand what language you use , what Android versions you 
 + / / target , etc . Having this info will help prioritizing our time , adding new 
 + / / features and deprecating old features . Collecting an anonymized bundle & 
 + / / anonymized MAC is the only way for us to count actual usage of the other 
 + / / metrics accurately . If we don ’ t have a way to deduplicate the info reported , 
 + / / it will be useless , as a single developer building their Android app 10 times 
 + / / would report 10 times more than a single developer that only 
 + / / builds once , making the data all but useless . No one likes sharing data 
 + / / unless it ’ s necessary , we get it , and we ’ ve debated adding this for a long 
 + / / long time . Since Realm is a free product without an email signup , we feel 
 + / / this is a necessary step so we can collect relevant data to build a better 
 + / / product for you . 
 + / / 
 + / / Currently the following information is reported : 
 + / / - What version of Realm is being used 
 + / / - What OS you are running on 
 + / / - An anonymous MAC address and bundle ID to aggregate the other information on . 
 + public class RealmAnalytics { 
 + private static RealmAnalytics INSTANCE ; 
 + private static final String ADDRESS _ PREFIX = " http : / / api . mixpanel . com / track / ? data = " ; 
 + private static final String ADDRESS _ SUFFIX = " & ip = 1 " ; 
 + private static final String TOKEN = " ce0fac19508f6c8f20066d345d360fd0 " ; 
 + private static final String EVENT _ NAME = " Run " ; 
 + private static final String JSON _ TEMPLATE 
 + = " { \ n " 
 + + " \ " event \ " : \ " % EVENT % \ " , \ n " 
 + + " \ " properties \ " : { \ n " 
 + + " \ " token \ " : \ " % TOKEN % \ " , \ n " 
 + + " \ " distinct _ id \ " : \ " % USER _ ID % \ " , \ n " 
 + + " \ " Anonymized MAC Address \ " : \ " % USER _ ID % \ " , \ n " 
 + + " \ " Anonymized Bundle ID \ " : \ " % APP _ ID % \ " , \ n " 
 + + " \ " Binding \ " : \ " java \ " , \ n " 
 + + " \ " Realm Version \ " : \ " % REALM _ VERSION % \ " , \ n " 
 + + " \ " Host OS Type \ " : \ " % OS _ TYPE % \ " , \ n " 
 + + " \ " Host OS Version \ " : \ " % OS _ VERSION % \ " \ n " 
 + + " \ " Target OS Type \ " : \ " android \ " \ n " 
 + + " } \ n " 
 + + " } " ; 
 + 
 + / / The list of packages the model classes reside in 
 + private List < String > packages ; 
 + 
 + private RealmAnalytics ( List < String > packages ) { 
 + this . packages = packages ; 
 + } 
 + 
 + public static RealmAnalytics getInstance ( List < String > packages ) { 
 + if ( INSTANCE = = null ) { 
 + INSTANCE = new RealmAnalytics ( packages ) ; 
 + } 
 + return INSTANCE ; 
 + } 
 + 
 + public void send ( ) { 
 + try { 
 + URL url = getUrl ( ) ; 
 + HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; 
 + connection . setRequestMethod ( " GET " ) ; 
 + connection . connect ( ) ; 
 + connection . getResponseCode ( ) ; 
 + } catch ( IOException ignored ) { 
 + } catch ( NoSuchAlgorithmException ignored ) { 
 + } 
 + } 
 + 
 + public URL getUrl ( ) throws 
 + MalformedURLException , 
 + SocketException , 
 + NoSuchAlgorithmException , 
 + UnsupportedEncodingException { 
 + return new URL ( ADDRESS _ PREFIX + Utils . base64Encode ( generateJson ( ) ) + ADDRESS _ SUFFIX ) ; 
 + } 
 + 
 + public String generateJson ( ) throws SocketException , NoSuchAlgorithmException { 
 + return JSON _ TEMPLATE 
 + . replaceAll ( " % EVENT % " , EVENT _ NAME ) 
 + . replaceAll ( " % TOKEN % " , TOKEN ) 
 + . replaceAll ( " % USER _ ID % " , getAnonymousUserId ( ) ) 
 + . replaceAll ( " % APP _ ID % " , getAnonymousAppId ( ) ) 
 + . replaceAll ( " % REALM _ VERSION % " , Version . VERSION ) 
 + . replaceAll ( " % OS _ TYPE % " , System . getProperty ( " os . name " ) ) 
 + . replaceAll ( " % OS _ VERSION % " , System . getProperty ( " os . version " ) ) ; 
 + } 
 + 
 + / * * 
 + * Compute an anonymous user id from the hashed MAC address of the first network interface 
 + * @ return the anonymous user id 
 + * @ throws NoSuchAlgorithmException 
 + * @ throws SocketException 
 + * / 
 + public static String getAnonymousUserId ( ) throws NoSuchAlgorithmException , SocketException { 
 + Enumeration < NetworkInterface > networkInterfaces = NetworkInterface . getNetworkInterfaces ( ) ; 
 + 
 + if ( ! networkInterfaces . hasMoreElements ( ) ) { 
 + throw new IllegalStateException ( " No network interfaces detected " ) ; 
 + } 
 + 
 + NetworkInterface networkInterface = networkInterfaces . nextElement ( ) ; 
 + byte [ ] hardwareAddress = networkInterface . getHardwareAddress ( ) ; / / Normally this is the MAC address 
 + 
 + return Utils . hexStringify ( Utils . sha256Hash ( hardwareAddress ) ) ; 
 + } 
 + 
 + / * * 
 + * Compute an anonymous app / library id from the packages containing Realm model classes 
 + * @ return the anonymous app / library id 
 + * @ throws NoSuchAlgorithmException 
 + * / 
 + public String getAnonymousAppId ( ) throws NoSuchAlgorithmException { 
 + StringBuilder stringBuilder = new StringBuilder ( ) ; 
 + for ( String modelPackage : packages ) { 
 + stringBuilder . append ( modelPackage ) . append ( " : " ) ; 
 + } 
 + byte [ ] packagesBytes = stringBuilder . toString ( ) . getBytes ( ) ; 
 + 
 + return Utils . hexStringify ( Utils . sha256Hash ( packagesBytes ) ) ; 
 + } 
 + } 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 index f7dd18c . . b1a1d7e 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 @ @ - 16 , 10 + 16 , 7 @ @ 
 
 package io . realm . processor ; 
 
 - import java . io . IOException ; 
 - import java . util . HashSet ; 
 - import java . util . Map ; 
 - import java . util . Set ; 
 + import io . realm . annotations . RealmClass ; 
 
 import javax . annotation . processing . AbstractProcessor ; 
 import javax . annotation . processing . RoundEnvironment ; 
 @ @ - 28 , 8 + 25 , 8 @ @ import javax . lang . model . SourceVersion ; 
 import javax . lang . model . element . Element ; 
 import javax . lang . model . element . ElementKind ; 
 import javax . lang . model . element . TypeElement ; 
 - 
 - import io . realm . annotations . RealmClass ; 
 + import java . io . IOException ; 
 + import java . util . * ; 
 
 / * * 
 * The RealmProcessor is responsible for creating the plumbing that connects the RealmObjects to a Realm . The process 
 @ @ - 111 , 10 + 108 , 14 @ @ public class RealmProcessor extends AbstractProcessor { 
 if ( hasProcessedModules ) { 
 return true ; 
 } 
 + 
 RealmVersionChecker updateChecker = RealmVersionChecker . getInstance ( processingEnv ) ; 
 updateChecker . executeRealmVersionUpdate ( ) ; 
 + 
 Utils . initialize ( processingEnv ) ; 
 
 + List < String > packages = new ArrayList < String > ( ) ; 
 + 
 / / Create all proxy classes 
 for ( Element classElement : roundEnv . getElementsAnnotatedWith ( RealmClass . class ) ) { 
 
 @ @ - 127 , 6 + 128 , 7 @ @ public class RealmProcessor extends AbstractProcessor { 
 continue ; 
 } 
 Utils . note ( " Processing class " + metadata . getSimpleClassName ( ) ) ; 
 + packages . add ( metadata . getPackageName ( ) ) ; 
 boolean success = metadata . generate ( ) ; 
 if ( ! success ) { 
 return true ; / / Abort processing by claiming all annotations 
 @ @ - 143 , 6 + 145 , 9 @ @ public class RealmProcessor extends AbstractProcessor { 
 } 
 	 } 
 
 + RealmAnalytics analytics = RealmAnalytics . getInstance ( packages ) ; 
 + analytics . send ( ) ; 
 + 
 hasProcessedModules = true ; 
 return processModules ( roundEnv ) ; 
 } 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java b / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java 
 index b2ba192 . . 510c2b0 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / Utils . java 
 @ @ - 1 , 19 + 1 , 17 @ @ 
 package io . realm . processor ; 
 
 - import java . lang . reflect . ParameterizedType ; 
 - import java . util . List ; 
 - 
 import javax . annotation . processing . Messager ; 
 import javax . annotation . processing . ProcessingEnvironment ; 
 - import javax . lang . model . element . Element ; 
 - import javax . lang . model . element . ExecutableElement ; 
 - import javax . lang . model . element . Modifier ; 
 - import javax . lang . model . element . TypeElement ; 
 - import javax . lang . model . element . VariableElement ; 
 + import javax . lang . model . element . * ; 
 import javax . lang . model . type . DeclaredType ; 
 import javax . lang . model . type . TypeMirror ; 
 import javax . lang . model . util . Types ; 
 import javax . tools . Diagnostic ; 
 + import javax . xml . bind . DatatypeConverter ; 
 + import java . io . UnsupportedEncodingException ; 
 + import java . security . MessageDigest ; 
 + import java . security . NoSuchAlgorithmException ; 
 + import java . util . List ; 
 
 / * * 
 * Utility methods working with the Realm processor . 
 @ @ - 129 , 4 + 127 , 39 @ @ public class Utils { 
 public static Element getSuperClass ( TypeElement classType ) { 
 return typeUtils . asElement ( classType . getSuperclass ( ) ) ; 
 } 
 + 
 + / * * 
 + * Encode the given string with Base64 
 + * @ param data the string to encode 
 + * @ return the encoded string 
 + * @ throws UnsupportedEncodingException 
 + * / 
 + public static String base64Encode ( String data ) throws UnsupportedEncodingException { 
 + return DatatypeConverter . printBase64Binary ( data . getBytes ( " UTF - 8 " ) ) ; 
 + } 
 + 
 + / * * 
 + * Compute the SHA - 256 hash of the given byte array 
 + * @ param data the byte array to hash 
 + * @ return the hashed byte array 
 + * @ throws NoSuchAlgorithmException 
 + * / 
 + public static byte [ ] sha256Hash ( byte [ ] data ) throws NoSuchAlgorithmException { 
 + MessageDigest messageDigest = MessageDigest . getInstance ( " SHA - 256 " ) ; 
 + return messageDigest . digest ( data ) ; 
 + } 
 + 
 + / * * 
 + * Convert a byte array to its hex - string 
 + * @ param data the byte array to convert 
 + * @ return the hex - string of the byte array 
 + * / 
 + public static String hexStringify ( byte [ ] data ) { 
 + StringBuilder stringBuilder = new StringBuilder ( ) ; 
 + for ( byte singleByte : data ) { 
 + stringBuilder . append ( Integer . toString ( ( singleByte & 0xff ) + 0x100 , 16 ) . substring ( 1 ) ) ; 
 + } 
 + 
 + return stringBuilder . toString ( ) ; 
 + } 
 }
