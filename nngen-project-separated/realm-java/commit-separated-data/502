BLEU SCORE: 0.09870315683072758

TEST MSG: Memory ownership for Collection and OS Results
GENERATED MSG: Move the OS Results wrapper to internal . collection

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index 36bebfc . . b50c861 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 21 , 28 + 21 , 45 @ @ <nl> <nl> # include < object - store / src / shared _ realm . hpp > <nl> # include < object - store / src / results . hpp > <nl> - # include < realm / table _ view . hpp > <nl> <nl> # include " util . hpp " <nl> + # include " jni _ util / method . hpp " <nl> <nl> using namespace realm ; <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + / / We need to control the life cycle of Results , weak ref of Java Collection object and the NotificationToken . <nl> + / / Wrap all three together , so when the Java Collection object gets GCed , all three of them will be invalidated . <nl> + struct ResultsWrapper { <nl> + jobject m _ collection _ weak _ ref ; <nl> + Results m _ results ; <nl> + NotificationToken m _ notification _ token ; <nl> + <nl> + ResultsWrapper ( Results & & results ) <nl> + : m _ collection _ weak _ ref ( nullptr ) , m _ results ( results ) , m _ notification _ token ( ) { } <nl> + <nl> + ResultsWrapper ( ResultsWrapper & & ) = delete ; <nl> + ResultsWrapper & operator = ( ResultsWrapper & & ) = delete ; <nl> + <nl> + ResultsWrapper ( ResultsWrapper const & ) = delete ; <nl> + ResultsWrapper & operator = ( ResultsWrapper const & ) = delete ; <nl> + <nl> + ~ ResultsWrapper ( ) <nl> + { <nl> + if ( m _ collection _ weak _ ref ) { <nl> + JNIEnv * env ; <nl> + g _ vm - > AttachCurrentThread ( & env , nullptr ) ; <nl> + env - > DeleteWeakGlobalRef ( m _ collection _ weak _ ref ) ; <nl> + } <nl> + } <nl> + } ; <nl> <nl> static void finalize _ results ( jlong ptr ) ; <nl> - static void finalize _ notification _ token ( jlong ptr ) ; <nl> <nl> static void finalize _ results ( jlong ptr ) <nl> { <nl> TR _ ENTER _ PTR ( ptr ) ; <nl> - delete reinterpret _ cast < Results * > ( ptr ) ; <nl> - } <nl> - <nl> - static void finalize _ notification _ token ( jlong ptr ) <nl> - { <nl> - TR _ ENTER _ PTR ( ptr ) ; <nl> - / / NotificationToken can be closed by NotificationToken . close ( ) . Then ptr will be reset in that case . <nl> - if ( ptr ) { <nl> - delete reinterpret _ cast < NotificationToken * > ( ptr ) ; <nl> - } <nl> + delete reinterpret _ cast < ResultsWrapper * > ( ptr ) ; <nl> } <nl> <nl> JNIEXPORT jlong JNICALL <nl> @ @ - 60 , 11 + 77 , 12 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong <nl> auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; <nl> auto sort _ desc _ ptr = reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; <nl> auto distinct _ desc _ ptr = reinterpret _ cast < SortDescriptor * > ( distinct _ desc _ native _ ptr ) ; <nl> - auto results = new Results ( shared _ realm , * query , <nl> - sort _ desc _ ptr ? * sort _ desc _ ptr : SortDescriptor ( ) , <nl> - distinct _ desc _ ptr ? * distinct _ desc _ ptr : SortDescriptor ( ) ) ; <nl> + Results results ( shared _ realm , * query , <nl> + sort _ desc _ ptr ? * sort _ desc _ ptr : SortDescriptor ( ) , <nl> + distinct _ desc _ ptr ? * distinct _ desc _ ptr : SortDescriptor ( ) ) ; <nl> + auto wrapper = new ResultsWrapper ( std : : move ( results ) ) ; <nl> <nl> - return reinterpret _ cast < jlong > ( results ) ; <nl> + return reinterpret _ cast < jlong > ( wrapper ) ; <nl> } CATCH _ STD ( ) <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> } <nl> @ @ - 74 , 8 + 92 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlon <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - auto snapshot = results - > snapshot ( ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> + auto snapshot = wrapper - > m _ results . snapshot ( ) ; <nl> return reinterpret _ cast < jlong > ( new Results ( snapshot ) ) ; <nl> } CATCH _ STD ( ) <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> @ @ - 86 , 22 + 104 , 21 @ @ Java _ io _ realm _ internal _ Collection _ nativeContains ( JNIEnv * env , jclass , jlong nati <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) ; <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> auto row = reinterpret _ cast < Row * > ( native _ row _ ptr ) ; <nl> - size _ t index = results - > index _ of ( * row ) ; <nl> + size _ t index = wrapper - > m _ results . index _ of ( * row ) ; <nl> return to _ jbool ( index ! = not _ found ) ; <nl> } CATCH _ STD ( ) ; <nl> return JNI _ FALSE ; <nl> } <nl> <nl> - / / FIXME : we don ' t use it at the moment <nl> JNIEXPORT jlong JNICALL <nl> Java _ io _ realm _ internal _ Collection _ nativeGetRow ( JNIEnv * env , jclass , jlong native _ ptr , jint index ) <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - auto row = results - > get ( static _ cast < size _ t > ( index ) ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> + auto row = wrapper - > m _ results . get ( static _ cast < size _ t > ( index ) ) ; <nl> return reinterpret _ cast < jlong > ( new Row ( std : : move ( row ) ) ) ; <nl> } CATCH _ STD ( ) <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> @ @ - 112 , 8 + 129 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeFirstRow ( JNIEnv * env , jclass , jlong nati <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - auto optional _ row = results - > first ( ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> + auto optional _ row = wrapper - > m _ results . first ( ) ; <nl> if ( optional _ row ) { <nl> return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; <nl> } <nl> @ @ - 127 , 8 + 144 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeLastRow ( JNIEnv * env , jclass , jlong nativ <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - auto optional _ row = results - > last ( ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> + auto optional _ row = wrapper - > m _ results . last ( ) ; <nl> if ( optional _ row ) { <nl> return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; <nl> } <nl> @ @ - 141 , 8 + 158 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeClear ( JNIEnv * env , jclass , jlong native _ <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - results - > clear ( ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> + wrapper - > m _ results . clear ( ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> @ @ - 151 , 8 + 168 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeSize ( JNIEnv * env , jclass , jlong native _ p <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - return static _ cast < jlong > ( results - > size ( ) ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> + return static _ cast < jlong > ( wrapper - > m _ results . size ( ) ) ; <nl> } CATCH _ STD ( ) <nl> return 0 ; <nl> } <nl> @ @ - 163 , 23 + 180 , 25 @ @ Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong nat <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> <nl> size _ t index = S ( column _ index ) ; <nl> Optional < Mixed > value ; <nl> switch ( agg _ func ) { <nl> case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MINIMUM : <nl> - value = results - > min ( index ) ; <nl> + value = wrapper - > m _ results . min ( index ) ; <nl> break ; <nl> case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MAXIMUM : <nl> - value = results - > max ( index ) ; <nl> + value = wrapper - > m _ results . max ( index ) ; <nl> break ; <nl> case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ AVERAGE : <nl> - value = results - > average ( index ) ; <nl> + value = wrapper - > m _ results . average ( index ) ; <nl> break ; <nl> case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ SUM : <nl> - value = results - > sum ( index ) ; <nl> + value = wrapper - > m _ results . sum ( index ) ; <nl> break ; <nl> + default : <nl> + REALM _ UNREACHABLE ( ) ; <nl> } <nl> <nl> if ( ! value ) { <nl> @ @ - 208 , 61 + 227 , 55 @ @ Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ p <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> auto sort _ descriptor = * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; <nl> - auto sorted _ result = results - > sort ( std : : move ( sort _ descriptor ) ) ; <nl> - return reinterpret _ cast < jlong > ( new Results ( std : : move ( sorted _ result ) ) ) ; <nl> + auto sorted _ result = wrapper - > m _ results . sort ( std : : move ( sort _ descriptor ) ) ; <nl> + return reinterpret _ cast < jlong > ( new ResultsWrapper ( std : : move ( sorted _ result ) ) ) ; <nl> } CATCH _ STD ( ) <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> } <nl> <nl> - JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ internal _ Collection _ nativeAddListener ( JNIEnv * env , jobject instance , jlong native _ ptr ) <nl> + JNIEXPORT void JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeStartListening ( JNIEnv * env , jobject instance , jlong native _ ptr ) <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> <nl> - try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + static JniMethod notify _ change _ listeners ( env , instance , " notifyChangeListeners " , " ( ) V " ) ; <nl> <nl> - / / FIXME : Those need to be freed for all the corner cases ! <nl> - jobject weak _ results = env - > NewWeakGlobalRef ( instance ) ; <nl> + try { <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> + if ( wrapper - > m _ collection _ weak _ ref = = nullptr ) { <nl> + wrapper - > m _ collection _ weak _ ref = env - > NewWeakGlobalRef ( instance ) ; <nl> + } <nl> <nl> auto cb = [ = ] ( realm : : CollectionChangeSet const & changes , <nl> std : : exception _ ptr err ) { <nl> - / / OS will call all notifiers ' callback in one run , so check the Java excpetion first ! ! <nl> + / / OS will call all notifiers ' callback in one run , so check the Java exception first ! ! <nl> if ( env - > ExceptionCheck ( ) ) return ; <nl> <nl> - jclass results _ class = env - > GetObjectClass ( weak _ results ) ; <nl> - jmethodID notify _ method = env - > GetMethodID ( results _ class , " notifyChangeListeners " , " ( ) V " ) ; <nl> - env - > CallVoidMethod ( weak _ results , notify _ method ) ; <nl> + env - > CallVoidMethod ( wrapper - > m _ collection _ weak _ ref , notify _ change _ listeners ) ; <nl> } ; <nl> <nl> - NotificationToken token = results - > add _ notification _ callback ( cb ) ; <nl> - return reinterpret _ cast < jlong > ( new NotificationToken ( std : : move ( token ) ) ) ; <nl> + wrapper - > m _ notification _ token = wrapper - > m _ results . add _ notification _ callback ( cb ) ; <nl> } CATCH _ STD ( ) <nl> - <nl> - return reinterpret _ cast < jlong > ( nullptr ) ; <nl> } <nl> <nl> - JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ internal _ Collection _ nativeGetFinalizerPtr ( JNIEnv * , jclass ) <nl> + JNIEXPORT void JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeStopListening ( JNIEnv * env , jobject , jlong native _ ptr ) <nl> { <nl> - TR _ ENTER ( ) <nl> - return reinterpret _ cast < jlong > ( & finalize _ results ) ; <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + <nl> + try { <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> + wrapper - > m _ notification _ token = { } ; <nl> + } CATCH _ STD ( ) <nl> } <nl> <nl> JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenGetFinalizerPtr ( JNIEnv * , jclass ) <nl> + Java _ io _ realm _ internal _ Collection _ nativeGetFinalizerPtr ( JNIEnv * , jclass ) <nl> { <nl> TR _ ENTER ( ) <nl> - return reinterpret _ cast < jlong > ( & finalize _ notification _ token ) ; <nl> - } <nl> - <nl> - JNIEXPORT void JNICALL <nl> - Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenClose ( JNIEnv * , jclass , jlong native _ ptr ) <nl> - { <nl> - TR _ ENTER _ PTR ( native _ ptr ) <nl> - delete reinterpret _ cast < NotificationToken * > ( native _ ptr ) ; <nl> + return reinterpret _ cast < jlong > ( & finalize _ results ) ; <nl> } <nl> <nl> JNIEXPORT jlong JNICALL <nl> @ @ - 270 , 9 + 283 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeWhere ( JNIEnv * env , jclass , jlong native _ <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> <nl> - Query * query = new Query ( results - > get _ query ( ) ) ; <nl> + Query * query = new Query ( wrapper - > m _ results . get _ query ( ) ) ; <nl> return reinterpret _ cast < jlong > ( query ) ; <nl> } CATCH _ STD ( ) <nl> return 0 ; <nl> @ @ - 283 , 10 + 296 , 10 @ @ Java _ io _ realm _ internal _ Collection _ nativeIndexOf ( JNIEnv * env , jclass , jlong nativ <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> auto row = reinterpret _ cast < Row * > ( row _ native _ ptr ) ; <nl> <nl> - return static _ cast < jlong > ( results - > index _ of ( * row ) ) ; <nl> + return static _ cast < jlong > ( wrapper - > m _ results . index _ of ( * row ) ) ; <nl> } CATCH _ STD ( ) <nl> return npos ; <nl> } <nl> @ @ - 297 , 10 + 310 , 10 @ @ Java _ io _ realm _ internal _ Collection _ nativeIndexOfBySourceRowIndex ( JNIEnv * env , jcl <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; <nl> auto index = static _ cast < size _ t > ( source _ row _ index ) ; <nl> <nl> - return static _ cast < jlong > ( results - > index _ of ( index ) ) ; <nl> + return static _ cast < jlong > ( wrapper - > m _ results . index _ of ( index ) ) ; <nl> } CATCH _ STD ( ) <nl> return npos ; <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index af4df78 . . 48b76f2 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 22 , 7 + 22 , 12 @ @ import java . util . concurrent . CopyOnWriteArrayList ; <nl> <nl> import io . realm . RealmChangeListener ; <nl> <nl> - public class Collection implements NativeObject { <nl> + / * * <nl> + * Java wrapper of OS Results class . <nl> + * It is supposed to be the backend of binding ' s query results , link list and back links . <nl> + * / <nl> + @ KeepMember <nl> + public final class Collection implements NativeObject { <nl> <nl> public static class Listener { <nl> private final RealmChangeListener realmChangeListener ; <nl> @ @ - 48 , 38 + 53 , 12 @ @ public class Collection implements NativeObject { <nl> } <nl> } <nl> <nl> - private static class NotificationToken implements NativeObject { <nl> - private long nativePtr ; <nl> - private static final long nativeFinalizerPtr = nativeNotificationTokenGetFinalizerPtr ( ) ; <nl> - <nl> - NotificationToken ( long nativePtr ) { <nl> - this . nativePtr = nativePtr ; <nl> - Context . sharedContext . addReference ( this ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public long getNativePtr ( ) { <nl> - return nativePtr ; <nl> - } <nl> - <nl> - @ Override <nl> - public long getNativeFinalizerPtr ( ) { <nl> - return nativeFinalizerPtr ; <nl> - } <nl> - <nl> - public void close ( ) { <nl> - nativeNotificationTokenClose ( nativePtr ) ; <nl> - nativePtr = 0 ; <nl> - } <nl> - } <nl> - <nl> private final long nativePtr ; <nl> private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; <nl> private final SharedRealm sharedRealm ; <nl> private final Context context ; <nl> private final TableQuery query ; <nl> private final List < Listener > listeners = new CopyOnWriteArrayList < Listener > ( ) ; <nl> - private NotificationToken notificationToken = null ; <nl> <nl> / / Public for static checking in JNI <nl> @ SuppressWarnings ( " WeakerAccess " ) <nl> @ @ - 201 , 31 + 180 , 28 @ @ public class Collection implements NativeObject { <nl> } <nl> <nl> public void addListener ( Listener listener ) { <nl> + if ( listeners . isEmpty ( ) ) { <nl> + nativeStartListening ( nativePtr ) ; <nl> + } <nl> if ( ! listeners . contains ( listener ) ) { <nl> listeners . add ( listener ) ; <nl> } <nl> - if ( notificationToken = = null ) { <nl> - notificationToken = new NotificationToken ( nativeAddListener ( nativePtr ) ) ; <nl> - } <nl> } <nl> <nl> public void removeListener ( Listener listener ) { <nl> listeners . remove ( listener ) ; <nl> - if ( listeners . isEmpty ( ) & & notificationToken ! = null ) { <nl> - notificationToken . close ( ) ; <nl> - notificationToken = null ; <nl> + if ( listeners . isEmpty ( ) ) { <nl> + nativeStopListening ( nativePtr ) ; <nl> } <nl> } <nl> <nl> public void removeAllListeners ( ) { <nl> listeners . clear ( ) ; <nl> - if ( notificationToken ! = null ) { <nl> - notificationToken . close ( ) ; <nl> - notificationToken = null ; <nl> - } <nl> + nativeStopListening ( nativePtr ) ; <nl> } <nl> <nl> / / Called by JNI <nl> + @ KeepMember <nl> @ SuppressWarnings ( " unused " ) <nl> private void notifyChangeListeners ( ) { <nl> if ( ! listeners . isEmpty ( ) ) { <nl> @ @ - 244 , 6 + 220 , 7 @ @ public class Collection implements NativeObject { <nl> private static native long nativeGetFinalizerPtr ( ) ; <nl> private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , <nl> long sortDescNativePtr , long distinctDescNativePtr ) ; <nl> + @ SuppressWarnings ( " unused " ) / / Not used for now <nl> private static native long nativeCreateSnapshot ( long nativePtr ) ; <nl> private static native long nativeGetRow ( long nativePtr , int index ) ; <nl> private static native long nativeFirstRow ( long nativePtr ) ; <nl> @ @ - 253 , 9 + 230 , 9 @ @ public class Collection implements NativeObject { <nl> private static native long nativeSize ( long nativePtr ) ; <nl> private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; <nl> private static native long nativeSort ( long nativePtr , long sortDescNativePtr ) ; <nl> - private native long nativeAddListener ( long nativePtr ) ; <nl> - private static native long nativeNotificationTokenGetFinalizerPtr ( ) ; <nl> - private static native void nativeNotificationTokenClose ( long nativePtr ) ; <nl> + / / Non - static , we need this Collection object in JNI . <nl> + private native void nativeStartListening ( long nativePtr ) ; <nl> + private native void nativeStopListening ( long nativePtr ) ; <nl> private static native long nativeWhere ( long nativePtr ) ; <nl> private static native long nativeIndexOf ( long nativePtr , long rowNativePtr ) ; <nl> private static native long nativeIndexOfBySourceRowIndex ( long nativePtr , long sourceRowIndex ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> index 40dcbb8 . . d3dadc3 100644 <nl> - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> @ @ - 37 , 7 + 37 , 7 @ @ set ( classes _ LIST <nl> io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow <nl> io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil <nl> io . realm . log . LogLevel io . realm . log . RealmLog io . realm . Property io . realm . RealmSchema <nl> - io . realm . RealmObjectSchema io . realm . RealmResults io . realm . internal . NativeObjectReference <nl> + io . realm . RealmObjectSchema io . realm . internal . Collection io . realm . internal . NativeObjectReference <nl> ) <nl> # / . / is the workaround for the problem that AS cannot find the jni headers . <nl> # See https : / / github . com / googlesamples / android - ndk / issues / 319 <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp b / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp <nl> deleted file mode 100644 <nl> index 7075b29 . . 0000000 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp <nl> + + + / dev / null <nl> @ @ - 1 , 202 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2016 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - # include < jni . h > <nl> - # include " io _ realm _ RealmResults . h " <nl> - <nl> - # include < vector > <nl> - <nl> - # include < object - store / src / shared _ realm . hpp > <nl> - # include < object - store / src / results . hpp > <nl> - <nl> - # include " util . hpp " <nl> - <nl> - using namespace realm ; <nl> - <nl> - JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ RealmResults _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared _ realm _ ptr , jlong query _ ptr , jlongArray colunm _ indices , jbooleanArray jsort _ orders ) { <nl> - TR _ ENTER ( ) <nl> - try { <nl> - auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; <nl> - auto query = reinterpret _ cast < Query * > ( query _ ptr ) ; <nl> - <nl> - JniBooleanArray order ( env , jsort _ orders ) ; <nl> - JniLongArray indices ( env , colunm _ indices ) ; <nl> - <nl> - std : : vector < bool > sort _ order ; <nl> - std : : vector < std : : vector < size _ t > > sort _ indices ; <nl> - for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { <nl> - sort _ order . push _ back ( to _ bool ( order [ i ] ) ) ; <nl> - sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; <nl> - } <nl> - <nl> - SortDescriptor sort _ descriptor ( * ( query - > get _ table ( ) . get ( ) ) , sort _ indices , sort _ order ) ; <nl> - Results results ( shared _ realm , * query , sort _ descriptor ) ; <nl> - return reinterpret _ cast < jlong > ( new Results ( std : : move ( results ) ) ) ; <nl> - } CATCH _ STD ( ) <nl> - return reinterpret _ cast < jlong > ( nullptr ) ; <nl> - } <nl> - <nl> - JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ RealmResults _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) { <nl> - TR _ ENTER _ PTR ( native _ ptr ) <nl> - try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - auto snapshot = results - > snapshot ( ) ; <nl> - return reinterpret _ cast < jlong > ( new Results ( snapshot ) ) ; <nl> - } CATCH _ STD ( ) <nl> - return reinterpret _ cast < jlong > ( nullptr ) ; <nl> - } <nl> - <nl> - JNIEXPORT jboolean JNICALL <nl> - Java _ io _ realm _ RealmResults _ nativeContains ( JNIEnv * env , jclass , jlong native _ ptr , jlong native _ row _ ptr ) { <nl> - TR _ ENTER _ PTR ( native _ ptr ) ; <nl> - try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - auto row = reinterpret _ cast < Row * > ( native _ row _ ptr ) ; <nl> - size _ t index = results - > index _ of ( * row ) ; <nl> - return to _ jbool ( index ! = not _ found ) ; <nl> - } CATCH _ STD ( ) ; <nl> - return JNI _ FALSE ; <nl> - } <nl> - <nl> - / / FIXME : we don ' t use it at the moment <nl> - JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ RealmResults _ nativeGetRow ( JNIEnv * env , jclass , jlong native _ ptr , jint index ) { <nl> - TR _ ENTER _ PTR ( native _ ptr ) <nl> - try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - auto row = results - > get ( static _ cast < size _ t > ( index ) ) ; <nl> - return reinterpret _ cast < jlong > ( new Row ( std : : move ( row ) ) ) ; <nl> - } CATCH _ STD ( ) <nl> - return reinterpret _ cast < jlong > ( nullptr ) ; <nl> - } <nl> - <nl> - JNIEXPORT void JNICALL <nl> - Java _ io _ realm _ RealmResults _ nativeClear ( JNIEnv * env , jclass , jlong native _ ptr ) { <nl> - TR _ ENTER _ PTR ( native _ ptr ) <nl> - try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - results - > clear ( ) ; <nl> - } CATCH _ STD ( ) <nl> - } <nl> - <nl> - JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ RealmResults _ nativeSize ( JNIEnv * env , jclass , jlong native _ ptr ) { <nl> - TR _ ENTER _ PTR ( native _ ptr ) <nl> - try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - return static _ cast < jlong > ( results - > size ( ) ) ; <nl> - } CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jobject JNICALL <nl> - Java _ io _ realm _ RealmResults _ nativeAggregate ( JNIEnv * env , jclass , jlong native _ ptr , jlong column _ index , jbyte agg _ func ) { <nl> - TR _ ENTER _ PTR ( native _ ptr ) <nl> - try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - <nl> - size _ t index = S ( column _ index ) ; <nl> - Optional < Mixed > value ; <nl> - switch ( agg _ func ) { <nl> - case io _ realm _ RealmResults _ AGGREGATE _ FUNCTION _ MINIMUM : <nl> - value = results - > min ( index ) ; <nl> - break ; <nl> - case io _ realm _ RealmResults _ AGGREGATE _ FUNCTION _ MAXIMUM : <nl> - value = results - > max ( index ) ; <nl> - break ; <nl> - case io _ realm _ RealmResults _ AGGREGATE _ FUNCTION _ AVERAGE : <nl> - value = results - > average ( index ) ; <nl> - break ; <nl> - case io _ realm _ RealmResults _ AGGREGATE _ FUNCTION _ SUM : <nl> - value = results - > sum ( index ) ; <nl> - break ; <nl> - } <nl> - <nl> - if ( ! value ) { <nl> - return static _ cast < jobject > ( nullptr ) ; <nl> - } <nl> - <nl> - Mixed m = * value ; <nl> - switch ( m . get _ type ( ) ) { <nl> - case type _ Int : <nl> - return NewLong ( env , m . get _ int ( ) ) ; <nl> - case type _ Float : <nl> - return NewFloat ( env , m . get _ float ( ) ) ; <nl> - case type _ Double : <nl> - return NewDouble ( env , m . get _ double ( ) ) ; <nl> - case type _ Timestamp : <nl> - return NewDate ( env , m . get _ timestamp ( ) ) ; <nl> - default : <nl> - throw std : : invalid _ argument ( " Excepted numeric type " ) ; <nl> - } <nl> - } CATCH _ STD ( ) <nl> - return static _ cast < jobject > ( nullptr ) ; <nl> - } <nl> - <nl> - JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ RealmResults _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlongArray colunm _ indices , jbooleanArray jsort _ orders ) { <nl> - TR _ ENTER _ PTR ( native _ ptr ) <nl> - try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - <nl> - JniBooleanArray order ( env , jsort _ orders ) ; <nl> - JniLongArray indices ( env , colunm _ indices ) ; <nl> - <nl> - if ( order . len ( ) ! = indices . len ( ) ) { <nl> - throw std : : invalid _ argument ( " Number of columns and sorting orders do not match . " ) ; <nl> - } <nl> - <nl> - std : : vector < bool > sort _ orders ; <nl> - std : : vector < std : : vector < size _ t > > sort _ indices ; <nl> - for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { <nl> - sort _ orders . push _ back ( to _ bool ( order [ i ] ) ) ; <nl> - sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; <nl> - } <nl> - <nl> - SortDescriptor sort _ descriptor ( * ( results - > get _ query ( ) . get _ table ( ) . get ( ) ) , sort _ indices , sort _ orders ) ; <nl> - auto sorted _ result = results - > sort ( std : : move ( sort _ descriptor ) ) ; <nl> - return reinterpret _ cast < jlong > ( new Results ( std : : move ( sorted _ result ) ) ) ; <nl> - } CATCH _ STD ( ) <nl> - return reinterpret _ cast < jlong > ( nullptr ) ; <nl> - } <nl> - <nl> - JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ RealmResults _ nativeAddListener ( JNIEnv * env , jobject instance , jlong native _ ptr ) { <nl> - TR _ ENTER _ PTR ( native _ ptr ) <nl> - <nl> - try { <nl> - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - <nl> - / / FIXME : Those need to be freed for all the corner cases ! <nl> - jobject weak _ results = env - > NewWeakGlobalRef ( instance ) ; <nl> - <nl> - auto cb = [ = ] ( realm : : CollectionChangeSet const & changes , <nl> - std : : exception _ ptr err ) { <nl> - jclass results _ class = env - > GetObjectClass ( weak _ results ) ; <nl> - jmethodID notify _ method = env - > GetMethodID ( results _ class , " notifyChangeListeners " , " ( ) V " ) ; <nl> - env - > CallVoidMethod ( weak _ results , notify _ method ) ; <nl> - } ; <nl> - <nl> - NotificationToken token = results - > add _ notification _ callback ( cb ) ; <nl> - / / FIXME : Let ' s leak them ALL for now ! ! <nl> - return reinterpret _ cast < jlong > ( <nl> - new std : : unique _ ptr < NotificationToken > ( new NotificationToken ( std : : move ( token ) ) ) ) ; <nl> - } CATCH _ STD ( ) <nl> - <nl> - return reinterpret _ cast < jlong > ( nullptr ) ; <nl> - } <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> new file mode 100644 <nl> index 0000000 . . c4e8d6c <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 0 , 0 + 1 , 214 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # include < jni . h > <nl> + # include " io _ realm _ internal _ Collection . h " <nl> + <nl> + # include < vector > <nl> + <nl> + # include < object - store / src / shared _ realm . hpp > <nl> + # include < object - store / src / results . hpp > <nl> + <nl> + # include " util . hpp " <nl> + <nl> + using namespace realm ; <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared _ realm _ ptr , jlong query _ ptr , <nl> + jlongArray colunm _ indices , jbooleanArray jsort _ orders ) <nl> + { <nl> + TR _ ENTER ( ) <nl> + try { <nl> + auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; <nl> + auto query = reinterpret _ cast < Query * > ( query _ ptr ) ; <nl> + <nl> + JniBooleanArray order ( env , jsort _ orders ) ; <nl> + JniLongArray indices ( env , colunm _ indices ) ; <nl> + <nl> + std : : vector < bool > sort _ order ; <nl> + std : : vector < std : : vector < size _ t > > sort _ indices ; <nl> + for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { <nl> + sort _ order . push _ back ( to _ bool ( order [ i ] ) ) ; <nl> + sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; <nl> + } <nl> + <nl> + SortDescriptor sort _ descriptor ( * ( query - > get _ table ( ) . get ( ) ) , sort _ indices , sort _ order ) ; <nl> + Results results ( shared _ realm , * query , sort _ descriptor ) ; <nl> + return reinterpret _ cast < jlong > ( new Results ( std : : move ( results ) ) ) ; <nl> + } CATCH _ STD ( ) <nl> + return reinterpret _ cast < jlong > ( nullptr ) ; <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto snapshot = results - > snapshot ( ) ; <nl> + return reinterpret _ cast < jlong > ( new Results ( snapshot ) ) ; <nl> + } CATCH _ STD ( ) <nl> + return reinterpret _ cast < jlong > ( nullptr ) ; <nl> + } <nl> + <nl> + JNIEXPORT jboolean JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeContains ( JNIEnv * env , jclass , jlong native _ ptr , jlong native _ row _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) ; <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto row = reinterpret _ cast < Row * > ( native _ row _ ptr ) ; <nl> + size _ t index = results - > index _ of ( * row ) ; <nl> + return to _ jbool ( index ! = not _ found ) ; <nl> + } CATCH _ STD ( ) ; <nl> + return JNI _ FALSE ; <nl> + } <nl> + <nl> + / / FIXME : we don ' t use it at the moment <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeGetRow ( JNIEnv * env , jclass , jlong native _ ptr , jint index ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto row = results - > get ( static _ cast < size _ t > ( index ) ) ; <nl> + return reinterpret _ cast < jlong > ( new Row ( std : : move ( row ) ) ) ; <nl> + } CATCH _ STD ( ) <nl> + return reinterpret _ cast < jlong > ( nullptr ) ; <nl> + } <nl> + <nl> + JNIEXPORT void JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeClear ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + results - > clear ( ) ; <nl> + } CATCH _ STD ( ) <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeSize ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + return static _ cast < jlong > ( results - > size ( ) ) ; <nl> + } CATCH _ STD ( ) <nl> + return 0 ; <nl> + } <nl> + <nl> + JNIEXPORT jobject JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong native _ ptr , jlong column _ index , <nl> + jbyte agg _ func ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + <nl> + size _ t index = S ( column _ index ) ; <nl> + Optional < Mixed > value ; <nl> + switch ( agg _ func ) { <nl> + case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MINIMUM : <nl> + value = results - > min ( index ) ; <nl> + break ; <nl> + case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MAXIMUM : <nl> + value = results - > max ( index ) ; <nl> + break ; <nl> + case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ AVERAGE : <nl> + value = results - > average ( index ) ; <nl> + break ; <nl> + case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ SUM : <nl> + value = results - > sum ( index ) ; <nl> + break ; <nl> + } <nl> + <nl> + if ( ! value ) { <nl> + return static _ cast < jobject > ( nullptr ) ; <nl> + } <nl> + <nl> + Mixed m = * value ; <nl> + switch ( m . get _ type ( ) ) { <nl> + case type _ Int : <nl> + return NewLong ( env , m . get _ int ( ) ) ; <nl> + case type _ Float : <nl> + return NewFloat ( env , m . get _ float ( ) ) ; <nl> + case type _ Double : <nl> + return NewDouble ( env , m . get _ double ( ) ) ; <nl> + case type _ Timestamp : <nl> + return NewDate ( env , m . get _ timestamp ( ) ) ; <nl> + default : <nl> + throw std : : invalid _ argument ( " Excepted numeric type " ) ; <nl> + } <nl> + } CATCH _ STD ( ) <nl> + return static _ cast < jobject > ( nullptr ) ; <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlongArray colunm _ indices , <nl> + jbooleanArray jsort _ orders ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + <nl> + JniBooleanArray order ( env , jsort _ orders ) ; <nl> + JniLongArray indices ( env , colunm _ indices ) ; <nl> + <nl> + if ( order . len ( ) ! = indices . len ( ) ) { <nl> + throw std : : invalid _ argument ( " Number of columns and sorting orders do not match . " ) ; <nl> + } <nl> + <nl> + std : : vector < bool > sort _ orders ; <nl> + std : : vector < std : : vector < size _ t > > sort _ indices ; <nl> + for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { <nl> + sort _ orders . push _ back ( to _ bool ( order [ i ] ) ) ; <nl> + sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; <nl> + } <nl> + <nl> + SortDescriptor sort _ descriptor ( * ( results - > get _ query ( ) . get _ table ( ) . get ( ) ) , sort _ indices , sort _ orders ) ; <nl> + auto sorted _ result = results - > sort ( std : : move ( sort _ descriptor ) ) ; <nl> + return reinterpret _ cast < jlong > ( new Results ( std : : move ( sorted _ result ) ) ) ; <nl> + } CATCH _ STD ( ) <nl> + return reinterpret _ cast < jlong > ( nullptr ) ; <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeAddListener ( JNIEnv * env , jobject instance , jlong native _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + <nl> + / / FIXME : Those need to be freed for all the corner cases ! <nl> + jobject weak _ results = env - > NewWeakGlobalRef ( instance ) ; <nl> + <nl> + auto cb = [ = ] ( realm : : CollectionChangeSet const & changes , <nl> + std : : exception _ ptr err ) { <nl> + jclass results _ class = env - > GetObjectClass ( weak _ results ) ; <nl> + jmethodID notify _ method = env - > GetMethodID ( results _ class , " notifyChangeListeners " , " ( ) V " ) ; <nl> + env - > CallVoidMethod ( weak _ results , notify _ method ) ; <nl> + } ; <nl> + <nl> + NotificationToken token = results - > add _ notification _ callback ( cb ) ; <nl> + / / FIXME : Let ' s leak them ALL for now ! ! <nl> + return reinterpret _ cast < jlong > ( <nl> + new std : : unique _ ptr < NotificationToken > ( new NotificationToken ( std : : move ( token ) ) ) ) ; <nl> + } CATCH _ STD ( ) <nl> + <nl> + return reinterpret _ cast < jlong > ( nullptr ) ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> new file mode 100644 <nl> index 0000000 . . b227851 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 0 , 0 + 1 , 60 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . internal ; <nl> + <nl> + public class Collection implements NativeObject { <nl> + <nl> + private final long nativePtr ; <nl> + private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; <nl> + private final Context context ; <nl> + private final TableQuery query ; <nl> + <nl> + / / Public for static checking in JNI <nl> + public static final byte AGGREGATE _ FUNCTION _ MINIMUM = 1 ; <nl> + public static final byte AGGREGATE _ FUNCTION _ MAXIMUM = 2 ; <nl> + public static final byte AGGREGATE _ FUNCTION _ AVERAGE = 3 ; <nl> + public static final byte AGGREGATE _ FUNCTION _ SUM = 4 ; <nl> + <nl> + protected Collection ( SharedRealm sharedRealm , TableQuery query , long indices [ ] , boolean [ ] orders ) { <nl> + this . context = sharedRealm . context ; <nl> + this . query = query ; <nl> + <nl> + this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , indices , orders ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public long getNativePtr ( ) { <nl> + return nativePtr ; <nl> + } <nl> + <nl> + @ Override <nl> + public long getNativeFinalizerPtr ( ) { <nl> + return nativeFinalizerPtr ; <nl> + } <nl> + <nl> + private static native long nativeGetFinalizerPtr ( ) ; <nl> + private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , long [ ] columnIndices , <nl> + boolean [ ] orders ) ; <nl> + private static native long nativeCreateSnapshot ( long nativePtr ) ; <nl> + private static native long nativeGetRow ( long nativePtr , int index ) ; <nl> + private static native boolean nativeContains ( long nativePtr , long nativeRowPtr ) ; <nl> + private static native void nativeClear ( long nativePtr ) ; <nl> + private static native long nativeSize ( long nativePtr ) ; <nl> + private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; <nl> + private static native long nativeSort ( long nativePtr , long [ ] columnIndices , boolean [ ] orders ) ; <nl> + private native long nativeAddListener ( long nativePtr ) ; <nl> + }

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index 36bebfc . . b50c861 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 21 , 28 + 21 , 45 @ @ 
 
 # include < object - store / src / shared _ realm . hpp > 
 # include < object - store / src / results . hpp > 
 - # include < realm / table _ view . hpp > 
 
 # include " util . hpp " 
 + # include " jni _ util / method . hpp " 
 
 using namespace realm ; 
 + using namespace realm : : jni _ util ; 
 + 
 + / / We need to control the life cycle of Results , weak ref of Java Collection object and the NotificationToken . 
 + / / Wrap all three together , so when the Java Collection object gets GCed , all three of them will be invalidated . 
 + struct ResultsWrapper { 
 + jobject m _ collection _ weak _ ref ; 
 + Results m _ results ; 
 + NotificationToken m _ notification _ token ; 
 + 
 + ResultsWrapper ( Results & & results ) 
 + : m _ collection _ weak _ ref ( nullptr ) , m _ results ( results ) , m _ notification _ token ( ) { } 
 + 
 + ResultsWrapper ( ResultsWrapper & & ) = delete ; 
 + ResultsWrapper & operator = ( ResultsWrapper & & ) = delete ; 
 + 
 + ResultsWrapper ( ResultsWrapper const & ) = delete ; 
 + ResultsWrapper & operator = ( ResultsWrapper const & ) = delete ; 
 + 
 + ~ ResultsWrapper ( ) 
 + { 
 + if ( m _ collection _ weak _ ref ) { 
 + JNIEnv * env ; 
 + g _ vm - > AttachCurrentThread ( & env , nullptr ) ; 
 + env - > DeleteWeakGlobalRef ( m _ collection _ weak _ ref ) ; 
 + } 
 + } 
 + } ; 
 
 static void finalize _ results ( jlong ptr ) ; 
 - static void finalize _ notification _ token ( jlong ptr ) ; 
 
 static void finalize _ results ( jlong ptr ) 
 { 
 TR _ ENTER _ PTR ( ptr ) ; 
 - delete reinterpret _ cast < Results * > ( ptr ) ; 
 - } 
 - 
 - static void finalize _ notification _ token ( jlong ptr ) 
 - { 
 - TR _ ENTER _ PTR ( ptr ) ; 
 - / / NotificationToken can be closed by NotificationToken . close ( ) . Then ptr will be reset in that case . 
 - if ( ptr ) { 
 - delete reinterpret _ cast < NotificationToken * > ( ptr ) ; 
 - } 
 + delete reinterpret _ cast < ResultsWrapper * > ( ptr ) ; 
 } 
 
 JNIEXPORT jlong JNICALL 
 @ @ - 60 , 11 + 77 , 12 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong 
 auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; 
 auto sort _ desc _ ptr = reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; 
 auto distinct _ desc _ ptr = reinterpret _ cast < SortDescriptor * > ( distinct _ desc _ native _ ptr ) ; 
 - auto results = new Results ( shared _ realm , * query , 
 - sort _ desc _ ptr ? * sort _ desc _ ptr : SortDescriptor ( ) , 
 - distinct _ desc _ ptr ? * distinct _ desc _ ptr : SortDescriptor ( ) ) ; 
 + Results results ( shared _ realm , * query , 
 + sort _ desc _ ptr ? * sort _ desc _ ptr : SortDescriptor ( ) , 
 + distinct _ desc _ ptr ? * distinct _ desc _ ptr : SortDescriptor ( ) ) ; 
 + auto wrapper = new ResultsWrapper ( std : : move ( results ) ) ; 
 
 - return reinterpret _ cast < jlong > ( results ) ; 
 + return reinterpret _ cast < jlong > ( wrapper ) ; 
 } CATCH _ STD ( ) 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 } 
 @ @ - 74 , 8 + 92 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlon 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - auto snapshot = results - > snapshot ( ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 + auto snapshot = wrapper - > m _ results . snapshot ( ) ; 
 return reinterpret _ cast < jlong > ( new Results ( snapshot ) ) ; 
 } CATCH _ STD ( ) 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 @ @ - 86 , 22 + 104 , 21 @ @ Java _ io _ realm _ internal _ Collection _ nativeContains ( JNIEnv * env , jclass , jlong nati 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) ; 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 auto row = reinterpret _ cast < Row * > ( native _ row _ ptr ) ; 
 - size _ t index = results - > index _ of ( * row ) ; 
 + size _ t index = wrapper - > m _ results . index _ of ( * row ) ; 
 return to _ jbool ( index ! = not _ found ) ; 
 } CATCH _ STD ( ) ; 
 return JNI _ FALSE ; 
 } 
 
 - / / FIXME : we don ' t use it at the moment 
 JNIEXPORT jlong JNICALL 
 Java _ io _ realm _ internal _ Collection _ nativeGetRow ( JNIEnv * env , jclass , jlong native _ ptr , jint index ) 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - auto row = results - > get ( static _ cast < size _ t > ( index ) ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 + auto row = wrapper - > m _ results . get ( static _ cast < size _ t > ( index ) ) ; 
 return reinterpret _ cast < jlong > ( new Row ( std : : move ( row ) ) ) ; 
 } CATCH _ STD ( ) 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 @ @ - 112 , 8 + 129 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeFirstRow ( JNIEnv * env , jclass , jlong nati 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - auto optional _ row = results - > first ( ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 + auto optional _ row = wrapper - > m _ results . first ( ) ; 
 if ( optional _ row ) { 
 return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; 
 } 
 @ @ - 127 , 8 + 144 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeLastRow ( JNIEnv * env , jclass , jlong nativ 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - auto optional _ row = results - > last ( ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 + auto optional _ row = wrapper - > m _ results . last ( ) ; 
 if ( optional _ row ) { 
 return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; 
 } 
 @ @ - 141 , 8 + 158 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeClear ( JNIEnv * env , jclass , jlong native _ 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - results - > clear ( ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 + wrapper - > m _ results . clear ( ) ; 
 } CATCH _ STD ( ) 
 } 
 
 @ @ - 151 , 8 + 168 , 8 @ @ Java _ io _ realm _ internal _ Collection _ nativeSize ( JNIEnv * env , jclass , jlong native _ p 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - return static _ cast < jlong > ( results - > size ( ) ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 + return static _ cast < jlong > ( wrapper - > m _ results . size ( ) ) ; 
 } CATCH _ STD ( ) 
 return 0 ; 
 } 
 @ @ - 163 , 23 + 180 , 25 @ @ Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong nat 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 
 size _ t index = S ( column _ index ) ; 
 Optional < Mixed > value ; 
 switch ( agg _ func ) { 
 case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MINIMUM : 
 - value = results - > min ( index ) ; 
 + value = wrapper - > m _ results . min ( index ) ; 
 break ; 
 case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MAXIMUM : 
 - value = results - > max ( index ) ; 
 + value = wrapper - > m _ results . max ( index ) ; 
 break ; 
 case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ AVERAGE : 
 - value = results - > average ( index ) ; 
 + value = wrapper - > m _ results . average ( index ) ; 
 break ; 
 case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ SUM : 
 - value = results - > sum ( index ) ; 
 + value = wrapper - > m _ results . sum ( index ) ; 
 break ; 
 + default : 
 + REALM _ UNREACHABLE ( ) ; 
 } 
 
 if ( ! value ) { 
 @ @ - 208 , 61 + 227 , 55 @ @ Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ p 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 auto sort _ descriptor = * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; 
 - auto sorted _ result = results - > sort ( std : : move ( sort _ descriptor ) ) ; 
 - return reinterpret _ cast < jlong > ( new Results ( std : : move ( sorted _ result ) ) ) ; 
 + auto sorted _ result = wrapper - > m _ results . sort ( std : : move ( sort _ descriptor ) ) ; 
 + return reinterpret _ cast < jlong > ( new ResultsWrapper ( std : : move ( sorted _ result ) ) ) ; 
 } CATCH _ STD ( ) 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 } 
 
 - JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ internal _ Collection _ nativeAddListener ( JNIEnv * env , jobject instance , jlong native _ ptr ) 
 + JNIEXPORT void JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeStartListening ( JNIEnv * env , jobject instance , jlong native _ ptr ) 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 
 - try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + static JniMethod notify _ change _ listeners ( env , instance , " notifyChangeListeners " , " ( ) V " ) ; 
 
 - / / FIXME : Those need to be freed for all the corner cases ! 
 - jobject weak _ results = env - > NewWeakGlobalRef ( instance ) ; 
 + try { 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 + if ( wrapper - > m _ collection _ weak _ ref = = nullptr ) { 
 + wrapper - > m _ collection _ weak _ ref = env - > NewWeakGlobalRef ( instance ) ; 
 + } 
 
 auto cb = [ = ] ( realm : : CollectionChangeSet const & changes , 
 std : : exception _ ptr err ) { 
 - / / OS will call all notifiers ' callback in one run , so check the Java excpetion first ! ! 
 + / / OS will call all notifiers ' callback in one run , so check the Java exception first ! ! 
 if ( env - > ExceptionCheck ( ) ) return ; 
 
 - jclass results _ class = env - > GetObjectClass ( weak _ results ) ; 
 - jmethodID notify _ method = env - > GetMethodID ( results _ class , " notifyChangeListeners " , " ( ) V " ) ; 
 - env - > CallVoidMethod ( weak _ results , notify _ method ) ; 
 + env - > CallVoidMethod ( wrapper - > m _ collection _ weak _ ref , notify _ change _ listeners ) ; 
 } ; 
 
 - NotificationToken token = results - > add _ notification _ callback ( cb ) ; 
 - return reinterpret _ cast < jlong > ( new NotificationToken ( std : : move ( token ) ) ) ; 
 + wrapper - > m _ notification _ token = wrapper - > m _ results . add _ notification _ callback ( cb ) ; 
 } CATCH _ STD ( ) 
 - 
 - return reinterpret _ cast < jlong > ( nullptr ) ; 
 } 
 
 - JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ internal _ Collection _ nativeGetFinalizerPtr ( JNIEnv * , jclass ) 
 + JNIEXPORT void JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeStopListening ( JNIEnv * env , jobject , jlong native _ ptr ) 
 { 
 - TR _ ENTER ( ) 
 - return reinterpret _ cast < jlong > ( & finalize _ results ) ; 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + 
 + try { 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 + wrapper - > m _ notification _ token = { } ; 
 + } CATCH _ STD ( ) 
 } 
 
 JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenGetFinalizerPtr ( JNIEnv * , jclass ) 
 + Java _ io _ realm _ internal _ Collection _ nativeGetFinalizerPtr ( JNIEnv * , jclass ) 
 { 
 TR _ ENTER ( ) 
 - return reinterpret _ cast < jlong > ( & finalize _ notification _ token ) ; 
 - } 
 - 
 - JNIEXPORT void JNICALL 
 - Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenClose ( JNIEnv * , jclass , jlong native _ ptr ) 
 - { 
 - TR _ ENTER _ PTR ( native _ ptr ) 
 - delete reinterpret _ cast < NotificationToken * > ( native _ ptr ) ; 
 + return reinterpret _ cast < jlong > ( & finalize _ results ) ; 
 } 
 
 JNIEXPORT jlong JNICALL 
 @ @ - 270 , 9 + 283 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeWhere ( JNIEnv * env , jclass , jlong native _ 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 
 - Query * query = new Query ( results - > get _ query ( ) ) ; 
 + Query * query = new Query ( wrapper - > m _ results . get _ query ( ) ) ; 
 return reinterpret _ cast < jlong > ( query ) ; 
 } CATCH _ STD ( ) 
 return 0 ; 
 @ @ - 283 , 10 + 296 , 10 @ @ Java _ io _ realm _ internal _ Collection _ nativeIndexOf ( JNIEnv * env , jclass , jlong nativ 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 auto row = reinterpret _ cast < Row * > ( row _ native _ ptr ) ; 
 
 - return static _ cast < jlong > ( results - > index _ of ( * row ) ) ; 
 + return static _ cast < jlong > ( wrapper - > m _ results . index _ of ( * row ) ) ; 
 } CATCH _ STD ( ) 
 return npos ; 
 } 
 @ @ - 297 , 10 + 310 , 10 @ @ Java _ io _ realm _ internal _ Collection _ nativeIndexOfBySourceRowIndex ( JNIEnv * env , jcl 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto wrapper = reinterpret _ cast < ResultsWrapper * > ( native _ ptr ) ; 
 auto index = static _ cast < size _ t > ( source _ row _ index ) ; 
 
 - return static _ cast < jlong > ( results - > index _ of ( index ) ) ; 
 + return static _ cast < jlong > ( wrapper - > m _ results . index _ of ( index ) ) ; 
 } CATCH _ STD ( ) 
 return npos ; 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index af4df78 . . 48b76f2 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 22 , 7 + 22 , 12 @ @ import java . util . concurrent . CopyOnWriteArrayList ; 
 
 import io . realm . RealmChangeListener ; 
 
 - public class Collection implements NativeObject { 
 + / * * 
 + * Java wrapper of OS Results class . 
 + * It is supposed to be the backend of binding ' s query results , link list and back links . 
 + * / 
 + @ KeepMember 
 + public final class Collection implements NativeObject { 
 
 public static class Listener { 
 private final RealmChangeListener realmChangeListener ; 
 @ @ - 48 , 38 + 53 , 12 @ @ public class Collection implements NativeObject { 
 } 
 } 
 
 - private static class NotificationToken implements NativeObject { 
 - private long nativePtr ; 
 - private static final long nativeFinalizerPtr = nativeNotificationTokenGetFinalizerPtr ( ) ; 
 - 
 - NotificationToken ( long nativePtr ) { 
 - this . nativePtr = nativePtr ; 
 - Context . sharedContext . addReference ( this ) ; 
 - } 
 - 
 - @ Override 
 - public long getNativePtr ( ) { 
 - return nativePtr ; 
 - } 
 - 
 - @ Override 
 - public long getNativeFinalizerPtr ( ) { 
 - return nativeFinalizerPtr ; 
 - } 
 - 
 - public void close ( ) { 
 - nativeNotificationTokenClose ( nativePtr ) ; 
 - nativePtr = 0 ; 
 - } 
 - } 
 - 
 private final long nativePtr ; 
 private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; 
 private final SharedRealm sharedRealm ; 
 private final Context context ; 
 private final TableQuery query ; 
 private final List < Listener > listeners = new CopyOnWriteArrayList < Listener > ( ) ; 
 - private NotificationToken notificationToken = null ; 
 
 / / Public for static checking in JNI 
 @ SuppressWarnings ( " WeakerAccess " ) 
 @ @ - 201 , 31 + 180 , 28 @ @ public class Collection implements NativeObject { 
 } 
 
 public void addListener ( Listener listener ) { 
 + if ( listeners . isEmpty ( ) ) { 
 + nativeStartListening ( nativePtr ) ; 
 + } 
 if ( ! listeners . contains ( listener ) ) { 
 listeners . add ( listener ) ; 
 } 
 - if ( notificationToken = = null ) { 
 - notificationToken = new NotificationToken ( nativeAddListener ( nativePtr ) ) ; 
 - } 
 } 
 
 public void removeListener ( Listener listener ) { 
 listeners . remove ( listener ) ; 
 - if ( listeners . isEmpty ( ) & & notificationToken ! = null ) { 
 - notificationToken . close ( ) ; 
 - notificationToken = null ; 
 + if ( listeners . isEmpty ( ) ) { 
 + nativeStopListening ( nativePtr ) ; 
 } 
 } 
 
 public void removeAllListeners ( ) { 
 listeners . clear ( ) ; 
 - if ( notificationToken ! = null ) { 
 - notificationToken . close ( ) ; 
 - notificationToken = null ; 
 - } 
 + nativeStopListening ( nativePtr ) ; 
 } 
 
 / / Called by JNI 
 + @ KeepMember 
 @ SuppressWarnings ( " unused " ) 
 private void notifyChangeListeners ( ) { 
 if ( ! listeners . isEmpty ( ) ) { 
 @ @ - 244 , 6 + 220 , 7 @ @ public class Collection implements NativeObject { 
 private static native long nativeGetFinalizerPtr ( ) ; 
 private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , 
 long sortDescNativePtr , long distinctDescNativePtr ) ; 
 + @ SuppressWarnings ( " unused " ) / / Not used for now 
 private static native long nativeCreateSnapshot ( long nativePtr ) ; 
 private static native long nativeGetRow ( long nativePtr , int index ) ; 
 private static native long nativeFirstRow ( long nativePtr ) ; 
 @ @ - 253 , 9 + 230 , 9 @ @ public class Collection implements NativeObject { 
 private static native long nativeSize ( long nativePtr ) ; 
 private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; 
 private static native long nativeSort ( long nativePtr , long sortDescNativePtr ) ; 
 - private native long nativeAddListener ( long nativePtr ) ; 
 - private static native long nativeNotificationTokenGetFinalizerPtr ( ) ; 
 - private static native void nativeNotificationTokenClose ( long nativePtr ) ; 
 + / / Non - static , we need this Collection object in JNI . 
 + private native void nativeStartListening ( long nativePtr ) ; 
 + private native void nativeStopListening ( long nativePtr ) ; 
 private static native long nativeWhere ( long nativePtr ) ; 
 private static native long nativeIndexOf ( long nativePtr , long rowNativePtr ) ; 
 private static native long nativeIndexOfBySourceRowIndex ( long nativePtr , long sourceRowIndex ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 index 40dcbb8 . . d3dadc3 100644 
 - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt 
 + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 @ @ - 37 , 7 + 37 , 7 @ @ set ( classes _ LIST 
 io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow 
 io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil 
 io . realm . log . LogLevel io . realm . log . RealmLog io . realm . Property io . realm . RealmSchema 
 - io . realm . RealmObjectSchema io . realm . RealmResults io . realm . internal . NativeObjectReference 
 + io . realm . RealmObjectSchema io . realm . internal . Collection io . realm . internal . NativeObjectReference 
 ) 
 # / . / is the workaround for the problem that AS cannot find the jni headers . 
 # See https : / / github . com / googlesamples / android - ndk / issues / 319 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp b / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp 
 deleted file mode 100644 
 index 7075b29 . . 0000000 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp 
 + + + / dev / null 
 @ @ - 1 , 202 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2016 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - # include < jni . h > 
 - # include " io _ realm _ RealmResults . h " 
 - 
 - # include < vector > 
 - 
 - # include < object - store / src / shared _ realm . hpp > 
 - # include < object - store / src / results . hpp > 
 - 
 - # include " util . hpp " 
 - 
 - using namespace realm ; 
 - 
 - JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ RealmResults _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared _ realm _ ptr , jlong query _ ptr , jlongArray colunm _ indices , jbooleanArray jsort _ orders ) { 
 - TR _ ENTER ( ) 
 - try { 
 - auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; 
 - auto query = reinterpret _ cast < Query * > ( query _ ptr ) ; 
 - 
 - JniBooleanArray order ( env , jsort _ orders ) ; 
 - JniLongArray indices ( env , colunm _ indices ) ; 
 - 
 - std : : vector < bool > sort _ order ; 
 - std : : vector < std : : vector < size _ t > > sort _ indices ; 
 - for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { 
 - sort _ order . push _ back ( to _ bool ( order [ i ] ) ) ; 
 - sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; 
 - } 
 - 
 - SortDescriptor sort _ descriptor ( * ( query - > get _ table ( ) . get ( ) ) , sort _ indices , sort _ order ) ; 
 - Results results ( shared _ realm , * query , sort _ descriptor ) ; 
 - return reinterpret _ cast < jlong > ( new Results ( std : : move ( results ) ) ) ; 
 - } CATCH _ STD ( ) 
 - return reinterpret _ cast < jlong > ( nullptr ) ; 
 - } 
 - 
 - JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ RealmResults _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) { 
 - TR _ ENTER _ PTR ( native _ ptr ) 
 - try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - auto snapshot = results - > snapshot ( ) ; 
 - return reinterpret _ cast < jlong > ( new Results ( snapshot ) ) ; 
 - } CATCH _ STD ( ) 
 - return reinterpret _ cast < jlong > ( nullptr ) ; 
 - } 
 - 
 - JNIEXPORT jboolean JNICALL 
 - Java _ io _ realm _ RealmResults _ nativeContains ( JNIEnv * env , jclass , jlong native _ ptr , jlong native _ row _ ptr ) { 
 - TR _ ENTER _ PTR ( native _ ptr ) ; 
 - try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - auto row = reinterpret _ cast < Row * > ( native _ row _ ptr ) ; 
 - size _ t index = results - > index _ of ( * row ) ; 
 - return to _ jbool ( index ! = not _ found ) ; 
 - } CATCH _ STD ( ) ; 
 - return JNI _ FALSE ; 
 - } 
 - 
 - / / FIXME : we don ' t use it at the moment 
 - JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ RealmResults _ nativeGetRow ( JNIEnv * env , jclass , jlong native _ ptr , jint index ) { 
 - TR _ ENTER _ PTR ( native _ ptr ) 
 - try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - auto row = results - > get ( static _ cast < size _ t > ( index ) ) ; 
 - return reinterpret _ cast < jlong > ( new Row ( std : : move ( row ) ) ) ; 
 - } CATCH _ STD ( ) 
 - return reinterpret _ cast < jlong > ( nullptr ) ; 
 - } 
 - 
 - JNIEXPORT void JNICALL 
 - Java _ io _ realm _ RealmResults _ nativeClear ( JNIEnv * env , jclass , jlong native _ ptr ) { 
 - TR _ ENTER _ PTR ( native _ ptr ) 
 - try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - results - > clear ( ) ; 
 - } CATCH _ STD ( ) 
 - } 
 - 
 - JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ RealmResults _ nativeSize ( JNIEnv * env , jclass , jlong native _ ptr ) { 
 - TR _ ENTER _ PTR ( native _ ptr ) 
 - try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - return static _ cast < jlong > ( results - > size ( ) ) ; 
 - } CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jobject JNICALL 
 - Java _ io _ realm _ RealmResults _ nativeAggregate ( JNIEnv * env , jclass , jlong native _ ptr , jlong column _ index , jbyte agg _ func ) { 
 - TR _ ENTER _ PTR ( native _ ptr ) 
 - try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - 
 - size _ t index = S ( column _ index ) ; 
 - Optional < Mixed > value ; 
 - switch ( agg _ func ) { 
 - case io _ realm _ RealmResults _ AGGREGATE _ FUNCTION _ MINIMUM : 
 - value = results - > min ( index ) ; 
 - break ; 
 - case io _ realm _ RealmResults _ AGGREGATE _ FUNCTION _ MAXIMUM : 
 - value = results - > max ( index ) ; 
 - break ; 
 - case io _ realm _ RealmResults _ AGGREGATE _ FUNCTION _ AVERAGE : 
 - value = results - > average ( index ) ; 
 - break ; 
 - case io _ realm _ RealmResults _ AGGREGATE _ FUNCTION _ SUM : 
 - value = results - > sum ( index ) ; 
 - break ; 
 - } 
 - 
 - if ( ! value ) { 
 - return static _ cast < jobject > ( nullptr ) ; 
 - } 
 - 
 - Mixed m = * value ; 
 - switch ( m . get _ type ( ) ) { 
 - case type _ Int : 
 - return NewLong ( env , m . get _ int ( ) ) ; 
 - case type _ Float : 
 - return NewFloat ( env , m . get _ float ( ) ) ; 
 - case type _ Double : 
 - return NewDouble ( env , m . get _ double ( ) ) ; 
 - case type _ Timestamp : 
 - return NewDate ( env , m . get _ timestamp ( ) ) ; 
 - default : 
 - throw std : : invalid _ argument ( " Excepted numeric type " ) ; 
 - } 
 - } CATCH _ STD ( ) 
 - return static _ cast < jobject > ( nullptr ) ; 
 - } 
 - 
 - JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ RealmResults _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlongArray colunm _ indices , jbooleanArray jsort _ orders ) { 
 - TR _ ENTER _ PTR ( native _ ptr ) 
 - try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - 
 - JniBooleanArray order ( env , jsort _ orders ) ; 
 - JniLongArray indices ( env , colunm _ indices ) ; 
 - 
 - if ( order . len ( ) ! = indices . len ( ) ) { 
 - throw std : : invalid _ argument ( " Number of columns and sorting orders do not match . " ) ; 
 - } 
 - 
 - std : : vector < bool > sort _ orders ; 
 - std : : vector < std : : vector < size _ t > > sort _ indices ; 
 - for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { 
 - sort _ orders . push _ back ( to _ bool ( order [ i ] ) ) ; 
 - sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; 
 - } 
 - 
 - SortDescriptor sort _ descriptor ( * ( results - > get _ query ( ) . get _ table ( ) . get ( ) ) , sort _ indices , sort _ orders ) ; 
 - auto sorted _ result = results - > sort ( std : : move ( sort _ descriptor ) ) ; 
 - return reinterpret _ cast < jlong > ( new Results ( std : : move ( sorted _ result ) ) ) ; 
 - } CATCH _ STD ( ) 
 - return reinterpret _ cast < jlong > ( nullptr ) ; 
 - } 
 - 
 - JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ RealmResults _ nativeAddListener ( JNIEnv * env , jobject instance , jlong native _ ptr ) { 
 - TR _ ENTER _ PTR ( native _ ptr ) 
 - 
 - try { 
 - auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - 
 - / / FIXME : Those need to be freed for all the corner cases ! 
 - jobject weak _ results = env - > NewWeakGlobalRef ( instance ) ; 
 - 
 - auto cb = [ = ] ( realm : : CollectionChangeSet const & changes , 
 - std : : exception _ ptr err ) { 
 - jclass results _ class = env - > GetObjectClass ( weak _ results ) ; 
 - jmethodID notify _ method = env - > GetMethodID ( results _ class , " notifyChangeListeners " , " ( ) V " ) ; 
 - env - > CallVoidMethod ( weak _ results , notify _ method ) ; 
 - } ; 
 - 
 - NotificationToken token = results - > add _ notification _ callback ( cb ) ; 
 - / / FIXME : Let ' s leak them ALL for now ! ! 
 - return reinterpret _ cast < jlong > ( 
 - new std : : unique _ ptr < NotificationToken > ( new NotificationToken ( std : : move ( token ) ) ) ) ; 
 - } CATCH _ STD ( ) 
 - 
 - return reinterpret _ cast < jlong > ( nullptr ) ; 
 - } 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 new file mode 100644 
 index 0000000 . . c4e8d6c 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 0 , 0 + 1 , 214 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # include < jni . h > 
 + # include " io _ realm _ internal _ Collection . h " 
 + 
 + # include < vector > 
 + 
 + # include < object - store / src / shared _ realm . hpp > 
 + # include < object - store / src / results . hpp > 
 + 
 + # include " util . hpp " 
 + 
 + using namespace realm ; 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared _ realm _ ptr , jlong query _ ptr , 
 + jlongArray colunm _ indices , jbooleanArray jsort _ orders ) 
 + { 
 + TR _ ENTER ( ) 
 + try { 
 + auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; 
 + auto query = reinterpret _ cast < Query * > ( query _ ptr ) ; 
 + 
 + JniBooleanArray order ( env , jsort _ orders ) ; 
 + JniLongArray indices ( env , colunm _ indices ) ; 
 + 
 + std : : vector < bool > sort _ order ; 
 + std : : vector < std : : vector < size _ t > > sort _ indices ; 
 + for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { 
 + sort _ order . push _ back ( to _ bool ( order [ i ] ) ) ; 
 + sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; 
 + } 
 + 
 + SortDescriptor sort _ descriptor ( * ( query - > get _ table ( ) . get ( ) ) , sort _ indices , sort _ order ) ; 
 + Results results ( shared _ realm , * query , sort _ descriptor ) ; 
 + return reinterpret _ cast < jlong > ( new Results ( std : : move ( results ) ) ) ; 
 + } CATCH _ STD ( ) 
 + return reinterpret _ cast < jlong > ( nullptr ) ; 
 + } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeCreateSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto snapshot = results - > snapshot ( ) ; 
 + return reinterpret _ cast < jlong > ( new Results ( snapshot ) ) ; 
 + } CATCH _ STD ( ) 
 + return reinterpret _ cast < jlong > ( nullptr ) ; 
 + } 
 + 
 + JNIEXPORT jboolean JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeContains ( JNIEnv * env , jclass , jlong native _ ptr , jlong native _ row _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) ; 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto row = reinterpret _ cast < Row * > ( native _ row _ ptr ) ; 
 + size _ t index = results - > index _ of ( * row ) ; 
 + return to _ jbool ( index ! = not _ found ) ; 
 + } CATCH _ STD ( ) ; 
 + return JNI _ FALSE ; 
 + } 
 + 
 + / / FIXME : we don ' t use it at the moment 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeGetRow ( JNIEnv * env , jclass , jlong native _ ptr , jint index ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto row = results - > get ( static _ cast < size _ t > ( index ) ) ; 
 + return reinterpret _ cast < jlong > ( new Row ( std : : move ( row ) ) ) ; 
 + } CATCH _ STD ( ) 
 + return reinterpret _ cast < jlong > ( nullptr ) ; 
 + } 
 + 
 + JNIEXPORT void JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeClear ( JNIEnv * env , jclass , jlong native _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + results - > clear ( ) ; 
 + } CATCH _ STD ( ) 
 + } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeSize ( JNIEnv * env , jclass , jlong native _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + return static _ cast < jlong > ( results - > size ( ) ) ; 
 + } CATCH _ STD ( ) 
 + return 0 ; 
 + } 
 + 
 + JNIEXPORT jobject JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong native _ ptr , jlong column _ index , 
 + jbyte agg _ func ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + 
 + size _ t index = S ( column _ index ) ; 
 + Optional < Mixed > value ; 
 + switch ( agg _ func ) { 
 + case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MINIMUM : 
 + value = results - > min ( index ) ; 
 + break ; 
 + case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ MAXIMUM : 
 + value = results - > max ( index ) ; 
 + break ; 
 + case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ AVERAGE : 
 + value = results - > average ( index ) ; 
 + break ; 
 + case io _ realm _ internal _ Collection _ AGGREGATE _ FUNCTION _ SUM : 
 + value = results - > sum ( index ) ; 
 + break ; 
 + } 
 + 
 + if ( ! value ) { 
 + return static _ cast < jobject > ( nullptr ) ; 
 + } 
 + 
 + Mixed m = * value ; 
 + switch ( m . get _ type ( ) ) { 
 + case type _ Int : 
 + return NewLong ( env , m . get _ int ( ) ) ; 
 + case type _ Float : 
 + return NewFloat ( env , m . get _ float ( ) ) ; 
 + case type _ Double : 
 + return NewDouble ( env , m . get _ double ( ) ) ; 
 + case type _ Timestamp : 
 + return NewDate ( env , m . get _ timestamp ( ) ) ; 
 + default : 
 + throw std : : invalid _ argument ( " Excepted numeric type " ) ; 
 + } 
 + } CATCH _ STD ( ) 
 + return static _ cast < jobject > ( nullptr ) ; 
 + } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlongArray colunm _ indices , 
 + jbooleanArray jsort _ orders ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + 
 + JniBooleanArray order ( env , jsort _ orders ) ; 
 + JniLongArray indices ( env , colunm _ indices ) ; 
 + 
 + if ( order . len ( ) ! = indices . len ( ) ) { 
 + throw std : : invalid _ argument ( " Number of columns and sorting orders do not match . " ) ; 
 + } 
 + 
 + std : : vector < bool > sort _ orders ; 
 + std : : vector < std : : vector < size _ t > > sort _ indices ; 
 + for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { 
 + sort _ orders . push _ back ( to _ bool ( order [ i ] ) ) ; 
 + sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; 
 + } 
 + 
 + SortDescriptor sort _ descriptor ( * ( results - > get _ query ( ) . get _ table ( ) . get ( ) ) , sort _ indices , sort _ orders ) ; 
 + auto sorted _ result = results - > sort ( std : : move ( sort _ descriptor ) ) ; 
 + return reinterpret _ cast < jlong > ( new Results ( std : : move ( sorted _ result ) ) ) ; 
 + } CATCH _ STD ( ) 
 + return reinterpret _ cast < jlong > ( nullptr ) ; 
 + } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeAddListener ( JNIEnv * env , jobject instance , jlong native _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + 
 + / / FIXME : Those need to be freed for all the corner cases ! 
 + jobject weak _ results = env - > NewWeakGlobalRef ( instance ) ; 
 + 
 + auto cb = [ = ] ( realm : : CollectionChangeSet const & changes , 
 + std : : exception _ ptr err ) { 
 + jclass results _ class = env - > GetObjectClass ( weak _ results ) ; 
 + jmethodID notify _ method = env - > GetMethodID ( results _ class , " notifyChangeListeners " , " ( ) V " ) ; 
 + env - > CallVoidMethod ( weak _ results , notify _ method ) ; 
 + } ; 
 + 
 + NotificationToken token = results - > add _ notification _ callback ( cb ) ; 
 + / / FIXME : Let ' s leak them ALL for now ! ! 
 + return reinterpret _ cast < jlong > ( 
 + new std : : unique _ ptr < NotificationToken > ( new NotificationToken ( std : : move ( token ) ) ) ) ; 
 + } CATCH _ STD ( ) 
 + 
 + return reinterpret _ cast < jlong > ( nullptr ) ; 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 new file mode 100644 
 index 0000000 . . b227851 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . internal ; 
 + 
 + public class Collection implements NativeObject { 
 + 
 + private final long nativePtr ; 
 + private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; 
 + private final Context context ; 
 + private final TableQuery query ; 
 + 
 + / / Public for static checking in JNI 
 + public static final byte AGGREGATE _ FUNCTION _ MINIMUM = 1 ; 
 + public static final byte AGGREGATE _ FUNCTION _ MAXIMUM = 2 ; 
 + public static final byte AGGREGATE _ FUNCTION _ AVERAGE = 3 ; 
 + public static final byte AGGREGATE _ FUNCTION _ SUM = 4 ; 
 + 
 + protected Collection ( SharedRealm sharedRealm , TableQuery query , long indices [ ] , boolean [ ] orders ) { 
 + this . context = sharedRealm . context ; 
 + this . query = query ; 
 + 
 + this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , indices , orders ) ; 
 + } 
 + 
 + @ Override 
 + public long getNativePtr ( ) { 
 + return nativePtr ; 
 + } 
 + 
 + @ Override 
 + public long getNativeFinalizerPtr ( ) { 
 + return nativeFinalizerPtr ; 
 + } 
 + 
 + private static native long nativeGetFinalizerPtr ( ) ; 
 + private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , long [ ] columnIndices , 
 + boolean [ ] orders ) ; 
 + private static native long nativeCreateSnapshot ( long nativePtr ) ; 
 + private static native long nativeGetRow ( long nativePtr , int index ) ; 
 + private static native boolean nativeContains ( long nativePtr , long nativeRowPtr ) ; 
 + private static native void nativeClear ( long nativePtr ) ; 
 + private static native long nativeSize ( long nativePtr ) ; 
 + private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; 
 + private static native long nativeSort ( long nativePtr , long [ ] columnIndices , boolean [ ] orders ) ; 
 + private native long nativeAddListener ( long nativePtr ) ; 
 + }
