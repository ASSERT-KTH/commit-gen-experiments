BLEU SCORE: 0.016087046643979717

TEST MSG: protect Property from double free
GENERATED MSG: Handlers are now properly removed when a Realm is closed .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / Property . java b / realm / realm - library / src / main / java / io / realm / Property . java <nl> index c96fbfe . . 4285be3 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Property . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Property . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ class Property { <nl> public static final boolean REQUIRED = true ; <nl> public static final boolean INDEXED = true ; <nl> <nl> - private final long nativePtr ; <nl> + private long nativePtr ; <nl> <nl> Property ( String name , RealmFieldType type , boolean isPrimary , boolean isIndexed , boolean isRequired ) { <nl> this . nativePtr = nativeCreateProperty ( name , type . getNativeValue ( ) , isPrimary , isIndexed , ! isRequired ) ; <nl> @ @ - 47 , 6 + 47 , 7 @ @ class Property { <nl> public void close ( ) { <nl> if ( nativePtr ! = 0 ) { <nl> nativeClose ( nativePtr ) ; <nl> + nativePtr = 0L ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index d8afa0f . . fe8626b 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 111 , 6 + 111 , 25 @ @ public class RealmTest extends AndroidTestCase { <nl> newRealm . close ( ) ; <nl> } <nl> <nl> + public void testInternalRealmChangedHandlersRemoved ( ) throws InterruptedException { <nl> + final String REALM _ NAME = " test - threads " ; <nl> + Realm . deleteRealmFile ( getContext ( ) , REALM _ NAME ) ; <nl> + Realm . handlers . clear ( ) ; / / Make sure that handlers from other unit tests doesn ' t interfere . <nl> + <nl> + / / Open and close first instance of a Realm <nl> + Realm uiRealm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; <nl> + assertEquals ( 1 , Realm . handlers . size ( ) ) ; <nl> + uiRealm . close ( ) ; <nl> + <nl> + / / All Realms closed . No handlers should be alive . <nl> + assertEquals ( 0 , Realm . handlers . size ( ) ) ; <nl> + <nl> + / / Open instance the 2nd time . Old handler should now be gone <nl> + uiRealm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; <nl> + assertEquals ( 1 , Realm . handlers . size ( ) ) ; <nl> + uiRealm . close ( ) ; <nl> + } <nl> + <nl> public void testShouldCreateRealm ( ) { <nl> assertNotNull ( " Realm . getInstance unexpectedly returns null " , testRealm ) ; <nl> assertTrue ( " Realm . getInstance does not contain expected table " , testRealm . contains ( AllTypes . class ) ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java b / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java <nl> index c05436e . . 99e48f8 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java <nl> @ @ - 64 , 4 + 64 , 24 @ @ public class JNIImplicitTransactionsTest extends AndroidTestCase { <nl> <nl> } <nl> <nl> + public void testCannotUseClosedImplicitTransaction ( ) { <nl> + SharedGroup sg = new SharedGroup ( testFile , true , null ) ; <nl> + WriteTransaction wt = sg . beginWrite ( ) ; <nl> + if ( ! wt . hasTable ( " test " ) ) { <nl> + Table table = wt . getTable ( " test " ) ; <nl> + table . addColumn ( ColumnType . INTEGER , " integer " ) ; <nl> + table . addEmptyRow ( ) ; <nl> + } <nl> + wt . commit ( ) ; <nl> + ImplicitTransaction t = sg . beginImplicitTransaction ( ) ; <nl> + <nl> + sg . close ( ) ; <nl> + try { <nl> + t . advanceRead ( ) ; <nl> + } catch ( IllegalStateException e ) { <nl> + return ; <nl> + } <nl> + <nl> + fail ( " It should not be possible to advanceRead on a transaction which SharedGroup is closed " ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 3b01d6a . . bfd888d 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class Realm implements Closeable { <nl> } <nl> } ; <nl> private static final int REALM _ CHANGED = 14930352 ; / / Just a nice big Fibonacci number . For no reason : ) <nl> - private static final Map < Handler , Integer > handlers = new ConcurrentHashMap < Handler , Integer > ( ) ; <nl> + protected static final Map < Handler , Integer > handlers = new ConcurrentHashMap < Handler , Integer > ( ) ; <nl> private static final String APT _ NOT _ EXECUTED _ MESSAGE = " Annotation processor may not have been executed . " ; <nl> private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they where created . " ; <nl> private static final String CLOSED _ REALM = " This Realm instance has already been closed , making it unusable . " ; <nl> @ @ - 173 , 6 + 173 , 10 @ @ public class Realm implements Closeable { <nl> } <nl> localRefCount . put ( id , references - 1 ) ; <nl> referenceCount . set ( localRefCount ) ; <nl> + <nl> + if ( handler ! = null ) { <nl> + handlers . remove ( handler ) ; <nl> + } <nl> } <nl> <nl> private class RealmCallback implements Handler . Callback { <nl> diff - - git a / realm / src / main / java / io / realm / internal / Group . java b / realm / src / main / java / io / realm / internal / Group . java <nl> index c5a7194 . . 38ce9f2 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / Group . java <nl> + + + b / realm / src / main / java / io / realm / internal / Group . java <nl> @ @ - 135 , 7 + 135 , 16 @ @ public class Group implements Closeable { <nl> } <nl> <nl> protected static native void nativeClose ( long nativeGroupPtr ) ; <nl> - <nl> + <nl> + / * * <nl> + * Checks if a groups has been closed and can no longer be used . <nl> + * <nl> + * @ return True if closed , false otherwise . <nl> + * / <nl> + public boolean isClosed ( ) { <nl> + return nativePtr = = 0 ; <nl> + } <nl> + <nl> protected void finalize ( ) { <nl> synchronized ( context ) { <nl> if ( nativePtr ! = 0 ) { <nl> diff - - git a / realm / src / main / java / io / realm / internal / ImplicitTransaction . java b / realm / src / main / java / io / realm / internal / ImplicitTransaction . java <nl> index d436743 . . 90f223d 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / ImplicitTransaction . java <nl> + + + b / realm / src / main / java / io / realm / internal / ImplicitTransaction . java <nl> @ @ - 26 , 10 + 26 , 12 @ @ public class ImplicitTransaction extends Group { <nl> } <nl> <nl> public void advanceRead ( ) { <nl> + assertNotClosed ( ) ; <nl> parent . advanceRead ( ) ; <nl> } <nl> <nl> public void promoteToWrite ( ) { <nl> + assertNotClosed ( ) ; <nl> if ( immutable ) { <nl> immutable = false ; <nl> parent . promoteToWrite ( ) ; <nl> @ @ - 39 , 15 + 41 , 18 @ @ public class ImplicitTransaction extends Group { <nl> } <nl> <nl> public void commitAndContinueAsRead ( ) { <nl> + assertNotClosed ( ) ; <nl> parent . commitAndContinueAsRead ( ) ; <nl> immutable = true ; <nl> } <nl> <nl> public void endRead ( ) { <nl> + assertNotClosed ( ) ; <nl> parent . endRead ( ) ; <nl> } <nl> <nl> public void rollbackAndContinueAsRead ( ) { <nl> + assertNotClosed ( ) ; <nl> if ( ! immutable ) { <nl> parent . rollbackAndContinueAsRead ( ) ; <nl> immutable = true ; <nl> @ @ - 56 , 6 + 61 , 11 @ @ public class ImplicitTransaction extends Group { <nl> } <nl> } <nl> <nl> - protected void finalize ( ) { } / / Nullify the actions of Group . finalize ( ) <nl> + private void assertNotClosed ( ) { <nl> + if ( isClosed ( ) | | parent . isClosed ( ) ) { <nl> + throw new IllegalStateException ( " Cannot use ImplicitTransaction after it or its parent has been closed . " ) ; <nl> + } <nl> + } <nl> <nl> + protected void finalize ( ) { } / / Nullify the actions of Group . finalize ( ) <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / internal / SharedGroup . java b / realm / src / main / java / io / realm / internal / SharedGroup . java <nl> index 9001f54 . . fe0f767 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / SharedGroup . java <nl> + + + b / realm / src / main / java / io / realm / internal / SharedGroup . java <nl> @ @ - 206 , 7 + 206 , 7 @ @ public class SharedGroup implements Closeable { <nl> } <nl> <nl> <nl> - private boolean isClosed ( ) { <nl> + public boolean isClosed ( ) { <nl> return nativePtr = = 0 ; <nl> } <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / Property . java b / realm / realm - library / src / main / java / io / realm / Property . java 
 index c96fbfe . . 4285be3 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Property . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Property . java 
 @ @ - 26 , 7 + 26 , 7 @ @ class Property { 
 public static final boolean REQUIRED = true ; 
 public static final boolean INDEXED = true ; 
 
 - private final long nativePtr ; 
 + private long nativePtr ; 
 
 Property ( String name , RealmFieldType type , boolean isPrimary , boolean isIndexed , boolean isRequired ) { 
 this . nativePtr = nativeCreateProperty ( name , type . getNativeValue ( ) , isPrimary , isIndexed , ! isRequired ) ; 
 @ @ - 47 , 6 + 47 , 7 @ @ class Property { 
 public void close ( ) { 
 if ( nativePtr ! = 0 ) { 
 nativeClose ( nativePtr ) ; 
 + nativePtr = 0L ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index d8afa0f . . fe8626b 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 111 , 6 + 111 , 25 @ @ public class RealmTest extends AndroidTestCase { 
 newRealm . close ( ) ; 
 } 
 
 + public void testInternalRealmChangedHandlersRemoved ( ) throws InterruptedException { 
 + final String REALM _ NAME = " test - threads " ; 
 + Realm . deleteRealmFile ( getContext ( ) , REALM _ NAME ) ; 
 + Realm . handlers . clear ( ) ; / / Make sure that handlers from other unit tests doesn ' t interfere . 
 + 
 + / / Open and close first instance of a Realm 
 + Realm uiRealm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; 
 + assertEquals ( 1 , Realm . handlers . size ( ) ) ; 
 + uiRealm . close ( ) ; 
 + 
 + / / All Realms closed . No handlers should be alive . 
 + assertEquals ( 0 , Realm . handlers . size ( ) ) ; 
 + 
 + / / Open instance the 2nd time . Old handler should now be gone 
 + uiRealm = Realm . getInstance ( getContext ( ) , REALM _ NAME ) ; 
 + assertEquals ( 1 , Realm . handlers . size ( ) ) ; 
 + uiRealm . close ( ) ; 
 + } 
 + 
 public void testShouldCreateRealm ( ) { 
 assertNotNull ( " Realm . getInstance unexpectedly returns null " , testRealm ) ; 
 assertTrue ( " Realm . getInstance does not contain expected table " , testRealm . contains ( AllTypes . class ) ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java b / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java 
 index c05436e . . 99e48f8 100644 
 - - - a / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / internal / JNIImplicitTransactionsTest . java 
 @ @ - 64 , 4 + 64 , 24 @ @ public class JNIImplicitTransactionsTest extends AndroidTestCase { 
 
 } 
 
 + public void testCannotUseClosedImplicitTransaction ( ) { 
 + SharedGroup sg = new SharedGroup ( testFile , true , null ) ; 
 + WriteTransaction wt = sg . beginWrite ( ) ; 
 + if ( ! wt . hasTable ( " test " ) ) { 
 + Table table = wt . getTable ( " test " ) ; 
 + table . addColumn ( ColumnType . INTEGER , " integer " ) ; 
 + table . addEmptyRow ( ) ; 
 + } 
 + wt . commit ( ) ; 
 + ImplicitTransaction t = sg . beginImplicitTransaction ( ) ; 
 + 
 + sg . close ( ) ; 
 + try { 
 + t . advanceRead ( ) ; 
 + } catch ( IllegalStateException e ) { 
 + return ; 
 + } 
 + 
 + fail ( " It should not be possible to advanceRead on a transaction which SharedGroup is closed " ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 3b01d6a . . bfd888d 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 99 , 7 + 99 , 7 @ @ public class Realm implements Closeable { 
 } 
 } ; 
 private static final int REALM _ CHANGED = 14930352 ; / / Just a nice big Fibonacci number . For no reason : ) 
 - private static final Map < Handler , Integer > handlers = new ConcurrentHashMap < Handler , Integer > ( ) ; 
 + protected static final Map < Handler , Integer > handlers = new ConcurrentHashMap < Handler , Integer > ( ) ; 
 private static final String APT _ NOT _ EXECUTED _ MESSAGE = " Annotation processor may not have been executed . " ; 
 private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they where created . " ; 
 private static final String CLOSED _ REALM = " This Realm instance has already been closed , making it unusable . " ; 
 @ @ - 173 , 6 + 173 , 10 @ @ public class Realm implements Closeable { 
 } 
 localRefCount . put ( id , references - 1 ) ; 
 referenceCount . set ( localRefCount ) ; 
 + 
 + if ( handler ! = null ) { 
 + handlers . remove ( handler ) ; 
 + } 
 } 
 
 private class RealmCallback implements Handler . Callback { 
 diff - - git a / realm / src / main / java / io / realm / internal / Group . java b / realm / src / main / java / io / realm / internal / Group . java 
 index c5a7194 . . 38ce9f2 100644 
 - - - a / realm / src / main / java / io / realm / internal / Group . java 
 + + + b / realm / src / main / java / io / realm / internal / Group . java 
 @ @ - 135 , 7 + 135 , 16 @ @ public class Group implements Closeable { 
 } 
 
 protected static native void nativeClose ( long nativeGroupPtr ) ; 
 - 
 + 
 + / * * 
 + * Checks if a groups has been closed and can no longer be used . 
 + * 
 + * @ return True if closed , false otherwise . 
 + * / 
 + public boolean isClosed ( ) { 
 + return nativePtr = = 0 ; 
 + } 
 + 
 protected void finalize ( ) { 
 synchronized ( context ) { 
 if ( nativePtr ! = 0 ) { 
 diff - - git a / realm / src / main / java / io / realm / internal / ImplicitTransaction . java b / realm / src / main / java / io / realm / internal / ImplicitTransaction . java 
 index d436743 . . 90f223d 100644 
 - - - a / realm / src / main / java / io / realm / internal / ImplicitTransaction . java 
 + + + b / realm / src / main / java / io / realm / internal / ImplicitTransaction . java 
 @ @ - 26 , 10 + 26 , 12 @ @ public class ImplicitTransaction extends Group { 
 } 
 
 public void advanceRead ( ) { 
 + assertNotClosed ( ) ; 
 parent . advanceRead ( ) ; 
 } 
 
 public void promoteToWrite ( ) { 
 + assertNotClosed ( ) ; 
 if ( immutable ) { 
 immutable = false ; 
 parent . promoteToWrite ( ) ; 
 @ @ - 39 , 15 + 41 , 18 @ @ public class ImplicitTransaction extends Group { 
 } 
 
 public void commitAndContinueAsRead ( ) { 
 + assertNotClosed ( ) ; 
 parent . commitAndContinueAsRead ( ) ; 
 immutable = true ; 
 } 
 
 public void endRead ( ) { 
 + assertNotClosed ( ) ; 
 parent . endRead ( ) ; 
 } 
 
 public void rollbackAndContinueAsRead ( ) { 
 + assertNotClosed ( ) ; 
 if ( ! immutable ) { 
 parent . rollbackAndContinueAsRead ( ) ; 
 immutable = true ; 
 @ @ - 56 , 6 + 61 , 11 @ @ public class ImplicitTransaction extends Group { 
 } 
 } 
 
 - protected void finalize ( ) { } / / Nullify the actions of Group . finalize ( ) 
 + private void assertNotClosed ( ) { 
 + if ( isClosed ( ) | | parent . isClosed ( ) ) { 
 + throw new IllegalStateException ( " Cannot use ImplicitTransaction after it or its parent has been closed . " ) ; 
 + } 
 + } 
 
 + protected void finalize ( ) { } / / Nullify the actions of Group . finalize ( ) 
 } 
 diff - - git a / realm / src / main / java / io / realm / internal / SharedGroup . java b / realm / src / main / java / io / realm / internal / SharedGroup . java 
 index 9001f54 . . fe0f767 100644 
 - - - a / realm / src / main / java / io / realm / internal / SharedGroup . java 
 + + + b / realm / src / main / java / io / realm / internal / SharedGroup . java 
 @ @ - 206 , 7 + 206 , 7 @ @ public class SharedGroup implements Closeable { 
 } 
 
 
 - private boolean isClosed ( ) { 
 + public boolean isClosed ( ) { 
 return nativePtr = = 0 ; 
 } 

