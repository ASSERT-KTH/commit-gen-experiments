BLEU SCORE: 0.023028766869631404

TEST MSG: Clarify how insertOrUpdate behave for objects with primary keys .
GENERATED MSG: Formatted JavaDoc . Realm . canonicalPath is now package protected to enable faster path comparison .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index ad06ce1 . . 39fcd2b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 780 , 7 + 780 , 10 @ @ public final class Realm extends BaseRealm { <nl> * < p > <nl> * Please note : <nl> * < ul > <nl> - * < li > We don ' t check if the provided objects are already managed or not , so inserting a managed object will duplicate it < / li > <nl> + * < li > <nl> + * We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it . <nl> + * Duplication will only happen if the object doesn ' t have a primary key . Objects with primary keys will never get duplicated . <nl> + * < / li > <nl> * < li > We don ' t create ( nor return ) a managed { @ link RealmObject } for each element < / li > <nl> * < li > Copying an object will copy all field values . Any unset field in the object and child objects will be set to their default value if not provided < / li > <nl> * < / ul > <nl> @ @ - 811 , 7 + 814 , 10 @ @ public final class Realm extends BaseRealm { <nl> * < p > <nl> * Please note : <nl> * < ul > <nl> - * < li > We don ' t check if the provided objects are already managed or not , so inserting a managed object will duplicate it < / li > <nl> + * < li > <nl> + * We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it . <nl> + * Duplication will only happen if the object doesn ' t have a primary key . Objects with primary keys will never get duplicated . <nl> + * < / li > <nl> * < li > We don ' t create ( nor return ) a managed { @ link RealmObject } for each element < / li > <nl> * < li > Copying an object will copy all field values . Any unset field in the object and child objects will be set to their default value if not provided < / li > <nl> * < / ul > <nl> @ @ - 822 , 6 + 828 , 8 @ @ public final class Realm extends BaseRealm { <nl> * @ param object RealmObjects to insert . <nl> * @ throws IllegalStateException if the corresponding Realm is closed , called from an incorrect thread or not in a <nl> * transaction . <nl> + * @ throws io . realm . exceptions . RealmPrimaryKeyConstraintException if two objects with the same primary key is <nl> + * inserted or if a primary key value already exists in the Realm . <nl> * @ see # copyToRealm ( RealmModel ) <nl> * / <nl> public void insert ( RealmModel object ) { <nl> @ @ - 840 , 7 + 848 , 10 @ @ public final class Realm extends BaseRealm { <nl> * < p > <nl> * Please note : <nl> * < ul > <nl> - * < li > We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it < / li > <nl> + * < li > <nl> + * We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it . <nl> + * Duplication will only happen if the object doesn ' t have a primary key . Objects with primary keys will never get duplicated . <nl> + * < / li > <nl> * < li > We don ' t create ( nor return ) a managed { @ link RealmObject } for each element < / li > <nl> * < li > Copying an object will copy all field values . Any unset field in the object and child objects will be set to their default value if not provided < / li > <nl> * < / ul > <nl> @ @ - 851 , 6 + 862 , 9 @ @ public final class Realm extends BaseRealm { <nl> * @ param objects RealmObjects to insert . <nl> * @ throws IllegalStateException if the corresponding Realm is closed , called from an incorrect thread or not in a <nl> * transaction . <nl> + * @ throws io . realm . exceptions . RealmPrimaryKeyConstraintException if two objects with the same primary key is <nl> + * inserted or if a primary key value already exists in the Realm . <nl> + * <nl> * @ see # copyToRealmOrUpdate ( Iterable ) <nl> * / <nl> public void insertOrUpdate ( Collection < ? extends RealmModel > objects ) { <nl> @ @ - 871 , 7 + 885 , 10 @ @ public final class Realm extends BaseRealm { <nl> * < p > <nl> * Please note : <nl> * < ul > <nl> - * < li > We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it < / li > <nl> + * < li > <nl> + * We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it . <nl> + * Duplication will only happen if the object doesn ' t have a primary key . Objects with primary keys will never get duplicated . <nl> + * < / li > <nl> * < li > We don ' t create ( nor return ) a managed { @ link RealmObject } for each element < / li > <nl> * < li > Copying an object will copy all field values . Any unset field in the object and child objects will be set to their default value if not provided < / li > <nl> * < / ul >
NEAREST DIFF (one line): diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 890f6f7 . . c34a90a 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 156 , 7 + 156 , 7 @ @ public final class Realm implements Closeable { <nl> private Handler handler ; <nl> <nl> private final byte [ ] key ; <nl> - private final String canonicalPath ; <nl> + final String canonicalPath ; <nl> private SharedGroup sharedGroup ; <nl> private final ImplicitTransaction transaction ; <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> index eef98df . . b707060 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 102 , 15 + 102 , 15 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> * Inserts the specified object into this List at the specified location . The object is inserted before any previous <nl> * element at the specified location . If the location is equal to the size of this List , the object is added at the <nl> * end . <nl> - * < p > <nl> - * < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed <nl> + * < ol > <nl> + * < li > < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed <nl> * objects to a un - managed RealmList they will not be copied to the Realm again if using <nl> - * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . <nl> - * < p > <nl> - * < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In <nl> - * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } <nl> - * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . <nl> + * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . < / li > <nl> * <nl> + * < li > < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In <nl> + * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } <nl> + * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . < / li > <nl> + * < / ol > <nl> * @ param location the index at which to insert . <nl> * @ param object the object to add . <nl> * @ throws IndexOutOfBoundsException if { @ code location < 0 | | location > size ( ) } <nl> @ @ - 128 , 15 + 128 , 15 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> <nl> / * * <nl> * Adds the specified object at the end of this List . <nl> - * < p > <nl> - * < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed <nl> + * < ol > <nl> + * < li > < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed <nl> * objects to a un - managed RealmList they will not be copied to the Realm again if using <nl> - * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . <nl> - * < p > <nl> - * < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In <nl> - * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } <nl> - * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . <nl> + * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . < / li > <nl> * <nl> + * < li > < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In <nl> + * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } <nl> + * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . < / li > <nl> + * < / ol > <nl> * @ param object the object to add . <nl> * @ return true <nl> * / <nl> @ @ - 155 , 15 + 155 , 15 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> / * * <nl> * Replaces the element at the specified location in this list with the <nl> * specified object . <nl> - * < p > <nl> - * < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed <nl> + * < ol > <nl> + * < li > < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed <nl> * objects to a un - managed RealmList they will not be copied to the Realm again if using <nl> - * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . <nl> - * < p > <nl> - * < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In <nl> - * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } <nl> - * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . <nl> + * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . < / li > <nl> * <nl> + * < li > < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In <nl> + * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } <nl> + * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . < / li > <nl> + * < / ol > <nl> * @ param location the index at which to put the specified object . <nl> * @ param object the object to add . <nl> * @ return the previous element at the index . <nl> @ @ - 183 , 7 + 183 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> <nl> / / Transparently copies a standalone object or managed object from another Realm to the Realm backing this RealmList . <nl> private E copyToRealmIfNeeded ( E object ) { <nl> - if ( object . row ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { <nl> + if ( object . row ! = null & & object . realm . canonicalPath . equals ( realm . canonicalPath ) ) { <nl> return object ; <nl> } <nl> if ( realm . getTable ( object . getClass ( ) ) . hasPrimaryKey ( ) ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index ad06ce1 . . 39fcd2b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 780 , 7 + 780 , 10 @ @ public final class Realm extends BaseRealm { 
 * < p > 
 * Please note : 
 * < ul > 
 - * < li > We don ' t check if the provided objects are already managed or not , so inserting a managed object will duplicate it < / li > 
 + * < li > 
 + * We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it . 
 + * Duplication will only happen if the object doesn ' t have a primary key . Objects with primary keys will never get duplicated . 
 + * < / li > 
 * < li > We don ' t create ( nor return ) a managed { @ link RealmObject } for each element < / li > 
 * < li > Copying an object will copy all field values . Any unset field in the object and child objects will be set to their default value if not provided < / li > 
 * < / ul > 
 @ @ - 811 , 7 + 814 , 10 @ @ public final class Realm extends BaseRealm { 
 * < p > 
 * Please note : 
 * < ul > 
 - * < li > We don ' t check if the provided objects are already managed or not , so inserting a managed object will duplicate it < / li > 
 + * < li > 
 + * We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it . 
 + * Duplication will only happen if the object doesn ' t have a primary key . Objects with primary keys will never get duplicated . 
 + * < / li > 
 * < li > We don ' t create ( nor return ) a managed { @ link RealmObject } for each element < / li > 
 * < li > Copying an object will copy all field values . Any unset field in the object and child objects will be set to their default value if not provided < / li > 
 * < / ul > 
 @ @ - 822 , 6 + 828 , 8 @ @ public final class Realm extends BaseRealm { 
 * @ param object RealmObjects to insert . 
 * @ throws IllegalStateException if the corresponding Realm is closed , called from an incorrect thread or not in a 
 * transaction . 
 + * @ throws io . realm . exceptions . RealmPrimaryKeyConstraintException if two objects with the same primary key is 
 + * inserted or if a primary key value already exists in the Realm . 
 * @ see # copyToRealm ( RealmModel ) 
 * / 
 public void insert ( RealmModel object ) { 
 @ @ - 840 , 7 + 848 , 10 @ @ public final class Realm extends BaseRealm { 
 * < p > 
 * Please note : 
 * < ul > 
 - * < li > We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it < / li > 
 + * < li > 
 + * We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it . 
 + * Duplication will only happen if the object doesn ' t have a primary key . Objects with primary keys will never get duplicated . 
 + * < / li > 
 * < li > We don ' t create ( nor return ) a managed { @ link RealmObject } for each element < / li > 
 * < li > Copying an object will copy all field values . Any unset field in the object and child objects will be set to their default value if not provided < / li > 
 * < / ul > 
 @ @ - 851 , 6 + 862 , 9 @ @ public final class Realm extends BaseRealm { 
 * @ param objects RealmObjects to insert . 
 * @ throws IllegalStateException if the corresponding Realm is closed , called from an incorrect thread or not in a 
 * transaction . 
 + * @ throws io . realm . exceptions . RealmPrimaryKeyConstraintException if two objects with the same primary key is 
 + * inserted or if a primary key value already exists in the Realm . 
 + * 
 * @ see # copyToRealmOrUpdate ( Iterable ) 
 * / 
 public void insertOrUpdate ( Collection < ? extends RealmModel > objects ) { 
 @ @ - 871 , 7 + 885 , 10 @ @ public final class Realm extends BaseRealm { 
 * < p > 
 * Please note : 
 * < ul > 
 - * < li > We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it < / li > 
 + * < li > 
 + * We don ' t check if the provided objects are already managed or not , so inserting a managed object might duplicate it . 
 + * Duplication will only happen if the object doesn ' t have a primary key . Objects with primary keys will never get duplicated . 
 + * < / li > 
 * < li > We don ' t create ( nor return ) a managed { @ link RealmObject } for each element < / li > 
 * < li > Copying an object will copy all field values . Any unset field in the object and child objects will be set to their default value if not provided < / li > 
 * < / ul >

NEAREST DIFF:
diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 890f6f7 . . c34a90a 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 156 , 7 + 156 , 7 @ @ public final class Realm implements Closeable { 
 private Handler handler ; 
 
 private final byte [ ] key ; 
 - private final String canonicalPath ; 
 + final String canonicalPath ; 
 private SharedGroup sharedGroup ; 
 private final ImplicitTransaction transaction ; 
 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 index eef98df . . b707060 100644 
 - - - a / realm / src / main / java / io / realm / RealmList . java 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 102 , 15 + 102 , 15 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 * Inserts the specified object into this List at the specified location . The object is inserted before any previous 
 * element at the specified location . If the location is equal to the size of this List , the object is added at the 
 * end . 
 - * < p > 
 - * < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed 
 + * < ol > 
 + * < li > < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed 
 * objects to a un - managed RealmList they will not be copied to the Realm again if using 
 - * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . 
 - * < p > 
 - * < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In 
 - * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } 
 - * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . 
 + * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . < / li > 
 * 
 + * < li > < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In 
 + * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } 
 + * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . < / li > 
 + * < / ol > 
 * @ param location the index at which to insert . 
 * @ param object the object to add . 
 * @ throws IndexOutOfBoundsException if { @ code location < 0 | | location > size ( ) } 
 @ @ - 128 , 15 + 128 , 15 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 
 / * * 
 * Adds the specified object at the end of this List . 
 - * < p > 
 - * < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed 
 + * < ol > 
 + * < li > < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed 
 * objects to a un - managed RealmList they will not be copied to the Realm again if using 
 - * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . 
 - * < p > 
 - * < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In 
 - * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } 
 - * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . 
 + * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . < / li > 
 * 
 + * < li > < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In 
 + * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } 
 + * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . < / li > 
 + * < / ol > 
 * @ param object the object to add . 
 * @ return true 
 * / 
 @ @ - 155 , 15 + 155 , 15 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 / * * 
 * Replaces the element at the specified location in this list with the 
 * specified object . 
 - * < p > 
 - * < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed 
 + * < ol > 
 + * < li > < b > Un - managed RealmLists : < / b > It is possible to add both managed and un - managed objects . If adding managed 
 * objects to a un - managed RealmList they will not be copied to the Realm again if using 
 - * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . 
 - * < p > 
 - * < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In 
 - * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } 
 - * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . 
 + * { @ link Realm # copyToRealm ( RealmObject ) } afterwards . < / li > 
 * 
 + * < li > < b > Managed RealmLists : < / b > It is possible to add un - managed objects to a RealmList that is already managed . In 
 + * that case the object will transparently be copied to Realm using { @ link Realm # copyToRealm ( RealmObject ) } 
 + * or { @ link Realm # copyToRealmOrUpdate ( RealmObject ) } if it has a primary key . < / li > 
 + * < / ol > 
 * @ param location the index at which to put the specified object . 
 * @ param object the object to add . 
 * @ return the previous element at the index . 
 @ @ - 183 , 7 + 183 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 
 / / Transparently copies a standalone object or managed object from another Realm to the Realm backing this RealmList . 
 private E copyToRealmIfNeeded ( E object ) { 
 - if ( object . row ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { 
 + if ( object . row ! = null & & object . realm . canonicalPath . equals ( realm . canonicalPath ) ) { 
 return object ; 
 } 
 if ( realm . getTable ( object . getClass ( ) ) . hasPrimaryKey ( ) ) {
