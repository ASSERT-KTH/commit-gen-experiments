BLEU SCORE: 0.01080894324815623

TEST MSG: Testing sorting of Date
GENERATED MSG: Added unit test for RealmList . clear ( ) potential crash .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> index ccdb421 . . 7c787c5 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> + import java . util . Date ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> @ @ - 422 , 4 + 423 , 93 @ @ public class SortTest { <nl> allTypes . setColumnLong ( 6 ) ; <nl> realm . commitTransaction ( ) ; <nl> } <nl> + <nl> + private void populateDates ( Realm realm , int n ) { <nl> + realm . beginTransaction ( ) ; <nl> + realm . delete ( AllTypes . class ) ; <nl> + for ( int i = 0 ; i < n ; i + + ) { <nl> + AllTypes allTypes = realm . createObject ( AllTypes . class ) ; <nl> + allTypes . setColumnDate ( new Date ( i ) ) ; <nl> + } <nl> + realm . commitTransaction ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void sortingDates ( ) { <nl> + final int TEST _ SIZE = 10 ; <nl> + <nl> + populateDates ( realm , TEST _ SIZE ) ; <nl> + <nl> + RealmResults < AllTypes > objectsAscending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . ASCENDING ) ; <nl> + assertEquals ( TEST _ SIZE , objectsAscending . size ( ) ) ; <nl> + int i = 0 ; <nl> + for ( AllTypes allTypes : objectsAscending ) { <nl> + assertEquals ( new Date ( i ) , allTypes . getColumnDate ( ) ) ; <nl> + i + + ; <nl> + } <nl> + <nl> + RealmResults < AllTypes > objectsDescending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . DESCENDING ) ; <nl> + assertEquals ( TEST _ SIZE , objectsDescending . size ( ) ) ; <nl> + i = TEST _ SIZE - 1 ; <nl> + for ( AllTypes allTypes : objectsDescending ) { <nl> + assertEquals ( new Date ( i ) , allTypes . getColumnDate ( ) ) ; <nl> + i - - ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void resortingDates ( ) { <nl> + final int TEST _ SIZE = 10 ; <nl> + final AtomicInteger changeListenerCalled = new AtomicInteger ( 2 ) ; <nl> + <nl> + final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( ) ) ; <nl> + realm . setAutoRefresh ( true ) ; <nl> + populateDates ( realm , TEST _ SIZE ) ; <nl> + <nl> + final Runnable endTest = new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + if ( changeListenerCalled . decrementAndGet ( ) = = 0 ) { <nl> + realm . close ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } <nl> + } ; <nl> + <nl> + RealmResults < AllTypes > objectsAscending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . ASCENDING ) ; <nl> + assertEquals ( TEST _ SIZE , objectsAscending . size ( ) ) ; <nl> + objectsAscending . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> + @ Override <nl> + public void onChange ( RealmResults < AllTypes > element ) { <nl> + assertEquals ( TEST _ SIZE + 1 , element . size ( ) ) ; <nl> + int i = 0 ; <nl> + for ( AllTypes allTypes : element ) { <nl> + assertEquals ( new Date ( i ) , allTypes . getColumnDate ( ) ) ; <nl> + i + + ; <nl> + } <nl> + endTest . run ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + RealmResults < AllTypes > objectsDescending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . DESCENDING ) ; <nl> + assertEquals ( TEST _ SIZE , objectsDescending . size ( ) ) ; <nl> + objectsDescending . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { <nl> + @ Override <nl> + public void onChange ( RealmResults < AllTypes > element ) { <nl> + assertEquals ( TEST _ SIZE + 1 , element . size ( ) ) ; <nl> + int i = element . size ( ) - 1 ; <nl> + for ( AllTypes allTypes : element ) { <nl> + assertEquals ( new Date ( i ) , allTypes . getColumnDate ( ) ) ; <nl> + i - - ; <nl> + } <nl> + endTest . run ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + AllTypes allTypes = realm . createObject ( AllTypes . class ) ; <nl> + allTypes . setColumnDate ( new Date ( TEST _ SIZE ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> index 8ea98c3 . . 8b5c905 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java <nl> @ @ - 21 , 15 + 21 , 19 @ @ import android . test . AndroidTestCase ; <nl> import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . concurrent . Callable ; <nl> + import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . Future ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . Cat ; <nl> + import io . realm . entities . Dog ; <nl> import io . realm . entities . NonLatinFieldNames ; <nl> import io . realm . entities . Owner ; <nl> + import trifork . com . gotoguide . model . Event ; <nl> <nl> public class RealmResultsTest extends AndroidTestCase { <nl> protected final static int TEST _ DATA _ SIZE = 2516 ; <nl> @ @ - 64 , 11 + 68 , 15 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; <nl> allTypes . setColumnBoolean ( ( i % 2 ) = = 0 ) ; <nl> allTypes . setColumnBinary ( new byte [ ] { 1 , 2 , 3 } ) ; <nl> - allTypes . setColumnDate ( new Date ( ( long ) 1000 * i ) ) ; <nl> + allTypes . setColumnDate ( new Date ( ( long ) 1000 * i ) ) ; <nl> allTypes . setColumnDouble ( 3 . 1415 + i ) ; <nl> allTypes . setColumnFloat ( 1 . 234567f + i ) ; <nl> allTypes . setColumnString ( " test data " + i ) ; <nl> allTypes . setColumnLong ( i ) ; <nl> + Dog d = testRealm . createObject ( Dog . class ) ; <nl> + d . setName ( " Foo " + i ) ; <nl> + allTypes . setColumnRealmObject ( d ) ; <nl> + allTypes . getColumnRealmList ( ) . add ( d ) ; <nl> NonLatinFieldNames nonLatinFieldNames = testRealm . createObject ( NonLatinFieldNames . class ) ; <nl> nonLatinFieldNames . set 델 타 ( i ) ; <nl> nonLatinFieldNames . set Δ έ λ τ α ( i ) ; <nl> @ @ - 701 , 5 + 709 , 34 @ @ public class RealmResultsTest extends AndroidTestCase { <nl> } <nl> <nl> <nl> + public void testClearRealmList ( ) { <nl> + <nl> + / / Clearing the RealmList outside a transaction ? Should not be possible ? <nl> + testRealm . where ( AllTypes . class ) . findFirst ( ) . getColumnRealmList ( ) . clear ( ) ; <nl> + <nl> + / / Without the background commit , no crash is occurring <nl> + final CountDownLatch bgDone = new CountDownLatch ( 1 ) ; <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . commitTransaction ( ) ; <nl> + realm . close ( ) ; <nl> + bgDone . countDown ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + <nl> + try { <nl> + bgDone . await ( 2 , TimeUnit . SECONDS ) ; <nl> + } catch ( InterruptedException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + <nl> + testRealm . beginTransaction ( ) ; <nl> + testRealm . where ( AllTypes . class ) . findAll ( ) . clear ( ) ; <nl> + testRealm . commitTransaction ( ) ; <nl> + } <nl> + <nl> / / TODO : More extended tests of querying all types must be done . <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 index ccdb421 . . 7c787c5 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 + import java . util . Date ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 import io . realm . entities . AllTypes ; 
 @ @ - 422 , 4 + 423 , 93 @ @ public class SortTest { 
 allTypes . setColumnLong ( 6 ) ; 
 realm . commitTransaction ( ) ; 
 } 
 + 
 + private void populateDates ( Realm realm , int n ) { 
 + realm . beginTransaction ( ) ; 
 + realm . delete ( AllTypes . class ) ; 
 + for ( int i = 0 ; i < n ; i + + ) { 
 + AllTypes allTypes = realm . createObject ( AllTypes . class ) ; 
 + allTypes . setColumnDate ( new Date ( i ) ) ; 
 + } 
 + realm . commitTransaction ( ) ; 
 + } 
 + 
 + @ Test 
 + public void sortingDates ( ) { 
 + final int TEST _ SIZE = 10 ; 
 + 
 + populateDates ( realm , TEST _ SIZE ) ; 
 + 
 + RealmResults < AllTypes > objectsAscending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . ASCENDING ) ; 
 + assertEquals ( TEST _ SIZE , objectsAscending . size ( ) ) ; 
 + int i = 0 ; 
 + for ( AllTypes allTypes : objectsAscending ) { 
 + assertEquals ( new Date ( i ) , allTypes . getColumnDate ( ) ) ; 
 + i + + ; 
 + } 
 + 
 + RealmResults < AllTypes > objectsDescending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . DESCENDING ) ; 
 + assertEquals ( TEST _ SIZE , objectsDescending . size ( ) ) ; 
 + i = TEST _ SIZE - 1 ; 
 + for ( AllTypes allTypes : objectsDescending ) { 
 + assertEquals ( new Date ( i ) , allTypes . getColumnDate ( ) ) ; 
 + i - - ; 
 + } 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void resortingDates ( ) { 
 + final int TEST _ SIZE = 10 ; 
 + final AtomicInteger changeListenerCalled = new AtomicInteger ( 2 ) ; 
 + 
 + final Realm realm = Realm . getInstance ( looperThread . createConfiguration ( ) ) ; 
 + realm . setAutoRefresh ( true ) ; 
 + populateDates ( realm , TEST _ SIZE ) ; 
 + 
 + final Runnable endTest = new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + if ( changeListenerCalled . decrementAndGet ( ) = = 0 ) { 
 + realm . close ( ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + } 
 + } ; 
 + 
 + RealmResults < AllTypes > objectsAscending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . ASCENDING ) ; 
 + assertEquals ( TEST _ SIZE , objectsAscending . size ( ) ) ; 
 + objectsAscending . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 + @ Override 
 + public void onChange ( RealmResults < AllTypes > element ) { 
 + assertEquals ( TEST _ SIZE + 1 , element . size ( ) ) ; 
 + int i = 0 ; 
 + for ( AllTypes allTypes : element ) { 
 + assertEquals ( new Date ( i ) , allTypes . getColumnDate ( ) ) ; 
 + i + + ; 
 + } 
 + endTest . run ( ) ; 
 + } 
 + } ) ; 
 + 
 + RealmResults < AllTypes > objectsDescending = realm . where ( AllTypes . class ) . findAllSorted ( AllTypes . FIELD _ DATE , Sort . DESCENDING ) ; 
 + assertEquals ( TEST _ SIZE , objectsDescending . size ( ) ) ; 
 + objectsDescending . addChangeListener ( new RealmChangeListener < RealmResults < AllTypes > > ( ) { 
 + @ Override 
 + public void onChange ( RealmResults < AllTypes > element ) { 
 + assertEquals ( TEST _ SIZE + 1 , element . size ( ) ) ; 
 + int i = element . size ( ) - 1 ; 
 + for ( AllTypes allTypes : element ) { 
 + assertEquals ( new Date ( i ) , allTypes . getColumnDate ( ) ) ; 
 + i - - ; 
 + } 
 + endTest . run ( ) ; 
 + } 
 + } ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + AllTypes allTypes = realm . createObject ( AllTypes . class ) ; 
 + allTypes . setColumnDate ( new Date ( TEST _ SIZE ) ) ; 
 + realm . commitTransaction ( ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmResultsTest . java b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 index 8ea98c3 . . 8b5c905 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmResultsTest . java 
 @ @ - 21 , 15 + 21 , 19 @ @ import android . test . AndroidTestCase ; 
 import java . util . Date ; 
 import java . util . List ; 
 import java . util . concurrent . Callable ; 
 + import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . Future ; 
 + import java . util . concurrent . TimeUnit ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . Cat ; 
 + import io . realm . entities . Dog ; 
 import io . realm . entities . NonLatinFieldNames ; 
 import io . realm . entities . Owner ; 
 + import trifork . com . gotoguide . model . Event ; 
 
 public class RealmResultsTest extends AndroidTestCase { 
 protected final static int TEST _ DATA _ SIZE = 2516 ; 
 @ @ - 64 , 11 + 68 , 15 @ @ public class RealmResultsTest extends AndroidTestCase { 
 AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; 
 allTypes . setColumnBoolean ( ( i % 2 ) = = 0 ) ; 
 allTypes . setColumnBinary ( new byte [ ] { 1 , 2 , 3 } ) ; 
 - allTypes . setColumnDate ( new Date ( ( long ) 1000 * i ) ) ; 
 + allTypes . setColumnDate ( new Date ( ( long ) 1000 * i ) ) ; 
 allTypes . setColumnDouble ( 3 . 1415 + i ) ; 
 allTypes . setColumnFloat ( 1 . 234567f + i ) ; 
 allTypes . setColumnString ( " test data " + i ) ; 
 allTypes . setColumnLong ( i ) ; 
 + Dog d = testRealm . createObject ( Dog . class ) ; 
 + d . setName ( " Foo " + i ) ; 
 + allTypes . setColumnRealmObject ( d ) ; 
 + allTypes . getColumnRealmList ( ) . add ( d ) ; 
 NonLatinFieldNames nonLatinFieldNames = testRealm . createObject ( NonLatinFieldNames . class ) ; 
 nonLatinFieldNames . set 델 타 ( i ) ; 
 nonLatinFieldNames . set Δ έ λ τ α ( i ) ; 
 @ @ - 701 , 5 + 709 , 34 @ @ public class RealmResultsTest extends AndroidTestCase { 
 } 
 
 
 + public void testClearRealmList ( ) { 
 + 
 + / / Clearing the RealmList outside a transaction ? Should not be possible ? 
 + testRealm . where ( AllTypes . class ) . findFirst ( ) . getColumnRealmList ( ) . clear ( ) ; 
 + 
 + / / Without the background commit , no crash is occurring 
 + final CountDownLatch bgDone = new CountDownLatch ( 1 ) ; 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . commitTransaction ( ) ; 
 + realm . close ( ) ; 
 + bgDone . countDown ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + 
 + try { 
 + bgDone . await ( 2 , TimeUnit . SECONDS ) ; 
 + } catch ( InterruptedException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + 
 + testRealm . beginTransaction ( ) ; 
 + testRealm . where ( AllTypes . class ) . findAll ( ) . clear ( ) ; 
 + testRealm . commitTransaction ( ) ; 
 + } 
 + 
 / / TODO : More extended tests of querying all types must be done . 
 }
