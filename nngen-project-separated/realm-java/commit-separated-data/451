BLEU SCORE: 0.039297526283216276

TEST MSG: Use RealmNotifier for RealmObject listener
GENERATED MSG: Add global listener to a non - looper thread Realm

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / ObserverPairListTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / ObserverPairListTests . java <nl> index 5345ec8 . . 8862894 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / ObserverPairListTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / ObserverPairListTests . java <nl> @ @ - 119 , 6 + 119 , 27 @ @ public class ObserverPairListTests { <nl> } <nl> <nl> @ Test <nl> + public void removeByObserver ( ) { <nl> + TestObserverPair pair = new TestObserverPair ( ONE , testListener ) ; <nl> + observerPairs . add ( pair ) ; <nl> + pair = new TestObserverPair ( ONE , new TestListener ( ) ) ; <nl> + observerPairs . add ( pair ) ; <nl> + assertEquals ( 2 , observerPairs . size ( ) ) ; <nl> + <nl> + / / An different observer <nl> + / / noinspection UnnecessaryBoxing <nl> + pair = new TestObserverPair ( TWO , testListener ) ; <nl> + observerPairs . add ( pair ) ; <nl> + assertEquals ( 3 , observerPairs . size ( ) ) ; <nl> + <nl> + observerPairs . removeByObserver ( ONE ) ; <nl> + assertEquals ( 1 , observerPairs . size ( ) ) ; <nl> + <nl> + observerPairs . removeByObserver ( TWO ) ; <nl> + assertEquals ( 0 , observerPairs . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void clear ( ) { <nl> TestObserverPair pair = new TestObserverPair ( ONE , new TestListener ( ) ) ; <nl> observerPairs . add ( pair ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java <nl> index 078c555 . . 910a4f5 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java <nl> @ @ - 135 , 4 + 135 , 38 @ @ public class RealmNotifierTests { <nl> } <nl> } ) . start ( ) ; <nl> } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void removeChangeListeners ( ) { <nl> + SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> + Integer dummyObserver = 1 ; <nl> + looperThread . keepStrongReference . add ( dummyObserver ) ; <nl> + sharedRealm . realmNotifier . addChangeListener ( dummyObserver , new RealmChangeListener < Integer > ( ) { <nl> + @ Override <nl> + public void onChange ( Integer dummy ) { <nl> + fail ( ) ; <nl> + } <nl> + } ) ; <nl> + sharedRealm . realmNotifier . addChangeListener ( sharedRealm , new RealmChangeListener < SharedRealm > ( ) { <nl> + @ Override <nl> + public void onChange ( SharedRealm sharedRealm ) { <nl> + sharedRealm . close ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + / / This should only remove the listeners related with dummyObserver <nl> + sharedRealm . realmNotifier . removeChangeListeners ( dummyObserver ) ; <nl> + <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> + sharedRealm . beginTransaction ( ) ; <nl> + sharedRealm . commitTransaction ( ) ; <nl> + sharedRealm . close ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 7340cf5 . . c7897bf 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 179 , 7 + 179 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> public void removeAllChangeListeners ( ) { <nl> checkIfValid ( ) ; <nl> sharedRealm . capabilities . checkCanDeliverNotification ( " removeListener cannot be called on current thread . " ) ; <nl> - sharedRealm . realmNotifier . removeAllChangeListeners ( ) ; <nl> + sharedRealm . realmNotifier . removeChangeListeners ( this ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / ProxyState . java b / realm / realm - library / src / main / java / io / realm / ProxyState . java <nl> index d024fd0 . . d0a8006 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / ProxyState . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / ProxyState . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ import java . util . concurrent . CopyOnWriteArrayList ; <nl> <nl> import io . realm . internal . PendingRow ; <nl> import io . realm . internal . Row ; <nl> - import io . realm . internal . RowNotifier ; <nl> import io . realm . internal . UncheckedRow ; <nl> <nl> / * * <nl> @ @ - 59 , 7 + 58 , 7 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE <nl> public Row getRow $ realm ( ) { <nl> if ( row instanceof PendingRow ) { <nl> row = ( ( PendingRow ) row ) . executeQuery ( ) ; <nl> - registerToRowNotifier ( ) ; <nl> + registerToRealmNotifier ( ) ; <nl> } <nl> return row ; <nl> } <nl> @ @ - 84 , 10 + 83 , 6 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE <nl> this . excludeFields = excludeFields ; <nl> } <nl> <nl> - public List < RealmChangeListener < E > > getListeners $ realm ( ) { <nl> - return listeners ; <nl> - } <nl> - <nl> / * * <nl> * Notifies all registered listeners . <nl> * / <nl> @ @ - 108 , 7 + 103 , 21 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE <nl> } <nl> / / this might be called after query returns . So it is still necessary to register . <nl> if ( row instanceof UncheckedRow ) { <nl> - registerToRowNotifier ( ) ; <nl> + registerToRealmNotifier ( ) ; <nl> + } <nl> + } <nl> + <nl> + public void removeChangeListener ( RealmChangeListener < E > listener ) { <nl> + listeners . remove ( listener ) ; <nl> + if ( listeners . isEmpty ( ) & & row instanceof UncheckedRow ) { <nl> + realm . sharedRealm . realmNotifier . removeChangeListeners ( this ) ; <nl> + } <nl> + } <nl> + <nl> + public void removeAllChangeListeners ( ) { <nl> + listeners . clear ( ) ; <nl> + if ( row instanceof UncheckedRow ) { <nl> + realm . sharedRealm . realmNotifier . removeChangeListeners ( this ) ; <nl> } <nl> } <nl> <nl> @ @ - 128 , 26 + 137 , 33 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE <nl> excludeFields = null ; <nl> } <nl> <nl> - private void registerToRowNotifier ( ) { <nl> + private void registerToRealmNotifier ( ) { <nl> if ( realm . sharedRealm = = null | | realm . sharedRealm . isClosed ( ) ) { <nl> return ; <nl> } <nl> <nl> - RowNotifier rowNotifier = realm . sharedRealm . rowNotifier ; <nl> - if ( row . isAttached ( ) ) { <nl> - rowNotifier . registerListener ( ( UncheckedRow ) row , this , new RealmChangeListener < ProxyState < E > > ( ) { <nl> - @ Override <nl> - public void onChange ( ProxyState < E > proxyState ) { <nl> - proxyState . notifyChangeListeners ( ) ; <nl> + realm . sharedRealm . realmNotifier . addChangeListener ( this , new RealmChangeListener < ProxyState < E > > ( ) { <nl> + @ Override <nl> + public void onChange ( ProxyState < E > element ) { <nl> + long tableVersion = - 1 ; <nl> + if ( row . isAttached ( ) ) { <nl> + / / If the Row gets detached , table version will be - 1 and it is different from current value . <nl> + tableVersion = row . getTable ( ) . getVersion ( ) ; <nl> } <nl> - } ) ; <nl> - } <nl> + if ( currentTableVersion ! = tableVersion ) { <nl> + currentTableVersion = tableVersion ; <nl> + notifyChangeListeners ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> } <nl> <nl> @ Override <nl> public void onQueryFinished ( Row row ) { <nl> this . row = row ; <nl> + / / getTable should return a non - null table since the row should always be valid here . <nl> + currentTableVersion = row . getTable ( ) . getVersion ( ) ; <nl> notifyChangeListeners ( ) ; <nl> - registerToRowNotifier ( ) ; <nl> + registerToRealmNotifier ( ) ; <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 2923c8a . . 3cfe6d3 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 313 , 8 + 313 , 8 @ @ public abstract class RealmObject implements RealmModel { <nl> BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; <nl> realm . checkIfValid ( ) ; <nl> realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> - / / FIXME : Below doesn ' t seem to be correct ? <nl> - proxy . realmGet $ proxyState ( ) . getListeners $ realm ( ) . remove ( listener ) ; <nl> + / / noinspection unchecked <nl> + proxy . realmGet $ proxyState ( ) . removeChangeListener ( listener ) ; <nl> } else { <nl> throw new IllegalArgumentException ( " Cannot remove listener from this unmanaged RealmObject ( created outside of Realm ) " ) ; <nl> } <nl> @ @ - 339 , 7 + 339 , 7 @ @ public abstract class RealmObject implements RealmModel { <nl> BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; <nl> realm . checkIfValid ( ) ; <nl> realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; <nl> - proxy . realmGet $ proxyState ( ) . getListeners $ realm ( ) . clear ( ) ; <nl> + proxy . realmGet $ proxyState ( ) . removeAllChangeListeners ( ) ; <nl> } else { <nl> throw new IllegalArgumentException ( " Cannot remove listeners from this unmanaged RealmObject ( created outside of Realm ) " ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java b / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java <nl> index b457024 . . 3e5548e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java <nl> @ @ - 122 , 6 + 122 , 17 @ @ public class ObserverPairList < T extends ObserverPairList . ObserverPair > { <nl> pairs . remove ( pair ) ; <nl> } <nl> <nl> + public void removeByObserver ( Object observer ) { <nl> + for ( T pair : pairs ) { <nl> + Object object = pair . observerRef . get ( ) ; <nl> + if ( object = = null ) { <nl> + pairs . remove ( pair ) ; <nl> + } else if ( object = = observer ) { <nl> + pairs . remove ( pair ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> public int size ( ) { <nl> return pairs . size ( ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> index 93c9d57 . . 59a26c5 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> @ @ - 117 , 7 + 117 , 13 @ @ public abstract class RealmNotifier implements Closeable { <nl> realmObserverPairs . remove ( observerPair ) ; <nl> } <nl> <nl> - public void removeAllChangeListeners ( ) { <nl> + public < E > void removeChangeListeners ( E observer ) { <nl> + realmObserverPairs . removeByObserver ( observer ) ; <nl> + } <nl> + <nl> + / / Since RealmObject is using this notifier as well , use removeChangeListeners to remove all listeners by the given <nl> + / / observer . <nl> + private void removeAllChangeListeners ( ) { <nl> realmObserverPairs . clear ( ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 573133c . . 9f8bf31 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 319 , 19 + 319 , 40 @ @ public class NotificationsTest { <nl> <nl> @ Test <nl> @ RunTestInLooperThread <nl> - public void commitTransaction _ delayChangeListenerOnSameThread ( ) { <nl> + public void globalListener _ looperThread _ triggeredByLocalCommit ( ) { <nl> final AtomicInteger success = new AtomicInteger ( 0 ) ; <nl> Realm realm = looperThread . realm ; <nl> realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> @ Override <nl> public void onChange ( Realm object ) { <nl> - assertEquals ( 1 , success . get ( ) ) ; <nl> + assertEquals ( 0 , success . getAndIncrement ( ) ) ; <nl> looperThread . testComplete ( ) ; <nl> } <nl> } ) ; <nl> realm . beginTransaction ( ) ; <nl> realm . createObject ( AllTypes . class ) ; <nl> realm . commitTransaction ( ) ; <nl> + assertEquals ( 1 , success . get ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void globalListener _ looperThread _ triggeredByRemoteCommit ( ) { <nl> + final AtomicInteger success = new AtomicInteger ( 0 ) ; <nl> + Realm realm = looperThread . realm ; <nl> + realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> + @ Override <nl> + public void onChange ( Realm object ) { <nl> + assertEquals ( 1 , success . get ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . createObject ( AllTypes . class ) ; <nl> + } <nl> + } ) ; <nl> assertEquals ( 0 , success . getAndIncrement ( ) ) ; <nl> } <nl> <nl> @ @ - 1360 , 4 + 1381 , 43 @ @ public class NotificationsTest { <nl> } catch ( IllegalStateException ignored ) { <nl> } <nl> } <nl> + <nl> + <nl> + @ Test <nl> + public void globalListener _ nonLooperThread _ triggeredByWaitForChange ( ) { <nl> + final CountDownLatch latch = new CountDownLatch ( 1 ) ; <nl> + realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> + @ Override <nl> + public void onChange ( Realm element ) { <nl> + latch . countDown ( ) ; <nl> + } <nl> + } ) ; <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . createObject ( AllTypes . class ) ; <nl> + } <nl> + } ) ; <nl> + realm . waitForChange ( ) ; <nl> + TestHelper . awaitOrFail ( latch ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void globalListener _ nonLooperThread _ triggeredByLocalCommit ( ) { <nl> + final CountDownLatch latch = new CountDownLatch ( 1 ) ; <nl> + realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { <nl> + @ Override <nl> + public void onChange ( Realm element ) { <nl> + latch . countDown ( ) ; <nl> + } <nl> + } ) ; <nl> + realm . executeTransaction ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + realm . createObject ( AllTypes . class ) ; <nl> + } <nl> + } ) ; <nl> + TestHelper . awaitOrFail ( latch ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 7aa9f27 . . 598c8f3 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 127 , 7 + 127 , 6 @ @ abstract class BaseRealm implements Closeable { <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> checkIfValid ( ) ; <nl> - sharedRealm . getCapabilities ( ) . checkCanDeliverNotification ( " Listener cannot be registered . " ) ; <nl> sharedRealm . realmNotifier . addChangeListener ( this , listener ) ; <nl> } <nl> <nl> @ @ - 144 , 7 + 143 , 6 @ @ abstract class BaseRealm implements Closeable { <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> checkIfValid ( ) ; <nl> - sharedRealm . getCapabilities ( ) . checkCanDeliverNotification ( " Listener cannot be removed . " ) ; <nl> sharedRealm . realmNotifier . removeChangeListener ( this , listener ) ; <nl> } <nl> <nl> @ @ - 176 , 7 + 174 , 6 @ @ abstract class BaseRealm implements Closeable { <nl> * / <nl> public void removeAllChangeListeners ( ) { <nl> checkIfValid ( ) ; <nl> - sharedRealm . getCapabilities ( ) . checkCanDeliverNotification ( " Listener cannot be removed . " ) ; <nl> sharedRealm . realmNotifier . removeAllChangeListeners ( ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> index 9b529e0 . . 17f7a2f 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> @ @ - 123 , 8 + 123 , 7 @ @ public final class DynamicRealm extends BaseRealm { <nl> / * * <nl> * Adds a change listener to the Realm . <nl> * < p > <nl> - * The listeners will be executed on every loop of a Handler thread if changes are committed by <nl> - * this or another thread . <nl> + * The listeners will be executed when changes are committed by this or another thread . <nl> * < p > <nl> * Realm instances are cached per thread . For that reason it is important to <nl> * remember to remove listeners again either using { @ link # removeChangeListener ( RealmChangeListener ) } <nl> @ @ - 132 , 10 + 131 , 10 @ @ public final class DynamicRealm extends BaseRealm { <nl> * <nl> * @ param listener the change listener . <nl> * @ throws IllegalArgumentException if the change listener is { @ code null } . <nl> - * @ throws IllegalStateException if you try to register a listener from a non - Looper or { @ link IntentService } thread . <nl> * @ see io . realm . RealmChangeListener <nl> * @ see # removeChangeListener ( RealmChangeListener ) <nl> * @ see # removeAllChangeListeners ( ) <nl> + * @ see # waitForChange ( ) <nl> * / <nl> public void addChangeListener ( RealmChangeListener < DynamicRealm > listener ) { <nl> super . addListener ( listener ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index dab358d . . 9ce7d3b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 1216 , 8 + 1216 , 7 @ @ public final class Realm extends BaseRealm { <nl> / * * <nl> * Adds a change listener to the Realm . <nl> * < p > <nl> - * The listeners will be executed on every loop of a Handler thread if <nl> - * the current thread or other threads committed changes to the Realm . <nl> + * The listeners will be executed when changes are committed by this or another thread . <nl> * < p > <nl> * Realm instances are per thread singletons and cached , so listeners should be <nl> * removed manually even if calling { @ link # close ( ) } . Otherwise there is a <nl> @ @ - 1225 , 10 + 1224 , 10 @ @ public final class Realm extends BaseRealm { <nl> * <nl> * @ param listener the change listener . <nl> * @ throws IllegalArgumentException if the change listener is { @ code null } . <nl> - * @ throws IllegalStateException if you try to register a listener from a non - Looper or { @ link IntentService } thread . <nl> * @ see io . realm . RealmChangeListener <nl> * @ see # removeChangeListener ( RealmChangeListener ) <nl> * @ see # removeAllChangeListeners ( ) <nl> + * @ see # waitForChange ( ) <nl> * / <nl> public void addChangeListener ( RealmChangeListener < Realm > listener ) { <nl> super . addListener ( listener ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index 2b075b7 . . 22c91bd 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 291 , 15 + 291 , 6 @ @ public final class SharedRealm implements Closeable { <nl> invokeSchemaChangeListenerIfSchemaChanged ( ) ; <nl> } <nl> <nl> - public void refresh ( SharedRealm . VersionID version ) throws BadVersionException { <nl> - / / FIXME : This will have a different behaviour compared to refresh to the latest version . <nl> - / / In the JNI this will just advance read the corresponding SharedGroup to the specific version without notifier <nl> - / / or transact log observer involved . Before we use notification & fine grained notification from OS , it is not <nl> - / / a problem . <nl> - nativeRefresh ( nativePtr , version . version , version . index ) ; <nl> - invokeSchemaChangeListenerIfSchemaChanged ( ) ; <nl> - } <nl> - <nl> public SharedRealm . VersionID getVersionID ( ) { <nl> long [ ] versionId = nativeGetVersionID ( nativePtr ) ; <nl> return new SharedRealm . VersionID ( versionId [ 0 ] , versionId [ 1 ] ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / ObserverPairListTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / ObserverPairListTests . java 
 index 5345ec8 . . 8862894 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / ObserverPairListTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / ObserverPairListTests . java 
 @ @ - 119 , 6 + 119 , 27 @ @ public class ObserverPairListTests { 
 } 
 
 @ Test 
 + public void removeByObserver ( ) { 
 + TestObserverPair pair = new TestObserverPair ( ONE , testListener ) ; 
 + observerPairs . add ( pair ) ; 
 + pair = new TestObserverPair ( ONE , new TestListener ( ) ) ; 
 + observerPairs . add ( pair ) ; 
 + assertEquals ( 2 , observerPairs . size ( ) ) ; 
 + 
 + / / An different observer 
 + / / noinspection UnnecessaryBoxing 
 + pair = new TestObserverPair ( TWO , testListener ) ; 
 + observerPairs . add ( pair ) ; 
 + assertEquals ( 3 , observerPairs . size ( ) ) ; 
 + 
 + observerPairs . removeByObserver ( ONE ) ; 
 + assertEquals ( 1 , observerPairs . size ( ) ) ; 
 + 
 + observerPairs . removeByObserver ( TWO ) ; 
 + assertEquals ( 0 , observerPairs . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void clear ( ) { 
 TestObserverPair pair = new TestObserverPair ( ONE , new TestListener ( ) ) ; 
 observerPairs . add ( pair ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java 
 index 078c555 . . 910a4f5 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / RealmNotifierTests . java 
 @ @ - 135 , 4 + 135 , 38 @ @ public class RealmNotifierTests { 
 } 
 } ) . start ( ) ; 
 } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void removeChangeListeners ( ) { 
 + SharedRealm sharedRealm = getSharedRealm ( ) ; 
 + Integer dummyObserver = 1 ; 
 + looperThread . keepStrongReference . add ( dummyObserver ) ; 
 + sharedRealm . realmNotifier . addChangeListener ( dummyObserver , new RealmChangeListener < Integer > ( ) { 
 + @ Override 
 + public void onChange ( Integer dummy ) { 
 + fail ( ) ; 
 + } 
 + } ) ; 
 + sharedRealm . realmNotifier . addChangeListener ( sharedRealm , new RealmChangeListener < SharedRealm > ( ) { 
 + @ Override 
 + public void onChange ( SharedRealm sharedRealm ) { 
 + sharedRealm . close ( ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + 
 + / / This should only remove the listeners related with dummyObserver 
 + sharedRealm . realmNotifier . removeChangeListeners ( dummyObserver ) ; 
 + 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + SharedRealm sharedRealm = getSharedRealm ( ) ; 
 + sharedRealm . beginTransaction ( ) ; 
 + sharedRealm . commitTransaction ( ) ; 
 + sharedRealm . close ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 7340cf5 . . c7897bf 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 179 , 7 + 179 , 7 @ @ abstract class BaseRealm implements Closeable { 
 public void removeAllChangeListeners ( ) { 
 checkIfValid ( ) ; 
 sharedRealm . capabilities . checkCanDeliverNotification ( " removeListener cannot be called on current thread . " ) ; 
 - sharedRealm . realmNotifier . removeAllChangeListeners ( ) ; 
 + sharedRealm . realmNotifier . removeChangeListeners ( this ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / ProxyState . java b / realm / realm - library / src / main / java / io / realm / ProxyState . java 
 index d024fd0 . . d0a8006 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / ProxyState . java 
 + + + b / realm / realm - library / src / main / java / io / realm / ProxyState . java 
 @ @ - 21 , 7 + 21 , 6 @ @ import java . util . concurrent . CopyOnWriteArrayList ; 
 
 import io . realm . internal . PendingRow ; 
 import io . realm . internal . Row ; 
 - import io . realm . internal . RowNotifier ; 
 import io . realm . internal . UncheckedRow ; 
 
 / * * 
 @ @ - 59 , 7 + 58 , 7 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE 
 public Row getRow $ realm ( ) { 
 if ( row instanceof PendingRow ) { 
 row = ( ( PendingRow ) row ) . executeQuery ( ) ; 
 - registerToRowNotifier ( ) ; 
 + registerToRealmNotifier ( ) ; 
 } 
 return row ; 
 } 
 @ @ - 84 , 10 + 83 , 6 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE 
 this . excludeFields = excludeFields ; 
 } 
 
 - public List < RealmChangeListener < E > > getListeners $ realm ( ) { 
 - return listeners ; 
 - } 
 - 
 / * * 
 * Notifies all registered listeners . 
 * / 
 @ @ - 108 , 7 + 103 , 21 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE 
 } 
 / / this might be called after query returns . So it is still necessary to register . 
 if ( row instanceof UncheckedRow ) { 
 - registerToRowNotifier ( ) ; 
 + registerToRealmNotifier ( ) ; 
 + } 
 + } 
 + 
 + public void removeChangeListener ( RealmChangeListener < E > listener ) { 
 + listeners . remove ( listener ) ; 
 + if ( listeners . isEmpty ( ) & & row instanceof UncheckedRow ) { 
 + realm . sharedRealm . realmNotifier . removeChangeListeners ( this ) ; 
 + } 
 + } 
 + 
 + public void removeAllChangeListeners ( ) { 
 + listeners . clear ( ) ; 
 + if ( row instanceof UncheckedRow ) { 
 + realm . sharedRealm . realmNotifier . removeChangeListeners ( this ) ; 
 } 
 } 
 
 @ @ - 128 , 26 + 137 , 33 @ @ public final class ProxyState < E extends RealmModel > implements PendingRow . FrontE 
 excludeFields = null ; 
 } 
 
 - private void registerToRowNotifier ( ) { 
 + private void registerToRealmNotifier ( ) { 
 if ( realm . sharedRealm = = null | | realm . sharedRealm . isClosed ( ) ) { 
 return ; 
 } 
 
 - RowNotifier rowNotifier = realm . sharedRealm . rowNotifier ; 
 - if ( row . isAttached ( ) ) { 
 - rowNotifier . registerListener ( ( UncheckedRow ) row , this , new RealmChangeListener < ProxyState < E > > ( ) { 
 - @ Override 
 - public void onChange ( ProxyState < E > proxyState ) { 
 - proxyState . notifyChangeListeners ( ) ; 
 + realm . sharedRealm . realmNotifier . addChangeListener ( this , new RealmChangeListener < ProxyState < E > > ( ) { 
 + @ Override 
 + public void onChange ( ProxyState < E > element ) { 
 + long tableVersion = - 1 ; 
 + if ( row . isAttached ( ) ) { 
 + / / If the Row gets detached , table version will be - 1 and it is different from current value . 
 + tableVersion = row . getTable ( ) . getVersion ( ) ; 
 } 
 - } ) ; 
 - } 
 + if ( currentTableVersion ! = tableVersion ) { 
 + currentTableVersion = tableVersion ; 
 + notifyChangeListeners ( ) ; 
 + } 
 + } 
 + } ) ; 
 } 
 
 @ Override 
 public void onQueryFinished ( Row row ) { 
 this . row = row ; 
 + / / getTable should return a non - null table since the row should always be valid here . 
 + currentTableVersion = row . getTable ( ) . getVersion ( ) ; 
 notifyChangeListeners ( ) ; 
 - registerToRowNotifier ( ) ; 
 + registerToRealmNotifier ( ) ; 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 2923c8a . . 3cfe6d3 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 313 , 8 + 313 , 8 @ @ public abstract class RealmObject implements RealmModel { 
 BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; 
 realm . checkIfValid ( ) ; 
 realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 - / / FIXME : Below doesn ' t seem to be correct ? 
 - proxy . realmGet $ proxyState ( ) . getListeners $ realm ( ) . remove ( listener ) ; 
 + / / noinspection unchecked 
 + proxy . realmGet $ proxyState ( ) . removeChangeListener ( listener ) ; 
 } else { 
 throw new IllegalArgumentException ( " Cannot remove listener from this unmanaged RealmObject ( created outside of Realm ) " ) ; 
 } 
 @ @ - 339 , 7 + 339 , 7 @ @ public abstract class RealmObject implements RealmModel { 
 BaseRealm realm = proxy . realmGet $ proxyState ( ) . getRealm $ realm ( ) ; 
 realm . checkIfValid ( ) ; 
 realm . sharedRealm . capabilities . checkCanDeliverNotification ( LISTENER _ NOT _ ALLOWED _ MESSAGE ) ; 
 - proxy . realmGet $ proxyState ( ) . getListeners $ realm ( ) . clear ( ) ; 
 + proxy . realmGet $ proxyState ( ) . removeAllChangeListeners ( ) ; 
 } else { 
 throw new IllegalArgumentException ( " Cannot remove listeners from this unmanaged RealmObject ( created outside of Realm ) " ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java b / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java 
 index b457024 . . 3e5548e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / ObserverPairList . java 
 @ @ - 122 , 6 + 122 , 17 @ @ public class ObserverPairList < T extends ObserverPairList . ObserverPair > { 
 pairs . remove ( pair ) ; 
 } 
 
 + public void removeByObserver ( Object observer ) { 
 + for ( T pair : pairs ) { 
 + Object object = pair . observerRef . get ( ) ; 
 + if ( object = = null ) { 
 + pairs . remove ( pair ) ; 
 + } else if ( object = = observer ) { 
 + pairs . remove ( pair ) ; 
 + } 
 + } 
 + } 
 + 
 public int size ( ) { 
 return pairs . size ( ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 index 93c9d57 . . 59a26c5 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 @ @ - 117 , 7 + 117 , 13 @ @ public abstract class RealmNotifier implements Closeable { 
 realmObserverPairs . remove ( observerPair ) ; 
 } 
 
 - public void removeAllChangeListeners ( ) { 
 + public < E > void removeChangeListeners ( E observer ) { 
 + realmObserverPairs . removeByObserver ( observer ) ; 
 + } 
 + 
 + / / Since RealmObject is using this notifier as well , use removeChangeListeners to remove all listeners by the given 
 + / / observer . 
 + private void removeAllChangeListeners ( ) { 
 realmObserverPairs . clear ( ) ; 
 } 


NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 index 573133c . . 9f8bf31 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 319 , 19 + 319 , 40 @ @ public class NotificationsTest { 
 
 @ Test 
 @ RunTestInLooperThread 
 - public void commitTransaction _ delayChangeListenerOnSameThread ( ) { 
 + public void globalListener _ looperThread _ triggeredByLocalCommit ( ) { 
 final AtomicInteger success = new AtomicInteger ( 0 ) ; 
 Realm realm = looperThread . realm ; 
 realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 @ Override 
 public void onChange ( Realm object ) { 
 - assertEquals ( 1 , success . get ( ) ) ; 
 + assertEquals ( 0 , success . getAndIncrement ( ) ) ; 
 looperThread . testComplete ( ) ; 
 } 
 } ) ; 
 realm . beginTransaction ( ) ; 
 realm . createObject ( AllTypes . class ) ; 
 realm . commitTransaction ( ) ; 
 + assertEquals ( 1 , success . get ( ) ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void globalListener _ looperThread _ triggeredByRemoteCommit ( ) { 
 + final AtomicInteger success = new AtomicInteger ( 0 ) ; 
 + Realm realm = looperThread . realm ; 
 + realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 + @ Override 
 + public void onChange ( Realm object ) { 
 + assertEquals ( 1 , success . get ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . createObject ( AllTypes . class ) ; 
 + } 
 + } ) ; 
 assertEquals ( 0 , success . getAndIncrement ( ) ) ; 
 } 
 
 @ @ - 1360 , 4 + 1381 , 43 @ @ public class NotificationsTest { 
 } catch ( IllegalStateException ignored ) { 
 } 
 } 
 + 
 + 
 + @ Test 
 + public void globalListener _ nonLooperThread _ triggeredByWaitForChange ( ) { 
 + final CountDownLatch latch = new CountDownLatch ( 1 ) ; 
 + realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 + @ Override 
 + public void onChange ( Realm element ) { 
 + latch . countDown ( ) ; 
 + } 
 + } ) ; 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . createObject ( AllTypes . class ) ; 
 + } 
 + } ) ; 
 + realm . waitForChange ( ) ; 
 + TestHelper . awaitOrFail ( latch ) ; 
 + } 
 + 
 + @ Test 
 + public void globalListener _ nonLooperThread _ triggeredByLocalCommit ( ) { 
 + final CountDownLatch latch = new CountDownLatch ( 1 ) ; 
 + realm . addChangeListener ( new RealmChangeListener < Realm > ( ) { 
 + @ Override 
 + public void onChange ( Realm element ) { 
 + latch . countDown ( ) ; 
 + } 
 + } ) ; 
 + realm . executeTransaction ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + realm . createObject ( AllTypes . class ) ; 
 + } 
 + } ) ; 
 + TestHelper . awaitOrFail ( latch ) ; 
 + } 
 + 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 7aa9f27 . . 598c8f3 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 127 , 7 + 127 , 6 @ @ abstract class BaseRealm implements Closeable { 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 checkIfValid ( ) ; 
 - sharedRealm . getCapabilities ( ) . checkCanDeliverNotification ( " Listener cannot be registered . " ) ; 
 sharedRealm . realmNotifier . addChangeListener ( this , listener ) ; 
 } 
 
 @ @ - 144 , 7 + 143 , 6 @ @ abstract class BaseRealm implements Closeable { 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 checkIfValid ( ) ; 
 - sharedRealm . getCapabilities ( ) . checkCanDeliverNotification ( " Listener cannot be removed . " ) ; 
 sharedRealm . realmNotifier . removeChangeListener ( this , listener ) ; 
 } 
 
 @ @ - 176 , 7 + 174 , 6 @ @ abstract class BaseRealm implements Closeable { 
 * / 
 public void removeAllChangeListeners ( ) { 
 checkIfValid ( ) ; 
 - sharedRealm . getCapabilities ( ) . checkCanDeliverNotification ( " Listener cannot be removed . " ) ; 
 sharedRealm . realmNotifier . removeAllChangeListeners ( ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 index 9b529e0 . . 17f7a2f 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 @ @ - 123 , 8 + 123 , 7 @ @ public final class DynamicRealm extends BaseRealm { 
 / * * 
 * Adds a change listener to the Realm . 
 * < p > 
 - * The listeners will be executed on every loop of a Handler thread if changes are committed by 
 - * this or another thread . 
 + * The listeners will be executed when changes are committed by this or another thread . 
 * < p > 
 * Realm instances are cached per thread . For that reason it is important to 
 * remember to remove listeners again either using { @ link # removeChangeListener ( RealmChangeListener ) } 
 @ @ - 132 , 10 + 131 , 10 @ @ public final class DynamicRealm extends BaseRealm { 
 * 
 * @ param listener the change listener . 
 * @ throws IllegalArgumentException if the change listener is { @ code null } . 
 - * @ throws IllegalStateException if you try to register a listener from a non - Looper or { @ link IntentService } thread . 
 * @ see io . realm . RealmChangeListener 
 * @ see # removeChangeListener ( RealmChangeListener ) 
 * @ see # removeAllChangeListeners ( ) 
 + * @ see # waitForChange ( ) 
 * / 
 public void addChangeListener ( RealmChangeListener < DynamicRealm > listener ) { 
 super . addListener ( listener ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index dab358d . . 9ce7d3b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 1216 , 8 + 1216 , 7 @ @ public final class Realm extends BaseRealm { 
 / * * 
 * Adds a change listener to the Realm . 
 * < p > 
 - * The listeners will be executed on every loop of a Handler thread if 
 - * the current thread or other threads committed changes to the Realm . 
 + * The listeners will be executed when changes are committed by this or another thread . 
 * < p > 
 * Realm instances are per thread singletons and cached , so listeners should be 
 * removed manually even if calling { @ link # close ( ) } . Otherwise there is a 
 @ @ - 1225 , 10 + 1224 , 10 @ @ public final class Realm extends BaseRealm { 
 * 
 * @ param listener the change listener . 
 * @ throws IllegalArgumentException if the change listener is { @ code null } . 
 - * @ throws IllegalStateException if you try to register a listener from a non - Looper or { @ link IntentService } thread . 
 * @ see io . realm . RealmChangeListener 
 * @ see # removeChangeListener ( RealmChangeListener ) 
 * @ see # removeAllChangeListeners ( ) 
 + * @ see # waitForChange ( ) 
 * / 
 public void addChangeListener ( RealmChangeListener < Realm > listener ) { 
 super . addListener ( listener ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index 2b075b7 . . 22c91bd 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 291 , 15 + 291 , 6 @ @ public final class SharedRealm implements Closeable { 
 invokeSchemaChangeListenerIfSchemaChanged ( ) ; 
 } 
 
 - public void refresh ( SharedRealm . VersionID version ) throws BadVersionException { 
 - / / FIXME : This will have a different behaviour compared to refresh to the latest version . 
 - / / In the JNI this will just advance read the corresponding SharedGroup to the specific version without notifier 
 - / / or transact log observer involved . Before we use notification & fine grained notification from OS , it is not 
 - / / a problem . 
 - nativeRefresh ( nativePtr , version . version , version . index ) ; 
 - invokeSchemaChangeListenerIfSchemaChanged ( ) ; 
 - } 
 - 
 public SharedRealm . VersionID getVersionID ( ) { 
 long [ ] versionId = nativeGetVersionID ( nativePtr ) ; 
 return new SharedRealm . VersionID ( versionId [ 0 ] , versionId [ 1 ] ) ;
