BLEU SCORE: 0.014199193612838947

TEST MSG: Add a unit test to verify that instance methods can be used in constructors
GENERATED MSG: Copy resource files when transforming byte code . This fixes # 2356

TEST DIFF (one line): diff - - git a / realm - transformer / src / test / groovy / io / realm / transformer / BytecodeModifierTest . groovy b / realm - transformer / src / test / groovy / io / realm / transformer / BytecodeModifierTest . groovy <nl> index 9a7701b . . 65609cd 100644 <nl> - - - a / realm - transformer / src / test / groovy / io / realm / transformer / BytecodeModifierTest . groovy <nl> + + + b / realm - transformer / src / test / groovy / io / realm / transformer / BytecodeModifierTest . groovy <nl> @ @ - 17 , 10 + 17 , 7 @ @ <nl> package io . realm . transformer <nl> <nl> import io . realm . annotations . Ignore <nl> - import javassist . ClassPool <nl> - import javassist . CtClass <nl> - import javassist . CtField <nl> - import javassist . CtNewMethod <nl> + import javassist . * <nl> import javassist . bytecode . AnnotationsAttribute <nl> import javassist . bytecode . CodeIterator <nl> import javassist . bytecode . ConstPool <nl> @ @ - 111 , 4 + 108 , 41 @ @ class BytecodeModifierTest extends Specification { <nl> } <nl> ! fieldIsUsed <nl> } <nl> + <nl> + def " UseRealmAccessorsInNonDefaultConstructor " ( ) { <nl> + setup : ' generate an empty class ' <nl> + def classPool = ClassPool . getDefault ( ) <nl> + def ctClass = classPool . makeClass ( ' TestClass ' ) <nl> + <nl> + and : ' add a field ' <nl> + def ctField = new CtField ( CtClass . intType , ' age ' , ctClass ) <nl> + ctClass . addField ( ctField ) <nl> + <nl> + and : ' add a method that sets such field ' <nl> + def ctMethod = CtNewMethod . make ( ' private void setupAge ( int age ) { this . age = age ; } ' , ctClass ) <nl> + ctClass . addMethod ( ctMethod ) <nl> + <nl> + and : ' add a constructor that uses the method ' <nl> + def ctConstructor = CtNewConstructor . make ( ' public TestClass ( int age ) { setupAge ( age ) ; } ' , ctClass ) <nl> + ctClass . addConstructor ( ctConstructor ) <nl> + <nl> + and : ' realm accessors are added ' <nl> + BytecodeModifier . addRealmAccessors ( ctClass ) <nl> + <nl> + when : ' the field use is replaced by the accessor ' <nl> + BytecodeModifier . useRealmAccessors ( ctClass , [ ctField ] , [ ] ) <nl> + <nl> + then : ' the field is not used in the method anymore ' <nl> + def methodInfo = ctMethod . getMethodInfo ( ) <nl> + def codeAttribute = methodInfo . getCodeAttribute ( ) <nl> + def fieldIsUsed = false <nl> + for ( CodeIterator ci = codeAttribute . iterator ( ) ; ci . hasNext ( ) ; ) { <nl> + int index = ci . next ( ) ; <nl> + int op = ci . byteAt ( index ) ; <nl> + if ( op = = Opcode . PUTFIELD ) { <nl> + fieldIsUsed = true <nl> + } <nl> + } <nl> + ! fieldIsUsed <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> index dde87f0 . . 3a67b58 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> @ @ - 19 , 6 + 19 , 7 @ @ import com . android . SdkConstants <nl> import com . android . build . api . transform . * <nl> import com . google . common . collect . ImmutableSet <nl> import com . google . common . collect . Sets <nl> + import com . google . common . io . Files <nl> import groovy . io . FileType <nl> import io . realm . annotations . Ignore <nl> import javassist . ClassPool <nl> @ @ - 119 , 10 + 120 , 11 @ @ class RealmTransformer extends Transform { <nl> logger . info " Modifying class $ { it } " <nl> def ctClass = classPool . getCtClass ( it ) <nl> BytecodeModifier . useRealmAccessors ( ctClass , managedFields , modelClasses ) <nl> - ctClass . writeFile ( outputProvider . getContentLocation ( <nl> - ' realm ' , getInputTypes ( ) , getScopes ( ) , Format . DIRECTORY ) . canonicalPath ) <nl> + ctClass . writeFile ( getOutputFile ( outputProvider ) . canonicalPath ) <nl> } <nl> <nl> + copyResourceFiles ( inputs , outputProvider ) <nl> + <nl> def toc = System . currentTimeMillis ( ) <nl> logger . info " Realm Transform time : $ { toc - tic } milliseconds " <nl> } <nl> @ @ - 186 , 4 + 188 , 27 @ @ class RealmTransformer extends Transform { <nl> return classNames <nl> } <nl> <nl> + private copyResourceFiles ( Collection < TransformInput > inputs , TransformOutputProvider outputProvider ) { <nl> + inputs . each { <nl> + it . directoryInputs . each { <nl> + def dirPath = it . file . absolutePath <nl> + it . file . eachFileRecurse ( FileType . FILES ) { <nl> + if ( ! it . absolutePath . endsWith ( SdkConstants . DOT _ CLASS ) ) { <nl> + logger . info " Copying resource $ { it } " <nl> + def dest = new File ( getOutputFile ( outputProvider ) , <nl> + it . absolutePath . substring ( dirPath . length ( ) ) ) <nl> + dest . parentFile . mkdirs ( ) <nl> + Files . copy ( it , dest ) <nl> + } <nl> + } <nl> + } <nl> + <nl> + / / no need to implement the code for ` it . jarInputs . each ` since PROJECT SCOPE does not use jar input . <nl> + } <nl> + } <nl> + <nl> + private File getOutputFile ( TransformOutputProvider outputProvider ) { <nl> + return outputProvider . getContentLocation ( <nl> + ' realm ' , getInputTypes ( ) , getScopes ( ) , Format . DIRECTORY ) <nl> + } <nl> }

TEST DIFF:
diff - - git a / realm - transformer / src / test / groovy / io / realm / transformer / BytecodeModifierTest . groovy b / realm - transformer / src / test / groovy / io / realm / transformer / BytecodeModifierTest . groovy 
 index 9a7701b . . 65609cd 100644 
 - - - a / realm - transformer / src / test / groovy / io / realm / transformer / BytecodeModifierTest . groovy 
 + + + b / realm - transformer / src / test / groovy / io / realm / transformer / BytecodeModifierTest . groovy 
 @ @ - 17 , 10 + 17 , 7 @ @ 
 package io . realm . transformer 
 
 import io . realm . annotations . Ignore 
 - import javassist . ClassPool 
 - import javassist . CtClass 
 - import javassist . CtField 
 - import javassist . CtNewMethod 
 + import javassist . * 
 import javassist . bytecode . AnnotationsAttribute 
 import javassist . bytecode . CodeIterator 
 import javassist . bytecode . ConstPool 
 @ @ - 111 , 4 + 108 , 41 @ @ class BytecodeModifierTest extends Specification { 
 } 
 ! fieldIsUsed 
 } 
 + 
 + def " UseRealmAccessorsInNonDefaultConstructor " ( ) { 
 + setup : ' generate an empty class ' 
 + def classPool = ClassPool . getDefault ( ) 
 + def ctClass = classPool . makeClass ( ' TestClass ' ) 
 + 
 + and : ' add a field ' 
 + def ctField = new CtField ( CtClass . intType , ' age ' , ctClass ) 
 + ctClass . addField ( ctField ) 
 + 
 + and : ' add a method that sets such field ' 
 + def ctMethod = CtNewMethod . make ( ' private void setupAge ( int age ) { this . age = age ; } ' , ctClass ) 
 + ctClass . addMethod ( ctMethod ) 
 + 
 + and : ' add a constructor that uses the method ' 
 + def ctConstructor = CtNewConstructor . make ( ' public TestClass ( int age ) { setupAge ( age ) ; } ' , ctClass ) 
 + ctClass . addConstructor ( ctConstructor ) 
 + 
 + and : ' realm accessors are added ' 
 + BytecodeModifier . addRealmAccessors ( ctClass ) 
 + 
 + when : ' the field use is replaced by the accessor ' 
 + BytecodeModifier . useRealmAccessors ( ctClass , [ ctField ] , [ ] ) 
 + 
 + then : ' the field is not used in the method anymore ' 
 + def methodInfo = ctMethod . getMethodInfo ( ) 
 + def codeAttribute = methodInfo . getCodeAttribute ( ) 
 + def fieldIsUsed = false 
 + for ( CodeIterator ci = codeAttribute . iterator ( ) ; ci . hasNext ( ) ; ) { 
 + int index = ci . next ( ) ; 
 + int op = ci . byteAt ( index ) ; 
 + if ( op = = Opcode . PUTFIELD ) { 
 + fieldIsUsed = true 
 + } 
 + } 
 + ! fieldIsUsed 
 + } 
 }

NEAREST DIFF:
diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 index dde87f0 . . 3a67b58 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 @ @ - 19 , 6 + 19 , 7 @ @ import com . android . SdkConstants 
 import com . android . build . api . transform . * 
 import com . google . common . collect . ImmutableSet 
 import com . google . common . collect . Sets 
 + import com . google . common . io . Files 
 import groovy . io . FileType 
 import io . realm . annotations . Ignore 
 import javassist . ClassPool 
 @ @ - 119 , 10 + 120 , 11 @ @ class RealmTransformer extends Transform { 
 logger . info " Modifying class $ { it } " 
 def ctClass = classPool . getCtClass ( it ) 
 BytecodeModifier . useRealmAccessors ( ctClass , managedFields , modelClasses ) 
 - ctClass . writeFile ( outputProvider . getContentLocation ( 
 - ' realm ' , getInputTypes ( ) , getScopes ( ) , Format . DIRECTORY ) . canonicalPath ) 
 + ctClass . writeFile ( getOutputFile ( outputProvider ) . canonicalPath ) 
 } 
 
 + copyResourceFiles ( inputs , outputProvider ) 
 + 
 def toc = System . currentTimeMillis ( ) 
 logger . info " Realm Transform time : $ { toc - tic } milliseconds " 
 } 
 @ @ - 186 , 4 + 188 , 27 @ @ class RealmTransformer extends Transform { 
 return classNames 
 } 
 
 + private copyResourceFiles ( Collection < TransformInput > inputs , TransformOutputProvider outputProvider ) { 
 + inputs . each { 
 + it . directoryInputs . each { 
 + def dirPath = it . file . absolutePath 
 + it . file . eachFileRecurse ( FileType . FILES ) { 
 + if ( ! it . absolutePath . endsWith ( SdkConstants . DOT _ CLASS ) ) { 
 + logger . info " Copying resource $ { it } " 
 + def dest = new File ( getOutputFile ( outputProvider ) , 
 + it . absolutePath . substring ( dirPath . length ( ) ) ) 
 + dest . parentFile . mkdirs ( ) 
 + Files . copy ( it , dest ) 
 + } 
 + } 
 + } 
 + 
 + / / no need to implement the code for ` it . jarInputs . each ` since PROJECT SCOPE does not use jar input . 
 + } 
 + } 
 + 
 + private File getOutputFile ( TransformOutputProvider outputProvider ) { 
 + return outputProvider . getContentLocation ( 
 + ' realm ' , getInputTypes ( ) , getScopes ( ) , Format . DIRECTORY ) 
 + } 
 }
