BLEU SCORE: 0.040583489434387374

TEST MSG: Use ObserverPair to manage collection listeners
GENERATED MSG: Wrap NotificationToken

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index ab66b03 . . 77eae57 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 779 , 7 + 779 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> realm . checkIfValid ( ) ; <nl> - collection . addListener ( new Collection . Listener ( listener , this ) ) ; <nl> + collection . addListener ( this , listener ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 794 , 7 + 794 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> realm . checkIfValid ( ) ; <nl> - collection . removeListener ( new Collection . Listener ( listener , this ) ) ; <nl> + collection . removeListener ( this , listener ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index 48b76f2 . . 70e4b5d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 16 , 7 + 16 , 6 @ @ <nl> <nl> package io . realm . internal ; <nl> <nl> - import java . lang . ref . WeakReference ; <nl> import java . util . List ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> <nl> @ @ - 29 , 27 + 28 , 17 @ @ import io . realm . RealmChangeListener ; <nl> @ KeepMember <nl> public final class Collection implements NativeObject { <nl> <nl> - public static class Listener { <nl> - private final RealmChangeListener realmChangeListener ; <nl> - private final WeakReference < Object > objectRef ; <nl> - <nl> - public Listener ( RealmChangeListener realmChangeListener , Object objectRef ) { <nl> - this . realmChangeListener = realmChangeListener ; <nl> - this . objectRef = new WeakReference < Object > ( objectRef ) ; <nl> + private static class CollectionObserverPair < T > extends ObserverPair < T , RealmChangeListener < T > > { <nl> + public CollectionObserverPair ( T observer , RealmChangeListener < T > listener ) { <nl> + super ( observer , listener ) ; <nl> } <nl> <nl> - @ Override <nl> - public boolean equals ( Object obj ) { <nl> - if ( this = = obj ) { <nl> - return true ; <nl> - } <nl> + public void onChange ( ) { <nl> + T observer = observerRef . get ( ) ; <nl> + if ( observer ! = null ) { <nl> <nl> - if ( obj instanceof Listener ) { <nl> - Listener anotherListener = ( Listener ) obj ; <nl> - return realmChangeListener . equals ( anotherListener . realmChangeListener ) & & <nl> - objectRef . equals ( anotherListener . objectRef ) ; <nl> + listener . onChange ( observerRef . get ( ) ) ; <nl> } <nl> - return false ; <nl> } <nl> } <nl> <nl> @ @ - 58 , 7 + 47 , 7 @ @ public final class Collection implements NativeObject { <nl> private final SharedRealm sharedRealm ; <nl> private final Context context ; <nl> private final TableQuery query ; <nl> - private final List < Listener > listeners = new CopyOnWriteArrayList < Listener > ( ) ; <nl> + private final List < CollectionObserverPair > observerPairs = new CopyOnWriteArrayList < CollectionObserverPair > ( ) ; <nl> <nl> / / Public for static checking in JNI <nl> @ SuppressWarnings ( " WeakerAccess " ) <nl> @ @ - 90 , 13 + 79 , 14 @ @ public final class Collection implements NativeObject { <nl> public Collection ( SharedRealm sharedRealm , TableQuery query , <nl> SortDescriptor sortDescriptor , SortDescriptor distinctDescriptor ) { <nl> query . validateQuery ( ) ; <nl> - this . sharedRealm = sharedRealm ; <nl> - this . context = sharedRealm . context ; <nl> - this . query = query ; <nl> <nl> this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , <nl> sortDescriptor = = null ? 0 : sortDescriptor . getNativePtr ( ) , <nl> distinctDescriptor = = null ? 0 : distinctDescriptor . getNativePtr ( ) ) ; <nl> + <nl> + this . sharedRealm = sharedRealm ; <nl> + this . context = sharedRealm . context ; <nl> + this . query = query ; <nl> this . context . addReference ( this ) ; <nl> } <nl> <nl> @ @ - 110 , 6 + 100 , 7 @ @ public final class Collection implements NativeObject { <nl> } <nl> <nl> private Collection ( SharedRealm sharedRealm , TableQuery query , long nativePtr ) { <nl> + query . validateQuery ( ) ; <nl> this . sharedRealm = sharedRealm ; <nl> this . context = sharedRealm . context ; <nl> this . query = query ; <nl> @ @ - 179 , 24 + 170 , 26 @ @ public final class Collection implements NativeObject { <nl> return ( index > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) index ; <nl> } <nl> <nl> - public void addListener ( Listener listener ) { <nl> - if ( listeners . isEmpty ( ) ) { <nl> + public < T > void addListener ( T observer , RealmChangeListener < T > listener ) { <nl> + if ( observerPairs . isEmpty ( ) ) { <nl> nativeStartListening ( nativePtr ) ; <nl> } <nl> - if ( ! listeners . contains ( listener ) ) { <nl> - listeners . add ( listener ) ; <nl> + CollectionObserverPair < T > collectionObserverPair = new CollectionObserverPair < T > ( observer , listener ) ; <nl> + if ( ! observerPairs . contains ( collectionObserverPair ) ) { <nl> + observerPairs . add ( collectionObserverPair ) ; <nl> } <nl> } <nl> <nl> - public void removeListener ( Listener listener ) { <nl> - listeners . remove ( listener ) ; <nl> - if ( listeners . isEmpty ( ) ) { <nl> + public < T > void removeListener ( T observer , RealmChangeListener < T > listener ) { <nl> + CollectionObserverPair < T > collectionObserverPair = new CollectionObserverPair < T > ( observer , listener ) ; <nl> + observerPairs . remove ( collectionObserverPair ) ; <nl> + if ( observerPairs . isEmpty ( ) ) { <nl> nativeStopListening ( nativePtr ) ; <nl> } <nl> } <nl> <nl> public void removeAllListeners ( ) { <nl> - listeners . clear ( ) ; <nl> + observerPairs . clear ( ) ; <nl> nativeStopListening ( nativePtr ) ; <nl> } <nl> <nl> @ @ - 204 , 15 + 197 , 12 @ @ public final class Collection implements NativeObject { <nl> @ KeepMember <nl> @ SuppressWarnings ( " unused " ) <nl> private void notifyChangeListeners ( ) { <nl> - if ( ! listeners . isEmpty ( ) ) { <nl> - for ( Listener listener : listeners ) { <nl> - Object obj = listener . objectRef . get ( ) ; <nl> - if ( obj = = null ) { <nl> - listeners . remove ( listener ) ; <nl> - continue ; <nl> - } <nl> - / / noinspection unchecked <nl> - listener . realmChangeListener . onChange ( obj ) ; <nl> + for ( CollectionObserverPair pair : observerPairs ) { <nl> + Object object = pair . observerRef . get ( ) ; <nl> + if ( object ! = null ) { <nl> + pair . onChange ( ) ; <nl> + } else { <nl> + observerPairs . remove ( pair ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java b / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java <nl> index c54a066 . . 172215f 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java <nl> @ @ - 30 , 14 + 30 , 15 @ @ public class PendingRow implements Row { <nl> " The query has been executed . This ' PendingRow ' is not valid anymore . " ; <nl> <nl> private Collection pendingCollection ; <nl> - private Collection . Listener listener ; <nl> + private RealmChangeListener < PendingRow > listener ; <nl> private WeakReference < FrontEnd > frontEnd ; <nl> private boolean returnCheckedRow ; <nl> <nl> public PendingRow ( SharedRealm sharedRealm , TableQuery query , SortDescriptor sortDescriptor , <nl> final boolean returnCheckedRow ) { <nl> pendingCollection = new Collection ( sharedRealm , query , sortDescriptor ) ; <nl> - listener = new Collection . Listener ( new RealmChangeListener < PendingRow > ( ) { <nl> + <nl> + listener = new RealmChangeListener < PendingRow > ( ) { <nl> @ Override <nl> public void onChange ( PendingRow pendingRow ) { <nl> if ( frontEnd = = null ) { <nl> @ @ - 58 , 8 + 59 , 8 @ @ public class PendingRow implements Row { <nl> clearPendingCollection ( ) ; <nl> } <nl> } <nl> - } , this ) ; <nl> - pendingCollection . addListener ( listener ) ; <nl> + } ; <nl> + pendingCollection . addListener ( this , listener ) ; <nl> this . returnCheckedRow = returnCheckedRow ; <nl> } <nl> <nl> @ @ - 214 , 7 + 215 , 7 @ @ public class PendingRow implements Row { <nl> } <nl> <nl> private void clearPendingCollection ( ) { <nl> - pendingCollection . removeListener ( listener ) ; <nl> + pendingCollection . removeListener ( this , listener ) ; <nl> pendingCollection = null ; <nl> listener = null ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index c4e8d6c . . dcd63e8 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 26 , 6 + 26 , 24 @ @ <nl> <nl> using namespace realm ; <nl> <nl> + static void finalize _ results ( jlong ptr ) ; <nl> + static void finalize _ notification _ token ( jlong ptr ) ; <nl> + <nl> + static void finalize _ results ( jlong ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( ptr ) ; <nl> + delete reinterpret _ cast < Results * > ( ptr ) ; <nl> + } <nl> + <nl> + static void finalize _ notification _ token ( jlong ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( ptr ) ; <nl> + / / NotificationToken can be closed by NotificationToken . close ( ) . Then ptr will be reset in that case . <nl> + if ( ptr ) { <nl> + delete reinterpret _ cast < NotificationToken * > ( ptr ) ; <nl> + } <nl> + } <nl> + <nl> JNIEXPORT jlong JNICALL <nl> Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared _ realm _ ptr , jlong query _ ptr , <nl> jlongArray colunm _ indices , jbooleanArray jsort _ orders ) <nl> @ @ - 205 , 10 + 223 , 29 @ @ Java _ io _ realm _ internal _ Collection _ nativeAddListener ( JNIEnv * env , jobject instanc <nl> } ; <nl> <nl> NotificationToken token = results - > add _ notification _ callback ( cb ) ; <nl> - / / FIXME : Let ' s leak them ALL for now ! ! <nl> - return reinterpret _ cast < jlong > ( <nl> - new std : : unique _ ptr < NotificationToken > ( new NotificationToken ( std : : move ( token ) ) ) ) ; <nl> + return reinterpret _ cast < jlong > ( new NotificationToken ( std : : move ( token ) ) ) ; <nl> } CATCH _ STD ( ) <nl> <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeGetFinalizerPtr ( JNIEnv * , jclass ) <nl> + { <nl> + TR _ ENTER ( ) <nl> + return reinterpret _ cast < jlong > ( & finalize _ results ) ; <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenGetFinalizerPtr ( JNIEnv * , jclass ) <nl> + { <nl> + TR _ ENTER ( ) <nl> + return reinterpret _ cast < jlong > ( & finalize _ notification _ token ) ; <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenClose ( JNIEnv * , jclass , jlong native _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + delete reinterpret _ cast < NotificationToken * > ( native _ ptr ) ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 2c4e578 . . 4a68b92 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 97 , 7 + 97 , 8 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> <nl> static < E extends RealmModel > RealmResults < E > createFromQuery ( BaseRealm realm , TableQuery query , Class < E > clazz , <nl> String fieldNames [ ] , Sort [ ] sortOrder ) { <nl> - return new RealmResults < E > ( realm , query , clazz , fieldNames , sortOrder ) ; <nl> + Collection collection = new Collection ( realm . sharedRealm , query , null , null ) ; <nl> + return new RealmResults < E > ( realm , collection , clazz ) ; <nl> } <nl> <nl> static < E extends RealmModel > RealmResults < E > createFromTableQuery ( BaseRealm realm , TableQuery query , Class < E > clazz ) { <nl> @ @ - 1009 , 12 + 1010 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> realm . checkIfValid ( ) ; <nl> - if ( listeners . isEmpty ( ) ) { <nl> - / / nativeAddListener ( nativePtr ) ; <nl> - } <nl> - if ( ! listeners . contains ( listener ) ) { <nl> - listeners . add ( listener ) ; <nl> - } <nl> + collection . addListener ( new Collection . Listener ( listener , this ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1029 , 7 + 1025 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> realm . checkIfValid ( ) ; <nl> - listeners . remove ( listener ) ; <nl> + collection . removeListener ( new Collection . Listener ( listener , this ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1037 , 7 + 1033 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> * / <nl> public void removeChangeListeners ( ) { <nl> realm . checkIfValid ( ) ; <nl> - listeners . clear ( ) ; <nl> + collection . removeAllListeners ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index be3c35d . . 05872dd 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 16 , 18 + 16 , 69 @ @ <nl> <nl> package io . realm . internal ; <nl> <nl> + import java . lang . ref . WeakReference ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . CopyOnWriteArrayList ; <nl> + <nl> import io . realm . RealmChangeListener ; <nl> <nl> public class Collection implements NativeObject { <nl> <nl> - public interface Listener { <nl> - void onChange ( ) ; <nl> + public static class Listener { <nl> + private final RealmChangeListener realmChangeListener ; <nl> + private final WeakReference < Object > objectRef ; <nl> + <nl> + public Listener ( RealmChangeListener realmChangeListener , Object objectRef ) { <nl> + this . realmChangeListener = realmChangeListener ; <nl> + this . objectRef = new WeakReference < Object > ( objectRef ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object obj ) { <nl> + if ( this = = obj ) { <nl> + return true ; <nl> + } <nl> + <nl> + if ( obj instanceof Listener ) { <nl> + Listener anotherListener = ( Listener ) obj ; <nl> + return realmChangeListener . equals ( anotherListener . realmChangeListener ) & & <nl> + objectRef . equals ( anotherListener . objectRef ) ; <nl> + } <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + private static class NotificationToken implements NativeObject { <nl> + private long nativePtr ; <nl> + private static final long nativeFinalizerPtr = nativeNotificationTokenGetFinalizerPtr ( ) ; <nl> + <nl> + NotificationToken ( long nativePtr ) { <nl> + this . nativePtr = nativePtr ; <nl> + Context . sharedContext . addReference ( this ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public long getNativePtr ( ) { <nl> + return nativePtr ; <nl> + } <nl> + <nl> + @ Override <nl> + public long getNativeFinalizerPtr ( ) { <nl> + return nativeFinalizerPtr ; <nl> + } <nl> + <nl> + public void close ( ) { <nl> + nativeNotificationTokenClose ( nativePtr ) ; <nl> + nativePtr = 0 ; <nl> + } <nl> } <nl> - <nl> + <nl> private final long nativePtr ; <nl> private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; <nl> private final Context context ; <nl> private final TableQuery query ; <nl> + private final List < Listener > listeners = new CopyOnWriteArrayList < Listener > ( ) ; <nl> + private NotificationToken notificationToken = null ; <nl> <nl> / / Public for static checking in JNI <nl> public static final byte AGGREGATE _ FUNCTION _ MINIMUM = 1 ; <nl> @ @ - 52 , 11 + 103 , 12 @ @ public class Collection implements NativeObject { <nl> } <nl> } <nl> <nl> - protected Collection ( SharedRealm sharedRealm , TableQuery query , long indices [ ] , boolean [ ] orders ) { <nl> + public Collection ( SharedRealm sharedRealm , TableQuery query , long indices [ ] , boolean [ ] orders ) { <nl> this . context = sharedRealm . context ; <nl> this . query = query ; <nl> <nl> this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , indices , orders ) ; <nl> + this . context . addReference ( this ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 86 , 6 + 138 , 47 @ @ public class Collection implements NativeObject { <nl> nativeClear ( nativePtr ) ; <nl> } <nl> <nl> + public void addListener ( Listener listener ) { <nl> + if ( ! listeners . contains ( listener ) ) { <nl> + listeners . add ( listener ) ; <nl> + } <nl> + if ( notificationToken = = null ) { <nl> + notificationToken = new NotificationToken ( nativeAddListener ( nativePtr ) ) ; <nl> + } <nl> + } <nl> + <nl> + public void removeListener ( Listener listener ) { <nl> + listeners . remove ( listener ) ; <nl> + if ( listeners . isEmpty ( ) & & notificationToken ! = null ) { <nl> + notificationToken . close ( ) ; <nl> + notificationToken = null ; <nl> + } <nl> + } <nl> + <nl> + public void removeAllListeners ( ) { <nl> + listeners . clear ( ) ; <nl> + if ( notificationToken ! = null ) { <nl> + notificationToken . close ( ) ; <nl> + notificationToken = null ; <nl> + } <nl> + } <nl> + <nl> + / / Called by JNI <nl> + @ SuppressWarnings ( " unused " ) <nl> + private void notifyChangeListeners ( ) { <nl> + if ( ! listeners . isEmpty ( ) ) { <nl> + for ( Listener listener : listeners ) { <nl> + Object obj = listener . objectRef . get ( ) ; <nl> + if ( obj = = null ) { <nl> + listeners . remove ( listener ) ; <nl> + continue ; <nl> + } <nl> + / / noinspection unchecked <nl> + listener . realmChangeListener . onChange ( obj ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> private static native long nativeGetFinalizerPtr ( ) ; <nl> private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , long [ ] columnIndices , <nl> boolean [ ] orders ) ; <nl> @ @ - 97 , 4 + 190 , 6 @ @ public class Collection implements NativeObject { <nl> private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; <nl> private static native long nativeSort ( long nativePtr , long [ ] columnIndices , boolean [ ] orders ) ; <nl> private native long nativeAddListener ( long nativePtr ) ; <nl> + private static native long nativeNotificationTokenGetFinalizerPtr ( ) ; <nl> + private static native long nativeNotificationTokenClose ( long nativePtr ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Context . java b / realm / realm - library / src / main / java / io / realm / internal / Context . java <nl> index 9dc084e . . d68bceb 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Context . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Context . java <nl> @ @ - 29 , 6 + 29 , 9 @ @ public class Context { <nl> private final static ReferenceQueue < NativeObject > referenceQueue = new ReferenceQueue < NativeObject > ( ) ; <nl> private final static Thread finalizingThread = new Thread ( new FinalizerRunnable ( referenceQueue ) ) ; <nl> <nl> + / / Context instance for native objects which are always thread - safe to be created and freed . <nl> + public final static Context sharedContext = new Context ( ) ; <nl> + <nl> static { <nl> finalizingThread . setName ( " RealmFinalizingDaemon " ) ; <nl> finalizingThread . start ( ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index ab66b03 . . 77eae57 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 779 , 7 + 779 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 realm . checkIfValid ( ) ; 
 - collection . addListener ( new Collection . Listener ( listener , this ) ) ; 
 + collection . addListener ( this , listener ) ; 
 } 
 
 / * * 
 @ @ - 794 , 7 + 794 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 realm . checkIfValid ( ) ; 
 - collection . removeListener ( new Collection . Listener ( listener , this ) ) ; 
 + collection . removeListener ( this , listener ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index 48b76f2 . . 70e4b5d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 16 , 7 + 16 , 6 @ @ 
 
 package io . realm . internal ; 
 
 - import java . lang . ref . WeakReference ; 
 import java . util . List ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 
 @ @ - 29 , 27 + 28 , 17 @ @ import io . realm . RealmChangeListener ; 
 @ KeepMember 
 public final class Collection implements NativeObject { 
 
 - public static class Listener { 
 - private final RealmChangeListener realmChangeListener ; 
 - private final WeakReference < Object > objectRef ; 
 - 
 - public Listener ( RealmChangeListener realmChangeListener , Object objectRef ) { 
 - this . realmChangeListener = realmChangeListener ; 
 - this . objectRef = new WeakReference < Object > ( objectRef ) ; 
 + private static class CollectionObserverPair < T > extends ObserverPair < T , RealmChangeListener < T > > { 
 + public CollectionObserverPair ( T observer , RealmChangeListener < T > listener ) { 
 + super ( observer , listener ) ; 
 } 
 
 - @ Override 
 - public boolean equals ( Object obj ) { 
 - if ( this = = obj ) { 
 - return true ; 
 - } 
 + public void onChange ( ) { 
 + T observer = observerRef . get ( ) ; 
 + if ( observer ! = null ) { 
 
 - if ( obj instanceof Listener ) { 
 - Listener anotherListener = ( Listener ) obj ; 
 - return realmChangeListener . equals ( anotherListener . realmChangeListener ) & & 
 - objectRef . equals ( anotherListener . objectRef ) ; 
 + listener . onChange ( observerRef . get ( ) ) ; 
 } 
 - return false ; 
 } 
 } 
 
 @ @ - 58 , 7 + 47 , 7 @ @ public final class Collection implements NativeObject { 
 private final SharedRealm sharedRealm ; 
 private final Context context ; 
 private final TableQuery query ; 
 - private final List < Listener > listeners = new CopyOnWriteArrayList < Listener > ( ) ; 
 + private final List < CollectionObserverPair > observerPairs = new CopyOnWriteArrayList < CollectionObserverPair > ( ) ; 
 
 / / Public for static checking in JNI 
 @ SuppressWarnings ( " WeakerAccess " ) 
 @ @ - 90 , 13 + 79 , 14 @ @ public final class Collection implements NativeObject { 
 public Collection ( SharedRealm sharedRealm , TableQuery query , 
 SortDescriptor sortDescriptor , SortDescriptor distinctDescriptor ) { 
 query . validateQuery ( ) ; 
 - this . sharedRealm = sharedRealm ; 
 - this . context = sharedRealm . context ; 
 - this . query = query ; 
 
 this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , 
 sortDescriptor = = null ? 0 : sortDescriptor . getNativePtr ( ) , 
 distinctDescriptor = = null ? 0 : distinctDescriptor . getNativePtr ( ) ) ; 
 + 
 + this . sharedRealm = sharedRealm ; 
 + this . context = sharedRealm . context ; 
 + this . query = query ; 
 this . context . addReference ( this ) ; 
 } 
 
 @ @ - 110 , 6 + 100 , 7 @ @ public final class Collection implements NativeObject { 
 } 
 
 private Collection ( SharedRealm sharedRealm , TableQuery query , long nativePtr ) { 
 + query . validateQuery ( ) ; 
 this . sharedRealm = sharedRealm ; 
 this . context = sharedRealm . context ; 
 this . query = query ; 
 @ @ - 179 , 24 + 170 , 26 @ @ public final class Collection implements NativeObject { 
 return ( index > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) index ; 
 } 
 
 - public void addListener ( Listener listener ) { 
 - if ( listeners . isEmpty ( ) ) { 
 + public < T > void addListener ( T observer , RealmChangeListener < T > listener ) { 
 + if ( observerPairs . isEmpty ( ) ) { 
 nativeStartListening ( nativePtr ) ; 
 } 
 - if ( ! listeners . contains ( listener ) ) { 
 - listeners . add ( listener ) ; 
 + CollectionObserverPair < T > collectionObserverPair = new CollectionObserverPair < T > ( observer , listener ) ; 
 + if ( ! observerPairs . contains ( collectionObserverPair ) ) { 
 + observerPairs . add ( collectionObserverPair ) ; 
 } 
 } 
 
 - public void removeListener ( Listener listener ) { 
 - listeners . remove ( listener ) ; 
 - if ( listeners . isEmpty ( ) ) { 
 + public < T > void removeListener ( T observer , RealmChangeListener < T > listener ) { 
 + CollectionObserverPair < T > collectionObserverPair = new CollectionObserverPair < T > ( observer , listener ) ; 
 + observerPairs . remove ( collectionObserverPair ) ; 
 + if ( observerPairs . isEmpty ( ) ) { 
 nativeStopListening ( nativePtr ) ; 
 } 
 } 
 
 public void removeAllListeners ( ) { 
 - listeners . clear ( ) ; 
 + observerPairs . clear ( ) ; 
 nativeStopListening ( nativePtr ) ; 
 } 
 
 @ @ - 204 , 15 + 197 , 12 @ @ public final class Collection implements NativeObject { 
 @ KeepMember 
 @ SuppressWarnings ( " unused " ) 
 private void notifyChangeListeners ( ) { 
 - if ( ! listeners . isEmpty ( ) ) { 
 - for ( Listener listener : listeners ) { 
 - Object obj = listener . objectRef . get ( ) ; 
 - if ( obj = = null ) { 
 - listeners . remove ( listener ) ; 
 - continue ; 
 - } 
 - / / noinspection unchecked 
 - listener . realmChangeListener . onChange ( obj ) ; 
 + for ( CollectionObserverPair pair : observerPairs ) { 
 + Object object = pair . observerRef . get ( ) ; 
 + if ( object ! = null ) { 
 + pair . onChange ( ) ; 
 + } else { 
 + observerPairs . remove ( pair ) ; 
 } 
 } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java b / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java 
 index c54a066 . . 172215f 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java 
 @ @ - 30 , 14 + 30 , 15 @ @ public class PendingRow implements Row { 
 " The query has been executed . This ' PendingRow ' is not valid anymore . " ; 
 
 private Collection pendingCollection ; 
 - private Collection . Listener listener ; 
 + private RealmChangeListener < PendingRow > listener ; 
 private WeakReference < FrontEnd > frontEnd ; 
 private boolean returnCheckedRow ; 
 
 public PendingRow ( SharedRealm sharedRealm , TableQuery query , SortDescriptor sortDescriptor , 
 final boolean returnCheckedRow ) { 
 pendingCollection = new Collection ( sharedRealm , query , sortDescriptor ) ; 
 - listener = new Collection . Listener ( new RealmChangeListener < PendingRow > ( ) { 
 + 
 + listener = new RealmChangeListener < PendingRow > ( ) { 
 @ Override 
 public void onChange ( PendingRow pendingRow ) { 
 if ( frontEnd = = null ) { 
 @ @ - 58 , 8 + 59 , 8 @ @ public class PendingRow implements Row { 
 clearPendingCollection ( ) ; 
 } 
 } 
 - } , this ) ; 
 - pendingCollection . addListener ( listener ) ; 
 + } ; 
 + pendingCollection . addListener ( this , listener ) ; 
 this . returnCheckedRow = returnCheckedRow ; 
 } 
 
 @ @ - 214 , 7 + 215 , 7 @ @ public class PendingRow implements Row { 
 } 
 
 private void clearPendingCollection ( ) { 
 - pendingCollection . removeListener ( listener ) ; 
 + pendingCollection . removeListener ( this , listener ) ; 
 pendingCollection = null ; 
 listener = null ; 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index c4e8d6c . . dcd63e8 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 26 , 6 + 26 , 24 @ @ 
 
 using namespace realm ; 
 
 + static void finalize _ results ( jlong ptr ) ; 
 + static void finalize _ notification _ token ( jlong ptr ) ; 
 + 
 + static void finalize _ results ( jlong ptr ) 
 + { 
 + TR _ ENTER _ PTR ( ptr ) ; 
 + delete reinterpret _ cast < Results * > ( ptr ) ; 
 + } 
 + 
 + static void finalize _ notification _ token ( jlong ptr ) 
 + { 
 + TR _ ENTER _ PTR ( ptr ) ; 
 + / / NotificationToken can be closed by NotificationToken . close ( ) . Then ptr will be reset in that case . 
 + if ( ptr ) { 
 + delete reinterpret _ cast < NotificationToken * > ( ptr ) ; 
 + } 
 + } 
 + 
 JNIEXPORT jlong JNICALL 
 Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared _ realm _ ptr , jlong query _ ptr , 
 jlongArray colunm _ indices , jbooleanArray jsort _ orders ) 
 @ @ - 205 , 10 + 223 , 29 @ @ Java _ io _ realm _ internal _ Collection _ nativeAddListener ( JNIEnv * env , jobject instanc 
 } ; 
 
 NotificationToken token = results - > add _ notification _ callback ( cb ) ; 
 - / / FIXME : Let ' s leak them ALL for now ! ! 
 - return reinterpret _ cast < jlong > ( 
 - new std : : unique _ ptr < NotificationToken > ( new NotificationToken ( std : : move ( token ) ) ) ) ; 
 + return reinterpret _ cast < jlong > ( new NotificationToken ( std : : move ( token ) ) ) ; 
 } CATCH _ STD ( ) 
 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeGetFinalizerPtr ( JNIEnv * , jclass ) 
 + { 
 + TR _ ENTER ( ) 
 + return reinterpret _ cast < jlong > ( & finalize _ results ) ; 
 + } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenGetFinalizerPtr ( JNIEnv * , jclass ) 
 + { 
 + TR _ ENTER ( ) 
 + return reinterpret _ cast < jlong > ( & finalize _ notification _ token ) ; 
 + } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeNotificationTokenClose ( JNIEnv * , jclass , jlong native _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + delete reinterpret _ cast < NotificationToken * > ( native _ ptr ) ; 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 2c4e578 . . 4a68b92 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 97 , 7 + 97 , 8 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 
 static < E extends RealmModel > RealmResults < E > createFromQuery ( BaseRealm realm , TableQuery query , Class < E > clazz , 
 String fieldNames [ ] , Sort [ ] sortOrder ) { 
 - return new RealmResults < E > ( realm , query , clazz , fieldNames , sortOrder ) ; 
 + Collection collection = new Collection ( realm . sharedRealm , query , null , null ) ; 
 + return new RealmResults < E > ( realm , collection , clazz ) ; 
 } 
 
 static < E extends RealmModel > RealmResults < E > createFromTableQuery ( BaseRealm realm , TableQuery query , Class < E > clazz ) { 
 @ @ - 1009 , 12 + 1010 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 realm . checkIfValid ( ) ; 
 - if ( listeners . isEmpty ( ) ) { 
 - / / nativeAddListener ( nativePtr ) ; 
 - } 
 - if ( ! listeners . contains ( listener ) ) { 
 - listeners . add ( listener ) ; 
 - } 
 + collection . addListener ( new Collection . Listener ( listener , this ) ) ; 
 } 
 
 / * * 
 @ @ - 1029 , 7 + 1025 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 realm . checkIfValid ( ) ; 
 - listeners . remove ( listener ) ; 
 + collection . removeListener ( new Collection . Listener ( listener , this ) ) ; 
 } 
 
 / * * 
 @ @ - 1037 , 7 + 1033 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 * / 
 public void removeChangeListeners ( ) { 
 realm . checkIfValid ( ) ; 
 - listeners . clear ( ) ; 
 + collection . removeAllListeners ( ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index be3c35d . . 05872dd 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 16 , 18 + 16 , 69 @ @ 
 
 package io . realm . internal ; 
 
 + import java . lang . ref . WeakReference ; 
 + import java . util . List ; 
 + import java . util . concurrent . CopyOnWriteArrayList ; 
 + 
 import io . realm . RealmChangeListener ; 
 
 public class Collection implements NativeObject { 
 
 - public interface Listener { 
 - void onChange ( ) ; 
 + public static class Listener { 
 + private final RealmChangeListener realmChangeListener ; 
 + private final WeakReference < Object > objectRef ; 
 + 
 + public Listener ( RealmChangeListener realmChangeListener , Object objectRef ) { 
 + this . realmChangeListener = realmChangeListener ; 
 + this . objectRef = new WeakReference < Object > ( objectRef ) ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object obj ) { 
 + if ( this = = obj ) { 
 + return true ; 
 + } 
 + 
 + if ( obj instanceof Listener ) { 
 + Listener anotherListener = ( Listener ) obj ; 
 + return realmChangeListener . equals ( anotherListener . realmChangeListener ) & & 
 + objectRef . equals ( anotherListener . objectRef ) ; 
 + } 
 + return false ; 
 + } 
 + } 
 + 
 + private static class NotificationToken implements NativeObject { 
 + private long nativePtr ; 
 + private static final long nativeFinalizerPtr = nativeNotificationTokenGetFinalizerPtr ( ) ; 
 + 
 + NotificationToken ( long nativePtr ) { 
 + this . nativePtr = nativePtr ; 
 + Context . sharedContext . addReference ( this ) ; 
 + } 
 + 
 + @ Override 
 + public long getNativePtr ( ) { 
 + return nativePtr ; 
 + } 
 + 
 + @ Override 
 + public long getNativeFinalizerPtr ( ) { 
 + return nativeFinalizerPtr ; 
 + } 
 + 
 + public void close ( ) { 
 + nativeNotificationTokenClose ( nativePtr ) ; 
 + nativePtr = 0 ; 
 + } 
 } 
 - 
 + 
 private final long nativePtr ; 
 private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; 
 private final Context context ; 
 private final TableQuery query ; 
 + private final List < Listener > listeners = new CopyOnWriteArrayList < Listener > ( ) ; 
 + private NotificationToken notificationToken = null ; 
 
 / / Public for static checking in JNI 
 public static final byte AGGREGATE _ FUNCTION _ MINIMUM = 1 ; 
 @ @ - 52 , 11 + 103 , 12 @ @ public class Collection implements NativeObject { 
 } 
 } 
 
 - protected Collection ( SharedRealm sharedRealm , TableQuery query , long indices [ ] , boolean [ ] orders ) { 
 + public Collection ( SharedRealm sharedRealm , TableQuery query , long indices [ ] , boolean [ ] orders ) { 
 this . context = sharedRealm . context ; 
 this . query = query ; 
 
 this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , indices , orders ) ; 
 + this . context . addReference ( this ) ; 
 } 
 
 @ Override 
 @ @ - 86 , 6 + 138 , 47 @ @ public class Collection implements NativeObject { 
 nativeClear ( nativePtr ) ; 
 } 
 
 + public void addListener ( Listener listener ) { 
 + if ( ! listeners . contains ( listener ) ) { 
 + listeners . add ( listener ) ; 
 + } 
 + if ( notificationToken = = null ) { 
 + notificationToken = new NotificationToken ( nativeAddListener ( nativePtr ) ) ; 
 + } 
 + } 
 + 
 + public void removeListener ( Listener listener ) { 
 + listeners . remove ( listener ) ; 
 + if ( listeners . isEmpty ( ) & & notificationToken ! = null ) { 
 + notificationToken . close ( ) ; 
 + notificationToken = null ; 
 + } 
 + } 
 + 
 + public void removeAllListeners ( ) { 
 + listeners . clear ( ) ; 
 + if ( notificationToken ! = null ) { 
 + notificationToken . close ( ) ; 
 + notificationToken = null ; 
 + } 
 + } 
 + 
 + / / Called by JNI 
 + @ SuppressWarnings ( " unused " ) 
 + private void notifyChangeListeners ( ) { 
 + if ( ! listeners . isEmpty ( ) ) { 
 + for ( Listener listener : listeners ) { 
 + Object obj = listener . objectRef . get ( ) ; 
 + if ( obj = = null ) { 
 + listeners . remove ( listener ) ; 
 + continue ; 
 + } 
 + / / noinspection unchecked 
 + listener . realmChangeListener . onChange ( obj ) ; 
 + } 
 + } 
 + } 
 + 
 private static native long nativeGetFinalizerPtr ( ) ; 
 private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , long [ ] columnIndices , 
 boolean [ ] orders ) ; 
 @ @ - 97 , 4 + 190 , 6 @ @ public class Collection implements NativeObject { 
 private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; 
 private static native long nativeSort ( long nativePtr , long [ ] columnIndices , boolean [ ] orders ) ; 
 private native long nativeAddListener ( long nativePtr ) ; 
 + private static native long nativeNotificationTokenGetFinalizerPtr ( ) ; 
 + private static native long nativeNotificationTokenClose ( long nativePtr ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Context . java b / realm / realm - library / src / main / java / io / realm / internal / Context . java 
 index 9dc084e . . d68bceb 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Context . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Context . java 
 @ @ - 29 , 6 + 29 , 9 @ @ public class Context { 
 private final static ReferenceQueue < NativeObject > referenceQueue = new ReferenceQueue < NativeObject > ( ) ; 
 private final static Thread finalizingThread = new Thread ( new FinalizerRunnable ( referenceQueue ) ) ; 
 
 + / / Context instance for native objects which are always thread - safe to be created and freed . 
 + public final static Context sharedContext = new Context ( ) ; 
 + 
 static { 
 finalizingThread . setName ( " RealmFinalizingDaemon " ) ; 
 finalizingThread . start ( ) ;
