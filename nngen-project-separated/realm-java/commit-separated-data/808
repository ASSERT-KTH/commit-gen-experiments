BLEU SCORE: 0.2259005009024612

TEST MSG: Updating contributing doc
GENERATED MSG: Language cleanup .

TEST DIFF (one line): diff - - git a / CONTRIBUTING . md b / CONTRIBUTING . md <nl> index ffba767 . . ae1a793 100644 <nl> - - - a / CONTRIBUTING . md <nl> + + + b / CONTRIBUTING . md <nl> @ @ - 146 , 6 + 146 , 13 @ @ All public classes and methods must have Javadoc describing their purpose . <nl> / * * <nl> * Checks if given field is equal to the provided value . <nl> * <nl> + * < pre > <nl> + * { @ code <nl> + * / / A multi - line code sample should be formatted like this . <nl> + * / / Please wrap the code element in a < pre > tag . <nl> + * } <nl> + * < / pre > <nl> + * <nl> * @ param fieldName the field to compare . <nl> * @ param fieldValue the value to compare with . <nl> * @ param caseSensitive if { @ code true } , substring matching is case sensitive . Setting this to { @ code false } works for English locale characters only . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmMigration . java b / realm / realm - library / src / main / java / io / realm / RealmMigration . java <nl> index 2b4ce31 . . 70ec9df 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmMigration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmMigration . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ package io . realm ; <nl> * To support migrations from any previous schemaVersion to the newest , the following pattern is recommended when <nl> * writing a migration : <nl> * <nl> + * < pre > <nl> * { @ code <nl> * public class CustomMigration implements RealmMigration { <nl> * \ @ Override <nl> @ @ - 46 , 6 + 47 , 7 @ @ package io . realm ; <nl> * } <nl> * } <nl> * } <nl> + * < / pre > <nl> * <nl> * During development when RealmObject classes can change frequently , it is possible to use <nl> * { @ link io . realm . Realm # deleteRealm ( RealmConfiguration ) } . This will delete the database file and eliminate the need for
NEAREST DIFF (one line): diff - - git a / realm - annotations / src / main / java / io / realm / annotations / RealmModule . java b / realm - annotations / src / main / java / io / realm / annotations / RealmModule . java <nl> index 3490e94 . . a6d2494 100644 <nl> - - - a / realm - annotations / src / main / java / io / realm / annotations / RealmModule . java <nl> + + + b / realm - annotations / src / main / java / io / realm / annotations / RealmModule . java <nl> @ @ - 23 , 14 + 23 , 14 @ @ import java . lang . annotation . RetentionPolicy ; <nl> import java . lang . annotation . Target ; <nl> <nl> / * * <nl> - * By default a Realm can stores all RealmClasses in a project . However , if you want to restrict a Realm to contain only <nl> + * By default a Realm can stores all RealmClasses in a project . However , if you want to restrict a Realm to only contain <nl> * certain classes or want to share them between a library project and an app project you must use a RealmModule . <nl> * < p > <nl> * A RealmModule is a collection of RealmClasses that can be combined with other RealmModules to create the schema for a <nl> * Realm . This makes it easier to control versioning and migration of those Realms . <nl> * < p > <nl> * A RealmModule can either be a library module or an app module . This distinction is made by setting <nl> - * { @ code library = true } . As default Realm will automatically create a RealmModule called { @ code DefaulRealmModule } <nl> + * { @ code library = true } . A default Realm will automatically create a RealmModule called { @ code DefaulRealmModule } <nl> * that contains all RealmClasses in a project . This module will be an app module and is automatically known by Realm . <nl> * < p > <nl> * This behavior is problematic when combining a library project and an app project that both uses Realm as <nl> @ @ - 40 , 13 + 40 , 13 @ @ import java . lang . annotation . Target ; <nl> * Library authors are reponsible for avoiding this conflict by creating a explicit library module where <nl> * { @ code library = true } is set . This disable the generation of the DefaultRealmModule for the library project and <nl> * allows the library to be included in the app project that also uses Realm . This means that library projects that uses <nl> - * Realm internally are required to specify a explicit module using { @ code RealmConfiguration . setModule ( ) } . <nl> + * Realm internally are required to specify a explicit module using { @ code RealmConfiguration . setModules ( ) } . <nl> * < p > <nl> * App developers are not required to specify any modules , as they implicitely use the { @ code DefaultRealmModule } , but <nl> * they now has the option of adding the library project classes to their schema using <nl> * { @ code RealmConfiguration . addModule ( ) } . <nl> * <nl> - * TODO Reference the example project for library modules <nl> + * @ see < a href = " " > TODO Example of a project using modules < / a > <nl> * / <nl> @ Retention ( RetentionPolicy . RUNTIME ) <nl> @ Target ( ElementType . TYPE ) <nl> @ @ - 55 , 9 + 55 , 9 @ @ public @ interface RealmModule { <nl> <nl> / * * <nl> * Setting this to true will mark this module as a library module . This will prevent Realm from generating the <nl> - * { @ code DefaultRealmModule } containing all classes . This is required by libraries as not to intefer with Realms <nl> - * running in app code , but also means that all libraries using Realm must explicitly use a module and cannot rely <nl> - * on the default module being present . <nl> + * { @ code DefaultRealmModule } containing all classes . This is required by libraries so they do notintefer with <nl> + * Realms running in app code , but it also means that all libraries using Realm must explicitly use a module and <nl> + * cannot rely on the default module being present . <nl> * <nl> * Creating library modules and normal modules in the same project is not allowed and will result in the annotation <nl> * processor throwing an error . <nl> diff - - git a / realm / src / androidTest / java / io / realm / IOSRealmTests . java b / realm / src / androidTest / java / io / realm / IOSRealmTests . java <nl> index 23753be . . 3cefa97 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / IOSRealmTests . java <nl> + + + b / realm / src / androidTest / java / io / realm / IOSRealmTests . java <nl> @ @ - 18 , 12 + 18 , 10 @ @ public class IOSRealmTests extends AndroidTestCase { <nl> private static final String REALM _ NAME = " alltypes . realm " ; <nl> private Realm realm ; <nl> <nl> - private RealmConfiguration defaultConfiguration ; <nl> - <nl> @ Override <nl> protected void setUp ( ) throws Exception { <nl> super . setUp ( ) ; <nl> - defaultConfiguration = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + RealmConfiguration defaultConfiguration = new RealmConfiguration . Builder ( getContext ( ) ) <nl> . name ( REALM _ NAME ) <nl> . schema ( IOSAllTypes . class , IOSChild . class ) <nl> . build ( ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> index 85d3e56 . . 8c6a64d 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> @ @ - 51 , 7 + 51 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> try { <nl> Realm . setDefaultConfiguration ( null ) ; <nl> fail ( ) ; <nl> - } catch ( NullPointerException expected ) { <nl> + } catch ( IllegalArgumentException expected ) { <nl> } <nl> } <nl> <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> try { <nl> Realm . getInstance ( ( RealmConfiguration ) null ) ; <nl> fail ( ) ; <nl> - } catch ( NullPointerException expected ) { <nl> + } catch ( IllegalArgumentException expected ) { <nl> } <nl> } <nl> <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 80f332b . . 900facb 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 493 , 7 + 493 , 7 @ @ public final class Realm implements Closeable { <nl> * / <nl> public static Realm getInstance ( RealmConfiguration configuration ) { <nl> if ( configuration = = null ) { <nl> - throw new NullPointerException ( " A non - null RealmConfiguration must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null RealmConfiguration must be provided " ) ; <nl> } <nl> return create ( configuration ) ; <nl> } <nl> @ @ - 506 , 7 + 506 , 7 @ @ public final class Realm implements Closeable { <nl> * / <nl> public static void setDefaultConfiguration ( RealmConfiguration configuration ) { <nl> if ( configuration = = null ) { <nl> - throw new NullPointerException ( " A non - null RealmConfiguration must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null RealmConfiguration must be provided " ) ; <nl> } <nl> defaultConfiguration = configuration ; <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> index b65a211 . . eb0eaf8 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 37 , 7 + 37 , 7 @ @ import io . realm . internal . modules . FilterableMediator ; <nl> * Instances of a RealmConfiguration can only created by using the { @ link io . realm . RealmConfiguration . Builder } and calling <nl> * its { @ link io . realm . RealmConfiguration . Builder # build ( ) } method . <nl> * <nl> - * A commonly used RealmConfiguration can easily accessed by first saving it as <nl> + * A commonly used RealmConfiguration can easily be accessed by first saving it as <nl> * { @ link Realm # setDefaultConfiguration ( RealmConfiguration ) } and then using { @ link io . realm . Realm # getDefaultInstance ( ) } . <nl> * <nl> * A minimal configuration can be created using : <nl> @ @ - 47 , 7 + 47 , 7 @ @ import io . realm . internal . modules . FilterableMediator ; <nl> * This will create a RealmConfiguration with the following properties <nl> * - Realm file is called " default . realm " <nl> * - It is saved in Context . getFilesDir ( ) <nl> - * - It has it ' s schema version set to 0 . <nl> + * - It has its schema version set to 0 . <nl> * / <nl> public class RealmConfiguration { <nl> <nl> @ @ - 193 , 7 + 193 , 7 @ @ public class RealmConfiguration { <nl> private HashSet < Class < ? extends RealmObject > > debugSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; <nl> <nl> / * * <nl> - * Create an instance of the Builder for the RealmConfiguration . <nl> + * Creates an instance of the Builder for the RealmConfiguration . <nl> * The Realm file will be saved in the provided folder . <nl> * <nl> * @ param folder Folder to save Realm file in . Folder must be writable . <nl> @ @ - 205 , 7 + 205 , 7 @ @ public class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Create an instance of the Builder for the RealmConfiguration . <nl> + * Creates an instance of the Builder for the RealmConfiguration . <nl> * <nl> * This will use the apps own internal directory for storing the Realm file . This does not require any <nl> * additional permissions . The default location is { @ code / data / data / < packagename > / files } , but can <nl> @ @ - 243 , 7 + 243 , 7 @ @ public class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Set the filename for the Realm . <nl> + * Sets the filename for the Realm . <nl> * / <nl> public Builder name ( String filename ) { <nl> if ( filename = = null | | filename . isEmpty ( ) ) { <nl> @ @ - 255 , 7 + 255 , 7 @ @ public class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Set the 64 bit key used to encrypt and decrypt the Realm file . <nl> + * Sets the 64 bit key used to encrypt and decrypt the Realm file . <nl> * / <nl> public Builder encryptionKey ( byte [ ] key ) { <nl> if ( key = = null ) { <nl> @ @ - 269 , 7 + 269 , 7 @ @ public class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Set the schema version of the Realm . This must be equal to or higher than the schema version of the existing <nl> + * Sets the schema version of the Realm . This must be equal to or higher than the schema version of the existing <nl> * Realm file , if any . If the schema version is higher than the already existing Realm , a migration is needed . <nl> * <nl> * If no migration code is provided , Realm will throw a { @ link io . realm . exceptions . RealmMigrationNeededException } . <nl> @ @ - 298 , 9 + 298 , 9 @ @ public class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Setting this will change the behavior of migrations . If a <nl> - * { @ link io . realm . exceptions . RealmMigrationNeededException } should be thrown , instead the on - disc <nl> - * Realm will be cleared and recreated with the new Realm schema . <nl> + * Setting this will change the behavior of how migration exceptions are handled . Instead of throwing a <nl> + * { @ link io . realm . exceptions . RealmMigrationNeededException } the on - disc Realm will be cleared and recreated <nl> + * with the new Realm schema . <nl> * <nl> * < bold > WARNING ! < / bold > This will result in loss of data . <nl> * / <nl> diff - - git a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java b / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java <nl> index 89016c3 . . 3c5784c 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java <nl> + + + b / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> / * <nl> - * Copyright 2014 Realm Inc . <nl> + * Copyright 2015 Realm Inc . <nl> * <nl> * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> * you may not use this file except in compliance with the License .

TEST DIFF:
diff - - git a / CONTRIBUTING . md b / CONTRIBUTING . md 
 index ffba767 . . ae1a793 100644 
 - - - a / CONTRIBUTING . md 
 + + + b / CONTRIBUTING . md 
 @ @ - 146 , 6 + 146 , 13 @ @ All public classes and methods must have Javadoc describing their purpose . 
 / * * 
 * Checks if given field is equal to the provided value . 
 * 
 + * < pre > 
 + * { @ code 
 + * / / A multi - line code sample should be formatted like this . 
 + * / / Please wrap the code element in a < pre > tag . 
 + * } 
 + * < / pre > 
 + * 
 * @ param fieldName the field to compare . 
 * @ param fieldValue the value to compare with . 
 * @ param caseSensitive if { @ code true } , substring matching is case sensitive . Setting this to { @ code false } works for English locale characters only . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmMigration . java b / realm / realm - library / src / main / java / io / realm / RealmMigration . java 
 index 2b4ce31 . . 70ec9df 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmMigration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmMigration . java 
 @ @ - 24 , 6 + 24 , 7 @ @ package io . realm ; 
 * To support migrations from any previous schemaVersion to the newest , the following pattern is recommended when 
 * writing a migration : 
 * 
 + * < pre > 
 * { @ code 
 * public class CustomMigration implements RealmMigration { 
 * \ @ Override 
 @ @ - 46 , 6 + 47 , 7 @ @ package io . realm ; 
 * } 
 * } 
 * } 
 + * < / pre > 
 * 
 * During development when RealmObject classes can change frequently , it is possible to use 
 * { @ link io . realm . Realm # deleteRealm ( RealmConfiguration ) } . This will delete the database file and eliminate the need for

NEAREST DIFF:
diff - - git a / realm - annotations / src / main / java / io / realm / annotations / RealmModule . java b / realm - annotations / src / main / java / io / realm / annotations / RealmModule . java 
 index 3490e94 . . a6d2494 100644 
 - - - a / realm - annotations / src / main / java / io / realm / annotations / RealmModule . java 
 + + + b / realm - annotations / src / main / java / io / realm / annotations / RealmModule . java 
 @ @ - 23 , 14 + 23 , 14 @ @ import java . lang . annotation . RetentionPolicy ; 
 import java . lang . annotation . Target ; 
 
 / * * 
 - * By default a Realm can stores all RealmClasses in a project . However , if you want to restrict a Realm to contain only 
 + * By default a Realm can stores all RealmClasses in a project . However , if you want to restrict a Realm to only contain 
 * certain classes or want to share them between a library project and an app project you must use a RealmModule . 
 * < p > 
 * A RealmModule is a collection of RealmClasses that can be combined with other RealmModules to create the schema for a 
 * Realm . This makes it easier to control versioning and migration of those Realms . 
 * < p > 
 * A RealmModule can either be a library module or an app module . This distinction is made by setting 
 - * { @ code library = true } . As default Realm will automatically create a RealmModule called { @ code DefaulRealmModule } 
 + * { @ code library = true } . A default Realm will automatically create a RealmModule called { @ code DefaulRealmModule } 
 * that contains all RealmClasses in a project . This module will be an app module and is automatically known by Realm . 
 * < p > 
 * This behavior is problematic when combining a library project and an app project that both uses Realm as 
 @ @ - 40 , 13 + 40 , 13 @ @ import java . lang . annotation . Target ; 
 * Library authors are reponsible for avoiding this conflict by creating a explicit library module where 
 * { @ code library = true } is set . This disable the generation of the DefaultRealmModule for the library project and 
 * allows the library to be included in the app project that also uses Realm . This means that library projects that uses 
 - * Realm internally are required to specify a explicit module using { @ code RealmConfiguration . setModule ( ) } . 
 + * Realm internally are required to specify a explicit module using { @ code RealmConfiguration . setModules ( ) } . 
 * < p > 
 * App developers are not required to specify any modules , as they implicitely use the { @ code DefaultRealmModule } , but 
 * they now has the option of adding the library project classes to their schema using 
 * { @ code RealmConfiguration . addModule ( ) } . 
 * 
 - * TODO Reference the example project for library modules 
 + * @ see < a href = " " > TODO Example of a project using modules < / a > 
 * / 
 @ Retention ( RetentionPolicy . RUNTIME ) 
 @ Target ( ElementType . TYPE ) 
 @ @ - 55 , 9 + 55 , 9 @ @ public @ interface RealmModule { 
 
 / * * 
 * Setting this to true will mark this module as a library module . This will prevent Realm from generating the 
 - * { @ code DefaultRealmModule } containing all classes . This is required by libraries as not to intefer with Realms 
 - * running in app code , but also means that all libraries using Realm must explicitly use a module and cannot rely 
 - * on the default module being present . 
 + * { @ code DefaultRealmModule } containing all classes . This is required by libraries so they do notintefer with 
 + * Realms running in app code , but it also means that all libraries using Realm must explicitly use a module and 
 + * cannot rely on the default module being present . 
 * 
 * Creating library modules and normal modules in the same project is not allowed and will result in the annotation 
 * processor throwing an error . 
 diff - - git a / realm / src / androidTest / java / io / realm / IOSRealmTests . java b / realm / src / androidTest / java / io / realm / IOSRealmTests . java 
 index 23753be . . 3cefa97 100644 
 - - - a / realm / src / androidTest / java / io / realm / IOSRealmTests . java 
 + + + b / realm / src / androidTest / java / io / realm / IOSRealmTests . java 
 @ @ - 18 , 12 + 18 , 10 @ @ public class IOSRealmTests extends AndroidTestCase { 
 private static final String REALM _ NAME = " alltypes . realm " ; 
 private Realm realm ; 
 
 - private RealmConfiguration defaultConfiguration ; 
 - 
 @ Override 
 protected void setUp ( ) throws Exception { 
 super . setUp ( ) ; 
 - defaultConfiguration = new RealmConfiguration . Builder ( getContext ( ) ) 
 + RealmConfiguration defaultConfiguration = new RealmConfiguration . Builder ( getContext ( ) ) 
 . name ( REALM _ NAME ) 
 . schema ( IOSAllTypes . class , IOSChild . class ) 
 . build ( ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 index 85d3e56 . . 8c6a64d 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 @ @ - 51 , 7 + 51 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 try { 
 Realm . setDefaultConfiguration ( null ) ; 
 fail ( ) ; 
 - } catch ( NullPointerException expected ) { 
 + } catch ( IllegalArgumentException expected ) { 
 } 
 } 
 
 @ @ - 67 , 7 + 67 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 try { 
 Realm . getInstance ( ( RealmConfiguration ) null ) ; 
 fail ( ) ; 
 - } catch ( NullPointerException expected ) { 
 + } catch ( IllegalArgumentException expected ) { 
 } 
 } 
 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 80f332b . . 900facb 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 493 , 7 + 493 , 7 @ @ public final class Realm implements Closeable { 
 * / 
 public static Realm getInstance ( RealmConfiguration configuration ) { 
 if ( configuration = = null ) { 
 - throw new NullPointerException ( " A non - null RealmConfiguration must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null RealmConfiguration must be provided " ) ; 
 } 
 return create ( configuration ) ; 
 } 
 @ @ - 506 , 7 + 506 , 7 @ @ public final class Realm implements Closeable { 
 * / 
 public static void setDefaultConfiguration ( RealmConfiguration configuration ) { 
 if ( configuration = = null ) { 
 - throw new NullPointerException ( " A non - null RealmConfiguration must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null RealmConfiguration must be provided " ) ; 
 } 
 defaultConfiguration = configuration ; 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java 
 index b65a211 . . eb0eaf8 100644 
 - - - a / realm / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 37 , 7 + 37 , 7 @ @ import io . realm . internal . modules . FilterableMediator ; 
 * Instances of a RealmConfiguration can only created by using the { @ link io . realm . RealmConfiguration . Builder } and calling 
 * its { @ link io . realm . RealmConfiguration . Builder # build ( ) } method . 
 * 
 - * A commonly used RealmConfiguration can easily accessed by first saving it as 
 + * A commonly used RealmConfiguration can easily be accessed by first saving it as 
 * { @ link Realm # setDefaultConfiguration ( RealmConfiguration ) } and then using { @ link io . realm . Realm # getDefaultInstance ( ) } . 
 * 
 * A minimal configuration can be created using : 
 @ @ - 47 , 7 + 47 , 7 @ @ import io . realm . internal . modules . FilterableMediator ; 
 * This will create a RealmConfiguration with the following properties 
 * - Realm file is called " default . realm " 
 * - It is saved in Context . getFilesDir ( ) 
 - * - It has it ' s schema version set to 0 . 
 + * - It has its schema version set to 0 . 
 * / 
 public class RealmConfiguration { 
 
 @ @ - 193 , 7 + 193 , 7 @ @ public class RealmConfiguration { 
 private HashSet < Class < ? extends RealmObject > > debugSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; 
 
 / * * 
 - * Create an instance of the Builder for the RealmConfiguration . 
 + * Creates an instance of the Builder for the RealmConfiguration . 
 * The Realm file will be saved in the provided folder . 
 * 
 * @ param folder Folder to save Realm file in . Folder must be writable . 
 @ @ - 205 , 7 + 205 , 7 @ @ public class RealmConfiguration { 
 } 
 
 / * * 
 - * Create an instance of the Builder for the RealmConfiguration . 
 + * Creates an instance of the Builder for the RealmConfiguration . 
 * 
 * This will use the apps own internal directory for storing the Realm file . This does not require any 
 * additional permissions . The default location is { @ code / data / data / < packagename > / files } , but can 
 @ @ - 243 , 7 + 243 , 7 @ @ public class RealmConfiguration { 
 } 
 
 / * * 
 - * Set the filename for the Realm . 
 + * Sets the filename for the Realm . 
 * / 
 public Builder name ( String filename ) { 
 if ( filename = = null | | filename . isEmpty ( ) ) { 
 @ @ - 255 , 7 + 255 , 7 @ @ public class RealmConfiguration { 
 } 
 
 / * * 
 - * Set the 64 bit key used to encrypt and decrypt the Realm file . 
 + * Sets the 64 bit key used to encrypt and decrypt the Realm file . 
 * / 
 public Builder encryptionKey ( byte [ ] key ) { 
 if ( key = = null ) { 
 @ @ - 269 , 7 + 269 , 7 @ @ public class RealmConfiguration { 
 } 
 
 / * * 
 - * Set the schema version of the Realm . This must be equal to or higher than the schema version of the existing 
 + * Sets the schema version of the Realm . This must be equal to or higher than the schema version of the existing 
 * Realm file , if any . If the schema version is higher than the already existing Realm , a migration is needed . 
 * 
 * If no migration code is provided , Realm will throw a { @ link io . realm . exceptions . RealmMigrationNeededException } . 
 @ @ - 298 , 9 + 298 , 9 @ @ public class RealmConfiguration { 
 } 
 
 / * * 
 - * Setting this will change the behavior of migrations . If a 
 - * { @ link io . realm . exceptions . RealmMigrationNeededException } should be thrown , instead the on - disc 
 - * Realm will be cleared and recreated with the new Realm schema . 
 + * Setting this will change the behavior of how migration exceptions are handled . Instead of throwing a 
 + * { @ link io . realm . exceptions . RealmMigrationNeededException } the on - disc Realm will be cleared and recreated 
 + * with the new Realm schema . 
 * 
 * < bold > WARNING ! < / bold > This will result in loss of data . 
 * / 
 diff - - git a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java b / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java 
 index 89016c3 . . 3c5784c 100644 
 - - - a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java 
 + + + b / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 / * 
 - * Copyright 2014 Realm Inc . 
 + * Copyright 2015 Realm Inc . 
 * 
 * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 * you may not use this file except in compliance with the License .
