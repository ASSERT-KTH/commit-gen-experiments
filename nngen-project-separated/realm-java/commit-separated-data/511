BLEU SCORE: 0.06567274736060397

TEST MSG: OS Results ' s first and last
GENERATED MSG: Results . sort ( )

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index c084f77 . . cf6fc49 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 102 , 6 + 102 , 35 @ @ Java _ io _ realm _ internal _ Collection _ nativeGetRow ( JNIEnv * env , jclass , jlong native <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> } <nl> <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeFirstRow ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto optional _ row = results - > first ( ) ; <nl> + if ( optional _ row ) { <nl> + return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; <nl> + } <nl> + } CATCH _ STD ( ) <nl> + return reinterpret _ cast < jlong > ( nullptr ) ; <nl> + <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ Collection _ nativeLastRow ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> + { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + auto optional _ row = results - > last ( ) ; <nl> + if ( optional _ row ) { <nl> + return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; <nl> + } <nl> + } CATCH _ STD ( ) <nl> + return reinterpret _ cast < jlong > ( nullptr ) ; <nl> + } <nl> + <nl> JNIEXPORT void JNICALL <nl> Java _ io _ realm _ internal _ Collection _ nativeClear ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 980b7cf . . 9feb82b 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 170 , 8 + 170 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> } <nl> <nl> private E firstImpl ( boolean shouldThrow , E defaultValue ) { <nl> - if ( ! isEmpty ( ) ) { <nl> - return get ( 0 ) ; <nl> + Row row = collection . firstUncheckedRow ( ) ; <nl> + <nl> + if ( row ! = null ) { <nl> + return realm . get ( classSpec , row ) ; <nl> } else { <nl> if ( shouldThrow ) { <nl> throw new IndexOutOfBoundsException ( " No results were found . " ) ; <nl> @ @ - 199 , 8 + 201 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> } <nl> <nl> private E lastImpl ( boolean shouldThrow , E defaultValue ) { <nl> - if ( ! isEmpty ( ) ) { <nl> - return get ( size ( ) - 1 ) ; <nl> + Row row = collection . lastUncheckedRow ( ) ; <nl> + <nl> + if ( row ! = null ) { <nl> + return realm . get ( classSpec , row ) ; <nl> } else { <nl> if ( shouldThrow ) { <nl> throw new IndexOutOfBoundsException ( " No results were found . " ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index 2f10c45 . . 7cd19d0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 152 , 6 + 152 , 14 @ @ public class Collection implements NativeObject { <nl> return UncheckedRow . getByRowPointer ( query . table , nativeGetRow ( nativePtr , index ) ) ; <nl> } <nl> <nl> + public UncheckedRow firstUncheckedRow ( ) { <nl> + return UncheckedRow . getByRowPointer ( query . table , nativeFirstRow ( nativePtr ) ) ; <nl> + } <nl> + <nl> + public UncheckedRow lastUncheckedRow ( ) { <nl> + return UncheckedRow . getByRowPointer ( query . table , nativeLastRow ( nativePtr ) ) ; <nl> + } <nl> + <nl> public Table getTable ( ) { <nl> return query . getTable ( ) ; <nl> } <nl> @ @ - 237 , 6 + 245 , 8 @ @ public class Collection implements NativeObject { <nl> long sortDescNativePtr , long distinctDescNativePtr ) ; <nl> private static native long nativeCreateSnapshot ( long nativePtr ) ; <nl> private static native long nativeGetRow ( long nativePtr , int index ) ; <nl> + private static native long nativeFirstRow ( long nativePtr ) ; <nl> + private static native long nativeLastRow ( long nativePtr ) ; <nl> private static native boolean nativeContains ( long nativePtr , long nativeRowPtr ) ; <nl> private static native void nativeClear ( long nativePtr ) ; <nl> private static native long nativeSize ( long nativePtr ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java b / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java <nl> new file mode 100644 <nl> index 0000000 . . 25fcf2c <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package io . realm . internal ; <nl> + <nl> + / * * <nl> + * Created by cc on 16 - 11 - 30 . <nl> + * / <nl> + <nl> + public class PendingRow implements Row { <nl> + }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index 99bfcfe . . fb08422 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 52 , 9 + 52 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong <nl> try { <nl> auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; <nl> auto query = reinterpret _ cast < Query * > ( query _ ptr ) ; <nl> - Results * results = sort _ desc _ native _ ptr ? <nl> - new Results ( shared _ realm , * query , * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ) : <nl> - new Results ( shared _ realm , * query , { } ) ; <nl> + auto results = sort _ desc _ native _ ptr ? <nl> + new Results ( shared _ realm , * query , * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ) : <nl> + new Results ( shared _ realm , * query , { } ) ; <nl> <nl> return reinterpret _ cast < jlong > ( results ) ; <nl> } CATCH _ STD ( ) <nl> @ @ - 167 , 28 + 167 , 12 @ @ Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong nat <nl> } <nl> <nl> JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlongArray colunm _ indices , <nl> - jbooleanArray jsort _ orders ) <nl> + Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlong sort _ desc _ native _ ptr ) <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - <nl> - JniBooleanArray order ( env , jsort _ orders ) ; <nl> - JniLongArray indices ( env , colunm _ indices ) ; <nl> - <nl> - if ( order . len ( ) ! = indices . len ( ) ) { <nl> - throw std : : invalid _ argument ( " Number of columns and sorting orders do not match . " ) ; <nl> - } <nl> - <nl> - std : : vector < bool > sort _ orders ; <nl> - std : : vector < std : : vector < size _ t > > sort _ indices ; <nl> - for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { <nl> - sort _ orders . push _ back ( to _ bool ( order [ i ] ) ) ; <nl> - sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; <nl> - } <nl> - <nl> - SortDescriptor sort _ descriptor ( * ( results - > get _ query ( ) . get _ table ( ) . get ( ) ) , sort _ indices , sort _ orders ) ; <nl> + auto sort _ descriptor = * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; <nl> auto sorted _ result = results - > sort ( std : : move ( sort _ descriptor ) ) ; <nl> return reinterpret _ cast < jlong > ( new Results ( std : : move ( sorted _ result ) ) ) ; <nl> } CATCH _ STD ( ) <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 5acdb45 . . 766e7a7 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . util . NoSuchElementException ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . Future ; <nl> <nl> + import io . realm . internal . SortDescriptor ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableQuery ; <nl> @ @ - 429 , 15 + 430 , 18 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> * / <nl> @ Override <nl> public RealmResults < E > sort ( String fieldName ) { <nl> - / * <nl> - if ( nativePtr = = 0 ) { <nl> - return this . sort ( fieldName , Sort . ASCENDING ) ; <nl> - } else { <nl> - long ptr = nativeSort ( nativePtr , new long [ ] { getColumnIndexForSort ( fieldName ) } , new boolean [ ] { Sort . ASCENDING . getValue ( ) } ) ; <nl> - return new RealmResults < E > ( realm , className , ptr ) ; <nl> + SortDescriptor sortDescriptor = <nl> + SortDescriptor . getInstanceForSort ( collection . getTable ( ) , fieldName , Sort . ASCENDING ) ; <nl> + try { <nl> + Collection sortedCollection = collection . sort ( sortDescriptor ) ; <nl> + if ( className ! = null ) { <nl> + return new RealmResults < E > ( realm , sortedCollection , className ) ; <nl> + } else { <nl> + return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; <nl> + } <nl> + } finally { <nl> + sortDescriptor . close ( ) ; <nl> } <nl> - * / <nl> - return null ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index 7b4e838 . . d0cdd46 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 75 , 6 + 75 , 7 @ @ public class Collection implements NativeObject { <nl> <nl> private final long nativePtr ; <nl> private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; <nl> + private final SharedRealm sharedRealm ; <nl> private final Context context ; <nl> private final TableQuery query ; <nl> private final List < Listener > listeners = new CopyOnWriteArrayList < Listener > ( ) ; <nl> @ @ - 104 , 6 + 105 , 7 @ @ public class Collection implements NativeObject { <nl> } <nl> <nl> public Collection ( SharedRealm sharedRealm , TableQuery query , SortDescriptor sortDescriptor ) { <nl> + this . sharedRealm = sharedRealm ; <nl> this . context = sharedRealm . context ; <nl> this . query = query ; <nl> <nl> @ @ - 116 , 6 + 118 , 15 @ @ public class Collection implements NativeObject { <nl> this . context . addReference ( this ) ; <nl> } <nl> <nl> + public Collection ( SharedRealm sharedRealm , TableQuery query , long nativePtr ) { <nl> + this . sharedRealm = sharedRealm ; <nl> + this . context = sharedRealm . context ; <nl> + this . query = query ; <nl> + this . nativePtr = nativePtr ; <nl> + <nl> + this . context . addReference ( this ) ; <nl> + } <nl> + <nl> @ Override <nl> public long getNativePtr ( ) { <nl> return nativePtr ; <nl> @ @ - 130 , 6 + 141 , 10 @ @ public class Collection implements NativeObject { <nl> return UncheckedRow . getByRowPointer ( query . table , nativeGetRow ( nativePtr , index ) ) ; <nl> } <nl> <nl> + public Table getTable ( ) { <nl> + return query . getTable ( ) ; <nl> + } <nl> + <nl> public Object aggregate ( Aggregate aggregateMethod , long columnIndex ) { <nl> return nativeAggregate ( nativePtr , columnIndex , aggregateMethod . getValue ( ) ) ; <nl> } <nl> @ @ - 143 , 6 + 158 , 10 @ @ public class Collection implements NativeObject { <nl> nativeClear ( nativePtr ) ; <nl> } <nl> <nl> + public Collection sort ( SortDescriptor sortDescriptor ) { <nl> + return new Collection ( sharedRealm , query , nativeSort ( nativePtr , sortDescriptor . getNativePtr ( ) ) ) ; <nl> + } <nl> + <nl> public void addListener ( Listener listener ) { <nl> if ( ! listeners . contains ( listener ) ) { <nl> listeners . add ( listener ) ; <nl> @ @ - 193 , 7 + 212 , 7 @ @ public class Collection implements NativeObject { <nl> private static native void nativeClear ( long nativePtr ) ; <nl> private static native long nativeSize ( long nativePtr ) ; <nl> private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; <nl> - private static native long nativeSort ( long nativePtr , long [ ] columnIndices , boolean [ ] orders ) ; <nl> + private static native long nativeSort ( long nativePtr , long sortDescNativePtr ) ; <nl> private native long nativeAddListener ( long nativePtr ) ; <nl> private static native long nativeNotificationTokenGetFinalizerPtr ( ) ; <nl> private static native long nativeNotificationTokenClose ( long nativePtr ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index c084f77 . . cf6fc49 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 102 , 6 + 102 , 35 @ @ Java _ io _ realm _ internal _ Collection _ nativeGetRow ( JNIEnv * env , jclass , jlong native 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 } 
 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeFirstRow ( JNIEnv * env , jclass , jlong native _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto optional _ row = results - > first ( ) ; 
 + if ( optional _ row ) { 
 + return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; 
 + } 
 + } CATCH _ STD ( ) 
 + return reinterpret _ cast < jlong > ( nullptr ) ; 
 + 
 + } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ Collection _ nativeLastRow ( JNIEnv * env , jclass , jlong native _ ptr ) 
 + { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + auto optional _ row = results - > last ( ) ; 
 + if ( optional _ row ) { 
 + return reinterpret _ cast < jlong > ( new Row ( std : : move ( optional _ row . value ( ) ) ) ) ; 
 + } 
 + } CATCH _ STD ( ) 
 + return reinterpret _ cast < jlong > ( nullptr ) ; 
 + } 
 + 
 JNIEXPORT void JNICALL 
 Java _ io _ realm _ internal _ Collection _ nativeClear ( JNIEnv * env , jclass , jlong native _ ptr ) 
 { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 980b7cf . . 9feb82b 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 170 , 8 + 170 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 } 
 
 private E firstImpl ( boolean shouldThrow , E defaultValue ) { 
 - if ( ! isEmpty ( ) ) { 
 - return get ( 0 ) ; 
 + Row row = collection . firstUncheckedRow ( ) ; 
 + 
 + if ( row ! = null ) { 
 + return realm . get ( classSpec , row ) ; 
 } else { 
 if ( shouldThrow ) { 
 throw new IndexOutOfBoundsException ( " No results were found . " ) ; 
 @ @ - 199 , 8 + 201 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 } 
 
 private E lastImpl ( boolean shouldThrow , E defaultValue ) { 
 - if ( ! isEmpty ( ) ) { 
 - return get ( size ( ) - 1 ) ; 
 + Row row = collection . lastUncheckedRow ( ) ; 
 + 
 + if ( row ! = null ) { 
 + return realm . get ( classSpec , row ) ; 
 } else { 
 if ( shouldThrow ) { 
 throw new IndexOutOfBoundsException ( " No results were found . " ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index 2f10c45 . . 7cd19d0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 152 , 6 + 152 , 14 @ @ public class Collection implements NativeObject { 
 return UncheckedRow . getByRowPointer ( query . table , nativeGetRow ( nativePtr , index ) ) ; 
 } 
 
 + public UncheckedRow firstUncheckedRow ( ) { 
 + return UncheckedRow . getByRowPointer ( query . table , nativeFirstRow ( nativePtr ) ) ; 
 + } 
 + 
 + public UncheckedRow lastUncheckedRow ( ) { 
 + return UncheckedRow . getByRowPointer ( query . table , nativeLastRow ( nativePtr ) ) ; 
 + } 
 + 
 public Table getTable ( ) { 
 return query . getTable ( ) ; 
 } 
 @ @ - 237 , 6 + 245 , 8 @ @ public class Collection implements NativeObject { 
 long sortDescNativePtr , long distinctDescNativePtr ) ; 
 private static native long nativeCreateSnapshot ( long nativePtr ) ; 
 private static native long nativeGetRow ( long nativePtr , int index ) ; 
 + private static native long nativeFirstRow ( long nativePtr ) ; 
 + private static native long nativeLastRow ( long nativePtr ) ; 
 private static native boolean nativeContains ( long nativePtr , long nativeRowPtr ) ; 
 private static native void nativeClear ( long nativePtr ) ; 
 private static native long nativeSize ( long nativePtr ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java b / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java 
 new file mode 100644 
 index 0000000 . . 25fcf2c 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / PendingRow . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package io . realm . internal ; 
 + 
 + / * * 
 + * Created by cc on 16 - 11 - 30 . 
 + * / 
 + 
 + public class PendingRow implements Row { 
 + }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index 99bfcfe . . fb08422 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 52 , 9 + 52 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong 
 try { 
 auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; 
 auto query = reinterpret _ cast < Query * > ( query _ ptr ) ; 
 - Results * results = sort _ desc _ native _ ptr ? 
 - new Results ( shared _ realm , * query , * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ) : 
 - new Results ( shared _ realm , * query , { } ) ; 
 + auto results = sort _ desc _ native _ ptr ? 
 + new Results ( shared _ realm , * query , * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ) : 
 + new Results ( shared _ realm , * query , { } ) ; 
 
 return reinterpret _ cast < jlong > ( results ) ; 
 } CATCH _ STD ( ) 
 @ @ - 167 , 28 + 167 , 12 @ @ Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong nat 
 } 
 
 JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlongArray colunm _ indices , 
 - jbooleanArray jsort _ orders ) 
 + Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlong sort _ desc _ native _ ptr ) 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - 
 - JniBooleanArray order ( env , jsort _ orders ) ; 
 - JniLongArray indices ( env , colunm _ indices ) ; 
 - 
 - if ( order . len ( ) ! = indices . len ( ) ) { 
 - throw std : : invalid _ argument ( " Number of columns and sorting orders do not match . " ) ; 
 - } 
 - 
 - std : : vector < bool > sort _ orders ; 
 - std : : vector < std : : vector < size _ t > > sort _ indices ; 
 - for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { 
 - sort _ orders . push _ back ( to _ bool ( order [ i ] ) ) ; 
 - sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; 
 - } 
 - 
 - SortDescriptor sort _ descriptor ( * ( results - > get _ query ( ) . get _ table ( ) . get ( ) ) , sort _ indices , sort _ orders ) ; 
 + auto sort _ descriptor = * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; 
 auto sorted _ result = results - > sort ( std : : move ( sort _ descriptor ) ) ; 
 return reinterpret _ cast < jlong > ( new Results ( std : : move ( sorted _ result ) ) ) ; 
 } CATCH _ STD ( ) 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 5acdb45 . . 766e7a7 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . util . NoSuchElementException ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . Future ; 
 
 + import io . realm . internal . SortDescriptor ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableQuery ; 
 @ @ - 429 , 15 + 430 , 18 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 * / 
 @ Override 
 public RealmResults < E > sort ( String fieldName ) { 
 - / * 
 - if ( nativePtr = = 0 ) { 
 - return this . sort ( fieldName , Sort . ASCENDING ) ; 
 - } else { 
 - long ptr = nativeSort ( nativePtr , new long [ ] { getColumnIndexForSort ( fieldName ) } , new boolean [ ] { Sort . ASCENDING . getValue ( ) } ) ; 
 - return new RealmResults < E > ( realm , className , ptr ) ; 
 + SortDescriptor sortDescriptor = 
 + SortDescriptor . getInstanceForSort ( collection . getTable ( ) , fieldName , Sort . ASCENDING ) ; 
 + try { 
 + Collection sortedCollection = collection . sort ( sortDescriptor ) ; 
 + if ( className ! = null ) { 
 + return new RealmResults < E > ( realm , sortedCollection , className ) ; 
 + } else { 
 + return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; 
 + } 
 + } finally { 
 + sortDescriptor . close ( ) ; 
 } 
 - * / 
 - return null ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index 7b4e838 . . d0cdd46 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 75 , 6 + 75 , 7 @ @ public class Collection implements NativeObject { 
 
 private final long nativePtr ; 
 private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; 
 + private final SharedRealm sharedRealm ; 
 private final Context context ; 
 private final TableQuery query ; 
 private final List < Listener > listeners = new CopyOnWriteArrayList < Listener > ( ) ; 
 @ @ - 104 , 6 + 105 , 7 @ @ public class Collection implements NativeObject { 
 } 
 
 public Collection ( SharedRealm sharedRealm , TableQuery query , SortDescriptor sortDescriptor ) { 
 + this . sharedRealm = sharedRealm ; 
 this . context = sharedRealm . context ; 
 this . query = query ; 
 
 @ @ - 116 , 6 + 118 , 15 @ @ public class Collection implements NativeObject { 
 this . context . addReference ( this ) ; 
 } 
 
 + public Collection ( SharedRealm sharedRealm , TableQuery query , long nativePtr ) { 
 + this . sharedRealm = sharedRealm ; 
 + this . context = sharedRealm . context ; 
 + this . query = query ; 
 + this . nativePtr = nativePtr ; 
 + 
 + this . context . addReference ( this ) ; 
 + } 
 + 
 @ Override 
 public long getNativePtr ( ) { 
 return nativePtr ; 
 @ @ - 130 , 6 + 141 , 10 @ @ public class Collection implements NativeObject { 
 return UncheckedRow . getByRowPointer ( query . table , nativeGetRow ( nativePtr , index ) ) ; 
 } 
 
 + public Table getTable ( ) { 
 + return query . getTable ( ) ; 
 + } 
 + 
 public Object aggregate ( Aggregate aggregateMethod , long columnIndex ) { 
 return nativeAggregate ( nativePtr , columnIndex , aggregateMethod . getValue ( ) ) ; 
 } 
 @ @ - 143 , 6 + 158 , 10 @ @ public class Collection implements NativeObject { 
 nativeClear ( nativePtr ) ; 
 } 
 
 + public Collection sort ( SortDescriptor sortDescriptor ) { 
 + return new Collection ( sharedRealm , query , nativeSort ( nativePtr , sortDescriptor . getNativePtr ( ) ) ) ; 
 + } 
 + 
 public void addListener ( Listener listener ) { 
 if ( ! listeners . contains ( listener ) ) { 
 listeners . add ( listener ) ; 
 @ @ - 193 , 7 + 212 , 7 @ @ public class Collection implements NativeObject { 
 private static native void nativeClear ( long nativePtr ) ; 
 private static native long nativeSize ( long nativePtr ) ; 
 private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; 
 - private static native long nativeSort ( long nativePtr , long [ ] columnIndices , boolean [ ] orders ) ; 
 + private static native long nativeSort ( long nativePtr , long sortDescNativePtr ) ; 
 private native long nativeAddListener ( long nativePtr ) ; 
 private static native long nativeNotificationTokenGetFinalizerPtr ( ) ; 
 private static native long nativeNotificationTokenClose ( long nativePtr ) ;
