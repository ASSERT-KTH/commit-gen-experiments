BLEU SCORE: 0.05341087579952926

TEST MSG: Tests for Session and SyncManager
GENERATED MSG: Remove old unmaintained tests .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTestobjectServer / java / io / realm / SessionTests . java b / realm / realm - library / src / androidTestobjectServer / java / io / realm / SessionTests . java <nl> new file mode 100644 <nl> index 0000000 . . 8554b22 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTestobjectServer / java / io / realm / SessionTests . java <nl> @ @ - 0 , 0 + 1 , 79 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm ; <nl> + <nl> + import android . content . Context ; <nl> + import android . support . test . InstrumentationRegistry ; <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> + <nl> + import org . junit . After ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import io . realm . internal . network . AuthenticationServer ; <nl> + import io . realm . internal . network . OkHttpAuthenticationServer ; <nl> + import io . realm . internal . objectserver . SyncSession ; <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> + <nl> + import static io . realm . util . SyncTestUtils . createTestUser ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNull ; <nl> + <nl> + @ RunWith ( AndroidJUnit4 . class ) <nl> + public class SessionTests { <nl> + <nl> + private static String REALM _ URI = " realm : / / objectserver . realm . io / ~ / default " ; <nl> + <nl> + private Context context ; <nl> + private AuthenticationServer authServer ; <nl> + private SyncConfiguration configuration ; <nl> + private User user ; <nl> + <nl> + @ Rule <nl> + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) { <nl> + context = InstrumentationRegistry . getContext ( ) ; <nl> + user = createTestUser ( ) ; <nl> + authServer = new OkHttpAuthenticationServer ( ) ; <nl> + configuration = new SyncConfiguration . Builder ( user , REALM _ URI ) . build ( ) ; <nl> + } <nl> + <nl> + @ After <nl> + public void tearDown ( ) throws Exception { <nl> + } <nl> + <nl> + @ Test <nl> + public void get _ syncValues ( ) { <nl> + SyncSession internalSession = new SyncSession ( <nl> + configuration , <nl> + authServer , <nl> + configuration . getUser ( ) . getSyncUser ( ) , <nl> + configuration . getSyncPolicy ( ) , <nl> + configuration . getErrorHandler ( ) <nl> + ) ; <nl> + Session session = new Session ( internalSession ) ; <nl> + <nl> + assertEquals ( " realm : / / objectserver . realm . io : 80 / JohnDoe / default " , session . getServerUrl ( ) . toString ( ) ) ; <nl> + assertEquals ( user , session . getUser ( ) ) ; <nl> + assertEquals ( configuration , session . getConfiguration ( ) ) ; <nl> + assertNull ( session . getState ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / androidTestobjectServer / java / io / realm / SyncManagerTests . java b / realm / realm - library / src / androidTestobjectServer / java / io / realm / SyncManagerTests . java <nl> new file mode 100644 <nl> index 0000000 . . 1deaf9b <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTestobjectServer / java / io / realm / SyncManagerTests . java <nl> @ @ - 0 , 0 + 1 , 174 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm ; <nl> + <nl> + import android . content . Context ; <nl> + import android . support . test . InstrumentationRegistry ; <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> + <nl> + import org . junit . After ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import org . junit . rules . ExpectedException ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import java . util . Collection ; <nl> + import java . util . Set ; <nl> + <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> + <nl> + import static io . realm . util . SyncTestUtils . createTestUser ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + @ RunWith ( AndroidJUnit4 . class ) <nl> + public class SyncManagerTests { <nl> + <nl> + private Context context ; <nl> + private UserStore userStore ; <nl> + <nl> + @ Rule <nl> + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> + <nl> + @ Rule <nl> + public final ExpectedException thrown = ExpectedException . none ( ) ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) { <nl> + context = InstrumentationRegistry . getContext ( ) ; <nl> + userStore = new UserStore ( ) { <nl> + @ Override <nl> + public User put ( String key , User user ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public User get ( String key ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public User remove ( String key ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public Collection < User > allUsers ( ) { <nl> + return null ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + @ After <nl> + public void tearDown ( ) { <nl> + } <nl> + <nl> + @ Test <nl> + public void init ( ) { <nl> + / / Realm . init ( ) calls SyncManager . init ( ) wihich will start a thread for the sync client <nl> + boolean found = false ; <nl> + Set < Thread > threads = Thread . getAllStackTraces ( ) . keySet ( ) ; <nl> + for ( Thread thread : threads ) { <nl> + if ( thread . getName ( ) . equals ( " RealmSyncClient " ) ) { <nl> + found = true ; <nl> + break ; <nl> + } <nl> + } <nl> + assertTrue ( found ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void set _ userStore ( ) { <nl> + SyncManager . setUserStore ( userStore ) ; <nl> + assertTrue ( userStore . equals ( SyncManager . getUserStore ( ) ) ) ; <nl> + } <nl> + <nl> + @ Test ( expected = IllegalArgumentException . class ) <nl> + public void set _ userStore _ null ( ) { <nl> + SyncManager . setUserStore ( null ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void authListener ( ) { <nl> + User user = createTestUser ( ) ; <nl> + final int [ ] counter = { 0 , 0 } ; <nl> + <nl> + AuthenticationListener authenticationListener = new AuthenticationListener ( ) { <nl> + @ Override <nl> + public void loggedIn ( User user ) { <nl> + counter [ 0 ] + + ; <nl> + } <nl> + <nl> + @ Override <nl> + public void loggedOut ( User user ) { <nl> + counter [ 1 ] + + ; <nl> + } <nl> + } ; <nl> + <nl> + SyncManager . addAuthenticationListener ( authenticationListener ) ; <nl> + SyncManager . notifyUserLoggedIn ( user ) ; <nl> + SyncManager . notifyUserLoggedOut ( user ) ; <nl> + assertEquals ( 1 , counter [ 0 ] ) ; <nl> + assertEquals ( 1 , counter [ 1 ] ) ; <nl> + } <nl> + <nl> + @ Test ( expected = IllegalArgumentException . class ) <nl> + public void authListener _ null ( ) { <nl> + SyncManager . addAuthenticationListener ( null ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void authListener _ remove ( ) { <nl> + User user = createTestUser ( ) ; <nl> + final int [ ] counter = { 0 , 0 } ; <nl> + <nl> + AuthenticationListener authenticationListener = new AuthenticationListener ( ) { <nl> + @ Override <nl> + public void loggedIn ( User user ) { <nl> + counter [ 0 ] + + ; <nl> + } <nl> + <nl> + @ Override <nl> + public void loggedOut ( User user ) { <nl> + counter [ 1 ] + + ; <nl> + } <nl> + } ; <nl> + <nl> + SyncManager . addAuthenticationListener ( authenticationListener ) ; <nl> + <nl> + SyncManager . removeAuthenticationListener ( authenticationListener ) ; <nl> + <nl> + SyncManager . notifyUserLoggedIn ( user ) ; <nl> + SyncManager . notifyUserLoggedOut ( user ) ; <nl> + <nl> + / / no listener to update counters <nl> + assertEquals ( 0 , counter [ 0 ] ) ; <nl> + assertEquals ( 0 , counter [ 1 ] ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void session ( ) { <nl> + User user = createTestUser ( ) ; <nl> + String url = " realm : / / objectserver . realm . io / default " ; <nl> + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) <nl> + . build ( ) ; <nl> + <nl> + Session session = SyncManager . getSession ( config ) ; <nl> + assertEquals ( user , session . getUser ( ) ) ; / / see also SessionTests <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java <nl> deleted file mode 100644 <nl> index b642205 . . 0000000 <nl> - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 195 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - / * TODO : translate to new object syntax <nl> - <nl> - <nl> - package io . realm . tests . typed ; <nl> - <nl> - import android . test . AndroidTestCase ; <nl> - <nl> - import java . util . Date ; <nl> - <nl> - import io . realm . tests . typed . entities . AllColumns ; <nl> - import io . realm . tests . typed . entities . User ; <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmList ; <nl> - import io . realm . RealmTableOrViewList ; <nl> - <nl> - public class RealmListTest extends AndroidTestCase { <nl> - <nl> - private Realm realm ; <nl> - <nl> - @ Override <nl> - public void setUp ( ) throws Exception { <nl> - super . setUp ( ) ; <nl> - <nl> - realm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; <nl> - <nl> - realm . clear ( ) ; <nl> - <nl> - } <nl> - <nl> - public void addObjectsToRealm ( ) { <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - for ( int i = 0 ; i < 10 ; i + + ) { <nl> - AllColumns allColumns = new AllColumns ( ) ; <nl> - <nl> - allColumns . setColumnString ( " dsfs " ) ; <nl> - allColumns . setColumnLong ( i ) ; <nl> - allColumns . setColumnFloat ( 1 . 1F ) ; <nl> - allColumns . setColumnDouble ( 1 . 1 ) ; <nl> - allColumns . setColumnBoolean ( true ) ; <nl> - allColumns . setColumnDate ( new Date ( ) ) ; <nl> - allColumns . setColumnBinary ( new byte [ 20 ] ) ; <nl> - <nl> - User user = new User ( ) ; <nl> - user . setId ( i ) ; <nl> - user . setName ( " Test User " ) ; <nl> - user . setEmail ( " user @ test . com " ) ; <nl> - <nl> - allColumns . setColumnRealmObject ( user ) ; <nl> - <nl> - realm . add ( allColumns ) ; <nl> - } <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } <nl> - <nl> - public void testAddObject ( ) { <nl> - <nl> - AllColumns allColumns = new AllColumns ( ) ; <nl> - <nl> - allColumns . setColumnString ( " dsfs " ) ; <nl> - allColumns . setColumnLong ( 1 ) ; <nl> - allColumns . setColumnFloat ( 1 . 1F ) ; <nl> - allColumns . setColumnDouble ( 1 . 1 ) ; <nl> - allColumns . setColumnBoolean ( true ) ; <nl> - allColumns . setColumnDate ( new Date ( ) ) ; <nl> - allColumns . setColumnBinary ( new byte [ 20 ] ) ; <nl> - <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - RealmTableOrViewList < AllColumns > list = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - assertEquals ( 0 , list . size ( ) ) ; <nl> - <nl> - try { <nl> - list . add ( allColumns ) ; <nl> - fail ( " Should throw UnsupportedOperationException " ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } catch ( UnsupportedOperationException e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - <nl> - } <nl> - <nl> - public void testAllObjects ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - assertEquals ( 10 , allColumnsList . size ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testGetObjects ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - assertEquals ( 5 , allColumnsList . get ( 5 ) . getColumnLong ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testGetFirstObject ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - assertEquals ( 0 , allColumnsList . first ( ) . getColumnLong ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testGetLastObject ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - assertEquals ( 9 , allColumnsList . last ( ) . getColumnLong ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testRemoveByIndex ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - try { <nl> - allColumnsList . remove ( 5 ) ; <nl> - fail ( " Should throw UnsupportedOperationException " ) ; <nl> - realm . commitTransaction ( ) ; <nl> - } catch ( UnsupportedOperationException e ) { <nl> - } <nl> - <nl> - } <nl> - <nl> - public void testRemoveByObject ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - try { <nl> - <nl> - allColumnsList . remove ( allColumnsList . get ( 5 ) ) ; <nl> - fail ( " Should throw UnsupportedOperationException " ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } catch ( UnsupportedOperationException e ) { <nl> - } <nl> - <nl> - } <nl> - <nl> - public void testQuery ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - RealmList all = realm . where ( AllColumns . class ) . greaterThan ( " columnlong " , 0 ) . findAll ( ) ; <nl> - <nl> - assertEquals ( 9 , all . size ( ) ) ; <nl> - <nl> - RealmList result = all . where ( ) . lessThan ( " columnlong " , 5 ) . findAll ( ) ; <nl> - <nl> - assertEquals ( 4 , result . size ( ) ) ; <nl> - <nl> - } <nl> - <nl> - } <nl> - * / <nl> diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java <nl> deleted file mode 100644 <nl> index a886cd8 . . 0000000 <nl> - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 267 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - / * TODO : translate to new object syntax <nl> - <nl> - <nl> - package io . realm . tests . typed ; <nl> - <nl> - import android . test . AndroidTestCase ; <nl> - <nl> - import java . util . Date ; <nl> - <nl> - import io . realm . tests . typed . entities . AllColumns ; <nl> - import io . realm . tests . typed . entities . Dog ; <nl> - import io . realm . tests . typed . entities . User ; <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmArrayList ; <nl> - import io . realm . RealmChangeListener ; <nl> - import io . realm . RealmList ; <nl> - <nl> - <nl> - public class RealmTest extends AndroidTestCase { <nl> - <nl> - private Realm realm ; <nl> - <nl> - @ Override <nl> - public void setUp ( ) throws Exception { <nl> - realm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; <nl> - <nl> - realm . clear ( ) ; <nl> - } <nl> - <nl> - <nl> - public void realm ( ) { <nl> - <nl> - realm . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - System . out . println ( " Realm changed " ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - try { <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - / / Insert <nl> - for ( int i = 0 ; i < 120 ; i + + ) { <nl> - <nl> - User user = realm . getInstance ( User . class ) ; <nl> - <nl> - user . setId ( i ) ; <nl> - user . setName ( " Rasmus " ) ; <nl> - user . setEmail ( " ra @ realm . io " ) ; <nl> - <nl> - user . setId ( 10 ) ; <nl> - <nl> - } <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } catch ( Throwable t ) { <nl> - t . printStackTrace ( ) ; <nl> - } <nl> - <nl> - RealmList < User > users = realm . where ( User . class ) . findAll ( ) ; <nl> - <nl> - <nl> - / / Get <nl> - User user1 = users . get ( 100 ) ; <nl> - assertEquals ( " Rasmus " , user1 . getName ( ) ) ; <nl> - <nl> - <nl> - try { <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - users = realm . where ( User . class ) . findAll ( ) ; <nl> - user1 = users . get ( 100 ) ; <nl> - <nl> - user1 . setName ( " TestName " ) ; <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } catch ( Throwable t ) { <nl> - } <nl> - <nl> - users = realm . where ( User . class ) . findAll ( ) ; <nl> - <nl> - / / Get <nl> - user1 = users . get ( 100 ) ; <nl> - <nl> - assertEquals ( " TestName " , user1 . getName ( ) ) ; <nl> - <nl> - assertEquals ( 120 , users . size ( ) ) ; <nl> - <nl> - / / Iterable <nl> - for ( User user : users ) { <nl> - System . out . println ( user . getId ( ) ) ; <nl> - } <nl> - <nl> - <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - users = realm . where ( User . class ) . findAll ( ) ; <nl> - user1 = users . get ( 100 ) ; <nl> - user1 . setId ( 100 ) ; <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - <nl> - <nl> - / / Query <nl> - RealmList < User > results = realm . where ( User . class ) . equalTo ( " id " , 10 ) . findAll ( ) ; <nl> - <nl> - assertEquals ( 119 , results . size ( ) ) ; <nl> - assertEquals ( 10 , results . get ( 0 ) . getId ( ) ) ; <nl> - <nl> - } <nl> - <nl> - <nl> - public void testCreate ( ) { <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - AllColumns obj = realm . getInstance ( AllColumns . class ) ; <nl> - <nl> - obj . setColumnString ( " dsfs " ) ; <nl> - obj . setColumnLong ( 1 ) ; <nl> - obj . setColumnFloat ( 1 . 1F ) ; <nl> - obj . setColumnDouble ( 1 . 1 ) ; <nl> - obj . setColumnBoolean ( true ) ; <nl> - obj . setColumnDate ( new Date ( ) ) ; <nl> - obj . setColumnBinary ( new byte [ 20 ] ) ; <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - RealmList < AllColumns > result = realm . where ( AllColumns . class ) . findAll ( ) ; <nl> - <nl> - assertEquals ( 1 , result . size ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testAdd ( ) { <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - AllColumns obj = new AllColumns ( ) ; <nl> - <nl> - obj . setColumnString ( " dsfs " ) ; <nl> - obj . setColumnLong ( 1 ) ; <nl> - obj . setColumnFloat ( 1 . 1F ) ; <nl> - obj . setColumnDouble ( 1 . 1 ) ; <nl> - obj . setColumnBoolean ( true ) ; <nl> - obj . setColumnDate ( new Date ( ) ) ; <nl> - obj . setColumnBinary ( new byte [ 20 ] ) ; <nl> - <nl> - User user = new User ( ) ; <nl> - user . setName ( " Rasmus " ) ; <nl> - user . setEmail ( " ra @ realm . io " ) ; <nl> - user . setId ( 0 ) ; <nl> - <nl> - obj . setColumnRealmObject ( user ) ; <nl> - <nl> - realm . add ( obj ) ; <nl> - <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - assertEquals ( 1 , realm . allObjects ( AllColumns . class ) . size ( ) ) ; <nl> - assertEquals ( 1 , realm . allObjects ( User . class ) . size ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testLinkList ( ) { <nl> - <nl> - User user1 = new User ( ) ; <nl> - user1 . setName ( " Rasmus " ) ; <nl> - user1 . setEmail ( " ra @ realm . io " ) ; <nl> - user1 . setId ( 0 ) ; <nl> - <nl> - User user2 = new User ( ) ; <nl> - user2 . setName ( " Morten " ) ; <nl> - user2 . setEmail ( " mk @ realm . io " ) ; <nl> - user2 . setId ( 1 ) ; <nl> - <nl> - RealmList < User > users = new RealmArrayList < User > ( ) ; <nl> - users . add ( user1 ) ; <nl> - users . add ( user2 ) ; <nl> - <nl> - assertEquals ( false , realm . contains ( Dog . class ) ) ; <nl> - assertEquals ( false , realm . contains ( User . class ) ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - Dog dog = realm . getInstance ( Dog . class ) ; <nl> - dog . setName ( " Fido " ) ; <nl> - dog . setOwners ( users ) ; <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - Dog fido = realm . allObjects ( Dog . class ) . first ( ) ; <nl> - <nl> - assertEquals ( " Fido " , fido . getName ( ) ) ; <nl> - <nl> - RealmList < User > owners = fido . getOwners ( ) ; <nl> - <nl> - assertEquals ( " Rasmus " , owners . get ( 0 ) . getName ( ) ) ; <nl> - <nl> - <nl> - <nl> - <nl> - assertEquals ( 1 , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> - assertEquals ( 2 , realm . allObjects ( User . class ) . size ( ) ) ; <nl> - <nl> - <nl> - Dog vuf = new Dog ( ) ; <nl> - vuf . setName ( " Vuf " ) ; <nl> - vuf . getOwners ( ) . add ( user1 ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - realm . add ( vuf ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - assertEquals ( 2 , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> - assertEquals ( 2 , realm . allObjects ( User . class ) . size ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testMigration ( ) { <nl> - * / <nl> - / * <nl> - realm . ensureRealmAtVersion ( 2 , new RealmMigration ( ) { <nl> - @ Override <nl> - public void execute ( Realm realm , int version ) { <nl> - <nl> - Table table = realm . getTable ( User . class ) ; <nl> - <nl> - if ( realm . getVersion ( ) < 1 ) { <nl> - table . addColumn ( ColumnType . STRING , " newStringCol " ) ; <nl> - } <nl> - <nl> - if ( realm . getVersion ( ) < 2 ) { <nl> - table . removeColumn ( table . getColumnIndex ( " newStringCol " ) ) ; <nl> - } <nl> - <nl> - realm . setVersion ( version ) ; <nl> - <nl> - } <nl> - } ) ; <nl> - * / / * <nl> - <nl> - } <nl> - <nl> - } <nl> - * /

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTestobjectServer / java / io / realm / SessionTests . java b / realm / realm - library / src / androidTestobjectServer / java / io / realm / SessionTests . java 
 new file mode 100644 
 index 0000000 . . 8554b22 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTestobjectServer / java / io / realm / SessionTests . java 
 @ @ - 0 , 0 + 1 , 79 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm ; 
 + 
 + import android . content . Context ; 
 + import android . support . test . InstrumentationRegistry ; 
 + import android . support . test . runner . AndroidJUnit4 ; 
 + 
 + import org . junit . After ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import io . realm . internal . network . AuthenticationServer ; 
 + import io . realm . internal . network . OkHttpAuthenticationServer ; 
 + import io . realm . internal . objectserver . SyncSession ; 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 + 
 + import static io . realm . util . SyncTestUtils . createTestUser ; 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNull ; 
 + 
 + @ RunWith ( AndroidJUnit4 . class ) 
 + public class SessionTests { 
 + 
 + private static String REALM _ URI = " realm : / / objectserver . realm . io / ~ / default " ; 
 + 
 + private Context context ; 
 + private AuthenticationServer authServer ; 
 + private SyncConfiguration configuration ; 
 + private User user ; 
 + 
 + @ Rule 
 + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 + 
 + @ Before 
 + public void setUp ( ) { 
 + context = InstrumentationRegistry . getContext ( ) ; 
 + user = createTestUser ( ) ; 
 + authServer = new OkHttpAuthenticationServer ( ) ; 
 + configuration = new SyncConfiguration . Builder ( user , REALM _ URI ) . build ( ) ; 
 + } 
 + 
 + @ After 
 + public void tearDown ( ) throws Exception { 
 + } 
 + 
 + @ Test 
 + public void get _ syncValues ( ) { 
 + SyncSession internalSession = new SyncSession ( 
 + configuration , 
 + authServer , 
 + configuration . getUser ( ) . getSyncUser ( ) , 
 + configuration . getSyncPolicy ( ) , 
 + configuration . getErrorHandler ( ) 
 + ) ; 
 + Session session = new Session ( internalSession ) ; 
 + 
 + assertEquals ( " realm : / / objectserver . realm . io : 80 / JohnDoe / default " , session . getServerUrl ( ) . toString ( ) ) ; 
 + assertEquals ( user , session . getUser ( ) ) ; 
 + assertEquals ( configuration , session . getConfiguration ( ) ) ; 
 + assertNull ( session . getState ( ) ) ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / androidTestobjectServer / java / io / realm / SyncManagerTests . java b / realm / realm - library / src / androidTestobjectServer / java / io / realm / SyncManagerTests . java 
 new file mode 100644 
 index 0000000 . . 1deaf9b 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTestobjectServer / java / io / realm / SyncManagerTests . java 
 @ @ - 0 , 0 + 1 , 174 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm ; 
 + 
 + import android . content . Context ; 
 + import android . support . test . InstrumentationRegistry ; 
 + import android . support . test . runner . AndroidJUnit4 ; 
 + 
 + import org . junit . After ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + import org . junit . rules . ExpectedException ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import java . util . Collection ; 
 + import java . util . Set ; 
 + 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 + 
 + import static io . realm . util . SyncTestUtils . createTestUser ; 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + @ RunWith ( AndroidJUnit4 . class ) 
 + public class SyncManagerTests { 
 + 
 + private Context context ; 
 + private UserStore userStore ; 
 + 
 + @ Rule 
 + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 + 
 + @ Rule 
 + public final ExpectedException thrown = ExpectedException . none ( ) ; 
 + 
 + @ Before 
 + public void setUp ( ) { 
 + context = InstrumentationRegistry . getContext ( ) ; 
 + userStore = new UserStore ( ) { 
 + @ Override 
 + public User put ( String key , User user ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public User get ( String key ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public User remove ( String key ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public Collection < User > allUsers ( ) { 
 + return null ; 
 + } 
 + } ; 
 + } 
 + 
 + @ After 
 + public void tearDown ( ) { 
 + } 
 + 
 + @ Test 
 + public void init ( ) { 
 + / / Realm . init ( ) calls SyncManager . init ( ) wihich will start a thread for the sync client 
 + boolean found = false ; 
 + Set < Thread > threads = Thread . getAllStackTraces ( ) . keySet ( ) ; 
 + for ( Thread thread : threads ) { 
 + if ( thread . getName ( ) . equals ( " RealmSyncClient " ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + assertTrue ( found ) ; 
 + } 
 + 
 + @ Test 
 + public void set _ userStore ( ) { 
 + SyncManager . setUserStore ( userStore ) ; 
 + assertTrue ( userStore . equals ( SyncManager . getUserStore ( ) ) ) ; 
 + } 
 + 
 + @ Test ( expected = IllegalArgumentException . class ) 
 + public void set _ userStore _ null ( ) { 
 + SyncManager . setUserStore ( null ) ; 
 + } 
 + 
 + @ Test 
 + public void authListener ( ) { 
 + User user = createTestUser ( ) ; 
 + final int [ ] counter = { 0 , 0 } ; 
 + 
 + AuthenticationListener authenticationListener = new AuthenticationListener ( ) { 
 + @ Override 
 + public void loggedIn ( User user ) { 
 + counter [ 0 ] + + ; 
 + } 
 + 
 + @ Override 
 + public void loggedOut ( User user ) { 
 + counter [ 1 ] + + ; 
 + } 
 + } ; 
 + 
 + SyncManager . addAuthenticationListener ( authenticationListener ) ; 
 + SyncManager . notifyUserLoggedIn ( user ) ; 
 + SyncManager . notifyUserLoggedOut ( user ) ; 
 + assertEquals ( 1 , counter [ 0 ] ) ; 
 + assertEquals ( 1 , counter [ 1 ] ) ; 
 + } 
 + 
 + @ Test ( expected = IllegalArgumentException . class ) 
 + public void authListener _ null ( ) { 
 + SyncManager . addAuthenticationListener ( null ) ; 
 + } 
 + 
 + @ Test 
 + public void authListener _ remove ( ) { 
 + User user = createTestUser ( ) ; 
 + final int [ ] counter = { 0 , 0 } ; 
 + 
 + AuthenticationListener authenticationListener = new AuthenticationListener ( ) { 
 + @ Override 
 + public void loggedIn ( User user ) { 
 + counter [ 0 ] + + ; 
 + } 
 + 
 + @ Override 
 + public void loggedOut ( User user ) { 
 + counter [ 1 ] + + ; 
 + } 
 + } ; 
 + 
 + SyncManager . addAuthenticationListener ( authenticationListener ) ; 
 + 
 + SyncManager . removeAuthenticationListener ( authenticationListener ) ; 
 + 
 + SyncManager . notifyUserLoggedIn ( user ) ; 
 + SyncManager . notifyUserLoggedOut ( user ) ; 
 + 
 + / / no listener to update counters 
 + assertEquals ( 0 , counter [ 0 ] ) ; 
 + assertEquals ( 0 , counter [ 1 ] ) ; 
 + } 
 + 
 + @ Test 
 + public void session ( ) { 
 + User user = createTestUser ( ) ; 
 + String url = " realm : / / objectserver . realm . io / default " ; 
 + SyncConfiguration config = new SyncConfiguration . Builder ( user , url ) 
 + . build ( ) ; 
 + 
 + Session session = SyncManager . getSession ( config ) ; 
 + assertEquals ( user , session . getUser ( ) ) ; / / see also SessionTests 
 + } 
 + }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java 
 deleted file mode 100644 
 index b642205 . . 0000000 
 - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java 
 + + + / dev / null 
 @ @ - 1 , 195 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - / * TODO : translate to new object syntax 
 - 
 - 
 - package io . realm . tests . typed ; 
 - 
 - import android . test . AndroidTestCase ; 
 - 
 - import java . util . Date ; 
 - 
 - import io . realm . tests . typed . entities . AllColumns ; 
 - import io . realm . tests . typed . entities . User ; 
 - import io . realm . Realm ; 
 - import io . realm . RealmList ; 
 - import io . realm . RealmTableOrViewList ; 
 - 
 - public class RealmListTest extends AndroidTestCase { 
 - 
 - private Realm realm ; 
 - 
 - @ Override 
 - public void setUp ( ) throws Exception { 
 - super . setUp ( ) ; 
 - 
 - realm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; 
 - 
 - realm . clear ( ) ; 
 - 
 - } 
 - 
 - public void addObjectsToRealm ( ) { 
 - realm . beginTransaction ( ) ; 
 - 
 - for ( int i = 0 ; i < 10 ; i + + ) { 
 - AllColumns allColumns = new AllColumns ( ) ; 
 - 
 - allColumns . setColumnString ( " dsfs " ) ; 
 - allColumns . setColumnLong ( i ) ; 
 - allColumns . setColumnFloat ( 1 . 1F ) ; 
 - allColumns . setColumnDouble ( 1 . 1 ) ; 
 - allColumns . setColumnBoolean ( true ) ; 
 - allColumns . setColumnDate ( new Date ( ) ) ; 
 - allColumns . setColumnBinary ( new byte [ 20 ] ) ; 
 - 
 - User user = new User ( ) ; 
 - user . setId ( i ) ; 
 - user . setName ( " Test User " ) ; 
 - user . setEmail ( " user @ test . com " ) ; 
 - 
 - allColumns . setColumnRealmObject ( user ) ; 
 - 
 - realm . add ( allColumns ) ; 
 - } 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - } 
 - 
 - public void testAddObject ( ) { 
 - 
 - AllColumns allColumns = new AllColumns ( ) ; 
 - 
 - allColumns . setColumnString ( " dsfs " ) ; 
 - allColumns . setColumnLong ( 1 ) ; 
 - allColumns . setColumnFloat ( 1 . 1F ) ; 
 - allColumns . setColumnDouble ( 1 . 1 ) ; 
 - allColumns . setColumnBoolean ( true ) ; 
 - allColumns . setColumnDate ( new Date ( ) ) ; 
 - allColumns . setColumnBinary ( new byte [ 20 ] ) ; 
 - 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - RealmTableOrViewList < AllColumns > list = realm . allObjects ( AllColumns . class ) ; 
 - 
 - assertEquals ( 0 , list . size ( ) ) ; 
 - 
 - try { 
 - list . add ( allColumns ) ; 
 - fail ( " Should throw UnsupportedOperationException " ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 - } catch ( UnsupportedOperationException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - 
 - } 
 - 
 - public void testAllObjects ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - assertEquals ( 10 , allColumnsList . size ( ) ) ; 
 - 
 - } 
 - 
 - public void testGetObjects ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - assertEquals ( 5 , allColumnsList . get ( 5 ) . getColumnLong ( ) ) ; 
 - 
 - } 
 - 
 - public void testGetFirstObject ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - assertEquals ( 0 , allColumnsList . first ( ) . getColumnLong ( ) ) ; 
 - 
 - } 
 - 
 - public void testGetLastObject ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - assertEquals ( 9 , allColumnsList . last ( ) . getColumnLong ( ) ) ; 
 - 
 - } 
 - 
 - public void testRemoveByIndex ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - try { 
 - allColumnsList . remove ( 5 ) ; 
 - fail ( " Should throw UnsupportedOperationException " ) ; 
 - realm . commitTransaction ( ) ; 
 - } catch ( UnsupportedOperationException e ) { 
 - } 
 - 
 - } 
 - 
 - public void testRemoveByObject ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - try { 
 - 
 - allColumnsList . remove ( allColumnsList . get ( 5 ) ) ; 
 - fail ( " Should throw UnsupportedOperationException " ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 - } catch ( UnsupportedOperationException e ) { 
 - } 
 - 
 - } 
 - 
 - public void testQuery ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - RealmList all = realm . where ( AllColumns . class ) . greaterThan ( " columnlong " , 0 ) . findAll ( ) ; 
 - 
 - assertEquals ( 9 , all . size ( ) ) ; 
 - 
 - RealmList result = all . where ( ) . lessThan ( " columnlong " , 5 ) . findAll ( ) ; 
 - 
 - assertEquals ( 4 , result . size ( ) ) ; 
 - 
 - } 
 - 
 - } 
 - * / 
 diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java 
 deleted file mode 100644 
 index a886cd8 . . 0000000 
 - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java 
 + + + / dev / null 
 @ @ - 1 , 267 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - / * TODO : translate to new object syntax 
 - 
 - 
 - package io . realm . tests . typed ; 
 - 
 - import android . test . AndroidTestCase ; 
 - 
 - import java . util . Date ; 
 - 
 - import io . realm . tests . typed . entities . AllColumns ; 
 - import io . realm . tests . typed . entities . Dog ; 
 - import io . realm . tests . typed . entities . User ; 
 - import io . realm . Realm ; 
 - import io . realm . RealmArrayList ; 
 - import io . realm . RealmChangeListener ; 
 - import io . realm . RealmList ; 
 - 
 - 
 - public class RealmTest extends AndroidTestCase { 
 - 
 - private Realm realm ; 
 - 
 - @ Override 
 - public void setUp ( ) throws Exception { 
 - realm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; 
 - 
 - realm . clear ( ) ; 
 - } 
 - 
 - 
 - public void realm ( ) { 
 - 
 - realm . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - System . out . println ( " Realm changed " ) ; 
 - } 
 - } ) ; 
 - 
 - try { 
 - realm . beginTransaction ( ) ; 
 - 
 - / / Insert 
 - for ( int i = 0 ; i < 120 ; i + + ) { 
 - 
 - User user = realm . getInstance ( User . class ) ; 
 - 
 - user . setId ( i ) ; 
 - user . setName ( " Rasmus " ) ; 
 - user . setEmail ( " ra @ realm . io " ) ; 
 - 
 - user . setId ( 10 ) ; 
 - 
 - } 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - } catch ( Throwable t ) { 
 - t . printStackTrace ( ) ; 
 - } 
 - 
 - RealmList < User > users = realm . where ( User . class ) . findAll ( ) ; 
 - 
 - 
 - / / Get 
 - User user1 = users . get ( 100 ) ; 
 - assertEquals ( " Rasmus " , user1 . getName ( ) ) ; 
 - 
 - 
 - try { 
 - 
 - realm . beginTransaction ( ) ; 
 - users = realm . where ( User . class ) . findAll ( ) ; 
 - user1 = users . get ( 100 ) ; 
 - 
 - user1 . setName ( " TestName " ) ; 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - } catch ( Throwable t ) { 
 - } 
 - 
 - users = realm . where ( User . class ) . findAll ( ) ; 
 - 
 - / / Get 
 - user1 = users . get ( 100 ) ; 
 - 
 - assertEquals ( " TestName " , user1 . getName ( ) ) ; 
 - 
 - assertEquals ( 120 , users . size ( ) ) ; 
 - 
 - / / Iterable 
 - for ( User user : users ) { 
 - System . out . println ( user . getId ( ) ) ; 
 - } 
 - 
 - 
 - 
 - realm . beginTransaction ( ) ; 
 - users = realm . where ( User . class ) . findAll ( ) ; 
 - user1 = users . get ( 100 ) ; 
 - user1 . setId ( 100 ) ; 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - 
 - 
 - / / Query 
 - RealmList < User > results = realm . where ( User . class ) . equalTo ( " id " , 10 ) . findAll ( ) ; 
 - 
 - assertEquals ( 119 , results . size ( ) ) ; 
 - assertEquals ( 10 , results . get ( 0 ) . getId ( ) ) ; 
 - 
 - } 
 - 
 - 
 - public void testCreate ( ) { 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - AllColumns obj = realm . getInstance ( AllColumns . class ) ; 
 - 
 - obj . setColumnString ( " dsfs " ) ; 
 - obj . setColumnLong ( 1 ) ; 
 - obj . setColumnFloat ( 1 . 1F ) ; 
 - obj . setColumnDouble ( 1 . 1 ) ; 
 - obj . setColumnBoolean ( true ) ; 
 - obj . setColumnDate ( new Date ( ) ) ; 
 - obj . setColumnBinary ( new byte [ 20 ] ) ; 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - RealmList < AllColumns > result = realm . where ( AllColumns . class ) . findAll ( ) ; 
 - 
 - assertEquals ( 1 , result . size ( ) ) ; 
 - 
 - } 
 - 
 - public void testAdd ( ) { 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - AllColumns obj = new AllColumns ( ) ; 
 - 
 - obj . setColumnString ( " dsfs " ) ; 
 - obj . setColumnLong ( 1 ) ; 
 - obj . setColumnFloat ( 1 . 1F ) ; 
 - obj . setColumnDouble ( 1 . 1 ) ; 
 - obj . setColumnBoolean ( true ) ; 
 - obj . setColumnDate ( new Date ( ) ) ; 
 - obj . setColumnBinary ( new byte [ 20 ] ) ; 
 - 
 - User user = new User ( ) ; 
 - user . setName ( " Rasmus " ) ; 
 - user . setEmail ( " ra @ realm . io " ) ; 
 - user . setId ( 0 ) ; 
 - 
 - obj . setColumnRealmObject ( user ) ; 
 - 
 - realm . add ( obj ) ; 
 - 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - assertEquals ( 1 , realm . allObjects ( AllColumns . class ) . size ( ) ) ; 
 - assertEquals ( 1 , realm . allObjects ( User . class ) . size ( ) ) ; 
 - 
 - } 
 - 
 - public void testLinkList ( ) { 
 - 
 - User user1 = new User ( ) ; 
 - user1 . setName ( " Rasmus " ) ; 
 - user1 . setEmail ( " ra @ realm . io " ) ; 
 - user1 . setId ( 0 ) ; 
 - 
 - User user2 = new User ( ) ; 
 - user2 . setName ( " Morten " ) ; 
 - user2 . setEmail ( " mk @ realm . io " ) ; 
 - user2 . setId ( 1 ) ; 
 - 
 - RealmList < User > users = new RealmArrayList < User > ( ) ; 
 - users . add ( user1 ) ; 
 - users . add ( user2 ) ; 
 - 
 - assertEquals ( false , realm . contains ( Dog . class ) ) ; 
 - assertEquals ( false , realm . contains ( User . class ) ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - Dog dog = realm . getInstance ( Dog . class ) ; 
 - dog . setName ( " Fido " ) ; 
 - dog . setOwners ( users ) ; 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - Dog fido = realm . allObjects ( Dog . class ) . first ( ) ; 
 - 
 - assertEquals ( " Fido " , fido . getName ( ) ) ; 
 - 
 - RealmList < User > owners = fido . getOwners ( ) ; 
 - 
 - assertEquals ( " Rasmus " , owners . get ( 0 ) . getName ( ) ) ; 
 - 
 - 
 - 
 - 
 - assertEquals ( 1 , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 - assertEquals ( 2 , realm . allObjects ( User . class ) . size ( ) ) ; 
 - 
 - 
 - Dog vuf = new Dog ( ) ; 
 - vuf . setName ( " Vuf " ) ; 
 - vuf . getOwners ( ) . add ( user1 ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - realm . add ( vuf ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 - assertEquals ( 2 , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 - assertEquals ( 2 , realm . allObjects ( User . class ) . size ( ) ) ; 
 - 
 - } 
 - 
 - public void testMigration ( ) { 
 - * / 
 - / * 
 - realm . ensureRealmAtVersion ( 2 , new RealmMigration ( ) { 
 - @ Override 
 - public void execute ( Realm realm , int version ) { 
 - 
 - Table table = realm . getTable ( User . class ) ; 
 - 
 - if ( realm . getVersion ( ) < 1 ) { 
 - table . addColumn ( ColumnType . STRING , " newStringCol " ) ; 
 - } 
 - 
 - if ( realm . getVersion ( ) < 2 ) { 
 - table . removeColumn ( table . getColumnIndex ( " newStringCol " ) ) ; 
 - } 
 - 
 - realm . setVersion ( version ) ; 
 - 
 - } 
 - } ) ; 
 - * / / * 
 - 
 - } 
 - 
 - } 
 - * /
