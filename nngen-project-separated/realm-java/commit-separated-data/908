BLEU SCORE: 0.033864985683445356

TEST MSG: Added Realm parameter to factory , added explicit methods for dynamic variants
GENERATED MSG: Make Rx factory public .

TEST DIFF (one line): diff - - git a / realm / realm - jni / build . gradle b / realm / realm - jni / build . gradle <nl> index d133a93 . . d9cd494 100644 <nl> - - - a / realm / realm - jni / build . gradle <nl> + + + b / realm / realm - jni / build . gradle <nl> @ @ - 65 , 12 + 65 , 12 @ @ def toolchains = [ <nl> ] <nl> <nl> def targets = [ <nl> - new Target ( name : ' arm ' , jniFolder : ' armeabi ' , toolchain : toolchains . find { it . name = = ' arm ' } , cflags : [ ' - mthumb ' ] ) , <nl> - new Target ( name : ' arm - v7a ' , jniFolder : ' armeabi - v7a ' , toolchain : toolchains . find { it . name = = ' arm ' } , cflags : [ ' - mthumb ' , ' - march = armv7 - a ' , ' - mfloat - abi = softfp ' , ' - mfpu = vfpv3 - d16 ' ] ) , <nl> - new Target ( name : ' arm64 ' , jniFolder : ' arm64 - v8a ' , toolchain : toolchains . find { it . name = = ' arm64 ' } , cflags : [ ] ) , <nl> - new Target ( name : ' mips ' , jniFolder : ' mips ' , toolchain : toolchains . find { it . name = = ' mips ' } , cflags : [ ] ) , <nl> + / / new Target ( name : ' arm ' , jniFolder : ' armeabi ' , toolchain : toolchains . find { it . name = = ' arm ' } , cflags : [ ' - mthumb ' ] ) , <nl> + / / new Target ( name : ' arm - v7a ' , jniFolder : ' armeabi - v7a ' , toolchain : toolchains . find { it . name = = ' arm ' } , cflags : [ ' - mthumb ' , ' - march = armv7 - a ' , ' - mfloat - abi = softfp ' , ' - mfpu = vfpv3 - d16 ' ] ) , <nl> + / / new Target ( name : ' arm64 ' , jniFolder : ' arm64 - v8a ' , toolchain : toolchains . find { it . name = = ' arm64 ' } , cflags : [ ] ) , <nl> + / / new Target ( name : ' mips ' , jniFolder : ' mips ' , toolchain : toolchains . find { it . name = = ' mips ' } , cflags : [ ] ) , <nl> new Target ( name : ' x86 ' , jniFolder : ' x86 ' , toolchain : toolchains . find { it . name = = ' x86 ' } , cflags : [ ] ) , <nl> - new Target ( name : ' x86 _ 64 ' , jniFolder : ' x86 _ 64 ' , toolchain : toolchains . find { it . name = = ' x86 _ 64 ' } , cflags : [ ] ) <nl> + / / new Target ( name : ' x86 _ 64 ' , jniFolder : ' x86 _ 64 ' , toolchain : toolchains . find { it . name = = ' x86 _ 64 ' } , cflags : [ ] ) <nl> ] <nl> <nl> buildscript { <nl> diff - - git a / realm / realm - jni / src / io _ realm _ internal _ TableQuery . cpp b / realm / realm - jni / src / io _ realm _ internal _ TableQuery . cpp <nl> index d1c7245 . . f1b2176 100644 <nl> - - - a / realm / realm - jni / src / io _ realm _ internal _ TableQuery . cpp <nl> + + + b / realm / realm - jni / src / io _ realm _ internal _ TableQuery . cpp <nl> @ @ - 1726 , 3 + 1726 , 15 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeIsEmpty <nl> } <nl> } CATCH _ STD ( ) <nl> } <nl> + <nl> + / / queryPtr would be owned and released by this function <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeAcceptHandoverQuery <nl> + ( JNIEnv * env , jobject , jlong receiverSharedGroupPtr , jlong receiverReplicationPtr , jlong queryPtr ) <nl> + { <nl> + TR _ ENTER ( ) <nl> + try { <nl> + std : : unique _ ptr < Query > query = getHandoverQuery ( receiverSharedGroupPtr , receiverReplicationPtr , queryPtr ) ; <nl> + return reinterpret _ cast < jlong > ( query . release ( ) ) ; <nl> + } CATCH _ STD ( ) <nl> + return 0 ; <nl> + } <nl> diff - - git a / realm / realm - jni / src / io _ realm _ internal _ TableQuery . h b / realm / realm - jni / src / io _ realm _ internal _ TableQuery . h <nl> index 5f88ffb . . 9e79f20 100644 <nl> - - - a / realm / realm - jni / src / io _ realm _ internal _ TableQuery . h <nl> + + + b / realm / realm - jni / src / io _ realm _ internal _ TableQuery . h <nl> @ @ - 591 , 6 + 591 , 14 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeRemove <nl> JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeCloseQueryHandover <nl> ( JNIEnv * , jobject , jlong ) ; <nl> <nl> + / * <nl> + * Class : io _ realm _ internal _ TableQuery <nl> + * Method : nativeCloseQueryHandover <nl> + * Signature : ( JJJ ) J <nl> + * / <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeAcceptHandoverQuery <nl> + ( JNIEnv * , jlong , jlong , jlong ) ; <nl> + <nl> # ifdef _ _ cplusplus <nl> } <nl> # endif <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> index e493313 . . 04ec43b 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> @ @ - 2 , 12 + 2 , 16 @ @ package io . realm ; <nl> <nl> import android . test . AndroidTestCase ; <nl> <nl> + import java . util . List ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> + import rx . Scheduler ; <nl> import rx . Subscription ; <nl> import rx . functions . Action1 ; <nl> + import rx . functions . Func1 ; <nl> + import rx . schedulers . Schedulers ; <nl> <nl> public class RxJavaTests extends AndroidTestCase { <nl> <nl> @ @ - 220 , 6 + 224 , 31 @ @ public class RxJavaTests extends AndroidTestCase { <nl> dynamicRealm . close ( ) ; <nl> } <nl> <nl> + public void testRealmQueryObservable ( ) { <nl> + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . createObject ( AllTypes . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + Subscription subscription = realm . where ( AllTypes . class ) . asObservable ( ) <nl> + . map ( new Func1 < RealmQuery < AllTypes > , List < AllTypes > > ( ) { <nl> + @ Override <nl> + public List < AllTypes > call ( RealmQuery < AllTypes > query ) { <nl> + return query . findAll ( ) ; <nl> + } <nl> + } ) <nl> + . subscribeOn ( Schedulers . computation ( ) ) <nl> + . subscribe ( new Action1 < List < AllTypes > > ( ) { <nl> + @ Override <nl> + public void call ( List < AllTypes > allTypes ) { <nl> + assertEquals ( 1 , allTypes . size ( ) ) ; <nl> + subscribedNotified . set ( true ) ; <nl> + } <nl> + } ) ; <nl> + subscription . unsubscribe ( ) ; <nl> + assertTrue ( subscribedNotified . get ( ) ) ; <nl> + } <nl> + <nl> public void testUnsubscribe ( ) { <nl> final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> Subscription subscription = realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 2a21508 . . e6a2d17 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ import rx . Observable ; <nl> * @ see io . realm . Realm <nl> * @ see io . realm . DynamicRealm <nl> * / <nl> - public abstract class BaseRealm implements Closeable { <nl> + abstract class BaseRealm implements Closeable { <nl> protected static final long UNVERSIONED = - 1 ; <nl> private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; <nl> private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 32235bd . . f4a6aa4 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> + import java . lang . ref . WeakReference ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . util . ArrayList ; <nl> @ @ - 651 , 7 + 652 , 9 @ @ public final class Realm extends BaseRealm { <nl> checkIfValid ( ) ; <nl> Table table = getTable ( clazz ) ; <nl> long rowIndex = table . addEmptyRow ( ) ; <nl> - return get ( clazz , rowIndex ) ; <nl> + E object = get ( clazz , rowIndex ) ; <nl> + addToNotifiableRealmObjects ( object ) ; <nl> + return object ; <nl> } <nl> <nl> / * * <nl> @ @ - 1238 , 6 + 1241 , 7 @ @ public final class Realm extends BaseRealm { <nl> } <nl> <nl> / / Public because of migrations <nl> + @ Deprecated <nl> public Table getTable ( Class < ? extends RealmObject > clazz ) { <nl> Table table = classToTable . get ( clazz ) ; <nl> if ( table = = null ) { <nl> @ @ - 1248 , 6 + 1252 , 13 @ @ public final class Realm extends BaseRealm { <nl> return table ; <nl> } <nl> <nl> + / / add to the list of RealmObject to be notified after a commit <nl> + private < E extends RealmObject > void addToNotifiableRealmObjects ( E realmobject ) { <nl> + if ( handlerController ! = null ) { <nl> + handlerController . realmObjects . put ( new WeakReference < RealmObject > ( realmobject ) , null ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Returns the default Realm module . This module contains all Realm classes in the current project , but not those <nl> * from library or project dependencies . Realm classes in these should be exposed using their own module . <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 54c1ebf . . 21840a0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 272 , 7 + 272 , 19 @ @ public abstract class RealmObject < E extends RealmObject > { <nl> * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > <nl> * / <nl> public Observable < E > asObservable ( ) { <nl> - return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; <nl> + if ( realm instanceof Realm ) { <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + E obj = ( E ) this ; <nl> + return realm . configuration . getRxFactory ( ) . from ( ( Realm ) realm , obj ) ; <nl> + } else if ( realm instanceof DynamicRealm ) { <nl> + DynamicRealm dynamicRealm = ( DynamicRealm ) realm ; <nl> + DynamicRealmObject dynamicObject = ( DynamicRealmObject ) this ; <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + Observable < E > observable = ( Observable < E > ) realm . configuration . getRxFactory ( ) . from ( dynamicRealm , dynamicObject ) ; <nl> + return observable ; <nl> + } else { <nl> + throw new UnsupportedOperationException ( realm . getClass ( ) + " not supported " ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 8cd1d1b . . 650f890 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import io . realm . internal . TableView ; <nl> import io . realm . internal . async . ArgumentsHolder ; <nl> import io . realm . internal . async . QueryUpdateTask ; <nl> import io . realm . internal . log . RealmLog ; <nl> + import rx . Observable ; <nl> <nl> / * * <nl> * A RealmQuery encapsulates a query on a { @ link io . realm . Realm } or a { @ link io . realm . RealmResults } using the Builder <nl> @ @ - 55 , 7 + 56 , 7 @ @ import io . realm . internal . log . RealmLog ; <nl> * @ see Realm # where ( Class ) <nl> * @ see RealmResults # where ( ) <nl> * / <nl> - public class RealmQuery < E extends RealmObject > { <nl> + public class RealmQuery < E extends RealmObject > implements { <nl> <nl> private BaseRealm realm ; <nl> private Class < E > clazz ; <nl> @ @ - 126 , 6 + 127 , 27 @ @ public class RealmQuery < E extends RealmObject > { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Copies an existing query to another Realm instance . <nl> + * This method is threadsafe and can be used to copy a { @ link RealmQuery } between threads . <nl> + * <nl> + * @ param realm Realm to run the copied query on <nl> + * @ param query query to copy <nl> + * @ param < E > type of elements in the query <nl> + * @ return the copied query instance . <nl> + * / <nl> + public static < E extends RealmObject > RealmQuery < E > copyQuery ( Realm realm , RealmQuery < E > query ) { <nl> + RealmQuery < E > copiedQuery = new RealmQuery < E > ( realm , query . clazz ) ; <nl> + query . handoverTo ( copiedQuery ) ; <nl> + return copiedQuery ; <nl> + } <nl> + <nl> + public static RealmQuery < DynamicRealmObject > copyDynamicQuery ( DynamicRealm realm , RealmQuery < DynamicRealmObject > query ) { <nl> + RealmQuery < DynamicRealmObject > copiedQuery = new RealmQuery < DynamicRealmObject > ( realm , query . className ) ; <nl> + query . handoverTo ( copiedQuery ) ; <nl> + return copiedQuery ; <nl> + } <nl> + <nl> private RealmQuery ( Realm realm , Class < E > clazz ) { <nl> this . realm = realm ; <nl> this . clazz = clazz ; <nl> @ @ - 1885 , 6 + 1907 , 14 @ @ public class RealmQuery < E extends RealmObject > { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Move this query to another query object . That query object is allowed to be on another thread . <nl> + * / <nl> + private void handoverTo ( RealmQuery < E > copiedQuery ) { <nl> + long handoverQuery = query . handoverQuery ( realm . sharedGroupManager . getNativePointer ( ) ) ; <nl> + copiedQuery . query . acceptHandoverQuery ( handoverQuery ) ; <nl> + } <nl> + <nl> public ArgumentsHolder getArgument ( ) { <nl> return argumentsHolder ; <nl> } <nl> @ @ - 1897 , 4 + 1927 , 30 @ @ public class RealmQuery < E extends RealmObject > { <nl> long handoverQueryPointer ( ) { <nl> return query . handoverQuery ( realm . sharedGroupManager . getNativePointer ( ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * Returns an Rx Observable that emits the RealmQuery and then completes . <nl> + * <nl> + * @ return RxJava Observable <nl> + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> + * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > <nl> + * / <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public Observable < RealmQuery < E > > asObservable ( ) { <nl> + if ( realm instanceof Realm ) { <nl> + return realm . configuration . getRxFactory ( ) . from ( ( Realm ) realm , this ) ; <nl> + } else if ( realm instanceof DynamicRealm ) { <nl> + DynamicRealm dynamicRealm = ( DynamicRealm ) realm ; <nl> + RealmQuery < DynamicRealmObject > dynamicQuery = ( RealmQuery < DynamicRealmObject > ) this ; <nl> + @ SuppressWarnings ( " UnnecessaryLocalVariable " ) <nl> + Observable results = realm . configuration . getRxFactory ( ) . from ( dynamicRealm , dynamicQuery ) ; <nl> + return results ; <nl> + } else { <nl> + throw new UnsupportedOperationException ( realm . getClass ( ) + " not supported " ) ; <nl> + } <nl> + } <nl> + <nl> + public RealmQuery < E > clone ( ) { <nl> + return new RealmQuery < E > ( this ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index bd17130 . . 63ceb5d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 836 , 8 + 836 , 19 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . <nl> * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > <nl> * / <nl> + @ SuppressWarnings ( " unchecked " ) <nl> public Observable < RealmResults < E > > asObservable ( ) { <nl> - return realm . configuration . getRxFactory ( ) . from ( this ) ; <nl> + if ( realm instanceof Realm ) { <nl> + return realm . configuration . getRxFactory ( ) . from ( ( Realm ) realm , this ) ; <nl> + } else if ( realm instanceof DynamicRealm ) { <nl> + DynamicRealm dynamicRealm = ( DynamicRealm ) realm ; <nl> + RealmResults < DynamicRealmObject > dynamicResults = ( RealmResults < DynamicRealmObject > ) this ; <nl> + @ SuppressWarnings ( " UnnecessaryLocalVariable " ) <nl> + Observable results = realm . configuration . getRxFactory ( ) . from ( dynamicRealm , dynamicResults ) ; <nl> + return results ; <nl> + } else { <nl> + throw new UnsupportedOperationException ( realm . getClass ( ) + " not supported " ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> index 513a052 . . 2c4a3c2 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> @ @ - 59 , 6 + 59 , 13 @ @ public class TableQuery implements Closeable { <nl> this . origin = origin ; <nl> } <nl> <nl> + public TableQuery ( Context context , long recieverSharedGroupPtr , long receiverReplicationPtr , long handoverQueryPtr ) { <nl> + this . context = context ; <nl> + this . nativePtr = nativeAcceptHandoverQuery ( recieverSharedGroupPtr , receiverReplicationPtr , handoverQueryPtr ) ; <nl> + this . table = null ; <nl> + this . origin = null ; <nl> + validateQuery ( ) ; <nl> + } <nl> <nl> public void close ( ) { <nl> synchronized ( context ) { <nl> @ @ - 797 , 6 + 804 , 7 @ @ public class TableQuery implements Closeable { <nl> private native long nativeRemove ( long nativeQueryPtr , long start , long end , long limit ) ; <nl> private native long nativeImportHandoverTableViewIntoSharedGroup ( long handoverTableViewPtr , long callerSharedGroupPtr ) ; <nl> private native long nativeHandoverQuery ( long callerSharedGroupPtr , long nativeQueryPtr ) ; <nl> + private native long nativeAcceptHandoverQuery ( long receiverSharedGroupPtr , long reiceverNativeReplicationPtr , long nativeHandoverQueryPtr ) ; <nl> public static native long nativeFindAllSortedWithHandover ( long bgSharedGroupPtr , long nativeReplicationPtr , long nativeQueryPtr , long start , long end , long limit , long columnIndex , boolean ascending ) ; <nl> public static native long nativeFindAllWithHandover ( long bgSharedGroupPtr , long nativeReplicationPtr , long nativeQueryPtr , long start , long end , long limit ) ; <nl> public static native long nativeGetDistinctViewWithHandover ( long bgSharedGroupPtr , long nativeReplicationPtr , long nativeQueryPtr , long columnIndex ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java <nl> index 88919d3 . . d6c24e6 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java <nl> @ @ - 1 , 70 + 1 , 219 @ @ <nl> - package io . realm . rx ; <nl> - <nl> - import io . realm . DynamicRealm ; <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmList ; <nl> - import io . realm . RealmObject ; <nl> - import io . realm . RealmResults ; <nl> - import rx . Observable ; <nl> - <nl> - / * * <nl> - * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects <nl> - * before emitting them . This is effectively a snapshot of the Realm data at a given point in time . <nl> - * <nl> - * This has the following implications : <nl> - * <nl> - * - Increased memory usage , as all fields including references are copied to the Java heap . <nl> - * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm and the <nl> - * object will no longer automatically update either . <nl> - * - All guarantees of staying consistent with other data from persisted Realm objects are gone . <nl> - * - The object is no longer thread - confined and can be parsed between threads . <nl> - * <nl> - * @ see { @ link io . realm . Realm # copyFromRealm ( RealmObject ) } <nl> - * / <nl> - public class DetachedCopyObservableFactory implements RxObservableFactory { <nl> - <nl> - private final int maxDepth ; <nl> - <nl> - / * * <nl> - * Creates an instance of this factory class . Detached objects also copy all referenced objects . <nl> - * / <nl> - public DetachedCopyObservableFactory ( ) { <nl> - this ( Integer . MAX _ VALUE ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Creates an instance of this factory class . Detached copies only contain references up to { @ code maxDepth } away . <nl> - * <nl> - * @ param maxDepth maximum distance from root object that objects are copied . References above this limit will be <nl> - * { @ code null } . <nl> - * @ see io . realm . Realm # copyFromRealm ( RealmObject , int ) <nl> - * / <nl> - public DetachedCopyObservableFactory ( int maxDepth ) { <nl> - this . maxDepth = maxDepth ; <nl> - } <nl> - <nl> - @ Override <nl> - public Observable < Realm > from ( Realm realm ) { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public Observable < DynamicRealm > from ( DynamicRealm realm ) { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends RealmObject > Observable < E > from ( E object ) { <nl> - return null ; <nl> - } <nl> - } <nl> + / / package io . realm . rx ; <nl> + / / <nl> + / / import io . realm . DynamicRealm ; <nl> + / / import io . realm . DynamicRealmObject ; <nl> + / / import io . realm . Realm ; <nl> + / / import io . realm . RealmChangeListener ; <nl> + / / import io . realm . RealmList ; <nl> + / / import io . realm . RealmObject ; <nl> + / / import io . realm . RealmQuery ; <nl> + / / import io . realm . RealmResults ; <nl> + / / import rx . Observable ; <nl> + / / import rx . Subscriber ; <nl> + / / import rx . functions . Action0 ; <nl> + / / import rx . subscriptions . Subscriptions ; <nl> + / / <nl> + / / / * * <nl> + / / * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects <nl> + / / * before emitting them . This is effectively a snapshot of the Realm data at a given point in time . <nl> + / / * <nl> + / / * This has the following implications : <nl> + / / * <nl> + / / * - Increased memory usage , as all fields including references are copied to the Java heap . <nl> + / / * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm and the <nl> + / / * object will no longer automatically update either . <nl> + / / * - All guarantees of staying consistent with other data from persisted Realm objects are gone . <nl> + / / * - The object is no longer thread - confined and can be parsed between threads . <nl> + / / * <nl> + / / * @ see { @ link io . realm . Realm # copyFromRealm ( RealmObject ) } <nl> + / / * / <nl> + / / public class DetachedCopyObservableFactory implements RxObservableFactory { <nl> + / / <nl> + / / private final int maxDepth ; <nl> + / / private boolean rxJavaAvailble ; <nl> + / / <nl> + / / / * * <nl> + / / * Creates an instance of this factory class . Detached objects also copy all referenced objects . <nl> + / / * / <nl> + / / public DetachedCopyObservableFactory ( ) { <nl> + / / this ( Integer . MAX _ VALUE ) ; <nl> + / / } <nl> + / / <nl> + / / / * * <nl> + / / * Creates an instance of this factory class . Detached copies only contain references up to { @ code maxDepth } away . <nl> + / / * <nl> + / / * @ param maxDepth maximum distance from root object that objects are copied . References above this limit will be <nl> + / / * { @ code null } . <nl> + / / * @ see io . realm . Realm # copyFromRealm ( RealmObject , int ) <nl> + / / * / <nl> + / / public DetachedCopyObservableFactory ( int maxDepth ) { <nl> + / / this . maxDepth = maxDepth ; <nl> + / / try { <nl> + / / Class . forName ( " rx . Observable " ) ; <nl> + / / rxJavaAvailble = true ; <nl> + / / } catch ( ClassNotFoundException ignore ) { <nl> + / / rxJavaAvailble = false ; <nl> + / / } <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public Observable < Realm > from ( final Realm realm ) { <nl> + / / checkRxJavaAvailable ( ) ; <nl> + / / return Observable . create ( new Observable . OnSubscribe < Realm > ( ) { <nl> + / / @ Override <nl> + / / public void call ( final Subscriber < ? super Realm > subscriber ) { <nl> + / / final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + / / @ Override <nl> + / / public void onChange ( ) { <nl> + / / subscriber . onNext ( realm ) ; <nl> + / / } <nl> + / / } ; <nl> + / / realm . addChangeListener ( listener ) ; <nl> + / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + / / @ Override <nl> + / / public void call ( ) { <nl> + / / realm . removeChangeListener ( listener ) ; <nl> + / / } <nl> + / / } ) ) ; <nl> + / / <nl> + / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / / / value . <nl> + / / subscriber . onNext ( realm ) ; <nl> + / / } <nl> + / / } ) ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public Observable < DynamicRealm > from ( final DynamicRealm realm ) { <nl> + / / checkRxJavaAvailable ( ) ; <nl> + / / return Observable . create ( new Observable . OnSubscribe < DynamicRealm > ( ) { <nl> + / / @ Override <nl> + / / public void call ( final Subscriber < ? super DynamicRealm > subscriber ) { <nl> + / / final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + / / @ Override <nl> + / / public void onChange ( ) { <nl> + / / subscriber . onNext ( realm ) ; <nl> + / / } <nl> + / / } ; <nl> + / / realm . addChangeListener ( listener ) ; <nl> + / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + / / @ Override <nl> + / / public void call ( ) { <nl> + / / realm . removeChangeListener ( listener ) ; <nl> + / / } <nl> + / / } ) ) ; <nl> + / / <nl> + / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / / / value . <nl> + / / subscriber . onNext ( realm ) ; <nl> + / / } <nl> + / / } ) ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public < E extends RealmObject > Observable < RealmResults < E > > from ( Realm realm , RealmResults < E > results ) { <nl> + / / return null ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public Observable < RealmResults < DynamicRealmObject > > from ( DynamicRealm realm , RealmResults < DynamicRealmObject > results ) { <nl> + / / return null ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public < E extends RealmObject > Observable < RealmList < E > > from ( Realm realm , RealmList < E > list ) { <nl> + / / return null ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public Observable < RealmList < DynamicRealmObject > > from ( DynamicRealm realm , RealmList < DynamicRealmObject > list ) { <nl> + / / return null ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public < E extends RealmObject > Observable < E > from ( Realm realm , E object ) { <nl> + / / return null ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public Observable < DynamicRealmObject > from ( DynamicRealm realm , DynamicRealmObject object ) { <nl> + / / return null ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public < E extends RealmObject > Observable < RealmQuery < E > > from ( Realm realm , RealmQuery < E > query ) { <nl> + / / return null ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public Observable < RealmQuery < DynamicRealmObject > > from ( DynamicRealm realm , RealmQuery < DynamicRealmObject > query ) { <nl> + / / return null ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> + / / checkRxJavaAvailable ( ) ; <nl> + / / return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> + / / @ Override <nl> + / / public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> + / / final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + / / @ Override <nl> + / / public void onChange ( ) { <nl> + / / subscriber . onNext ( results ) ; <nl> + / / } <nl> + / / } ; <nl> + / / results . addChangeListener ( listener ) ; <nl> + / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + / / @ Override <nl> + / / public void call ( ) { <nl> + / / results . removeChangeListener ( listener ) ; <nl> + / / } <nl> + / / } ) ) ; <nl> + / / <nl> + / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / / / value . <nl> + / / subscriber . onNext ( results ) ; <nl> + / / } <nl> + / / } ) ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> + / / checkRxJavaAvailable ( ) ; <nl> + / / throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> + / / } <nl> + / / <nl> + / / @ Override <nl> + / / public < E extends RealmObject > Observable < E > from ( final E object ) { <nl> + / / checkRxJavaAvailable ( ) ; <nl> + / / return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> + / / @ Override <nl> + / / public void call ( final Subscriber < ? super E > subscriber ) { <nl> + / / final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + / / @ Override <nl> + / / public void onChange ( ) { <nl> + / / subscriber . onNext ( object ) ; <nl> + / / } <nl> + / / } ; <nl> + / / object . addChangeListener ( listener ) ; <nl> + / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + / / @ Override <nl> + / / public void call ( ) { <nl> + / / object . removeChangeListener ( listener ) ; <nl> + / / } <nl> + / / } ) ) ; <nl> + / / <nl> + / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / / / value . <nl> + / / subscriber . onNext ( object ) ; <nl> + / / } <nl> + / / } ) ; <nl> + / / } <nl> + / / <nl> + / / private void checkRxJavaAvailable ( ) { <nl> + / / if ( ! rxJavaAvailble ) { <nl> + / / throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + <nl> + / / " Remember to add it as a compile dependency . See https : / / realm . io / docs / java / latest / # rxjava for more details . " ) ; <nl> + / / } <nl> + / / } <nl> + / / } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> index 8b5853e . . 76bb47f 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import io . realm . Realm ; <nl> import io . realm . RealmChangeListener ; <nl> import io . realm . RealmList ; <nl> import io . realm . RealmObject ; <nl> + import io . realm . RealmQuery ; <nl> import io . realm . RealmResults ; <nl> import rx . Observable ; <nl> import rx . Subscriber ; <nl> @ @ - 34 , 10 + 35 , 11 @ @ import rx . subscriptions . Subscriptions ; <nl> * @ see Realm # asObservable ( ) <nl> * @ see RealmObject # asObservable ( ) <nl> * @ see RealmResults # asObservable ( ) <nl> + * @ see RealmQuery # asObservable ( ) <nl> * @ see DynamicRealm # asObservable ( ) <nl> * @ see DynamicRealmObject # asObservable ( ) <nl> * / <nl> - public final class RealmObservableFactory implements RxObservableFactory { <nl> + public class RealmObservableFactory implements RxObservableFactory { <nl> <nl> private boolean rxJavaAvailble ; <nl> <nl> @ @ - 105 , 8 + 107 , 18 @ @ public final class RealmObservableFactory implements RxObservableFactory { <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> + public < E extends RealmObject > Observable < RealmResults < E > > from ( Realm realm , RealmResults < E > results ) { <nl> checkRxJavaAvailable ( ) ; <nl> + return getRealmResultsObservable ( results ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Observable < RealmResults < DynamicRealmObject > > from ( DynamicRealm realm , RealmResults < DynamicRealmObject > results ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return getRealmResultsObservable ( results ) ; <nl> + } <nl> + <nl> + private < E extends RealmObject > Observable < RealmResults < E > > getRealmResultsObservable ( final RealmResults < E > results ) { <nl> return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> @ Override <nl> public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> @ @ - 132 , 14 + 144 , 34 @ @ public final class RealmObservableFactory implements RxObservableFactory { <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> + public < E extends RealmObject > Observable < RealmList < E > > from ( Realm realm , RealmList < E > list ) { <nl> checkRxJavaAvailable ( ) ; <nl> + return getRealmListObservable ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Observable < RealmList < DynamicRealmObject > > from ( DynamicRealm realm , RealmList < DynamicRealmObject > list ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return getRealmListObservable ( ) ; <nl> + } <nl> + <nl> + private < E extends RealmObject > Observable < RealmList < E > > getRealmListObservable ( ) { <nl> throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> } <nl> <nl> @ Override <nl> - public < E extends RealmObject > Observable < E > from ( final E object ) { <nl> + public < E extends RealmObject > Observable < E > from ( Realm realm , final E object ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return getObjectObservable ( object ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Observable < DynamicRealmObject > from ( DynamicRealm realm , DynamicRealmObject object ) { <nl> checkRxJavaAvailable ( ) ; <nl> + return getObjectObservable ( object ) ; <nl> + } <nl> + <nl> + private < E extends RealmObject > Observable < E > getObjectObservable ( final E object ) { <nl> return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> @ Override <nl> public void call ( final Subscriber < ? super E > subscriber ) { <nl> @ @ - 164 , 6 + 196 , 51 @ @ public final class RealmObservableFactory implements RxObservableFactory { <nl> } ) ; <nl> } <nl> <nl> + @ Override <nl> + public < E extends RealmObject > Observable < RealmQuery < E > > from ( final Realm realm , final RealmQuery < E > query ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + / / Create copy of the RealmQuery on the current thread and prepare it for handover <nl> + final RealmQuery < E > queryCopy = query . clone ( ) ; <nl> + <nl> + return Observable . create ( new Observable . OnSubscribe < RealmQuery < E > > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super RealmQuery < E > > subscriber ) { <nl> + / / Create an Realm instance that is open for as long as the subscription is alive . <nl> + final Realm subscriberRealm = Realm . getInstance ( realm . getConfiguration ( ) ) ; <nl> + RealmQuery < E > queryClone = RealmQuery . copyQuery ( subscriberRealm , query ) ; / / TODO Can I steal it ? <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + subscriberRealm . close ( ) ; <nl> + } <nl> + } ) ) ; <nl> + subscriber . onNext ( queryClone ) ; <nl> + subscriber . onCompleted ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Observable < RealmQuery < DynamicRealmObject > > from ( final DynamicRealm realm , final RealmQuery < DynamicRealmObject > query ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < RealmQuery < DynamicRealmObject > > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super RealmQuery < DynamicRealmObject > > subscriber ) { <nl> + / / Create an Realm instance that is open for as long as the subscription is alive . <nl> + final DynamicRealm subscriberRealm = DynamicRealm . getInstance ( realm . getConfiguration ( ) ) ; <nl> + RealmQuery < DynamicRealmObject > queryClone = RealmQuery . copyDynamicQuery ( subscriberRealm , query ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + subscriberRealm . close ( ) ; <nl> + } <nl> + } ) ) ; <nl> + subscriber . onNext ( queryClone ) ; <nl> + subscriber . onCompleted ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> private void checkRxJavaAvailable ( ) { <nl> if ( ! rxJavaAvailble ) { <nl> throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> index 32c8ae0 . . 83c9883 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> @ @ - 1 , 9 + 1 , 11 @ @ <nl> package io . realm . rx ; <nl> <nl> import io . realm . DynamicRealm ; <nl> + import io . realm . DynamicRealmObject ; <nl> import io . realm . Realm ; <nl> import io . realm . RealmList ; <nl> import io . realm . RealmObject ; <nl> + import io . realm . RealmQuery ; <nl> import io . realm . RealmResults ; <nl> import rx . Observable ; <nl> <nl> @ @ - 19 , 6 + 21 , 7 @ @ public interface RxObservableFactory { <nl> * Realm observables are hot observables as Realms automatically are kept up to date . <nl> * <nl> * @ param realm { @ link Realm } to listen to changes for . <nl> + * @ return Rx observable that emit all updates to the Realm . <nl> * / <nl> Observable < Realm > from ( Realm realm ) ; <nl> <nl> @ @ - 29 , 6 + 32 , 7 @ @ public interface RxObservableFactory { <nl> * Realm observables are hot observables as Realms automatically are kept up to date . <nl> * <nl> * @ param realm { @ link DynamicRealm } to listen to changes for . <nl> + * @ return Rx observable that emit all updates to the DynamicRealm . <nl> * / <nl> Observable < DynamicRealm > from ( DynamicRealm realm ) ; <nl> <nl> @ @ - 39 , 9 + 43 , 23 @ @ public interface RxObservableFactory { <nl> * Realm observables are hot observables as RealmResults are automatically kept up to date . <nl> * <nl> * @ param results { @ link RealmResults } to listen to changes for . <nl> + * @ param realm { @ link Realm } instance results are coming from . <nl> * @ param < E > type of RealmObject <nl> + * @ return Rx observable that emit all updates to the RealmObject . <nl> * / <nl> - < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> + < E extends RealmObject > Observable < RealmResults < E > > from ( Realm realm , RealmResults < E > results ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a { @ link RealmResults } . It should emit the initial RealmResult when subscribed to and <nl> + * on each subsequent update of the RealmResults . <nl> + * <nl> + * Realm observables are hot observables as RealmResults are automatically kept up to date . <nl> + * <nl> + * @ param results { @ link RealmResults } to listen to changes for . <nl> + * @ param realm { @ link DynamicRealm } instance results are coming from . <nl> + * @ return Rx observable that emit all updates to the RealmResults . <nl> + * / <nl> + Observable < RealmResults < DynamicRealmObject > > from ( DynamicRealm realm , RealmResults < DynamicRealmObject > results ) ; <nl> <nl> / * * <nl> * Creates an Observable for a { @ link RealmList } . It should emit the initial list when subscribed to and on each <nl> @ @ - 52 , 9 + 70 , 23 @ @ public interface RxObservableFactory { <nl> * Note : { @ link io . realm . RealmChangeListener } is currently not supported on RealmLists . <nl> * <nl> * @ param list RealmObject to listen to changes for . <nl> + * @ param realm { @ link Realm } instance list is coming from . <nl> * @ param < E > type of RealmObject <nl> * / <nl> - < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> + < E extends RealmObject > Observable < RealmList < E > > from ( Realm realm , RealmList < E > list ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a { @ link RealmList } . It should emit the initial list when subscribed to and on each <nl> + * subsequent update of the RealmList . <nl> + * <nl> + * Realm observables are hot observables as Realms automatically are kept up to date . <nl> + * <nl> + * Note : { @ link io . realm . RealmChangeListener } is currently not supported on RealmLists . <nl> + * <nl> + * @ param list RealmList to listen to changes for . <nl> + * @ param realm { @ link DynamicRealm } instance list is coming from . <nl> + * / <nl> + Observable < RealmList < DynamicRealmObject > > from ( DynamicRealm realm , RealmList < DynamicRealmObject > list ) ; <nl> <nl> / * * <nl> * Creates an Observable for a { @ link RealmObject } . It should emit the initial object when subscribed to and on each <nl> @ @ - 63 , 7 + 95 , 40 @ @ public interface RxObservableFactory { <nl> * Realm observables are hot observables as Realms automatically are kept up to date . <nl> * <nl> * @ param object RealmObject to listen to changes for . <nl> + * @ param realm { @ link Realm } instance object is coming from . <nl> + * @ param < E > type of RealmObject <nl> + * / <nl> + < E extends RealmObject > Observable < E > from ( Realm realm , E object ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a { @ link DynamicRealmObject } . It should emit the initial object when subscribed to and <nl> + * on each subsequent update of the object . <nl> + * <nl> + * Realm observables are hot observables as Realms automatically are kept up to date . <nl> + * <nl> + * @ param object DynamicRealmObject to listen to changes for . <nl> + * @ param realm { @ link DynamicRealm } instance object is coming from . <nl> + * / <nl> + Observable < DynamicRealmObject > from ( DynamicRealm realm , DynamicRealmObject object ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable from a { @ link RealmQuery } . It should emit the query and then complete . <nl> + * <nl> + * A RealmQuery observable is cold . <nl> + * <nl> + * @ param query RealmQuery to emit . <nl> + * @ param realm { @ link Realm } instance query is coming from . <nl> * @ param < E > type of RealmObject <nl> * / <nl> - < E extends RealmObject > Observable < E > from ( E object ) ; <nl> + < E extends RealmObject > Observable < RealmQuery < E > > from ( Realm realm , RealmQuery < E > query ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable from a { @ link RealmQuery } . It should emit the query and then complete . <nl> + * <nl> + * A RealmQuery observable is cold . <nl> + * <nl> + * @ param query RealmObject to listen to changes for . <nl> + * @ param realm { @ link DynamicRealm } instance query is coming from . <nl> + * / <nl> + Observable < RealmQuery < DynamicRealmObject > > from ( DynamicRealm realm , RealmQuery < DynamicRealmObject > query ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index fd932b2 . . a3e5103 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 44 , 28 + 44 , 22 @ @ import io . realm . internal . android . DebugAndroidLogger ; <nl> import io . realm . internal . android . ReleaseAndroidLogger ; <nl> import io . realm . internal . async . RealmThreadPoolExecutor ; <nl> import io . realm . internal . log . RealmLog ; <nl> + import io . realm . rx . RxObservableFactory ; <nl> import rx . Observable ; <nl> <nl> / * * <nl> * Base class for all Realm instances . <nl> * <nl> * @ see io . realm . Realm <nl> + * @ see io . realm . DynamicRealm <nl> * / <nl> - abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> + public abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> protected static final long UNVERSIONED = - 1 ; <nl> private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; <nl> private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; <nl> private static final String CLOSED _ REALM _ MESSAGE = " This Realm instance has already been closed , making it unusable . " ; <nl> - private static final String DIFFERENT _ KEY _ MESSAGE = " Wrong key used to decrypt Realm . " ; <nl> private static final String CANNOT _ REFRESH _ INSIDE _ OF _ TRANSACTION _ MESSAGE = " Cannot refresh inside of a transaction . " ; <nl> <nl> - / / Map between all Realm file paths and all known configurations pointing to that file . <nl> - protected static final Map < String , List < RealmConfiguration > > globalPathConfigurationCache = <nl> - new HashMap < String , List < RealmConfiguration > > ( ) ; <nl> - <nl> - / / Reference count on currently open Realm instances ( both normal and dynamic ) . <nl> - protected static final Map < String , Integer > globalRealmFileReferenceCounter = new HashMap < String , Integer > ( ) ; <nl> - <nl> / / Map between a Handler and the canonical path to a Realm file <nl> protected static final Map < Handler , String > handlers = new ConcurrentHashMap < Handler , String > ( ) ; <nl> <nl> @ @ - 198 , 6 + 192 , 8 @ @ abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> public void removeChangeListener ( RealmChangeListener listener ) { <nl> checkIfValid ( ) ; <nl> changeListeners . remove ( listener ) ; <nl> + } <nl> + <nl> / * * <nl> * Returns an Rx Observable that monitors changes to this realm . It will output the last state when <nl> * subscribed to . <nl> @ @ - 211 , 8 + 207 , 6 @ @ abstract class BaseRealm < E extends BaseRealm > implements Closeable { <nl> return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; <nl> } <nl> <nl> - } <nl> - <nl> / * * <nl> * Removes all user - defined change listeners . <nl> * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 2f8ae48 . . 3231ff9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 32 , 6 + 32 , 8 @ @ import io . realm . internal . RealmProxyMediator ; <nl> import io . realm . internal . SharedGroup ; <nl> import io . realm . internal . modules . CompositeMediator ; <nl> import io . realm . internal . modules . FilterableMediator ; <nl> + import io . realm . rx . RealmObservableFactory ; <nl> + import io . realm . rx . RxObservableFactory ; <nl> <nl> / * * <nl> * A RealmConfiguration is used to setup a specific Realm instance . <nl> @ @ - 77 , 7 + 79 , 7 @ @ public class RealmConfiguration { <nl> private final boolean deleteRealmIfMigrationNeeded ; <nl> private final SharedGroup . Durability durability ; <nl> private final RealmProxyMediator schemaMediator ; <nl> - private final RxJavaFactory rxObservableFactory ; <nl> + private final RxObservableFactory rxObservableFactory ; <nl> <nl> private RealmConfiguration ( Builder builder ) { <nl> this . realmFolder = builder . folder ; <nl> @ @ - 89 , 7 + 91 , 7 @ @ public class RealmConfiguration { <nl> this . migration = builder . migration ; <nl> this . durability = builder . durability ; <nl> this . schemaMediator = createSchemaMediator ( builder ) ; <nl> - this . rxObservableFactory = new RxJavaFactory ( ) ; <nl> + this . rxObservableFactory = builder . rxFactory ; <nl> } <nl> <nl> public File getRealmFolder ( ) { <nl> @ @ - 145 , 7 + 147 , 12 @ @ public class RealmConfiguration { <nl> return canonicalPath ; <nl> } <nl> <nl> - RxObservableFactory getRxFactory ( ) { <nl> + / * * <nl> + * Returns the { @ link RxObservableFactory } used to create Rx Observables from Realm . <nl> + * <nl> + * @ return the factory instance used to create Rx Observables . <nl> + * / <nl> + public RxObservableFactory getRxFactory ( ) { <nl> return rxObservableFactory ; <nl> } <nl> <nl> @ @ - 164 , 6 + 171 , 7 @ @ public class RealmConfiguration { <nl> if ( ! Arrays . equals ( key , that . key ) ) return false ; <nl> if ( ! durability . equals ( that . durability ) ) return false ; <nl> if ( migration ! = null ? ! migration . equals ( that . migration ) : that . migration ! = null ) return false ; <nl> + if ( ! rxObservableFactory . equals ( that . rxObservableFactory ) ) return false ; <nl> return schemaMediator . equals ( that . schemaMediator ) ; <nl> } <nl> <nl> @ @ - 268 , 6 + 276 , 7 @ @ public class RealmConfiguration { <nl> private SharedGroup . Durability durability ; <nl> private HashSet < Object > modules = new HashSet < Object > ( ) ; <nl> private HashSet < Class < ? extends RealmObject > > debugSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; <nl> + private RxObservableFactory rxFactory = new RealmObservableFactory ( ) ; <nl> <nl> / * * <nl> * Creates an instance of the Builder for the RealmConfiguration . <nl> @ @ - 427 , 6 + 436 , 17 @ @ public class RealmConfiguration { <nl> return this ; <nl> } <nl> <nl> + / * * <nl> + * Sets the { @ link RxObservableFactory } used to create RxObservables from Realm . <nl> + * The default factory is { @ link RealmObservableFactory } . <nl> + * <nl> + * @ param factory factory to use . <nl> + * / <nl> + public Builder rxFactory ( RxObservableFactory factory ) { <nl> + rxFactory = factory ; <nl> + return this ; <nl> + } <nl> + <nl> private void addModule ( Object module ) { <nl> if ( module ! = null ) { <nl> checkModule ( module ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java <nl> deleted file mode 100644 <nl> index 5142cb2 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 134 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2015 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - import rx . Observable ; <nl> - import rx . Subscriber ; <nl> - import rx . functions . Action0 ; <nl> - import rx . subscriptions . Subscriptions ; <nl> - <nl> - / * * <nl> - * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . <nl> - * TODO Test compatibility with RxJava2 / RxMobile <nl> - * / <nl> - public class RxJavaFactory implements RxObservableFactory { <nl> - <nl> - private boolean rxJavaAvailble ; <nl> - <nl> - public RxJavaFactory ( ) { <nl> - try { <nl> - Class . forName ( " rx . Observable " ) ; <nl> - rxJavaAvailble = true ; <nl> - } catch ( ClassNotFoundException ignore ) { <nl> - rxJavaAvailble = false ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends BaseRealm > Observable < E > from ( final E realm ) { <nl> - checkRxJavaAvailable ( ) ; <nl> - return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super E > subscriber ) { <nl> - final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - subscriber . onNext ( realm ) ; <nl> - } <nl> - } ; <nl> - realm . addChangeListener ( listener ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - realm . removeChangeListener ( listener ) ; <nl> - } <nl> - } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . <nl> - subscriber . onNext ( realm ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> - checkRxJavaAvailable ( ) ; <nl> - return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> - final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - subscriber . onNext ( results ) ; <nl> - } <nl> - } ; <nl> - results . addChangeListener ( listener ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - results . removeChangeListener ( listener ) ; <nl> - } <nl> - } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . <nl> - subscriber . onNext ( results ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> - checkRxJavaAvailable ( ) ; <nl> - throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public < E extends RealmObject < E > > Observable < E > from ( final E object ) { <nl> - checkRxJavaAvailable ( ) ; <nl> - return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> - @ Override <nl> - public void call ( final Subscriber < ? super E > subscriber ) { <nl> - final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - subscriber . onNext ( object ) ; <nl> - } <nl> - } ; <nl> - object . addChangeListener ( listener ) ; <nl> - subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> - @ Override <nl> - public void call ( ) { <nl> - object . removeChangeListener ( listener ) ; <nl> - } <nl> - } ) ) ; <nl> - <nl> - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> - / / value . <nl> - subscriber . onNext ( object ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - private void checkRxJavaAvailable ( ) { <nl> - if ( ! rxJavaAvailble ) { <nl> - throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + <nl> - " Remember to add it as a compile dependency . See XXX for more details . " ) ; <nl> - } <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java <nl> deleted file mode 100644 <nl> index 0977392 . . 0000000 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 53 + 0 , 0 @ @ <nl> - package io . realm ; <nl> - <nl> - import rx . Observable ; <nl> - <nl> - / * * <nl> - * Factory interface for creating Rx Observables from Realm classes . <nl> - * / <nl> - public interface RxObservableFactory { <nl> - <nl> - / * * <nl> - * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each <nl> - * update to the Realm . <nl> - * <nl> - * Realm observables are effectively hot observables as Realms auto - update . <nl> - * <nl> - * @ param realm RealmResults to listen to changes for . <nl> - * / <nl> - < E extends BaseRealm > Observable < E > from ( E realm ) ; <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmResults . It should emit the initial results when subscribed to and on each <nl> - * update to the results . <nl> - * <nl> - * RealmResults observables are effectively hot observables as RealmObjects auto - update . <nl> - * <nl> - * @ param results RealmResults to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each <nl> - * update to the list . <nl> - * <nl> - * RealmList observables are effectively hot observables as RealmLists auto - update . <nl> - * <nl> - * @ param list RealmObject to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> - <nl> - <nl> - / * * <nl> - * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update <nl> - * to the object . <nl> - * <nl> - * RealmObject observables are effectively hot observables as RealmObjects auto - update . <nl> - * <nl> - * @ param object RealmObject to listen to changes for . <nl> - * @ param < E > Type of RealmObject <nl> - * / <nl> - < E extends RealmObject < E > > Observable < E > from ( E object ) ; <nl> - } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 718e705 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java <nl> @ @ - 0 , 0 + 1 , 147 @ @ <nl> + / * <nl> + * Copyright 2015 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . rx ; <nl> + <nl> + import io . realm . BaseRealm ; <nl> + import io . realm . DynamicRealm ; <nl> + import io . realm . DynamicRealmObject ; <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmChangeListener ; <nl> + import io . realm . RealmList ; <nl> + import io . realm . RealmObject ; <nl> + import io . realm . RealmResults ; <nl> + import rx . Observable ; <nl> + import rx . Subscriber ; <nl> + import rx . functions . Action0 ; <nl> + import rx . subscriptions . Subscriptions ; <nl> + <nl> + / * * <nl> + * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . <nl> + * <nl> + * @ see Realm # observable ( ) <nl> + * @ see RealmObject # observable ( ) <nl> + * @ see RealmResults # observable ( ) <nl> + * @ see DynamicRealm # observable ( ) <nl> + * @ see DynamicRealmObject # observable ( ) <nl> + * / <nl> + public final class RealmObservableFactory implements RxObservableFactory { <nl> + <nl> + private boolean rxJavaAvailble ; <nl> + <nl> + public RealmObservableFactory ( ) { <nl> + try { <nl> + Class . forName ( " rx . Observable " ) ; <nl> + rxJavaAvailble = true ; <nl> + } catch ( ClassNotFoundException ignore ) { <nl> + rxJavaAvailble = false ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends BaseRealm > Observable < E > from ( final E realm ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super E > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> + } ; <nl> + realm . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + realm . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( realm ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( results ) ; <nl> + } <nl> + } ; <nl> + results . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + results . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( results ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < E extends RealmObject < E > > Observable < E > from ( final E object ) { <nl> + checkRxJavaAvailable ( ) ; <nl> + return Observable . create ( new Observable . OnSubscribe < E > ( ) { <nl> + @ Override <nl> + public void call ( final Subscriber < ? super E > subscriber ) { <nl> + final RealmChangeListener listener = new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + subscriber . onNext ( object ) ; <nl> + } <nl> + } ; <nl> + object . addChangeListener ( listener ) ; <nl> + subscriber . add ( Subscriptions . create ( new Action0 ( ) { <nl> + @ Override <nl> + public void call ( ) { <nl> + object . removeChangeListener ( listener ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest <nl> + / / value . <nl> + subscriber . onNext ( object ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private void checkRxJavaAvailable ( ) { <nl> + if ( ! rxJavaAvailble ) { <nl> + throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + <nl> + " Remember to add it as a compile dependency . See https : / / realm . io / docs / java / latest / # rxjava for more details . " ) ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 0984f85 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java <nl> @ @ - 0 , 0 + 1 , 57 @ @ <nl> + package io . realm . rx ; <nl> + <nl> + import io . realm . BaseRealm ; <nl> + import io . realm . RealmList ; <nl> + import io . realm . RealmObject ; <nl> + import io . realm . RealmResults ; <nl> + import rx . Observable ; <nl> + <nl> + / * * <nl> + * Factory interface for creating Rx Observables from Realm classes . <nl> + * / <nl> + public interface RxObservableFactory { <nl> + <nl> + / * * <nl> + * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each <nl> + * update to the Realm . <nl> + * <nl> + * Realm observables are effectively hot observables as Realms auto - update . <nl> + * <nl> + * @ param realm RealmResults to listen to changes for . <nl> + * / <nl> + < E extends BaseRealm > Observable < E > from ( E realm ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a { @ link RealmResults } . It should emit the initial results when subscribed to and on <nl> + * each update to the results . <nl> + * <nl> + * RealmResults observables are effectively hot observables as RealmObjects auto - update . <nl> + * <nl> + * @ param results RealmResults to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each <nl> + * update to the list . <nl> + * <nl> + * RealmList observables are effectively hot observables as RealmLists auto - update . <nl> + * <nl> + * @ param list RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; <nl> + <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update <nl> + * to the object . <nl> + * <nl> + * RealmObject observables are effectively hot observables as RealmObjects auto - update . <nl> + * <nl> + * @ param object RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + < E extends RealmObject < E > > Observable < E > from ( E object ) ; <nl> + }

TEST DIFF:
diff - - git a / realm / realm - jni / build . gradle b / realm / realm - jni / build . gradle 
 index d133a93 . . d9cd494 100644 
 - - - a / realm / realm - jni / build . gradle 
 + + + b / realm / realm - jni / build . gradle 
 @ @ - 65 , 12 + 65 , 12 @ @ def toolchains = [ 
 ] 
 
 def targets = [ 
 - new Target ( name : ' arm ' , jniFolder : ' armeabi ' , toolchain : toolchains . find { it . name = = ' arm ' } , cflags : [ ' - mthumb ' ] ) , 
 - new Target ( name : ' arm - v7a ' , jniFolder : ' armeabi - v7a ' , toolchain : toolchains . find { it . name = = ' arm ' } , cflags : [ ' - mthumb ' , ' - march = armv7 - a ' , ' - mfloat - abi = softfp ' , ' - mfpu = vfpv3 - d16 ' ] ) , 
 - new Target ( name : ' arm64 ' , jniFolder : ' arm64 - v8a ' , toolchain : toolchains . find { it . name = = ' arm64 ' } , cflags : [ ] ) , 
 - new Target ( name : ' mips ' , jniFolder : ' mips ' , toolchain : toolchains . find { it . name = = ' mips ' } , cflags : [ ] ) , 
 + / / new Target ( name : ' arm ' , jniFolder : ' armeabi ' , toolchain : toolchains . find { it . name = = ' arm ' } , cflags : [ ' - mthumb ' ] ) , 
 + / / new Target ( name : ' arm - v7a ' , jniFolder : ' armeabi - v7a ' , toolchain : toolchains . find { it . name = = ' arm ' } , cflags : [ ' - mthumb ' , ' - march = armv7 - a ' , ' - mfloat - abi = softfp ' , ' - mfpu = vfpv3 - d16 ' ] ) , 
 + / / new Target ( name : ' arm64 ' , jniFolder : ' arm64 - v8a ' , toolchain : toolchains . find { it . name = = ' arm64 ' } , cflags : [ ] ) , 
 + / / new Target ( name : ' mips ' , jniFolder : ' mips ' , toolchain : toolchains . find { it . name = = ' mips ' } , cflags : [ ] ) , 
 new Target ( name : ' x86 ' , jniFolder : ' x86 ' , toolchain : toolchains . find { it . name = = ' x86 ' } , cflags : [ ] ) , 
 - new Target ( name : ' x86 _ 64 ' , jniFolder : ' x86 _ 64 ' , toolchain : toolchains . find { it . name = = ' x86 _ 64 ' } , cflags : [ ] ) 
 + / / new Target ( name : ' x86 _ 64 ' , jniFolder : ' x86 _ 64 ' , toolchain : toolchains . find { it . name = = ' x86 _ 64 ' } , cflags : [ ] ) 
 ] 
 
 buildscript { 
 diff - - git a / realm / realm - jni / src / io _ realm _ internal _ TableQuery . cpp b / realm / realm - jni / src / io _ realm _ internal _ TableQuery . cpp 
 index d1c7245 . . f1b2176 100644 
 - - - a / realm / realm - jni / src / io _ realm _ internal _ TableQuery . cpp 
 + + + b / realm / realm - jni / src / io _ realm _ internal _ TableQuery . cpp 
 @ @ - 1726 , 3 + 1726 , 15 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeIsEmpty 
 } 
 } CATCH _ STD ( ) 
 } 
 + 
 + / / queryPtr would be owned and released by this function 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeAcceptHandoverQuery 
 + ( JNIEnv * env , jobject , jlong receiverSharedGroupPtr , jlong receiverReplicationPtr , jlong queryPtr ) 
 + { 
 + TR _ ENTER ( ) 
 + try { 
 + std : : unique _ ptr < Query > query = getHandoverQuery ( receiverSharedGroupPtr , receiverReplicationPtr , queryPtr ) ; 
 + return reinterpret _ cast < jlong > ( query . release ( ) ) ; 
 + } CATCH _ STD ( ) 
 + return 0 ; 
 + } 
 diff - - git a / realm / realm - jni / src / io _ realm _ internal _ TableQuery . h b / realm / realm - jni / src / io _ realm _ internal _ TableQuery . h 
 index 5f88ffb . . 9e79f20 100644 
 - - - a / realm / realm - jni / src / io _ realm _ internal _ TableQuery . h 
 + + + b / realm / realm - jni / src / io _ realm _ internal _ TableQuery . h 
 @ @ - 591 , 6 + 591 , 14 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeRemove 
 JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeCloseQueryHandover 
 ( JNIEnv * , jobject , jlong ) ; 
 
 + / * 
 + * Class : io _ realm _ internal _ TableQuery 
 + * Method : nativeCloseQueryHandover 
 + * Signature : ( JJJ ) J 
 + * / 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeAcceptHandoverQuery 
 + ( JNIEnv * , jlong , jlong , jlong ) ; 
 + 
 # ifdef _ _ cplusplus 
 } 
 # endif 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 index e493313 . . 04ec43b 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 @ @ - 2 , 12 + 2 , 16 @ @ package io . realm ; 
 
 import android . test . AndroidTestCase ; 
 
 + import java . util . List ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 import io . realm . entities . AllTypes ; 
 + import rx . Scheduler ; 
 import rx . Subscription ; 
 import rx . functions . Action1 ; 
 + import rx . functions . Func1 ; 
 + import rx . schedulers . Schedulers ; 
 
 public class RxJavaTests extends AndroidTestCase { 
 
 @ @ - 220 , 6 + 224 , 31 @ @ public class RxJavaTests extends AndroidTestCase { 
 dynamicRealm . close ( ) ; 
 } 
 
 + public void testRealmQueryObservable ( ) { 
 + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . createObject ( AllTypes . class ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + Subscription subscription = realm . where ( AllTypes . class ) . asObservable ( ) 
 + . map ( new Func1 < RealmQuery < AllTypes > , List < AllTypes > > ( ) { 
 + @ Override 
 + public List < AllTypes > call ( RealmQuery < AllTypes > query ) { 
 + return query . findAll ( ) ; 
 + } 
 + } ) 
 + . subscribeOn ( Schedulers . computation ( ) ) 
 + . subscribe ( new Action1 < List < AllTypes > > ( ) { 
 + @ Override 
 + public void call ( List < AllTypes > allTypes ) { 
 + assertEquals ( 1 , allTypes . size ( ) ) ; 
 + subscribedNotified . set ( true ) ; 
 + } 
 + } ) ; 
 + subscription . unsubscribe ( ) ; 
 + assertTrue ( subscribedNotified . get ( ) ) ; 
 + } 
 + 
 public void testUnsubscribe ( ) { 
 final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 Subscription subscription = realm . asObservable ( ) . subscribe ( new Action1 < Realm > ( ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 2a21508 . . e6a2d17 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 44 , 7 + 44 , 7 @ @ import rx . Observable ; 
 * @ see io . realm . Realm 
 * @ see io . realm . DynamicRealm 
 * / 
 - public abstract class BaseRealm implements Closeable { 
 + abstract class BaseRealm implements Closeable { 
 protected static final long UNVERSIONED = - 1 ; 
 private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; 
 private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 32235bd . . f4a6aa4 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 + import java . lang . ref . WeakReference ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . util . ArrayList ; 
 @ @ - 651 , 7 + 652 , 9 @ @ public final class Realm extends BaseRealm { 
 checkIfValid ( ) ; 
 Table table = getTable ( clazz ) ; 
 long rowIndex = table . addEmptyRow ( ) ; 
 - return get ( clazz , rowIndex ) ; 
 + E object = get ( clazz , rowIndex ) ; 
 + addToNotifiableRealmObjects ( object ) ; 
 + return object ; 
 } 
 
 / * * 
 @ @ - 1238 , 6 + 1241 , 7 @ @ public final class Realm extends BaseRealm { 
 } 
 
 / / Public because of migrations 
 + @ Deprecated 
 public Table getTable ( Class < ? extends RealmObject > clazz ) { 
 Table table = classToTable . get ( clazz ) ; 
 if ( table = = null ) { 
 @ @ - 1248 , 6 + 1252 , 13 @ @ public final class Realm extends BaseRealm { 
 return table ; 
 } 
 
 + / / add to the list of RealmObject to be notified after a commit 
 + private < E extends RealmObject > void addToNotifiableRealmObjects ( E realmobject ) { 
 + if ( handlerController ! = null ) { 
 + handlerController . realmObjects . put ( new WeakReference < RealmObject > ( realmobject ) , null ) ; 
 + } 
 + } 
 + 
 / * * 
 * Returns the default Realm module . This module contains all Realm classes in the current project , but not those 
 * from library or project dependencies . Realm classes in these should be exposed using their own module . 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 54c1ebf . . 21840a0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 272 , 7 + 272 , 19 @ @ public abstract class RealmObject < E extends RealmObject > { 
 * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > 
 * / 
 public Observable < E > asObservable ( ) { 
 - return realm . configuration . getRxFactory ( ) . from ( ( E ) this ) ; 
 + if ( realm instanceof Realm ) { 
 + @ SuppressWarnings ( " unchecked " ) 
 + E obj = ( E ) this ; 
 + return realm . configuration . getRxFactory ( ) . from ( ( Realm ) realm , obj ) ; 
 + } else if ( realm instanceof DynamicRealm ) { 
 + DynamicRealm dynamicRealm = ( DynamicRealm ) realm ; 
 + DynamicRealmObject dynamicObject = ( DynamicRealmObject ) this ; 
 + @ SuppressWarnings ( " unchecked " ) 
 + Observable < E > observable = ( Observable < E > ) realm . configuration . getRxFactory ( ) . from ( dynamicRealm , dynamicObject ) ; 
 + return observable ; 
 + } else { 
 + throw new UnsupportedOperationException ( realm . getClass ( ) + " not supported " ) ; 
 + } 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 8cd1d1b . . 650f890 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import io . realm . internal . TableView ; 
 import io . realm . internal . async . ArgumentsHolder ; 
 import io . realm . internal . async . QueryUpdateTask ; 
 import io . realm . internal . log . RealmLog ; 
 + import rx . Observable ; 
 
 / * * 
 * A RealmQuery encapsulates a query on a { @ link io . realm . Realm } or a { @ link io . realm . RealmResults } using the Builder 
 @ @ - 55 , 7 + 56 , 7 @ @ import io . realm . internal . log . RealmLog ; 
 * @ see Realm # where ( Class ) 
 * @ see RealmResults # where ( ) 
 * / 
 - public class RealmQuery < E extends RealmObject > { 
 + public class RealmQuery < E extends RealmObject > implements { 
 
 private BaseRealm realm ; 
 private Class < E > clazz ; 
 @ @ - 126 , 6 + 127 , 27 @ @ public class RealmQuery < E extends RealmObject > { 
 } 
 } 
 
 + / * * 
 + * Copies an existing query to another Realm instance . 
 + * This method is threadsafe and can be used to copy a { @ link RealmQuery } between threads . 
 + * 
 + * @ param realm Realm to run the copied query on 
 + * @ param query query to copy 
 + * @ param < E > type of elements in the query 
 + * @ return the copied query instance . 
 + * / 
 + public static < E extends RealmObject > RealmQuery < E > copyQuery ( Realm realm , RealmQuery < E > query ) { 
 + RealmQuery < E > copiedQuery = new RealmQuery < E > ( realm , query . clazz ) ; 
 + query . handoverTo ( copiedQuery ) ; 
 + return copiedQuery ; 
 + } 
 + 
 + public static RealmQuery < DynamicRealmObject > copyDynamicQuery ( DynamicRealm realm , RealmQuery < DynamicRealmObject > query ) { 
 + RealmQuery < DynamicRealmObject > copiedQuery = new RealmQuery < DynamicRealmObject > ( realm , query . className ) ; 
 + query . handoverTo ( copiedQuery ) ; 
 + return copiedQuery ; 
 + } 
 + 
 private RealmQuery ( Realm realm , Class < E > clazz ) { 
 this . realm = realm ; 
 this . clazz = clazz ; 
 @ @ - 1885 , 6 + 1907 , 14 @ @ public class RealmQuery < E extends RealmObject > { 
 } 
 } 
 
 + / * * 
 + * Move this query to another query object . That query object is allowed to be on another thread . 
 + * / 
 + private void handoverTo ( RealmQuery < E > copiedQuery ) { 
 + long handoverQuery = query . handoverQuery ( realm . sharedGroupManager . getNativePointer ( ) ) ; 
 + copiedQuery . query . acceptHandoverQuery ( handoverQuery ) ; 
 + } 
 + 
 public ArgumentsHolder getArgument ( ) { 
 return argumentsHolder ; 
 } 
 @ @ - 1897 , 4 + 1927 , 30 @ @ public class RealmQuery < E extends RealmObject > { 
 long handoverQueryPointer ( ) { 
 return query . handoverQuery ( realm . sharedGroupManager . getNativePointer ( ) ) ; 
 } 
 + 
 + / * * 
 + * Returns an Rx Observable that emits the RealmQuery and then completes . 
 + * 
 + * @ return RxJava Observable 
 + * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 + * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > 
 + * / 
 + @ SuppressWarnings ( " unchecked " ) 
 + public Observable < RealmQuery < E > > asObservable ( ) { 
 + if ( realm instanceof Realm ) { 
 + return realm . configuration . getRxFactory ( ) . from ( ( Realm ) realm , this ) ; 
 + } else if ( realm instanceof DynamicRealm ) { 
 + DynamicRealm dynamicRealm = ( DynamicRealm ) realm ; 
 + RealmQuery < DynamicRealmObject > dynamicQuery = ( RealmQuery < DynamicRealmObject > ) this ; 
 + @ SuppressWarnings ( " UnnecessaryLocalVariable " ) 
 + Observable results = realm . configuration . getRxFactory ( ) . from ( dynamicRealm , dynamicQuery ) ; 
 + return results ; 
 + } else { 
 + throw new UnsupportedOperationException ( realm . getClass ( ) + " not supported " ) ; 
 + } 
 + } 
 + 
 + public RealmQuery < E > clone ( ) { 
 + return new RealmQuery < E > ( this ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index bd17130 . . 63ceb5d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 836 , 8 + 836 , 19 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 * @ throws UnsupportedOperationException if the required RxJava framework is not on the classpath . 
 * @ see < a href = " https : / / realm . io / docs / java / latest / # rxjava " > RxJava and Realm < / a > 
 * / 
 + @ SuppressWarnings ( " unchecked " ) 
 public Observable < RealmResults < E > > asObservable ( ) { 
 - return realm . configuration . getRxFactory ( ) . from ( this ) ; 
 + if ( realm instanceof Realm ) { 
 + return realm . configuration . getRxFactory ( ) . from ( ( Realm ) realm , this ) ; 
 + } else if ( realm instanceof DynamicRealm ) { 
 + DynamicRealm dynamicRealm = ( DynamicRealm ) realm ; 
 + RealmResults < DynamicRealmObject > dynamicResults = ( RealmResults < DynamicRealmObject > ) this ; 
 + @ SuppressWarnings ( " UnnecessaryLocalVariable " ) 
 + Observable results = realm . configuration . getRxFactory ( ) . from ( dynamicRealm , dynamicResults ) ; 
 + return results ; 
 + } else { 
 + throw new UnsupportedOperationException ( realm . getClass ( ) + " not supported " ) ; 
 + } 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 index 513a052 . . 2c4a3c2 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 @ @ - 59 , 6 + 59 , 13 @ @ public class TableQuery implements Closeable { 
 this . origin = origin ; 
 } 
 
 + public TableQuery ( Context context , long recieverSharedGroupPtr , long receiverReplicationPtr , long handoverQueryPtr ) { 
 + this . context = context ; 
 + this . nativePtr = nativeAcceptHandoverQuery ( recieverSharedGroupPtr , receiverReplicationPtr , handoverQueryPtr ) ; 
 + this . table = null ; 
 + this . origin = null ; 
 + validateQuery ( ) ; 
 + } 
 
 public void close ( ) { 
 synchronized ( context ) { 
 @ @ - 797 , 6 + 804 , 7 @ @ public class TableQuery implements Closeable { 
 private native long nativeRemove ( long nativeQueryPtr , long start , long end , long limit ) ; 
 private native long nativeImportHandoverTableViewIntoSharedGroup ( long handoverTableViewPtr , long callerSharedGroupPtr ) ; 
 private native long nativeHandoverQuery ( long callerSharedGroupPtr , long nativeQueryPtr ) ; 
 + private native long nativeAcceptHandoverQuery ( long receiverSharedGroupPtr , long reiceverNativeReplicationPtr , long nativeHandoverQueryPtr ) ; 
 public static native long nativeFindAllSortedWithHandover ( long bgSharedGroupPtr , long nativeReplicationPtr , long nativeQueryPtr , long start , long end , long limit , long columnIndex , boolean ascending ) ; 
 public static native long nativeFindAllWithHandover ( long bgSharedGroupPtr , long nativeReplicationPtr , long nativeQueryPtr , long start , long end , long limit ) ; 
 public static native long nativeGetDistinctViewWithHandover ( long bgSharedGroupPtr , long nativeReplicationPtr , long nativeQueryPtr , long columnIndex ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java 
 index 88919d3 . . d6c24e6 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / DetachedCopyObservableFactory . java 
 @ @ - 1 , 70 + 1 , 219 @ @ 
 - package io . realm . rx ; 
 - 
 - import io . realm . DynamicRealm ; 
 - import io . realm . Realm ; 
 - import io . realm . RealmList ; 
 - import io . realm . RealmObject ; 
 - import io . realm . RealmResults ; 
 - import rx . Observable ; 
 - 
 - / * * 
 - * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects 
 - * before emitting them . This is effectively a snapshot of the Realm data at a given point in time . 
 - * 
 - * This has the following implications : 
 - * 
 - * - Increased memory usage , as all fields including references are copied to the Java heap . 
 - * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm and the 
 - * object will no longer automatically update either . 
 - * - All guarantees of staying consistent with other data from persisted Realm objects are gone . 
 - * - The object is no longer thread - confined and can be parsed between threads . 
 - * 
 - * @ see { @ link io . realm . Realm # copyFromRealm ( RealmObject ) } 
 - * / 
 - public class DetachedCopyObservableFactory implements RxObservableFactory { 
 - 
 - private final int maxDepth ; 
 - 
 - / * * 
 - * Creates an instance of this factory class . Detached objects also copy all referenced objects . 
 - * / 
 - public DetachedCopyObservableFactory ( ) { 
 - this ( Integer . MAX _ VALUE ) ; 
 - } 
 - 
 - / * * 
 - * Creates an instance of this factory class . Detached copies only contain references up to { @ code maxDepth } away . 
 - * 
 - * @ param maxDepth maximum distance from root object that objects are copied . References above this limit will be 
 - * { @ code null } . 
 - * @ see io . realm . Realm # copyFromRealm ( RealmObject , int ) 
 - * / 
 - public DetachedCopyObservableFactory ( int maxDepth ) { 
 - this . maxDepth = maxDepth ; 
 - } 
 - 
 - @ Override 
 - public Observable < Realm > from ( Realm realm ) { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public Observable < DynamicRealm > from ( DynamicRealm realm ) { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public < E extends RealmObject > Observable < E > from ( E object ) { 
 - return null ; 
 - } 
 - } 
 + / / package io . realm . rx ; 
 + / / 
 + / / import io . realm . DynamicRealm ; 
 + / / import io . realm . DynamicRealmObject ; 
 + / / import io . realm . Realm ; 
 + / / import io . realm . RealmChangeListener ; 
 + / / import io . realm . RealmList ; 
 + / / import io . realm . RealmObject ; 
 + / / import io . realm . RealmQuery ; 
 + / / import io . realm . RealmResults ; 
 + / / import rx . Observable ; 
 + / / import rx . Subscriber ; 
 + / / import rx . functions . Action0 ; 
 + / / import rx . subscriptions . Subscriptions ; 
 + / / 
 + / / / * * 
 + / / * Specialized factory class for creating RxJava Observables that create detached deep copies of all Realm objects 
 + / / * before emitting them . This is effectively a snapshot of the Realm data at a given point in time . 
 + / / * 
 + / / * This has the following implications : 
 + / / * 
 + / / * - Increased memory usage , as all fields including references are copied to the Java heap . 
 + / / * - The Realm object is now considered a " standalone " object . Future changes to it are not persisted in Realm and the 
 + / / * object will no longer automatically update either . 
 + / / * - All guarantees of staying consistent with other data from persisted Realm objects are gone . 
 + / / * - The object is no longer thread - confined and can be parsed between threads . 
 + / / * 
 + / / * @ see { @ link io . realm . Realm # copyFromRealm ( RealmObject ) } 
 + / / * / 
 + / / public class DetachedCopyObservableFactory implements RxObservableFactory { 
 + / / 
 + / / private final int maxDepth ; 
 + / / private boolean rxJavaAvailble ; 
 + / / 
 + / / / * * 
 + / / * Creates an instance of this factory class . Detached objects also copy all referenced objects . 
 + / / * / 
 + / / public DetachedCopyObservableFactory ( ) { 
 + / / this ( Integer . MAX _ VALUE ) ; 
 + / / } 
 + / / 
 + / / / * * 
 + / / * Creates an instance of this factory class . Detached copies only contain references up to { @ code maxDepth } away . 
 + / / * 
 + / / * @ param maxDepth maximum distance from root object that objects are copied . References above this limit will be 
 + / / * { @ code null } . 
 + / / * @ see io . realm . Realm # copyFromRealm ( RealmObject , int ) 
 + / / * / 
 + / / public DetachedCopyObservableFactory ( int maxDepth ) { 
 + / / this . maxDepth = maxDepth ; 
 + / / try { 
 + / / Class . forName ( " rx . Observable " ) ; 
 + / / rxJavaAvailble = true ; 
 + / / } catch ( ClassNotFoundException ignore ) { 
 + / / rxJavaAvailble = false ; 
 + / / } 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public Observable < Realm > from ( final Realm realm ) { 
 + / / checkRxJavaAvailable ( ) ; 
 + / / return Observable . create ( new Observable . OnSubscribe < Realm > ( ) { 
 + / / @ Override 
 + / / public void call ( final Subscriber < ? super Realm > subscriber ) { 
 + / / final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + / / @ Override 
 + / / public void onChange ( ) { 
 + / / subscriber . onNext ( realm ) ; 
 + / / } 
 + / / } ; 
 + / / realm . addChangeListener ( listener ) ; 
 + / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + / / @ Override 
 + / / public void call ( ) { 
 + / / realm . removeChangeListener ( listener ) ; 
 + / / } 
 + / / } ) ) ; 
 + / / 
 + / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / / / value . 
 + / / subscriber . onNext ( realm ) ; 
 + / / } 
 + / / } ) ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public Observable < DynamicRealm > from ( final DynamicRealm realm ) { 
 + / / checkRxJavaAvailable ( ) ; 
 + / / return Observable . create ( new Observable . OnSubscribe < DynamicRealm > ( ) { 
 + / / @ Override 
 + / / public void call ( final Subscriber < ? super DynamicRealm > subscriber ) { 
 + / / final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + / / @ Override 
 + / / public void onChange ( ) { 
 + / / subscriber . onNext ( realm ) ; 
 + / / } 
 + / / } ; 
 + / / realm . addChangeListener ( listener ) ; 
 + / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + / / @ Override 
 + / / public void call ( ) { 
 + / / realm . removeChangeListener ( listener ) ; 
 + / / } 
 + / / } ) ) ; 
 + / / 
 + / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / / / value . 
 + / / subscriber . onNext ( realm ) ; 
 + / / } 
 + / / } ) ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public < E extends RealmObject > Observable < RealmResults < E > > from ( Realm realm , RealmResults < E > results ) { 
 + / / return null ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public Observable < RealmResults < DynamicRealmObject > > from ( DynamicRealm realm , RealmResults < DynamicRealmObject > results ) { 
 + / / return null ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public < E extends RealmObject > Observable < RealmList < E > > from ( Realm realm , RealmList < E > list ) { 
 + / / return null ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public Observable < RealmList < DynamicRealmObject > > from ( DynamicRealm realm , RealmList < DynamicRealmObject > list ) { 
 + / / return null ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public < E extends RealmObject > Observable < E > from ( Realm realm , E object ) { 
 + / / return null ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public Observable < DynamicRealmObject > from ( DynamicRealm realm , DynamicRealmObject object ) { 
 + / / return null ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public < E extends RealmObject > Observable < RealmQuery < E > > from ( Realm realm , RealmQuery < E > query ) { 
 + / / return null ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public Observable < RealmQuery < DynamicRealmObject > > from ( DynamicRealm realm , RealmQuery < DynamicRealmObject > query ) { 
 + / / return null ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 + / / checkRxJavaAvailable ( ) ; 
 + / / return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 + / / @ Override 
 + / / public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 + / / final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + / / @ Override 
 + / / public void onChange ( ) { 
 + / / subscriber . onNext ( results ) ; 
 + / / } 
 + / / } ; 
 + / / results . addChangeListener ( listener ) ; 
 + / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + / / @ Override 
 + / / public void call ( ) { 
 + / / results . removeChangeListener ( listener ) ; 
 + / / } 
 + / / } ) ) ; 
 + / / 
 + / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / / / value . 
 + / / subscriber . onNext ( results ) ; 
 + / / } 
 + / / } ) ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 + / / checkRxJavaAvailable ( ) ; 
 + / / throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public < E extends RealmObject > Observable < E > from ( final E object ) { 
 + / / checkRxJavaAvailable ( ) ; 
 + / / return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 + / / @ Override 
 + / / public void call ( final Subscriber < ? super E > subscriber ) { 
 + / / final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + / / @ Override 
 + / / public void onChange ( ) { 
 + / / subscriber . onNext ( object ) ; 
 + / / } 
 + / / } ; 
 + / / object . addChangeListener ( listener ) ; 
 + / / subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + / / @ Override 
 + / / public void call ( ) { 
 + / / object . removeChangeListener ( listener ) ; 
 + / / } 
 + / / } ) ) ; 
 + / / 
 + / / / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / / / value . 
 + / / subscriber . onNext ( object ) ; 
 + / / } 
 + / / } ) ; 
 + / / } 
 + / / 
 + / / private void checkRxJavaAvailable ( ) { 
 + / / if ( ! rxJavaAvailble ) { 
 + / / throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + 
 + / / " Remember to add it as a compile dependency . See https : / / realm . io / docs / java / latest / # rxjava for more details . " ) ; 
 + / / } 
 + / / } 
 + / / } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 index 8b5853e . . 76bb47f 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import io . realm . Realm ; 
 import io . realm . RealmChangeListener ; 
 import io . realm . RealmList ; 
 import io . realm . RealmObject ; 
 + import io . realm . RealmQuery ; 
 import io . realm . RealmResults ; 
 import rx . Observable ; 
 import rx . Subscriber ; 
 @ @ - 34 , 10 + 35 , 11 @ @ import rx . subscriptions . Subscriptions ; 
 * @ see Realm # asObservable ( ) 
 * @ see RealmObject # asObservable ( ) 
 * @ see RealmResults # asObservable ( ) 
 + * @ see RealmQuery # asObservable ( ) 
 * @ see DynamicRealm # asObservable ( ) 
 * @ see DynamicRealmObject # asObservable ( ) 
 * / 
 - public final class RealmObservableFactory implements RxObservableFactory { 
 + public class RealmObservableFactory implements RxObservableFactory { 
 
 private boolean rxJavaAvailble ; 
 
 @ @ - 105 , 8 + 107 , 18 @ @ public final class RealmObservableFactory implements RxObservableFactory { 
 } 
 
 @ Override 
 - public < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 + public < E extends RealmObject > Observable < RealmResults < E > > from ( Realm realm , RealmResults < E > results ) { 
 checkRxJavaAvailable ( ) ; 
 + return getRealmResultsObservable ( results ) ; 
 + } 
 + 
 + @ Override 
 + public Observable < RealmResults < DynamicRealmObject > > from ( DynamicRealm realm , RealmResults < DynamicRealmObject > results ) { 
 + checkRxJavaAvailable ( ) ; 
 + return getRealmResultsObservable ( results ) ; 
 + } 
 + 
 + private < E extends RealmObject > Observable < RealmResults < E > > getRealmResultsObservable ( final RealmResults < E > results ) { 
 return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 @ Override 
 public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 @ @ - 132 , 14 + 144 , 34 @ @ public final class RealmObservableFactory implements RxObservableFactory { 
 } 
 
 @ Override 
 - public < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 + public < E extends RealmObject > Observable < RealmList < E > > from ( Realm realm , RealmList < E > list ) { 
 checkRxJavaAvailable ( ) ; 
 + return getRealmListObservable ( ) ; 
 + } 
 + 
 + @ Override 
 + public Observable < RealmList < DynamicRealmObject > > from ( DynamicRealm realm , RealmList < DynamicRealmObject > list ) { 
 + checkRxJavaAvailable ( ) ; 
 + return getRealmListObservable ( ) ; 
 + } 
 + 
 + private < E extends RealmObject > Observable < RealmList < E > > getRealmListObservable ( ) { 
 throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 } 
 
 @ Override 
 - public < E extends RealmObject > Observable < E > from ( final E object ) { 
 + public < E extends RealmObject > Observable < E > from ( Realm realm , final E object ) { 
 + checkRxJavaAvailable ( ) ; 
 + return getObjectObservable ( object ) ; 
 + } 
 + 
 + @ Override 
 + public Observable < DynamicRealmObject > from ( DynamicRealm realm , DynamicRealmObject object ) { 
 checkRxJavaAvailable ( ) ; 
 + return getObjectObservable ( object ) ; 
 + } 
 + 
 + private < E extends RealmObject > Observable < E > getObjectObservable ( final E object ) { 
 return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 @ Override 
 public void call ( final Subscriber < ? super E > subscriber ) { 
 @ @ - 164 , 6 + 196 , 51 @ @ public final class RealmObservableFactory implements RxObservableFactory { 
 } ) ; 
 } 
 
 + @ Override 
 + public < E extends RealmObject > Observable < RealmQuery < E > > from ( final Realm realm , final RealmQuery < E > query ) { 
 + checkRxJavaAvailable ( ) ; 
 + / / Create copy of the RealmQuery on the current thread and prepare it for handover 
 + final RealmQuery < E > queryCopy = query . clone ( ) ; 
 + 
 + return Observable . create ( new Observable . OnSubscribe < RealmQuery < E > > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super RealmQuery < E > > subscriber ) { 
 + / / Create an Realm instance that is open for as long as the subscription is alive . 
 + final Realm subscriberRealm = Realm . getInstance ( realm . getConfiguration ( ) ) ; 
 + RealmQuery < E > queryClone = RealmQuery . copyQuery ( subscriberRealm , query ) ; / / TODO Can I steal it ? 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + subscriberRealm . close ( ) ; 
 + } 
 + } ) ) ; 
 + subscriber . onNext ( queryClone ) ; 
 + subscriber . onCompleted ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public Observable < RealmQuery < DynamicRealmObject > > from ( final DynamicRealm realm , final RealmQuery < DynamicRealmObject > query ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < RealmQuery < DynamicRealmObject > > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super RealmQuery < DynamicRealmObject > > subscriber ) { 
 + / / Create an Realm instance that is open for as long as the subscription is alive . 
 + final DynamicRealm subscriberRealm = DynamicRealm . getInstance ( realm . getConfiguration ( ) ) ; 
 + RealmQuery < DynamicRealmObject > queryClone = RealmQuery . copyDynamicQuery ( subscriberRealm , query ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + subscriberRealm . close ( ) ; 
 + } 
 + } ) ) ; 
 + subscriber . onNext ( queryClone ) ; 
 + subscriber . onCompleted ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 private void checkRxJavaAvailable ( ) { 
 if ( ! rxJavaAvailble ) { 
 throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 index 32c8ae0 . . 83c9883 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 @ @ - 1 , 9 + 1 , 11 @ @ 
 package io . realm . rx ; 
 
 import io . realm . DynamicRealm ; 
 + import io . realm . DynamicRealmObject ; 
 import io . realm . Realm ; 
 import io . realm . RealmList ; 
 import io . realm . RealmObject ; 
 + import io . realm . RealmQuery ; 
 import io . realm . RealmResults ; 
 import rx . Observable ; 
 
 @ @ - 19 , 6 + 21 , 7 @ @ public interface RxObservableFactory { 
 * Realm observables are hot observables as Realms automatically are kept up to date . 
 * 
 * @ param realm { @ link Realm } to listen to changes for . 
 + * @ return Rx observable that emit all updates to the Realm . 
 * / 
 Observable < Realm > from ( Realm realm ) ; 
 
 @ @ - 29 , 6 + 32 , 7 @ @ public interface RxObservableFactory { 
 * Realm observables are hot observables as Realms automatically are kept up to date . 
 * 
 * @ param realm { @ link DynamicRealm } to listen to changes for . 
 + * @ return Rx observable that emit all updates to the DynamicRealm . 
 * / 
 Observable < DynamicRealm > from ( DynamicRealm realm ) ; 
 
 @ @ - 39 , 9 + 43 , 23 @ @ public interface RxObservableFactory { 
 * Realm observables are hot observables as RealmResults are automatically kept up to date . 
 * 
 * @ param results { @ link RealmResults } to listen to changes for . 
 + * @ param realm { @ link Realm } instance results are coming from . 
 * @ param < E > type of RealmObject 
 + * @ return Rx observable that emit all updates to the RealmObject . 
 * / 
 - < E extends RealmObject > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 + < E extends RealmObject > Observable < RealmResults < E > > from ( Realm realm , RealmResults < E > results ) ; 
 + 
 + / * * 
 + * Creates an Observable for a { @ link RealmResults } . It should emit the initial RealmResult when subscribed to and 
 + * on each subsequent update of the RealmResults . 
 + * 
 + * Realm observables are hot observables as RealmResults are automatically kept up to date . 
 + * 
 + * @ param results { @ link RealmResults } to listen to changes for . 
 + * @ param realm { @ link DynamicRealm } instance results are coming from . 
 + * @ return Rx observable that emit all updates to the RealmResults . 
 + * / 
 + Observable < RealmResults < DynamicRealmObject > > from ( DynamicRealm realm , RealmResults < DynamicRealmObject > results ) ; 
 
 / * * 
 * Creates an Observable for a { @ link RealmList } . It should emit the initial list when subscribed to and on each 
 @ @ - 52 , 9 + 70 , 23 @ @ public interface RxObservableFactory { 
 * Note : { @ link io . realm . RealmChangeListener } is currently not supported on RealmLists . 
 * 
 * @ param list RealmObject to listen to changes for . 
 + * @ param realm { @ link Realm } instance list is coming from . 
 * @ param < E > type of RealmObject 
 * / 
 - < E extends RealmObject > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 + < E extends RealmObject > Observable < RealmList < E > > from ( Realm realm , RealmList < E > list ) ; 
 + 
 + / * * 
 + * Creates an Observable for a { @ link RealmList } . It should emit the initial list when subscribed to and on each 
 + * subsequent update of the RealmList . 
 + * 
 + * Realm observables are hot observables as Realms automatically are kept up to date . 
 + * 
 + * Note : { @ link io . realm . RealmChangeListener } is currently not supported on RealmLists . 
 + * 
 + * @ param list RealmList to listen to changes for . 
 + * @ param realm { @ link DynamicRealm } instance list is coming from . 
 + * / 
 + Observable < RealmList < DynamicRealmObject > > from ( DynamicRealm realm , RealmList < DynamicRealmObject > list ) ; 
 
 / * * 
 * Creates an Observable for a { @ link RealmObject } . It should emit the initial object when subscribed to and on each 
 @ @ - 63 , 7 + 95 , 40 @ @ public interface RxObservableFactory { 
 * Realm observables are hot observables as Realms automatically are kept up to date . 
 * 
 * @ param object RealmObject to listen to changes for . 
 + * @ param realm { @ link Realm } instance object is coming from . 
 + * @ param < E > type of RealmObject 
 + * / 
 + < E extends RealmObject > Observable < E > from ( Realm realm , E object ) ; 
 + 
 + / * * 
 + * Creates an Observable for a { @ link DynamicRealmObject } . It should emit the initial object when subscribed to and 
 + * on each subsequent update of the object . 
 + * 
 + * Realm observables are hot observables as Realms automatically are kept up to date . 
 + * 
 + * @ param object DynamicRealmObject to listen to changes for . 
 + * @ param realm { @ link DynamicRealm } instance object is coming from . 
 + * / 
 + Observable < DynamicRealmObject > from ( DynamicRealm realm , DynamicRealmObject object ) ; 
 + 
 + / * * 
 + * Creates an Observable from a { @ link RealmQuery } . It should emit the query and then complete . 
 + * 
 + * A RealmQuery observable is cold . 
 + * 
 + * @ param query RealmQuery to emit . 
 + * @ param realm { @ link Realm } instance query is coming from . 
 * @ param < E > type of RealmObject 
 * / 
 - < E extends RealmObject > Observable < E > from ( E object ) ; 
 + < E extends RealmObject > Observable < RealmQuery < E > > from ( Realm realm , RealmQuery < E > query ) ; 
 + 
 + / * * 
 + * Creates an Observable from a { @ link RealmQuery } . It should emit the query and then complete . 
 + * 
 + * A RealmQuery observable is cold . 
 + * 
 + * @ param query RealmObject to listen to changes for . 
 + * @ param realm { @ link DynamicRealm } instance query is coming from . 
 + * / 
 + Observable < RealmQuery < DynamicRealmObject > > from ( DynamicRealm realm , RealmQuery < DynamicRealmObject > query ) ; 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index fd932b2 . . a3e5103 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 44 , 28 + 44 , 22 @ @ import io . realm . internal . android . DebugAndroidLogger ; 
 import io . realm . internal . android . ReleaseAndroidLogger ; 
 import io . realm . internal . async . RealmThreadPoolExecutor ; 
 import io . realm . internal . log . RealmLog ; 
 + import io . realm . rx . RxObservableFactory ; 
 import rx . Observable ; 
 
 / * * 
 * Base class for all Realm instances . 
 * 
 * @ see io . realm . Realm 
 + * @ see io . realm . DynamicRealm 
 * / 
 - abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 + public abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 protected static final long UNVERSIONED = - 1 ; 
 private static final String INCORRECT _ THREAD _ CLOSE _ MESSAGE = " Realm access from incorrect thread . Realm instance can only be closed on the thread it was created . " ; 
 private static final String INCORRECT _ THREAD _ MESSAGE = " Realm access from incorrect thread . Realm objects can only be accessed on the thread they were created . " ; 
 private static final String CLOSED _ REALM _ MESSAGE = " This Realm instance has already been closed , making it unusable . " ; 
 - private static final String DIFFERENT _ KEY _ MESSAGE = " Wrong key used to decrypt Realm . " ; 
 private static final String CANNOT _ REFRESH _ INSIDE _ OF _ TRANSACTION _ MESSAGE = " Cannot refresh inside of a transaction . " ; 
 
 - / / Map between all Realm file paths and all known configurations pointing to that file . 
 - protected static final Map < String , List < RealmConfiguration > > globalPathConfigurationCache = 
 - new HashMap < String , List < RealmConfiguration > > ( ) ; 
 - 
 - / / Reference count on currently open Realm instances ( both normal and dynamic ) . 
 - protected static final Map < String , Integer > globalRealmFileReferenceCounter = new HashMap < String , Integer > ( ) ; 
 - 
 / / Map between a Handler and the canonical path to a Realm file 
 protected static final Map < Handler , String > handlers = new ConcurrentHashMap < Handler , String > ( ) ; 
 
 @ @ - 198 , 6 + 192 , 8 @ @ abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 public void removeChangeListener ( RealmChangeListener listener ) { 
 checkIfValid ( ) ; 
 changeListeners . remove ( listener ) ; 
 + } 
 + 
 / * * 
 * Returns an Rx Observable that monitors changes to this realm . It will output the last state when 
 * subscribed to . 
 @ @ - 211 , 8 + 207 , 6 @ @ abstract class BaseRealm < E extends BaseRealm > implements Closeable { 
 return ( Observable < E > ) configuration . getRxFactory ( ) . from ( this ) ; 
 } 
 
 - } 
 - 
 / * * 
 * Removes all user - defined change listeners . 
 * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 2f8ae48 . . 3231ff9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 32 , 6 + 32 , 8 @ @ import io . realm . internal . RealmProxyMediator ; 
 import io . realm . internal . SharedGroup ; 
 import io . realm . internal . modules . CompositeMediator ; 
 import io . realm . internal . modules . FilterableMediator ; 
 + import io . realm . rx . RealmObservableFactory ; 
 + import io . realm . rx . RxObservableFactory ; 
 
 / * * 
 * A RealmConfiguration is used to setup a specific Realm instance . 
 @ @ - 77 , 7 + 79 , 7 @ @ public class RealmConfiguration { 
 private final boolean deleteRealmIfMigrationNeeded ; 
 private final SharedGroup . Durability durability ; 
 private final RealmProxyMediator schemaMediator ; 
 - private final RxJavaFactory rxObservableFactory ; 
 + private final RxObservableFactory rxObservableFactory ; 
 
 private RealmConfiguration ( Builder builder ) { 
 this . realmFolder = builder . folder ; 
 @ @ - 89 , 7 + 91 , 7 @ @ public class RealmConfiguration { 
 this . migration = builder . migration ; 
 this . durability = builder . durability ; 
 this . schemaMediator = createSchemaMediator ( builder ) ; 
 - this . rxObservableFactory = new RxJavaFactory ( ) ; 
 + this . rxObservableFactory = builder . rxFactory ; 
 } 
 
 public File getRealmFolder ( ) { 
 @ @ - 145 , 7 + 147 , 12 @ @ public class RealmConfiguration { 
 return canonicalPath ; 
 } 
 
 - RxObservableFactory getRxFactory ( ) { 
 + / * * 
 + * Returns the { @ link RxObservableFactory } used to create Rx Observables from Realm . 
 + * 
 + * @ return the factory instance used to create Rx Observables . 
 + * / 
 + public RxObservableFactory getRxFactory ( ) { 
 return rxObservableFactory ; 
 } 
 
 @ @ - 164 , 6 + 171 , 7 @ @ public class RealmConfiguration { 
 if ( ! Arrays . equals ( key , that . key ) ) return false ; 
 if ( ! durability . equals ( that . durability ) ) return false ; 
 if ( migration ! = null ? ! migration . equals ( that . migration ) : that . migration ! = null ) return false ; 
 + if ( ! rxObservableFactory . equals ( that . rxObservableFactory ) ) return false ; 
 return schemaMediator . equals ( that . schemaMediator ) ; 
 } 
 
 @ @ - 268 , 6 + 276 , 7 @ @ public class RealmConfiguration { 
 private SharedGroup . Durability durability ; 
 private HashSet < Object > modules = new HashSet < Object > ( ) ; 
 private HashSet < Class < ? extends RealmObject > > debugSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; 
 + private RxObservableFactory rxFactory = new RealmObservableFactory ( ) ; 
 
 / * * 
 * Creates an instance of the Builder for the RealmConfiguration . 
 @ @ - 427 , 6 + 436 , 17 @ @ public class RealmConfiguration { 
 return this ; 
 } 
 
 + / * * 
 + * Sets the { @ link RxObservableFactory } used to create RxObservables from Realm . 
 + * The default factory is { @ link RealmObservableFactory } . 
 + * 
 + * @ param factory factory to use . 
 + * / 
 + public Builder rxFactory ( RxObservableFactory factory ) { 
 + rxFactory = factory ; 
 + return this ; 
 + } 
 + 
 private void addModule ( Object module ) { 
 if ( module ! = null ) { 
 checkModule ( module ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java b / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java 
 deleted file mode 100644 
 index 5142cb2 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / RxJavaFactory . java 
 + + + / dev / null 
 @ @ - 1 , 134 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2015 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - import rx . Observable ; 
 - import rx . Subscriber ; 
 - import rx . functions . Action0 ; 
 - import rx . subscriptions . Subscriptions ; 
 - 
 - / * * 
 - * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . 
 - * TODO Test compatibility with RxJava2 / RxMobile 
 - * / 
 - public class RxJavaFactory implements RxObservableFactory { 
 - 
 - private boolean rxJavaAvailble ; 
 - 
 - public RxJavaFactory ( ) { 
 - try { 
 - Class . forName ( " rx . Observable " ) ; 
 - rxJavaAvailble = true ; 
 - } catch ( ClassNotFoundException ignore ) { 
 - rxJavaAvailble = false ; 
 - } 
 - } 
 - 
 - @ Override 
 - public < E extends BaseRealm > Observable < E > from ( final E realm ) { 
 - checkRxJavaAvailable ( ) ; 
 - return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super E > subscriber ) { 
 - final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - subscriber . onNext ( realm ) ; 
 - } 
 - } ; 
 - realm . addChangeListener ( listener ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - realm . removeChangeListener ( listener ) ; 
 - } 
 - } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . 
 - subscriber . onNext ( realm ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 - checkRxJavaAvailable ( ) ; 
 - return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 - final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - subscriber . onNext ( results ) ; 
 - } 
 - } ; 
 - results . addChangeListener ( listener ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - results . removeChangeListener ( listener ) ; 
 - } 
 - } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . 
 - subscriber . onNext ( results ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 - checkRxJavaAvailable ( ) ; 
 - throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 - } 
 - 
 - @ Override 
 - public < E extends RealmObject < E > > Observable < E > from ( final E object ) { 
 - checkRxJavaAvailable ( ) ; 
 - return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 - @ Override 
 - public void call ( final Subscriber < ? super E > subscriber ) { 
 - final RealmChangeListener listener = new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - subscriber . onNext ( object ) ; 
 - } 
 - } ; 
 - object . addChangeListener ( listener ) ; 
 - subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 - @ Override 
 - public void call ( ) { 
 - object . removeChangeListener ( listener ) ; 
 - } 
 - } ) ) ; 
 - 
 - / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 - / / value . 
 - subscriber . onNext ( object ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - private void checkRxJavaAvailable ( ) { 
 - if ( ! rxJavaAvailble ) { 
 - throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + 
 - " Remember to add it as a compile dependency . See XXX for more details . " ) ; 
 - } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java 
 deleted file mode 100644 
 index 0977392 . . 0000000 
 - - - a / realm / realm - library / src / main / java / io / realm / RxObservableFactory . java 
 + + + / dev / null 
 @ @ - 1 , 53 + 0 , 0 @ @ 
 - package io . realm ; 
 - 
 - import rx . Observable ; 
 - 
 - / * * 
 - * Factory interface for creating Rx Observables from Realm classes . 
 - * / 
 - public interface RxObservableFactory { 
 - 
 - / * * 
 - * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each 
 - * update to the Realm . 
 - * 
 - * Realm observables are effectively hot observables as Realms auto - update . 
 - * 
 - * @ param realm RealmResults to listen to changes for . 
 - * / 
 - < E extends BaseRealm > Observable < E > from ( E realm ) ; 
 - 
 - / * * 
 - * Creates an Observable for a RealmResults . It should emit the initial results when subscribed to and on each 
 - * update to the results . 
 - * 
 - * RealmResults observables are effectively hot observables as RealmObjects auto - update . 
 - * 
 - * @ param results RealmResults to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 - 
 - / * * 
 - * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each 
 - * update to the list . 
 - * 
 - * RealmList observables are effectively hot observables as RealmLists auto - update . 
 - * 
 - * @ param list RealmObject to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 - 
 - 
 - / * * 
 - * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update 
 - * to the object . 
 - * 
 - * RealmObject observables are effectively hot observables as RealmObjects auto - update . 
 - * 
 - * @ param object RealmObject to listen to changes for . 
 - * @ param < E > Type of RealmObject 
 - * / 
 - < E extends RealmObject < E > > Observable < E > from ( E object ) ; 
 - } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 new file mode 100644 
 index 0000000 . . 718e705 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RealmObservableFactory . java 
 @ @ - 0 , 0 + 1 , 147 @ @ 
 + / * 
 + * Copyright 2015 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . rx ; 
 + 
 + import io . realm . BaseRealm ; 
 + import io . realm . DynamicRealm ; 
 + import io . realm . DynamicRealmObject ; 
 + import io . realm . Realm ; 
 + import io . realm . RealmChangeListener ; 
 + import io . realm . RealmList ; 
 + import io . realm . RealmObject ; 
 + import io . realm . RealmResults ; 
 + import rx . Observable ; 
 + import rx . Subscriber ; 
 + import rx . functions . Action0 ; 
 + import rx . subscriptions . Subscriptions ; 
 + 
 + / * * 
 + * Factory class for creating Observables for RxJava ( < = 1 . 0 . 15 ) . 
 + * 
 + * @ see Realm # observable ( ) 
 + * @ see RealmObject # observable ( ) 
 + * @ see RealmResults # observable ( ) 
 + * @ see DynamicRealm # observable ( ) 
 + * @ see DynamicRealmObject # observable ( ) 
 + * / 
 + public final class RealmObservableFactory implements RxObservableFactory { 
 + 
 + private boolean rxJavaAvailble ; 
 + 
 + public RealmObservableFactory ( ) { 
 + try { 
 + Class . forName ( " rx . Observable " ) ; 
 + rxJavaAvailble = true ; 
 + } catch ( ClassNotFoundException ignore ) { 
 + rxJavaAvailble = false ; 
 + } 
 + } 
 + 
 + @ Override 
 + public < E extends BaseRealm > Observable < E > from ( final E realm ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super E > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( realm ) ; 
 + } 
 + } ; 
 + realm . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + realm . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( realm ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < RealmResults < E > > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super RealmResults < E > > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( results ) ; 
 + } 
 + } ; 
 + results . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + results . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( results ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) { 
 + checkRxJavaAvailable ( ) ; 
 + throw new RuntimeException ( " RealmList does not support change listeners yet , so cannot create an Observable " ) ; 
 + } 
 + 
 + @ Override 
 + public < E extends RealmObject < E > > Observable < E > from ( final E object ) { 
 + checkRxJavaAvailable ( ) ; 
 + return Observable . create ( new Observable . OnSubscribe < E > ( ) { 
 + @ Override 
 + public void call ( final Subscriber < ? super E > subscriber ) { 
 + final RealmChangeListener listener = new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + subscriber . onNext ( object ) ; 
 + } 
 + } ; 
 + object . addChangeListener ( listener ) ; 
 + subscriber . add ( Subscriptions . create ( new Action0 ( ) { 
 + @ Override 
 + public void call ( ) { 
 + object . removeChangeListener ( listener ) ; 
 + } 
 + } ) ) ; 
 + 
 + / / Immediately call onNext with the current value as due to Realms auto - update it will be the latest 
 + / / value . 
 + subscriber . onNext ( object ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private void checkRxJavaAvailable ( ) { 
 + if ( ! rxJavaAvailble ) { 
 + throw new IllegalStateException ( " RxJava seems to be missing from the classpath . " + 
 + " Remember to add it as a compile dependency . See https : / / realm . io / docs / java / latest / # rxjava for more details . " ) ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 new file mode 100644 
 index 0000000 . . 0984f85 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / RxObservableFactory . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package io . realm . rx ; 
 + 
 + import io . realm . BaseRealm ; 
 + import io . realm . RealmList ; 
 + import io . realm . RealmObject ; 
 + import io . realm . RealmResults ; 
 + import rx . Observable ; 
 + 
 + / * * 
 + * Factory interface for creating Rx Observables from Realm classes . 
 + * / 
 + public interface RxObservableFactory { 
 + 
 + / * * 
 + * Creates an Observable for a Realm . It should emit the initial state of the Realm when subscribed to and on each 
 + * update to the Realm . 
 + * 
 + * Realm observables are effectively hot observables as Realms auto - update . 
 + * 
 + * @ param realm RealmResults to listen to changes for . 
 + * / 
 + < E extends BaseRealm > Observable < E > from ( E realm ) ; 
 + 
 + / * * 
 + * Creates an Observable for a { @ link RealmResults } . It should emit the initial results when subscribed to and on 
 + * each update to the results . 
 + * 
 + * RealmResults observables are effectively hot observables as RealmObjects auto - update . 
 + * 
 + * @ param results RealmResults to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < RealmResults < E > > from ( RealmResults < E > results ) ; 
 + 
 + / * * 
 + * Creates an Observable for a RealmList . It should emit the initial list when subscribed to and on each 
 + * update to the list . 
 + * 
 + * RealmList observables are effectively hot observables as RealmLists auto - update . 
 + * 
 + * @ param list RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < RealmList < E > > from ( RealmList < E > list ) ; 
 + 
 + 
 + / * * 
 + * Creates an Observable for a RealmObject . It should emit the initial object when subscribed to and on each update 
 + * to the object . 
 + * 
 + * RealmObject observables are effectively hot observables as RealmObjects auto - update . 
 + * 
 + * @ param object RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + < E extends RealmObject < E > > Observable < E > from ( E object ) ; 
 + }
