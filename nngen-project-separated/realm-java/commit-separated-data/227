BLEU SCORE: 0.09652434877402245

TEST MSG: Cherry pick OS # 504 fix
GENERATED MSG: add fix for # 1466

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index d66b631 . . b25faa0 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 1 , 4 + 1 , 10 @ @ <nl> - # # 4 . 0 . 0 - BETA1 ( YYYY - MM - DD ) <nl> + # # 4 . 0 . 0 - BETA2 ( 2017 - 07 - 27 ) <nl> + <nl> + # # # Bug Fixes <nl> + <nl> + * [ ObjectServer ] ` metatable ` might not be created for sync 2 . 0 . 0 ( https : / / github . com / realm / realm - object - store / issues / 502 ) . <nl> + <nl> + # # 4 . 0 . 0 - BETA1 ( 2017 - 07 - 13 ) <nl> <nl> # # # Breaking Changes <nl> <nl> diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java <nl> index 2291d76 . . 5580660 100644 <nl> - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java <nl> + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import io . realm . util . SyncTestUtils ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 208 , 20 + 209 , 15 @ @ public class SyncedRealmMigrationTests { <nl> dynamicRealm . commitTransaction ( ) ; <nl> dynamicRealm . close ( ) ; <nl> <nl> + Realm realm = Realm . getInstance ( config ) ; / / Opening at different schema version ( 42 ) should rebuild indexes <nl> try { <nl> - Realm realm = Realm . getInstance ( config ) ; / / Opening at different schema version ( 42 ) should rebuild indexes <nl> - fail ( ) ; <nl> - } catch ( RealmMigrationNeededException ignored ) { <nl> + RealmObjectSchema indexedFieldsSchema = realm . getSchema ( ) . get ( className ) ; <nl> + assertNotNull ( indexedFieldsSchema ) ; <nl> + assertTrue ( indexedFieldsSchema . hasIndex ( IndexedFields . FIELD _ INDEXED _ STRING ) ) ; <nl> + assertFalse ( indexedFieldsSchema . hasIndex ( IndexedFields . FIELD _ NON _ INDEXED _ STRING ) ) ; <nl> + } finally { <nl> + realm . close ( ) ; <nl> } <nl> - <nl> - / / FIXME : This is the intended behaviour <nl> - / / RealmObjectSchema indexedFieldsSchema = realm . getSchema ( ) . get ( className ) ; <nl> - / / try { <nl> - / / assertTrue ( indexedFieldsSchema . hasIndex ( IndexedFields . FIELD _ INDEXED _ STRING ) ) ; <nl> - / / assertFalse ( indexedFieldsSchema . hasIndex ( IndexedFields . FIELD _ NON _ INDEXED _ STRING ) ) ; <nl> - / / } finally { <nl> - / / realm . close ( ) ; <nl> - / / } <nl> } <nl> <nl> / / Check that indexes are being added if other fields are being added as well <nl> diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store <nl> index b2a358a . . 4b12f29 160000 <nl> - - - a / realm / realm - library / src / main / cpp / object - store <nl> + + + b / realm / realm - library / src / main / cpp / object - store <nl> @ @ - 1 + 1 @ @ <nl> - Subproject commit b2a358a1f7a00972f65104f6f61f18445ee04980 <nl> + Subproject commit 4b12f29145350b02c94bbd46b11c98db8ffcb566 <nl> diff - - git a / version . txt b / version . txt <nl> index aa8bd7c . . 1834483 100644 <nl> - - - a / version . txt <nl> + + + b / version . txt <nl> @ @ - 1 + 1 @ @ <nl> - 4 . 0 . 0 - BETA1 - SNAPSHOT <nl> + 4 . 0 . 0 - BETA2 - SNAPSHOT
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 9692993 . . 013a15f 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 1865 , 6 + 1865 , 66 @ @ public class RealmTest extends AndroidTestCase { <nl> assertTrue ( future . get ( 10 , TimeUnit . SECONDS ) ) ; <nl> } <nl> <nl> + / / Realm validation & initialization is done once , still ColumnIndices <nl> + / / should be populated for the subsequent Realm sharing the same configuration <nl> + / / even if we skip initialization & validation <nl> + public void testColumnIndicesIsPopulatedWhenSkippingInitialization ( ) throws Throwable { <nl> + final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> + final CountDownLatch callerThreadCompleted = new CountDownLatch ( 1 ) ; <nl> + final CountDownLatch signalBgFinished = new CountDownLatch ( 1 ) ; <nl> + final RealmConfiguration realmConfiguration = TestHelper . <nl> + createConfiguration ( getContext ( ) , " testColumnIndicesIsPopulatedWhenSkippingInitialization " ) ; <nl> + Realm . deleteRealm ( realmConfiguration ) ; <nl> + Realm realm = Realm . getInstance ( realmConfiguration ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + realm . createObject ( AllTypes . class ) . setColumnLong ( 42 ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + RealmResults < AllTypes > all = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> + assertNotNull ( all ) ; <nl> + assertEquals ( 1 , all . size ( ) ) ; <nl> + assertEquals ( 42 , all . get ( 0 ) . getColumnLong ( ) ) ; <nl> + <nl> + / / open a background Realm <nl> + new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + try { <nl> + callerThreadCompleted . await ( ) ; <nl> + Realm backgroundRealm = Realm . getInstance ( realmConfiguration ) ; <nl> + <nl> + backgroundRealm . beginTransaction ( ) ; <nl> + backgroundRealm . createObject ( AllTypes . class ) . setColumnLong ( 7 ) ; <nl> + backgroundRealm . commitTransaction ( ) ; <nl> + <nl> + RealmResults < AllTypes > allBg = backgroundRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> + assertNotNull ( allBg ) ; <nl> + assertEquals ( 2 , allBg . size ( ) ) ; <nl> + assertEquals ( 42 , allBg . get ( 0 ) . getColumnLong ( ) ) ; <nl> + assertEquals ( 7 , allBg . get ( 1 ) . getColumnLong ( ) ) ; <nl> + <nl> + backgroundRealm . close ( ) ; <nl> + <nl> + <nl> + <nl> + } catch ( InterruptedException e ) { <nl> + threadAssertionError [ 0 ] = e ; <nl> + } catch ( AssertionFailedError e ) { <nl> + threadAssertionError [ 0 ] = e ; <nl> + <nl> + } finally { <nl> + signalBgFinished . countDown ( ) ; <nl> + } <nl> + } <nl> + } . start ( ) ; <nl> + <nl> + callerThreadCompleted . countDown ( ) ; <nl> + signalBgFinished . await ( ) ; <nl> + if ( threadAssertionError [ 0 ] ! = null ) <nl> + throw threadAssertionError [ 0 ] ; <nl> + } <nl> + <nl> public void testProcessLocalListenersAfterRefresh ( ) { <nl> / / Used to validate the result <nl> final AtomicBoolean listenerWasCalled = new AtomicBoolean ( false ) ; <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 2828617 . . d010795 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 779 , 6 + 779 , 8 @ @ public final class Realm implements Closeable { <nl> realm . close ( ) ; <nl> throw e ; <nl> } <nl> + } else { <nl> + loadMediatorClasses ( realm ) ; <nl> } <nl> <nl> return realm ; <nl> @ @ - 856 , 6 + 858 , 13 @ @ public final class Realm implements Closeable { <nl> } <nl> } <nl> <nl> + private static void loadMediatorClasses ( Realm realm ) { <nl> + RealmProxyMediator mediator = realm . configuration . getSchemaMediator ( ) ; <nl> + for ( Class < ? extends RealmObject > modelClass : mediator . getModelClasses ( ) ) { <nl> + realm . columnIndices . addClass ( modelClass , mediator . getColumnIndices ( modelClass ) ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Create a Realm object for each object in a JSON array . This must be done within a transaction . <nl> * JSON properties with a null value will map to the default value for the data type in Realm

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index d66b631 . . b25faa0 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 1 , 4 + 1 , 10 @ @ 
 - # # 4 . 0 . 0 - BETA1 ( YYYY - MM - DD ) 
 + # # 4 . 0 . 0 - BETA2 ( 2017 - 07 - 27 ) 
 + 
 + # # # Bug Fixes 
 + 
 + * [ ObjectServer ] ` metatable ` might not be created for sync 2 . 0 . 0 ( https : / / github . com / realm / realm - object - store / issues / 502 ) . 
 + 
 + # # 4 . 0 . 0 - BETA1 ( 2017 - 07 - 13 ) 
 
 # # # Breaking Changes 
 
 diff - - git a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java 
 index 2291d76 . . 5580660 100644 
 - - - a / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java 
 + + + b / realm / realm - library / src / androidTestObjectServer / java / io / realm / SyncedRealmMigrationTests . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import io . realm . util . SyncTestUtils ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 208 , 20 + 209 , 15 @ @ public class SyncedRealmMigrationTests { 
 dynamicRealm . commitTransaction ( ) ; 
 dynamicRealm . close ( ) ; 
 
 + Realm realm = Realm . getInstance ( config ) ; / / Opening at different schema version ( 42 ) should rebuild indexes 
 try { 
 - Realm realm = Realm . getInstance ( config ) ; / / Opening at different schema version ( 42 ) should rebuild indexes 
 - fail ( ) ; 
 - } catch ( RealmMigrationNeededException ignored ) { 
 + RealmObjectSchema indexedFieldsSchema = realm . getSchema ( ) . get ( className ) ; 
 + assertNotNull ( indexedFieldsSchema ) ; 
 + assertTrue ( indexedFieldsSchema . hasIndex ( IndexedFields . FIELD _ INDEXED _ STRING ) ) ; 
 + assertFalse ( indexedFieldsSchema . hasIndex ( IndexedFields . FIELD _ NON _ INDEXED _ STRING ) ) ; 
 + } finally { 
 + realm . close ( ) ; 
 } 
 - 
 - / / FIXME : This is the intended behaviour 
 - / / RealmObjectSchema indexedFieldsSchema = realm . getSchema ( ) . get ( className ) ; 
 - / / try { 
 - / / assertTrue ( indexedFieldsSchema . hasIndex ( IndexedFields . FIELD _ INDEXED _ STRING ) ) ; 
 - / / assertFalse ( indexedFieldsSchema . hasIndex ( IndexedFields . FIELD _ NON _ INDEXED _ STRING ) ) ; 
 - / / } finally { 
 - / / realm . close ( ) ; 
 - / / } 
 } 
 
 / / Check that indexes are being added if other fields are being added as well 
 diff - - git a / realm / realm - library / src / main / cpp / object - store b / realm / realm - library / src / main / cpp / object - store 
 index b2a358a . . 4b12f29 160000 
 - - - a / realm / realm - library / src / main / cpp / object - store 
 + + + b / realm / realm - library / src / main / cpp / object - store 
 @ @ - 1 + 1 @ @ 
 - Subproject commit b2a358a1f7a00972f65104f6f61f18445ee04980 
 + Subproject commit 4b12f29145350b02c94bbd46b11c98db8ffcb566 
 diff - - git a / version . txt b / version . txt 
 index aa8bd7c . . 1834483 100644 
 - - - a / version . txt 
 + + + b / version . txt 
 @ @ - 1 + 1 @ @ 
 - 4 . 0 . 0 - BETA1 - SNAPSHOT 
 + 4 . 0 . 0 - BETA2 - SNAPSHOT

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 9692993 . . 013a15f 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 1865 , 6 + 1865 , 66 @ @ public class RealmTest extends AndroidTestCase { 
 assertTrue ( future . get ( 10 , TimeUnit . SECONDS ) ) ; 
 } 
 
 + / / Realm validation & initialization is done once , still ColumnIndices 
 + / / should be populated for the subsequent Realm sharing the same configuration 
 + / / even if we skip initialization & validation 
 + public void testColumnIndicesIsPopulatedWhenSkippingInitialization ( ) throws Throwable { 
 + final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 + final CountDownLatch callerThreadCompleted = new CountDownLatch ( 1 ) ; 
 + final CountDownLatch signalBgFinished = new CountDownLatch ( 1 ) ; 
 + final RealmConfiguration realmConfiguration = TestHelper . 
 + createConfiguration ( getContext ( ) , " testColumnIndicesIsPopulatedWhenSkippingInitialization " ) ; 
 + Realm . deleteRealm ( realmConfiguration ) ; 
 + Realm realm = Realm . getInstance ( realmConfiguration ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + realm . createObject ( AllTypes . class ) . setColumnLong ( 42 ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + RealmResults < AllTypes > all = realm . where ( AllTypes . class ) . findAll ( ) ; 
 + assertNotNull ( all ) ; 
 + assertEquals ( 1 , all . size ( ) ) ; 
 + assertEquals ( 42 , all . get ( 0 ) . getColumnLong ( ) ) ; 
 + 
 + / / open a background Realm 
 + new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + callerThreadCompleted . await ( ) ; 
 + Realm backgroundRealm = Realm . getInstance ( realmConfiguration ) ; 
 + 
 + backgroundRealm . beginTransaction ( ) ; 
 + backgroundRealm . createObject ( AllTypes . class ) . setColumnLong ( 7 ) ; 
 + backgroundRealm . commitTransaction ( ) ; 
 + 
 + RealmResults < AllTypes > allBg = backgroundRealm . where ( AllTypes . class ) . findAll ( ) ; 
 + assertNotNull ( allBg ) ; 
 + assertEquals ( 2 , allBg . size ( ) ) ; 
 + assertEquals ( 42 , allBg . get ( 0 ) . getColumnLong ( ) ) ; 
 + assertEquals ( 7 , allBg . get ( 1 ) . getColumnLong ( ) ) ; 
 + 
 + backgroundRealm . close ( ) ; 
 + 
 + 
 + 
 + } catch ( InterruptedException e ) { 
 + threadAssertionError [ 0 ] = e ; 
 + } catch ( AssertionFailedError e ) { 
 + threadAssertionError [ 0 ] = e ; 
 + 
 + } finally { 
 + signalBgFinished . countDown ( ) ; 
 + } 
 + } 
 + } . start ( ) ; 
 + 
 + callerThreadCompleted . countDown ( ) ; 
 + signalBgFinished . await ( ) ; 
 + if ( threadAssertionError [ 0 ] ! = null ) 
 + throw threadAssertionError [ 0 ] ; 
 + } 
 + 
 public void testProcessLocalListenersAfterRefresh ( ) { 
 / / Used to validate the result 
 final AtomicBoolean listenerWasCalled = new AtomicBoolean ( false ) ; 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 2828617 . . d010795 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 779 , 6 + 779 , 8 @ @ public final class Realm implements Closeable { 
 realm . close ( ) ; 
 throw e ; 
 } 
 + } else { 
 + loadMediatorClasses ( realm ) ; 
 } 
 
 return realm ; 
 @ @ - 856 , 6 + 858 , 13 @ @ public final class Realm implements Closeable { 
 } 
 } 
 
 + private static void loadMediatorClasses ( Realm realm ) { 
 + RealmProxyMediator mediator = realm . configuration . getSchemaMediator ( ) ; 
 + for ( Class < ? extends RealmObject > modelClass : mediator . getModelClasses ( ) ) { 
 + realm . columnIndices . addClass ( modelClass , mediator . getColumnIndices ( modelClass ) ) ; 
 + } 
 + } 
 + 
 / * * 
 * Create a Realm object for each object in a JSON array . This must be done within a transaction . 
 * JSON properties with a null value will map to the default value for the data type in Realm
