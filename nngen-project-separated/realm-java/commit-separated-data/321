BLEU SCORE: 0.040583489434387374

TEST MSG: Remove some useless code for Table
GENERATED MSG: Initial work on implicit transactions

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> index bbe3cbf . . e387e92 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> @ @ - 75 , 13 + 75 , 13 @ @ public class JNITableTest { <nl> <nl> Table t = new Table ( ) ; <nl> / / Removes rows without columns . <nl> - try { t . remove ( 0 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } <nl> - try { t . remove ( 10 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } <nl> + try { t . moveLastOver ( 0 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } <nl> + try { t . moveLastOver ( 10 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } <nl> <nl> / / Column added , remove rows again . <nl> t . addColumn ( RealmFieldType . STRING , " " ) ; <nl> - try { t . remove ( 0 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } <nl> - try { t . remove ( 10 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } <nl> + try { t . moveLastOver ( 0 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } <nl> + try { t . moveLastOver ( 10 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } <nl> <nl> } <nl> <nl> @ @ - 315 , 34 + 315 , 6 @ @ public class JNITableTest { <nl> assertEquals ( 3000 . 0f , t . getFloat ( 2 , 5 ) ) ; <nl> } <nl> <nl> - @ Test <nl> - public void maximumDate ( ) { <nl> - <nl> - Table table = new Table ( ) ; <nl> - table . addColumn ( RealmFieldType . DATE , " date " ) ; <nl> - <nl> - table . add ( new Date ( 0 ) ) ; <nl> - table . add ( new Date ( 10000 ) ) ; <nl> - table . add ( new Date ( 1000 ) ) ; <nl> - <nl> - assertEquals ( new Date ( 10000 ) , table . maximumDate ( 0 ) ) ; <nl> - <nl> - } <nl> - <nl> - @ Test <nl> - public void minimumDate ( ) { <nl> - <nl> - Table table = new Table ( ) ; <nl> - table . addColumn ( RealmFieldType . DATE , " date " ) ; <nl> - <nl> - table . add ( new Date ( 10000 ) ) ; <nl> - table . add ( new Date ( 0 ) ) ; <nl> - table . add ( new Date ( 1000 ) ) ; <nl> - <nl> - assertEquals ( new Date ( 0 ) , table . minimumDate ( 0 ) ) ; <nl> - <nl> - } <nl> - <nl> / / Tests the migration of a string column to be nullable . <nl> @ Test <nl> public void convertToNullable ( ) { <nl> @ @ - 387 , 7 + 359 , 7 @ @ public class JNITableTest { <nl> } <nl> } catch ( IllegalArgumentException ignored ) { <nl> } <nl> - table . removeLast ( ) ; <nl> + table . moveLastOver ( table . size ( ) - 1 ) ; <nl> assertEquals ( 1 , table . size ( ) ) ; <nl> <nl> table . convertColumnToNullable ( colIndex ) ; <nl> @ @ - 485 , 7 + 457 , 7 @ @ public class JNITableTest { <nl> } <nl> } catch ( IllegalArgumentException ignored ) { <nl> } <nl> - table . removeLast ( ) ; <nl> + table . moveLastOver ( table . size ( ) - 1 ) ; <nl> assertEquals ( 2 , table . size ( ) ) ; <nl> <nl> if ( columnType = = RealmFieldType . BINARY ) { <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> index 42bd156 . . 2a2c339 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp <nl> @ @ - 497 , 29 + 497 , 6 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeAddEmptyRow ( JNIEnv * e <nl> return 0 ; <nl> } <nl> <nl> - JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeRemove ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong rowIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ ROW _ INDEX _ VALID ( env , TBL ( nativeTablePtr ) , rowIndex ) ) { <nl> - return ; <nl> - } <nl> - try { <nl> - TBL ( nativeTablePtr ) - > remove ( S ( rowIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - } <nl> - <nl> - JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeRemoveLast ( JNIEnv * env , jobject , jlong nativeTablePtr ) <nl> - { <nl> - if ( ! TABLE _ VALID ( env , TBL ( nativeTablePtr ) ) ) { <nl> - return ; <nl> - } <nl> - try { <nl> - TBL ( nativeTablePtr ) - > remove _ last ( ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - } <nl> - <nl> JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeMoveLastOver ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> jlong rowIndex ) <nl> { <nl> @ @ - 956 , 198 + 933 , 6 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeNullifyLink ( JNIEnv * en <nl> CATCH _ STD ( ) <nl> } <nl> <nl> - / / - - - - - - - - - - - - - - - - - - - - - - Aggregate methods for integers <nl> - <nl> - JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeSumInt ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Int ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > sum _ int ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeMaximumInt ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Int ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > maximum _ int ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeMinimumInt ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Int ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > minimum _ int ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeAverageInt ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Int ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > average _ int ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - / / - - - - - - - - - - - - - - - - - - - - - Aggregate methods for float <nl> - <nl> - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeSumFloat ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Float ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > sum _ float ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jfloat JNICALL Java _ io _ realm _ internal _ Table _ nativeMaximumFloat ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Float ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > maximum _ float ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jfloat JNICALL Java _ io _ realm _ internal _ Table _ nativeMinimumFloat ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Float ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > minimum _ float ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeAverageFloat ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Float ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > average _ float ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - <nl> - / / - - - - - - - - - - - - - - - - - - - - - Aggregate methods for double <nl> - <nl> - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeSumDouble ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Double ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > sum _ double ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeMaximumDouble ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Double ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > maximum _ double ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeMinimumDouble ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Double ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > minimum _ double ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeAverageDouble ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> - jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Double ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return TBL ( nativeTablePtr ) - > average _ double ( S ( columnIndex ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - <nl> - / / - - - - - - - - - - - - - - - - - - - - - Aggregate methods for date <nl> - <nl> - JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeMaximumTimestamp ( JNIEnv * env , jobject , <nl> - jlong nativeTablePtr , jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Timestamp ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return to _ milliseconds ( TBL ( nativeTablePtr ) - > maximum _ timestamp ( S ( columnIndex ) ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> - JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeMinimumTimestamp ( JNIEnv * env , jobject , <nl> - jlong nativeTablePtr , jlong columnIndex ) <nl> - { <nl> - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Timestamp ) ) { <nl> - return 0 ; <nl> - } <nl> - try { <nl> - return to _ milliseconds ( TBL ( nativeTablePtr ) - > minimum _ timestamp ( S ( columnIndex ) ) ) ; <nl> - } <nl> - CATCH _ STD ( ) <nl> - return 0 ; <nl> - } <nl> - <nl> / / - - - - - - - - - - - - - - - - - - - - - - Count <nl> <nl> JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeCountLong ( JNIEnv * env , jobject , jlong nativeTablePtr , <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 8afbdca . . e9fbfdd 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 185 , 7 + 185 , 7 @ @ public class RealmQuery < E extends RealmModel > { <nl> if ( linkView ! = null ) { <nl> return linkView . isAttached ( ) ; <nl> } <nl> - return table ! = null & & table . getTable ( ) . isValid ( ) ; <nl> + return table ! = null & & table . isValid ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1577 , 7 + 1577 , 7 @ @ public class RealmQuery < E extends RealmModel > { <nl> <nl> fieldNames [ 0 ] = firstFieldName ; <nl> System . arraycopy ( remainingFieldNames , 0 , fieldNames , 1 , remainingFieldNames . length ) ; <nl> - SortDescriptor distinctDescriptor = SortDescriptor . getInstanceForDistinct ( table . getTable ( ) , fieldNames ) ; <nl> + SortDescriptor distinctDescriptor = SortDescriptor . getInstanceForDistinct ( table , fieldNames ) ; <nl> return createRealmResults ( query , null , distinctDescriptor , true ) ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> index 707272d . . 20430bf 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> @ @ - 102 , 10 + 102 , 6 @ @ public class Table implements TableSchema , NativeObject { <nl> return nativeFinalizerPtr ; <nl> } <nl> <nl> - public Table getTable ( ) { <nl> - return this ; <nl> - } <nl> - <nl> public long getNativeTablePointer ( ) { <nl> return nativePtr ; <nl> } <nl> @ @ - 343 , 27 + 339 , 12 @ @ public class Table implements TableSchema , NativeObject { <nl> return RealmFieldType . fromNativeValue ( nativeGetColumnType ( nativePtr , columnIndex ) ) ; <nl> } <nl> <nl> - <nl> / * * <nl> - * Removes a row from the specific index . As of now the entry is simply removed from the table . <nl> + * Removes a row from the specific index . If it is not the last row in the table , it then moves the last row into <nl> + * the vacated slot . <nl> * <nl> * @ param rowIndex the row index ( starting with 0 ) <nl> * / <nl> - public void remove ( long rowIndex ) { <nl> - checkImmutable ( ) ; <nl> - nativeRemove ( nativePtr , rowIndex ) ; <nl> - } <nl> - <nl> - public void removeFirst ( ) { <nl> - checkImmutable ( ) ; <nl> - remove ( 0 ) ; <nl> - } <nl> - <nl> - public void removeLast ( ) { <nl> - checkImmutable ( ) ; <nl> - nativeRemoveLast ( nativePtr ) ; <nl> - } <nl> - <nl> public void moveLastOver ( long rowIndex ) { <nl> checkImmutable ( ) ; <nl> nativeMoveLastOver ( nativePtr , rowIndex ) ; <nl> @ @ - 714 , 8 + 695 , 7 @ @ public class Table implements TableSchema , NativeObject { <nl> public Table getLinkTarget ( long columnIndex ) { <nl> long nativeTablePointer = nativeGetLinkTarget ( nativePtr , columnIndex ) ; <nl> / / Copies context reference from parent . <nl> - Table table = new Table ( this . sharedRealm , nativeTablePointer ) ; <nl> - return table ; <nl> + return new Table ( this . sharedRealm , nativeTablePointer ) ; <nl> } <nl> <nl> public boolean isNull ( long columnIndex , long rowIndex ) { <nl> @ @ - 932 , 71 + 912 , 6 @ @ public class Table implements TableSchema , NativeObject { <nl> } <nl> <nl> / / <nl> - / / Aggregate functions <nl> - / / <nl> - <nl> - / / Integers <nl> - public long sumLong ( long columnIndex ) { <nl> - return nativeSumInt ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - public Long maximumLong ( long columnIndex ) { <nl> - return nativeMaximumInt ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - public Long minimumLong ( long columnIndex ) { <nl> - return nativeMinimumInt ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - public double averageLong ( long columnIndex ) { <nl> - return nativeAverageInt ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - / / Floats <nl> - public double sumFloat ( long columnIndex ) { <nl> - return nativeSumFloat ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - public Float maximumFloat ( long columnIndex ) { <nl> - return nativeMaximumFloat ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - public Float minimumFloat ( long columnIndex ) { <nl> - return nativeMinimumFloat ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - public double averageFloat ( long columnIndex ) { <nl> - return nativeAverageFloat ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - / / Doubles <nl> - public double sumDouble ( long columnIndex ) { <nl> - return nativeSumDouble ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - public Double maximumDouble ( long columnIndex ) { <nl> - return nativeMaximumDouble ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - public Double minimumDouble ( long columnIndex ) { <nl> - return nativeMinimumDouble ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - public double averageDouble ( long columnIndex ) { <nl> - return nativeAverageDouble ( nativePtr , columnIndex ) ; <nl> - } <nl> - <nl> - / / Date aggregates <nl> - <nl> - public Date maximumDate ( long columnIndex ) { <nl> - return new Date ( nativeMaximumTimestamp ( nativePtr , columnIndex ) ) ; <nl> - } <nl> - <nl> - public Date minimumDate ( long columnIndex ) { <nl> - return new Date ( nativeMinimumTimestamp ( nativePtr , columnIndex ) ) ; <nl> - } <nl> - <nl> - / / <nl> / / Count <nl> / / <nl> <nl> @ @ - 1206 , 10 + 1121 , 6 @ @ public class Table implements TableSchema , NativeObject { <nl> <nl> private native int nativeGetColumnType ( long nativeTablePtr , long columnIndex ) ; <nl> <nl> - private native void nativeRemove ( long nativeTablePtr , long rowIndex ) ; <nl> - <nl> - private native void nativeRemoveLast ( long nativeTablePtr ) ; <nl> - <nl> private native void nativeMoveLastOver ( long nativeTablePtr , long rowIndex ) ; <nl> <nl> public static native long nativeAddEmptyRow ( long nativeTablePtr , long rows ) ; <nl> @ @ - 1281 , 34 + 1192 , 6 @ @ public class Table implements TableSchema , NativeObject { <nl> <nl> public static native void nativeNullifyLink ( long nativePtr , long columnIndex , long rowIndex ) ; <nl> <nl> - private native long nativeSumInt ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native long nativeMaximumInt ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native long nativeMinimumInt ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native double nativeAverageInt ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native double nativeSumFloat ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native float nativeMaximumFloat ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native float nativeMinimumFloat ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native double nativeAverageFloat ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native double nativeSumDouble ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native double nativeMaximumDouble ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native double nativeMinimumDouble ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native double nativeAverageDouble ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native long nativeMaximumTimestamp ( long nativePtr , long columnIndex ) ; <nl> - <nl> - private native long nativeMinimumTimestamp ( long nativePtr , long columnIndex ) ; <nl> - <nl> private native long nativeCountLong ( long nativePtr , long columnIndex , long value ) ; <nl> <nl> private native long nativeCountFloat ( long nativePtr , long columnIndex , float value ) ;
NEAREST DIFF (one line): diff - - git a / realm - java - core / src / main / java / io / realm / SharedGroup . java b / realm - java - core / src / main / java / io / realm / SharedGroup . java <nl> index 2a31e69 . . fef94b9 100644 <nl> - - - a / realm - java - core / src / main / java / io / realm / SharedGroup . java <nl> + + + b / realm - java - core / src / main / java / io / realm / SharedGroup . java <nl> @ @ - 7 , 6 + 7 , 9 @ @ import java . io . Closeable ; <nl> public class SharedGroup implements Closeable { <nl> <nl> private long nativePtr ; <nl> + private long nativeReplicationPtr ; <nl> + private long nativeTransactLogRegistryPtr ; <nl> + private boolean implicistTransactionsEnabled = false ; <nl> private boolean activeTransaction ; <nl> private final Context context ; <nl> <nl> @ @ - 31 , 6 + 34 , 25 @ @ public class SharedGroup implements Closeable { <nl> this . nativePtr = createNative ( databaseFile , Durability . FULL . value , false , false ) ; <nl> checkNativePtrNotZero ( ) ; <nl> } <nl> + public SharedGroup ( String databaseFile , boolean enableImplicitTransactions ) { <nl> + if ( enableImplicitTransactions ) { <nl> + nativeTransactLogRegistryPtr = nativeCreateTransactLogRegistry ( databaseFile ) ; <nl> + nativeReplicationPtr = nativeCreateReplication ( databaseFile ) ; <nl> + nativePtr = createNativeWithImplicitTransactions ( nativeReplicationPtr ) ; <nl> + implicistTransactionsEnabled = true ; <nl> + } else { <nl> + nativePtr = createNative ( databaseFile , Durability . FULL . value , false , false ) ; <nl> + } <nl> + context = new Context ( ) ; <nl> + checkNativePtrNotZero ( ) ; <nl> + } <nl> + <nl> + private native long createNativeWithImplicitTransactions ( long nativeReplicationPtr ) ; <nl> + <nl> + private native long nativeCreateReplication ( String databaseFile ) ; <nl> + <nl> + private native long nativeCreateTransactLogRegistry ( String databaseFile ) ; <nl> + <nl> public SharedGroup ( String databaseFile , Durability durability ) { <nl> context = new Context ( ) ; <nl> this . nativePtr = createNative ( databaseFile , durability . value , false , false ) ; <nl> @ @ - 48 , 6 + 70 , 25 @ @ public class SharedGroup implements Closeable { <nl> checkNativePtr ( ) ; <nl> } <nl> * / <nl> + <nl> + public void advanceRead ( ) { <nl> + nativeAdvanceRead ( nativePtr , nativeTransactLogRegistryPtr ) ; <nl> + } <nl> + <nl> + private native void nativeAdvanceRead ( long nativePtr , long nativeTransactLogRegistryPtr ) ; <nl> + <nl> + public void promoteToWrite ( ) { <nl> + nativePromoteToWrite ( nativePtr , nativeTransactLogRegistryPtr ) ; <nl> + } <nl> + <nl> + private native void nativePromoteToWrite ( long nativePtr , long nativeTransactLogRegistryPtr ) ; <nl> + <nl> + public void commitAndContinueAsRead ( ) { <nl> + nativeCommitAndContinueAsRead ( nativePtr ) ; <nl> + } <nl> + <nl> + private native void nativeCommitAndContinueAsRead ( long nativePtr ) ; <nl> + <nl> public WriteTransaction beginWrite ( ) { <nl> if ( activeTransaction ) <nl> throw new IllegalStateException ( <nl> @ @ - 99 , 19 + 140 , 39 @ @ public class SharedGroup implements Closeable { <nl> throw new IllegalStateException ( <nl> " Can ' t close the SharedGroup during an active transaction " ) ; <nl> <nl> - synchronized ( context ) { <nl> + synchronized ( context ) { <nl> if ( nativePtr ! = 0 ) { <nl> nativeClose ( nativePtr ) ; <nl> - nativePtr = 0 ; <nl> + nativePtr = 0 ; <nl> + if ( implicistTransactionsEnabled ) { <nl> + if ( nativeTransactLogRegistryPtr ! = 0 ) { <nl> + nativeCloseTransactRegistryLog ( nativeTransactLogRegistryPtr ) ; <nl> + nativeTransactLogRegistryPtr = 0 ; <nl> + } <nl> + if ( nativeReplicationPtr ! = 0 ) { <nl> + nativeCloseReplication ( nativeReplicationPtr ) ; <nl> + nativeReplicationPtr = 0 ; <nl> + } <nl> + } <nl> } <nl> } <nl> } <nl> - <nl> + <nl> protected void finalize ( ) { <nl> synchronized ( context ) { <nl> if ( nativePtr ! = 0 ) { <nl> context . asyncDisposeSharedGroup ( nativePtr ) ; <nl> nativePtr = 0 ; / / Set to 0 if finalize is called before close ( ) for some reason <nl> + if ( implicistTransactionsEnabled ) { <nl> + if ( nativeTransactLogRegistryPtr ! = 0 ) { <nl> + nativeCloseTransactRegistryLog ( nativeTransactLogRegistryPtr ) ; <nl> + nativeTransactLogRegistryPtr = 0 ; <nl> + } <nl> + if ( nativeReplicationPtr ! = 0 ) { <nl> + nativeCloseReplication ( nativeReplicationPtr ) ; <nl> + nativeReplicationPtr = 0 ; <nl> + } <nl> + } <nl> } <nl> } <nl> } <nl> @ @ - 172 , 4 + 233 , 7 @ @ public class SharedGroup implements Closeable { <nl> } <nl> <nl> protected static native void nativeClose ( long nativePtr ) ; <nl> + private native void nativeCloseTransactRegistryLog ( long nativeTransactLogRegistryPtr ) ; <nl> + private native void nativeCloseReplication ( long nativeReplicationPtr ) ; <nl> + <nl> } <nl> diff - - git a / realm - java - core / src / main / java / io / realm / Table . java b / realm - java - core / src / main / java / io / realm / Table . java <nl> index 3b7b37b . . 0777400 100644 <nl> - - - a / realm - java - core / src / main / java / io / realm / Table . java <nl> + + + b / realm - java - core / src / main / java / io / realm / Table . java <nl> @ @ - 215 , 7 + 215 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> * Updates a table specification from a Table specification structure . <nl> * / <nl> public void updateFromSpec ( TableSpec tableSpec ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeUpdateFromSpec ( nativePtr , tableSpec ) ; <nl> } <nl> <nl> @ @ - 250 , 7 + 250 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> * / <nl> @ Override <nl> public void clear ( ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeClear ( nativePtr ) ; <nl> } <nl> <nl> @ @ - 328 , 7 + 328 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> * / <nl> @ Override <nl> public void remove ( long rowIndex ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeRemove ( nativePtr , rowIndex ) ; <nl> } <nl> <nl> @ @ - 336 , 7 + 336 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> @ Override <nl> public void removeLast ( ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeRemoveLast ( nativePtr ) ; <nl> } <nl> <nl> @ @ - 346 , 7 + 346 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> * EXPERIMENTAL function <nl> * / <nl> public void moveLastOver ( long rowIndex ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeMoveLastOver ( nativePtr , rowIndex ) ; <nl> } <nl> <nl> @ @ - 355 , 12 + 355 , 12 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> / / Row Handling methods . <nl> public long addEmptyRow ( ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> return nativeAddEmptyRow ( nativePtr , 1 ) ; <nl> } <nl> <nl> public long addEmptyRows ( long rows ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> if ( rows < 1 ) <nl> throw new IllegalArgumentException ( " ' rows ' must be > 0 . " ) ; <nl> return nativeAddEmptyRow ( nativePtr , rows ) ; <nl> @ @ - 387 , 7 + 387 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> * @ param values <nl> * / <nl> public void addAt ( long rowIndex , Object . . . values ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> <nl> / / Check index <nl> long size = size ( ) ; <nl> @ @ - 521 , 7 + 521 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> * @ param values <nl> * / <nl> public void set ( long rowIndex , Object . . . values ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> <nl> / / Check index <nl> long size = size ( ) ; <nl> @ @ - 570 , 37 + 570 , 37 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> public class InternalMethods { <nl> <nl> public void insertLong ( long columnIndex , long rowIndex , long value ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeInsertLong ( nativePtr , columnIndex , rowIndex , value ) ; <nl> } <nl> <nl> public void insertDouble ( long columnIndex , long rowIndex , double value ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeInsertDouble ( nativePtr , columnIndex , rowIndex , value ) ; <nl> } <nl> <nl> public void insertFloat ( long columnIndex , long rowIndex , float value ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeInsertFloat ( nativePtr , columnIndex , rowIndex , value ) ; <nl> } <nl> <nl> public void insertBoolean ( long columnIndex , long rowIndex , boolean value ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeInsertBoolean ( nativePtr , columnIndex , rowIndex , value ) ; <nl> } <nl> <nl> public void insertDate ( long columnIndex , long rowIndex , Date date ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeInsertDate ( nativePtr , columnIndex , rowIndex , date . getTime ( ) / 1000 ) ; <nl> } <nl> <nl> public void insertString ( long columnIndex , long rowIndex , String value ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeInsertString ( nativePtr , columnIndex , rowIndex , value ) ; <nl> } <nl> <nl> public void insertMixed ( long columnIndex , long rowIndex , Mixed data ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeInsertMixed ( nativePtr , columnIndex , rowIndex , data ) ; <nl> } <nl> <nl> @ @ - 619 , 7 + 619 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> * / <nl> <nl> public void insertBinary ( long columnIndex , long rowIndex , byte [ ] data ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> if ( data ! = null ) <nl> nativeInsertByteArray ( nativePtr , columnIndex , rowIndex , data ) ; <nl> else <nl> @ @ - 627 , 13 + 627 , 13 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> } <nl> <nl> public void insertSubtable ( long columnIndex , long rowIndex , Object [ ] [ ] values ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeInsertSubtable ( nativePtr , columnIndex , rowIndex ) ; <nl> insertSubtableValues ( rowIndex , columnIndex , values ) ; <nl> } <nl> <nl> public void insertDone ( ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeInsertDone ( nativePtr ) ; <nl> } <nl> } <nl> @ @ - 813 , 7 + 813 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> protected native long nativeGetSubtableSize ( long nativeTablePtr , long columnIndex , long rowIndex ) ; <nl> <nl> public void clearSubtable ( long columnIndex , long rowIndex ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeClearSubtable ( nativePtr , columnIndex , rowIndex ) ; <nl> } <nl> <nl> @ @ - 826 , 7 + 826 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> @ Override <nl> public void setLong ( long columnIndex , long rowIndex , long value ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeSetLong ( nativePtr , columnIndex , rowIndex , value ) ; <nl> } <nl> <nl> @ @ - 834 , 7 + 834 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> @ Override <nl> public void setBoolean ( long columnIndex , long rowIndex , boolean value ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeSetBoolean ( nativePtr , columnIndex , rowIndex , value ) ; <nl> } <nl> <nl> @ @ - 842 , 7 + 842 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> @ Override <nl> public void setFloat ( long columnIndex , long rowIndex , float value ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeSetFloat ( nativePtr , columnIndex , rowIndex , value ) ; <nl> } <nl> <nl> @ @ - 850 , 7 + 850 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> @ Override <nl> public void setDouble ( long columnIndex , long rowIndex , double value ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeSetDouble ( nativePtr , columnIndex , rowIndex , value ) ; <nl> } <nl> <nl> @ @ - 860 , 7 + 860 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> public void setDate ( long columnIndex , long rowIndex , Date date ) { <nl> if ( date = = null ) <nl> throw new IllegalArgumentException ( " Null Date is not allowed . " ) ; <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeSetDate ( nativePtr , columnIndex , rowIndex , date . getTime ( ) / 1000 ) ; <nl> } <nl> <nl> @ @ - 870 , 7 + 870 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> public void setString ( long columnIndex , long rowIndex , String value ) { <nl> if ( value = = null ) <nl> throw new IllegalArgumentException ( " Null String is not allowed . " ) ; <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeSetString ( nativePtr , columnIndex , rowIndex , value ) ; <nl> } <nl> <nl> @ @ - 905 , 7 + 905 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> @ Override <nl> public void setBinaryByteArray ( long columnIndex , long rowIndex , byte [ ] data ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> if ( data = = null ) <nl> throw new IllegalArgumentException ( " Null Array " ) ; <nl> nativeSetByteArray ( nativePtr , columnIndex , rowIndex , data ) ; <nl> @ @ - 924 , 7 + 924 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> * / <nl> @ Override <nl> public void setMixed ( long columnIndex , long rowIndex , Mixed data ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> if ( data = = null ) <nl> throw new IllegalArgumentException ( ) ; <nl> nativeSetMixed ( nativePtr , columnIndex , rowIndex , data ) ; <nl> @ @ - 941 , 7 + 941 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> / / ! ! ! TODO : New . Support in highlevel API <nl> @ Override <nl> public void adjust ( long columnIndex , long value ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeAddInt ( nativePtr , columnIndex , value ) ; <nl> } <nl> <nl> @ @ - 949 , 7 + 949 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> <nl> public void setIndex ( long columnIndex ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> if ( getColumnType ( columnIndex ) ! = ColumnType . STRING ) <nl> throw new IllegalArgumentException ( " Index is only supported on string columns . " ) ; <nl> nativeSetIndex ( nativePtr , columnIndex ) ; <nl> @ @ - 964 , 6 + 964 , 11 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> protected native boolean nativeHasIndex ( long nativePtr , long columnIndex ) ; <nl> <nl> + <nl> + private void checkImmutable ( ) { <nl> + / / if ( immutable ) throwImmutable ( ) ; <nl> + } <nl> + <nl> / / <nl> / / Aggregate functions <nl> / / <nl> @ @ - 1313 , 7 + 1318 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> / / Optimize <nl> public void optimize ( ) { <nl> - if ( immutable ) throwImmutable ( ) ; <nl> + checkImmutable ( ) ; <nl> nativeOptimize ( nativePtr ) ; <nl> } <nl> <nl> diff - - git a / realm - java - test / src / test / java / io / realm / JNIImplicitTransactions . java b / realm - java - test / src / test / java / io / realm / JNIImplicitTransactions . java <nl> new file mode 100644 <nl> index 0000000 . . 6b7b79c <nl> - - - / dev / null <nl> + + + b / realm - java - test / src / test / java / io / realm / JNIImplicitTransactions . java <nl> @ @ - 0 , 0 + 1 , 60 @ @ <nl> + package io . realm ; <nl> + <nl> + import org . testng . annotations . Test ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import static org . testng . AssertJUnit . assertEquals ; <nl> + <nl> + public class JNIImplicitTransactions { <nl> + <nl> + private void deleteFile ( String filename ) { <nl> + File f = new File ( filename ) ; <nl> + if ( f . exists ( ) ) <nl> + f . delete ( ) ; <nl> + f = new File ( filename + " . lock " ) ; <nl> + if ( f . exists ( ) ) <nl> + f . delete ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testImplicitTransactions ( ) { <nl> + <nl> + deleteFile ( " implicit . realm " ) ; <nl> + SharedGroup sg = new SharedGroup ( " implicit . realm " , true ) ; <nl> + <nl> + WriteTransaction wt = sg . beginWrite ( ) ; <nl> + <nl> + Table table = wt . getTable ( " test " ) ; <nl> + table . addColumn ( ColumnType . INTEGER , " integer " ) ; <nl> + table . addEmptyRow ( ) ; <nl> + <nl> + wt . commit ( ) ; <nl> + <nl> + ReadTransaction rt = sg . beginRead ( ) ; <nl> + <nl> + Table test = rt . getTable ( " test " ) ; <nl> + <nl> + <nl> + assertEquals ( 1 , test . size ( ) ) ; <nl> + <nl> + sg . promoteToWrite ( ) ; <nl> + <nl> + test . addEmptyRow ( ) ; <nl> + <nl> + sg . commitAndContinueAsRead ( ) ; <nl> + <nl> + assertEquals ( 2 , test . size ( ) ) ; <nl> + <nl> + test . addEmptyRow ( ) ; <nl> + <nl> + System . out . println ( test . size ( ) ) ; <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + } <nl> + <nl> + } <nl> diff - - git a / realm _ jni / src / io _ realm _ SharedGroup . cpp b / realm _ jni / src / io _ realm _ SharedGroup . cpp <nl> index a8d8558 . . e6bed00 100644 <nl> - - - a / realm _ jni / src / io _ realm _ SharedGroup . cpp <nl> + + + b / realm _ jni / src / io _ realm _ SharedGroup . cpp <nl> @ @ - 3 , 6 + 3 , 8 @ @ <nl> # include < jni . h > <nl> <nl> # include < tightdb / group _ shared . hpp > <nl> + # include < tightdb / replication . hpp > <nl> + # include < tightdb / commit _ log . hpp > <nl> <nl> # include " util . hpp " <nl> # include " io _ realm _ SharedGroup . h " <nl> @ @ - 62 , 6 + 64 , 84 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ createNative ( <nl> return 0 ; <nl> } <nl> <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ createNativeWithImplicitTransactions <nl> + ( JNIEnv * env , jobject , jlong native _ replication _ ptr ) <nl> + { <nl> + try { <nl> + SharedGroup * db = new SharedGroup ( * reinterpret _ cast < tightdb : : Replication * > ( native _ replication _ ptr ) ) ; <nl> + <nl> + return reinterpret _ cast < jlong > ( db ) ; <nl> + } <nl> + catch ( SharedGroup : : PresumablyStaleLockFile & e ) { <nl> + ThrowException ( env , FileAccessError , e . what ( ) , " Presumably a stall . lock file is present . " ) ; <nl> + } <nl> + catch ( SharedGroup : : LockFileButNoData & e ) { <nl> + ThrowException ( env , FileAccessError , e . what ( ) , " The database file is missing , but a . lock file is present . " ) ; <nl> + } <nl> + CATCH _ STD ( ) <nl> + return 0 ; <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ nativeCreateReplication <nl> + ( JNIEnv * env , jobject , jstring file _ name ) <nl> + { <nl> + const char * file _ name _ ptr = env - > GetStringUTFChars ( file _ name , 0 ) ; <nl> + if ( ! file _ name _ ptr ) <nl> + return 0 ; / / Exception is thrown by GetStringUTFChars ( ) <nl> + <nl> + try { <nl> + Replication * repl = makeWriteLogCollector ( file _ name _ ptr ) ; <nl> + return reinterpret _ cast < jlong > ( repl ) ; <nl> + } <nl> + CATCH _ STD ( ) <nl> + return 0 ; <nl> + } <nl> + <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ nativeCreateTransactLogRegistry <nl> + ( JNIEnv * env , jobject , jstring file _ name ) <nl> + { <nl> + const char * file _ name _ ptr = env - > GetStringUTFChars ( file _ name , 0 ) ; <nl> + if ( ! file _ name _ ptr ) <nl> + return 0 ; / / Exception is thrown by GetStringUTFChars ( ) <nl> + <nl> + try { <nl> + LangBindHelper : : TransactLogRegistry * wlr = getWriteLogs ( file _ name _ ptr ) ; <nl> + return reinterpret _ cast < jlong > ( wlr ) ; <nl> + } <nl> + CATCH _ STD ( ) <nl> + return 0 ; <nl> + } <nl> + <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeAdvanceRead <nl> + ( JNIEnv * , jobject , jlong native _ ptr , jlong native _ tansact _ log _ registry _ ptr ) <nl> + { <nl> + LangBindHelper : : advance _ read ( * SG ( native _ ptr ) , * reinterpret _ cast < LangBindHelper : : TransactLogRegistry * > ( native _ tansact _ log _ registry _ ptr ) ) ; <nl> + } <nl> + <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativePromoteToWrite <nl> + ( JNIEnv * , jobject , jlong native _ ptr , jlong native _ tansact _ log _ registry _ ptr ) <nl> + { <nl> + LangBindHelper : : promote _ to _ write ( * SG ( native _ ptr ) , * reinterpret _ cast < LangBindHelper : : TransactLogRegistry * > ( native _ tansact _ log _ registry _ ptr ) ) ; <nl> + } <nl> + <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCommitAndContinueAsRead <nl> + ( JNIEnv * , jobject , jlong native _ ptr ) <nl> + { <nl> + LangBindHelper : : commit _ and _ continue _ as _ read ( * SG ( native _ ptr ) ) ; <nl> + } <nl> + <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCloseTransactRegistryLog <nl> + ( JNIEnv * , jobject , jlong native _ tansact _ log _ registry _ ptr ) <nl> + { <nl> + delete reinterpret _ cast < LangBindHelper : : TransactLogRegistry * > ( native _ tansact _ log _ registry _ ptr ) ; <nl> + } <nl> + <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCloseReplication <nl> + ( JNIEnv * , jobject , jlong native _ replication _ ptr ) <nl> + { <nl> + delete reinterpret _ cast < Replication * > ( native _ replication _ ptr ) ; <nl> + } <nl> + <nl> JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeClose ( <nl> JNIEnv * , jclass , jlong native _ ptr ) <nl> { <nl> diff - - git a / realm _ jni / src / io _ realm _ SharedGroup . h b / realm _ jni / src / io _ realm _ SharedGroup . h <nl> index e779e5c . . bc4b1b3 100644 <nl> - - - a / realm _ jni / src / io _ realm _ SharedGroup . h <nl> + + + b / realm _ jni / src / io _ realm _ SharedGroup . h <nl> @ @ - 9 , 6 + 9 , 54 @ @ extern " C " { <nl> # endif <nl> / * <nl> * Class : io _ realm _ SharedGroup <nl> + * Method : createNativeWithImplicitTransactions <nl> + * Signature : ( J ) J <nl> + * / <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ createNativeWithImplicitTransactions <nl> + ( JNIEnv * , jobject , jlong ) ; <nl> + <nl> + / * <nl> + * Class : io _ realm _ SharedGroup <nl> + * Method : nativeCreateReplication <nl> + * Signature : ( Ljava / lang / String ; ) J <nl> + * / <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ nativeCreateReplication <nl> + ( JNIEnv * , jobject , jstring ) ; <nl> + <nl> + / * <nl> + * Class : io _ realm _ SharedGroup <nl> + * Method : nativeCreateTransactLogRegistry <nl> + * Signature : ( Ljava / lang / String ; ) J <nl> + * / <nl> + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ nativeCreateTransactLogRegistry <nl> + ( JNIEnv * , jobject , jstring ) ; <nl> + <nl> + / * <nl> + * Class : io _ realm _ SharedGroup <nl> + * Method : nativeAdvanceRead <nl> + * Signature : ( JJ ) V <nl> + * / <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeAdvanceRead <nl> + ( JNIEnv * , jobject , jlong , jlong ) ; <nl> + <nl> + / * <nl> + * Class : io _ realm _ SharedGroup <nl> + * Method : nativePromoteToWrite <nl> + * Signature : ( JJ ) V <nl> + * / <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativePromoteToWrite <nl> + ( JNIEnv * , jobject , jlong , jlong ) ; <nl> + <nl> + / * <nl> + * Class : io _ realm _ SharedGroup <nl> + * Method : nativeCommitAndContinueAsRead <nl> + * Signature : ( J ) V <nl> + * / <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCommitAndContinueAsRead <nl> + ( JNIEnv * , jobject , jlong ) ; <nl> + <nl> + / * <nl> + * Class : io _ realm _ SharedGroup <nl> * Method : nativeGetDefaultReplicationDatabaseFileName <nl> * Signature : ( ) Ljava / lang / String ; <nl> * / <nl> @ @ - 87 , 6 + 135 , 22 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ createNative <nl> JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeClose <nl> ( JNIEnv * , jclass , jlong ) ; <nl> <nl> + / * <nl> + * Class : io _ realm _ SharedGroup <nl> + * Method : nativeCloseTransactRegistryLog <nl> + * Signature : ( J ) V <nl> + * / <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCloseTransactRegistryLog <nl> + ( JNIEnv * , jobject , jlong ) ; <nl> + <nl> + / * <nl> + * Class : io _ realm _ SharedGroup <nl> + * Method : nativeCloseReplication <nl> + * Signature : ( J ) V <nl> + * / <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCloseReplication <nl> + ( JNIEnv * , jobject , jlong ) ; <nl> + <nl> # ifdef _ _ cplusplus <nl> } <nl> # endif

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 index bbe3cbf . . e387e92 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 @ @ - 75 , 13 + 75 , 13 @ @ public class JNITableTest { 
 
 Table t = new Table ( ) ; 
 / / Removes rows without columns . 
 - try { t . remove ( 0 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } 
 - try { t . remove ( 10 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } 
 + try { t . moveLastOver ( 0 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } 
 + try { t . moveLastOver ( 10 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } 
 
 / / Column added , remove rows again . 
 t . addColumn ( RealmFieldType . STRING , " " ) ; 
 - try { t . remove ( 0 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } 
 - try { t . remove ( 10 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } 
 + try { t . moveLastOver ( 0 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } 
 + try { t . moveLastOver ( 10 ) ; fail ( " No rows in table " ) ; } catch ( ArrayIndexOutOfBoundsException ignored ) { } 
 
 } 
 
 @ @ - 315 , 34 + 315 , 6 @ @ public class JNITableTest { 
 assertEquals ( 3000 . 0f , t . getFloat ( 2 , 5 ) ) ; 
 } 
 
 - @ Test 
 - public void maximumDate ( ) { 
 - 
 - Table table = new Table ( ) ; 
 - table . addColumn ( RealmFieldType . DATE , " date " ) ; 
 - 
 - table . add ( new Date ( 0 ) ) ; 
 - table . add ( new Date ( 10000 ) ) ; 
 - table . add ( new Date ( 1000 ) ) ; 
 - 
 - assertEquals ( new Date ( 10000 ) , table . maximumDate ( 0 ) ) ; 
 - 
 - } 
 - 
 - @ Test 
 - public void minimumDate ( ) { 
 - 
 - Table table = new Table ( ) ; 
 - table . addColumn ( RealmFieldType . DATE , " date " ) ; 
 - 
 - table . add ( new Date ( 10000 ) ) ; 
 - table . add ( new Date ( 0 ) ) ; 
 - table . add ( new Date ( 1000 ) ) ; 
 - 
 - assertEquals ( new Date ( 0 ) , table . minimumDate ( 0 ) ) ; 
 - 
 - } 
 - 
 / / Tests the migration of a string column to be nullable . 
 @ Test 
 public void convertToNullable ( ) { 
 @ @ - 387 , 7 + 359 , 7 @ @ public class JNITableTest { 
 } 
 } catch ( IllegalArgumentException ignored ) { 
 } 
 - table . removeLast ( ) ; 
 + table . moveLastOver ( table . size ( ) - 1 ) ; 
 assertEquals ( 1 , table . size ( ) ) ; 
 
 table . convertColumnToNullable ( colIndex ) ; 
 @ @ - 485 , 7 + 457 , 7 @ @ public class JNITableTest { 
 } 
 } catch ( IllegalArgumentException ignored ) { 
 } 
 - table . removeLast ( ) ; 
 + table . moveLastOver ( table . size ( ) - 1 ) ; 
 assertEquals ( 2 , table . size ( ) ) ; 
 
 if ( columnType = = RealmFieldType . BINARY ) { 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 index 42bd156 . . 2a2c339 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Table . cpp 
 @ @ - 497 , 29 + 497 , 6 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeAddEmptyRow ( JNIEnv * e 
 return 0 ; 
 } 
 
 - JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeRemove ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong rowIndex ) 
 - { 
 - if ( ! TBL _ AND _ ROW _ INDEX _ VALID ( env , TBL ( nativeTablePtr ) , rowIndex ) ) { 
 - return ; 
 - } 
 - try { 
 - TBL ( nativeTablePtr ) - > remove ( S ( rowIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - } 
 - 
 - JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeRemoveLast ( JNIEnv * env , jobject , jlong nativeTablePtr ) 
 - { 
 - if ( ! TABLE _ VALID ( env , TBL ( nativeTablePtr ) ) ) { 
 - return ; 
 - } 
 - try { 
 - TBL ( nativeTablePtr ) - > remove _ last ( ) ; 
 - } 
 - CATCH _ STD ( ) 
 - } 
 - 
 JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeMoveLastOver ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 jlong rowIndex ) 
 { 
 @ @ - 956 , 198 + 933 , 6 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ Table _ nativeNullifyLink ( JNIEnv * en 
 CATCH _ STD ( ) 
 } 
 
 - / / - - - - - - - - - - - - - - - - - - - - - - Aggregate methods for integers 
 - 
 - JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeSumInt ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Int ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > sum _ int ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeMaximumInt ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Int ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > maximum _ int ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeMinimumInt ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Int ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > minimum _ int ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeAverageInt ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Int ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > average _ int ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - / / - - - - - - - - - - - - - - - - - - - - - Aggregate methods for float 
 - 
 - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeSumFloat ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Float ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > sum _ float ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jfloat JNICALL Java _ io _ realm _ internal _ Table _ nativeMaximumFloat ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Float ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > maximum _ float ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jfloat JNICALL Java _ io _ realm _ internal _ Table _ nativeMinimumFloat ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Float ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > minimum _ float ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeAverageFloat ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Float ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > average _ float ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - 
 - / / - - - - - - - - - - - - - - - - - - - - - Aggregate methods for double 
 - 
 - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeSumDouble ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Double ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > sum _ double ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeMaximumDouble ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Double ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > maximum _ double ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeMinimumDouble ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Double ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > minimum _ double ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jdouble JNICALL Java _ io _ realm _ internal _ Table _ nativeAverageDouble ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 - jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Double ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return TBL ( nativeTablePtr ) - > average _ double ( S ( columnIndex ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - 
 - / / - - - - - - - - - - - - - - - - - - - - - Aggregate methods for date 
 - 
 - JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeMaximumTimestamp ( JNIEnv * env , jobject , 
 - jlong nativeTablePtr , jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Timestamp ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return to _ milliseconds ( TBL ( nativeTablePtr ) - > maximum _ timestamp ( S ( columnIndex ) ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 - JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeMinimumTimestamp ( JNIEnv * env , jobject , 
 - jlong nativeTablePtr , jlong columnIndex ) 
 - { 
 - if ( ! TBL _ AND _ COL _ INDEX _ AND _ TYPE _ VALID ( env , TBL ( nativeTablePtr ) , columnIndex , type _ Timestamp ) ) { 
 - return 0 ; 
 - } 
 - try { 
 - return to _ milliseconds ( TBL ( nativeTablePtr ) - > minimum _ timestamp ( S ( columnIndex ) ) ) ; 
 - } 
 - CATCH _ STD ( ) 
 - return 0 ; 
 - } 
 - 
 / / - - - - - - - - - - - - - - - - - - - - - - Count 
 
 JNIEXPORT jlong JNICALL Java _ io _ realm _ internal _ Table _ nativeCountLong ( JNIEnv * env , jobject , jlong nativeTablePtr , 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 8afbdca . . e9fbfdd 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 185 , 7 + 185 , 7 @ @ public class RealmQuery < E extends RealmModel > { 
 if ( linkView ! = null ) { 
 return linkView . isAttached ( ) ; 
 } 
 - return table ! = null & & table . getTable ( ) . isValid ( ) ; 
 + return table ! = null & & table . isValid ( ) ; 
 } 
 
 / * * 
 @ @ - 1577 , 7 + 1577 , 7 @ @ public class RealmQuery < E extends RealmModel > { 
 
 fieldNames [ 0 ] = firstFieldName ; 
 System . arraycopy ( remainingFieldNames , 0 , fieldNames , 1 , remainingFieldNames . length ) ; 
 - SortDescriptor distinctDescriptor = SortDescriptor . getInstanceForDistinct ( table . getTable ( ) , fieldNames ) ; 
 + SortDescriptor distinctDescriptor = SortDescriptor . getInstanceForDistinct ( table , fieldNames ) ; 
 return createRealmResults ( query , null , distinctDescriptor , true ) ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 index 707272d . . 20430bf 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 @ @ - 102 , 10 + 102 , 6 @ @ public class Table implements TableSchema , NativeObject { 
 return nativeFinalizerPtr ; 
 } 
 
 - public Table getTable ( ) { 
 - return this ; 
 - } 
 - 
 public long getNativeTablePointer ( ) { 
 return nativePtr ; 
 } 
 @ @ - 343 , 27 + 339 , 12 @ @ public class Table implements TableSchema , NativeObject { 
 return RealmFieldType . fromNativeValue ( nativeGetColumnType ( nativePtr , columnIndex ) ) ; 
 } 
 
 - 
 / * * 
 - * Removes a row from the specific index . As of now the entry is simply removed from the table . 
 + * Removes a row from the specific index . If it is not the last row in the table , it then moves the last row into 
 + * the vacated slot . 
 * 
 * @ param rowIndex the row index ( starting with 0 ) 
 * / 
 - public void remove ( long rowIndex ) { 
 - checkImmutable ( ) ; 
 - nativeRemove ( nativePtr , rowIndex ) ; 
 - } 
 - 
 - public void removeFirst ( ) { 
 - checkImmutable ( ) ; 
 - remove ( 0 ) ; 
 - } 
 - 
 - public void removeLast ( ) { 
 - checkImmutable ( ) ; 
 - nativeRemoveLast ( nativePtr ) ; 
 - } 
 - 
 public void moveLastOver ( long rowIndex ) { 
 checkImmutable ( ) ; 
 nativeMoveLastOver ( nativePtr , rowIndex ) ; 
 @ @ - 714 , 8 + 695 , 7 @ @ public class Table implements TableSchema , NativeObject { 
 public Table getLinkTarget ( long columnIndex ) { 
 long nativeTablePointer = nativeGetLinkTarget ( nativePtr , columnIndex ) ; 
 / / Copies context reference from parent . 
 - Table table = new Table ( this . sharedRealm , nativeTablePointer ) ; 
 - return table ; 
 + return new Table ( this . sharedRealm , nativeTablePointer ) ; 
 } 
 
 public boolean isNull ( long columnIndex , long rowIndex ) { 
 @ @ - 932 , 71 + 912 , 6 @ @ public class Table implements TableSchema , NativeObject { 
 } 
 
 / / 
 - / / Aggregate functions 
 - / / 
 - 
 - / / Integers 
 - public long sumLong ( long columnIndex ) { 
 - return nativeSumInt ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - public Long maximumLong ( long columnIndex ) { 
 - return nativeMaximumInt ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - public Long minimumLong ( long columnIndex ) { 
 - return nativeMinimumInt ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - public double averageLong ( long columnIndex ) { 
 - return nativeAverageInt ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - / / Floats 
 - public double sumFloat ( long columnIndex ) { 
 - return nativeSumFloat ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - public Float maximumFloat ( long columnIndex ) { 
 - return nativeMaximumFloat ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - public Float minimumFloat ( long columnIndex ) { 
 - return nativeMinimumFloat ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - public double averageFloat ( long columnIndex ) { 
 - return nativeAverageFloat ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - / / Doubles 
 - public double sumDouble ( long columnIndex ) { 
 - return nativeSumDouble ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - public Double maximumDouble ( long columnIndex ) { 
 - return nativeMaximumDouble ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - public Double minimumDouble ( long columnIndex ) { 
 - return nativeMinimumDouble ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - public double averageDouble ( long columnIndex ) { 
 - return nativeAverageDouble ( nativePtr , columnIndex ) ; 
 - } 
 - 
 - / / Date aggregates 
 - 
 - public Date maximumDate ( long columnIndex ) { 
 - return new Date ( nativeMaximumTimestamp ( nativePtr , columnIndex ) ) ; 
 - } 
 - 
 - public Date minimumDate ( long columnIndex ) { 
 - return new Date ( nativeMinimumTimestamp ( nativePtr , columnIndex ) ) ; 
 - } 
 - 
 - / / 
 / / Count 
 / / 
 
 @ @ - 1206 , 10 + 1121 , 6 @ @ public class Table implements TableSchema , NativeObject { 
 
 private native int nativeGetColumnType ( long nativeTablePtr , long columnIndex ) ; 
 
 - private native void nativeRemove ( long nativeTablePtr , long rowIndex ) ; 
 - 
 - private native void nativeRemoveLast ( long nativeTablePtr ) ; 
 - 
 private native void nativeMoveLastOver ( long nativeTablePtr , long rowIndex ) ; 
 
 public static native long nativeAddEmptyRow ( long nativeTablePtr , long rows ) ; 
 @ @ - 1281 , 34 + 1192 , 6 @ @ public class Table implements TableSchema , NativeObject { 
 
 public static native void nativeNullifyLink ( long nativePtr , long columnIndex , long rowIndex ) ; 
 
 - private native long nativeSumInt ( long nativePtr , long columnIndex ) ; 
 - 
 - private native long nativeMaximumInt ( long nativePtr , long columnIndex ) ; 
 - 
 - private native long nativeMinimumInt ( long nativePtr , long columnIndex ) ; 
 - 
 - private native double nativeAverageInt ( long nativePtr , long columnIndex ) ; 
 - 
 - private native double nativeSumFloat ( long nativePtr , long columnIndex ) ; 
 - 
 - private native float nativeMaximumFloat ( long nativePtr , long columnIndex ) ; 
 - 
 - private native float nativeMinimumFloat ( long nativePtr , long columnIndex ) ; 
 - 
 - private native double nativeAverageFloat ( long nativePtr , long columnIndex ) ; 
 - 
 - private native double nativeSumDouble ( long nativePtr , long columnIndex ) ; 
 - 
 - private native double nativeMaximumDouble ( long nativePtr , long columnIndex ) ; 
 - 
 - private native double nativeMinimumDouble ( long nativePtr , long columnIndex ) ; 
 - 
 - private native double nativeAverageDouble ( long nativePtr , long columnIndex ) ; 
 - 
 - private native long nativeMaximumTimestamp ( long nativePtr , long columnIndex ) ; 
 - 
 - private native long nativeMinimumTimestamp ( long nativePtr , long columnIndex ) ; 
 - 
 private native long nativeCountLong ( long nativePtr , long columnIndex , long value ) ; 
 
 private native long nativeCountFloat ( long nativePtr , long columnIndex , float value ) ;

NEAREST DIFF:
diff - - git a / realm - java - core / src / main / java / io / realm / SharedGroup . java b / realm - java - core / src / main / java / io / realm / SharedGroup . java 
 index 2a31e69 . . fef94b9 100644 
 - - - a / realm - java - core / src / main / java / io / realm / SharedGroup . java 
 + + + b / realm - java - core / src / main / java / io / realm / SharedGroup . java 
 @ @ - 7 , 6 + 7 , 9 @ @ import java . io . Closeable ; 
 public class SharedGroup implements Closeable { 
 
 private long nativePtr ; 
 + private long nativeReplicationPtr ; 
 + private long nativeTransactLogRegistryPtr ; 
 + private boolean implicistTransactionsEnabled = false ; 
 private boolean activeTransaction ; 
 private final Context context ; 
 
 @ @ - 31 , 6 + 34 , 25 @ @ public class SharedGroup implements Closeable { 
 this . nativePtr = createNative ( databaseFile , Durability . FULL . value , false , false ) ; 
 checkNativePtrNotZero ( ) ; 
 } 
 + public SharedGroup ( String databaseFile , boolean enableImplicitTransactions ) { 
 + if ( enableImplicitTransactions ) { 
 + nativeTransactLogRegistryPtr = nativeCreateTransactLogRegistry ( databaseFile ) ; 
 + nativeReplicationPtr = nativeCreateReplication ( databaseFile ) ; 
 + nativePtr = createNativeWithImplicitTransactions ( nativeReplicationPtr ) ; 
 + implicistTransactionsEnabled = true ; 
 + } else { 
 + nativePtr = createNative ( databaseFile , Durability . FULL . value , false , false ) ; 
 + } 
 + context = new Context ( ) ; 
 + checkNativePtrNotZero ( ) ; 
 + } 
 + 
 + private native long createNativeWithImplicitTransactions ( long nativeReplicationPtr ) ; 
 + 
 + private native long nativeCreateReplication ( String databaseFile ) ; 
 + 
 + private native long nativeCreateTransactLogRegistry ( String databaseFile ) ; 
 + 
 public SharedGroup ( String databaseFile , Durability durability ) { 
 context = new Context ( ) ; 
 this . nativePtr = createNative ( databaseFile , durability . value , false , false ) ; 
 @ @ - 48 , 6 + 70 , 25 @ @ public class SharedGroup implements Closeable { 
 checkNativePtr ( ) ; 
 } 
 * / 
 + 
 + public void advanceRead ( ) { 
 + nativeAdvanceRead ( nativePtr , nativeTransactLogRegistryPtr ) ; 
 + } 
 + 
 + private native void nativeAdvanceRead ( long nativePtr , long nativeTransactLogRegistryPtr ) ; 
 + 
 + public void promoteToWrite ( ) { 
 + nativePromoteToWrite ( nativePtr , nativeTransactLogRegistryPtr ) ; 
 + } 
 + 
 + private native void nativePromoteToWrite ( long nativePtr , long nativeTransactLogRegistryPtr ) ; 
 + 
 + public void commitAndContinueAsRead ( ) { 
 + nativeCommitAndContinueAsRead ( nativePtr ) ; 
 + } 
 + 
 + private native void nativeCommitAndContinueAsRead ( long nativePtr ) ; 
 + 
 public WriteTransaction beginWrite ( ) { 
 if ( activeTransaction ) 
 throw new IllegalStateException ( 
 @ @ - 99 , 19 + 140 , 39 @ @ public class SharedGroup implements Closeable { 
 throw new IllegalStateException ( 
 " Can ' t close the SharedGroup during an active transaction " ) ; 
 
 - synchronized ( context ) { 
 + synchronized ( context ) { 
 if ( nativePtr ! = 0 ) { 
 nativeClose ( nativePtr ) ; 
 - nativePtr = 0 ; 
 + nativePtr = 0 ; 
 + if ( implicistTransactionsEnabled ) { 
 + if ( nativeTransactLogRegistryPtr ! = 0 ) { 
 + nativeCloseTransactRegistryLog ( nativeTransactLogRegistryPtr ) ; 
 + nativeTransactLogRegistryPtr = 0 ; 
 + } 
 + if ( nativeReplicationPtr ! = 0 ) { 
 + nativeCloseReplication ( nativeReplicationPtr ) ; 
 + nativeReplicationPtr = 0 ; 
 + } 
 + } 
 } 
 } 
 } 
 - 
 + 
 protected void finalize ( ) { 
 synchronized ( context ) { 
 if ( nativePtr ! = 0 ) { 
 context . asyncDisposeSharedGroup ( nativePtr ) ; 
 nativePtr = 0 ; / / Set to 0 if finalize is called before close ( ) for some reason 
 + if ( implicistTransactionsEnabled ) { 
 + if ( nativeTransactLogRegistryPtr ! = 0 ) { 
 + nativeCloseTransactRegistryLog ( nativeTransactLogRegistryPtr ) ; 
 + nativeTransactLogRegistryPtr = 0 ; 
 + } 
 + if ( nativeReplicationPtr ! = 0 ) { 
 + nativeCloseReplication ( nativeReplicationPtr ) ; 
 + nativeReplicationPtr = 0 ; 
 + } 
 + } 
 } 
 } 
 } 
 @ @ - 172 , 4 + 233 , 7 @ @ public class SharedGroup implements Closeable { 
 } 
 
 protected static native void nativeClose ( long nativePtr ) ; 
 + private native void nativeCloseTransactRegistryLog ( long nativeTransactLogRegistryPtr ) ; 
 + private native void nativeCloseReplication ( long nativeReplicationPtr ) ; 
 + 
 } 
 diff - - git a / realm - java - core / src / main / java / io / realm / Table . java b / realm - java - core / src / main / java / io / realm / Table . java 
 index 3b7b37b . . 0777400 100644 
 - - - a / realm - java - core / src / main / java / io / realm / Table . java 
 + + + b / realm - java - core / src / main / java / io / realm / Table . java 
 @ @ - 215 , 7 + 215 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 * Updates a table specification from a Table specification structure . 
 * / 
 public void updateFromSpec ( TableSpec tableSpec ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeUpdateFromSpec ( nativePtr , tableSpec ) ; 
 } 
 
 @ @ - 250 , 7 + 250 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 * / 
 @ Override 
 public void clear ( ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeClear ( nativePtr ) ; 
 } 
 
 @ @ - 328 , 7 + 328 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 * / 
 @ Override 
 public void remove ( long rowIndex ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeRemove ( nativePtr , rowIndex ) ; 
 } 
 
 @ @ - 336 , 7 + 336 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 @ Override 
 public void removeLast ( ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeRemoveLast ( nativePtr ) ; 
 } 
 
 @ @ - 346 , 7 + 346 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 * EXPERIMENTAL function 
 * / 
 public void moveLastOver ( long rowIndex ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeMoveLastOver ( nativePtr , rowIndex ) ; 
 } 
 
 @ @ - 355 , 12 + 355 , 12 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 / / Row Handling methods . 
 public long addEmptyRow ( ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 return nativeAddEmptyRow ( nativePtr , 1 ) ; 
 } 
 
 public long addEmptyRows ( long rows ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 if ( rows < 1 ) 
 throw new IllegalArgumentException ( " ' rows ' must be > 0 . " ) ; 
 return nativeAddEmptyRow ( nativePtr , rows ) ; 
 @ @ - 387 , 7 + 387 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 * @ param values 
 * / 
 public void addAt ( long rowIndex , Object . . . values ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 
 / / Check index 
 long size = size ( ) ; 
 @ @ - 521 , 7 + 521 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 * @ param values 
 * / 
 public void set ( long rowIndex , Object . . . values ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 
 / / Check index 
 long size = size ( ) ; 
 @ @ - 570 , 37 + 570 , 37 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 public class InternalMethods { 
 
 public void insertLong ( long columnIndex , long rowIndex , long value ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeInsertLong ( nativePtr , columnIndex , rowIndex , value ) ; 
 } 
 
 public void insertDouble ( long columnIndex , long rowIndex , double value ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeInsertDouble ( nativePtr , columnIndex , rowIndex , value ) ; 
 } 
 
 public void insertFloat ( long columnIndex , long rowIndex , float value ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeInsertFloat ( nativePtr , columnIndex , rowIndex , value ) ; 
 } 
 
 public void insertBoolean ( long columnIndex , long rowIndex , boolean value ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeInsertBoolean ( nativePtr , columnIndex , rowIndex , value ) ; 
 } 
 
 public void insertDate ( long columnIndex , long rowIndex , Date date ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeInsertDate ( nativePtr , columnIndex , rowIndex , date . getTime ( ) / 1000 ) ; 
 } 
 
 public void insertString ( long columnIndex , long rowIndex , String value ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeInsertString ( nativePtr , columnIndex , rowIndex , value ) ; 
 } 
 
 public void insertMixed ( long columnIndex , long rowIndex , Mixed data ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeInsertMixed ( nativePtr , columnIndex , rowIndex , data ) ; 
 } 
 
 @ @ - 619 , 7 + 619 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 * / 
 
 public void insertBinary ( long columnIndex , long rowIndex , byte [ ] data ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 if ( data ! = null ) 
 nativeInsertByteArray ( nativePtr , columnIndex , rowIndex , data ) ; 
 else 
 @ @ - 627 , 13 + 627 , 13 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 } 
 
 public void insertSubtable ( long columnIndex , long rowIndex , Object [ ] [ ] values ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeInsertSubtable ( nativePtr , columnIndex , rowIndex ) ; 
 insertSubtableValues ( rowIndex , columnIndex , values ) ; 
 } 
 
 public void insertDone ( ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeInsertDone ( nativePtr ) ; 
 } 
 } 
 @ @ - 813 , 7 + 813 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 protected native long nativeGetSubtableSize ( long nativeTablePtr , long columnIndex , long rowIndex ) ; 
 
 public void clearSubtable ( long columnIndex , long rowIndex ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeClearSubtable ( nativePtr , columnIndex , rowIndex ) ; 
 } 
 
 @ @ - 826 , 7 + 826 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 @ Override 
 public void setLong ( long columnIndex , long rowIndex , long value ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeSetLong ( nativePtr , columnIndex , rowIndex , value ) ; 
 } 
 
 @ @ - 834 , 7 + 834 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 @ Override 
 public void setBoolean ( long columnIndex , long rowIndex , boolean value ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeSetBoolean ( nativePtr , columnIndex , rowIndex , value ) ; 
 } 
 
 @ @ - 842 , 7 + 842 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 @ Override 
 public void setFloat ( long columnIndex , long rowIndex , float value ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeSetFloat ( nativePtr , columnIndex , rowIndex , value ) ; 
 } 
 
 @ @ - 850 , 7 + 850 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 @ Override 
 public void setDouble ( long columnIndex , long rowIndex , double value ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeSetDouble ( nativePtr , columnIndex , rowIndex , value ) ; 
 } 
 
 @ @ - 860 , 7 + 860 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 public void setDate ( long columnIndex , long rowIndex , Date date ) { 
 if ( date = = null ) 
 throw new IllegalArgumentException ( " Null Date is not allowed . " ) ; 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeSetDate ( nativePtr , columnIndex , rowIndex , date . getTime ( ) / 1000 ) ; 
 } 
 
 @ @ - 870 , 7 + 870 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 public void setString ( long columnIndex , long rowIndex , String value ) { 
 if ( value = = null ) 
 throw new IllegalArgumentException ( " Null String is not allowed . " ) ; 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeSetString ( nativePtr , columnIndex , rowIndex , value ) ; 
 } 
 
 @ @ - 905 , 7 + 905 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 @ Override 
 public void setBinaryByteArray ( long columnIndex , long rowIndex , byte [ ] data ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 if ( data = = null ) 
 throw new IllegalArgumentException ( " Null Array " ) ; 
 nativeSetByteArray ( nativePtr , columnIndex , rowIndex , data ) ; 
 @ @ - 924 , 7 + 924 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 * / 
 @ Override 
 public void setMixed ( long columnIndex , long rowIndex , Mixed data ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 if ( data = = null ) 
 throw new IllegalArgumentException ( ) ; 
 nativeSetMixed ( nativePtr , columnIndex , rowIndex , data ) ; 
 @ @ - 941 , 7 + 941 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 / / ! ! ! TODO : New . Support in highlevel API 
 @ Override 
 public void adjust ( long columnIndex , long value ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeAddInt ( nativePtr , columnIndex , value ) ; 
 } 
 
 @ @ - 949 , 7 + 949 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 
 public void setIndex ( long columnIndex ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 if ( getColumnType ( columnIndex ) ! = ColumnType . STRING ) 
 throw new IllegalArgumentException ( " Index is only supported on string columns . " ) ; 
 nativeSetIndex ( nativePtr , columnIndex ) ; 
 @ @ - 964 , 6 + 964 , 11 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 protected native boolean nativeHasIndex ( long nativePtr , long columnIndex ) ; 
 
 + 
 + private void checkImmutable ( ) { 
 + / / if ( immutable ) throwImmutable ( ) ; 
 + } 
 + 
 / / 
 / / Aggregate functions 
 / / 
 @ @ - 1313 , 7 + 1318 , 7 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 / / Optimize 
 public void optimize ( ) { 
 - if ( immutable ) throwImmutable ( ) ; 
 + checkImmutable ( ) ; 
 nativeOptimize ( nativePtr ) ; 
 } 
 
 diff - - git a / realm - java - test / src / test / java / io / realm / JNIImplicitTransactions . java b / realm - java - test / src / test / java / io / realm / JNIImplicitTransactions . java 
 new file mode 100644 
 index 0000000 . . 6b7b79c 
 - - - / dev / null 
 + + + b / realm - java - test / src / test / java / io / realm / JNIImplicitTransactions . java 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + package io . realm ; 
 + 
 + import org . testng . annotations . Test ; 
 + 
 + import java . io . File ; 
 + 
 + import static org . testng . AssertJUnit . assertEquals ; 
 + 
 + public class JNIImplicitTransactions { 
 + 
 + private void deleteFile ( String filename ) { 
 + File f = new File ( filename ) ; 
 + if ( f . exists ( ) ) 
 + f . delete ( ) ; 
 + f = new File ( filename + " . lock " ) ; 
 + if ( f . exists ( ) ) 
 + f . delete ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testImplicitTransactions ( ) { 
 + 
 + deleteFile ( " implicit . realm " ) ; 
 + SharedGroup sg = new SharedGroup ( " implicit . realm " , true ) ; 
 + 
 + WriteTransaction wt = sg . beginWrite ( ) ; 
 + 
 + Table table = wt . getTable ( " test " ) ; 
 + table . addColumn ( ColumnType . INTEGER , " integer " ) ; 
 + table . addEmptyRow ( ) ; 
 + 
 + wt . commit ( ) ; 
 + 
 + ReadTransaction rt = sg . beginRead ( ) ; 
 + 
 + Table test = rt . getTable ( " test " ) ; 
 + 
 + 
 + assertEquals ( 1 , test . size ( ) ) ; 
 + 
 + sg . promoteToWrite ( ) ; 
 + 
 + test . addEmptyRow ( ) ; 
 + 
 + sg . commitAndContinueAsRead ( ) ; 
 + 
 + assertEquals ( 2 , test . size ( ) ) ; 
 + 
 + test . addEmptyRow ( ) ; 
 + 
 + System . out . println ( test . size ( ) ) ; 
 + 
 + 
 + 
 + 
 + 
 + 
 + } 
 + 
 + } 
 diff - - git a / realm _ jni / src / io _ realm _ SharedGroup . cpp b / realm _ jni / src / io _ realm _ SharedGroup . cpp 
 index a8d8558 . . e6bed00 100644 
 - - - a / realm _ jni / src / io _ realm _ SharedGroup . cpp 
 + + + b / realm _ jni / src / io _ realm _ SharedGroup . cpp 
 @ @ - 3 , 6 + 3 , 8 @ @ 
 # include < jni . h > 
 
 # include < tightdb / group _ shared . hpp > 
 + # include < tightdb / replication . hpp > 
 + # include < tightdb / commit _ log . hpp > 
 
 # include " util . hpp " 
 # include " io _ realm _ SharedGroup . h " 
 @ @ - 62 , 6 + 64 , 84 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ createNative ( 
 return 0 ; 
 } 
 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ createNativeWithImplicitTransactions 
 + ( JNIEnv * env , jobject , jlong native _ replication _ ptr ) 
 + { 
 + try { 
 + SharedGroup * db = new SharedGroup ( * reinterpret _ cast < tightdb : : Replication * > ( native _ replication _ ptr ) ) ; 
 + 
 + return reinterpret _ cast < jlong > ( db ) ; 
 + } 
 + catch ( SharedGroup : : PresumablyStaleLockFile & e ) { 
 + ThrowException ( env , FileAccessError , e . what ( ) , " Presumably a stall . lock file is present . " ) ; 
 + } 
 + catch ( SharedGroup : : LockFileButNoData & e ) { 
 + ThrowException ( env , FileAccessError , e . what ( ) , " The database file is missing , but a . lock file is present . " ) ; 
 + } 
 + CATCH _ STD ( ) 
 + return 0 ; 
 + } 
 + 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ nativeCreateReplication 
 + ( JNIEnv * env , jobject , jstring file _ name ) 
 + { 
 + const char * file _ name _ ptr = env - > GetStringUTFChars ( file _ name , 0 ) ; 
 + if ( ! file _ name _ ptr ) 
 + return 0 ; / / Exception is thrown by GetStringUTFChars ( ) 
 + 
 + try { 
 + Replication * repl = makeWriteLogCollector ( file _ name _ ptr ) ; 
 + return reinterpret _ cast < jlong > ( repl ) ; 
 + } 
 + CATCH _ STD ( ) 
 + return 0 ; 
 + } 
 + 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ nativeCreateTransactLogRegistry 
 + ( JNIEnv * env , jobject , jstring file _ name ) 
 + { 
 + const char * file _ name _ ptr = env - > GetStringUTFChars ( file _ name , 0 ) ; 
 + if ( ! file _ name _ ptr ) 
 + return 0 ; / / Exception is thrown by GetStringUTFChars ( ) 
 + 
 + try { 
 + LangBindHelper : : TransactLogRegistry * wlr = getWriteLogs ( file _ name _ ptr ) ; 
 + return reinterpret _ cast < jlong > ( wlr ) ; 
 + } 
 + CATCH _ STD ( ) 
 + return 0 ; 
 + } 
 + 
 + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeAdvanceRead 
 + ( JNIEnv * , jobject , jlong native _ ptr , jlong native _ tansact _ log _ registry _ ptr ) 
 + { 
 + LangBindHelper : : advance _ read ( * SG ( native _ ptr ) , * reinterpret _ cast < LangBindHelper : : TransactLogRegistry * > ( native _ tansact _ log _ registry _ ptr ) ) ; 
 + } 
 + 
 + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativePromoteToWrite 
 + ( JNIEnv * , jobject , jlong native _ ptr , jlong native _ tansact _ log _ registry _ ptr ) 
 + { 
 + LangBindHelper : : promote _ to _ write ( * SG ( native _ ptr ) , * reinterpret _ cast < LangBindHelper : : TransactLogRegistry * > ( native _ tansact _ log _ registry _ ptr ) ) ; 
 + } 
 + 
 + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCommitAndContinueAsRead 
 + ( JNIEnv * , jobject , jlong native _ ptr ) 
 + { 
 + LangBindHelper : : commit _ and _ continue _ as _ read ( * SG ( native _ ptr ) ) ; 
 + } 
 + 
 + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCloseTransactRegistryLog 
 + ( JNIEnv * , jobject , jlong native _ tansact _ log _ registry _ ptr ) 
 + { 
 + delete reinterpret _ cast < LangBindHelper : : TransactLogRegistry * > ( native _ tansact _ log _ registry _ ptr ) ; 
 + } 
 + 
 + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCloseReplication 
 + ( JNIEnv * , jobject , jlong native _ replication _ ptr ) 
 + { 
 + delete reinterpret _ cast < Replication * > ( native _ replication _ ptr ) ; 
 + } 
 + 
 JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeClose ( 
 JNIEnv * , jclass , jlong native _ ptr ) 
 { 
 diff - - git a / realm _ jni / src / io _ realm _ SharedGroup . h b / realm _ jni / src / io _ realm _ SharedGroup . h 
 index e779e5c . . bc4b1b3 100644 
 - - - a / realm _ jni / src / io _ realm _ SharedGroup . h 
 + + + b / realm _ jni / src / io _ realm _ SharedGroup . h 
 @ @ - 9 , 6 + 9 , 54 @ @ extern " C " { 
 # endif 
 / * 
 * Class : io _ realm _ SharedGroup 
 + * Method : createNativeWithImplicitTransactions 
 + * Signature : ( J ) J 
 + * / 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ createNativeWithImplicitTransactions 
 + ( JNIEnv * , jobject , jlong ) ; 
 + 
 + / * 
 + * Class : io _ realm _ SharedGroup 
 + * Method : nativeCreateReplication 
 + * Signature : ( Ljava / lang / String ; ) J 
 + * / 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ nativeCreateReplication 
 + ( JNIEnv * , jobject , jstring ) ; 
 + 
 + / * 
 + * Class : io _ realm _ SharedGroup 
 + * Method : nativeCreateTransactLogRegistry 
 + * Signature : ( Ljava / lang / String ; ) J 
 + * / 
 + JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ nativeCreateTransactLogRegistry 
 + ( JNIEnv * , jobject , jstring ) ; 
 + 
 + / * 
 + * Class : io _ realm _ SharedGroup 
 + * Method : nativeAdvanceRead 
 + * Signature : ( JJ ) V 
 + * / 
 + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeAdvanceRead 
 + ( JNIEnv * , jobject , jlong , jlong ) ; 
 + 
 + / * 
 + * Class : io _ realm _ SharedGroup 
 + * Method : nativePromoteToWrite 
 + * Signature : ( JJ ) V 
 + * / 
 + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativePromoteToWrite 
 + ( JNIEnv * , jobject , jlong , jlong ) ; 
 + 
 + / * 
 + * Class : io _ realm _ SharedGroup 
 + * Method : nativeCommitAndContinueAsRead 
 + * Signature : ( J ) V 
 + * / 
 + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCommitAndContinueAsRead 
 + ( JNIEnv * , jobject , jlong ) ; 
 + 
 + / * 
 + * Class : io _ realm _ SharedGroup 
 * Method : nativeGetDefaultReplicationDatabaseFileName 
 * Signature : ( ) Ljava / lang / String ; 
 * / 
 @ @ - 87 , 6 + 135 , 22 @ @ JNIEXPORT jlong JNICALL Java _ io _ realm _ SharedGroup _ createNative 
 JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeClose 
 ( JNIEnv * , jclass , jlong ) ; 
 
 + / * 
 + * Class : io _ realm _ SharedGroup 
 + * Method : nativeCloseTransactRegistryLog 
 + * Signature : ( J ) V 
 + * / 
 + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCloseTransactRegistryLog 
 + ( JNIEnv * , jobject , jlong ) ; 
 + 
 + / * 
 + * Class : io _ realm _ SharedGroup 
 + * Method : nativeCloseReplication 
 + * Signature : ( J ) V 
 + * / 
 + JNIEXPORT void JNICALL Java _ io _ realm _ SharedGroup _ nativeCloseReplication 
 + ( JNIEnv * , jobject , jlong ) ; 
 + 
 # ifdef _ _ cplusplus 
 } 
 # endif
