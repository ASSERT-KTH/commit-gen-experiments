BLEU SCORE: 0.040583489434387374

TEST MSG: Thread check for copyToRealm / copyToRealmOrUpdate
GENERATED MSG: Reverted getCanonicalPath to getPath

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index c72f48f . . 5f31045 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 1 , 3 + 1 , 9 @ @ <nl> + # # 0 . 88 . 3 <nl> + <nl> + # # # Enhancements <nl> + <nl> + * Throws a IllegalArgumentExcpetion when calling Realm . copyToRealm ( ) / Realm . copyToRealmOrUpdate ( ) with a RealmObject which belongs to another Realm instance in a different thread . <nl> + <nl> # # 0 . 88 . 2 <nl> <nl> * Updated Realm Core to 0 . 97 . 2 . <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 1d4b10d . . dded246 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 563 , 6 + 563 , 12 @ @ public class RealmProxyClassGenerator { <nl> " Realm " , " realm " , className , " object " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , " cache " / / Argument type & argument name <nl> ) ; <nl> <nl> + writer <nl> + . beginControlFlow ( " if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . threadId ! = realm . threadId ) " ) <nl> + . emitStatement ( " throw new IllegalArgumentException ( \ " Objects which belong to Realm instances in other " + <nl> + " threads cannot be copied into this Realm instance . \ " ) " ) <nl> + . endControlFlow ( ) ; <nl> + <nl> / / If object is already in the Realm there is nothing to update <nl> writer <nl> . beginControlFlow ( " if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) " ) <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> index a0f31d9 . . 2bc6e1a 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> @ @ - 573 , 6 + 573 , 10 @ @ public class AllTypesRealmProxy extends AllTypes <nl> } <nl> <nl> public static AllTypes copyOrUpdate ( Realm realm , AllTypes object , boolean update , Map < RealmObject , RealmObjectProxy > cache ) { <nl> + if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . threadId ! = realm . threadId ) { <nl> + throw new IllegalArgumentException ( <nl> + " Objects which belong to Realm instances in other threads cannot be copied into this Realm instance . " ) ; <nl> + } <nl> if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { <nl> return object ; <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> index c87b718 . . d9ed8c1 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> @ @ - 266 , 6 + 266 , 10 @ @ public class BooleansRealmProxy extends Booleans <nl> } <nl> <nl> public static Booleans copyOrUpdate ( Realm realm , Booleans object , boolean update , Map < RealmObject , RealmObjectProxy > cache ) { <nl> + if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . threadId ! = realm . threadId ) { <nl> + throw new IllegalArgumentException ( <nl> + " Objects which belong to Realm instances in other threads cannot be copied into this Realm instance . " ) ; <nl> + } <nl> if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { <nl> return object ; <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java <nl> index a096482 . . f33f78d 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java <nl> @ @ - 1081 , 6 + 1081 , 10 @ @ public class NullTypesRealmProxy extends NullTypes <nl> } <nl> <nl> public static NullTypes copyOrUpdate ( Realm realm , NullTypes object , boolean update , Map < RealmObject , RealmObjectProxy > cache ) { <nl> + if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . threadId ! = realm . threadId ) { <nl> + throw new IllegalArgumentException ( <nl> + " Objects which belong to Realm instances in other threads cannot be copied into this Realm instance . " ) ; <nl> + } <nl> if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { <nl> return object ; <nl> } <nl> diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> index 9935490 . . 7f8e716 100644 <nl> - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> @ @ - 190 , 6 + 190 , 10 @ @ public class SimpleRealmProxy extends Simple <nl> } <nl> <nl> public static Simple copyOrUpdate ( Realm realm , Simple object , boolean update , Map < RealmObject , RealmObjectProxy > cache ) { <nl> + if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . threadId ! = realm . threadId ) { <nl> + throw new IllegalArgumentException ( <nl> + " Objects which belong to Realm instances in other threads cannot be copied into this Realm instance . " ) ; <nl> + } <nl> if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { <nl> return object ; <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index f027751 . . 0e2c819 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 1364 , 6 + 1364 , 36 @ @ public class RealmTests { <nl> } <nl> <nl> @ Test <nl> + public void copyToRealm _ objectInOtherThreadThrows ( ) { <nl> + final CountDownLatch bgThreadDoneLatch = new CountDownLatch ( 1 ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + final Dog dog = realm . createObject ( Dog . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + final Realm bgRealm = Realm . getInstance ( realm . getConfiguration ( ) ) ; <nl> + bgRealm . beginTransaction ( ) ; <nl> + try { <nl> + bgRealm . copyToRealm ( dog ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( " Objects which belong to Realm instances in other threads cannot be copied into this " + <nl> + " Realm instance . " , <nl> + expected . getMessage ( ) ) ; <nl> + } <nl> + bgRealm . cancelTransaction ( ) ; <nl> + bgRealm . close ( ) ; <nl> + bgThreadDoneLatch . countDown ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + <nl> + TestHelper . awaitOrFail ( bgThreadDoneLatch ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void copyToRealmOrUpdate _ null ( ) { <nl> realm . beginTransaction ( ) ; <nl> thrown . expect ( IllegalArgumentException . class ) ; <nl> @ @ - 1618 , 6 + 1648 , 68 @ @ public class RealmTests { <nl> } <nl> <nl> @ Test <nl> + public void copyToRealmOrUpdate _ objectInOtherThreadThrows ( ) { <nl> + final CountDownLatch bgThreadDoneLatch = new CountDownLatch ( 1 ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + final OwnerPrimaryKey ownerPrimaryKey = realm . createObject ( OwnerPrimaryKey . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + final Realm bgRealm = Realm . getInstance ( realm . getConfiguration ( ) ) ; <nl> + bgRealm . beginTransaction ( ) ; <nl> + try { <nl> + bgRealm . copyToRealm ( ownerPrimaryKey ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( " Objects which belong to Realm instances in other threads cannot be copied into this " + <nl> + " Realm instance . " , <nl> + expected . getMessage ( ) ) ; <nl> + } <nl> + bgRealm . cancelTransaction ( ) ; <nl> + bgRealm . close ( ) ; <nl> + bgThreadDoneLatch . countDown ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + <nl> + TestHelper . awaitOrFail ( bgThreadDoneLatch ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void copyToRealmOrUpdate _ listHasObjectInOtherThreadThrows ( ) { <nl> + final CountDownLatch bgThreadDoneLatch = new CountDownLatch ( 1 ) ; <nl> + final OwnerPrimaryKey ownerPrimaryKey = new OwnerPrimaryKey ( ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + ownerPrimaryKey . setDogs ( new RealmList < Dog > ( dog ) ) ; <nl> + <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + final Realm bgRealm = Realm . getInstance ( realm . getConfiguration ( ) ) ; <nl> + bgRealm . beginTransaction ( ) ; <nl> + try { <nl> + bgRealm . copyToRealm ( ownerPrimaryKey ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + assertEquals ( " Objects which belong to Realm instances in other threads cannot be copied into this " + <nl> + " Realm instance . " , <nl> + expected . getMessage ( ) ) ; <nl> + } <nl> + bgRealm . cancelTransaction ( ) ; <nl> + bgRealm . close ( ) ; <nl> + bgThreadDoneLatch . countDown ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + <nl> + TestHelper . awaitOrFail ( bgThreadDoneLatch ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void getInstance _ differentEncryptionKeys ( ) { <nl> byte [ ] key1 = TestHelper . getRandomKey ( 42 ) ; <nl> byte [ ] key2 = TestHelper . getRandomKey ( 42 ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 87ec28e . . c00cc93 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 58 , 7 + 58 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> / / Thread pool for all async operations ( Query & transaction ) <nl> static final RealmThreadPoolExecutor asyncQueryExecutor = RealmThreadPoolExecutor . newDefaultExecutor ( ) ; <nl> <nl> - protected long threadId ; <nl> + final long threadId ; <nl> protected RealmConfiguration configuration ; <nl> protected SharedGroupManager sharedGroupManager ; <nl> protected boolean autoRefresh ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index c79deb0 . . d362a4c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 739 , 7 + 739 , 8 @ @ public final class Realm extends BaseRealm { <nl> * <nl> * @ param object the { @ link io . realm . RealmObject } to copy to the Realm . <nl> * @ return a managed RealmObject with its properties backed by the Realm . <nl> - * @ throws java . lang . IllegalArgumentException if RealmObject is { @ code null } . <nl> + * @ throws java . lang . IllegalArgumentException if the object is { @ code null } or it belongs to a Realm instance <nl> + * in a different thread . <nl> * / <nl> public < E extends RealmObject > E copyToRealm ( E object ) { <nl> checkNotNullObject ( object ) ; <nl> @ @ - 756 , 7 + 757 , 8 @ @ public final class Realm extends BaseRealm { <nl> * <nl> * @ param object { @ link io . realm . RealmObject } to copy or update . <nl> * @ return the new or updated RealmObject with all its properties backed by the Realm . <nl> - * @ throws java . lang . IllegalArgumentException if RealmObject is { @ code null } or doesn ' t have a Primary key defined . <nl> + * @ throws java . lang . IllegalArgumentException if the object is { @ code null } or it belongs to a Realm instance <nl> + * in a different thread . <nl> * @ see # copyToRealm ( RealmObject ) <nl> * / <nl> public < E extends RealmObject > E copyToRealmOrUpdate ( E object ) {
NEAREST DIFF (one line): diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 842cbbf . . beae7c3 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 508 , 7 + 508 , 7 @ @ public class RealmProxyClassGenerator { <nl> <nl> / / If object is already in the Realm there is nothing to update <nl> writer <nl> - . beginControlFlow ( " if ( object . realm ! = null & & object . realm . getCanonicalPath ( ) . equals ( realm . getCanonicalPath ( ) ) ) " ) <nl> + . beginControlFlow ( " if ( object . realm ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) " ) <nl> . emitStatement ( " return object " ) <nl> . endControlFlow ( ) ; <nl> <nl> @ @ - 732 , 7 + 732 , 7 @ @ public class RealmProxyClassGenerator { <nl> private void emitHashcodeMethod ( JavaWriter writer ) throws IOException { <nl> writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( " int " , " hashCode " , EnumSet . of ( Modifier . PUBLIC ) ) ; <nl> - writer . emitStatement ( " String realmName = realm . getCanonicalPath ( ) " ) ; <nl> + writer . emitStatement ( " String realmName = realm . getPath ( ) " ) ; <nl> writer . emitStatement ( " String tableName = row . getTable ( ) . getName ( ) " ) ; <nl> writer . emitStatement ( " long rowIndex = row . getIndex ( ) " ) ; <nl> writer . emitEmptyLine ( ) ; <nl> @ @ - 753 , 8 + 753 , 8 @ @ public class RealmProxyClassGenerator { <nl> writer . emitStatement ( " if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false " ) ; <nl> writer . emitStatement ( " % s a % s = ( % s ) o " , proxyClassName , className , proxyClassName ) ; / / FooRealmProxy aFoo = ( FooRealmProxy ) o <nl> writer . emitEmptyLine ( ) ; <nl> - writer . emitStatement ( " String path = realm . getCanonicalPath ( ) " ) ; <nl> - writer . emitStatement ( " String otherPath = a % s . realm . getCanonicalPath ( ) " , className ) ; <nl> + writer . emitStatement ( " String path = realm . getPath ( ) " ) ; <nl> + writer . emitStatement ( " String otherPath = a % s . realm . getPath ( ) " , className ) ; <nl> writer . emitStatement ( " if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; " ) ; <nl> writer . emitEmptyLine ( ) ; <nl> writer . emitStatement ( " String tableName = row . getTable ( ) . getName ( ) " ) ; <nl> diff - - git a / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java b / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> index 4d0d02b . . ae50662 100644 <nl> - - - a / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> + + + b / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java <nl> @ @ - 406 , 7 + 406 , 7 @ @ public class AllTypesRealmProxy extends AllTypes { <nl> } <nl> <nl> public static AllTypes copyOrUpdate ( Realm realm , AllTypes object , boolean update , Map < RealmObject , RealmObject > cache ) { <nl> - if ( object . realm ! = null & & object . realm . getCanonicalPath ( ) . equals ( realm . getCanonicalPath ( ) ) ) { <nl> + if ( object . realm ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { <nl> return object ; <nl> } <nl> AllTypes realmObject = null ; <nl> @ @ - 552 , 7 + 552 , 7 @ @ public class AllTypesRealmProxy extends AllTypes { <nl> <nl> @ Override <nl> public int hashCode ( ) { <nl> - String realmName = realm . getCanonicalPath ( ) ; <nl> + String realmName = realm . getPath ( ) ; <nl> String tableName = row . getTable ( ) . getName ( ) ; <nl> long rowIndex = row . getIndex ( ) ; <nl> <nl> @ @ - 569 , 8 + 569 , 8 @ @ public class AllTypesRealmProxy extends AllTypes { <nl> if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; <nl> AllTypesRealmProxy aAllTypes = ( AllTypesRealmProxy ) o ; <nl> <nl> - String path = realm . getCanonicalPath ( ) ; <nl> - String otherPath = aAllTypes . realm . getCanonicalPath ( ) ; <nl> + String path = realm . getPath ( ) ; <nl> + String otherPath = aAllTypes . realm . getPath ( ) ; <nl> if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; ; <nl> <nl> String tableName = row . getTable ( ) . getName ( ) ; <nl> diff - - git a / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java b / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> index 3c28806 . . 1806078 100644 <nl> - - - a / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> + + + b / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java <nl> @ @ - 177 , 7 + 177 , 7 @ @ public class BooleansRealmProxy extends Booleans { <nl> } <nl> <nl> public static Booleans copyOrUpdate ( Realm realm , Booleans object , boolean update , Map < RealmObject , RealmObject > cache ) { <nl> - if ( object . realm ! = null & & object . realm . getCanonicalPath ( ) . equals ( realm . getCanonicalPath ( ) ) ) { <nl> + if ( object . realm ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { <nl> return object ; <nl> } <nl> return copy ( realm , object , update , cache ) ; <nl> @ @ - 222 , 7 + 222 , 7 @ @ public class BooleansRealmProxy extends Booleans { <nl> <nl> @ Override <nl> public int hashCode ( ) { <nl> - String realmName = realm . getCanonicalPath ( ) ; <nl> + String realmName = realm . getPath ( ) ; <nl> String tableName = row . getTable ( ) . getName ( ) ; <nl> long rowIndex = row . getIndex ( ) ; <nl> <nl> @ @ - 239 , 8 + 239 , 8 @ @ public class BooleansRealmProxy extends Booleans { <nl> if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; <nl> BooleansRealmProxy aBooleans = ( BooleansRealmProxy ) o ; <nl> <nl> - String path = realm . getCanonicalPath ( ) ; <nl> - String otherPath = aBooleans . realm . getCanonicalPath ( ) ; <nl> + String path = realm . getPath ( ) ; <nl> + String otherPath = aBooleans . realm . getPath ( ) ; <nl> if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; ; <nl> <nl> String tableName = row . getTable ( ) . getName ( ) ; <nl> diff - - git a / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java b / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> index 4882a2e . . 243da99 100644 <nl> - - - a / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> + + + b / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java <nl> @ @ - 150 , 7 + 150 , 7 @ @ public class SimpleRealmProxy extends Simple { <nl> } <nl> <nl> public static Simple copyOrUpdate ( Realm realm , Simple object , boolean update , Map < RealmObject , RealmObject > cache ) { <nl> - if ( object . realm ! = null & & object . realm . getCanonicalPath ( ) . equals ( realm . getCanonicalPath ( ) ) ) { <nl> + if ( object . realm ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { <nl> return object ; <nl> } <nl> return copy ( realm , object , update , cache ) ; <nl> @ @ - 189 , 7 + 189 , 7 @ @ public class SimpleRealmProxy extends Simple { <nl> <nl> @ Override <nl> public int hashCode ( ) { <nl> - String realmName = realm . getCanonicalPath ( ) ; <nl> + String realmName = realm . getPath ( ) ; <nl> String tableName = row . getTable ( ) . getName ( ) ; <nl> long rowIndex = row . getIndex ( ) ; <nl> <nl> @ @ - 206 , 8 + 206 , 8 @ @ public class SimpleRealmProxy extends Simple { <nl> if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; <nl> SimpleRealmProxy aSimple = ( SimpleRealmProxy ) o ; <nl> <nl> - String path = realm . getCanonicalPath ( ) ; <nl> - String otherPath = aSimple . realm . getCanonicalPath ( ) ; <nl> + String path = realm . getPath ( ) ; <nl> + String otherPath = aSimple . realm . getPath ( ) ; <nl> if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; ; <nl> <nl> String tableName = row . getTable ( ) . getName ( ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> index c06ce15 . . 5a36a79 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 294 , 7 + 294 , 7 @ @ public class NotificationsTest extends AndroidTestCase { <nl> Realm . deleteRealmFile ( getContext ( ) , " private - realm " ) ; <nl> Realm instance1 = Realm . getInstance ( getContext ( ) , " private - realm " ) ; <nl> Realm instance2 = Realm . getInstance ( getContext ( ) , " private - realm " ) ; <nl> - assertEquals ( instance1 . getCanonicalPath ( ) , instance2 . getCanonicalPath ( ) ) ; <nl> + assertEquals ( instance1 . getPath ( ) , instance2 . getPath ( ) ) ; <nl> assertNotNull ( instance1 . getHandler ( ) ) ; <nl> <nl> / / If multiple instances are open on the same thread , don ' t remove handler on that thread <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index c782c8b . . 4a47cde 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 1496 , 7 + 1496 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> } finally { <nl> if ( reEncryptedRealm ! = null ) { <nl> reEncryptedRealm . close ( ) ; <nl> - boolean isDeleted = new File ( reEncryptedRealm . getCanonicalPath ( ) ) . delete ( ) ; <nl> + boolean isDeleted = new File ( reEncryptedRealm . getPath ( ) ) . delete ( ) ; <nl> if ( ! isDeleted ) { <nl> fail ( ) ; <nl> } <nl> @ @ - 1517 , 7 + 1517 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> } finally { <nl> if ( decryptedRealm ! = null ) { <nl> decryptedRealm . close ( ) ; <nl> - boolean isDeleted = new File ( decryptedRealm . getCanonicalPath ( ) ) . delete ( ) ; <nl> + boolean isDeleted = new File ( decryptedRealm . getPath ( ) ) . delete ( ) ; <nl> if ( ! isDeleted ) { <nl> fail ( ) ; <nl> } <nl> @ @ - 1526 , 7 + 1526 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> } finally { <nl> if ( encryptedRealm ! = null ) { <nl> encryptedRealm . close ( ) ; <nl> - boolean isDeleted = new File ( encryptedRealm . getCanonicalPath ( ) ) . delete ( ) ; <nl> + boolean isDeleted = new File ( encryptedRealm . getPath ( ) ) . delete ( ) ; <nl> if ( ! isDeleted ) { <nl> fail ( ) ; <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 5362617 . . 13816cc 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 1774 , 22 + 1774 , 12 @ @ public final class Realm implements Closeable { <nl> } <nl> <nl> / * * <nl> - * Use { @ link # getCanonicalPath ( ) } instead . <nl> - * <nl> - * @ return The canonical path to the Realm file . <nl> - * / <nl> - @ Deprecated <nl> - public String getPath ( ) { <nl> - return canonicalPath ; <nl> - } <nl> - <nl> - / * * <nl> * Returns the canonical path to where this Realm is persisted on disk . <nl> * <nl> * @ return The canonical path to the Realm file . <nl> * @ see File # getCanonicalPath ( ) <nl> * / <nl> - public String getCanonicalPath ( ) { <nl> + public String getPath ( ) { <nl> return canonicalPath ; <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index c72f48f . . 5f31045 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 1 , 3 + 1 , 9 @ @ 
 + # # 0 . 88 . 3 
 + 
 + # # # Enhancements 
 + 
 + * Throws a IllegalArgumentExcpetion when calling Realm . copyToRealm ( ) / Realm . copyToRealmOrUpdate ( ) with a RealmObject which belongs to another Realm instance in a different thread . 
 + 
 # # 0 . 88 . 2 
 
 * Updated Realm Core to 0 . 97 . 2 . 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 1d4b10d . . dded246 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 563 , 6 + 563 , 12 @ @ public class RealmProxyClassGenerator { 
 " Realm " , " realm " , className , " object " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , " cache " / / Argument type & argument name 
 ) ; 
 
 + writer 
 + . beginControlFlow ( " if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . threadId ! = realm . threadId ) " ) 
 + . emitStatement ( " throw new IllegalArgumentException ( \ " Objects which belong to Realm instances in other " + 
 + " threads cannot be copied into this Realm instance . \ " ) " ) 
 + . endControlFlow ( ) ; 
 + 
 / / If object is already in the Realm there is nothing to update 
 writer 
 . beginControlFlow ( " if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) " ) 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 index a0f31d9 . . 2bc6e1a 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 @ @ - 573 , 6 + 573 , 10 @ @ public class AllTypesRealmProxy extends AllTypes 
 } 
 
 public static AllTypes copyOrUpdate ( Realm realm , AllTypes object , boolean update , Map < RealmObject , RealmObjectProxy > cache ) { 
 + if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . threadId ! = realm . threadId ) { 
 + throw new IllegalArgumentException ( 
 + " Objects which belong to Realm instances in other threads cannot be copied into this Realm instance . " ) ; 
 + } 
 if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { 
 return object ; 
 } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 index c87b718 . . d9ed8c1 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 @ @ - 266 , 6 + 266 , 10 @ @ public class BooleansRealmProxy extends Booleans 
 } 
 
 public static Booleans copyOrUpdate ( Realm realm , Booleans object , boolean update , Map < RealmObject , RealmObjectProxy > cache ) { 
 + if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . threadId ! = realm . threadId ) { 
 + throw new IllegalArgumentException ( 
 + " Objects which belong to Realm instances in other threads cannot be copied into this Realm instance . " ) ; 
 + } 
 if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { 
 return object ; 
 } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java 
 index a096482 . . f33f78d 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / NullTypesRealmProxy . java 
 @ @ - 1081 , 6 + 1081 , 10 @ @ public class NullTypesRealmProxy extends NullTypes 
 } 
 
 public static NullTypes copyOrUpdate ( Realm realm , NullTypes object , boolean update , Map < RealmObject , RealmObjectProxy > cache ) { 
 + if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . threadId ! = realm . threadId ) { 
 + throw new IllegalArgumentException ( 
 + " Objects which belong to Realm instances in other threads cannot be copied into this Realm instance . " ) ; 
 + } 
 if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { 
 return object ; 
 } 
 diff - - git a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 index 9935490 . . 7f8e716 100644 
 - - - a / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 + + + b / realm / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 @ @ - 190 , 6 + 190 , 10 @ @ public class SimpleRealmProxy extends Simple 
 } 
 
 public static Simple copyOrUpdate ( Realm realm , Simple object , boolean update , Map < RealmObject , RealmObjectProxy > cache ) { 
 + if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . threadId ! = realm . threadId ) { 
 + throw new IllegalArgumentException ( 
 + " Objects which belong to Realm instances in other threads cannot be copied into this Realm instance . " ) ; 
 + } 
 if ( ( ( RealmObject ) object ) . realm ! = null & & ( ( RealmObject ) object ) . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { 
 return object ; 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index f027751 . . 0e2c819 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 1364 , 6 + 1364 , 36 @ @ public class RealmTests { 
 } 
 
 @ Test 
 + public void copyToRealm _ objectInOtherThreadThrows ( ) { 
 + final CountDownLatch bgThreadDoneLatch = new CountDownLatch ( 1 ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + final Dog dog = realm . createObject ( Dog . class ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + final Realm bgRealm = Realm . getInstance ( realm . getConfiguration ( ) ) ; 
 + bgRealm . beginTransaction ( ) ; 
 + try { 
 + bgRealm . copyToRealm ( dog ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( " Objects which belong to Realm instances in other threads cannot be copied into this " + 
 + " Realm instance . " , 
 + expected . getMessage ( ) ) ; 
 + } 
 + bgRealm . cancelTransaction ( ) ; 
 + bgRealm . close ( ) ; 
 + bgThreadDoneLatch . countDown ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + 
 + TestHelper . awaitOrFail ( bgThreadDoneLatch ) ; 
 + } 
 + 
 + @ Test 
 public void copyToRealmOrUpdate _ null ( ) { 
 realm . beginTransaction ( ) ; 
 thrown . expect ( IllegalArgumentException . class ) ; 
 @ @ - 1618 , 6 + 1648 , 68 @ @ public class RealmTests { 
 } 
 
 @ Test 
 + public void copyToRealmOrUpdate _ objectInOtherThreadThrows ( ) { 
 + final CountDownLatch bgThreadDoneLatch = new CountDownLatch ( 1 ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + final OwnerPrimaryKey ownerPrimaryKey = realm . createObject ( OwnerPrimaryKey . class ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + final Realm bgRealm = Realm . getInstance ( realm . getConfiguration ( ) ) ; 
 + bgRealm . beginTransaction ( ) ; 
 + try { 
 + bgRealm . copyToRealm ( ownerPrimaryKey ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( " Objects which belong to Realm instances in other threads cannot be copied into this " + 
 + " Realm instance . " , 
 + expected . getMessage ( ) ) ; 
 + } 
 + bgRealm . cancelTransaction ( ) ; 
 + bgRealm . close ( ) ; 
 + bgThreadDoneLatch . countDown ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + 
 + TestHelper . awaitOrFail ( bgThreadDoneLatch ) ; 
 + } 
 + 
 + @ Test 
 + public void copyToRealmOrUpdate _ listHasObjectInOtherThreadThrows ( ) { 
 + final CountDownLatch bgThreadDoneLatch = new CountDownLatch ( 1 ) ; 
 + final OwnerPrimaryKey ownerPrimaryKey = new OwnerPrimaryKey ( ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + realm . commitTransaction ( ) ; 
 + ownerPrimaryKey . setDogs ( new RealmList < Dog > ( dog ) ) ; 
 + 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + final Realm bgRealm = Realm . getInstance ( realm . getConfiguration ( ) ) ; 
 + bgRealm . beginTransaction ( ) ; 
 + try { 
 + bgRealm . copyToRealm ( ownerPrimaryKey ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + assertEquals ( " Objects which belong to Realm instances in other threads cannot be copied into this " + 
 + " Realm instance . " , 
 + expected . getMessage ( ) ) ; 
 + } 
 + bgRealm . cancelTransaction ( ) ; 
 + bgRealm . close ( ) ; 
 + bgThreadDoneLatch . countDown ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + 
 + TestHelper . awaitOrFail ( bgThreadDoneLatch ) ; 
 + } 
 + 
 + @ Test 
 public void getInstance _ differentEncryptionKeys ( ) { 
 byte [ ] key1 = TestHelper . getRandomKey ( 42 ) ; 
 byte [ ] key2 = TestHelper . getRandomKey ( 42 ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 87ec28e . . c00cc93 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 58 , 7 + 58 , 7 @ @ abstract class BaseRealm implements Closeable { 
 / / Thread pool for all async operations ( Query & transaction ) 
 static final RealmThreadPoolExecutor asyncQueryExecutor = RealmThreadPoolExecutor . newDefaultExecutor ( ) ; 
 
 - protected long threadId ; 
 + final long threadId ; 
 protected RealmConfiguration configuration ; 
 protected SharedGroupManager sharedGroupManager ; 
 protected boolean autoRefresh ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index c79deb0 . . d362a4c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 739 , 7 + 739 , 8 @ @ public final class Realm extends BaseRealm { 
 * 
 * @ param object the { @ link io . realm . RealmObject } to copy to the Realm . 
 * @ return a managed RealmObject with its properties backed by the Realm . 
 - * @ throws java . lang . IllegalArgumentException if RealmObject is { @ code null } . 
 + * @ throws java . lang . IllegalArgumentException if the object is { @ code null } or it belongs to a Realm instance 
 + * in a different thread . 
 * / 
 public < E extends RealmObject > E copyToRealm ( E object ) { 
 checkNotNullObject ( object ) ; 
 @ @ - 756 , 7 + 757 , 8 @ @ public final class Realm extends BaseRealm { 
 * 
 * @ param object { @ link io . realm . RealmObject } to copy or update . 
 * @ return the new or updated RealmObject with all its properties backed by the Realm . 
 - * @ throws java . lang . IllegalArgumentException if RealmObject is { @ code null } or doesn ' t have a Primary key defined . 
 + * @ throws java . lang . IllegalArgumentException if the object is { @ code null } or it belongs to a Realm instance 
 + * in a different thread . 
 * @ see # copyToRealm ( RealmObject ) 
 * / 
 public < E extends RealmObject > E copyToRealmOrUpdate ( E object ) {

NEAREST DIFF:
diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 842cbbf . . beae7c3 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 508 , 7 + 508 , 7 @ @ public class RealmProxyClassGenerator { 
 
 / / If object is already in the Realm there is nothing to update 
 writer 
 - . beginControlFlow ( " if ( object . realm ! = null & & object . realm . getCanonicalPath ( ) . equals ( realm . getCanonicalPath ( ) ) ) " ) 
 + . beginControlFlow ( " if ( object . realm ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) " ) 
 . emitStatement ( " return object " ) 
 . endControlFlow ( ) ; 
 
 @ @ - 732 , 7 + 732 , 7 @ @ public class RealmProxyClassGenerator { 
 private void emitHashcodeMethod ( JavaWriter writer ) throws IOException { 
 writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( " int " , " hashCode " , EnumSet . of ( Modifier . PUBLIC ) ) ; 
 - writer . emitStatement ( " String realmName = realm . getCanonicalPath ( ) " ) ; 
 + writer . emitStatement ( " String realmName = realm . getPath ( ) " ) ; 
 writer . emitStatement ( " String tableName = row . getTable ( ) . getName ( ) " ) ; 
 writer . emitStatement ( " long rowIndex = row . getIndex ( ) " ) ; 
 writer . emitEmptyLine ( ) ; 
 @ @ - 753 , 8 + 753 , 8 @ @ public class RealmProxyClassGenerator { 
 writer . emitStatement ( " if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false " ) ; 
 writer . emitStatement ( " % s a % s = ( % s ) o " , proxyClassName , className , proxyClassName ) ; / / FooRealmProxy aFoo = ( FooRealmProxy ) o 
 writer . emitEmptyLine ( ) ; 
 - writer . emitStatement ( " String path = realm . getCanonicalPath ( ) " ) ; 
 - writer . emitStatement ( " String otherPath = a % s . realm . getCanonicalPath ( ) " , className ) ; 
 + writer . emitStatement ( " String path = realm . getPath ( ) " ) ; 
 + writer . emitStatement ( " String otherPath = a % s . realm . getPath ( ) " , className ) ; 
 writer . emitStatement ( " if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; " ) ; 
 writer . emitEmptyLine ( ) ; 
 writer . emitStatement ( " String tableName = row . getTable ( ) . getName ( ) " ) ; 
 diff - - git a / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java b / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 index 4d0d02b . . ae50662 100644 
 - - - a / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 + + + b / realm - annotations - processor / src / test / resources / io / realm / AllTypesRealmProxy . java 
 @ @ - 406 , 7 + 406 , 7 @ @ public class AllTypesRealmProxy extends AllTypes { 
 } 
 
 public static AllTypes copyOrUpdate ( Realm realm , AllTypes object , boolean update , Map < RealmObject , RealmObject > cache ) { 
 - if ( object . realm ! = null & & object . realm . getCanonicalPath ( ) . equals ( realm . getCanonicalPath ( ) ) ) { 
 + if ( object . realm ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { 
 return object ; 
 } 
 AllTypes realmObject = null ; 
 @ @ - 552 , 7 + 552 , 7 @ @ public class AllTypesRealmProxy extends AllTypes { 
 
 @ Override 
 public int hashCode ( ) { 
 - String realmName = realm . getCanonicalPath ( ) ; 
 + String realmName = realm . getPath ( ) ; 
 String tableName = row . getTable ( ) . getName ( ) ; 
 long rowIndex = row . getIndex ( ) ; 
 
 @ @ - 569 , 8 + 569 , 8 @ @ public class AllTypesRealmProxy extends AllTypes { 
 if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; 
 AllTypesRealmProxy aAllTypes = ( AllTypesRealmProxy ) o ; 
 
 - String path = realm . getCanonicalPath ( ) ; 
 - String otherPath = aAllTypes . realm . getCanonicalPath ( ) ; 
 + String path = realm . getPath ( ) ; 
 + String otherPath = aAllTypes . realm . getPath ( ) ; 
 if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; ; 
 
 String tableName = row . getTable ( ) . getName ( ) ; 
 diff - - git a / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java b / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 index 3c28806 . . 1806078 100644 
 - - - a / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 + + + b / realm - annotations - processor / src / test / resources / io / realm / BooleansRealmProxy . java 
 @ @ - 177 , 7 + 177 , 7 @ @ public class BooleansRealmProxy extends Booleans { 
 } 
 
 public static Booleans copyOrUpdate ( Realm realm , Booleans object , boolean update , Map < RealmObject , RealmObject > cache ) { 
 - if ( object . realm ! = null & & object . realm . getCanonicalPath ( ) . equals ( realm . getCanonicalPath ( ) ) ) { 
 + if ( object . realm ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { 
 return object ; 
 } 
 return copy ( realm , object , update , cache ) ; 
 @ @ - 222 , 7 + 222 , 7 @ @ public class BooleansRealmProxy extends Booleans { 
 
 @ Override 
 public int hashCode ( ) { 
 - String realmName = realm . getCanonicalPath ( ) ; 
 + String realmName = realm . getPath ( ) ; 
 String tableName = row . getTable ( ) . getName ( ) ; 
 long rowIndex = row . getIndex ( ) ; 
 
 @ @ - 239 , 8 + 239 , 8 @ @ public class BooleansRealmProxy extends Booleans { 
 if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; 
 BooleansRealmProxy aBooleans = ( BooleansRealmProxy ) o ; 
 
 - String path = realm . getCanonicalPath ( ) ; 
 - String otherPath = aBooleans . realm . getCanonicalPath ( ) ; 
 + String path = realm . getPath ( ) ; 
 + String otherPath = aBooleans . realm . getPath ( ) ; 
 if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; ; 
 
 String tableName = row . getTable ( ) . getName ( ) ; 
 diff - - git a / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java b / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 index 4882a2e . . 243da99 100644 
 - - - a / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 + + + b / realm - annotations - processor / src / test / resources / io / realm / SimpleRealmProxy . java 
 @ @ - 150 , 7 + 150 , 7 @ @ public class SimpleRealmProxy extends Simple { 
 } 
 
 public static Simple copyOrUpdate ( Realm realm , Simple object , boolean update , Map < RealmObject , RealmObject > cache ) { 
 - if ( object . realm ! = null & & object . realm . getCanonicalPath ( ) . equals ( realm . getCanonicalPath ( ) ) ) { 
 + if ( object . realm ! = null & & object . realm . getPath ( ) . equals ( realm . getPath ( ) ) ) { 
 return object ; 
 } 
 return copy ( realm , object , update , cache ) ; 
 @ @ - 189 , 7 + 189 , 7 @ @ public class SimpleRealmProxy extends Simple { 
 
 @ Override 
 public int hashCode ( ) { 
 - String realmName = realm . getCanonicalPath ( ) ; 
 + String realmName = realm . getPath ( ) ; 
 String tableName = row . getTable ( ) . getName ( ) ; 
 long rowIndex = row . getIndex ( ) ; 
 
 @ @ - 206 , 8 + 206 , 8 @ @ public class SimpleRealmProxy extends Simple { 
 if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; 
 SimpleRealmProxy aSimple = ( SimpleRealmProxy ) o ; 
 
 - String path = realm . getCanonicalPath ( ) ; 
 - String otherPath = aSimple . realm . getCanonicalPath ( ) ; 
 + String path = realm . getPath ( ) ; 
 + String otherPath = aSimple . realm . getPath ( ) ; 
 if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; ; 
 
 String tableName = row . getTable ( ) . getName ( ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 index c06ce15 . . 5a36a79 100644 
 - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 294 , 7 + 294 , 7 @ @ public class NotificationsTest extends AndroidTestCase { 
 Realm . deleteRealmFile ( getContext ( ) , " private - realm " ) ; 
 Realm instance1 = Realm . getInstance ( getContext ( ) , " private - realm " ) ; 
 Realm instance2 = Realm . getInstance ( getContext ( ) , " private - realm " ) ; 
 - assertEquals ( instance1 . getCanonicalPath ( ) , instance2 . getCanonicalPath ( ) ) ; 
 + assertEquals ( instance1 . getPath ( ) , instance2 . getPath ( ) ) ; 
 assertNotNull ( instance1 . getHandler ( ) ) ; 
 
 / / If multiple instances are open on the same thread , don ' t remove handler on that thread 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index c782c8b . . 4a47cde 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 1496 , 7 + 1496 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 } finally { 
 if ( reEncryptedRealm ! = null ) { 
 reEncryptedRealm . close ( ) ; 
 - boolean isDeleted = new File ( reEncryptedRealm . getCanonicalPath ( ) ) . delete ( ) ; 
 + boolean isDeleted = new File ( reEncryptedRealm . getPath ( ) ) . delete ( ) ; 
 if ( ! isDeleted ) { 
 fail ( ) ; 
 } 
 @ @ - 1517 , 7 + 1517 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 } finally { 
 if ( decryptedRealm ! = null ) { 
 decryptedRealm . close ( ) ; 
 - boolean isDeleted = new File ( decryptedRealm . getCanonicalPath ( ) ) . delete ( ) ; 
 + boolean isDeleted = new File ( decryptedRealm . getPath ( ) ) . delete ( ) ; 
 if ( ! isDeleted ) { 
 fail ( ) ; 
 } 
 @ @ - 1526 , 7 + 1526 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 } finally { 
 if ( encryptedRealm ! = null ) { 
 encryptedRealm . close ( ) ; 
 - boolean isDeleted = new File ( encryptedRealm . getCanonicalPath ( ) ) . delete ( ) ; 
 + boolean isDeleted = new File ( encryptedRealm . getPath ( ) ) . delete ( ) ; 
 if ( ! isDeleted ) { 
 fail ( ) ; 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 5362617 . . 13816cc 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 1774 , 22 + 1774 , 12 @ @ public final class Realm implements Closeable { 
 } 
 
 / * * 
 - * Use { @ link # getCanonicalPath ( ) } instead . 
 - * 
 - * @ return The canonical path to the Realm file . 
 - * / 
 - @ Deprecated 
 - public String getPath ( ) { 
 - return canonicalPath ; 
 - } 
 - 
 - / * * 
 * Returns the canonical path to where this Realm is persisted on disk . 
 * 
 * @ return The canonical path to the Realm file . 
 * @ see File # getCanonicalPath ( ) 
 * / 
 - public String getCanonicalPath ( ) { 
 + public String getPath ( ) { 
 return canonicalPath ; 
 } 

