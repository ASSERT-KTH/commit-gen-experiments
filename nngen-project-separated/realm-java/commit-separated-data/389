BLEU SCORE: 0.040583489434387374

TEST MSG: Fix build base with core only
GENERATED MSG: Call SyncManager . notifyErrorHandler

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> index 5b84b34 . . d460f3b 100644 <nl> - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> @ @ - 94 , 7 + 94 , 7 @ @ if ( NOT EXISTS $ { sync _ lib _ PATH } ) <nl> elseif ( ARM64 _ V8A ) <nl> set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm64 . a ) <nl> else ( ) <nl> - message ( FATAL _ ERROR " Cannot find core lib file : $ { core _ lib _ PATH } " ) <nl> + message ( FATAL _ ERROR " Cannot find core lib file : $ { sync _ lib _ PATH } " ) <nl> endif ( ) <nl> endif ( ) <nl> add _ library ( lib _ realm _ sync STATIC IMPORTED ) <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp <nl> index 0caa7ac . . 39a7b55 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp <nl> @ @ - 73 , 7 + 73 , 7 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ objectserver _ ObjectServerSession _ n <nl> ( JNIEnv * , jobject , jlong sessionPointer ) <nl> { <nl> TR _ ENTER ( ) <nl> - JniSession * session = SS ( sessionPointer ) ; <nl> + JniSession * session = reinterpret _ cast < JniSession * > ( sessionPointer ) ; <nl> delete session ; / / TODO Can we avoid killing the session here ? <nl> } <nl> <nl> @ @ - 82 , 7 + 82 , 7 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ objectserver _ ObjectServerSession _ n <nl> { <nl> TR _ ENTER ( ) <nl> try { <nl> - JniSession * session _ wrapper = SS ( sessionPointer ) ; <nl> + JniSession * session _ wrapper = reinterpret _ cast < JniSession * > ( sessionPointer ) ; <nl> <nl> JStringAccessor token _ tmp ( env , accessToken ) ; / / throws <nl> StringData access _ token = StringData ( token _ tmp ) ; <nl> @ @ - 97 , 7 + 97 , 7 @ @ Java _ io _ realm _ internal _ objectserver _ ObjectServerSession _ nativeNotifyCommitHappen <nl> { <nl> TR _ ENTER ( ) <nl> try { <nl> - JniSession * session _ wrapper = SS ( sessionPointer ) ; <nl> + JniSession * session _ wrapper = reinterpret _ cast < JniSession * > ( sessionPointer ) ; <nl> session _ wrapper - > get _ session ( ) - > nonsync _ transact _ notify ( version ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp <nl> index 021752f . . 4694037 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . hpp <nl> + + + b / realm / realm - library / src / main / cpp / util . hpp <nl> @ @ - 31 , 7 + 31 , 6 @ @ <nl> # include < realm / timestamp . hpp > <nl> # include < realm / util / meta . hpp > <nl> # include < realm / util / safe _ int _ ops . hpp > <nl> - # include < realm / sync / client . hpp > <nl> <nl> # include < util / format . hpp > <nl> <nl> @ @ - 86 , 8 + 85 , 6 @ @ std : : string num _ to _ string ( T pNumber ) <nl> # define Q ( x ) reinterpret _ cast < realm : : Query * > ( x ) <nl> # define ROW ( x ) reinterpret _ cast < realm : : Row * > ( x ) <nl> # define HO ( T , ptr ) reinterpret _ cast < realm : : SharedGroup : : Handover < T > * > ( ptr ) <nl> - # define SC ( ptr ) reinterpret _ cast < realm : : sync : : Client * > ( ptr ) <nl> - # define SS ( ptr ) reinterpret _ cast < JniSession * > ( ptr ) <nl> <nl> / / Exception handling <nl> enum ExceptionKind {
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> index c397fea . . f513c03 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp <nl> @ @ - 73 , 13 + 73 , 28 @ @ struct AndroidLoggerFactory : public realm : : SyncLoggerFactory { <nl> } s _ logger _ factory ; <nl> <nl> / / TODO : Move to a better place & not needed after moving to OS <nl> - AndroidLogger & AndroidLogger : : shared ( ) noexcept { <nl> + AndroidLogger & AndroidLogger : : shared ( ) noexcept <nl> + { <nl> static AndroidLogger logger ; <nl> return logger ; <nl> } <nl> <nl> + static jclass sync _ manager = nullptr ; <nl> + static jmethodID sync _ manager _ notify _ error _ handler = nullptr ; <nl> + <nl> + static void error _ handler ( int error _ code , std : : string message ) <nl> + { <nl> + JNIEnv * env ; <nl> + if ( g _ vm - > GetEnv ( ( void * * ) & env , JNI _ VERSION _ 1 _ 6 ) ! = JNI _ OK ) { <nl> + throw std : : runtime _ error ( " JVM is not attached to this thread . Called in error _ handler . " ) ; <nl> + } <nl> + <nl> + env - > CallStaticVoidMethod ( sync _ manager , <nl> + sync _ manager _ notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; <nl> + } <nl> + <nl> JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient <nl> - ( JNIEnv * env , jclass ) <nl> + ( JNIEnv * env , jclass sync _ manager _ class ) <nl> { <nl> TR _ ENTER ( env ) <nl> if ( sync _ client ) return ; <nl> @ @ - 90 , 13 + 105 , 19 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient <nl> sync : : Client : : Config config ; <nl> config . logger = & AndroidLogger : : shared ( ) ; <nl> sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws <nl> - / / FIXME setup error handler for client <nl> + <nl> + / / This function should only be called once , so below is safe . <nl> + sync _ manager = sync _ manager _ class ; <nl> + sync _ manager _ notify _ error _ handler = env - > GetStaticMethodID ( sync _ manager , <nl> + " notifyErrorHandler " , " ( ILjava / lang / String ; ) V " ) ; <nl> + sync _ client - > set _ error _ handler ( error _ handler ) ; <nl> } CATCH _ STD ( ) <nl> } <nl> <nl> / / Create the thread from java side to avoid some strange errors when native throws . <nl> JNIEXPORT void JNICALL <nl> - Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) { <nl> + Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) <nl> + { <nl> try { <nl> sync _ client - > run ( ) ; <nl> } CATCH _ STD ( ) <nl> diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp <nl> index 2c571bd . . eb00c1a 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / util . cpp <nl> @ @ - 38 , 8 + 38 , 6 @ @ jclass java _ lang _ float ; <nl> jmethodID java _ lang _ float _ init ; <nl> jclass java _ lang _ double ; <nl> jmethodID java _ lang _ double _ init ; <nl> - jclass sync _ manager ; <nl> - jmethodID sync _ manager _ notify _ error _ handler ; <nl> jclass session _ class _ ref ; <nl> jmethodID session _ error _ handler ; <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp <nl> index 7cadba4 . . 9db3763 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . hpp <nl> + + + b / realm / realm - library / src / main / cpp / util . hpp <nl> @ @ - 713 , 8 + 713 , 6 @ @ extern jclass java _ lang _ double ; <nl> extern jmethodID java _ lang _ double _ init ; <nl> <nl> / / FIXME Move to own library <nl> - extern jclass sync _ manager ; <nl> - extern jmethodID sync _ manager _ notify _ error _ handler ; <nl> extern jclass session _ class _ ref ; <nl> extern jmethodID session _ error _ handler ; <nl> <nl> diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> index 56dfad5 . . 01891b6 100644 <nl> - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java <nl> @ @ - 206 , 6 + 206 , 7 @ @ public final class SyncManager { <nl> / / This is called from SyncManager . cpp from the worker thread the Sync Client is running on <nl> / / Right now Core doesn ' t send these errors to the proper session , so instead we need to notify all sessions <nl> / / from here . This can be removed once better error propagation is implemented in Sync Core . <nl> + @ SuppressWarnings ( " unused " ) <nl> private static void notifyErrorHandler ( int errorCode , String errorMessage ) { <nl> ObjectServerError error = new ObjectServerError ( ErrorCode . fromInt ( errorCode ) , errorMessage ) ; <nl> for ( SyncSession session : SessionStore . getAllSessions ( ) ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 index 5b84b34 . . d460f3b 100644 
 - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt 
 + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 @ @ - 94 , 7 + 94 , 7 @ @ if ( NOT EXISTS $ { sync _ lib _ PATH } ) 
 elseif ( ARM64 _ V8A ) 
 set ( sync _ lib _ PATH $ { REALM _ CORE _ DIST _ DIR } / librealm - sync - android - arm64 . a ) 
 else ( ) 
 - message ( FATAL _ ERROR " Cannot find core lib file : $ { core _ lib _ PATH } " ) 
 + message ( FATAL _ ERROR " Cannot find core lib file : $ { sync _ lib _ PATH } " ) 
 endif ( ) 
 endif ( ) 
 add _ library ( lib _ realm _ sync STATIC IMPORTED ) 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp 
 index 0caa7ac . . 39a7b55 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ objectserver _ ObjectServerSession . cpp 
 @ @ - 73 , 7 + 73 , 7 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ objectserver _ ObjectServerSession _ n 
 ( JNIEnv * , jobject , jlong sessionPointer ) 
 { 
 TR _ ENTER ( ) 
 - JniSession * session = SS ( sessionPointer ) ; 
 + JniSession * session = reinterpret _ cast < JniSession * > ( sessionPointer ) ; 
 delete session ; / / TODO Can we avoid killing the session here ? 
 } 
 
 @ @ - 82 , 7 + 82 , 7 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ objectserver _ ObjectServerSession _ n 
 { 
 TR _ ENTER ( ) 
 try { 
 - JniSession * session _ wrapper = SS ( sessionPointer ) ; 
 + JniSession * session _ wrapper = reinterpret _ cast < JniSession * > ( sessionPointer ) ; 
 
 JStringAccessor token _ tmp ( env , accessToken ) ; / / throws 
 StringData access _ token = StringData ( token _ tmp ) ; 
 @ @ - 97 , 7 + 97 , 7 @ @ Java _ io _ realm _ internal _ objectserver _ ObjectServerSession _ nativeNotifyCommitHappen 
 { 
 TR _ ENTER ( ) 
 try { 
 - JniSession * session _ wrapper = SS ( sessionPointer ) ; 
 + JniSession * session _ wrapper = reinterpret _ cast < JniSession * > ( sessionPointer ) ; 
 session _ wrapper - > get _ session ( ) - > nonsync _ transact _ notify ( version ) ; 
 } CATCH _ STD ( ) 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp 
 index 021752f . . 4694037 100644 
 - - - a / realm / realm - library / src / main / cpp / util . hpp 
 + + + b / realm / realm - library / src / main / cpp / util . hpp 
 @ @ - 31 , 7 + 31 , 6 @ @ 
 # include < realm / timestamp . hpp > 
 # include < realm / util / meta . hpp > 
 # include < realm / util / safe _ int _ ops . hpp > 
 - # include < realm / sync / client . hpp > 
 
 # include < util / format . hpp > 
 
 @ @ - 86 , 8 + 85 , 6 @ @ std : : string num _ to _ string ( T pNumber ) 
 # define Q ( x ) reinterpret _ cast < realm : : Query * > ( x ) 
 # define ROW ( x ) reinterpret _ cast < realm : : Row * > ( x ) 
 # define HO ( T , ptr ) reinterpret _ cast < realm : : SharedGroup : : Handover < T > * > ( ptr ) 
 - # define SC ( ptr ) reinterpret _ cast < realm : : sync : : Client * > ( ptr ) 
 - # define SS ( ptr ) reinterpret _ cast < JniSession * > ( ptr ) 
 
 / / Exception handling 
 enum ExceptionKind {

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 index c397fea . . f513c03 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ SyncManager . cpp 
 @ @ - 73 , 13 + 73 , 28 @ @ struct AndroidLoggerFactory : public realm : : SyncLoggerFactory { 
 } s _ logger _ factory ; 
 
 / / TODO : Move to a better place & not needed after moving to OS 
 - AndroidLogger & AndroidLogger : : shared ( ) noexcept { 
 + AndroidLogger & AndroidLogger : : shared ( ) noexcept 
 + { 
 static AndroidLogger logger ; 
 return logger ; 
 } 
 
 + static jclass sync _ manager = nullptr ; 
 + static jmethodID sync _ manager _ notify _ error _ handler = nullptr ; 
 + 
 + static void error _ handler ( int error _ code , std : : string message ) 
 + { 
 + JNIEnv * env ; 
 + if ( g _ vm - > GetEnv ( ( void * * ) & env , JNI _ VERSION _ 1 _ 6 ) ! = JNI _ OK ) { 
 + throw std : : runtime _ error ( " JVM is not attached to this thread . Called in error _ handler . " ) ; 
 + } 
 + 
 + env - > CallStaticVoidMethod ( sync _ manager , 
 + sync _ manager _ notify _ error _ handler , error _ code , env - > NewStringUTF ( message . c _ str ( ) ) ) ; 
 + } 
 + 
 JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient 
 - ( JNIEnv * env , jclass ) 
 + ( JNIEnv * env , jclass sync _ manager _ class ) 
 { 
 TR _ ENTER ( env ) 
 if ( sync _ client ) return ; 
 @ @ - 90 , 13 + 105 , 19 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ SyncManager _ nativeInitializeSyncClient 
 sync : : Client : : Config config ; 
 config . logger = & AndroidLogger : : shared ( ) ; 
 sync _ client = std : : make _ unique < Client > ( std : : move ( config ) ) ; / / Throws 
 - / / FIXME setup error handler for client 
 + 
 + / / This function should only be called once , so below is safe . 
 + sync _ manager = sync _ manager _ class ; 
 + sync _ manager _ notify _ error _ handler = env - > GetStaticMethodID ( sync _ manager , 
 + " notifyErrorHandler " , " ( ILjava / lang / String ; ) V " ) ; 
 + sync _ client - > set _ error _ handler ( error _ handler ) ; 
 } CATCH _ STD ( ) 
 } 
 
 / / Create the thread from java side to avoid some strange errors when native throws . 
 JNIEXPORT void JNICALL 
 - Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) { 
 + Java _ io _ realm _ SyncManager _ nativeRunClient ( JNIEnv * env , jclass ) 
 + { 
 try { 
 sync _ client - > run ( ) ; 
 } CATCH _ STD ( ) 
 diff - - git a / realm / realm - library / src / main / cpp / util . cpp b / realm / realm - library / src / main / cpp / util . cpp 
 index 2c571bd . . eb00c1a 100644 
 - - - a / realm / realm - library / src / main / cpp / util . cpp 
 + + + b / realm / realm - library / src / main / cpp / util . cpp 
 @ @ - 38 , 8 + 38 , 6 @ @ jclass java _ lang _ float ; 
 jmethodID java _ lang _ float _ init ; 
 jclass java _ lang _ double ; 
 jmethodID java _ lang _ double _ init ; 
 - jclass sync _ manager ; 
 - jmethodID sync _ manager _ notify _ error _ handler ; 
 jclass session _ class _ ref ; 
 jmethodID session _ error _ handler ; 
 
 diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp 
 index 7cadba4 . . 9db3763 100644 
 - - - a / realm / realm - library / src / main / cpp / util . hpp 
 + + + b / realm / realm - library / src / main / cpp / util . hpp 
 @ @ - 713 , 8 + 713 , 6 @ @ extern jclass java _ lang _ double ; 
 extern jmethodID java _ lang _ double _ init ; 
 
 / / FIXME Move to own library 
 - extern jclass sync _ manager ; 
 - extern jmethodID sync _ manager _ notify _ error _ handler ; 
 extern jclass session _ class _ ref ; 
 extern jmethodID session _ error _ handler ; 
 
 diff - - git a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 index 56dfad5 . . 01891b6 100644 
 - - - a / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 + + + b / realm / realm - library / src / objectServer / java / io / realm / SyncManager . java 
 @ @ - 206 , 6 + 206 , 7 @ @ public final class SyncManager { 
 / / This is called from SyncManager . cpp from the worker thread the Sync Client is running on 
 / / Right now Core doesn ' t send these errors to the proper session , so instead we need to notify all sessions 
 / / from here . This can be removed once better error propagation is implemented in Sync Core . 
 + @ SuppressWarnings ( " unused " ) 
 private static void notifyErrorHandler ( int errorCode , String errorMessage ) { 
 ObjectServerError error = new ObjectServerError ( ErrorCode . fromInt ( errorCode ) , errorMessage ) ; 
 for ( SyncSession session : SessionStore . getAllSessions ( ) ) {
