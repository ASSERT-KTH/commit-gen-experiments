BLEU SCORE: 0.3032653298563167

TEST MSG: Wrap SortDescriptor
GENERATED MSG: Rename the lists

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> index d3dadc3 . . d66571c 100644 <nl> - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> @ @ - 37 , 7 + 37 , 8 @ @ set ( classes _ LIST <nl> io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow <nl> io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil <nl> io . realm . log . LogLevel io . realm . log . RealmLog io . realm . Property io . realm . RealmSchema <nl> - io . realm . RealmObjectSchema io . realm . internal . Collection io . realm . internal . NativeObjectReference <nl> + io . realm . RealmObjectSchema io . realm . internal . Collection io . realm . internal . SortDescriptor <nl> + io . realm . internal . NativeObjectReference <nl> ) <nl> # / . / is the workaround for the problem that AS cannot find the jni headers . <nl> # See https : / / github . com / googlesamples / android - ndk / issues / 319 <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp <nl> new file mode 100644 <nl> index 0000000 . . 7dcc8ef <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + # include " io _ realm _ internal _ SortDescriptor . h " <nl> + <nl> + # include < realm / views . hpp > <nl> + <nl> + # include " util . hpp " <nl> + <nl> + using namespace realm ; <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ internal _ SortDescriptor _ nativeCreate ( JNIEnv * env , jclass , jlong table _ ptr , jobjectArray column _ indices , <nl> + jbooleanArray ascending ) <nl> + { <nl> + try { <nl> + JniArrayOfArrays < JniLongArray , jlongArray > arrays ( env , column _ indices ) ; <nl> + JniBooleanArray ascending _ array ( env , ascending ) ; <nl> + jsize arr _ len = arrays . len ( ) ; <nl> + <nl> + std : : vector < std : : vector < size _ t > > indices ; <nl> + std : : vector < bool > ascending _ list ; <nl> + <nl> + for ( int i = 0 ; i < arr _ len ; + + i ) { <nl> + JniLongArray & jni _ long _ array = arrays [ i ] ; <nl> + std : : vector < size _ t > col _ indices ; <nl> + for ( int j = 0 ; j < jni _ long _ array . len ( ) ; + + j ) { <nl> + col _ indices . push _ back ( static _ cast < size _ t > ( jni _ long _ array [ j ] ) ) ; <nl> + } <nl> + indices . push _ back ( std : : move ( col _ indices ) ) ; <nl> + if ( ascending ) { <nl> + ascending _ list . push _ back ( static _ cast < bool > ( ascending _ array [ i ] ) ) ; <nl> + } <nl> + } <nl> + <nl> + SortDescriptor * descriptor = ascending ? <nl> + new SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) , std : : move ( ascending _ list ) ) <nl> + : new SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) ) ; <nl> + return reinterpret _ cast < jlong > ( descriptor ) ; <nl> + } CATCH _ STD ( ) <nl> + <nl> + return reinterpret _ cast < jlong > ( nullptr ) ; <nl> + } <nl> + <nl> + JNIEXPORT void JNICALL <nl> + Java _ io _ realm _ internal _ SortDescriptor _ nativeClose ( JNIEnv * env , jclass , jlong ptr ) { <nl> + try { <nl> + SortDescriptor * descriptor = reinterpret _ cast < SortDescriptor * > ( ptr ) ; <nl> + delete descriptor ; <nl> + } CATCH _ STD ( ) <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index dcd63e8 . . 99bfcfe 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 46 , 26 + 46 , 17 @ @ static void finalize _ notification _ token ( jlong ptr ) <nl> <nl> JNIEXPORT jlong JNICALL <nl> Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared _ realm _ ptr , jlong query _ ptr , <nl> - jlongArray colunm _ indices , jbooleanArray jsort _ orders ) <nl> + jlong sort _ desc _ native _ ptr ) <nl> { <nl> TR _ ENTER ( ) <nl> try { <nl> auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; <nl> auto query = reinterpret _ cast < Query * > ( query _ ptr ) ; <nl> + Results * results = sort _ desc _ native _ ptr ? <nl> + new Results ( shared _ realm , * query , * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ) : <nl> + new Results ( shared _ realm , * query , { } ) ; <nl> <nl> - JniBooleanArray order ( env , jsort _ orders ) ; <nl> - JniLongArray indices ( env , colunm _ indices ) ; <nl> - <nl> - std : : vector < bool > sort _ order ; <nl> - std : : vector < std : : vector < size _ t > > sort _ indices ; <nl> - for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { <nl> - sort _ order . push _ back ( to _ bool ( order [ i ] ) ) ; <nl> - sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; <nl> - } <nl> - <nl> - SortDescriptor sort _ descriptor ( * ( query - > get _ table ( ) . get ( ) ) , sort _ indices , sort _ order ) ; <nl> - Results results ( shared _ realm , * query , sort _ descriptor ) ; <nl> - return reinterpret _ cast < jlong > ( new Results ( std : : move ( results ) ) ) ; <nl> + return reinterpret _ cast < jlong > ( results ) ; <nl> } CATCH _ STD ( ) <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp <nl> index 53825bf . . 2c0c5ca 100644 <nl> - - - a / realm / realm - library / src / main / cpp / util . hpp <nl> + + + b / realm / realm - library / src / main / cpp / util . hpp <nl> @ @ - 493 , 6 + 493 , 21 @ @ public : <nl> , m _ releaseMode ( JNI _ ABORT ) { <nl> } <nl> <nl> + JniLongArray ( JniLongArray & other ) = delete ; <nl> + <nl> + JniLongArray ( JniLongArray & & other ) <nl> + : m _ env ( other . m _ env ) <nl> + , m _ javaArray ( other . m _ javaArray ) <nl> + , m _ arrayLength ( other . m _ arrayLength ) <nl> + , m _ array ( other . m _ array ) <nl> + , m _ releaseMode ( other . m _ releaseMode ) <nl> + { <nl> + other . m _ env = nullptr ; <nl> + other . m _ javaArray = nullptr ; <nl> + other . m _ arrayLength = 0 ; <nl> + other . m _ array = nullptr ; <nl> + } <nl> + <nl> ~ JniLongArray ( ) <nl> { <nl> if ( m _ array ) { <nl> @ @ - 521 , 11 + 536 , 47 @ @ public : <nl> } <nl> <nl> private : <nl> - JNIEnv * const m _ env ; <nl> - jlongArray const m _ javaArray ; <nl> - jsize const m _ arrayLength ; <nl> - jlong * const m _ array ; <nl> - jint m _ releaseMode ; <nl> + JNIEnv * m _ env ; <nl> + jlongArray m _ javaArray ; <nl> + jsize m _ arrayLength ; <nl> + jlong * m _ array ; <nl> + jint m _ releaseMode ; <nl> + } ; <nl> + <nl> + template < typename T , typename J > <nl> + class JniArrayOfArrays { <nl> + public : <nl> + JniArrayOfArrays ( JNIEnv * env , jobjectArray javaArray ) <nl> + : m _ env ( env ) <nl> + , m _ javaArray ( javaArray ) <nl> + , m _ arrayLength ( javaArray = = NULL ? 0 : env - > GetArrayLength ( javaArray ) ) <nl> + { <nl> + for ( int i = 0 ; i < m _ arrayLength ; i + + ) { <nl> + / / No type checking . Internal use only . <nl> + J j _ array = static _ cast < J > ( env - > GetObjectArrayElement ( m _ javaArray , i ) ) ; <nl> + m _ array . push _ back ( T ( env , j _ array ) ) ; <nl> + } <nl> + } <nl> + <nl> + ~ JniArrayOfArrays ( ) <nl> + { <nl> + } <nl> + <nl> + inline jsize len ( ) const noexcept <nl> + { <nl> + return m _ arrayLength ; <nl> + } <nl> + <nl> + inline T & operator [ ] ( const int index ) noexcept <nl> + { <nl> + return m _ array [ index ] ; <nl> + } <nl> + <nl> + private : <nl> + JNIEnv * const m _ env ; <nl> + jobjectArray const m _ javaArray ; <nl> + jsize const m _ arrayLength ; <nl> + std : : vector < T > m _ array ; <nl> } ; <nl> <nl> class JniByteArray { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 593dc65 . . 8b87a89 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 27 , 11 + 27 , 13 @ @ import java . util . concurrent . Callable ; <nl> import java . util . concurrent . Future ; <nl> <nl> import io . realm . annotations . Required ; <nl> + import io . realm . internal . Collection ; <nl> import io . realm . internal . LinkView ; <nl> import io . realm . internal . RealmNotifier ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> import io . realm . internal . SharedRealm ; <nl> + import io . realm . internal . SortDescriptor ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableQuery ; <nl> @ @ - 1647 , 11 + 1649 , 11 @ @ public final class RealmQuery < E extends RealmModel > { <nl> public RealmResults < E > findAll ( ) { <nl> checkQueryIsNotReused ( ) ; <nl> RealmResults < E > realmResults ; <nl> + Collection collection = new Collection ( realm . sharedRealm , query , null ) ; <nl> if ( isDynamicQuery ( ) ) { <nl> - realmResults = ( RealmResults < E > ) RealmResults . createFromDynamicTableOrView ( realm , query . findAll ( ) , className ) ; <nl> + realmResults = new RealmResults < E > ( realm , collection , className ) ; <nl> } else { <nl> - / / realmResults = RealmResults . createFromTableOrView ( realm , query . findAll ( ) , clazz ) ; <nl> - realmResults = RealmResults . createFromQuery ( realm , query , clazz , null , null ) ; <nl> + realmResults = new RealmResults < E > ( realm , collection , clazz ) ; <nl> } <nl> return realmResults ; <nl> } <nl> @ @ - 1755 , 15 + 1757 , 14 @ @ public final class RealmQuery < E extends RealmModel > { <nl> @ SuppressWarnings ( " unchecked " ) <nl> public RealmResults < E > findAllSorted ( String fieldName , Sort sortOrder ) { <nl> checkQueryIsNotReused ( ) ; <nl> - TableView tableView = query . findAll ( ) ; <nl> - long columnIndex = getColumnIndexForSort ( fieldName ) ; <nl> - tableView . sort ( columnIndex , sortOrder ) ; <nl> + SortDescriptor sortDescriptor = SortDescriptor . getInstanceForSort ( query . getTable ( ) , fieldName , sortOrder ) ; <nl> <nl> + Collection collection = new Collection ( realm . sharedRealm , query , sortDescriptor ) ; <nl> RealmResults < E > realmResults ; <nl> if ( isDynamicQuery ( ) ) { <nl> - realmResults = ( RealmResults < E > ) RealmResults . createFromDynamicTableOrView ( realm , tableView , className ) ; <nl> + realmResults = new RealmResults < E > ( realm , collection , className ) ; <nl> } else { <nl> - realmResults = RealmResults . createFromTableOrView ( realm , tableView , clazz ) ; <nl> + realmResults = new RealmResults < E > ( realm , collection , clazz ) ; <nl> } <nl> return realmResults ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 4a68b92 . . 5acdb45 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 95 , 12 + 95 , 6 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public static final byte AGGREGATE _ FUNCTION _ AVERAGE = 3 ; <nl> public static final byte AGGREGATE _ FUNCTION _ SUM = 4 ; <nl> <nl> - static < E extends RealmModel > RealmResults < E > createFromQuery ( BaseRealm realm , TableQuery query , Class < E > clazz , <nl> - String fieldNames [ ] , Sort [ ] sortOrder ) { <nl> - Collection collection = new Collection ( realm . sharedRealm , query , null , null ) ; <nl> - return new RealmResults < E > ( realm , collection , clazz ) ; <nl> - } <nl> - <nl> static < E extends RealmModel > RealmResults < E > createFromTableQuery ( BaseRealm realm , TableQuery query , Class < E > clazz ) { <nl> return new RealmResults < E > ( realm , query , clazz ) ; <nl> } <nl> @ @ - 128 , 6 + 122 , 13 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> this . collection = collection ; <nl> } <nl> <nl> + RealmResults ( BaseRealm realm , io . realm . internal . Collection collection , String className ) { <nl> + this . realm = realm ; <nl> + this . query = null ; <nl> + this . className = className ; <nl> + this . collection = collection ; <nl> + } <nl> + <nl> private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz , String fieldNames [ ] , Sort [ ] sortOrder ) { <nl> this . realm = realm ; <nl> this . classSpec = clazz ; <nl> @ @ - 807 , 7 + 808 , 8 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> * / <nl> public E next ( ) { <nl> realm . checkIfValid ( ) ; <nl> - checkRealmIsStable ( ) ; <nl> + / / FIXME : Enable this <nl> + / / checkRealmIsStable ( ) ; <nl> pos + + ; <nl> if ( pos > = size ( ) ) { <nl> throw new NoSuchElementException ( " Cannot access index " + pos + " when size is " + size ( ) + " . Remember to check hasNext ( ) before using next ( ) . " ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index 05872dd . . 7b4e838 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 103 , 11 + 103 , 16 @ @ public class Collection implements NativeObject { <nl> } <nl> } <nl> <nl> - public Collection ( SharedRealm sharedRealm , TableQuery query , long indices [ ] , boolean [ ] orders ) { <nl> + public Collection ( SharedRealm sharedRealm , TableQuery query , SortDescriptor sortDescriptor ) { <nl> this . context = sharedRealm . context ; <nl> this . query = query ; <nl> <nl> - this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , indices , orders ) ; <nl> + if ( sortDescriptor = = null ) { <nl> + this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , 0 ) ; <nl> + } else { <nl> + this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , <nl> + sortDescriptor . getNativePtr ( ) ) ; <nl> + } <nl> this . context . addReference ( this ) ; <nl> } <nl> <nl> @ @ - 180 , 8 + 185 , 8 @ @ public class Collection implements NativeObject { <nl> } <nl> <nl> private static native long nativeGetFinalizerPtr ( ) ; <nl> - private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , long [ ] columnIndices , <nl> - boolean [ ] orders ) ; <nl> + private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , <nl> + long sortDescNativePtr ) ; <nl> private static native long nativeCreateSnapshot ( long nativePtr ) ; <nl> private static native long nativeGetRow ( long nativePtr , int index ) ; <nl> private static native boolean nativeContains ( long nativePtr , long nativeRowPtr ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java <nl> new file mode 100644 <nl> index 0000000 . . 6cfdd6b <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java <nl> @ @ - 0 , 0 + 1 , 91 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package io . realm . internal ; <nl> + <nl> + import io . realm . RealmFieldType ; <nl> + <nl> + public class FieldDescriptor { <nl> + <nl> + private long [ ] columnIndices ; <nl> + private RealmFieldType lastFieldType ; <nl> + private String lastFieldName ; <nl> + <nl> + public FieldDescriptor ( Table table , String fieldDescription , boolean allowList ) { <nl> + if ( fieldDescription = = null | | fieldDescription . isEmpty ( ) ) { <nl> + throw new IllegalArgumentException ( " Non - empty field name must be provided " ) ; <nl> + } <nl> + if ( fieldDescription . startsWith ( " . " ) | | fieldDescription . endsWith ( " . " ) ) { <nl> + throw new IllegalArgumentException ( " Illegal field name . It cannot start or end with a ' . ' : " + fieldDescription ) ; <nl> + } <nl> + if ( fieldDescription . contains ( " . " ) ) { <nl> + / / Resolve field description down to last field name <nl> + String [ ] names = fieldDescription . split ( " \ \ . " ) ; <nl> + long [ ] columnIndices = new long [ names . length ] ; <nl> + for ( int i = 0 ; i < names . length - 1 ; i + + ) { <nl> + long index = table . getColumnIndex ( names [ i ] ) ; <nl> + if ( index < 0 ) { <nl> + throw new IllegalArgumentException ( <nl> + String . format ( " Invalid field name : ' % s ' does not refer to a class . " , names [ i ] ) ) ; <nl> + } <nl> + RealmFieldType type = table . getColumnType ( index ) ; <nl> + if ( type = = RealmFieldType . OBJECT | | ( allowList & & type = = RealmFieldType . LIST ) ) { <nl> + table = table . getLinkTarget ( index ) ; <nl> + columnIndices [ i ] = index ; <nl> + } else if ( ! allowList & & type = = RealmFieldType . LIST ) { <nl> + throw new IllegalArgumentException ( <nl> + String . format ( " ' RealmList ' field ' % s ' is not a supported link field here . " , names [ i ] ) ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( <nl> + String . format ( " Invalid field name : ' % s ' does not refer to a class . " , names [ i ] ) ) ; <nl> + } <nl> + / / TODO : Check search index for distinct ? <nl> + } <nl> + <nl> + / / Check if last field name is a valid field <nl> + String columnName = names [ names . length - 1 ] ; <nl> + long columnIndex = table . getColumnIndex ( columnName ) ; <nl> + columnIndices [ names . length - 1 ] = columnIndex ; <nl> + if ( columnIndex < 0 ) { <nl> + throw new IllegalArgumentException ( <nl> + String . format ( " ' % s ' is not a field name in class ' % s ' . " , columnName , table . getName ( ) ) ) ; <nl> + } <nl> + <nl> + this . lastFieldType = table . getColumnType ( columnIndex ) ; <nl> + this . lastFieldName = columnName ; <nl> + this . columnIndices = columnIndices ; <nl> + } else { <nl> + long fieldIndex = table . getColumnIndex ( fieldDescription ) ; <nl> + if ( fieldIndex = = Table . NO _ MATCH ) { <nl> + throw new IllegalArgumentException ( String . format ( " Field ' % s ' does not exist . " , fieldDescription ) ) ; <nl> + } <nl> + this . lastFieldType = table . getColumnType ( fieldIndex ) ; <nl> + this . lastFieldName = fieldDescription ; <nl> + this . columnIndices = new long [ ] { fieldIndex } ; <nl> + } <nl> + } <nl> + <nl> + public long [ ] getColumnIndices ( ) { <nl> + return columnIndices ; <nl> + } <nl> + <nl> + public RealmFieldType getLastFieldType ( ) { <nl> + return lastFieldType ; <nl> + } <nl> + <nl> + public String getLastFieldName ( ) { <nl> + return lastFieldName ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> new file mode 100644 <nl> index 0000000 . . 1b14544 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java <nl> @ @ - 0 , 0 + 1 , 139 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . internal ; <nl> + <nl> + import java . io . * ; <nl> + <nl> + import io . realm . RealmFieldType ; <nl> + import io . realm . Sort ; <nl> + <nl> + public class SortDescriptor implements Closeable { <nl> + <nl> + private final long [ ] [ ] columnIndices ; <nl> + private final boolean [ ] ascendings ; <nl> + private long nativePtr = 0 ; <nl> + private final static RealmFieldType [ ] validFieldTypesForSort = new RealmFieldType [ ] { <nl> + RealmFieldType . BOOLEAN , RealmFieldType . INTEGER , RealmFieldType . FLOAT , RealmFieldType . DOUBLE , <nl> + RealmFieldType . STRING , RealmFieldType . DATE <nl> + } ; <nl> + private final static RealmFieldType [ ] validFieldTypesForDistinct = new RealmFieldType [ ] { <nl> + RealmFieldType . BOOLEAN , RealmFieldType . INTEGER , RealmFieldType . STRING , RealmFieldType . DATE <nl> + } ; <nl> + <nl> + / / Internal use only . For JNI testing . <nl> + SortDescriptor ( Table table , long [ ] columnIndices ) { <nl> + this ( table , new long [ ] [ ] { columnIndices } , null ) ; <nl> + } <nl> + <nl> + / / Internal use only . For JNI testing . <nl> + SortDescriptor ( Table table , long [ ] columnIndices , Sort sortOrder ) { <nl> + this ( table , new long [ ] [ ] { columnIndices } , new Sort [ ] { sortOrder } ) ; <nl> + } <nl> + <nl> + private SortDescriptor ( Table table , long [ ] [ ] columnIndices , Sort [ ] sortOrders ) { <nl> + if ( sortOrders ! = null ) { <nl> + ascendings = new boolean [ sortOrders . length ] ; <nl> + for ( int i = 0 ; i < sortOrders . length ; i + + ) { <nl> + ascendings [ i ] = sortOrders [ i ] . getValue ( ) ; <nl> + } <nl> + } else { <nl> + ascendings = null ; <nl> + } <nl> + <nl> + this . columnIndices = columnIndices ; <nl> + nativePtr = nativeCreate ( table . getNativePtr ( ) , columnIndices , ascendings ) ; <nl> + } <nl> + <nl> + public static SortDescriptor getInstanceForSort ( Table table , String fieldDescription , Sort sortOrder ) { <nl> + return getInstanceForSort ( table , new String [ ] { fieldDescription } , new Sort [ ] { sortOrder } ) ; <nl> + } <nl> + <nl> + public static SortDescriptor getInstanceForSort ( Table table , String [ ] fieldDescriptions , Sort [ ] sortOrders ) { <nl> + if ( fieldDescriptions = = null | | fieldDescriptions . length = = 0 ) { <nl> + throw new IllegalArgumentException ( " You must provide at least one field name . " ) ; <nl> + } <nl> + if ( sortOrders = = null | | sortOrders . length = = 0 ) { <nl> + throw new IllegalArgumentException ( " You must provide at least one sort order . " ) ; <nl> + } <nl> + if ( fieldDescriptions . length ! = sortOrders . length ) { <nl> + throw new IllegalArgumentException ( " Number of fields and sort orders do not match . " ) ; <nl> + } <nl> + <nl> + long [ ] [ ] columnIndices = new long [ fieldDescriptions . length ] [ ] ; <nl> + for ( int i = 0 ; i < fieldDescriptions . length ; i + + ) { <nl> + FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , false ) ; <nl> + checkFieldTypeForSort ( descriptor . getLastFieldType ( ) , descriptor . getLastFieldName ( ) , fieldDescriptions [ i ] ) ; <nl> + columnIndices [ i ] = descriptor . getColumnIndices ( ) ; <nl> + } <nl> + <nl> + return new SortDescriptor ( table , columnIndices , sortOrders ) ; <nl> + } <nl> + <nl> + public static SortDescriptor getInstanceForDistinct ( Table table , String fieldDescription ) { <nl> + return getInstanceForDistinct ( table , new String [ ] { fieldDescription } ) ; <nl> + } <nl> + <nl> + public static SortDescriptor getInstanceForDistinct ( Table table , String [ ] fieldDescriptions ) { <nl> + if ( fieldDescriptions = = null | | fieldDescriptions . length = = 0 ) { <nl> + throw new IllegalArgumentException ( " You must provide at least one field name . " ) ; <nl> + } <nl> + <nl> + long [ ] [ ] columnIndices = new long [ fieldDescriptions . length ] [ ] ; <nl> + for ( int i = 0 ; i < fieldDescriptions . length ; i + + ) { <nl> + FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , false ) ; <nl> + checkFieldTypeForDistinct ( <nl> + descriptor . getLastFieldType ( ) , descriptor . getLastFieldName ( ) , fieldDescriptions [ i ] ) ; <nl> + columnIndices [ i ] = descriptor . getColumnIndices ( ) ; <nl> + } <nl> + <nl> + return new SortDescriptor ( table , columnIndices , null ) ; <nl> + } <nl> + <nl> + public long getNativePtr ( ) { <nl> + return nativePtr ; <nl> + } <nl> + <nl> + private static void checkFieldTypeForSort ( RealmFieldType type , String fieldName , String fieldDescriptions ) { <nl> + for ( RealmFieldType aValidFieldTypesForSort : validFieldTypesForSort ) { <nl> + if ( aValidFieldTypesForSort = = type ) { <nl> + return ; <nl> + } <nl> + } <nl> + throw new IllegalArgumentException ( String . format ( <nl> + " Sort is not supported on ' % s ' field ' % s ' in ' % s ' . " , type . toString ( ) , fieldName , fieldDescriptions ) ) ; <nl> + } <nl> + <nl> + private static void checkFieldTypeForDistinct ( RealmFieldType type , String fieldName , String fieldDescriptions ) { <nl> + for ( RealmFieldType aValidFieldTypesForSort : validFieldTypesForDistinct ) { <nl> + if ( aValidFieldTypesForSort = = type ) { <nl> + return ; <nl> + } <nl> + } <nl> + throw new IllegalArgumentException ( String . format ( <nl> + " Distinct is not supported on ' % s ' field ' % s ' in ' % s ' . " , <nl> + type . toString ( ) , fieldName , fieldDescriptions ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void close ( ) { <nl> + nativeClose ( nativePtr ) ; <nl> + nativePtr = 0 ; <nl> + } <nl> + <nl> + private static native long nativeCreate ( long tablePtr , long [ ] [ ] columnIndices , boolean [ ] ascending ) ; <nl> + private static native void nativeClose ( long ptr ) ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> index d8c6433 . . 342c176 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> @ @ - 72 , 6 + 72 , 11 @ @ public class TableQuery implements NativeObject { <nl> return nativeFinalizerPtr ; <nl> } <nl> <nl> + / / FIXME : Hide this ? <nl> + public Table getTable ( ) { <nl> + return table ; <nl> + } <nl> + <nl> / * * <nl> * Checks in core if query syntax is valid . Throws exception , if not . <nl> * /
NEAREST DIFF (one line): diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java <nl> index f2b05d5 . . 632552f 100644 <nl> - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java <nl> + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import android . widget . TextView ; <nl> import java . io . IOException ; <nl> <nl> import io . realm . Realm ; <nl> - import io . realm . ResultList ; <nl> + import io . realm . RealmResults ; <nl> import io . realm . examples . realmintroexample . model . Cat ; <nl> import io . realm . examples . realmintroexample . model . Dog ; <nl> import io . realm . examples . realmintroexample . model . Person ; <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class RealmBasicExampleActivity extends Activity { <nl> <nl> Realm realm = new Realm ( this ) ; <nl> showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; <nl> - ResultList < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; <nl> + RealmResults < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; <nl> showStatus ( " Size of result set : " + result . size ( ) ) ; <nl> } <nl> <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class RealmBasicExampleActivity extends Activity { <nl> Realm realm = new Realm ( this ) ; <nl> status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; <nl> / / Find all persons where age > 5 <nl> - ResultList < Person > result = realm . where ( Person . class ) <nl> + RealmResults < Person > result = realm . where ( Person . class ) <nl> . greaterThan ( " age " , 5 ) . between ( " age " , 7 , 9 ) . beginsWith ( " name " , " Person " ) . findAll ( ) ; <nl> status + = " \ nSize of result set : " + result . size ( ) ; <nl> return status ; <nl> diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> index 6129e54 . . 33a6375 100644 <nl> - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package io . realm . examples . realmintroexample . model ; <nl> <nl> - import io . realm . RelationList ; <nl> + import io . realm . RealmList ; <nl> import io . realm . RealmObject ; <nl> <nl> public class Person extends RealmObject { <nl> @ @ - 8 , 7 + 8 , 7 @ @ public class Person extends RealmObject { <nl> private String name ; <nl> private int age ; <nl> private Dog dog ; <nl> - private RelationList < Cat > cats ; <nl> + private RealmList < Cat > cats ; <nl> <nl> public String getName ( ) { <nl> return name ; <nl> @ @ - 34 , 11 + 34 , 11 @ @ public class Person extends RealmObject { <nl> this . dog = dog ; <nl> } <nl> <nl> - public RelationList < Cat > getCats ( ) { <nl> + public RealmList < Cat > getCats ( ) { <nl> return cats ; <nl> } <nl> <nl> - public void setCats ( RelationList < Cat > cats ) { <nl> + public void setCats ( RealmList < Cat > cats ) { <nl> this . cats = cats ; <nl> } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java <nl> index a684c2d . . 0146782 100755 <nl> - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java <nl> + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import android . view . ViewGroup ; <nl> import android . widget . BaseAdapter ; <nl> import android . widget . TextView ; <nl> <nl> - import io . realm . ResultList ; <nl> + import java . util . List ; <nl> <nl> public class CityAdapter extends BaseAdapter { <nl> <nl> @ @ - 15 , 13 + 15 , 13 @ @ public class CityAdapter extends BaseAdapter { <nl> <nl> private LayoutInflater inflater ; <nl> <nl> - private ResultList < City > cities = null ; <nl> + private List < City > cities = null ; <nl> <nl> public CityAdapter ( Context context ) { <nl> inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT _ INFLATER _ SERVICE ) ; <nl> } <nl> <nl> - public void setData ( ResultList < City > details ) { <nl> + public void setData ( List < City > details ) { <nl> this . cities = details ; <nl> } <nl> <nl> diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> index d7b98cd . . 71ae952 100644 <nl> - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ import java . util . List ; <nl> <nl> import io . realm . Realm ; <nl> import io . realm . RealmQuery ; <nl> - import io . realm . ResultList ; <nl> + import io . realm . RealmResults ; <nl> <nl> public class RealmExampleActivity extends Activity implements LoaderManager . LoaderCallbacks < List < City > > , AdapterView . OnItemClickListener { <nl> <nl> @ @ - 64 , 7 + 64 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load <nl> <nl> public void updateCities ( ) { <nl> Realm realm = new Realm ( this ) ; <nl> - ResultList < City > cities = realm . where ( City . class ) . findAll ( ) ; <nl> + RealmResults < City > cities = realm . where ( City . class ) . findAll ( ) ; <nl> mAdapter . setData ( cities ) ; <nl> <nl> mAdapter . notifyDataSetChanged ( ) ; <nl> diff - - git a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> index 3f62975 . . 851cdda 100644 <nl> - - - a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> + + + b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import io . realm . Realm ; <nl> - import io . realm . ResultList ; <nl> + import io . realm . RealmResults ; <nl> import io . realm . internal . ColumnType ; <nl> import io . realm . internal . ReadTransaction ; <nl> import io . realm . internal . SharedGroup ; <nl> @ @ - 111 , 7 + 111 , 7 @ @ public class PerformanceTask extends AsyncTask < Integer , String , String > { <nl> <nl> timer = System . currentTimeMillis ( ) ; <nl> / / Debug . startMethodTracing ( " reads " ) ; <nl> - ResultList < User > realmList = realm . where ( User . class ) . findAll ( ) ; <nl> + RealmResults < User > realmList = realm . where ( User . class ) . findAll ( ) ; <nl> for ( int i = 0 ; i < listSize ; i + + ) { <nl> / / IUser u = realmList . getTest ( i , IUser . class ) ; <nl> User u = realmList . get ( i ) ; <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java <nl> index cc295fc . . 9bb0e96 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class RealmSourceCodeGenerator { <nl> Types typeUtils = processingEnvironment . getTypeUtils ( ) ; <nl> <nl> TypeMirror realmObject = elementUtils . getTypeElement ( " io . realm . RealmObject " ) . asType ( ) ; <nl> - DeclaredType relationList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RelationList " ) , typeUtils . getWildcardType ( null , null ) ) ; <nl> + DeclaredType realmList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; <nl> <nl> / / Set source code indent to 4 spaces <nl> writer . setIndent ( " " ) ; <nl> @ @ - 134 , 7 + 134 , 7 @ @ public class RealmSourceCodeGenerator { <nl> " io . realm . internal . ImplicitTransaction " , <nl> " io . realm . internal . Row " , <nl> " io . realm . internal . LinkView " , <nl> - " io . realm . RelationList " , <nl> + " io . realm . RealmList " , <nl> " io . realm . RealmObject " ) <nl> . emitEmptyLine ( ) ; <nl> <nl> @ @ - 203 , 7 + 203 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . endControlFlow ( ) ; <nl> writer . emitStatement ( " realmGetRow ( ) . setLink ( % d , value . realmGetRow ( ) . getIndex ( ) ) " , columnNumber ) ; <nl> writer . endMethod ( ) ; <nl> - } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { <nl> + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> / * * <nl> * LinkLists <nl> * / <nl> @ @ - 219 , 7 + 219 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( fieldTypeCanonicalName , " get " + capitaliseFirstChar ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; <nl> writer . emitStatement ( <nl> - " return new RelationList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , <nl> + " return new RealmList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , <nl> genericType , columnNumber ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> @ @ - 231 , 7 + 231 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . beginControlFlow ( " if ( value = = null ) " ) ; <nl> writer . emitStatement ( " return " ) ; / / TODO : delete all the links instead <nl> writer . endControlFlow ( ) ; <nl> - writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RelationList < ? extends RealmObject > ) value ) " ) ; <nl> + writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RealmList < ? extends RealmObject > ) value ) " ) ; <nl> writer . emitStatement ( " links . add ( linkedObject . realmGetRow ( ) . getIndex ( ) ) " ) ; <nl> writer . endControlFlow ( ) ; <nl> writer . endMethod ( ) ; <nl> @ @ - 275 , 7 + 275 , 7 @ @ public class RealmSourceCodeGenerator { <nl> writer . endControlFlow ( ) ; <nl> writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK , \ " % s \ " , transaction . getTable ( \ " % s \ " ) ) " , <nl> fieldName . toLowerCase ( Locale . getDefault ( ) ) , fieldTypeName ) ; <nl> - } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { <nl> + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; <nl> String genericType ; <nl> if ( genericCanonicalType . contains ( " . " ) ) { <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index ccce5d2 . . 3cbbacd 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 424 , 7 + 424 , 7 @ @ public class Realm { <nl> } <nl> <nl> <nl> - public < E extends RealmObject > ResultList < E > allObjects ( Class < E > clazz ) { <nl> + public < E extends RealmObject > RealmResults < E > allObjects ( Class < E > clazz ) { <nl> return where ( clazz ) . findAll ( ) ; <nl> } <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> new file mode 100644 <nl> index 0000000 . . f2944de <nl> - - - / dev / null <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 0 , 0 + 1 , 89 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm ; <nl> + <nl> + import java . util . AbstractList ; <nl> + <nl> + import io . realm . internal . LinkView ; <nl> + <nl> + public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> + <nl> + private Class < E > clazz ; <nl> + private LinkView view ; <nl> + private Realm realm ; <nl> + <nl> + public RealmList ( Class < E > clazz , LinkView view , Realm realm ) { <nl> + this . clazz = clazz ; <nl> + this . view = view ; <nl> + this . realm = realm ; <nl> + } <nl> + <nl> + @ Override <nl> + public void add ( int location , E object ) { <nl> + view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public E set ( int location , E object ) { <nl> + view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; <nl> + return object ; <nl> + } <nl> + <nl> + public void move ( int oldPos , int newPos ) { <nl> + view . move ( oldPos , newPos ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void clear ( ) { <nl> + view . clear ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public E remove ( int location ) { <nl> + view . remove ( location ) ; <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public E get ( int i ) { <nl> + return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; <nl> + } <nl> + <nl> + public E first ( ) { <nl> + if ( ! view . isEmpty ( ) ) { <nl> + return get ( 0 ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + public E last ( ) { <nl> + if ( ! view . isEmpty ( ) ) { <nl> + return get ( size ( ) - 1 ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public int size ( ) { <nl> + return ( ( Long ) view . size ( ) ) . intValue ( ) ; <nl> + } <nl> + <nl> + public RealmQuery < E > where ( ) { <nl> + return null ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index 68ebcb2 . . 97ee1f5 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import io . realm . internal . TableQuery ; <nl> * / <nl> public class RealmQuery < E extends RealmObject > { <nl> <nl> - private ResultList realmList ; <nl> + private RealmResults realmList ; <nl> private Realm realm ; <nl> private TableQuery query ; <nl> private Map < String , Integer > columns = new HashMap < String , Integer > ( ) ; <nl> @ @ - 48 , 7 + 48 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> } <nl> } <nl> <nl> - public RealmQuery ( ResultList realmList , Class < E > clazz ) { <nl> + public RealmQuery ( RealmResults realmList , Class < E > clazz ) { <nl> this . realmList = realmList ; <nl> <nl> this . realm = realmList . getRealm ( ) ; <nl> @ @ - 454 , 12 + 454 , 12 @ @ public class RealmQuery < E extends RealmObject > { <nl> <nl> / / Execute <nl> <nl> - public ResultList < E > findAll ( ) { <nl> - return new ResultList < E > ( realm , query . findAll ( ) , clazz ) ; <nl> + public RealmResults < E > findAll ( ) { <nl> + return new RealmResults < E > ( realm , query . findAll ( ) , clazz ) ; <nl> } <nl> <nl> public E findFirst ( ) { <nl> - ResultList < E > result = findAll ( ) ; <nl> + RealmResults < E > result = findAll ( ) ; <nl> if ( result . size ( ) > 0 ) { <nl> return findAll ( ) . get ( 0 ) ; <nl> } else { <nl> diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java <nl> new file mode 100644 <nl> index 0000000 . . d1d8c30 <nl> - - - / dev / null <nl> + + + b / realm / src / main / java / io / realm / RealmResults . java <nl> @ @ - 0 , 0 + 1 , 273 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm ; <nl> + <nl> + <nl> + import java . util . AbstractList ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import io . realm . internal . TableOrView ; <nl> + import io . realm . internal . TableView ; <nl> + <nl> + / * * <nl> + * <nl> + * @ param < E > The class of objects in this list <nl> + * / <nl> + public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> + <nl> + private Class < E > classSpec ; <nl> + private Realm realm ; <nl> + private TableOrView table = null ; <nl> + <nl> + RealmResults ( Realm realm , Class < E > classSpec ) { <nl> + this . realm = realm ; <nl> + this . classSpec = classSpec ; <nl> + } <nl> + <nl> + RealmResults ( Realm realm , TableOrView table , Class < E > classSpec ) { <nl> + this ( realm , classSpec ) ; <nl> + this . table = table ; <nl> + } <nl> + <nl> + Realm getRealm ( ) { <nl> + return realm ; <nl> + } <nl> + <nl> + TableOrView getTable ( ) { <nl> + <nl> + if ( table = = null ) { <nl> + return realm . getTable ( classSpec ) ; <nl> + } else { <nl> + return table ; <nl> + } <nl> + } <nl> + <nl> + Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; <nl> + <nl> + <nl> + public RealmQuery < E > where ( ) { <nl> + return new RealmQuery < E > ( this , classSpec ) ; <nl> + } <nl> + <nl> + <nl> + @ Override <nl> + public E get ( int rowIndex ) { <nl> + <nl> + E obj ; <nl> + <nl> + TableOrView table = getTable ( ) ; <nl> + if ( table instanceof TableView ) { <nl> + obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; <nl> + } else { <nl> + obj = realm . get ( classSpec , rowIndex ) ; <nl> + } <nl> + <nl> + return obj ; <nl> + } <nl> + <nl> + public E first ( ) { <nl> + return get ( 0 ) ; <nl> + } <nl> + <nl> + public E last ( ) { <nl> + return get ( size ( ) - 1 ) ; <nl> + } <nl> + <nl> + / / Sorting <nl> + <nl> + / / public static enum Order { <nl> + / / ASCENDING , DESCENDING <nl> + / / } <nl> + / / <nl> + / / / * * <nl> + / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . <nl> + / / * <nl> + / / * @ param fieldName The field name to sort by . <nl> + / / * @ return A sorted RealmList <nl> + / / * / <nl> + / / public RealmList < E > sort ( String fieldName ) { <nl> + / / return sort ( fieldName , Order . ASCENDING ) ; <nl> + / / } <nl> + / / <nl> + / / / * * <nl> + / / * Get a sorted RealmList from an existing RealmList . <nl> + / / * <nl> + / / * @ param fieldName The field name to sort by . <nl> + / / * @ param sortOrder The direction to sort by . <nl> + / / * @ return A sorted RealmList . <nl> + / / * / <nl> + / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { <nl> + / / throw new NoSuchMethodError ( ) ; <nl> + / / } <nl> + <nl> + <nl> + / / Aggregates <nl> + <nl> + @ Override <nl> + public int size ( ) { <nl> + return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Find the minimum value of a field . <nl> + * <nl> + * @ param fieldName The field to look for a minimum on . Only int , float , and double <nl> + * are supported . <nl> + * @ return <nl> + * / <nl> + public Number min ( String fieldName ) { <nl> + / / TODO : Date <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . minimumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . minimumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . minimumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Find the maximum value of a field . <nl> + * <nl> + * @ param fieldName The field to look for a maximum on . Only int , float , and double <nl> + * are supported . <nl> + * @ return The maximum value . <nl> + * / <nl> + public Number max ( String fieldName ) { <nl> + / / TODO : Date <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . maximumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . maximumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . maximumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Calculate the sum of a field . <nl> + * <nl> + * @ param fieldName The field to sum . Only int , float , and double are supported . <nl> + * @ return The sum . <nl> + * / <nl> + <nl> + public Number sum ( String fieldName ) { <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . sumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . sumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . sumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Returns the average of a given field for objects in a RealmList . <nl> + * <nl> + * @ param fieldName The field to calculate average on . Only properties of type int , <nl> + * float and double are supported . <nl> + * @ return The average for the given field amongst objects in an RealmList . This <nl> + * will be of type double for both float and double field . <nl> + * / <nl> + public double average ( String fieldName ) { <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . averageLong ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . averageDouble ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . averageFloat ( columnIndex ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / / Deleting <nl> + <nl> + / * * <nl> + * Removes an object at a given index . <nl> + * <nl> + * @ param index The array index identifying the object to be removed . <nl> + * @ return Always return null . <nl> + * / <nl> + @ Override <nl> + public E remove ( int index ) { <nl> + TableOrView table = getTable ( ) ; <nl> + table . remove ( index ) ; <nl> + return null ; <nl> + } <nl> + <nl> + / * * <nl> + * Removes the last object in a RealmList . <nl> + * <nl> + * / <nl> + public void removeLast ( ) { <nl> + TableOrView table = getTable ( ) ; <nl> + table . removeLast ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Removes all objects from a RealmList . <nl> + * <nl> + * / <nl> + public void clear ( ) { <nl> + TableOrView table = getTable ( ) ; <nl> + table . clear ( ) ; <nl> + } <nl> + <nl> + / / Adding objects <nl> + <nl> + @ Override <nl> + @ Deprecated <nl> + public boolean add ( E element ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Deprecated <nl> + public void add ( int index , E element ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + / / <nl> + / / / * * <nl> + / / * Replaces an object at the given index with a new object . <nl> + / / * <nl> + / / * @ param index The array index of the object to be replaced . <nl> + / / * @ param element An object . <nl> + / / * / <nl> + / / public void replace ( int index , E element ) { <nl> + / / throw new NoSuchMethodError ( ) ; <nl> + / / } <nl> + } <nl> diff - - git a / realm / src / main / java / io / realm / RelationList . java b / realm / src / main / java / io / realm / RelationList . java <nl> deleted file mode 100644 <nl> index 3616353 . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / RelationList . java <nl> + + + / dev / null <nl> @ @ - 1 , 89 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - import java . util . AbstractList ; <nl> - <nl> - import io . realm . internal . LinkView ; <nl> - <nl> - public class RelationList < E extends RealmObject > extends AbstractList < E > { <nl> - <nl> - private Class < E > clazz ; <nl> - private LinkView view ; <nl> - private Realm realm ; <nl> - <nl> - public RelationList ( Class < E > clazz , LinkView view , Realm realm ) { <nl> - this . clazz = clazz ; <nl> - this . view = view ; <nl> - this . realm = realm ; <nl> - } <nl> - <nl> - @ Override <nl> - public void add ( int location , E object ) { <nl> - view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public E set ( int location , E object ) { <nl> - view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; <nl> - return object ; <nl> - } <nl> - <nl> - public void move ( int oldPos , int newPos ) { <nl> - view . move ( oldPos , newPos ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void clear ( ) { <nl> - view . clear ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public E remove ( int location ) { <nl> - view . remove ( location ) ; <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public E get ( int i ) { <nl> - return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; <nl> - } <nl> - <nl> - public E first ( ) { <nl> - if ( ! view . isEmpty ( ) ) { <nl> - return get ( 0 ) ; <nl> - } <nl> - return null ; <nl> - } <nl> - <nl> - public E last ( ) { <nl> - if ( ! view . isEmpty ( ) ) { <nl> - return get ( size ( ) - 1 ) ; <nl> - } <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public int size ( ) { <nl> - return ( ( Long ) view . size ( ) ) . intValue ( ) ; <nl> - } <nl> - <nl> - public RealmQuery < E > where ( ) { <nl> - return null ; <nl> - } <nl> - <nl> - } <nl> diff - - git a / realm / src / main / java / io / realm / ResultList . java b / realm / src / main / java / io / realm / ResultList . java <nl> deleted file mode 100644 <nl> index c92a51b . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / ResultList . java <nl> + + + / dev / null <nl> @ @ - 1 , 273 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm ; <nl> - <nl> - <nl> - import java . util . AbstractList ; <nl> - import java . util . HashMap ; <nl> - import java . util . Map ; <nl> - <nl> - import io . realm . internal . TableOrView ; <nl> - import io . realm . internal . TableView ; <nl> - <nl> - / * * <nl> - * <nl> - * @ param < E > The class of objects in this list <nl> - * / <nl> - public class ResultList < E extends RealmObject > extends AbstractList < E > { <nl> - <nl> - private Class < E > classSpec ; <nl> - private Realm realm ; <nl> - private TableOrView table = null ; <nl> - <nl> - ResultList ( Realm realm , Class < E > classSpec ) { <nl> - this . realm = realm ; <nl> - this . classSpec = classSpec ; <nl> - } <nl> - <nl> - ResultList ( Realm realm , TableOrView table , Class < E > classSpec ) { <nl> - this ( realm , classSpec ) ; <nl> - this . table = table ; <nl> - } <nl> - <nl> - Realm getRealm ( ) { <nl> - return realm ; <nl> - } <nl> - <nl> - TableOrView getTable ( ) { <nl> - <nl> - if ( table = = null ) { <nl> - return realm . getTable ( classSpec ) ; <nl> - } else { <nl> - return table ; <nl> - } <nl> - } <nl> - <nl> - Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; <nl> - <nl> - <nl> - public RealmQuery < E > where ( ) { <nl> - return new RealmQuery < E > ( this , classSpec ) ; <nl> - } <nl> - <nl> - <nl> - @ Override <nl> - public E get ( int rowIndex ) { <nl> - <nl> - E obj ; <nl> - <nl> - TableOrView table = getTable ( ) ; <nl> - if ( table instanceof TableView ) { <nl> - obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; <nl> - } else { <nl> - obj = realm . get ( classSpec , rowIndex ) ; <nl> - } <nl> - <nl> - return obj ; <nl> - } <nl> - <nl> - public E first ( ) { <nl> - return get ( 0 ) ; <nl> - } <nl> - <nl> - public E last ( ) { <nl> - return get ( size ( ) - 1 ) ; <nl> - } <nl> - <nl> - / / Sorting <nl> - <nl> - / / public static enum Order { <nl> - / / ASCENDING , DESCENDING <nl> - / / } <nl> - / / <nl> - / / / * * <nl> - / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . <nl> - / / * <nl> - / / * @ param fieldName The field name to sort by . <nl> - / / * @ return A sorted RealmList <nl> - / / * / <nl> - / / public RealmList < E > sort ( String fieldName ) { <nl> - / / return sort ( fieldName , Order . ASCENDING ) ; <nl> - / / } <nl> - / / <nl> - / / / * * <nl> - / / * Get a sorted RealmList from an existing RealmList . <nl> - / / * <nl> - / / * @ param fieldName The field name to sort by . <nl> - / / * @ param sortOrder The direction to sort by . <nl> - / / * @ return A sorted RealmList . <nl> - / / * / <nl> - / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { <nl> - / / throw new NoSuchMethodError ( ) ; <nl> - / / } <nl> - <nl> - <nl> - / / Aggregates <nl> - <nl> - @ Override <nl> - public int size ( ) { <nl> - return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Find the minimum value of a field . <nl> - * <nl> - * @ param fieldName The field to look for a minimum on . Only int , float , and double <nl> - * are supported . <nl> - * @ return <nl> - * / <nl> - public Number min ( String fieldName ) { <nl> - / / TODO : Date <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . minimumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . minimumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . minimumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * Find the maximum value of a field . <nl> - * <nl> - * @ param fieldName The field to look for a maximum on . Only int , float , and double <nl> - * are supported . <nl> - * @ return The maximum value . <nl> - * / <nl> - public Number max ( String fieldName ) { <nl> - / / TODO : Date <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . maximumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . maximumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . maximumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * Calculate the sum of a field . <nl> - * <nl> - * @ param fieldName The field to sum . Only int , float , and double are supported . <nl> - * @ return The sum . <nl> - * / <nl> - <nl> - public Number sum ( String fieldName ) { <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . sumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . sumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . sumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * Returns the average of a given field for objects in a RealmList . <nl> - * <nl> - * @ param fieldName The field to calculate average on . Only properties of type int , <nl> - * float and double are supported . <nl> - * @ return The average for the given field amongst objects in an RealmList . This <nl> - * will be of type double for both float and double field . <nl> - * / <nl> - public double average ( String fieldName ) { <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . averageLong ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . averageDouble ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . averageFloat ( columnIndex ) ; <nl> - default : <nl> - throw new RuntimeException ( " Wrong type " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / / Deleting <nl> - <nl> - / * * <nl> - * Removes an object at a given index . <nl> - * <nl> - * @ param index The array index identifying the object to be removed . <nl> - * @ return Always return null . <nl> - * / <nl> - @ Override <nl> - public E remove ( int index ) { <nl> - TableOrView table = getTable ( ) ; <nl> - table . remove ( index ) ; <nl> - return null ; <nl> - } <nl> - <nl> - / * * <nl> - * Removes the last object in a RealmList . <nl> - * <nl> - * / <nl> - public void removeLast ( ) { <nl> - TableOrView table = getTable ( ) ; <nl> - table . removeLast ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Removes all objects from a RealmList . <nl> - * <nl> - * / <nl> - public void clear ( ) { <nl> - TableOrView table = getTable ( ) ; <nl> - table . clear ( ) ; <nl> - } <nl> - <nl> - / / Adding objects <nl> - <nl> - @ Override <nl> - @ Deprecated <nl> - public boolean add ( E element ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - @ Deprecated <nl> - public void add ( int index , E element ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - / / <nl> - / / / * * <nl> - / / * Replaces an object at the given index with a new object . <nl> - / / * <nl> - / / * @ param index The array index of the object to be replaced . <nl> - / / * @ param element An object . <nl> - / / * / <nl> - / / public void replace ( int index , E element ) { <nl> - / / throw new NoSuchMethodError ( ) ; <nl> - / / } <nl> - }

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 index d3dadc3 . . d66571c 100644 
 - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt 
 + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 @ @ - 37 , 7 + 37 , 8 @ @ set ( classes _ LIST 
 io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow 
 io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil 
 io . realm . log . LogLevel io . realm . log . RealmLog io . realm . Property io . realm . RealmSchema 
 - io . realm . RealmObjectSchema io . realm . internal . Collection io . realm . internal . NativeObjectReference 
 + io . realm . RealmObjectSchema io . realm . internal . Collection io . realm . internal . SortDescriptor 
 + io . realm . internal . NativeObjectReference 
 ) 
 # / . / is the workaround for the problem that AS cannot find the jni headers . 
 # See https : / / github . com / googlesamples / android - ndk / issues / 319 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp b / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp 
 new file mode 100644 
 index 0000000 . . 7dcc8ef 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ SortDescriptor . cpp 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + # include " io _ realm _ internal _ SortDescriptor . h " 
 + 
 + # include < realm / views . hpp > 
 + 
 + # include " util . hpp " 
 + 
 + using namespace realm ; 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ internal _ SortDescriptor _ nativeCreate ( JNIEnv * env , jclass , jlong table _ ptr , jobjectArray column _ indices , 
 + jbooleanArray ascending ) 
 + { 
 + try { 
 + JniArrayOfArrays < JniLongArray , jlongArray > arrays ( env , column _ indices ) ; 
 + JniBooleanArray ascending _ array ( env , ascending ) ; 
 + jsize arr _ len = arrays . len ( ) ; 
 + 
 + std : : vector < std : : vector < size _ t > > indices ; 
 + std : : vector < bool > ascending _ list ; 
 + 
 + for ( int i = 0 ; i < arr _ len ; + + i ) { 
 + JniLongArray & jni _ long _ array = arrays [ i ] ; 
 + std : : vector < size _ t > col _ indices ; 
 + for ( int j = 0 ; j < jni _ long _ array . len ( ) ; + + j ) { 
 + col _ indices . push _ back ( static _ cast < size _ t > ( jni _ long _ array [ j ] ) ) ; 
 + } 
 + indices . push _ back ( std : : move ( col _ indices ) ) ; 
 + if ( ascending ) { 
 + ascending _ list . push _ back ( static _ cast < bool > ( ascending _ array [ i ] ) ) ; 
 + } 
 + } 
 + 
 + SortDescriptor * descriptor = ascending ? 
 + new SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) , std : : move ( ascending _ list ) ) 
 + : new SortDescriptor ( * reinterpret _ cast < Table * > ( table _ ptr ) , std : : move ( indices ) ) ; 
 + return reinterpret _ cast < jlong > ( descriptor ) ; 
 + } CATCH _ STD ( ) 
 + 
 + return reinterpret _ cast < jlong > ( nullptr ) ; 
 + } 
 + 
 + JNIEXPORT void JNICALL 
 + Java _ io _ realm _ internal _ SortDescriptor _ nativeClose ( JNIEnv * env , jclass , jlong ptr ) { 
 + try { 
 + SortDescriptor * descriptor = reinterpret _ cast < SortDescriptor * > ( ptr ) ; 
 + delete descriptor ; 
 + } CATCH _ STD ( ) 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index dcd63e8 . . 99bfcfe 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 46 , 26 + 46 , 17 @ @ static void finalize _ notification _ token ( jlong ptr ) 
 
 JNIEXPORT jlong JNICALL 
 Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong shared _ realm _ ptr , jlong query _ ptr , 
 - jlongArray colunm _ indices , jbooleanArray jsort _ orders ) 
 + jlong sort _ desc _ native _ ptr ) 
 { 
 TR _ ENTER ( ) 
 try { 
 auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; 
 auto query = reinterpret _ cast < Query * > ( query _ ptr ) ; 
 + Results * results = sort _ desc _ native _ ptr ? 
 + new Results ( shared _ realm , * query , * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ) : 
 + new Results ( shared _ realm , * query , { } ) ; 
 
 - JniBooleanArray order ( env , jsort _ orders ) ; 
 - JniLongArray indices ( env , colunm _ indices ) ; 
 - 
 - std : : vector < bool > sort _ order ; 
 - std : : vector < std : : vector < size _ t > > sort _ indices ; 
 - for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { 
 - sort _ order . push _ back ( to _ bool ( order [ i ] ) ) ; 
 - sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; 
 - } 
 - 
 - SortDescriptor sort _ descriptor ( * ( query - > get _ table ( ) . get ( ) ) , sort _ indices , sort _ order ) ; 
 - Results results ( shared _ realm , * query , sort _ descriptor ) ; 
 - return reinterpret _ cast < jlong > ( new Results ( std : : move ( results ) ) ) ; 
 + return reinterpret _ cast < jlong > ( results ) ; 
 } CATCH _ STD ( ) 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / util . hpp b / realm / realm - library / src / main / cpp / util . hpp 
 index 53825bf . . 2c0c5ca 100644 
 - - - a / realm / realm - library / src / main / cpp / util . hpp 
 + + + b / realm / realm - library / src / main / cpp / util . hpp 
 @ @ - 493 , 6 + 493 , 21 @ @ public : 
 , m _ releaseMode ( JNI _ ABORT ) { 
 } 
 
 + JniLongArray ( JniLongArray & other ) = delete ; 
 + 
 + JniLongArray ( JniLongArray & & other ) 
 + : m _ env ( other . m _ env ) 
 + , m _ javaArray ( other . m _ javaArray ) 
 + , m _ arrayLength ( other . m _ arrayLength ) 
 + , m _ array ( other . m _ array ) 
 + , m _ releaseMode ( other . m _ releaseMode ) 
 + { 
 + other . m _ env = nullptr ; 
 + other . m _ javaArray = nullptr ; 
 + other . m _ arrayLength = 0 ; 
 + other . m _ array = nullptr ; 
 + } 
 + 
 ~ JniLongArray ( ) 
 { 
 if ( m _ array ) { 
 @ @ - 521 , 11 + 536 , 47 @ @ public : 
 } 
 
 private : 
 - JNIEnv * const m _ env ; 
 - jlongArray const m _ javaArray ; 
 - jsize const m _ arrayLength ; 
 - jlong * const m _ array ; 
 - jint m _ releaseMode ; 
 + JNIEnv * m _ env ; 
 + jlongArray m _ javaArray ; 
 + jsize m _ arrayLength ; 
 + jlong * m _ array ; 
 + jint m _ releaseMode ; 
 + } ; 
 + 
 + template < typename T , typename J > 
 + class JniArrayOfArrays { 
 + public : 
 + JniArrayOfArrays ( JNIEnv * env , jobjectArray javaArray ) 
 + : m _ env ( env ) 
 + , m _ javaArray ( javaArray ) 
 + , m _ arrayLength ( javaArray = = NULL ? 0 : env - > GetArrayLength ( javaArray ) ) 
 + { 
 + for ( int i = 0 ; i < m _ arrayLength ; i + + ) { 
 + / / No type checking . Internal use only . 
 + J j _ array = static _ cast < J > ( env - > GetObjectArrayElement ( m _ javaArray , i ) ) ; 
 + m _ array . push _ back ( T ( env , j _ array ) ) ; 
 + } 
 + } 
 + 
 + ~ JniArrayOfArrays ( ) 
 + { 
 + } 
 + 
 + inline jsize len ( ) const noexcept 
 + { 
 + return m _ arrayLength ; 
 + } 
 + 
 + inline T & operator [ ] ( const int index ) noexcept 
 + { 
 + return m _ array [ index ] ; 
 + } 
 + 
 + private : 
 + JNIEnv * const m _ env ; 
 + jobjectArray const m _ javaArray ; 
 + jsize const m _ arrayLength ; 
 + std : : vector < T > m _ array ; 
 } ; 
 
 class JniByteArray { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 593dc65 . . 8b87a89 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 27 , 11 + 27 , 13 @ @ import java . util . concurrent . Callable ; 
 import java . util . concurrent . Future ; 
 
 import io . realm . annotations . Required ; 
 + import io . realm . internal . Collection ; 
 import io . realm . internal . LinkView ; 
 import io . realm . internal . RealmNotifier ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 import io . realm . internal . SharedRealm ; 
 + import io . realm . internal . SortDescriptor ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableQuery ; 
 @ @ - 1647 , 11 + 1649 , 11 @ @ public final class RealmQuery < E extends RealmModel > { 
 public RealmResults < E > findAll ( ) { 
 checkQueryIsNotReused ( ) ; 
 RealmResults < E > realmResults ; 
 + Collection collection = new Collection ( realm . sharedRealm , query , null ) ; 
 if ( isDynamicQuery ( ) ) { 
 - realmResults = ( RealmResults < E > ) RealmResults . createFromDynamicTableOrView ( realm , query . findAll ( ) , className ) ; 
 + realmResults = new RealmResults < E > ( realm , collection , className ) ; 
 } else { 
 - / / realmResults = RealmResults . createFromTableOrView ( realm , query . findAll ( ) , clazz ) ; 
 - realmResults = RealmResults . createFromQuery ( realm , query , clazz , null , null ) ; 
 + realmResults = new RealmResults < E > ( realm , collection , clazz ) ; 
 } 
 return realmResults ; 
 } 
 @ @ - 1755 , 15 + 1757 , 14 @ @ public final class RealmQuery < E extends RealmModel > { 
 @ SuppressWarnings ( " unchecked " ) 
 public RealmResults < E > findAllSorted ( String fieldName , Sort sortOrder ) { 
 checkQueryIsNotReused ( ) ; 
 - TableView tableView = query . findAll ( ) ; 
 - long columnIndex = getColumnIndexForSort ( fieldName ) ; 
 - tableView . sort ( columnIndex , sortOrder ) ; 
 + SortDescriptor sortDescriptor = SortDescriptor . getInstanceForSort ( query . getTable ( ) , fieldName , sortOrder ) ; 
 
 + Collection collection = new Collection ( realm . sharedRealm , query , sortDescriptor ) ; 
 RealmResults < E > realmResults ; 
 if ( isDynamicQuery ( ) ) { 
 - realmResults = ( RealmResults < E > ) RealmResults . createFromDynamicTableOrView ( realm , tableView , className ) ; 
 + realmResults = new RealmResults < E > ( realm , collection , className ) ; 
 } else { 
 - realmResults = RealmResults . createFromTableOrView ( realm , tableView , clazz ) ; 
 + realmResults = new RealmResults < E > ( realm , collection , clazz ) ; 
 } 
 return realmResults ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 4a68b92 . . 5acdb45 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 95 , 12 + 95 , 6 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public static final byte AGGREGATE _ FUNCTION _ AVERAGE = 3 ; 
 public static final byte AGGREGATE _ FUNCTION _ SUM = 4 ; 
 
 - static < E extends RealmModel > RealmResults < E > createFromQuery ( BaseRealm realm , TableQuery query , Class < E > clazz , 
 - String fieldNames [ ] , Sort [ ] sortOrder ) { 
 - Collection collection = new Collection ( realm . sharedRealm , query , null , null ) ; 
 - return new RealmResults < E > ( realm , collection , clazz ) ; 
 - } 
 - 
 static < E extends RealmModel > RealmResults < E > createFromTableQuery ( BaseRealm realm , TableQuery query , Class < E > clazz ) { 
 return new RealmResults < E > ( realm , query , clazz ) ; 
 } 
 @ @ - 128 , 6 + 122 , 13 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 this . collection = collection ; 
 } 
 
 + RealmResults ( BaseRealm realm , io . realm . internal . Collection collection , String className ) { 
 + this . realm = realm ; 
 + this . query = null ; 
 + this . className = className ; 
 + this . collection = collection ; 
 + } 
 + 
 private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz , String fieldNames [ ] , Sort [ ] sortOrder ) { 
 this . realm = realm ; 
 this . classSpec = clazz ; 
 @ @ - 807 , 7 + 808 , 8 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 * / 
 public E next ( ) { 
 realm . checkIfValid ( ) ; 
 - checkRealmIsStable ( ) ; 
 + / / FIXME : Enable this 
 + / / checkRealmIsStable ( ) ; 
 pos + + ; 
 if ( pos > = size ( ) ) { 
 throw new NoSuchElementException ( " Cannot access index " + pos + " when size is " + size ( ) + " . Remember to check hasNext ( ) before using next ( ) . " ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index 05872dd . . 7b4e838 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 103 , 11 + 103 , 16 @ @ public class Collection implements NativeObject { 
 } 
 } 
 
 - public Collection ( SharedRealm sharedRealm , TableQuery query , long indices [ ] , boolean [ ] orders ) { 
 + public Collection ( SharedRealm sharedRealm , TableQuery query , SortDescriptor sortDescriptor ) { 
 this . context = sharedRealm . context ; 
 this . query = query ; 
 
 - this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , indices , orders ) ; 
 + if ( sortDescriptor = = null ) { 
 + this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , 0 ) ; 
 + } else { 
 + this . nativePtr = nativeCreateResults ( sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , 
 + sortDescriptor . getNativePtr ( ) ) ; 
 + } 
 this . context . addReference ( this ) ; 
 } 
 
 @ @ - 180 , 8 + 185 , 8 @ @ public class Collection implements NativeObject { 
 } 
 
 private static native long nativeGetFinalizerPtr ( ) ; 
 - private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , long [ ] columnIndices , 
 - boolean [ ] orders ) ; 
 + private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , 
 + long sortDescNativePtr ) ; 
 private static native long nativeCreateSnapshot ( long nativePtr ) ; 
 private static native long nativeGetRow ( long nativePtr , int index ) ; 
 private static native boolean nativeContains ( long nativePtr , long nativeRowPtr ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java 
 new file mode 100644 
 index 0000000 . . 6cfdd6b 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / FieldDescriptor . java 
 @ @ - 0 , 0 + 1 , 91 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package io . realm . internal ; 
 + 
 + import io . realm . RealmFieldType ; 
 + 
 + public class FieldDescriptor { 
 + 
 + private long [ ] columnIndices ; 
 + private RealmFieldType lastFieldType ; 
 + private String lastFieldName ; 
 + 
 + public FieldDescriptor ( Table table , String fieldDescription , boolean allowList ) { 
 + if ( fieldDescription = = null | | fieldDescription . isEmpty ( ) ) { 
 + throw new IllegalArgumentException ( " Non - empty field name must be provided " ) ; 
 + } 
 + if ( fieldDescription . startsWith ( " . " ) | | fieldDescription . endsWith ( " . " ) ) { 
 + throw new IllegalArgumentException ( " Illegal field name . It cannot start or end with a ' . ' : " + fieldDescription ) ; 
 + } 
 + if ( fieldDescription . contains ( " . " ) ) { 
 + / / Resolve field description down to last field name 
 + String [ ] names = fieldDescription . split ( " \ \ . " ) ; 
 + long [ ] columnIndices = new long [ names . length ] ; 
 + for ( int i = 0 ; i < names . length - 1 ; i + + ) { 
 + long index = table . getColumnIndex ( names [ i ] ) ; 
 + if ( index < 0 ) { 
 + throw new IllegalArgumentException ( 
 + String . format ( " Invalid field name : ' % s ' does not refer to a class . " , names [ i ] ) ) ; 
 + } 
 + RealmFieldType type = table . getColumnType ( index ) ; 
 + if ( type = = RealmFieldType . OBJECT | | ( allowList & & type = = RealmFieldType . LIST ) ) { 
 + table = table . getLinkTarget ( index ) ; 
 + columnIndices [ i ] = index ; 
 + } else if ( ! allowList & & type = = RealmFieldType . LIST ) { 
 + throw new IllegalArgumentException ( 
 + String . format ( " ' RealmList ' field ' % s ' is not a supported link field here . " , names [ i ] ) ) ; 
 + } else { 
 + throw new IllegalArgumentException ( 
 + String . format ( " Invalid field name : ' % s ' does not refer to a class . " , names [ i ] ) ) ; 
 + } 
 + / / TODO : Check search index for distinct ? 
 + } 
 + 
 + / / Check if last field name is a valid field 
 + String columnName = names [ names . length - 1 ] ; 
 + long columnIndex = table . getColumnIndex ( columnName ) ; 
 + columnIndices [ names . length - 1 ] = columnIndex ; 
 + if ( columnIndex < 0 ) { 
 + throw new IllegalArgumentException ( 
 + String . format ( " ' % s ' is not a field name in class ' % s ' . " , columnName , table . getName ( ) ) ) ; 
 + } 
 + 
 + this . lastFieldType = table . getColumnType ( columnIndex ) ; 
 + this . lastFieldName = columnName ; 
 + this . columnIndices = columnIndices ; 
 + } else { 
 + long fieldIndex = table . getColumnIndex ( fieldDescription ) ; 
 + if ( fieldIndex = = Table . NO _ MATCH ) { 
 + throw new IllegalArgumentException ( String . format ( " Field ' % s ' does not exist . " , fieldDescription ) ) ; 
 + } 
 + this . lastFieldType = table . getColumnType ( fieldIndex ) ; 
 + this . lastFieldName = fieldDescription ; 
 + this . columnIndices = new long [ ] { fieldIndex } ; 
 + } 
 + } 
 + 
 + public long [ ] getColumnIndices ( ) { 
 + return columnIndices ; 
 + } 
 + 
 + public RealmFieldType getLastFieldType ( ) { 
 + return lastFieldType ; 
 + } 
 + 
 + public String getLastFieldName ( ) { 
 + return lastFieldName ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 new file mode 100644 
 index 0000000 . . 1b14544 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SortDescriptor . java 
 @ @ - 0 , 0 + 1 , 139 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . internal ; 
 + 
 + import java . io . * ; 
 + 
 + import io . realm . RealmFieldType ; 
 + import io . realm . Sort ; 
 + 
 + public class SortDescriptor implements Closeable { 
 + 
 + private final long [ ] [ ] columnIndices ; 
 + private final boolean [ ] ascendings ; 
 + private long nativePtr = 0 ; 
 + private final static RealmFieldType [ ] validFieldTypesForSort = new RealmFieldType [ ] { 
 + RealmFieldType . BOOLEAN , RealmFieldType . INTEGER , RealmFieldType . FLOAT , RealmFieldType . DOUBLE , 
 + RealmFieldType . STRING , RealmFieldType . DATE 
 + } ; 
 + private final static RealmFieldType [ ] validFieldTypesForDistinct = new RealmFieldType [ ] { 
 + RealmFieldType . BOOLEAN , RealmFieldType . INTEGER , RealmFieldType . STRING , RealmFieldType . DATE 
 + } ; 
 + 
 + / / Internal use only . For JNI testing . 
 + SortDescriptor ( Table table , long [ ] columnIndices ) { 
 + this ( table , new long [ ] [ ] { columnIndices } , null ) ; 
 + } 
 + 
 + / / Internal use only . For JNI testing . 
 + SortDescriptor ( Table table , long [ ] columnIndices , Sort sortOrder ) { 
 + this ( table , new long [ ] [ ] { columnIndices } , new Sort [ ] { sortOrder } ) ; 
 + } 
 + 
 + private SortDescriptor ( Table table , long [ ] [ ] columnIndices , Sort [ ] sortOrders ) { 
 + if ( sortOrders ! = null ) { 
 + ascendings = new boolean [ sortOrders . length ] ; 
 + for ( int i = 0 ; i < sortOrders . length ; i + + ) { 
 + ascendings [ i ] = sortOrders [ i ] . getValue ( ) ; 
 + } 
 + } else { 
 + ascendings = null ; 
 + } 
 + 
 + this . columnIndices = columnIndices ; 
 + nativePtr = nativeCreate ( table . getNativePtr ( ) , columnIndices , ascendings ) ; 
 + } 
 + 
 + public static SortDescriptor getInstanceForSort ( Table table , String fieldDescription , Sort sortOrder ) { 
 + return getInstanceForSort ( table , new String [ ] { fieldDescription } , new Sort [ ] { sortOrder } ) ; 
 + } 
 + 
 + public static SortDescriptor getInstanceForSort ( Table table , String [ ] fieldDescriptions , Sort [ ] sortOrders ) { 
 + if ( fieldDescriptions = = null | | fieldDescriptions . length = = 0 ) { 
 + throw new IllegalArgumentException ( " You must provide at least one field name . " ) ; 
 + } 
 + if ( sortOrders = = null | | sortOrders . length = = 0 ) { 
 + throw new IllegalArgumentException ( " You must provide at least one sort order . " ) ; 
 + } 
 + if ( fieldDescriptions . length ! = sortOrders . length ) { 
 + throw new IllegalArgumentException ( " Number of fields and sort orders do not match . " ) ; 
 + } 
 + 
 + long [ ] [ ] columnIndices = new long [ fieldDescriptions . length ] [ ] ; 
 + for ( int i = 0 ; i < fieldDescriptions . length ; i + + ) { 
 + FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , false ) ; 
 + checkFieldTypeForSort ( descriptor . getLastFieldType ( ) , descriptor . getLastFieldName ( ) , fieldDescriptions [ i ] ) ; 
 + columnIndices [ i ] = descriptor . getColumnIndices ( ) ; 
 + } 
 + 
 + return new SortDescriptor ( table , columnIndices , sortOrders ) ; 
 + } 
 + 
 + public static SortDescriptor getInstanceForDistinct ( Table table , String fieldDescription ) { 
 + return getInstanceForDistinct ( table , new String [ ] { fieldDescription } ) ; 
 + } 
 + 
 + public static SortDescriptor getInstanceForDistinct ( Table table , String [ ] fieldDescriptions ) { 
 + if ( fieldDescriptions = = null | | fieldDescriptions . length = = 0 ) { 
 + throw new IllegalArgumentException ( " You must provide at least one field name . " ) ; 
 + } 
 + 
 + long [ ] [ ] columnIndices = new long [ fieldDescriptions . length ] [ ] ; 
 + for ( int i = 0 ; i < fieldDescriptions . length ; i + + ) { 
 + FieldDescriptor descriptor = new FieldDescriptor ( table , fieldDescriptions [ i ] , false ) ; 
 + checkFieldTypeForDistinct ( 
 + descriptor . getLastFieldType ( ) , descriptor . getLastFieldName ( ) , fieldDescriptions [ i ] ) ; 
 + columnIndices [ i ] = descriptor . getColumnIndices ( ) ; 
 + } 
 + 
 + return new SortDescriptor ( table , columnIndices , null ) ; 
 + } 
 + 
 + public long getNativePtr ( ) { 
 + return nativePtr ; 
 + } 
 + 
 + private static void checkFieldTypeForSort ( RealmFieldType type , String fieldName , String fieldDescriptions ) { 
 + for ( RealmFieldType aValidFieldTypesForSort : validFieldTypesForSort ) { 
 + if ( aValidFieldTypesForSort = = type ) { 
 + return ; 
 + } 
 + } 
 + throw new IllegalArgumentException ( String . format ( 
 + " Sort is not supported on ' % s ' field ' % s ' in ' % s ' . " , type . toString ( ) , fieldName , fieldDescriptions ) ) ; 
 + } 
 + 
 + private static void checkFieldTypeForDistinct ( RealmFieldType type , String fieldName , String fieldDescriptions ) { 
 + for ( RealmFieldType aValidFieldTypesForSort : validFieldTypesForDistinct ) { 
 + if ( aValidFieldTypesForSort = = type ) { 
 + return ; 
 + } 
 + } 
 + throw new IllegalArgumentException ( String . format ( 
 + " Distinct is not supported on ' % s ' field ' % s ' in ' % s ' . " , 
 + type . toString ( ) , fieldName , fieldDescriptions ) ) ; 
 + } 
 + 
 + @ Override 
 + public void close ( ) { 
 + nativeClose ( nativePtr ) ; 
 + nativePtr = 0 ; 
 + } 
 + 
 + private static native long nativeCreate ( long tablePtr , long [ ] [ ] columnIndices , boolean [ ] ascending ) ; 
 + private static native void nativeClose ( long ptr ) ; 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 index d8c6433 . . 342c176 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 @ @ - 72 , 6 + 72 , 11 @ @ public class TableQuery implements NativeObject { 
 return nativeFinalizerPtr ; 
 } 
 
 + / / FIXME : Hide this ? 
 + public Table getTable ( ) { 
 + return table ; 
 + } 
 + 
 / * * 
 * Checks in core if query syntax is valid . Throws exception , if not . 
 * /

NEAREST DIFF:
diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java 
 index f2b05d5 . . 632552f 100644 
 - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java 
 + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / RealmBasicExampleActivity . java 
 @ @ - 10 , 7 + 10 , 7 @ @ import android . widget . TextView ; 
 import java . io . IOException ; 
 
 import io . realm . Realm ; 
 - import io . realm . ResultList ; 
 + import io . realm . RealmResults ; 
 import io . realm . examples . realmintroexample . model . Cat ; 
 import io . realm . examples . realmintroexample . model . Dog ; 
 import io . realm . examples . realmintroexample . model . Person ; 
 @ @ - 85 , 7 + 85 , 7 @ @ public class RealmBasicExampleActivity extends Activity { 
 
 Realm realm = new Realm ( this ) ; 
 showStatus ( " Number of persons : " + realm . allObjects ( Person . class ) . size ( ) ) ; 
 - ResultList < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; 
 + RealmResults < Person > result = realm . where ( Person . class ) . equalTo ( " age " , 99 ) . findAll ( ) ; 
 showStatus ( " Size of result set : " + result . size ( ) ) ; 
 } 
 
 @ @ - 160 , 7 + 160 , 7 @ @ public class RealmBasicExampleActivity extends Activity { 
 Realm realm = new Realm ( this ) ; 
 status + = " \ nNumber of persons : " + realm . allObjects ( Person . class ) . size ( ) ; 
 / / Find all persons where age > 5 
 - ResultList < Person > result = realm . where ( Person . class ) 
 + RealmResults < Person > result = realm . where ( Person . class ) 
 . greaterThan ( " age " , 5 ) . between ( " age " , 7 , 9 ) . beginsWith ( " name " , " Person " ) . findAll ( ) ; 
 status + = " \ nSize of result set : " + result . size ( ) ; 
 return status ; 
 diff - - git a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 index 6129e54 . . 33a6375 100644 
 - - - a / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 + + + b / distribution / RealmBasicExample / app / src / main / java / io / realm / examples / realmintroexample / model / Person . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package io . realm . examples . realmintroexample . model ; 
 
 - import io . realm . RelationList ; 
 + import io . realm . RealmList ; 
 import io . realm . RealmObject ; 
 
 public class Person extends RealmObject { 
 @ @ - 8 , 7 + 8 , 7 @ @ public class Person extends RealmObject { 
 private String name ; 
 private int age ; 
 private Dog dog ; 
 - private RelationList < Cat > cats ; 
 + private RealmList < Cat > cats ; 
 
 public String getName ( ) { 
 return name ; 
 @ @ - 34 , 11 + 34 , 11 @ @ public class Person extends RealmObject { 
 this . dog = dog ; 
 } 
 
 - public RelationList < Cat > getCats ( ) { 
 + public RealmList < Cat > getCats ( ) { 
 return cats ; 
 } 
 
 - public void setCats ( RelationList < Cat > cats ) { 
 + public void setCats ( RealmList < Cat > cats ) { 
 this . cats = cats ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java 
 index a684c2d . . 0146782 100755 
 - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java 
 + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / CityAdapter . java 
 @ @ - 7 , 7 + 7 , 7 @ @ import android . view . ViewGroup ; 
 import android . widget . BaseAdapter ; 
 import android . widget . TextView ; 
 
 - import io . realm . ResultList ; 
 + import java . util . List ; 
 
 public class CityAdapter extends BaseAdapter { 
 
 @ @ - 15 , 13 + 15 , 13 @ @ public class CityAdapter extends BaseAdapter { 
 
 private LayoutInflater inflater ; 
 
 - private ResultList < City > cities = null ; 
 + private List < City > cities = null ; 
 
 public CityAdapter ( Context context ) { 
 inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT _ INFLATER _ SERVICE ) ; 
 } 
 
 - public void setData ( ResultList < City > details ) { 
 + public void setData ( List < City > details ) { 
 this . cities = details ; 
 } 
 
 diff - - git a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 index d7b98cd . . 71ae952 100644 
 - - - a / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 + + + b / distribution / RealmGridViewExample / app / src / main / java / io / realm / examples / realmgridview / RealmExampleActivity . java 
 @ @ - 15 , 7 + 15 , 7 @ @ import java . util . List ; 
 
 import io . realm . Realm ; 
 import io . realm . RealmQuery ; 
 - import io . realm . ResultList ; 
 + import io . realm . RealmResults ; 
 
 public class RealmExampleActivity extends Activity implements LoaderManager . LoaderCallbacks < List < City > > , AdapterView . OnItemClickListener { 
 
 @ @ - 64 , 7 + 64 , 7 @ @ public class RealmExampleActivity extends Activity implements LoaderManager . Load 
 
 public void updateCities ( ) { 
 Realm realm = new Realm ( this ) ; 
 - ResultList < City > cities = realm . where ( City . class ) . findAll ( ) ; 
 + RealmResults < City > cities = realm . where ( City . class ) . findAll ( ) ; 
 mAdapter . setData ( cities ) ; 
 
 mAdapter . notifyDataSetChanged ( ) ; 
 diff - - git a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 index 3f62975 . . 851cdda 100644 
 - - - a / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 + + + b / examples / performance / src / main / java / performance / realm / io / performance / PerformanceTask . java 
 @ @ - 31 , 7 + 31 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 
 import io . realm . Realm ; 
 - import io . realm . ResultList ; 
 + import io . realm . RealmResults ; 
 import io . realm . internal . ColumnType ; 
 import io . realm . internal . ReadTransaction ; 
 import io . realm . internal . SharedGroup ; 
 @ @ - 111 , 7 + 111 , 7 @ @ public class PerformanceTask extends AsyncTask < Integer , String , String > { 
 
 timer = System . currentTimeMillis ( ) ; 
 / / Debug . startMethodTracing ( " reads " ) ; 
 - ResultList < User > realmList = realm . where ( User . class ) . findAll ( ) ; 
 + RealmResults < User > realmList = realm . where ( User . class ) . findAll ( ) ; 
 for ( int i = 0 ; i < listSize ; i + + ) { 
 / / IUser u = realmList . getTest ( i , IUser . class ) ; 
 User u = realmList . get ( i ) ; 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java 
 index cc295fc . . 9bb0e96 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmSourceCodeGenerator . java 
 @ @ - 120 , 7 + 120 , 7 @ @ public class RealmSourceCodeGenerator { 
 Types typeUtils = processingEnvironment . getTypeUtils ( ) ; 
 
 TypeMirror realmObject = elementUtils . getTypeElement ( " io . realm . RealmObject " ) . asType ( ) ; 
 - DeclaredType relationList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RelationList " ) , typeUtils . getWildcardType ( null , null ) ) ; 
 + DeclaredType realmList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; 
 
 / / Set source code indent to 4 spaces 
 writer . setIndent ( " " ) ; 
 @ @ - 134 , 7 + 134 , 7 @ @ public class RealmSourceCodeGenerator { 
 " io . realm . internal . ImplicitTransaction " , 
 " io . realm . internal . Row " , 
 " io . realm . internal . LinkView " , 
 - " io . realm . RelationList " , 
 + " io . realm . RealmList " , 
 " io . realm . RealmObject " ) 
 . emitEmptyLine ( ) ; 
 
 @ @ - 203 , 7 + 203 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . endControlFlow ( ) ; 
 writer . emitStatement ( " realmGetRow ( ) . setLink ( % d , value . realmGetRow ( ) . getIndex ( ) ) " , columnNumber ) ; 
 writer . endMethod ( ) ; 
 - } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { 
 + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 / * * 
 * LinkLists 
 * / 
 @ @ - 219 , 7 + 219 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( fieldTypeCanonicalName , " get " + capitaliseFirstChar ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; 
 writer . emitStatement ( 
 - " return new RelationList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , 
 + " return new RealmList ( % s . class , realmGetRow ( ) . getLinkList ( % d ) , realm ) " , 
 genericType , columnNumber ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 @ @ - 231 , 7 + 231 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . beginControlFlow ( " if ( value = = null ) " ) ; 
 writer . emitStatement ( " return " ) ; / / TODO : delete all the links instead 
 writer . endControlFlow ( ) ; 
 - writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RelationList < ? extends RealmObject > ) value ) " ) ; 
 + writer . beginControlFlow ( " for ( RealmObject linkedObject : ( RealmList < ? extends RealmObject > ) value ) " ) ; 
 writer . emitStatement ( " links . add ( linkedObject . realmGetRow ( ) . getIndex ( ) ) " ) ; 
 writer . endControlFlow ( ) ; 
 writer . endMethod ( ) ; 
 @ @ - 275 , 7 + 275 , 7 @ @ public class RealmSourceCodeGenerator { 
 writer . endControlFlow ( ) ; 
 writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK , \ " % s \ " , transaction . getTable ( \ " % s \ " ) ) " , 
 fieldName . toLowerCase ( Locale . getDefault ( ) ) , fieldTypeName ) ; 
 - } else if ( typeUtils . isAssignable ( field . asType ( ) , relationList ) ) { 
 + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; 
 String genericType ; 
 if ( genericCanonicalType . contains ( " . " ) ) { 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index ccce5d2 . . 3cbbacd 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 424 , 7 + 424 , 7 @ @ public class Realm { 
 } 
 
 
 - public < E extends RealmObject > ResultList < E > allObjects ( Class < E > clazz ) { 
 + public < E extends RealmObject > RealmResults < E > allObjects ( Class < E > clazz ) { 
 return where ( clazz ) . findAll ( ) ; 
 } 
 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 new file mode 100644 
 index 0000000 . . f2944de 
 - - - / dev / null 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm ; 
 + 
 + import java . util . AbstractList ; 
 + 
 + import io . realm . internal . LinkView ; 
 + 
 + public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 + 
 + private Class < E > clazz ; 
 + private LinkView view ; 
 + private Realm realm ; 
 + 
 + public RealmList ( Class < E > clazz , LinkView view , Realm realm ) { 
 + this . clazz = clazz ; 
 + this . view = view ; 
 + this . realm = realm ; 
 + } 
 + 
 + @ Override 
 + public void add ( int location , E object ) { 
 + view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public E set ( int location , E object ) { 
 + view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; 
 + return object ; 
 + } 
 + 
 + public void move ( int oldPos , int newPos ) { 
 + view . move ( oldPos , newPos ) ; 
 + } 
 + 
 + @ Override 
 + public void clear ( ) { 
 + view . clear ( ) ; 
 + } 
 + 
 + @ Override 
 + public E remove ( int location ) { 
 + view . remove ( location ) ; 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public E get ( int i ) { 
 + return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; 
 + } 
 + 
 + public E first ( ) { 
 + if ( ! view . isEmpty ( ) ) { 
 + return get ( 0 ) ; 
 + } 
 + return null ; 
 + } 
 + 
 + public E last ( ) { 
 + if ( ! view . isEmpty ( ) ) { 
 + return get ( size ( ) - 1 ) ; 
 + } 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public int size ( ) { 
 + return ( ( Long ) view . size ( ) ) . intValue ( ) ; 
 + } 
 + 
 + public RealmQuery < E > where ( ) { 
 + return null ; 
 + } 
 + 
 + } 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index 68ebcb2 . . 97ee1f5 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 30 , 7 + 30 , 7 @ @ import io . realm . internal . TableQuery ; 
 * / 
 public class RealmQuery < E extends RealmObject > { 
 
 - private ResultList realmList ; 
 + private RealmResults realmList ; 
 private Realm realm ; 
 private TableQuery query ; 
 private Map < String , Integer > columns = new HashMap < String , Integer > ( ) ; 
 @ @ - 48 , 7 + 48 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 } 
 } 
 
 - public RealmQuery ( ResultList realmList , Class < E > clazz ) { 
 + public RealmQuery ( RealmResults realmList , Class < E > clazz ) { 
 this . realmList = realmList ; 
 
 this . realm = realmList . getRealm ( ) ; 
 @ @ - 454 , 12 + 454 , 12 @ @ public class RealmQuery < E extends RealmObject > { 
 
 / / Execute 
 
 - public ResultList < E > findAll ( ) { 
 - return new ResultList < E > ( realm , query . findAll ( ) , clazz ) ; 
 + public RealmResults < E > findAll ( ) { 
 + return new RealmResults < E > ( realm , query . findAll ( ) , clazz ) ; 
 } 
 
 public E findFirst ( ) { 
 - ResultList < E > result = findAll ( ) ; 
 + RealmResults < E > result = findAll ( ) ; 
 if ( result . size ( ) > 0 ) { 
 return findAll ( ) . get ( 0 ) ; 
 } else { 
 diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java 
 new file mode 100644 
 index 0000000 . . d1d8c30 
 - - - / dev / null 
 + + + b / realm / src / main / java / io / realm / RealmResults . java 
 @ @ - 0 , 0 + 1 , 273 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm ; 
 + 
 + 
 + import java . util . AbstractList ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import io . realm . internal . TableOrView ; 
 + import io . realm . internal . TableView ; 
 + 
 + / * * 
 + * 
 + * @ param < E > The class of objects in this list 
 + * / 
 + public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 + 
 + private Class < E > classSpec ; 
 + private Realm realm ; 
 + private TableOrView table = null ; 
 + 
 + RealmResults ( Realm realm , Class < E > classSpec ) { 
 + this . realm = realm ; 
 + this . classSpec = classSpec ; 
 + } 
 + 
 + RealmResults ( Realm realm , TableOrView table , Class < E > classSpec ) { 
 + this ( realm , classSpec ) ; 
 + this . table = table ; 
 + } 
 + 
 + Realm getRealm ( ) { 
 + return realm ; 
 + } 
 + 
 + TableOrView getTable ( ) { 
 + 
 + if ( table = = null ) { 
 + return realm . getTable ( classSpec ) ; 
 + } else { 
 + return table ; 
 + } 
 + } 
 + 
 + Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; 
 + 
 + 
 + public RealmQuery < E > where ( ) { 
 + return new RealmQuery < E > ( this , classSpec ) ; 
 + } 
 + 
 + 
 + @ Override 
 + public E get ( int rowIndex ) { 
 + 
 + E obj ; 
 + 
 + TableOrView table = getTable ( ) ; 
 + if ( table instanceof TableView ) { 
 + obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; 
 + } else { 
 + obj = realm . get ( classSpec , rowIndex ) ; 
 + } 
 + 
 + return obj ; 
 + } 
 + 
 + public E first ( ) { 
 + return get ( 0 ) ; 
 + } 
 + 
 + public E last ( ) { 
 + return get ( size ( ) - 1 ) ; 
 + } 
 + 
 + / / Sorting 
 + 
 + / / public static enum Order { 
 + / / ASCENDING , DESCENDING 
 + / / } 
 + / / 
 + / / / * * 
 + / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . 
 + / / * 
 + / / * @ param fieldName The field name to sort by . 
 + / / * @ return A sorted RealmList 
 + / / * / 
 + / / public RealmList < E > sort ( String fieldName ) { 
 + / / return sort ( fieldName , Order . ASCENDING ) ; 
 + / / } 
 + / / 
 + / / / * * 
 + / / * Get a sorted RealmList from an existing RealmList . 
 + / / * 
 + / / * @ param fieldName The field name to sort by . 
 + / / * @ param sortOrder The direction to sort by . 
 + / / * @ return A sorted RealmList . 
 + / / * / 
 + / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { 
 + / / throw new NoSuchMethodError ( ) ; 
 + / / } 
 + 
 + 
 + / / Aggregates 
 + 
 + @ Override 
 + public int size ( ) { 
 + return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; 
 + } 
 + 
 + / * * 
 + * Find the minimum value of a field . 
 + * 
 + * @ param fieldName The field to look for a minimum on . Only int , float , and double 
 + * are supported . 
 + * @ return 
 + * / 
 + public Number min ( String fieldName ) { 
 + / / TODO : Date 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . minimumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . minimumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . minimumDouble ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Find the maximum value of a field . 
 + * 
 + * @ param fieldName The field to look for a maximum on . Only int , float , and double 
 + * are supported . 
 + * @ return The maximum value . 
 + * / 
 + public Number max ( String fieldName ) { 
 + / / TODO : Date 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . maximumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . maximumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . maximumDouble ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Calculate the sum of a field . 
 + * 
 + * @ param fieldName The field to sum . Only int , float , and double are supported . 
 + * @ return The sum . 
 + * / 
 + 
 + public Number sum ( String fieldName ) { 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . sumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . sumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . sumDouble ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Returns the average of a given field for objects in a RealmList . 
 + * 
 + * @ param fieldName The field to calculate average on . Only properties of type int , 
 + * float and double are supported . 
 + * @ return The average for the given field amongst objects in an RealmList . This 
 + * will be of type double for both float and double field . 
 + * / 
 + public double average ( String fieldName ) { 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . averageLong ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . averageDouble ( columnIndex ) ; 
 + case FLOAT : 
 + return table . averageFloat ( columnIndex ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 + } 
 + 
 + 
 + / / Deleting 
 + 
 + / * * 
 + * Removes an object at a given index . 
 + * 
 + * @ param index The array index identifying the object to be removed . 
 + * @ return Always return null . 
 + * / 
 + @ Override 
 + public E remove ( int index ) { 
 + TableOrView table = getTable ( ) ; 
 + table . remove ( index ) ; 
 + return null ; 
 + } 
 + 
 + / * * 
 + * Removes the last object in a RealmList . 
 + * 
 + * / 
 + public void removeLast ( ) { 
 + TableOrView table = getTable ( ) ; 
 + table . removeLast ( ) ; 
 + } 
 + 
 + / * * 
 + * Removes all objects from a RealmList . 
 + * 
 + * / 
 + public void clear ( ) { 
 + TableOrView table = getTable ( ) ; 
 + table . clear ( ) ; 
 + } 
 + 
 + / / Adding objects 
 + 
 + @ Override 
 + @ Deprecated 
 + public boolean add ( E element ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 + @ Override 
 + @ Deprecated 
 + public void add ( int index , E element ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + / / 
 + / / / * * 
 + / / * Replaces an object at the given index with a new object . 
 + / / * 
 + / / * @ param index The array index of the object to be replaced . 
 + / / * @ param element An object . 
 + / / * / 
 + / / public void replace ( int index , E element ) { 
 + / / throw new NoSuchMethodError ( ) ; 
 + / / } 
 + } 
 diff - - git a / realm / src / main / java / io / realm / RelationList . java b / realm / src / main / java / io / realm / RelationList . java 
 deleted file mode 100644 
 index 3616353 . . 0000000 
 - - - a / realm / src / main / java / io / realm / RelationList . java 
 + + + / dev / null 
 @ @ - 1 , 89 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - import java . util . AbstractList ; 
 - 
 - import io . realm . internal . LinkView ; 
 - 
 - public class RelationList < E extends RealmObject > extends AbstractList < E > { 
 - 
 - private Class < E > clazz ; 
 - private LinkView view ; 
 - private Realm realm ; 
 - 
 - public RelationList ( Class < E > clazz , LinkView view , Realm realm ) { 
 - this . clazz = clazz ; 
 - this . view = view ; 
 - this . realm = realm ; 
 - } 
 - 
 - @ Override 
 - public void add ( int location , E object ) { 
 - view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; 
 - } 
 - 
 - @ Override 
 - public E set ( int location , E object ) { 
 - view . set ( location , object . realmGetRow ( ) . getIndex ( ) ) ; 
 - return object ; 
 - } 
 - 
 - public void move ( int oldPos , int newPos ) { 
 - view . move ( oldPos , newPos ) ; 
 - } 
 - 
 - @ Override 
 - public void clear ( ) { 
 - view . clear ( ) ; 
 - } 
 - 
 - @ Override 
 - public E remove ( int location ) { 
 - view . remove ( location ) ; 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public E get ( int i ) { 
 - return realm . get ( clazz , view . getTargetRowIndex ( i ) ) ; 
 - } 
 - 
 - public E first ( ) { 
 - if ( ! view . isEmpty ( ) ) { 
 - return get ( 0 ) ; 
 - } 
 - return null ; 
 - } 
 - 
 - public E last ( ) { 
 - if ( ! view . isEmpty ( ) ) { 
 - return get ( size ( ) - 1 ) ; 
 - } 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public int size ( ) { 
 - return ( ( Long ) view . size ( ) ) . intValue ( ) ; 
 - } 
 - 
 - public RealmQuery < E > where ( ) { 
 - return null ; 
 - } 
 - 
 - } 
 diff - - git a / realm / src / main / java / io / realm / ResultList . java b / realm / src / main / java / io / realm / ResultList . java 
 deleted file mode 100644 
 index c92a51b . . 0000000 
 - - - a / realm / src / main / java / io / realm / ResultList . java 
 + + + / dev / null 
 @ @ - 1 , 273 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm ; 
 - 
 - 
 - import java . util . AbstractList ; 
 - import java . util . HashMap ; 
 - import java . util . Map ; 
 - 
 - import io . realm . internal . TableOrView ; 
 - import io . realm . internal . TableView ; 
 - 
 - / * * 
 - * 
 - * @ param < E > The class of objects in this list 
 - * / 
 - public class ResultList < E extends RealmObject > extends AbstractList < E > { 
 - 
 - private Class < E > classSpec ; 
 - private Realm realm ; 
 - private TableOrView table = null ; 
 - 
 - ResultList ( Realm realm , Class < E > classSpec ) { 
 - this . realm = realm ; 
 - this . classSpec = classSpec ; 
 - } 
 - 
 - ResultList ( Realm realm , TableOrView table , Class < E > classSpec ) { 
 - this ( realm , classSpec ) ; 
 - this . table = table ; 
 - } 
 - 
 - Realm getRealm ( ) { 
 - return realm ; 
 - } 
 - 
 - TableOrView getTable ( ) { 
 - 
 - if ( table = = null ) { 
 - return realm . getTable ( classSpec ) ; 
 - } else { 
 - return table ; 
 - } 
 - } 
 - 
 - Map < String , Class < ? > > cache = new HashMap < String , Class < ? > > ( ) ; 
 - 
 - 
 - public RealmQuery < E > where ( ) { 
 - return new RealmQuery < E > ( this , classSpec ) ; 
 - } 
 - 
 - 
 - @ Override 
 - public E get ( int rowIndex ) { 
 - 
 - E obj ; 
 - 
 - TableOrView table = getTable ( ) ; 
 - if ( table instanceof TableView ) { 
 - obj = realm . get ( classSpec , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; 
 - } else { 
 - obj = realm . get ( classSpec , rowIndex ) ; 
 - } 
 - 
 - return obj ; 
 - } 
 - 
 - public E first ( ) { 
 - return get ( 0 ) ; 
 - } 
 - 
 - public E last ( ) { 
 - return get ( size ( ) - 1 ) ; 
 - } 
 - 
 - / / Sorting 
 - 
 - / / public static enum Order { 
 - / / ASCENDING , DESCENDING 
 - / / } 
 - / / 
 - / / / * * 
 - / / * Get a sorted ( ASCENDING ) RealmList from an existing RealmList . 
 - / / * 
 - / / * @ param fieldName The field name to sort by . 
 - / / * @ return A sorted RealmList 
 - / / * / 
 - / / public RealmList < E > sort ( String fieldName ) { 
 - / / return sort ( fieldName , Order . ASCENDING ) ; 
 - / / } 
 - / / 
 - / / / * * 
 - / / * Get a sorted RealmList from an existing RealmList . 
 - / / * 
 - / / * @ param fieldName The field name to sort by . 
 - / / * @ param sortOrder The direction to sort by . 
 - / / * @ return A sorted RealmList . 
 - / / * / 
 - / / public RealmList < E > sort ( String fieldName , Order sortOrder ) { 
 - / / throw new NoSuchMethodError ( ) ; 
 - / / } 
 - 
 - 
 - / / Aggregates 
 - 
 - @ Override 
 - public int size ( ) { 
 - return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; 
 - } 
 - 
 - / * * 
 - * Find the minimum value of a field . 
 - * 
 - * @ param fieldName The field to look for a minimum on . Only int , float , and double 
 - * are supported . 
 - * @ return 
 - * / 
 - public Number min ( String fieldName ) { 
 - / / TODO : Date 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . minimumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . minimumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . minimumDouble ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / * * 
 - * Find the maximum value of a field . 
 - * 
 - * @ param fieldName The field to look for a maximum on . Only int , float , and double 
 - * are supported . 
 - * @ return The maximum value . 
 - * / 
 - public Number max ( String fieldName ) { 
 - / / TODO : Date 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . maximumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . maximumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . maximumDouble ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / * * 
 - * Calculate the sum of a field . 
 - * 
 - * @ param fieldName The field to sum . Only int , float , and double are supported . 
 - * @ return The sum . 
 - * / 
 - 
 - public Number sum ( String fieldName ) { 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . sumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . sumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . sumDouble ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / * * 
 - * Returns the average of a given field for objects in a RealmList . 
 - * 
 - * @ param fieldName The field to calculate average on . Only properties of type int , 
 - * float and double are supported . 
 - * @ return The average for the given field amongst objects in an RealmList . This 
 - * will be of type double for both float and double field . 
 - * / 
 - public double average ( String fieldName ) { 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . averageLong ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . averageDouble ( columnIndex ) ; 
 - case FLOAT : 
 - return table . averageFloat ( columnIndex ) ; 
 - default : 
 - throw new RuntimeException ( " Wrong type " ) ; 
 - } 
 - } 
 - 
 - 
 - / / Deleting 
 - 
 - / * * 
 - * Removes an object at a given index . 
 - * 
 - * @ param index The array index identifying the object to be removed . 
 - * @ return Always return null . 
 - * / 
 - @ Override 
 - public E remove ( int index ) { 
 - TableOrView table = getTable ( ) ; 
 - table . remove ( index ) ; 
 - return null ; 
 - } 
 - 
 - / * * 
 - * Removes the last object in a RealmList . 
 - * 
 - * / 
 - public void removeLast ( ) { 
 - TableOrView table = getTable ( ) ; 
 - table . removeLast ( ) ; 
 - } 
 - 
 - / * * 
 - * Removes all objects from a RealmList . 
 - * 
 - * / 
 - public void clear ( ) { 
 - TableOrView table = getTable ( ) ; 
 - table . clear ( ) ; 
 - } 
 - 
 - / / Adding objects 
 - 
 - @ Override 
 - @ Deprecated 
 - public boolean add ( E element ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - @ Override 
 - @ Deprecated 
 - public void add ( int index , E element ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - / / 
 - / / / * * 
 - / / * Replaces an object at the given index with a new object . 
 - / / * 
 - / / * @ param index The array index of the object to be replaced . 
 - / / * @ param element An object . 
 - / / * / 
 - / / public void replace ( int index , E element ) { 
 - / / throw new NoSuchMethodError ( ) ; 
 - / / } 
 - }
