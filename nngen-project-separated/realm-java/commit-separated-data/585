BLEU SCORE: 0.02383853510228548

TEST MSG: Let Mixpanel track the version of sync being used
GENERATED MSG: validate classes on realm creation

TEST DIFF (one line): diff - - git a / dependencies . list b / dependencies . list <nl> new file mode 100644 <nl> index 0000000 . . 7c08306 <nl> - - - / dev / null <nl> + + + b / dependencies . list <nl> @ @ - 0 , 0 + 1 , 2 @ @ <nl> + REALM _ SYNC _ VERSION = 1 . 0 . 0 - beta - 37 . 2 <nl> + REALM _ SYNC _ SHA256 = 7c8bd6bf952aff39ae56dace9674b951005cf6f320bc2266cbe7a71af73f4e2b <nl> \ No newline at end of file <nl> diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> index 8847a46 . . d84e9b8 100644 <nl> - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy <nl> @ @ - 52 , 7 + 52 , 6 @ @ class Realm implements Plugin < Project > { <nl> project . plugins . apply ( AndroidAptPlugin ) <nl> } <nl> <nl> - project . android . registerTransform ( new RealmTransformer ( project ) ) <nl> project . repositories . add ( project . getRepositories ( ) . jcenter ( ) ) <nl> project . dependencies . add ( " compile " , " io . realm : realm - annotations : $ { Version . VERSION } " ) <nl> if ( isKaptProject ) { <nl> @ @ - 70 , 6 + 69 , 7 @ @ class Realm implements Plugin < Project > { <nl> project . getGradle ( ) . addListener ( new DependencyResolutionListener ( ) { <nl> @ Override <nl> void beforeResolve ( ResolvableDependencies resolvableDependencies ) { <nl> + project . android . registerTransform ( new RealmTransformer ( project ) ) <nl> def suffix = project . realm . syncEnabled ? ' - object - server ' : ' ' <nl> compileDeps . add ( project . getDependencies ( ) . create ( " io . realm : realm - android - library $ { suffix } : $ { Version . VERSION } " ) ) <nl> project . getGradle ( ) . removeListener ( this ) <nl> diff - - git a / realm - transformer / build . gradle b / realm - transformer / build . gradle <nl> index 5fbfb92 . . 2dc0dad 100644 <nl> - - - a / realm - transformer / build . gradle <nl> + + + b / realm - transformer / build . gradle <nl> @ @ - 18 , 6 + 18 , 11 @ @ apply plugin : ' com . jfrog . bintray ' <nl> group = ' io . realm ' <nl> version = file ( " $ { projectDir } / . . / version . txt " ) . text . trim ( ) ; <nl> <nl> + def properties = new Properties ( ) <nl> + properties . load ( new FileInputStream ( " $ { projectDir } / . . / dependencies . list " ) ) <nl> + <nl> + def syncVersion = properties . getProperty ( ' REALM _ SYNC _ VERSION ' ) <nl> + <nl> sourceCompatibility = ' 1 . 6 ' <nl> targetCompatibility = ' 1 . 6 ' <nl> <nl> @ @ - 59 , 7 + 64 , 7 @ @ import org . apache . tools . ant . filters . ReplaceTokens <nl> task generateVersionClass ( type : Copy ) { <nl> from ' src / main / templates / Version . java ' <nl> into ' build / generated - src / main / java / io / realm / transformer ' <nl> - filter ( ReplaceTokens , tokens : [ version : version ] ) <nl> + filter ( ReplaceTokens , tokens : [ version : version , syncVersion : syncVersion ] ) <nl> outputs . upToDateWhen { false } <nl> } <nl> <nl> diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> index ba85db8 . . 0704cb2 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> @ @ - 146 , 7 + 146 , 7 @ @ class RealmTransformer extends Transform { <nl> def toc = System . currentTimeMillis ( ) <nl> logger . info " Realm Transform time : $ { toc - tic } milliseconds " <nl> <nl> - sendAnalytics ( inputs , inputModelClasses ) <nl> + this . sendAnalytics ( inputs , inputModelClasses ) <nl> } <nl> <nl> / * * <nl> @ @ - 154 , 7 + 154 , 7 @ @ class RealmTransformer extends Transform { <nl> * @ param inputs the inputs provided by the Transform API <nl> * @ param inputModelClasses a list of ctClasses describing the Realm models <nl> * / <nl> - private static sendAnalytics ( Collection < TransformInput > inputs , List < CtClass > inputModelClasses ) { <nl> + private sendAnalytics ( Collection < TransformInput > inputs , List < CtClass > inputModelClasses ) { <nl> def containsKotlin = false <nl> inputs . each { <nl> it . directoryInputs . each { <nl> @ @ - 177 , 7 + 177 , 8 @ @ class RealmTransformer extends Transform { <nl> def env = System . getenv ( ) <nl> def disableAnalytics = env [ " REALM _ DISABLE _ ANALYTICS " ] <nl> if ( disableAnalytics = = null | | disableAnalytics ! = " true " ) { <nl> - def analytics = RealmAnalytics . getInstance ( packages as Set , containsKotlin ) <nl> + boolean sync = project ? . realm ? . syncEnabled ! = null & & project . realm . syncEnabled <nl> + def analytics = new RealmAnalytics ( packages as Set , containsKotlin , sync ) <nl> analytics . execute ( ) <nl> } <nl> } <nl> @ @ - 246 , 7 + 247 , 7 @ @ class RealmTransformer extends Transform { <nl> / / The jar might not using File . separatorChar as the path separator . So we just replace both ` \ ` and <nl> / / ` / ` . It depends on how the jar file was created . <nl> / / See http : / / stackoverflow . com / questions / 13846000 / file - separators - of - path - name - of - zipentry <nl> - def className = path . substring ( 0 , path . length ( ) - SdkConstants . DOT _ CLASS . length ( ) ) <nl> + String className = path . substring ( 0 , path . length ( ) - SdkConstants . DOT _ CLASS . length ( ) ) <nl> . replace ( ' / ' as char , ' . ' as char ) <nl> . replace ( ' \ \ ' as char , ' . ' as char ) <nl> classNames . add ( className ) <nl> diff - - git a / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java <nl> index bd17094 . . 18dd7b8 100644 <nl> - - - a / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java <nl> + + + b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java <nl> @ @ - 19 , 11 + 19 , 9 @ @ package io . realm . transformer ; <nl> import java . io . UnsupportedEncodingException ; <nl> import java . net . HttpURLConnection ; <nl> import java . net . MalformedURLException ; <nl> - import java . net . NetworkInterface ; <nl> import java . net . SocketException ; <nl> import java . net . URL ; <nl> import java . security . NoSuchAlgorithmException ; <nl> - import java . util . Enumeration ; <nl> import java . util . Set ; <nl> <nl> / / Asynchronously submits build information to Realm when the annotation <nl> @ @ - 69 , 6 + 67 , 7 @ @ public class RealmAnalytics { <nl> + " \ " Anonymized Bundle ID \ " : \ " % APP _ ID % \ " , \ n " <nl> + " \ " Binding \ " : \ " java \ " , \ n " <nl> + " \ " Language \ " : \ " % LANGUAGE % \ " , \ n " <nl> + + " \ " Sync Version \ " : % SYNC _ VERSION % , \ n " <nl> + " \ " Realm Version \ " : \ " % REALM _ VERSION % \ " , \ n " <nl> + " \ " Host OS Type \ " : \ " % OS _ TYPE % \ " , \ n " <nl> + " \ " Host OS Version \ " : \ " % OS _ VERSION % \ " , \ n " <nl> @ @ - 80 , 17 + 79 , 12 @ @ public class RealmAnalytics { <nl> private Set < String > packages ; <nl> <nl> private boolean usesKotlin ; <nl> + private boolean usesSync ; <nl> <nl> - private RealmAnalytics ( Set < String > packages , boolean usesKotlin ) { <nl> + public RealmAnalytics ( Set < String > packages , boolean usesKotlin , boolean usesSync ) { <nl> this . packages = packages ; <nl> this . usesKotlin = usesKotlin ; <nl> - } <nl> - <nl> - public static RealmAnalytics getInstance ( Set < String > packages , boolean usesKotlin ) { <nl> - if ( instance = = null ) { <nl> - instance = new RealmAnalytics ( packages , usesKotlin ) ; <nl> - } <nl> - return instance ; <nl> + this . usesSync = usesSync ; <nl> } <nl> <nl> private void send ( ) { <nl> @ @ - 135 , 7 + 129 , 8 @ @ public class RealmAnalytics { <nl> . replaceAll ( " % TOKEN % " , TOKEN ) <nl> . replaceAll ( " % USER _ ID % " , ComputerIdentifierGenerator . get ( ) ) <nl> . replaceAll ( " % APP _ ID % " , getAnonymousAppId ( ) ) <nl> - . replaceAll ( " % LANGUAGE % " , usesKotlin ? " kotlin " : " java " ) <nl> + . replaceAll ( " % LANGUAGE % " , usesKotlin ? " kotlin " : " java " ) <nl> + . replaceAll ( " % SYNC _ VERSION % " , usesSync ? " \ " " + Version . SYNC _ VERSION + " \ " " : " null " ) <nl> . replaceAll ( " % REALM _ VERSION % " , Version . VERSION ) <nl> . replaceAll ( " % OS _ TYPE % " , System . getProperty ( " os . name " ) ) <nl> . replaceAll ( " % OS _ VERSION % " , System . getProperty ( " os . version " ) ) ; <nl> diff - - git a / realm - transformer / src / main / templates / Version . java b / realm - transformer / src / main / templates / Version . java <nl> index e1d6208 . . 9239f52 100644 <nl> - - - a / realm - transformer / src / main / templates / Version . java <nl> + + + b / realm - transformer / src / main / templates / Version . java <nl> @ @ - 2 , 4 + 2 , 5 @ @ package io . realm . transformer ; <nl> <nl> public class Version { <nl> public static final String VERSION = " @ version @ " ; <nl> + public static final String SYNC _ VERSION = " @ syncVersion @ " ; <nl> } <nl> diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index ad74c26 . . 0d3833e 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 12 , 9 + 12 , 12 @ @ apply plugin : ' checkstyle ' <nl> apply plugin : ' com . github . kt3k . coveralls ' <nl> apply plugin : ' de . undercouch . download ' <nl> <nl> - ext . coreVersion = ' 1 . 0 . 0 - beta - 37 . 2 ' <nl> + def properties = new Properties ( ) <nl> + properties . load ( new FileInputStream ( " $ { projectDir } / . . / . . / dependencies . list " ) ) <nl> + <nl> + ext . coreVersion = properties . getProperty ( ' REALM _ SYNC _ VERSION ' ) <nl> / / empty or comment out this to disable hash checking <nl> - ext . coreSha256Hash = ' 7c8bd6bf952aff39ae56dace9674b951005cf6f320bc2266cbe7a71af73f4e2b ' <nl> + ext . coreSha256Hash = properties . getProperty ( ' REALM _ SYNC _ SHA256 ' ) <nl> ext . forceDownloadCore = <nl> project . hasProperty ( ' forceDownloadCore ' ) ? project . getProperty ( ' forceDownloadCore ' ) . toBoolean ( ) : false <nl> / / Set the core source code path . By setting this , the core will be built from source . And coreVersion will be read from
NEAREST DIFF (one line): diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> index d58f14f . . 4aafcf2 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> @ @ - 35 , 8 + 35 , 8 @ @ import java . util . Set ; <nl> @ SupportedAnnotationTypes ( { " io . realm . annotations . RealmClass " , " io . realm . annotations . Ignore " } ) <nl> @ SupportedSourceVersion ( javax . lang . model . SourceVersion . RELEASE _ 6 ) <nl> public class RealmProcessor extends AbstractProcessor { <nl> - Set < String > classesToValidate = new HashSet < > ( ) ; <nl> - boolean done = false ; <nl> + static HashSet < String > classesToValidate = new HashSet < > ( ) ; <nl> + static boolean done = false ; <nl> <nl> @ Override <nl> public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 4f04d39 . . 2d5c060 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 31 , 7 + 31 , 6 @ @ import java . io . IOException ; <nl> import java . lang . String ; <nl> import java . util . * ; <nl> <nl> - <nl> public class RealmProxyClassGenerator { <nl> private ProcessingEnvironment processingEnvironment ; <nl> private String className ; <nl> @ @ - 221 , 6 + 220 , 7 @ @ public class RealmProxyClassGenerator { <nl> " io . realm . RealmObject " , <nl> " java . util . Date " , <nl> " java . util . Arrays " , <nl> + " java . util . HashMap " , <nl> packageName + " . * " ) <nl> . emitEmptyLine ( ) ; <nl> <nl> @ @ - 384 , 6 + 384 , 75 @ @ public class RealmProxyClassGenerator { <nl> writer . emitEmptyLine ( ) ; <nl> <nl> / * * <nl> + * validateTable method <nl> + * / <nl> + writer . beginMethod ( <nl> + " void " , / / Return type <nl> + " validateTable " , / / Method name <nl> + EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers <nl> + " ImplicitTransaction " , " transaction " ) ; / / Argument type & argument name <nl> + <nl> + writer . beginControlFlow ( " if ( transaction . hasTable ( \ " " + tablePrefix + this . className + " \ " ) ) " ) ; <nl> + writer . emitStatement ( " Table table = transaction . getTable ( \ " % s % s \ " ) " , tablePrefix , this . className ) ; <nl> + <nl> + / / verify number of columns <nl> + writer . beginControlFlow ( " if ( table . getColumnCount ( ) ! = " + fields . size ( ) + " ) " ) ; <nl> + writer . emitStatement ( " throw new IllegalStateException ( \ " Column count does not match \ " ) " ) ; <nl> + writer . endControlFlow ( ) ; <nl> + <nl> + / / create type dictionary for lookup <nl> + writer . emitStatement ( " HashMap < String , ColumnType > columnTypes = new HashMap < String , ColumnType > ( ) " ) ; <nl> + writer . beginControlFlow ( " for ( long i = 0 ; i < " + fields . size ( ) + " ; i + + ) " ) ; <nl> + writer . emitStatement ( " columnTypes . put ( table . getColumnName ( i ) , table . getColumnType ( i ) ) " ) ; <nl> + writer . endControlFlow ( ) ; <nl> + <nl> + / / For each field verfiy there is a corresponding column <nl> + for ( VariableElement field : fields ) { <nl> + String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> + String fieldTypeCanonicalName = field . asType ( ) . toString ( ) ; <nl> + String fieldTypeName ; <nl> + if ( fieldTypeCanonicalName . contains ( " . " ) ) { <nl> + fieldTypeName = fieldTypeCanonicalName . substring ( fieldTypeCanonicalName . lastIndexOf ( ' . ' ) + 1 ) ; <nl> + } else { <nl> + fieldTypeName = fieldTypeCanonicalName ; <nl> + } <nl> + <nl> + / / make sure types align <nl> + writer . beginControlFlow ( " if ( ! columnTypes . containsKey ( \ " % s \ " ) ) " , fieldName ) ; <nl> + writer . emitStatement ( " throw new IllegalStateException ( \ " Missing column for ' % s ' \ " ) " , fieldName ) ; <nl> + writer . endControlFlow ( ) ; <nl> + writer . beginControlFlow ( " if ( columnTypes . get ( \ " % s \ " ) ! = % s ) " , fieldName , JAVA _ TO _ COLUMN _ TYPES . get ( fieldTypeCanonicalName ) ) ; <nl> + writer . emitStatement ( " throw new IllegalStateException ( \ " Invalid type ' % s ' for column for ' % s ' \ " ) " , <nl> + fieldName , fieldTypeName ) ; <nl> + writer . endControlFlow ( ) ; <nl> + <nl> + / * FIXME - add validatoin for link and array types by comparing link targets <nl> + if ( typeUtils . isAssignable ( field . asType ( ) , realmObject ) ) { <nl> + writer . beginControlFlow ( " if ( ! transaction . hasTable ( \ " % s % s \ " ) ) " , tablePrefix , fieldTypeName ) ; <nl> + writer . emitStatement ( " % sRealmProxy . initTable ( transaction ) " , fieldTypeName ) ; <nl> + writer . endControlFlow ( ) ; <nl> + writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK , \ " % s \ " , transaction . getTable ( \ " % s % s \ " ) ) " , <nl> + fieldName . toLowerCase ( Locale . getDefault ( ) ) , tablePrefix , fieldTypeName ) ; <nl> + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> + String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; <nl> + String genericType ; <nl> + if ( genericCanonicalType . contains ( " . " ) ) { <nl> + genericType = genericCanonicalType . substring ( genericCanonicalType . lastIndexOf ( ' . ' ) + 1 ) ; <nl> + } else { <nl> + genericType = genericCanonicalType ; <nl> + } <nl> + writer . beginControlFlow ( " if ( ! transaction . hasTable ( \ " % s % s \ " ) ) " , tablePrefix , genericType ) ; <nl> + writer . emitStatement ( " % sRealmProxy . initTable ( transaction ) " , genericType ) ; <nl> + writer . endControlFlow ( ) ; <nl> + writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK _ LIST , \ " % s \ " , transaction . getTable ( \ " % s % s \ " ) ) " , <nl> + fieldName . toLowerCase ( Locale . getDefault ( ) ) , tablePrefix , genericType ) ; <nl> + } * / <nl> + } <nl> + writer . endControlFlow ( ) ; <nl> + writer . endMethod ( ) ; <nl> + writer . emitEmptyLine ( ) ; <nl> + <nl> + / * * <nl> * toString method <nl> * / <nl> writer . emitAnnotation ( " Override " ) ; <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index b323bd6 . . bb0727b 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ public class Realm { <nl> private static final Map < String , ThreadRealm > realms = new HashMap < String , ThreadRealm > ( ) ; <nl> private static final String TAG = " REALM " ; <nl> private static final String TABLE _ PREFIX = " class _ " ; <nl> + private static boolean validated = false ; <nl> <nl> private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; <nl> <nl> @ @ - 148 , 10 + 149 , 10 @ @ public class Realm { <nl> * / <nl> public static Realm create ( File writableFolder , String filename ) { <nl> String absolutePath = new File ( writableFolder , filename ) . getAbsolutePath ( ) ; <nl> - return create ( absolutePath ) ; <nl> + return createAndValidate ( absolutePath , true ) ; <nl> } <nl> <nl> - private static Realm create ( String absolutePath ) { <nl> + private static Realm createAndValidate ( String absolutePath , boolean validateSchema ) { <nl> ThreadRealm threadRealm = realms . get ( absolutePath ) ; <nl> if ( threadRealm = = null ) { <nl> threadRealm = new ThreadRealm ( absolutePath ) ; <nl> @ @ - 166 , 6 + 167 , 34 @ @ public class Realm { <nl> realmSoftReference = threadRealm . get ( ) ; <nl> realm = realmSoftReference . get ( ) ; <nl> } <nl> + if ( validateSchema ) { <nl> + / / FIXME - thread safety <nl> + if ( ! validated ) { <nl> + try { <nl> + Class < ? > validationClass = Class . forName ( " io . realm . ValidationList " ) ; <nl> + Method getProxyClassesMethod = validationClass . getMethod ( " getProxyClasses " ) ; <nl> + List < String > proxyClasses = ( List < String > ) getProxyClassesMethod . invoke ( null ) ; <nl> + for ( String className : proxyClasses ) { <nl> + Class < ? > modelClass = Class . forName ( className ) ; <nl> + Method validateMethod = modelClass . getMethod ( " validateTable " ) ; <nl> + validateMethod . invoke ( null , realm . transaction ) ; <nl> + } <nl> + } catch ( ClassNotFoundException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return null ; / / TODO : throw RealmException <nl> + } catch ( NoSuchMethodException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return null ; / / TODO : throw RealmException <nl> + } catch ( IllegalAccessException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return null ; / / TODO : throw RealmException <nl> + } catch ( InvocationTargetException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return null ; / / TODO : throw RealmException <nl> + } <nl> + validated = true ; <nl> + } <nl> + } <nl> return realm ; <nl> } <nl> <nl> @ @ - 479 , 11 + 508 , 6 @ @ public class Realm { <nl> return where ( clazz ) . findAll ( ) ; <nl> } <nl> <nl> - / / Migration <nl> - public void ensureRealmAtVersion ( int version , RealmMigration migration ) { <nl> - migration . execute ( this , version ) ; <nl> - } <nl> - <nl> / / Notifications <nl> public void addChangeListener ( RealmChangeListener listener ) { <nl> changeListeners . add ( listener ) ; <nl> @ @ - 541 , 11 + 565 , 11 @ @ public class Realm { <nl> getTable ( classSpec ) . clear ( ) ; <nl> } <nl> <nl> - public int getVersion ( ) { <nl> + private int getVersion ( ) { <nl> return version ; <nl> } <nl> <nl> - public void setVersion ( int version ) { <nl> + private void setVersion ( int version ) { <nl> this . version = version ; <nl> } <nl> <nl> @ @ - 555 , 6 + 579 , 16 @ @ public class Realm { <nl> * @ param context an Android context . <nl> * @ return false if a file could not be deleted . The failing file will be logged . <nl> * / <nl> + public void migrateRealmAtPath ( String realmPath , RealmMigration migration ) { <nl> + migration . execute ( this , version ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Delete the Realm file from the filesystem for the default Realm ( named " default . realm " ) . <nl> + * The realm must be unused and closed before calling this method . <nl> + * @ param context an Android context . <nl> + * @ return false if a file could not be deleted . The failing file will be logged . <nl> + * / <nl> public static boolean deleteRealmFile ( Context context ) { <nl> return deleteRealmFile ( context , DEFAULT _ REALM _ NAME ) ; <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmMigration . java b / realm / src / main / java / io / realm / RealmMigration . java <nl> index 2e7df7f . . e7dae52 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmMigration . java <nl> + + + b / realm / src / main / java / io / realm / RealmMigration . java <nl> @ @ - 18 , 6 + 18 , 11 @ @ package io . realm ; <nl> <nl> public interface RealmMigration { <nl> <nl> - public void execute ( Realm realm , int version ) ; <nl> - <nl> + / * * <nl> + * Implement this method in your sublcass to perform <nl> + * @ return The version of the Realm after executing the migration <nl> + * @ param realm The Realm on which to perform the migration <nl> + * @ param version The version of the Realm at the start of the migration <nl> + * / <nl> + public int execute ( Realm realm , int version ) ; <nl> }

TEST DIFF:
diff - - git a / dependencies . list b / dependencies . list 
 new file mode 100644 
 index 0000000 . . 7c08306 
 - - - / dev / null 
 + + + b / dependencies . list 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + REALM _ SYNC _ VERSION = 1 . 0 . 0 - beta - 37 . 2 
 + REALM _ SYNC _ SHA256 = 7c8bd6bf952aff39ae56dace9674b951005cf6f320bc2266cbe7a71af73f4e2b 
 \ No newline at end of file 
 diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 index 8847a46 . . d84e9b8 100644 
 - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / Realm . groovy 
 @ @ - 52 , 7 + 52 , 6 @ @ class Realm implements Plugin < Project > { 
 project . plugins . apply ( AndroidAptPlugin ) 
 } 
 
 - project . android . registerTransform ( new RealmTransformer ( project ) ) 
 project . repositories . add ( project . getRepositories ( ) . jcenter ( ) ) 
 project . dependencies . add ( " compile " , " io . realm : realm - annotations : $ { Version . VERSION } " ) 
 if ( isKaptProject ) { 
 @ @ - 70 , 6 + 69 , 7 @ @ class Realm implements Plugin < Project > { 
 project . getGradle ( ) . addListener ( new DependencyResolutionListener ( ) { 
 @ Override 
 void beforeResolve ( ResolvableDependencies resolvableDependencies ) { 
 + project . android . registerTransform ( new RealmTransformer ( project ) ) 
 def suffix = project . realm . syncEnabled ? ' - object - server ' : ' ' 
 compileDeps . add ( project . getDependencies ( ) . create ( " io . realm : realm - android - library $ { suffix } : $ { Version . VERSION } " ) ) 
 project . getGradle ( ) . removeListener ( this ) 
 diff - - git a / realm - transformer / build . gradle b / realm - transformer / build . gradle 
 index 5fbfb92 . . 2dc0dad 100644 
 - - - a / realm - transformer / build . gradle 
 + + + b / realm - transformer / build . gradle 
 @ @ - 18 , 6 + 18 , 11 @ @ apply plugin : ' com . jfrog . bintray ' 
 group = ' io . realm ' 
 version = file ( " $ { projectDir } / . . / version . txt " ) . text . trim ( ) ; 
 
 + def properties = new Properties ( ) 
 + properties . load ( new FileInputStream ( " $ { projectDir } / . . / dependencies . list " ) ) 
 + 
 + def syncVersion = properties . getProperty ( ' REALM _ SYNC _ VERSION ' ) 
 + 
 sourceCompatibility = ' 1 . 6 ' 
 targetCompatibility = ' 1 . 6 ' 
 
 @ @ - 59 , 7 + 64 , 7 @ @ import org . apache . tools . ant . filters . ReplaceTokens 
 task generateVersionClass ( type : Copy ) { 
 from ' src / main / templates / Version . java ' 
 into ' build / generated - src / main / java / io / realm / transformer ' 
 - filter ( ReplaceTokens , tokens : [ version : version ] ) 
 + filter ( ReplaceTokens , tokens : [ version : version , syncVersion : syncVersion ] ) 
 outputs . upToDateWhen { false } 
 } 
 
 diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 index ba85db8 . . 0704cb2 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 @ @ - 146 , 7 + 146 , 7 @ @ class RealmTransformer extends Transform { 
 def toc = System . currentTimeMillis ( ) 
 logger . info " Realm Transform time : $ { toc - tic } milliseconds " 
 
 - sendAnalytics ( inputs , inputModelClasses ) 
 + this . sendAnalytics ( inputs , inputModelClasses ) 
 } 
 
 / * * 
 @ @ - 154 , 7 + 154 , 7 @ @ class RealmTransformer extends Transform { 
 * @ param inputs the inputs provided by the Transform API 
 * @ param inputModelClasses a list of ctClasses describing the Realm models 
 * / 
 - private static sendAnalytics ( Collection < TransformInput > inputs , List < CtClass > inputModelClasses ) { 
 + private sendAnalytics ( Collection < TransformInput > inputs , List < CtClass > inputModelClasses ) { 
 def containsKotlin = false 
 inputs . each { 
 it . directoryInputs . each { 
 @ @ - 177 , 7 + 177 , 8 @ @ class RealmTransformer extends Transform { 
 def env = System . getenv ( ) 
 def disableAnalytics = env [ " REALM _ DISABLE _ ANALYTICS " ] 
 if ( disableAnalytics = = null | | disableAnalytics ! = " true " ) { 
 - def analytics = RealmAnalytics . getInstance ( packages as Set , containsKotlin ) 
 + boolean sync = project ? . realm ? . syncEnabled ! = null & & project . realm . syncEnabled 
 + def analytics = new RealmAnalytics ( packages as Set , containsKotlin , sync ) 
 analytics . execute ( ) 
 } 
 } 
 @ @ - 246 , 7 + 247 , 7 @ @ class RealmTransformer extends Transform { 
 / / The jar might not using File . separatorChar as the path separator . So we just replace both ` \ ` and 
 / / ` / ` . It depends on how the jar file was created . 
 / / See http : / / stackoverflow . com / questions / 13846000 / file - separators - of - path - name - of - zipentry 
 - def className = path . substring ( 0 , path . length ( ) - SdkConstants . DOT _ CLASS . length ( ) ) 
 + String className = path . substring ( 0 , path . length ( ) - SdkConstants . DOT _ CLASS . length ( ) ) 
 . replace ( ' / ' as char , ' . ' as char ) 
 . replace ( ' \ \ ' as char , ' . ' as char ) 
 classNames . add ( className ) 
 diff - - git a / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java 
 index bd17094 . . 18dd7b8 100644 
 - - - a / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java 
 + + + b / realm - transformer / src / main / java / io / realm / transformer / RealmAnalytics . java 
 @ @ - 19 , 11 + 19 , 9 @ @ package io . realm . transformer ; 
 import java . io . UnsupportedEncodingException ; 
 import java . net . HttpURLConnection ; 
 import java . net . MalformedURLException ; 
 - import java . net . NetworkInterface ; 
 import java . net . SocketException ; 
 import java . net . URL ; 
 import java . security . NoSuchAlgorithmException ; 
 - import java . util . Enumeration ; 
 import java . util . Set ; 
 
 / / Asynchronously submits build information to Realm when the annotation 
 @ @ - 69 , 6 + 67 , 7 @ @ public class RealmAnalytics { 
 + " \ " Anonymized Bundle ID \ " : \ " % APP _ ID % \ " , \ n " 
 + " \ " Binding \ " : \ " java \ " , \ n " 
 + " \ " Language \ " : \ " % LANGUAGE % \ " , \ n " 
 + + " \ " Sync Version \ " : % SYNC _ VERSION % , \ n " 
 + " \ " Realm Version \ " : \ " % REALM _ VERSION % \ " , \ n " 
 + " \ " Host OS Type \ " : \ " % OS _ TYPE % \ " , \ n " 
 + " \ " Host OS Version \ " : \ " % OS _ VERSION % \ " , \ n " 
 @ @ - 80 , 17 + 79 , 12 @ @ public class RealmAnalytics { 
 private Set < String > packages ; 
 
 private boolean usesKotlin ; 
 + private boolean usesSync ; 
 
 - private RealmAnalytics ( Set < String > packages , boolean usesKotlin ) { 
 + public RealmAnalytics ( Set < String > packages , boolean usesKotlin , boolean usesSync ) { 
 this . packages = packages ; 
 this . usesKotlin = usesKotlin ; 
 - } 
 - 
 - public static RealmAnalytics getInstance ( Set < String > packages , boolean usesKotlin ) { 
 - if ( instance = = null ) { 
 - instance = new RealmAnalytics ( packages , usesKotlin ) ; 
 - } 
 - return instance ; 
 + this . usesSync = usesSync ; 
 } 
 
 private void send ( ) { 
 @ @ - 135 , 7 + 129 , 8 @ @ public class RealmAnalytics { 
 . replaceAll ( " % TOKEN % " , TOKEN ) 
 . replaceAll ( " % USER _ ID % " , ComputerIdentifierGenerator . get ( ) ) 
 . replaceAll ( " % APP _ ID % " , getAnonymousAppId ( ) ) 
 - . replaceAll ( " % LANGUAGE % " , usesKotlin ? " kotlin " : " java " ) 
 + . replaceAll ( " % LANGUAGE % " , usesKotlin ? " kotlin " : " java " ) 
 + . replaceAll ( " % SYNC _ VERSION % " , usesSync ? " \ " " + Version . SYNC _ VERSION + " \ " " : " null " ) 
 . replaceAll ( " % REALM _ VERSION % " , Version . VERSION ) 
 . replaceAll ( " % OS _ TYPE % " , System . getProperty ( " os . name " ) ) 
 . replaceAll ( " % OS _ VERSION % " , System . getProperty ( " os . version " ) ) ; 
 diff - - git a / realm - transformer / src / main / templates / Version . java b / realm - transformer / src / main / templates / Version . java 
 index e1d6208 . . 9239f52 100644 
 - - - a / realm - transformer / src / main / templates / Version . java 
 + + + b / realm - transformer / src / main / templates / Version . java 
 @ @ - 2 , 4 + 2 , 5 @ @ package io . realm . transformer ; 
 
 public class Version { 
 public static final String VERSION = " @ version @ " ; 
 + public static final String SYNC _ VERSION = " @ syncVersion @ " ; 
 } 
 diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index ad74c26 . . 0d3833e 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 12 , 9 + 12 , 12 @ @ apply plugin : ' checkstyle ' 
 apply plugin : ' com . github . kt3k . coveralls ' 
 apply plugin : ' de . undercouch . download ' 
 
 - ext . coreVersion = ' 1 . 0 . 0 - beta - 37 . 2 ' 
 + def properties = new Properties ( ) 
 + properties . load ( new FileInputStream ( " $ { projectDir } / . . / . . / dependencies . list " ) ) 
 + 
 + ext . coreVersion = properties . getProperty ( ' REALM _ SYNC _ VERSION ' ) 
 / / empty or comment out this to disable hash checking 
 - ext . coreSha256Hash = ' 7c8bd6bf952aff39ae56dace9674b951005cf6f320bc2266cbe7a71af73f4e2b ' 
 + ext . coreSha256Hash = properties . getProperty ( ' REALM _ SYNC _ SHA256 ' ) 
 ext . forceDownloadCore = 
 project . hasProperty ( ' forceDownloadCore ' ) ? project . getProperty ( ' forceDownloadCore ' ) . toBoolean ( ) : false 
 / / Set the core source code path . By setting this , the core will be built from source . And coreVersion will be read from

NEAREST DIFF:
diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 index d58f14f . . 4aafcf2 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 @ @ - 35 , 8 + 35 , 8 @ @ import java . util . Set ; 
 @ SupportedAnnotationTypes ( { " io . realm . annotations . RealmClass " , " io . realm . annotations . Ignore " } ) 
 @ SupportedSourceVersion ( javax . lang . model . SourceVersion . RELEASE _ 6 ) 
 public class RealmProcessor extends AbstractProcessor { 
 - Set < String > classesToValidate = new HashSet < > ( ) ; 
 - boolean done = false ; 
 + static HashSet < String > classesToValidate = new HashSet < > ( ) ; 
 + static boolean done = false ; 
 
 @ Override 
 public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 4f04d39 . . 2d5c060 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 31 , 7 + 31 , 6 @ @ import java . io . IOException ; 
 import java . lang . String ; 
 import java . util . * ; 
 
 - 
 public class RealmProxyClassGenerator { 
 private ProcessingEnvironment processingEnvironment ; 
 private String className ; 
 @ @ - 221 , 6 + 220 , 7 @ @ public class RealmProxyClassGenerator { 
 " io . realm . RealmObject " , 
 " java . util . Date " , 
 " java . util . Arrays " , 
 + " java . util . HashMap " , 
 packageName + " . * " ) 
 . emitEmptyLine ( ) ; 
 
 @ @ - 384 , 6 + 384 , 75 @ @ public class RealmProxyClassGenerator { 
 writer . emitEmptyLine ( ) ; 
 
 / * * 
 + * validateTable method 
 + * / 
 + writer . beginMethod ( 
 + " void " , / / Return type 
 + " validateTable " , / / Method name 
 + EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) , / / Modifiers 
 + " ImplicitTransaction " , " transaction " ) ; / / Argument type & argument name 
 + 
 + writer . beginControlFlow ( " if ( transaction . hasTable ( \ " " + tablePrefix + this . className + " \ " ) ) " ) ; 
 + writer . emitStatement ( " Table table = transaction . getTable ( \ " % s % s \ " ) " , tablePrefix , this . className ) ; 
 + 
 + / / verify number of columns 
 + writer . beginControlFlow ( " if ( table . getColumnCount ( ) ! = " + fields . size ( ) + " ) " ) ; 
 + writer . emitStatement ( " throw new IllegalStateException ( \ " Column count does not match \ " ) " ) ; 
 + writer . endControlFlow ( ) ; 
 + 
 + / / create type dictionary for lookup 
 + writer . emitStatement ( " HashMap < String , ColumnType > columnTypes = new HashMap < String , ColumnType > ( ) " ) ; 
 + writer . beginControlFlow ( " for ( long i = 0 ; i < " + fields . size ( ) + " ; i + + ) " ) ; 
 + writer . emitStatement ( " columnTypes . put ( table . getColumnName ( i ) , table . getColumnType ( i ) ) " ) ; 
 + writer . endControlFlow ( ) ; 
 + 
 + / / For each field verfiy there is a corresponding column 
 + for ( VariableElement field : fields ) { 
 + String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 + String fieldTypeCanonicalName = field . asType ( ) . toString ( ) ; 
 + String fieldTypeName ; 
 + if ( fieldTypeCanonicalName . contains ( " . " ) ) { 
 + fieldTypeName = fieldTypeCanonicalName . substring ( fieldTypeCanonicalName . lastIndexOf ( ' . ' ) + 1 ) ; 
 + } else { 
 + fieldTypeName = fieldTypeCanonicalName ; 
 + } 
 + 
 + / / make sure types align 
 + writer . beginControlFlow ( " if ( ! columnTypes . containsKey ( \ " % s \ " ) ) " , fieldName ) ; 
 + writer . emitStatement ( " throw new IllegalStateException ( \ " Missing column for ' % s ' \ " ) " , fieldName ) ; 
 + writer . endControlFlow ( ) ; 
 + writer . beginControlFlow ( " if ( columnTypes . get ( \ " % s \ " ) ! = % s ) " , fieldName , JAVA _ TO _ COLUMN _ TYPES . get ( fieldTypeCanonicalName ) ) ; 
 + writer . emitStatement ( " throw new IllegalStateException ( \ " Invalid type ' % s ' for column for ' % s ' \ " ) " , 
 + fieldName , fieldTypeName ) ; 
 + writer . endControlFlow ( ) ; 
 + 
 + / * FIXME - add validatoin for link and array types by comparing link targets 
 + if ( typeUtils . isAssignable ( field . asType ( ) , realmObject ) ) { 
 + writer . beginControlFlow ( " if ( ! transaction . hasTable ( \ " % s % s \ " ) ) " , tablePrefix , fieldTypeName ) ; 
 + writer . emitStatement ( " % sRealmProxy . initTable ( transaction ) " , fieldTypeName ) ; 
 + writer . endControlFlow ( ) ; 
 + writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK , \ " % s \ " , transaction . getTable ( \ " % s % s \ " ) ) " , 
 + fieldName . toLowerCase ( Locale . getDefault ( ) ) , tablePrefix , fieldTypeName ) ; 
 + } else if ( typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 + String genericCanonicalType = ( ( DeclaredType ) field . asType ( ) ) . getTypeArguments ( ) . get ( 0 ) . toString ( ) ; 
 + String genericType ; 
 + if ( genericCanonicalType . contains ( " . " ) ) { 
 + genericType = genericCanonicalType . substring ( genericCanonicalType . lastIndexOf ( ' . ' ) + 1 ) ; 
 + } else { 
 + genericType = genericCanonicalType ; 
 + } 
 + writer . beginControlFlow ( " if ( ! transaction . hasTable ( \ " % s % s \ " ) ) " , tablePrefix , genericType ) ; 
 + writer . emitStatement ( " % sRealmProxy . initTable ( transaction ) " , genericType ) ; 
 + writer . endControlFlow ( ) ; 
 + writer . emitStatement ( " table . addColumnLink ( ColumnType . LINK _ LIST , \ " % s \ " , transaction . getTable ( \ " % s % s \ " ) ) " , 
 + fieldName . toLowerCase ( Locale . getDefault ( ) ) , tablePrefix , genericType ) ; 
 + } * / 
 + } 
 + writer . endControlFlow ( ) ; 
 + writer . endMethod ( ) ; 
 + writer . emitEmptyLine ( ) ; 
 + 
 + / * * 
 * toString method 
 * / 
 writer . emitAnnotation ( " Override " ) ; 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index b323bd6 . . bb0727b 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 45 , 6 + 45 , 7 @ @ public class Realm { 
 private static final Map < String , ThreadRealm > realms = new HashMap < String , ThreadRealm > ( ) ; 
 private static final String TAG = " REALM " ; 
 private static final String TABLE _ PREFIX = " class _ " ; 
 + private static boolean validated = false ; 
 
 private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; 
 
 @ @ - 148 , 10 + 149 , 10 @ @ public class Realm { 
 * / 
 public static Realm create ( File writableFolder , String filename ) { 
 String absolutePath = new File ( writableFolder , filename ) . getAbsolutePath ( ) ; 
 - return create ( absolutePath ) ; 
 + return createAndValidate ( absolutePath , true ) ; 
 } 
 
 - private static Realm create ( String absolutePath ) { 
 + private static Realm createAndValidate ( String absolutePath , boolean validateSchema ) { 
 ThreadRealm threadRealm = realms . get ( absolutePath ) ; 
 if ( threadRealm = = null ) { 
 threadRealm = new ThreadRealm ( absolutePath ) ; 
 @ @ - 166 , 6 + 167 , 34 @ @ public class Realm { 
 realmSoftReference = threadRealm . get ( ) ; 
 realm = realmSoftReference . get ( ) ; 
 } 
 + if ( validateSchema ) { 
 + / / FIXME - thread safety 
 + if ( ! validated ) { 
 + try { 
 + Class < ? > validationClass = Class . forName ( " io . realm . ValidationList " ) ; 
 + Method getProxyClassesMethod = validationClass . getMethod ( " getProxyClasses " ) ; 
 + List < String > proxyClasses = ( List < String > ) getProxyClassesMethod . invoke ( null ) ; 
 + for ( String className : proxyClasses ) { 
 + Class < ? > modelClass = Class . forName ( className ) ; 
 + Method validateMethod = modelClass . getMethod ( " validateTable " ) ; 
 + validateMethod . invoke ( null , realm . transaction ) ; 
 + } 
 + } catch ( ClassNotFoundException e ) { 
 + e . printStackTrace ( ) ; 
 + return null ; / / TODO : throw RealmException 
 + } catch ( NoSuchMethodException e ) { 
 + e . printStackTrace ( ) ; 
 + return null ; / / TODO : throw RealmException 
 + } catch ( IllegalAccessException e ) { 
 + e . printStackTrace ( ) ; 
 + return null ; / / TODO : throw RealmException 
 + } catch ( InvocationTargetException e ) { 
 + e . printStackTrace ( ) ; 
 + return null ; / / TODO : throw RealmException 
 + } 
 + validated = true ; 
 + } 
 + } 
 return realm ; 
 } 
 
 @ @ - 479 , 11 + 508 , 6 @ @ public class Realm { 
 return where ( clazz ) . findAll ( ) ; 
 } 
 
 - / / Migration 
 - public void ensureRealmAtVersion ( int version , RealmMigration migration ) { 
 - migration . execute ( this , version ) ; 
 - } 
 - 
 / / Notifications 
 public void addChangeListener ( RealmChangeListener listener ) { 
 changeListeners . add ( listener ) ; 
 @ @ - 541 , 11 + 565 , 11 @ @ public class Realm { 
 getTable ( classSpec ) . clear ( ) ; 
 } 
 
 - public int getVersion ( ) { 
 + private int getVersion ( ) { 
 return version ; 
 } 
 
 - public void setVersion ( int version ) { 
 + private void setVersion ( int version ) { 
 this . version = version ; 
 } 
 
 @ @ - 555 , 6 + 579 , 16 @ @ public class Realm { 
 * @ param context an Android context . 
 * @ return false if a file could not be deleted . The failing file will be logged . 
 * / 
 + public void migrateRealmAtPath ( String realmPath , RealmMigration migration ) { 
 + migration . execute ( this , version ) ; 
 + } 
 + 
 + / * * 
 + * Delete the Realm file from the filesystem for the default Realm ( named " default . realm " ) . 
 + * The realm must be unused and closed before calling this method . 
 + * @ param context an Android context . 
 + * @ return false if a file could not be deleted . The failing file will be logged . 
 + * / 
 public static boolean deleteRealmFile ( Context context ) { 
 return deleteRealmFile ( context , DEFAULT _ REALM _ NAME ) ; 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmMigration . java b / realm / src / main / java / io / realm / RealmMigration . java 
 index 2e7df7f . . e7dae52 100644 
 - - - a / realm / src / main / java / io / realm / RealmMigration . java 
 + + + b / realm / src / main / java / io / realm / RealmMigration . java 
 @ @ - 18 , 6 + 18 , 11 @ @ package io . realm ; 
 
 public interface RealmMigration { 
 
 - public void execute ( Realm realm , int version ) ; 
 - 
 + / * * 
 + * Implement this method in your sublcass to perform 
 + * @ return The version of the Realm after executing the migration 
 + * @ param realm The Realm on which to perform the migration 
 + * @ param version The version of the Realm at the start of the migration 
 + * / 
 + public int execute ( Realm realm , int version ) ; 
 }
