BLEU SCORE: 0.09652434877402245

TEST MSG: Proper RealmMigrationNeededException is now thrown .
GENERATED MSG: Compacting encrypted Realms is working .

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 5d90950 . . 3b036ef 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> # # # Enhancements <nl> <nl> * Now ` targetSdkVersion ` is 25 . <nl> + * The real ` RealmMigrationNeededException ` is now thrown instead of ` IllegalArgumentException ` if no migration is provided for a Realm that requires it . <nl> <nl> # # # Bug Fixes <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> index 0986180 . . 7b19192 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> @ @ - 391 , 7 + 391 , 7 @ @ public class RealmConfigurationTests { <nl> fail ( ) ; <nl> } catch ( RealmMigrationNeededException expected ) { <nl> / / And it should come with a cause . <nl> - assertNotNull ( expected . getCause ( ) ) ; <nl> + assertEquals ( " Realm on disk need to migrate from v0 to v42 " , expected . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> index 6789108 . . 7a5d21a 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> @ @ - 1280 , 6 + 1280 , 27 @ @ public class RealmMigrationTests { <nl> realm . close ( ) ; <nl> } <nl> <nl> + / / Tests that if a migration is required and no migration block was provided , then the <nl> + / / original RealmMigrationNeededException is thrown instead of IllegalArgumentException <nl> + @ Test <nl> + public void migrationRequired _ throwsOriginalException ( ) { <nl> + RealmConfiguration config = configFactory . createConfigurationBuilder ( ) <nl> + / / . migration ( ) No migration block provided , but one is required <nl> + . assetFile ( " default0 . realm " ) / / This Realm does not have the correct schema <nl> + . build ( ) ; <nl> + <nl> + Realm realm = null ; <nl> + try { <nl> + realm = Realm . getInstance ( config ) ; <nl> + fail ( ) ; <nl> + } catch ( RealmMigrationNeededException ignored ) { <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> / / TODO Add unit tests for default nullability <nl> / / TODO Add unit tests for default Indexing for Primary keys <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 0369321 . . 7c604b5 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 269 , 7 + 269 , 9 @ @ public class Realm extends BaseRealm { <nl> deleteRealm ( configuration ) ; <nl> } else { <nl> try { <nl> - migrateRealm ( configuration , e ) ; <nl> + if ( configuration . getMigration ( ) ! = null ) { <nl> + migrateRealm ( configuration , e ) ; <nl> + } <nl> } catch ( FileNotFoundException fileNotFoundException ) { <nl> / / Should never happen . <nl> throw new RealmFileException ( RealmFileException . Kind . NOT _ FOUND , fileNotFoundException ) ;
NEAREST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 4627bcd . . cdede1b 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 1 , 3 + 1 , 9 @ @ <nl> + # # 2 . 0 . 1 <nl> + <nl> + # # # Enhancement <nl> + <nl> + * ` Realm . compactRealm ( ) ` works for encrypted Realms . <nl> + <nl> # # 2 . 0 . 0 <nl> <nl> This release introduces support for the Realm Mobile Platform ! <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index a920574 . . fa5f8f6 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 982 , 27 + 982 , 26 @ @ public class RealmTests { <nl> RealmConfiguration realmConfig = configFactory . createConfiguration ( " enc . realm " , TestHelper . getRandomKey ( ) ) ; <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> realm . close ( ) ; <nl> - / / TODO : remove try / catch block when compacting encrypted Realms is supported <nl> - try { <nl> - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> - fail ( ) ; <nl> - } catch ( IllegalArgumentException expected ) { <nl> - } <nl> + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> + assertFalse ( realm . isClosed ( ) ) ; <nl> + assertTrue ( realm . isEmpty ( ) ) ; <nl> + realm . close ( ) ; <nl> } <nl> <nl> @ Test <nl> public void compactRealm _ encryptedPopulatedRealm ( ) { <nl> + final int DATA _ SIZE = 100 ; <nl> RealmConfiguration realmConfig = configFactory . createConfiguration ( " enc . realm " , TestHelper . getRandomKey ( ) ) ; <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> <nl> - populateTestRealm ( realm , 100 ) ; <nl> + populateTestRealm ( realm , DATA _ SIZE ) ; <nl> + realm . close ( ) ; <nl> + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> + assertFalse ( realm . isClosed ( ) ) ; <nl> + assertEquals ( DATA _ SIZE , realm . where ( AllTypes . class ) . count ( ) ) ; <nl> realm . close ( ) ; <nl> - / / TODO : remove try / catch block when compacting encrypted Realms is supported <nl> - try { <nl> - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; <nl> - fail ( ) ; <nl> - } catch ( IllegalArgumentException expected ) { <nl> - } <nl> } <nl> <nl> @ Test <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index cc1d89d . . d3dc068 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 583 , 10 + 583 , 6 @ @ abstract class BaseRealm implements Closeable { <nl> * @ return { @ code true } if compaction succeeded , { @ code false } otherwise . <nl> * / <nl> static boolean compactRealm ( final RealmConfiguration configuration ) { <nl> - / / https : / / github . com / realm / realm - java / issues / 1033 <nl> - if ( configuration . getEncryptionKey ( ) ! = null ) { <nl> - throw new IllegalArgumentException ( " Cannot currently compact an encrypted Realm . " ) ; <nl> - } <nl> SharedRealm sharedRealm = SharedRealm . getInstance ( configuration ) ; <nl> Boolean result = sharedRealm . compact ( ) ; <nl> sharedRealm . close ( ) ;

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 5d90950 . . 3b036ef 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 # # # Enhancements 
 
 * Now ` targetSdkVersion ` is 25 . 
 + * The real ` RealmMigrationNeededException ` is now thrown instead of ` IllegalArgumentException ` if no migration is provided for a Realm that requires it . 
 
 # # # Bug Fixes 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 index 0986180 . . 7b19192 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 @ @ - 391 , 7 + 391 , 7 @ @ public class RealmConfigurationTests { 
 fail ( ) ; 
 } catch ( RealmMigrationNeededException expected ) { 
 / / And it should come with a cause . 
 - assertNotNull ( expected . getCause ( ) ) ; 
 + assertEquals ( " Realm on disk need to migrate from v0 to v42 " , expected . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 index 6789108 . . 7a5d21a 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 @ @ - 1280 , 6 + 1280 , 27 @ @ public class RealmMigrationTests { 
 realm . close ( ) ; 
 } 
 
 + / / Tests that if a migration is required and no migration block was provided , then the 
 + / / original RealmMigrationNeededException is thrown instead of IllegalArgumentException 
 + @ Test 
 + public void migrationRequired _ throwsOriginalException ( ) { 
 + RealmConfiguration config = configFactory . createConfigurationBuilder ( ) 
 + / / . migration ( ) No migration block provided , but one is required 
 + . assetFile ( " default0 . realm " ) / / This Realm does not have the correct schema 
 + . build ( ) ; 
 + 
 + Realm realm = null ; 
 + try { 
 + realm = Realm . getInstance ( config ) ; 
 + fail ( ) ; 
 + } catch ( RealmMigrationNeededException ignored ) { 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + } 
 + } 
 + } 
 + 
 / / TODO Add unit tests for default nullability 
 / / TODO Add unit tests for default Indexing for Primary keys 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 0369321 . . 7c604b5 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 269 , 7 + 269 , 9 @ @ public class Realm extends BaseRealm { 
 deleteRealm ( configuration ) ; 
 } else { 
 try { 
 - migrateRealm ( configuration , e ) ; 
 + if ( configuration . getMigration ( ) ! = null ) { 
 + migrateRealm ( configuration , e ) ; 
 + } 
 } catch ( FileNotFoundException fileNotFoundException ) { 
 / / Should never happen . 
 throw new RealmFileException ( RealmFileException . Kind . NOT _ FOUND , fileNotFoundException ) ;

NEAREST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 4627bcd . . cdede1b 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 1 , 3 + 1 , 9 @ @ 
 + # # 2 . 0 . 1 
 + 
 + # # # Enhancement 
 + 
 + * ` Realm . compactRealm ( ) ` works for encrypted Realms . 
 + 
 # # 2 . 0 . 0 
 
 This release introduces support for the Realm Mobile Platform ! 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index a920574 . . fa5f8f6 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 982 , 27 + 982 , 26 @ @ public class RealmTests { 
 RealmConfiguration realmConfig = configFactory . createConfiguration ( " enc . realm " , TestHelper . getRandomKey ( ) ) ; 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 realm . close ( ) ; 
 - / / TODO : remove try / catch block when compacting encrypted Realms is supported 
 - try { 
 - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 - fail ( ) ; 
 - } catch ( IllegalArgumentException expected ) { 
 - } 
 + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 + assertFalse ( realm . isClosed ( ) ) ; 
 + assertTrue ( realm . isEmpty ( ) ) ; 
 + realm . close ( ) ; 
 } 
 
 @ Test 
 public void compactRealm _ encryptedPopulatedRealm ( ) { 
 + final int DATA _ SIZE = 100 ; 
 RealmConfiguration realmConfig = configFactory . createConfiguration ( " enc . realm " , TestHelper . getRandomKey ( ) ) ; 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 
 - populateTestRealm ( realm , 100 ) ; 
 + populateTestRealm ( realm , DATA _ SIZE ) ; 
 + realm . close ( ) ; 
 + assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 + assertFalse ( realm . isClosed ( ) ) ; 
 + assertEquals ( DATA _ SIZE , realm . where ( AllTypes . class ) . count ( ) ) ; 
 realm . close ( ) ; 
 - / / TODO : remove try / catch block when compacting encrypted Realms is supported 
 - try { 
 - assertTrue ( Realm . compactRealm ( realmConfig ) ) ; 
 - fail ( ) ; 
 - } catch ( IllegalArgumentException expected ) { 
 - } 
 } 
 
 @ Test 
 diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index cc1d89d . . d3dc068 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 583 , 10 + 583 , 6 @ @ abstract class BaseRealm implements Closeable { 
 * @ return { @ code true } if compaction succeeded , { @ code false } otherwise . 
 * / 
 static boolean compactRealm ( final RealmConfiguration configuration ) { 
 - / / https : / / github . com / realm / realm - java / issues / 1033 
 - if ( configuration . getEncryptionKey ( ) ! = null ) { 
 - throw new IllegalArgumentException ( " Cannot currently compact an encrypted Realm . " ) ; 
 - } 
 SharedRealm sharedRealm = SharedRealm . getInstance ( configuration ) ; 
 Boolean result = sharedRealm . compact ( ) ; 
 sharedRealm . close ( ) ;
