BLEU SCORE: 0.07986788803078405

TEST MSG: Remove improper incompatibleLockFile test
GENERATED MSG: Fixed last tests .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index f73eff9 . . 02679eb 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 3428 , 24 + 3428 , 4 @ @ public class RealmTests { <nl> TestHelper . awaitOrFail ( bgRealmFished ) ; <nl> assertFalse ( bgRealmChangeResult . get ( ) ) ; <nl> } <nl> - <nl> - @ Test <nl> - public void incompatibleLockFile ( ) throws IOException { <nl> - / / Replace . lock file with a corrupted one <nl> - File lockFile = new File ( realmConfig . getPath ( ) + " . lock " ) ; <nl> - assertTrue ( lockFile . exists ( ) ) ; <nl> - FileOutputStream fooStream = new FileOutputStream ( lockFile , false ) ; <nl> - fooStream . write ( " Boom " . getBytes ( ) ) ; <nl> - fooStream . close ( ) ; <nl> - <nl> - try { <nl> - / / This will try to open a second SharedGroup which should fail when the . lock file is corrupt <nl> - DynamicRealm . getInstance ( realm . getConfiguration ( ) ) ; <nl> - fail ( ) ; <nl> - } catch ( RealmError expected ) { <nl> - assertTrue ( expected . getMessage ( ) . contains ( " Info size doesn ' t match " ) ) ; <nl> - } finally { <nl> - lockFile . delete ( ) ; <nl> - } <nl> - } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java <nl> index 2954bd2 . . dd1d323 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java <nl> @ @ - 16 , 6 + 16 , 9 @ @ <nl> <nl> package io . realm . tests . api ; <nl> <nl> + import android . content . Context ; <nl> + <nl> + import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> import io . realm . Realm ; <nl> @ @ - 46 , 30 + 49 , 22 @ @ public class RealmTest extends RealmSetupTests { <nl> } <nl> } <nl> <nl> - public void testShouldFailCreateRealmWithNullDir ( ) { <nl> + public void testShouldNotFailCreateRealmWithNullDir ( ) { <nl> setupSharedGroup ( ) ; <nl> <nl> - try { <nl> - Realm realm = new Realm ( null ) ; <nl> - fail ( " Expected IOException " ) ; <nl> - } catch ( IOException ioe ) { <nl> - / / Expected exception <nl> - } catch ( Exception ex ) { <nl> - fail ( " Unexpected exception : " + ex . getMessage ( ) ) ; <nl> - } <nl> + File f = null ; <nl> + Realm realm = new Realm ( f ) ; <nl> } <nl> <nl> - public void testShouldFailWithNullFileName ( ) { <nl> + public void testShouldNotFailCreateRealmWithNullContext ( ) { <nl> setupSharedGroup ( ) ; <nl> + Context c = null ; <nl> + Realm realm = new Realm ( c ) ; <nl> + } <nl> <nl> - try { <nl> - Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) , null ) ; <nl> - fail ( " Expected Exception " ) ; <nl> - } catch ( Exception ex ) { <nl> - if ( ! ( ex instanceof IOException ) ) { <nl> - fail ( " Unexpected exception : " + ex . getMessage ( ) ) ; <nl> - } <nl> - } <nl> + public void testShouldNotFailWithNullFileName ( ) { <nl> + setupSharedGroup ( ) ; <nl> + Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) , null ) ; <nl> } <nl> <nl> <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index ccce5d2 . . cc7719c 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ package io . realm ; <nl> import android . content . Context ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 71 , 7 + 70 , 7 @ @ public class Realm { <nl> init ( ) ; <nl> } <nl> <nl> - public Realm ( File writeablePath ) throws IOException { <nl> + public Realm ( File writeablePath ) { <nl> this ( writeablePath , " default . realm " ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index f73eff9 . . 02679eb 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 3428 , 24 + 3428 , 4 @ @ public class RealmTests { 
 TestHelper . awaitOrFail ( bgRealmFished ) ; 
 assertFalse ( bgRealmChangeResult . get ( ) ) ; 
 } 
 - 
 - @ Test 
 - public void incompatibleLockFile ( ) throws IOException { 
 - / / Replace . lock file with a corrupted one 
 - File lockFile = new File ( realmConfig . getPath ( ) + " . lock " ) ; 
 - assertTrue ( lockFile . exists ( ) ) ; 
 - FileOutputStream fooStream = new FileOutputStream ( lockFile , false ) ; 
 - fooStream . write ( " Boom " . getBytes ( ) ) ; 
 - fooStream . close ( ) ; 
 - 
 - try { 
 - / / This will try to open a second SharedGroup which should fail when the . lock file is corrupt 
 - DynamicRealm . getInstance ( realm . getConfiguration ( ) ) ; 
 - fail ( ) ; 
 - } catch ( RealmError expected ) { 
 - assertTrue ( expected . getMessage ( ) . contains ( " Info size doesn ' t match " ) ) ; 
 - } finally { 
 - lockFile . delete ( ) ; 
 - } 
 - } 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java 
 index 2954bd2 . . dd1d323 100644 
 - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java 
 @ @ - 16 , 6 + 16 , 9 @ @ 
 
 package io . realm . tests . api ; 
 
 + import android . content . Context ; 
 + 
 + import java . io . File ; 
 import java . io . IOException ; 
 
 import io . realm . Realm ; 
 @ @ - 46 , 30 + 49 , 22 @ @ public class RealmTest extends RealmSetupTests { 
 } 
 } 
 
 - public void testShouldFailCreateRealmWithNullDir ( ) { 
 + public void testShouldNotFailCreateRealmWithNullDir ( ) { 
 setupSharedGroup ( ) ; 
 
 - try { 
 - Realm realm = new Realm ( null ) ; 
 - fail ( " Expected IOException " ) ; 
 - } catch ( IOException ioe ) { 
 - / / Expected exception 
 - } catch ( Exception ex ) { 
 - fail ( " Unexpected exception : " + ex . getMessage ( ) ) ; 
 - } 
 + File f = null ; 
 + Realm realm = new Realm ( f ) ; 
 } 
 
 - public void testShouldFailWithNullFileName ( ) { 
 + public void testShouldNotFailCreateRealmWithNullContext ( ) { 
 setupSharedGroup ( ) ; 
 + Context c = null ; 
 + Realm realm = new Realm ( c ) ; 
 + } 
 
 - try { 
 - Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) , null ) ; 
 - fail ( " Expected Exception " ) ; 
 - } catch ( Exception ex ) { 
 - if ( ! ( ex instanceof IOException ) ) { 
 - fail ( " Unexpected exception : " + ex . getMessage ( ) ) ; 
 - } 
 - } 
 + public void testShouldNotFailWithNullFileName ( ) { 
 + setupSharedGroup ( ) ; 
 + Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) , null ) ; 
 } 
 
 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index ccce5d2 . . cc7719c 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 19 , 7 + 19 , 6 @ @ package io . realm ; 
 import android . content . Context ; 
 
 import java . io . File ; 
 - import java . io . IOException ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 @ @ - 71 , 7 + 70 , 7 @ @ public class Realm { 
 init ( ) ; 
 } 
 
 - public Realm ( File writeablePath ) throws IOException { 
 + public Realm ( File writeablePath ) { 
 this ( writeablePath , " default . realm " ) ; 
 } 

