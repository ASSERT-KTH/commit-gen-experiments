BLEU SCORE: 0.027611988917697356

TEST MSG: Work around the memmove bug on Samsung device
GENERATED MSG: Add JNI helper class JavaGlabalRef and JavaClass

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> index 5913e18 . . 11c3d43 100644 <nl> - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> @ @ - 17 , 6 + 17 , 10 @ @ set ( CMAKE _ VERBOSE _ MAKEFILE ON ) <nl> # Generate compile _ commands . json <nl> set ( CMAKE _ EXPORT _ COMPILE _ COMMANDS ON ) <nl> <nl> + # Initialize common compile & link flags . <nl> + set ( REALM _ LINKER _ FLAGS " " ) <nl> + set ( REALM _ COMMON _ CXX _ FLAGS " " ) <nl> + <nl> # Setup lcache <nl> if ( NDK _ LCACHE ) <nl> set ( CMAKE _ CXX _ CREATE _ SHARED _ LIBRARY " $ { NDK _ LCACHE } $ { CMAKE _ CXX _ CREATE _ SHARED _ LIBRARY } " ) <nl> @ @ - 123 , 6 + 127 , 14 @ @ elseif ( ARMEABI _ V7A ) <nl> set ( ABI _ CXX _ FLAGS " - mthumb - march = armv7 - a - mfloat - abi = softfp - mfpu = vfpv3 - d16 " ) <nl> endif ( ) <nl> <nl> + # Hack the memmove bug on Samsung device . <nl> + if ( ARMEABI OR ARMEABI _ V7A ) <nl> + set ( REALM _ LINKER _ FLAGS " $ { REALM _ LINKER _ FLAGS } - Wl , - - wrap , memmove - Wl , - - wrap , memcpy " ) <nl> + set ( REALM _ COMMON _ CXX _ FLAGS " $ { REALM _ COMMON _ CXX _ FLAGS } - DREALM _ WRAP _ MEMMOVE = 1 " ) <nl> + else ( ) <nl> + set ( REALM _ COMMON _ CXX _ FLAGS " $ { REALM _ COMMON _ CXX _ FLAGS } - DREALM _ WRAP _ MEMMOVE = 0 " ) <nl> + endif ( ) <nl> + <nl> # FIXME uninitialized is reported by query _ expression . hpp : 1070 <nl> # d . init ( ValueBase : : m _ from _ link _ list , ValueBase : : m _ values , D { } ) ; <nl> # FIXME maybe - uninitialized is reported by table _ view . cpp : 272 : 15 : <nl> @ @ - 131 , 7 + 143 , 7 @ @ endif ( ) <nl> set ( WARNING _ CXX _ FLAGS " - Werror - Wall - Wextra - pedantic - Wmissing - declarations \ <nl> - Wempty - body - Wparentheses - Wunknown - pragmas - Wunreachable - code \ <nl> - Wno - missing - field - initializers - Wno - maybe - uninitialized - Wno - uninitialized " ) <nl> - set ( REALM _ COMMON _ CXX _ FLAGS " - DREALM _ ANDROID - DREALM _ HAVE _ CONFIG - DPIC - pthread - fvisibility = hidden - std = c + + 14 - fsigned - char " ) <nl> + set ( REALM _ COMMON _ CXX _ FLAGS " $ { REALM _ COMMON _ CXX _ FLAGS } - DREALM _ ANDROID - DREALM _ HAVE _ CONFIG - DPIC - pthread - fvisibility = hidden - std = c + + 14 - fsigned - char " ) <nl> if ( build _ SYNC ) <nl> set ( REALM _ COMMON _ CXX _ FLAGS " $ { REALM _ COMMON _ CXX _ FLAGS } - DREALM _ ENABLE _ SYNC = 1 " ) <nl> endif ( ) <nl> @ @ - 143 , 7 + 155 , 6 @ @ set ( CMAKE _ CXX _ FLAGS _ DEBUG " - ggdb - Og - DNDEBUG " ) <nl> set ( CMAKE _ CXX _ FLAGS " $ { CMAKE _ CXX _ FLAGS } $ { REALM _ COMMON _ CXX _ FLAGS } $ { WARNING _ CXX _ FLAGS } $ { ABI _ CXX _ FLAGS } " ) <nl> <nl> # Set link flags <nl> - set ( REALM _ LINKER _ FLAGS " " ) <nl> if ( build _ SYNC ) <nl> set ( REALM _ LINKER _ FLAGS " $ { REALM _ LINKER _ FLAGS } - lz " ) <nl> endif ( ) <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> index 48e47cf . . ab772f4 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> # include < jni . h > <nl> <nl> # include " jni _ util / jni _ utils . hpp " <nl> + # include " jni _ util / hack . hpp " <nl> <nl> # include < realm / string _ data . hpp > <nl> # include < realm / unicode . hpp > <nl> @ @ - 37 , 6 + 38 , 9 @ @ const string TABLE _ PREFIX ( " class _ " ) ; <nl> <nl> JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * ) <nl> { <nl> + / / Workaround for some known bugs in system calls on specific devices . <nl> + hack _ init ( ) ; <nl> + <nl> JNIEnv * env ; <nl> if ( vm - > GetEnv ( ( void * * ) & env , JNI _ VERSION _ 1 _ 6 ) ! = JNI _ OK ) { <nl> return JNI _ ERR ; <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / hack . cpp b / realm / realm - library / src / main / cpp / jni _ util / hack . cpp <nl> new file mode 100644 <nl> index 0000000 . . 1ca6414 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / hack . cpp <nl> @ @ - 0 , 0 + 1 , 116 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # include " hack . hpp " <nl> + # include " log . hpp " <nl> + <nl> + # include < string . h > <nl> + <nl> + # include < realm / util / assert . hpp > <nl> + <nl> + # ifndef REALM _ WRAP _ MEMMOVE <nl> + # error " REALM _ WRAP _ MEMMOVE is not defined ! " <nl> + # endif <nl> + <nl> + # if REALM _ WRAP _ MEMMOVE <nl> + extern " C " { <nl> + void * _ _ wrap _ memmove ( void * dest , const void * src , size _ t n ) ; <nl> + void * _ _ real _ memmove ( void * dest , const void * src , size _ t n ) ; <nl> + <nl> + void * _ _ wrap _ memcpy ( void * dest , const void * src , size _ t n ) ; <nl> + void * _ _ real _ memcpy ( void * dest , const void * src , size _ t n ) ; <nl> + } <nl> + <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + typedef void * ( * MemMoveFunc ) ( void * dest , const void * src , size _ t n ) ; <nl> + static MemMoveFunc s _ wrap _ memmove _ ptr = & _ _ real _ memmove ; <nl> + static MemMoveFunc s _ wrap _ memcpy _ ptr = & _ _ real _ memcpy ; <nl> + <nl> + static void * hacked _ memmove ( void * s1 , const void * s2 , size _ t n ) <nl> + { <nl> + / / adapted from https : / / github . com / dryc / libc11 / blob / master / src / string / memmove . c <nl> + char * dest = ( char * ) s1 ; <nl> + const char * src = ( const char * ) s2 ; <nl> + if ( dest < = src ) { <nl> + while ( n - - ) { <nl> + * dest + + = * src + + ; <nl> + } <nl> + } <nl> + else { <nl> + src + = n ; <nl> + dest + = n ; <nl> + while ( n - - ) { <nl> + * - - dest = * - - src ; <nl> + } <nl> + } <nl> + return static _ cast < void * > ( s1 ) ; <nl> + } <nl> + <nl> + static void * hacked _ memcpy ( void * s1 , const void * s2 , size _ t n ) <nl> + { <nl> + / / adapted from https : / / github . com / dryc / libc11 / blob / master / src / string / memcpy . c <nl> + char * dest = ( char * ) s1 ; <nl> + const char * src = ( const char * ) s2 ; <nl> + while ( n - - ) { <nl> + * dest + + = * src + + ; <nl> + } <nl> + return static _ cast < void * > ( s1 ) ; <nl> + } <nl> + <nl> + void * _ _ wrap _ memmove ( void * dest , const void * src , size _ t n ) <nl> + { <nl> + return ( * s _ wrap _ memmove _ ptr ) ( dest , src , n ) ; <nl> + } <nl> + <nl> + void * _ _ wrap _ memcpy ( void * dest , const void * src , size _ t n ) <nl> + { <nl> + return ( * s _ wrap _ memcpy _ ptr ) ( dest , src , n ) ; <nl> + } <nl> + <nl> + <nl> + / / See https : / / github . com / realm / realm - java / issues / 3651 # issuecomment - 290290228 <nl> + / / There is a bug in memmove for some Samsung devices which will return " dest - n " instead of dest . <nl> + / / The bug was originally found by QT , see https : / / bugreports . qt . io / browse / QTBUG - 34984 . <nl> + / / To work around it , we use linker ' s wrap feature to use a pure C implementation of memmove if the device has the <nl> + / / problem . <nl> + static void check _ memmove ( ) <nl> + { <nl> + char * array = strdup ( " Foobar " ) ; <nl> + size _ t len = strlen ( array ) ; <nl> + void * ptr = _ _ real _ memmove ( array + 1 , array , len - 1 ) ; <nl> + if ( ptr ! = array + 1 | | strncmp ( array , " FFooba " , len ) ! = 0 ) { <nl> + Log : : e ( " memmove is broken on this device . Switching to the builtin implementation . " ) ; <nl> + s _ wrap _ memmove _ ptr = & hacked _ memmove ; <nl> + s _ wrap _ memcpy _ ptr = & hacked _ memcpy ; <nl> + } <nl> + free ( array ) ; <nl> + } <nl> + # endif <nl> + <nl> + namespace realm { <nl> + namespace jni _ util { <nl> + <nl> + void hack _ init ( ) <nl> + { <nl> + # if REALM _ WRAP _ MEMMOVE <nl> + check _ memmove ( ) ; <nl> + # endif <nl> + } <nl> + <nl> + } <nl> + } <nl> + <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / hack . hpp b / realm / realm - library / src / main / cpp / jni _ util / hack . hpp <nl> new file mode 100644 <nl> index 0000000 . . 62ac347 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / hack . hpp <nl> @ @ - 0 , 0 + 1 , 28 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # ifndef REALM _ JNI _ UTIL _ HACK _ HPP <nl> + # define REALM _ JNI _ UTIL _ HACK _ HPP <nl> + <nl> + namespace realm { <nl> + namespace jni _ util { <nl> + <nl> + / / Workaround bugs on some devices . <nl> + void hack _ init ( ) ; <nl> + <nl> + } <nl> + } <nl> + # endif / / REALM _ JNI _ UTIL _ HACK _ HPP
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> index 531611f . . 1c5fcc2 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> @ @ - 28 , 6 + 28 , 7 @ @ <nl> # include " util . hpp " <nl> <nl> # include " jni _ util / java _ method . hpp " <nl> + # include " jni _ util / java _ class . hpp " <nl> <nl> using namespace realm ; <nl> using namespace realm : : _ impl ; <nl> @ @ - 74 , 11 + 75 , 12 @ @ public : <nl> : m _ config ( std : : move ( config ) ) <nl> { <nl> # if REALM _ ENABLE _ SYNC <nl> + static JavaClass sync _ manager _ class ( env , " io / realm / SyncManager " ) ; <nl> / / Doing the methods lookup from the thread that loaded the lib , to avoid <nl> / / https : / / developer . android . com / training / articles / perf - jni . html # faq _ FindClass <nl> - static JavaMethod java _ error _ callback _ method ( env , java _ syncmanager , " notifyErrorHandler " , <nl> + static JavaMethod java _ error _ callback _ method ( env , sync _ manager _ class , " notifyErrorHandler " , <nl> " ( ILjava / lang / String ; Ljava / lang / String ; ) V " , true ) ; <nl> - static JavaMethod java _ bind _ session _ method ( env , java _ syncmanager , " bindSessionWithConfig " , <nl> + static JavaMethod java _ bind _ session _ method ( env , sync _ manager _ class , " bindSessionWithConfig " , <nl> " ( Ljava / lang / String ; ) Ljava / lang / String ; " , true ) ; <nl> <nl> / / error handler will be called form the sync client thread <nl> @ @ - 96 , 7 + 98 , 7 @ @ public : <nl> } <nl> <nl> JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; <nl> - env - > CallStaticVoidMethod ( java _ syncmanager , java _ error _ callback _ method , error _ code , <nl> + env - > CallStaticVoidMethod ( sync _ manager _ class , java _ error _ callback _ method , error _ code , <nl> to _ jstring ( env , error _ message ) , to _ jstring ( env , session . get ( ) - > path ( ) ) ) ; <nl> } ; <nl> <nl> @ @ - 110 , 7 + 112 , 7 @ @ public : <nl> JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; <nl> <nl> jstring access _ token _ string = ( jstring ) env - > CallStaticObjectMethod ( <nl> - java _ syncmanager , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; <nl> + sync _ manager _ class , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; <nl> if ( access _ token _ string ) { <nl> / / reusing cached valid token <nl> JStringAccessor access _ token ( env , access _ token _ string ) ; <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> index 070de20 . . 48e47cf 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp <nl> @ @ - 53 , 9 + 53 , 6 @ @ JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * ) <nl> java _ lang _ double _ init = env - > GetMethodID ( java _ lang _ double , " < init > " , " ( D ) V " ) ; <nl> java _ util _ date = GetClass ( env , " java / util / Date " ) ; <nl> java _ util _ date _ init = env - > GetMethodID ( java _ util _ date , " < init > " , " ( J ) V " ) ; <nl> - # if REALM _ ENABLE _ SYNC <nl> - java _ syncmanager = GetClass ( env , " io / realm / SyncManager " ) ; <nl> - # endif <nl> } <nl> <nl> return JNI _ VERSION _ 1 _ 6 ; <nl> @ @ - 73 , 9 + 70 , 7 @ @ JNIEXPORT void JNI _ OnUnload ( JavaVM * vm , void * ) <nl> env - > DeleteGlobalRef ( java _ lang _ double ) ; <nl> env - > DeleteGlobalRef ( java _ util _ date ) ; <nl> env - > DeleteGlobalRef ( java _ lang _ string ) ; <nl> - # if REALM _ ENABLE _ SYNC <nl> - env - > DeleteGlobalRef ( java _ syncmanager ) ; <nl> - # endif <nl> + JniUtils : : release ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp <nl> new file mode 100644 <nl> index 0000000 . . f0bb753 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # include " java _ class . hpp " <nl> + # include " jni _ utils . hpp " <nl> + <nl> + # include < realm / util / assert . hpp > <nl> + <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + JavaClass : : JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload ) <nl> + : m _ ref _ owner ( get _ jclass ( env , class _ name ) ) <nl> + , m _ class ( reinterpret _ cast < jclass > ( m _ ref _ owner . get ( ) ) ) <nl> + { <nl> + if ( free _ on _ unload ) { <nl> + / / Move the ownership of global ref to JNIUtils which will be released when JNI _ OnUnload . <nl> + JniUtils : : keep _ global _ ref ( m _ ref _ owner ) ; <nl> + } <nl> + } <nl> + <nl> + JavaGlobalRef JavaClass : : get _ jclass ( JNIEnv * env , const char * class _ name ) <nl> + { <nl> + jclass cls = env - > FindClass ( class _ name ) ; <nl> + REALM _ ASSERT _ DEBUG ( cls ) ; <nl> + <nl> + JavaGlobalRef cls _ ref ( env , cls ) ; <nl> + env - > DeleteLocalRef ( cls ) ; <nl> + return cls _ ref ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp <nl> new file mode 100644 <nl> index 0000000 . . c95dce2 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # ifndef REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP <nl> + # define REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP <nl> + <nl> + # include < jni . h > <nl> + <nl> + # include " java _ global _ ref . hpp " <nl> + <nl> + namespace realm { <nl> + namespace jni _ util { <nl> + <nl> + / / To find the jclass and manage the lifecycle for the jclass ' s global ref . <nl> + class JavaClass { <nl> + public : <nl> + / / when free _ on _ unload is true , the jclass ' s global ref will be released when JNI _ OnUnload called . This is useful <nl> + / / when the JavaClass instance is static . Otherwise the jclass ' s global ref will be released when this object is <nl> + / / deleted . <nl> + JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload = true ) ; <nl> + ~ JavaClass ( ) <nl> + { <nl> + } <nl> + <nl> + inline jclass get ( ) noexcept <nl> + { <nl> + return m _ class ; <nl> + } <nl> + <nl> + inline operator jclass ( ) const noexcept <nl> + { <nl> + return m _ class ; <nl> + } <nl> + <nl> + / / Not implemented for now . <nl> + JavaClass ( JavaClass & & ) = delete ; <nl> + JavaClass ( JavaClass & ) = delete ; <nl> + JavaClass & operator = ( JavaClass & & ) = delete ; <nl> + <nl> + private : <nl> + JavaGlobalRef m _ ref _ owner ; <nl> + jclass m _ class ; <nl> + static JavaGlobalRef get _ jclass ( JNIEnv * env , const char * class _ name ) ; <nl> + } ; <nl> + <nl> + } / / jni _ util <nl> + } / / realm <nl> + <nl> + # endif <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp <nl> new file mode 100644 <nl> index 0000000 . . fd6036c <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # include " java _ global _ ref . hpp " <nl> + # include " jni _ utils . hpp " <nl> + <nl> + # include < memory > <nl> + <nl> + using namespace realm : : jni _ util ; <nl> + <nl> + JavaGlobalRef : : ~ JavaGlobalRef ( ) <nl> + { <nl> + if ( m _ ref ) { <nl> + JniUtils : : get _ env ( ) - > DeleteGlobalRef ( m _ ref ) ; <nl> + } <nl> + } <nl> + <nl> + JavaGlobalRef & JavaGlobalRef : : operator = ( JavaGlobalRef & & rhs ) <nl> + { <nl> + this - > ~ JavaGlobalRef ( ) ; <nl> + new ( this ) JavaGlobalRef ( std : : move ( rhs ) ) ; <nl> + return * this ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp <nl> new file mode 100644 <nl> index 0000000 . . a08aad4 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp <nl> @ @ - 0 , 0 + 1 , 64 @ @ <nl> + / * <nl> + * Copyright 2017 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + # ifndef REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP <nl> + # define REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP <nl> + <nl> + # include < jni . h > <nl> + <nl> + namespace realm { <nl> + namespace jni _ util { <nl> + <nl> + / / Manage the lifecycle of jobject ' s global ref . <nl> + class JavaGlobalRef { <nl> + public : <nl> + JavaGlobalRef ( ) <nl> + : m _ ref ( nullptr ) <nl> + { <nl> + } <nl> + JavaGlobalRef ( JNIEnv * env , jobject obj ) <nl> + : m _ ref ( obj ? env - > NewGlobalRef ( obj ) : nullptr ) <nl> + { <nl> + } <nl> + JavaGlobalRef ( JavaGlobalRef & & rhs ) <nl> + : m _ ref ( rhs . m _ ref ) <nl> + { <nl> + rhs . m _ ref = nullptr ; <nl> + } <nl> + ~ JavaGlobalRef ( ) ; <nl> + <nl> + JavaGlobalRef & operator = ( JavaGlobalRef & & rhs ) ; <nl> + <nl> + inline operator bool ( ) const noexcept <nl> + { <nl> + return m _ ref ! = nullptr ; <nl> + } <nl> + <nl> + inline jobject get ( ) noexcept <nl> + { <nl> + return m _ ref ; <nl> + } <nl> + <nl> + / / Not implemented for now . <nl> + JavaGlobalRef ( JavaGlobalRef & ) = delete ; <nl> + <nl> + private : <nl> + jobject m _ ref ; <nl> + } ; <nl> + } <nl> + } <nl> + <nl> + # endif / / REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp <nl> index 88a23eb . . 0ca6f52 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp <nl> @ @ - 31 , 6 + 31 , 12 @ @ void JniUtils : : initialize ( JavaVM * vm , jint vm _ version ) noexcept <nl> s _ instance = std : : unique _ ptr < JniUtils > ( new JniUtils ( vm , vm _ version ) ) ; <nl> } <nl> <nl> + void JniUtils : : release ( ) <nl> + { <nl> + REALM _ ASSERT _ DEBUG ( s _ instance ) ; <nl> + s _ instance . release ( ) ; <nl> + } <nl> + <nl> JNIEnv * JniUtils : : get _ env ( bool attach _ if _ needed ) <nl> { <nl> REALM _ ASSERT _ DEBUG ( s _ instance ) ; <nl> @ @ - 53 , 3 + 59 , 9 @ @ void JniUtils : : detach _ current _ thread ( ) <nl> { <nl> s _ instance - > m _ vm - > DetachCurrentThread ( ) ; <nl> } <nl> + <nl> + void JniUtils : : keep _ global _ ref ( JavaGlobalRef & ref ) <nl> + { <nl> + s _ instance - > m _ global _ refs . push _ back ( std : : move ( ref ) ) ; <nl> + } <nl> + <nl> diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp <nl> index 7d2bcf4 . . 689aa12 100644 <nl> - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp <nl> + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp <nl> @ @ - 19 , 6 + 19 , 10 @ @ <nl> <nl> # include < jni . h > <nl> <nl> + # include < vector > <nl> + <nl> + # include " java _ global _ ref . hpp " <nl> + <nl> namespace realm { <nl> namespace jni _ util { <nl> <nl> @ @ - 31 , 12 + 35 , 16 @ @ public : <nl> <nl> / / Call this only once in JNI _ OnLoad . <nl> static void initialize ( JavaVM * vm , jint vm _ version ) noexcept ; <nl> + / / Call this in JNI _ OnUnload . <nl> + static void release ( ) ; <nl> / / When attach _ if _ needed is false , returns the JNIEnv if there is one attached to this thread . Assert if there is <nl> / / none . When attach _ if _ needed is true , try to attach and return a JNIEnv if necessary . <nl> static JNIEnv * get _ env ( bool attach _ if _ needed = false ) ; <nl> / / Detach the current thread from the JVM . Only required for C + + threads that where attached in the first place . <nl> / / Failing to do so is a resource leak . <nl> static void detach _ current _ thread ( ) ; <nl> + / / Keep the given global reference until JNI _ OnUnload is called . <nl> + static void keep _ global _ ref ( JavaGlobalRef & ref ) ; <nl> <nl> private : <nl> JniUtils ( JavaVM * vm , jint vm _ version ) noexcept <nl> @ @ - 47 , 6 + 55 , 7 @ @ private : <nl> <nl> JavaVM * m _ vm ; <nl> jint m _ vm _ version ; <nl> + std : : vector < JavaGlobalRef > m _ global _ refs ; <nl> } ; <nl> <nl> } / / namespace realm

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 index 5913e18 . . 11c3d43 100644 
 - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt 
 + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 @ @ - 17 , 6 + 17 , 10 @ @ set ( CMAKE _ VERBOSE _ MAKEFILE ON ) 
 # Generate compile _ commands . json 
 set ( CMAKE _ EXPORT _ COMPILE _ COMMANDS ON ) 
 
 + # Initialize common compile & link flags . 
 + set ( REALM _ LINKER _ FLAGS " " ) 
 + set ( REALM _ COMMON _ CXX _ FLAGS " " ) 
 + 
 # Setup lcache 
 if ( NDK _ LCACHE ) 
 set ( CMAKE _ CXX _ CREATE _ SHARED _ LIBRARY " $ { NDK _ LCACHE } $ { CMAKE _ CXX _ CREATE _ SHARED _ LIBRARY } " ) 
 @ @ - 123 , 6 + 127 , 14 @ @ elseif ( ARMEABI _ V7A ) 
 set ( ABI _ CXX _ FLAGS " - mthumb - march = armv7 - a - mfloat - abi = softfp - mfpu = vfpv3 - d16 " ) 
 endif ( ) 
 
 + # Hack the memmove bug on Samsung device . 
 + if ( ARMEABI OR ARMEABI _ V7A ) 
 + set ( REALM _ LINKER _ FLAGS " $ { REALM _ LINKER _ FLAGS } - Wl , - - wrap , memmove - Wl , - - wrap , memcpy " ) 
 + set ( REALM _ COMMON _ CXX _ FLAGS " $ { REALM _ COMMON _ CXX _ FLAGS } - DREALM _ WRAP _ MEMMOVE = 1 " ) 
 + else ( ) 
 + set ( REALM _ COMMON _ CXX _ FLAGS " $ { REALM _ COMMON _ CXX _ FLAGS } - DREALM _ WRAP _ MEMMOVE = 0 " ) 
 + endif ( ) 
 + 
 # FIXME uninitialized is reported by query _ expression . hpp : 1070 
 # d . init ( ValueBase : : m _ from _ link _ list , ValueBase : : m _ values , D { } ) ; 
 # FIXME maybe - uninitialized is reported by table _ view . cpp : 272 : 15 : 
 @ @ - 131 , 7 + 143 , 7 @ @ endif ( ) 
 set ( WARNING _ CXX _ FLAGS " - Werror - Wall - Wextra - pedantic - Wmissing - declarations \ 
 - Wempty - body - Wparentheses - Wunknown - pragmas - Wunreachable - code \ 
 - Wno - missing - field - initializers - Wno - maybe - uninitialized - Wno - uninitialized " ) 
 - set ( REALM _ COMMON _ CXX _ FLAGS " - DREALM _ ANDROID - DREALM _ HAVE _ CONFIG - DPIC - pthread - fvisibility = hidden - std = c + + 14 - fsigned - char " ) 
 + set ( REALM _ COMMON _ CXX _ FLAGS " $ { REALM _ COMMON _ CXX _ FLAGS } - DREALM _ ANDROID - DREALM _ HAVE _ CONFIG - DPIC - pthread - fvisibility = hidden - std = c + + 14 - fsigned - char " ) 
 if ( build _ SYNC ) 
 set ( REALM _ COMMON _ CXX _ FLAGS " $ { REALM _ COMMON _ CXX _ FLAGS } - DREALM _ ENABLE _ SYNC = 1 " ) 
 endif ( ) 
 @ @ - 143 , 7 + 155 , 6 @ @ set ( CMAKE _ CXX _ FLAGS _ DEBUG " - ggdb - Og - DNDEBUG " ) 
 set ( CMAKE _ CXX _ FLAGS " $ { CMAKE _ CXX _ FLAGS } $ { REALM _ COMMON _ CXX _ FLAGS } $ { WARNING _ CXX _ FLAGS } $ { ABI _ CXX _ FLAGS } " ) 
 
 # Set link flags 
 - set ( REALM _ LINKER _ FLAGS " " ) 
 if ( build _ SYNC ) 
 set ( REALM _ LINKER _ FLAGS " $ { REALM _ LINKER _ FLAGS } - lz " ) 
 endif ( ) 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 index 48e47cf . . ab772f4 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 # include < jni . h > 
 
 # include " jni _ util / jni _ utils . hpp " 
 + # include " jni _ util / hack . hpp " 
 
 # include < realm / string _ data . hpp > 
 # include < realm / unicode . hpp > 
 @ @ - 37 , 6 + 38 , 9 @ @ const string TABLE _ PREFIX ( " class _ " ) ; 
 
 JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * ) 
 { 
 + / / Workaround for some known bugs in system calls on specific devices . 
 + hack _ init ( ) ; 
 + 
 JNIEnv * env ; 
 if ( vm - > GetEnv ( ( void * * ) & env , JNI _ VERSION _ 1 _ 6 ) ! = JNI _ OK ) { 
 return JNI _ ERR ; 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / hack . cpp b / realm / realm - library / src / main / cpp / jni _ util / hack . cpp 
 new file mode 100644 
 index 0000000 . . 1ca6414 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / hack . cpp 
 @ @ - 0 , 0 + 1 , 116 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # include " hack . hpp " 
 + # include " log . hpp " 
 + 
 + # include < string . h > 
 + 
 + # include < realm / util / assert . hpp > 
 + 
 + # ifndef REALM _ WRAP _ MEMMOVE 
 + # error " REALM _ WRAP _ MEMMOVE is not defined ! " 
 + # endif 
 + 
 + # if REALM _ WRAP _ MEMMOVE 
 + extern " C " { 
 + void * _ _ wrap _ memmove ( void * dest , const void * src , size _ t n ) ; 
 + void * _ _ real _ memmove ( void * dest , const void * src , size _ t n ) ; 
 + 
 + void * _ _ wrap _ memcpy ( void * dest , const void * src , size _ t n ) ; 
 + void * _ _ real _ memcpy ( void * dest , const void * src , size _ t n ) ; 
 + } 
 + 
 + using namespace realm : : jni _ util ; 
 + 
 + typedef void * ( * MemMoveFunc ) ( void * dest , const void * src , size _ t n ) ; 
 + static MemMoveFunc s _ wrap _ memmove _ ptr = & _ _ real _ memmove ; 
 + static MemMoveFunc s _ wrap _ memcpy _ ptr = & _ _ real _ memcpy ; 
 + 
 + static void * hacked _ memmove ( void * s1 , const void * s2 , size _ t n ) 
 + { 
 + / / adapted from https : / / github . com / dryc / libc11 / blob / master / src / string / memmove . c 
 + char * dest = ( char * ) s1 ; 
 + const char * src = ( const char * ) s2 ; 
 + if ( dest < = src ) { 
 + while ( n - - ) { 
 + * dest + + = * src + + ; 
 + } 
 + } 
 + else { 
 + src + = n ; 
 + dest + = n ; 
 + while ( n - - ) { 
 + * - - dest = * - - src ; 
 + } 
 + } 
 + return static _ cast < void * > ( s1 ) ; 
 + } 
 + 
 + static void * hacked _ memcpy ( void * s1 , const void * s2 , size _ t n ) 
 + { 
 + / / adapted from https : / / github . com / dryc / libc11 / blob / master / src / string / memcpy . c 
 + char * dest = ( char * ) s1 ; 
 + const char * src = ( const char * ) s2 ; 
 + while ( n - - ) { 
 + * dest + + = * src + + ; 
 + } 
 + return static _ cast < void * > ( s1 ) ; 
 + } 
 + 
 + void * _ _ wrap _ memmove ( void * dest , const void * src , size _ t n ) 
 + { 
 + return ( * s _ wrap _ memmove _ ptr ) ( dest , src , n ) ; 
 + } 
 + 
 + void * _ _ wrap _ memcpy ( void * dest , const void * src , size _ t n ) 
 + { 
 + return ( * s _ wrap _ memcpy _ ptr ) ( dest , src , n ) ; 
 + } 
 + 
 + 
 + / / See https : / / github . com / realm / realm - java / issues / 3651 # issuecomment - 290290228 
 + / / There is a bug in memmove for some Samsung devices which will return " dest - n " instead of dest . 
 + / / The bug was originally found by QT , see https : / / bugreports . qt . io / browse / QTBUG - 34984 . 
 + / / To work around it , we use linker ' s wrap feature to use a pure C implementation of memmove if the device has the 
 + / / problem . 
 + static void check _ memmove ( ) 
 + { 
 + char * array = strdup ( " Foobar " ) ; 
 + size _ t len = strlen ( array ) ; 
 + void * ptr = _ _ real _ memmove ( array + 1 , array , len - 1 ) ; 
 + if ( ptr ! = array + 1 | | strncmp ( array , " FFooba " , len ) ! = 0 ) { 
 + Log : : e ( " memmove is broken on this device . Switching to the builtin implementation . " ) ; 
 + s _ wrap _ memmove _ ptr = & hacked _ memmove ; 
 + s _ wrap _ memcpy _ ptr = & hacked _ memcpy ; 
 + } 
 + free ( array ) ; 
 + } 
 + # endif 
 + 
 + namespace realm { 
 + namespace jni _ util { 
 + 
 + void hack _ init ( ) 
 + { 
 + # if REALM _ WRAP _ MEMMOVE 
 + check _ memmove ( ) ; 
 + # endif 
 + } 
 + 
 + } 
 + } 
 + 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / hack . hpp b / realm / realm - library / src / main / cpp / jni _ util / hack . hpp 
 new file mode 100644 
 index 0000000 . . 62ac347 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / hack . hpp 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # ifndef REALM _ JNI _ UTIL _ HACK _ HPP 
 + # define REALM _ JNI _ UTIL _ HACK _ HPP 
 + 
 + namespace realm { 
 + namespace jni _ util { 
 + 
 + / / Workaround bugs on some devices . 
 + void hack _ init ( ) ; 
 + 
 + } 
 + } 
 + # endif / / REALM _ JNI _ UTIL _ HACK _ HPP

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 index 531611f . . 1c5fcc2 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 @ @ - 28 , 6 + 28 , 7 @ @ 
 # include " util . hpp " 
 
 # include " jni _ util / java _ method . hpp " 
 + # include " jni _ util / java _ class . hpp " 
 
 using namespace realm ; 
 using namespace realm : : _ impl ; 
 @ @ - 74 , 11 + 75 , 12 @ @ public : 
 : m _ config ( std : : move ( config ) ) 
 { 
 # if REALM _ ENABLE _ SYNC 
 + static JavaClass sync _ manager _ class ( env , " io / realm / SyncManager " ) ; 
 / / Doing the methods lookup from the thread that loaded the lib , to avoid 
 / / https : / / developer . android . com / training / articles / perf - jni . html # faq _ FindClass 
 - static JavaMethod java _ error _ callback _ method ( env , java _ syncmanager , " notifyErrorHandler " , 
 + static JavaMethod java _ error _ callback _ method ( env , sync _ manager _ class , " notifyErrorHandler " , 
 " ( ILjava / lang / String ; Ljava / lang / String ; ) V " , true ) ; 
 - static JavaMethod java _ bind _ session _ method ( env , java _ syncmanager , " bindSessionWithConfig " , 
 + static JavaMethod java _ bind _ session _ method ( env , sync _ manager _ class , " bindSessionWithConfig " , 
 " ( Ljava / lang / String ; ) Ljava / lang / String ; " , true ) ; 
 
 / / error handler will be called form the sync client thread 
 @ @ - 96 , 7 + 98 , 7 @ @ public : 
 } 
 
 JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; 
 - env - > CallStaticVoidMethod ( java _ syncmanager , java _ error _ callback _ method , error _ code , 
 + env - > CallStaticVoidMethod ( sync _ manager _ class , java _ error _ callback _ method , error _ code , 
 to _ jstring ( env , error _ message ) , to _ jstring ( env , session . get ( ) - > path ( ) ) ) ; 
 } ; 
 
 @ @ - 110 , 7 + 112 , 7 @ @ public : 
 JNIEnv * env = realm : : jni _ util : : JniUtils : : get _ env ( true ) ; 
 
 jstring access _ token _ string = ( jstring ) env - > CallStaticObjectMethod ( 
 - java _ syncmanager , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; 
 + sync _ manager _ class , java _ bind _ session _ method , to _ jstring ( env , path . c _ str ( ) ) ) ; 
 if ( access _ token _ string ) { 
 / / reusing cached valid token 
 JStringAccessor access _ token ( env , access _ token _ string ) ; 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 index 070de20 . . 48e47cf 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Util . cpp 
 @ @ - 53 , 9 + 53 , 6 @ @ JNIEXPORT jint JNICALL JNI _ OnLoad ( JavaVM * vm , void * ) 
 java _ lang _ double _ init = env - > GetMethodID ( java _ lang _ double , " < init > " , " ( D ) V " ) ; 
 java _ util _ date = GetClass ( env , " java / util / Date " ) ; 
 java _ util _ date _ init = env - > GetMethodID ( java _ util _ date , " < init > " , " ( J ) V " ) ; 
 - # if REALM _ ENABLE _ SYNC 
 - java _ syncmanager = GetClass ( env , " io / realm / SyncManager " ) ; 
 - # endif 
 } 
 
 return JNI _ VERSION _ 1 _ 6 ; 
 @ @ - 73 , 9 + 70 , 7 @ @ JNIEXPORT void JNI _ OnUnload ( JavaVM * vm , void * ) 
 env - > DeleteGlobalRef ( java _ lang _ double ) ; 
 env - > DeleteGlobalRef ( java _ util _ date ) ; 
 env - > DeleteGlobalRef ( java _ lang _ string ) ; 
 - # if REALM _ ENABLE _ SYNC 
 - env - > DeleteGlobalRef ( java _ syncmanager ) ; 
 - # endif 
 + JniUtils : : release ( ) ; 
 } 
 } 
 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp 
 new file mode 100644 
 index 0000000 . . f0bb753 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . cpp 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # include " java _ class . hpp " 
 + # include " jni _ utils . hpp " 
 + 
 + # include < realm / util / assert . hpp > 
 + 
 + using namespace realm : : jni _ util ; 
 + 
 + JavaClass : : JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload ) 
 + : m _ ref _ owner ( get _ jclass ( env , class _ name ) ) 
 + , m _ class ( reinterpret _ cast < jclass > ( m _ ref _ owner . get ( ) ) ) 
 + { 
 + if ( free _ on _ unload ) { 
 + / / Move the ownership of global ref to JNIUtils which will be released when JNI _ OnUnload . 
 + JniUtils : : keep _ global _ ref ( m _ ref _ owner ) ; 
 + } 
 + } 
 + 
 + JavaGlobalRef JavaClass : : get _ jclass ( JNIEnv * env , const char * class _ name ) 
 + { 
 + jclass cls = env - > FindClass ( class _ name ) ; 
 + REALM _ ASSERT _ DEBUG ( cls ) ; 
 + 
 + JavaGlobalRef cls _ ref ( env , cls ) ; 
 + env - > DeleteLocalRef ( cls ) ; 
 + return cls _ ref ; 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp 
 new file mode 100644 
 index 0000000 . . c95dce2 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ class . hpp 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # ifndef REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP 
 + # define REALM _ JNI _ UTIL _ JAVA _ CLASS _ HPP 
 + 
 + # include < jni . h > 
 + 
 + # include " java _ global _ ref . hpp " 
 + 
 + namespace realm { 
 + namespace jni _ util { 
 + 
 + / / To find the jclass and manage the lifecycle for the jclass ' s global ref . 
 + class JavaClass { 
 + public : 
 + / / when free _ on _ unload is true , the jclass ' s global ref will be released when JNI _ OnUnload called . This is useful 
 + / / when the JavaClass instance is static . Otherwise the jclass ' s global ref will be released when this object is 
 + / / deleted . 
 + JavaClass ( JNIEnv * env , const char * class _ name , bool free _ on _ unload = true ) ; 
 + ~ JavaClass ( ) 
 + { 
 + } 
 + 
 + inline jclass get ( ) noexcept 
 + { 
 + return m _ class ; 
 + } 
 + 
 + inline operator jclass ( ) const noexcept 
 + { 
 + return m _ class ; 
 + } 
 + 
 + / / Not implemented for now . 
 + JavaClass ( JavaClass & & ) = delete ; 
 + JavaClass ( JavaClass & ) = delete ; 
 + JavaClass & operator = ( JavaClass & & ) = delete ; 
 + 
 + private : 
 + JavaGlobalRef m _ ref _ owner ; 
 + jclass m _ class ; 
 + static JavaGlobalRef get _ jclass ( JNIEnv * env , const char * class _ name ) ; 
 + } ; 
 + 
 + } / / jni _ util 
 + } / / realm 
 + 
 + # endif 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp 
 new file mode 100644 
 index 0000000 . . fd6036c 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . cpp 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # include " java _ global _ ref . hpp " 
 + # include " jni _ utils . hpp " 
 + 
 + # include < memory > 
 + 
 + using namespace realm : : jni _ util ; 
 + 
 + JavaGlobalRef : : ~ JavaGlobalRef ( ) 
 + { 
 + if ( m _ ref ) { 
 + JniUtils : : get _ env ( ) - > DeleteGlobalRef ( m _ ref ) ; 
 + } 
 + } 
 + 
 + JavaGlobalRef & JavaGlobalRef : : operator = ( JavaGlobalRef & & rhs ) 
 + { 
 + this - > ~ JavaGlobalRef ( ) ; 
 + new ( this ) JavaGlobalRef ( std : : move ( rhs ) ) ; 
 + return * this ; 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp 
 new file mode 100644 
 index 0000000 . . a08aad4 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / java _ global _ ref . hpp 
 @ @ - 0 , 0 + 1 , 64 @ @ 
 + / * 
 + * Copyright 2017 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + # ifndef REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP 
 + # define REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP 
 + 
 + # include < jni . h > 
 + 
 + namespace realm { 
 + namespace jni _ util { 
 + 
 + / / Manage the lifecycle of jobject ' s global ref . 
 + class JavaGlobalRef { 
 + public : 
 + JavaGlobalRef ( ) 
 + : m _ ref ( nullptr ) 
 + { 
 + } 
 + JavaGlobalRef ( JNIEnv * env , jobject obj ) 
 + : m _ ref ( obj ? env - > NewGlobalRef ( obj ) : nullptr ) 
 + { 
 + } 
 + JavaGlobalRef ( JavaGlobalRef & & rhs ) 
 + : m _ ref ( rhs . m _ ref ) 
 + { 
 + rhs . m _ ref = nullptr ; 
 + } 
 + ~ JavaGlobalRef ( ) ; 
 + 
 + JavaGlobalRef & operator = ( JavaGlobalRef & & rhs ) ; 
 + 
 + inline operator bool ( ) const noexcept 
 + { 
 + return m _ ref ! = nullptr ; 
 + } 
 + 
 + inline jobject get ( ) noexcept 
 + { 
 + return m _ ref ; 
 + } 
 + 
 + / / Not implemented for now . 
 + JavaGlobalRef ( JavaGlobalRef & ) = delete ; 
 + 
 + private : 
 + jobject m _ ref ; 
 + } ; 
 + } 
 + } 
 + 
 + # endif / / REALM _ JNI _ UTIL _ JAVA _ GLOBAL _ REF _ HPP 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp 
 index 88a23eb . . 0ca6f52 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . cpp 
 @ @ - 31 , 6 + 31 , 12 @ @ void JniUtils : : initialize ( JavaVM * vm , jint vm _ version ) noexcept 
 s _ instance = std : : unique _ ptr < JniUtils > ( new JniUtils ( vm , vm _ version ) ) ; 
 } 
 
 + void JniUtils : : release ( ) 
 + { 
 + REALM _ ASSERT _ DEBUG ( s _ instance ) ; 
 + s _ instance . release ( ) ; 
 + } 
 + 
 JNIEnv * JniUtils : : get _ env ( bool attach _ if _ needed ) 
 { 
 REALM _ ASSERT _ DEBUG ( s _ instance ) ; 
 @ @ - 53 , 3 + 59 , 9 @ @ void JniUtils : : detach _ current _ thread ( ) 
 { 
 s _ instance - > m _ vm - > DetachCurrentThread ( ) ; 
 } 
 + 
 + void JniUtils : : keep _ global _ ref ( JavaGlobalRef & ref ) 
 + { 
 + s _ instance - > m _ global _ refs . push _ back ( std : : move ( ref ) ) ; 
 + } 
 + 
 diff - - git a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp 
 index 7d2bcf4 . . 689aa12 100644 
 - - - a / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp 
 + + + b / realm / realm - library / src / main / cpp / jni _ util / jni _ utils . hpp 
 @ @ - 19 , 6 + 19 , 10 @ @ 
 
 # include < jni . h > 
 
 + # include < vector > 
 + 
 + # include " java _ global _ ref . hpp " 
 + 
 namespace realm { 
 namespace jni _ util { 
 
 @ @ - 31 , 12 + 35 , 16 @ @ public : 
 
 / / Call this only once in JNI _ OnLoad . 
 static void initialize ( JavaVM * vm , jint vm _ version ) noexcept ; 
 + / / Call this in JNI _ OnUnload . 
 + static void release ( ) ; 
 / / When attach _ if _ needed is false , returns the JNIEnv if there is one attached to this thread . Assert if there is 
 / / none . When attach _ if _ needed is true , try to attach and return a JNIEnv if necessary . 
 static JNIEnv * get _ env ( bool attach _ if _ needed = false ) ; 
 / / Detach the current thread from the JVM . Only required for C + + threads that where attached in the first place . 
 / / Failing to do so is a resource leak . 
 static void detach _ current _ thread ( ) ; 
 + / / Keep the given global reference until JNI _ OnUnload is called . 
 + static void keep _ global _ ref ( JavaGlobalRef & ref ) ; 
 
 private : 
 JniUtils ( JavaVM * vm , jint vm _ version ) noexcept 
 @ @ - 47 , 6 + 55 , 7 @ @ private : 
 
 JavaVM * m _ vm ; 
 jint m _ vm _ version ; 
 + std : : vector < JavaGlobalRef > m _ global _ refs ; 
 } ; 
 
 } / / namespace realm
