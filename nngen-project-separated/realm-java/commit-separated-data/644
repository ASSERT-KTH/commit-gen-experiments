BLEU SCORE: 0.025275658895144486

TEST MSG: Annotation processor no longer consume annotations
GENERATED MSG: Only do the version checker on the first round of the processor .

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index b08dd8a . . 484ca34 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 1 , 5 + 1 , 9 @ @ <nl> # # 1 . 1 . 1 <nl> <nl> + # # # Enhancements <nl> + <nl> + * The Realm Annotation processor no longer consumes the Realm annotations . Allowing other annotation processors to run . <nl> + <nl> # # # Bug fixes <nl> <nl> * Fixed a wrong JNI method declaration which might cause " method not found " crash on some devices . <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> index c7bdee7 . . 1e437f8 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import java . util . Set ; <nl> import java . util . TreeSet ; <nl> <nl> import javax . annotation . processing . AbstractProcessor ; <nl> - import javax . annotation . processing . ProcessingEnvironment ; <nl> import javax . annotation . processing . RoundEnvironment ; <nl> import javax . annotation . processing . SupportedAnnotationTypes ; <nl> import javax . lang . model . SourceVersion ; <nl> @ @ - 102 , 6 + 101 , 9 @ @ import io . realm . annotations . RealmClass ; <nl> } ) <nl> public class RealmProcessor extends AbstractProcessor { <nl> <nl> + / / Don ' t consume annotations . This allows 3rd party annotation processors to run . <nl> + private static final boolean CONSUME _ ANNOTATIONS = false ; <nl> + <nl> Set < ClassMetaData > classesToValidate = new HashSet < ClassMetaData > ( ) ; <nl> private boolean hasProcessedModules = false ; <nl> <nl> @ @ - 111 , 8 + 113 , 9 @ @ public class RealmProcessor extends AbstractProcessor { <nl> <nl> @ Override <nl> public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { <nl> + / / Don ' t run this processor in subsequent runs . We created everything in the first one . <nl> if ( hasProcessedModules ) { <nl> - return true ; <nl> + return CONSUME _ ANNOTATIONS ; <nl> } <nl> RealmVersionChecker updateChecker = RealmVersionChecker . getInstance ( processingEnv ) ; <nl> updateChecker . executeRealmVersionUpdate ( ) ; <nl> @ @ - 165 , 7 + 168 , 9 @ @ public class RealmProcessor extends AbstractProcessor { <nl> } <nl> <nl> hasProcessedModules = true ; <nl> - return processModules ( roundEnv ) ; <nl> + processModules ( roundEnv ) ; <nl> + <nl> + return CONSUME _ ANNOTATIONS ; <nl> } <nl> <nl> / / Returns true if modules was processed successfully , false otherwise
NEAREST DIFF (one line): diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> index 14e97da . . ec51e6c 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java <nl> @ @ - 17 , 35 + 17 , 22 @ @ <nl> package io . realm . processor ; <nl> <nl> <nl> - import java . io . IOException ; <nl> - import java . util . ArrayList ; <nl> - import java . util . Arrays ; <nl> - import java . util . HashMap ; <nl> - import java . util . HashSet ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - import java . util . Set ; <nl> + import io . realm . annotations . Ignore ; <nl> + import io . realm . annotations . Index ; <nl> + import io . realm . annotations . PrimaryKey ; <nl> + import io . realm . annotations . RealmClass ; <nl> <nl> import javax . annotation . processing . AbstractProcessor ; <nl> import javax . annotation . processing . RoundEnvironment ; <nl> import javax . annotation . processing . SupportedAnnotationTypes ; <nl> import javax . lang . model . SourceVersion ; <nl> - import javax . lang . model . element . Element ; <nl> - import javax . lang . model . element . ElementKind ; <nl> - import javax . lang . model . element . ExecutableElement ; <nl> - import javax . lang . model . element . Modifier ; <nl> - import javax . lang . model . element . PackageElement ; <nl> - import javax . lang . model . element . TypeElement ; <nl> - import javax . lang . model . element . VariableElement ; <nl> + import javax . lang . model . element . * ; <nl> import javax . lang . model . type . TypeKind ; <nl> import javax . lang . model . type . TypeMirror ; <nl> import javax . lang . model . util . Types ; <nl> import javax . tools . Diagnostic ; <nl> - <nl> - import io . realm . annotations . Ignore ; <nl> - import io . realm . annotations . Index ; <nl> - import io . realm . annotations . PrimaryKey ; <nl> - import io . realm . annotations . RealmClass ; <nl> + import java . io . IOException ; <nl> + import java . util . * ; <nl> <nl> <nl> @ SupportedAnnotationTypes ( { <nl> @ @ - 64 , 7 + 51 , 7 @ @ public class RealmProcessor extends AbstractProcessor { <nl> <nl> @ Override <nl> public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { <nl> - RealmVersionChecker updateChecker = new RealmVersionChecker ( processingEnv ) ; <nl> + RealmVersionChecker updateChecker = RealmVersionChecker . getInstance ( processingEnv ) ; <nl> updateChecker . executeRealmVersionUpdate ( ) ; <nl> Utils . initialize ( processingEnv ) ; <nl> <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java <nl> index 76d9eff . . bfe92d4 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java <nl> @ @ - 21 , 11 + 21 , 13 @ @ import javax . tools . Diagnostic ; <nl> import java . io . * ; <nl> import java . net . HttpURLConnection ; <nl> import java . net . URL ; <nl> - import java . nio . charset . Charset ; <nl> <nl> public class RealmVersionChecker { <nl> - <nl> public static final String REALM _ ANDROID _ DOWNLOAD _ URL = " http : / / static . realm . io / downloads / java / latest " ; <nl> + <nl> + private static RealmVersionChecker instance = null ; <nl> + private static boolean isFirstRound = true ; <nl> + <nl> private static final String VERSION _ URL = " http : / / static . realm . io / update / java ? " ; <nl> private static final String REALM _ VERSION = Version . VERSION ; <nl> private static final int READ _ TIMEOUT = 2000 ; <nl> @ @ - 33 , 10 + 35 , 17 @ @ public class RealmVersionChecker { <nl> <nl> private ProcessingEnvironment processingEnvironment ; <nl> <nl> - public RealmVersionChecker ( ProcessingEnvironment processingEnvironment ) { <nl> + private RealmVersionChecker ( ProcessingEnvironment processingEnvironment ) { <nl> this . processingEnvironment = processingEnvironment ; <nl> } <nl> <nl> + public static RealmVersionChecker getInstance ( ProcessingEnvironment processingEnvironment ) { <nl> + if ( instance = = null ) { <nl> + instance = new RealmVersionChecker ( processingEnvironment ) ; <nl> + } <nl> + return instance ; <nl> + } <nl> + <nl> private void launchRealmCheck ( ) { <nl> / / Check Realm version server <nl> String latestVersionStr = checkLatestVersion ( ) ; <nl> @ @ - 46 , 17 + 55 , 20 @ @ public class RealmVersionChecker { <nl> } <nl> <nl> public void executeRealmVersionUpdate ( ) { <nl> - Thread backgroundThread = new Thread ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - launchRealmCheck ( ) ; <nl> + if ( isFirstRound ) { <nl> + isFirstRound = false ; <nl> + Thread backgroundThread = new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + launchRealmCheck ( ) ; <nl> + } <nl> + } ) ; <nl> + backgroundThread . start ( ) ; <nl> + try { <nl> + backgroundThread . join ( CONNECT _ TIMEOUT + READ _ TIMEOUT ) ; <nl> + } catch ( InterruptedException e ) { <nl> + / / We ignore this exception on purpose not to break the build system if this class fails <nl> } <nl> - } ) ; <nl> - backgroundThread . start ( ) ; <nl> - try { <nl> - backgroundThread . join ( CONNECT _ TIMEOUT + READ _ TIMEOUT ) ; <nl> - } catch ( InterruptedException e ) { <nl> - / / We ignore this exception on purpose not to break the build system if this class fails <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index b08dd8a . . 484ca34 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 1 , 5 + 1 , 9 @ @ 
 # # 1 . 1 . 1 
 
 + # # # Enhancements 
 + 
 + * The Realm Annotation processor no longer consumes the Realm annotations . Allowing other annotation processors to run . 
 + 
 # # # Bug fixes 
 
 * Fixed a wrong JNI method declaration which might cause " method not found " crash on some devices . 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 index c7bdee7 . . 1e437f8 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import java . util . Set ; 
 import java . util . TreeSet ; 
 
 import javax . annotation . processing . AbstractProcessor ; 
 - import javax . annotation . processing . ProcessingEnvironment ; 
 import javax . annotation . processing . RoundEnvironment ; 
 import javax . annotation . processing . SupportedAnnotationTypes ; 
 import javax . lang . model . SourceVersion ; 
 @ @ - 102 , 6 + 101 , 9 @ @ import io . realm . annotations . RealmClass ; 
 } ) 
 public class RealmProcessor extends AbstractProcessor { 
 
 + / / Don ' t consume annotations . This allows 3rd party annotation processors to run . 
 + private static final boolean CONSUME _ ANNOTATIONS = false ; 
 + 
 Set < ClassMetaData > classesToValidate = new HashSet < ClassMetaData > ( ) ; 
 private boolean hasProcessedModules = false ; 
 
 @ @ - 111 , 8 + 113 , 9 @ @ public class RealmProcessor extends AbstractProcessor { 
 
 @ Override 
 public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { 
 + / / Don ' t run this processor in subsequent runs . We created everything in the first one . 
 if ( hasProcessedModules ) { 
 - return true ; 
 + return CONSUME _ ANNOTATIONS ; 
 } 
 RealmVersionChecker updateChecker = RealmVersionChecker . getInstance ( processingEnv ) ; 
 updateChecker . executeRealmVersionUpdate ( ) ; 
 @ @ - 165 , 7 + 168 , 9 @ @ public class RealmProcessor extends AbstractProcessor { 
 } 
 
 hasProcessedModules = true ; 
 - return processModules ( roundEnv ) ; 
 + processModules ( roundEnv ) ; 
 + 
 + return CONSUME _ ANNOTATIONS ; 
 } 
 
 / / Returns true if modules was processed successfully , false otherwise

NEAREST DIFF:
diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 index 14e97da . . ec51e6c 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProcessor . java 
 @ @ - 17 , 35 + 17 , 22 @ @ 
 package io . realm . processor ; 
 
 
 - import java . io . IOException ; 
 - import java . util . ArrayList ; 
 - import java . util . Arrays ; 
 - import java . util . HashMap ; 
 - import java . util . HashSet ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - import java . util . Set ; 
 + import io . realm . annotations . Ignore ; 
 + import io . realm . annotations . Index ; 
 + import io . realm . annotations . PrimaryKey ; 
 + import io . realm . annotations . RealmClass ; 
 
 import javax . annotation . processing . AbstractProcessor ; 
 import javax . annotation . processing . RoundEnvironment ; 
 import javax . annotation . processing . SupportedAnnotationTypes ; 
 import javax . lang . model . SourceVersion ; 
 - import javax . lang . model . element . Element ; 
 - import javax . lang . model . element . ElementKind ; 
 - import javax . lang . model . element . ExecutableElement ; 
 - import javax . lang . model . element . Modifier ; 
 - import javax . lang . model . element . PackageElement ; 
 - import javax . lang . model . element . TypeElement ; 
 - import javax . lang . model . element . VariableElement ; 
 + import javax . lang . model . element . * ; 
 import javax . lang . model . type . TypeKind ; 
 import javax . lang . model . type . TypeMirror ; 
 import javax . lang . model . util . Types ; 
 import javax . tools . Diagnostic ; 
 - 
 - import io . realm . annotations . Ignore ; 
 - import io . realm . annotations . Index ; 
 - import io . realm . annotations . PrimaryKey ; 
 - import io . realm . annotations . RealmClass ; 
 + import java . io . IOException ; 
 + import java . util . * ; 
 
 
 @ SupportedAnnotationTypes ( { 
 @ @ - 64 , 7 + 51 , 7 @ @ public class RealmProcessor extends AbstractProcessor { 
 
 @ Override 
 public boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { 
 - RealmVersionChecker updateChecker = new RealmVersionChecker ( processingEnv ) ; 
 + RealmVersionChecker updateChecker = RealmVersionChecker . getInstance ( processingEnv ) ; 
 updateChecker . executeRealmVersionUpdate ( ) ; 
 Utils . initialize ( processingEnv ) ; 
 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java 
 index 76d9eff . . bfe92d4 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmVersionChecker . java 
 @ @ - 21 , 11 + 21 , 13 @ @ import javax . tools . Diagnostic ; 
 import java . io . * ; 
 import java . net . HttpURLConnection ; 
 import java . net . URL ; 
 - import java . nio . charset . Charset ; 
 
 public class RealmVersionChecker { 
 - 
 public static final String REALM _ ANDROID _ DOWNLOAD _ URL = " http : / / static . realm . io / downloads / java / latest " ; 
 + 
 + private static RealmVersionChecker instance = null ; 
 + private static boolean isFirstRound = true ; 
 + 
 private static final String VERSION _ URL = " http : / / static . realm . io / update / java ? " ; 
 private static final String REALM _ VERSION = Version . VERSION ; 
 private static final int READ _ TIMEOUT = 2000 ; 
 @ @ - 33 , 10 + 35 , 17 @ @ public class RealmVersionChecker { 
 
 private ProcessingEnvironment processingEnvironment ; 
 
 - public RealmVersionChecker ( ProcessingEnvironment processingEnvironment ) { 
 + private RealmVersionChecker ( ProcessingEnvironment processingEnvironment ) { 
 this . processingEnvironment = processingEnvironment ; 
 } 
 
 + public static RealmVersionChecker getInstance ( ProcessingEnvironment processingEnvironment ) { 
 + if ( instance = = null ) { 
 + instance = new RealmVersionChecker ( processingEnvironment ) ; 
 + } 
 + return instance ; 
 + } 
 + 
 private void launchRealmCheck ( ) { 
 / / Check Realm version server 
 String latestVersionStr = checkLatestVersion ( ) ; 
 @ @ - 46 , 17 + 55 , 20 @ @ public class RealmVersionChecker { 
 } 
 
 public void executeRealmVersionUpdate ( ) { 
 - Thread backgroundThread = new Thread ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - launchRealmCheck ( ) ; 
 + if ( isFirstRound ) { 
 + isFirstRound = false ; 
 + Thread backgroundThread = new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + launchRealmCheck ( ) ; 
 + } 
 + } ) ; 
 + backgroundThread . start ( ) ; 
 + try { 
 + backgroundThread . join ( CONNECT _ TIMEOUT + READ _ TIMEOUT ) ; 
 + } catch ( InterruptedException e ) { 
 + / / We ignore this exception on purpose not to break the build system if this class fails 
 } 
 - } ) ; 
 - backgroundThread . start ( ) ; 
 - try { 
 - backgroundThread . join ( CONNECT _ TIMEOUT + READ _ TIMEOUT ) ; 
 - } catch ( InterruptedException e ) { 
 - / / We ignore this exception on purpose not to break the build system if this class fails 
 } 
 } 

