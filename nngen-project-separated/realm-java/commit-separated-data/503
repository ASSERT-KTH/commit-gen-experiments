BLEU SCORE: 0.08170609724417775

TEST MSG: Fix get DynamicRealmObject from RealmResults .
GENERATED MSG: Experiment of Results . get ( )

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 44d3237 . . 9f37341 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . util . concurrent . atomic . AtomicBoolean ; <nl> <nl> import io . realm . exceptions . RealmFileException ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> + import io . realm . internal . CheckedRow ; <nl> import io . realm . internal . InvalidRow ; <nl> import io . realm . internal . RealmNotifier ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> @ @ - 468 , 11 + 469 , 19 @ @ abstract class BaseRealm implements Closeable { <nl> return schema ; <nl> } <nl> <nl> - / / FIXME : Testing code <nl> - < E extends RealmModel > E get ( Class < E > clazz , Row row ) { <nl> + / / Used by RealmList / RealmResults , to create RealmObject from a Collection . <nl> + / / Invariant : if dynamicClassName ! = null - > clazz = = DynamicRealmObject <nl> + < E extends RealmModel > E get ( Class < E > clazz , String dynamicClassName , UncheckedRow row ) { <nl> + final boolean isDynamicRealmObject = dynamicClassName ! = null ; <nl> <nl> - E result = configuration . getSchemaMediator ( ) . newInstance ( clazz , this , row , schema . getColumnInfo ( clazz ) , <nl> - false , Collections . < String > emptyList ( ) ) ; <nl> + E result ; <nl> + if ( isDynamicRealmObject ) { <nl> + / / noinspection unchecked <nl> + result = ( E ) new DynamicRealmObject ( this , CheckedRow . getFromRow ( row ) ) ; <nl> + } else { <nl> + result = configuration . getSchemaMediator ( ) . newInstance ( clazz , this , row , schema . getColumnInfo ( clazz ) , <nl> + false , Collections . < String > emptyList ( ) ) ; <nl> + } <nl> RealmObjectProxy proxy = ( RealmObjectProxy ) result ; <nl> proxy . realmGet $ proxyState ( ) . setTableVersion $ realm ( ) ; <nl> return result ; <nl> @ @ - 490 , 6 + 499 , 7 @ @ abstract class BaseRealm implements Closeable { <nl> <nl> / / Used by RealmList / RealmResults <nl> / / Invariant : if dynamicClassName ! = null - > clazz = = DynamicRealmObject <nl> + / / TODO : Remove this after RealmList is backed by OS Results . <nl> < E extends RealmModel > E get ( Class < E > clazz , String dynamicClassName , long rowIndex ) { <nl> final boolean isDynamicRealmObject = dynamicClassName ! = null ; <nl> final Table table = isDynamicRealmObject ? schema . getTable ( dynamicClassName ) : schema . getTable ( clazz ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 9feb82b . . ab66b03 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 150 , 7 + 150 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> @ Override <nl> public E get ( int location ) { <nl> realm . checkIfValid ( ) ; <nl> - return realm . get ( classSpec , collection . getUncheckedRow ( location ) ) ; <nl> + return realm . get ( classSpec , className , collection . getUncheckedRow ( location ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 170 , 10 + 170 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> } <nl> <nl> private E firstImpl ( boolean shouldThrow , E defaultValue ) { <nl> - Row row = collection . firstUncheckedRow ( ) ; <nl> + UncheckedRow row = collection . firstUncheckedRow ( ) ; <nl> <nl> if ( row ! = null ) { <nl> - return realm . get ( classSpec , row ) ; <nl> + return realm . get ( classSpec , className , row ) ; <nl> } else { <nl> if ( shouldThrow ) { <nl> throw new IndexOutOfBoundsException ( " No results were found . " ) ; <nl> @ @ - 201 , 10 + 201 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> } <nl> <nl> private E lastImpl ( boolean shouldThrow , E defaultValue ) { <nl> - Row row = collection . lastUncheckedRow ( ) ; <nl> + UncheckedRow row = collection . lastUncheckedRow ( ) ; <nl> <nl> if ( row ! = null ) { <nl> - return realm . get ( classSpec , row ) ; <nl> + return realm . get ( classSpec , className , row ) ; <nl> } else { <nl> if ( shouldThrow ) { <nl> throw new IndexOutOfBoundsException ( " No results were found . " ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java b / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java <nl> index 435075d . . d67ba72 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public class CheckedRow extends UncheckedRow { <nl> * <nl> * @ return an checked instance of { @ link Row } . <nl> * / <nl> - static CheckedRow getFromRow ( UncheckedRow row ) { <nl> + public static CheckedRow getFromRow ( UncheckedRow row ) { <nl> return new CheckedRow ( row ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index c61b2ce . . 6e5dc1c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 505 , 6 + 505 , 18 @ @ abstract class BaseRealm implements Closeable { <nl> return schema ; <nl> } <nl> <nl> + / / FIXME : Testing code <nl> + < E extends RealmModel > E get ( Class < E > clazz , long rowPtr ) { <nl> + Table table = schema . getTable ( clazz ) ; <nl> + UncheckedRow row = UncheckedRow . getByRowPointer ( table , rowPtr ) ; <nl> + <nl> + E result = configuration . getSchemaMediator ( ) . newInstance ( clazz , this , row , schema . getColumnInfo ( clazz ) , <nl> + false , Collections . < String > emptyList ( ) ) ; <nl> + RealmObjectProxy proxy = ( RealmObjectProxy ) result ; <nl> + proxy . realmGet $ proxyState ( ) . setTableVersion $ realm ( ) ; <nl> + return result ; <nl> + } <nl> + <nl> < E extends RealmModel > E get ( Class < E > clazz , long rowIndex , boolean acceptDefaultValue , List < String > excludeFields ) { <nl> Table table = schema . getTable ( clazz ) ; <nl> UncheckedRow row = table . getUncheckedRow ( rowIndex ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 2870276 . . c0e0f70 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 268 , 14 + 268 , 16 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public E get ( int location ) { <nl> E obj ; <nl> realm . checkIfValid ( ) ; <nl> + / * <nl> TableOrView table = getTableOrView ( ) ; <nl> if ( table instanceof TableView ) { <nl> obj = realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; <nl> } else { <nl> obj = realm . get ( classSpec , className , location ) ; <nl> } <nl> - <nl> - return obj ; <nl> + * / <nl> + long rowPtr = nativeGetRow ( nativePtr , location ) ; <nl> + return realm . get ( classSpec , rowPtr ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> index 88ba67d . . dd84818 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class Table implements TableOrView , TableSchema { <nl> private static final long NO _ PRIMARY _ KEY = - 2 ; <nl> <nl> long nativePtr ; <nl> - private final Context context ; <nl> + final Context context ; <nl> private final SharedRealm sharedRealm ; <nl> private long cachedPrimaryKeyColumnIndex = NO _ MATCH ; <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java b / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java <nl> index 6e4bb8e . . 523b3fb 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java <nl> @ @ - 71 , 6 + 71 , 13 @ @ public class UncheckedRow extends NativeObject implements Row { <nl> return row ; <nl> } <nl> <nl> + / / FIXME : Testing code <nl> + public static UncheckedRow getByRowPointer ( Table table , long nativeRowPointer ) { <nl> + UncheckedRow row = new UncheckedRow ( table . context , table , nativeRowPointer ) ; <nl> + table . context . addReference ( NativeObjectReference . TYPE _ ROW , row ) ; <nl> + return row ; <nl> + } <nl> + <nl> / * * <nl> * Gets the row object associated to an index in a LinkView . <nl> *

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 44d3237 . . 9f37341 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . util . concurrent . atomic . AtomicBoolean ; 
 
 import io . realm . exceptions . RealmFileException ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 + import io . realm . internal . CheckedRow ; 
 import io . realm . internal . InvalidRow ; 
 import io . realm . internal . RealmNotifier ; 
 import io . realm . internal . RealmObjectProxy ; 
 @ @ - 468 , 11 + 469 , 19 @ @ abstract class BaseRealm implements Closeable { 
 return schema ; 
 } 
 
 - / / FIXME : Testing code 
 - < E extends RealmModel > E get ( Class < E > clazz , Row row ) { 
 + / / Used by RealmList / RealmResults , to create RealmObject from a Collection . 
 + / / Invariant : if dynamicClassName ! = null - > clazz = = DynamicRealmObject 
 + < E extends RealmModel > E get ( Class < E > clazz , String dynamicClassName , UncheckedRow row ) { 
 + final boolean isDynamicRealmObject = dynamicClassName ! = null ; 
 
 - E result = configuration . getSchemaMediator ( ) . newInstance ( clazz , this , row , schema . getColumnInfo ( clazz ) , 
 - false , Collections . < String > emptyList ( ) ) ; 
 + E result ; 
 + if ( isDynamicRealmObject ) { 
 + / / noinspection unchecked 
 + result = ( E ) new DynamicRealmObject ( this , CheckedRow . getFromRow ( row ) ) ; 
 + } else { 
 + result = configuration . getSchemaMediator ( ) . newInstance ( clazz , this , row , schema . getColumnInfo ( clazz ) , 
 + false , Collections . < String > emptyList ( ) ) ; 
 + } 
 RealmObjectProxy proxy = ( RealmObjectProxy ) result ; 
 proxy . realmGet $ proxyState ( ) . setTableVersion $ realm ( ) ; 
 return result ; 
 @ @ - 490 , 6 + 499 , 7 @ @ abstract class BaseRealm implements Closeable { 
 
 / / Used by RealmList / RealmResults 
 / / Invariant : if dynamicClassName ! = null - > clazz = = DynamicRealmObject 
 + / / TODO : Remove this after RealmList is backed by OS Results . 
 < E extends RealmModel > E get ( Class < E > clazz , String dynamicClassName , long rowIndex ) { 
 final boolean isDynamicRealmObject = dynamicClassName ! = null ; 
 final Table table = isDynamicRealmObject ? schema . getTable ( dynamicClassName ) : schema . getTable ( clazz ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 9feb82b . . ab66b03 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 150 , 7 + 150 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 @ Override 
 public E get ( int location ) { 
 realm . checkIfValid ( ) ; 
 - return realm . get ( classSpec , collection . getUncheckedRow ( location ) ) ; 
 + return realm . get ( classSpec , className , collection . getUncheckedRow ( location ) ) ; 
 } 
 
 / * * 
 @ @ - 170 , 10 + 170 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 } 
 
 private E firstImpl ( boolean shouldThrow , E defaultValue ) { 
 - Row row = collection . firstUncheckedRow ( ) ; 
 + UncheckedRow row = collection . firstUncheckedRow ( ) ; 
 
 if ( row ! = null ) { 
 - return realm . get ( classSpec , row ) ; 
 + return realm . get ( classSpec , className , row ) ; 
 } else { 
 if ( shouldThrow ) { 
 throw new IndexOutOfBoundsException ( " No results were found . " ) ; 
 @ @ - 201 , 10 + 201 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 } 
 
 private E lastImpl ( boolean shouldThrow , E defaultValue ) { 
 - Row row = collection . lastUncheckedRow ( ) ; 
 + UncheckedRow row = collection . lastUncheckedRow ( ) ; 
 
 if ( row ! = null ) { 
 - return realm . get ( classSpec , row ) ; 
 + return realm . get ( classSpec , className , row ) ; 
 } else { 
 if ( shouldThrow ) { 
 throw new IndexOutOfBoundsException ( " No results were found . " ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java b / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java 
 index 435075d . . d67ba72 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / CheckedRow . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public class CheckedRow extends UncheckedRow { 
 * 
 * @ return an checked instance of { @ link Row } . 
 * / 
 - static CheckedRow getFromRow ( UncheckedRow row ) { 
 + public static CheckedRow getFromRow ( UncheckedRow row ) { 
 return new CheckedRow ( row ) ; 
 } 


NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index c61b2ce . . 6e5dc1c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 505 , 6 + 505 , 18 @ @ abstract class BaseRealm implements Closeable { 
 return schema ; 
 } 
 
 + / / FIXME : Testing code 
 + < E extends RealmModel > E get ( Class < E > clazz , long rowPtr ) { 
 + Table table = schema . getTable ( clazz ) ; 
 + UncheckedRow row = UncheckedRow . getByRowPointer ( table , rowPtr ) ; 
 + 
 + E result = configuration . getSchemaMediator ( ) . newInstance ( clazz , this , row , schema . getColumnInfo ( clazz ) , 
 + false , Collections . < String > emptyList ( ) ) ; 
 + RealmObjectProxy proxy = ( RealmObjectProxy ) result ; 
 + proxy . realmGet $ proxyState ( ) . setTableVersion $ realm ( ) ; 
 + return result ; 
 + } 
 + 
 < E extends RealmModel > E get ( Class < E > clazz , long rowIndex , boolean acceptDefaultValue , List < String > excludeFields ) { 
 Table table = schema . getTable ( clazz ) ; 
 UncheckedRow row = table . getUncheckedRow ( rowIndex ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 2870276 . . c0e0f70 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 268 , 14 + 268 , 16 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public E get ( int location ) { 
 E obj ; 
 realm . checkIfValid ( ) ; 
 + / * 
 TableOrView table = getTableOrView ( ) ; 
 if ( table instanceof TableView ) { 
 obj = realm . get ( classSpec , className , ( ( TableView ) table ) . getSourceRowIndex ( location ) ) ; 
 } else { 
 obj = realm . get ( classSpec , className , location ) ; 
 } 
 - 
 - return obj ; 
 + * / 
 + long rowPtr = nativeGetRow ( nativePtr , location ) ; 
 + return realm . get ( classSpec , rowPtr ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Table . java b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 index 88ba67d . . dd84818 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Table . java 
 @ @ - 44 , 7 + 44 , 7 @ @ public class Table implements TableOrView , TableSchema { 
 private static final long NO _ PRIMARY _ KEY = - 2 ; 
 
 long nativePtr ; 
 - private final Context context ; 
 + final Context context ; 
 private final SharedRealm sharedRealm ; 
 private long cachedPrimaryKeyColumnIndex = NO _ MATCH ; 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java b / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java 
 index 6e4bb8e . . 523b3fb 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / UncheckedRow . java 
 @ @ - 71 , 6 + 71 , 13 @ @ public class UncheckedRow extends NativeObject implements Row { 
 return row ; 
 } 
 
 + / / FIXME : Testing code 
 + public static UncheckedRow getByRowPointer ( Table table , long nativeRowPointer ) { 
 + UncheckedRow row = new UncheckedRow ( table . context , table , nativeRowPointer ) ; 
 + table . context . addReference ( NativeObjectReference . TYPE _ ROW , row ) ; 
 + return row ; 
 + } 
 + 
 / * * 
 * Gets the row object associated to an index in a LinkView . 
 *
