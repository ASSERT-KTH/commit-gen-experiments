BLEU SCORE: 0.02399905349559606

TEST MSG: Fix the warnings of StrictMode
GENERATED MSG: Added test cases for RealmConfiguration + minor refactoring .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmInMemoryTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmInMemoryTest . java <nl> index c1a572e . . b273290 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmInMemoryTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmInMemoryTest . java <nl> @ @ - 16 , 33 + 16 , 46 @ @ <nl> <nl> package io . realm ; <nl> <nl> - import android . os . StrictMode ; <nl> - import android . test . AndroidTestCase ; <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> <nl> import junit . framework . AssertionFailedError ; <nl> <nl> + import org . junit . After ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import io . realm . entities . Dog ; <nl> import io . realm . exceptions . RealmFileException ; <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> + <nl> + import static junit . framework . Assert . assertTrue ; <nl> + import static junit . framework . Assert . assertEquals ; <nl> + import static junit . framework . Assert . fail ; <nl> + <nl> + @ RunWith ( AndroidJUnit4 . class ) <nl> + public class RealmInMemoryTest { <nl> <nl> - public class RealmInMemoryTest extends AndroidTestCase { <nl> + @ Rule <nl> + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> <nl> private final static String IDENTIFIER = " InMemRealmTest " ; <nl> <nl> private Realm testRealm ; <nl> private RealmConfiguration inMemConf ; <nl> <nl> - @ Override <nl> - protected void setUp ( ) throws Exception { <nl> - RealmConfiguration onDiskConf = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + @ Before <nl> + public void setUp ( ) { <nl> + RealmConfiguration onDiskConf = configFactory . createConfigurationBuilder ( ) <nl> . name ( IDENTIFIER ) <nl> . build ( ) ; <nl> - inMemConf = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + inMemConf = configFactory . createConfigurationBuilder ( ) <nl> . name ( IDENTIFIER ) <nl> . inMemory ( ) <nl> . build ( ) ; <nl> @ @ - 52 , 8 + 65 , 8 @ @ public class RealmInMemoryTest extends AndroidTestCase { <nl> testRealm = Realm . getInstance ( inMemConf ) ; <nl> } <nl> <nl> - @ Override <nl> - protected void tearDown ( ) throws Exception { <nl> + @ After <nl> + public void tearDown ( ) { <nl> if ( testRealm ! = null ) { <nl> testRealm . close ( ) ; <nl> } <nl> @ @ - 61 , 14 + 74 , 8 @ @ public class RealmInMemoryTest extends AndroidTestCase { <nl> <nl> / / Testing the in - memory Realm by Creating one instance , adding a record , then close the instance . <nl> / / By the next time in - memory Realm instance with the same name created , it should be empty . <nl> - / / Use StrictMode to check no disk IO would happen in VM to this thread . <nl> - public void testInMemoryRealm ( ) { <nl> - StrictMode . setThreadPolicy ( new StrictMode . ThreadPolicy . Builder ( ) <nl> - . detectDiskReads ( ) <nl> - . detectDiskWrites ( ) <nl> - . penaltyDeath ( ) <nl> - . build ( ) ) ; <nl> - <nl> + @ Test <nl> + public void inMemoryRealm ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> Dog dog = testRealm . createObject ( Dog . class ) ; <nl> dog . setName ( " DinoDog " ) ; <nl> @ @ - 82 , 19 + 89 , 18 @ @ public class RealmInMemoryTest extends AndroidTestCase { <nl> / / in - mem - realm with same identifier should create a fresh new instance . <nl> testRealm = Realm . getInstance ( inMemConf ) ; <nl> assertEquals ( testRealm . where ( Dog . class ) . count ( ) , 0 ) ; <nl> - <nl> - StrictMode . enableDefaults ( ) ; <nl> } <nl> <nl> / / Two in - memory Realms with different names should not affect each other . <nl> - public void testInMemoryRealmWithDifferentNames ( ) { <nl> + @ Test <nl> + public void inMemoryRealmWithDifferentNames ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> Dog dog = testRealm . createObject ( Dog . class ) ; <nl> dog . setName ( " DinoDog " ) ; <nl> testRealm . commitTransaction ( ) ; <nl> <nl> / / Create the 2nd in - memory Realm with a different name . To make sure they are not affecting each other . <nl> - RealmConfiguration inMemConf2 = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + RealmConfiguration inMemConf2 = configFactory . createConfigurationBuilder ( ) <nl> . name ( IDENTIFIER + " 2 " ) <nl> . inMemory ( ) <nl> . build ( ) ; <nl> @ @ - 105 , 15 + 111 , 18 @ @ public class RealmInMemoryTest extends AndroidTestCase { <nl> testRealm2 . commitTransaction ( ) ; <nl> <nl> assertEquals ( testRealm . where ( Dog . class ) . count ( ) , 1 ) ; <nl> + / / noinspection ConstantConditions <nl> assertEquals ( testRealm . where ( Dog . class ) . findFirst ( ) . getName ( ) , " DinoDog " ) ; <nl> assertEquals ( testRealm2 . where ( Dog . class ) . count ( ) , 1 ) ; <nl> + / / noinspection ConstantConditions <nl> assertEquals ( testRealm2 . where ( Dog . class ) . findFirst ( ) . getName ( ) , " UFODog " ) ; <nl> <nl> testRealm2 . close ( ) ; <nl> } <nl> <nl> / / Test deleteRealm called on a in - memory Realm instance <nl> - public void testDelete ( ) { <nl> + @ Test <nl> + public void delete ( ) { <nl> RealmConfiguration configuration = testRealm . getConfiguration ( ) ; <nl> try { <nl> Realm . deleteRealm ( configuration ) ; <nl> @ @ - 128 , 14 + 137 , 15 @ @ public class RealmInMemoryTest extends AndroidTestCase { <nl> } <nl> <nl> / / Test if an in - memory Realm can be written to disk with / without encryption <nl> - public void testWriteCopyTo ( ) { <nl> + @ Test <nl> + public void writeCopyTo ( ) { <nl> byte [ ] key = TestHelper . getRandomKey ( ) ; <nl> String fileName = IDENTIFIER + " . realm " ; <nl> String encFileName = IDENTIFIER + " . enc . realm " ; <nl> - RealmConfiguration conf = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + RealmConfiguration conf = configFactory . createConfigurationBuilder ( ) <nl> . name ( fileName ) <nl> . build ( ) ; <nl> - RealmConfiguration encConf = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + RealmConfiguration encConf = configFactory . createConfigurationBuilder ( ) <nl> . name ( encFileName ) <nl> . encryptionKey ( key ) <nl> . build ( ) ; <nl> @ @ - 149 , 19 + 159 , 19 @ @ public class RealmInMemoryTest extends AndroidTestCase { <nl> testRealm . commitTransaction ( ) ; <nl> <nl> / / Test a normal Realm file <nl> - testRealm . writeCopyTo ( new File ( getContext ( ) . getFilesDir ( ) , fileName ) ) ; <nl> + testRealm . writeCopyTo ( new File ( configFactory . getRoot ( ) , fileName ) ) ; <nl> Realm onDiskRealm = Realm . getInstance ( conf ) ; <nl> assertEquals ( onDiskRealm . where ( Dog . class ) . count ( ) , 1 ) ; <nl> onDiskRealm . close ( ) ; <nl> <nl> / / Test a encrypted Realm file <nl> - testRealm . writeEncryptedCopyTo ( new File ( getContext ( ) . getFilesDir ( ) , encFileName ) , key ) ; <nl> + testRealm . writeEncryptedCopyTo ( new File ( configFactory . getRoot ( ) , encFileName ) , key ) ; <nl> onDiskRealm = Realm . getInstance ( encConf ) ; <nl> assertEquals ( onDiskRealm . where ( Dog . class ) . count ( ) , 1 ) ; <nl> onDiskRealm . close ( ) ; <nl> / / Test with a wrong key to see if it fails as expected . <nl> try { <nl> - RealmConfiguration wrongKeyConf = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + RealmConfiguration wrongKeyConf = configFactory . createConfigurationBuilder ( ) <nl> . name ( encFileName ) <nl> . encryptionKey ( TestHelper . getRandomKey ( 42 ) ) <nl> . build ( ) ; <nl> @ @ - 179 , 7 + 189 , 8 @ @ public class RealmInMemoryTest extends AndroidTestCase { <nl> / / another instance is still held by the other thread . <nl> / / 4 . Close the in - memory Realm instance and the Realm data should be released since no more instance with the <nl> / / specific name exists . <nl> - public void testMultiThread ( ) throws InterruptedException , ExecutionException { <nl> + @ Test <nl> + public void multiThread ( ) throws InterruptedException , ExecutionException { <nl> final CountDownLatch workerCommittedLatch = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch workerClosedLatch = new CountDownLatch ( 1 ) ; <nl> final CountDownLatch realmInMainClosedLatch = new CountDownLatch ( 1 ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> index 1079902 . . 106aa84 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> @ @ - 18 , 8 + 18 , 24 @ @ package io . realm ; <nl> <nl> import android . test . AndroidTestCase ; <nl> <nl> + import java . io . File ; <nl> + import java . util . Random ; <nl> + <nl> + import io . realm . entities . AllTypesPrimaryKey ; <nl> + import io . realm . entities . Dog ; <nl> + import io . realm . entities . Owner ; <nl> + import io . realm . exceptions . RealmMigrationNeededException ; <nl> + <nl> public class RealmConfigurationTest extends AndroidTestCase { <nl> <nl> + RealmConfiguration defaultConfig ; <nl> + @ Override <nl> + protected void setUp ( ) throws Exception { <nl> + super . setUp ( ) ; <nl> + defaultConfig = new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ; <nl> + Realm . deleteRealmFile ( defaultConfig ) ; <nl> + } <nl> + <nl> public void testSetNullDefaultConfigurationThrows ( ) { <nl> try { <nl> Realm . setDefaultConfiguration ( null ) ; <nl> @ @ - 28 , 4 + 44 , 198 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> } <nl> fail ( ) ; <nl> } <nl> + <nl> + public void testGetNullDefaultInstanceThrows ( ) { <nl> + try { <nl> + Realm . getDefaultInstance ( ) ; <nl> + } catch ( NullPointerException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testGetNullInstance ( ) { <nl> + try { <nl> + Realm . getInstance ( ( RealmConfiguration ) null ) ; <nl> + } catch ( NullPointerException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNullDirThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( ( File ) null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNullNameThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . name ( null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testEmptyNameThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . name ( " " ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNullKeyThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testWrongKeyLengthThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( new byte [ 63 ] ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNegativeVersionThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . version ( - 1 ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testVersionLessThanDiscVersionThrows ( ) { <nl> + Realm . deleteRealmFile ( new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ) ; <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 42 ) . create ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + try { <nl> + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 1 ) . create ( ) ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testVersionEqualWhenSchemaChangesThrows ( ) { <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . version ( 42 ) <nl> + . schema ( Dog . class ) <nl> + . create ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + try { <nl> + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . version ( 42 ) <nl> + . schema ( AllTypesPrimaryKey . class ) <nl> + . create ( ) ) ; <nl> + } catch ( RealmMigrationNeededException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testCustomSchemaAlsoIncludeLinkedClasses ( ) { <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . schema ( Dog . class ) <nl> + . create ( ) ) ; <nl> + assertEquals ( 3 , realm . getTable ( Owner . class ) . getColumnCount ( ) ) ; <nl> + assertEquals ( 7 , realm . getTable ( Dog . class ) . getColumnCount ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testNullMigrationThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . migration ( null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testSetDefaultConfiguration ( ) { <nl> + Realm . setDefaultConfiguration ( defaultConfig ) ; <nl> + Realm realm = Realm . getDefaultInstance ( ) ; <nl> + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testGetInstance ( ) { <nl> + Realm realm = Realm . getInstance ( defaultConfig ) ; <nl> + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testStandardSetup ( ) { <nl> + byte [ ] key = new byte [ 64 ] ; <nl> + new Random ( ) . nextBytes ( key ) ; <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . name ( " foo . realm " ) <nl> + . encryptionKey ( key ) <nl> + . version ( 42 ) <nl> + . migration ( new RealmMigration ( ) { <nl> + @ Override <nl> + public long execute ( Realm realm , long version ) { <nl> + return 0 ; / / no - op <nl> + } <nl> + } ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . deleteRealmIfMigrationNeeded ( ) <nl> + . create ( ) ) ; <nl> + assertTrue ( realm . getPath ( ) . endsWith ( " foo . realm " ) ) ; <nl> + assertEquals ( 42 , realm . getVersion ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testDeleteRealmIfMigration ( ) { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . schema ( Dog . class ) <nl> + . version ( 0 ) <nl> + . create ( ) ; <nl> + Realm . deleteRealmFile ( config ) ; <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . copyToRealm ( new Dog ( " Foo " ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . schema ( Owner . class , Dog . class ) <nl> + . version ( 1 ) <nl> + . deleteRealmIfMigrationNeeded ( ) <nl> + . create ( ) ) ; <nl> + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testDeleteRealmBeforeOpening ( ) { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) . deleteRealmBeforeOpening ( ) . create ( ) ; <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . copyToRealm ( new Dog ( " Foo " ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + realm = Realm . getInstance ( config ) ; <nl> + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 18376c2 . . 59a4ad3 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 232 , 7 + 232 , 9 @ @ public final class Realm implements Closeable { <nl> sharedGroup . close ( ) ; <nl> sharedGroup = null ; <nl> AtomicInteger counter = openRealms . get ( id ) ; <nl> - counter . decrementAndGet ( ) ; <nl> + if ( counter . decrementAndGet ( ) = = 0 ) { <nl> + openRealms . remove ( id ) ; <nl> + } ; <nl> } <nl> <nl> int refCount = references - 1 ; <nl> @ @ - 399 , 11 + 401 , 11 @ @ public final class Realm implements Closeable { <nl> @ Deprecated <nl> @ SuppressWarnings ( " UnusedDeclaration " ) <nl> public static Realm getInstance ( Context context , String fileName , byte [ ] key ) { <nl> - return create ( new RealmConfiguration . Builder ( context ) <nl> - . name ( fileName ) <nl> - . encryptionKey ( key ) <nl> - . create ( ) <nl> - ) ; <nl> + RealmConfiguration . Builder builder = new RealmConfiguration . Builder ( context ) . name ( fileName ) ; <nl> + if ( key ! = null ) { <nl> + builder . encryptionKey ( key ) ; <nl> + } <nl> + return create ( builder . create ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 571 , 7 + 573 , 7 @ @ public final class Realm implements Closeable { <nl> if ( references = = 0 ) { <nl> AtomicInteger counter = openRealms . get ( id ) ; <nl> if ( counter = = null ) { <nl> - if ( config . isDeleteRealmBeforeOpening ( ) ) { <nl> + if ( config . shouldDeleteRealmBeforeOpening ( ) ) { <nl> deleteRealmFile ( config ) ; <nl> } <nl> openRealms . put ( id , new AtomicInteger ( 1 ) ) ; <nl> @ @ - 598 , 6 + 600 , 18 @ @ public final class Realm implements Closeable { <nl> realmsCache . set ( realms ) ; <nl> localRefCount . put ( id , references + 1 ) ; <nl> <nl> + / / Check versions of Realm <nl> + long currentVersion = realm . getVersion ( ) ; <nl> + long requiredVersion = config . getVersion ( ) ; <nl> + if ( currentVersion ! = UNVERSIONED & & currentVersion < requiredVersion ) { <nl> + realm . close ( ) ; <nl> + throw new RealmMigrationNeededException ( String . format ( " Realm on disc need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; <nl> + } <nl> + if ( currentVersion ! = UNVERSIONED & & requiredVersion < currentVersion ) { <nl> + realm . close ( ) ; <nl> + throw new IllegalArgumentException ( String . format ( " Realm on disc is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; <nl> + } <nl> + <nl> if ( validateSchema ) { <nl> try { <nl> initializeRealm ( realm , config ) ; <nl> @ @ - 647 , 14 + 661 , 15 @ @ public final class Realm implements Closeable { <nl> try { <nl> realm . beginTransaction ( ) ; <nl> if ( version = = UNVERSIONED ) { <nl> - realm . setVersion ( 0 ) ; <nl> commitNeeded = true ; <nl> + realm . setVersion ( config . getVersion ( ) ) ; <nl> } <nl> - <nl> for ( String className : proxyClasses ) { <nl> String [ ] splitted = className . split ( " \ \ . " ) ; <nl> String modelClassName = splitted [ splitted . length - 1 ] ; <nl> String generatedClassName = getProxyClassName ( modelClassName ) ; <nl> + <nl> + / / Verify that there is a proxy class for each supported model class <nl> Class < ? > generatedClass ; <nl> try { <nl> generatedClass = Class . forName ( generatedClassName ) ; <nl> @ @ - 727 , 7 + 742 , 6 @ @ public final class Realm implements Closeable { <nl> } <nl> } finally { <nl> if ( commitNeeded ) { <nl> - realm . setVersion ( config . getVersion ( ) ) ; <nl> realm . commitTransaction ( ) ; <nl> } else { <nl> realm . cancelTransaction ( ) ; <nl> @ @ - 1391 , 7 + 1405 , 7 @ @ public final class Realm implements Closeable { <nl> public < E extends RealmObject > RealmResults < E > allObjectsSorted ( Class < E > clazz , String fieldName1 , <nl> boolean sortAscending1 , String fieldName2 , <nl> boolean sortAscending2 ) { <nl> - return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , <nl> + return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , <nl> sortAscending2 } ) ; <nl> } <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> index 5c9d235 . . 1417c13 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class RealmConfiguration { <nl> return deleteRealmIfMigrationNeeded ; <nl> } <nl> <nl> - public boolean isDeleteRealmBeforeOpening ( ) { <nl> + public boolean shouldDeleteRealmBeforeOpening ( ) { <nl> return deleteRealmBeforeOpening ; <nl> } <nl> <nl> @ @ - 133 , 7 + 133 , 7 @ @ public class RealmConfiguration { <nl> * / <nl> public Builder ( Context context ) { <nl> if ( context = = null ) { <nl> - throw new NullPointerException ( " A non - null Context must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null Context must be provided " ) ; <nl> } <nl> this . folder = context . getFilesDir ( ) ; <nl> } <nl> @ @ - 155 , 7 + 155 , 7 @ @ public class RealmConfiguration { <nl> * / <nl> public Builder encryptionKey ( byte [ ] key ) { <nl> if ( key = = null ) { <nl> - throw new NullPointerException ( " A non - null key must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null key must be provided " ) ; <nl> } <nl> if ( key . length ! = 64 ) { <nl> throw new IllegalArgumentException ( " The provided key must be 64 bytes . Yours was : " + key . length ) ; <nl> @ @ - 177 , 7 + 177 , 7 @ @ public class RealmConfiguration { <nl> * <nl> * @ see # migration ( RealmMigration ) <nl> * / <nl> - public Builder setVersion ( int version ) { <nl> + public Builder version ( int version ) { <nl> if ( version < 0 ) { <nl> throw new IllegalArgumentException ( " Realm version numbers must be 0 ( zero ) or higher . Yours was : " + version ) ; <nl> } <nl> @ @ - 192 , 7 + 192 , 7 @ @ public class RealmConfiguration { <nl> * / <nl> public Builder migration ( RealmMigration migration ) { <nl> if ( migration = = null ) { <nl> - throw new NullPointerException ( " A non - null migration must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null migration must be provided " ) ; <nl> } <nl> this . migration = migration ; <nl> return this ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmInMemoryTest . java b / realm / realm - library / src / androidTest / java / io / realm / RealmInMemoryTest . java 
 index c1a572e . . b273290 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmInMemoryTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmInMemoryTest . java 
 @ @ - 16 , 33 + 16 , 46 @ @ 
 
 package io . realm ; 
 
 - import android . os . StrictMode ; 
 - import android . test . AndroidTestCase ; 
 + import android . support . test . runner . AndroidJUnit4 ; 
 
 import junit . framework . AssertionFailedError ; 
 
 + import org . junit . After ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 import java . io . File ; 
 - import java . io . IOException ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . TimeUnit ; 
 
 import io . realm . entities . Dog ; 
 import io . realm . exceptions . RealmFileException ; 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 + 
 + import static junit . framework . Assert . assertTrue ; 
 + import static junit . framework . Assert . assertEquals ; 
 + import static junit . framework . Assert . fail ; 
 + 
 + @ RunWith ( AndroidJUnit4 . class ) 
 + public class RealmInMemoryTest { 
 
 - public class RealmInMemoryTest extends AndroidTestCase { 
 + @ Rule 
 + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 
 private final static String IDENTIFIER = " InMemRealmTest " ; 
 
 private Realm testRealm ; 
 private RealmConfiguration inMemConf ; 
 
 - @ Override 
 - protected void setUp ( ) throws Exception { 
 - RealmConfiguration onDiskConf = new RealmConfiguration . Builder ( getContext ( ) ) 
 + @ Before 
 + public void setUp ( ) { 
 + RealmConfiguration onDiskConf = configFactory . createConfigurationBuilder ( ) 
 . name ( IDENTIFIER ) 
 . build ( ) ; 
 - inMemConf = new RealmConfiguration . Builder ( getContext ( ) ) 
 + inMemConf = configFactory . createConfigurationBuilder ( ) 
 . name ( IDENTIFIER ) 
 . inMemory ( ) 
 . build ( ) ; 
 @ @ - 52 , 8 + 65 , 8 @ @ public class RealmInMemoryTest extends AndroidTestCase { 
 testRealm = Realm . getInstance ( inMemConf ) ; 
 } 
 
 - @ Override 
 - protected void tearDown ( ) throws Exception { 
 + @ After 
 + public void tearDown ( ) { 
 if ( testRealm ! = null ) { 
 testRealm . close ( ) ; 
 } 
 @ @ - 61 , 14 + 74 , 8 @ @ public class RealmInMemoryTest extends AndroidTestCase { 
 
 / / Testing the in - memory Realm by Creating one instance , adding a record , then close the instance . 
 / / By the next time in - memory Realm instance with the same name created , it should be empty . 
 - / / Use StrictMode to check no disk IO would happen in VM to this thread . 
 - public void testInMemoryRealm ( ) { 
 - StrictMode . setThreadPolicy ( new StrictMode . ThreadPolicy . Builder ( ) 
 - . detectDiskReads ( ) 
 - . detectDiskWrites ( ) 
 - . penaltyDeath ( ) 
 - . build ( ) ) ; 
 - 
 + @ Test 
 + public void inMemoryRealm ( ) { 
 testRealm . beginTransaction ( ) ; 
 Dog dog = testRealm . createObject ( Dog . class ) ; 
 dog . setName ( " DinoDog " ) ; 
 @ @ - 82 , 19 + 89 , 18 @ @ public class RealmInMemoryTest extends AndroidTestCase { 
 / / in - mem - realm with same identifier should create a fresh new instance . 
 testRealm = Realm . getInstance ( inMemConf ) ; 
 assertEquals ( testRealm . where ( Dog . class ) . count ( ) , 0 ) ; 
 - 
 - StrictMode . enableDefaults ( ) ; 
 } 
 
 / / Two in - memory Realms with different names should not affect each other . 
 - public void testInMemoryRealmWithDifferentNames ( ) { 
 + @ Test 
 + public void inMemoryRealmWithDifferentNames ( ) { 
 testRealm . beginTransaction ( ) ; 
 Dog dog = testRealm . createObject ( Dog . class ) ; 
 dog . setName ( " DinoDog " ) ; 
 testRealm . commitTransaction ( ) ; 
 
 / / Create the 2nd in - memory Realm with a different name . To make sure they are not affecting each other . 
 - RealmConfiguration inMemConf2 = new RealmConfiguration . Builder ( getContext ( ) ) 
 + RealmConfiguration inMemConf2 = configFactory . createConfigurationBuilder ( ) 
 . name ( IDENTIFIER + " 2 " ) 
 . inMemory ( ) 
 . build ( ) ; 
 @ @ - 105 , 15 + 111 , 18 @ @ public class RealmInMemoryTest extends AndroidTestCase { 
 testRealm2 . commitTransaction ( ) ; 
 
 assertEquals ( testRealm . where ( Dog . class ) . count ( ) , 1 ) ; 
 + / / noinspection ConstantConditions 
 assertEquals ( testRealm . where ( Dog . class ) . findFirst ( ) . getName ( ) , " DinoDog " ) ; 
 assertEquals ( testRealm2 . where ( Dog . class ) . count ( ) , 1 ) ; 
 + / / noinspection ConstantConditions 
 assertEquals ( testRealm2 . where ( Dog . class ) . findFirst ( ) . getName ( ) , " UFODog " ) ; 
 
 testRealm2 . close ( ) ; 
 } 
 
 / / Test deleteRealm called on a in - memory Realm instance 
 - public void testDelete ( ) { 
 + @ Test 
 + public void delete ( ) { 
 RealmConfiguration configuration = testRealm . getConfiguration ( ) ; 
 try { 
 Realm . deleteRealm ( configuration ) ; 
 @ @ - 128 , 14 + 137 , 15 @ @ public class RealmInMemoryTest extends AndroidTestCase { 
 } 
 
 / / Test if an in - memory Realm can be written to disk with / without encryption 
 - public void testWriteCopyTo ( ) { 
 + @ Test 
 + public void writeCopyTo ( ) { 
 byte [ ] key = TestHelper . getRandomKey ( ) ; 
 String fileName = IDENTIFIER + " . realm " ; 
 String encFileName = IDENTIFIER + " . enc . realm " ; 
 - RealmConfiguration conf = new RealmConfiguration . Builder ( getContext ( ) ) 
 + RealmConfiguration conf = configFactory . createConfigurationBuilder ( ) 
 . name ( fileName ) 
 . build ( ) ; 
 - RealmConfiguration encConf = new RealmConfiguration . Builder ( getContext ( ) ) 
 + RealmConfiguration encConf = configFactory . createConfigurationBuilder ( ) 
 . name ( encFileName ) 
 . encryptionKey ( key ) 
 . build ( ) ; 
 @ @ - 149 , 19 + 159 , 19 @ @ public class RealmInMemoryTest extends AndroidTestCase { 
 testRealm . commitTransaction ( ) ; 
 
 / / Test a normal Realm file 
 - testRealm . writeCopyTo ( new File ( getContext ( ) . getFilesDir ( ) , fileName ) ) ; 
 + testRealm . writeCopyTo ( new File ( configFactory . getRoot ( ) , fileName ) ) ; 
 Realm onDiskRealm = Realm . getInstance ( conf ) ; 
 assertEquals ( onDiskRealm . where ( Dog . class ) . count ( ) , 1 ) ; 
 onDiskRealm . close ( ) ; 
 
 / / Test a encrypted Realm file 
 - testRealm . writeEncryptedCopyTo ( new File ( getContext ( ) . getFilesDir ( ) , encFileName ) , key ) ; 
 + testRealm . writeEncryptedCopyTo ( new File ( configFactory . getRoot ( ) , encFileName ) , key ) ; 
 onDiskRealm = Realm . getInstance ( encConf ) ; 
 assertEquals ( onDiskRealm . where ( Dog . class ) . count ( ) , 1 ) ; 
 onDiskRealm . close ( ) ; 
 / / Test with a wrong key to see if it fails as expected . 
 try { 
 - RealmConfiguration wrongKeyConf = new RealmConfiguration . Builder ( getContext ( ) ) 
 + RealmConfiguration wrongKeyConf = configFactory . createConfigurationBuilder ( ) 
 . name ( encFileName ) 
 . encryptionKey ( TestHelper . getRandomKey ( 42 ) ) 
 . build ( ) ; 
 @ @ - 179 , 7 + 189 , 8 @ @ public class RealmInMemoryTest extends AndroidTestCase { 
 / / another instance is still held by the other thread . 
 / / 4 . Close the in - memory Realm instance and the Realm data should be released since no more instance with the 
 / / specific name exists . 
 - public void testMultiThread ( ) throws InterruptedException , ExecutionException { 
 + @ Test 
 + public void multiThread ( ) throws InterruptedException , ExecutionException { 
 final CountDownLatch workerCommittedLatch = new CountDownLatch ( 1 ) ; 
 final CountDownLatch workerClosedLatch = new CountDownLatch ( 1 ) ; 
 final CountDownLatch realmInMainClosedLatch = new CountDownLatch ( 1 ) ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 index 1079902 . . 106aa84 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 @ @ - 18 , 8 + 18 , 24 @ @ package io . realm ; 
 
 import android . test . AndroidTestCase ; 
 
 + import java . io . File ; 
 + import java . util . Random ; 
 + 
 + import io . realm . entities . AllTypesPrimaryKey ; 
 + import io . realm . entities . Dog ; 
 + import io . realm . entities . Owner ; 
 + import io . realm . exceptions . RealmMigrationNeededException ; 
 + 
 public class RealmConfigurationTest extends AndroidTestCase { 
 
 + RealmConfiguration defaultConfig ; 
 + @ Override 
 + protected void setUp ( ) throws Exception { 
 + super . setUp ( ) ; 
 + defaultConfig = new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ; 
 + Realm . deleteRealmFile ( defaultConfig ) ; 
 + } 
 + 
 public void testSetNullDefaultConfigurationThrows ( ) { 
 try { 
 Realm . setDefaultConfiguration ( null ) ; 
 @ @ - 28 , 4 + 44 , 198 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 } 
 fail ( ) ; 
 } 
 + 
 + public void testGetNullDefaultInstanceThrows ( ) { 
 + try { 
 + Realm . getDefaultInstance ( ) ; 
 + } catch ( NullPointerException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testGetNullInstance ( ) { 
 + try { 
 + Realm . getInstance ( ( RealmConfiguration ) null ) ; 
 + } catch ( NullPointerException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNullDirThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( ( File ) null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNullNameThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . name ( null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testEmptyNameThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . name ( " " ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNullKeyThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testWrongKeyLengthThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( new byte [ 63 ] ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNegativeVersionThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . version ( - 1 ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testVersionLessThanDiscVersionThrows ( ) { 
 + Realm . deleteRealmFile ( new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ) ; 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 42 ) . create ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + try { 
 + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 1 ) . create ( ) ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testVersionEqualWhenSchemaChangesThrows ( ) { 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . deleteRealmBeforeOpening ( ) 
 + . version ( 42 ) 
 + . schema ( Dog . class ) 
 + . create ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + try { 
 + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . version ( 42 ) 
 + . schema ( AllTypesPrimaryKey . class ) 
 + . create ( ) ) ; 
 + } catch ( RealmMigrationNeededException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testCustomSchemaAlsoIncludeLinkedClasses ( ) { 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . deleteRealmBeforeOpening ( ) 
 + . schema ( Dog . class ) 
 + . create ( ) ) ; 
 + assertEquals ( 3 , realm . getTable ( Owner . class ) . getColumnCount ( ) ) ; 
 + assertEquals ( 7 , realm . getTable ( Dog . class ) . getColumnCount ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testNullMigrationThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . migration ( null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testSetDefaultConfiguration ( ) { 
 + Realm . setDefaultConfiguration ( defaultConfig ) ; 
 + Realm realm = Realm . getDefaultInstance ( ) ; 
 + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testGetInstance ( ) { 
 + Realm realm = Realm . getInstance ( defaultConfig ) ; 
 + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testStandardSetup ( ) { 
 + byte [ ] key = new byte [ 64 ] ; 
 + new Random ( ) . nextBytes ( key ) ; 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . name ( " foo . realm " ) 
 + . encryptionKey ( key ) 
 + . version ( 42 ) 
 + . migration ( new RealmMigration ( ) { 
 + @ Override 
 + public long execute ( Realm realm , long version ) { 
 + return 0 ; / / no - op 
 + } 
 + } ) 
 + . deleteRealmBeforeOpening ( ) 
 + . deleteRealmIfMigrationNeeded ( ) 
 + . create ( ) ) ; 
 + assertTrue ( realm . getPath ( ) . endsWith ( " foo . realm " ) ) ; 
 + assertEquals ( 42 , realm . getVersion ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testDeleteRealmIfMigration ( ) { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) 
 + . deleteRealmBeforeOpening ( ) 
 + . schema ( Dog . class ) 
 + . version ( 0 ) 
 + . create ( ) ; 
 + Realm . deleteRealmFile ( config ) ; 
 + Realm realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . copyToRealm ( new Dog ( " Foo " ) ) ; 
 + realm . commitTransaction ( ) ; 
 + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . schema ( Owner . class , Dog . class ) 
 + . version ( 1 ) 
 + . deleteRealmIfMigrationNeeded ( ) 
 + . create ( ) ) ; 
 + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testDeleteRealmBeforeOpening ( ) { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) . deleteRealmBeforeOpening ( ) . create ( ) ; 
 + Realm realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . copyToRealm ( new Dog ( " Foo " ) ) ; 
 + realm . commitTransaction ( ) ; 
 + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + realm = Realm . getInstance ( config ) ; 
 + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 18376c2 . . 59a4ad3 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 232 , 7 + 232 , 9 @ @ public final class Realm implements Closeable { 
 sharedGroup . close ( ) ; 
 sharedGroup = null ; 
 AtomicInteger counter = openRealms . get ( id ) ; 
 - counter . decrementAndGet ( ) ; 
 + if ( counter . decrementAndGet ( ) = = 0 ) { 
 + openRealms . remove ( id ) ; 
 + } ; 
 } 
 
 int refCount = references - 1 ; 
 @ @ - 399 , 11 + 401 , 11 @ @ public final class Realm implements Closeable { 
 @ Deprecated 
 @ SuppressWarnings ( " UnusedDeclaration " ) 
 public static Realm getInstance ( Context context , String fileName , byte [ ] key ) { 
 - return create ( new RealmConfiguration . Builder ( context ) 
 - . name ( fileName ) 
 - . encryptionKey ( key ) 
 - . create ( ) 
 - ) ; 
 + RealmConfiguration . Builder builder = new RealmConfiguration . Builder ( context ) . name ( fileName ) ; 
 + if ( key ! = null ) { 
 + builder . encryptionKey ( key ) ; 
 + } 
 + return create ( builder . create ( ) ) ; 
 } 
 
 / * * 
 @ @ - 571 , 7 + 573 , 7 @ @ public final class Realm implements Closeable { 
 if ( references = = 0 ) { 
 AtomicInteger counter = openRealms . get ( id ) ; 
 if ( counter = = null ) { 
 - if ( config . isDeleteRealmBeforeOpening ( ) ) { 
 + if ( config . shouldDeleteRealmBeforeOpening ( ) ) { 
 deleteRealmFile ( config ) ; 
 } 
 openRealms . put ( id , new AtomicInteger ( 1 ) ) ; 
 @ @ - 598 , 6 + 600 , 18 @ @ public final class Realm implements Closeable { 
 realmsCache . set ( realms ) ; 
 localRefCount . put ( id , references + 1 ) ; 
 
 + / / Check versions of Realm 
 + long currentVersion = realm . getVersion ( ) ; 
 + long requiredVersion = config . getVersion ( ) ; 
 + if ( currentVersion ! = UNVERSIONED & & currentVersion < requiredVersion ) { 
 + realm . close ( ) ; 
 + throw new RealmMigrationNeededException ( String . format ( " Realm on disc need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; 
 + } 
 + if ( currentVersion ! = UNVERSIONED & & requiredVersion < currentVersion ) { 
 + realm . close ( ) ; 
 + throw new IllegalArgumentException ( String . format ( " Realm on disc is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; 
 + } 
 + 
 if ( validateSchema ) { 
 try { 
 initializeRealm ( realm , config ) ; 
 @ @ - 647 , 14 + 661 , 15 @ @ public final class Realm implements Closeable { 
 try { 
 realm . beginTransaction ( ) ; 
 if ( version = = UNVERSIONED ) { 
 - realm . setVersion ( 0 ) ; 
 commitNeeded = true ; 
 + realm . setVersion ( config . getVersion ( ) ) ; 
 } 
 - 
 for ( String className : proxyClasses ) { 
 String [ ] splitted = className . split ( " \ \ . " ) ; 
 String modelClassName = splitted [ splitted . length - 1 ] ; 
 String generatedClassName = getProxyClassName ( modelClassName ) ; 
 + 
 + / / Verify that there is a proxy class for each supported model class 
 Class < ? > generatedClass ; 
 try { 
 generatedClass = Class . forName ( generatedClassName ) ; 
 @ @ - 727 , 7 + 742 , 6 @ @ public final class Realm implements Closeable { 
 } 
 } finally { 
 if ( commitNeeded ) { 
 - realm . setVersion ( config . getVersion ( ) ) ; 
 realm . commitTransaction ( ) ; 
 } else { 
 realm . cancelTransaction ( ) ; 
 @ @ - 1391 , 7 + 1405 , 7 @ @ public final class Realm implements Closeable { 
 public < E extends RealmObject > RealmResults < E > allObjectsSorted ( Class < E > clazz , String fieldName1 , 
 boolean sortAscending1 , String fieldName2 , 
 boolean sortAscending2 ) { 
 - return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , 
 + return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , 
 sortAscending2 } ) ; 
 } 
 
 diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java 
 index 5c9d235 . . 1417c13 100644 
 - - - a / realm / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class RealmConfiguration { 
 return deleteRealmIfMigrationNeeded ; 
 } 
 
 - public boolean isDeleteRealmBeforeOpening ( ) { 
 + public boolean shouldDeleteRealmBeforeOpening ( ) { 
 return deleteRealmBeforeOpening ; 
 } 
 
 @ @ - 133 , 7 + 133 , 7 @ @ public class RealmConfiguration { 
 * / 
 public Builder ( Context context ) { 
 if ( context = = null ) { 
 - throw new NullPointerException ( " A non - null Context must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null Context must be provided " ) ; 
 } 
 this . folder = context . getFilesDir ( ) ; 
 } 
 @ @ - 155 , 7 + 155 , 7 @ @ public class RealmConfiguration { 
 * / 
 public Builder encryptionKey ( byte [ ] key ) { 
 if ( key = = null ) { 
 - throw new NullPointerException ( " A non - null key must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null key must be provided " ) ; 
 } 
 if ( key . length ! = 64 ) { 
 throw new IllegalArgumentException ( " The provided key must be 64 bytes . Yours was : " + key . length ) ; 
 @ @ - 177 , 7 + 177 , 7 @ @ public class RealmConfiguration { 
 * 
 * @ see # migration ( RealmMigration ) 
 * / 
 - public Builder setVersion ( int version ) { 
 + public Builder version ( int version ) { 
 if ( version < 0 ) { 
 throw new IllegalArgumentException ( " Realm version numbers must be 0 ( zero ) or higher . Yours was : " + version ) ; 
 } 
 @ @ - 192 , 7 + 192 , 7 @ @ public class RealmConfiguration { 
 * / 
 public Builder migration ( RealmMigration migration ) { 
 if ( migration = = null ) { 
 - throw new NullPointerException ( " A non - null migration must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null migration must be provided " ) ; 
 } 
 this . migration = migration ; 
 return this ;
