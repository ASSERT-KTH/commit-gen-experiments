BLEU SCORE: 0.10682175159905853

TEST MSG: Add tests for row notifications
GENERATED MSG: Enable more tests

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> index 1f7a493 . . e162fbd 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class CollectionTests { <nl> @ Rule <nl> public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; <nl> <nl> - RealmConfiguration config ; <nl> + private RealmConfiguration config ; <nl> private SharedRealm sharedRealm ; <nl> private Table table ; <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / RowNotifierTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / RowNotifierTests . java <nl> new file mode 100644 <nl> index 0000000 . . fc93fc0 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / RowNotifierTests . java <nl> @ @ - 0 , 0 + 1 , 160 @ @ <nl> + / * <nl> + * Copyright 2016 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . internal ; <nl> + <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> + <nl> + import org . junit . After ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import org . junit . rules . ExpectedException ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import java . util . concurrent . CountDownLatch ; <nl> + <nl> + import io . realm . RealmChangeListener ; <nl> + import io . realm . RealmConfiguration ; <nl> + import io . realm . RealmFieldType ; <nl> + import io . realm . TestHelper ; <nl> + import io . realm . internal . android . AndroidRealmNotifier ; <nl> + import io . realm . rule . RunInLooperThread ; <nl> + import io . realm . rule . RunTestInLooperThread ; <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> + <nl> + import static junit . framework . Assert . assertEquals ; <nl> + <nl> + @ RunWith ( AndroidJUnit4 . class ) <nl> + public class RowNotifierTests { <nl> + @ Rule <nl> + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> + @ Rule <nl> + public final ExpectedException thrown = ExpectedException . none ( ) ; <nl> + @ Rule <nl> + public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; <nl> + <nl> + private RealmConfiguration config ; <nl> + private SharedRealm sharedRealm ; <nl> + private Table table ; <nl> + private final static String TABLE _ NAME = " test _ table " ; <nl> + private final static long STRING _ COLUMN _ INDEX = 0 ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) { <nl> + config = configFactory . createConfiguration ( ) ; <nl> + sharedRealm = getSharedRealm ( ) ; <nl> + populateData ( ) ; <nl> + } <nl> + <nl> + @ After <nl> + public void tearDown ( ) { <nl> + sharedRealm . close ( ) ; <nl> + } <nl> + <nl> + private SharedRealm getSharedRealm ( ) { <nl> + return SharedRealm . getInstance ( config , new AndroidRealmNotifier ( ) , null ) ; <nl> + } <nl> + <nl> + private void populateData ( ) { <nl> + sharedRealm . beginTransaction ( ) ; <nl> + table = sharedRealm . getTable ( TABLE _ NAME ) ; <nl> + / / Specify the column types and names <nl> + assertEquals ( STRING _ COLUMN _ INDEX , table . addColumn ( RealmFieldType . STRING , " string " ) ) ; <nl> + table . addEmptyRow ( ) ; <nl> + sharedRealm . commitTransaction ( ) ; <nl> + } <nl> + <nl> + private void changeRowAsync ( ) { <nl> + final CountDownLatch latch = new CountDownLatch ( 1 ) ; <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> + changeRow ( sharedRealm ) ; <nl> + sharedRealm . close ( ) ; <nl> + latch . countDown ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + TestHelper . awaitOrFail ( latch ) ; <nl> + } <nl> + <nl> + private void changeRow ( SharedRealm sharedRealm ) { <nl> + sharedRealm . beginTransaction ( ) ; <nl> + table = sharedRealm . getTable ( TABLE _ NAME ) ; <nl> + UncheckedRow row = table . getUncheckedRow ( 0 ) ; <nl> + row . setString ( STRING _ COLUMN _ INDEX , " changed " ) ; <nl> + sharedRealm . commitTransaction ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void listener _ triggeredByRemoteCommit ( ) { <nl> + SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> + Table table = sharedRealm . getTable ( TABLE _ NAME ) ; <nl> + UncheckedRow row = table . getUncheckedRow ( 0 ) ; <nl> + looperThread . keepStrongReference . add ( row ) ; <nl> + sharedRealm . rowNotifier . registerListener ( row , row , new RealmChangeListener < UncheckedRow > ( ) { <nl> + @ Override <nl> + public void onChange ( UncheckedRow row ) { <nl> + assertEquals ( " changed " , row . getString ( STRING _ COLUMN _ INDEX ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + changeRowAsync ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void listener _ triggeredByLocalCommit ( ) { <nl> + SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> + Table table = sharedRealm . getTable ( TABLE _ NAME ) ; <nl> + UncheckedRow row = table . getUncheckedRow ( 0 ) ; <nl> + looperThread . keepStrongReference . add ( row ) ; <nl> + sharedRealm . rowNotifier . registerListener ( row , row , new RealmChangeListener < UncheckedRow > ( ) { <nl> + @ Override <nl> + public void onChange ( UncheckedRow row ) { <nl> + String testString = row . getString ( STRING _ COLUMN _ INDEX ) ; <nl> + / / assertEquals ( " changed " , row . getString ( STRING _ COLUMN _ INDEX ) ) ; <nl> + / / looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + changeRow ( sharedRealm ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void listener _ triggeredByLocalTransactionBegin ( ) { <nl> + SharedRealm sharedRealm = getSharedRealm ( ) ; <nl> + Table table = sharedRealm . getTable ( TABLE _ NAME ) ; <nl> + <nl> + changeRow ( sharedRealm ) ; <nl> + <nl> + UncheckedRow row = table . getUncheckedRow ( 0 ) ; <nl> + looperThread . keepStrongReference . add ( row ) ; <nl> + sharedRealm . rowNotifier . registerListener ( row , row , new RealmChangeListener < UncheckedRow > ( ) { <nl> + @ Override <nl> + public void onChange ( UncheckedRow row ) { <nl> + assertEquals ( " changed " , row . getString ( STRING _ COLUMN _ INDEX ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + sharedRealm . beginTransaction ( ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / internal / JNIMixedSubtableTest . java b / realm / src / androidTest / java / io / realm / internal / JNIMixedSubtableTest . java <nl> index e0ef5b1 . . 002a928 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / internal / JNIMixedSubtableTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / internal / JNIMixedSubtableTest . java <nl> @ @ - 1 , 4 + 1 , 3 @ @ <nl> - / * <nl> package io . realm . internal ; <nl> <nl> import junit . framework . TestCase ; <nl> @ @ - 123 , 4 + 122 , 3 @ @ public class JNIMixedSubtableTest extends TestCase { <nl> } <nl> <nl> } <nl> - * / <nl> diff - - git a / realm / src / androidTest / java / io / realm / internal / JNIRowTest . java b / realm / src / androidTest / java / io / realm / internal / JNIRowTest . java <nl> index 09c6da8 . . 0124afd 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / internal / JNIRowTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / internal / JNIRowTest . java <nl> @ @ - 23 , 14 + 23 , 14 @ @ public class JNIRowTest extends TestCase { <nl> <nl> byte [ ] data = new byte [ 2 ] ; <nl> <nl> - table . add ( " abc " , 3 , new Float ( 1 . 2 ) , 1 . 3 , true , new Date ( 0 ) , data ) ; <nl> + table . add ( " abc " , 3 , ( float ) 1 . 2 , 1 . 3 , true , new Date ( 0 ) , data ) ; <nl> <nl> <nl> Row row = table . getRow ( 0 ) ; <nl> <nl> assertEquals ( " abc " , row . getString ( 0 ) ) ; <nl> assertEquals ( 3 , row . getLong ( 1 ) ) ; <nl> - assertEquals ( new Float ( 1 . 2 ) , row . getFloat ( 2 ) , 0 . 0001 ) ; <nl> + assertEquals ( ( float ) 1 . 2 , row . getFloat ( 2 ) , 0 . 0001 ) ; <nl> assertEquals ( 1 . 3 , row . getDouble ( 3 ) ) ; <nl> assertEquals ( true , row . getBoolean ( 4 ) ) ; <nl> assertEquals ( new Date ( 0 ) , row . getDate ( 5 ) ) ; <nl> @ @ - 39 , 7 + 39 , 7 @ @ public class JNIRowTest extends TestCase { <nl> <nl> row . setString ( 0 , " a " ) ; <nl> row . setLong ( 1 , 1 ) ; <nl> - row . setFloat ( 2 , new Float ( 8 . 8 ) ) ; <nl> + row . setFloat ( 2 , ( float ) 8 . 8 ) ; <nl> row . setDouble ( 3 , 9 . 9 ) ; <nl> row . setBoolean ( 4 , false ) ; <nl> row . setDate ( 5 , new Date ( 10000 ) ) ; <nl> @ @ - 49 , 7 + 49 , 7 @ @ public class JNIRowTest extends TestCase { <nl> <nl> assertEquals ( " a " , row . getString ( 0 ) ) ; <nl> assertEquals ( 1 , row . getLong ( 1 ) ) ; <nl> - assertEquals ( new Float ( 8 . 8 ) , row . getFloat ( 2 ) , 0 . 0001 ) ; <nl> + assertEquals ( ( float ) 8 . 8 , row . getFloat ( 2 ) , 0 . 0001 ) ; <nl> assertEquals ( 9 . 9 , row . getDouble ( 3 ) ) ; <nl> assertEquals ( false , row . getBoolean ( 4 ) ) ; <nl> assertEquals ( new Date ( 10000 ) , row . getDate ( 5 ) ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / internal / JNITableInsertTest . java b / realm / src / androidTest / java / io / realm / internal / JNITableInsertTest . java <nl> index aa50bee . . 6773115 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / internal / JNITableInsertTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / internal / JNITableInsertTest . java <nl> @ @ - 1 , 28 + 1 , 23 @ @ <nl> - / * <nl> + <nl> package io . realm . internal ; <nl> <nl> - import static org . junit . Assert . * ; <nl> + import android . test . MoreAsserts ; <nl> <nl> - import java . util . Arrays ; <nl> - import java . util . Date ; <nl> - import java . util . Iterator ; <nl> - import java . util . List ; <nl> + import junit . framework . TestCase ; <nl> <nl> - import org . testng . annotations . DataProvider ; <nl> - import org . testng . annotations . Test ; <nl> + import java . util . Date ; <nl> <nl> - import io . realm . internal . test . DataProviderUtil ; <nl> import io . realm . internal . test . TestHelper ; <nl> <nl> <nl> - public class JNITableInsertTest { <nl> + public class JNITableInsertTest extends TestCase { <nl> <nl> public void verifyRow ( Table tbl , long rowIndex , Object [ ] values ) { <nl> assertTrue ( ( Boolean ) ( values [ 0 ] ) = = tbl . getBoolean ( 0 , rowIndex ) ) ; <nl> assertEquals ( ( ( Number ) values [ 1 ] ) . longValue ( ) , tbl . getLong ( 1 , rowIndex ) ) ; <nl> assertEquals ( ( String ) values [ 2 ] , tbl . getString ( 2 , rowIndex ) ) ; <nl> if ( values [ 3 ] instanceof byte [ ] ) <nl> - assertEquals ( ( byte [ ] ) values [ 3 ] , tbl . getBinaryByteArray ( 3 , rowIndex ) ) ; <nl> + MoreAsserts . assertEquals ( ( byte [ ] ) values [ 3 ] , tbl . getBinaryByteArray ( 3 , rowIndex ) ) ; <nl> assertEquals ( ( ( Date ) values [ 4 ] ) . getTime ( ) / 1000 , tbl . getDate ( 4 , rowIndex ) . getTime ( ) / 1000 ) ; <nl> <nl> / / Mixed mix1 = Mixed . mixedValue ( values [ 5 ] ) ; <nl> @ @ - 39 , 8 + 34 , 7 @ @ public class JNITableInsertTest { <nl> assertTrue ( tbl . isValid ( ) ) ; <nl> } <nl> <nl> - @ Test <nl> - public void ShouldInsertAddAndSetRows ( ) { <nl> + public void testShouldInsertAddAndSetRows ( ) { <nl> Table table = new Table ( ) ; <nl> TableSpec tableSpec = new TableSpec ( ) ; <nl> tableSpec . addColumn ( ColumnType . BOOLEAN , " bool " ) ; <nl> @ @ - 84 , 9 + 78 , 9 @ @ public class JNITableInsertTest { <nl> verifyRow ( table , 3 , rowData2 ) ; <nl> <nl> / / Same test - but a one - liner . . . <nl> - table . add ( new Object [ ] { false , ( short ) 2 , " hi " , buf , date , mixed , new Object [ ] [ ] { { 234 , " row0 " } , <nl> + table . add ( false , ( short ) 2 , " hi " , buf , date , mixed , new Object [ ] [ ] { { 234 , " row0 " } , <nl> { 345 , " row1 " } , <nl> - { 456 , " row2 " } } } ) ; <nl> + { 456 , " row2 " } } ) ; <nl> verifyRow ( table , 4 , rowData0 ) ; <nl> <nl> / / Test set ( ) <nl> @ @ - 101 , 8 + 95 , 6 @ @ public class JNITableInsertTest { <nl> <nl> } <nl> <nl> - <nl> - @ Test <nl> public void testAddAtMethod ( ) { <nl> Table t = new Table ( ) ; <nl> t . addColumn ( ColumnType . STRING , " col1 " ) ; <nl> @ @ - 116 , 8 + 108 , 7 @ @ public class JNITableInsertTest { <nl> assertEquals ( t . getString ( 0 , 1 ) , " s22 " ) ; <nl> } <nl> <nl> - @ Test <nl> - public void ShouldFailInsert ( ) { <nl> + public void testShouldFailInsert ( ) { <nl> Table table = new Table ( ) ; <nl> TableSpec tableSpec = new TableSpec ( ) ; <nl> tableSpec . addColumn ( ColumnType . BOOLEAN , " bool " ) ; <nl> @ @ - 201 , 8 + 192 , 7 @ @ public class JNITableInsertTest { <nl> } <nl> <nl> <nl> - @ Test <nl> - public void incrementInColumnTest ( ) { <nl> + public void testIncrementInColumnTest ( ) { <nl> <nl> Table table = new Table ( ) ; <nl> table . addColumn ( ColumnType . STRING , " col0 " ) ; <nl> @ @ - 224 , 8 + 214 , 7 @ @ public class JNITableInsertTest { <nl> } <nl> <nl> <nl> - @ Test <nl> - public void adjustColumnValuesOnUnsupportedColumnTypeTest ( ) { <nl> + public void testAdjustColumnValuesOnUnsupportedColumnTypeTest ( ) { <nl> <nl> Table table = TestHelper . getTableWithAllColumnTypes ( ) ; <nl> <nl> @ @ - 243 , 9 + 232 , 7 @ @ public class JNITableInsertTest { <nl> } <nl> } <nl> <nl> - <nl> - @ Test <nl> - public void shouldThrowExceptionWhenColumnNameIsTooLong ( ) { <nl> + public void testShouldThrowExceptionWhenColumnNameIsTooLong ( ) { <nl> <nl> Table table = new Table ( ) ; <nl> try { <nl> @ @ - 255 , 7 + 242 , 6 @ @ public class JNITableInsertTest { <nl> catch ( IllegalArgumentException e ) { } <nl> } <nl> <nl> - @ Test <nl> public void testWhenColumnNameIsExcactly63CharLong ( ) { <nl> <nl> Table table = new Table ( ) ; <nl> @ @ - 263 , 8 + 249 , 8 @ @ public class JNITableInsertTest { <nl> } <nl> <nl> <nl> - <nl> - / / Generates a table with a a column with column typed determined from the first parameter , <nl> + / / TODO : parametric tests <nl> + / * / / Generates a table with a a column with column typed determined from the first parameter , <nl> / / and then puts in a value from the second parameter . <nl> / / In cases , where the 2 parameter types do not match , we expect an IllegalArgumentException <nl> @ Test ( dataProvider = " columnTypesProvider " ) <nl> @ @ - 296 , 6 + 282 , 6 @ @ public class JNITableInsertTest { <nl> <nl> List < ? > mixedValues = Arrays . asList ( values ) ; <nl> return DataProviderUtil . allCombinations ( mixedValues , mixedValues ) ; <nl> - } <nl> + } * / <nl> } <nl> - * / <nl> + <nl> diff - - git a / realm / src / androidTest / java / io / realm / internal / JNIViewTest . java b / realm / src / androidTest / java / io / realm / internal / JNIViewTest . java <nl> index df6e76e . . 6ed9fe8 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / internal / JNIViewTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / internal / JNIViewTest . java <nl> @ @ - 113 , 7 + 113 , 7 @ @ public class JNIViewTest extends TestCase { <nl> table . addColumn ( ColumnType . BINARY , " binary " ) ; <nl> <nl> byte [ ] arr1 = new byte [ ] { 1 , 2 , 3 } ; <nl> - table . add ( arr1 ) ; <nl> + table . add ( new Object [ ] { arr1 } ) ; <nl> MoreAsserts . assertEquals ( arr1 , table . getBinaryByteArray ( 0 , 0 ) ) ; <nl> <nl> TableView view = table . where ( ) . findAll ( ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java b / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java <nl> index 43a1bc4 . . 1c7a798 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java <nl> @ @ - 1 , 21 + 1 , 15 @ @ <nl> - / * <nl> package io . realm . internal ; <nl> <nl> - import static org . junit . Assert . * ; <nl> + import junit . framework . TestCase ; <nl> <nl> import java . util . Arrays ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> <nl> - import org . junit . annotations . DataProvider ; <nl> - import org . junit . Test ; <nl> - <nl> import io . realm . internal . test . DataProviderUtil ; <nl> - import io . realm . internal . TestHelper ; <nl> - <nl> + import io . realm . internal . test . TestHelper ; <nl> <nl> - @ SuppressWarnings ( " unused " ) <nl> - public class TableIndexAndDistinctTest { <nl> + public class TableIndexAndDistinctTest extends TestCase { <nl> Table table ; <nl> <nl> void init ( ) { <nl> @ @ - 34 , 8 + 28 , 7 @ @ public class TableIndexAndDistinctTest { <nl> assertEquals ( 7 , table . size ( ) ) ; <nl> } <nl> <nl> - @ Test <nl> - public void shouldTestDistinct ( ) { <nl> + public void testShouldTestDistinct ( ) { <nl> init ( ) ; <nl> <nl> / / Must set index before using distinct ( ) <nl> @ @ - 50 , 10 + 43 , 8 @ @ public class TableIndexAndDistinctTest { <nl> assertEquals ( 4 , view . getLong ( 0 , 3 ) ) ; <nl> } <nl> <nl> - <nl> - <nl> - * / <nl> - / * * <nl> + / / TODO : parametric test <nl> + / * * / / * * <nl> * Should throw exception if trying to get distinct on columns where index has not been set <nl> * @ param index <nl> * / / * <nl> @ @ - 65 , 22 + 56 , 24 @ @ public class TableIndexAndDistinctTest { <nl> Table t = TestHelper . getTableWithAllColumnTypes ( ) ; <nl> <nl> TableView view = table . getDistinctView ( 1 ) ; <nl> - } <nl> + } * / <nl> <nl> - @ Test ( expectedExceptions = ArrayIndexOutOfBoundsException . class ) <nl> - public void shouldTestDistinctErrorWhenIndexOutOfBounds ( ) { <nl> + public void testShouldTestDistinctErrorWhenIndexOutOfBounds ( ) { <nl> init ( ) ; <nl> <nl> - TableView view = table . getDistinctView ( 3 ) ; <nl> + try { <nl> + TableView view = table . getDistinctView ( 3 ) ; <nl> + fail ( ) ; <nl> + } catch ( ArrayIndexOutOfBoundsException e ) { <nl> + assertNotNull ( e ) ; <nl> + } <nl> } <nl> <nl> - * / <nl> - / * * <nl> - * Checkd that Index can be set on multiple columns , with the String <nl> - * @ param index <nl> - * / / * <nl> - <nl> - public void shouldTestSettingIndexOnMultipleColumns ( ) { <nl> + / * * <nl> + * Check that Index can be set on multiple columns , with the String <nl> + * @ param <nl> + * / <nl> + public void testShouldTestSettingIndexOnMultipleColumns ( ) { <nl> <nl> / / Create a table only with String type columns <nl> Table t = new Table ( ) ; <nl> @ @ - 102 , 8 + 95 , 8 @ @ public class TableIndexAndDistinctTest { <nl> } <nl> <nl> <nl> - * / <nl> - / * * <nl> + / / TODO : parametric test <nl> + / * * / / * * <nl> * Checks that all other column types than String throws exception . <nl> * @ param o <nl> * / / * <nl> @ @ - 120 , 31 + 113 , 33 @ @ public class TableIndexAndDistinctTest { <nl> } <nl> <nl> t . setIndex ( index ) ; <nl> - } <nl> + } * / <nl> <nl> - @ Test ( ) <nl> - public void shouldCheckIndexIsOkOnColumn ( ) { <nl> + public void testShouldCheckIndexIsOkOnColumn ( ) { <nl> init ( ) ; <nl> table . setIndex ( 1 ) ; <nl> } <nl> <nl> - @ Test ( expectedExceptions = UnsupportedOperationException . class ) <nl> - public void shouldTestDistinctErrorWhenWrongColumnType ( ) { <nl> + public void testShouldThrowDistinctErrorWhenWrongColumnType ( ) { <nl> init ( ) ; <nl> table . setIndex ( 1 ) ; <nl> - TableView view = table . getDistinctView ( 0 ) ; <nl> + try { <nl> + TableView view = table . getDistinctView ( 0 ) ; <nl> + fail ( ) ; <nl> + } catch ( UnsupportedOperationException e ) { <nl> + assertNotNull ( e ) ; <nl> + } <nl> } <nl> <nl> - <nl> - * / <nl> - / * * <nl> + / * * <nl> * Is used to run a test multiple times , <nl> * that corresponds to the number of columns in the Table generated <nl> * in TestHelper . getTableWithAllColumnTypes <nl> * @ return <nl> - * / / * <nl> + * / <nl> <nl> - @ DataProvider ( name = " columnIndex " ) <nl> + / / TODO : parametric test <nl> + / * @ DataProvider ( name = " columnIndex " ) <nl> public Iterator < Object [ ] > mixedValuesProvider ( ) { <nl> Long [ ] values = { <nl> 0L , 1L , 2L , 3L , 4L , 5L , 6L , 7L , 8L <nl> @ @ - 152 , 6 + 147 , 6 @ @ public class TableIndexAndDistinctTest { <nl> <nl> List < ? > mixedValues = Arrays . asList ( values ) ; <nl> return DataProviderUtil . allCombinations ( mixedValues ) ; <nl> - } <nl> + } * / <nl> } <nl> - * / <nl> +

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 index 1f7a493 . . e162fbd 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / CollectionTests . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public class CollectionTests { 
 @ Rule 
 public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; 
 
 - RealmConfiguration config ; 
 + private RealmConfiguration config ; 
 private SharedRealm sharedRealm ; 
 private Table table ; 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / RowNotifierTests . java b / realm / realm - library / src / androidTest / java / io / realm / internal / RowNotifierTests . java 
 new file mode 100644 
 index 0000000 . . fc93fc0 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / RowNotifierTests . java 
 @ @ - 0 , 0 + 1 , 160 @ @ 
 + / * 
 + * Copyright 2016 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . internal ; 
 + 
 + import android . support . test . runner . AndroidJUnit4 ; 
 + 
 + import org . junit . After ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + import org . junit . rules . ExpectedException ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import java . util . concurrent . CountDownLatch ; 
 + 
 + import io . realm . RealmChangeListener ; 
 + import io . realm . RealmConfiguration ; 
 + import io . realm . RealmFieldType ; 
 + import io . realm . TestHelper ; 
 + import io . realm . internal . android . AndroidRealmNotifier ; 
 + import io . realm . rule . RunInLooperThread ; 
 + import io . realm . rule . RunTestInLooperThread ; 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 + 
 + import static junit . framework . Assert . assertEquals ; 
 + 
 + @ RunWith ( AndroidJUnit4 . class ) 
 + public class RowNotifierTests { 
 + @ Rule 
 + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 + @ Rule 
 + public final ExpectedException thrown = ExpectedException . none ( ) ; 
 + @ Rule 
 + public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; 
 + 
 + private RealmConfiguration config ; 
 + private SharedRealm sharedRealm ; 
 + private Table table ; 
 + private final static String TABLE _ NAME = " test _ table " ; 
 + private final static long STRING _ COLUMN _ INDEX = 0 ; 
 + 
 + @ Before 
 + public void setUp ( ) { 
 + config = configFactory . createConfiguration ( ) ; 
 + sharedRealm = getSharedRealm ( ) ; 
 + populateData ( ) ; 
 + } 
 + 
 + @ After 
 + public void tearDown ( ) { 
 + sharedRealm . close ( ) ; 
 + } 
 + 
 + private SharedRealm getSharedRealm ( ) { 
 + return SharedRealm . getInstance ( config , new AndroidRealmNotifier ( ) , null ) ; 
 + } 
 + 
 + private void populateData ( ) { 
 + sharedRealm . beginTransaction ( ) ; 
 + table = sharedRealm . getTable ( TABLE _ NAME ) ; 
 + / / Specify the column types and names 
 + assertEquals ( STRING _ COLUMN _ INDEX , table . addColumn ( RealmFieldType . STRING , " string " ) ) ; 
 + table . addEmptyRow ( ) ; 
 + sharedRealm . commitTransaction ( ) ; 
 + } 
 + 
 + private void changeRowAsync ( ) { 
 + final CountDownLatch latch = new CountDownLatch ( 1 ) ; 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + SharedRealm sharedRealm = getSharedRealm ( ) ; 
 + changeRow ( sharedRealm ) ; 
 + sharedRealm . close ( ) ; 
 + latch . countDown ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + TestHelper . awaitOrFail ( latch ) ; 
 + } 
 + 
 + private void changeRow ( SharedRealm sharedRealm ) { 
 + sharedRealm . beginTransaction ( ) ; 
 + table = sharedRealm . getTable ( TABLE _ NAME ) ; 
 + UncheckedRow row = table . getUncheckedRow ( 0 ) ; 
 + row . setString ( STRING _ COLUMN _ INDEX , " changed " ) ; 
 + sharedRealm . commitTransaction ( ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void listener _ triggeredByRemoteCommit ( ) { 
 + SharedRealm sharedRealm = getSharedRealm ( ) ; 
 + Table table = sharedRealm . getTable ( TABLE _ NAME ) ; 
 + UncheckedRow row = table . getUncheckedRow ( 0 ) ; 
 + looperThread . keepStrongReference . add ( row ) ; 
 + sharedRealm . rowNotifier . registerListener ( row , row , new RealmChangeListener < UncheckedRow > ( ) { 
 + @ Override 
 + public void onChange ( UncheckedRow row ) { 
 + assertEquals ( " changed " , row . getString ( STRING _ COLUMN _ INDEX ) ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + 
 + changeRowAsync ( ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void listener _ triggeredByLocalCommit ( ) { 
 + SharedRealm sharedRealm = getSharedRealm ( ) ; 
 + Table table = sharedRealm . getTable ( TABLE _ NAME ) ; 
 + UncheckedRow row = table . getUncheckedRow ( 0 ) ; 
 + looperThread . keepStrongReference . add ( row ) ; 
 + sharedRealm . rowNotifier . registerListener ( row , row , new RealmChangeListener < UncheckedRow > ( ) { 
 + @ Override 
 + public void onChange ( UncheckedRow row ) { 
 + String testString = row . getString ( STRING _ COLUMN _ INDEX ) ; 
 + / / assertEquals ( " changed " , row . getString ( STRING _ COLUMN _ INDEX ) ) ; 
 + / / looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + 
 + changeRow ( sharedRealm ) ; 
 + } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void listener _ triggeredByLocalTransactionBegin ( ) { 
 + SharedRealm sharedRealm = getSharedRealm ( ) ; 
 + Table table = sharedRealm . getTable ( TABLE _ NAME ) ; 
 + 
 + changeRow ( sharedRealm ) ; 
 + 
 + UncheckedRow row = table . getUncheckedRow ( 0 ) ; 
 + looperThread . keepStrongReference . add ( row ) ; 
 + sharedRealm . rowNotifier . registerListener ( row , row , new RealmChangeListener < UncheckedRow > ( ) { 
 + @ Override 
 + public void onChange ( UncheckedRow row ) { 
 + assertEquals ( " changed " , row . getString ( STRING _ COLUMN _ INDEX ) ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + 
 + sharedRealm . beginTransaction ( ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / internal / JNIMixedSubtableTest . java b / realm / src / androidTest / java / io / realm / internal / JNIMixedSubtableTest . java 
 index e0ef5b1 . . 002a928 100644 
 - - - a / realm / src / androidTest / java / io / realm / internal / JNIMixedSubtableTest . java 
 + + + b / realm / src / androidTest / java / io / realm / internal / JNIMixedSubtableTest . java 
 @ @ - 1 , 4 + 1 , 3 @ @ 
 - / * 
 package io . realm . internal ; 
 
 import junit . framework . TestCase ; 
 @ @ - 123 , 4 + 122 , 3 @ @ public class JNIMixedSubtableTest extends TestCase { 
 } 
 
 } 
 - * / 
 diff - - git a / realm / src / androidTest / java / io / realm / internal / JNIRowTest . java b / realm / src / androidTest / java / io / realm / internal / JNIRowTest . java 
 index 09c6da8 . . 0124afd 100644 
 - - - a / realm / src / androidTest / java / io / realm / internal / JNIRowTest . java 
 + + + b / realm / src / androidTest / java / io / realm / internal / JNIRowTest . java 
 @ @ - 23 , 14 + 23 , 14 @ @ public class JNIRowTest extends TestCase { 
 
 byte [ ] data = new byte [ 2 ] ; 
 
 - table . add ( " abc " , 3 , new Float ( 1 . 2 ) , 1 . 3 , true , new Date ( 0 ) , data ) ; 
 + table . add ( " abc " , 3 , ( float ) 1 . 2 , 1 . 3 , true , new Date ( 0 ) , data ) ; 
 
 
 Row row = table . getRow ( 0 ) ; 
 
 assertEquals ( " abc " , row . getString ( 0 ) ) ; 
 assertEquals ( 3 , row . getLong ( 1 ) ) ; 
 - assertEquals ( new Float ( 1 . 2 ) , row . getFloat ( 2 ) , 0 . 0001 ) ; 
 + assertEquals ( ( float ) 1 . 2 , row . getFloat ( 2 ) , 0 . 0001 ) ; 
 assertEquals ( 1 . 3 , row . getDouble ( 3 ) ) ; 
 assertEquals ( true , row . getBoolean ( 4 ) ) ; 
 assertEquals ( new Date ( 0 ) , row . getDate ( 5 ) ) ; 
 @ @ - 39 , 7 + 39 , 7 @ @ public class JNIRowTest extends TestCase { 
 
 row . setString ( 0 , " a " ) ; 
 row . setLong ( 1 , 1 ) ; 
 - row . setFloat ( 2 , new Float ( 8 . 8 ) ) ; 
 + row . setFloat ( 2 , ( float ) 8 . 8 ) ; 
 row . setDouble ( 3 , 9 . 9 ) ; 
 row . setBoolean ( 4 , false ) ; 
 row . setDate ( 5 , new Date ( 10000 ) ) ; 
 @ @ - 49 , 7 + 49 , 7 @ @ public class JNIRowTest extends TestCase { 
 
 assertEquals ( " a " , row . getString ( 0 ) ) ; 
 assertEquals ( 1 , row . getLong ( 1 ) ) ; 
 - assertEquals ( new Float ( 8 . 8 ) , row . getFloat ( 2 ) , 0 . 0001 ) ; 
 + assertEquals ( ( float ) 8 . 8 , row . getFloat ( 2 ) , 0 . 0001 ) ; 
 assertEquals ( 9 . 9 , row . getDouble ( 3 ) ) ; 
 assertEquals ( false , row . getBoolean ( 4 ) ) ; 
 assertEquals ( new Date ( 10000 ) , row . getDate ( 5 ) ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / internal / JNITableInsertTest . java b / realm / src / androidTest / java / io / realm / internal / JNITableInsertTest . java 
 index aa50bee . . 6773115 100644 
 - - - a / realm / src / androidTest / java / io / realm / internal / JNITableInsertTest . java 
 + + + b / realm / src / androidTest / java / io / realm / internal / JNITableInsertTest . java 
 @ @ - 1 , 28 + 1 , 23 @ @ 
 - / * 
 + 
 package io . realm . internal ; 
 
 - import static org . junit . Assert . * ; 
 + import android . test . MoreAsserts ; 
 
 - import java . util . Arrays ; 
 - import java . util . Date ; 
 - import java . util . Iterator ; 
 - import java . util . List ; 
 + import junit . framework . TestCase ; 
 
 - import org . testng . annotations . DataProvider ; 
 - import org . testng . annotations . Test ; 
 + import java . util . Date ; 
 
 - import io . realm . internal . test . DataProviderUtil ; 
 import io . realm . internal . test . TestHelper ; 
 
 
 - public class JNITableInsertTest { 
 + public class JNITableInsertTest extends TestCase { 
 
 public void verifyRow ( Table tbl , long rowIndex , Object [ ] values ) { 
 assertTrue ( ( Boolean ) ( values [ 0 ] ) = = tbl . getBoolean ( 0 , rowIndex ) ) ; 
 assertEquals ( ( ( Number ) values [ 1 ] ) . longValue ( ) , tbl . getLong ( 1 , rowIndex ) ) ; 
 assertEquals ( ( String ) values [ 2 ] , tbl . getString ( 2 , rowIndex ) ) ; 
 if ( values [ 3 ] instanceof byte [ ] ) 
 - assertEquals ( ( byte [ ] ) values [ 3 ] , tbl . getBinaryByteArray ( 3 , rowIndex ) ) ; 
 + MoreAsserts . assertEquals ( ( byte [ ] ) values [ 3 ] , tbl . getBinaryByteArray ( 3 , rowIndex ) ) ; 
 assertEquals ( ( ( Date ) values [ 4 ] ) . getTime ( ) / 1000 , tbl . getDate ( 4 , rowIndex ) . getTime ( ) / 1000 ) ; 
 
 / / Mixed mix1 = Mixed . mixedValue ( values [ 5 ] ) ; 
 @ @ - 39 , 8 + 34 , 7 @ @ public class JNITableInsertTest { 
 assertTrue ( tbl . isValid ( ) ) ; 
 } 
 
 - @ Test 
 - public void ShouldInsertAddAndSetRows ( ) { 
 + public void testShouldInsertAddAndSetRows ( ) { 
 Table table = new Table ( ) ; 
 TableSpec tableSpec = new TableSpec ( ) ; 
 tableSpec . addColumn ( ColumnType . BOOLEAN , " bool " ) ; 
 @ @ - 84 , 9 + 78 , 9 @ @ public class JNITableInsertTest { 
 verifyRow ( table , 3 , rowData2 ) ; 
 
 / / Same test - but a one - liner . . . 
 - table . add ( new Object [ ] { false , ( short ) 2 , " hi " , buf , date , mixed , new Object [ ] [ ] { { 234 , " row0 " } , 
 + table . add ( false , ( short ) 2 , " hi " , buf , date , mixed , new Object [ ] [ ] { { 234 , " row0 " } , 
 { 345 , " row1 " } , 
 - { 456 , " row2 " } } } ) ; 
 + { 456 , " row2 " } } ) ; 
 verifyRow ( table , 4 , rowData0 ) ; 
 
 / / Test set ( ) 
 @ @ - 101 , 8 + 95 , 6 @ @ public class JNITableInsertTest { 
 
 } 
 
 - 
 - @ Test 
 public void testAddAtMethod ( ) { 
 Table t = new Table ( ) ; 
 t . addColumn ( ColumnType . STRING , " col1 " ) ; 
 @ @ - 116 , 8 + 108 , 7 @ @ public class JNITableInsertTest { 
 assertEquals ( t . getString ( 0 , 1 ) , " s22 " ) ; 
 } 
 
 - @ Test 
 - public void ShouldFailInsert ( ) { 
 + public void testShouldFailInsert ( ) { 
 Table table = new Table ( ) ; 
 TableSpec tableSpec = new TableSpec ( ) ; 
 tableSpec . addColumn ( ColumnType . BOOLEAN , " bool " ) ; 
 @ @ - 201 , 8 + 192 , 7 @ @ public class JNITableInsertTest { 
 } 
 
 
 - @ Test 
 - public void incrementInColumnTest ( ) { 
 + public void testIncrementInColumnTest ( ) { 
 
 Table table = new Table ( ) ; 
 table . addColumn ( ColumnType . STRING , " col0 " ) ; 
 @ @ - 224 , 8 + 214 , 7 @ @ public class JNITableInsertTest { 
 } 
 
 
 - @ Test 
 - public void adjustColumnValuesOnUnsupportedColumnTypeTest ( ) { 
 + public void testAdjustColumnValuesOnUnsupportedColumnTypeTest ( ) { 
 
 Table table = TestHelper . getTableWithAllColumnTypes ( ) ; 
 
 @ @ - 243 , 9 + 232 , 7 @ @ public class JNITableInsertTest { 
 } 
 } 
 
 - 
 - @ Test 
 - public void shouldThrowExceptionWhenColumnNameIsTooLong ( ) { 
 + public void testShouldThrowExceptionWhenColumnNameIsTooLong ( ) { 
 
 Table table = new Table ( ) ; 
 try { 
 @ @ - 255 , 7 + 242 , 6 @ @ public class JNITableInsertTest { 
 catch ( IllegalArgumentException e ) { } 
 } 
 
 - @ Test 
 public void testWhenColumnNameIsExcactly63CharLong ( ) { 
 
 Table table = new Table ( ) ; 
 @ @ - 263 , 8 + 249 , 8 @ @ public class JNITableInsertTest { 
 } 
 
 
 - 
 - / / Generates a table with a a column with column typed determined from the first parameter , 
 + / / TODO : parametric tests 
 + / * / / Generates a table with a a column with column typed determined from the first parameter , 
 / / and then puts in a value from the second parameter . 
 / / In cases , where the 2 parameter types do not match , we expect an IllegalArgumentException 
 @ Test ( dataProvider = " columnTypesProvider " ) 
 @ @ - 296 , 6 + 282 , 6 @ @ public class JNITableInsertTest { 
 
 List < ? > mixedValues = Arrays . asList ( values ) ; 
 return DataProviderUtil . allCombinations ( mixedValues , mixedValues ) ; 
 - } 
 + } * / 
 } 
 - * / 
 + 
 diff - - git a / realm / src / androidTest / java / io / realm / internal / JNIViewTest . java b / realm / src / androidTest / java / io / realm / internal / JNIViewTest . java 
 index df6e76e . . 6ed9fe8 100644 
 - - - a / realm / src / androidTest / java / io / realm / internal / JNIViewTest . java 
 + + + b / realm / src / androidTest / java / io / realm / internal / JNIViewTest . java 
 @ @ - 113 , 7 + 113 , 7 @ @ public class JNIViewTest extends TestCase { 
 table . addColumn ( ColumnType . BINARY , " binary " ) ; 
 
 byte [ ] arr1 = new byte [ ] { 1 , 2 , 3 } ; 
 - table . add ( arr1 ) ; 
 + table . add ( new Object [ ] { arr1 } ) ; 
 MoreAsserts . assertEquals ( arr1 , table . getBinaryByteArray ( 0 , 0 ) ) ; 
 
 TableView view = table . where ( ) . findAll ( ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java b / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java 
 index 43a1bc4 . . 1c7a798 100644 
 - - - a / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java 
 + + + b / realm / src / androidTest / java / io / realm / internal / TableIndexAndDistinctTest . java 
 @ @ - 1 , 21 + 1 , 15 @ @ 
 - / * 
 package io . realm . internal ; 
 
 - import static org . junit . Assert . * ; 
 + import junit . framework . TestCase ; 
 
 import java . util . Arrays ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 
 - import org . junit . annotations . DataProvider ; 
 - import org . junit . Test ; 
 - 
 import io . realm . internal . test . DataProviderUtil ; 
 - import io . realm . internal . TestHelper ; 
 - 
 + import io . realm . internal . test . TestHelper ; 
 
 - @ SuppressWarnings ( " unused " ) 
 - public class TableIndexAndDistinctTest { 
 + public class TableIndexAndDistinctTest extends TestCase { 
 Table table ; 
 
 void init ( ) { 
 @ @ - 34 , 8 + 28 , 7 @ @ public class TableIndexAndDistinctTest { 
 assertEquals ( 7 , table . size ( ) ) ; 
 } 
 
 - @ Test 
 - public void shouldTestDistinct ( ) { 
 + public void testShouldTestDistinct ( ) { 
 init ( ) ; 
 
 / / Must set index before using distinct ( ) 
 @ @ - 50 , 10 + 43 , 8 @ @ public class TableIndexAndDistinctTest { 
 assertEquals ( 4 , view . getLong ( 0 , 3 ) ) ; 
 } 
 
 - 
 - 
 - * / 
 - / * * 
 + / / TODO : parametric test 
 + / * * / / * * 
 * Should throw exception if trying to get distinct on columns where index has not been set 
 * @ param index 
 * / / * 
 @ @ - 65 , 22 + 56 , 24 @ @ public class TableIndexAndDistinctTest { 
 Table t = TestHelper . getTableWithAllColumnTypes ( ) ; 
 
 TableView view = table . getDistinctView ( 1 ) ; 
 - } 
 + } * / 
 
 - @ Test ( expectedExceptions = ArrayIndexOutOfBoundsException . class ) 
 - public void shouldTestDistinctErrorWhenIndexOutOfBounds ( ) { 
 + public void testShouldTestDistinctErrorWhenIndexOutOfBounds ( ) { 
 init ( ) ; 
 
 - TableView view = table . getDistinctView ( 3 ) ; 
 + try { 
 + TableView view = table . getDistinctView ( 3 ) ; 
 + fail ( ) ; 
 + } catch ( ArrayIndexOutOfBoundsException e ) { 
 + assertNotNull ( e ) ; 
 + } 
 } 
 
 - * / 
 - / * * 
 - * Checkd that Index can be set on multiple columns , with the String 
 - * @ param index 
 - * / / * 
 - 
 - public void shouldTestSettingIndexOnMultipleColumns ( ) { 
 + / * * 
 + * Check that Index can be set on multiple columns , with the String 
 + * @ param 
 + * / 
 + public void testShouldTestSettingIndexOnMultipleColumns ( ) { 
 
 / / Create a table only with String type columns 
 Table t = new Table ( ) ; 
 @ @ - 102 , 8 + 95 , 8 @ @ public class TableIndexAndDistinctTest { 
 } 
 
 
 - * / 
 - / * * 
 + / / TODO : parametric test 
 + / * * / / * * 
 * Checks that all other column types than String throws exception . 
 * @ param o 
 * / / * 
 @ @ - 120 , 31 + 113 , 33 @ @ public class TableIndexAndDistinctTest { 
 } 
 
 t . setIndex ( index ) ; 
 - } 
 + } * / 
 
 - @ Test ( ) 
 - public void shouldCheckIndexIsOkOnColumn ( ) { 
 + public void testShouldCheckIndexIsOkOnColumn ( ) { 
 init ( ) ; 
 table . setIndex ( 1 ) ; 
 } 
 
 - @ Test ( expectedExceptions = UnsupportedOperationException . class ) 
 - public void shouldTestDistinctErrorWhenWrongColumnType ( ) { 
 + public void testShouldThrowDistinctErrorWhenWrongColumnType ( ) { 
 init ( ) ; 
 table . setIndex ( 1 ) ; 
 - TableView view = table . getDistinctView ( 0 ) ; 
 + try { 
 + TableView view = table . getDistinctView ( 0 ) ; 
 + fail ( ) ; 
 + } catch ( UnsupportedOperationException e ) { 
 + assertNotNull ( e ) ; 
 + } 
 } 
 
 - 
 - * / 
 - / * * 
 + / * * 
 * Is used to run a test multiple times , 
 * that corresponds to the number of columns in the Table generated 
 * in TestHelper . getTableWithAllColumnTypes 
 * @ return 
 - * / / * 
 + * / 
 
 - @ DataProvider ( name = " columnIndex " ) 
 + / / TODO : parametric test 
 + / * @ DataProvider ( name = " columnIndex " ) 
 public Iterator < Object [ ] > mixedValuesProvider ( ) { 
 Long [ ] values = { 
 0L , 1L , 2L , 3L , 4L , 5L , 6L , 7L , 8L 
 @ @ - 152 , 6 + 147 , 6 @ @ public class TableIndexAndDistinctTest { 
 
 List < ? > mixedValues = Arrays . asList ( values ) ; 
 return DataProviderUtil . allCombinations ( mixedValues ) ; 
 - } 
 + } * / 
 } 
 - * / 
 +
