BLEU SCORE: 0.04844232281716619

TEST MSG: Clean object schema tests
GENERATED MSG: Remove potential race condition + cleanup

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / assets / encrypted . realm b / realm / realm - library / src / androidTest / assets / encrypted . realm <nl> deleted file mode 100644 <nl> index d61e567 . . 0000000 <nl> Binary files a / realm / realm - library / src / androidTest / assets / encrypted . realm and / dev / null differ <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmCacheTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmCacheTests . java <nl> index a6b842b . . 410ce96 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmCacheTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmCacheTests . java <nl> @ @ - 141 , 23 + 141 , 24 @ @ public class RealmCacheTests { <nl> public void dontCacheWrongConfigurations ( ) throws IOException { <nl> Realm testRealm ; <nl> String REALM _ NAME = " encrypted . realm " ; <nl> - configFactory . copyRealmFromAssets ( context , REALM _ NAME , REALM _ NAME ) ; <nl> - RealmMigration realmMigration = TestHelper . prepareMigrationToNullSupportStep ( ) ; <nl> <nl> RealmConfiguration wrongConfig = configFactory . createConfigurationBuilder ( ) <nl> . name ( REALM _ NAME ) <nl> . encryptionKey ( TestHelper . SHA512 ( " foo " ) ) <nl> - . migration ( realmMigration ) <nl> . schema ( StringOnly . class ) <nl> . build ( ) ; <nl> <nl> RealmConfiguration rightConfig = configFactory . createConfigurationBuilder ( ) <nl> . name ( REALM _ NAME ) <nl> . encryptionKey ( TestHelper . SHA512 ( " realm " ) ) <nl> - . migration ( realmMigration ) <nl> . schema ( StringOnly . class ) <nl> . build ( ) ; <nl> <nl> + / / Create the realm with proper key . <nl> + testRealm = Realm . getInstance ( rightConfig ) ; <nl> + assertNotNull ( testRealm ) ; <nl> + testRealm . close ( ) ; <nl> + <nl> / / Opens Realm with wrong key . <nl> try { <nl> Realm . getInstance ( wrongConfig ) ; <nl> @ @ - 178 , 13 + 179 , 9 @ @ public class RealmCacheTests { <nl> byte [ ] oldPassword = TestHelper . SHA512 ( " realm " ) ; <nl> byte [ ] newPassword = TestHelper . SHA512 ( " realm - copy " ) ; <nl> <nl> - configFactory . copyRealmFromAssets ( context , REALM _ NAME , REALM _ NAME ) ; <nl> - RealmMigration realmMigration = TestHelper . prepareMigrationToNullSupportStep ( ) ; <nl> - <nl> RealmConfiguration config = configFactory . createConfigurationBuilder ( ) <nl> . name ( REALM _ NAME ) <nl> . encryptionKey ( oldPassword ) <nl> - . migration ( realmMigration ) <nl> . schema ( StringOnly . class ) <nl> . build ( ) ; <nl> <nl> @ @ - 209 , 7 + 206 , 6 @ @ public class RealmCacheTests { <nl> RealmConfiguration newConfig = configFactory . createConfigurationBuilder ( ) <nl> . name ( REALM _ NAME ) <nl> . encryptionKey ( newPassword ) <nl> - . migration ( realmMigration ) <nl> . schema ( StringOnly . class ) <nl> . build ( ) ; <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> index 22dca37 . . fe03983 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> @ @ - 882 , 8 + 882 , 8 @ @ public class RealmMigrationTests { <nl> RealmMigration migration = new RealmMigration ( ) { <nl> @ Override <nl> public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { <nl> - Table table = realm . schema . getTable ( StringOnly . class ) ; <nl> - table . convertColumnToNullable ( table . getColumnIndex ( " chars " ) ) ; <nl> + RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( StringOnly . CLASS _ NAME ) ; <nl> + objectSchema . setRequired ( StringOnly . FIELD _ CHARS , false ) ; <nl> } <nl> } ; <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> index 97d1a7e . . b925229 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> @ @ - 146 , 19 + 146 , 6 @ @ public class TestHelper { <nl> return new ByteArrayInputStream ( str . getBytes ( UTF _ 8 ) ) ; <nl> } <nl> <nl> - / / Creates a simple migration step in order to support null . <nl> - / / FIXME : generate a new encrypted . realm will null support <nl> - public static RealmMigration prepareMigrationToNullSupportStep ( ) { <nl> - RealmMigration realmMigration = new RealmMigration ( ) { <nl> - @ Override <nl> - public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { <nl> - Table stringOnly = realm . schema . getTable ( StringOnly . class ) ; <nl> - stringOnly . convertColumnToNullable ( stringOnly . getColumnIndex ( " chars " ) ) ; <nl> - } <nl> - } ; <nl> - return realmMigration ; <nl> - } <nl> - <nl> / / Returns a random key used by encrypted Realms . <nl> public static byte [ ] getRandomKey ( ) { <nl> byte [ ] key = new byte [ 64 ] ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / entities / StringOnly . java b / realm / realm - library / src / androidTest / java / io / realm / entities / StringOnly . java <nl> index c8c80a4 . . 88bd041 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / entities / StringOnly . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / entities / StringOnly . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ import io . realm . RealmObject ; <nl> <nl> public class StringOnly extends RealmObject { <nl> <nl> + public static final String CLASS _ NAME = " StringOnly " ; <nl> public static final String FIELD _ CHARS = " chars " ; <nl> <nl> private String chars ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> index abc13b5 . . 1d49fc1 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> @ @ - 114 , 6 + 114 , 8 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> Realm r1 = Realm . getInstance ( configA ) ; <nl> Realm r2 = Realm . getInstance ( configB ) ; <nl> assertNotSame ( r1 , r2 ) ; <nl> + r1 . close ( ) ; <nl> + r2 . close ( ) ; <nl> } <nl> <nl> public void testNullKeyThrows ( ) { <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> index 0c78ade . . 09855d1 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmMigrationTests . java <nl> @ @ - 40 , 6 + 40 , 7 @ @ public class RealmMigrationTests extends AndroidTestCase { <nl> Realm realm = Realm . getInstance ( realmConfig ) ; <nl> int result = realm . where ( AllTypes . class ) . equalTo ( " columnString " , " Foo " ) . findAll ( ) . size ( ) ; <nl> assertEquals ( 0 , result ) ; <nl> + realm . close ( ) ; <nl> } <nl> <nl> / / If a migration creates a different ordering of columns on Realm A , while another ordering is generated by <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index d2e0ea4 . . b0e0389 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 68 , 7 + 68 , 6 @ @ import static io . realm . internal . test . ExtraTests . assertArrayEquals ; <nl> public class RealmTest extends AndroidTestCase { <nl> <nl> protected final static int TEST _ DATA _ SIZE = 10 ; <nl> - <nl> protected Realm testRealm ; <nl> <nl> protected List < String > columnData = new ArrayList < String > ( ) ; <nl> @ @ - 93 , 7 + 92 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> @ Override <nl> protected void setUp ( ) throws Exception { <nl> - testConfig = new RealmConfiguration . Builder ( getContext ( ) ) . build ( ) ; <nl> + testConfig = TestHelper . createConfiguration ( getContext ( ) ) ; <nl> Realm . deleteRealm ( testConfig ) ; <nl> testRealm = Realm . getInstance ( testConfig ) ; <nl> } <nl> @ @ - 143 , 7 + 142 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> public void testGetInstanceFolderNoWritePermissionThrows ( ) { <nl> File folder = new File ( " / " ) ; <nl> try { <nl> - Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( folder ) . build ( ) ) ; <nl> + Realm . getInstance ( new RealmConfiguration . Builder ( folder ) . build ( ) ) ; <nl> fail ( " Pointing to a folder with no write permission should throw an IllegalArgumentException " ) ; <nl> } catch ( IllegalArgumentException expected ) { <nl> } <nl> @ @ - 169 , 8 + 168 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> public void testGetInstanceClearsCacheWhenFailed ( ) { <nl> String REALM _ NAME = " invalid _ cache . realm " ; <nl> - RealmConfiguration configA = TestHelper . createConfiguration ( getContext ( ) , REALM _ NAME , TestHelper . getRandomKey ( ) ) ; <nl> - RealmConfiguration configB = TestHelper . createConfiguration ( getContext ( ) , REALM _ NAME , TestHelper . getRandomKey ( ) ) ; <nl> + RealmConfiguration configA = TestHelper . createConfiguration ( getContext ( ) , REALM _ NAME , TestHelper . getRandomKey ( 42 ) ) ; <nl> + RealmConfiguration configB = TestHelper . createConfiguration ( getContext ( ) , REALM _ NAME , TestHelper . getRandomKey ( 43 ) ) ; <nl> <nl> Realm . deleteRealm ( configA ) ; <nl> Realm realm = Realm . getInstance ( configA ) ; / / Create starting Realm with key1 <nl> @ @ - 181 , 7 + 180 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> / / Delete Realm so key 2 works . This should work as a Realm shouldn ' t be cached <nl> / / if initialization failed . <nl> assertTrue ( Realm . deleteRealm ( configA ) ) ; <nl> - Realm . getInstance ( configB ) ; <nl> + realm = Realm . getInstance ( configB ) ; <nl> realm . close ( ) ; <nl> } <nl> } <nl> @ @ - 193 , 10 + 192 , 11 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testInternalRealmChangedHandlersRemoved ( ) { <nl> + testRealm . close ( ) ; / / Clear handler created by testRealm in setUp ( ) <nl> + <nl> final String REALM _ NAME = " test - internalhandlers " ; <nl> RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) , REALM _ NAME ) ; <nl> Realm . deleteRealm ( realmConfig ) ; <nl> - Realm . handlers . clear ( ) ; / / Make sure that handlers from other unit tests doesn ' t interfere . <nl> <nl> / / Open and close first instance of a Realm <nl> Realm realm = null ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / assets / encrypted . realm b / realm / realm - library / src / androidTest / assets / encrypted . realm 
 deleted file mode 100644 
 index d61e567 . . 0000000 
 Binary files a / realm / realm - library / src / androidTest / assets / encrypted . realm and / dev / null differ 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmCacheTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmCacheTests . java 
 index a6b842b . . 410ce96 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmCacheTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmCacheTests . java 
 @ @ - 141 , 23 + 141 , 24 @ @ public class RealmCacheTests { 
 public void dontCacheWrongConfigurations ( ) throws IOException { 
 Realm testRealm ; 
 String REALM _ NAME = " encrypted . realm " ; 
 - configFactory . copyRealmFromAssets ( context , REALM _ NAME , REALM _ NAME ) ; 
 - RealmMigration realmMigration = TestHelper . prepareMigrationToNullSupportStep ( ) ; 
 
 RealmConfiguration wrongConfig = configFactory . createConfigurationBuilder ( ) 
 . name ( REALM _ NAME ) 
 . encryptionKey ( TestHelper . SHA512 ( " foo " ) ) 
 - . migration ( realmMigration ) 
 . schema ( StringOnly . class ) 
 . build ( ) ; 
 
 RealmConfiguration rightConfig = configFactory . createConfigurationBuilder ( ) 
 . name ( REALM _ NAME ) 
 . encryptionKey ( TestHelper . SHA512 ( " realm " ) ) 
 - . migration ( realmMigration ) 
 . schema ( StringOnly . class ) 
 . build ( ) ; 
 
 + / / Create the realm with proper key . 
 + testRealm = Realm . getInstance ( rightConfig ) ; 
 + assertNotNull ( testRealm ) ; 
 + testRealm . close ( ) ; 
 + 
 / / Opens Realm with wrong key . 
 try { 
 Realm . getInstance ( wrongConfig ) ; 
 @ @ - 178 , 13 + 179 , 9 @ @ public class RealmCacheTests { 
 byte [ ] oldPassword = TestHelper . SHA512 ( " realm " ) ; 
 byte [ ] newPassword = TestHelper . SHA512 ( " realm - copy " ) ; 
 
 - configFactory . copyRealmFromAssets ( context , REALM _ NAME , REALM _ NAME ) ; 
 - RealmMigration realmMigration = TestHelper . prepareMigrationToNullSupportStep ( ) ; 
 - 
 RealmConfiguration config = configFactory . createConfigurationBuilder ( ) 
 . name ( REALM _ NAME ) 
 . encryptionKey ( oldPassword ) 
 - . migration ( realmMigration ) 
 . schema ( StringOnly . class ) 
 . build ( ) ; 
 
 @ @ - 209 , 7 + 206 , 6 @ @ public class RealmCacheTests { 
 RealmConfiguration newConfig = configFactory . createConfigurationBuilder ( ) 
 . name ( REALM _ NAME ) 
 . encryptionKey ( newPassword ) 
 - . migration ( realmMigration ) 
 . schema ( StringOnly . class ) 
 . build ( ) ; 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 index 22dca37 . . fe03983 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmMigrationTests . java 
 @ @ - 882 , 8 + 882 , 8 @ @ public class RealmMigrationTests { 
 RealmMigration migration = new RealmMigration ( ) { 
 @ Override 
 public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { 
 - Table table = realm . schema . getTable ( StringOnly . class ) ; 
 - table . convertColumnToNullable ( table . getColumnIndex ( " chars " ) ) ; 
 + RealmObjectSchema objectSchema = realm . getSchema ( ) . get ( StringOnly . CLASS _ NAME ) ; 
 + objectSchema . setRequired ( StringOnly . FIELD _ CHARS , false ) ; 
 } 
 } ; 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 index 97d1a7e . . b925229 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 @ @ - 146 , 19 + 146 , 6 @ @ public class TestHelper { 
 return new ByteArrayInputStream ( str . getBytes ( UTF _ 8 ) ) ; 
 } 
 
 - / / Creates a simple migration step in order to support null . 
 - / / FIXME : generate a new encrypted . realm will null support 
 - public static RealmMigration prepareMigrationToNullSupportStep ( ) { 
 - RealmMigration realmMigration = new RealmMigration ( ) { 
 - @ Override 
 - public void migrate ( DynamicRealm realm , long oldVersion , long newVersion ) { 
 - Table stringOnly = realm . schema . getTable ( StringOnly . class ) ; 
 - stringOnly . convertColumnToNullable ( stringOnly . getColumnIndex ( " chars " ) ) ; 
 - } 
 - } ; 
 - return realmMigration ; 
 - } 
 - 
 / / Returns a random key used by encrypted Realms . 
 public static byte [ ] getRandomKey ( ) { 
 byte [ ] key = new byte [ 64 ] ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / entities / StringOnly . java b / realm / realm - library / src / androidTest / java / io / realm / entities / StringOnly . java 
 index c8c80a4 . . 88bd041 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / entities / StringOnly . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / entities / StringOnly . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import io . realm . RealmObject ; 
 
 public class StringOnly extends RealmObject { 
 
 + public static final String CLASS _ NAME = " StringOnly " ; 
 public static final String FIELD _ CHARS = " chars " ; 
 
 private String chars ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 index abc13b5 . . 1d49fc1 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 @ @ - 114 , 6 + 114 , 8 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 Realm r1 = Realm . getInstance ( configA ) ; 
 Realm r2 = Realm . getInstance ( configB ) ; 
 assertNotSame ( r1 , r2 ) ; 
 + r1 . close ( ) ; 
 + r2 . close ( ) ; 
 } 
 
 public void testNullKeyThrows ( ) { 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmMigrationTests . java b / realm / src / androidTest / java / io / realm / RealmMigrationTests . java 
 index 0c78ade . . 09855d1 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmMigrationTests . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmMigrationTests . java 
 @ @ - 40 , 6 + 40 , 7 @ @ public class RealmMigrationTests extends AndroidTestCase { 
 Realm realm = Realm . getInstance ( realmConfig ) ; 
 int result = realm . where ( AllTypes . class ) . equalTo ( " columnString " , " Foo " ) . findAll ( ) . size ( ) ; 
 assertEquals ( 0 , result ) ; 
 + realm . close ( ) ; 
 } 
 
 / / If a migration creates a different ordering of columns on Realm A , while another ordering is generated by 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index d2e0ea4 . . b0e0389 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 68 , 7 + 68 , 6 @ @ import static io . realm . internal . test . ExtraTests . assertArrayEquals ; 
 public class RealmTest extends AndroidTestCase { 
 
 protected final static int TEST _ DATA _ SIZE = 10 ; 
 - 
 protected Realm testRealm ; 
 
 protected List < String > columnData = new ArrayList < String > ( ) ; 
 @ @ - 93 , 7 + 92 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 
 @ Override 
 protected void setUp ( ) throws Exception { 
 - testConfig = new RealmConfiguration . Builder ( getContext ( ) ) . build ( ) ; 
 + testConfig = TestHelper . createConfiguration ( getContext ( ) ) ; 
 Realm . deleteRealm ( testConfig ) ; 
 testRealm = Realm . getInstance ( testConfig ) ; 
 } 
 @ @ - 143 , 7 + 142 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 public void testGetInstanceFolderNoWritePermissionThrows ( ) { 
 File folder = new File ( " / " ) ; 
 try { 
 - Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( folder ) . build ( ) ) ; 
 + Realm . getInstance ( new RealmConfiguration . Builder ( folder ) . build ( ) ) ; 
 fail ( " Pointing to a folder with no write permission should throw an IllegalArgumentException " ) ; 
 } catch ( IllegalArgumentException expected ) { 
 } 
 @ @ - 169 , 8 + 168 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 
 public void testGetInstanceClearsCacheWhenFailed ( ) { 
 String REALM _ NAME = " invalid _ cache . realm " ; 
 - RealmConfiguration configA = TestHelper . createConfiguration ( getContext ( ) , REALM _ NAME , TestHelper . getRandomKey ( ) ) ; 
 - RealmConfiguration configB = TestHelper . createConfiguration ( getContext ( ) , REALM _ NAME , TestHelper . getRandomKey ( ) ) ; 
 + RealmConfiguration configA = TestHelper . createConfiguration ( getContext ( ) , REALM _ NAME , TestHelper . getRandomKey ( 42 ) ) ; 
 + RealmConfiguration configB = TestHelper . createConfiguration ( getContext ( ) , REALM _ NAME , TestHelper . getRandomKey ( 43 ) ) ; 
 
 Realm . deleteRealm ( configA ) ; 
 Realm realm = Realm . getInstance ( configA ) ; / / Create starting Realm with key1 
 @ @ - 181 , 7 + 180 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 / / Delete Realm so key 2 works . This should work as a Realm shouldn ' t be cached 
 / / if initialization failed . 
 assertTrue ( Realm . deleteRealm ( configA ) ) ; 
 - Realm . getInstance ( configB ) ; 
 + realm = Realm . getInstance ( configB ) ; 
 realm . close ( ) ; 
 } 
 } 
 @ @ - 193 , 10 + 192 , 11 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testInternalRealmChangedHandlersRemoved ( ) { 
 + testRealm . close ( ) ; / / Clear handler created by testRealm in setUp ( ) 
 + 
 final String REALM _ NAME = " test - internalhandlers " ; 
 RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) , REALM _ NAME ) ; 
 Realm . deleteRealm ( realmConfig ) ; 
 - Realm . handlers . clear ( ) ; / / Make sure that handlers from other unit tests doesn ' t interfere . 
 
 / / Open and close first instance of a Realm 
 Realm realm = null ;
