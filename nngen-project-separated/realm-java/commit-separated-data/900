BLEU SCORE: 0.0017745041833014084

TEST MSG: First working version .
GENERATED MSG: toString , equals and hashcode now work properly with cyclic model structures . Refactored proxy class generator to be more readable .

TEST DIFF (one line): diff - - git a / examples / build . gradle b / examples / build . gradle <nl> index c07e671 . . 480fe2f 100644 <nl> - - - a / examples / build . gradle <nl> + + + b / examples / build . gradle <nl> @ @ - 18 , 7 + 18 , 7 @ @ allprojects { <nl> classpath ' com . android . tools . build : gradle : 1 . 5 . 0 ' <nl> classpath ' com . jfrog . bintray . gradle : gradle - bintray - plugin : 1 . 2 ' <nl> classpath ' com . jakewharton . sdkmanager : gradle - plugin : 0 . 12 . 0 ' <nl> - classpath ' com . novoda : gradle - android - command - plugin : 1 . 3 . 0 ' <nl> + classpath ' com . novoda : gradle - android - command - plugin : 1 . 5 . 0 ' <nl> classpath " io . realm : realm - gradle - plugin : $ { currentVersion } " <nl> } <nl> } <nl> diff - - git a / examples / jsonExample / src / main / java / io / realm / examples / json / City . java b / examples / jsonExample / src / main / java / io / realm / examples / json / City . java <nl> index a583df8 . . 7efc87a 100644 <nl> - - - a / examples / jsonExample / src / main / java / io / realm / examples / json / City . java <nl> + + + b / examples / jsonExample / src / main / java / io / realm / examples / json / City . java <nl> @ @ - 19 , 24 + 19 , 6 @ @ package io . realm . examples . json ; <nl> import io . realm . RealmObject ; <nl> <nl> public class City extends RealmObject { <nl> - <nl> - private String name ; <nl> - private long votes ; <nl> - <nl> - public String getName ( ) { <nl> - return name ; <nl> - } <nl> - <nl> - public void setName ( String name ) { <nl> - this . name = name ; <nl> - } <nl> - <nl> - public long getVotes ( ) { <nl> - return votes ; <nl> - } <nl> - <nl> - public void setVotes ( long votes ) { <nl> - this . votes = votes ; <nl> - } <nl> - <nl> + public String name ; <nl> + public long votes ; <nl> } <nl> diff - - git a / examples / jsonExample / src / main / java / io / realm / examples / json / CityAdapter . java b / examples / jsonExample / src / main / java / io / realm / examples / json / CityAdapter . java <nl> index d8226bd . . 90df19a 100644 <nl> - - - a / examples / jsonExample / src / main / java / io / realm / examples / json / CityAdapter . java <nl> + + + b / examples / jsonExample / src / main / java / io / realm / examples / json / CityAdapter . java <nl> @ @ - 77 , 8 + 77 , 8 @ @ public class CityAdapter extends BaseAdapter { <nl> City city = cities . get ( position ) ; <nl> <nl> if ( city ! = null ) { <nl> - ( ( TextView ) currentView . findViewById ( R . id . name ) ) . setText ( city . getName ( ) ) ; <nl> - ( ( TextView ) currentView . findViewById ( R . id . votes ) ) . setText ( Long . toString ( city . getVotes ( ) ) ) ; <nl> + ( ( TextView ) currentView . findViewById ( R . id . name ) ) . setText ( city . name ) ; <nl> + ( ( TextView ) currentView . findViewById ( R . id . votes ) ) . setText ( Long . toString ( city . votes ) ) ; <nl> } <nl> <nl> return currentView ; <nl> diff - - git a / examples / settings . gradle b / examples / settings . gradle <nl> index ebcb460 . . 59e1a48 100644 <nl> - - - a / examples / settings . gradle <nl> + + + b / examples / settings . gradle <nl> @ @ - 3 , 7 + 3 , 7 @ @ include ' encryptionExample ' <nl> include ' gridViewExample ' <nl> include ' introExample ' <nl> include ' jsonExample ' <nl> - include ' kotlinExample ' <nl> + / / include ' kotlinExample ' <nl> include ' migrationExample ' <nl> include ' moduleExample : app ' <nl> include ' moduleExample : library ' <nl> diff - - git a / gradle - plugin / build . gradle b / gradle - plugin / build . gradle <nl> index ee402fb . . 0f146b8 100644 <nl> - - - a / gradle - plugin / build . gradle <nl> + + + b / gradle - plugin / build . gradle <nl> @ @ - 25 , 6 + 25 , 7 @ @ dependencies { <nl> compile ' com . android . tools . build : transform - api : 1 . 5 . 0 ' <nl> compile ' org . javassist : javassist : 3 . 20 . 0 - GA ' <nl> compile " io . realm : realm - annotations : $ { version } " <nl> + compile " io . realm : realm - android : 0 . 86 . 0 @ jar " <nl> } <nl> <nl> / / for Ant filter <nl> diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy <nl> index 294ba68 . . 54e3152 100644 <nl> - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy <nl> + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy <nl> @ @ - 72 , 11 + 72 , 14 @ @ class RealmTransformer extends Transform { <nl> / / will use a cached object and all the classes will result frozen . <nl> ClassPool classPool = new ClassPool ( null ) <nl> classPool . appendSystemPath ( ) <nl> + classPool . appendClassPath ( new LoaderClassPath ( getClass ( ) . getClassLoader ( ) ) ) <nl> <nl> folders . each { File folder - > <nl> classPool . appendClassPath ( folder . canonicalPath ) <nl> } <nl> <nl> + println " Contains io . realm . RealmList : $ { classPool . getOrNull ( ' io . realm . RealmList ' ) } " <nl> + <nl> def proxyClasses = classFiles . findAll { key , value - > key . name . endsWith ( ' RealmProxy . class ' ) } <nl> println " Proxy Classes : $ { proxyClasses * . value } " <nl> <nl> @ @ - 86 , 7 + 89 , 9 @ @ class RealmTransformer extends Transform { <nl> println " Model Classes : $ { modelClasses * . name } " <nl> <nl> def managedFields = [ ] <nl> - modelClasses . each { managedFields . addAll ( it . declaredFields ) } <nl> + modelClasses . each { <nl> + managedFields . addAll ( it . declaredFields . findAll { it . getAnnotation ( Ignore . class ) = = null } ) <nl> + } <nl> println " Managed Fields : $ { managedFields * . name } " <nl> <nl> modelClasses . each { addRealmAccessors ( it ) } <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> index e190f88 . . c847691 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java <nl> @ @ - 18 , 16 + 18 , 13 @ @ package io . realm . processor ; <nl> <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> - import java . util . HashMap ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> - import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> import javax . annotation . processing . ProcessingEnvironment ; <nl> import javax . lang . model . element . Element ; <nl> import javax . lang . model . element . ElementKind ; <nl> - import javax . lang . model . element . ExecutableElement ; <nl> import javax . lang . model . element . Modifier ; <nl> import javax . lang . model . element . PackageElement ; <nl> import javax . lang . model . element . TypeElement ; <nl> @ @ - 36 , 7 + 33 , 6 @ @ import javax . lang . model . type . TypeKind ; <nl> import javax . lang . model . type . TypeMirror ; <nl> import javax . lang . model . util . Types ; <nl> <nl> - import io . realm . annotations . Ignore ; <nl> import io . realm . annotations . Index ; <nl> import io . realm . annotations . PrimaryKey ; <nl> import io . realm . annotations . Required ; <nl> @ @ - 52 , 15 + 48 , 8 @ @ public class ClassMetaData { <nl> private boolean hasDefaultConstructor ; / / True if model has a public no - arg constructor . <nl> private VariableElement primaryKey ; / / Reference to field used as primary key , if any . <nl> private List < VariableElement > fields = new ArrayList < VariableElement > ( ) ; / / List of all fields in the class except those @ Ignored . <nl> - private List < String > fieldNames = new ArrayList < String > ( ) ; <nl> - private List < String > ignoreFieldNames = new ArrayList < String > ( ) ; <nl> private List < VariableElement > indexedFields = new ArrayList < VariableElement > ( ) ; / / list of all fields marked @ Index . <nl> private Set < VariableElement > nullableFields = new HashSet < VariableElement > ( ) ; / / Set of fields which can be nullable <nl> - private Set < String > expectedGetters = new HashSet < String > ( ) ; / / Set of fieldnames that are expected to have a getter <nl> - private Set < String > expectedSetters = new HashSet < String > ( ) ; / / Set of fieldnames that are expected to have a setter <nl> - private Set < ExecutableElement > methods = new HashSet < ExecutableElement > ( ) ; / / List of all methods in the model class <nl> - private Map < String , String > getters = new HashMap < String , String > ( ) ; / / Map between fieldnames and their getters <nl> - private Map < String , String > setters = new HashMap < String , String > ( ) ; / / Map between fieldname and their setters <nl> <nl> private final List < TypeMirror > validPrimaryKeyTypes ; <nl> private final Types typeUtils ; <nl> @ @ - 105 , 48 + 94 , 11 @ @ public class ClassMetaData { <nl> <nl> if ( ! categorizeClassElements ( ) ) return false ; <nl> if ( ! checkListTypes ( ) ) return false ; <nl> - if ( ! checkMethods ( ) ) return false ; <nl> if ( ! checkDefaultConstructor ( ) ) return false ; <nl> - if ( ! checkRequiredGetters ( ) ) return false ; <nl> - if ( ! checkRequireSetters ( ) ) return false ; <nl> <nl> return true ; / / Meta data was successfully generated <nl> } <nl> <nl> - / / Check that only allowed methods are present in the RealmObject class <nl> - private boolean checkMethods ( ) { <nl> - for ( ExecutableElement executableElement : methods ) { <nl> - String methodName = executableElement . getSimpleName ( ) . toString ( ) ; <nl> - <nl> - / / Check the modifiers of the method <nl> - Set < Modifier > modifiers = executableElement . getModifiers ( ) ; <nl> - if ( modifiers . contains ( Modifier . STATIC ) ) { <nl> - continue ; / / We ' re cool with static methods . Move along ! <nl> - } else if ( ! modifiers . contains ( Modifier . PUBLIC ) ) { <nl> - Utils . error ( " The methods of the RealmObject class must be public " , executableElement ) ; <nl> - return false ; <nl> - } <nl> - <nl> - / / Check that getters and setters are valid <nl> - if ( methodName . startsWith ( " get " ) | | methodName . startsWith ( " is " ) ) { <nl> - if ( ! checkGetterMethod ( methodName ) ) { <nl> - Utils . error ( String . format ( " Getter % s is not associated to any field " , methodName ) , executableElement ) ; <nl> - return false ; <nl> - } <nl> - } else if ( methodName . startsWith ( " set " ) ) { <nl> - if ( ! checkSetterMethod ( methodName ) ) { <nl> - Utils . error ( String . format ( " Setter % s is not associated to any field " , methodName ) , executableElement ) ; <nl> - return false ; <nl> - } <nl> - } else { <nl> - Utils . error ( " Only getters and setters should be defined in RealmObject classes " , executableElement ) ; <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - return true ; <nl> - } <nl> - <nl> private boolean checkListTypes ( ) { <nl> for ( VariableElement field : fields ) { <nl> if ( Utils . isRealmList ( field ) ) { <nl> @ @ - 159 , 106 + 111 , 6 @ @ public class ClassMetaData { <nl> return true ; <nl> } <nl> <nl> - / / Verify that a setter is used to set a field in the RealmObject class . <nl> - / / Note : This is done heuristically by comparing the name of setter with the name of the field . <nl> - / / Annotation processors does not allow us to inspect individual statements . <nl> - private boolean checkSetterMethod ( String methodName ) { <nl> - boolean found = false ; <nl> - <nl> - String methodMinusSet = methodName . substring ( 3 ) ; <nl> - String methodMinusSetCapitalised = Utils . lowerFirstChar ( methodMinusSet ) ; <nl> - String methodMenusSetPlusIs = " is " + methodMinusSet ; <nl> - <nl> - if ( fieldNames . contains ( methodMinusSet ) ) { / / mPerson - > setmPerson <nl> - expectedSetters . remove ( methodMinusSet ) ; <nl> - if ( ! ignoreFieldNames . contains ( methodMinusSet ) ) { <nl> - setters . put ( methodMinusSet , methodName ) ; <nl> - } <nl> - found = true ; <nl> - } else if ( fieldNames . contains ( methodMinusSetCapitalised ) ) { / / person - > setPerson <nl> - expectedSetters . remove ( methodMinusSetCapitalised ) ; <nl> - if ( ! ignoreFieldNames . contains ( methodMinusSetCapitalised ) ) { <nl> - setters . put ( methodMinusSetCapitalised , methodName ) ; <nl> - } <nl> - found = true ; <nl> - } else if ( fieldNames . contains ( methodMenusSetPlusIs ) ) { / / isReady - > setReady <nl> - expectedSetters . remove ( methodMenusSetPlusIs ) ; <nl> - if ( ! ignoreFieldNames . contains ( methodMenusSetPlusIs ) ) { <nl> - setters . put ( methodMenusSetPlusIs , methodName ) ; <nl> - } <nl> - found = true ; <nl> - } <nl> - <nl> - return found ; <nl> - } <nl> - <nl> - / / Verify that a getter is used to get a field in the RealmObject class . <nl> - / / Note : This is done heuristically by comparing the name of getter with the name of the field . <nl> - / / Annotation processors does not allow us to inspect individual statements . <nl> - private boolean checkGetterMethod ( String methodName ) { <nl> - boolean found = false ; <nl> - <nl> - if ( methodName . startsWith ( " is " ) ) { <nl> - String methodMinusIs = methodName . substring ( 2 ) ; <nl> - String methodMinusIsCapitalised = Utils . lowerFirstChar ( methodMinusIs ) ; <nl> - if ( fieldNames . contains ( methodName ) ) { / / isDone - > isDone <nl> - expectedGetters . remove ( methodName ) ; <nl> - if ( ! ignoreFieldNames . contains ( methodName ) ) { <nl> - getters . put ( methodName , methodName ) ; <nl> - } <nl> - found = true ; <nl> - } else if ( fieldNames . contains ( methodMinusIs ) ) { / / mDone - > ismDone <nl> - expectedGetters . remove ( methodMinusIs ) ; <nl> - if ( ! ignoreFieldNames . contains ( methodMinusIs ) ) { <nl> - getters . put ( methodMinusIs , methodName ) ; <nl> - } <nl> - found = true ; <nl> - } else if ( fieldNames . contains ( methodMinusIsCapitalised ) ) { / / done - > isDone <nl> - expectedGetters . remove ( methodMinusIsCapitalised ) ; <nl> - if ( ! ignoreFieldNames . contains ( methodMinusIsCapitalised ) ) { <nl> - getters . put ( methodMinusIsCapitalised , methodName ) ; <nl> - } <nl> - found = true ; <nl> - } <nl> - } <nl> - <nl> - if ( ! found & & methodName . startsWith ( " get " ) ) { <nl> - String methodMinusGet = methodName . substring ( 3 ) ; <nl> - String methodMinusGetCapitalised = Utils . lowerFirstChar ( methodMinusGet ) ; <nl> - if ( fieldNames . contains ( methodMinusGet ) ) { / / mPerson - > getmPerson <nl> - expectedGetters . remove ( methodMinusGet ) ; <nl> - if ( ! ignoreFieldNames . contains ( methodMinusGet ) ) { <nl> - getters . put ( methodMinusGet , methodName ) ; <nl> - } <nl> - found = true ; <nl> - } else if ( fieldNames . contains ( methodMinusGetCapitalised ) ) { / / person - > getPerson <nl> - expectedGetters . remove ( methodMinusGetCapitalised ) ; <nl> - if ( ! ignoreFieldNames . contains ( methodMinusGetCapitalised ) ) { <nl> - getters . put ( methodMinusGetCapitalised , methodName ) ; <nl> - } <nl> - found = true ; <nl> - } <nl> - } <nl> - <nl> - return found ; <nl> - } <nl> - <nl> - / / Report any setters that are missing <nl> - private boolean checkRequireSetters ( ) { <nl> - for ( String expectedSetter : expectedSetters ) { <nl> - Utils . error ( " No setter found for field " + expectedSetter ) ; <nl> - } <nl> - return expectedSetters . size ( ) = = 0 ; <nl> - } <nl> - <nl> - / / Report any getters that are missing <nl> - private boolean checkRequiredGetters ( ) { <nl> - for ( String expectedGetter : expectedGetters ) { <nl> - Utils . error ( " No getter found for field " + expectedGetter ) ; <nl> - } <nl> - return expectedGetters . size ( ) = = 0 ; <nl> - } <nl> - <nl> / / Report if the default constructor is missing <nl> private boolean checkDefaultConstructor ( ) { <nl> if ( ! hasDefaultConstructor ) { <nl> @ @ - 277 , 21 + 129 , 12 @ @ public class ClassMetaData { <nl> <nl> if ( elementKind . equals ( ElementKind . FIELD ) ) { <nl> VariableElement variableElement = ( VariableElement ) element ; <nl> - String fieldName = variableElement . getSimpleName ( ) . toString ( ) ; <nl> <nl> Set < Modifier > modifiers = variableElement . getModifiers ( ) ; <nl> if ( modifiers . contains ( Modifier . STATIC ) ) { <nl> continue ; / / completely ignore any static fields <nl> } <nl> <nl> - if ( variableElement . getAnnotation ( Ignore . class ) ! = null ) { <nl> - / / The field has the @ Ignore annotation . No need to go any further . <nl> - String ignoredFieldName = variableElement . getSimpleName ( ) . toString ( ) ; <nl> - fieldNames . add ( ignoredFieldName ) ; <nl> - ignoreFieldNames . add ( ignoredFieldName ) ; <nl> - continue ; <nl> - } <nl> - <nl> if ( variableElement . getAnnotation ( Index . class ) ! = null ) { <nl> / / The field has the @ Index annotation . It ' s only valid for column types : <nl> / / STRING , DATE , INTEGER , BOOLEAN <nl> @ @ - 360 , 27 + 203 , 13 @ @ public class ClassMetaData { <nl> } <nl> } <nl> <nl> - if ( ! variableElement . getModifiers ( ) . contains ( Modifier . PRIVATE ) ) { <nl> - Utils . error ( " The fields of the RealmObject class must be private " , variableElement ) ; <nl> - return false ; <nl> - } <nl> - <nl> fields . add ( variableElement ) ; <nl> - expectedGetters . add ( fieldName ) ; <nl> - expectedSetters . add ( fieldName ) ; <nl> } else if ( elementKind . equals ( ElementKind . CONSTRUCTOR ) ) { <nl> hasDefaultConstructor = hasDefaultConstructor | | Utils . isDefaultConstructor ( element ) ; <nl> <nl> - } else if ( elementKind . equals ( ElementKind . METHOD ) ) { <nl> - ExecutableElement executableElement = ( ExecutableElement ) element ; <nl> - methods . add ( executableElement ) ; <nl> } <nl> } <nl> <nl> - for ( VariableElement field : fields ) { <nl> - fieldNames . add ( field . getSimpleName ( ) . toString ( ) ) ; <nl> - } <nl> - <nl> if ( fields . size ( ) = = 0 ) { <nl> Utils . error ( className + " must contain at least 1 persistable field " ) ; <nl> } <nl> @ @ - 418 , 11 + 247 , 11 @ @ public class ClassMetaData { <nl> } <nl> <nl> public String getGetter ( String fieldName ) { <nl> - return getters . get ( fieldName ) ; <nl> + return " realmGetter $ " + fieldName ; <nl> } <nl> <nl> public String getSetter ( String fieldName ) { <nl> - return setters . get ( fieldName ) ; <nl> + return " realmSetter $ " + fieldName ; <nl> } <nl> <nl> public List < VariableElement > getIndexedFields ( ) { <nl> @ @ - 438 , 7 + 267 , 7 @ @ public class ClassMetaData { <nl> } <nl> <nl> public String getPrimaryKeyGetter ( ) { <nl> - return getters . get ( primaryKey . getSimpleName ( ) . toString ( ) ) ; <nl> + return getGetter ( primaryKey . getSimpleName ( ) . toString ( ) ) ; <nl> } <nl> <nl> public boolean isNullable ( VariableElement variableElement ) { <nl> diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index 7f2aece . . ec77815 100644 <nl> - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 211 , 7 + 211 , 6 @ @ public class RealmProxyClassGenerator { <nl> String realmType = Constants . JAVA _ TO _ REALM _ TYPES . get ( fieldTypeCanonicalName ) ; <nl> <nl> / / Getter <nl> - writer . emitAnnotation ( " Override " ) ; <nl> writer . emitAnnotation ( " SuppressWarnings " , " \ " cast \ " " ) ; <nl> writer . beginMethod ( fieldTypeCanonicalName , metadata . getGetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; <nl> writer . emitStatement ( " realm . checkIfValid ( ) " ) ; <nl> @ @ - 238 , 7 + 237 , 6 @ @ public class RealmProxyClassGenerator { <nl> writer . emitEmptyLine ( ) ; <nl> <nl> / / Setter <nl> - writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( " void " , metadata . getSetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) , fieldTypeCanonicalName , " value " ) ; <nl> writer . emitStatement ( " realm . checkIfValid ( ) " ) ; <nl> / / Although setting null value for String and bytes [ ] can be handled by the JNI code , we still generate the same code here . <nl> @ @ - 265 , 7 + 263 , 6 @ @ public class RealmProxyClassGenerator { <nl> * / <nl> <nl> / / Getter <nl> - writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( fieldTypeCanonicalName , metadata . getGetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; <nl> writer . emitStatement ( " realm . checkIfValid ( ) " ) ; <nl> writer . beginControlFlow ( " if ( row . isNullLink ( % s ) ) " , fieldIndexVariableReference ( field ) ) ; <nl> @ @ - 277 , 7 + 274 , 6 @ @ public class RealmProxyClassGenerator { <nl> writer . emitEmptyLine ( ) ; <nl> <nl> / / Setter <nl> - writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( " void " , metadata . getSetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) , fieldTypeCanonicalName , " value " ) ; <nl> writer . emitStatement ( " realm . checkIfValid ( ) " ) ; <nl> writer . beginControlFlow ( " if ( value = = null ) " ) ; <nl> @ @ - 299 , 7 + 295 , 6 @ @ public class RealmProxyClassGenerator { <nl> String genericType = Utils . getGenericType ( field ) ; <nl> <nl> / / Getter <nl> - writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( fieldTypeCanonicalName , metadata . getGetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; <nl> writer . emitStatement ( " realm . checkIfValid ( ) " ) ; <nl> writer . emitSingleLineComment ( " use the cached value if available " ) ; <nl> @ @ - 322 , 7 + 317 , 6 @ @ public class RealmProxyClassGenerator { <nl> writer . emitEmptyLine ( ) ; <nl> <nl> / / Setter <nl> - writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( " void " , metadata . getSetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) , fieldTypeCanonicalName , " value " ) ; <nl> writer . emitStatement ( " realm . checkIfValid ( ) " ) ; <nl> writer . emitStatement ( " LinkView links = row . getLinkList ( % s ) " , fieldIndexVariableReference ( field ) ) ; <nl> @ @ - 641 , 9 + 635 , 11 @ @ public class RealmProxyClassGenerator { <nl> " Realm " , " realm " , className , " newObject " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , " cache " ) ; / / Argument type & argument name <nl> <nl> if ( metadata . hasPrimaryKey ( ) ) { <nl> - writer . emitStatement ( " % s realmObject = realm . createObject ( % s . class , newObject . % s ( ) ) " , className , className , metadata . getPrimaryKeyGetter ( ) ) ; <nl> + writer . emitStatement ( " % sRealmProxy realmObject = ( % sRealmProxy ) realm . createObject ( % s . class , newObject . % s ( ) ) " , <nl> + className , className , className , metadata . getPrimaryKeyGetter ( ) ) ; <nl> } else { <nl> - writer . emitStatement ( " % s realmObject = realm . createObject ( % s . class ) " , className , className ) ; <nl> + writer . emitStatement ( " % sRealmProxy realmObject = ( % sRealmProxy ) realm . createObject ( % s . class ) " , <nl> + className , className , className ) ; <nl> } <nl> writer . emitStatement ( " cache . put ( newObject , ( RealmObjectProxy ) realmObject ) " ) ; <nl> for ( VariableElement field : metadata . getFields ( ) ) { <nl> @ @ - 655 , 7 + 651 , 8 @ @ public class RealmProxyClassGenerator { <nl> if ( Utils . isRealmObject ( field ) ) { <nl> writer <nl> . emitEmptyLine ( ) <nl> - . emitStatement ( " % s % sObj = newObject . % s ( ) " , fieldType , fieldName , getter ) <nl> + . emitStatement ( " % s % sObj = ( ( % sRealmProxy ) newObject ) . % s ( ) " , <nl> + fieldType , fieldName , className , getter ) <nl> . beginControlFlow ( " if ( % sObj ! = null ) " , fieldName ) <nl> . emitStatement ( " % s cache % s = ( % s ) cache . get ( % sObj ) " , fieldType , fieldName , fieldType , fieldName ) <nl> . beginControlFlow ( " if ( cache % s ! = null ) " , fieldName ) <nl> @ @ - 673 , 7 + 670 , 8 @ @ public class RealmProxyClassGenerator { <nl> } else if ( Utils . isRealmList ( field ) ) { <nl> writer <nl> . emitEmptyLine ( ) <nl> - . emitStatement ( " RealmList < % s > % sList = newObject . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getter ) <nl> + . emitStatement ( " RealmList < % s > % sList = ( ( % sRealmProxy ) newObject ) . % s ( ) " , Utils . getGenericType <nl> + ( field ) , fieldName , className , getter ) <nl> . beginControlFlow ( " if ( % sList ! = null ) " , fieldName ) <nl> . emitStatement ( " RealmList < % s > % sRealmList = realmObject . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getter ) <nl> . beginControlFlow ( " for ( int i = 0 ; i < % sList . size ( ) ; i + + ) " , fieldName ) <nl> @ @ - 689 , 7 + 687 , 8 @ @ public class RealmProxyClassGenerator { <nl> . emitEmptyLine ( ) ; <nl> <nl> } else { <nl> - writer . emitStatement ( " realmObject . % s ( newObject . % s ( ) ) " , metadata . getSetter ( fieldName ) , getter ) ; <nl> + writer . emitStatement ( " realmObject . % s ( ( ( % sRealmProxy ) newObject ) . % s ( ) ) " , metadata . getSetter ( fieldName ) <nl> + , className , getter ) ; <nl> } <nl> } <nl> <nl> @ @ - 860 , 7 + 859 , 8 @ @ public class RealmProxyClassGenerator { <nl> Arrays . asList ( " JSONException " ) ) ; <nl> <nl> if ( ! metadata . hasPrimaryKey ( ) ) { <nl> - writer . emitStatement ( " % s obj = realm . createObject ( % s . class ) " , className , className ) ; <nl> + writer . emitStatement ( " % sRealmProxy obj = ( % sRealmProxy ) realm . createObject ( % s . class ) " , className , <nl> + className , className ) ; <nl> } else { <nl> String pkType = Utils . isString ( metadata . getPrimaryKey ( ) ) ? " String " : " Long " ; <nl> writer <nl> @ @ - 933 , 7 + 933 , 8 @ @ public class RealmProxyClassGenerator { <nl> Arrays . asList ( " Realm " , " realm " , " JsonReader " , " reader " ) , <nl> Arrays . asList ( " IOException " ) ) ; <nl> <nl> - writer . emitStatement ( " % s obj = realm . createObject ( % s . class ) " , className , className ) ; <nl> + writer . emitStatement ( " % sRealmProxy obj = ( % sRealmProxy ) realm . createObject ( % s . class ) " , className , className , <nl> + className ) ; <nl> writer . emitStatement ( " reader . beginObject ( ) " ) ; <nl> writer . beginControlFlow ( " while ( reader . hasNext ( ) ) " ) ; <nl> writer . emitStatement ( " String name = reader . nextName ( ) " ) ;
NEAREST DIFF (one line): diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / model / Test . java b / examples / introExample / src / main / java / io / realm / examples / intro / model / Test . java <nl> new file mode 100644 <nl> index 0000000 . . 201946e <nl> - - - / dev / null <nl> + + + b / examples / introExample / src / main / java / io / realm / examples / intro / model / Test . java <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + package io . realm . examples . intro . model ; <nl> + <nl> + / * * <nl> + * Created by cm on 21 / 11 / 14 . <nl> + * / <nl> + public class Test { <nl> + } <nl> diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> index a21bc7c . . ab21e5b 100644 <nl> - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java <nl> @ @ - 18 , 6 + 18 , 15 @ @ package io . realm . processor ; <nl> <nl> import com . squareup . javawriter . JavaWriter ; <nl> <nl> + import java . io . BufferedWriter ; <nl> + import java . io . IOException ; <nl> + import java . util . ArrayList ; <nl> + import java . util . EnumSet ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . ListIterator ; <nl> + import java . util . Map ; <nl> + <nl> import javax . annotation . processing . ProcessingEnvironment ; <nl> import javax . lang . model . element . Modifier ; <nl> import javax . lang . model . element . VariableElement ; <nl> @ @ - 26 , 10 + 35 , 6 @ @ import javax . lang . model . type . TypeMirror ; <nl> import javax . lang . model . util . Elements ; <nl> import javax . lang . model . util . Types ; <nl> import javax . tools . JavaFileObject ; <nl> - import java . io . BufferedWriter ; <nl> - import java . io . IOException ; <nl> - import java . lang . String ; <nl> - import java . util . * ; <nl> <nl> public class RealmProxyClassGenerator { <nl> private ProcessingEnvironment processingEnvironment ; <nl> @ @ - 43 , 6 + 48 , 11 @ @ public class RealmProxyClassGenerator { <nl> private static final String TABLE _ PREFIX = " class _ " ; <nl> private static final String PROXY _ SUFFIX = " RealmProxy " ; <nl> <nl> + private Elements elementUtils ; <nl> + private Types typeUtils ; <nl> + private TypeMirror realmObject ; <nl> + private DeclaredType realmList ; <nl> + <nl> public RealmProxyClassGenerator ( ProcessingEnvironment processingEnvironment , <nl> String className , String packageName , <nl> List < VariableElement > fields , <nl> @ @ - 127 , 55 + 137 , 6 @ @ public class RealmProxyClassGenerator { <nl> CASTING _ TYPES . put ( " byte [ ] " , " byte [ ] " ) ; <nl> } <nl> <nl> - private static final Map < String , String [ ] > HASHCODE ; <nl> - <nl> - static { <nl> - HASHCODE = new HashMap < String , String [ ] > ( ) ; <nl> - HASHCODE . put ( " boolean " , new String [ ] { <nl> - " result = 31 * result + ( % s ( ) ? 1 : 0 ) " } ) ; <nl> - HASHCODE . put ( " byte " , new String [ ] { <nl> - " result = 31 * result + ( int ) % s ( ) " } ) ; <nl> - HASHCODE . put ( " short " , new String [ ] { <nl> - " result = 31 * result + ( int ) % s ( ) " } ) ; <nl> - HASHCODE . put ( " int " , new String [ ] { <nl> - " result = 31 * result + % s ( ) " } ) ; <nl> - HASHCODE . put ( " long " , new String [ ] { <nl> - " long aLong _ % d = % s ( ) " , <nl> - " result = 31 * result + ( int ) ( aLong _ % d ^ ( aLong _ % d > > > 32 ) ) " } ) ; <nl> - HASHCODE . put ( " float " , new String [ ] { <nl> - " float aFloat _ % d = % s ( ) " , <nl> - " result = 31 * result + ( aFloat _ % d ! = + 0 . 0f ? Float . floatToIntBits ( aFloat _ % d ) : 0 ) " } ) ; <nl> - HASHCODE . put ( " double " , new String [ ] { <nl> - " long temp _ % d = Double . doubleToLongBits ( % s ( ) ) " , <nl> - " result = 31 * result + ( int ) ( temp _ % d ^ ( temp _ % d > > > 32 ) ) " } ) ; <nl> - HASHCODE . put ( " Byte " , new String [ ] { <nl> - " result = 31 * result + ( int ) % s ( ) " } ) ; <nl> - HASHCODE . put ( " Short " , new String [ ] { <nl> - " result = 31 * result + ( int ) % s ( ) " } ) ; <nl> - HASHCODE . put ( " Integer " , new String [ ] { <nl> - " result = 31 * result + % s ( ) " } ) ; <nl> - HASHCODE . put ( " Long " , new String [ ] { <nl> - " long aLong _ % d = % s ( ) " , <nl> - " result = 31 * result + ( int ) ( aLong _ % d ^ ( aLong _ % d > > > 32 ) ) " } ) ; <nl> - HASHCODE . put ( " Float " , new String [ ] { <nl> - " float aFloat _ % d = % s ( ) " , <nl> - " result = 31 * result + ( aFloat _ % d ! = + 0 . 0f ? Float . floatToIntBits ( aFloat _ % d ) : 0 ) " } ) ; <nl> - HASHCODE . put ( " Double " , new String [ ] { <nl> - " long temp _ % d = Double . doubleToLongBits ( % s ( ) ) " , <nl> - " result = 31 * result + ( int ) ( temp _ % d ^ ( temp _ % d > > > 32 ) ) " } ) ; <nl> - HASHCODE . put ( " Boolean " , new String [ ] { <nl> - " result = 31 * result + ( % s ( ) ? 1 : 0 ) " } ) ; <nl> - HASHCODE . put ( " java . lang . String " , new String [ ] { <nl> - " String aString _ % d = % s ( ) " , <nl> - " result = 31 * result + ( aString _ % d ! = null ? aString _ % d . hashCode ( ) : 0 ) " } ) ; <nl> - HASHCODE . put ( " java . lang . Date " , new String [ ] { <nl> - " Date aDate _ % d = % s ( ) " , <nl> - " result = 31 * result + ( aDate _ % d ! = null ? aDate _ % d . hashCode ( ) : 0 ) " } ) ; <nl> - HASHCODE . put ( " byte [ ] " , new String [ ] { <nl> - " byte [ ] aByteArray _ % d = % s ( ) " , <nl> - " result = 31 * result + ( aByteArray _ % d ! = null ? Arrays . hashCode ( aByteArray _ % d ) : 0 ) " } ) ; <nl> - } <nl> - <nl> private static final Map < String , Integer > HOW _ TO _ EQUAL ; <nl> private static final int EQUALS _ DIRECT = 0 ; / / compare values directly <nl> private static final int EQUALS _ NULL = 1 ; / / check for null and use . equals ( ) <nl> @ @ - 208 , 11 + 169 , 11 @ @ public class RealmProxyClassGenerator { <nl> JavaFileObject sourceFile = processingEnvironment . getFiler ( ) . createSourceFile ( qualifiedGeneratedClassName ) ; <nl> JavaWriter writer = new JavaWriter ( new BufferedWriter ( sourceFile . openWriter ( ) ) ) ; <nl> <nl> - Elements elementUtils = processingEnvironment . getElementUtils ( ) ; <nl> - Types typeUtils = processingEnvironment . getTypeUtils ( ) ; <nl> + elementUtils = processingEnvironment . getElementUtils ( ) ; <nl> + typeUtils = processingEnvironment . getTypeUtils ( ) ; <nl> <nl> - TypeMirror realmObject = elementUtils . getTypeElement ( " io . realm . RealmObject " ) . asType ( ) ; <nl> - DeclaredType realmList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; <nl> + realmObject = elementUtils . getTypeElement ( " io . realm . RealmObject " ) . asType ( ) ; <nl> + realmList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; <nl> <nl> / / Set source code indent to 4 spaces <nl> writer . setIndent ( " " ) ; <nl> @ @ - 241 , 6 + 202 , 20 @ @ public class RealmProxyClassGenerator { <nl> className ) / / class to extend <nl> . emitEmptyLine ( ) ; <nl> <nl> + emitAccessors ( writer ) ; <nl> + emitInitTableMethod ( writer ) ; <nl> + emitValidateTableMethod ( writer ) ; <nl> + emitGetFieldNamesMethod ( writer ) ; <nl> + emitToStringMethod ( writer ) ; <nl> + emitHashcodeMethod ( writer ) ; <nl> + emitEqualsMethod ( writer ) ; <nl> + <nl> + / / End the class definition <nl> + writer . endType ( ) ; <nl> + writer . close ( ) ; <nl> + } <nl> + <nl> + private void emitAccessors ( JavaWriter writer ) throws IOException { <nl> / / Accessors <nl> for ( VariableElement field : fields ) { <nl> String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> @ @ - 338 , 10 + 313 , 9 @ @ public class RealmProxyClassGenerator { <nl> } <nl> writer . emitEmptyLine ( ) ; <nl> } <nl> + } <nl> <nl> - / * * <nl> - * initTable method <nl> - * / <nl> + private void emitInitTableMethod ( JavaWriter writer ) throws IOException { <nl> writer . beginMethod ( <nl> " Table " , / / Return type <nl> " initTable " , / / Method name <nl> @ @ - 398 , 10 + 372 , 9 @ @ public class RealmProxyClassGenerator { <nl> writer . emitStatement ( " return transaction . getTable ( \ " % s % s \ " ) " , TABLE _ PREFIX , this . className ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> + } <nl> <nl> - / * * <nl> - * validateTable method <nl> - * / <nl> + private void emitValidateTableMethod ( JavaWriter writer ) throws IOException { <nl> writer . beginMethod ( <nl> " void " , / / Return type <nl> " validateTable " , / / Method name <nl> @ @ - 490 , 10 + 463 , 9 @ @ public class RealmProxyClassGenerator { <nl> writer . endControlFlow ( ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> + } <nl> <nl> - / * * <nl> - * getFieldNames method <nl> - * / <nl> + private void emitGetFieldNamesMethod ( JavaWriter writer ) throws IOException { <nl> writer . beginMethod ( " List < String > " , " getFieldNames " , EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) ) ; <nl> List < String > entries = new ArrayList < String > ( ) ; <nl> for ( VariableElement field : fields ) { <nl> @ @ - 504 , 116 + 476 , 81 @ @ public class RealmProxyClassGenerator { <nl> writer . emitStatement ( " return Arrays . asList ( % s ) " , statementSection ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> + } <nl> <nl> - / * * <nl> - * toString method <nl> - * / <nl> + private void emitToStringMethod ( JavaWriter writer ) throws IOException { <nl> writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( " String " , " toString " , EnumSet . of ( Modifier . PUBLIC ) ) ; <nl> writer . emitStatement ( " StringBuilder stringBuilder = new StringBuilder ( \ " % s = [ \ " ) " , className ) ; <nl> - for ( VariableElement field : fields ) { <nl> - String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> - writer . emitStatement ( " stringBuilder . append ( \ " { % s : \ " ) " , fieldName ) ; <nl> - writer . emitStatement ( " stringBuilder . append ( % s ( ) ) " , getters . get ( fieldName ) ) ; <nl> - writer . emitStatement ( " stringBuilder . append ( \ " } \ " ) " , fieldName ) ; <nl> + for ( int i = 0 ; i < fields . size ( ) ; i + + ) { <nl> + VariableElement field = fields . get ( i ) ; <nl> + if ( typeUtils . isAssignable ( field . asType ( ) , realmObject ) ) { <nl> + <nl> + String fieldTypeCanonicalName = field . asType ( ) . toString ( ) ; <nl> + String fieldTypeName ; <nl> + if ( fieldTypeCanonicalName . contains ( " . " ) ) { <nl> + fieldTypeName = fieldTypeCanonicalName . substring ( fieldTypeCanonicalName . lastIndexOf ( ' . ' ) + 1 ) ; <nl> + } else { <nl> + fieldTypeName = fieldTypeCanonicalName ; <nl> + } <nl> + <nl> + String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> + writer . emitStatement ( " stringBuilder . append ( \ " { % s : \ " ) " , fieldName ) ; <nl> + writer . emitStatement ( " stringBuilder . append ( % s ( ) ! = null ? \ " % s \ " + \ " @ \ " + % s ( ) . row . getIndex ( ) : \ " null \ " ) " , getters . get ( fieldName ) , fieldTypeName , getters . get ( fieldName ) ) ; <nl> + writer . emitStatement ( " stringBuilder . append ( \ " } \ " ) " ) ; <nl> + <nl> + } else { <nl> + String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> + writer . emitStatement ( " stringBuilder . append ( \ " { % s : \ " ) " , fieldName ) ; <nl> + writer . emitStatement ( " stringBuilder . append ( % s ( ) ) " , getters . get ( fieldName ) ) ; <nl> + writer . emitStatement ( " stringBuilder . append ( \ " } \ " ) " ) ; <nl> + } <nl> + <nl> + if ( i < fields . size ( ) - 1 ) { <nl> + writer . emitStatement ( " stringBuilder . append ( \ " , \ " ) " ) ; <nl> + } <nl> } <nl> + <nl> writer . emitStatement ( " stringBuilder . append ( \ " ] \ " ) " ) ; <nl> writer . emitStatement ( " return stringBuilder . toString ( ) " ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> + } <nl> <nl> - / * * <nl> - * hashCode method <nl> - * / <nl> + private void emitHashcodeMethod ( JavaWriter writer ) throws IOException { <nl> writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( " int " , " hashCode " , EnumSet . of ( Modifier . PUBLIC ) ) ; <nl> + writer . emitStatement ( " long rowIndex = row . getIndex ( ) " ) ; <nl> + writer . emitStatement ( " String tableName = row . getTable ( ) . getName ( ) " ) ; <nl> + writer . emitEmptyLine ( ) ; <nl> writer . emitStatement ( " int result = 17 " ) ; <nl> - int counter = 0 ; <nl> - for ( VariableElement field : fields ) { <nl> - String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> - String fieldTypeCanonicalName = field . asType ( ) . toString ( ) ; <nl> - if ( HASHCODE . containsKey ( fieldTypeCanonicalName ) ) { <nl> - for ( String statement : HASHCODE . get ( fieldTypeCanonicalName ) ) { <nl> - if ( statement . contains ( " % d " ) & & statement . contains ( " % s " ) ) { <nl> - / / This statement introduces a temporary variable <nl> - writer . emitStatement ( statement , counter , getters . get ( fieldName ) ) ; <nl> - } else if ( statement . contains ( " % d " ) ) { <nl> - / / This statement uses the temporary variable <nl> - writer . emitStatement ( statement , counter , counter ) ; <nl> - } else if ( statement . contains ( " % s " ) ) { <nl> - / / This is a normal statement with only one assignment <nl> - writer . emitStatement ( statement , getters . get ( fieldName ) ) ; <nl> - } else { <nl> - / / This should never happen <nl> - throw new AssertionError ( ) ; <nl> - } <nl> - } <nl> - } else { <nl> - / / Links and Link lists <nl> - writer . emitStatement ( " % s temp _ % d = % s ( ) " , fieldTypeCanonicalName , counter , getters . get ( fieldName ) ) ; <nl> - writer . emitStatement ( " result = 31 * result + ( temp _ % d ! = null ? temp _ % d . hashCode ( ) : 0 ) " , counter , counter ) ; <nl> - } <nl> - counter + + ; <nl> - } <nl> + writer . emitStatement ( " result = 31 * result + realm . getPath ( ) . hashCode ( ) " ) ; <nl> + writer . emitStatement ( " result = 31 * result + ( ( tableName ! = null ) ? tableName . hashCode ( ) : 0 ) " ) ; <nl> + writer . emitStatement ( " result = 31 * result + ( int ) ( rowIndex ^ ( rowIndex > > > 32 ) ) " ) ; <nl> writer . emitStatement ( " return result " ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> + } <nl> <nl> - / * * <nl> - * equals method <nl> - * / <nl> + private void emitEqualsMethod ( JavaWriter writer ) throws IOException { <nl> String proxyClassName = className + PROXY _ SUFFIX ; <nl> writer . emitAnnotation ( " Override " ) ; <nl> writer . beginMethod ( " boolean " , " equals " , EnumSet . of ( Modifier . PUBLIC ) , " Object " , " o " ) ; <nl> writer . emitStatement ( " if ( this = = o ) return true " ) ; <nl> writer . emitStatement ( " if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false " ) ; <nl> writer . emitStatement ( " % s a % s = ( % s ) o " , proxyClassName , className , proxyClassName ) ; / / FooRealmProxy aFoo = ( FooRealmProxy ) o <nl> - <nl> - for ( VariableElement field : fields ) { <nl> - String fieldName = field . getSimpleName ( ) . toString ( ) ; <nl> - String capFieldName = capitaliseFirstChar ( fieldName ) ; <nl> - String fieldTypeCanonicalName = field . asType ( ) . toString ( ) ; <nl> - if ( HOW _ TO _ EQUAL . containsKey ( fieldTypeCanonicalName ) ) { <nl> - switch ( HOW _ TO _ EQUAL . get ( fieldTypeCanonicalName ) ) { <nl> - case EQUALS _ DIRECT : / / if ( getField ( ) ! = aFoo . getField ( ) ) return false <nl> - writer . emitStatement ( " if ( % s ( ) ! = a % s . % s ( ) ) return false " , getters . get ( fieldName ) , className , getters . get ( fieldName ) ) ; <nl> - break ; <nl> - case EQUALS _ NULL : / / if ( getField ( ) ! = null = ! getField ( ) . equals ( aFoo . getField ( ) ) : aFoo . getField ( ) ! = null ) return false <nl> - writer . emitStatement ( " if ( % s ( ) ! = null ? ! % s ( ) . equals ( a % s . % s ( ) ) : a % s . % s ( ) ! = null ) return false " , <nl> - getters . get ( fieldName ) , <nl> - getters . get ( fieldName ) , className , getters . get ( fieldName ) , <nl> - className , getters . get ( fieldName ) ) ; <nl> - break ; <nl> - case EQUALS _ ARRAY : / / if ( ! Arrays . equals ( getField ( ) , aFoo . getField ( ) ) ) return false <nl> - writer . emitStatement ( " if ( ! Arrays . equals ( % s ( ) , a % s . % s ( ) ) ) return false " , <nl> - getters . get ( fieldName ) , <nl> - className , getters . get ( fieldName ) ) ; <nl> - break ; <nl> - case EQUALS _ COMPARE : / / if ( <nl> - writer . emitStatement ( " if ( % s . compare ( % s ( ) , a % s . % s ( ) ) ! = 0 ) return false " , <nl> - capitaliseFirstChar ( fieldTypeCanonicalName ) , getters . get ( fieldName ) , className , <nl> - getters . get ( fieldName ) ) ; <nl> - break ; <nl> - } <nl> - } <nl> - else if ( typeUtils . isAssignable ( field . asType ( ) , realmObject ) | | typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { <nl> - writer . emitStatement ( " if ( % s ( ) ! = null ? ! % s ( ) . equals ( a % s . % s ( ) ) : a % s . % s ( ) ! = null ) return false " , <nl> - getters . get ( fieldName ) , <nl> - getters . get ( fieldName ) , className , getters . get ( fieldName ) , <nl> - className , getters . get ( fieldName ) ) ; <nl> - } <nl> - } <nl> + writer . emitEmptyLine ( ) ; <nl> + writer . emitStatement ( " String path = realm . getPath ( ) " ) ; <nl> + writer . emitStatement ( " String otherPath = a % s . realm . getPath ( ) " , className ) ; <nl> + writer . emitStatement ( " if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; " ) ; <nl> + writer . emitEmptyLine ( ) ; <nl> + writer . emitStatement ( " String tableName = row . getTable ( ) . getName ( ) " ) ; <nl> + writer . emitStatement ( " String otherTableName = a % s . row . getTable ( ) . getName ( ) " , className ) ; <nl> + writer . emitStatement ( " if ( tableName ! = null ? ! tableName . equals ( otherTableName ) : otherTableName ! = null ) return false " ) ; <nl> + writer . emitEmptyLine ( ) ; <nl> writer . emitStatement ( " return true " ) ; <nl> writer . endMethod ( ) ; <nl> writer . emitEmptyLine ( ) ; <nl> - <nl> - / / End the class definition <nl> - writer . endType ( ) ; <nl> - writer . close ( ) ; <nl> - } <nl> - <nl> - private static String capitaliseFirstChar ( String input ) { <nl> - return input . substring ( 0 , 1 ) . toUpperCase ( ) + input . substring ( 1 ) ; <nl> } <nl> <nl> public static String joinStringList ( List < String > strings , String separator ) { <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmObjectTest . java b / realm / src / androidTest / java / io / realm / RealmObjectTest . java <nl> index c7a7b5e . . 8d45072 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmObjectTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmObjectTest . java <nl> @ @ - 217 , 7 + 217 , 8 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> <nl> testRealm . commitTransaction ( ) ; <nl> <nl> - assertEquals ( " " , foo . toString ( ) ) ; <nl> + String expected = " CyclicType = [ { name : Foo } , { object : CyclicType @ 1 } , { objects : CyclicType [ ] } ] " ; <nl> + assertEquals ( expected , foo . toString ( ) ) ; <nl> } <nl> <nl> public void testCyclicHashCode ( ) { <nl> @ @ - 234 , 6 + 235 , 6 @ @ public class RealmObjectTest extends AndroidTestCase { <nl> <nl> testRealm . commitTransaction ( ) ; <nl> <nl> - assertEquals ( 0 , foo . hashCode ( ) ) ; <nl> + assertEquals ( 1344723738 , foo . hashCode ( ) ) ; <nl> } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 83d7439 . . a91a945 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 91 , 6 + 91 , 7 @ @ public class Realm { <nl> private Handler handler ; <nl> <nl> private final int id ; <nl> + private final String path ; <nl> private final SharedGroup sharedGroup ; <nl> private final ImplicitTransaction transaction ; <nl> private final Map < Class < ? > , String > simpleClassNames = new HashMap < Class < ? > , String > ( ) ; <nl> @ @ - 115 , 6 + 116 , 7 @ @ public class Realm { <nl> private Realm ( String absolutePath , byte [ ] key , boolean autoRefresh ) { <nl> this . sharedGroup = new SharedGroup ( absolutePath , true , key ) ; <nl> this . transaction = sharedGroup . beginImplicitTransaction ( ) ; <nl> + this . path = absolutePath ; <nl> this . id = absolutePath . hashCode ( ) ; <nl> setAutoRefresh ( autoRefresh ) ; <nl> } <nl> @ @ - 854 , 4 + 856 , 13 @ @ public class Realm { <nl> } <nl> return result ; <nl> } <nl> + <nl> + / * * <nl> + * Returns the absolute path to where this Realm is persisted on disk . <nl> + * <nl> + * @ return The absolute path to the realm file . <nl> + * / <nl> + public String getPath ( ) { <nl> + return path ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> index 3eadb4e . . ea31fb8 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 141 , 4 + 141 , 20 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> TableQuery query = this . view . where ( ) ; <nl> return new RealmQuery < E > ( this . realm , query , clazz ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + StringBuilder sb = new StringBuilder ( ) ; <nl> + sb . append ( clazz . getSimpleName ( ) ) ; <nl> + sb . append ( " [ " ) ; <nl> + for ( int i = 0 ; i < size ( ) ; i + + ) { <nl> + sb . append ( " @ " ) ; <nl> + sb . append ( get ( i ) . row . getIndex ( ) ) ; / / TODO Replace with primary key when possible <nl> + if ( i < size ( ) - 1 ) { <nl> + sb . append ( ' , ' ) ; <nl> + } <nl> + } <nl> + sb . append ( " ] " ) ; <nl> + return sb . toString ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / internal / Table . java b / realm / src / main / java / io / realm / internal / Table . java <nl> index 8ad15c3 . . 3f620d6 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / Table . java <nl> + + + b / realm / src / main / java / io / realm / internal / Table . java <nl> @ @ - 112 , 7 + 112 , 6 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> synchronized ( context ) { <nl> if ( nativePtr ! = 0 ) { <nl> nativeClose ( nativePtr ) ; <nl> - <nl> if ( DEBUG ) { <nl> TableCount - - ; <nl> System . err . println ( " = = = = CLOSE " + tableNo + " ptr = " + nativePtr + " remaining " + TableCount ) ; <nl> @ @ - 1393 , 8 + 1392 , 12 @ @ public class Table implements TableOrView , TableSchema , Closeable { <nl> <nl> protected native long nativeGetDistinctView ( long nativePtr , long columnIndex ) ; <nl> <nl> - / / get the table name as it is in the associated group . <nl> - protected String getName ( ) { <nl> + / * * <nl> + * Return the table name as it is in the associated group . <nl> + * <nl> + * @ return Name of the the table or null if it not part of a group . <nl> + * / <nl> + public String getName ( ) { <nl> return nativeGetName ( nativePtr ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / examples / build . gradle b / examples / build . gradle 
 index c07e671 . . 480fe2f 100644 
 - - - a / examples / build . gradle 
 + + + b / examples / build . gradle 
 @ @ - 18 , 7 + 18 , 7 @ @ allprojects { 
 classpath ' com . android . tools . build : gradle : 1 . 5 . 0 ' 
 classpath ' com . jfrog . bintray . gradle : gradle - bintray - plugin : 1 . 2 ' 
 classpath ' com . jakewharton . sdkmanager : gradle - plugin : 0 . 12 . 0 ' 
 - classpath ' com . novoda : gradle - android - command - plugin : 1 . 3 . 0 ' 
 + classpath ' com . novoda : gradle - android - command - plugin : 1 . 5 . 0 ' 
 classpath " io . realm : realm - gradle - plugin : $ { currentVersion } " 
 } 
 } 
 diff - - git a / examples / jsonExample / src / main / java / io / realm / examples / json / City . java b / examples / jsonExample / src / main / java / io / realm / examples / json / City . java 
 index a583df8 . . 7efc87a 100644 
 - - - a / examples / jsonExample / src / main / java / io / realm / examples / json / City . java 
 + + + b / examples / jsonExample / src / main / java / io / realm / examples / json / City . java 
 @ @ - 19 , 24 + 19 , 6 @ @ package io . realm . examples . json ; 
 import io . realm . RealmObject ; 
 
 public class City extends RealmObject { 
 - 
 - private String name ; 
 - private long votes ; 
 - 
 - public String getName ( ) { 
 - return name ; 
 - } 
 - 
 - public void setName ( String name ) { 
 - this . name = name ; 
 - } 
 - 
 - public long getVotes ( ) { 
 - return votes ; 
 - } 
 - 
 - public void setVotes ( long votes ) { 
 - this . votes = votes ; 
 - } 
 - 
 + public String name ; 
 + public long votes ; 
 } 
 diff - - git a / examples / jsonExample / src / main / java / io / realm / examples / json / CityAdapter . java b / examples / jsonExample / src / main / java / io / realm / examples / json / CityAdapter . java 
 index d8226bd . . 90df19a 100644 
 - - - a / examples / jsonExample / src / main / java / io / realm / examples / json / CityAdapter . java 
 + + + b / examples / jsonExample / src / main / java / io / realm / examples / json / CityAdapter . java 
 @ @ - 77 , 8 + 77 , 8 @ @ public class CityAdapter extends BaseAdapter { 
 City city = cities . get ( position ) ; 
 
 if ( city ! = null ) { 
 - ( ( TextView ) currentView . findViewById ( R . id . name ) ) . setText ( city . getName ( ) ) ; 
 - ( ( TextView ) currentView . findViewById ( R . id . votes ) ) . setText ( Long . toString ( city . getVotes ( ) ) ) ; 
 + ( ( TextView ) currentView . findViewById ( R . id . name ) ) . setText ( city . name ) ; 
 + ( ( TextView ) currentView . findViewById ( R . id . votes ) ) . setText ( Long . toString ( city . votes ) ) ; 
 } 
 
 return currentView ; 
 diff - - git a / examples / settings . gradle b / examples / settings . gradle 
 index ebcb460 . . 59e1a48 100644 
 - - - a / examples / settings . gradle 
 + + + b / examples / settings . gradle 
 @ @ - 3 , 7 + 3 , 7 @ @ include ' encryptionExample ' 
 include ' gridViewExample ' 
 include ' introExample ' 
 include ' jsonExample ' 
 - include ' kotlinExample ' 
 + / / include ' kotlinExample ' 
 include ' migrationExample ' 
 include ' moduleExample : app ' 
 include ' moduleExample : library ' 
 diff - - git a / gradle - plugin / build . gradle b / gradle - plugin / build . gradle 
 index ee402fb . . 0f146b8 100644 
 - - - a / gradle - plugin / build . gradle 
 + + + b / gradle - plugin / build . gradle 
 @ @ - 25 , 6 + 25 , 7 @ @ dependencies { 
 compile ' com . android . tools . build : transform - api : 1 . 5 . 0 ' 
 compile ' org . javassist : javassist : 3 . 20 . 0 - GA ' 
 compile " io . realm : realm - annotations : $ { version } " 
 + compile " io . realm : realm - android : 0 . 86 . 0 @ jar " 
 } 
 
 / / for Ant filter 
 diff - - git a / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy 
 index 294ba68 . . 54e3152 100644 
 - - - a / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy 
 + + + b / gradle - plugin / src / main / groovy / io / realm / gradle / RealmTransformer . groovy 
 @ @ - 72 , 11 + 72 , 14 @ @ class RealmTransformer extends Transform { 
 / / will use a cached object and all the classes will result frozen . 
 ClassPool classPool = new ClassPool ( null ) 
 classPool . appendSystemPath ( ) 
 + classPool . appendClassPath ( new LoaderClassPath ( getClass ( ) . getClassLoader ( ) ) ) 
 
 folders . each { File folder - > 
 classPool . appendClassPath ( folder . canonicalPath ) 
 } 
 
 + println " Contains io . realm . RealmList : $ { classPool . getOrNull ( ' io . realm . RealmList ' ) } " 
 + 
 def proxyClasses = classFiles . findAll { key , value - > key . name . endsWith ( ' RealmProxy . class ' ) } 
 println " Proxy Classes : $ { proxyClasses * . value } " 
 
 @ @ - 86 , 7 + 89 , 9 @ @ class RealmTransformer extends Transform { 
 println " Model Classes : $ { modelClasses * . name } " 
 
 def managedFields = [ ] 
 - modelClasses . each { managedFields . addAll ( it . declaredFields ) } 
 + modelClasses . each { 
 + managedFields . addAll ( it . declaredFields . findAll { it . getAnnotation ( Ignore . class ) = = null } ) 
 + } 
 println " Managed Fields : $ { managedFields * . name } " 
 
 modelClasses . each { addRealmAccessors ( it ) } 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 index e190f88 . . c847691 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / ClassMetaData . java 
 @ @ - 18 , 16 + 18 , 13 @ @ package io . realm . processor ; 
 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 - import java . util . HashMap ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 - import java . util . Map ; 
 import java . util . Set ; 
 
 import javax . annotation . processing . ProcessingEnvironment ; 
 import javax . lang . model . element . Element ; 
 import javax . lang . model . element . ElementKind ; 
 - import javax . lang . model . element . ExecutableElement ; 
 import javax . lang . model . element . Modifier ; 
 import javax . lang . model . element . PackageElement ; 
 import javax . lang . model . element . TypeElement ; 
 @ @ - 36 , 7 + 33 , 6 @ @ import javax . lang . model . type . TypeKind ; 
 import javax . lang . model . type . TypeMirror ; 
 import javax . lang . model . util . Types ; 
 
 - import io . realm . annotations . Ignore ; 
 import io . realm . annotations . Index ; 
 import io . realm . annotations . PrimaryKey ; 
 import io . realm . annotations . Required ; 
 @ @ - 52 , 15 + 48 , 8 @ @ public class ClassMetaData { 
 private boolean hasDefaultConstructor ; / / True if model has a public no - arg constructor . 
 private VariableElement primaryKey ; / / Reference to field used as primary key , if any . 
 private List < VariableElement > fields = new ArrayList < VariableElement > ( ) ; / / List of all fields in the class except those @ Ignored . 
 - private List < String > fieldNames = new ArrayList < String > ( ) ; 
 - private List < String > ignoreFieldNames = new ArrayList < String > ( ) ; 
 private List < VariableElement > indexedFields = new ArrayList < VariableElement > ( ) ; / / list of all fields marked @ Index . 
 private Set < VariableElement > nullableFields = new HashSet < VariableElement > ( ) ; / / Set of fields which can be nullable 
 - private Set < String > expectedGetters = new HashSet < String > ( ) ; / / Set of fieldnames that are expected to have a getter 
 - private Set < String > expectedSetters = new HashSet < String > ( ) ; / / Set of fieldnames that are expected to have a setter 
 - private Set < ExecutableElement > methods = new HashSet < ExecutableElement > ( ) ; / / List of all methods in the model class 
 - private Map < String , String > getters = new HashMap < String , String > ( ) ; / / Map between fieldnames and their getters 
 - private Map < String , String > setters = new HashMap < String , String > ( ) ; / / Map between fieldname and their setters 
 
 private final List < TypeMirror > validPrimaryKeyTypes ; 
 private final Types typeUtils ; 
 @ @ - 105 , 48 + 94 , 11 @ @ public class ClassMetaData { 
 
 if ( ! categorizeClassElements ( ) ) return false ; 
 if ( ! checkListTypes ( ) ) return false ; 
 - if ( ! checkMethods ( ) ) return false ; 
 if ( ! checkDefaultConstructor ( ) ) return false ; 
 - if ( ! checkRequiredGetters ( ) ) return false ; 
 - if ( ! checkRequireSetters ( ) ) return false ; 
 
 return true ; / / Meta data was successfully generated 
 } 
 
 - / / Check that only allowed methods are present in the RealmObject class 
 - private boolean checkMethods ( ) { 
 - for ( ExecutableElement executableElement : methods ) { 
 - String methodName = executableElement . getSimpleName ( ) . toString ( ) ; 
 - 
 - / / Check the modifiers of the method 
 - Set < Modifier > modifiers = executableElement . getModifiers ( ) ; 
 - if ( modifiers . contains ( Modifier . STATIC ) ) { 
 - continue ; / / We ' re cool with static methods . Move along ! 
 - } else if ( ! modifiers . contains ( Modifier . PUBLIC ) ) { 
 - Utils . error ( " The methods of the RealmObject class must be public " , executableElement ) ; 
 - return false ; 
 - } 
 - 
 - / / Check that getters and setters are valid 
 - if ( methodName . startsWith ( " get " ) | | methodName . startsWith ( " is " ) ) { 
 - if ( ! checkGetterMethod ( methodName ) ) { 
 - Utils . error ( String . format ( " Getter % s is not associated to any field " , methodName ) , executableElement ) ; 
 - return false ; 
 - } 
 - } else if ( methodName . startsWith ( " set " ) ) { 
 - if ( ! checkSetterMethod ( methodName ) ) { 
 - Utils . error ( String . format ( " Setter % s is not associated to any field " , methodName ) , executableElement ) ; 
 - return false ; 
 - } 
 - } else { 
 - Utils . error ( " Only getters and setters should be defined in RealmObject classes " , executableElement ) ; 
 - return false ; 
 - } 
 - } 
 - 
 - return true ; 
 - } 
 - 
 private boolean checkListTypes ( ) { 
 for ( VariableElement field : fields ) { 
 if ( Utils . isRealmList ( field ) ) { 
 @ @ - 159 , 106 + 111 , 6 @ @ public class ClassMetaData { 
 return true ; 
 } 
 
 - / / Verify that a setter is used to set a field in the RealmObject class . 
 - / / Note : This is done heuristically by comparing the name of setter with the name of the field . 
 - / / Annotation processors does not allow us to inspect individual statements . 
 - private boolean checkSetterMethod ( String methodName ) { 
 - boolean found = false ; 
 - 
 - String methodMinusSet = methodName . substring ( 3 ) ; 
 - String methodMinusSetCapitalised = Utils . lowerFirstChar ( methodMinusSet ) ; 
 - String methodMenusSetPlusIs = " is " + methodMinusSet ; 
 - 
 - if ( fieldNames . contains ( methodMinusSet ) ) { / / mPerson - > setmPerson 
 - expectedSetters . remove ( methodMinusSet ) ; 
 - if ( ! ignoreFieldNames . contains ( methodMinusSet ) ) { 
 - setters . put ( methodMinusSet , methodName ) ; 
 - } 
 - found = true ; 
 - } else if ( fieldNames . contains ( methodMinusSetCapitalised ) ) { / / person - > setPerson 
 - expectedSetters . remove ( methodMinusSetCapitalised ) ; 
 - if ( ! ignoreFieldNames . contains ( methodMinusSetCapitalised ) ) { 
 - setters . put ( methodMinusSetCapitalised , methodName ) ; 
 - } 
 - found = true ; 
 - } else if ( fieldNames . contains ( methodMenusSetPlusIs ) ) { / / isReady - > setReady 
 - expectedSetters . remove ( methodMenusSetPlusIs ) ; 
 - if ( ! ignoreFieldNames . contains ( methodMenusSetPlusIs ) ) { 
 - setters . put ( methodMenusSetPlusIs , methodName ) ; 
 - } 
 - found = true ; 
 - } 
 - 
 - return found ; 
 - } 
 - 
 - / / Verify that a getter is used to get a field in the RealmObject class . 
 - / / Note : This is done heuristically by comparing the name of getter with the name of the field . 
 - / / Annotation processors does not allow us to inspect individual statements . 
 - private boolean checkGetterMethod ( String methodName ) { 
 - boolean found = false ; 
 - 
 - if ( methodName . startsWith ( " is " ) ) { 
 - String methodMinusIs = methodName . substring ( 2 ) ; 
 - String methodMinusIsCapitalised = Utils . lowerFirstChar ( methodMinusIs ) ; 
 - if ( fieldNames . contains ( methodName ) ) { / / isDone - > isDone 
 - expectedGetters . remove ( methodName ) ; 
 - if ( ! ignoreFieldNames . contains ( methodName ) ) { 
 - getters . put ( methodName , methodName ) ; 
 - } 
 - found = true ; 
 - } else if ( fieldNames . contains ( methodMinusIs ) ) { / / mDone - > ismDone 
 - expectedGetters . remove ( methodMinusIs ) ; 
 - if ( ! ignoreFieldNames . contains ( methodMinusIs ) ) { 
 - getters . put ( methodMinusIs , methodName ) ; 
 - } 
 - found = true ; 
 - } else if ( fieldNames . contains ( methodMinusIsCapitalised ) ) { / / done - > isDone 
 - expectedGetters . remove ( methodMinusIsCapitalised ) ; 
 - if ( ! ignoreFieldNames . contains ( methodMinusIsCapitalised ) ) { 
 - getters . put ( methodMinusIsCapitalised , methodName ) ; 
 - } 
 - found = true ; 
 - } 
 - } 
 - 
 - if ( ! found & & methodName . startsWith ( " get " ) ) { 
 - String methodMinusGet = methodName . substring ( 3 ) ; 
 - String methodMinusGetCapitalised = Utils . lowerFirstChar ( methodMinusGet ) ; 
 - if ( fieldNames . contains ( methodMinusGet ) ) { / / mPerson - > getmPerson 
 - expectedGetters . remove ( methodMinusGet ) ; 
 - if ( ! ignoreFieldNames . contains ( methodMinusGet ) ) { 
 - getters . put ( methodMinusGet , methodName ) ; 
 - } 
 - found = true ; 
 - } else if ( fieldNames . contains ( methodMinusGetCapitalised ) ) { / / person - > getPerson 
 - expectedGetters . remove ( methodMinusGetCapitalised ) ; 
 - if ( ! ignoreFieldNames . contains ( methodMinusGetCapitalised ) ) { 
 - getters . put ( methodMinusGetCapitalised , methodName ) ; 
 - } 
 - found = true ; 
 - } 
 - } 
 - 
 - return found ; 
 - } 
 - 
 - / / Report any setters that are missing 
 - private boolean checkRequireSetters ( ) { 
 - for ( String expectedSetter : expectedSetters ) { 
 - Utils . error ( " No setter found for field " + expectedSetter ) ; 
 - } 
 - return expectedSetters . size ( ) = = 0 ; 
 - } 
 - 
 - / / Report any getters that are missing 
 - private boolean checkRequiredGetters ( ) { 
 - for ( String expectedGetter : expectedGetters ) { 
 - Utils . error ( " No getter found for field " + expectedGetter ) ; 
 - } 
 - return expectedGetters . size ( ) = = 0 ; 
 - } 
 - 
 / / Report if the default constructor is missing 
 private boolean checkDefaultConstructor ( ) { 
 if ( ! hasDefaultConstructor ) { 
 @ @ - 277 , 21 + 129 , 12 @ @ public class ClassMetaData { 
 
 if ( elementKind . equals ( ElementKind . FIELD ) ) { 
 VariableElement variableElement = ( VariableElement ) element ; 
 - String fieldName = variableElement . getSimpleName ( ) . toString ( ) ; 
 
 Set < Modifier > modifiers = variableElement . getModifiers ( ) ; 
 if ( modifiers . contains ( Modifier . STATIC ) ) { 
 continue ; / / completely ignore any static fields 
 } 
 
 - if ( variableElement . getAnnotation ( Ignore . class ) ! = null ) { 
 - / / The field has the @ Ignore annotation . No need to go any further . 
 - String ignoredFieldName = variableElement . getSimpleName ( ) . toString ( ) ; 
 - fieldNames . add ( ignoredFieldName ) ; 
 - ignoreFieldNames . add ( ignoredFieldName ) ; 
 - continue ; 
 - } 
 - 
 if ( variableElement . getAnnotation ( Index . class ) ! = null ) { 
 / / The field has the @ Index annotation . It ' s only valid for column types : 
 / / STRING , DATE , INTEGER , BOOLEAN 
 @ @ - 360 , 27 + 203 , 13 @ @ public class ClassMetaData { 
 } 
 } 
 
 - if ( ! variableElement . getModifiers ( ) . contains ( Modifier . PRIVATE ) ) { 
 - Utils . error ( " The fields of the RealmObject class must be private " , variableElement ) ; 
 - return false ; 
 - } 
 - 
 fields . add ( variableElement ) ; 
 - expectedGetters . add ( fieldName ) ; 
 - expectedSetters . add ( fieldName ) ; 
 } else if ( elementKind . equals ( ElementKind . CONSTRUCTOR ) ) { 
 hasDefaultConstructor = hasDefaultConstructor | | Utils . isDefaultConstructor ( element ) ; 
 
 - } else if ( elementKind . equals ( ElementKind . METHOD ) ) { 
 - ExecutableElement executableElement = ( ExecutableElement ) element ; 
 - methods . add ( executableElement ) ; 
 } 
 } 
 
 - for ( VariableElement field : fields ) { 
 - fieldNames . add ( field . getSimpleName ( ) . toString ( ) ) ; 
 - } 
 - 
 if ( fields . size ( ) = = 0 ) { 
 Utils . error ( className + " must contain at least 1 persistable field " ) ; 
 } 
 @ @ - 418 , 11 + 247 , 11 @ @ public class ClassMetaData { 
 } 
 
 public String getGetter ( String fieldName ) { 
 - return getters . get ( fieldName ) ; 
 + return " realmGetter $ " + fieldName ; 
 } 
 
 public String getSetter ( String fieldName ) { 
 - return setters . get ( fieldName ) ; 
 + return " realmSetter $ " + fieldName ; 
 } 
 
 public List < VariableElement > getIndexedFields ( ) { 
 @ @ - 438 , 7 + 267 , 7 @ @ public class ClassMetaData { 
 } 
 
 public String getPrimaryKeyGetter ( ) { 
 - return getters . get ( primaryKey . getSimpleName ( ) . toString ( ) ) ; 
 + return getGetter ( primaryKey . getSimpleName ( ) . toString ( ) ) ; 
 } 
 
 public boolean isNullable ( VariableElement variableElement ) { 
 diff - - git a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index 7f2aece . . ec77815 100644 
 - - - a / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 211 , 7 + 211 , 6 @ @ public class RealmProxyClassGenerator { 
 String realmType = Constants . JAVA _ TO _ REALM _ TYPES . get ( fieldTypeCanonicalName ) ; 
 
 / / Getter 
 - writer . emitAnnotation ( " Override " ) ; 
 writer . emitAnnotation ( " SuppressWarnings " , " \ " cast \ " " ) ; 
 writer . beginMethod ( fieldTypeCanonicalName , metadata . getGetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; 
 writer . emitStatement ( " realm . checkIfValid ( ) " ) ; 
 @ @ - 238 , 7 + 237 , 6 @ @ public class RealmProxyClassGenerator { 
 writer . emitEmptyLine ( ) ; 
 
 / / Setter 
 - writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( " void " , metadata . getSetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) , fieldTypeCanonicalName , " value " ) ; 
 writer . emitStatement ( " realm . checkIfValid ( ) " ) ; 
 / / Although setting null value for String and bytes [ ] can be handled by the JNI code , we still generate the same code here . 
 @ @ - 265 , 7 + 263 , 6 @ @ public class RealmProxyClassGenerator { 
 * / 
 
 / / Getter 
 - writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( fieldTypeCanonicalName , metadata . getGetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; 
 writer . emitStatement ( " realm . checkIfValid ( ) " ) ; 
 writer . beginControlFlow ( " if ( row . isNullLink ( % s ) ) " , fieldIndexVariableReference ( field ) ) ; 
 @ @ - 277 , 7 + 274 , 6 @ @ public class RealmProxyClassGenerator { 
 writer . emitEmptyLine ( ) ; 
 
 / / Setter 
 - writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( " void " , metadata . getSetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) , fieldTypeCanonicalName , " value " ) ; 
 writer . emitStatement ( " realm . checkIfValid ( ) " ) ; 
 writer . beginControlFlow ( " if ( value = = null ) " ) ; 
 @ @ - 299 , 7 + 295 , 6 @ @ public class RealmProxyClassGenerator { 
 String genericType = Utils . getGenericType ( field ) ; 
 
 / / Getter 
 - writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( fieldTypeCanonicalName , metadata . getGetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) ) ; 
 writer . emitStatement ( " realm . checkIfValid ( ) " ) ; 
 writer . emitSingleLineComment ( " use the cached value if available " ) ; 
 @ @ - 322 , 7 + 317 , 6 @ @ public class RealmProxyClassGenerator { 
 writer . emitEmptyLine ( ) ; 
 
 / / Setter 
 - writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( " void " , metadata . getSetter ( fieldName ) , EnumSet . of ( Modifier . PUBLIC ) , fieldTypeCanonicalName , " value " ) ; 
 writer . emitStatement ( " realm . checkIfValid ( ) " ) ; 
 writer . emitStatement ( " LinkView links = row . getLinkList ( % s ) " , fieldIndexVariableReference ( field ) ) ; 
 @ @ - 641 , 9 + 635 , 11 @ @ public class RealmProxyClassGenerator { 
 " Realm " , " realm " , className , " newObject " , " boolean " , " update " , " Map < RealmObject , RealmObjectProxy > " , " cache " ) ; / / Argument type & argument name 
 
 if ( metadata . hasPrimaryKey ( ) ) { 
 - writer . emitStatement ( " % s realmObject = realm . createObject ( % s . class , newObject . % s ( ) ) " , className , className , metadata . getPrimaryKeyGetter ( ) ) ; 
 + writer . emitStatement ( " % sRealmProxy realmObject = ( % sRealmProxy ) realm . createObject ( % s . class , newObject . % s ( ) ) " , 
 + className , className , className , metadata . getPrimaryKeyGetter ( ) ) ; 
 } else { 
 - writer . emitStatement ( " % s realmObject = realm . createObject ( % s . class ) " , className , className ) ; 
 + writer . emitStatement ( " % sRealmProxy realmObject = ( % sRealmProxy ) realm . createObject ( % s . class ) " , 
 + className , className , className ) ; 
 } 
 writer . emitStatement ( " cache . put ( newObject , ( RealmObjectProxy ) realmObject ) " ) ; 
 for ( VariableElement field : metadata . getFields ( ) ) { 
 @ @ - 655 , 7 + 651 , 8 @ @ public class RealmProxyClassGenerator { 
 if ( Utils . isRealmObject ( field ) ) { 
 writer 
 . emitEmptyLine ( ) 
 - . emitStatement ( " % s % sObj = newObject . % s ( ) " , fieldType , fieldName , getter ) 
 + . emitStatement ( " % s % sObj = ( ( % sRealmProxy ) newObject ) . % s ( ) " , 
 + fieldType , fieldName , className , getter ) 
 . beginControlFlow ( " if ( % sObj ! = null ) " , fieldName ) 
 . emitStatement ( " % s cache % s = ( % s ) cache . get ( % sObj ) " , fieldType , fieldName , fieldType , fieldName ) 
 . beginControlFlow ( " if ( cache % s ! = null ) " , fieldName ) 
 @ @ - 673 , 7 + 670 , 8 @ @ public class RealmProxyClassGenerator { 
 } else if ( Utils . isRealmList ( field ) ) { 
 writer 
 . emitEmptyLine ( ) 
 - . emitStatement ( " RealmList < % s > % sList = newObject . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getter ) 
 + . emitStatement ( " RealmList < % s > % sList = ( ( % sRealmProxy ) newObject ) . % s ( ) " , Utils . getGenericType 
 + ( field ) , fieldName , className , getter ) 
 . beginControlFlow ( " if ( % sList ! = null ) " , fieldName ) 
 . emitStatement ( " RealmList < % s > % sRealmList = realmObject . % s ( ) " , Utils . getGenericType ( field ) , fieldName , getter ) 
 . beginControlFlow ( " for ( int i = 0 ; i < % sList . size ( ) ; i + + ) " , fieldName ) 
 @ @ - 689 , 7 + 687 , 8 @ @ public class RealmProxyClassGenerator { 
 . emitEmptyLine ( ) ; 
 
 } else { 
 - writer . emitStatement ( " realmObject . % s ( newObject . % s ( ) ) " , metadata . getSetter ( fieldName ) , getter ) ; 
 + writer . emitStatement ( " realmObject . % s ( ( ( % sRealmProxy ) newObject ) . % s ( ) ) " , metadata . getSetter ( fieldName ) 
 + , className , getter ) ; 
 } 
 } 
 
 @ @ - 860 , 7 + 859 , 8 @ @ public class RealmProxyClassGenerator { 
 Arrays . asList ( " JSONException " ) ) ; 
 
 if ( ! metadata . hasPrimaryKey ( ) ) { 
 - writer . emitStatement ( " % s obj = realm . createObject ( % s . class ) " , className , className ) ; 
 + writer . emitStatement ( " % sRealmProxy obj = ( % sRealmProxy ) realm . createObject ( % s . class ) " , className , 
 + className , className ) ; 
 } else { 
 String pkType = Utils . isString ( metadata . getPrimaryKey ( ) ) ? " String " : " Long " ; 
 writer 
 @ @ - 933 , 7 + 933 , 8 @ @ public class RealmProxyClassGenerator { 
 Arrays . asList ( " Realm " , " realm " , " JsonReader " , " reader " ) , 
 Arrays . asList ( " IOException " ) ) ; 
 
 - writer . emitStatement ( " % s obj = realm . createObject ( % s . class ) " , className , className ) ; 
 + writer . emitStatement ( " % sRealmProxy obj = ( % sRealmProxy ) realm . createObject ( % s . class ) " , className , className , 
 + className ) ; 
 writer . emitStatement ( " reader . beginObject ( ) " ) ; 
 writer . beginControlFlow ( " while ( reader . hasNext ( ) ) " ) ; 
 writer . emitStatement ( " String name = reader . nextName ( ) " ) ;

NEAREST DIFF:
diff - - git a / examples / introExample / src / main / java / io / realm / examples / intro / model / Test . java b / examples / introExample / src / main / java / io / realm / examples / intro / model / Test . java 
 new file mode 100644 
 index 0000000 . . 201946e 
 - - - / dev / null 
 + + + b / examples / introExample / src / main / java / io / realm / examples / intro / model / Test . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package io . realm . examples . intro . model ; 
 + 
 + / * * 
 + * Created by cm on 21 / 11 / 14 . 
 + * / 
 + public class Test { 
 + } 
 diff - - git a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 index a21bc7c . . ab21e5b 100644 
 - - - a / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 + + + b / realm - annotations - processor / src / main / java / io / realm / processor / RealmProxyClassGenerator . java 
 @ @ - 18 , 6 + 18 , 15 @ @ package io . realm . processor ; 
 
 import com . squareup . javawriter . JavaWriter ; 
 
 + import java . io . BufferedWriter ; 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . EnumSet ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . ListIterator ; 
 + import java . util . Map ; 
 + 
 import javax . annotation . processing . ProcessingEnvironment ; 
 import javax . lang . model . element . Modifier ; 
 import javax . lang . model . element . VariableElement ; 
 @ @ - 26 , 10 + 35 , 6 @ @ import javax . lang . model . type . TypeMirror ; 
 import javax . lang . model . util . Elements ; 
 import javax . lang . model . util . Types ; 
 import javax . tools . JavaFileObject ; 
 - import java . io . BufferedWriter ; 
 - import java . io . IOException ; 
 - import java . lang . String ; 
 - import java . util . * ; 
 
 public class RealmProxyClassGenerator { 
 private ProcessingEnvironment processingEnvironment ; 
 @ @ - 43 , 6 + 48 , 11 @ @ public class RealmProxyClassGenerator { 
 private static final String TABLE _ PREFIX = " class _ " ; 
 private static final String PROXY _ SUFFIX = " RealmProxy " ; 
 
 + private Elements elementUtils ; 
 + private Types typeUtils ; 
 + private TypeMirror realmObject ; 
 + private DeclaredType realmList ; 
 + 
 public RealmProxyClassGenerator ( ProcessingEnvironment processingEnvironment , 
 String className , String packageName , 
 List < VariableElement > fields , 
 @ @ - 127 , 55 + 137 , 6 @ @ public class RealmProxyClassGenerator { 
 CASTING _ TYPES . put ( " byte [ ] " , " byte [ ] " ) ; 
 } 
 
 - private static final Map < String , String [ ] > HASHCODE ; 
 - 
 - static { 
 - HASHCODE = new HashMap < String , String [ ] > ( ) ; 
 - HASHCODE . put ( " boolean " , new String [ ] { 
 - " result = 31 * result + ( % s ( ) ? 1 : 0 ) " } ) ; 
 - HASHCODE . put ( " byte " , new String [ ] { 
 - " result = 31 * result + ( int ) % s ( ) " } ) ; 
 - HASHCODE . put ( " short " , new String [ ] { 
 - " result = 31 * result + ( int ) % s ( ) " } ) ; 
 - HASHCODE . put ( " int " , new String [ ] { 
 - " result = 31 * result + % s ( ) " } ) ; 
 - HASHCODE . put ( " long " , new String [ ] { 
 - " long aLong _ % d = % s ( ) " , 
 - " result = 31 * result + ( int ) ( aLong _ % d ^ ( aLong _ % d > > > 32 ) ) " } ) ; 
 - HASHCODE . put ( " float " , new String [ ] { 
 - " float aFloat _ % d = % s ( ) " , 
 - " result = 31 * result + ( aFloat _ % d ! = + 0 . 0f ? Float . floatToIntBits ( aFloat _ % d ) : 0 ) " } ) ; 
 - HASHCODE . put ( " double " , new String [ ] { 
 - " long temp _ % d = Double . doubleToLongBits ( % s ( ) ) " , 
 - " result = 31 * result + ( int ) ( temp _ % d ^ ( temp _ % d > > > 32 ) ) " } ) ; 
 - HASHCODE . put ( " Byte " , new String [ ] { 
 - " result = 31 * result + ( int ) % s ( ) " } ) ; 
 - HASHCODE . put ( " Short " , new String [ ] { 
 - " result = 31 * result + ( int ) % s ( ) " } ) ; 
 - HASHCODE . put ( " Integer " , new String [ ] { 
 - " result = 31 * result + % s ( ) " } ) ; 
 - HASHCODE . put ( " Long " , new String [ ] { 
 - " long aLong _ % d = % s ( ) " , 
 - " result = 31 * result + ( int ) ( aLong _ % d ^ ( aLong _ % d > > > 32 ) ) " } ) ; 
 - HASHCODE . put ( " Float " , new String [ ] { 
 - " float aFloat _ % d = % s ( ) " , 
 - " result = 31 * result + ( aFloat _ % d ! = + 0 . 0f ? Float . floatToIntBits ( aFloat _ % d ) : 0 ) " } ) ; 
 - HASHCODE . put ( " Double " , new String [ ] { 
 - " long temp _ % d = Double . doubleToLongBits ( % s ( ) ) " , 
 - " result = 31 * result + ( int ) ( temp _ % d ^ ( temp _ % d > > > 32 ) ) " } ) ; 
 - HASHCODE . put ( " Boolean " , new String [ ] { 
 - " result = 31 * result + ( % s ( ) ? 1 : 0 ) " } ) ; 
 - HASHCODE . put ( " java . lang . String " , new String [ ] { 
 - " String aString _ % d = % s ( ) " , 
 - " result = 31 * result + ( aString _ % d ! = null ? aString _ % d . hashCode ( ) : 0 ) " } ) ; 
 - HASHCODE . put ( " java . lang . Date " , new String [ ] { 
 - " Date aDate _ % d = % s ( ) " , 
 - " result = 31 * result + ( aDate _ % d ! = null ? aDate _ % d . hashCode ( ) : 0 ) " } ) ; 
 - HASHCODE . put ( " byte [ ] " , new String [ ] { 
 - " byte [ ] aByteArray _ % d = % s ( ) " , 
 - " result = 31 * result + ( aByteArray _ % d ! = null ? Arrays . hashCode ( aByteArray _ % d ) : 0 ) " } ) ; 
 - } 
 - 
 private static final Map < String , Integer > HOW _ TO _ EQUAL ; 
 private static final int EQUALS _ DIRECT = 0 ; / / compare values directly 
 private static final int EQUALS _ NULL = 1 ; / / check for null and use . equals ( ) 
 @ @ - 208 , 11 + 169 , 11 @ @ public class RealmProxyClassGenerator { 
 JavaFileObject sourceFile = processingEnvironment . getFiler ( ) . createSourceFile ( qualifiedGeneratedClassName ) ; 
 JavaWriter writer = new JavaWriter ( new BufferedWriter ( sourceFile . openWriter ( ) ) ) ; 
 
 - Elements elementUtils = processingEnvironment . getElementUtils ( ) ; 
 - Types typeUtils = processingEnvironment . getTypeUtils ( ) ; 
 + elementUtils = processingEnvironment . getElementUtils ( ) ; 
 + typeUtils = processingEnvironment . getTypeUtils ( ) ; 
 
 - TypeMirror realmObject = elementUtils . getTypeElement ( " io . realm . RealmObject " ) . asType ( ) ; 
 - DeclaredType realmList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; 
 + realmObject = elementUtils . getTypeElement ( " io . realm . RealmObject " ) . asType ( ) ; 
 + realmList = typeUtils . getDeclaredType ( elementUtils . getTypeElement ( " io . realm . RealmList " ) , typeUtils . getWildcardType ( null , null ) ) ; 
 
 / / Set source code indent to 4 spaces 
 writer . setIndent ( " " ) ; 
 @ @ - 241 , 6 + 202 , 20 @ @ public class RealmProxyClassGenerator { 
 className ) / / class to extend 
 . emitEmptyLine ( ) ; 
 
 + emitAccessors ( writer ) ; 
 + emitInitTableMethod ( writer ) ; 
 + emitValidateTableMethod ( writer ) ; 
 + emitGetFieldNamesMethod ( writer ) ; 
 + emitToStringMethod ( writer ) ; 
 + emitHashcodeMethod ( writer ) ; 
 + emitEqualsMethod ( writer ) ; 
 + 
 + / / End the class definition 
 + writer . endType ( ) ; 
 + writer . close ( ) ; 
 + } 
 + 
 + private void emitAccessors ( JavaWriter writer ) throws IOException { 
 / / Accessors 
 for ( VariableElement field : fields ) { 
 String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 @ @ - 338 , 10 + 313 , 9 @ @ public class RealmProxyClassGenerator { 
 } 
 writer . emitEmptyLine ( ) ; 
 } 
 + } 
 
 - / * * 
 - * initTable method 
 - * / 
 + private void emitInitTableMethod ( JavaWriter writer ) throws IOException { 
 writer . beginMethod ( 
 " Table " , / / Return type 
 " initTable " , / / Method name 
 @ @ - 398 , 10 + 372 , 9 @ @ public class RealmProxyClassGenerator { 
 writer . emitStatement ( " return transaction . getTable ( \ " % s % s \ " ) " , TABLE _ PREFIX , this . className ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 + } 
 
 - / * * 
 - * validateTable method 
 - * / 
 + private void emitValidateTableMethod ( JavaWriter writer ) throws IOException { 
 writer . beginMethod ( 
 " void " , / / Return type 
 " validateTable " , / / Method name 
 @ @ - 490 , 10 + 463 , 9 @ @ public class RealmProxyClassGenerator { 
 writer . endControlFlow ( ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 + } 
 
 - / * * 
 - * getFieldNames method 
 - * / 
 + private void emitGetFieldNamesMethod ( JavaWriter writer ) throws IOException { 
 writer . beginMethod ( " List < String > " , " getFieldNames " , EnumSet . of ( Modifier . PUBLIC , Modifier . STATIC ) ) ; 
 List < String > entries = new ArrayList < String > ( ) ; 
 for ( VariableElement field : fields ) { 
 @ @ - 504 , 116 + 476 , 81 @ @ public class RealmProxyClassGenerator { 
 writer . emitStatement ( " return Arrays . asList ( % s ) " , statementSection ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 + } 
 
 - / * * 
 - * toString method 
 - * / 
 + private void emitToStringMethod ( JavaWriter writer ) throws IOException { 
 writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( " String " , " toString " , EnumSet . of ( Modifier . PUBLIC ) ) ; 
 writer . emitStatement ( " StringBuilder stringBuilder = new StringBuilder ( \ " % s = [ \ " ) " , className ) ; 
 - for ( VariableElement field : fields ) { 
 - String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 - writer . emitStatement ( " stringBuilder . append ( \ " { % s : \ " ) " , fieldName ) ; 
 - writer . emitStatement ( " stringBuilder . append ( % s ( ) ) " , getters . get ( fieldName ) ) ; 
 - writer . emitStatement ( " stringBuilder . append ( \ " } \ " ) " , fieldName ) ; 
 + for ( int i = 0 ; i < fields . size ( ) ; i + + ) { 
 + VariableElement field = fields . get ( i ) ; 
 + if ( typeUtils . isAssignable ( field . asType ( ) , realmObject ) ) { 
 + 
 + String fieldTypeCanonicalName = field . asType ( ) . toString ( ) ; 
 + String fieldTypeName ; 
 + if ( fieldTypeCanonicalName . contains ( " . " ) ) { 
 + fieldTypeName = fieldTypeCanonicalName . substring ( fieldTypeCanonicalName . lastIndexOf ( ' . ' ) + 1 ) ; 
 + } else { 
 + fieldTypeName = fieldTypeCanonicalName ; 
 + } 
 + 
 + String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 + writer . emitStatement ( " stringBuilder . append ( \ " { % s : \ " ) " , fieldName ) ; 
 + writer . emitStatement ( " stringBuilder . append ( % s ( ) ! = null ? \ " % s \ " + \ " @ \ " + % s ( ) . row . getIndex ( ) : \ " null \ " ) " , getters . get ( fieldName ) , fieldTypeName , getters . get ( fieldName ) ) ; 
 + writer . emitStatement ( " stringBuilder . append ( \ " } \ " ) " ) ; 
 + 
 + } else { 
 + String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 + writer . emitStatement ( " stringBuilder . append ( \ " { % s : \ " ) " , fieldName ) ; 
 + writer . emitStatement ( " stringBuilder . append ( % s ( ) ) " , getters . get ( fieldName ) ) ; 
 + writer . emitStatement ( " stringBuilder . append ( \ " } \ " ) " ) ; 
 + } 
 + 
 + if ( i < fields . size ( ) - 1 ) { 
 + writer . emitStatement ( " stringBuilder . append ( \ " , \ " ) " ) ; 
 + } 
 } 
 + 
 writer . emitStatement ( " stringBuilder . append ( \ " ] \ " ) " ) ; 
 writer . emitStatement ( " return stringBuilder . toString ( ) " ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 + } 
 
 - / * * 
 - * hashCode method 
 - * / 
 + private void emitHashcodeMethod ( JavaWriter writer ) throws IOException { 
 writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( " int " , " hashCode " , EnumSet . of ( Modifier . PUBLIC ) ) ; 
 + writer . emitStatement ( " long rowIndex = row . getIndex ( ) " ) ; 
 + writer . emitStatement ( " String tableName = row . getTable ( ) . getName ( ) " ) ; 
 + writer . emitEmptyLine ( ) ; 
 writer . emitStatement ( " int result = 17 " ) ; 
 - int counter = 0 ; 
 - for ( VariableElement field : fields ) { 
 - String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 - String fieldTypeCanonicalName = field . asType ( ) . toString ( ) ; 
 - if ( HASHCODE . containsKey ( fieldTypeCanonicalName ) ) { 
 - for ( String statement : HASHCODE . get ( fieldTypeCanonicalName ) ) { 
 - if ( statement . contains ( " % d " ) & & statement . contains ( " % s " ) ) { 
 - / / This statement introduces a temporary variable 
 - writer . emitStatement ( statement , counter , getters . get ( fieldName ) ) ; 
 - } else if ( statement . contains ( " % d " ) ) { 
 - / / This statement uses the temporary variable 
 - writer . emitStatement ( statement , counter , counter ) ; 
 - } else if ( statement . contains ( " % s " ) ) { 
 - / / This is a normal statement with only one assignment 
 - writer . emitStatement ( statement , getters . get ( fieldName ) ) ; 
 - } else { 
 - / / This should never happen 
 - throw new AssertionError ( ) ; 
 - } 
 - } 
 - } else { 
 - / / Links and Link lists 
 - writer . emitStatement ( " % s temp _ % d = % s ( ) " , fieldTypeCanonicalName , counter , getters . get ( fieldName ) ) ; 
 - writer . emitStatement ( " result = 31 * result + ( temp _ % d ! = null ? temp _ % d . hashCode ( ) : 0 ) " , counter , counter ) ; 
 - } 
 - counter + + ; 
 - } 
 + writer . emitStatement ( " result = 31 * result + realm . getPath ( ) . hashCode ( ) " ) ; 
 + writer . emitStatement ( " result = 31 * result + ( ( tableName ! = null ) ? tableName . hashCode ( ) : 0 ) " ) ; 
 + writer . emitStatement ( " result = 31 * result + ( int ) ( rowIndex ^ ( rowIndex > > > 32 ) ) " ) ; 
 writer . emitStatement ( " return result " ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 + } 
 
 - / * * 
 - * equals method 
 - * / 
 + private void emitEqualsMethod ( JavaWriter writer ) throws IOException { 
 String proxyClassName = className + PROXY _ SUFFIX ; 
 writer . emitAnnotation ( " Override " ) ; 
 writer . beginMethod ( " boolean " , " equals " , EnumSet . of ( Modifier . PUBLIC ) , " Object " , " o " ) ; 
 writer . emitStatement ( " if ( this = = o ) return true " ) ; 
 writer . emitStatement ( " if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false " ) ; 
 writer . emitStatement ( " % s a % s = ( % s ) o " , proxyClassName , className , proxyClassName ) ; / / FooRealmProxy aFoo = ( FooRealmProxy ) o 
 - 
 - for ( VariableElement field : fields ) { 
 - String fieldName = field . getSimpleName ( ) . toString ( ) ; 
 - String capFieldName = capitaliseFirstChar ( fieldName ) ; 
 - String fieldTypeCanonicalName = field . asType ( ) . toString ( ) ; 
 - if ( HOW _ TO _ EQUAL . containsKey ( fieldTypeCanonicalName ) ) { 
 - switch ( HOW _ TO _ EQUAL . get ( fieldTypeCanonicalName ) ) { 
 - case EQUALS _ DIRECT : / / if ( getField ( ) ! = aFoo . getField ( ) ) return false 
 - writer . emitStatement ( " if ( % s ( ) ! = a % s . % s ( ) ) return false " , getters . get ( fieldName ) , className , getters . get ( fieldName ) ) ; 
 - break ; 
 - case EQUALS _ NULL : / / if ( getField ( ) ! = null = ! getField ( ) . equals ( aFoo . getField ( ) ) : aFoo . getField ( ) ! = null ) return false 
 - writer . emitStatement ( " if ( % s ( ) ! = null ? ! % s ( ) . equals ( a % s . % s ( ) ) : a % s . % s ( ) ! = null ) return false " , 
 - getters . get ( fieldName ) , 
 - getters . get ( fieldName ) , className , getters . get ( fieldName ) , 
 - className , getters . get ( fieldName ) ) ; 
 - break ; 
 - case EQUALS _ ARRAY : / / if ( ! Arrays . equals ( getField ( ) , aFoo . getField ( ) ) ) return false 
 - writer . emitStatement ( " if ( ! Arrays . equals ( % s ( ) , a % s . % s ( ) ) ) return false " , 
 - getters . get ( fieldName ) , 
 - className , getters . get ( fieldName ) ) ; 
 - break ; 
 - case EQUALS _ COMPARE : / / if ( 
 - writer . emitStatement ( " if ( % s . compare ( % s ( ) , a % s . % s ( ) ) ! = 0 ) return false " , 
 - capitaliseFirstChar ( fieldTypeCanonicalName ) , getters . get ( fieldName ) , className , 
 - getters . get ( fieldName ) ) ; 
 - break ; 
 - } 
 - } 
 - else if ( typeUtils . isAssignable ( field . asType ( ) , realmObject ) | | typeUtils . isAssignable ( field . asType ( ) , realmList ) ) { 
 - writer . emitStatement ( " if ( % s ( ) ! = null ? ! % s ( ) . equals ( a % s . % s ( ) ) : a % s . % s ( ) ! = null ) return false " , 
 - getters . get ( fieldName ) , 
 - getters . get ( fieldName ) , className , getters . get ( fieldName ) , 
 - className , getters . get ( fieldName ) ) ; 
 - } 
 - } 
 + writer . emitEmptyLine ( ) ; 
 + writer . emitStatement ( " String path = realm . getPath ( ) " ) ; 
 + writer . emitStatement ( " String otherPath = a % s . realm . getPath ( ) " , className ) ; 
 + writer . emitStatement ( " if ( path ! = null ? ! path . equals ( otherPath ) : otherPath ! = null ) return false ; " ) ; 
 + writer . emitEmptyLine ( ) ; 
 + writer . emitStatement ( " String tableName = row . getTable ( ) . getName ( ) " ) ; 
 + writer . emitStatement ( " String otherTableName = a % s . row . getTable ( ) . getName ( ) " , className ) ; 
 + writer . emitStatement ( " if ( tableName ! = null ? ! tableName . equals ( otherTableName ) : otherTableName ! = null ) return false " ) ; 
 + writer . emitEmptyLine ( ) ; 
 writer . emitStatement ( " return true " ) ; 
 writer . endMethod ( ) ; 
 writer . emitEmptyLine ( ) ; 
 - 
 - / / End the class definition 
 - writer . endType ( ) ; 
 - writer . close ( ) ; 
 - } 
 - 
 - private static String capitaliseFirstChar ( String input ) { 
 - return input . substring ( 0 , 1 ) . toUpperCase ( ) + input . substring ( 1 ) ; 
 } 
 
 public static String joinStringList ( List < String > strings , String separator ) { 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmObjectTest . java b / realm / src / androidTest / java / io / realm / RealmObjectTest . java 
 index c7a7b5e . . 8d45072 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmObjectTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmObjectTest . java 
 @ @ - 217 , 7 + 217 , 8 @ @ public class RealmObjectTest extends AndroidTestCase { 
 
 testRealm . commitTransaction ( ) ; 
 
 - assertEquals ( " " , foo . toString ( ) ) ; 
 + String expected = " CyclicType = [ { name : Foo } , { object : CyclicType @ 1 } , { objects : CyclicType [ ] } ] " ; 
 + assertEquals ( expected , foo . toString ( ) ) ; 
 } 
 
 public void testCyclicHashCode ( ) { 
 @ @ - 234 , 6 + 235 , 6 @ @ public class RealmObjectTest extends AndroidTestCase { 
 
 testRealm . commitTransaction ( ) ; 
 
 - assertEquals ( 0 , foo . hashCode ( ) ) ; 
 + assertEquals ( 1344723738 , foo . hashCode ( ) ) ; 
 } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 83d7439 . . a91a945 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 91 , 6 + 91 , 7 @ @ public class Realm { 
 private Handler handler ; 
 
 private final int id ; 
 + private final String path ; 
 private final SharedGroup sharedGroup ; 
 private final ImplicitTransaction transaction ; 
 private final Map < Class < ? > , String > simpleClassNames = new HashMap < Class < ? > , String > ( ) ; 
 @ @ - 115 , 6 + 116 , 7 @ @ public class Realm { 
 private Realm ( String absolutePath , byte [ ] key , boolean autoRefresh ) { 
 this . sharedGroup = new SharedGroup ( absolutePath , true , key ) ; 
 this . transaction = sharedGroup . beginImplicitTransaction ( ) ; 
 + this . path = absolutePath ; 
 this . id = absolutePath . hashCode ( ) ; 
 setAutoRefresh ( autoRefresh ) ; 
 } 
 @ @ - 854 , 4 + 856 , 13 @ @ public class Realm { 
 } 
 return result ; 
 } 
 + 
 + / * * 
 + * Returns the absolute path to where this Realm is persisted on disk . 
 + * 
 + * @ return The absolute path to the realm file . 
 + * / 
 + public String getPath ( ) { 
 + return path ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 index 3eadb4e . . ea31fb8 100644 
 - - - a / realm / src / main / java / io / realm / RealmList . java 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 141 , 4 + 141 , 20 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 TableQuery query = this . view . where ( ) ; 
 return new RealmQuery < E > ( this . realm , query , clazz ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + StringBuilder sb = new StringBuilder ( ) ; 
 + sb . append ( clazz . getSimpleName ( ) ) ; 
 + sb . append ( " [ " ) ; 
 + for ( int i = 0 ; i < size ( ) ; i + + ) { 
 + sb . append ( " @ " ) ; 
 + sb . append ( get ( i ) . row . getIndex ( ) ) ; / / TODO Replace with primary key when possible 
 + if ( i < size ( ) - 1 ) { 
 + sb . append ( ' , ' ) ; 
 + } 
 + } 
 + sb . append ( " ] " ) ; 
 + return sb . toString ( ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / internal / Table . java b / realm / src / main / java / io / realm / internal / Table . java 
 index 8ad15c3 . . 3f620d6 100644 
 - - - a / realm / src / main / java / io / realm / internal / Table . java 
 + + + b / realm / src / main / java / io / realm / internal / Table . java 
 @ @ - 112 , 7 + 112 , 6 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 synchronized ( context ) { 
 if ( nativePtr ! = 0 ) { 
 nativeClose ( nativePtr ) ; 
 - 
 if ( DEBUG ) { 
 TableCount - - ; 
 System . err . println ( " = = = = CLOSE " + tableNo + " ptr = " + nativePtr + " remaining " + TableCount ) ; 
 @ @ - 1393 , 8 + 1392 , 12 @ @ public class Table implements TableOrView , TableSchema , Closeable { 
 
 protected native long nativeGetDistinctView ( long nativePtr , long columnIndex ) ; 
 
 - / / get the table name as it is in the associated group . 
 - protected String getName ( ) { 
 + / * * 
 + * Return the table name as it is in the associated group . 
 + * 
 + * @ return Name of the the table or null if it not part of a group . 
 + * / 
 + public String getName ( ) { 
 return nativeGetName ( nativePtr ) ; 
 } 

