BLEU SCORE: 0.05341087579952926

TEST MSG: Experimental with OS collection notification
GENERATED MSG: WiP

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> index b058f33 . . cb50a83 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . junit . runner . RunWith ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . Cat ; <nl> + import io . realm . entities . Dog ; <nl> import io . realm . entities . pojo . AllTypesRealmModel ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . rule . RunTestInLooperThread ; <nl> @ @ - 225 , 4 + 226 , 34 @ @ public class RealmChangeListenerTests { <nl> allTypes . setString ( AllTypes . FIELD _ STRING , " test data 1 " ) ; <nl> dynamicRealm . commitTransaction ( ) ; <nl> } <nl> + <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + / / FIXME : Used for DEV . Remove before merge <nl> + public void myTest ( ) { <nl> + Realm realm = looperThread . realm ; <nl> + final RealmResults < Cat > cats = realm . where ( Cat . class ) . findAll ( ) ; <nl> + final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; <nl> + looperThread . keepStrongReference . add ( cats ) ; <nl> + looperThread . keepStrongReference . add ( dogs ) ; <nl> + cats . addChangeListener ( new RealmChangeListener < RealmResults < Cat > > ( ) { <nl> + @ Override <nl> + public void onChange ( RealmResults < Cat > result ) { <nl> + assertEquals ( " cat1 " , result . first ( ) . getName ( ) ) ; <nl> + assertEquals ( " dog1 " , dogs . first ( ) . getName ( ) ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + realm . executeTransactionAsync ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( Realm realm ) { <nl> + Cat cat = realm . createObject ( Cat . class ) ; <nl> + cat . setName ( " cat1 " ) ; <nl> + <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setName ( " dog1 " ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp b / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp <nl> index 5ef1d4c . . 7075b29 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp <nl> @ @ - 174 , 3 + 174 , 29 @ @ Java _ io _ realm _ RealmResults _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlo <nl> } CATCH _ STD ( ) <nl> return reinterpret _ cast < jlong > ( nullptr ) ; <nl> } <nl> + <nl> + JNIEXPORT jlong JNICALL <nl> + Java _ io _ realm _ RealmResults _ nativeAddListener ( JNIEnv * env , jobject instance , jlong native _ ptr ) { <nl> + TR _ ENTER _ PTR ( native _ ptr ) <nl> + <nl> + try { <nl> + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> + <nl> + / / FIXME : Those need to be freed for all the corner cases ! <nl> + jobject weak _ results = env - > NewWeakGlobalRef ( instance ) ; <nl> + <nl> + auto cb = [ = ] ( realm : : CollectionChangeSet const & changes , <nl> + std : : exception _ ptr err ) { <nl> + jclass results _ class = env - > GetObjectClass ( weak _ results ) ; <nl> + jmethodID notify _ method = env - > GetMethodID ( results _ class , " notifyChangeListeners " , " ( ) V " ) ; <nl> + env - > CallVoidMethod ( weak _ results , notify _ method ) ; <nl> + } ; <nl> + <nl> + NotificationToken token = results - > add _ notification _ callback ( cb ) ; <nl> + / / FIXME : Let ' s leak them ALL for now ! ! <nl> + return reinterpret _ cast < jlong > ( <nl> + new std : : unique _ ptr < NotificationToken > ( new NotificationToken ( std : : move ( token ) ) ) ) ; <nl> + } CATCH _ STD ( ) <nl> + <nl> + return reinterpret _ cast < jlong > ( nullptr ) ; <nl> + } <nl> diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> index 4de7a25 . . 730a7f7 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp <nl> @ @ - 105 , 8 + 105 , 9 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeGetSharedRealm ( JNIEnv * env , jclass , jlo <nl> try { <nl> auto shared _ realm = Realm : : get _ shared _ realm ( * config ) ; <nl> shared _ realm - > m _ binding _ context = JavaBindingContext : : create ( env , notifier ) ; <nl> + / / FIXME : Disabled for the collection notifications . There might be some places still need it . <nl> / / advance _ read needs to be handled by Java because of async query . <nl> - shared _ realm - > set _ auto _ refresh ( false ) ; <nl> + / / shared _ realm - > set _ auto _ refresh ( false ) ; <nl> return reinterpret _ cast < jlong > ( new SharedRealm ( std : : move ( shared _ realm ) ) ) ; <nl> } CATCH _ STD ( ) <nl> return static _ cast < jlong > ( NULL ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java b / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java <nl> index b0f1c19 . . adc0c06 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java <nl> @ @ - 76 , 6 + 76 , 7 @ @ class AndroidNotifier implements RealmNotifier { <nl> / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | <nl> @ Override <nl> public void notifyCommitByOtherThread ( ) { <nl> + / * <nl> if ( handler = = null ) { <nl> return ; <nl> } <nl> @ @ - 92 , 6 + 93 , 7 @ @ class AndroidNotifier implements RealmNotifier { <nl> RealmLog . warn ( " Cannot update Looper threads when the Looper has quit . Use realm . setAutoRefresh ( false ) " + <nl> " to prevent this . " ) ; <nl> } <nl> + * / <nl> } <nl> <nl> @ Override <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index b0d118e . . 2870276 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 1082 , 8 + 1082 , 8 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> throw new IllegalArgumentException ( " Listener should not be null " ) ; <nl> } <nl> realm . checkIfValid ( ) ; <nl> - if ( ! realm . handlerController . isAutoRefreshEnabled ( ) ) { <nl> - throw new IllegalStateException ( " You can ' t register a listener from a non - Looper thread or IntentService thread . " ) ; <nl> + if ( listeners . isEmpty ( ) ) { <nl> + nativeAddListener ( nativePtr ) ; <nl> } <nl> if ( ! listeners . contains ( listener ) ) { <nl> listeners . add ( listener ) ; <nl> @ @ - 1173 , 6 + 1173 , 14 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> } <nl> } <nl> <nl> + void notifyChangeListeners ( ) { <nl> + if ( ! listeners . isEmpty ( ) ) { <nl> + for ( RealmChangeListener listener : listeners ) { <nl> + listener . onChange ( this ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , long [ ] columnIndices , boolean [ ] orders ) ; <nl> private static native long nativeCreateSnapshot ( long nativePtr ) ; <nl> private static native long nativeGetRow ( long nativePtr , int index ) ; <nl> @ @ - 1181 , 4 + 1189 , 5 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> private static native long nativeSize ( long nativePtr ) ; <nl> private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; <nl> private static native long nativeSort ( long nativePtr , long [ ] columnIndices , boolean [ ] orders ) ; <nl> + private native long nativeAddListener ( long nativePtr ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> index 8d9ce2b . . 3d156b0 100644 <nl> - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt <nl> @ @ - 37 , 7 + 37 , 7 @ @ set ( classes _ LIST <nl> io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow <nl> io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil <nl> io . realm . log . LogLevel io . realm . log . RealmLog io . realm . Property io . realm . RealmSchema <nl> - io . realm . RealmObjectSchema <nl> + io . realm . RealmObjectSchema io . realm . RealmResults <nl> ) <nl> # / . / is the workaround for the problem that AS cannot find the jni headers . <nl> # See https : / / github . com / googlesamples / android - ndk / issues / 319 <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 7bc4df2 . . 29121bf 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 89 , 6 + 89 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> / / clear it . <nl> private boolean viewUpdated = false ; <nl> <nl> + private final long nativePtr ; <nl> + <nl> + static < E extends RealmModel > RealmResults < E > createFromQuery ( BaseRealm realm , TableQuery query , Class < E > clazz , <nl> + String fieldNames [ ] , Sort [ ] sortOrder ) { <nl> + return new RealmResults < E > ( realm , query , clazz , fieldNames , sortOrder ) ; <nl> + } <nl> <nl> static < E extends RealmModel > RealmResults < E > createFromTableQuery ( BaseRealm realm , TableQuery query , Class < E > clazz ) { <nl> return new RealmResults < E > ( realm , query , clazz ) ; <nl> @ @ - 110 , 16 + 116 , 34 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> return realmResults ; <nl> } <nl> <nl> + private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz , String fieldNames [ ] , Sort [ ] sortOrder ) { <nl> + this . realm = realm ; <nl> + this . classSpec = clazz ; <nl> + this . query = query ; <nl> + <nl> + if ( sortOrder . length ! = fieldNames . length ) { <nl> + throw new IllegalArgumentException ( " Number of field names and sort orders does not match " ) ; <nl> + } <nl> + <nl> + boolean [ ] order = new boolean [ sortOrder . length ] ; <nl> + for ( int i = 0 ; i < sortOrder . length ; i + + ) { <nl> + order [ i ] = sortOrder [ i ] = = Sort . ASCENDING ; <nl> + } <nl> + this . nativePtr = nativeCreateResults ( realm . sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , order ) ; <nl> + } <nl> + <nl> private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz ) { <nl> this . realm = realm ; <nl> this . classSpec = clazz ; <nl> this . query = query ; <nl> + this . nativePtr = 0 ; <nl> } <nl> <nl> private RealmResults ( BaseRealm realm , TableQuery query , String className ) { <nl> this . realm = realm ; <nl> this . query = query ; <nl> this . className = className ; <nl> + this . nativePtr = 0 ; <nl> } <nl> <nl> private RealmResults ( BaseRealm realm , TableOrView table , Class < E > classSpec ) { <nl> @ @ - 130 , 6 + 154 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> this . pendingQuery = null ; <nl> this . query = null ; <nl> this . currentTableViewVersion = table . syncIfNeeded ( ) ; <nl> + this . nativePtr = 0 ; <nl> } <nl> <nl> private RealmResults ( BaseRealm realm , String className ) { <nl> @ @ - 138 , 6 + 163 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> <nl> pendingQuery = null ; <nl> query = null ; <nl> + this . nativePtr = 0 ; <nl> } <nl> <nl> private RealmResults ( BaseRealm realm , TableOrView table , String className ) { <nl> @ @ - 262 , 7 + 288 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> @ Override <nl> public E last ( E defaultValue ) { <nl> return lastImpl ( false , defaultValue ) ; <nl> - <nl> + <nl> } <nl> <nl> private E lastImpl ( boolean shouldThrow , E defaultValue ) { <nl> @ @ - 294 , 8 + 320 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public boolean deleteAllFromRealm ( ) { <nl> realm . checkIfValid ( ) ; <nl> if ( size ( ) > 0 ) { <nl> - TableOrView table = getTableOrView ( ) ; <nl> - table . clear ( ) ; <nl> + if ( nativePtr = = 0 ) { <nl> + TableOrView table = getTableOrView ( ) ; <nl> + table . clear ( ) ; <nl> + } else { <nl> + nativeClear ( nativePtr ) ; <nl> + } <nl> return true ; <nl> } else { <nl> return false ; <nl> @ @ - 413 , 7 + 443 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> if ( ! isLoaded ( ) ) { <nl> return 0 ; <nl> } else { <nl> - long size = getTableOrView ( ) . size ( ) ; <nl> + long size ; <nl> + if ( nativePtr = = 0 ) { <nl> + size = getTableOrView ( ) . size ( ) ; <nl> + } else { <nl> + size = nativeSize ( nativePtr ) ; <nl> + } <nl> return ( size > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) size ; <nl> } <nl> } <nl> @ @ - 424 , 15 + 459 , 19 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public Number min ( String fieldName ) { <nl> realm . checkIfValid ( ) ; <nl> long columnIndex = getColumnIndexForSort ( fieldName ) ; <nl> - switch ( table . getColumnType ( columnIndex ) ) { <nl> - case INTEGER : <nl> - return table . minimumLong ( columnIndex ) ; <nl> - case FLOAT : <nl> - return table . minimumFloat ( columnIndex ) ; <nl> - case DOUBLE : <nl> - return table . minimumDouble ( columnIndex ) ; <nl> - default : <nl> - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> + if ( nativePtr = = 0 ) { <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return table . minimumLong ( columnIndex ) ; <nl> + case FLOAT : <nl> + return table . minimumFloat ( columnIndex ) ; <nl> + case DOUBLE : <nl> + return table . minimumDouble ( columnIndex ) ; <nl> + default : <nl> + throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; <nl> + } <nl> + } else { <nl> + return nativeAggregate ( nativePtr , columnIndex , 1 ) ; <nl> } <nl> } <nl> <nl> @ @ - 1056 , 4 + 1095 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> } <nl> } <nl> } <nl> + <nl> + native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , boolean [ ] order ) ; <nl> + native long nativeGetRow ( long nativePtr , int index ) ; <nl> + native void nativeClear ( long nativePtr ) ; <nl> + native long nativeSize ( long nativePtr ) ; <nl> + native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index e7ad6c0 . . 9f9cf2d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 211 , 7 + 211 , 8 @ @ public final class SharedRealm implements Closeable { <nl> } <nl> } <nl> <nl> - long getNativePtr ( ) { <nl> + / / FIXME : can it be protected ? <nl> + public long getNativePtr ( ) { <nl> return nativePtr ; <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> index 5060ad4 . . 80cffcb 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java <nl> @ @ - 60 , 6 + 60 , 11 @ @ public class TableQuery implements Closeable { <nl> this . origin = origin ; <nl> } <nl> <nl> + / / FIXME : can it be protected ? <nl> + public long getNativePtr ( ) { <nl> + return this . nativePtr ; <nl> + } <nl> + <nl> public void close ( ) { <nl> synchronized ( context ) { <nl> if ( nativePtr ! = 0 ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 index b058f33 . . cb50a83 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . junit . runner . RunWith ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . Cat ; 
 + import io . realm . entities . Dog ; 
 import io . realm . entities . pojo . AllTypesRealmModel ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . rule . RunTestInLooperThread ; 
 @ @ - 225 , 4 + 226 , 34 @ @ public class RealmChangeListenerTests { 
 allTypes . setString ( AllTypes . FIELD _ STRING , " test data 1 " ) ; 
 dynamicRealm . commitTransaction ( ) ; 
 } 
 + 
 + @ Test 
 + @ RunTestInLooperThread 
 + / / FIXME : Used for DEV . Remove before merge 
 + public void myTest ( ) { 
 + Realm realm = looperThread . realm ; 
 + final RealmResults < Cat > cats = realm . where ( Cat . class ) . findAll ( ) ; 
 + final RealmResults < Dog > dogs = realm . where ( Dog . class ) . findAll ( ) ; 
 + looperThread . keepStrongReference . add ( cats ) ; 
 + looperThread . keepStrongReference . add ( dogs ) ; 
 + cats . addChangeListener ( new RealmChangeListener < RealmResults < Cat > > ( ) { 
 + @ Override 
 + public void onChange ( RealmResults < Cat > result ) { 
 + assertEquals ( " cat1 " , result . first ( ) . getName ( ) ) ; 
 + assertEquals ( " dog1 " , dogs . first ( ) . getName ( ) ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + } ) ; 
 + 
 + realm . executeTransactionAsync ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( Realm realm ) { 
 + Cat cat = realm . createObject ( Cat . class ) ; 
 + cat . setName ( " cat1 " ) ; 
 + 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setName ( " dog1 " ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp b / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp 
 index 5ef1d4c . . 7075b29 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ RealmResults . cpp 
 @ @ - 174 , 3 + 174 , 29 @ @ Java _ io _ realm _ RealmResults _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlo 
 } CATCH _ STD ( ) 
 return reinterpret _ cast < jlong > ( nullptr ) ; 
 } 
 + 
 + JNIEXPORT jlong JNICALL 
 + Java _ io _ realm _ RealmResults _ nativeAddListener ( JNIEnv * env , jobject instance , jlong native _ ptr ) { 
 + TR _ ENTER _ PTR ( native _ ptr ) 
 + 
 + try { 
 + auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 + 
 + / / FIXME : Those need to be freed for all the corner cases ! 
 + jobject weak _ results = env - > NewWeakGlobalRef ( instance ) ; 
 + 
 + auto cb = [ = ] ( realm : : CollectionChangeSet const & changes , 
 + std : : exception _ ptr err ) { 
 + jclass results _ class = env - > GetObjectClass ( weak _ results ) ; 
 + jmethodID notify _ method = env - > GetMethodID ( results _ class , " notifyChangeListeners " , " ( ) V " ) ; 
 + env - > CallVoidMethod ( weak _ results , notify _ method ) ; 
 + } ; 
 + 
 + NotificationToken token = results - > add _ notification _ callback ( cb ) ; 
 + / / FIXME : Let ' s leak them ALL for now ! ! 
 + return reinterpret _ cast < jlong > ( 
 + new std : : unique _ ptr < NotificationToken > ( new NotificationToken ( std : : move ( token ) ) ) ) ; 
 + } CATCH _ STD ( ) 
 + 
 + return reinterpret _ cast < jlong > ( nullptr ) ; 
 + } 
 diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 index 4de7a25 . . 730a7f7 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ SharedRealm . cpp 
 @ @ - 105 , 8 + 105 , 9 @ @ Java _ io _ realm _ internal _ SharedRealm _ nativeGetSharedRealm ( JNIEnv * env , jclass , jlo 
 try { 
 auto shared _ realm = Realm : : get _ shared _ realm ( * config ) ; 
 shared _ realm - > m _ binding _ context = JavaBindingContext : : create ( env , notifier ) ; 
 + / / FIXME : Disabled for the collection notifications . There might be some places still need it . 
 / / advance _ read needs to be handled by Java because of async query . 
 - shared _ realm - > set _ auto _ refresh ( false ) ; 
 + / / shared _ realm - > set _ auto _ refresh ( false ) ; 
 return reinterpret _ cast < jlong > ( new SharedRealm ( std : : move ( shared _ realm ) ) ) ; 
 } CATCH _ STD ( ) 
 return static _ cast < jlong > ( NULL ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java b / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java 
 index b0f1c19 . . adc0c06 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / AndroidNotifier . java 
 @ @ - 76 , 6 + 76 , 7 @ @ class AndroidNotifier implements RealmNotifier { 
 / / | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - | 
 @ Override 
 public void notifyCommitByOtherThread ( ) { 
 + / * 
 if ( handler = = null ) { 
 return ; 
 } 
 @ @ - 92 , 6 + 93 , 7 @ @ class AndroidNotifier implements RealmNotifier { 
 RealmLog . warn ( " Cannot update Looper threads when the Looper has quit . Use realm . setAutoRefresh ( false ) " + 
 " to prevent this . " ) ; 
 } 
 + * / 
 } 
 
 @ Override 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index b0d118e . . 2870276 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 1082 , 8 + 1082 , 8 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 throw new IllegalArgumentException ( " Listener should not be null " ) ; 
 } 
 realm . checkIfValid ( ) ; 
 - if ( ! realm . handlerController . isAutoRefreshEnabled ( ) ) { 
 - throw new IllegalStateException ( " You can ' t register a listener from a non - Looper thread or IntentService thread . " ) ; 
 + if ( listeners . isEmpty ( ) ) { 
 + nativeAddListener ( nativePtr ) ; 
 } 
 if ( ! listeners . contains ( listener ) ) { 
 listeners . add ( listener ) ; 
 @ @ - 1173 , 6 + 1173 , 14 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 } 
 } 
 
 + void notifyChangeListeners ( ) { 
 + if ( ! listeners . isEmpty ( ) ) { 
 + for ( RealmChangeListener listener : listeners ) { 
 + listener . onChange ( this ) ; 
 + } 
 + } 
 + } 
 + 
 private static native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , long [ ] columnIndices , boolean [ ] orders ) ; 
 private static native long nativeCreateSnapshot ( long nativePtr ) ; 
 private static native long nativeGetRow ( long nativePtr , int index ) ; 
 @ @ - 1181 , 4 + 1189 , 5 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 private static native long nativeSize ( long nativePtr ) ; 
 private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; 
 private static native long nativeSort ( long nativePtr , long [ ] columnIndices , boolean [ ] orders ) ; 
 + private native long nativeAddListener ( long nativePtr ) ; 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / CMakeLists . txt b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 index 8d9ce2b . . 3d156b0 100644 
 - - - a / realm / realm - library / src / main / cpp / CMakeLists . txt 
 + + + b / realm / realm - library / src / main / cpp / CMakeLists . txt 
 @ @ - 37 , 7 + 37 , 7 @ @ set ( classes _ LIST 
 io . realm . internal . LinkView io . realm . internal . Util io . realm . internal . UncheckedRow 
 io . realm . internal . TableQuery io . realm . internal . SharedRealm io . realm . internal . TestUtil 
 io . realm . log . LogLevel io . realm . log . RealmLog io . realm . Property io . realm . RealmSchema 
 - io . realm . RealmObjectSchema 
 + io . realm . RealmObjectSchema io . realm . RealmResults 
 ) 
 # / . / is the workaround for the problem that AS cannot find the jni headers . 
 # See https : / / github . com / googlesamples / android - ndk / issues / 319 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 7bc4df2 . . 29121bf 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 89 , 6 + 89 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 / / clear it . 
 private boolean viewUpdated = false ; 
 
 + private final long nativePtr ; 
 + 
 + static < E extends RealmModel > RealmResults < E > createFromQuery ( BaseRealm realm , TableQuery query , Class < E > clazz , 
 + String fieldNames [ ] , Sort [ ] sortOrder ) { 
 + return new RealmResults < E > ( realm , query , clazz , fieldNames , sortOrder ) ; 
 + } 
 
 static < E extends RealmModel > RealmResults < E > createFromTableQuery ( BaseRealm realm , TableQuery query , Class < E > clazz ) { 
 return new RealmResults < E > ( realm , query , clazz ) ; 
 @ @ - 110 , 16 + 116 , 34 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 return realmResults ; 
 } 
 
 + private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz , String fieldNames [ ] , Sort [ ] sortOrder ) { 
 + this . realm = realm ; 
 + this . classSpec = clazz ; 
 + this . query = query ; 
 + 
 + if ( sortOrder . length ! = fieldNames . length ) { 
 + throw new IllegalArgumentException ( " Number of field names and sort orders does not match " ) ; 
 + } 
 + 
 + boolean [ ] order = new boolean [ sortOrder . length ] ; 
 + for ( int i = 0 ; i < sortOrder . length ; i + + ) { 
 + order [ i ] = sortOrder [ i ] = = Sort . ASCENDING ; 
 + } 
 + this . nativePtr = nativeCreateResults ( realm . sharedRealm . getNativePtr ( ) , query . getNativePtr ( ) , order ) ; 
 + } 
 + 
 private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz ) { 
 this . realm = realm ; 
 this . classSpec = clazz ; 
 this . query = query ; 
 + this . nativePtr = 0 ; 
 } 
 
 private RealmResults ( BaseRealm realm , TableQuery query , String className ) { 
 this . realm = realm ; 
 this . query = query ; 
 this . className = className ; 
 + this . nativePtr = 0 ; 
 } 
 
 private RealmResults ( BaseRealm realm , TableOrView table , Class < E > classSpec ) { 
 @ @ - 130 , 6 + 154 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 this . pendingQuery = null ; 
 this . query = null ; 
 this . currentTableViewVersion = table . syncIfNeeded ( ) ; 
 + this . nativePtr = 0 ; 
 } 
 
 private RealmResults ( BaseRealm realm , String className ) { 
 @ @ - 138 , 6 + 163 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 
 pendingQuery = null ; 
 query = null ; 
 + this . nativePtr = 0 ; 
 } 
 
 private RealmResults ( BaseRealm realm , TableOrView table , String className ) { 
 @ @ - 262 , 7 + 288 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 @ Override 
 public E last ( E defaultValue ) { 
 return lastImpl ( false , defaultValue ) ; 
 - 
 + 
 } 
 
 private E lastImpl ( boolean shouldThrow , E defaultValue ) { 
 @ @ - 294 , 8 + 320 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public boolean deleteAllFromRealm ( ) { 
 realm . checkIfValid ( ) ; 
 if ( size ( ) > 0 ) { 
 - TableOrView table = getTableOrView ( ) ; 
 - table . clear ( ) ; 
 + if ( nativePtr = = 0 ) { 
 + TableOrView table = getTableOrView ( ) ; 
 + table . clear ( ) ; 
 + } else { 
 + nativeClear ( nativePtr ) ; 
 + } 
 return true ; 
 } else { 
 return false ; 
 @ @ - 413 , 7 + 443 , 12 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 if ( ! isLoaded ( ) ) { 
 return 0 ; 
 } else { 
 - long size = getTableOrView ( ) . size ( ) ; 
 + long size ; 
 + if ( nativePtr = = 0 ) { 
 + size = getTableOrView ( ) . size ( ) ; 
 + } else { 
 + size = nativeSize ( nativePtr ) ; 
 + } 
 return ( size > Integer . MAX _ VALUE ) ? Integer . MAX _ VALUE : ( int ) size ; 
 } 
 } 
 @ @ - 424 , 15 + 459 , 19 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public Number min ( String fieldName ) { 
 realm . checkIfValid ( ) ; 
 long columnIndex = getColumnIndexForSort ( fieldName ) ; 
 - switch ( table . getColumnType ( columnIndex ) ) { 
 - case INTEGER : 
 - return table . minimumLong ( columnIndex ) ; 
 - case FLOAT : 
 - return table . minimumFloat ( columnIndex ) ; 
 - case DOUBLE : 
 - return table . minimumDouble ( columnIndex ) ; 
 - default : 
 - throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 + if ( nativePtr = = 0 ) { 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return table . minimumLong ( columnIndex ) ; 
 + case FLOAT : 
 + return table . minimumFloat ( columnIndex ) ; 
 + case DOUBLE : 
 + return table . minimumDouble ( columnIndex ) ; 
 + default : 
 + throw new IllegalArgumentException ( String . format ( TYPE _ MISMATCH , fieldName , " int , float or double " ) ) ; 
 + } 
 + } else { 
 + return nativeAggregate ( nativePtr , columnIndex , 1 ) ; 
 } 
 } 
 
 @ @ - 1056 , 4 + 1095 , 10 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 } 
 } 
 } 
 + 
 + native long nativeCreateResults ( long sharedRealmNativePtr , long queryNativePtr , boolean [ ] order ) ; 
 + native long nativeGetRow ( long nativePtr , int index ) ; 
 + native void nativeClear ( long nativePtr ) ; 
 + native long nativeSize ( long nativePtr ) ; 
 + native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index e7ad6c0 . . 9f9cf2d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 211 , 7 + 211 , 8 @ @ public final class SharedRealm implements Closeable { 
 } 
 } 
 
 - long getNativePtr ( ) { 
 + / / FIXME : can it be protected ? 
 + public long getNativePtr ( ) { 
 return nativePtr ; 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 index 5060ad4 . . 80cffcb 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / TableQuery . java 
 @ @ - 60 , 6 + 60 , 11 @ @ public class TableQuery implements Closeable { 
 this . origin = origin ; 
 } 
 
 + / / FIXME : can it be protected ? 
 + public long getNativePtr ( ) { 
 + return this . nativePtr ; 
 + } 
 + 
 public void close ( ) { 
 synchronized ( context ) { 
 if ( nativePtr ! = 0 ) {
