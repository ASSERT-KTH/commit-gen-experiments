BLEU SCORE: 0.03635358866852297

TEST MSG: Added RxObservableFactory for RxJava 1 . 0 . *
GENERATED MSG: Updating version number now always require a migration block . Updated MigrationExample .

TEST DIFF (one line): diff - - git a / realm / build . gradle b / realm / build . gradle <nl> index 5cdfc4d . . d7e550e 100644 <nl> - - - a / realm / build . gradle <nl> + + + b / realm / build . gradle <nl> @ @ - 12 , 6 + 12 , 7 @ @ buildscript { <nl> classpath ' com . github . skhatri : gradle - s3 - plugin : 1 . 0 . 2 ' <nl> classpath ' com . github . rholder : gradle - one - jar : 1 . 0 . 4 ' <nl> classpath ' com . github . jengelman . gradle . plugins : shadow : 1 . 2 . 2 ' <nl> + classpath ' com . netflix . nebula : gradle - extra - configurations - plugin : 3 . 0 . 3 ' <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle <nl> index a721db2 . . a350f3b 100644 <nl> - - - a / realm / realm - library / build . gradle <nl> + + + b / realm / realm - library / build . gradle <nl> @ @ - 19 , 6 + 19 , 7 @ @ android { <nl> } <nl> <nl> dependencies { <nl> + provided ' io . reactivex : rxjava : 1 . 0 . 14 ' <nl> compile ' com . intellij : annotations : + @ jar ' <nl> compile project ( ' : realm - annotations ' ) <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> new file mode 100644 <nl> index 0000000 . . d7c6806 <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java <nl> @ @ - 0 , 0 + 1 , 44 @ @ <nl> + package io . realm ; <nl> + <nl> + import android . test . AndroidTestCase ; <nl> + <nl> + import java . util . concurrent . atomic . AtomicBoolean ; <nl> + <nl> + import io . realm . entities . AllTypes ; <nl> + import io . realm . entities . CyclicType ; <nl> + import rx . Observable ; <nl> + import rx . functions . Action1 ; <nl> + <nl> + public class RxJavaTests extends AndroidTestCase { <nl> + <nl> + private RealmConfiguration realmConfig ; <nl> + private Realm realm ; <nl> + <nl> + @ Override <nl> + protected void setUp ( ) throws Exception { <nl> + realmConfig = new RealmConfiguration . Builder ( getContext ( ) ) . build ( ) ; <nl> + Realm . deleteRealm ( realmConfig ) ; <nl> + realm = Realm . getInstance ( realmConfig ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void tearDown ( ) throws Exception { <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testObjectEmittedOnSubscribe ( ) { <nl> + realm . beginTransaction ( ) ; <nl> + final AllTypes obj = realm . createObject ( AllTypes . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; <nl> + obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { <nl> + @ Override <nl> + public void call ( AllTypes rxObject ) { <nl> + assertTrue ( rxObject = = obj ) ; <nl> + subscribedNotified . set ( true ) ; <nl> + } <nl> + } ) ; <nl> + assertTrue ( subscribedNotified . get ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> index 8508324 . . 3eec246 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java <nl> @ @ - 21 , 12 + 21 , 13 @ @ import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . Future ; <nl> <nl> import io . realm . annotations . RealmClass ; <nl> - import io . realm . internal . ColumnInfo ; <nl> import io . realm . internal . InvalidRow ; <nl> import io . realm . internal . Row ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableQuery ; <nl> import io . realm . internal . log . RealmLog ; <nl> + import io . realm . rx . Rx1ObservableFactory ; <nl> + import rx . Observable ; <nl> <nl> / * * <nl> * In Realm you define your model classes by sub - classing RealmObject and adding fields to be <nl> @ @ - 81 , 7 + 82 , 7 @ @ import io . realm . internal . log . RealmLog ; <nl> * / <nl> <nl> @ RealmClass <nl> - public abstract class RealmObject { <nl> + public abstract class RealmObject < E extends RealmObject > { <nl> <nl> protected Row row ; <nl> protected Realm realm ; <nl> @ @ - 271 , 6 + 272 , 18 @ @ public abstract class RealmObject { <nl> } <nl> <nl> / * * <nl> + * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when <nl> + * subscribed to . <nl> + * <nl> + * @ return RxJava Observable <nl> + * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . <nl> + * / <nl> + public Observable < E > observable ( ) { <nl> + / / noinspection unchecked <nl> + return Rx1ObservableFactory . from ( ( E ) this ) ; <nl> + } <nl> + <nl> + / * * <nl> * Notify all registered listeners . <nl> * / <nl> void notifyChangeListeners ( ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index fe6b20d . . 6e15d26 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 34 , 6 + 34 , 8 @ @ import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableQuery ; <nl> import io . realm . internal . TableView ; <nl> import io . realm . internal . log . RealmLog ; <nl> + import io . realm . rx . Rx1ObservableFactory ; <nl> + import rx . Observable ; <nl> <nl> / * * <nl> * This class holds all the matches of a { @ link io . realm . RealmQuery } for a given Realm . The objects <nl> @ @ - 809 , 6 + 811 , 18 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> <nl> / * * <nl> + * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when <nl> + * subscribed to . <nl> + * <nl> + * @ return RxJava Observable <nl> + * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . <nl> + * / <nl> + public Observable < RealmResults < E > > observable ( ) { <nl> + / / noinspection unchecked <nl> + return Rx1ObservableFactory . from ( this ) ; <nl> + } <nl> + <nl> + / * * <nl> * Notify all registered listeners . <nl> * / <nl> void notifyChangeListeners ( ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / rx / Rx1ObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / Rx1ObservableFactory . java <nl> new file mode 100644 <nl> index 0000000 . . e961ede <nl> - - - / dev / null <nl> + + + b / realm / realm - library / src / main / java / io / realm / rx / Rx1ObservableFactory . java <nl> @ @ - 0 , 0 + 1 , 81 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . rx ; <nl> + <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmChangeListener ; <nl> + import io . realm . RealmList ; <nl> + import io . realm . RealmObject ; <nl> + import io . realm . RealmResults ; <nl> + import rx . Observable ; <nl> + import rx . subjects . BehaviorSubject ; <nl> + <nl> + public class Rx1ObservableFactory { <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmObject . It will emit the initial object when subscribed to and on each update <nl> + * to the object . <nl> + * <nl> + * @ param object RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + public static < E extends RealmObject > Observable < RealmObject < E > > from ( final RealmObject < E > object ) { <nl> + final BehaviorSubject < RealmObject < E > > subject = BehaviorSubject . create ( object ) ; <nl> + / / TODO This currently triggers on all changes in Realm . Replace with fine - grained notifications when possible . <nl> + object . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + / / TODO This should ideally be a threadsafe , immutable object . Currently it is not : ( <nl> + subject . onNext ( object ) ; <nl> + } <nl> + } ) ; <nl> + return subject . asObservable ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmResults . It will emit the initial results when subscribed to and on each <nl> + * update to the results . <nl> + * <nl> + * @ param results RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + public static < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { <nl> + final BehaviorSubject < RealmResults < E > > subject = BehaviorSubject . create ( results ) ; <nl> + / / TODO This currently triggers on all changes in Realm . Replace with fine - grained notifications when possible . <nl> + results . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + / / TODO This should ideally be a threadsafe , immutable object . Currently it is not : ( <nl> + subject . onNext ( results ) ; <nl> + } <nl> + } ) ; <nl> + return subject . asObservable ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates an Observable for a RealmResults . It will emit the initial list when subscribed to and on each <nl> + * update to the list . <nl> + * <nl> + * @ param list RealmObject to listen to changes for . <nl> + * @ param < E > Type of RealmObject <nl> + * / <nl> + public static < E extends RealmObject > Observable < RealmList < E > > from ( final RealmList < E > list ) { <nl> + final BehaviorSubject < RealmList < E > > subject = BehaviorSubject . create ( list ) ; <nl> + / / TODO Need to add ChangeListener to RealmList . Require fine - grained notifications . <nl> + throw new RuntimeException ( " Not supported yet " ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> index e772d42 . . a1f69e4 100644 <nl> - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . io . IOException ; <nl> import java . io . InputStream ; <nl> <nl> import io . realm . Realm ; <nl> + import io . realm . RealmConfiguration ; <nl> import io . realm . examples . realmmigrationexample . model . Migration ; <nl> import io . realm . examples . realmmigrationexample . model . Person ; <nl> import io . realm . exceptions . RealmMigrationNeededException ; <nl> @ @ - 41 , 6 + 42 , 7 @ @ public class MigrationExampleActivity extends Activity { <nl> public static final String TAG = MigrationExampleActivity . class . getName ( ) ; <nl> <nl> private LinearLayout rootLayout = null ; <nl> + private Realm realm ; <nl> <nl> @ Override <nl> protected void onCreate ( Bundle savedInstanceState ) { <nl> @ @ - 51 , 35 + 53 , 47 @ @ public class MigrationExampleActivity extends Activity { <nl> rootLayout . removeAllViews ( ) ; <nl> <nl> / / 3 versions of the databases for testing . Normally you would only have one . <nl> - String path3 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; <nl> - String path1 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; <nl> - String path2 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; <nl> - <nl> - / / If you try to open a file that doesn ' t match your model an exception is thrown : <nl> - try { <nl> - / / should throw as migration is required <nl> - Realm . getInstance ( this , " default1 " ) ; <nl> - } catch ( RealmMigrationNeededException ex ) { <nl> - Log . i ( TAG , " Excellent ! This is expected . " ) ; <nl> - } <nl> - <nl> - Realm realm ; <nl> - <nl> - / / So you migrate your data <nl> - Realm . migrateRealmAtPath ( path1 , new Migration ( ) ) ; <nl> - realm = Realm . getInstance ( this , " default1 " ) ; <nl> + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; <nl> + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; <nl> + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; <nl> + <nl> + / / When you create a RealmConfiguration you can specify the version of the schema . <nl> + / / If the schema does not have that version a RealmMigrationNeededException will be thrown . <nl> + RealmConfiguration config0 = new RealmConfiguration . Builder ( this ) <nl> + . name ( " default0 " ) <nl> + . schemaVersion ( 3 ) <nl> + . build ( ) ; <nl> + <nl> + / / You can then manually call Realm . migrateRealm ( ) . <nl> + Realm . migrateRealm ( config0 , new Migration ( ) ) ; <nl> + realm = Realm . getInstance ( config0 ) ; <nl> + showStatus ( " Default0 " ) ; <nl> showStatus ( realm ) ; <nl> realm . close ( ) ; <nl> <nl> - / / Another migration test <nl> - Realm . migrateRealmAtPath ( path2 , new Migration ( ) ) ; <nl> - realm = Realm . getInstance ( this , " default2 " ) ; <nl> + / / Or you can add the migration code to the configuration . This will run the migration code without throwing <nl> + / / a RealmMigrationNeededException . <nl> + RealmConfiguration config1 = new RealmConfiguration . Builder ( this ) <nl> + . name ( " default1 " ) <nl> + . schemaVersion ( 3 ) <nl> + . migration ( new Migration ( ) ) <nl> + . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( config1 ) ; / / Automatically run migration if needed <nl> + showStatus ( " Default1 " ) ; <nl> showStatus ( realm ) ; <nl> realm . close ( ) ; <nl> <nl> - / / and a third : <nl> - Realm . migrateRealmAtPath ( path3 , new Migration ( ) ) ; <nl> - realm = Realm . getInstance ( this , " default3 " ) ; <nl> + / / or you can set . deleteRealmIfMigrationNeeded ( ) if you don ' t want to bother with migrations . <nl> + / / WARNING : This will delete all data in the Realm though . <nl> + RealmConfiguration config2 = new RealmConfiguration . Builder ( this ) <nl> + . name ( " default2 " ) <nl> + . schemaVersion ( 3 ) <nl> + . deleteRealmIfMigrationNeeded ( ) <nl> + . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( config2 ) ; <nl> + showStatus ( " default2 " ) ; <nl> showStatus ( realm ) ; <nl> realm . close ( ) ; <nl> } <nl> @ @ - 106 , 11 + 120 , 15 @ @ public class MigrationExampleActivity extends Activity { <nl> for ( Person person : realm . allObjects ( Person . class ) ) { <nl> stringBuilder . append ( person . toString ( ) ) . append ( " \ n " ) ; <nl> } <nl> - return stringBuilder . toString ( ) ; <nl> + <nl> + return ( stringBuilder . length ( ) = = 0 ) ? " < empty > " : stringBuilder . toString ( ) ; <nl> } <nl> <nl> private void showStatus ( Realm realm ) { <nl> - String txt = realmString ( realm ) ; <nl> + showStatus ( realmString ( realm ) ) ; <nl> + } <nl> + <nl> + private void showStatus ( String txt ) { <nl> Log . i ( TAG , txt ) ; <nl> TextView tv = new TextView ( this ) ; <nl> tv . setText ( txt ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> index 208e469 . . 99afd50 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> @ @ - 270 , 7 + 270 , 11 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> assertEquals ( 0 , realm . getVersion ( ) ) ; <nl> realm . close ( ) ; <nl> <nl> - / / Version upgrades should happen automatically if possible <nl> - realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; <nl> + / / Version upgrades should always require a migration . <nl> + try { <nl> + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; <nl> + fail ( ) ; <nl> + } catch ( RealmMigrationNeededException expected ) { <nl> + } <nl> } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 4b3ce71 . . 7aaacf6 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 64 , 7 + 64 , 6 @ @ import io . realm . internal . Util ; <nl> import io . realm . internal . android . DebugAndroidLogger ; <nl> import io . realm . internal . android . ReleaseAndroidLogger ; <nl> import io . realm . internal . log . RealmLog ; <nl> - import io . realm . internal . migration . SetVersionNumberMigration ; <nl> <nl> <nl> / * * <nl> @ @ - 1547 , 31 + 1546 , 37 @ @ public final class Realm implements Closeable { <nl> * @ param configuration <nl> * / <nl> public static synchronized void migrateRealm ( RealmConfiguration configuration ) { <nl> - if ( configuration . getMigration ( ) = = null ) { <nl> - migrateRealm ( configuration , new SetVersionNumberMigration ( configuration . getSchemaVersion ( ) ) ) ; <nl> - } else { <nl> - migrateRealm ( configuration , configuration . getMigration ( ) ) ; <nl> - } <nl> + migrateRealm ( configuration , null ) ; <nl> } <nl> <nl> / * * <nl> * Manually trigger a migration on a RealmMigration . <nl> * <nl> * @ param configuration { @ link RealmConfiguration } <nl> - * @ param migration { @ link RealmMigration } to run on the Realm . <nl> + * @ param migration { @ link RealmMigration } to run on the Realm . This will override any migration set on the <nl> + * configuration . <nl> * / <nl> public static void migrateRealm ( RealmConfiguration configuration , RealmMigration migration ) { <nl> - if ( migration = = null ) { <nl> - return ; <nl> + if ( configuration = = null ) { <nl> + throw new IllegalArgumentException ( " RealmConfiguration must be provided " ) ; <nl> + } <nl> + if ( migration = = null & & configuration . getMigration ( ) = = null ) { <nl> + throw new RealmMigrationNeededException ( configuration . getPath ( ) , " RealmMigration must be provided " ) ; <nl> } <nl> <nl> - Realm realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; <nl> - realm . beginTransaction ( ) ; <nl> - realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> - realm . commitTransaction ( ) ; <nl> - realm . close ( ) ; <nl> - <nl> - realmsCache . remove ( ) ; <nl> + RealmMigration realmMigration = ( migration = = null ) ? configuration . getMigration ( ) : migration ; <nl> + Realm realm = null ; <nl> + try { <nl> + realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . setVersion ( realmMigration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + realmsCache . remove ( ) ; <nl> + } <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java b / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java <nl> deleted file mode 100644 <nl> index 3c5784c . . 0000000 <nl> - - - a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2015 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - package io . realm . internal . migration ; <nl> - <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmMigration ; <nl> - <nl> - / * * <nl> - * Utility migration for automatically upgrading the version number of a Realm . <nl> - * / <nl> - public class SetVersionNumberMigration implements RealmMigration { <nl> - <nl> - private final int newVersion ; <nl> - <nl> - public SetVersionNumberMigration ( int newVersion ) { <nl> - this . newVersion = newVersion ; <nl> - } <nl> - <nl> - @ Override <nl> - public long execute ( Realm realm , long version ) { <nl> - return newVersion ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / realm / build . gradle b / realm / build . gradle 
 index 5cdfc4d . . d7e550e 100644 
 - - - a / realm / build . gradle 
 + + + b / realm / build . gradle 
 @ @ - 12 , 6 + 12 , 7 @ @ buildscript { 
 classpath ' com . github . skhatri : gradle - s3 - plugin : 1 . 0 . 2 ' 
 classpath ' com . github . rholder : gradle - one - jar : 1 . 0 . 4 ' 
 classpath ' com . github . jengelman . gradle . plugins : shadow : 1 . 2 . 2 ' 
 + classpath ' com . netflix . nebula : gradle - extra - configurations - plugin : 3 . 0 . 3 ' 
 } 
 } 
 
 diff - - git a / realm / realm - library / build . gradle b / realm / realm - library / build . gradle 
 index a721db2 . . a350f3b 100644 
 - - - a / realm / realm - library / build . gradle 
 + + + b / realm / realm - library / build . gradle 
 @ @ - 19 , 6 + 19 , 7 @ @ android { 
 } 
 
 dependencies { 
 + provided ' io . reactivex : rxjava : 1 . 0 . 14 ' 
 compile ' com . intellij : annotations : + @ jar ' 
 compile project ( ' : realm - annotations ' ) 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 new file mode 100644 
 index 0000000 . . d7c6806 
 - - - / dev / null 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RxJavaTests . java 
 @ @ - 0 , 0 + 1 , 44 @ @ 
 + package io . realm ; 
 + 
 + import android . test . AndroidTestCase ; 
 + 
 + import java . util . concurrent . atomic . AtomicBoolean ; 
 + 
 + import io . realm . entities . AllTypes ; 
 + import io . realm . entities . CyclicType ; 
 + import rx . Observable ; 
 + import rx . functions . Action1 ; 
 + 
 + public class RxJavaTests extends AndroidTestCase { 
 + 
 + private RealmConfiguration realmConfig ; 
 + private Realm realm ; 
 + 
 + @ Override 
 + protected void setUp ( ) throws Exception { 
 + realmConfig = new RealmConfiguration . Builder ( getContext ( ) ) . build ( ) ; 
 + Realm . deleteRealm ( realmConfig ) ; 
 + realm = Realm . getInstance ( realmConfig ) ; 
 + } 
 + 
 + @ Override 
 + protected void tearDown ( ) throws Exception { 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testObjectEmittedOnSubscribe ( ) { 
 + realm . beginTransaction ( ) ; 
 + final AllTypes obj = realm . createObject ( AllTypes . class ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + final AtomicBoolean subscribedNotified = new AtomicBoolean ( false ) ; 
 + obj . observable ( ) . subscribe ( new Action1 < AllTypes > ( ) { 
 + @ Override 
 + public void call ( AllTypes rxObject ) { 
 + assertTrue ( rxObject = = obj ) ; 
 + subscribedNotified . set ( true ) ; 
 + } 
 + } ) ; 
 + assertTrue ( subscribedNotified . get ( ) ) ; 
 + } 
 + } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObject . java b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 index 8508324 . . 3eec246 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObject . java 
 @ @ - 21 , 12 + 21 , 13 @ @ import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . Future ; 
 
 import io . realm . annotations . RealmClass ; 
 - import io . realm . internal . ColumnInfo ; 
 import io . realm . internal . InvalidRow ; 
 import io . realm . internal . Row ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableQuery ; 
 import io . realm . internal . log . RealmLog ; 
 + import io . realm . rx . Rx1ObservableFactory ; 
 + import rx . Observable ; 
 
 / * * 
 * In Realm you define your model classes by sub - classing RealmObject and adding fields to be 
 @ @ - 81 , 7 + 82 , 7 @ @ import io . realm . internal . log . RealmLog ; 
 * / 
 
 @ RealmClass 
 - public abstract class RealmObject { 
 + public abstract class RealmObject < E extends RealmObject > { 
 
 protected Row row ; 
 protected Realm realm ; 
 @ @ - 271 , 6 + 272 , 18 @ @ public abstract class RealmObject { 
 } 
 
 / * * 
 + * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when 
 + * subscribed to . 
 + * 
 + * @ return RxJava Observable 
 + * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . 
 + * / 
 + public Observable < E > observable ( ) { 
 + / / noinspection unchecked 
 + return Rx1ObservableFactory . from ( ( E ) this ) ; 
 + } 
 + 
 + / * * 
 * Notify all registered listeners . 
 * / 
 void notifyChangeListeners ( ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index fe6b20d . . 6e15d26 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 34 , 6 + 34 , 8 @ @ import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableQuery ; 
 import io . realm . internal . TableView ; 
 import io . realm . internal . log . RealmLog ; 
 + import io . realm . rx . Rx1ObservableFactory ; 
 + import rx . Observable ; 
 
 / * * 
 * This class holds all the matches of a { @ link io . realm . RealmQuery } for a given Realm . The objects 
 @ @ - 809 , 6 + 811 , 18 @ @ public final class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 } 
 
 / * * 
 + * Returns an RxJava Observable that monitors changes to this object . It will output the last known object when 
 + * subscribed to . 
 + * 
 + * @ return RxJava Observable 
 + * @ throws UnsupportedOperationException if RxJava is not present . See XXX for more details . 
 + * / 
 + public Observable < RealmResults < E > > observable ( ) { 
 + / / noinspection unchecked 
 + return Rx1ObservableFactory . from ( this ) ; 
 + } 
 + 
 + / * * 
 * Notify all registered listeners . 
 * / 
 void notifyChangeListeners ( ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / rx / Rx1ObservableFactory . java b / realm / realm - library / src / main / java / io / realm / rx / Rx1ObservableFactory . java 
 new file mode 100644 
 index 0000000 . . e961ede 
 - - - / dev / null 
 + + + b / realm / realm - library / src / main / java / io / realm / rx / Rx1ObservableFactory . java 
 @ @ - 0 , 0 + 1 , 81 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . rx ; 
 + 
 + import io . realm . Realm ; 
 + import io . realm . RealmChangeListener ; 
 + import io . realm . RealmList ; 
 + import io . realm . RealmObject ; 
 + import io . realm . RealmResults ; 
 + import rx . Observable ; 
 + import rx . subjects . BehaviorSubject ; 
 + 
 + public class Rx1ObservableFactory { 
 + 
 + / * * 
 + * Creates an Observable for a RealmObject . It will emit the initial object when subscribed to and on each update 
 + * to the object . 
 + * 
 + * @ param object RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + public static < E extends RealmObject > Observable < RealmObject < E > > from ( final RealmObject < E > object ) { 
 + final BehaviorSubject < RealmObject < E > > subject = BehaviorSubject . create ( object ) ; 
 + / / TODO This currently triggers on all changes in Realm . Replace with fine - grained notifications when possible . 
 + object . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + / / TODO This should ideally be a threadsafe , immutable object . Currently it is not : ( 
 + subject . onNext ( object ) ; 
 + } 
 + } ) ; 
 + return subject . asObservable ( ) ; 
 + } 
 + 
 + / * * 
 + * Creates an Observable for a RealmResults . It will emit the initial results when subscribed to and on each 
 + * update to the results . 
 + * 
 + * @ param results RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + public static < E extends RealmObject > Observable < RealmResults < E > > from ( final RealmResults < E > results ) { 
 + final BehaviorSubject < RealmResults < E > > subject = BehaviorSubject . create ( results ) ; 
 + / / TODO This currently triggers on all changes in Realm . Replace with fine - grained notifications when possible . 
 + results . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + / / TODO This should ideally be a threadsafe , immutable object . Currently it is not : ( 
 + subject . onNext ( results ) ; 
 + } 
 + } ) ; 
 + return subject . asObservable ( ) ; 
 + } 
 + 
 + / * * 
 + * Creates an Observable for a RealmResults . It will emit the initial list when subscribed to and on each 
 + * update to the list . 
 + * 
 + * @ param list RealmObject to listen to changes for . 
 + * @ param < E > Type of RealmObject 
 + * / 
 + public static < E extends RealmObject > Observable < RealmList < E > > from ( final RealmList < E > list ) { 
 + final BehaviorSubject < RealmList < E > > subject = BehaviorSubject . create ( list ) ; 
 + / / TODO Need to add ChangeListener to RealmList . Require fine - grained notifications . 
 + throw new RuntimeException ( " Not supported yet " ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 index e772d42 . . a1f69e4 100644 
 - - - a / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 + + + b / examples / migrationExample / src / main / java / io / realm / examples / realmmigrationexample / MigrationExampleActivity . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . io . IOException ; 
 import java . io . InputStream ; 
 
 import io . realm . Realm ; 
 + import io . realm . RealmConfiguration ; 
 import io . realm . examples . realmmigrationexample . model . Migration ; 
 import io . realm . examples . realmmigrationexample . model . Person ; 
 import io . realm . exceptions . RealmMigrationNeededException ; 
 @ @ - 41 , 6 + 42 , 7 @ @ public class MigrationExampleActivity extends Activity { 
 public static final String TAG = MigrationExampleActivity . class . getName ( ) ; 
 
 private LinearLayout rootLayout = null ; 
 + private Realm realm ; 
 
 @ Override 
 protected void onCreate ( Bundle savedInstanceState ) { 
 @ @ - 51 , 35 + 53 , 47 @ @ public class MigrationExampleActivity extends Activity { 
 rootLayout . removeAllViews ( ) ; 
 
 / / 3 versions of the databases for testing . Normally you would only have one . 
 - String path3 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; 
 - String path1 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; 
 - String path2 = copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; 
 - 
 - / / If you try to open a file that doesn ' t match your model an exception is thrown : 
 - try { 
 - / / should throw as migration is required 
 - Realm . getInstance ( this , " default1 " ) ; 
 - } catch ( RealmMigrationNeededException ex ) { 
 - Log . i ( TAG , " Excellent ! This is expected . " ) ; 
 - } 
 - 
 - Realm realm ; 
 - 
 - / / So you migrate your data 
 - Realm . migrateRealmAtPath ( path1 , new Migration ( ) ) ; 
 - realm = Realm . getInstance ( this , " default1 " ) ; 
 + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default0 ) , " default0 " ) ; 
 + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default1 ) , " default1 " ) ; 
 + copyBundledRealmFile ( this . getResources ( ) . openRawResource ( R . raw . default2 ) , " default2 " ) ; 
 + 
 + / / When you create a RealmConfiguration you can specify the version of the schema . 
 + / / If the schema does not have that version a RealmMigrationNeededException will be thrown . 
 + RealmConfiguration config0 = new RealmConfiguration . Builder ( this ) 
 + . name ( " default0 " ) 
 + . schemaVersion ( 3 ) 
 + . build ( ) ; 
 + 
 + / / You can then manually call Realm . migrateRealm ( ) . 
 + Realm . migrateRealm ( config0 , new Migration ( ) ) ; 
 + realm = Realm . getInstance ( config0 ) ; 
 + showStatus ( " Default0 " ) ; 
 showStatus ( realm ) ; 
 realm . close ( ) ; 
 
 - / / Another migration test 
 - Realm . migrateRealmAtPath ( path2 , new Migration ( ) ) ; 
 - realm = Realm . getInstance ( this , " default2 " ) ; 
 + / / Or you can add the migration code to the configuration . This will run the migration code without throwing 
 + / / a RealmMigrationNeededException . 
 + RealmConfiguration config1 = new RealmConfiguration . Builder ( this ) 
 + . name ( " default1 " ) 
 + . schemaVersion ( 3 ) 
 + . migration ( new Migration ( ) ) 
 + . build ( ) ; 
 + 
 + realm = Realm . getInstance ( config1 ) ; / / Automatically run migration if needed 
 + showStatus ( " Default1 " ) ; 
 showStatus ( realm ) ; 
 realm . close ( ) ; 
 
 - / / and a third : 
 - Realm . migrateRealmAtPath ( path3 , new Migration ( ) ) ; 
 - realm = Realm . getInstance ( this , " default3 " ) ; 
 + / / or you can set . deleteRealmIfMigrationNeeded ( ) if you don ' t want to bother with migrations . 
 + / / WARNING : This will delete all data in the Realm though . 
 + RealmConfiguration config2 = new RealmConfiguration . Builder ( this ) 
 + . name ( " default2 " ) 
 + . schemaVersion ( 3 ) 
 + . deleteRealmIfMigrationNeeded ( ) 
 + . build ( ) ; 
 + 
 + realm = Realm . getInstance ( config2 ) ; 
 + showStatus ( " default2 " ) ; 
 showStatus ( realm ) ; 
 realm . close ( ) ; 
 } 
 @ @ - 106 , 11 + 120 , 15 @ @ public class MigrationExampleActivity extends Activity { 
 for ( Person person : realm . allObjects ( Person . class ) ) { 
 stringBuilder . append ( person . toString ( ) ) . append ( " \ n " ) ; 
 } 
 - return stringBuilder . toString ( ) ; 
 + 
 + return ( stringBuilder . length ( ) = = 0 ) ? " < empty > " : stringBuilder . toString ( ) ; 
 } 
 
 private void showStatus ( Realm realm ) { 
 - String txt = realmString ( realm ) ; 
 + showStatus ( realmString ( realm ) ) ; 
 + } 
 + 
 + private void showStatus ( String txt ) { 
 Log . i ( TAG , txt ) ; 
 TextView tv = new TextView ( this ) ; 
 tv . setText ( txt ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 index 208e469 . . 99afd50 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 @ @ - 270 , 7 + 270 , 11 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 assertEquals ( 0 , realm . getVersion ( ) ) ; 
 realm . close ( ) ; 
 
 - / / Version upgrades should happen automatically if possible 
 - realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; 
 + / / Version upgrades should always require a migration . 
 + try { 
 + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . build ( ) ) ; 
 + fail ( ) ; 
 + } catch ( RealmMigrationNeededException expected ) { 
 + } 
 } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 4b3ce71 . . 7aaacf6 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 64 , 7 + 64 , 6 @ @ import io . realm . internal . Util ; 
 import io . realm . internal . android . DebugAndroidLogger ; 
 import io . realm . internal . android . ReleaseAndroidLogger ; 
 import io . realm . internal . log . RealmLog ; 
 - import io . realm . internal . migration . SetVersionNumberMigration ; 
 
 
 / * * 
 @ @ - 1547 , 31 + 1546 , 37 @ @ public final class Realm implements Closeable { 
 * @ param configuration 
 * / 
 public static synchronized void migrateRealm ( RealmConfiguration configuration ) { 
 - if ( configuration . getMigration ( ) = = null ) { 
 - migrateRealm ( configuration , new SetVersionNumberMigration ( configuration . getSchemaVersion ( ) ) ) ; 
 - } else { 
 - migrateRealm ( configuration , configuration . getMigration ( ) ) ; 
 - } 
 + migrateRealm ( configuration , null ) ; 
 } 
 
 / * * 
 * Manually trigger a migration on a RealmMigration . 
 * 
 * @ param configuration { @ link RealmConfiguration } 
 - * @ param migration { @ link RealmMigration } to run on the Realm . 
 + * @ param migration { @ link RealmMigration } to run on the Realm . This will override any migration set on the 
 + * configuration . 
 * / 
 public static void migrateRealm ( RealmConfiguration configuration , RealmMigration migration ) { 
 - if ( migration = = null ) { 
 - return ; 
 + if ( configuration = = null ) { 
 + throw new IllegalArgumentException ( " RealmConfiguration must be provided " ) ; 
 + } 
 + if ( migration = = null & & configuration . getMigration ( ) = = null ) { 
 + throw new RealmMigrationNeededException ( configuration . getPath ( ) , " RealmMigration must be provided " ) ; 
 } 
 
 - Realm realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; 
 - realm . beginTransaction ( ) ; 
 - realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; 
 - realm . commitTransaction ( ) ; 
 - realm . close ( ) ; 
 - 
 - realmsCache . remove ( ) ; 
 + RealmMigration realmMigration = ( migration = = null ) ? configuration . getMigration ( ) : migration ; 
 + Realm realm = null ; 
 + try { 
 + realm = Realm . createAndValidate ( configuration , false , Looper . myLooper ( ) ! = null ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . setVersion ( realmMigration . execute ( realm , realm . getVersion ( ) ) ) ; 
 + realm . commitTransaction ( ) ; 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + realmsCache . remove ( ) ; 
 + } 
 + } 
 } 
 
 / * * 
 diff - - git a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java b / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java 
 deleted file mode 100644 
 index 3c5784c . . 0000000 
 - - - a / realm / src / main / java / io / realm / internal / migration / SetVersionNumberMigration . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2015 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - package io . realm . internal . migration ; 
 - 
 - import io . realm . Realm ; 
 - import io . realm . RealmMigration ; 
 - 
 - / * * 
 - * Utility migration for automatically upgrading the version number of a Realm . 
 - * / 
 - public class SetVersionNumberMigration implements RealmMigration { 
 - 
 - private final int newVersion ; 
 - 
 - public SetVersionNumberMigration ( int newVersion ) { 
 - this . newVersion = newVersion ; 
 - } 
 - 
 - @ Override 
 - public long execute ( Realm realm , long version ) { 
 - return newVersion ; 
 - } 
 - }
