BLEU SCORE: 0.024615130620079664

TEST MSG: Only throw RealmException if absolutely necessary
GENERATED MSG: Added test cases for RealmConfiguration + minor refactoring .

TEST DIFF (one line): diff - - git a / CHANGELOG . md b / CHANGELOG . md <nl> index 165b014 . . d6fd7b3 100644 <nl> - - - a / CHANGELOG . md <nl> + + + b / CHANGELOG . md <nl> @ @ - 2 , 11 + 2 , 12 @ @ <nl> <nl> # # # Breaking changes <nl> <nl> + * All JSON methods on Realm now only wraps JSONException in RealmException . All other Exceptions are thrown as they are . <nl> * Removed ` HandlerController ` from the public API . <nl> <nl> # # # Deprecated <nl> <nl> - * ` RealmConfiguration . setModules ( ) ` . Use ` RealmConfiguration . modules ( ) ` instead . <nl> + * ` RealmConfiguration . setModules ( ) ` . Use ` RealmConfiguration . modules ( ) ` insteasd . <nl> <nl> # # # Enhancements <nl> <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmJsonTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmJsonTests . java <nl> index 1d44baa . . 6aec097 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmJsonTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmJsonTests . java <nl> @ @ - 1171 , 71 + 1171 , 90 @ @ public class RealmJsonTests { <nl> try { <nl> realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 0 ) ) ; <nl> fail ( ) ; <nl> - } catch ( RealmException expected ) { <nl> - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } catch ( Exception e ) { <nl> + fail ( " Unexpected exception : " + e ) ; <nl> } <nl> + <nl> / / 2 Bytes <nl> try { <nl> realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 1 ) ) ; <nl> fail ( ) ; <nl> - } catch ( RealmException expected ) { <nl> - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } catch ( Exception e ) { <nl> + fail ( " Unexpected exception : " + e ) ; <nl> } <nl> + <nl> / / 3 Boolean <nl> try { <nl> realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 2 ) ) ; <nl> fail ( ) ; <nl> - } catch ( RealmException expected ) { <nl> - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } catch ( Exception e ) { <nl> + fail ( " Unexpected exception : " + e ) ; <nl> } <nl> + <nl> / / 4 Byte <nl> try { <nl> realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 3 ) ) ; <nl> fail ( ) ; <nl> - } catch ( RealmException expected ) { <nl> - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } catch ( Exception e ) { <nl> + fail ( " Unexpected exception : " + e ) ; <nl> } <nl> + <nl> / / 5 Short <nl> try { <nl> realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 4 ) ) ; <nl> fail ( ) ; <nl> - } catch ( RealmException expected ) { <nl> - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } catch ( Exception e ) { <nl> + fail ( " Unexpected exception : " + e ) ; <nl> } <nl> + <nl> / / 6 Integer <nl> try { <nl> realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 5 ) ) ; <nl> fail ( ) ; <nl> - } catch ( RealmException expected ) { <nl> - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } catch ( Exception e ) { <nl> + fail ( " Unexpected exception : " + e ) ; <nl> } <nl> + <nl> / / 7 Long <nl> try { <nl> realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 6 ) ) ; <nl> fail ( ) ; <nl> - } catch ( RealmException expected ) { <nl> - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } catch ( Exception e ) { <nl> + fail ( " Unexpected exception : " + e ) ; <nl> } <nl> + <nl> / / 8 Float <nl> try { <nl> realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 7 ) ) ; <nl> fail ( ) ; <nl> - } catch ( RealmException expected ) { <nl> - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } catch ( Exception e ) { <nl> + fail ( " Unexpected exception : " + e ) ; <nl> } <nl> + <nl> / / 9 Double <nl> try { <nl> realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 8 ) ) ; <nl> fail ( ) ; <nl> - } catch ( RealmException expected ) { <nl> - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } catch ( Exception e ) { <nl> + fail ( " Unexpected exception : " + e ) ; <nl> } <nl> + <nl> / / 10 Date <nl> try { <nl> realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 9 ) ) ; <nl> fail ( ) ; <nl> - } catch ( RealmException expected ) { <nl> - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } catch ( Exception e ) { <nl> + fail ( " Unexpected exception : " + e ) ; <nl> } <nl> <nl> realm . cancelTransaction ( ) ; <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> index c0ff52c . . 0268a27 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java <nl> @ @ - 2130 , 18 + 2130 , 18 @ @ public class RealmTests { <nl> try { realm . delete ( AllTypes . class ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . deleteAll ( ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> <nl> - try { realm . createObjectFromJson ( AllTypesPrimaryKey . class , jsonObj ) ; fail ( ) ; } catch ( RealmException expected ) { } <nl> - try { realm . createObjectFromJson ( AllTypesPrimaryKey . class , jsonObjStr ) ; fail ( ) ; } catch ( RealmException expected ) { } <nl> + try { realm . createObjectFromJson ( AllTypesPrimaryKey . class , jsonObj ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> + try { realm . createObjectFromJson ( AllTypesPrimaryKey . class , jsonObjStr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . createObjectFromJson ( NoPrimaryKeyNullTypes . class , jsonObjStream ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . createOrUpdateObjectFromJson ( AllTypesPrimaryKey . class , jsonObj ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . createOrUpdateObjectFromJson ( AllTypesPrimaryKey . class , jsonObjStr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . createOrUpdateObjectFromJson ( AllTypesPrimaryKey . class , jsonObjStream2 ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> <nl> - try { realm . createAllFromJson ( AllTypesPrimaryKey . class , jsonArr ) ; fail ( ) ; } catch ( RealmException expected ) { } <nl> - try { realm . createAllFromJson ( AllTypesPrimaryKey . class , jsonArrStr ) ; fail ( ) ; } catch ( RealmException expected ) { } <nl> + try { realm . createAllFromJson ( AllTypesPrimaryKey . class , jsonArr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> + try { realm . createAllFromJson ( AllTypesPrimaryKey . class , jsonArrStr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . createAllFromJson ( NoPrimaryKeyNullTypes . class , jsonArrStream ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> - try { realm . createOrUpdateAllFromJson ( AllTypesPrimaryKey . class , jsonArr ) ; fail ( ) ; } catch ( RealmException expected ) { } <nl> - try { realm . createOrUpdateAllFromJson ( AllTypesPrimaryKey . class , jsonArrStr ) ; fail ( ) ; } catch ( RealmException expected ) { } <nl> + try { realm . createOrUpdateAllFromJson ( AllTypesPrimaryKey . class , jsonArr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> + try { realm . createOrUpdateAllFromJson ( AllTypesPrimaryKey . class , jsonArrStr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> try { realm . createOrUpdateAllFromJson ( AllTypesPrimaryKey . class , jsonArrStream2 ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 2f63c38 . . 36d827d 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 350 , 8 + 350 , 8 @ @ public final class Realm extends BaseRealm { <nl> for ( int i = 0 ; i < json . length ( ) ; i + + ) { <nl> try { <nl> configuration . getSchemaMediator ( ) . createOrUpdateUsingJsonObject ( clazz , this , json . getJSONObject ( i ) , false ) ; <nl> - } catch ( Exception e ) { <nl> - throw new RealmException ( " Could not map Json " , e ) ; <nl> + } catch ( JSONException e ) { <nl> + throw new RealmException ( " Could not map JSON " , e ) ; <nl> } <nl> } <nl> } <nl> @ @ - 378 , 8 + 378 , 8 @ @ public final class Realm extends BaseRealm { <nl> for ( int i = 0 ; i < json . length ( ) ; i + + ) { <nl> try { <nl> configuration . getSchemaMediator ( ) . createOrUpdateUsingJsonObject ( clazz , this , json . getJSONObject ( i ) , true ) ; <nl> - } catch ( Exception e ) { <nl> - throw new RealmException ( " Could not map Json " , e ) ; <nl> + } catch ( JSONException e ) { <nl> + throw new RealmException ( " Could not map JSON " , e ) ; <nl> } <nl> } <nl> } <nl> @ @ - 402 , 7 + 402 , 7 @ @ public final class Realm extends BaseRealm { <nl> JSONArray arr ; <nl> try { <nl> arr = new JSONArray ( json ) ; <nl> - } catch ( Exception e ) { <nl> + } catch ( JSONException e ) { <nl> throw new RealmException ( " Could not create JSON array from string " , e ) ; <nl> } <nl> <nl> @ @ - 526 , 8 + 526 , 8 @ @ public final class Realm extends BaseRealm { <nl> <nl> try { <nl> return configuration . getSchemaMediator ( ) . createOrUpdateUsingJsonObject ( clazz , this , json , false ) ; <nl> - } catch ( Exception e ) { <nl> - throw new RealmException ( " Could not map Json " , e ) ; <nl> + } catch ( JSONException e ) { <nl> + throw new RealmException ( " Could not map JSON " , e ) ; <nl> } <nl> } <nl> <nl> @ @ - 555 , 7 + 555 , 7 @ @ public final class Realm extends BaseRealm { <nl> handlerController . addToRealmObjects ( realmObject ) ; <nl> return realmObject ; <nl> } catch ( JSONException e ) { <nl> - throw new RealmException ( " Could not map Json " , e ) ; <nl> + throw new RealmException ( " Could not map JSON " , e ) ; <nl> } <nl> } <nl> <nl> @ @ - 578 , 7 + 578 , 7 @ @ public final class Realm extends BaseRealm { <nl> JSONObject obj ; <nl> try { <nl> obj = new JSONObject ( json ) ; <nl> - } catch ( Exception e ) { <nl> + } catch ( JSONException e ) { <nl> throw new RealmException ( " Could not create Json object from string " , e ) ; <nl> } <nl> <nl> @ @ - 609 , 7 + 609 , 7 @ @ public final class Realm extends BaseRealm { <nl> JSONObject obj ; <nl> try { <nl> obj = new JSONObject ( json ) ; <nl> - } catch ( Exception e ) { <nl> + } catch ( JSONException e ) { <nl> throw new RealmException ( " Could not create Json object from string " , e ) ; <nl> } <nl> <nl> @ @ - 1527 , 7 + 1527 , 7 @ @ public final class Realm extends BaseRealm { <nl> try { <nl> return realmFile . getCanonicalPath ( ) ; <nl> } catch ( IOException e ) { <nl> - throw new RealmException ( " Could not resolve the canonical path to the Realm file : " + realmFile . getAbsolutePath ( ) ) ; <nl> + throw new RealmIOException ( " Could not resolve the canonical path to the Realm file : " + realmFile . getAbsolutePath ( ) ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> index 1079902 . . 106aa84 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> @ @ - 18 , 8 + 18 , 24 @ @ package io . realm ; <nl> <nl> import android . test . AndroidTestCase ; <nl> <nl> + import java . io . File ; <nl> + import java . util . Random ; <nl> + <nl> + import io . realm . entities . AllTypesPrimaryKey ; <nl> + import io . realm . entities . Dog ; <nl> + import io . realm . entities . Owner ; <nl> + import io . realm . exceptions . RealmMigrationNeededException ; <nl> + <nl> public class RealmConfigurationTest extends AndroidTestCase { <nl> <nl> + RealmConfiguration defaultConfig ; <nl> + @ Override <nl> + protected void setUp ( ) throws Exception { <nl> + super . setUp ( ) ; <nl> + defaultConfig = new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ; <nl> + Realm . deleteRealmFile ( defaultConfig ) ; <nl> + } <nl> + <nl> public void testSetNullDefaultConfigurationThrows ( ) { <nl> try { <nl> Realm . setDefaultConfiguration ( null ) ; <nl> @ @ - 28 , 4 + 44 , 198 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> } <nl> fail ( ) ; <nl> } <nl> + <nl> + public void testGetNullDefaultInstanceThrows ( ) { <nl> + try { <nl> + Realm . getDefaultInstance ( ) ; <nl> + } catch ( NullPointerException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testGetNullInstance ( ) { <nl> + try { <nl> + Realm . getInstance ( ( RealmConfiguration ) null ) ; <nl> + } catch ( NullPointerException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNullDirThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( ( File ) null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNullNameThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . name ( null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testEmptyNameThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . name ( " " ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNullKeyThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testWrongKeyLengthThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( new byte [ 63 ] ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testNegativeVersionThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . version ( - 1 ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testVersionLessThanDiscVersionThrows ( ) { <nl> + Realm . deleteRealmFile ( new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ) ; <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 42 ) . create ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + try { <nl> + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 1 ) . create ( ) ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testVersionEqualWhenSchemaChangesThrows ( ) { <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . version ( 42 ) <nl> + . schema ( Dog . class ) <nl> + . create ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + try { <nl> + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . version ( 42 ) <nl> + . schema ( AllTypesPrimaryKey . class ) <nl> + . create ( ) ) ; <nl> + } catch ( RealmMigrationNeededException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testCustomSchemaAlsoIncludeLinkedClasses ( ) { <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . schema ( Dog . class ) <nl> + . create ( ) ) ; <nl> + assertEquals ( 3 , realm . getTable ( Owner . class ) . getColumnCount ( ) ) ; <nl> + assertEquals ( 7 , realm . getTable ( Dog . class ) . getColumnCount ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testNullMigrationThrows ( ) { <nl> + try { <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . migration ( null ) . create ( ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + return ; <nl> + } <nl> + fail ( ) ; <nl> + } <nl> + <nl> + public void testSetDefaultConfiguration ( ) { <nl> + Realm . setDefaultConfiguration ( defaultConfig ) ; <nl> + Realm realm = Realm . getDefaultInstance ( ) ; <nl> + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testGetInstance ( ) { <nl> + Realm realm = Realm . getInstance ( defaultConfig ) ; <nl> + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testStandardSetup ( ) { <nl> + byte [ ] key = new byte [ 64 ] ; <nl> + new Random ( ) . nextBytes ( key ) ; <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . name ( " foo . realm " ) <nl> + . encryptionKey ( key ) <nl> + . version ( 42 ) <nl> + . migration ( new RealmMigration ( ) { <nl> + @ Override <nl> + public long execute ( Realm realm , long version ) { <nl> + return 0 ; / / no - op <nl> + } <nl> + } ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . deleteRealmIfMigrationNeeded ( ) <nl> + . create ( ) ) ; <nl> + assertTrue ( realm . getPath ( ) . endsWith ( " foo . realm " ) ) ; <nl> + assertEquals ( 42 , realm . getVersion ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testDeleteRealmIfMigration ( ) { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . deleteRealmBeforeOpening ( ) <nl> + . schema ( Dog . class ) <nl> + . version ( 0 ) <nl> + . create ( ) ; <nl> + Realm . deleteRealmFile ( config ) ; <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . copyToRealm ( new Dog ( " Foo " ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> + . schema ( Owner . class , Dog . class ) <nl> + . version ( 1 ) <nl> + . deleteRealmIfMigrationNeeded ( ) <nl> + . create ( ) ) ; <nl> + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> + <nl> + public void testDeleteRealmBeforeOpening ( ) { <nl> + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) . deleteRealmBeforeOpening ( ) . create ( ) ; <nl> + Realm realm = Realm . getInstance ( config ) ; <nl> + realm . beginTransaction ( ) ; <nl> + realm . copyToRealm ( new Dog ( " Foo " ) ) ; <nl> + realm . commitTransaction ( ) ; <nl> + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + <nl> + realm = Realm . getInstance ( config ) ; <nl> + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; <nl> + realm . close ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 18376c2 . . 59a4ad3 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 232 , 7 + 232 , 9 @ @ public final class Realm implements Closeable { <nl> sharedGroup . close ( ) ; <nl> sharedGroup = null ; <nl> AtomicInteger counter = openRealms . get ( id ) ; <nl> - counter . decrementAndGet ( ) ; <nl> + if ( counter . decrementAndGet ( ) = = 0 ) { <nl> + openRealms . remove ( id ) ; <nl> + } ; <nl> } <nl> <nl> int refCount = references - 1 ; <nl> @ @ - 399 , 11 + 401 , 11 @ @ public final class Realm implements Closeable { <nl> @ Deprecated <nl> @ SuppressWarnings ( " UnusedDeclaration " ) <nl> public static Realm getInstance ( Context context , String fileName , byte [ ] key ) { <nl> - return create ( new RealmConfiguration . Builder ( context ) <nl> - . name ( fileName ) <nl> - . encryptionKey ( key ) <nl> - . create ( ) <nl> - ) ; <nl> + RealmConfiguration . Builder builder = new RealmConfiguration . Builder ( context ) . name ( fileName ) ; <nl> + if ( key ! = null ) { <nl> + builder . encryptionKey ( key ) ; <nl> + } <nl> + return create ( builder . create ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 571 , 7 + 573 , 7 @ @ public final class Realm implements Closeable { <nl> if ( references = = 0 ) { <nl> AtomicInteger counter = openRealms . get ( id ) ; <nl> if ( counter = = null ) { <nl> - if ( config . isDeleteRealmBeforeOpening ( ) ) { <nl> + if ( config . shouldDeleteRealmBeforeOpening ( ) ) { <nl> deleteRealmFile ( config ) ; <nl> } <nl> openRealms . put ( id , new AtomicInteger ( 1 ) ) ; <nl> @ @ - 598 , 6 + 600 , 18 @ @ public final class Realm implements Closeable { <nl> realmsCache . set ( realms ) ; <nl> localRefCount . put ( id , references + 1 ) ; <nl> <nl> + / / Check versions of Realm <nl> + long currentVersion = realm . getVersion ( ) ; <nl> + long requiredVersion = config . getVersion ( ) ; <nl> + if ( currentVersion ! = UNVERSIONED & & currentVersion < requiredVersion ) { <nl> + realm . close ( ) ; <nl> + throw new RealmMigrationNeededException ( String . format ( " Realm on disc need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; <nl> + } <nl> + if ( currentVersion ! = UNVERSIONED & & requiredVersion < currentVersion ) { <nl> + realm . close ( ) ; <nl> + throw new IllegalArgumentException ( String . format ( " Realm on disc is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; <nl> + } <nl> + <nl> if ( validateSchema ) { <nl> try { <nl> initializeRealm ( realm , config ) ; <nl> @ @ - 647 , 14 + 661 , 15 @ @ public final class Realm implements Closeable { <nl> try { <nl> realm . beginTransaction ( ) ; <nl> if ( version = = UNVERSIONED ) { <nl> - realm . setVersion ( 0 ) ; <nl> commitNeeded = true ; <nl> + realm . setVersion ( config . getVersion ( ) ) ; <nl> } <nl> - <nl> for ( String className : proxyClasses ) { <nl> String [ ] splitted = className . split ( " \ \ . " ) ; <nl> String modelClassName = splitted [ splitted . length - 1 ] ; <nl> String generatedClassName = getProxyClassName ( modelClassName ) ; <nl> + <nl> + / / Verify that there is a proxy class for each supported model class <nl> Class < ? > generatedClass ; <nl> try { <nl> generatedClass = Class . forName ( generatedClassName ) ; <nl> @ @ - 727 , 7 + 742 , 6 @ @ public final class Realm implements Closeable { <nl> } <nl> } finally { <nl> if ( commitNeeded ) { <nl> - realm . setVersion ( config . getVersion ( ) ) ; <nl> realm . commitTransaction ( ) ; <nl> } else { <nl> realm . cancelTransaction ( ) ; <nl> @ @ - 1391 , 7 + 1405 , 7 @ @ public final class Realm implements Closeable { <nl> public < E extends RealmObject > RealmResults < E > allObjectsSorted ( Class < E > clazz , String fieldName1 , <nl> boolean sortAscending1 , String fieldName2 , <nl> boolean sortAscending2 ) { <nl> - return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , <nl> + return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , <nl> sortAscending2 } ) ; <nl> } <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> index 5c9d235 . . 1417c13 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class RealmConfiguration { <nl> return deleteRealmIfMigrationNeeded ; <nl> } <nl> <nl> - public boolean isDeleteRealmBeforeOpening ( ) { <nl> + public boolean shouldDeleteRealmBeforeOpening ( ) { <nl> return deleteRealmBeforeOpening ; <nl> } <nl> <nl> @ @ - 133 , 7 + 133 , 7 @ @ public class RealmConfiguration { <nl> * / <nl> public Builder ( Context context ) { <nl> if ( context = = null ) { <nl> - throw new NullPointerException ( " A non - null Context must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null Context must be provided " ) ; <nl> } <nl> this . folder = context . getFilesDir ( ) ; <nl> } <nl> @ @ - 155 , 7 + 155 , 7 @ @ public class RealmConfiguration { <nl> * / <nl> public Builder encryptionKey ( byte [ ] key ) { <nl> if ( key = = null ) { <nl> - throw new NullPointerException ( " A non - null key must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null key must be provided " ) ; <nl> } <nl> if ( key . length ! = 64 ) { <nl> throw new IllegalArgumentException ( " The provided key must be 64 bytes . Yours was : " + key . length ) ; <nl> @ @ - 177 , 7 + 177 , 7 @ @ public class RealmConfiguration { <nl> * <nl> * @ see # migration ( RealmMigration ) <nl> * / <nl> - public Builder setVersion ( int version ) { <nl> + public Builder version ( int version ) { <nl> if ( version < 0 ) { <nl> throw new IllegalArgumentException ( " Realm version numbers must be 0 ( zero ) or higher . Yours was : " + version ) ; <nl> } <nl> @ @ - 192 , 7 + 192 , 7 @ @ public class RealmConfiguration { <nl> * / <nl> public Builder migration ( RealmMigration migration ) { <nl> if ( migration = = null ) { <nl> - throw new NullPointerException ( " A non - null migration must be provided " ) ; <nl> + throw new IllegalArgumentException ( " A non - null migration must be provided " ) ; <nl> } <nl> this . migration = migration ; <nl> return this ;

TEST DIFF:
diff - - git a / CHANGELOG . md b / CHANGELOG . md 
 index 165b014 . . d6fd7b3 100644 
 - - - a / CHANGELOG . md 
 + + + b / CHANGELOG . md 
 @ @ - 2 , 11 + 2 , 12 @ @ 
 
 # # # Breaking changes 
 
 + * All JSON methods on Realm now only wraps JSONException in RealmException . All other Exceptions are thrown as they are . 
 * Removed ` HandlerController ` from the public API . 
 
 # # # Deprecated 
 
 - * ` RealmConfiguration . setModules ( ) ` . Use ` RealmConfiguration . modules ( ) ` instead . 
 + * ` RealmConfiguration . setModules ( ) ` . Use ` RealmConfiguration . modules ( ) ` insteasd . 
 
 # # # Enhancements 
 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmJsonTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmJsonTests . java 
 index 1d44baa . . 6aec097 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmJsonTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmJsonTests . java 
 @ @ - 1171 , 71 + 1171 , 90 @ @ public class RealmJsonTests { 
 try { 
 realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 0 ) ) ; 
 fail ( ) ; 
 - } catch ( RealmException expected ) { 
 - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } catch ( Exception e ) { 
 + fail ( " Unexpected exception : " + e ) ; 
 } 
 + 
 / / 2 Bytes 
 try { 
 realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 1 ) ) ; 
 fail ( ) ; 
 - } catch ( RealmException expected ) { 
 - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } catch ( Exception e ) { 
 + fail ( " Unexpected exception : " + e ) ; 
 } 
 + 
 / / 3 Boolean 
 try { 
 realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 2 ) ) ; 
 fail ( ) ; 
 - } catch ( RealmException expected ) { 
 - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } catch ( Exception e ) { 
 + fail ( " Unexpected exception : " + e ) ; 
 } 
 + 
 / / 4 Byte 
 try { 
 realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 3 ) ) ; 
 fail ( ) ; 
 - } catch ( RealmException expected ) { 
 - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } catch ( Exception e ) { 
 + fail ( " Unexpected exception : " + e ) ; 
 } 
 + 
 / / 5 Short 
 try { 
 realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 4 ) ) ; 
 fail ( ) ; 
 - } catch ( RealmException expected ) { 
 - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } catch ( Exception e ) { 
 + fail ( " Unexpected exception : " + e ) ; 
 } 
 + 
 / / 6 Integer 
 try { 
 realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 5 ) ) ; 
 fail ( ) ; 
 - } catch ( RealmException expected ) { 
 - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } catch ( Exception e ) { 
 + fail ( " Unexpected exception : " + e ) ; 
 } 
 + 
 / / 7 Long 
 try { 
 realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 6 ) ) ; 
 fail ( ) ; 
 - } catch ( RealmException expected ) { 
 - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } catch ( Exception e ) { 
 + fail ( " Unexpected exception : " + e ) ; 
 } 
 + 
 / / 8 Float 
 try { 
 realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 7 ) ) ; 
 fail ( ) ; 
 - } catch ( RealmException expected ) { 
 - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } catch ( Exception e ) { 
 + fail ( " Unexpected exception : " + e ) ; 
 } 
 + 
 / / 9 Double 
 try { 
 realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 8 ) ) ; 
 fail ( ) ; 
 - } catch ( RealmException expected ) { 
 - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } catch ( Exception e ) { 
 + fail ( " Unexpected exception : " + e ) ; 
 } 
 + 
 / / 10 Date 
 try { 
 realm . createObjectFromJson ( NullTypes . class , array . getJSONObject ( 9 ) ) ; 
 fail ( ) ; 
 - } catch ( RealmException expected ) { 
 - assertTrue ( expected . getCause ( ) instanceof IllegalArgumentException ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } catch ( Exception e ) { 
 + fail ( " Unexpected exception : " + e ) ; 
 } 
 
 realm . cancelTransaction ( ) ; 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 index c0ff52c . . 0268a27 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmTests . java 
 @ @ - 2130 , 18 + 2130 , 18 @ @ public class RealmTests { 
 try { realm . delete ( AllTypes . class ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . deleteAll ( ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 
 - try { realm . createObjectFromJson ( AllTypesPrimaryKey . class , jsonObj ) ; fail ( ) ; } catch ( RealmException expected ) { } 
 - try { realm . createObjectFromJson ( AllTypesPrimaryKey . class , jsonObjStr ) ; fail ( ) ; } catch ( RealmException expected ) { } 
 + try { realm . createObjectFromJson ( AllTypesPrimaryKey . class , jsonObj ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 + try { realm . createObjectFromJson ( AllTypesPrimaryKey . class , jsonObjStr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . createObjectFromJson ( NoPrimaryKeyNullTypes . class , jsonObjStream ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . createOrUpdateObjectFromJson ( AllTypesPrimaryKey . class , jsonObj ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . createOrUpdateObjectFromJson ( AllTypesPrimaryKey . class , jsonObjStr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . createOrUpdateObjectFromJson ( AllTypesPrimaryKey . class , jsonObjStream2 ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 
 - try { realm . createAllFromJson ( AllTypesPrimaryKey . class , jsonArr ) ; fail ( ) ; } catch ( RealmException expected ) { } 
 - try { realm . createAllFromJson ( AllTypesPrimaryKey . class , jsonArrStr ) ; fail ( ) ; } catch ( RealmException expected ) { } 
 + try { realm . createAllFromJson ( AllTypesPrimaryKey . class , jsonArr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 + try { realm . createAllFromJson ( AllTypesPrimaryKey . class , jsonArrStr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . createAllFromJson ( NoPrimaryKeyNullTypes . class , jsonArrStream ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 - try { realm . createOrUpdateAllFromJson ( AllTypesPrimaryKey . class , jsonArr ) ; fail ( ) ; } catch ( RealmException expected ) { } 
 - try { realm . createOrUpdateAllFromJson ( AllTypesPrimaryKey . class , jsonArrStr ) ; fail ( ) ; } catch ( RealmException expected ) { } 
 + try { realm . createOrUpdateAllFromJson ( AllTypesPrimaryKey . class , jsonArr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 + try { realm . createOrUpdateAllFromJson ( AllTypesPrimaryKey . class , jsonArrStr ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 try { realm . createOrUpdateAllFromJson ( AllTypesPrimaryKey . class , jsonArrStream2 ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 2f63c38 . . 36d827d 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 350 , 8 + 350 , 8 @ @ public final class Realm extends BaseRealm { 
 for ( int i = 0 ; i < json . length ( ) ; i + + ) { 
 try { 
 configuration . getSchemaMediator ( ) . createOrUpdateUsingJsonObject ( clazz , this , json . getJSONObject ( i ) , false ) ; 
 - } catch ( Exception e ) { 
 - throw new RealmException ( " Could not map Json " , e ) ; 
 + } catch ( JSONException e ) { 
 + throw new RealmException ( " Could not map JSON " , e ) ; 
 } 
 } 
 } 
 @ @ - 378 , 8 + 378 , 8 @ @ public final class Realm extends BaseRealm { 
 for ( int i = 0 ; i < json . length ( ) ; i + + ) { 
 try { 
 configuration . getSchemaMediator ( ) . createOrUpdateUsingJsonObject ( clazz , this , json . getJSONObject ( i ) , true ) ; 
 - } catch ( Exception e ) { 
 - throw new RealmException ( " Could not map Json " , e ) ; 
 + } catch ( JSONException e ) { 
 + throw new RealmException ( " Could not map JSON " , e ) ; 
 } 
 } 
 } 
 @ @ - 402 , 7 + 402 , 7 @ @ public final class Realm extends BaseRealm { 
 JSONArray arr ; 
 try { 
 arr = new JSONArray ( json ) ; 
 - } catch ( Exception e ) { 
 + } catch ( JSONException e ) { 
 throw new RealmException ( " Could not create JSON array from string " , e ) ; 
 } 
 
 @ @ - 526 , 8 + 526 , 8 @ @ public final class Realm extends BaseRealm { 
 
 try { 
 return configuration . getSchemaMediator ( ) . createOrUpdateUsingJsonObject ( clazz , this , json , false ) ; 
 - } catch ( Exception e ) { 
 - throw new RealmException ( " Could not map Json " , e ) ; 
 + } catch ( JSONException e ) { 
 + throw new RealmException ( " Could not map JSON " , e ) ; 
 } 
 } 
 
 @ @ - 555 , 7 + 555 , 7 @ @ public final class Realm extends BaseRealm { 
 handlerController . addToRealmObjects ( realmObject ) ; 
 return realmObject ; 
 } catch ( JSONException e ) { 
 - throw new RealmException ( " Could not map Json " , e ) ; 
 + throw new RealmException ( " Could not map JSON " , e ) ; 
 } 
 } 
 
 @ @ - 578 , 7 + 578 , 7 @ @ public final class Realm extends BaseRealm { 
 JSONObject obj ; 
 try { 
 obj = new JSONObject ( json ) ; 
 - } catch ( Exception e ) { 
 + } catch ( JSONException e ) { 
 throw new RealmException ( " Could not create Json object from string " , e ) ; 
 } 
 
 @ @ - 609 , 7 + 609 , 7 @ @ public final class Realm extends BaseRealm { 
 JSONObject obj ; 
 try { 
 obj = new JSONObject ( json ) ; 
 - } catch ( Exception e ) { 
 + } catch ( JSONException e ) { 
 throw new RealmException ( " Could not create Json object from string " , e ) ; 
 } 
 
 @ @ - 1527 , 7 + 1527 , 7 @ @ public final class Realm extends BaseRealm { 
 try { 
 return realmFile . getCanonicalPath ( ) ; 
 } catch ( IOException e ) { 
 - throw new RealmException ( " Could not resolve the canonical path to the Realm file : " + realmFile . getAbsolutePath ( ) ) ; 
 + throw new RealmIOException ( " Could not resolve the canonical path to the Realm file : " + realmFile . getAbsolutePath ( ) ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 index 1079902 . . 106aa84 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 @ @ - 18 , 8 + 18 , 24 @ @ package io . realm ; 
 
 import android . test . AndroidTestCase ; 
 
 + import java . io . File ; 
 + import java . util . Random ; 
 + 
 + import io . realm . entities . AllTypesPrimaryKey ; 
 + import io . realm . entities . Dog ; 
 + import io . realm . entities . Owner ; 
 + import io . realm . exceptions . RealmMigrationNeededException ; 
 + 
 public class RealmConfigurationTest extends AndroidTestCase { 
 
 + RealmConfiguration defaultConfig ; 
 + @ Override 
 + protected void setUp ( ) throws Exception { 
 + super . setUp ( ) ; 
 + defaultConfig = new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ; 
 + Realm . deleteRealmFile ( defaultConfig ) ; 
 + } 
 + 
 public void testSetNullDefaultConfigurationThrows ( ) { 
 try { 
 Realm . setDefaultConfiguration ( null ) ; 
 @ @ - 28 , 4 + 44 , 198 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 } 
 fail ( ) ; 
 } 
 + 
 + public void testGetNullDefaultInstanceThrows ( ) { 
 + try { 
 + Realm . getDefaultInstance ( ) ; 
 + } catch ( NullPointerException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testGetNullInstance ( ) { 
 + try { 
 + Realm . getInstance ( ( RealmConfiguration ) null ) ; 
 + } catch ( NullPointerException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNullDirThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( ( File ) null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNullNameThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . name ( null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testEmptyNameThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . name ( " " ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNullKeyThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testWrongKeyLengthThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . encryptionKey ( new byte [ 63 ] ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testNegativeVersionThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . version ( - 1 ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testVersionLessThanDiscVersionThrows ( ) { 
 + Realm . deleteRealmFile ( new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ) ; 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 42 ) . create ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + try { 
 + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 1 ) . create ( ) ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testVersionEqualWhenSchemaChangesThrows ( ) { 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . deleteRealmBeforeOpening ( ) 
 + . version ( 42 ) 
 + . schema ( Dog . class ) 
 + . create ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + try { 
 + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . version ( 42 ) 
 + . schema ( AllTypesPrimaryKey . class ) 
 + . create ( ) ) ; 
 + } catch ( RealmMigrationNeededException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testCustomSchemaAlsoIncludeLinkedClasses ( ) { 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . deleteRealmBeforeOpening ( ) 
 + . schema ( Dog . class ) 
 + . create ( ) ) ; 
 + assertEquals ( 3 , realm . getTable ( Owner . class ) . getColumnCount ( ) ) ; 
 + assertEquals ( 7 , realm . getTable ( Dog . class ) . getColumnCount ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testNullMigrationThrows ( ) { 
 + try { 
 + new RealmConfiguration . Builder ( getContext ( ) ) . migration ( null ) . create ( ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + return ; 
 + } 
 + fail ( ) ; 
 + } 
 + 
 + public void testSetDefaultConfiguration ( ) { 
 + Realm . setDefaultConfiguration ( defaultConfig ) ; 
 + Realm realm = Realm . getDefaultInstance ( ) ; 
 + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testGetInstance ( ) { 
 + Realm realm = Realm . getInstance ( defaultConfig ) ; 
 + assertEquals ( realm . getPath ( ) , defaultConfig . getAbsolutePathToRealm ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testStandardSetup ( ) { 
 + byte [ ] key = new byte [ 64 ] ; 
 + new Random ( ) . nextBytes ( key ) ; 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . name ( " foo . realm " ) 
 + . encryptionKey ( key ) 
 + . version ( 42 ) 
 + . migration ( new RealmMigration ( ) { 
 + @ Override 
 + public long execute ( Realm realm , long version ) { 
 + return 0 ; / / no - op 
 + } 
 + } ) 
 + . deleteRealmBeforeOpening ( ) 
 + . deleteRealmIfMigrationNeeded ( ) 
 + . create ( ) ) ; 
 + assertTrue ( realm . getPath ( ) . endsWith ( " foo . realm " ) ) ; 
 + assertEquals ( 42 , realm . getVersion ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testDeleteRealmIfMigration ( ) { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) 
 + . deleteRealmBeforeOpening ( ) 
 + . schema ( Dog . class ) 
 + . version ( 0 ) 
 + . create ( ) ; 
 + Realm . deleteRealmFile ( config ) ; 
 + Realm realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . copyToRealm ( new Dog ( " Foo " ) ) ; 
 + realm . commitTransaction ( ) ; 
 + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 + . schema ( Owner . class , Dog . class ) 
 + . version ( 1 ) 
 + . deleteRealmIfMigrationNeeded ( ) 
 + . create ( ) ) ; 
 + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 + 
 + public void testDeleteRealmBeforeOpening ( ) { 
 + RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) . deleteRealmBeforeOpening ( ) . create ( ) ; 
 + Realm realm = Realm . getInstance ( config ) ; 
 + realm . beginTransaction ( ) ; 
 + realm . copyToRealm ( new Dog ( " Foo " ) ) ; 
 + realm . commitTransaction ( ) ; 
 + assertEquals ( 1 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + 
 + realm = Realm . getInstance ( config ) ; 
 + assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; 
 + realm . close ( ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 18376c2 . . 59a4ad3 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 232 , 7 + 232 , 9 @ @ public final class Realm implements Closeable { 
 sharedGroup . close ( ) ; 
 sharedGroup = null ; 
 AtomicInteger counter = openRealms . get ( id ) ; 
 - counter . decrementAndGet ( ) ; 
 + if ( counter . decrementAndGet ( ) = = 0 ) { 
 + openRealms . remove ( id ) ; 
 + } ; 
 } 
 
 int refCount = references - 1 ; 
 @ @ - 399 , 11 + 401 , 11 @ @ public final class Realm implements Closeable { 
 @ Deprecated 
 @ SuppressWarnings ( " UnusedDeclaration " ) 
 public static Realm getInstance ( Context context , String fileName , byte [ ] key ) { 
 - return create ( new RealmConfiguration . Builder ( context ) 
 - . name ( fileName ) 
 - . encryptionKey ( key ) 
 - . create ( ) 
 - ) ; 
 + RealmConfiguration . Builder builder = new RealmConfiguration . Builder ( context ) . name ( fileName ) ; 
 + if ( key ! = null ) { 
 + builder . encryptionKey ( key ) ; 
 + } 
 + return create ( builder . create ( ) ) ; 
 } 
 
 / * * 
 @ @ - 571 , 7 + 573 , 7 @ @ public final class Realm implements Closeable { 
 if ( references = = 0 ) { 
 AtomicInteger counter = openRealms . get ( id ) ; 
 if ( counter = = null ) { 
 - if ( config . isDeleteRealmBeforeOpening ( ) ) { 
 + if ( config . shouldDeleteRealmBeforeOpening ( ) ) { 
 deleteRealmFile ( config ) ; 
 } 
 openRealms . put ( id , new AtomicInteger ( 1 ) ) ; 
 @ @ - 598 , 6 + 600 , 18 @ @ public final class Realm implements Closeable { 
 realmsCache . set ( realms ) ; 
 localRefCount . put ( id , references + 1 ) ; 
 
 + / / Check versions of Realm 
 + long currentVersion = realm . getVersion ( ) ; 
 + long requiredVersion = config . getVersion ( ) ; 
 + if ( currentVersion ! = UNVERSIONED & & currentVersion < requiredVersion ) { 
 + realm . close ( ) ; 
 + throw new RealmMigrationNeededException ( String . format ( " Realm on disc need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; 
 + } 
 + if ( currentVersion ! = UNVERSIONED & & requiredVersion < currentVersion ) { 
 + realm . close ( ) ; 
 + throw new IllegalArgumentException ( String . format ( " Realm on disc is newer than the one specified : v % s vs . v % s " , currentVersion , requiredVersion ) ) ; 
 + } 
 + 
 if ( validateSchema ) { 
 try { 
 initializeRealm ( realm , config ) ; 
 @ @ - 647 , 14 + 661 , 15 @ @ public final class Realm implements Closeable { 
 try { 
 realm . beginTransaction ( ) ; 
 if ( version = = UNVERSIONED ) { 
 - realm . setVersion ( 0 ) ; 
 commitNeeded = true ; 
 + realm . setVersion ( config . getVersion ( ) ) ; 
 } 
 - 
 for ( String className : proxyClasses ) { 
 String [ ] splitted = className . split ( " \ \ . " ) ; 
 String modelClassName = splitted [ splitted . length - 1 ] ; 
 String generatedClassName = getProxyClassName ( modelClassName ) ; 
 + 
 + / / Verify that there is a proxy class for each supported model class 
 Class < ? > generatedClass ; 
 try { 
 generatedClass = Class . forName ( generatedClassName ) ; 
 @ @ - 727 , 7 + 742 , 6 @ @ public final class Realm implements Closeable { 
 } 
 } finally { 
 if ( commitNeeded ) { 
 - realm . setVersion ( config . getVersion ( ) ) ; 
 realm . commitTransaction ( ) ; 
 } else { 
 realm . cancelTransaction ( ) ; 
 @ @ - 1391 , 7 + 1405 , 7 @ @ public final class Realm implements Closeable { 
 public < E extends RealmObject > RealmResults < E > allObjectsSorted ( Class < E > clazz , String fieldName1 , 
 boolean sortAscending1 , String fieldName2 , 
 boolean sortAscending2 ) { 
 - return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , 
 + return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 , 
 sortAscending2 } ) ; 
 } 
 
 diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java 
 index 5c9d235 . . 1417c13 100644 
 - - - a / realm / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class RealmConfiguration { 
 return deleteRealmIfMigrationNeeded ; 
 } 
 
 - public boolean isDeleteRealmBeforeOpening ( ) { 
 + public boolean shouldDeleteRealmBeforeOpening ( ) { 
 return deleteRealmBeforeOpening ; 
 } 
 
 @ @ - 133 , 7 + 133 , 7 @ @ public class RealmConfiguration { 
 * / 
 public Builder ( Context context ) { 
 if ( context = = null ) { 
 - throw new NullPointerException ( " A non - null Context must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null Context must be provided " ) ; 
 } 
 this . folder = context . getFilesDir ( ) ; 
 } 
 @ @ - 155 , 7 + 155 , 7 @ @ public class RealmConfiguration { 
 * / 
 public Builder encryptionKey ( byte [ ] key ) { 
 if ( key = = null ) { 
 - throw new NullPointerException ( " A non - null key must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null key must be provided " ) ; 
 } 
 if ( key . length ! = 64 ) { 
 throw new IllegalArgumentException ( " The provided key must be 64 bytes . Yours was : " + key . length ) ; 
 @ @ - 177 , 7 + 177 , 7 @ @ public class RealmConfiguration { 
 * 
 * @ see # migration ( RealmMigration ) 
 * / 
 - public Builder setVersion ( int version ) { 
 + public Builder version ( int version ) { 
 if ( version < 0 ) { 
 throw new IllegalArgumentException ( " Realm version numbers must be 0 ( zero ) or higher . Yours was : " + version ) ; 
 } 
 @ @ - 192 , 7 + 192 , 7 @ @ public class RealmConfiguration { 
 * / 
 public Builder migration ( RealmMigration migration ) { 
 if ( migration = = null ) { 
 - throw new NullPointerException ( " A non - null migration must be provided " ) ; 
 + throw new IllegalArgumentException ( " A non - null migration must be provided " ) ; 
 } 
 this . migration = migration ; 
 return this ;
