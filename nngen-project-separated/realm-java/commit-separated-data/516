BLEU SCORE: 0.11598118436136108

TEST MSG: Remove useless code
GENERATED MSG: Change executing query timing .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index ea6ace2 . . 602c2c3 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1597 , 31 + 1597 , 13 @ @ public final class RealmQuery < E extends RealmModel > { <nl> * @ throws java . lang . IllegalArgumentException if one of the field names does not exist or it belongs to a child <nl> * { @ link RealmObject } or a child { @ link RealmList } . <nl> * / <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public RealmResults < E > findAllSorted ( String fieldNames [ ] , Sort sortOrders [ ] ) { <nl> - checkSortParameters ( fieldNames , sortOrders ) ; <nl> + checkQueryIsNotReused ( ) ; <nl> <nl> - if ( fieldNames . length = = 1 & & sortOrders . length = = 1 ) { <nl> - return findAllSorted ( fieldNames [ 0 ] , sortOrders [ 0 ] ) ; <nl> - } else { <nl> - TableView tableView = query . findAll ( ) ; <nl> - List < Long > columnIndices = new ArrayList < Long > ( ) ; <nl> - / / noinspection ForLoopReplaceableByForEach <nl> - for ( int i = 0 ; i < fieldNames . length ; i + + ) { <nl> - String fieldName = fieldNames [ i ] ; <nl> - long columnIndex = getColumnIndexForSort ( fieldName ) ; <nl> - columnIndices . add ( columnIndex ) ; <nl> - } <nl> - tableView . sort ( columnIndices , sortOrders ) ; <nl> + SortDescriptor sortDescriptor = SortDescriptor . getInstanceForSort ( query . getTable ( ) , fieldNames , sortOrders ) ; <nl> <nl> - RealmResults < E > realmResults ; <nl> - if ( isDynamicQuery ( ) ) { <nl> - realmResults = ( RealmResults < E > ) RealmResults . createFromDynamicTableOrView ( realm , tableView , className ) ; <nl> - } else { <nl> - realmResults = RealmResults . createFromTableOrView ( realm , tableView , clazz ) ; <nl> - } <nl> - return realmResults ; <nl> - } <nl> + Collection collection = new Collection ( realm . sharedRealm , query , sortDescriptor ) ; <nl> + return createRealmResults ( collection ) ; <nl> } <nl> <nl> private boolean isDynamicQuery ( ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index e0ae475 . . 2627d49 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 35 , 10 + 35 , 8 @ @ import io . realm . internal . InvalidRow ; <nl> import io . realm . internal . RealmObjectProxy ; <nl> import io . realm . internal . Row ; <nl> import io . realm . internal . SortDescriptor ; <nl> - import io . realm . internal . Table ; <nl> import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableQuery ; <nl> - import io . realm . internal . TableView ; <nl> import io . realm . internal . Collection ; <nl> import io . realm . internal . UncheckedRow ; <nl> import io . realm . internal . async . BadVersionException ; <nl> @ @ - 81 , 7 + 79 , 6 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> String className ; / / Class name used by DynamicRealmObjects <nl> private TableOrView table = null ; <nl> <nl> - private static final String TYPE _ MISMATCH = " Field ' % s ' : type mismatch - % s expected . " ; <nl> private static final long TABLE _ VIEW _ VERSION _ NONE = - 1 ; <nl> <nl> private long currentTableViewVersion = TABLE _ VIEW _ VERSION _ NONE ; <nl> @ @ - 94 , 26 + 91 , 6 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> / / clear it . <nl> private boolean viewUpdated = false ; <nl> <nl> - static < E extends RealmModel > RealmResults < E > createFromTableQuery ( BaseRealm realm , TableQuery query , Class < E > clazz ) { <nl> - return new RealmResults < E > ( realm , query , clazz ) ; <nl> - } <nl> - <nl> - static < E extends RealmModel > RealmResults < E > createFromTableOrView ( BaseRealm realm , TableOrView table , Class < E > clazz ) { <nl> - RealmResults < E > realmResults = new RealmResults < E > ( realm , table , clazz ) ; <nl> - realm . handlerController . addToRealmResults ( realmResults ) ; <nl> - return realmResults ; <nl> - } <nl> - <nl> - static RealmResults < DynamicRealmObject > createFromDynamicClass ( BaseRealm realm , TableQuery query , String className ) { <nl> - return new RealmResults < DynamicRealmObject > ( realm , query , className ) ; <nl> - } <nl> - <nl> - static RealmResults < DynamicRealmObject > createFromDynamicTableOrView ( BaseRealm realm , TableOrView table , String className ) { <nl> - RealmResults < DynamicRealmObject > realmResults = new RealmResults < DynamicRealmObject > ( realm , table , className ) ; <nl> - realm . handlerController . addToRealmResults ( realmResults ) ; <nl> - return realmResults ; <nl> - } <nl> - <nl> RealmResults ( BaseRealm realm , io . realm . internal . Collection collection , Class < E > clazz ) { <nl> this . realm = realm ; <nl> this . query = null ; <nl> @ @ - 128 , 31 + 105 , 6 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> this . collection = collection ; <nl> } <nl> <nl> - private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz ) { <nl> - this . realm = realm ; <nl> - this . classSpec = clazz ; <nl> - this . query = query ; <nl> - collection = null ; <nl> - } <nl> - <nl> - private RealmResults ( BaseRealm realm , TableQuery query , String className ) { <nl> - this . realm = realm ; <nl> - this . query = query ; <nl> - this . className = className ; <nl> - collection = null ; <nl> - } <nl> - <nl> - private RealmResults ( BaseRealm realm , TableOrView table , Class < E > classSpec ) { <nl> - this . realm = realm ; <nl> - this . classSpec = classSpec ; <nl> - this . table = table ; <nl> - <nl> - this . pendingQuery = null ; <nl> - this . query = null ; <nl> - this . currentTableViewVersion = table . syncIfNeeded ( ) ; <nl> - collection = null ; <nl> - } <nl> - <nl> private RealmResults ( BaseRealm realm , String className ) { <nl> this . realm = realm ; <nl> this . className = className ; <nl> @ @ - 162 , 12 + 114 , 6 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> collection = null ; <nl> } <nl> <nl> - private RealmResults ( BaseRealm realm , TableOrView table , String className ) { <nl> - this ( realm , className ) ; <nl> - this . table = table ; <nl> - this . currentTableViewVersion = table . syncIfNeeded ( ) ; <nl> - } <nl> - <nl> TableOrView getTableOrView ( ) { <nl> if ( table = = null ) { <nl> return realm . schema . getTable ( classSpec ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> index 9063d2d . . fdcd307 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ import java . util . List ; <nl> <nl> import io . realm . exceptions . RealmException ; <nl> import io . realm . internal . LinkView ; <nl> - import io . realm . internal . TableOrView ; <nl> <nl> / * * <nl> * RealmList is used to model one - to - many relationships in a { @ link io . realm . RealmObject } . <nl> @ @ - 236 , 8 + 235 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> * / <nl> public RealmQuery < E > where ( ) { <nl> if ( managedMode ) { <nl> - TableOrView table = this . view . where ( ) . findAll ( ) ; <nl> - return new RealmQuery < E > ( this . realm , table , clazz ) ; <nl> + return new RealmQuery < E > ( this . realm , view , clazz ) ; <nl> } else { <nl> throw new RealmException ( ONLY _ IN _ MANAGED _ MODE _ MESSAGE ) ; <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index 16152e6 . . 2bec62c 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 24 , 7 + 24 , 8 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import io . realm . internal . ColumnType ; <nl> - import io . realm . internal . TableOrView ; <nl> + import io . realm . internal . LinkView ; <nl> + import io . realm . internal . Table ; <nl> import io . realm . internal . TableQuery ; <nl> import io . realm . internal . TableView ; <nl> <nl> @ @ - 50 , 7 + 51 , 8 @ @ import io . realm . internal . TableView ; <nl> public class RealmQuery < E extends RealmObject > { <nl> <nl> private Realm realm ; <nl> - private TableOrView table ; <nl> + private Table table ; <nl> + private LinkView view ; <nl> private TableQuery query ; <nl> private Map < String , Long > columns = new HashMap < String , Long > ( ) ; <nl> private Class < E > clazz ; <nl> @ @ - 90 , 18 + 92 , 11 @ @ public class RealmQuery < E extends RealmObject > { <nl> this . columns = Realm . columnIndices . get ( clazz . getSimpleName ( ) ) ; <nl> } <nl> <nl> - public RealmQuery ( Realm realm , TableOrView table , Class < E > clazz ) { <nl> + RealmQuery ( Realm realm , LinkView view , Class < E > clazz ) { <nl> this . realm = realm ; <nl> this . clazz = clazz ; <nl> - this . table = table ; <nl> - this . query = table . where ( ) ; <nl> - this . columns = Realm . columnIndices . get ( clazz . getSimpleName ( ) ) ; <nl> - } <nl> - <nl> - RealmQuery ( Realm realm , TableQuery query , Class < E > clazz ) { <nl> - this . realm = realm ; <nl> - this . clazz = clazz ; <nl> - this . query = query ; <nl> + this . query = view . where ( ) ; <nl> + this . view = view ; <nl> this . table = realm . getTable ( clazz ) ; <nl> this . columns = Realm . columnIndices . get ( clazz . getSimpleName ( ) ) ; <nl> } <nl> @ @ - 137 , 7 + 132 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> <nl> / / TODO : consider another caching strategy so linked classes are included in the cache . <nl> private long [ ] getColumnIndices ( String fieldName , ColumnType fieldType ) { <nl> - TableOrView table = this . table ; <nl> + Table table = this . table ; <nl> if ( containsDot ( fieldName ) ) { <nl> String [ ] names = splitString ( fieldName ) ; / / fieldName . split ( " \ \ . " ) ; <nl> long [ ] columnIndices = new long [ names . length ] ; <nl> @ @ - 148 , 7 + 143 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> } <nl> ColumnType type = table . getColumnType ( index ) ; <nl> if ( type = = ColumnType . LINK | | type = = ColumnType . LINK _ LIST ) { <nl> - table = table . getTable ( ) . getLinkTarget ( index ) ; <nl> + table = table . getLinkTarget ( index ) ; <nl> columnIndices [ i ] = index ; <nl> } else { <nl> throw new IllegalArgumentException ( " Invalid query : " + names [ i ] + " does not refer to a class . " ) ; <nl> @ @ - 1256 , 11 + 1251 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> public E findFirst ( ) { <nl> long rowIndex = this . query . find ( ) ; <nl> if ( rowIndex > = 0 ) { <nl> - if ( table instanceof TableView ) { <nl> - return realm . get ( clazz , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; <nl> - } else { <nl> - return realm . get ( clazz , rowIndex ) ; <nl> - } <nl> + return realm . get ( clazz , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; <nl> } else { <nl> return null ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index ea6ace2 . . 602c2c3 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1597 , 31 + 1597 , 13 @ @ public final class RealmQuery < E extends RealmModel > { 
 * @ throws java . lang . IllegalArgumentException if one of the field names does not exist or it belongs to a child 
 * { @ link RealmObject } or a child { @ link RealmList } . 
 * / 
 - @ SuppressWarnings ( " unchecked " ) 
 public RealmResults < E > findAllSorted ( String fieldNames [ ] , Sort sortOrders [ ] ) { 
 - checkSortParameters ( fieldNames , sortOrders ) ; 
 + checkQueryIsNotReused ( ) ; 
 
 - if ( fieldNames . length = = 1 & & sortOrders . length = = 1 ) { 
 - return findAllSorted ( fieldNames [ 0 ] , sortOrders [ 0 ] ) ; 
 - } else { 
 - TableView tableView = query . findAll ( ) ; 
 - List < Long > columnIndices = new ArrayList < Long > ( ) ; 
 - / / noinspection ForLoopReplaceableByForEach 
 - for ( int i = 0 ; i < fieldNames . length ; i + + ) { 
 - String fieldName = fieldNames [ i ] ; 
 - long columnIndex = getColumnIndexForSort ( fieldName ) ; 
 - columnIndices . add ( columnIndex ) ; 
 - } 
 - tableView . sort ( columnIndices , sortOrders ) ; 
 + SortDescriptor sortDescriptor = SortDescriptor . getInstanceForSort ( query . getTable ( ) , fieldNames , sortOrders ) ; 
 
 - RealmResults < E > realmResults ; 
 - if ( isDynamicQuery ( ) ) { 
 - realmResults = ( RealmResults < E > ) RealmResults . createFromDynamicTableOrView ( realm , tableView , className ) ; 
 - } else { 
 - realmResults = RealmResults . createFromTableOrView ( realm , tableView , clazz ) ; 
 - } 
 - return realmResults ; 
 - } 
 + Collection collection = new Collection ( realm . sharedRealm , query , sortDescriptor ) ; 
 + return createRealmResults ( collection ) ; 
 } 
 
 private boolean isDynamicQuery ( ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index e0ae475 . . 2627d49 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 35 , 10 + 35 , 8 @ @ import io . realm . internal . InvalidRow ; 
 import io . realm . internal . RealmObjectProxy ; 
 import io . realm . internal . Row ; 
 import io . realm . internal . SortDescriptor ; 
 - import io . realm . internal . Table ; 
 import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableQuery ; 
 - import io . realm . internal . TableView ; 
 import io . realm . internal . Collection ; 
 import io . realm . internal . UncheckedRow ; 
 import io . realm . internal . async . BadVersionException ; 
 @ @ - 81 , 7 + 79 , 6 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 String className ; / / Class name used by DynamicRealmObjects 
 private TableOrView table = null ; 
 
 - private static final String TYPE _ MISMATCH = " Field ' % s ' : type mismatch - % s expected . " ; 
 private static final long TABLE _ VIEW _ VERSION _ NONE = - 1 ; 
 
 private long currentTableViewVersion = TABLE _ VIEW _ VERSION _ NONE ; 
 @ @ - 94 , 26 + 91 , 6 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 / / clear it . 
 private boolean viewUpdated = false ; 
 
 - static < E extends RealmModel > RealmResults < E > createFromTableQuery ( BaseRealm realm , TableQuery query , Class < E > clazz ) { 
 - return new RealmResults < E > ( realm , query , clazz ) ; 
 - } 
 - 
 - static < E extends RealmModel > RealmResults < E > createFromTableOrView ( BaseRealm realm , TableOrView table , Class < E > clazz ) { 
 - RealmResults < E > realmResults = new RealmResults < E > ( realm , table , clazz ) ; 
 - realm . handlerController . addToRealmResults ( realmResults ) ; 
 - return realmResults ; 
 - } 
 - 
 - static RealmResults < DynamicRealmObject > createFromDynamicClass ( BaseRealm realm , TableQuery query , String className ) { 
 - return new RealmResults < DynamicRealmObject > ( realm , query , className ) ; 
 - } 
 - 
 - static RealmResults < DynamicRealmObject > createFromDynamicTableOrView ( BaseRealm realm , TableOrView table , String className ) { 
 - RealmResults < DynamicRealmObject > realmResults = new RealmResults < DynamicRealmObject > ( realm , table , className ) ; 
 - realm . handlerController . addToRealmResults ( realmResults ) ; 
 - return realmResults ; 
 - } 
 - 
 RealmResults ( BaseRealm realm , io . realm . internal . Collection collection , Class < E > clazz ) { 
 this . realm = realm ; 
 this . query = null ; 
 @ @ - 128 , 31 + 105 , 6 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 this . collection = collection ; 
 } 
 
 - private RealmResults ( BaseRealm realm , TableQuery query , Class < E > clazz ) { 
 - this . realm = realm ; 
 - this . classSpec = clazz ; 
 - this . query = query ; 
 - collection = null ; 
 - } 
 - 
 - private RealmResults ( BaseRealm realm , TableQuery query , String className ) { 
 - this . realm = realm ; 
 - this . query = query ; 
 - this . className = className ; 
 - collection = null ; 
 - } 
 - 
 - private RealmResults ( BaseRealm realm , TableOrView table , Class < E > classSpec ) { 
 - this . realm = realm ; 
 - this . classSpec = classSpec ; 
 - this . table = table ; 
 - 
 - this . pendingQuery = null ; 
 - this . query = null ; 
 - this . currentTableViewVersion = table . syncIfNeeded ( ) ; 
 - collection = null ; 
 - } 
 - 
 private RealmResults ( BaseRealm realm , String className ) { 
 this . realm = realm ; 
 this . className = className ; 
 @ @ - 162 , 12 + 114 , 6 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 collection = null ; 
 } 
 
 - private RealmResults ( BaseRealm realm , TableOrView table , String className ) { 
 - this ( realm , className ) ; 
 - this . table = table ; 
 - this . currentTableViewVersion = table . syncIfNeeded ( ) ; 
 - } 
 - 
 TableOrView getTableOrView ( ) { 
 if ( table = = null ) { 
 return realm . schema . getTable ( classSpec ) ;

NEAREST DIFF:
diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 index 9063d2d . . fdcd307 100644 
 - - - a / realm / src / main / java / io / realm / RealmList . java 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 22 , 7 + 22 , 6 @ @ import java . util . List ; 
 
 import io . realm . exceptions . RealmException ; 
 import io . realm . internal . LinkView ; 
 - import io . realm . internal . TableOrView ; 
 
 / * * 
 * RealmList is used to model one - to - many relationships in a { @ link io . realm . RealmObject } . 
 @ @ - 236 , 8 + 235 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 * / 
 public RealmQuery < E > where ( ) { 
 if ( managedMode ) { 
 - TableOrView table = this . view . where ( ) . findAll ( ) ; 
 - return new RealmQuery < E > ( this . realm , table , clazz ) ; 
 + return new RealmQuery < E > ( this . realm , view , clazz ) ; 
 } else { 
 throw new RealmException ( ONLY _ IN _ MANAGED _ MODE _ MESSAGE ) ; 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index 16152e6 . . 2bec62c 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 24 , 7 + 24 , 8 @ @ import java . util . List ; 
 import java . util . Map ; 
 
 import io . realm . internal . ColumnType ; 
 - import io . realm . internal . TableOrView ; 
 + import io . realm . internal . LinkView ; 
 + import io . realm . internal . Table ; 
 import io . realm . internal . TableQuery ; 
 import io . realm . internal . TableView ; 
 
 @ @ - 50 , 7 + 51 , 8 @ @ import io . realm . internal . TableView ; 
 public class RealmQuery < E extends RealmObject > { 
 
 private Realm realm ; 
 - private TableOrView table ; 
 + private Table table ; 
 + private LinkView view ; 
 private TableQuery query ; 
 private Map < String , Long > columns = new HashMap < String , Long > ( ) ; 
 private Class < E > clazz ; 
 @ @ - 90 , 18 + 92 , 11 @ @ public class RealmQuery < E extends RealmObject > { 
 this . columns = Realm . columnIndices . get ( clazz . getSimpleName ( ) ) ; 
 } 
 
 - public RealmQuery ( Realm realm , TableOrView table , Class < E > clazz ) { 
 + RealmQuery ( Realm realm , LinkView view , Class < E > clazz ) { 
 this . realm = realm ; 
 this . clazz = clazz ; 
 - this . table = table ; 
 - this . query = table . where ( ) ; 
 - this . columns = Realm . columnIndices . get ( clazz . getSimpleName ( ) ) ; 
 - } 
 - 
 - RealmQuery ( Realm realm , TableQuery query , Class < E > clazz ) { 
 - this . realm = realm ; 
 - this . clazz = clazz ; 
 - this . query = query ; 
 + this . query = view . where ( ) ; 
 + this . view = view ; 
 this . table = realm . getTable ( clazz ) ; 
 this . columns = Realm . columnIndices . get ( clazz . getSimpleName ( ) ) ; 
 } 
 @ @ - 137 , 7 + 132 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 
 / / TODO : consider another caching strategy so linked classes are included in the cache . 
 private long [ ] getColumnIndices ( String fieldName , ColumnType fieldType ) { 
 - TableOrView table = this . table ; 
 + Table table = this . table ; 
 if ( containsDot ( fieldName ) ) { 
 String [ ] names = splitString ( fieldName ) ; / / fieldName . split ( " \ \ . " ) ; 
 long [ ] columnIndices = new long [ names . length ] ; 
 @ @ - 148 , 7 + 143 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 } 
 ColumnType type = table . getColumnType ( index ) ; 
 if ( type = = ColumnType . LINK | | type = = ColumnType . LINK _ LIST ) { 
 - table = table . getTable ( ) . getLinkTarget ( index ) ; 
 + table = table . getLinkTarget ( index ) ; 
 columnIndices [ i ] = index ; 
 } else { 
 throw new IllegalArgumentException ( " Invalid query : " + names [ i ] + " does not refer to a class . " ) ; 
 @ @ - 1256 , 11 + 1251 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 public E findFirst ( ) { 
 long rowIndex = this . query . find ( ) ; 
 if ( rowIndex > = 0 ) { 
 - if ( table instanceof TableView ) { 
 - return realm . get ( clazz , ( ( TableView ) table ) . getSourceRowIndex ( rowIndex ) ) ; 
 - } else { 
 - return realm . get ( clazz , rowIndex ) ; 
 - } 
 + return realm . get ( clazz , ( view ! = null ) ? view . getTargetRowIndex ( rowIndex ) : rowIndex ) ; 
 } else { 
 return null ; 
 }
