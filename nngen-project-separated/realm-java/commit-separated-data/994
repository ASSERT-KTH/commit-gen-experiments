BLEU SCORE: 0.12872632311973017

TEST MSG: Added RealmQuery . isEmpty ( )
GENERATED MSG: Fix RealmTest for Realm . close ( )

TEST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index 679ab19 . . 03d1f95 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 0 . 84 . 0 <nl> + * Added RealmQuery . isEmpty ( ) . <nl> * Fixed a bug where closed Realms were trying to refresh themselves resulting in a NullPointerException . <nl> * Added Realm . isClosed ( ) method . <nl> * Added Realm . distinct ( ) method . <nl> diff - - git a / realm - jni / src / io _ realm _ internal _ TableQuery . cpp b / realm - jni / src / io _ realm _ internal _ TableQuery . cpp <nl> index e583492 . . 3004e6d 100644 <nl> - - - a / realm - jni / src / io _ realm _ internal _ TableQuery . cpp <nl> + + + b / realm - jni / src / io _ realm _ internal _ TableQuery . cpp <nl> @ @ - 70 , 7 + 70 , 7 @ @ JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeValidateQuery <nl> / / Return TableRef used for build link queries <nl> TableRef getTableForLinkQuery ( jlong nativeQueryPtr , jlong * arr , jsize arr _ len ) { <nl> TableRef table _ ref = Q ( nativeQueryPtr ) - > get _ table ( ) ; <nl> - for ( int i = 0 ; i < arr _ len - 1 ; i + + ) { <nl> + for ( int i = 0 ; i < arr _ len - 1 ; i + + ) { <nl> table _ ref - > link ( size _ t ( arr [ i ] ) ) ; <nl> } <nl> return table _ ref ; <nl> @ @ - 79 , 7 + 79 , 7 @ @ TableRef getTableForLinkQuery ( jlong nativeQueryPtr , jlong * arr , jsize arr _ len ) { <nl> / / Return TableRef point to original table or the link table <nl> TableRef getTableByArray ( jlong nativeQueryPtr , jlong * arr , jsize arr _ len ) { <nl> TableRef table _ ref = Q ( nativeQueryPtr ) - > get _ table ( ) ; <nl> - for ( int i = 0 ; i < arr _ len - 1 ; i + + ) { <nl> + for ( int i = 0 ; i < arr _ len - 1 ; i + + ) { <nl> table _ ref = table _ ref - > get _ link _ target ( size _ t ( arr [ i ] ) ) ; <nl> } <nl> return table _ ref ; <nl> @ @ - 1347 , 3 + 1347 , 65 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeIsNotNull <nl> RELEASE _ ARRAY ( ) <nl> } <nl> <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeIsEmpty <nl> + ( JNIEnv * env , jobject , jlong nativeQueryPtr , jlongArray columnIndexes ) { <nl> + <nl> + GET _ ARRAY ( ) <nl> + Query * pQuery = Q ( nativeQueryPtr ) ; <nl> + try { <nl> + TableRef src _ table _ ref = getTableForLinkQuery ( nativeQueryPtr , arr , arr _ len ) ; <nl> + jlong column _ idx = arr [ arr _ len - 1 ] ; <nl> + TableRef table _ ref = getTableByArray ( nativeQueryPtr , arr , arr _ len ) ; <nl> + <nl> + int col _ type = table _ ref - > get _ column _ type ( S ( column _ idx ) ) ; <nl> + if ( arr _ len = = 1 ) { <nl> + / / Field queries <nl> + switch ( col _ type ) { <nl> + case type _ Binary : <nl> + pQuery - > equal ( S ( column _ idx ) , BinaryData ( " " , 0 ) ) ; <nl> + break ; <nl> + case type _ LinkList : <nl> + pQuery - > and _ query ( table _ ref - > column < LinkList > ( S ( column _ idx ) ) . count ( ) = = 0 ) ; <nl> + break ; <nl> + case type _ String : <nl> + pQuery - > equal ( S ( column _ idx ) , " " ) ; <nl> + break ; <nl> + case type _ Link : <nl> + case type _ Bool : <nl> + case type _ Int : <nl> + case type _ Float : <nl> + case type _ Double : <nl> + case type _ DateTime : <nl> + default : <nl> + ThrowException ( env , IllegalArgument , " isEmpty ( ) only works on String , byte [ ] and RealmList . " ) ; <nl> + } <nl> + } <nl> + else { <nl> + / / Linked queries <nl> + switch ( col _ type ) { <nl> + case type _ Binary : <nl> + pQuery - > and _ query ( src _ table _ ref - > column < Binary > ( S ( column _ idx ) ) = = BinaryData ( " " , 0 ) ) ; <nl> + break ; <nl> + case type _ LinkList : <nl> + pQuery - > and _ query ( src _ table _ ref - > column < LinkList > ( S ( column _ idx ) ) . count ( ) = = 0 ) ; <nl> + break ; <nl> + case type _ String : <nl> + pQuery - > and _ query ( src _ table _ ref - > column < String > ( S ( column _ idx ) ) = = " " ) ; <nl> + break ; <nl> + case type _ Link : <nl> + case type _ Bool : <nl> + case type _ Int : <nl> + case type _ Float : <nl> + case type _ Double : <nl> + case type _ DateTime : <nl> + default : <nl> + ThrowException ( env , IllegalArgument , " isEmpty ( ) only works on String , byte [ ] and RealmList across links . " ) ; <nl> + } <nl> + } <nl> + } CATCH _ STD ( ) <nl> + RELEASE _ ARRAY ( ) <nl> + } <nl> + <nl> + <nl> + <nl> + <nl> diff - - git a / realm - jni / src / io _ realm _ internal _ TableQuery . h b / realm - jni / src / io _ realm _ internal _ TableQuery . h <nl> index 21b5084 . . 7ec178e 100644 <nl> - - - a / realm - jni / src / io _ realm _ internal _ TableQuery . h <nl> + + + b / realm - jni / src / io _ realm _ internal _ TableQuery . h <nl> @ @ - 489 , 6 + 489 , 14 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeIsNull <nl> <nl> / * <nl> * Class : io _ realm _ internal _ TableQuery <nl> + * Method : nativeIsEmpty <nl> + * Signature : ( J [ J ) V <nl> + * / <nl> + JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeIsEmpty <nl> + ( JNIEnv * , jobject , jlong , jlongArray ) ; <nl> + <nl> + / * <nl> + * Class : io _ realm _ internal _ TableQuery <nl> * Method : nativeIsNotNull <nl> * Signature : ( J [ J ) V <nl> * / <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmQueryTest . java b / realm / src / androidTest / java / io / realm / RealmQueryTest . java <nl> index 70b2227 . . 1572bf4 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmQueryTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmQueryTest . java <nl> @ @ - 18 , 10 + 18 , 14 @ @ package io . realm ; <nl> <nl> import android . test . AndroidTestCase ; <nl> <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . Date ; <nl> + import java . util . List ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import io . realm . entities . AllJavaTypes ; <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . Cat ; <nl> import io . realm . entities . CatOwner ; <nl> @ @ - 31 , 8 + 35 , 9 @ @ import io . realm . entities . NullTypes ; <nl> import io . realm . entities . Owner ; <nl> import io . realm . entities . StringOnly ; <nl> import io . realm . exceptions . RealmError ; <nl> + import io . realm . internal . ColumnType ; <nl> <nl> - public class RealmQueryTest extends AndroidTestCase { <nl> + public class RealmQueryTest extends AndroidTestCase { <nl> <nl> protected final static int TEST _ DATA _ SIZE = 10 ; <nl> <nl> @ @ - 219 , 8 + 224 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> . equalTo ( FIELD _ LONG , 5 ) <nl> . or ( ) <nl> . not ( ) . beginGroup ( ) <nl> - . greaterThan ( FIELD _ LONG , 2 ) <nl> - . endGroup ( ) <nl> + . greaterThan ( FIELD _ LONG , 2 ) <nl> + . endGroup ( ) <nl> . findAll ( ) ; <nl> assertEquals ( 4 , list4 . size ( ) ) ; <nl> for ( int i = 0 ; i < list4 . size ( ) ; i + + ) { <nl> @ @ - 488 , 7 + 493 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> RealmResults < AllTypes > results = testRealm . where ( AllTypes . class ) <nl> . findAllSorted ( new String [ ] { } , new boolean [ ] { } ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalArgumentException ignored ) { } <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> <nl> / / number of fields and sorting orders don ' t match <nl> try { <nl> @ @ - 496 , 18 + 502 , 21 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> . findAllSorted ( new String [ ] { FIELD _ STRING } , <nl> new boolean [ ] { RealmResults . SORT _ ORDER _ ASCENDING , RealmResults . SORT _ ORDER _ ASCENDING } ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalArgumentException ignored ) { } <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> <nl> / / null is not allowed <nl> try { <nl> RealmResults < AllTypes > results = testRealm . where ( AllTypes . class ) . findAllSorted ( null , null ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalArgumentException ignored ) { } <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> try { <nl> RealmResults < AllTypes > results = testRealm . where ( AllTypes . class ) . findAllSorted ( new String [ ] { FIELD _ STRING } , <nl> null ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalArgumentException ignored ) { } <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> <nl> / / non - existing field name <nl> try { <nl> @ @ - 515 , 7 + 524 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> . findAllSorted ( new String [ ] { FIELD _ STRING , " dont - exist " } , <nl> new boolean [ ] { RealmResults . SORT _ ORDER _ ASCENDING , RealmResults . SORT _ ORDER _ ASCENDING } ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalArgumentException ignored ) { } <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> } <nl> <nl> public void testSortSingleField ( ) { <nl> @ @ - 662 , 71 + 672 , 61 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> try { <nl> testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ STRING _ NOT _ NULL ) . findAll ( ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> / / 2 Bytes <nl> try { <nl> testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ BYTES _ NOT _ NULL ) . findAll ( ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> / / 3 Boolean <nl> try { <nl> testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ BOOLEAN _ NOT _ NULL ) . findAll ( ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> / / 4 Byte <nl> try { <nl> testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ BYTE _ NOT _ NULL ) . findAll ( ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> / / 5 Short <nl> try { <nl> testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ SHORT _ NOT _ NULL ) . findAll ( ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> / / 6 Integer <nl> try { <nl> testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ INTEGER _ NOT _ NULL ) . findAll ( ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> / / 7 Long <nl> try { <nl> testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ LONG _ NOT _ NULL ) . findAll ( ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> / / 8 Float <nl> try { <nl> testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ FLOAT _ NOT _ NULL ) . findAll ( ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> / / 9 Double <nl> try { <nl> testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ DOUBLE _ NOT _ NULL ) . findAll ( ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> / / 10 Date <nl> try { <nl> testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ DATE _ NOT _ NULL ) . findAll ( ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> <nl> @ @ - 736 , 19 + 736 , 19 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> <nl> / / 1 String <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ STRING _ NULL , " Horse " ) . findAll ( ) . size ( ) ) ; <nl> - assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ STRING _ NULL , ( String ) null ) . findAll ( ) . size ( ) ) ; <nl> + assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ STRING _ NULL , ( String ) null ) . findAll ( ) . size ( ) ) ; <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ STRING _ NULL , " Fish " ) . findAll ( ) . size ( ) ) ; <nl> assertEquals ( 0 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ STRING _ NULL , " Goat " ) . findAll ( ) . size ( ) ) ; <nl> / / 2 Bytes skipped , doesn ' t support equalTo query <nl> / / 3 Boolean <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BOOLEAN _ NULL , true ) . findAll ( ) . size ( ) ) ; <nl> - assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BOOLEAN _ NULL , ( Boolean ) null ) . findAll ( ) . size ( ) ) ; <nl> + assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BOOLEAN _ NULL , ( Boolean ) null ) . findAll ( ) . size ( ) ) ; <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BOOLEAN _ NULL , false ) . findAll ( ) . size ( ) ) ; <nl> / / 4 Byte <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , 1 ) . findAll ( ) . size ( ) ) ; <nl> - assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , ( byte ) 1 ) . findAll ( ) . size ( ) ) ; <nl> + assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , ( byte ) 1 ) . findAll ( ) . size ( ) ) ; <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , ( Byte ) null ) . findAll ( ) . size ( ) ) ; <nl> - assertEquals ( 0 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , ( byte ) 42 ) . findAll ( ) . size ( ) ) ; <nl> + assertEquals ( 0 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , ( byte ) 42 ) . findAll ( ) . size ( ) ) ; <nl> / / 5 Short for other long based columns , only test null <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ SHORT _ NULL , 1 ) . findAll ( ) . size ( ) ) ; <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ SHORT _ NULL , ( short ) 1 ) . findAll ( ) . size ( ) ) ; <nl> @ @ - 930 , 7 + 930 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> / / 6 Integer <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . greaterThanOrEqualTo ( NullTypes . FIELD _ INTEGER _ NULL , 3 ) . count ( ) ) ; <nl> / / 7 Long <nl> - assertEquals ( 1 , testRealm . where ( NullTypes . class ) . greaterThanOrEqualTo ( NullTypes . FIELD _ LONG _ NULL , 3L ) . count ( ) ) ; <nl> + assertEquals ( 1 , testRealm . where ( NullTypes . class ) . greaterThanOrEqualTo ( NullTypes . FIELD _ LONG _ NULL , 3L ) . count ( ) ) ; <nl> / / 8 Float <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . greaterThanOrEqualTo ( NullTypes . FIELD _ FLOAT _ NULL , 3F ) . count ( ) ) ; <nl> / / 9 Double <nl> @ @ - 983 , 7 + 983 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> final int count = 30 ; <nl> RealmResults < CatOwner > results = testRealm . where ( CatOwner . class ) . findAll ( ) ; <nl> <nl> - for ( int i = 1 ; i < = count ; i + + ) { <nl> + for ( int i = 1 ; i < = count ; i + + ) { <nl> @ SuppressWarnings ( { " unused " } ) <nl> byte garbage [ ] = TestHelper . allocGarbage ( 0 ) ; <nl> results = results . where ( ) . findAll ( ) ; <nl> @ @ - 1110 , 8 + 1110 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> testRealm . where ( NullTypes . class ) . isNull ( <nl> NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ OBJECT _ NULL ) . count ( ) ; <nl> fail ( ) ; <nl> + } catch ( RealmError ignored ) { <nl> } <nl> - catch ( RealmError ignored ) { } <nl> } <nl> <nl> / / Test isNull on link ' s not - nullable field . should throw <nl> @ @ - 1200 , 7 + 1200 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ STRING _ NULL ) . count ( ) ) ; <nl> / / 2 Bytes <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . isNotNull ( <nl> - NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ BYTES _ NULL ) . count ( ) ) ; <nl> + NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ BYTES _ NULL ) . count ( ) ) ; <nl> / / 3 Boolean <nl> assertEquals ( 1 , testRealm . where ( NullTypes . class ) . isNotNull ( <nl> NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ BOOLEAN _ NULL ) . count ( ) ) ; <nl> @ @ - 1233 , 8 + 1233 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> testRealm . where ( NullTypes . class ) . isNotNull ( <nl> NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ OBJECT _ NULL ) . count ( ) ; <nl> fail ( ) ; <nl> + } catch ( RealmError ignored ) { <nl> } <nl> - catch ( RealmError ignored ) { } <nl> } <nl> <nl> / / Test isNotNull on link ' s not - nullable field . should throw <nl> @ @ - 1379 , 7 + 1379 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> latch . countDown ( ) ; <nl> } <nl> } <nl> - ) ; <nl> + ) ; <nl> thread . start ( ) ; <nl> } <nl> <nl> @ @ - 1446 , 4 + 1446 , 122 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> / / invalid if parent has been removed <nl> assertFalse ( query . isValid ( ) ) ; <nl> } <nl> + <nl> + <nl> + private static final List < ColumnType > SUPPORTED _ IS _ EMPTY _ TYPES = Arrays . asList ( <nl> + ColumnType . STRING , <nl> + ColumnType . BINARY , <nl> + ColumnType . LINK _ LIST ) ; <nl> + <nl> + private static final List < ColumnType > NOT _ SUPPORTED _ IS _ EMPTY _ TYPES ; <nl> + static { <nl> + final ArrayList < ColumnType > list = new ArrayList < ColumnType > ( Arrays . asList ( ColumnType . values ( ) ) ) ; <nl> + list . removeAll ( SUPPORTED _ IS _ EMPTY _ TYPES ) ; <nl> + list . remove ( ColumnType . MIXED ) ; <nl> + list . remove ( ColumnType . TABLE ) ; <nl> + NOT _ SUPPORTED _ IS _ EMPTY _ TYPES = list ; <nl> + } <nl> + <nl> + private void createIsEmptyDataSet ( Realm realm ) { <nl> + realm . beginTransaction ( ) ; <nl> + <nl> + AllJavaTypes emptyValues = new AllJavaTypes ( ) ; <nl> + emptyValues . setFieldLong ( 1 ) ; <nl> + emptyValues . setFieldString ( " " ) ; <nl> + emptyValues . setFieldBinary ( new byte [ 0 ] ) ; <nl> + emptyValues . setFieldObject ( emptyValues ) ; <nl> + emptyValues . setFieldList ( new RealmList < AllJavaTypes > ( ) ) ; <nl> + realm . copyToRealm ( emptyValues ) ; <nl> + <nl> + AllJavaTypes nonEmpty = new AllJavaTypes ( ) ; <nl> + nonEmpty . setFieldLong ( 2 ) ; <nl> + nonEmpty . setFieldString ( " Foo " ) ; <nl> + nonEmpty . setFieldBinary ( new byte [ ] { 1 , 2 , 3 } ) ; <nl> + nonEmpty . setFieldObject ( nonEmpty ) ; <nl> + nonEmpty . setFieldList ( new RealmList < AllJavaTypes > ( emptyValues ) ) ; <nl> + realm . copyToRealmOrUpdate ( nonEmpty ) ; <nl> + <nl> + realm . commitTransaction ( ) ; <nl> + } <nl> + <nl> + public void testIsEmpty ( ) { <nl> + createIsEmptyDataSet ( testRealm ) ; <nl> + for ( ColumnType type : SUPPORTED _ IS _ EMPTY _ TYPES ) { <nl> + switch ( type ) { <nl> + case STRING : <nl> + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ STRING ) . count ( ) ) ; <nl> + break ; <nl> + case BINARY : <nl> + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ BINARY ) . count ( ) ) ; <nl> + break ; <nl> + case LINK _ LIST : <nl> + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ LIST ) . count ( ) ) ; <nl> + break ; <nl> + default : <nl> + fail ( " Unknown type : " + type ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public void testIsEmptyAcrossLink ( ) { <nl> + createIsEmptyDataSet ( testRealm ) ; <nl> + for ( ColumnType type : SUPPORTED _ IS _ EMPTY _ TYPES ) { <nl> + switch ( type ) { <nl> + case STRING : <nl> + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ STRING ) . count ( ) ) ; <nl> + break ; <nl> + case BINARY : <nl> + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ BINARY ) . count ( ) ) ; <nl> + break ; <nl> + case LINK _ LIST : <nl> + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ LIST ) . count ( ) ) ; <nl> + break ; <nl> + default : <nl> + fail ( " Unknown type : " + type ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public void testIsEmptyIllegalFieldTypeThrows ( ) { <nl> + for ( ColumnType type : NOT _ SUPPORTED _ IS _ EMPTY _ TYPES ) { <nl> + try { <nl> + switch ( type ) { <nl> + case INTEGER : <nl> + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ LONG ) . findAll ( ) ; <nl> + break ; <nl> + case FLOAT : <nl> + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ FLOAT ) . findAll ( ) ; <nl> + break ; <nl> + case DOUBLE : <nl> + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ DOUBLE ) . findAll ( ) ; <nl> + break ; <nl> + case BOOLEAN : <nl> + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ BOOLEAN ) . findAll ( ) ; <nl> + break ; <nl> + case LINK : <nl> + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ OBJECT ) . findAll ( ) ; <nl> + break ; <nl> + case DATE : <nl> + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ DATE ) . findAll ( ) ; <nl> + break ; <nl> + default : <nl> + fail ( " Unknown type : " + type ) ; <nl> + } <nl> + fail ( type + " should throw an exception " ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + public void testIsEmptyInvalidFieldNameThrows ( ) { <nl> + String [ ] fieldNames = new String [ ] { null , " " , " foo " , AllJavaTypes . FIELD _ OBJECT + " . foo " } ; <nl> + <nl> + for ( String fieldName : fieldNames ) { <nl> + try { <nl> + testRealm . where ( AllJavaTypes . class ) . isEmpty ( fieldName ) . findAll ( ) ; <nl> + fail ( ) ; <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> + } <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java <nl> index d2360f2 . . b86aaca 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ package io . realm ; <nl> <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 133 , 13 + 134 , 27 @ @ public class RealmQuery < E extends RealmObject > { <nl> return arr ; <nl> } <nl> <nl> + / * * <nl> + * Returns the column indices for the given field name . If a linked field is defined , the column index for <nl> + * each <nl> + * <nl> + * @ param fieldDescription fieldName or link path to a field name . <nl> + * @ param validColumnTypes Legal field type for the last field a <nl> + * @ return <nl> + * / <nl> / / TODO : consider another caching strategy so linked classes are included in the cache . <nl> - private long [ ] getColumnIndices ( String fieldName , ColumnType fieldType ) { <nl> + private long [ ] getColumnIndices ( String fieldDescription , ColumnType . . . validColumnTypes ) { <nl> + if ( fieldDescription = = null | | fieldDescription . equals ( " " ) ) { <nl> + throw new IllegalArgumentException ( " Non - empty fieldname must be provided " ) ; <nl> + } <nl> Table table = this . table ; <nl> - if ( containsDot ( fieldName ) ) { <nl> - String [ ] names = splitString ( fieldName ) ; / / fieldName . split ( " \ \ . " ) ; <nl> + boolean checkColumnType = validColumnTypes ! = null & & validColumnTypes . length > 0 ; <nl> + if ( containsDot ( fieldDescription ) ) { <nl> + <nl> + / / Resolve field description down to last field name <nl> + String [ ] names = splitString ( fieldDescription ) ; / / fieldName . split ( " \ \ . " ) ; <nl> long [ ] columnIndices = new long [ names . length ] ; <nl> - for ( int i = 0 ; i < names . length - 1 ; i + + ) { <nl> + for ( int i = 0 ; i < names . length - 1 ; i + + ) { <nl> long index = table . getColumnIndex ( names [ i ] ) ; <nl> if ( index < 0 ) { <nl> throw new IllegalArgumentException ( " Invalid query : " + names [ i ] + " does not refer to a class . " ) ; <nl> @ @ - 152 , 26 + 167 , 40 @ @ public class RealmQuery < E extends RealmObject > { <nl> throw new IllegalArgumentException ( " Invalid query : " + names [ i ] + " does not refer to a class . " ) ; <nl> } <nl> } <nl> - columnIndices [ names . length - 1 ] = table . getColumnIndex ( names [ names . length - 1 ] ) ; <nl> - if ( fieldType ! = null & & fieldType ! = table . getColumnType ( columnIndices [ names . length - 1 ] ) ) { <nl> + <nl> + / / Check if last field name is a valid field <nl> + String columnName = names [ names . length - 1 ] ; <nl> + long columnIndex = table . getColumnIndex ( columnName ) ; <nl> + columnIndices [ names . length - 1 ] = columnIndex ; <nl> + if ( columnIndex < 0 ) { <nl> + throw new IllegalArgumentException ( columnName + " is not a field name in class " + table . getName ( ) ) ; <nl> + } <nl> + if ( checkColumnType & & ! isValidType ( table . getColumnType ( columnIndex ) , validColumnTypes ) ) { <nl> throw new IllegalArgumentException ( String . format ( " Field ' % s ' : type mismatch . " , names [ names . length - 1 ] ) ) ; <nl> } <nl> return columnIndices ; <nl> } else { <nl> - if ( columns . get ( fieldName ) = = null ) { <nl> - throw new IllegalArgumentException ( String . format ( " Field ' % s ' does not exist . " , fieldName ) ) ; <nl> + if ( columns . get ( fieldDescription ) = = null ) { <nl> + throw new IllegalArgumentException ( String . format ( " Field ' % s ' does not exist . " , fieldDescription ) ) ; <nl> } <nl> - <nl> - ColumnType tableColumnType = table . getColumnType ( columns . get ( fieldName ) ) ; <nl> - if ( fieldType ! = null & & fieldType ! = tableColumnType ) { <nl> + ColumnType tableColumnType = table . getColumnType ( columns . get ( fieldDescription ) ) ; <nl> + if ( checkColumnType & & ! isValidType ( tableColumnType , validColumnTypes ) ) { <nl> throw new IllegalArgumentException ( String . format ( " Field ' % s ' : type mismatch . Was % s , expected % s . " , <nl> - fieldName , fieldType , tableColumnType <nl> - ) ) ; <nl> + fieldDescription , tableColumnType , Arrays . toString ( validColumnTypes ) ) ) ; <nl> } <nl> - return new long [ ] { columns . get ( fieldName ) } ; <nl> + return new long [ ] { columns . get ( fieldDescription ) } ; <nl> } <nl> } <nl> <nl> + private boolean isValidType ( ColumnType columnType , ColumnType [ ] validColumnTypes ) { <nl> + for ( int i = 0 ; i < validColumnTypes . length ; i + + ) { <nl> + if ( validColumnTypes [ i ] = = columnType ) { <nl> + return true ; <nl> + } <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> / * * <nl> * Check if { @ link io . realm . RealmQuery } is still valid to use i . e . the { @ link io . realm . Realm } <nl> * instance hasn ' t been closed and any parent { @ link io . realm . RealmResults } is still valid . <nl> @ @ - 202 , 7 + 231 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> * @ see Required for further infomation . <nl> * / <nl> public RealmQuery < E > isNull ( String fieldName ) { <nl> - long columnIndices [ ] = getColumnIndices ( fieldName , null ) ; <nl> + long columnIndices [ ] = getColumnIndices ( fieldName ) ; <nl> <nl> / / checking that fieldName has the correct type is done in C + + <nl> this . query . isNull ( columnIndices ) ; <nl> @ @ - 218 , 7 + 247 , 7 @ @ public class RealmQuery < E extends RealmObject > { <nl> * @ see Required for further infomation . <nl> * / <nl> public RealmQuery < E > isNotNull ( String fieldName ) { <nl> - long columnIndices [ ] = getColumnIndices ( fieldName , null ) ; <nl> + long columnIndices [ ] = getColumnIndices ( fieldName ) ; <nl> <nl> / / checking that fieldName has the correct type is done in C + + <nl> this . query . isNotNull ( columnIndices ) ; <nl> @ @ - 1121 , 6 + 1150 , 20 @ @ public class RealmQuery < E extends RealmObject > { <nl> return this ; <nl> } <nl> <nl> + / * * <nl> + * Condition that find values that are considered " empty " , i . e . an empty list , the 0 - length string or byte array . <nl> + * <nl> + * @ param fieldName The field to compare <nl> + * @ return The query object <nl> + * @ throws java . lang . IllegalArgumentException If the field name isn ' t valid or its type isn ' t either a RealmList , <nl> + * String or byte array . <nl> + * / <nl> + public RealmQuery < E > isEmpty ( String fieldName ) { <nl> + long columnIndices [ ] = getColumnIndices ( fieldName , ColumnType . STRING , ColumnType . BINARY , ColumnType . LINK _ LIST ) ; <nl> + this . query . isEmpty ( columnIndices ) ; <nl> + return this ; <nl> + } <nl> + <nl> / / Aggregates <nl> <nl> / / Sum <nl> @ @ - 1417 , 8 + 1460 , 6 @ @ public class RealmQuery < E extends RealmObject > { <nl> return this . query . count ( ) ; <nl> } <nl> <nl> - / / Execute <nl> - <nl> / * * <nl> * Find all objects that fulfill the query conditions . <nl> * <nl> diff - - git a / realm / src / main / java / io / realm / internal / TableQuery . java b / realm / src / main / java / io / realm / internal / TableQuery . java <nl> index 88e8a10 . . e263dc4 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / TableQuery . java <nl> + + + b / realm / src / main / java / io / realm / internal / TableQuery . java <nl> @ @ - 348 , 6 + 348 , 7 @ @ public class TableQuery implements Closeable { <nl> queryValidated = false ; <nl> return this ; <nl> } <nl> + <nl> public TableQuery equalTo ( long [ ] columnIndexes , String value ) { <nl> nativeEqual ( nativePtr , columnIndexes , value , true ) ; <nl> queryValidated = false ; <nl> @ @ - 371 , 6 + 372 , 7 @ @ public class TableQuery implements Closeable { <nl> queryValidated = false ; <nl> return this ; <nl> } <nl> + <nl> public TableQuery beginsWith ( long columnIndices [ ] , String value ) { <nl> nativeBeginsWith ( nativePtr , columnIndices , value , true ) ; <nl> queryValidated = false ; <nl> @ @ - 382 , 6 + 384 , 7 @ @ public class TableQuery implements Closeable { <nl> queryValidated = false ; <nl> return this ; <nl> } <nl> + <nl> public TableQuery endsWith ( long columnIndices [ ] , String value ) { <nl> nativeEndsWith ( nativePtr , columnIndices , value , true ) ; <nl> queryValidated = false ; <nl> @ @ - 393 , 12 + 396 , 19 @ @ public class TableQuery implements Closeable { <nl> queryValidated = false ; <nl> return this ; <nl> } <nl> + <nl> public TableQuery contains ( long columnIndices [ ] , String value ) { <nl> nativeContains ( nativePtr , columnIndices , value , true ) ; <nl> queryValidated = false ; <nl> return this ; <nl> } <nl> <nl> + public TableQuery isEmpty ( long [ ] columnIndices ) { <nl> + nativeIsEmpty ( nativePtr , columnIndices ) ; <nl> + queryValidated = false ; <nl> + return this ; <nl> + } <nl> + <nl> / / Searching methods . <nl> <nl> public long find ( long fromTableRow ) { <nl> @ @ - 679 , 6 + 689 , 7 @ @ public class TableQuery implements Closeable { <nl> private native void nativeBeginsWith ( long nativeQueryPtr , long columnIndices [ ] , String value , boolean caseSensitive ) ; <nl> private native void nativeEndsWith ( long nativeQueryPtr , long columnIndices [ ] , String value , boolean caseSensitive ) ; <nl> private native void nativeContains ( long nativeQueryPtr , long columnIndices [ ] , String value , boolean caseSensitive ) ; <nl> + private native void nativeIsEmpty ( long nativePtr , long [ ] columnIndices ) ; <nl> private native long nativeFind ( long nativeQueryPtr , long fromTableRow ) ; <nl> private native long nativeFindAll ( long nativeQueryPtr , long start , long end , long limit ) ; <nl> private native long nativeSumInt ( long nativeQueryPtr , long columnIndex , long start , long end , long limit ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 8f07bbb . . 3350c1a 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 15 , 10 + 15 , 8 @ @ <nl> * / <nl> package io . realm ; <nl> <nl> - import android . content . Context ; <nl> import android . test . AndroidTestCase ; <nl> <nl> - import java . io . File ; <nl> import java . io . IOException ; <nl> import java . util . ArrayList ; <nl> import java . util . Date ; <nl> @ @ - 53 , 8 + 51 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> private final static String FIELD _ LONG _ GREEK _ CHAR = " Δ έ λ τ α " ; <nl> private final static String FIELD _ FLOAT _ KOREAN _ CHAR = " 베 타 " ; <nl> private final static String FIELD _ FLOAT _ GREEK _ CHAR = " β ή τ α " ; <nl> - private final static String FIELD _ BYTE = " columnBinary " ; <nl> - private final static String FIELD _ DOG = " columnRealmObject " ; <nl> + / / private final static String FIELD _ BYTE = " columnBinary " ; <nl> + / / private final static String FIELD _ DOG = " columnRealmObject " ; <nl> <nl> protected void setColumnData ( ) { <nl> columnData . add ( 0 , FIELD _ BOOLEAN ) ; <nl> @ @ - 70 , 6 + 68 , 15 @ @ public class RealmTest extends AndroidTestCase { <nl> Realm . deleteRealmFile ( getContext ( ) ) ; <nl> testRealm = Realm . getInstance ( getContext ( ) ) ; <nl> <nl> + / / populateTestRealm ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void tearDown ( ) throws Exception { <nl> + if ( testRealm ! = null ) testRealm . close ( ) ; <nl> + } <nl> + <nl> + private void populateTestRealm ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> testRealm . allObjects ( AllTypes . class ) . clear ( ) ; <nl> testRealm . allObjects ( NonLatinFieldNames . class ) . clear ( ) ; <nl> @ @ - 92 , 52 + 99 , 53 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> <nl> - private final static int BACKGROUND _ COMMIT _ TEST _ DATA _ SET _ SIZE = 5 ; <nl> - <nl> - <nl> public void testRealmCache ( ) { <nl> - assertEquals ( testRealm , Realm . getInstance ( getContext ( ) ) ) ; <nl> + Realm newRealm = Realm . getInstance ( getContext ( ) ) ; <nl> + assertEquals ( testRealm , newRealm ) ; <nl> + newRealm . close ( ) ; <nl> } <nl> <nl> public void testShouldCreateRealm ( ) { <nl> - Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - assertNotNull ( " Realm . getInstance unexpectedly returns null " , realm ) ; <nl> - assertTrue ( " Realm . getInstance does not contain expected table " , realm . contains ( AllTypes . class ) ) ; <nl> + assertNotNull ( " Realm . getInstance unexpectedly returns null " , testRealm ) ; <nl> + assertTrue ( " Realm . getInstance does not contain expected table " , testRealm . contains ( AllTypes . class ) ) ; <nl> } <nl> <nl> public void testShouldNotFailCreateRealmWithNullContext ( ) { <nl> - Context c = null ; / / throws when c . getDirectory ( ) is called ; has nothing to do with Realm <nl> - <nl> + Realm realm = null ; <nl> try { <nl> - Realm realm = Realm . getInstance ( c ) ; <nl> + realm = Realm . getInstance ( null ) ; / / throws when c . getDirectory ( ) is called ; <nl> + / / has nothing to do with Realm <nl> fail ( " Should throw an exception " ) ; <nl> - } catch ( NullPointerException e ) { <nl> + } catch ( NullPointerException ignore ) { <nl> + } finally { <nl> + if ( realm ! = null ) { <nl> + realm . close ( ) ; <nl> + } <nl> } <nl> - <nl> } <nl> <nl> / / Table getTable ( Class < ? > clazz ) <nl> public void testShouldGetTable ( ) { <nl> Table table = testRealm . getTable ( AllTypes . class ) ; <nl> + populateTestRealm ( ) ; <nl> assertNotNull ( " getTable is returning a null Table object " , table ) ; <nl> assertEquals ( " Unexpected query result after getTable " , TEST _ DATA _ SIZE , table . count ( table . getColumnIndex ( FIELD _ DOUBLE ) , 3 . 1415 ) ) ; <nl> } <nl> <nl> / / < E > void remove ( Class < E > clazz , long objectIndex ) <nl> public void testShouldRemoveRow ( ) { <nl> - <nl> + populateTestRealm ( ) ; <nl> testRealm . beginTransaction ( ) ; <nl> testRealm . remove ( AllTypes . class , 0 ) ; <nl> testRealm . commitTransaction ( ) ; <nl> <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> assertEquals ( " Realm . delete has not deleted record correctly " , TEST _ DATA _ SIZE - 1 , resultList . size ( ) ) ; <nl> - <nl> } <nl> <nl> / / < E extends RealmObject > E get ( Class < E > clazz , long rowIndex ) <nl> public void testShouldGetObject ( ) { <nl> - <nl> + populateTestRealm ( ) ; <nl> AllTypes allTypes = testRealm . get ( AllTypes . class , 0 ) ; <nl> assertNotNull ( " get has returned null object " , allTypes ) ; <nl> assertEquals ( " get has returned wrong object " , " test data 0 " , allTypes . getColumnString ( ) ) ; <nl> @ @ - 146 , 27 + 154 , 26 @ @ public class RealmTest extends AndroidTestCase { <nl> / / boolean contains ( Class < ? > clazz ) <nl> public void testShouldContainTable ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> - Dog dog = testRealm . createObject ( Dog . class ) ; <nl> + testRealm . createObject ( Dog . class ) ; <nl> testRealm . commitTransaction ( ) ; <nl> assertTrue ( " contains returns false for newly created table " , testRealm . contains ( Dog . class ) ) ; <nl> } <nl> <nl> / / boolean contains ( Class < ? > clazz ) <nl> public void testShouldNotContainTable ( ) { <nl> - <nl> assertFalse ( " contains returns true for non - existing table " , testRealm . contains ( RealmTest . class ) ) ; <nl> } <nl> <nl> / / < E extends RealmObject > RealmQuery < E > where ( Class < E > clazz ) <nl> public void testShouldReturnResultSet ( ) { <nl> - <nl> + populateTestRealm ( ) ; <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> - <nl> assertEquals ( " Realm . get is returning wrong number of objects " , TEST _ DATA _ SIZE , resultList . size ( ) ) ; <nl> } <nl> <nl> / / Note that this test is relying on the values set while initializing the test dataset <nl> public void testQueriesResults ( ) throws IOException { <nl> + populateTestRealm ( ) ; <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ LONG , 33 ) . findAll ( ) ; <nl> assertEquals ( " ResultList . where not returning expected result " , 1 , resultList . size ( ) ) ; <nl> <nl> @ @ - 184 , 142 + 191 , 112 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testQueriesWithDataTypes ( ) throws IOException { <nl> - RealmResults < AllTypes > resultList = null ; <nl> + populateTestRealm ( ) ; <nl> setColumnData ( ) ; <nl> <nl> for ( int i = 0 ; i < columnData . size ( ) ; i + + ) { <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , true ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , true ) . findAll ( ) ; <nl> if ( i ! = 0 ) { <nl> fail ( " Realm . where should fail with illegal argument " ) ; <nl> } <nl> - } catch ( IllegalArgumentException e ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , new Date ( ) ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , new Date ( ) ) . findAll ( ) ; <nl> if ( i ! = 1 ) { <nl> fail ( " Realm . where should fail with illegal argument " ) ; <nl> } <nl> - } catch ( IllegalArgumentException e ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 13 . 37d ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 13 . 37d ) . findAll ( ) ; <nl> if ( i ! = 2 ) { <nl> fail ( " Realm . where should fail with illegal argument " ) ; <nl> } <nl> - } catch ( IllegalArgumentException e ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 13 . 3711f ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 13 . 3711f ) . findAll ( ) ; <nl> if ( i ! = 3 ) { <nl> fail ( " Realm . where should fail with illegal argument " ) ; <nl> } <nl> - } catch ( IllegalArgumentException e ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , " test " ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , " test " ) . findAll ( ) ; <nl> if ( i ! = 4 ) { <nl> fail ( " Realm . where should fail with illegal argument " ) ; <nl> } <nl> - } catch ( IllegalArgumentException e ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 1337 ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 1337 ) . findAll ( ) ; <nl> if ( i ! = 5 ) { <nl> fail ( " Realm . where should fail with illegal argument " ) ; <nl> } <nl> - } catch ( IllegalArgumentException e ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> } <nl> <nl> public void testQueriesFailWithInvalidDataTypes ( ) throws IOException { <nl> - RealmResults < AllTypes > resultList = null ; <nl> - <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 33 ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 33 ) . findAll ( ) ; <nl> fail ( " Invalid field name " ) ; <nl> - } catch ( Exception e ) { <nl> + } catch ( Exception ignored ) { <nl> } <nl> <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , " test " ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , " test " ) . findAll ( ) ; <nl> fail ( " Invalid field name " ) ; <nl> - } catch ( Exception e ) { <nl> + } catch ( Exception ignored ) { <nl> } <nl> <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , true ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , true ) . findAll ( ) ; <nl> fail ( " Invalid field name " ) ; <nl> - } catch ( Exception e ) { <nl> + } catch ( Exception ignored ) { <nl> } <nl> <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 3 . 1415d ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 3 . 1415d ) . findAll ( ) ; <nl> fail ( " Invalid field name " ) ; <nl> - } catch ( Exception e ) { <nl> + } catch ( Exception ignored ) { <nl> } <nl> <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 3 . 1415f ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 3 . 1415f ) . findAll ( ) ; <nl> fail ( " Invalid field name " ) ; <nl> - } catch ( Exception e ) { <nl> + } catch ( Exception ignored ) { <nl> } <nl> } <nl> <nl> public void testQueriesFailWithNullQueryValue ( ) throws IOException { <nl> - RealmResults < AllTypes > resultList = null ; <nl> - <nl> - String nullString = null ; <nl> - Float nullFloat = null ; <nl> - Long nullLong = null ; <nl> - Boolean nullBoolean = null ; <nl> - <nl> try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ STRING , nullString ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ STRING , ( String ) null ) . findAll ( ) ; <nl> fail ( " Realm . where should fail with illegal argument " ) ; <nl> - } catch ( IllegalArgumentException e ) { <nl> - } <nl> - <nl> - try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ LONG , nullLong ) . findAll ( ) ; <nl> - fail ( " Realm . where should fail with illegal argument " ) ; <nl> - <nl> - } catch ( IllegalArgumentException e ) { <nl> - } catch ( NullPointerException e ) { <nl> - } <nl> - <nl> - try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ BOOLEAN , nullBoolean ) . findAll ( ) ; <nl> - fail ( " Realm . where should fail with illegal argument " ) ; <nl> - } catch ( IllegalArgumentException e ) { <nl> - } catch ( NullPointerException e ) { <nl> - } <nl> - <nl> - try { <nl> - resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ FLOAT , nullFloat ) . findAll ( ) ; <nl> - fail ( " Realm . where should fail with illegal argument " ) ; <nl> - } catch ( IllegalArgumentException e ) { <nl> - } catch ( NullPointerException e ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> <nl> / / < E extends RealmObject > RealmTableOrViewList < E > allObjects ( Class < E > clazz ) <nl> public void testShouldReturnTableOrViewList ( ) { <nl> + populateTestRealm ( ) ; <nl> RealmResults < AllTypes > resultList = testRealm . allObjects ( AllTypes . class ) ; <nl> assertEquals ( " Realm . get is returning wrong result set " , TEST _ DATA _ SIZE , resultList . size ( ) ) ; <nl> } <nl> <nl> / / void beginTransaction ( ) <nl> public void testBeginTransaction ( ) throws IOException { <nl> + populateTestRealm ( ) ; <nl> <nl> testRealm . beginTransaction ( ) ; <nl> - <nl> AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; <nl> allTypes . setColumnFloat ( 3 . 1415f ) ; <nl> allTypes . setColumnString ( " a unique string " ) ; <nl> @ @ - 352 , 12 + 329 , 11 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> / / Starting a transaction on the wrong thread will fail <nl> - public boolean transactionMethodWrongThread ( final TransactionMethod method ) throws InterruptedException , ExecutionException { <nl> - final Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - <nl> + private boolean transactionMethodWrongThread ( final TransactionMethod method ) throws InterruptedException , <nl> + ExecutionException { <nl> if ( method ! = TransactionMethod . METHOD _ BEGIN ) { <nl> - realm . beginTransaction ( ) ; <nl> - Dog dog = realm . createObject ( Dog . class ) ; / / FIXME : Empty transactions cannot be cancelled <nl> + testRealm . beginTransaction ( ) ; <nl> + testRealm . createObject ( Dog . class ) ; / / FIXME : Empty transactions cannot be cancelled <nl> } <nl> ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; <nl> Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { <nl> @ @ - 366 , 13 + 342 , 13 @ @ public class RealmTest extends AndroidTestCase { <nl> try { <nl> switch ( method ) { <nl> case METHOD _ BEGIN : <nl> - realm . beginTransaction ( ) ; <nl> + testRealm . beginTransaction ( ) ; <nl> break ; <nl> case METHOD _ COMMIT : <nl> - realm . commitTransaction ( ) ; <nl> + testRealm . commitTransaction ( ) ; <nl> break ; <nl> case METHOD _ CANCEL : <nl> - realm . cancelTransaction ( ) ; <nl> + testRealm . cancelTransaction ( ) ; <nl> break ; <nl> } <nl> return false ; <nl> @ @ - 384 , 7 + 360 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> boolean result = future . get ( ) ; <nl> if ( result & & method ! = TransactionMethod . METHOD _ BEGIN ) { <nl> - realm . cancelTransaction ( ) ; <nl> + testRealm . cancelTransaction ( ) ; <nl> } <nl> return result ; <nl> } <nl> @ @ - 397 , 6 + 373 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> / / void commitTransaction ( ) <nl> public void testCommitTransaction ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> testRealm . beginTransaction ( ) ; <nl> AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; <nl> allTypes . setColumnBoolean ( true ) ; <nl> @ @ - 408 , 22 + 386 , 25 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> <nl> public void testCancelTransaction ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> testRealm . beginTransaction ( ) ; <nl> - AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; <nl> + testRealm . createObject ( AllTypes . class ) ; <nl> testRealm . cancelTransaction ( ) ; <nl> assertEquals ( TEST _ DATA _ SIZE , testRealm . allObjects ( AllTypes . class ) . size ( ) ) ; <nl> <nl> try { <nl> testRealm . cancelTransaction ( ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalStateException ignored ) { } <nl> + } catch ( IllegalStateException ignored ) { <nl> + } <nl> } <nl> <nl> / / void clear ( Class < ? > classSpec ) <nl> public void testClassClear ( ) { <nl> + populateTestRealm ( ) ; <nl> <nl> / / Currently clear will not work outside a transaction : <nl> - <nl> testRealm . beginTransaction ( ) ; <nl> testRealm . clear ( AllTypes . class ) ; <nl> testRealm . commitTransaction ( ) ; <nl> @ @ - 434 , 11 + 415 , 11 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> / / void clear ( Class < ? > classSpec ) <nl> public void testClassClearWithTwoTables ( ) { <nl> - testRealm . beginTransaction ( ) ; <nl> + populateTestRealm ( ) ; <nl> <nl> + testRealm . beginTransaction ( ) ; <nl> Dog dog = testRealm . createObject ( Dog . class ) ; <nl> dog . setName ( " Castro " ) ; <nl> - <nl> testRealm . commitTransaction ( ) ; <nl> <nl> / / NOTE : <nl> @ @ - 466 , 6 + 447 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> / / int getVersion ( ) <nl> public void testGetVersion ( ) throws IOException { <nl> + populateTestRealm ( ) ; <nl> <nl> long version = testRealm . getVersion ( ) ; <nl> <nl> @ @ - 484 , 21 + 466 , 22 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testShouldFailOutsideTransaction ( ) { <nl> - <nl> / / These API calls should fail outside a Transaction : <nl> try { <nl> - AllTypes aT = testRealm . createObject ( AllTypes . class ) ; <nl> + testRealm . createObject ( AllTypes . class ) ; <nl> fail ( " Realm . createObject should fail outside write transaction " ) ; <nl> - } catch ( IllegalStateException e ) { <nl> + } catch ( IllegalStateException ignored ) { <nl> } <nl> try { <nl> testRealm . remove ( AllTypes . class , 0 ) ; <nl> fail ( " Realm . remove should fail outside write transaction " ) ; <nl> - } catch ( IllegalStateException e ) { <nl> + } catch ( IllegalStateException ignored ) { <nl> } <nl> } <nl> <nl> public void testRealmQueryBetween ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . between ( FIELD _ LONG , 0 , 9 ) . findAll ( ) ; <nl> assertEquals ( 10 , resultList . size ( ) ) ; <nl> <nl> @ @ - 513 , 6 + 496 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testRealmQueryGreaterThan ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . greaterThan ( FIELD _ FLOAT , 10 . 234567f ) . findAll ( ) ; <nl> assertEquals ( TEST _ DATA _ SIZE - 10 , resultList . size ( ) ) ; <nl> <nl> @ @ - 526 , 6 + 511 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> <nl> <nl> public void testRealmQueryGreaterThanOrEqualTo ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . greaterThanOrEqualTo ( FIELD _ FLOAT , 10 . 234567f ) . findAll ( ) ; <nl> assertEquals ( TEST _ DATA _ SIZE - 9 , resultList . size ( ) ) ; <nl> <nl> @ @ - 540 , 6 + 527 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testRealmQueryOr ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> RealmQuery < AllTypes > query = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ FLOAT , 31 . 234567f ) ; <nl> RealmResults < AllTypes > resultList = query . or ( ) . between ( FIELD _ LONG , 1 , 20 ) . findAll ( ) ; <nl> assertEquals ( 21 , resultList . size ( ) ) ; <nl> @ @ - 552 , 6 + 541 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testRealmQueryImplicitAnd ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> RealmQuery < AllTypes > query = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ FLOAT , 31 . 234567f ) ; <nl> RealmResults < AllTypes > resultList = query . between ( FIELD _ LONG , 1 , 10 ) . findAll ( ) ; <nl> assertEquals ( 0 , resultList . size ( ) ) ; <nl> @ @ - 562 , 6 + 553 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testRealmQueryLessThan ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . lessThan ( FIELD _ FLOAT , 31 . 234567f ) . findAll ( ) ; <nl> assertEquals ( 30 , resultList . size ( ) ) ; <nl> RealmQuery < AllTypes > query = testRealm . where ( AllTypes . class ) . lessThan ( FIELD _ FLOAT , 31 . 234567f ) ; <nl> @ @ - 570 , 6 + 563 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testRealmQueryLessThanOrEqual ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . lessThanOrEqualTo ( FIELD _ FLOAT , 31 . 234567f ) . findAll ( ) ; <nl> assertEquals ( 31 , resultList . size ( ) ) ; <nl> resultList = testRealm . where ( AllTypes . class ) . lessThanOrEqualTo ( FIELD _ FLOAT , 31 . 234567f ) . between ( FIELD _ LONG , 11 , 20 ) . findAll ( ) ; <nl> @ @ - 577 , 6 + 572 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testRealmQueryEqualTo ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ FLOAT , 31 . 234567f ) . findAll ( ) ; <nl> assertEquals ( 1 , resultList . size ( ) ) ; <nl> resultList = testRealm . where ( AllTypes . class ) . greaterThan ( FIELD _ FLOAT , 11 . 0f ) . equalTo ( FIELD _ LONG , 10 ) . findAll ( ) ; <nl> @ @ - 586 , 6 + 583 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testRealmQueryEqualToNonLatinCharacters ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> RealmResults < NonLatinFieldNames > resultList = testRealm . where ( NonLatinFieldNames . class ) . equalTo ( FIELD _ LONG _ KOREAN _ CHAR , 13 ) . findAll ( ) ; <nl> assertEquals ( 1 , resultList . size ( ) ) ; <nl> resultList = testRealm . where ( NonLatinFieldNames . class ) . greaterThan ( FIELD _ FLOAT _ KOREAN _ CHAR , 11 . 0f ) . equalTo ( FIELD _ LONG _ KOREAN _ CHAR , 10 ) . findAll ( ) ; <nl> @ @ - 602 , 6 + 601 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> public void testRealmQueryNotEqualTo ( ) { <nl> + populateTestRealm ( ) ; <nl> + <nl> RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . notEqualTo ( FIELD _ LONG , 31 ) . findAll ( ) ; <nl> assertEquals ( TEST _ DATA _ SIZE - 1 , resultList . size ( ) ) ; <nl> resultList = testRealm . where ( AllTypes . class ) . notEqualTo ( FIELD _ FLOAT , 11 . 234567f ) . equalTo ( FIELD _ LONG , 10 ) . findAll ( ) ; <nl> @ @ - 610 , 42 + 611 , 14 @ @ public class RealmTest extends AndroidTestCase { <nl> assertEquals ( 1 , resultList . size ( ) ) ; <nl> } <nl> <nl> - public void testQueryWithNonExistingField ( ) { <nl> + public void testQueryWithNonExistingField ( ) { <nl> try { <nl> - RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . equalTo ( " NotAField " , 13 ) . findAll ( ) ; <nl> + testRealm . where ( AllTypes . class ) . equalTo ( " NotAField " , 13 ) . findAll ( ) ; <nl> fail ( " Should throw exception " ) ; <nl> - } catch ( IllegalArgumentException e ) { <nl> - <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } <nl> } <nl> <nl> - public void createAndTestFilename ( String language , String fileName ) { <nl> - Realm . deleteRealmFile ( getContext ( ) , fileName ) ; <nl> - Realm realm1 = Realm . getInstance ( getContext ( ) , fileName ) ; <nl> - realm1 . beginTransaction ( ) ; <nl> - Dog dog1 = realm1 . createObject ( Dog . class ) ; <nl> - dog1 . setName ( " Rex " ) ; <nl> - realm1 . commitTransaction ( ) ; <nl> - <nl> - File file = new File ( getContext ( ) . getFilesDir ( ) + " / " + fileName ) ; <nl> - assertTrue ( language , file . exists ( ) ) ; <nl> - <nl> - Realm realm2 = Realm . getInstance ( getContext ( ) , fileName ) ; <nl> - Dog dog2 = realm2 . allObjects ( Dog . class ) . first ( ) ; <nl> - assertEquals ( language , " Rex " , dog2 . getName ( ) ) ; <nl> - } <nl> - <nl> - public void testCreateFile ( ) { <nl> - createAndTestFilename ( " American " , " Washington " ) ; <nl> - createAndTestFilename ( " Danish " , " K ø benhavn " ) ; <nl> - createAndTestFilename ( " Russian " , " М о с к в а " ) ; <nl> - createAndTestFilename ( " Greek " , " Α θ ή ν α " ) ; <nl> - createAndTestFilename ( " Chinese " , " 北 京 市 " ) ; <nl> - createAndTestFilename ( " Korean " , " 서 울 시 " ) ; <nl> - createAndTestFilename ( " Arabic " , " ا ل ر ي ا ض " ) ; <nl> - createAndTestFilename ( " India " , " न ई द ि ल ् ल ी " ) ; <nl> - createAndTestFilename ( " Japanese " , " 東 京 都 " ) ; <nl> - } <nl> <nl> public void testReferenceCounting ( ) { <nl> / / At this point reference count should be one because of the setUp method <nl> @ @ - 656 , 11 + 629 , 18 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> <nl> / / Raise the reference <nl> - Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> - realm . close ( ) ; <nl> + Realm realm = null ; <nl> + try { <nl> + realm = Realm . getInstance ( getContext ( ) ) ; <nl> + } finally { <nl> + if ( realm ! = null ) realm . close ( ) ; <nl> + } <nl> + <nl> try { <nl> - / / This should not fail because the reference is now 2 <nl> - realm . where ( AllTypes . class ) . count ( ) ; <nl> + / / This should not fail because the reference is now 1 <nl> + if ( realm ! = null ) { <nl> + realm . where ( AllTypes . class ) . count ( ) ; <nl> + } <nl> } catch ( IllegalStateException e ) { <nl> fail ( ) ; <nl> } <nl> @ @ - 669 , 7 + 649 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> try { <nl> testRealm . where ( AllTypes . class ) . count ( ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalStateException ignored ) { } <nl> - <nl> + } catch ( IllegalStateException ignored ) { <nl> + } <nl> } <nl> }

TEST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index 679ab19 . . 03d1f95 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 0 . 84 . 0 
 + * Added RealmQuery . isEmpty ( ) . 
 * Fixed a bug where closed Realms were trying to refresh themselves resulting in a NullPointerException . 
 * Added Realm . isClosed ( ) method . 
 * Added Realm . distinct ( ) method . 
 diff - - git a / realm - jni / src / io _ realm _ internal _ TableQuery . cpp b / realm - jni / src / io _ realm _ internal _ TableQuery . cpp 
 index e583492 . . 3004e6d 100644 
 - - - a / realm - jni / src / io _ realm _ internal _ TableQuery . cpp 
 + + + b / realm - jni / src / io _ realm _ internal _ TableQuery . cpp 
 @ @ - 70 , 7 + 70 , 7 @ @ JNIEXPORT jstring JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeValidateQuery 
 / / Return TableRef used for build link queries 
 TableRef getTableForLinkQuery ( jlong nativeQueryPtr , jlong * arr , jsize arr _ len ) { 
 TableRef table _ ref = Q ( nativeQueryPtr ) - > get _ table ( ) ; 
 - for ( int i = 0 ; i < arr _ len - 1 ; i + + ) { 
 + for ( int i = 0 ; i < arr _ len - 1 ; i + + ) { 
 table _ ref - > link ( size _ t ( arr [ i ] ) ) ; 
 } 
 return table _ ref ; 
 @ @ - 79 , 7 + 79 , 7 @ @ TableRef getTableForLinkQuery ( jlong nativeQueryPtr , jlong * arr , jsize arr _ len ) { 
 / / Return TableRef point to original table or the link table 
 TableRef getTableByArray ( jlong nativeQueryPtr , jlong * arr , jsize arr _ len ) { 
 TableRef table _ ref = Q ( nativeQueryPtr ) - > get _ table ( ) ; 
 - for ( int i = 0 ; i < arr _ len - 1 ; i + + ) { 
 + for ( int i = 0 ; i < arr _ len - 1 ; i + + ) { 
 table _ ref = table _ ref - > get _ link _ target ( size _ t ( arr [ i ] ) ) ; 
 } 
 return table _ ref ; 
 @ @ - 1347 , 3 + 1347 , 65 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeIsNotNull 
 RELEASE _ ARRAY ( ) 
 } 
 
 + JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeIsEmpty 
 + ( JNIEnv * env , jobject , jlong nativeQueryPtr , jlongArray columnIndexes ) { 
 + 
 + GET _ ARRAY ( ) 
 + Query * pQuery = Q ( nativeQueryPtr ) ; 
 + try { 
 + TableRef src _ table _ ref = getTableForLinkQuery ( nativeQueryPtr , arr , arr _ len ) ; 
 + jlong column _ idx = arr [ arr _ len - 1 ] ; 
 + TableRef table _ ref = getTableByArray ( nativeQueryPtr , arr , arr _ len ) ; 
 + 
 + int col _ type = table _ ref - > get _ column _ type ( S ( column _ idx ) ) ; 
 + if ( arr _ len = = 1 ) { 
 + / / Field queries 
 + switch ( col _ type ) { 
 + case type _ Binary : 
 + pQuery - > equal ( S ( column _ idx ) , BinaryData ( " " , 0 ) ) ; 
 + break ; 
 + case type _ LinkList : 
 + pQuery - > and _ query ( table _ ref - > column < LinkList > ( S ( column _ idx ) ) . count ( ) = = 0 ) ; 
 + break ; 
 + case type _ String : 
 + pQuery - > equal ( S ( column _ idx ) , " " ) ; 
 + break ; 
 + case type _ Link : 
 + case type _ Bool : 
 + case type _ Int : 
 + case type _ Float : 
 + case type _ Double : 
 + case type _ DateTime : 
 + default : 
 + ThrowException ( env , IllegalArgument , " isEmpty ( ) only works on String , byte [ ] and RealmList . " ) ; 
 + } 
 + } 
 + else { 
 + / / Linked queries 
 + switch ( col _ type ) { 
 + case type _ Binary : 
 + pQuery - > and _ query ( src _ table _ ref - > column < Binary > ( S ( column _ idx ) ) = = BinaryData ( " " , 0 ) ) ; 
 + break ; 
 + case type _ LinkList : 
 + pQuery - > and _ query ( src _ table _ ref - > column < LinkList > ( S ( column _ idx ) ) . count ( ) = = 0 ) ; 
 + break ; 
 + case type _ String : 
 + pQuery - > and _ query ( src _ table _ ref - > column < String > ( S ( column _ idx ) ) = = " " ) ; 
 + break ; 
 + case type _ Link : 
 + case type _ Bool : 
 + case type _ Int : 
 + case type _ Float : 
 + case type _ Double : 
 + case type _ DateTime : 
 + default : 
 + ThrowException ( env , IllegalArgument , " isEmpty ( ) only works on String , byte [ ] and RealmList across links . " ) ; 
 + } 
 + } 
 + } CATCH _ STD ( ) 
 + RELEASE _ ARRAY ( ) 
 + } 
 + 
 + 
 + 
 + 
 diff - - git a / realm - jni / src / io _ realm _ internal _ TableQuery . h b / realm - jni / src / io _ realm _ internal _ TableQuery . h 
 index 21b5084 . . 7ec178e 100644 
 - - - a / realm - jni / src / io _ realm _ internal _ TableQuery . h 
 + + + b / realm - jni / src / io _ realm _ internal _ TableQuery . h 
 @ @ - 489 , 6 + 489 , 14 @ @ JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeIsNull 
 
 / * 
 * Class : io _ realm _ internal _ TableQuery 
 + * Method : nativeIsEmpty 
 + * Signature : ( J [ J ) V 
 + * / 
 + JNIEXPORT void JNICALL Java _ io _ realm _ internal _ TableQuery _ nativeIsEmpty 
 + ( JNIEnv * , jobject , jlong , jlongArray ) ; 
 + 
 + / * 
 + * Class : io _ realm _ internal _ TableQuery 
 * Method : nativeIsNotNull 
 * Signature : ( J [ J ) V 
 * / 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmQueryTest . java b / realm / src / androidTest / java / io / realm / RealmQueryTest . java 
 index 70b2227 . . 1572bf4 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmQueryTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmQueryTest . java 
 @ @ - 18 , 10 + 18 , 14 @ @ package io . realm ; 
 
 import android . test . AndroidTestCase ; 
 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . Date ; 
 + import java . util . List ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import io . realm . entities . AllJavaTypes ; 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . Cat ; 
 import io . realm . entities . CatOwner ; 
 @ @ - 31 , 8 + 35 , 9 @ @ import io . realm . entities . NullTypes ; 
 import io . realm . entities . Owner ; 
 import io . realm . entities . StringOnly ; 
 import io . realm . exceptions . RealmError ; 
 + import io . realm . internal . ColumnType ; 
 
 - public class RealmQueryTest extends AndroidTestCase { 
 + public class RealmQueryTest extends AndroidTestCase { 
 
 protected final static int TEST _ DATA _ SIZE = 10 ; 
 
 @ @ - 219 , 8 + 224 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { 
 . equalTo ( FIELD _ LONG , 5 ) 
 . or ( ) 
 . not ( ) . beginGroup ( ) 
 - . greaterThan ( FIELD _ LONG , 2 ) 
 - . endGroup ( ) 
 + . greaterThan ( FIELD _ LONG , 2 ) 
 + . endGroup ( ) 
 . findAll ( ) ; 
 assertEquals ( 4 , list4 . size ( ) ) ; 
 for ( int i = 0 ; i < list4 . size ( ) ; i + + ) { 
 @ @ - 488 , 7 + 493 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { 
 RealmResults < AllTypes > results = testRealm . where ( AllTypes . class ) 
 . findAllSorted ( new String [ ] { } , new boolean [ ] { } ) ; 
 fail ( ) ; 
 - } catch ( IllegalArgumentException ignored ) { } 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 
 / / number of fields and sorting orders don ' t match 
 try { 
 @ @ - 496 , 18 + 502 , 21 @ @ public class RealmQueryTest extends AndroidTestCase { 
 . findAllSorted ( new String [ ] { FIELD _ STRING } , 
 new boolean [ ] { RealmResults . SORT _ ORDER _ ASCENDING , RealmResults . SORT _ ORDER _ ASCENDING } ) ; 
 fail ( ) ; 
 - } catch ( IllegalArgumentException ignored ) { } 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 
 / / null is not allowed 
 try { 
 RealmResults < AllTypes > results = testRealm . where ( AllTypes . class ) . findAllSorted ( null , null ) ; 
 fail ( ) ; 
 - } catch ( IllegalArgumentException ignored ) { } 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 try { 
 RealmResults < AllTypes > results = testRealm . where ( AllTypes . class ) . findAllSorted ( new String [ ] { FIELD _ STRING } , 
 null ) ; 
 fail ( ) ; 
 - } catch ( IllegalArgumentException ignored ) { } 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 
 / / non - existing field name 
 try { 
 @ @ - 515 , 7 + 524 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { 
 . findAllSorted ( new String [ ] { FIELD _ STRING , " dont - exist " } , 
 new boolean [ ] { RealmResults . SORT _ ORDER _ ASCENDING , RealmResults . SORT _ ORDER _ ASCENDING } ) ; 
 fail ( ) ; 
 - } catch ( IllegalArgumentException ignored ) { } 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 } 
 
 public void testSortSingleField ( ) { 
 @ @ - 662 , 71 + 672 , 61 @ @ public class RealmQueryTest extends AndroidTestCase { 
 try { 
 testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ STRING _ NOT _ NULL ) . findAll ( ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 / / 2 Bytes 
 try { 
 testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ BYTES _ NOT _ NULL ) . findAll ( ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 / / 3 Boolean 
 try { 
 testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ BOOLEAN _ NOT _ NULL ) . findAll ( ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 / / 4 Byte 
 try { 
 testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ BYTE _ NOT _ NULL ) . findAll ( ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 / / 5 Short 
 try { 
 testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ SHORT _ NOT _ NULL ) . findAll ( ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 / / 6 Integer 
 try { 
 testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ INTEGER _ NOT _ NULL ) . findAll ( ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 / / 7 Long 
 try { 
 testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ LONG _ NOT _ NULL ) . findAll ( ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 / / 8 Float 
 try { 
 testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ FLOAT _ NOT _ NULL ) . findAll ( ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 / / 9 Double 
 try { 
 testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ DOUBLE _ NOT _ NULL ) . findAll ( ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 / / 10 Date 
 try { 
 testRealm . where ( NullTypes . class ) . isNull ( NullTypes . FIELD _ DATE _ NOT _ NULL ) . findAll ( ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 
 @ @ - 736 , 19 + 736 , 19 @ @ public class RealmQueryTest extends AndroidTestCase { 
 
 / / 1 String 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ STRING _ NULL , " Horse " ) . findAll ( ) . size ( ) ) ; 
 - assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ STRING _ NULL , ( String ) null ) . findAll ( ) . size ( ) ) ; 
 + assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ STRING _ NULL , ( String ) null ) . findAll ( ) . size ( ) ) ; 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ STRING _ NULL , " Fish " ) . findAll ( ) . size ( ) ) ; 
 assertEquals ( 0 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ STRING _ NULL , " Goat " ) . findAll ( ) . size ( ) ) ; 
 / / 2 Bytes skipped , doesn ' t support equalTo query 
 / / 3 Boolean 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BOOLEAN _ NULL , true ) . findAll ( ) . size ( ) ) ; 
 - assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BOOLEAN _ NULL , ( Boolean ) null ) . findAll ( ) . size ( ) ) ; 
 + assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BOOLEAN _ NULL , ( Boolean ) null ) . findAll ( ) . size ( ) ) ; 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BOOLEAN _ NULL , false ) . findAll ( ) . size ( ) ) ; 
 / / 4 Byte 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , 1 ) . findAll ( ) . size ( ) ) ; 
 - assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , ( byte ) 1 ) . findAll ( ) . size ( ) ) ; 
 + assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , ( byte ) 1 ) . findAll ( ) . size ( ) ) ; 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , ( Byte ) null ) . findAll ( ) . size ( ) ) ; 
 - assertEquals ( 0 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , ( byte ) 42 ) . findAll ( ) . size ( ) ) ; 
 + assertEquals ( 0 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ BYTE _ NULL , ( byte ) 42 ) . findAll ( ) . size ( ) ) ; 
 / / 5 Short for other long based columns , only test null 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ SHORT _ NULL , 1 ) . findAll ( ) . size ( ) ) ; 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . equalTo ( NullTypes . FIELD _ SHORT _ NULL , ( short ) 1 ) . findAll ( ) . size ( ) ) ; 
 @ @ - 930 , 7 + 930 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { 
 / / 6 Integer 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . greaterThanOrEqualTo ( NullTypes . FIELD _ INTEGER _ NULL , 3 ) . count ( ) ) ; 
 / / 7 Long 
 - assertEquals ( 1 , testRealm . where ( NullTypes . class ) . greaterThanOrEqualTo ( NullTypes . FIELD _ LONG _ NULL , 3L ) . count ( ) ) ; 
 + assertEquals ( 1 , testRealm . where ( NullTypes . class ) . greaterThanOrEqualTo ( NullTypes . FIELD _ LONG _ NULL , 3L ) . count ( ) ) ; 
 / / 8 Float 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . greaterThanOrEqualTo ( NullTypes . FIELD _ FLOAT _ NULL , 3F ) . count ( ) ) ; 
 / / 9 Double 
 @ @ - 983 , 7 + 983 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { 
 final int count = 30 ; 
 RealmResults < CatOwner > results = testRealm . where ( CatOwner . class ) . findAll ( ) ; 
 
 - for ( int i = 1 ; i < = count ; i + + ) { 
 + for ( int i = 1 ; i < = count ; i + + ) { 
 @ SuppressWarnings ( { " unused " } ) 
 byte garbage [ ] = TestHelper . allocGarbage ( 0 ) ; 
 results = results . where ( ) . findAll ( ) ; 
 @ @ - 1110 , 8 + 1110 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { 
 testRealm . where ( NullTypes . class ) . isNull ( 
 NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ OBJECT _ NULL ) . count ( ) ; 
 fail ( ) ; 
 + } catch ( RealmError ignored ) { 
 } 
 - catch ( RealmError ignored ) { } 
 } 
 
 / / Test isNull on link ' s not - nullable field . should throw 
 @ @ - 1200 , 7 + 1200 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { 
 NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ STRING _ NULL ) . count ( ) ) ; 
 / / 2 Bytes 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . isNotNull ( 
 - NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ BYTES _ NULL ) . count ( ) ) ; 
 + NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ BYTES _ NULL ) . count ( ) ) ; 
 / / 3 Boolean 
 assertEquals ( 1 , testRealm . where ( NullTypes . class ) . isNotNull ( 
 NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ BOOLEAN _ NULL ) . count ( ) ) ; 
 @ @ - 1233 , 8 + 1233 , 8 @ @ public class RealmQueryTest extends AndroidTestCase { 
 testRealm . where ( NullTypes . class ) . isNotNull ( 
 NullTypes . FIELD _ OBJECT _ NULL + " . " + NullTypes . FIELD _ OBJECT _ NULL ) . count ( ) ; 
 fail ( ) ; 
 + } catch ( RealmError ignored ) { 
 } 
 - catch ( RealmError ignored ) { } 
 } 
 
 / / Test isNotNull on link ' s not - nullable field . should throw 
 @ @ - 1379 , 7 + 1379 , 7 @ @ public class RealmQueryTest extends AndroidTestCase { 
 latch . countDown ( ) ; 
 } 
 } 
 - ) ; 
 + ) ; 
 thread . start ( ) ; 
 } 
 
 @ @ - 1446 , 4 + 1446 , 122 @ @ public class RealmQueryTest extends AndroidTestCase { 
 / / invalid if parent has been removed 
 assertFalse ( query . isValid ( ) ) ; 
 } 
 + 
 + 
 + private static final List < ColumnType > SUPPORTED _ IS _ EMPTY _ TYPES = Arrays . asList ( 
 + ColumnType . STRING , 
 + ColumnType . BINARY , 
 + ColumnType . LINK _ LIST ) ; 
 + 
 + private static final List < ColumnType > NOT _ SUPPORTED _ IS _ EMPTY _ TYPES ; 
 + static { 
 + final ArrayList < ColumnType > list = new ArrayList < ColumnType > ( Arrays . asList ( ColumnType . values ( ) ) ) ; 
 + list . removeAll ( SUPPORTED _ IS _ EMPTY _ TYPES ) ; 
 + list . remove ( ColumnType . MIXED ) ; 
 + list . remove ( ColumnType . TABLE ) ; 
 + NOT _ SUPPORTED _ IS _ EMPTY _ TYPES = list ; 
 + } 
 + 
 + private void createIsEmptyDataSet ( Realm realm ) { 
 + realm . beginTransaction ( ) ; 
 + 
 + AllJavaTypes emptyValues = new AllJavaTypes ( ) ; 
 + emptyValues . setFieldLong ( 1 ) ; 
 + emptyValues . setFieldString ( " " ) ; 
 + emptyValues . setFieldBinary ( new byte [ 0 ] ) ; 
 + emptyValues . setFieldObject ( emptyValues ) ; 
 + emptyValues . setFieldList ( new RealmList < AllJavaTypes > ( ) ) ; 
 + realm . copyToRealm ( emptyValues ) ; 
 + 
 + AllJavaTypes nonEmpty = new AllJavaTypes ( ) ; 
 + nonEmpty . setFieldLong ( 2 ) ; 
 + nonEmpty . setFieldString ( " Foo " ) ; 
 + nonEmpty . setFieldBinary ( new byte [ ] { 1 , 2 , 3 } ) ; 
 + nonEmpty . setFieldObject ( nonEmpty ) ; 
 + nonEmpty . setFieldList ( new RealmList < AllJavaTypes > ( emptyValues ) ) ; 
 + realm . copyToRealmOrUpdate ( nonEmpty ) ; 
 + 
 + realm . commitTransaction ( ) ; 
 + } 
 + 
 + public void testIsEmpty ( ) { 
 + createIsEmptyDataSet ( testRealm ) ; 
 + for ( ColumnType type : SUPPORTED _ IS _ EMPTY _ TYPES ) { 
 + switch ( type ) { 
 + case STRING : 
 + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ STRING ) . count ( ) ) ; 
 + break ; 
 + case BINARY : 
 + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ BINARY ) . count ( ) ) ; 
 + break ; 
 + case LINK _ LIST : 
 + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ LIST ) . count ( ) ) ; 
 + break ; 
 + default : 
 + fail ( " Unknown type : " + type ) ; 
 + } 
 + } 
 + } 
 + 
 + public void testIsEmptyAcrossLink ( ) { 
 + createIsEmptyDataSet ( testRealm ) ; 
 + for ( ColumnType type : SUPPORTED _ IS _ EMPTY _ TYPES ) { 
 + switch ( type ) { 
 + case STRING : 
 + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ STRING ) . count ( ) ) ; 
 + break ; 
 + case BINARY : 
 + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ BINARY ) . count ( ) ) ; 
 + break ; 
 + case LINK _ LIST : 
 + assertEquals ( 1 , testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ LIST ) . count ( ) ) ; 
 + break ; 
 + default : 
 + fail ( " Unknown type : " + type ) ; 
 + } 
 + } 
 + } 
 + 
 + public void testIsEmptyIllegalFieldTypeThrows ( ) { 
 + for ( ColumnType type : NOT _ SUPPORTED _ IS _ EMPTY _ TYPES ) { 
 + try { 
 + switch ( type ) { 
 + case INTEGER : 
 + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ LONG ) . findAll ( ) ; 
 + break ; 
 + case FLOAT : 
 + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ FLOAT ) . findAll ( ) ; 
 + break ; 
 + case DOUBLE : 
 + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ DOUBLE ) . findAll ( ) ; 
 + break ; 
 + case BOOLEAN : 
 + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ BOOLEAN ) . findAll ( ) ; 
 + break ; 
 + case LINK : 
 + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ OBJECT ) . findAll ( ) ; 
 + break ; 
 + case DATE : 
 + testRealm . where ( AllJavaTypes . class ) . isEmpty ( AllJavaTypes . FIELD _ DATE ) . findAll ( ) ; 
 + break ; 
 + default : 
 + fail ( " Unknown type : " + type ) ; 
 + } 
 + fail ( type + " should throw an exception " ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 + } 
 + } 
 + 
 + public void testIsEmptyInvalidFieldNameThrows ( ) { 
 + String [ ] fieldNames = new String [ ] { null , " " , " foo " , AllJavaTypes . FIELD _ OBJECT + " . foo " } ; 
 + 
 + for ( String fieldName : fieldNames ) { 
 + try { 
 + testRealm . where ( AllJavaTypes . class ) . isEmpty ( fieldName ) . findAll ( ) ; 
 + fail ( ) ; 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 + } 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmQuery . java b / realm / src / main / java / io / realm / RealmQuery . java 
 index d2360f2 . . b86aaca 100644 
 - - - a / realm / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / src / main / java / io / realm / RealmQuery . java 
 @ @ - 18 , 6 + 18 , 7 @ @ package io . realm ; 
 
 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . Date ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 133 , 13 + 134 , 27 @ @ public class RealmQuery < E extends RealmObject > { 
 return arr ; 
 } 
 
 + / * * 
 + * Returns the column indices for the given field name . If a linked field is defined , the column index for 
 + * each 
 + * 
 + * @ param fieldDescription fieldName or link path to a field name . 
 + * @ param validColumnTypes Legal field type for the last field a 
 + * @ return 
 + * / 
 / / TODO : consider another caching strategy so linked classes are included in the cache . 
 - private long [ ] getColumnIndices ( String fieldName , ColumnType fieldType ) { 
 + private long [ ] getColumnIndices ( String fieldDescription , ColumnType . . . validColumnTypes ) { 
 + if ( fieldDescription = = null | | fieldDescription . equals ( " " ) ) { 
 + throw new IllegalArgumentException ( " Non - empty fieldname must be provided " ) ; 
 + } 
 Table table = this . table ; 
 - if ( containsDot ( fieldName ) ) { 
 - String [ ] names = splitString ( fieldName ) ; / / fieldName . split ( " \ \ . " ) ; 
 + boolean checkColumnType = validColumnTypes ! = null & & validColumnTypes . length > 0 ; 
 + if ( containsDot ( fieldDescription ) ) { 
 + 
 + / / Resolve field description down to last field name 
 + String [ ] names = splitString ( fieldDescription ) ; / / fieldName . split ( " \ \ . " ) ; 
 long [ ] columnIndices = new long [ names . length ] ; 
 - for ( int i = 0 ; i < names . length - 1 ; i + + ) { 
 + for ( int i = 0 ; i < names . length - 1 ; i + + ) { 
 long index = table . getColumnIndex ( names [ i ] ) ; 
 if ( index < 0 ) { 
 throw new IllegalArgumentException ( " Invalid query : " + names [ i ] + " does not refer to a class . " ) ; 
 @ @ - 152 , 26 + 167 , 40 @ @ public class RealmQuery < E extends RealmObject > { 
 throw new IllegalArgumentException ( " Invalid query : " + names [ i ] + " does not refer to a class . " ) ; 
 } 
 } 
 - columnIndices [ names . length - 1 ] = table . getColumnIndex ( names [ names . length - 1 ] ) ; 
 - if ( fieldType ! = null & & fieldType ! = table . getColumnType ( columnIndices [ names . length - 1 ] ) ) { 
 + 
 + / / Check if last field name is a valid field 
 + String columnName = names [ names . length - 1 ] ; 
 + long columnIndex = table . getColumnIndex ( columnName ) ; 
 + columnIndices [ names . length - 1 ] = columnIndex ; 
 + if ( columnIndex < 0 ) { 
 + throw new IllegalArgumentException ( columnName + " is not a field name in class " + table . getName ( ) ) ; 
 + } 
 + if ( checkColumnType & & ! isValidType ( table . getColumnType ( columnIndex ) , validColumnTypes ) ) { 
 throw new IllegalArgumentException ( String . format ( " Field ' % s ' : type mismatch . " , names [ names . length - 1 ] ) ) ; 
 } 
 return columnIndices ; 
 } else { 
 - if ( columns . get ( fieldName ) = = null ) { 
 - throw new IllegalArgumentException ( String . format ( " Field ' % s ' does not exist . " , fieldName ) ) ; 
 + if ( columns . get ( fieldDescription ) = = null ) { 
 + throw new IllegalArgumentException ( String . format ( " Field ' % s ' does not exist . " , fieldDescription ) ) ; 
 } 
 - 
 - ColumnType tableColumnType = table . getColumnType ( columns . get ( fieldName ) ) ; 
 - if ( fieldType ! = null & & fieldType ! = tableColumnType ) { 
 + ColumnType tableColumnType = table . getColumnType ( columns . get ( fieldDescription ) ) ; 
 + if ( checkColumnType & & ! isValidType ( tableColumnType , validColumnTypes ) ) { 
 throw new IllegalArgumentException ( String . format ( " Field ' % s ' : type mismatch . Was % s , expected % s . " , 
 - fieldName , fieldType , tableColumnType 
 - ) ) ; 
 + fieldDescription , tableColumnType , Arrays . toString ( validColumnTypes ) ) ) ; 
 } 
 - return new long [ ] { columns . get ( fieldName ) } ; 
 + return new long [ ] { columns . get ( fieldDescription ) } ; 
 } 
 } 
 
 + private boolean isValidType ( ColumnType columnType , ColumnType [ ] validColumnTypes ) { 
 + for ( int i = 0 ; i < validColumnTypes . length ; i + + ) { 
 + if ( validColumnTypes [ i ] = = columnType ) { 
 + return true ; 
 + } 
 + } 
 + return false ; 
 + } 
 + 
 / * * 
 * Check if { @ link io . realm . RealmQuery } is still valid to use i . e . the { @ link io . realm . Realm } 
 * instance hasn ' t been closed and any parent { @ link io . realm . RealmResults } is still valid . 
 @ @ - 202 , 7 + 231 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 * @ see Required for further infomation . 
 * / 
 public RealmQuery < E > isNull ( String fieldName ) { 
 - long columnIndices [ ] = getColumnIndices ( fieldName , null ) ; 
 + long columnIndices [ ] = getColumnIndices ( fieldName ) ; 
 
 / / checking that fieldName has the correct type is done in C + + 
 this . query . isNull ( columnIndices ) ; 
 @ @ - 218 , 7 + 247 , 7 @ @ public class RealmQuery < E extends RealmObject > { 
 * @ see Required for further infomation . 
 * / 
 public RealmQuery < E > isNotNull ( String fieldName ) { 
 - long columnIndices [ ] = getColumnIndices ( fieldName , null ) ; 
 + long columnIndices [ ] = getColumnIndices ( fieldName ) ; 
 
 / / checking that fieldName has the correct type is done in C + + 
 this . query . isNotNull ( columnIndices ) ; 
 @ @ - 1121 , 6 + 1150 , 20 @ @ public class RealmQuery < E extends RealmObject > { 
 return this ; 
 } 
 
 + / * * 
 + * Condition that find values that are considered " empty " , i . e . an empty list , the 0 - length string or byte array . 
 + * 
 + * @ param fieldName The field to compare 
 + * @ return The query object 
 + * @ throws java . lang . IllegalArgumentException If the field name isn ' t valid or its type isn ' t either a RealmList , 
 + * String or byte array . 
 + * / 
 + public RealmQuery < E > isEmpty ( String fieldName ) { 
 + long columnIndices [ ] = getColumnIndices ( fieldName , ColumnType . STRING , ColumnType . BINARY , ColumnType . LINK _ LIST ) ; 
 + this . query . isEmpty ( columnIndices ) ; 
 + return this ; 
 + } 
 + 
 / / Aggregates 
 
 / / Sum 
 @ @ - 1417 , 8 + 1460 , 6 @ @ public class RealmQuery < E extends RealmObject > { 
 return this . query . count ( ) ; 
 } 
 
 - / / Execute 
 - 
 / * * 
 * Find all objects that fulfill the query conditions . 
 * 
 diff - - git a / realm / src / main / java / io / realm / internal / TableQuery . java b / realm / src / main / java / io / realm / internal / TableQuery . java 
 index 88e8a10 . . e263dc4 100644 
 - - - a / realm / src / main / java / io / realm / internal / TableQuery . java 
 + + + b / realm / src / main / java / io / realm / internal / TableQuery . java 
 @ @ - 348 , 6 + 348 , 7 @ @ public class TableQuery implements Closeable { 
 queryValidated = false ; 
 return this ; 
 } 
 + 
 public TableQuery equalTo ( long [ ] columnIndexes , String value ) { 
 nativeEqual ( nativePtr , columnIndexes , value , true ) ; 
 queryValidated = false ; 
 @ @ - 371 , 6 + 372 , 7 @ @ public class TableQuery implements Closeable { 
 queryValidated = false ; 
 return this ; 
 } 
 + 
 public TableQuery beginsWith ( long columnIndices [ ] , String value ) { 
 nativeBeginsWith ( nativePtr , columnIndices , value , true ) ; 
 queryValidated = false ; 
 @ @ - 382 , 6 + 384 , 7 @ @ public class TableQuery implements Closeable { 
 queryValidated = false ; 
 return this ; 
 } 
 + 
 public TableQuery endsWith ( long columnIndices [ ] , String value ) { 
 nativeEndsWith ( nativePtr , columnIndices , value , true ) ; 
 queryValidated = false ; 
 @ @ - 393 , 12 + 396 , 19 @ @ public class TableQuery implements Closeable { 
 queryValidated = false ; 
 return this ; 
 } 
 + 
 public TableQuery contains ( long columnIndices [ ] , String value ) { 
 nativeContains ( nativePtr , columnIndices , value , true ) ; 
 queryValidated = false ; 
 return this ; 
 } 
 
 + public TableQuery isEmpty ( long [ ] columnIndices ) { 
 + nativeIsEmpty ( nativePtr , columnIndices ) ; 
 + queryValidated = false ; 
 + return this ; 
 + } 
 + 
 / / Searching methods . 
 
 public long find ( long fromTableRow ) { 
 @ @ - 679 , 6 + 689 , 7 @ @ public class TableQuery implements Closeable { 
 private native void nativeBeginsWith ( long nativeQueryPtr , long columnIndices [ ] , String value , boolean caseSensitive ) ; 
 private native void nativeEndsWith ( long nativeQueryPtr , long columnIndices [ ] , String value , boolean caseSensitive ) ; 
 private native void nativeContains ( long nativeQueryPtr , long columnIndices [ ] , String value , boolean caseSensitive ) ; 
 + private native void nativeIsEmpty ( long nativePtr , long [ ] columnIndices ) ; 
 private native long nativeFind ( long nativeQueryPtr , long fromTableRow ) ; 
 private native long nativeFindAll ( long nativeQueryPtr , long start , long end , long limit ) ; 
 private native long nativeSumInt ( long nativeQueryPtr , long columnIndex , long start , long end , long limit ) ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 8f07bbb . . 3350c1a 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 15 , 10 + 15 , 8 @ @ 
 * / 
 package io . realm ; 
 
 - import android . content . Context ; 
 import android . test . AndroidTestCase ; 
 
 - import java . io . File ; 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . Date ; 
 @ @ - 53 , 8 + 51 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 private final static String FIELD _ LONG _ GREEK _ CHAR = " Δ έ λ τ α " ; 
 private final static String FIELD _ FLOAT _ KOREAN _ CHAR = " 베 타 " ; 
 private final static String FIELD _ FLOAT _ GREEK _ CHAR = " β ή τ α " ; 
 - private final static String FIELD _ BYTE = " columnBinary " ; 
 - private final static String FIELD _ DOG = " columnRealmObject " ; 
 + / / private final static String FIELD _ BYTE = " columnBinary " ; 
 + / / private final static String FIELD _ DOG = " columnRealmObject " ; 
 
 protected void setColumnData ( ) { 
 columnData . add ( 0 , FIELD _ BOOLEAN ) ; 
 @ @ - 70 , 6 + 68 , 15 @ @ public class RealmTest extends AndroidTestCase { 
 Realm . deleteRealmFile ( getContext ( ) ) ; 
 testRealm = Realm . getInstance ( getContext ( ) ) ; 
 
 + / / populateTestRealm ( ) ; 
 + } 
 + 
 + @ Override 
 + protected void tearDown ( ) throws Exception { 
 + if ( testRealm ! = null ) testRealm . close ( ) ; 
 + } 
 + 
 + private void populateTestRealm ( ) { 
 testRealm . beginTransaction ( ) ; 
 testRealm . allObjects ( AllTypes . class ) . clear ( ) ; 
 testRealm . allObjects ( NonLatinFieldNames . class ) . clear ( ) ; 
 @ @ - 92 , 52 + 99 , 53 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 
 - private final static int BACKGROUND _ COMMIT _ TEST _ DATA _ SET _ SIZE = 5 ; 
 - 
 - 
 public void testRealmCache ( ) { 
 - assertEquals ( testRealm , Realm . getInstance ( getContext ( ) ) ) ; 
 + Realm newRealm = Realm . getInstance ( getContext ( ) ) ; 
 + assertEquals ( testRealm , newRealm ) ; 
 + newRealm . close ( ) ; 
 } 
 
 public void testShouldCreateRealm ( ) { 
 - Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - assertNotNull ( " Realm . getInstance unexpectedly returns null " , realm ) ; 
 - assertTrue ( " Realm . getInstance does not contain expected table " , realm . contains ( AllTypes . class ) ) ; 
 + assertNotNull ( " Realm . getInstance unexpectedly returns null " , testRealm ) ; 
 + assertTrue ( " Realm . getInstance does not contain expected table " , testRealm . contains ( AllTypes . class ) ) ; 
 } 
 
 public void testShouldNotFailCreateRealmWithNullContext ( ) { 
 - Context c = null ; / / throws when c . getDirectory ( ) is called ; has nothing to do with Realm 
 - 
 + Realm realm = null ; 
 try { 
 - Realm realm = Realm . getInstance ( c ) ; 
 + realm = Realm . getInstance ( null ) ; / / throws when c . getDirectory ( ) is called ; 
 + / / has nothing to do with Realm 
 fail ( " Should throw an exception " ) ; 
 - } catch ( NullPointerException e ) { 
 + } catch ( NullPointerException ignore ) { 
 + } finally { 
 + if ( realm ! = null ) { 
 + realm . close ( ) ; 
 + } 
 } 
 - 
 } 
 
 / / Table getTable ( Class < ? > clazz ) 
 public void testShouldGetTable ( ) { 
 Table table = testRealm . getTable ( AllTypes . class ) ; 
 + populateTestRealm ( ) ; 
 assertNotNull ( " getTable is returning a null Table object " , table ) ; 
 assertEquals ( " Unexpected query result after getTable " , TEST _ DATA _ SIZE , table . count ( table . getColumnIndex ( FIELD _ DOUBLE ) , 3 . 1415 ) ) ; 
 } 
 
 / / < E > void remove ( Class < E > clazz , long objectIndex ) 
 public void testShouldRemoveRow ( ) { 
 - 
 + populateTestRealm ( ) ; 
 testRealm . beginTransaction ( ) ; 
 testRealm . remove ( AllTypes . class , 0 ) ; 
 testRealm . commitTransaction ( ) ; 
 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 assertEquals ( " Realm . delete has not deleted record correctly " , TEST _ DATA _ SIZE - 1 , resultList . size ( ) ) ; 
 - 
 } 
 
 / / < E extends RealmObject > E get ( Class < E > clazz , long rowIndex ) 
 public void testShouldGetObject ( ) { 
 - 
 + populateTestRealm ( ) ; 
 AllTypes allTypes = testRealm . get ( AllTypes . class , 0 ) ; 
 assertNotNull ( " get has returned null object " , allTypes ) ; 
 assertEquals ( " get has returned wrong object " , " test data 0 " , allTypes . getColumnString ( ) ) ; 
 @ @ - 146 , 27 + 154 , 26 @ @ public class RealmTest extends AndroidTestCase { 
 / / boolean contains ( Class < ? > clazz ) 
 public void testShouldContainTable ( ) { 
 testRealm . beginTransaction ( ) ; 
 - Dog dog = testRealm . createObject ( Dog . class ) ; 
 + testRealm . createObject ( Dog . class ) ; 
 testRealm . commitTransaction ( ) ; 
 assertTrue ( " contains returns false for newly created table " , testRealm . contains ( Dog . class ) ) ; 
 } 
 
 / / boolean contains ( Class < ? > clazz ) 
 public void testShouldNotContainTable ( ) { 
 - 
 assertFalse ( " contains returns true for non - existing table " , testRealm . contains ( RealmTest . class ) ) ; 
 } 
 
 / / < E extends RealmObject > RealmQuery < E > where ( Class < E > clazz ) 
 public void testShouldReturnResultSet ( ) { 
 - 
 + populateTestRealm ( ) ; 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . findAll ( ) ; 
 - 
 assertEquals ( " Realm . get is returning wrong number of objects " , TEST _ DATA _ SIZE , resultList . size ( ) ) ; 
 } 
 
 / / Note that this test is relying on the values set while initializing the test dataset 
 public void testQueriesResults ( ) throws IOException { 
 + populateTestRealm ( ) ; 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ LONG , 33 ) . findAll ( ) ; 
 assertEquals ( " ResultList . where not returning expected result " , 1 , resultList . size ( ) ) ; 
 
 @ @ - 184 , 142 + 191 , 112 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testQueriesWithDataTypes ( ) throws IOException { 
 - RealmResults < AllTypes > resultList = null ; 
 + populateTestRealm ( ) ; 
 setColumnData ( ) ; 
 
 for ( int i = 0 ; i < columnData . size ( ) ; i + + ) { 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , true ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , true ) . findAll ( ) ; 
 if ( i ! = 0 ) { 
 fail ( " Realm . where should fail with illegal argument " ) ; 
 } 
 - } catch ( IllegalArgumentException e ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , new Date ( ) ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , new Date ( ) ) . findAll ( ) ; 
 if ( i ! = 1 ) { 
 fail ( " Realm . where should fail with illegal argument " ) ; 
 } 
 - } catch ( IllegalArgumentException e ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 13 . 37d ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 13 . 37d ) . findAll ( ) ; 
 if ( i ! = 2 ) { 
 fail ( " Realm . where should fail with illegal argument " ) ; 
 } 
 - } catch ( IllegalArgumentException e ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 13 . 3711f ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 13 . 3711f ) . findAll ( ) ; 
 if ( i ! = 3 ) { 
 fail ( " Realm . where should fail with illegal argument " ) ; 
 } 
 - } catch ( IllegalArgumentException e ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , " test " ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , " test " ) . findAll ( ) ; 
 if ( i ! = 4 ) { 
 fail ( " Realm . where should fail with illegal argument " ) ; 
 } 
 - } catch ( IllegalArgumentException e ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 1337 ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( columnData . get ( i ) , 1337 ) . findAll ( ) ; 
 if ( i ! = 5 ) { 
 fail ( " Realm . where should fail with illegal argument " ) ; 
 } 
 - } catch ( IllegalArgumentException e ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 } 
 
 public void testQueriesFailWithInvalidDataTypes ( ) throws IOException { 
 - RealmResults < AllTypes > resultList = null ; 
 - 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 33 ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 33 ) . findAll ( ) ; 
 fail ( " Invalid field name " ) ; 
 - } catch ( Exception e ) { 
 + } catch ( Exception ignored ) { 
 } 
 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , " test " ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , " test " ) . findAll ( ) ; 
 fail ( " Invalid field name " ) ; 
 - } catch ( Exception e ) { 
 + } catch ( Exception ignored ) { 
 } 
 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , true ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , true ) . findAll ( ) ; 
 fail ( " Invalid field name " ) ; 
 - } catch ( Exception e ) { 
 + } catch ( Exception ignored ) { 
 } 
 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 3 . 1415d ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 3 . 1415d ) . findAll ( ) ; 
 fail ( " Invalid field name " ) ; 
 - } catch ( Exception e ) { 
 + } catch ( Exception ignored ) { 
 } 
 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 3 . 1415f ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( " invalidcolumnname " , 3 . 1415f ) . findAll ( ) ; 
 fail ( " Invalid field name " ) ; 
 - } catch ( Exception e ) { 
 + } catch ( Exception ignored ) { 
 } 
 } 
 
 public void testQueriesFailWithNullQueryValue ( ) throws IOException { 
 - RealmResults < AllTypes > resultList = null ; 
 - 
 - String nullString = null ; 
 - Float nullFloat = null ; 
 - Long nullLong = null ; 
 - Boolean nullBoolean = null ; 
 - 
 try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ STRING , nullString ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ STRING , ( String ) null ) . findAll ( ) ; 
 fail ( " Realm . where should fail with illegal argument " ) ; 
 - } catch ( IllegalArgumentException e ) { 
 - } 
 - 
 - try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ LONG , nullLong ) . findAll ( ) ; 
 - fail ( " Realm . where should fail with illegal argument " ) ; 
 - 
 - } catch ( IllegalArgumentException e ) { 
 - } catch ( NullPointerException e ) { 
 - } 
 - 
 - try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ BOOLEAN , nullBoolean ) . findAll ( ) ; 
 - fail ( " Realm . where should fail with illegal argument " ) ; 
 - } catch ( IllegalArgumentException e ) { 
 - } catch ( NullPointerException e ) { 
 - } 
 - 
 - try { 
 - resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ FLOAT , nullFloat ) . findAll ( ) ; 
 - fail ( " Realm . where should fail with illegal argument " ) ; 
 - } catch ( IllegalArgumentException e ) { 
 - } catch ( NullPointerException e ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 
 / / < E extends RealmObject > RealmTableOrViewList < E > allObjects ( Class < E > clazz ) 
 public void testShouldReturnTableOrViewList ( ) { 
 + populateTestRealm ( ) ; 
 RealmResults < AllTypes > resultList = testRealm . allObjects ( AllTypes . class ) ; 
 assertEquals ( " Realm . get is returning wrong result set " , TEST _ DATA _ SIZE , resultList . size ( ) ) ; 
 } 
 
 / / void beginTransaction ( ) 
 public void testBeginTransaction ( ) throws IOException { 
 + populateTestRealm ( ) ; 
 
 testRealm . beginTransaction ( ) ; 
 - 
 AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; 
 allTypes . setColumnFloat ( 3 . 1415f ) ; 
 allTypes . setColumnString ( " a unique string " ) ; 
 @ @ - 352 , 12 + 329 , 11 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 / / Starting a transaction on the wrong thread will fail 
 - public boolean transactionMethodWrongThread ( final TransactionMethod method ) throws InterruptedException , ExecutionException { 
 - final Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - 
 + private boolean transactionMethodWrongThread ( final TransactionMethod method ) throws InterruptedException , 
 + ExecutionException { 
 if ( method ! = TransactionMethod . METHOD _ BEGIN ) { 
 - realm . beginTransaction ( ) ; 
 - Dog dog = realm . createObject ( Dog . class ) ; / / FIXME : Empty transactions cannot be cancelled 
 + testRealm . beginTransaction ( ) ; 
 + testRealm . createObject ( Dog . class ) ; / / FIXME : Empty transactions cannot be cancelled 
 } 
 ExecutorService executorService = Executors . newSingleThreadExecutor ( ) ; 
 Future < Boolean > future = executorService . submit ( new Callable < Boolean > ( ) { 
 @ @ - 366 , 13 + 342 , 13 @ @ public class RealmTest extends AndroidTestCase { 
 try { 
 switch ( method ) { 
 case METHOD _ BEGIN : 
 - realm . beginTransaction ( ) ; 
 + testRealm . beginTransaction ( ) ; 
 break ; 
 case METHOD _ COMMIT : 
 - realm . commitTransaction ( ) ; 
 + testRealm . commitTransaction ( ) ; 
 break ; 
 case METHOD _ CANCEL : 
 - realm . cancelTransaction ( ) ; 
 + testRealm . cancelTransaction ( ) ; 
 break ; 
 } 
 return false ; 
 @ @ - 384 , 7 + 360 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 
 boolean result = future . get ( ) ; 
 if ( result & & method ! = TransactionMethod . METHOD _ BEGIN ) { 
 - realm . cancelTransaction ( ) ; 
 + testRealm . cancelTransaction ( ) ; 
 } 
 return result ; 
 } 
 @ @ - 397 , 6 + 373 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 
 / / void commitTransaction ( ) 
 public void testCommitTransaction ( ) { 
 + populateTestRealm ( ) ; 
 + 
 testRealm . beginTransaction ( ) ; 
 AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; 
 allTypes . setColumnBoolean ( true ) ; 
 @ @ - 408 , 22 + 386 , 25 @ @ public class RealmTest extends AndroidTestCase { 
 
 
 public void testCancelTransaction ( ) { 
 + populateTestRealm ( ) ; 
 + 
 testRealm . beginTransaction ( ) ; 
 - AllTypes allTypes = testRealm . createObject ( AllTypes . class ) ; 
 + testRealm . createObject ( AllTypes . class ) ; 
 testRealm . cancelTransaction ( ) ; 
 assertEquals ( TEST _ DATA _ SIZE , testRealm . allObjects ( AllTypes . class ) . size ( ) ) ; 
 
 try { 
 testRealm . cancelTransaction ( ) ; 
 fail ( ) ; 
 - } catch ( IllegalStateException ignored ) { } 
 + } catch ( IllegalStateException ignored ) { 
 + } 
 } 
 
 / / void clear ( Class < ? > classSpec ) 
 public void testClassClear ( ) { 
 + populateTestRealm ( ) ; 
 
 / / Currently clear will not work outside a transaction : 
 - 
 testRealm . beginTransaction ( ) ; 
 testRealm . clear ( AllTypes . class ) ; 
 testRealm . commitTransaction ( ) ; 
 @ @ - 434 , 11 + 415 , 11 @ @ public class RealmTest extends AndroidTestCase { 
 
 / / void clear ( Class < ? > classSpec ) 
 public void testClassClearWithTwoTables ( ) { 
 - testRealm . beginTransaction ( ) ; 
 + populateTestRealm ( ) ; 
 
 + testRealm . beginTransaction ( ) ; 
 Dog dog = testRealm . createObject ( Dog . class ) ; 
 dog . setName ( " Castro " ) ; 
 - 
 testRealm . commitTransaction ( ) ; 
 
 / / NOTE : 
 @ @ - 466 , 6 + 447 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 
 / / int getVersion ( ) 
 public void testGetVersion ( ) throws IOException { 
 + populateTestRealm ( ) ; 
 
 long version = testRealm . getVersion ( ) ; 
 
 @ @ - 484 , 21 + 466 , 22 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testShouldFailOutsideTransaction ( ) { 
 - 
 / / These API calls should fail outside a Transaction : 
 try { 
 - AllTypes aT = testRealm . createObject ( AllTypes . class ) ; 
 + testRealm . createObject ( AllTypes . class ) ; 
 fail ( " Realm . createObject should fail outside write transaction " ) ; 
 - } catch ( IllegalStateException e ) { 
 + } catch ( IllegalStateException ignored ) { 
 } 
 try { 
 testRealm . remove ( AllTypes . class , 0 ) ; 
 fail ( " Realm . remove should fail outside write transaction " ) ; 
 - } catch ( IllegalStateException e ) { 
 + } catch ( IllegalStateException ignored ) { 
 } 
 } 
 
 public void testRealmQueryBetween ( ) { 
 + populateTestRealm ( ) ; 
 + 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . between ( FIELD _ LONG , 0 , 9 ) . findAll ( ) ; 
 assertEquals ( 10 , resultList . size ( ) ) ; 
 
 @ @ - 513 , 6 + 496 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testRealmQueryGreaterThan ( ) { 
 + populateTestRealm ( ) ; 
 + 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . greaterThan ( FIELD _ FLOAT , 10 . 234567f ) . findAll ( ) ; 
 assertEquals ( TEST _ DATA _ SIZE - 10 , resultList . size ( ) ) ; 
 
 @ @ - 526 , 6 + 511 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 
 
 public void testRealmQueryGreaterThanOrEqualTo ( ) { 
 + populateTestRealm ( ) ; 
 + 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . greaterThanOrEqualTo ( FIELD _ FLOAT , 10 . 234567f ) . findAll ( ) ; 
 assertEquals ( TEST _ DATA _ SIZE - 9 , resultList . size ( ) ) ; 
 
 @ @ - 540 , 6 + 527 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testRealmQueryOr ( ) { 
 + populateTestRealm ( ) ; 
 + 
 RealmQuery < AllTypes > query = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ FLOAT , 31 . 234567f ) ; 
 RealmResults < AllTypes > resultList = query . or ( ) . between ( FIELD _ LONG , 1 , 20 ) . findAll ( ) ; 
 assertEquals ( 21 , resultList . size ( ) ) ; 
 @ @ - 552 , 6 + 541 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testRealmQueryImplicitAnd ( ) { 
 + populateTestRealm ( ) ; 
 + 
 RealmQuery < AllTypes > query = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ FLOAT , 31 . 234567f ) ; 
 RealmResults < AllTypes > resultList = query . between ( FIELD _ LONG , 1 , 10 ) . findAll ( ) ; 
 assertEquals ( 0 , resultList . size ( ) ) ; 
 @ @ - 562 , 6 + 553 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testRealmQueryLessThan ( ) { 
 + populateTestRealm ( ) ; 
 + 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . lessThan ( FIELD _ FLOAT , 31 . 234567f ) . findAll ( ) ; 
 assertEquals ( 30 , resultList . size ( ) ) ; 
 RealmQuery < AllTypes > query = testRealm . where ( AllTypes . class ) . lessThan ( FIELD _ FLOAT , 31 . 234567f ) ; 
 @ @ - 570 , 6 + 563 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testRealmQueryLessThanOrEqual ( ) { 
 + populateTestRealm ( ) ; 
 + 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . lessThanOrEqualTo ( FIELD _ FLOAT , 31 . 234567f ) . findAll ( ) ; 
 assertEquals ( 31 , resultList . size ( ) ) ; 
 resultList = testRealm . where ( AllTypes . class ) . lessThanOrEqualTo ( FIELD _ FLOAT , 31 . 234567f ) . between ( FIELD _ LONG , 11 , 20 ) . findAll ( ) ; 
 @ @ - 577 , 6 + 572 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testRealmQueryEqualTo ( ) { 
 + populateTestRealm ( ) ; 
 + 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . equalTo ( FIELD _ FLOAT , 31 . 234567f ) . findAll ( ) ; 
 assertEquals ( 1 , resultList . size ( ) ) ; 
 resultList = testRealm . where ( AllTypes . class ) . greaterThan ( FIELD _ FLOAT , 11 . 0f ) . equalTo ( FIELD _ LONG , 10 ) . findAll ( ) ; 
 @ @ - 586 , 6 + 583 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testRealmQueryEqualToNonLatinCharacters ( ) { 
 + populateTestRealm ( ) ; 
 + 
 RealmResults < NonLatinFieldNames > resultList = testRealm . where ( NonLatinFieldNames . class ) . equalTo ( FIELD _ LONG _ KOREAN _ CHAR , 13 ) . findAll ( ) ; 
 assertEquals ( 1 , resultList . size ( ) ) ; 
 resultList = testRealm . where ( NonLatinFieldNames . class ) . greaterThan ( FIELD _ FLOAT _ KOREAN _ CHAR , 11 . 0f ) . equalTo ( FIELD _ LONG _ KOREAN _ CHAR , 10 ) . findAll ( ) ; 
 @ @ - 602 , 6 + 601 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 public void testRealmQueryNotEqualTo ( ) { 
 + populateTestRealm ( ) ; 
 + 
 RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . notEqualTo ( FIELD _ LONG , 31 ) . findAll ( ) ; 
 assertEquals ( TEST _ DATA _ SIZE - 1 , resultList . size ( ) ) ; 
 resultList = testRealm . where ( AllTypes . class ) . notEqualTo ( FIELD _ FLOAT , 11 . 234567f ) . equalTo ( FIELD _ LONG , 10 ) . findAll ( ) ; 
 @ @ - 610 , 42 + 611 , 14 @ @ public class RealmTest extends AndroidTestCase { 
 assertEquals ( 1 , resultList . size ( ) ) ; 
 } 
 
 - public void testQueryWithNonExistingField ( ) { 
 + public void testQueryWithNonExistingField ( ) { 
 try { 
 - RealmResults < AllTypes > resultList = testRealm . where ( AllTypes . class ) . equalTo ( " NotAField " , 13 ) . findAll ( ) ; 
 + testRealm . where ( AllTypes . class ) . equalTo ( " NotAField " , 13 ) . findAll ( ) ; 
 fail ( " Should throw exception " ) ; 
 - } catch ( IllegalArgumentException e ) { 
 - 
 + } catch ( IllegalArgumentException ignored ) { 
 } 
 } 
 
 - public void createAndTestFilename ( String language , String fileName ) { 
 - Realm . deleteRealmFile ( getContext ( ) , fileName ) ; 
 - Realm realm1 = Realm . getInstance ( getContext ( ) , fileName ) ; 
 - realm1 . beginTransaction ( ) ; 
 - Dog dog1 = realm1 . createObject ( Dog . class ) ; 
 - dog1 . setName ( " Rex " ) ; 
 - realm1 . commitTransaction ( ) ; 
 - 
 - File file = new File ( getContext ( ) . getFilesDir ( ) + " / " + fileName ) ; 
 - assertTrue ( language , file . exists ( ) ) ; 
 - 
 - Realm realm2 = Realm . getInstance ( getContext ( ) , fileName ) ; 
 - Dog dog2 = realm2 . allObjects ( Dog . class ) . first ( ) ; 
 - assertEquals ( language , " Rex " , dog2 . getName ( ) ) ; 
 - } 
 - 
 - public void testCreateFile ( ) { 
 - createAndTestFilename ( " American " , " Washington " ) ; 
 - createAndTestFilename ( " Danish " , " K ø benhavn " ) ; 
 - createAndTestFilename ( " Russian " , " М о с к в а " ) ; 
 - createAndTestFilename ( " Greek " , " Α θ ή ν α " ) ; 
 - createAndTestFilename ( " Chinese " , " 北 京 市 " ) ; 
 - createAndTestFilename ( " Korean " , " 서 울 시 " ) ; 
 - createAndTestFilename ( " Arabic " , " ا ل ر ي ا ض " ) ; 
 - createAndTestFilename ( " India " , " न ई द ि ल ् ल ी " ) ; 
 - createAndTestFilename ( " Japanese " , " 東 京 都 " ) ; 
 - } 
 
 public void testReferenceCounting ( ) { 
 / / At this point reference count should be one because of the setUp method 
 @ @ - 656 , 11 + 629 , 18 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 
 / / Raise the reference 
 - Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 - realm . close ( ) ; 
 + Realm realm = null ; 
 + try { 
 + realm = Realm . getInstance ( getContext ( ) ) ; 
 + } finally { 
 + if ( realm ! = null ) realm . close ( ) ; 
 + } 
 + 
 try { 
 - / / This should not fail because the reference is now 2 
 - realm . where ( AllTypes . class ) . count ( ) ; 
 + / / This should not fail because the reference is now 1 
 + if ( realm ! = null ) { 
 + realm . where ( AllTypes . class ) . count ( ) ; 
 + } 
 } catch ( IllegalStateException e ) { 
 fail ( ) ; 
 } 
 @ @ - 669 , 7 + 649 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 try { 
 testRealm . where ( AllTypes . class ) . count ( ) ; 
 fail ( ) ; 
 - } catch ( IllegalStateException ignored ) { } 
 - 
 + } catch ( IllegalStateException ignored ) { 
 + } 
 } 
 }
