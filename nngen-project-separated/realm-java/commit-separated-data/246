BLEU SCORE: 0.11598118436136108

TEST MSG: Listeners and LinkingObjects
GENERATED MSG: aAInitial dataset for a Realm

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> index b44bcc8 . . 4ac5b15 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> + import io . realm . entities . BacklinksSource ; <nl> + import io . realm . entities . BacklinksTarget ; <nl> import io . realm . entities . Cat ; <nl> import io . realm . entities . pojo . AllTypesRealmModel ; <nl> import io . realm . rule . RunInLooperThread ; <nl> @ @ - 35 , 6 + 37 , 7 @ @ import io . realm . rule . TestRealmConfigurationFactory ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> @ RunWith ( AndroidJUnit4 . class ) <nl> public class RealmChangeListenerTests { <nl> @ @ - 225 , 4 + 228 , 75 @ @ public class RealmChangeListenerTests { <nl> allTypes . setString ( AllTypes . FIELD _ STRING , " test data 1 " ) ; <nl> dynamicRealm . commitTransaction ( ) ; <nl> } <nl> + <nl> + / / 1 . adding a listener on the children <nl> + / / 2 . modify parent <nl> + / / 3 . at least one child is modified <nl> + / / 4 . listener is not triggered ( backlink ) <nl> + / / FIXME : will break when https : / / github . com / realm / realm - java / issues / 4875 is solved <nl> + @ Test <nl> + @ RunTestInLooperThread <nl> + public void listenerOnChildChangeParent ( ) { <nl> + final long [ ] nCalls = { 0 } ; <nl> + final Realm realm = Realm . getInstance ( looperThread . getConfiguration ( ) ) ; <nl> + TestHelper . populateLinkedDataSet ( realm ) ; <nl> + <nl> + RealmResults < BacklinksTarget > backlinksTargets = realm . where ( BacklinksTarget . class ) . findAll ( ) ; <nl> + assertEquals ( 3 , backlinksTargets . size ( ) ) ; <nl> + assertTrue ( backlinksTargets . last ( ) . getParents ( ) . isEmpty ( ) ) ; <nl> + assertEquals ( 2 , backlinksTargets . first ( ) . getParents ( ) . size ( ) ) ; <nl> + <nl> + looperThread . keepStrongReference ( backlinksTargets ) ; <nl> + <nl> + backlinksTargets . addChangeListener ( new RealmChangeListener < RealmResults < BacklinksTarget > > ( ) { <nl> + @ Override <nl> + public void onChange ( RealmResults < BacklinksTarget > backlinksTargets ) { <nl> + nCalls [ 0 ] + + ; <nl> + } <nl> + } ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + BacklinksTarget target = backlinksTargets . last ( ) ; <nl> + realm . where ( BacklinksSource . class ) . findFirst ( ) . setChild ( target ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + / / backlinks are updated <nl> + assertEquals ( 1 , backlinksTargets . last ( ) . getParents ( ) . size ( ) ) ; <nl> + assertEquals ( 1 , backlinksTargets . first ( ) . getParents ( ) . size ( ) ) ; <nl> + assertEquals ( 0 , nCalls [ 0 ] ) ; <nl> + realm . close ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> + <nl> + / / 1 . adding a listener if on the parent <nl> + / / 2 . modify child <nl> + / / 3 . listener is triggered ( forward link ) <nl> + @ Test @ RunTestInLooperThread <nl> + public void listenerOnParentChangeChild ( ) { <nl> + final long [ ] nCalls = { 0 } ; <nl> + final Realm realm = Realm . getInstance ( looperThread . getConfiguration ( ) ) ; <nl> + TestHelper . populateLinkedDataSet ( realm ) ; <nl> + <nl> + RealmResults < BacklinksSource > backlinksSources = realm . where ( BacklinksSource . class ) . findAll ( ) ; <nl> + assertEquals ( 4 , backlinksSources . size ( ) ) ; <nl> + <nl> + looperThread . keepStrongReference ( backlinksSources ) ; <nl> + backlinksSources . addChangeListener ( new RealmChangeListener < RealmResults < BacklinksSource > > ( ) { <nl> + @ Override <nl> + public void onChange ( RealmResults < BacklinksSource > backlinksSources ) { <nl> + nCalls [ 0 ] + + ; <nl> + } <nl> + } ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + BacklinksTarget backlinksTarget = realm . where ( BacklinksTarget . class ) . findFirst ( ) ; <nl> + backlinksTarget . setId ( 42 ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + assertEquals ( 42 , backlinksSources . first ( ) . getChild ( ) . getId ( ) ) ; <nl> + assertEquals ( 1 , nCalls [ 0 ] ) ; <nl> + <nl> + realm . close ( ) ; <nl> + looperThread . testComplete ( ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> index 469de59 . . a0e805d 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java <nl> @ @ - 33 , 7 + 33 , 6 @ @ import java . io . InputStreamReader ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> - import java . nio . ByteBuffer ; <nl> import java . nio . charset . Charset ; <nl> import java . security . MessageDigest ; <nl> import java . security . NoSuchAlgorithmException ; <nl> @ @ - 48 , 6 + 47 , 8 @ @ import java . util . concurrent . atomic . AtomicReference ; <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . AllTypesPrimaryKey ; <nl> import io . realm . entities . AnnotationIndexTypes ; <nl> + import io . realm . entities . BacklinksSource ; <nl> + import io . realm . entities . BacklinksTarget ; <nl> import io . realm . entities . NullTypes ; <nl> import io . realm . entities . PrimaryKeyAsBoxedByte ; <nl> import io . realm . entities . PrimaryKeyAsBoxedInteger ; <nl> @ @ - 1227 , 4 + 1228 , 36 @ @ public class TestHelper { <nl> return false ; <nl> } <nl> } <nl> + <nl> + public static void populateLinkedDataSet ( Realm realm ) { <nl> + realm . beginTransaction ( ) ; <nl> + realm . delete ( BacklinksSource . class ) ; <nl> + realm . delete ( BacklinksTarget . class ) ; <nl> + <nl> + BacklinksTarget target1 = realm . createObject ( BacklinksTarget . class ) ; <nl> + target1 . setId ( 1 ) ; <nl> + <nl> + BacklinksTarget target2 = realm . createObject ( BacklinksTarget . class ) ; <nl> + target2 . setId ( 2 ) ; <nl> + <nl> + BacklinksTarget target3 = realm . createObject ( BacklinksTarget . class ) ; <nl> + target3 . setId ( 3 ) ; <nl> + <nl> + BacklinksSource source1 = realm . createObject ( BacklinksSource . class ) ; <nl> + source1 . setName ( " 1 " ) ; <nl> + source1 . setChild ( target1 ) ; <nl> + BacklinksSource source2 = realm . createObject ( BacklinksSource . class ) ; <nl> + source2 . setName ( " 2 " ) ; <nl> + source2 . setChild ( target2 ) ; <nl> + <nl> + BacklinksSource source3 = realm . createObject ( BacklinksSource . class ) ; <nl> + source3 . setName ( " 3 " ) ; <nl> + <nl> + BacklinksSource source4 = realm . createObject ( BacklinksSource . class ) ; <nl> + source4 . setName ( " 4 " ) ; <nl> + source4 . setChild ( target1 ) ; <nl> + <nl> + realm . commitTransaction ( ) ; <nl> + } <nl> + <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> index 780834a . . 87e4106 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java <nl> @ @ - 16 , 6 + 16 , 8 @ @ <nl> <nl> package io . realm ; <nl> <nl> + import android . content . Context ; <nl> + import android . support . test . InstrumentationRegistry ; <nl> import android . support . test . runner . AndroidJUnit4 ; <nl> import android . test . MoreAsserts ; <nl> <nl> @ @ - 52 , 8 + 54 , 13 @ @ import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertNotSame ; <nl> + import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> + import static org . mockito . Mockito . verify ; <nl> + import static org . mockito . Mockito . never ; <nl> + import static org . mockito . Mockito . times ; <nl> + import static org . mockito . Mockito . mock ; <nl> <nl> @ RunWith ( AndroidJUnit4 . class ) <nl> public class RealmConfigurationTests { <nl> @ @ - 673 , 4 + 680 , 103 @ @ public class RealmConfigurationTests { <nl> assertNotNull ( configuration2 . getRxFactory ( ) ) ; <nl> assertFalse ( configuration2 . getRxFactory ( ) = = dummyFactory ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void initialDataTransactionEqual ( ) { <nl> + final Realm . Transaction transaction = new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( final Realm realm ) { <nl> + } <nl> + } ; <nl> + <nl> + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) <nl> + . initialData ( transaction ) <nl> + . build ( ) ; <nl> + <nl> + assertEquals ( transaction , configuration . getInitialDataTransaction ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void initialDataTransactionNull ( ) { <nl> + assertNull ( defaultConfig . getInitialDataTransaction ( ) ) ; <nl> + <nl> + realm = Realm . getInstance ( defaultConfig ) ; <nl> + assertTrue ( realm . isEmpty ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void initialDataTransactionNotNull ( ) { <nl> + / / Remove default instance <nl> + Realm . deleteRealm ( defaultConfig ) ; <nl> + <nl> + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) <nl> + . initialData ( new Realm . Transaction ( ) { <nl> + @ Override <nl> + public void execute ( final Realm realm ) { <nl> + realm . createObject ( AllTypes . class ) ; <nl> + realm . createObject ( Owner . class ) . setCat ( realm . createObject ( Cat . class ) ) ; <nl> + } <nl> + } ) . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + <nl> + / / First time check for initial data <nl> + assertEquals ( 1 , realm . where ( AllTypes . class ) . count ( ) ) ; <nl> + assertEquals ( 1 , realm . where ( Owner . class ) . count ( ) ) ; <nl> + assertEquals ( 1 , realm . where ( Cat . class ) . count ( ) ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + realm . delete ( AllTypes . class ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + assertEquals ( 0 , realm . where ( AllTypes . class ) . count ( ) ) ; <nl> + <nl> + realm . close ( ) ; <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + / / Check if there is still the same data <nl> + assertEquals ( 0 , realm . where ( AllTypes . class ) . count ( ) ) ; <nl> + assertEquals ( 1 , realm . where ( Owner . class ) . count ( ) ) ; <nl> + assertEquals ( 1 , realm . where ( Cat . class ) . count ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void initialDataTransactionExecutionCount ( ) { <nl> + / / Remove default instance <nl> + Realm . deleteRealm ( defaultConfig ) ; <nl> + <nl> + Realm . Transaction transaction = mock ( Realm . Transaction . class ) ; <nl> + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) <nl> + . initialData ( transaction ) <nl> + . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + realm . close ( ) ; <nl> + verify ( transaction , times ( 1 ) ) . execute ( realm ) ; <nl> + <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + realm . close ( ) ; <nl> + verify ( transaction , never ( ) ) . execute ( realm ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void initialDataTransactionAssetFile ( ) throws IOException { <nl> + / / Remove default instance <nl> + Realm . deleteRealm ( defaultConfig ) ; <nl> + <nl> + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; <nl> + configFactory . copyRealmFromAssets ( context , " default - before - migration . realm " , Realm . DEFAULT _ REALM _ NAME ) ; <nl> + assertTrue ( new File ( configFactory . getRoot ( ) , Realm . DEFAULT _ REALM _ NAME ) . exists ( ) ) ; <nl> + <nl> + Realm . Transaction transaction = mock ( Realm . Transaction . class ) ; <nl> + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) <nl> + / / Just reuse existing file and set right schema <nl> + . schemaVersion ( 0 ) <nl> + . schema ( AllTypes . class ) <nl> + . initialData ( transaction ) <nl> + . build ( ) ; <nl> + <nl> + realm = Realm . getInstance ( configuration ) ; <nl> + realm . close ( ) ; <nl> + verify ( transaction , never ( ) ) . execute ( realm ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index ead89af . . c79abe9 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 316 , 6 + 316 , 13 @ @ public final class Realm extends BaseRealm { <nl> columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedGroupManager . getTransaction ( ) ) ) ; <nl> } <nl> realm . schema . columnIndices = new ColumnIndices ( columnInfoMap ) ; <nl> + <nl> + if ( version = = UNVERSIONED ) { <nl> + final Transaction transaction = realm . getConfiguration ( ) . getInitialDataTransaction ( ) ; <nl> + if ( transaction ! = null ) { <nl> + transaction . execute ( realm ) ; <nl> + } <nl> + } <nl> } finally { <nl> if ( commitNeeded ) { <nl> realm . commitTransaction ( false , null ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 4e36603 . . a0789ee 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 88 , 6 + 88 , 7 @ @ public class RealmConfiguration { <nl> private final SharedGroup . Durability durability ; <nl> private final RealmProxyMediator schemaMediator ; <nl> private final RxObservableFactory rxObservableFactory ; <nl> + private final Realm . Transaction initialDataTransaction ; <nl> <nl> private RealmConfiguration ( Builder builder ) { <nl> this . realmFolder = builder . folder ; <nl> @ @ - 100 , 6 + 101 , 7 @ @ public class RealmConfiguration { <nl> this . durability = builder . durability ; <nl> this . schemaMediator = createSchemaMediator ( builder ) ; <nl> this . rxObservableFactory = builder . rxFactory ; <nl> + this . initialDataTransaction = builder . initialDataTransaction ; <nl> } <nl> <nl> public File getRealmFolder ( ) { <nl> @ @ - 140 , 6 + 142 , 15 @ @ public class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> + * Returns the transaction instance with initial data . <nl> + * <nl> + * @ return the initial data transaction . <nl> + * / <nl> + Realm . Transaction getInitialDataTransaction ( ) { <nl> + return initialDataTransaction ; <nl> + } <nl> + <nl> + / * * <nl> * Returns the unmodifiable { @ link Set } of model classes that make up the schema for this Realm . <nl> * <nl> * @ return unmodifiable { @ link Set } of model classes . <nl> @ @ - 185 , 6 + 196 , 7 @ @ public class RealmConfiguration { <nl> if ( migration ! = null ? ! migration . equals ( that . migration ) : that . migration ! = null ) return false ; <nl> / / noinspection SimplifiableIfStatement <nl> if ( rxObservableFactory ! = null ? ! rxObservableFactory . equals ( that . rxObservableFactory ) : that . rxObservableFactory ! = null ) return false ; <nl> + if ( initialDataTransaction ! = null ? ! initialDataTransaction . equals ( that . initialDataTransaction ) : that . initialDataTransaction ! = null ) return false ; <nl> return schemaMediator . equals ( that . schemaMediator ) ; <nl> } <nl> <nl> @ @ - 200 , 6 + 212 , 7 @ @ public class RealmConfiguration { <nl> result = 31 * result + schemaMediator . hashCode ( ) ; <nl> result = 31 * result + durability . hashCode ( ) ; <nl> result = 31 * result + ( rxObservableFactory ! = null ? rxObservableFactory . hashCode ( ) : 0 ) ; <nl> + result = 31 * result + ( initialDataTransaction ! = null ? initialDataTransaction . hashCode ( ) : 0 ) ; <nl> <nl> return result ; <nl> } <nl> @ @ - 309 , 6 + 322 , 7 @ @ public class RealmConfiguration { <nl> private HashSet < Object > modules = new HashSet < Object > ( ) ; <nl> private HashSet < Class < ? extends RealmObject > > debugSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; <nl> private RxObservableFactory rxFactory ; <nl> + private Realm . Transaction initialDataTransaction ; <nl> <nl> / * * <nl> * Creates an instance of the Builder for the RealmConfiguration . <nl> @ @ - 481 , 6 + 495 , 17 @ @ public class RealmConfiguration { <nl> return this ; <nl> } <nl> <nl> + / * * <nl> + * Sets the initial data in { @ link io . realm . Realm } . This transaction will be executed only for the first time <nl> + * when database file is created or while migrating the data when { @ link Builder # deleteRealmIfMigrationNeeded ( ) } is set . <nl> + * <nl> + * @ param transaction transaction to execute . <nl> + * / <nl> + public Builder initialData ( Realm . Transaction transaction ) { <nl> + initialDataTransaction = transaction ; <nl> + return this ; <nl> + } <nl> + <nl> private void addModule ( Object module ) { <nl> if ( module ! = null ) { <nl> checkModule ( module ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 index b44bcc8 . . 4ac5b15 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmChangeListenerTests . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 import io . realm . entities . AllTypes ; 
 + import io . realm . entities . BacklinksSource ; 
 + import io . realm . entities . BacklinksTarget ; 
 import io . realm . entities . Cat ; 
 import io . realm . entities . pojo . AllTypesRealmModel ; 
 import io . realm . rule . RunInLooperThread ; 
 @ @ - 35 , 6 + 37 , 7 @ @ import io . realm . rule . TestRealmConfigurationFactory ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertTrue ; 
 
 @ RunWith ( AndroidJUnit4 . class ) 
 public class RealmChangeListenerTests { 
 @ @ - 225 , 4 + 228 , 75 @ @ public class RealmChangeListenerTests { 
 allTypes . setString ( AllTypes . FIELD _ STRING , " test data 1 " ) ; 
 dynamicRealm . commitTransaction ( ) ; 
 } 
 + 
 + / / 1 . adding a listener on the children 
 + / / 2 . modify parent 
 + / / 3 . at least one child is modified 
 + / / 4 . listener is not triggered ( backlink ) 
 + / / FIXME : will break when https : / / github . com / realm / realm - java / issues / 4875 is solved 
 + @ Test 
 + @ RunTestInLooperThread 
 + public void listenerOnChildChangeParent ( ) { 
 + final long [ ] nCalls = { 0 } ; 
 + final Realm realm = Realm . getInstance ( looperThread . getConfiguration ( ) ) ; 
 + TestHelper . populateLinkedDataSet ( realm ) ; 
 + 
 + RealmResults < BacklinksTarget > backlinksTargets = realm . where ( BacklinksTarget . class ) . findAll ( ) ; 
 + assertEquals ( 3 , backlinksTargets . size ( ) ) ; 
 + assertTrue ( backlinksTargets . last ( ) . getParents ( ) . isEmpty ( ) ) ; 
 + assertEquals ( 2 , backlinksTargets . first ( ) . getParents ( ) . size ( ) ) ; 
 + 
 + looperThread . keepStrongReference ( backlinksTargets ) ; 
 + 
 + backlinksTargets . addChangeListener ( new RealmChangeListener < RealmResults < BacklinksTarget > > ( ) { 
 + @ Override 
 + public void onChange ( RealmResults < BacklinksTarget > backlinksTargets ) { 
 + nCalls [ 0 ] + + ; 
 + } 
 + } ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + BacklinksTarget target = backlinksTargets . last ( ) ; 
 + realm . where ( BacklinksSource . class ) . findFirst ( ) . setChild ( target ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + / / backlinks are updated 
 + assertEquals ( 1 , backlinksTargets . last ( ) . getParents ( ) . size ( ) ) ; 
 + assertEquals ( 1 , backlinksTargets . first ( ) . getParents ( ) . size ( ) ) ; 
 + assertEquals ( 0 , nCalls [ 0 ] ) ; 
 + realm . close ( ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 + 
 + / / 1 . adding a listener if on the parent 
 + / / 2 . modify child 
 + / / 3 . listener is triggered ( forward link ) 
 + @ Test @ RunTestInLooperThread 
 + public void listenerOnParentChangeChild ( ) { 
 + final long [ ] nCalls = { 0 } ; 
 + final Realm realm = Realm . getInstance ( looperThread . getConfiguration ( ) ) ; 
 + TestHelper . populateLinkedDataSet ( realm ) ; 
 + 
 + RealmResults < BacklinksSource > backlinksSources = realm . where ( BacklinksSource . class ) . findAll ( ) ; 
 + assertEquals ( 4 , backlinksSources . size ( ) ) ; 
 + 
 + looperThread . keepStrongReference ( backlinksSources ) ; 
 + backlinksSources . addChangeListener ( new RealmChangeListener < RealmResults < BacklinksSource > > ( ) { 
 + @ Override 
 + public void onChange ( RealmResults < BacklinksSource > backlinksSources ) { 
 + nCalls [ 0 ] + + ; 
 + } 
 + } ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + BacklinksTarget backlinksTarget = realm . where ( BacklinksTarget . class ) . findFirst ( ) ; 
 + backlinksTarget . setId ( 42 ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + assertEquals ( 42 , backlinksSources . first ( ) . getChild ( ) . getId ( ) ) ; 
 + assertEquals ( 1 , nCalls [ 0 ] ) ; 
 + 
 + realm . close ( ) ; 
 + looperThread . testComplete ( ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 index 469de59 . . a0e805d 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / TestHelper . java 
 @ @ - 33 , 7 + 33 , 6 @ @ import java . io . InputStreamReader ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . InvocationTargetException ; 
 - import java . nio . ByteBuffer ; 
 import java . nio . charset . Charset ; 
 import java . security . MessageDigest ; 
 import java . security . NoSuchAlgorithmException ; 
 @ @ - 48 , 6 + 47 , 8 @ @ import java . util . concurrent . atomic . AtomicReference ; 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . AllTypesPrimaryKey ; 
 import io . realm . entities . AnnotationIndexTypes ; 
 + import io . realm . entities . BacklinksSource ; 
 + import io . realm . entities . BacklinksTarget ; 
 import io . realm . entities . NullTypes ; 
 import io . realm . entities . PrimaryKeyAsBoxedByte ; 
 import io . realm . entities . PrimaryKeyAsBoxedInteger ; 
 @ @ - 1227 , 4 + 1228 , 36 @ @ public class TestHelper { 
 return false ; 
 } 
 } 
 + 
 + public static void populateLinkedDataSet ( Realm realm ) { 
 + realm . beginTransaction ( ) ; 
 + realm . delete ( BacklinksSource . class ) ; 
 + realm . delete ( BacklinksTarget . class ) ; 
 + 
 + BacklinksTarget target1 = realm . createObject ( BacklinksTarget . class ) ; 
 + target1 . setId ( 1 ) ; 
 + 
 + BacklinksTarget target2 = realm . createObject ( BacklinksTarget . class ) ; 
 + target2 . setId ( 2 ) ; 
 + 
 + BacklinksTarget target3 = realm . createObject ( BacklinksTarget . class ) ; 
 + target3 . setId ( 3 ) ; 
 + 
 + BacklinksSource source1 = realm . createObject ( BacklinksSource . class ) ; 
 + source1 . setName ( " 1 " ) ; 
 + source1 . setChild ( target1 ) ; 
 + BacklinksSource source2 = realm . createObject ( BacklinksSource . class ) ; 
 + source2 . setName ( " 2 " ) ; 
 + source2 . setChild ( target2 ) ; 
 + 
 + BacklinksSource source3 = realm . createObject ( BacklinksSource . class ) ; 
 + source3 . setName ( " 3 " ) ; 
 + 
 + BacklinksSource source4 = realm . createObject ( BacklinksSource . class ) ; 
 + source4 . setName ( " 4 " ) ; 
 + source4 . setChild ( target1 ) ; 
 + 
 + realm . commitTransaction ( ) ; 
 + } 
 + 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 index 780834a . . 87e4106 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmConfigurationTests . java 
 @ @ - 16 , 6 + 16 , 8 @ @ 
 
 package io . realm ; 
 
 + import android . content . Context ; 
 + import android . support . test . InstrumentationRegistry ; 
 import android . support . test . runner . AndroidJUnit4 ; 
 import android . test . MoreAsserts ; 
 
 @ @ - 52 , 8 + 54 , 13 @ @ import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertNotSame ; 
 + import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 + import static org . mockito . Mockito . verify ; 
 + import static org . mockito . Mockito . never ; 
 + import static org . mockito . Mockito . times ; 
 + import static org . mockito . Mockito . mock ; 
 
 @ RunWith ( AndroidJUnit4 . class ) 
 public class RealmConfigurationTests { 
 @ @ - 673 , 4 + 680 , 103 @ @ public class RealmConfigurationTests { 
 assertNotNull ( configuration2 . getRxFactory ( ) ) ; 
 assertFalse ( configuration2 . getRxFactory ( ) = = dummyFactory ) ; 
 } 
 + 
 + @ Test 
 + public void initialDataTransactionEqual ( ) { 
 + final Realm . Transaction transaction = new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( final Realm realm ) { 
 + } 
 + } ; 
 + 
 + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) 
 + . initialData ( transaction ) 
 + . build ( ) ; 
 + 
 + assertEquals ( transaction , configuration . getInitialDataTransaction ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void initialDataTransactionNull ( ) { 
 + assertNull ( defaultConfig . getInitialDataTransaction ( ) ) ; 
 + 
 + realm = Realm . getInstance ( defaultConfig ) ; 
 + assertTrue ( realm . isEmpty ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void initialDataTransactionNotNull ( ) { 
 + / / Remove default instance 
 + Realm . deleteRealm ( defaultConfig ) ; 
 + 
 + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) 
 + . initialData ( new Realm . Transaction ( ) { 
 + @ Override 
 + public void execute ( final Realm realm ) { 
 + realm . createObject ( AllTypes . class ) ; 
 + realm . createObject ( Owner . class ) . setCat ( realm . createObject ( Cat . class ) ) ; 
 + } 
 + } ) . build ( ) ; 
 + 
 + realm = Realm . getInstance ( configuration ) ; 
 + 
 + / / First time check for initial data 
 + assertEquals ( 1 , realm . where ( AllTypes . class ) . count ( ) ) ; 
 + assertEquals ( 1 , realm . where ( Owner . class ) . count ( ) ) ; 
 + assertEquals ( 1 , realm . where ( Cat . class ) . count ( ) ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + realm . delete ( AllTypes . class ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + assertEquals ( 0 , realm . where ( AllTypes . class ) . count ( ) ) ; 
 + 
 + realm . close ( ) ; 
 + realm = Realm . getInstance ( configuration ) ; 
 + / / Check if there is still the same data 
 + assertEquals ( 0 , realm . where ( AllTypes . class ) . count ( ) ) ; 
 + assertEquals ( 1 , realm . where ( Owner . class ) . count ( ) ) ; 
 + assertEquals ( 1 , realm . where ( Cat . class ) . count ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void initialDataTransactionExecutionCount ( ) { 
 + / / Remove default instance 
 + Realm . deleteRealm ( defaultConfig ) ; 
 + 
 + Realm . Transaction transaction = mock ( Realm . Transaction . class ) ; 
 + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) 
 + . initialData ( transaction ) 
 + . build ( ) ; 
 + 
 + realm = Realm . getInstance ( configuration ) ; 
 + realm . close ( ) ; 
 + verify ( transaction , times ( 1 ) ) . execute ( realm ) ; 
 + 
 + realm = Realm . getInstance ( configuration ) ; 
 + realm . close ( ) ; 
 + verify ( transaction , never ( ) ) . execute ( realm ) ; 
 + } 
 + 
 + @ Test 
 + public void initialDataTransactionAssetFile ( ) throws IOException { 
 + / / Remove default instance 
 + Realm . deleteRealm ( defaultConfig ) ; 
 + 
 + Context context = InstrumentationRegistry . getInstrumentation ( ) . getContext ( ) ; 
 + configFactory . copyRealmFromAssets ( context , " default - before - migration . realm " , Realm . DEFAULT _ REALM _ NAME ) ; 
 + assertTrue ( new File ( configFactory . getRoot ( ) , Realm . DEFAULT _ REALM _ NAME ) . exists ( ) ) ; 
 + 
 + Realm . Transaction transaction = mock ( Realm . Transaction . class ) ; 
 + RealmConfiguration configuration = configFactory . createConfigurationBuilder ( ) 
 + / / Just reuse existing file and set right schema 
 + . schemaVersion ( 0 ) 
 + . schema ( AllTypes . class ) 
 + . initialData ( transaction ) 
 + . build ( ) ; 
 + 
 + realm = Realm . getInstance ( configuration ) ; 
 + realm . close ( ) ; 
 + verify ( transaction , never ( ) ) . execute ( realm ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index ead89af . . c79abe9 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 316 , 6 + 316 , 13 @ @ public final class Realm extends BaseRealm { 
 columnInfoMap . put ( modelClass , mediator . validateTable ( modelClass , realm . sharedGroupManager . getTransaction ( ) ) ) ; 
 } 
 realm . schema . columnIndices = new ColumnIndices ( columnInfoMap ) ; 
 + 
 + if ( version = = UNVERSIONED ) { 
 + final Transaction transaction = realm . getConfiguration ( ) . getInitialDataTransaction ( ) ; 
 + if ( transaction ! = null ) { 
 + transaction . execute ( realm ) ; 
 + } 
 + } 
 } finally { 
 if ( commitNeeded ) { 
 realm . commitTransaction ( false , null ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 4e36603 . . a0789ee 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 88 , 6 + 88 , 7 @ @ public class RealmConfiguration { 
 private final SharedGroup . Durability durability ; 
 private final RealmProxyMediator schemaMediator ; 
 private final RxObservableFactory rxObservableFactory ; 
 + private final Realm . Transaction initialDataTransaction ; 
 
 private RealmConfiguration ( Builder builder ) { 
 this . realmFolder = builder . folder ; 
 @ @ - 100 , 6 + 101 , 7 @ @ public class RealmConfiguration { 
 this . durability = builder . durability ; 
 this . schemaMediator = createSchemaMediator ( builder ) ; 
 this . rxObservableFactory = builder . rxFactory ; 
 + this . initialDataTransaction = builder . initialDataTransaction ; 
 } 
 
 public File getRealmFolder ( ) { 
 @ @ - 140 , 6 + 142 , 15 @ @ public class RealmConfiguration { 
 } 
 
 / * * 
 + * Returns the transaction instance with initial data . 
 + * 
 + * @ return the initial data transaction . 
 + * / 
 + Realm . Transaction getInitialDataTransaction ( ) { 
 + return initialDataTransaction ; 
 + } 
 + 
 + / * * 
 * Returns the unmodifiable { @ link Set } of model classes that make up the schema for this Realm . 
 * 
 * @ return unmodifiable { @ link Set } of model classes . 
 @ @ - 185 , 6 + 196 , 7 @ @ public class RealmConfiguration { 
 if ( migration ! = null ? ! migration . equals ( that . migration ) : that . migration ! = null ) return false ; 
 / / noinspection SimplifiableIfStatement 
 if ( rxObservableFactory ! = null ? ! rxObservableFactory . equals ( that . rxObservableFactory ) : that . rxObservableFactory ! = null ) return false ; 
 + if ( initialDataTransaction ! = null ? ! initialDataTransaction . equals ( that . initialDataTransaction ) : that . initialDataTransaction ! = null ) return false ; 
 return schemaMediator . equals ( that . schemaMediator ) ; 
 } 
 
 @ @ - 200 , 6 + 212 , 7 @ @ public class RealmConfiguration { 
 result = 31 * result + schemaMediator . hashCode ( ) ; 
 result = 31 * result + durability . hashCode ( ) ; 
 result = 31 * result + ( rxObservableFactory ! = null ? rxObservableFactory . hashCode ( ) : 0 ) ; 
 + result = 31 * result + ( initialDataTransaction ! = null ? initialDataTransaction . hashCode ( ) : 0 ) ; 
 
 return result ; 
 } 
 @ @ - 309 , 6 + 322 , 7 @ @ public class RealmConfiguration { 
 private HashSet < Object > modules = new HashSet < Object > ( ) ; 
 private HashSet < Class < ? extends RealmObject > > debugSchema = new HashSet < Class < ? extends RealmObject > > ( ) ; 
 private RxObservableFactory rxFactory ; 
 + private Realm . Transaction initialDataTransaction ; 
 
 / * * 
 * Creates an instance of the Builder for the RealmConfiguration . 
 @ @ - 481 , 6 + 495 , 17 @ @ public class RealmConfiguration { 
 return this ; 
 } 
 
 + / * * 
 + * Sets the initial data in { @ link io . realm . Realm } . This transaction will be executed only for the first time 
 + * when database file is created or while migrating the data when { @ link Builder # deleteRealmIfMigrationNeeded ( ) } is set . 
 + * 
 + * @ param transaction transaction to execute . 
 + * / 
 + public Builder initialData ( Realm . Transaction transaction ) { 
 + initialDataTransaction = transaction ; 
 + return this ; 
 + } 
 + 
 private void addModule ( Object module ) { 
 if ( module ! = null ) { 
 checkModule ( module ) ;
