BLEU SCORE: 0.029079340872079116

TEST MSG: Address review comments and improve encapsulation
GENERATED MSG: Don â€™ t send notifications to dead threads

TEST DIFF (one line): diff - - git a / . gitattributes b / . gitattributes <nl> deleted file mode 100644 <nl> index 2accc33 . . 0000000 <nl> - - - a / . gitattributes <nl> + + + / dev / null <nl> @ @ - 1 + 0 , 0 @ @ <nl> - * . bat eol = crlf <nl> diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> index fe01d87 . . 3a2a3ee 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> @ @ - 50 , 7 + 50 , 7 @ @ class BytecodeModifier { <nl> } <nl> <nl> / * * <nl> - * Modify a class replacing field accesses with the appropriate Realm accessors <nl> + * Modify a class replacing field accesses with the appropriate Realm accessors . <nl> * <nl> * @ param clazz The CtClass to modify <nl> * @ param managedFields List of fields whose access should be replaced <nl> @ @ - 74 , 6 + 74 , 17 @ @ class BytecodeModifier { <nl> } <nl> <nl> / * * <nl> + * Modify a class adding its RealmProxy interface . <nl> + * <nl> + * @ param clazz The CtClass to modify <nl> + * @ param classPool the Javassist class pool <nl> + * / <nl> + public static void addRealmProxyInterface ( CtClass clazz , ClassPool classPool ) { <nl> + def proxyInterface = classPool . get ( " io . realm . $ { clazz . getSimpleName ( ) } RealmProxyInterface " ) <nl> + clazz . addInterface ( proxyInterface ) <nl> + } <nl> + <nl> + / * * <nl> * This class goes through all the field access behaviours of a class and replaces field accesses with <nl> * the appropriate accessor . <nl> * / <nl> diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> index c7cc7fb . . 728f98a 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> @ @ - 31 , 8 + 31 , 9 @ @ import java . util . jar . JarFile <nl> <nl> import static com . android . build . api . transform . QualifiedContent . * <nl> / * * <nl> - * This class implements the Transform API provided by the Android Gradle plugin <nl> + * This class implements the Transform API provided by the Android Gradle plugin . <nl> * / <nl> + @ SuppressWarnings ( " GroovyUnusedDeclaration " ) <nl> class RealmTransformer extends Transform { <nl> <nl> private Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) <nl> @ @ - 77 , 14 + 78 , 12 @ @ class RealmTransformer extends Transform { <nl> <nl> logger . info " ClassPool contains Realm classes : $ { classPool . getOrNull ( ' io . realm . RealmList ' ) ! = null } " <nl> <nl> - / / Find the proxy classes <nl> - def proxyClasses = classNames <nl> - . findAll { it . endsWith ( ' RealmProxy ' ) } <nl> - . collect { classPool . getCtClass ( it ) } <nl> - logger . info " Proxy Classes : $ { proxyClasses * . name } " <nl> - <nl> / / Find the model classes <nl> - def modelClasses = proxyClasses . collect { it . superclass } <nl> + def realmObject = classPool . get ( ' io . realm . RealmObject ' ) <nl> + def modelClasses = classNames <nl> + . findAll { it . endsWith ( ' RealmProxy ' ) } <nl> + . collect { classPool . getCtClass ( it ) . superclass } <nl> + . findAll { it . superclass ? . equals ( realmObject ) } <nl> logger . info " Model Classes : $ { modelClasses * . name } " <nl> <nl> / / Populate a list of the fields that need to be managed with bytecode manipulation <nl> @ @ - 100 , 8 + 99 , 7 @ @ class RealmTransformer extends Transform { <nl> / / Add accessors to the model classes <nl> modelClasses . each { <nl> BytecodeModifier . addRealmAccessors ( it ) <nl> - def proxyInterface = classPool . get ( " io . realm . $ { it . getSimpleName ( ) } RealmProxyInterface " ) <nl> - it . addInterface ( proxyInterface ) <nl> + BytecodeModifier . addRealmProxyInterface ( it , classPool ) <nl> } <nl> <nl> / / Use accessors instead of direct field access <nl> @ @ - 118 , 7 + 116 , 8 @ @ class RealmTransformer extends Transform { <nl> } <nl> <nl> / * * <nl> - * Create and populate the Javassist class pool <nl> + * Create and populate the Javassist class pool . <nl> + * <nl> * @ param inputs The inputs provided by the Transform API <nl> * @ param referencedInputs the referencedInputs provided by the Transform API <nl> * @ return the populated ClassPool instance <nl> @ @ - 153 , 7 + 152 , 7 @ @ class RealmTransformer extends Transform { <nl> return classPool <nl> } <nl> <nl> - private Set < String > getClassNames ( Collection < TransformInput > inputs ) { <nl> + private static Set < String > getClassNames ( Collection < TransformInput > inputs ) { <nl> Set < String > classNames = new HashSet < String > ( ) <nl> <nl> inputs . each { <nl> @ @ - 161 , 7 + 160 , 11 @ @ class RealmTransformer extends Transform { <nl> def dirPath = it . file . absolutePath <nl> it . file . eachFileRecurse ( FileType . FILES ) { <nl> if ( it . absolutePath . endsWith ( SdkConstants . DOT _ CLASS ) ) { <nl> - def className = it . absolutePath . substring ( dirPath . length ( ) + 1 , it . absolutePath . length ( ) - SdkConstants . DOT _ CLASS . length ( ) ) . replaceAll ( ' / ' , ' . ' ) <nl> + def className = <nl> + it . absolutePath . substring ( <nl> + dirPath . length ( ) + 1 , <nl> + it . absolutePath . length ( ) - SdkConstants . DOT _ CLASS . length ( ) <nl> + ) . replace ( File . separatorChar , ' . ' as char ) <nl> classNames . add ( className ) <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> new file mode 100644 <nl> index 0000000 . . 6436da1 <nl> - - - / dev / null <nl> + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 0 , 0 + 1 , 70 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package io . realm ; <nl> + <nl> + import android . test . AndroidTestCase ; <nl> + import android . util . Log ; <nl> + <nl> + import io . realm . entities . Dog ; <nl> + import io . realm . internal . android . LooperThread ; <nl> + <nl> + public class NotificationsTest extends AndroidTestCase { <nl> + public void testMessageToDeadThread ( ) { <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + <nl> + / / Number of handlers before <nl> + final int handlersBefore = LooperThread . handlers . size ( ) ; <nl> + <nl> + / / Make sure the Looper Thread is alive <nl> + LooperThread looperThread = LooperThread . getInstance ( ) ; <nl> + assertTrue ( looperThread . isAlive ( ) ) ; <nl> + <nl> + Thread thread = new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Realm r = Realm . getInstance ( getContext ( ) ) ; <nl> + assertFalse ( handlersBefore = = LooperThread . handlers . size ( ) ) ; <nl> + r . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + Log . i ( " Notification Test " , " Notification Received " ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } ; <nl> + thread . start ( ) ; <nl> + <nl> + try { <nl> + thread . join ( ) ; <nl> + } catch ( InterruptedException e ) { <nl> + fail ( ) ; <nl> + } <nl> + assertFalse ( thread . isAlive ( ) ) ; / / Make sure the thread is dead <nl> + realm . beginTransaction ( ) ; <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setName ( " Rex " ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + / / Give some time to log the exception <nl> + try { <nl> + Thread . sleep ( 500 ) ; <nl> + } catch ( InterruptedException e ) { <nl> + fail ( ) ; <nl> + } <nl> + <nl> + assertEquals ( 0 , looperThread . exceptions . size ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 1692b86 . . 813456f 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import android . os . Message ; <nl> import android . util . Log ; <nl> <nl> import java . io . File ; <nl> - import java . lang . ref . SoftReference ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 48 , 20 + 47 , 26 @ @ import io . realm . internal . android . LooperThread ; <nl> * The Realm class is the storage and transactional manager of your object persistent store . Objects <nl> * are created . Objects within a Realm can be queried and read at any time . Creating , <nl> * modifying , and deleting objects must be done through transactions . <nl> - * <nl> + * < p / > <nl> * The transactions ensure that multiple instances ( on multiple threads ) can access the objects <nl> * in a consistent state with full ACID guaranties . <nl> - * <nl> + * < p / > <nl> * The instances of a Realm will be automatically updated when one instance commits a <nl> * change ( create , modify or delete an object ) . <nl> * / <nl> public class Realm { <nl> public static final String DEFAULT _ REALM _ NAME = " default . realm " ; <nl> - private static final Map < String , ThreadRealm > realms = new HashMap < String , ThreadRealm > ( ) ; <nl> <nl> private static final String TAG = " REALM " ; <nl> private static final String TABLE _ PREFIX = " class _ " ; <nl> + private static final ThreadLocal < Map < String , Realm > > realmsCache = new ThreadLocal < Map < String , Realm > > ( ) { <nl> + @ Override <nl> + protected Map < String , Realm > initialValue ( ) { <nl> + return new HashMap < String , Realm > ( ) ; <nl> + } <nl> + } ; <nl> <nl> + @ SuppressWarnings ( " UnusedDeclaration " ) <nl> private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; <nl> private static boolean autoRefresh = true ; <nl> <nl> @ @ - 133 , 12 + 138 , 13 @ @ public class Realm { <nl> <nl> / * * <nl> * Realm static constructor for the default realm " default . realm " <nl> + * <nl> * @ param context an Android context <nl> * @ return an instance of the Realm class <nl> * @ throws RealmMigrationNeededException The model classes have been changed and the Realm <nl> - * must be migrated <nl> - * @ throws RealmIOException Error when accessing underlying file <nl> - * @ throws RealmException Other errors <nl> + * must be migrated <nl> + * @ throws RealmIOException Error when accessing underlying file <nl> + * @ throws RealmException Other errors <nl> * / <nl> public static Realm getInstance ( Context context ) { <nl> return Realm . getInstance ( context , DEFAULT _ REALM _ NAME , null ) ; <nl> @ @ - 146 , 42 + 152 , 47 @ @ public class Realm { <nl> <nl> / * * <nl> * Realm static constructor <nl> - * @ param context an Android context <nl> + * <nl> + * @ param context an Android context <nl> * @ param fileName the name of the file to save the Realm to <nl> * @ return an instance of the Realm class <nl> * @ throws RealmMigrationNeededException The model classes have been changed and the Realm <nl> - * must be migrated <nl> - * @ throws RealmIOException Error when accessing underlying file <nl> - * @ throws RealmException Other errors <nl> + * must be migrated <nl> + * @ throws RealmIOException Error when accessing underlying file <nl> + * @ throws RealmException Other errors <nl> * / <nl> + @ SuppressWarnings ( " UnusedDeclaration " ) <nl> public static Realm getInstance ( Context context , String fileName ) { <nl> return Realm . create ( context . getFilesDir ( ) , fileName , null ) ; <nl> } <nl> <nl> / * * <nl> * Realm static constructor <nl> + * <nl> * @ param context an Android context <nl> - * @ param key a 32 - byte encryption key <nl> + * @ param key a 32 - byte encryption key <nl> * @ return an instance of the Realm class <nl> * @ throws RealmMigrationNeededException The model classes have been changed and the Realm <nl> - * must be migrated <nl> - * @ throws RealmIOException Error when accessing underlying file <nl> - * @ throws RealmException Other errors <nl> + * must be migrated <nl> + * @ throws RealmIOException Error when accessing underlying file <nl> + * @ throws RealmException Other errors <nl> * / <nl> + @ SuppressWarnings ( " UnusedDeclaration " ) <nl> public static Realm getInstance ( Context context , byte [ ] key ) { <nl> return Realm . getInstance ( context , DEFAULT _ REALM _ NAME , key ) ; <nl> } <nl> <nl> / * * <nl> * Realm static constructor <nl> - * @ param context an Android context <nl> + * <nl> + * @ param context an Android context <nl> * @ param fileName the name of the file to save the Realm to <nl> - * @ param key a 32 - byte encryption key <nl> + * @ param key a 32 - byte encryption key <nl> * @ return an instance of the Realm class <nl> * @ throws RealmMigrationNeededException The model classes have been changed and the Realm <nl> - * must be migrated <nl> - * @ throws RealmIOException Error when accessing underlying file <nl> - * @ throws RealmException Other errors <nl> + * must be migrated <nl> + * @ throws RealmIOException Error when accessing underlying file <nl> + * @ throws RealmException Other errors <nl> * / <nl> public static Realm getInstance ( Context context , String fileName , byte [ ] key ) { <nl> return Realm . create ( context . getFilesDir ( ) , fileName , key ) ; <nl> @ @ - 189 , 28 + 200 , 31 @ @ public class Realm { <nl> <nl> / * * <nl> * Realm static constructor <nl> + * <nl> * @ param writableFolder absolute path to a writable directory <nl> - * @ param key a 32 - byte encryption key <nl> + * @ param key a 32 - byte encryption key <nl> * @ return an instance of the Realm class <nl> * @ throws RealmMigrationNeededException The model classes have been changed and the Realm <nl> - * must be migrated <nl> - * @ throws RealmIOException Error when accessing underlying file <nl> - * @ throws RealmException Other errors <nl> + * must be migrated <nl> + * @ throws RealmIOException Error when accessing underlying file <nl> + * @ throws RealmException Other errors <nl> * / <nl> + @ SuppressWarnings ( " UnusedDeclaration " ) <nl> public static Realm getInstance ( File writableFolder , byte [ ] key ) { <nl> return Realm . create ( writableFolder , DEFAULT _ REALM _ NAME , key ) ; <nl> } <nl> <nl> / * * <nl> * Realm static constructor <nl> + * <nl> * @ param writableFolder absolute path to a writable directory <nl> - * @ param filename the name of the file to save the Realm to <nl> - * @ param key a 32 - byte encryption key <nl> + * @ param filename the name of the file to save the Realm to <nl> + * @ param key a 32 - byte encryption key <nl> * @ return an instance of the Realm class <nl> * @ throws RealmMigrationNeededException The model classes have been changed and the Realm <nl> - * must be migrated <nl> - * @ throws RealmIOException Error when accessing underlying file <nl> - * @ throws RealmException Other errors <nl> + * must be migrated <nl> + * @ throws RealmIOException Error when accessing underlying file <nl> + * @ throws RealmException Other errors <nl> * / <nl> public static Realm create ( File writableFolder , String filename , byte [ ] key ) { <nl> String absolutePath = new File ( writableFolder , filename ) . getAbsolutePath ( ) ; <nl> @ @ - 218 , 20 + 232 , 15 @ @ public class Realm { <nl> } <nl> <nl> private static Realm createAndValidate ( String absolutePath , byte [ ] key , boolean validateSchema ) { <nl> - ThreadRealm threadRealm = realms . get ( absolutePath ) ; <nl> - boolean needsValidation = ( threadRealm = = null ) ; <nl> - if ( threadRealm = = null ) { <nl> - threadRealm = new ThreadRealm ( absolutePath , key ) ; <nl> - } <nl> - SoftReference < Realm > realmSoftReference = threadRealm . get ( ) ; <nl> - Realm realm = realmSoftReference . get ( ) ; <nl> + Map < String , Realm > realms = realmsCache . get ( ) ; <nl> + Realm realm = realms . get ( absolutePath ) ; <nl> + <nl> if ( realm = = null ) { <nl> - / / The garbage collector decided to get rid of the realm instance <nl> - threadRealm = new ThreadRealm ( absolutePath , key ) ; <nl> - realmSoftReference = threadRealm . get ( ) ; <nl> - realm = realmSoftReference . get ( ) ; <nl> + realm = new Realm ( absolutePath , key ) ; <nl> + realms . put ( absolutePath , realm ) ; <nl> + realmsCache . set ( realms ) ; <nl> } <nl> - if ( validateSchema & & needsValidation ) { <nl> + if ( validateSchema ) { <nl> Class < ? > validationClass ; <nl> try { <nl> validationClass = Class . forName ( " io . realm . ValidationList " ) ; <nl> @ @ - 246 , 6 + 255 , 7 @ @ public class Realm { <nl> } <nl> List < String > proxyClasses ; <nl> try { <nl> + / / noinspection unchecked <nl> proxyClasses = ( List < String > ) getProxyClassesMethod . invoke ( null ) ; <nl> } catch ( IllegalAccessException e ) { <nl> throw new RealmException ( " Could not execute the getProxyClasses method in the ValidationList class " ) ; <nl> @ @ - 312 , 7 + 322 , 8 @ @ public class Realm { <nl> } <nl> List < String > fieldNames ; <nl> try { <nl> - fieldNames = ( List < String > ) fieldNamesMethod . invoke ( null ) ; <nl> + / / noinspection unchecked <nl> + fieldNames = ( List < String > ) fieldNamesMethod . invoke ( null ) ; <nl> } catch ( IllegalAccessException e ) { <nl> throw new RealmException ( " Could not execute the getFieldNames method in the generated " + generatedClassName + " class " ) ; <nl> } catch ( InvocationTargetException e ) { <nl> @ @ - 332 , 11 + 343 , 7 @ @ public class Realm { <nl> columnIndices . put ( modelClassName , innerMap ) ; <nl> } <nl> } <nl> - <nl> - / / cache realm after validation <nl> - realms . put ( absolutePath , threadRealm ) ; <nl> - } <nl> - finally { <nl> + } finally { <nl> realm . commitTransaction ( ) ; <nl> } <nl> } <nl> @ @ - 344 , 28 + 351 , 11 @ @ public class Realm { <nl> return realm ; <nl> } <nl> <nl> - / / This class stores soft - references to realm objects per thread per realm file <nl> - private static class ThreadRealm extends ThreadLocal < SoftReference < Realm > > { <nl> - private String absolutePath ; <nl> - private byte [ ] key ; <nl> - <nl> - private ThreadRealm ( String absolutePath , byte [ ] key ) { <nl> - this . absolutePath = absolutePath ; <nl> - this . key = key ; <nl> - } <nl> - <nl> - @ Override <nl> - protected SoftReference < Realm > initialValue ( ) { <nl> - Realm realm = new Realm ( absolutePath , key ) ; <nl> - key = null ; <nl> - return new SoftReference < Realm > ( realm ) ; <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Instantiates and adds a new object to the realm <nl> - * @ return The new object <nl> + * <nl> * @ param clazz The Class of the object to create <nl> + * @ return The new object <nl> * @ throws RealmException An object could not be created <nl> * / <nl> public < E extends RealmObject > E createObject ( Class < E > clazz ) { <nl> @ @ - 490 , 15 + 480 , 16 @ @ public class Realm { <nl> simpleClassName = clazz . getSimpleName ( ) ; <nl> simpleClassNames . put ( clazz , simpleClassName ) ; <nl> } <nl> - return transaction . hasTable ( TABLE _ PREFIX + simpleClassName ) ; <nl> + return transaction . hasTable ( TABLE _ PREFIX + simpleClassName ) ; <nl> } <nl> <nl> / * * <nl> * Returns a typed RealmQuery , which can be used to query for specific objects of this type <nl> + * <nl> * @ param clazz The class of the object which is to be queried for <nl> * @ return A typed RealmQuery , which can be used to query for specific objects of this type <nl> - * @ see io . realm . RealmQuery <nl> * @ throws java . lang . RuntimeException Any other error <nl> + * @ see io . realm . RealmQuery <nl> * / <nl> public < E extends RealmObject > RealmQuery < E > where ( Class < E > clazz ) { <nl> return new RealmQuery < E > ( this , clazz ) ; <nl> @ @ - 506 , 10 + 497 , 11 @ @ public class Realm { <nl> <nl> / * * <nl> * Get all objects of a specific Class <nl> + * <nl> * @ param clazz the Class to get objects of <nl> * @ return A RealmResult list containing the objects <nl> - * @ see io . realm . RealmResults <nl> * @ throws java . lang . RuntimeException Any other error <nl> + * @ see io . realm . RealmResults <nl> * / <nl> public < E extends RealmObject > RealmResults < E > allObjects ( Class < E > clazz ) { <nl> return where ( clazz ) . findAll ( ) ; <nl> @ @ - 519 , 6 + 511 , 7 @ @ public class Realm { <nl> <nl> / * * <nl> * Add a change listener to the Realm <nl> + * <nl> * @ param listener the change listener <nl> * @ see io . realm . RealmChangeListener <nl> * / <nl> @ @ - 529 , 6 + 522 , 7 @ @ public class Realm { <nl> <nl> / * * <nl> * Remove the specified change listener <nl> + * <nl> * @ param listener the change listener to be removed <nl> * @ see io . realm . RealmChangeListener <nl> * / <nl> @ @ - 541 , 6 + 535 , 7 @ @ public class Realm { <nl> <nl> / * * <nl> * Remove all user - defined change listeners <nl> + * <nl> * @ see io . realm . RealmChangeListener <nl> * / <nl> public void removeAllChangeListeners ( ) { <nl> @ @ - 549 , 11 + 544 , 12 @ @ public class Realm { <nl> } <nl> <nl> void sendNotifications ( ) { <nl> - for ( RealmChangeListener listener : changeListeners ) { <nl> + for ( RealmChangeListener listener : changeListeners ) { <nl> listener . onChange ( ) ; <nl> } <nl> } <nl> <nl> + @ SuppressWarnings ( " UnusedDeclaration " ) <nl> boolean hasChanged ( ) { <nl> return sharedGroup . hasChanged ( ) ; <nl> } <nl> @ @ - 572 , 7 + 568 , 7 @ @ public class Realm { <nl> * transaction within a write transaction an exception is thrown . <nl> * <nl> * @ throws io . realm . exceptions . RealmException If already in a write transaction . <nl> - * @ throws java . lang . RuntimeException Any other error . <nl> + * @ throws java . lang . RuntimeException Any other error . <nl> * / <nl> public void beginTransaction ( ) { <nl> transaction . promoteToWrite ( ) ; <nl> @ @ - 580 , 6 + 576 , 7 @ @ public class Realm { <nl> <nl> / * * <nl> * Commits a write transaction <nl> + * <nl> * @ throws java . lang . RuntimeException Any other error <nl> * / <nl> public void commitTransaction ( ) { <nl> @ @ - 597 , 6 + 594 , 7 @ @ public class Realm { <nl> <nl> / * * <nl> * Remove all objects of the specified class <nl> + * <nl> * @ param classSpec The class which objects should be removed <nl> * @ throws java . lang . RuntimeException Any other error <nl> * / <nl> @ @ - 627 , 17 + 625 , 22 @ @ public class Realm { <nl> migrateRealmAtPath ( realmPath , null , migration ) ; <nl> } <nl> <nl> - static public void migrateRealmAtPath ( String realmPath , byte [ ] key , RealmMigration migration ) { <nl> + static public void migrateRealmAtPath ( String realmPath , byte [ ] key , RealmMigration migration ) { <nl> Realm realm = Realm . createAndValidate ( realmPath , key , false ) ; <nl> realm . beginTransaction ( ) ; <nl> realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; <nl> realm . commitTransaction ( ) ; <nl> + <nl> + Map < String , Realm > realms = realmsCache . get ( ) ; <nl> + realms . put ( realmPath , new Realm ( realmPath , key ) ) ; <nl> + realmsCache . set ( realms ) ; <nl> } <nl> <nl> / * * <nl> * Delete the Realm file from the filesystem for the default Realm ( named " default . realm " ) . <nl> * The realm must be unused and closed before calling this method . <nl> * WARNING : Your Realm must not be open ( typically when your app launch ) . <nl> + * <nl> * @ param context an Android context . <nl> * @ return false if a file could not be deleted . The failing file will be logged . <nl> * @ see io . realm . Realm # clear ( Class ) <nl> @ @ - 649 , 7 + 652 , 8 @ @ public class Realm { <nl> / * * <nl> * Delete the Realm file from the filesystem for a custom named Realm . <nl> * The realm must be unused and closed before calling this method . <nl> - * @ param context an Android context . <nl> + * <nl> + * @ param context an Android context . <nl> * @ param fileName the name of the custom Realm ( i . e . " myCustomRealm . realm " ) . <nl> * @ return false if a file could not be deleted . The failing file will be logged . <nl> * / <nl> diff - - git a / realm / src / main / java / io / realm / internal / android / LooperThread . java b / realm / src / main / java / io / realm / internal / android / LooperThread . java <nl> index c9692a1 . . 7edd0d1 100644 <nl> - - - a / realm / src / main / java / io / realm / internal / android / LooperThread . java <nl> + + + b / realm / src / main / java / io / realm / internal / android / LooperThread . java <nl> @ @ - 19 , 7 + 19 , 10 @ @ package io . realm . internal . android ; <nl> import android . os . Handler ; <nl> import android . os . Looper ; <nl> import android . os . Message ; <nl> + import android . util . Log ; <nl> <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> <nl> @ @ - 29 , 9 + 32 , 12 @ @ import java . util . concurrent . ConcurrentHashMap ; <nl> public class LooperThread extends Thread { <nl> / / Message types <nl> public static final int REALM _ CHANGED = 3 ; <nl> - <nl> public static final Map < Handler , Integer > handlers = new ConcurrentHashMap < Handler , Integer > ( ) ; <nl> + <nl> public Handler handler ; <nl> + public List < RuntimeException > exceptions = new ArrayList < RuntimeException > ( ) ; <nl> + <nl> + private static final String TAG = LooperThread . class . getName ( ) ; <nl> private static LooperThread instance ; <nl> <nl> / / private because it ' s a singleton <nl> @ @ - 59 , 8 + 65 , 16 @ @ public class LooperThread extends Thread { <nl> if ( message . arg1 = = REALM _ CHANGED ) { <nl> for ( Map . Entry < Handler , Integer > entry : handlers . entrySet ( ) ) { <nl> if ( entry . getValue ( ) = = message . arg2 ) { <nl> - if ( ! entry . getKey ( ) . hasMessages ( REALM _ CHANGED ) ) { <nl> - entry . getKey ( ) . sendEmptyMessage ( REALM _ CHANGED ) ; <nl> + Handler currentHandler = entry . getKey ( ) ; <nl> + if ( currentHandler . getLooper ( ) . getThread ( ) . isAlive ( ) & & <nl> + ! currentHandler . hasMessages ( REALM _ CHANGED ) ) <nl> + { <nl> + try { <nl> + currentHandler . sendEmptyMessage ( REALM _ CHANGED ) ; <nl> + } catch ( RuntimeException e ) { <nl> + exceptions . add ( e ) ; <nl> + Log . w ( TAG , e . getMessage ( ) ) ; <nl> + } <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / . gitattributes b / . gitattributes 
 deleted file mode 100644 
 index 2accc33 . . 0000000 
 - - - a / . gitattributes 
 + + + / dev / null 
 @ @ - 1 + 0 , 0 @ @ 
 - * . bat eol = crlf 
 diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 index fe01d87 . . 3a2a3ee 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 @ @ - 50 , 7 + 50 , 7 @ @ class BytecodeModifier { 
 } 
 
 / * * 
 - * Modify a class replacing field accesses with the appropriate Realm accessors 
 + * Modify a class replacing field accesses with the appropriate Realm accessors . 
 * 
 * @ param clazz The CtClass to modify 
 * @ param managedFields List of fields whose access should be replaced 
 @ @ - 74 , 6 + 74 , 17 @ @ class BytecodeModifier { 
 } 
 
 / * * 
 + * Modify a class adding its RealmProxy interface . 
 + * 
 + * @ param clazz The CtClass to modify 
 + * @ param classPool the Javassist class pool 
 + * / 
 + public static void addRealmProxyInterface ( CtClass clazz , ClassPool classPool ) { 
 + def proxyInterface = classPool . get ( " io . realm . $ { clazz . getSimpleName ( ) } RealmProxyInterface " ) 
 + clazz . addInterface ( proxyInterface ) 
 + } 
 + 
 + / * * 
 * This class goes through all the field access behaviours of a class and replaces field accesses with 
 * the appropriate accessor . 
 * / 
 diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 index c7cc7fb . . 728f98a 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 @ @ - 31 , 8 + 31 , 9 @ @ import java . util . jar . JarFile 
 
 import static com . android . build . api . transform . QualifiedContent . * 
 / * * 
 - * This class implements the Transform API provided by the Android Gradle plugin 
 + * This class implements the Transform API provided by the Android Gradle plugin . 
 * / 
 + @ SuppressWarnings ( " GroovyUnusedDeclaration " ) 
 class RealmTransformer extends Transform { 
 
 private Logger logger = LoggerFactory . getLogger ( ' realm - logger ' ) 
 @ @ - 77 , 14 + 78 , 12 @ @ class RealmTransformer extends Transform { 
 
 logger . info " ClassPool contains Realm classes : $ { classPool . getOrNull ( ' io . realm . RealmList ' ) ! = null } " 
 
 - / / Find the proxy classes 
 - def proxyClasses = classNames 
 - . findAll { it . endsWith ( ' RealmProxy ' ) } 
 - . collect { classPool . getCtClass ( it ) } 
 - logger . info " Proxy Classes : $ { proxyClasses * . name } " 
 - 
 / / Find the model classes 
 - def modelClasses = proxyClasses . collect { it . superclass } 
 + def realmObject = classPool . get ( ' io . realm . RealmObject ' ) 
 + def modelClasses = classNames 
 + . findAll { it . endsWith ( ' RealmProxy ' ) } 
 + . collect { classPool . getCtClass ( it ) . superclass } 
 + . findAll { it . superclass ? . equals ( realmObject ) } 
 logger . info " Model Classes : $ { modelClasses * . name } " 
 
 / / Populate a list of the fields that need to be managed with bytecode manipulation 
 @ @ - 100 , 8 + 99 , 7 @ @ class RealmTransformer extends Transform { 
 / / Add accessors to the model classes 
 modelClasses . each { 
 BytecodeModifier . addRealmAccessors ( it ) 
 - def proxyInterface = classPool . get ( " io . realm . $ { it . getSimpleName ( ) } RealmProxyInterface " ) 
 - it . addInterface ( proxyInterface ) 
 + BytecodeModifier . addRealmProxyInterface ( it , classPool ) 
 } 
 
 / / Use accessors instead of direct field access 
 @ @ - 118 , 7 + 116 , 8 @ @ class RealmTransformer extends Transform { 
 } 
 
 / * * 
 - * Create and populate the Javassist class pool 
 + * Create and populate the Javassist class pool . 
 + * 
 * @ param inputs The inputs provided by the Transform API 
 * @ param referencedInputs the referencedInputs provided by the Transform API 
 * @ return the populated ClassPool instance 
 @ @ - 153 , 7 + 152 , 7 @ @ class RealmTransformer extends Transform { 
 return classPool 
 } 
 
 - private Set < String > getClassNames ( Collection < TransformInput > inputs ) { 
 + private static Set < String > getClassNames ( Collection < TransformInput > inputs ) { 
 Set < String > classNames = new HashSet < String > ( ) 
 
 inputs . each { 
 @ @ - 161 , 7 + 160 , 11 @ @ class RealmTransformer extends Transform { 
 def dirPath = it . file . absolutePath 
 it . file . eachFileRecurse ( FileType . FILES ) { 
 if ( it . absolutePath . endsWith ( SdkConstants . DOT _ CLASS ) ) { 
 - def className = it . absolutePath . substring ( dirPath . length ( ) + 1 , it . absolutePath . length ( ) - SdkConstants . DOT _ CLASS . length ( ) ) . replaceAll ( ' / ' , ' . ' ) 
 + def className = 
 + it . absolutePath . substring ( 
 + dirPath . length ( ) + 1 , 
 + it . absolutePath . length ( ) - SdkConstants . DOT _ CLASS . length ( ) 
 + ) . replace ( File . separatorChar , ' . ' as char ) 
 classNames . add ( className ) 
 } 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 new file mode 100644 
 index 0000000 . . 6436da1 
 - - - / dev / null 
 + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 0 , 0 + 1 , 70 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package io . realm ; 
 + 
 + import android . test . AndroidTestCase ; 
 + import android . util . Log ; 
 + 
 + import io . realm . entities . Dog ; 
 + import io . realm . internal . android . LooperThread ; 
 + 
 + public class NotificationsTest extends AndroidTestCase { 
 + public void testMessageToDeadThread ( ) { 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + 
 + / / Number of handlers before 
 + final int handlersBefore = LooperThread . handlers . size ( ) ; 
 + 
 + / / Make sure the Looper Thread is alive 
 + LooperThread looperThread = LooperThread . getInstance ( ) ; 
 + assertTrue ( looperThread . isAlive ( ) ) ; 
 + 
 + Thread thread = new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Realm r = Realm . getInstance ( getContext ( ) ) ; 
 + assertFalse ( handlersBefore = = LooperThread . handlers . size ( ) ) ; 
 + r . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + Log . i ( " Notification Test " , " Notification Received " ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + thread . start ( ) ; 
 + 
 + try { 
 + thread . join ( ) ; 
 + } catch ( InterruptedException e ) { 
 + fail ( ) ; 
 + } 
 + assertFalse ( thread . isAlive ( ) ) ; / / Make sure the thread is dead 
 + realm . beginTransaction ( ) ; 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setName ( " Rex " ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + / / Give some time to log the exception 
 + try { 
 + Thread . sleep ( 500 ) ; 
 + } catch ( InterruptedException e ) { 
 + fail ( ) ; 
 + } 
 + 
 + assertEquals ( 0 , looperThread . exceptions . size ( ) ) ; 
 + } 
 + } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 1692b86 . . 813456f 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import android . os . Message ; 
 import android . util . Log ; 
 
 import java . io . File ; 
 - import java . lang . ref . SoftReference ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 @ @ - 48 , 20 + 47 , 26 @ @ import io . realm . internal . android . LooperThread ; 
 * The Realm class is the storage and transactional manager of your object persistent store . Objects 
 * are created . Objects within a Realm can be queried and read at any time . Creating , 
 * modifying , and deleting objects must be done through transactions . 
 - * 
 + * < p / > 
 * The transactions ensure that multiple instances ( on multiple threads ) can access the objects 
 * in a consistent state with full ACID guaranties . 
 - * 
 + * < p / > 
 * The instances of a Realm will be automatically updated when one instance commits a 
 * change ( create , modify or delete an object ) . 
 * / 
 public class Realm { 
 public static final String DEFAULT _ REALM _ NAME = " default . realm " ; 
 - private static final Map < String , ThreadRealm > realms = new HashMap < String , ThreadRealm > ( ) ; 
 
 private static final String TAG = " REALM " ; 
 private static final String TABLE _ PREFIX = " class _ " ; 
 + private static final ThreadLocal < Map < String , Realm > > realmsCache = new ThreadLocal < Map < String , Realm > > ( ) { 
 + @ Override 
 + protected Map < String , Realm > initialValue ( ) { 
 + return new HashMap < String , Realm > ( ) ; 
 + } 
 + } ; 
 
 + @ SuppressWarnings ( " UnusedDeclaration " ) 
 private static SharedGroup . Durability defaultDurability = SharedGroup . Durability . FULL ; 
 private static boolean autoRefresh = true ; 
 
 @ @ - 133 , 12 + 138 , 13 @ @ public class Realm { 
 
 / * * 
 * Realm static constructor for the default realm " default . realm " 
 + * 
 * @ param context an Android context 
 * @ return an instance of the Realm class 
 * @ throws RealmMigrationNeededException The model classes have been changed and the Realm 
 - * must be migrated 
 - * @ throws RealmIOException Error when accessing underlying file 
 - * @ throws RealmException Other errors 
 + * must be migrated 
 + * @ throws RealmIOException Error when accessing underlying file 
 + * @ throws RealmException Other errors 
 * / 
 public static Realm getInstance ( Context context ) { 
 return Realm . getInstance ( context , DEFAULT _ REALM _ NAME , null ) ; 
 @ @ - 146 , 42 + 152 , 47 @ @ public class Realm { 
 
 / * * 
 * Realm static constructor 
 - * @ param context an Android context 
 + * 
 + * @ param context an Android context 
 * @ param fileName the name of the file to save the Realm to 
 * @ return an instance of the Realm class 
 * @ throws RealmMigrationNeededException The model classes have been changed and the Realm 
 - * must be migrated 
 - * @ throws RealmIOException Error when accessing underlying file 
 - * @ throws RealmException Other errors 
 + * must be migrated 
 + * @ throws RealmIOException Error when accessing underlying file 
 + * @ throws RealmException Other errors 
 * / 
 + @ SuppressWarnings ( " UnusedDeclaration " ) 
 public static Realm getInstance ( Context context , String fileName ) { 
 return Realm . create ( context . getFilesDir ( ) , fileName , null ) ; 
 } 
 
 / * * 
 * Realm static constructor 
 + * 
 * @ param context an Android context 
 - * @ param key a 32 - byte encryption key 
 + * @ param key a 32 - byte encryption key 
 * @ return an instance of the Realm class 
 * @ throws RealmMigrationNeededException The model classes have been changed and the Realm 
 - * must be migrated 
 - * @ throws RealmIOException Error when accessing underlying file 
 - * @ throws RealmException Other errors 
 + * must be migrated 
 + * @ throws RealmIOException Error when accessing underlying file 
 + * @ throws RealmException Other errors 
 * / 
 + @ SuppressWarnings ( " UnusedDeclaration " ) 
 public static Realm getInstance ( Context context , byte [ ] key ) { 
 return Realm . getInstance ( context , DEFAULT _ REALM _ NAME , key ) ; 
 } 
 
 / * * 
 * Realm static constructor 
 - * @ param context an Android context 
 + * 
 + * @ param context an Android context 
 * @ param fileName the name of the file to save the Realm to 
 - * @ param key a 32 - byte encryption key 
 + * @ param key a 32 - byte encryption key 
 * @ return an instance of the Realm class 
 * @ throws RealmMigrationNeededException The model classes have been changed and the Realm 
 - * must be migrated 
 - * @ throws RealmIOException Error when accessing underlying file 
 - * @ throws RealmException Other errors 
 + * must be migrated 
 + * @ throws RealmIOException Error when accessing underlying file 
 + * @ throws RealmException Other errors 
 * / 
 public static Realm getInstance ( Context context , String fileName , byte [ ] key ) { 
 return Realm . create ( context . getFilesDir ( ) , fileName , key ) ; 
 @ @ - 189 , 28 + 200 , 31 @ @ public class Realm { 
 
 / * * 
 * Realm static constructor 
 + * 
 * @ param writableFolder absolute path to a writable directory 
 - * @ param key a 32 - byte encryption key 
 + * @ param key a 32 - byte encryption key 
 * @ return an instance of the Realm class 
 * @ throws RealmMigrationNeededException The model classes have been changed and the Realm 
 - * must be migrated 
 - * @ throws RealmIOException Error when accessing underlying file 
 - * @ throws RealmException Other errors 
 + * must be migrated 
 + * @ throws RealmIOException Error when accessing underlying file 
 + * @ throws RealmException Other errors 
 * / 
 + @ SuppressWarnings ( " UnusedDeclaration " ) 
 public static Realm getInstance ( File writableFolder , byte [ ] key ) { 
 return Realm . create ( writableFolder , DEFAULT _ REALM _ NAME , key ) ; 
 } 
 
 / * * 
 * Realm static constructor 
 + * 
 * @ param writableFolder absolute path to a writable directory 
 - * @ param filename the name of the file to save the Realm to 
 - * @ param key a 32 - byte encryption key 
 + * @ param filename the name of the file to save the Realm to 
 + * @ param key a 32 - byte encryption key 
 * @ return an instance of the Realm class 
 * @ throws RealmMigrationNeededException The model classes have been changed and the Realm 
 - * must be migrated 
 - * @ throws RealmIOException Error when accessing underlying file 
 - * @ throws RealmException Other errors 
 + * must be migrated 
 + * @ throws RealmIOException Error when accessing underlying file 
 + * @ throws RealmException Other errors 
 * / 
 public static Realm create ( File writableFolder , String filename , byte [ ] key ) { 
 String absolutePath = new File ( writableFolder , filename ) . getAbsolutePath ( ) ; 
 @ @ - 218 , 20 + 232 , 15 @ @ public class Realm { 
 } 
 
 private static Realm createAndValidate ( String absolutePath , byte [ ] key , boolean validateSchema ) { 
 - ThreadRealm threadRealm = realms . get ( absolutePath ) ; 
 - boolean needsValidation = ( threadRealm = = null ) ; 
 - if ( threadRealm = = null ) { 
 - threadRealm = new ThreadRealm ( absolutePath , key ) ; 
 - } 
 - SoftReference < Realm > realmSoftReference = threadRealm . get ( ) ; 
 - Realm realm = realmSoftReference . get ( ) ; 
 + Map < String , Realm > realms = realmsCache . get ( ) ; 
 + Realm realm = realms . get ( absolutePath ) ; 
 + 
 if ( realm = = null ) { 
 - / / The garbage collector decided to get rid of the realm instance 
 - threadRealm = new ThreadRealm ( absolutePath , key ) ; 
 - realmSoftReference = threadRealm . get ( ) ; 
 - realm = realmSoftReference . get ( ) ; 
 + realm = new Realm ( absolutePath , key ) ; 
 + realms . put ( absolutePath , realm ) ; 
 + realmsCache . set ( realms ) ; 
 } 
 - if ( validateSchema & & needsValidation ) { 
 + if ( validateSchema ) { 
 Class < ? > validationClass ; 
 try { 
 validationClass = Class . forName ( " io . realm . ValidationList " ) ; 
 @ @ - 246 , 6 + 255 , 7 @ @ public class Realm { 
 } 
 List < String > proxyClasses ; 
 try { 
 + / / noinspection unchecked 
 proxyClasses = ( List < String > ) getProxyClassesMethod . invoke ( null ) ; 
 } catch ( IllegalAccessException e ) { 
 throw new RealmException ( " Could not execute the getProxyClasses method in the ValidationList class " ) ; 
 @ @ - 312 , 7 + 322 , 8 @ @ public class Realm { 
 } 
 List < String > fieldNames ; 
 try { 
 - fieldNames = ( List < String > ) fieldNamesMethod . invoke ( null ) ; 
 + / / noinspection unchecked 
 + fieldNames = ( List < String > ) fieldNamesMethod . invoke ( null ) ; 
 } catch ( IllegalAccessException e ) { 
 throw new RealmException ( " Could not execute the getFieldNames method in the generated " + generatedClassName + " class " ) ; 
 } catch ( InvocationTargetException e ) { 
 @ @ - 332 , 11 + 343 , 7 @ @ public class Realm { 
 columnIndices . put ( modelClassName , innerMap ) ; 
 } 
 } 
 - 
 - / / cache realm after validation 
 - realms . put ( absolutePath , threadRealm ) ; 
 - } 
 - finally { 
 + } finally { 
 realm . commitTransaction ( ) ; 
 } 
 } 
 @ @ - 344 , 28 + 351 , 11 @ @ public class Realm { 
 return realm ; 
 } 
 
 - / / This class stores soft - references to realm objects per thread per realm file 
 - private static class ThreadRealm extends ThreadLocal < SoftReference < Realm > > { 
 - private String absolutePath ; 
 - private byte [ ] key ; 
 - 
 - private ThreadRealm ( String absolutePath , byte [ ] key ) { 
 - this . absolutePath = absolutePath ; 
 - this . key = key ; 
 - } 
 - 
 - @ Override 
 - protected SoftReference < Realm > initialValue ( ) { 
 - Realm realm = new Realm ( absolutePath , key ) ; 
 - key = null ; 
 - return new SoftReference < Realm > ( realm ) ; 
 - } 
 - } 
 - 
 / * * 
 * Instantiates and adds a new object to the realm 
 - * @ return The new object 
 + * 
 * @ param clazz The Class of the object to create 
 + * @ return The new object 
 * @ throws RealmException An object could not be created 
 * / 
 public < E extends RealmObject > E createObject ( Class < E > clazz ) { 
 @ @ - 490 , 15 + 480 , 16 @ @ public class Realm { 
 simpleClassName = clazz . getSimpleName ( ) ; 
 simpleClassNames . put ( clazz , simpleClassName ) ; 
 } 
 - return transaction . hasTable ( TABLE _ PREFIX + simpleClassName ) ; 
 + return transaction . hasTable ( TABLE _ PREFIX + simpleClassName ) ; 
 } 
 
 / * * 
 * Returns a typed RealmQuery , which can be used to query for specific objects of this type 
 + * 
 * @ param clazz The class of the object which is to be queried for 
 * @ return A typed RealmQuery , which can be used to query for specific objects of this type 
 - * @ see io . realm . RealmQuery 
 * @ throws java . lang . RuntimeException Any other error 
 + * @ see io . realm . RealmQuery 
 * / 
 public < E extends RealmObject > RealmQuery < E > where ( Class < E > clazz ) { 
 return new RealmQuery < E > ( this , clazz ) ; 
 @ @ - 506 , 10 + 497 , 11 @ @ public class Realm { 
 
 / * * 
 * Get all objects of a specific Class 
 + * 
 * @ param clazz the Class to get objects of 
 * @ return A RealmResult list containing the objects 
 - * @ see io . realm . RealmResults 
 * @ throws java . lang . RuntimeException Any other error 
 + * @ see io . realm . RealmResults 
 * / 
 public < E extends RealmObject > RealmResults < E > allObjects ( Class < E > clazz ) { 
 return where ( clazz ) . findAll ( ) ; 
 @ @ - 519 , 6 + 511 , 7 @ @ public class Realm { 
 
 / * * 
 * Add a change listener to the Realm 
 + * 
 * @ param listener the change listener 
 * @ see io . realm . RealmChangeListener 
 * / 
 @ @ - 529 , 6 + 522 , 7 @ @ public class Realm { 
 
 / * * 
 * Remove the specified change listener 
 + * 
 * @ param listener the change listener to be removed 
 * @ see io . realm . RealmChangeListener 
 * / 
 @ @ - 541 , 6 + 535 , 7 @ @ public class Realm { 
 
 / * * 
 * Remove all user - defined change listeners 
 + * 
 * @ see io . realm . RealmChangeListener 
 * / 
 public void removeAllChangeListeners ( ) { 
 @ @ - 549 , 11 + 544 , 12 @ @ public class Realm { 
 } 
 
 void sendNotifications ( ) { 
 - for ( RealmChangeListener listener : changeListeners ) { 
 + for ( RealmChangeListener listener : changeListeners ) { 
 listener . onChange ( ) ; 
 } 
 } 
 
 + @ SuppressWarnings ( " UnusedDeclaration " ) 
 boolean hasChanged ( ) { 
 return sharedGroup . hasChanged ( ) ; 
 } 
 @ @ - 572 , 7 + 568 , 7 @ @ public class Realm { 
 * transaction within a write transaction an exception is thrown . 
 * 
 * @ throws io . realm . exceptions . RealmException If already in a write transaction . 
 - * @ throws java . lang . RuntimeException Any other error . 
 + * @ throws java . lang . RuntimeException Any other error . 
 * / 
 public void beginTransaction ( ) { 
 transaction . promoteToWrite ( ) ; 
 @ @ - 580 , 6 + 576 , 7 @ @ public class Realm { 
 
 / * * 
 * Commits a write transaction 
 + * 
 * @ throws java . lang . RuntimeException Any other error 
 * / 
 public void commitTransaction ( ) { 
 @ @ - 597 , 6 + 594 , 7 @ @ public class Realm { 
 
 / * * 
 * Remove all objects of the specified class 
 + * 
 * @ param classSpec The class which objects should be removed 
 * @ throws java . lang . RuntimeException Any other error 
 * / 
 @ @ - 627 , 17 + 625 , 22 @ @ public class Realm { 
 migrateRealmAtPath ( realmPath , null , migration ) ; 
 } 
 
 - static public void migrateRealmAtPath ( String realmPath , byte [ ] key , RealmMigration migration ) { 
 + static public void migrateRealmAtPath ( String realmPath , byte [ ] key , RealmMigration migration ) { 
 Realm realm = Realm . createAndValidate ( realmPath , key , false ) ; 
 realm . beginTransaction ( ) ; 
 realm . setVersion ( migration . execute ( realm , realm . getVersion ( ) ) ) ; 
 realm . commitTransaction ( ) ; 
 + 
 + Map < String , Realm > realms = realmsCache . get ( ) ; 
 + realms . put ( realmPath , new Realm ( realmPath , key ) ) ; 
 + realmsCache . set ( realms ) ; 
 } 
 
 / * * 
 * Delete the Realm file from the filesystem for the default Realm ( named " default . realm " ) . 
 * The realm must be unused and closed before calling this method . 
 * WARNING : Your Realm must not be open ( typically when your app launch ) . 
 + * 
 * @ param context an Android context . 
 * @ return false if a file could not be deleted . The failing file will be logged . 
 * @ see io . realm . Realm # clear ( Class ) 
 @ @ - 649 , 7 + 652 , 8 @ @ public class Realm { 
 / * * 
 * Delete the Realm file from the filesystem for a custom named Realm . 
 * The realm must be unused and closed before calling this method . 
 - * @ param context an Android context . 
 + * 
 + * @ param context an Android context . 
 * @ param fileName the name of the custom Realm ( i . e . " myCustomRealm . realm " ) . 
 * @ return false if a file could not be deleted . The failing file will be logged . 
 * / 
 diff - - git a / realm / src / main / java / io / realm / internal / android / LooperThread . java b / realm / src / main / java / io / realm / internal / android / LooperThread . java 
 index c9692a1 . . 7edd0d1 100644 
 - - - a / realm / src / main / java / io / realm / internal / android / LooperThread . java 
 + + + b / realm / src / main / java / io / realm / internal / android / LooperThread . java 
 @ @ - 19 , 7 + 19 , 10 @ @ package io . realm . internal . android ; 
 import android . os . Handler ; 
 import android . os . Looper ; 
 import android . os . Message ; 
 + import android . util . Log ; 
 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 import java . util . Map ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 
 @ @ - 29 , 9 + 32 , 12 @ @ import java . util . concurrent . ConcurrentHashMap ; 
 public class LooperThread extends Thread { 
 / / Message types 
 public static final int REALM _ CHANGED = 3 ; 
 - 
 public static final Map < Handler , Integer > handlers = new ConcurrentHashMap < Handler , Integer > ( ) ; 
 + 
 public Handler handler ; 
 + public List < RuntimeException > exceptions = new ArrayList < RuntimeException > ( ) ; 
 + 
 + private static final String TAG = LooperThread . class . getName ( ) ; 
 private static LooperThread instance ; 
 
 / / private because it ' s a singleton 
 @ @ - 59 , 8 + 65 , 16 @ @ public class LooperThread extends Thread { 
 if ( message . arg1 = = REALM _ CHANGED ) { 
 for ( Map . Entry < Handler , Integer > entry : handlers . entrySet ( ) ) { 
 if ( entry . getValue ( ) = = message . arg2 ) { 
 - if ( ! entry . getKey ( ) . hasMessages ( REALM _ CHANGED ) ) { 
 - entry . getKey ( ) . sendEmptyMessage ( REALM _ CHANGED ) ; 
 + Handler currentHandler = entry . getKey ( ) ; 
 + if ( currentHandler . getLooper ( ) . getThread ( ) . isAlive ( ) & & 
 + ! currentHandler . hasMessages ( REALM _ CHANGED ) ) 
 + { 
 + try { 
 + currentHandler . sendEmptyMessage ( REALM _ CHANGED ) ; 
 + } catch ( RuntimeException e ) { 
 + exceptions . add ( e ) ; 
 + Log . w ( TAG , e . getMessage ( ) ) ; 
 + } 
 } 
 } 
 }
