BLEU SCORE: 0.016087046643979717

TEST MSG: Only cast type once .
GENERATED MSG: Adding minDate and maxDate to RealmResults , adding add to RealmList

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 83a92bc . . 36000c1 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 378 , 7 + 378 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public Number min ( String fieldName ) { <nl> realm . checkIfValid ( ) ; <nl> long columnIndex = getColumnIndexForSort ( fieldName ) ; <nl> - return ( Number ) collection . aggregate ( io . realm . internal . Collection . Aggregate . MINIMUM , columnIndex ) ; <nl> + return collection . aggregateNumber ( io . realm . internal . Collection . Aggregate . MINIMUM , columnIndex ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 387 , 7 + 387 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public Date minDate ( String fieldName ) { <nl> realm . checkIfValid ( ) ; <nl> long columnIndex = getColumnIndexForSort ( fieldName ) ; <nl> - return ( Date ) collection . aggregate ( Collection . Aggregate . MINIMUM , columnIndex ) ; <nl> + return collection . aggregateDate ( Collection . Aggregate . MINIMUM , columnIndex ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 396 , 7 + 396 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public Number max ( String fieldName ) { <nl> realm . checkIfValid ( ) ; <nl> long columnIndex = getColumnIndexForSort ( fieldName ) ; <nl> - return ( Number ) collection . aggregate ( Collection . Aggregate . MAXIMUM , columnIndex ) ; <nl> + return collection . aggregateNumber ( Collection . Aggregate . MAXIMUM , columnIndex ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 412 , 7 + 412 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public Date maxDate ( String fieldName ) { <nl> realm . checkIfValid ( ) ; <nl> long columnIndex = getColumnIndexForSort ( fieldName ) ; <nl> - return ( Date ) collection . aggregate ( Collection . Aggregate . MAXIMUM , columnIndex ) ; <nl> + return collection . aggregateDate ( Collection . Aggregate . MAXIMUM , columnIndex ) ; <nl> } <nl> <nl> <nl> @ @ - 422 , 7 + 422 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> public Number sum ( String fieldName ) { <nl> realm . checkIfValid ( ) ; <nl> long columnIndex = getColumnIndexForSort ( fieldName ) ; <nl> - return ( Number ) collection . aggregate ( Collection . Aggregate . SUM , columnIndex ) ; <nl> + return collection . aggregateNumber ( Collection . Aggregate . SUM , columnIndex ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 432 , 9 + 432 , 8 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> realm . checkIfValid ( ) ; <nl> long columnIndex = getColumnIndexForSort ( fieldName ) ; <nl> <nl> - / / FIXME : Should we change return type to Double ? <nl> - Number sum = ( Number ) collection . aggregate ( Collection . Aggregate . AVERAGE , columnIndex ) ; <nl> - return sum . doubleValue ( ) ; <nl> + Number avg = collection . aggregateNumber ( Collection . Aggregate . AVERAGE , columnIndex ) ; <nl> + return avg . doubleValue ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index 1443bf7 . . 7415f3c 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ <nl> <nl> package io . realm . internal ; <nl> <nl> + import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> <nl> @ @ - 141 , 8 + 142 , 14 @ @ public final class Collection implements NativeObject { <nl> return new TableQuery ( this . context , this . getTable ( ) , nativeQueryPtr ) ; <nl> } <nl> <nl> - public Object aggregate ( Aggregate aggregateMethod , long columnIndex ) { <nl> - return nativeAggregate ( nativePtr , columnIndex , aggregateMethod . getValue ( ) ) ; <nl> + public Number aggregateNumber ( Aggregate aggregateMethod , long columnIndex ) { <nl> + Number results = ( Number ) nativeAggregate ( nativePtr , columnIndex , aggregateMethod . getValue ( ) ) ; <nl> + return results ; <nl> + } <nl> + <nl> + public Date aggregateDate ( Aggregate aggregateMethod , long columnIndex ) { <nl> + Date date = ( Date ) nativeAggregate ( nativePtr , columnIndex , aggregateMethod . getValue ( ) ) ; <nl> + return date ; <nl> } <nl> <nl> public long size ( ) {
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index af9698b . . b5ba30e 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 4 , 6 + 4 , 8 @ @ Beta - 0 . 3 . 0 <nl> = = = = = = = <nl> <nl> * Renaming beginWrite to beginTransaction and commit to commitTransaction <nl> + * Adding minDate and maxDate to RealmResults <nl> + * Adding add ( object ) to RealmList <nl> <nl> Bug Fixes <nl> = = = = = = = = = <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> index f2944de . . 2ba2604 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 34 , 7 + 34 , 14 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> <nl> @ Override <nl> public void add ( int location , E object ) { <nl> + view . insert ( location , object . realmGetRow ( ) . getIndex ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean add ( E object ) { <nl> view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; <nl> + return true ; <nl> + <nl> } <nl> <nl> @ Override <nl> diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java <nl> index d1d8c30 . . dd4895b 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / src / main / java / io / realm / RealmResults . java <nl> @ @ - 18 , 9 + 18 , 11 @ @ package io . realm ; <nl> <nl> <nl> import java . util . AbstractList ; <nl> + import java . util . Date ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> + import io . realm . internal . ColumnType ; <nl> import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableView ; <nl> <nl> @ @ - 128 , 7 + 130 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> * <nl> * @ param fieldName The field to look for a minimum on . Only int , float , and double <nl> * are supported . <nl> - * @ return <nl> + * @ return The minimum value . <nl> * / <nl> public Number min ( String fieldName ) { <nl> / / TODO : Date <nl> @ @ - 145 , 6 + 147 , 21 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Find the oldest date . <nl> + * <nl> + * @ param fieldName The field to look for the old / minimum date . <nl> + * @ return The minimum date . <nl> + * / <nl> + public Date minDate ( String fieldName ) { <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + if ( table . getColumnType ( columnIndex ) = = ColumnType . DATE ) { <nl> + return table . minimumDate ( columnIndex ) ; <nl> + } <nl> + else { <nl> + throw new RuntimeException ( " Wrong type - Date excepted " ) ; <nl> + } <nl> + } <nl> <nl> / * * <nl> * Find the maximum value of a field . <nl> @ @ - 168 , 6 + 185 , 22 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Find the youngest date . <nl> + * <nl> + * @ param fieldName The field to look for the youngest / maximum date . <nl> + * @ return The maximum date . <nl> + * / <nl> + public Date maxDate ( String fieldName ) { <nl> + long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> + if ( table . getColumnType ( columnIndex ) = = ColumnType . DATE ) { <nl> + return table . minimumDate ( columnIndex ) ; <nl> + } <nl> + else { <nl> + throw new RuntimeException ( " Wrong type - Date excepted " ) ; <nl> + } <nl> + } <nl> + <nl> <nl> / * * <nl> * Calculate the sum of a field .

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 83a92bc . . 36000c1 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 378 , 7 + 378 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public Number min ( String fieldName ) { 
 realm . checkIfValid ( ) ; 
 long columnIndex = getColumnIndexForSort ( fieldName ) ; 
 - return ( Number ) collection . aggregate ( io . realm . internal . Collection . Aggregate . MINIMUM , columnIndex ) ; 
 + return collection . aggregateNumber ( io . realm . internal . Collection . Aggregate . MINIMUM , columnIndex ) ; 
 } 
 
 / * * 
 @ @ - 387 , 7 + 387 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public Date minDate ( String fieldName ) { 
 realm . checkIfValid ( ) ; 
 long columnIndex = getColumnIndexForSort ( fieldName ) ; 
 - return ( Date ) collection . aggregate ( Collection . Aggregate . MINIMUM , columnIndex ) ; 
 + return collection . aggregateDate ( Collection . Aggregate . MINIMUM , columnIndex ) ; 
 } 
 
 / * * 
 @ @ - 396 , 7 + 396 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public Number max ( String fieldName ) { 
 realm . checkIfValid ( ) ; 
 long columnIndex = getColumnIndexForSort ( fieldName ) ; 
 - return ( Number ) collection . aggregate ( Collection . Aggregate . MAXIMUM , columnIndex ) ; 
 + return collection . aggregateNumber ( Collection . Aggregate . MAXIMUM , columnIndex ) ; 
 } 
 
 / * * 
 @ @ - 412 , 7 + 412 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public Date maxDate ( String fieldName ) { 
 realm . checkIfValid ( ) ; 
 long columnIndex = getColumnIndexForSort ( fieldName ) ; 
 - return ( Date ) collection . aggregate ( Collection . Aggregate . MAXIMUM , columnIndex ) ; 
 + return collection . aggregateDate ( Collection . Aggregate . MAXIMUM , columnIndex ) ; 
 } 
 
 
 @ @ - 422 , 7 + 422 , 7 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 public Number sum ( String fieldName ) { 
 realm . checkIfValid ( ) ; 
 long columnIndex = getColumnIndexForSort ( fieldName ) ; 
 - return ( Number ) collection . aggregate ( Collection . Aggregate . SUM , columnIndex ) ; 
 + return collection . aggregateNumber ( Collection . Aggregate . SUM , columnIndex ) ; 
 } 
 
 / * * 
 @ @ - 432 , 9 + 432 , 8 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 realm . checkIfValid ( ) ; 
 long columnIndex = getColumnIndexForSort ( fieldName ) ; 
 
 - / / FIXME : Should we change return type to Double ? 
 - Number sum = ( Number ) collection . aggregate ( Collection . Aggregate . AVERAGE , columnIndex ) ; 
 - return sum . doubleValue ( ) ; 
 + Number avg = collection . aggregateNumber ( Collection . Aggregate . AVERAGE , columnIndex ) ; 
 + return avg . doubleValue ( ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index 1443bf7 . . 7415f3c 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 16 , 6 + 16 , 7 @ @ 
 
 package io . realm . internal ; 
 
 + import java . util . Date ; 
 import java . util . List ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 
 @ @ - 141 , 8 + 142 , 14 @ @ public final class Collection implements NativeObject { 
 return new TableQuery ( this . context , this . getTable ( ) , nativeQueryPtr ) ; 
 } 
 
 - public Object aggregate ( Aggregate aggregateMethod , long columnIndex ) { 
 - return nativeAggregate ( nativePtr , columnIndex , aggregateMethod . getValue ( ) ) ; 
 + public Number aggregateNumber ( Aggregate aggregateMethod , long columnIndex ) { 
 + Number results = ( Number ) nativeAggregate ( nativePtr , columnIndex , aggregateMethod . getValue ( ) ) ; 
 + return results ; 
 + } 
 + 
 + public Date aggregateDate ( Aggregate aggregateMethod , long columnIndex ) { 
 + Date date = ( Date ) nativeAggregate ( nativePtr , columnIndex , aggregateMethod . getValue ( ) ) ; 
 + return date ; 
 } 
 
 public long size ( ) {

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index af9698b . . b5ba30e 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 4 , 6 + 4 , 8 @ @ Beta - 0 . 3 . 0 
 = = = = = = = 
 
 * Renaming beginWrite to beginTransaction and commit to commitTransaction 
 + * Adding minDate and maxDate to RealmResults 
 + * Adding add ( object ) to RealmList 
 
 Bug Fixes 
 = = = = = = = = = 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 index f2944de . . 2ba2604 100644 
 - - - a / realm / src / main / java / io / realm / RealmList . java 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 34 , 7 + 34 , 14 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 
 @ Override 
 public void add ( int location , E object ) { 
 + view . insert ( location , object . realmGetRow ( ) . getIndex ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public boolean add ( E object ) { 
 view . add ( object . realmGetRow ( ) . getIndex ( ) ) ; 
 + return true ; 
 + 
 } 
 
 @ Override 
 diff - - git a / realm / src / main / java / io / realm / RealmResults . java b / realm / src / main / java / io / realm / RealmResults . java 
 index d1d8c30 . . dd4895b 100644 
 - - - a / realm / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / src / main / java / io / realm / RealmResults . java 
 @ @ - 18 , 9 + 18 , 11 @ @ package io . realm ; 
 
 
 import java . util . AbstractList ; 
 + import java . util . Date ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 + import io . realm . internal . ColumnType ; 
 import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableView ; 
 
 @ @ - 128 , 7 + 130 , 7 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 * 
 * @ param fieldName The field to look for a minimum on . Only int , float , and double 
 * are supported . 
 - * @ return 
 + * @ return The minimum value . 
 * / 
 public Number min ( String fieldName ) { 
 / / TODO : Date 
 @ @ - 145 , 6 + 147 , 21 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 } 
 } 
 
 + / * * 
 + * Find the oldest date . 
 + * 
 + * @ param fieldName The field to look for the old / minimum date . 
 + * @ return The minimum date . 
 + * / 
 + public Date minDate ( String fieldName ) { 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + if ( table . getColumnType ( columnIndex ) = = ColumnType . DATE ) { 
 + return table . minimumDate ( columnIndex ) ; 
 + } 
 + else { 
 + throw new RuntimeException ( " Wrong type - Date excepted " ) ; 
 + } 
 + } 
 
 / * * 
 * Find the maximum value of a field . 
 @ @ - 168 , 6 + 185 , 22 @ @ public class RealmResults < E extends RealmObject > extends AbstractList < E > { 
 } 
 } 
 
 + / * * 
 + * Find the youngest date . 
 + * 
 + * @ param fieldName The field to look for the youngest / maximum date . 
 + * @ return The maximum date . 
 + * / 
 + public Date maxDate ( String fieldName ) { 
 + long columnIndex = table . getColumnIndex ( fieldName ) ; 
 + if ( table . getColumnType ( columnIndex ) = = ColumnType . DATE ) { 
 + return table . minimumDate ( columnIndex ) ; 
 + } 
 + else { 
 + throw new RuntimeException ( " Wrong type - Date excepted " ) ; 
 + } 
 + } 
 + 
 
 / * * 
 * Calculate the sum of a field .
