BLEU SCORE: 0.024893534183931972

TEST MSG: add javadoc
GENERATED MSG: Fixed unit tests . Renamed version to SchemaVersion

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index d9c831e . . 427aebc 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 168 , 7 + 168 , 20 @ @ public final class SharedRealm implements Closeable , NativeObject { <nl> void onSchemaVersionChanged ( long currentVersion ) ; <nl> } <nl> <nl> + / * * <nl> + * The migration callback which will be called when the expected schema doesn ' t match the existing one in <nl> + * { @ link # updateSchema ( OsSchemaInfo , long , MigrationCallback ) } . <nl> + * / <nl> public interface MigrationCallback { <nl> + <nl> + / * * <nl> + * Call back function . <nl> + * <nl> + * @ param sharedRealm the same { @ link SharedRealm } instance of which <nl> + * { @ link # updateSchema ( OsSchemaInfo , long , MigrationCallback ) } was called on . <nl> + * @ param oldVersion the schema version of the existing Realm file . <nl> + * @ param newVersion the expected schema version after migration . <nl> + * / <nl> void onMigrationNeeded ( SharedRealm sharedRealm , long oldVersion , long newVersion ) ; <nl> } <nl> <nl> @ @ - 375 , 6 + 388 , 7 @ @ public final class SharedRealm implements Closeable , NativeObject { <nl> * <nl> * @ param schemaInfo the expected schema . <nl> * @ param version the target version . <nl> + * @ param migrationCallback the callback will be called when the schema doesn ' t match . <nl> * / <nl> public void updateSchema ( OsSchemaInfo schemaInfo , long version , MigrationCallback migrationCallback ) { <nl> nativeUpdateSchema ( nativePtr , schemaInfo . getNativePtr ( ) , version , migrationCallback ) ; <nl> @ @ - 490 , 6 + 504 , 13 @ @ public final class SharedRealm implements Closeable , NativeObject { <nl> pendingRows . clear ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Called from JNI when the expected schema doesn ' t match the existing one . <nl> + * <nl> + * @ param callback the { @ link MigrationCallback } in the { @ link RealmConfiguration } . <nl> + * @ param oldVersion the schema version of the existing Realm file . <nl> + * @ param newVersion the expected schema version after migration . <nl> + * / <nl> @ KeepMember <nl> private void runMigrationCallback ( MigrationCallback callback , long oldVersion , long newVersion ) { <nl> callback . onMigrationNeeded ( this , oldVersion , newVersion ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / IOSRealmTests . java b / realm / src / androidTest / java / io / realm / IOSRealmTests . java <nl> index 006b715 . . e56a1d6 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / IOSRealmTests . java <nl> + + + b / realm / src / androidTest / java / io / realm / IOSRealmTests . java <nl> @ @ - 107 , 7 + 107 , 6 @ @ public class IOSRealmTests extends AndroidTestCase { <nl> . name ( REALM _ NAME ) <nl> . encryptionKey ( getIOSKey ( ) ) <nl> . schema ( IOSAllTypes . class , IOSChild . class ) <nl> - . deleteRealmBeforeOpening ( ) <nl> . create ( ) <nl> ) ; <nl> <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> index 106aa84 . . 9aa0e92 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java <nl> @ @ - 110 , 7 + 110 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> <nl> public void testNegativeVersionThrows ( ) { <nl> try { <nl> - new RealmConfiguration . Builder ( getContext ( ) ) . version ( - 1 ) . create ( ) ; <nl> + new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( - 1 ) . create ( ) ; <nl> } catch ( IllegalArgumentException expected ) { <nl> return ; <nl> } <nl> @ @ - 119 , 11 + 119 , 11 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> <nl> public void testVersionLessThanDiscVersionThrows ( ) { <nl> Realm . deleteRealmFile ( new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ) ; <nl> - Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 42 ) . create ( ) ) ; <nl> + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . create ( ) ) ; <nl> realm . close ( ) ; <nl> <nl> try { <nl> - Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 1 ) . create ( ) ) ; <nl> + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 1 ) . create ( ) ) ; <nl> } catch ( IllegalArgumentException expected ) { <nl> return ; <nl> } <nl> @ @ - 133 , 14 + 133 , 14 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> public void testVersionEqualWhenSchemaChangesThrows ( ) { <nl> Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> . deleteRealmBeforeOpening ( ) <nl> - . version ( 42 ) <nl> + . schemaVersion ( 42 ) <nl> . schema ( Dog . class ) <nl> . create ( ) ) ; <nl> realm . close ( ) ; <nl> <nl> try { <nl> Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> - . version ( 42 ) <nl> + . schemaVersion ( 42 ) <nl> . schema ( AllTypesPrimaryKey . class ) <nl> . create ( ) ) ; <nl> } catch ( RealmMigrationNeededException expected ) { <nl> @ @ - 187 , 7 + 187 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> . name ( " foo . realm " ) <nl> . encryptionKey ( key ) <nl> - . version ( 42 ) <nl> + . schemaVersion ( 42 ) <nl> . migration ( new RealmMigration ( ) { <nl> @ Override <nl> public long execute ( Realm realm , long version ) { <nl> @ @ - 206 , 7 + 206 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) <nl> . deleteRealmBeforeOpening ( ) <nl> . schema ( Dog . class ) <nl> - . version ( 0 ) <nl> + . schemaVersion ( 0 ) <nl> . create ( ) ; <nl> Realm . deleteRealmFile ( config ) ; <nl> Realm realm = Realm . getInstance ( config ) ; <nl> @ @ - 218 , 7 + 218 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { <nl> <nl> realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) <nl> . schema ( Owner . class , Dog . class ) <nl> - . version ( 1 ) <nl> + . schemaVersion ( 1 ) <nl> . deleteRealmIfMigrationNeeded ( ) <nl> . create ( ) ) ; <nl> assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index d55824f . . 4b59342 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 147 , 8 + 147 , 8 @ @ public class RealmTest extends AndroidTestCase { <nl> File folder = new File ( " / " ) ; <nl> try { <nl> Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( folder ) . create ( ) ) ; <nl> - fail ( " Pointing to a folder with no write permission should throw an error " ) ; <nl> - } catch ( RealmIOException expected ) { <nl> + fail ( " Pointing to a folder with no write permission should throw an IllegalArgumentException " ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> } <nl> } <nl> <nl> @ @ - 216 , 7 + 216 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> realm = Realm . getInstance ( ( Context ) null ) ; / / throws when c . getDirectory ( ) is called ; <nl> / / has nothing to do with Realm <nl> fail ( " Should throw an exception " ) ; <nl> - } catch ( NullPointerException ignore ) { <nl> + } catch ( IllegalArgumentException ignore ) { <nl> } finally { <nl> if ( realm ! = null ) { <nl> realm . close ( ) ; <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 59a4ad3 . . 9ceb5a9 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 602 , 7 + 602 , 7 @ @ public final class Realm implements Closeable { <nl> <nl> / / Check versions of Realm <nl> long currentVersion = realm . getVersion ( ) ; <nl> - long requiredVersion = config . getVersion ( ) ; <nl> + long requiredVersion = config . getSchemaVersion ( ) ; <nl> if ( currentVersion ! = UNVERSIONED & & currentVersion < requiredVersion ) { <nl> realm . close ( ) ; <nl> throw new RealmMigrationNeededException ( String . format ( " Realm on disc need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; <nl> @ @ - 662 , 7 + 662 , 7 @ @ public final class Realm implements Closeable { <nl> realm . beginTransaction ( ) ; <nl> if ( version = = UNVERSIONED ) { <nl> commitNeeded = true ; <nl> - realm . setVersion ( config . getVersion ( ) ) ; <nl> + realm . setVersion ( config . getSchemaVersion ( ) ) ; <nl> } <nl> for ( String className : proxyClasses ) { <nl> String [ ] splitted = className . split ( " \ \ . " ) ; <nl> diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> index 1417c13 . . 7b6d861 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 41 , 14 + 41 , 14 @ @ import io . realm . internal . migration . SetVersionNumberMigration ; <nl> * This will create a RealmConfiguration with the following properties <nl> * - Realm file is called " default . realm " <nl> * - It is saved in Context . getFilesDir ( ) <nl> - * - It has it ' s version set to 0 . <nl> + * - It has it ' s schema version set to 0 . <nl> * / <nl> public class RealmConfiguration { <nl> <nl> private final File realmDir ; <nl> private final String realmName ; <nl> private final byte [ ] key ; <nl> - private final int version ; <nl> + private final int schemaVersion ; <nl> private final RealmMigration migration ; <nl> private final boolean deleteRealmIfMigrationNeeded ; <nl> private final boolean deleteRealmBeforeOpening ; <nl> @ @ - 58 , 10 + 58 , 10 @ @ public class RealmConfiguration { <nl> this . realmDir = builder . folder ; <nl> this . realmName = builder . fileName ; <nl> this . key = builder . key ; <nl> - this . version = builder . version ; <nl> + this . schemaVersion = builder . schemaVersion ; <nl> this . deleteRealmIfMigrationNeeded = builder . deleteRealmIfMigrationNeeded ; <nl> this . deleteRealmBeforeOpening = builder . deleteRealmBeforeOpening ; <nl> - this . migration = ( builder . migration ! = null ) ? builder . migration : new SetVersionNumberMigration ( version ) ; <nl> + this . migration = ( builder . migration ! = null ) ? builder . migration : new SetVersionNumberMigration ( schemaVersion ) ; <nl> this . schema = builder . schema ; <nl> } <nl> <nl> @ @ - 77 , 8 + 77 , 8 @ @ public class RealmConfiguration { <nl> return key ; <nl> } <nl> <nl> - public int getVersion ( ) { <nl> - return version ; <nl> + public int getSchemaVersion ( ) { <nl> + return schemaVersion ; <nl> } <nl> <nl> public RealmMigration getMigration ( ) { <nl> @ @ - 108 , 7 + 108 , 7 @ @ public class RealmConfiguration { <nl> private File folder = null ; <nl> private String fileName = " default . realm " ; <nl> private byte [ ] key = null ; <nl> - private int version = 0 ; <nl> + private int schemaVersion = 0 ; <nl> private RealmMigration migration = null ; <nl> private boolean deleteRealmIfMigrationNeeded = false ; <nl> private boolean deleteRealmBeforeOpening = false ; <nl> @ @ - 119 , 9 + 119 , 14 @ @ public class RealmConfiguration { <nl> * The Realm file in the provided folder . <nl> * / <nl> public Builder ( File writeableFolder ) { <nl> - if ( folder = = null | | ! folder . isDirectory ( ) ) { <nl> - throw new IllegalArgumentException ( ( " An existing folder must be provided . Yours was " + ( folder ! = null ? folder . getAbsolutePath ( ) : " null " ) ) ) ; <nl> + if ( writeableFolder = = null | | ! writeableFolder . isDirectory ( ) ) { <nl> + throw new IllegalArgumentException ( ( " An existing folder must be provided . " + <nl> + " Yours was " + ( writeableFolder ! = null ? writeableFolder . getAbsolutePath ( ) : " null " ) ) ) ; <nl> } <nl> + if ( ! writeableFolder . canWrite ( ) ) { <nl> + throw new IllegalArgumentException ( " Folder is not writeable : " + writeableFolder . getAbsolutePath ( ) ) ; <nl> + } <nl> + <nl> this . folder = writeableFolder ; <nl> } <nl> <nl> @ @ - 165 , 23 + 170 , 23 @ @ public class RealmConfiguration { <nl> } <nl> <nl> / * * <nl> - * Set the version of the Realm . This must be equal to or higher than the version of any existing Realm file . <nl> - * If the version is higher than an already existing Realm , a migration is needed . <nl> + * Set the schema version of the Realm . This must be equal to or higher than the schema version of any existing <nl> + * Realm file . If the schema version is higher than an already existing Realm , a migration is needed . <nl> * <nl> * If no migration code is provided , Realm will compare the on - disc schema of the Realm with the <nl> * { @ link io . realm . RealmObject } ' s defined . <nl> * <nl> - * - If they match , the version number will automatically be increased to the new version . <nl> + * - If they match , the schema version number will automatically be increased to the new schema version . <nl> * - If not , a { @ link io . realm . exceptions . RealmMigrationNeededException } will be thrown . This behavior can be <nl> * overridden by using { @ link # deleteRealmIfMigrationNeeded ( ) } . <nl> * <nl> * @ see # migration ( RealmMigration ) <nl> * / <nl> - public Builder version ( int version ) { <nl> - if ( version < 0 ) { <nl> - throw new IllegalArgumentException ( " Realm version numbers must be 0 ( zero ) or higher . Yours was : " + version ) ; <nl> + public Builder schemaVersion ( int schemaVersion ) { <nl> + if ( schemaVersion < 0 ) { <nl> + throw new IllegalArgumentException ( " Realm schema version numbers must be 0 ( zero ) or higher . Yours was : " + schemaVersion ) ; <nl> } <nl> - this . version = version ; <nl> + this . schemaVersion = schemaVersion ; <nl> return this ; <nl> } <nl> <nl> diff - - git a / realm / src / main / java / io / realm / RealmMigration . java b / realm / src / main / java / io / realm / RealmMigration . java <nl> index 5e1843a . . 214aa2f 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmMigration . java <nl> + + + b / realm / src / main / java / io / realm / RealmMigration . java <nl> @ @ - 21 , 24 + 21 , 24 @ @ package io . realm ; <nl> * The schema for a Realm is defined by all classes in a project that extend <nl> * { @ link io . realm . RealmObject } , so any changes to these classes will require a migration . <nl> * <nl> - * To support migrations from any previous version to the newest , the following pattern is <nl> + * To support migrations from any previous schemaVersion to the newest , the following pattern is <nl> * recommended when writing a migration : <nl> * <nl> * < pre > <nl> * public class CustomMigration implements RealmMigration { <nl> * \ @ Override <nl> - * public long execute ( Realm realm , long version ) { <nl> - * if ( version = = 0 ) { <nl> + * public long execute ( Realm realm , long schemaVersion ) { <nl> + * if ( schemaVersion = = 0 ) { <nl> * / / Migrate from v0 to v1 <nl> - * version + + ; <nl> + * schemaVersion + + ; <nl> * } <nl> * <nl> - * if ( version = = 0 ) { <nl> + * if ( schemaVersion = = 0 ) { <nl> * / / Migrate from v0 to v1 <nl> - * version + + ; <nl> + * schemaVersion + + ; <nl> * } <nl> * <nl> - * return version ; <nl> + * return schemaVersion ; <nl> * } <nl> * } <nl> * < / pre > <nl> @ @ - 56 , 8 + 56 , 8 @ @ public interface RealmMigration { <nl> * Implement this method in your subclass to perform migration . <nl> * <nl> * @ param realm The Realm on which to perform the migration . <nl> - * @ param version The version of the Realm at the start of the migration . <nl> - * @ return The version of the Realm after executing the migration . <nl> + * @ param version The schemaVersion of the Realm at the start of the migration . <nl> + * @ return The schemaVersion of the Realm after executing the migration . <nl> * / <nl> public long execute ( Realm realm , long version ) ; <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index d9c831e . . 427aebc 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 168 , 7 + 168 , 20 @ @ public final class SharedRealm implements Closeable , NativeObject { 
 void onSchemaVersionChanged ( long currentVersion ) ; 
 } 
 
 + / * * 
 + * The migration callback which will be called when the expected schema doesn ' t match the existing one in 
 + * { @ link # updateSchema ( OsSchemaInfo , long , MigrationCallback ) } . 
 + * / 
 public interface MigrationCallback { 
 + 
 + / * * 
 + * Call back function . 
 + * 
 + * @ param sharedRealm the same { @ link SharedRealm } instance of which 
 + * { @ link # updateSchema ( OsSchemaInfo , long , MigrationCallback ) } was called on . 
 + * @ param oldVersion the schema version of the existing Realm file . 
 + * @ param newVersion the expected schema version after migration . 
 + * / 
 void onMigrationNeeded ( SharedRealm sharedRealm , long oldVersion , long newVersion ) ; 
 } 
 
 @ @ - 375 , 6 + 388 , 7 @ @ public final class SharedRealm implements Closeable , NativeObject { 
 * 
 * @ param schemaInfo the expected schema . 
 * @ param version the target version . 
 + * @ param migrationCallback the callback will be called when the schema doesn ' t match . 
 * / 
 public void updateSchema ( OsSchemaInfo schemaInfo , long version , MigrationCallback migrationCallback ) { 
 nativeUpdateSchema ( nativePtr , schemaInfo . getNativePtr ( ) , version , migrationCallback ) ; 
 @ @ - 490 , 6 + 504 , 13 @ @ public final class SharedRealm implements Closeable , NativeObject { 
 pendingRows . clear ( ) ; 
 } 
 
 + / * * 
 + * Called from JNI when the expected schema doesn ' t match the existing one . 
 + * 
 + * @ param callback the { @ link MigrationCallback } in the { @ link RealmConfiguration } . 
 + * @ param oldVersion the schema version of the existing Realm file . 
 + * @ param newVersion the expected schema version after migration . 
 + * / 
 @ KeepMember 
 private void runMigrationCallback ( MigrationCallback callback , long oldVersion , long newVersion ) { 
 callback . onMigrationNeeded ( this , oldVersion , newVersion ) ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / IOSRealmTests . java b / realm / src / androidTest / java / io / realm / IOSRealmTests . java 
 index 006b715 . . e56a1d6 100644 
 - - - a / realm / src / androidTest / java / io / realm / IOSRealmTests . java 
 + + + b / realm / src / androidTest / java / io / realm / IOSRealmTests . java 
 @ @ - 107 , 7 + 107 , 6 @ @ public class IOSRealmTests extends AndroidTestCase { 
 . name ( REALM _ NAME ) 
 . encryptionKey ( getIOSKey ( ) ) 
 . schema ( IOSAllTypes . class , IOSChild . class ) 
 - . deleteRealmBeforeOpening ( ) 
 . create ( ) 
 ) ; 
 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 index 106aa84 . . 9aa0e92 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmConfigurationTest . java 
 @ @ - 110 , 7 + 110 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 
 public void testNegativeVersionThrows ( ) { 
 try { 
 - new RealmConfiguration . Builder ( getContext ( ) ) . version ( - 1 ) . create ( ) ; 
 + new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( - 1 ) . create ( ) ; 
 } catch ( IllegalArgumentException expected ) { 
 return ; 
 } 
 @ @ - 119 , 11 + 119 , 11 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 
 public void testVersionLessThanDiscVersionThrows ( ) { 
 Realm . deleteRealmFile ( new RealmConfiguration . Builder ( getContext ( ) ) . create ( ) ) ; 
 - Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 42 ) . create ( ) ) ; 
 + Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 42 ) . create ( ) ) ; 
 realm . close ( ) ; 
 
 try { 
 - Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . version ( 1 ) . create ( ) ) ; 
 + Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) . schemaVersion ( 1 ) . create ( ) ) ; 
 } catch ( IllegalArgumentException expected ) { 
 return ; 
 } 
 @ @ - 133 , 14 + 133 , 14 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 public void testVersionEqualWhenSchemaChangesThrows ( ) { 
 Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 . deleteRealmBeforeOpening ( ) 
 - . version ( 42 ) 
 + . schemaVersion ( 42 ) 
 . schema ( Dog . class ) 
 . create ( ) ) ; 
 realm . close ( ) ; 
 
 try { 
 Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 - . version ( 42 ) 
 + . schemaVersion ( 42 ) 
 . schema ( AllTypesPrimaryKey . class ) 
 . create ( ) ) ; 
 } catch ( RealmMigrationNeededException expected ) { 
 @ @ - 187 , 7 + 187 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 . name ( " foo . realm " ) 
 . encryptionKey ( key ) 
 - . version ( 42 ) 
 + . schemaVersion ( 42 ) 
 . migration ( new RealmMigration ( ) { 
 @ Override 
 public long execute ( Realm realm , long version ) { 
 @ @ - 206 , 7 + 206 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 RealmConfiguration config = new RealmConfiguration . Builder ( getContext ( ) ) 
 . deleteRealmBeforeOpening ( ) 
 . schema ( Dog . class ) 
 - . version ( 0 ) 
 + . schemaVersion ( 0 ) 
 . create ( ) ; 
 Realm . deleteRealmFile ( config ) ; 
 Realm realm = Realm . getInstance ( config ) ; 
 @ @ - 218 , 7 + 218 , 7 @ @ public class RealmConfigurationTest extends AndroidTestCase { 
 
 realm = Realm . getInstance ( new RealmConfiguration . Builder ( getContext ( ) ) 
 . schema ( Owner . class , Dog . class ) 
 - . version ( 1 ) 
 + . schemaVersion ( 1 ) 
 . deleteRealmIfMigrationNeeded ( ) 
 . create ( ) ) ; 
 assertEquals ( 0 , realm . where ( Dog . class ) . count ( ) ) ; 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index d55824f . . 4b59342 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 147 , 8 + 147 , 8 @ @ public class RealmTest extends AndroidTestCase { 
 File folder = new File ( " / " ) ; 
 try { 
 Realm realm = Realm . getInstance ( new RealmConfiguration . Builder ( folder ) . create ( ) ) ; 
 - fail ( " Pointing to a folder with no write permission should throw an error " ) ; 
 - } catch ( RealmIOException expected ) { 
 + fail ( " Pointing to a folder with no write permission should throw an IllegalArgumentException " ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 } 
 } 
 
 @ @ - 216 , 7 + 216 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 realm = Realm . getInstance ( ( Context ) null ) ; / / throws when c . getDirectory ( ) is called ; 
 / / has nothing to do with Realm 
 fail ( " Should throw an exception " ) ; 
 - } catch ( NullPointerException ignore ) { 
 + } catch ( IllegalArgumentException ignore ) { 
 } finally { 
 if ( realm ! = null ) { 
 realm . close ( ) ; 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 59a4ad3 . . 9ceb5a9 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 602 , 7 + 602 , 7 @ @ public final class Realm implements Closeable { 
 
 / / Check versions of Realm 
 long currentVersion = realm . getVersion ( ) ; 
 - long requiredVersion = config . getVersion ( ) ; 
 + long requiredVersion = config . getSchemaVersion ( ) ; 
 if ( currentVersion ! = UNVERSIONED & & currentVersion < requiredVersion ) { 
 realm . close ( ) ; 
 throw new RealmMigrationNeededException ( String . format ( " Realm on disc need to migrate from v % s to v % s " , currentVersion , requiredVersion ) ) ; 
 @ @ - 662 , 7 + 662 , 7 @ @ public final class Realm implements Closeable { 
 realm . beginTransaction ( ) ; 
 if ( version = = UNVERSIONED ) { 
 commitNeeded = true ; 
 - realm . setVersion ( config . getVersion ( ) ) ; 
 + realm . setVersion ( config . getSchemaVersion ( ) ) ; 
 } 
 for ( String className : proxyClasses ) { 
 String [ ] splitted = className . split ( " \ \ . " ) ; 
 diff - - git a / realm / src / main / java / io / realm / RealmConfiguration . java b / realm / src / main / java / io / realm / RealmConfiguration . java 
 index 1417c13 . . 7b6d861 100644 
 - - - a / realm / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 41 , 14 + 41 , 14 @ @ import io . realm . internal . migration . SetVersionNumberMigration ; 
 * This will create a RealmConfiguration with the following properties 
 * - Realm file is called " default . realm " 
 * - It is saved in Context . getFilesDir ( ) 
 - * - It has it ' s version set to 0 . 
 + * - It has it ' s schema version set to 0 . 
 * / 
 public class RealmConfiguration { 
 
 private final File realmDir ; 
 private final String realmName ; 
 private final byte [ ] key ; 
 - private final int version ; 
 + private final int schemaVersion ; 
 private final RealmMigration migration ; 
 private final boolean deleteRealmIfMigrationNeeded ; 
 private final boolean deleteRealmBeforeOpening ; 
 @ @ - 58 , 10 + 58 , 10 @ @ public class RealmConfiguration { 
 this . realmDir = builder . folder ; 
 this . realmName = builder . fileName ; 
 this . key = builder . key ; 
 - this . version = builder . version ; 
 + this . schemaVersion = builder . schemaVersion ; 
 this . deleteRealmIfMigrationNeeded = builder . deleteRealmIfMigrationNeeded ; 
 this . deleteRealmBeforeOpening = builder . deleteRealmBeforeOpening ; 
 - this . migration = ( builder . migration ! = null ) ? builder . migration : new SetVersionNumberMigration ( version ) ; 
 + this . migration = ( builder . migration ! = null ) ? builder . migration : new SetVersionNumberMigration ( schemaVersion ) ; 
 this . schema = builder . schema ; 
 } 
 
 @ @ - 77 , 8 + 77 , 8 @ @ public class RealmConfiguration { 
 return key ; 
 } 
 
 - public int getVersion ( ) { 
 - return version ; 
 + public int getSchemaVersion ( ) { 
 + return schemaVersion ; 
 } 
 
 public RealmMigration getMigration ( ) { 
 @ @ - 108 , 7 + 108 , 7 @ @ public class RealmConfiguration { 
 private File folder = null ; 
 private String fileName = " default . realm " ; 
 private byte [ ] key = null ; 
 - private int version = 0 ; 
 + private int schemaVersion = 0 ; 
 private RealmMigration migration = null ; 
 private boolean deleteRealmIfMigrationNeeded = false ; 
 private boolean deleteRealmBeforeOpening = false ; 
 @ @ - 119 , 9 + 119 , 14 @ @ public class RealmConfiguration { 
 * The Realm file in the provided folder . 
 * / 
 public Builder ( File writeableFolder ) { 
 - if ( folder = = null | | ! folder . isDirectory ( ) ) { 
 - throw new IllegalArgumentException ( ( " An existing folder must be provided . Yours was " + ( folder ! = null ? folder . getAbsolutePath ( ) : " null " ) ) ) ; 
 + if ( writeableFolder = = null | | ! writeableFolder . isDirectory ( ) ) { 
 + throw new IllegalArgumentException ( ( " An existing folder must be provided . " + 
 + " Yours was " + ( writeableFolder ! = null ? writeableFolder . getAbsolutePath ( ) : " null " ) ) ) ; 
 } 
 + if ( ! writeableFolder . canWrite ( ) ) { 
 + throw new IllegalArgumentException ( " Folder is not writeable : " + writeableFolder . getAbsolutePath ( ) ) ; 
 + } 
 + 
 this . folder = writeableFolder ; 
 } 
 
 @ @ - 165 , 23 + 170 , 23 @ @ public class RealmConfiguration { 
 } 
 
 / * * 
 - * Set the version of the Realm . This must be equal to or higher than the version of any existing Realm file . 
 - * If the version is higher than an already existing Realm , a migration is needed . 
 + * Set the schema version of the Realm . This must be equal to or higher than the schema version of any existing 
 + * Realm file . If the schema version is higher than an already existing Realm , a migration is needed . 
 * 
 * If no migration code is provided , Realm will compare the on - disc schema of the Realm with the 
 * { @ link io . realm . RealmObject } ' s defined . 
 * 
 - * - If they match , the version number will automatically be increased to the new version . 
 + * - If they match , the schema version number will automatically be increased to the new schema version . 
 * - If not , a { @ link io . realm . exceptions . RealmMigrationNeededException } will be thrown . This behavior can be 
 * overridden by using { @ link # deleteRealmIfMigrationNeeded ( ) } . 
 * 
 * @ see # migration ( RealmMigration ) 
 * / 
 - public Builder version ( int version ) { 
 - if ( version < 0 ) { 
 - throw new IllegalArgumentException ( " Realm version numbers must be 0 ( zero ) or higher . Yours was : " + version ) ; 
 + public Builder schemaVersion ( int schemaVersion ) { 
 + if ( schemaVersion < 0 ) { 
 + throw new IllegalArgumentException ( " Realm schema version numbers must be 0 ( zero ) or higher . Yours was : " + schemaVersion ) ; 
 } 
 - this . version = version ; 
 + this . schemaVersion = schemaVersion ; 
 return this ; 
 } 
 
 diff - - git a / realm / src / main / java / io / realm / RealmMigration . java b / realm / src / main / java / io / realm / RealmMigration . java 
 index 5e1843a . . 214aa2f 100644 
 - - - a / realm / src / main / java / io / realm / RealmMigration . java 
 + + + b / realm / src / main / java / io / realm / RealmMigration . java 
 @ @ - 21 , 24 + 21 , 24 @ @ package io . realm ; 
 * The schema for a Realm is defined by all classes in a project that extend 
 * { @ link io . realm . RealmObject } , so any changes to these classes will require a migration . 
 * 
 - * To support migrations from any previous version to the newest , the following pattern is 
 + * To support migrations from any previous schemaVersion to the newest , the following pattern is 
 * recommended when writing a migration : 
 * 
 * < pre > 
 * public class CustomMigration implements RealmMigration { 
 * \ @ Override 
 - * public long execute ( Realm realm , long version ) { 
 - * if ( version = = 0 ) { 
 + * public long execute ( Realm realm , long schemaVersion ) { 
 + * if ( schemaVersion = = 0 ) { 
 * / / Migrate from v0 to v1 
 - * version + + ; 
 + * schemaVersion + + ; 
 * } 
 * 
 - * if ( version = = 0 ) { 
 + * if ( schemaVersion = = 0 ) { 
 * / / Migrate from v0 to v1 
 - * version + + ; 
 + * schemaVersion + + ; 
 * } 
 * 
 - * return version ; 
 + * return schemaVersion ; 
 * } 
 * } 
 * < / pre > 
 @ @ - 56 , 8 + 56 , 8 @ @ public interface RealmMigration { 
 * Implement this method in your subclass to perform migration . 
 * 
 * @ param realm The Realm on which to perform the migration . 
 - * @ param version The version of the Realm at the start of the migration . 
 - * @ return The version of the Realm after executing the migration . 
 + * @ param version The schemaVersion of the Realm at the start of the migration . 
 + * @ return The schemaVersion of the Realm after executing the migration . 
 * / 
 public long execute ( Realm realm , long version ) ; 
 }
