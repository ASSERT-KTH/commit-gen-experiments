BLEU SCORE: 0.06567274736060397

TEST MSG: Use correct methods for doing distinct queries .
GENERATED MSG: Removing distinct ( ) from Realm .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / CustomRealmNameTests . java b / realm / realm - library / src / androidTest / java / io / realm / CustomRealmNameTests . java <nl> index a49f739 . . e4c23cb 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / CustomRealmNameTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / CustomRealmNameTests . java <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class CustomRealmNameTests { <nl> . equalTo ( " camelCase " , " foo " ) / / Java name in model class <nl> . equalTo ( " parents . PascalCase " , 1 ) / / Backlinks also uses java names <nl> . sort ( " mHungarian " ) / / Sorting uses Java names <nl> - . distinctValues ( " customName " ) / / Distinct uses Java names <nl> + . distinct ( " customName " ) / / Distinct uses Java names <nl> . findAll ( ) ; <nl> assertTrue ( results . isEmpty ( ) ) ; <nl> } <nl> @ @ - 142 , 7 + 142 , 7 @ @ public class CustomRealmNameTests { <nl> <nl> / / Distinct <nl> try { <nl> - realm . where ( ClassWithPolicy . class ) . distinctValues ( ClassWithPolicy . FIELD _ CAMEL _ CASE ) ; <nl> + realm . where ( ClassWithPolicy . class ) . distinct ( ClassWithPolicy . FIELD _ CAMEL _ CASE ) ; <nl> } catch ( IllegalArgumentException ignore ) { <nl> } <nl> <nl> @ @ - 156 , 7 + 156 , 7 @ @ public class CustomRealmNameTests { <nl> RealmResults < DynamicRealmObject > results = dynamicRealm . where ( ClassWithPolicy . CLASS _ NAME ) <nl> . equalTo ( ClassWithPolicy . FIELD _ CAMEL _ CASE , " foo " ) / / Normal queries use internal names <nl> . sort ( ClassWithPolicy . FIELD _ M _ HUNGARIAN ) / / Sorting uses internal names <nl> - . distinctValues ( ClassWithPolicy . FIELD _ CUSTOM _ NAME ) / / Distinct uses internal names <nl> + . distinct ( ClassWithPolicy . FIELD _ CUSTOM _ NAME ) / / Distinct uses internal names <nl> . findAll ( ) ; <nl> assertTrue ( results . isEmpty ( ) ) ; <nl> } <nl> @ @ - 176 , 7 + 176 , 7 @ @ public class CustomRealmNameTests { <nl> <nl> / / Distinct <nl> try { <nl> - dynamicRealm . where ( ClassWithPolicy . CLASS _ NAME ) . distinctValues ( " camelCase " ) ; <nl> + dynamicRealm . where ( ClassWithPolicy . CLASS _ NAME ) . distinct ( " camelCase " ) ; <nl> } catch ( IllegalArgumentException ignore ) { <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index 002020a . . 042f688 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 2 , 7 + 2 , 6 @ @ <nl> * An exception will now be thrown if you try to move Realm , RealmResults or RealmObject between threads . <nl> * Fixed a bug in the calculation of the maximum of date field in a RealmResults <nl> * Adding case sensitive versions of string comparison operators equalTo and notEqualTo <nl> - * Adding new method distinct ( ) to Realm <nl> <nl> 0 . 73 . 1 ( 05 Nov 2014 ) <nl> * Fixed a bug that would send infinite notifications in some instances <nl> diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 1686b71 . . 4de768e 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 572 , 27 + 572 , 4 @ @ public class RealmTest extends AndroidTestCase { <nl> resultList = testRealm . where ( AllTypes . class ) . notEqualTo ( " columnFloat " , 11 . 234567f ) . equalTo ( " columnLong " , 1 ) . findAll ( ) ; <nl> assertEquals ( " Not the expected number records " + resultList . size ( ) , 1 , resultList . size ( ) ) ; <nl> } <nl> - <nl> - public void testDistinct ( ) { <nl> - testRealm . beginTransaction ( ) ; <nl> - for ( int i = 0 ; i < 10 ; + + i ) { <nl> - Dog dog = testRealm . createObject ( Dog . class ) ; <nl> - if ( i % 2 = = 0 ) { <nl> - dog . setName ( " Rex " ) ; <nl> - } else { <nl> - dog . setName ( " King " ) ; <nl> - } <nl> - } <nl> - testRealm . commitTransaction ( ) ; <nl> - <nl> - RealmResults < Dog > dogs = testRealm . distinct ( Dog . class , " name " ) ; <nl> - assertEquals ( 2 , dogs . size ( ) ) ; <nl> - <nl> - / / Verify exception is thrown if the field in not indexed . <nl> - try { <nl> - RealmResults < AllTypes > allTypes = testRealm . distinct ( AllTypes . class , " columnString " ) ; <nl> - fail ( ) ; <nl> - } catch ( UnsupportedOperationException ignore ) { <nl> - } <nl> - } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 3adc877 . . e2e4d8d 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 642 , 24 + 642 , 6 @ @ public class Realm { <nl> return where ( clazz ) . findAll ( ) ; <nl> } <nl> <nl> - / * * <nl> - * Get objects with distinct values of the specified field <nl> - * <nl> - * @ param clazz the Class to get objects of <nl> - * @ param fieldName the field ( must be indexed using the @ Index annotation ) <nl> - * @ return A RealmResult list containing the objects <nl> - * @ throws java . lang . IllegalArgumentException If field does not exist <nl> - * @ throws java . lang . UnsupportedOperationException If field is not indexed <nl> - * / <nl> - public < E extends RealmObject > RealmResults < E > distinct ( Class < E > clazz , String fieldName ) { <nl> - Table table = getTable ( clazz ) ; <nl> - long columnIndex = table . getColumnIndex ( fieldName ) ; <nl> - if ( columnIndex = = - 1 ) { <nl> - throw new IllegalArgumentException ( String . format ( " ' % s ' is not a valid field name . " , fieldName ) ) ; <nl> - } <nl> - return new RealmResults ( this , table . getDistinctView ( columnIndex ) , clazz ) ; <nl> - } <nl> - <nl> / / Notifications <nl> <nl> / * *

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / CustomRealmNameTests . java b / realm / realm - library / src / androidTest / java / io / realm / CustomRealmNameTests . java 
 index a49f739 . . e4c23cb 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / CustomRealmNameTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / CustomRealmNameTests . java 
 @ @ - 120 , 7 + 120 , 7 @ @ public class CustomRealmNameTests { 
 . equalTo ( " camelCase " , " foo " ) / / Java name in model class 
 . equalTo ( " parents . PascalCase " , 1 ) / / Backlinks also uses java names 
 . sort ( " mHungarian " ) / / Sorting uses Java names 
 - . distinctValues ( " customName " ) / / Distinct uses Java names 
 + . distinct ( " customName " ) / / Distinct uses Java names 
 . findAll ( ) ; 
 assertTrue ( results . isEmpty ( ) ) ; 
 } 
 @ @ - 142 , 7 + 142 , 7 @ @ public class CustomRealmNameTests { 
 
 / / Distinct 
 try { 
 - realm . where ( ClassWithPolicy . class ) . distinctValues ( ClassWithPolicy . FIELD _ CAMEL _ CASE ) ; 
 + realm . where ( ClassWithPolicy . class ) . distinct ( ClassWithPolicy . FIELD _ CAMEL _ CASE ) ; 
 } catch ( IllegalArgumentException ignore ) { 
 } 
 
 @ @ - 156 , 7 + 156 , 7 @ @ public class CustomRealmNameTests { 
 RealmResults < DynamicRealmObject > results = dynamicRealm . where ( ClassWithPolicy . CLASS _ NAME ) 
 . equalTo ( ClassWithPolicy . FIELD _ CAMEL _ CASE , " foo " ) / / Normal queries use internal names 
 . sort ( ClassWithPolicy . FIELD _ M _ HUNGARIAN ) / / Sorting uses internal names 
 - . distinctValues ( ClassWithPolicy . FIELD _ CUSTOM _ NAME ) / / Distinct uses internal names 
 + . distinct ( ClassWithPolicy . FIELD _ CUSTOM _ NAME ) / / Distinct uses internal names 
 . findAll ( ) ; 
 assertTrue ( results . isEmpty ( ) ) ; 
 } 
 @ @ - 176 , 7 + 176 , 7 @ @ public class CustomRealmNameTests { 
 
 / / Distinct 
 try { 
 - dynamicRealm . where ( ClassWithPolicy . CLASS _ NAME ) . distinctValues ( " camelCase " ) ; 
 + dynamicRealm . where ( ClassWithPolicy . CLASS _ NAME ) . distinct ( " camelCase " ) ; 
 } catch ( IllegalArgumentException ignore ) { 
 } 
 }

NEAREST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index 002020a . . 042f688 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 2 , 7 + 2 , 6 @ @ 
 * An exception will now be thrown if you try to move Realm , RealmResults or RealmObject between threads . 
 * Fixed a bug in the calculation of the maximum of date field in a RealmResults 
 * Adding case sensitive versions of string comparison operators equalTo and notEqualTo 
 - * Adding new method distinct ( ) to Realm 
 
 0 . 73 . 1 ( 05 Nov 2014 ) 
 * Fixed a bug that would send infinite notifications in some instances 
 diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 1686b71 . . 4de768e 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 572 , 27 + 572 , 4 @ @ public class RealmTest extends AndroidTestCase { 
 resultList = testRealm . where ( AllTypes . class ) . notEqualTo ( " columnFloat " , 11 . 234567f ) . equalTo ( " columnLong " , 1 ) . findAll ( ) ; 
 assertEquals ( " Not the expected number records " + resultList . size ( ) , 1 , resultList . size ( ) ) ; 
 } 
 - 
 - public void testDistinct ( ) { 
 - testRealm . beginTransaction ( ) ; 
 - for ( int i = 0 ; i < 10 ; + + i ) { 
 - Dog dog = testRealm . createObject ( Dog . class ) ; 
 - if ( i % 2 = = 0 ) { 
 - dog . setName ( " Rex " ) ; 
 - } else { 
 - dog . setName ( " King " ) ; 
 - } 
 - } 
 - testRealm . commitTransaction ( ) ; 
 - 
 - RealmResults < Dog > dogs = testRealm . distinct ( Dog . class , " name " ) ; 
 - assertEquals ( 2 , dogs . size ( ) ) ; 
 - 
 - / / Verify exception is thrown if the field in not indexed . 
 - try { 
 - RealmResults < AllTypes > allTypes = testRealm . distinct ( AllTypes . class , " columnString " ) ; 
 - fail ( ) ; 
 - } catch ( UnsupportedOperationException ignore ) { 
 - } 
 - } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 3adc877 . . e2e4d8d 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 642 , 24 + 642 , 6 @ @ public class Realm { 
 return where ( clazz ) . findAll ( ) ; 
 } 
 
 - / * * 
 - * Get objects with distinct values of the specified field 
 - * 
 - * @ param clazz the Class to get objects of 
 - * @ param fieldName the field ( must be indexed using the @ Index annotation ) 
 - * @ return A RealmResult list containing the objects 
 - * @ throws java . lang . IllegalArgumentException If field does not exist 
 - * @ throws java . lang . UnsupportedOperationException If field is not indexed 
 - * / 
 - public < E extends RealmObject > RealmResults < E > distinct ( Class < E > clazz , String fieldName ) { 
 - Table table = getTable ( clazz ) ; 
 - long columnIndex = table . getColumnIndex ( fieldName ) ; 
 - if ( columnIndex = = - 1 ) { 
 - throw new IllegalArgumentException ( String . format ( " ' % s ' is not a valid field name . " , fieldName ) ) ; 
 - } 
 - return new RealmResults ( this , table . getDistinctView ( columnIndex ) , clazz ) ; 
 - } 
 - 
 / / Notifications 
 
 / * *
