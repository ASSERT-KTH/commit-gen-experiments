BLEU SCORE: 0.05954672553679791

TEST MSG: Simple URL validation
GENERATED MSG: Added check for read only files .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> index 9a2456d . . 18f5073 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java <nl> @ @ - 115 , 8 + 115 , 14 @ @ public class SyncConfigurationTests { <nl> / / " objectserver . realm . io / ~ / default " , / / Missing protocol . TODO Should we just default to one ? <nl> / / " / ~ / default " , / / Missing server <nl> " realm : / / objectserver . realm . io / ~ / default . realm " , / / Ending with . realm <nl> + " realm : / / objectserver . realm . io / ~ / default . realm . lock " , / / Ending with . realm . lock <nl> + " realm : / / objectserver . realm . io / ~ / default . realm . management " , / / Ending with . realm . management <nl> " realm : / / objectserver . realm . io / < ~ > / default . realm " , / / Invalid chars < > <nl> " realm : / / objectserver . realm . io / ~ / default . realm / " , / / Ending with / <nl> + " realm : / / objectserver . realm . io / ~ / Α θ ή ν α " , / / Non - ascii <nl> + " realm : / / objectserver . realm . io / ~ / foo / . . / bar " , / / . . is not allowed <nl> + " realm : / / objectserver . realm . io / ~ / foo / . / bar " , / / . is not allowed <nl> + " http : / / objectserver . realm . io / ~ / default " , / / wrong scheme <nl> } ; <nl> <nl> SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> index 80698a5 . . 9b6c044 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java <nl> @ @ - 26 , 7 + 26 , 8 @ @ import java . security . MessageDigest ; <nl> import java . security . NoSuchAlgorithmException ; <nl> import java . util . Arrays ; <nl> import java . util . HashSet ; <nl> - <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> import io . realm . annotations . RealmModule ; <nl> import io . realm . exceptions . RealmException ; <nl> import io . realm . internal . RealmProxyMediator ; <nl> @ @ - 235 , 6 + 236 , 8 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> private String defaultLocalFileName ; <nl> private SharedRealm . Durability durability = SharedRealm . Durability . FULL ; <nl> private boolean deleteRealmOnLogout = false ; <nl> + private final Pattern pattern = Pattern . compile ( " ^ [ A - Za - z0 - 9 _ \ \ - \ \ . ] + $ " ) ; / / for checking serverUrl <nl> + <nl> <nl> / * * <nl> * Creates an instance of the Builder for the SyncConfiguration . <nl> @ @ - 413 , 6 + 416 , 12 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> throw new IllegalArgumentException ( " Invalid url : " + url , e ) ; <nl> } <nl> <nl> + / / scheme must be realm or realms <nl> + String scheme = serverUrl . getScheme ( ) ; <nl> + if ( ! scheme . equals ( " realm " ) & & ! scheme . equals ( " realms " ) ) { <nl> + throw new IllegalArgumentException ( " Invalid scheme : " + scheme ) ; <nl> + } <nl> + <nl> / / Detect last path segment as it is the default file name <nl> String path = serverUrl . getPath ( ) ; <nl> if ( path = = null ) { <nl> @ @ - 420 , 12 + 429 , 28 @ @ public final class SyncConfiguration extends RealmConfiguration { <nl> } <nl> <nl> String [ ] pathSegments = path . split ( " / " ) ; <nl> + for ( int i = 1 ; i < pathSegments . length ; i + + ) { <nl> + String segment = pathSegments [ i ] ; <nl> + if ( segment . equals ( " ~ " ) ) { <nl> + continue ; <nl> + } <nl> + if ( segment . equals ( " . . " ) | | segment . equals ( " . " ) ) { <nl> + throw new IllegalArgumentException ( " The URL has an invalid segment : " + segment ) ; <nl> + } <nl> + Matcher m = pattern . matcher ( segment ) ; <nl> + if ( ! m . matches ( ) ) { <nl> + throw new IllegalArgumentException ( " The URL must only contain characters 0 - 9 , a - z , A - Z , . , _ , and - : " + segment ) ; <nl> + } <nl> + } <nl> + <nl> this . defaultLocalFileName = pathSegments [ pathSegments . length - 1 ] ; <nl> <nl> / / Validate filename <nl> / / TODO Lift this restriction on the Object Server <nl> - if ( defaultLocalFileName . endsWith ( " . realm " ) ) { <nl> - throw new IllegalArgumentException ( " The URL must not end with ' . realm ' : " + url ) ; <nl> + if ( defaultLocalFileName . endsWith ( " . realm " ) <nl> + | | defaultLocalFileName . endsWith ( " . realm . lock " ) <nl> + | | defaultLocalFileName . endsWith ( " . realm . management " ) ) { <nl> + throw new IllegalArgumentException ( " The URL must not end with ' . realm ' , ' . realm . lock ' or ' . realm . management : " + url ) ; <nl> } <nl> <nl> return this ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 96ae17c . . 929398d 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import io . realm . entities . NonLatinFieldNames ; <nl> import io . realm . entities . Owner ; <nl> import io . realm . entities . StringOnly ; <nl> import io . realm . exceptions . RealmException ; <nl> + import io . realm . exceptions . RealmIOException ; <nl> import io . realm . internal . Table ; <nl> <nl> import static io . realm . internal . test . ExtraTests . assertArrayEquals ; <nl> @ @ - 134 , 7 + 135 , 7 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testGetInstanceNoWritePermission ( ) { <nl> + public void testGetInstanceFolderNoWritePermission ( ) { <nl> File folder = new File ( " / " ) ; <nl> try { <nl> Realm realm = Realm . getInstance ( folder ) ; <nl> @ @ - 143 , 6 + 144 , 26 @ @ public class RealmTest extends AndroidTestCase { <nl> } <nl> } <nl> <nl> + public void testGetInstanceFileNoWritePermission ( ) throws IOException { <nl> + String REALM _ FILE = " readonly . realm " ; <nl> + File folder = getContext ( ) . getFilesDir ( ) ; <nl> + File realmFile = new File ( folder , REALM _ FILE ) ; <nl> + if ( realmFile . exists ( ) ) { <nl> + realmFile . delete ( ) ; / / Reset old test data <nl> + } <nl> + <nl> + assertTrue ( realmFile . createNewFile ( ) ) ; <nl> + assertTrue ( realmFile . setWritable ( false ) ) ; <nl> + <nl> + try { <nl> + Realm . getInstance ( folder , REALM _ FILE ) ; <nl> + fail ( " Trying to open a read - only file should fail " ) ; <nl> + } catch ( IllegalArgumentException expected ) { <nl> + } <nl> + } <nl> + <nl> + <nl> + <nl> public void testRealmCache ( ) { <nl> Realm newRealm = Realm . getInstance ( getContext ( ) ) ; <nl> assertEquals ( testRealm , newRealm ) ; <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index a834b27 . . 434cb2d 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 466 , 6 + 466 , 10 @ @ public final class Realm implements Closeable { <nl> if ( ! writableFolder . canWrite ( ) ) { <nl> throw new IllegalArgumentException ( " You do not have write permissions to create a Realm in " + writableFolder . getAbsolutePath ( ) ) ; <nl> } <nl> + File realmFile = new File ( writableFolder , filename ) ; <nl> + if ( realmFile . exists ( ) & & ! realmFile . canWrite ( ) ) { <nl> + throw new IllegalArgumentException ( " Realm is not writable : " + realmFile . getAbsolutePath ( ) ) ; <nl> + } <nl> } <nl> <nl> private static void initializeRealm ( Realm realm ) { <nl> diff - - git a / realm / src / main / java / io / realm / exceptions / RealmIOException . java b / realm / src / main / java / io / realm / exceptions / RealmIOException . java <nl> index 6c4c4eb . . 4cb2833 100644 <nl> - - - a / realm / src / main / java / io / realm / exceptions / RealmIOException . java <nl> + + + b / realm / src / main / java / io / realm / exceptions / RealmIOException . java <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> package io . realm . exceptions ; <nl> <nl> / * * <nl> - * Realm exception for reporting problems opening or creating Realm files . <nl> + * Class for reporting problems with Realm files . <nl> * / <nl> public class RealmIOException extends RuntimeException { <nl>

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 index 9a2456d . . 18f5073 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / SyncConfigurationTests . java 
 @ @ - 115 , 8 + 115 , 14 @ @ public class SyncConfigurationTests { 
 / / " objectserver . realm . io / ~ / default " , / / Missing protocol . TODO Should we just default to one ? 
 / / " / ~ / default " , / / Missing server 
 " realm : / / objectserver . realm . io / ~ / default . realm " , / / Ending with . realm 
 + " realm : / / objectserver . realm . io / ~ / default . realm . lock " , / / Ending with . realm . lock 
 + " realm : / / objectserver . realm . io / ~ / default . realm . management " , / / Ending with . realm . management 
 " realm : / / objectserver . realm . io / < ~ > / default . realm " , / / Invalid chars < > 
 " realm : / / objectserver . realm . io / ~ / default . realm / " , / / Ending with / 
 + " realm : / / objectserver . realm . io / ~ / Α θ ή ν α " , / / Non - ascii 
 + " realm : / / objectserver . realm . io / ~ / foo / . . / bar " , / / . . is not allowed 
 + " realm : / / objectserver . realm . io / ~ / foo / . / bar " , / / . is not allowed 
 + " http : / / objectserver . realm . io / ~ / default " , / / wrong scheme 
 } ; 
 
 SyncConfiguration . Builder builder = new SyncConfiguration . Builder ( context ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 index 80698a5 . . 9b6c044 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / SyncConfiguration . java 
 @ @ - 26 , 7 + 26 , 8 @ @ import java . security . MessageDigest ; 
 import java . security . NoSuchAlgorithmException ; 
 import java . util . Arrays ; 
 import java . util . HashSet ; 
 - 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 import io . realm . annotations . RealmModule ; 
 import io . realm . exceptions . RealmException ; 
 import io . realm . internal . RealmProxyMediator ; 
 @ @ - 235 , 6 + 236 , 8 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 private String defaultLocalFileName ; 
 private SharedRealm . Durability durability = SharedRealm . Durability . FULL ; 
 private boolean deleteRealmOnLogout = false ; 
 + private final Pattern pattern = Pattern . compile ( " ^ [ A - Za - z0 - 9 _ \ \ - \ \ . ] + $ " ) ; / / for checking serverUrl 
 + 
 
 / * * 
 * Creates an instance of the Builder for the SyncConfiguration . 
 @ @ - 413 , 6 + 416 , 12 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 throw new IllegalArgumentException ( " Invalid url : " + url , e ) ; 
 } 
 
 + / / scheme must be realm or realms 
 + String scheme = serverUrl . getScheme ( ) ; 
 + if ( ! scheme . equals ( " realm " ) & & ! scheme . equals ( " realms " ) ) { 
 + throw new IllegalArgumentException ( " Invalid scheme : " + scheme ) ; 
 + } 
 + 
 / / Detect last path segment as it is the default file name 
 String path = serverUrl . getPath ( ) ; 
 if ( path = = null ) { 
 @ @ - 420 , 12 + 429 , 28 @ @ public final class SyncConfiguration extends RealmConfiguration { 
 } 
 
 String [ ] pathSegments = path . split ( " / " ) ; 
 + for ( int i = 1 ; i < pathSegments . length ; i + + ) { 
 + String segment = pathSegments [ i ] ; 
 + if ( segment . equals ( " ~ " ) ) { 
 + continue ; 
 + } 
 + if ( segment . equals ( " . . " ) | | segment . equals ( " . " ) ) { 
 + throw new IllegalArgumentException ( " The URL has an invalid segment : " + segment ) ; 
 + } 
 + Matcher m = pattern . matcher ( segment ) ; 
 + if ( ! m . matches ( ) ) { 
 + throw new IllegalArgumentException ( " The URL must only contain characters 0 - 9 , a - z , A - Z , . , _ , and - : " + segment ) ; 
 + } 
 + } 
 + 
 this . defaultLocalFileName = pathSegments [ pathSegments . length - 1 ] ; 
 
 / / Validate filename 
 / / TODO Lift this restriction on the Object Server 
 - if ( defaultLocalFileName . endsWith ( " . realm " ) ) { 
 - throw new IllegalArgumentException ( " The URL must not end with ' . realm ' : " + url ) ; 
 + if ( defaultLocalFileName . endsWith ( " . realm " ) 
 + | | defaultLocalFileName . endsWith ( " . realm . lock " ) 
 + | | defaultLocalFileName . endsWith ( " . realm . management " ) ) { 
 + throw new IllegalArgumentException ( " The URL must not end with ' . realm ' , ' . realm . lock ' or ' . realm . management : " + url ) ; 
 } 
 
 return this ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 96ae17c . . 929398d 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import io . realm . entities . NonLatinFieldNames ; 
 import io . realm . entities . Owner ; 
 import io . realm . entities . StringOnly ; 
 import io . realm . exceptions . RealmException ; 
 + import io . realm . exceptions . RealmIOException ; 
 import io . realm . internal . Table ; 
 
 import static io . realm . internal . test . ExtraTests . assertArrayEquals ; 
 @ @ - 134 , 7 + 135 , 7 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 } 
 
 - public void testGetInstanceNoWritePermission ( ) { 
 + public void testGetInstanceFolderNoWritePermission ( ) { 
 File folder = new File ( " / " ) ; 
 try { 
 Realm realm = Realm . getInstance ( folder ) ; 
 @ @ - 143 , 6 + 144 , 26 @ @ public class RealmTest extends AndroidTestCase { 
 } 
 } 
 
 + public void testGetInstanceFileNoWritePermission ( ) throws IOException { 
 + String REALM _ FILE = " readonly . realm " ; 
 + File folder = getContext ( ) . getFilesDir ( ) ; 
 + File realmFile = new File ( folder , REALM _ FILE ) ; 
 + if ( realmFile . exists ( ) ) { 
 + realmFile . delete ( ) ; / / Reset old test data 
 + } 
 + 
 + assertTrue ( realmFile . createNewFile ( ) ) ; 
 + assertTrue ( realmFile . setWritable ( false ) ) ; 
 + 
 + try { 
 + Realm . getInstance ( folder , REALM _ FILE ) ; 
 + fail ( " Trying to open a read - only file should fail " ) ; 
 + } catch ( IllegalArgumentException expected ) { 
 + } 
 + } 
 + 
 + 
 + 
 public void testRealmCache ( ) { 
 Realm newRealm = Realm . getInstance ( getContext ( ) ) ; 
 assertEquals ( testRealm , newRealm ) ; 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index a834b27 . . 434cb2d 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 466 , 6 + 466 , 10 @ @ public final class Realm implements Closeable { 
 if ( ! writableFolder . canWrite ( ) ) { 
 throw new IllegalArgumentException ( " You do not have write permissions to create a Realm in " + writableFolder . getAbsolutePath ( ) ) ; 
 } 
 + File realmFile = new File ( writableFolder , filename ) ; 
 + if ( realmFile . exists ( ) & & ! realmFile . canWrite ( ) ) { 
 + throw new IllegalArgumentException ( " Realm is not writable : " + realmFile . getAbsolutePath ( ) ) ; 
 + } 
 } 
 
 private static void initializeRealm ( Realm realm ) { 
 diff - - git a / realm / src / main / java / io / realm / exceptions / RealmIOException . java b / realm / src / main / java / io / realm / exceptions / RealmIOException . java 
 index 6c4c4eb . . 4cb2833 100644 
 - - - a / realm / src / main / java / io / realm / exceptions / RealmIOException . java 
 + + + b / realm / src / main / java / io / realm / exceptions / RealmIOException . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package io . realm . exceptions ; 
 
 / * * 
 - * Realm exception for reporting problems opening or creating Realm files . 
 + * Class for reporting problems with Realm files . 
 * / 
 public class RealmIOException extends RuntimeException { 

