BLEU SCORE: 0.027611988917697356

TEST MSG: Use term detach / reattach for Collection snapshot
GENERATED MSG: Results . sort ( )

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index 05cb295 . . 92f6ab8 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 379 , 7 + 379 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeIndexOfBySourceRowIndex ( JNIEnv * env , jcl <nl> } <nl> <nl> JNIEXPORT void JNICALL <nl> - Java _ io _ realm _ internal _ Collection _ nativeEnableSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> + Java _ io _ realm _ internal _ Collection _ nativeDetach ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> @ @ - 389 , 7 + 389 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeEnableSnapshot ( JNIEnv * env , jclass , jlon <nl> } <nl> <nl> JNIEXPORT void JNICALL <nl> - Java _ io _ realm _ internal _ Collection _ nativeDisableSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> + Java _ io _ realm _ internal _ Collection _ nativeReattach ( JNIEnv * env , jclass , jlong native _ ptr ) <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index 5b5c0cc . . f40d61e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 257 , 16 + 257 , 20 @ @ public class Collection implements NativeObject { <nl> observerPairs . foreach ( onChangeCallback ) ; <nl> } <nl> <nl> - void enableSnapshot ( ) { <nl> - nativeEnableSnapshot ( nativePtr ) ; <nl> + / / Turns this collection to be backed by a snapshot results . <nl> + / / A snapshot results will never be auto - updated . <nl> + void detach ( ) { <nl> + nativeDetach ( nativePtr ) ; <nl> } <nl> <nl> - void disableSnapshot ( ) { <nl> + / / Turns this collection to be backed by the original results to enable the auto - updating again . <nl> + void reattach ( ) { <nl> / / Invalidate all current iterators . <nl> stableIterators . clear ( ) ; <nl> - nativeDisableSnapshot ( nativePtr ) ; <nl> + nativeReattach ( nativePtr ) ; <nl> } <nl> <nl> + / / Return true if this is backed by a snapshot results . <nl> boolean isDetached ( ) { <nl> return nativeIsDetached ( nativePtr ) ; <nl> } <nl> @ @ - 294 , 8 + 298 , 8 @ @ public class Collection implements NativeObject { <nl> private static native long nativeWhere ( long nativePtr ) ; <nl> private static native long nativeIndexOf ( long nativePtr , long rowNativePtr ) ; <nl> private static native long nativeIndexOfBySourceRowIndex ( long nativePtr , long sourceRowIndex ) ; <nl> - private static native void nativeEnableSnapshot ( long nativePtr ) ; <nl> - private static native void nativeDisableSnapshot ( long nativePtr ) ; <nl> + private static native void nativeDetach ( long nativePtr ) ; <nl> + private static native void nativeReattach ( long nativePtr ) ; <nl> private static native boolean nativeIsDetached ( long nativePtr ) ; <nl> private static native boolean nativeIsValid ( long nativePtr ) ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> index 59a26c5 . . f076565 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java <nl> @ @ - 92 , 7 + 92 , 7 @ @ public abstract class RealmNotifier implements Closeable { <nl> / / Package protected to avoid finding class by name in JNI . <nl> void changesAvailable ( ) { <nl> / / For the stable iteration . <nl> - sharedRealm . disableCollectionSnapshot ( ) ; <nl> + sharedRealm . reattachCollections ( ) ; <nl> } <nl> <nl> void setSharedRealm ( SharedRealm sharedRealm ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> index c96d2bf . . 7442548 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java <nl> @ @ - 112 , 7 + 112 , 7 @ @ public final class SharedRealm implements Closeable { <nl> public final Capabilities capabilities ; <nl> <nl> / / To prevent overflow the message queue . <nl> - public boolean disableSnapshotPosted = false ; <nl> + public boolean reattachCollectionsPosted = false ; <nl> <nl> public static class VersionID implements Comparable < VersionID > { <nl> public final long version ; <nl> @ @ - 177 , 8 + 177 , 11 @ @ public final class SharedRealm implements Closeable { <nl> private long lastSchemaVersion ; <nl> private final SchemaVersionListener schemaChangeListener ; <nl> <nl> - private SharedRealm ( long nativePtr , RealmConfiguration configuration , Capabilities capabilities , <nl> - RealmNotifier notifier , SchemaVersionListener schemaVersionListener ) { <nl> + private SharedRealm ( long nativePtr , <nl> + RealmConfiguration configuration , <nl> + Capabilities capabilities , <nl> + RealmNotifier notifier , <nl> + SchemaVersionListener schemaVersionListener ) { <nl> context = new Context ( ) ; <nl> <nl> this . nativePtr = nativePtr ; <nl> @ @ - 241 , 7 + 244 , 7 @ @ public final class SharedRealm implements Closeable { <nl> } <nl> <nl> public void beginTransaction ( ) { <nl> - enableCollectionSnapshot ( ) ; <nl> + detachCollections ( ) ; <nl> nativeBeginTransaction ( nativePtr ) ; <nl> invokeSchemaChangeListenerIfSchemaChanged ( ) ; <nl> } <nl> @ @ - 395 , 25 + 398 , 35 @ @ public final class SharedRealm implements Closeable { <nl> } <nl> } <nl> <nl> - / / Should only be called by Collection ' s constructor <nl> + / / addCollection ( ) , detachCollections ( ) , reattachCollections ( ) and postToReattachCollections ( ) are used to make <nl> + / / RealmResults stable iterators work . When a Collection is detached from a living OS Results , it won ' t receive <nl> + / / notifications and its elements won ' t be changed . <nl> + / / See https : / / github . com / realm / realm - java / issues / 3883 for more information . <nl> + / / Should only be called by Collection ' s constructor . <nl> void addCollection ( Collection collection ) { <nl> if ( realmNotifier ! = null ) { <nl> collections . add ( new WeakReference < Collection > ( collection ) ) ; <nl> } <nl> } <nl> <nl> - private void enableCollectionSnapshot ( ) { <nl> + / / The detaching should happen before transaction begins . <nl> + private void detachCollections ( ) { <nl> for ( WeakReference < Collection > collectionRef : collections ) { <nl> Collection collection = collectionRef . get ( ) ; <nl> if ( collection = = null ) { <nl> collections . remove ( collectionRef ) ; <nl> } else { <nl> - collection . enableSnapshot ( ) ; <nl> + collection . detach ( ) ; <nl> } <nl> } <nl> } <nl> <nl> - void disableCollectionSnapshot ( ) { <nl> + / / Ideally the reattaching should happen at the very end of the event loop , but it is impossible for most event <nl> + / / framework . We need to ensure : <nl> + / / 1 ) It happens before any other coming events get handled ( eg : UI redraw event ) . <nl> + / / 2 ) It happens before Object Store async callbacks since the Object Store event _ loop _ signal might use a different <nl> + / / event queue . This is guaranteed by call this function in the binding _ context : : before _ notify callback . <nl> + void reattachCollections ( ) { <nl> if ( isInTransaction ( ) ) { <nl> / / This should never happen . <nl> throw new IllegalStateException ( " Collection cannot be reattached if the Realm is in transaction . " + <nl> @ @ - 424 , 19 + 437 , 20 @ @ public final class SharedRealm implements Closeable { <nl> if ( collection = = null ) { <nl> collections . remove ( collectionRef ) ; <nl> } else { <nl> - collection . disableSnapshot ( ) ; <nl> + collection . reattach ( ) ; <nl> } <nl> } <nl> } <nl> <nl> + / / To handle the point 1 ) in the reattachCollections comments . <nl> private void postToReattachCollections ( ) { <nl> - if ( realmNotifier ! = null & & ! collections . isEmpty ( ) & & ! disableSnapshotPosted ) { <nl> - disableSnapshotPosted = true ; <nl> + if ( realmNotifier ! = null & & ! collections . isEmpty ( ) & & ! reattachCollectionsPosted ) { <nl> + reattachCollectionsPosted = true ; <nl> realmNotifier . postAtFrontOfQueue ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> - disableSnapshotPosted = false ; <nl> - disableCollectionSnapshot ( ) ; <nl> + reattachCollectionsPosted = false ; <nl> + reattachCollections ( ) ; <nl> } <nl> } ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> index 99bfcfe . . fb08422 100644 <nl> - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp <nl> @ @ - 52 , 9 + 52 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong <nl> try { <nl> auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; <nl> auto query = reinterpret _ cast < Query * > ( query _ ptr ) ; <nl> - Results * results = sort _ desc _ native _ ptr ? <nl> - new Results ( shared _ realm , * query , * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ) : <nl> - new Results ( shared _ realm , * query , { } ) ; <nl> + auto results = sort _ desc _ native _ ptr ? <nl> + new Results ( shared _ realm , * query , * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ) : <nl> + new Results ( shared _ realm , * query , { } ) ; <nl> <nl> return reinterpret _ cast < jlong > ( results ) ; <nl> } CATCH _ STD ( ) <nl> @ @ - 167 , 28 + 167 , 12 @ @ Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong nat <nl> } <nl> <nl> JNIEXPORT jlong JNICALL <nl> - Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlongArray colunm _ indices , <nl> - jbooleanArray jsort _ orders ) <nl> + Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlong sort _ desc _ native _ ptr ) <nl> { <nl> TR _ ENTER _ PTR ( native _ ptr ) <nl> try { <nl> auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; <nl> - <nl> - JniBooleanArray order ( env , jsort _ orders ) ; <nl> - JniLongArray indices ( env , colunm _ indices ) ; <nl> - <nl> - if ( order . len ( ) ! = indices . len ( ) ) { <nl> - throw std : : invalid _ argument ( " Number of columns and sorting orders do not match . " ) ; <nl> - } <nl> - <nl> - std : : vector < bool > sort _ orders ; <nl> - std : : vector < std : : vector < size _ t > > sort _ indices ; <nl> - for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { <nl> - sort _ orders . push _ back ( to _ bool ( order [ i ] ) ) ; <nl> - sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; <nl> - } <nl> - <nl> - SortDescriptor sort _ descriptor ( * ( results - > get _ query ( ) . get _ table ( ) . get ( ) ) , sort _ indices , sort _ orders ) ; <nl> + auto sort _ descriptor = * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; <nl> auto sorted _ result = results - > sort ( std : : move ( sort _ descriptor ) ) ; <nl> return reinterpret _ cast < jlong > ( new Results ( std : : move ( sorted _ result ) ) ) ; <nl> } CATCH _ STD ( ) <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> index 5acdb45 . . 766e7a7 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . util . NoSuchElementException ; <nl> import java . util . concurrent . CopyOnWriteArrayList ; <nl> import java . util . concurrent . Future ; <nl> <nl> + import io . realm . internal . SortDescriptor ; <nl> import io . realm . internal . Table ; <nl> import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableQuery ; <nl> @ @ - 429 , 15 + 430 , 18 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im <nl> * / <nl> @ Override <nl> public RealmResults < E > sort ( String fieldName ) { <nl> - / * <nl> - if ( nativePtr = = 0 ) { <nl> - return this . sort ( fieldName , Sort . ASCENDING ) ; <nl> - } else { <nl> - long ptr = nativeSort ( nativePtr , new long [ ] { getColumnIndexForSort ( fieldName ) } , new boolean [ ] { Sort . ASCENDING . getValue ( ) } ) ; <nl> - return new RealmResults < E > ( realm , className , ptr ) ; <nl> + SortDescriptor sortDescriptor = <nl> + SortDescriptor . getInstanceForSort ( collection . getTable ( ) , fieldName , Sort . ASCENDING ) ; <nl> + try { <nl> + Collection sortedCollection = collection . sort ( sortDescriptor ) ; <nl> + if ( className ! = null ) { <nl> + return new RealmResults < E > ( realm , sortedCollection , className ) ; <nl> + } else { <nl> + return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; <nl> + } <nl> + } finally { <nl> + sortDescriptor . close ( ) ; <nl> } <nl> - * / <nl> - return null ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> index 7b4e838 . . d0cdd46 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java <nl> @ @ - 75 , 6 + 75 , 7 @ @ public class Collection implements NativeObject { <nl> <nl> private final long nativePtr ; <nl> private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; <nl> + private final SharedRealm sharedRealm ; <nl> private final Context context ; <nl> private final TableQuery query ; <nl> private final List < Listener > listeners = new CopyOnWriteArrayList < Listener > ( ) ; <nl> @ @ - 104 , 6 + 105 , 7 @ @ public class Collection implements NativeObject { <nl> } <nl> <nl> public Collection ( SharedRealm sharedRealm , TableQuery query , SortDescriptor sortDescriptor ) { <nl> + this . sharedRealm = sharedRealm ; <nl> this . context = sharedRealm . context ; <nl> this . query = query ; <nl> <nl> @ @ - 116 , 6 + 118 , 15 @ @ public class Collection implements NativeObject { <nl> this . context . addReference ( this ) ; <nl> } <nl> <nl> + public Collection ( SharedRealm sharedRealm , TableQuery query , long nativePtr ) { <nl> + this . sharedRealm = sharedRealm ; <nl> + this . context = sharedRealm . context ; <nl> + this . query = query ; <nl> + this . nativePtr = nativePtr ; <nl> + <nl> + this . context . addReference ( this ) ; <nl> + } <nl> + <nl> @ Override <nl> public long getNativePtr ( ) { <nl> return nativePtr ; <nl> @ @ - 130 , 6 + 141 , 10 @ @ public class Collection implements NativeObject { <nl> return UncheckedRow . getByRowPointer ( query . table , nativeGetRow ( nativePtr , index ) ) ; <nl> } <nl> <nl> + public Table getTable ( ) { <nl> + return query . getTable ( ) ; <nl> + } <nl> + <nl> public Object aggregate ( Aggregate aggregateMethod , long columnIndex ) { <nl> return nativeAggregate ( nativePtr , columnIndex , aggregateMethod . getValue ( ) ) ; <nl> } <nl> @ @ - 143 , 6 + 158 , 10 @ @ public class Collection implements NativeObject { <nl> nativeClear ( nativePtr ) ; <nl> } <nl> <nl> + public Collection sort ( SortDescriptor sortDescriptor ) { <nl> + return new Collection ( sharedRealm , query , nativeSort ( nativePtr , sortDescriptor . getNativePtr ( ) ) ) ; <nl> + } <nl> + <nl> public void addListener ( Listener listener ) { <nl> if ( ! listeners . contains ( listener ) ) { <nl> listeners . add ( listener ) ; <nl> @ @ - 193 , 7 + 212 , 7 @ @ public class Collection implements NativeObject { <nl> private static native void nativeClear ( long nativePtr ) ; <nl> private static native long nativeSize ( long nativePtr ) ; <nl> private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; <nl> - private static native long nativeSort ( long nativePtr , long [ ] columnIndices , boolean [ ] orders ) ; <nl> + private static native long nativeSort ( long nativePtr , long sortDescNativePtr ) ; <nl> private native long nativeAddListener ( long nativePtr ) ; <nl> private static native long nativeNotificationTokenGetFinalizerPtr ( ) ; <nl> private static native long nativeNotificationTokenClose ( long nativePtr ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index 05cb295 . . 92f6ab8 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 379 , 7 + 379 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeIndexOfBySourceRowIndex ( JNIEnv * env , jcl 
 } 
 
 JNIEXPORT void JNICALL 
 - Java _ io _ realm _ internal _ Collection _ nativeEnableSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) 
 + Java _ io _ realm _ internal _ Collection _ nativeDetach ( JNIEnv * env , jclass , jlong native _ ptr ) 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 @ @ - 389 , 7 + 389 , 7 @ @ Java _ io _ realm _ internal _ Collection _ nativeEnableSnapshot ( JNIEnv * env , jclass , jlon 
 } 
 
 JNIEXPORT void JNICALL 
 - Java _ io _ realm _ internal _ Collection _ nativeDisableSnapshot ( JNIEnv * env , jclass , jlong native _ ptr ) 
 + Java _ io _ realm _ internal _ Collection _ nativeReattach ( JNIEnv * env , jclass , jlong native _ ptr ) 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index 5b5c0cc . . f40d61e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 257 , 16 + 257 , 20 @ @ public class Collection implements NativeObject { 
 observerPairs . foreach ( onChangeCallback ) ; 
 } 
 
 - void enableSnapshot ( ) { 
 - nativeEnableSnapshot ( nativePtr ) ; 
 + / / Turns this collection to be backed by a snapshot results . 
 + / / A snapshot results will never be auto - updated . 
 + void detach ( ) { 
 + nativeDetach ( nativePtr ) ; 
 } 
 
 - void disableSnapshot ( ) { 
 + / / Turns this collection to be backed by the original results to enable the auto - updating again . 
 + void reattach ( ) { 
 / / Invalidate all current iterators . 
 stableIterators . clear ( ) ; 
 - nativeDisableSnapshot ( nativePtr ) ; 
 + nativeReattach ( nativePtr ) ; 
 } 
 
 + / / Return true if this is backed by a snapshot results . 
 boolean isDetached ( ) { 
 return nativeIsDetached ( nativePtr ) ; 
 } 
 @ @ - 294 , 8 + 298 , 8 @ @ public class Collection implements NativeObject { 
 private static native long nativeWhere ( long nativePtr ) ; 
 private static native long nativeIndexOf ( long nativePtr , long rowNativePtr ) ; 
 private static native long nativeIndexOfBySourceRowIndex ( long nativePtr , long sourceRowIndex ) ; 
 - private static native void nativeEnableSnapshot ( long nativePtr ) ; 
 - private static native void nativeDisableSnapshot ( long nativePtr ) ; 
 + private static native void nativeDetach ( long nativePtr ) ; 
 + private static native void nativeReattach ( long nativePtr ) ; 
 private static native boolean nativeIsDetached ( long nativePtr ) ; 
 private static native boolean nativeIsValid ( long nativePtr ) ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 index 59a26c5 . . f076565 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmNotifier . java 
 @ @ - 92 , 7 + 92 , 7 @ @ public abstract class RealmNotifier implements Closeable { 
 / / Package protected to avoid finding class by name in JNI . 
 void changesAvailable ( ) { 
 / / For the stable iteration . 
 - sharedRealm . disableCollectionSnapshot ( ) ; 
 + sharedRealm . reattachCollections ( ) ; 
 } 
 
 void setSharedRealm ( SharedRealm sharedRealm ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 index c96d2bf . . 7442548 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / SharedRealm . java 
 @ @ - 112 , 7 + 112 , 7 @ @ public final class SharedRealm implements Closeable { 
 public final Capabilities capabilities ; 
 
 / / To prevent overflow the message queue . 
 - public boolean disableSnapshotPosted = false ; 
 + public boolean reattachCollectionsPosted = false ; 
 
 public static class VersionID implements Comparable < VersionID > { 
 public final long version ; 
 @ @ - 177 , 8 + 177 , 11 @ @ public final class SharedRealm implements Closeable { 
 private long lastSchemaVersion ; 
 private final SchemaVersionListener schemaChangeListener ; 
 
 - private SharedRealm ( long nativePtr , RealmConfiguration configuration , Capabilities capabilities , 
 - RealmNotifier notifier , SchemaVersionListener schemaVersionListener ) { 
 + private SharedRealm ( long nativePtr , 
 + RealmConfiguration configuration , 
 + Capabilities capabilities , 
 + RealmNotifier notifier , 
 + SchemaVersionListener schemaVersionListener ) { 
 context = new Context ( ) ; 
 
 this . nativePtr = nativePtr ; 
 @ @ - 241 , 7 + 244 , 7 @ @ public final class SharedRealm implements Closeable { 
 } 
 
 public void beginTransaction ( ) { 
 - enableCollectionSnapshot ( ) ; 
 + detachCollections ( ) ; 
 nativeBeginTransaction ( nativePtr ) ; 
 invokeSchemaChangeListenerIfSchemaChanged ( ) ; 
 } 
 @ @ - 395 , 25 + 398 , 35 @ @ public final class SharedRealm implements Closeable { 
 } 
 } 
 
 - / / Should only be called by Collection ' s constructor 
 + / / addCollection ( ) , detachCollections ( ) , reattachCollections ( ) and postToReattachCollections ( ) are used to make 
 + / / RealmResults stable iterators work . When a Collection is detached from a living OS Results , it won ' t receive 
 + / / notifications and its elements won ' t be changed . 
 + / / See https : / / github . com / realm / realm - java / issues / 3883 for more information . 
 + / / Should only be called by Collection ' s constructor . 
 void addCollection ( Collection collection ) { 
 if ( realmNotifier ! = null ) { 
 collections . add ( new WeakReference < Collection > ( collection ) ) ; 
 } 
 } 
 
 - private void enableCollectionSnapshot ( ) { 
 + / / The detaching should happen before transaction begins . 
 + private void detachCollections ( ) { 
 for ( WeakReference < Collection > collectionRef : collections ) { 
 Collection collection = collectionRef . get ( ) ; 
 if ( collection = = null ) { 
 collections . remove ( collectionRef ) ; 
 } else { 
 - collection . enableSnapshot ( ) ; 
 + collection . detach ( ) ; 
 } 
 } 
 } 
 
 - void disableCollectionSnapshot ( ) { 
 + / / Ideally the reattaching should happen at the very end of the event loop , but it is impossible for most event 
 + / / framework . We need to ensure : 
 + / / 1 ) It happens before any other coming events get handled ( eg : UI redraw event ) . 
 + / / 2 ) It happens before Object Store async callbacks since the Object Store event _ loop _ signal might use a different 
 + / / event queue . This is guaranteed by call this function in the binding _ context : : before _ notify callback . 
 + void reattachCollections ( ) { 
 if ( isInTransaction ( ) ) { 
 / / This should never happen . 
 throw new IllegalStateException ( " Collection cannot be reattached if the Realm is in transaction . " + 
 @ @ - 424 , 19 + 437 , 20 @ @ public final class SharedRealm implements Closeable { 
 if ( collection = = null ) { 
 collections . remove ( collectionRef ) ; 
 } else { 
 - collection . disableSnapshot ( ) ; 
 + collection . reattach ( ) ; 
 } 
 } 
 } 
 
 + / / To handle the point 1 ) in the reattachCollections comments . 
 private void postToReattachCollections ( ) { 
 - if ( realmNotifier ! = null & & ! collections . isEmpty ( ) & & ! disableSnapshotPosted ) { 
 - disableSnapshotPosted = true ; 
 + if ( realmNotifier ! = null & & ! collections . isEmpty ( ) & & ! reattachCollectionsPosted ) { 
 + reattachCollectionsPosted = true ; 
 realmNotifier . postAtFrontOfQueue ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 - disableSnapshotPosted = false ; 
 - disableCollectionSnapshot ( ) ; 
 + reattachCollectionsPosted = false ; 
 + reattachCollections ( ) ; 
 } 
 } ) ; 
 }

NEAREST DIFF:
diff - - git a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 index 99bfcfe . . fb08422 100644 
 - - - a / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 + + + b / realm / realm - library / src / main / cpp / io _ realm _ internal _ Collection . cpp 
 @ @ - 52 , 9 + 52 , 9 @ @ Java _ io _ realm _ internal _ Collection _ nativeCreateResults ( JNIEnv * env , jclass , jlong 
 try { 
 auto shared _ realm = * ( reinterpret _ cast < SharedRealm * > ( shared _ realm _ ptr ) ) ; 
 auto query = reinterpret _ cast < Query * > ( query _ ptr ) ; 
 - Results * results = sort _ desc _ native _ ptr ? 
 - new Results ( shared _ realm , * query , * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ) : 
 - new Results ( shared _ realm , * query , { } ) ; 
 + auto results = sort _ desc _ native _ ptr ? 
 + new Results ( shared _ realm , * query , * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ) : 
 + new Results ( shared _ realm , * query , { } ) ; 
 
 return reinterpret _ cast < jlong > ( results ) ; 
 } CATCH _ STD ( ) 
 @ @ - 167 , 28 + 167 , 12 @ @ Java _ io _ realm _ internal _ Collection _ nativeAggregate ( JNIEnv * env , jclass , jlong nat 
 } 
 
 JNIEXPORT jlong JNICALL 
 - Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlongArray colunm _ indices , 
 - jbooleanArray jsort _ orders ) 
 + Java _ io _ realm _ internal _ Collection _ nativeSort ( JNIEnv * env , jclass , jlong native _ ptr , jlong sort _ desc _ native _ ptr ) 
 { 
 TR _ ENTER _ PTR ( native _ ptr ) 
 try { 
 auto results = reinterpret _ cast < Results * > ( native _ ptr ) ; 
 - 
 - JniBooleanArray order ( env , jsort _ orders ) ; 
 - JniLongArray indices ( env , colunm _ indices ) ; 
 - 
 - if ( order . len ( ) ! = indices . len ( ) ) { 
 - throw std : : invalid _ argument ( " Number of columns and sorting orders do not match . " ) ; 
 - } 
 - 
 - std : : vector < bool > sort _ orders ; 
 - std : : vector < std : : vector < size _ t > > sort _ indices ; 
 - for ( jsize i = 0 ; i < order . len ( ) ; + + i ) { 
 - sort _ orders . push _ back ( to _ bool ( order [ i ] ) ) ; 
 - sort _ indices . push _ back ( std : : vector < size _ t > { S ( indices [ i ] ) } ) ; 
 - } 
 - 
 - SortDescriptor sort _ descriptor ( * ( results - > get _ query ( ) . get _ table ( ) . get ( ) ) , sort _ indices , sort _ orders ) ; 
 + auto sort _ descriptor = * reinterpret _ cast < SortDescriptor * > ( sort _ desc _ native _ ptr ) ; 
 auto sorted _ result = results - > sort ( std : : move ( sort _ descriptor ) ) ; 
 return reinterpret _ cast < jlong > ( new Results ( std : : move ( sorted _ result ) ) ) ; 
 } CATCH _ STD ( ) 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmResults . java b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 index 5acdb45 . . 766e7a7 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmResults . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . util . NoSuchElementException ; 
 import java . util . concurrent . CopyOnWriteArrayList ; 
 import java . util . concurrent . Future ; 
 
 + import io . realm . internal . SortDescriptor ; 
 import io . realm . internal . Table ; 
 import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableQuery ; 
 @ @ - 429 , 15 + 430 , 18 @ @ public final class RealmResults < E extends RealmModel > extends AbstractList < E > im 
 * / 
 @ Override 
 public RealmResults < E > sort ( String fieldName ) { 
 - / * 
 - if ( nativePtr = = 0 ) { 
 - return this . sort ( fieldName , Sort . ASCENDING ) ; 
 - } else { 
 - long ptr = nativeSort ( nativePtr , new long [ ] { getColumnIndexForSort ( fieldName ) } , new boolean [ ] { Sort . ASCENDING . getValue ( ) } ) ; 
 - return new RealmResults < E > ( realm , className , ptr ) ; 
 + SortDescriptor sortDescriptor = 
 + SortDescriptor . getInstanceForSort ( collection . getTable ( ) , fieldName , Sort . ASCENDING ) ; 
 + try { 
 + Collection sortedCollection = collection . sort ( sortDescriptor ) ; 
 + if ( className ! = null ) { 
 + return new RealmResults < E > ( realm , sortedCollection , className ) ; 
 + } else { 
 + return new RealmResults < E > ( realm , sortedCollection , classSpec ) ; 
 + } 
 + } finally { 
 + sortDescriptor . close ( ) ; 
 } 
 - * / 
 - return null ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / Collection . java b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 index 7b4e838 . . d0cdd46 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / Collection . java 
 @ @ - 75 , 6 + 75 , 7 @ @ public class Collection implements NativeObject { 
 
 private final long nativePtr ; 
 private static final long nativeFinalizerPtr = nativeGetFinalizerPtr ( ) ; 
 + private final SharedRealm sharedRealm ; 
 private final Context context ; 
 private final TableQuery query ; 
 private final List < Listener > listeners = new CopyOnWriteArrayList < Listener > ( ) ; 
 @ @ - 104 , 6 + 105 , 7 @ @ public class Collection implements NativeObject { 
 } 
 
 public Collection ( SharedRealm sharedRealm , TableQuery query , SortDescriptor sortDescriptor ) { 
 + this . sharedRealm = sharedRealm ; 
 this . context = sharedRealm . context ; 
 this . query = query ; 
 
 @ @ - 116 , 6 + 118 , 15 @ @ public class Collection implements NativeObject { 
 this . context . addReference ( this ) ; 
 } 
 
 + public Collection ( SharedRealm sharedRealm , TableQuery query , long nativePtr ) { 
 + this . sharedRealm = sharedRealm ; 
 + this . context = sharedRealm . context ; 
 + this . query = query ; 
 + this . nativePtr = nativePtr ; 
 + 
 + this . context . addReference ( this ) ; 
 + } 
 + 
 @ Override 
 public long getNativePtr ( ) { 
 return nativePtr ; 
 @ @ - 130 , 6 + 141 , 10 @ @ public class Collection implements NativeObject { 
 return UncheckedRow . getByRowPointer ( query . table , nativeGetRow ( nativePtr , index ) ) ; 
 } 
 
 + public Table getTable ( ) { 
 + return query . getTable ( ) ; 
 + } 
 + 
 public Object aggregate ( Aggregate aggregateMethod , long columnIndex ) { 
 return nativeAggregate ( nativePtr , columnIndex , aggregateMethod . getValue ( ) ) ; 
 } 
 @ @ - 143 , 6 + 158 , 10 @ @ public class Collection implements NativeObject { 
 nativeClear ( nativePtr ) ; 
 } 
 
 + public Collection sort ( SortDescriptor sortDescriptor ) { 
 + return new Collection ( sharedRealm , query , nativeSort ( nativePtr , sortDescriptor . getNativePtr ( ) ) ) ; 
 + } 
 + 
 public void addListener ( Listener listener ) { 
 if ( ! listeners . contains ( listener ) ) { 
 listeners . add ( listener ) ; 
 @ @ - 193 , 7 + 212 , 7 @ @ public class Collection implements NativeObject { 
 private static native void nativeClear ( long nativePtr ) ; 
 private static native long nativeSize ( long nativePtr ) ; 
 private static native Object nativeAggregate ( long nativePtr , long columnIndex , byte aggregateFunc ) ; 
 - private static native long nativeSort ( long nativePtr , long [ ] columnIndices , boolean [ ] orders ) ; 
 + private static native long nativeSort ( long nativePtr , long sortDescNativePtr ) ; 
 private native long nativeAddListener ( long nativePtr ) ; 
 private static native long nativeNotificationTokenGetFinalizerPtr ( ) ; 
 private static native long nativeNotificationTokenClose ( long nativePtr ) ;
