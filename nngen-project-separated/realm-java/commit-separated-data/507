BLEU SCORE: 0.05341087579952926

TEST MSG: Remove commitTransaction ( boolean )
GENERATED MSG: add fix for # 1466

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index 598c8f3 . . 72952a2 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 312 , 29 + 312 , 10 @ @ abstract class BaseRealm implements Closeable { <nl> * changes from this commit . <nl> * / <nl> public void commitTransaction ( ) { <nl> - commitTransaction ( true ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Commits transaction and sends notifications to local thread . <nl> - * <nl> - * @ param notifyLocalThread set to { @ code false } to prevent this commit from triggering thread local change <nl> - * listeners . <nl> - * / <nl> - void commitTransaction ( boolean notifyLocalThread ) { <nl> checkIfValid ( ) ; <nl> sharedRealm . commitTransaction ( ) ; <nl> ObjectServerFacade . getFacade ( configuration . isSyncConfiguration ( ) ) <nl> . notifyCommit ( configuration , sharedRealm . getLastSnapshotVersion ( ) ) ; <nl> - <nl> - / / FIXME : Check if this is still needed . <nl> - / / Sometimes we don ' t want to notify the local thread about commits , e . g . creating a completely new Realm <nl> - / / file will make a commit in order to create the schema . Users should not be notified about that . <nl> - / * <nl> - if ( notifyLocalThread ) { <nl> - sharedRealm . realmNotifier . notifyCommitByLocalThread ( ) ; <nl> - } <nl> - * / <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index 9ce7d3b . . 7e8dd85 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 374 , 7 + 374 , 7 @ @ public final class Realm extends BaseRealm { <nl> } finally { <nl> if ( ! syncAvailable ) { <nl> if ( commitNeeded ) { <nl> - realm . commitTransaction ( false ) ; <nl> + realm . commitTransaction ( ) ; <nl> } else { <nl> realm . cancelTransaction ( ) ; <nl> } <nl> @ @ - 1347 , 6 + 1347 , 7 @ @ public final class Realm extends BaseRealm { <nl> <nl> boolean transactionCommitted = false ; <nl> final Throwable [ ] exception = new Throwable [ 1 ] ; <nl> + / / FIXME : Disable notifier in SharedRealm <nl> final Realm bgRealm = Realm . getInstance ( realmConfiguration ) ; <nl> bgRealm . beginTransaction ( ) ; <nl> try { <nl> @ @ - 1354 , 7 + 1355 , 7 @ @ public final class Realm extends BaseRealm { <nl> <nl> if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { <nl> / / No need to send change notification to the work thread . <nl> - bgRealm . commitTransaction ( false ) ; <nl> + bgRealm . commitTransaction ( ) ; <nl> / / The bgRealm needs to be closed before post event to caller ' s handler to avoid concurrency <nl> / / problem . This is currently guaranteed by posting handleAsyncTransactionCompleted below . <nl> bgRealm . close ( ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> index 9692993 . . 013a15f 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmTest . java <nl> @ @ - 1865 , 6 + 1865 , 66 @ @ public class RealmTest extends AndroidTestCase { <nl> assertTrue ( future . get ( 10 , TimeUnit . SECONDS ) ) ; <nl> } <nl> <nl> + / / Realm validation & initialization is done once , still ColumnIndices <nl> + / / should be populated for the subsequent Realm sharing the same configuration <nl> + / / even if we skip initialization & validation <nl> + public void testColumnIndicesIsPopulatedWhenSkippingInitialization ( ) throws Throwable { <nl> + final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; <nl> + final CountDownLatch callerThreadCompleted = new CountDownLatch ( 1 ) ; <nl> + final CountDownLatch signalBgFinished = new CountDownLatch ( 1 ) ; <nl> + final RealmConfiguration realmConfiguration = TestHelper . <nl> + createConfiguration ( getContext ( ) , " testColumnIndicesIsPopulatedWhenSkippingInitialization " ) ; <nl> + Realm . deleteRealm ( realmConfiguration ) ; <nl> + Realm realm = Realm . getInstance ( realmConfiguration ) ; <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + realm . createObject ( AllTypes . class ) . setColumnLong ( 42 ) ; <nl> + realm . commitTransaction ( ) ; <nl> + <nl> + RealmResults < AllTypes > all = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> + assertNotNull ( all ) ; <nl> + assertEquals ( 1 , all . size ( ) ) ; <nl> + assertEquals ( 42 , all . get ( 0 ) . getColumnLong ( ) ) ; <nl> + <nl> + / / open a background Realm <nl> + new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + try { <nl> + callerThreadCompleted . await ( ) ; <nl> + Realm backgroundRealm = Realm . getInstance ( realmConfiguration ) ; <nl> + <nl> + backgroundRealm . beginTransaction ( ) ; <nl> + backgroundRealm . createObject ( AllTypes . class ) . setColumnLong ( 7 ) ; <nl> + backgroundRealm . commitTransaction ( ) ; <nl> + <nl> + RealmResults < AllTypes > allBg = backgroundRealm . where ( AllTypes . class ) . findAll ( ) ; <nl> + assertNotNull ( allBg ) ; <nl> + assertEquals ( 2 , allBg . size ( ) ) ; <nl> + assertEquals ( 42 , allBg . get ( 0 ) . getColumnLong ( ) ) ; <nl> + assertEquals ( 7 , allBg . get ( 1 ) . getColumnLong ( ) ) ; <nl> + <nl> + backgroundRealm . close ( ) ; <nl> + <nl> + <nl> + <nl> + } catch ( InterruptedException e ) { <nl> + threadAssertionError [ 0 ] = e ; <nl> + } catch ( AssertionFailedError e ) { <nl> + threadAssertionError [ 0 ] = e ; <nl> + <nl> + } finally { <nl> + signalBgFinished . countDown ( ) ; <nl> + } <nl> + } <nl> + } . start ( ) ; <nl> + <nl> + callerThreadCompleted . countDown ( ) ; <nl> + signalBgFinished . await ( ) ; <nl> + if ( threadAssertionError [ 0 ] ! = null ) <nl> + throw threadAssertionError [ 0 ] ; <nl> + } <nl> + <nl> public void testProcessLocalListenersAfterRefresh ( ) { <nl> / / Used to validate the result <nl> final AtomicBoolean listenerWasCalled = new AtomicBoolean ( false ) ; <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 2828617 . . d010795 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 779 , 6 + 779 , 8 @ @ public final class Realm implements Closeable { <nl> realm . close ( ) ; <nl> throw e ; <nl> } <nl> + } else { <nl> + loadMediatorClasses ( realm ) ; <nl> } <nl> <nl> return realm ; <nl> @ @ - 856 , 6 + 858 , 13 @ @ public final class Realm implements Closeable { <nl> } <nl> } <nl> <nl> + private static void loadMediatorClasses ( Realm realm ) { <nl> + RealmProxyMediator mediator = realm . configuration . getSchemaMediator ( ) ; <nl> + for ( Class < ? extends RealmObject > modelClass : mediator . getModelClasses ( ) ) { <nl> + realm . columnIndices . addClass ( modelClass , mediator . getColumnIndices ( modelClass ) ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Create a Realm object for each object in a JSON array . This must be done within a transaction . <nl> * JSON properties with a null value will map to the default value for the data type in Realm

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index 598c8f3 . . 72952a2 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 312 , 29 + 312 , 10 @ @ abstract class BaseRealm implements Closeable { 
 * changes from this commit . 
 * / 
 public void commitTransaction ( ) { 
 - commitTransaction ( true ) ; 
 - } 
 - 
 - / * * 
 - * Commits transaction and sends notifications to local thread . 
 - * 
 - * @ param notifyLocalThread set to { @ code false } to prevent this commit from triggering thread local change 
 - * listeners . 
 - * / 
 - void commitTransaction ( boolean notifyLocalThread ) { 
 checkIfValid ( ) ; 
 sharedRealm . commitTransaction ( ) ; 
 ObjectServerFacade . getFacade ( configuration . isSyncConfiguration ( ) ) 
 . notifyCommit ( configuration , sharedRealm . getLastSnapshotVersion ( ) ) ; 
 - 
 - / / FIXME : Check if this is still needed . 
 - / / Sometimes we don ' t want to notify the local thread about commits , e . g . creating a completely new Realm 
 - / / file will make a commit in order to create the schema . Users should not be notified about that . 
 - / * 
 - if ( notifyLocalThread ) { 
 - sharedRealm . realmNotifier . notifyCommitByLocalThread ( ) ; 
 - } 
 - * / 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index 9ce7d3b . . 7e8dd85 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 374 , 7 + 374 , 7 @ @ public final class Realm extends BaseRealm { 
 } finally { 
 if ( ! syncAvailable ) { 
 if ( commitNeeded ) { 
 - realm . commitTransaction ( false ) ; 
 + realm . commitTransaction ( ) ; 
 } else { 
 realm . cancelTransaction ( ) ; 
 } 
 @ @ - 1347 , 6 + 1347 , 7 @ @ public final class Realm extends BaseRealm { 
 
 boolean transactionCommitted = false ; 
 final Throwable [ ] exception = new Throwable [ 1 ] ; 
 + / / FIXME : Disable notifier in SharedRealm 
 final Realm bgRealm = Realm . getInstance ( realmConfiguration ) ; 
 bgRealm . beginTransaction ( ) ; 
 try { 
 @ @ - 1354 , 7 + 1355 , 7 @ @ public final class Realm extends BaseRealm { 
 
 if ( ! Thread . currentThread ( ) . isInterrupted ( ) ) { 
 / / No need to send change notification to the work thread . 
 - bgRealm . commitTransaction ( false ) ; 
 + bgRealm . commitTransaction ( ) ; 
 / / The bgRealm needs to be closed before post event to caller ' s handler to avoid concurrency 
 / / problem . This is currently guaranteed by posting handleAsyncTransactionCompleted below . 
 bgRealm . close ( ) ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmTest . java b / realm / src / androidTest / java / io / realm / RealmTest . java 
 index 9692993 . . 013a15f 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmTest . java 
 @ @ - 1865 , 6 + 1865 , 66 @ @ public class RealmTest extends AndroidTestCase { 
 assertTrue ( future . get ( 10 , TimeUnit . SECONDS ) ) ; 
 } 
 
 + / / Realm validation & initialization is done once , still ColumnIndices 
 + / / should be populated for the subsequent Realm sharing the same configuration 
 + / / even if we skip initialization & validation 
 + public void testColumnIndicesIsPopulatedWhenSkippingInitialization ( ) throws Throwable { 
 + final Throwable [ ] threadAssertionError = new Throwable [ 1 ] ; 
 + final CountDownLatch callerThreadCompleted = new CountDownLatch ( 1 ) ; 
 + final CountDownLatch signalBgFinished = new CountDownLatch ( 1 ) ; 
 + final RealmConfiguration realmConfiguration = TestHelper . 
 + createConfiguration ( getContext ( ) , " testColumnIndicesIsPopulatedWhenSkippingInitialization " ) ; 
 + Realm . deleteRealm ( realmConfiguration ) ; 
 + Realm realm = Realm . getInstance ( realmConfiguration ) ; 
 + 
 + realm . beginTransaction ( ) ; 
 + realm . createObject ( AllTypes . class ) . setColumnLong ( 42 ) ; 
 + realm . commitTransaction ( ) ; 
 + 
 + RealmResults < AllTypes > all = realm . where ( AllTypes . class ) . findAll ( ) ; 
 + assertNotNull ( all ) ; 
 + assertEquals ( 1 , all . size ( ) ) ; 
 + assertEquals ( 42 , all . get ( 0 ) . getColumnLong ( ) ) ; 
 + 
 + / / open a background Realm 
 + new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + callerThreadCompleted . await ( ) ; 
 + Realm backgroundRealm = Realm . getInstance ( realmConfiguration ) ; 
 + 
 + backgroundRealm . beginTransaction ( ) ; 
 + backgroundRealm . createObject ( AllTypes . class ) . setColumnLong ( 7 ) ; 
 + backgroundRealm . commitTransaction ( ) ; 
 + 
 + RealmResults < AllTypes > allBg = backgroundRealm . where ( AllTypes . class ) . findAll ( ) ; 
 + assertNotNull ( allBg ) ; 
 + assertEquals ( 2 , allBg . size ( ) ) ; 
 + assertEquals ( 42 , allBg . get ( 0 ) . getColumnLong ( ) ) ; 
 + assertEquals ( 7 , allBg . get ( 1 ) . getColumnLong ( ) ) ; 
 + 
 + backgroundRealm . close ( ) ; 
 + 
 + 
 + 
 + } catch ( InterruptedException e ) { 
 + threadAssertionError [ 0 ] = e ; 
 + } catch ( AssertionFailedError e ) { 
 + threadAssertionError [ 0 ] = e ; 
 + 
 + } finally { 
 + signalBgFinished . countDown ( ) ; 
 + } 
 + } 
 + } . start ( ) ; 
 + 
 + callerThreadCompleted . countDown ( ) ; 
 + signalBgFinished . await ( ) ; 
 + if ( threadAssertionError [ 0 ] ! = null ) 
 + throw threadAssertionError [ 0 ] ; 
 + } 
 + 
 public void testProcessLocalListenersAfterRefresh ( ) { 
 / / Used to validate the result 
 final AtomicBoolean listenerWasCalled = new AtomicBoolean ( false ) ; 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 2828617 . . d010795 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 779 , 6 + 779 , 8 @ @ public final class Realm implements Closeable { 
 realm . close ( ) ; 
 throw e ; 
 } 
 + } else { 
 + loadMediatorClasses ( realm ) ; 
 } 
 
 return realm ; 
 @ @ - 856 , 6 + 858 , 13 @ @ public final class Realm implements Closeable { 
 } 
 } 
 
 + private static void loadMediatorClasses ( Realm realm ) { 
 + RealmProxyMediator mediator = realm . configuration . getSchemaMediator ( ) ; 
 + for ( Class < ? extends RealmObject > modelClass : mediator . getModelClasses ( ) ) { 
 + realm . columnIndices . addClass ( modelClass , mediator . getColumnIndices ( modelClass ) ) ; 
 + } 
 + } 
 + 
 / * * 
 * Create a Realm object for each object in a JSON array . This must be done within a transaction . 
 * JSON properties with a null value will map to the default value for the data type in Realm
