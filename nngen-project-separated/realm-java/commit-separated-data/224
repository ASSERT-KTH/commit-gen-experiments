BLEU SCORE: 0.6389431042462724

TEST MSG: fix failing tests
GENERATED MSG: Update failing tests

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> index 95e84c9 . . 638a3f8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> @ @ - 181 , 8 + 181 , 8 @ @ public class RealmSchemaTests { <nl> <nl> for ( String validClassName : validClassNames ) { <nl> / / Not nullable <nl> - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , String . class , FieldAttribute . REQUIRED ) ; <nl> - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + RealmObjectSchema objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , <nl> + " pkField " , String . class , FieldAttribute . REQUIRED ) ; <nl> assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; <nl> assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> @ @ - 191 , 8 + 191 , 8 @ @ public class RealmSchemaTests { <nl> realmSchema . remove ( validClassName ) ; <nl> <nl> / / Nullable <nl> - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , String . class ) ; <nl> - objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , <nl> + " pkField " , String . class ) ; <nl> assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; <nl> assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; <nl> @ @ - 216 , 9 + 216 , 9 @ @ public class RealmSchemaTests { <nl> <nl> for ( String validClassName : validClassNames ) { <nl> / / Not nullable <nl> - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class , <nl> - FieldAttribute . REQUIRED ) ; <nl> - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + <nl> + RealmObjectSchema objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , <nl> + " pkField " , Integer . class , FieldAttribute . REQUIRED ) ; <nl> assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> @ @ - 227 , 8 + 227 , 8 @ @ public class RealmSchemaTests { <nl> realmSchema . remove ( validClassName ) ; <nl> <nl> / / Nullable <nl> - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class ) ; <nl> - objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + <nl> + objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class ) ; <nl> assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; <nl> @ @ - 252 , 9 + 252 , 9 @ @ public class RealmSchemaTests { <nl> <nl> for ( String validClassName : validClassNames ) { <nl> / / Not nullable <nl> - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class , <nl> - FieldAttribute . REQUIRED ) ; <nl> - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + <nl> + RealmObjectSchema objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , <nl> + " pkField " , int . class , FieldAttribute . REQUIRED ) ; <nl> assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> @ @ - 263 , 8 + 263 , 8 @ @ public class RealmSchemaTests { <nl> realmSchema . remove ( validClassName ) ; <nl> <nl> / / Nullable <nl> - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class ) ; <nl> - objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + <nl> + objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class ) ; <nl> assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> assertFalse ( objectSchema . isNullable ( " pkField " ) ) ;
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> index 1b11b8d . . 8210be8 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java <nl> @ @ - 166 , 80 + 166 , 104 @ @ public class RealmSchemaTests { <nl> } <nl> <nl> @ Test <nl> - public void createWithPrimaryKeyField _ immutableThrows ( ) { <nl> - if ( type = = SchemaType . MUTABLE ) { <nl> - return ; <nl> - } <nl> - thrown . expect ( UnsupportedOperationException . class ) ; <nl> - realmSchema . createWithPrimaryKeyField ( " test " , " pkField " , String . class ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void createWithPrimaryKeyField _ string ( ) { <nl> + final String [ ] validClassNames = { <nl> + TestHelper . getRandomString ( 1 ) , <nl> + " Darby " , <nl> + TestHelper . getRandomString ( Table . CLASS _ NAME _ MAX _ LENGTH ) <nl> + } ; <nl> + <nl> if ( type = = SchemaType . IMMUTABLE ) { <nl> + thrown . expect ( UnsupportedOperationException . class ) ; <nl> + realmSchema . createWithPrimaryKeyField ( validClassNames [ 0 ] , " pkField " , String . class ) ; <nl> return ; <nl> } <nl> - / / Not nullable <nl> - realmSchema . createWithPrimaryKeyField ( " FooNonNull " , " pkField " , String . class , FieldAttribute . REQUIRED ) ; <nl> - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( " FooNonNull " ) ; <nl> - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> - assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; <nl> - assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> <nl> - / / Nullable <nl> - realmSchema . createWithPrimaryKeyField ( " FooNull " , " pkField " , String . class ) ; <nl> - objectSchema = realmSchema . getSchemaForClass ( " FooNull " ) ; <nl> - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> - assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; <nl> - assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; <nl> - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> + for ( String validClassName : validClassNames ) { <nl> + / / Not nullable <nl> + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , String . class , FieldAttribute . REQUIRED ) ; <nl> + RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> + assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; <nl> + assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> + <nl> + / / Nullable <nl> + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , String . class ) ; <nl> + objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> + assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; <nl> + assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; <nl> + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> public void createWithPrimaryKeyField _ boxedInteger ( ) { <nl> + final String [ ] validClassNames = { <nl> + TestHelper . getRandomString ( 1 ) , <nl> + " Darby " , <nl> + TestHelper . getRandomString ( Table . CLASS _ NAME _ MAX _ LENGTH ) <nl> + } ; <nl> + <nl> if ( type = = SchemaType . IMMUTABLE ) { <nl> + thrown . expect ( UnsupportedOperationException . class ) ; <nl> + realmSchema . createWithPrimaryKeyField ( validClassNames [ 0 ] , " pkField " , Integer . class ) ; <nl> return ; <nl> } <nl> - / / Not nullable <nl> - realmSchema . createWithPrimaryKeyField ( " FooNonNull " , " pkField " , Integer . class , <nl> - FieldAttribute . REQUIRED ) ; <nl> - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( " FooNonNull " ) ; <nl> - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> - assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> - assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> <nl> - / / Nullable <nl> - realmSchema . createWithPrimaryKeyField ( " FooNull " , " pkField " , Integer . class ) ; <nl> - objectSchema = realmSchema . getSchemaForClass ( " FooNull " ) ; <nl> - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> - assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> - assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; <nl> - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> + for ( String validClassName : validClassNames ) { <nl> + / / Not nullable <nl> + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class , <nl> + FieldAttribute . REQUIRED ) ; <nl> + RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> + assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> + assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> + <nl> + / / Nullable <nl> + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class ) ; <nl> + objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> + assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> + assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; <nl> + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> public void createWithPrimaryKeyField _ int ( ) { <nl> + final String [ ] validClassNames = { <nl> + TestHelper . getRandomString ( 1 ) , <nl> + " Darby " , <nl> + TestHelper . getRandomString ( Table . CLASS _ NAME _ MAX _ LENGTH ) <nl> + } ; <nl> + <nl> if ( type = = SchemaType . IMMUTABLE ) { <nl> + thrown . expect ( UnsupportedOperationException . class ) ; <nl> + realmSchema . createWithPrimaryKeyField ( validClassNames [ 0 ] , " pkField " , int . class ) ; <nl> return ; <nl> } <nl> - / / Without Required <nl> - realmSchema . createWithPrimaryKeyField ( " Foo " , " pkField " , int . class ) ; <nl> - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( " Foo " ) ; <nl> - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> - assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> - assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> <nl> - / / With Required <nl> - realmSchema . createWithPrimaryKeyField ( " FooRequired " , " pkField " , int . class , <nl> - FieldAttribute . REQUIRED ) ; <nl> - objectSchema = realmSchema . getSchemaForClass ( " FooRequired " ) ; <nl> - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> - assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> - assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> + for ( String validClassName : validClassNames ) { <nl> + / / Not nullable <nl> + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class , <nl> + FieldAttribute . REQUIRED ) ; <nl> + RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> + assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> + assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> + <nl> + / / Nullable <nl> + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class ) ; <nl> + objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; <nl> + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; <nl> + assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; <nl> + assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; <nl> + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> @ @ - 275 , 7 + 299 , 7 @ @ public class RealmSchemaTests { <nl> if ( type = = SchemaType . IMMUTABLE ) { <nl> return ; <nl> } <nl> - String [ ] invalidNames = { null , " " , TestHelper . getRandomString ( 57 ) } ; <nl> + String [ ] invalidNames = { null , " " , TestHelper . getRandomString ( Table . CLASS _ NAME _ MAX _ LENGTH + 1 ) } ; <nl> <nl> for ( String name : invalidNames ) { <nl> try {

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 index 95e84c9 . . 638a3f8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 @ @ - 181 , 8 + 181 , 8 @ @ public class RealmSchemaTests { 
 
 for ( String validClassName : validClassNames ) { 
 / / Not nullable 
 - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , String . class , FieldAttribute . REQUIRED ) ; 
 - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + RealmObjectSchema objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , 
 + " pkField " , String . class , FieldAttribute . REQUIRED ) ; 
 assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; 
 assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 @ @ - 191 , 8 + 191 , 8 @ @ public class RealmSchemaTests { 
 realmSchema . remove ( validClassName ) ; 
 
 / / Nullable 
 - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , String . class ) ; 
 - objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , 
 + " pkField " , String . class ) ; 
 assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; 
 assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; 
 @ @ - 216 , 9 + 216 , 9 @ @ public class RealmSchemaTests { 
 
 for ( String validClassName : validClassNames ) { 
 / / Not nullable 
 - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class , 
 - FieldAttribute . REQUIRED ) ; 
 - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + 
 + RealmObjectSchema objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , 
 + " pkField " , Integer . class , FieldAttribute . REQUIRED ) ; 
 assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 @ @ - 227 , 8 + 227 , 8 @ @ public class RealmSchemaTests { 
 realmSchema . remove ( validClassName ) ; 
 
 / / Nullable 
 - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class ) ; 
 - objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + 
 + objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class ) ; 
 assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; 
 @ @ - 252 , 9 + 252 , 9 @ @ public class RealmSchemaTests { 
 
 for ( String validClassName : validClassNames ) { 
 / / Not nullable 
 - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class , 
 - FieldAttribute . REQUIRED ) ; 
 - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + 
 + RealmObjectSchema objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , 
 + " pkField " , int . class , FieldAttribute . REQUIRED ) ; 
 assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 @ @ - 263 , 8 + 263 , 8 @ @ public class RealmSchemaTests { 
 realmSchema . remove ( validClassName ) ; 
 
 / / Nullable 
 - realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class ) ; 
 - objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + 
 + objectSchema = realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class ) ; 
 assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 assertFalse ( objectSchema . isNullable ( " pkField " ) ) ;

NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 index 1b11b8d . . 8210be8 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmSchemaTests . java 
 @ @ - 166 , 80 + 166 , 104 @ @ public class RealmSchemaTests { 
 } 
 
 @ Test 
 - public void createWithPrimaryKeyField _ immutableThrows ( ) { 
 - if ( type = = SchemaType . MUTABLE ) { 
 - return ; 
 - } 
 - thrown . expect ( UnsupportedOperationException . class ) ; 
 - realmSchema . createWithPrimaryKeyField ( " test " , " pkField " , String . class ) ; 
 - } 
 - 
 - @ Test 
 public void createWithPrimaryKeyField _ string ( ) { 
 + final String [ ] validClassNames = { 
 + TestHelper . getRandomString ( 1 ) , 
 + " Darby " , 
 + TestHelper . getRandomString ( Table . CLASS _ NAME _ MAX _ LENGTH ) 
 + } ; 
 + 
 if ( type = = SchemaType . IMMUTABLE ) { 
 + thrown . expect ( UnsupportedOperationException . class ) ; 
 + realmSchema . createWithPrimaryKeyField ( validClassNames [ 0 ] , " pkField " , String . class ) ; 
 return ; 
 } 
 - / / Not nullable 
 - realmSchema . createWithPrimaryKeyField ( " FooNonNull " , " pkField " , String . class , FieldAttribute . REQUIRED ) ; 
 - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( " FooNonNull " ) ; 
 - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 - assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; 
 - assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 
 - / / Nullable 
 - realmSchema . createWithPrimaryKeyField ( " FooNull " , " pkField " , String . class ) ; 
 - objectSchema = realmSchema . getSchemaForClass ( " FooNull " ) ; 
 - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 - assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; 
 - assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; 
 - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 + for ( String validClassName : validClassNames ) { 
 + / / Not nullable 
 + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , String . class , FieldAttribute . REQUIRED ) ; 
 + RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 + assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; 
 + assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 + 
 + / / Nullable 
 + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , String . class ) ; 
 + objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 + assertEquals ( RealmFieldType . STRING , objectSchema . getFieldType ( " pkField " ) ) ; 
 + assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; 
 + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 + } 
 } 
 
 @ Test 
 public void createWithPrimaryKeyField _ boxedInteger ( ) { 
 + final String [ ] validClassNames = { 
 + TestHelper . getRandomString ( 1 ) , 
 + " Darby " , 
 + TestHelper . getRandomString ( Table . CLASS _ NAME _ MAX _ LENGTH ) 
 + } ; 
 + 
 if ( type = = SchemaType . IMMUTABLE ) { 
 + thrown . expect ( UnsupportedOperationException . class ) ; 
 + realmSchema . createWithPrimaryKeyField ( validClassNames [ 0 ] , " pkField " , Integer . class ) ; 
 return ; 
 } 
 - / / Not nullable 
 - realmSchema . createWithPrimaryKeyField ( " FooNonNull " , " pkField " , Integer . class , 
 - FieldAttribute . REQUIRED ) ; 
 - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( " FooNonNull " ) ; 
 - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 - assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 - assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 
 - / / Nullable 
 - realmSchema . createWithPrimaryKeyField ( " FooNull " , " pkField " , Integer . class ) ; 
 - objectSchema = realmSchema . getSchemaForClass ( " FooNull " ) ; 
 - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 - assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 - assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; 
 - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 + for ( String validClassName : validClassNames ) { 
 + / / Not nullable 
 + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class , 
 + FieldAttribute . REQUIRED ) ; 
 + RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 + assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 + assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 + 
 + / / Nullable 
 + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , Integer . class ) ; 
 + objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 + assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 + assertTrue ( objectSchema . isNullable ( " pkField " ) ) ; 
 + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 + } 
 } 
 
 @ Test 
 public void createWithPrimaryKeyField _ int ( ) { 
 + final String [ ] validClassNames = { 
 + TestHelper . getRandomString ( 1 ) , 
 + " Darby " , 
 + TestHelper . getRandomString ( Table . CLASS _ NAME _ MAX _ LENGTH ) 
 + } ; 
 + 
 if ( type = = SchemaType . IMMUTABLE ) { 
 + thrown . expect ( UnsupportedOperationException . class ) ; 
 + realmSchema . createWithPrimaryKeyField ( validClassNames [ 0 ] , " pkField " , int . class ) ; 
 return ; 
 } 
 - / / Without Required 
 - realmSchema . createWithPrimaryKeyField ( " Foo " , " pkField " , int . class ) ; 
 - RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( " Foo " ) ; 
 - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 - assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 - assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 
 - / / With Required 
 - realmSchema . createWithPrimaryKeyField ( " FooRequired " , " pkField " , int . class , 
 - FieldAttribute . REQUIRED ) ; 
 - objectSchema = realmSchema . getSchemaForClass ( " FooRequired " ) ; 
 - assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 - assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 - assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 - assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 + for ( String validClassName : validClassNames ) { 
 + / / Not nullable 
 + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class , 
 + FieldAttribute . REQUIRED ) ; 
 + RealmObjectSchema objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 + assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 + assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 + 
 + / / Nullable 
 + realmSchema . createWithPrimaryKeyField ( validClassName , " pkField " , int . class ) ; 
 + objectSchema = realmSchema . getSchemaForClass ( validClassName ) ; 
 + assertEquals ( " pkField " , objectSchema . getPrimaryKey ( ) ) ; 
 + assertEquals ( RealmFieldType . INTEGER , objectSchema . getFieldType ( " pkField " ) ) ; 
 + assertFalse ( objectSchema . isNullable ( " pkField " ) ) ; 
 + assertTrue ( objectSchema . hasIndex ( " pkField " ) ) ; 
 + } 
 } 
 
 @ Test 
 @ @ - 275 , 7 + 299 , 7 @ @ public class RealmSchemaTests { 
 if ( type = = SchemaType . IMMUTABLE ) { 
 return ; 
 } 
 - String [ ] invalidNames = { null , " " , TestHelper . getRandomString ( 57 ) } ; 
 + String [ ] invalidNames = { null , " " , TestHelper . getRandomString ( Table . CLASS _ NAME _ MAX _ LENGTH + 1 ) } ; 
 
 for ( String name : invalidNames ) { 
 try {
