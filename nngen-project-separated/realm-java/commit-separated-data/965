BLEU SCORE: 0.0015221056021476422

TEST MSG: Less C style
GENERATED MSG: Fixing an error in a unit test and adding a few comments to clarify what it tested .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> index f72b315 . . 298f2be 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> @ @ - 511 , 12 + 511 , 15 @ @ public class JNITableTest extends AndroidTestCase { <nl> assertEquals ( colIndex , table . getColumnIndex ( columnName ) ) ; <nl> <nl> table . addEmptyRow ( ) ; <nl> - if ( columnType = = BINARY ) <nl> + if ( columnType = = BINARY ) { <nl> table . setBinaryByteArray ( colIndex , 0 , null ) ; <nl> - else if ( columnType = = STRING ) <nl> + } <nl> + else if ( columnType = = STRING ) { <nl> table . setString ( colIndex , 0 , null ) ; <nl> - else <nl> + } <nl> + else { <nl> table . getCheckedRow ( 0 ) . setNull ( colIndex ) ; <nl> + } <nl> <nl> assertEquals ( 2 , table . size ( ) ) ; <nl>
NEAREST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> index dcd2f94 . . 83b11ae 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java <nl> @ @ - 472 , 6 + 472 , 7 @ @ public class JNITableTest extends AndroidTestCase { <nl> table . setBinaryByteArray ( colIndex , 0 , new byte [ ] { 0 } ) ; <nl> else if ( columnType = = ColumnType . STRING ) <nl> table . setString ( colIndex , 0 , " Foo " ) ; <nl> + / / if column is nullable not exception should be thrown <nl> try { <nl> table . addEmptyRow ( ) ; <nl> if ( columnType = = ColumnType . BINARY ) <nl> @ @ - 485 , 6 + 486 , 9 @ @ public class JNITableTest extends AndroidTestCase { <nl> fail ( ) ; <nl> } <nl> } catch ( IllegalArgumentException ignored ) { <nl> + if ( nullable ) { <nl> + fail ( ) ; <nl> + } <nl> } <nl> table . removeLast ( ) ; <nl> assertEquals ( 1 , table . size ( ) ) ; <nl> @ @ - 497 , 6 + 501 , 7 @ @ public class JNITableTest extends AndroidTestCase { <nl> assertEquals ( colIndex , table . getColumnIndex ( columnName ) ) ; <nl> <nl> table . addEmptyRow ( ) ; <nl> + / / after converting to nullable , it is fine to set value to null i . e . no exception is thrown <nl> if ( columnType = = ColumnType . BINARY ) <nl> table . setBinaryByteArray ( colIndex , 0 , null ) ; <nl> else if ( columnType = = ColumnType . STRING ) <nl> @ @ - 543 , 6 + 548 , 7 @ @ public class JNITableTest extends AndroidTestCase { <nl> table . setBinaryByteArray ( colIndex , 0 , new byte [ ] { 0 } ) ; <nl> else if ( columnType = = ColumnType . STRING ) <nl> table . setString ( colIndex , 0 , " Foo " ) ; <nl> + / / if column is nullable , setting a value to null is allowed ( no exception is thrown ) <nl> try { <nl> table . addEmptyRow ( ) ; <nl> if ( columnType = = ColumnType . BINARY ) <nl> @ @ - 551 , 7 + 557 , 6 @ @ public class JNITableTest extends AndroidTestCase { <nl> table . setString ( colIndex , 1 , null ) ; <nl> else <nl> table . getCheckedRow ( 1 ) . setNull ( colIndex ) ; <nl> - <nl> if ( ! nullable ) { <nl> fail ( ) ; <nl> } <nl> @ @ - 567 , 6 + 572 , 7 @ @ public class JNITableTest extends AndroidTestCase { <nl> assertEquals ( colIndex , table . getColumnIndex ( columnName ) ) ; <nl> <nl> table . addEmptyRow ( ) ; <nl> + / / after converting to not - nullable , setting values to null must throw an exception <nl> try { <nl> if ( columnType = = ColumnType . BINARY ) <nl> table . setBinaryByteArray ( colIndex , 0 , null ) ; <nl> @ @ - 574 , 9 + 580 , 7 @ @ public class JNITableTest extends AndroidTestCase { <nl> table . setString ( colIndex , 0 , null ) ; <nl> else <nl> table . getCheckedRow ( 0 ) . setNull ( colIndex ) ; <nl> - if ( ! nullable ) { <nl> - fail ( ) ; <nl> - } <nl> + fail ( ) ; <nl> } catch ( IllegalArgumentException ignored ) { <nl> } <nl> table . removeLast ( ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 index f72b315 . . 298f2be 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 @ @ - 511 , 12 + 511 , 15 @ @ public class JNITableTest extends AndroidTestCase { 
 assertEquals ( colIndex , table . getColumnIndex ( columnName ) ) ; 
 
 table . addEmptyRow ( ) ; 
 - if ( columnType = = BINARY ) 
 + if ( columnType = = BINARY ) { 
 table . setBinaryByteArray ( colIndex , 0 , null ) ; 
 - else if ( columnType = = STRING ) 
 + } 
 + else if ( columnType = = STRING ) { 
 table . setString ( colIndex , 0 , null ) ; 
 - else 
 + } 
 + else { 
 table . getCheckedRow ( 0 ) . setNull ( colIndex ) ; 
 + } 
 
 assertEquals ( 2 , table . size ( ) ) ; 


NEAREST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 index dcd2f94 . . 83b11ae 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / internal / JNITableTest . java 
 @ @ - 472 , 6 + 472 , 7 @ @ public class JNITableTest extends AndroidTestCase { 
 table . setBinaryByteArray ( colIndex , 0 , new byte [ ] { 0 } ) ; 
 else if ( columnType = = ColumnType . STRING ) 
 table . setString ( colIndex , 0 , " Foo " ) ; 
 + / / if column is nullable not exception should be thrown 
 try { 
 table . addEmptyRow ( ) ; 
 if ( columnType = = ColumnType . BINARY ) 
 @ @ - 485 , 6 + 486 , 9 @ @ public class JNITableTest extends AndroidTestCase { 
 fail ( ) ; 
 } 
 } catch ( IllegalArgumentException ignored ) { 
 + if ( nullable ) { 
 + fail ( ) ; 
 + } 
 } 
 table . removeLast ( ) ; 
 assertEquals ( 1 , table . size ( ) ) ; 
 @ @ - 497 , 6 + 501 , 7 @ @ public class JNITableTest extends AndroidTestCase { 
 assertEquals ( colIndex , table . getColumnIndex ( columnName ) ) ; 
 
 table . addEmptyRow ( ) ; 
 + / / after converting to nullable , it is fine to set value to null i . e . no exception is thrown 
 if ( columnType = = ColumnType . BINARY ) 
 table . setBinaryByteArray ( colIndex , 0 , null ) ; 
 else if ( columnType = = ColumnType . STRING ) 
 @ @ - 543 , 6 + 548 , 7 @ @ public class JNITableTest extends AndroidTestCase { 
 table . setBinaryByteArray ( colIndex , 0 , new byte [ ] { 0 } ) ; 
 else if ( columnType = = ColumnType . STRING ) 
 table . setString ( colIndex , 0 , " Foo " ) ; 
 + / / if column is nullable , setting a value to null is allowed ( no exception is thrown ) 
 try { 
 table . addEmptyRow ( ) ; 
 if ( columnType = = ColumnType . BINARY ) 
 @ @ - 551 , 7 + 557 , 6 @ @ public class JNITableTest extends AndroidTestCase { 
 table . setString ( colIndex , 1 , null ) ; 
 else 
 table . getCheckedRow ( 1 ) . setNull ( colIndex ) ; 
 - 
 if ( ! nullable ) { 
 fail ( ) ; 
 } 
 @ @ - 567 , 6 + 572 , 7 @ @ public class JNITableTest extends AndroidTestCase { 
 assertEquals ( colIndex , table . getColumnIndex ( columnName ) ) ; 
 
 table . addEmptyRow ( ) ; 
 + / / after converting to not - nullable , setting values to null must throw an exception 
 try { 
 if ( columnType = = ColumnType . BINARY ) 
 table . setBinaryByteArray ( colIndex , 0 , null ) ; 
 @ @ - 574 , 9 + 580 , 7 @ @ public class JNITableTest extends AndroidTestCase { 
 table . setString ( colIndex , 0 , null ) ; 
 else 
 table . getCheckedRow ( 0 ) . setNull ( colIndex ) ; 
 - if ( ! nullable ) { 
 - fail ( ) ; 
 - } 
 + fail ( ) ; 
 } catch ( IllegalArgumentException ignored ) { 
 } 
 table . removeLast ( ) ;
