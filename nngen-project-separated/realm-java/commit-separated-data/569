BLEU SCORE: 0.05114598707088891

TEST MSG: Use CheckedRow when creating a DynamicRealm Object .
GENERATED MSG: Add a check whether transformer was applied or not .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> index cc1d89d . . 345c8a6 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java <nl> @ @ - 518 , 14 + 518 , 14 @ @ abstract class BaseRealm implements Closeable { <nl> / / Used by RealmList / RealmResults <nl> / / Invariant : if dynamicClassName ! = null - > clazz = = DynamicRealmObject <nl> < E extends RealmModel > E get ( Class < E > clazz , String dynamicClassName , long rowIndex ) { <nl> - final Table table = ( dynamicClassName ! = null ) ? schema . getTable ( dynamicClassName ) : schema . getTable ( clazz ) ; <nl> + final boolean isDynamicRealmObject = dynamicClassName ! = null ; <nl> + final Table table = isDynamicRealmObject ? schema . getTable ( dynamicClassName ) : schema . getTable ( clazz ) ; <nl> <nl> E result ; <nl> - if ( dynamicClassName ! = null ) { <nl> + if ( isDynamicRealmObject ) { <nl> @ SuppressWarnings ( " unchecked " ) <nl> E dynamicObj = ( E ) new DynamicRealmObject ( this , <nl> - ( rowIndex ! = Table . NO _ MATCH ) ? table . getUncheckedRow ( rowIndex ) : InvalidRow . INSTANCE , <nl> - false ) ; <nl> + ( rowIndex ! = Table . NO _ MATCH ) ? table . getCheckedRow ( rowIndex ) : InvalidRow . INSTANCE ) ; <nl> result = dynamicObj ; <nl> } else { <nl> result = configuration . getSchemaMediator ( ) . newInstance ( clazz , this , <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> index 4af7ad5 . . 9b529e0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java <nl> @ @ - 95 , 12 + 95 , 12 @ @ public final class DynamicRealm extends BaseRealm { <nl> * @ throws RealmException if object could not be created due to the primary key being invalid . <nl> * @ throws IllegalStateException if the model clazz does not have an primary key defined . <nl> * @ throws IllegalArgumentException if the { @ code primaryKeyValue } doesn ' t have a value that can be converted to the <nl> - * expectd value . <nl> + * expected value . <nl> * / <nl> public DynamicRealmObject createObject ( String className , Object primaryKeyValue ) { <nl> Table table = schema . getTable ( className ) ; <nl> long index = table . addEmptyRowWithPrimaryKey ( primaryKeyValue ) ; <nl> - return new DynamicRealmObject ( this , table . getCheckedRow ( index ) , false ) ; <nl> + return new DynamicRealmObject ( this , table . getCheckedRow ( index ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> index 88ec5cd . . f48a0a0 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import io . realm . internal . android . JsonUtils ; <nl> * Class that wraps a normal RealmObject in order to allow dynamic access instead of a typed interface . <nl> * Using a DynamicRealmObject is slower than using the regular RealmObject class . <nl> * / <nl> + @ SuppressWarnings ( " WeakerAccess " ) <nl> public final class DynamicRealmObject extends RealmObject implements RealmObjectProxy { <nl> <nl> private final ProxyState proxyState = new ProxyState ( this ) ; <nl> @ @ - 67 , 24 + 68 , 18 @ @ public final class DynamicRealmObject extends RealmObject implements RealmObject <nl> proxyState . setConstructionFinished ( ) ; <nl> } <nl> <nl> - DynamicRealmObject ( BaseRealm realm , Row row , boolean convertTocheckedRow ) { <nl> + / / row must not be an instance of UncheckedRow <nl> + DynamicRealmObject ( BaseRealm realm , Row row ) { <nl> proxyState . setRealm $ realm ( realm ) ; <nl> - if ( convertTocheckedRow ) { <nl> - proxyState . setRow $ realm ( ( row instanceof CheckedRow ) ? ( CheckedRow ) row : ( ( UncheckedRow ) row ) . convertToChecked ( ) ) ; <nl> - } else { <nl> - proxyState . setRow $ realm ( row ) ; <nl> - } <nl> + proxyState . setRow $ realm ( row ) ; <nl> proxyState . setConstructionFinished ( ) ; <nl> } <nl> <nl> - DynamicRealmObject ( String className , BaseRealm realm , Row row , boolean convertTocheckedRow ) { <nl> + / / row must not be an instance of UncheckedRow <nl> + DynamicRealmObject ( String className , BaseRealm realm , Row row ) { <nl> proxyState . setClassName ( className ) ; <nl> proxyState . setRealm $ realm ( realm ) ; <nl> - if ( convertTocheckedRow ) { <nl> - proxyState . setRow $ realm ( ( row instanceof CheckedRow ) ? ( CheckedRow ) row : ( ( UncheckedRow ) row ) . convertToChecked ( ) ) ; <nl> - } else { <nl> - proxyState . setRow $ realm ( row ) ; <nl> - } <nl> + proxyState . setRow $ realm ( row ) ; <nl> proxyState . setConstructionFinished ( ) ; <nl> } <nl> <nl> @ @ - 287 , 7 + 282 , 7 @ @ public final class DynamicRealmObject extends RealmObject implements RealmObject <nl> } else { <nl> long linkRowIndex = proxyState . getRow $ realm ( ) . getLink ( columnIndex ) ; <nl> CheckedRow linkRow = proxyState . getRow $ realm ( ) . getTable ( ) . getLinkTarget ( columnIndex ) . getCheckedRow ( linkRowIndex ) ; <nl> - return new DynamicRealmObject ( proxyState . getRealm $ realm ( ) , linkRow , false ) ; <nl> + return new DynamicRealmObject ( proxyState . getRealm $ realm ( ) , linkRow ) ; <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java <nl> index 9e92389 . . febc7e8 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java <nl> @ @ - 570 , 7 + 570 , 7 @ @ public final class RealmObjectSchema { <nl> if ( function ! = null ) { <nl> long size = table . size ( ) ; <nl> for ( long i = 0 ; i < size ; i + + ) { <nl> - function . apply ( new DynamicRealmObject ( realm , table . getCheckedRow ( i ) , false ) ) ; <nl> + function . apply ( new DynamicRealmObject ( realm , table . getCheckedRow ( i ) ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index d50cad7 . . 566a050 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 2102 , 7 + 2102 , 7 @ @ public final class RealmQuery < E extends RealmModel > { <nl> final E result ; <nl> if ( isDynamicQuery ( ) ) { <nl> / / noinspection unchecked <nl> - result = ( E ) new DynamicRealmObject ( className , realm , Row . EMPTY _ ROW , false ) ; <nl> + result = ( E ) new DynamicRealmObject ( className , realm , Row . EMPTY _ ROW ) ; <nl> } else { <nl> result = realm . getConfiguration ( ) . getSchemaMediator ( ) . newInstance ( <nl> clazz , realm , Row . EMPTY _ ROW , realm . getSchema ( ) . getColumnInfo ( clazz ) ,
NEAREST DIFF (one line): diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> index db7909a . . 5953849 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy <nl> @ @ - 117 , 4 + 117 , 19 @ @ class BytecodeModifier { <nl> } <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Adds a method to indicate that Realm transformer has been applied . <nl> + * <nl> + * @ param clazz The CtClass to modify . <nl> + * / <nl> + public static void overrideTransformedMarker ( CtClass clazz ) { <nl> + logger . info " Realm : Marking as transformed $ { clazz . simpleName } " <nl> + try { <nl> + clazz . getDeclaredMethod ( " transformerApplied " , new CtClass [ 0 ] ) <nl> + } catch ( NotFoundException ignored ) { <nl> + clazz . addMethod ( CtNewMethod . make ( Modifier . PUBLIC , CtClass . booleanType , " transformerApplied " , <nl> + new CtClass [ 0 ] , new CtClass [ 0 ] , " { return true ; } " , clazz ) ) <nl> + } <nl> + } <nl> } <nl> diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> index 2ba0216 . . 804523a 100644 <nl> - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy <nl> @ @ - 28 , 6 + 28 , 7 @ @ import org . slf4j . LoggerFactory <nl> <nl> import java . lang . reflect . Modifier <nl> import java . util . jar . JarFile <nl> + import java . util . regex . Pattern <nl> <nl> import static com . android . build . api . transform . QualifiedContent . * <nl> / * * <nl> @ @ - 78 , 6 + 79 , 18 @ @ class RealmTransformer extends Transform { <nl> <nl> logger . info " ClassPool contains Realm classes : $ { classPool . getOrNull ( ' io . realm . RealmList ' ) ! = null } " <nl> <nl> + / / mark as transformed <nl> + def baseProxyMediator = classPool . get ( ' io . realm . internal . RealmProxyMediator ' ) <nl> + def mediatorPattern = Pattern . compile ( ' ^ io \ \ . realm \ \ . [ ^ . ] + Mediator $ ' ) <nl> + def proxyMediatorClasses = classNames <nl> + . findAll { it . matches ( mediatorPattern ) } <nl> + . collect { classPool . getCtClass ( it ) } <nl> + . findAll { it . superclass ? . equals ( baseProxyMediator ) } <nl> + logger . info " Proxy Mediator Classes : $ { proxyMediatorClasses * . name } " <nl> + proxyMediatorClasses . each { <nl> + BytecodeModifier . overrideTransformedMarker ( it ) ; <nl> + } <nl> + <nl> / / Find the model classes <nl> def realmObject = classPool . get ( ' io . realm . RealmObject ' ) <nl> def modelClasses = classNames <nl> diff - - git a / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java b / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java <nl> index 8cf5a09 . . 5bc28ca 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java <nl> @ @ - 82 , 4 + 82 , 9 @ @ public class MediatorTest extends AndroidTestCase { <nl> assertFalse ( mediator . getModelClasses ( ) . contains ( Dog . class ) ) ; <nl> assertFalse ( mediator . getModelClasses ( ) . contains ( AllTypes . class ) ) ; <nl> } <nl> + <nl> + public void testDefaultMediatorWasTransformed ( ) { <nl> + final DefaultRealmModuleMediator defaultMediator = new DefaultRealmModuleMediator ( ) ; <nl> + assertTrue ( defaultMediator . transformerApplied ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> index 38f4672 . . 03e237a 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java <nl> @ @ - 65 , 7 + 65 , 13 @ @ public class RealmConfiguration { <nl> static { <nl> DEFAULT _ MODULE = Realm . getDefaultModule ( ) ; <nl> if ( DEFAULT _ MODULE ! = null ) { <nl> - DEFAULT _ MODULE _ MEDIATOR = getModuleMediator ( DEFAULT _ MODULE . getClass ( ) . getCanonicalName ( ) ) ; <nl> + final RealmProxyMediator mediator = getModuleMediator ( DEFAULT _ MODULE . getClass ( ) . getCanonicalName ( ) ) ; <nl> + if ( ! mediator . transformerApplied ( ) ) { <nl> + throw new ExceptionInInitializerError ( " RealmTransformer doesn ' t seem to be applied . " + <nl> + " Please update the project configuration to use the Realm Gradle plugin . " + <nl> + " See https : / / realm . io / news / android - installation - change / " ) ; <nl> + } <nl> + DEFAULT _ MODULE _ MEDIATOR = mediator ; <nl> } else { <nl> DEFAULT _ MODULE _ MEDIATOR = null ; <nl> } <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java b / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java <nl> index 893ceef . . 636d45e 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java <nl> @ @ - 138 , 6 + 138 , 17 @ @ public abstract class RealmProxyMediator { <nl> * / <nl> public abstract < E extends RealmObject > E createDetachedCopy ( E realmObject , int maxDepth , Map < RealmObject , RealmObjectProxy . CacheData < RealmObject > > cache ) ; <nl> <nl> + / * * <nl> + * Returns whether Realm transformer has been applied or not . Subclasses of this class are <nl> + * created by the annotation processor and the Realm transformer will add an override of <nl> + * this method that always return { @ code true } if the transform was successful . <nl> + * <nl> + * @ return { @ code true } if Realm transformer was applied , { @ code false } otherwise . <nl> + * / <nl> + public boolean transformerApplied ( ) { <nl> + return false ; <nl> + } <nl> + <nl> @ Override <nl> public boolean equals ( Object o ) { <nl> if ( ! ( o instanceof RealmProxyMediator ) ) { <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java b / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java <nl> index c5e7284 . . 1c66547 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java <nl> @ @ - 115 , 6 + 115 , 16 @ @ public class CompositeMediator extends RealmProxyMediator { <nl> return mediator . createDetachedCopy ( realmObject , maxDepth , cache ) ; <nl> } <nl> <nl> + @ Override <nl> + public boolean transformerApplied ( ) { <nl> + for ( Map . Entry < Class < ? extends RealmObject > , RealmProxyMediator > entry : mediators . entrySet ( ) ) { <nl> + if ( ! entry . getValue ( ) . transformerApplied ( ) ) { <nl> + return false ; <nl> + } <nl> + } <nl> + return true ; <nl> + } <nl> + <nl> / / Returns the mediator for a given model class ( not RealmProxy ) or throws exception <nl> private RealmProxyMediator getMediator ( Class < ? extends RealmObject > clazz ) { <nl> RealmProxyMediator mediator = mediators . get ( clazz ) ; <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java b / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java <nl> index 369b1c3 . . c200323 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java <nl> @ @ - 131 , 6 + 131 , 15 @ @ public class FilterableMediator extends RealmProxyMediator { <nl> return originalMediator . createDetachedCopy ( realmObject , maxDepth , cache ) ; <nl> } <nl> <nl> + @ Override <nl> + public boolean transformerApplied ( ) { <nl> + / / noinspection SimplifiableIfStatement <nl> + if ( originalMediator = = null ) { <nl> + return true ; <nl> + } <nl> + return originalMediator . transformerApplied ( ) ; <nl> + } <nl> + <nl> / / Validate if a model class ( not RealmProxy ) is part of this Schema . <nl> private void checkSchemaHasClass ( Class < ? extends RealmObject > clazz ) { <nl> if ( ! allowedClasses . contains ( clazz ) ) {

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / BaseRealm . java b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 index cc1d89d . . 345c8a6 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / BaseRealm . java 
 @ @ - 518 , 14 + 518 , 14 @ @ abstract class BaseRealm implements Closeable { 
 / / Used by RealmList / RealmResults 
 / / Invariant : if dynamicClassName ! = null - > clazz = = DynamicRealmObject 
 < E extends RealmModel > E get ( Class < E > clazz , String dynamicClassName , long rowIndex ) { 
 - final Table table = ( dynamicClassName ! = null ) ? schema . getTable ( dynamicClassName ) : schema . getTable ( clazz ) ; 
 + final boolean isDynamicRealmObject = dynamicClassName ! = null ; 
 + final Table table = isDynamicRealmObject ? schema . getTable ( dynamicClassName ) : schema . getTable ( clazz ) ; 
 
 E result ; 
 - if ( dynamicClassName ! = null ) { 
 + if ( isDynamicRealmObject ) { 
 @ SuppressWarnings ( " unchecked " ) 
 E dynamicObj = ( E ) new DynamicRealmObject ( this , 
 - ( rowIndex ! = Table . NO _ MATCH ) ? table . getUncheckedRow ( rowIndex ) : InvalidRow . INSTANCE , 
 - false ) ; 
 + ( rowIndex ! = Table . NO _ MATCH ) ? table . getCheckedRow ( rowIndex ) : InvalidRow . INSTANCE ) ; 
 result = dynamicObj ; 
 } else { 
 result = configuration . getSchemaMediator ( ) . newInstance ( clazz , this , 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 index 4af7ad5 . . 9b529e0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealm . java 
 @ @ - 95 , 12 + 95 , 12 @ @ public final class DynamicRealm extends BaseRealm { 
 * @ throws RealmException if object could not be created due to the primary key being invalid . 
 * @ throws IllegalStateException if the model clazz does not have an primary key defined . 
 * @ throws IllegalArgumentException if the { @ code primaryKeyValue } doesn ' t have a value that can be converted to the 
 - * expectd value . 
 + * expected value . 
 * / 
 public DynamicRealmObject createObject ( String className , Object primaryKeyValue ) { 
 Table table = schema . getTable ( className ) ; 
 long index = table . addEmptyRowWithPrimaryKey ( primaryKeyValue ) ; 
 - return new DynamicRealmObject ( this , table . getCheckedRow ( index ) , false ) ; 
 + return new DynamicRealmObject ( this , table . getCheckedRow ( index ) ) ; 
 } 
 
 / * * 
 diff - - git a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 index 88ec5cd . . f48a0a0 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 + + + b / realm / realm - library / src / main / java / io / realm / DynamicRealmObject . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import io . realm . internal . android . JsonUtils ; 
 * Class that wraps a normal RealmObject in order to allow dynamic access instead of a typed interface . 
 * Using a DynamicRealmObject is slower than using the regular RealmObject class . 
 * / 
 + @ SuppressWarnings ( " WeakerAccess " ) 
 public final class DynamicRealmObject extends RealmObject implements RealmObjectProxy { 
 
 private final ProxyState proxyState = new ProxyState ( this ) ; 
 @ @ - 67 , 24 + 68 , 18 @ @ public final class DynamicRealmObject extends RealmObject implements RealmObject 
 proxyState . setConstructionFinished ( ) ; 
 } 
 
 - DynamicRealmObject ( BaseRealm realm , Row row , boolean convertTocheckedRow ) { 
 + / / row must not be an instance of UncheckedRow 
 + DynamicRealmObject ( BaseRealm realm , Row row ) { 
 proxyState . setRealm $ realm ( realm ) ; 
 - if ( convertTocheckedRow ) { 
 - proxyState . setRow $ realm ( ( row instanceof CheckedRow ) ? ( CheckedRow ) row : ( ( UncheckedRow ) row ) . convertToChecked ( ) ) ; 
 - } else { 
 - proxyState . setRow $ realm ( row ) ; 
 - } 
 + proxyState . setRow $ realm ( row ) ; 
 proxyState . setConstructionFinished ( ) ; 
 } 
 
 - DynamicRealmObject ( String className , BaseRealm realm , Row row , boolean convertTocheckedRow ) { 
 + / / row must not be an instance of UncheckedRow 
 + DynamicRealmObject ( String className , BaseRealm realm , Row row ) { 
 proxyState . setClassName ( className ) ; 
 proxyState . setRealm $ realm ( realm ) ; 
 - if ( convertTocheckedRow ) { 
 - proxyState . setRow $ realm ( ( row instanceof CheckedRow ) ? ( CheckedRow ) row : ( ( UncheckedRow ) row ) . convertToChecked ( ) ) ; 
 - } else { 
 - proxyState . setRow $ realm ( row ) ; 
 - } 
 + proxyState . setRow $ realm ( row ) ; 
 proxyState . setConstructionFinished ( ) ; 
 } 
 
 @ @ - 287 , 7 + 282 , 7 @ @ public final class DynamicRealmObject extends RealmObject implements RealmObject 
 } else { 
 long linkRowIndex = proxyState . getRow $ realm ( ) . getLink ( columnIndex ) ; 
 CheckedRow linkRow = proxyState . getRow $ realm ( ) . getTable ( ) . getLinkTarget ( columnIndex ) . getCheckedRow ( linkRowIndex ) ; 
 - return new DynamicRealmObject ( proxyState . getRealm $ realm ( ) , linkRow , false ) ; 
 + return new DynamicRealmObject ( proxyState . getRealm $ realm ( ) , linkRow ) ; 
 } 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java 
 index 9e92389 . . febc7e8 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmObjectSchema . java 
 @ @ - 570 , 7 + 570 , 7 @ @ public final class RealmObjectSchema { 
 if ( function ! = null ) { 
 long size = table . size ( ) ; 
 for ( long i = 0 ; i < size ; i + + ) { 
 - function . apply ( new DynamicRealmObject ( realm , table . getCheckedRow ( i ) , false ) ) ; 
 + function . apply ( new DynamicRealmObject ( realm , table . getCheckedRow ( i ) ) ) ; 
 } 
 } 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index d50cad7 . . 566a050 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 2102 , 7 + 2102 , 7 @ @ public final class RealmQuery < E extends RealmModel > { 
 final E result ; 
 if ( isDynamicQuery ( ) ) { 
 / / noinspection unchecked 
 - result = ( E ) new DynamicRealmObject ( className , realm , Row . EMPTY _ ROW , false ) ; 
 + result = ( E ) new DynamicRealmObject ( className , realm , Row . EMPTY _ ROW ) ; 
 } else { 
 result = realm . getConfiguration ( ) . getSchemaMediator ( ) . newInstance ( 
 clazz , realm , Row . EMPTY _ ROW , realm . getSchema ( ) . getColumnInfo ( clazz ) ,

NEAREST DIFF:
diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 index db7909a . . 5953849 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / BytecodeModifier . groovy 
 @ @ - 117 , 4 + 117 , 19 @ @ class BytecodeModifier { 
 } 
 } 
 } 
 + 
 + / * * 
 + * Adds a method to indicate that Realm transformer has been applied . 
 + * 
 + * @ param clazz The CtClass to modify . 
 + * / 
 + public static void overrideTransformedMarker ( CtClass clazz ) { 
 + logger . info " Realm : Marking as transformed $ { clazz . simpleName } " 
 + try { 
 + clazz . getDeclaredMethod ( " transformerApplied " , new CtClass [ 0 ] ) 
 + } catch ( NotFoundException ignored ) { 
 + clazz . addMethod ( CtNewMethod . make ( Modifier . PUBLIC , CtClass . booleanType , " transformerApplied " , 
 + new CtClass [ 0 ] , new CtClass [ 0 ] , " { return true ; } " , clazz ) ) 
 + } 
 + } 
 } 
 diff - - git a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 index 2ba0216 . . 804523a 100644 
 - - - a / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 + + + b / realm - transformer / src / main / groovy / io / realm / transformer / RealmTransformer . groovy 
 @ @ - 28 , 6 + 28 , 7 @ @ import org . slf4j . LoggerFactory 
 
 import java . lang . reflect . Modifier 
 import java . util . jar . JarFile 
 + import java . util . regex . Pattern 
 
 import static com . android . build . api . transform . QualifiedContent . * 
 / * * 
 @ @ - 78 , 6 + 79 , 18 @ @ class RealmTransformer extends Transform { 
 
 logger . info " ClassPool contains Realm classes : $ { classPool . getOrNull ( ' io . realm . RealmList ' ) ! = null } " 
 
 + / / mark as transformed 
 + def baseProxyMediator = classPool . get ( ' io . realm . internal . RealmProxyMediator ' ) 
 + def mediatorPattern = Pattern . compile ( ' ^ io \ \ . realm \ \ . [ ^ . ] + Mediator $ ' ) 
 + def proxyMediatorClasses = classNames 
 + . findAll { it . matches ( mediatorPattern ) } 
 + . collect { classPool . getCtClass ( it ) } 
 + . findAll { it . superclass ? . equals ( baseProxyMediator ) } 
 + logger . info " Proxy Mediator Classes : $ { proxyMediatorClasses * . name } " 
 + proxyMediatorClasses . each { 
 + BytecodeModifier . overrideTransformedMarker ( it ) ; 
 + } 
 + 
 / / Find the model classes 
 def realmObject = classPool . get ( ' io . realm . RealmObject ' ) 
 def modelClasses = classNames 
 diff - - git a / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java b / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java 
 index 8cf5a09 . . 5bc28ca 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / MediatorTest . java 
 @ @ - 82 , 4 + 82 , 9 @ @ public class MediatorTest extends AndroidTestCase { 
 assertFalse ( mediator . getModelClasses ( ) . contains ( Dog . class ) ) ; 
 assertFalse ( mediator . getModelClasses ( ) . contains ( AllTypes . class ) ) ; 
 } 
 + 
 + public void testDefaultMediatorWasTransformed ( ) { 
 + final DefaultRealmModuleMediator defaultMediator = new DefaultRealmModuleMediator ( ) ; 
 + assertTrue ( defaultMediator . transformerApplied ( ) ) ; 
 + } 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 index 38f4672 . . 03e237a 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmConfiguration . java 
 @ @ - 65 , 7 + 65 , 13 @ @ public class RealmConfiguration { 
 static { 
 DEFAULT _ MODULE = Realm . getDefaultModule ( ) ; 
 if ( DEFAULT _ MODULE ! = null ) { 
 - DEFAULT _ MODULE _ MEDIATOR = getModuleMediator ( DEFAULT _ MODULE . getClass ( ) . getCanonicalName ( ) ) ; 
 + final RealmProxyMediator mediator = getModuleMediator ( DEFAULT _ MODULE . getClass ( ) . getCanonicalName ( ) ) ; 
 + if ( ! mediator . transformerApplied ( ) ) { 
 + throw new ExceptionInInitializerError ( " RealmTransformer doesn ' t seem to be applied . " + 
 + " Please update the project configuration to use the Realm Gradle plugin . " + 
 + " See https : / / realm . io / news / android - installation - change / " ) ; 
 + } 
 + DEFAULT _ MODULE _ MEDIATOR = mediator ; 
 } else { 
 DEFAULT _ MODULE _ MEDIATOR = null ; 
 } 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java b / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java 
 index 893ceef . . 636d45e 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / RealmProxyMediator . java 
 @ @ - 138 , 6 + 138 , 17 @ @ public abstract class RealmProxyMediator { 
 * / 
 public abstract < E extends RealmObject > E createDetachedCopy ( E realmObject , int maxDepth , Map < RealmObject , RealmObjectProxy . CacheData < RealmObject > > cache ) ; 
 
 + / * * 
 + * Returns whether Realm transformer has been applied or not . Subclasses of this class are 
 + * created by the annotation processor and the Realm transformer will add an override of 
 + * this method that always return { @ code true } if the transform was successful . 
 + * 
 + * @ return { @ code true } if Realm transformer was applied , { @ code false } otherwise . 
 + * / 
 + public boolean transformerApplied ( ) { 
 + return false ; 
 + } 
 + 
 @ Override 
 public boolean equals ( Object o ) { 
 if ( ! ( o instanceof RealmProxyMediator ) ) { 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java b / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java 
 index c5e7284 . . 1c66547 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / modules / CompositeMediator . java 
 @ @ - 115 , 6 + 115 , 16 @ @ public class CompositeMediator extends RealmProxyMediator { 
 return mediator . createDetachedCopy ( realmObject , maxDepth , cache ) ; 
 } 
 
 + @ Override 
 + public boolean transformerApplied ( ) { 
 + for ( Map . Entry < Class < ? extends RealmObject > , RealmProxyMediator > entry : mediators . entrySet ( ) ) { 
 + if ( ! entry . getValue ( ) . transformerApplied ( ) ) { 
 + return false ; 
 + } 
 + } 
 + return true ; 
 + } 
 + 
 / / Returns the mediator for a given model class ( not RealmProxy ) or throws exception 
 private RealmProxyMediator getMediator ( Class < ? extends RealmObject > clazz ) { 
 RealmProxyMediator mediator = mediators . get ( clazz ) ; 
 diff - - git a / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java b / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java 
 index 369b1c3 . . c200323 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java 
 + + + b / realm / realm - library / src / main / java / io / realm / internal / modules / FilterableMediator . java 
 @ @ - 131 , 6 + 131 , 15 @ @ public class FilterableMediator extends RealmProxyMediator { 
 return originalMediator . createDetachedCopy ( realmObject , maxDepth , cache ) ; 
 } 
 
 + @ Override 
 + public boolean transformerApplied ( ) { 
 + / / noinspection SimplifiableIfStatement 
 + if ( originalMediator = = null ) { 
 + return true ; 
 + } 
 + return originalMediator . transformerApplied ( ) ; 
 + } 
 + 
 / / Validate if a model class ( not RealmProxy ) is part of this Schema . 
 private void checkSchemaHasClass ( Class < ? extends RealmObject > clazz ) { 
 if ( ! allowedClasses . contains ( clazz ) ) {
