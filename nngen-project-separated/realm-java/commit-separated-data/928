BLEU SCORE: 0.04372912656590315

TEST MSG: Remove deprecated methods from RealmQuery
GENERATED MSG: Simply min , max and sum

TEST DIFF (one line): diff - - git a / changelog . txt b / changelog . txt <nl> index b454278 . . da149bc 100644 <nl> - - - a / changelog . txt <nl> + + + b / changelog . txt <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> * BREAKING CHANGE : RealmResults . SORT _ ORDER _ ASCENDING and RealmResults . SORT _ ORDER _ DESCENDING constants have been replaced by Sort . ASCENDING and Sort . DESCENDING enums . <nl> * BREAKING CHANGE : RealmQuery . CASE _ SENSITIVE and RealmQuery . CASE _ INSENSITIVE constants have been replaced by Case . SENSITIVE and Case . INSENSITIVE enums . <nl> * BREAKING CHANGE : Realm . addChangeListener , RealmObject . addChangeListener and RealmResults . addChangeListener hold a strong reference to the listener , you should unregister the listener to avoid memory leaks . <nl> + * BREAKING CHANGE : Removed deprecated methods RealmQuery . minimum { Int , Float , Double } , RealmQuery . maximum { Int , Float , Double } , RealmQuery . sum { Int , Float , Double } and RealmQuery . average { Int , Float , Double } . Use RealmQuery . min ( ) , RealmQuery . max ( ) , RealmQuery . sum ( ) and RealmQuery . average ( ) instead . <nl> * Added new Dynamic API using DynamicRealm and DynamicRealmObject . <nl> * Added Realm . getSchema ( ) and DynamicRealm . getSchema ( ) . <nl> <nl> diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> index 0fb5630 . . 7a956bd 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java <nl> @ @ - 1107 , 45 + 1107 , 6 @ @ public class RealmQuery < E extends RealmObject > { <nl> } <nl> } <nl> <nl> - / * * <nl> - * Calculates the sum of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> - * @ return the sum . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ deprecated please use { @ link # sum ( String ) } instead . <nl> - * / <nl> - public long sumInt ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . sumInt ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Calculates the sum of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> - * @ return the sum . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ deprecated please use { @ link # sum ( String ) } instead . <nl> - * / <nl> - public double sumDouble ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . sumDouble ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Calculates the sum of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> - * @ return the sum . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ deprecated please use { @ link # sum ( String ) } instead . <nl> - * / <nl> - public double sumFloat ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . sumFloat ( columnIndex ) ; <nl> - } <nl> - <nl> / / Average <nl> <nl> / * * <nl> @ @ - 1171 , 45 + 1132 , 6 @ @ public class RealmQuery < E extends RealmObject > { <nl> } <nl> } <nl> <nl> - / * * <nl> - * Calculates the average of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> - * @ return the average . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ deprecated please use { @ link # average ( String ) } instead . <nl> - * / <nl> - public double averageInt ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . averageInt ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Calculate the average of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> - * @ return the average . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ deprecated please use { @ link # average ( String ) } instead . <nl> - * / <nl> - public double averageDouble ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . averageDouble ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Calculates the average of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> - * @ return the average . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ deprecated please use { @ link # average ( String ) } instead . <nl> - * / <nl> - public double averageFloat ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . averageFloat ( columnIndex ) ; <nl> - } <nl> - <nl> / / Min <nl> <nl> / * * <nl> @ @ - 1239 , 51 + 1161 , 6 @ @ public class RealmQuery < E extends RealmObject > { <nl> / * * <nl> * Finds the minimum value of a field . <nl> * <nl> - * @ param fieldName the field name . <nl> - * @ return the minimum value . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the <nl> - * given field . <nl> - * @ deprecated please use { @ link # min ( String ) } instead . <nl> - * / <nl> - public long minimumInt ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . minimumInt ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Finds the minimum value of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> - * @ return the minimum value . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the <nl> - * given field . <nl> - * @ deprecated please use { @ link # min ( String ) } instead . <nl> - * / <nl> - public double minimumDouble ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . minimumDouble ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Finds the minimum value of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> - * @ return the minimum value . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the <nl> - * given field . <nl> - * @ deprecated please use { @ link # min ( String ) } instead . <nl> - * / <nl> - public float minimumFloat ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . minimumFloat ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Finds the minimum value of a field . <nl> - * <nl> * @ param fieldName the field name <nl> * @ return if no objects exist or they all have { @ code null } as the value for the given date field , { @ code null } <nl> * will be returned . Otherwise the minimum date is returned . When determining the minimum date , objects with <nl> @ @ - 1325 , 51 + 1202 , 6 @ @ public class RealmQuery < E extends RealmObject > { <nl> * Finds the maximum value of a field . <nl> * <nl> * @ param fieldName the field name . <nl> - * @ return the maximum value . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the <nl> - * given field . <nl> - * @ deprecated please use { @ link # max ( String ) } instead . <nl> - * / <nl> - public long maximumInt ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . maximumInt ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Find the maximum value of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> - * @ return the maximum value . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the <nl> - * given field . <nl> - * @ deprecated please use { @ link # max ( String ) } instead . <nl> - * / <nl> - public double maximumDouble ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . maximumDouble ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Finds the maximum value of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> - * @ return the maximum value . <nl> - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . <nl> - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the <nl> - * given field . <nl> - * @ deprecated please use { @ link # max ( String ) } instead . <nl> - * / <nl> - public float maximumFloat ( String fieldName ) { <nl> - long columnIndex = schema . getFieldIndex ( fieldName ) ; <nl> - return this . query . maximumFloat ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Finds the maximum value of a field . <nl> - * <nl> - * @ param fieldName the field name . <nl> * @ return if no objects exist or they all have { @ code null } as the value for the given date field , { @ code null } <nl> * will be returned . Otherwise the maximum date is returned . When determining the maximum date , objects with <nl> * { @ code null } values are ignored .
NEAREST DIFF (one line): diff - - git a / realm / src / main / java / io / realm / RealmTableOrViewList . java b / realm / src / main / java / io / realm / RealmTableOrViewList . java <nl> index 143b4e2 . . f704119 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmTableOrViewList . java <nl> + + + b / realm / src / main / java / io / realm / RealmTableOrViewList . java <nl> @ @ - 18 , 12 + 18 , 12 @ @ package io . realm ; <nl> <nl> <nl> import java . util . AbstractList ; <nl> - import java . util . Date ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> import io . realm . internal . TableOrView ; <nl> import io . realm . internal . TableView ; <nl> + import sun . reflect . generics . reflectiveObjects . NotImplementedException ; <nl> <nl> / * * <nl> * <nl> @ @ - 102 , 178 + 102 , 77 @ @ public class RealmTableOrViewList < E extends RealmObject > extends AbstractList < E > <nl> return get ( size ( ) - 1 ) ; <nl> } <nl> <nl> - / / Aggregates <nl> <nl> + / / Aggregates <nl> <nl> @ Override <nl> public int size ( ) { <nl> return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; <nl> } <nl> <nl> - <nl> - / * * <nl> - * Find the minimum value . <nl> - * <nl> - * @ param attrName The property to look for a minimum on . Only double is supported . <nl> - * @ return The returned value is the minimum value . <nl> - * / <nl> - public double minimumDouble ( String attrName ) { <nl> - long columnIndex ; <nl> - <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . minimumDouble ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Find the minimum value . <nl> - * <nl> - * @ param attrName The property to look for a minimum on . Only float is supported . <nl> - * @ return The returned value is the minimum value . <nl> - * / <nl> - public float minimumFloat ( String attrName ) { <nl> - long columnIndex ; <nl> - <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . minimumFloat ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Find the minimum value . <nl> - * <nl> - * @ param attrName The property to look for a minimum on . Only int is supported . <nl> - * @ return The returned value is the minimum value . <nl> - * / <nl> - public long minimumLong ( String attrName ) { <nl> - long columnIndex ; <nl> - <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . minimumLong ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Find the minimum value . <nl> - * <nl> - * @ param attrName The property to look for a minimum on . Only date is supported . <nl> - * @ return The returned value is the minimum value . <nl> - * / <nl> - public Date minimumDate ( String attrName ) { <nl> - long columnIndex ; <nl> - <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . minimumDate ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Find the maximum value . <nl> - * <nl> - * @ param attrName The property to look for a maximum on . Only double is supported . <nl> - * @ return The returned value is the maximum value . <nl> - * / <nl> - public double maximumDouble ( String attrName ) { <nl> - long columnIndex ; <nl> - <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . maximumDouble ( columnIndex ) ; <nl> - } <nl> - <nl> / * * <nl> - * Find the maximum value . <nl> + * Find the minimum value of a property . <nl> * <nl> - * @ param attrName The property to look for a maximum on . Only float is supported . <nl> - * @ return The returned value is the maximum value . <nl> + * @ param propName The property to look for a minimum on . Only int , float , double , <nl> + * and date are supported . <nl> + * @ return An object ; the first occurrence with the minimum value . <nl> * / <nl> - public float maximumFloat ( String attrName ) { <nl> - long columnIndex ; <nl> - <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . maximumFloat ( columnIndex ) ; <nl> + public E min ( String propName ) { <nl> + throw new NotImplementedException ( ) ; <nl> } <nl> <nl> - / * * <nl> - * Find the maximum value . <nl> - * <nl> - * @ param attrName The property to look for a maximum on . Only int is supported . <nl> - * @ return The returned value is the maximum value . <nl> - * / <nl> - public long maximumLong ( String attrName ) { <nl> - long columnIndex ; <nl> - <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . maximumLong ( columnIndex ) ; <nl> - } <nl> <nl> / * * <nl> - * Find the maximum value . <nl> + * Find the maximum value of a property . <nl> * <nl> - * @ param attrName The property to look for a minimum on . Only date is supported . <nl> - * @ return The returned value is the maximum value . <nl> + * @ param propName The property to look for a maximum on . Only int , float , double , <nl> + * and date are supported . <nl> + * @ return An object ; the first occurrence with the maximum value . <nl> * / <nl> - public Date maximumDate ( String attrName ) { <nl> - long columnIndex ; <nl> - <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . maximumDate ( columnIndex ) ; <nl> + public E max ( String propName ) { <nl> + throw new NotImplementedException ( ) ; <nl> } <nl> <nl> <nl> / * * <nl> - * Calculate the sum . <nl> + * Calculate the sum of a property . <nl> * <nl> - * @ param attrName The property to sum . Only double is supported . <nl> - * @ return The returned value is the sum . <nl> + * @ param propName The property to sum . Only int , float , and double are supported . <nl> + * @ return The sum . <nl> * / <nl> - public double sumDouble ( String attrName ) { <nl> - long columnIndex ; <nl> <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . sumDouble ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Calculate the sum . <nl> - * <nl> - * @ param attrName The property to sum . Only float is supported . <nl> - * @ return The returned value is the sum . <nl> - * / <nl> - public double sumFloat ( String attrName ) { <nl> - long columnIndex ; <nl> - <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . sumFloat ( columnIndex ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Calculate the sum . <nl> - * <nl> - * @ param attrName The property to sum . Only int is supported . <nl> - * @ return The returned value is the sum . <nl> - * / <nl> - public long sumLong ( String attrName ) { <nl> - long columnIndex ; <nl> - <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - return this . table . sumLong ( columnIndex ) ; <nl> + public Number sum ( String propName ) { <nl> + long columnIndex = table . getColumnIndex ( propName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> + case INTEGER : <nl> + return Number ( table . sumLong ( columnIndex ) ) ; <nl> + case FLOAT : <nl> + return Number ( table . sumFloat ( columnIndex ) ) ; <nl> + case DOUBLE : <nl> + return Number ( table . sumDouble ( columnIndex ) ) ; <nl> + default : <nl> + throw new RuntimeException ( " Wrong type " ) ; <nl> + } <nl> } <nl> <nl> <nl> / * * <nl> * Returns the average of a given property for objects in a RealmList . <nl> * <nl> - * @ param attrName The property to calculate average on . Only properties of type int , <nl> + * @ param propName The property to calculate average on . Only properties of type int , <nl> * float and double are supported . <nl> * @ return The average for the given property amongst objects in an RealmList . This <nl> * will be of type double for both float and double properties . <nl> * / <nl> - public double average ( String attrName ) { <nl> - long columnIndex ; <nl> - columnIndex = this . table . getColumnIndex ( attrName ) ; <nl> - switch ( this . table . getColumnType ( columnIndex ) ) { <nl> + public double average ( String propName ) { <nl> + long columnIndex = table . getColumnIndex ( propName ) ; <nl> + switch ( table . getColumnType ( columnIndex ) ) { <nl> case INTEGER : <nl> - return this . table . averageLong ( columnIndex ) ; <nl> + return table . averageLong ( columnIndex ) ; <nl> case DOUBLE : <nl> - return this . table . averageDouble ( columnIndex ) ; <nl> + return table . averageDouble ( columnIndex ) ; <nl> case FLOAT : <nl> - return this . table . averageFloat ( columnIndex ) ; <nl> + return table . averageFloat ( columnIndex ) ; <nl> default : <nl> throw new RuntimeException ( " Wrong type " ) ; <nl> }

TEST DIFF:
diff - - git a / changelog . txt b / changelog . txt 
 index b454278 . . da149bc 100644 
 - - - a / changelog . txt 
 + + + b / changelog . txt 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 * BREAKING CHANGE : RealmResults . SORT _ ORDER _ ASCENDING and RealmResults . SORT _ ORDER _ DESCENDING constants have been replaced by Sort . ASCENDING and Sort . DESCENDING enums . 
 * BREAKING CHANGE : RealmQuery . CASE _ SENSITIVE and RealmQuery . CASE _ INSENSITIVE constants have been replaced by Case . SENSITIVE and Case . INSENSITIVE enums . 
 * BREAKING CHANGE : Realm . addChangeListener , RealmObject . addChangeListener and RealmResults . addChangeListener hold a strong reference to the listener , you should unregister the listener to avoid memory leaks . 
 + * BREAKING CHANGE : Removed deprecated methods RealmQuery . minimum { Int , Float , Double } , RealmQuery . maximum { Int , Float , Double } , RealmQuery . sum { Int , Float , Double } and RealmQuery . average { Int , Float , Double } . Use RealmQuery . min ( ) , RealmQuery . max ( ) , RealmQuery . sum ( ) and RealmQuery . average ( ) instead . 
 * Added new Dynamic API using DynamicRealm and DynamicRealmObject . 
 * Added Realm . getSchema ( ) and DynamicRealm . getSchema ( ) . 
 
 diff - - git a / realm / realm - library / src / main / java / io / realm / RealmQuery . java b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 index 0fb5630 . . 7a956bd 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 + + + b / realm / realm - library / src / main / java / io / realm / RealmQuery . java 
 @ @ - 1107 , 45 + 1107 , 6 @ @ public class RealmQuery < E extends RealmObject > { 
 } 
 } 
 
 - / * * 
 - * Calculates the sum of a field . 
 - * 
 - * @ param fieldName the field name . 
 - * @ return the sum . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ deprecated please use { @ link # sum ( String ) } instead . 
 - * / 
 - public long sumInt ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . sumInt ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Calculates the sum of a field . 
 - * 
 - * @ param fieldName the field name . 
 - * @ return the sum . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ deprecated please use { @ link # sum ( String ) } instead . 
 - * / 
 - public double sumDouble ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . sumDouble ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Calculates the sum of a field . 
 - * 
 - * @ param fieldName the field name . 
 - * @ return the sum . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ deprecated please use { @ link # sum ( String ) } instead . 
 - * / 
 - public double sumFloat ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . sumFloat ( columnIndex ) ; 
 - } 
 - 
 / / Average 
 
 / * * 
 @ @ - 1171 , 45 + 1132 , 6 @ @ public class RealmQuery < E extends RealmObject > { 
 } 
 } 
 
 - / * * 
 - * Calculates the average of a field . 
 - * 
 - * @ param fieldName the field name . 
 - * @ return the average . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ deprecated please use { @ link # average ( String ) } instead . 
 - * / 
 - public double averageInt ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . averageInt ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Calculate the average of a field . 
 - * 
 - * @ param fieldName the field name . 
 - * @ return the average . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ deprecated please use { @ link # average ( String ) } instead . 
 - * / 
 - public double averageDouble ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . averageDouble ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Calculates the average of a field . 
 - * 
 - * @ param fieldName the field name . 
 - * @ return the average . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ deprecated please use { @ link # average ( String ) } instead . 
 - * / 
 - public double averageFloat ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . averageFloat ( columnIndex ) ; 
 - } 
 - 
 / / Min 
 
 / * * 
 @ @ - 1239 , 51 + 1161 , 6 @ @ public class RealmQuery < E extends RealmObject > { 
 / * * 
 * Finds the minimum value of a field . 
 * 
 - * @ param fieldName the field name . 
 - * @ return the minimum value . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the 
 - * given field . 
 - * @ deprecated please use { @ link # min ( String ) } instead . 
 - * / 
 - public long minimumInt ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . minimumInt ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Finds the minimum value of a field . 
 - * 
 - * @ param fieldName the field name . 
 - * @ return the minimum value . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the 
 - * given field . 
 - * @ deprecated please use { @ link # min ( String ) } instead . 
 - * / 
 - public double minimumDouble ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . minimumDouble ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Finds the minimum value of a field . 
 - * 
 - * @ param fieldName the field name . 
 - * @ return the minimum value . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the 
 - * given field . 
 - * @ deprecated please use { @ link # min ( String ) } instead . 
 - * / 
 - public float minimumFloat ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . minimumFloat ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Finds the minimum value of a field . 
 - * 
 * @ param fieldName the field name 
 * @ return if no objects exist or they all have { @ code null } as the value for the given date field , { @ code null } 
 * will be returned . Otherwise the minimum date is returned . When determining the minimum date , objects with 
 @ @ - 1325 , 51 + 1202 , 6 @ @ public class RealmQuery < E extends RealmObject > { 
 * Finds the maximum value of a field . 
 * 
 * @ param fieldName the field name . 
 - * @ return the maximum value . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the 
 - * given field . 
 - * @ deprecated please use { @ link # max ( String ) } instead . 
 - * / 
 - public long maximumInt ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . maximumInt ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Find the maximum value of a field . 
 - * 
 - * @ param fieldName the field name . 
 - * @ return the maximum value . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the 
 - * given field . 
 - * @ deprecated please use { @ link # max ( String ) } instead . 
 - * / 
 - public double maximumDouble ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . maximumDouble ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Finds the maximum value of a field . 
 - * 
 - * @ param fieldName the field name . 
 - * @ return the maximum value . 
 - * @ throws java . lang . UnsupportedOperationException if the query is not valid ( " syntax error " ) . 
 - * @ throws java . lang . NullPointerException if no objects exist or they all have { @ code null } as the value for the 
 - * given field . 
 - * @ deprecated please use { @ link # max ( String ) } instead . 
 - * / 
 - public float maximumFloat ( String fieldName ) { 
 - long columnIndex = schema . getFieldIndex ( fieldName ) ; 
 - return this . query . maximumFloat ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Finds the maximum value of a field . 
 - * 
 - * @ param fieldName the field name . 
 * @ return if no objects exist or they all have { @ code null } as the value for the given date field , { @ code null } 
 * will be returned . Otherwise the maximum date is returned . When determining the maximum date , objects with 
 * { @ code null } values are ignored .

NEAREST DIFF:
diff - - git a / realm / src / main / java / io / realm / RealmTableOrViewList . java b / realm / src / main / java / io / realm / RealmTableOrViewList . java 
 index 143b4e2 . . f704119 100644 
 - - - a / realm / src / main / java / io / realm / RealmTableOrViewList . java 
 + + + b / realm / src / main / java / io / realm / RealmTableOrViewList . java 
 @ @ - 18 , 12 + 18 , 12 @ @ package io . realm ; 
 
 
 import java . util . AbstractList ; 
 - import java . util . Date ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 import io . realm . internal . TableOrView ; 
 import io . realm . internal . TableView ; 
 + import sun . reflect . generics . reflectiveObjects . NotImplementedException ; 
 
 / * * 
 * 
 @ @ - 102 , 178 + 102 , 77 @ @ public class RealmTableOrViewList < E extends RealmObject > extends AbstractList < E > 
 return get ( size ( ) - 1 ) ; 
 } 
 
 - / / Aggregates 
 
 + / / Aggregates 
 
 @ Override 
 public int size ( ) { 
 return ( ( Long ) getTable ( ) . size ( ) ) . intValue ( ) ; 
 } 
 
 - 
 - / * * 
 - * Find the minimum value . 
 - * 
 - * @ param attrName The property to look for a minimum on . Only double is supported . 
 - * @ return The returned value is the minimum value . 
 - * / 
 - public double minimumDouble ( String attrName ) { 
 - long columnIndex ; 
 - 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . minimumDouble ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Find the minimum value . 
 - * 
 - * @ param attrName The property to look for a minimum on . Only float is supported . 
 - * @ return The returned value is the minimum value . 
 - * / 
 - public float minimumFloat ( String attrName ) { 
 - long columnIndex ; 
 - 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . minimumFloat ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Find the minimum value . 
 - * 
 - * @ param attrName The property to look for a minimum on . Only int is supported . 
 - * @ return The returned value is the minimum value . 
 - * / 
 - public long minimumLong ( String attrName ) { 
 - long columnIndex ; 
 - 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . minimumLong ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Find the minimum value . 
 - * 
 - * @ param attrName The property to look for a minimum on . Only date is supported . 
 - * @ return The returned value is the minimum value . 
 - * / 
 - public Date minimumDate ( String attrName ) { 
 - long columnIndex ; 
 - 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . minimumDate ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Find the maximum value . 
 - * 
 - * @ param attrName The property to look for a maximum on . Only double is supported . 
 - * @ return The returned value is the maximum value . 
 - * / 
 - public double maximumDouble ( String attrName ) { 
 - long columnIndex ; 
 - 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . maximumDouble ( columnIndex ) ; 
 - } 
 - 
 / * * 
 - * Find the maximum value . 
 + * Find the minimum value of a property . 
 * 
 - * @ param attrName The property to look for a maximum on . Only float is supported . 
 - * @ return The returned value is the maximum value . 
 + * @ param propName The property to look for a minimum on . Only int , float , double , 
 + * and date are supported . 
 + * @ return An object ; the first occurrence with the minimum value . 
 * / 
 - public float maximumFloat ( String attrName ) { 
 - long columnIndex ; 
 - 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . maximumFloat ( columnIndex ) ; 
 + public E min ( String propName ) { 
 + throw new NotImplementedException ( ) ; 
 } 
 
 - / * * 
 - * Find the maximum value . 
 - * 
 - * @ param attrName The property to look for a maximum on . Only int is supported . 
 - * @ return The returned value is the maximum value . 
 - * / 
 - public long maximumLong ( String attrName ) { 
 - long columnIndex ; 
 - 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . maximumLong ( columnIndex ) ; 
 - } 
 
 / * * 
 - * Find the maximum value . 
 + * Find the maximum value of a property . 
 * 
 - * @ param attrName The property to look for a minimum on . Only date is supported . 
 - * @ return The returned value is the maximum value . 
 + * @ param propName The property to look for a maximum on . Only int , float , double , 
 + * and date are supported . 
 + * @ return An object ; the first occurrence with the maximum value . 
 * / 
 - public Date maximumDate ( String attrName ) { 
 - long columnIndex ; 
 - 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . maximumDate ( columnIndex ) ; 
 + public E max ( String propName ) { 
 + throw new NotImplementedException ( ) ; 
 } 
 
 
 / * * 
 - * Calculate the sum . 
 + * Calculate the sum of a property . 
 * 
 - * @ param attrName The property to sum . Only double is supported . 
 - * @ return The returned value is the sum . 
 + * @ param propName The property to sum . Only int , float , and double are supported . 
 + * @ return The sum . 
 * / 
 - public double sumDouble ( String attrName ) { 
 - long columnIndex ; 
 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . sumDouble ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Calculate the sum . 
 - * 
 - * @ param attrName The property to sum . Only float is supported . 
 - * @ return The returned value is the sum . 
 - * / 
 - public double sumFloat ( String attrName ) { 
 - long columnIndex ; 
 - 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . sumFloat ( columnIndex ) ; 
 - } 
 - 
 - / * * 
 - * Calculate the sum . 
 - * 
 - * @ param attrName The property to sum . Only int is supported . 
 - * @ return The returned value is the sum . 
 - * / 
 - public long sumLong ( String attrName ) { 
 - long columnIndex ; 
 - 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - return this . table . sumLong ( columnIndex ) ; 
 + public Number sum ( String propName ) { 
 + long columnIndex = table . getColumnIndex ( propName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 + case INTEGER : 
 + return Number ( table . sumLong ( columnIndex ) ) ; 
 + case FLOAT : 
 + return Number ( table . sumFloat ( columnIndex ) ) ; 
 + case DOUBLE : 
 + return Number ( table . sumDouble ( columnIndex ) ) ; 
 + default : 
 + throw new RuntimeException ( " Wrong type " ) ; 
 + } 
 } 
 
 
 / * * 
 * Returns the average of a given property for objects in a RealmList . 
 * 
 - * @ param attrName The property to calculate average on . Only properties of type int , 
 + * @ param propName The property to calculate average on . Only properties of type int , 
 * float and double are supported . 
 * @ return The average for the given property amongst objects in an RealmList . This 
 * will be of type double for both float and double properties . 
 * / 
 - public double average ( String attrName ) { 
 - long columnIndex ; 
 - columnIndex = this . table . getColumnIndex ( attrName ) ; 
 - switch ( this . table . getColumnType ( columnIndex ) ) { 
 + public double average ( String propName ) { 
 + long columnIndex = table . getColumnIndex ( propName ) ; 
 + switch ( table . getColumnType ( columnIndex ) ) { 
 case INTEGER : 
 - return this . table . averageLong ( columnIndex ) ; 
 + return table . averageLong ( columnIndex ) ; 
 case DOUBLE : 
 - return this . table . averageDouble ( columnIndex ) ; 
 + return table . averageDouble ( columnIndex ) ; 
 case FLOAT : 
 - return this . table . averageFloat ( columnIndex ) ; 
 + return table . averageFloat ( columnIndex ) ; 
 default : 
 throw new RuntimeException ( " Wrong type " ) ; 
 }
