BLEU SCORE: 0.040583489434387374

TEST MSG: Validate how letters are sorted .
GENERATED MSG: Simply unit test

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> index 6e95a08 . . e20ec38 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import java . util . Date ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> + import io . realm . entities . StringOnly ; <nl> import io . realm . rule . RunInLooperThread ; <nl> import io . realm . rule . RunTestInLooperThread ; <nl> import io . realm . rule . TestRealmConfigurationFactory ; <nl> @ @ - 58 , 6 + 59 , 9 @ @ public class SortTest { <nl> private final static Sort [ ] ORDER _ ASC _ ASC = { Sort . ASCENDING , Sort . ASCENDING } ; <nl> private final static Sort [ ] ORDER _ ASC _ DES = { Sort . ASCENDING , Sort . DESCENDING } ; <nl> <nl> + private static String chars ; <nl> + private int numberOfPermutations ; <nl> + <nl> private void populateRealm ( Realm realm ) { <nl> realm . beginTransaction ( ) ; <nl> realm . delete ( AllTypes . class ) ; <nl> @ @ - 516 , 4 + 520 , 61 @ @ public class SortTest { <nl> allTypes . setColumnDate ( new Date ( TEST _ SIZE ) ) ; <nl> realm . commitTransaction ( ) ; <nl> } <nl> + <nl> + private void createAndTest ( String str ) { <nl> + realm . beginTransaction ( ) ; <nl> + realm . delete ( StringOnly . class ) ; <nl> + for ( int i = 0 ; i < str . length ( ) ; i + + ) { <nl> + StringOnly stringOnly = realm . createObject ( StringOnly . class ) ; <nl> + stringOnly . setChars ( str . substring ( i , i + 1 ) ) ; <nl> + } <nl> + realm . commitTransaction ( ) ; <nl> + RealmResults < StringOnly > stringOnlies = realm . where ( StringOnly . class ) . findAllSorted ( " chars " ) ; <nl> + for ( int i = 0 ; i < chars . length ( ) ; i + + ) { <nl> + assertEquals ( chars . substring ( i , i + 1 ) , stringOnlies . get ( i ) . getChars ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / / permute and swap : http : / / www . geeksforgeeks . org / write - a - c - program - to - print - all - permutations - of - a - given - string / <nl> + private void permute ( String str , int l , int r ) { <nl> + if ( l = = r ) { <nl> + numberOfPermutations + + ; <nl> + createAndTest ( str ) ; <nl> + } else { <nl> + for ( int i = l ; i < = r ; i + + ) { <nl> + str = swap ( str , l , i ) ; <nl> + permute ( str , l + 1 , r ) ; <nl> + str = swap ( str , l , i ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private String swap ( String a , int i , int j ) { <nl> + char temp ; <nl> + char [ ] charArray = a . toCharArray ( ) ; <nl> + temp = charArray [ i ] ; <nl> + charArray [ i ] = charArray [ j ] ; <nl> + charArray [ j ] = temp ; <nl> + return String . valueOf ( charArray ) ; <nl> + } <nl> + <nl> + private int factorial ( int n ) { <nl> + int fac = 1 ; <nl> + for ( int i = 1 ; i < = n ; i + + ) { <nl> + fac * = i ; <nl> + } <nl> + return fac ; <nl> + } <nl> + <nl> + @ Test <nl> + public void sortCaseSensitive ( ) { <nl> + chars = " ' - ! \ " # $ % & ( ) * , . / : ; ? _ + < = > 123aAbBcCxXyYzZ " ; <nl> + createAndTest ( new StringBuffer ( chars ) . reverse ( ) . toString ( ) ) ; <nl> + <nl> + / / try all permutations - keep the list short <nl> + chars = " 12aAbB " ; <nl> + numberOfPermutations = 0 ; <nl> + permute ( chars , 0 , chars . length ( ) - 1 ) ; <nl> + assertEquals ( numberOfPermutations , factorial ( chars . length ( ) ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmQueryTest . java b / realm / src / androidTest / java / io / realm / RealmQueryTest . java <nl> index 2e664ac . . 357de2c 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmQueryTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmQueryTest . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package io . realm ; <nl> import android . test . AndroidTestCase ; <nl> <nl> import java . util . Date ; <nl> + import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> import io . realm . entities . AllTypes ; <nl> import io . realm . entities . CatOwner ; <nl> @ @ - 479 , 7 + 480 , 13 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> } <nl> <nl> public void testLargeRealmMultipleThreads ( ) { <nl> - final int nObjects = 1000000 ; <nl> + final AtomicInteger finished ; <nl> + final int nObjects = 500000 ; <nl> + final int nThreads = 3 ; <nl> + <nl> + finished = new AtomicInteger ( ) ; <nl> + finished . set ( 0 ) ; <nl> + <nl> testRealm . beginTransaction ( ) ; <nl> testRealm . clear ( StringOnly . class ) ; <nl> for ( int i = 0 ; i < nObjects ; i + + ) { <nl> @ @ - 488 , 53 + 495 , 37 @ @ public class RealmQueryTest extends AndroidTestCase { <nl> } <nl> testRealm . commitTransaction ( ) ; <nl> <nl> - Runnable runnable1 = new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; <nl> - Realm realm = Realm . getInstance ( realmConfig ) ; <nl> - RealmResults < StringOnly > realmResults = realm . where ( StringOnly . class ) . beginsWith ( " chars " , " st " ) . findAll ( ) ; <nl> - int n = 0 ; <nl> - for ( StringOnly stringOnly : realmResults ) { <nl> - n = n + 1 ; <nl> - } <nl> - assertEquals ( nObjects , n ) ; <nl> - realm . close ( ) ; <nl> - } <nl> - } ; <nl> - Thread thread1 = new Thread ( runnable1 ) ; <nl> - <nl> - Runnable runnable2 = new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; <nl> - Realm realm = Realm . getInstance ( realmConfig ) ; <nl> - RealmResults < StringOnly > realmResults = realm . where ( StringOnly . class ) . endsWith ( " chars " , " 0 " ) . findAll ( ) ; <nl> - int n = 0 ; <nl> - for ( StringOnly stringOnly : realmResults ) { <nl> - n = n + 1 ; <nl> - } <nl> - assertEquals ( nObjects / 10 , n ) ; <nl> - realm . close ( ) ; <nl> - } <nl> - } ; <nl> - Thread thread2 = new Thread ( runnable2 ) ; <nl> - <nl> - thread1 . start ( ) ; <nl> - thread2 . start ( ) ; <nl> <nl> - RealmResults < StringOnly > realmResults = testRealm . allObjects ( StringOnly . class ) ; <nl> - int n = 0 ; <nl> - for ( StringOnly stringOnly : realmResults ) { <nl> - n = n + 1 ; <nl> + for ( int i = 0 ; i < nThreads ; i + + ) { <nl> + Thread thread = new Thread ( <nl> + new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( realmConfig ) ; <nl> + RealmResults < StringOnly > realmResults = realm . allObjects ( StringOnly . class ) ; <nl> + int n = 0 ; <nl> + for ( StringOnly stringOnly : realmResults ) { <nl> + n = n + 1 ; <nl> + } <nl> + assertEquals ( nObjects , n ) ; <nl> + realm . close ( ) ; <nl> + finished . incrementAndGet ( ) ; <nl> + } <nl> + } <nl> + ) ; <nl> + thread . start ( ) ; <nl> } <nl> - assertEquals ( nObjects , n ) ; <nl> <nl> - try { <nl> - Thread . sleep ( 10000 ) ; <nl> - } catch ( InterruptedException e ) { <nl> - e . printStackTrace ( ) ; <nl> + while ( true ) { <nl> + try { <nl> + Thread . sleep ( 1000 ) ; <nl> + } catch ( InterruptedException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + if ( finished . get ( ) = = nThreads ) { <nl> + break ; <nl> + } <nl> } <nl> - <nl> } <nl> }

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 index 6e95a08 . . e20ec38 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / SortTest . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import java . util . Date ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 import io . realm . entities . AllTypes ; 
 + import io . realm . entities . StringOnly ; 
 import io . realm . rule . RunInLooperThread ; 
 import io . realm . rule . RunTestInLooperThread ; 
 import io . realm . rule . TestRealmConfigurationFactory ; 
 @ @ - 58 , 6 + 59 , 9 @ @ public class SortTest { 
 private final static Sort [ ] ORDER _ ASC _ ASC = { Sort . ASCENDING , Sort . ASCENDING } ; 
 private final static Sort [ ] ORDER _ ASC _ DES = { Sort . ASCENDING , Sort . DESCENDING } ; 
 
 + private static String chars ; 
 + private int numberOfPermutations ; 
 + 
 private void populateRealm ( Realm realm ) { 
 realm . beginTransaction ( ) ; 
 realm . delete ( AllTypes . class ) ; 
 @ @ - 516 , 4 + 520 , 61 @ @ public class SortTest { 
 allTypes . setColumnDate ( new Date ( TEST _ SIZE ) ) ; 
 realm . commitTransaction ( ) ; 
 } 
 + 
 + private void createAndTest ( String str ) { 
 + realm . beginTransaction ( ) ; 
 + realm . delete ( StringOnly . class ) ; 
 + for ( int i = 0 ; i < str . length ( ) ; i + + ) { 
 + StringOnly stringOnly = realm . createObject ( StringOnly . class ) ; 
 + stringOnly . setChars ( str . substring ( i , i + 1 ) ) ; 
 + } 
 + realm . commitTransaction ( ) ; 
 + RealmResults < StringOnly > stringOnlies = realm . where ( StringOnly . class ) . findAllSorted ( " chars " ) ; 
 + for ( int i = 0 ; i < chars . length ( ) ; i + + ) { 
 + assertEquals ( chars . substring ( i , i + 1 ) , stringOnlies . get ( i ) . getChars ( ) ) ; 
 + } 
 + } 
 + 
 + / / permute and swap : http : / / www . geeksforgeeks . org / write - a - c - program - to - print - all - permutations - of - a - given - string / 
 + private void permute ( String str , int l , int r ) { 
 + if ( l = = r ) { 
 + numberOfPermutations + + ; 
 + createAndTest ( str ) ; 
 + } else { 
 + for ( int i = l ; i < = r ; i + + ) { 
 + str = swap ( str , l , i ) ; 
 + permute ( str , l + 1 , r ) ; 
 + str = swap ( str , l , i ) ; 
 + } 
 + } 
 + } 
 + 
 + private String swap ( String a , int i , int j ) { 
 + char temp ; 
 + char [ ] charArray = a . toCharArray ( ) ; 
 + temp = charArray [ i ] ; 
 + charArray [ i ] = charArray [ j ] ; 
 + charArray [ j ] = temp ; 
 + return String . valueOf ( charArray ) ; 
 + } 
 + 
 + private int factorial ( int n ) { 
 + int fac = 1 ; 
 + for ( int i = 1 ; i < = n ; i + + ) { 
 + fac * = i ; 
 + } 
 + return fac ; 
 + } 
 + 
 + @ Test 
 + public void sortCaseSensitive ( ) { 
 + chars = " ' - ! \ " # $ % & ( ) * , . / : ; ? _ + < = > 123aAbBcCxXyYzZ " ; 
 + createAndTest ( new StringBuffer ( chars ) . reverse ( ) . toString ( ) ) ; 
 + 
 + / / try all permutations - keep the list short 
 + chars = " 12aAbB " ; 
 + numberOfPermutations = 0 ; 
 + permute ( chars , 0 , chars . length ( ) - 1 ) ; 
 + assertEquals ( numberOfPermutations , factorial ( chars . length ( ) ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmQueryTest . java b / realm / src / androidTest / java / io / realm / RealmQueryTest . java 
 index 2e664ac . . 357de2c 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmQueryTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmQueryTest . java 
 @ @ - 3 , 6 + 3 , 7 @ @ package io . realm ; 
 import android . test . AndroidTestCase ; 
 
 import java . util . Date ; 
 + import java . util . concurrent . atomic . AtomicInteger ; 
 
 import io . realm . entities . AllTypes ; 
 import io . realm . entities . CatOwner ; 
 @ @ - 479 , 7 + 480 , 13 @ @ public class RealmQueryTest extends AndroidTestCase { 
 } 
 
 public void testLargeRealmMultipleThreads ( ) { 
 - final int nObjects = 1000000 ; 
 + final AtomicInteger finished ; 
 + final int nObjects = 500000 ; 
 + final int nThreads = 3 ; 
 + 
 + finished = new AtomicInteger ( ) ; 
 + finished . set ( 0 ) ; 
 + 
 testRealm . beginTransaction ( ) ; 
 testRealm . clear ( StringOnly . class ) ; 
 for ( int i = 0 ; i < nObjects ; i + + ) { 
 @ @ - 488 , 53 + 495 , 37 @ @ public class RealmQueryTest extends AndroidTestCase { 
 } 
 testRealm . commitTransaction ( ) ; 
 
 - Runnable runnable1 = new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; 
 - Realm realm = Realm . getInstance ( realmConfig ) ; 
 - RealmResults < StringOnly > realmResults = realm . where ( StringOnly . class ) . beginsWith ( " chars " , " st " ) . findAll ( ) ; 
 - int n = 0 ; 
 - for ( StringOnly stringOnly : realmResults ) { 
 - n = n + 1 ; 
 - } 
 - assertEquals ( nObjects , n ) ; 
 - realm . close ( ) ; 
 - } 
 - } ; 
 - Thread thread1 = new Thread ( runnable1 ) ; 
 - 
 - Runnable runnable2 = new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; 
 - Realm realm = Realm . getInstance ( realmConfig ) ; 
 - RealmResults < StringOnly > realmResults = realm . where ( StringOnly . class ) . endsWith ( " chars " , " 0 " ) . findAll ( ) ; 
 - int n = 0 ; 
 - for ( StringOnly stringOnly : realmResults ) { 
 - n = n + 1 ; 
 - } 
 - assertEquals ( nObjects / 10 , n ) ; 
 - realm . close ( ) ; 
 - } 
 - } ; 
 - Thread thread2 = new Thread ( runnable2 ) ; 
 - 
 - thread1 . start ( ) ; 
 - thread2 . start ( ) ; 
 
 - RealmResults < StringOnly > realmResults = testRealm . allObjects ( StringOnly . class ) ; 
 - int n = 0 ; 
 - for ( StringOnly stringOnly : realmResults ) { 
 - n = n + 1 ; 
 + for ( int i = 0 ; i < nThreads ; i + + ) { 
 + Thread thread = new Thread ( 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( realmConfig ) ; 
 + RealmResults < StringOnly > realmResults = realm . allObjects ( StringOnly . class ) ; 
 + int n = 0 ; 
 + for ( StringOnly stringOnly : realmResults ) { 
 + n = n + 1 ; 
 + } 
 + assertEquals ( nObjects , n ) ; 
 + realm . close ( ) ; 
 + finished . incrementAndGet ( ) ; 
 + } 
 + } 
 + ) ; 
 + thread . start ( ) ; 
 } 
 - assertEquals ( nObjects , n ) ; 
 
 - try { 
 - Thread . sleep ( 10000 ) ; 
 - } catch ( InterruptedException e ) { 
 - e . printStackTrace ( ) ; 
 + while ( true ) { 
 + try { 
 + Thread . sleep ( 1000 ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + if ( finished . get ( ) = = nThreads ) { 
 + break ; 
 + } 
 } 
 - 
 } 
 }
