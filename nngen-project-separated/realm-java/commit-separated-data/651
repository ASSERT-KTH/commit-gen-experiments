BLEU SCORE: 0.0241596535992123

TEST MSG: Migrate RealmLinkTests . java to JUnit4 style .
GENERATED MSG: Properly test input parameters to RealmList + Added unit tests for methods on empty lists .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmLinkTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmLinkTests . java <nl> index 9f72d7d . . fd1af8a 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmLinkTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmLinkTests . java <nl> @ @ - 16 , 7 + 16 , 13 @ @ <nl> <nl> package io . realm ; <nl> <nl> - import android . test . AndroidTestCase ; <nl> + import android . support . test . runner . AndroidJUnit4 ; <nl> + <nl> + import org . junit . After ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> <nl> import java . util . Date ; <nl> <nl> @ @ - 24 , 16 + 30 , 29 @ @ import io . realm . entities . AllTypes ; <nl> import io . realm . entities . Cat ; <nl> import io . realm . entities . Dog ; <nl> import io . realm . entities . Owner ; <nl> + import io . realm . rule . TestRealmConfigurationFactory ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> - public class RealmLinkTests extends AndroidTestCase { <nl> + @ RunWith ( AndroidJUnit4 . class ) <nl> + public class RealmLinkTests { <nl> <nl> - protected Realm testRealm ; <nl> + @ Rule <nl> + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; <nl> <nl> - protected void setUp ( ) { <nl> - RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; <nl> - Realm . deleteRealm ( realmConfig ) ; <nl> + private Realm testRealm ; <nl> + private RealmConfiguration realmConfig ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) { <nl> + realmConfig = configFactory . createConfiguration ( ) ; <nl> testRealm = Realm . getInstance ( realmConfig ) ; <nl> <nl> + populate ( ) ; <nl> + } <nl> + <nl> + private void populate ( ) { <nl> testRealm . beginTransaction ( ) ; <nl> testRealm . delete ( Dog . class ) ; <nl> testRealm . delete ( Cat . class ) ; <nl> @ @ - 76 , 12 + 95 , 15 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> testRealm . commitTransaction ( ) ; <nl> } <nl> <nl> - @ Override <nl> - protected void tearDown ( ) throws Exception { <nl> - testRealm . close ( ) ; <nl> + @ After <nl> + public void tearDown ( ) { <nl> + if ( testRealm ! = null ) { <nl> + testRealm . close ( ) ; <nl> + } <nl> } <nl> <nl> - public void testObjects ( ) { <nl> + @ Test <nl> + public void objects ( ) { <nl> RealmResults < Owner > owners = testRealm . where ( Owner . class ) . findAll ( ) ; <nl> assertEquals ( 1 , owners . size ( ) ) ; <nl> assertEquals ( 2 , owners . first ( ) . getDogs ( ) . size ( ) ) ; <nl> @ @ - 102 , 7 + 124 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> } <nl> <nl> <nl> - public void testReamListQuery ( ) { <nl> + @ Test <nl> + public void reamListQuery ( ) { <nl> RealmResults < Owner > owners = testRealm . where ( Owner . class ) . findAll ( ) ; <nl> RealmResults < Dog > dogs = owners . get ( 0 ) . getDogs ( ) . where ( ) . contains ( " name " , " o " ) . findAll ( ) ; <nl> assertEquals ( 2 , dogs . size ( ) ) ; <nl> @ @ - 110 , 7 + 133 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> assertEquals ( " Fido " , dogs . get ( 1 ) . getName ( ) ) ; <nl> } <nl> <nl> - public void testQuerySingleRelationBoolean ( ) { <nl> + @ Test <nl> + public void querySingleRelationBoolean ( ) { <nl> RealmResults < Owner > owners = testRealm . where ( Owner . class ) . equalTo ( " cat . hasTail " , true ) . findAll ( ) ; <nl> assertEquals ( 1 , owners . size ( ) ) ; <nl> assertEquals ( 12 , owners . first ( ) . getCat ( ) . getAge ( ) ) ; <nl> @ @ - 119 , 7 + 143 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> assertEquals ( 0 , none . size ( ) ) ; <nl> } <nl> <nl> - public void testQuerySingleRelationInteger ( ) { <nl> + @ Test <nl> + public void querySingleRelationInteger ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " cat . age " , 12 ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; <nl> @ @ - 157 , 7 + 182 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testQuerySingleRelationDate ( ) { <nl> + @ Test <nl> + public void querySingleRelationDate ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " cat . birthday " , new Date ( 6000 ) ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; <nl> @ @ - 196 , 7 + 222 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testQuerySingleRelationFloat ( ) { <nl> + @ Test <nl> + public void querySingleRelationFloat ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . greaterThanOrEqualTo ( " cat . height " , 0 . 2f ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; <nl> @ @ - 227 , 7 + 254 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testQuerySingleRelationDouble ( ) { <nl> + @ Test <nl> + public void querySingleRelationDouble ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . greaterThanOrEqualTo ( " cat . weight " , 0 . 2 ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; <nl> @ @ - 259 , 8 + 287 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - <nl> - public void testQuerySingleRelationString ( ) { <nl> + @ Test <nl> + public void querySingleRelationString ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " cat . name " , " Blackie " ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> <nl> @ @ - 286 , 7 + 314 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> assertEquals ( 1 , owners6 . size ( ) ) ; <nl> } <nl> <nl> - public void testQueryMultipleRelationsBoolean ( ) { <nl> + @ Test <nl> + public void queryMultipleRelationsBoolean ( ) { <nl> RealmResults < Owner > owners = testRealm . where ( Owner . class ) . equalTo ( " dogs . hasTail " , true ) . findAll ( ) ; <nl> assertEquals ( 1 , owners . size ( ) ) ; <nl> <nl> @ @ - 294 , 7 + 323 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> assertEquals ( 0 , none . size ( ) ) ; <nl> } <nl> <nl> - public void testQueryMultipleRelationsInteger ( ) { <nl> + @ Test <nl> + public void queryMultipleRelationsInteger ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " dogs . age " , 10 ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> <nl> @ @ - 326 , 7 + 356 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testQueryMultipleRelationsDate ( ) { <nl> + @ Test <nl> + public void queryMultipleRelationsDate ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " dogs . birthday " , new Date ( 2000 ) ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> <nl> @ @ - 359 , 7 + 390 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testQueryMultipleRelationsFloat ( ) { <nl> + @ Test <nl> + public void queryMultipleRelationsFloat ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . greaterThanOrEqualTo ( " dogs . height " , 0 . 2f ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; <nl> @ @ - 391 , 7 + 423 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testQueryMultipleRelationsDouble ( ) { <nl> + @ Test <nl> + public void queryMultipleRelationsDouble ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . greaterThanOrEqualTo ( " dogs . weight " , 0 . 2 ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; <nl> @ @ - 423 , 8 + 456 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - <nl> - public void testQueryMultipleRelationsString ( ) { <nl> + @ Test <nl> + public void queryMultipleRelationsString ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " dogs . name " , " Pluto " ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> <nl> @ @ - 447 , 7 + 480 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> assertEquals ( 0 , owners5 . size ( ) ) ; <nl> } <nl> <nl> - public void testQueryShouldFail ( ) { <nl> + @ Test <nl> + public void queryShouldFail ( ) { <nl> try { <nl> RealmResults < Owner > owners = testRealm . where ( Owner . class ) . equalTo ( " cat . . hasTail " , true ) . findAll ( ) ; <nl> fail ( " Should throw Exception " ) ; <nl> @ @ - 470 , 7 + 504 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> } <nl> } <nl> <nl> - public void testWhere ( ) throws Exception { <nl> + @ Test <nl> + public void where ( ) throws Exception { <nl> RealmResults < Owner > owners = testRealm . where ( Owner . class ) . findAll ( ) ; <nl> RealmResults < Dog > dogs = owners . first ( ) . getDogs ( ) . where ( ) . equalTo ( " name " , " Pluto " ) . findAll ( ) ; <nl> assertEquals ( 1 , dogs . size ( ) ) ; <nl> @ @ - 481 , 13 + 516 , 15 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> assertEquals ( 0 , none . size ( ) ) ; <nl> } <nl> <nl> - public void testSubquery ( ) { <nl> + @ Test <nl> + public void subquery ( ) { <nl> RealmResults < Owner > owners = testRealm . where ( Owner . class ) . equalTo ( " dogs . name " , " Pluto " ) . findAll ( ) ; <nl> RealmResults < Owner > subOwners = owners . where ( ) . equalTo ( " cat . name " , " Blackie " ) . findAll ( ) ; <nl> assertEquals ( 1 , subOwners . size ( ) ) ; <nl> } <nl> <nl> - public void testLinkIsNull ( ) { <nl> + @ Test <nl> + public void linkIsNull ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . isNull ( " cat " ) . findAll ( ) ; <nl> assertEquals ( 0 , owners1 . size ( ) ) ; <nl> <nl> @ @ - 499 , 7 + 536 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> assertEquals ( 1 , owners2 . size ( ) ) ; <nl> } <nl> <nl> - public void testLinkIsNotNull ( ) { <nl> + @ Test <nl> + public void linkIsNotNull ( ) { <nl> RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . isNotNull ( " cat " ) . findAll ( ) ; <nl> assertEquals ( 1 , owners1 . size ( ) ) ; <nl> <nl> @ @ - 511 , 7 + 549 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { <nl> assertEquals ( 0 , owners2 . size ( ) ) ; <nl> } <nl> <nl> - public void testIsNullWrongType ( ) { <nl> + @ Test <nl> + public void isNullWrongType ( ) { <nl> try { <nl> / / AllTypes . columnFloat is not nullable <nl> testRealm . where ( AllTypes . class ) . isNull ( " columnFloat " ) . findAll ( ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / RealmListTest . java b / realm / src / androidTest / java / io / realm / RealmListTest . java <nl> index ee0ebde . . 1323ad3 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / RealmListTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / RealmListTest . java <nl> @ @ - 52 , 6 + 52 , 26 @ @ public class RealmListTest extends AndroidTestCase { <nl> return list ; <nl> } <nl> <nl> + / / Check that all methods work correctly on a empty RealmList <nl> + private void testMethodsOnEmptyList ( RealmList < Dog > list ) { <nl> + for ( int i = 0 ; i < 4 ; i + + ) { <nl> + try { <nl> + switch ( i ) { <nl> + case 0 : list . get ( 0 ) ; break ; <nl> + case 1 : list . remove ( 0 ) ; break ; <nl> + case 2 : list . set ( 0 , new Dog ( ) ) ; break ; <nl> + case 3 : list . move ( 0 , 0 ) ; break ; <nl> + } <nl> + fail ( ) ; <nl> + } catch ( IndexOutOfBoundsException expected ) { <nl> + } <nl> + } <nl> + <nl> + assertEquals ( 0 , list . size ( ) ) ; <nl> + assertNull ( list . first ( ) ) ; <nl> + assertNull ( list . last ( ) ) ; <nl> + } <nl> + <nl> @ Override <nl> protected void tearDown ( ) throws Exception { <nl> testRealm . close ( ) ; <nl> @ @ - 211 , 7 + 231 , 7 @ @ public class RealmListTest extends AndroidTestCase { <nl> assertEquals ( oldIndex , owner . getDogs ( ) . indexOf ( dog ) ) ; <nl> } <nl> <nl> - public void testFirst _ nonManagedMode ( ) { <nl> + public void testFirstAndLast _ nonManagedMode ( ) { <nl> RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; <nl> AllTypes object1 = new AllTypes ( ) ; <nl> AllTypes object2 = new AllTypes ( ) ; <nl> @ @ - 219 , 26 + 239 , 12 @ @ public class RealmListTest extends AndroidTestCase { <nl> list . add ( object2 ) ; <nl> <nl> assertEquals ( object1 , list . first ( ) ) ; <nl> - } <nl> - <nl> - public void testFirstEmptyList _ nonManagedMode ( ) { <nl> - RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; <nl> - assertNull ( list . first ( ) ) ; <nl> - } <nl> - <nl> - public void testLast _ nonManagedMode ( ) { <nl> - RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; <nl> - AllTypes object1 = new AllTypes ( ) ; <nl> - AllTypes object2 = new AllTypes ( ) ; <nl> - list . add ( object1 ) ; <nl> - list . add ( object2 ) ; <nl> - <nl> assertEquals ( object2 , list . last ( ) ) ; <nl> } <nl> <nl> - public void testLastEmptyList _ nonManagedMode ( ) { <nl> - RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; <nl> - assertNull ( list . last ( ) ) ; <nl> + public void testEmptyList _ nonManagedMode ( ) { <nl> + RealmList < Dog > list = new RealmList < Dog > ( ) ; <nl> + testMethodsOnEmptyList ( list ) ; <nl> } <nl> <nl> / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * <nl> @ @ - 304 , 7 + 310 , 7 @ @ public class RealmListTest extends AndroidTestCase { <nl> try { <nl> owner . getDogs ( ) . add ( null ) ; <nl> fail ( " Adding null values is not supported " ) ; <nl> - } catch ( NullPointerException ignored ) { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> } finally { <nl> testRealm . cancelTransaction ( ) ; <nl> } <nl> @ @ - 323 , 36 + 329 , 12 @ @ public class RealmListTest extends AndroidTestCase { <nl> assertEquals ( " Dog 1 " , dogs . get ( 1 ) . getName ( ) ) ; <nl> } <nl> <nl> - public void testFirst ( ) { <nl> + public void testFirstLast ( ) { <nl> Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; <nl> - Dog dog = owner . getDogs ( ) . first ( ) ; <nl> - <nl> - assertEquals ( " Dog 0 " , dog . getName ( ) ) ; <nl> - } <nl> - <nl> - public void testFirstEmptyList ( ) { <nl> - Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; <nl> - testRealm . beginTransaction ( ) ; <nl> - owner . getDogs ( ) . clear ( ) ; <nl> - testRealm . commitTransaction ( ) ; <nl> - <nl> - assertNull ( owner . getDogs ( ) . first ( ) ) ; <nl> - } <nl> - <nl> - public void testLast ( ) { <nl> - Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; <nl> - Dog dog = owner . getDogs ( ) . last ( ) ; <nl> - <nl> - assertEquals ( " Dog " + ( TEST _ OBJECTS - 1 ) , dog . getName ( ) ) ; <nl> - } <nl> - <nl> - public void testLastEmptyList ( ) { <nl> - Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; <nl> - testRealm . beginTransaction ( ) ; <nl> - owner . getDogs ( ) . clear ( ) ; <nl> - testRealm . commitTransaction ( ) ; <nl> + RealmList < Dog > dogs = owner . getDogs ( ) ; <nl> <nl> - assertNull ( owner . getDogs ( ) . last ( ) ) ; <nl> + assertEquals ( " Dog 0 " , dogs . first ( ) . getName ( ) ) ; <nl> + assertEquals ( " Dog " + ( TEST _ OBJECTS - 1 ) , dogs . last ( ) . getName ( ) ) ; <nl> } <nl> <nl> public void testRemoveByIndex ( ) { <nl> @ @ - 388 , 4 + 370 , 13 @ @ public class RealmListTest extends AndroidTestCase { <nl> <nl> assertNotNull ( firstDog ) ; <nl> } <nl> + <nl> + public void testEmptyListMethods ( ) { <nl> + Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; <nl> + testRealm . beginTransaction ( ) ; <nl> + owner . getDogs ( ) . clear ( ) ; <nl> + testRealm . commitTransaction ( ) ; <nl> + <nl> + testMethodsOnEmptyList ( owner . getDogs ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java <nl> index b0b5f33 . . 5a7b23a 100644 <nl> - - - a / realm / src / main / java / io / realm / RealmList . java <nl> + + + b / realm / src / main / java / io / realm / RealmList . java <nl> @ @ - 18 , 11 + 18 , 9 @ @ package io . realm ; <nl> <nl> import java . util . AbstractList ; <nl> import java . util . ArrayList ; <nl> - import java . util . LinkedList ; <nl> import java . util . List ; <nl> <nl> import io . realm . exceptions . RealmException ; <nl> - import io . realm . annotations . Index ; <nl> import io . realm . internal . LinkView ; <nl> import io . realm . internal . TableQuery ; <nl> <nl> @ @ - 78 , 10 + 76 , 10 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> * / <nl> @ Override <nl> public void add ( int location , E object ) { <nl> + assertValidObject ( object ) ; <nl> if ( managedMode ) { <nl> view . insert ( location , object . row . getIndex ( ) ) ; <nl> } else { <nl> - assertValidObjectInNonManagedMode ( object ) ; <nl> nonManagedList . add ( location , object ) ; <nl> } <nl> } <nl> @ @ - 91 , 10 + 89 , 10 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> * / <nl> @ Override <nl> public boolean add ( E object ) { <nl> + assertValidObject ( object ) ; <nl> if ( managedMode ) { <nl> view . add ( object . row . getIndex ( ) ) ; <nl> } else { <nl> - assertValidObjectInNonManagedMode ( object ) ; <nl> nonManagedList . add ( object ) ; <nl> } <nl> return true ; <nl> @ @ - 105 , 10 + 103 , 11 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> * / <nl> @ Override <nl> public E set ( int location , E object ) { <nl> + assertValidObject ( object ) ; <nl> if ( managedMode ) { <nl> + assertIndex ( location ) ; <nl> view . set ( location , object . row . getIndex ( ) ) ; <nl> } else { <nl> - assertValidObjectInNonManagedMode ( object ) ; <nl> nonManagedList . set ( location , object ) ; <nl> } <nl> return object ; <nl> @ @ - 126 , 6 + 125 , 8 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> * @ throws java . lang . IndexOutOfBoundsException if any position is outside [ 0 , size ( ) [ . <nl> * / <nl> public void move ( int oldPos , int newPos ) { <nl> + assertIndex ( oldPos ) ; <nl> + assertIndex ( newPos ) ; <nl> if ( managedMode ) { <nl> view . move ( oldPos , newPos ) ; <nl> } else { <nl> @ @ - 156 , 6 + 157 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> @ Override <nl> public E remove ( int location ) { <nl> if ( managedMode ) { <nl> + assertIndex ( location ) ; <nl> E removedItem = get ( location ) ; <nl> view . remove ( location ) ; <nl> return removedItem ; <nl> @ @ - 170 , 6 + 172 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> @ Override <nl> public E get ( int location ) { <nl> if ( managedMode ) { <nl> + assertIndex ( location ) ; <nl> return realm . get ( clazz , view . getTargetRowIndex ( location ) ) ; <nl> } else { <nl> return nonManagedList . get ( location ) ; <nl> @ @ - 179 , 7 + 182 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> / * * <nl> * Find the first object . <nl> * <nl> - * @ return The first object <nl> + * @ return The first object or { @ code null } if the list is empty . <nl> * / <nl> public E first ( ) { <nl> if ( managedMode & & ! view . isEmpty ( ) ) { <nl> @ @ - 193 , 7 + 196 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> / * * <nl> * Find the last object . <nl> * <nl> - * @ return The last object <nl> + * @ return The last object or { @ code null } if the list is empty . <nl> * / <nl> public E last ( ) { <nl> if ( managedMode & & ! view . isEmpty ( ) ) { <nl> @ @ - 231 , 12 + 234 , 19 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { <nl> } <nl> } <nl> <nl> - private void assertValidObjectInNonManagedMode ( E object ) { <nl> + private void assertValidObject ( E object ) { <nl> if ( object = = null ) { <nl> throw new IllegalArgumentException ( NULL _ OBJECTS _ NOT _ ALLOWED _ MESSAGE ) ; <nl> } <nl> } <nl> <nl> + private void assertIndex ( int location ) { <nl> + int size = size ( ) ; <nl> + if ( location < 0 | | location > = size ) { <nl> + throw new IndexOutOfBoundsException ( " Invalid index " + location + " , size is " + size ) ; <nl> + } <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) { <nl> StringBuilder sb = new StringBuilder ( ) ;

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmLinkTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmLinkTests . java 
 index 9f72d7d . . fd1af8a 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmLinkTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmLinkTests . java 
 @ @ - 16 , 7 + 16 , 13 @ @ 
 
 package io . realm ; 
 
 - import android . test . AndroidTestCase ; 
 + import android . support . test . runner . AndroidJUnit4 ; 
 + 
 + import org . junit . After ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 
 import java . util . Date ; 
 
 @ @ - 24 , 16 + 30 , 29 @ @ import io . realm . entities . AllTypes ; 
 import io . realm . entities . Cat ; 
 import io . realm . entities . Dog ; 
 import io . realm . entities . Owner ; 
 + import io . realm . rule . TestRealmConfigurationFactory ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . fail ; 
 
 - public class RealmLinkTests extends AndroidTestCase { 
 + @ RunWith ( AndroidJUnit4 . class ) 
 + public class RealmLinkTests { 
 
 - protected Realm testRealm ; 
 + @ Rule 
 + public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory ( ) ; 
 
 - protected void setUp ( ) { 
 - RealmConfiguration realmConfig = TestHelper . createConfiguration ( getContext ( ) ) ; 
 - Realm . deleteRealm ( realmConfig ) ; 
 + private Realm testRealm ; 
 + private RealmConfiguration realmConfig ; 
 + 
 + @ Before 
 + public void setUp ( ) { 
 + realmConfig = configFactory . createConfiguration ( ) ; 
 testRealm = Realm . getInstance ( realmConfig ) ; 
 
 + populate ( ) ; 
 + } 
 + 
 + private void populate ( ) { 
 testRealm . beginTransaction ( ) ; 
 testRealm . delete ( Dog . class ) ; 
 testRealm . delete ( Cat . class ) ; 
 @ @ - 76 , 12 + 95 , 15 @ @ public class RealmLinkTests extends AndroidTestCase { 
 testRealm . commitTransaction ( ) ; 
 } 
 
 - @ Override 
 - protected void tearDown ( ) throws Exception { 
 - testRealm . close ( ) ; 
 + @ After 
 + public void tearDown ( ) { 
 + if ( testRealm ! = null ) { 
 + testRealm . close ( ) ; 
 + } 
 } 
 
 - public void testObjects ( ) { 
 + @ Test 
 + public void objects ( ) { 
 RealmResults < Owner > owners = testRealm . where ( Owner . class ) . findAll ( ) ; 
 assertEquals ( 1 , owners . size ( ) ) ; 
 assertEquals ( 2 , owners . first ( ) . getDogs ( ) . size ( ) ) ; 
 @ @ - 102 , 7 + 124 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 } 
 
 
 - public void testReamListQuery ( ) { 
 + @ Test 
 + public void reamListQuery ( ) { 
 RealmResults < Owner > owners = testRealm . where ( Owner . class ) . findAll ( ) ; 
 RealmResults < Dog > dogs = owners . get ( 0 ) . getDogs ( ) . where ( ) . contains ( " name " , " o " ) . findAll ( ) ; 
 assertEquals ( 2 , dogs . size ( ) ) ; 
 @ @ - 110 , 7 + 133 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 assertEquals ( " Fido " , dogs . get ( 1 ) . getName ( ) ) ; 
 } 
 
 - public void testQuerySingleRelationBoolean ( ) { 
 + @ Test 
 + public void querySingleRelationBoolean ( ) { 
 RealmResults < Owner > owners = testRealm . where ( Owner . class ) . equalTo ( " cat . hasTail " , true ) . findAll ( ) ; 
 assertEquals ( 1 , owners . size ( ) ) ; 
 assertEquals ( 12 , owners . first ( ) . getCat ( ) . getAge ( ) ) ; 
 @ @ - 119 , 7 + 143 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 assertEquals ( 0 , none . size ( ) ) ; 
 } 
 
 - public void testQuerySingleRelationInteger ( ) { 
 + @ Test 
 + public void querySingleRelationInteger ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " cat . age " , 12 ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; 
 @ @ - 157 , 7 + 182 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 } 
 } 
 
 - public void testQuerySingleRelationDate ( ) { 
 + @ Test 
 + public void querySingleRelationDate ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " cat . birthday " , new Date ( 6000 ) ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; 
 @ @ - 196 , 7 + 222 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 } 
 } 
 
 - public void testQuerySingleRelationFloat ( ) { 
 + @ Test 
 + public void querySingleRelationFloat ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . greaterThanOrEqualTo ( " cat . height " , 0 . 2f ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; 
 @ @ - 227 , 7 + 254 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 } 
 } 
 
 - public void testQuerySingleRelationDouble ( ) { 
 + @ Test 
 + public void querySingleRelationDouble ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . greaterThanOrEqualTo ( " cat . weight " , 0 . 2 ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; 
 @ @ - 259 , 8 + 287 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 } 
 } 
 
 - 
 - public void testQuerySingleRelationString ( ) { 
 + @ Test 
 + public void querySingleRelationString ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " cat . name " , " Blackie " ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 
 @ @ - 286 , 7 + 314 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 assertEquals ( 1 , owners6 . size ( ) ) ; 
 } 
 
 - public void testQueryMultipleRelationsBoolean ( ) { 
 + @ Test 
 + public void queryMultipleRelationsBoolean ( ) { 
 RealmResults < Owner > owners = testRealm . where ( Owner . class ) . equalTo ( " dogs . hasTail " , true ) . findAll ( ) ; 
 assertEquals ( 1 , owners . size ( ) ) ; 
 
 @ @ - 294 , 7 + 323 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 assertEquals ( 0 , none . size ( ) ) ; 
 } 
 
 - public void testQueryMultipleRelationsInteger ( ) { 
 + @ Test 
 + public void queryMultipleRelationsInteger ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " dogs . age " , 10 ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 
 @ @ - 326 , 7 + 356 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 } 
 } 
 
 - public void testQueryMultipleRelationsDate ( ) { 
 + @ Test 
 + public void queryMultipleRelationsDate ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " dogs . birthday " , new Date ( 2000 ) ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 
 @ @ - 359 , 7 + 390 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 } 
 } 
 
 - public void testQueryMultipleRelationsFloat ( ) { 
 + @ Test 
 + public void queryMultipleRelationsFloat ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . greaterThanOrEqualTo ( " dogs . height " , 0 . 2f ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; 
 @ @ - 391 , 7 + 423 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 } 
 } 
 
 - public void testQueryMultipleRelationsDouble ( ) { 
 + @ Test 
 + public void queryMultipleRelationsDouble ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . greaterThanOrEqualTo ( " dogs . weight " , 0 . 2 ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 assertEquals ( 12 , owners1 . first ( ) . getCat ( ) . getAge ( ) ) ; 
 @ @ - 423 , 8 + 456 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 } 
 } 
 
 - 
 - public void testQueryMultipleRelationsString ( ) { 
 + @ Test 
 + public void queryMultipleRelationsString ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . equalTo ( " dogs . name " , " Pluto " ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 
 @ @ - 447 , 7 + 480 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 assertEquals ( 0 , owners5 . size ( ) ) ; 
 } 
 
 - public void testQueryShouldFail ( ) { 
 + @ Test 
 + public void queryShouldFail ( ) { 
 try { 
 RealmResults < Owner > owners = testRealm . where ( Owner . class ) . equalTo ( " cat . . hasTail " , true ) . findAll ( ) ; 
 fail ( " Should throw Exception " ) ; 
 @ @ - 470 , 7 + 504 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 } 
 } 
 
 - public void testWhere ( ) throws Exception { 
 + @ Test 
 + public void where ( ) throws Exception { 
 RealmResults < Owner > owners = testRealm . where ( Owner . class ) . findAll ( ) ; 
 RealmResults < Dog > dogs = owners . first ( ) . getDogs ( ) . where ( ) . equalTo ( " name " , " Pluto " ) . findAll ( ) ; 
 assertEquals ( 1 , dogs . size ( ) ) ; 
 @ @ - 481 , 13 + 516 , 15 @ @ public class RealmLinkTests extends AndroidTestCase { 
 assertEquals ( 0 , none . size ( ) ) ; 
 } 
 
 - public void testSubquery ( ) { 
 + @ Test 
 + public void subquery ( ) { 
 RealmResults < Owner > owners = testRealm . where ( Owner . class ) . equalTo ( " dogs . name " , " Pluto " ) . findAll ( ) ; 
 RealmResults < Owner > subOwners = owners . where ( ) . equalTo ( " cat . name " , " Blackie " ) . findAll ( ) ; 
 assertEquals ( 1 , subOwners . size ( ) ) ; 
 } 
 
 - public void testLinkIsNull ( ) { 
 + @ Test 
 + public void linkIsNull ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . isNull ( " cat " ) . findAll ( ) ; 
 assertEquals ( 0 , owners1 . size ( ) ) ; 
 
 @ @ - 499 , 7 + 536 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 assertEquals ( 1 , owners2 . size ( ) ) ; 
 } 
 
 - public void testLinkIsNotNull ( ) { 
 + @ Test 
 + public void linkIsNotNull ( ) { 
 RealmResults < Owner > owners1 = testRealm . where ( Owner . class ) . isNotNull ( " cat " ) . findAll ( ) ; 
 assertEquals ( 1 , owners1 . size ( ) ) ; 
 
 @ @ - 511 , 7 + 549 , 8 @ @ public class RealmLinkTests extends AndroidTestCase { 
 assertEquals ( 0 , owners2 . size ( ) ) ; 
 } 
 
 - public void testIsNullWrongType ( ) { 
 + @ Test 
 + public void isNullWrongType ( ) { 
 try { 
 / / AllTypes . columnFloat is not nullable 
 testRealm . where ( AllTypes . class ) . isNull ( " columnFloat " ) . findAll ( ) ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / RealmListTest . java b / realm / src / androidTest / java / io / realm / RealmListTest . java 
 index ee0ebde . . 1323ad3 100644 
 - - - a / realm / src / androidTest / java / io / realm / RealmListTest . java 
 + + + b / realm / src / androidTest / java / io / realm / RealmListTest . java 
 @ @ - 52 , 6 + 52 , 26 @ @ public class RealmListTest extends AndroidTestCase { 
 return list ; 
 } 
 
 + / / Check that all methods work correctly on a empty RealmList 
 + private void testMethodsOnEmptyList ( RealmList < Dog > list ) { 
 + for ( int i = 0 ; i < 4 ; i + + ) { 
 + try { 
 + switch ( i ) { 
 + case 0 : list . get ( 0 ) ; break ; 
 + case 1 : list . remove ( 0 ) ; break ; 
 + case 2 : list . set ( 0 , new Dog ( ) ) ; break ; 
 + case 3 : list . move ( 0 , 0 ) ; break ; 
 + } 
 + fail ( ) ; 
 + } catch ( IndexOutOfBoundsException expected ) { 
 + } 
 + } 
 + 
 + assertEquals ( 0 , list . size ( ) ) ; 
 + assertNull ( list . first ( ) ) ; 
 + assertNull ( list . last ( ) ) ; 
 + } 
 + 
 @ Override 
 protected void tearDown ( ) throws Exception { 
 testRealm . close ( ) ; 
 @ @ - 211 , 7 + 231 , 7 @ @ public class RealmListTest extends AndroidTestCase { 
 assertEquals ( oldIndex , owner . getDogs ( ) . indexOf ( dog ) ) ; 
 } 
 
 - public void testFirst _ nonManagedMode ( ) { 
 + public void testFirstAndLast _ nonManagedMode ( ) { 
 RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; 
 AllTypes object1 = new AllTypes ( ) ; 
 AllTypes object2 = new AllTypes ( ) ; 
 @ @ - 219 , 26 + 239 , 12 @ @ public class RealmListTest extends AndroidTestCase { 
 list . add ( object2 ) ; 
 
 assertEquals ( object1 , list . first ( ) ) ; 
 - } 
 - 
 - public void testFirstEmptyList _ nonManagedMode ( ) { 
 - RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; 
 - assertNull ( list . first ( ) ) ; 
 - } 
 - 
 - public void testLast _ nonManagedMode ( ) { 
 - RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; 
 - AllTypes object1 = new AllTypes ( ) ; 
 - AllTypes object2 = new AllTypes ( ) ; 
 - list . add ( object1 ) ; 
 - list . add ( object2 ) ; 
 - 
 assertEquals ( object2 , list . last ( ) ) ; 
 } 
 
 - public void testLastEmptyList _ nonManagedMode ( ) { 
 - RealmList < AllTypes > list = new RealmList < AllTypes > ( ) ; 
 - assertNull ( list . last ( ) ) ; 
 + public void testEmptyList _ nonManagedMode ( ) { 
 + RealmList < Dog > list = new RealmList < Dog > ( ) ; 
 + testMethodsOnEmptyList ( list ) ; 
 } 
 
 / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 @ @ - 304 , 7 + 310 , 7 @ @ public class RealmListTest extends AndroidTestCase { 
 try { 
 owner . getDogs ( ) . add ( null ) ; 
 fail ( " Adding null values is not supported " ) ; 
 - } catch ( NullPointerException ignored ) { 
 + } catch ( IllegalArgumentException ignored ) { 
 } finally { 
 testRealm . cancelTransaction ( ) ; 
 } 
 @ @ - 323 , 36 + 329 , 12 @ @ public class RealmListTest extends AndroidTestCase { 
 assertEquals ( " Dog 1 " , dogs . get ( 1 ) . getName ( ) ) ; 
 } 
 
 - public void testFirst ( ) { 
 + public void testFirstLast ( ) { 
 Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; 
 - Dog dog = owner . getDogs ( ) . first ( ) ; 
 - 
 - assertEquals ( " Dog 0 " , dog . getName ( ) ) ; 
 - } 
 - 
 - public void testFirstEmptyList ( ) { 
 - Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; 
 - testRealm . beginTransaction ( ) ; 
 - owner . getDogs ( ) . clear ( ) ; 
 - testRealm . commitTransaction ( ) ; 
 - 
 - assertNull ( owner . getDogs ( ) . first ( ) ) ; 
 - } 
 - 
 - public void testLast ( ) { 
 - Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; 
 - Dog dog = owner . getDogs ( ) . last ( ) ; 
 - 
 - assertEquals ( " Dog " + ( TEST _ OBJECTS - 1 ) , dog . getName ( ) ) ; 
 - } 
 - 
 - public void testLastEmptyList ( ) { 
 - Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; 
 - testRealm . beginTransaction ( ) ; 
 - owner . getDogs ( ) . clear ( ) ; 
 - testRealm . commitTransaction ( ) ; 
 + RealmList < Dog > dogs = owner . getDogs ( ) ; 
 
 - assertNull ( owner . getDogs ( ) . last ( ) ) ; 
 + assertEquals ( " Dog 0 " , dogs . first ( ) . getName ( ) ) ; 
 + assertEquals ( " Dog " + ( TEST _ OBJECTS - 1 ) , dogs . last ( ) . getName ( ) ) ; 
 } 
 
 public void testRemoveByIndex ( ) { 
 @ @ - 388 , 4 + 370 , 13 @ @ public class RealmListTest extends AndroidTestCase { 
 
 assertNotNull ( firstDog ) ; 
 } 
 + 
 + public void testEmptyListMethods ( ) { 
 + Owner owner = testRealm . where ( Owner . class ) . findFirst ( ) ; 
 + testRealm . beginTransaction ( ) ; 
 + owner . getDogs ( ) . clear ( ) ; 
 + testRealm . commitTransaction ( ) ; 
 + 
 + testMethodsOnEmptyList ( owner . getDogs ( ) ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / RealmList . java b / realm / src / main / java / io / realm / RealmList . java 
 index b0b5f33 . . 5a7b23a 100644 
 - - - a / realm / src / main / java / io / realm / RealmList . java 
 + + + b / realm / src / main / java / io / realm / RealmList . java 
 @ @ - 18 , 11 + 18 , 9 @ @ package io . realm ; 
 
 import java . util . AbstractList ; 
 import java . util . ArrayList ; 
 - import java . util . LinkedList ; 
 import java . util . List ; 
 
 import io . realm . exceptions . RealmException ; 
 - import io . realm . annotations . Index ; 
 import io . realm . internal . LinkView ; 
 import io . realm . internal . TableQuery ; 
 
 @ @ - 78 , 10 + 76 , 10 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 * / 
 @ Override 
 public void add ( int location , E object ) { 
 + assertValidObject ( object ) ; 
 if ( managedMode ) { 
 view . insert ( location , object . row . getIndex ( ) ) ; 
 } else { 
 - assertValidObjectInNonManagedMode ( object ) ; 
 nonManagedList . add ( location , object ) ; 
 } 
 } 
 @ @ - 91 , 10 + 89 , 10 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 * / 
 @ Override 
 public boolean add ( E object ) { 
 + assertValidObject ( object ) ; 
 if ( managedMode ) { 
 view . add ( object . row . getIndex ( ) ) ; 
 } else { 
 - assertValidObjectInNonManagedMode ( object ) ; 
 nonManagedList . add ( object ) ; 
 } 
 return true ; 
 @ @ - 105 , 10 + 103 , 11 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 * / 
 @ Override 
 public E set ( int location , E object ) { 
 + assertValidObject ( object ) ; 
 if ( managedMode ) { 
 + assertIndex ( location ) ; 
 view . set ( location , object . row . getIndex ( ) ) ; 
 } else { 
 - assertValidObjectInNonManagedMode ( object ) ; 
 nonManagedList . set ( location , object ) ; 
 } 
 return object ; 
 @ @ - 126 , 6 + 125 , 8 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 * @ throws java . lang . IndexOutOfBoundsException if any position is outside [ 0 , size ( ) [ . 
 * / 
 public void move ( int oldPos , int newPos ) { 
 + assertIndex ( oldPos ) ; 
 + assertIndex ( newPos ) ; 
 if ( managedMode ) { 
 view . move ( oldPos , newPos ) ; 
 } else { 
 @ @ - 156 , 6 + 157 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 @ Override 
 public E remove ( int location ) { 
 if ( managedMode ) { 
 + assertIndex ( location ) ; 
 E removedItem = get ( location ) ; 
 view . remove ( location ) ; 
 return removedItem ; 
 @ @ - 170 , 6 + 172 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 @ Override 
 public E get ( int location ) { 
 if ( managedMode ) { 
 + assertIndex ( location ) ; 
 return realm . get ( clazz , view . getTargetRowIndex ( location ) ) ; 
 } else { 
 return nonManagedList . get ( location ) ; 
 @ @ - 179 , 7 + 182 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 / * * 
 * Find the first object . 
 * 
 - * @ return The first object 
 + * @ return The first object or { @ code null } if the list is empty . 
 * / 
 public E first ( ) { 
 if ( managedMode & & ! view . isEmpty ( ) ) { 
 @ @ - 193 , 7 + 196 , 7 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 / * * 
 * Find the last object . 
 * 
 - * @ return The last object 
 + * @ return The last object or { @ code null } if the list is empty . 
 * / 
 public E last ( ) { 
 if ( managedMode & & ! view . isEmpty ( ) ) { 
 @ @ - 231 , 12 + 234 , 19 @ @ public class RealmList < E extends RealmObject > extends AbstractList < E > { 
 } 
 } 
 
 - private void assertValidObjectInNonManagedMode ( E object ) { 
 + private void assertValidObject ( E object ) { 
 if ( object = = null ) { 
 throw new IllegalArgumentException ( NULL _ OBJECTS _ NOT _ ALLOWED _ MESSAGE ) ; 
 } 
 } 
 
 + private void assertIndex ( int location ) { 
 + int size = size ( ) ; 
 + if ( location < 0 | | location > = size ) { 
 + throw new IndexOutOfBoundsException ( " Invalid index " + location + " , size is " + size ) ; 
 + } 
 + } 
 + 
 @ Override 
 public String toString ( ) { 
 StringBuilder sb = new StringBuilder ( ) ;
