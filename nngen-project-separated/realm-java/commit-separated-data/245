BLEU SCORE: 0.014199193612838947

TEST MSG: Extend test to verify that logging out one user allows another to log in
GENERATED MSG: Remove old unmaintained tests .

TEST DIFF (one line): diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> index 83bf65c . . 49b8443 100644 <nl> - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java <nl> @ @ - 397 , 4 + 397 , 53 @ @ public class AuthTests extends BaseIntegrationTest { <nl> assertFalse ( currentUser . isValid ( ) ) ; <nl> assertNull ( SyncUser . currentUser ( ) ) ; <nl> } <nl> + <nl> + / / verify that multiple users can be logged in at the same time <nl> + @ Test <nl> + public void multipleUsersCanBeLoggedInSimultaneously ( ) { <nl> + final String password = " password " ; <nl> + final SyncUser [ ] users = new SyncUser [ 3 ] ; <nl> + <nl> + for ( int i = 0 ; i < users . length ; i + + ) { <nl> + SyncCredentials credentials = SyncCredentials . usernamePassword ( UUID . randomUUID ( ) . toString ( ) , password , <nl> + true ) ; <nl> + users [ i ] = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; <nl> + } <nl> + <nl> + for ( int i = 0 ; i < users . length ; i + + ) { <nl> + assertTrue ( users [ i ] . isValid ( ) ) ; <nl> + } <nl> + <nl> + for ( int i = 0 ; i < users . length ; i + + ) { <nl> + users [ i ] . logout ( ) ; <nl> + } <nl> + <nl> + for ( int i = 0 ; i < users . length ; i + + ) { <nl> + assertFalse ( users [ i ] . isValid ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / / verify that a single user can be logged out and back in . <nl> + @ Test <nl> + public void singleUserCanBeLoggedInAndOutRepeatedly ( ) { <nl> + final String username = UUID . randomUUID ( ) . toString ( ) ; <nl> + final String password = " password " ; <nl> + <nl> + / / register the user the first time <nl> + SyncCredentials credentials = SyncCredentials . usernamePassword ( username , password , true ) ; <nl> + <nl> + SyncUser user = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; <nl> + assertTrue ( user . isValid ( ) ) ; <nl> + user . logout ( ) ; <nl> + assertFalse ( user . isValid ( ) ) ; <nl> + <nl> + / / on subsequent logins , the user is already registered . <nl> + credentials = credentials = SyncCredentials . usernamePassword ( username , password , false ) ; <nl> + for ( int i = 0 ; i < 3 ; i + + ) { <nl> + user = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; <nl> + assertTrue ( user . isValid ( ) ) ; <nl> + user . logout ( ) ; <nl> + assertFalse ( user . isValid ( ) ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java <nl> deleted file mode 100644 <nl> index b642205 . . 0000000 <nl> - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 195 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - / * TODO : translate to new object syntax <nl> - <nl> - <nl> - package io . realm . tests . typed ; <nl> - <nl> - import android . test . AndroidTestCase ; <nl> - <nl> - import java . util . Date ; <nl> - <nl> - import io . realm . tests . typed . entities . AllColumns ; <nl> - import io . realm . tests . typed . entities . User ; <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmList ; <nl> - import io . realm . RealmTableOrViewList ; <nl> - <nl> - public class RealmListTest extends AndroidTestCase { <nl> - <nl> - private Realm realm ; <nl> - <nl> - @ Override <nl> - public void setUp ( ) throws Exception { <nl> - super . setUp ( ) ; <nl> - <nl> - realm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; <nl> - <nl> - realm . clear ( ) ; <nl> - <nl> - } <nl> - <nl> - public void addObjectsToRealm ( ) { <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - for ( int i = 0 ; i < 10 ; i + + ) { <nl> - AllColumns allColumns = new AllColumns ( ) ; <nl> - <nl> - allColumns . setColumnString ( " dsfs " ) ; <nl> - allColumns . setColumnLong ( i ) ; <nl> - allColumns . setColumnFloat ( 1 . 1F ) ; <nl> - allColumns . setColumnDouble ( 1 . 1 ) ; <nl> - allColumns . setColumnBoolean ( true ) ; <nl> - allColumns . setColumnDate ( new Date ( ) ) ; <nl> - allColumns . setColumnBinary ( new byte [ 20 ] ) ; <nl> - <nl> - User user = new User ( ) ; <nl> - user . setId ( i ) ; <nl> - user . setName ( " Test User " ) ; <nl> - user . setEmail ( " user @ test . com " ) ; <nl> - <nl> - allColumns . setColumnRealmObject ( user ) ; <nl> - <nl> - realm . add ( allColumns ) ; <nl> - } <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } <nl> - <nl> - public void testAddObject ( ) { <nl> - <nl> - AllColumns allColumns = new AllColumns ( ) ; <nl> - <nl> - allColumns . setColumnString ( " dsfs " ) ; <nl> - allColumns . setColumnLong ( 1 ) ; <nl> - allColumns . setColumnFloat ( 1 . 1F ) ; <nl> - allColumns . setColumnDouble ( 1 . 1 ) ; <nl> - allColumns . setColumnBoolean ( true ) ; <nl> - allColumns . setColumnDate ( new Date ( ) ) ; <nl> - allColumns . setColumnBinary ( new byte [ 20 ] ) ; <nl> - <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - RealmTableOrViewList < AllColumns > list = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - assertEquals ( 0 , list . size ( ) ) ; <nl> - <nl> - try { <nl> - list . add ( allColumns ) ; <nl> - fail ( " Should throw UnsupportedOperationException " ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } catch ( UnsupportedOperationException e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - <nl> - } <nl> - <nl> - public void testAllObjects ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - assertEquals ( 10 , allColumnsList . size ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testGetObjects ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - assertEquals ( 5 , allColumnsList . get ( 5 ) . getColumnLong ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testGetFirstObject ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - assertEquals ( 0 , allColumnsList . first ( ) . getColumnLong ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testGetLastObject ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - assertEquals ( 9 , allColumnsList . last ( ) . getColumnLong ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testRemoveByIndex ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - try { <nl> - allColumnsList . remove ( 5 ) ; <nl> - fail ( " Should throw UnsupportedOperationException " ) ; <nl> - realm . commitTransaction ( ) ; <nl> - } catch ( UnsupportedOperationException e ) { <nl> - } <nl> - <nl> - } <nl> - <nl> - public void testRemoveByObject ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; <nl> - <nl> - try { <nl> - <nl> - allColumnsList . remove ( allColumnsList . get ( 5 ) ) ; <nl> - fail ( " Should throw UnsupportedOperationException " ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } catch ( UnsupportedOperationException e ) { <nl> - } <nl> - <nl> - } <nl> - <nl> - public void testQuery ( ) { <nl> - <nl> - addObjectsToRealm ( ) ; <nl> - <nl> - RealmList all = realm . where ( AllColumns . class ) . greaterThan ( " columnlong " , 0 ) . findAll ( ) ; <nl> - <nl> - assertEquals ( 9 , all . size ( ) ) ; <nl> - <nl> - RealmList result = all . where ( ) . lessThan ( " columnlong " , 5 ) . findAll ( ) ; <nl> - <nl> - assertEquals ( 4 , result . size ( ) ) ; <nl> - <nl> - } <nl> - <nl> - } <nl> - * / <nl> diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java <nl> deleted file mode 100644 <nl> index a886cd8 . . 0000000 <nl> - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 267 + 0 , 0 @ @ <nl> - / * <nl> - * Copyright 2014 Realm Inc . <nl> - * <nl> - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> - * you may not use this file except in compliance with the License . <nl> - * You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - <nl> - / * TODO : translate to new object syntax <nl> - <nl> - <nl> - package io . realm . tests . typed ; <nl> - <nl> - import android . test . AndroidTestCase ; <nl> - <nl> - import java . util . Date ; <nl> - <nl> - import io . realm . tests . typed . entities . AllColumns ; <nl> - import io . realm . tests . typed . entities . Dog ; <nl> - import io . realm . tests . typed . entities . User ; <nl> - import io . realm . Realm ; <nl> - import io . realm . RealmArrayList ; <nl> - import io . realm . RealmChangeListener ; <nl> - import io . realm . RealmList ; <nl> - <nl> - <nl> - public class RealmTest extends AndroidTestCase { <nl> - <nl> - private Realm realm ; <nl> - <nl> - @ Override <nl> - public void setUp ( ) throws Exception { <nl> - realm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; <nl> - <nl> - realm . clear ( ) ; <nl> - } <nl> - <nl> - <nl> - public void realm ( ) { <nl> - <nl> - realm . addChangeListener ( new RealmChangeListener ( ) { <nl> - @ Override <nl> - public void onChange ( ) { <nl> - System . out . println ( " Realm changed " ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - try { <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - / / Insert <nl> - for ( int i = 0 ; i < 120 ; i + + ) { <nl> - <nl> - User user = realm . getInstance ( User . class ) ; <nl> - <nl> - user . setId ( i ) ; <nl> - user . setName ( " Rasmus " ) ; <nl> - user . setEmail ( " ra @ realm . io " ) ; <nl> - <nl> - user . setId ( 10 ) ; <nl> - <nl> - } <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } catch ( Throwable t ) { <nl> - t . printStackTrace ( ) ; <nl> - } <nl> - <nl> - RealmList < User > users = realm . where ( User . class ) . findAll ( ) ; <nl> - <nl> - <nl> - / / Get <nl> - User user1 = users . get ( 100 ) ; <nl> - assertEquals ( " Rasmus " , user1 . getName ( ) ) ; <nl> - <nl> - <nl> - try { <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - users = realm . where ( User . class ) . findAll ( ) ; <nl> - user1 = users . get ( 100 ) ; <nl> - <nl> - user1 . setName ( " TestName " ) ; <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - } catch ( Throwable t ) { <nl> - } <nl> - <nl> - users = realm . where ( User . class ) . findAll ( ) ; <nl> - <nl> - / / Get <nl> - user1 = users . get ( 100 ) ; <nl> - <nl> - assertEquals ( " TestName " , user1 . getName ( ) ) ; <nl> - <nl> - assertEquals ( 120 , users . size ( ) ) ; <nl> - <nl> - / / Iterable <nl> - for ( User user : users ) { <nl> - System . out . println ( user . getId ( ) ) ; <nl> - } <nl> - <nl> - <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - users = realm . where ( User . class ) . findAll ( ) ; <nl> - user1 = users . get ( 100 ) ; <nl> - user1 . setId ( 100 ) ; <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - <nl> - <nl> - / / Query <nl> - RealmList < User > results = realm . where ( User . class ) . equalTo ( " id " , 10 ) . findAll ( ) ; <nl> - <nl> - assertEquals ( 119 , results . size ( ) ) ; <nl> - assertEquals ( 10 , results . get ( 0 ) . getId ( ) ) ; <nl> - <nl> - } <nl> - <nl> - <nl> - public void testCreate ( ) { <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - AllColumns obj = realm . getInstance ( AllColumns . class ) ; <nl> - <nl> - obj . setColumnString ( " dsfs " ) ; <nl> - obj . setColumnLong ( 1 ) ; <nl> - obj . setColumnFloat ( 1 . 1F ) ; <nl> - obj . setColumnDouble ( 1 . 1 ) ; <nl> - obj . setColumnBoolean ( true ) ; <nl> - obj . setColumnDate ( new Date ( ) ) ; <nl> - obj . setColumnBinary ( new byte [ 20 ] ) ; <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - RealmList < AllColumns > result = realm . where ( AllColumns . class ) . findAll ( ) ; <nl> - <nl> - assertEquals ( 1 , result . size ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testAdd ( ) { <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - AllColumns obj = new AllColumns ( ) ; <nl> - <nl> - obj . setColumnString ( " dsfs " ) ; <nl> - obj . setColumnLong ( 1 ) ; <nl> - obj . setColumnFloat ( 1 . 1F ) ; <nl> - obj . setColumnDouble ( 1 . 1 ) ; <nl> - obj . setColumnBoolean ( true ) ; <nl> - obj . setColumnDate ( new Date ( ) ) ; <nl> - obj . setColumnBinary ( new byte [ 20 ] ) ; <nl> - <nl> - User user = new User ( ) ; <nl> - user . setName ( " Rasmus " ) ; <nl> - user . setEmail ( " ra @ realm . io " ) ; <nl> - user . setId ( 0 ) ; <nl> - <nl> - obj . setColumnRealmObject ( user ) ; <nl> - <nl> - realm . add ( obj ) ; <nl> - <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - assertEquals ( 1 , realm . allObjects ( AllColumns . class ) . size ( ) ) ; <nl> - assertEquals ( 1 , realm . allObjects ( User . class ) . size ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testLinkList ( ) { <nl> - <nl> - User user1 = new User ( ) ; <nl> - user1 . setName ( " Rasmus " ) ; <nl> - user1 . setEmail ( " ra @ realm . io " ) ; <nl> - user1 . setId ( 0 ) ; <nl> - <nl> - User user2 = new User ( ) ; <nl> - user2 . setName ( " Morten " ) ; <nl> - user2 . setEmail ( " mk @ realm . io " ) ; <nl> - user2 . setId ( 1 ) ; <nl> - <nl> - RealmList < User > users = new RealmArrayList < User > ( ) ; <nl> - users . add ( user1 ) ; <nl> - users . add ( user2 ) ; <nl> - <nl> - assertEquals ( false , realm . contains ( Dog . class ) ) ; <nl> - assertEquals ( false , realm . contains ( User . class ) ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - <nl> - Dog dog = realm . getInstance ( Dog . class ) ; <nl> - dog . setName ( " Fido " ) ; <nl> - dog . setOwners ( users ) ; <nl> - <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - Dog fido = realm . allObjects ( Dog . class ) . first ( ) ; <nl> - <nl> - assertEquals ( " Fido " , fido . getName ( ) ) ; <nl> - <nl> - RealmList < User > owners = fido . getOwners ( ) ; <nl> - <nl> - assertEquals ( " Rasmus " , owners . get ( 0 ) . getName ( ) ) ; <nl> - <nl> - <nl> - <nl> - <nl> - assertEquals ( 1 , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> - assertEquals ( 2 , realm . allObjects ( User . class ) . size ( ) ) ; <nl> - <nl> - <nl> - Dog vuf = new Dog ( ) ; <nl> - vuf . setName ( " Vuf " ) ; <nl> - vuf . getOwners ( ) . add ( user1 ) ; <nl> - <nl> - realm . beginTransaction ( ) ; <nl> - realm . add ( vuf ) ; <nl> - realm . commitTransaction ( ) ; <nl> - <nl> - assertEquals ( 2 , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> - assertEquals ( 2 , realm . allObjects ( User . class ) . size ( ) ) ; <nl> - <nl> - } <nl> - <nl> - public void testMigration ( ) { <nl> - * / <nl> - / * <nl> - realm . ensureRealmAtVersion ( 2 , new RealmMigration ( ) { <nl> - @ Override <nl> - public void execute ( Realm realm , int version ) { <nl> - <nl> - Table table = realm . getTable ( User . class ) ; <nl> - <nl> - if ( realm . getVersion ( ) < 1 ) { <nl> - table . addColumn ( ColumnType . STRING , " newStringCol " ) ; <nl> - } <nl> - <nl> - if ( realm . getVersion ( ) < 2 ) { <nl> - table . removeColumn ( table . getColumnIndex ( " newStringCol " ) ) ; <nl> - } <nl> - <nl> - realm . setVersion ( version ) ; <nl> - <nl> - } <nl> - } ) ; <nl> - * / / * <nl> - <nl> - } <nl> - <nl> - } <nl> - * /

TEST DIFF:
diff - - git a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 index 83bf65c . . 49b8443 100644 
 - - - a / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 + + + b / realm / realm - library / src / syncIntegrationTest / java / io / realm / objectserver / AuthTests . java 
 @ @ - 397 , 4 + 397 , 53 @ @ public class AuthTests extends BaseIntegrationTest { 
 assertFalse ( currentUser . isValid ( ) ) ; 
 assertNull ( SyncUser . currentUser ( ) ) ; 
 } 
 + 
 + / / verify that multiple users can be logged in at the same time 
 + @ Test 
 + public void multipleUsersCanBeLoggedInSimultaneously ( ) { 
 + final String password = " password " ; 
 + final SyncUser [ ] users = new SyncUser [ 3 ] ; 
 + 
 + for ( int i = 0 ; i < users . length ; i + + ) { 
 + SyncCredentials credentials = SyncCredentials . usernamePassword ( UUID . randomUUID ( ) . toString ( ) , password , 
 + true ) ; 
 + users [ i ] = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; 
 + } 
 + 
 + for ( int i = 0 ; i < users . length ; i + + ) { 
 + assertTrue ( users [ i ] . isValid ( ) ) ; 
 + } 
 + 
 + for ( int i = 0 ; i < users . length ; i + + ) { 
 + users [ i ] . logout ( ) ; 
 + } 
 + 
 + for ( int i = 0 ; i < users . length ; i + + ) { 
 + assertFalse ( users [ i ] . isValid ( ) ) ; 
 + } 
 + } 
 + 
 + / / verify that a single user can be logged out and back in . 
 + @ Test 
 + public void singleUserCanBeLoggedInAndOutRepeatedly ( ) { 
 + final String username = UUID . randomUUID ( ) . toString ( ) ; 
 + final String password = " password " ; 
 + 
 + / / register the user the first time 
 + SyncCredentials credentials = SyncCredentials . usernamePassword ( username , password , true ) ; 
 + 
 + SyncUser user = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; 
 + assertTrue ( user . isValid ( ) ) ; 
 + user . logout ( ) ; 
 + assertFalse ( user . isValid ( ) ) ; 
 + 
 + / / on subsequent logins , the user is already registered . 
 + credentials = credentials = SyncCredentials . usernamePassword ( username , password , false ) ; 
 + for ( int i = 0 ; i < 3 ; i + + ) { 
 + user = SyncUser . login ( credentials , Constants . AUTH _ URL ) ; 
 + assertTrue ( user . isValid ( ) ) ; 
 + user . logout ( ) ; 
 + assertFalse ( user . isValid ( ) ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java 
 deleted file mode 100644 
 index b642205 . . 0000000 
 - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmListTest . java 
 + + + / dev / null 
 @ @ - 1 , 195 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - / * TODO : translate to new object syntax 
 - 
 - 
 - package io . realm . tests . typed ; 
 - 
 - import android . test . AndroidTestCase ; 
 - 
 - import java . util . Date ; 
 - 
 - import io . realm . tests . typed . entities . AllColumns ; 
 - import io . realm . tests . typed . entities . User ; 
 - import io . realm . Realm ; 
 - import io . realm . RealmList ; 
 - import io . realm . RealmTableOrViewList ; 
 - 
 - public class RealmListTest extends AndroidTestCase { 
 - 
 - private Realm realm ; 
 - 
 - @ Override 
 - public void setUp ( ) throws Exception { 
 - super . setUp ( ) ; 
 - 
 - realm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; 
 - 
 - realm . clear ( ) ; 
 - 
 - } 
 - 
 - public void addObjectsToRealm ( ) { 
 - realm . beginTransaction ( ) ; 
 - 
 - for ( int i = 0 ; i < 10 ; i + + ) { 
 - AllColumns allColumns = new AllColumns ( ) ; 
 - 
 - allColumns . setColumnString ( " dsfs " ) ; 
 - allColumns . setColumnLong ( i ) ; 
 - allColumns . setColumnFloat ( 1 . 1F ) ; 
 - allColumns . setColumnDouble ( 1 . 1 ) ; 
 - allColumns . setColumnBoolean ( true ) ; 
 - allColumns . setColumnDate ( new Date ( ) ) ; 
 - allColumns . setColumnBinary ( new byte [ 20 ] ) ; 
 - 
 - User user = new User ( ) ; 
 - user . setId ( i ) ; 
 - user . setName ( " Test User " ) ; 
 - user . setEmail ( " user @ test . com " ) ; 
 - 
 - allColumns . setColumnRealmObject ( user ) ; 
 - 
 - realm . add ( allColumns ) ; 
 - } 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - } 
 - 
 - public void testAddObject ( ) { 
 - 
 - AllColumns allColumns = new AllColumns ( ) ; 
 - 
 - allColumns . setColumnString ( " dsfs " ) ; 
 - allColumns . setColumnLong ( 1 ) ; 
 - allColumns . setColumnFloat ( 1 . 1F ) ; 
 - allColumns . setColumnDouble ( 1 . 1 ) ; 
 - allColumns . setColumnBoolean ( true ) ; 
 - allColumns . setColumnDate ( new Date ( ) ) ; 
 - allColumns . setColumnBinary ( new byte [ 20 ] ) ; 
 - 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - RealmTableOrViewList < AllColumns > list = realm . allObjects ( AllColumns . class ) ; 
 - 
 - assertEquals ( 0 , list . size ( ) ) ; 
 - 
 - try { 
 - list . add ( allColumns ) ; 
 - fail ( " Should throw UnsupportedOperationException " ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 - } catch ( UnsupportedOperationException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - 
 - } 
 - 
 - public void testAllObjects ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - assertEquals ( 10 , allColumnsList . size ( ) ) ; 
 - 
 - } 
 - 
 - public void testGetObjects ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - assertEquals ( 5 , allColumnsList . get ( 5 ) . getColumnLong ( ) ) ; 
 - 
 - } 
 - 
 - public void testGetFirstObject ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - assertEquals ( 0 , allColumnsList . first ( ) . getColumnLong ( ) ) ; 
 - 
 - } 
 - 
 - public void testGetLastObject ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - assertEquals ( 9 , allColumnsList . last ( ) . getColumnLong ( ) ) ; 
 - 
 - } 
 - 
 - public void testRemoveByIndex ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - try { 
 - allColumnsList . remove ( 5 ) ; 
 - fail ( " Should throw UnsupportedOperationException " ) ; 
 - realm . commitTransaction ( ) ; 
 - } catch ( UnsupportedOperationException e ) { 
 - } 
 - 
 - } 
 - 
 - public void testRemoveByObject ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - RealmList < AllColumns > allColumnsList = realm . allObjects ( AllColumns . class ) ; 
 - 
 - try { 
 - 
 - allColumnsList . remove ( allColumnsList . get ( 5 ) ) ; 
 - fail ( " Should throw UnsupportedOperationException " ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 - } catch ( UnsupportedOperationException e ) { 
 - } 
 - 
 - } 
 - 
 - public void testQuery ( ) { 
 - 
 - addObjectsToRealm ( ) ; 
 - 
 - RealmList all = realm . where ( AllColumns . class ) . greaterThan ( " columnlong " , 0 ) . findAll ( ) ; 
 - 
 - assertEquals ( 9 , all . size ( ) ) ; 
 - 
 - RealmList result = all . where ( ) . lessThan ( " columnlong " , 5 ) . findAll ( ) ; 
 - 
 - assertEquals ( 4 , result . size ( ) ) ; 
 - 
 - } 
 - 
 - } 
 - * / 
 diff - - git a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java b / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java 
 deleted file mode 100644 
 index a886cd8 . . 0000000 
 - - - a / realm / src / androidTest / java / io / realm / tests / api / RealmTest . java 
 + + + / dev / null 
 @ @ - 1 , 267 + 0 , 0 @ @ 
 - / * 
 - * Copyright 2014 Realm Inc . 
 - * 
 - * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 - * you may not use this file except in compliance with the License . 
 - * You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - 
 - / * TODO : translate to new object syntax 
 - 
 - 
 - package io . realm . tests . typed ; 
 - 
 - import android . test . AndroidTestCase ; 
 - 
 - import java . util . Date ; 
 - 
 - import io . realm . tests . typed . entities . AllColumns ; 
 - import io . realm . tests . typed . entities . Dog ; 
 - import io . realm . tests . typed . entities . User ; 
 - import io . realm . Realm ; 
 - import io . realm . RealmArrayList ; 
 - import io . realm . RealmChangeListener ; 
 - import io . realm . RealmList ; 
 - 
 - 
 - public class RealmTest extends AndroidTestCase { 
 - 
 - private Realm realm ; 
 - 
 - @ Override 
 - public void setUp ( ) throws Exception { 
 - realm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; 
 - 
 - realm . clear ( ) ; 
 - } 
 - 
 - 
 - public void realm ( ) { 
 - 
 - realm . addChangeListener ( new RealmChangeListener ( ) { 
 - @ Override 
 - public void onChange ( ) { 
 - System . out . println ( " Realm changed " ) ; 
 - } 
 - } ) ; 
 - 
 - try { 
 - realm . beginTransaction ( ) ; 
 - 
 - / / Insert 
 - for ( int i = 0 ; i < 120 ; i + + ) { 
 - 
 - User user = realm . getInstance ( User . class ) ; 
 - 
 - user . setId ( i ) ; 
 - user . setName ( " Rasmus " ) ; 
 - user . setEmail ( " ra @ realm . io " ) ; 
 - 
 - user . setId ( 10 ) ; 
 - 
 - } 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - } catch ( Throwable t ) { 
 - t . printStackTrace ( ) ; 
 - } 
 - 
 - RealmList < User > users = realm . where ( User . class ) . findAll ( ) ; 
 - 
 - 
 - / / Get 
 - User user1 = users . get ( 100 ) ; 
 - assertEquals ( " Rasmus " , user1 . getName ( ) ) ; 
 - 
 - 
 - try { 
 - 
 - realm . beginTransaction ( ) ; 
 - users = realm . where ( User . class ) . findAll ( ) ; 
 - user1 = users . get ( 100 ) ; 
 - 
 - user1 . setName ( " TestName " ) ; 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - } catch ( Throwable t ) { 
 - } 
 - 
 - users = realm . where ( User . class ) . findAll ( ) ; 
 - 
 - / / Get 
 - user1 = users . get ( 100 ) ; 
 - 
 - assertEquals ( " TestName " , user1 . getName ( ) ) ; 
 - 
 - assertEquals ( 120 , users . size ( ) ) ; 
 - 
 - / / Iterable 
 - for ( User user : users ) { 
 - System . out . println ( user . getId ( ) ) ; 
 - } 
 - 
 - 
 - 
 - realm . beginTransaction ( ) ; 
 - users = realm . where ( User . class ) . findAll ( ) ; 
 - user1 = users . get ( 100 ) ; 
 - user1 . setId ( 100 ) ; 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - 
 - 
 - / / Query 
 - RealmList < User > results = realm . where ( User . class ) . equalTo ( " id " , 10 ) . findAll ( ) ; 
 - 
 - assertEquals ( 119 , results . size ( ) ) ; 
 - assertEquals ( 10 , results . get ( 0 ) . getId ( ) ) ; 
 - 
 - } 
 - 
 - 
 - public void testCreate ( ) { 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - AllColumns obj = realm . getInstance ( AllColumns . class ) ; 
 - 
 - obj . setColumnString ( " dsfs " ) ; 
 - obj . setColumnLong ( 1 ) ; 
 - obj . setColumnFloat ( 1 . 1F ) ; 
 - obj . setColumnDouble ( 1 . 1 ) ; 
 - obj . setColumnBoolean ( true ) ; 
 - obj . setColumnDate ( new Date ( ) ) ; 
 - obj . setColumnBinary ( new byte [ 20 ] ) ; 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - RealmList < AllColumns > result = realm . where ( AllColumns . class ) . findAll ( ) ; 
 - 
 - assertEquals ( 1 , result . size ( ) ) ; 
 - 
 - } 
 - 
 - public void testAdd ( ) { 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - AllColumns obj = new AllColumns ( ) ; 
 - 
 - obj . setColumnString ( " dsfs " ) ; 
 - obj . setColumnLong ( 1 ) ; 
 - obj . setColumnFloat ( 1 . 1F ) ; 
 - obj . setColumnDouble ( 1 . 1 ) ; 
 - obj . setColumnBoolean ( true ) ; 
 - obj . setColumnDate ( new Date ( ) ) ; 
 - obj . setColumnBinary ( new byte [ 20 ] ) ; 
 - 
 - User user = new User ( ) ; 
 - user . setName ( " Rasmus " ) ; 
 - user . setEmail ( " ra @ realm . io " ) ; 
 - user . setId ( 0 ) ; 
 - 
 - obj . setColumnRealmObject ( user ) ; 
 - 
 - realm . add ( obj ) ; 
 - 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - assertEquals ( 1 , realm . allObjects ( AllColumns . class ) . size ( ) ) ; 
 - assertEquals ( 1 , realm . allObjects ( User . class ) . size ( ) ) ; 
 - 
 - } 
 - 
 - public void testLinkList ( ) { 
 - 
 - User user1 = new User ( ) ; 
 - user1 . setName ( " Rasmus " ) ; 
 - user1 . setEmail ( " ra @ realm . io " ) ; 
 - user1 . setId ( 0 ) ; 
 - 
 - User user2 = new User ( ) ; 
 - user2 . setName ( " Morten " ) ; 
 - user2 . setEmail ( " mk @ realm . io " ) ; 
 - user2 . setId ( 1 ) ; 
 - 
 - RealmList < User > users = new RealmArrayList < User > ( ) ; 
 - users . add ( user1 ) ; 
 - users . add ( user2 ) ; 
 - 
 - assertEquals ( false , realm . contains ( Dog . class ) ) ; 
 - assertEquals ( false , realm . contains ( User . class ) ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - 
 - Dog dog = realm . getInstance ( Dog . class ) ; 
 - dog . setName ( " Fido " ) ; 
 - dog . setOwners ( users ) ; 
 - 
 - realm . commitTransaction ( ) ; 
 - 
 - Dog fido = realm . allObjects ( Dog . class ) . first ( ) ; 
 - 
 - assertEquals ( " Fido " , fido . getName ( ) ) ; 
 - 
 - RealmList < User > owners = fido . getOwners ( ) ; 
 - 
 - assertEquals ( " Rasmus " , owners . get ( 0 ) . getName ( ) ) ; 
 - 
 - 
 - 
 - 
 - assertEquals ( 1 , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 - assertEquals ( 2 , realm . allObjects ( User . class ) . size ( ) ) ; 
 - 
 - 
 - Dog vuf = new Dog ( ) ; 
 - vuf . setName ( " Vuf " ) ; 
 - vuf . getOwners ( ) . add ( user1 ) ; 
 - 
 - realm . beginTransaction ( ) ; 
 - realm . add ( vuf ) ; 
 - realm . commitTransaction ( ) ; 
 - 
 - assertEquals ( 2 , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 - assertEquals ( 2 , realm . allObjects ( User . class ) . size ( ) ) ; 
 - 
 - } 
 - 
 - public void testMigration ( ) { 
 - * / 
 - / * 
 - realm . ensureRealmAtVersion ( 2 , new RealmMigration ( ) { 
 - @ Override 
 - public void execute ( Realm realm , int version ) { 
 - 
 - Table table = realm . getTable ( User . class ) ; 
 - 
 - if ( realm . getVersion ( ) < 1 ) { 
 - table . addColumn ( ColumnType . STRING , " newStringCol " ) ; 
 - } 
 - 
 - if ( realm . getVersion ( ) < 2 ) { 
 - table . removeColumn ( table . getColumnIndex ( " newStringCol " ) ) ; 
 - } 
 - 
 - realm . setVersion ( version ) ; 
 - 
 - } 
 - } ) ; 
 - * / / * 
 - 
 - } 
 - 
 - } 
 - * /
