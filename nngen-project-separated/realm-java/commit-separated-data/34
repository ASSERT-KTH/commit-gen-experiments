BLEU SCORE: 0.010122231330332757

TEST MSG: Optimizing the methods ' copyFromRealm ' , ' copyToRealmOrUpdate ' and ' copyToRealm ' using a List with initialCapacity
GENERATED MSG: Includes fix in case of re - instantiation

TEST DIFF (one line): diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> index d6f25db . . c6713a7 100644 <nl> - - - a / realm / realm - library / src / main / java / io / realm / Realm . java <nl> + + + b / realm / realm - library / src / main / java / io / realm / Realm . java <nl> @ @ - 1057 , 8 + 1057 , 13 @ @ public class Realm extends BaseRealm { <nl> if ( objects = = null ) { <nl> return new ArrayList < > ( ) ; <nl> } <nl> + ArrayList realmObjects ; <nl> + if ( objects instanceof Collection ) { <nl> + realmObjects = new ArrayList < > ( ( ( Collection ) objects ) . size ( ) ) ; <nl> + } else { <nl> + realmObjects = new ArrayList < > ( ) ; <nl> + } <nl> Map < RealmModel , RealmObjectProxy > cache = new HashMap < > ( ) ; <nl> - ArrayList < E > realmObjects = new ArrayList < > ( ) ; <nl> for ( E object : objects ) { <nl> checkNotNullObject ( object ) ; <nl> realmObjects . add ( copyOrUpdate ( object , false , cache ) ) ; <nl> @ @ - 1228 , 8 + 1233 , 13 @ @ public class Realm extends BaseRealm { <nl> return new ArrayList < > ( 0 ) ; <nl> } <nl> <nl> + ArrayList realmObjects ; <nl> + if ( objects instanceof Collection ) { <nl> + realmObjects = new ArrayList < > ( ( ( Collection ) objects ) . size ( ) ) ; <nl> + } else { <nl> + realmObjects = new ArrayList < > ( ) ; <nl> + } <nl> Map < RealmModel , RealmObjectProxy > cache = new HashMap < > ( ) ; <nl> - ArrayList < E > realmObjects = new ArrayList < > ( ) ; <nl> for ( E object : objects ) { <nl> checkNotNullObject ( object ) ; <nl> realmObjects . add ( copyOrUpdate ( object , true , cache ) ) ; <nl> @ @ - 1287 , 7 + 1297 , 12 @ @ public class Realm extends BaseRealm { <nl> return new ArrayList < > ( 0 ) ; <nl> } <nl> <nl> - ArrayList < E > unmanagedObjects = new ArrayList < > ( ) ; <nl> + ArrayList unmanagedObjects ; <nl> + if ( realmObjects instanceof Collection ) { <nl> + unmanagedObjects = new ArrayList < > ( ( ( Collection ) realmObjects ) . size ( ) ) ; <nl> + } else { <nl> + unmanagedObjects = new ArrayList < > ( ) ; <nl> + } <nl> Map < RealmModel , RealmObjectProxy . CacheData < RealmModel > > listCache = new HashMap < > ( ) ; <nl> for ( E object : realmObjects ) { <nl> checkValidObjectForDetach ( object ) ;
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> index 66a1518 . . 482d48b 100644 <nl> - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java <nl> @ @ - 232 , 4 + 232 , 67 @ @ public class NotificationsTest extends AndroidTestCase { <nl> <nl> thread . join ( 1 ) ; <nl> } <nl> + <nl> + public void testAutoUpdateRealmResults ( ) { <nl> + final int TEST _ SIZE = 10 ; <nl> + final AtomicBoolean cantRun = new AtomicBoolean ( true ) ; <nl> + final AtomicInteger counter = new AtomicInteger ( 0 ) ; <nl> + <nl> + <nl> + Realm . deleteRealmFile ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + / / assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> + <nl> + Thread listenerThread = new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + Looper . prepare ( ) ; <nl> + Realm . deleteRealmFile ( getContext ( ) ) ; <nl> + Realm realm = Realm . getInstance ( getContext ( ) ) ; <nl> + RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; <nl> + assertEquals ( 0 , dogs . size ( ) ) ; <nl> + realm . addChangeListener ( new RealmChangeListener ( ) { <nl> + @ Override <nl> + public void onChange ( ) { <nl> + / / Re - instatiation on each notification is intentional <nl> + Realm r = Realm . getInstance ( getContext ( ) ) ; <nl> + counter . incrementAndGet ( ) ; <nl> + } <nl> + } ) ; <nl> + cantRun . set ( false ) ; <nl> + Looper . loop ( ) ; <nl> + } <nl> + } ; <nl> + listenerThread . start ( ) ; <nl> + <nl> + while ( cantRun . get ( ) ) { <nl> + try { <nl> + Thread . sleep ( 100 ) ; <nl> + } <nl> + catch ( InterruptedException ignored ) { <nl> + fail ( ) ; <nl> + } <nl> + } <nl> + try { <nl> + Thread . sleep ( 1000 ) ; <nl> + } catch ( InterruptedException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + <nl> + realm . beginTransaction ( ) ; <nl> + for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { <nl> + Dog dog = realm . createObject ( Dog . class ) ; <nl> + dog . setName ( " Rex " + i ) ; <nl> + } <nl> + realm . commitTransaction ( ) ; <nl> + assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; <nl> + <nl> + try { <nl> + listenerThread . join ( 2000 ) ; <nl> + } catch ( InterruptedException ignored ) { <nl> + fail ( ) ; <nl> + } <nl> + / / one for initTable and one for the commit <nl> + assertEquals ( 2 , counter . get ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java <nl> index 2cedd8d . . e80dec2 100644 <nl> - - - a / realm / src / main / java / io / realm / Realm . java <nl> + + + b / realm / src / main / java / io / realm / Realm . java <nl> @ @ - 363 , 6 + 363 , 8 @ @ public class Realm { <nl> realm = new Realm ( absolutePath , key , autoRefresh ) ; <nl> realms . put ( absolutePath , realm ) ; <nl> realmsCache . set ( realms ) ; <nl> + } else { <nl> + return realm ; <nl> } <nl> if ( validateSchema ) { <nl> Class < ? > validationClass ;

TEST DIFF:
diff - - git a / realm / realm - library / src / main / java / io / realm / Realm . java b / realm / realm - library / src / main / java / io / realm / Realm . java 
 index d6f25db . . c6713a7 100644 
 - - - a / realm / realm - library / src / main / java / io / realm / Realm . java 
 + + + b / realm / realm - library / src / main / java / io / realm / Realm . java 
 @ @ - 1057 , 8 + 1057 , 13 @ @ public class Realm extends BaseRealm { 
 if ( objects = = null ) { 
 return new ArrayList < > ( ) ; 
 } 
 + ArrayList realmObjects ; 
 + if ( objects instanceof Collection ) { 
 + realmObjects = new ArrayList < > ( ( ( Collection ) objects ) . size ( ) ) ; 
 + } else { 
 + realmObjects = new ArrayList < > ( ) ; 
 + } 
 Map < RealmModel , RealmObjectProxy > cache = new HashMap < > ( ) ; 
 - ArrayList < E > realmObjects = new ArrayList < > ( ) ; 
 for ( E object : objects ) { 
 checkNotNullObject ( object ) ; 
 realmObjects . add ( copyOrUpdate ( object , false , cache ) ) ; 
 @ @ - 1228 , 8 + 1233 , 13 @ @ public class Realm extends BaseRealm { 
 return new ArrayList < > ( 0 ) ; 
 } 
 
 + ArrayList realmObjects ; 
 + if ( objects instanceof Collection ) { 
 + realmObjects = new ArrayList < > ( ( ( Collection ) objects ) . size ( ) ) ; 
 + } else { 
 + realmObjects = new ArrayList < > ( ) ; 
 + } 
 Map < RealmModel , RealmObjectProxy > cache = new HashMap < > ( ) ; 
 - ArrayList < E > realmObjects = new ArrayList < > ( ) ; 
 for ( E object : objects ) { 
 checkNotNullObject ( object ) ; 
 realmObjects . add ( copyOrUpdate ( object , true , cache ) ) ; 
 @ @ - 1287 , 7 + 1297 , 12 @ @ public class Realm extends BaseRealm { 
 return new ArrayList < > ( 0 ) ; 
 } 
 
 - ArrayList < E > unmanagedObjects = new ArrayList < > ( ) ; 
 + ArrayList unmanagedObjects ; 
 + if ( realmObjects instanceof Collection ) { 
 + unmanagedObjects = new ArrayList < > ( ( ( Collection ) realmObjects ) . size ( ) ) ; 
 + } else { 
 + unmanagedObjects = new ArrayList < > ( ) ; 
 + } 
 Map < RealmModel , RealmObjectProxy . CacheData < RealmModel > > listCache = new HashMap < > ( ) ; 
 for ( E object : realmObjects ) { 
 checkValidObjectForDetach ( object ) ;

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / NotificationsTest . java b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 index 66a1518 . . 482d48b 100644 
 - - - a / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 + + + b / realm / src / androidTest / java / io / realm / NotificationsTest . java 
 @ @ - 232 , 4 + 232 , 67 @ @ public class NotificationsTest extends AndroidTestCase { 
 
 thread . join ( 1 ) ; 
 } 
 + 
 + public void testAutoUpdateRealmResults ( ) { 
 + final int TEST _ SIZE = 10 ; 
 + final AtomicBoolean cantRun = new AtomicBoolean ( true ) ; 
 + final AtomicInteger counter = new AtomicInteger ( 0 ) ; 
 + 
 + 
 + Realm . deleteRealmFile ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + / / assertEquals ( 0 , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 + 
 + Thread listenerThread = new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Looper . prepare ( ) ; 
 + Realm . deleteRealmFile ( getContext ( ) ) ; 
 + Realm realm = Realm . getInstance ( getContext ( ) ) ; 
 + RealmResults < Dog > dogs = realm . allObjects ( Dog . class ) ; 
 + assertEquals ( 0 , dogs . size ( ) ) ; 
 + realm . addChangeListener ( new RealmChangeListener ( ) { 
 + @ Override 
 + public void onChange ( ) { 
 + / / Re - instatiation on each notification is intentional 
 + Realm r = Realm . getInstance ( getContext ( ) ) ; 
 + counter . incrementAndGet ( ) ; 
 + } 
 + } ) ; 
 + cantRun . set ( false ) ; 
 + Looper . loop ( ) ; 
 + } 
 + } ; 
 + listenerThread . start ( ) ; 
 + 
 + while ( cantRun . get ( ) ) { 
 + try { 
 + Thread . sleep ( 100 ) ; 
 + } 
 + catch ( InterruptedException ignored ) { 
 + fail ( ) ; 
 + } 
 + } 
 + try { 
 + Thread . sleep ( 1000 ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + realm . beginTransaction ( ) ; 
 + for ( int i = 0 ; i < TEST _ SIZE ; i + + ) { 
 + Dog dog = realm . createObject ( Dog . class ) ; 
 + dog . setName ( " Rex " + i ) ; 
 + } 
 + realm . commitTransaction ( ) ; 
 + assertEquals ( TEST _ SIZE , realm . allObjects ( Dog . class ) . size ( ) ) ; 
 + 
 + try { 
 + listenerThread . join ( 2000 ) ; 
 + } catch ( InterruptedException ignored ) { 
 + fail ( ) ; 
 + } 
 + / / one for initTable and one for the commit 
 + assertEquals ( 2 , counter . get ( ) ) ; 
 + } 
 } 
 diff - - git a / realm / src / main / java / io / realm / Realm . java b / realm / src / main / java / io / realm / Realm . java 
 index 2cedd8d . . e80dec2 100644 
 - - - a / realm / src / main / java / io / realm / Realm . java 
 + + + b / realm / src / main / java / io / realm / Realm . java 
 @ @ - 363 , 6 + 363 , 8 @ @ public class Realm { 
 realm = new Realm ( absolutePath , key , autoRefresh ) ; 
 realms . put ( absolutePath , realm ) ; 
 realmsCache . set ( realms ) ; 
 + } else { 
 + return realm ; 
 } 
 if ( validateSchema ) { 
 Class < ? > validationClass ;
