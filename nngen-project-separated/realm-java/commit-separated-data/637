BLEU SCORE: 0.10682175159905853

TEST MSG: Add section about examples .
GENERATED MSG: Add gotchas to readme

TEST DIFF (one line): diff - - git a / README . md b / README . md <nl> index 64d240c . . 6a24fa1 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 133 , 6 + 133 , 12 @ @ This means that ` . / gradlew clean ` and ` . / gradlew cleanExamples ` will fail if ` as <nl> Note that IntelliJ [ does not support multiple projects in the same window ] ( https : / / youtrack . jetbrains . com / issue / IDEABKL - 6118 # ) <nl> so each sub - project must be opened in its own window . <nl> <nl> + # # Examples <nl> + <nl> + The ` . / examples ` folder contain a number of example projects showing how Realm can be used . If this is the first time you checkout or pull a new version of this repository to try the examples , you must call ` . / gradlew installRealmJava ` from the top - level directory first . Otherwise the examples will not compile as they depend on all Realm artifacts being installed in ` mavenLocal ( ) ` . <nl> + <nl> + Standalone examples can be [ downloaded from website ] ( https : / / realm . io / docs / java / latest / # getting - started ) . <nl> + <nl> # # Contributing <nl> <nl> See [ CONTRIBUTING . md ] ( CONTRIBUTING . md ) for more details !
NEAREST DIFF (one line): diff - - git a / README . md b / README . md <nl> index 834e5b4 . . c5f800e 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 76 , 12 + 76 , 24 @ @ That command will generate : <nl> * a jar file for the annotations processor <nl> <nl> # # # Other Commands <nl> + <nl> * ` . / gradlew tasks ` will show all the available tasks <nl> * ` . / gradlew javadoc ` will generate the Javadocs <nl> * ` . / gradlew monkeyExamples ` will run the monkey tests on all the examples <nl> <nl> Generating the Javadoc using the command above will report a large number of warnings . The Javadoc is generated , and we will fix the issue in the near future . <nl> <nl> + # # # Gotchas <nl> + <nl> + The repository is organized in four Gradle projects : <nl> + <nl> + * ` realm ` : it contains the actual library ( including the JNI layer ) , the annotations and the annotations processor . <nl> + * ` gradle - plugin ` : it contains the Gradle plugin . <nl> + * ` examples ` : it contains the example projects . This project directly depends on ` gradle - plugin ` which adds a dependency to the artifacts produced by ` realm ` . <nl> + * The root folder is another Gradle project and all it does is orchestrating the other jobs <nl> + <nl> + This means that ` . / gradlew clean ` and ` . / gradlew cleanExamples ` will fail if ` assembleExamples ` has not been executed first . <nl> + <nl> # # Contributing <nl> <nl> See [ CONTRIBUTING . md ] ( CONTRIBUTING . md ) for more details !

TEST DIFF:
diff - - git a / README . md b / README . md 
 index 64d240c . . 6a24fa1 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 133 , 6 + 133 , 12 @ @ This means that ` . / gradlew clean ` and ` . / gradlew cleanExamples ` will fail if ` as 
 Note that IntelliJ [ does not support multiple projects in the same window ] ( https : / / youtrack . jetbrains . com / issue / IDEABKL - 6118 # ) 
 so each sub - project must be opened in its own window . 
 
 + # # Examples 
 + 
 + The ` . / examples ` folder contain a number of example projects showing how Realm can be used . If this is the first time you checkout or pull a new version of this repository to try the examples , you must call ` . / gradlew installRealmJava ` from the top - level directory first . Otherwise the examples will not compile as they depend on all Realm artifacts being installed in ` mavenLocal ( ) ` . 
 + 
 + Standalone examples can be [ downloaded from website ] ( https : / / realm . io / docs / java / latest / # getting - started ) . 
 + 
 # # Contributing 
 
 See [ CONTRIBUTING . md ] ( CONTRIBUTING . md ) for more details !

NEAREST DIFF:
diff - - git a / README . md b / README . md 
 index 834e5b4 . . c5f800e 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 76 , 12 + 76 , 24 @ @ That command will generate : 
 * a jar file for the annotations processor 
 
 # # # Other Commands 
 + 
 * ` . / gradlew tasks ` will show all the available tasks 
 * ` . / gradlew javadoc ` will generate the Javadocs 
 * ` . / gradlew monkeyExamples ` will run the monkey tests on all the examples 
 
 Generating the Javadoc using the command above will report a large number of warnings . The Javadoc is generated , and we will fix the issue in the near future . 
 
 + # # # Gotchas 
 + 
 + The repository is organized in four Gradle projects : 
 + 
 + * ` realm ` : it contains the actual library ( including the JNI layer ) , the annotations and the annotations processor . 
 + * ` gradle - plugin ` : it contains the Gradle plugin . 
 + * ` examples ` : it contains the example projects . This project directly depends on ` gradle - plugin ` which adds a dependency to the artifacts produced by ` realm ` . 
 + * The root folder is another Gradle project and all it does is orchestrating the other jobs 
 + 
 + This means that ` . / gradlew clean ` and ` . / gradlew cleanExamples ` will fail if ` assembleExamples ` has not been executed first . 
 + 
 # # Contributing 
 
 See [ CONTRIBUTING . md ] ( CONTRIBUTING . md ) for more details !
