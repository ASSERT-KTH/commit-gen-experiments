BLEU SCORE: 0.01509869171115925

TEST MSG: reformatting RealmResultsTest
GENERATED MSG: Unit tests for Realm . java { WIP }

TEST DIFF (one line): diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> index c33f10d . . 705beb3 100644 <nl> - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public class RealmResultsTests { <nl> @ Rule <nl> public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; <nl> <nl> - private Realm realm ; <nl> + private Realm realm ; <nl> <nl> @ Before <nl> public void setUp ( ) { <nl> @ @ - 262 , 12 + 262 , 14 @ @ public class RealmResultsTests { <nl> try { <nl> allTypes . first ( ) ; <nl> fail ( ) ; <nl> - } catch ( ArrayIndexOutOfBoundsException ignored ) { } <nl> + } catch ( ArrayIndexOutOfBoundsException ignored ) { <nl> + } <nl> <nl> try { <nl> allTypes . last ( ) ; <nl> fail ( ) ; <nl> - } catch ( ArrayIndexOutOfBoundsException ignored ) { } <nl> + } catch ( ArrayIndexOutOfBoundsException ignored ) { <nl> + } <nl> } <nl> <nl> @ Test <nl> @ @ - 1032 , 7 + 1034 , 8 @ @ public class RealmResultsTests { <nl> realm . where ( AllTypes . class ) . findAllSorted ( " invalid " , <nl> Sort . DESCENDING ) ; <nl> fail ( ) ; <nl> - } catch ( IllegalArgumentException ignored ) { } <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } <nl> } <nl> <nl> @ Test <nl> @ @ - 1061 , 7 + 1064 , 8 @ @ public class RealmResultsTests { <nl> RealmResults < AllTypes > all = realm . allObjects ( AllTypes . class ) ; <nl> all . indexOf ( all . first ( ) ) ; <nl> fail ( ) ; <nl> - } catch ( NoSuchMethodError ignored ) { } <nl> + } catch ( NoSuchMethodError ignored ) { <nl> + } <nl> } <nl> <nl> @ Test <nl> @ @ - 1084 , 10 + 1088 , 8 @ @ public class RealmResultsTests { <nl> realm . beginTransaction ( ) ; <nl> list . first ( ) . setFieldStringNotNull ( null ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - finally { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } finally { <nl> realm . cancelTransaction ( ) ; <nl> } <nl> <nl> @ @ - 1096 , 10 + 1098 , 8 @ @ public class RealmResultsTests { <nl> realm . beginTransaction ( ) ; <nl> list . first ( ) . setFieldBytesNotNull ( null ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - finally { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } finally { <nl> realm . cancelTransaction ( ) ; <nl> } <nl> <nl> @ @ - 1108 , 10 + 1108 , 8 @ @ public class RealmResultsTests { <nl> realm . beginTransaction ( ) ; <nl> list . first ( ) . setFieldBooleanNotNull ( null ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - finally { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } finally { <nl> realm . cancelTransaction ( ) ; <nl> } <nl> <nl> @ @ - 1120 , 10 + 1118 , 8 @ @ public class RealmResultsTests { <nl> realm . beginTransaction ( ) ; <nl> list . first ( ) . setFieldBytesNotNull ( null ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - finally { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } finally { <nl> realm . cancelTransaction ( ) ; <nl> } <nl> <nl> @ @ - 1134 , 10 + 1130 , 8 @ @ public class RealmResultsTests { <nl> realm . beginTransaction ( ) ; <nl> list . first ( ) . setFieldFloatNotNull ( null ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - finally { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } finally { <nl> realm . cancelTransaction ( ) ; <nl> } <nl> <nl> @ @ - 1146 , 10 + 1140 , 8 @ @ public class RealmResultsTests { <nl> realm . beginTransaction ( ) ; <nl> list . first ( ) . setFieldDoubleNotNull ( null ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - finally { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } finally { <nl> realm . cancelTransaction ( ) ; <nl> } <nl> <nl> @ @ - 1158 , 10 + 1150 , 8 @ @ public class RealmResultsTests { <nl> realm . beginTransaction ( ) ; <nl> list . first ( ) . setFieldDateNotNull ( null ) ; <nl> fail ( ) ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) { <nl> - } <nl> - finally { <nl> + } catch ( IllegalArgumentException ignored ) { <nl> + } finally { <nl> realm . cancelTransaction ( ) ; <nl> } <nl> } <nl> @ @ - 1222 , 11 + 1212 , 13 @ @ public class RealmResultsTests { <nl> RealmResults < AllTypes > result = realm . where ( AllTypes . class ) . findAll ( ) ; <nl> <nl> try { / / noinspection deprecation <nl> - result . add ( null ) ; fail ( ) ; <nl> + result . add ( null ) ; <nl> + fail ( ) ; <nl> } catch ( UnsupportedOperationException ignored ) { <nl> } <nl> try { <nl> - result . set ( 0 , null ) ; fail ( ) ; <nl> + result . set ( 0 , null ) ; <nl> + fail ( ) ; <nl> } catch ( UnsupportedOperationException ignored ) { <nl> } <nl> } <nl> @ @ - 1406 , 7 + 1398 , 7 @ @ public class RealmResultsTests { <nl> } <nl> <nl> @ Test <nl> - public void distinct _ indexedLinkedFields ( ) { <nl> + public void distinct _ indexedLinkedFields ( ) { <nl> final long numberOfBlocks = 25 ; <nl> final long numberOfObjects = 10 ; / / must be greater than 1 <nl> populateForDistinct ( realm , numberOfBlocks , numberOfObjects , true ) ; <nl> @ @ - 1421 , 7 + 1413 , 7 @ @ public class RealmResultsTests { <nl> } <nl> <nl> @ Test <nl> - public void distinct _ notIndexedLinkedFields ( ) { <nl> + public void distinct _ notIndexedLinkedFields ( ) { <nl> final long numberOfBlocks = 25 ; <nl> final long numberOfObjects = 10 ; / / must be greater than 1 <nl> populateForDistinct ( realm , numberOfBlocks , numberOfObjects , true ) ; <nl> @ @ - 1614 , 7 + 1606 , 7 @ @ public class RealmResultsTests { <nl> final long numberOfObjects = 10 ; <nl> populateForDistinct ( realm , numberOfBlocks , numberOfObjects , false ) ; <nl> <nl> - try { <nl> + try { <nl> realm . where ( AnnotationIndexTypes . class ) . findAll ( ) . distinctAsync ( " doesNotExist " ) ; <nl> } catch ( IllegalArgumentException ignored ) { <nl> } <nl> @ @ - 1651 , 7 + 1643 , 7 @ @ public class RealmResultsTests { <nl> public void distinctAsync _ notIndexedLinkedFields ( ) { <nl> populateForDistinctInvalidTypesLinked ( realm ) ; <nl> <nl> - try { <nl> + try { <nl> realm . where ( AllJavaTypes . class ) . findAll ( ) . distinctAsync ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ BINARY ) ; <nl> } catch ( IllegalArgumentException ignored ) { <nl> }
NEAREST DIFF (one line): diff - - git a / realm / src / androidTest / java / io / realm / tests / api / TestRealm . java b / realm / src / androidTest / java / io / realm / tests / api / TestRealm . java <nl> new file mode 100644 <nl> index 0000000 . . 39692d8 <nl> - - - / dev / null <nl> + + + b / realm / src / androidTest / java / io / realm / tests / api / TestRealm . java <nl> @ @ - 0 , 0 + 1 , 225 @ @ <nl> + / * <nl> + * Copyright 2014 Realm Inc . <nl> + * <nl> + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + * you may not use this file except in compliance with the License . <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package io . realm . tests . api ; <nl> + <nl> + import android . test . AndroidTestCase ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . Date ; <nl> + <nl> + import io . realm . Realm ; <nl> + import io . realm . RealmObject ; <nl> + import io . realm . internal . SharedGroup ; <nl> + import io . realm . internal . Table ; <nl> + import io . realm . tests . api . entities . AllColumns ; <nl> + <nl> + public class TestRealm extends AndroidTestCase { <nl> + <nl> + / / Test setup methods : <nl> + private void setupSharedGroup ( ) { <nl> + Realm . setDefaultDurability ( SharedGroup . Durability . FULL ) ; <nl> + } <nl> + <nl> + private Realm getTestRealm ( ) { <nl> + setupSharedGroup ( ) ; <nl> + Realm testRealm = null ; <nl> + try { <nl> + testRealm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; <nl> + } catch ( IOException ex ) <nl> + { <nl> + fail ( " Unexpected exception while initializing test case : " + ex . getMessage ( ) ) ; <nl> + } <nl> + return testRealm ; <nl> + } <nl> + <nl> + private < E extends RealmObject > E getTestObject ( Realm realm , Class < E > clazz ) { <nl> + setupSharedGroup ( ) ; <nl> + E result = realm . create ( clazz ) ; <nl> + return result ; <nl> + } <nl> + <nl> + private void buildAllColumnsTestData ( Realm realm ) <nl> + { <nl> + realm . clear ( ) ; <nl> + realm . beginWrite ( ) ; <nl> + <nl> + AllColumns allColumns = getTestObject ( realm , AllColumns . class ) ; <nl> + allColumns . setColumnBoolean ( true ) ; <nl> + allColumns . setColumnBinary ( new byte [ ] { 1 , 2 , 3 } ) ; <nl> + allColumns . setColumnDate ( new Date ( ) ) ; <nl> + allColumns . setColumnDouble ( 3 . 1415 ) ; <nl> + allColumns . setColumnFloat ( 1 . 234567f ) ; <nl> + allColumns . setColumnString ( " test data " ) ; <nl> + allColumns . setColumnLong ( 45 ) ; <nl> + <nl> + allColumns = getTestObject ( realm , AllColumns . class ) ; <nl> + allColumns . setColumnBoolean ( false ) ; <nl> + allColumns . setColumnBinary ( new byte [ ] { 4 , 5 , 6 } ) ; <nl> + allColumns . setColumnDate ( new Date ( ) ) ; <nl> + allColumns . setColumnDouble ( 9999 . 99 ) ; <nl> + allColumns . setColumnFloat ( 0 . 1f ) ; <nl> + allColumns . setColumnString ( " more data " ) ; <nl> + allColumns . setColumnLong ( 46 ) ; <nl> + <nl> + realm . commit ( ) ; <nl> + } <nl> + <nl> + / / Test Realm . java API <nl> + <nl> + / / setDefaultDurability ( SharedGroup . Durability durability ) <nl> + public void testShouldSetDurabilityFull ( ) { <nl> + Realm . setDefaultDurability ( SharedGroup . Durability . FULL ) ; <nl> + } <nl> + <nl> + public void testShouldSetDurabilityFullByName ( ) { <nl> + Realm . setDefaultDurability ( SharedGroup . Durability . valueOf ( " FULL " ) ) ; <nl> + } <nl> + <nl> + public void testShouldSetDurabilityWithInvalidNameFail ( ) { <nl> + try { <nl> + Realm . setDefaultDurability ( SharedGroup . Durability . valueOf ( " INVALID " ) ) ; <nl> + fail ( " Expected IllegalArgumentException when providing illegal Durability value " ) ; <nl> + } catch ( IllegalArgumentException ioe ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + public void testShouldSetDurabilityMemOnly ( ) { <nl> + Realm . setDefaultDurability ( SharedGroup . Durability . MEM _ ONLY ) ; <nl> + } <nl> + <nl> + / / Realm Constructors <nl> + public void testShouldCreateRealm ( ) { <nl> + setupSharedGroup ( ) ; <nl> + <nl> + try { <nl> + Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; <nl> + } catch ( Exception ex ) { <nl> + fail ( " Unexpected Exception " + ex ) ; <nl> + } <nl> + } <nl> + <nl> + public void testShouldFailCreateRealmWithNullDir ( ) { <nl> + setupSharedGroup ( ) ; <nl> + <nl> + try { <nl> + Realm realm = new Realm ( null ) ; <nl> + fail ( " Expected IOException " ) ; <nl> + } catch ( IOException ioe ) { <nl> + / / } catch ( NoClassDefFoundError ncdf ) { <nl> + } catch ( Exception ex ) { <nl> + fail ( " Unexpected exception : " + ex ) ; <nl> + } <nl> + } <nl> + <nl> + public void testShouldFailWithNullFileName ( ) { <nl> + setupSharedGroup ( ) ; <nl> + <nl> + try { <nl> + Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) , null ) ; <nl> + fail ( " Expected IOException " ) ; <nl> + } catch ( IOException ioe ) { <nl> + / / } catch ( NullPointerException npe ) { <nl> + } catch ( Exception ex ) { <nl> + fail ( " Unexpected exception : " + ex . toString ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / / Table creation and manipulation <nl> + <nl> + public void testShouldGetTable ( ) { <nl> + Realm testRealm = getTestRealm ( ) ; <nl> + <nl> + Table table = testRealm . getTable ( AllColumns . class ) ; <nl> + assertNotNull ( " getTable is returning a null Table object " , table ) ; <nl> + } <nl> + <nl> + public void testShouldContainTable ( ) { <nl> + Realm testRealm = getTestRealm ( ) ; <nl> + testRealm . getTable ( AllColumns . class ) ; <nl> + boolean testIfContained = testRealm . contains ( AllColumns . class ) ; <nl> + assertTrue ( " contains returns false for newly created table " , testIfContained ) ; <nl> + } <nl> + <nl> + public void testShouldCreateObject ( ) { <nl> + Realm testRealm = getTestRealm ( ) ; <nl> + <nl> + RealmObject allColumns = testRealm . create ( AllColumns . class ) ; <nl> + assertTrue ( " Realm . create is returning wrong object type " , allColumns instanceof AllColumns ) ; <nl> + } <nl> + <nl> + public void testShouldRemoveRow ( ) { <nl> + Realm realm = getTestRealm ( ) ; <nl> + buildAllColumnsTestData ( realm ) ; <nl> + <nl> + realm . remove ( AllColumns . class , 0 ) ; <nl> + } <nl> + <nl> + public void testShouldGetObject ( ) { <nl> + Realm realm = getTestRealm ( ) ; <nl> + buildAllColumnsTestData ( realm ) ; <nl> + <nl> + RealmObject allColumns = realm . get ( AllColumns . class , 0 ) ; <nl> + assertTrue ( " Realm . get is returning wrong object type " , allColumns instanceof AllColumns ) ; <nl> + } <nl> + <nl> + / / < E extends RealmObject > RealmQuery < E > where ( Class < E > clazz ) <nl> + public void testShouldReturnResultSet ( ) { <nl> + } <nl> + <nl> + <nl> + public void testShouldReturnTableOrViewList ( ) { <nl> + Realm realm = getTestRealm ( ) ; <nl> + buildAllColumnsTestData ( realm ) ; <nl> + <nl> + <nl> + realm . allObjects ( AllColumns . class ) ; <nl> + } <nl> + <nl> + / / void ensureRealmAtVersion ( int version , RealmMigration migration ) <nl> + public void testShouldVerifyVersion ( ) { <nl> + } <nl> + <nl> + <nl> + / / Notifications <nl> + <nl> + / / void addChangeListener ( RealmChangeListener listener ) <nl> + <nl> + / / void removeChangeListener ( RealmChangeListener listener ) <nl> + <nl> + / / void removeAllChangeListeners ( ) <nl> + <nl> + / / boolean hasChanged ( ) <nl> + <nl> + / / Transactions <nl> + <nl> + / / void refresh ( ) <nl> + <nl> + <nl> + / / void beginWrite ( ) <nl> + <nl> + / / void commit ( ) <nl> + <nl> + / / void clear ( Class < ? > classSpec ) <nl> + <nl> + / / void clear ( ) <nl> + <nl> + / / int getVersion ( ) <nl> + <nl> + / / void setVersion ( int version ) <nl> + <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 index c33f10d . . 705beb3 100644 
 - - - a / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 + + + b / realm / realm - library / src / androidTest / java / io / realm / RealmResultsTests . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public class RealmResultsTests { 
 @ Rule 
 public final RunInLooperThread looperThread = new RunInLooperThread ( ) ; 
 
 - private Realm realm ; 
 + private Realm realm ; 
 
 @ Before 
 public void setUp ( ) { 
 @ @ - 262 , 12 + 262 , 14 @ @ public class RealmResultsTests { 
 try { 
 allTypes . first ( ) ; 
 fail ( ) ; 
 - } catch ( ArrayIndexOutOfBoundsException ignored ) { } 
 + } catch ( ArrayIndexOutOfBoundsException ignored ) { 
 + } 
 
 try { 
 allTypes . last ( ) ; 
 fail ( ) ; 
 - } catch ( ArrayIndexOutOfBoundsException ignored ) { } 
 + } catch ( ArrayIndexOutOfBoundsException ignored ) { 
 + } 
 } 
 
 @ Test 
 @ @ - 1032 , 7 + 1034 , 8 @ @ public class RealmResultsTests { 
 realm . where ( AllTypes . class ) . findAllSorted ( " invalid " , 
 Sort . DESCENDING ) ; 
 fail ( ) ; 
 - } catch ( IllegalArgumentException ignored ) { } 
 + } catch ( IllegalArgumentException ignored ) { 
 + } 
 } 
 
 @ Test 
 @ @ - 1061 , 7 + 1064 , 8 @ @ public class RealmResultsTests { 
 RealmResults < AllTypes > all = realm . allObjects ( AllTypes . class ) ; 
 all . indexOf ( all . first ( ) ) ; 
 fail ( ) ; 
 - } catch ( NoSuchMethodError ignored ) { } 
 + } catch ( NoSuchMethodError ignored ) { 
 + } 
 } 
 
 @ Test 
 @ @ - 1084 , 10 + 1088 , 8 @ @ public class RealmResultsTests { 
 realm . beginTransaction ( ) ; 
 list . first ( ) . setFieldStringNotNull ( null ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 - } 
 - finally { 
 + } catch ( IllegalArgumentException ignored ) { 
 + } finally { 
 realm . cancelTransaction ( ) ; 
 } 
 
 @ @ - 1096 , 10 + 1098 , 8 @ @ public class RealmResultsTests { 
 realm . beginTransaction ( ) ; 
 list . first ( ) . setFieldBytesNotNull ( null ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 - } 
 - finally { 
 + } catch ( IllegalArgumentException ignored ) { 
 + } finally { 
 realm . cancelTransaction ( ) ; 
 } 
 
 @ @ - 1108 , 10 + 1108 , 8 @ @ public class RealmResultsTests { 
 realm . beginTransaction ( ) ; 
 list . first ( ) . setFieldBooleanNotNull ( null ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 - } 
 - finally { 
 + } catch ( IllegalArgumentException ignored ) { 
 + } finally { 
 realm . cancelTransaction ( ) ; 
 } 
 
 @ @ - 1120 , 10 + 1118 , 8 @ @ public class RealmResultsTests { 
 realm . beginTransaction ( ) ; 
 list . first ( ) . setFieldBytesNotNull ( null ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 - } 
 - finally { 
 + } catch ( IllegalArgumentException ignored ) { 
 + } finally { 
 realm . cancelTransaction ( ) ; 
 } 
 
 @ @ - 1134 , 10 + 1130 , 8 @ @ public class RealmResultsTests { 
 realm . beginTransaction ( ) ; 
 list . first ( ) . setFieldFloatNotNull ( null ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 - } 
 - finally { 
 + } catch ( IllegalArgumentException ignored ) { 
 + } finally { 
 realm . cancelTransaction ( ) ; 
 } 
 
 @ @ - 1146 , 10 + 1140 , 8 @ @ public class RealmResultsTests { 
 realm . beginTransaction ( ) ; 
 list . first ( ) . setFieldDoubleNotNull ( null ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 - } 
 - finally { 
 + } catch ( IllegalArgumentException ignored ) { 
 + } finally { 
 realm . cancelTransaction ( ) ; 
 } 
 
 @ @ - 1158 , 10 + 1150 , 8 @ @ public class RealmResultsTests { 
 realm . beginTransaction ( ) ; 
 list . first ( ) . setFieldDateNotNull ( null ) ; 
 fail ( ) ; 
 - } 
 - catch ( IllegalArgumentException ignored ) { 
 - } 
 - finally { 
 + } catch ( IllegalArgumentException ignored ) { 
 + } finally { 
 realm . cancelTransaction ( ) ; 
 } 
 } 
 @ @ - 1222 , 11 + 1212 , 13 @ @ public class RealmResultsTests { 
 RealmResults < AllTypes > result = realm . where ( AllTypes . class ) . findAll ( ) ; 
 
 try { / / noinspection deprecation 
 - result . add ( null ) ; fail ( ) ; 
 + result . add ( null ) ; 
 + fail ( ) ; 
 } catch ( UnsupportedOperationException ignored ) { 
 } 
 try { 
 - result . set ( 0 , null ) ; fail ( ) ; 
 + result . set ( 0 , null ) ; 
 + fail ( ) ; 
 } catch ( UnsupportedOperationException ignored ) { 
 } 
 } 
 @ @ - 1406 , 7 + 1398 , 7 @ @ public class RealmResultsTests { 
 } 
 
 @ Test 
 - public void distinct _ indexedLinkedFields ( ) { 
 + public void distinct _ indexedLinkedFields ( ) { 
 final long numberOfBlocks = 25 ; 
 final long numberOfObjects = 10 ; / / must be greater than 1 
 populateForDistinct ( realm , numberOfBlocks , numberOfObjects , true ) ; 
 @ @ - 1421 , 7 + 1413 , 7 @ @ public class RealmResultsTests { 
 } 
 
 @ Test 
 - public void distinct _ notIndexedLinkedFields ( ) { 
 + public void distinct _ notIndexedLinkedFields ( ) { 
 final long numberOfBlocks = 25 ; 
 final long numberOfObjects = 10 ; / / must be greater than 1 
 populateForDistinct ( realm , numberOfBlocks , numberOfObjects , true ) ; 
 @ @ - 1614 , 7 + 1606 , 7 @ @ public class RealmResultsTests { 
 final long numberOfObjects = 10 ; 
 populateForDistinct ( realm , numberOfBlocks , numberOfObjects , false ) ; 
 
 - try { 
 + try { 
 realm . where ( AnnotationIndexTypes . class ) . findAll ( ) . distinctAsync ( " doesNotExist " ) ; 
 } catch ( IllegalArgumentException ignored ) { 
 } 
 @ @ - 1651 , 7 + 1643 , 7 @ @ public class RealmResultsTests { 
 public void distinctAsync _ notIndexedLinkedFields ( ) { 
 populateForDistinctInvalidTypesLinked ( realm ) ; 
 
 - try { 
 + try { 
 realm . where ( AllJavaTypes . class ) . findAll ( ) . distinctAsync ( AllJavaTypes . FIELD _ OBJECT + " . " + AllJavaTypes . FIELD _ BINARY ) ; 
 } catch ( IllegalArgumentException ignored ) { 
 }

NEAREST DIFF:
diff - - git a / realm / src / androidTest / java / io / realm / tests / api / TestRealm . java b / realm / src / androidTest / java / io / realm / tests / api / TestRealm . java 
 new file mode 100644 
 index 0000000 . . 39692d8 
 - - - / dev / null 
 + + + b / realm / src / androidTest / java / io / realm / tests / api / TestRealm . java 
 @ @ - 0 , 0 + 1 , 225 @ @ 
 + / * 
 + * Copyright 2014 Realm Inc . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package io . realm . tests . api ; 
 + 
 + import android . test . AndroidTestCase ; 
 + 
 + import java . io . IOException ; 
 + import java . util . Date ; 
 + 
 + import io . realm . Realm ; 
 + import io . realm . RealmObject ; 
 + import io . realm . internal . SharedGroup ; 
 + import io . realm . internal . Table ; 
 + import io . realm . tests . api . entities . AllColumns ; 
 + 
 + public class TestRealm extends AndroidTestCase { 
 + 
 + / / Test setup methods : 
 + private void setupSharedGroup ( ) { 
 + Realm . setDefaultDurability ( SharedGroup . Durability . FULL ) ; 
 + } 
 + 
 + private Realm getTestRealm ( ) { 
 + setupSharedGroup ( ) ; 
 + Realm testRealm = null ; 
 + try { 
 + testRealm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; 
 + } catch ( IOException ex ) 
 + { 
 + fail ( " Unexpected exception while initializing test case : " + ex . getMessage ( ) ) ; 
 + } 
 + return testRealm ; 
 + } 
 + 
 + private < E extends RealmObject > E getTestObject ( Realm realm , Class < E > clazz ) { 
 + setupSharedGroup ( ) ; 
 + E result = realm . create ( clazz ) ; 
 + return result ; 
 + } 
 + 
 + private void buildAllColumnsTestData ( Realm realm ) 
 + { 
 + realm . clear ( ) ; 
 + realm . beginWrite ( ) ; 
 + 
 + AllColumns allColumns = getTestObject ( realm , AllColumns . class ) ; 
 + allColumns . setColumnBoolean ( true ) ; 
 + allColumns . setColumnBinary ( new byte [ ] { 1 , 2 , 3 } ) ; 
 + allColumns . setColumnDate ( new Date ( ) ) ; 
 + allColumns . setColumnDouble ( 3 . 1415 ) ; 
 + allColumns . setColumnFloat ( 1 . 234567f ) ; 
 + allColumns . setColumnString ( " test data " ) ; 
 + allColumns . setColumnLong ( 45 ) ; 
 + 
 + allColumns = getTestObject ( realm , AllColumns . class ) ; 
 + allColumns . setColumnBoolean ( false ) ; 
 + allColumns . setColumnBinary ( new byte [ ] { 4 , 5 , 6 } ) ; 
 + allColumns . setColumnDate ( new Date ( ) ) ; 
 + allColumns . setColumnDouble ( 9999 . 99 ) ; 
 + allColumns . setColumnFloat ( 0 . 1f ) ; 
 + allColumns . setColumnString ( " more data " ) ; 
 + allColumns . setColumnLong ( 46 ) ; 
 + 
 + realm . commit ( ) ; 
 + } 
 + 
 + / / Test Realm . java API 
 + 
 + / / setDefaultDurability ( SharedGroup . Durability durability ) 
 + public void testShouldSetDurabilityFull ( ) { 
 + Realm . setDefaultDurability ( SharedGroup . Durability . FULL ) ; 
 + } 
 + 
 + public void testShouldSetDurabilityFullByName ( ) { 
 + Realm . setDefaultDurability ( SharedGroup . Durability . valueOf ( " FULL " ) ) ; 
 + } 
 + 
 + public void testShouldSetDurabilityWithInvalidNameFail ( ) { 
 + try { 
 + Realm . setDefaultDurability ( SharedGroup . Durability . valueOf ( " INVALID " ) ) ; 
 + fail ( " Expected IllegalArgumentException when providing illegal Durability value " ) ; 
 + } catch ( IllegalArgumentException ioe ) 
 + { 
 + } 
 + } 
 + 
 + public void testShouldSetDurabilityMemOnly ( ) { 
 + Realm . setDefaultDurability ( SharedGroup . Durability . MEM _ ONLY ) ; 
 + } 
 + 
 + / / Realm Constructors 
 + public void testShouldCreateRealm ( ) { 
 + setupSharedGroup ( ) ; 
 + 
 + try { 
 + Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) ) ; 
 + } catch ( Exception ex ) { 
 + fail ( " Unexpected Exception " + ex ) ; 
 + } 
 + } 
 + 
 + public void testShouldFailCreateRealmWithNullDir ( ) { 
 + setupSharedGroup ( ) ; 
 + 
 + try { 
 + Realm realm = new Realm ( null ) ; 
 + fail ( " Expected IOException " ) ; 
 + } catch ( IOException ioe ) { 
 + / / } catch ( NoClassDefFoundError ncdf ) { 
 + } catch ( Exception ex ) { 
 + fail ( " Unexpected exception : " + ex ) ; 
 + } 
 + } 
 + 
 + public void testShouldFailWithNullFileName ( ) { 
 + setupSharedGroup ( ) ; 
 + 
 + try { 
 + Realm realm = new Realm ( getContext ( ) . getFilesDir ( ) , null ) ; 
 + fail ( " Expected IOException " ) ; 
 + } catch ( IOException ioe ) { 
 + / / } catch ( NullPointerException npe ) { 
 + } catch ( Exception ex ) { 
 + fail ( " Unexpected exception : " + ex . toString ( ) ) ; 
 + } 
 + } 
 + 
 + / / Table creation and manipulation 
 + 
 + public void testShouldGetTable ( ) { 
 + Realm testRealm = getTestRealm ( ) ; 
 + 
 + Table table = testRealm . getTable ( AllColumns . class ) ; 
 + assertNotNull ( " getTable is returning a null Table object " , table ) ; 
 + } 
 + 
 + public void testShouldContainTable ( ) { 
 + Realm testRealm = getTestRealm ( ) ; 
 + testRealm . getTable ( AllColumns . class ) ; 
 + boolean testIfContained = testRealm . contains ( AllColumns . class ) ; 
 + assertTrue ( " contains returns false for newly created table " , testIfContained ) ; 
 + } 
 + 
 + public void testShouldCreateObject ( ) { 
 + Realm testRealm = getTestRealm ( ) ; 
 + 
 + RealmObject allColumns = testRealm . create ( AllColumns . class ) ; 
 + assertTrue ( " Realm . create is returning wrong object type " , allColumns instanceof AllColumns ) ; 
 + } 
 + 
 + public void testShouldRemoveRow ( ) { 
 + Realm realm = getTestRealm ( ) ; 
 + buildAllColumnsTestData ( realm ) ; 
 + 
 + realm . remove ( AllColumns . class , 0 ) ; 
 + } 
 + 
 + public void testShouldGetObject ( ) { 
 + Realm realm = getTestRealm ( ) ; 
 + buildAllColumnsTestData ( realm ) ; 
 + 
 + RealmObject allColumns = realm . get ( AllColumns . class , 0 ) ; 
 + assertTrue ( " Realm . get is returning wrong object type " , allColumns instanceof AllColumns ) ; 
 + } 
 + 
 + / / < E extends RealmObject > RealmQuery < E > where ( Class < E > clazz ) 
 + public void testShouldReturnResultSet ( ) { 
 + } 
 + 
 + 
 + public void testShouldReturnTableOrViewList ( ) { 
 + Realm realm = getTestRealm ( ) ; 
 + buildAllColumnsTestData ( realm ) ; 
 + 
 + 
 + realm . allObjects ( AllColumns . class ) ; 
 + } 
 + 
 + / / void ensureRealmAtVersion ( int version , RealmMigration migration ) 
 + public void testShouldVerifyVersion ( ) { 
 + } 
 + 
 + 
 + / / Notifications 
 + 
 + / / void addChangeListener ( RealmChangeListener listener ) 
 + 
 + / / void removeChangeListener ( RealmChangeListener listener ) 
 + 
 + / / void removeAllChangeListeners ( ) 
 + 
 + / / boolean hasChanged ( ) 
 + 
 + / / Transactions 
 + 
 + / / void refresh ( ) 
 + 
 + 
 + / / void beginWrite ( ) 
 + 
 + / / void commit ( ) 
 + 
 + / / void clear ( Class < ? > classSpec ) 
 + 
 + / / void clear ( ) 
 + 
 + / / int getVersion ( ) 
 + 
 + / / void setVersion ( int version ) 
 + 
 + } 
 \ No newline at end of file
