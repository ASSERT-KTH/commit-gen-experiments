BLEU SCORE: 0.02383853510228548

TEST MSG: Add getloadavg ( ) to OS X and Unix
GENERATED MSG: Fix change log entries

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 5661442 . . a0dbd74 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 47 , 6 + 47 , 7 @ @ Features <nl> * [ # 616 ] ( https : / / github . com / java - native - access / jna / pull / 616 ) : Allow access to base interfaces ( most important IDispatch ) via ProxyObject and improve binding by allowing to use dispId for the call - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 621 ] ( https : / / github . com / java - native - access / jna / pull / 621 ) : Added TYPEFLAGS - constants for ` wTypeFlags ` in ` com . sun . jna . platform . win32 . OaIdl . TYPEATTR ` - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . <nl> * [ # 625 ] ( https : / / github . com / java - native - access / jna / pull / 625 ) : Make conversion to / from java to / from VARIANT in ` com . sun . jna . platform . win32 . COM . util . Convert ` more flexible and dependable - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 639 ] ( https : / / github . com / java - native - access / jna / pull / 639 ) : Add getloadavg ( ) to OS X and Unix - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / SystemB . java b / contrib / platform / src / com / sun / jna / platform / mac / SystemB . java <nl> index a1d6b68 . . c4dfd7c 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / mac / SystemB . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / mac / SystemB . java <nl> @ @ - 168 , 6 + 168 , 15 @ @ public interface SystemB extends Library { <nl> * @ return the host ' s name port <nl> * / <nl> int mach _ host _ self ( ) ; <nl> + <nl> + / * * <nl> + * The mach _ task _ self system call returns the calling thread ' s task _ self <nl> + * port . It has an effect equivalent to receiving a send right for the task ' s <nl> + * kernel port . <nl> + * <nl> + * @ return the task ' s kernel port <nl> + * / <nl> + int mach _ task _ self ( ) ; <nl> <nl> / * * <nl> * The host _ page _ size function returns the page size for the given host . <nl> @ @ - 333 , 4 + 342 , 20 @ @ public interface SystemB extends Library { <nl> * / <nl> int host _ processor _ info ( int machPort , int flavor , IntByReference procCount , <nl> PointerByReference procInfo , IntByReference procInfoCount ) ; <nl> + <nl> + / * * <nl> + * The getloadavg ( ) function returns the number of processes in the system <nl> + * run queue averaged over various periods of time . Up to nelem samples are <nl> + * retrieved and assigned to successive elements of loadavg [ ] . The system <nl> + * imposes a maximum of 3 samples , representing averages over the last 1 , 5 , <nl> + * and 15 minutes , respectively . <nl> + * @ param loadavg <nl> + * An array of doubles which will be filled with the results <nl> + * @ param nelem <nl> + * Number of samples to return <nl> + * @ return If the load average was unobtainable , - 1 is returned ; otherwise , <nl> + * the number of samples actually retrieved is returned . <nl> + * @ see < A HREF = " https : / / www . freebsd . org / cgi / man . cgi ? query = getloadavg & sektion = 3 " > getloadavg ( 3 ) < / A > <nl> + * / <nl> + int getloadavg ( double [ ] loadavg , int nelem ) ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / LibCAPI . java b / contrib / platform / src / com / sun / jna / platform / unix / LibCAPI . java <nl> index 9418aba . . 8887012 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / unix / LibCAPI . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / unix / LibCAPI . java <nl> @ @ - 73 , 4 + 73 , 18 @ @ public interface LibCAPI extends Reboot , Resource { <nl> * @ see < A HREF = " https : / / www . freebsd . org / cgi / man . cgi ? query = setenv & sektion = 3 " > getenv ( 3 ) < / A > <nl> * / <nl> int unsetenv ( String name ) ; <nl> + <nl> + / * * <nl> + * The getloadavg ( ) function returns the number of processes in the system <nl> + * run queue averaged over various periods of time . Up to nelem samples are <nl> + * retrieved and assigned to successive elements of loadavg [ ] . The system <nl> + * imposes a maximum of 3 samples , representing averages over the last 1 , 5 , <nl> + * and 15 minutes , respectively . <nl> + * @ param loadavg An array of doubles which will be filled with the results <nl> + * @ param nelem Number of samples to return <nl> + * @ return If the load average was unobtainable , - 1 is returned ; otherwise , <nl> + * the number of samples actually retrieved is returned . <nl> + * @ see < A HREF = " https : / / www . freebsd . org / cgi / man . cgi ? query = getloadavg & sektion = 3 " > getloadavg ( 3 ) < / A > <nl> + * / <nl> + int getloadavg ( double [ ] loadavg , int nelem ) ; <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / mac / SystemBTest . java b / contrib / platform / test / com / sun / jna / platform / mac / SystemBTest . java <nl> index 1b11b5c . . 0ac161e 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / mac / SystemBTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / mac / SystemBTest . java <nl> @ @ - 152 , 7 + 152 , 23 @ @ public class SystemBTest extends TestCase { <nl> 	 	 assertEquals ( procCpuLoadInfo . getValue ( ) . getIntArray ( 0 , <nl> 	 	 	 	 procInfoCount . getValue ( ) ) . length , procInfoCount . getValue ( ) ) ; <nl> 	 } <nl> - <nl> + 	 <nl> + public void testMachPorts ( ) { <nl> + int machPort = SystemB . INSTANCE . mach _ host _ self ( ) ; <nl> + assertTrue ( machPort > 0 ) ; <nl> + machPort = SystemB . INSTANCE . mach _ task _ self ( ) ; <nl> + assertTrue ( machPort > 0 ) ; 	 <nl> + } <nl> + <nl> + public void testGetLoadAvg ( ) { <nl> + double [ ] loadavg = new double [ 3 ] ; <nl> + int retval = SystemB . INSTANCE . getloadavg ( loadavg , 3 ) ; <nl> + assertEquals ( retval , 3 ) ; <nl> + assertTrue ( loadavg [ 0 ] > = 0 ) ; <nl> + assertTrue ( loadavg [ 1 ] > = 0 ) ; <nl> + assertTrue ( loadavg [ 2 ] > = 0 ) ; <nl> + } <nl> + 	 <nl> 	 public static void main ( java . lang . String [ ] argList ) { <nl> 	 	 junit . textui . TestRunner . run ( SystemBTest . class ) ; <nl> 	 } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / unix / LibCTest . java b / contrib / platform / test / com / sun / jna / platform / unix / LibCTest . java <nl> index 6a7539a . . 5c5efa9 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / unix / LibCTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / unix / LibCTest . java <nl> @ @ - 48 , 4 + 48 , 14 @ @ public class LibCTest extends AbstractUnixTestSupport { <nl> LibC . INSTANCE . unsetenv ( name ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testGetLoadAvg ( ) { <nl> + double [ ] loadavg = new double [ 3 ] ; <nl> + int retval = LibC . INSTANCE . getloadavg ( loadavg , 3 ) ; <nl> + assertEquals ( retval , 3 ) ; <nl> + assertTrue ( loadavg [ 0 ] > = 0 ) ; <nl> + assertTrue ( loadavg [ 1 ] > = 0 ) ; <nl> + assertTrue ( loadavg [ 2 ] > = 0 ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 5661442 . . a0dbd74 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 47 , 6 + 47 , 7 @ @ Features 
 * [ # 616 ] ( https : / / github . com / java - native - access / jna / pull / 616 ) : Allow access to base interfaces ( most important IDispatch ) via ProxyObject and improve binding by allowing to use dispId for the call - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 621 ] ( https : / / github . com / java - native - access / jna / pull / 621 ) : Added TYPEFLAGS - constants for ` wTypeFlags ` in ` com . sun . jna . platform . win32 . OaIdl . TYPEATTR ` - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . 
 * [ # 625 ] ( https : / / github . com / java - native - access / jna / pull / 625 ) : Make conversion to / from java to / from VARIANT in ` com . sun . jna . platform . win32 . COM . util . Convert ` more flexible and dependable - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 639 ] ( https : / / github . com / java - native - access / jna / pull / 639 ) : Add getloadavg ( ) to OS X and Unix - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / SystemB . java b / contrib / platform / src / com / sun / jna / platform / mac / SystemB . java 
 index a1d6b68 . . c4dfd7c 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / mac / SystemB . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / mac / SystemB . java 
 @ @ - 168 , 6 + 168 , 15 @ @ public interface SystemB extends Library { 
 * @ return the host ' s name port 
 * / 
 int mach _ host _ self ( ) ; 
 + 
 + / * * 
 + * The mach _ task _ self system call returns the calling thread ' s task _ self 
 + * port . It has an effect equivalent to receiving a send right for the task ' s 
 + * kernel port . 
 + * 
 + * @ return the task ' s kernel port 
 + * / 
 + int mach _ task _ self ( ) ; 
 
 / * * 
 * The host _ page _ size function returns the page size for the given host . 
 @ @ - 333 , 4 + 342 , 20 @ @ public interface SystemB extends Library { 
 * / 
 int host _ processor _ info ( int machPort , int flavor , IntByReference procCount , 
 PointerByReference procInfo , IntByReference procInfoCount ) ; 
 + 
 + / * * 
 + * The getloadavg ( ) function returns the number of processes in the system 
 + * run queue averaged over various periods of time . Up to nelem samples are 
 + * retrieved and assigned to successive elements of loadavg [ ] . The system 
 + * imposes a maximum of 3 samples , representing averages over the last 1 , 5 , 
 + * and 15 minutes , respectively . 
 + * @ param loadavg 
 + * An array of doubles which will be filled with the results 
 + * @ param nelem 
 + * Number of samples to return 
 + * @ return If the load average was unobtainable , - 1 is returned ; otherwise , 
 + * the number of samples actually retrieved is returned . 
 + * @ see < A HREF = " https : / / www . freebsd . org / cgi / man . cgi ? query = getloadavg & sektion = 3 " > getloadavg ( 3 ) < / A > 
 + * / 
 + int getloadavg ( double [ ] loadavg , int nelem ) ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / LibCAPI . java b / contrib / platform / src / com / sun / jna / platform / unix / LibCAPI . java 
 index 9418aba . . 8887012 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / unix / LibCAPI . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / unix / LibCAPI . java 
 @ @ - 73 , 4 + 73 , 18 @ @ public interface LibCAPI extends Reboot , Resource { 
 * @ see < A HREF = " https : / / www . freebsd . org / cgi / man . cgi ? query = setenv & sektion = 3 " > getenv ( 3 ) < / A > 
 * / 
 int unsetenv ( String name ) ; 
 + 
 + / * * 
 + * The getloadavg ( ) function returns the number of processes in the system 
 + * run queue averaged over various periods of time . Up to nelem samples are 
 + * retrieved and assigned to successive elements of loadavg [ ] . The system 
 + * imposes a maximum of 3 samples , representing averages over the last 1 , 5 , 
 + * and 15 minutes , respectively . 
 + * @ param loadavg An array of doubles which will be filled with the results 
 + * @ param nelem Number of samples to return 
 + * @ return If the load average was unobtainable , - 1 is returned ; otherwise , 
 + * the number of samples actually retrieved is returned . 
 + * @ see < A HREF = " https : / / www . freebsd . org / cgi / man . cgi ? query = getloadavg & sektion = 3 " > getloadavg ( 3 ) < / A > 
 + * / 
 + int getloadavg ( double [ ] loadavg , int nelem ) ; 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / mac / SystemBTest . java b / contrib / platform / test / com / sun / jna / platform / mac / SystemBTest . java 
 index 1b11b5c . . 0ac161e 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / mac / SystemBTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / mac / SystemBTest . java 
 @ @ - 152 , 7 + 152 , 23 @ @ public class SystemBTest extends TestCase { 
 	 	 assertEquals ( procCpuLoadInfo . getValue ( ) . getIntArray ( 0 , 
 	 	 	 	 procInfoCount . getValue ( ) ) . length , procInfoCount . getValue ( ) ) ; 
 	 } 
 - 
 + 	 
 + public void testMachPorts ( ) { 
 + int machPort = SystemB . INSTANCE . mach _ host _ self ( ) ; 
 + assertTrue ( machPort > 0 ) ; 
 + machPort = SystemB . INSTANCE . mach _ task _ self ( ) ; 
 + assertTrue ( machPort > 0 ) ; 	 
 + } 
 + 
 + public void testGetLoadAvg ( ) { 
 + double [ ] loadavg = new double [ 3 ] ; 
 + int retval = SystemB . INSTANCE . getloadavg ( loadavg , 3 ) ; 
 + assertEquals ( retval , 3 ) ; 
 + assertTrue ( loadavg [ 0 ] > = 0 ) ; 
 + assertTrue ( loadavg [ 1 ] > = 0 ) ; 
 + assertTrue ( loadavg [ 2 ] > = 0 ) ; 
 + } 
 + 	 
 	 public static void main ( java . lang . String [ ] argList ) { 
 	 	 junit . textui . TestRunner . run ( SystemBTest . class ) ; 
 	 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / unix / LibCTest . java b / contrib / platform / test / com / sun / jna / platform / unix / LibCTest . java 
 index 6a7539a . . 5c5efa9 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / unix / LibCTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / unix / LibCTest . java 
 @ @ - 48 , 4 + 48 , 14 @ @ public class LibCTest extends AbstractUnixTestSupport { 
 LibC . INSTANCE . unsetenv ( name ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testGetLoadAvg ( ) { 
 + double [ ] loadavg = new double [ 3 ] ; 
 + int retval = LibC . INSTANCE . getloadavg ( loadavg , 3 ) ; 
 + assertEquals ( retval , 3 ) ; 
 + assertTrue ( loadavg [ 0 ] > = 0 ) ; 
 + assertTrue ( loadavg [ 1 ] > = 0 ) ; 
 + assertTrue ( loadavg [ 2 ] > = 0 ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
