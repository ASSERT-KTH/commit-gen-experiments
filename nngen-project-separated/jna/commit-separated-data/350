BLEU SCORE: 0.09688464563433238

TEST MSG: New MS Word sample
GENERATED MSG: some changes to the Word implementation

TEST DIFF (one line): diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java <nl> index 80e063b . . bc1ae68 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java <nl> @ @ - 24 , 10 + 24 , 14 @ @ public class MSOfficeDemo { <nl> <nl> public void testMSWord ( ) { <nl> MSWord msWord = null ; <nl> + <nl> + / / http : / / msdn . microsoft . com / en - us / library / office / ff839952 ( v = office . 15 ) . aspx <nl> LONG wdFormatPDF = new LONG ( 17 ) ; / / PDF format . <nl> LONG wdFormatRTF = new LONG ( 6 ) ; / / Rich text format ( RTF ) . <nl> LONG wdFormatHTML = new LONG ( 8 ) ; / / Standard HTML format . <nl> - <nl> + LONG wdFormatDocument = new LONG ( 0 ) ; / / Microsoft Office Word 97 - 2003 binary file format . <nl> + LONG wdFormatDocumentDefault = new LONG ( 16 ) ; / / Word default document file format . For Word 2010 , this is the DOCX format . <nl> + <nl> try { <nl> msWord = new MSWord ( ) ; <nl> System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; <nl> @ @ - 35 , 22 + 39 , 24 @ @ public class MSOfficeDemo { <nl> msWord . setVisible ( true ) ; <nl> / / msWord . newDocument ( ) ; <nl> msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; <nl> - msWord . insertText ( " Hello from JNA ! " ) ; <nl> + msWord . insertText ( " Hello from JNA ! \ n \ n " ) ; <nl> / / wait 10sec . before closing <nl> - Thread . currentThread ( ) . sleep ( 10000 ) ; <nl> + Thread . currentThread ( ) . sleep ( 1000 ) ; <nl> / / save in different formats <nl> / / pdf format is only supported in MSWord 2007 and above <nl> + msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . doc " , wdFormatDocument ) ; <nl> msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . pdf " , wdFormatPDF ) ; <nl> msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . rtf " , wdFormatRTF ) ; <nl> msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . html " , wdFormatHTML ) ; <nl> / / close and save the document <nl> - msWord . closeActiveDocument ( true ) ; <nl> - msWord . setVisible ( true ) ; <nl> + msWord . closeActiveDocument ( false ) ; <nl> msWord . newDocument ( ) ; <nl> / / msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; <nl> - msWord . insertText ( " Hello from JNA ! " ) ; <nl> + msWord . insertText ( " Hello from JNA ! \ n Please notice that JNA can control MS Word via the new COM interface ! \ nHere we are creating a new word document and we save it to the ' TEMP ' directory ! " ) ; <nl> + / / save with user prompt <nl> + msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestNewDoc . docx " , wdFormatDocumentDefault ) ; <nl> / / close and save the document <nl> - msWord . closeActiveDocument ( true ) ; <nl> + msWord . closeActiveDocument ( false ) ; <nl> / / wait then close word <nl> msWord . quit ( ) ; <nl> } catch ( InterruptedException ie ) { <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSWord . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSWord . java <nl> index 2cbda23 . . 3cce9a2 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSWord . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSWord . java <nl> @ @ - 49 , 6 + 49 , 13 @ @ public class MSWord extends COMLateBindingObject { <nl> this . invokeNoReply ( " TypeText " , pSelection , new VARIANT ( text ) ) ; <nl> } <nl> <nl> + public void Save ( boolean bNoPrompt , LONG originalFormat ) throws COMException { <nl> + VARIANT vtNoPrompt = new VARIANT ( bNoPrompt ) ; <nl> + VARIANT vtOriginalFormat = new VARIANT ( originalFormat ) ; <nl> + <nl> + this . invokeNoReply ( " Save " , this . getActiveDocument ( ) . getIDispatch ( ) ) ; <nl> + } <nl> + <nl> public void SaveAs ( String FileName , LONG FileFormat ) throws COMException { <nl> VARIANT vtFileName = new VARIANT ( FileName ) ; <nl> VARIANT vtFileFormat = new VARIANT ( FileFormat ) ;
NEAREST DIFF (one line): diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> index c18214b . . 77c8b4b 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package com . sun . jna . platform . win32 . office ; <nl> import java . io . File ; <nl> <nl> import com . sun . jna . platform . win32 . Variant ; <nl> - import com . sun . jna . platform . win32 . COM . AutomationException ; <nl> + import com . sun . jna . platform . win32 . COM . COMException ; <nl> <nl> public class MSOfficeDemo { <nl> <nl> @ @ - 31 , 7 + 31 , 7 @ @ public class MSOfficeDemo { <nl> 	 	 	 msWord . closeActiveDocument ( Variant . VARIANT _ TRUE ) ; <nl> 	 	 	 / / wait then close word <nl> 	 	 	 msWord . quit ( ) ; <nl> - 	 	 } catch ( AutomationException e ) { <nl> + 	 	 } catch ( COMException e ) { <nl> 	 	 	 if ( e . getExcepInfo ( ) ! = null ) { <nl> 	 	 	 	 System . out <nl> 	 	 	 	 	 	 . println ( " bstrSource : " + e . getExcepInfo ( ) . bstrSource ) ; <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> index 8ec27e3 . . 61015fd 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> @ @ - 6 , 29 + 6 , 29 @ @ import com . sun . jna . platform . win32 . Variant ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> - import com . sun . jna . platform . win32 . COM . AutomationException ; <nl> + import com . sun . jna . platform . win32 . COM . COMException ; <nl> import com . sun . jna . platform . win32 . COM . COMObject ; <nl> import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> <nl> public class MSWord extends COMObject { <nl> <nl> - 	 public MSWord ( ) throws AutomationException { <nl> + 	 public MSWord ( ) throws COMException { <nl> 	 	 super ( " Word . Application " , false ) ; <nl> 	 } <nl> <nl> - 	 public MSWord ( boolean visible ) throws AutomationException { <nl> + 	 public MSWord ( boolean visible ) throws COMException { <nl> 	 	 this ( ) ; <nl> 	 	 this . setVisible ( Variant . VARIANT _ TRUE ) ; <nl> 	 } <nl> <nl> - 	 public void setVisible ( VARIANT _ BOOL bVisible ) throws AutomationException { <nl> + 	 public void setVisible ( VARIANT _ BOOL bVisible ) throws COMException { <nl> 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYPUT , result , this . iDispatch , <nl> 	 	 	 	 " Visible " , new VARIANT ( bVisible ) ) ; <nl> 	 } <nl> <nl> - 	 public String getVersion ( ) throws AutomationException { <nl> + 	 public String getVersion ( ) throws COMException { <nl> 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , <nl> 	 	 	 	 " Version " ) ; <nl> @ @ - 36 , 7 + 36 , 7 @ @ public class MSWord extends COMObject { <nl> 	 	 return result . getValue ( ) . toString ( ) ; <nl> 	 } <nl> <nl> - 	 public HRESULT newDocument ( ) throws AutomationException { <nl> + 	 public HRESULT newDocument ( ) throws COMException { <nl> 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> 	 	 	 	 getDocuments ( ) . getIDispatch ( ) , " Add " ) ; <nl> <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class MSWord extends COMObject { <nl> 	 } <nl> <nl> 	 public HRESULT openDocument ( String filename , boolean bVisible ) <nl> - 	 	 	 throws AutomationException { <nl> + 	 	 	 throws COMException { <nl> 	 	 / / OpenDocument <nl> 	 	 BSTR bstrFilename = OleAut32 . INSTANCE . SysAllocString ( filename ) ; <nl> 	 	 VARIANT varFilename = new VARIANT ( bstrFilename ) ; <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class MSWord extends COMObject { <nl> 	 } <nl> <nl> 	 public HRESULT closeActiveDocument ( VARIANT _ BOOL bSave ) <nl> - 	 	 	 throws AutomationException { <nl> + 	 	 	 throws COMException { <nl> <nl> 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> 	 	 	 	 getActiveDocument ( ) . getIDispatch ( ) , " Close " , new VARIANT ( bSave ) ) ; <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class MSWord extends COMObject { <nl> 	 	 return hr ; <nl> 	 } <nl> <nl> - 	 public HRESULT quit ( ) throws AutomationException { <nl> + 	 public HRESULT quit ( ) throws COMException { <nl> 	 	 HRESULT hr = this . oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> 	 	 	 	 this . iDispatch , " Quit " ) ; <nl> <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class MSWord extends COMObject { <nl> 	 	 return hr ; <nl> 	 } <nl> <nl> - 	 public HRESULT insertText ( String text ) throws AutomationException { <nl> + 	 public HRESULT insertText ( String text ) throws COMException { <nl> 	 	 HRESULT hr ; <nl> <nl> 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; <nl> @ @ - 117 , 28 + 117 , 28 @ @ public class MSWord extends COMObject { <nl> 	 <nl> 	 public class Application extends COMObject { <nl> <nl> - 	 	 public Application ( IDispatch iDispatch ) throws AutomationException { <nl> + 	 	 public Application ( IDispatch iDispatch ) throws COMException { <nl> 	 	 	 super ( iDispatch ) ; <nl> 	 	 } <nl> 	 } <nl> 	 <nl> 	 public class Documents extends COMObject { <nl> <nl> - 	 	 public Documents ( IDispatch iDispatch ) throws AutomationException { <nl> + 	 	 public Documents ( IDispatch iDispatch ) throws COMException { <nl> 	 	 	 super ( iDispatch ) ; <nl> 	 	 } <nl> 	 } <nl> <nl> 	 public class ActiveDocument extends COMObject { <nl> <nl> - 	 	 public ActiveDocument ( IDispatch iDispatch ) throws AutomationException { <nl> + 	 	 public ActiveDocument ( IDispatch iDispatch ) throws COMException { <nl> 	 	 	 super ( iDispatch ) ; <nl> 	 	 } <nl> 	 } <nl> <nl> 	 public class Selection extends COMObject { <nl> <nl> - 	 	 public Selection ( IDispatch iDispatch ) throws AutomationException { <nl> + 	 	 public Selection ( IDispatch iDispatch ) throws COMException { <nl> 	 	 	 super ( iDispatch ) ; <nl> 	 	 } <nl> 	 } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / AutomationException . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / AutomationException . java <nl> deleted file mode 100644 <nl> index 0098e98 . . 0000000 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / AutomationException . java <nl> + + + / dev / null <nl> @ @ - 1 , 97 + 0 , 0 @ @ <nl> - package com . sun . jna . platform . win32 . COM ; <nl> - <nl> - import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; <nl> - import com . sun . jna . ptr . IntByReference ; <nl> - <nl> - / / TODO : Auto - generated Javadoc <nl> - / * * <nl> - * The Class AutomationException . <nl> - * / <nl> - public class AutomationException extends RuntimeException { <nl> - <nl> - 	 / * * The p excep info . * / <nl> - 	 private EXCEPINFO pExcepInfo ; <nl> - <nl> - 	 / * * The pu arg err . * / <nl> - 	 private IntByReference puArgErr ; <nl> - <nl> - 	 / * * <nl> - 	 * Instantiates a new automation exception . <nl> - 	 * / <nl> - 	 public AutomationException ( ) { <nl> - 	 	 super ( ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Instantiates a new automation exception . <nl> - 	 * <nl> - 	 * @ param message the message <nl> - 	 * @ param cause the cause <nl> - 	 * @ param enableSuppression the enable suppression <nl> - 	 * @ param writableStackTrace the writable stack trace <nl> - 	 * / <nl> - 	 public AutomationException ( String message , Throwable cause , <nl> - 	 	 	 boolean enableSuppression , boolean writableStackTrace ) { <nl> - 	 	 super ( message , cause , enableSuppression , writableStackTrace ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Instantiates a new automation exception . <nl> - 	 * <nl> - 	 * @ param message the message <nl> - 	 * @ param cause the cause <nl> - 	 * / <nl> - 	 public AutomationException ( String message , Throwable cause ) { <nl> - 	 	 super ( message , cause ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Instantiates a new automation exception . <nl> - 	 * <nl> - 	 * @ param message the message <nl> - 	 * / <nl> - 	 public AutomationException ( String message ) { <nl> - 	 	 super ( message ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Instantiates a new automation exception . <nl> - 	 * <nl> - 	 * @ param message the message <nl> - 	 * @ param pExcepInfo the excep info <nl> - 	 * @ param puArgErr the pu arg err <nl> - 	 * / <nl> - 	 public AutomationException ( String message , EXCEPINFO pExcepInfo , <nl> - 	 	 	 IntByReference puArgErr ) { <nl> - 	 	 super ( message ) ; <nl> - 	 	 this . pExcepInfo = pExcepInfo ; <nl> - 	 	 this . puArgErr = puArgErr ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Instantiates a new automation exception . <nl> - 	 * <nl> - 	 * @ param cause the cause <nl> - 	 * / <nl> - 	 public AutomationException ( Throwable cause ) { <nl> - 	 	 super ( cause ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Gets the excep info . <nl> - 	 * <nl> - 	 * @ return the excep info <nl> - 	 * / <nl> - 	 public EXCEPINFO getExcepInfo ( ) { <nl> - 	 	 return pExcepInfo ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Gets the arg err . <nl> - 	 * <nl> - 	 * @ return the arg err <nl> - 	 * / <nl> - 	 public IntByReference getArgErr ( ) { <nl> - 	 	 return puArgErr ; <nl> - 	 } <nl> - } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java <nl> new file mode 100644 <nl> index 0000000 . . 5429b51 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java <nl> @ @ - 0 , 0 + 1 , 121 @ @ <nl> + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 . COM ; <nl> + <nl> + import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + <nl> + / * * <nl> + * Exception class for all COM related classes . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> + * / <nl> + public class COMException extends RuntimeException { <nl> + <nl> + 	 / * * The p excep info . * / <nl> + 	 private EXCEPINFO pExcepInfo ; <nl> + <nl> + 	 / * * The pu arg err . * / <nl> + 	 private IntByReference puArgErr ; <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates a new automation exception . <nl> + 	 * / <nl> + 	 public COMException ( ) { <nl> + 	 	 super ( ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates a new automation exception . <nl> + 	 * <nl> + 	 * @ param message <nl> + 	 * the message <nl> + 	 * @ param cause <nl> + 	 * the cause <nl> + 	 * @ param enableSuppression <nl> + 	 * the enable suppression <nl> + 	 * @ param writableStackTrace <nl> + 	 * the writable stack trace <nl> + 	 * / <nl> + 	 public COMException ( String message , Throwable cause , <nl> + 	 	 	 boolean enableSuppression , boolean writableStackTrace ) { <nl> + 	 	 super ( message , cause , enableSuppression , writableStackTrace ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates a new automation exception . <nl> + 	 * <nl> + 	 * @ param message <nl> + 	 * the message <nl> + 	 * @ param cause <nl> + 	 * the cause <nl> + 	 * / <nl> + 	 public COMException ( String message , Throwable cause ) { <nl> + 	 	 super ( message , cause ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates a new automation exception . <nl> + 	 * <nl> + 	 * @ param message <nl> + 	 * the message <nl> + 	 * / <nl> + 	 public COMException ( String message ) { <nl> + 	 	 super ( message ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates a new automation exception . <nl> + 	 * <nl> + 	 * @ param message <nl> + 	 * the message <nl> + 	 * @ param pExcepInfo <nl> + 	 * the excep info <nl> + 	 * @ param puArgErr <nl> + 	 * the pu arg err <nl> + 	 * / <nl> + 	 public COMException ( String message , EXCEPINFO pExcepInfo , <nl> + 	 	 	 IntByReference puArgErr ) { <nl> + 	 	 super ( message ) ; <nl> + 	 	 this . pExcepInfo = pExcepInfo ; <nl> + 	 	 this . puArgErr = puArgErr ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates a new automation exception . <nl> + 	 * <nl> + 	 * @ param cause <nl> + 	 * the cause <nl> + 	 * / <nl> + 	 public COMException ( Throwable cause ) { <nl> + 	 	 super ( cause ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Gets the excep info . <nl> + 	 * <nl> + 	 * @ return the excep info <nl> + 	 * / <nl> + 	 public EXCEPINFO getExcepInfo ( ) { <nl> + 	 	 return pExcepInfo ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Gets the arg err . <nl> + 	 * <nl> + 	 * @ return the arg err <nl> + 	 * / <nl> + 	 public IntByReference getArgErr ( ) { <nl> + 	 	 return puArgErr ; <nl> + 	 } <nl> + } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMObject . java <nl> index a9eb143 . . 79fdd43 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMObject . java <nl> @ @ - 1 , 3 + 1 , 15 @ @ <nl> + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> import com . sun . jna . Native ; <nl> @ @ - 21 , 15 + 33 , 20 @ @ import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> <nl> + / * * <nl> + * Helper class to provide basic COM support . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> + * / <nl> public class COMObject { <nl> <nl> 	 public final static LCID LOCALE _ USER _ DEFAULT = Kernel32 . INSTANCE <nl> 	 	 	 . GetUserDefaultLCID ( ) ; <nl> 	 public final static LCID LOCALE _ SYSTEM _ DEFAULT = Kernel32 . INSTANCE <nl> 	 	 	 . GetSystemDefaultLCID ( ) ; <nl> - 	 <nl> + <nl> 	 protected IUnknown iUnknown ; <nl> - 	 <nl> + <nl> 	 protected IDispatch iDispatch ; <nl> <nl> 	 private PointerByReference pDispatch = new PointerByReference ( ) ; <nl> @ @ - 42 , 13 + 59 , 16 @ @ public class COMObject { <nl> <nl> 	 / * * <nl> 	 * Instantiates a new cOM object . <nl> - 	 * <nl> - 	 * @ param progId the prog id <nl> - 	 * @ param useActiveInstance the use active instance <nl> - 	 * @ throws AutomationException the automation exception <nl> + 	 * <nl> + 	 * @ param progId <nl> + 	 * the prog id <nl> + 	 * @ param useActiveInstance <nl> + 	 * the use active instance <nl> + 	 * @ throws COMException <nl> + 	 * the automation exception <nl> 	 * / <nl> 	 public COMObject ( String progId , boolean useActiveInstance ) <nl> - 	 	 	 throws AutomationException { <nl> + 	 	 	 throws COMException { <nl> 	 	 / / enable JNA protected mode <nl> 	 	 Native . setProtected ( true ) ; <nl> <nl> @ @ - 57 , 7 + 77 , 7 @ @ public class COMObject { <nl> <nl> 	 	 if ( COMUtils . FAILED ( hr ) ) { <nl> 	 	 	 this . release ( ) ; <nl> - 	 	 	 throw new AutomationException ( " CoInitialize ( ) failed ! " ) ; <nl> + 	 	 	 throw new COMException ( " CoInitialize ( ) failed ! " ) ; <nl> 	 	 } <nl> <nl> 	 	 / / Get CLSID for Word . Application . . . <nl> @ @ - 66 , 7 + 86 , 7 @ @ public class COMObject { <nl> <nl> 	 	 if ( COMUtils . FAILED ( hr ) ) { <nl> 	 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> - 	 	 	 throw new AutomationException ( " CLSIDFromProgID ( ) failed ! " ) ; <nl> + 	 	 	 throw new COMException ( " CLSIDFromProgID ( ) failed ! " ) ; <nl> 	 	 } <nl> <nl> 	 	 if ( useActiveInstance ) { <nl> @ @ - 74 , 7 + 94 , 8 @ @ public class COMObject { <nl> <nl> 	 	 	 if ( COMUtils . SUCCEEDED ( hr ) ) { <nl> 	 	 	 	 this . iUnknown = new IUnknown ( this . pUnknown . getValue ( ) ) ; <nl> - 	 	 	 	 hr = iUnknown . QueryInterface ( IDispatch . IID _ IDispatch , this . pDispatch ) ; <nl> + 	 	 	 	 hr = iUnknown . QueryInterface ( IDispatch . IID _ IDispatch , <nl> + 	 	 	 	 	 	 this . pDispatch ) ; <nl> 	 	 	 } else { <nl> 	 	 	 	 hr = Ole32 . INSTANCE . CoCreateInstance ( clsid , null , <nl> 	 	 	 	 	 	 WTypes . CLSCTX _ LOCAL _ SERVER , IDispatch . IID _ IDispatch , <nl> @ @ - 87 , 7 + 108 , 7 @ @ public class COMObject { <nl> 	 	 } <nl> <nl> 	 	 if ( COMUtils . FAILED ( hr ) ) { <nl> - 	 	 	 throw new AutomationException ( " COM object ' " + progId <nl> + 	 	 	 throw new COMException ( " COM object ' " + progId <nl> 	 	 	 	 	 + " ' not registered properly ! " ) ; <nl> 	 	 } <nl> <nl> @ @ - 96 , 10 + 117 , 10 @ @ public class COMObject { <nl> <nl> 	 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> 	 	 	 IDispatch pDisp , String name , VARIANT [ ] pArgs ) <nl> - 	 	 	 throws AutomationException { <nl> + 	 	 	 throws COMException { <nl> <nl> 	 	 if ( pDisp = = null ) <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " pDisp ( IDispatch ) parameter is null ! " ) ; <nl> <nl> 	 	 WString [ ] ptName = new WString [ ] { new WString ( name ) } ; <nl> @ @ - 143 , 14 + 164 , 14 @ @ public class COMObject { <nl> <nl> 	 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> 	 	 	 IDispatch pDisp , String name , VARIANT pArg ) <nl> - 	 	 	 throws AutomationException { <nl> + 	 	 	 throws COMException { <nl> <nl> 	 	 return this . oleMethod ( nType , pvResult , pDisp , name , <nl> 	 	 	 	 new VARIANT [ ] { pArg } ) ; <nl> 	 } <nl> <nl> 	 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> - 	 	 	 IDispatch pDisp , String name ) throws AutomationException { <nl> + 	 	 	 IDispatch pDisp , String name ) throws COMException { <nl> <nl> 	 	 return this . oleMethod ( nType , pvResult , pDisp , name , ( VARIANT [ ] ) null ) ; <nl> 	 } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> index afd54d8 . . 3cd0631 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> @ @ - 171 , 62 + 171 , 62 @ @ public abstract class COMUtils { <nl> 	 	 case S _ OK : <nl> 	 	 	 return ; <nl> 	 	 case E _ NOTIMPL : <nl> - 	 	 	 throw new AutomationException ( " Not implemented ! " ) ; <nl> + 	 	 	 throw new COMException ( " Not implemented ! " ) ; <nl> 	 	 case E _ INVALIDARG : <nl> - 	 	 	 throw new AutomationException ( " Invalid argument ! " ) ; <nl> + 	 	 	 throw new COMException ( " Invalid argument ! " ) ; <nl> 	 	 case E _ OUTOFMEMORY : <nl> - 	 	 	 throw new AutomationException ( " Out of memory ! " ) ; <nl> + 	 	 	 throw new COMException ( " Out of memory ! " ) ; <nl> 	 	 case E _ UNEXPECTED : <nl> - 	 	 	 throw new AutomationException ( " Error " <nl> + 	 	 	 throw new COMException ( " Error " <nl> 	 	 	 	 	 + Integer . toHexString ( hr . intValue ( ) ) ) ; <nl> 	 	 case CO _ E _ NOTINITIALIZED : <nl> - 	 	 	 throw new AutomationException ( " CoInitialized wasn ' t called ! " ) ; <nl> + 	 	 	 throw new COMException ( " CoInitialized wasn ' t called ! " ) ; <nl> 	 	 case E _ NOINTERFACE : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " Interface does not inherit from class ! " ) ; <nl> 	 	 case E _ POINTER : <nl> - 	 	 	 throw new AutomationException ( " Allocated pointer pointer is null ! " ) ; <nl> + 	 	 	 throw new COMException ( " Allocated pointer pointer is null ! " ) ; <nl> 	 	 case DISP _ E _ UNKNOWNNAME : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " One or more of the names were not known . The returned array of DISPIDs contains DISPID _ UNKNOWN for each entry that corresponds to an unknown name ! " ) ; <nl> 	 	 case DISP _ E _ UNKNOWNLCID : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " The locale identifier ( LCID ) was not recognized ! " ) ; <nl> 	 	 case DISP _ E _ BADPARAMCOUNT : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " The number of elements provided to DISPPARAMS is different from the number of arguments accepted by the method or property ! " ) ; <nl> 	 	 case DISP _ E _ BADVARTYPE : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " One of the arguments in DISPPARAMS is not a valid variant type ! " ) ; <nl> 	 	 case DISP _ E _ EXCEPTION : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " The application needs to raise an exception . In this case , the structure passed in pexcepinfo should be filled in ! " , <nl> 	 	 	 	 	 pExcepInfo , puArgErr ) ; <nl> 	 	 case DISP _ E _ MEMBERNOTFOUND : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " The requested member does not exist ! " ) ; <nl> 	 	 case DISP _ E _ NONAMEDARGS : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " This implementation of IDispatch does not support named arguments ! " ) ; <nl> 	 	 case DISP _ E _ OVERFLOW : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " One of the arguments in DISPPARAMS could not be coerced to the specified type ! " ) ; <nl> 	 	 case DISP _ E _ PARAMNOTFOUND : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " One of the parameter IDs does not correspond to a parameter on the method . In this case , puArgErr is set to the first argument that contains the error ! " , <nl> 	 	 	 	 	 pExcepInfo , puArgErr ) ; <nl> 	 	 case DISP _ E _ TYPEMISMATCH : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " One or more of the arguments could not be coerced . The index of the first parameter with the incorrect type within rgvarg is returned in puArgErr ! " , <nl> 	 	 	 	 	 pExcepInfo , puArgErr ) ; <nl> 	 	 case DISP _ E _ UNKNOWNINTERFACE : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " The interface identifier passed in riid is not IID _ NULL ! " ) ; <nl> 	 	 case CO _ E _ OBJNOTCONNECTED : <nl> - 	 	 	 throw new AutomationException ( <nl> + 	 	 	 throw new COMException ( <nl> 	 	 	 	 	 " The method is not connected to the Dispatch pointer ! " ) ; <nl> 	 	 default : <nl> - 	 	 	 throw new AutomationException ( " Unexpected COM error code : " <nl> + 	 	 	 throw new COMException ( " Unexpected COM error code : " <nl> 	 	 	 	 	 + hr . intValue ( ) ) ; <nl> 	 	 } <nl> 	 } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java <nl> index b78b501 . . 1586b7d 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java <nl> @ @ - 1 , 3 + 1 , 15 @ @ <nl> + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> import com . sun . jna . Function ; <nl> @ @ - 16 , 10 + 28 , 13 @ @ import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> <nl> - / / TODO : Auto - generated Javadoc <nl> / * * <nl> - * * IDispatch . GetTypeInfoCount 12 IDispatch . GetTypeInfo 16 <nl> + * Wrapper class for the IDispatch interface <nl> + * <nl> + * IDispatch . GetTypeInfoCount 12 IDispatch . GetTypeInfo 16 <nl> * IDispatch . GetIDsOfNames 20 IDispatch . Invoke 24 <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public class IDispatch extends IUnknown { <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IRecordInfo . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IRecordInfo . java <nl> index ac23528 . . 6516bd8 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IRecordInfo . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IRecordInfo . java <nl> @ @ - 1 , 3 + 1 , 15 @ @ <nl> + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> import com . sun . jna . Pointer ; <nl> @ @ - 11 , 9 + 23 , 10 @ @ import com . sun . jna . platform . win32 . WinDef . PVOID ; <nl> import com . sun . jna . platform . win32 . WinDef . ULONG ; <nl> import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> <nl> - / / TODO : Auto - generated Javadoc <nl> / * * <nl> - * The Class IRecordInfo . <nl> + * Wrapper class for the IRecordInfo interface <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public class IRecordInfo extends IUnknown { <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java <nl> index 811f454 . . a3548e9 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java <nl> @ @ - 1 , 10 + 1 , 23 @ @ <nl> + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> import com . sun . jna . Pointer ; <nl> <nl> - / / TODO : Auto - generated Javadoc <nl> / * * <nl> - * The Class ITypeInfo . <nl> + * Wrapper class for the ITypeInfo interface <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public class ITypeInfo extends IUnknown { <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java <nl> index 5d24270 . . ba06c09 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java <nl> @ @ - 17 , 17 + 17 , 16 @ @ import com . sun . jna . Pointer ; <nl> import com . sun . jna . PointerType ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . platform . win32 . Guid . IID ; <nl> - import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> <nl> - / / TODO : Auto - generated Javadoc <nl> / * * <nl> - * The Class IUnknown . <nl> + * Wrapper class for the ITypeInfo interface <nl> * <nl> * Method Name V - Table Offset IUnknown . QueryInterface 0 IUnknown . AddRef 4 <nl> * IUnknown . Release 8 <nl> * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public class IUnknown extends PointerType { <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / DBT . java b / contrib / platform / src / com / sun / jna / platform / win32 / DBT . java <nl> index 608189a . . 0c0cd53 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / DBT . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / DBT . java <nl> @ @ - 1 , 3 + 1 , 15 @ @ <nl> + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> package com . sun . jna . platform . win32 ; <nl> <nl> import java . util . Arrays ; <nl> @ @ - 12 , 7 + 24 , 6 @ @ import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> import com . sun . jna . platform . win32 . WinUser . HDEVNOTIFY ; <nl> import com . sun . jna . win32 . StdCallLibrary ; <nl> <nl> - / / TODO : Auto - generated Javadoc <nl> / * * <nl> * Based on dbt . h ( various types ) <nl> * <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java <nl> index 1462971 . . 3b7ffb9 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ import junit . framework . TestCase ; <nl> import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> import com . sun . jna . platform . win32 . WinDef . SHORT ; <nl> - import com . sun . jna . platform . win32 . COM . AutomationException ; <nl> + import com . sun . jna . platform . win32 . COM . COMException ; <nl> <nl> / * * <nl> * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> @ @ - 41 , 7 + 41 , 7 @ @ public class OleAut32UtilTest extends TestCase { <nl> 	 	 	 	 VARIANT variant = new VARIANT ( new SHORT ( i + i * 100 ) ) ; <nl> 	 	 	 	 System . out . println ( variant . toString ( true ) ) ; <nl> 	 	 	 	 OleAut32Util . SafeArrayPutElement ( varArray , i , variant ) ; <nl> - 	 	 	 } catch ( AutomationException e ) { <nl> + 	 	 	 } catch ( COMException e ) { <nl> 	 	 	 	 e . printStackTrace ( ) ; <nl> 	 	 	 } <nl> 	 	 } <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class OleAut32UtilTest extends TestCase { <nl> 	 	 	 	 System . out . println ( element . toString ( true ) ) ; <nl> 	 	 	 	 System . out . println ( " variant type : " + element . getVarType ( ) ) ; <nl> 	 	 	 	 System . out . println ( " value : " + element . getValue ( ) ) ; <nl> - 	 	 	 } catch ( AutomationException e ) { <nl> + 	 	 	 } catch ( COMException e ) { <nl> 	 	 	 	 e . printStackTrace ( ) ; <nl> 	 	 	 } <nl> 	 	 } <nl> diff - - git a / test / com / sun / jna / win32 / IUknownTest . java b / test / com / sun / jna / win32 / IUknownTest . java <nl> index 8edb9eb . . f9e790c 100644 <nl> - - - a / test / com / sun / jna / win32 / IUknownTest . java <nl> + + + b / test / com / sun / jna / win32 / IUknownTest . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ import com . sun . jna . platform . win32 . Ole32 ; <nl> import com . sun . jna . platform . win32 . W32Errors ; <nl> import com . sun . jna . platform . win32 . WTypes ; <nl> import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> - import com . sun . jna . platform . win32 . COM . AutomationException ; <nl> + import com . sun . jna . platform . win32 . COM . COMException ; <nl> import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class IUknownTest extends TestCase { <nl> <nl> 	 	 if ( W32Errors . FAILED ( hr ) ) { <nl> 	 	 	 this . tearDown ( ) ; <nl> - 	 	 	 throw new AutomationException ( " CoInitialize ( ) failed " ) ; <nl> + 	 	 	 throw new COMException ( " CoInitialize ( ) failed " ) ; <nl> 	 	 } <nl> <nl> 	 	 / / Get CLSID for Word . Application . . . <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class IUknownTest extends TestCase { <nl> <nl> 	 	 if ( W32Errors . FAILED ( hr ) ) { <nl> 	 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> - 	 	 	 throw new AutomationException ( " CLSIDFromProgID ( ) failed ! " ) ; <nl> + 	 	 	 throw new COMException ( " CLSIDFromProgID ( ) failed ! " ) ; <nl> 	 	 } <nl> <nl> 	 	 hr = Ole32 . INSTANCE . CoCreateInstance ( clsid , null , <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class IUknownTest extends TestCase { <nl> 	 	 	 	 this . pDispatch ) ; <nl> <nl> 	 	 if ( W32Errors . FAILED ( hr ) ) { <nl> - 	 	 	 throw new AutomationException ( " Internet Explorer not registered properly ! " ) ; <nl> + 	 	 	 throw new COMException ( " Internet Explorer not registered properly ! " ) ; <nl> 	 	 } <nl> <nl> 	 	 this . iDispatch = new IDispatch ( pDispatch . getPointer ( ) ) ;

TEST DIFF:
diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java 
 index 80e063b . . bc1ae68 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java 
 @ @ - 24 , 10 + 24 , 14 @ @ public class MSOfficeDemo { 
 
 public void testMSWord ( ) { 
 MSWord msWord = null ; 
 + 
 + / / http : / / msdn . microsoft . com / en - us / library / office / ff839952 ( v = office . 15 ) . aspx 
 LONG wdFormatPDF = new LONG ( 17 ) ; / / PDF format . 
 LONG wdFormatRTF = new LONG ( 6 ) ; / / Rich text format ( RTF ) . 
 LONG wdFormatHTML = new LONG ( 8 ) ; / / Standard HTML format . 
 - 
 + LONG wdFormatDocument = new LONG ( 0 ) ; / / Microsoft Office Word 97 - 2003 binary file format . 
 + LONG wdFormatDocumentDefault = new LONG ( 16 ) ; / / Word default document file format . For Word 2010 , this is the DOCX format . 
 + 
 try { 
 msWord = new MSWord ( ) ; 
 System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; 
 @ @ - 35 , 22 + 39 , 24 @ @ public class MSOfficeDemo { 
 msWord . setVisible ( true ) ; 
 / / msWord . newDocument ( ) ; 
 msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; 
 - msWord . insertText ( " Hello from JNA ! " ) ; 
 + msWord . insertText ( " Hello from JNA ! \ n \ n " ) ; 
 / / wait 10sec . before closing 
 - Thread . currentThread ( ) . sleep ( 10000 ) ; 
 + Thread . currentThread ( ) . sleep ( 1000 ) ; 
 / / save in different formats 
 / / pdf format is only supported in MSWord 2007 and above 
 + msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . doc " , wdFormatDocument ) ; 
 msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . pdf " , wdFormatPDF ) ; 
 msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . rtf " , wdFormatRTF ) ; 
 msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . html " , wdFormatHTML ) ; 
 / / close and save the document 
 - msWord . closeActiveDocument ( true ) ; 
 - msWord . setVisible ( true ) ; 
 + msWord . closeActiveDocument ( false ) ; 
 msWord . newDocument ( ) ; 
 / / msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; 
 - msWord . insertText ( " Hello from JNA ! " ) ; 
 + msWord . insertText ( " Hello from JNA ! \ n Please notice that JNA can control MS Word via the new COM interface ! \ nHere we are creating a new word document and we save it to the ' TEMP ' directory ! " ) ; 
 + / / save with user prompt 
 + msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestNewDoc . docx " , wdFormatDocumentDefault ) ; 
 / / close and save the document 
 - msWord . closeActiveDocument ( true ) ; 
 + msWord . closeActiveDocument ( false ) ; 
 / / wait then close word 
 msWord . quit ( ) ; 
 } catch ( InterruptedException ie ) { 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSWord . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSWord . java 
 index 2cbda23 . . 3cce9a2 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSWord . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSWord . java 
 @ @ - 49 , 6 + 49 , 13 @ @ public class MSWord extends COMLateBindingObject { 
 this . invokeNoReply ( " TypeText " , pSelection , new VARIANT ( text ) ) ; 
 } 
 
 + public void Save ( boolean bNoPrompt , LONG originalFormat ) throws COMException { 
 + VARIANT vtNoPrompt = new VARIANT ( bNoPrompt ) ; 
 + VARIANT vtOriginalFormat = new VARIANT ( originalFormat ) ; 
 + 
 + this . invokeNoReply ( " Save " , this . getActiveDocument ( ) . getIDispatch ( ) ) ; 
 + } 
 + 
 public void SaveAs ( String FileName , LONG FileFormat ) throws COMException { 
 VARIANT vtFileName = new VARIANT ( FileName ) ; 
 VARIANT vtFileFormat = new VARIANT ( FileFormat ) ;

NEAREST DIFF:
diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 index c18214b . . 77c8b4b 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 @ @ - 3 , 7 + 3 , 7 @ @ package com . sun . jna . platform . win32 . office ; 
 import java . io . File ; 
 
 import com . sun . jna . platform . win32 . Variant ; 
 - import com . sun . jna . platform . win32 . COM . AutomationException ; 
 + import com . sun . jna . platform . win32 . COM . COMException ; 
 
 public class MSOfficeDemo { 
 
 @ @ - 31 , 7 + 31 , 7 @ @ public class MSOfficeDemo { 
 	 	 	 msWord . closeActiveDocument ( Variant . VARIANT _ TRUE ) ; 
 	 	 	 / / wait then close word 
 	 	 	 msWord . quit ( ) ; 
 - 	 	 } catch ( AutomationException e ) { 
 + 	 	 } catch ( COMException e ) { 
 	 	 	 if ( e . getExcepInfo ( ) ! = null ) { 
 	 	 	 	 System . out 
 	 	 	 	 	 	 . println ( " bstrSource : " + e . getExcepInfo ( ) . bstrSource ) ; 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 index 8ec27e3 . . 61015fd 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 @ @ - 6 , 29 + 6 , 29 @ @ import com . sun . jna . platform . win32 . Variant ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 - import com . sun . jna . platform . win32 . COM . AutomationException ; 
 + import com . sun . jna . platform . win32 . COM . COMException ; 
 import com . sun . jna . platform . win32 . COM . COMObject ; 
 import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import com . sun . jna . platform . win32 . COM . IDispatch ; 
 
 public class MSWord extends COMObject { 
 
 - 	 public MSWord ( ) throws AutomationException { 
 + 	 public MSWord ( ) throws COMException { 
 	 	 super ( " Word . Application " , false ) ; 
 	 } 
 
 - 	 public MSWord ( boolean visible ) throws AutomationException { 
 + 	 public MSWord ( boolean visible ) throws COMException { 
 	 	 this ( ) ; 
 	 	 this . setVisible ( Variant . VARIANT _ TRUE ) ; 
 	 } 
 
 - 	 public void setVisible ( VARIANT _ BOOL bVisible ) throws AutomationException { 
 + 	 public void setVisible ( VARIANT _ BOOL bVisible ) throws COMException { 
 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYPUT , result , this . iDispatch , 
 	 	 	 	 " Visible " , new VARIANT ( bVisible ) ) ; 
 	 } 
 
 - 	 public String getVersion ( ) throws AutomationException { 
 + 	 public String getVersion ( ) throws COMException { 
 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , 
 	 	 	 	 " Version " ) ; 
 @ @ - 36 , 7 + 36 , 7 @ @ public class MSWord extends COMObject { 
 	 	 return result . getValue ( ) . toString ( ) ; 
 	 } 
 
 - 	 public HRESULT newDocument ( ) throws AutomationException { 
 + 	 public HRESULT newDocument ( ) throws COMException { 
 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 	 	 	 	 getDocuments ( ) . getIDispatch ( ) , " Add " ) ; 
 
 @ @ - 44 , 7 + 44 , 7 @ @ public class MSWord extends COMObject { 
 	 } 
 
 	 public HRESULT openDocument ( String filename , boolean bVisible ) 
 - 	 	 	 throws AutomationException { 
 + 	 	 	 throws COMException { 
 	 	 / / OpenDocument 
 	 	 BSTR bstrFilename = OleAut32 . INSTANCE . SysAllocString ( filename ) ; 
 	 	 VARIANT varFilename = new VARIANT ( bstrFilename ) ; 
 @ @ - 55 , 7 + 55 , 7 @ @ public class MSWord extends COMObject { 
 	 } 
 
 	 public HRESULT closeActiveDocument ( VARIANT _ BOOL bSave ) 
 - 	 	 	 throws AutomationException { 
 + 	 	 	 throws COMException { 
 
 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 	 	 	 	 getActiveDocument ( ) . getIDispatch ( ) , " Close " , new VARIANT ( bSave ) ) ; 
 @ @ - 63 , 7 + 63 , 7 @ @ public class MSWord extends COMObject { 
 	 	 return hr ; 
 	 } 
 
 - 	 public HRESULT quit ( ) throws AutomationException { 
 + 	 public HRESULT quit ( ) throws COMException { 
 	 	 HRESULT hr = this . oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 	 	 	 	 this . iDispatch , " Quit " ) ; 
 
 @ @ - 71 , 7 + 71 , 7 @ @ public class MSWord extends COMObject { 
 	 	 return hr ; 
 	 } 
 
 - 	 public HRESULT insertText ( String text ) throws AutomationException { 
 + 	 public HRESULT insertText ( String text ) throws COMException { 
 	 	 HRESULT hr ; 
 
 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; 
 @ @ - 117 , 28 + 117 , 28 @ @ public class MSWord extends COMObject { 
 	 
 	 public class Application extends COMObject { 
 
 - 	 	 public Application ( IDispatch iDispatch ) throws AutomationException { 
 + 	 	 public Application ( IDispatch iDispatch ) throws COMException { 
 	 	 	 super ( iDispatch ) ; 
 	 	 } 
 	 } 
 	 
 	 public class Documents extends COMObject { 
 
 - 	 	 public Documents ( IDispatch iDispatch ) throws AutomationException { 
 + 	 	 public Documents ( IDispatch iDispatch ) throws COMException { 
 	 	 	 super ( iDispatch ) ; 
 	 	 } 
 	 } 
 
 	 public class ActiveDocument extends COMObject { 
 
 - 	 	 public ActiveDocument ( IDispatch iDispatch ) throws AutomationException { 
 + 	 	 public ActiveDocument ( IDispatch iDispatch ) throws COMException { 
 	 	 	 super ( iDispatch ) ; 
 	 	 } 
 	 } 
 
 	 public class Selection extends COMObject { 
 
 - 	 	 public Selection ( IDispatch iDispatch ) throws AutomationException { 
 + 	 	 public Selection ( IDispatch iDispatch ) throws COMException { 
 	 	 	 super ( iDispatch ) ; 
 	 	 } 
 	 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / AutomationException . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / AutomationException . java 
 deleted file mode 100644 
 index 0098e98 . . 0000000 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / AutomationException . java 
 + + + / dev / null 
 @ @ - 1 , 97 + 0 , 0 @ @ 
 - package com . sun . jna . platform . win32 . COM ; 
 - 
 - import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; 
 - import com . sun . jna . ptr . IntByReference ; 
 - 
 - / / TODO : Auto - generated Javadoc 
 - / * * 
 - * The Class AutomationException . 
 - * / 
 - public class AutomationException extends RuntimeException { 
 - 
 - 	 / * * The p excep info . * / 
 - 	 private EXCEPINFO pExcepInfo ; 
 - 
 - 	 / * * The pu arg err . * / 
 - 	 private IntByReference puArgErr ; 
 - 
 - 	 / * * 
 - 	 * Instantiates a new automation exception . 
 - 	 * / 
 - 	 public AutomationException ( ) { 
 - 	 	 super ( ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Instantiates a new automation exception . 
 - 	 * 
 - 	 * @ param message the message 
 - 	 * @ param cause the cause 
 - 	 * @ param enableSuppression the enable suppression 
 - 	 * @ param writableStackTrace the writable stack trace 
 - 	 * / 
 - 	 public AutomationException ( String message , Throwable cause , 
 - 	 	 	 boolean enableSuppression , boolean writableStackTrace ) { 
 - 	 	 super ( message , cause , enableSuppression , writableStackTrace ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Instantiates a new automation exception . 
 - 	 * 
 - 	 * @ param message the message 
 - 	 * @ param cause the cause 
 - 	 * / 
 - 	 public AutomationException ( String message , Throwable cause ) { 
 - 	 	 super ( message , cause ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Instantiates a new automation exception . 
 - 	 * 
 - 	 * @ param message the message 
 - 	 * / 
 - 	 public AutomationException ( String message ) { 
 - 	 	 super ( message ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Instantiates a new automation exception . 
 - 	 * 
 - 	 * @ param message the message 
 - 	 * @ param pExcepInfo the excep info 
 - 	 * @ param puArgErr the pu arg err 
 - 	 * / 
 - 	 public AutomationException ( String message , EXCEPINFO pExcepInfo , 
 - 	 	 	 IntByReference puArgErr ) { 
 - 	 	 super ( message ) ; 
 - 	 	 this . pExcepInfo = pExcepInfo ; 
 - 	 	 this . puArgErr = puArgErr ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Instantiates a new automation exception . 
 - 	 * 
 - 	 * @ param cause the cause 
 - 	 * / 
 - 	 public AutomationException ( Throwable cause ) { 
 - 	 	 super ( cause ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Gets the excep info . 
 - 	 * 
 - 	 * @ return the excep info 
 - 	 * / 
 - 	 public EXCEPINFO getExcepInfo ( ) { 
 - 	 	 return pExcepInfo ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Gets the arg err . 
 - 	 * 
 - 	 * @ return the arg err 
 - 	 * / 
 - 	 public IntByReference getArgErr ( ) { 
 - 	 	 return puArgErr ; 
 - 	 } 
 - } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java 
 new file mode 100644 
 index 0000000 . . 5429b51 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java 
 @ @ - 0 , 0 + 1 , 121 @ @ 
 + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 . COM ; 
 + 
 + import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + 
 + / * * 
 + * Exception class for all COM related classes . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 + * / 
 + public class COMException extends RuntimeException { 
 + 
 + 	 / * * The p excep info . * / 
 + 	 private EXCEPINFO pExcepInfo ; 
 + 
 + 	 / * * The pu arg err . * / 
 + 	 private IntByReference puArgErr ; 
 + 
 + 	 / * * 
 + 	 * Instantiates a new automation exception . 
 + 	 * / 
 + 	 public COMException ( ) { 
 + 	 	 super ( ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Instantiates a new automation exception . 
 + 	 * 
 + 	 * @ param message 
 + 	 * the message 
 + 	 * @ param cause 
 + 	 * the cause 
 + 	 * @ param enableSuppression 
 + 	 * the enable suppression 
 + 	 * @ param writableStackTrace 
 + 	 * the writable stack trace 
 + 	 * / 
 + 	 public COMException ( String message , Throwable cause , 
 + 	 	 	 boolean enableSuppression , boolean writableStackTrace ) { 
 + 	 	 super ( message , cause , enableSuppression , writableStackTrace ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Instantiates a new automation exception . 
 + 	 * 
 + 	 * @ param message 
 + 	 * the message 
 + 	 * @ param cause 
 + 	 * the cause 
 + 	 * / 
 + 	 public COMException ( String message , Throwable cause ) { 
 + 	 	 super ( message , cause ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Instantiates a new automation exception . 
 + 	 * 
 + 	 * @ param message 
 + 	 * the message 
 + 	 * / 
 + 	 public COMException ( String message ) { 
 + 	 	 super ( message ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Instantiates a new automation exception . 
 + 	 * 
 + 	 * @ param message 
 + 	 * the message 
 + 	 * @ param pExcepInfo 
 + 	 * the excep info 
 + 	 * @ param puArgErr 
 + 	 * the pu arg err 
 + 	 * / 
 + 	 public COMException ( String message , EXCEPINFO pExcepInfo , 
 + 	 	 	 IntByReference puArgErr ) { 
 + 	 	 super ( message ) ; 
 + 	 	 this . pExcepInfo = pExcepInfo ; 
 + 	 	 this . puArgErr = puArgErr ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Instantiates a new automation exception . 
 + 	 * 
 + 	 * @ param cause 
 + 	 * the cause 
 + 	 * / 
 + 	 public COMException ( Throwable cause ) { 
 + 	 	 super ( cause ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Gets the excep info . 
 + 	 * 
 + 	 * @ return the excep info 
 + 	 * / 
 + 	 public EXCEPINFO getExcepInfo ( ) { 
 + 	 	 return pExcepInfo ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Gets the arg err . 
 + 	 * 
 + 	 * @ return the arg err 
 + 	 * / 
 + 	 public IntByReference getArgErr ( ) { 
 + 	 	 return puArgErr ; 
 + 	 } 
 + } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMObject . java 
 index a9eb143 . . 79fdd43 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMObject . java 
 @ @ - 1 , 3 + 1 , 15 @ @ 
 + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 package com . sun . jna . platform . win32 . COM ; 
 
 import com . sun . jna . Native ; 
 @ @ - 21 , 15 + 33 , 20 @ @ import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 import com . sun . jna . ptr . IntByReference ; 
 import com . sun . jna . ptr . PointerByReference ; 
 
 + / * * 
 + * Helper class to provide basic COM support . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 + * / 
 public class COMObject { 
 
 	 public final static LCID LOCALE _ USER _ DEFAULT = Kernel32 . INSTANCE 
 	 	 	 . GetUserDefaultLCID ( ) ; 
 	 public final static LCID LOCALE _ SYSTEM _ DEFAULT = Kernel32 . INSTANCE 
 	 	 	 . GetSystemDefaultLCID ( ) ; 
 - 	 
 + 
 	 protected IUnknown iUnknown ; 
 - 	 
 + 
 	 protected IDispatch iDispatch ; 
 
 	 private PointerByReference pDispatch = new PointerByReference ( ) ; 
 @ @ - 42 , 13 + 59 , 16 @ @ public class COMObject { 
 
 	 / * * 
 	 * Instantiates a new cOM object . 
 - 	 * 
 - 	 * @ param progId the prog id 
 - 	 * @ param useActiveInstance the use active instance 
 - 	 * @ throws AutomationException the automation exception 
 + 	 * 
 + 	 * @ param progId 
 + 	 * the prog id 
 + 	 * @ param useActiveInstance 
 + 	 * the use active instance 
 + 	 * @ throws COMException 
 + 	 * the automation exception 
 	 * / 
 	 public COMObject ( String progId , boolean useActiveInstance ) 
 - 	 	 	 throws AutomationException { 
 + 	 	 	 throws COMException { 
 	 	 / / enable JNA protected mode 
 	 	 Native . setProtected ( true ) ; 
 
 @ @ - 57 , 7 + 77 , 7 @ @ public class COMObject { 
 
 	 	 if ( COMUtils . FAILED ( hr ) ) { 
 	 	 	 this . release ( ) ; 
 - 	 	 	 throw new AutomationException ( " CoInitialize ( ) failed ! " ) ; 
 + 	 	 	 throw new COMException ( " CoInitialize ( ) failed ! " ) ; 
 	 	 } 
 
 	 	 / / Get CLSID for Word . Application . . . 
 @ @ - 66 , 7 + 86 , 7 @ @ public class COMObject { 
 
 	 	 if ( COMUtils . FAILED ( hr ) ) { 
 	 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; 
 - 	 	 	 throw new AutomationException ( " CLSIDFromProgID ( ) failed ! " ) ; 
 + 	 	 	 throw new COMException ( " CLSIDFromProgID ( ) failed ! " ) ; 
 	 	 } 
 
 	 	 if ( useActiveInstance ) { 
 @ @ - 74 , 7 + 94 , 8 @ @ public class COMObject { 
 
 	 	 	 if ( COMUtils . SUCCEEDED ( hr ) ) { 
 	 	 	 	 this . iUnknown = new IUnknown ( this . pUnknown . getValue ( ) ) ; 
 - 	 	 	 	 hr = iUnknown . QueryInterface ( IDispatch . IID _ IDispatch , this . pDispatch ) ; 
 + 	 	 	 	 hr = iUnknown . QueryInterface ( IDispatch . IID _ IDispatch , 
 + 	 	 	 	 	 	 this . pDispatch ) ; 
 	 	 	 } else { 
 	 	 	 	 hr = Ole32 . INSTANCE . CoCreateInstance ( clsid , null , 
 	 	 	 	 	 	 WTypes . CLSCTX _ LOCAL _ SERVER , IDispatch . IID _ IDispatch , 
 @ @ - 87 , 7 + 108 , 7 @ @ public class COMObject { 
 	 	 } 
 
 	 	 if ( COMUtils . FAILED ( hr ) ) { 
 - 	 	 	 throw new AutomationException ( " COM object ' " + progId 
 + 	 	 	 throw new COMException ( " COM object ' " + progId 
 	 	 	 	 	 + " ' not registered properly ! " ) ; 
 	 	 } 
 
 @ @ - 96 , 10 + 117 , 10 @ @ public class COMObject { 
 
 	 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 	 	 	 IDispatch pDisp , String name , VARIANT [ ] pArgs ) 
 - 	 	 	 throws AutomationException { 
 + 	 	 	 throws COMException { 
 
 	 	 if ( pDisp = = null ) 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " pDisp ( IDispatch ) parameter is null ! " ) ; 
 
 	 	 WString [ ] ptName = new WString [ ] { new WString ( name ) } ; 
 @ @ - 143 , 14 + 164 , 14 @ @ public class COMObject { 
 
 	 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 	 	 	 IDispatch pDisp , String name , VARIANT pArg ) 
 - 	 	 	 throws AutomationException { 
 + 	 	 	 throws COMException { 
 
 	 	 return this . oleMethod ( nType , pvResult , pDisp , name , 
 	 	 	 	 new VARIANT [ ] { pArg } ) ; 
 	 } 
 
 	 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 - 	 	 	 IDispatch pDisp , String name ) throws AutomationException { 
 + 	 	 	 IDispatch pDisp , String name ) throws COMException { 
 
 	 	 return this . oleMethod ( nType , pvResult , pDisp , name , ( VARIANT [ ] ) null ) ; 
 	 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 index afd54d8 . . 3cd0631 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 @ @ - 171 , 62 + 171 , 62 @ @ public abstract class COMUtils { 
 	 	 case S _ OK : 
 	 	 	 return ; 
 	 	 case E _ NOTIMPL : 
 - 	 	 	 throw new AutomationException ( " Not implemented ! " ) ; 
 + 	 	 	 throw new COMException ( " Not implemented ! " ) ; 
 	 	 case E _ INVALIDARG : 
 - 	 	 	 throw new AutomationException ( " Invalid argument ! " ) ; 
 + 	 	 	 throw new COMException ( " Invalid argument ! " ) ; 
 	 	 case E _ OUTOFMEMORY : 
 - 	 	 	 throw new AutomationException ( " Out of memory ! " ) ; 
 + 	 	 	 throw new COMException ( " Out of memory ! " ) ; 
 	 	 case E _ UNEXPECTED : 
 - 	 	 	 throw new AutomationException ( " Error " 
 + 	 	 	 throw new COMException ( " Error " 
 	 	 	 	 	 + Integer . toHexString ( hr . intValue ( ) ) ) ; 
 	 	 case CO _ E _ NOTINITIALIZED : 
 - 	 	 	 throw new AutomationException ( " CoInitialized wasn ' t called ! " ) ; 
 + 	 	 	 throw new COMException ( " CoInitialized wasn ' t called ! " ) ; 
 	 	 case E _ NOINTERFACE : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " Interface does not inherit from class ! " ) ; 
 	 	 case E _ POINTER : 
 - 	 	 	 throw new AutomationException ( " Allocated pointer pointer is null ! " ) ; 
 + 	 	 	 throw new COMException ( " Allocated pointer pointer is null ! " ) ; 
 	 	 case DISP _ E _ UNKNOWNNAME : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " One or more of the names were not known . The returned array of DISPIDs contains DISPID _ UNKNOWN for each entry that corresponds to an unknown name ! " ) ; 
 	 	 case DISP _ E _ UNKNOWNLCID : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " The locale identifier ( LCID ) was not recognized ! " ) ; 
 	 	 case DISP _ E _ BADPARAMCOUNT : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " The number of elements provided to DISPPARAMS is different from the number of arguments accepted by the method or property ! " ) ; 
 	 	 case DISP _ E _ BADVARTYPE : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " One of the arguments in DISPPARAMS is not a valid variant type ! " ) ; 
 	 	 case DISP _ E _ EXCEPTION : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " The application needs to raise an exception . In this case , the structure passed in pexcepinfo should be filled in ! " , 
 	 	 	 	 	 pExcepInfo , puArgErr ) ; 
 	 	 case DISP _ E _ MEMBERNOTFOUND : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " The requested member does not exist ! " ) ; 
 	 	 case DISP _ E _ NONAMEDARGS : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " This implementation of IDispatch does not support named arguments ! " ) ; 
 	 	 case DISP _ E _ OVERFLOW : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " One of the arguments in DISPPARAMS could not be coerced to the specified type ! " ) ; 
 	 	 case DISP _ E _ PARAMNOTFOUND : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " One of the parameter IDs does not correspond to a parameter on the method . In this case , puArgErr is set to the first argument that contains the error ! " , 
 	 	 	 	 	 pExcepInfo , puArgErr ) ; 
 	 	 case DISP _ E _ TYPEMISMATCH : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " One or more of the arguments could not be coerced . The index of the first parameter with the incorrect type within rgvarg is returned in puArgErr ! " , 
 	 	 	 	 	 pExcepInfo , puArgErr ) ; 
 	 	 case DISP _ E _ UNKNOWNINTERFACE : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " The interface identifier passed in riid is not IID _ NULL ! " ) ; 
 	 	 case CO _ E _ OBJNOTCONNECTED : 
 - 	 	 	 throw new AutomationException ( 
 + 	 	 	 throw new COMException ( 
 	 	 	 	 	 " The method is not connected to the Dispatch pointer ! " ) ; 
 	 	 default : 
 - 	 	 	 throw new AutomationException ( " Unexpected COM error code : " 
 + 	 	 	 throw new COMException ( " Unexpected COM error code : " 
 	 	 	 	 	 + hr . intValue ( ) ) ; 
 	 	 } 
 	 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java 
 index b78b501 . . 1586b7d 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java 
 @ @ - 1 , 3 + 1 , 15 @ @ 
 + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 package com . sun . jna . platform . win32 . COM ; 
 
 import com . sun . jna . Function ; 
 @ @ - 16 , 10 + 28 , 13 @ @ import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 import com . sun . jna . ptr . IntByReference ; 
 import com . sun . jna . ptr . PointerByReference ; 
 
 - / / TODO : Auto - generated Javadoc 
 / * * 
 - * * IDispatch . GetTypeInfoCount 12 IDispatch . GetTypeInfo 16 
 + * Wrapper class for the IDispatch interface 
 + * 
 + * IDispatch . GetTypeInfoCount 12 IDispatch . GetTypeInfo 16 
 * IDispatch . GetIDsOfNames 20 IDispatch . Invoke 24 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public class IDispatch extends IUnknown { 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IRecordInfo . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IRecordInfo . java 
 index ac23528 . . 6516bd8 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IRecordInfo . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IRecordInfo . java 
 @ @ - 1 , 3 + 1 , 15 @ @ 
 + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 package com . sun . jna . platform . win32 . COM ; 
 
 import com . sun . jna . Pointer ; 
 @ @ - 11 , 9 + 23 , 10 @ @ import com . sun . jna . platform . win32 . WinDef . PVOID ; 
 import com . sun . jna . platform . win32 . WinDef . ULONG ; 
 import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 
 - / / TODO : Auto - generated Javadoc 
 / * * 
 - * The Class IRecordInfo . 
 + * Wrapper class for the IRecordInfo interface 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public class IRecordInfo extends IUnknown { 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java 
 index 811f454 . . a3548e9 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java 
 @ @ - 1 , 10 + 1 , 23 @ @ 
 + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 package com . sun . jna . platform . win32 . COM ; 
 
 import com . sun . jna . Pointer ; 
 
 - / / TODO : Auto - generated Javadoc 
 / * * 
 - * The Class ITypeInfo . 
 + * Wrapper class for the ITypeInfo interface 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public class ITypeInfo extends IUnknown { 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java 
 index 5d24270 . . ba06c09 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java 
 @ @ - 17 , 17 + 17 , 16 @ @ import com . sun . jna . Pointer ; 
 import com . sun . jna . PointerType ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . platform . win32 . Guid . IID ; 
 - import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 import com . sun . jna . ptr . PointerByReference ; 
 
 - / / TODO : Auto - generated Javadoc 
 / * * 
 - * The Class IUnknown . 
 + * Wrapper class for the ITypeInfo interface 
 * 
 * Method Name V - Table Offset IUnknown . QueryInterface 0 IUnknown . AddRef 4 
 * IUnknown . Release 8 
 * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public class IUnknown extends PointerType { 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / DBT . java b / contrib / platform / src / com / sun / jna / platform / win32 / DBT . java 
 index 608189a . . 0c0cd53 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / DBT . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / DBT . java 
 @ @ - 1 , 3 + 1 , 15 @ @ 
 + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 package com . sun . jna . platform . win32 ; 
 
 import java . util . Arrays ; 
 @ @ - 12 , 7 + 24 , 6 @ @ import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 import com . sun . jna . platform . win32 . WinUser . HDEVNOTIFY ; 
 import com . sun . jna . win32 . StdCallLibrary ; 
 
 - / / TODO : Auto - generated Javadoc 
 / * * 
 * Based on dbt . h ( various types ) 
 * 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java 
 index 1462971 . . 3b7ffb9 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java 
 @ @ - 17 , 7 + 17 , 7 @ @ import junit . framework . TestCase ; 
 import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 import com . sun . jna . platform . win32 . WinDef . SHORT ; 
 - import com . sun . jna . platform . win32 . COM . AutomationException ; 
 + import com . sun . jna . platform . win32 . COM . COMException ; 
 
 / * * 
 * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 @ @ - 41 , 7 + 41 , 7 @ @ public class OleAut32UtilTest extends TestCase { 
 	 	 	 	 VARIANT variant = new VARIANT ( new SHORT ( i + i * 100 ) ) ; 
 	 	 	 	 System . out . println ( variant . toString ( true ) ) ; 
 	 	 	 	 OleAut32Util . SafeArrayPutElement ( varArray , i , variant ) ; 
 - 	 	 	 } catch ( AutomationException e ) { 
 + 	 	 	 } catch ( COMException e ) { 
 	 	 	 	 e . printStackTrace ( ) ; 
 	 	 	 } 
 	 	 } 
 @ @ - 59 , 7 + 59 , 7 @ @ public class OleAut32UtilTest extends TestCase { 
 	 	 	 	 System . out . println ( element . toString ( true ) ) ; 
 	 	 	 	 System . out . println ( " variant type : " + element . getVarType ( ) ) ; 
 	 	 	 	 System . out . println ( " value : " + element . getValue ( ) ) ; 
 - 	 	 	 } catch ( AutomationException e ) { 
 + 	 	 	 } catch ( COMException e ) { 
 	 	 	 	 e . printStackTrace ( ) ; 
 	 	 	 } 
 	 	 } 
 diff - - git a / test / com / sun / jna / win32 / IUknownTest . java b / test / com / sun / jna / win32 / IUknownTest . java 
 index 8edb9eb . . f9e790c 100644 
 - - - a / test / com / sun / jna / win32 / IUknownTest . java 
 + + + b / test / com / sun / jna / win32 / IUknownTest . java 
 @ @ - 20 , 7 + 20 , 7 @ @ import com . sun . jna . platform . win32 . Ole32 ; 
 import com . sun . jna . platform . win32 . W32Errors ; 
 import com . sun . jna . platform . win32 . WTypes ; 
 import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 - import com . sun . jna . platform . win32 . COM . AutomationException ; 
 + import com . sun . jna . platform . win32 . COM . COMException ; 
 import com . sun . jna . platform . win32 . COM . IDispatch ; 
 import com . sun . jna . ptr . PointerByReference ; 
 
 @ @ - 42 , 7 + 42 , 7 @ @ public class IUknownTest extends TestCase { 
 
 	 	 if ( W32Errors . FAILED ( hr ) ) { 
 	 	 	 this . tearDown ( ) ; 
 - 	 	 	 throw new AutomationException ( " CoInitialize ( ) failed " ) ; 
 + 	 	 	 throw new COMException ( " CoInitialize ( ) failed " ) ; 
 	 	 } 
 
 	 	 / / Get CLSID for Word . Application . . . 
 @ @ - 52 , 7 + 52 , 7 @ @ public class IUknownTest extends TestCase { 
 
 	 	 if ( W32Errors . FAILED ( hr ) ) { 
 	 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; 
 - 	 	 	 throw new AutomationException ( " CLSIDFromProgID ( ) failed ! " ) ; 
 + 	 	 	 throw new COMException ( " CLSIDFromProgID ( ) failed ! " ) ; 
 	 	 } 
 
 	 	 hr = Ole32 . INSTANCE . CoCreateInstance ( clsid , null , 
 @ @ - 60 , 7 + 60 , 7 @ @ public class IUknownTest extends TestCase { 
 	 	 	 	 this . pDispatch ) ; 
 
 	 	 if ( W32Errors . FAILED ( hr ) ) { 
 - 	 	 	 throw new AutomationException ( " Internet Explorer not registered properly ! " ) ; 
 + 	 	 	 throw new COMException ( " Internet Explorer not registered properly ! " ) ; 
 	 	 } 
 
 	 	 this . iDispatch = new IDispatch ( pDispatch . getPointer ( ) ) ;
