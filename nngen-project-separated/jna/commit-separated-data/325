BLEU SCORE: 0.05341087579952926

TEST MSG: add unsigned option for NativeLong
GENERATED MSG: Add native long by reference

TEST DIFF (one line): diff - - git a / src / com / sun / jna / NativeLong . java b / src / com / sun / jna / NativeLong . java <nl> index 0a4b95f . . 2d9dd17 100644 <nl> - - - a / src / com / sun / jna / NativeLong . java <nl> + + + b / src / com / sun / jna / NativeLong . java <nl> @ @ - 29 , 6 + 29 , 11 @ @ public class NativeLong extends IntegerType { <nl> <nl> / * * Create a NativeLong with the given value . * / <nl> public NativeLong ( long value ) { <nl> - super ( SIZE , value ) ; <nl> + this ( value , false ) ; <nl> + } <nl> + <nl> + / * * Create a NativeLong with the given value , optionally unsigned . * / <nl> + public NativeLong ( long value , boolean unsigned ) { <nl> + super ( SIZE , value , unsigned ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / src / com / sun / jna / overview . html b / jnalib / src / com / sun / jna / overview . html <nl> index f303376 . . 524cda5 100644 <nl> - - - a / jnalib / src / com / sun / jna / overview . html <nl> + + + b / jnalib / src / com / sun / jna / overview . html <nl> @ @ - 36 , 15 + 36 , 15 @ @ public interface CLibrary extends Library { <nl> < / pre > < / code > <nl> The < code > String < / code > passed to the < code > Native . loadLibrary < / code > method <nl> is the undecorated name of the shared library file . Here are some examples of <nl> - library name mappings . To make sure you ' ve correctly mapped the name , you can <nl> - double - check that < code > System . mapLibraryName < / code > returns the name of the <nl> - library file . <nl> + library name mappings . <nl> < table > <nl> < tr > < td > < b > OS < / b > < / td > < td > < b > Library Name < / b > < / td > < td > < b > String < / b > < / td > < / tr > <nl> < tr > < td > Windows < / td > < td > user32 . dll < / td > < td > user32 < / td > < / tr > <nl> < tr > < td > Linux < / td > < td > libX11 . so < / td > < td > X11 < / td > < / tr > <nl> < tr > < td > Mac OS X < / td > < td > libm . dylib < / td > < td > m < / td > < / tr > <nl> < / table > <nl> + < p > <nl> + Any given native library with a unique filesystem path is represented by a single instance of { @ link NativeLibrary } and obtained via { @ link NativeLibrary # getInstance ( ) } . The native library will be unloaded when no longer referenced by any Java code . <nl> <nl> < h2 > Function Mapping < / h2 > <nl> Function names are mapped directly from their Java interface name to the <nl> @ @ - 59 , 7 + 59 , 8 @ @ If you prefer to rename the Java methods to conform to Java coding <nl> conventions , then you can provide a < code > Map < / code > to <nl> < code > Native . loadLibrary < / code > which maps the Java names to the native <nl> names . While this keeps your Java code a little cleaner , the additional <nl> - mapping of names may make a little less obvious the native functions being called . <nl> + mapping of names may make a little less obvious the native functions being called . < p > <nl> + An instance of the { @ link Function } class is obtained through the { @ link NativeLibrary } instance corresponding to the containing native library . This { @ link Function } instance handles argument marshalling and delegation to the native function . <nl> <nl> < h2 > Function Argument Mapping ( Java to Native Type Conversions , or Marshalling / Unmarshalling ) < / h2 > <nl> Java types are chosen to match native types of the same size . These are the <nl> @ @ - 122 , 9 + 123 , 12 @ @ consistency , the { @ link com . sun . jna . WString } type is used in both cases . <nl> <nl> < h3 > Buffers / Memory Blocks < / h3 > <nl> Use arrays to represent buffers of primitive types . A native method cannot <nl> - return a Java array , since there is no canonical way to indicate the intendend <nl> + return a Java array , since there is no canonical way to indicate the intended <nl> length of the returned array . Instead , use one of the array access methods in <nl> - the Pointer class , supplying the length of the returned array . <nl> + the Pointer class , supplying the length of the returned array . < p > <nl> + { @ link java . nio . ByteBuffer } s may also be used as a memory buffer input <nl> + argument ; direct byte buffers can often provide much improved performance over <nl> + primitive arrays . <nl> <nl> < h3 > Structures < / h3 > <nl>

TEST DIFF:
diff - - git a / src / com / sun / jna / NativeLong . java b / src / com / sun / jna / NativeLong . java 
 index 0a4b95f . . 2d9dd17 100644 
 - - - a / src / com / sun / jna / NativeLong . java 
 + + + b / src / com / sun / jna / NativeLong . java 
 @ @ - 29 , 6 + 29 , 11 @ @ public class NativeLong extends IntegerType { 
 
 / * * Create a NativeLong with the given value . * / 
 public NativeLong ( long value ) { 
 - super ( SIZE , value ) ; 
 + this ( value , false ) ; 
 + } 
 + 
 + / * * Create a NativeLong with the given value , optionally unsigned . * / 
 + public NativeLong ( long value , boolean unsigned ) { 
 + super ( SIZE , value , unsigned ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / jnalib / src / com / sun / jna / overview . html b / jnalib / src / com / sun / jna / overview . html 
 index f303376 . . 524cda5 100644 
 - - - a / jnalib / src / com / sun / jna / overview . html 
 + + + b / jnalib / src / com / sun / jna / overview . html 
 @ @ - 36 , 15 + 36 , 15 @ @ public interface CLibrary extends Library { 
 < / pre > < / code > 
 The < code > String < / code > passed to the < code > Native . loadLibrary < / code > method 
 is the undecorated name of the shared library file . Here are some examples of 
 - library name mappings . To make sure you ' ve correctly mapped the name , you can 
 - double - check that < code > System . mapLibraryName < / code > returns the name of the 
 - library file . 
 + library name mappings . 
 < table > 
 < tr > < td > < b > OS < / b > < / td > < td > < b > Library Name < / b > < / td > < td > < b > String < / b > < / td > < / tr > 
 < tr > < td > Windows < / td > < td > user32 . dll < / td > < td > user32 < / td > < / tr > 
 < tr > < td > Linux < / td > < td > libX11 . so < / td > < td > X11 < / td > < / tr > 
 < tr > < td > Mac OS X < / td > < td > libm . dylib < / td > < td > m < / td > < / tr > 
 < / table > 
 + < p > 
 + Any given native library with a unique filesystem path is represented by a single instance of { @ link NativeLibrary } and obtained via { @ link NativeLibrary # getInstance ( ) } . The native library will be unloaded when no longer referenced by any Java code . 
 
 < h2 > Function Mapping < / h2 > 
 Function names are mapped directly from their Java interface name to the 
 @ @ - 59 , 7 + 59 , 8 @ @ If you prefer to rename the Java methods to conform to Java coding 
 conventions , then you can provide a < code > Map < / code > to 
 < code > Native . loadLibrary < / code > which maps the Java names to the native 
 names . While this keeps your Java code a little cleaner , the additional 
 - mapping of names may make a little less obvious the native functions being called . 
 + mapping of names may make a little less obvious the native functions being called . < p > 
 + An instance of the { @ link Function } class is obtained through the { @ link NativeLibrary } instance corresponding to the containing native library . This { @ link Function } instance handles argument marshalling and delegation to the native function . 
 
 < h2 > Function Argument Mapping ( Java to Native Type Conversions , or Marshalling / Unmarshalling ) < / h2 > 
 Java types are chosen to match native types of the same size . These are the 
 @ @ - 122 , 9 + 123 , 12 @ @ consistency , the { @ link com . sun . jna . WString } type is used in both cases . 
 
 < h3 > Buffers / Memory Blocks < / h3 > 
 Use arrays to represent buffers of primitive types . A native method cannot 
 - return a Java array , since there is no canonical way to indicate the intendend 
 + return a Java array , since there is no canonical way to indicate the intended 
 length of the returned array . Instead , use one of the array access methods in 
 - the Pointer class , supplying the length of the returned array . 
 + the Pointer class , supplying the length of the returned array . < p > 
 + { @ link java . nio . ByteBuffer } s may also be used as a memory buffer input 
 + argument ; direct byte buffers can often provide much improved performance over 
 + primitive arrays . 
 
 < h3 > Structures < / h3 > 

