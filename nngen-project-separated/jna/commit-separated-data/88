BLEU SCORE: 0.007228376004244835

TEST MSG: Update building instructions for windows
GENERATED MSG: Move MSVC build to standard stdbool . h and require Visual C + + 2015

TEST DIFF (one line): diff - - git a / www / WindowsDevelopmentEnvironment . md b / www / WindowsDevelopmentEnvironment . md <nl> index 57f49f3 . . b94d2a5 100644 <nl> - - - a / www / WindowsDevelopmentEnvironment . md <nl> + + + b / www / WindowsDevelopmentEnvironment . md <nl> @ @ - 1 , 16 + 1 , 16 @ @ <nl> - # # Setting up a Windows Development Environment <nl> + Setting up a Windows Development Environment <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> <nl> - # # # # Java <nl> + Java <nl> + - - - - <nl> <nl> For a 32 - bit build , set ` JAVA _ HOME ` to a 32 - bit JDK , eg . ` C : \ Program Files ( x86 ) \ java \ jdk1 . 6 . 0 _ 24 ` . <nl> For a 64 - bit build , set ` JAVA _ HOME ` to a 64 - bit JDK , eg . ` C : \ Program Files \ java \ jdk1 . 6 . 0 _ 24 ` . <nl> <nl> - # # # # Native <nl> - <nl> - MSVC <nl> - - - - - <nl> + Native <nl> + - - - - - - <nl> <nl> - # # # # Visual Studio <nl> + # # # MSVC / Visual Studio <nl> <nl> JNA uses the free MS Visual Studio C + + Express compiler to compile <nl> native bits if MSVC is set in the environment . The MS compiler provides <nl> @ @ - 38 , 7 + 38 , 7 @ @ export LIB = " $ ( cygpath - m " $ MSVC " ) / lib / amd64 ; $ ( cygpath - m " $ WSDK _ 64 " ) / lib / x64 " <nl> export LIB = " $ ( cygpath - m " $ MSVC " ) / lib ; $ ( cygpath - m " $ WSDK " ) / lib " <nl> ` ` ` <nl> <nl> - # # # # mingw <nl> + # # # mingw <nl> <nl> Install [ cygwin ] ( http : / / www . cygwin . com / ) . <nl> <nl> @ @ - 65 , 21 + 65 , 23 @ @ Recipe for building on windows <nl> This is the contents of a note I made for myself to be able to build JNA on <nl> windows . <nl> <nl> + This builds the library based on the Visual C + + compiler . <nl> + <nl> < pre > <nl> - 0 . Start - Point : A clean Windows 10 Installation with all patches as of 2016 - 06 - 10 <nl> + 0 . Start - Point : A clean Windows 10 Installation with all patches as of 2017 - 11 - 05 <nl> 1 . Install Visual C + + Build Tools 2015 ( http : / / landinghub . visualstudio . com / visual - cpp - build - tools ) ( the 8 . 1 SDK is enough ) <nl> - 2 . Install Oracle JDK 8u121 ( 64 bit ) <nl> - 3 . Install Cygwin ( https : / / cygwin . com / install . html ) <nl> + 2 . Install Oracle JDK 8u152 ( 64 bit ) <nl> + 3 . Install Cygwin 64 Bit ( https : / / cygwin . com / install . html ) <nl> 	 - make <nl> 	 - automake <nl> 	 - automake1 . 15 <nl> 	 - libtool <nl> - 	 - mingw64 - x86 _ 64 - gcc - g + + ( Version 5 . 4 . 0 - 3 ) <nl> - 	 - mingw64 - x86 _ 64 - gcc - core ( Version 5 . 4 . 0 - 2 ) <nl> + 	 - mingw64 - x86 _ 64 - gcc - g + + ( Version 5 . 4 . 0 - 4 ) <nl> + 	 - mingw64 - x86 _ 64 - gcc - core ( Version 5 . 4 . 0 - 4 ) <nl> 	 - gcc - g + + <nl> 	 - diffutils <nl> - git <nl> - 4 . Ensure ant , maven , cygwin are accessible from the PATH <nl> + 4 . Ensure ant , maven , cygwin ( 64 Bit ! ) are accessible from the PATH <nl> 5 . Run <nl> 	 " C : \ Program Files ( x86 ) \ Microsoft Visual C + + Build Tools \ vcbuildtools . bat " x64 <nl> inside a windows command prompt <nl> @ @ - 88 , 14 + 90 , 25 @ @ windows . <nl> <nl> For 32bit : <nl> <nl> - - Install : <nl> - - mingw64 - i686 - gcc - g + + ( Version 5 . 4 . 0 - 3 ) <nl> - - mingw64 - i686 - gcc - core ( Version 5 . 4 . 0 - 2 ) <nl> - - Modify the recipe : <nl> - - Step 2 : <nl> - Install JDK 8u121 ( 32 bit ) <nl> - - Step 5 : <nl> - " C : \ Program Files ( x86 ) \ Microsoft Visual C + + Build Tools \ vcbuildtools . bat " x86 <nl> - - Step 6 : <nl> - Point JAVA _ HOME to the root of a 32 Bit JDK <nl> - < / pre > <nl> \ No newline at end of file <nl> + 0 . Start - Point : A clean Windows 10 Installation with all patches as of 2017 - 11 - 05 <nl> + 1 . Install Visual C + + Build Tools 2015 ( http : / / landinghub . visualstudio . com / visual - cpp - build - tools ) ( the 8 . 1 SDK is enough ) <nl> + 2 . Install Oracle JDK 8u152 ( 32 bit ) <nl> + 3 . Install Cygwin 32 Bit ( https : / / cygwin . com / install . html ) <nl> + 	 - make <nl> + 	 - automake <nl> + 	 - automake1 . 15 <nl> + 	 - libtool <nl> + - mingw64 - i686 - gcc - g + + ( Version 5 . 4 . 0 - 4 ) <nl> + - mingw64 - i686 - gcc - core ( Version 5 . 4 . 0 - 4 ) <nl> + 	 - gcc - g + + <nl> + 	 - diffutils <nl> + - git <nl> + 4 . Ensure ant , maven , cygwin ( 32 Bit ! ) are accessible from the PATH <nl> + 5 . Run <nl> + 	 " C : \ Program Files ( x86 ) \ Microsoft Visual C + + Build Tools \ vcbuildtools . bat " x86 <nl> + inside a windows command prompt <nl> + 6 . Point JAVA _ HOME to the root of a 32 Bit JDK <nl> + 7 . Run native build <nl> + < / pre > <nl> + <nl> + To build without Visual C + + , using only Cygwin , just skip steps 1 and 5 . <nl> \ No newline at end of file
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / www / WindowsDevelopmentEnvironment . md b / www / WindowsDevelopmentEnvironment . md 
 index 57f49f3 . . b94d2a5 100644 
 - - - a / www / WindowsDevelopmentEnvironment . md 
 + + + b / www / WindowsDevelopmentEnvironment . md 
 @ @ - 1 , 16 + 1 , 16 @ @ 
 - # # Setting up a Windows Development Environment 
 + Setting up a Windows Development Environment 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 
 - # # # # Java 
 + Java 
 + - - - - 
 
 For a 32 - bit build , set ` JAVA _ HOME ` to a 32 - bit JDK , eg . ` C : \ Program Files ( x86 ) \ java \ jdk1 . 6 . 0 _ 24 ` . 
 For a 64 - bit build , set ` JAVA _ HOME ` to a 64 - bit JDK , eg . ` C : \ Program Files \ java \ jdk1 . 6 . 0 _ 24 ` . 
 
 - # # # # Native 
 - 
 - MSVC 
 - - - - - 
 + Native 
 + - - - - - - 
 
 - # # # # Visual Studio 
 + # # # MSVC / Visual Studio 
 
 JNA uses the free MS Visual Studio C + + Express compiler to compile 
 native bits if MSVC is set in the environment . The MS compiler provides 
 @ @ - 38 , 7 + 38 , 7 @ @ export LIB = " $ ( cygpath - m " $ MSVC " ) / lib / amd64 ; $ ( cygpath - m " $ WSDK _ 64 " ) / lib / x64 " 
 export LIB = " $ ( cygpath - m " $ MSVC " ) / lib ; $ ( cygpath - m " $ WSDK " ) / lib " 
 ` ` ` 
 
 - # # # # mingw 
 + # # # mingw 
 
 Install [ cygwin ] ( http : / / www . cygwin . com / ) . 
 
 @ @ - 65 , 21 + 65 , 23 @ @ Recipe for building on windows 
 This is the contents of a note I made for myself to be able to build JNA on 
 windows . 
 
 + This builds the library based on the Visual C + + compiler . 
 + 
 < pre > 
 - 0 . Start - Point : A clean Windows 10 Installation with all patches as of 2016 - 06 - 10 
 + 0 . Start - Point : A clean Windows 10 Installation with all patches as of 2017 - 11 - 05 
 1 . Install Visual C + + Build Tools 2015 ( http : / / landinghub . visualstudio . com / visual - cpp - build - tools ) ( the 8 . 1 SDK is enough ) 
 - 2 . Install Oracle JDK 8u121 ( 64 bit ) 
 - 3 . Install Cygwin ( https : / / cygwin . com / install . html ) 
 + 2 . Install Oracle JDK 8u152 ( 64 bit ) 
 + 3 . Install Cygwin 64 Bit ( https : / / cygwin . com / install . html ) 
 	 - make 
 	 - automake 
 	 - automake1 . 15 
 	 - libtool 
 - 	 - mingw64 - x86 _ 64 - gcc - g + + ( Version 5 . 4 . 0 - 3 ) 
 - 	 - mingw64 - x86 _ 64 - gcc - core ( Version 5 . 4 . 0 - 2 ) 
 + 	 - mingw64 - x86 _ 64 - gcc - g + + ( Version 5 . 4 . 0 - 4 ) 
 + 	 - mingw64 - x86 _ 64 - gcc - core ( Version 5 . 4 . 0 - 4 ) 
 	 - gcc - g + + 
 	 - diffutils 
 - git 
 - 4 . Ensure ant , maven , cygwin are accessible from the PATH 
 + 4 . Ensure ant , maven , cygwin ( 64 Bit ! ) are accessible from the PATH 
 5 . Run 
 	 " C : \ Program Files ( x86 ) \ Microsoft Visual C + + Build Tools \ vcbuildtools . bat " x64 
 inside a windows command prompt 
 @ @ - 88 , 14 + 90 , 25 @ @ windows . 
 
 For 32bit : 
 
 - - Install : 
 - - mingw64 - i686 - gcc - g + + ( Version 5 . 4 . 0 - 3 ) 
 - - mingw64 - i686 - gcc - core ( Version 5 . 4 . 0 - 2 ) 
 - - Modify the recipe : 
 - - Step 2 : 
 - Install JDK 8u121 ( 32 bit ) 
 - - Step 5 : 
 - " C : \ Program Files ( x86 ) \ Microsoft Visual C + + Build Tools \ vcbuildtools . bat " x86 
 - - Step 6 : 
 - Point JAVA _ HOME to the root of a 32 Bit JDK 
 - < / pre > 
 \ No newline at end of file 
 + 0 . Start - Point : A clean Windows 10 Installation with all patches as of 2017 - 11 - 05 
 + 1 . Install Visual C + + Build Tools 2015 ( http : / / landinghub . visualstudio . com / visual - cpp - build - tools ) ( the 8 . 1 SDK is enough ) 
 + 2 . Install Oracle JDK 8u152 ( 32 bit ) 
 + 3 . Install Cygwin 32 Bit ( https : / / cygwin . com / install . html ) 
 + 	 - make 
 + 	 - automake 
 + 	 - automake1 . 15 
 + 	 - libtool 
 + - mingw64 - i686 - gcc - g + + ( Version 5 . 4 . 0 - 4 ) 
 + - mingw64 - i686 - gcc - core ( Version 5 . 4 . 0 - 4 ) 
 + 	 - gcc - g + + 
 + 	 - diffutils 
 + - git 
 + 4 . Ensure ant , maven , cygwin ( 32 Bit ! ) are accessible from the PATH 
 + 5 . Run 
 + 	 " C : \ Program Files ( x86 ) \ Microsoft Visual C + + Build Tools \ vcbuildtools . bat " x86 
 + inside a windows command prompt 
 + 6 . Point JAVA _ HOME to the root of a 32 Bit JDK 
 + 7 . Run native build 
 + < / pre > 
 + 
 + To build without Visual C + + , using only Cygwin , just skip steps 1 and 5 . 
 \ No newline at end of file

NEAREST DIFF:
ELIMINATEDSENTENCE
