BLEU SCORE: 0.06567274736060397

TEST MSG: add javadoc dependency to platform . jar
GENERATED MSG: Added GetDriveType .

TEST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 3e4b15e . . 577c09c 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 429 , 7 + 429 , 7 @ @ osname = macos <nl> < / zip > <nl> < / target > <nl> <nl> - < target name = " platform - jar " depends = " jar " > <nl> + < target name = " platform - jar " depends = " jar , javadoc " > <nl> < subant target = " jar " failonerror = " true " > <nl> < property name = " file . reference . jna . build " location = " $ { build } " / > <nl> < property name = " file . reference . jna . jar " location = " $ { build } / $ { jar } " / > <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java <nl> index 977c7c2 . . 9a93575 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java <nl> @ @ - 280 , 7 + 280 , 7 @ @ public abstract class Kernel32Util implements WinDef { <nl> * / <nl> public static final String getPrivateProfileString ( final String lpAppName , final String lpKeyName , final String lpDefault , final String lpFileName ) { <nl> final char buffer [ ] = new char [ 1024 ] ; <nl> - Kernel32 . INSTANCE . GetPrivateProfileString ( appName , keyName , defaultValue , buffer , new DWORD ( buffer . length ) , fileName ) ; <nl> + Kernel32 . INSTANCE . GetPrivateProfileString ( lpAppName , lpKeyName , lpDefault , buffer , new DWORD ( buffer . length ) , lpFileName ) ; <nl> return Native . toString ( buffer ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 61324b5 . . 1b94414 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 876 , 12 + 876 , 12 @ @ osname = macos , <nl> < arg value = " org . apache . maven . plugins : maven - deploy - plugin : 2 . 7 : deploy - file " / > <nl> < arg value = " - Durl = $ { maven - snapshots - repository - url } " / > <nl> < arg value = " - DrepositoryId = $ { maven - snapshots - repository - id } " / > <nl> - < arg value = " - DpomFile = pom . xml " / > <nl> + < arg value = " - DpomFile = $ { pom } " / > <nl> < arg value = " - Dfile = $ { maven - jar } " / > <nl> < / artifact : mvn > <nl> < / target > <nl> <nl> - < ! - - before this , update project version ( both build . xml and pom . xml ) from SNAPSHOT to RELEASE - - > <nl> + < ! - - before this , update project version ( both build . xml and $ { pom } ) from SNAPSHOT to RELEASE - - > <nl> < target name = " stage " depends = " dist " description = " deploy release version to Maven staging repository " > <nl> < ! - - sign and deploy the main artifact - - > <nl> < artifact : mvn > <nl> diff - - git a / src / com / sun / jna / CallbackThreadInitializer . java b / src / com / sun / jna / CallbackThreadInitializer . java <nl> index 28537a3 . . 0c2ca7b 100644 <nl> - - - a / src / com / sun / jna / CallbackThreadInitializer . java <nl> + + + b / src / com / sun / jna / CallbackThreadInitializer . java <nl> @ @ - 11 , 22 + 11 , 22 @ @ package com . sun . jna ; <nl> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> * Lesser General Public License for more details . <nl> * / <nl> - / * * This class provides for customization of the mapping of native threads <nl> + / * * This class provides for customization of the mapping of native threads <nl> * onto attached Java threads . Use <nl> * { @ link Native # setCallbackThreadInitializer } to customize the thread context <nl> * in which a given callback is invoked . < p / > <nl> - * When a JNA callback is invoked on a native thread that is not currently <nl> + * When a JNA callback is invoked on a native thread that is not currently <nl> * tracked by the VM and a < code > CallbackThreadInitiailizer < / code > is <nl> * registered for that callback , the initializer object will be used to <nl> - * determine how the thread should be attached to the VM . < p / > . <nl> - * Once attached , the method { @ link Native # detach } may be used from within <nl> + * determine how the thread should be attached to the VM . < p / > <nl> + * Once attached , the method { @ link Native # detach } may be used from within <nl> * the callback invocation to alter whether the thread will be detached or not <nl> * when the callback finishes execution . Typically this functionality is used <nl> * in situations where you expect a callback to be called repeatedly from the <nl> * same thread and you want to avoid potential extra thread allocation <nl> * overhead on each callback invocation , since the VM may or may not re - use <nl> * the same allocated thread object each time the thread is attached . < p / > <nl> - * A single initializer may be used for multiple callbacks , one initializer <nl> + * A single initializer may be used for multiple callbacks , one initializer <nl> * per callback , or you may subclass the initializer to provide different <nl> * initializer settings depending on the callback . < p / > <nl> * / <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index b03c020 . . 306a4d9 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 1721 , 8 + 1721 , 8 @ @ public final class Native { <nl> Note : errno / SetLastError is used to signal the desired state ; this is <nl> a hack to make use of built - in thread - local storage to avoid having to <nl> re - implement it on certain platforms . < p / > <nl> - Warning : avoid calling { @ link # detach detach ( true ) } on a VM thread ; <nl> - the resulting behavior is not defined . < p / > <nl> + Warning : avoid calling { @ link # detach detach ( true ) } on threads <nl> + spawned by the JVM ; the resulting behavior is not defined . < p / > <nl> * / <nl> public static void detach ( boolean detach ) { <nl> setLastError ( detach ? THREAD _ DETACH : THREAD _ LEAVE _ ATTACHED ) ; <nl> diff - - git a / src / com / sun / jna / overview . html b / src / com / sun / jna / overview . html <nl> index fcf8a00 . . 6721479 100644 <nl> - - - a / src / com / sun / jna / overview . html <nl> + + + b / src / com / sun / jna / overview . html <nl> @ @ - 729 , 9 + 729 , 11 @ @ and { @ link com . sun . jna . Structure # writeField ( String ) } or { @ link <nl> com . sun . jna . Structure # writeField ( String , Object ) } to synch with just the fields <nl> of interest . <nl> < h3 > Throw exceptions on last error < / h3 > <nl> - If you are interested in the value of errno / GetLastError ( ) , declare your <nl> - method to throw LastErrorException , and call <nl> - { @ link com . sun . jna . Native # setPreserveLastError setPreserveLastError ( false ) } or set <nl> - the System property < code > jna . preserve _ last _ error = false < / code > . <nl> + To avoid the overhead of preserving the system last error information on every <nl> + native call , invoke <nl> + { @ link com . sun . jna . Native # setPreserveLastError setPreserveLastError ( false ) } or <nl> + set the System property < code > jna . preserve _ last _ error = false < / code > . < p / > <nl> + In those methods where you are interested in the value of errno / GetLastError ( ) , <nl> + declare your method to throw { @ link com . sun . jna . LastErrorException } . <nl> < / body > <nl> < / html >

TEST DIFF:
diff - - git a / build . xml b / build . xml 
 index 3e4b15e . . 577c09c 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 429 , 7 + 429 , 7 @ @ osname = macos 
 < / zip > 
 < / target > 
 
 - < target name = " platform - jar " depends = " jar " > 
 + < target name = " platform - jar " depends = " jar , javadoc " > 
 < subant target = " jar " failonerror = " true " > 
 < property name = " file . reference . jna . build " location = " $ { build } " / > 
 < property name = " file . reference . jna . jar " location = " $ { build } / $ { jar } " / > 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java 
 index 977c7c2 . . 9a93575 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java 
 @ @ - 280 , 7 + 280 , 7 @ @ public abstract class Kernel32Util implements WinDef { 
 * / 
 public static final String getPrivateProfileString ( final String lpAppName , final String lpKeyName , final String lpDefault , final String lpFileName ) { 
 final char buffer [ ] = new char [ 1024 ] ; 
 - Kernel32 . INSTANCE . GetPrivateProfileString ( appName , keyName , defaultValue , buffer , new DWORD ( buffer . length ) , fileName ) ; 
 + Kernel32 . INSTANCE . GetPrivateProfileString ( lpAppName , lpKeyName , lpDefault , buffer , new DWORD ( buffer . length ) , lpFileName ) ; 
 return Native . toString ( buffer ) ; 
 } 


NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 61324b5 . . 1b94414 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 876 , 12 + 876 , 12 @ @ osname = macos , 
 < arg value = " org . apache . maven . plugins : maven - deploy - plugin : 2 . 7 : deploy - file " / > 
 < arg value = " - Durl = $ { maven - snapshots - repository - url } " / > 
 < arg value = " - DrepositoryId = $ { maven - snapshots - repository - id } " / > 
 - < arg value = " - DpomFile = pom . xml " / > 
 + < arg value = " - DpomFile = $ { pom } " / > 
 < arg value = " - Dfile = $ { maven - jar } " / > 
 < / artifact : mvn > 
 < / target > 
 
 - < ! - - before this , update project version ( both build . xml and pom . xml ) from SNAPSHOT to RELEASE - - > 
 + < ! - - before this , update project version ( both build . xml and $ { pom } ) from SNAPSHOT to RELEASE - - > 
 < target name = " stage " depends = " dist " description = " deploy release version to Maven staging repository " > 
 < ! - - sign and deploy the main artifact - - > 
 < artifact : mvn > 
 diff - - git a / src / com / sun / jna / CallbackThreadInitializer . java b / src / com / sun / jna / CallbackThreadInitializer . java 
 index 28537a3 . . 0c2ca7b 100644 
 - - - a / src / com / sun / jna / CallbackThreadInitializer . java 
 + + + b / src / com / sun / jna / CallbackThreadInitializer . java 
 @ @ - 11 , 22 + 11 , 22 @ @ package com . sun . jna ; 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 * Lesser General Public License for more details . 
 * / 
 - / * * This class provides for customization of the mapping of native threads 
 + / * * This class provides for customization of the mapping of native threads 
 * onto attached Java threads . Use 
 * { @ link Native # setCallbackThreadInitializer } to customize the thread context 
 * in which a given callback is invoked . < p / > 
 - * When a JNA callback is invoked on a native thread that is not currently 
 + * When a JNA callback is invoked on a native thread that is not currently 
 * tracked by the VM and a < code > CallbackThreadInitiailizer < / code > is 
 * registered for that callback , the initializer object will be used to 
 - * determine how the thread should be attached to the VM . < p / > . 
 - * Once attached , the method { @ link Native # detach } may be used from within 
 + * determine how the thread should be attached to the VM . < p / > 
 + * Once attached , the method { @ link Native # detach } may be used from within 
 * the callback invocation to alter whether the thread will be detached or not 
 * when the callback finishes execution . Typically this functionality is used 
 * in situations where you expect a callback to be called repeatedly from the 
 * same thread and you want to avoid potential extra thread allocation 
 * overhead on each callback invocation , since the VM may or may not re - use 
 * the same allocated thread object each time the thread is attached . < p / > 
 - * A single initializer may be used for multiple callbacks , one initializer 
 + * A single initializer may be used for multiple callbacks , one initializer 
 * per callback , or you may subclass the initializer to provide different 
 * initializer settings depending on the callback . < p / > 
 * / 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index b03c020 . . 306a4d9 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 1721 , 8 + 1721 , 8 @ @ public final class Native { 
 Note : errno / SetLastError is used to signal the desired state ; this is 
 a hack to make use of built - in thread - local storage to avoid having to 
 re - implement it on certain platforms . < p / > 
 - Warning : avoid calling { @ link # detach detach ( true ) } on a VM thread ; 
 - the resulting behavior is not defined . < p / > 
 + Warning : avoid calling { @ link # detach detach ( true ) } on threads 
 + spawned by the JVM ; the resulting behavior is not defined . < p / > 
 * / 
 public static void detach ( boolean detach ) { 
 setLastError ( detach ? THREAD _ DETACH : THREAD _ LEAVE _ ATTACHED ) ; 
 diff - - git a / src / com / sun / jna / overview . html b / src / com / sun / jna / overview . html 
 index fcf8a00 . . 6721479 100644 
 - - - a / src / com / sun / jna / overview . html 
 + + + b / src / com / sun / jna / overview . html 
 @ @ - 729 , 9 + 729 , 11 @ @ and { @ link com . sun . jna . Structure # writeField ( String ) } or { @ link 
 com . sun . jna . Structure # writeField ( String , Object ) } to synch with just the fields 
 of interest . 
 < h3 > Throw exceptions on last error < / h3 > 
 - If you are interested in the value of errno / GetLastError ( ) , declare your 
 - method to throw LastErrorException , and call 
 - { @ link com . sun . jna . Native # setPreserveLastError setPreserveLastError ( false ) } or set 
 - the System property < code > jna . preserve _ last _ error = false < / code > . 
 + To avoid the overhead of preserving the system last error information on every 
 + native call , invoke 
 + { @ link com . sun . jna . Native # setPreserveLastError setPreserveLastError ( false ) } or 
 + set the System property < code > jna . preserve _ last _ error = false < / code > . < p / > 
 + In those methods where you are interested in the value of errno / GetLastError ( ) , 
 + declare your method to throw { @ link com . sun . jna . LastErrorException } . 
 < / body > 
 < / html >
