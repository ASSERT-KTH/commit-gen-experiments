BLEU SCORE: 0.05341087579952926

TEST MSG: fix direct buffer args tests
GENERATED MSG: structure alignment fixes for ARM

TEST DIFF (one line): diff - - git a / test / com / sun / jna / DirectBufferArgumentsMarshalTest . java b / test / com / sun / jna / DirectBufferArgumentsMarshalTest . java <nl> index a89df60 . . a335c78 100644 <nl> - - - a / test / com / sun / jna / DirectBufferArgumentsMarshalTest . java <nl> + + + b / test / com / sun / jna / DirectBufferArgumentsMarshalTest . java <nl> @ @ - 25 , 47 + 25 , 9 @ @ import com . sun . jna . ArgumentsMarshalTest . TestLibrary . CheckFieldAlignment . ByRefere <nl> * <nl> * @ author twall @ users . sf . net <nl> * / <nl> - public class DirectBufferArgumentsMarshalTest extends DirectArgumentsMarshalTest { <nl> + public class DirectBufferArgumentsMarshalTest extends BufferArgumentsMarshalTest { <nl> <nl> public static class DirectTestLibrary implements TestLibrary { <nl> - / * * Dummy . Automatically fail when passed an object . * / <nl> - public String returnStringArgument ( Object arg ) { throw new IllegalArgumentException ( arg . getClass ( ) . getName ( ) ) ; } <nl> - public native boolean returnBooleanArgument ( boolean arg ) ; <nl> - public native byte returnInt8Argument ( byte arg ) ; <nl> - public native char returnWideCharArgument ( char arg ) ; <nl> - public native short returnInt16Argument ( short arg ) ; <nl> - public native int returnInt32Argument ( int i ) ; <nl> - public native long returnInt64Argument ( long l ) ; <nl> - public native NativeLong returnLongArgument ( NativeLong l ) ; <nl> - public native float returnFloatArgument ( float f ) ; <nl> - public native double returnDoubleArgument ( double d ) ; <nl> - public native String returnStringArgument ( String s ) ; <nl> - public native WString returnWStringArgument ( WString s ) ; <nl> - public native Pointer returnPointerArgument ( Pointer p ) ; <nl> - public String returnStringArrayElement ( String [ ] args , int which ) { throw new UnsupportedOperationException ( ) ; } <nl> - public WString returnWideStringArrayElement ( WString [ ] args , int which ) { throw new UnsupportedOperationException ( ) ; } <nl> - public Pointer returnPointerArrayElement ( Pointer [ ] args , int which ) { throw new UnsupportedOperationException ( ) ; } <nl> - public TestPointerType returnPointerArrayElement ( TestPointerType [ ] args , int which ) { throw new UnsupportedOperationException ( ) ; } <nl> - public CheckFieldAlignment returnPointerArrayElement ( CheckFieldAlignment . ByReference [ ] args , int which ) { throw new UnsupportedOperationException ( ) ; } <nl> - public int returnRotatedArgumentCount ( String [ ] args ) { throw new UnsupportedOperationException ( ) ; } <nl> - <nl> - public native long checkInt64ArgumentAlignment ( int i , long j , int i2 , long j2 ) ; <nl> - public native double checkDoubleArgumentAlignment ( float i , double j , float i2 , double j2 ) ; <nl> - public native Pointer testStructurePointerArgument ( CheckFieldAlignment p ) ; <nl> - public native int testStructureByValueArgument ( CheckFieldAlignment . ByValue p ) ; <nl> - public int testStructureArrayInitialization ( CheckFieldAlignment [ ] p , int len ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - public void modifyStructureArray ( CheckFieldAlignment [ ] p , int length ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - <nl> - public native int fillInt8Buffer ( byte [ ] buf , int len , byte value ) ; <nl> - public native int fillInt16Buffer ( short [ ] buf , int len , short value ) ; <nl> - public native int fillInt32Buffer ( int [ ] buf , int len , int value ) ; <nl> - public native int fillInt64Buffer ( long [ ] buf , int len , long value ) ; <nl> - public native int fillFloatBuffer ( float [ ] buf , int len , float value ) ; <nl> - public native int fillDoubleBuffer ( double [ ] buf , int len , double value ) ; <nl> <nl> / / ByteBuffer alternative definitions <nl> public native int fillInt8Buffer ( ByteBuffer buf , int len , byte value ) ; <nl> @ @ - 82 , 27 + 44 , 9 @ @ public class DirectBufferArgumentsMarshalTest extends DirectArgumentsMarshalTest <nl> public native int fillFloatBuffer ( FloatBuffer buf , int len , float value ) ; <nl> public native int fillDoubleBuffer ( DoubleBuffer buf , int len , double value ) ; <nl> <nl> - / / dummy to avoid causing Native . register to fail <nl> - public boolean returnBooleanArgument ( Object arg ) { throw new IllegalArgumentException ( ) ; } <nl> - <nl> - public native Pointer testStructurePointerArgument ( MinTestStructure s ) ; <nl> - public native String returnStringFromVariableSizedStructure ( VariableSizedStructure s ) ; <nl> - public native void setCallbackInStruct ( CbStruct s ) ; <nl> - public native TestUnion testUnionByValueCallbackArgument ( UnionCallback cb , TestUnion arg ) ; <nl> - <nl> static { <nl> Native . register ( " testlib " ) ; <nl> } <nl> - <nl> - 	 	 public int testStructureByReferenceArrayInitialization ( ByReference [ ] p , <nl> - 	 	 	 	 int len ) { <nl> - 	 	 	 / / TODO Auto - generated method stub <nl> - 	 	 	 return 0 ; <nl> - 	 	 } <nl> - 	 	 public void modifyStructureByReferenceArray ( ByReference [ ] p , int length ) { <nl> - 	 	 	 / / TODO Auto - generated method stub <nl> - 	 	 	 <nl> - 	 	 } <nl> } <nl> <nl> / * Override original . * / <nl> @ @ - 110 , 16 + 54 , 6 @ @ public class DirectBufferArgumentsMarshalTest extends DirectArgumentsMarshalTest <nl> lib = new DirectTestLibrary ( ) ; <nl> } <nl> <nl> - public static class DirectNativeMappedLibrary implements NativeMappedLibrary { <nl> - public native int returnInt32Argument ( Custom arg ) ; <nl> - static { <nl> - Native . register ( " testlib " ) ; <nl> - } <nl> - } <nl> - protected NativeMappedLibrary loadNativeMappedLibrary ( ) { <nl> - return new DirectNativeMappedLibrary ( ) ; <nl> - } <nl> - <nl> public static void main ( java . lang . String [ ] argList ) { <nl> junit . textui . TestRunner . run ( DirectBufferArgumentsMarshalTest . class ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / contrib / balloontips / com / sun / jna / contrib / demo / FilteredTextField . java b / contrib / balloontips / com / sun / jna / contrib / demo / FilteredTextField . java <nl> index d5908c4 . . a182528 100644 <nl> - - - a / contrib / balloontips / com / sun / jna / contrib / demo / FilteredTextField . java <nl> + + + b / contrib / balloontips / com / sun / jna / contrib / demo / FilteredTextField . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import java . util . ArrayList ; <nl> <nl> import javax . swing . BorderFactory ; <nl> import javax . swing . JFrame ; <nl> + import javax . swing . JLabel ; <nl> import javax . swing . JPanel ; <nl> import javax . swing . JTextField ; <nl> import javax . swing . Popup ; <nl> diff - - git a / dist / linux - arm . jar b / dist / linux - arm . jar <nl> new file mode 100644 <nl> index 0000000 . . c79a839 <nl> Binary files / dev / null and b / dist / linux - arm . jar differ <nl> diff - - git a / native / Makefile b / native / Makefile <nl> index 99db07c . . afc1dd1 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 11 , 7 + 11 , 7 @ @ <nl> # <nl> # Windows 2000 / XP / 2003 / Vista ( x86 / amd64 ) <nl> # Darwin / OS X ( i386 / x86 _ 64 / ppc ) <nl> - # Linux ( i386 / amd64 / ppc ) <nl> + # Linux ( i386 / amd64 / ppc / arm ) <nl> # Solaris ( i386 / amd64 / sparc / sparcv9 ) <nl> # FreeBSD / OpenBSD / NetBSD ( i386 / amd64 ) <nl> # Windows CE / Mobile ( arm ) <nl> diff - - git a / native / testlib . c b / native / testlib . c <nl> index 3c796b3 . . 3cbd256 100644 <nl> - - - a / native / testlib . c <nl> + + + b / native / testlib . c <nl> @ @ - 425 , 10 + 425 , 36 @ @ testStructurePointerArgument ( struct CheckFieldAlignment * arg ) { <nl> return arg ; <nl> } <nl> <nl> - EXPORT double <nl> + EXPORT int <nl> testStructureByValueArgument ( struct CheckFieldAlignment arg ) { <nl> - return arg . int8Field + arg . int16Field + arg . int32Field <nl> - + arg . int64Field + arg . floatField + arg . doubleField ; <nl> + int offset ; <nl> + struct CheckFieldAlignment * base = ( struct CheckFieldAlignment * ) 0 ; <nl> + # define FLAG ( F ) ( ( F ) < < 8 ) <nl> + offset = ( char * ) & base - > int8Field - ( char * ) base ; <nl> + if ( arg . int8Field ! = offset ) { <nl> + return ( int ) offset | FLAG ( 1 ) ; <nl> + } <nl> + offset = ( char * ) & base - > int16Field - ( char * ) base ; <nl> + if ( arg . int16Field ! = offset ) { <nl> + return ( int ) offset | FLAG ( 2 ) ; <nl> + } <nl> + offset = ( char * ) & base - > int32Field - ( char * ) base ; <nl> + if ( arg . int32Field ! = offset ) { <nl> + return ( int ) offset | FLAG ( 3 ) ; <nl> + } <nl> + offset = ( char * ) & base - > int64Field - ( char * ) base ; <nl> + if ( arg . int64Field ! = offset ) { <nl> + return ( int ) offset | FLAG ( 4 ) ; <nl> + } <nl> + offset = ( char * ) & base - > floatField - ( char * ) base ; <nl> + if ( arg . floatField ! = offset ) { <nl> + return ( int ) offset | FLAG ( 5 ) ; <nl> + } <nl> + offset = ( char * ) & base - > doubleField - ( char * ) base ; <nl> + if ( arg . doubleField ! = offset ) { <nl> + return ( int ) offset | FLAG ( 6 ) ; <nl> + } <nl> + return 0 ; <nl> } <nl> <nl> typedef struct ByValue8 { int8 _ t data ; } ByValue8 ; <nl> diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index b14a0e7 . . 38f5fd8 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 85 , 7 + 85 , 7 @ @ public abstract class Structure { <nl> " first " , " second " , " middle " , " penultimate " , " last " , <nl> } ; <nl> public int first ; <nl> - 	 	 public int second ; <nl> + 	 public int second ; <nl> public int middle ; <nl> public int penultimate ; <nl> public int last ; <nl> @ @ - 96 , 6 + 96 , 7 @ @ public abstract class Structure { <nl> <nl> static final boolean isPPC ; <nl> static final boolean isSPARC ; <nl> + static final boolean isARM ; <nl> <nl> static { <nl> / / Check for predictable field order ; IBM and JRockit store fields in <nl> @ @ - 114 , 6 + 115 , 7 @ @ public abstract class Structure { <nl> String arch = System . getProperty ( " os . arch " ) . toLowerCase ( ) ; <nl> isPPC = " ppc " . equals ( arch ) | | " powerpc " . equals ( arch ) ; <nl> isSPARC = " sparc " . equals ( arch ) ; <nl> + 	 isARM = " arm " . equals ( arch ) ; <nl> } <nl> <nl> / * * Use the platform default alignment . * / <nl> @ @ - 133 , 7 + 135 , 7 @ @ public abstract class Structure { <nl> / / public static final int ALIGN _ 8 = 6 ; <nl> <nl> static final int MAX _ GNUC _ ALIGNMENT = <nl> - isSPARC | | ( isPPC & & Platform . isLinux ( ) ) <nl> + isSPARC | | ( ( isPPC | | isARM ) & & Platform . isLinux ( ) ) <nl> ? 8 : Native . LONG _ SIZE ; <nl> protected static final int CALCULATE _ SIZE = - 1 ; <nl> <nl> @ @ - 449 , 6 + 451 , 15 @ @ public abstract class Structure { <nl> } <nl> } <nl> <nl> + / * * Returns the calculated offset of the given field . * / <nl> + protected int fieldOffset ( String name ) { <nl> + 	 ensureAllocated ( ) ; <nl> + 	 StructField f = ( StructField ) structFields . get ( name ) ; <nl> + if ( f = = null ) <nl> + throw new IllegalArgumentException ( " No such field : " + name ) ; <nl> + 	 return f . offset ; <nl> + } <nl> + <nl> / * * Force a read of the given field from native memory . The Java field <nl> * will be updated from the current contents of native memory . <nl> * @ return the new field value , after updating <nl> @ @ - 1029 , 9 + 1040 , 9 @ @ public abstract class Structure { <nl> contents + = prefix + " } " ; <nl> } <nl> if ( indent = = 0 & & dumpMemory ) { <nl> - byte [ ] buf = getPointer ( ) . getByteArray ( 0 , size ( ) ) ; <nl> final int BYTES _ PER _ ROW = 4 ; <nl> contents + = LS + " memory dump " + LS ; <nl> + byte [ ] buf = getPointer ( ) . getByteArray ( 0 , size ( ) ) ; <nl> for ( int i = 0 ; i < buf . length ; i + + ) { <nl> if ( ( i % BYTES _ PER _ ROW ) = = 0 ) contents + = " [ " ; <nl> if ( buf [ i ] > = 0 & & buf [ i ] < 16 ) <nl> diff - - git a / test / com / sun / jna / ArgumentsMarshalTest . java b / test / com / sun / jna / ArgumentsMarshalTest . java <nl> index 47ee1e7 . . 650a704 100644 <nl> - - - a / test / com / sun / jna / ArgumentsMarshalTest . java <nl> + + + b / test / com / sun / jna / ArgumentsMarshalTest . java <nl> @ @ - 33 , 12 + 33 , 20 @ @ public class ArgumentsMarshalTest extends TestCase { <nl> public static class ByReference extends CheckFieldAlignment <nl> implements Structure . ByReference { } <nl> <nl> - public byte int8Field = 1 ; <nl> - public short int16Field = 2 ; <nl> - public int int32Field = 3 ; <nl> - public long int64Field = 4 ; <nl> - public float floatField = 5f ; <nl> - public double doubleField = 6d ; <nl> + public byte int8Field ; <nl> + public short int16Field ; <nl> + public int int32Field ; <nl> + public long int64Field ; <nl> + public float floatField ; <nl> + public double doubleField ; <nl> + 	 public CheckFieldAlignment ( ) { <nl> + 	 	 int8Field = ( byte ) fieldOffset ( " int8Field " ) ; <nl> + 	 	 int16Field = ( short ) fieldOffset ( " int16Field " ) ; <nl> + 	 	 int32Field = fieldOffset ( " int32Field " ) ; <nl> + 	 	 int64Field = fieldOffset ( " int64Field " ) ; <nl> + 	 	 floatField = fieldOffset ( " floatField " ) ; <nl> + 	 	 doubleField = fieldOffset ( " doubleField " ) ; <nl> + 	 } <nl> } <nl> <nl> String returnStringArgument ( Object arg ) ; <nl> @ @ - 69 , 7 + 77 , 7 @ @ public class ArgumentsMarshalTest extends TestCase { <nl> long checkInt64ArgumentAlignment ( int i , long j , int i2 , long j2 ) ; <nl> double checkDoubleArgumentAlignment ( float i , double j , float i2 , double j2 ) ; <nl> Pointer testStructurePointerArgument ( CheckFieldAlignment p ) ; <nl> - double testStructureByValueArgument ( CheckFieldAlignment . ByValue p ) ; <nl> + int testStructureByValueArgument ( CheckFieldAlignment . ByValue p ) ; <nl> int testStructureArrayInitialization ( CheckFieldAlignment [ ] p , int len ) ; <nl> void modifyStructureArray ( CheckFieldAlignment [ ] p , int length ) ; <nl> <nl> @ @ - 321 , 8 + 329 , 8 @ @ public class ArgumentsMarshalTest extends TestCase { <nl> public void testStructureByValueArgument ( ) { <nl> TestLibrary . CheckFieldAlignment . ByValue struct = <nl> new TestLibrary . CheckFieldAlignment . ByValue ( ) ; <nl> - assertEquals ( " Wrong sum of fields for " + struct . toString ( true ) , <nl> - 21d , lib . testStructureByValueArgument ( struct ) , 0d ) ; <nl> + assertEquals ( " Wrong alignment in " + struct . toString ( true ) , <nl> + " 0 " , Integer . toHexString ( lib . testStructureByValueArgument ( struct ) ) ) ; <nl> } <nl> <nl> public void testStructureByValueTypeInfo ( ) { <nl> diff - - git a / test / com / sun / jna / DirectArgumentsMarshalTest . java b / test / com / sun / jna / DirectArgumentsMarshalTest . java <nl> index a37a2d2 . . bce064a 100644 <nl> - - - a / test / com / sun / jna / DirectArgumentsMarshalTest . java <nl> + + + b / test / com / sun / jna / DirectArgumentsMarshalTest . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class DirectArgumentsMarshalTest extends ArgumentsMarshalTest { <nl> public native long checkInt64ArgumentAlignment ( int i , long j , int i2 , long j2 ) ; <nl> public native double checkDoubleArgumentAlignment ( float i , double j , float i2 , double j2 ) ; <nl> public native Pointer testStructurePointerArgument ( CheckFieldAlignment p ) ; <nl> - public native double testStructureByValueArgument ( CheckFieldAlignment . ByValue p ) ; <nl> + public native int testStructureByValueArgument ( CheckFieldAlignment . ByValue p ) ; <nl> public int testStructureArrayInitialization ( CheckFieldAlignment [ ] p , int len ) { <nl> throw new UnsupportedOperationException ( ) ; <nl> }

TEST DIFF:
diff - - git a / test / com / sun / jna / DirectBufferArgumentsMarshalTest . java b / test / com / sun / jna / DirectBufferArgumentsMarshalTest . java 
 index a89df60 . . a335c78 100644 
 - - - a / test / com / sun / jna / DirectBufferArgumentsMarshalTest . java 
 + + + b / test / com / sun / jna / DirectBufferArgumentsMarshalTest . java 
 @ @ - 25 , 47 + 25 , 9 @ @ import com . sun . jna . ArgumentsMarshalTest . TestLibrary . CheckFieldAlignment . ByRefere 
 * 
 * @ author twall @ users . sf . net 
 * / 
 - public class DirectBufferArgumentsMarshalTest extends DirectArgumentsMarshalTest { 
 + public class DirectBufferArgumentsMarshalTest extends BufferArgumentsMarshalTest { 
 
 public static class DirectTestLibrary implements TestLibrary { 
 - / * * Dummy . Automatically fail when passed an object . * / 
 - public String returnStringArgument ( Object arg ) { throw new IllegalArgumentException ( arg . getClass ( ) . getName ( ) ) ; } 
 - public native boolean returnBooleanArgument ( boolean arg ) ; 
 - public native byte returnInt8Argument ( byte arg ) ; 
 - public native char returnWideCharArgument ( char arg ) ; 
 - public native short returnInt16Argument ( short arg ) ; 
 - public native int returnInt32Argument ( int i ) ; 
 - public native long returnInt64Argument ( long l ) ; 
 - public native NativeLong returnLongArgument ( NativeLong l ) ; 
 - public native float returnFloatArgument ( float f ) ; 
 - public native double returnDoubleArgument ( double d ) ; 
 - public native String returnStringArgument ( String s ) ; 
 - public native WString returnWStringArgument ( WString s ) ; 
 - public native Pointer returnPointerArgument ( Pointer p ) ; 
 - public String returnStringArrayElement ( String [ ] args , int which ) { throw new UnsupportedOperationException ( ) ; } 
 - public WString returnWideStringArrayElement ( WString [ ] args , int which ) { throw new UnsupportedOperationException ( ) ; } 
 - public Pointer returnPointerArrayElement ( Pointer [ ] args , int which ) { throw new UnsupportedOperationException ( ) ; } 
 - public TestPointerType returnPointerArrayElement ( TestPointerType [ ] args , int which ) { throw new UnsupportedOperationException ( ) ; } 
 - public CheckFieldAlignment returnPointerArrayElement ( CheckFieldAlignment . ByReference [ ] args , int which ) { throw new UnsupportedOperationException ( ) ; } 
 - public int returnRotatedArgumentCount ( String [ ] args ) { throw new UnsupportedOperationException ( ) ; } 
 - 
 - public native long checkInt64ArgumentAlignment ( int i , long j , int i2 , long j2 ) ; 
 - public native double checkDoubleArgumentAlignment ( float i , double j , float i2 , double j2 ) ; 
 - public native Pointer testStructurePointerArgument ( CheckFieldAlignment p ) ; 
 - public native int testStructureByValueArgument ( CheckFieldAlignment . ByValue p ) ; 
 - public int testStructureArrayInitialization ( CheckFieldAlignment [ ] p , int len ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - public void modifyStructureArray ( CheckFieldAlignment [ ] p , int length ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - 
 - public native int fillInt8Buffer ( byte [ ] buf , int len , byte value ) ; 
 - public native int fillInt16Buffer ( short [ ] buf , int len , short value ) ; 
 - public native int fillInt32Buffer ( int [ ] buf , int len , int value ) ; 
 - public native int fillInt64Buffer ( long [ ] buf , int len , long value ) ; 
 - public native int fillFloatBuffer ( float [ ] buf , int len , float value ) ; 
 - public native int fillDoubleBuffer ( double [ ] buf , int len , double value ) ; 
 
 / / ByteBuffer alternative definitions 
 public native int fillInt8Buffer ( ByteBuffer buf , int len , byte value ) ; 
 @ @ - 82 , 27 + 44 , 9 @ @ public class DirectBufferArgumentsMarshalTest extends DirectArgumentsMarshalTest 
 public native int fillFloatBuffer ( FloatBuffer buf , int len , float value ) ; 
 public native int fillDoubleBuffer ( DoubleBuffer buf , int len , double value ) ; 
 
 - / / dummy to avoid causing Native . register to fail 
 - public boolean returnBooleanArgument ( Object arg ) { throw new IllegalArgumentException ( ) ; } 
 - 
 - public native Pointer testStructurePointerArgument ( MinTestStructure s ) ; 
 - public native String returnStringFromVariableSizedStructure ( VariableSizedStructure s ) ; 
 - public native void setCallbackInStruct ( CbStruct s ) ; 
 - public native TestUnion testUnionByValueCallbackArgument ( UnionCallback cb , TestUnion arg ) ; 
 - 
 static { 
 Native . register ( " testlib " ) ; 
 } 
 - 
 - 	 	 public int testStructureByReferenceArrayInitialization ( ByReference [ ] p , 
 - 	 	 	 	 int len ) { 
 - 	 	 	 / / TODO Auto - generated method stub 
 - 	 	 	 return 0 ; 
 - 	 	 } 
 - 	 	 public void modifyStructureByReferenceArray ( ByReference [ ] p , int length ) { 
 - 	 	 	 / / TODO Auto - generated method stub 
 - 	 	 	 
 - 	 	 } 
 } 
 
 / * Override original . * / 
 @ @ - 110 , 16 + 54 , 6 @ @ public class DirectBufferArgumentsMarshalTest extends DirectArgumentsMarshalTest 
 lib = new DirectTestLibrary ( ) ; 
 } 
 
 - public static class DirectNativeMappedLibrary implements NativeMappedLibrary { 
 - public native int returnInt32Argument ( Custom arg ) ; 
 - static { 
 - Native . register ( " testlib " ) ; 
 - } 
 - } 
 - protected NativeMappedLibrary loadNativeMappedLibrary ( ) { 
 - return new DirectNativeMappedLibrary ( ) ; 
 - } 
 - 
 public static void main ( java . lang . String [ ] argList ) { 
 junit . textui . TestRunner . run ( DirectBufferArgumentsMarshalTest . class ) ; 
 }

NEAREST DIFF:
diff - - git a / contrib / balloontips / com / sun / jna / contrib / demo / FilteredTextField . java b / contrib / balloontips / com / sun / jna / contrib / demo / FilteredTextField . java 
 index d5908c4 . . a182528 100644 
 - - - a / contrib / balloontips / com / sun / jna / contrib / demo / FilteredTextField . java 
 + + + b / contrib / balloontips / com / sun / jna / contrib / demo / FilteredTextField . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import java . util . ArrayList ; 
 
 import javax . swing . BorderFactory ; 
 import javax . swing . JFrame ; 
 + import javax . swing . JLabel ; 
 import javax . swing . JPanel ; 
 import javax . swing . JTextField ; 
 import javax . swing . Popup ; 
 diff - - git a / dist / linux - arm . jar b / dist / linux - arm . jar 
 new file mode 100644 
 index 0000000 . . c79a839 
 Binary files / dev / null and b / dist / linux - arm . jar differ 
 diff - - git a / native / Makefile b / native / Makefile 
 index 99db07c . . afc1dd1 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 11 , 7 + 11 , 7 @ @ 
 # 
 # Windows 2000 / XP / 2003 / Vista ( x86 / amd64 ) 
 # Darwin / OS X ( i386 / x86 _ 64 / ppc ) 
 - # Linux ( i386 / amd64 / ppc ) 
 + # Linux ( i386 / amd64 / ppc / arm ) 
 # Solaris ( i386 / amd64 / sparc / sparcv9 ) 
 # FreeBSD / OpenBSD / NetBSD ( i386 / amd64 ) 
 # Windows CE / Mobile ( arm ) 
 diff - - git a / native / testlib . c b / native / testlib . c 
 index 3c796b3 . . 3cbd256 100644 
 - - - a / native / testlib . c 
 + + + b / native / testlib . c 
 @ @ - 425 , 10 + 425 , 36 @ @ testStructurePointerArgument ( struct CheckFieldAlignment * arg ) { 
 return arg ; 
 } 
 
 - EXPORT double 
 + EXPORT int 
 testStructureByValueArgument ( struct CheckFieldAlignment arg ) { 
 - return arg . int8Field + arg . int16Field + arg . int32Field 
 - + arg . int64Field + arg . floatField + arg . doubleField ; 
 + int offset ; 
 + struct CheckFieldAlignment * base = ( struct CheckFieldAlignment * ) 0 ; 
 + # define FLAG ( F ) ( ( F ) < < 8 ) 
 + offset = ( char * ) & base - > int8Field - ( char * ) base ; 
 + if ( arg . int8Field ! = offset ) { 
 + return ( int ) offset | FLAG ( 1 ) ; 
 + } 
 + offset = ( char * ) & base - > int16Field - ( char * ) base ; 
 + if ( arg . int16Field ! = offset ) { 
 + return ( int ) offset | FLAG ( 2 ) ; 
 + } 
 + offset = ( char * ) & base - > int32Field - ( char * ) base ; 
 + if ( arg . int32Field ! = offset ) { 
 + return ( int ) offset | FLAG ( 3 ) ; 
 + } 
 + offset = ( char * ) & base - > int64Field - ( char * ) base ; 
 + if ( arg . int64Field ! = offset ) { 
 + return ( int ) offset | FLAG ( 4 ) ; 
 + } 
 + offset = ( char * ) & base - > floatField - ( char * ) base ; 
 + if ( arg . floatField ! = offset ) { 
 + return ( int ) offset | FLAG ( 5 ) ; 
 + } 
 + offset = ( char * ) & base - > doubleField - ( char * ) base ; 
 + if ( arg . doubleField ! = offset ) { 
 + return ( int ) offset | FLAG ( 6 ) ; 
 + } 
 + return 0 ; 
 } 
 
 typedef struct ByValue8 { int8 _ t data ; } ByValue8 ; 
 diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index b14a0e7 . . 38f5fd8 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 85 , 7 + 85 , 7 @ @ public abstract class Structure { 
 " first " , " second " , " middle " , " penultimate " , " last " , 
 } ; 
 public int first ; 
 - 	 	 public int second ; 
 + 	 public int second ; 
 public int middle ; 
 public int penultimate ; 
 public int last ; 
 @ @ - 96 , 6 + 96 , 7 @ @ public abstract class Structure { 
 
 static final boolean isPPC ; 
 static final boolean isSPARC ; 
 + static final boolean isARM ; 
 
 static { 
 / / Check for predictable field order ; IBM and JRockit store fields in 
 @ @ - 114 , 6 + 115 , 7 @ @ public abstract class Structure { 
 String arch = System . getProperty ( " os . arch " ) . toLowerCase ( ) ; 
 isPPC = " ppc " . equals ( arch ) | | " powerpc " . equals ( arch ) ; 
 isSPARC = " sparc " . equals ( arch ) ; 
 + 	 isARM = " arm " . equals ( arch ) ; 
 } 
 
 / * * Use the platform default alignment . * / 
 @ @ - 133 , 7 + 135 , 7 @ @ public abstract class Structure { 
 / / public static final int ALIGN _ 8 = 6 ; 
 
 static final int MAX _ GNUC _ ALIGNMENT = 
 - isSPARC | | ( isPPC & & Platform . isLinux ( ) ) 
 + isSPARC | | ( ( isPPC | | isARM ) & & Platform . isLinux ( ) ) 
 ? 8 : Native . LONG _ SIZE ; 
 protected static final int CALCULATE _ SIZE = - 1 ; 
 
 @ @ - 449 , 6 + 451 , 15 @ @ public abstract class Structure { 
 } 
 } 
 
 + / * * Returns the calculated offset of the given field . * / 
 + protected int fieldOffset ( String name ) { 
 + 	 ensureAllocated ( ) ; 
 + 	 StructField f = ( StructField ) structFields . get ( name ) ; 
 + if ( f = = null ) 
 + throw new IllegalArgumentException ( " No such field : " + name ) ; 
 + 	 return f . offset ; 
 + } 
 + 
 / * * Force a read of the given field from native memory . The Java field 
 * will be updated from the current contents of native memory . 
 * @ return the new field value , after updating 
 @ @ - 1029 , 9 + 1040 , 9 @ @ public abstract class Structure { 
 contents + = prefix + " } " ; 
 } 
 if ( indent = = 0 & & dumpMemory ) { 
 - byte [ ] buf = getPointer ( ) . getByteArray ( 0 , size ( ) ) ; 
 final int BYTES _ PER _ ROW = 4 ; 
 contents + = LS + " memory dump " + LS ; 
 + byte [ ] buf = getPointer ( ) . getByteArray ( 0 , size ( ) ) ; 
 for ( int i = 0 ; i < buf . length ; i + + ) { 
 if ( ( i % BYTES _ PER _ ROW ) = = 0 ) contents + = " [ " ; 
 if ( buf [ i ] > = 0 & & buf [ i ] < 16 ) 
 diff - - git a / test / com / sun / jna / ArgumentsMarshalTest . java b / test / com / sun / jna / ArgumentsMarshalTest . java 
 index 47ee1e7 . . 650a704 100644 
 - - - a / test / com / sun / jna / ArgumentsMarshalTest . java 
 + + + b / test / com / sun / jna / ArgumentsMarshalTest . java 
 @ @ - 33 , 12 + 33 , 20 @ @ public class ArgumentsMarshalTest extends TestCase { 
 public static class ByReference extends CheckFieldAlignment 
 implements Structure . ByReference { } 
 
 - public byte int8Field = 1 ; 
 - public short int16Field = 2 ; 
 - public int int32Field = 3 ; 
 - public long int64Field = 4 ; 
 - public float floatField = 5f ; 
 - public double doubleField = 6d ; 
 + public byte int8Field ; 
 + public short int16Field ; 
 + public int int32Field ; 
 + public long int64Field ; 
 + public float floatField ; 
 + public double doubleField ; 
 + 	 public CheckFieldAlignment ( ) { 
 + 	 	 int8Field = ( byte ) fieldOffset ( " int8Field " ) ; 
 + 	 	 int16Field = ( short ) fieldOffset ( " int16Field " ) ; 
 + 	 	 int32Field = fieldOffset ( " int32Field " ) ; 
 + 	 	 int64Field = fieldOffset ( " int64Field " ) ; 
 + 	 	 floatField = fieldOffset ( " floatField " ) ; 
 + 	 	 doubleField = fieldOffset ( " doubleField " ) ; 
 + 	 } 
 } 
 
 String returnStringArgument ( Object arg ) ; 
 @ @ - 69 , 7 + 77 , 7 @ @ public class ArgumentsMarshalTest extends TestCase { 
 long checkInt64ArgumentAlignment ( int i , long j , int i2 , long j2 ) ; 
 double checkDoubleArgumentAlignment ( float i , double j , float i2 , double j2 ) ; 
 Pointer testStructurePointerArgument ( CheckFieldAlignment p ) ; 
 - double testStructureByValueArgument ( CheckFieldAlignment . ByValue p ) ; 
 + int testStructureByValueArgument ( CheckFieldAlignment . ByValue p ) ; 
 int testStructureArrayInitialization ( CheckFieldAlignment [ ] p , int len ) ; 
 void modifyStructureArray ( CheckFieldAlignment [ ] p , int length ) ; 
 
 @ @ - 321 , 8 + 329 , 8 @ @ public class ArgumentsMarshalTest extends TestCase { 
 public void testStructureByValueArgument ( ) { 
 TestLibrary . CheckFieldAlignment . ByValue struct = 
 new TestLibrary . CheckFieldAlignment . ByValue ( ) ; 
 - assertEquals ( " Wrong sum of fields for " + struct . toString ( true ) , 
 - 21d , lib . testStructureByValueArgument ( struct ) , 0d ) ; 
 + assertEquals ( " Wrong alignment in " + struct . toString ( true ) , 
 + " 0 " , Integer . toHexString ( lib . testStructureByValueArgument ( struct ) ) ) ; 
 } 
 
 public void testStructureByValueTypeInfo ( ) { 
 diff - - git a / test / com / sun / jna / DirectArgumentsMarshalTest . java b / test / com / sun / jna / DirectArgumentsMarshalTest . java 
 index a37a2d2 . . bce064a 100644 
 - - - a / test / com / sun / jna / DirectArgumentsMarshalTest . java 
 + + + b / test / com / sun / jna / DirectArgumentsMarshalTest . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public class DirectArgumentsMarshalTest extends ArgumentsMarshalTest { 
 public native long checkInt64ArgumentAlignment ( int i , long j , int i2 , long j2 ) ; 
 public native double checkDoubleArgumentAlignment ( float i , double j , float i2 , double j2 ) ; 
 public native Pointer testStructurePointerArgument ( CheckFieldAlignment p ) ; 
 - public native double testStructureByValueArgument ( CheckFieldAlignment . ByValue p ) ; 
 + public native int testStructureByValueArgument ( CheckFieldAlignment . ByValue p ) ; 
 public int testStructureArrayInitialization ( CheckFieldAlignment [ ] p , int len ) { 
 throw new UnsupportedOperationException ( ) ; 
 }
