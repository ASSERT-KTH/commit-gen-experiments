BLEU SCORE: 0.23643540225079396

TEST MSG: Add statvfs to Linux LibC
GENERATED MSG: Add Linux LibC with sysinfo

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 0606d94 . . 07951e8 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 2 , 11 + 2 , 12 @ @ NOTE : as of JNA 4 . 0 , JNA is now dual - licensed under LGPL and AL 2 . 0 ( see LICENSE <nl> <nl> NOTE : JNI native support is typically incompatible between minor versions , and almost always incompatible between major versions . <nl> <nl> - Release 5 . 0 . 1 ( Next release ) <nl> + Release 5 . 1 . 0 ( Next release ) <nl> = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> <nl> Features <nl> - - - - - - - - <nl> + * [ # 1029 ] ( https : / / github . com / java - native - access / jna / issues / 1029 ) : Add ` statvfs ` to ` c . s . j . platform . linux . LibC ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / build . xml b / build . xml <nl> index a4923b8 . . 4fa582f 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 59 , 8 + 59 , 8 @ @ <nl> <nl> < ! - - JNA library release version - android versionCode is derived from mjar / minor / revision - - > <nl> < property name = " jna . major " value = " 5 " / > <nl> - < property name = " jna . minor " value = " 0 " / > <nl> - < property name = " jna . revision " value = " 1 " / > <nl> + < property name = " jna . minor " value = " 1 " / > <nl> + < property name = " jna . revision " value = " 0 " / > <nl> < property name = " jna . build " value = " 0 " / > < ! - - $ { build . number } - - > <nl> < condition property = " version . suffix " value = " " else = " - SNAPSHOT " > <nl> < or > <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / linux / LibC . java b / contrib / platform / src / com / sun / jna / platform / linux / LibC . java <nl> index 0d2d8e6 . . e4fa98a 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / linux / LibC . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / linux / LibC . java <nl> @ @ - 96 , 6 + 96 , 55 @ @ public interface LibC extends LibCAPI , Library { <nl> } <nl> } <nl> <nl> + @ FieldOrder ( { " f _ bsize " , " f _ frsize " , " f _ blocks " , " f _ bfree " , " f _ bavail " , <nl> + " f _ files " , " f _ ffree " , " f _ favail " , " f _ fsid " , " _ f _ unused " , " f _ flag " , <nl> + " f _ namemax " , " _ f _ spare " } ) <nl> + class Statvfs extends Structure { <nl> + public NativeLong f _ bsize ; <nl> + public NativeLong f _ frsize ; <nl> + public NativeLong f _ blocks ; <nl> + public NativeLong f _ bfree ; <nl> + public NativeLong f _ bavail ; <nl> + public NativeLong f _ files ; <nl> + public NativeLong f _ ffree ; <nl> + public NativeLong f _ favail ; <nl> + public NativeLong f _ fsid ; <nl> + public int _ f _ unused ; / / Only in 32 - bit <nl> + public NativeLong f _ flag ; <nl> + public NativeLong f _ namemax ; <nl> + public int [ ] _ f _ spare = new int [ 6 ] ; <nl> + <nl> + / * <nl> + * getFieldList and getFieldOrder are overridden because _ f _ unused is <nl> + * only present in 32 - bit wordsize . The dummy field in the structure is <nl> + * just padding and so if the field is the zero length array , it is <nl> + * stripped from the fields and field order . <nl> + * / <nl> + @ Override <nl> + protected List < Field > getFieldList ( ) { <nl> + List < Field > fields = new ArrayList < Field > ( super . getFieldList ( ) ) ; <nl> + if ( NativeLong . SIZE > 4 ) { <nl> + Iterator < Field > fieldIterator = fields . iterator ( ) ; <nl> + while ( fieldIterator . hasNext ( ) ) { <nl> + Field field = fieldIterator . next ( ) ; <nl> + if ( " _ f _ unused " . equals ( field . getName ( ) ) ) { <nl> + fieldIterator . remove ( ) ; <nl> + } <nl> + } <nl> + } <nl> + return fields ; <nl> + } <nl> + <nl> + @ Override <nl> + protected List < String > getFieldOrder ( ) { <nl> + List < String > fieldOrder = new ArrayList < String > ( super . getFieldOrder ( ) ) ; <nl> + if ( NativeLong . SIZE > 4 ) { <nl> + fieldOrder . remove ( " _ f _ unused " ) ; <nl> + } <nl> + return fieldOrder ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * sysinfo ( ) provides a simple way of getting overall system statistics . <nl> * This is more portable than reading / dev / kmem . <nl> @ @ - 106 , 4 + 155 , 16 @ @ public interface LibC extends LibCAPI , Library { <nl> * is set appropriately . <nl> * / <nl> int sysinfo ( Sysinfo info ) ; <nl> + <nl> + / * * <nl> + * The function statvfs ( ) returns information about a mounted filesystem . <nl> + * <nl> + * @ param path <nl> + * the pathname of any file within the mounted filesystem . <nl> + * @ param buf <nl> + * a pointer to a statvfs structure <nl> + * @ return On success , zero is returned . On error , - 1 is returned , and errno <nl> + * is set appropriately . <nl> + * / <nl> + int statvfs ( String path , Statvfs buf ) ; <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / linux / LibCTest . java b / contrib / platform / test / com / sun / jna / platform / linux / LibCTest . java <nl> index f834fc0 . . a418cf3 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / linux / LibCTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / linux / LibCTest . java <nl> @ @ - 23 , 8 + 23 , 16 @ @ <nl> * / <nl> package com . sun . jna . platform . linux ; <nl> <nl> + import java . io . BufferedReader ; <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStreamReader ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> import org . junit . Test ; <nl> <nl> + import com . sun . jna . platform . linux . LibC . Statvfs ; <nl> import com . sun . jna . platform . linux . LibC . Sysinfo ; <nl> <nl> import junit . framework . TestCase ; <nl> @ @ - 51 , 4 + 59 , 43 @ @ public class LibCTest extends TestCase { <nl> assertTrue ( info . freeram . longValue ( ) < = info . totalram . longValue ( ) ) ; <nl> assertTrue ( info . freeswap . longValue ( ) < = info . totalswap . longValue ( ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testStatvfs ( ) throws IOException , InterruptedException { <nl> + Statvfs vfs = new Statvfs ( ) ; <nl> + <nl> + / / Iterate ' mounts ' for mounted file systems <nl> + List < String > mountList = mounts ( ) ; <nl> + for ( String mount : mountList ) { <nl> + / / Skip proc , etc . <nl> + if ( ! mount . startsWith ( " / " ) ) { <nl> + continue ; <nl> + } <nl> + String fs = mount . split ( " " ) [ 0 ] ; <nl> + <nl> + vfs . clear ( ) ; <nl> + assertEquals ( 0 , LibC . INSTANCE . statvfs ( fs , vfs ) ) ; <nl> + File f = new File ( fs ) ; <nl> + assertEquals ( f . getTotalSpace ( ) , vfs . f _ blocks . longValue ( ) * vfs . f _ bsize . longValue ( ) ) ; <nl> + assertEquals ( f . getUsableSpace ( ) , vfs . f _ bavail . longValue ( ) * vfs . f _ bsize . longValue ( ) ) ; <nl> + assertTrue ( vfs . f _ bsize . longValue ( ) > 0 ) ; <nl> + assertTrue ( vfs . f _ bfree . longValue ( ) < = vfs . f _ blocks . longValue ( ) ) ; <nl> + assertTrue ( vfs . f _ ffree . longValue ( ) < = vfs . f _ files . longValue ( ) ) ; <nl> + assertTrue ( vfs . f _ namemax . longValue ( ) > 0 ) ; <nl> + } <nl> + } <nl> + <nl> + private static List < String > mounts ( ) throws IOException , InterruptedException { <nl> + Process p = Runtime . getRuntime ( ) . exec ( " mount " ) ; <nl> + <nl> + ArrayList < String > mounts = new ArrayList < String > ( ) ; <nl> + BufferedReader reader = new BufferedReader ( new InputStreamReader ( p . getInputStream ( ) ) ) ; <nl> + String line ; <nl> + while ( ( line = reader . readLine ( ) ) ! = null ) { <nl> + mounts . add ( line ) ; <nl> + } <nl> + p . waitFor ( ) ; <nl> + reader . close ( ) ; <nl> + return mounts ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 0606d94 . . 07951e8 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 2 , 11 + 2 , 12 @ @ NOTE : as of JNA 4 . 0 , JNA is now dual - licensed under LGPL and AL 2 . 0 ( see LICENSE 
 
 NOTE : JNI native support is typically incompatible between minor versions , and almost always incompatible between major versions . 
 
 - Release 5 . 0 . 1 ( Next release ) 
 + Release 5 . 1 . 0 ( Next release ) 
 = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 
 Features 
 - - - - - - - - 
 + * [ # 1029 ] ( https : / / github . com / java - native - access / jna / issues / 1029 ) : Add ` statvfs ` to ` c . s . j . platform . linux . LibC ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / build . xml b / build . xml 
 index a4923b8 . . 4fa582f 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 59 , 8 + 59 , 8 @ @ 
 
 < ! - - JNA library release version - android versionCode is derived from mjar / minor / revision - - > 
 < property name = " jna . major " value = " 5 " / > 
 - < property name = " jna . minor " value = " 0 " / > 
 - < property name = " jna . revision " value = " 1 " / > 
 + < property name = " jna . minor " value = " 1 " / > 
 + < property name = " jna . revision " value = " 0 " / > 
 < property name = " jna . build " value = " 0 " / > < ! - - $ { build . number } - - > 
 < condition property = " version . suffix " value = " " else = " - SNAPSHOT " > 
 < or > 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / linux / LibC . java b / contrib / platform / src / com / sun / jna / platform / linux / LibC . java 
 index 0d2d8e6 . . e4fa98a 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / linux / LibC . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / linux / LibC . java 
 @ @ - 96 , 6 + 96 , 55 @ @ public interface LibC extends LibCAPI , Library { 
 } 
 } 
 
 + @ FieldOrder ( { " f _ bsize " , " f _ frsize " , " f _ blocks " , " f _ bfree " , " f _ bavail " , 
 + " f _ files " , " f _ ffree " , " f _ favail " , " f _ fsid " , " _ f _ unused " , " f _ flag " , 
 + " f _ namemax " , " _ f _ spare " } ) 
 + class Statvfs extends Structure { 
 + public NativeLong f _ bsize ; 
 + public NativeLong f _ frsize ; 
 + public NativeLong f _ blocks ; 
 + public NativeLong f _ bfree ; 
 + public NativeLong f _ bavail ; 
 + public NativeLong f _ files ; 
 + public NativeLong f _ ffree ; 
 + public NativeLong f _ favail ; 
 + public NativeLong f _ fsid ; 
 + public int _ f _ unused ; / / Only in 32 - bit 
 + public NativeLong f _ flag ; 
 + public NativeLong f _ namemax ; 
 + public int [ ] _ f _ spare = new int [ 6 ] ; 
 + 
 + / * 
 + * getFieldList and getFieldOrder are overridden because _ f _ unused is 
 + * only present in 32 - bit wordsize . The dummy field in the structure is 
 + * just padding and so if the field is the zero length array , it is 
 + * stripped from the fields and field order . 
 + * / 
 + @ Override 
 + protected List < Field > getFieldList ( ) { 
 + List < Field > fields = new ArrayList < Field > ( super . getFieldList ( ) ) ; 
 + if ( NativeLong . SIZE > 4 ) { 
 + Iterator < Field > fieldIterator = fields . iterator ( ) ; 
 + while ( fieldIterator . hasNext ( ) ) { 
 + Field field = fieldIterator . next ( ) ; 
 + if ( " _ f _ unused " . equals ( field . getName ( ) ) ) { 
 + fieldIterator . remove ( ) ; 
 + } 
 + } 
 + } 
 + return fields ; 
 + } 
 + 
 + @ Override 
 + protected List < String > getFieldOrder ( ) { 
 + List < String > fieldOrder = new ArrayList < String > ( super . getFieldOrder ( ) ) ; 
 + if ( NativeLong . SIZE > 4 ) { 
 + fieldOrder . remove ( " _ f _ unused " ) ; 
 + } 
 + return fieldOrder ; 
 + } 
 + } 
 + 
 / * * 
 * sysinfo ( ) provides a simple way of getting overall system statistics . 
 * This is more portable than reading / dev / kmem . 
 @ @ - 106 , 4 + 155 , 16 @ @ public interface LibC extends LibCAPI , Library { 
 * is set appropriately . 
 * / 
 int sysinfo ( Sysinfo info ) ; 
 + 
 + / * * 
 + * The function statvfs ( ) returns information about a mounted filesystem . 
 + * 
 + * @ param path 
 + * the pathname of any file within the mounted filesystem . 
 + * @ param buf 
 + * a pointer to a statvfs structure 
 + * @ return On success , zero is returned . On error , - 1 is returned , and errno 
 + * is set appropriately . 
 + * / 
 + int statvfs ( String path , Statvfs buf ) ; 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / linux / LibCTest . java b / contrib / platform / test / com / sun / jna / platform / linux / LibCTest . java 
 index f834fc0 . . a418cf3 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / linux / LibCTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / linux / LibCTest . java 
 @ @ - 23 , 8 + 23 , 16 @ @ 
 * / 
 package com . sun . jna . platform . linux ; 
 
 + import java . io . BufferedReader ; 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . io . InputStreamReader ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 import org . junit . Test ; 
 
 + import com . sun . jna . platform . linux . LibC . Statvfs ; 
 import com . sun . jna . platform . linux . LibC . Sysinfo ; 
 
 import junit . framework . TestCase ; 
 @ @ - 51 , 4 + 59 , 43 @ @ public class LibCTest extends TestCase { 
 assertTrue ( info . freeram . longValue ( ) < = info . totalram . longValue ( ) ) ; 
 assertTrue ( info . freeswap . longValue ( ) < = info . totalswap . longValue ( ) ) ; 
 } 
 + 
 + @ Test 
 + public void testStatvfs ( ) throws IOException , InterruptedException { 
 + Statvfs vfs = new Statvfs ( ) ; 
 + 
 + / / Iterate ' mounts ' for mounted file systems 
 + List < String > mountList = mounts ( ) ; 
 + for ( String mount : mountList ) { 
 + / / Skip proc , etc . 
 + if ( ! mount . startsWith ( " / " ) ) { 
 + continue ; 
 + } 
 + String fs = mount . split ( " " ) [ 0 ] ; 
 + 
 + vfs . clear ( ) ; 
 + assertEquals ( 0 , LibC . INSTANCE . statvfs ( fs , vfs ) ) ; 
 + File f = new File ( fs ) ; 
 + assertEquals ( f . getTotalSpace ( ) , vfs . f _ blocks . longValue ( ) * vfs . f _ bsize . longValue ( ) ) ; 
 + assertEquals ( f . getUsableSpace ( ) , vfs . f _ bavail . longValue ( ) * vfs . f _ bsize . longValue ( ) ) ; 
 + assertTrue ( vfs . f _ bsize . longValue ( ) > 0 ) ; 
 + assertTrue ( vfs . f _ bfree . longValue ( ) < = vfs . f _ blocks . longValue ( ) ) ; 
 + assertTrue ( vfs . f _ ffree . longValue ( ) < = vfs . f _ files . longValue ( ) ) ; 
 + assertTrue ( vfs . f _ namemax . longValue ( ) > 0 ) ; 
 + } 
 + } 
 + 
 + private static List < String > mounts ( ) throws IOException , InterruptedException { 
 + Process p = Runtime . getRuntime ( ) . exec ( " mount " ) ; 
 + 
 + ArrayList < String > mounts = new ArrayList < String > ( ) ; 
 + BufferedReader reader = new BufferedReader ( new InputStreamReader ( p . getInputStream ( ) ) ) ; 
 + String line ; 
 + while ( ( line = reader . readLine ( ) ) ! = null ) { 
 + mounts . add ( line ) ; 
 + } 
 + p . waitFor ( ) ; 
 + reader . close ( ) ; 
 + return mounts ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
