BLEU SCORE: 0.027611988917697356

TEST MSG: Necessary interfaces for enumerating items in My Computer
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IEnumIDList . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IEnumIDList . java <nl> new file mode 100644 <nl> index 0000000 . . cf024c9 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IEnumIDList . java <nl> @ @ - 0 , 0 + 1 , 101 @ @ <nl> + package com . sun . jna . platform . win32 . COM ; <nl> + <nl> + / * <nl> + * Copyright ( c ) 2015 L W Ahonen , All Rights Reserved <nl> + * <nl> + * <nl> + * / <nl> + <nl> + import com . sun . jna . Function ; <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . platform . win32 . Guid ; <nl> + import com . sun . jna . platform . win32 . Guid . IID ; <nl> + import com . sun . jna . platform . win32 . Guid . REFIID ; <nl> + import com . sun . jna . platform . win32 . WinDef ; <nl> + import com . sun . jna . platform . win32 . WinNT ; <nl> + import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> + <nl> + public interface IEnumIDList { <nl> + <nl> + / * * <nl> + * The Constant IID _ IDispatch . <nl> + * / <nl> + public final static IID IID _ IEnumIDList = new IID ( <nl> + " { 000214F2 - 0000 - 0000 - C000 - 000000000046 } " ) ; <nl> + <nl> + HRESULT QueryInterface ( <nl> + Guid . GUID . ByReference riid , <nl> + PointerByReference ppvObject ) ; <nl> + <nl> + int AddRef ( ) ; <nl> + <nl> + int Release ( ) ; <nl> + <nl> + HRESULT Next ( <nl> + int celt , <nl> + PointerByReference rgelt , <nl> + IntByReference pceltFetched ) ; <nl> + <nl> + HRESULT Skip ( <nl> + int celt ) ; <nl> + <nl> + HRESULT Reset ( ) ; <nl> + <nl> + HRESULT Clone ( <nl> + PointerByReference ppenum ) ; <nl> + <nl> + <nl> + public static class Converter { <nl> + public static IEnumIDList PointerToIEnumIDList ( final PointerByReference ptr ) { <nl> + final Pointer interfacePointer = ptr . getValue ( ) ; <nl> + final Pointer vTablePointer = interfacePointer . getPointer ( 0 ) ; <nl> + final Pointer [ ] vTable = new Pointer [ 7 ] ; <nl> + vTablePointer . read ( 0 , vTable , 0 , 7 ) ; <nl> + return new IEnumIDList ( ) { <nl> + <nl> + @ Override <nl> + public WinNT . HRESULT QueryInterface ( Guid . GUID . ByReference byValue , PointerByReference pointerByReference ) { <nl> + Function f = Function . getFunction ( vTable [ 0 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , byValue , pointerByReference } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int AddRef ( ) { <nl> + Function f = Function . getFunction ( vTable [ 1 ] , Function . ALT _ CONVENTION ) ; <nl> + return f . invokeInt ( new Object [ ] { interfacePointer } ) ; <nl> + } <nl> + <nl> + public int Release ( ) { <nl> + Function f = Function . getFunction ( vTable [ 2 ] , Function . ALT _ CONVENTION ) ; <nl> + return f . invokeInt ( new Object [ ] { interfacePointer } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT Next ( int celt , PointerByReference rgelt , IntByReference pceltFetched ) { <nl> + Function f = Function . getFunction ( vTable [ 3 ] , Function . ALT _ CONVENTION ) ; <nl> + return new HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , celt , rgelt , pceltFetched } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT Skip ( int celt ) { <nl> + Function f = Function . getFunction ( vTable [ 4 ] , Function . ALT _ CONVENTION ) ; <nl> + return new HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , celt } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT Reset ( ) { <nl> + Function f = Function . getFunction ( vTable [ 5 ] , Function . ALT _ CONVENTION ) ; <nl> + return new HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT Clone ( PointerByReference ppenum ) { <nl> + Function f = Function . getFunction ( vTable [ 6 ] , Function . ALT _ CONVENTION ) ; <nl> + return new HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , ppenum } ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IShellFolder . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IShellFolder . java <nl> new file mode 100644 <nl> index 0000000 . . 049f779 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IShellFolder . java <nl> @ @ - 0 , 0 + 1 , 182 @ @ <nl> + package com . sun . jna . platform . win32 . COM ; <nl> + <nl> + / * <nl> + * Copyright ( c ) 2015 L W Ahonen , All Rights Reserved <nl> + * <nl> + * / <nl> + <nl> + import com . sun . jna . Function ; <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . platform . win32 . Guid ; <nl> + import com . sun . jna . platform . win32 . Guid . IID ; <nl> + import com . sun . jna . platform . win32 . Guid . REFIID ; <nl> + import com . sun . jna . platform . win32 . WinDef ; <nl> + import com . sun . jna . platform . win32 . WinNT ; <nl> + import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> + <nl> + public interface IShellFolder { <nl> + <nl> + / * * The Constant IID _ IDispatch . * / <nl> + public final static IID IID _ ISHELLFOLDER = new IID ( <nl> + " { 000214E6 - 0000 - 0000 - C000 - 000000000046 } " ) ; <nl> + <nl> + HRESULT QueryInterface ( <nl> + REFIID riid , <nl> + PointerByReference ppvObject ) ; <nl> + <nl> + int AddRef ( ) ; <nl> + <nl> + int Release ( ) ; <nl> + <nl> + HRESULT ParseDisplayName ( <nl> + WinDef . HWND hwnd , <nl> + Pointer pbc , <nl> + String pszDisplayName , <nl> + IntByReference pchEaten , <nl> + PointerByReference ppidl , <nl> + IntByReference pdwAttributes ) ; <nl> + <nl> + HRESULT EnumObjects ( <nl> + WinDef . HWND hwnd , <nl> + int grfFlags , <nl> + PointerByReference ppenumIDList ) ; <nl> + <nl> + HRESULT BindToObject ( <nl> + Pointer pidl , <nl> + Pointer pbc , <nl> + REFIID riid , <nl> + PointerByReference ppv ) ; <nl> + <nl> + HRESULT BindToStorage ( <nl> + Pointer pidl , <nl> + Pointer pbc , <nl> + REFIID riid , <nl> + PointerByReference ppv ) ; <nl> + <nl> + HRESULT CompareIDs ( <nl> + WinDef . LPARAM lParam , <nl> + Pointer pidl1 , <nl> + Pointer pidl2 ) ; <nl> + <nl> + HRESULT CreateViewObject ( <nl> + WinDef . HWND hwndOwner , <nl> + REFIID riid , <nl> + PointerByReference ppv ) ; <nl> + <nl> + HRESULT GetAttributesOf ( <nl> + int cidl , <nl> + Pointer apidl , <nl> + IntByReference rgfInOut ) ; <nl> + <nl> + HRESULT GetUIObjectOf ( <nl> + WinDef . HWND hwndOwner , <nl> + int cidl , <nl> + Pointer apidl , <nl> + REFIID riid , <nl> + IntByReference rgfReserved , <nl> + PointerByReference ppv ) ; <nl> + <nl> + HRESULT GetDisplayNameOf ( <nl> + Pointer pidl , <nl> + int flags , <nl> + PointerByReference pName ) ; <nl> + <nl> + HRESULT SetNameOf ( <nl> + WinDef . HWND hwnd , <nl> + Pointer pidl , <nl> + String pszName , <nl> + int uFlags , <nl> + PointerByReference ppidlOut ) ; <nl> + <nl> + <nl> + <nl> + public static class Converter <nl> + { <nl> + public static IShellFolder PointerToIShellFolder ( final PointerByReference ptr ) <nl> + { <nl> + final Pointer interfacePointer = ptr . getValue ( ) ; <nl> + final Pointer vTablePointer = interfacePointer . getPointer ( 0 ) ; <nl> + final Pointer [ ] vTable = new Pointer [ 13 ] ; <nl> + vTablePointer . read ( 0 , vTable , 0 , 13 ) ; <nl> + return new IShellFolder ( ) { <nl> + <nl> + @ Override <nl> + public WinNT . HRESULT QueryInterface ( REFIID byValue , PointerByReference pointerByReference ) { <nl> + Function f = Function . getFunction ( vTable [ 0 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , byValue , pointerByReference } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int AddRef ( ) { <nl> + Function f = Function . getFunction ( vTable [ 1 ] , Function . ALT _ CONVENTION ) ; <nl> + return f . invokeInt ( new Object [ ] { interfacePointer } ) ; <nl> + } <nl> + <nl> + public int Release ( ) { <nl> + Function f = Function . getFunction ( vTable [ 2 ] , Function . ALT _ CONVENTION ) ; <nl> + return f . invokeInt ( new Object [ ] { interfacePointer } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public WinNT . HRESULT ParseDisplayName ( WinDef . HWND hwnd , Pointer pbc , String pszDisplayName , IntByReference pchEaten , PointerByReference ppidl , IntByReference pdwAttributes ) { <nl> + Function f = Function . getFunction ( vTable [ 3 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , hwnd , pbc , pszDisplayName , pchEaten , ppidl , pdwAttributes } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public WinNT . HRESULT EnumObjects ( WinDef . HWND hwnd , int grfFlags , PointerByReference ppenumIDList ) { <nl> + Function f = Function . getFunction ( vTable [ 4 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , hwnd , grfFlags , ppenumIDList } ) ) ; <nl> + } <nl> + <nl> + public WinNT . HRESULT BindToObject ( Pointer pidl , Pointer pbc , REFIID riid , PointerByReference ppv ) { <nl> + Function f = Function . getFunction ( vTable [ 5 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , pidl , pbc , riid , ppv } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT BindToStorage ( Pointer pidl , Pointer pbc , REFIID riid , PointerByReference ppv ) { <nl> + Function f = Function . getFunction ( vTable [ 6 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , pidl , pbc , riid , ppv } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT CompareIDs ( WinDef . LPARAM lParam , Pointer pidl1 , Pointer pidl2 ) { <nl> + Function f = Function . getFunction ( vTable [ 7 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , lParam , pidl1 , pidl2 } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT CreateViewObject ( WinDef . HWND hwndOwner , REFIID riid , PointerByReference ppv ) { <nl> + Function f = Function . getFunction ( vTable [ 8 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , hwndOwner , riid , ppv } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT GetAttributesOf ( int cidl , Pointer apidl , IntByReference rgfInOut ) { <nl> + Function f = Function . getFunction ( vTable [ 9 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , cidl , apidl , rgfInOut } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT GetUIObjectOf ( WinDef . HWND hwndOwner , int cidl , Pointer apidl , REFIID riid , IntByReference rgfReserved , PointerByReference ppv ) { <nl> + Function f = Function . getFunction ( vTable [ 10 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , hwndOwner , cidl , apidl , riid , rgfReserved , ppv } ) ) ; <nl> + } <nl> + <nl> + public WinNT . HRESULT GetDisplayNameOf ( Pointer pidl , int flags , PointerByReference pName ) { <nl> + Function f = Function . getFunction ( vTable [ 11 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , pidl , flags , pName } ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT SetNameOf ( WinDef . HWND hwnd , Pointer pidl , String pszName , int uFlags , PointerByReference ppidlOut ) { <nl> + Function f = Function . getFunction ( vTable [ 12 ] , Function . ALT _ CONVENTION ) ; <nl> + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , hwnd , pidl , pszName , uFlags , ppidlOut } ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IEnumIDList . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IEnumIDList . java 
 new file mode 100644 
 index 0000000 . . cf024c9 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IEnumIDList . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + package com . sun . jna . platform . win32 . COM ; 
 + 
 + / * 
 + * Copyright ( c ) 2015 L W Ahonen , All Rights Reserved 
 + * 
 + * 
 + * / 
 + 
 + import com . sun . jna . Function ; 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . platform . win32 . Guid ; 
 + import com . sun . jna . platform . win32 . Guid . IID ; 
 + import com . sun . jna . platform . win32 . Guid . REFIID ; 
 + import com . sun . jna . platform . win32 . WinDef ; 
 + import com . sun . jna . platform . win32 . WinNT ; 
 + import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 + 
 + public interface IEnumIDList { 
 + 
 + / * * 
 + * The Constant IID _ IDispatch . 
 + * / 
 + public final static IID IID _ IEnumIDList = new IID ( 
 + " { 000214F2 - 0000 - 0000 - C000 - 000000000046 } " ) ; 
 + 
 + HRESULT QueryInterface ( 
 + Guid . GUID . ByReference riid , 
 + PointerByReference ppvObject ) ; 
 + 
 + int AddRef ( ) ; 
 + 
 + int Release ( ) ; 
 + 
 + HRESULT Next ( 
 + int celt , 
 + PointerByReference rgelt , 
 + IntByReference pceltFetched ) ; 
 + 
 + HRESULT Skip ( 
 + int celt ) ; 
 + 
 + HRESULT Reset ( ) ; 
 + 
 + HRESULT Clone ( 
 + PointerByReference ppenum ) ; 
 + 
 + 
 + public static class Converter { 
 + public static IEnumIDList PointerToIEnumIDList ( final PointerByReference ptr ) { 
 + final Pointer interfacePointer = ptr . getValue ( ) ; 
 + final Pointer vTablePointer = interfacePointer . getPointer ( 0 ) ; 
 + final Pointer [ ] vTable = new Pointer [ 7 ] ; 
 + vTablePointer . read ( 0 , vTable , 0 , 7 ) ; 
 + return new IEnumIDList ( ) { 
 + 
 + @ Override 
 + public WinNT . HRESULT QueryInterface ( Guid . GUID . ByReference byValue , PointerByReference pointerByReference ) { 
 + Function f = Function . getFunction ( vTable [ 0 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , byValue , pointerByReference } ) ) ; 
 + } 
 + 
 + @ Override 
 + public int AddRef ( ) { 
 + Function f = Function . getFunction ( vTable [ 1 ] , Function . ALT _ CONVENTION ) ; 
 + return f . invokeInt ( new Object [ ] { interfacePointer } ) ; 
 + } 
 + 
 + public int Release ( ) { 
 + Function f = Function . getFunction ( vTable [ 2 ] , Function . ALT _ CONVENTION ) ; 
 + return f . invokeInt ( new Object [ ] { interfacePointer } ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT Next ( int celt , PointerByReference rgelt , IntByReference pceltFetched ) { 
 + Function f = Function . getFunction ( vTable [ 3 ] , Function . ALT _ CONVENTION ) ; 
 + return new HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , celt , rgelt , pceltFetched } ) ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT Skip ( int celt ) { 
 + Function f = Function . getFunction ( vTable [ 4 ] , Function . ALT _ CONVENTION ) ; 
 + return new HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , celt } ) ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT Reset ( ) { 
 + Function f = Function . getFunction ( vTable [ 5 ] , Function . ALT _ CONVENTION ) ; 
 + return new HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer } ) ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT Clone ( PointerByReference ppenum ) { 
 + Function f = Function . getFunction ( vTable [ 6 ] , Function . ALT _ CONVENTION ) ; 
 + return new HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , ppenum } ) ) ; 
 + } 
 + } ; 
 + } 
 + } 
 + } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IShellFolder . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IShellFolder . java 
 new file mode 100644 
 index 0000000 . . 049f779 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IShellFolder . java 
 @ @ - 0 , 0 + 1 , 182 @ @ 
 + package com . sun . jna . platform . win32 . COM ; 
 + 
 + / * 
 + * Copyright ( c ) 2015 L W Ahonen , All Rights Reserved 
 + * 
 + * / 
 + 
 + import com . sun . jna . Function ; 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . platform . win32 . Guid ; 
 + import com . sun . jna . platform . win32 . Guid . IID ; 
 + import com . sun . jna . platform . win32 . Guid . REFIID ; 
 + import com . sun . jna . platform . win32 . WinDef ; 
 + import com . sun . jna . platform . win32 . WinNT ; 
 + import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 + 
 + public interface IShellFolder { 
 + 
 + / * * The Constant IID _ IDispatch . * / 
 + public final static IID IID _ ISHELLFOLDER = new IID ( 
 + " { 000214E6 - 0000 - 0000 - C000 - 000000000046 } " ) ; 
 + 
 + HRESULT QueryInterface ( 
 + REFIID riid , 
 + PointerByReference ppvObject ) ; 
 + 
 + int AddRef ( ) ; 
 + 
 + int Release ( ) ; 
 + 
 + HRESULT ParseDisplayName ( 
 + WinDef . HWND hwnd , 
 + Pointer pbc , 
 + String pszDisplayName , 
 + IntByReference pchEaten , 
 + PointerByReference ppidl , 
 + IntByReference pdwAttributes ) ; 
 + 
 + HRESULT EnumObjects ( 
 + WinDef . HWND hwnd , 
 + int grfFlags , 
 + PointerByReference ppenumIDList ) ; 
 + 
 + HRESULT BindToObject ( 
 + Pointer pidl , 
 + Pointer pbc , 
 + REFIID riid , 
 + PointerByReference ppv ) ; 
 + 
 + HRESULT BindToStorage ( 
 + Pointer pidl , 
 + Pointer pbc , 
 + REFIID riid , 
 + PointerByReference ppv ) ; 
 + 
 + HRESULT CompareIDs ( 
 + WinDef . LPARAM lParam , 
 + Pointer pidl1 , 
 + Pointer pidl2 ) ; 
 + 
 + HRESULT CreateViewObject ( 
 + WinDef . HWND hwndOwner , 
 + REFIID riid , 
 + PointerByReference ppv ) ; 
 + 
 + HRESULT GetAttributesOf ( 
 + int cidl , 
 + Pointer apidl , 
 + IntByReference rgfInOut ) ; 
 + 
 + HRESULT GetUIObjectOf ( 
 + WinDef . HWND hwndOwner , 
 + int cidl , 
 + Pointer apidl , 
 + REFIID riid , 
 + IntByReference rgfReserved , 
 + PointerByReference ppv ) ; 
 + 
 + HRESULT GetDisplayNameOf ( 
 + Pointer pidl , 
 + int flags , 
 + PointerByReference pName ) ; 
 + 
 + HRESULT SetNameOf ( 
 + WinDef . HWND hwnd , 
 + Pointer pidl , 
 + String pszName , 
 + int uFlags , 
 + PointerByReference ppidlOut ) ; 
 + 
 + 
 + 
 + public static class Converter 
 + { 
 + public static IShellFolder PointerToIShellFolder ( final PointerByReference ptr ) 
 + { 
 + final Pointer interfacePointer = ptr . getValue ( ) ; 
 + final Pointer vTablePointer = interfacePointer . getPointer ( 0 ) ; 
 + final Pointer [ ] vTable = new Pointer [ 13 ] ; 
 + vTablePointer . read ( 0 , vTable , 0 , 13 ) ; 
 + return new IShellFolder ( ) { 
 + 
 + @ Override 
 + public WinNT . HRESULT QueryInterface ( REFIID byValue , PointerByReference pointerByReference ) { 
 + Function f = Function . getFunction ( vTable [ 0 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , byValue , pointerByReference } ) ) ; 
 + } 
 + 
 + @ Override 
 + public int AddRef ( ) { 
 + Function f = Function . getFunction ( vTable [ 1 ] , Function . ALT _ CONVENTION ) ; 
 + return f . invokeInt ( new Object [ ] { interfacePointer } ) ; 
 + } 
 + 
 + public int Release ( ) { 
 + Function f = Function . getFunction ( vTable [ 2 ] , Function . ALT _ CONVENTION ) ; 
 + return f . invokeInt ( new Object [ ] { interfacePointer } ) ; 
 + } 
 + 
 + @ Override 
 + public WinNT . HRESULT ParseDisplayName ( WinDef . HWND hwnd , Pointer pbc , String pszDisplayName , IntByReference pchEaten , PointerByReference ppidl , IntByReference pdwAttributes ) { 
 + Function f = Function . getFunction ( vTable [ 3 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , hwnd , pbc , pszDisplayName , pchEaten , ppidl , pdwAttributes } ) ) ; 
 + } 
 + 
 + @ Override 
 + public WinNT . HRESULT EnumObjects ( WinDef . HWND hwnd , int grfFlags , PointerByReference ppenumIDList ) { 
 + Function f = Function . getFunction ( vTable [ 4 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , hwnd , grfFlags , ppenumIDList } ) ) ; 
 + } 
 + 
 + public WinNT . HRESULT BindToObject ( Pointer pidl , Pointer pbc , REFIID riid , PointerByReference ppv ) { 
 + Function f = Function . getFunction ( vTable [ 5 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , pidl , pbc , riid , ppv } ) ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT BindToStorage ( Pointer pidl , Pointer pbc , REFIID riid , PointerByReference ppv ) { 
 + Function f = Function . getFunction ( vTable [ 6 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , pidl , pbc , riid , ppv } ) ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT CompareIDs ( WinDef . LPARAM lParam , Pointer pidl1 , Pointer pidl2 ) { 
 + Function f = Function . getFunction ( vTable [ 7 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , lParam , pidl1 , pidl2 } ) ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT CreateViewObject ( WinDef . HWND hwndOwner , REFIID riid , PointerByReference ppv ) { 
 + Function f = Function . getFunction ( vTable [ 8 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , hwndOwner , riid , ppv } ) ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT GetAttributesOf ( int cidl , Pointer apidl , IntByReference rgfInOut ) { 
 + Function f = Function . getFunction ( vTable [ 9 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , cidl , apidl , rgfInOut } ) ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT GetUIObjectOf ( WinDef . HWND hwndOwner , int cidl , Pointer apidl , REFIID riid , IntByReference rgfReserved , PointerByReference ppv ) { 
 + Function f = Function . getFunction ( vTable [ 10 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , hwndOwner , cidl , apidl , riid , rgfReserved , ppv } ) ) ; 
 + } 
 + 
 + public WinNT . HRESULT GetDisplayNameOf ( Pointer pidl , int flags , PointerByReference pName ) { 
 + Function f = Function . getFunction ( vTable [ 11 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , pidl , flags , pName } ) ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT SetNameOf ( WinDef . HWND hwnd , Pointer pidl , String pszName , int uFlags , PointerByReference ppidlOut ) { 
 + Function f = Function . getFunction ( vTable [ 12 ] , Function . ALT _ CONVENTION ) ; 
 + return new WinNT . HRESULT ( f . invokeInt ( new Object [ ] { interfacePointer , hwnd , pidl , pszName , uFlags , ppidlOut } ) ) ; 
 + } 
 + } ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
