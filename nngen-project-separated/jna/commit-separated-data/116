BLEU SCORE: 0.016932492841722675

TEST MSG: OaIdlUtil # toPrimitiveArray fails if dimension bounds are not 0 - based
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 7ed28ac . . 9c931c3 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 13 , 6 + 13 , 7 @ @ Features <nl> Bug Fixes <nl> - - - - - - - - - <nl> * [ # 776 ] ( https : / / github . com / java - native - access / jna / issues / 776 ) : Do not include ClassPath attribute in MANIFEST . MF of jna - platform . - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 785 ] ( https : / / github . com / java - native - access / jna / issues / 785 ) : OaIdlUtil # toPrimitiveArray fails if dimension bounds are not 0 - based - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> <nl> Release 4 . 4 . 0 <nl> = = = = = = = = = = = = = <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java <nl> index 865397f . . 086262d 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java <nl> @ @ - 105 , 16 + 105 , 12 @ @ public abstract class OaIdlUtil { <nl> Pointer dataPointer = sa . accessData ( ) ; <nl> try { <nl> int dimensions = sa . getDimensionCount ( ) ; <nl> - int [ ] minIdx = new int [ dimensions ] ; <nl> - int [ ] maxIdx = new int [ dimensions ] ; <nl> int [ ] elements = new int [ dimensions ] ; <nl> int [ ] cumElements = new int [ dimensions ] ; <nl> int varType = sa . getVarType ( ) . intValue ( ) ; <nl> <nl> for ( int i = 0 ; i < dimensions ; i + + ) { <nl> - minIdx [ i ] = sa . getLBound ( i ) ; <nl> - maxIdx [ i ] = sa . getUBound ( i ) ; <nl> - elements [ i ] = maxIdx [ i ] - minIdx [ i ] + 1 ; <nl> + elements [ i ] = sa . getUBound ( i ) - sa . getLBound ( i ) + 1 ; <nl> } <nl> <nl> for ( int i = dimensions - 1 ; i > = 0 ; i - - ) { <nl> @ @ - 173 , 7 + 169 , 7 @ @ public abstract class OaIdlUtil { <nl> } <nl> <nl> Object targetArray = Array . newInstance ( Object . class , elements ) ; <nl> - toPrimitiveArray ( sourceArray , targetArray , minIdx , maxIdx , elements , cumElements , varType , new int [ 0 ] ) ; <nl> + toPrimitiveArray ( sourceArray , targetArray , elements , cumElements , varType , new int [ 0 ] ) ; <nl> return targetArray ; <nl> } finally { <nl> sa . unaccessData ( ) ; <nl> @ @ - 183 , 19 + 179 , 19 @ @ public abstract class OaIdlUtil { <nl> } <nl> } <nl> <nl> - private static void toPrimitiveArray ( Object dataArray , Object targetArray , int [ ] minIdx , int [ ] maxIdx , int [ ] elements , int [ ] cumElements , int varType , int [ ] currentIdx ) { <nl> + private static void toPrimitiveArray ( Object dataArray , Object targetArray , int [ ] elements , int [ ] cumElements , int varType , int [ ] currentIdx ) { <nl> int dimIdx = currentIdx . length ; <nl> int [ ] subIdx = new int [ currentIdx . length + 1 ] ; <nl> System . arraycopy ( currentIdx , 0 , subIdx , 0 , dimIdx ) ; <nl> - for ( int i = minIdx [ dimIdx ] ; i < = maxIdx [ dimIdx ] ; i + + ) { <nl> + for ( int i = 0 ; i < elements [ dimIdx ] ; i + + ) { <nl> subIdx [ dimIdx ] = i ; <nl> - if ( dimIdx = = ( minIdx . length - 1 ) ) { <nl> + if ( dimIdx = = ( elements . length - 1 ) ) { <nl> int offset = 0 ; <nl> for ( int j = 0 ; j < dimIdx ; j + + ) { <nl> offset + = cumElements [ j ] * currentIdx [ j ] ; <nl> } <nl> - offset + = subIdx [ dimIdx ] - minIdx [ dimIdx ] ; <nl> - int targetPos = subIdx [ dimIdx ] - minIdx [ dimIdx ] ; <nl> + offset + = subIdx [ dimIdx ] ; <nl> + int targetPos = subIdx [ dimIdx ] ; <nl> switch ( varType ) { <nl> case VT _ BOOL : <nl> Array . set ( targetArray , targetPos , Array . getShort ( dataArray , offset ) ! = 0 ) ; <nl> @ @ - 281 , 7 + 277 , 7 @ @ public abstract class OaIdlUtil { <nl> throw new IllegalStateException ( " Type not supported : " + varType ) ; <nl> } <nl> } else { <nl> - toPrimitiveArray ( dataArray , Array . get ( targetArray , i ) , minIdx , maxIdx , elements , cumElements , varType , subIdx ) ; <nl> + toPrimitiveArray ( dataArray , Array . get ( targetArray , i ) , elements , cumElements , varType , subIdx ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java <nl> index 2af404f . . 0caba84 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java <nl> @ @ - 25 , 7 + 25 , 6 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; <nl> import com . sun . jna . platform . win32 . OaIdl . DATE ; <nl> import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; <nl> - import static com . sun . jna . platform . win32 . OaIdlUtil . toPrimitiveArray ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> import static com . sun . jna . platform . win32 . Variant . VT _ BOOL ; <nl> import static com . sun . jna . platform . win32 . Variant . VT _ BSTR ; <nl> @ @ - 60 , 6 + 59 , 8 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertThat ; <nl> import org . junit . Before ; <nl> import static com . sun . jna . platform . win32 . OaIdlUtil . toPrimitiveArray ; <nl> + import com . sun . jna . platform . win32 . WTypes . VARTYPE ; <nl> + import com . sun . jna . platform . win32 . WinDef . LONG ; <nl> <nl> public class SAFEARRAYTest { <nl> static { <nl> @ @ - 218 , 6 + 219 , 34 @ @ public class SAFEARRAYTest { <nl> } <nl> <nl> @ Test <nl> + public void testMultidimensionalNotNullBased ( ) { <nl> + / / create a basic SAFEARRAY <nl> + SAFEARRAY sa = SAFEARRAY . createSafeArray ( new VARTYPE ( VT _ I4 ) , 2 , 2 ) ; <nl> + sa . putElement ( 1 , 0 , 0 ) ; <nl> + sa . putElement ( 2 , 0 , 1 ) ; <nl> + sa . putElement ( 3 , 1 , 0 ) ; <nl> + sa . putElement ( 4 , 1 , 1 ) ; <nl> + <nl> + / / query the plain SAFEARRAY <nl> + Object [ ] [ ] basic = ( Object [ ] [ ] ) OaIdlUtil . toPrimitiveArray ( sa , false ) ; <nl> + <nl> + / / Virtually move the bounds <nl> + sa . rgsabound [ 0 ] . lLbound = new LONG ( 2 ) ; <nl> + sa . rgsabound [ 1 ] . lLbound = new LONG ( 5 ) ; <nl> + sa . write ( ) ; <nl> + <nl> + / / Validate new bounds <nl> + Assert . assertEquals ( 2 , sa . getLBound ( 0 ) ) ; <nl> + Assert . assertEquals ( 3 , sa . getUBound ( 0 ) ) ; <nl> + Assert . assertEquals ( 5 , sa . getLBound ( 1 ) ) ; <nl> + Assert . assertEquals ( 6 , sa . getUBound ( 1 ) ) ; <nl> + <nl> + / / requery the moved array and compare with basic array <nl> + Object [ ] [ ] relocated = ( Object [ ] [ ] ) OaIdlUtil . toPrimitiveArray ( sa , false ) ; <nl> + Assert . assertArrayEquals ( basic , relocated ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testDataTypes ( ) { <nl> int idx = 1 ; <nl> Pointer dataPointer ;
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 7ed28ac . . 9c931c3 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 13 , 6 + 13 , 7 @ @ Features 
 Bug Fixes 
 - - - - - - - - - 
 * [ # 776 ] ( https : / / github . com / java - native - access / jna / issues / 776 ) : Do not include ClassPath attribute in MANIFEST . MF of jna - platform . - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 785 ] ( https : / / github . com / java - native - access / jna / issues / 785 ) : OaIdlUtil # toPrimitiveArray fails if dimension bounds are not 0 - based - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 
 Release 4 . 4 . 0 
 = = = = = = = = = = = = = 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java 
 index 865397f . . 086262d 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java 
 @ @ - 105 , 16 + 105 , 12 @ @ public abstract class OaIdlUtil { 
 Pointer dataPointer = sa . accessData ( ) ; 
 try { 
 int dimensions = sa . getDimensionCount ( ) ; 
 - int [ ] minIdx = new int [ dimensions ] ; 
 - int [ ] maxIdx = new int [ dimensions ] ; 
 int [ ] elements = new int [ dimensions ] ; 
 int [ ] cumElements = new int [ dimensions ] ; 
 int varType = sa . getVarType ( ) . intValue ( ) ; 
 
 for ( int i = 0 ; i < dimensions ; i + + ) { 
 - minIdx [ i ] = sa . getLBound ( i ) ; 
 - maxIdx [ i ] = sa . getUBound ( i ) ; 
 - elements [ i ] = maxIdx [ i ] - minIdx [ i ] + 1 ; 
 + elements [ i ] = sa . getUBound ( i ) - sa . getLBound ( i ) + 1 ; 
 } 
 
 for ( int i = dimensions - 1 ; i > = 0 ; i - - ) { 
 @ @ - 173 , 7 + 169 , 7 @ @ public abstract class OaIdlUtil { 
 } 
 
 Object targetArray = Array . newInstance ( Object . class , elements ) ; 
 - toPrimitiveArray ( sourceArray , targetArray , minIdx , maxIdx , elements , cumElements , varType , new int [ 0 ] ) ; 
 + toPrimitiveArray ( sourceArray , targetArray , elements , cumElements , varType , new int [ 0 ] ) ; 
 return targetArray ; 
 } finally { 
 sa . unaccessData ( ) ; 
 @ @ - 183 , 19 + 179 , 19 @ @ public abstract class OaIdlUtil { 
 } 
 } 
 
 - private static void toPrimitiveArray ( Object dataArray , Object targetArray , int [ ] minIdx , int [ ] maxIdx , int [ ] elements , int [ ] cumElements , int varType , int [ ] currentIdx ) { 
 + private static void toPrimitiveArray ( Object dataArray , Object targetArray , int [ ] elements , int [ ] cumElements , int varType , int [ ] currentIdx ) { 
 int dimIdx = currentIdx . length ; 
 int [ ] subIdx = new int [ currentIdx . length + 1 ] ; 
 System . arraycopy ( currentIdx , 0 , subIdx , 0 , dimIdx ) ; 
 - for ( int i = minIdx [ dimIdx ] ; i < = maxIdx [ dimIdx ] ; i + + ) { 
 + for ( int i = 0 ; i < elements [ dimIdx ] ; i + + ) { 
 subIdx [ dimIdx ] = i ; 
 - if ( dimIdx = = ( minIdx . length - 1 ) ) { 
 + if ( dimIdx = = ( elements . length - 1 ) ) { 
 int offset = 0 ; 
 for ( int j = 0 ; j < dimIdx ; j + + ) { 
 offset + = cumElements [ j ] * currentIdx [ j ] ; 
 } 
 - offset + = subIdx [ dimIdx ] - minIdx [ dimIdx ] ; 
 - int targetPos = subIdx [ dimIdx ] - minIdx [ dimIdx ] ; 
 + offset + = subIdx [ dimIdx ] ; 
 + int targetPos = subIdx [ dimIdx ] ; 
 switch ( varType ) { 
 case VT _ BOOL : 
 Array . set ( targetArray , targetPos , Array . getShort ( dataArray , offset ) ! = 0 ) ; 
 @ @ - 281 , 7 + 277 , 7 @ @ public abstract class OaIdlUtil { 
 throw new IllegalStateException ( " Type not supported : " + varType ) ; 
 } 
 } else { 
 - toPrimitiveArray ( dataArray , Array . get ( targetArray , i ) , minIdx , maxIdx , elements , cumElements , varType , subIdx ) ; 
 + toPrimitiveArray ( dataArray , Array . get ( targetArray , i ) , elements , cumElements , varType , subIdx ) ; 
 } 
 } 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java 
 index 2af404f . . 0caba84 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java 
 @ @ - 25 , 7 + 25 , 6 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; 
 import com . sun . jna . platform . win32 . OaIdl . DATE ; 
 import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; 
 - import static com . sun . jna . platform . win32 . OaIdlUtil . toPrimitiveArray ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 import static com . sun . jna . platform . win32 . Variant . VT _ BOOL ; 
 import static com . sun . jna . platform . win32 . Variant . VT _ BSTR ; 
 @ @ - 60 , 6 + 59 , 8 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertThat ; 
 import org . junit . Before ; 
 import static com . sun . jna . platform . win32 . OaIdlUtil . toPrimitiveArray ; 
 + import com . sun . jna . platform . win32 . WTypes . VARTYPE ; 
 + import com . sun . jna . platform . win32 . WinDef . LONG ; 
 
 public class SAFEARRAYTest { 
 static { 
 @ @ - 218 , 6 + 219 , 34 @ @ public class SAFEARRAYTest { 
 } 
 
 @ Test 
 + public void testMultidimensionalNotNullBased ( ) { 
 + / / create a basic SAFEARRAY 
 + SAFEARRAY sa = SAFEARRAY . createSafeArray ( new VARTYPE ( VT _ I4 ) , 2 , 2 ) ; 
 + sa . putElement ( 1 , 0 , 0 ) ; 
 + sa . putElement ( 2 , 0 , 1 ) ; 
 + sa . putElement ( 3 , 1 , 0 ) ; 
 + sa . putElement ( 4 , 1 , 1 ) ; 
 + 
 + / / query the plain SAFEARRAY 
 + Object [ ] [ ] basic = ( Object [ ] [ ] ) OaIdlUtil . toPrimitiveArray ( sa , false ) ; 
 + 
 + / / Virtually move the bounds 
 + sa . rgsabound [ 0 ] . lLbound = new LONG ( 2 ) ; 
 + sa . rgsabound [ 1 ] . lLbound = new LONG ( 5 ) ; 
 + sa . write ( ) ; 
 + 
 + / / Validate new bounds 
 + Assert . assertEquals ( 2 , sa . getLBound ( 0 ) ) ; 
 + Assert . assertEquals ( 3 , sa . getUBound ( 0 ) ) ; 
 + Assert . assertEquals ( 5 , sa . getLBound ( 1 ) ) ; 
 + Assert . assertEquals ( 6 , sa . getUBound ( 1 ) ) ; 
 + 
 + / / requery the moved array and compare with basic array 
 + Object [ ] [ ] relocated = ( Object [ ] [ ] ) OaIdlUtil . toPrimitiveArray ( sa , false ) ; 
 + Assert . assertArrayEquals ( basic , relocated ) ; 
 + } 
 + 
 + @ Test 
 public void testDataTypes ( ) { 
 int idx = 1 ; 
 Pointer dataPointer ;

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
