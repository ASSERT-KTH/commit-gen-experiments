BLEU SCORE: 0.020980574531482755

TEST MSG: Fix issue # 490 by allowing specification of calling convention
GENERATED MSG: add dll callbacks , tests , explicit flags for dlopen

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index ba7acf3 . . d55b6fa 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 53 , 6 + 53 , 7 @ @ Features <nl> * [ # 483 ] ( https : / / github . com / twall / jna / pull / 483 ) : Found and fixed duplicate method definitions for the same API in ' com . sun . jna . platform . win32 ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> * [ # 485 ] ( https : / / github . com / twall / jna / pull / 485 ) : Implemented Comparable interface for many of the base types in ' com . sun . jna . platform . win32 . WinDef ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> * [ # 488 ] ( https : / / github . com / twall / jna / pull / 488 ) : Added GetRawInputDeviceList definition and utility to ' com . sun . jna . platform . win32 ' User32 and User32Util - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> + * [ # 490 ] ( https : / / github . com / twall / jna / issues / 490 ) : Allow arbitrary calling convention specification , including FFI _ MS _ CDECL which alters handling of struct return values , and multiple Linux / PowerPC conventions - [ @ twall ] ( https : / / github . com / twall ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / lib / native / win32 - x86 - 64 . jar b / lib / native / win32 - x86 - 64 . jar <nl> index 9b293d5 . . b574d69 100755 <nl> Binary files a / lib / native / win32 - x86 - 64 . jar and b / lib / native / win32 - x86 - 64 . jar differ <nl> diff - - git a / lib / native / win32 - x86 . jar b / lib / native / win32 - x86 . jar <nl> index 30eb928 . . 0d07eda 100755 <nl> Binary files a / lib / native / win32 - x86 . jar and b / lib / native / win32 - x86 . jar differ <nl> diff - - git a / native / Makefile b / native / Makefile <nl> index f7dbd38 . . 6307996 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 177 , 7 + 177 , 13 @ @ LIBPFX = <nl> LIBSFX = . dll <nl> TESTLIB _ TRUNC = $ ( BUILD ) / testlib - truncated . dll <nl> ifeq ( $ ( ARCH ) , amd64 ) <nl> + MINGW _ PREFIX ? = x86 _ 64 - w64 - mingw32 - <nl> FFI _ CONFIG + = - - host = x86 _ 64 - w64 - mingw32 <nl> + # Need windres from mingw distribution , even if building with MSVC <nl> + WINDRES = $ ( MINGW _ PREFIX ) windres <nl> + MINGW = $ ( MINGW _ PREFIX ) gcc <nl> + else <nl> + MINGW _ PREFIX ? = i686 - pc - mingw32 - <nl> endif <nl> <nl> ifeq ( $ ( USE _ MSVC ) , true ) <nl> @ @ - 202 , 15 + 208 , 12 @ @ LDFLAGS = - o $ @ - shared <nl> FFI _ ENV + = CXXCPP = " $ ( CPP ) " <nl> <nl> ifneq ( $ ( ARCH ) , amd64 ) <nl> - MINGW _ PREFIX ? = i686 - pc - mingw32 - <nl> CC = $ ( MINGW _ PREFIX ) gcc <nl> CPP = $ ( MINGW _ PREFIX ) gcc - E <nl> LDFLAGS + = - Wl , - - add - stdcall - alias <nl> LIBS = - lpsapi <nl> else <nl> # mingw64 lacks SEH , so MSVC build is preferred <nl> - MINGW _ PREFIX ? = x86 _ 64 - w64 - mingw32 - <nl> - MINGW = $ ( MINGW _ PREFIX ) gcc <nl> CC = $ ( MINGW ) <nl> # No SEH under mingw64 , thus no HAVE _ PROTECTION <nl> CDEFINES = - DPSAPI _ VERSION = 1 <nl> @ @ - 219 , 9 + 222 , 6 @ @ LIBS = - lmingwex - lpsapi - lkernel32 - lmsvcrt <nl> endif <nl> endif <nl> <nl> - # Need windres from mingw distribution , even if building with MSVC <nl> - WINDRES = $ ( MINGW _ PREFIX ) windres <nl> - <nl> endif <nl> <nl> ifeq ( $ ( OS ) , linux ) <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index e74d070 . . 73125f3 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 598 , 11 + 598 , 15 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray args , <nl> break ; <nl> # endif / / _ WIN32 <nl> default : <nl> - snprintf ( msg , sizeof ( msg ) , <nl> - " Unrecognized calling convention : % d " , ( int ) callconv ) ; <nl> - throw _ type = EIllegalArgument ; <nl> - throw _ msg = msg ; <nl> - goto cleanup ; <nl> + abi = ( int ) callconv ; <nl> + if ( ! ( abi > FFI _ FIRST _ ABI & & abi < FFI _ LAST _ ABI ) ) { <nl> + snprintf ( msg , sizeof ( msg ) , <nl> + " Unrecognized calling convention : % d " , abi ) ; <nl> + throw _ type = EIllegalArgument ; <nl> + throw _ msg = msg ; <nl> + goto cleanup ; <nl> + } <nl> + break ; <nl> } <nl> <nl> status = ffi _ prep _ cif ( & cif , abi , nargs , return _ type , arg _ types ) ; <nl> @ @ - 1142 , 7 + 1146 , 7 @ @ toNativeTypeMapped ( JNIEnv * env , jobject obj , void * valuep , size _ t size , jobject <nl> static void <nl> fromNativeTypeMapped ( JNIEnv * env , jobject from _ native , <nl> void * native _ return _ value , <nl> - int jtype , int size , <nl> + int jtype , size _ t size , <nl> jclass java _ return _ class , <nl> void * result _ storage , <nl> const char * encoding ) { <nl> diff - - git a / src / com / sun / jna / Function . java b / src / com / sun / jna / Function . java <nl> index edad221 . . 3ddae7d 100644 <nl> - - - a / src / com / sun / jna / Function . java <nl> + + + b / src / com / sun / jna / Function . java <nl> @ @ - 55 , 11 + 55 , 11 @ @ public class Function extends Pointer { <nl> / * * Standard C calling convention . * / <nl> public static final int C _ CONVENTION = 0 ; <nl> / * * First alternate convention ( currently used only for w32 stdcall ) . * / <nl> - public static final int ALT _ CONVENTION = 1 ; <nl> + public static final int ALT _ CONVENTION = 0x3F ; <nl> <nl> - private static final int MASK _ CC = 0x3 ; <nl> + private static final int MASK _ CC = 0x3F ; <nl> / * * Whether to throw an exception if last error is non - zero after call . * / <nl> - public static final int THROW _ LAST _ ERROR = ( 1 < < 2 ) ; <nl> + public static final int THROW _ LAST _ ERROR = 0x40 ; <nl> <nl> static final Integer INTEGER _ TRUE = new Integer ( - 1 ) ; <nl> static final Integer INTEGER _ FALSE = new Integer ( 0 ) ; <nl> @ @ - 242 , 11 + 242 , 8 @ @ public class Function extends Pointer { <nl> <nl> private void checkCallingConvention ( int convention ) <nl> throws IllegalArgumentException { <nl> - switch ( convention ) { <nl> - case C _ CONVENTION : <nl> - case ALT _ CONVENTION : <nl> - break ; <nl> - default : <nl> + / / TODO : perform per - platform calling convention checks <nl> + if ( ( convention & MASK _ CC ) ! = convention ) { <nl> throw new IllegalArgumentException ( " Unrecognized calling convention : " <nl> + convention ) ; <nl> } <nl> @ @ - 256 , 7 + 253 , 6 @ @ public class Function extends Pointer { <nl> return functionName ; <nl> } <nl> <nl> - <nl> public int getCallingConvention ( ) { <nl> return callFlags & MASK _ CC ; <nl> }
NEAREST DIFF (one line): diff - - git a / native / Makefile b / native / Makefile <nl> old mode 100755 <nl> new mode 100644 <nl> diff - - git a / pom - jna . xml b / pom - jna . xml <nl> old mode 100755 <nl> new mode 100644 <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> old mode 100755 <nl> new mode 100644

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index ba7acf3 . . d55b6fa 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 53 , 6 + 53 , 7 @ @ Features 
 * [ # 483 ] ( https : / / github . com / twall / jna / pull / 483 ) : Found and fixed duplicate method definitions for the same API in ' com . sun . jna . platform . win32 ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 * [ # 485 ] ( https : / / github . com / twall / jna / pull / 485 ) : Implemented Comparable interface for many of the base types in ' com . sun . jna . platform . win32 . WinDef ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 * [ # 488 ] ( https : / / github . com / twall / jna / pull / 488 ) : Added GetRawInputDeviceList definition and utility to ' com . sun . jna . platform . win32 ' User32 and User32Util - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 + * [ # 490 ] ( https : / / github . com / twall / jna / issues / 490 ) : Allow arbitrary calling convention specification , including FFI _ MS _ CDECL which alters handling of struct return values , and multiple Linux / PowerPC conventions - [ @ twall ] ( https : / / github . com / twall ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / lib / native / win32 - x86 - 64 . jar b / lib / native / win32 - x86 - 64 . jar 
 index 9b293d5 . . b574d69 100755 
 Binary files a / lib / native / win32 - x86 - 64 . jar and b / lib / native / win32 - x86 - 64 . jar differ 
 diff - - git a / lib / native / win32 - x86 . jar b / lib / native / win32 - x86 . jar 
 index 30eb928 . . 0d07eda 100755 
 Binary files a / lib / native / win32 - x86 . jar and b / lib / native / win32 - x86 . jar differ 
 diff - - git a / native / Makefile b / native / Makefile 
 index f7dbd38 . . 6307996 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 177 , 7 + 177 , 13 @ @ LIBPFX = 
 LIBSFX = . dll 
 TESTLIB _ TRUNC = $ ( BUILD ) / testlib - truncated . dll 
 ifeq ( $ ( ARCH ) , amd64 ) 
 + MINGW _ PREFIX ? = x86 _ 64 - w64 - mingw32 - 
 FFI _ CONFIG + = - - host = x86 _ 64 - w64 - mingw32 
 + # Need windres from mingw distribution , even if building with MSVC 
 + WINDRES = $ ( MINGW _ PREFIX ) windres 
 + MINGW = $ ( MINGW _ PREFIX ) gcc 
 + else 
 + MINGW _ PREFIX ? = i686 - pc - mingw32 - 
 endif 
 
 ifeq ( $ ( USE _ MSVC ) , true ) 
 @ @ - 202 , 15 + 208 , 12 @ @ LDFLAGS = - o $ @ - shared 
 FFI _ ENV + = CXXCPP = " $ ( CPP ) " 
 
 ifneq ( $ ( ARCH ) , amd64 ) 
 - MINGW _ PREFIX ? = i686 - pc - mingw32 - 
 CC = $ ( MINGW _ PREFIX ) gcc 
 CPP = $ ( MINGW _ PREFIX ) gcc - E 
 LDFLAGS + = - Wl , - - add - stdcall - alias 
 LIBS = - lpsapi 
 else 
 # mingw64 lacks SEH , so MSVC build is preferred 
 - MINGW _ PREFIX ? = x86 _ 64 - w64 - mingw32 - 
 - MINGW = $ ( MINGW _ PREFIX ) gcc 
 CC = $ ( MINGW ) 
 # No SEH under mingw64 , thus no HAVE _ PROTECTION 
 CDEFINES = - DPSAPI _ VERSION = 1 
 @ @ - 219 , 9 + 222 , 6 @ @ LIBS = - lmingwex - lpsapi - lkernel32 - lmsvcrt 
 endif 
 endif 
 
 - # Need windres from mingw distribution , even if building with MSVC 
 - WINDRES = $ ( MINGW _ PREFIX ) windres 
 - 
 endif 
 
 ifeq ( $ ( OS ) , linux ) 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index e74d070 . . 73125f3 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 598 , 11 + 598 , 15 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray args , 
 break ; 
 # endif / / _ WIN32 
 default : 
 - snprintf ( msg , sizeof ( msg ) , 
 - " Unrecognized calling convention : % d " , ( int ) callconv ) ; 
 - throw _ type = EIllegalArgument ; 
 - throw _ msg = msg ; 
 - goto cleanup ; 
 + abi = ( int ) callconv ; 
 + if ( ! ( abi > FFI _ FIRST _ ABI & & abi < FFI _ LAST _ ABI ) ) { 
 + snprintf ( msg , sizeof ( msg ) , 
 + " Unrecognized calling convention : % d " , abi ) ; 
 + throw _ type = EIllegalArgument ; 
 + throw _ msg = msg ; 
 + goto cleanup ; 
 + } 
 + break ; 
 } 
 
 status = ffi _ prep _ cif ( & cif , abi , nargs , return _ type , arg _ types ) ; 
 @ @ - 1142 , 7 + 1146 , 7 @ @ toNativeTypeMapped ( JNIEnv * env , jobject obj , void * valuep , size _ t size , jobject 
 static void 
 fromNativeTypeMapped ( JNIEnv * env , jobject from _ native , 
 void * native _ return _ value , 
 - int jtype , int size , 
 + int jtype , size _ t size , 
 jclass java _ return _ class , 
 void * result _ storage , 
 const char * encoding ) { 
 diff - - git a / src / com / sun / jna / Function . java b / src / com / sun / jna / Function . java 
 index edad221 . . 3ddae7d 100644 
 - - - a / src / com / sun / jna / Function . java 
 + + + b / src / com / sun / jna / Function . java 
 @ @ - 55 , 11 + 55 , 11 @ @ public class Function extends Pointer { 
 / * * Standard C calling convention . * / 
 public static final int C _ CONVENTION = 0 ; 
 / * * First alternate convention ( currently used only for w32 stdcall ) . * / 
 - public static final int ALT _ CONVENTION = 1 ; 
 + public static final int ALT _ CONVENTION = 0x3F ; 
 
 - private static final int MASK _ CC = 0x3 ; 
 + private static final int MASK _ CC = 0x3F ; 
 / * * Whether to throw an exception if last error is non - zero after call . * / 
 - public static final int THROW _ LAST _ ERROR = ( 1 < < 2 ) ; 
 + public static final int THROW _ LAST _ ERROR = 0x40 ; 
 
 static final Integer INTEGER _ TRUE = new Integer ( - 1 ) ; 
 static final Integer INTEGER _ FALSE = new Integer ( 0 ) ; 
 @ @ - 242 , 11 + 242 , 8 @ @ public class Function extends Pointer { 
 
 private void checkCallingConvention ( int convention ) 
 throws IllegalArgumentException { 
 - switch ( convention ) { 
 - case C _ CONVENTION : 
 - case ALT _ CONVENTION : 
 - break ; 
 - default : 
 + / / TODO : perform per - platform calling convention checks 
 + if ( ( convention & MASK _ CC ) ! = convention ) { 
 throw new IllegalArgumentException ( " Unrecognized calling convention : " 
 + convention ) ; 
 } 
 @ @ - 256 , 7 + 253 , 6 @ @ public class Function extends Pointer { 
 return functionName ; 
 } 
 
 - 
 public int getCallingConvention ( ) { 
 return callFlags & MASK _ CC ; 
 }

NEAREST DIFF:
diff - - git a / native / Makefile b / native / Makefile 
 old mode 100755 
 new mode 100644 
 diff - - git a / pom - jna . xml b / pom - jna . xml 
 old mode 100755 
 new mode 100644 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 old mode 100755 
 new mode 100644
