BLEU SCORE: 0.040583489434387374

TEST MSG: always create errno , detach TLS
GENERATED MSG: clean up thread termination handling

TEST DIFF (one line): diff - - git a / native / callback . c b / native / callback . c <nl> index 80efee4 . . 87c605e 100644 <nl> - - - a / native / callback . c <nl> + + + b / native / callback . c <nl> @ @ - 485 , 13 + 485 , 13 @ @ static void detach _ thread ( void * data ) { <nl> <nl> # ifdef _ WIN32 <nl> <nl> - static DWORD tls _ thread _ key , tls _ detach _ key ; <nl> - static DWORD tls _ errno _ key ; <nl> + static DWORD tls _ thread _ cleanup _ key ; <nl> + static DWORD tls _ errno _ key , tls _ detach _ key ; <nl> BOOL WINAPI DllMain ( HINSTANCE hDLL , DWORD fdwReason , LPVOID lpvReserved ) { <nl> switch ( fdwReason ) { <nl> case DLL _ PROCESS _ ATTACH : <nl> - tls _ thread _ key = TlsAlloc ( ) ; <nl> - if ( tls _ thread _ key = = TLS _ OUT _ OF _ INDEXES ) { <nl> + tls _ thread _ cleanup _ key = TlsAlloc ( ) ; <nl> + if ( tls _ thread _ cleanup _ key = = TLS _ OUT _ OF _ INDEXES ) { <nl> return FALSE ; <nl> } <nl> tls _ detach _ key = TlsAlloc ( ) ; <nl> @ @ - 504 , 14 + 504 , 14 @ @ BOOL WINAPI DllMain ( HINSTANCE hDLL , DWORD fdwReason , LPVOID lpvReserved ) { <nl> } <nl> break ; <nl> case DLL _ PROCESS _ DETACH : <nl> - TlsFree ( tls _ thread _ key ) ; <nl> + TlsFree ( tls _ thread _ cleanup _ key ) ; <nl> TlsFree ( tls _ detach _ key ) ; <nl> TlsFree ( tls _ errno _ key ) ; <nl> break ; <nl> case DLL _ THREAD _ ATTACH : <nl> break ; <nl> case DLL _ THREAD _ DETACH : { <nl> - detach _ thread ( TlsGetValue ( tls _ thread _ key ) ) ; <nl> + detach _ thread ( TlsGetValue ( tls _ thread _ cleanup _ key ) ) ; <nl> break ; <nl> } <nl> default : <nl> @ @ - 524 , 14 + 524 , 14 @ @ BOOL WINAPI DllMain ( HINSTANCE hDLL , DWORD fdwReason , LPVOID lpvReserved ) { <nl> <nl> # include < pthread . h > <nl> <nl> - static pthread _ key _ t tls _ thread _ key , tls _ detach _ key ; <nl> - static void make _ thread _ key ( ) { <nl> - pthread _ key _ create ( & tls _ thread _ key , detach _ thread ) ; <nl> - pthread _ key _ create ( & tls _ detach _ key , NULL ) ; <nl> + static pthread _ key _ t tls _ thread _ cleanup _ key , tls _ detach _ key ; <nl> + static void make _ thread _ cleanup _ key ( ) { <nl> + pthread _ key _ create ( & tls _ thread _ cleanup _ key , detach _ thread ) ; <nl> } <nl> static pthread _ key _ t tls _ errno _ key ; <nl> - static void make _ errno _ key ( ) { <nl> + static void make _ thread _ keys ( ) { <nl> pthread _ key _ create ( & tls _ errno _ key , NULL ) ; <nl> + pthread _ key _ create ( & tls _ detach _ key , NULL ) ; <nl> } <nl> <nl> # endif <nl> @ @ - 564 , 14 + 564 , 14 @ @ jnidispatch _ get _ last _ error ( ) { <nl> static void <nl> jvm _ detach _ on _ exit ( JavaVM * jvm ) { <nl> # ifdef _ WIN32 <nl> - if ( ! TlsSetValue ( tls _ thread _ key , ( void * ) jvm ) ) { <nl> + if ( ! TlsSetValue ( tls _ thread _ cleanup _ key , ( void * ) jvm ) ) { <nl> fprintf ( stderr , " JNA : unable to set thread - local JVM value \ n " ) ; <nl> } <nl> # else <nl> static pthread _ once _ t key _ once = PTHREAD _ ONCE _ INIT ; <nl> - pthread _ once ( & key _ once , make _ thread _ key ) ; <nl> - if ( ! jvm | | pthread _ getspecific ( tls _ thread _ key ) = = NULL ) { <nl> - if ( pthread _ setspecific ( tls _ thread _ key , jvm ) ) { <nl> + pthread _ once ( & key _ once , make _ thread _ cleanup _ key ) ; <nl> + if ( ! jvm | | pthread _ getspecific ( tls _ thread _ cleanup _ key ) = = NULL ) { <nl> + if ( pthread _ setspecific ( tls _ thread _ cleanup _ key , jvm ) ) { <nl> fprintf ( stderr , " JNA : unable to set thread - local JVM value \ n " ) ; <nl> } <nl> } <nl> @ @ - 648 , 7 + 648 , 7 @ @ const char * <nl> jnidispatch _ callback _ init ( JNIEnv * env ) { <nl> # ifndef _ WIN32 <nl> static pthread _ once _ t key _ once = PTHREAD _ ONCE _ INIT ; <nl> - pthread _ once ( & key _ once , make _ errno _ key ) ; <nl> + pthread _ once ( & key _ once , make _ thread _ keys ) ; <nl> # endif <nl> <nl> if ( ! LOAD _ CREF ( env , Object , " java / lang / Object " ) ) return " java . lang . Object " ; <nl> @ @ - 664 , 7 + 664 , 7 @ @ jnidispatch _ callback _ dispose ( JNIEnv * env ) { <nl> } <nl> # ifndef _ WIN32 <nl> pthread _ key _ delete ( tls _ errno _ key ) ; <nl> - pthread _ key _ delete ( tls _ thread _ key ) ; <nl> + pthread _ key _ delete ( tls _ thread _ cleanup _ key ) ; <nl> pthread _ key _ delete ( tls _ detach _ key ) ; <nl> # endif <nl> }
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index ddd1172 . . d4d8197 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 124 , 6 + 124 , 13 @ @ <nl> < condition property = " jar . omitted " value = " * * / * jnidispatch * " else = " jnilib - included " > <nl> < isset property = " omit - jnilib " / > <nl> < / condition > <nl> + < condition property = " cross - compile " value = " true " > <nl> + < isset property = " os . prefix " / > <nl> + < / condition > <nl> + < ! - - Keep cross - compiled natives separate from normal builds - - > <nl> + < condition property = " native . subdir " value = " native - $ { os . prefix } " else = " native " > <nl> + < isset property = " cross - compile " / > <nl> + < / condition > <nl> < condition property = " vm . arch " value = " - d64 " else = " " > <nl> < and > <nl> < not > < equals arg1 = " $ { os . prefix } " arg2 = " android - arm " trim = " true " / > < / not > <nl> @ @ - 198 , 11 + 205 , 7 @ @ <nl> < condition property = " ld . preload . name " value = " $ { ld . preload } " else = " IGNORE " > <nl> < not > < equals arg1 = " $ { libjsig } " arg2 = " " / > < / not > <nl> < / condition > <nl> - < ! - - Keep cross - compiled natives separate from normal builds - - > <nl> < property name = " native . jar " value = " $ { os . prefix } . jar " / > <nl> - < condition property = " native . subdir " value = " native - $ { os . prefix } " else = " native " > <nl> - < isset property = " os . prefix " / > <nl> - < / condition > <nl> < property name = " build . native " location = " $ { build } / $ { native . subdir } " / > <nl> < property name = " md5 . file " location = " $ { build . native } / jni . checksum " / > <nl> <nl> @ @ - 261 , 6 + 264 , 7 @ @ <nl> < uptodate property = " - jar " targetfile = " $ { build } / $ { jar } " > <nl> < srcfiles dir = " $ { classes } " > <nl> < patternset id = " jar - compiled " > <nl> + < include name = " lib / armeabi / * " / > <nl> < include name = " com / sun / jna / * " / > <nl> < include name = " com / sun / jna / * * / * " / > <nl> < / patternset > <nl> @ @ - 403 , 9 + 407 , 6 @ @ osname = macos <nl> < zipfileset src = " $ { lib . native } / w32ce - arm . jar " <nl> includes = " * jnidispatch * " <nl> prefix = " com / sun / jna / w32ce - arm " / > <nl> - < zipfileset src = " $ { lib . native } / android - arm . jar " <nl> - includes = " * jnidispatch * " <nl> - prefix = " com / sun / jna / android - arm " / > <nl> < / jar > <nl> < / target > <nl> <nl> @ @ - 621 , 6 + 622 , 10 @ @ osname = macos <nl> < os name = " AIX " / > <nl> < / or > <nl> < / condition > <nl> + < ! - - Native resource path within jna . jar - - > <nl> + < condition property = " native . path " value = " lib / armeabi " else = " com / sun / jna / $ { os . prefix } " > <nl> + < equals arg1 = " $ { os . prefix } " arg2 = " android - arm " / > <nl> + < / condition > <nl> <nl> < ! - - Default make program - - > <nl> < property name = " make " value = " make " / > <nl> @ @ - 640 , 13 + 645 , 13 @ @ osname = macos <nl> < arg value = " JNA _ JNI _ VERSION = $ { jni . version } " / > <nl> < arg value = " CHECKSUM = $ { jni . md5 } " / > <nl> < / exec > <nl> - < mkdir dir = " $ { classes } / com / sun / jna / $ { os . prefix } " / > <nl> - < copy todir = " $ { classes } / com / sun / jna / $ { os . prefix } " > <nl> + < mkdir dir = " $ { classes } / $ { native . path } " / > <nl> + < copy todir = " $ { classes } / $ { native . path } " > <nl> < fileset dir = " $ { build . native } " <nl> includes = " jnidispatch . dll , libjnidispatch . * " / > <nl> < / copy > <nl> - < mkdir dir = " $ { eclipse . classes } / com / sun / jna / $ { os . prefix } " / > <nl> - < copy todir = " $ { eclipse . classes } / com / sun / jna / $ { os . prefix } " <nl> + < mkdir dir = " $ { eclipse . classes } / $ { native . path } " / > <nl> + < copy todir = " $ { eclipse . classes } / $ { native . path } " <nl> failonerror = " false " > <nl> < fileset dir = " $ { build . native } " <nl> includes = " jnidispatch . dll , libjnidispatch . * " / > <nl> @ @ - 723 , 7 + 728 , 7 @ @ osname = macos <nl> <nl> < ! - - When running tests from an IDE , be sure to set jna . library . path - - > <nl> < ! - - to where the test library ( testlib ) is found . - - > <nl> - < target name = " test " depends = " jar , compile - tests " <nl> + < target name = " test " depends = " jar , compile - tests " unless = " cross - compile " <nl> description = " Run all unit tests " > <nl> < property name = " test . fork " value = " yes " / > <nl> < property name = " reports . junit " location = " $ { reports } / junit " / > <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index 15cb55b . . b4e4f10 100755 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 689 , 6 + 689 , 10 @ @ public final class Native { <nl> } <nl> } <nl> } <nl> + if ( Platform . isAndroid ( ) ) { <nl> + / / Native libraries on android must be bundled with the APK <nl> + System . setProperty ( " jna . nounpack " , " true " ) ; <nl> + } <nl> try { <nl> if ( ! Boolean . getBoolean ( " jna . nosys " ) ) { <nl> System . loadLibrary ( libName ) ;

TEST DIFF:
diff - - git a / native / callback . c b / native / callback . c 
 index 80efee4 . . 87c605e 100644 
 - - - a / native / callback . c 
 + + + b / native / callback . c 
 @ @ - 485 , 13 + 485 , 13 @ @ static void detach _ thread ( void * data ) { 
 
 # ifdef _ WIN32 
 
 - static DWORD tls _ thread _ key , tls _ detach _ key ; 
 - static DWORD tls _ errno _ key ; 
 + static DWORD tls _ thread _ cleanup _ key ; 
 + static DWORD tls _ errno _ key , tls _ detach _ key ; 
 BOOL WINAPI DllMain ( HINSTANCE hDLL , DWORD fdwReason , LPVOID lpvReserved ) { 
 switch ( fdwReason ) { 
 case DLL _ PROCESS _ ATTACH : 
 - tls _ thread _ key = TlsAlloc ( ) ; 
 - if ( tls _ thread _ key = = TLS _ OUT _ OF _ INDEXES ) { 
 + tls _ thread _ cleanup _ key = TlsAlloc ( ) ; 
 + if ( tls _ thread _ cleanup _ key = = TLS _ OUT _ OF _ INDEXES ) { 
 return FALSE ; 
 } 
 tls _ detach _ key = TlsAlloc ( ) ; 
 @ @ - 504 , 14 + 504 , 14 @ @ BOOL WINAPI DllMain ( HINSTANCE hDLL , DWORD fdwReason , LPVOID lpvReserved ) { 
 } 
 break ; 
 case DLL _ PROCESS _ DETACH : 
 - TlsFree ( tls _ thread _ key ) ; 
 + TlsFree ( tls _ thread _ cleanup _ key ) ; 
 TlsFree ( tls _ detach _ key ) ; 
 TlsFree ( tls _ errno _ key ) ; 
 break ; 
 case DLL _ THREAD _ ATTACH : 
 break ; 
 case DLL _ THREAD _ DETACH : { 
 - detach _ thread ( TlsGetValue ( tls _ thread _ key ) ) ; 
 + detach _ thread ( TlsGetValue ( tls _ thread _ cleanup _ key ) ) ; 
 break ; 
 } 
 default : 
 @ @ - 524 , 14 + 524 , 14 @ @ BOOL WINAPI DllMain ( HINSTANCE hDLL , DWORD fdwReason , LPVOID lpvReserved ) { 
 
 # include < pthread . h > 
 
 - static pthread _ key _ t tls _ thread _ key , tls _ detach _ key ; 
 - static void make _ thread _ key ( ) { 
 - pthread _ key _ create ( & tls _ thread _ key , detach _ thread ) ; 
 - pthread _ key _ create ( & tls _ detach _ key , NULL ) ; 
 + static pthread _ key _ t tls _ thread _ cleanup _ key , tls _ detach _ key ; 
 + static void make _ thread _ cleanup _ key ( ) { 
 + pthread _ key _ create ( & tls _ thread _ cleanup _ key , detach _ thread ) ; 
 } 
 static pthread _ key _ t tls _ errno _ key ; 
 - static void make _ errno _ key ( ) { 
 + static void make _ thread _ keys ( ) { 
 pthread _ key _ create ( & tls _ errno _ key , NULL ) ; 
 + pthread _ key _ create ( & tls _ detach _ key , NULL ) ; 
 } 
 
 # endif 
 @ @ - 564 , 14 + 564 , 14 @ @ jnidispatch _ get _ last _ error ( ) { 
 static void 
 jvm _ detach _ on _ exit ( JavaVM * jvm ) { 
 # ifdef _ WIN32 
 - if ( ! TlsSetValue ( tls _ thread _ key , ( void * ) jvm ) ) { 
 + if ( ! TlsSetValue ( tls _ thread _ cleanup _ key , ( void * ) jvm ) ) { 
 fprintf ( stderr , " JNA : unable to set thread - local JVM value \ n " ) ; 
 } 
 # else 
 static pthread _ once _ t key _ once = PTHREAD _ ONCE _ INIT ; 
 - pthread _ once ( & key _ once , make _ thread _ key ) ; 
 - if ( ! jvm | | pthread _ getspecific ( tls _ thread _ key ) = = NULL ) { 
 - if ( pthread _ setspecific ( tls _ thread _ key , jvm ) ) { 
 + pthread _ once ( & key _ once , make _ thread _ cleanup _ key ) ; 
 + if ( ! jvm | | pthread _ getspecific ( tls _ thread _ cleanup _ key ) = = NULL ) { 
 + if ( pthread _ setspecific ( tls _ thread _ cleanup _ key , jvm ) ) { 
 fprintf ( stderr , " JNA : unable to set thread - local JVM value \ n " ) ; 
 } 
 } 
 @ @ - 648 , 7 + 648 , 7 @ @ const char * 
 jnidispatch _ callback _ init ( JNIEnv * env ) { 
 # ifndef _ WIN32 
 static pthread _ once _ t key _ once = PTHREAD _ ONCE _ INIT ; 
 - pthread _ once ( & key _ once , make _ errno _ key ) ; 
 + pthread _ once ( & key _ once , make _ thread _ keys ) ; 
 # endif 
 
 if ( ! LOAD _ CREF ( env , Object , " java / lang / Object " ) ) return " java . lang . Object " ; 
 @ @ - 664 , 7 + 664 , 7 @ @ jnidispatch _ callback _ dispose ( JNIEnv * env ) { 
 } 
 # ifndef _ WIN32 
 pthread _ key _ delete ( tls _ errno _ key ) ; 
 - pthread _ key _ delete ( tls _ thread _ key ) ; 
 + pthread _ key _ delete ( tls _ thread _ cleanup _ key ) ; 
 pthread _ key _ delete ( tls _ detach _ key ) ; 
 # endif 
 }

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index ddd1172 . . d4d8197 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 124 , 6 + 124 , 13 @ @ 
 < condition property = " jar . omitted " value = " * * / * jnidispatch * " else = " jnilib - included " > 
 < isset property = " omit - jnilib " / > 
 < / condition > 
 + < condition property = " cross - compile " value = " true " > 
 + < isset property = " os . prefix " / > 
 + < / condition > 
 + < ! - - Keep cross - compiled natives separate from normal builds - - > 
 + < condition property = " native . subdir " value = " native - $ { os . prefix } " else = " native " > 
 + < isset property = " cross - compile " / > 
 + < / condition > 
 < condition property = " vm . arch " value = " - d64 " else = " " > 
 < and > 
 < not > < equals arg1 = " $ { os . prefix } " arg2 = " android - arm " trim = " true " / > < / not > 
 @ @ - 198 , 11 + 205 , 7 @ @ 
 < condition property = " ld . preload . name " value = " $ { ld . preload } " else = " IGNORE " > 
 < not > < equals arg1 = " $ { libjsig } " arg2 = " " / > < / not > 
 < / condition > 
 - < ! - - Keep cross - compiled natives separate from normal builds - - > 
 < property name = " native . jar " value = " $ { os . prefix } . jar " / > 
 - < condition property = " native . subdir " value = " native - $ { os . prefix } " else = " native " > 
 - < isset property = " os . prefix " / > 
 - < / condition > 
 < property name = " build . native " location = " $ { build } / $ { native . subdir } " / > 
 < property name = " md5 . file " location = " $ { build . native } / jni . checksum " / > 
 
 @ @ - 261 , 6 + 264 , 7 @ @ 
 < uptodate property = " - jar " targetfile = " $ { build } / $ { jar } " > 
 < srcfiles dir = " $ { classes } " > 
 < patternset id = " jar - compiled " > 
 + < include name = " lib / armeabi / * " / > 
 < include name = " com / sun / jna / * " / > 
 < include name = " com / sun / jna / * * / * " / > 
 < / patternset > 
 @ @ - 403 , 9 + 407 , 6 @ @ osname = macos 
 < zipfileset src = " $ { lib . native } / w32ce - arm . jar " 
 includes = " * jnidispatch * " 
 prefix = " com / sun / jna / w32ce - arm " / > 
 - < zipfileset src = " $ { lib . native } / android - arm . jar " 
 - includes = " * jnidispatch * " 
 - prefix = " com / sun / jna / android - arm " / > 
 < / jar > 
 < / target > 
 
 @ @ - 621 , 6 + 622 , 10 @ @ osname = macos 
 < os name = " AIX " / > 
 < / or > 
 < / condition > 
 + < ! - - Native resource path within jna . jar - - > 
 + < condition property = " native . path " value = " lib / armeabi " else = " com / sun / jna / $ { os . prefix } " > 
 + < equals arg1 = " $ { os . prefix } " arg2 = " android - arm " / > 
 + < / condition > 
 
 < ! - - Default make program - - > 
 < property name = " make " value = " make " / > 
 @ @ - 640 , 13 + 645 , 13 @ @ osname = macos 
 < arg value = " JNA _ JNI _ VERSION = $ { jni . version } " / > 
 < arg value = " CHECKSUM = $ { jni . md5 } " / > 
 < / exec > 
 - < mkdir dir = " $ { classes } / com / sun / jna / $ { os . prefix } " / > 
 - < copy todir = " $ { classes } / com / sun / jna / $ { os . prefix } " > 
 + < mkdir dir = " $ { classes } / $ { native . path } " / > 
 + < copy todir = " $ { classes } / $ { native . path } " > 
 < fileset dir = " $ { build . native } " 
 includes = " jnidispatch . dll , libjnidispatch . * " / > 
 < / copy > 
 - < mkdir dir = " $ { eclipse . classes } / com / sun / jna / $ { os . prefix } " / > 
 - < copy todir = " $ { eclipse . classes } / com / sun / jna / $ { os . prefix } " 
 + < mkdir dir = " $ { eclipse . classes } / $ { native . path } " / > 
 + < copy todir = " $ { eclipse . classes } / $ { native . path } " 
 failonerror = " false " > 
 < fileset dir = " $ { build . native } " 
 includes = " jnidispatch . dll , libjnidispatch . * " / > 
 @ @ - 723 , 7 + 728 , 7 @ @ osname = macos 
 
 < ! - - When running tests from an IDE , be sure to set jna . library . path - - > 
 < ! - - to where the test library ( testlib ) is found . - - > 
 - < target name = " test " depends = " jar , compile - tests " 
 + < target name = " test " depends = " jar , compile - tests " unless = " cross - compile " 
 description = " Run all unit tests " > 
 < property name = " test . fork " value = " yes " / > 
 < property name = " reports . junit " location = " $ { reports } / junit " / > 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index 15cb55b . . b4e4f10 100755 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 689 , 6 + 689 , 10 @ @ public final class Native { 
 } 
 } 
 } 
 + if ( Platform . isAndroid ( ) ) { 
 + / / Native libraries on android must be bundled with the APK 
 + System . setProperty ( " jna . nounpack " , " true " ) ; 
 + } 
 try { 
 if ( ! Boolean . getBoolean ( " jna . nosys " ) ) { 
 System . loadLibrary ( libName ) ;
