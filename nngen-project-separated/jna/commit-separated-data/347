BLEU SCORE: 0.020980574531482755

TEST MSG: JNA wrapper for < sys / xattr . h >
GENERATED MSG: add web - start tests and test support

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / XAttr . java b / contrib / platform / src / com / sun / jna / platform / mac / XAttr . java <nl> new file mode 100644 <nl> index 0000000 . . 69c8e88 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / mac / XAttr . java <nl> @ @ - 0 , 0 + 1 , 51 @ @ <nl> + / * Copyright ( c ) 2014 Reinhard Pointner , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . mac ; <nl> + <nl> + import com . sun . jna . Library ; <nl> + import com . sun . jna . Native ; <nl> + import com . sun . jna . Pointer ; <nl> + <nl> + / * * <nl> + * JNA wrapper for < sys / xattr . h > <nl> + * <nl> + * / <nl> + interface XAttr extends Library { <nl> + <nl> + 	 / / load from current image <nl> + 	 XAttr INSTANCE = ( XAttr ) Native . loadLibrary ( null , XAttr . class ) ; <nl> + <nl> + 	 / / see / usr / include / sys / xattr . h <nl> + 	 int XATTR _ NOFOLLOW = 0x0001 ; <nl> + 	 int XATTR _ CREATE = 0x0002 ; <nl> + 	 int XATTR _ REPLACE = 0x0004 ; <nl> + 	 int XATTR _ NOSECURITY = 0x0008 ; <nl> + 	 int XATTR _ NODEFAULT = 0x0010 ; <nl> + 	 int XATTR _ SHOWCOMPRESSION = 0x0020 ; <nl> + 	 int XATTR _ MAXNAMELEN = 127 ; <nl> + 	 String XATTR _ FINDERINFO _ NAME = " com . apple . FinderInfo " ; <nl> + 	 String XATTR _ RESOURCEFORK _ NAME = " com . apple . ResourceFork " ; <nl> + <nl> + 	 / / see https : / / developer . apple . com / library / mac / documentation / Darwin / Reference / ManPages / man2 / getxattr . 2 . html <nl> + 	 long getxattr ( String path , String name , Pointer value , long size , int position , int options ) ; <nl> + <nl> + 	 / / see https : / / developer . apple . com / library / mac / documentation / Darwin / Reference / ManPages / man2 / setxattr . 2 . html <nl> + 	 int setxattr ( String path , String name , Pointer value , long size , int position , int options ) ; <nl> + <nl> + 	 / / see https : / / developer . apple . com / library / mac / documentation / Darwin / Reference / ManPages / man2 / removexattr . 2 . html <nl> + 	 int removexattr ( String path , String name , int options ) ; <nl> + <nl> + 	 / / see https : / / developer . apple . com / library / mac / documentation / Darwin / Reference / ManPages / man2 / listxattr . 2 . html <nl> + 	 long listxattr ( String path , Pointer namebuff , long size , int options ) ; <nl> + <nl> + } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / XattrUtil . java b / contrib / platform / src / com / sun / jna / platform / mac / XattrUtil . java <nl> new file mode 100644 <nl> index 0000000 . . b4170e5 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / mac / XattrUtil . java <nl> @ @ - 0 , 0 + 1 , 100 @ @ <nl> + / * Copyright ( c ) 2014 Reinhard Pointner , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . mac ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . nio . charset . Charset ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + import com . sun . jna . Memory ; <nl> + import com . sun . jna . Pointer ; <nl> + <nl> + public class XattrUtil { <nl> + <nl> + 	 public static List < String > listXAttr ( String path ) { <nl> + 	 	 / / get required buffer size <nl> + 	 	 long bufferLength = XAttr . INSTANCE . listxattr ( path , Pointer . NULL , 0 , 0 ) ; <nl> + <nl> + 	 	 if ( bufferLength < 0 ) <nl> + 	 	 	 return null ; <nl> + <nl> + 	 	 if ( bufferLength = = 0 ) <nl> + 	 	 	 return new ArrayList < String > ( 0 ) ; <nl> + <nl> + 	 	 Memory valueBuffer = new Memory ( bufferLength ) ; <nl> + 	 	 long valueLength = XAttr . INSTANCE . listxattr ( path , valueBuffer , bufferLength , 0 ) ; <nl> + <nl> + 	 	 if ( valueLength < 0 ) <nl> + 	 	 	 return null ; <nl> + <nl> + 	 	 return decodeStringSequence ( valueBuffer . getByteBuffer ( 0 , valueLength ) ) ; <nl> + 	 } <nl> + <nl> + 	 public static String getXAttr ( String path , String name ) { <nl> + 	 	 / / get required buffer size <nl> + 	 	 long bufferLength = XAttr . INSTANCE . getxattr ( path , name , Pointer . NULL , 0 , 0 , 0 ) ; <nl> + <nl> + 	 	 if ( bufferLength < 0 ) <nl> + 	 	 	 return null ; <nl> + <nl> + 	 	 Memory valueBuffer = new Memory ( bufferLength ) ; <nl> + 	 	 long valueLength = XAttr . INSTANCE . getxattr ( path , name , valueBuffer , bufferLength , 0 , 0 ) ; <nl> + <nl> + 	 	 if ( valueLength < 0 ) <nl> + 	 	 	 return null ; <nl> + <nl> + 	 	 return decodeString ( valueBuffer . getByteBuffer ( 0 , valueLength - 1 ) ) ; <nl> + 	 } <nl> + <nl> + 	 public static int setXAttr ( String path , String name , String value ) { <nl> + 	 	 Memory valueBuffer = encodeString ( value ) ; <nl> + 	 	 return XAttr . INSTANCE . setxattr ( path , name , valueBuffer , valueBuffer . size ( ) , 0 , 0 ) ; <nl> + 	 } <nl> + <nl> + 	 public static int removeXAttr ( String path , String name ) { <nl> + 	 	 return XAttr . INSTANCE . removexattr ( path , name , 0 ) ; <nl> + 	 } <nl> + <nl> + 	 protected static Memory encodeString ( String s ) { <nl> + 	 	 / / create NULL - terminated UTF - 8 String <nl> + 	 	 byte [ ] bb = s . getBytes ( Charset . forName ( " UTF - 8 " ) ) ; <nl> + 	 	 Memory valueBuffer = new Memory ( bb . length + 1 ) ; <nl> + 	 	 valueBuffer . write ( 0 , bb , 0 , bb . length ) ; <nl> + 	 	 valueBuffer . setByte ( valueBuffer . size ( ) - 1 , ( byte ) 0 ) ; <nl> + 	 	 return valueBuffer ; <nl> + 	 } <nl> + <nl> + 	 protected static String decodeString ( ByteBuffer bb ) { <nl> + 	 	 return Charset . forName ( " UTF - 8 " ) . decode ( bb ) . toString ( ) ; <nl> + 	 } <nl> + <nl> + 	 protected static List < String > decodeStringSequence ( ByteBuffer bb ) { <nl> + 	 	 List < String > names = new ArrayList < String > ( ) ; <nl> + <nl> + 	 	 bb . mark ( ) ; / / first key starts from here <nl> + 	 	 while ( bb . hasRemaining ( ) ) { <nl> + 	 	 	 if ( bb . get ( ) = = 0 ) { <nl> + 	 	 	 	 ByteBuffer nameBuffer = ( ByteBuffer ) bb . duplicate ( ) . limit ( bb . position ( ) - 1 ) . reset ( ) ; <nl> + 	 	 	 	 if ( nameBuffer . hasRemaining ( ) ) { <nl> + 	 	 	 	 	 names . add ( decodeString ( nameBuffer ) ) ; <nl> + 	 	 	 	 } <nl> + 	 	 	 	 bb . mark ( ) ; / / next key starts from here <nl> + 	 	 	 } <nl> + 	 	 } <nl> + <nl> + 	 	 return names ; <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / mac / XattrUtilTest . java b / contrib / platform / test / com / sun / jna / platform / mac / XattrUtilTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0949719 <nl> - - - / dev / null <nl> + + + b / contrib / platform / test / com / sun / jna / platform / mac / XattrUtilTest . java <nl> @ @ - 0 , 0 + 1 , 117 @ @ <nl> + / * Copyright ( c ) 2014 Reinhard Pointner , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . mac ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + import junit . framework . TestCase ; <nl> + <nl> + public class XattrUtilTest extends TestCase { <nl> + <nl> + 	 String testPath ; <nl> + <nl> + 	 protected void setUp ( ) throws Exception { <nl> + 	 	 testPath = File . createTempFile ( " xattr - test " , " . txt " ) . getAbsolutePath ( ) ; <nl> + 	 	 assertTrue ( new File ( testPath ) . exists ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 protected void tearDown ( ) throws Exception { <nl> + 	 	 new File ( testPath ) . delete ( ) ; <nl> + 	 	 assertFalse ( new File ( testPath ) . exists ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public void testListXAttr ( ) { <nl> + 	 	 / / no xattr initially <nl> + 	 	 List < String > keys = XattrUtil . listXAttr ( testPath ) ; <nl> + 	 	 assertEquals ( 0 , keys . size ( ) ) ; <nl> + <nl> + 	 	 / / set multiple xattr <nl> + 	 	 String [ ] names = new String [ ] { " Java " , " Native " , " Access " } ; <nl> + 	 	 for ( int i = 0 ; i < names . length ; i + + ) { <nl> + 	 	 	 / / set xattr <nl> + 	 	 	 XattrUtil . setXAttr ( testPath , names [ i ] , names [ i ] ) ; <nl> + <nl> + 	 	 	 / / check if new xattr is listed <nl> + 	 	 	 keys = XattrUtil . listXAttr ( testPath ) ; <nl> + 	 	 	 assertEquals ( i + 1 , keys . size ( ) ) ; <nl> + 	 	 	 assertTrue ( keys . contains ( names [ i ] ) ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public void testGetXAttr ( ) { <nl> + 	 	 String value = XattrUtil . getXAttr ( testPath , " JNA " ) ; <nl> + 	 	 assertNull ( value ) ; <nl> + <nl> + 	 	 XattrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; <nl> + 	 	 value = XattrUtil . getXAttr ( testPath , " JNA " ) ; <nl> + <nl> + 	 	 assertEquals ( Arrays . toString ( " Java Native Access " . getBytes ( ) ) , Arrays . toString ( value . getBytes ( ) ) ) ; <nl> + 	 } <nl> + <nl> + 	 public void testSetXAttr ( ) { <nl> + 	 	 String value = XattrUtil . getXAttr ( testPath , " JNA " ) ; <nl> + 	 	 assertNull ( value ) ; <nl> + <nl> + 	 	 XattrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; <nl> + 	 	 value = XattrUtil . getXAttr ( testPath , " JNA " ) ; <nl> + 	 	 assertEquals ( " Java Native Access " , value ) ; <nl> + <nl> + 	 	 XattrUtil . setXAttr ( testPath , " JNA " , " is nice " ) ; <nl> + 	 	 value = XattrUtil . getXAttr ( testPath , " JNA " ) ; <nl> + 	 	 assertEquals ( " is nice " , value ) ; <nl> + 	 } <nl> + <nl> + 	 public void testRemoveXAttr ( ) { <nl> + 	 	 XattrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; <nl> + 	 	 assertEquals ( " [ JNA ] " , XattrUtil . listXAttr ( testPath ) . toString ( ) ) ; <nl> + <nl> + 	 	 / / remove xattr <nl> + 	 	 XattrUtil . removeXAttr ( testPath , " JNA " ) ; <nl> + <nl> + 	 	 assertEquals ( " [ ] " , XattrUtil . listXAttr ( testPath ) . toString ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public void testUnicode ( ) { <nl> + 	 	 String [ ] names = new String [ ] { " 中 文 " , " に ほ ん ご " , " Ö sterreichisch " , " Fran ç aise " , " Portugu ê s " } ; <nl> + 	 	 for ( int i = 0 ; i < names . length ; i + + ) { <nl> + 	 	 	 / / set xattr <nl> + 	 	 	 XattrUtil . setXAttr ( testPath , names [ i ] , names [ i ] ) ; <nl> + <nl> + 	 	 	 / / check if new xattr is listed <nl> + 	 	 	 List < String > keys = XattrUtil . listXAttr ( testPath ) ; <nl> + 	 	 	 assertEquals ( i + 1 , keys . size ( ) ) ; <nl> + 	 	 	 assertTrue ( keys . contains ( names [ i ] ) ) ; <nl> + <nl> + 	 	 	 String value = XattrUtil . getXAttr ( testPath , names [ i ] ) ; <nl> + 	 	 	 assertEquals ( names [ i ] , value ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public void testLargeData ( ) { <nl> + 	 	 StringBuilder name = new StringBuilder ( ) ; <nl> + 	 	 while ( name . length ( ) < XAttr . XATTR _ MAXNAMELEN ) { <nl> + 	 	 	 name . append ( ' X ' ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 StringBuilder data = new StringBuilder ( ) ; <nl> + 	 	 while ( data . length ( ) < 4 * 1024 * 1024 ) { <nl> + 	 	 	 data . append ( ' X ' ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 XattrUtil . setXAttr ( testPath , name . toString ( ) , data . toString ( ) ) ; <nl> + 	 	 String value = XattrUtil . getXAttr ( testPath , name . toString ( ) ) ; <nl> + 	 	 assertEquals ( data . toString ( ) , value . toString ( ) ) ; <nl> + 	 } <nl> + }
NEAREST DIFF (one line): diff - - git a / jnalib / build . xml b / jnalib / build . xml <nl> index 877ce36 . . 55257ea 100644 <nl> - - - a / jnalib / build . xml <nl> + + + b / jnalib / build . xml <nl> @ @ - 81 , 6 + 81 , 7 @ @ <nl> < condition property = " vm . arch " value = " - d64 " else = " " > <nl> < or > <nl> < equals arg1 = " $ { sun . arch . data . model } " arg2 = " 64 " trim = " true " / > <nl> + < equals arg1 = " $ { com . ibm . vm . bitmode } " arg2 = " 64 " trim = " true " / > <nl> < os arch = " x86 _ 64 " / > <nl> < os arch = " ppc64 " / > <nl> < os arch = " sparcv9 " / > <nl> diff - - git a / jnalib / native / dispatch . c b / jnalib / native / dispatch . c <nl> index ee885f1 . . 309a090 100644 <nl> - - - a / jnalib / native / dispatch . c <nl> + + + b / jnalib / native / dispatch . c <nl> @ @ - 27 , 11 + 27 , 6 @ @ <nl> # endif <nl> # define WIN32 _ LEAN _ AND _ MEAN <nl> # include < windows . h > <nl> - # ifdef _ MSC _ VER <nl> - # define alloca _ alloca <nl> - # else <nl> - # include < malloc . h > <nl> - # endif <nl> # define LIBNAMETYPE wchar _ t * <nl> # define LIBNAME2CSTR ( ENV , JSTR ) newWideCString ( ENV , JSTR ) <nl> / * See http : / / msdn . microsoft . com / en - us / library / ms682586 ( VS . 85 ) . aspx : <nl> @ @ - 272 , 7 + 267 , 7 @ @ dispatch ( JNIEnv * env , jobject self , jint flags , jobjectArray arr , <nl> jobject array ; <nl> void * elems ; <nl> } * array _ elements ; <nl> - int array _ count = 0 ; <nl> + volatile int array _ count = 0 ; <nl> ffi _ cif cif ; <nl> ffi _ type * * ffi _ types ; <nl> void * * ffi _ values ; <nl> @ @ - 984 , 8 + 979 , 8 @ @ JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Pointer _ _ 1indexOf _ _ JB <nl> ( JNIEnv * env , jclass cls , jlong addr , jbyte value ) <nl> { <nl> jbyte * peer = ( jbyte * ) L2A ( addr ) ; <nl> - jlong i = 0 ; <nl> - jlong result = - 1L ; <nl> + volatile jlong i = 0 ; <nl> + volatile jlong result = - 1L ; <nl> PSTART ( ) ; <nl> while ( i > = 0 & & result = = - 1L ) { <nl> if ( peer [ i ] = = value ) <nl> @ @ - 1488 , 7 + 1483 , 7 @ @ newJavaWString ( JNIEnv * env , const wchar _ t * ptr ) { <nl> jstring <nl> newJavaString ( JNIEnv * env , const char * ptr , jboolean wide ) <nl> { <nl> - jstring result = 0 ; <nl> + volatile jstring result = 0 ; <nl> PSTART ( ) ; <nl> <nl> if ( ptr ) { <nl> diff - - git a / jnalib / native / dispatch . h b / jnalib / native / dispatch . h <nl> index e9b3fdc . . 19bfd64 100644 <nl> - - - a / jnalib / native / dispatch . h <nl> + + + b / jnalib / native / dispatch . h <nl> @ @ - 19 , 6 + 19 , 13 @ @ <nl> # ifdef sun <nl> # include < alloca . h > <nl> # endif <nl> + # ifdef _ WIN32 <nl> + # ifdef _ MSC _ VER <nl> + # define alloca _ alloca <nl> + # else <nl> + # include < malloc . h > <nl> + # endif / * _ MSC _ VER * / <nl> + # endif / * _ WIN32 * / <nl> <nl> # ifdef _ _ cplusplus <nl> extern " C " { <nl> diff - - git a / jnalib / native / protect . h b / jnalib / native / protect . h <nl> index 7dbd441 . . 3a5d38b 100644 <nl> - - - a / jnalib / native / protect . h <nl> + + + b / jnalib / native / protect . h <nl> @ @ - 77 , 11 + 77 , 7 @ @ _ exc _ handler ( struct _ EXCEPTION _ RECORD * exception _ record , <nl> # define PROTECTED _ END ( ONERR ) } _ _ except ( ( PROTECT ) ? EXCEPTION _ EXECUTE _ HANDLER : EXCEPTION _ CONTINUE _ SEARCH ) { ONERR ; } <nl> # else <nl> # ifdef _ WIN64 <nl> - / / FIXME : mingw64 is untested <nl> - # define SEH _ TRY ( ER ) \ <nl> - _ _ asm _ _ ( " pushq % 0 ; pushq % % gs : 0 ; movq % % rsp , % % gs : 0 ; " : : " g " ( & ( ER ) ) ) <nl> - # define SEH _ CATCH ( ER ) \ <nl> - _ _ asm _ _ ( " movq ( % % rsp ) , % % rax ; movq % % rax , % % gs : 0 ; addq $ 16 , % % rsp " : : : " % rax " ) <nl> + # error " GCC does not implement SEh " <nl> # else <nl> # define SEH _ TRY ( ER ) \ <nl> _ _ asm _ _ ( " movl % % fs : 0 , % 0 " : " = r " ( ( ER ) . ex _ reg . prev ) ) ; \ <nl> @ @ - 115 , 6 + 111 , 7 @ @ _ exc _ handler ( struct _ EXCEPTION _ RECORD * exception _ record , <nl> # endif / * ! _ MSC _ VER * / <nl> <nl> # else / / _ WIN32 <nl> + <nl> / / Most other platforms support signals <nl> / / Catch both SIGSEGV and SIGBUS <nl> # include < signal . h > <nl> diff - - git a / jnalib / test / com / sun / jna / RawTest . java b / jnalib / test / com / sun / jna / RawTest . java <nl> index 6991931 . . dbcef9f 100644 <nl> - - - a / jnalib / test / com / sun / jna / RawTest . java <nl> + + + b / jnalib / test / com / sun / jna / RawTest . java <nl> @ @ - 82 , 13 + 82 , 19 @ @ public class RawTest extends TestCase { <nl> public static native int strlen ( Pointer p ) ; <nl> public static native int strlen ( byte [ ] b ) ; <nl> public static native int strlen ( Buffer b ) ; <nl> - public static native float strtof ( String s , PointerByReference pref ) throws LastErrorException ; <nl> <nl> static { <nl> Native . register ( Platform . isWindows ( ) ? " msvcrt " : " c " ) ; <nl> } <nl> } <nl> <nl> + static class LastErrorLibrary { <nl> + public static native float strtof ( String s , PointerByReference pref ) throws LastErrorException ; <nl> + static { <nl> + Native . register ( Platform . isWindows ( ) ? " msvcrt " : " c " ) ; <nl> + } <nl> + } <nl> + <nl> static interface CInterface extends Library { <nl> Pointer memset ( Pointer p , int v , int len ) ; <nl> int strlen ( String s ) ; <nl> @ @ - 172 , 16 + 178 , 21 @ @ public class RawTest extends TestCase { <nl> } <nl> <nl> public void testThrowLastError ( ) throws LastErrorException { <nl> - CLibrary lib = new CLibrary ( ) ; <nl> - float VALUE = 1 . 1f ; <nl> - assertEquals ( " Wrong value returned " , VALUE , lib . strtof ( " 1 . 1 " , null ) ) ; <nl> - try { <nl> - String HUGE _ VALF = " 1e10000 " ; <nl> - lib . strtof ( HUGE _ VALF , null ) ; <nl> - fail ( " Method declared with LastErrorException should throw on error " ) ; <nl> - } <nl> - catch ( LastErrorException e ) { <nl> - assertTrue ( " LastError code should be non - zero " , e . errorCode ! = 0 ) ; <nl> + if ( Platform . isWindows ( ) ) { <nl> + fail ( " Test not implemented " ) ; <nl> + } <nl> + else { <nl> + LastErrorLibrary lib = new LastErrorLibrary ( ) ; <nl> + float VALUE = 1 . 1f ; <nl> + assertEquals ( " Wrong value returned " , VALUE , lib . strtof ( " 1 . 1 " , null ) ) ; <nl> + try { <nl> + String HUGE _ VALF = " 1e10000 " ; <nl> + lib . strtof ( HUGE _ VALF , null ) ; <nl> + fail ( " Method declared with LastErrorException should throw on error " ) ; <nl> + } <nl> + catch ( LastErrorException e ) { <nl> + assertTrue ( " LastError code should be non - zero " , e . errorCode ! = 0 ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / jnalib / test / com / sun / jna / WebStartTest . java b / jnalib / test / com / sun / jna / WebStartTest . java <nl> index 29a54ea . . f575b75 100644 <nl> - - - a / jnalib / test / com / sun / jna / WebStartTest . java <nl> + + + b / jnalib / test / com / sun / jna / WebStartTest . java <nl> @ @ - 62 , 9 + 62 , 9 @ @ public class WebStartTest extends TestCase { <nl> / / but will cause unsigned jars to fail ( irrespective of policy ) <nl> + " < security > < all - permissions / > < / security > \ n " <nl> + " < resources > \ n " <nl> - + " < j2se version = ' 1 . 3 + ' href = ' http : / / java . sun . com / products / autodl / j2se ' / > \ n " <nl> - + " < jar href = ' jna . jar ' / > \ n " <nl> + + " < j2se version = ' 1 . 4 + ' / > \ n " <nl> + " < jar href = ' jna - test . jar ' / > \ n " <nl> + + " < jar href = ' jna . jar ' / > \ n " <nl> + " < jar href = ' junit . jar ' / > \ n " <nl> + " < nativelib href = ' jnidispatch . jar ' / > \ n " <nl> + " < / resources > \ n " <nl> @ @ - 221 , 11 + 221 , 14 @ @ public class WebStartTest extends TestCase { <nl> <nl> private File findDeploymentProperties ( ) { <nl> String path = System . getProperty ( " user . home " ) ; <nl> - File deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; <nl> - if ( ! deployment . exists ( ) ) { <nl> + File deployment ; <nl> + if ( Platform . isWindows ( ) ) { <nl> + deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; <nl> + } <nl> + else if ( Platform . isMac ( ) ) { <nl> deployment = new File ( path + " / Library / Caches / Java " ) ; <nl> } <nl> - if ( ! deployment . exists ( ) ) { <nl> + else { <nl> deployment = new File ( path + " / . java / deployment " ) ; <nl> } <nl> if ( ! deployment . exists ( ) ) { <nl> @ @ - 239 , 6 + 242 , 9 @ @ public class WebStartTest extends TestCase { <nl> private static final String CERTS _ KEY = <nl> " deployment . user . security . trusted . certs " ; <nl> public void runBare ( ) throws Throwable { <nl> + / / FIXME not yet cleanly running on windows , not tested on linux <nl> + if ( ! Platform . isMac ( ) ) return ; <nl> + <nl> if ( runningWebStart ( ) ) { <nl> super . runBare ( ) ; <nl> } <nl> @ @ - 254 , 7 + 260 , 7 @ @ public class WebStartTest extends TestCase { <nl> saved . load ( new FileInputStream ( dpfile ) ) ; <nl> Properties props = new Properties ( ) ; <nl> props . putAll ( saved ) ; <nl> - props . setProperty ( CERTS _ KEY , " jna . keystore " ) ; <nl> + props . setProperty ( CERTS _ KEY , new File ( " jna . keystore " ) . getAbsolutePath ( ) ) ; <nl> props . setProperty ( POLICY _ KEY , policy . getAbsolutePath ( ) ) ; <nl> props . store ( new FileOutputStream ( dpfile ) , " deployment . properties ( for testing ) " ) ; <nl> try {

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / XAttr . java b / contrib / platform / src / com / sun / jna / platform / mac / XAttr . java 
 new file mode 100644 
 index 0000000 . . 69c8e88 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / mac / XAttr . java 
 @ @ - 0 , 0 + 1 , 51 @ @ 
 + / * Copyright ( c ) 2014 Reinhard Pointner , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . mac ; 
 + 
 + import com . sun . jna . Library ; 
 + import com . sun . jna . Native ; 
 + import com . sun . jna . Pointer ; 
 + 
 + / * * 
 + * JNA wrapper for < sys / xattr . h > 
 + * 
 + * / 
 + interface XAttr extends Library { 
 + 
 + 	 / / load from current image 
 + 	 XAttr INSTANCE = ( XAttr ) Native . loadLibrary ( null , XAttr . class ) ; 
 + 
 + 	 / / see / usr / include / sys / xattr . h 
 + 	 int XATTR _ NOFOLLOW = 0x0001 ; 
 + 	 int XATTR _ CREATE = 0x0002 ; 
 + 	 int XATTR _ REPLACE = 0x0004 ; 
 + 	 int XATTR _ NOSECURITY = 0x0008 ; 
 + 	 int XATTR _ NODEFAULT = 0x0010 ; 
 + 	 int XATTR _ SHOWCOMPRESSION = 0x0020 ; 
 + 	 int XATTR _ MAXNAMELEN = 127 ; 
 + 	 String XATTR _ FINDERINFO _ NAME = " com . apple . FinderInfo " ; 
 + 	 String XATTR _ RESOURCEFORK _ NAME = " com . apple . ResourceFork " ; 
 + 
 + 	 / / see https : / / developer . apple . com / library / mac / documentation / Darwin / Reference / ManPages / man2 / getxattr . 2 . html 
 + 	 long getxattr ( String path , String name , Pointer value , long size , int position , int options ) ; 
 + 
 + 	 / / see https : / / developer . apple . com / library / mac / documentation / Darwin / Reference / ManPages / man2 / setxattr . 2 . html 
 + 	 int setxattr ( String path , String name , Pointer value , long size , int position , int options ) ; 
 + 
 + 	 / / see https : / / developer . apple . com / library / mac / documentation / Darwin / Reference / ManPages / man2 / removexattr . 2 . html 
 + 	 int removexattr ( String path , String name , int options ) ; 
 + 
 + 	 / / see https : / / developer . apple . com / library / mac / documentation / Darwin / Reference / ManPages / man2 / listxattr . 2 . html 
 + 	 long listxattr ( String path , Pointer namebuff , long size , int options ) ; 
 + 
 + } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / XattrUtil . java b / contrib / platform / src / com / sun / jna / platform / mac / XattrUtil . java 
 new file mode 100644 
 index 0000000 . . b4170e5 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / mac / XattrUtil . java 
 @ @ - 0 , 0 + 1 , 100 @ @ 
 + / * Copyright ( c ) 2014 Reinhard Pointner , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . mac ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . nio . charset . Charset ; 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + import com . sun . jna . Memory ; 
 + import com . sun . jna . Pointer ; 
 + 
 + public class XattrUtil { 
 + 
 + 	 public static List < String > listXAttr ( String path ) { 
 + 	 	 / / get required buffer size 
 + 	 	 long bufferLength = XAttr . INSTANCE . listxattr ( path , Pointer . NULL , 0 , 0 ) ; 
 + 
 + 	 	 if ( bufferLength < 0 ) 
 + 	 	 	 return null ; 
 + 
 + 	 	 if ( bufferLength = = 0 ) 
 + 	 	 	 return new ArrayList < String > ( 0 ) ; 
 + 
 + 	 	 Memory valueBuffer = new Memory ( bufferLength ) ; 
 + 	 	 long valueLength = XAttr . INSTANCE . listxattr ( path , valueBuffer , bufferLength , 0 ) ; 
 + 
 + 	 	 if ( valueLength < 0 ) 
 + 	 	 	 return null ; 
 + 
 + 	 	 return decodeStringSequence ( valueBuffer . getByteBuffer ( 0 , valueLength ) ) ; 
 + 	 } 
 + 
 + 	 public static String getXAttr ( String path , String name ) { 
 + 	 	 / / get required buffer size 
 + 	 	 long bufferLength = XAttr . INSTANCE . getxattr ( path , name , Pointer . NULL , 0 , 0 , 0 ) ; 
 + 
 + 	 	 if ( bufferLength < 0 ) 
 + 	 	 	 return null ; 
 + 
 + 	 	 Memory valueBuffer = new Memory ( bufferLength ) ; 
 + 	 	 long valueLength = XAttr . INSTANCE . getxattr ( path , name , valueBuffer , bufferLength , 0 , 0 ) ; 
 + 
 + 	 	 if ( valueLength < 0 ) 
 + 	 	 	 return null ; 
 + 
 + 	 	 return decodeString ( valueBuffer . getByteBuffer ( 0 , valueLength - 1 ) ) ; 
 + 	 } 
 + 
 + 	 public static int setXAttr ( String path , String name , String value ) { 
 + 	 	 Memory valueBuffer = encodeString ( value ) ; 
 + 	 	 return XAttr . INSTANCE . setxattr ( path , name , valueBuffer , valueBuffer . size ( ) , 0 , 0 ) ; 
 + 	 } 
 + 
 + 	 public static int removeXAttr ( String path , String name ) { 
 + 	 	 return XAttr . INSTANCE . removexattr ( path , name , 0 ) ; 
 + 	 } 
 + 
 + 	 protected static Memory encodeString ( String s ) { 
 + 	 	 / / create NULL - terminated UTF - 8 String 
 + 	 	 byte [ ] bb = s . getBytes ( Charset . forName ( " UTF - 8 " ) ) ; 
 + 	 	 Memory valueBuffer = new Memory ( bb . length + 1 ) ; 
 + 	 	 valueBuffer . write ( 0 , bb , 0 , bb . length ) ; 
 + 	 	 valueBuffer . setByte ( valueBuffer . size ( ) - 1 , ( byte ) 0 ) ; 
 + 	 	 return valueBuffer ; 
 + 	 } 
 + 
 + 	 protected static String decodeString ( ByteBuffer bb ) { 
 + 	 	 return Charset . forName ( " UTF - 8 " ) . decode ( bb ) . toString ( ) ; 
 + 	 } 
 + 
 + 	 protected static List < String > decodeStringSequence ( ByteBuffer bb ) { 
 + 	 	 List < String > names = new ArrayList < String > ( ) ; 
 + 
 + 	 	 bb . mark ( ) ; / / first key starts from here 
 + 	 	 while ( bb . hasRemaining ( ) ) { 
 + 	 	 	 if ( bb . get ( ) = = 0 ) { 
 + 	 	 	 	 ByteBuffer nameBuffer = ( ByteBuffer ) bb . duplicate ( ) . limit ( bb . position ( ) - 1 ) . reset ( ) ; 
 + 	 	 	 	 if ( nameBuffer . hasRemaining ( ) ) { 
 + 	 	 	 	 	 names . add ( decodeString ( nameBuffer ) ) ; 
 + 	 	 	 	 } 
 + 	 	 	 	 bb . mark ( ) ; / / next key starts from here 
 + 	 	 	 } 
 + 	 	 } 
 + 
 + 	 	 return names ; 
 + 	 } 
 + 
 + } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / mac / XattrUtilTest . java b / contrib / platform / test / com / sun / jna / platform / mac / XattrUtilTest . java 
 new file mode 100644 
 index 0000000 . . 0949719 
 - - - / dev / null 
 + + + b / contrib / platform / test / com / sun / jna / platform / mac / XattrUtilTest . java 
 @ @ - 0 , 0 + 1 , 117 @ @ 
 + / * Copyright ( c ) 2014 Reinhard Pointner , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . mac ; 
 + 
 + import java . io . File ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + import junit . framework . TestCase ; 
 + 
 + public class XattrUtilTest extends TestCase { 
 + 
 + 	 String testPath ; 
 + 
 + 	 protected void setUp ( ) throws Exception { 
 + 	 	 testPath = File . createTempFile ( " xattr - test " , " . txt " ) . getAbsolutePath ( ) ; 
 + 	 	 assertTrue ( new File ( testPath ) . exists ( ) ) ; 
 + 	 } 
 + 
 + 	 protected void tearDown ( ) throws Exception { 
 + 	 	 new File ( testPath ) . delete ( ) ; 
 + 	 	 assertFalse ( new File ( testPath ) . exists ( ) ) ; 
 + 	 } 
 + 
 + 	 public void testListXAttr ( ) { 
 + 	 	 / / no xattr initially 
 + 	 	 List < String > keys = XattrUtil . listXAttr ( testPath ) ; 
 + 	 	 assertEquals ( 0 , keys . size ( ) ) ; 
 + 
 + 	 	 / / set multiple xattr 
 + 	 	 String [ ] names = new String [ ] { " Java " , " Native " , " Access " } ; 
 + 	 	 for ( int i = 0 ; i < names . length ; i + + ) { 
 + 	 	 	 / / set xattr 
 + 	 	 	 XattrUtil . setXAttr ( testPath , names [ i ] , names [ i ] ) ; 
 + 
 + 	 	 	 / / check if new xattr is listed 
 + 	 	 	 keys = XattrUtil . listXAttr ( testPath ) ; 
 + 	 	 	 assertEquals ( i + 1 , keys . size ( ) ) ; 
 + 	 	 	 assertTrue ( keys . contains ( names [ i ] ) ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public void testGetXAttr ( ) { 
 + 	 	 String value = XattrUtil . getXAttr ( testPath , " JNA " ) ; 
 + 	 	 assertNull ( value ) ; 
 + 
 + 	 	 XattrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; 
 + 	 	 value = XattrUtil . getXAttr ( testPath , " JNA " ) ; 
 + 
 + 	 	 assertEquals ( Arrays . toString ( " Java Native Access " . getBytes ( ) ) , Arrays . toString ( value . getBytes ( ) ) ) ; 
 + 	 } 
 + 
 + 	 public void testSetXAttr ( ) { 
 + 	 	 String value = XattrUtil . getXAttr ( testPath , " JNA " ) ; 
 + 	 	 assertNull ( value ) ; 
 + 
 + 	 	 XattrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; 
 + 	 	 value = XattrUtil . getXAttr ( testPath , " JNA " ) ; 
 + 	 	 assertEquals ( " Java Native Access " , value ) ; 
 + 
 + 	 	 XattrUtil . setXAttr ( testPath , " JNA " , " is nice " ) ; 
 + 	 	 value = XattrUtil . getXAttr ( testPath , " JNA " ) ; 
 + 	 	 assertEquals ( " is nice " , value ) ; 
 + 	 } 
 + 
 + 	 public void testRemoveXAttr ( ) { 
 + 	 	 XattrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; 
 + 	 	 assertEquals ( " [ JNA ] " , XattrUtil . listXAttr ( testPath ) . toString ( ) ) ; 
 + 
 + 	 	 / / remove xattr 
 + 	 	 XattrUtil . removeXAttr ( testPath , " JNA " ) ; 
 + 
 + 	 	 assertEquals ( " [ ] " , XattrUtil . listXAttr ( testPath ) . toString ( ) ) ; 
 + 	 } 
 + 
 + 	 public void testUnicode ( ) { 
 + 	 	 String [ ] names = new String [ ] { " 中 文 " , " に ほ ん ご " , " Ö sterreichisch " , " Fran ç aise " , " Portugu ê s " } ; 
 + 	 	 for ( int i = 0 ; i < names . length ; i + + ) { 
 + 	 	 	 / / set xattr 
 + 	 	 	 XattrUtil . setXAttr ( testPath , names [ i ] , names [ i ] ) ; 
 + 
 + 	 	 	 / / check if new xattr is listed 
 + 	 	 	 List < String > keys = XattrUtil . listXAttr ( testPath ) ; 
 + 	 	 	 assertEquals ( i + 1 , keys . size ( ) ) ; 
 + 	 	 	 assertTrue ( keys . contains ( names [ i ] ) ) ; 
 + 
 + 	 	 	 String value = XattrUtil . getXAttr ( testPath , names [ i ] ) ; 
 + 	 	 	 assertEquals ( names [ i ] , value ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public void testLargeData ( ) { 
 + 	 	 StringBuilder name = new StringBuilder ( ) ; 
 + 	 	 while ( name . length ( ) < XAttr . XATTR _ MAXNAMELEN ) { 
 + 	 	 	 name . append ( ' X ' ) ; 
 + 	 	 } 
 + 
 + 	 	 StringBuilder data = new StringBuilder ( ) ; 
 + 	 	 while ( data . length ( ) < 4 * 1024 * 1024 ) { 
 + 	 	 	 data . append ( ' X ' ) ; 
 + 	 	 } 
 + 
 + 	 	 XattrUtil . setXAttr ( testPath , name . toString ( ) , data . toString ( ) ) ; 
 + 	 	 String value = XattrUtil . getXAttr ( testPath , name . toString ( ) ) ; 
 + 	 	 assertEquals ( data . toString ( ) , value . toString ( ) ) ; 
 + 	 } 
 + }

NEAREST DIFF:
diff - - git a / jnalib / build . xml b / jnalib / build . xml 
 index 877ce36 . . 55257ea 100644 
 - - - a / jnalib / build . xml 
 + + + b / jnalib / build . xml 
 @ @ - 81 , 6 + 81 , 7 @ @ 
 < condition property = " vm . arch " value = " - d64 " else = " " > 
 < or > 
 < equals arg1 = " $ { sun . arch . data . model } " arg2 = " 64 " trim = " true " / > 
 + < equals arg1 = " $ { com . ibm . vm . bitmode } " arg2 = " 64 " trim = " true " / > 
 < os arch = " x86 _ 64 " / > 
 < os arch = " ppc64 " / > 
 < os arch = " sparcv9 " / > 
 diff - - git a / jnalib / native / dispatch . c b / jnalib / native / dispatch . c 
 index ee885f1 . . 309a090 100644 
 - - - a / jnalib / native / dispatch . c 
 + + + b / jnalib / native / dispatch . c 
 @ @ - 27 , 11 + 27 , 6 @ @ 
 # endif 
 # define WIN32 _ LEAN _ AND _ MEAN 
 # include < windows . h > 
 - # ifdef _ MSC _ VER 
 - # define alloca _ alloca 
 - # else 
 - # include < malloc . h > 
 - # endif 
 # define LIBNAMETYPE wchar _ t * 
 # define LIBNAME2CSTR ( ENV , JSTR ) newWideCString ( ENV , JSTR ) 
 / * See http : / / msdn . microsoft . com / en - us / library / ms682586 ( VS . 85 ) . aspx : 
 @ @ - 272 , 7 + 267 , 7 @ @ dispatch ( JNIEnv * env , jobject self , jint flags , jobjectArray arr , 
 jobject array ; 
 void * elems ; 
 } * array _ elements ; 
 - int array _ count = 0 ; 
 + volatile int array _ count = 0 ; 
 ffi _ cif cif ; 
 ffi _ type * * ffi _ types ; 
 void * * ffi _ values ; 
 @ @ - 984 , 8 + 979 , 8 @ @ JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Pointer _ _ 1indexOf _ _ JB 
 ( JNIEnv * env , jclass cls , jlong addr , jbyte value ) 
 { 
 jbyte * peer = ( jbyte * ) L2A ( addr ) ; 
 - jlong i = 0 ; 
 - jlong result = - 1L ; 
 + volatile jlong i = 0 ; 
 + volatile jlong result = - 1L ; 
 PSTART ( ) ; 
 while ( i > = 0 & & result = = - 1L ) { 
 if ( peer [ i ] = = value ) 
 @ @ - 1488 , 7 + 1483 , 7 @ @ newJavaWString ( JNIEnv * env , const wchar _ t * ptr ) { 
 jstring 
 newJavaString ( JNIEnv * env , const char * ptr , jboolean wide ) 
 { 
 - jstring result = 0 ; 
 + volatile jstring result = 0 ; 
 PSTART ( ) ; 
 
 if ( ptr ) { 
 diff - - git a / jnalib / native / dispatch . h b / jnalib / native / dispatch . h 
 index e9b3fdc . . 19bfd64 100644 
 - - - a / jnalib / native / dispatch . h 
 + + + b / jnalib / native / dispatch . h 
 @ @ - 19 , 6 + 19 , 13 @ @ 
 # ifdef sun 
 # include < alloca . h > 
 # endif 
 + # ifdef _ WIN32 
 + # ifdef _ MSC _ VER 
 + # define alloca _ alloca 
 + # else 
 + # include < malloc . h > 
 + # endif / * _ MSC _ VER * / 
 + # endif / * _ WIN32 * / 
 
 # ifdef _ _ cplusplus 
 extern " C " { 
 diff - - git a / jnalib / native / protect . h b / jnalib / native / protect . h 
 index 7dbd441 . . 3a5d38b 100644 
 - - - a / jnalib / native / protect . h 
 + + + b / jnalib / native / protect . h 
 @ @ - 77 , 11 + 77 , 7 @ @ _ exc _ handler ( struct _ EXCEPTION _ RECORD * exception _ record , 
 # define PROTECTED _ END ( ONERR ) } _ _ except ( ( PROTECT ) ? EXCEPTION _ EXECUTE _ HANDLER : EXCEPTION _ CONTINUE _ SEARCH ) { ONERR ; } 
 # else 
 # ifdef _ WIN64 
 - / / FIXME : mingw64 is untested 
 - # define SEH _ TRY ( ER ) \ 
 - _ _ asm _ _ ( " pushq % 0 ; pushq % % gs : 0 ; movq % % rsp , % % gs : 0 ; " : : " g " ( & ( ER ) ) ) 
 - # define SEH _ CATCH ( ER ) \ 
 - _ _ asm _ _ ( " movq ( % % rsp ) , % % rax ; movq % % rax , % % gs : 0 ; addq $ 16 , % % rsp " : : : " % rax " ) 
 + # error " GCC does not implement SEh " 
 # else 
 # define SEH _ TRY ( ER ) \ 
 _ _ asm _ _ ( " movl % % fs : 0 , % 0 " : " = r " ( ( ER ) . ex _ reg . prev ) ) ; \ 
 @ @ - 115 , 6 + 111 , 7 @ @ _ exc _ handler ( struct _ EXCEPTION _ RECORD * exception _ record , 
 # endif / * ! _ MSC _ VER * / 
 
 # else / / _ WIN32 
 + 
 / / Most other platforms support signals 
 / / Catch both SIGSEGV and SIGBUS 
 # include < signal . h > 
 diff - - git a / jnalib / test / com / sun / jna / RawTest . java b / jnalib / test / com / sun / jna / RawTest . java 
 index 6991931 . . dbcef9f 100644 
 - - - a / jnalib / test / com / sun / jna / RawTest . java 
 + + + b / jnalib / test / com / sun / jna / RawTest . java 
 @ @ - 82 , 13 + 82 , 19 @ @ public class RawTest extends TestCase { 
 public static native int strlen ( Pointer p ) ; 
 public static native int strlen ( byte [ ] b ) ; 
 public static native int strlen ( Buffer b ) ; 
 - public static native float strtof ( String s , PointerByReference pref ) throws LastErrorException ; 
 
 static { 
 Native . register ( Platform . isWindows ( ) ? " msvcrt " : " c " ) ; 
 } 
 } 
 
 + static class LastErrorLibrary { 
 + public static native float strtof ( String s , PointerByReference pref ) throws LastErrorException ; 
 + static { 
 + Native . register ( Platform . isWindows ( ) ? " msvcrt " : " c " ) ; 
 + } 
 + } 
 + 
 static interface CInterface extends Library { 
 Pointer memset ( Pointer p , int v , int len ) ; 
 int strlen ( String s ) ; 
 @ @ - 172 , 16 + 178 , 21 @ @ public class RawTest extends TestCase { 
 } 
 
 public void testThrowLastError ( ) throws LastErrorException { 
 - CLibrary lib = new CLibrary ( ) ; 
 - float VALUE = 1 . 1f ; 
 - assertEquals ( " Wrong value returned " , VALUE , lib . strtof ( " 1 . 1 " , null ) ) ; 
 - try { 
 - String HUGE _ VALF = " 1e10000 " ; 
 - lib . strtof ( HUGE _ VALF , null ) ; 
 - fail ( " Method declared with LastErrorException should throw on error " ) ; 
 - } 
 - catch ( LastErrorException e ) { 
 - assertTrue ( " LastError code should be non - zero " , e . errorCode ! = 0 ) ; 
 + if ( Platform . isWindows ( ) ) { 
 + fail ( " Test not implemented " ) ; 
 + } 
 + else { 
 + LastErrorLibrary lib = new LastErrorLibrary ( ) ; 
 + float VALUE = 1 . 1f ; 
 + assertEquals ( " Wrong value returned " , VALUE , lib . strtof ( " 1 . 1 " , null ) ) ; 
 + try { 
 + String HUGE _ VALF = " 1e10000 " ; 
 + lib . strtof ( HUGE _ VALF , null ) ; 
 + fail ( " Method declared with LastErrorException should throw on error " ) ; 
 + } 
 + catch ( LastErrorException e ) { 
 + assertTrue ( " LastError code should be non - zero " , e . errorCode ! = 0 ) ; 
 + } 
 } 
 } 
 
 diff - - git a / jnalib / test / com / sun / jna / WebStartTest . java b / jnalib / test / com / sun / jna / WebStartTest . java 
 index 29a54ea . . f575b75 100644 
 - - - a / jnalib / test / com / sun / jna / WebStartTest . java 
 + + + b / jnalib / test / com / sun / jna / WebStartTest . java 
 @ @ - 62 , 9 + 62 , 9 @ @ public class WebStartTest extends TestCase { 
 / / but will cause unsigned jars to fail ( irrespective of policy ) 
 + " < security > < all - permissions / > < / security > \ n " 
 + " < resources > \ n " 
 - + " < j2se version = ' 1 . 3 + ' href = ' http : / / java . sun . com / products / autodl / j2se ' / > \ n " 
 - + " < jar href = ' jna . jar ' / > \ n " 
 + + " < j2se version = ' 1 . 4 + ' / > \ n " 
 + " < jar href = ' jna - test . jar ' / > \ n " 
 + + " < jar href = ' jna . jar ' / > \ n " 
 + " < jar href = ' junit . jar ' / > \ n " 
 + " < nativelib href = ' jnidispatch . jar ' / > \ n " 
 + " < / resources > \ n " 
 @ @ - 221 , 11 + 221 , 14 @ @ public class WebStartTest extends TestCase { 
 
 private File findDeploymentProperties ( ) { 
 String path = System . getProperty ( " user . home " ) ; 
 - File deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; 
 - if ( ! deployment . exists ( ) ) { 
 + File deployment ; 
 + if ( Platform . isWindows ( ) ) { 
 + deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; 
 + } 
 + else if ( Platform . isMac ( ) ) { 
 deployment = new File ( path + " / Library / Caches / Java " ) ; 
 } 
 - if ( ! deployment . exists ( ) ) { 
 + else { 
 deployment = new File ( path + " / . java / deployment " ) ; 
 } 
 if ( ! deployment . exists ( ) ) { 
 @ @ - 239 , 6 + 242 , 9 @ @ public class WebStartTest extends TestCase { 
 private static final String CERTS _ KEY = 
 " deployment . user . security . trusted . certs " ; 
 public void runBare ( ) throws Throwable { 
 + / / FIXME not yet cleanly running on windows , not tested on linux 
 + if ( ! Platform . isMac ( ) ) return ; 
 + 
 if ( runningWebStart ( ) ) { 
 super . runBare ( ) ; 
 } 
 @ @ - 254 , 7 + 260 , 7 @ @ public class WebStartTest extends TestCase { 
 saved . load ( new FileInputStream ( dpfile ) ) ; 
 Properties props = new Properties ( ) ; 
 props . putAll ( saved ) ; 
 - props . setProperty ( CERTS _ KEY , " jna . keystore " ) ; 
 + props . setProperty ( CERTS _ KEY , new File ( " jna . keystore " ) . getAbsolutePath ( ) ) ; 
 props . setProperty ( POLICY _ KEY , policy . getAbsolutePath ( ) ) ; 
 props . store ( new FileOutputStream ( dpfile ) , " deployment . properties ( for testing ) " ) ; 
 try {
