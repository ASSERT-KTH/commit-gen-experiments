BLEU SCORE: 0.017386863385674488

TEST MSG: Update W32Service # stopService to be more resilent to delayed status updates
GENERATED MSG: Bug : fix issues with starting / stopping services , caused by the service resetting progress checkpoint to 0 .

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> index 43b8a5f . . 9462087 100755 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> @ @ - 1624 , 6 + 1624 , 25 @ @ public interface Advapi32 extends StdCallLibrary { <nl> IntByReference pcbBytesNeeded ) ; <nl> <nl> / * * <nl> + * Retrieves the current status of the specified service based on the <nl> + * specified information level . <nl> + * <nl> + * @ param hService <nl> + * A handle to the service . This handle is returned by the <nl> + * OpenService ( SC _ HANDLE , String , int ) or CreateService ( ) <nl> + * function , and it must have the SERVICE _ QUERY _ STATUS access <nl> + * right . For more information , see < a <nl> + * href = " http : / / msdn . microsoft . com / en - us / library / ms685981 . aspx " <nl> + * > Service Security and Access Rights < / a > . <nl> + * @ param lpServiceStatus <nl> + * A pointer to a SERVICE _ STATUS structure that receives the status information . <nl> + * @ return If the function succeeds , the return value is true . If the <nl> + * function fails , the return value is false . To get extended error <nl> + * information , call GetLastError . <nl> + * / <nl> + boolean QueryServiceStatus ( SC _ HANDLE hService , SERVICE _ STATUS lpServiceStatus ) ; <nl> + <nl> + / * * <nl> * Sends a control code to a service . To specify additional information when <nl> * stopping a service , use the ControlServiceEx function . <nl> * <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java b / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> index 919f9bf . . 1887505 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> @ @ - 38 , 8 + 38 , 10 @ @ import com . sun . jna . platform . win32 . Winsvc . ENUM _ SERVICE _ STATUS ; <nl> import com . sun . jna . platform . win32 . Winsvc . SC _ ACTION ; <nl> import com . sun . jna . platform . win32 . Winsvc . SC _ HANDLE ; <nl> import com . sun . jna . platform . win32 . Winsvc . SC _ STATUS _ TYPE ; <nl> + import static com . sun . jna . platform . win32 . Winsvc . SERVICE _ CONTROL _ STOP ; <nl> import com . sun . jna . platform . win32 . Winsvc . SERVICE _ FAILURE _ ACTIONS ; <nl> import com . sun . jna . platform . win32 . Winsvc . SERVICE _ FAILURE _ ACTIONS _ FLAG ; <nl> + import com . sun . jna . platform . win32 . Winsvc . SERVICE _ STATUS ; <nl> import com . sun . jna . platform . win32 . Winsvc . SERVICE _ STATUS _ PROCESS ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> <nl> @ @ - 204 , 19 + 206 , 46 @ @ public class W32Service { <nl> 	 	 } <nl> 	 } <nl> 	 <nl> + / * * <nl> + * Stop service . <nl> + * / <nl> + public void stopService ( ) { <nl> + stopService ( 30000 ) ; <nl> + } <nl> + <nl> 	 / * * <nl> 	 * Stop service . <nl> - 	 * / <nl> - 	 public void stopService ( ) { <nl> + * <nl> + * @ param timeout timeout in ms until the service must report to be <nl> + * stopped <nl> + * / <nl> + 	 void stopService ( long timeout ) { <nl> + long startTime = System . currentTimeMillis ( ) ; <nl> 	 	 waitForNonPendingState ( ) ; <nl> 	 	 / / If the service is already stopped - return <nl> 	 	 if ( queryStatus ( ) . dwCurrentState = = Winsvc . SERVICE _ STOPPED ) { <nl> 	 	 	 return ; <nl> 	 	 } <nl> - 	 	 if ( ! Advapi32 . INSTANCE . ControlService ( _ handle , Winsvc . SERVICE _ CONTROL _ STOP , <nl> - 	 	 	 	 new Winsvc . SERVICE _ STATUS ( ) ) ) { <nl> + SERVICE _ STATUS status = new SERVICE _ STATUS ( ) ; <nl> + 	 	 if ( ! Advapi32 . INSTANCE . ControlService ( _ handle , SERVICE _ CONTROL _ STOP , status ) ) { <nl> 	 	 	 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> 	 	 } <nl> + / / This following the sample from the MSDN <nl> + / / the previouos implementation queried the service status and <nl> + / / failed if the application did not correctly update its state <nl> + while ( status . dwCurrentState ! = Winsvc . SERVICE _ STOPPED ) { <nl> + try { <nl> + 	 	 	 	 Thread . sleep ( status . dwWaitHint ) ; <nl> + 	 	 	 } catch ( InterruptedException e ) { <nl> + 	 	 	 	 throw new RuntimeException ( e ) ; <nl> + 	 	 	 } <nl> + if ( ! Advapi32 . INSTANCE . QueryServiceStatus ( _ handle , status ) ) { <nl> + throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> + } <nl> + if ( ( System . currentTimeMillis ( ) - startTime ) > timeout ) { <nl> + throw new RuntimeException ( String . format ( " Service stop exceeded timeout time of % d ms " , timeout ) ) ; <nl> + } <nl> + } <nl> 	 	 waitForNonPendingState ( ) ; <nl> 	 	 if ( queryStatus ( ) . dwCurrentState ! = Winsvc . SERVICE _ STOPPED ) { <nl> 	 	 	 throw new RuntimeException ( " Unable to stop the service " ) ; <nl> @ @ - 269 , 7 + 298 , 7 @ @ public class W32Service { <nl> 	 	 SERVICE _ STATUS _ PROCESS status = queryStatus ( ) ; <nl> <nl> 	 	 int previousCheckPoint = status . dwCheckPoint ; <nl> - 	 	 int checkpointStartTickCount = Kernel32 . INSTANCE . GetTickCount ( ) ; ; <nl> + 	 	 int checkpointStartTickCount = Kernel32 . INSTANCE . GetTickCount ( ) ; <nl> <nl> 	 	 while ( isPendingState ( status . dwCurrentState ) ) { <nl>
NEAREST DIFF (one line): diff - - git a / jnalib / build . xml b / jnalib / build . xml <nl> index 37ca952 . . 24c79bb 100644 <nl> - - - a / jnalib / build . xml <nl> + + + b / jnalib / build . xml <nl> @ @ - 669 , 6 + 669 , 7 @ @ <nl> < ! - - Sources package as required by maven - - > <nl> < zip zipfile = " $ { dist } / src - mvn . zip " > <nl> < zipfileset dir = " $ { src } " includes = " * * / * . java , * * / * . html , * * / * . png " / > <nl> + < zipfileset dir = " $ { contrib } / platform " includes = " * * / * . java " / > <nl> < / zip > <nl> < / target > <nl>

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 index 43b8a5f . . 9462087 100755 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 @ @ - 1624 , 6 + 1624 , 25 @ @ public interface Advapi32 extends StdCallLibrary { 
 IntByReference pcbBytesNeeded ) ; 
 
 / * * 
 + * Retrieves the current status of the specified service based on the 
 + * specified information level . 
 + * 
 + * @ param hService 
 + * A handle to the service . This handle is returned by the 
 + * OpenService ( SC _ HANDLE , String , int ) or CreateService ( ) 
 + * function , and it must have the SERVICE _ QUERY _ STATUS access 
 + * right . For more information , see < a 
 + * href = " http : / / msdn . microsoft . com / en - us / library / ms685981 . aspx " 
 + * > Service Security and Access Rights < / a > . 
 + * @ param lpServiceStatus 
 + * A pointer to a SERVICE _ STATUS structure that receives the status information . 
 + * @ return If the function succeeds , the return value is true . If the 
 + * function fails , the return value is false . To get extended error 
 + * information , call GetLastError . 
 + * / 
 + boolean QueryServiceStatus ( SC _ HANDLE hService , SERVICE _ STATUS lpServiceStatus ) ; 
 + 
 + / * * 
 * Sends a control code to a service . To specify additional information when 
 * stopping a service , use the ControlServiceEx function . 
 * 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java b / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 index 919f9bf . . 1887505 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 @ @ - 38 , 8 + 38 , 10 @ @ import com . sun . jna . platform . win32 . Winsvc . ENUM _ SERVICE _ STATUS ; 
 import com . sun . jna . platform . win32 . Winsvc . SC _ ACTION ; 
 import com . sun . jna . platform . win32 . Winsvc . SC _ HANDLE ; 
 import com . sun . jna . platform . win32 . Winsvc . SC _ STATUS _ TYPE ; 
 + import static com . sun . jna . platform . win32 . Winsvc . SERVICE _ CONTROL _ STOP ; 
 import com . sun . jna . platform . win32 . Winsvc . SERVICE _ FAILURE _ ACTIONS ; 
 import com . sun . jna . platform . win32 . Winsvc . SERVICE _ FAILURE _ ACTIONS _ FLAG ; 
 + import com . sun . jna . platform . win32 . Winsvc . SERVICE _ STATUS ; 
 import com . sun . jna . platform . win32 . Winsvc . SERVICE _ STATUS _ PROCESS ; 
 import com . sun . jna . ptr . IntByReference ; 
 
 @ @ - 204 , 19 + 206 , 46 @ @ public class W32Service { 
 	 	 } 
 	 } 
 	 
 + / * * 
 + * Stop service . 
 + * / 
 + public void stopService ( ) { 
 + stopService ( 30000 ) ; 
 + } 
 + 
 	 / * * 
 	 * Stop service . 
 - 	 * / 
 - 	 public void stopService ( ) { 
 + * 
 + * @ param timeout timeout in ms until the service must report to be 
 + * stopped 
 + * / 
 + 	 void stopService ( long timeout ) { 
 + long startTime = System . currentTimeMillis ( ) ; 
 	 	 waitForNonPendingState ( ) ; 
 	 	 / / If the service is already stopped - return 
 	 	 if ( queryStatus ( ) . dwCurrentState = = Winsvc . SERVICE _ STOPPED ) { 
 	 	 	 return ; 
 	 	 } 
 - 	 	 if ( ! Advapi32 . INSTANCE . ControlService ( _ handle , Winsvc . SERVICE _ CONTROL _ STOP , 
 - 	 	 	 	 new Winsvc . SERVICE _ STATUS ( ) ) ) { 
 + SERVICE _ STATUS status = new SERVICE _ STATUS ( ) ; 
 + 	 	 if ( ! Advapi32 . INSTANCE . ControlService ( _ handle , SERVICE _ CONTROL _ STOP , status ) ) { 
 	 	 	 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 	 	 } 
 + / / This following the sample from the MSDN 
 + / / the previouos implementation queried the service status and 
 + / / failed if the application did not correctly update its state 
 + while ( status . dwCurrentState ! = Winsvc . SERVICE _ STOPPED ) { 
 + try { 
 + 	 	 	 	 Thread . sleep ( status . dwWaitHint ) ; 
 + 	 	 	 } catch ( InterruptedException e ) { 
 + 	 	 	 	 throw new RuntimeException ( e ) ; 
 + 	 	 	 } 
 + if ( ! Advapi32 . INSTANCE . QueryServiceStatus ( _ handle , status ) ) { 
 + throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 + } 
 + if ( ( System . currentTimeMillis ( ) - startTime ) > timeout ) { 
 + throw new RuntimeException ( String . format ( " Service stop exceeded timeout time of % d ms " , timeout ) ) ; 
 + } 
 + } 
 	 	 waitForNonPendingState ( ) ; 
 	 	 if ( queryStatus ( ) . dwCurrentState ! = Winsvc . SERVICE _ STOPPED ) { 
 	 	 	 throw new RuntimeException ( " Unable to stop the service " ) ; 
 @ @ - 269 , 7 + 298 , 7 @ @ public class W32Service { 
 	 	 SERVICE _ STATUS _ PROCESS status = queryStatus ( ) ; 
 
 	 	 int previousCheckPoint = status . dwCheckPoint ; 
 - 	 	 int checkpointStartTickCount = Kernel32 . INSTANCE . GetTickCount ( ) ; ; 
 + 	 	 int checkpointStartTickCount = Kernel32 . INSTANCE . GetTickCount ( ) ; 
 
 	 	 while ( isPendingState ( status . dwCurrentState ) ) { 


NEAREST DIFF:
diff - - git a / jnalib / build . xml b / jnalib / build . xml 
 index 37ca952 . . 24c79bb 100644 
 - - - a / jnalib / build . xml 
 + + + b / jnalib / build . xml 
 @ @ - 669 , 6 + 669 , 7 @ @ 
 < ! - - Sources package as required by maven - - > 
 < zip zipfile = " $ { dist } / src - mvn . zip " > 
 < zipfileset dir = " $ { src } " includes = " * * / * . java , * * / * . html , * * / * . png " / > 
 + < zipfileset dir = " $ { contrib } / platform " includes = " * * / * . java " / > 
 < / zip > 
 < / target > 

