BLEU SCORE: 0.016932492841722675

TEST MSG: feature # 630 : use of ellipsis / varargs in COM methods
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index a0dbd74 . . e1ef7c1 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 48 , 6 + 48 , 7 @ @ Features <nl> * [ # 621 ] ( https : / / github . com / java - native - access / jna / pull / 621 ) : Added TYPEFLAGS - constants for ` wTypeFlags ` in ` com . sun . jna . platform . win32 . OaIdl . TYPEATTR ` - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . <nl> * [ # 625 ] ( https : / / github . com / java - native - access / jna / pull / 625 ) : Make conversion to / from java to / from VARIANT in ` com . sun . jna . platform . win32 . COM . util . Convert ` more flexible and dependable - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 639 ] ( https : / / github . com / java - native - access / jna / pull / 639 ) : Add getloadavg ( ) to OS X and Unix - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> + * [ # 642 ] ( https : / / github . com / java - native - access / jna / pull / 642 ) : COM calls with variable number of arguments ( varargs ) are now supported - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> index 14c5c63 . . 62dfeb4 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import java . lang . reflect . InvocationHandler ; <nl> + import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Proxy ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . TimeoutException ; <nl> @ @ - 51 , 7 + 52 , 6 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> <nl> / * * <nl> * This object acts as the invocation handler for interfaces annotated with <nl> @ @ - 232 , 12 + 232 , 13 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> <nl> 	 	 ComMethod meth = method . getAnnotation ( ComMethod . class ) ; <nl> 	 	 if ( null ! = meth ) { <nl> + Object [ ] fullLengthArgs = unfoldWhenVarargs ( method , args ) ; <nl> int dispId = meth . dispId ( ) ; <nl> if ( dispId ! = - 1 ) { <nl> - return this . invokeMethod ( returnType , new DISPID ( dispId ) , args ) ; <nl> + return this . invokeMethod ( returnType , new DISPID ( dispId ) , fullLengthArgs ) ; <nl> } else { <nl> String methName = this . getMethodName ( method , meth ) ; <nl> - return this . invokeMethod ( returnType , methName , args ) ; <nl> + return this . invokeMethod ( returnType , methName , fullLengthArgs ) ; <nl> } <nl> 	 	 } <nl> <nl> @ @ - 401 , 6 + 402 , 21 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> return ( T ) Convert . toJavaObject ( result , returnType , factory , false , true ) ; <nl> 	 } <nl> <nl> + 	 private Object [ ] unfoldWhenVarargs ( java . lang . reflect . Method method , Object [ ] argParams ) { <nl> + if ( null = = argParams ) { <nl> + return null ; <nl> + } <nl> + if ( argParams . length = = 0 | | ! method . isVarArgs ( ) | | ! ( argParams [ argParams . length - 1 ] instanceof Object [ ] ) ) { <nl> + return argParams ; <nl> + } <nl> + / / when last parameter is Object [ ] - > unfold the ellipsis : <nl> + Object [ ] varargs = ( Object [ ] ) argParams [ argParams . length - 1 ] ; <nl> + Object [ ] args = new Object [ argParams . length - 1 + varargs . length ] ; <nl> + System . arraycopy ( argParams , 0 , args , 0 , argParams . length - 1 ) ; <nl> + System . arraycopy ( varargs , 0 , args , argParams . length - 1 , varargs . length ) ; <nl> + return args ; <nl> + } <nl> + <nl> 	 @ Override <nl> 	 public < T > T queryInterface ( Class < T > comInterface ) throws COMException { <nl> assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObject _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObject _ Test . java <nl> index a3cd6bd . . 51bd2f3 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObject _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObject _ Test . java <nl> @ @ - 15 , 6 + 15 , 8 @ @ package com . sun . jna . platform . win32 . COM . util ; <nl> import com . sun . jna . Pointer ; <nl> import static org . junit . Assert . * ; <nl> <nl> + import java . io . File ; <nl> + <nl> import org . junit . After ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> @ @ - 41 , 8 + 43 , 53 @ @ public class ProxyObject _ Test { <nl> 	 	 <nl> 	 	 @ ComMethod <nl> 	 	 void Quit ( boolean SaveChanges , Object OriginalFormat , Boolean RouteDocument ) ; <nl> + <nl> + 	 	 @ ComMethod <nl> + 	 	 public void Quit ( Object . . . someArgs ) ; <nl> + <nl> + 	 	 @ ComMethod ( dispId = 0x00000183 ) <nl> + 	 	 public float PointsToPixels ( float points , Object . . . someArgs ) ; <nl> + <nl> + 	 	 @ ComProperty ( dispId = 0x00000006 ) <nl> + 	 	 public Documents getDocuments ( ) ; <nl> 	 } 	 <nl> - 	 <nl> + <nl> + 	 @ ComInterface ( iid = " { 0002096C - 0000 - 0000 - C000 - 000000000046 } " ) <nl> + 	 public interface Documents extends IDispatch { <nl> + 	 	 @ ComMethod <nl> + 	 	 public _ Document Add ( Object template , Object newTemplate , Object documentType , Object visible ) ; <nl> + <nl> + 	 	 @ ComMethod <nl> + 	 	 public _ Document Add ( Object . . . someArgs ) ; <nl> + 	 } <nl> + <nl> + 	 @ ComInterface ( iid = " { 0002096B - 0000 - 0000 - C000 - 000000000046 } " ) <nl> + 	 public interface _ Document extends IDispatch { <nl> + 	 	 @ ComMethod <nl> + 	 	 public void SaveAs ( Object fileName , Object fileFormat , Object lockComments , Object password , <nl> + 	 	 Object addToRecentFiles , Object writePassword , Object readOnlyRecommended , Object embedTrueTypeFonts , <nl> + 	 	 Object saveNativePictureFormat , Object saveFormsData , Object saveAsAOCELetter , Object encoding , <nl> + 	 	 Object insertLineBreaks , Object allowSubstitutions , Object lineEnding , Object addBiDiMarks ) ; <nl> + <nl> + 	 	 @ ComMethod <nl> + 	 	 public void SaveAs ( Object . . . someArgs ) ; <nl> + 	 } <nl> + <nl> + 	 public enum WdSaveFormat implements IComEnum { <nl> + 	 	 wdFormatDocument ( 0 ) , wdFormatText ( 2 ) , wdFormatRTF ( 6 ) , wdFormatHTML ( 8 ) , wdFormatPDF ( 17 ) ; <nl> + <nl> + 	 	 private long _ value ; <nl> + <nl> + 	 	 private WdSaveFormat ( long value ) { <nl> + 	 	 	 _ value = value ; <nl> + 	 	 } <nl> + <nl> + 	 	 @ Override <nl> + 	 	 public long getValue ( ) { <nl> + 	 	 	 return _ value ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> 	 @ ComObject ( progId = " Word . Application " ) <nl> 	 interface MsWordApp extends Application { <nl> 	 } <nl> @ @ - 116 , 4 + 163 , 27 @ @ public class ProxyObject _ Test { <nl> 	 	 <nl> 	 } <nl> 	 <nl> + 	 @ Test <nl> + 	 public void testVarargsCallWithoutVarargParameter ( ) { <nl> + 	 	 MsWordApp comObj = this . factory . createObject ( MsWordApp . class ) ; <nl> + <nl> + 	 	 / / call must work without exception : <nl> + 	 	 float f = comObj . PointsToPixels ( 25 . 3f ) ; <nl> + 	 	 comObj . Quit ( ) ; <nl> + 	 } <nl> + <nl> + 	 @ Test <nl> + 	 public void testVarargsCallWithParameter ( ) { <nl> + 	 	 MsWordApp comObj = this . factory . createObject ( MsWordApp . class ) ; <nl> + <nl> + 	 	 Documents documents = comObj . getDocuments ( ) ; <nl> + 	 	 _ Document myDocument = documents . Add ( ) ; <nl> + <nl> + 	 	 String path = new File ( " . " ) . getAbsolutePath ( ) ; <nl> + 	 	 myDocument . SaveAs ( path + " \ \ abcdefg " , WdSaveFormat . wdFormatPDF ) ; <nl> + 	 	 comObj . Quit ( ) ; <nl> + <nl> + 	 	 boolean wasDeleted = new File ( " abcdefg . pdf " ) . delete ( ) ; <nl> + 	 	 assertTrue ( wasDeleted ) ; <nl> + 	 } <nl> }
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index a0dbd74 . . e1ef7c1 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 48 , 6 + 48 , 7 @ @ Features 
 * [ # 621 ] ( https : / / github . com / java - native - access / jna / pull / 621 ) : Added TYPEFLAGS - constants for ` wTypeFlags ` in ` com . sun . jna . platform . win32 . OaIdl . TYPEATTR ` - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . 
 * [ # 625 ] ( https : / / github . com / java - native - access / jna / pull / 625 ) : Make conversion to / from java to / from VARIANT in ` com . sun . jna . platform . win32 . COM . util . Convert ` more flexible and dependable - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 639 ] ( https : / / github . com / java - native - access / jna / pull / 639 ) : Add getloadavg ( ) to OS X and Unix - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 + * [ # 642 ] ( https : / / github . com / java - native - access / jna / pull / 642 ) : COM calls with variable number of arguments ( varargs ) are now supported - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 index 14c5c63 . . 62dfeb4 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 import java . lang . reflect . InvocationHandler ; 
 + import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Proxy ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . TimeoutException ; 
 @ @ - 51 , 7 + 52 , 6 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; 
 import com . sun . jna . ptr . IntByReference ; 
 import com . sun . jna . ptr . PointerByReference ; 
 - import java . lang . reflect . InvocationTargetException ; 
 
 / * * 
 * This object acts as the invocation handler for interfaces annotated with 
 @ @ - 232 , 12 + 232 , 13 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 
 	 	 ComMethod meth = method . getAnnotation ( ComMethod . class ) ; 
 	 	 if ( null ! = meth ) { 
 + Object [ ] fullLengthArgs = unfoldWhenVarargs ( method , args ) ; 
 int dispId = meth . dispId ( ) ; 
 if ( dispId ! = - 1 ) { 
 - return this . invokeMethod ( returnType , new DISPID ( dispId ) , args ) ; 
 + return this . invokeMethod ( returnType , new DISPID ( dispId ) , fullLengthArgs ) ; 
 } else { 
 String methName = this . getMethodName ( method , meth ) ; 
 - return this . invokeMethod ( returnType , methName , args ) ; 
 + return this . invokeMethod ( returnType , methName , fullLengthArgs ) ; 
 } 
 	 	 } 
 
 @ @ - 401 , 6 + 402 , 21 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 return ( T ) Convert . toJavaObject ( result , returnType , factory , false , true ) ; 
 	 } 
 
 + 	 private Object [ ] unfoldWhenVarargs ( java . lang . reflect . Method method , Object [ ] argParams ) { 
 + if ( null = = argParams ) { 
 + return null ; 
 + } 
 + if ( argParams . length = = 0 | | ! method . isVarArgs ( ) | | ! ( argParams [ argParams . length - 1 ] instanceof Object [ ] ) ) { 
 + return argParams ; 
 + } 
 + / / when last parameter is Object [ ] - > unfold the ellipsis : 
 + Object [ ] varargs = ( Object [ ] ) argParams [ argParams . length - 1 ] ; 
 + Object [ ] args = new Object [ argParams . length - 1 + varargs . length ] ; 
 + System . arraycopy ( argParams , 0 , args , 0 , argParams . length - 1 ) ; 
 + System . arraycopy ( varargs , 0 , args , argParams . length - 1 , varargs . length ) ; 
 + return args ; 
 + } 
 + 
 	 @ Override 
 	 public < T > T queryInterface ( Class < T > comInterface ) throws COMException { 
 assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObject _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObject _ Test . java 
 index a3cd6bd . . 51bd2f3 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObject _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObject _ Test . java 
 @ @ - 15 , 6 + 15 , 8 @ @ package com . sun . jna . platform . win32 . COM . util ; 
 import com . sun . jna . Pointer ; 
 import static org . junit . Assert . * ; 
 
 + import java . io . File ; 
 + 
 import org . junit . After ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 @ @ - 41 , 8 + 43 , 53 @ @ public class ProxyObject _ Test { 
 	 	 
 	 	 @ ComMethod 
 	 	 void Quit ( boolean SaveChanges , Object OriginalFormat , Boolean RouteDocument ) ; 
 + 
 + 	 	 @ ComMethod 
 + 	 	 public void Quit ( Object . . . someArgs ) ; 
 + 
 + 	 	 @ ComMethod ( dispId = 0x00000183 ) 
 + 	 	 public float PointsToPixels ( float points , Object . . . someArgs ) ; 
 + 
 + 	 	 @ ComProperty ( dispId = 0x00000006 ) 
 + 	 	 public Documents getDocuments ( ) ; 
 	 } 	 
 - 	 
 + 
 + 	 @ ComInterface ( iid = " { 0002096C - 0000 - 0000 - C000 - 000000000046 } " ) 
 + 	 public interface Documents extends IDispatch { 
 + 	 	 @ ComMethod 
 + 	 	 public _ Document Add ( Object template , Object newTemplate , Object documentType , Object visible ) ; 
 + 
 + 	 	 @ ComMethod 
 + 	 	 public _ Document Add ( Object . . . someArgs ) ; 
 + 	 } 
 + 
 + 	 @ ComInterface ( iid = " { 0002096B - 0000 - 0000 - C000 - 000000000046 } " ) 
 + 	 public interface _ Document extends IDispatch { 
 + 	 	 @ ComMethod 
 + 	 	 public void SaveAs ( Object fileName , Object fileFormat , Object lockComments , Object password , 
 + 	 	 Object addToRecentFiles , Object writePassword , Object readOnlyRecommended , Object embedTrueTypeFonts , 
 + 	 	 Object saveNativePictureFormat , Object saveFormsData , Object saveAsAOCELetter , Object encoding , 
 + 	 	 Object insertLineBreaks , Object allowSubstitutions , Object lineEnding , Object addBiDiMarks ) ; 
 + 
 + 	 	 @ ComMethod 
 + 	 	 public void SaveAs ( Object . . . someArgs ) ; 
 + 	 } 
 + 
 + 	 public enum WdSaveFormat implements IComEnum { 
 + 	 	 wdFormatDocument ( 0 ) , wdFormatText ( 2 ) , wdFormatRTF ( 6 ) , wdFormatHTML ( 8 ) , wdFormatPDF ( 17 ) ; 
 + 
 + 	 	 private long _ value ; 
 + 
 + 	 	 private WdSaveFormat ( long value ) { 
 + 	 	 	 _ value = value ; 
 + 	 	 } 
 + 
 + 	 	 @ Override 
 + 	 	 public long getValue ( ) { 
 + 	 	 	 return _ value ; 
 + 	 	 } 
 + 	 } 
 + 
 	 @ ComObject ( progId = " Word . Application " ) 
 	 interface MsWordApp extends Application { 
 	 } 
 @ @ - 116 , 4 + 163 , 27 @ @ public class ProxyObject _ Test { 
 	 	 
 	 } 
 	 
 + 	 @ Test 
 + 	 public void testVarargsCallWithoutVarargParameter ( ) { 
 + 	 	 MsWordApp comObj = this . factory . createObject ( MsWordApp . class ) ; 
 + 
 + 	 	 / / call must work without exception : 
 + 	 	 float f = comObj . PointsToPixels ( 25 . 3f ) ; 
 + 	 	 comObj . Quit ( ) ; 
 + 	 } 
 + 
 + 	 @ Test 
 + 	 public void testVarargsCallWithParameter ( ) { 
 + 	 	 MsWordApp comObj = this . factory . createObject ( MsWordApp . class ) ; 
 + 
 + 	 	 Documents documents = comObj . getDocuments ( ) ; 
 + 	 	 _ Document myDocument = documents . Add ( ) ; 
 + 
 + 	 	 String path = new File ( " . " ) . getAbsolutePath ( ) ; 
 + 	 	 myDocument . SaveAs ( path + " \ \ abcdefg " , WdSaveFormat . wdFormatPDF ) ; 
 + 	 	 comObj . Quit ( ) ; 
 + 
 + 	 	 boolean wasDeleted = new File ( " abcdefg . pdf " ) . delete ( ) ; 
 + 	 	 assertTrue ( wasDeleted ) ; 
 + 	 } 
 }

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
