BLEU SCORE: 0.033864985683445356

TEST MSG: Added VirtualQueryEx , MEMORY _ BASIC _ INFORMATION , and related constants
GENERATED MSG: Read / WriteProcessMemory and tests

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 52b8c01 . . 5a66fa2 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 21 , 6 + 21 , 7 @ @ Features <nl> * [ # 352 ] ( https : / / github . com / twall / jna / pull / 352 ) : Performance improvements due to reduced locking in ` com . sun . jna . Library $ Handler ` and fewer vararg checks in ` com . sun . jna . Function ` - [ @ Boereck ] ( https : / / github . com / Boereck ) . <nl> * [ # 357 ] ( https : / / github . com / twall / jna / pull / 357 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . SetSystemTime ` - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) , [ @ thomasjoulin ] ( https : / / github . com / thomasjoulin ) . <nl> * [ # 365 ] ( https : / / github . com / twall / jna / pull / 365 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . GetComputerNameEx ` support - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> + * [ # 368 ] ( https : / / github . com / twall / jna / pull / 368 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . VirtualQueryEx ` , ` com . sun . jna . platform . win32 . WinNT . MEMORY _ BASIC _ INFORMATION ` and ` MEM _ COMMIT ` , ` MEM _ FREE ` , ` MEM _ RESERVE ` , ` MEM _ IMAGE ` , ` MEM _ MAPPED ` , ` MEM _ PRIVATE ` constants to ` com . sun . jna . platform . win32 . WinNT ` - [ @ apsk ] ( https : / / github . com / apsk ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> index 7f45d51 . . 46bb148 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> @ @ - 2262 , 4 + 2262 , 26 @ @ public interface Kernel32 extends WinNT { <nl> 	 * / <nl> boolean ReadProcessMemory ( HANDLE hProcess , Pointer lpBaseAddress , Pointer lpBuffer , int nSize , IntByReference lpNumberOfBytesRead ) ; <nl> <nl> + / * * <nl> + * Retrieves information about a range of pages within the virtual address space of a specified process . <nl> + * <nl> + * @ param hProcess <nl> + * A handle to the process whose memory information is queried . The handle must have been <nl> + * opened with the PROCESS _ QUERY _ INFORMATION access right , which enables using the handle <nl> + * to read information from the process object . <nl> + * @ param lpAddress <nl> + * A pointer to the base address of the region of pages to be queried . <nl> + * This value is rounded down to the next page boundary . To determine the size of a page on the host computer , <nl> + * use the GetSystemInfo function . If lpAddress specifies an address above the highest memory address <nl> + * accessible to the process , the function fails with ERROR _ INVALID _ PARAMETER . <nl> + * @ param lpBuffer <nl> + * A pointer to a MEMORY _ BASIC _ INFORMATION structure in which information about the specified page range is returned . <nl> + * @ param dwLength <nl> + * The size of the buffer pointed to by the lpBuffer parameter , in bytes . <nl> + * <nl> + * @ return The return value is the actual number of bytes returned in the information buffer . <nl> + * If the function fails , the return value is zero . To get extended error information , <nl> + * call GetLastError . Possible error values include ERROR _ INVALID _ PARAMETER . <nl> + * / <nl> + SIZE _ T VirtualQueryEx ( HANDLE hProcess , Pointer lpAddress , MEMORY _ BASIC _ INFORMATION lpBuffer , SIZE _ T dwLength ) ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> index df3a01f . . 211f7ab 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> @ @ - 2448 , 4 + 2448 , 95 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> * / <nl> public static int CacheTrace = 3 ; <nl> } <nl> + <nl> + / * * <nl> + * Indicates committed pages for which physical storage has been allocated , either in memory or in the paging file on disk . <nl> + * / <nl> + int MEM _ COMMIT = 0x1000 ; <nl> + <nl> + / * * <nl> + * Indicates free pages not accessible to the calling process and available to be allocated . <nl> + * For free pages , the information in the AllocationBase , AllocationProtect , Protect , and Type members is undefined . <nl> + * / <nl> + int MEM _ FREE = 0x10000 ; <nl> + <nl> + / * * <nl> + * Indicates reserved pages where a range of the process ' s virtual address space is reserved without any physical storage being allocated . <nl> + * For reserved pages , the information in the Protect member is undefined . <nl> + * / <nl> + int MEM _ RESERVE = 0x2000 ; <nl> + <nl> + / * * <nl> + * Indicates that the memory pages within the region are mapped into the view of an image section . <nl> + * / <nl> + int MEM _ IMAGE = 0x1000000 ; <nl> + <nl> + / * * <nl> + * Indicates that the memory pages within the region are mapped into the view of a section . <nl> + * / <nl> + int MEM _ MAPPED = 0x40000 ; <nl> + <nl> + / * * <nl> + * Indicates that the memory pages within the region are private ( that is , not shared by other processes ) . <nl> + * / <nl> + int MEM _ PRIVATE = 0x20000 ; <nl> + <nl> + public static class MEMORY _ BASIC _ INFORMATION extends Structure { <nl> + <nl> + / * * <nl> + * A pointer to the base address of the region of pages . <nl> + * / <nl> + public Pointer baseAddress ; <nl> + <nl> + / * * <nl> + * A pointer to the base address of a range of pages allocated by the VirtualAlloc function . <nl> + * The page pointed to by the BaseAddress member is contained within this allocation range . <nl> + * / <nl> + public Pointer allocationBase ; <nl> + <nl> + / * * <nl> + * The memory protection option when the region was initially allocated . <nl> + * This member can be one of the memory protection constants or 0 if the caller does not have access . <nl> + * / <nl> + public DWORD allocationProtect ; <nl> + <nl> + / * * <nl> + * The size of the region beginning at the base address in which all pages have identical attributes , in bytes . <nl> + * / <nl> + public SIZE _ T regionSize ; <nl> + <nl> + / * * <nl> + * The state of the pages in the region . <nl> + * This member can be one of the following values : <nl> + * <nl> + * MEM _ COMMIT , <nl> + * MEM _ FREE , <nl> + * MEM _ RESERVE . <nl> + * / <nl> + public DWORD state ; <nl> + <nl> + / * * <nl> + * The access protection of the pages in the region . <nl> + * This member is one of the values listed for the AllocationProtect member . <nl> + * / <nl> + public DWORD protect ; <nl> + <nl> + / * * <nl> + * The type of pages in the region . <nl> + * The following types are defined : <nl> + * <nl> + * MEM _ IMAGE <nl> + * MEM _ MAPPED <nl> + * MEM _ PRIVATE <nl> + * / <nl> + public DWORD type ; <nl> + <nl> + @ Override <nl> + protected List getFieldOrder ( ) { <nl> + return Arrays . asList ( new String [ ] { <nl> + " baseAddress " , " allocationBase " , " allocationProtect " , <nl> + " regionSize " , " state " , " protect " , " type " <nl> + } ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> index 6f084c2 . . 88dddb0 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> @ @ - 39 , 11 + 39 , 13 @ @ import com . sun . jna . platform . win32 . WinBase . MEMORYSTATUSEX ; <nl> import com . sun . jna . platform . win32 . WinBase . SYSTEM _ INFO ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> + import com . sun . jna . platform . win32 . BaseTSD . SIZE _ T ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLEByReference ; <nl> import com . sun . jna . platform . win32 . WinNT . LARGE _ INTEGER ; <nl> import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFO ; <nl> import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFOEX ; <nl> + import com . sun . jna . platform . win32 . WinNT . MEMORY _ BASIC _ INFORMATION ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> <nl> public class Kernel32Test extends TestCase { <nl> @ @ - 717 , 4 + 719 , 11 @ @ public class Kernel32Test extends TestCase { <nl> 	 assertEquals ( bufDest . get ( 2 ) , 15 ) ; <nl> 	 assertEquals ( bufDest . get ( 3 ) , 3 ) ; <nl> } <nl> + <nl> + public void testVirtualQueryEx ( ) { <nl> + HANDLE selfHandle = Kernel32 . INSTANCE . GetCurrentProcess ( ) ; <nl> + MEMORY _ BASIC _ INFORMATION mbi = new MEMORY _ BASIC _ INFORMATION ( ) ; <nl> + SIZE _ T bytesRead = Kernel32 . INSTANCE . VirtualQueryEx ( selfHandle , Pointer . NULL , mbi , new SIZE _ T ( mbi . size ( ) ) ) ; <nl> + assertTrue ( bytesRead . intValue ( ) > 0 ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 52b8c01 . . 5a66fa2 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 21 , 6 + 21 , 7 @ @ Features 
 * [ # 352 ] ( https : / / github . com / twall / jna / pull / 352 ) : Performance improvements due to reduced locking in ` com . sun . jna . Library $ Handler ` and fewer vararg checks in ` com . sun . jna . Function ` - [ @ Boereck ] ( https : / / github . com / Boereck ) . 
 * [ # 357 ] ( https : / / github . com / twall / jna / pull / 357 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . SetSystemTime ` - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) , [ @ thomasjoulin ] ( https : / / github . com / thomasjoulin ) . 
 * [ # 365 ] ( https : / / github . com / twall / jna / pull / 365 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . GetComputerNameEx ` support - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 + * [ # 368 ] ( https : / / github . com / twall / jna / pull / 368 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . VirtualQueryEx ` , ` com . sun . jna . platform . win32 . WinNT . MEMORY _ BASIC _ INFORMATION ` and ` MEM _ COMMIT ` , ` MEM _ FREE ` , ` MEM _ RESERVE ` , ` MEM _ IMAGE ` , ` MEM _ MAPPED ` , ` MEM _ PRIVATE ` constants to ` com . sun . jna . platform . win32 . WinNT ` - [ @ apsk ] ( https : / / github . com / apsk ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 index 7f45d51 . . 46bb148 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 @ @ - 2262 , 4 + 2262 , 26 @ @ public interface Kernel32 extends WinNT { 
 	 * / 
 boolean ReadProcessMemory ( HANDLE hProcess , Pointer lpBaseAddress , Pointer lpBuffer , int nSize , IntByReference lpNumberOfBytesRead ) ; 
 
 + / * * 
 + * Retrieves information about a range of pages within the virtual address space of a specified process . 
 + * 
 + * @ param hProcess 
 + * A handle to the process whose memory information is queried . The handle must have been 
 + * opened with the PROCESS _ QUERY _ INFORMATION access right , which enables using the handle 
 + * to read information from the process object . 
 + * @ param lpAddress 
 + * A pointer to the base address of the region of pages to be queried . 
 + * This value is rounded down to the next page boundary . To determine the size of a page on the host computer , 
 + * use the GetSystemInfo function . If lpAddress specifies an address above the highest memory address 
 + * accessible to the process , the function fails with ERROR _ INVALID _ PARAMETER . 
 + * @ param lpBuffer 
 + * A pointer to a MEMORY _ BASIC _ INFORMATION structure in which information about the specified page range is returned . 
 + * @ param dwLength 
 + * The size of the buffer pointed to by the lpBuffer parameter , in bytes . 
 + * 
 + * @ return The return value is the actual number of bytes returned in the information buffer . 
 + * If the function fails , the return value is zero . To get extended error information , 
 + * call GetLastError . Possible error values include ERROR _ INVALID _ PARAMETER . 
 + * / 
 + SIZE _ T VirtualQueryEx ( HANDLE hProcess , Pointer lpAddress , MEMORY _ BASIC _ INFORMATION lpBuffer , SIZE _ T dwLength ) ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 index df3a01f . . 211f7ab 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 @ @ - 2448 , 4 + 2448 , 95 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 * / 
 public static int CacheTrace = 3 ; 
 } 
 + 
 + / * * 
 + * Indicates committed pages for which physical storage has been allocated , either in memory or in the paging file on disk . 
 + * / 
 + int MEM _ COMMIT = 0x1000 ; 
 + 
 + / * * 
 + * Indicates free pages not accessible to the calling process and available to be allocated . 
 + * For free pages , the information in the AllocationBase , AllocationProtect , Protect , and Type members is undefined . 
 + * / 
 + int MEM _ FREE = 0x10000 ; 
 + 
 + / * * 
 + * Indicates reserved pages where a range of the process ' s virtual address space is reserved without any physical storage being allocated . 
 + * For reserved pages , the information in the Protect member is undefined . 
 + * / 
 + int MEM _ RESERVE = 0x2000 ; 
 + 
 + / * * 
 + * Indicates that the memory pages within the region are mapped into the view of an image section . 
 + * / 
 + int MEM _ IMAGE = 0x1000000 ; 
 + 
 + / * * 
 + * Indicates that the memory pages within the region are mapped into the view of a section . 
 + * / 
 + int MEM _ MAPPED = 0x40000 ; 
 + 
 + / * * 
 + * Indicates that the memory pages within the region are private ( that is , not shared by other processes ) . 
 + * / 
 + int MEM _ PRIVATE = 0x20000 ; 
 + 
 + public static class MEMORY _ BASIC _ INFORMATION extends Structure { 
 + 
 + / * * 
 + * A pointer to the base address of the region of pages . 
 + * / 
 + public Pointer baseAddress ; 
 + 
 + / * * 
 + * A pointer to the base address of a range of pages allocated by the VirtualAlloc function . 
 + * The page pointed to by the BaseAddress member is contained within this allocation range . 
 + * / 
 + public Pointer allocationBase ; 
 + 
 + / * * 
 + * The memory protection option when the region was initially allocated . 
 + * This member can be one of the memory protection constants or 0 if the caller does not have access . 
 + * / 
 + public DWORD allocationProtect ; 
 + 
 + / * * 
 + * The size of the region beginning at the base address in which all pages have identical attributes , in bytes . 
 + * / 
 + public SIZE _ T regionSize ; 
 + 
 + / * * 
 + * The state of the pages in the region . 
 + * This member can be one of the following values : 
 + * 
 + * MEM _ COMMIT , 
 + * MEM _ FREE , 
 + * MEM _ RESERVE . 
 + * / 
 + public DWORD state ; 
 + 
 + / * * 
 + * The access protection of the pages in the region . 
 + * This member is one of the values listed for the AllocationProtect member . 
 + * / 
 + public DWORD protect ; 
 + 
 + / * * 
 + * The type of pages in the region . 
 + * The following types are defined : 
 + * 
 + * MEM _ IMAGE 
 + * MEM _ MAPPED 
 + * MEM _ PRIVATE 
 + * / 
 + public DWORD type ; 
 + 
 + @ Override 
 + protected List getFieldOrder ( ) { 
 + return Arrays . asList ( new String [ ] { 
 + " baseAddress " , " allocationBase " , " allocationProtect " , 
 + " regionSize " , " state " , " protect " , " type " 
 + } ) ; 
 + } 
 + } 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 index 6f084c2 . . 88dddb0 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 @ @ - 39 , 11 + 39 , 13 @ @ import com . sun . jna . platform . win32 . WinBase . MEMORYSTATUSEX ; 
 import com . sun . jna . platform . win32 . WinBase . SYSTEM _ INFO ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 import com . sun . jna . platform . win32 . WinDef . HWND ; 
 + import com . sun . jna . platform . win32 . BaseTSD . SIZE _ T ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLEByReference ; 
 import com . sun . jna . platform . win32 . WinNT . LARGE _ INTEGER ; 
 import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFO ; 
 import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFOEX ; 
 + import com . sun . jna . platform . win32 . WinNT . MEMORY _ BASIC _ INFORMATION ; 
 import com . sun . jna . ptr . IntByReference ; 
 
 public class Kernel32Test extends TestCase { 
 @ @ - 717 , 4 + 719 , 11 @ @ public class Kernel32Test extends TestCase { 
 	 assertEquals ( bufDest . get ( 2 ) , 15 ) ; 
 	 assertEquals ( bufDest . get ( 3 ) , 3 ) ; 
 } 
 + 
 + public void testVirtualQueryEx ( ) { 
 + HANDLE selfHandle = Kernel32 . INSTANCE . GetCurrentProcess ( ) ; 
 + MEMORY _ BASIC _ INFORMATION mbi = new MEMORY _ BASIC _ INFORMATION ( ) ; 
 + SIZE _ T bytesRead = Kernel32 . INSTANCE . VirtualQueryEx ( selfHandle , Pointer . NULL , mbi , new SIZE _ T ( mbi . size ( ) ) ) ; 
 + assertTrue ( bytesRead . intValue ( ) > 0 ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
