BLEU SCORE: 0.018738883683389617

TEST MSG: update javadoc w / r / t direct mapping and varargs
GENERATED MSG: add docs for lasterror , fix last error failure

TEST DIFF (one line): diff - - git a / src / com / sun / jna / overview . html b / src / com / sun / jna / overview . html <nl> index e66bd1b . . 103c2c5 100644 <nl> - - - a / src / com / sun / jna / overview . html <nl> + + + b / src / com / sun / jna / overview . html <nl> @ @ - 95 , 7 + 95 , 9 @ @ public interface CLibrary extends Library { <nl> CLibrary INSTANCE = ( CLibrary ) Native . loadLibrary ( " c " , CLibrary . class ) ; <nl> } <nl> <nl> - / / Alternative 2 : direct - mapped class <nl> + / / Alternative 2 : direct - mapped class ( uses a concrete class rather than an <nl> + / / interface , with a slight variation in < a href = " # direct - mapping " > method <nl> + / / declarations < / a > ) . <nl> public class CLibrary { <nl> static { <nl> Native . register ( " c " ) ; <nl> @ @ - 143 , 7 + 145 , 9 @ @ public interface CLibrary extends Library { <nl> int atol ( String s ) ; <nl> } <nl> < / pre > < / code > < / blockquote > <nl> - Alternatively , you can map directly to a declared native method : < br > <nl> + < a name = " direct - mapping " > < / a > <nl> + Alternatively , you can map directly to a declared native method <nl> + ( with < a href = " / twall / jna / blob / master / www / DirectMapping . md " > some restrictions < / a > ) : < br > <nl> < blockquote > < code > < pre > <nl> public class CLibrary { <nl> public static native int atol ( String s ) ; <nl> @ @ - 385 , 6 + 389 , 8 @ @ interface CLibrary extends Library { <nl> } <nl> < / pre > < / code > < / blockquote > <nl> <nl> + < em > Varargs are not supported when using < a href = " / twall / jna / blob / master / www / DirectMapping . md " > Direct mapping < / a > . < / em > <nl> + <nl> < a name = " structures " > < / a > <nl> < h3 > Structures < / h3 > <nl>
NEAREST DIFF (one line): diff - - git a / dist / w32ce - arm . jar b / dist / w32ce - arm . jar <nl> index a4880a5 . . ef6210b 100644 <nl> Binary files a / dist / w32ce - arm . jar and b / dist / w32ce - arm . jar differ <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index ae4322c . . ead5717 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 144 , 7 + 144 , 7 @ @ public final class Native { <nl> + " - set the system property jna . nosys = true " + LS <nl> + " - set jna . boot . library . path to include the path to the version of the " + LS + " jnidispatch library included with the JNA jar file you are using " + LS ) ; <nl> } <nl> - setPreserveLastError ( Boolean . parseBoolean ( System . getProperty ( " jna . preserve _ last _ error " , " true " ) ) ) ; <nl> + setPreserveLastError ( " true " . equalsIgnoreCase ( System . getProperty ( " jna . preserve _ last _ error " , " true " ) ) ) ; <nl> } <nl> <nl> / * * Force a dispose when this class is GC ' d . * / <nl> diff - - git a / src / com / sun / jna / overview . html b / src / com / sun / jna / overview . html <nl> index cda22a5 . . e953d6d 100644 <nl> - - - a / src / com / sun / jna / overview . html <nl> + + + b / src / com / sun / jna / overview . html <nl> @ @ - 731 , 7 + 731 , 7 @ @ of interest . <nl> < h3 > Throw exceptions on last error < / h3 > <nl> If you are interested in the value of errno / GetLastError ( ) , declare your <nl> method to throw LastErrorException , and call <nl> - { @ link com . sun . jna . Native # PreserveLastError PreserveLastError ( false ) } or set <nl> + { @ link com . sun . jna . Native # setPreserveLastError setPreserveLastError ( false ) } or set <nl> the System property < code > jna . preserve _ last _ error = false < / code > . <nl> < / body > <nl> < / html > <nl> diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index 14b3cf5 . . 96da062 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 906 , 10 + 906 , 10 @ @ public class CallbacksTest extends TestCase { <nl> assertEquals ( " Incorrect result of callback invocation " , - 2 , result , 0 ) ; <nl> } <nl> <nl> - protected void callCallback ( TestLibrary . VoidCallback cb , <nl> - CallbackThreadInitializer cti , <nl> - int repeat , int sleepms , <nl> - int [ ] called ) throws Exception { <nl> + protected void callThreadedCallback ( TestLibrary . VoidCallback cb , <nl> + CallbackThreadInitializer cti , <nl> + int repeat , int sleepms , <nl> + int [ ] called ) throws Exception { <nl> if ( cti ! = null ) { <nl> Native . setCallbackThreadInitializer ( cb , cti ) ; <nl> } <nl> @ @ - 942 , 13 + 942 , 13 @ @ public class CallbacksTest extends TestCase { <nl> + + called [ 0 ] ; <nl> } <nl> } ; <nl> - callCallback ( cb , null , 1 , 100 , called ) ; <nl> + callThreadedCallback ( cb , null , 1 , 100 , called ) ; <nl> <nl> assertFalse ( " Callback thread default should not be attached as daemon " , daemon [ 0 ] ) ; <nl> / / thread name and group are not defined <nl> } <nl> <nl> - public void XFAIL _ WCE _ testCustomizeCallbackThread ( ) throws Exception { <nl> + public void testCustomizeCallbackThread ( ) throws Exception { <nl> 	 final int [ ] called = { 0 } ; <nl> 	 final boolean [ ] daemon = { false } ; <nl> final String [ ] name = { null } ; <nl> @ @ - 961 , 22 + 961 , 26 @ @ public class CallbacksTest extends TestCase { <nl> TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { <nl> public void callback ( ) { <nl> Thread thread = Thread . currentThread ( ) ; <nl> + System . out . println ( " Callback called on " + thread ) ; <nl> daemon [ 0 ] = thread . isDaemon ( ) ; <nl> name [ 0 ] = thread . getName ( ) ; <nl> group [ 0 ] = thread . getThreadGroup ( ) ; <nl> t [ 0 ] = thread ; <nl> <nl> if ( called [ 0 ] = = 1 ) { <nl> + / / Allow the thread to exit <nl> + System . out . println ( " Callback detach " ) ; <nl> Native . detach ( true ) ; <nl> } <nl> + + called [ 0 ] ; <nl> } <nl> } ; <nl> - callCallback ( cb , init , 1 , 100 , called ) ; <nl> + callThreadedCallback ( cb , init , 1 , 100 , called ) ; <nl> <nl> assertTrue ( " Callback thread not attached as daemon " , daemon [ 0 ] ) ; <nl> assertEquals ( " Wrong thread name " , tname , name [ 0 ] ) ; <nl> assertEquals ( " Wrong thread group " , testGroup , group [ 0 ] ) ; <nl> + / / fails on wce <nl> assertTrue ( " Thread should still be alive " , t [ 0 ] . isAlive ( ) ) ; <nl> } <nl> <nl> @ @ - 998 , 7 + 1002 , 7 @ @ public class CallbacksTest extends TestCase { <nl> + + called [ 0 ] ; <nl> } <nl> } ; <nl> - callCallback ( cb , init , COUNT , 100 , called ) ; <nl> + callThreadedCallback ( cb , init , COUNT , 100 , called ) ; <nl> <nl> assertEquals ( " Native thread mapping not preserved : " + threads , <nl> 1 , threads . size ( ) ) ; <nl> @ @ - 1024 , 7 + 1028 , 7 @ @ public class CallbacksTest extends TestCase { <nl> called [ 0 ] = count ; <nl> } <nl> } ; <nl> - callCallback ( cb , null , COUNT , 100 , called ) ; <nl> + callThreadedCallback ( cb , null , COUNT , 100 , called ) ; <nl> <nl> assertEquals ( " Native thread mapping not preserved : " + threads , <nl> 1 , threads . size ( ) ) ;

TEST DIFF:
diff - - git a / src / com / sun / jna / overview . html b / src / com / sun / jna / overview . html 
 index e66bd1b . . 103c2c5 100644 
 - - - a / src / com / sun / jna / overview . html 
 + + + b / src / com / sun / jna / overview . html 
 @ @ - 95 , 7 + 95 , 9 @ @ public interface CLibrary extends Library { 
 CLibrary INSTANCE = ( CLibrary ) Native . loadLibrary ( " c " , CLibrary . class ) ; 
 } 
 
 - / / Alternative 2 : direct - mapped class 
 + / / Alternative 2 : direct - mapped class ( uses a concrete class rather than an 
 + / / interface , with a slight variation in < a href = " # direct - mapping " > method 
 + / / declarations < / a > ) . 
 public class CLibrary { 
 static { 
 Native . register ( " c " ) ; 
 @ @ - 143 , 7 + 145 , 9 @ @ public interface CLibrary extends Library { 
 int atol ( String s ) ; 
 } 
 < / pre > < / code > < / blockquote > 
 - Alternatively , you can map directly to a declared native method : < br > 
 + < a name = " direct - mapping " > < / a > 
 + Alternatively , you can map directly to a declared native method 
 + ( with < a href = " / twall / jna / blob / master / www / DirectMapping . md " > some restrictions < / a > ) : < br > 
 < blockquote > < code > < pre > 
 public class CLibrary { 
 public static native int atol ( String s ) ; 
 @ @ - 385 , 6 + 389 , 8 @ @ interface CLibrary extends Library { 
 } 
 < / pre > < / code > < / blockquote > 
 
 + < em > Varargs are not supported when using < a href = " / twall / jna / blob / master / www / DirectMapping . md " > Direct mapping < / a > . < / em > 
 + 
 < a name = " structures " > < / a > 
 < h3 > Structures < / h3 > 


NEAREST DIFF:
diff - - git a / dist / w32ce - arm . jar b / dist / w32ce - arm . jar 
 index a4880a5 . . ef6210b 100644 
 Binary files a / dist / w32ce - arm . jar and b / dist / w32ce - arm . jar differ 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index ae4322c . . ead5717 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 144 , 7 + 144 , 7 @ @ public final class Native { 
 + " - set the system property jna . nosys = true " + LS 
 + " - set jna . boot . library . path to include the path to the version of the " + LS + " jnidispatch library included with the JNA jar file you are using " + LS ) ; 
 } 
 - setPreserveLastError ( Boolean . parseBoolean ( System . getProperty ( " jna . preserve _ last _ error " , " true " ) ) ) ; 
 + setPreserveLastError ( " true " . equalsIgnoreCase ( System . getProperty ( " jna . preserve _ last _ error " , " true " ) ) ) ; 
 } 
 
 / * * Force a dispose when this class is GC ' d . * / 
 diff - - git a / src / com / sun / jna / overview . html b / src / com / sun / jna / overview . html 
 index cda22a5 . . e953d6d 100644 
 - - - a / src / com / sun / jna / overview . html 
 + + + b / src / com / sun / jna / overview . html 
 @ @ - 731 , 7 + 731 , 7 @ @ of interest . 
 < h3 > Throw exceptions on last error < / h3 > 
 If you are interested in the value of errno / GetLastError ( ) , declare your 
 method to throw LastErrorException , and call 
 - { @ link com . sun . jna . Native # PreserveLastError PreserveLastError ( false ) } or set 
 + { @ link com . sun . jna . Native # setPreserveLastError setPreserveLastError ( false ) } or set 
 the System property < code > jna . preserve _ last _ error = false < / code > . 
 < / body > 
 < / html > 
 diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index 14b3cf5 . . 96da062 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 906 , 10 + 906 , 10 @ @ public class CallbacksTest extends TestCase { 
 assertEquals ( " Incorrect result of callback invocation " , - 2 , result , 0 ) ; 
 } 
 
 - protected void callCallback ( TestLibrary . VoidCallback cb , 
 - CallbackThreadInitializer cti , 
 - int repeat , int sleepms , 
 - int [ ] called ) throws Exception { 
 + protected void callThreadedCallback ( TestLibrary . VoidCallback cb , 
 + CallbackThreadInitializer cti , 
 + int repeat , int sleepms , 
 + int [ ] called ) throws Exception { 
 if ( cti ! = null ) { 
 Native . setCallbackThreadInitializer ( cb , cti ) ; 
 } 
 @ @ - 942 , 13 + 942 , 13 @ @ public class CallbacksTest extends TestCase { 
 + + called [ 0 ] ; 
 } 
 } ; 
 - callCallback ( cb , null , 1 , 100 , called ) ; 
 + callThreadedCallback ( cb , null , 1 , 100 , called ) ; 
 
 assertFalse ( " Callback thread default should not be attached as daemon " , daemon [ 0 ] ) ; 
 / / thread name and group are not defined 
 } 
 
 - public void XFAIL _ WCE _ testCustomizeCallbackThread ( ) throws Exception { 
 + public void testCustomizeCallbackThread ( ) throws Exception { 
 	 final int [ ] called = { 0 } ; 
 	 final boolean [ ] daemon = { false } ; 
 final String [ ] name = { null } ; 
 @ @ - 961 , 22 + 961 , 26 @ @ public class CallbacksTest extends TestCase { 
 TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { 
 public void callback ( ) { 
 Thread thread = Thread . currentThread ( ) ; 
 + System . out . println ( " Callback called on " + thread ) ; 
 daemon [ 0 ] = thread . isDaemon ( ) ; 
 name [ 0 ] = thread . getName ( ) ; 
 group [ 0 ] = thread . getThreadGroup ( ) ; 
 t [ 0 ] = thread ; 
 
 if ( called [ 0 ] = = 1 ) { 
 + / / Allow the thread to exit 
 + System . out . println ( " Callback detach " ) ; 
 Native . detach ( true ) ; 
 } 
 + + called [ 0 ] ; 
 } 
 } ; 
 - callCallback ( cb , init , 1 , 100 , called ) ; 
 + callThreadedCallback ( cb , init , 1 , 100 , called ) ; 
 
 assertTrue ( " Callback thread not attached as daemon " , daemon [ 0 ] ) ; 
 assertEquals ( " Wrong thread name " , tname , name [ 0 ] ) ; 
 assertEquals ( " Wrong thread group " , testGroup , group [ 0 ] ) ; 
 + / / fails on wce 
 assertTrue ( " Thread should still be alive " , t [ 0 ] . isAlive ( ) ) ; 
 } 
 
 @ @ - 998 , 7 + 1002 , 7 @ @ public class CallbacksTest extends TestCase { 
 + + called [ 0 ] ; 
 } 
 } ; 
 - callCallback ( cb , init , COUNT , 100 , called ) ; 
 + callThreadedCallback ( cb , init , COUNT , 100 , called ) ; 
 
 assertEquals ( " Native thread mapping not preserved : " + threads , 
 1 , threads . size ( ) ) ; 
 @ @ - 1024 , 7 + 1028 , 7 @ @ public class CallbacksTest extends TestCase { 
 called [ 0 ] = count ; 
 } 
 } ; 
 - callCallback ( cb , null , COUNT , 100 , called ) ; 
 + callThreadedCallback ( cb , null , COUNT , 100 , called ) ; 
 
 assertEquals ( " Native thread mapping not preserved : " + threads , 
 1 , threads . size ( ) ) ;
