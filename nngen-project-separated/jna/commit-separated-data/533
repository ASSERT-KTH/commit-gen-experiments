BLEU SCORE: 0.02383853510228548

TEST MSG: Mapped RegisterWindowMessage of User32 . dll , added User32Util
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java <nl> index 3e97159 . . b21b3aa 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - / * Copyright ( c ) 2007 Timothy Wall , All Rights Reserved <nl> + / * Copyright ( c ) 2007 , 2013 Timothy Wall , Markus Karg , All Rights Reserved <nl> * <nl> * This library is free software ; you can redistribute it and / or <nl> * modify it under the terms of the GNU Lesser General Public <nl> @ @ - 31 , 6 + 31 , 7 @ @ import com . sun . jna . win32 . W32APIOptions ; <nl> * @ author Todd Fast , todd . fast @ sun . com <nl> * @ author twalljava @ dev . java . net <nl> * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> + * @ auhtor Markus KARG ( markus [ at ] headcrashing [ dot ] eu ) <nl> * / <nl> public interface User32 extends StdCallLibrary , WinUser { <nl> <nl> @ @ - 38 , 7 + 39 , 12 @ @ public interface User32 extends StdCallLibrary , WinUser { <nl> 	 User32 INSTANCE = ( User32 ) Native . loadLibrary ( " user32 " , User32 . class , <nl> 	 	 	 W32APIOptions . DEFAULT _ OPTIONS ) ; <nl> <nl> - 	 / * * The cs globalclass . * / <nl> + 	 / * * <nl> + 	 * Handle for message - only window . <nl> + 	 * / <nl> + public static final HWND HWND _ MESSAGE = new HWND ( Pointer . createConstant ( - 3 ) ) ; <nl> + <nl> + / * * The cs globalclass . * / <nl> 	 int CS _ GLOBALCLASS = 0x4000 ; <nl> <nl> 	 / * * The ws ex topmost . * / <nl> @ @ - 1684 , 4 + 1690 , 17 @ @ public interface User32 extends StdCallLibrary , WinUser { <nl> 	 * error information , call GetLastError . <nl> 	 * / <nl> 	 boolean UnregisterDeviceNotification ( HDEVNOTIFY Handle ) ; <nl> + <nl> + / * * <nl> + * Defines a new window message that is guaranteed to be unique throughout the system . The message value can be used when sending or posting messages . <nl> + * <nl> + * @ param string <nl> + * The message to be registered . <nl> + * <nl> + * @ return If the message is successfully registered , the return value is a message identifier in the range 0xC000 through 0xFFFF . <nl> + * < p > <nl> + * If the function fails , the return value is zero . To get extended error information , call GetLastError . <nl> + * < / p > <nl> + * / <nl> + int RegisterWindowMessage ( String string ) ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / User32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / User32Util . java <nl> new file mode 100644 <nl> index 0000000 . . 616253c <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / User32Util . java <nl> @ @ - 0 , 0 + 1 , 51 @ @ <nl> + / * <nl> + * Copyright ( c ) 2013 Ralf Hamberger , Markus Karg , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free <nl> + * Software Foundation ; either version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR <nl> + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . <nl> + * / <nl> + <nl> + package com . sun . jna . platform . win32 ; <nl> + import com . sun . jna . WString ; <nl> + import com . sun . jna . platform . win32 . WinDef . HINSTANCE ; <nl> + import com . sun . jna . platform . win32 . WinDef . HMENU ; <nl> + import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> + import com . sun . jna . platform . win32 . WinDef . LPVOID ; <nl> + <nl> + <nl> + / * * <nl> + * Provides convenient usage of functions defined by { @ code User32 . dll } . <nl> + * <nl> + * @ author Ralf HAMBERGER <nl> + * @ author Markus KARG ( markus [ at ] headcrashing [ dot ] eu ) <nl> + * / <nl> + public final class User32Util { <nl> + public static final int registerWindowMessage ( final String lpString ) { <nl> + final int messageId = User32 . INSTANCE . RegisterWindowMessage ( lpString ) ; <nl> + if ( messageId = = 0 ) <nl> + throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> + return messageId ; <nl> + } <nl> + <nl> + public static final HWND createWindow ( final String className , final String windowName , final int style , final int x , final int y , final int width , <nl> + final int height , final HWND parent , final HMENU menu , final HINSTANCE instance , final LPVOID param ) { <nl> + return User32Util . createWindowEx ( 0 , className , windowName , style , x , y , width , height , parent , menu , instance , param ) ; <nl> + } <nl> + <nl> + public static final HWND createWindowEx ( final int exStyle , final String className , final String windowName , final int style , final int x , final int y , <nl> + final int width , final int height , final HWND parent , final HMENU menu , final HINSTANCE instance , final LPVOID param ) { <nl> + final HWND hWnd = User32 . INSTANCE <nl> + . CreateWindowEx ( exStyle , new WString ( className ) , windowName , style , x , y , width , height , parent , menu , instance , param ) ; <nl> + if ( hWnd = = null ) <nl> + throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> + return hWnd ; <nl> + } <nl> + <nl> + public static final void destroyWindow ( final HWND hWnd ) { <nl> + if ( ! User32 . INSTANCE . DestroyWindow ( hWnd ) ) <nl> + throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java <nl> index 22471ec . . fb3b459 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java <nl> @ @ - 12 , 12 + 12 , 15 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 ; <nl> <nl> - import junit . framework . TestCase ; <nl> + import static com . sun . jna . platform . win32 . User32 . INSTANCE ; <nl> <nl> - import java . awt . * ; <nl> + import java . awt . AWTException ; <nl> + import java . awt . Robot ; <nl> import java . awt . event . KeyEvent ; <nl> <nl> - import static com . sun . jna . platform . win32 . User32 . * ; <nl> + import junit . framework . TestCase ; <nl> + <nl> + import com . sun . jna . platform . win32 . WinUser . LASTINPUTINFO ; <nl> <nl> / * * <nl> * @ author dblock [ at ] dblock [ dot ] org <nl> @ @ - 102 , 4 + 105 , 9 @ @ public class User32Test extends TestCase { <nl> assertTrue ( Kernel32 . INSTANCE . GetTickCount ( ) > = plii . dwTime ) ; <nl> assertTrue ( plii . dwTime > 0 ) ; <nl> } <nl> + <nl> + public final void testRegisterWindowMessage ( ) { <nl> + final int msg = User32 . INSTANCE . RegisterWindowMessage ( " RM _ UNITTEST " ) ; <nl> + assertTrue ( msg > = 0xC000 & & msg < = 0xFFFF ) ; <nl> + } <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / User32UtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / User32UtilTest . java <nl> new file mode 100644 <nl> index 0000000 . . da0d0d7 <nl> - - - / dev / null <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / User32UtilTest . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + / * <nl> + * Copyright ( c ) 2013 Markus Karg , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free <nl> + * Software Foundation ; either version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR <nl> + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 ; <nl> + <nl> + import junit . framework . TestCase ; <nl> + <nl> + import com . sun . jna . Pointer ; <nl> + <nl> + / * * <nl> + * @ author markus [ at ] headcrashing [ dot ] eu <nl> + * / <nl> + public final class User32UtilTest extends TestCase { <nl> + public static final void main ( final String [ ] args ) { <nl> + junit . textui . TestRunner . run ( User32UtilTest . class ) ; <nl> + } <nl> + <nl> + public final void testRegisterWindowMessage ( ) { <nl> + final int msg = User32Util . registerWindowMessage ( " RM _ UNITTEST " ) ; <nl> + assertTrue ( msg > = 0xC000 & & msg < = 0xFFFF ) ; <nl> + } <nl> + <nl> + public final void testCreateWindow ( ) { <nl> + assertTrue ( Pointer . nativeValue ( User32Util . createWindow ( " Message " , null , 0 , 0 , 0 , 0 , 0 , null , null , null , null ) . getPointer ( ) ) > 0 ) ; <nl> + } <nl> + <nl> + public final void testCreateWindowEx ( ) { <nl> + assertTrue ( Pointer . nativeValue ( User32Util . createWindowEx ( 0 , " Message " , null , 0 , 0 , 0 , 0 , 0 , null , null , null , null ) . getPointer ( ) ) > 0 ) ; <nl> + } <nl> + <nl> + public final void testDestroyWindow ( ) { <nl> + User32Util . destroyWindow ( User32Util . createWindow ( " Message " , null , 0 , 0 , 0 , 0 , 0 , null , null , null , null ) ) ; <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java 
 index 3e97159 . . b21b3aa 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - / * Copyright ( c ) 2007 Timothy Wall , All Rights Reserved 
 + / * Copyright ( c ) 2007 , 2013 Timothy Wall , Markus Karg , All Rights Reserved 
 * 
 * This library is free software ; you can redistribute it and / or 
 * modify it under the terms of the GNU Lesser General Public 
 @ @ - 31 , 6 + 31 , 7 @ @ import com . sun . jna . win32 . W32APIOptions ; 
 * @ author Todd Fast , todd . fast @ sun . com 
 * @ author twalljava @ dev . java . net 
 * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 + * @ auhtor Markus KARG ( markus [ at ] headcrashing [ dot ] eu ) 
 * / 
 public interface User32 extends StdCallLibrary , WinUser { 
 
 @ @ - 38 , 7 + 39 , 12 @ @ public interface User32 extends StdCallLibrary , WinUser { 
 	 User32 INSTANCE = ( User32 ) Native . loadLibrary ( " user32 " , User32 . class , 
 	 	 	 W32APIOptions . DEFAULT _ OPTIONS ) ; 
 
 - 	 / * * The cs globalclass . * / 
 + 	 / * * 
 + 	 * Handle for message - only window . 
 + 	 * / 
 + public static final HWND HWND _ MESSAGE = new HWND ( Pointer . createConstant ( - 3 ) ) ; 
 + 
 + / * * The cs globalclass . * / 
 	 int CS _ GLOBALCLASS = 0x4000 ; 
 
 	 / * * The ws ex topmost . * / 
 @ @ - 1684 , 4 + 1690 , 17 @ @ public interface User32 extends StdCallLibrary , WinUser { 
 	 * error information , call GetLastError . 
 	 * / 
 	 boolean UnregisterDeviceNotification ( HDEVNOTIFY Handle ) ; 
 + 
 + / * * 
 + * Defines a new window message that is guaranteed to be unique throughout the system . The message value can be used when sending or posting messages . 
 + * 
 + * @ param string 
 + * The message to be registered . 
 + * 
 + * @ return If the message is successfully registered , the return value is a message identifier in the range 0xC000 through 0xFFFF . 
 + * < p > 
 + * If the function fails , the return value is zero . To get extended error information , call GetLastError . 
 + * < / p > 
 + * / 
 + int RegisterWindowMessage ( String string ) ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / User32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / User32Util . java 
 new file mode 100644 
 index 0000000 . . 616253c 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / User32Util . java 
 @ @ - 0 , 0 + 1 , 51 @ @ 
 + / * 
 + * Copyright ( c ) 2013 Ralf Hamberger , Markus Karg , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free 
 + * Software Foundation ; either version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR 
 + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . 
 + * / 
 + 
 + package com . sun . jna . platform . win32 ; 
 + import com . sun . jna . WString ; 
 + import com . sun . jna . platform . win32 . WinDef . HINSTANCE ; 
 + import com . sun . jna . platform . win32 . WinDef . HMENU ; 
 + import com . sun . jna . platform . win32 . WinDef . HWND ; 
 + import com . sun . jna . platform . win32 . WinDef . LPVOID ; 
 + 
 + 
 + / * * 
 + * Provides convenient usage of functions defined by { @ code User32 . dll } . 
 + * 
 + * @ author Ralf HAMBERGER 
 + * @ author Markus KARG ( markus [ at ] headcrashing [ dot ] eu ) 
 + * / 
 + public final class User32Util { 
 + public static final int registerWindowMessage ( final String lpString ) { 
 + final int messageId = User32 . INSTANCE . RegisterWindowMessage ( lpString ) ; 
 + if ( messageId = = 0 ) 
 + throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 + return messageId ; 
 + } 
 + 
 + public static final HWND createWindow ( final String className , final String windowName , final int style , final int x , final int y , final int width , 
 + final int height , final HWND parent , final HMENU menu , final HINSTANCE instance , final LPVOID param ) { 
 + return User32Util . createWindowEx ( 0 , className , windowName , style , x , y , width , height , parent , menu , instance , param ) ; 
 + } 
 + 
 + public static final HWND createWindowEx ( final int exStyle , final String className , final String windowName , final int style , final int x , final int y , 
 + final int width , final int height , final HWND parent , final HMENU menu , final HINSTANCE instance , final LPVOID param ) { 
 + final HWND hWnd = User32 . INSTANCE 
 + . CreateWindowEx ( exStyle , new WString ( className ) , windowName , style , x , y , width , height , parent , menu , instance , param ) ; 
 + if ( hWnd = = null ) 
 + throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 + return hWnd ; 
 + } 
 + 
 + public static final void destroyWindow ( final HWND hWnd ) { 
 + if ( ! User32 . INSTANCE . DestroyWindow ( hWnd ) ) 
 + throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java 
 index 22471ec . . fb3b459 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java 
 @ @ - 12 , 12 + 12 , 15 @ @ 
 * / 
 package com . sun . jna . platform . win32 ; 
 
 - import junit . framework . TestCase ; 
 + import static com . sun . jna . platform . win32 . User32 . INSTANCE ; 
 
 - import java . awt . * ; 
 + import java . awt . AWTException ; 
 + import java . awt . Robot ; 
 import java . awt . event . KeyEvent ; 
 
 - import static com . sun . jna . platform . win32 . User32 . * ; 
 + import junit . framework . TestCase ; 
 + 
 + import com . sun . jna . platform . win32 . WinUser . LASTINPUTINFO ; 
 
 / * * 
 * @ author dblock [ at ] dblock [ dot ] org 
 @ @ - 102 , 4 + 105 , 9 @ @ public class User32Test extends TestCase { 
 assertTrue ( Kernel32 . INSTANCE . GetTickCount ( ) > = plii . dwTime ) ; 
 assertTrue ( plii . dwTime > 0 ) ; 
 } 
 + 
 + public final void testRegisterWindowMessage ( ) { 
 + final int msg = User32 . INSTANCE . RegisterWindowMessage ( " RM _ UNITTEST " ) ; 
 + assertTrue ( msg > = 0xC000 & & msg < = 0xFFFF ) ; 
 + } 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / User32UtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / User32UtilTest . java 
 new file mode 100644 
 index 0000000 . . da0d0d7 
 - - - / dev / null 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / User32UtilTest . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + / * 
 + * Copyright ( c ) 2013 Markus Karg , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free 
 + * Software Foundation ; either version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR 
 + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 ; 
 + 
 + import junit . framework . TestCase ; 
 + 
 + import com . sun . jna . Pointer ; 
 + 
 + / * * 
 + * @ author markus [ at ] headcrashing [ dot ] eu 
 + * / 
 + public final class User32UtilTest extends TestCase { 
 + public static final void main ( final String [ ] args ) { 
 + junit . textui . TestRunner . run ( User32UtilTest . class ) ; 
 + } 
 + 
 + public final void testRegisterWindowMessage ( ) { 
 + final int msg = User32Util . registerWindowMessage ( " RM _ UNITTEST " ) ; 
 + assertTrue ( msg > = 0xC000 & & msg < = 0xFFFF ) ; 
 + } 
 + 
 + public final void testCreateWindow ( ) { 
 + assertTrue ( Pointer . nativeValue ( User32Util . createWindow ( " Message " , null , 0 , 0 , 0 , 0 , 0 , null , null , null , null ) . getPointer ( ) ) > 0 ) ; 
 + } 
 + 
 + public final void testCreateWindowEx ( ) { 
 + assertTrue ( Pointer . nativeValue ( User32Util . createWindowEx ( 0 , " Message " , null , 0 , 0 , 0 , 0 , 0 , null , null , null , null ) . getPointer ( ) ) > 0 ) ; 
 + } 
 + 
 + public final void testDestroyWindow ( ) { 
 + User32Util . destroyWindow ( User32Util . createWindow ( " Message " , null , 0 , 0 , 0 , 0 , 0 , null , null , null , null ) ) ; 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
