BLEU SCORE: 0.040583489434387374

TEST MSG: wait longer for finalizer to run
GENERATED MSG: Fix test failures on IBM J9

TEST DIFF (one line): diff - - git a / test / com / sun / jna / JNALoadTest . java b / test / com / sun / jna / JNALoadTest . java <nl> index 0194acd . . b8fba65 100644 <nl> - - - a / test / com / sun / jna / JNALoadTest . java <nl> + + + b / test / com / sun / jna / JNALoadTest . java <nl> @ @ - 125 , 11 + 125 , 10 @ @ public class JNALoadTest extends TestCase implements Paths { <nl> } <nl> assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; <nl> assertNull ( " ClassLoader not GC ' d : " + clref . get ( ) , clref . get ( ) ) ; <nl> - assertFalse ( " System property jna . loaded not cleared " , Boolean . getBoolean ( " jna . loaded " ) ) ; <nl> <nl> / / Check for temporary file deletion <nl> File f = new File ( path ) ; <nl> - for ( int i = 0 ; i < 100 & & f . exists ( ) ; i + + ) { <nl> + for ( int i = 0 ; i < 100 & & ( f . exists ( ) | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { <nl> Thread . sleep ( 10 ) ; <nl> System . gc ( ) ; <nl> } <nl> @ @ - 138 , 6 + 137 , 7 @ @ public class JNALoadTest extends TestCase implements Paths { <nl> assertTrue ( " Temporary jnidispatch not marked for later deletion : " <nl> + f , new File ( f . getAbsolutePath ( ) + " . x " ) . exists ( ) ) ; <nl> } <nl> + assertFalse ( " System property jna . loaded not cleared " , Boolean . getBoolean ( " jna . loaded " ) ) ; <nl> <nl> / / Should be able to load again without complaints about library <nl> / / already loaded in another class loader <nl> @ @ - 173 , 7 + 173 , 7 @ @ public class JNALoadTest extends TestCase implements Paths { <nl> cls = null ; <nl> field = null ; <nl> System . gc ( ) ; <nl> - for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { <nl> + for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { <nl> Thread . sleep ( 10 ) ; <nl> System . gc ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / src / com / sun / jna / Native . java b / jnalib / src / com / sun / jna / Native . java <nl> index 3bd50a5 . . 23f3545 100644 <nl> - - - a / jnalib / src / com / sun / jna / Native . java <nl> + + + b / jnalib / src / com / sun / jna / Native . java <nl> @ @ - 173 , 7 + 173 , 6 @ @ public final class Native { <nl> } <nl> } <nl> catch ( Exception e ) { <nl> - throw new RuntimeException ( " Native library delete failed : " + e . getMessage ( ) ) ; <nl> } <nl> return false ; <nl> } <nl> diff - - git a / jnalib / test / com / sun / jna / JNAUnloadTest . java b / jnalib / test / com / sun / jna / JNAUnloadTest . java <nl> index 732a451 . . 6da10cf 100644 <nl> - - - a / jnalib / test / com / sun / jna / JNAUnloadTest . java <nl> + + + b / jnalib / test / com / sun / jna / JNAUnloadTest . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> } <nl> <nl> + / / Fails on VMs other than Sun ' s <nl> public void testUnloadFromJar ( ) throws Exception { <nl> ClassLoader loader = new TestLoader ( true ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> @ @ - 53 , 19 + 54 , 30 @ @ public class JNAUnloadTest extends TestCase { <nl> field = null ; <nl> System . gc ( ) ; <nl> for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { <nl> - Thread . sleep ( 1 ) ; <nl> + Thread . sleep ( 10 ) ; <nl> + System . gc ( ) ; <nl> } <nl> assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; <nl> assertNull ( " ClassLoader not GC ' d : " + clref . get ( ) , clref . get ( ) ) ; <nl> File f = new File ( path ) ; <nl> - for ( int i = 0 ; i < 1000 & & f . exists ( ) ; i + + ) { <nl> + for ( int i = 0 ; i < 100 & & f . exists ( ) ; i + + ) { <nl> Thread . sleep ( 10 ) ; <nl> + System . gc ( ) ; <nl> + } <nl> + / / NOTE : Temporary file removal on Windows only works on a Sun VM <nl> + try { <nl> + if ( Platform . isWindows ( ) ) { <nl> + ClassLoader . class . getDeclaredField ( " nativeLibraries " ) ; <nl> + } <nl> + assertFalse ( " Temporary native library not deleted : " + path , <nl> + f . exists ( ) ) ; <nl> + } <nl> + catch ( Exception e ) { <nl> + / / Skip on non - supported VMs <nl> } <nl> - assertFalse ( " Temporary native library not deleted : " + path , <nl> - f . exists ( ) ) ; <nl> <nl> try { <nl> - loader = new TestLoader ( false ) ; <nl> + loader = new TestLoader ( true ) ; <nl> cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> } <nl> catch ( Throwable t ) { <nl> @ @ - 78 , 6 + 90 , 7 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> } <nl> <nl> + / / Fails on VMs other than Sun ' s <nl> public void testUnload ( ) throws Exception { <nl> ClassLoader loader = new TestLoader ( false ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> @ @ - 95 , 17 + 108 , 31 @ @ public class JNAUnloadTest extends TestCase { <nl> field = null ; <nl> System . gc ( ) ; <nl> for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { <nl> - Thread . sleep ( 1 ) ; <nl> + Thread . sleep ( 10 ) ; <nl> + System . gc ( ) ; <nl> } <nl> assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; <nl> assertNull ( " ClassLoader not GC ' d : " + clref . get ( ) , clref . get ( ) ) ; <nl> <nl> - try { <nl> - loader = new TestLoader ( false ) ; <nl> - cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> + Throwable throwable = null ; <nl> + / / NOTE : IBM J9 needs some extra time to unload the native library , <nl> + / / so try a few times before failing <nl> + for ( int i = 0 ; i < 100 ; i + + ) { <nl> + System . gc ( ) ; <nl> + Thread . sleep ( 10 ) ; <nl> + try { <nl> + loader = new TestLoader ( false ) ; <nl> + cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> + break ; <nl> + } <nl> + catch ( Throwable t ) { <nl> + loader = null ; <nl> + throwable = t ; <nl> + } <nl> } <nl> - catch ( Throwable t ) { <nl> - fail ( " Native library not unloaded : " + t . getMessage ( ) ) ; <nl> + try { <nl> + if ( loader = = null ) <nl> + fail ( " Native library not unloaded : " + throwable . getMessage ( ) ) ; <nl> } <nl> finally { <nl> loader = null ;

TEST DIFF:
diff - - git a / test / com / sun / jna / JNALoadTest . java b / test / com / sun / jna / JNALoadTest . java 
 index 0194acd . . b8fba65 100644 
 - - - a / test / com / sun / jna / JNALoadTest . java 
 + + + b / test / com / sun / jna / JNALoadTest . java 
 @ @ - 125 , 11 + 125 , 10 @ @ public class JNALoadTest extends TestCase implements Paths { 
 } 
 assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; 
 assertNull ( " ClassLoader not GC ' d : " + clref . get ( ) , clref . get ( ) ) ; 
 - assertFalse ( " System property jna . loaded not cleared " , Boolean . getBoolean ( " jna . loaded " ) ) ; 
 
 / / Check for temporary file deletion 
 File f = new File ( path ) ; 
 - for ( int i = 0 ; i < 100 & & f . exists ( ) ; i + + ) { 
 + for ( int i = 0 ; i < 100 & & ( f . exists ( ) | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { 
 Thread . sleep ( 10 ) ; 
 System . gc ( ) ; 
 } 
 @ @ - 138 , 6 + 137 , 7 @ @ public class JNALoadTest extends TestCase implements Paths { 
 assertTrue ( " Temporary jnidispatch not marked for later deletion : " 
 + f , new File ( f . getAbsolutePath ( ) + " . x " ) . exists ( ) ) ; 
 } 
 + assertFalse ( " System property jna . loaded not cleared " , Boolean . getBoolean ( " jna . loaded " ) ) ; 
 
 / / Should be able to load again without complaints about library 
 / / already loaded in another class loader 
 @ @ - 173 , 7 + 173 , 7 @ @ public class JNALoadTest extends TestCase implements Paths { 
 cls = null ; 
 field = null ; 
 System . gc ( ) ; 
 - for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { 
 + for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { 
 Thread . sleep ( 10 ) ; 
 System . gc ( ) ; 
 }

NEAREST DIFF:
diff - - git a / jnalib / src / com / sun / jna / Native . java b / jnalib / src / com / sun / jna / Native . java 
 index 3bd50a5 . . 23f3545 100644 
 - - - a / jnalib / src / com / sun / jna / Native . java 
 + + + b / jnalib / src / com / sun / jna / Native . java 
 @ @ - 173 , 7 + 173 , 6 @ @ public final class Native { 
 } 
 } 
 catch ( Exception e ) { 
 - throw new RuntimeException ( " Native library delete failed : " + e . getMessage ( ) ) ; 
 } 
 return false ; 
 } 
 diff - - git a / jnalib / test / com / sun / jna / JNAUnloadTest . java b / jnalib / test / com / sun / jna / JNAUnloadTest . java 
 index 732a451 . . 6da10cf 100644 
 - - - a / jnalib / test / com / sun / jna / JNAUnloadTest . java 
 + + + b / jnalib / test / com / sun / jna / JNAUnloadTest . java 
 @ @ - 35 , 6 + 35 , 7 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 } 
 
 + / / Fails on VMs other than Sun ' s 
 public void testUnloadFromJar ( ) throws Exception { 
 ClassLoader loader = new TestLoader ( true ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 @ @ - 53 , 19 + 54 , 30 @ @ public class JNAUnloadTest extends TestCase { 
 field = null ; 
 System . gc ( ) ; 
 for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { 
 - Thread . sleep ( 1 ) ; 
 + Thread . sleep ( 10 ) ; 
 + System . gc ( ) ; 
 } 
 assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; 
 assertNull ( " ClassLoader not GC ' d : " + clref . get ( ) , clref . get ( ) ) ; 
 File f = new File ( path ) ; 
 - for ( int i = 0 ; i < 1000 & & f . exists ( ) ; i + + ) { 
 + for ( int i = 0 ; i < 100 & & f . exists ( ) ; i + + ) { 
 Thread . sleep ( 10 ) ; 
 + System . gc ( ) ; 
 + } 
 + / / NOTE : Temporary file removal on Windows only works on a Sun VM 
 + try { 
 + if ( Platform . isWindows ( ) ) { 
 + ClassLoader . class . getDeclaredField ( " nativeLibraries " ) ; 
 + } 
 + assertFalse ( " Temporary native library not deleted : " + path , 
 + f . exists ( ) ) ; 
 + } 
 + catch ( Exception e ) { 
 + / / Skip on non - supported VMs 
 } 
 - assertFalse ( " Temporary native library not deleted : " + path , 
 - f . exists ( ) ) ; 
 
 try { 
 - loader = new TestLoader ( false ) ; 
 + loader = new TestLoader ( true ) ; 
 cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 } 
 catch ( Throwable t ) { 
 @ @ - 78 , 6 + 90 , 7 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 } 
 
 + / / Fails on VMs other than Sun ' s 
 public void testUnload ( ) throws Exception { 
 ClassLoader loader = new TestLoader ( false ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 @ @ - 95 , 17 + 108 , 31 @ @ public class JNAUnloadTest extends TestCase { 
 field = null ; 
 System . gc ( ) ; 
 for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { 
 - Thread . sleep ( 1 ) ; 
 + Thread . sleep ( 10 ) ; 
 + System . gc ( ) ; 
 } 
 assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; 
 assertNull ( " ClassLoader not GC ' d : " + clref . get ( ) , clref . get ( ) ) ; 
 
 - try { 
 - loader = new TestLoader ( false ) ; 
 - cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 + Throwable throwable = null ; 
 + / / NOTE : IBM J9 needs some extra time to unload the native library , 
 + / / so try a few times before failing 
 + for ( int i = 0 ; i < 100 ; i + + ) { 
 + System . gc ( ) ; 
 + Thread . sleep ( 10 ) ; 
 + try { 
 + loader = new TestLoader ( false ) ; 
 + cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 + break ; 
 + } 
 + catch ( Throwable t ) { 
 + loader = null ; 
 + throwable = t ; 
 + } 
 } 
 - catch ( Throwable t ) { 
 - fail ( " Native library not unloaded : " + t . getMessage ( ) ) ; 
 + try { 
 + if ( loader = = null ) 
 + fail ( " Native library not unloaded : " + throwable . getMessage ( ) ) ; 
 } 
 finally { 
 loader = null ;
