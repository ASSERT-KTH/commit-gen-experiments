BLEU SCORE: 0.033864985683445356

TEST MSG: add explicit tests for empty structs and structs with only private fields
GENERATED MSG: fix some more failing tests

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index 88cf8e5 . . 44e5c72 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - / * Copyright ( c ) 2007 - 2012 Timothy Wall , All Rights Reserved <nl> + / * Copyright ( c ) 2007 - 2013 Timothy Wall , All Rights Reserved <nl> * <nl> * This library is free software ; you can redistribute it and / or <nl> * modify it under the terms of the GNU Lesser General Public <nl> @ @ - 51 , 7 + 51 , 10 @ @ import java . util . zip . Adler32 ; <nl> * constructor . <nl> * < p / > <nl> * Structure fields corresponding to native struct fields < em > must < / em > be <nl> - * public . You < em > must < / em > define { @ link # getFieldOrder } to return a List of <nl> + * public . If your structure is to have no fields of its own , it must be <nl> + * declared abstract . <nl> + * < p / > <nl> + * You < em > must < / em > define { @ link # getFieldOrder } to return a List of <nl> * field names ( Strings ) indicating the proper order of the fields . When <nl> * dealing with multiple levels of subclasses of Structure , you must add to <nl> * the list provided by the superclass { @ link # getFieldOrder } <nl> @ @ - 1112 , 7 + 1115 , 7 @ @ public abstract class Structure { <nl> } <nl> <nl> throw new IllegalArgumentException ( " Structure " + getClass ( ) <nl> - + " has unknown size ( ensure " <nl> + + " has unknown or zero size ( ensure " <nl> + " all fields are public ) " ) ; <nl> } <nl> <nl> diff - - git a / test / com / sun / jna / StructureTest . java b / test / com / sun / jna / StructureTest . java <nl> index 658be22 . . 65d4755 100644 <nl> - - - a / test / com / sun / jna / StructureTest . java <nl> + + + b / test / com / sun / jna / StructureTest . java <nl> @ @ - 296 , 6 + 296 , 35 @ @ public class StructureTest extends TestCase { <nl> testAlignStruct ( 5 ) ; <nl> } <nl> <nl> + public void testStructureWithNoFields ( ) { <nl> + class TestStructure extends Structure { <nl> + protected List getFieldOrder ( ) { <nl> + return Arrays . asList ( new String [ ] { } ) ; <nl> + } <nl> + } <nl> + try { <nl> + new TestStructure ( ) ; <nl> + fail ( " Structure should not be instantiable if it has no public member fields " ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) { <nl> + } <nl> + } <nl> + <nl> + public void testStructureWithOnlyNonPublicMemberFields ( ) { <nl> + class TestStructure extends Structure { <nl> + int field ; <nl> + protected List getFieldOrder ( ) { <nl> + return Arrays . asList ( new String [ ] { " field " } ) ; <nl> + } <nl> + } <nl> + try { <nl> + new TestStructure ( ) ; <nl> + fail ( " Structure should not be instantiable if it has no public member fields " ) ; <nl> + } <nl> + catch ( Error e ) { <nl> + } <nl> + } <nl> + <nl> / / must be publicly accessible in order to create array elements <nl> public static class PublicTestStructure extends Structure { <nl> public static class ByReference extends PublicTestStructure implements Structure . ByReference { }
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 263deda . . 3764e99 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 478 , 6 + 478 , 7 @ @ <nl> < zipfileset src = " build / jna . jar " / > <nl> < zipfileset src = " build / jna - test . jar " / > <nl> < / jar > <nl> + < copy todir = " shared " file = " build / jna . jar " / > <nl> < copy todir = " shared " file = " build / native / jnidispatch . dll " / > <nl> < copy todir = " shared " file = " build / native / testlib . dll " / > <nl> < copy todir = " shared " file = " build / native / testlib2 . dll " / > <nl> diff - - git a / native / Makefile b / native / Makefile <nl> index 13d5b30 . . 87979aa 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 103 , 7 + 103 , 7 @ @ CDEFINES = - D _ WIN32 _ IE = 0x400 - D _ WIN32 _ WCE = 0x0420 - DNO _ JAWT - DNO _ NIO _ BUFFERS - DWINC <nl> CFLAGS + = - Wno - unknown - pragmas <nl> LD = arm - mingw32ce - gcc <nl> LIBDIR = / opt / mingw32ce / lib / gcc / arm - mingw32ce / 4 . 4 . 0 <nl> - LDFLAGS = - o $ @ - shared - Wl , - Map $ { @ : $ ( LIBSFX ) = . map } <nl> + LDFLAGS = - o $ @ - shared <nl> LIBS = - lcoredll - lgcc - ltoolhelp <nl> WINDRES = arm - mingw32ce - windres <nl> EXTRAOBJS = $ ( RSRC ) <nl> diff - - git a / native / libffi / src / arm / ffi . c b / native / libffi / src / arm / ffi . c <nl> index 885a9cb . . 8b19313 100644 <nl> - - - a / native / libffi / src / arm / ffi . c <nl> + + + b / native / libffi / src / arm / ffi . c <nl> @ @ - 600 , 6 + 600 , 11 @ @ ffi _ prep _ closure _ loc ( ffi _ closure * closure , <nl> closure - > user _ data = user _ data ; <nl> closure - > fun = fun ; <nl> <nl> + # ifdef _ WIN32 _ WCE <nl> + / * This is important to allow calling the trampoline safely * / <nl> + FlushInstructionCache ( GetCurrentProcess ( ) , 0 , 0 ) ; <nl> + # endif <nl> + <nl> return FFI _ OK ; <nl> } <nl> <nl> diff - - git a / native / testlib . c b / native / testlib . c <nl> index b857f72 . . 13b6425 100644 <nl> - - - a / native / testlib . c <nl> + + + b / native / testlib . c <nl> @ @ - 389 , 9 + 389 , 19 @ @ setPointerByReferenceNull ( void * * arg ) { <nl> <nl> EXPORT int64 _ t <nl> checkInt64ArgumentAlignment ( int32 _ t i , int64 _ t j , int32 _ t i2 , int64 _ t j2 ) { <nl> - if ( i ! = 0x10101010 | | j ! = LONG ( 0x1111111111111111 ) <nl> - | | i2 ! = 0x01010101 | | j2 ! = LONG ( 0x2222222222222222 ) ) <nl> + <nl> + if ( i ! = 0x10101010 ) { <nl> return - 1 ; <nl> + } <nl> + if ( j ! = LONG ( 0x1111111111111111 ) ) { <nl> + return - 2 ; <nl> + } <nl> + if ( i2 ! = 0x01010101 ) { <nl> + return - 3 ; <nl> + } <nl> + if ( j2 ! = LONG ( 0x2222222222222222 ) ) { <nl> + return - 4 ; <nl> + } <nl> <nl> return i + j + i2 + j2 ; <nl> } <nl> @ @ - 400 , 8 + 410 , 14 @ @ EXPORT double <nl> checkDoubleArgumentAlignment ( float f , double d , float f2 , double d2 ) { <nl> / / float : 1 = 3f800000 2 = 40000000 3 = 40400000 4 = 40800000 <nl> / / double : 1 = 3ff00 . . . 2 = 40000 . . . 3 = 40080 . . . 4 = 40100 . . . <nl> - if ( f ! = 1 | | d ! = 2 | | f2 ! = 3 | | d2 ! = 4 ) <nl> - return - 1 ; <nl> + wchar _ t wbuf [ 1024 ] ; <nl> + wsprintf ( wbuf , L " double align : % p % p % p % p \ n " , & f , & d , & f2 , & d2 ) ; <nl> + OutputDebugString ( wbuf ) ; <nl> + <nl> + if ( f ! = 1 ) return - 1 ; <nl> + if ( d ! = 2 ) return - 2 ; <nl> + if ( f2 ! = 3 ) return - 3 ; <nl> + if ( d2 ! = 4 ) return - 4 ; <nl> <nl> return f + d + f2 + d2 ; <nl> } <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index b18a64e . . 9f4caf9 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 676 , 7 + 676 , 7 @ @ public final class Native { <nl> nativeLibraryPath = path ; <nl> return ; <nl> } catch ( UnsatisfiedLinkError ex ) { <nl> - ex . printStackTrace ( ) ; <nl> + System . err . println ( " File found at " + file + " but not loadable : " + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> if ( Platform . isMac ( ) ) { <nl> @ @ - 695 , 6 + 695 , 7 @ @ public final class Native { <nl> nativeLibraryPath = path ; <nl> return ; <nl> } catch ( UnsatisfiedLinkError ex ) { <nl> + System . err . println ( " File found at " + path + " but not loadable : " + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / test / com / sun / jna / ArgumentsMarshalTest . java b / test / com / sun / jna / ArgumentsMarshalTest . java <nl> index d7a2140 . . a25cdcd 100644 <nl> - - - a / test / com / sun / jna / ArgumentsMarshalTest . java <nl> + + + b / test / com / sun / jna / ArgumentsMarshalTest . java <nl> @ @ - 120 , 7 + 120 , 6 @ @ public class ArgumentsMarshalTest extends TestCase { <nl> <nl> TestLibrary lib ; <nl> protected void setUp ( ) { <nl> - System . out . println ( " test : " + getName ( ) ) ; <nl> lib = ( TestLibrary ) Native . loadLibrary ( " testlib " , TestLibrary . class ) ; <nl> } <nl> <nl> @ @ - 287 , 15 + 286 , 16 @ @ public class ArgumentsMarshalTest extends TestCase { <nl> assertEquals ( " Expect string magic " , MAGIC , lib . returnStringArgument ( MAGIC ) . toString ( ) ) ; <nl> } <nl> <nl> - / / wce fail <nl> - public void XFAIL _ WCE _ testInt64ArgumentAlignment ( ) { <nl> + / / wce fail ; 2nd 64 - bit argument is received incorrectly <nl> + public void testInt64ArgumentAlignment ( ) { <nl> long value = lib . checkInt64ArgumentAlignment ( 0x10101010 , 0x1111111111111111L , <nl> 0x01010101 , 0x2222222222222222L ) ; <nl> assertEquals ( " Improper handling of interspersed int32 / int64 " , <nl> 0x3333333344444444L , value ) ; <nl> } <nl> <nl> - public void XFAIL _ WCE _ testDoubleArgumentAlignment ( ) { <nl> + / / wce fail ; 2nd double argument is received incorrectly <nl> + public void testDoubleArgumentAlignment ( ) { <nl> double value = lib . checkDoubleArgumentAlignment ( 1f , 2d , 3f , 4d ) ; <nl> assertEquals ( " Improper handling of interspersed float / double " , <nl> 10d , value , 0 ) ; <nl> diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index 9dc6fb7 . . ac6022b 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 155 , 7 + 155 , 6 @ @ public class CallbacksTest extends TestCase { <nl> <nl> TestLibrary lib ; <nl> protected void setUp ( ) { <nl> - System . out . println ( " test : " + getName ( ) ) ; <nl> lib = ( TestLibrary ) Native . loadLibrary ( " testlib " , TestLibrary . class ) ; <nl> } <nl> <nl> diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java <nl> index cd529f3 . . 98aa45d 100644 <nl> - - - a / test / com / sun / jna / JNAUnloadTest . java <nl> + + + b / test / com / sun / jna / JNAUnloadTest . java <nl> @ @ - 30 , 18 + 30 , 18 @ @ public class JNAUnloadTest extends TestCase { <nl> private static class TestLoader extends URLClassLoader { <nl> public TestLoader ( boolean fromJar ) throws MalformedURLException { <nl> super ( new URL [ ] { <nl> - new File ( BUILDDIR + ( fromJar ? " / jna . jar " : " / classes " ) ) . toURI ( ) . toURL ( ) , <nl> + Platform . isWindowsCE ( ) <nl> + ? new File ( " / Storage Card / " + ( fromJar ? " jna . jar " : " test . jar " ) ) . toURI ( ) . toURL ( ) <nl> + : new File ( BUILDDIR + ( fromJar ? " / jna . jar " : " / classes " ) ) . toURI ( ) . toURL ( ) , <nl> } , null ) ; <nl> } <nl> } <nl> <nl> - / / wce support this ? do we have a tmpdir ? <nl> - public void XFAIL _ WCE _ testLoadFromJar ( ) throws Exception { <nl> + public void testLoadFromJar ( ) throws Exception { <nl> Class . forName ( " com . sun . jna . Native " , true , new TestLoader ( true ) ) ; <nl> } <nl> <nl> - / / wce support this ? <nl> - public void XFAIL _ WCE _ testAvoidJarUnpacking ( ) throws Exception { <nl> + public void testAvoidJarUnpacking ( ) throws Exception { <nl> System . setProperty ( " jna . nounpack " , " true " ) ; <nl> ClassLoader loader = new TestLoader ( true ) ; <nl> try { <nl> @ @ - 58 , 9 + 58 , 8 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> <nl> / / Fails under clover <nl> - / / wce support this ? <nl> - public void XFAIL _ WCE _ testUnloadFromJar ( ) throws Exception { <nl> - File jar = new File ( BUILDDIR + " / jna . jar " ) ; <nl> + public void testUnloadFromJar ( ) throws Exception { <nl> + File jar = new File ( ( Platform . isWindowsCE ( ) ? " / Storage Card " : BUILDDIR ) + " / jna . jar " ) ; <nl> if ( ! jar . exists ( ) ) { <nl> throw new Error ( " Expected JNA jar file at " + jar + " is missing " ) ; <nl> } <nl> @ @ - 118 , 8 + 117 , 7 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> <nl> / / Fails under clover and OpenJDK ( linux / ppc ) <nl> - / / wce class not found <nl> - public void XFAIL _ WCE _ testUnload ( ) throws Exception { <nl> + public void testUnload ( ) throws Exception { <nl> ClassLoader loader = new TestLoader ( false ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> assertEquals ( " Wrong class loader " , loader , cls . getClassLoader ( ) ) ; <nl> diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java <nl> index 3ee4da4 . . 8453c3b 100644 <nl> - - - a / test / com / sun / jna / NativeTest . java <nl> + + + b / test / com / sun / jna / NativeTest . java <nl> @ @ - 324 , 7 + 324 , 7 @ @ public class NativeTest extends TestCase { <nl> <nl> public static void main ( String [ ] args ) { <nl> if ( args . length = = 0 ) { <nl> - args = new String [ ] { " com . sun . jna . NativeTest " } ; <nl> + junit . textui . TestRunner . run ( NativeTest . class ) ; <nl> } <nl> else { <nl> if ( args . length = = 1 & & " all " . equals ( args [ 0 ] ) ) { <nl> @ @ - 361 , 12 + 361 , 11 @ @ public class NativeTest extends TestCase { <nl> try { <nl> junit . textui . TestRunner . run ( Class . forName ( args [ i ] ) ) ; <nl> } <nl> - catch ( Throwable t ) { <nl> - System . err . println ( " Error in test : " ) ; <nl> - t . printStackTrace ( ) ; <nl> + catch ( ClassNotFoundException e ) { <nl> + System . err . println ( " No such class : " + args [ i ] ) ; <nl> } <nl> } <nl> + try { Thread . sleep ( 300000 ) ; } catch ( Exception e ) { } <nl> } <nl> - try { Thread . sleep ( 300000 ) ; } catch ( Exception e ) { } <nl> } <nl> } <nl> diff - - git a / test / com / sun / jna / ReturnTypesTest . java b / test / com / sun / jna / ReturnTypesTest . java <nl> index c772657 . . 4354592 100644 <nl> - - - a / test / com / sun / jna / ReturnTypesTest . java <nl> + + + b / test / com / sun / jna / ReturnTypesTest . java <nl> @ @ - 90 , 7 + 90 , 6 @ @ public class ReturnTypesTest extends TestCase { <nl> <nl> TestLibrary lib ; <nl> protected void setUp ( ) { <nl> - System . out . println ( " test : " + getName ( ) ) ; <nl> lib = ( TestLibrary ) Native . loadLibrary ( " testlib " , TestLibrary . class ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index 88cf8e5 . . 44e5c72 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - / * Copyright ( c ) 2007 - 2012 Timothy Wall , All Rights Reserved 
 + / * Copyright ( c ) 2007 - 2013 Timothy Wall , All Rights Reserved 
 * 
 * This library is free software ; you can redistribute it and / or 
 * modify it under the terms of the GNU Lesser General Public 
 @ @ - 51 , 7 + 51 , 10 @ @ import java . util . zip . Adler32 ; 
 * constructor . 
 * < p / > 
 * Structure fields corresponding to native struct fields < em > must < / em > be 
 - * public . You < em > must < / em > define { @ link # getFieldOrder } to return a List of 
 + * public . If your structure is to have no fields of its own , it must be 
 + * declared abstract . 
 + * < p / > 
 + * You < em > must < / em > define { @ link # getFieldOrder } to return a List of 
 * field names ( Strings ) indicating the proper order of the fields . When 
 * dealing with multiple levels of subclasses of Structure , you must add to 
 * the list provided by the superclass { @ link # getFieldOrder } 
 @ @ - 1112 , 7 + 1115 , 7 @ @ public abstract class Structure { 
 } 
 
 throw new IllegalArgumentException ( " Structure " + getClass ( ) 
 - + " has unknown size ( ensure " 
 + + " has unknown or zero size ( ensure " 
 + " all fields are public ) " ) ; 
 } 
 
 diff - - git a / test / com / sun / jna / StructureTest . java b / test / com / sun / jna / StructureTest . java 
 index 658be22 . . 65d4755 100644 
 - - - a / test / com / sun / jna / StructureTest . java 
 + + + b / test / com / sun / jna / StructureTest . java 
 @ @ - 296 , 6 + 296 , 35 @ @ public class StructureTest extends TestCase { 
 testAlignStruct ( 5 ) ; 
 } 
 
 + public void testStructureWithNoFields ( ) { 
 + class TestStructure extends Structure { 
 + protected List getFieldOrder ( ) { 
 + return Arrays . asList ( new String [ ] { } ) ; 
 + } 
 + } 
 + try { 
 + new TestStructure ( ) ; 
 + fail ( " Structure should not be instantiable if it has no public member fields " ) ; 
 + } 
 + catch ( IllegalArgumentException e ) { 
 + } 
 + } 
 + 
 + public void testStructureWithOnlyNonPublicMemberFields ( ) { 
 + class TestStructure extends Structure { 
 + int field ; 
 + protected List getFieldOrder ( ) { 
 + return Arrays . asList ( new String [ ] { " field " } ) ; 
 + } 
 + } 
 + try { 
 + new TestStructure ( ) ; 
 + fail ( " Structure should not be instantiable if it has no public member fields " ) ; 
 + } 
 + catch ( Error e ) { 
 + } 
 + } 
 + 
 / / must be publicly accessible in order to create array elements 
 public static class PublicTestStructure extends Structure { 
 public static class ByReference extends PublicTestStructure implements Structure . ByReference { }

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 263deda . . 3764e99 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 478 , 6 + 478 , 7 @ @ 
 < zipfileset src = " build / jna . jar " / > 
 < zipfileset src = " build / jna - test . jar " / > 
 < / jar > 
 + < copy todir = " shared " file = " build / jna . jar " / > 
 < copy todir = " shared " file = " build / native / jnidispatch . dll " / > 
 < copy todir = " shared " file = " build / native / testlib . dll " / > 
 < copy todir = " shared " file = " build / native / testlib2 . dll " / > 
 diff - - git a / native / Makefile b / native / Makefile 
 index 13d5b30 . . 87979aa 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 103 , 7 + 103 , 7 @ @ CDEFINES = - D _ WIN32 _ IE = 0x400 - D _ WIN32 _ WCE = 0x0420 - DNO _ JAWT - DNO _ NIO _ BUFFERS - DWINC 
 CFLAGS + = - Wno - unknown - pragmas 
 LD = arm - mingw32ce - gcc 
 LIBDIR = / opt / mingw32ce / lib / gcc / arm - mingw32ce / 4 . 4 . 0 
 - LDFLAGS = - o $ @ - shared - Wl , - Map $ { @ : $ ( LIBSFX ) = . map } 
 + LDFLAGS = - o $ @ - shared 
 LIBS = - lcoredll - lgcc - ltoolhelp 
 WINDRES = arm - mingw32ce - windres 
 EXTRAOBJS = $ ( RSRC ) 
 diff - - git a / native / libffi / src / arm / ffi . c b / native / libffi / src / arm / ffi . c 
 index 885a9cb . . 8b19313 100644 
 - - - a / native / libffi / src / arm / ffi . c 
 + + + b / native / libffi / src / arm / ffi . c 
 @ @ - 600 , 6 + 600 , 11 @ @ ffi _ prep _ closure _ loc ( ffi _ closure * closure , 
 closure - > user _ data = user _ data ; 
 closure - > fun = fun ; 
 
 + # ifdef _ WIN32 _ WCE 
 + / * This is important to allow calling the trampoline safely * / 
 + FlushInstructionCache ( GetCurrentProcess ( ) , 0 , 0 ) ; 
 + # endif 
 + 
 return FFI _ OK ; 
 } 
 
 diff - - git a / native / testlib . c b / native / testlib . c 
 index b857f72 . . 13b6425 100644 
 - - - a / native / testlib . c 
 + + + b / native / testlib . c 
 @ @ - 389 , 9 + 389 , 19 @ @ setPointerByReferenceNull ( void * * arg ) { 
 
 EXPORT int64 _ t 
 checkInt64ArgumentAlignment ( int32 _ t i , int64 _ t j , int32 _ t i2 , int64 _ t j2 ) { 
 - if ( i ! = 0x10101010 | | j ! = LONG ( 0x1111111111111111 ) 
 - | | i2 ! = 0x01010101 | | j2 ! = LONG ( 0x2222222222222222 ) ) 
 + 
 + if ( i ! = 0x10101010 ) { 
 return - 1 ; 
 + } 
 + if ( j ! = LONG ( 0x1111111111111111 ) ) { 
 + return - 2 ; 
 + } 
 + if ( i2 ! = 0x01010101 ) { 
 + return - 3 ; 
 + } 
 + if ( j2 ! = LONG ( 0x2222222222222222 ) ) { 
 + return - 4 ; 
 + } 
 
 return i + j + i2 + j2 ; 
 } 
 @ @ - 400 , 8 + 410 , 14 @ @ EXPORT double 
 checkDoubleArgumentAlignment ( float f , double d , float f2 , double d2 ) { 
 / / float : 1 = 3f800000 2 = 40000000 3 = 40400000 4 = 40800000 
 / / double : 1 = 3ff00 . . . 2 = 40000 . . . 3 = 40080 . . . 4 = 40100 . . . 
 - if ( f ! = 1 | | d ! = 2 | | f2 ! = 3 | | d2 ! = 4 ) 
 - return - 1 ; 
 + wchar _ t wbuf [ 1024 ] ; 
 + wsprintf ( wbuf , L " double align : % p % p % p % p \ n " , & f , & d , & f2 , & d2 ) ; 
 + OutputDebugString ( wbuf ) ; 
 + 
 + if ( f ! = 1 ) return - 1 ; 
 + if ( d ! = 2 ) return - 2 ; 
 + if ( f2 ! = 3 ) return - 3 ; 
 + if ( d2 ! = 4 ) return - 4 ; 
 
 return f + d + f2 + d2 ; 
 } 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index b18a64e . . 9f4caf9 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 676 , 7 + 676 , 7 @ @ public final class Native { 
 nativeLibraryPath = path ; 
 return ; 
 } catch ( UnsatisfiedLinkError ex ) { 
 - ex . printStackTrace ( ) ; 
 + System . err . println ( " File found at " + file + " but not loadable : " + ex . getMessage ( ) ) ; 
 } 
 } 
 if ( Platform . isMac ( ) ) { 
 @ @ - 695 , 6 + 695 , 7 @ @ public final class Native { 
 nativeLibraryPath = path ; 
 return ; 
 } catch ( UnsatisfiedLinkError ex ) { 
 + System . err . println ( " File found at " + path + " but not loadable : " + ex . getMessage ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / test / com / sun / jna / ArgumentsMarshalTest . java b / test / com / sun / jna / ArgumentsMarshalTest . java 
 index d7a2140 . . a25cdcd 100644 
 - - - a / test / com / sun / jna / ArgumentsMarshalTest . java 
 + + + b / test / com / sun / jna / ArgumentsMarshalTest . java 
 @ @ - 120 , 7 + 120 , 6 @ @ public class ArgumentsMarshalTest extends TestCase { 
 
 TestLibrary lib ; 
 protected void setUp ( ) { 
 - System . out . println ( " test : " + getName ( ) ) ; 
 lib = ( TestLibrary ) Native . loadLibrary ( " testlib " , TestLibrary . class ) ; 
 } 
 
 @ @ - 287 , 15 + 286 , 16 @ @ public class ArgumentsMarshalTest extends TestCase { 
 assertEquals ( " Expect string magic " , MAGIC , lib . returnStringArgument ( MAGIC ) . toString ( ) ) ; 
 } 
 
 - / / wce fail 
 - public void XFAIL _ WCE _ testInt64ArgumentAlignment ( ) { 
 + / / wce fail ; 2nd 64 - bit argument is received incorrectly 
 + public void testInt64ArgumentAlignment ( ) { 
 long value = lib . checkInt64ArgumentAlignment ( 0x10101010 , 0x1111111111111111L , 
 0x01010101 , 0x2222222222222222L ) ; 
 assertEquals ( " Improper handling of interspersed int32 / int64 " , 
 0x3333333344444444L , value ) ; 
 } 
 
 - public void XFAIL _ WCE _ testDoubleArgumentAlignment ( ) { 
 + / / wce fail ; 2nd double argument is received incorrectly 
 + public void testDoubleArgumentAlignment ( ) { 
 double value = lib . checkDoubleArgumentAlignment ( 1f , 2d , 3f , 4d ) ; 
 assertEquals ( " Improper handling of interspersed float / double " , 
 10d , value , 0 ) ; 
 diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index 9dc6fb7 . . ac6022b 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 155 , 7 + 155 , 6 @ @ public class CallbacksTest extends TestCase { 
 
 TestLibrary lib ; 
 protected void setUp ( ) { 
 - System . out . println ( " test : " + getName ( ) ) ; 
 lib = ( TestLibrary ) Native . loadLibrary ( " testlib " , TestLibrary . class ) ; 
 } 
 
 diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java 
 index cd529f3 . . 98aa45d 100644 
 - - - a / test / com / sun / jna / JNAUnloadTest . java 
 + + + b / test / com / sun / jna / JNAUnloadTest . java 
 @ @ - 30 , 18 + 30 , 18 @ @ public class JNAUnloadTest extends TestCase { 
 private static class TestLoader extends URLClassLoader { 
 public TestLoader ( boolean fromJar ) throws MalformedURLException { 
 super ( new URL [ ] { 
 - new File ( BUILDDIR + ( fromJar ? " / jna . jar " : " / classes " ) ) . toURI ( ) . toURL ( ) , 
 + Platform . isWindowsCE ( ) 
 + ? new File ( " / Storage Card / " + ( fromJar ? " jna . jar " : " test . jar " ) ) . toURI ( ) . toURL ( ) 
 + : new File ( BUILDDIR + ( fromJar ? " / jna . jar " : " / classes " ) ) . toURI ( ) . toURL ( ) , 
 } , null ) ; 
 } 
 } 
 
 - / / wce support this ? do we have a tmpdir ? 
 - public void XFAIL _ WCE _ testLoadFromJar ( ) throws Exception { 
 + public void testLoadFromJar ( ) throws Exception { 
 Class . forName ( " com . sun . jna . Native " , true , new TestLoader ( true ) ) ; 
 } 
 
 - / / wce support this ? 
 - public void XFAIL _ WCE _ testAvoidJarUnpacking ( ) throws Exception { 
 + public void testAvoidJarUnpacking ( ) throws Exception { 
 System . setProperty ( " jna . nounpack " , " true " ) ; 
 ClassLoader loader = new TestLoader ( true ) ; 
 try { 
 @ @ - 58 , 9 + 58 , 8 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 
 / / Fails under clover 
 - / / wce support this ? 
 - public void XFAIL _ WCE _ testUnloadFromJar ( ) throws Exception { 
 - File jar = new File ( BUILDDIR + " / jna . jar " ) ; 
 + public void testUnloadFromJar ( ) throws Exception { 
 + File jar = new File ( ( Platform . isWindowsCE ( ) ? " / Storage Card " : BUILDDIR ) + " / jna . jar " ) ; 
 if ( ! jar . exists ( ) ) { 
 throw new Error ( " Expected JNA jar file at " + jar + " is missing " ) ; 
 } 
 @ @ - 118 , 8 + 117 , 7 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 
 / / Fails under clover and OpenJDK ( linux / ppc ) 
 - / / wce class not found 
 - public void XFAIL _ WCE _ testUnload ( ) throws Exception { 
 + public void testUnload ( ) throws Exception { 
 ClassLoader loader = new TestLoader ( false ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 assertEquals ( " Wrong class loader " , loader , cls . getClassLoader ( ) ) ; 
 diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java 
 index 3ee4da4 . . 8453c3b 100644 
 - - - a / test / com / sun / jna / NativeTest . java 
 + + + b / test / com / sun / jna / NativeTest . java 
 @ @ - 324 , 7 + 324 , 7 @ @ public class NativeTest extends TestCase { 
 
 public static void main ( String [ ] args ) { 
 if ( args . length = = 0 ) { 
 - args = new String [ ] { " com . sun . jna . NativeTest " } ; 
 + junit . textui . TestRunner . run ( NativeTest . class ) ; 
 } 
 else { 
 if ( args . length = = 1 & & " all " . equals ( args [ 0 ] ) ) { 
 @ @ - 361 , 12 + 361 , 11 @ @ public class NativeTest extends TestCase { 
 try { 
 junit . textui . TestRunner . run ( Class . forName ( args [ i ] ) ) ; 
 } 
 - catch ( Throwable t ) { 
 - System . err . println ( " Error in test : " ) ; 
 - t . printStackTrace ( ) ; 
 + catch ( ClassNotFoundException e ) { 
 + System . err . println ( " No such class : " + args [ i ] ) ; 
 } 
 } 
 + try { Thread . sleep ( 300000 ) ; } catch ( Exception e ) { } 
 } 
 - try { Thread . sleep ( 300000 ) ; } catch ( Exception e ) { } 
 } 
 } 
 diff - - git a / test / com / sun / jna / ReturnTypesTest . java b / test / com / sun / jna / ReturnTypesTest . java 
 index c772657 . . 4354592 100644 
 - - - a / test / com / sun / jna / ReturnTypesTest . java 
 + + + b / test / com / sun / jna / ReturnTypesTest . java 
 @ @ - 90 , 7 + 90 , 6 @ @ public class ReturnTypesTest extends TestCase { 
 
 TestLibrary lib ; 
 protected void setUp ( ) { 
 - System . out . println ( " test : " + getName ( ) ) ; 
 lib = ( TestLibrary ) Native . loadLibrary ( " testlib " , TestLibrary . class ) ; 
 } 

