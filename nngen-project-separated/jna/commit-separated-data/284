BLEU SCORE: 0.027611988917697356

TEST MSG: add tests for type - mapping of enums
GENERATED MSG: improved testcase

TEST DIFF (one line): diff - - git a / test / com / sun / jna / DirectTypeMapperTest . java b / test / com / sun / jna / DirectTypeMapperTest . java <nl> index cd79f9e . . 3ec62c1 100644 <nl> - - - a / test / com / sun / jna / DirectTypeMapperTest . java <nl> + + + b / test / com / sun / jna / DirectTypeMapperTest . java <nl> @ @ - 90 , 7 + 90 , 6 @ @ public class DirectTypeMapperTest extends TestCase { <nl> Native . register ( NativeLibrary . getInstance ( " testlib " , options ) ) ; <nl> } <nl> } <nl> - <nl> public void testBooleanToIntArgumentConversion ( ) { <nl> DirectTestLibraryBoolean lib = new DirectTestLibraryBoolean ( ) ; <nl> assertEquals ( " Failed to convert Boolean argument to Int " , <nl> @ @ - 188 , 6 + 187 , 45 @ @ public class DirectTypeMapperTest extends TestCase { <nl> assertEquals ( " Failed to convert int * return to java . awt . Point " , 1234 , p . x ) ; <nl> assertEquals ( " Failed to convert int * return to java . awt . Point " , 5678 , p . y ) ; <nl> } <nl> + public static enum Enumeration { <nl> + STATUS _ 0 ( 0 ) , STATUS _ 1 ( 1 ) , STATUS _ ERROR ( - 1 ) ; <nl> + private final int code ; <nl> + Enumeration ( int code ) { this . code = code ; } <nl> + public int getCode ( ) { return code ; } <nl> + public static Enumeration fromCode ( int code ) { <nl> + switch ( code ) { <nl> + case 0 : return STATUS _ 0 ; <nl> + case 1 : return STATUS _ 1 ; <nl> + default : return STATUS _ ERROR ; <nl> + } <nl> + } <nl> + } <nl> + public static class DirectTypeMappedEnumerationTestLibrary { <nl> + public native Enumeration returnInt32Argument ( Enumeration e ) ; <nl> + static { <nl> + DefaultTypeMapper mapper = new DefaultTypeMapper ( ) ; <nl> + mapper . addTypeConverter ( Enumeration . class , new TypeConverter ( ) { <nl> + public Object toNative ( Object arg , ToNativeContext ctx ) { <nl> + return new Integer ( ( ( Enumeration ) arg ) . getCode ( ) ) ; <nl> + } <nl> + public Object fromNative ( Object value , FromNativeContext context ) { <nl> + return Enumeration . fromCode ( ( ( Integer ) value ) . intValue ( ) ) ; <nl> + } <nl> + public Class nativeType ( ) { <nl> + return Integer . class ; <nl> + } <nl> + } ) ; <nl> + Map options = new HashMap ( ) ; <nl> + options . put ( Library . OPTION _ TYPE _ MAPPER , mapper ) ; <nl> + <nl> + Native . register ( NativeLibrary . getInstance ( " testlib " , options ) ) ; <nl> + } <nl> + } <nl> + public void testEnumerationConversion ( ) { <nl> + DirectTypeMappedEnumerationTestLibrary lib = new DirectTypeMappedEnumerationTestLibrary ( ) ; <nl> + Enumeration e = lib . returnInt32Argument ( Enumeration . STATUS _ 1 ) ; <nl> + assertEquals ( " Failed to convert enumeration " , Enumeration . STATUS _ 1 , e ) ; <nl> + } <nl> <nl> public static void main ( String [ ] args ) { <nl> junit . textui . TestRunner . run ( DirectTypeMapperTest . class ) ; <nl> diff - - git a / test / com / sun / jna / TypeMapperTest . java b / test / com / sun / jna / TypeMapperTest . java <nl> index caa1af3 . . 7a7d190 100644 <nl> - - - a / test / com / sun / jna / TypeMapperTest . java <nl> + + + b / test / com / sun / jna / TypeMapperTest . java <nl> @ @ - 173 , 7 + 173 , 44 @ @ public class TypeMapperTest extends TestCase { <nl> s . read ( ) ; <nl> assertFalse ( " Wrong value read " , s . data ) ; <nl> } <nl> - <nl> + <nl> + public static enum Enumeration { <nl> + STATUS _ 0 ( 0 ) , STATUS _ 1 ( 1 ) , STATUS _ ERROR ( - 1 ) ; <nl> + private final int code ; <nl> + Enumeration ( int code ) { this . code = code ; } <nl> + public int getCode ( ) { return code ; } <nl> + public static Enumeration fromCode ( int code ) { <nl> + switch ( code ) { <nl> + case 0 : return STATUS _ 0 ; <nl> + case 1 : return STATUS _ 1 ; <nl> + default : return STATUS _ ERROR ; <nl> + } <nl> + } <nl> + } <nl> + public static interface EnumerationTestLibrary extends Library { <nl> + Enumeration returnInt32Argument ( Enumeration arg ) ; <nl> + } <nl> + public void testEnumConversion ( ) throws Exception { <nl> + DefaultTypeMapper mapper = new DefaultTypeMapper ( ) ; <nl> + TypeConverter converter = new TypeConverter ( ) { <nl> + public Object toNative ( Object value , ToNativeContext ctx ) { <nl> + return new Integer ( ( ( Enumeration ) value ) . getCode ( ) ) ; <nl> + } <nl> + public Object fromNative ( Object value , FromNativeContext context ) { <nl> + return Enumeration . fromCode ( ( ( Integer ) value ) . intValue ( ) ) ; <nl> + } <nl> + public Class nativeType ( ) { <nl> + return Integer . class ; <nl> + } <nl> + } ; <nl> + mapper . addTypeConverter ( Enumeration . class , converter ) ; <nl> + Map options = new HashMap ( ) ; <nl> + options . put ( Library . OPTION _ TYPE _ MAPPER , mapper ) ; <nl> + EnumerationTestLibrary lib = ( EnumerationTestLibrary ) <nl> + Native . loadLibrary ( " testlib " , EnumerationTestLibrary . class , options ) ; <nl> + assertEquals ( " Enumeration improperly converted " , Enumeration . STATUS _ 1 , lib . returnInt32Argument ( Enumeration . STATUS _ 1 ) ) ; <nl> + } <nl> + <nl> public static void main ( String [ ] args ) { <nl> junit . textui . TestRunner . run ( TypeMapperTest . class ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / com / sun / jna / DirectTypeMapperTest . java b / test / com / sun / jna / DirectTypeMapperTest . java 
 index cd79f9e . . 3ec62c1 100644 
 - - - a / test / com / sun / jna / DirectTypeMapperTest . java 
 + + + b / test / com / sun / jna / DirectTypeMapperTest . java 
 @ @ - 90 , 7 + 90 , 6 @ @ public class DirectTypeMapperTest extends TestCase { 
 Native . register ( NativeLibrary . getInstance ( " testlib " , options ) ) ; 
 } 
 } 
 - 
 public void testBooleanToIntArgumentConversion ( ) { 
 DirectTestLibraryBoolean lib = new DirectTestLibraryBoolean ( ) ; 
 assertEquals ( " Failed to convert Boolean argument to Int " , 
 @ @ - 188 , 6 + 187 , 45 @ @ public class DirectTypeMapperTest extends TestCase { 
 assertEquals ( " Failed to convert int * return to java . awt . Point " , 1234 , p . x ) ; 
 assertEquals ( " Failed to convert int * return to java . awt . Point " , 5678 , p . y ) ; 
 } 
 + public static enum Enumeration { 
 + STATUS _ 0 ( 0 ) , STATUS _ 1 ( 1 ) , STATUS _ ERROR ( - 1 ) ; 
 + private final int code ; 
 + Enumeration ( int code ) { this . code = code ; } 
 + public int getCode ( ) { return code ; } 
 + public static Enumeration fromCode ( int code ) { 
 + switch ( code ) { 
 + case 0 : return STATUS _ 0 ; 
 + case 1 : return STATUS _ 1 ; 
 + default : return STATUS _ ERROR ; 
 + } 
 + } 
 + } 
 + public static class DirectTypeMappedEnumerationTestLibrary { 
 + public native Enumeration returnInt32Argument ( Enumeration e ) ; 
 + static { 
 + DefaultTypeMapper mapper = new DefaultTypeMapper ( ) ; 
 + mapper . addTypeConverter ( Enumeration . class , new TypeConverter ( ) { 
 + public Object toNative ( Object arg , ToNativeContext ctx ) { 
 + return new Integer ( ( ( Enumeration ) arg ) . getCode ( ) ) ; 
 + } 
 + public Object fromNative ( Object value , FromNativeContext context ) { 
 + return Enumeration . fromCode ( ( ( Integer ) value ) . intValue ( ) ) ; 
 + } 
 + public Class nativeType ( ) { 
 + return Integer . class ; 
 + } 
 + } ) ; 
 + Map options = new HashMap ( ) ; 
 + options . put ( Library . OPTION _ TYPE _ MAPPER , mapper ) ; 
 + 
 + Native . register ( NativeLibrary . getInstance ( " testlib " , options ) ) ; 
 + } 
 + } 
 + public void testEnumerationConversion ( ) { 
 + DirectTypeMappedEnumerationTestLibrary lib = new DirectTypeMappedEnumerationTestLibrary ( ) ; 
 + Enumeration e = lib . returnInt32Argument ( Enumeration . STATUS _ 1 ) ; 
 + assertEquals ( " Failed to convert enumeration " , Enumeration . STATUS _ 1 , e ) ; 
 + } 
 
 public static void main ( String [ ] args ) { 
 junit . textui . TestRunner . run ( DirectTypeMapperTest . class ) ; 
 diff - - git a / test / com / sun / jna / TypeMapperTest . java b / test / com / sun / jna / TypeMapperTest . java 
 index caa1af3 . . 7a7d190 100644 
 - - - a / test / com / sun / jna / TypeMapperTest . java 
 + + + b / test / com / sun / jna / TypeMapperTest . java 
 @ @ - 173 , 7 + 173 , 44 @ @ public class TypeMapperTest extends TestCase { 
 s . read ( ) ; 
 assertFalse ( " Wrong value read " , s . data ) ; 
 } 
 - 
 + 
 + public static enum Enumeration { 
 + STATUS _ 0 ( 0 ) , STATUS _ 1 ( 1 ) , STATUS _ ERROR ( - 1 ) ; 
 + private final int code ; 
 + Enumeration ( int code ) { this . code = code ; } 
 + public int getCode ( ) { return code ; } 
 + public static Enumeration fromCode ( int code ) { 
 + switch ( code ) { 
 + case 0 : return STATUS _ 0 ; 
 + case 1 : return STATUS _ 1 ; 
 + default : return STATUS _ ERROR ; 
 + } 
 + } 
 + } 
 + public static interface EnumerationTestLibrary extends Library { 
 + Enumeration returnInt32Argument ( Enumeration arg ) ; 
 + } 
 + public void testEnumConversion ( ) throws Exception { 
 + DefaultTypeMapper mapper = new DefaultTypeMapper ( ) ; 
 + TypeConverter converter = new TypeConverter ( ) { 
 + public Object toNative ( Object value , ToNativeContext ctx ) { 
 + return new Integer ( ( ( Enumeration ) value ) . getCode ( ) ) ; 
 + } 
 + public Object fromNative ( Object value , FromNativeContext context ) { 
 + return Enumeration . fromCode ( ( ( Integer ) value ) . intValue ( ) ) ; 
 + } 
 + public Class nativeType ( ) { 
 + return Integer . class ; 
 + } 
 + } ; 
 + mapper . addTypeConverter ( Enumeration . class , converter ) ; 
 + Map options = new HashMap ( ) ; 
 + options . put ( Library . OPTION _ TYPE _ MAPPER , mapper ) ; 
 + EnumerationTestLibrary lib = ( EnumerationTestLibrary ) 
 + Native . loadLibrary ( " testlib " , EnumerationTestLibrary . class , options ) ; 
 + assertEquals ( " Enumeration improperly converted " , Enumeration . STATUS _ 1 , lib . returnInt32Argument ( Enumeration . STATUS _ 1 ) ) ; 
 + } 
 + 
 public static void main ( String [ ] args ) { 
 junit . textui . TestRunner . run ( TypeMapperTest . class ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
