BLEU SCORE: 0.027611988917697356

TEST MSG: Compilation of unittests fails in debian squeeze chroot
GENERATED MSG: add web - start tests and test support

TEST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 00fe2b0 . . b00f350 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 215 , 6 + 215 , 7 @ @ <nl> includeantruntime = " false " <nl> source = " 1 . 6 " <nl> target = " 1 . 6 " <nl> + encoding = " UTF - 8 " <nl> > <nl> < src path = " src " / > <nl> < src path = " ant - elfanalyser - src " / > <nl> @ @ - 363 , 7 + 364 , 9 @ @ <nl> target = " $ { compatibility } " <nl> destdir = " $ { classes } " <nl> includeantruntime = " false " <nl> - deprecation = " on " debug = " $ { debug } " > <nl> + deprecation = " on " <nl> + debug = " $ { debug } " <nl> + encoding = " UTF - 8 " > <nl> < src refid = " src . path " / > <nl> < / javac > <nl> < / target > <nl> @ @ - 960 , 7 + 963 , 10 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> destdir = " $ { test . classes } " <nl> includeantruntime = " false " <nl> includes = " * * / StructureFieldOrderInspector . java " <nl> - deprecation = " on " debug = " $ { debug } " > <nl> + deprecation = " on " <nl> + debug = " $ { debug } " <nl> + encoding = " UTF - 8 " <nl> + > <nl> < src path = " $ { test . src } " / > <nl> < / javac > <nl> < / target > <nl> @ @ - 973 , 7 + 979 , 10 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> destdir = " $ { test . classes } " <nl> includeantruntime = " false " <nl> excludes = " $ { tests . exclude - patterns } " <nl> - deprecation = " on " debug = " $ { debug } " > <nl> + deprecation = " on " <nl> + debug = " $ { debug } " <nl> + encoding = " UTF - 8 " <nl> + > <nl> < src path = " $ { test . src } " / > <nl> < exclude name = " $ { tests . exclude } " / > <nl> < / javac >
NEAREST DIFF (one line): diff - - git a / jnalib / build . xml b / jnalib / build . xml <nl> index 877ce36 . . 55257ea 100644 <nl> - - - a / jnalib / build . xml <nl> + + + b / jnalib / build . xml <nl> @ @ - 81 , 6 + 81 , 7 @ @ <nl> < condition property = " vm . arch " value = " - d64 " else = " " > <nl> < or > <nl> < equals arg1 = " $ { sun . arch . data . model } " arg2 = " 64 " trim = " true " / > <nl> + < equals arg1 = " $ { com . ibm . vm . bitmode } " arg2 = " 64 " trim = " true " / > <nl> < os arch = " x86 _ 64 " / > <nl> < os arch = " ppc64 " / > <nl> < os arch = " sparcv9 " / > <nl> diff - - git a / jnalib / native / dispatch . c b / jnalib / native / dispatch . c <nl> index ee885f1 . . 309a090 100644 <nl> - - - a / jnalib / native / dispatch . c <nl> + + + b / jnalib / native / dispatch . c <nl> @ @ - 27 , 11 + 27 , 6 @ @ <nl> # endif <nl> # define WIN32 _ LEAN _ AND _ MEAN <nl> # include < windows . h > <nl> - # ifdef _ MSC _ VER <nl> - # define alloca _ alloca <nl> - # else <nl> - # include < malloc . h > <nl> - # endif <nl> # define LIBNAMETYPE wchar _ t * <nl> # define LIBNAME2CSTR ( ENV , JSTR ) newWideCString ( ENV , JSTR ) <nl> / * See http : / / msdn . microsoft . com / en - us / library / ms682586 ( VS . 85 ) . aspx : <nl> @ @ - 272 , 7 + 267 , 7 @ @ dispatch ( JNIEnv * env , jobject self , jint flags , jobjectArray arr , <nl> jobject array ; <nl> void * elems ; <nl> } * array _ elements ; <nl> - int array _ count = 0 ; <nl> + volatile int array _ count = 0 ; <nl> ffi _ cif cif ; <nl> ffi _ type * * ffi _ types ; <nl> void * * ffi _ values ; <nl> @ @ - 984 , 8 + 979 , 8 @ @ JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Pointer _ _ 1indexOf _ _ JB <nl> ( JNIEnv * env , jclass cls , jlong addr , jbyte value ) <nl> { <nl> jbyte * peer = ( jbyte * ) L2A ( addr ) ; <nl> - jlong i = 0 ; <nl> - jlong result = - 1L ; <nl> + volatile jlong i = 0 ; <nl> + volatile jlong result = - 1L ; <nl> PSTART ( ) ; <nl> while ( i > = 0 & & result = = - 1L ) { <nl> if ( peer [ i ] = = value ) <nl> @ @ - 1488 , 7 + 1483 , 7 @ @ newJavaWString ( JNIEnv * env , const wchar _ t * ptr ) { <nl> jstring <nl> newJavaString ( JNIEnv * env , const char * ptr , jboolean wide ) <nl> { <nl> - jstring result = 0 ; <nl> + volatile jstring result = 0 ; <nl> PSTART ( ) ; <nl> <nl> if ( ptr ) { <nl> diff - - git a / jnalib / native / dispatch . h b / jnalib / native / dispatch . h <nl> index e9b3fdc . . 19bfd64 100644 <nl> - - - a / jnalib / native / dispatch . h <nl> + + + b / jnalib / native / dispatch . h <nl> @ @ - 19 , 6 + 19 , 13 @ @ <nl> # ifdef sun <nl> # include < alloca . h > <nl> # endif <nl> + # ifdef _ WIN32 <nl> + # ifdef _ MSC _ VER <nl> + # define alloca _ alloca <nl> + # else <nl> + # include < malloc . h > <nl> + # endif / * _ MSC _ VER * / <nl> + # endif / * _ WIN32 * / <nl> <nl> # ifdef _ _ cplusplus <nl> extern " C " { <nl> diff - - git a / jnalib / native / protect . h b / jnalib / native / protect . h <nl> index 7dbd441 . . 3a5d38b 100644 <nl> - - - a / jnalib / native / protect . h <nl> + + + b / jnalib / native / protect . h <nl> @ @ - 77 , 11 + 77 , 7 @ @ _ exc _ handler ( struct _ EXCEPTION _ RECORD * exception _ record , <nl> # define PROTECTED _ END ( ONERR ) } _ _ except ( ( PROTECT ) ? EXCEPTION _ EXECUTE _ HANDLER : EXCEPTION _ CONTINUE _ SEARCH ) { ONERR ; } <nl> # else <nl> # ifdef _ WIN64 <nl> - / / FIXME : mingw64 is untested <nl> - # define SEH _ TRY ( ER ) \ <nl> - _ _ asm _ _ ( " pushq % 0 ; pushq % % gs : 0 ; movq % % rsp , % % gs : 0 ; " : : " g " ( & ( ER ) ) ) <nl> - # define SEH _ CATCH ( ER ) \ <nl> - _ _ asm _ _ ( " movq ( % % rsp ) , % % rax ; movq % % rax , % % gs : 0 ; addq $ 16 , % % rsp " : : : " % rax " ) <nl> + # error " GCC does not implement SEh " <nl> # else <nl> # define SEH _ TRY ( ER ) \ <nl> _ _ asm _ _ ( " movl % % fs : 0 , % 0 " : " = r " ( ( ER ) . ex _ reg . prev ) ) ; \ <nl> @ @ - 115 , 6 + 111 , 7 @ @ _ exc _ handler ( struct _ EXCEPTION _ RECORD * exception _ record , <nl> # endif / * ! _ MSC _ VER * / <nl> <nl> # else / / _ WIN32 <nl> + <nl> / / Most other platforms support signals <nl> / / Catch both SIGSEGV and SIGBUS <nl> # include < signal . h > <nl> diff - - git a / jnalib / test / com / sun / jna / RawTest . java b / jnalib / test / com / sun / jna / RawTest . java <nl> index 6991931 . . dbcef9f 100644 <nl> - - - a / jnalib / test / com / sun / jna / RawTest . java <nl> + + + b / jnalib / test / com / sun / jna / RawTest . java <nl> @ @ - 82 , 13 + 82 , 19 @ @ public class RawTest extends TestCase { <nl> public static native int strlen ( Pointer p ) ; <nl> public static native int strlen ( byte [ ] b ) ; <nl> public static native int strlen ( Buffer b ) ; <nl> - public static native float strtof ( String s , PointerByReference pref ) throws LastErrorException ; <nl> <nl> static { <nl> Native . register ( Platform . isWindows ( ) ? " msvcrt " : " c " ) ; <nl> } <nl> } <nl> <nl> + static class LastErrorLibrary { <nl> + public static native float strtof ( String s , PointerByReference pref ) throws LastErrorException ; <nl> + static { <nl> + Native . register ( Platform . isWindows ( ) ? " msvcrt " : " c " ) ; <nl> + } <nl> + } <nl> + <nl> static interface CInterface extends Library { <nl> Pointer memset ( Pointer p , int v , int len ) ; <nl> int strlen ( String s ) ; <nl> @ @ - 172 , 16 + 178 , 21 @ @ public class RawTest extends TestCase { <nl> } <nl> <nl> public void testThrowLastError ( ) throws LastErrorException { <nl> - CLibrary lib = new CLibrary ( ) ; <nl> - float VALUE = 1 . 1f ; <nl> - assertEquals ( " Wrong value returned " , VALUE , lib . strtof ( " 1 . 1 " , null ) ) ; <nl> - try { <nl> - String HUGE _ VALF = " 1e10000 " ; <nl> - lib . strtof ( HUGE _ VALF , null ) ; <nl> - fail ( " Method declared with LastErrorException should throw on error " ) ; <nl> - } <nl> - catch ( LastErrorException e ) { <nl> - assertTrue ( " LastError code should be non - zero " , e . errorCode ! = 0 ) ; <nl> + if ( Platform . isWindows ( ) ) { <nl> + fail ( " Test not implemented " ) ; <nl> + } <nl> + else { <nl> + LastErrorLibrary lib = new LastErrorLibrary ( ) ; <nl> + float VALUE = 1 . 1f ; <nl> + assertEquals ( " Wrong value returned " , VALUE , lib . strtof ( " 1 . 1 " , null ) ) ; <nl> + try { <nl> + String HUGE _ VALF = " 1e10000 " ; <nl> + lib . strtof ( HUGE _ VALF , null ) ; <nl> + fail ( " Method declared with LastErrorException should throw on error " ) ; <nl> + } <nl> + catch ( LastErrorException e ) { <nl> + assertTrue ( " LastError code should be non - zero " , e . errorCode ! = 0 ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / jnalib / test / com / sun / jna / WebStartTest . java b / jnalib / test / com / sun / jna / WebStartTest . java <nl> index 29a54ea . . f575b75 100644 <nl> - - - a / jnalib / test / com / sun / jna / WebStartTest . java <nl> + + + b / jnalib / test / com / sun / jna / WebStartTest . java <nl> @ @ - 62 , 9 + 62 , 9 @ @ public class WebStartTest extends TestCase { <nl> / / but will cause unsigned jars to fail ( irrespective of policy ) <nl> + " < security > < all - permissions / > < / security > \ n " <nl> + " < resources > \ n " <nl> - + " < j2se version = ' 1 . 3 + ' href = ' http : / / java . sun . com / products / autodl / j2se ' / > \ n " <nl> - + " < jar href = ' jna . jar ' / > \ n " <nl> + + " < j2se version = ' 1 . 4 + ' / > \ n " <nl> + " < jar href = ' jna - test . jar ' / > \ n " <nl> + + " < jar href = ' jna . jar ' / > \ n " <nl> + " < jar href = ' junit . jar ' / > \ n " <nl> + " < nativelib href = ' jnidispatch . jar ' / > \ n " <nl> + " < / resources > \ n " <nl> @ @ - 221 , 11 + 221 , 14 @ @ public class WebStartTest extends TestCase { <nl> <nl> private File findDeploymentProperties ( ) { <nl> String path = System . getProperty ( " user . home " ) ; <nl> - File deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; <nl> - if ( ! deployment . exists ( ) ) { <nl> + File deployment ; <nl> + if ( Platform . isWindows ( ) ) { <nl> + deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; <nl> + } <nl> + else if ( Platform . isMac ( ) ) { <nl> deployment = new File ( path + " / Library / Caches / Java " ) ; <nl> } <nl> - if ( ! deployment . exists ( ) ) { <nl> + else { <nl> deployment = new File ( path + " / . java / deployment " ) ; <nl> } <nl> if ( ! deployment . exists ( ) ) { <nl> @ @ - 239 , 6 + 242 , 9 @ @ public class WebStartTest extends TestCase { <nl> private static final String CERTS _ KEY = <nl> " deployment . user . security . trusted . certs " ; <nl> public void runBare ( ) throws Throwable { <nl> + / / FIXME not yet cleanly running on windows , not tested on linux <nl> + if ( ! Platform . isMac ( ) ) return ; <nl> + <nl> if ( runningWebStart ( ) ) { <nl> super . runBare ( ) ; <nl> } <nl> @ @ - 254 , 7 + 260 , 7 @ @ public class WebStartTest extends TestCase { <nl> saved . load ( new FileInputStream ( dpfile ) ) ; <nl> Properties props = new Properties ( ) ; <nl> props . putAll ( saved ) ; <nl> - props . setProperty ( CERTS _ KEY , " jna . keystore " ) ; <nl> + props . setProperty ( CERTS _ KEY , new File ( " jna . keystore " ) . getAbsolutePath ( ) ) ; <nl> props . setProperty ( POLICY _ KEY , policy . getAbsolutePath ( ) ) ; <nl> props . store ( new FileOutputStream ( dpfile ) , " deployment . properties ( for testing ) " ) ; <nl> try {

TEST DIFF:
diff - - git a / build . xml b / build . xml 
 index 00fe2b0 . . b00f350 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 215 , 6 + 215 , 7 @ @ 
 includeantruntime = " false " 
 source = " 1 . 6 " 
 target = " 1 . 6 " 
 + encoding = " UTF - 8 " 
 > 
 < src path = " src " / > 
 < src path = " ant - elfanalyser - src " / > 
 @ @ - 363 , 7 + 364 , 9 @ @ 
 target = " $ { compatibility } " 
 destdir = " $ { classes } " 
 includeantruntime = " false " 
 - deprecation = " on " debug = " $ { debug } " > 
 + deprecation = " on " 
 + debug = " $ { debug } " 
 + encoding = " UTF - 8 " > 
 < src refid = " src . path " / > 
 < / javac > 
 < / target > 
 @ @ - 960 , 7 + 963 , 10 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 destdir = " $ { test . classes } " 
 includeantruntime = " false " 
 includes = " * * / StructureFieldOrderInspector . java " 
 - deprecation = " on " debug = " $ { debug } " > 
 + deprecation = " on " 
 + debug = " $ { debug } " 
 + encoding = " UTF - 8 " 
 + > 
 < src path = " $ { test . src } " / > 
 < / javac > 
 < / target > 
 @ @ - 973 , 7 + 979 , 10 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 destdir = " $ { test . classes } " 
 includeantruntime = " false " 
 excludes = " $ { tests . exclude - patterns } " 
 - deprecation = " on " debug = " $ { debug } " > 
 + deprecation = " on " 
 + debug = " $ { debug } " 
 + encoding = " UTF - 8 " 
 + > 
 < src path = " $ { test . src } " / > 
 < exclude name = " $ { tests . exclude } " / > 
 < / javac >

NEAREST DIFF:
diff - - git a / jnalib / build . xml b / jnalib / build . xml 
 index 877ce36 . . 55257ea 100644 
 - - - a / jnalib / build . xml 
 + + + b / jnalib / build . xml 
 @ @ - 81 , 6 + 81 , 7 @ @ 
 < condition property = " vm . arch " value = " - d64 " else = " " > 
 < or > 
 < equals arg1 = " $ { sun . arch . data . model } " arg2 = " 64 " trim = " true " / > 
 + < equals arg1 = " $ { com . ibm . vm . bitmode } " arg2 = " 64 " trim = " true " / > 
 < os arch = " x86 _ 64 " / > 
 < os arch = " ppc64 " / > 
 < os arch = " sparcv9 " / > 
 diff - - git a / jnalib / native / dispatch . c b / jnalib / native / dispatch . c 
 index ee885f1 . . 309a090 100644 
 - - - a / jnalib / native / dispatch . c 
 + + + b / jnalib / native / dispatch . c 
 @ @ - 27 , 11 + 27 , 6 @ @ 
 # endif 
 # define WIN32 _ LEAN _ AND _ MEAN 
 # include < windows . h > 
 - # ifdef _ MSC _ VER 
 - # define alloca _ alloca 
 - # else 
 - # include < malloc . h > 
 - # endif 
 # define LIBNAMETYPE wchar _ t * 
 # define LIBNAME2CSTR ( ENV , JSTR ) newWideCString ( ENV , JSTR ) 
 / * See http : / / msdn . microsoft . com / en - us / library / ms682586 ( VS . 85 ) . aspx : 
 @ @ - 272 , 7 + 267 , 7 @ @ dispatch ( JNIEnv * env , jobject self , jint flags , jobjectArray arr , 
 jobject array ; 
 void * elems ; 
 } * array _ elements ; 
 - int array _ count = 0 ; 
 + volatile int array _ count = 0 ; 
 ffi _ cif cif ; 
 ffi _ type * * ffi _ types ; 
 void * * ffi _ values ; 
 @ @ - 984 , 8 + 979 , 8 @ @ JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Pointer _ _ 1indexOf _ _ JB 
 ( JNIEnv * env , jclass cls , jlong addr , jbyte value ) 
 { 
 jbyte * peer = ( jbyte * ) L2A ( addr ) ; 
 - jlong i = 0 ; 
 - jlong result = - 1L ; 
 + volatile jlong i = 0 ; 
 + volatile jlong result = - 1L ; 
 PSTART ( ) ; 
 while ( i > = 0 & & result = = - 1L ) { 
 if ( peer [ i ] = = value ) 
 @ @ - 1488 , 7 + 1483 , 7 @ @ newJavaWString ( JNIEnv * env , const wchar _ t * ptr ) { 
 jstring 
 newJavaString ( JNIEnv * env , const char * ptr , jboolean wide ) 
 { 
 - jstring result = 0 ; 
 + volatile jstring result = 0 ; 
 PSTART ( ) ; 
 
 if ( ptr ) { 
 diff - - git a / jnalib / native / dispatch . h b / jnalib / native / dispatch . h 
 index e9b3fdc . . 19bfd64 100644 
 - - - a / jnalib / native / dispatch . h 
 + + + b / jnalib / native / dispatch . h 
 @ @ - 19 , 6 + 19 , 13 @ @ 
 # ifdef sun 
 # include < alloca . h > 
 # endif 
 + # ifdef _ WIN32 
 + # ifdef _ MSC _ VER 
 + # define alloca _ alloca 
 + # else 
 + # include < malloc . h > 
 + # endif / * _ MSC _ VER * / 
 + # endif / * _ WIN32 * / 
 
 # ifdef _ _ cplusplus 
 extern " C " { 
 diff - - git a / jnalib / native / protect . h b / jnalib / native / protect . h 
 index 7dbd441 . . 3a5d38b 100644 
 - - - a / jnalib / native / protect . h 
 + + + b / jnalib / native / protect . h 
 @ @ - 77 , 11 + 77 , 7 @ @ _ exc _ handler ( struct _ EXCEPTION _ RECORD * exception _ record , 
 # define PROTECTED _ END ( ONERR ) } _ _ except ( ( PROTECT ) ? EXCEPTION _ EXECUTE _ HANDLER : EXCEPTION _ CONTINUE _ SEARCH ) { ONERR ; } 
 # else 
 # ifdef _ WIN64 
 - / / FIXME : mingw64 is untested 
 - # define SEH _ TRY ( ER ) \ 
 - _ _ asm _ _ ( " pushq % 0 ; pushq % % gs : 0 ; movq % % rsp , % % gs : 0 ; " : : " g " ( & ( ER ) ) ) 
 - # define SEH _ CATCH ( ER ) \ 
 - _ _ asm _ _ ( " movq ( % % rsp ) , % % rax ; movq % % rax , % % gs : 0 ; addq $ 16 , % % rsp " : : : " % rax " ) 
 + # error " GCC does not implement SEh " 
 # else 
 # define SEH _ TRY ( ER ) \ 
 _ _ asm _ _ ( " movl % % fs : 0 , % 0 " : " = r " ( ( ER ) . ex _ reg . prev ) ) ; \ 
 @ @ - 115 , 6 + 111 , 7 @ @ _ exc _ handler ( struct _ EXCEPTION _ RECORD * exception _ record , 
 # endif / * ! _ MSC _ VER * / 
 
 # else / / _ WIN32 
 + 
 / / Most other platforms support signals 
 / / Catch both SIGSEGV and SIGBUS 
 # include < signal . h > 
 diff - - git a / jnalib / test / com / sun / jna / RawTest . java b / jnalib / test / com / sun / jna / RawTest . java 
 index 6991931 . . dbcef9f 100644 
 - - - a / jnalib / test / com / sun / jna / RawTest . java 
 + + + b / jnalib / test / com / sun / jna / RawTest . java 
 @ @ - 82 , 13 + 82 , 19 @ @ public class RawTest extends TestCase { 
 public static native int strlen ( Pointer p ) ; 
 public static native int strlen ( byte [ ] b ) ; 
 public static native int strlen ( Buffer b ) ; 
 - public static native float strtof ( String s , PointerByReference pref ) throws LastErrorException ; 
 
 static { 
 Native . register ( Platform . isWindows ( ) ? " msvcrt " : " c " ) ; 
 } 
 } 
 
 + static class LastErrorLibrary { 
 + public static native float strtof ( String s , PointerByReference pref ) throws LastErrorException ; 
 + static { 
 + Native . register ( Platform . isWindows ( ) ? " msvcrt " : " c " ) ; 
 + } 
 + } 
 + 
 static interface CInterface extends Library { 
 Pointer memset ( Pointer p , int v , int len ) ; 
 int strlen ( String s ) ; 
 @ @ - 172 , 16 + 178 , 21 @ @ public class RawTest extends TestCase { 
 } 
 
 public void testThrowLastError ( ) throws LastErrorException { 
 - CLibrary lib = new CLibrary ( ) ; 
 - float VALUE = 1 . 1f ; 
 - assertEquals ( " Wrong value returned " , VALUE , lib . strtof ( " 1 . 1 " , null ) ) ; 
 - try { 
 - String HUGE _ VALF = " 1e10000 " ; 
 - lib . strtof ( HUGE _ VALF , null ) ; 
 - fail ( " Method declared with LastErrorException should throw on error " ) ; 
 - } 
 - catch ( LastErrorException e ) { 
 - assertTrue ( " LastError code should be non - zero " , e . errorCode ! = 0 ) ; 
 + if ( Platform . isWindows ( ) ) { 
 + fail ( " Test not implemented " ) ; 
 + } 
 + else { 
 + LastErrorLibrary lib = new LastErrorLibrary ( ) ; 
 + float VALUE = 1 . 1f ; 
 + assertEquals ( " Wrong value returned " , VALUE , lib . strtof ( " 1 . 1 " , null ) ) ; 
 + try { 
 + String HUGE _ VALF = " 1e10000 " ; 
 + lib . strtof ( HUGE _ VALF , null ) ; 
 + fail ( " Method declared with LastErrorException should throw on error " ) ; 
 + } 
 + catch ( LastErrorException e ) { 
 + assertTrue ( " LastError code should be non - zero " , e . errorCode ! = 0 ) ; 
 + } 
 } 
 } 
 
 diff - - git a / jnalib / test / com / sun / jna / WebStartTest . java b / jnalib / test / com / sun / jna / WebStartTest . java 
 index 29a54ea . . f575b75 100644 
 - - - a / jnalib / test / com / sun / jna / WebStartTest . java 
 + + + b / jnalib / test / com / sun / jna / WebStartTest . java 
 @ @ - 62 , 9 + 62 , 9 @ @ public class WebStartTest extends TestCase { 
 / / but will cause unsigned jars to fail ( irrespective of policy ) 
 + " < security > < all - permissions / > < / security > \ n " 
 + " < resources > \ n " 
 - + " < j2se version = ' 1 . 3 + ' href = ' http : / / java . sun . com / products / autodl / j2se ' / > \ n " 
 - + " < jar href = ' jna . jar ' / > \ n " 
 + + " < j2se version = ' 1 . 4 + ' / > \ n " 
 + " < jar href = ' jna - test . jar ' / > \ n " 
 + + " < jar href = ' jna . jar ' / > \ n " 
 + " < jar href = ' junit . jar ' / > \ n " 
 + " < nativelib href = ' jnidispatch . jar ' / > \ n " 
 + " < / resources > \ n " 
 @ @ - 221 , 11 + 221 , 14 @ @ public class WebStartTest extends TestCase { 
 
 private File findDeploymentProperties ( ) { 
 String path = System . getProperty ( " user . home " ) ; 
 - File deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; 
 - if ( ! deployment . exists ( ) ) { 
 + File deployment ; 
 + if ( Platform . isWindows ( ) ) { 
 + deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; 
 + } 
 + else if ( Platform . isMac ( ) ) { 
 deployment = new File ( path + " / Library / Caches / Java " ) ; 
 } 
 - if ( ! deployment . exists ( ) ) { 
 + else { 
 deployment = new File ( path + " / . java / deployment " ) ; 
 } 
 if ( ! deployment . exists ( ) ) { 
 @ @ - 239 , 6 + 242 , 9 @ @ public class WebStartTest extends TestCase { 
 private static final String CERTS _ KEY = 
 " deployment . user . security . trusted . certs " ; 
 public void runBare ( ) throws Throwable { 
 + / / FIXME not yet cleanly running on windows , not tested on linux 
 + if ( ! Platform . isMac ( ) ) return ; 
 + 
 if ( runningWebStart ( ) ) { 
 super . runBare ( ) ; 
 } 
 @ @ - 254 , 7 + 260 , 7 @ @ public class WebStartTest extends TestCase { 
 saved . load ( new FileInputStream ( dpfile ) ) ; 
 Properties props = new Properties ( ) ; 
 props . putAll ( saved ) ; 
 - props . setProperty ( CERTS _ KEY , " jna . keystore " ) ; 
 + props . setProperty ( CERTS _ KEY , new File ( " jna . keystore " ) . getAbsolutePath ( ) ) ; 
 props . setProperty ( POLICY _ KEY , policy . getAbsolutePath ( ) ) ; 
 props . store ( new FileOutputStream ( dpfile ) , " deployment . properties ( for testing ) " ) ; 
 try {
