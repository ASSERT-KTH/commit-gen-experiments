BLEU SCORE: 0.05341087579952926

TEST MSG: clean up some function naming
GENERATED MSG: NativeTest passes

TEST DIFF (one line): diff - - git a / native / Makefile b / native / Makefile <nl> index c027283 . . aecfa04 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 367 , 6 + 367 , 8 @ @ $ ( LIBRARY ) : $ ( JNIDISPATCH _ OBJS ) $ ( FFI _ LIB ) <nl> $ ( TESTLIB ) : $ ( BUILD ) / testlib . o <nl> 	 $ ( LD ) $ ( LDFLAGS ) $ < $ ( LIBS ) <nl> <nl> + # These targets provide for different shared library loading methods <nl> + # without getting into native library load conflicts <nl> $ ( TESTLIB _ JAR ) $ ( TESTLIB _ PATH ) $ ( TESTLIB _ TRUNC ) : $ ( TESTLIB ) <nl> 	 @ cp $ < $ @ <nl> <nl> diff - - git a / native / callback . c b / native / callback . c <nl> index 87c605e . . 9812dc4 100644 <nl> - - - a / native / callback . c <nl> + + + b / native / callback . c <nl> @ @ - 538 , 7 + 538 , 7 @ @ static void make _ thread _ keys ( ) { <nl> <nl> / * * Store the requested detach state for the current thread . * / <nl> void <nl> - jnidispatch _ detach ( jboolean d ) { <nl> + JNA _ detach ( jboolean d ) { <nl> if ( ! TLS _ SET ( tls _ detach _ key , L2A ( ( jlong ) ( d ? THREAD _ DETACH : THREAD _ LEAVE _ ATTACHED ) ) ) ) { <nl> fprintf ( stderr , " JNA : unable to set thread - local detach value \ n " ) ; <nl> } <nl> @ @ - 546 , 7 + 546 , 7 @ @ jnidispatch _ detach ( jboolean d ) { <nl> <nl> / * * Store the value of errno / GetLastError in TLS * / <nl> void <nl> - jnidispatch _ set _ last _ error ( int err ) { <nl> + JNA _ set _ last _ error ( int err ) { <nl> if ( ! TLS _ SET ( tls _ errno _ key , L2A ( ( jlong ) err ) ) ) { <nl> fprintf ( stderr , " JNA : unable to set thread - local errno value \ n " ) ; <nl> } <nl> @ @ - 554 , 7 + 554 , 7 @ @ jnidispatch _ set _ last _ error ( int err ) { <nl> <nl> / * * Store the value of errno / GetLastError in TLS * / <nl> int <nl> - jnidispatch _ get _ last _ error ( ) { <nl> + JNA _ get _ last _ error ( ) { <nl> return ( int ) A2L ( TLS _ GET ( tls _ errno _ key ) ) ; <nl> } <nl> <nl> @ @ - 645 , 7 + 645 , 7 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> } <nl> <nl> const char * <nl> - jnidispatch _ callback _ init ( JNIEnv * env ) { <nl> + JNA _ callback _ init ( JNIEnv * env ) { <nl> # ifndef _ WIN32 <nl> static pthread _ once _ t key _ once = PTHREAD _ ONCE _ INIT ; <nl> pthread _ once ( & key _ once , make _ thread _ keys ) ; <nl> @ @ - 657 , 7 + 657 , 7 @ @ jnidispatch _ callback _ init ( JNIEnv * env ) { <nl> } <nl> <nl> void <nl> - jnidispatch _ callback _ dispose ( JNIEnv * env ) { <nl> + JNA _ callback _ dispose ( JNIEnv * env ) { <nl> if ( classObject ) { <nl> ( * env ) - > DeleteWeakGlobalRef ( env , classObject ) ; <nl> classObject = NULL ; <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index 8afc690 . . 8b83c12 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 2 , 7 + 2 , 7 @ @ <nl> * @ ( # ) dispatch . c 1 . 9 98 / 03 / 22 <nl> * <nl> * Copyright ( c ) 1998 Sun Microsystems , Inc . All Rights Reserved . <nl> - * Copyright ( c ) 2007 - 2012 Timothy Wall . All Rights Reserved . <nl> + * Copyright ( c ) 2007 - 2013 Timothy Wall . All Rights Reserved . <nl> * Copyright ( c ) 2007 Wayne Meissner . All Rights Reserved . <nl> * <nl> * This library is free software ; you can redistribute it and / or <nl> @ @ - 28 , 6 + 28 , 12 @ @ <nl> # include < psapi . h > <nl> # define STRTYPE wchar _ t * <nl> # define NAME2CSTR ( ENV , JSTR ) newWideCString ( ENV , JSTR ) <nl> + # ifdef _ WIN32 _ WCE <nl> + # include < tlhelp32 . h > <nl> + # define DEFAULT _ LOAD _ OPTS 0 / * altered search path unsupported on CE * / <nl> + # undef GetProcAddress <nl> + # define GetProcAddress GetProcAddressA <nl> + # else <nl> / * See http : / / msdn . microsoft . com / en - us / library / ms682586 ( VS . 85 ) . aspx : <nl> * " Note that the standard search strategy and the alternate search strategy <nl> * specified by LoadLibraryEx with LOAD _ WITH _ ALTERED _ SEARCH _ PATH differ in <nl> @ @ - 35 , 12 + 41 , 6 @ @ <nl> * directory , and the alternate search begins in the directory of the <nl> * executable module that LoadLibraryEx is loading . " <nl> * / <nl> - # ifdef _ WIN32 _ WCE <nl> - # include < tlhelp32 . h > <nl> - # define DEFAULT _ LOAD _ OPTS 0 / * altered search path unsupported on CE * / <nl> - # undef GetProcAddress <nl> - # define GetProcAddress GetProcAddressA <nl> - # else <nl> # define DEFAULT _ LOAD _ OPTS LOAD _ WITH _ ALTERED _ SEARCH _ PATH <nl> # endif <nl> # define LOAD _ LIBRARY ( NAME , OPTS ) ( NAME ? LoadLibraryExW ( NAME , NULL , OPTS ) : GetModuleHandleW ( NULL ) ) <nl> @ @ - 571 , 7 + 571 , 7 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray arr , <nl> } <nl> } <nl> else if ( preserve _ last _ error ) { <nl> - jnidispatch _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; <nl> + JNA _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; <nl> } <nl> PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; <nl> } <nl> @ @ - 1226 , 7 + 1226 , 7 @ @ get _ system _ property ( JNIEnv * env , const char * name , jboolean wide ) { <nl> } <nl> <nl> static const char * <nl> - jnidispatch _ init ( JNIEnv * env ) { <nl> + JNA _ init ( JNIEnv * env ) { <nl> if ( ! LOAD _ CREF ( env , Object , " java / lang / Object " ) ) return " java . lang . Object " ; <nl> if ( ! LOAD _ CREF ( env , Class , " java / lang / Class " ) ) return " java . lang . Class " ; <nl> if ( ! LOAD _ CREF ( env , Method , " java / lang / reflect / Method " ) ) return " java . lang . reflect . Method " ; <nl> @ @ - 1718 , 7 + 1718 , 7 @ @ method _ handler ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { <nl> } <nl> } <nl> else if ( preserve _ last _ error ) { <nl> - jnidispatch _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; <nl> + JNA _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; <nl> } <nl> PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; <nl> } <nl> @ @ - 2939 , 13 + 2939 , 13 @ @ Java _ com _ sun _ jna _ Native _ getPreserveLastError ( JNIEnv * UNUSED ( env ) , jclass UNUSED ( <nl> <nl> JNIEXPORT void JNICALL <nl> Java _ com _ sun _ jna _ Native _ setLastError ( JNIEnv * env , jclass UNUSED ( classp ) , jint code ) { <nl> - jnidispatch _ set _ last _ error ( code ) ; <nl> + JNA _ set _ last _ error ( code ) ; <nl> SET _ LAST _ ERROR ( code ) ; <nl> } <nl> <nl> JNIEXPORT jint JNICALL <nl> Java _ com _ sun _ jna _ Native _ getLastError ( JNIEnv * env , jclass UNUSED ( classp ) ) { <nl> - return jnidispatch _ get _ last _ error ( ) ; <nl> + return JNA _ get _ last _ error ( ) ; <nl> } <nl> <nl> JNIEXPORT jstring JNICALL <nl> @ @ - 2978 , 11 + 2978 , 11 @ @ JNI _ OnLoad ( JavaVM * jvm , void * UNUSED ( reserved ) ) { <nl> } <nl> } <nl> <nl> - if ( ( err = jnidispatch _ init ( env ) ) ! = NULL ) { <nl> + if ( ( err = JNA _ init ( env ) ) ! = NULL ) { <nl> fprintf ( stderr , " JNA : Problems loading core IDs : % s \ n " , err ) ; <nl> result = 0 ; <nl> } <nl> - else if ( ( err = jnidispatch _ callback _ init ( env ) ) ! = NULL ) { <nl> + else if ( ( err = JNA _ callback _ init ( env ) ) ! = NULL ) { <nl> fprintf ( stderr , " JNA : Problems loading callback IDs : % s \ n " , err ) ; <nl> result = 0 ; <nl> } <nl> @ @ - 3034 , 7 + 3034 , 7 @ @ JNI _ OnUnload ( JavaVM * vm , void * UNUSED ( reserved ) ) { <nl> } <nl> } <nl> <nl> - jnidispatch _ callback _ dispose ( env ) ; <nl> + JNA _ callback _ dispose ( env ) ; <nl> <nl> # ifdef JAWT _ HEADLESS _ HACK <nl> if ( jawt _ handle ! = NULL ) { <nl> @ @ - 3249 , 7 + 3249 , 7 @ @ Java _ com _ sun _ jna _ Native _ initialize _ 1ffi _ 1type ( JNIEnv * env , jclass UNUSED ( cls ) , j <nl> <nl> JNIEXPORT void JNICALL <nl> Java _ com _ sun _ jna _ Native _ detach ( JNIEnv * env , jclass UNUSED ( cls ) , jboolean d ) { <nl> - jnidispatch _ detach ( d ) ; <nl> + JNA _ detach ( d ) ; <nl> } <nl> <nl> # ifdef _ _ cplusplus <nl> diff - - git a / native / dispatch . h b / native / dispatch . h <nl> index 3394b4a . . cd65853 100644 <nl> - - - a / native / dispatch . h <nl> + + + b / native / dispatch . h <nl> @ @ - 174 , 11 + 174 , 11 @ @ extern void throwByName ( JNIEnv * env , const char * name , const char * msg ) ; <nl> extern int get _ jtype ( JNIEnv * , jclass ) ; <nl> extern ffi _ type * get _ ffi _ type ( JNIEnv * , jclass , char ) ; <nl> extern ffi _ type * get _ ffi _ rtype ( JNIEnv * , jclass , char ) ; <nl> - extern const char * jnidispatch _ callback _ init ( JNIEnv * ) ; <nl> - extern void jnidispatch _ set _ last _ error ( int ) ; <nl> - extern int jnidispatch _ get _ last _ error ( ) ; <nl> - extern void jnidispatch _ callback _ dispose ( JNIEnv * ) ; <nl> - extern void jnidispatch _ detach ( jboolean ) ; <nl> + extern const char * JNA _ callback _ init ( JNIEnv * ) ; <nl> + extern void JNA _ set _ last _ error ( int ) ; <nl> + extern int JNA _ get _ last _ error ( ) ; <nl> + extern void JNA _ callback _ dispose ( JNIEnv * ) ; <nl> + extern void JNA _ detach ( jboolean ) ; <nl> extern callback * create _ callback ( JNIEnv * , jobject , jobject , <nl> jobjectArray , jclass , <nl> callconv _ t , jint ) ; <nl> diff - - git a / test / com / sun / jna / PlatformTest . java b / test / com / sun / jna / PlatformTest . java <nl> index 6e679d5 . . c4813de 100644 <nl> - - - a / test / com / sun / jna / PlatformTest . java <nl> + + + b / test / com / sun / jna / PlatformTest . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - / * Copyright ( c ) 20013 Timothy Wall , All Rights Reserved <nl> + / * Copyright ( c ) 2013 Timothy Wall , All Rights Reserved <nl> * <nl> * This library is free software ; you can redistribute it and / or <nl> * modify it under the terms of the GNU Lesser General Public
NEAREST DIFF (one line): diff - - git a / native / Makefile b / native / Makefile <nl> index dd59a56 . . 13d5b30 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 104 , 7 + 104 , 7 @ @ CFLAGS + = - Wno - unknown - pragmas <nl> LD = arm - mingw32ce - gcc <nl> LIBDIR = / opt / mingw32ce / lib / gcc / arm - mingw32ce / 4 . 4 . 0 <nl> LDFLAGS = - o $ @ - shared - Wl , - Map $ { @ : $ ( LIBSFX ) = . map } <nl> - LIBS = $ ( LIBDIR ) / libgcc . a - lcoredll <nl> + LIBS = - lcoredll - lgcc - ltoolhelp <nl> WINDRES = arm - mingw32ce - windres <nl> EXTRAOBJS = $ ( RSRC ) <nl> # STRIP = arm - mingw32ce - strip - x <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index e7b8be9 . . bd7a17a 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 114 , 16 + 114 , 13 @ @ w32 _ find _ entry ( HANDLE handle , const STRTYPE funname ) { <nl> } <nl> else { <nl> # if defined ( _ WIN32 _ WCE ) <nl> - # if 1 <nl> - func = GetProcAddress ( handle , funname ) ; <nl> - # else <nl> - / / FIXME figure out proper linkage with cegcc <nl> / * CE has no EnumProcessModules , have to use an alternate API * / <nl> HANDLE snapshot ; <nl> if ( ( snapshot = CreateToolhelp32Snapshot ( TH32CS _ SNAPMODULE , 0 ) ) ! = INVALID _ HANDLE _ VALUE ) { <nl> + / / FIXME this crashes . . . <nl> MODULEENTRY32 moduleInfo ; <nl> moduleInfo . dwSize = sizeof ( moduleInfo ) ; <nl> - if ( Module32First ( handle , & moduleInfo ) ) { <nl> + if ( Module32First ( snapshot , & moduleInfo ) ) { <nl> do { <nl> if ( ( func = ( void * ) GetProcAddress ( moduleInfo . hModule , funname ) ) ) { <nl> break ; <nl> @ @ - 132 , 7 + 129 , 6 @ @ w32 _ find _ entry ( HANDLE handle , const STRTYPE funname ) { <nl> } <nl> CloseToolhelp32Snapshot ( snapshot ) ; <nl> } <nl> - # endif <nl> # else <nl> HANDLE cur _ proc = GetCurrentProcess ( ) ; <nl> HMODULE * modules ; <nl> diff - - git a / test / com / sun / jna / NativeLibraryTest . java b / test / com / sun / jna / NativeLibraryTest . java <nl> index 4b21202 . . f352efa 100644 <nl> - - - a / test / com / sun / jna / NativeLibraryTest . java <nl> + + + b / test / com / sun / jna / NativeLibraryTest . java <nl> @ @ - 183 , 7 + 183 , 7 @ @ public class NativeLibraryTest extends TestCase { <nl> 	 } <nl> } <nl> <nl> - public void XFAIL _ WCE _ testGetProcess ( ) { <nl> + public void testGetProcess ( ) { <nl> NativeLibrary process = NativeLibrary . getProcess ( ) ; <nl> / / Access a common C library function <nl> process . getFunction ( " printf " ) ;

TEST DIFF:
diff - - git a / native / Makefile b / native / Makefile 
 index c027283 . . aecfa04 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 367 , 6 + 367 , 8 @ @ $ ( LIBRARY ) : $ ( JNIDISPATCH _ OBJS ) $ ( FFI _ LIB ) 
 $ ( TESTLIB ) : $ ( BUILD ) / testlib . o 
 	 $ ( LD ) $ ( LDFLAGS ) $ < $ ( LIBS ) 
 
 + # These targets provide for different shared library loading methods 
 + # without getting into native library load conflicts 
 $ ( TESTLIB _ JAR ) $ ( TESTLIB _ PATH ) $ ( TESTLIB _ TRUNC ) : $ ( TESTLIB ) 
 	 @ cp $ < $ @ 
 
 diff - - git a / native / callback . c b / native / callback . c 
 index 87c605e . . 9812dc4 100644 
 - - - a / native / callback . c 
 + + + b / native / callback . c 
 @ @ - 538 , 7 + 538 , 7 @ @ static void make _ thread _ keys ( ) { 
 
 / * * Store the requested detach state for the current thread . * / 
 void 
 - jnidispatch _ detach ( jboolean d ) { 
 + JNA _ detach ( jboolean d ) { 
 if ( ! TLS _ SET ( tls _ detach _ key , L2A ( ( jlong ) ( d ? THREAD _ DETACH : THREAD _ LEAVE _ ATTACHED ) ) ) ) { 
 fprintf ( stderr , " JNA : unable to set thread - local detach value \ n " ) ; 
 } 
 @ @ - 546 , 7 + 546 , 7 @ @ jnidispatch _ detach ( jboolean d ) { 
 
 / * * Store the value of errno / GetLastError in TLS * / 
 void 
 - jnidispatch _ set _ last _ error ( int err ) { 
 + JNA _ set _ last _ error ( int err ) { 
 if ( ! TLS _ SET ( tls _ errno _ key , L2A ( ( jlong ) err ) ) ) { 
 fprintf ( stderr , " JNA : unable to set thread - local errno value \ n " ) ; 
 } 
 @ @ - 554 , 7 + 554 , 7 @ @ jnidispatch _ set _ last _ error ( int err ) { 
 
 / * * Store the value of errno / GetLastError in TLS * / 
 int 
 - jnidispatch _ get _ last _ error ( ) { 
 + JNA _ get _ last _ error ( ) { 
 return ( int ) A2L ( TLS _ GET ( tls _ errno _ key ) ) ; 
 } 
 
 @ @ - 645 , 7 + 645 , 7 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 } 
 
 const char * 
 - jnidispatch _ callback _ init ( JNIEnv * env ) { 
 + JNA _ callback _ init ( JNIEnv * env ) { 
 # ifndef _ WIN32 
 static pthread _ once _ t key _ once = PTHREAD _ ONCE _ INIT ; 
 pthread _ once ( & key _ once , make _ thread _ keys ) ; 
 @ @ - 657 , 7 + 657 , 7 @ @ jnidispatch _ callback _ init ( JNIEnv * env ) { 
 } 
 
 void 
 - jnidispatch _ callback _ dispose ( JNIEnv * env ) { 
 + JNA _ callback _ dispose ( JNIEnv * env ) { 
 if ( classObject ) { 
 ( * env ) - > DeleteWeakGlobalRef ( env , classObject ) ; 
 classObject = NULL ; 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index 8afc690 . . 8b83c12 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 2 , 7 + 2 , 7 @ @ 
 * @ ( # ) dispatch . c 1 . 9 98 / 03 / 22 
 * 
 * Copyright ( c ) 1998 Sun Microsystems , Inc . All Rights Reserved . 
 - * Copyright ( c ) 2007 - 2012 Timothy Wall . All Rights Reserved . 
 + * Copyright ( c ) 2007 - 2013 Timothy Wall . All Rights Reserved . 
 * Copyright ( c ) 2007 Wayne Meissner . All Rights Reserved . 
 * 
 * This library is free software ; you can redistribute it and / or 
 @ @ - 28 , 6 + 28 , 12 @ @ 
 # include < psapi . h > 
 # define STRTYPE wchar _ t * 
 # define NAME2CSTR ( ENV , JSTR ) newWideCString ( ENV , JSTR ) 
 + # ifdef _ WIN32 _ WCE 
 + # include < tlhelp32 . h > 
 + # define DEFAULT _ LOAD _ OPTS 0 / * altered search path unsupported on CE * / 
 + # undef GetProcAddress 
 + # define GetProcAddress GetProcAddressA 
 + # else 
 / * See http : / / msdn . microsoft . com / en - us / library / ms682586 ( VS . 85 ) . aspx : 
 * " Note that the standard search strategy and the alternate search strategy 
 * specified by LoadLibraryEx with LOAD _ WITH _ ALTERED _ SEARCH _ PATH differ in 
 @ @ - 35 , 12 + 41 , 6 @ @ 
 * directory , and the alternate search begins in the directory of the 
 * executable module that LoadLibraryEx is loading . " 
 * / 
 - # ifdef _ WIN32 _ WCE 
 - # include < tlhelp32 . h > 
 - # define DEFAULT _ LOAD _ OPTS 0 / * altered search path unsupported on CE * / 
 - # undef GetProcAddress 
 - # define GetProcAddress GetProcAddressA 
 - # else 
 # define DEFAULT _ LOAD _ OPTS LOAD _ WITH _ ALTERED _ SEARCH _ PATH 
 # endif 
 # define LOAD _ LIBRARY ( NAME , OPTS ) ( NAME ? LoadLibraryExW ( NAME , NULL , OPTS ) : GetModuleHandleW ( NULL ) ) 
 @ @ - 571 , 7 + 571 , 7 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray arr , 
 } 
 } 
 else if ( preserve _ last _ error ) { 
 - jnidispatch _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; 
 + JNA _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; 
 } 
 PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; 
 } 
 @ @ - 1226 , 7 + 1226 , 7 @ @ get _ system _ property ( JNIEnv * env , const char * name , jboolean wide ) { 
 } 
 
 static const char * 
 - jnidispatch _ init ( JNIEnv * env ) { 
 + JNA _ init ( JNIEnv * env ) { 
 if ( ! LOAD _ CREF ( env , Object , " java / lang / Object " ) ) return " java . lang . Object " ; 
 if ( ! LOAD _ CREF ( env , Class , " java / lang / Class " ) ) return " java . lang . Class " ; 
 if ( ! LOAD _ CREF ( env , Method , " java / lang / reflect / Method " ) ) return " java . lang . reflect . Method " ; 
 @ @ - 1718 , 7 + 1718 , 7 @ @ method _ handler ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { 
 } 
 } 
 else if ( preserve _ last _ error ) { 
 - jnidispatch _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; 
 + JNA _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; 
 } 
 PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; 
 } 
 @ @ - 2939 , 13 + 2939 , 13 @ @ Java _ com _ sun _ jna _ Native _ getPreserveLastError ( JNIEnv * UNUSED ( env ) , jclass UNUSED ( 
 
 JNIEXPORT void JNICALL 
 Java _ com _ sun _ jna _ Native _ setLastError ( JNIEnv * env , jclass UNUSED ( classp ) , jint code ) { 
 - jnidispatch _ set _ last _ error ( code ) ; 
 + JNA _ set _ last _ error ( code ) ; 
 SET _ LAST _ ERROR ( code ) ; 
 } 
 
 JNIEXPORT jint JNICALL 
 Java _ com _ sun _ jna _ Native _ getLastError ( JNIEnv * env , jclass UNUSED ( classp ) ) { 
 - return jnidispatch _ get _ last _ error ( ) ; 
 + return JNA _ get _ last _ error ( ) ; 
 } 
 
 JNIEXPORT jstring JNICALL 
 @ @ - 2978 , 11 + 2978 , 11 @ @ JNI _ OnLoad ( JavaVM * jvm , void * UNUSED ( reserved ) ) { 
 } 
 } 
 
 - if ( ( err = jnidispatch _ init ( env ) ) ! = NULL ) { 
 + if ( ( err = JNA _ init ( env ) ) ! = NULL ) { 
 fprintf ( stderr , " JNA : Problems loading core IDs : % s \ n " , err ) ; 
 result = 0 ; 
 } 
 - else if ( ( err = jnidispatch _ callback _ init ( env ) ) ! = NULL ) { 
 + else if ( ( err = JNA _ callback _ init ( env ) ) ! = NULL ) { 
 fprintf ( stderr , " JNA : Problems loading callback IDs : % s \ n " , err ) ; 
 result = 0 ; 
 } 
 @ @ - 3034 , 7 + 3034 , 7 @ @ JNI _ OnUnload ( JavaVM * vm , void * UNUSED ( reserved ) ) { 
 } 
 } 
 
 - jnidispatch _ callback _ dispose ( env ) ; 
 + JNA _ callback _ dispose ( env ) ; 
 
 # ifdef JAWT _ HEADLESS _ HACK 
 if ( jawt _ handle ! = NULL ) { 
 @ @ - 3249 , 7 + 3249 , 7 @ @ Java _ com _ sun _ jna _ Native _ initialize _ 1ffi _ 1type ( JNIEnv * env , jclass UNUSED ( cls ) , j 
 
 JNIEXPORT void JNICALL 
 Java _ com _ sun _ jna _ Native _ detach ( JNIEnv * env , jclass UNUSED ( cls ) , jboolean d ) { 
 - jnidispatch _ detach ( d ) ; 
 + JNA _ detach ( d ) ; 
 } 
 
 # ifdef _ _ cplusplus 
 diff - - git a / native / dispatch . h b / native / dispatch . h 
 index 3394b4a . . cd65853 100644 
 - - - a / native / dispatch . h 
 + + + b / native / dispatch . h 
 @ @ - 174 , 11 + 174 , 11 @ @ extern void throwByName ( JNIEnv * env , const char * name , const char * msg ) ; 
 extern int get _ jtype ( JNIEnv * , jclass ) ; 
 extern ffi _ type * get _ ffi _ type ( JNIEnv * , jclass , char ) ; 
 extern ffi _ type * get _ ffi _ rtype ( JNIEnv * , jclass , char ) ; 
 - extern const char * jnidispatch _ callback _ init ( JNIEnv * ) ; 
 - extern void jnidispatch _ set _ last _ error ( int ) ; 
 - extern int jnidispatch _ get _ last _ error ( ) ; 
 - extern void jnidispatch _ callback _ dispose ( JNIEnv * ) ; 
 - extern void jnidispatch _ detach ( jboolean ) ; 
 + extern const char * JNA _ callback _ init ( JNIEnv * ) ; 
 + extern void JNA _ set _ last _ error ( int ) ; 
 + extern int JNA _ get _ last _ error ( ) ; 
 + extern void JNA _ callback _ dispose ( JNIEnv * ) ; 
 + extern void JNA _ detach ( jboolean ) ; 
 extern callback * create _ callback ( JNIEnv * , jobject , jobject , 
 jobjectArray , jclass , 
 callconv _ t , jint ) ; 
 diff - - git a / test / com / sun / jna / PlatformTest . java b / test / com / sun / jna / PlatformTest . java 
 index 6e679d5 . . c4813de 100644 
 - - - a / test / com / sun / jna / PlatformTest . java 
 + + + b / test / com / sun / jna / PlatformTest . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - / * Copyright ( c ) 20013 Timothy Wall , All Rights Reserved 
 + / * Copyright ( c ) 2013 Timothy Wall , All Rights Reserved 
 * 
 * This library is free software ; you can redistribute it and / or 
 * modify it under the terms of the GNU Lesser General Public

NEAREST DIFF:
diff - - git a / native / Makefile b / native / Makefile 
 index dd59a56 . . 13d5b30 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 104 , 7 + 104 , 7 @ @ CFLAGS + = - Wno - unknown - pragmas 
 LD = arm - mingw32ce - gcc 
 LIBDIR = / opt / mingw32ce / lib / gcc / arm - mingw32ce / 4 . 4 . 0 
 LDFLAGS = - o $ @ - shared - Wl , - Map $ { @ : $ ( LIBSFX ) = . map } 
 - LIBS = $ ( LIBDIR ) / libgcc . a - lcoredll 
 + LIBS = - lcoredll - lgcc - ltoolhelp 
 WINDRES = arm - mingw32ce - windres 
 EXTRAOBJS = $ ( RSRC ) 
 # STRIP = arm - mingw32ce - strip - x 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index e7b8be9 . . bd7a17a 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 114 , 16 + 114 , 13 @ @ w32 _ find _ entry ( HANDLE handle , const STRTYPE funname ) { 
 } 
 else { 
 # if defined ( _ WIN32 _ WCE ) 
 - # if 1 
 - func = GetProcAddress ( handle , funname ) ; 
 - # else 
 - / / FIXME figure out proper linkage with cegcc 
 / * CE has no EnumProcessModules , have to use an alternate API * / 
 HANDLE snapshot ; 
 if ( ( snapshot = CreateToolhelp32Snapshot ( TH32CS _ SNAPMODULE , 0 ) ) ! = INVALID _ HANDLE _ VALUE ) { 
 + / / FIXME this crashes . . . 
 MODULEENTRY32 moduleInfo ; 
 moduleInfo . dwSize = sizeof ( moduleInfo ) ; 
 - if ( Module32First ( handle , & moduleInfo ) ) { 
 + if ( Module32First ( snapshot , & moduleInfo ) ) { 
 do { 
 if ( ( func = ( void * ) GetProcAddress ( moduleInfo . hModule , funname ) ) ) { 
 break ; 
 @ @ - 132 , 7 + 129 , 6 @ @ w32 _ find _ entry ( HANDLE handle , const STRTYPE funname ) { 
 } 
 CloseToolhelp32Snapshot ( snapshot ) ; 
 } 
 - # endif 
 # else 
 HANDLE cur _ proc = GetCurrentProcess ( ) ; 
 HMODULE * modules ; 
 diff - - git a / test / com / sun / jna / NativeLibraryTest . java b / test / com / sun / jna / NativeLibraryTest . java 
 index 4b21202 . . f352efa 100644 
 - - - a / test / com / sun / jna / NativeLibraryTest . java 
 + + + b / test / com / sun / jna / NativeLibraryTest . java 
 @ @ - 183 , 7 + 183 , 7 @ @ public class NativeLibraryTest extends TestCase { 
 	 } 
 } 
 
 - public void XFAIL _ WCE _ testGetProcess ( ) { 
 + public void testGetProcess ( ) { 
 NativeLibrary process = NativeLibrary . getProcess ( ) ; 
 / / Access a common C library function 
 process . getFunction ( " printf " ) ;
