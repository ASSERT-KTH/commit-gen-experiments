BLEU SCORE: 0.10343603005129705

TEST MSG: Changing Class < T > to Class < T extends Library > for Native . loadLibrary
GENERATED MSG: Native . loadLibrary ( ) no longer requires interface classes to extend Library .

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index 86e342e . . 7f54b1c 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 503 , 7 + 503 , 7 @ @ public final class Native implements Version { <nl> * @ throws UnsatisfiedLinkError if the library cannot be found or <nl> * dependent libraries are missing . <nl> * / <nl> - public static < T > T loadLibrary ( Class < T > interfaceClass ) { <nl> + public static < T extends Library > T loadLibrary ( Class < T > interfaceClass ) { <nl> return loadLibrary ( null , interfaceClass ) ; <nl> } <nl> <nl> @ @ - 522 , 7 + 522 , 7 @ @ public final class Native implements Version { <nl> * dependent libraries are missing . <nl> * @ see # loadLibrary ( String , Class , Map ) <nl> * / <nl> - public static < T > T loadLibrary ( Class < T > interfaceClass , Map < String , ? > options ) { <nl> + public static < T extends Library > T loadLibrary ( Class < T > interfaceClass , Map < String , ? > options ) { <nl> return loadLibrary ( null , interfaceClass , options ) ; <nl> } <nl> <nl> @ @ - 540 , 7 + 540 , 7 @ @ public final class Native implements Version { <nl> * dependent libraries are missing . <nl> * @ see # loadLibrary ( String , Class , Map ) <nl> * / <nl> - public static < T > T loadLibrary ( String name , Class < T > interfaceClass ) { <nl> + public static < T extends Library > T loadLibrary ( String name , Class < T > interfaceClass ) { <nl> return loadLibrary ( name , interfaceClass , Collections . < String , Object > emptyMap ( ) ) ; <nl> } <nl> <nl> @ @ - 560 , 8 + 560 , 9 @ @ public final class Native implements Version { <nl> * @ throws UnsatisfiedLinkError if the library cannot be found or <nl> * dependent libraries are missing . <nl> * / <nl> - public static < T > T loadLibrary ( String name , Class < T > interfaceClass , Map < String , ? > options ) { <nl> + public static < T extends Library > T loadLibrary ( String name , Class < T > interfaceClass , Map < String , ? > options ) { <nl> if ( ! Library . class . isAssignableFrom ( interfaceClass ) ) { <nl> + / / Maybe still possible if the caller is not using generics ? <nl> throw new IllegalArgumentException ( " Interface ( " + interfaceClass . getSimpleName ( ) + " ) " <nl> + " of library = " + name + " does not extend " + Library . class . getSimpleName ( ) ) ; <nl> } <nl> diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java <nl> index bb8c5fe . . 8345d0a 100644 <nl> - - - a / test / com / sun / jna / NativeTest . java <nl> + + + b / test / com / sun / jna / NativeTest . java <nl> @ @ - 61 , 7 + 61 , 7 @ @ public class NativeTest extends TestCase { <nl> Method m = Native . class . getMethod ( " loadLibrary " , paramTypes ) ; <nl> Class < ? > returnType = m . getReturnType ( ) ; <nl> signature . append ( Native . getSignature ( returnType ) ) ; <nl> - assertSame ( " Mismatched return type for signature = " + signature , Object . class , returnType ) ; <nl> + assertSame ( " Mismatched return type for signature = " + signature , Library . class , returnType ) ; <nl> / / System . out . println ( " = = = > " + m . getName ( ) + " : " + signature ) ; <nl> } catch ( NoSuchMethodError err ) { <nl> fail ( " No method for signature = " + signature ) ;
NEAREST DIFF (one line): diff - - git a / jnalib / test / com / sun / jna / examples / KeyboardUtilsTest . java b / jnalib / test / com / sun / jna / examples / KeyboardUtilsTest . java <nl> index c97c26a . . 8015054 100644 <nl> - - - a / jnalib / test / com / sun / jna / examples / KeyboardUtilsTest . java <nl> + + + b / jnalib / test / com / sun / jna / examples / KeyboardUtilsTest . java <nl> @ @ - 27 , 15 + 27 , 12 @ @ public class KeyboardUtilsTest extends TestCase { <nl> <nl> Robot robot = new Robot ( ) ; <nl> int [ ] keys = { <nl> - / / order these to avoid any visible characters <nl> + / / Avoid terminal control letters ( like ^ Z ) <nl> KeyEvent . VK _ CONTROL , <nl> - KeyEvent . VK _ A , KeyEvent . VK _ Z , <nl> - KeyEvent . VK _ 0 , KeyEvent . VK _ 9 , <nl> KeyEvent . VK _ SHIFT , <nl> - KeyEvent . VK _ U , <nl> } ; <nl> String [ ] keystr = { <nl> - " VK _ CONTROL " , " VK _ A " , " VK _ Z " , " VK _ 0 " , " VK _ 9 " , " VK _ SHIFT " , " VK _ U " , <nl> + " VK _ CONTROL " , " VK _ SHIFT " , <nl> } ; <nl> int [ ] nonkeys = { <nl> KeyEvent . VK _ B , KeyEvent . VK _ 1 , <nl> @ @ - 45 , 22 + 42 , 22 @ @ public class KeyboardUtilsTest extends TestCase { <nl> " VK _ B " , " VK _ 1 " , " VK _ ALT " , <nl> } ; <nl> for ( int i = 0 ; i < keys . length ; i + + ) { <nl> - robot . keyPress ( keys [ i ] ) ; <nl> - } <nl> - robot . delay ( 1000 ) ; <nl> - try { <nl> - for ( int i = 0 ; i < keys . length ; i + + ) { <nl> - assertTrue ( " Key should be pressed : " + keystr [ i ] , KeyboardUtils . isPressed ( keys [ i ] ) ) ; <nl> + try { <nl> + robot . keyPress ( keys [ i ] ) ; <nl> + long start = System . currentTimeMillis ( ) ; <nl> + while ( ! KeyboardUtils . isPressed ( keys [ i ] ) ) { <nl> + if ( System . currentTimeMillis ( ) - start > 5000 ) { <nl> + fail ( " Timed out waiting for keypress : " + keystr [ i ] ) ; <nl> + } <nl> + Thread . sleep ( 10 ) ; <nl> + } <nl> } <nl> - for ( int i = 0 ; i < nonkeys . length ; i + + ) { <nl> - assertFalse ( " Key should not be pressed : " + nonkeystr [ i ] , KeyboardUtils . isPressed ( nonkeys [ i ] ) ) ; <nl> + finally { <nl> + robot . keyRelease ( keys [ i ] ) ; <nl> } <nl> } <nl> - finally { <nl> - for ( int i = 0 ; i < keys . length ; i + + ) { <nl> - try { robot . keyRelease ( keys [ i ] ) ; } <nl> - catch ( Exception e ) { } <nl> - } <nl> + for ( int i = 0 ; i < nonkeys . length ; i + + ) { <nl> + assertFalse ( " Key should not be pressed : " + nonkeystr [ i ] , KeyboardUtils . isPressed ( nonkeys [ i ] ) ) ; <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index 86e342e . . 7f54b1c 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 503 , 7 + 503 , 7 @ @ public final class Native implements Version { 
 * @ throws UnsatisfiedLinkError if the library cannot be found or 
 * dependent libraries are missing . 
 * / 
 - public static < T > T loadLibrary ( Class < T > interfaceClass ) { 
 + public static < T extends Library > T loadLibrary ( Class < T > interfaceClass ) { 
 return loadLibrary ( null , interfaceClass ) ; 
 } 
 
 @ @ - 522 , 7 + 522 , 7 @ @ public final class Native implements Version { 
 * dependent libraries are missing . 
 * @ see # loadLibrary ( String , Class , Map ) 
 * / 
 - public static < T > T loadLibrary ( Class < T > interfaceClass , Map < String , ? > options ) { 
 + public static < T extends Library > T loadLibrary ( Class < T > interfaceClass , Map < String , ? > options ) { 
 return loadLibrary ( null , interfaceClass , options ) ; 
 } 
 
 @ @ - 540 , 7 + 540 , 7 @ @ public final class Native implements Version { 
 * dependent libraries are missing . 
 * @ see # loadLibrary ( String , Class , Map ) 
 * / 
 - public static < T > T loadLibrary ( String name , Class < T > interfaceClass ) { 
 + public static < T extends Library > T loadLibrary ( String name , Class < T > interfaceClass ) { 
 return loadLibrary ( name , interfaceClass , Collections . < String , Object > emptyMap ( ) ) ; 
 } 
 
 @ @ - 560 , 8 + 560 , 9 @ @ public final class Native implements Version { 
 * @ throws UnsatisfiedLinkError if the library cannot be found or 
 * dependent libraries are missing . 
 * / 
 - public static < T > T loadLibrary ( String name , Class < T > interfaceClass , Map < String , ? > options ) { 
 + public static < T extends Library > T loadLibrary ( String name , Class < T > interfaceClass , Map < String , ? > options ) { 
 if ( ! Library . class . isAssignableFrom ( interfaceClass ) ) { 
 + / / Maybe still possible if the caller is not using generics ? 
 throw new IllegalArgumentException ( " Interface ( " + interfaceClass . getSimpleName ( ) + " ) " 
 + " of library = " + name + " does not extend " + Library . class . getSimpleName ( ) ) ; 
 } 
 diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java 
 index bb8c5fe . . 8345d0a 100644 
 - - - a / test / com / sun / jna / NativeTest . java 
 + + + b / test / com / sun / jna / NativeTest . java 
 @ @ - 61 , 7 + 61 , 7 @ @ public class NativeTest extends TestCase { 
 Method m = Native . class . getMethod ( " loadLibrary " , paramTypes ) ; 
 Class < ? > returnType = m . getReturnType ( ) ; 
 signature . append ( Native . getSignature ( returnType ) ) ; 
 - assertSame ( " Mismatched return type for signature = " + signature , Object . class , returnType ) ; 
 + assertSame ( " Mismatched return type for signature = " + signature , Library . class , returnType ) ; 
 / / System . out . println ( " = = = > " + m . getName ( ) + " : " + signature ) ; 
 } catch ( NoSuchMethodError err ) { 
 fail ( " No method for signature = " + signature ) ;

NEAREST DIFF:
diff - - git a / jnalib / test / com / sun / jna / examples / KeyboardUtilsTest . java b / jnalib / test / com / sun / jna / examples / KeyboardUtilsTest . java 
 index c97c26a . . 8015054 100644 
 - - - a / jnalib / test / com / sun / jna / examples / KeyboardUtilsTest . java 
 + + + b / jnalib / test / com / sun / jna / examples / KeyboardUtilsTest . java 
 @ @ - 27 , 15 + 27 , 12 @ @ public class KeyboardUtilsTest extends TestCase { 
 
 Robot robot = new Robot ( ) ; 
 int [ ] keys = { 
 - / / order these to avoid any visible characters 
 + / / Avoid terminal control letters ( like ^ Z ) 
 KeyEvent . VK _ CONTROL , 
 - KeyEvent . VK _ A , KeyEvent . VK _ Z , 
 - KeyEvent . VK _ 0 , KeyEvent . VK _ 9 , 
 KeyEvent . VK _ SHIFT , 
 - KeyEvent . VK _ U , 
 } ; 
 String [ ] keystr = { 
 - " VK _ CONTROL " , " VK _ A " , " VK _ Z " , " VK _ 0 " , " VK _ 9 " , " VK _ SHIFT " , " VK _ U " , 
 + " VK _ CONTROL " , " VK _ SHIFT " , 
 } ; 
 int [ ] nonkeys = { 
 KeyEvent . VK _ B , KeyEvent . VK _ 1 , 
 @ @ - 45 , 22 + 42 , 22 @ @ public class KeyboardUtilsTest extends TestCase { 
 " VK _ B " , " VK _ 1 " , " VK _ ALT " , 
 } ; 
 for ( int i = 0 ; i < keys . length ; i + + ) { 
 - robot . keyPress ( keys [ i ] ) ; 
 - } 
 - robot . delay ( 1000 ) ; 
 - try { 
 - for ( int i = 0 ; i < keys . length ; i + + ) { 
 - assertTrue ( " Key should be pressed : " + keystr [ i ] , KeyboardUtils . isPressed ( keys [ i ] ) ) ; 
 + try { 
 + robot . keyPress ( keys [ i ] ) ; 
 + long start = System . currentTimeMillis ( ) ; 
 + while ( ! KeyboardUtils . isPressed ( keys [ i ] ) ) { 
 + if ( System . currentTimeMillis ( ) - start > 5000 ) { 
 + fail ( " Timed out waiting for keypress : " + keystr [ i ] ) ; 
 + } 
 + Thread . sleep ( 10 ) ; 
 + } 
 } 
 - for ( int i = 0 ; i < nonkeys . length ; i + + ) { 
 - assertFalse ( " Key should not be pressed : " + nonkeystr [ i ] , KeyboardUtils . isPressed ( nonkeys [ i ] ) ) ; 
 + finally { 
 + robot . keyRelease ( keys [ i ] ) ; 
 } 
 } 
 - finally { 
 - for ( int i = 0 ; i < keys . length ; i + + ) { 
 - try { robot . keyRelease ( keys [ i ] ) ; } 
 - catch ( Exception e ) { } 
 - } 
 + for ( int i = 0 ; i < nonkeys . length ; i + + ) { 
 + assertFalse ( " Key should not be pressed : " + nonkeystr [ i ] , KeyboardUtils . isPressed ( nonkeys [ i ] ) ) ; 
 } 
 } 
 }
