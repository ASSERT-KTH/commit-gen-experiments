BLEU SCORE: 0.020980574531482755

TEST MSG: Added ` SetupDiOpenDevRegKey ` , ` SetupDiEnumDeviceInfo ` and related
GENERATED MSG: Add documentation for the SetupApi interface .

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 4df6ae1 . . 99e551b 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 37 , 6 + 37 , 7 @ @ Features <nl> * [ # 400 ] ( https : / / github . com / twall / jna / pull / 400 ) : Added process - specific access rights constants in ` com . sun . jna . platform . win32 . WinNT ` - [ @ PAX523 ] ( https : / / github . com / PAX523 ) . <nl> * [ # 400 ] ( https : / / github . com / twall / jna / pull / 400 ) : Added specific constants for request of icon settings in ` com . sun . jna . platform . win32 . WinUser ` - [ @ PAX523 ] ( https : / / github . com / PAX523 ) . <nl> * [ # 400 ] ( https : / / github . com / twall / jna / pull / 400 ) : Added constants for ` GetClassLong ` , ` SendMessageTimeout ` and ` GetIconInfo ` in ` com . sun . jna . platform . win32 . WinUser ` - [ @ PAX523 ] ( https : / / github . com / PAX523 ) . <nl> + * [ # 419 ] ( https : / / github . com / twall / jna / pull / 419 ) : Added ` SetupDiOpenDevRegKey ` , ` SetupDiEnumDeviceInfo ` and related constants to ` com . sun . jna . platform . win32 . SetupApi ` - [ @ ChristianSchwarz ] ( https : / / github . com / ChristianSchwarz ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / SetupApi . java b / contrib / platform / src / com / sun / jna / platform / win32 / SetupApi . java <nl> index 7b746b8 . . b4cc7a8 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / SetupApi . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / SetupApi . java <nl> @ @ - 16 , 12 + 16 , 16 @ @ import java . util . List ; <nl> import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> + import com . sun . jna . platform . win32 . Guid . GUID ; <nl> + import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> + import com . sun . jna . platform . win32 . WinReg . HKEY ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> import com . sun . jna . win32 . StdCallLibrary ; <nl> import com . sun . jna . win32 . W32APIOptions ; <nl> <nl> / * * <nl> * The interface for the w32 setup API . <nl> + * @ author Christian Schwarz <nl> * / <nl> public interface SetupApi extends StdCallLibrary { <nl> <nl> @ @ - 31 , 49 + 35 , 98 @ @ public interface SetupApi extends StdCallLibrary { <nl> / * * <nl> * The GUID _ DEVINTERFACE _ DISK device interface class is defined for hard disk storage devices . <nl> * / <nl> - public static Guid . GUID GUID _ DEVINTERFACE _ DISK = new Guid . GUID ( new byte [ ] <nl> - { <nl> - 0x07 , 0x63 , ( byte ) 0xf5 , 0x53 , ( byte ) 0xbf , ( byte ) 0xb6 , ( byte ) 0xd0 , 0x11 , <nl> - ( byte ) 0x94 , ( byte ) 0xf2 , 0x00 , ( byte ) 0xa0 , ( byte ) 0xc9 , ( byte ) 0x1e , ( byte ) 0xfb , ( byte ) 0x8b <nl> - } ) ; <nl> - <nl> + GUID GUID _ DEVINTERFACE _ DISK = new GUID ( " 53F56307 - B6BF - 11D0 - 94F2 - 00A0C91EFB8B " ) ; <nl> + <nl> + <nl> + 	 / * * <nl> + 	 * Drivers for serial ports register instances of this device interface <nl> + 	 * class to notify the operating system and applications of the presence of <nl> + 	 * COM ports . <nl> + 	 * / <nl> + 	 GUID GUID _ DEVINTERFACE _ COMPORT = new GUID ( " 86E0D1E0 - 8089 - 11D0 - 9CE4 - 08003E301F73 " ) ; <nl> + 	 <nl> / * * <nl> * Return only the device that is associated with the system default device interface , if one is set , for the <nl> * specified device interface classes . <nl> * / <nl> - public int DIGCF _ DEFAULT = 0x1 ; <nl> + int DIGCF _ DEFAULT = 0x1 ; <nl> <nl> / * * <nl> * Return only devices that are currently present in a system . <nl> * / <nl> - public int DIGCF _ PRESENT = 0x2 ; <nl> + int DIGCF _ PRESENT = 0x2 ; <nl> <nl> / * * <nl> * Return a list of installed devices for all device setup classes or all device interface classes . <nl> * / <nl> - public int DIGCF _ ALLCLASSES = 0x4 ; <nl> + int DIGCF _ ALLCLASSES = 0x4 ; <nl> <nl> / * * <nl> * Return only devices that are a part of the current hardware profile . <nl> * / <nl> - public int DIGCF _ PROFILE = 0x8 ; <nl> + int DIGCF _ PROFILE = 0x8 ; <nl> <nl> / * * <nl> * Return devices that support device interfaces for the specified device interface classes . This flag must be set <nl> * in the Flags parameter if the Enumerator parameter specifies a device instance ID . <nl> * / <nl> - public int DIGCF _ DEVICEINTERFACE = 0x10 ; <nl> + int DIGCF _ DEVICEINTERFACE = 0x10 ; <nl> <nl> / * * <nl> * ( Windows XP and later ) The function retrieves the device ' s current removal policy as a DWORD that contains one of <nl> * the CM _ REMOVAL _ POLICY _ Xxx values that are defined in Cfgmgr32 . h . <nl> * / <nl> - public int SPDRP _ REMOVAL _ POLICY = 0x0000001F ; <nl> + int SPDRP _ REMOVAL _ POLICY = 0x0000001F ; <nl> <nl> / * * <nl> * Removable . <nl> * / <nl> - public int CM _ DEVCAP _ REMOVABLE = 0x00000004 ; <nl> + int CM _ DEVCAP _ REMOVABLE = 0x00000004 ; <nl> + <nl> + <nl> + 	 / * * make change in all hardware profiles * / <nl> + 	 int DICS _ FLAG _ GLOBAL = 0x00000001 ; <nl> + 	 / * * make change in specified profile only * / <nl> + 	 int DICS _ FLAG _ CONFIGSPECIFIC = 0x00000002 ; <nl> + 	 / * * 1 or more hardware profile - specific changes to follow . * / <nl> + 	 int DICS _ FLAG _ CONFIGGENERAL = 0x00000004 ; <nl> + <nl> + 	 / * * <nl> + 	 * Open / Create / Delete device key . <nl> + 	 * <nl> + 	 * @ see SetupDiCreateDevRegKey , SetupDiOpenDevRegKey , and <nl> + 	 * SetupDiDeleteDevRegKey . <nl> + 	 * / <nl> + <nl> + 	 int DIREG _ DEV = 0x00000001 ; <nl> + 	 / * * <nl> + 	 * Open / Create / Delete driver key <nl> + 	 * <nl> + 	 * @ see SetupDiCreateDevRegKey , SetupDiOpenDevRegKey , and <nl> + 	 * SetupDiDeleteDevRegKey . <nl> + 	 * / <nl> + <nl> + 	 int DIREG _ DRV = 0x00000002 ; <nl> + 	 / * * <nl> + 	 * Delete both driver and Device key <nl> + 	 * <nl> + 	 * @ see SetupDiCreateDevRegKey , SetupDiOpenDevRegKey , and <nl> + 	 * SetupDiDeleteDevRegKey . <nl> + 	 * / <nl> + <nl> + 	 int DIREG _ BOTH = 0x00000004 ; <nl> + <nl> + 	 / * * <nl> + 	 * DeviceDesc ( R / W ) <nl> + 	 * < p > <nl> + 	 * Device registry property codes ( Codes marked as read - only ( R ) may only be <nl> + 	 * used for SetupDiGetDeviceRegistryProperty ) <nl> + 	 * < p > <nl> + 	 * These values should cover the same set of registry properties as defined <nl> + 	 * by the CM _ DRP codes in cfgmgr32 . h . <nl> + 	 * / <nl> + 	 int SPDRP _ DEVICEDESC = 0x00000000 ; <nl> + <nl> <nl> / * * <nl> * The SetupDiGetClassDevs function returns a handle to a device information set that contains requested device <nl> @ @ - 236 , 10 + 289 , 94 @ @ public interface SetupApi extends StdCallLibrary { <nl> * ERROR _ INVALID _ DATA error code if the requested property does not exist for a device or if the property data is <nl> * not valid . <nl> * / <nl> - boolean SetupDiGetDeviceRegistryProperty ( WinNT . HANDLE DeviceInfoSet , SP _ DEVINFO _ DATA DeviceInfoData , <nl> + boolean SetupDiGetDeviceRegistryProperty ( HANDLE DeviceInfoSet , SP _ DEVINFO _ DATA DeviceInfoData , <nl> int Property , IntByReference PropertyRegDataType , Pointer PropertyBuffer , int PropertyBufferSize , <nl> IntByReference RequiredSize ) ; <nl> <nl> + 	 / * * <nl> + 	 * The SetupDiOpenDevRegKey function opens a registry key for device - specific configuration information . <nl> + 	 * < p > <nl> + 	 * Depending on the value that is passed in the samDesired parameter , it might be necessary for the caller of this <nl> + 	 * function to be a member of the Administrators group . <nl> + 	 * < p > <nl> + 	 * Close the handle returned from this function by calling RegCloseKey . <nl> + 	 * < p > <nl> + 	 * The specified device instance must be registered before this function is called . However , be aware that the <nl> + 	 * operating system automatically registers PnP device instances . For information about how to register non - PnP <nl> + 	 * device instances , see SetupDiRegisterDeviceInfo . <nl> + 	 * <nl> + 	 * @ param deviceInfoSet <nl> + 	 * A handle to the device information set that contains a device information element that represents the <nl> + 	 * device for which to open a registry key . <nl> + 	 * @ param deviceInfoData <nl> + 	 * A pointer to an { @ link SP _ DEVINFO _ DATA } structure that specifies the device information element in <nl> + 	 * DeviceInfoSet . <nl> + 	 * @ param scope <nl> + 	 * he scope of the registry key to open . The scope determines where the information is stored . The scope <nl> + 	 * can be global or specific to a hardware profile . The scope is specified by one of the following <nl> + 	 * values : <nl> + 	 * < ul > <nl> + 	 * < li > DICS _ FLAG _ GLOBAL Open a key to store global configuration information . This information is not <nl> + 	 * specific to a particular hardware profile . This opens a key that is rooted at HKEY _ LOCAL _ MACHINE . The <nl> + 	 * exact key opened depends on the value of the KeyType parameter . < li > DICS _ FLAG _ CONFIGSPECIFIC Open a <nl> + 	 * key to store hardware profile - specific configuration information . This key is rooted at one of the <nl> + 	 * hardware - profile specific branches , instead of HKEY _ LOCAL _ MACHINE . The exact key opened depends on the <nl> + 	 * value of the KeyType parameter . <nl> + 	 * < / ul > <nl> + 	 * @ param hwProfile <nl> + 	 * A hardware profile value , which is set as follows : <nl> + 	 * < ul > <nl> + 	 * < li > If Scope is set to DICS _ FLAG _ CONFIGSPECIFIC , HwProfile specifies the hardware profile of the key <nl> + 	 * that is to be opened . < li > If HwProfile is 0 , the key for the current hardware profile is opened . < li > <nl> + 	 * If Scope is DICS _ FLAG _ GLOBAL , HwProfile is ignored . <nl> + 	 * < / ul > <nl> + 	 * @ param keyType <nl> + 	 * The type of registry storage key to open , which can be one of the following values : <nl> + 	 * < ul > <nl> + 	 * < li > { @ link # DIREG _ DEV } Open a hardware key for the device . < li > { @ link # DIREG _ DRV } Open a software key <nl> + 	 * for the device . For more information about a device ' s hardware and software keys , see Registry Trees <nl> + 	 * and Keys for Devices and Drivers . <nl> + 	 * < / ul > <nl> + 	 * @ param samDesired <nl> + 	 * The registry security access that is required for the requested key . For information about registry <nl> + 	 * security access values of type REGSAM , see the Microsoft Windows SDK documentation . <nl> + 	 * @ return If the function is successful , it returns a handle to an opened registry key where private configuration <nl> + 	 * data about this device instance can be stored / retrieved . <nl> + 	 * < p > <nl> + 	 * If the function fails , it returns INVALID _ HANDLE _ VALUE . To get extended error information , call <nl> + 	 * GetLastError . <nl> + 	 * / <nl> + 	 HKEY SetupDiOpenDevRegKey ( HANDLE deviceInfoSet , SP _ DEVINFO _ DATA deviceInfoData , int scope , int hwProfile , int keyType , int samDesired ) ; <nl> + <nl> + 	 / * * <nl> + 	 * The SetupDiEnumDeviceInfo function returns a { @ link SP _ DEVINFO _ DATA } structure that specifies a device <nl> + 	 * information element in a device information set . <nl> + 	 * < p > <nl> + 	 * < b > Remarks < / b > < br > <nl> + 	 * Repeated calls to this function return a device information element for a different device . This function can be <nl> + 	 * called repeatedly to get information about all devices in the device information set . <nl> + 	 * < p > <nl> + 	 * To enumerate device information elements , an installer should initially call SetupDiEnumDeviceInfo with the <nl> + 	 * MemberIndex parameter set to 0 . The installer should then increment MemberIndex and call SetupDiEnumDeviceInfo <nl> + 	 * until there are no more values ( the function fails and a call to GetLastError returns ERROR _ NO _ MORE _ ITEMS ) . <nl> + 	 * < p > <nl> + 	 * Call SetupDiEnumDeviceInterfaces to get a context structure for a device interface element ( versus a device <nl> + 	 * information element ) . <nl> + 	 * <nl> + 	 * <nl> + 	 * @ param deviceInfoSet <nl> + 	 * A handle to the device information set for which to return an { @ link SP _ DEVINFO _ DATA } structure that <nl> + 	 * represents a device information element . <nl> + 	 * @ param memberIndex <nl> + 	 * A zero - based index of the device information element to retrieve . <nl> + 	 * @ param deviceInfoData <nl> + 	 * A pointer to an SP _ DEVINFO _ DATA structure to receive information about an enumerated device <nl> + 	 * information element . <nl> + 	 * @ return The function returns TRUE if it is successful . Otherwise , it returns FALSE and the logged error can be <nl> + 	 * retrieved with a call to GetLastError . <nl> + 	 * / <nl> + 	 boolean SetupDiEnumDeviceInfo ( HANDLE deviceInfoSet , int memberIndex , SP _ DEVINFO _ DATA deviceInfoData ) ; <nl> + <nl> / * * <nl> * An SP _ DEVICE _ INTERFACE _ DATA structure defines a device interface in a device information set . <nl> * / <nl> @ @ - 286 , 7 + 423 , 7 @ @ public interface SetupApi extends StdCallLibrary { <nl> * / <nl> public Pointer Reserved ; <nl> <nl> - protected List getFieldOrder ( ) { <nl> + protected List < String > getFieldOrder ( ) { <nl> return Arrays . asList ( new String [ ] { " cbSize " , " InterfaceClassGuid " , " Flags " , " Reserved " } ) ; <nl> } <nl> } <nl> @ @ - 338 , 7 + 475 , 7 @ @ public interface SetupApi extends StdCallLibrary { <nl> * / <nl> public Pointer Reserved ; <nl> <nl> - protected List getFieldOrder ( ) { <nl> + protected List < String > getFieldOrder ( ) { <nl> return Arrays . asList ( new String [ ] { " cbSize " , " InterfaceClassGuid " , " DevInst " , " Reserved " } ) ; <nl> } <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / SetupApiTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / SetupApiTest . java <nl> new file mode 100644 <nl> index 0000000 . . 6a0dec9 <nl> - - - / dev / null <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / SetupApiTest . java <nl> @ @ - 0 , 0 + 1 , 70 @ @ <nl> + package com . sun . jna . platform . win32 ; <nl> + <nl> + import static com . sun . jna . Native . getLastError ; <nl> + import static com . sun . jna . platform . win32 . SetupApi . DICS _ FLAG _ GLOBAL ; <nl> + import static com . sun . jna . platform . win32 . SetupApi . DIGCF _ ALLCLASSES ; <nl> + import static com . sun . jna . platform . win32 . SetupApi . DIGCF _ DEVICEINTERFACE ; <nl> + import static com . sun . jna . platform . win32 . SetupApi . DIGCF _ PRESENT ; <nl> + import static com . sun . jna . platform . win32 . SetupApi . DIREG _ DEV ; <nl> + import static com . sun . jna . platform . win32 . SetupApi . GUID _ DEVINTERFACE _ COMPORT ; <nl> + import static com . sun . jna . platform . win32 . WinBase . INVALID _ HANDLE _ VALUE ; <nl> + import static com . sun . jna . platform . win32 . WinError . ERROR _ NO _ MORE _ ITEMS ; <nl> + import static com . sun . jna . platform . win32 . WinNT . KEY _ QUERY _ VALUE ; <nl> + import junit . framework . TestCase ; <nl> + <nl> + import com . sun . jna . platform . win32 . SetupApi . SP _ DEVINFO _ DATA ; <nl> + import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> + import com . sun . jna . platform . win32 . WinReg . HKEY ; <nl> + <nl> + public class SetupApiTest extends TestCase { <nl> + 	 / * * <nl> + 	 * member index for the first device , see { @ link SetupApi # SetupDiEnumDeviceInfo ( HANDLE , int , SP _ DEVINFO _ DATA ) } <nl> + 	 * / <nl> + 	 private static final int FIRST _ MEMBER = 0 ; <nl> + <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 junit . textui . TestRunner . run ( SetupApiTest . class ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Tests the mapping of { @ link SetupApi # SetupDiOpenDevRegKey ( HANDLE , SP _ DEVINFO _ DATA , int , int , int , int ) } . <nl> + 	 * < p > <nl> + 	 * The test pass if SetupDiOpenDevRegKey ( . . ) returns a valid { @ link HKEY } pointing to the first found device on the current machine . <nl> + 	 * < p > <nl> + 	 * NOTE : We only test the mapping of SetupDiOpenDevRegKey ( . . ) , not it ' s functionality . <nl> + 	 * / <nl> + 	 public void testSetupDiOpenDevRegKey ( ) { <nl> + 	 	 / / hDevInfoSet repesents a list of installed devices for all device <nl> + 	 	 / / setup classes or all device interface classes <nl> + 	 	 HANDLE hDevInfoSet = SetupApi . INSTANCE . SetupDiGetClassDevs ( null , null , null , DIGCF _ ALLCLASSES ) ; <nl> + 	 	 assertTrue ( hDevInfoSet ! = INVALID _ HANDLE _ VALUE ) ; <nl> + <nl> + 	 	 SP _ DEVINFO _ DATA devInfo = new SP _ DEVINFO _ DATA ( ) ; <nl> + 	 	 / / there must be least one device ( drive , processor , pci , usb , . . . ) on the <nl> + 	 	 / / current machine <nl> + 	 	 assertTrue ( SetupApi . INSTANCE . SetupDiEnumDeviceInfo ( hDevInfoSet , FIRST _ MEMBER , devInfo ) ) ; <nl> + <nl> + 	 	 HKEY hDeviceKey = SetupApi . INSTANCE . SetupDiOpenDevRegKey ( hDevInfoSet , devInfo , DICS _ FLAG _ GLOBAL , 0 , DIREG _ DEV , KEY _ QUERY _ VALUE ) ; <nl> + 	 	 assertTrue ( hDeviceKey ! = INVALID _ HANDLE _ VALUE ) ; <nl> + <nl> + 	 	 Advapi32 . INSTANCE . RegCloseKey ( hDeviceKey ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Tests the mapping of { @ link SetupApi # SetupDiEnumDeviceInfo ( HANDLE , int , SP _ DEVINFO _ DATA ) } . <nl> + 	 * < p > <nl> + 	 * There are 2 different results possible , depending availability of an COM - Port on the current machine : <nl> + 	 * < ul > <nl> + 	 * < li > If the current machine has no COM - Port the method must fail and the the last error indicate that there are no more values / COM - Ports . <nl> + 	 * < li > If the current machine has at least one COM - Port the method must succeed . The test pass if no exception is thrown . <nl> + 	 * < / ul > <nl> + 	 * / <nl> + 	 public void testSetupDiEnumDeviceInfo ( ) { <nl> + 	 	 HANDLE hDevInfoSet = SetupApi . INSTANCE . SetupDiGetClassDevs ( GUID _ DEVINTERFACE _ COMPORT , null , null , DIGCF _ PRESENT | DIGCF _ DEVICEINTERFACE ) ; <nl> + 	 	 SP _ DEVINFO _ DATA devInfo = new SP _ DEVINFO _ DATA ( ) ; <nl> + 	 	 boolean succeed = SetupApi . INSTANCE . SetupDiEnumDeviceInfo ( hDevInfoSet , FIRST _ MEMBER , devInfo ) ; <nl> + 	 	 boolean hasNoMoreItems = ( getLastError ( ) = = ERROR _ NO _ MORE _ ITEMS ) ; <nl> + <nl> + 	 	 assertTrue ( succeed | | hasNoMoreItems ) ; <nl> + 	 } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Winioctl . java b / contrib / platform / src / com / sun / jna / platform / win32 / Winioctl . java <nl> index 75b1a41 . . 2e0af31 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Winioctl . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Winioctl . java <nl> @ @ - 20 , 6 + 20 , 11 @ @ import com . sun . jna . win32 . StdCallLibrary ; <nl> public interface Winioctl extends StdCallLibrary { <nl> <nl> / * * <nl> + * Retrieves the device type , device number , and , for a partitionable device , the partition number of a device . <nl> + * / <nl> + public static final int IOCTL _ STORAGE _ GET _ DEVICE _ NUMBER = 0x2D1080 ; <nl> + <nl> + / * * <nl> * Contains information about a device . This structure is used by the IOCTL _ STORAGE _ GET _ DEVICE _ NUMBER control code . <nl> * / <nl> public static class STORAGE _ DEVICE _ NUMBER extends Structure {

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 4df6ae1 . . 99e551b 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 37 , 6 + 37 , 7 @ @ Features 
 * [ # 400 ] ( https : / / github . com / twall / jna / pull / 400 ) : Added process - specific access rights constants in ` com . sun . jna . platform . win32 . WinNT ` - [ @ PAX523 ] ( https : / / github . com / PAX523 ) . 
 * [ # 400 ] ( https : / / github . com / twall / jna / pull / 400 ) : Added specific constants for request of icon settings in ` com . sun . jna . platform . win32 . WinUser ` - [ @ PAX523 ] ( https : / / github . com / PAX523 ) . 
 * [ # 400 ] ( https : / / github . com / twall / jna / pull / 400 ) : Added constants for ` GetClassLong ` , ` SendMessageTimeout ` and ` GetIconInfo ` in ` com . sun . jna . platform . win32 . WinUser ` - [ @ PAX523 ] ( https : / / github . com / PAX523 ) . 
 + * [ # 419 ] ( https : / / github . com / twall / jna / pull / 419 ) : Added ` SetupDiOpenDevRegKey ` , ` SetupDiEnumDeviceInfo ` and related constants to ` com . sun . jna . platform . win32 . SetupApi ` - [ @ ChristianSchwarz ] ( https : / / github . com / ChristianSchwarz ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / SetupApi . java b / contrib / platform / src / com / sun / jna / platform / win32 / SetupApi . java 
 index 7b746b8 . . b4cc7a8 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / SetupApi . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / SetupApi . java 
 @ @ - 16 , 12 + 16 , 16 @ @ import java . util . List ; 
 import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 + import com . sun . jna . platform . win32 . Guid . GUID ; 
 + import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 + import com . sun . jna . platform . win32 . WinReg . HKEY ; 
 import com . sun . jna . ptr . IntByReference ; 
 import com . sun . jna . win32 . StdCallLibrary ; 
 import com . sun . jna . win32 . W32APIOptions ; 
 
 / * * 
 * The interface for the w32 setup API . 
 + * @ author Christian Schwarz 
 * / 
 public interface SetupApi extends StdCallLibrary { 
 
 @ @ - 31 , 49 + 35 , 98 @ @ public interface SetupApi extends StdCallLibrary { 
 / * * 
 * The GUID _ DEVINTERFACE _ DISK device interface class is defined for hard disk storage devices . 
 * / 
 - public static Guid . GUID GUID _ DEVINTERFACE _ DISK = new Guid . GUID ( new byte [ ] 
 - { 
 - 0x07 , 0x63 , ( byte ) 0xf5 , 0x53 , ( byte ) 0xbf , ( byte ) 0xb6 , ( byte ) 0xd0 , 0x11 , 
 - ( byte ) 0x94 , ( byte ) 0xf2 , 0x00 , ( byte ) 0xa0 , ( byte ) 0xc9 , ( byte ) 0x1e , ( byte ) 0xfb , ( byte ) 0x8b 
 - } ) ; 
 - 
 + GUID GUID _ DEVINTERFACE _ DISK = new GUID ( " 53F56307 - B6BF - 11D0 - 94F2 - 00A0C91EFB8B " ) ; 
 + 
 + 
 + 	 / * * 
 + 	 * Drivers for serial ports register instances of this device interface 
 + 	 * class to notify the operating system and applications of the presence of 
 + 	 * COM ports . 
 + 	 * / 
 + 	 GUID GUID _ DEVINTERFACE _ COMPORT = new GUID ( " 86E0D1E0 - 8089 - 11D0 - 9CE4 - 08003E301F73 " ) ; 
 + 	 
 / * * 
 * Return only the device that is associated with the system default device interface , if one is set , for the 
 * specified device interface classes . 
 * / 
 - public int DIGCF _ DEFAULT = 0x1 ; 
 + int DIGCF _ DEFAULT = 0x1 ; 
 
 / * * 
 * Return only devices that are currently present in a system . 
 * / 
 - public int DIGCF _ PRESENT = 0x2 ; 
 + int DIGCF _ PRESENT = 0x2 ; 
 
 / * * 
 * Return a list of installed devices for all device setup classes or all device interface classes . 
 * / 
 - public int DIGCF _ ALLCLASSES = 0x4 ; 
 + int DIGCF _ ALLCLASSES = 0x4 ; 
 
 / * * 
 * Return only devices that are a part of the current hardware profile . 
 * / 
 - public int DIGCF _ PROFILE = 0x8 ; 
 + int DIGCF _ PROFILE = 0x8 ; 
 
 / * * 
 * Return devices that support device interfaces for the specified device interface classes . This flag must be set 
 * in the Flags parameter if the Enumerator parameter specifies a device instance ID . 
 * / 
 - public int DIGCF _ DEVICEINTERFACE = 0x10 ; 
 + int DIGCF _ DEVICEINTERFACE = 0x10 ; 
 
 / * * 
 * ( Windows XP and later ) The function retrieves the device ' s current removal policy as a DWORD that contains one of 
 * the CM _ REMOVAL _ POLICY _ Xxx values that are defined in Cfgmgr32 . h . 
 * / 
 - public int SPDRP _ REMOVAL _ POLICY = 0x0000001F ; 
 + int SPDRP _ REMOVAL _ POLICY = 0x0000001F ; 
 
 / * * 
 * Removable . 
 * / 
 - public int CM _ DEVCAP _ REMOVABLE = 0x00000004 ; 
 + int CM _ DEVCAP _ REMOVABLE = 0x00000004 ; 
 + 
 + 
 + 	 / * * make change in all hardware profiles * / 
 + 	 int DICS _ FLAG _ GLOBAL = 0x00000001 ; 
 + 	 / * * make change in specified profile only * / 
 + 	 int DICS _ FLAG _ CONFIGSPECIFIC = 0x00000002 ; 
 + 	 / * * 1 or more hardware profile - specific changes to follow . * / 
 + 	 int DICS _ FLAG _ CONFIGGENERAL = 0x00000004 ; 
 + 
 + 	 / * * 
 + 	 * Open / Create / Delete device key . 
 + 	 * 
 + 	 * @ see SetupDiCreateDevRegKey , SetupDiOpenDevRegKey , and 
 + 	 * SetupDiDeleteDevRegKey . 
 + 	 * / 
 + 
 + 	 int DIREG _ DEV = 0x00000001 ; 
 + 	 / * * 
 + 	 * Open / Create / Delete driver key 
 + 	 * 
 + 	 * @ see SetupDiCreateDevRegKey , SetupDiOpenDevRegKey , and 
 + 	 * SetupDiDeleteDevRegKey . 
 + 	 * / 
 + 
 + 	 int DIREG _ DRV = 0x00000002 ; 
 + 	 / * * 
 + 	 * Delete both driver and Device key 
 + 	 * 
 + 	 * @ see SetupDiCreateDevRegKey , SetupDiOpenDevRegKey , and 
 + 	 * SetupDiDeleteDevRegKey . 
 + 	 * / 
 + 
 + 	 int DIREG _ BOTH = 0x00000004 ; 
 + 
 + 	 / * * 
 + 	 * DeviceDesc ( R / W ) 
 + 	 * < p > 
 + 	 * Device registry property codes ( Codes marked as read - only ( R ) may only be 
 + 	 * used for SetupDiGetDeviceRegistryProperty ) 
 + 	 * < p > 
 + 	 * These values should cover the same set of registry properties as defined 
 + 	 * by the CM _ DRP codes in cfgmgr32 . h . 
 + 	 * / 
 + 	 int SPDRP _ DEVICEDESC = 0x00000000 ; 
 + 
 
 / * * 
 * The SetupDiGetClassDevs function returns a handle to a device information set that contains requested device 
 @ @ - 236 , 10 + 289 , 94 @ @ public interface SetupApi extends StdCallLibrary { 
 * ERROR _ INVALID _ DATA error code if the requested property does not exist for a device or if the property data is 
 * not valid . 
 * / 
 - boolean SetupDiGetDeviceRegistryProperty ( WinNT . HANDLE DeviceInfoSet , SP _ DEVINFO _ DATA DeviceInfoData , 
 + boolean SetupDiGetDeviceRegistryProperty ( HANDLE DeviceInfoSet , SP _ DEVINFO _ DATA DeviceInfoData , 
 int Property , IntByReference PropertyRegDataType , Pointer PropertyBuffer , int PropertyBufferSize , 
 IntByReference RequiredSize ) ; 
 
 + 	 / * * 
 + 	 * The SetupDiOpenDevRegKey function opens a registry key for device - specific configuration information . 
 + 	 * < p > 
 + 	 * Depending on the value that is passed in the samDesired parameter , it might be necessary for the caller of this 
 + 	 * function to be a member of the Administrators group . 
 + 	 * < p > 
 + 	 * Close the handle returned from this function by calling RegCloseKey . 
 + 	 * < p > 
 + 	 * The specified device instance must be registered before this function is called . However , be aware that the 
 + 	 * operating system automatically registers PnP device instances . For information about how to register non - PnP 
 + 	 * device instances , see SetupDiRegisterDeviceInfo . 
 + 	 * 
 + 	 * @ param deviceInfoSet 
 + 	 * A handle to the device information set that contains a device information element that represents the 
 + 	 * device for which to open a registry key . 
 + 	 * @ param deviceInfoData 
 + 	 * A pointer to an { @ link SP _ DEVINFO _ DATA } structure that specifies the device information element in 
 + 	 * DeviceInfoSet . 
 + 	 * @ param scope 
 + 	 * he scope of the registry key to open . The scope determines where the information is stored . The scope 
 + 	 * can be global or specific to a hardware profile . The scope is specified by one of the following 
 + 	 * values : 
 + 	 * < ul > 
 + 	 * < li > DICS _ FLAG _ GLOBAL Open a key to store global configuration information . This information is not 
 + 	 * specific to a particular hardware profile . This opens a key that is rooted at HKEY _ LOCAL _ MACHINE . The 
 + 	 * exact key opened depends on the value of the KeyType parameter . < li > DICS _ FLAG _ CONFIGSPECIFIC Open a 
 + 	 * key to store hardware profile - specific configuration information . This key is rooted at one of the 
 + 	 * hardware - profile specific branches , instead of HKEY _ LOCAL _ MACHINE . The exact key opened depends on the 
 + 	 * value of the KeyType parameter . 
 + 	 * < / ul > 
 + 	 * @ param hwProfile 
 + 	 * A hardware profile value , which is set as follows : 
 + 	 * < ul > 
 + 	 * < li > If Scope is set to DICS _ FLAG _ CONFIGSPECIFIC , HwProfile specifies the hardware profile of the key 
 + 	 * that is to be opened . < li > If HwProfile is 0 , the key for the current hardware profile is opened . < li > 
 + 	 * If Scope is DICS _ FLAG _ GLOBAL , HwProfile is ignored . 
 + 	 * < / ul > 
 + 	 * @ param keyType 
 + 	 * The type of registry storage key to open , which can be one of the following values : 
 + 	 * < ul > 
 + 	 * < li > { @ link # DIREG _ DEV } Open a hardware key for the device . < li > { @ link # DIREG _ DRV } Open a software key 
 + 	 * for the device . For more information about a device ' s hardware and software keys , see Registry Trees 
 + 	 * and Keys for Devices and Drivers . 
 + 	 * < / ul > 
 + 	 * @ param samDesired 
 + 	 * The registry security access that is required for the requested key . For information about registry 
 + 	 * security access values of type REGSAM , see the Microsoft Windows SDK documentation . 
 + 	 * @ return If the function is successful , it returns a handle to an opened registry key where private configuration 
 + 	 * data about this device instance can be stored / retrieved . 
 + 	 * < p > 
 + 	 * If the function fails , it returns INVALID _ HANDLE _ VALUE . To get extended error information , call 
 + 	 * GetLastError . 
 + 	 * / 
 + 	 HKEY SetupDiOpenDevRegKey ( HANDLE deviceInfoSet , SP _ DEVINFO _ DATA deviceInfoData , int scope , int hwProfile , int keyType , int samDesired ) ; 
 + 
 + 	 / * * 
 + 	 * The SetupDiEnumDeviceInfo function returns a { @ link SP _ DEVINFO _ DATA } structure that specifies a device 
 + 	 * information element in a device information set . 
 + 	 * < p > 
 + 	 * < b > Remarks < / b > < br > 
 + 	 * Repeated calls to this function return a device information element for a different device . This function can be 
 + 	 * called repeatedly to get information about all devices in the device information set . 
 + 	 * < p > 
 + 	 * To enumerate device information elements , an installer should initially call SetupDiEnumDeviceInfo with the 
 + 	 * MemberIndex parameter set to 0 . The installer should then increment MemberIndex and call SetupDiEnumDeviceInfo 
 + 	 * until there are no more values ( the function fails and a call to GetLastError returns ERROR _ NO _ MORE _ ITEMS ) . 
 + 	 * < p > 
 + 	 * Call SetupDiEnumDeviceInterfaces to get a context structure for a device interface element ( versus a device 
 + 	 * information element ) . 
 + 	 * 
 + 	 * 
 + 	 * @ param deviceInfoSet 
 + 	 * A handle to the device information set for which to return an { @ link SP _ DEVINFO _ DATA } structure that 
 + 	 * represents a device information element . 
 + 	 * @ param memberIndex 
 + 	 * A zero - based index of the device information element to retrieve . 
 + 	 * @ param deviceInfoData 
 + 	 * A pointer to an SP _ DEVINFO _ DATA structure to receive information about an enumerated device 
 + 	 * information element . 
 + 	 * @ return The function returns TRUE if it is successful . Otherwise , it returns FALSE and the logged error can be 
 + 	 * retrieved with a call to GetLastError . 
 + 	 * / 
 + 	 boolean SetupDiEnumDeviceInfo ( HANDLE deviceInfoSet , int memberIndex , SP _ DEVINFO _ DATA deviceInfoData ) ; 
 + 
 / * * 
 * An SP _ DEVICE _ INTERFACE _ DATA structure defines a device interface in a device information set . 
 * / 
 @ @ - 286 , 7 + 423 , 7 @ @ public interface SetupApi extends StdCallLibrary { 
 * / 
 public Pointer Reserved ; 
 
 - protected List getFieldOrder ( ) { 
 + protected List < String > getFieldOrder ( ) { 
 return Arrays . asList ( new String [ ] { " cbSize " , " InterfaceClassGuid " , " Flags " , " Reserved " } ) ; 
 } 
 } 
 @ @ - 338 , 7 + 475 , 7 @ @ public interface SetupApi extends StdCallLibrary { 
 * / 
 public Pointer Reserved ; 
 
 - protected List getFieldOrder ( ) { 
 + protected List < String > getFieldOrder ( ) { 
 return Arrays . asList ( new String [ ] { " cbSize " , " InterfaceClassGuid " , " DevInst " , " Reserved " } ) ; 
 } 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / SetupApiTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / SetupApiTest . java 
 new file mode 100644 
 index 0000000 . . 6a0dec9 
 - - - / dev / null 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / SetupApiTest . java 
 @ @ - 0 , 0 + 1 , 70 @ @ 
 + package com . sun . jna . platform . win32 ; 
 + 
 + import static com . sun . jna . Native . getLastError ; 
 + import static com . sun . jna . platform . win32 . SetupApi . DICS _ FLAG _ GLOBAL ; 
 + import static com . sun . jna . platform . win32 . SetupApi . DIGCF _ ALLCLASSES ; 
 + import static com . sun . jna . platform . win32 . SetupApi . DIGCF _ DEVICEINTERFACE ; 
 + import static com . sun . jna . platform . win32 . SetupApi . DIGCF _ PRESENT ; 
 + import static com . sun . jna . platform . win32 . SetupApi . DIREG _ DEV ; 
 + import static com . sun . jna . platform . win32 . SetupApi . GUID _ DEVINTERFACE _ COMPORT ; 
 + import static com . sun . jna . platform . win32 . WinBase . INVALID _ HANDLE _ VALUE ; 
 + import static com . sun . jna . platform . win32 . WinError . ERROR _ NO _ MORE _ ITEMS ; 
 + import static com . sun . jna . platform . win32 . WinNT . KEY _ QUERY _ VALUE ; 
 + import junit . framework . TestCase ; 
 + 
 + import com . sun . jna . platform . win32 . SetupApi . SP _ DEVINFO _ DATA ; 
 + import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 + import com . sun . jna . platform . win32 . WinReg . HKEY ; 
 + 
 + public class SetupApiTest extends TestCase { 
 + 	 / * * 
 + 	 * member index for the first device , see { @ link SetupApi # SetupDiEnumDeviceInfo ( HANDLE , int , SP _ DEVINFO _ DATA ) } 
 + 	 * / 
 + 	 private static final int FIRST _ MEMBER = 0 ; 
 + 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 junit . textui . TestRunner . run ( SetupApiTest . class ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Tests the mapping of { @ link SetupApi # SetupDiOpenDevRegKey ( HANDLE , SP _ DEVINFO _ DATA , int , int , int , int ) } . 
 + 	 * < p > 
 + 	 * The test pass if SetupDiOpenDevRegKey ( . . ) returns a valid { @ link HKEY } pointing to the first found device on the current machine . 
 + 	 * < p > 
 + 	 * NOTE : We only test the mapping of SetupDiOpenDevRegKey ( . . ) , not it ' s functionality . 
 + 	 * / 
 + 	 public void testSetupDiOpenDevRegKey ( ) { 
 + 	 	 / / hDevInfoSet repesents a list of installed devices for all device 
 + 	 	 / / setup classes or all device interface classes 
 + 	 	 HANDLE hDevInfoSet = SetupApi . INSTANCE . SetupDiGetClassDevs ( null , null , null , DIGCF _ ALLCLASSES ) ; 
 + 	 	 assertTrue ( hDevInfoSet ! = INVALID _ HANDLE _ VALUE ) ; 
 + 
 + 	 	 SP _ DEVINFO _ DATA devInfo = new SP _ DEVINFO _ DATA ( ) ; 
 + 	 	 / / there must be least one device ( drive , processor , pci , usb , . . . ) on the 
 + 	 	 / / current machine 
 + 	 	 assertTrue ( SetupApi . INSTANCE . SetupDiEnumDeviceInfo ( hDevInfoSet , FIRST _ MEMBER , devInfo ) ) ; 
 + 
 + 	 	 HKEY hDeviceKey = SetupApi . INSTANCE . SetupDiOpenDevRegKey ( hDevInfoSet , devInfo , DICS _ FLAG _ GLOBAL , 0 , DIREG _ DEV , KEY _ QUERY _ VALUE ) ; 
 + 	 	 assertTrue ( hDeviceKey ! = INVALID _ HANDLE _ VALUE ) ; 
 + 
 + 	 	 Advapi32 . INSTANCE . RegCloseKey ( hDeviceKey ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Tests the mapping of { @ link SetupApi # SetupDiEnumDeviceInfo ( HANDLE , int , SP _ DEVINFO _ DATA ) } . 
 + 	 * < p > 
 + 	 * There are 2 different results possible , depending availability of an COM - Port on the current machine : 
 + 	 * < ul > 
 + 	 * < li > If the current machine has no COM - Port the method must fail and the the last error indicate that there are no more values / COM - Ports . 
 + 	 * < li > If the current machine has at least one COM - Port the method must succeed . The test pass if no exception is thrown . 
 + 	 * < / ul > 
 + 	 * / 
 + 	 public void testSetupDiEnumDeviceInfo ( ) { 
 + 	 	 HANDLE hDevInfoSet = SetupApi . INSTANCE . SetupDiGetClassDevs ( GUID _ DEVINTERFACE _ COMPORT , null , null , DIGCF _ PRESENT | DIGCF _ DEVICEINTERFACE ) ; 
 + 	 	 SP _ DEVINFO _ DATA devInfo = new SP _ DEVINFO _ DATA ( ) ; 
 + 	 	 boolean succeed = SetupApi . INSTANCE . SetupDiEnumDeviceInfo ( hDevInfoSet , FIRST _ MEMBER , devInfo ) ; 
 + 	 	 boolean hasNoMoreItems = ( getLastError ( ) = = ERROR _ NO _ MORE _ ITEMS ) ; 
 + 
 + 	 	 assertTrue ( succeed | | hasNoMoreItems ) ; 
 + 	 } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Winioctl . java b / contrib / platform / src / com / sun / jna / platform / win32 / Winioctl . java 
 index 75b1a41 . . 2e0af31 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Winioctl . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Winioctl . java 
 @ @ - 20 , 6 + 20 , 11 @ @ import com . sun . jna . win32 . StdCallLibrary ; 
 public interface Winioctl extends StdCallLibrary { 
 
 / * * 
 + * Retrieves the device type , device number , and , for a partitionable device , the partition number of a device . 
 + * / 
 + public static final int IOCTL _ STORAGE _ GET _ DEVICE _ NUMBER = 0x2D1080 ; 
 + 
 + / * * 
 * Contains information about a device . This structure is used by the IOCTL _ STORAGE _ GET _ DEVICE _ NUMBER control code . 
 * / 
 public static class STORAGE _ DEVICE _ NUMBER extends Structure {
