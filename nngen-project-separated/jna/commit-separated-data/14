BLEU SCORE: 0.06220117374063391

TEST MSG: Javadocs , better typecasting
GENERATED MSG: Add Windows Version Helper functions

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 9440de9 . . a9cd8f6 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 2 , 7 + 2 , 7 @ @ NOTE : as of JNA 4 . 0 , JNA is now dual - licensed under LGPL and AL 2 . 0 ( see LICENSE <nl> <nl> NOTE : JNI native support is typically incompatible between minor versions , and almost always incompatible between major versions . <nl> <nl> - Next release ( 5 . 2 . 1 ) <nl> + Next release ( 5 . 3 . 0 ) <nl> = = = = = = = = = = = = = = = = = = = = <nl> <nl> Features <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> index 9f60001 . . e012b13 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> @ @ - 1414 , 66 + 1414 , 68 @ @ public interface Kernel32 extends StdCallLibrary , WinNT , Wincon { <nl> boolean GetVersionEx ( OSVERSIONINFOEX lpVersionInfo ) ; <nl> <nl> / * * <nl> - * The VerifyVersionInfoW function compares a set of operating system <nl> - * version requirements to the corresponding values for the currently <nl> - * running version of the system . This function is subject to manifest - based <nl> - * behavior . <nl> + * Compares a set of operating system version requirements to the <nl> + * corresponding values for the currently running version of the system . <nl> + * This function is subject to manifest - based behavior . <nl> * <nl> * @ param lpVersionInformation <nl> - * A pointer to an OSVERSIONINFOEX structure containing the <nl> - * operating system version requirements to compare . The <nl> - * dwTypeMask parameter indicates the members of this structure <nl> - * that contain information to compare . <nl> - * <nl> - * You must set the dwOSVersionInfoSize member of this structure <nl> - * to sizeof ( OSVERSIONINFOEX ) . You must also specify valid data <nl> - * for the members indicated by dwTypeMask . The function ignores <nl> - * structure members for which the corresponding dwTypeMask bit <nl> - * is not set . <nl> + * A pointer to an { @ link WinNT # OSVERSIONINFOEX } structure <nl> + * containing the operating system version requirements to <nl> + * compare . The { @ code dwTypeMask } parameter indicates the <nl> + * members of this structure that contain information to compare . <nl> + * < p > <nl> + * You must set the { @ code dwOSVersionInfoSize } member of this <nl> + * structure to { @ code sizeof ( OSVERSIONINFOEX ) } . You must also <nl> + * specify valid data for the members indicated by <nl> + * { @ code dwTypeMask } . The function ignores structure members for <nl> + * which the corresponding { @ code dwTypeMask } bit is not set . <nl> * @ param dwTypeMask <nl> - * A mask that indicates the members of the OSVERSIONINFOEX <nl> - * structure to be tested . <nl> + * A mask that indicates the members of the <nl> + * { @ link WinNT # OSVERSIONINFOEX } structure to be tested . <nl> * @ param dwlConditionMask <nl> - * The type of comparison to be used for each lpVersionInfo <nl> - * member being compared . To build this value , call the <nl> - * VerSetConditionMask function once for each OSVERSIONINFOEX <nl> - * member being compared . <nl> + * The type of comparison to be used for each <nl> + * { @ code lpVersionInfo } member being compared . To build this <nl> + * value , call the { @ link # VerSetConditionMask } function once for <nl> + * each { @ link WinNT # OSVERSIONINFOEX } member being compared . <nl> * @ return If the currently running operating system satisfies the specified <nl> * requirements , the return value is a nonzero value . <nl> - * <nl> + * < p > <nl> * If the current system does not satisfy the requirements , the <nl> - * return value is zero and GetLastError returns <nl> - * ERROR _ OLD _ WIN _ VERSION . <nl> - * <nl> - * If the function fails , the return value is zero and GetLastError <nl> - * returns an error code other than ERROR _ OLD _ WIN _ VERSION . <nl> + * return value is zero and { @ link # GetLastError ( ) } returns <nl> + * { @ link WinError # ERROR _ OLD _ WIN _ VERSION } . <nl> + * < p > <nl> + * If the function fails , the return value is zero and <nl> + * { @ link # GetLastError ( ) } returns an error code other than <nl> + * { @ link WinError # ERROR _ OLD _ WIN _ VERSION } . <nl> * / <nl> boolean VerifyVersionInfoW ( OSVERSIONINFOEX lpVersionInformation , int dwTypeMask , long dwlConditionMask ) ; <nl> <nl> / * * <nl> - * The VerSetConditionMask function sets the bits of a 64 - bit value to <nl> - * indicate the comparison operator to use for a specified operating system <nl> - * version attribute . This function is used to build the dwlConditionMask <nl> - * parameter of the VerifyVersionInfo function . <nl> + * Sets the bits of a 64 - bit value to indicate the comparison operator to <nl> + * use for a specified operating system version attribute . This function is <nl> + * used to build the { @ code dwlConditionMask } parameter of the <nl> + * { @ link # VerifyVersionInfo } function . <nl> * <nl> * @ param conditionMask <nl> - * A value to be passed as the dwlConditionMask parameter of the <nl> - * VerifyVersionInfo function . The function stores the comparison <nl> - * information in the bits of this variable . <nl> - * <nl> - * Before the first call to VerSetCondition , initialize this <nl> - * variable to zero . For subsequent calls , pass in the variable <nl> - * used in the previous call . <nl> + * A value to be passed as the { @ code dwlConditionMask } parameter <nl> + * of the { @ link # VerifyVersionInfo } function . The function <nl> + * stores the comparison information in the bits of this <nl> + * variable . <nl> + * < p > <nl> + * Before the first call to { @ link # VerSetConditionMask } , <nl> + * initialize this variable to zero . For subsequent calls , pass <nl> + * in the variable used in the previous call . <nl> * @ param typeMask <nl> - * A mask that indicates the member of the OSVERSIONINFOEX <nl> - * structure whose comparison operator is being set . This value <nl> - * corresponds to one of the bits specified in the dwTypeMask <nl> - * parameter for the VerifyVersionInfo function . <nl> + * A mask that indicates the member of the <nl> + * { @ link WinNT # OSVERSIONINFOEX } structure whose comparison <nl> + * operator is being set . This value corresponds to one of the <nl> + * bits specified in the { @ code dwTypeMask } parameter for the <nl> + * { @ link # VerifyVersionInfo } function . <nl> * @ param condition <nl> * The operator to be used for the comparison . The <nl> - * VerifyVersionInfo function uses this operator to compare a <nl> - * specified attribute value to the corresponding value for the <nl> - * currently running system . <nl> + * { @ link # VerifyVersionInfo } function uses this operator to <nl> + * compare a specified attribute value to the corresponding value <nl> + * for the currently running system . <nl> * @ return The function returns the condition mask value . <nl> * / <nl> long VerSetConditionMask ( long conditionMask , int typeMask , byte condition ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / VersionHelpers . java b / contrib / platform / src / com / sun / jna / platform / win32 / VersionHelpers . java <nl> index 4d3b398 . . 2280116 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / VersionHelpers . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / VersionHelpers . java <nl> @ @ - 60 , 11 + 60 , 11 @ @ public class VersionHelpers { <nl> <nl> long dwlConditionMask = 0 ; <nl> dwlConditionMask = Kernel32 . INSTANCE . VerSetConditionMask ( dwlConditionMask , WinNT . VER _ MAJORVERSION , <nl> - WinNT . VER _ GREATER _ EQUAL ) ; <nl> + ( byte ) WinNT . VER _ GREATER _ EQUAL ) ; <nl> dwlConditionMask = Kernel32 . INSTANCE . VerSetConditionMask ( dwlConditionMask , WinNT . VER _ MINORVERSION , <nl> - WinNT . VER _ GREATER _ EQUAL ) ; <nl> + ( byte ) WinNT . VER _ GREATER _ EQUAL ) ; <nl> dwlConditionMask = Kernel32 . INSTANCE . VerSetConditionMask ( dwlConditionMask , WinNT . VER _ SERVICEPACKMAJOR , <nl> - WinNT . VER _ GREATER _ EQUAL ) ; <nl> + ( byte ) WinNT . VER _ GREATER _ EQUAL ) ; <nl> <nl> return Kernel32 . INSTANCE . VerifyVersionInfoW ( osvi , <nl> WinNT . VER _ MAJORVERSION | WinNT . VER _ MINORVERSION | WinNT . VER _ SERVICEPACKMAJOR , dwlConditionMask ) ; <nl> @ @ - 75 , 7 + 75 , 8 @ @ public class VersionHelpers { <nl> * Windows XP version . <nl> * / <nl> public static boolean IsWindowsXPOrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , 0 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WINXP > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WINXP , <nl> + 0 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 83 , 7 + 84 , 8 @ @ public class VersionHelpers { <nl> * Windows XP with Service Pack 1 ( SP1 ) version . <nl> * / <nl> public static boolean IsWindowsXPSP1OrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , 1 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WINXP > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WINXP , <nl> + 1 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 91 , 7 + 93 , 8 @ @ public class VersionHelpers { <nl> * Windows XP with Service Pack 2 ( SP2 ) version . <nl> * / <nl> public static boolean IsWindowsXPSP2OrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , 2 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WINXP > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WINXP , <nl> + 2 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 99 , 7 + 102 , 8 @ @ public class VersionHelpers { <nl> * Windows XP with Service Pack 3 ( SP3 ) version . <nl> * / <nl> public static boolean IsWindowsXPSP3OrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , 3 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WINXP > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WINXP , <nl> + 3 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 107 , 7 + 111 , 8 @ @ public class VersionHelpers { <nl> * Windows Vista version . <nl> * / <nl> public static boolean IsWindowsVistaOrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , LOBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , 0 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ VISTA > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ VISTA , <nl> + 0 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 115 , 7 + 120 , 8 @ @ public class VersionHelpers { <nl> * Windows Vista with Service Pack 1 ( SP1 ) version . <nl> * / <nl> public static boolean IsWindowsVistaSP1OrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , LOBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , 1 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ VISTA > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ VISTA , <nl> + 1 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 123 , 7 + 129 , 8 @ @ public class VersionHelpers { <nl> * Windows Vista with Service Pack 2 ( SP2 ) version . <nl> * / <nl> public static boolean IsWindowsVistaSP2OrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , LOBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , 2 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ VISTA > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ VISTA , <nl> + 2 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 131 , 7 + 138 , 7 @ @ public class VersionHelpers { <nl> * Windows 7 version . <nl> * / <nl> public static boolean IsWindows7OrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WIN7 ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WIN7 ) , 0 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WIN7 > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WIN7 , 0 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 139 , 7 + 146 , 7 @ @ public class VersionHelpers { <nl> * Windows 7 with Service Pack 1 ( SP1 ) version . <nl> * / <nl> public static boolean IsWindows7SP1OrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WIN7 ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WIN7 ) , 1 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WIN7 > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WIN7 , 1 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 147 , 29 + 154 , 32 @ @ public class VersionHelpers { <nl> * Windows 8 version . <nl> * / <nl> public static boolean IsWindows8OrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WIN8 ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WIN8 ) , 0 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WIN8 > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WIN8 , 0 ) ; <nl> } <nl> <nl> / * * <nl> * @ return true if the current OS version matches , or is greater than , the <nl> - * Windows 8 . 1 version . For Windows 10 , IsWindows8Point1OrGreater <nl> - * returns false unless the application contains a manifest that <nl> - * includes a compatibility section that contains the GUIDs that <nl> - * designate Windows 8 . 1 and / or Windows 10 . <nl> + * Windows 8 . 1 version . For Windows 8 . 1 and / or Windows 10 , <nl> + * { @ link # IsWindows8Point1OrGreater } returns false unless the <nl> + * application contains a manifest that includes a compatibility <nl> + * section that contains the GUIDs that designate Windows 8 . 1 and / or <nl> + * Windows 10 . <nl> * / <nl> public static boolean IsWindows8Point1OrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WINBLUE ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WINBLUE ) , 0 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WINBLUE > > > 8 ) , <nl> + ( byte ) Kernel32 . WIN32 _ WINNT _ WINBLUE , 0 ) ; <nl> } <nl> <nl> / * * <nl> * @ return true if the current OS version matches , or is greater than , the <nl> - * Windows 10 version . For Windows 10 , IsWindows10OrGreater returns <nl> - * false unless the application contains a manifest that includes a <nl> - * compatibility section that contains the GUID that designates <nl> - * Windows 10 . <nl> + * Windows 10 version . For Windows 10 , <nl> + * { @ link # IsWindows8Point1OrGreater } returns false unless the <nl> + * application contains a manifest that includes a compatibility <nl> + * section that contains the GUID that designates Windows 10 . <nl> * / <nl> public static boolean IsWindows10OrGreater ( ) { <nl> - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WIN10 ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WIN10 ) , 0 ) ; <nl> + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WIN10 > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WIN10 , <nl> + 0 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 183 , 31 + 193 , 10 @ @ public class VersionHelpers { <nl> osvi . dwOSVersionInfoSize = new DWORD ( osvi . size ( ) ) ; <nl> osvi . wProductType = WinNT . VER _ NT _ WORKSTATION ; <nl> <nl> - long dwlConditionMask = Kernel32 . INSTANCE . VerSetConditionMask ( 0 , WinNT . VER _ PRODUCT _ TYPE , WinNT . VER _ EQUAL ) ; <nl> + long dwlConditionMask = Kernel32 . INSTANCE . VerSetConditionMask ( 0 , WinNT . VER _ PRODUCT _ TYPE , <nl> + ( byte ) WinNT . VER _ EQUAL ) ; <nl> <nl> return ! Kernel32 . INSTANCE . VerifyVersionInfoW ( osvi , WinNT . VER _ PRODUCT _ TYPE , dwlConditionMask ) ; <nl> } <nl> - <nl> - / * * <nl> - * Get the high byte <nl> - * <nl> - * @ param word <nl> - * a two - byte value <nl> - * @ return The most significant byte <nl> - * / <nl> - private static byte HIBYTE ( short word ) { <nl> - return ( byte ) ( ( word > > 8 ) & 0xFF ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Get the low byte <nl> - * <nl> - * @ param word <nl> - * a two - byte value <nl> - * @ return The least significant byte <nl> - * / <nl> - private static byte LOBYTE ( short word ) { <nl> - return ( byte ) word ; <nl> - } <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> index 860d95a . . 315f8e9 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> @ @ - 1988 , 13 + 1988 , 13 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> } <nl> } <nl> <nl> - byte VER _ EQUAL = 1 ; <nl> - byte VER _ GREATER = 2 ; <nl> - byte VER _ GREATER _ EQUAL = 3 ; <nl> - byte VER _ LESS = 4 ; <nl> - byte VER _ LESS _ EQUAL = 5 ; <nl> - byte VER _ AND = 6 ; <nl> - byte VER _ OR = 7 ; <nl> + int VER _ EQUAL = 1 ; <nl> + int VER _ GREATER = 2 ; <nl> + int VER _ GREATER _ EQUAL = 3 ; <nl> + int VER _ LESS = 4 ; <nl> + int VER _ LESS _ EQUAL = 5 ; <nl> + int VER _ AND = 6 ; <nl> + int VER _ OR = 7 ; <nl> <nl> int VER _ CONDITION _ MASK = 7 ; <nl> int VER _ NUM _ BITS _ PER _ CONDITION _ MASK = 3 ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 9440de9 . . a9cd8f6 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 2 , 7 + 2 , 7 @ @ NOTE : as of JNA 4 . 0 , JNA is now dual - licensed under LGPL and AL 2 . 0 ( see LICENSE 
 
 NOTE : JNI native support is typically incompatible between minor versions , and almost always incompatible between major versions . 
 
 - Next release ( 5 . 2 . 1 ) 
 + Next release ( 5 . 3 . 0 ) 
 = = = = = = = = = = = = = = = = = = = = 
 
 Features 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 index 9f60001 . . e012b13 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 @ @ - 1414 , 66 + 1414 , 68 @ @ public interface Kernel32 extends StdCallLibrary , WinNT , Wincon { 
 boolean GetVersionEx ( OSVERSIONINFOEX lpVersionInfo ) ; 
 
 / * * 
 - * The VerifyVersionInfoW function compares a set of operating system 
 - * version requirements to the corresponding values for the currently 
 - * running version of the system . This function is subject to manifest - based 
 - * behavior . 
 + * Compares a set of operating system version requirements to the 
 + * corresponding values for the currently running version of the system . 
 + * This function is subject to manifest - based behavior . 
 * 
 * @ param lpVersionInformation 
 - * A pointer to an OSVERSIONINFOEX structure containing the 
 - * operating system version requirements to compare . The 
 - * dwTypeMask parameter indicates the members of this structure 
 - * that contain information to compare . 
 - * 
 - * You must set the dwOSVersionInfoSize member of this structure 
 - * to sizeof ( OSVERSIONINFOEX ) . You must also specify valid data 
 - * for the members indicated by dwTypeMask . The function ignores 
 - * structure members for which the corresponding dwTypeMask bit 
 - * is not set . 
 + * A pointer to an { @ link WinNT # OSVERSIONINFOEX } structure 
 + * containing the operating system version requirements to 
 + * compare . The { @ code dwTypeMask } parameter indicates the 
 + * members of this structure that contain information to compare . 
 + * < p > 
 + * You must set the { @ code dwOSVersionInfoSize } member of this 
 + * structure to { @ code sizeof ( OSVERSIONINFOEX ) } . You must also 
 + * specify valid data for the members indicated by 
 + * { @ code dwTypeMask } . The function ignores structure members for 
 + * which the corresponding { @ code dwTypeMask } bit is not set . 
 * @ param dwTypeMask 
 - * A mask that indicates the members of the OSVERSIONINFOEX 
 - * structure to be tested . 
 + * A mask that indicates the members of the 
 + * { @ link WinNT # OSVERSIONINFOEX } structure to be tested . 
 * @ param dwlConditionMask 
 - * The type of comparison to be used for each lpVersionInfo 
 - * member being compared . To build this value , call the 
 - * VerSetConditionMask function once for each OSVERSIONINFOEX 
 - * member being compared . 
 + * The type of comparison to be used for each 
 + * { @ code lpVersionInfo } member being compared . To build this 
 + * value , call the { @ link # VerSetConditionMask } function once for 
 + * each { @ link WinNT # OSVERSIONINFOEX } member being compared . 
 * @ return If the currently running operating system satisfies the specified 
 * requirements , the return value is a nonzero value . 
 - * 
 + * < p > 
 * If the current system does not satisfy the requirements , the 
 - * return value is zero and GetLastError returns 
 - * ERROR _ OLD _ WIN _ VERSION . 
 - * 
 - * If the function fails , the return value is zero and GetLastError 
 - * returns an error code other than ERROR _ OLD _ WIN _ VERSION . 
 + * return value is zero and { @ link # GetLastError ( ) } returns 
 + * { @ link WinError # ERROR _ OLD _ WIN _ VERSION } . 
 + * < p > 
 + * If the function fails , the return value is zero and 
 + * { @ link # GetLastError ( ) } returns an error code other than 
 + * { @ link WinError # ERROR _ OLD _ WIN _ VERSION } . 
 * / 
 boolean VerifyVersionInfoW ( OSVERSIONINFOEX lpVersionInformation , int dwTypeMask , long dwlConditionMask ) ; 
 
 / * * 
 - * The VerSetConditionMask function sets the bits of a 64 - bit value to 
 - * indicate the comparison operator to use for a specified operating system 
 - * version attribute . This function is used to build the dwlConditionMask 
 - * parameter of the VerifyVersionInfo function . 
 + * Sets the bits of a 64 - bit value to indicate the comparison operator to 
 + * use for a specified operating system version attribute . This function is 
 + * used to build the { @ code dwlConditionMask } parameter of the 
 + * { @ link # VerifyVersionInfo } function . 
 * 
 * @ param conditionMask 
 - * A value to be passed as the dwlConditionMask parameter of the 
 - * VerifyVersionInfo function . The function stores the comparison 
 - * information in the bits of this variable . 
 - * 
 - * Before the first call to VerSetCondition , initialize this 
 - * variable to zero . For subsequent calls , pass in the variable 
 - * used in the previous call . 
 + * A value to be passed as the { @ code dwlConditionMask } parameter 
 + * of the { @ link # VerifyVersionInfo } function . The function 
 + * stores the comparison information in the bits of this 
 + * variable . 
 + * < p > 
 + * Before the first call to { @ link # VerSetConditionMask } , 
 + * initialize this variable to zero . For subsequent calls , pass 
 + * in the variable used in the previous call . 
 * @ param typeMask 
 - * A mask that indicates the member of the OSVERSIONINFOEX 
 - * structure whose comparison operator is being set . This value 
 - * corresponds to one of the bits specified in the dwTypeMask 
 - * parameter for the VerifyVersionInfo function . 
 + * A mask that indicates the member of the 
 + * { @ link WinNT # OSVERSIONINFOEX } structure whose comparison 
 + * operator is being set . This value corresponds to one of the 
 + * bits specified in the { @ code dwTypeMask } parameter for the 
 + * { @ link # VerifyVersionInfo } function . 
 * @ param condition 
 * The operator to be used for the comparison . The 
 - * VerifyVersionInfo function uses this operator to compare a 
 - * specified attribute value to the corresponding value for the 
 - * currently running system . 
 + * { @ link # VerifyVersionInfo } function uses this operator to 
 + * compare a specified attribute value to the corresponding value 
 + * for the currently running system . 
 * @ return The function returns the condition mask value . 
 * / 
 long VerSetConditionMask ( long conditionMask , int typeMask , byte condition ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / VersionHelpers . java b / contrib / platform / src / com / sun / jna / platform / win32 / VersionHelpers . java 
 index 4d3b398 . . 2280116 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / VersionHelpers . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / VersionHelpers . java 
 @ @ - 60 , 11 + 60 , 11 @ @ public class VersionHelpers { 
 
 long dwlConditionMask = 0 ; 
 dwlConditionMask = Kernel32 . INSTANCE . VerSetConditionMask ( dwlConditionMask , WinNT . VER _ MAJORVERSION , 
 - WinNT . VER _ GREATER _ EQUAL ) ; 
 + ( byte ) WinNT . VER _ GREATER _ EQUAL ) ; 
 dwlConditionMask = Kernel32 . INSTANCE . VerSetConditionMask ( dwlConditionMask , WinNT . VER _ MINORVERSION , 
 - WinNT . VER _ GREATER _ EQUAL ) ; 
 + ( byte ) WinNT . VER _ GREATER _ EQUAL ) ; 
 dwlConditionMask = Kernel32 . INSTANCE . VerSetConditionMask ( dwlConditionMask , WinNT . VER _ SERVICEPACKMAJOR , 
 - WinNT . VER _ GREATER _ EQUAL ) ; 
 + ( byte ) WinNT . VER _ GREATER _ EQUAL ) ; 
 
 return Kernel32 . INSTANCE . VerifyVersionInfoW ( osvi , 
 WinNT . VER _ MAJORVERSION | WinNT . VER _ MINORVERSION | WinNT . VER _ SERVICEPACKMAJOR , dwlConditionMask ) ; 
 @ @ - 75 , 7 + 75 , 8 @ @ public class VersionHelpers { 
 * Windows XP version . 
 * / 
 public static boolean IsWindowsXPOrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , 0 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WINXP > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WINXP , 
 + 0 ) ; 
 } 
 
 / * * 
 @ @ - 83 , 7 + 84 , 8 @ @ public class VersionHelpers { 
 * Windows XP with Service Pack 1 ( SP1 ) version . 
 * / 
 public static boolean IsWindowsXPSP1OrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , 1 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WINXP > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WINXP , 
 + 1 ) ; 
 } 
 
 / * * 
 @ @ - 91 , 7 + 93 , 8 @ @ public class VersionHelpers { 
 * Windows XP with Service Pack 2 ( SP2 ) version . 
 * / 
 public static boolean IsWindowsXPSP2OrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , 2 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WINXP > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WINXP , 
 + 2 ) ; 
 } 
 
 / * * 
 @ @ - 99 , 7 + 102 , 8 @ @ public class VersionHelpers { 
 * Windows XP with Service Pack 3 ( SP3 ) version . 
 * / 
 public static boolean IsWindowsXPSP3OrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WINXP ) , 3 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WINXP > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WINXP , 
 + 3 ) ; 
 } 
 
 / * * 
 @ @ - 107 , 7 + 111 , 8 @ @ public class VersionHelpers { 
 * Windows Vista version . 
 * / 
 public static boolean IsWindowsVistaOrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , LOBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , 0 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ VISTA > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ VISTA , 
 + 0 ) ; 
 } 
 
 / * * 
 @ @ - 115 , 7 + 120 , 8 @ @ public class VersionHelpers { 
 * Windows Vista with Service Pack 1 ( SP1 ) version . 
 * / 
 public static boolean IsWindowsVistaSP1OrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , LOBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , 1 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ VISTA > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ VISTA , 
 + 1 ) ; 
 } 
 
 / * * 
 @ @ - 123 , 7 + 129 , 8 @ @ public class VersionHelpers { 
 * Windows Vista with Service Pack 2 ( SP2 ) version . 
 * / 
 public static boolean IsWindowsVistaSP2OrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , LOBYTE ( WinNT . WIN32 _ WINNT _ VISTA ) , 2 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ VISTA > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ VISTA , 
 + 2 ) ; 
 } 
 
 / * * 
 @ @ - 131 , 7 + 138 , 7 @ @ public class VersionHelpers { 
 * Windows 7 version . 
 * / 
 public static boolean IsWindows7OrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WIN7 ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WIN7 ) , 0 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WIN7 > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WIN7 , 0 ) ; 
 } 
 
 / * * 
 @ @ - 139 , 7 + 146 , 7 @ @ public class VersionHelpers { 
 * Windows 7 with Service Pack 1 ( SP1 ) version . 
 * / 
 public static boolean IsWindows7SP1OrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WIN7 ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WIN7 ) , 1 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WIN7 > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WIN7 , 1 ) ; 
 } 
 
 / * * 
 @ @ - 147 , 29 + 154 , 32 @ @ public class VersionHelpers { 
 * Windows 8 version . 
 * / 
 public static boolean IsWindows8OrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WIN8 ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WIN8 ) , 0 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WIN8 > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WIN8 , 0 ) ; 
 } 
 
 / * * 
 * @ return true if the current OS version matches , or is greater than , the 
 - * Windows 8 . 1 version . For Windows 10 , IsWindows8Point1OrGreater 
 - * returns false unless the application contains a manifest that 
 - * includes a compatibility section that contains the GUIDs that 
 - * designate Windows 8 . 1 and / or Windows 10 . 
 + * Windows 8 . 1 version . For Windows 8 . 1 and / or Windows 10 , 
 + * { @ link # IsWindows8Point1OrGreater } returns false unless the 
 + * application contains a manifest that includes a compatibility 
 + * section that contains the GUIDs that designate Windows 8 . 1 and / or 
 + * Windows 10 . 
 * / 
 public static boolean IsWindows8Point1OrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WINBLUE ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WINBLUE ) , 0 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WINBLUE > > > 8 ) , 
 + ( byte ) Kernel32 . WIN32 _ WINNT _ WINBLUE , 0 ) ; 
 } 
 
 / * * 
 * @ return true if the current OS version matches , or is greater than , the 
 - * Windows 10 version . For Windows 10 , IsWindows10OrGreater returns 
 - * false unless the application contains a manifest that includes a 
 - * compatibility section that contains the GUID that designates 
 - * Windows 10 . 
 + * Windows 10 version . For Windows 10 , 
 + * { @ link # IsWindows8Point1OrGreater } returns false unless the 
 + * application contains a manifest that includes a compatibility 
 + * section that contains the GUID that designates Windows 10 . 
 * / 
 public static boolean IsWindows10OrGreater ( ) { 
 - return IsWindowsVersionOrGreater ( HIBYTE ( WinNT . WIN32 _ WINNT _ WIN10 ) , LOBYTE ( WinNT . WIN32 _ WINNT _ WIN10 ) , 0 ) ; 
 + return IsWindowsVersionOrGreater ( ( byte ) ( Kernel32 . WIN32 _ WINNT _ WIN10 > > > 8 ) , ( byte ) Kernel32 . WIN32 _ WINNT _ WIN10 , 
 + 0 ) ; 
 } 
 
 / * * 
 @ @ - 183 , 31 + 193 , 10 @ @ public class VersionHelpers { 
 osvi . dwOSVersionInfoSize = new DWORD ( osvi . size ( ) ) ; 
 osvi . wProductType = WinNT . VER _ NT _ WORKSTATION ; 
 
 - long dwlConditionMask = Kernel32 . INSTANCE . VerSetConditionMask ( 0 , WinNT . VER _ PRODUCT _ TYPE , WinNT . VER _ EQUAL ) ; 
 + long dwlConditionMask = Kernel32 . INSTANCE . VerSetConditionMask ( 0 , WinNT . VER _ PRODUCT _ TYPE , 
 + ( byte ) WinNT . VER _ EQUAL ) ; 
 
 return ! Kernel32 . INSTANCE . VerifyVersionInfoW ( osvi , WinNT . VER _ PRODUCT _ TYPE , dwlConditionMask ) ; 
 } 
 - 
 - / * * 
 - * Get the high byte 
 - * 
 - * @ param word 
 - * a two - byte value 
 - * @ return The most significant byte 
 - * / 
 - private static byte HIBYTE ( short word ) { 
 - return ( byte ) ( ( word > > 8 ) & 0xFF ) ; 
 - } 
 - 
 - / * * 
 - * Get the low byte 
 - * 
 - * @ param word 
 - * a two - byte value 
 - * @ return The least significant byte 
 - * / 
 - private static byte LOBYTE ( short word ) { 
 - return ( byte ) word ; 
 - } 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 index 860d95a . . 315f8e9 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 @ @ - 1988 , 13 + 1988 , 13 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 } 
 } 
 
 - byte VER _ EQUAL = 1 ; 
 - byte VER _ GREATER = 2 ; 
 - byte VER _ GREATER _ EQUAL = 3 ; 
 - byte VER _ LESS = 4 ; 
 - byte VER _ LESS _ EQUAL = 5 ; 
 - byte VER _ AND = 6 ; 
 - byte VER _ OR = 7 ; 
 + int VER _ EQUAL = 1 ; 
 + int VER _ GREATER = 2 ; 
 + int VER _ GREATER _ EQUAL = 3 ; 
 + int VER _ LESS = 4 ; 
 + int VER _ LESS _ EQUAL = 5 ; 
 + int VER _ AND = 6 ; 
 + int VER _ OR = 7 ; 
 
 int VER _ CONDITION _ MASK = 7 ; 
 int VER _ NUM _ BITS _ PER _ CONDITION _ MASK = 3 ;

NEAREST DIFF:
ELIMINATEDSENTENCE
