BLEU SCORE: 0.6389431042462724

TEST MSG: fix file mods
GENERATED MSG: fix file perms

TEST DIFF (one line): diff - - git a / native / Makefile b / native / Makefile <nl> old mode 100755 <nl> new mode 100644 <nl> diff - - git a / pom - jna . xml b / pom - jna . xml <nl> old mode 100755 <nl> new mode 100644 <nl> diff - - git a / pom - platform . xml b / pom - platform . xml <nl> old mode 100755 <nl> new mode 100644 <nl> diff - - git a / src / com / sun / jna / Version . java b / src / com / sun / jna / Version . java <nl> old mode 100755 <nl> new mode 100644
NEAREST DIFF (one line): diff - - git a / native / callback . c b / native / callback . c <nl> index 44a9068 . . 348f29d 100644 <nl> - - - a / native / callback . c <nl> + + + b / native / callback . c <nl> @ @ - 167 , 16 + 167 , 17 @ @ create _ callback ( JNIEnv * env , jobject obj , jobject method , <nl> rtype = ' * ' ; <nl> } <nl> switch ( rtype ) { <nl> - case ' V ' : cb - > fptr = ( * env ) - > CallVoidMethod ; break ; <nl> - case ' Z ' : cb - > fptr = ( * env ) - > CallBooleanMethod ; break ; <nl> - case ' B ' : cb - > fptr = ( * env ) - > CallByteMethod ; break ; <nl> - case ' S ' : cb - > fptr = ( * env ) - > CallShortMethod ; break ; <nl> - case ' C ' : cb - > fptr = ( * env ) - > CallCharMethod ; break ; <nl> - case ' I ' : cb - > fptr = ( * env ) - > CallIntMethod ; break ; <nl> - case ' J ' : cb - > fptr = ( * env ) - > CallLongMethod ; break ; <nl> - case ' F ' : cb - > fptr = ( * env ) - > CallFloatMethod ; break ; <nl> - case ' D ' : cb - > fptr = ( * env ) - > CallDoubleMethod ; break ; <nl> - default : cb - > fptr = ( * env ) - > CallObjectMethod ; break ; <nl> + # define OFFSETOF ( ENV , METHOD ) ( ( size _ t ) ( ( char * ) & ( * ( ENV ) ) - > METHOD - ( char * ) ( * ( ENV ) ) ) ) <nl> + case ' V ' : cb - > fptr _ offset = OFFSETOF ( env , CallVoidMethod ) ; break ; <nl> + case ' Z ' : cb - > fptr _ offset = OFFSETOF ( env , CallBooleanMethod ) ; break ; <nl> + case ' B ' : cb - > fptr _ offset = OFFSETOF ( env , CallByteMethod ) ; break ; <nl> + case ' S ' : cb - > fptr _ offset = OFFSETOF ( env , CallShortMethod ) ; break ; <nl> + case ' C ' : cb - > fptr _ offset = OFFSETOF ( env , CallCharMethod ) ; break ; <nl> + case ' I ' : cb - > fptr _ offset = OFFSETOF ( env , CallIntMethod ) ; break ; <nl> + case ' J ' : cb - > fptr _ offset = OFFSETOF ( env , CallLongMethod ) ; break ; <nl> + case ' F ' : cb - > fptr _ offset = OFFSETOF ( env , CallFloatMethod ) ; break ; <nl> + case ' D ' : cb - > fptr _ offset = OFFSETOF ( env , CallDoubleMethod ) ; break ; <nl> + default : cb - > fptr _ offset = OFFSETOF ( env , CallObjectMethod ) ; break ; <nl> } <nl> status = ffi _ prep _ cif ( & cb - > java _ cif , java _ abi , argc + 3 , java _ ffi _ rtype , cb - > java _ arg _ types ) ; <nl> if ( ! ffi _ error ( env , " callback setup ( 2 ) " , status ) ) { <nl> @ @ - 311 , 7 + 312 , 9 @ @ callback _ invoke ( JNIEnv * env , callback * cb , ffi _ cif * cif , void * resp , void * * cbar <nl> else if ( cb - > cif . rtype - > size > cif - > rtype - > size ) { <nl> resp = alloca ( cb - > cif . rtype - > size ) ; <nl> } <nl> - ffi _ call ( & cb - > java _ cif , FFI _ FN ( cb - > fptr ) , resp , args ) ; <nl> + # define FPTR ( ENV , OFFSET ) ( * ( void * * ) ( ( char * ) ( * ( ENV ) ) + OFFSET ) ) <nl> + # define JNI _ FN ( X ) ( ( void ( JNICALL * ) ( void ) ) ( X ) ) <nl> + ffi _ call ( & cb - > java _ cif , JNI _ FN ( FPTR ( env , cb - > fptr _ offset ) ) , resp , args ) ; <nl> if ( ( * env ) - > ExceptionCheck ( env ) ) { <nl> jthrowable throwable = ( * env ) - > ExceptionOccurred ( env ) ; <nl> ( * env ) - > ExceptionClear ( env ) ; <nl> diff - - git a / native / dispatch . h b / native / dispatch . h <nl> index d11936b . . 20c5593 100644 <nl> - - - a / native / dispatch . h <nl> + + + b / native / dispatch . h <nl> @ @ - 107 , 7 + 107 , 7 @ @ typedef struct _ callback { <nl> jmethodID methodID ; <nl> char * arg _ jtypes ; <nl> jboolean direct ; <nl> - void * fptr ; <nl> + size _ t fptr _ offset ; <nl> } callback ; <nl> <nl> # if defined ( SOLARIS2 ) | | defined ( _ _ GNUC _ _ )

TEST DIFF:
diff - - git a / native / Makefile b / native / Makefile 
 old mode 100755 
 new mode 100644 
 diff - - git a / pom - jna . xml b / pom - jna . xml 
 old mode 100755 
 new mode 100644 
 diff - - git a / pom - platform . xml b / pom - platform . xml 
 old mode 100755 
 new mode 100644 
 diff - - git a / src / com / sun / jna / Version . java b / src / com / sun / jna / Version . java 
 old mode 100755 
 new mode 100644

NEAREST DIFF:
diff - - git a / native / callback . c b / native / callback . c 
 index 44a9068 . . 348f29d 100644 
 - - - a / native / callback . c 
 + + + b / native / callback . c 
 @ @ - 167 , 16 + 167 , 17 @ @ create _ callback ( JNIEnv * env , jobject obj , jobject method , 
 rtype = ' * ' ; 
 } 
 switch ( rtype ) { 
 - case ' V ' : cb - > fptr = ( * env ) - > CallVoidMethod ; break ; 
 - case ' Z ' : cb - > fptr = ( * env ) - > CallBooleanMethod ; break ; 
 - case ' B ' : cb - > fptr = ( * env ) - > CallByteMethod ; break ; 
 - case ' S ' : cb - > fptr = ( * env ) - > CallShortMethod ; break ; 
 - case ' C ' : cb - > fptr = ( * env ) - > CallCharMethod ; break ; 
 - case ' I ' : cb - > fptr = ( * env ) - > CallIntMethod ; break ; 
 - case ' J ' : cb - > fptr = ( * env ) - > CallLongMethod ; break ; 
 - case ' F ' : cb - > fptr = ( * env ) - > CallFloatMethod ; break ; 
 - case ' D ' : cb - > fptr = ( * env ) - > CallDoubleMethod ; break ; 
 - default : cb - > fptr = ( * env ) - > CallObjectMethod ; break ; 
 + # define OFFSETOF ( ENV , METHOD ) ( ( size _ t ) ( ( char * ) & ( * ( ENV ) ) - > METHOD - ( char * ) ( * ( ENV ) ) ) ) 
 + case ' V ' : cb - > fptr _ offset = OFFSETOF ( env , CallVoidMethod ) ; break ; 
 + case ' Z ' : cb - > fptr _ offset = OFFSETOF ( env , CallBooleanMethod ) ; break ; 
 + case ' B ' : cb - > fptr _ offset = OFFSETOF ( env , CallByteMethod ) ; break ; 
 + case ' S ' : cb - > fptr _ offset = OFFSETOF ( env , CallShortMethod ) ; break ; 
 + case ' C ' : cb - > fptr _ offset = OFFSETOF ( env , CallCharMethod ) ; break ; 
 + case ' I ' : cb - > fptr _ offset = OFFSETOF ( env , CallIntMethod ) ; break ; 
 + case ' J ' : cb - > fptr _ offset = OFFSETOF ( env , CallLongMethod ) ; break ; 
 + case ' F ' : cb - > fptr _ offset = OFFSETOF ( env , CallFloatMethod ) ; break ; 
 + case ' D ' : cb - > fptr _ offset = OFFSETOF ( env , CallDoubleMethod ) ; break ; 
 + default : cb - > fptr _ offset = OFFSETOF ( env , CallObjectMethod ) ; break ; 
 } 
 status = ffi _ prep _ cif ( & cb - > java _ cif , java _ abi , argc + 3 , java _ ffi _ rtype , cb - > java _ arg _ types ) ; 
 if ( ! ffi _ error ( env , " callback setup ( 2 ) " , status ) ) { 
 @ @ - 311 , 7 + 312 , 9 @ @ callback _ invoke ( JNIEnv * env , callback * cb , ffi _ cif * cif , void * resp , void * * cbar 
 else if ( cb - > cif . rtype - > size > cif - > rtype - > size ) { 
 resp = alloca ( cb - > cif . rtype - > size ) ; 
 } 
 - ffi _ call ( & cb - > java _ cif , FFI _ FN ( cb - > fptr ) , resp , args ) ; 
 + # define FPTR ( ENV , OFFSET ) ( * ( void * * ) ( ( char * ) ( * ( ENV ) ) + OFFSET ) ) 
 + # define JNI _ FN ( X ) ( ( void ( JNICALL * ) ( void ) ) ( X ) ) 
 + ffi _ call ( & cb - > java _ cif , JNI _ FN ( FPTR ( env , cb - > fptr _ offset ) ) , resp , args ) ; 
 if ( ( * env ) - > ExceptionCheck ( env ) ) { 
 jthrowable throwable = ( * env ) - > ExceptionOccurred ( env ) ; 
 ( * env ) - > ExceptionClear ( env ) ; 
 diff - - git a / native / dispatch . h b / native / dispatch . h 
 index d11936b . . 20c5593 100644 
 - - - a / native / dispatch . h 
 + + + b / native / dispatch . h 
 @ @ - 107 , 7 + 107 , 7 @ @ typedef struct _ callback { 
 jmethodID methodID ; 
 char * arg _ jtypes ; 
 jboolean direct ; 
 - void * fptr ; 
 + size _ t fptr _ offset ; 
 } callback ; 
 
 # if defined ( SOLARIS2 ) | | defined ( _ _ GNUC _ _ )
