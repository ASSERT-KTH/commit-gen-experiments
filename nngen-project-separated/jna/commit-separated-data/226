BLEU SCORE: 0.021504238591261653

TEST MSG: Use unicode escapes to avoid w32 compilation errors
GENERATED MSG: add commented example of test for individual Structure class .

TEST DIFF (one line): diff - - git a / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java <nl> index 8902fe6 . . 6abd401 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java <nl> @ @ - 84 , 7 + 84 , 13 @ @ public class XAttrUtilTest extends TestCase { <nl> 	 } <nl> <nl> 	 public void testUnicode ( ) { <nl> - 	 	 String [ ] names = new String [ ] { " 中 文 " , " に ほ ん ご " , " Ö sterreichisch " , " Fran ç aise " , " Portugu ê s " } ; <nl> + 	 	 String [ ] names = new String [ ] { <nl> + " \ u4E2D \ u6587 " , <nl> + " \ u306B \ u307B \ u3093 \ u3054 " , <nl> + " \ u00D6sterreichisch " , <nl> + " Fran \ u00E7aise " , <nl> + " Portugu \ u00EAs " , <nl> + } ; <nl> 	 	 for ( int i = 0 ; i < names . length ; i + + ) { <nl> 	 	 	 / / set xattr <nl> 	 	 	 XAttrUtil . setXAttr ( testPath , names [ i ] , names [ i ] ) ;
NEAREST DIFF (one line): diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Netapi32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Netapi32Test . java <nl> index 3e469a9 . . 058d594 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Netapi32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Netapi32Test . java <nl> @ @ - 1 , 256 + 1 , 260 @ @ <nl> - / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation ; either <nl> - * version 2 . 1 of the License , or ( at your option ) any later version . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * / <nl> - package com . sun . jna . platform . win32 ; <nl> - <nl> - import junit . framework . TestCase ; <nl> - <nl> - import com . sun . jna . WString ; <nl> - import com . sun . jna . platform . win32 . DsGetDC . DS _ DOMAIN _ TRUSTS ; <nl> - import com . sun . jna . platform . win32 . DsGetDC . PDOMAIN _ CONTROLLER _ INFO ; <nl> - import com . sun . jna . platform . win32 . LMAccess . GROUP _ INFO _ 2 ; <nl> - import com . sun . jna . platform . win32 . LMAccess . GROUP _ USERS _ INFO _ 0 ; <nl> - import com . sun . jna . platform . win32 . LMAccess . LOCALGROUP _ USERS _ INFO _ 0 ; <nl> - import com . sun . jna . platform . win32 . LMAccess . USER _ INFO _ 1 ; <nl> - import com . sun . jna . platform . win32 . NTSecApi . LSA _ FOREST _ TRUST _ RECORD ; <nl> - import com . sun . jna . platform . win32 . NTSecApi . PLSA _ FOREST _ TRUST _ INFORMATION ; <nl> - import com . sun . jna . platform . win32 . NTSecApi . PLSA _ FOREST _ TRUST _ RECORD ; <nl> - import com . sun . jna . platform . win32 . Netapi32Util . User ; <nl> - import com . sun . jna . platform . win32 . Secur32 . EXTENDED _ NAME _ FORMAT ; <nl> - import com . sun . jna . ptr . IntByReference ; <nl> - import com . sun . jna . ptr . PointerByReference ; <nl> - <nl> - / * * <nl> - * @ author dblock [ at ] dblock [ dot ] org <nl> - * / <nl> - public class Netapi32Test extends TestCase { <nl> - <nl> - public static void main ( String [ ] args ) { <nl> - junit . textui . TestRunner . run ( Netapi32Test . class ) ; <nl> - } <nl> - <nl> - public void testNetGetJoinInformation ( ) { <nl> - 	 	 IntByReference bufferType = new IntByReference ( ) ; <nl> - 	 assertEquals ( W32Errors . ERROR _ INVALID _ PARAMETER , Netapi32 . INSTANCE . NetGetJoinInformation ( <nl> - 	 	 	 null , null , bufferType ) ) ; <nl> - 	 PointerByReference lpNameBuffer = new PointerByReference ( ) ; <nl> - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetGetJoinInformation ( <nl> - 	 	 	 null , lpNameBuffer , bufferType ) ) ; <nl> - 	 assertTrue ( lpNameBuffer . getValue ( ) . getString ( 0 ) . length ( ) > 0 ) ; <nl> - 	 assertTrue ( bufferType . getValue ( ) > 0 ) ; <nl> - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( <nl> - 	 	 	 lpNameBuffer . getValue ( ) ) ) ; <nl> - } <nl> - <nl> - public void testNetGetLocalGroups ( ) { <nl> - 	 for ( int i = 0 ; i < 2 ; i + + ) { <nl> - 	 	 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> - 	 	 	 IntByReference entriesRead = new IntByReference ( ) ; <nl> - 	 	 	 IntByReference totalEntries = new IntByReference ( ) ; 	 	 <nl> - 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetLocalGroupEnum ( null , i , bufptr , <nl> - 	 	 	 	 LMCons . MAX _ PREFERRED _ LENGTH , <nl> - 	 	 	 	 entriesRead , <nl> - 	 	 	 	 totalEntries , <nl> - 	 	 	 	 null ) ) ; <nl> - 	 	 assertTrue ( entriesRead . getValue ( ) > 0 ) ; <nl> - 	 	 assertEquals ( totalEntries . getValue ( ) , entriesRead . getValue ( ) ) ; <nl> - 	 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( <nl> - 	 	 	 	 bufptr . getValue ( ) ) ) ; <nl> - 	 } <nl> - } <nl> - <nl> - public void testNetGetDCName ( ) { <nl> - 	 PointerByReference lpNameBuffer = new PointerByReference ( ) ; <nl> - 	 IntByReference BufferType = new IntByReference ( ) ; <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGetJoinInformation ( null , lpNameBuffer , BufferType ) ) ; 	 <nl> - 	 if ( BufferType . getValue ( ) = = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) { <nl> - 	 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> - 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGetDCName ( null , null , bufptr ) ) ; <nl> - 	 	 String dc = bufptr . getValue ( ) . getString ( 0 ) ; <nl> - 	 	 assertTrue ( dc . length ( ) > 0 ) ; <nl> - 	 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; <nl> - 	 } <nl> - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( lpNameBuffer . getValue ( ) ) ) ; <nl> - } <nl> - <nl> - public void testNetUserGetGroups ( ) { <nl> - 	 User [ ] users = Netapi32Util . getUsers ( ) ; <nl> - 	 assertTrue ( users . length > = 1 ) ; <nl> - 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> - 	 IntByReference entriesread = new IntByReference ( ) ; <nl> - 	 IntByReference totalentries = new IntByReference ( ) ; <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserGetGroups ( <nl> - 	 	 	 null , users [ 0 ] . name , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , <nl> - 	 	 	 entriesread , totalentries ) ) ; <nl> - 	 GROUP _ USERS _ INFO _ 0 lgroup = new GROUP _ USERS _ INFO _ 0 ( bufptr . getValue ( ) ) ; 	 <nl> - 	 GROUP _ USERS _ INFO _ 0 [ ] lgroups = ( GROUP _ USERS _ INFO _ 0 [ ] ) lgroup . toArray ( entriesread . getValue ( ) ) ; <nl> - for ( GROUP _ USERS _ INFO _ 0 localGroupInfo : lgroups ) { <nl> - 	 assertTrue ( localGroupInfo . grui0 _ name . length ( ) > 0 ) ; <nl> - } <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; <nl> - } <nl> - <nl> - public void testNetUserGetLocalGroups ( ) { <nl> - 	 String currentUser = Secur32Util . getUserNameEx ( <nl> - 	 	 	 	 EXTENDED _ NAME _ FORMAT . NameSamCompatible ) ; <nl> - 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> - 	 IntByReference entriesread = new IntByReference ( ) ; <nl> - 	 IntByReference totalentries = new IntByReference ( ) ; <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserGetLocalGroups ( <nl> - 	 	 	 null , currentUser , 0 , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , <nl> - 	 	 	 entriesread , totalentries ) ) ; <nl> - 	 LOCALGROUP _ USERS _ INFO _ 0 lgroup = new LOCALGROUP _ USERS _ INFO _ 0 ( bufptr . getValue ( ) ) ; 	 <nl> - 	 LOCALGROUP _ USERS _ INFO _ 0 [ ] lgroups = ( LOCALGROUP _ USERS _ INFO _ 0 [ ] ) lgroup . toArray ( entriesread . getValue ( ) ) ; <nl> - for ( LOCALGROUP _ USERS _ INFO _ 0 localGroupInfo : lgroups ) { <nl> - 	 assertTrue ( localGroupInfo . lgrui0 _ name . length ( ) > 0 ) ; <nl> - } <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; <nl> - } <nl> - <nl> - public void testNetGroupEnum ( ) { <nl> - 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> - 	 IntByReference entriesread = new IntByReference ( ) ; <nl> - 	 IntByReference totalentries = new IntByReference ( ) ; <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGroupEnum ( <nl> - 	 	 	 null , 2 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , entriesread , totalentries , null ) ) ; 	 <nl> - 	 GROUP _ INFO _ 2 group = new GROUP _ INFO _ 2 ( bufptr . getValue ( ) ) ; 	 <nl> - 	 GROUP _ INFO _ 2 [ ] groups = ( GROUP _ INFO _ 2 [ ] ) group . toArray ( entriesread . getValue ( ) ) ; <nl> - for ( GROUP _ INFO _ 2 grpi : groups ) { <nl> - 	 assertTrue ( grpi . grpi2 _ name . length ( ) > 0 ) ; <nl> - } <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; <nl> - } <nl> - <nl> - public void testNetUserEnum ( ) { <nl> - 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> - 	 IntByReference entriesread = new IntByReference ( ) ; <nl> - 	 IntByReference totalentries = new IntByReference ( ) ; <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserEnum ( 	 	 	 <nl> - 	 	 	 null , 1 , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , entriesread , totalentries , null ) ) ; 	 <nl> - 	 USER _ INFO _ 1 userinfo = new USER _ INFO _ 1 ( bufptr . getValue ( ) ) ; 	 <nl> - 	 USER _ INFO _ 1 [ ] userinfos = ( USER _ INFO _ 1 [ ] ) userinfo . toArray ( entriesread . getValue ( ) ) ; <nl> - for ( USER _ INFO _ 1 ui : userinfos ) { <nl> - 	 assertTrue ( ui . usri1 _ name . length ( ) > 0 ) ; <nl> - } <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; <nl> - } <nl> - <nl> - public void testNetUserAdd ( ) { <nl> - 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; <nl> - 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; <nl> - 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; <nl> - 	 userInfo . usri1 _ priv = LMAccess . USER _ PRIV _ USER ; <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserAdd ( <nl> - 	 	 	 Kernel32Util . getComputerName ( ) , 1 , userInfo , null ) ) ; <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( <nl> - 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) ) ) ; <nl> - } <nl> - <nl> - public void testNetUserChangePassword ( ) { <nl> - 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; <nl> - 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; <nl> - 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; <nl> - 	 userInfo . usri1 _ priv = LMAccess . USER _ PRIV _ USER ; <nl> - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserAdd ( <nl> - 	 	 	 Kernel32Util . getComputerName ( ) , 1 , userInfo , null ) ) ; <nl> - 	 try { <nl> - 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserChangePassword ( <nl> - 	 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) , userInfo . usri1 _ password . toString ( ) , <nl> - 	 	 	 	 " ! JNAP % % Wrd1 " ) ) ; <nl> - 	 } finally { <nl> - 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( <nl> - 	 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) ) ) ; <nl> - 	 } <nl> - } <nl> - <nl> - public void testNetUserDel ( ) { <nl> - 	 assertEquals ( LMErr . NERR _ UserNotFound , Netapi32 . INSTANCE . NetUserDel ( <nl> - 	 	 	 Kernel32Util . getComputerName ( ) , " JNANetapi32TestUserDoesntExist " ) ) ; <nl> - } <nl> - <nl> - public void testDsGetDcName ( ) { <nl> - 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) <nl> - 	 	 return ; <nl> - 	 <nl> - PDOMAIN _ CONTROLLER _ INFO . ByReference pdci = new PDOMAIN _ CONTROLLER _ INFO . ByReference ( ) ; <nl> - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . DsGetDcName ( <nl> - 	 	 	 null , null , null , null , 0 , pdci ) ) ; <nl> - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( <nl> - 	 	 	 pdci . getPointer ( ) ) ) ; <nl> - } <nl> - <nl> - public void testDsGetForestTrustInformation ( ) { <nl> - 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) <nl> - 	 	 return ; <nl> - <nl> - 	 String domainController = Netapi32Util . getDCName ( ) ; 	 <nl> - 	 PLSA _ FOREST _ TRUST _ INFORMATION . ByReference pfti = new PLSA _ FOREST _ TRUST _ INFORMATION . ByReference ( ) ; <nl> - 	 assertEquals ( W32Errors . NO _ ERROR , Netapi32 . INSTANCE . DsGetForestTrustInformation ( <nl> - 	 	 	 domainController , null , 0 , pfti ) ) ; <nl> - 	 <nl> - 	 assertTrue ( pfti . fti . RecordCount > = 0 ) ; <nl> - 	 <nl> - 	 for ( PLSA _ FOREST _ TRUST _ RECORD precord : pfti . fti . getEntries ( ) ) { <nl> - 	 	 LSA _ FOREST _ TRUST _ RECORD . UNION data = precord . tr . u ; <nl> - 	 	 	 switch ( precord . tr . ForestTrustType ) { <nl> - 	 	 	 case NTSecApi . ForestTrustTopLevelName : <nl> - 	 	 case NTSecApi . ForestTrustTopLevelNameEx : <nl> - 	 	 	 assertTrue ( data . TopLevelName . Length > 0 ) ; <nl> - 	 	 	 assertTrue ( data . TopLevelName . MaximumLength > 0 ) ; <nl> - 	 	 	 assertTrue ( data . TopLevelName . MaximumLength > = data . TopLevelName . Length ) ; <nl> - 	 	 	 assertTrue ( data . TopLevelName . getString ( ) . length ( ) > 0 ) ; <nl> - 	 	 	 break ; <nl> - 	 	 case NTSecApi . ForestTrustDomainInfo : <nl> - 	 	 	 assertTrue ( data . DomainInfo . DnsName . Length > 0 ) ; <nl> - 	 	 	 assertTrue ( data . DomainInfo . DnsName . MaximumLength > 0 ) ; <nl> - 	 	 	 assertTrue ( data . DomainInfo . DnsName . MaximumLength > = data . DomainInfo . DnsName . Length ) ; <nl> - 	 	 	 assertTrue ( data . DomainInfo . DnsName . getString ( ) . length ( ) > 0 ) ; <nl> - 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . Length > 0 ) ; <nl> - 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . MaximumLength > 0 ) ; <nl> - 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . MaximumLength > = data . DomainInfo . NetbiosName . Length ) ; <nl> - 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . getString ( ) . length ( ) > 0 ) ; <nl> - 	 	 	 assertTrue ( Advapi32 . INSTANCE . IsValidSid ( data . DomainInfo . Sid ) ) ; <nl> - 	 	 	 assertTrue ( Advapi32Util . convertSidToStringSid ( data . DomainInfo . Sid ) . startsWith ( " S - " ) ) ; <nl> - 	 	 	 break ; <nl> - 	 	 	 } <nl> - 	 } <nl> - 	 <nl> - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( <nl> - 	 	 	 pfti . getPointer ( ) ) ) ; 	 <nl> - } <nl> - <nl> - <nl> - public void testDsEnumerateDomainTrusts ( ) { <nl> - 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) <nl> - 	 	 return ; <nl> - <nl> - 	 IntByReference domainTrustCount = new IntByReference ( ) ; <nl> - PointerByReference domainsPointerRef = new PointerByReference ( ) ; <nl> - assertEquals ( W32Errors . NO _ ERROR , Netapi32 . INSTANCE . DsEnumerateDomainTrusts ( null , <nl> - DsGetDC . DS _ DOMAIN _ VALID _ FLAGS , domainsPointerRef , domainTrustCount ) ) ; <nl> - 	 assertTrue ( domainTrustCount . getValue ( ) > = 0 ) ; <nl> - 	 <nl> - DS _ DOMAIN _ TRUSTS domainTrustRefs = new DS _ DOMAIN _ TRUSTS ( domainsPointerRef . getValue ( ) ) ; <nl> - DS _ DOMAIN _ TRUSTS [ ] domainTrusts = ( DS _ DOMAIN _ TRUSTS [ ] ) domainTrustRefs . toArray ( new DS _ DOMAIN _ TRUSTS [ domainTrustCount . getValue ( ) ] ) ; <nl> - <nl> - 	 for ( DS _ DOMAIN _ TRUSTS trust : domainTrusts ) { <nl> - 	 	 	 assertTrue ( trust . DnsDomainName . length ( ) > 0 ) ; <nl> - 	 	 	 assertTrue ( Advapi32 . INSTANCE . IsValidSid ( trust . DomainSid ) ) ; <nl> - 	 	 	 assertTrue ( Advapi32Util . convertSidToStringSid ( trust . DomainSid ) . startsWith ( " S - " ) ) ; <nl> - 	 	 	 assertTrue ( Ole32Util . getStringFromGUID ( trust . DomainGuid ) . startsWith ( " { " ) ) ; <nl> - 	 } <nl> - 	 <nl> + / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 ; <nl> <nl> - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( domainTrustRefs . getPointer ( ) ) ) ; 	 	 <nl> - } <nl> - <nl> - } <nl> + import junit . framework . TestCase ; <nl> + <nl> + import com . sun . jna . WString ; <nl> + import com . sun . jna . platform . win32 . DsGetDC . DS _ DOMAIN _ TRUSTS ; <nl> + import com . sun . jna . platform . win32 . DsGetDC . PDOMAIN _ CONTROLLER _ INFO ; <nl> + import com . sun . jna . platform . win32 . LMAccess . GROUP _ INFO _ 2 ; <nl> + import com . sun . jna . platform . win32 . LMAccess . GROUP _ USERS _ INFO _ 0 ; <nl> + import com . sun . jna . platform . win32 . LMAccess . LOCALGROUP _ USERS _ INFO _ 0 ; <nl> + import com . sun . jna . platform . win32 . LMAccess . USER _ INFO _ 1 ; <nl> + import com . sun . jna . platform . win32 . NTSecApi . LSA _ FOREST _ TRUST _ RECORD ; <nl> + import com . sun . jna . platform . win32 . NTSecApi . PLSA _ FOREST _ TRUST _ INFORMATION ; <nl> + import com . sun . jna . platform . win32 . NTSecApi . PLSA _ FOREST _ TRUST _ RECORD ; <nl> + import com . sun . jna . platform . win32 . Netapi32Util . User ; <nl> + import com . sun . jna . platform . win32 . Secur32 . EXTENDED _ NAME _ FORMAT ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> + <nl> + / * * <nl> + * @ author dblock [ at ] dblock [ dot ] org <nl> + * / <nl> + public class Netapi32Test extends TestCase { <nl> + <nl> + public static void main ( String [ ] args ) { <nl> + junit . textui . TestRunner . run ( Netapi32Test . class ) ; <nl> + } <nl> + <nl> + public void testNetGetJoinInformation ( ) { <nl> + 	 	 IntByReference bufferType = new IntByReference ( ) ; <nl> + 	 assertEquals ( W32Errors . ERROR _ INVALID _ PARAMETER , Netapi32 . INSTANCE . NetGetJoinInformation ( <nl> + 	 	 	 null , null , bufferType ) ) ; <nl> + 	 PointerByReference lpNameBuffer = new PointerByReference ( ) ; <nl> + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetGetJoinInformation ( <nl> + 	 	 	 null , lpNameBuffer , bufferType ) ) ; <nl> + 	 assertTrue ( lpNameBuffer . getValue ( ) . getString ( 0 ) . length ( ) > 0 ) ; <nl> + 	 assertTrue ( bufferType . getValue ( ) > 0 ) ; <nl> + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( <nl> + 	 	 	 lpNameBuffer . getValue ( ) ) ) ; <nl> + } <nl> + <nl> + public void testNetGetLocalGroups ( ) { <nl> + 	 for ( int i = 0 ; i < 2 ; i + + ) { <nl> + 	 	 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> + 	 	 	 IntByReference entriesRead = new IntByReference ( ) ; <nl> + 	 	 	 IntByReference totalEntries = new IntByReference ( ) ; 	 	 <nl> + 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetLocalGroupEnum ( null , i , bufptr , <nl> + 	 	 	 	 LMCons . MAX _ PREFERRED _ LENGTH , <nl> + 	 	 	 	 entriesRead , <nl> + 	 	 	 	 totalEntries , <nl> + 	 	 	 	 null ) ) ; <nl> + 	 	 assertTrue ( entriesRead . getValue ( ) > 0 ) ; <nl> + 	 	 assertEquals ( totalEntries . getValue ( ) , entriesRead . getValue ( ) ) ; <nl> + 	 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( <nl> + 	 	 	 	 bufptr . getValue ( ) ) ) ; <nl> + 	 } <nl> + } <nl> + <nl> + public void testNetGetDCName ( ) { <nl> + 	 PointerByReference lpNameBuffer = new PointerByReference ( ) ; <nl> + 	 IntByReference BufferType = new IntByReference ( ) ; <nl> + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGetJoinInformation ( null , lpNameBuffer , BufferType ) ) ; 	 <nl> + 	 if ( BufferType . getValue ( ) = = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) { <nl> + 	 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> + 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGetDCName ( null , null , bufptr ) ) ; <nl> + 	 	 String dc = bufptr . getValue ( ) . getString ( 0 ) ; <nl> + 	 	 assertTrue ( dc . length ( ) > 0 ) ; <nl> + 	 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; <nl> + 	 } <nl> + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( lpNameBuffer . getValue ( ) ) ) ; <nl> + } <nl> + <nl> + public void testNetUserGetGroups ( ) { <nl> + 	 User [ ] users = Netapi32Util . getUsers ( ) ; <nl> + 	 assertTrue ( users . length > = 1 ) ; <nl> + 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> + 	 IntByReference entriesread = new IntByReference ( ) ; <nl> + 	 IntByReference totalentries = new IntByReference ( ) ; <nl> + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserGetGroups ( <nl> + 	 	 	 null , users [ 0 ] . name , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , <nl> + 	 	 	 entriesread , totalentries ) ) ; <nl> + 	 GROUP _ USERS _ INFO _ 0 lgroup = new GROUP _ USERS _ INFO _ 0 ( bufptr . getValue ( ) ) ; 	 <nl> + 	 GROUP _ USERS _ INFO _ 0 [ ] lgroups = ( GROUP _ USERS _ INFO _ 0 [ ] ) lgroup . toArray ( entriesread . getValue ( ) ) ; <nl> + for ( GROUP _ USERS _ INFO _ 0 localGroupInfo : lgroups ) { <nl> + 	 assertTrue ( localGroupInfo . grui0 _ name . length ( ) > 0 ) ; <nl> + } <nl> + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; <nl> + } <nl> + <nl> + public void testNetUserGetLocalGroups ( ) { <nl> + 	 String currentUser = Secur32Util . getUserNameEx ( <nl> + 	 	 	 	 EXTENDED _ NAME _ FORMAT . NameSamCompatible ) ; <nl> + 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> + 	 IntByReference entriesread = new IntByReference ( ) ; <nl> + 	 IntByReference totalentries = new IntByReference ( ) ; <nl> + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserGetLocalGroups ( <nl> + 	 	 	 null , currentUser , 0 , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , <nl> + 	 	 	 entriesread , totalentries ) ) ; <nl> + 	 LOCALGROUP _ USERS _ INFO _ 0 lgroup = new LOCALGROUP _ USERS _ INFO _ 0 ( bufptr . getValue ( ) ) ; 	 <nl> + 	 LOCALGROUP _ USERS _ INFO _ 0 [ ] lgroups = ( LOCALGROUP _ USERS _ INFO _ 0 [ ] ) lgroup . toArray ( entriesread . getValue ( ) ) ; <nl> + for ( LOCALGROUP _ USERS _ INFO _ 0 localGroupInfo : lgroups ) { <nl> + 	 assertTrue ( localGroupInfo . lgrui0 _ name . length ( ) > 0 ) ; <nl> + } <nl> + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; <nl> + } <nl> + <nl> + public void testNetGroupEnum ( ) { <nl> + 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> + 	 IntByReference entriesread = new IntByReference ( ) ; <nl> + 	 IntByReference totalentries = new IntByReference ( ) ; <nl> + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGroupEnum ( <nl> + 	 	 	 null , 2 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , entriesread , totalentries , null ) ) ; 	 <nl> + 	 GROUP _ INFO _ 2 group = new GROUP _ INFO _ 2 ( bufptr . getValue ( ) ) ; 	 <nl> + 	 GROUP _ INFO _ 2 [ ] groups = ( GROUP _ INFO _ 2 [ ] ) group . toArray ( entriesread . getValue ( ) ) ; <nl> + for ( GROUP _ INFO _ 2 grpi : groups ) { <nl> + 	 assertTrue ( grpi . grpi2 _ name . length ( ) > 0 ) ; <nl> + } <nl> + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; <nl> + } <nl> + <nl> + public void testNetUserEnum ( ) { <nl> + 	 PointerByReference bufptr = new PointerByReference ( ) ; <nl> + 	 IntByReference entriesread = new IntByReference ( ) ; <nl> + 	 IntByReference totalentries = new IntByReference ( ) ; <nl> + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserEnum ( 	 	 	 <nl> + 	 	 	 null , 1 , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , entriesread , totalentries , null ) ) ; 	 <nl> + 	 USER _ INFO _ 1 userinfo = new USER _ INFO _ 1 ( bufptr . getValue ( ) ) ; 	 <nl> + 	 USER _ INFO _ 1 [ ] userinfos = ( USER _ INFO _ 1 [ ] ) userinfo . toArray ( entriesread . getValue ( ) ) ; <nl> + for ( USER _ INFO _ 1 ui : userinfos ) { <nl> + 	 assertTrue ( ui . usri1 _ name . length ( ) > 0 ) ; <nl> + } <nl> + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; <nl> + } <nl> + <nl> + public void testNetUserAdd ( ) { <nl> + 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; <nl> + 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; <nl> + 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; <nl> + 	 userInfo . usri1 _ priv = LMAccess . USER _ PRIV _ USER ; <nl> + / / ignore test if not able to add user ( need to be administrator to do this ) . <nl> + 	 if ( LMErr . NERR _ Success ! = Netapi32 . INSTANCE . NetUserAdd ( Kernel32Util . getComputerName ( ) , 1 , userInfo , null ) ) { <nl> + return ; <nl> + } <nl> + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( <nl> + 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) ) ) ; <nl> + } <nl> + <nl> + public void testNetUserChangePassword ( ) { <nl> + 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; <nl> + 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; <nl> + 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; <nl> + 	 userInfo . usri1 _ priv = LMAccess . USER _ PRIV _ USER ; <nl> + / / ignore test if not able to add user ( need to be administrator to do this ) . <nl> + 	 if ( LMErr . NERR _ Success ! = Netapi32 . INSTANCE . NetUserAdd ( Kernel32Util . getComputerName ( ) , 1 , userInfo , null ) ) { <nl> + return ; <nl> + } <nl> + 	 try { <nl> + 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserChangePassword ( <nl> + 	 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) , userInfo . usri1 _ password . toString ( ) , <nl> + 	 	 	 	 " ! JNAP % % Wrd1 " ) ) ; <nl> + 	 } finally { <nl> + 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( <nl> + 	 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) ) ) ; <nl> + 	 } <nl> + } <nl> + <nl> + public void testNetUserDel ( ) { <nl> + 	 assertEquals ( LMErr . NERR _ UserNotFound , Netapi32 . INSTANCE . NetUserDel ( <nl> + 	 	 	 Kernel32Util . getComputerName ( ) , " JNANetapi32TestUserDoesntExist " ) ) ; <nl> + } <nl> + <nl> + public void testDsGetDcName ( ) { <nl> + 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) <nl> + 	 	 return ; <nl> + 	 <nl> + PDOMAIN _ CONTROLLER _ INFO . ByReference pdci = new PDOMAIN _ CONTROLLER _ INFO . ByReference ( ) ; <nl> + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . DsGetDcName ( <nl> + 	 	 	 null , null , null , null , 0 , pdci ) ) ; <nl> + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( <nl> + 	 	 	 pdci . getPointer ( ) ) ) ; <nl> + } <nl> + <nl> + public void testDsGetForestTrustInformation ( ) { <nl> + 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) <nl> + 	 	 return ; <nl> + <nl> + 	 String domainController = Netapi32Util . getDCName ( ) ; 	 <nl> + 	 PLSA _ FOREST _ TRUST _ INFORMATION . ByReference pfti = new PLSA _ FOREST _ TRUST _ INFORMATION . ByReference ( ) ; <nl> + 	 assertEquals ( W32Errors . NO _ ERROR , Netapi32 . INSTANCE . DsGetForestTrustInformation ( <nl> + 	 	 	 domainController , null , 0 , pfti ) ) ; <nl> + 	 <nl> + 	 assertTrue ( pfti . fti . RecordCount > = 0 ) ; <nl> + 	 <nl> + 	 for ( PLSA _ FOREST _ TRUST _ RECORD precord : pfti . fti . getEntries ( ) ) { <nl> + 	 	 LSA _ FOREST _ TRUST _ RECORD . UNION data = precord . tr . u ; <nl> + 	 	 	 switch ( precord . tr . ForestTrustType ) { <nl> + 	 	 	 case NTSecApi . ForestTrustTopLevelName : <nl> + 	 	 case NTSecApi . ForestTrustTopLevelNameEx : <nl> + 	 	 	 assertTrue ( data . TopLevelName . Length > 0 ) ; <nl> + 	 	 	 assertTrue ( data . TopLevelName . MaximumLength > 0 ) ; <nl> + 	 	 	 assertTrue ( data . TopLevelName . MaximumLength > = data . TopLevelName . Length ) ; <nl> + 	 	 	 assertTrue ( data . TopLevelName . getString ( ) . length ( ) > 0 ) ; <nl> + 	 	 	 break ; <nl> + 	 	 case NTSecApi . ForestTrustDomainInfo : <nl> + 	 	 	 assertTrue ( data . DomainInfo . DnsName . Length > 0 ) ; <nl> + 	 	 	 assertTrue ( data . DomainInfo . DnsName . MaximumLength > 0 ) ; <nl> + 	 	 	 assertTrue ( data . DomainInfo . DnsName . MaximumLength > = data . DomainInfo . DnsName . Length ) ; <nl> + 	 	 	 assertTrue ( data . DomainInfo . DnsName . getString ( ) . length ( ) > 0 ) ; <nl> + 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . Length > 0 ) ; <nl> + 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . MaximumLength > 0 ) ; <nl> + 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . MaximumLength > = data . DomainInfo . NetbiosName . Length ) ; <nl> + 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . getString ( ) . length ( ) > 0 ) ; <nl> + 	 	 	 assertTrue ( Advapi32 . INSTANCE . IsValidSid ( data . DomainInfo . Sid ) ) ; <nl> + 	 	 	 assertTrue ( Advapi32Util . convertSidToStringSid ( data . DomainInfo . Sid ) . startsWith ( " S - " ) ) ; <nl> + 	 	 	 break ; <nl> + 	 	 	 } <nl> + 	 } <nl> + 	 <nl> + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( <nl> + 	 	 	 pfti . getPointer ( ) ) ) ; 	 <nl> + } <nl> + <nl> + <nl> + public void testDsEnumerateDomainTrusts ( ) { <nl> + 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) <nl> + 	 	 return ; <nl> + <nl> + 	 IntByReference domainTrustCount = new IntByReference ( ) ; <nl> + PointerByReference domainsPointerRef = new PointerByReference ( ) ; <nl> + assertEquals ( W32Errors . NO _ ERROR , Netapi32 . INSTANCE . DsEnumerateDomainTrusts ( null , <nl> + DsGetDC . DS _ DOMAIN _ VALID _ FLAGS , domainsPointerRef , domainTrustCount ) ) ; <nl> + 	 assertTrue ( domainTrustCount . getValue ( ) > = 0 ) ; <nl> + 	 <nl> + DS _ DOMAIN _ TRUSTS domainTrustRefs = new DS _ DOMAIN _ TRUSTS ( domainsPointerRef . getValue ( ) ) ; <nl> + DS _ DOMAIN _ TRUSTS [ ] domainTrusts = ( DS _ DOMAIN _ TRUSTS [ ] ) domainTrustRefs . toArray ( new DS _ DOMAIN _ TRUSTS [ domainTrustCount . getValue ( ) ] ) ; <nl> + <nl> + 	 for ( DS _ DOMAIN _ TRUSTS trust : domainTrusts ) { <nl> + 	 	 	 assertTrue ( trust . DnsDomainName . length ( ) > 0 ) ; <nl> + 	 	 	 assertTrue ( Advapi32 . INSTANCE . IsValidSid ( trust . DomainSid ) ) ; <nl> + 	 	 	 assertTrue ( Advapi32Util . convertSidToStringSid ( trust . DomainSid ) . startsWith ( " S - " ) ) ; <nl> + 	 	 	 assertTrue ( Ole32Util . getStringFromGUID ( trust . DomainGuid ) . startsWith ( " { " ) ) ; <nl> + 	 } <nl> + 	 <nl> + <nl> + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( domainTrustRefs . getPointer ( ) ) ) ; 	 	 <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java 
 index 8902fe6 . . 6abd401 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java 
 @ @ - 84 , 7 + 84 , 13 @ @ public class XAttrUtilTest extends TestCase { 
 	 } 
 
 	 public void testUnicode ( ) { 
 - 	 	 String [ ] names = new String [ ] { " 中 文 " , " に ほ ん ご " , " Ö sterreichisch " , " Fran ç aise " , " Portugu ê s " } ; 
 + 	 	 String [ ] names = new String [ ] { 
 + " \ u4E2D \ u6587 " , 
 + " \ u306B \ u307B \ u3093 \ u3054 " , 
 + " \ u00D6sterreichisch " , 
 + " Fran \ u00E7aise " , 
 + " Portugu \ u00EAs " , 
 + } ; 
 	 	 for ( int i = 0 ; i < names . length ; i + + ) { 
 	 	 	 / / set xattr 
 	 	 	 XAttrUtil . setXAttr ( testPath , names [ i ] , names [ i ] ) ;

NEAREST DIFF:
diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Netapi32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Netapi32Test . java 
 index 3e469a9 . . 058d594 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Netapi32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Netapi32Test . java 
 @ @ - 1 , 256 + 1 , 260 @ @ 
 - / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation ; either 
 - * version 2 . 1 of the License , or ( at your option ) any later version . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * / 
 - package com . sun . jna . platform . win32 ; 
 - 
 - import junit . framework . TestCase ; 
 - 
 - import com . sun . jna . WString ; 
 - import com . sun . jna . platform . win32 . DsGetDC . DS _ DOMAIN _ TRUSTS ; 
 - import com . sun . jna . platform . win32 . DsGetDC . PDOMAIN _ CONTROLLER _ INFO ; 
 - import com . sun . jna . platform . win32 . LMAccess . GROUP _ INFO _ 2 ; 
 - import com . sun . jna . platform . win32 . LMAccess . GROUP _ USERS _ INFO _ 0 ; 
 - import com . sun . jna . platform . win32 . LMAccess . LOCALGROUP _ USERS _ INFO _ 0 ; 
 - import com . sun . jna . platform . win32 . LMAccess . USER _ INFO _ 1 ; 
 - import com . sun . jna . platform . win32 . NTSecApi . LSA _ FOREST _ TRUST _ RECORD ; 
 - import com . sun . jna . platform . win32 . NTSecApi . PLSA _ FOREST _ TRUST _ INFORMATION ; 
 - import com . sun . jna . platform . win32 . NTSecApi . PLSA _ FOREST _ TRUST _ RECORD ; 
 - import com . sun . jna . platform . win32 . Netapi32Util . User ; 
 - import com . sun . jna . platform . win32 . Secur32 . EXTENDED _ NAME _ FORMAT ; 
 - import com . sun . jna . ptr . IntByReference ; 
 - import com . sun . jna . ptr . PointerByReference ; 
 - 
 - / * * 
 - * @ author dblock [ at ] dblock [ dot ] org 
 - * / 
 - public class Netapi32Test extends TestCase { 
 - 
 - public static void main ( String [ ] args ) { 
 - junit . textui . TestRunner . run ( Netapi32Test . class ) ; 
 - } 
 - 
 - public void testNetGetJoinInformation ( ) { 
 - 	 	 IntByReference bufferType = new IntByReference ( ) ; 
 - 	 assertEquals ( W32Errors . ERROR _ INVALID _ PARAMETER , Netapi32 . INSTANCE . NetGetJoinInformation ( 
 - 	 	 	 null , null , bufferType ) ) ; 
 - 	 PointerByReference lpNameBuffer = new PointerByReference ( ) ; 
 - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetGetJoinInformation ( 
 - 	 	 	 null , lpNameBuffer , bufferType ) ) ; 
 - 	 assertTrue ( lpNameBuffer . getValue ( ) . getString ( 0 ) . length ( ) > 0 ) ; 
 - 	 assertTrue ( bufferType . getValue ( ) > 0 ) ; 
 - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( 
 - 	 	 	 lpNameBuffer . getValue ( ) ) ) ; 
 - } 
 - 
 - public void testNetGetLocalGroups ( ) { 
 - 	 for ( int i = 0 ; i < 2 ; i + + ) { 
 - 	 	 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 - 	 	 	 IntByReference entriesRead = new IntByReference ( ) ; 
 - 	 	 	 IntByReference totalEntries = new IntByReference ( ) ; 	 	 
 - 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetLocalGroupEnum ( null , i , bufptr , 
 - 	 	 	 	 LMCons . MAX _ PREFERRED _ LENGTH , 
 - 	 	 	 	 entriesRead , 
 - 	 	 	 	 totalEntries , 
 - 	 	 	 	 null ) ) ; 
 - 	 	 assertTrue ( entriesRead . getValue ( ) > 0 ) ; 
 - 	 	 assertEquals ( totalEntries . getValue ( ) , entriesRead . getValue ( ) ) ; 
 - 	 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( 
 - 	 	 	 	 bufptr . getValue ( ) ) ) ; 
 - 	 } 
 - } 
 - 
 - public void testNetGetDCName ( ) { 
 - 	 PointerByReference lpNameBuffer = new PointerByReference ( ) ; 
 - 	 IntByReference BufferType = new IntByReference ( ) ; 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGetJoinInformation ( null , lpNameBuffer , BufferType ) ) ; 	 
 - 	 if ( BufferType . getValue ( ) = = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) { 
 - 	 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 - 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGetDCName ( null , null , bufptr ) ) ; 
 - 	 	 String dc = bufptr . getValue ( ) . getString ( 0 ) ; 
 - 	 	 assertTrue ( dc . length ( ) > 0 ) ; 
 - 	 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; 
 - 	 } 
 - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( lpNameBuffer . getValue ( ) ) ) ; 
 - } 
 - 
 - public void testNetUserGetGroups ( ) { 
 - 	 User [ ] users = Netapi32Util . getUsers ( ) ; 
 - 	 assertTrue ( users . length > = 1 ) ; 
 - 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 - 	 IntByReference entriesread = new IntByReference ( ) ; 
 - 	 IntByReference totalentries = new IntByReference ( ) ; 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserGetGroups ( 
 - 	 	 	 null , users [ 0 ] . name , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , 
 - 	 	 	 entriesread , totalentries ) ) ; 
 - 	 GROUP _ USERS _ INFO _ 0 lgroup = new GROUP _ USERS _ INFO _ 0 ( bufptr . getValue ( ) ) ; 	 
 - 	 GROUP _ USERS _ INFO _ 0 [ ] lgroups = ( GROUP _ USERS _ INFO _ 0 [ ] ) lgroup . toArray ( entriesread . getValue ( ) ) ; 
 - for ( GROUP _ USERS _ INFO _ 0 localGroupInfo : lgroups ) { 
 - 	 assertTrue ( localGroupInfo . grui0 _ name . length ( ) > 0 ) ; 
 - } 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; 
 - } 
 - 
 - public void testNetUserGetLocalGroups ( ) { 
 - 	 String currentUser = Secur32Util . getUserNameEx ( 
 - 	 	 	 	 EXTENDED _ NAME _ FORMAT . NameSamCompatible ) ; 
 - 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 - 	 IntByReference entriesread = new IntByReference ( ) ; 
 - 	 IntByReference totalentries = new IntByReference ( ) ; 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserGetLocalGroups ( 
 - 	 	 	 null , currentUser , 0 , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , 
 - 	 	 	 entriesread , totalentries ) ) ; 
 - 	 LOCALGROUP _ USERS _ INFO _ 0 lgroup = new LOCALGROUP _ USERS _ INFO _ 0 ( bufptr . getValue ( ) ) ; 	 
 - 	 LOCALGROUP _ USERS _ INFO _ 0 [ ] lgroups = ( LOCALGROUP _ USERS _ INFO _ 0 [ ] ) lgroup . toArray ( entriesread . getValue ( ) ) ; 
 - for ( LOCALGROUP _ USERS _ INFO _ 0 localGroupInfo : lgroups ) { 
 - 	 assertTrue ( localGroupInfo . lgrui0 _ name . length ( ) > 0 ) ; 
 - } 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; 
 - } 
 - 
 - public void testNetGroupEnum ( ) { 
 - 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 - 	 IntByReference entriesread = new IntByReference ( ) ; 
 - 	 IntByReference totalentries = new IntByReference ( ) ; 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGroupEnum ( 
 - 	 	 	 null , 2 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , entriesread , totalentries , null ) ) ; 	 
 - 	 GROUP _ INFO _ 2 group = new GROUP _ INFO _ 2 ( bufptr . getValue ( ) ) ; 	 
 - 	 GROUP _ INFO _ 2 [ ] groups = ( GROUP _ INFO _ 2 [ ] ) group . toArray ( entriesread . getValue ( ) ) ; 
 - for ( GROUP _ INFO _ 2 grpi : groups ) { 
 - 	 assertTrue ( grpi . grpi2 _ name . length ( ) > 0 ) ; 
 - } 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; 
 - } 
 - 
 - public void testNetUserEnum ( ) { 
 - 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 - 	 IntByReference entriesread = new IntByReference ( ) ; 
 - 	 IntByReference totalentries = new IntByReference ( ) ; 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserEnum ( 	 	 	 
 - 	 	 	 null , 1 , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , entriesread , totalentries , null ) ) ; 	 
 - 	 USER _ INFO _ 1 userinfo = new USER _ INFO _ 1 ( bufptr . getValue ( ) ) ; 	 
 - 	 USER _ INFO _ 1 [ ] userinfos = ( USER _ INFO _ 1 [ ] ) userinfo . toArray ( entriesread . getValue ( ) ) ; 
 - for ( USER _ INFO _ 1 ui : userinfos ) { 
 - 	 assertTrue ( ui . usri1 _ name . length ( ) > 0 ) ; 
 - } 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; 
 - } 
 - 
 - public void testNetUserAdd ( ) { 
 - 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; 
 - 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; 
 - 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; 
 - 	 userInfo . usri1 _ priv = LMAccess . USER _ PRIV _ USER ; 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserAdd ( 
 - 	 	 	 Kernel32Util . getComputerName ( ) , 1 , userInfo , null ) ) ; 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( 
 - 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) ) ) ; 
 - } 
 - 
 - public void testNetUserChangePassword ( ) { 
 - 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; 
 - 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; 
 - 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; 
 - 	 userInfo . usri1 _ priv = LMAccess . USER _ PRIV _ USER ; 
 - 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserAdd ( 
 - 	 	 	 Kernel32Util . getComputerName ( ) , 1 , userInfo , null ) ) ; 
 - 	 try { 
 - 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserChangePassword ( 
 - 	 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) , userInfo . usri1 _ password . toString ( ) , 
 - 	 	 	 	 " ! JNAP % % Wrd1 " ) ) ; 
 - 	 } finally { 
 - 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( 
 - 	 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) ) ) ; 
 - 	 } 
 - } 
 - 
 - public void testNetUserDel ( ) { 
 - 	 assertEquals ( LMErr . NERR _ UserNotFound , Netapi32 . INSTANCE . NetUserDel ( 
 - 	 	 	 Kernel32Util . getComputerName ( ) , " JNANetapi32TestUserDoesntExist " ) ) ; 
 - } 
 - 
 - public void testDsGetDcName ( ) { 
 - 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) 
 - 	 	 return ; 
 - 	 
 - PDOMAIN _ CONTROLLER _ INFO . ByReference pdci = new PDOMAIN _ CONTROLLER _ INFO . ByReference ( ) ; 
 - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . DsGetDcName ( 
 - 	 	 	 null , null , null , null , 0 , pdci ) ) ; 
 - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( 
 - 	 	 	 pdci . getPointer ( ) ) ) ; 
 - } 
 - 
 - public void testDsGetForestTrustInformation ( ) { 
 - 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) 
 - 	 	 return ; 
 - 
 - 	 String domainController = Netapi32Util . getDCName ( ) ; 	 
 - 	 PLSA _ FOREST _ TRUST _ INFORMATION . ByReference pfti = new PLSA _ FOREST _ TRUST _ INFORMATION . ByReference ( ) ; 
 - 	 assertEquals ( W32Errors . NO _ ERROR , Netapi32 . INSTANCE . DsGetForestTrustInformation ( 
 - 	 	 	 domainController , null , 0 , pfti ) ) ; 
 - 	 
 - 	 assertTrue ( pfti . fti . RecordCount > = 0 ) ; 
 - 	 
 - 	 for ( PLSA _ FOREST _ TRUST _ RECORD precord : pfti . fti . getEntries ( ) ) { 
 - 	 	 LSA _ FOREST _ TRUST _ RECORD . UNION data = precord . tr . u ; 
 - 	 	 	 switch ( precord . tr . ForestTrustType ) { 
 - 	 	 	 case NTSecApi . ForestTrustTopLevelName : 
 - 	 	 case NTSecApi . ForestTrustTopLevelNameEx : 
 - 	 	 	 assertTrue ( data . TopLevelName . Length > 0 ) ; 
 - 	 	 	 assertTrue ( data . TopLevelName . MaximumLength > 0 ) ; 
 - 	 	 	 assertTrue ( data . TopLevelName . MaximumLength > = data . TopLevelName . Length ) ; 
 - 	 	 	 assertTrue ( data . TopLevelName . getString ( ) . length ( ) > 0 ) ; 
 - 	 	 	 break ; 
 - 	 	 case NTSecApi . ForestTrustDomainInfo : 
 - 	 	 	 assertTrue ( data . DomainInfo . DnsName . Length > 0 ) ; 
 - 	 	 	 assertTrue ( data . DomainInfo . DnsName . MaximumLength > 0 ) ; 
 - 	 	 	 assertTrue ( data . DomainInfo . DnsName . MaximumLength > = data . DomainInfo . DnsName . Length ) ; 
 - 	 	 	 assertTrue ( data . DomainInfo . DnsName . getString ( ) . length ( ) > 0 ) ; 
 - 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . Length > 0 ) ; 
 - 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . MaximumLength > 0 ) ; 
 - 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . MaximumLength > = data . DomainInfo . NetbiosName . Length ) ; 
 - 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . getString ( ) . length ( ) > 0 ) ; 
 - 	 	 	 assertTrue ( Advapi32 . INSTANCE . IsValidSid ( data . DomainInfo . Sid ) ) ; 
 - 	 	 	 assertTrue ( Advapi32Util . convertSidToStringSid ( data . DomainInfo . Sid ) . startsWith ( " S - " ) ) ; 
 - 	 	 	 break ; 
 - 	 	 	 } 
 - 	 } 
 - 	 
 - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( 
 - 	 	 	 pfti . getPointer ( ) ) ) ; 	 
 - } 
 - 
 - 
 - public void testDsEnumerateDomainTrusts ( ) { 
 - 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) 
 - 	 	 return ; 
 - 
 - 	 IntByReference domainTrustCount = new IntByReference ( ) ; 
 - PointerByReference domainsPointerRef = new PointerByReference ( ) ; 
 - assertEquals ( W32Errors . NO _ ERROR , Netapi32 . INSTANCE . DsEnumerateDomainTrusts ( null , 
 - DsGetDC . DS _ DOMAIN _ VALID _ FLAGS , domainsPointerRef , domainTrustCount ) ) ; 
 - 	 assertTrue ( domainTrustCount . getValue ( ) > = 0 ) ; 
 - 	 
 - DS _ DOMAIN _ TRUSTS domainTrustRefs = new DS _ DOMAIN _ TRUSTS ( domainsPointerRef . getValue ( ) ) ; 
 - DS _ DOMAIN _ TRUSTS [ ] domainTrusts = ( DS _ DOMAIN _ TRUSTS [ ] ) domainTrustRefs . toArray ( new DS _ DOMAIN _ TRUSTS [ domainTrustCount . getValue ( ) ] ) ; 
 - 
 - 	 for ( DS _ DOMAIN _ TRUSTS trust : domainTrusts ) { 
 - 	 	 	 assertTrue ( trust . DnsDomainName . length ( ) > 0 ) ; 
 - 	 	 	 assertTrue ( Advapi32 . INSTANCE . IsValidSid ( trust . DomainSid ) ) ; 
 - 	 	 	 assertTrue ( Advapi32Util . convertSidToStringSid ( trust . DomainSid ) . startsWith ( " S - " ) ) ; 
 - 	 	 	 assertTrue ( Ole32Util . getStringFromGUID ( trust . DomainGuid ) . startsWith ( " { " ) ) ; 
 - 	 } 
 - 	 
 + / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 ; 
 
 - 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( domainTrustRefs . getPointer ( ) ) ) ; 	 	 
 - } 
 - 
 - } 
 + import junit . framework . TestCase ; 
 + 
 + import com . sun . jna . WString ; 
 + import com . sun . jna . platform . win32 . DsGetDC . DS _ DOMAIN _ TRUSTS ; 
 + import com . sun . jna . platform . win32 . DsGetDC . PDOMAIN _ CONTROLLER _ INFO ; 
 + import com . sun . jna . platform . win32 . LMAccess . GROUP _ INFO _ 2 ; 
 + import com . sun . jna . platform . win32 . LMAccess . GROUP _ USERS _ INFO _ 0 ; 
 + import com . sun . jna . platform . win32 . LMAccess . LOCALGROUP _ USERS _ INFO _ 0 ; 
 + import com . sun . jna . platform . win32 . LMAccess . USER _ INFO _ 1 ; 
 + import com . sun . jna . platform . win32 . NTSecApi . LSA _ FOREST _ TRUST _ RECORD ; 
 + import com . sun . jna . platform . win32 . NTSecApi . PLSA _ FOREST _ TRUST _ INFORMATION ; 
 + import com . sun . jna . platform . win32 . NTSecApi . PLSA _ FOREST _ TRUST _ RECORD ; 
 + import com . sun . jna . platform . win32 . Netapi32Util . User ; 
 + import com . sun . jna . platform . win32 . Secur32 . EXTENDED _ NAME _ FORMAT ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 + 
 + / * * 
 + * @ author dblock [ at ] dblock [ dot ] org 
 + * / 
 + public class Netapi32Test extends TestCase { 
 + 
 + public static void main ( String [ ] args ) { 
 + junit . textui . TestRunner . run ( Netapi32Test . class ) ; 
 + } 
 + 
 + public void testNetGetJoinInformation ( ) { 
 + 	 	 IntByReference bufferType = new IntByReference ( ) ; 
 + 	 assertEquals ( W32Errors . ERROR _ INVALID _ PARAMETER , Netapi32 . INSTANCE . NetGetJoinInformation ( 
 + 	 	 	 null , null , bufferType ) ) ; 
 + 	 PointerByReference lpNameBuffer = new PointerByReference ( ) ; 
 + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetGetJoinInformation ( 
 + 	 	 	 null , lpNameBuffer , bufferType ) ) ; 
 + 	 assertTrue ( lpNameBuffer . getValue ( ) . getString ( 0 ) . length ( ) > 0 ) ; 
 + 	 assertTrue ( bufferType . getValue ( ) > 0 ) ; 
 + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( 
 + 	 	 	 lpNameBuffer . getValue ( ) ) ) ; 
 + } 
 + 
 + public void testNetGetLocalGroups ( ) { 
 + 	 for ( int i = 0 ; i < 2 ; i + + ) { 
 + 	 	 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 + 	 	 	 IntByReference entriesRead = new IntByReference ( ) ; 
 + 	 	 	 IntByReference totalEntries = new IntByReference ( ) ; 	 	 
 + 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetLocalGroupEnum ( null , i , bufptr , 
 + 	 	 	 	 LMCons . MAX _ PREFERRED _ LENGTH , 
 + 	 	 	 	 entriesRead , 
 + 	 	 	 	 totalEntries , 
 + 	 	 	 	 null ) ) ; 
 + 	 	 assertTrue ( entriesRead . getValue ( ) > 0 ) ; 
 + 	 	 assertEquals ( totalEntries . getValue ( ) , entriesRead . getValue ( ) ) ; 
 + 	 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( 
 + 	 	 	 	 bufptr . getValue ( ) ) ) ; 
 + 	 } 
 + } 
 + 
 + public void testNetGetDCName ( ) { 
 + 	 PointerByReference lpNameBuffer = new PointerByReference ( ) ; 
 + 	 IntByReference BufferType = new IntByReference ( ) ; 
 + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGetJoinInformation ( null , lpNameBuffer , BufferType ) ) ; 	 
 + 	 if ( BufferType . getValue ( ) = = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) { 
 + 	 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 + 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGetDCName ( null , null , bufptr ) ) ; 
 + 	 	 String dc = bufptr . getValue ( ) . getString ( 0 ) ; 
 + 	 	 assertTrue ( dc . length ( ) > 0 ) ; 
 + 	 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; 
 + 	 } 
 + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( lpNameBuffer . getValue ( ) ) ) ; 
 + } 
 + 
 + public void testNetUserGetGroups ( ) { 
 + 	 User [ ] users = Netapi32Util . getUsers ( ) ; 
 + 	 assertTrue ( users . length > = 1 ) ; 
 + 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 + 	 IntByReference entriesread = new IntByReference ( ) ; 
 + 	 IntByReference totalentries = new IntByReference ( ) ; 
 + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserGetGroups ( 
 + 	 	 	 null , users [ 0 ] . name , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , 
 + 	 	 	 entriesread , totalentries ) ) ; 
 + 	 GROUP _ USERS _ INFO _ 0 lgroup = new GROUP _ USERS _ INFO _ 0 ( bufptr . getValue ( ) ) ; 	 
 + 	 GROUP _ USERS _ INFO _ 0 [ ] lgroups = ( GROUP _ USERS _ INFO _ 0 [ ] ) lgroup . toArray ( entriesread . getValue ( ) ) ; 
 + for ( GROUP _ USERS _ INFO _ 0 localGroupInfo : lgroups ) { 
 + 	 assertTrue ( localGroupInfo . grui0 _ name . length ( ) > 0 ) ; 
 + } 
 + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; 
 + } 
 + 
 + public void testNetUserGetLocalGroups ( ) { 
 + 	 String currentUser = Secur32Util . getUserNameEx ( 
 + 	 	 	 	 EXTENDED _ NAME _ FORMAT . NameSamCompatible ) ; 
 + 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 + 	 IntByReference entriesread = new IntByReference ( ) ; 
 + 	 IntByReference totalentries = new IntByReference ( ) ; 
 + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserGetLocalGroups ( 
 + 	 	 	 null , currentUser , 0 , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , 
 + 	 	 	 entriesread , totalentries ) ) ; 
 + 	 LOCALGROUP _ USERS _ INFO _ 0 lgroup = new LOCALGROUP _ USERS _ INFO _ 0 ( bufptr . getValue ( ) ) ; 	 
 + 	 LOCALGROUP _ USERS _ INFO _ 0 [ ] lgroups = ( LOCALGROUP _ USERS _ INFO _ 0 [ ] ) lgroup . toArray ( entriesread . getValue ( ) ) ; 
 + for ( LOCALGROUP _ USERS _ INFO _ 0 localGroupInfo : lgroups ) { 
 + 	 assertTrue ( localGroupInfo . lgrui0 _ name . length ( ) > 0 ) ; 
 + } 
 + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; 
 + } 
 + 
 + public void testNetGroupEnum ( ) { 
 + 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 + 	 IntByReference entriesread = new IntByReference ( ) ; 
 + 	 IntByReference totalentries = new IntByReference ( ) ; 
 + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetGroupEnum ( 
 + 	 	 	 null , 2 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , entriesread , totalentries , null ) ) ; 	 
 + 	 GROUP _ INFO _ 2 group = new GROUP _ INFO _ 2 ( bufptr . getValue ( ) ) ; 	 
 + 	 GROUP _ INFO _ 2 [ ] groups = ( GROUP _ INFO _ 2 [ ] ) group . toArray ( entriesread . getValue ( ) ) ; 
 + for ( GROUP _ INFO _ 2 grpi : groups ) { 
 + 	 assertTrue ( grpi . grpi2 _ name . length ( ) > 0 ) ; 
 + } 
 + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; 
 + } 
 + 
 + public void testNetUserEnum ( ) { 
 + 	 PointerByReference bufptr = new PointerByReference ( ) ; 
 + 	 IntByReference entriesread = new IntByReference ( ) ; 
 + 	 IntByReference totalentries = new IntByReference ( ) ; 
 + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserEnum ( 	 	 	 
 + 	 	 	 null , 1 , 0 , bufptr , LMCons . MAX _ PREFERRED _ LENGTH , entriesread , totalentries , null ) ) ; 	 
 + 	 USER _ INFO _ 1 userinfo = new USER _ INFO _ 1 ( bufptr . getValue ( ) ) ; 	 
 + 	 USER _ INFO _ 1 [ ] userinfos = ( USER _ INFO _ 1 [ ] ) userinfo . toArray ( entriesread . getValue ( ) ) ; 
 + for ( USER _ INFO _ 1 ui : userinfos ) { 
 + 	 assertTrue ( ui . usri1 _ name . length ( ) > 0 ) ; 
 + } 
 + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetApiBufferFree ( bufptr . getValue ( ) ) ) ; 
 + } 
 + 
 + public void testNetUserAdd ( ) { 
 + 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; 
 + 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; 
 + 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; 
 + 	 userInfo . usri1 _ priv = LMAccess . USER _ PRIV _ USER ; 
 + / / ignore test if not able to add user ( need to be administrator to do this ) . 
 + 	 if ( LMErr . NERR _ Success ! = Netapi32 . INSTANCE . NetUserAdd ( Kernel32Util . getComputerName ( ) , 1 , userInfo , null ) ) { 
 + return ; 
 + } 
 + 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( 
 + 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) ) ) ; 
 + } 
 + 
 + public void testNetUserChangePassword ( ) { 
 + 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; 
 + 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; 
 + 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; 
 + 	 userInfo . usri1 _ priv = LMAccess . USER _ PRIV _ USER ; 
 + / / ignore test if not able to add user ( need to be administrator to do this ) . 
 + 	 if ( LMErr . NERR _ Success ! = Netapi32 . INSTANCE . NetUserAdd ( Kernel32Util . getComputerName ( ) , 1 , userInfo , null ) ) { 
 + return ; 
 + } 
 + 	 try { 
 + 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserChangePassword ( 
 + 	 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) , userInfo . usri1 _ password . toString ( ) , 
 + 	 	 	 	 " ! JNAP % % Wrd1 " ) ) ; 
 + 	 } finally { 
 + 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( 
 + 	 	 	 	 Kernel32Util . getComputerName ( ) , userInfo . usri1 _ name . toString ( ) ) ) ; 
 + 	 } 
 + } 
 + 
 + public void testNetUserDel ( ) { 
 + 	 assertEquals ( LMErr . NERR _ UserNotFound , Netapi32 . INSTANCE . NetUserDel ( 
 + 	 	 	 Kernel32Util . getComputerName ( ) , " JNANetapi32TestUserDoesntExist " ) ) ; 
 + } 
 + 
 + public void testDsGetDcName ( ) { 
 + 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) 
 + 	 	 return ; 
 + 	 
 + PDOMAIN _ CONTROLLER _ INFO . ByReference pdci = new PDOMAIN _ CONTROLLER _ INFO . ByReference ( ) ; 
 + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . DsGetDcName ( 
 + 	 	 	 null , null , null , null , 0 , pdci ) ) ; 
 + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( 
 + 	 	 	 pdci . getPointer ( ) ) ) ; 
 + } 
 + 
 + public void testDsGetForestTrustInformation ( ) { 
 + 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) 
 + 	 	 return ; 
 + 
 + 	 String domainController = Netapi32Util . getDCName ( ) ; 	 
 + 	 PLSA _ FOREST _ TRUST _ INFORMATION . ByReference pfti = new PLSA _ FOREST _ TRUST _ INFORMATION . ByReference ( ) ; 
 + 	 assertEquals ( W32Errors . NO _ ERROR , Netapi32 . INSTANCE . DsGetForestTrustInformation ( 
 + 	 	 	 domainController , null , 0 , pfti ) ) ; 
 + 	 
 + 	 assertTrue ( pfti . fti . RecordCount > = 0 ) ; 
 + 	 
 + 	 for ( PLSA _ FOREST _ TRUST _ RECORD precord : pfti . fti . getEntries ( ) ) { 
 + 	 	 LSA _ FOREST _ TRUST _ RECORD . UNION data = precord . tr . u ; 
 + 	 	 	 switch ( precord . tr . ForestTrustType ) { 
 + 	 	 	 case NTSecApi . ForestTrustTopLevelName : 
 + 	 	 case NTSecApi . ForestTrustTopLevelNameEx : 
 + 	 	 	 assertTrue ( data . TopLevelName . Length > 0 ) ; 
 + 	 	 	 assertTrue ( data . TopLevelName . MaximumLength > 0 ) ; 
 + 	 	 	 assertTrue ( data . TopLevelName . MaximumLength > = data . TopLevelName . Length ) ; 
 + 	 	 	 assertTrue ( data . TopLevelName . getString ( ) . length ( ) > 0 ) ; 
 + 	 	 	 break ; 
 + 	 	 case NTSecApi . ForestTrustDomainInfo : 
 + 	 	 	 assertTrue ( data . DomainInfo . DnsName . Length > 0 ) ; 
 + 	 	 	 assertTrue ( data . DomainInfo . DnsName . MaximumLength > 0 ) ; 
 + 	 	 	 assertTrue ( data . DomainInfo . DnsName . MaximumLength > = data . DomainInfo . DnsName . Length ) ; 
 + 	 	 	 assertTrue ( data . DomainInfo . DnsName . getString ( ) . length ( ) > 0 ) ; 
 + 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . Length > 0 ) ; 
 + 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . MaximumLength > 0 ) ; 
 + 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . MaximumLength > = data . DomainInfo . NetbiosName . Length ) ; 
 + 	 	 	 assertTrue ( data . DomainInfo . NetbiosName . getString ( ) . length ( ) > 0 ) ; 
 + 	 	 	 assertTrue ( Advapi32 . INSTANCE . IsValidSid ( data . DomainInfo . Sid ) ) ; 
 + 	 	 	 assertTrue ( Advapi32Util . convertSidToStringSid ( data . DomainInfo . Sid ) . startsWith ( " S - " ) ) ; 
 + 	 	 	 break ; 
 + 	 	 	 } 
 + 	 } 
 + 	 
 + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( 
 + 	 	 	 pfti . getPointer ( ) ) ) ; 	 
 + } 
 + 
 + 
 + public void testDsEnumerateDomainTrusts ( ) { 
 + 	 if ( Netapi32Util . getJoinStatus ( ) ! = LMJoin . NETSETUP _ JOIN _ STATUS . NetSetupDomainName ) 
 + 	 	 return ; 
 + 
 + 	 IntByReference domainTrustCount = new IntByReference ( ) ; 
 + PointerByReference domainsPointerRef = new PointerByReference ( ) ; 
 + assertEquals ( W32Errors . NO _ ERROR , Netapi32 . INSTANCE . DsEnumerateDomainTrusts ( null , 
 + DsGetDC . DS _ DOMAIN _ VALID _ FLAGS , domainsPointerRef , domainTrustCount ) ) ; 
 + 	 assertTrue ( domainTrustCount . getValue ( ) > = 0 ) ; 
 + 	 
 + DS _ DOMAIN _ TRUSTS domainTrustRefs = new DS _ DOMAIN _ TRUSTS ( domainsPointerRef . getValue ( ) ) ; 
 + DS _ DOMAIN _ TRUSTS [ ] domainTrusts = ( DS _ DOMAIN _ TRUSTS [ ] ) domainTrustRefs . toArray ( new DS _ DOMAIN _ TRUSTS [ domainTrustCount . getValue ( ) ] ) ; 
 + 
 + 	 for ( DS _ DOMAIN _ TRUSTS trust : domainTrusts ) { 
 + 	 	 	 assertTrue ( trust . DnsDomainName . length ( ) > 0 ) ; 
 + 	 	 	 assertTrue ( Advapi32 . INSTANCE . IsValidSid ( trust . DomainSid ) ) ; 
 + 	 	 	 assertTrue ( Advapi32Util . convertSidToStringSid ( trust . DomainSid ) . startsWith ( " S - " ) ) ; 
 + 	 	 	 assertTrue ( Ole32Util . getStringFromGUID ( trust . DomainGuid ) . startsWith ( " { " ) ) ; 
 + 	 } 
 + 	 
 + 
 + 	 assertEquals ( W32Errors . ERROR _ SUCCESS , Netapi32 . INSTANCE . NetApiBufferFree ( domainTrustRefs . getPointer ( ) ) ) ; 	 	 
 + } 
 + 
 + }
