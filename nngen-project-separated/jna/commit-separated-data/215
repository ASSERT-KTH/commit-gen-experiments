BLEU SCORE: 0.03377156414337854

TEST MSG: Pull callback calling convention from options if available and no tagging interface is present
GENERATED MSG: initial callback behavior flags setup and test harness

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 0c3d7b4 . . 3251447 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 25 , 6 + 25 , 7 @ @ Bug Fixes <nl> - - - - - - - - - <nl> * [ # 549 ] ( https : / / github . com / java - native - access / jna / pull / 549 ) : Fixed bug in types derived from XID - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 536 ] ( https : / / github . com / java - native - access / jna / pull / 536 ) : Fixed bug in determining the Library and options associated with types defined outside of a Library - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * [ # 531 ] ( https : / / github . com / java - native - access / jna / pull / 531 ) : Ensure direct - mapped callbacks use the right calling convention - [ @ twall ] ( https : / / github . com / twall ) . <nl> <nl> Release 4 . 2 . 1 <nl> = = = = = = = = = = = = = <nl> diff - - git a / src / com / sun / jna / CallbackReference . java b / src / com / sun / jna / CallbackReference . java <nl> index 4ff10b3 . . 16b5a1d 100644 <nl> - - - a / src / com / sun / jna / CallbackReference . java <nl> + + + b / src / com / sun / jna / CallbackReference . java <nl> @ @ - 39 , 7 + 39 , 9 @ @ class CallbackReference extends WeakReference { <nl> static final Map callbackMap = new WeakHashMap ( ) ; <nl> static final Map directCallbackMap = new WeakHashMap ( ) ; <nl> static final Map pointerCallbackMap = new WeakHashMap ( ) ; <nl> + / / Track memory allocations associated with this closure ( usually String args ) <nl> static final Map allocations = new WeakHashMap ( ) ; <nl> + / / Global map of allocated closures to facilitate centralized cleanup <nl> private static final Map allocatedMemory = Collections . synchronizedMap ( new WeakHashMap ( ) ) ; <nl> <nl> private static final Method PROXY _ CALLBACK _ METHOD ; <nl> @ @ - 146 , 9 + 148 , 11 @ @ class CallbackReference extends WeakReference { <nl> / / Keep a reference to the proxy to avoid premature GC of it <nl> CallbackProxy proxy ; <nl> Method method ; <nl> + int callingConvention ; <nl> private CallbackReference ( Callback callback , int callingConvention , boolean direct ) { <nl> super ( callback ) ; <nl> TypeMapper mapper = Native . getTypeMapper ( callback . getClass ( ) ) ; <nl> + this . callingConvention = callingConvention ; <nl> Class [ ] nativeParamTypes ; <nl> Class returnType ; <nl> <nl> @ @ - 180 , 6 + 184 , 7 @ @ class CallbackReference extends WeakReference { <nl> } <nl> <nl> String encoding = Native . getStringEncoding ( callback . getClass ( ) ) ; <nl> + long peer = 0 ; <nl> if ( direct ) { <nl> method = getCallbackMethod ( callback ) ; <nl> nativeParamTypes = method . getParameterTypes ( ) ; <nl> @ @ - 188 , 12 + 193 , 10 @ @ class CallbackReference extends WeakReference { <nl> if ( callback instanceof DLLCallback ) { <nl> flags | = Native . CB _ OPTION _ IN _ DLL ; <nl> } <nl> - long peer = Native . createNativeCallback ( callback , method , <nl> - nativeParamTypes , returnType , <nl> - callingConvention , flags , <nl> - encoding ) ; <nl> - cbstruct = peer ! = 0 ? new Pointer ( peer ) : null ; <nl> - allocatedMemory . put ( this , new WeakReference ( this ) ) ; <nl> + peer = Native . createNativeCallback ( callback , method , <nl> + nativeParamTypes , returnType , <nl> + callingConvention , flags , <nl> + encoding ) ; <nl> } <nl> else { <nl> if ( callback instanceof CallbackProxy ) { <nl> @ @ - 236 , 12 + 239 , 13 @ @ class CallbackReference extends WeakReference { <nl> } <nl> int flags = callback instanceof DLLCallback <nl> ? Native . CB _ OPTION _ IN _ DLL : 0 ; <nl> - long peer = Native . createNativeCallback ( proxy , PROXY _ CALLBACK _ METHOD , <nl> - nativeParamTypes , returnType , <nl> - callingConvention , flags , <nl> - encoding ) ; <nl> - cbstruct = peer ! = 0 ? new Pointer ( peer ) : null ; <nl> + peer = Native . createNativeCallback ( proxy , PROXY _ CALLBACK _ METHOD , <nl> + nativeParamTypes , returnType , <nl> + callingConvention , flags , <nl> + encoding ) ; <nl> } <nl> + cbstruct = peer ! = 0 ? new Pointer ( peer ) : null ; <nl> + allocatedMemory . put ( this , new WeakReference ( this ) ) ; <nl> } <nl> <nl> private Class getNativeType ( Class cls ) { <nl> @ @ - 404 , 8 + 408 , 13 @ @ class CallbackReference extends WeakReference { <nl> if ( ( fp = getNativeFunctionPointer ( cb ) ) ! = null ) { <nl> return fp ; <nl> } <nl> + Map options = Native . getLibraryOptions ( cb . getClass ( ) ) ; <nl> int callingConvention = cb instanceof AltCallingConvention <nl> - ? Function . ALT _ CONVENTION : Function . C _ CONVENTION ; <nl> + ? Function . ALT _ CONVENTION <nl> + : ( options ! = null & & options . containsKey ( Library . OPTION _ CALLING _ CONVENTION ) <nl> + ? ( ( Integer ) options . get ( Library . OPTION _ CALLING _ CONVENTION ) ) . intValue ( ) <nl> + : Function . C _ CONVENTION ) ; <nl> + <nl> Map map = direct ? directCallbackMap : callbackMap ; <nl> synchronized ( callbackMap ) { <nl> CallbackReference cbref = ( CallbackReference ) map . get ( cb ) ; <nl> diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index ed6178f . . d147e40 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 1439 , 6 + 1439 , 54 @ @ public class CallbacksTest extends TestCase implements Paths { <nl> } <nl> } <nl> <nl> + public interface TaggedCallingConventionTestLibrary extends Library , AltCallingConvention { <nl> + interface TestCallbackTagged extends Callback , AltCallingConvention { <nl> + void invoke ( ) ; <nl> + } <nl> + } <nl> + <nl> + public void testCallingConventionFromInterface ( ) { <nl> + TaggedCallingConventionTestLibrary lib = ( TaggedCallingConventionTestLibrary ) <nl> + Native . loadLibrary ( " testlib " , TaggedCallingConventionTestLibrary . class ) ; <nl> + TaggedCallingConventionTestLibrary . TestCallbackTagged cb = new TaggedCallingConventionTestLibrary . TestCallbackTagged ( ) { <nl> + public void invoke ( ) { } <nl> + } ; <nl> + try { <nl> + Pointer p = CallbackReference . getFunctionPointer ( cb ) ; <nl> + CallbackReference ref = ( CallbackReference ) CallbackReference . callbackMap . get ( cb ) ; <nl> + assertNotNull ( " CallbackReference not found " , ref ) ; <nl> + assertEquals ( " Tag - based calling convention not applied " , Function . ALT _ CONVENTION , ref . callingConvention ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) { <nl> + / / Alt convention not supported <nl> + } <nl> + } <nl> + <nl> + public interface OptionCallingConventionTestLibrary extends Library { <nl> + interface TestCallback extends Callback { <nl> + void invoke ( ) ; <nl> + } <nl> + } <nl> + <nl> + public void testCallingConventionFromOptions ( ) { <nl> + Map options = new HashMap ( ) ; <nl> + options . put ( Library . OPTION _ CALLING _ CONVENTION , Function . ALT _ CONVENTION ) ; <nl> + OptionCallingConventionTestLibrary lib = ( OptionCallingConventionTestLibrary ) <nl> + Native . loadLibrary ( " testlib " , OptionCallingConventionTestLibrary . class , options ) ; <nl> + OptionCallingConventionTestLibrary . TestCallback cb = new OptionCallingConventionTestLibrary . TestCallback ( ) { <nl> + public void invoke ( ) { } <nl> + } ; <nl> + try { <nl> + Pointer p = CallbackReference . getFunctionPointer ( cb ) ; <nl> + CallbackReference ref = ( CallbackReference ) CallbackReference . callbackMap . get ( cb ) ; <nl> + assertNotNull ( " CallbackReference not found " , ref ) ; <nl> + assertEquals ( " Option - based calling convention not applied " , Function . ALT _ CONVENTION , ref . callingConvention ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) { <nl> + / / Alt convention not supported <nl> + } <nl> + } <nl> + <nl> public static void main ( java . lang . String [ ] argList ) { <nl> junit . textui . TestRunner . run ( CallbacksTest . class ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> index 9cff04a . . 10172a7 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> @ @ - 1231 , 18 + 1231 , 22 @ @ public interface Kernel32 extends StdCallLibrary { <nl> boolean DeviceIoControl ( HANDLE hDevice , int dwIoControlCode , Pointer lpInBuffer , int nInBufferSize , <nl> Pointer lpOutBuffer , int nOutBufferSize , IntByReference lpBytesReturned , Pointer lpOverlapped ) ; <nl> 	 <nl> - 	 / * * <nl> - 	 * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of <nl> - 	 * space , the total amount of free space , and the total amount of free space available to the user that is <nl> - 	 * associated with the calling thread . <nl> - 	 * <nl> - 	 * @ param lpDirectoryName <nl> - 	 * @ param lpFreeBytesAvailable <nl> - 	 * @ param lpTotalNumberOfBytes <nl> - 	 * @ param lpTotalNumberOfFreeBytes <nl> - 	 * @ return <nl> - 	 * / <nl> - 	 boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; <nl> + / * * <nl> + * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of <nl> + * space , the total amount of free space , and the total amount of free space available to the user that is <nl> + * associated with the calling thread . <nl> + * <nl> + * @ param lpDirectoryName <nl> + * @ param lpFreeBytesAvailable <nl> + * @ param lpTotalNumberOfBytes <nl> + * @ param lpTotalNumberOfFreeBytes <nl> + * @ return <nl> + * If the function succeeds , the return value is nonzero . <nl> + * <nl> + * If the function fails , the return value is zero ( 0 ) . To get extended error information , <nl> + * call GetLastError . <nl> + * / <nl> + boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; <nl> <nl> / * * <nl> * Takes a snapshot of the specified processes , as well as the heaps , modules , and threads used by these processes .

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 0c3d7b4 . . 3251447 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 25 , 6 + 25 , 7 @ @ Bug Fixes 
 - - - - - - - - - 
 * [ # 549 ] ( https : / / github . com / java - native - access / jna / pull / 549 ) : Fixed bug in types derived from XID - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 536 ] ( https : / / github . com / java - native - access / jna / pull / 536 ) : Fixed bug in determining the Library and options associated with types defined outside of a Library - [ @ twall ] ( https : / / github . com / twall ) . 
 + * [ # 531 ] ( https : / / github . com / java - native - access / jna / pull / 531 ) : Ensure direct - mapped callbacks use the right calling convention - [ @ twall ] ( https : / / github . com / twall ) . 
 
 Release 4 . 2 . 1 
 = = = = = = = = = = = = = 
 diff - - git a / src / com / sun / jna / CallbackReference . java b / src / com / sun / jna / CallbackReference . java 
 index 4ff10b3 . . 16b5a1d 100644 
 - - - a / src / com / sun / jna / CallbackReference . java 
 + + + b / src / com / sun / jna / CallbackReference . java 
 @ @ - 39 , 7 + 39 , 9 @ @ class CallbackReference extends WeakReference { 
 static final Map callbackMap = new WeakHashMap ( ) ; 
 static final Map directCallbackMap = new WeakHashMap ( ) ; 
 static final Map pointerCallbackMap = new WeakHashMap ( ) ; 
 + / / Track memory allocations associated with this closure ( usually String args ) 
 static final Map allocations = new WeakHashMap ( ) ; 
 + / / Global map of allocated closures to facilitate centralized cleanup 
 private static final Map allocatedMemory = Collections . synchronizedMap ( new WeakHashMap ( ) ) ; 
 
 private static final Method PROXY _ CALLBACK _ METHOD ; 
 @ @ - 146 , 9 + 148 , 11 @ @ class CallbackReference extends WeakReference { 
 / / Keep a reference to the proxy to avoid premature GC of it 
 CallbackProxy proxy ; 
 Method method ; 
 + int callingConvention ; 
 private CallbackReference ( Callback callback , int callingConvention , boolean direct ) { 
 super ( callback ) ; 
 TypeMapper mapper = Native . getTypeMapper ( callback . getClass ( ) ) ; 
 + this . callingConvention = callingConvention ; 
 Class [ ] nativeParamTypes ; 
 Class returnType ; 
 
 @ @ - 180 , 6 + 184 , 7 @ @ class CallbackReference extends WeakReference { 
 } 
 
 String encoding = Native . getStringEncoding ( callback . getClass ( ) ) ; 
 + long peer = 0 ; 
 if ( direct ) { 
 method = getCallbackMethod ( callback ) ; 
 nativeParamTypes = method . getParameterTypes ( ) ; 
 @ @ - 188 , 12 + 193 , 10 @ @ class CallbackReference extends WeakReference { 
 if ( callback instanceof DLLCallback ) { 
 flags | = Native . CB _ OPTION _ IN _ DLL ; 
 } 
 - long peer = Native . createNativeCallback ( callback , method , 
 - nativeParamTypes , returnType , 
 - callingConvention , flags , 
 - encoding ) ; 
 - cbstruct = peer ! = 0 ? new Pointer ( peer ) : null ; 
 - allocatedMemory . put ( this , new WeakReference ( this ) ) ; 
 + peer = Native . createNativeCallback ( callback , method , 
 + nativeParamTypes , returnType , 
 + callingConvention , flags , 
 + encoding ) ; 
 } 
 else { 
 if ( callback instanceof CallbackProxy ) { 
 @ @ - 236 , 12 + 239 , 13 @ @ class CallbackReference extends WeakReference { 
 } 
 int flags = callback instanceof DLLCallback 
 ? Native . CB _ OPTION _ IN _ DLL : 0 ; 
 - long peer = Native . createNativeCallback ( proxy , PROXY _ CALLBACK _ METHOD , 
 - nativeParamTypes , returnType , 
 - callingConvention , flags , 
 - encoding ) ; 
 - cbstruct = peer ! = 0 ? new Pointer ( peer ) : null ; 
 + peer = Native . createNativeCallback ( proxy , PROXY _ CALLBACK _ METHOD , 
 + nativeParamTypes , returnType , 
 + callingConvention , flags , 
 + encoding ) ; 
 } 
 + cbstruct = peer ! = 0 ? new Pointer ( peer ) : null ; 
 + allocatedMemory . put ( this , new WeakReference ( this ) ) ; 
 } 
 
 private Class getNativeType ( Class cls ) { 
 @ @ - 404 , 8 + 408 , 13 @ @ class CallbackReference extends WeakReference { 
 if ( ( fp = getNativeFunctionPointer ( cb ) ) ! = null ) { 
 return fp ; 
 } 
 + Map options = Native . getLibraryOptions ( cb . getClass ( ) ) ; 
 int callingConvention = cb instanceof AltCallingConvention 
 - ? Function . ALT _ CONVENTION : Function . C _ CONVENTION ; 
 + ? Function . ALT _ CONVENTION 
 + : ( options ! = null & & options . containsKey ( Library . OPTION _ CALLING _ CONVENTION ) 
 + ? ( ( Integer ) options . get ( Library . OPTION _ CALLING _ CONVENTION ) ) . intValue ( ) 
 + : Function . C _ CONVENTION ) ; 
 + 
 Map map = direct ? directCallbackMap : callbackMap ; 
 synchronized ( callbackMap ) { 
 CallbackReference cbref = ( CallbackReference ) map . get ( cb ) ; 
 diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index ed6178f . . d147e40 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 1439 , 6 + 1439 , 54 @ @ public class CallbacksTest extends TestCase implements Paths { 
 } 
 } 
 
 + public interface TaggedCallingConventionTestLibrary extends Library , AltCallingConvention { 
 + interface TestCallbackTagged extends Callback , AltCallingConvention { 
 + void invoke ( ) ; 
 + } 
 + } 
 + 
 + public void testCallingConventionFromInterface ( ) { 
 + TaggedCallingConventionTestLibrary lib = ( TaggedCallingConventionTestLibrary ) 
 + Native . loadLibrary ( " testlib " , TaggedCallingConventionTestLibrary . class ) ; 
 + TaggedCallingConventionTestLibrary . TestCallbackTagged cb = new TaggedCallingConventionTestLibrary . TestCallbackTagged ( ) { 
 + public void invoke ( ) { } 
 + } ; 
 + try { 
 + Pointer p = CallbackReference . getFunctionPointer ( cb ) ; 
 + CallbackReference ref = ( CallbackReference ) CallbackReference . callbackMap . get ( cb ) ; 
 + assertNotNull ( " CallbackReference not found " , ref ) ; 
 + assertEquals ( " Tag - based calling convention not applied " , Function . ALT _ CONVENTION , ref . callingConvention ) ; 
 + } 
 + catch ( IllegalArgumentException e ) { 
 + / / Alt convention not supported 
 + } 
 + } 
 + 
 + public interface OptionCallingConventionTestLibrary extends Library { 
 + interface TestCallback extends Callback { 
 + void invoke ( ) ; 
 + } 
 + } 
 + 
 + public void testCallingConventionFromOptions ( ) { 
 + Map options = new HashMap ( ) ; 
 + options . put ( Library . OPTION _ CALLING _ CONVENTION , Function . ALT _ CONVENTION ) ; 
 + OptionCallingConventionTestLibrary lib = ( OptionCallingConventionTestLibrary ) 
 + Native . loadLibrary ( " testlib " , OptionCallingConventionTestLibrary . class , options ) ; 
 + OptionCallingConventionTestLibrary . TestCallback cb = new OptionCallingConventionTestLibrary . TestCallback ( ) { 
 + public void invoke ( ) { } 
 + } ; 
 + try { 
 + Pointer p = CallbackReference . getFunctionPointer ( cb ) ; 
 + CallbackReference ref = ( CallbackReference ) CallbackReference . callbackMap . get ( cb ) ; 
 + assertNotNull ( " CallbackReference not found " , ref ) ; 
 + assertEquals ( " Option - based calling convention not applied " , Function . ALT _ CONVENTION , ref . callingConvention ) ; 
 + } 
 + catch ( IllegalArgumentException e ) { 
 + / / Alt convention not supported 
 + } 
 + } 
 + 
 public static void main ( java . lang . String [ ] argList ) { 
 junit . textui . TestRunner . run ( CallbacksTest . class ) ; 
 }

NEAREST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 index 9cff04a . . 10172a7 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 @ @ - 1231 , 18 + 1231 , 22 @ @ public interface Kernel32 extends StdCallLibrary { 
 boolean DeviceIoControl ( HANDLE hDevice , int dwIoControlCode , Pointer lpInBuffer , int nInBufferSize , 
 Pointer lpOutBuffer , int nOutBufferSize , IntByReference lpBytesReturned , Pointer lpOverlapped ) ; 
 	 
 - 	 / * * 
 - 	 * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of 
 - 	 * space , the total amount of free space , and the total amount of free space available to the user that is 
 - 	 * associated with the calling thread . 
 - 	 * 
 - 	 * @ param lpDirectoryName 
 - 	 * @ param lpFreeBytesAvailable 
 - 	 * @ param lpTotalNumberOfBytes 
 - 	 * @ param lpTotalNumberOfFreeBytes 
 - 	 * @ return 
 - 	 * / 
 - 	 boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; 
 + / * * 
 + * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of 
 + * space , the total amount of free space , and the total amount of free space available to the user that is 
 + * associated with the calling thread . 
 + * 
 + * @ param lpDirectoryName 
 + * @ param lpFreeBytesAvailable 
 + * @ param lpTotalNumberOfBytes 
 + * @ param lpTotalNumberOfFreeBytes 
 + * @ return 
 + * If the function succeeds , the return value is nonzero . 
 + * 
 + * If the function fails , the return value is zero ( 0 ) . To get extended error information , 
 + * call GetLastError . 
 + * / 
 + boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; 
 
 / * * 
 * Takes a snapshot of the specified processes , as well as the heaps , modules , and threads used by these processes .
