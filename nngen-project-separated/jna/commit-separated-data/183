BLEU SCORE: 0.03283637368030199

TEST MSG: Remove unnecessary constructor and do general cleanup
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 6c7ef0a . . ec2f773 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 43 , 6 + 43 , 7 @ @ Features <nl> * [ # 608 ] ( https : / / github . com / java - native - access / jna / pull / 608 ) : Mavenize the build process - change parent and native pom artifactId / name to differentiate in IDE and build tools . [ @ bhamail ] ( https : / / github . com / bhamail ) <nl> * [ # 613 ] ( https : / / github . com / java - native - access / jna / pull / 613 ) : Make Win32Exception extend LastErrorException [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> * [ # 613 ] ( https : / / github . com / java - native - access / jna / pull / 614 ) : Added standard ' Kernel32Util # closeHandle ' method that throws a Win32Exception if failed to close the handle [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> + * [ # 616 ] ( https : / / github . com / java - native - access / jna / pull / 616 ) : Allow access to base interfaces ( most important IDispatch ) via ProxyObject and improve binding by allowing to use dispId for the call - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> @ @ - 55 , 7 + 56 , 7 @ @ Bug Fixes <nl> * [ # 593 ] ( https : / / github . com / java - native - access / jna / pull / 593 ) : Improve binding of TypeLib bindings - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 578 ] ( https : / / github . com / java - native - access / jna / pull / 578 ) : Fix COM CallbackHandlers , allow usage of VARIANTs directly in c . s . j . p . w . COM . util . ProxyObject and fix native memory leak in c . s . j . p . w . COM . util . ProxyObject - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) <nl> * [ # 601 ] ( https : / / github . com / java - native - access / jna / pull / 601 ) : Remove COMThread and COM initialization from objects and require callers to initialize COM themselves . Asserts are added to guard correct usage . - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> - * [ # 602 ] https : / / github . com / java - native - access / jna / pull / 602 ) : Make sure SID related memory is properly released once no longer required [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> + * [ # 602 ] ( https : / / github . com / java - native - access / jna / pull / 602 ) : Make sure SID related memory is properly released once no longer required [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> * [ # 610 ] ( https : / / github . com / java - native - access / jna / pull / 610 ) : Fixed issue # 604 : Kernel32 # GetLastError ( ) always returns ERROR _ SUCCESS [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> <nl> Release 4 . 2 . 1 <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> index 376c59c . . 5d2bda3 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> @ @ - 142 , 9 + 142 , 7 @ @ public class CallbackProxy implements IDispatchCallback { <nl> PointerByReference ppvObject = new PointerByReference ( ) ; <nl> IID iid = com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; <nl> dispatch . QueryInterface ( new REFIID ( iid ) , ppvObject ) ; <nl> - Unknown rawUnk = new Unknown ( ppvObject . getValue ( ) ) ; <nl> - 	 	 	 	 	 long unknownId = Pointer . nativeValue ( rawUnk . getPointer ( ) ) ; <nl> - IUnknown unk = CallbackProxy . this . factory . createProxy ( IUnknown . class , unknownId , dispatch ) ; <nl> + IUnknown unk = CallbackProxy . this . factory . createProxy ( IUnknown . class , dispatch ) ; <nl> if ( targetClass . getAnnotation ( ComInterface . class ) ! = null ) { <nl> rjargs . add ( unk . queryInterface ( targetClass ) ) ; <nl> } else { <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java <nl> index 990e0da . . d572fb2 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java <nl> @ @ - 38 , 11 + 38 , 9 @ @ import java . util . LinkedList ; <nl> import java . util . List ; <nl> <nl> public class Factory { <nl> - <nl> 	 / * * <nl> - 	 * Creates a utility COM Factory and a ComThread on which all COM calls are executed . <nl> - 	 * NOTE : Remember to call factory . getComThread ( ) . terminate ( ) at some appropriate point . <nl> - 	 * <nl> + 	 * Factory keeps track of COM objects - all objects created with this <nl> + * factory can be disposed by calling { @ link Factory # disposeAll ( ) } . <nl> 	 * / <nl> 	 public Factory ( ) { <nl> assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> @ @ - 90 , 22 + 88 , 6 @ @ public class Factory { <nl> 	 	 T result = comInterface . cast ( proxy ) ; <nl> 	 	 return result ; <nl> 	 } <nl> - <nl> - 	 / * * only for use when creating ProxyObjects from Callbacks <nl> - 	 * <nl> - 	 * @ param comInterface <nl> - 	 * @ param unknownId <nl> - 	 * @ param dispatch <nl> - 	 * @ return proxy object <nl> - 	 * / <nl> - 	 < T > T createProxy ( Class < T > comInterface , long unknownId , IDispatch dispatch ) { <nl> - assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> - <nl> - 	 	 ProxyObject jop = new ProxyObject ( comInterface , unknownId , dispatch , this ) ; <nl> - 	 	 Object proxy = Proxy . newProxyInstance ( comInterface . getClassLoader ( ) , new Class < ? > [ ] { comInterface } , jop ) ; <nl> - 	 	 T result = comInterface . cast ( proxy ) ; <nl> - 	 	 return result ; <nl> - 	 } <nl> 	 <nl> 	 / * * <nl> 	 * Creates a new COM object ( CoCreateInstance ) for the given progId and <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> index 9942afb . . decfc3b 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> @ @ - 55 , 12 + 55 , 27 @ @ import java . lang . reflect . InvocationTargetException ; <nl> <nl> / * * <nl> * This object acts as the invocation handler for interfaces annotated with <nl> - * ComInterface . It wraps all ( necessary ) low level COM calls and executes them <nl> - * on a ' ComThread ' held by the Factory object . <nl> + * ComInterface . It wraps all ( necessary ) low level COM calls and dispatches <nl> + * them through the COM runtime . <nl> + * <nl> + * < p > The caller of the methods is responsible for correct initialization of the <nl> + * COM runtime and appropriate thread - handling - depending on the choosen <nl> + * handling model . < / p > <nl> + * <nl> + * @ see < a href = " https : / / msdn . microsoft . com / de - de / library / windows / desktop / ms693344 % 28v = vs . 85 % 29 . aspx " > MSDN - Processes , Threads , and Apartments < / a > <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / ms809971 . aspx " > MSDN - Understanding and Using COM Threading Models < / a > <nl> * / <nl> public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win32 . COM . util . IDispatch , <nl> 	 	 IRawDispatchHandle , IConnectionPoint { <nl> <nl> + 	 / / cached value of the IUnknown interface pointer <nl> + 	 / / Rules of COM state that querying for the IUnknown interface must return <nl> + 	 / / an identical pointer value <nl> + 	 private long unknownId ; <nl> + 	 private final Class < ? > theInterface ; <nl> + 	 private final Factory factory ; <nl> + 	 private final com . sun . jna . platform . win32 . COM . IDispatch rawDispatch ; <nl> + <nl> 	 public ProxyObject ( Class < ? > theInterface , IDispatch rawDispatch , Factory factory ) { <nl> 	 	 this . unknownId = - 1 ; <nl> 	 	 this . rawDispatch = rawDispatch ; <nl> @ @ - 73 , 38 + 88 , 11 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 	 factory . register ( this ) ; <nl> 	 } <nl> <nl> - 	 / * * when proxy is created for arguments on a call back , they are already on the <nl> - 	 * com thread , and hence calling ' getUnknownId ' will not work as it uses the ComThread <nl> - 	 * however , the unknown pointer value is passed in ; <nl> - 	 * <nl> - 	 * @ param theInterface <nl> - 	 * @ param unknownId <nl> - 	 * @ param rawDispatch <nl> - 	 * @ param factory <nl> - 	 * / <nl> - 	 ProxyObject ( Class < ? > theInterface , long unknownId , IDispatch rawDispatch , Factory factory ) { <nl> - 	 	 this . unknownId = unknownId ; <nl> - 	 	 this . rawDispatch = rawDispatch ; <nl> - 	 	 this . theInterface = theInterface ; <nl> - 	 	 this . factory = factory ; <nl> - 	 	 / / make sure dispatch object knows we have a reference to it <nl> - 	 	 / / ( for debug it is usefult to be able to see how many refs are present <nl> - 	 	 int n = this . rawDispatch . AddRef ( ) ; <nl> - 	 	 factory . register ( this ) ; <nl> - 	 } <nl> - <nl> - <nl> - 	 / / cached value of the IUnknown interface pointer <nl> - 	 / / Rules of COM state that querying for the IUnknown interface must return <nl> - 	 / / an identical pointer value <nl> - 	 long unknownId ; <nl> - <nl> - 	 long getUnknownId ( ) { <nl> + 	 private long getUnknownId ( ) { <nl> assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> <nl> 	 	 if ( - 1 = = this . unknownId ) { <nl> 	 	 	 try { <nl> - <nl> 	 	 	 	 final PointerByReference ppvObject = new PointerByReference ( ) ; <nl> <nl> 	 	 	 	 Thread current = Thread . currentThread ( ) ; <nl> @ @ - 144 , 12 + 132 , 8 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 Class < ? > theInterface ; <nl> - 	 Factory factory ; <nl> - 	 com . sun . jna . platform . win32 . COM . IDispatch rawDispatch ; <nl> - <nl> 	 @ Override <nl> - public com . sun . jna . platform . win32 . COM . IDispatch getRawDispatch ( ) { <nl> + public com . sun . jna . platform . win32 . COM . IDispatch getRawDispatch ( ) { <nl> 	 	 return this . rawDispatch ; <nl> 	 } <nl> <nl> @ @ - 164 , 7 + 148 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 * therefore we can compare the pointers <nl> 	 * / <nl> 	 @ Override <nl> - public boolean equals ( Object arg ) { <nl> + public boolean equals ( Object arg ) { <nl> 	 	 if ( null = = arg ) { <nl> 	 	 	 return false ; <nl> 	 	 } else if ( arg instanceof ProxyObject ) { <nl> @ @ - 261 , 7 + 245 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 } <nl> <nl> 	 / / - - - - - - - - - - - - - - - - - - - - - - IConnectionPoint - - - - - - - - - - - - - - - - - - - - - - <nl> - 	 ConnectionPoint fetchRawConnectionPoint ( IID iid ) throws InterruptedException , ExecutionException , TimeoutException { <nl> + 	 private ConnectionPoint fetchRawConnectionPoint ( IID iid ) throws InterruptedException , ExecutionException , TimeoutException { <nl> assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> <nl> 	 	 / / query for ConnectionPointContainer <nl> @ @ - 466 , 7 + 450 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 IID getIID ( ComInterface annotation ) { <nl> + 	 private IID getIID ( ComInterface annotation ) { <nl> 	 	 String iidStr = annotation . iid ( ) ; <nl> 	 	 if ( null ! = iidStr & & ! iidStr . isEmpty ( ) ) { <nl> 	 	 	 return new IID ( iidStr ) ; <nl> @ @ - 657 , 11 + 641 , 11 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 	 } <nl> <nl> <nl> - 	 	 	 HRESULT hr = pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , <nl> - 	 	 	 	 	 	 	 new WinDef . WORD ( finalNType ) , dp , pvResult , pExcepInfo , puArgErr ) ; <nl> + HRESULT hr = pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , <nl> + new WinDef . WORD ( finalNType ) , dp , pvResult , pExcepInfo , puArgErr ) ; <nl> <nl> <nl> - 	 	 	 COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; <nl> - 	 	 	 return hr ; <nl> + COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; <nl> + return hr ; <nl> 	 } <nl> }
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 6c7ef0a . . ec2f773 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 43 , 6 + 43 , 7 @ @ Features 
 * [ # 608 ] ( https : / / github . com / java - native - access / jna / pull / 608 ) : Mavenize the build process - change parent and native pom artifactId / name to differentiate in IDE and build tools . [ @ bhamail ] ( https : / / github . com / bhamail ) 
 * [ # 613 ] ( https : / / github . com / java - native - access / jna / pull / 613 ) : Make Win32Exception extend LastErrorException [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 * [ # 613 ] ( https : / / github . com / java - native - access / jna / pull / 614 ) : Added standard ' Kernel32Util # closeHandle ' method that throws a Win32Exception if failed to close the handle [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 + * [ # 616 ] ( https : / / github . com / java - native - access / jna / pull / 616 ) : Allow access to base interfaces ( most important IDispatch ) via ProxyObject and improve binding by allowing to use dispId for the call - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 @ @ - 55 , 7 + 56 , 7 @ @ Bug Fixes 
 * [ # 593 ] ( https : / / github . com / java - native - access / jna / pull / 593 ) : Improve binding of TypeLib bindings - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 578 ] ( https : / / github . com / java - native - access / jna / pull / 578 ) : Fix COM CallbackHandlers , allow usage of VARIANTs directly in c . s . j . p . w . COM . util . ProxyObject and fix native memory leak in c . s . j . p . w . COM . util . ProxyObject - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) 
 * [ # 601 ] ( https : / / github . com / java - native - access / jna / pull / 601 ) : Remove COMThread and COM initialization from objects and require callers to initialize COM themselves . Asserts are added to guard correct usage . - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 - * [ # 602 ] https : / / github . com / java - native - access / jna / pull / 602 ) : Make sure SID related memory is properly released once no longer required [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 + * [ # 602 ] ( https : / / github . com / java - native - access / jna / pull / 602 ) : Make sure SID related memory is properly released once no longer required [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 * [ # 610 ] ( https : / / github . com / java - native - access / jna / pull / 610 ) : Fixed issue # 604 : Kernel32 # GetLastError ( ) always returns ERROR _ SUCCESS [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 
 Release 4 . 2 . 1 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 index 376c59c . . 5d2bda3 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 @ @ - 142 , 9 + 142 , 7 @ @ public class CallbackProxy implements IDispatchCallback { 
 PointerByReference ppvObject = new PointerByReference ( ) ; 
 IID iid = com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; 
 dispatch . QueryInterface ( new REFIID ( iid ) , ppvObject ) ; 
 - Unknown rawUnk = new Unknown ( ppvObject . getValue ( ) ) ; 
 - 	 	 	 	 	 long unknownId = Pointer . nativeValue ( rawUnk . getPointer ( ) ) ; 
 - IUnknown unk = CallbackProxy . this . factory . createProxy ( IUnknown . class , unknownId , dispatch ) ; 
 + IUnknown unk = CallbackProxy . this . factory . createProxy ( IUnknown . class , dispatch ) ; 
 if ( targetClass . getAnnotation ( ComInterface . class ) ! = null ) { 
 rjargs . add ( unk . queryInterface ( targetClass ) ) ; 
 } else { 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java 
 index 990e0da . . d572fb2 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java 
 @ @ - 38 , 11 + 38 , 9 @ @ import java . util . LinkedList ; 
 import java . util . List ; 
 
 public class Factory { 
 - 
 	 / * * 
 - 	 * Creates a utility COM Factory and a ComThread on which all COM calls are executed . 
 - 	 * NOTE : Remember to call factory . getComThread ( ) . terminate ( ) at some appropriate point . 
 - 	 * 
 + 	 * Factory keeps track of COM objects - all objects created with this 
 + * factory can be disposed by calling { @ link Factory # disposeAll ( ) } . 
 	 * / 
 	 public Factory ( ) { 
 assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 @ @ - 90 , 22 + 88 , 6 @ @ public class Factory { 
 	 	 T result = comInterface . cast ( proxy ) ; 
 	 	 return result ; 
 	 } 
 - 
 - 	 / * * only for use when creating ProxyObjects from Callbacks 
 - 	 * 
 - 	 * @ param comInterface 
 - 	 * @ param unknownId 
 - 	 * @ param dispatch 
 - 	 * @ return proxy object 
 - 	 * / 
 - 	 < T > T createProxy ( Class < T > comInterface , long unknownId , IDispatch dispatch ) { 
 - assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 - 
 - 	 	 ProxyObject jop = new ProxyObject ( comInterface , unknownId , dispatch , this ) ; 
 - 	 	 Object proxy = Proxy . newProxyInstance ( comInterface . getClassLoader ( ) , new Class < ? > [ ] { comInterface } , jop ) ; 
 - 	 	 T result = comInterface . cast ( proxy ) ; 
 - 	 	 return result ; 
 - 	 } 
 	 
 	 / * * 
 	 * Creates a new COM object ( CoCreateInstance ) for the given progId and 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 index 9942afb . . decfc3b 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 @ @ - 55 , 12 + 55 , 27 @ @ import java . lang . reflect . InvocationTargetException ; 
 
 / * * 
 * This object acts as the invocation handler for interfaces annotated with 
 - * ComInterface . It wraps all ( necessary ) low level COM calls and executes them 
 - * on a ' ComThread ' held by the Factory object . 
 + * ComInterface . It wraps all ( necessary ) low level COM calls and dispatches 
 + * them through the COM runtime . 
 + * 
 + * < p > The caller of the methods is responsible for correct initialization of the 
 + * COM runtime and appropriate thread - handling - depending on the choosen 
 + * handling model . < / p > 
 + * 
 + * @ see < a href = " https : / / msdn . microsoft . com / de - de / library / windows / desktop / ms693344 % 28v = vs . 85 % 29 . aspx " > MSDN - Processes , Threads , and Apartments < / a > 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / ms809971 . aspx " > MSDN - Understanding and Using COM Threading Models < / a > 
 * / 
 public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win32 . COM . util . IDispatch , 
 	 	 IRawDispatchHandle , IConnectionPoint { 
 
 + 	 / / cached value of the IUnknown interface pointer 
 + 	 / / Rules of COM state that querying for the IUnknown interface must return 
 + 	 / / an identical pointer value 
 + 	 private long unknownId ; 
 + 	 private final Class < ? > theInterface ; 
 + 	 private final Factory factory ; 
 + 	 private final com . sun . jna . platform . win32 . COM . IDispatch rawDispatch ; 
 + 
 	 public ProxyObject ( Class < ? > theInterface , IDispatch rawDispatch , Factory factory ) { 
 	 	 this . unknownId = - 1 ; 
 	 	 this . rawDispatch = rawDispatch ; 
 @ @ - 73 , 38 + 88 , 11 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 	 factory . register ( this ) ; 
 	 } 
 
 - 	 / * * when proxy is created for arguments on a call back , they are already on the 
 - 	 * com thread , and hence calling ' getUnknownId ' will not work as it uses the ComThread 
 - 	 * however , the unknown pointer value is passed in ; 
 - 	 * 
 - 	 * @ param theInterface 
 - 	 * @ param unknownId 
 - 	 * @ param rawDispatch 
 - 	 * @ param factory 
 - 	 * / 
 - 	 ProxyObject ( Class < ? > theInterface , long unknownId , IDispatch rawDispatch , Factory factory ) { 
 - 	 	 this . unknownId = unknownId ; 
 - 	 	 this . rawDispatch = rawDispatch ; 
 - 	 	 this . theInterface = theInterface ; 
 - 	 	 this . factory = factory ; 
 - 	 	 / / make sure dispatch object knows we have a reference to it 
 - 	 	 / / ( for debug it is usefult to be able to see how many refs are present 
 - 	 	 int n = this . rawDispatch . AddRef ( ) ; 
 - 	 	 factory . register ( this ) ; 
 - 	 } 
 - 
 - 
 - 	 / / cached value of the IUnknown interface pointer 
 - 	 / / Rules of COM state that querying for the IUnknown interface must return 
 - 	 / / an identical pointer value 
 - 	 long unknownId ; 
 - 
 - 	 long getUnknownId ( ) { 
 + 	 private long getUnknownId ( ) { 
 assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 
 	 	 if ( - 1 = = this . unknownId ) { 
 	 	 	 try { 
 - 
 	 	 	 	 final PointerByReference ppvObject = new PointerByReference ( ) ; 
 
 	 	 	 	 Thread current = Thread . currentThread ( ) ; 
 @ @ - 144 , 12 + 132 , 8 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 	 } 
 	 } 
 
 - 	 Class < ? > theInterface ; 
 - 	 Factory factory ; 
 - 	 com . sun . jna . platform . win32 . COM . IDispatch rawDispatch ; 
 - 
 	 @ Override 
 - public com . sun . jna . platform . win32 . COM . IDispatch getRawDispatch ( ) { 
 + public com . sun . jna . platform . win32 . COM . IDispatch getRawDispatch ( ) { 
 	 	 return this . rawDispatch ; 
 	 } 
 
 @ @ - 164 , 7 + 148 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 * therefore we can compare the pointers 
 	 * / 
 	 @ Override 
 - public boolean equals ( Object arg ) { 
 + public boolean equals ( Object arg ) { 
 	 	 if ( null = = arg ) { 
 	 	 	 return false ; 
 	 	 } else if ( arg instanceof ProxyObject ) { 
 @ @ - 261 , 7 + 245 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 } 
 
 	 / / - - - - - - - - - - - - - - - - - - - - - - IConnectionPoint - - - - - - - - - - - - - - - - - - - - - - 
 - 	 ConnectionPoint fetchRawConnectionPoint ( IID iid ) throws InterruptedException , ExecutionException , TimeoutException { 
 + 	 private ConnectionPoint fetchRawConnectionPoint ( IID iid ) throws InterruptedException , ExecutionException , TimeoutException { 
 assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 
 	 	 / / query for ConnectionPointContainer 
 @ @ - 466 , 7 + 450 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 	 } 
 	 } 
 
 - 	 IID getIID ( ComInterface annotation ) { 
 + 	 private IID getIID ( ComInterface annotation ) { 
 	 	 String iidStr = annotation . iid ( ) ; 
 	 	 if ( null ! = iidStr & & ! iidStr . isEmpty ( ) ) { 
 	 	 	 return new IID ( iidStr ) ; 
 @ @ - 657 , 11 + 641 , 11 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 	 } 
 
 
 - 	 	 	 HRESULT hr = pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , 
 - 	 	 	 	 	 	 	 new WinDef . WORD ( finalNType ) , dp , pvResult , pExcepInfo , puArgErr ) ; 
 + HRESULT hr = pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , 
 + new WinDef . WORD ( finalNType ) , dp , pvResult , pExcepInfo , puArgErr ) ; 
 
 
 - 	 	 	 COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; 
 - 	 	 	 return hr ; 
 + COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; 
 + return hr ; 
 	 } 
 }

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
