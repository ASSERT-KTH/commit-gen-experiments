BLEU SCORE: 0.014199193612838947

TEST MSG: REFIID # equals is now defined based on content again ( regression fix )
GENERATED MSG: added some test

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> index 722278e . . 0504051 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> @ @ - 199 , 19 + 199 , 13 @ @ public class CallbackProxy implements IDispatchCallback { <nl> 	 public HRESULT QueryInterface ( REFIID refid , PointerByReference ppvObject ) { <nl> 	 	 if ( null = = ppvObject ) { <nl> 	 	 	 return new HRESULT ( WinError . E _ POINTER ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 if ( refid . equals ( this . listenedToRiid ) ) { <nl> + 	 	 } else if ( refid . equals ( this . listenedToRiid ) ) { <nl> 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; <nl> 	 	 	 return WinError . S _ OK ; <nl> - 	 	 } <nl> - <nl> - 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Unknown . IID _ IUNKNOWN ) ) { <nl> + 	 	 } else if ( refid . getValue ( ) . equals ( Unknown . IID _ IUNKNOWN ) ) { <nl> 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; <nl> 	 	 	 return WinError . S _ OK ; <nl> - 	 	 } <nl> - <nl> - 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Dispatch . IID _ IDISPATCH ) ) { <nl> + 	 	 } else if ( refid . getValue ( ) . equals ( Dispatch . IID _ IDISPATCH ) ) { <nl> 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; <nl> 	 	 	 return WinError . S _ OK ; <nl> 	 	 } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> index f6794ae . . d60e64c 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> @ @ - 512 , 7 + 512 , 27 @ @ public interface Guid { <nl> public IID getValue ( ) { <nl> return new IID ( getPointer ( ) ) ; <nl> } <nl> - <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) { <nl> + if ( o = = null ) { <nl> + return false ; <nl> + } <nl> + if ( this = = o ) { <nl> + return true ; <nl> + } <nl> + if ( getClass ( ) ! = o . getClass ( ) ) { <nl> + return false ; <nl> + } <nl> + <nl> + REFIID other = ( REFIID ) o ; <nl> + return getValue ( ) . equals ( other . getValue ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) { <nl> + return getValue ( ) . hashCode ( ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks _ Test . java <nl> index 0280df0 . . 3488753 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks _ Test . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import com . sun . jna . Pointer ; <nl> + import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import org . junit . After ; <nl> import org . junit . Assert ; <nl> import org . junit . Before ; <nl> @ @ - 23 , 12 + 24 , 20 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; <nl> + import com . sun . jna . platform . win32 . Guid . IID ; <nl> + import com . sun . jna . platform . win32 . Guid . REFIID ; <nl> import com . sun . jna . platform . win32 . OaIdl ; <nl> import com . sun . jna . platform . win32 . Ole32 ; <nl> import com . sun . jna . platform . win32 . Variant ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> + import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> import org . hamcrest . CoreMatchers ; <nl> <nl> + import static com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; <nl> + import static com . sun . jna . platform . win32 . COM . IDispatch . IID _ IDISPATCH ; <nl> + import static org . junit . Assert . * ; <nl> + <nl> public class ComEventCallbacks _ Test { <nl> <nl> static { <nl> @ @ - 88 , 8 + 97 , 10 @ @ public class ComEventCallbacks _ Test { <nl> 	 	 void Navigate ( String url , long flags , String targetFrameName , VARIANT postData , String headers ) ; <nl> 	 } <nl> <nl> - 	 @ ComInterface ( iid = " { 34A715A0 - 6587 - 11D0 - 924A - 0020AFC7AC4D } " ) <nl> + 	 @ ComInterface ( iid = DWebBrowserEvents2 . IID ) <nl> 	 interface DWebBrowserEvents2 { <nl> + public static final String IID = " { 34A715A0 - 6587 - 11D0 - 924A - 0020AFC7AC4D } " ; <nl> + <nl> 	 	 @ ComEventCallback ( dispid = 0x000000fd ) <nl> 	 	 void OnQuit ( ) ; <nl> 	 	 <nl> @ @ - 235 , 7 + 246 , 44 @ @ public class ComEventCallbacks _ Test { <nl> iWebBrowser2 . Quit ( ) ; <nl> <nl> / / NavigateComplete can ' t be called if access is blocked <nl> - Assert . assertFalse ( " Navigation to https : / / github . com / java - native - access / jna should be blocked " , listener . navigateComplete2Called ) ; <nl> - 	 	 <nl> + Assert . assertFalse ( " Navigation to https : / / github . com / java - native - access / jna should be blocked " , listener . navigateComplete2Called ) ; 	 <nl> 	 } <nl> + <nl> + @ Test <nl> + public void testComEventCallback ( ) { <nl> + DWebBrowserEvents2 _ Listener listener = new DWebBrowserEvents2 _ Listener ( ) ; <nl> + CallbackProxy proxy = new CallbackProxy ( factory , DWebBrowserEvents2 . class , listener ) ; <nl> + <nl> + REFIID refiid = new REFIID ( new IID ( DWebBrowserEvents2 . IID ) ) ; <nl> + <nl> + / / precondition : the structures for the listenedToRiid and <nl> + / / refiid have to be different ( else the PointerType # equals would <nl> + / / be enough <nl> + assertFalse ( proxy . listenedToRiid . getPointer ( ) . equals ( refiid . getPointer ( ) ) ) ; <nl> + <nl> + / / Neverthe less , the QueryInterface method has to return the <nl> + / / correct pointer ( the IID is relevant , not its wrapper <nl> + PointerByReference interfacePointer = new PointerByReference ( ) ; <nl> + <nl> + / / Check the " business " interface <nl> + HRESULT hr = proxy . QueryInterface ( refiid , interfacePointer ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> + assertEquals ( interfacePointer . getValue ( ) , proxy . getPointer ( ) ) ; <nl> + <nl> + / / IUnknown must be implemented <nl> + hr = proxy . QueryInterface ( new REFIID ( IID _ IUNKNOWN ) , interfacePointer ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> + assertEquals ( interfacePointer . getValue ( ) , proxy . getPointer ( ) ) ; <nl> + <nl> + / / Currently only Dispatch based callbacks are supported , <nl> + / / so this interface must be present to <nl> + hr = proxy . QueryInterface ( new REFIID ( IID _ IDISPATCH ) , interfacePointer ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> + assertEquals ( interfacePointer . getValue ( ) , proxy . getPointer ( ) ) ; <nl> + <nl> + / / Negative check - - this has to fail , the IID should not be <nl> + / / assigned <nl> + hr = proxy . QueryInterface ( new REFIID ( new IID ( " { 00000000 - 0000 - 0000 - C000 - 000000000000 } " ) ) , interfacePointer ) ; <nl> + assertTrue ( COMUtils . FAILED ( hr ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 index 722278e . . 0504051 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 @ @ - 199 , 19 + 199 , 13 @ @ public class CallbackProxy implements IDispatchCallback { 
 	 public HRESULT QueryInterface ( REFIID refid , PointerByReference ppvObject ) { 
 	 	 if ( null = = ppvObject ) { 
 	 	 	 return new HRESULT ( WinError . E _ POINTER ) ; 
 - 	 	 } 
 - 
 - 	 	 if ( refid . equals ( this . listenedToRiid ) ) { 
 + 	 	 } else if ( refid . equals ( this . listenedToRiid ) ) { 
 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; 
 	 	 	 return WinError . S _ OK ; 
 - 	 	 } 
 - 
 - 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Unknown . IID _ IUNKNOWN ) ) { 
 + 	 	 } else if ( refid . getValue ( ) . equals ( Unknown . IID _ IUNKNOWN ) ) { 
 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; 
 	 	 	 return WinError . S _ OK ; 
 - 	 	 } 
 - 
 - 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Dispatch . IID _ IDISPATCH ) ) { 
 + 	 	 } else if ( refid . getValue ( ) . equals ( Dispatch . IID _ IDISPATCH ) ) { 
 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; 
 	 	 	 return WinError . S _ OK ; 
 	 	 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 index f6794ae . . d60e64c 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 @ @ - 512 , 7 + 512 , 27 @ @ public interface Guid { 
 public IID getValue ( ) { 
 return new IID ( getPointer ( ) ) ; 
 } 
 - 
 + 
 + @ Override 
 + public boolean equals ( Object o ) { 
 + if ( o = = null ) { 
 + return false ; 
 + } 
 + if ( this = = o ) { 
 + return true ; 
 + } 
 + if ( getClass ( ) ! = o . getClass ( ) ) { 
 + return false ; 
 + } 
 + 
 + REFIID other = ( REFIID ) o ; 
 + return getValue ( ) . equals ( other . getValue ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) { 
 + return getValue ( ) . hashCode ( ) ; 
 + } 
 } 
 
 / * * 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks _ Test . java 
 index 0280df0 . . 3488753 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks _ Test . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 import com . sun . jna . Pointer ; 
 + import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import org . junit . After ; 
 import org . junit . Assert ; 
 import org . junit . Before ; 
 @ @ - 23 , 12 + 24 , 20 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; 
 + import com . sun . jna . platform . win32 . Guid . IID ; 
 + import com . sun . jna . platform . win32 . Guid . REFIID ; 
 import com . sun . jna . platform . win32 . OaIdl ; 
 import com . sun . jna . platform . win32 . Ole32 ; 
 import com . sun . jna . platform . win32 . Variant ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 + import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 import org . hamcrest . CoreMatchers ; 
 
 + import static com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; 
 + import static com . sun . jna . platform . win32 . COM . IDispatch . IID _ IDISPATCH ; 
 + import static org . junit . Assert . * ; 
 + 
 public class ComEventCallbacks _ Test { 
 
 static { 
 @ @ - 88 , 8 + 97 , 10 @ @ public class ComEventCallbacks _ Test { 
 	 	 void Navigate ( String url , long flags , String targetFrameName , VARIANT postData , String headers ) ; 
 	 } 
 
 - 	 @ ComInterface ( iid = " { 34A715A0 - 6587 - 11D0 - 924A - 0020AFC7AC4D } " ) 
 + 	 @ ComInterface ( iid = DWebBrowserEvents2 . IID ) 
 	 interface DWebBrowserEvents2 { 
 + public static final String IID = " { 34A715A0 - 6587 - 11D0 - 924A - 0020AFC7AC4D } " ; 
 + 
 	 	 @ ComEventCallback ( dispid = 0x000000fd ) 
 	 	 void OnQuit ( ) ; 
 	 	 
 @ @ - 235 , 7 + 246 , 44 @ @ public class ComEventCallbacks _ Test { 
 iWebBrowser2 . Quit ( ) ; 
 
 / / NavigateComplete can ' t be called if access is blocked 
 - Assert . assertFalse ( " Navigation to https : / / github . com / java - native - access / jna should be blocked " , listener . navigateComplete2Called ) ; 
 - 	 	 
 + Assert . assertFalse ( " Navigation to https : / / github . com / java - native - access / jna should be blocked " , listener . navigateComplete2Called ) ; 	 
 	 } 
 + 
 + @ Test 
 + public void testComEventCallback ( ) { 
 + DWebBrowserEvents2 _ Listener listener = new DWebBrowserEvents2 _ Listener ( ) ; 
 + CallbackProxy proxy = new CallbackProxy ( factory , DWebBrowserEvents2 . class , listener ) ; 
 + 
 + REFIID refiid = new REFIID ( new IID ( DWebBrowserEvents2 . IID ) ) ; 
 + 
 + / / precondition : the structures for the listenedToRiid and 
 + / / refiid have to be different ( else the PointerType # equals would 
 + / / be enough 
 + assertFalse ( proxy . listenedToRiid . getPointer ( ) . equals ( refiid . getPointer ( ) ) ) ; 
 + 
 + / / Neverthe less , the QueryInterface method has to return the 
 + / / correct pointer ( the IID is relevant , not its wrapper 
 + PointerByReference interfacePointer = new PointerByReference ( ) ; 
 + 
 + / / Check the " business " interface 
 + HRESULT hr = proxy . QueryInterface ( refiid , interfacePointer ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 + assertEquals ( interfacePointer . getValue ( ) , proxy . getPointer ( ) ) ; 
 + 
 + / / IUnknown must be implemented 
 + hr = proxy . QueryInterface ( new REFIID ( IID _ IUNKNOWN ) , interfacePointer ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 + assertEquals ( interfacePointer . getValue ( ) , proxy . getPointer ( ) ) ; 
 + 
 + / / Currently only Dispatch based callbacks are supported , 
 + / / so this interface must be present to 
 + hr = proxy . QueryInterface ( new REFIID ( IID _ IDISPATCH ) , interfacePointer ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 + assertEquals ( interfacePointer . getValue ( ) , proxy . getPointer ( ) ) ; 
 + 
 + / / Negative check - - this has to fail , the IID should not be 
 + / / assigned 
 + hr = proxy . QueryInterface ( new REFIID ( new IID ( " { 00000000 - 0000 - 0000 - C000 - 000000000000 } " ) ) , interfacePointer ) ; 
 + assertTrue ( COMUtils . FAILED ( hr ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
