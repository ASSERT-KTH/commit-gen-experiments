BLEU SCORE: 0.02139089632303349

TEST MSG: don ' t align arguments in stdcall
GENERATED MSG: ensure sufficient space allocated for win64 ffi _ call stack

TEST DIFF (one line): diff - - git a / native / libffi / src / x86 / ffi . c b / native / libffi / src / x86 / ffi . c <nl> index c44f4f0 . . 9d19791 100644 <nl> - - - a / native / libffi / src / x86 / ffi . c <nl> + + + b / native / libffi / src / x86 / ffi . c <nl> @ @ - 305 , 6 + 305 , 9 @ @ ffi _ status ffi _ prep _ cif _ machdep ( ffi _ cif * cif ) <nl> <nl> for ( ptr = cif - > arg _ types , i = cif - > nargs ; i > 0 ; i - - , ptr + + ) <nl> { <nl> + # ifdef X86 _ WIN32 <nl> + if ( cif - > abi ! = FFI _ STDCALL ) <nl> + # endif <nl> if ( ( ( * ptr ) - > alignment - 1 ) & cif - > bytes ) <nl> cif - > bytes = ALIGN ( cif - > bytes , ( * ptr ) - > alignment ) ; <nl> cif - > bytes + = ALIGN ( ( * ptr ) - > size , FFI _ SIZEOF _ ARG ) ; <nl> diff - - git a / native / libffi / testsuite / libffi . call / align _ stdcall . c b / native / libffi / testsuite / libffi . call / align _ stdcall . c <nl> new file mode 100755 <nl> index 0000000 . . ed3511b <nl> - - - / dev / null <nl> + + + b / native / libffi / testsuite / libffi . call / align _ stdcall . c <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * Area : 	 ffi _ call <nl> + Purpose : 	 Check stdcall for argument alignment ( always 4 ) on X86 _ WIN32 systems . <nl> + Limitations : 	 none . <nl> + PR : 	 	 none . <nl> + Originator : 	 < twalljava @ java . net > ( from many _ win32 . c ) * / <nl> + <nl> + / * { dg - do run { target i ? 86 - * - cygwin * i ? 86 - * - mingw * } } * / <nl> + <nl> + # include " ffitest . h " <nl> + # include < float . h > <nl> + <nl> + static float _ _ attribute _ _ ( ( stdcall ) ) stdcall _ align ( int i1 , <nl> + double f2 , <nl> + int i3 , <nl> + double f4 ) <nl> + { <nl> + return i1 + f2 + i3 + f4 ; <nl> + } <nl> + <nl> + int main ( void ) <nl> + { <nl> + ffi _ cif cif ; <nl> + ffi _ type * args [ 4 ] = { & ffi _ type _ int , & ffi _ type _ double , & ffi _ type _ int , & ffi _ type _ double } ; <nl> + float fa [ 2 ] = { 1 , 2 } ; <nl> + int ia [ 2 ] = { 1 , 2 } ; <nl> + void * values [ 4 ] = { & ia [ 0 ] , & fa [ 0 ] , & ia [ 1 ] , & fa [ 1 ] } ; <nl> + float f , ff ; <nl> + <nl> + / * Initialize the cif * / <nl> + CHECK ( ffi _ prep _ cif ( & cif , FFI _ STDCALL , 4 , <nl> + 	 	 & ffi _ type _ float , args ) = = FFI _ OK ) ; <nl> + <nl> + ff = stdcall _ align ( ia [ 0 ] , fa [ 0 ] , ia [ 1 ] , fa [ 1 ] ) ; <nl> + <nl> + ffi _ call ( & cif , FFI _ FN ( stdcall _ align ) , & f , values ) ; <nl> + <nl> + if ( f - ff < FLT _ EPSILON ) <nl> + printf ( " stdcall many arg tests ok ! \ n " ) ; <nl> + else <nl> + CHECK ( 0 ) ; <nl> + exit ( 0 ) ; <nl> + }
NEAREST DIFF (one line): diff - - git a / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java b / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java <nl> index 9d6031a . . e766893 100644 <nl> - - - a / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java <nl> + + + b / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java <nl> @ @ - 205 , 11 + 205 , 11 @ @ public interface Kernel32 extends W32API { <nl> } <nl> } <nl> class OVERLAPPED extends Structure { <nl> - public int Internal ; <nl> - public int InternalHigh ; <nl> + public ULONG _ PTR Internal ; <nl> + public ULONG _ PTR InternalHigh ; <nl> public int Offset ; <nl> public int OffsetHigh ; <nl> - public Pointer hEvent ; <nl> + public HANDLE hEvent ; <nl> } <nl> / / TODO : figure out how OVERLAPPED is used and apply an appropriate mapping <nl> interface OVERLAPPED _ COMPLETION _ ROUTINE extends StdCallCallback {

TEST DIFF:
diff - - git a / native / libffi / src / x86 / ffi . c b / native / libffi / src / x86 / ffi . c 
 index c44f4f0 . . 9d19791 100644 
 - - - a / native / libffi / src / x86 / ffi . c 
 + + + b / native / libffi / src / x86 / ffi . c 
 @ @ - 305 , 6 + 305 , 9 @ @ ffi _ status ffi _ prep _ cif _ machdep ( ffi _ cif * cif ) 
 
 for ( ptr = cif - > arg _ types , i = cif - > nargs ; i > 0 ; i - - , ptr + + ) 
 { 
 + # ifdef X86 _ WIN32 
 + if ( cif - > abi ! = FFI _ STDCALL ) 
 + # endif 
 if ( ( ( * ptr ) - > alignment - 1 ) & cif - > bytes ) 
 cif - > bytes = ALIGN ( cif - > bytes , ( * ptr ) - > alignment ) ; 
 cif - > bytes + = ALIGN ( ( * ptr ) - > size , FFI _ SIZEOF _ ARG ) ; 
 diff - - git a / native / libffi / testsuite / libffi . call / align _ stdcall . c b / native / libffi / testsuite / libffi . call / align _ stdcall . c 
 new file mode 100755 
 index 0000000 . . ed3511b 
 - - - / dev / null 
 + + + b / native / libffi / testsuite / libffi . call / align _ stdcall . c 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * Area : 	 ffi _ call 
 + Purpose : 	 Check stdcall for argument alignment ( always 4 ) on X86 _ WIN32 systems . 
 + Limitations : 	 none . 
 + PR : 	 	 none . 
 + Originator : 	 < twalljava @ java . net > ( from many _ win32 . c ) * / 
 + 
 + / * { dg - do run { target i ? 86 - * - cygwin * i ? 86 - * - mingw * } } * / 
 + 
 + # include " ffitest . h " 
 + # include < float . h > 
 + 
 + static float _ _ attribute _ _ ( ( stdcall ) ) stdcall _ align ( int i1 , 
 + double f2 , 
 + int i3 , 
 + double f4 ) 
 + { 
 + return i1 + f2 + i3 + f4 ; 
 + } 
 + 
 + int main ( void ) 
 + { 
 + ffi _ cif cif ; 
 + ffi _ type * args [ 4 ] = { & ffi _ type _ int , & ffi _ type _ double , & ffi _ type _ int , & ffi _ type _ double } ; 
 + float fa [ 2 ] = { 1 , 2 } ; 
 + int ia [ 2 ] = { 1 , 2 } ; 
 + void * values [ 4 ] = { & ia [ 0 ] , & fa [ 0 ] , & ia [ 1 ] , & fa [ 1 ] } ; 
 + float f , ff ; 
 + 
 + / * Initialize the cif * / 
 + CHECK ( ffi _ prep _ cif ( & cif , FFI _ STDCALL , 4 , 
 + 	 	 & ffi _ type _ float , args ) = = FFI _ OK ) ; 
 + 
 + ff = stdcall _ align ( ia [ 0 ] , fa [ 0 ] , ia [ 1 ] , fa [ 1 ] ) ; 
 + 
 + ffi _ call ( & cif , FFI _ FN ( stdcall _ align ) , & f , values ) ; 
 + 
 + if ( f - ff < FLT _ EPSILON ) 
 + printf ( " stdcall many arg tests ok ! \ n " ) ; 
 + else 
 + CHECK ( 0 ) ; 
 + exit ( 0 ) ; 
 + }

NEAREST DIFF:
diff - - git a / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java b / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java 
 index 9d6031a . . e766893 100644 
 - - - a / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java 
 + + + b / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java 
 @ @ - 205 , 11 + 205 , 11 @ @ public interface Kernel32 extends W32API { 
 } 
 } 
 class OVERLAPPED extends Structure { 
 - public int Internal ; 
 - public int InternalHigh ; 
 + public ULONG _ PTR Internal ; 
 + public ULONG _ PTR InternalHigh ; 
 public int Offset ; 
 public int OffsetHigh ; 
 - public Pointer hEvent ; 
 + public HANDLE hEvent ; 
 } 
 / / TODO : figure out how OVERLAPPED is used and apply an appropriate mapping 
 interface OVERLAPPED _ COMPLETION _ ROUTINE extends StdCallCallback {
