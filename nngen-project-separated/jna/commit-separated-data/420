BLEU SCORE: 0.017820934647025707

TEST MSG: fix w32 compile error
GENERATED MSG: Remove superfluous exception checks , enable peer access on OSX

TEST DIFF (one line): diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index 60340e4 . . 523f875 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 2841 , 9 + 2841 , 9 @ @ Java _ com _ sun _ jna _ Native _ getWindowHandle0 ( JNIEnv * env , jclass UNUSED ( classp ) , job <nl> / / Use Unicode strings in case the path to the library includes non - ASCII <nl> / / characters . <nl> wchar _ t * path = L " jawt . dll " ; <nl> - jstring jprop = ( wchar _ t * ) get _ system _ property ( env , " java . home " ) ; <nl> + jstring jprop = get _ system _ property ( env , " java . home " ) ; <nl> if ( jprop ! = NULL ) { <nl> - const wchar _ t * prop = newWideCString ( env , value ) ; <nl> + const wchar _ t * prop = newWideCString ( env , jprop ) ; <nl> const wchar _ t * suffix = L " / bin / jawt . dll " ; <nl> size _ t len = wcslen ( prop ) + wcslen ( suffix ) + 1 ; <nl> path = ( wchar _ t * ) alloca ( len * sizeof ( wchar _ t ) ) ;
NEAREST DIFF (one line): diff - - git a / jnalib / src / com / sun / jna / Structure . java b / jnalib / src / com / sun / jna / Structure . java <nl> index 74e3d15 . . b4b84cd 100644 <nl> - - - a / jnalib / src / com / sun / jna / Structure . java <nl> + + + b / jnalib / src / com / sun / jna / Structure . java <nl> @ @ - 504 , 12 + 504 , 7 @ @ public abstract class Structure { <nl> s . write ( ) ; <nl> } <nl> else if ( Callback . class . isAssignableFrom ( nativeType ) ) { <nl> - Pointer p = null ; <nl> - if ( value ! = null ) { <nl> - CallbackReference cbref = CallbackReference . getInstance ( ( Callback ) value ) ; <nl> - p = cbref . getTrampoline ( ) ; <nl> - } <nl> - memory . setPointer ( offset , p ) ; <nl> + memory . setPointer ( offset , getFunctionPointer ( ( Callback ) value ) ) ; <nl> } <nl> else { <nl> throw new IllegalArgumentException ( " Field \ " " + structField . name <nl> @ @ - 804 , 11 + 799 , 10 @ @ public abstract class Structure { <nl> <nl> private Pointer getFunctionPointer ( Callback cb ) { <nl> if ( cb = = null ) return null ; <nl> - if ( Proxy . isProxyClass ( cb . getClass ( ) ) <nl> - & & Proxy . getInvocationHandler ( cb ) instanceof NativeCallbackHandler ) { <nl> - NativeCallbackHandler handler = <nl> - ( NativeCallbackHandler ) Proxy . getInvocationHandler ( cb ) ; <nl> - return handler . getPointer ( ) ; <nl> + if ( Proxy . isProxyClass ( cb . getClass ( ) ) ) { <nl> + InvocationHandler handler = Proxy . getInvocationHandler ( cb ) ; <nl> + if ( handler instanceof NativeCallbackHandler ) <nl> + return ( ( NativeCallbackHandler ) handler ) . getPointer ( ) ; <nl> } <nl> CallbackReference cbref = CallbackReference . getInstance ( cb ) ; <nl> return cbref . getTrampoline ( ) ; <nl> @ @ - 845 , 7 + 839 , 7 @ @ public abstract class Structure { <nl> + " = " + value ; <nl> } <nl> } <nl> - <nl> + <nl> / * * Enable an auto - generated Java interface proxy for a native function <nl> * pointer . <nl> * /

TEST DIFF:
diff - - git a / native / dispatch . c b / native / dispatch . c 
 index 60340e4 . . 523f875 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 2841 , 9 + 2841 , 9 @ @ Java _ com _ sun _ jna _ Native _ getWindowHandle0 ( JNIEnv * env , jclass UNUSED ( classp ) , job 
 / / Use Unicode strings in case the path to the library includes non - ASCII 
 / / characters . 
 wchar _ t * path = L " jawt . dll " ; 
 - jstring jprop = ( wchar _ t * ) get _ system _ property ( env , " java . home " ) ; 
 + jstring jprop = get _ system _ property ( env , " java . home " ) ; 
 if ( jprop ! = NULL ) { 
 - const wchar _ t * prop = newWideCString ( env , value ) ; 
 + const wchar _ t * prop = newWideCString ( env , jprop ) ; 
 const wchar _ t * suffix = L " / bin / jawt . dll " ; 
 size _ t len = wcslen ( prop ) + wcslen ( suffix ) + 1 ; 
 path = ( wchar _ t * ) alloca ( len * sizeof ( wchar _ t ) ) ;

NEAREST DIFF:
diff - - git a / jnalib / src / com / sun / jna / Structure . java b / jnalib / src / com / sun / jna / Structure . java 
 index 74e3d15 . . b4b84cd 100644 
 - - - a / jnalib / src / com / sun / jna / Structure . java 
 + + + b / jnalib / src / com / sun / jna / Structure . java 
 @ @ - 504 , 12 + 504 , 7 @ @ public abstract class Structure { 
 s . write ( ) ; 
 } 
 else if ( Callback . class . isAssignableFrom ( nativeType ) ) { 
 - Pointer p = null ; 
 - if ( value ! = null ) { 
 - CallbackReference cbref = CallbackReference . getInstance ( ( Callback ) value ) ; 
 - p = cbref . getTrampoline ( ) ; 
 - } 
 - memory . setPointer ( offset , p ) ; 
 + memory . setPointer ( offset , getFunctionPointer ( ( Callback ) value ) ) ; 
 } 
 else { 
 throw new IllegalArgumentException ( " Field \ " " + structField . name 
 @ @ - 804 , 11 + 799 , 10 @ @ public abstract class Structure { 
 
 private Pointer getFunctionPointer ( Callback cb ) { 
 if ( cb = = null ) return null ; 
 - if ( Proxy . isProxyClass ( cb . getClass ( ) ) 
 - & & Proxy . getInvocationHandler ( cb ) instanceof NativeCallbackHandler ) { 
 - NativeCallbackHandler handler = 
 - ( NativeCallbackHandler ) Proxy . getInvocationHandler ( cb ) ; 
 - return handler . getPointer ( ) ; 
 + if ( Proxy . isProxyClass ( cb . getClass ( ) ) ) { 
 + InvocationHandler handler = Proxy . getInvocationHandler ( cb ) ; 
 + if ( handler instanceof NativeCallbackHandler ) 
 + return ( ( NativeCallbackHandler ) handler ) . getPointer ( ) ; 
 } 
 CallbackReference cbref = CallbackReference . getInstance ( cb ) ; 
 return cbref . getTrampoline ( ) ; 
 @ @ - 845 , 7 + 839 , 7 @ @ public abstract class Structure { 
 + " = " + value ; 
 } 
 } 
 - 
 + 
 / * * Enable an auto - generated Java interface proxy for a native function 
 * pointer . 
 * /
