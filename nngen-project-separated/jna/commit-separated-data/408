BLEU SCORE: 0.027196652721749117

TEST MSG: make unpacked path available as a system property , track down JVM error in System . load
GENERATED MSG: ensure temporary / unpacked files are marked for deletion ; attempt deletion immediately after load

TEST DIFF (one line): diff - - git a / native / Makefile b / native / Makefile <nl> index 0f695e5 . . 1f0ea70 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 167 , 10 + 167 , 10 @ @ ifeq ( $ ( ARCH ) , amd64 ) <nl> USE _ MSVC = true <nl> else <nl> # To build 32 - bit under MSVC , un - comment this line ( default is gcc ) <nl> - USE _ MSVC = true <nl> + # USE _ MSVC = true <nl> endif <nl> <nl> - CDEFINES = - DHAVE _ PROTECTION - DPSAPI _ VERSION = 1 - DFFI _ BUILDING <nl> + CDEFINES = - DHAVE _ PROTECTION - DPSAPI _ VERSION = 1 - DFFI _ BUILDING - DUNICODE - D _ UNICODE <nl> ifndef USE _ MSVC <nl> LIBS = - lpsapi <nl> else <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index 5a88073 . . 931a790 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 17 , 9 + 17 , 6 @ @ <nl> * / <nl> <nl> # if defined ( _ WIN32 ) <nl> - # ifndef UNICODE <nl> - # define UNICODE <nl> - # endif <nl> # define WIN32 _ LEAN _ AND _ MEAN <nl> # include < windows . h > <nl> # include < psapi . h > <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index 5ba4a39 . . 7163c84 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 673 , 6 + 673 , 7 @ @ public final class Native implements Version { <nl> 	 	 	 if ( DEBUG _ JNA _ LOAD ) { <nl> 	 	 	 System . out . println ( " Trying " + path ) ; <nl> 	 	 	 } <nl> + System . setProperty ( " jnidispatch . path " , path ) ; <nl> System . load ( path ) ; <nl> jnidispatchPath = path ; <nl> 	 	 	 if ( DEBUG _ JNA _ LOAD ) { <nl> @ @ - 703 , 6 + 704 , 7 @ @ public final class Native implements Version { <nl> 	 	 	 if ( DEBUG _ JNA _ LOAD ) { <nl> 	 	 	 	 System . out . println ( " Trying " + path ) ; <nl> 	 	 	 } <nl> + System . setProperty ( " jnidispatch . path " , path ) ; <nl> System . load ( path ) ; <nl> jnidispatchPath = path ; <nl> if ( DEBUG _ JNA _ LOAD ) { <nl> @ @ - 755 , 6 + 757 , 7 @ @ public final class Native implements Version { <nl> 	 if ( DEBUG _ JNA _ LOAD ) { <nl> 	 	 System . out . println ( " Trying " + lib . getAbsolutePath ( ) ) ; <nl> 	 } <nl> + System . setProperty ( " jnidispatch . path " , lib . getAbsolutePath ( ) ) ; <nl> 	 System . load ( lib . getAbsolutePath ( ) ) ; <nl> jnidispatchPath = lib . getAbsolutePath ( ) ; <nl> if ( DEBUG _ JNA _ LOAD ) { <nl> @ @ - 764 , 7 + 767 , 8 @ @ public final class Native implements Version { <nl> / / loaded . This avoids the complexity of trying to do so on " exit " , <nl> / / which point can vary under different circumstances ( native <nl> / / compilation , dynamically loaded modules , normal application , etc ) . <nl> - if ( isUnpacked ( lib ) ) { <nl> + if ( isUnpacked ( lib ) <nl> + & & ! Boolean . getBoolean ( " jnidispatch . preserve " ) ) { <nl> deleteLibrary ( lib ) ; <nl> } <nl> } <nl> @ @ - 867 , 7 + 871 , 9 @ @ public final class Native implements Version { <nl> / / problems with Web Start . <nl> File dir = getTempDir ( ) ; <nl> lib = File . createTempFile ( JNA _ TMPLIB _ PREFIX , Platform . isWindows ( ) ? " . dll " : null , dir ) ; <nl> - lib . deleteOnExit ( ) ; <nl> + if ( ! Boolean . getBoolean ( " jnidispatch . preserve " ) ) { <nl> + lib . deleteOnExit ( ) ; <nl> + } <nl> fos = new FileOutputStream ( lib ) ; <nl> int count ; <nl> byte [ ] buf = new byte [ 1024 ] ; <nl> diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java <nl> index df42f42 . . 4ae2713 100644 <nl> - - - a / test / com / sun / jna / JNAUnloadTest . java <nl> + + + b / test / com / sun / jna / JNAUnloadTest . java <nl> @ @ - 213 , 10 + 213 , 27 @ @ public class JNAUnloadTest extends TestCase implements Paths { <nl> unicodeDir . mkdirs ( ) ; <nl> Properties props = ( Properties ) System . getProperties ( ) . clone ( ) ; <nl> try { <nl> + System . setProperty ( " jnidispatch . preserve " , " true " ) ; <nl> System . setProperty ( " jna . tmpdir " , unicodeDir . getAbsolutePath ( ) ) ; <nl> ClassLoader loader = new TestLoader ( true ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> assertEquals ( " Wrong class loader " , loader , cls . getClassLoader ( ) ) ; <nl> + String path = System . getProperty ( " jnidispatch . path " ) ; <nl> + if ( path ! = null ) { <nl> + File lib = new File ( path ) ; <nl> + Native . deleteLibrary ( lib ) ; <nl> + lib . deleteOnExit ( ) ; <nl> + } <nl> + } <nl> + catch ( UnsatisfiedLinkError e ) { <nl> + try { <nl> + File lib = new File ( System . getProperty ( " jnidispatch . path " ) ) ; <nl> + NativeLibrary . getInstance ( lib . getAbsolutePath ( ) ) ; <nl> + throw new Error ( " JVM error : System . load ( ) failed to load JNA native library from " + lib + " ) : " + e ) ; <nl> + } <nl> + catch ( UnsatisfiedLinkError ex ) { <nl> + fail ( " Failed to load jnidispatch from a unicode path ( " + System . getProperty ( " jnidispatch . path " ) + " ) : " + ex ) ; <nl> + } <nl> } <nl> finally { <nl> System . setProperties ( props ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 5fdb583 . . 2c7dec4 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 6 , 13 + 6 , 15 @ @ Features <nl> * Disable automatic jnidispatch unpacking with jna . nounpack = true ( Ricq ) <nl> * linux / ppc 32 - bit support ( Fritiof Hedman ) <nl> * linux multi - arch support ( kohsuke ) <nl> - * Add ` platform . win32 . Kernel32 . CopyFile ` , ` platform . win32 . Kernel32 . MoveFile ` , ` platform . win32 . Kernel32 . MoveFileEx ` , ` platform . win32 . Kernel32 . CreateProcess ` , ` platform . win32 . Kernel32 . SetEnvironmentVariables ` , ` platform . win32 . Kernel32 . GetFileTime ` , ` platform . win32 . Kernel32 . SetFileTime ` , ` platform . win32 . Kernel32 . SetFileAttributes ` , ` platform . win32 . Kernel32 . DeviceIoControl ` , ` platform . win32 . Kernel32 . GetDiskFreeSpaceEx ` , ` platform . win32 . Kernel32 . CreateToolhelp32Snapshot ` , ` platform . win32 . Kernel32 . Process32First ` , ` platform . win32 . Kernel32 . Process32Next ` . <nl> - * Add ` platform . win32 . Msi . MsiGetComponentPath ` , ` platform . win32 . Msi . MsiLocateComponent ` , ` platform . win32 . Msi . MsiGetProductCode ` , ` platform . win32 . Msi . MsiEnumComponents ` . <nl> - * Add ` platform . win32 . User32 . RegisterHotKey ` , ` platform . win32 . User32 . UnregisterHotKey ` , ` platform . unix . x11 . XGRabKey ` , ` platform . unix . x11 . XUngrabKey ` , ` platform . unix . x11 . XSetErrorHandler ` , ` platform . mac . Carbon . GetEventDispatcherTarget ` , ` platform . mac . Carbon . InstallEventHandler ` , ` platform . mac . Carbon . RegisterEventHotKey ` , ` platform . mac . Carbon . GetEventParameter ` , ` platform . mac . Carbon . RemoveEventHandler ` , ` platform . mac . Carbon . UnregisterEventHotKey ` <nl> - * Add ` platform . win32 . SetupApi . SetupDiGetClassDevs ` , ` platform . win32 . SetupApi . SetupDiDestroyDeviceInfoList ` , ` platform . win32 . SetupApi . SetupDiEnumDeviceInterfaces ` , ` platform . win32 . SetupApi . SetupDiGetDeviceInterfaceDetail ` , ` platform . win32 . SetupApi . SetupDiGetDeviceRegistryProperty ` . <nl> + * Add to ` platform . unix . x11 ` : ` XGrabKey ` , ` XUngrabKey ` , ` XSetErrorHandler ` <nl> + * Add to ` platform . mac . Carbon ` : ` GetEventDispatcherTarget ` , ` InstallEventHandler ` , ` RegisterEventHotKey ` , ` GetEventParameter ` , ` RemoveEventHandler ` , ` UnregisterEventHotKey ` <nl> + * Add to ` platform . win32 . Kernel32 ` : ` CopyFile ` , ` MoveFile ` , ` MoveFileEx ` , ` CreateProcess ` , ` SetEnvironmentVariables ` , ` GetFileTime ` , ` SetFileTime ` , ` SetFileAttributes ` , ` DeviceIoControl ` , ` GetDiskFreeSpaceEx ` , ` CreateToolhelp32Snapshot ` , ` Process32First ` , ` Process32Next ` . <nl> + * Add to ` platform . win32 . Msi ` : ` MsiGetComponentPath ` , ` MsiLocateComponent ` , ` MsiGetProductCode ` , ` MsiEnumComponents ` . <nl> + * Add to ` platform . win32 . User32 ` : ` RegisterHotKey ` , ` UnregisterHotKey ` <nl> + * Add to ` platform . win32 . SetupApi ` : ` SetupDiGetClassDevs ` , ` SetupDiDestroyDeviceInfoList ` , ` SetupDiEnumDeviceInterfaces ` , ` SetupDiGetDeviceInterfaceDetail ` , ` SetupDiGetDeviceRegistryProperty ` . <nl> * Add ` platform . win32 . Shell32 . ShellExecute ` . <nl> - * Add ` platform . win32 . User32 . SetParent ` , ` platform . win32 . User32 . IsWindowVisible ` , ` platform . win32 . User32 . MoveWindow ` , ` platform . win32 . User32 . SetWindowPos ` , ` platform . win32 . User32 . AttachInputThread ` , ` platform . win32 . User32 . SetForegroundWindow ` , ` platform . win32 . User32 . GetForegroundWindow ` , ` platform . win32 . User32 . SetFocus ` , ` platform . win32 . User32 . SendInput ` , ` platform . win32 . User32 . WaitForInputIdle ` , ` platform . win32 . User32 . InvalidateRect ` , ` platform . win32 . User32 . RedrawWindow ` , ` platform . win32 . User32 . GetWindow ` , ` platform . win32 . User32 . UpdateWindow ` , ` platform . win32 . User32 . ShowWindow ` , ` platform . win32 . User32 . CloseWindow ` . <nl> - * Add ` platform . win32 . Version . GetFileVersionInfoSize ` , ` platform . win32 . Version . GetFileVersionInfo ` , ` platform . win32 . Version . VerQueryValue ` . <nl> + * Add to ` platform . win32 . User32 ` : ` SetParent ` , ` IsWindowVisible ` , ` MoveWindow ` , ` SetWindowPos ` , ` AttachInputThread ` , ` SetForegroundWindow ` , ` GetForegroundWindow ` , ` SetFocus ` , ` SendInput ` , ` WaitForInputIdle ` , ` InvalidateRect ` , ` RedrawWindow ` , ` GetWindow ` , ` UpdateWindow ` , ` ShowWindow ` , ` CloseWindow ` . <nl> + * Add to ` platform . win32 . Version ` : ` GetFileVersionInfoSize ` , ` GetFileVersionInfo ` , ` VerQueryValue ` . <nl> <nl> Bug Fixes <nl> - - - - - - - - <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index 6645365 . . 2651d6f 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 686 , 6 + 686 , 7 @ @ public final class Native { <nl> String name = System . getProperty ( " os . name " ) ; <nl> String resourceName = getNativeLibraryResourcePath ( Platform . getOSType ( ) , arch , name ) + " / " + libname ; <nl> URL url = Native . class . getResource ( resourceName ) ; <nl> + boolean unpacked = false ; <nl> <nl> / / Add an ugly hack for OpenJDK ( soylatte ) - JNI libs use the usual <nl> / / . dylib extension <nl> @ @ - 731 , 6 + 732 , 7 @ @ public final class Native { <nl> while ( ( count = is . read ( buf , 0 , buf . length ) ) > 0 ) { <nl> fos . write ( buf , 0 , count ) ; <nl> } <nl> + unpacked = true ; <nl> } <nl> catch ( IOException e ) { <nl> throw new Error ( " Failed to create temporary file for jnidispatch library : " + e ) ; <nl> @ @ - 743 , 11 + 745 , 14 @ @ public final class Native { <nl> } <nl> } <nl> System . load ( lib . getAbsolutePath ( ) ) ; <nl> + nativeLibraryPath = lib . getAbsolutePath ( ) ; <nl> / / Attempt to delete immediately once jnidispatch is successfully <nl> / / loaded . This avoids the complexity of trying to do so on " exit " , <nl> / / which point can vary under different circumstances ( native <nl> / / compilation , dynamically loaded modules , normal application , etc ) . <nl> - deleteNativeLibrary ( nativeLibraryPath = lib . getAbsolutePath ( ) ) ; <nl> + if ( unpacked ) { <nl> + deleteNativeLibrary ( lib . getAbsolutePath ( ) ) ; <nl> + } <nl> } <nl> <nl> / * *

TEST DIFF:
diff - - git a / native / Makefile b / native / Makefile 
 index 0f695e5 . . 1f0ea70 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 167 , 10 + 167 , 10 @ @ ifeq ( $ ( ARCH ) , amd64 ) 
 USE _ MSVC = true 
 else 
 # To build 32 - bit under MSVC , un - comment this line ( default is gcc ) 
 - USE _ MSVC = true 
 + # USE _ MSVC = true 
 endif 
 
 - CDEFINES = - DHAVE _ PROTECTION - DPSAPI _ VERSION = 1 - DFFI _ BUILDING 
 + CDEFINES = - DHAVE _ PROTECTION - DPSAPI _ VERSION = 1 - DFFI _ BUILDING - DUNICODE - D _ UNICODE 
 ifndef USE _ MSVC 
 LIBS = - lpsapi 
 else 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index 5a88073 . . 931a790 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 17 , 9 + 17 , 6 @ @ 
 * / 
 
 # if defined ( _ WIN32 ) 
 - # ifndef UNICODE 
 - # define UNICODE 
 - # endif 
 # define WIN32 _ LEAN _ AND _ MEAN 
 # include < windows . h > 
 # include < psapi . h > 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index 5ba4a39 . . 7163c84 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 673 , 6 + 673 , 7 @ @ public final class Native implements Version { 
 	 	 	 if ( DEBUG _ JNA _ LOAD ) { 
 	 	 	 System . out . println ( " Trying " + path ) ; 
 	 	 	 } 
 + System . setProperty ( " jnidispatch . path " , path ) ; 
 System . load ( path ) ; 
 jnidispatchPath = path ; 
 	 	 	 if ( DEBUG _ JNA _ LOAD ) { 
 @ @ - 703 , 6 + 704 , 7 @ @ public final class Native implements Version { 
 	 	 	 if ( DEBUG _ JNA _ LOAD ) { 
 	 	 	 	 System . out . println ( " Trying " + path ) ; 
 	 	 	 } 
 + System . setProperty ( " jnidispatch . path " , path ) ; 
 System . load ( path ) ; 
 jnidispatchPath = path ; 
 if ( DEBUG _ JNA _ LOAD ) { 
 @ @ - 755 , 6 + 757 , 7 @ @ public final class Native implements Version { 
 	 if ( DEBUG _ JNA _ LOAD ) { 
 	 	 System . out . println ( " Trying " + lib . getAbsolutePath ( ) ) ; 
 	 } 
 + System . setProperty ( " jnidispatch . path " , lib . getAbsolutePath ( ) ) ; 
 	 System . load ( lib . getAbsolutePath ( ) ) ; 
 jnidispatchPath = lib . getAbsolutePath ( ) ; 
 if ( DEBUG _ JNA _ LOAD ) { 
 @ @ - 764 , 7 + 767 , 8 @ @ public final class Native implements Version { 
 / / loaded . This avoids the complexity of trying to do so on " exit " , 
 / / which point can vary under different circumstances ( native 
 / / compilation , dynamically loaded modules , normal application , etc ) . 
 - if ( isUnpacked ( lib ) ) { 
 + if ( isUnpacked ( lib ) 
 + & & ! Boolean . getBoolean ( " jnidispatch . preserve " ) ) { 
 deleteLibrary ( lib ) ; 
 } 
 } 
 @ @ - 867 , 7 + 871 , 9 @ @ public final class Native implements Version { 
 / / problems with Web Start . 
 File dir = getTempDir ( ) ; 
 lib = File . createTempFile ( JNA _ TMPLIB _ PREFIX , Platform . isWindows ( ) ? " . dll " : null , dir ) ; 
 - lib . deleteOnExit ( ) ; 
 + if ( ! Boolean . getBoolean ( " jnidispatch . preserve " ) ) { 
 + lib . deleteOnExit ( ) ; 
 + } 
 fos = new FileOutputStream ( lib ) ; 
 int count ; 
 byte [ ] buf = new byte [ 1024 ] ; 
 diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java 
 index df42f42 . . 4ae2713 100644 
 - - - a / test / com / sun / jna / JNAUnloadTest . java 
 + + + b / test / com / sun / jna / JNAUnloadTest . java 
 @ @ - 213 , 10 + 213 , 27 @ @ public class JNAUnloadTest extends TestCase implements Paths { 
 unicodeDir . mkdirs ( ) ; 
 Properties props = ( Properties ) System . getProperties ( ) . clone ( ) ; 
 try { 
 + System . setProperty ( " jnidispatch . preserve " , " true " ) ; 
 System . setProperty ( " jna . tmpdir " , unicodeDir . getAbsolutePath ( ) ) ; 
 ClassLoader loader = new TestLoader ( true ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 assertEquals ( " Wrong class loader " , loader , cls . getClassLoader ( ) ) ; 
 + String path = System . getProperty ( " jnidispatch . path " ) ; 
 + if ( path ! = null ) { 
 + File lib = new File ( path ) ; 
 + Native . deleteLibrary ( lib ) ; 
 + lib . deleteOnExit ( ) ; 
 + } 
 + } 
 + catch ( UnsatisfiedLinkError e ) { 
 + try { 
 + File lib = new File ( System . getProperty ( " jnidispatch . path " ) ) ; 
 + NativeLibrary . getInstance ( lib . getAbsolutePath ( ) ) ; 
 + throw new Error ( " JVM error : System . load ( ) failed to load JNA native library from " + lib + " ) : " + e ) ; 
 + } 
 + catch ( UnsatisfiedLinkError ex ) { 
 + fail ( " Failed to load jnidispatch from a unicode path ( " + System . getProperty ( " jnidispatch . path " ) + " ) : " + ex ) ; 
 + } 
 } 
 finally { 
 System . setProperties ( props ) ;

NEAREST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 5fdb583 . . 2c7dec4 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 6 , 13 + 6 , 15 @ @ Features 
 * Disable automatic jnidispatch unpacking with jna . nounpack = true ( Ricq ) 
 * linux / ppc 32 - bit support ( Fritiof Hedman ) 
 * linux multi - arch support ( kohsuke ) 
 - * Add ` platform . win32 . Kernel32 . CopyFile ` , ` platform . win32 . Kernel32 . MoveFile ` , ` platform . win32 . Kernel32 . MoveFileEx ` , ` platform . win32 . Kernel32 . CreateProcess ` , ` platform . win32 . Kernel32 . SetEnvironmentVariables ` , ` platform . win32 . Kernel32 . GetFileTime ` , ` platform . win32 . Kernel32 . SetFileTime ` , ` platform . win32 . Kernel32 . SetFileAttributes ` , ` platform . win32 . Kernel32 . DeviceIoControl ` , ` platform . win32 . Kernel32 . GetDiskFreeSpaceEx ` , ` platform . win32 . Kernel32 . CreateToolhelp32Snapshot ` , ` platform . win32 . Kernel32 . Process32First ` , ` platform . win32 . Kernel32 . Process32Next ` . 
 - * Add ` platform . win32 . Msi . MsiGetComponentPath ` , ` platform . win32 . Msi . MsiLocateComponent ` , ` platform . win32 . Msi . MsiGetProductCode ` , ` platform . win32 . Msi . MsiEnumComponents ` . 
 - * Add ` platform . win32 . User32 . RegisterHotKey ` , ` platform . win32 . User32 . UnregisterHotKey ` , ` platform . unix . x11 . XGRabKey ` , ` platform . unix . x11 . XUngrabKey ` , ` platform . unix . x11 . XSetErrorHandler ` , ` platform . mac . Carbon . GetEventDispatcherTarget ` , ` platform . mac . Carbon . InstallEventHandler ` , ` platform . mac . Carbon . RegisterEventHotKey ` , ` platform . mac . Carbon . GetEventParameter ` , ` platform . mac . Carbon . RemoveEventHandler ` , ` platform . mac . Carbon . UnregisterEventHotKey ` 
 - * Add ` platform . win32 . SetupApi . SetupDiGetClassDevs ` , ` platform . win32 . SetupApi . SetupDiDestroyDeviceInfoList ` , ` platform . win32 . SetupApi . SetupDiEnumDeviceInterfaces ` , ` platform . win32 . SetupApi . SetupDiGetDeviceInterfaceDetail ` , ` platform . win32 . SetupApi . SetupDiGetDeviceRegistryProperty ` . 
 + * Add to ` platform . unix . x11 ` : ` XGrabKey ` , ` XUngrabKey ` , ` XSetErrorHandler ` 
 + * Add to ` platform . mac . Carbon ` : ` GetEventDispatcherTarget ` , ` InstallEventHandler ` , ` RegisterEventHotKey ` , ` GetEventParameter ` , ` RemoveEventHandler ` , ` UnregisterEventHotKey ` 
 + * Add to ` platform . win32 . Kernel32 ` : ` CopyFile ` , ` MoveFile ` , ` MoveFileEx ` , ` CreateProcess ` , ` SetEnvironmentVariables ` , ` GetFileTime ` , ` SetFileTime ` , ` SetFileAttributes ` , ` DeviceIoControl ` , ` GetDiskFreeSpaceEx ` , ` CreateToolhelp32Snapshot ` , ` Process32First ` , ` Process32Next ` . 
 + * Add to ` platform . win32 . Msi ` : ` MsiGetComponentPath ` , ` MsiLocateComponent ` , ` MsiGetProductCode ` , ` MsiEnumComponents ` . 
 + * Add to ` platform . win32 . User32 ` : ` RegisterHotKey ` , ` UnregisterHotKey ` 
 + * Add to ` platform . win32 . SetupApi ` : ` SetupDiGetClassDevs ` , ` SetupDiDestroyDeviceInfoList ` , ` SetupDiEnumDeviceInterfaces ` , ` SetupDiGetDeviceInterfaceDetail ` , ` SetupDiGetDeviceRegistryProperty ` . 
 * Add ` platform . win32 . Shell32 . ShellExecute ` . 
 - * Add ` platform . win32 . User32 . SetParent ` , ` platform . win32 . User32 . IsWindowVisible ` , ` platform . win32 . User32 . MoveWindow ` , ` platform . win32 . User32 . SetWindowPos ` , ` platform . win32 . User32 . AttachInputThread ` , ` platform . win32 . User32 . SetForegroundWindow ` , ` platform . win32 . User32 . GetForegroundWindow ` , ` platform . win32 . User32 . SetFocus ` , ` platform . win32 . User32 . SendInput ` , ` platform . win32 . User32 . WaitForInputIdle ` , ` platform . win32 . User32 . InvalidateRect ` , ` platform . win32 . User32 . RedrawWindow ` , ` platform . win32 . User32 . GetWindow ` , ` platform . win32 . User32 . UpdateWindow ` , ` platform . win32 . User32 . ShowWindow ` , ` platform . win32 . User32 . CloseWindow ` . 
 - * Add ` platform . win32 . Version . GetFileVersionInfoSize ` , ` platform . win32 . Version . GetFileVersionInfo ` , ` platform . win32 . Version . VerQueryValue ` . 
 + * Add to ` platform . win32 . User32 ` : ` SetParent ` , ` IsWindowVisible ` , ` MoveWindow ` , ` SetWindowPos ` , ` AttachInputThread ` , ` SetForegroundWindow ` , ` GetForegroundWindow ` , ` SetFocus ` , ` SendInput ` , ` WaitForInputIdle ` , ` InvalidateRect ` , ` RedrawWindow ` , ` GetWindow ` , ` UpdateWindow ` , ` ShowWindow ` , ` CloseWindow ` . 
 + * Add to ` platform . win32 . Version ` : ` GetFileVersionInfoSize ` , ` GetFileVersionInfo ` , ` VerQueryValue ` . 
 
 Bug Fixes 
 - - - - - - - - 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index 6645365 . . 2651d6f 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 686 , 6 + 686 , 7 @ @ public final class Native { 
 String name = System . getProperty ( " os . name " ) ; 
 String resourceName = getNativeLibraryResourcePath ( Platform . getOSType ( ) , arch , name ) + " / " + libname ; 
 URL url = Native . class . getResource ( resourceName ) ; 
 + boolean unpacked = false ; 
 
 / / Add an ugly hack for OpenJDK ( soylatte ) - JNI libs use the usual 
 / / . dylib extension 
 @ @ - 731 , 6 + 732 , 7 @ @ public final class Native { 
 while ( ( count = is . read ( buf , 0 , buf . length ) ) > 0 ) { 
 fos . write ( buf , 0 , count ) ; 
 } 
 + unpacked = true ; 
 } 
 catch ( IOException e ) { 
 throw new Error ( " Failed to create temporary file for jnidispatch library : " + e ) ; 
 @ @ - 743 , 11 + 745 , 14 @ @ public final class Native { 
 } 
 } 
 System . load ( lib . getAbsolutePath ( ) ) ; 
 + nativeLibraryPath = lib . getAbsolutePath ( ) ; 
 / / Attempt to delete immediately once jnidispatch is successfully 
 / / loaded . This avoids the complexity of trying to do so on " exit " , 
 / / which point can vary under different circumstances ( native 
 / / compilation , dynamically loaded modules , normal application , etc ) . 
 - deleteNativeLibrary ( nativeLibraryPath = lib . getAbsolutePath ( ) ) ; 
 + if ( unpacked ) { 
 + deleteNativeLibrary ( lib . getAbsolutePath ( ) ) ; 
 + } 
 } 
 
 / * *
