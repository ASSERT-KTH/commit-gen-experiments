BLEU SCORE: 0.041961149062965476

TEST MSG: Check native version before attempting to call into native code
GENERATED MSG: provide sizeof native function , update checksum

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index fe770bc . . b213f22 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 11 , 6 + 11 , 7 @ @ Features <nl> Bug Fixes <nl> - - - - - - - - - <nl> * [ # 754 ] ( https : / / github . com / java - native - access / jna / issues / 754 ) : Move MSVC build to standard stdbool . h and require Visual C + + 2015 ( sizeof ( bool ) = 1 is now also true on MSVC build ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 399 ] ( https : / / github . com / java - native - access / jna / issues / 399 ) : Check native version before attempting to call into native code - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> <nl> Release 4 . 3 . 0 <nl> = = = = = = = = = = = = = <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index f51a152 . . 14660af 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 148 , 29 + 148 , 53 @ @ public final class Native implements Version { <nl> static final int MAX _ ALIGNMENT ; <nl> static final int MAX _ PADDING ; <nl> <nl> + @ Deprecated <nl> public static float parseVersion ( String v ) { <nl> return Float . parseFloat ( v . substring ( 0 , v . lastIndexOf ( " . " ) ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * Version string must have the structure < major > . < minor > . < revision > <nl> + * a bugfix change in the native code increments revision , the minor is <nl> + * incremented for backwards compatible changes and the major version <nl> + * is changed for backwards incompatbile changes . <nl> + * <nl> + * @ param expectedVersion <nl> + * @ param nativeVersion <nl> + * @ return <nl> + * / <nl> + static boolean isCompatibleVersion ( String expectedVersion , String nativeVersion ) { <nl> + String [ ] expectedVersionParts = expectedVersion . split ( " \ \ . " ) ; <nl> + String [ ] nativeVersionParts = nativeVersion . split ( " \ \ . " ) ; <nl> + if ( expectedVersionParts . length < 3 | | nativeVersionParts . length < 3 ) { <nl> + return false ; <nl> + } <nl> + <nl> + int expectedMajor = Integer . parseInt ( expectedVersionParts [ 0 ] ) ; <nl> + int nativeMajor = Integer . parseInt ( nativeVersionParts [ 0 ] ) ; <nl> + int expectedMinor = Integer . parseInt ( expectedVersionParts [ 1 ] ) ; <nl> + int nativeMinor = Integer . parseInt ( nativeVersionParts [ 1 ] ) ; <nl> + <nl> + if ( expectedMajor ! = nativeMajor ) { <nl> + return false ; <nl> + } <nl> + <nl> + if ( expectedMinor > nativeMinor ) { <nl> + return false ; <nl> + } <nl> + <nl> + return true ; <nl> + } <nl> <nl> static { <nl> loadNativeDispatchLibrary ( ) ; <nl> - POINTER _ SIZE = sizeof ( TYPE _ VOIDP ) ; <nl> - LONG _ SIZE = sizeof ( TYPE _ LONG ) ; <nl> - WCHAR _ SIZE = sizeof ( TYPE _ WCHAR _ T ) ; <nl> - SIZE _ T _ SIZE = sizeof ( TYPE _ SIZE _ T ) ; <nl> - BOOL _ SIZE = sizeof ( TYPE _ BOOL ) ; <nl> <nl> - / / Perform initialization of other JNA classes until * after * <nl> - / / initializing the above final fields <nl> - initIDs ( ) ; <nl> - if ( Boolean . getBoolean ( " jna . protected " ) ) { <nl> - setProtected ( true ) ; <nl> - } <nl> - float version = parseVersion ( getNativeVersion ( ) ) ; <nl> - if ( version ! = parseVersion ( VERSION _ NATIVE ) ) { <nl> + if ( ! isCompatibleVersion ( VERSION _ NATIVE , getNativeVersion ( ) ) ) { <nl> String LS = System . getProperty ( " line . separator " ) ; <nl> throw new Error ( LS + LS <nl> + " There is an incompatible JNA native library installed on this system " + LS <nl> + + " Expected : " + VERSION _ NATIVE + LS <nl> + + " Found : " + getNativeVersion ( ) + LS <nl> + ( jnidispatchPath ! = null <nl> ? " ( at " + jnidispatchPath + " ) " : System . getProperty ( " java . library . path " ) ) <nl> + " . " + LS <nl> @ @ - 180 , 6 + 204 , 19 @ @ public final class Native implements Version { <nl> + " - set jna . boot . library . path to include the path to the version of the " + LS <nl> + " jnidispatch library included with the JNA jar file you are using " + LS ) ; <nl> } <nl> + <nl> + POINTER _ SIZE = sizeof ( TYPE _ VOIDP ) ; <nl> + LONG _ SIZE = sizeof ( TYPE _ LONG ) ; <nl> + WCHAR _ SIZE = sizeof ( TYPE _ WCHAR _ T ) ; <nl> + SIZE _ T _ SIZE = sizeof ( TYPE _ SIZE _ T ) ; <nl> + BOOL _ SIZE = sizeof ( TYPE _ BOOL ) ; <nl> + <nl> + / / Perform initialization of other JNA classes until * after * <nl> + / / initializing the above final fields <nl> + initIDs ( ) ; <nl> + if ( Boolean . getBoolean ( " jna . protected " ) ) { <nl> + setProtected ( true ) ; <nl> + } <nl> MAX _ ALIGNMENT = Platform . isSPARC ( ) | | Platform . isWindows ( ) <nl> | | ( Platform . isLinux ( ) & & ( Platform . isARM ( ) | | Platform . isPPC ( ) ) ) <nl> | | Platform . isAIX ( ) <nl> diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java <nl> index eb30ba9 . . 0baf1d4 100644 <nl> - - - a / test / com / sun / jna / NativeTest . java <nl> + + + b / test / com / sun / jna / NativeTest . java <nl> @ @ - 523 , 4 + 523 , 13 @ @ public class NativeTest extends TestCase { <nl> try { Thread . sleep ( 300000 ) ; } catch ( Exception e ) { } <nl> } <nl> } <nl> + <nl> + public void testVersionComparison ( ) { <nl> + assertTrue ( " Equal version " , Native . isCompatibleVersion ( " 5 . 1 . 0 " , " 5 . 1 . 0 " ) ) ; <nl> + assertTrue ( " New revision " , Native . isCompatibleVersion ( " 5 . 2 . 0 " , " 5 . 2 . 1 " ) ) ; <nl> + assertTrue ( " New minor provided , older minor expected " , Native . isCompatibleVersion ( " 5 . 1 . 0 " , " 5 . 10 . 0 " ) ) ; <nl> + assertFalse ( " Old minor provided , new minor expected " , Native . isCompatibleVersion ( " 5 . 10 . 0 " , " 5 . 1 . 0 " ) ) ; <nl> + assertFalse ( " Different major ( expected < provided ) " , Native . isCompatibleVersion ( " 4 . 0 . 0 " , " 5 . 0 . 0 " ) ) ; <nl> + assertFalse ( " Different major ( expected > provided ) " , Native . isCompatibleVersion ( " 5 . 0 . 0 " , " 4 . 0 . 0 " ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / native / dispatch . c b / jnalib / native / dispatch . c <nl> index ab7c843 . . 33b740a 100644 <nl> - - - a / jnalib / native / dispatch . c <nl> + + + b / jnalib / native / dispatch . c <nl> @ @ - 1599 , 6 + 1599 , 7 @ @ Java _ com _ sun _ jna _ Native _ sizeof ( JNIEnv * env , jclass cls , jint type ) <nl> char msg [ 1024 ] ; <nl> snprintf ( msg , sizeof ( msg ) , " Invalid sizeof type % d " , ( int ) type ) ; <nl> throwByName ( env , EIllegalArgument , msg ) ; <nl> + return - 1 ; <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index fe770bc . . b213f22 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 11 , 6 + 11 , 7 @ @ Features 
 Bug Fixes 
 - - - - - - - - - 
 * [ # 754 ] ( https : / / github . com / java - native - access / jna / issues / 754 ) : Move MSVC build to standard stdbool . h and require Visual C + + 2015 ( sizeof ( bool ) = 1 is now also true on MSVC build ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 399 ] ( https : / / github . com / java - native - access / jna / issues / 399 ) : Check native version before attempting to call into native code - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 
 Release 4 . 3 . 0 
 = = = = = = = = = = = = = 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index f51a152 . . 14660af 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 148 , 29 + 148 , 53 @ @ public final class Native implements Version { 
 static final int MAX _ ALIGNMENT ; 
 static final int MAX _ PADDING ; 
 
 + @ Deprecated 
 public static float parseVersion ( String v ) { 
 return Float . parseFloat ( v . substring ( 0 , v . lastIndexOf ( " . " ) ) ) ; 
 } 
 + 
 + / * * 
 + * Version string must have the structure < major > . < minor > . < revision > 
 + * a bugfix change in the native code increments revision , the minor is 
 + * incremented for backwards compatible changes and the major version 
 + * is changed for backwards incompatbile changes . 
 + * 
 + * @ param expectedVersion 
 + * @ param nativeVersion 
 + * @ return 
 + * / 
 + static boolean isCompatibleVersion ( String expectedVersion , String nativeVersion ) { 
 + String [ ] expectedVersionParts = expectedVersion . split ( " \ \ . " ) ; 
 + String [ ] nativeVersionParts = nativeVersion . split ( " \ \ . " ) ; 
 + if ( expectedVersionParts . length < 3 | | nativeVersionParts . length < 3 ) { 
 + return false ; 
 + } 
 + 
 + int expectedMajor = Integer . parseInt ( expectedVersionParts [ 0 ] ) ; 
 + int nativeMajor = Integer . parseInt ( nativeVersionParts [ 0 ] ) ; 
 + int expectedMinor = Integer . parseInt ( expectedVersionParts [ 1 ] ) ; 
 + int nativeMinor = Integer . parseInt ( nativeVersionParts [ 1 ] ) ; 
 + 
 + if ( expectedMajor ! = nativeMajor ) { 
 + return false ; 
 + } 
 + 
 + if ( expectedMinor > nativeMinor ) { 
 + return false ; 
 + } 
 + 
 + return true ; 
 + } 
 
 static { 
 loadNativeDispatchLibrary ( ) ; 
 - POINTER _ SIZE = sizeof ( TYPE _ VOIDP ) ; 
 - LONG _ SIZE = sizeof ( TYPE _ LONG ) ; 
 - WCHAR _ SIZE = sizeof ( TYPE _ WCHAR _ T ) ; 
 - SIZE _ T _ SIZE = sizeof ( TYPE _ SIZE _ T ) ; 
 - BOOL _ SIZE = sizeof ( TYPE _ BOOL ) ; 
 
 - / / Perform initialization of other JNA classes until * after * 
 - / / initializing the above final fields 
 - initIDs ( ) ; 
 - if ( Boolean . getBoolean ( " jna . protected " ) ) { 
 - setProtected ( true ) ; 
 - } 
 - float version = parseVersion ( getNativeVersion ( ) ) ; 
 - if ( version ! = parseVersion ( VERSION _ NATIVE ) ) { 
 + if ( ! isCompatibleVersion ( VERSION _ NATIVE , getNativeVersion ( ) ) ) { 
 String LS = System . getProperty ( " line . separator " ) ; 
 throw new Error ( LS + LS 
 + " There is an incompatible JNA native library installed on this system " + LS 
 + + " Expected : " + VERSION _ NATIVE + LS 
 + + " Found : " + getNativeVersion ( ) + LS 
 + ( jnidispatchPath ! = null 
 ? " ( at " + jnidispatchPath + " ) " : System . getProperty ( " java . library . path " ) ) 
 + " . " + LS 
 @ @ - 180 , 6 + 204 , 19 @ @ public final class Native implements Version { 
 + " - set jna . boot . library . path to include the path to the version of the " + LS 
 + " jnidispatch library included with the JNA jar file you are using " + LS ) ; 
 } 
 + 
 + POINTER _ SIZE = sizeof ( TYPE _ VOIDP ) ; 
 + LONG _ SIZE = sizeof ( TYPE _ LONG ) ; 
 + WCHAR _ SIZE = sizeof ( TYPE _ WCHAR _ T ) ; 
 + SIZE _ T _ SIZE = sizeof ( TYPE _ SIZE _ T ) ; 
 + BOOL _ SIZE = sizeof ( TYPE _ BOOL ) ; 
 + 
 + / / Perform initialization of other JNA classes until * after * 
 + / / initializing the above final fields 
 + initIDs ( ) ; 
 + if ( Boolean . getBoolean ( " jna . protected " ) ) { 
 + setProtected ( true ) ; 
 + } 
 MAX _ ALIGNMENT = Platform . isSPARC ( ) | | Platform . isWindows ( ) 
 | | ( Platform . isLinux ( ) & & ( Platform . isARM ( ) | | Platform . isPPC ( ) ) ) 
 | | Platform . isAIX ( ) 
 diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java 
 index eb30ba9 . . 0baf1d4 100644 
 - - - a / test / com / sun / jna / NativeTest . java 
 + + + b / test / com / sun / jna / NativeTest . java 
 @ @ - 523 , 4 + 523 , 13 @ @ public class NativeTest extends TestCase { 
 try { Thread . sleep ( 300000 ) ; } catch ( Exception e ) { } 
 } 
 } 
 + 
 + public void testVersionComparison ( ) { 
 + assertTrue ( " Equal version " , Native . isCompatibleVersion ( " 5 . 1 . 0 " , " 5 . 1 . 0 " ) ) ; 
 + assertTrue ( " New revision " , Native . isCompatibleVersion ( " 5 . 2 . 0 " , " 5 . 2 . 1 " ) ) ; 
 + assertTrue ( " New minor provided , older minor expected " , Native . isCompatibleVersion ( " 5 . 1 . 0 " , " 5 . 10 . 0 " ) ) ; 
 + assertFalse ( " Old minor provided , new minor expected " , Native . isCompatibleVersion ( " 5 . 10 . 0 " , " 5 . 1 . 0 " ) ) ; 
 + assertFalse ( " Different major ( expected < provided ) " , Native . isCompatibleVersion ( " 4 . 0 . 0 " , " 5 . 0 . 0 " ) ) ; 
 + assertFalse ( " Different major ( expected > provided ) " , Native . isCompatibleVersion ( " 5 . 0 . 0 " , " 4 . 0 . 0 " ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / jnalib / native / dispatch . c b / jnalib / native / dispatch . c 
 index ab7c843 . . 33b740a 100644 
 - - - a / jnalib / native / dispatch . c 
 + + + b / jnalib / native / dispatch . c 
 @ @ - 1599 , 6 + 1599 , 7 @ @ Java _ com _ sun _ jna _ Native _ sizeof ( JNIEnv * env , jclass cls , jint type ) 
 char msg [ 1024 ] ; 
 snprintf ( msg , sizeof ( msg ) , " Invalid sizeof type % d " , ( int ) type ) ; 
 throwByName ( env , EIllegalArgument , msg ) ; 
 + return - 1 ; 
 } 
 } 
 }
