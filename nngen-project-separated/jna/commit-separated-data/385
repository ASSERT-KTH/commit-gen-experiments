BLEU SCORE: 0.3032653298563167

TEST MSG: some changes
GENERATED MSG: bug trapping code

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbAbstractMethod . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbAbstractMethod . java <nl> index f89fa94 . . 21185c2 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbAbstractMethod . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbAbstractMethod . java <nl> @ @ - 230 , 7 + 230 , 7 @ @ public abstract class TlbAbstractMethod extends TlbBase implements Variant { <nl> protected String getType ( TYPEDESC typeDesc ) { <nl> VARTYPE vt = typeDesc . vt ; <nl> String type = " not _ defined " ; <nl> - <nl> + <nl> if ( vt . intValue ( ) = = Variant . VT _ PTR ) { <nl> TYPEDESC lptdesc = typeDesc . _ typedesc . getLptdesc ( ) ; <nl> type = this . getType ( lptdesc ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> index d38780f . . bcf7ca3 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import java . util . List ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> <nl> + / / TODO : Auto - generated Javadoc <nl> / * * <nl> * Ported from Guid . h . Microsoft Windows SDK 6 . 0A . <nl> * <nl> @ @ - 26 , 15 + 27 , 20 @ @ import com . sun . jna . Structure ; <nl> * / <nl> public interface Guid { <nl> <nl> + / * * The Constant IID _ NULL . * / <nl> public final static IID IID _ NULL = new IID ( ) ; <nl> <nl> / * * <nl> * The Class GUID . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public static class GUID extends Structure { <nl> <nl> / * * <nl> * The Class ByReference . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public static class ByReference extends GUID implements <nl> Structure . ByReference { <nl> @ @ - 355 , 11 + 361 , 15 @ @ public interface Guid { <nl> <nl> / * * <nl> * The Class CLSID . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public static class CLSID extends GUID { <nl> <nl> / * * <nl> * The Class ByReference . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public static class ByReference extends GUID { <nl> <nl> @ @ - 378 , 7 + 388 , 7 @ @ public interface Guid { <nl> public ByReference ( GUID guid ) { <nl> super ( guid ) ; <nl> } <nl> - <nl> + <nl> / * * <nl> * Instantiates a new by reference . <nl> * <nl> @ @ - 395 , 10 + 405 , 30 @ @ public interface Guid { <nl> * / <nl> public CLSID ( ) { <nl> } <nl> + <nl> + / * * <nl> + * Instantiates a new clsid . <nl> + * <nl> + * @ param guid the guid <nl> + * / <nl> + public CLSID ( String guid ) { <nl> + super ( guid ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Instantiates a new clsid . <nl> + * <nl> + * @ param guid the guid <nl> + * / <nl> + public CLSID ( GUID guid ) { <nl> + super ( guid ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> * The Class REFIID . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public class REFIID extends IID { <nl> <nl> @ @ - 435 , 6 + 465 , 8 @ @ public interface Guid { <nl> <nl> / * * <nl> * The Class IID . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public class IID extends GUID { <nl> <nl> @ @ - 456 , 6 + 488 , 11 @ @ public interface Guid { <nl> / / TODO Auto - generated constructor stub <nl> } <nl> <nl> + / * * <nl> + * Instantiates a new iid . <nl> + * <nl> + * @ param iid the iid <nl> + * / <nl> public IID ( String iid ) { <nl> super ( iid ) ; <nl> / / TODO Auto - generated constructor stub <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java <nl> index 9a97148 . . 83c9ed3 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java <nl> @ @ - 35 , 42 + 35 , 42 @ @ public class TypeLibUtilTest extends TestCase { <nl> return new TypeLibUtil ( " { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } " , 1 , 0 ) ; <nl> } <nl> <nl> - / / public void testGetTypeInfoCount ( ) { <nl> - / / TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; <nl> - / / int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; <nl> - / / assertTrue ( " MS Shell should contain at least 36 types . " , typeInfoCount > = 36 ) ; <nl> - / / } <nl> - / / <nl> - / / public void testGetTypeInfo ( ) { <nl> - / / TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; <nl> - / / int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; <nl> - / / <nl> - / / for ( int i = 0 ; i < typeInfoCount ; i + + ) <nl> - / / { <nl> - / / ITypeInfo typeInfo = shellTypeLib . getTypeInfo ( i ) ; <nl> - / / TypeInfoUtil typeInfoUtil = new TypeInfoUtil ( typeInfo ) ; <nl> - / / <nl> - / / TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; <nl> - / / int cFuncs = typeAttr . cFuncs . intValue ( ) ; <nl> - / / <nl> - / / for ( int y = 0 ; y < cFuncs ; y + + ) { <nl> - / / / / Get the function description <nl> - / / FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( y ) ; <nl> - / / / / Get the member ID <nl> - / / MEMBERID memberID = funcDesc . memid ; <nl> - / / / / Get the name of the method <nl> - / / TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; <nl> - / / String methodName = typeInfoDoc2 . getName ( ) ; <nl> - / / <nl> - / / assertNotNull ( methodName ) ; <nl> - / / <nl> - / / typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; <nl> - / / } <nl> - / / <nl> - / / typeInfoUtil . ReleaseTypeAttr ( typeAttr ) ; <nl> - / / } <nl> - / / } <nl> - / / <nl> + public void testGetTypeInfoCount ( ) { <nl> + TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; <nl> + int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; <nl> + assertTrue ( " MS Shell should contain at least 36 types . " , typeInfoCount > = 36 ) ; <nl> + } <nl> + <nl> + public void testGetTypeInfo ( ) { <nl> + TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; <nl> + int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; <nl> + <nl> + for ( int i = 0 ; i < typeInfoCount ; i + + ) <nl> + { <nl> + ITypeInfo typeInfo = shellTypeLib . getTypeInfo ( i ) ; <nl> + TypeInfoUtil typeInfoUtil = new TypeInfoUtil ( typeInfo ) ; <nl> + <nl> + TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; <nl> + int cFuncs = typeAttr . cFuncs . intValue ( ) ; <nl> + <nl> + for ( int y = 0 ; y < cFuncs ; y + + ) { <nl> + / / Get the function description <nl> + FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( y ) ; <nl> + / / Get the member ID <nl> + MEMBERID memberID = funcDesc . memid ; <nl> + / / Get the name of the method <nl> + TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; <nl> + String methodName = typeInfoDoc2 . getName ( ) ; <nl> + <nl> + assertNotNull ( methodName ) ; <nl> + <nl> + typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; <nl> + } <nl> + <nl> + typeInfoUtil . ReleaseTypeAttr ( typeAttr ) ; <nl> + } <nl> + } <nl> + <nl> public void testBug ( ) { <nl> TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; <nl> int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class TypeLibUtilTest extends TestCase { <nl> TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; <nl> int cFuncs = typeAttr . cFuncs . intValue ( ) ; <nl> <nl> - for ( int y = 13 ; y < cFuncs ; y + + ) { <nl> + for ( int y = 0 ; y < cFuncs ; y + + ) { <nl> System . out . println ( " \ n \ n \ n y : " + y ) ; <nl> / / Get the function description <nl> FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( y ) ; <nl> diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index fe9b4c6 . . 9e5b56c 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 666 , 17 + 666 , 6 @ @ public abstract class Structure { <nl> result = p = = null ? null : p . getString ( 0 , encoding ) ; <nl> } <nl> else { <nl> - System . out . println ( structField . name + " : " + fieldType ) ; <nl> - System . out . println ( " structField size : " + structField . size ) ; <nl> - <nl> - System . out . println ( " memory size : " + memory . SIZE ) ; <nl> - System . out . println ( " peer : " + memory . peer ) ; <nl> - <nl> - if ( structField . name . equals ( " cBytes " ) ) { <nl> - System . out . println ( " cBytes memory size : " + memory . SIZE ) ; <nl> - System . out . println ( " cBytes peer : " + memory . peer ) ; <nl> - } <nl> - <nl> result = memory . getValue ( offset , fieldType , currentValue ) ; <nl> } <nl> if ( readConverter ! = null ) {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbAbstractMethod . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbAbstractMethod . java 
 index f89fa94 . . 21185c2 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbAbstractMethod . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbAbstractMethod . java 
 @ @ - 230 , 7 + 230 , 7 @ @ public abstract class TlbAbstractMethod extends TlbBase implements Variant { 
 protected String getType ( TYPEDESC typeDesc ) { 
 VARTYPE vt = typeDesc . vt ; 
 String type = " not _ defined " ; 
 - 
 + 
 if ( vt . intValue ( ) = = Variant . VT _ PTR ) { 
 TYPEDESC lptdesc = typeDesc . _ typedesc . getLptdesc ( ) ; 
 type = this . getType ( lptdesc ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 index d38780f . . bcf7ca3 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import java . util . List ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 
 + / / TODO : Auto - generated Javadoc 
 / * * 
 * Ported from Guid . h . Microsoft Windows SDK 6 . 0A . 
 * 
 @ @ - 26 , 15 + 27 , 20 @ @ import com . sun . jna . Structure ; 
 * / 
 public interface Guid { 
 
 + / * * The Constant IID _ NULL . * / 
 public final static IID IID _ NULL = new IID ( ) ; 
 
 / * * 
 * The Class GUID . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public static class GUID extends Structure { 
 
 / * * 
 * The Class ByReference . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public static class ByReference extends GUID implements 
 Structure . ByReference { 
 @ @ - 355 , 11 + 361 , 15 @ @ public interface Guid { 
 
 / * * 
 * The Class CLSID . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public static class CLSID extends GUID { 
 
 / * * 
 * The Class ByReference . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public static class ByReference extends GUID { 
 
 @ @ - 378 , 7 + 388 , 7 @ @ public interface Guid { 
 public ByReference ( GUID guid ) { 
 super ( guid ) ; 
 } 
 - 
 + 
 / * * 
 * Instantiates a new by reference . 
 * 
 @ @ - 395 , 10 + 405 , 30 @ @ public interface Guid { 
 * / 
 public CLSID ( ) { 
 } 
 + 
 + / * * 
 + * Instantiates a new clsid . 
 + * 
 + * @ param guid the guid 
 + * / 
 + public CLSID ( String guid ) { 
 + super ( guid ) ; 
 + } 
 + 
 + / * * 
 + * Instantiates a new clsid . 
 + * 
 + * @ param guid the guid 
 + * / 
 + public CLSID ( GUID guid ) { 
 + super ( guid ) ; 
 + } 
 } 
 
 / * * 
 * The Class REFIID . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public class REFIID extends IID { 
 
 @ @ - 435 , 6 + 465 , 8 @ @ public interface Guid { 
 
 / * * 
 * The Class IID . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public class IID extends GUID { 
 
 @ @ - 456 , 6 + 488 , 11 @ @ public interface Guid { 
 / / TODO Auto - generated constructor stub 
 } 
 
 + / * * 
 + * Instantiates a new iid . 
 + * 
 + * @ param iid the iid 
 + * / 
 public IID ( String iid ) { 
 super ( iid ) ; 
 / / TODO Auto - generated constructor stub 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java 
 index 9a97148 . . 83c9ed3 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java 
 @ @ - 35 , 42 + 35 , 42 @ @ public class TypeLibUtilTest extends TestCase { 
 return new TypeLibUtil ( " { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } " , 1 , 0 ) ; 
 } 
 
 - / / public void testGetTypeInfoCount ( ) { 
 - / / TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; 
 - / / int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; 
 - / / assertTrue ( " MS Shell should contain at least 36 types . " , typeInfoCount > = 36 ) ; 
 - / / } 
 - / / 
 - / / public void testGetTypeInfo ( ) { 
 - / / TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; 
 - / / int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; 
 - / / 
 - / / for ( int i = 0 ; i < typeInfoCount ; i + + ) 
 - / / { 
 - / / ITypeInfo typeInfo = shellTypeLib . getTypeInfo ( i ) ; 
 - / / TypeInfoUtil typeInfoUtil = new TypeInfoUtil ( typeInfo ) ; 
 - / / 
 - / / TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; 
 - / / int cFuncs = typeAttr . cFuncs . intValue ( ) ; 
 - / / 
 - / / for ( int y = 0 ; y < cFuncs ; y + + ) { 
 - / / / / Get the function description 
 - / / FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( y ) ; 
 - / / / / Get the member ID 
 - / / MEMBERID memberID = funcDesc . memid ; 
 - / / / / Get the name of the method 
 - / / TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; 
 - / / String methodName = typeInfoDoc2 . getName ( ) ; 
 - / / 
 - / / assertNotNull ( methodName ) ; 
 - / / 
 - / / typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; 
 - / / } 
 - / / 
 - / / typeInfoUtil . ReleaseTypeAttr ( typeAttr ) ; 
 - / / } 
 - / / } 
 - / / 
 + public void testGetTypeInfoCount ( ) { 
 + TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; 
 + int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; 
 + assertTrue ( " MS Shell should contain at least 36 types . " , typeInfoCount > = 36 ) ; 
 + } 
 + 
 + public void testGetTypeInfo ( ) { 
 + TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; 
 + int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; 
 + 
 + for ( int i = 0 ; i < typeInfoCount ; i + + ) 
 + { 
 + ITypeInfo typeInfo = shellTypeLib . getTypeInfo ( i ) ; 
 + TypeInfoUtil typeInfoUtil = new TypeInfoUtil ( typeInfo ) ; 
 + 
 + TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; 
 + int cFuncs = typeAttr . cFuncs . intValue ( ) ; 
 + 
 + for ( int y = 0 ; y < cFuncs ; y + + ) { 
 + / / Get the function description 
 + FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( y ) ; 
 + / / Get the member ID 
 + MEMBERID memberID = funcDesc . memid ; 
 + / / Get the name of the method 
 + TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; 
 + String methodName = typeInfoDoc2 . getName ( ) ; 
 + 
 + assertNotNull ( methodName ) ; 
 + 
 + typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; 
 + } 
 + 
 + typeInfoUtil . ReleaseTypeAttr ( typeAttr ) ; 
 + } 
 + } 
 + 
 public void testBug ( ) { 
 TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; 
 int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; 
 @ @ - 81 , 7 + 81 , 7 @ @ public class TypeLibUtilTest extends TestCase { 
 TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; 
 int cFuncs = typeAttr . cFuncs . intValue ( ) ; 
 
 - for ( int y = 13 ; y < cFuncs ; y + + ) { 
 + for ( int y = 0 ; y < cFuncs ; y + + ) { 
 System . out . println ( " \ n \ n \ n y : " + y ) ; 
 / / Get the function description 
 FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( y ) ; 
 diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index fe9b4c6 . . 9e5b56c 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 666 , 17 + 666 , 6 @ @ public abstract class Structure { 
 result = p = = null ? null : p . getString ( 0 , encoding ) ; 
 } 
 else { 
 - System . out . println ( structField . name + " : " + fieldType ) ; 
 - System . out . println ( " structField size : " + structField . size ) ; 
 - 
 - System . out . println ( " memory size : " + memory . SIZE ) ; 
 - System . out . println ( " peer : " + memory . peer ) ; 
 - 
 - if ( structField . name . equals ( " cBytes " ) ) { 
 - System . out . println ( " cBytes memory size : " + memory . SIZE ) ; 
 - System . out . println ( " cBytes peer : " + memory . peer ) ; 
 - } 
 - 
 result = memory . getValue ( offset , fieldType , currentValue ) ; 
 } 
 if ( readConverter ! = null ) {

NEAREST DIFF:
ELIMINATEDSENTENCE
