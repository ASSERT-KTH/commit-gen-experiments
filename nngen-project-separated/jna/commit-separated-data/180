BLEU SCORE: 0.020980574531482755

TEST MSG: Handle LastErrorException from Kernel32Util # formatMessage in ComUtils # checkRC
GENERATED MSG: added some test

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> index 553ce32 . . cf7cc5e 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> + import com . sun . jna . LastErrorException ; <nl> import java . util . ArrayList ; <nl> <nl> import com . sun . jna . Native ; <nl> @ @ - 109 , 8 + 110 , 14 @ @ public abstract class COMUtils { <nl> public static void checkRC ( HRESULT hr , EXCEPINFO pExcepInfo , <nl> IntByReference puArgErr ) { <nl> if ( FAILED ( hr ) ) { <nl> - String formatMessageFromHR = Kernel32Util . formatMessage ( hr ) ; <nl> - throw new COMException ( formatMessageFromHR , pExcepInfo , puArgErr ) ; <nl> + String formatMessage ; <nl> + try { <nl> + formatMessage = Kernel32Util . formatMessage ( hr ) + " ( HRESULT : " + Integer . toHexString ( hr . intValue ( ) ) + " ) " ; <nl> + } catch ( LastErrorException ex ) { <nl> + / / throws if HRESULT can ' t be resolved <nl> + formatMessage = " ( HRESULT : " + Integer . toHexString ( hr . intValue ( ) ) + " ) " ; <nl> + } <nl> + throw new COMException ( formatMessage , pExcepInfo , puArgErr ) ; <nl> } <nl> } <nl> <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java <nl> index 56aac85 . . 90395f5 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java <nl> @ @ - 1 , 18 + 1 , 29 @ @ <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> - import junit . framework . TestCase ; <nl> + import com . sun . jna . platform . win32 . WinNT ; <nl> + import org . junit . Test ; <nl> <nl> - public class COMUtilsTest extends TestCase { <nl> + import static org . junit . Assert . * ; <nl> <nl> + public class COMUtilsTest { <nl> + <nl> + @ Test <nl> public void testSUCCEEDED ( ) throws Exception { <nl> assertTrue ( COMUtils . SUCCEEDED ( COMUtils . S _ OK ) ) ; <nl> assertTrue ( COMUtils . SUCCEEDED ( COMUtils . S _ FALSE ) ) ; <nl> assertFalse ( COMUtils . SUCCEEDED ( COMUtils . E _ UNEXPECTED ) ) ; <nl> } <nl> <nl> + @ Test <nl> public void testFAILED ( ) throws Exception { <nl> assertFalse ( COMUtils . FAILED ( COMUtils . S _ OK ) ) ; <nl> assertFalse ( COMUtils . FAILED ( COMUtils . S _ FALSE ) ) ; <nl> assertTrue ( COMUtils . FAILED ( COMUtils . E _ UNEXPECTED ) ) ; <nl> } <nl> + <nl> + @ Test ( expected = COMException . class ) <nl> + public void testCreateCOMExceptionFromCustomHRESULT ( ) { <nl> + / / This resulted in a LastErrorException instead of COMException <nl> + COMUtils . checkRC ( new WinNT . HRESULT ( 0x80040200 ) ) ; <nl> + } <nl> } <nl> \ No newline at end of file
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 index 553ce32 . . cf7cc5e 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * / 
 package com . sun . jna . platform . win32 . COM ; 
 
 + import com . sun . jna . LastErrorException ; 
 import java . util . ArrayList ; 
 
 import com . sun . jna . Native ; 
 @ @ - 109 , 8 + 110 , 14 @ @ public abstract class COMUtils { 
 public static void checkRC ( HRESULT hr , EXCEPINFO pExcepInfo , 
 IntByReference puArgErr ) { 
 if ( FAILED ( hr ) ) { 
 - String formatMessageFromHR = Kernel32Util . formatMessage ( hr ) ; 
 - throw new COMException ( formatMessageFromHR , pExcepInfo , puArgErr ) ; 
 + String formatMessage ; 
 + try { 
 + formatMessage = Kernel32Util . formatMessage ( hr ) + " ( HRESULT : " + Integer . toHexString ( hr . intValue ( ) ) + " ) " ; 
 + } catch ( LastErrorException ex ) { 
 + / / throws if HRESULT can ' t be resolved 
 + formatMessage = " ( HRESULT : " + Integer . toHexString ( hr . intValue ( ) ) + " ) " ; 
 + } 
 + throw new COMException ( formatMessage , pExcepInfo , puArgErr ) ; 
 } 
 } 
 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java 
 index 56aac85 . . 90395f5 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java 
 @ @ - 1 , 18 + 1 , 29 @ @ 
 package com . sun . jna . platform . win32 . COM ; 
 
 - import junit . framework . TestCase ; 
 + import com . sun . jna . platform . win32 . WinNT ; 
 + import org . junit . Test ; 
 
 - public class COMUtilsTest extends TestCase { 
 + import static org . junit . Assert . * ; 
 
 + public class COMUtilsTest { 
 + 
 + @ Test 
 public void testSUCCEEDED ( ) throws Exception { 
 assertTrue ( COMUtils . SUCCEEDED ( COMUtils . S _ OK ) ) ; 
 assertTrue ( COMUtils . SUCCEEDED ( COMUtils . S _ FALSE ) ) ; 
 assertFalse ( COMUtils . SUCCEEDED ( COMUtils . E _ UNEXPECTED ) ) ; 
 } 
 
 + @ Test 
 public void testFAILED ( ) throws Exception { 
 assertFalse ( COMUtils . FAILED ( COMUtils . S _ OK ) ) ; 
 assertFalse ( COMUtils . FAILED ( COMUtils . S _ FALSE ) ) ; 
 assertTrue ( COMUtils . FAILED ( COMUtils . E _ UNEXPECTED ) ) ; 
 } 
 + 
 + @ Test ( expected = COMException . class ) 
 + public void testCreateCOMExceptionFromCustomHRESULT ( ) { 
 + / / This resulted in a LastErrorException instead of COMException 
 + COMUtils . checkRC ( new WinNT . HRESULT ( 0x80040200 ) ) ; 
 + } 
 } 
 \ No newline at end of file

NEAREST DIFF:
ELIMINATEDSENTENCE
