BLEU SCORE: 0.03283637368030199

TEST MSG: Enable easy wrapping of SAFEARRAY into VARIANT
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> index d0c3d8b . . b813b0f 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> @ @ - 276 , 6 + 276 , 11 @ @ public interface Variant { <nl> this . setValue ( VT _ DATE , date ) ; <nl> } <nl> <nl> + public VARIANT ( SAFEARRAY array ) { <nl> + this ( ) ; <nl> + this . setValue ( array ) ; <nl> + } <nl> + <nl> public VARTYPE getVarType ( ) { <nl> this . read ( ) ; <nl> return _ variant . vt ; <nl> @ @ - 288 , 6 + 293 , 10 @ @ public interface Variant { <nl> public void setValue ( int vt , Object value ) { <nl> this . setValue ( new VARTYPE ( vt ) , value ) ; <nl> } <nl> + <nl> + public void setValue ( SAFEARRAY array ) { <nl> + this . setValue ( array . getVarType ( ) . intValue ( ) | VT _ SAFEARRAY , array ) ; <nl> + } <nl> <nl> public void setValue ( VARTYPE vt , Object value ) { <nl> int varType = vt . intValue ( ) ; <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java <nl> index 8cb9b34 . . ea06808 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java <nl> @ @ - 3 , 9 + 3 , 11 @ @ package com . sun . jna . platform . win32 ; <nl> import junit . framework . TestCase ; <nl> <nl> import com . sun . jna . platform . win32 . OaIdl . DATE ; <nl> + import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; <nl> import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> + import com . sun . jna . platform . win32 . WTypes . VARTYPE ; <nl> import com . sun . jna . platform . win32 . WinBase . SYSTEMTIME ; <nl> import com . sun . jna . platform . win32 . WinDef . BOOL ; <nl> import com . sun . jna . platform . win32 . WinDef . BYTE ; <nl> @ @ - 20 , 6 + 22 , 7 @ @ import java . util . Date ; <nl> <nl> import static org . hamcrest . CoreMatchers . equalTo ; <nl> import static org . hamcrest . CoreMatchers . instanceOf ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class VariantTest extends TestCase { <nl> @ @ - 239 , 4 + 242 , 17 @ @ public class VariantTest extends TestCase { <nl> assertThat ( ( ( USHORT ) variant . getValue ( ) ) . intValue ( ) , equalTo ( ( int ) testChar ) ) ; <nl> assertThat ( variant . intValue ( ) , equalTo ( ( int ) testChar ) ) ; <nl> } <nl> + <nl> + public void testVariantSafearrayWrapping ( ) { <nl> + SAFEARRAY safearray = OaIdl . SAFEARRAY . createSafeArray ( new VARTYPE ( Variant . VT _ I1 ) , 5 ) ; <nl> + try { <nl> + VARIANT variant = new VARIANT ( safearray ) ; <nl> + assertThat ( variant . getVarType ( ) . intValue ( ) , equalTo ( ( int ) ( Variant . VT _ I1 | Variant . VT _ SAFEARRAY ) ) ) ; <nl> + Object wrappedValue = variant . getValue ( ) ; <nl> + assertThat ( wrappedValue , instanceOf ( SAFEARRAY . class ) ) ; <nl> + assertThat ( safearray . getUBound ( 0 ) , is ( 4 ) ) ; <nl> + } finally { <nl> + safearray . destroy ( ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 index d0c3d8b . . b813b0f 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 @ @ - 276 , 6 + 276 , 11 @ @ public interface Variant { 
 this . setValue ( VT _ DATE , date ) ; 
 } 
 
 + public VARIANT ( SAFEARRAY array ) { 
 + this ( ) ; 
 + this . setValue ( array ) ; 
 + } 
 + 
 public VARTYPE getVarType ( ) { 
 this . read ( ) ; 
 return _ variant . vt ; 
 @ @ - 288 , 6 + 293 , 10 @ @ public interface Variant { 
 public void setValue ( int vt , Object value ) { 
 this . setValue ( new VARTYPE ( vt ) , value ) ; 
 } 
 + 
 + public void setValue ( SAFEARRAY array ) { 
 + this . setValue ( array . getVarType ( ) . intValue ( ) | VT _ SAFEARRAY , array ) ; 
 + } 
 
 public void setValue ( VARTYPE vt , Object value ) { 
 int varType = vt . intValue ( ) ; 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java 
 index 8cb9b34 . . ea06808 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java 
 @ @ - 3 , 9 + 3 , 11 @ @ package com . sun . jna . platform . win32 ; 
 import junit . framework . TestCase ; 
 
 import com . sun . jna . platform . win32 . OaIdl . DATE ; 
 + import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; 
 import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 + import com . sun . jna . platform . win32 . WTypes . VARTYPE ; 
 import com . sun . jna . platform . win32 . WinBase . SYSTEMTIME ; 
 import com . sun . jna . platform . win32 . WinDef . BOOL ; 
 import com . sun . jna . platform . win32 . WinDef . BYTE ; 
 @ @ - 20 , 6 + 22 , 7 @ @ import java . util . Date ; 
 
 import static org . hamcrest . CoreMatchers . equalTo ; 
 import static org . hamcrest . CoreMatchers . instanceOf ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 public class VariantTest extends TestCase { 
 @ @ - 239 , 4 + 242 , 17 @ @ public class VariantTest extends TestCase { 
 assertThat ( ( ( USHORT ) variant . getValue ( ) ) . intValue ( ) , equalTo ( ( int ) testChar ) ) ; 
 assertThat ( variant . intValue ( ) , equalTo ( ( int ) testChar ) ) ; 
 } 
 + 
 + public void testVariantSafearrayWrapping ( ) { 
 + SAFEARRAY safearray = OaIdl . SAFEARRAY . createSafeArray ( new VARTYPE ( Variant . VT _ I1 ) , 5 ) ; 
 + try { 
 + VARIANT variant = new VARIANT ( safearray ) ; 
 + assertThat ( variant . getVarType ( ) . intValue ( ) , equalTo ( ( int ) ( Variant . VT _ I1 | Variant . VT _ SAFEARRAY ) ) ) ; 
 + Object wrappedValue = variant . getValue ( ) ; 
 + assertThat ( wrappedValue , instanceOf ( SAFEARRAY . class ) ) ; 
 + assertThat ( safearray . getUBound ( 0 ) , is ( 4 ) ) ; 
 + } finally { 
 + safearray . destroy ( ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
