BLEU SCORE: 0.018543295278285157

TEST MSG: update linux - x86 - 64 natives
GENERATED MSG: attach native thread as daemon to avoid tests hanging on exit

TEST DIFF (one line): diff - - git a / lib / native / linux - x86 - 64 . jar b / lib / native / linux - x86 - 64 . jar <nl> index 3081e6b . . 74c7d0a 100644 <nl> Binary files a / lib / native / linux - x86 - 64 . jar and b / lib / native / linux - x86 - 64 . jar differ <nl> diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index bb91833 . . 3d59fcb 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 43 , 7 + 43 , 8 @ @ public class CallbacksTest extends TestCase implements Paths { <nl> / / not attached , and the JVM never unmaps the defunct native thread . In <nl> / / order to avoid this situation causing tests to time out , we need to <nl> / / explicitly detach the native thread after our Java code is done with it . <nl> - private static final boolean THREAD _ DETACH _ BUG = Platform . isMac ( ) ; <nl> + / / Also reproducible on Ubuntu 6 ( x86 - 64 ) , Java 6 <nl> + private static final boolean THREAD _ DETACH _ BUG = Platform . isMac ( ) | | ( Platform . isLinux ( ) & & Platform . is64Bit ( ) ) ; <nl> <nl> private static final String UNICODE = " [ \ u0444 ] " ; <nl>
NEAREST DIFF (one line): diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index a8d8056 . . d9446bb 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 1036 , 13 + 1036 , 16 @ @ public class CallbacksTest extends TestCase { <nl> 1 , threads . size ( ) ) ; <nl> } <nl> <nl> + / / Thread object is never GC ' d on linux - amd64 and ( sometimes ) win32 - amd64 <nl> public void testAttachedThreadCleanupOnExit ( ) throws Exception { <nl> final Set threads = new HashSet ( ) ; <nl> final int [ ] called = { 0 } ; <nl> TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { <nl> public void callback ( ) { <nl> threads . add ( new WeakReference ( Thread . currentThread ( ) ) ) ; <nl> - + + called [ 0 ] ; <nl> + if ( + + called [ 0 ] = = 1 ) { <nl> + Thread . currentThread ( ) . setName ( " Thread to be cleaned up " ) ; <nl> + } <nl> Native . detach ( false ) ; <nl> } <nl> } ; <nl> @ @ - 1056 , 11 + 1059 , 10 @ @ public class CallbacksTest extends TestCase { <nl> while ( ref . get ( ) ! = null ) { <nl> System . gc ( ) ; <nl> Thread . sleep ( 10 ) ; <nl> - if ( System . currentTimeMillis ( ) - start > 5000 ) { <nl> - fail ( " Timed out waiting for attached thread to be detached on exit and disposed : " + ref . get ( ) ) ; <nl> + if ( System . currentTimeMillis ( ) - start > 10000 ) { <nl> + Thread t = ( Thread ) ref . get ( ) ; <nl> + fail ( " Timed out waiting for attached thread to be detached on exit and disposed : " + t + " alive : " + t . isAlive ( ) + " daemon " + t . isDaemon ( ) ) ; <nl> } <nl> - / / Try calling into native to spur thread cleanup <nl> - lib . callVoidCallback ( cb ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / lib / native / linux - x86 - 64 . jar b / lib / native / linux - x86 - 64 . jar 
 index 3081e6b . . 74c7d0a 100644 
 Binary files a / lib / native / linux - x86 - 64 . jar and b / lib / native / linux - x86 - 64 . jar differ 
 diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index bb91833 . . 3d59fcb 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 43 , 7 + 43 , 8 @ @ public class CallbacksTest extends TestCase implements Paths { 
 / / not attached , and the JVM never unmaps the defunct native thread . In 
 / / order to avoid this situation causing tests to time out , we need to 
 / / explicitly detach the native thread after our Java code is done with it . 
 - private static final boolean THREAD _ DETACH _ BUG = Platform . isMac ( ) ; 
 + / / Also reproducible on Ubuntu 6 ( x86 - 64 ) , Java 6 
 + private static final boolean THREAD _ DETACH _ BUG = Platform . isMac ( ) | | ( Platform . isLinux ( ) & & Platform . is64Bit ( ) ) ; 
 
 private static final String UNICODE = " [ \ u0444 ] " ; 


NEAREST DIFF:
diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index a8d8056 . . d9446bb 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 1036 , 13 + 1036 , 16 @ @ public class CallbacksTest extends TestCase { 
 1 , threads . size ( ) ) ; 
 } 
 
 + / / Thread object is never GC ' d on linux - amd64 and ( sometimes ) win32 - amd64 
 public void testAttachedThreadCleanupOnExit ( ) throws Exception { 
 final Set threads = new HashSet ( ) ; 
 final int [ ] called = { 0 } ; 
 TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { 
 public void callback ( ) { 
 threads . add ( new WeakReference ( Thread . currentThread ( ) ) ) ; 
 - + + called [ 0 ] ; 
 + if ( + + called [ 0 ] = = 1 ) { 
 + Thread . currentThread ( ) . setName ( " Thread to be cleaned up " ) ; 
 + } 
 Native . detach ( false ) ; 
 } 
 } ; 
 @ @ - 1056 , 11 + 1059 , 10 @ @ public class CallbacksTest extends TestCase { 
 while ( ref . get ( ) ! = null ) { 
 System . gc ( ) ; 
 Thread . sleep ( 10 ) ; 
 - if ( System . currentTimeMillis ( ) - start > 5000 ) { 
 - fail ( " Timed out waiting for attached thread to be detached on exit and disposed : " + ref . get ( ) ) ; 
 + if ( System . currentTimeMillis ( ) - start > 10000 ) { 
 + Thread t = ( Thread ) ref . get ( ) ; 
 + fail ( " Timed out waiting for attached thread to be detached on exit and disposed : " + t + " alive : " + t . isAlive ( ) + " daemon " + t . isDaemon ( ) ) ; 
 } 
 - / / Try calling into native to spur thread cleanup 
 - lib . callVoidCallback ( cb ) ; 
 } 
 } 

