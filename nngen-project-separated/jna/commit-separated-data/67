BLEU SCORE: 0.00957301534505126

TEST MSG: Support building on JDK 10 ( minimum build JDK is now 8 , run time java version is 6 )
GENERATED MSG: merge android branch

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 0d71935 . . bafdaf5 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 30 , 6 + 30 , 18 @ @ Bug Fixes <nl> * [ # 894 ] ( https : / / github . com / java - native - access / jna / issues / 894 ) : NullPointerException can be caused by calling ` com . sun . jna . platform . win32 . COM . util . ProxyObject # dispose ` multiple times - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 925 ] ( https : / / github . com / java - native - access / jna / issues / 925 ) : Optimize ` Structure # validate ` and prevent ` ArrayIndexOutOfBoundsException ` in ` SAFEARRAY # read ` for zero dimensions - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 340 ] ( https : / / github . com / java - native - access / jna / issues / 340 ) : Guard registry handling against out - of - bounds reads by ensuring all read strings are NULL terminated - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 902 ] ( https : / / github . com / java - native - access / jna / issues / 902 ) : Allow building JNA on JDK 10 . ` javah ` <nl> + was removed from the JDK and ` javac ` is now used to create the necessary headers . <nl> + JNA now has JDK 8 as the minimum build version , at runtime Java 6 is the minimum version . < br / > <nl> + Native code for platforms with a JDK version lower than 8 can still be build by ( demonstrated for Solaris x86 ) : <nl> + < ol > <nl> + < li > Run ` ant - Dbuild . os . name = SunOS - Dbuild . os . arch = x86 native - build - package ` < / li > <nl> + < li > Transfer the ` build / build - package - sunos - x86 - 5 . 2 . 1 . zip ` file to the target system . The file holds the native sources , the necessary headers and and a shell script for the build . < / li > <nl> + < li > Expand the zip on the target system . < / li > <nl> + < li > Setup ` JAVA _ HOME ` to point to the JDK sources . < / li > <nl> + < li > Change into the expanded directory and run ` bash build . sh ` . < / li > <nl> + < li > The resulting ` sunos - x86 . jar ` is copied back to the original build system to ` lib / native / sunos - x86 . jar ` < / li > <nl> + < / ol > - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> <nl> Breaking Changes <nl> - - - - - - - - - - - - - - - - <nl> diff - - git a / build . xml b / build . xml <nl> index 38ae002 . . e70b59f 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 156 , 6 + 156 , 20 @ @ <nl> < / target > <nl> <nl> < target name = " - dynamic - properties " depends = " - prepare - anttools " > <nl> + < property name = " build . os . name " value = " $ { os . name } " / > <nl> + < condition property = " build . os . family " value = " windows " > <nl> + < contains string = " $ { build . os . name } " substring = " windows " casesensitive = " false " / > <nl> + < / condition > <nl> + < condition property = " build . os . family " value = " mac " > <nl> + < or > <nl> + < contains string = " $ { build . os . name } " substring = " darwin " casesensitive = " false " / > <nl> + < contains string = " $ { build . os . name } " substring = " mac " casesensitive = " false " / > <nl> + < / or > <nl> + < / condition > <nl> + < property name = " build . os . family " value = " other " / > <nl> + < property name = " build . os . arch " value = " $ { os . arch } " / > <nl> + < property name = " build . os . endianess " value = " $ { sun . cpu . endian } " / > <nl> + <nl> < condition property = " - native " value = " true " > <nl> < not > < isset property = " build - native " / > < / not > <nl> < / condition > <nl> @ @ - 185 , 43 + 199 , 6 @ @ <nl> < condition property = " cross - compile " value = " true " > <nl> < isset property = " os . prefix " / > <nl> < / condition > <nl> - < ! - - Sun 1 . 6 VM for windows doesn ' t support - d32 / - d64 switch - - > <nl> - < condition property = " vm . 64 " value = " - d64 " else = " - Ddummy " > <nl> - < not > < os family = " windows " / > < / not > <nl> - < / condition > <nl> - < condition property = " vm . 32 " value = " - d32 " else = " - Ddummy " > <nl> - < not > < os family = " windows " / > < / not > <nl> - < / condition > <nl> - < condition property = " vmopt . arch " value = " $ { vm . 64 } " else = " $ { vm . 32 } " > <nl> - < and > <nl> - < not > <nl> - < and > <nl> - < matches pattern = " ^ android - " string = " $ { os . prefix } " / > <nl> - < not > < matches pattern = " 64 $ " string = " $ { os . prefix } " / > < / not > <nl> - < / and > <nl> - < / not > <nl> - < or > <nl> - < equals arg1 = " $ { sun . arch . data . model } " arg2 = " 64 " trim = " true " / > <nl> - < equals arg1 = " $ { com . ibm . vm . bitmode } " arg2 = " 64 " trim = " true " / > <nl> - < os arch = " x86 _ 64 " / > <nl> - < os arch = " amd64 " / > <nl> - < os arch = " em64t " / > <nl> - < os arch = " sparcv9 " / > <nl> - < os arch = " ppc64 " / > <nl> - < os arch = " ppc64le " / > <nl> - < os arch = " ia64 " / > <nl> - < os arch = " aarch64 " / > <nl> - < os arch = " mips64el " / > <nl> - < os arch = " s390x " / > <nl> - < / or > <nl> - < / and > <nl> - < / condition > <nl> - < condition property = " ld . preload " value = " LD _ PRELOAD _ 64 " else = " LD _ PRELOAD " > <nl> - < and > <nl> - < os name = " SunOS " / > <nl> - < equals arg1 = " $ { vmopt . arch } " arg2 = " $ { vm . 64 } " / > <nl> - < / and > <nl> - < / condition > <nl> <nl> < property name = " classes " location = " $ { build } / classes " / > <nl> < property name = " eclipse . classes " location = " build . eclipse / classes " / > <nl> @ @ - 239 , 62 + 216 , 62 @ @ <nl> <nl> < ! - - Add other supported platforms here - - > <nl> < condition property = " jre . arch " value = " x86 " > <nl> - < matches pattern = " ( i [ 3456 ] 86 | pentium ) " string = " $ { os . arch } " / > <nl> + < matches pattern = " ( i [ 3456 ] 86 | pentium ) " string = " $ { build . os . arch } " / > <nl> < / condition > <nl> < condition property = " jre . arch " value = " x86 - 64 " > <nl> - < matches pattern = " ( x86 _ 64 | amd64 | em64t ) " string = " $ { os . arch } " / > <nl> + < matches pattern = " ( x86 _ 64 | amd64 | em64t ) " string = " $ { build . os . arch } " / > <nl> < / condition > <nl> < condition property = " jre . arch " value = " ppc " > <nl> - < matches pattern = " ( powerpc | power ) " string = " $ { os . arch } " / > <nl> + < matches pattern = " ( powerpc | power ) " string = " $ { build . os . arch } " / > <nl> < / condition > <nl> < condition property = " jre . arch " value = " ppc64le " > <nl> < or > <nl> - 	 < matches pattern = " ( powerpc64le | power64le | ppc64le ) " string = " $ { os . arch } " / > <nl> + 	 < matches pattern = " ( powerpc64le | power64le | ppc64le ) " string = " $ { build . os . arch } " / > <nl> 	 < and > <nl> - 	 < matches pattern = " ( powerpc64 | power64 | ppc64 ) " string = " $ { os . arch } " / > <nl> - 	 < matches pattern = " little " string = " $ { sun . cpu . endian } " / > <nl> + 	 < matches pattern = " ( powerpc64 | power64 | ppc64 ) " string = " $ { build . os . arch } " / > <nl> + 	 < matches pattern = " little " string = " $ { build . os . endianess } " / > <nl> 	 < / and > <nl> < / or > <nl> < / condition > <nl> < condition property = " jre . arch " value = " ppc64 " > <nl> - < matches pattern = " ( powerpc64 | power64 ) " string = " $ { os . arch } " / > <nl> + < matches pattern = " ( powerpc64 | power64 ) " string = " $ { build . os . arch } " / > <nl> < / condition > <nl> < condition property = " jre . arch " value = " armel " > <nl> < and > <nl> - < matches pattern = " arm " string = " $ { os . arch } " / > <nl> + < matches pattern = " arm " string = " $ { build . os . arch } " / > <nl> < matches pattern = " true " string = " $ { build . isArmSoftFloat } " / > <nl> < / and > <nl> < / condition > <nl> <nl> - < property name = " jre . arch " value = " $ { os . arch } " / > <nl> + < property name = " jre . arch " value = " $ { build . os . arch } " / > <nl> <nl> < condition property = " os . prefix " value = " linux - $ { jre . arch } " > <nl> - < os name = " Linux " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " Linux " / > <nl> < / condition > <nl> < condition property = " os . prefix " value = " aix - $ { jre . arch } " > <nl> - < os name = " AIX " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " AIX " / > <nl> < / condition > <nl> < condition property = " os . prefix " value = " win32 - $ { jre . arch } " > <nl> - < os family = " windows " / > <nl> + < equals arg1 = " $ { build . os . family } " arg2 = " windows " / > <nl> < / condition > <nl> < ! - - Darwin builds are universal , no arch required - - > <nl> < condition property = " os . prefix " value = " darwin " > <nl> - < os family = " mac " / > <nl> + < equals arg1 = " $ { build . os . family } " arg2 = " mac " / > <nl> < / condition > <nl> < condition property = " os . prefix " value = " sunos - $ { jre . arch } " > <nl> - < os name = " SunOS " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " SunOS " / > <nl> < / condition > <nl> < condition property = " os . prefix " value = " freebsd - $ { jre . arch } " > <nl> - < os name = " FreeBSD " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " FreeBSD " / > <nl> < / condition > <nl> < condition property = " os . prefix " value = " openbsd - $ { jre . arch } " > <nl> - 	 < os name = " OpenBSD " / > <nl> + 	 < equals arg1 = " $ { build . os . name } " arg2 = " OpenBSD " / > <nl> < / condition > <nl> < condition property = " os . prefix " value = " netbsd - $ { jre . arch } " > <nl> - < os name = " NetBSD " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " NetBSD " / > <nl> < / condition > <nl> < condition property = " os . prefix " value = " kfreebsd - $ { jre . arch } " > <nl> - < os name = " GNU / kFreeBSD " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " GNU / kFreeBSD " / > <nl> < / condition > <nl> < fail unless = " os . prefix " message = " OS / arch not supported ( $ { os . name } / $ { jre . arch } ) , edit build . xml and native / Makefile to add it . " / > <nl> < ! - - Keep all natives separate - - > <nl> @ @ - 314 , 16 + 291 , 19 @ @ <nl> value = " $ { java . home } / lib / $ { libarch } / libjsig . so " else = " " > <nl> < available file = " $ { java . home } / lib / $ { libarch } / libjsig . so " / > <nl> < / condition > <nl> - < condition property = " ld . preload . name " value = " $ { ld . preload } " else = " IGNORE " > <nl> + < condition property = " ld . preload . name " value = " LD _ PRELOAD " else = " IGNORE " > <nl> < not > < equals arg1 = " $ { libjsig } " arg2 = " " / > < / not > <nl> < / condition > <nl> < property name = " native . jar " value = " $ { os . prefix } . jar " / > <nl> < property name = " build . native " location = " $ { build } / $ { native . subdir } " / > <nl> + < property name = " build . headers " location = " $ { build } / headers " / > <nl> < property name = " build . aar " location = " $ { build } / aar " / > <nl> - < property name = " md5 . file " location = " $ { build . native } / jni . checksum " / > <nl> + < property name = " md5 . file " location = " $ { build . headers } / jni . checksum " / > <nl> + < property name = " jni . info " location = " $ { build . headers } / jni . properties " / > <nl> <nl> < mkdir dir = " $ { build } " / > <nl> < mkdir dir = " $ { build . native } " / > <nl> + < mkdir dir = " $ { build . headers } " / > <nl> < mkdir dir = " $ { classes } " / > <nl> < mkdir dir = " $ { test . classes } " / > <nl> < mkdir dir = " $ { reports } " / > <nl> @ @ - 336 , 10 + 316 , 11 @ @ <nl> < echo > java . home = $ { java . home } < / echo > <nl> < echo > java . library . path = $ { java . library . path } < / echo > <nl> < echo > os . prefix = $ { os . prefix } < / echo > <nl> - < echo > os . name = $ { os . name } < / echo > <nl> - < echo > os . arch = $ { os . arch } ( $ { sun . cpu . endian } ) < / echo > <nl> + < echo > os . name = $ { build . os . name } < / echo > <nl> + < echo > os . arch = $ { build . os . arch } ( $ { build . os . endianess } ) < / echo > <nl> < echo > build = $ { build } < / echo > <nl> < echo > build . native = $ { build . native } < / echo > <nl> + < echo > build . headers = $ { build . headers } < / echo > <nl> < echo > build . aar = $ { build . aar } < / echo > <nl> <nl> < / target > <nl> @ @ - 377 , 7 + 358 , 8 @ @ <nl> includeantruntime = " false " <nl> deprecation = " on " <nl> debug = " $ { debug } " <nl> - encoding = " UTF - 8 " > <nl> + encoding = " UTF - 8 " <nl> + nativeheaderdir = " $ { build . headers } " > <nl> < src refid = " src . path " / > <nl> < / javac > <nl> < / target > <nl> @ @ - 665 , 11 + 647 , 6 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> < / target > <nl> <nl> < target name = " javah " depends = " compile " unless = " - native " > <nl> - < javah classpath = " $ { classes } " destdir = " $ { build . native } " force = " yes " > <nl> - < class name = " com . sun . jna . Function " / > <nl> - < class name = " com . sun . jna . Native " / > <nl> - < class name = " com . sun . jna . win32 . DLLCallback " / > <nl> - < / javah > <nl> < condition property = " grep " value = " / usr / sfw / bin / ggrep " > <nl> < os name = " SunOS " / > <nl> < / condition > <nl> @ @ - 681 , 12 + 658 , 12 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> < os name = " AIX " / > <nl> < / condition > <nl> < ! - - args are based on GNU grep , other versions may differ - - > <nl> - < apply dir = " $ { build . native } " executable = " $ { grep } " parallel = " true " <nl> + < apply dir = " $ { build . headers } " executable = " $ { grep } " parallel = " true " <nl> failonerror = " $ { grep . required } " relative = " true " output = " $ { md5 . file } " > <nl> < arg value = " - A " / > <nl> < arg value = " 1 " / > <nl> < arg value = " JNIEXPORT " / > <nl> - < fileset dir = " $ { build . native } " includes = " * . h " / > <nl> + < fileset dir = " $ { build . headers } " includes = " * . h " / > <nl> < / apply > <nl> < ! - - Clean up gcj javah output to match that of Sun ' s javah - - > <nl> < fixcrlf file = " $ { md5 . file } " eol = " unix " / > <nl> @ @ - 703 , 6 + 680 , 10 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> 	 	 flags = " m " <nl> file = " $ { md5 . file } " / > <nl> < checksum property = " md5 " file = " $ { md5 . file } " / > <nl> + < propertyfile file = " $ { jni . info } " > <nl> + < entry key = " checksum " value = " $ { md5 } " / > <nl> + < entry key = " version " value = " $ { jni . version } " / > <nl> + < / propertyfile > <nl> < condition property = " jni . valid " value = " true " > <nl> < or > <nl> < os name = " AIX " / > <nl> @ @ - 755 , 7 + 736 , 7 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> < target name = " : rsrc " > <nl> < condition property = " - rsrc " > <nl> < and > <nl> - < not > < os family = " windows " / > < / not > <nl> + < not > < equals arg1 = " $ { build . os . family } " arg2 = " windows " / > < / not > <nl> < not > < equals arg1 = " $ { os . prefix } " arg2 = " w32ce - arm " / > < / not > <nl> < / and > <nl> < / condition > <nl> @ @ - 790 , 16 + 771 , 8 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> file = " $ { rsrc } " byline = " true " / > <nl> < / target > <nl> <nl> - < target name = " native " depends = " - enable - native , - setup , javah , - native - api - check , rsrc " unless = " - native " <nl> - description = " Build native libraries . Use ' ant - DCC = xxx ' to build using a compiler other than gcc " > <nl> + < target name = " - prepare - native " depends = " - setup , rsrc " > <nl> < property name = " comment " value = " # auto - generated by ant " / > <nl> - < replaceregexp match = " ^ JNA _ JNI _ VERSION = . * " <nl> - replace = " JNA _ JNI _ VERSION = $ { jni . version } $ { comment } " <nl> - file = " native / Makefile " byline = " true " / > <nl> - < replaceregexp match = " ^ CHECKSUM = . * " <nl> - replace = " CHECKSUM = $ { jni . md5 } $ { comment } " <nl> - file = " native / Makefile " byline = " true " / > <nl> - < ! - - Handle cross - compilation - - > <nl> < condition property = " make . OS " value = " OS = w32ce " > <nl> < equals arg1 = " $ { os . prefix } " arg2 = " w32ce - arm " / > <nl> < / condition > <nl> @ @ - 840 , 7 + 813 , 7 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> < / condition > <nl> < ! - - ensure ARCH is set properly for 64 - bit capable platforms - - > <nl> < ! - - use ANT _ OPTS = - d64 / - d32 to build 64 - bit / 32 - bit if not the platform default - - > <nl> - < property name = " ARCH " value = " $ { os . arch } " / > <nl> + < property name = " ARCH " value = " $ { build . os . arch } " / > <nl> < condition property = " make . USE _ MSVC " value = " USE _ MSVC = $ { USE _ MSVC } " else = " IGNORE = " > <nl> < isset property = " USE _ MSVC " / > <nl> < / condition > <nl> @ @ - 899 , 24 + 872 , 24 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> < ! - - Windows ' drive letters and spaces in absolute paths wreak havoc on <nl> make - - > <nl> < condition property = " make . BUILD " value = " BUILD = . . / $ { build } / $ { native . subdir } " else = " BUILD = $ { build . native } " > <nl> - < os family = " windows " / > <nl> + < equals arg1 = " $ { build . os . family } " arg2 = " windows " / > <nl> < / condition > <nl> < condition property = " make . PATH " value = " PATH = / opt / csw / bin : / usr / sfw / bin : / usr / bin : / usr / ccs / bin " else = " IGNORE = " > <nl> - < os name = " SunOS " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " SunOS " / > <nl> < / condition > <nl> < condition property = " make " value = " / usr / sfw / bin / gmake " > <nl> < and > <nl> - < os name = " SunOS " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " SunOS " / > <nl> < available file = " / usr / sfw / bin / gmake " / > <nl> < / and > <nl> < / condition > <nl> < condition property = " make " value = " gmake " > <nl> < or > <nl> - < os name = " FreeBSD " / > <nl> - < os name = " OpenBSD " / > <nl> - < os name = " NetBSD " / > <nl> - < os name = " SunOS " / > <nl> - < os name = " AIX " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " FreeBSD " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " OpenBSD " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " NetBSD " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " SunOS " / > <nl> + < equals arg1 = " $ { build . os . name } " arg2 = " AIX " / > <nl> < / or > <nl> < / condition > <nl> < ! - - Allow explicit override of make variables - - > <nl> @ @ - 928 , 10 + 901 , 73 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> <nl> < ! - - Default make program - - > <nl> < property name = " make " value = " make " / > <nl> + < / target > <nl> <nl> + < target name = " native - build - package " depends = " javah , - native - api - check , - prepare - native " > <nl> + < echo file = " $ { build } / build . sh " > # ! / bin / sh <nl> + cwd = $ ( pwd ) <nl> + if [ - z " $ JAVA _ HOME " ] ; then <nl> + echo " Please make sure JAVA _ HOME is set " <nl> + exit 1 <nl> + fi <nl> + cd native <nl> + $ { make } \ <nl> + JAVA _ HOME = $ JAVA _ HOME \ <nl> + JAVAH = $ cwd / headers \ <nl> + DEBUG = $ { debug . native } \ <nl> + CFLAGS _ EXTRA = $ { cflags _ extra . native } \ <nl> + DYNAMIC _ LIBFFI = $ { dynlink . native } \ <nl> + $ { make . CC } \ <nl> + $ { make . USE _ MSVC } \ <nl> + BUILD = . . / build \ <nl> + $ { make . SDKROOT } \ <nl> + $ { make . ARCH } \ <nl> + $ { make . PATH } \ <nl> + $ { make . OS } \ <nl> + $ { make . OPTS } \ <nl> + JNA _ JNI _ VERSION = $ { jni . version } \ <nl> + CHECKSUM = $ { jni . md5 } <nl> + cd . . <nl> + cd build <nl> + zip . . / $ { os . prefix } . jar libjnidispatch . so jnidispatch . dll <nl> + cd . . <nl> + < / echo > <nl> + < jar jarfile = " $ { build } / $ { os . prefix } . jar " > <nl> + < manifest > <nl> + < attribute name = " Implementation - Version " value = " $ { jni . version } b $ { jni . build } " / > <nl> + < attribute name = " Specification - Version " value = " $ { jni . version } " / > <nl> + < / manifest > <nl> + < / jar > <nl> + < zip destfile = " $ { build } / build - package - $ { os . prefix } - $ { jni . version } . zip " > <nl> + < zipfileset dir = " native " <nl> + prefix = " build - package - $ { os . prefix } - $ { jni . version } / native " <nl> + > <nl> + < ! - - Exclude generated files from the ZIP - - > <nl> + < exclude name = " libffi / autom4te . cache / * * " / > <nl> + < exclude name = " libffi / Makefile . in " / > <nl> + < exclude name = " libffi / aclocal . m4 " / > <nl> + < exclude name = " libffi / compile " / > <nl> + < exclude name = " libffi / config . guess " / > <nl> + < exclude name = " libffi / config . sub " / > <nl> + < exclude name = " libffi / configure " / > <nl> + < exclude name = " libffi / depcomp " / > <nl> + < exclude name = " libffi / fficonfig . h . in " / > <nl> + < exclude name = " libffi / install - sh " / > <nl> + < exclude name = " libffi / ltmain . sh " / > <nl> + < exclude name = " libffi / mdate - sh " / > <nl> + < exclude name = " libffi / missing " / > <nl> + < / zipfileset > <nl> + < zipfileset dir = " $ { build } " includes = " $ { os . prefix } . jar " prefix = " build - package - $ { os . prefix } - $ { jni . version } " / > <nl> + < zipfileset dir = " $ { build } " includes = " build . sh " prefix = " build - package - $ { os . prefix } - $ { jni . version } " / > <nl> + < zipfileset dir = " build / headers " prefix = " build - package - $ { os . prefix } - $ { jni . version } / headers " / > <nl> + < / zip > <nl> + < / target > <nl> + <nl> + < target name = " native " depends = " - enable - native , javah , - native - api - check , - prepare - native " unless = " - native " <nl> + description = " Build native libraries . Use ' ant - DCC = xxx ' to build using a compiler other than gcc " > <nl> < exec executable = " $ { make } " dir = " $ { native } " failonerror = " true " > <nl> < arg value = " JAVA _ HOME = $ { jdk . home } " / > <nl> - < arg value = " JAVAH = $ { build . native } " / > <nl> + < arg value = " JAVAH = $ { build . headers } " / > <nl> < arg value = " DEBUG = $ { debug . native } " / > <nl> < arg value = " CFLAGS _ EXTRA = $ { cflags _ extra . native } " / > <nl> < arg value = " DYNAMIC _ LIBFFI = $ { dynlink . native } " / > <nl> @ @ - 1132 , 7 + 1168 , 6 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> < sysproperty key = " jna . nosys " value = " true " / > <nl> < sysproperty key = " jna . builddir " file = " $ { build } " / > <nl> < sysproperty key = " jna . nativedir " file = " $ { build . native } " / > <nl> - < jvmarg value = " $ { vmopt . arch } " / > <nl> < classpath > < path refid = " test . runpath " / > < / classpath > <nl> < formatter type = " brief " usefile = " false " / > <nl> < formatter type = " xml " / > <nl> diff - - git a / native / Makefile b / native / Makefile <nl> index 6f9ad25 . . 1bea2dc 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 336 , 7 + 336 , 9 @ @ endif <nl> ifeq ( $ ( CC ) , gcc ) <nl> GCC _ MAJOR _ VERSION = $ ( shell gcc - dumpversion | cut - f 1 - d ' . ' ) <nl> ifneq ( $ ( GCC _ MAJOR _ VERSION ) , 4 ) <nl> - 	 LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered - Wno - unused - variable <nl> + 	 ifneq ( $ ( GCC _ MAJOR _ VERSION ) , 3 ) <nl> + 	 LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered - Wno - unused - variable <nl> + 	 endif <nl> endif <nl> else <nl> LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered - Wno - unused - variable <nl> @ @ - 478 , 7 + 480 , 7 @ @ $ ( FFI _ LIB ) : <nl> 	 @ mkdir - p $ ( FFI _ BUILD ) <nl> 	 @ if [ ! - f $ ( FFI _ SRC ) / configure ] ; then \ <nl> 	 echo " Generating configure " ; \ <nl> - 	 ( cd $ ( FFI _ SRC ) ; . / autogen . sh ) ; \ <nl> + 	 ( cd $ ( FFI _ SRC ) ; / bin / sh autogen . sh ) ; \ <nl> 	 fi <nl> 	 @ if [ ! - f $ ( FFI _ BUILD ) / Makefile ] ; then \ <nl> 	 echo " Configuring libffi ( $ ( ARCH ) ) " ; \ <nl> diff - - git a / src / com / sun / jna / Function . java b / src / com / sun / jna / Function . java <nl> index 2d31827 . . 300a982 100644 <nl> - - - a / src / com / sun / jna / Function . java <nl> + + + b / src / com / sun / jna / Function . java <nl> @ @ - 60 , 17 + 60 , 23 @ @ public class Function extends Pointer { <nl> } <nl> <nl> / * * Maximum number of arguments supported by a JNA function call . * / <nl> + @ java . lang . annotation . Native <nl> public static final int MAX _ NARGS = 256 ; <nl> <nl> / * * Standard C calling convention . * / <nl> + @ java . lang . annotation . Native <nl> public static final int C _ CONVENTION = 0 ; <nl> / * * First alternate convention ( currently used only for w32 stdcall ) . * / <nl> + @ java . lang . annotation . Native <nl> public static final int ALT _ CONVENTION = 0x3F ; <nl> <nl> + @ java . lang . annotation . Native <nl> private static final int MASK _ CC = 0x3F ; <nl> / * * Whether to throw an exception if last error is non - zero after call . * / <nl> + @ java . lang . annotation . Native <nl> public static final int THROW _ LAST _ ERROR = 0x40 ; <nl> / * * Mask for number of fixed args ( 1 - 3 ) for varargs calls . * / <nl> + @ java . lang . annotation . Native <nl> public static final int USE _ VARARGS = 0x180 ; <nl> <nl> static final Integer INTEGER _ TRUE = Integer . valueOf ( - 1 ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index c19c48b . . d0032ee 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 8 , 6 + 8 , 7 @ @ Features <nl> * Automatic cleanup of native threads ( based on suggestions from neil smith ) - [ @ twall ] ( https : / / github . com / twall ) . <nl> * Add android - arm target ( thanks to ochafik for initial work ) . <nl> * Add ` jna . tmpdir ` to override temporary JNA storage location - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * Add EXTRA _ MAKE _ OPTS ant property to override make variables - [ @ twall ] ( https : / / github . com / twall ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / build . xml b / build . xml <nl> index c87f14c . . 9a3c453 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 622 , 6 + 622 , 10 @ @ osname = macos <nl> < os name = " AIX " / > <nl> < / or > <nl> < / condition > <nl> + < ! - - Allow explicit override of make variables - - > <nl> + < condition property = " make . OPTS " value = " $ { EXTRA _ MAKE _ OPTS } " else = " IGNORE = " > <nl> + < isset property = " EXTRA _ MAKE _ OPTS " / > <nl> + < / condition > <nl> < ! - - Native resource path within jna . jar - - > <nl> < condition property = " native . path " value = " lib / armeabi " else = " com / sun / jna / $ { os . prefix } " > <nl> < equals arg1 = " $ { os . prefix } " arg2 = " android - arm " / > <nl> @ @ - 642 , 6 + 646 , 7 @ @ osname = macos <nl> < arg value = " $ { make . ARCH } " / > <nl> < arg value = " $ { make . PATH } " / > <nl> < arg value = " $ { make . OS } " / > <nl> + < arg line = " $ { make . OPTS } " / > <nl> < arg value = " JNA _ JNI _ VERSION = $ { jni . version } " / > <nl> < arg value = " CHECKSUM = $ { jni . md5 } " / > <nl> < / exec > <nl> diff - - git a / native / Makefile b / native / Makefile <nl> index 4d4f505 . . 17b740c3 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> # The android build requires the android SDK + NDK for cross - compilation ; <nl> # make the tools available on the path and compile with <nl> # " ant - Dos . prefix = android - arm " . Put the NDK tools in the path and adjust <nl> - # NDK _ PLATFORM below . <nl> + # NDK _ PLATFORM below or set it in your environment . <nl> # <nl> <nl> # Systems which support POSIX signals may be able to support VM crash <nl> @ @ - 113 , 7 + 113 , 7 @ @ RANLIB = arm - linux - androideabi - ranlib <nl> STRIP = arm - linux - androideabi - strip - x <nl> CDEFINES = - DNO _ JAWT - DNO _ WEAK _ GLOBALS - DFFI _ MMAP _ EXEC _ WRIT = 1 - DFFI _ MMAP _ EXEC _ SELINUX = 0 <nl> COPT + = - fpic - mthumb - interwork - ffunction - sections - funwind - tables - fstack - protector - fno - short - enums - march = armv5te - mtune = xscale - msoft - float <nl> - NDK _ PLATFORM = / Developer / Applications / android - ndk - r7c / platforms / android - 14 <nl> + NDK _ PLATFORM ? = / Developer / Applications / android - ndk - r7c / platforms / android - 14 <nl> JAVA _ INCLUDES = <nl> CINCLUDES + = - I " $ ( NDK _ PLATFORM ) / arch - arm / usr / include " # - I / usr / include <nl> LIBS = - nostdlib - L " $ ( NDK _ PLATFORM ) / arch - arm / usr / lib / " - lgcc - lc - ldl - lm

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 0d71935 . . bafdaf5 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 30 , 6 + 30 , 18 @ @ Bug Fixes 
 * [ # 894 ] ( https : / / github . com / java - native - access / jna / issues / 894 ) : NullPointerException can be caused by calling ` com . sun . jna . platform . win32 . COM . util . ProxyObject # dispose ` multiple times - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 925 ] ( https : / / github . com / java - native - access / jna / issues / 925 ) : Optimize ` Structure # validate ` and prevent ` ArrayIndexOutOfBoundsException ` in ` SAFEARRAY # read ` for zero dimensions - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 340 ] ( https : / / github . com / java - native - access / jna / issues / 340 ) : Guard registry handling against out - of - bounds reads by ensuring all read strings are NULL terminated - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 902 ] ( https : / / github . com / java - native - access / jna / issues / 902 ) : Allow building JNA on JDK 10 . ` javah ` 
 + was removed from the JDK and ` javac ` is now used to create the necessary headers . 
 + JNA now has JDK 8 as the minimum build version , at runtime Java 6 is the minimum version . < br / > 
 + Native code for platforms with a JDK version lower than 8 can still be build by ( demonstrated for Solaris x86 ) : 
 + < ol > 
 + < li > Run ` ant - Dbuild . os . name = SunOS - Dbuild . os . arch = x86 native - build - package ` < / li > 
 + < li > Transfer the ` build / build - package - sunos - x86 - 5 . 2 . 1 . zip ` file to the target system . The file holds the native sources , the necessary headers and and a shell script for the build . < / li > 
 + < li > Expand the zip on the target system . < / li > 
 + < li > Setup ` JAVA _ HOME ` to point to the JDK sources . < / li > 
 + < li > Change into the expanded directory and run ` bash build . sh ` . < / li > 
 + < li > The resulting ` sunos - x86 . jar ` is copied back to the original build system to ` lib / native / sunos - x86 . jar ` < / li > 
 + < / ol > - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 
 Breaking Changes 
 - - - - - - - - - - - - - - - - 
 diff - - git a / build . xml b / build . xml 
 index 38ae002 . . e70b59f 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 156 , 6 + 156 , 20 @ @ 
 < / target > 
 
 < target name = " - dynamic - properties " depends = " - prepare - anttools " > 
 + < property name = " build . os . name " value = " $ { os . name } " / > 
 + < condition property = " build . os . family " value = " windows " > 
 + < contains string = " $ { build . os . name } " substring = " windows " casesensitive = " false " / > 
 + < / condition > 
 + < condition property = " build . os . family " value = " mac " > 
 + < or > 
 + < contains string = " $ { build . os . name } " substring = " darwin " casesensitive = " false " / > 
 + < contains string = " $ { build . os . name } " substring = " mac " casesensitive = " false " / > 
 + < / or > 
 + < / condition > 
 + < property name = " build . os . family " value = " other " / > 
 + < property name = " build . os . arch " value = " $ { os . arch } " / > 
 + < property name = " build . os . endianess " value = " $ { sun . cpu . endian } " / > 
 + 
 < condition property = " - native " value = " true " > 
 < not > < isset property = " build - native " / > < / not > 
 < / condition > 
 @ @ - 185 , 43 + 199 , 6 @ @ 
 < condition property = " cross - compile " value = " true " > 
 < isset property = " os . prefix " / > 
 < / condition > 
 - < ! - - Sun 1 . 6 VM for windows doesn ' t support - d32 / - d64 switch - - > 
 - < condition property = " vm . 64 " value = " - d64 " else = " - Ddummy " > 
 - < not > < os family = " windows " / > < / not > 
 - < / condition > 
 - < condition property = " vm . 32 " value = " - d32 " else = " - Ddummy " > 
 - < not > < os family = " windows " / > < / not > 
 - < / condition > 
 - < condition property = " vmopt . arch " value = " $ { vm . 64 } " else = " $ { vm . 32 } " > 
 - < and > 
 - < not > 
 - < and > 
 - < matches pattern = " ^ android - " string = " $ { os . prefix } " / > 
 - < not > < matches pattern = " 64 $ " string = " $ { os . prefix } " / > < / not > 
 - < / and > 
 - < / not > 
 - < or > 
 - < equals arg1 = " $ { sun . arch . data . model } " arg2 = " 64 " trim = " true " / > 
 - < equals arg1 = " $ { com . ibm . vm . bitmode } " arg2 = " 64 " trim = " true " / > 
 - < os arch = " x86 _ 64 " / > 
 - < os arch = " amd64 " / > 
 - < os arch = " em64t " / > 
 - < os arch = " sparcv9 " / > 
 - < os arch = " ppc64 " / > 
 - < os arch = " ppc64le " / > 
 - < os arch = " ia64 " / > 
 - < os arch = " aarch64 " / > 
 - < os arch = " mips64el " / > 
 - < os arch = " s390x " / > 
 - < / or > 
 - < / and > 
 - < / condition > 
 - < condition property = " ld . preload " value = " LD _ PRELOAD _ 64 " else = " LD _ PRELOAD " > 
 - < and > 
 - < os name = " SunOS " / > 
 - < equals arg1 = " $ { vmopt . arch } " arg2 = " $ { vm . 64 } " / > 
 - < / and > 
 - < / condition > 
 
 < property name = " classes " location = " $ { build } / classes " / > 
 < property name = " eclipse . classes " location = " build . eclipse / classes " / > 
 @ @ - 239 , 62 + 216 , 62 @ @ 
 
 < ! - - Add other supported platforms here - - > 
 < condition property = " jre . arch " value = " x86 " > 
 - < matches pattern = " ( i [ 3456 ] 86 | pentium ) " string = " $ { os . arch } " / > 
 + < matches pattern = " ( i [ 3456 ] 86 | pentium ) " string = " $ { build . os . arch } " / > 
 < / condition > 
 < condition property = " jre . arch " value = " x86 - 64 " > 
 - < matches pattern = " ( x86 _ 64 | amd64 | em64t ) " string = " $ { os . arch } " / > 
 + < matches pattern = " ( x86 _ 64 | amd64 | em64t ) " string = " $ { build . os . arch } " / > 
 < / condition > 
 < condition property = " jre . arch " value = " ppc " > 
 - < matches pattern = " ( powerpc | power ) " string = " $ { os . arch } " / > 
 + < matches pattern = " ( powerpc | power ) " string = " $ { build . os . arch } " / > 
 < / condition > 
 < condition property = " jre . arch " value = " ppc64le " > 
 < or > 
 - 	 < matches pattern = " ( powerpc64le | power64le | ppc64le ) " string = " $ { os . arch } " / > 
 + 	 < matches pattern = " ( powerpc64le | power64le | ppc64le ) " string = " $ { build . os . arch } " / > 
 	 < and > 
 - 	 < matches pattern = " ( powerpc64 | power64 | ppc64 ) " string = " $ { os . arch } " / > 
 - 	 < matches pattern = " little " string = " $ { sun . cpu . endian } " / > 
 + 	 < matches pattern = " ( powerpc64 | power64 | ppc64 ) " string = " $ { build . os . arch } " / > 
 + 	 < matches pattern = " little " string = " $ { build . os . endianess } " / > 
 	 < / and > 
 < / or > 
 < / condition > 
 < condition property = " jre . arch " value = " ppc64 " > 
 - < matches pattern = " ( powerpc64 | power64 ) " string = " $ { os . arch } " / > 
 + < matches pattern = " ( powerpc64 | power64 ) " string = " $ { build . os . arch } " / > 
 < / condition > 
 < condition property = " jre . arch " value = " armel " > 
 < and > 
 - < matches pattern = " arm " string = " $ { os . arch } " / > 
 + < matches pattern = " arm " string = " $ { build . os . arch } " / > 
 < matches pattern = " true " string = " $ { build . isArmSoftFloat } " / > 
 < / and > 
 < / condition > 
 
 - < property name = " jre . arch " value = " $ { os . arch } " / > 
 + < property name = " jre . arch " value = " $ { build . os . arch } " / > 
 
 < condition property = " os . prefix " value = " linux - $ { jre . arch } " > 
 - < os name = " Linux " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " Linux " / > 
 < / condition > 
 < condition property = " os . prefix " value = " aix - $ { jre . arch } " > 
 - < os name = " AIX " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " AIX " / > 
 < / condition > 
 < condition property = " os . prefix " value = " win32 - $ { jre . arch } " > 
 - < os family = " windows " / > 
 + < equals arg1 = " $ { build . os . family } " arg2 = " windows " / > 
 < / condition > 
 < ! - - Darwin builds are universal , no arch required - - > 
 < condition property = " os . prefix " value = " darwin " > 
 - < os family = " mac " / > 
 + < equals arg1 = " $ { build . os . family } " arg2 = " mac " / > 
 < / condition > 
 < condition property = " os . prefix " value = " sunos - $ { jre . arch } " > 
 - < os name = " SunOS " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " SunOS " / > 
 < / condition > 
 < condition property = " os . prefix " value = " freebsd - $ { jre . arch } " > 
 - < os name = " FreeBSD " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " FreeBSD " / > 
 < / condition > 
 < condition property = " os . prefix " value = " openbsd - $ { jre . arch } " > 
 - 	 < os name = " OpenBSD " / > 
 + 	 < equals arg1 = " $ { build . os . name } " arg2 = " OpenBSD " / > 
 < / condition > 
 < condition property = " os . prefix " value = " netbsd - $ { jre . arch } " > 
 - < os name = " NetBSD " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " NetBSD " / > 
 < / condition > 
 < condition property = " os . prefix " value = " kfreebsd - $ { jre . arch } " > 
 - < os name = " GNU / kFreeBSD " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " GNU / kFreeBSD " / > 
 < / condition > 
 < fail unless = " os . prefix " message = " OS / arch not supported ( $ { os . name } / $ { jre . arch } ) , edit build . xml and native / Makefile to add it . " / > 
 < ! - - Keep all natives separate - - > 
 @ @ - 314 , 16 + 291 , 19 @ @ 
 value = " $ { java . home } / lib / $ { libarch } / libjsig . so " else = " " > 
 < available file = " $ { java . home } / lib / $ { libarch } / libjsig . so " / > 
 < / condition > 
 - < condition property = " ld . preload . name " value = " $ { ld . preload } " else = " IGNORE " > 
 + < condition property = " ld . preload . name " value = " LD _ PRELOAD " else = " IGNORE " > 
 < not > < equals arg1 = " $ { libjsig } " arg2 = " " / > < / not > 
 < / condition > 
 < property name = " native . jar " value = " $ { os . prefix } . jar " / > 
 < property name = " build . native " location = " $ { build } / $ { native . subdir } " / > 
 + < property name = " build . headers " location = " $ { build } / headers " / > 
 < property name = " build . aar " location = " $ { build } / aar " / > 
 - < property name = " md5 . file " location = " $ { build . native } / jni . checksum " / > 
 + < property name = " md5 . file " location = " $ { build . headers } / jni . checksum " / > 
 + < property name = " jni . info " location = " $ { build . headers } / jni . properties " / > 
 
 < mkdir dir = " $ { build } " / > 
 < mkdir dir = " $ { build . native } " / > 
 + < mkdir dir = " $ { build . headers } " / > 
 < mkdir dir = " $ { classes } " / > 
 < mkdir dir = " $ { test . classes } " / > 
 < mkdir dir = " $ { reports } " / > 
 @ @ - 336 , 10 + 316 , 11 @ @ 
 < echo > java . home = $ { java . home } < / echo > 
 < echo > java . library . path = $ { java . library . path } < / echo > 
 < echo > os . prefix = $ { os . prefix } < / echo > 
 - < echo > os . name = $ { os . name } < / echo > 
 - < echo > os . arch = $ { os . arch } ( $ { sun . cpu . endian } ) < / echo > 
 + < echo > os . name = $ { build . os . name } < / echo > 
 + < echo > os . arch = $ { build . os . arch } ( $ { build . os . endianess } ) < / echo > 
 < echo > build = $ { build } < / echo > 
 < echo > build . native = $ { build . native } < / echo > 
 + < echo > build . headers = $ { build . headers } < / echo > 
 < echo > build . aar = $ { build . aar } < / echo > 
 
 < / target > 
 @ @ - 377 , 7 + 358 , 8 @ @ 
 includeantruntime = " false " 
 deprecation = " on " 
 debug = " $ { debug } " 
 - encoding = " UTF - 8 " > 
 + encoding = " UTF - 8 " 
 + nativeheaderdir = " $ { build . headers } " > 
 < src refid = " src . path " / > 
 < / javac > 
 < / target > 
 @ @ - 665 , 11 + 647 , 6 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 < / target > 
 
 < target name = " javah " depends = " compile " unless = " - native " > 
 - < javah classpath = " $ { classes } " destdir = " $ { build . native } " force = " yes " > 
 - < class name = " com . sun . jna . Function " / > 
 - < class name = " com . sun . jna . Native " / > 
 - < class name = " com . sun . jna . win32 . DLLCallback " / > 
 - < / javah > 
 < condition property = " grep " value = " / usr / sfw / bin / ggrep " > 
 < os name = " SunOS " / > 
 < / condition > 
 @ @ - 681 , 12 + 658 , 12 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 < os name = " AIX " / > 
 < / condition > 
 < ! - - args are based on GNU grep , other versions may differ - - > 
 - < apply dir = " $ { build . native } " executable = " $ { grep } " parallel = " true " 
 + < apply dir = " $ { build . headers } " executable = " $ { grep } " parallel = " true " 
 failonerror = " $ { grep . required } " relative = " true " output = " $ { md5 . file } " > 
 < arg value = " - A " / > 
 < arg value = " 1 " / > 
 < arg value = " JNIEXPORT " / > 
 - < fileset dir = " $ { build . native } " includes = " * . h " / > 
 + < fileset dir = " $ { build . headers } " includes = " * . h " / > 
 < / apply > 
 < ! - - Clean up gcj javah output to match that of Sun ' s javah - - > 
 < fixcrlf file = " $ { md5 . file } " eol = " unix " / > 
 @ @ - 703 , 6 + 680 , 10 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 	 	 flags = " m " 
 file = " $ { md5 . file } " / > 
 < checksum property = " md5 " file = " $ { md5 . file } " / > 
 + < propertyfile file = " $ { jni . info } " > 
 + < entry key = " checksum " value = " $ { md5 } " / > 
 + < entry key = " version " value = " $ { jni . version } " / > 
 + < / propertyfile > 
 < condition property = " jni . valid " value = " true " > 
 < or > 
 < os name = " AIX " / > 
 @ @ - 755 , 7 + 736 , 7 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 < target name = " : rsrc " > 
 < condition property = " - rsrc " > 
 < and > 
 - < not > < os family = " windows " / > < / not > 
 + < not > < equals arg1 = " $ { build . os . family } " arg2 = " windows " / > < / not > 
 < not > < equals arg1 = " $ { os . prefix } " arg2 = " w32ce - arm " / > < / not > 
 < / and > 
 < / condition > 
 @ @ - 790 , 16 + 771 , 8 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 file = " $ { rsrc } " byline = " true " / > 
 < / target > 
 
 - < target name = " native " depends = " - enable - native , - setup , javah , - native - api - check , rsrc " unless = " - native " 
 - description = " Build native libraries . Use ' ant - DCC = xxx ' to build using a compiler other than gcc " > 
 + < target name = " - prepare - native " depends = " - setup , rsrc " > 
 < property name = " comment " value = " # auto - generated by ant " / > 
 - < replaceregexp match = " ^ JNA _ JNI _ VERSION = . * " 
 - replace = " JNA _ JNI _ VERSION = $ { jni . version } $ { comment } " 
 - file = " native / Makefile " byline = " true " / > 
 - < replaceregexp match = " ^ CHECKSUM = . * " 
 - replace = " CHECKSUM = $ { jni . md5 } $ { comment } " 
 - file = " native / Makefile " byline = " true " / > 
 - < ! - - Handle cross - compilation - - > 
 < condition property = " make . OS " value = " OS = w32ce " > 
 < equals arg1 = " $ { os . prefix } " arg2 = " w32ce - arm " / > 
 < / condition > 
 @ @ - 840 , 7 + 813 , 7 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 < / condition > 
 < ! - - ensure ARCH is set properly for 64 - bit capable platforms - - > 
 < ! - - use ANT _ OPTS = - d64 / - d32 to build 64 - bit / 32 - bit if not the platform default - - > 
 - < property name = " ARCH " value = " $ { os . arch } " / > 
 + < property name = " ARCH " value = " $ { build . os . arch } " / > 
 < condition property = " make . USE _ MSVC " value = " USE _ MSVC = $ { USE _ MSVC } " else = " IGNORE = " > 
 < isset property = " USE _ MSVC " / > 
 < / condition > 
 @ @ - 899 , 24 + 872 , 24 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 < ! - - Windows ' drive letters and spaces in absolute paths wreak havoc on 
 make - - > 
 < condition property = " make . BUILD " value = " BUILD = . . / $ { build } / $ { native . subdir } " else = " BUILD = $ { build . native } " > 
 - < os family = " windows " / > 
 + < equals arg1 = " $ { build . os . family } " arg2 = " windows " / > 
 < / condition > 
 < condition property = " make . PATH " value = " PATH = / opt / csw / bin : / usr / sfw / bin : / usr / bin : / usr / ccs / bin " else = " IGNORE = " > 
 - < os name = " SunOS " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " SunOS " / > 
 < / condition > 
 < condition property = " make " value = " / usr / sfw / bin / gmake " > 
 < and > 
 - < os name = " SunOS " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " SunOS " / > 
 < available file = " / usr / sfw / bin / gmake " / > 
 < / and > 
 < / condition > 
 < condition property = " make " value = " gmake " > 
 < or > 
 - < os name = " FreeBSD " / > 
 - < os name = " OpenBSD " / > 
 - < os name = " NetBSD " / > 
 - < os name = " SunOS " / > 
 - < os name = " AIX " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " FreeBSD " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " OpenBSD " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " NetBSD " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " SunOS " / > 
 + < equals arg1 = " $ { build . os . name } " arg2 = " AIX " / > 
 < / or > 
 < / condition > 
 < ! - - Allow explicit override of make variables - - > 
 @ @ - 928 , 10 + 901 , 73 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 
 < ! - - Default make program - - > 
 < property name = " make " value = " make " / > 
 + < / target > 
 
 + < target name = " native - build - package " depends = " javah , - native - api - check , - prepare - native " > 
 + < echo file = " $ { build } / build . sh " > # ! / bin / sh 
 + cwd = $ ( pwd ) 
 + if [ - z " $ JAVA _ HOME " ] ; then 
 + echo " Please make sure JAVA _ HOME is set " 
 + exit 1 
 + fi 
 + cd native 
 + $ { make } \ 
 + JAVA _ HOME = $ JAVA _ HOME \ 
 + JAVAH = $ cwd / headers \ 
 + DEBUG = $ { debug . native } \ 
 + CFLAGS _ EXTRA = $ { cflags _ extra . native } \ 
 + DYNAMIC _ LIBFFI = $ { dynlink . native } \ 
 + $ { make . CC } \ 
 + $ { make . USE _ MSVC } \ 
 + BUILD = . . / build \ 
 + $ { make . SDKROOT } \ 
 + $ { make . ARCH } \ 
 + $ { make . PATH } \ 
 + $ { make . OS } \ 
 + $ { make . OPTS } \ 
 + JNA _ JNI _ VERSION = $ { jni . version } \ 
 + CHECKSUM = $ { jni . md5 } 
 + cd . . 
 + cd build 
 + zip . . / $ { os . prefix } . jar libjnidispatch . so jnidispatch . dll 
 + cd . . 
 + < / echo > 
 + < jar jarfile = " $ { build } / $ { os . prefix } . jar " > 
 + < manifest > 
 + < attribute name = " Implementation - Version " value = " $ { jni . version } b $ { jni . build } " / > 
 + < attribute name = " Specification - Version " value = " $ { jni . version } " / > 
 + < / manifest > 
 + < / jar > 
 + < zip destfile = " $ { build } / build - package - $ { os . prefix } - $ { jni . version } . zip " > 
 + < zipfileset dir = " native " 
 + prefix = " build - package - $ { os . prefix } - $ { jni . version } / native " 
 + > 
 + < ! - - Exclude generated files from the ZIP - - > 
 + < exclude name = " libffi / autom4te . cache / * * " / > 
 + < exclude name = " libffi / Makefile . in " / > 
 + < exclude name = " libffi / aclocal . m4 " / > 
 + < exclude name = " libffi / compile " / > 
 + < exclude name = " libffi / config . guess " / > 
 + < exclude name = " libffi / config . sub " / > 
 + < exclude name = " libffi / configure " / > 
 + < exclude name = " libffi / depcomp " / > 
 + < exclude name = " libffi / fficonfig . h . in " / > 
 + < exclude name = " libffi / install - sh " / > 
 + < exclude name = " libffi / ltmain . sh " / > 
 + < exclude name = " libffi / mdate - sh " / > 
 + < exclude name = " libffi / missing " / > 
 + < / zipfileset > 
 + < zipfileset dir = " $ { build } " includes = " $ { os . prefix } . jar " prefix = " build - package - $ { os . prefix } - $ { jni . version } " / > 
 + < zipfileset dir = " $ { build } " includes = " build . sh " prefix = " build - package - $ { os . prefix } - $ { jni . version } " / > 
 + < zipfileset dir = " build / headers " prefix = " build - package - $ { os . prefix } - $ { jni . version } / headers " / > 
 + < / zip > 
 + < / target > 
 + 
 + < target name = " native " depends = " - enable - native , javah , - native - api - check , - prepare - native " unless = " - native " 
 + description = " Build native libraries . Use ' ant - DCC = xxx ' to build using a compiler other than gcc " > 
 < exec executable = " $ { make } " dir = " $ { native } " failonerror = " true " > 
 < arg value = " JAVA _ HOME = $ { jdk . home } " / > 
 - < arg value = " JAVAH = $ { build . native } " / > 
 + < arg value = " JAVAH = $ { build . headers } " / > 
 < arg value = " DEBUG = $ { debug . native } " / > 
 < arg value = " CFLAGS _ EXTRA = $ { cflags _ extra . native } " / > 
 < arg value = " DYNAMIC _ LIBFFI = $ { dynlink . native } " / > 
 @ @ - 1132 , 7 + 1168 , 6 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 < sysproperty key = " jna . nosys " value = " true " / > 
 < sysproperty key = " jna . builddir " file = " $ { build } " / > 
 < sysproperty key = " jna . nativedir " file = " $ { build . native } " / > 
 - < jvmarg value = " $ { vmopt . arch } " / > 
 < classpath > < path refid = " test . runpath " / > < / classpath > 
 < formatter type = " brief " usefile = " false " / > 
 < formatter type = " xml " / > 
 diff - - git a / native / Makefile b / native / Makefile 
 index 6f9ad25 . . 1bea2dc 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 336 , 7 + 336 , 9 @ @ endif 
 ifeq ( $ ( CC ) , gcc ) 
 GCC _ MAJOR _ VERSION = $ ( shell gcc - dumpversion | cut - f 1 - d ' . ' ) 
 ifneq ( $ ( GCC _ MAJOR _ VERSION ) , 4 ) 
 - 	 LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered - Wno - unused - variable 
 + 	 ifneq ( $ ( GCC _ MAJOR _ VERSION ) , 3 ) 
 + 	 LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered - Wno - unused - variable 
 + 	 endif 
 endif 
 else 
 LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered - Wno - unused - variable 
 @ @ - 478 , 7 + 480 , 7 @ @ $ ( FFI _ LIB ) : 
 	 @ mkdir - p $ ( FFI _ BUILD ) 
 	 @ if [ ! - f $ ( FFI _ SRC ) / configure ] ; then \ 
 	 echo " Generating configure " ; \ 
 - 	 ( cd $ ( FFI _ SRC ) ; . / autogen . sh ) ; \ 
 + 	 ( cd $ ( FFI _ SRC ) ; / bin / sh autogen . sh ) ; \ 
 	 fi 
 	 @ if [ ! - f $ ( FFI _ BUILD ) / Makefile ] ; then \ 
 	 echo " Configuring libffi ( $ ( ARCH ) ) " ; \ 
 diff - - git a / src / com / sun / jna / Function . java b / src / com / sun / jna / Function . java 
 index 2d31827 . . 300a982 100644 
 - - - a / src / com / sun / jna / Function . java 
 + + + b / src / com / sun / jna / Function . java 
 @ @ - 60 , 17 + 60 , 23 @ @ public class Function extends Pointer { 
 } 
 
 / * * Maximum number of arguments supported by a JNA function call . * / 
 + @ java . lang . annotation . Native 
 public static final int MAX _ NARGS = 256 ; 
 
 / * * Standard C calling convention . * / 
 + @ java . lang . annotation . Native 
 public static final int C _ CONVENTION = 0 ; 
 / * * First alternate convention ( currently used only for w32 stdcall ) . * / 
 + @ java . lang . annotation . Native 
 public static final int ALT _ CONVENTION = 0x3F ; 
 
 + @ java . lang . annotation . Native 
 private static final int MASK _ CC = 0x3F ; 
 / * * Whether to throw an exception if last error is non - zero after call . * / 
 + @ java . lang . annotation . Native 
 public static final int THROW _ LAST _ ERROR = 0x40 ; 
 / * * Mask for number of fixed args ( 1 - 3 ) for varargs calls . * / 
 + @ java . lang . annotation . Native 
 public static final int USE _ VARARGS = 0x180 ; 
 
 static final Integer INTEGER _ TRUE = Integer . valueOf ( - 1 ) ;

NEAREST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index c19c48b . . d0032ee 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 8 , 6 + 8 , 7 @ @ Features 
 * Automatic cleanup of native threads ( based on suggestions from neil smith ) - [ @ twall ] ( https : / / github . com / twall ) . 
 * Add android - arm target ( thanks to ochafik for initial work ) . 
 * Add ` jna . tmpdir ` to override temporary JNA storage location - [ @ twall ] ( https : / / github . com / twall ) . 
 + * Add EXTRA _ MAKE _ OPTS ant property to override make variables - [ @ twall ] ( https : / / github . com / twall ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / build . xml b / build . xml 
 index c87f14c . . 9a3c453 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 622 , 6 + 622 , 10 @ @ osname = macos 
 < os name = " AIX " / > 
 < / or > 
 < / condition > 
 + < ! - - Allow explicit override of make variables - - > 
 + < condition property = " make . OPTS " value = " $ { EXTRA _ MAKE _ OPTS } " else = " IGNORE = " > 
 + < isset property = " EXTRA _ MAKE _ OPTS " / > 
 + < / condition > 
 < ! - - Native resource path within jna . jar - - > 
 < condition property = " native . path " value = " lib / armeabi " else = " com / sun / jna / $ { os . prefix } " > 
 < equals arg1 = " $ { os . prefix } " arg2 = " android - arm " / > 
 @ @ - 642 , 6 + 646 , 7 @ @ osname = macos 
 < arg value = " $ { make . ARCH } " / > 
 < arg value = " $ { make . PATH } " / > 
 < arg value = " $ { make . OS } " / > 
 + < arg line = " $ { make . OPTS } " / > 
 < arg value = " JNA _ JNI _ VERSION = $ { jni . version } " / > 
 < arg value = " CHECKSUM = $ { jni . md5 } " / > 
 < / exec > 
 diff - - git a / native / Makefile b / native / Makefile 
 index 4d4f505 . . 17b740c3 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 # The android build requires the android SDK + NDK for cross - compilation ; 
 # make the tools available on the path and compile with 
 # " ant - Dos . prefix = android - arm " . Put the NDK tools in the path and adjust 
 - # NDK _ PLATFORM below . 
 + # NDK _ PLATFORM below or set it in your environment . 
 # 
 
 # Systems which support POSIX signals may be able to support VM crash 
 @ @ - 113 , 7 + 113 , 7 @ @ RANLIB = arm - linux - androideabi - ranlib 
 STRIP = arm - linux - androideabi - strip - x 
 CDEFINES = - DNO _ JAWT - DNO _ WEAK _ GLOBALS - DFFI _ MMAP _ EXEC _ WRIT = 1 - DFFI _ MMAP _ EXEC _ SELINUX = 0 
 COPT + = - fpic - mthumb - interwork - ffunction - sections - funwind - tables - fstack - protector - fno - short - enums - march = armv5te - mtune = xscale - msoft - float 
 - NDK _ PLATFORM = / Developer / Applications / android - ndk - r7c / platforms / android - 14 
 + NDK _ PLATFORM ? = / Developer / Applications / android - ndk - r7c / platforms / android - 14 
 JAVA _ INCLUDES = 
 CINCLUDES + = - I " $ ( NDK _ PLATFORM ) / arch - arm / usr / include " # - I / usr / include 
 LIBS = - nostdlib - L " $ ( NDK _ PLATFORM ) / arch - arm / usr / lib / " - lgcc - lc - ldl - lm
