BLEU SCORE: 0.009710817572121186

TEST MSG: Add default locale , LCID and LANG to WinNT . javas
GENERATED MSG: Add com . sun . jna . platform . win32 . WinNT . WELL _ KNOWN _ SID _ TYPE , SECURITY _ MAX _ SID _ SIZE and other related SID - related constants .

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> index 26f432a . . adc8111 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> @ @ - 3272 , 4 + 3272 , 351 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> byte SECURITY _ STATIC _ TRACKING = ( byte ) 0 ; <nl> byte BOOLEAN _ TRUE = ( byte ) 1 ; <nl> byte BOOLEAN _ FALSE = ( byte ) 0 ; <nl> + <nl> + / * <nl> + * Primary language IDs . <nl> + * / <nl> + public static final int LANG _ NEUTRAL = 0x00 ; <nl> + public static final int LANG _ INVARIANT = 0x7f ; <nl> + <nl> + public static final int LANG _ AFRIKAANS = 0x36 ; <nl> + public static final int LANG _ ALBANIAN = 0x1c ; <nl> + public static final int LANG _ ARABIC = 0x01 ; <nl> + public static final int LANG _ ARMENIAN = 0x2b ; <nl> + public static final int LANG _ ASSAMESE = 0x4d ; <nl> + public static final int LANG _ AZERI = 0x2c ; <nl> + public static final int LANG _ BASQUE = 0x2d ; <nl> + public static final int LANG _ BELARUSIAN = 0x23 ; <nl> + public static final int LANG _ BENGALI = 0x45 ; <nl> + public static final int LANG _ BULGARIAN = 0x02 ; <nl> + public static final int LANG _ CATALAN = 0x03 ; <nl> + public static final int LANG _ CHINESE = 0x04 ; <nl> + public static final int LANG _ CROATIAN = 0x1a ; <nl> + public static final int LANG _ CZECH = 0x05 ; <nl> + public static final int LANG _ DANISH = 0x06 ; <nl> + public static final int LANG _ DIVEHI = 0x65 ; <nl> + public static final int LANG _ DUTCH = 0x13 ; <nl> + public static final int LANG _ ENGLISH = 0x09 ; <nl> + public static final int LANG _ ESTONIAN = 0x25 ; <nl> + public static final int LANG _ FAEROESE = 0x38 ; <nl> + public static final int LANG _ FARSI = 0x29 ; <nl> + public static final int LANG _ FINNISH = 0x0b ; <nl> + public static final int LANG _ FRENCH = 0x0c ; <nl> + public static final int LANG _ GALICIAN = 0x56 ; <nl> + public static final int LANG _ GEORGIAN = 0x37 ; <nl> + public static final int LANG _ GERMAN = 0x07 ; <nl> + public static final int LANG _ GREEK = 0x08 ; <nl> + public static final int LANG _ GUJARATI = 0x47 ; <nl> + public static final int LANG _ HEBREW = 0x0d ; <nl> + public static final int LANG _ HINDI = 0x39 ; <nl> + public static final int LANG _ HUNGARIAN = 0x0e ; <nl> + public static final int LANG _ ICELANDIC = 0x0f ; <nl> + public static final int LANG _ INDONESIAN = 0x21 ; <nl> + public static final int LANG _ ITALIAN = 0x10 ; <nl> + public static final int LANG _ JAPANESE = 0x11 ; <nl> + public static final int LANG _ KANNADA = 0x4b ; <nl> + public static final int LANG _ KASHMIRI = 0x60 ; <nl> + public static final int LANG _ KAZAK = 0x3f ; <nl> + public static final int LANG _ KONKANI = 0x57 ; <nl> + public static final int LANG _ KOREAN = 0x12 ; <nl> + public static final int LANG _ KYRGYZ = 0x40 ; <nl> + public static final int LANG _ LATVIAN = 0x26 ; <nl> + public static final int LANG _ LITHUANIAN = 0x27 ; <nl> + public static final int LANG _ MACEDONIAN = 0x2f ; / / the Former Yugoslav Republic of Macedonia <nl> + public static final int LANG _ MALAY = 0x3e ; <nl> + public static final int LANG _ MALAYALAM = 0x4c ; <nl> + public static final int LANG _ MANIPURI = 0x58 ; <nl> + public static final int LANG _ MARATHI = 0x4e ; <nl> + public static final int LANG _ MONGOLIAN = 0x50 ; <nl> + public static final int LANG _ NEPALI = 0x61 ; <nl> + public static final int LANG _ NORWEGIAN = 0x14 ; <nl> + public static final int LANG _ ORIYA = 0x48 ; <nl> + public static final int LANG _ POLISH = 0x15 ; <nl> + public static final int LANG _ PORTUGUESE = 0x16 ; <nl> + public static final int LANG _ PUNJABI = 0x46 ; <nl> + public static final int LANG _ ROMANIAN = 0x18 ; <nl> + public static final int LANG _ RUSSIAN = 0x19 ; <nl> + public static final int LANG _ SANSKRIT = 0x4f ; <nl> + public static final int LANG _ SERBIAN = 0x1a ; <nl> + public static final int LANG _ SINDHI = 0x59 ; <nl> + public static final int LANG _ SLOVAK = 0x1b ; <nl> + public static final int LANG _ SLOVENIAN = 0x24 ; <nl> + public static final int LANG _ SPANISH = 0x0a ; <nl> + public static final int LANG _ SWAHILI = 0x41 ; <nl> + public static final int LANG _ SWEDISH = 0x1d ; <nl> + public static final int LANG _ SYRIAC = 0x5a ; <nl> + public static final int LANG _ TAMIL = 0x49 ; <nl> + public static final int LANG _ TATAR = 0x44 ; <nl> + public static final int LANG _ TELUGU = 0x4a ; <nl> + public static final int LANG _ THAI = 0x1e ; <nl> + public static final int LANG _ TURKISH = 0x1f ; <nl> + public static final int LANG _ UKRAINIAN = 0x22 ; <nl> + public static final int LANG _ URDU = 0x20 ; <nl> + public static final int LANG _ UZBEK = 0x43 ; <nl> + public static final int LANG _ VIETNAMESE = 0x2a ; <nl> + <nl> + / * <nl> + * Sublanguage IDs . <nl> + * <nl> + * The name immediately following SUBLANG _ dictates which primary <nl> + * language ID that sublanguage ID can be combined with to form a <nl> + * valid language ID . <nl> + * / <nl> + public static final int SUBLANG _ NEUTRAL = 0x00 ; / / language neutral <nl> + public static final int SUBLANG _ DEFAULT = 0x01 ; / / user default <nl> + public static final int SUBLANG _ SYS _ DEFAULT = 0x02 ; / / system default <nl> + <nl> + public static final int SUBLANG _ ARABIC _ SAUDI _ ARABIA = 0x01 ; / / Arabic ( Saudi Arabia ) <nl> + public static final int SUBLANG _ ARABIC _ IRAQ = 0x02 ; / / Arabic ( Iraq ) <nl> + public static final int SUBLANG _ ARABIC _ EGYPT = 0x03 ; / / Arabic ( Egypt ) <nl> + public static final int SUBLANG _ ARABIC _ LIBYA = 0x04 ; / / Arabic ( Libya ) <nl> + public static final int SUBLANG _ ARABIC _ ALGERIA = 0x05 ; / / Arabic ( Algeria ) <nl> + public static final int SUBLANG _ ARABIC _ MOROCCO = 0x06 ; / / Arabic ( Morocco ) <nl> + public static final int SUBLANG _ ARABIC _ TUNISIA = 0x07 ; / / Arabic ( Tunisia ) <nl> + public static final int SUBLANG _ ARABIC _ OMAN = 0x08 ; / / Arabic ( Oman ) <nl> + public static final int SUBLANG _ ARABIC _ YEMEN = 0x09 ; / / Arabic ( Yemen ) <nl> + public static final int SUBLANG _ ARABIC _ SYRIA = 0x0a ; / / Arabic ( Syria ) <nl> + public static final int SUBLANG _ ARABIC _ JORDAN = 0x0b ; / / Arabic ( Jordan ) <nl> + public static final int SUBLANG _ ARABIC _ LEBANON = 0x0c ; / / Arabic ( Lebanon ) <nl> + public static final int SUBLANG _ ARABIC _ KUWAIT = 0x0d ; / / Arabic ( Kuwait ) <nl> + public static final int SUBLANG _ ARABIC _ UAE = 0x0e ; / / Arabic ( U . A . E ) <nl> + public static final int SUBLANG _ ARABIC _ BAHRAIN = 0x0f ; / / Arabic ( Bahrain ) <nl> + public static final int SUBLANG _ ARABIC _ QATAR = 0x10 ; / / Arabic ( Qatar ) <nl> + public static final int SUBLANG _ AZERI _ LATIN = 0x01 ; / / Azeri ( Latin ) <nl> + public static final int SUBLANG _ AZERI _ CYRILLIC = 0x02 ; / / Azeri ( Cyrillic ) <nl> + public static final int SUBLANG _ CHINESE _ TRADITIONAL = 0x01 ; / / Chinese ( Taiwan ) <nl> + public static final int SUBLANG _ CHINESE _ SIMPLIFIED = 0x02 ; / / Chinese ( PR China ) <nl> + public static final int SUBLANG _ CHINESE _ HONGKONG = 0x03 ; / / Chinese ( Hong Kong S . A . R . , P . R . C . ) <nl> + public static final int SUBLANG _ CHINESE _ SINGAPORE = 0x04 ; / / Chinese ( Singapore ) <nl> + public static final int SUBLANG _ CHINESE _ MACAU = 0x05 ; / / Chinese ( Macau S . A . R . ) <nl> + public static final int SUBLANG _ DUTCH = 0x01 ; / / Dutch <nl> + public static final int SUBLANG _ DUTCH _ BELGIAN = 0x02 ; / / Dutch ( Belgian ) <nl> + public static final int SUBLANG _ ENGLISH _ US = 0x01 ; / / English ( USA ) <nl> + public static final int SUBLANG _ ENGLISH _ UK = 0x02 ; / / English ( UK ) <nl> + public static final int SUBLANG _ ENGLISH _ AUS = 0x03 ; / / English ( Australian ) <nl> + public static final int SUBLANG _ ENGLISH _ CAN = 0x04 ; / / English ( Canadian ) <nl> + public static final int SUBLANG _ ENGLISH _ NZ = 0x05 ; / / English ( New Zealand ) <nl> + public static final int SUBLANG _ ENGLISH _ EIRE = 0x06 ; / / English ( Irish ) <nl> + public static final int SUBLANG _ ENGLISH _ SOUTH _ AFRICA = 0x07 ; / / English ( South Africa ) <nl> + public static final int SUBLANG _ ENGLISH _ JAMAICA = 0x08 ; / / English ( Jamaica ) <nl> + public static final int SUBLANG _ ENGLISH _ CARIBBEAN = 0x09 ; / / English ( Caribbean ) <nl> + public static final int SUBLANG _ ENGLISH _ BELIZE = 0x0a ; / / English ( Belize ) <nl> + public static final int SUBLANG _ ENGLISH _ TRINIDAD = 0x0b ; / / English ( Trinidad ) <nl> + public static final int SUBLANG _ ENGLISH _ ZIMBABWE = 0x0c ; / / English ( Zimbabwe ) <nl> + public static final int SUBLANG _ ENGLISH _ PHILIPPINES = 0x0d ; / / English ( Philippines ) <nl> + public static final int SUBLANG _ FRENCH = 0x01 ; / / French <nl> + public static final int SUBLANG _ FRENCH _ BELGIAN = 0x02 ; / / French ( Belgian ) <nl> + public static final int SUBLANG _ FRENCH _ CANADIAN = 0x03 ; / / French ( Canadian ) <nl> + public static final int SUBLANG _ FRENCH _ SWISS = 0x04 ; / / French ( Swiss ) <nl> + public static final int SUBLANG _ FRENCH _ LUXEMBOURG = 0x05 ; / / French ( Luxembourg ) <nl> + public static final int SUBLANG _ FRENCH _ MONACO = 0x06 ; / / French ( Monaco ) <nl> + public static final int SUBLANG _ GERMAN = 0x01 ; / / German <nl> + public static final int SUBLANG _ GERMAN _ SWISS = 0x02 ; / / German ( Swiss ) <nl> + public static final int SUBLANG _ GERMAN _ AUSTRIAN = 0x03 ; / / German ( Austrian ) <nl> + public static final int SUBLANG _ GERMAN _ LUXEMBOURG = 0x04 ; / / German ( Luxembourg ) <nl> + public static final int SUBLANG _ GERMAN _ LIECHTENSTEIN = 0x05 ; / / German ( Liechtenstein ) <nl> + public static final int SUBLANG _ ITALIAN = 0x01 ; / / Italian <nl> + public static final int SUBLANG _ ITALIAN _ SWISS = 0x02 ; / / Italian ( Swiss ) <nl> + public static final int SUBLANG _ KASHMIRI _ SASIA = 0x02 ; / / Kashmiri ( South Asia ) <nl> + public static final int SUBLANG _ KASHMIRI _ INDIA = 0x02 ; / / For app compatibility only <nl> + public static final int SUBLANG _ KOREAN = 0x01 ; / / Korean ( Extended Wansung ) <nl> + public static final int SUBLANG _ LITHUANIAN = 0x01 ; / / Lithuanian <nl> + public static final int SUBLANG _ MALAY _ MALAYSIA = 0x01 ; / / Malay ( Malaysia ) <nl> + public static final int SUBLANG _ MALAY _ BRUNEI _ DARUSSALAM = 0x02 ; / / Malay ( Brunei Darussalam ) <nl> + public static final int SUBLANG _ NEPALI _ INDIA = 0x02 ; / / Nepali ( India ) <nl> + public static final int SUBLANG _ NORWEGIAN _ BOKMAL = 0x01 ; / / Norwegian ( Bokmal ) <nl> + public static final int SUBLANG _ NORWEGIAN _ NYNORSK = 0x02 ; / / Norwegian ( Nynorsk ) <nl> + public static final int SUBLANG _ PORTUGUESE = 0x02 ; / / Portuguese <nl> + public static final int SUBLANG _ PORTUGUESE _ BRAZILIAN = 0x01 ; / / Portuguese ( Brazilian ) <nl> + public static final int SUBLANG _ SERBIAN _ LATIN = 0x02 ; / / Serbian ( Latin ) <nl> + public static final int SUBLANG _ SERBIAN _ CYRILLIC = 0x03 ; / / Serbian ( Cyrillic ) <nl> + public static final int SUBLANG _ SPANISH = 0x01 ; / / Spanish ( Castilian ) <nl> + public static final int SUBLANG _ SPANISH _ MEXICAN = 0x02 ; / / Spanish ( Mexican ) <nl> + public static final int SUBLANG _ SPANISH _ MODERN = 0x03 ; / / Spanish ( Spain ) <nl> + public static final int SUBLANG _ SPANISH _ GUATEMALA = 0x04 ; / / Spanish ( Guatemala ) <nl> + public static final int SUBLANG _ SPANISH _ COSTA _ RICA = 0x05 ; / / Spanish ( Costa Rica ) <nl> + public static final int SUBLANG _ SPANISH _ PANAMA = 0x06 ; / / Spanish ( Panama ) <nl> + public static final int SUBLANG _ SPANISH _ DOMINICAN _ REPUBLIC = 0x07 ; / / Spanish ( Dominican Republic ) <nl> + public static final int SUBLANG _ SPANISH _ VENEZUELA = 0x08 ; / / Spanish ( Venezuela ) <nl> + public static final int SUBLANG _ SPANISH _ COLOMBIA = 0x09 ; / / Spanish ( Colombia ) <nl> + public static final int SUBLANG _ SPANISH _ PERU = 0x0a ; / / Spanish ( Peru ) <nl> + public static final int SUBLANG _ SPANISH _ ARGENTINA = 0x0b ; / / Spanish ( Argentina ) <nl> + public static final int SUBLANG _ SPANISH _ ECUADOR = 0x0c ; / / Spanish ( Ecuador ) <nl> + public static final int SUBLANG _ SPANISH _ CHILE = 0x0d ; / / Spanish ( Chile ) <nl> + public static final int SUBLANG _ SPANISH _ URUGUAY = 0x0e ; / / Spanish ( Uruguay ) <nl> + public static final int SUBLANG _ SPANISH _ PARAGUAY = 0x0f ; / / Spanish ( Paraguay ) <nl> + public static final int SUBLANG _ SPANISH _ BOLIVIA = 0x10 ; / / Spanish ( Bolivia ) <nl> + public static final int SUBLANG _ SPANISH _ EL _ SALVADOR = 0x11 ; / / Spanish ( El Salvador ) <nl> + public static final int SUBLANG _ SPANISH _ HONDURAS = 0x12 ; / / Spanish ( Honduras ) <nl> + public static final int SUBLANG _ SPANISH _ NICARAGUA = 0x13 ; / / Spanish ( Nicaragua ) <nl> + public static final int SUBLANG _ SPANISH _ PUERTO _ RICO = 0x14 ; / / Spanish ( Puerto Rico ) <nl> + public static final int SUBLANG _ SWEDISH = 0x01 ; / / Swedish <nl> + public static final int SUBLANG _ SWEDISH _ FINLAND = 0x02 ; / / Swedish ( Finland ) <nl> + public static final int SUBLANG _ URDU _ PAKISTAN = 0x01 ; / / Urdu ( Pakistan ) <nl> + public static final int SUBLANG _ URDU _ INDIA = 0x02 ; / / Urdu ( India ) <nl> + public static final int SUBLANG _ UZBEK _ LATIN = 0x01 ; / / Uzbek ( Latin ) <nl> + public static final int SUBLANG _ UZBEK _ CYRILLIC = 0x02 ; / / Uzbek ( Cyrillic ) <nl> + <nl> + / * <nl> + * Sorting IDs . <nl> + * / <nl> + public static final int SORT _ DEFAULT = 0x0 ; / / sorting default <nl> + <nl> + public static final int SORT _ JAPANESE _ XJIS = 0x0 ; / / Japanese XJIS order <nl> + public static final int SORT _ JAPANESE _ UNICODE = 0x1 ; / / Japanese Unicode order <nl> + <nl> + public static final int SORT _ CHINESE _ BIG5 = 0x0 ; / / Chinese BIG5 order <nl> + public static final int SORT _ CHINESE _ PRCP = 0x0 ; / / PRC Chinese Phonetic order <nl> + public static final int SORT _ CHINESE _ UNICODE = 0x1 ; / / Chinese Unicode order <nl> + public static final int SORT _ CHINESE _ PRC = 0x2 ; / / PRC Chinese Stroke Count order <nl> + public static final int SORT _ CHINESE _ BOPOMOFO = 0x3 ; / / Traditional Chinese Bopomofo order <nl> + <nl> + public static final int SORT _ KOREAN _ KSC = 0x0 ; / / Korean KSC order <nl> + public static final int SORT _ KOREAN _ UNICODE = 0x1 ; / / Korean Unicode order <nl> + <nl> + public static final int SORT _ GERMAN _ PHONE _ BOOK = 0x1 ; / / German Phone Book order <nl> + <nl> + public static final int SORT _ HUNGARIAN _ DEFAULT = 0x0 ; / / Hungarian Default order <nl> + public static final int SORT _ HUNGARIAN _ TECHNICAL = 0x1 ; / / Hungarian Technical order <nl> + <nl> + public static final int SORT _ GEORGIAN _ TRADITIONAL = 0x0 ; / / Georgian Traditional order <nl> + public static final int SORT _ GEORGIAN _ MODERN = 0x1 ; / / Georgian Modern order <nl> + <nl> + public static final int NLS _ VALID _ LOCALE _ MASK = 0x000fffff ; <nl> + <nl> + / * * <nl> + * < p > A language ID is a 16 bit value which is the combination of a <nl> + * primary language ID and a secondary language ID . The bits are <nl> + * allocated as follows : < / p > <nl> + * <nl> + * < pre > <nl> + * + - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - + <nl> + * | Sublanguage ID | Primary Language ID | <nl> + * + - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - + <nl> + * 15 10 9 0 bit <nl> + * < / pre > <nl> + * <nl> + * < p > WARNING : This pattern isn ' t always follows , Serbina , Bosnian & Croation for example . < / p > <nl> + * <nl> + * < p > It is recommended that applications test for locale names or actual LCIDs . < / p > <nl> + * <nl> + * < p > Note that the LANG , SUBLANG construction is not always consistent . <nl> + * The named locale APIs ( eg GetLocaleInfoEx ) are recommended . < / p > <nl> + * <nl> + * < p > Language IDs do not exist for all locales < / p > <nl> + * <nl> + * < p > A locale ID is a 32 bit value which is the combination of a <nl> + * language ID , a sort ID , and a reserved area . The bits are <nl> + * allocated as follows : < / p > <nl> + * <nl> + * < pre > <nl> + * + - - - - - - - - - - - - - + - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - + <nl> + * | Reserved | Sort ID | Language ID | <nl> + * + - - - - - - - - - - - - - + - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - + <nl> + * 31 20 19 16 15 0 bit <nl> + * < / pre > <nl> + * <nl> + * < p > WARNING : This pattern isn ' t always followed ( es - ES _ tradnl vs es - ES for example ) < / p > <nl> + * <nl> + * < p > It is recommended that applications test for locale names or actual LCIDs . < / p > <nl> + * / <nl> + public static final class LocaleMacros { <nl> + private static final int _ MAKELCID ( int lgid , int srtid ) { <nl> + return ( srtid < < 16 ) | lgid ; <nl> + } <nl> + <nl> + / * * <nl> + * construct the locale id from a language id and a sort id . <nl> + * <nl> + * @ param lgid <nl> + * @ param srtid <nl> + * @ return <nl> + * / <nl> + public static final LCID MAKELCID ( int lgid , int srtid ) { <nl> + return new LCID ( _ MAKELCID ( lgid , srtid ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * construct the locale id from a language id , sort id , and sort version . <nl> + * <nl> + * @ param lgid <nl> + * @ param srtid <nl> + * @ param ver <nl> + * @ return <nl> + * / <nl> + public static final LCID MAKESORTLCID ( int lgid , int srtid , int ver ) { <nl> + return new LCID ( _ MAKELCID ( lgid , srtid ) | ( ver < < 20 ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * extract the language id from a locale id . <nl> + * <nl> + * @ param lcid <nl> + * @ return <nl> + * / <nl> + public static final int LANGIDFROMLCID ( LCID lcid ) { <nl> + return lcid . intValue ( ) & 0xFFFF ; <nl> + } <nl> + <nl> + / * * <nl> + * extract the sort id from a locale id . <nl> + * <nl> + * @ param lcid <nl> + * @ return <nl> + * / <nl> + public static final int SORTIDFROMLCID ( LCID lcid ) { <nl> + return ( lcid . intValue ( ) > > > 16 ) & 0xf ; <nl> + } <nl> + <nl> + / * * <nl> + * extract the sort version from a locale id . <nl> + * <nl> + * @ param lcid <nl> + * @ return <nl> + * / <nl> + public static final int SORTVERSIONFROMLCID ( LCID lcid ) { <nl> + return ( lcid . intValue ( ) > > > 20 ) & 0xf ; <nl> + } <nl> + <nl> + / * * <nl> + * Construct language id from a primary language id and a sublanguage id . <nl> + * <nl> + * @ param p Language ID <nl> + * @ param s Sublanguage ID <nl> + * @ return <nl> + * / <nl> + public static final int MAKELANGID ( int p , int s ) { <nl> + return ( s < < 10 ) | ( p & 0xFFFF ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Extract primary language id from a language id . <nl> + * <nl> + * @ param lgid Language ID <nl> + * @ return <nl> + * / <nl> + public static final int PRIMARYLANGID ( int lgid ) { <nl> + return lgid & 0x3ff ; <nl> + } <nl> + <nl> + / * * <nl> + * Extract sublanguage id from a language id . <nl> + * <nl> + * @ param lgid Language ID <nl> + * @ return <nl> + * / <nl> + public static final int SUBLANGID ( int lgid ) { <nl> + return ( lgid & 0xFFFF ) > > > 10 ; <nl> + } <nl> + } <nl> + <nl> + public static final int LANG _ SYSTEM _ DEFAULT = LocaleMacros . MAKELANGID ( LANG _ NEUTRAL , SUBLANG _ SYS _ DEFAULT ) ; <nl> + public static final int LANG _ USER _ DEFAULT = LocaleMacros . MAKELANGID ( LANG _ NEUTRAL , SUBLANG _ DEFAULT ) ; <nl> + <nl> + public static final LCID LOCALE _ SYSTEM _ DEFAULT = LocaleMacros . MAKELCID ( LANG _ SYSTEM _ DEFAULT , SORT _ DEFAULT ) ; <nl> + public static final LCID LOCALE _ USER _ DEFAULT = LocaleMacros . MAKELCID ( LANG _ USER _ DEFAULT , SORT _ DEFAULT ) ; <nl> + <nl> + public static final LCID LOCALE _ NEUTRAL = LocaleMacros . MAKELCID ( LocaleMacros . MAKELANGID ( LANG _ NEUTRAL , SUBLANG _ NEUTRAL ) , SORT _ DEFAULT ) ; <nl> + <nl> + public static final LCID LOCALE _ INVARIANT = LocaleMacros . MAKELCID ( LocaleMacros . MAKELANGID ( LANG _ INVARIANT , SUBLANG _ NEUTRAL ) , SORT _ DEFAULT ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / release - notes . html b / jnalib / release - notes . html <nl> index f13d929 . . 7799567 100755 <nl> - - - a / jnalib / release - notes . html <nl> + + + b / jnalib / release - notes . html <nl> @ @ - 37 , 6 + 37 , 7 @ @ <nl> < / ul > <nl> < h3 > Bug Fixes < / h3 > <nl> < ul > <nl> + < li > Provide String . replace for 1 . 4 compatibility . <nl> < li > Avoid allocating memory when Structure is provided a pointer in the ctor . <nl> < li > Ensure proper value returned in Pointer . getValue ( ) for non - null , unchanged <nl> NIO Buffer values . <nl> diff - - git a / jnalib / src / com / sun / jna / Native . java b / jnalib / src / com / sun / jna / Native . java <nl> index 834d120 . . 496686a 100644 <nl> - - - a / jnalib / src / com / sun / jna / Native . java <nl> + + + b / jnalib / src / com / sun / jna / Native . java <nl> @ @ - 1113 , 7 + 1113 , 25 @ @ public final class Native { <nl> if ( cls = = float . class ) return " F " ; <nl> if ( cls = = double . class ) return " D " ; <nl> } <nl> - return " L " + cls . getName ( ) . replace ( " . " , " / " ) + " ; " ; <nl> + return " L " + replace ( " . " , " / " , cls . getName ( ) ) + " ; " ; <nl> + } <nl> + <nl> + / / No String . replace available in 1 . 4 <nl> + static String replace ( String s1 , String s2 , String str ) { <nl> + StringBuffer buf = new StringBuffer ( ) ; <nl> + while ( true ) { <nl> + int idx = str . indexOf ( s1 ) ; <nl> + if ( idx = = - 1 ) { <nl> + buf . append ( str ) ; <nl> + break ; <nl> + } <nl> + else { <nl> + buf . append ( str . substring ( 0 , idx ) ) ; <nl> + buf . append ( s2 ) ; <nl> + str = str . substring ( idx + s1 . length ( ) ) ; <nl> + } <nl> + } <nl> + return buf . toString ( ) ; <nl> } <nl> <nl> private static final int CVT _ UNSUPPORTED = - 1 ; <nl> diff - - git a / jnalib / test / com / sun / jna / NativeTest . java b / jnalib / test / com / sun / jna / NativeTest . java <nl> index 1d35635 . . 7fc316a 100644 <nl> - - - a / jnalib / test / com / sun / jna / NativeTest . java <nl> + + + b / jnalib / test / com / sun / jna / NativeTest . java <nl> @ @ - 293 , 6 + 293 , 13 @ @ public class NativeTest extends TestCase { <nl> Native . getTypeMapper ( TestCallback . class ) ) ; <nl> } <nl> <nl> + public void testStringReplace ( ) { <nl> + assertEquals ( " Bad replace " , " abcdefg " , Native . replace ( " z " , " a " , " zbcdefg " ) ) ; <nl> + assertEquals ( " Bad replace " , " abcdefg " , Native . replace ( " z " , " g " , " abcdefz " ) ) ; <nl> + assertEquals ( " Bad replace " , " abcdefg " , Native . replace ( " z " , " d " , " abczefg " ) ) ; <nl> + assertEquals ( " Bad replace " , " abcaefa " , Native . replace ( " z " , " a " , " zbczefz " ) ) ; <nl> + } <nl> + <nl> public static void main ( String [ ] args ) { <nl> junit . textui . TestRunner . run ( NativeTest . class ) ; <nl> }

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 index 26f432a . . adc8111 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 @ @ - 3272 , 4 + 3272 , 351 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 byte SECURITY _ STATIC _ TRACKING = ( byte ) 0 ; 
 byte BOOLEAN _ TRUE = ( byte ) 1 ; 
 byte BOOLEAN _ FALSE = ( byte ) 0 ; 
 + 
 + / * 
 + * Primary language IDs . 
 + * / 
 + public static final int LANG _ NEUTRAL = 0x00 ; 
 + public static final int LANG _ INVARIANT = 0x7f ; 
 + 
 + public static final int LANG _ AFRIKAANS = 0x36 ; 
 + public static final int LANG _ ALBANIAN = 0x1c ; 
 + public static final int LANG _ ARABIC = 0x01 ; 
 + public static final int LANG _ ARMENIAN = 0x2b ; 
 + public static final int LANG _ ASSAMESE = 0x4d ; 
 + public static final int LANG _ AZERI = 0x2c ; 
 + public static final int LANG _ BASQUE = 0x2d ; 
 + public static final int LANG _ BELARUSIAN = 0x23 ; 
 + public static final int LANG _ BENGALI = 0x45 ; 
 + public static final int LANG _ BULGARIAN = 0x02 ; 
 + public static final int LANG _ CATALAN = 0x03 ; 
 + public static final int LANG _ CHINESE = 0x04 ; 
 + public static final int LANG _ CROATIAN = 0x1a ; 
 + public static final int LANG _ CZECH = 0x05 ; 
 + public static final int LANG _ DANISH = 0x06 ; 
 + public static final int LANG _ DIVEHI = 0x65 ; 
 + public static final int LANG _ DUTCH = 0x13 ; 
 + public static final int LANG _ ENGLISH = 0x09 ; 
 + public static final int LANG _ ESTONIAN = 0x25 ; 
 + public static final int LANG _ FAEROESE = 0x38 ; 
 + public static final int LANG _ FARSI = 0x29 ; 
 + public static final int LANG _ FINNISH = 0x0b ; 
 + public static final int LANG _ FRENCH = 0x0c ; 
 + public static final int LANG _ GALICIAN = 0x56 ; 
 + public static final int LANG _ GEORGIAN = 0x37 ; 
 + public static final int LANG _ GERMAN = 0x07 ; 
 + public static final int LANG _ GREEK = 0x08 ; 
 + public static final int LANG _ GUJARATI = 0x47 ; 
 + public static final int LANG _ HEBREW = 0x0d ; 
 + public static final int LANG _ HINDI = 0x39 ; 
 + public static final int LANG _ HUNGARIAN = 0x0e ; 
 + public static final int LANG _ ICELANDIC = 0x0f ; 
 + public static final int LANG _ INDONESIAN = 0x21 ; 
 + public static final int LANG _ ITALIAN = 0x10 ; 
 + public static final int LANG _ JAPANESE = 0x11 ; 
 + public static final int LANG _ KANNADA = 0x4b ; 
 + public static final int LANG _ KASHMIRI = 0x60 ; 
 + public static final int LANG _ KAZAK = 0x3f ; 
 + public static final int LANG _ KONKANI = 0x57 ; 
 + public static final int LANG _ KOREAN = 0x12 ; 
 + public static final int LANG _ KYRGYZ = 0x40 ; 
 + public static final int LANG _ LATVIAN = 0x26 ; 
 + public static final int LANG _ LITHUANIAN = 0x27 ; 
 + public static final int LANG _ MACEDONIAN = 0x2f ; / / the Former Yugoslav Republic of Macedonia 
 + public static final int LANG _ MALAY = 0x3e ; 
 + public static final int LANG _ MALAYALAM = 0x4c ; 
 + public static final int LANG _ MANIPURI = 0x58 ; 
 + public static final int LANG _ MARATHI = 0x4e ; 
 + public static final int LANG _ MONGOLIAN = 0x50 ; 
 + public static final int LANG _ NEPALI = 0x61 ; 
 + public static final int LANG _ NORWEGIAN = 0x14 ; 
 + public static final int LANG _ ORIYA = 0x48 ; 
 + public static final int LANG _ POLISH = 0x15 ; 
 + public static final int LANG _ PORTUGUESE = 0x16 ; 
 + public static final int LANG _ PUNJABI = 0x46 ; 
 + public static final int LANG _ ROMANIAN = 0x18 ; 
 + public static final int LANG _ RUSSIAN = 0x19 ; 
 + public static final int LANG _ SANSKRIT = 0x4f ; 
 + public static final int LANG _ SERBIAN = 0x1a ; 
 + public static final int LANG _ SINDHI = 0x59 ; 
 + public static final int LANG _ SLOVAK = 0x1b ; 
 + public static final int LANG _ SLOVENIAN = 0x24 ; 
 + public static final int LANG _ SPANISH = 0x0a ; 
 + public static final int LANG _ SWAHILI = 0x41 ; 
 + public static final int LANG _ SWEDISH = 0x1d ; 
 + public static final int LANG _ SYRIAC = 0x5a ; 
 + public static final int LANG _ TAMIL = 0x49 ; 
 + public static final int LANG _ TATAR = 0x44 ; 
 + public static final int LANG _ TELUGU = 0x4a ; 
 + public static final int LANG _ THAI = 0x1e ; 
 + public static final int LANG _ TURKISH = 0x1f ; 
 + public static final int LANG _ UKRAINIAN = 0x22 ; 
 + public static final int LANG _ URDU = 0x20 ; 
 + public static final int LANG _ UZBEK = 0x43 ; 
 + public static final int LANG _ VIETNAMESE = 0x2a ; 
 + 
 + / * 
 + * Sublanguage IDs . 
 + * 
 + * The name immediately following SUBLANG _ dictates which primary 
 + * language ID that sublanguage ID can be combined with to form a 
 + * valid language ID . 
 + * / 
 + public static final int SUBLANG _ NEUTRAL = 0x00 ; / / language neutral 
 + public static final int SUBLANG _ DEFAULT = 0x01 ; / / user default 
 + public static final int SUBLANG _ SYS _ DEFAULT = 0x02 ; / / system default 
 + 
 + public static final int SUBLANG _ ARABIC _ SAUDI _ ARABIA = 0x01 ; / / Arabic ( Saudi Arabia ) 
 + public static final int SUBLANG _ ARABIC _ IRAQ = 0x02 ; / / Arabic ( Iraq ) 
 + public static final int SUBLANG _ ARABIC _ EGYPT = 0x03 ; / / Arabic ( Egypt ) 
 + public static final int SUBLANG _ ARABIC _ LIBYA = 0x04 ; / / Arabic ( Libya ) 
 + public static final int SUBLANG _ ARABIC _ ALGERIA = 0x05 ; / / Arabic ( Algeria ) 
 + public static final int SUBLANG _ ARABIC _ MOROCCO = 0x06 ; / / Arabic ( Morocco ) 
 + public static final int SUBLANG _ ARABIC _ TUNISIA = 0x07 ; / / Arabic ( Tunisia ) 
 + public static final int SUBLANG _ ARABIC _ OMAN = 0x08 ; / / Arabic ( Oman ) 
 + public static final int SUBLANG _ ARABIC _ YEMEN = 0x09 ; / / Arabic ( Yemen ) 
 + public static final int SUBLANG _ ARABIC _ SYRIA = 0x0a ; / / Arabic ( Syria ) 
 + public static final int SUBLANG _ ARABIC _ JORDAN = 0x0b ; / / Arabic ( Jordan ) 
 + public static final int SUBLANG _ ARABIC _ LEBANON = 0x0c ; / / Arabic ( Lebanon ) 
 + public static final int SUBLANG _ ARABIC _ KUWAIT = 0x0d ; / / Arabic ( Kuwait ) 
 + public static final int SUBLANG _ ARABIC _ UAE = 0x0e ; / / Arabic ( U . A . E ) 
 + public static final int SUBLANG _ ARABIC _ BAHRAIN = 0x0f ; / / Arabic ( Bahrain ) 
 + public static final int SUBLANG _ ARABIC _ QATAR = 0x10 ; / / Arabic ( Qatar ) 
 + public static final int SUBLANG _ AZERI _ LATIN = 0x01 ; / / Azeri ( Latin ) 
 + public static final int SUBLANG _ AZERI _ CYRILLIC = 0x02 ; / / Azeri ( Cyrillic ) 
 + public static final int SUBLANG _ CHINESE _ TRADITIONAL = 0x01 ; / / Chinese ( Taiwan ) 
 + public static final int SUBLANG _ CHINESE _ SIMPLIFIED = 0x02 ; / / Chinese ( PR China ) 
 + public static final int SUBLANG _ CHINESE _ HONGKONG = 0x03 ; / / Chinese ( Hong Kong S . A . R . , P . R . C . ) 
 + public static final int SUBLANG _ CHINESE _ SINGAPORE = 0x04 ; / / Chinese ( Singapore ) 
 + public static final int SUBLANG _ CHINESE _ MACAU = 0x05 ; / / Chinese ( Macau S . A . R . ) 
 + public static final int SUBLANG _ DUTCH = 0x01 ; / / Dutch 
 + public static final int SUBLANG _ DUTCH _ BELGIAN = 0x02 ; / / Dutch ( Belgian ) 
 + public static final int SUBLANG _ ENGLISH _ US = 0x01 ; / / English ( USA ) 
 + public static final int SUBLANG _ ENGLISH _ UK = 0x02 ; / / English ( UK ) 
 + public static final int SUBLANG _ ENGLISH _ AUS = 0x03 ; / / English ( Australian ) 
 + public static final int SUBLANG _ ENGLISH _ CAN = 0x04 ; / / English ( Canadian ) 
 + public static final int SUBLANG _ ENGLISH _ NZ = 0x05 ; / / English ( New Zealand ) 
 + public static final int SUBLANG _ ENGLISH _ EIRE = 0x06 ; / / English ( Irish ) 
 + public static final int SUBLANG _ ENGLISH _ SOUTH _ AFRICA = 0x07 ; / / English ( South Africa ) 
 + public static final int SUBLANG _ ENGLISH _ JAMAICA = 0x08 ; / / English ( Jamaica ) 
 + public static final int SUBLANG _ ENGLISH _ CARIBBEAN = 0x09 ; / / English ( Caribbean ) 
 + public static final int SUBLANG _ ENGLISH _ BELIZE = 0x0a ; / / English ( Belize ) 
 + public static final int SUBLANG _ ENGLISH _ TRINIDAD = 0x0b ; / / English ( Trinidad ) 
 + public static final int SUBLANG _ ENGLISH _ ZIMBABWE = 0x0c ; / / English ( Zimbabwe ) 
 + public static final int SUBLANG _ ENGLISH _ PHILIPPINES = 0x0d ; / / English ( Philippines ) 
 + public static final int SUBLANG _ FRENCH = 0x01 ; / / French 
 + public static final int SUBLANG _ FRENCH _ BELGIAN = 0x02 ; / / French ( Belgian ) 
 + public static final int SUBLANG _ FRENCH _ CANADIAN = 0x03 ; / / French ( Canadian ) 
 + public static final int SUBLANG _ FRENCH _ SWISS = 0x04 ; / / French ( Swiss ) 
 + public static final int SUBLANG _ FRENCH _ LUXEMBOURG = 0x05 ; / / French ( Luxembourg ) 
 + public static final int SUBLANG _ FRENCH _ MONACO = 0x06 ; / / French ( Monaco ) 
 + public static final int SUBLANG _ GERMAN = 0x01 ; / / German 
 + public static final int SUBLANG _ GERMAN _ SWISS = 0x02 ; / / German ( Swiss ) 
 + public static final int SUBLANG _ GERMAN _ AUSTRIAN = 0x03 ; / / German ( Austrian ) 
 + public static final int SUBLANG _ GERMAN _ LUXEMBOURG = 0x04 ; / / German ( Luxembourg ) 
 + public static final int SUBLANG _ GERMAN _ LIECHTENSTEIN = 0x05 ; / / German ( Liechtenstein ) 
 + public static final int SUBLANG _ ITALIAN = 0x01 ; / / Italian 
 + public static final int SUBLANG _ ITALIAN _ SWISS = 0x02 ; / / Italian ( Swiss ) 
 + public static final int SUBLANG _ KASHMIRI _ SASIA = 0x02 ; / / Kashmiri ( South Asia ) 
 + public static final int SUBLANG _ KASHMIRI _ INDIA = 0x02 ; / / For app compatibility only 
 + public static final int SUBLANG _ KOREAN = 0x01 ; / / Korean ( Extended Wansung ) 
 + public static final int SUBLANG _ LITHUANIAN = 0x01 ; / / Lithuanian 
 + public static final int SUBLANG _ MALAY _ MALAYSIA = 0x01 ; / / Malay ( Malaysia ) 
 + public static final int SUBLANG _ MALAY _ BRUNEI _ DARUSSALAM = 0x02 ; / / Malay ( Brunei Darussalam ) 
 + public static final int SUBLANG _ NEPALI _ INDIA = 0x02 ; / / Nepali ( India ) 
 + public static final int SUBLANG _ NORWEGIAN _ BOKMAL = 0x01 ; / / Norwegian ( Bokmal ) 
 + public static final int SUBLANG _ NORWEGIAN _ NYNORSK = 0x02 ; / / Norwegian ( Nynorsk ) 
 + public static final int SUBLANG _ PORTUGUESE = 0x02 ; / / Portuguese 
 + public static final int SUBLANG _ PORTUGUESE _ BRAZILIAN = 0x01 ; / / Portuguese ( Brazilian ) 
 + public static final int SUBLANG _ SERBIAN _ LATIN = 0x02 ; / / Serbian ( Latin ) 
 + public static final int SUBLANG _ SERBIAN _ CYRILLIC = 0x03 ; / / Serbian ( Cyrillic ) 
 + public static final int SUBLANG _ SPANISH = 0x01 ; / / Spanish ( Castilian ) 
 + public static final int SUBLANG _ SPANISH _ MEXICAN = 0x02 ; / / Spanish ( Mexican ) 
 + public static final int SUBLANG _ SPANISH _ MODERN = 0x03 ; / / Spanish ( Spain ) 
 + public static final int SUBLANG _ SPANISH _ GUATEMALA = 0x04 ; / / Spanish ( Guatemala ) 
 + public static final int SUBLANG _ SPANISH _ COSTA _ RICA = 0x05 ; / / Spanish ( Costa Rica ) 
 + public static final int SUBLANG _ SPANISH _ PANAMA = 0x06 ; / / Spanish ( Panama ) 
 + public static final int SUBLANG _ SPANISH _ DOMINICAN _ REPUBLIC = 0x07 ; / / Spanish ( Dominican Republic ) 
 + public static final int SUBLANG _ SPANISH _ VENEZUELA = 0x08 ; / / Spanish ( Venezuela ) 
 + public static final int SUBLANG _ SPANISH _ COLOMBIA = 0x09 ; / / Spanish ( Colombia ) 
 + public static final int SUBLANG _ SPANISH _ PERU = 0x0a ; / / Spanish ( Peru ) 
 + public static final int SUBLANG _ SPANISH _ ARGENTINA = 0x0b ; / / Spanish ( Argentina ) 
 + public static final int SUBLANG _ SPANISH _ ECUADOR = 0x0c ; / / Spanish ( Ecuador ) 
 + public static final int SUBLANG _ SPANISH _ CHILE = 0x0d ; / / Spanish ( Chile ) 
 + public static final int SUBLANG _ SPANISH _ URUGUAY = 0x0e ; / / Spanish ( Uruguay ) 
 + public static final int SUBLANG _ SPANISH _ PARAGUAY = 0x0f ; / / Spanish ( Paraguay ) 
 + public static final int SUBLANG _ SPANISH _ BOLIVIA = 0x10 ; / / Spanish ( Bolivia ) 
 + public static final int SUBLANG _ SPANISH _ EL _ SALVADOR = 0x11 ; / / Spanish ( El Salvador ) 
 + public static final int SUBLANG _ SPANISH _ HONDURAS = 0x12 ; / / Spanish ( Honduras ) 
 + public static final int SUBLANG _ SPANISH _ NICARAGUA = 0x13 ; / / Spanish ( Nicaragua ) 
 + public static final int SUBLANG _ SPANISH _ PUERTO _ RICO = 0x14 ; / / Spanish ( Puerto Rico ) 
 + public static final int SUBLANG _ SWEDISH = 0x01 ; / / Swedish 
 + public static final int SUBLANG _ SWEDISH _ FINLAND = 0x02 ; / / Swedish ( Finland ) 
 + public static final int SUBLANG _ URDU _ PAKISTAN = 0x01 ; / / Urdu ( Pakistan ) 
 + public static final int SUBLANG _ URDU _ INDIA = 0x02 ; / / Urdu ( India ) 
 + public static final int SUBLANG _ UZBEK _ LATIN = 0x01 ; / / Uzbek ( Latin ) 
 + public static final int SUBLANG _ UZBEK _ CYRILLIC = 0x02 ; / / Uzbek ( Cyrillic ) 
 + 
 + / * 
 + * Sorting IDs . 
 + * / 
 + public static final int SORT _ DEFAULT = 0x0 ; / / sorting default 
 + 
 + public static final int SORT _ JAPANESE _ XJIS = 0x0 ; / / Japanese XJIS order 
 + public static final int SORT _ JAPANESE _ UNICODE = 0x1 ; / / Japanese Unicode order 
 + 
 + public static final int SORT _ CHINESE _ BIG5 = 0x0 ; / / Chinese BIG5 order 
 + public static final int SORT _ CHINESE _ PRCP = 0x0 ; / / PRC Chinese Phonetic order 
 + public static final int SORT _ CHINESE _ UNICODE = 0x1 ; / / Chinese Unicode order 
 + public static final int SORT _ CHINESE _ PRC = 0x2 ; / / PRC Chinese Stroke Count order 
 + public static final int SORT _ CHINESE _ BOPOMOFO = 0x3 ; / / Traditional Chinese Bopomofo order 
 + 
 + public static final int SORT _ KOREAN _ KSC = 0x0 ; / / Korean KSC order 
 + public static final int SORT _ KOREAN _ UNICODE = 0x1 ; / / Korean Unicode order 
 + 
 + public static final int SORT _ GERMAN _ PHONE _ BOOK = 0x1 ; / / German Phone Book order 
 + 
 + public static final int SORT _ HUNGARIAN _ DEFAULT = 0x0 ; / / Hungarian Default order 
 + public static final int SORT _ HUNGARIAN _ TECHNICAL = 0x1 ; / / Hungarian Technical order 
 + 
 + public static final int SORT _ GEORGIAN _ TRADITIONAL = 0x0 ; / / Georgian Traditional order 
 + public static final int SORT _ GEORGIAN _ MODERN = 0x1 ; / / Georgian Modern order 
 + 
 + public static final int NLS _ VALID _ LOCALE _ MASK = 0x000fffff ; 
 + 
 + / * * 
 + * < p > A language ID is a 16 bit value which is the combination of a 
 + * primary language ID and a secondary language ID . The bits are 
 + * allocated as follows : < / p > 
 + * 
 + * < pre > 
 + * + - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - + 
 + * | Sublanguage ID | Primary Language ID | 
 + * + - - - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - + 
 + * 15 10 9 0 bit 
 + * < / pre > 
 + * 
 + * < p > WARNING : This pattern isn ' t always follows , Serbina , Bosnian & Croation for example . < / p > 
 + * 
 + * < p > It is recommended that applications test for locale names or actual LCIDs . < / p > 
 + * 
 + * < p > Note that the LANG , SUBLANG construction is not always consistent . 
 + * The named locale APIs ( eg GetLocaleInfoEx ) are recommended . < / p > 
 + * 
 + * < p > Language IDs do not exist for all locales < / p > 
 + * 
 + * < p > A locale ID is a 32 bit value which is the combination of a 
 + * language ID , a sort ID , and a reserved area . The bits are 
 + * allocated as follows : < / p > 
 + * 
 + * < pre > 
 + * + - - - - - - - - - - - - - + - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - + 
 + * | Reserved | Sort ID | Language ID | 
 + * + - - - - - - - - - - - - - + - - - - - - - - - + - - - - - - - - - - - - - - - - - - - - - - - - - + 
 + * 31 20 19 16 15 0 bit 
 + * < / pre > 
 + * 
 + * < p > WARNING : This pattern isn ' t always followed ( es - ES _ tradnl vs es - ES for example ) < / p > 
 + * 
 + * < p > It is recommended that applications test for locale names or actual LCIDs . < / p > 
 + * / 
 + public static final class LocaleMacros { 
 + private static final int _ MAKELCID ( int lgid , int srtid ) { 
 + return ( srtid < < 16 ) | lgid ; 
 + } 
 + 
 + / * * 
 + * construct the locale id from a language id and a sort id . 
 + * 
 + * @ param lgid 
 + * @ param srtid 
 + * @ return 
 + * / 
 + public static final LCID MAKELCID ( int lgid , int srtid ) { 
 + return new LCID ( _ MAKELCID ( lgid , srtid ) ) ; 
 + } 
 + 
 + / * * 
 + * construct the locale id from a language id , sort id , and sort version . 
 + * 
 + * @ param lgid 
 + * @ param srtid 
 + * @ param ver 
 + * @ return 
 + * / 
 + public static final LCID MAKESORTLCID ( int lgid , int srtid , int ver ) { 
 + return new LCID ( _ MAKELCID ( lgid , srtid ) | ( ver < < 20 ) ) ; 
 + } 
 + 
 + / * * 
 + * extract the language id from a locale id . 
 + * 
 + * @ param lcid 
 + * @ return 
 + * / 
 + public static final int LANGIDFROMLCID ( LCID lcid ) { 
 + return lcid . intValue ( ) & 0xFFFF ; 
 + } 
 + 
 + / * * 
 + * extract the sort id from a locale id . 
 + * 
 + * @ param lcid 
 + * @ return 
 + * / 
 + public static final int SORTIDFROMLCID ( LCID lcid ) { 
 + return ( lcid . intValue ( ) > > > 16 ) & 0xf ; 
 + } 
 + 
 + / * * 
 + * extract the sort version from a locale id . 
 + * 
 + * @ param lcid 
 + * @ return 
 + * / 
 + public static final int SORTVERSIONFROMLCID ( LCID lcid ) { 
 + return ( lcid . intValue ( ) > > > 20 ) & 0xf ; 
 + } 
 + 
 + / * * 
 + * Construct language id from a primary language id and a sublanguage id . 
 + * 
 + * @ param p Language ID 
 + * @ param s Sublanguage ID 
 + * @ return 
 + * / 
 + public static final int MAKELANGID ( int p , int s ) { 
 + return ( s < < 10 ) | ( p & 0xFFFF ) ; 
 + } 
 + 
 + / * * 
 + * Extract primary language id from a language id . 
 + * 
 + * @ param lgid Language ID 
 + * @ return 
 + * / 
 + public static final int PRIMARYLANGID ( int lgid ) { 
 + return lgid & 0x3ff ; 
 + } 
 + 
 + / * * 
 + * Extract sublanguage id from a language id . 
 + * 
 + * @ param lgid Language ID 
 + * @ return 
 + * / 
 + public static final int SUBLANGID ( int lgid ) { 
 + return ( lgid & 0xFFFF ) > > > 10 ; 
 + } 
 + } 
 + 
 + public static final int LANG _ SYSTEM _ DEFAULT = LocaleMacros . MAKELANGID ( LANG _ NEUTRAL , SUBLANG _ SYS _ DEFAULT ) ; 
 + public static final int LANG _ USER _ DEFAULT = LocaleMacros . MAKELANGID ( LANG _ NEUTRAL , SUBLANG _ DEFAULT ) ; 
 + 
 + public static final LCID LOCALE _ SYSTEM _ DEFAULT = LocaleMacros . MAKELCID ( LANG _ SYSTEM _ DEFAULT , SORT _ DEFAULT ) ; 
 + public static final LCID LOCALE _ USER _ DEFAULT = LocaleMacros . MAKELCID ( LANG _ USER _ DEFAULT , SORT _ DEFAULT ) ; 
 + 
 + public static final LCID LOCALE _ NEUTRAL = LocaleMacros . MAKELCID ( LocaleMacros . MAKELANGID ( LANG _ NEUTRAL , SUBLANG _ NEUTRAL ) , SORT _ DEFAULT ) ; 
 + 
 + public static final LCID LOCALE _ INVARIANT = LocaleMacros . MAKELCID ( LocaleMacros . MAKELANGID ( LANG _ INVARIANT , SUBLANG _ NEUTRAL ) , SORT _ DEFAULT ) ; 
 }

NEAREST DIFF:
diff - - git a / jnalib / release - notes . html b / jnalib / release - notes . html 
 index f13d929 . . 7799567 100755 
 - - - a / jnalib / release - notes . html 
 + + + b / jnalib / release - notes . html 
 @ @ - 37 , 6 + 37 , 7 @ @ 
 < / ul > 
 < h3 > Bug Fixes < / h3 > 
 < ul > 
 + < li > Provide String . replace for 1 . 4 compatibility . 
 < li > Avoid allocating memory when Structure is provided a pointer in the ctor . 
 < li > Ensure proper value returned in Pointer . getValue ( ) for non - null , unchanged 
 NIO Buffer values . 
 diff - - git a / jnalib / src / com / sun / jna / Native . java b / jnalib / src / com / sun / jna / Native . java 
 index 834d120 . . 496686a 100644 
 - - - a / jnalib / src / com / sun / jna / Native . java 
 + + + b / jnalib / src / com / sun / jna / Native . java 
 @ @ - 1113 , 7 + 1113 , 25 @ @ public final class Native { 
 if ( cls = = float . class ) return " F " ; 
 if ( cls = = double . class ) return " D " ; 
 } 
 - return " L " + cls . getName ( ) . replace ( " . " , " / " ) + " ; " ; 
 + return " L " + replace ( " . " , " / " , cls . getName ( ) ) + " ; " ; 
 + } 
 + 
 + / / No String . replace available in 1 . 4 
 + static String replace ( String s1 , String s2 , String str ) { 
 + StringBuffer buf = new StringBuffer ( ) ; 
 + while ( true ) { 
 + int idx = str . indexOf ( s1 ) ; 
 + if ( idx = = - 1 ) { 
 + buf . append ( str ) ; 
 + break ; 
 + } 
 + else { 
 + buf . append ( str . substring ( 0 , idx ) ) ; 
 + buf . append ( s2 ) ; 
 + str = str . substring ( idx + s1 . length ( ) ) ; 
 + } 
 + } 
 + return buf . toString ( ) ; 
 } 
 
 private static final int CVT _ UNSUPPORTED = - 1 ; 
 diff - - git a / jnalib / test / com / sun / jna / NativeTest . java b / jnalib / test / com / sun / jna / NativeTest . java 
 index 1d35635 . . 7fc316a 100644 
 - - - a / jnalib / test / com / sun / jna / NativeTest . java 
 + + + b / jnalib / test / com / sun / jna / NativeTest . java 
 @ @ - 293 , 6 + 293 , 13 @ @ public class NativeTest extends TestCase { 
 Native . getTypeMapper ( TestCallback . class ) ) ; 
 } 
 
 + public void testStringReplace ( ) { 
 + assertEquals ( " Bad replace " , " abcdefg " , Native . replace ( " z " , " a " , " zbcdefg " ) ) ; 
 + assertEquals ( " Bad replace " , " abcdefg " , Native . replace ( " z " , " g " , " abcdefz " ) ) ; 
 + assertEquals ( " Bad replace " , " abcdefg " , Native . replace ( " z " , " d " , " abczefg " ) ) ; 
 + assertEquals ( " Bad replace " , " abcaefa " , Native . replace ( " z " , " a " , " zbczefz " ) ) ; 
 + } 
 + 
 public static void main ( String [ ] args ) { 
 junit . textui . TestRunner . run ( NativeTest . class ) ; 
 }
